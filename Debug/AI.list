
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .eeprom_emul  00000000  08008000  08008000  0004021c  2**0
                  CONTENTS
  2 .text         00016238  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004f04  08026238  08026238  00036238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0802b13c  0802b13c  0003b13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0802b144  0802b144  0003b144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0802b148  0802b148  0003b148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000021c  20000000  0802b14c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  0004021c  2**0
                  CONTENTS
  9 .bss          0000bd34  2000021c  2000021c  0004021c  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  2000bf50  2000bf50  0004021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00050441  00000000  00000000  0004024c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000989f  00000000  00000000  0009068d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022e8  00000000  00000000  00099f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ff0  00000000  00000000  0009c218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001782f  00000000  00000000  0009e208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a5fe  00000000  00000000  000b5a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000c0035  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008c64  00000000  00000000  000c00b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	2000021c 	.word	0x2000021c
 801001c:	00000000 	.word	0x00000000
 8010020:	08026220 	.word	0x08026220

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000220 	.word	0x20000220
 801003c:	08026220 	.word	0x08026220

08010040 <strcmp>:
 8010040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010048:	2a01      	cmp	r2, #1
 801004a:	bf28      	it	cs
 801004c:	429a      	cmpcs	r2, r3
 801004e:	d0f7      	beq.n	8010040 <strcmp>
 8010050:	1ad0      	subs	r0, r2, r3
 8010052:	4770      	bx	lr

08010054 <strlen>:
 8010054:	4603      	mov	r3, r0
 8010056:	f813 2b01 	ldrb.w	r2, [r3], #1
 801005a:	2a00      	cmp	r2, #0
 801005c:	d1fb      	bne.n	8010056 <strlen+0x2>
 801005e:	1a18      	subs	r0, r3, r0
 8010060:	3801      	subs	r0, #1
 8010062:	4770      	bx	lr

08010064 <__aeabi_uldivmod>:
 8010064:	b953      	cbnz	r3, 801007c <__aeabi_uldivmod+0x18>
 8010066:	b94a      	cbnz	r2, 801007c <__aeabi_uldivmod+0x18>
 8010068:	2900      	cmp	r1, #0
 801006a:	bf08      	it	eq
 801006c:	2800      	cmpeq	r0, #0
 801006e:	bf1c      	itt	ne
 8010070:	f04f 31ff 	movne.w	r1, #4294967295
 8010074:	f04f 30ff 	movne.w	r0, #4294967295
 8010078:	f000 b97a 	b.w	8010370 <__aeabi_idiv0>
 801007c:	f1ad 0c08 	sub.w	ip, sp, #8
 8010080:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010084:	f000 f806 	bl	8010094 <__udivmoddi4>
 8010088:	f8dd e004 	ldr.w	lr, [sp, #4]
 801008c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010090:	b004      	add	sp, #16
 8010092:	4770      	bx	lr

08010094 <__udivmoddi4>:
 8010094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010098:	468c      	mov	ip, r1
 801009a:	460d      	mov	r5, r1
 801009c:	4604      	mov	r4, r0
 801009e:	9e08      	ldr	r6, [sp, #32]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d151      	bne.n	8010148 <__udivmoddi4+0xb4>
 80100a4:	428a      	cmp	r2, r1
 80100a6:	4617      	mov	r7, r2
 80100a8:	d96d      	bls.n	8010186 <__udivmoddi4+0xf2>
 80100aa:	fab2 fe82 	clz	lr, r2
 80100ae:	f1be 0f00 	cmp.w	lr, #0
 80100b2:	d00b      	beq.n	80100cc <__udivmoddi4+0x38>
 80100b4:	f1ce 0c20 	rsb	ip, lr, #32
 80100b8:	fa01 f50e 	lsl.w	r5, r1, lr
 80100bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80100c0:	fa02 f70e 	lsl.w	r7, r2, lr
 80100c4:	ea4c 0c05 	orr.w	ip, ip, r5
 80100c8:	fa00 f40e 	lsl.w	r4, r0, lr
 80100cc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80100d0:	0c25      	lsrs	r5, r4, #16
 80100d2:	fbbc f8fa 	udiv	r8, ip, sl
 80100d6:	fa1f f987 	uxth.w	r9, r7
 80100da:	fb0a cc18 	mls	ip, sl, r8, ip
 80100de:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80100e2:	fb08 f309 	mul.w	r3, r8, r9
 80100e6:	42ab      	cmp	r3, r5
 80100e8:	d90a      	bls.n	8010100 <__udivmoddi4+0x6c>
 80100ea:	19ed      	adds	r5, r5, r7
 80100ec:	f108 32ff 	add.w	r2, r8, #4294967295
 80100f0:	f080 8123 	bcs.w	801033a <__udivmoddi4+0x2a6>
 80100f4:	42ab      	cmp	r3, r5
 80100f6:	f240 8120 	bls.w	801033a <__udivmoddi4+0x2a6>
 80100fa:	f1a8 0802 	sub.w	r8, r8, #2
 80100fe:	443d      	add	r5, r7
 8010100:	1aed      	subs	r5, r5, r3
 8010102:	b2a4      	uxth	r4, r4
 8010104:	fbb5 f0fa 	udiv	r0, r5, sl
 8010108:	fb0a 5510 	mls	r5, sl, r0, r5
 801010c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010110:	fb00 f909 	mul.w	r9, r0, r9
 8010114:	45a1      	cmp	r9, r4
 8010116:	d909      	bls.n	801012c <__udivmoddi4+0x98>
 8010118:	19e4      	adds	r4, r4, r7
 801011a:	f100 33ff 	add.w	r3, r0, #4294967295
 801011e:	f080 810a 	bcs.w	8010336 <__udivmoddi4+0x2a2>
 8010122:	45a1      	cmp	r9, r4
 8010124:	f240 8107 	bls.w	8010336 <__udivmoddi4+0x2a2>
 8010128:	3802      	subs	r0, #2
 801012a:	443c      	add	r4, r7
 801012c:	eba4 0409 	sub.w	r4, r4, r9
 8010130:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010134:	2100      	movs	r1, #0
 8010136:	2e00      	cmp	r6, #0
 8010138:	d061      	beq.n	80101fe <__udivmoddi4+0x16a>
 801013a:	fa24 f40e 	lsr.w	r4, r4, lr
 801013e:	2300      	movs	r3, #0
 8010140:	6034      	str	r4, [r6, #0]
 8010142:	6073      	str	r3, [r6, #4]
 8010144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010148:	428b      	cmp	r3, r1
 801014a:	d907      	bls.n	801015c <__udivmoddi4+0xc8>
 801014c:	2e00      	cmp	r6, #0
 801014e:	d054      	beq.n	80101fa <__udivmoddi4+0x166>
 8010150:	2100      	movs	r1, #0
 8010152:	e886 0021 	stmia.w	r6, {r0, r5}
 8010156:	4608      	mov	r0, r1
 8010158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015c:	fab3 f183 	clz	r1, r3
 8010160:	2900      	cmp	r1, #0
 8010162:	f040 808e 	bne.w	8010282 <__udivmoddi4+0x1ee>
 8010166:	42ab      	cmp	r3, r5
 8010168:	d302      	bcc.n	8010170 <__udivmoddi4+0xdc>
 801016a:	4282      	cmp	r2, r0
 801016c:	f200 80fa 	bhi.w	8010364 <__udivmoddi4+0x2d0>
 8010170:	1a84      	subs	r4, r0, r2
 8010172:	eb65 0503 	sbc.w	r5, r5, r3
 8010176:	2001      	movs	r0, #1
 8010178:	46ac      	mov	ip, r5
 801017a:	2e00      	cmp	r6, #0
 801017c:	d03f      	beq.n	80101fe <__udivmoddi4+0x16a>
 801017e:	e886 1010 	stmia.w	r6, {r4, ip}
 8010182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010186:	b912      	cbnz	r2, 801018e <__udivmoddi4+0xfa>
 8010188:	2701      	movs	r7, #1
 801018a:	fbb7 f7f2 	udiv	r7, r7, r2
 801018e:	fab7 fe87 	clz	lr, r7
 8010192:	f1be 0f00 	cmp.w	lr, #0
 8010196:	d134      	bne.n	8010202 <__udivmoddi4+0x16e>
 8010198:	1beb      	subs	r3, r5, r7
 801019a:	0c3a      	lsrs	r2, r7, #16
 801019c:	fa1f fc87 	uxth.w	ip, r7
 80101a0:	2101      	movs	r1, #1
 80101a2:	fbb3 f8f2 	udiv	r8, r3, r2
 80101a6:	0c25      	lsrs	r5, r4, #16
 80101a8:	fb02 3318 	mls	r3, r2, r8, r3
 80101ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80101b0:	fb0c f308 	mul.w	r3, ip, r8
 80101b4:	42ab      	cmp	r3, r5
 80101b6:	d907      	bls.n	80101c8 <__udivmoddi4+0x134>
 80101b8:	19ed      	adds	r5, r5, r7
 80101ba:	f108 30ff 	add.w	r0, r8, #4294967295
 80101be:	d202      	bcs.n	80101c6 <__udivmoddi4+0x132>
 80101c0:	42ab      	cmp	r3, r5
 80101c2:	f200 80d1 	bhi.w	8010368 <__udivmoddi4+0x2d4>
 80101c6:	4680      	mov	r8, r0
 80101c8:	1aed      	subs	r5, r5, r3
 80101ca:	b2a3      	uxth	r3, r4
 80101cc:	fbb5 f0f2 	udiv	r0, r5, r2
 80101d0:	fb02 5510 	mls	r5, r2, r0, r5
 80101d4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80101d8:	fb0c fc00 	mul.w	ip, ip, r0
 80101dc:	45a4      	cmp	ip, r4
 80101de:	d907      	bls.n	80101f0 <__udivmoddi4+0x15c>
 80101e0:	19e4      	adds	r4, r4, r7
 80101e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80101e6:	d202      	bcs.n	80101ee <__udivmoddi4+0x15a>
 80101e8:	45a4      	cmp	ip, r4
 80101ea:	f200 80b8 	bhi.w	801035e <__udivmoddi4+0x2ca>
 80101ee:	4618      	mov	r0, r3
 80101f0:	eba4 040c 	sub.w	r4, r4, ip
 80101f4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80101f8:	e79d      	b.n	8010136 <__udivmoddi4+0xa2>
 80101fa:	4631      	mov	r1, r6
 80101fc:	4630      	mov	r0, r6
 80101fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010202:	f1ce 0420 	rsb	r4, lr, #32
 8010206:	fa05 f30e 	lsl.w	r3, r5, lr
 801020a:	fa07 f70e 	lsl.w	r7, r7, lr
 801020e:	fa20 f804 	lsr.w	r8, r0, r4
 8010212:	0c3a      	lsrs	r2, r7, #16
 8010214:	fa25 f404 	lsr.w	r4, r5, r4
 8010218:	ea48 0803 	orr.w	r8, r8, r3
 801021c:	fbb4 f1f2 	udiv	r1, r4, r2
 8010220:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8010224:	fb02 4411 	mls	r4, r2, r1, r4
 8010228:	fa1f fc87 	uxth.w	ip, r7
 801022c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8010230:	fb01 f30c 	mul.w	r3, r1, ip
 8010234:	42ab      	cmp	r3, r5
 8010236:	fa00 f40e 	lsl.w	r4, r0, lr
 801023a:	d909      	bls.n	8010250 <__udivmoddi4+0x1bc>
 801023c:	19ed      	adds	r5, r5, r7
 801023e:	f101 30ff 	add.w	r0, r1, #4294967295
 8010242:	f080 808a 	bcs.w	801035a <__udivmoddi4+0x2c6>
 8010246:	42ab      	cmp	r3, r5
 8010248:	f240 8087 	bls.w	801035a <__udivmoddi4+0x2c6>
 801024c:	3902      	subs	r1, #2
 801024e:	443d      	add	r5, r7
 8010250:	1aeb      	subs	r3, r5, r3
 8010252:	fa1f f588 	uxth.w	r5, r8
 8010256:	fbb3 f0f2 	udiv	r0, r3, r2
 801025a:	fb02 3310 	mls	r3, r2, r0, r3
 801025e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8010262:	fb00 f30c 	mul.w	r3, r0, ip
 8010266:	42ab      	cmp	r3, r5
 8010268:	d907      	bls.n	801027a <__udivmoddi4+0x1e6>
 801026a:	19ed      	adds	r5, r5, r7
 801026c:	f100 38ff 	add.w	r8, r0, #4294967295
 8010270:	d26f      	bcs.n	8010352 <__udivmoddi4+0x2be>
 8010272:	42ab      	cmp	r3, r5
 8010274:	d96d      	bls.n	8010352 <__udivmoddi4+0x2be>
 8010276:	3802      	subs	r0, #2
 8010278:	443d      	add	r5, r7
 801027a:	1aeb      	subs	r3, r5, r3
 801027c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8010280:	e78f      	b.n	80101a2 <__udivmoddi4+0x10e>
 8010282:	f1c1 0720 	rsb	r7, r1, #32
 8010286:	fa22 f807 	lsr.w	r8, r2, r7
 801028a:	408b      	lsls	r3, r1
 801028c:	fa05 f401 	lsl.w	r4, r5, r1
 8010290:	ea48 0303 	orr.w	r3, r8, r3
 8010294:	fa20 fe07 	lsr.w	lr, r0, r7
 8010298:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 801029c:	40fd      	lsrs	r5, r7
 801029e:	ea4e 0e04 	orr.w	lr, lr, r4
 80102a2:	fbb5 f9fc 	udiv	r9, r5, ip
 80102a6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80102aa:	fb0c 5519 	mls	r5, ip, r9, r5
 80102ae:	fa1f f883 	uxth.w	r8, r3
 80102b2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80102b6:	fb09 f408 	mul.w	r4, r9, r8
 80102ba:	42ac      	cmp	r4, r5
 80102bc:	fa02 f201 	lsl.w	r2, r2, r1
 80102c0:	fa00 fa01 	lsl.w	sl, r0, r1
 80102c4:	d908      	bls.n	80102d8 <__udivmoddi4+0x244>
 80102c6:	18ed      	adds	r5, r5, r3
 80102c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80102cc:	d243      	bcs.n	8010356 <__udivmoddi4+0x2c2>
 80102ce:	42ac      	cmp	r4, r5
 80102d0:	d941      	bls.n	8010356 <__udivmoddi4+0x2c2>
 80102d2:	f1a9 0902 	sub.w	r9, r9, #2
 80102d6:	441d      	add	r5, r3
 80102d8:	1b2d      	subs	r5, r5, r4
 80102da:	fa1f fe8e 	uxth.w	lr, lr
 80102de:	fbb5 f0fc 	udiv	r0, r5, ip
 80102e2:	fb0c 5510 	mls	r5, ip, r0, r5
 80102e6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80102ea:	fb00 f808 	mul.w	r8, r0, r8
 80102ee:	45a0      	cmp	r8, r4
 80102f0:	d907      	bls.n	8010302 <__udivmoddi4+0x26e>
 80102f2:	18e4      	adds	r4, r4, r3
 80102f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80102f8:	d229      	bcs.n	801034e <__udivmoddi4+0x2ba>
 80102fa:	45a0      	cmp	r8, r4
 80102fc:	d927      	bls.n	801034e <__udivmoddi4+0x2ba>
 80102fe:	3802      	subs	r0, #2
 8010300:	441c      	add	r4, r3
 8010302:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010306:	eba4 0408 	sub.w	r4, r4, r8
 801030a:	fba0 8902 	umull	r8, r9, r0, r2
 801030e:	454c      	cmp	r4, r9
 8010310:	46c6      	mov	lr, r8
 8010312:	464d      	mov	r5, r9
 8010314:	d315      	bcc.n	8010342 <__udivmoddi4+0x2ae>
 8010316:	d012      	beq.n	801033e <__udivmoddi4+0x2aa>
 8010318:	b156      	cbz	r6, 8010330 <__udivmoddi4+0x29c>
 801031a:	ebba 030e 	subs.w	r3, sl, lr
 801031e:	eb64 0405 	sbc.w	r4, r4, r5
 8010322:	fa04 f707 	lsl.w	r7, r4, r7
 8010326:	40cb      	lsrs	r3, r1
 8010328:	431f      	orrs	r7, r3
 801032a:	40cc      	lsrs	r4, r1
 801032c:	6037      	str	r7, [r6, #0]
 801032e:	6074      	str	r4, [r6, #4]
 8010330:	2100      	movs	r1, #0
 8010332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010336:	4618      	mov	r0, r3
 8010338:	e6f8      	b.n	801012c <__udivmoddi4+0x98>
 801033a:	4690      	mov	r8, r2
 801033c:	e6e0      	b.n	8010100 <__udivmoddi4+0x6c>
 801033e:	45c2      	cmp	sl, r8
 8010340:	d2ea      	bcs.n	8010318 <__udivmoddi4+0x284>
 8010342:	ebb8 0e02 	subs.w	lr, r8, r2
 8010346:	eb69 0503 	sbc.w	r5, r9, r3
 801034a:	3801      	subs	r0, #1
 801034c:	e7e4      	b.n	8010318 <__udivmoddi4+0x284>
 801034e:	4628      	mov	r0, r5
 8010350:	e7d7      	b.n	8010302 <__udivmoddi4+0x26e>
 8010352:	4640      	mov	r0, r8
 8010354:	e791      	b.n	801027a <__udivmoddi4+0x1e6>
 8010356:	4681      	mov	r9, r0
 8010358:	e7be      	b.n	80102d8 <__udivmoddi4+0x244>
 801035a:	4601      	mov	r1, r0
 801035c:	e778      	b.n	8010250 <__udivmoddi4+0x1bc>
 801035e:	3802      	subs	r0, #2
 8010360:	443c      	add	r4, r7
 8010362:	e745      	b.n	80101f0 <__udivmoddi4+0x15c>
 8010364:	4608      	mov	r0, r1
 8010366:	e708      	b.n	801017a <__udivmoddi4+0xe6>
 8010368:	f1a8 0802 	sub.w	r8, r8, #2
 801036c:	443d      	add	r5, r7
 801036e:	e72b      	b.n	80101c8 <__udivmoddi4+0x134>

08010370 <__aeabi_idiv0>:
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop

08010374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010378:	4a0e      	ldr	r2, [pc, #56]	; (80103b4 <HAL_Init+0x40>)
 801037a:	4b0e      	ldr	r3, [pc, #56]	; (80103b4 <HAL_Init+0x40>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010384:	4a0b      	ldr	r2, [pc, #44]	; (80103b4 <HAL_Init+0x40>)
 8010386:	4b0b      	ldr	r3, [pc, #44]	; (80103b4 <HAL_Init+0x40>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801038e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010390:	4a08      	ldr	r2, [pc, #32]	; (80103b4 <HAL_Init+0x40>)
 8010392:	4b08      	ldr	r3, [pc, #32]	; (80103b4 <HAL_Init+0x40>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801039a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801039c:	2003      	movs	r0, #3
 801039e:	f000 f90e 	bl	80105be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80103a2:	2000      	movs	r0, #0
 80103a4:	f014 fddc 	bl	8024f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80103a8:	f014 fdae 	bl	8024f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80103ac:	2300      	movs	r3, #0
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	40023c00 	.word	0x40023c00

080103b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80103b8:	b480      	push	{r7}
 80103ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80103bc:	4b06      	ldr	r3, [pc, #24]	; (80103d8 <HAL_IncTick+0x20>)
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	461a      	mov	r2, r3
 80103c2:	4b06      	ldr	r3, [pc, #24]	; (80103dc <HAL_IncTick+0x24>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4413      	add	r3, r2
 80103c8:	4a04      	ldr	r2, [pc, #16]	; (80103dc <HAL_IncTick+0x24>)
 80103ca:	6013      	str	r3, [r2, #0]
}
 80103cc:	bf00      	nop
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	20000000 	.word	0x20000000
 80103dc:	20004550 	.word	0x20004550

080103e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80103e0:	b480      	push	{r7}
 80103e2:	af00      	add	r7, sp, #0
  return uwTick;
 80103e4:	4b03      	ldr	r3, [pc, #12]	; (80103f4 <HAL_GetTick+0x14>)
 80103e6:	681b      	ldr	r3, [r3, #0]
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	20004550 	.word	0x20004550

080103f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010400:	f7ff ffee 	bl	80103e0 <HAL_GetTick>
 8010404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010410:	d005      	beq.n	801041e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010412:	4b09      	ldr	r3, [pc, #36]	; (8010438 <HAL_Delay+0x40>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	461a      	mov	r2, r3
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	4413      	add	r3, r2
 801041c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801041e:	bf00      	nop
 8010420:	f7ff ffde 	bl	80103e0 <HAL_GetTick>
 8010424:	4602      	mov	r2, r0
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	1ad2      	subs	r2, r2, r3
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	429a      	cmp	r2, r3
 801042e:	d3f7      	bcc.n	8010420 <HAL_Delay+0x28>
  {
  }
}
 8010430:	bf00      	nop
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	20000000 	.word	0x20000000

0801043c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801043c:	b480      	push	{r7}
 801043e:	b085      	sub	sp, #20
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f003 0307 	and.w	r3, r3, #7
 801044a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801044c:	4b0c      	ldr	r3, [pc, #48]	; (8010480 <NVIC_SetPriorityGrouping+0x44>)
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010458:	4013      	ands	r3, r2
 801045a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801046c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801046e:	4a04      	ldr	r2, [pc, #16]	; (8010480 <NVIC_SetPriorityGrouping+0x44>)
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	60d3      	str	r3, [r2, #12]
}
 8010474:	bf00      	nop
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr
 8010480:	e000ed00 	.word	0xe000ed00

08010484 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8010484:	b480      	push	{r7}
 8010486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010488:	4b04      	ldr	r3, [pc, #16]	; (801049c <NVIC_GetPriorityGrouping+0x18>)
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	0a1b      	lsrs	r3, r3, #8
 801048e:	f003 0307 	and.w	r3, r3, #7
}
 8010492:	4618      	mov	r0, r3
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr
 801049c:	e000ed00 	.word	0xe000ed00

080104a0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80104aa:	4909      	ldr	r1, [pc, #36]	; (80104d0 <NVIC_EnableIRQ+0x30>)
 80104ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104b0:	095b      	lsrs	r3, r3, #5
 80104b2:	79fa      	ldrb	r2, [r7, #7]
 80104b4:	f002 021f 	and.w	r2, r2, #31
 80104b8:	2001      	movs	r0, #1
 80104ba:	fa00 f202 	lsl.w	r2, r0, r2
 80104be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80104c2:	bf00      	nop
 80104c4:	370c      	adds	r7, #12
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	e000e100 	.word	0xe000e100

080104d4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	4603      	mov	r3, r0
 80104dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80104de:	4909      	ldr	r1, [pc, #36]	; (8010504 <NVIC_DisableIRQ+0x30>)
 80104e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104e4:	095b      	lsrs	r3, r3, #5
 80104e6:	79fa      	ldrb	r2, [r7, #7]
 80104e8:	f002 021f 	and.w	r2, r2, #31
 80104ec:	2001      	movs	r0, #1
 80104ee:	fa00 f202 	lsl.w	r2, r0, r2
 80104f2:	3320      	adds	r3, #32
 80104f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80104f8:	bf00      	nop
 80104fa:	370c      	adds	r7, #12
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr
 8010504:	e000e100 	.word	0xe000e100

08010508 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010508:	b480      	push	{r7}
 801050a:	b083      	sub	sp, #12
 801050c:	af00      	add	r7, sp, #0
 801050e:	4603      	mov	r3, r0
 8010510:	6039      	str	r1, [r7, #0]
 8010512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8010514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010518:	2b00      	cmp	r3, #0
 801051a:	da0b      	bge.n	8010534 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801051c:	490d      	ldr	r1, [pc, #52]	; (8010554 <NVIC_SetPriority+0x4c>)
 801051e:	79fb      	ldrb	r3, [r7, #7]
 8010520:	f003 030f 	and.w	r3, r3, #15
 8010524:	3b04      	subs	r3, #4
 8010526:	683a      	ldr	r2, [r7, #0]
 8010528:	b2d2      	uxtb	r2, r2
 801052a:	0112      	lsls	r2, r2, #4
 801052c:	b2d2      	uxtb	r2, r2
 801052e:	440b      	add	r3, r1
 8010530:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010532:	e009      	b.n	8010548 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010534:	4908      	ldr	r1, [pc, #32]	; (8010558 <NVIC_SetPriority+0x50>)
 8010536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801053a:	683a      	ldr	r2, [r7, #0]
 801053c:	b2d2      	uxtb	r2, r2
 801053e:	0112      	lsls	r2, r2, #4
 8010540:	b2d2      	uxtb	r2, r2
 8010542:	440b      	add	r3, r1
 8010544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr
 8010554:	e000ed00 	.word	0xe000ed00
 8010558:	e000e100 	.word	0xe000e100

0801055c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801055c:	b480      	push	{r7}
 801055e:	b089      	sub	sp, #36	; 0x24
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f003 0307 	and.w	r3, r3, #7
 801056e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	f1c3 0307 	rsb	r3, r3, #7
 8010576:	2b04      	cmp	r3, #4
 8010578:	bf28      	it	cs
 801057a:	2304      	movcs	r3, #4
 801057c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	3304      	adds	r3, #4
 8010582:	2b06      	cmp	r3, #6
 8010584:	d902      	bls.n	801058c <NVIC_EncodePriority+0x30>
 8010586:	69fb      	ldr	r3, [r7, #28]
 8010588:	3b03      	subs	r3, #3
 801058a:	e000      	b.n	801058e <NVIC_EncodePriority+0x32>
 801058c:	2300      	movs	r3, #0
 801058e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010590:	2201      	movs	r2, #1
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	fa02 f303 	lsl.w	r3, r2, r3
 8010598:	1e5a      	subs	r2, r3, #1
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	401a      	ands	r2, r3
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80105a2:	2101      	movs	r1, #1
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	fa01 f303 	lsl.w	r3, r1, r3
 80105aa:	1e59      	subs	r1, r3, #1
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80105b0:	4313      	orrs	r3, r2
         );
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3724      	adds	r7, #36	; 0x24
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr

080105be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b082      	sub	sp, #8
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f7ff ff38 	bl	801043c <NVIC_SetPriorityGrouping>
}
 80105cc:	bf00      	nop
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b086      	sub	sp, #24
 80105d8:	af00      	add	r7, sp, #0
 80105da:	4603      	mov	r3, r0
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	607a      	str	r2, [r7, #4]
 80105e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80105e2:	2300      	movs	r3, #0
 80105e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80105e6:	f7ff ff4d 	bl	8010484 <NVIC_GetPriorityGrouping>
 80105ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	68b9      	ldr	r1, [r7, #8]
 80105f0:	6978      	ldr	r0, [r7, #20]
 80105f2:	f7ff ffb3 	bl	801055c <NVIC_EncodePriority>
 80105f6:	4602      	mov	r2, r0
 80105f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105fc:	4611      	mov	r1, r2
 80105fe:	4618      	mov	r0, r3
 8010600:	f7ff ff82 	bl	8010508 <NVIC_SetPriority>
}
 8010604:	bf00      	nop
 8010606:	3718      	adds	r7, #24
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	4603      	mov	r3, r0
 8010614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801061a:	4618      	mov	r0, r3
 801061c:	f7ff ff40 	bl	80104a0 <NVIC_EnableIRQ>
}
 8010620:	bf00      	nop
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	4603      	mov	r3, r0
 8010630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8010632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010636:	4618      	mov	r0, r3
 8010638:	f7ff ff4c 	bl	80104d4 <NVIC_DisableIRQ>
}
 801063c:	bf00      	nop
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801064c:	2300      	movs	r3, #0
 801064e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8010650:	f7ff fec6 	bl	80103e0 <HAL_GetTick>
 8010654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d101      	bne.n	8010660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801065c:	2301      	movs	r3, #1
 801065e:	e099      	b.n	8010794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2202      	movs	r2, #2
 801066c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	6812      	ldr	r2, [r2, #0]
 8010678:	6812      	ldr	r2, [r2, #0]
 801067a:	f022 0201 	bic.w	r2, r2, #1
 801067e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010680:	e00f      	b.n	80106a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010682:	f7ff fead 	bl	80103e0 <HAL_GetTick>
 8010686:	4602      	mov	r2, r0
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	1ad3      	subs	r3, r2, r3
 801068c:	2b05      	cmp	r3, #5
 801068e:	d908      	bls.n	80106a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2220      	movs	r2, #32
 8010694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2203      	movs	r2, #3
 801069a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801069e:	2303      	movs	r3, #3
 80106a0:	e078      	b.n	8010794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f003 0301 	and.w	r3, r3, #1
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1e8      	bne.n	8010682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80106b8:	697a      	ldr	r2, [r7, #20]
 80106ba:	4b38      	ldr	r3, [pc, #224]	; (801079c <HAL_DMA_Init+0x158>)
 80106bc:	4013      	ands	r3, r2
 80106be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	685a      	ldr	r2, [r3, #4]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80106ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	691b      	ldr	r3, [r3, #16]
 80106d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80106da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	699b      	ldr	r3, [r3, #24]
 80106e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6a1b      	ldr	r3, [r3, #32]
 80106ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80106ee:	697a      	ldr	r2, [r7, #20]
 80106f0:	4313      	orrs	r3, r2
 80106f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f8:	2b04      	cmp	r3, #4
 80106fa:	d107      	bne.n	801070c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010704:	4313      	orrs	r3, r2
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	4313      	orrs	r3, r2
 801070a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	695b      	ldr	r3, [r3, #20]
 801071a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	f023 0307 	bic.w	r3, r3, #7
 8010722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010728:	697a      	ldr	r2, [r7, #20]
 801072a:	4313      	orrs	r3, r2
 801072c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010732:	2b04      	cmp	r3, #4
 8010734:	d117      	bne.n	8010766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801073a:	697a      	ldr	r2, [r7, #20]
 801073c:	4313      	orrs	r3, r2
 801073e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00e      	beq.n	8010766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 fae5 	bl	8010d18 <DMA_CheckFifoParam>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d008      	beq.n	8010766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2240      	movs	r2, #64	; 0x40
 8010758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2201      	movs	r2, #1
 801075e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8010762:	2301      	movs	r3, #1
 8010764:	e016      	b.n	8010794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	697a      	ldr	r2, [r7, #20]
 801076c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 fa9c 	bl	8010cac <DMA_CalcBaseAndBitshift>
 8010774:	4603      	mov	r3, r0
 8010776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801077c:	223f      	movs	r2, #63	; 0x3f
 801077e:	409a      	lsls	r2, r3
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2200      	movs	r2, #0
 8010788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2201      	movs	r2, #1
 801078e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3718      	adds	r7, #24
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	f010803f 	.word	0xf010803f

080107a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d101      	bne.n	80107b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80107ae:	2301      	movs	r3, #1
 80107b0:	e03e      	b.n	8010830 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d101      	bne.n	80107c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80107be:	2302      	movs	r3, #2
 80107c0:	e036      	b.n	8010830 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	6812      	ldr	r2, [r2, #0]
 80107ca:	6812      	ldr	r2, [r2, #0]
 80107cc:	f022 0201 	bic.w	r2, r2, #1
 80107d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2200      	movs	r2, #0
 80107d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	2200      	movs	r2, #0
 80107e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2200      	movs	r2, #0
 80107e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	2200      	movs	r2, #0
 80107f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2200      	movs	r2, #0
 80107f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2221      	movs	r2, #33	; 0x21
 8010800:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 fa52 	bl	8010cac <DMA_CalcBaseAndBitshift>
 8010808:	4603      	mov	r3, r0
 801080a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010810:	223f      	movs	r2, #63	; 0x3f
 8010812:	409a      	lsls	r2, r3
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2200      	movs	r2, #0
 8010822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2200      	movs	r2, #0
 801082a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801082e:	2300      	movs	r3, #0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
 8010844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801084e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010856:	2b01      	cmp	r3, #1
 8010858:	d101      	bne.n	801085e <HAL_DMA_Start_IT+0x26>
 801085a:	2302      	movs	r3, #2
 801085c:	e048      	b.n	80108f0 <HAL_DMA_Start_IT+0xb8>
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2201      	movs	r2, #1
 8010862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801086c:	b2db      	uxtb	r3, r3
 801086e:	2b01      	cmp	r3, #1
 8010870:	d137      	bne.n	80108e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2202      	movs	r2, #2
 8010876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2200      	movs	r2, #0
 801087e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	68b9      	ldr	r1, [r7, #8]
 8010886:	68f8      	ldr	r0, [r7, #12]
 8010888:	f000 f9e2 	bl	8010c50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010890:	223f      	movs	r2, #63	; 0x3f
 8010892:	409a      	lsls	r2, r3
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	6812      	ldr	r2, [r2, #0]
 80108a0:	6812      	ldr	r2, [r2, #0]
 80108a2:	f042 0216 	orr.w	r2, r2, #22
 80108a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	6812      	ldr	r2, [r2, #0]
 80108b0:	6952      	ldr	r2, [r2, #20]
 80108b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80108b6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d007      	beq.n	80108d0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	68fa      	ldr	r2, [r7, #12]
 80108c6:	6812      	ldr	r2, [r2, #0]
 80108c8:	6812      	ldr	r2, [r2, #0]
 80108ca:	f042 0208 	orr.w	r2, r2, #8
 80108ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	6812      	ldr	r2, [r2, #0]
 80108d8:	6812      	ldr	r2, [r2, #0]
 80108da:	f042 0201 	orr.w	r2, r2, #1
 80108de:	601a      	str	r2, [r3, #0]
 80108e0:	e005      	b.n	80108ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80108ea:	2302      	movs	r3, #2
 80108ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80108ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3718      	adds	r7, #24
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010906:	b2db      	uxtb	r3, r3
 8010908:	2b02      	cmp	r3, #2
 801090a:	d004      	beq.n	8010916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2280      	movs	r2, #128	; 0x80
 8010910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010912:	2301      	movs	r3, #1
 8010914:	e00c      	b.n	8010930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2205      	movs	r2, #5
 801091a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	6812      	ldr	r2, [r2, #0]
 8010926:	6812      	ldr	r2, [r2, #0]
 8010928:	f022 0201 	bic.w	r2, r2, #1
 801092c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801092e:	2300      	movs	r3, #0
}
 8010930:	4618      	mov	r0, r3
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b086      	sub	sp, #24
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010944:	2300      	movs	r3, #0
 8010946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010948:	4b92      	ldr	r3, [pc, #584]	; (8010b94 <HAL_DMA_IRQHandler+0x258>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4a92      	ldr	r2, [pc, #584]	; (8010b98 <HAL_DMA_IRQHandler+0x25c>)
 801094e:	fba2 2303 	umull	r2, r3, r2, r3
 8010952:	0a9b      	lsrs	r3, r3, #10
 8010954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801095a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010966:	2208      	movs	r2, #8
 8010968:	409a      	lsls	r2, r3
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	4013      	ands	r3, r2
 801096e:	2b00      	cmp	r3, #0
 8010970:	d01a      	beq.n	80109a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f003 0304 	and.w	r3, r3, #4
 801097c:	2b00      	cmp	r3, #0
 801097e:	d013      	beq.n	80109a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	6812      	ldr	r2, [r2, #0]
 8010988:	6812      	ldr	r2, [r2, #0]
 801098a:	f022 0204 	bic.w	r2, r2, #4
 801098e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010994:	2208      	movs	r2, #8
 8010996:	409a      	lsls	r2, r3
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109a0:	f043 0201 	orr.w	r2, r3, #1
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109ac:	2201      	movs	r2, #1
 80109ae:	409a      	lsls	r2, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	4013      	ands	r3, r2
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d012      	beq.n	80109de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	695b      	ldr	r3, [r3, #20]
 80109be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00b      	beq.n	80109de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109ca:	2201      	movs	r2, #1
 80109cc:	409a      	lsls	r2, r3
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109d6:	f043 0202 	orr.w	r2, r3, #2
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109e2:	2204      	movs	r2, #4
 80109e4:	409a      	lsls	r2, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	4013      	ands	r3, r2
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d012      	beq.n	8010a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f003 0302 	and.w	r3, r3, #2
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00b      	beq.n	8010a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a00:	2204      	movs	r2, #4
 8010a02:	409a      	lsls	r2, r3
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a0c:	f043 0204 	orr.w	r2, r3, #4
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a18:	2210      	movs	r2, #16
 8010a1a:	409a      	lsls	r2, r3
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	4013      	ands	r3, r2
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d043      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f003 0308 	and.w	r3, r3, #8
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d03c      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a36:	2210      	movs	r2, #16
 8010a38:	409a      	lsls	r2, r3
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d018      	beq.n	8010a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d108      	bne.n	8010a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d024      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	4798      	blx	r3
 8010a6a:	e01f      	b.n	8010aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d01b      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	4798      	blx	r3
 8010a7c:	e016      	b.n	8010aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d107      	bne.n	8010a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	6812      	ldr	r2, [r2, #0]
 8010a94:	6812      	ldr	r2, [r2, #0]
 8010a96:	f022 0208 	bic.w	r2, r2, #8
 8010a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d003      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ab0:	2220      	movs	r2, #32
 8010ab2:	409a      	lsls	r2, r3
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	4013      	ands	r3, r2
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 808e 	beq.w	8010bda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f003 0310 	and.w	r3, r3, #16
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f000 8086 	beq.w	8010bda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	409a      	lsls	r2, r3
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	2b05      	cmp	r3, #5
 8010ae4:	d136      	bne.n	8010b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	6812      	ldr	r2, [r2, #0]
 8010aee:	6812      	ldr	r2, [r2, #0]
 8010af0:	f022 0216 	bic.w	r2, r2, #22
 8010af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	6812      	ldr	r2, [r2, #0]
 8010afe:	6952      	ldr	r2, [r2, #20]
 8010b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d103      	bne.n	8010b16 <HAL_DMA_IRQHandler+0x1da>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d007      	beq.n	8010b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	6812      	ldr	r2, [r2, #0]
 8010b1e:	6812      	ldr	r2, [r2, #0]
 8010b20:	f022 0208 	bic.w	r2, r2, #8
 8010b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b2a:	223f      	movs	r2, #63	; 0x3f
 8010b2c:	409a      	lsls	r2, r3
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2200      	movs	r2, #0
 8010b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d07d      	beq.n	8010c46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	4798      	blx	r3
        }
        return;
 8010b52:	e078      	b.n	8010c46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d01c      	beq.n	8010b9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d108      	bne.n	8010b82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d030      	beq.n	8010bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	4798      	blx	r3
 8010b80:	e02b      	b.n	8010bda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d027      	beq.n	8010bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	4798      	blx	r3
 8010b92:	e022      	b.n	8010bda <HAL_DMA_IRQHandler+0x29e>
 8010b94:	20000048 	.word	0x20000048
 8010b98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d10f      	bne.n	8010bca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	6812      	ldr	r2, [r2, #0]
 8010bb2:	6812      	ldr	r2, [r2, #0]
 8010bb4:	f022 0210 	bic.w	r2, r2, #16
 8010bb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2201      	movs	r2, #1
 8010bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d003      	beq.n	8010bda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d032      	beq.n	8010c48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010be6:	f003 0301 	and.w	r3, r3, #1
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d022      	beq.n	8010c34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2205      	movs	r2, #5
 8010bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	6812      	ldr	r2, [r2, #0]
 8010bfe:	6812      	ldr	r2, [r2, #0]
 8010c00:	f022 0201 	bic.w	r2, r2, #1
 8010c04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	60bb      	str	r3, [r7, #8]
 8010c0c:	697a      	ldr	r2, [r7, #20]
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d807      	bhi.n	8010c22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f003 0301 	and.w	r3, r3, #1
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d1f2      	bne.n	8010c06 <HAL_DMA_IRQHandler+0x2ca>
 8010c20:	e000      	b.n	8010c24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8010c22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2200      	movs	r2, #0
 8010c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d005      	beq.n	8010c48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	4798      	blx	r3
 8010c44:	e000      	b.n	8010c48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8010c46:	bf00      	nop
    }
  }
}
 8010c48:	3718      	adds	r7, #24
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop

08010c50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b085      	sub	sp, #20
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	60b9      	str	r1, [r7, #8]
 8010c5a:	607a      	str	r2, [r7, #4]
 8010c5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68fa      	ldr	r2, [r7, #12]
 8010c64:	6812      	ldr	r2, [r2, #0]
 8010c66:	6812      	ldr	r2, [r2, #0]
 8010c68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010c6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	683a      	ldr	r2, [r7, #0]
 8010c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	689b      	ldr	r3, [r3, #8]
 8010c7a:	2b40      	cmp	r3, #64	; 0x40
 8010c7c:	d108      	bne.n	8010c90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8010c8e:	e007      	b.n	8010ca0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	68ba      	ldr	r2, [r7, #8]
 8010c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	60da      	str	r2, [r3, #12]
}
 8010ca0:	bf00      	nop
 8010ca2:	3714      	adds	r7, #20
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr

08010cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	3b10      	subs	r3, #16
 8010cbc:	4a14      	ldr	r2, [pc, #80]	; (8010d10 <DMA_CalcBaseAndBitshift+0x64>)
 8010cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8010cc2:	091b      	lsrs	r3, r3, #4
 8010cc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8010cc6:	4a13      	ldr	r2, [pc, #76]	; (8010d14 <DMA_CalcBaseAndBitshift+0x68>)
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	4413      	add	r3, r2
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2b03      	cmp	r3, #3
 8010cd8:	d909      	bls.n	8010cee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010ce2:	f023 0303 	bic.w	r3, r3, #3
 8010ce6:	1d1a      	adds	r2, r3, #4
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	659a      	str	r2, [r3, #88]	; 0x58
 8010cec:	e007      	b.n	8010cfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010cf6:	f023 0303 	bic.w	r3, r3, #3
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
 8010d0e:	bf00      	nop
 8010d10:	aaaaaaab 	.word	0xaaaaaaab
 8010d14:	08028b9c 	.word	0x08028b9c

08010d18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d20:	2300      	movs	r3, #0
 8010d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	699b      	ldr	r3, [r3, #24]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d11f      	bne.n	8010d72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	2b03      	cmp	r3, #3
 8010d36:	d855      	bhi.n	8010de4 <DMA_CheckFifoParam+0xcc>
 8010d38:	a201      	add	r2, pc, #4	; (adr r2, 8010d40 <DMA_CheckFifoParam+0x28>)
 8010d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d3e:	bf00      	nop
 8010d40:	08010d51 	.word	0x08010d51
 8010d44:	08010d63 	.word	0x08010d63
 8010d48:	08010d51 	.word	0x08010d51
 8010d4c:	08010de5 	.word	0x08010de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d045      	beq.n	8010de8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010d60:	e042      	b.n	8010de8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010d6a:	d13f      	bne.n	8010dec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010d70:	e03c      	b.n	8010dec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	699b      	ldr	r3, [r3, #24]
 8010d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d7a:	d121      	bne.n	8010dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	2b03      	cmp	r3, #3
 8010d80:	d836      	bhi.n	8010df0 <DMA_CheckFifoParam+0xd8>
 8010d82:	a201      	add	r2, pc, #4	; (adr r2, 8010d88 <DMA_CheckFifoParam+0x70>)
 8010d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d88:	08010d99 	.word	0x08010d99
 8010d8c:	08010d9f 	.word	0x08010d9f
 8010d90:	08010d99 	.word	0x08010d99
 8010d94:	08010db1 	.word	0x08010db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010d98:	2301      	movs	r3, #1
 8010d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8010d9c:	e02f      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d024      	beq.n	8010df4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8010daa:	2301      	movs	r3, #1
 8010dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010dae:	e021      	b.n	8010df4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010db8:	d11e      	bne.n	8010df8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8010dba:	2301      	movs	r3, #1
 8010dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010dbe:	e01b      	b.n	8010df8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	2b02      	cmp	r3, #2
 8010dc4:	d902      	bls.n	8010dcc <DMA_CheckFifoParam+0xb4>
 8010dc6:	2b03      	cmp	r3, #3
 8010dc8:	d003      	beq.n	8010dd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010dca:	e018      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	73fb      	strb	r3, [r7, #15]
      break;
 8010dd0:	e015      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00e      	beq.n	8010dfc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8010dde:	2301      	movs	r3, #1
 8010de0:	73fb      	strb	r3, [r7, #15]
      break;
 8010de2:	e00b      	b.n	8010dfc <DMA_CheckFifoParam+0xe4>
      break;
 8010de4:	bf00      	nop
 8010de6:	e00a      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010de8:	bf00      	nop
 8010dea:	e008      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010dec:	bf00      	nop
 8010dee:	e006      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010df0:	bf00      	nop
 8010df2:	e004      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010df4:	bf00      	nop
 8010df6:	e002      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;   
 8010df8:	bf00      	nop
 8010dfa:	e000      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010dfc:	bf00      	nop
    }
  } 
  
  return status; 
 8010dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3714      	adds	r7, #20
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b088      	sub	sp, #32
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8010e14:	2300      	movs	r3, #0
 8010e16:	61fb      	str	r3, [r7, #28]
 8010e18:	2300      	movs	r3, #0
 8010e1a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8010e1c:	4baa      	ldr	r3, [pc, #680]	; (80110c8 <HAL_ETH_Init+0x2bc>)
 8010e1e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8010e20:	2300      	movs	r3, #0
 8010e22:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8010e24:	2300      	movs	r3, #0
 8010e26:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d101      	bne.n	8010e32 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	e185      	b.n	801113e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d106      	bne.n	8010e4c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f012 ffa2 	bl	8023d90 <HAL_ETH_MspInit>
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	60bb      	str	r3, [r7, #8]
 8010e50:	4a9e      	ldr	r2, [pc, #632]	; (80110cc <HAL_ETH_Init+0x2c0>)
 8010e52:	4b9e      	ldr	r3, [pc, #632]	; (80110cc <HAL_ETH_Init+0x2c0>)
 8010e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e5a:	6453      	str	r3, [r2, #68]	; 0x44
 8010e5c:	4b9b      	ldr	r3, [pc, #620]	; (80110cc <HAL_ETH_Init+0x2c0>)
 8010e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e64:	60bb      	str	r3, [r7, #8]
 8010e66:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8010e68:	4a99      	ldr	r2, [pc, #612]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e6a:	4b99      	ldr	r3, [pc, #612]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010e72:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8010e74:	4996      	ldr	r1, [pc, #600]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e76:	4b96      	ldr	r3, [pc, #600]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e78:	685a      	ldr	r2, [r3, #4]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6a1b      	ldr	r3, [r3, #32]
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	6812      	ldr	r2, [r2, #0]
 8010e8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010e8e:	6812      	ldr	r2, [r2, #0]
 8010e90:	f042 0201 	orr.w	r2, r2, #1
 8010e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e98:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8010e9a:	f7ff faa1 	bl	80103e0 <HAL_GetTick>
 8010e9e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010ea0:	e011      	b.n	8010ec6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8010ea2:	f7ff fa9d 	bl	80103e0 <HAL_GetTick>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010eb0:	d909      	bls.n	8010ec6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2203      	movs	r2, #3
 8010eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8010ec2:	2303      	movs	r3, #3
 8010ec4:	e13b      	b.n	801113e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f003 0301 	and.w	r3, r3, #1
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1e4      	bne.n	8010ea2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	691b      	ldr	r3, [r3, #16]
 8010ede:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	f023 031c 	bic.w	r3, r3, #28
 8010ee6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8010ee8:	f002 f8fe 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8010eec:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8010eee:	69bb      	ldr	r3, [r7, #24]
 8010ef0:	4a78      	ldr	r2, [pc, #480]	; (80110d4 <HAL_ETH_Init+0x2c8>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d908      	bls.n	8010f08 <HAL_ETH_Init+0xfc>
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	4a77      	ldr	r2, [pc, #476]	; (80110d8 <HAL_ETH_Init+0x2cc>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d804      	bhi.n	8010f08 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	f043 0308 	orr.w	r3, r3, #8
 8010f04:	61fb      	str	r3, [r7, #28]
 8010f06:	e027      	b.n	8010f58 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	4a73      	ldr	r2, [pc, #460]	; (80110d8 <HAL_ETH_Init+0x2cc>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d908      	bls.n	8010f22 <HAL_ETH_Init+0x116>
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	4a72      	ldr	r2, [pc, #456]	; (80110dc <HAL_ETH_Init+0x2d0>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d804      	bhi.n	8010f22 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	f043 030c 	orr.w	r3, r3, #12
 8010f1e:	61fb      	str	r3, [r7, #28]
 8010f20:	e01a      	b.n	8010f58 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	4a6d      	ldr	r2, [pc, #436]	; (80110dc <HAL_ETH_Init+0x2d0>)
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d903      	bls.n	8010f32 <HAL_ETH_Init+0x126>
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	4a6c      	ldr	r2, [pc, #432]	; (80110e0 <HAL_ETH_Init+0x2d4>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d911      	bls.n	8010f56 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	4a6a      	ldr	r2, [pc, #424]	; (80110e0 <HAL_ETH_Init+0x2d4>)
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d908      	bls.n	8010f4c <HAL_ETH_Init+0x140>
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	4a69      	ldr	r2, [pc, #420]	; (80110e4 <HAL_ETH_Init+0x2d8>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d804      	bhi.n	8010f4c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	f043 0304 	orr.w	r3, r3, #4
 8010f48:	61fb      	str	r3, [r7, #28]
 8010f4a:	e005      	b.n	8010f58 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	f043 0310 	orr.w	r3, r3, #16
 8010f52:	61fb      	str	r3, [r7, #28]
 8010f54:	e000      	b.n	8010f58 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8010f56:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	69fa      	ldr	r2, [r7, #28]
 8010f5e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8010f60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010f64:	2100      	movs	r1, #0
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f000 fc19 	bl	801179e <HAL_ETH_WritePHYRegister>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d00b      	beq.n	8010f8a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8010f72:	2301      	movs	r3, #1
 8010f74:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8010f76:	6939      	ldr	r1, [r7, #16]
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 fca5 	bl	80118c8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8010f86:	2301      	movs	r3, #1
 8010f88:	e0d9      	b.n	801113e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8010f8a:	20ff      	movs	r0, #255	; 0xff
 8010f8c:	f7ff fa34 	bl	80103f8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f000 80a7 	beq.w	80110e8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8010f9a:	f7ff fa21 	bl	80103e0 <HAL_GetTick>
 8010f9e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8010fa0:	f107 030c 	add.w	r3, r7, #12
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	2101      	movs	r1, #1
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f000 fb90 	bl	80116ce <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8010fae:	f7ff fa17 	bl	80103e0 <HAL_GetTick>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d90f      	bls.n	8010fe0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8010fc4:	6939      	ldr	r1, [r7, #16]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fc7e 	bl	80118c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2201      	movs	r2, #1
 8010fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8010fdc:	2303      	movs	r3, #3
 8010fde:	e0ae      	b.n	801113e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f003 0304 	and.w	r3, r3, #4
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d0da      	beq.n	8010fa0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8010fea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010fee:	2100      	movs	r1, #0
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f000 fbd4 	bl	801179e <HAL_ETH_WritePHYRegister>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00b      	beq.n	8011014 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8011000:	6939      	ldr	r1, [r7, #16]
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 fc60 	bl	80118c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2201      	movs	r2, #1
 801100c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8011010:	2301      	movs	r3, #1
 8011012:	e094      	b.n	801113e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8011014:	f7ff f9e4 	bl	80103e0 <HAL_GetTick>
 8011018:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 801101a:	f107 030c 	add.w	r3, r7, #12
 801101e:	461a      	mov	r2, r3
 8011020:	2101      	movs	r1, #1
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 fb53 	bl	80116ce <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8011028:	f7ff f9da 	bl	80103e0 <HAL_GetTick>
 801102c:	4602      	mov	r2, r0
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	1ad3      	subs	r3, r2, r3
 8011032:	f241 3288 	movw	r2, #5000	; 0x1388
 8011036:	4293      	cmp	r3, r2
 8011038:	d90f      	bls.n	801105a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 801103a:	2301      	movs	r3, #1
 801103c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 801103e:	6939      	ldr	r1, [r7, #16]
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fc41 	bl	80118c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2201      	movs	r2, #1
 801104a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8011056:	2303      	movs	r3, #3
 8011058:	e071      	b.n	801113e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f003 0320 	and.w	r3, r3, #32
 8011060:	2b00      	cmp	r3, #0
 8011062:	d0da      	beq.n	801101a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8011064:	f107 030c 	add.w	r3, r7, #12
 8011068:	461a      	mov	r2, r3
 801106a:	2110      	movs	r1, #16
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f000 fb2e 	bl	80116ce <HAL_ETH_ReadPHYRegister>
 8011072:	4603      	mov	r3, r0
 8011074:	2b00      	cmp	r3, #0
 8011076:	d00b      	beq.n	8011090 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8011078:	2301      	movs	r3, #1
 801107a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 801107c:	6939      	ldr	r1, [r7, #16]
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 fc22 	bl	80118c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2201      	movs	r2, #1
 8011088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 801108c:	2301      	movs	r3, #1
 801108e:	e056      	b.n	801113e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	f003 0304 	and.w	r3, r3, #4
 8011096:	2b00      	cmp	r3, #0
 8011098:	d004      	beq.n	80110a4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110a0:	60da      	str	r2, [r3, #12]
 80110a2:	e002      	b.n	80110aa <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2200      	movs	r2, #0
 80110a8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	f003 0302 	and.w	r3, r3, #2
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d003      	beq.n	80110bc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2200      	movs	r2, #0
 80110b8:	609a      	str	r2, [r3, #8]
 80110ba:	e037      	b.n	801112c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80110c2:	609a      	str	r2, [r3, #8]
 80110c4:	e032      	b.n	801112c <HAL_ETH_Init+0x320>
 80110c6:	bf00      	nop
 80110c8:	03938700 	.word	0x03938700
 80110cc:	40023800 	.word	0x40023800
 80110d0:	40013800 	.word	0x40013800
 80110d4:	01312cff 	.word	0x01312cff
 80110d8:	02160ebf 	.word	0x02160ebf
 80110dc:	039386ff 	.word	0x039386ff
 80110e0:	05f5e0ff 	.word	0x05f5e0ff
 80110e4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	08db      	lsrs	r3, r3, #3
 80110ee:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	085b      	lsrs	r3, r3, #1
 80110f6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80110f8:	4313      	orrs	r3, r2
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	461a      	mov	r2, r3
 80110fe:	2100      	movs	r1, #0
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 fb4c 	bl	801179e <HAL_ETH_WritePHYRegister>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00b      	beq.n	8011124 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 801110c:	2301      	movs	r3, #1
 801110e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8011110:	6939      	ldr	r1, [r7, #16]
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 fbd8 	bl	80118c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2201      	movs	r2, #1
 801111c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8011120:	2301      	movs	r3, #1
 8011122:	e00c      	b.n	801113e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8011124:	f640 70ff 	movw	r0, #4095	; 0xfff
 8011128:	f7ff f966 	bl	80103f8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 801112c:	6939      	ldr	r1, [r7, #16]
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 fbca 	bl	80118c8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2201      	movs	r2, #1
 8011138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 801113c:	2300      	movs	r3, #0
}
 801113e:	4618      	mov	r0, r3
 8011140:	3720      	adds	r7, #32
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop

08011148 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8011148:	b480      	push	{r7}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
 8011154:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8011156:	2300      	movs	r3, #0
 8011158:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011160:	2b01      	cmp	r3, #1
 8011162:	d101      	bne.n	8011168 <HAL_ETH_DMATxDescListInit+0x20>
 8011164:	2302      	movs	r3, #2
 8011166:	e052      	b.n	801120e <HAL_ETH_DMATxDescListInit+0xc6>
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2201      	movs	r2, #1
 801116c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2202      	movs	r2, #2
 8011174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	68ba      	ldr	r2, [r7, #8]
 801117c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 801117e:	2300      	movs	r3, #0
 8011180:	617b      	str	r3, [r7, #20]
 8011182:	e030      	b.n	80111e6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	015b      	lsls	r3, r3, #5
 8011188:	68ba      	ldr	r2, [r7, #8]
 801118a:	4413      	add	r3, r2
 801118c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011194:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801119c:	fb02 f303 	mul.w	r3, r2, r3
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	4413      	add	r3, r2
 80111a4:	461a      	mov	r2, r3
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	69db      	ldr	r3, [r3, #28]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d105      	bne.n	80111be <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	1e5a      	subs	r2, r3, #1
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d908      	bls.n	80111da <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	3301      	adds	r3, #1
 80111cc:	015b      	lsls	r3, r3, #5
 80111ce:	68ba      	ldr	r2, [r7, #8]
 80111d0:	4413      	add	r3, r2
 80111d2:	461a      	mov	r2, r3
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	60da      	str	r2, [r3, #12]
 80111d8:	e002      	b.n	80111e0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80111da:	68ba      	ldr	r2, [r7, #8]
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	3301      	adds	r3, #1
 80111e4:	617b      	str	r3, [r7, #20]
 80111e6:	697a      	ldr	r2, [r7, #20]
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d3ca      	bcc.n	8011184 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111f8:	3310      	adds	r3, #16
 80111fa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	2201      	movs	r2, #1
 8011200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	371c      	adds	r7, #28
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr

0801121a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 801121a:	b480      	push	{r7}
 801121c:	b087      	sub	sp, #28
 801121e:	af00      	add	r7, sp, #0
 8011220:	60f8      	str	r0, [r7, #12]
 8011222:	60b9      	str	r1, [r7, #8]
 8011224:	607a      	str	r2, [r7, #4]
 8011226:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8011228:	2300      	movs	r3, #0
 801122a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011232:	2b01      	cmp	r3, #1
 8011234:	d101      	bne.n	801123a <HAL_ETH_DMARxDescListInit+0x20>
 8011236:	2302      	movs	r3, #2
 8011238:	e056      	b.n	80112e8 <HAL_ETH_DMARxDescListInit+0xce>
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2201      	movs	r2, #1
 801123e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2202      	movs	r2, #2
 8011246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8011250:	2300      	movs	r3, #0
 8011252:	617b      	str	r3, [r7, #20]
 8011254:	e034      	b.n	80112c0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	015b      	lsls	r3, r3, #5
 801125a:	68ba      	ldr	r2, [r7, #8]
 801125c:	4413      	add	r3, r2
 801125e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011266:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 801126e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011276:	fb02 f303 	mul.w	r3, r2, r3
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	4413      	add	r3, r2
 801127e:	461a      	mov	r2, r3
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	699b      	ldr	r3, [r3, #24]
 8011288:	2b01      	cmp	r3, #1
 801128a:	d105      	bne.n	8011298 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	1e5a      	subs	r2, r3, #1
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d908      	bls.n	80112b4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	3301      	adds	r3, #1
 80112a6:	015b      	lsls	r3, r3, #5
 80112a8:	68ba      	ldr	r2, [r7, #8]
 80112aa:	4413      	add	r3, r2
 80112ac:	461a      	mov	r2, r3
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	60da      	str	r2, [r3, #12]
 80112b2:	e002      	b.n	80112ba <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80112b4:	68ba      	ldr	r2, [r7, #8]
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	3301      	adds	r3, #1
 80112be:	617b      	str	r3, [r7, #20]
 80112c0:	697a      	ldr	r2, [r7, #20]
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d3c6      	bcc.n	8011256 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112d2:	330c      	adds	r3, #12
 80112d4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2201      	movs	r2, #1
 80112da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2200      	movs	r2, #0
 80112e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80112e6:	2300      	movs	r3, #0
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	371c      	adds	r7, #28
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr

080112f4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80112fe:	2300      	movs	r3, #0
 8011300:	617b      	str	r3, [r7, #20]
 8011302:	2300      	movs	r3, #0
 8011304:	60fb      	str	r3, [r7, #12]
 8011306:	2300      	movs	r3, #0
 8011308:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011310:	2b01      	cmp	r3, #1
 8011312:	d101      	bne.n	8011318 <HAL_ETH_TransmitFrame+0x24>
 8011314:	2302      	movs	r3, #2
 8011316:	e0cd      	b.n	80114b4 <HAL_ETH_TransmitFrame+0x1c0>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2201      	movs	r2, #1
 801131c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2202      	movs	r2, #2
 8011324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d109      	bne.n	8011342 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2201      	movs	r2, #1
 8011332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2200      	movs	r2, #0
 801133a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 801133e:	2301      	movs	r3, #1
 8011340:	e0b8      	b.n	80114b4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	da09      	bge.n	8011360 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2212      	movs	r2, #18
 8011350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 801135c:	2301      	movs	r3, #1
 801135e:	e0a9      	b.n	80114b4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011366:	4293      	cmp	r3, r2
 8011368:	d915      	bls.n	8011396 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	4a54      	ldr	r2, [pc, #336]	; (80114c0 <HAL_ETH_TransmitFrame+0x1cc>)
 801136e:	fba2 2303 	umull	r2, r3, r2, r3
 8011372:	0a9b      	lsrs	r3, r3, #10
 8011374:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8011376:	683a      	ldr	r2, [r7, #0]
 8011378:	4b51      	ldr	r3, [pc, #324]	; (80114c0 <HAL_ETH_TransmitFrame+0x1cc>)
 801137a:	fba3 1302 	umull	r1, r3, r3, r2
 801137e:	0a9b      	lsrs	r3, r3, #10
 8011380:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8011384:	fb01 f303 	mul.w	r3, r1, r3
 8011388:	1ad3      	subs	r3, r2, r3
 801138a:	2b00      	cmp	r3, #0
 801138c:	d005      	beq.n	801139a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	3301      	adds	r3, #1
 8011392:	617b      	str	r3, [r7, #20]
 8011394:	e001      	b.n	801139a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8011396:	2301      	movs	r3, #1
 8011398:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	2b01      	cmp	r3, #1
 801139e:	d11c      	bne.n	80113da <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a4:	687a      	ldr	r2, [r7, #4]
 80113a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113a8:	6812      	ldr	r2, [r2, #0]
 80113aa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80113ae:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b4:	683a      	ldr	r2, [r7, #0]
 80113b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80113ba:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c0:	687a      	ldr	r2, [r7, #4]
 80113c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113c4:	6812      	ldr	r2, [r2, #0]
 80113c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80113ca:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	461a      	mov	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80113d8:	e04b      	b.n	8011472 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80113da:	2300      	movs	r3, #0
 80113dc:	613b      	str	r3, [r7, #16]
 80113de:	e044      	b.n	801146a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113e8:	6812      	ldr	r2, [r2, #0]
 80113ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80113ee:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d107      	bne.n	8011406 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113fa:	687a      	ldr	r2, [r7, #4]
 80113fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113fe:	6812      	ldr	r2, [r2, #0]
 8011400:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011404:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801140a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801140e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	1e5a      	subs	r2, r3, #1
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	429a      	cmp	r2, r3
 8011418:	d116      	bne.n	8011448 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011422:	6812      	ldr	r2, [r2, #0]
 8011424:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8011428:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	4a25      	ldr	r2, [pc, #148]	; (80114c4 <HAL_ETH_TransmitFrame+0x1d0>)
 801142e:	fb02 f203 	mul.w	r2, r2, r3
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	4413      	add	r3, r2
 8011436:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801143a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011440:	68fa      	ldr	r2, [r7, #12]
 8011442:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011446:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011450:	6812      	ldr	r2, [r2, #0]
 8011452:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011456:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	461a      	mov	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	3301      	adds	r3, #1
 8011468:	613b      	str	r3, [r7, #16]
 801146a:	693a      	ldr	r2, [r7, #16]
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	429a      	cmp	r2, r3
 8011470:	d3b6      	bcc.n	80113e0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801147a:	3314      	adds	r3, #20
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 0304 	and.w	r3, r3, #4
 8011482:	2b00      	cmp	r3, #0
 8011484:	d00d      	beq.n	80114a2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801148e:	3314      	adds	r3, #20
 8011490:	2204      	movs	r2, #4
 8011492:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801149c:	3304      	adds	r3, #4
 801149e:	2200      	movs	r2, #0
 80114a0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2201      	movs	r2, #1
 80114a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2200      	movs	r2, #0
 80114ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80114b2:	2300      	movs	r3, #0
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	371c      	adds	r7, #28
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	ac02b00b 	.word	0xac02b00b
 80114c4:	fffffa0c 	.word	0xfffffa0c

080114c8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80114d0:	2300      	movs	r3, #0
 80114d2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d101      	bne.n	80114e2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80114de:	2302      	movs	r3, #2
 80114e0:	e074      	b.n	80115cc <HAL_ETH_GetReceivedFrame_IT+0x104>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2201      	movs	r2, #1
 80114e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2202      	movs	r2, #2
 80114ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80114f2:	e05a      	b.n	80115aa <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	3301      	adds	r3, #1
 80114f8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011508:	d10d      	bne.n	8011526 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2201      	movs	r2, #1
 8011516:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	461a      	mov	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	629a      	str	r2, [r3, #40]	; 0x28
 8011524:	e041      	b.n	80115aa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011530:	2b00      	cmp	r3, #0
 8011532:	d10b      	bne.n	801154c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011538:	1c5a      	adds	r2, r3, #1
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	461a      	mov	r2, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	629a      	str	r2, [r3, #40]	; 0x28
 801154a:	e02e      	b.n	80115aa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011558:	1c5a      	adds	r2, r3, #1
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011562:	2b01      	cmp	r3, #1
 8011564:	d103      	bne.n	801156e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	0c1b      	lsrs	r3, r3, #16
 8011576:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801157a:	1f1a      	subs	r2, r3, #4
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011584:	689a      	ldr	r2, [r3, #8]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	461a      	mov	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2201      	movs	r2, #1
 801159a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2200      	movs	r2, #0
 80115a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	e010      	b.n	80115cc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	db02      	blt.n	80115ba <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2b03      	cmp	r3, #3
 80115b8:	d99c      	bls.n	80114f4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2201      	movs	r2, #1
 80115be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2200      	movs	r2, #0
 80115c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80115ca:	2301      	movs	r3, #1
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3714      	adds	r7, #20
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115e8:	3314      	adds	r3, #20
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115f0:	2b40      	cmp	r3, #64	; 0x40
 80115f2:	d112      	bne.n	801161a <HAL_ETH_IRQHandler+0x42>
  {
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f012 fc45 	bl	8023e84 <HAL_ETH_RxCpltCallback>
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011602:	3314      	adds	r3, #20
 8011604:	2240      	movs	r2, #64	; 0x40
 8011606:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2201      	movs	r2, #1
 801160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2200      	movs	r2, #0
 8011614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011618:	e01b      	b.n	8011652 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011622:	3314      	adds	r3, #20
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	f003 0301 	and.w	r3, r3, #1
 801162a:	2b01      	cmp	r3, #1
 801162c:	d111      	bne.n	8011652 <HAL_ETH_IRQHandler+0x7a>
  {
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f000 f839 	bl	80116a6 <HAL_ETH_TxCpltCallback>
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801163c:	3314      	adds	r3, #20
 801163e:	2201      	movs	r2, #1
 8011640:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801165a:	3314      	adds	r3, #20
 801165c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011660:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801166a:	3314      	adds	r3, #20
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011676:	d112      	bne.n	801169e <HAL_ETH_IRQHandler+0xc6>
  {
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f000 f81e 	bl	80116ba <HAL_ETH_ErrorCallback>

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011686:	3314      	adds	r3, #20
 8011688:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801168c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2201      	movs	r2, #1
 8011692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2200      	movs	r2, #0
 801169a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 801169e:	bf00      	nop
 80116a0:	3708      	adds	r7, #8
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}

080116a6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80116a6:	b480      	push	{r7}
 80116a8:	b083      	sub	sp, #12
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80116ae:	bf00      	nop
 80116b0:	370c      	adds	r7, #12
 80116b2:	46bd      	mov	sp, r7
 80116b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b8:	4770      	bx	lr

080116ba <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80116ba:	b480      	push	{r7}
 80116bc:	b083      	sub	sp, #12
 80116be:	af00      	add	r7, sp, #0
 80116c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80116c2:	bf00      	nop
 80116c4:	370c      	adds	r7, #12
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr

080116ce <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b086      	sub	sp, #24
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	60f8      	str	r0, [r7, #12]
 80116d6:	460b      	mov	r3, r1
 80116d8:	607a      	str	r2, [r7, #4]
 80116da:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80116dc:	2300      	movs	r3, #0
 80116de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80116e0:	2300      	movs	r3, #0
 80116e2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	2b82      	cmp	r3, #130	; 0x82
 80116ee:	d101      	bne.n	80116f4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80116f0:	2302      	movs	r3, #2
 80116f2:	e050      	b.n	8011796 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2282      	movs	r2, #130	; 0x82
 80116f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	691b      	ldr	r3, [r3, #16]
 8011702:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	f003 031c 	and.w	r3, r3, #28
 801170a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	8a1b      	ldrh	r3, [r3, #16]
 8011710:	02db      	lsls	r3, r3, #11
 8011712:	b29b      	uxth	r3, r3
 8011714:	697a      	ldr	r2, [r7, #20]
 8011716:	4313      	orrs	r3, r2
 8011718:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 801171a:	897b      	ldrh	r3, [r7, #10]
 801171c:	019b      	lsls	r3, r3, #6
 801171e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	4313      	orrs	r3, r2
 8011726:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	f023 0302 	bic.w	r3, r3, #2
 801172e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	f043 0301 	orr.w	r3, r3, #1
 8011736:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8011740:	f7fe fe4e 	bl	80103e0 <HAL_GetTick>
 8011744:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011746:	e015      	b.n	8011774 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8011748:	f7fe fe4a 	bl	80103e0 <HAL_GetTick>
 801174c:	4602      	mov	r2, r0
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011756:	d309      	bcc.n	801176c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	2201      	movs	r2, #1
 801175c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2200      	movs	r2, #0
 8011764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8011768:	2303      	movs	r3, #3
 801176a:	e014      	b.n	8011796 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	691b      	ldr	r3, [r3, #16]
 8011772:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	f003 0301 	and.w	r3, r3, #1
 801177a:	2b00      	cmp	r3, #0
 801177c:	d1e4      	bne.n	8011748 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	695b      	ldr	r3, [r3, #20]
 8011784:	b29b      	uxth	r3, r3
 8011786:	461a      	mov	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2201      	movs	r2, #1
 8011790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8011794:	2300      	movs	r3, #0
}
 8011796:	4618      	mov	r0, r3
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b086      	sub	sp, #24
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	60f8      	str	r0, [r7, #12]
 80117a6:	460b      	mov	r3, r1
 80117a8:	607a      	str	r2, [r7, #4]
 80117aa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80117ac:	2300      	movs	r3, #0
 80117ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80117b0:	2300      	movs	r3, #0
 80117b2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b42      	cmp	r3, #66	; 0x42
 80117be:	d101      	bne.n	80117c4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80117c0:	2302      	movs	r3, #2
 80117c2:	e04e      	b.n	8011862 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2242      	movs	r2, #66	; 0x42
 80117c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	691b      	ldr	r3, [r3, #16]
 80117d2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	f003 031c 	and.w	r3, r3, #28
 80117da:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	8a1b      	ldrh	r3, [r3, #16]
 80117e0:	02db      	lsls	r3, r3, #11
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	697a      	ldr	r2, [r7, #20]
 80117e6:	4313      	orrs	r3, r2
 80117e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80117ea:	897b      	ldrh	r3, [r7, #10]
 80117ec:	019b      	lsls	r3, r3, #6
 80117ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80117f2:	697a      	ldr	r2, [r7, #20]
 80117f4:	4313      	orrs	r3, r2
 80117f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	f043 0302 	orr.w	r3, r3, #2
 80117fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	f043 0301 	orr.w	r3, r3, #1
 8011806:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	b292      	uxth	r2, r2
 8011810:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 801181a:	f7fe fde1 	bl	80103e0 <HAL_GetTick>
 801181e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011820:	e015      	b.n	801184e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8011822:	f7fe fddd 	bl	80103e0 <HAL_GetTick>
 8011826:	4602      	mov	r2, r0
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011830:	d309      	bcc.n	8011846 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2201      	movs	r2, #1
 8011836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2200      	movs	r2, #0
 801183e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8011842:	2303      	movs	r3, #3
 8011844:	e00d      	b.n	8011862 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	f003 0301 	and.w	r3, r3, #1
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1e4      	bne.n	8011822 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2201      	movs	r2, #1
 801185c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3718      	adds	r7, #24
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 801186a:	b580      	push	{r7, lr}
 801186c:	b082      	sub	sp, #8
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011878:	2b01      	cmp	r3, #1
 801187a:	d101      	bne.n	8011880 <HAL_ETH_Start+0x16>
 801187c:	2302      	movs	r3, #2
 801187e:	e01f      	b.n	80118c0 <HAL_ETH_Start+0x56>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2201      	movs	r2, #1
 8011884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2202      	movs	r2, #2
 801188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f000 fa19 	bl	8011cc8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 fa33 	bl	8011d02 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f000 fa7d 	bl	8011d9c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f000 fa4a 	bl	8011d3c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 fa5f 	bl	8011d6c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2201      	movs	r2, #1
 80118b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2200      	movs	r2, #0
 80118ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b0b0      	sub	sp, #192	; 0xc0
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80118d2:	2300      	movs	r3, #0
 80118d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d007      	beq.n	80118ee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80118e4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80118ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80118ee:	2300      	movs	r3, #0
 80118f0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80118f2:	2300      	movs	r3, #0
 80118f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80118f6:	2300      	movs	r3, #0
 80118f8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80118fa:	2300      	movs	r3, #0
 80118fc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80118fe:	2300      	movs	r3, #0
 8011900:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8011902:	2300      	movs	r3, #0
 8011904:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	69db      	ldr	r3, [r3, #28]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d103      	bne.n	8011916 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 801190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011912:	663b      	str	r3, [r7, #96]	; 0x60
 8011914:	e001      	b.n	801191a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8011916:	2300      	movs	r3, #0
 8011918:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 801191a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801191e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8011920:	2300      	movs	r3, #0
 8011922:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8011924:	2300      	movs	r3, #0
 8011926:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8011928:	2300      	movs	r3, #0
 801192a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 801192c:	2300      	movs	r3, #0
 801192e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8011930:	2300      	movs	r3, #0
 8011932:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8011934:	2340      	movs	r3, #64	; 0x40
 8011936:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8011938:	2300      	movs	r3, #0
 801193a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 801193e:	2300      	movs	r3, #0
 8011940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8011944:	2300      	movs	r3, #0
 8011946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 801194a:	2300      	movs	r3, #0
 801194c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8011950:	2300      	movs	r3, #0
 8011952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8011956:	2300      	movs	r3, #0
 8011958:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 801195c:	2300      	movs	r3, #0
 801195e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8011962:	2300      	movs	r3, #0
 8011964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8011968:	2380      	movs	r3, #128	; 0x80
 801196a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 801196e:	2300      	movs	r3, #0
 8011970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8011974:	2300      	movs	r3, #0
 8011976:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 801197a:	2300      	movs	r3, #0
 801197c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8011980:	2300      	movs	r3, #0
 8011982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8011986:	2300      	movs	r3, #0
 8011988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 801198c:	2300      	movs	r3, #0
 801198e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 801199c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119a0:	4bab      	ldr	r3, [pc, #684]	; (8011c50 <ETH_MACDMAConfig+0x388>)
 80119a2:	4013      	ands	r3, r2
 80119a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80119a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80119aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80119ac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80119ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80119b0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80119b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80119b4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80119ba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80119bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80119be:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80119c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80119c2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80119c8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80119ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80119cc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80119ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80119d0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80119d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80119d4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80119d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80119d8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80119da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80119dc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80119de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119e2:	4313      	orrs	r3, r2
 80119e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80119fc:	2001      	movs	r0, #1
 80119fe:	f7fe fcfb 	bl	80103f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8011a12:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011a14:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8011a16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8011a18:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8011a1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8011a1e:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 8011a20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8011a24:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8011a26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8011a2a:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8011a2c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8011a30:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 8011a32:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8011a36:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011a38:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8011a44:	2001      	movs	r0, #1
 8011a46:	f7fe fcd7 	bl	80103f8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a52:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011a5c:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011a66:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	699b      	ldr	r3, [r3, #24]
 8011a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8011a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8011a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011a84:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8011a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8011a8a:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8011a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8011a90:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8011a92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8011a96:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8011a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8011a9c:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8011a9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8011aa2:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8011aa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011ab6:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	699b      	ldr	r3, [r3, #24]
 8011abe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8011ac2:	2001      	movs	r0, #1
 8011ac4:	f7fe fc98 	bl	80103f8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011ad0:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8011ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8011ade:	430a      	orrs	r2, r1
 8011ae0:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	69db      	ldr	r3, [r3, #28]
 8011ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8011aec:	2001      	movs	r0, #1
 8011aee:	f7fe fc83 	bl	80103f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011afa:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8011afc:	2300      	movs	r3, #0
 8011afe:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8011b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011b04:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8011b06:	2300      	movs	r3, #0
 8011b08:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8011b0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011b0e:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8011b10:	2300      	movs	r3, #0
 8011b12:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8011b14:	2300      	movs	r3, #0
 8011b16:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8011b20:	2304      	movs	r3, #4
 8011b22:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8011b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8011b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011b2e:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8011b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011b34:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8011b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b3a:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8011b3c:	2380      	movs	r3, #128	; 0x80
 8011b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8011b40:	2300      	movs	r3, #0
 8011b42:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8011b44:	2300      	movs	r3, #0
 8011b46:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b50:	3318      	adds	r3, #24
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8011b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011b5c:	4b3d      	ldr	r3, [pc, #244]	; (8011c54 <ETH_MACDMAConfig+0x38c>)
 8011b5e:	4013      	ands	r3, r2
 8011b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011b64:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8011b66:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011b68:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8011b6a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8011b6c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8011b6e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8011b70:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8011b72:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8011b74:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8011b76:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8011b78:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8011b7a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8011b7c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8011b80:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8011b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8011b84:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011b86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b98:	3318      	adds	r3, #24
 8011b9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011b9e:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ba8:	3318      	adds	r3, #24
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8011bb0:	2001      	movs	r0, #1
 8011bb2:	f7fe fc21 	bl	80103f8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bbe:	3318      	adds	r3, #24
 8011bc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011bc4:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8011bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011bce:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8011bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8011bd2:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 8011bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8011bd6:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8011bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8011bda:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2U) |
 8011bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011bde:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 8011be0:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 8011be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8011be4:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011be6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8011bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bee:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8011bfe:	2001      	movs	r0, #1
 8011c00:	f7fe fbfa 	bl	80103f8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011c10:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	2b01      	cmp	r3, #1
 8011c18:	d10f      	bne.n	8011c3a <ETH_MACDMAConfig+0x372>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6819      	ldr	r1, [r3, #0]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c26:	331c      	adds	r3, #28
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c32:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011c36:	331c      	adds	r3, #28
 8011c38:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	695b      	ldr	r3, [r3, #20]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	2100      	movs	r1, #0
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 f808 	bl	8011c58 <ETH_MACAddressConfig>
}
 8011c48:	bf00      	nop
 8011c4a:	37c0      	adds	r7, #192	; 0xc0
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	ff20810f 	.word	0xff20810f
 8011c54:	f8de3f23 	.word	0xf8de3f23

08011c58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b087      	sub	sp, #28
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	3305      	adds	r3, #5
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	021b      	lsls	r3, r3, #8
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	3204      	adds	r2, #4
 8011c70:	7812      	ldrb	r2, [r2, #0]
 8011c72:	4313      	orrs	r3, r2
 8011c74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8011c76:	68ba      	ldr	r2, [r7, #8]
 8011c78:	4b11      	ldr	r3, [pc, #68]	; (8011cc0 <ETH_MACAddressConfig+0x68>)
 8011c7a:	4413      	add	r3, r2
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	3303      	adds	r3, #3
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	061a      	lsls	r2, r3, #24
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	3302      	adds	r3, #2
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	041b      	lsls	r3, r3, #16
 8011c92:	431a      	orrs	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	3301      	adds	r3, #1
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	021b      	lsls	r3, r3, #8
 8011c9c:	4313      	orrs	r3, r2
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	7812      	ldrb	r2, [r2, #0]
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8011ca6:	68ba      	ldr	r2, [r7, #8]
 8011ca8:	4b06      	ldr	r3, [pc, #24]	; (8011cc4 <ETH_MACAddressConfig+0x6c>)
 8011caa:	4413      	add	r3, r2
 8011cac:	461a      	mov	r2, r3
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	6013      	str	r3, [r2, #0]
}
 8011cb2:	bf00      	nop
 8011cb4:	371c      	adds	r7, #28
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	40028040 	.word	0x40028040
 8011cc4:	40028044 	.word	0x40028044

08011cc8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	6812      	ldr	r2, [r2, #0]
 8011cdc:	6812      	ldr	r2, [r2, #0]
 8011cde:	f042 0208 	orr.w	r2, r2, #8
 8011ce2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011cec:	2001      	movs	r0, #1
 8011cee:	f000 f87f 	bl	8011df0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	68fa      	ldr	r2, [r7, #12]
 8011cf8:	601a      	str	r2, [r3, #0]
}
 8011cfa:	bf00      	nop
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b084      	sub	sp, #16
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	6812      	ldr	r2, [r2, #0]
 8011d16:	6812      	ldr	r2, [r2, #0]
 8011d18:	f042 0204 	orr.w	r2, r2, #4
 8011d1c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011d26:	2001      	movs	r0, #1
 8011d28:	f000 f862 	bl	8011df0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	68fa      	ldr	r2, [r7, #12]
 8011d32:	601a      	str	r2, [r3, #0]
}
 8011d34:	bf00      	nop
 8011d36:	3710      	adds	r7, #16
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6819      	ldr	r1, [r3, #0]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d50:	3318      	adds	r3, #24
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8011d58:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011d5c:	3318      	adds	r3, #24
 8011d5e:	601a      	str	r2, [r3, #0]
}
 8011d60:	bf00      	nop
 8011d62:	370c      	adds	r7, #12
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr

08011d6c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8011d6c:	b480      	push	{r7}
 8011d6e:	b083      	sub	sp, #12
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6819      	ldr	r1, [r3, #0]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d80:	3318      	adds	r3, #24
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f043 0202 	orr.w	r2, r3, #2
 8011d88:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011d8c:	3318      	adds	r3, #24
 8011d8e:	601a      	str	r2, [r3, #0]
}
 8011d90:	bf00      	nop
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr

08011d9c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b084      	sub	sp, #16
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011da4:	2300      	movs	r3, #0
 8011da6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6819      	ldr	r1, [r3, #0]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011db4:	3318      	adds	r3, #24
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011dbc:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011dc0:	3318      	adds	r3, #24
 8011dc2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011dcc:	3318      	adds	r3, #24
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	f000 f80c 	bl	8011df0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011de2:	3318      	adds	r3, #24
 8011de4:	601a      	str	r2, [r3, #0]
}
 8011de6:	bf00      	nop
 8011de8:	3710      	adds	r7, #16
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
	...

08011df0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b085      	sub	sp, #20
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8011df8:	4b0a      	ldr	r3, [pc, #40]	; (8011e24 <ETH_Delay+0x34>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4a0a      	ldr	r2, [pc, #40]	; (8011e28 <ETH_Delay+0x38>)
 8011dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8011e02:	0a5b      	lsrs	r3, r3, #9
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	fb02 f303 	mul.w	r3, r2, r3
 8011e0a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8011e0c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	1e5a      	subs	r2, r3, #1
 8011e12:	60fa      	str	r2, [r7, #12]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d1f9      	bne.n	8011e0c <ETH_Delay+0x1c>
}
 8011e18:	bf00      	nop
 8011e1a:	3714      	adds	r7, #20
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	20000048 	.word	0x20000048
 8011e28:	10624dd3 	.word	0x10624dd3

08011e2c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b086      	sub	sp, #24
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011e3e:	4b23      	ldr	r3, [pc, #140]	; (8011ecc <HAL_FLASH_Program+0xa0>)
 8011e40:	7e1b      	ldrb	r3, [r3, #24]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d101      	bne.n	8011e4a <HAL_FLASH_Program+0x1e>
 8011e46:	2302      	movs	r3, #2
 8011e48:	e03b      	b.n	8011ec2 <HAL_FLASH_Program+0x96>
 8011e4a:	4b20      	ldr	r3, [pc, #128]	; (8011ecc <HAL_FLASH_Program+0xa0>)
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011e50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011e54:	f000 f860 	bl	8011f18 <FLASH_WaitForLastOperation>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8011e5c:	7dfb      	ldrb	r3, [r7, #23]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d12b      	bne.n	8011eba <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d105      	bne.n	8011e74 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8011e68:	783b      	ldrb	r3, [r7, #0]
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	68b8      	ldr	r0, [r7, #8]
 8011e6e:	f000 f905 	bl	801207c <FLASH_Program_Byte>
 8011e72:	e016      	b.n	8011ea2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	d105      	bne.n	8011e86 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8011e7a:	883b      	ldrh	r3, [r7, #0]
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	68b8      	ldr	r0, [r7, #8]
 8011e80:	f000 f8d8 	bl	8012034 <FLASH_Program_HalfWord>
 8011e84:	e00d      	b.n	8011ea2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2b02      	cmp	r3, #2
 8011e8a:	d105      	bne.n	8011e98 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	4619      	mov	r1, r3
 8011e90:	68b8      	ldr	r0, [r7, #8]
 8011e92:	f000 f8ad 	bl	8011ff0 <FLASH_Program_Word>
 8011e96:	e004      	b.n	8011ea2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8011e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e9c:	68b8      	ldr	r0, [r7, #8]
 8011e9e:	f000 f87b 	bl	8011f98 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011ea2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011ea6:	f000 f837 	bl	8011f18 <FLASH_WaitForLastOperation>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8011eae:	4a08      	ldr	r2, [pc, #32]	; (8011ed0 <HAL_FLASH_Program+0xa4>)
 8011eb0:	4b07      	ldr	r3, [pc, #28]	; (8011ed0 <HAL_FLASH_Program+0xa4>)
 8011eb2:	691b      	ldr	r3, [r3, #16]
 8011eb4:	f023 0301 	bic.w	r3, r3, #1
 8011eb8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011eba:	4b04      	ldr	r3, [pc, #16]	; (8011ecc <HAL_FLASH_Program+0xa0>)
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8011ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3718      	adds	r7, #24
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	20004554 	.word	0x20004554
 8011ed0:	40023c00 	.word	0x40023c00

08011ed4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011ede:	4b0b      	ldr	r3, [pc, #44]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011ee0:	691b      	ldr	r3, [r3, #16]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	da0b      	bge.n	8011efe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011ee6:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011ee8:	4a09      	ldr	r2, [pc, #36]	; (8011f10 <HAL_FLASH_Unlock+0x3c>)
 8011eea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011eec:	4b07      	ldr	r3, [pc, #28]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011eee:	4a09      	ldr	r2, [pc, #36]	; (8011f14 <HAL_FLASH_Unlock+0x40>)
 8011ef0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011ef2:	4b06      	ldr	r3, [pc, #24]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	da01      	bge.n	8011efe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8011efa:	2301      	movs	r3, #1
 8011efc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8011efe:	79fb      	ldrb	r3, [r7, #7]
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr
 8011f0c:	40023c00 	.word	0x40023c00
 8011f10:	45670123 	.word	0x45670123
 8011f14:	cdef89ab 	.word	0xcdef89ab

08011f18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011f20:	2300      	movs	r3, #0
 8011f22:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011f24:	4b1a      	ldr	r3, [pc, #104]	; (8011f90 <FLASH_WaitForLastOperation+0x78>)
 8011f26:	2200      	movs	r2, #0
 8011f28:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8011f2a:	f7fe fa59 	bl	80103e0 <HAL_GetTick>
 8011f2e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011f30:	e010      	b.n	8011f54 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f38:	d00c      	beq.n	8011f54 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d007      	beq.n	8011f50 <FLASH_WaitForLastOperation+0x38>
 8011f40:	f7fe fa4e 	bl	80103e0 <HAL_GetTick>
 8011f44:	4602      	mov	r2, r0
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	1ad2      	subs	r2, r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d901      	bls.n	8011f54 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011f50:	2303      	movs	r3, #3
 8011f52:	e019      	b.n	8011f88 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011f54:	4b0f      	ldr	r3, [pc, #60]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f56:	68db      	ldr	r3, [r3, #12]
 8011f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d1e8      	bne.n	8011f32 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011f60:	4b0c      	ldr	r3, [pc, #48]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	f003 0301 	and.w	r3, r3, #1
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d002      	beq.n	8011f72 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011f6c:	4b09      	ldr	r3, [pc, #36]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f6e:	2201      	movs	r2, #1
 8011f70:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8011f72:	4b08      	ldr	r3, [pc, #32]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d003      	beq.n	8011f86 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8011f7e:	f000 f89f 	bl	80120c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011f82:	2301      	movs	r3, #1
 8011f84:	e000      	b.n	8011f88 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8011f86:	2300      	movs	r3, #0
  
}  
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	20004554 	.word	0x20004554
 8011f94:	40023c00 	.word	0x40023c00

08011f98 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8011f98:	b4f0      	push	{r4, r5, r6, r7}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011fa4:	4a11      	ldr	r2, [pc, #68]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fa6:	4b11      	ldr	r3, [pc, #68]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fa8:	691b      	ldr	r3, [r3, #16]
 8011faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011fae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8011fb0:	4a0e      	ldr	r2, [pc, #56]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fb2:	4b0e      	ldr	r3, [pc, #56]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011fba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011fbc:	4a0b      	ldr	r2, [pc, #44]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fbe:	4b0b      	ldr	r3, [pc, #44]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fc0:	691b      	ldr	r3, [r3, #16]
 8011fc2:	f043 0301 	orr.w	r3, r3, #1
 8011fc6:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	683a      	ldr	r2, [r7, #0]
 8011fcc:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	3304      	adds	r3, #4
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	e897 0018 	ldmia.w	r7, {r3, r4}
 8011fd8:	0025      	movs	r5, r4
 8011fda:	2600      	movs	r6, #0
 8011fdc:	462b      	mov	r3, r5
 8011fde:	6013      	str	r3, [r2, #0]
}
 8011fe0:	bf00      	nop
 8011fe2:	3710      	adds	r7, #16
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bcf0      	pop	{r4, r5, r6, r7}
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop
 8011fec:	40023c00 	.word	0x40023c00

08011ff0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011ffa:	4a0d      	ldr	r2, [pc, #52]	; (8012030 <FLASH_Program_Word+0x40>)
 8011ffc:	4b0c      	ldr	r3, [pc, #48]	; (8012030 <FLASH_Program_Word+0x40>)
 8011ffe:	691b      	ldr	r3, [r3, #16]
 8012000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012004:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8012006:	4a0a      	ldr	r2, [pc, #40]	; (8012030 <FLASH_Program_Word+0x40>)
 8012008:	4b09      	ldr	r3, [pc, #36]	; (8012030 <FLASH_Program_Word+0x40>)
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012010:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012012:	4a07      	ldr	r2, [pc, #28]	; (8012030 <FLASH_Program_Word+0x40>)
 8012014:	4b06      	ldr	r3, [pc, #24]	; (8012030 <FLASH_Program_Word+0x40>)
 8012016:	691b      	ldr	r3, [r3, #16]
 8012018:	f043 0301 	orr.w	r3, r3, #1
 801201c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	683a      	ldr	r2, [r7, #0]
 8012022:	601a      	str	r2, [r3, #0]
}
 8012024:	bf00      	nop
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr
 8012030:	40023c00 	.word	0x40023c00

08012034 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	460b      	mov	r3, r1
 801203e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012040:	4a0d      	ldr	r2, [pc, #52]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 8012042:	4b0d      	ldr	r3, [pc, #52]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 8012044:	691b      	ldr	r3, [r3, #16]
 8012046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801204a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801204c:	4a0a      	ldr	r2, [pc, #40]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 801204e:	4b0a      	ldr	r3, [pc, #40]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 8012050:	691b      	ldr	r3, [r3, #16]
 8012052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012058:	4a07      	ldr	r2, [pc, #28]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 801205a:	4b07      	ldr	r3, [pc, #28]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 801205c:	691b      	ldr	r3, [r3, #16]
 801205e:	f043 0301 	orr.w	r3, r3, #1
 8012062:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	887a      	ldrh	r2, [r7, #2]
 8012068:	801a      	strh	r2, [r3, #0]
}
 801206a:	bf00      	nop
 801206c:	370c      	adds	r7, #12
 801206e:	46bd      	mov	sp, r7
 8012070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop
 8012078:	40023c00 	.word	0x40023c00

0801207c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	460b      	mov	r3, r1
 8012086:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012088:	4a0c      	ldr	r2, [pc, #48]	; (80120bc <FLASH_Program_Byte+0x40>)
 801208a:	4b0c      	ldr	r3, [pc, #48]	; (80120bc <FLASH_Program_Byte+0x40>)
 801208c:	691b      	ldr	r3, [r3, #16]
 801208e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012092:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8012094:	4a09      	ldr	r2, [pc, #36]	; (80120bc <FLASH_Program_Byte+0x40>)
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <FLASH_Program_Byte+0x40>)
 8012098:	691b      	ldr	r3, [r3, #16]
 801209a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801209c:	4a07      	ldr	r2, [pc, #28]	; (80120bc <FLASH_Program_Byte+0x40>)
 801209e:	4b07      	ldr	r3, [pc, #28]	; (80120bc <FLASH_Program_Byte+0x40>)
 80120a0:	691b      	ldr	r3, [r3, #16]
 80120a2:	f043 0301 	orr.w	r3, r3, #1
 80120a6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	78fa      	ldrb	r2, [r7, #3]
 80120ac:	701a      	strb	r2, [r3, #0]
}
 80120ae:	bf00      	nop
 80120b0:	370c      	adds	r7, #12
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr
 80120ba:	bf00      	nop
 80120bc:	40023c00 	.word	0x40023c00

080120c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80120c0:	b480      	push	{r7}
 80120c2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80120c4:	4b27      	ldr	r3, [pc, #156]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	f003 0310 	and.w	r3, r3, #16
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d008      	beq.n	80120e2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80120d0:	4b25      	ldr	r3, [pc, #148]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120d2:	69db      	ldr	r3, [r3, #28]
 80120d4:	f043 0310 	orr.w	r3, r3, #16
 80120d8:	4a23      	ldr	r2, [pc, #140]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120da:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80120dc:	4b21      	ldr	r3, [pc, #132]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120de:	2210      	movs	r2, #16
 80120e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80120e2:	4b20      	ldr	r3, [pc, #128]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120e4:	68db      	ldr	r3, [r3, #12]
 80120e6:	f003 0320 	and.w	r3, r3, #32
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d008      	beq.n	8012100 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80120ee:	4b1e      	ldr	r3, [pc, #120]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120f0:	69db      	ldr	r3, [r3, #28]
 80120f2:	f043 0308 	orr.w	r3, r3, #8
 80120f6:	4a1c      	ldr	r2, [pc, #112]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120f8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80120fa:	4b1a      	ldr	r3, [pc, #104]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120fc:	2220      	movs	r2, #32
 80120fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8012100:	4b18      	ldr	r3, [pc, #96]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012102:	68db      	ldr	r3, [r3, #12]
 8012104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012108:	2b00      	cmp	r3, #0
 801210a:	d008      	beq.n	801211e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801210c:	4b16      	ldr	r3, [pc, #88]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 801210e:	69db      	ldr	r3, [r3, #28]
 8012110:	f043 0304 	orr.w	r3, r3, #4
 8012114:	4a14      	ldr	r2, [pc, #80]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 8012116:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8012118:	4b12      	ldr	r3, [pc, #72]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 801211a:	2240      	movs	r2, #64	; 0x40
 801211c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801211e:	4b11      	ldr	r3, [pc, #68]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012120:	68db      	ldr	r3, [r3, #12]
 8012122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012126:	2b00      	cmp	r3, #0
 8012128:	d008      	beq.n	801213c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801212a:	4b0f      	ldr	r3, [pc, #60]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 801212c:	69db      	ldr	r3, [r3, #28]
 801212e:	f043 0302 	orr.w	r3, r3, #2
 8012132:	4a0d      	ldr	r2, [pc, #52]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 8012134:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8012136:	4b0b      	ldr	r3, [pc, #44]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012138:	2280      	movs	r2, #128	; 0x80
 801213a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801213c:	4b09      	ldr	r3, [pc, #36]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	f003 0302 	and.w	r3, r3, #2
 8012144:	2b00      	cmp	r3, #0
 8012146:	d008      	beq.n	801215a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012148:	4b07      	ldr	r3, [pc, #28]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 801214a:	69db      	ldr	r3, [r3, #28]
 801214c:	f043 0320 	orr.w	r3, r3, #32
 8012150:	4a05      	ldr	r2, [pc, #20]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 8012152:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012154:	4b03      	ldr	r3, [pc, #12]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012156:	2202      	movs	r2, #2
 8012158:	60da      	str	r2, [r3, #12]
  }
}
 801215a:	bf00      	nop
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr
 8012164:	40023c00 	.word	0x40023c00
 8012168:	20004554 	.word	0x20004554

0801216c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012176:	2301      	movs	r3, #1
 8012178:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801217a:	2300      	movs	r3, #0
 801217c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801217e:	4b31      	ldr	r3, [pc, #196]	; (8012244 <HAL_FLASHEx_Erase+0xd8>)
 8012180:	7e1b      	ldrb	r3, [r3, #24]
 8012182:	2b01      	cmp	r3, #1
 8012184:	d101      	bne.n	801218a <HAL_FLASHEx_Erase+0x1e>
 8012186:	2302      	movs	r3, #2
 8012188:	e058      	b.n	801223c <HAL_FLASHEx_Erase+0xd0>
 801218a:	4b2e      	ldr	r3, [pc, #184]	; (8012244 <HAL_FLASHEx_Erase+0xd8>)
 801218c:	2201      	movs	r2, #1
 801218e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012190:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012194:	f7ff fec0 	bl	8011f18 <FLASH_WaitForLastOperation>
 8012198:	4603      	mov	r3, r0
 801219a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 801219c:	7bfb      	ldrb	r3, [r7, #15]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d148      	bne.n	8012234 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	f04f 32ff 	mov.w	r2, #4294967295
 80121a8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d115      	bne.n	80121de <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	691b      	ldr	r3, [r3, #16]
 80121b6:	b2da      	uxtb	r2, r3
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	4619      	mov	r1, r3
 80121be:	4610      	mov	r0, r2
 80121c0:	f000 f844 	bl	801224c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80121c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80121c8:	f7ff fea6 	bl	8011f18 <FLASH_WaitForLastOperation>
 80121cc:	4603      	mov	r3, r0
 80121ce:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80121d0:	4a1d      	ldr	r2, [pc, #116]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 80121d2:	4b1d      	ldr	r3, [pc, #116]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 80121d4:	691b      	ldr	r3, [r3, #16]
 80121d6:	f023 0304 	bic.w	r3, r3, #4
 80121da:	6113      	str	r3, [r2, #16]
 80121dc:	e028      	b.n	8012230 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	689b      	ldr	r3, [r3, #8]
 80121e2:	60bb      	str	r3, [r7, #8]
 80121e4:	e01c      	b.n	8012220 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	691b      	ldr	r3, [r3, #16]
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	4619      	mov	r1, r3
 80121ee:	68b8      	ldr	r0, [r7, #8]
 80121f0:	f000 f850 	bl	8012294 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80121f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80121f8:	f7ff fe8e 	bl	8011f18 <FLASH_WaitForLastOperation>
 80121fc:	4603      	mov	r3, r0
 80121fe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8012200:	4a11      	ldr	r2, [pc, #68]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 8012202:	4b11      	ldr	r3, [pc, #68]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 8012204:	691b      	ldr	r3, [r3, #16]
 8012206:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801220a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 801220c:	7bfb      	ldrb	r3, [r7, #15]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d003      	beq.n	801221a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	68ba      	ldr	r2, [r7, #8]
 8012216:	601a      	str	r2, [r3, #0]
          break;
 8012218:	e00a      	b.n	8012230 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	3301      	adds	r3, #1
 801221e:	60bb      	str	r3, [r7, #8]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	68da      	ldr	r2, [r3, #12]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	689b      	ldr	r3, [r3, #8]
 8012228:	441a      	add	r2, r3
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	429a      	cmp	r2, r3
 801222e:	d8da      	bhi.n	80121e6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8012230:	f000 f878 	bl	8012324 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012234:	4b03      	ldr	r3, [pc, #12]	; (8012244 <HAL_FLASHEx_Erase+0xd8>)
 8012236:	2200      	movs	r2, #0
 8012238:	761a      	strb	r2, [r3, #24]

  return status;
 801223a:	7bfb      	ldrb	r3, [r7, #15]
}
 801223c:	4618      	mov	r0, r3
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	20004554 	.word	0x20004554
 8012248:	40023c00 	.word	0x40023c00

0801224c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	4603      	mov	r3, r0
 8012254:	6039      	str	r1, [r7, #0]
 8012256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012258:	4a0d      	ldr	r2, [pc, #52]	; (8012290 <FLASH_MassErase+0x44>)
 801225a:	4b0d      	ldr	r3, [pc, #52]	; (8012290 <FLASH_MassErase+0x44>)
 801225c:	691b      	ldr	r3, [r3, #16]
 801225e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012262:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8012264:	4a0a      	ldr	r2, [pc, #40]	; (8012290 <FLASH_MassErase+0x44>)
 8012266:	4b0a      	ldr	r3, [pc, #40]	; (8012290 <FLASH_MassErase+0x44>)
 8012268:	691b      	ldr	r3, [r3, #16]
 801226a:	f043 0304 	orr.w	r3, r3, #4
 801226e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8012270:	4907      	ldr	r1, [pc, #28]	; (8012290 <FLASH_MassErase+0x44>)
 8012272:	4b07      	ldr	r3, [pc, #28]	; (8012290 <FLASH_MassErase+0x44>)
 8012274:	691a      	ldr	r2, [r3, #16]
 8012276:	79fb      	ldrb	r3, [r7, #7]
 8012278:	021b      	lsls	r3, r3, #8
 801227a:	4313      	orrs	r3, r2
 801227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012280:	610b      	str	r3, [r1, #16]
}
 8012282:	bf00      	nop
 8012284:	370c      	adds	r7, #12
 8012286:	46bd      	mov	sp, r7
 8012288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228c:	4770      	bx	lr
 801228e:	bf00      	nop
 8012290:	40023c00 	.word	0x40023c00

08012294 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8012294:	b480      	push	{r7}
 8012296:	b085      	sub	sp, #20
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	460b      	mov	r3, r1
 801229e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80122a0:	2300      	movs	r3, #0
 80122a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80122a4:	78fb      	ldrb	r3, [r7, #3]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d102      	bne.n	80122b0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80122aa:	2300      	movs	r3, #0
 80122ac:	60fb      	str	r3, [r7, #12]
 80122ae:	e010      	b.n	80122d2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80122b0:	78fb      	ldrb	r3, [r7, #3]
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	d103      	bne.n	80122be <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80122b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122ba:	60fb      	str	r3, [r7, #12]
 80122bc:	e009      	b.n	80122d2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80122be:	78fb      	ldrb	r3, [r7, #3]
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d103      	bne.n	80122cc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80122c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80122c8:	60fb      	str	r3, [r7, #12]
 80122ca:	e002      	b.n	80122d2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80122cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80122d0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80122d2:	4a13      	ldr	r2, [pc, #76]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122d4:	4b12      	ldr	r3, [pc, #72]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122d6:	691b      	ldr	r3, [r3, #16]
 80122d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80122dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80122de:	4910      	ldr	r1, [pc, #64]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122e0:	4b0f      	ldr	r3, [pc, #60]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122e2:	691a      	ldr	r2, [r3, #16]
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	4313      	orrs	r3, r2
 80122e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80122ea:	4a0d      	ldr	r2, [pc, #52]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122ec:	4b0c      	ldr	r3, [pc, #48]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122ee:	691b      	ldr	r3, [r3, #16]
 80122f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80122f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80122f6:	490a      	ldr	r1, [pc, #40]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122f8:	4b09      	ldr	r3, [pc, #36]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122fa:	691a      	ldr	r2, [r3, #16]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	00db      	lsls	r3, r3, #3
 8012300:	4313      	orrs	r3, r2
 8012302:	f043 0302 	orr.w	r3, r3, #2
 8012306:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8012308:	4a05      	ldr	r2, [pc, #20]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 801230a:	4b05      	ldr	r3, [pc, #20]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 801230c:	691b      	ldr	r3, [r3, #16]
 801230e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012312:	6113      	str	r3, [r2, #16]
}
 8012314:	bf00      	nop
 8012316:	3714      	adds	r7, #20
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr
 8012320:	40023c00 	.word	0x40023c00

08012324 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8012324:	b480      	push	{r7}
 8012326:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8012328:	4b20      	ldr	r3, [pc, #128]	; (80123ac <FLASH_FlushCaches+0x88>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012330:	2b00      	cmp	r3, #0
 8012332:	d017      	beq.n	8012364 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012334:	4a1d      	ldr	r2, [pc, #116]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012336:	4b1d      	ldr	r3, [pc, #116]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801233e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012340:	4a1a      	ldr	r2, [pc, #104]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012342:	4b1a      	ldr	r3, [pc, #104]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801234a:	6013      	str	r3, [r2, #0]
 801234c:	4a17      	ldr	r2, [pc, #92]	; (80123ac <FLASH_FlushCaches+0x88>)
 801234e:	4b17      	ldr	r3, [pc, #92]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012356:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012358:	4a14      	ldr	r2, [pc, #80]	; (80123ac <FLASH_FlushCaches+0x88>)
 801235a:	4b14      	ldr	r3, [pc, #80]	; (80123ac <FLASH_FlushCaches+0x88>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012362:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8012364:	4b11      	ldr	r3, [pc, #68]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801236c:	2b00      	cmp	r3, #0
 801236e:	d017      	beq.n	80123a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8012370:	4a0e      	ldr	r2, [pc, #56]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012372:	4b0e      	ldr	r3, [pc, #56]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801237a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801237c:	4a0b      	ldr	r2, [pc, #44]	; (80123ac <FLASH_FlushCaches+0x88>)
 801237e:	4b0b      	ldr	r3, [pc, #44]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012386:	6013      	str	r3, [r2, #0]
 8012388:	4a08      	ldr	r2, [pc, #32]	; (80123ac <FLASH_FlushCaches+0x88>)
 801238a:	4b08      	ldr	r3, [pc, #32]	; (80123ac <FLASH_FlushCaches+0x88>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012392:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8012394:	4a05      	ldr	r2, [pc, #20]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012396:	4b05      	ldr	r3, [pc, #20]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801239e:	6013      	str	r3, [r2, #0]
  }
}
 80123a0:	bf00      	nop
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop
 80123ac:	40023c00 	.word	0x40023c00

080123b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b089      	sub	sp, #36	; 0x24
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80123ba:	2300      	movs	r3, #0
 80123bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80123be:	2300      	movs	r3, #0
 80123c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80123c2:	2300      	movs	r3, #0
 80123c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80123c6:	2300      	movs	r3, #0
 80123c8:	61fb      	str	r3, [r7, #28]
 80123ca:	e16b      	b.n	80126a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80123cc:	2201      	movs	r2, #1
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	fa02 f303 	lsl.w	r3, r2, r3
 80123d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	4013      	ands	r3, r2
 80123de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80123e0:	693a      	ldr	r2, [r7, #16]
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	f040 815a 	bne.w	801269e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	d003      	beq.n	80123fa <HAL_GPIO_Init+0x4a>
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	2b12      	cmp	r3, #18
 80123f8:	d123      	bne.n	8012442 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	08da      	lsrs	r2, r3, #3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	3208      	adds	r2, #8
 8012402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	f003 0307 	and.w	r3, r3, #7
 801240e:	009b      	lsls	r3, r3, #2
 8012410:	220f      	movs	r2, #15
 8012412:	fa02 f303 	lsl.w	r3, r2, r3
 8012416:	43db      	mvns	r3, r3
 8012418:	69ba      	ldr	r2, [r7, #24]
 801241a:	4013      	ands	r3, r2
 801241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	691a      	ldr	r2, [r3, #16]
 8012422:	69fb      	ldr	r3, [r7, #28]
 8012424:	f003 0307 	and.w	r3, r3, #7
 8012428:	009b      	lsls	r3, r3, #2
 801242a:	fa02 f303 	lsl.w	r3, r2, r3
 801242e:	69ba      	ldr	r2, [r7, #24]
 8012430:	4313      	orrs	r3, r2
 8012432:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012434:	69fb      	ldr	r3, [r7, #28]
 8012436:	08da      	lsrs	r2, r3, #3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	3208      	adds	r2, #8
 801243c:	69b9      	ldr	r1, [r7, #24]
 801243e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	005b      	lsls	r3, r3, #1
 801244c:	2203      	movs	r2, #3
 801244e:	fa02 f303 	lsl.w	r3, r2, r3
 8012452:	43db      	mvns	r3, r3
 8012454:	69ba      	ldr	r2, [r7, #24]
 8012456:	4013      	ands	r3, r2
 8012458:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	f003 0203 	and.w	r2, r3, #3
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	005b      	lsls	r3, r3, #1
 8012466:	fa02 f303 	lsl.w	r3, r2, r3
 801246a:	69ba      	ldr	r2, [r7, #24]
 801246c:	4313      	orrs	r3, r2
 801246e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	69ba      	ldr	r2, [r7, #24]
 8012474:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d00b      	beq.n	8012496 <HAL_GPIO_Init+0xe6>
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	685b      	ldr	r3, [r3, #4]
 8012482:	2b02      	cmp	r3, #2
 8012484:	d007      	beq.n	8012496 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801248a:	2b11      	cmp	r3, #17
 801248c:	d003      	beq.n	8012496 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	2b12      	cmp	r3, #18
 8012494:	d130      	bne.n	80124f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	005b      	lsls	r3, r3, #1
 80124a0:	2203      	movs	r2, #3
 80124a2:	fa02 f303 	lsl.w	r3, r2, r3
 80124a6:	43db      	mvns	r3, r3
 80124a8:	69ba      	ldr	r2, [r7, #24]
 80124aa:	4013      	ands	r3, r2
 80124ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	68da      	ldr	r2, [r3, #12]
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	fa02 f303 	lsl.w	r3, r2, r3
 80124ba:	69ba      	ldr	r2, [r7, #24]
 80124bc:	4313      	orrs	r3, r2
 80124be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	69ba      	ldr	r2, [r7, #24]
 80124c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80124cc:	2201      	movs	r2, #1
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	fa02 f303 	lsl.w	r3, r2, r3
 80124d4:	43db      	mvns	r3, r3
 80124d6:	69ba      	ldr	r2, [r7, #24]
 80124d8:	4013      	ands	r3, r2
 80124da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	091b      	lsrs	r3, r3, #4
 80124e2:	f003 0201 	and.w	r2, r3, #1
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	fa02 f303 	lsl.w	r3, r2, r3
 80124ec:	69ba      	ldr	r2, [r7, #24]
 80124ee:	4313      	orrs	r3, r2
 80124f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	69ba      	ldr	r2, [r7, #24]
 80124f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	005b      	lsls	r3, r3, #1
 8012502:	2203      	movs	r2, #3
 8012504:	fa02 f303 	lsl.w	r3, r2, r3
 8012508:	43db      	mvns	r3, r3
 801250a:	69ba      	ldr	r2, [r7, #24]
 801250c:	4013      	ands	r3, r2
 801250e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	689a      	ldr	r2, [r3, #8]
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	005b      	lsls	r3, r3, #1
 8012518:	fa02 f303 	lsl.w	r3, r2, r3
 801251c:	69ba      	ldr	r2, [r7, #24]
 801251e:	4313      	orrs	r3, r2
 8012520:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	69ba      	ldr	r2, [r7, #24]
 8012526:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012530:	2b00      	cmp	r3, #0
 8012532:	f000 80b4 	beq.w	801269e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012536:	2300      	movs	r3, #0
 8012538:	60fb      	str	r3, [r7, #12]
 801253a:	4a5f      	ldr	r2, [pc, #380]	; (80126b8 <HAL_GPIO_Init+0x308>)
 801253c:	4b5e      	ldr	r3, [pc, #376]	; (80126b8 <HAL_GPIO_Init+0x308>)
 801253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012544:	6453      	str	r3, [r2, #68]	; 0x44
 8012546:	4b5c      	ldr	r3, [pc, #368]	; (80126b8 <HAL_GPIO_Init+0x308>)
 8012548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801254e:	60fb      	str	r3, [r7, #12]
 8012550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012552:	4a5a      	ldr	r2, [pc, #360]	; (80126bc <HAL_GPIO_Init+0x30c>)
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	089b      	lsrs	r3, r3, #2
 8012558:	3302      	adds	r3, #2
 801255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	f003 0303 	and.w	r3, r3, #3
 8012566:	009b      	lsls	r3, r3, #2
 8012568:	220f      	movs	r2, #15
 801256a:	fa02 f303 	lsl.w	r3, r2, r3
 801256e:	43db      	mvns	r3, r3
 8012570:	69ba      	ldr	r2, [r7, #24]
 8012572:	4013      	ands	r3, r2
 8012574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4a51      	ldr	r2, [pc, #324]	; (80126c0 <HAL_GPIO_Init+0x310>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d02b      	beq.n	80125d6 <HAL_GPIO_Init+0x226>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4a50      	ldr	r2, [pc, #320]	; (80126c4 <HAL_GPIO_Init+0x314>)
 8012582:	4293      	cmp	r3, r2
 8012584:	d025      	beq.n	80125d2 <HAL_GPIO_Init+0x222>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	4a4f      	ldr	r2, [pc, #316]	; (80126c8 <HAL_GPIO_Init+0x318>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d01f      	beq.n	80125ce <HAL_GPIO_Init+0x21e>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	4a4e      	ldr	r2, [pc, #312]	; (80126cc <HAL_GPIO_Init+0x31c>)
 8012592:	4293      	cmp	r3, r2
 8012594:	d019      	beq.n	80125ca <HAL_GPIO_Init+0x21a>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4a4d      	ldr	r2, [pc, #308]	; (80126d0 <HAL_GPIO_Init+0x320>)
 801259a:	4293      	cmp	r3, r2
 801259c:	d013      	beq.n	80125c6 <HAL_GPIO_Init+0x216>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4a4c      	ldr	r2, [pc, #304]	; (80126d4 <HAL_GPIO_Init+0x324>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d00d      	beq.n	80125c2 <HAL_GPIO_Init+0x212>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	4a4b      	ldr	r2, [pc, #300]	; (80126d8 <HAL_GPIO_Init+0x328>)
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d007      	beq.n	80125be <HAL_GPIO_Init+0x20e>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4a4a      	ldr	r2, [pc, #296]	; (80126dc <HAL_GPIO_Init+0x32c>)
 80125b2:	4293      	cmp	r3, r2
 80125b4:	d101      	bne.n	80125ba <HAL_GPIO_Init+0x20a>
 80125b6:	2307      	movs	r3, #7
 80125b8:	e00e      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125ba:	2308      	movs	r3, #8
 80125bc:	e00c      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125be:	2306      	movs	r3, #6
 80125c0:	e00a      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125c2:	2305      	movs	r3, #5
 80125c4:	e008      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125c6:	2304      	movs	r3, #4
 80125c8:	e006      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125ca:	2303      	movs	r3, #3
 80125cc:	e004      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125ce:	2302      	movs	r3, #2
 80125d0:	e002      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125d2:	2301      	movs	r3, #1
 80125d4:	e000      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125d6:	2300      	movs	r3, #0
 80125d8:	69fa      	ldr	r2, [r7, #28]
 80125da:	f002 0203 	and.w	r2, r2, #3
 80125de:	0092      	lsls	r2, r2, #2
 80125e0:	4093      	lsls	r3, r2
 80125e2:	69ba      	ldr	r2, [r7, #24]
 80125e4:	4313      	orrs	r3, r2
 80125e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80125e8:	4934      	ldr	r1, [pc, #208]	; (80126bc <HAL_GPIO_Init+0x30c>)
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	089b      	lsrs	r3, r3, #2
 80125ee:	3302      	adds	r3, #2
 80125f0:	69ba      	ldr	r2, [r7, #24]
 80125f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80125f6:	4b3a      	ldr	r3, [pc, #232]	; (80126e0 <HAL_GPIO_Init+0x330>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	43db      	mvns	r3, r3
 8012600:	69ba      	ldr	r2, [r7, #24]
 8012602:	4013      	ands	r3, r2
 8012604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801260e:	2b00      	cmp	r3, #0
 8012610:	d003      	beq.n	801261a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012612:	69ba      	ldr	r2, [r7, #24]
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	4313      	orrs	r3, r2
 8012618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801261a:	4a31      	ldr	r2, [pc, #196]	; (80126e0 <HAL_GPIO_Init+0x330>)
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012620:	4b2f      	ldr	r3, [pc, #188]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	43db      	mvns	r3, r3
 801262a:	69ba      	ldr	r2, [r7, #24]
 801262c:	4013      	ands	r3, r2
 801262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012638:	2b00      	cmp	r3, #0
 801263a:	d003      	beq.n	8012644 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 801263c:	69ba      	ldr	r2, [r7, #24]
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	4313      	orrs	r3, r2
 8012642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012644:	4a26      	ldr	r2, [pc, #152]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801264a:	4b25      	ldr	r3, [pc, #148]	; (80126e0 <HAL_GPIO_Init+0x330>)
 801264c:	689b      	ldr	r3, [r3, #8]
 801264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	43db      	mvns	r3, r3
 8012654:	69ba      	ldr	r2, [r7, #24]
 8012656:	4013      	ands	r3, r2
 8012658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012662:	2b00      	cmp	r3, #0
 8012664:	d003      	beq.n	801266e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012666:	69ba      	ldr	r2, [r7, #24]
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	4313      	orrs	r3, r2
 801266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801266e:	4a1c      	ldr	r2, [pc, #112]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012674:	4b1a      	ldr	r3, [pc, #104]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	43db      	mvns	r3, r3
 801267e:	69ba      	ldr	r2, [r7, #24]
 8012680:	4013      	ands	r3, r2
 8012682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d003      	beq.n	8012698 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012690:	69ba      	ldr	r2, [r7, #24]
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	4313      	orrs	r3, r2
 8012696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012698:	4a11      	ldr	r2, [pc, #68]	; (80126e0 <HAL_GPIO_Init+0x330>)
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	3301      	adds	r3, #1
 80126a2:	61fb      	str	r3, [r7, #28]
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	2b0f      	cmp	r3, #15
 80126a8:	f67f ae90 	bls.w	80123cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80126ac:	bf00      	nop
 80126ae:	3724      	adds	r7, #36	; 0x24
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr
 80126b8:	40023800 	.word	0x40023800
 80126bc:	40013800 	.word	0x40013800
 80126c0:	40020000 	.word	0x40020000
 80126c4:	40020400 	.word	0x40020400
 80126c8:	40020800 	.word	0x40020800
 80126cc:	40020c00 	.word	0x40020c00
 80126d0:	40021000 	.word	0x40021000
 80126d4:	40021400 	.word	0x40021400
 80126d8:	40021800 	.word	0x40021800
 80126dc:	40021c00 	.word	0x40021c00
 80126e0:	40013c00 	.word	0x40013c00

080126e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b087      	sub	sp, #28
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80126ee:	2300      	movs	r3, #0
 80126f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80126f2:	2300      	movs	r3, #0
 80126f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80126f6:	2300      	movs	r3, #0
 80126f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80126fa:	2300      	movs	r3, #0
 80126fc:	617b      	str	r3, [r7, #20]
 80126fe:	e0ce      	b.n	801289e <HAL_GPIO_DeInit+0x1ba>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012700:	2201      	movs	r2, #1
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	fa02 f303 	lsl.w	r3, r2, r3
 8012708:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801270a:	683a      	ldr	r2, [r7, #0]
 801270c:	693b      	ldr	r3, [r7, #16]
 801270e:	4013      	ands	r3, r2
 8012710:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8012712:	68fa      	ldr	r2, [r7, #12]
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	429a      	cmp	r2, r3
 8012718:	f040 80be 	bne.w	8012898 <HAL_GPIO_DeInit+0x1b4>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681a      	ldr	r2, [r3, #0]
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	005b      	lsls	r3, r3, #1
 8012724:	2103      	movs	r1, #3
 8012726:	fa01 f303 	lsl.w	r3, r1, r3
 801272a:	43db      	mvns	r3, r3
 801272c:	401a      	ands	r2, r3
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	08da      	lsrs	r2, r3, #3
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	08d9      	lsrs	r1, r3, #3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	3108      	adds	r1, #8
 801273e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	f003 0307 	and.w	r3, r3, #7
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	200f      	movs	r0, #15
 801274c:	fa00 f303 	lsl.w	r3, r0, r3
 8012750:	43db      	mvns	r3, r3
 8012752:	4019      	ands	r1, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	3208      	adds	r2, #8
 8012758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	689a      	ldr	r2, [r3, #8]
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	005b      	lsls	r3, r3, #1
 8012764:	2103      	movs	r1, #3
 8012766:	fa01 f303 	lsl.w	r3, r1, r3
 801276a:	43db      	mvns	r3, r3
 801276c:	401a      	ands	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	685a      	ldr	r2, [r3, #4]
 8012776:	2101      	movs	r1, #1
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	fa01 f303 	lsl.w	r3, r1, r3
 801277e:	43db      	mvns	r3, r3
 8012780:	401a      	ands	r2, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	68da      	ldr	r2, [r3, #12]
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	005b      	lsls	r3, r3, #1
 801278e:	2103      	movs	r1, #3
 8012790:	fa01 f303 	lsl.w	r3, r1, r3
 8012794:	43db      	mvns	r3, r3
 8012796:	401a      	ands	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801279c:	4a45      	ldr	r2, [pc, #276]	; (80128b4 <HAL_GPIO_DeInit+0x1d0>)
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	089b      	lsrs	r3, r3, #2
 80127a2:	3302      	adds	r3, #2
 80127a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	f003 0303 	and.w	r3, r3, #3
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	220f      	movs	r2, #15
 80127b4:	fa02 f303 	lsl.w	r3, r2, r3
 80127b8:	68ba      	ldr	r2, [r7, #8]
 80127ba:	4013      	ands	r3, r2
 80127bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4a3d      	ldr	r2, [pc, #244]	; (80128b8 <HAL_GPIO_DeInit+0x1d4>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d02b      	beq.n	801281e <HAL_GPIO_DeInit+0x13a>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	4a3c      	ldr	r2, [pc, #240]	; (80128bc <HAL_GPIO_DeInit+0x1d8>)
 80127ca:	4293      	cmp	r3, r2
 80127cc:	d025      	beq.n	801281a <HAL_GPIO_DeInit+0x136>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4a3b      	ldr	r2, [pc, #236]	; (80128c0 <HAL_GPIO_DeInit+0x1dc>)
 80127d2:	4293      	cmp	r3, r2
 80127d4:	d01f      	beq.n	8012816 <HAL_GPIO_DeInit+0x132>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4a3a      	ldr	r2, [pc, #232]	; (80128c4 <HAL_GPIO_DeInit+0x1e0>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d019      	beq.n	8012812 <HAL_GPIO_DeInit+0x12e>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4a39      	ldr	r2, [pc, #228]	; (80128c8 <HAL_GPIO_DeInit+0x1e4>)
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d013      	beq.n	801280e <HAL_GPIO_DeInit+0x12a>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	4a38      	ldr	r2, [pc, #224]	; (80128cc <HAL_GPIO_DeInit+0x1e8>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d00d      	beq.n	801280a <HAL_GPIO_DeInit+0x126>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4a37      	ldr	r2, [pc, #220]	; (80128d0 <HAL_GPIO_DeInit+0x1ec>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d007      	beq.n	8012806 <HAL_GPIO_DeInit+0x122>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4a36      	ldr	r2, [pc, #216]	; (80128d4 <HAL_GPIO_DeInit+0x1f0>)
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d101      	bne.n	8012802 <HAL_GPIO_DeInit+0x11e>
 80127fe:	2307      	movs	r3, #7
 8012800:	e00e      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012802:	2308      	movs	r3, #8
 8012804:	e00c      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012806:	2306      	movs	r3, #6
 8012808:	e00a      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801280a:	2305      	movs	r3, #5
 801280c:	e008      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801280e:	2304      	movs	r3, #4
 8012810:	e006      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012812:	2303      	movs	r3, #3
 8012814:	e004      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012816:	2302      	movs	r3, #2
 8012818:	e002      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801281a:	2301      	movs	r3, #1
 801281c:	e000      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801281e:	2300      	movs	r3, #0
 8012820:	697a      	ldr	r2, [r7, #20]
 8012822:	f002 0203 	and.w	r2, r2, #3
 8012826:	0092      	lsls	r2, r2, #2
 8012828:	fa03 f202 	lsl.w	r2, r3, r2
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	429a      	cmp	r2, r3
 8012830:	d132      	bne.n	8012898 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	f003 0303 	and.w	r3, r3, #3
 8012838:	009b      	lsls	r3, r3, #2
 801283a:	220f      	movs	r2, #15
 801283c:	fa02 f303 	lsl.w	r3, r2, r3
 8012840:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8012842:	481c      	ldr	r0, [pc, #112]	; (80128b4 <HAL_GPIO_DeInit+0x1d0>)
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	089b      	lsrs	r3, r3, #2
 8012848:	491a      	ldr	r1, [pc, #104]	; (80128b4 <HAL_GPIO_DeInit+0x1d0>)
 801284a:	697a      	ldr	r2, [r7, #20]
 801284c:	0892      	lsrs	r2, r2, #2
 801284e:	3202      	adds	r2, #2
 8012850:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012854:	68ba      	ldr	r2, [r7, #8]
 8012856:	43d2      	mvns	r2, r2
 8012858:	400a      	ands	r2, r1
 801285a:	3302      	adds	r3, #2
 801285c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012860:	491d      	ldr	r1, [pc, #116]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012862:	4b1d      	ldr	r3, [pc, #116]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	43db      	mvns	r3, r3
 801286a:	4013      	ands	r3, r2
 801286c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801286e:	491a      	ldr	r1, [pc, #104]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012870:	4b19      	ldr	r3, [pc, #100]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012872:	685a      	ldr	r2, [r3, #4]
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	43db      	mvns	r3, r3
 8012878:	4013      	ands	r3, r2
 801287a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801287c:	4916      	ldr	r1, [pc, #88]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 801287e:	4b16      	ldr	r3, [pc, #88]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012880:	689a      	ldr	r2, [r3, #8]
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	43db      	mvns	r3, r3
 8012886:	4013      	ands	r3, r2
 8012888:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801288a:	4913      	ldr	r1, [pc, #76]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 801288c:	4b12      	ldr	r3, [pc, #72]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 801288e:	68da      	ldr	r2, [r3, #12]
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	43db      	mvns	r3, r3
 8012894:	4013      	ands	r3, r2
 8012896:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	3301      	adds	r3, #1
 801289c:	617b      	str	r3, [r7, #20]
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	2b0f      	cmp	r3, #15
 80128a2:	f67f af2d 	bls.w	8012700 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 80128a6:	bf00      	nop
 80128a8:	371c      	adds	r7, #28
 80128aa:	46bd      	mov	sp, r7
 80128ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop
 80128b4:	40013800 	.word	0x40013800
 80128b8:	40020000 	.word	0x40020000
 80128bc:	40020400 	.word	0x40020400
 80128c0:	40020800 	.word	0x40020800
 80128c4:	40020c00 	.word	0x40020c00
 80128c8:	40021000 	.word	0x40021000
 80128cc:	40021400 	.word	0x40021400
 80128d0:	40021800 	.word	0x40021800
 80128d4:	40021c00 	.word	0x40021c00
 80128d8:	40013c00 	.word	0x40013c00

080128dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80128dc:	b480      	push	{r7}
 80128de:	b083      	sub	sp, #12
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	460b      	mov	r3, r1
 80128e6:	807b      	strh	r3, [r7, #2]
 80128e8:	4613      	mov	r3, r2
 80128ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80128ec:	787b      	ldrb	r3, [r7, #1]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d003      	beq.n	80128fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80128f2:	887a      	ldrh	r2, [r7, #2]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80128f8:	e003      	b.n	8012902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80128fa:	887b      	ldrh	r3, [r7, #2]
 80128fc:	041a      	lsls	r2, r3, #16
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	619a      	str	r2, [r3, #24]
}
 8012902:	bf00      	nop
 8012904:	370c      	adds	r7, #12
 8012906:	46bd      	mov	sp, r7
 8012908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290c:	4770      	bx	lr

0801290e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801290e:	b480      	push	{r7}
 8012910:	b083      	sub	sp, #12
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
 8012916:	460b      	mov	r3, r1
 8012918:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	695a      	ldr	r2, [r3, #20]
 801291e:	887b      	ldrh	r3, [r7, #2]
 8012920:	405a      	eors	r2, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	615a      	str	r2, [r3, #20]
}
 8012926:	bf00      	nop
 8012928:	370c      	adds	r7, #12
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr
	...

08012934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b086      	sub	sp, #24
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d101      	bne.n	8012946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012942:	2301      	movs	r3, #1
 8012944:	e22d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f003 0301 	and.w	r3, r3, #1
 801294e:	2b00      	cmp	r3, #0
 8012950:	d075      	beq.n	8012a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012952:	4ba3      	ldr	r3, [pc, #652]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012954:	689b      	ldr	r3, [r3, #8]
 8012956:	f003 030c 	and.w	r3, r3, #12
 801295a:	2b04      	cmp	r3, #4
 801295c:	d00c      	beq.n	8012978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801295e:	4ba0      	ldr	r3, [pc, #640]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012960:	689b      	ldr	r3, [r3, #8]
 8012962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012966:	2b08      	cmp	r3, #8
 8012968:	d112      	bne.n	8012990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801296a:	4b9d      	ldr	r3, [pc, #628]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012976:	d10b      	bne.n	8012990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012978:	4b99      	ldr	r3, [pc, #612]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012980:	2b00      	cmp	r3, #0
 8012982:	d05b      	beq.n	8012a3c <HAL_RCC_OscConfig+0x108>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d157      	bne.n	8012a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801298c:	2301      	movs	r3, #1
 801298e:	e208      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012998:	d106      	bne.n	80129a8 <HAL_RCC_OscConfig+0x74>
 801299a:	4a91      	ldr	r2, [pc, #580]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801299c:	4b90      	ldr	r3, [pc, #576]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80129a4:	6013      	str	r3, [r2, #0]
 80129a6:	e01d      	b.n	80129e4 <HAL_RCC_OscConfig+0xb0>
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80129b0:	d10c      	bne.n	80129cc <HAL_RCC_OscConfig+0x98>
 80129b2:	4a8b      	ldr	r2, [pc, #556]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129b4:	4b8a      	ldr	r3, [pc, #552]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80129bc:	6013      	str	r3, [r2, #0]
 80129be:	4a88      	ldr	r2, [pc, #544]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129c0:	4b87      	ldr	r3, [pc, #540]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80129c8:	6013      	str	r3, [r2, #0]
 80129ca:	e00b      	b.n	80129e4 <HAL_RCC_OscConfig+0xb0>
 80129cc:	4a84      	ldr	r2, [pc, #528]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129ce:	4b84      	ldr	r3, [pc, #528]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80129d6:	6013      	str	r3, [r2, #0]
 80129d8:	4a81      	ldr	r2, [pc, #516]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129da:	4b81      	ldr	r3, [pc, #516]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80129e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d013      	beq.n	8012a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80129ec:	f7fd fcf8 	bl	80103e0 <HAL_GetTick>
 80129f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80129f2:	e008      	b.n	8012a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80129f4:	f7fd fcf4 	bl	80103e0 <HAL_GetTick>
 80129f8:	4602      	mov	r2, r0
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	2b64      	cmp	r3, #100	; 0x64
 8012a00:	d901      	bls.n	8012a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012a02:	2303      	movs	r3, #3
 8012a04:	e1cd      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a06:	4b76      	ldr	r3, [pc, #472]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d0f0      	beq.n	80129f4 <HAL_RCC_OscConfig+0xc0>
 8012a12:	e014      	b.n	8012a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a14:	f7fd fce4 	bl	80103e0 <HAL_GetTick>
 8012a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012a1a:	e008      	b.n	8012a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012a1c:	f7fd fce0 	bl	80103e0 <HAL_GetTick>
 8012a20:	4602      	mov	r2, r0
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	1ad3      	subs	r3, r2, r3
 8012a26:	2b64      	cmp	r3, #100	; 0x64
 8012a28:	d901      	bls.n	8012a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012a2a:	2303      	movs	r3, #3
 8012a2c:	e1b9      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012a2e:	4b6c      	ldr	r3, [pc, #432]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d1f0      	bne.n	8012a1c <HAL_RCC_OscConfig+0xe8>
 8012a3a:	e000      	b.n	8012a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	f003 0302 	and.w	r3, r3, #2
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d063      	beq.n	8012b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012a4a:	4b65      	ldr	r3, [pc, #404]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a4c:	689b      	ldr	r3, [r3, #8]
 8012a4e:	f003 030c 	and.w	r3, r3, #12
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d00b      	beq.n	8012a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012a56:	4b62      	ldr	r3, [pc, #392]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a58:	689b      	ldr	r3, [r3, #8]
 8012a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012a5e:	2b08      	cmp	r3, #8
 8012a60:	d11c      	bne.n	8012a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012a62:	4b5f      	ldr	r3, [pc, #380]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d116      	bne.n	8012a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012a6e:	4b5c      	ldr	r3, [pc, #368]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f003 0302 	and.w	r3, r3, #2
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d005      	beq.n	8012a86 <HAL_RCC_OscConfig+0x152>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	68db      	ldr	r3, [r3, #12]
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d001      	beq.n	8012a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012a82:	2301      	movs	r3, #1
 8012a84:	e18d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012a86:	4956      	ldr	r1, [pc, #344]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a88:	4b55      	ldr	r3, [pc, #340]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	691b      	ldr	r3, [r3, #16]
 8012a94:	00db      	lsls	r3, r3, #3
 8012a96:	4313      	orrs	r3, r2
 8012a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012a9a:	e03a      	b.n	8012b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d020      	beq.n	8012ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012aa4:	4b4f      	ldr	r3, [pc, #316]	; (8012be4 <HAL_RCC_OscConfig+0x2b0>)
 8012aa6:	2201      	movs	r2, #1
 8012aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012aaa:	f7fd fc99 	bl	80103e0 <HAL_GetTick>
 8012aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012ab0:	e008      	b.n	8012ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012ab2:	f7fd fc95 	bl	80103e0 <HAL_GetTick>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	1ad3      	subs	r3, r2, r3
 8012abc:	2b02      	cmp	r3, #2
 8012abe:	d901      	bls.n	8012ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012ac0:	2303      	movs	r3, #3
 8012ac2:	e16e      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012ac4:	4b46      	ldr	r3, [pc, #280]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f003 0302 	and.w	r3, r3, #2
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d0f0      	beq.n	8012ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012ad0:	4943      	ldr	r1, [pc, #268]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ad2:	4b43      	ldr	r3, [pc, #268]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	691b      	ldr	r3, [r3, #16]
 8012ade:	00db      	lsls	r3, r3, #3
 8012ae0:	4313      	orrs	r3, r2
 8012ae2:	600b      	str	r3, [r1, #0]
 8012ae4:	e015      	b.n	8012b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012ae6:	4b3f      	ldr	r3, [pc, #252]	; (8012be4 <HAL_RCC_OscConfig+0x2b0>)
 8012ae8:	2200      	movs	r2, #0
 8012aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012aec:	f7fd fc78 	bl	80103e0 <HAL_GetTick>
 8012af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012af2:	e008      	b.n	8012b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012af4:	f7fd fc74 	bl	80103e0 <HAL_GetTick>
 8012af8:	4602      	mov	r2, r0
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	1ad3      	subs	r3, r2, r3
 8012afe:	2b02      	cmp	r3, #2
 8012b00:	d901      	bls.n	8012b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012b02:	2303      	movs	r3, #3
 8012b04:	e14d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012b06:	4b36      	ldr	r3, [pc, #216]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f003 0302 	and.w	r3, r3, #2
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1f0      	bne.n	8012af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f003 0308 	and.w	r3, r3, #8
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d030      	beq.n	8012b80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	695b      	ldr	r3, [r3, #20]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d016      	beq.n	8012b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012b26:	4b30      	ldr	r3, [pc, #192]	; (8012be8 <HAL_RCC_OscConfig+0x2b4>)
 8012b28:	2201      	movs	r2, #1
 8012b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b2c:	f7fd fc58 	bl	80103e0 <HAL_GetTick>
 8012b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b32:	e008      	b.n	8012b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b34:	f7fd fc54 	bl	80103e0 <HAL_GetTick>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	1ad3      	subs	r3, r2, r3
 8012b3e:	2b02      	cmp	r3, #2
 8012b40:	d901      	bls.n	8012b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012b42:	2303      	movs	r3, #3
 8012b44:	e12d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b46:	4b26      	ldr	r3, [pc, #152]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b4a:	f003 0302 	and.w	r3, r3, #2
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d0f0      	beq.n	8012b34 <HAL_RCC_OscConfig+0x200>
 8012b52:	e015      	b.n	8012b80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012b54:	4b24      	ldr	r3, [pc, #144]	; (8012be8 <HAL_RCC_OscConfig+0x2b4>)
 8012b56:	2200      	movs	r2, #0
 8012b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012b5a:	f7fd fc41 	bl	80103e0 <HAL_GetTick>
 8012b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b60:	e008      	b.n	8012b74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b62:	f7fd fc3d 	bl	80103e0 <HAL_GetTick>
 8012b66:	4602      	mov	r2, r0
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d901      	bls.n	8012b74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012b70:	2303      	movs	r3, #3
 8012b72:	e116      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b74:	4b1a      	ldr	r3, [pc, #104]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b78:	f003 0302 	and.w	r3, r3, #2
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1f0      	bne.n	8012b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f003 0304 	and.w	r3, r3, #4
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 80a0 	beq.w	8012cce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012b92:	4b13      	ldr	r3, [pc, #76]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d10f      	bne.n	8012bbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	60fb      	str	r3, [r7, #12]
 8012ba2:	4a0f      	ldr	r2, [pc, #60]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ba4:	4b0e      	ldr	r3, [pc, #56]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012bac:	6413      	str	r3, [r2, #64]	; 0x40
 8012bae:	4b0c      	ldr	r3, [pc, #48]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012bb6:	60fb      	str	r3, [r7, #12]
 8012bb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012bbe:	4b0b      	ldr	r3, [pc, #44]	; (8012bec <HAL_RCC_OscConfig+0x2b8>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d121      	bne.n	8012c0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012bca:	4a08      	ldr	r2, [pc, #32]	; (8012bec <HAL_RCC_OscConfig+0x2b8>)
 8012bcc:	4b07      	ldr	r3, [pc, #28]	; (8012bec <HAL_RCC_OscConfig+0x2b8>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012bd6:	f7fd fc03 	bl	80103e0 <HAL_GetTick>
 8012bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012bdc:	e011      	b.n	8012c02 <HAL_RCC_OscConfig+0x2ce>
 8012bde:	bf00      	nop
 8012be0:	40023800 	.word	0x40023800
 8012be4:	42470000 	.word	0x42470000
 8012be8:	42470e80 	.word	0x42470e80
 8012bec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012bf0:	f7fd fbf6 	bl	80103e0 <HAL_GetTick>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	2b02      	cmp	r3, #2
 8012bfc:	d901      	bls.n	8012c02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012bfe:	2303      	movs	r3, #3
 8012c00:	e0cf      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012c02:	4b6a      	ldr	r3, [pc, #424]	; (8012dac <HAL_RCC_OscConfig+0x478>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d0f0      	beq.n	8012bf0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	689b      	ldr	r3, [r3, #8]
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d106      	bne.n	8012c24 <HAL_RCC_OscConfig+0x2f0>
 8012c16:	4a66      	ldr	r2, [pc, #408]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c18:	4b65      	ldr	r3, [pc, #404]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c1c:	f043 0301 	orr.w	r3, r3, #1
 8012c20:	6713      	str	r3, [r2, #112]	; 0x70
 8012c22:	e01c      	b.n	8012c5e <HAL_RCC_OscConfig+0x32a>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	2b05      	cmp	r3, #5
 8012c2a:	d10c      	bne.n	8012c46 <HAL_RCC_OscConfig+0x312>
 8012c2c:	4a60      	ldr	r2, [pc, #384]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c2e:	4b60      	ldr	r3, [pc, #384]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c32:	f043 0304 	orr.w	r3, r3, #4
 8012c36:	6713      	str	r3, [r2, #112]	; 0x70
 8012c38:	4a5d      	ldr	r2, [pc, #372]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c3a:	4b5d      	ldr	r3, [pc, #372]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c3e:	f043 0301 	orr.w	r3, r3, #1
 8012c42:	6713      	str	r3, [r2, #112]	; 0x70
 8012c44:	e00b      	b.n	8012c5e <HAL_RCC_OscConfig+0x32a>
 8012c46:	4a5a      	ldr	r2, [pc, #360]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c48:	4b59      	ldr	r3, [pc, #356]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c4c:	f023 0301 	bic.w	r3, r3, #1
 8012c50:	6713      	str	r3, [r2, #112]	; 0x70
 8012c52:	4a57      	ldr	r2, [pc, #348]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c54:	4b56      	ldr	r3, [pc, #344]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c58:	f023 0304 	bic.w	r3, r3, #4
 8012c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d015      	beq.n	8012c92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c66:	f7fd fbbb 	bl	80103e0 <HAL_GetTick>
 8012c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c6c:	e00a      	b.n	8012c84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c6e:	f7fd fbb7 	bl	80103e0 <HAL_GetTick>
 8012c72:	4602      	mov	r2, r0
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	1ad3      	subs	r3, r2, r3
 8012c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	d901      	bls.n	8012c84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012c80:	2303      	movs	r3, #3
 8012c82:	e08e      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c84:	4b4a      	ldr	r3, [pc, #296]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c88:	f003 0302 	and.w	r3, r3, #2
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d0ee      	beq.n	8012c6e <HAL_RCC_OscConfig+0x33a>
 8012c90:	e014      	b.n	8012cbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012c92:	f7fd fba5 	bl	80103e0 <HAL_GetTick>
 8012c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012c98:	e00a      	b.n	8012cb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c9a:	f7fd fba1 	bl	80103e0 <HAL_GetTick>
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	1ad3      	subs	r3, r2, r3
 8012ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d901      	bls.n	8012cb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012cac:	2303      	movs	r3, #3
 8012cae:	e078      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012cb0:	4b3f      	ldr	r3, [pc, #252]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cb4:	f003 0302 	and.w	r3, r3, #2
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d1ee      	bne.n	8012c9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012cbc:	7dfb      	ldrb	r3, [r7, #23]
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d105      	bne.n	8012cce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012cc2:	4a3b      	ldr	r2, [pc, #236]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cc4:	4b3a      	ldr	r3, [pc, #232]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ccc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	699b      	ldr	r3, [r3, #24]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d064      	beq.n	8012da0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012cd6:	4b36      	ldr	r3, [pc, #216]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cd8:	689b      	ldr	r3, [r3, #8]
 8012cda:	f003 030c 	and.w	r3, r3, #12
 8012cde:	2b08      	cmp	r3, #8
 8012ce0:	d05c      	beq.n	8012d9c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	699b      	ldr	r3, [r3, #24]
 8012ce6:	2b02      	cmp	r3, #2
 8012ce8:	d141      	bne.n	8012d6e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012cea:	4b32      	ldr	r3, [pc, #200]	; (8012db4 <HAL_RCC_OscConfig+0x480>)
 8012cec:	2200      	movs	r2, #0
 8012cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012cf0:	f7fd fb76 	bl	80103e0 <HAL_GetTick>
 8012cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012cf6:	e008      	b.n	8012d0a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012cf8:	f7fd fb72 	bl	80103e0 <HAL_GetTick>
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	1ad3      	subs	r3, r2, r3
 8012d02:	2b02      	cmp	r3, #2
 8012d04:	d901      	bls.n	8012d0a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8012d06:	2303      	movs	r3, #3
 8012d08:	e04b      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d0a:	4b29      	ldr	r3, [pc, #164]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d1f0      	bne.n	8012cf8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012d16:	4926      	ldr	r1, [pc, #152]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	69da      	ldr	r2, [r3, #28]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6a1b      	ldr	r3, [r3, #32]
 8012d20:	431a      	orrs	r2, r3
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d26:	019b      	lsls	r3, r3, #6
 8012d28:	431a      	orrs	r2, r3
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d2e:	085b      	lsrs	r3, r3, #1
 8012d30:	3b01      	subs	r3, #1
 8012d32:	041b      	lsls	r3, r3, #16
 8012d34:	431a      	orrs	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d3a:	061b      	lsls	r3, r3, #24
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012d40:	4b1c      	ldr	r3, [pc, #112]	; (8012db4 <HAL_RCC_OscConfig+0x480>)
 8012d42:	2201      	movs	r2, #1
 8012d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d46:	f7fd fb4b 	bl	80103e0 <HAL_GetTick>
 8012d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d4c:	e008      	b.n	8012d60 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d4e:	f7fd fb47 	bl	80103e0 <HAL_GetTick>
 8012d52:	4602      	mov	r2, r0
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	1ad3      	subs	r3, r2, r3
 8012d58:	2b02      	cmp	r3, #2
 8012d5a:	d901      	bls.n	8012d60 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8012d5c:	2303      	movs	r3, #3
 8012d5e:	e020      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d60:	4b13      	ldr	r3, [pc, #76]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d0f0      	beq.n	8012d4e <HAL_RCC_OscConfig+0x41a>
 8012d6c:	e018      	b.n	8012da0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012d6e:	4b11      	ldr	r3, [pc, #68]	; (8012db4 <HAL_RCC_OscConfig+0x480>)
 8012d70:	2200      	movs	r2, #0
 8012d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d74:	f7fd fb34 	bl	80103e0 <HAL_GetTick>
 8012d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d7a:	e008      	b.n	8012d8e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d7c:	f7fd fb30 	bl	80103e0 <HAL_GetTick>
 8012d80:	4602      	mov	r2, r0
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	1ad3      	subs	r3, r2, r3
 8012d86:	2b02      	cmp	r3, #2
 8012d88:	d901      	bls.n	8012d8e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8012d8a:	2303      	movs	r3, #3
 8012d8c:	e009      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d8e:	4b08      	ldr	r3, [pc, #32]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d1f0      	bne.n	8012d7c <HAL_RCC_OscConfig+0x448>
 8012d9a:	e001      	b.n	8012da0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	e000      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8012da0:	2300      	movs	r3, #0
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3718      	adds	r7, #24
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	40007000 	.word	0x40007000
 8012db0:	40023800 	.word	0x40023800
 8012db4:	42470060 	.word	0x42470060

08012db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d101      	bne.n	8012dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	e0ca      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012dcc:	4b67      	ldr	r3, [pc, #412]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	f003 020f 	and.w	r2, r3, #15
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d20c      	bcs.n	8012df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012dda:	4b64      	ldr	r3, [pc, #400]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012ddc:	683a      	ldr	r2, [r7, #0]
 8012dde:	b2d2      	uxtb	r2, r2
 8012de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012de2:	4b62      	ldr	r3, [pc, #392]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	f003 020f 	and.w	r2, r3, #15
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d001      	beq.n	8012df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012df0:	2301      	movs	r3, #1
 8012df2:	e0b6      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f003 0302 	and.w	r3, r3, #2
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d020      	beq.n	8012e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f003 0304 	and.w	r3, r3, #4
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d005      	beq.n	8012e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012e0c:	4a58      	ldr	r2, [pc, #352]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e0e:	4b58      	ldr	r3, [pc, #352]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e10:	689b      	ldr	r3, [r3, #8]
 8012e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f003 0308 	and.w	r3, r3, #8
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d005      	beq.n	8012e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012e24:	4a52      	ldr	r2, [pc, #328]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e26:	4b52      	ldr	r3, [pc, #328]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012e30:	494f      	ldr	r1, [pc, #316]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e32:	4b4f      	ldr	r3, [pc, #316]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e34:	689b      	ldr	r3, [r3, #8]
 8012e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	689b      	ldr	r3, [r3, #8]
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f003 0301 	and.w	r3, r3, #1
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d044      	beq.n	8012ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	d107      	bne.n	8012e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012e56:	4b46      	ldr	r3, [pc, #280]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d119      	bne.n	8012e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e62:	2301      	movs	r3, #1
 8012e64:	e07d      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	2b02      	cmp	r3, #2
 8012e6c:	d003      	beq.n	8012e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012e72:	2b03      	cmp	r3, #3
 8012e74:	d107      	bne.n	8012e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012e76:	4b3e      	ldr	r3, [pc, #248]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d109      	bne.n	8012e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e82:	2301      	movs	r3, #1
 8012e84:	e06d      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012e86:	4b3a      	ldr	r3, [pc, #232]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f003 0302 	and.w	r3, r3, #2
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d101      	bne.n	8012e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e92:	2301      	movs	r3, #1
 8012e94:	e065      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012e96:	4936      	ldr	r1, [pc, #216]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e98:	4b35      	ldr	r3, [pc, #212]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e9a:	689b      	ldr	r3, [r3, #8]
 8012e9c:	f023 0203 	bic.w	r2, r3, #3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	4313      	orrs	r3, r2
 8012ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012ea8:	f7fd fa9a 	bl	80103e0 <HAL_GetTick>
 8012eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012eae:	e00a      	b.n	8012ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012eb0:	f7fd fa96 	bl	80103e0 <HAL_GetTick>
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	1ad3      	subs	r3, r2, r3
 8012eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d901      	bls.n	8012ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012ec2:	2303      	movs	r3, #3
 8012ec4:	e04d      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012ec6:	4b2a      	ldr	r3, [pc, #168]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012ec8:	689b      	ldr	r3, [r3, #8]
 8012eca:	f003 020c 	and.w	r2, r3, #12
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d1eb      	bne.n	8012eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012ed8:	4b24      	ldr	r3, [pc, #144]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f003 020f 	and.w	r2, r3, #15
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d90c      	bls.n	8012f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012ee6:	4b21      	ldr	r3, [pc, #132]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012ee8:	683a      	ldr	r2, [r7, #0]
 8012eea:	b2d2      	uxtb	r2, r2
 8012eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012eee:	4b1f      	ldr	r3, [pc, #124]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f003 020f 	and.w	r2, r3, #15
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d001      	beq.n	8012f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012efc:	2301      	movs	r3, #1
 8012efe:	e030      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f003 0304 	and.w	r3, r3, #4
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d008      	beq.n	8012f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012f0c:	4918      	ldr	r1, [pc, #96]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f0e:	4b18      	ldr	r3, [pc, #96]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f10:	689b      	ldr	r3, [r3, #8]
 8012f12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	68db      	ldr	r3, [r3, #12]
 8012f1a:	4313      	orrs	r3, r2
 8012f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	f003 0308 	and.w	r3, r3, #8
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d009      	beq.n	8012f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012f2a:	4911      	ldr	r1, [pc, #68]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f2c:	4b10      	ldr	r3, [pc, #64]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f2e:	689b      	ldr	r3, [r3, #8]
 8012f30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	691b      	ldr	r3, [r3, #16]
 8012f38:	00db      	lsls	r3, r3, #3
 8012f3a:	4313      	orrs	r3, r2
 8012f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012f3e:	f000 f81d 	bl	8012f7c <HAL_RCC_GetSysClockFreq>
 8012f42:	4601      	mov	r1, r0
 8012f44:	4b0a      	ldr	r3, [pc, #40]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	091b      	lsrs	r3, r3, #4
 8012f4a:	f003 030f 	and.w	r3, r3, #15
 8012f4e:	4a09      	ldr	r2, [pc, #36]	; (8012f74 <HAL_RCC_ClockConfig+0x1bc>)
 8012f50:	5cd3      	ldrb	r3, [r2, r3]
 8012f52:	fa21 f303 	lsr.w	r3, r1, r3
 8012f56:	4a08      	ldr	r2, [pc, #32]	; (8012f78 <HAL_RCC_ClockConfig+0x1c0>)
 8012f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8012f5a:	2000      	movs	r0, #0
 8012f5c:	f012 f800 	bl	8024f60 <HAL_InitTick>

  return HAL_OK;
 8012f60:	2300      	movs	r3, #0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3710      	adds	r7, #16
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	40023c00 	.word	0x40023c00
 8012f70:	40023800 	.word	0x40023800
 8012f74:	0802af88 	.word	0x0802af88
 8012f78:	20000048 	.word	0x20000048

08012f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f80:	b087      	sub	sp, #28
 8012f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012f84:	2200      	movs	r2, #0
 8012f86:	60fa      	str	r2, [r7, #12]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	617a      	str	r2, [r7, #20]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8012f90:	2200      	movs	r2, #0
 8012f92:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012f94:	4a51      	ldr	r2, [pc, #324]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012f96:	6892      	ldr	r2, [r2, #8]
 8012f98:	f002 020c 	and.w	r2, r2, #12
 8012f9c:	2a04      	cmp	r2, #4
 8012f9e:	d007      	beq.n	8012fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8012fa0:	2a08      	cmp	r2, #8
 8012fa2:	d008      	beq.n	8012fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8012fa4:	2a00      	cmp	r2, #0
 8012fa6:	f040 8090 	bne.w	80130ca <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012faa:	4b4d      	ldr	r3, [pc, #308]	; (80130e0 <HAL_RCC_GetSysClockFreq+0x164>)
 8012fac:	613b      	str	r3, [r7, #16]
       break;
 8012fae:	e08f      	b.n	80130d0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012fb0:	4b4c      	ldr	r3, [pc, #304]	; (80130e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012fb2:	613b      	str	r3, [r7, #16]
      break;
 8012fb4:	e08c      	b.n	80130d0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012fb6:	4a49      	ldr	r2, [pc, #292]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012fb8:	6852      	ldr	r2, [r2, #4]
 8012fba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012fbe:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012fc0:	4a46      	ldr	r2, [pc, #280]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012fc2:	6852      	ldr	r2, [r2, #4]
 8012fc4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8012fc8:	2a00      	cmp	r2, #0
 8012fca:	d023      	beq.n	8013014 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012fcc:	4b43      	ldr	r3, [pc, #268]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	099b      	lsrs	r3, r3, #6
 8012fd2:	f04f 0400 	mov.w	r4, #0
 8012fd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012fda:	f04f 0200 	mov.w	r2, #0
 8012fde:	ea03 0301 	and.w	r3, r3, r1
 8012fe2:	ea04 0402 	and.w	r4, r4, r2
 8012fe6:	4a3f      	ldr	r2, [pc, #252]	; (80130e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012fe8:	fb02 f104 	mul.w	r1, r2, r4
 8012fec:	2200      	movs	r2, #0
 8012fee:	fb02 f203 	mul.w	r2, r2, r3
 8012ff2:	440a      	add	r2, r1
 8012ff4:	493b      	ldr	r1, [pc, #236]	; (80130e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012ff6:	fba3 0101 	umull	r0, r1, r3, r1
 8012ffa:	1853      	adds	r3, r2, r1
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f04f 0400 	mov.w	r4, #0
 8013004:	461a      	mov	r2, r3
 8013006:	4623      	mov	r3, r4
 8013008:	f7fd f82c 	bl	8010064 <__aeabi_uldivmod>
 801300c:	4603      	mov	r3, r0
 801300e:	460c      	mov	r4, r1
 8013010:	617b      	str	r3, [r7, #20]
 8013012:	e04c      	b.n	80130ae <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013014:	4a31      	ldr	r2, [pc, #196]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8013016:	6852      	ldr	r2, [r2, #4]
 8013018:	0992      	lsrs	r2, r2, #6
 801301a:	4611      	mov	r1, r2
 801301c:	f04f 0200 	mov.w	r2, #0
 8013020:	f240 15ff 	movw	r5, #511	; 0x1ff
 8013024:	f04f 0600 	mov.w	r6, #0
 8013028:	ea05 0501 	and.w	r5, r5, r1
 801302c:	ea06 0602 	and.w	r6, r6, r2
 8013030:	4629      	mov	r1, r5
 8013032:	4632      	mov	r2, r6
 8013034:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8013038:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 801303c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8013040:	4651      	mov	r1, sl
 8013042:	465a      	mov	r2, fp
 8013044:	46aa      	mov	sl, r5
 8013046:	46b3      	mov	fp, r6
 8013048:	4655      	mov	r5, sl
 801304a:	465e      	mov	r6, fp
 801304c:	1b4d      	subs	r5, r1, r5
 801304e:	eb62 0606 	sbc.w	r6, r2, r6
 8013052:	4629      	mov	r1, r5
 8013054:	4632      	mov	r2, r6
 8013056:	0194      	lsls	r4, r2, #6
 8013058:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801305c:	018b      	lsls	r3, r1, #6
 801305e:	1a5b      	subs	r3, r3, r1
 8013060:	eb64 0402 	sbc.w	r4, r4, r2
 8013064:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8013068:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 801306c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8013070:	4643      	mov	r3, r8
 8013072:	464c      	mov	r4, r9
 8013074:	4655      	mov	r5, sl
 8013076:	465e      	mov	r6, fp
 8013078:	18ed      	adds	r5, r5, r3
 801307a:	eb46 0604 	adc.w	r6, r6, r4
 801307e:	462b      	mov	r3, r5
 8013080:	4634      	mov	r4, r6
 8013082:	02a2      	lsls	r2, r4, #10
 8013084:	607a      	str	r2, [r7, #4]
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801308c:	607a      	str	r2, [r7, #4]
 801308e:	029b      	lsls	r3, r3, #10
 8013090:	603b      	str	r3, [r7, #0]
 8013092:	e897 0018 	ldmia.w	r7, {r3, r4}
 8013096:	4618      	mov	r0, r3
 8013098:	4621      	mov	r1, r4
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	f04f 0400 	mov.w	r4, #0
 80130a0:	461a      	mov	r2, r3
 80130a2:	4623      	mov	r3, r4
 80130a4:	f7fc ffde 	bl	8010064 <__aeabi_uldivmod>
 80130a8:	4603      	mov	r3, r0
 80130aa:	460c      	mov	r4, r1
 80130ac:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80130ae:	4b0b      	ldr	r3, [pc, #44]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 80130b0:	685b      	ldr	r3, [r3, #4]
 80130b2:	0c1b      	lsrs	r3, r3, #16
 80130b4:	f003 0303 	and.w	r3, r3, #3
 80130b8:	3301      	adds	r3, #1
 80130ba:	005b      	lsls	r3, r3, #1
 80130bc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80130be:	697a      	ldr	r2, [r7, #20]
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80130c6:	613b      	str	r3, [r7, #16]
      break;
 80130c8:	e002      	b.n	80130d0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80130ca:	4b05      	ldr	r3, [pc, #20]	; (80130e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80130cc:	613b      	str	r3, [r7, #16]
      break;
 80130ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80130d0:	693b      	ldr	r3, [r7, #16]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	371c      	adds	r7, #28
 80130d6:	46bd      	mov	sp, r7
 80130d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130dc:	40023800 	.word	0x40023800
 80130e0:	00f42400 	.word	0x00f42400
 80130e4:	017d7840 	.word	0x017d7840

080130e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80130e8:	b480      	push	{r7}
 80130ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80130ec:	4b03      	ldr	r3, [pc, #12]	; (80130fc <HAL_RCC_GetHCLKFreq+0x14>)
 80130ee:	681b      	ldr	r3, [r3, #0]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	20000048 	.word	0x20000048

08013100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013104:	f7ff fff0 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8013108:	4601      	mov	r1, r0
 801310a:	4b05      	ldr	r3, [pc, #20]	; (8013120 <HAL_RCC_GetPCLK1Freq+0x20>)
 801310c:	689b      	ldr	r3, [r3, #8]
 801310e:	0a9b      	lsrs	r3, r3, #10
 8013110:	f003 0307 	and.w	r3, r3, #7
 8013114:	4a03      	ldr	r2, [pc, #12]	; (8013124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013116:	5cd3      	ldrb	r3, [r2, r3]
 8013118:	fa21 f303 	lsr.w	r3, r1, r3
}
 801311c:	4618      	mov	r0, r3
 801311e:	bd80      	pop	{r7, pc}
 8013120:	40023800 	.word	0x40023800
 8013124:	0802af98 	.word	0x0802af98

08013128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801312c:	f7ff ffdc 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8013130:	4601      	mov	r1, r0
 8013132:	4b05      	ldr	r3, [pc, #20]	; (8013148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013134:	689b      	ldr	r3, [r3, #8]
 8013136:	0b5b      	lsrs	r3, r3, #13
 8013138:	f003 0307 	and.w	r3, r3, #7
 801313c:	4a03      	ldr	r2, [pc, #12]	; (801314c <HAL_RCC_GetPCLK2Freq+0x24>)
 801313e:	5cd3      	ldrb	r3, [r2, r3]
 8013140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8013144:	4618      	mov	r0, r3
 8013146:	bd80      	pop	{r7, pc}
 8013148:	40023800 	.word	0x40023800
 801314c:	0802af98 	.word	0x0802af98

08013150 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	220f      	movs	r2, #15
 801315e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013160:	4b12      	ldr	r3, [pc, #72]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 8013162:	689b      	ldr	r3, [r3, #8]
 8013164:	f003 0203 	and.w	r2, r3, #3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801316c:	4b0f      	ldr	r3, [pc, #60]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 801316e:	689b      	ldr	r3, [r3, #8]
 8013170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8013178:	4b0c      	ldr	r3, [pc, #48]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 801317a:	689b      	ldr	r3, [r3, #8]
 801317c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013184:	4b09      	ldr	r3, [pc, #36]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 8013186:	689b      	ldr	r3, [r3, #8]
 8013188:	08db      	lsrs	r3, r3, #3
 801318a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013192:	4b07      	ldr	r3, [pc, #28]	; (80131b0 <HAL_RCC_GetClockConfig+0x60>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f003 020f 	and.w	r2, r3, #15
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	601a      	str	r2, [r3, #0]
}
 801319e:	bf00      	nop
 80131a0:	370c      	adds	r7, #12
 80131a2:	46bd      	mov	sp, r7
 80131a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop
 80131ac:	40023800 	.word	0x40023800
 80131b0:	40023c00 	.word	0x40023c00

080131b4 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d101      	bne.n	80131c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80131c2:	2301      	movs	r3, #1
 80131c4:	e01d      	b.n	8013202 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d106      	bne.n	80131e0 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2200      	movs	r2, #0
 80131d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f012 f876 	bl	80252cc <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2202      	movs	r2, #2
 80131e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	3304      	adds	r3, #4
 80131f0:	4619      	mov	r1, r3
 80131f2:	4610      	mov	r0, r2
 80131f4:	f000 fa5a 	bl	80136ac <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2201      	movs	r2, #1
 80131fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8013200:	2300      	movs	r3, #0
}
 8013202:	4618      	mov	r0, r3
 8013204:	3708      	adds	r7, #8
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}

0801320a <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801320a:	b480      	push	{r7}
 801320c:	b083      	sub	sp, #12
 801320e:	af00      	add	r7, sp, #0
 8013210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	6812      	ldr	r2, [r2, #0]
 801321a:	68d2      	ldr	r2, [r2, #12]
 801321c:	f042 0201 	orr.w	r2, r2, #1
 8013220:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	687a      	ldr	r2, [r7, #4]
 8013228:	6812      	ldr	r2, [r2, #0]
 801322a:	6812      	ldr	r2, [r2, #0]
 801322c:	f042 0201 	orr.w	r2, r2, #1
 8013230:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8013232:	2300      	movs	r3, #0
}
 8013234:	4618      	mov	r0, r3
 8013236:	370c      	adds	r7, #12
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr

08013240 <HAL_TIM_Base_Stop_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8013240:	b480      	push	{r7}
 8013242:	b083      	sub	sp, #12
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	6812      	ldr	r2, [r2, #0]
 8013250:	68d2      	ldr	r2, [r2, #12]
 8013252:	f022 0201 	bic.w	r2, r2, #1
 8013256:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	6a1a      	ldr	r2, [r3, #32]
 801325e:	f241 1311 	movw	r3, #4369	; 0x1111
 8013262:	4013      	ands	r3, r2
 8013264:	2b00      	cmp	r3, #0
 8013266:	d10f      	bne.n	8013288 <HAL_TIM_Base_Stop_IT+0x48>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	6a1a      	ldr	r2, [r3, #32]
 801326e:	f240 4344 	movw	r3, #1092	; 0x444
 8013272:	4013      	ands	r3, r2
 8013274:	2b00      	cmp	r3, #0
 8013276:	d107      	bne.n	8013288 <HAL_TIM_Base_Stop_IT+0x48>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	6812      	ldr	r2, [r2, #0]
 8013280:	6812      	ldr	r2, [r2, #0]
 8013282:	f022 0201 	bic.w	r2, r2, #1
 8013286:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 8013288:	2300      	movs	r3, #0
}
 801328a:	4618      	mov	r0, r3
 801328c:	370c      	adds	r7, #12
 801328e:	46bd      	mov	sp, r7
 8013290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013294:	4770      	bx	lr

08013296 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013296:	b580      	push	{r7, lr}
 8013298:	b082      	sub	sp, #8
 801329a:	af00      	add	r7, sp, #0
 801329c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	691b      	ldr	r3, [r3, #16]
 80132a4:	f003 0302 	and.w	r3, r3, #2
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d122      	bne.n	80132f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	f003 0302 	and.w	r3, r3, #2
 80132b6:	2b02      	cmp	r3, #2
 80132b8:	d11b      	bne.n	80132f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f06f 0202 	mvn.w	r2, #2
 80132c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2201      	movs	r2, #1
 80132c8:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	699b      	ldr	r3, [r3, #24]
 80132d0:	f003 0303 	and.w	r3, r3, #3
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d003      	beq.n	80132e0 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f000 f9c9 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 80132de:	e005      	b.n	80132ec <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f000 f9bb 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f000 f9cc 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2200      	movs	r2, #0
 80132f0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	691b      	ldr	r3, [r3, #16]
 80132f8:	f003 0304 	and.w	r3, r3, #4
 80132fc:	2b04      	cmp	r3, #4
 80132fe:	d122      	bne.n	8013346 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	68db      	ldr	r3, [r3, #12]
 8013306:	f003 0304 	and.w	r3, r3, #4
 801330a:	2b04      	cmp	r3, #4
 801330c:	d11b      	bne.n	8013346 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	f06f 0204 	mvn.w	r2, #4
 8013316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2202      	movs	r2, #2
 801331c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	699b      	ldr	r3, [r3, #24]
 8013324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013328:	2b00      	cmp	r3, #0
 801332a:	d003      	beq.n	8013334 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 f99f 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 8013332:	e005      	b.n	8013340 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f000 f991 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f000 f9a2 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2200      	movs	r2, #0
 8013344:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	691b      	ldr	r3, [r3, #16]
 801334c:	f003 0308 	and.w	r3, r3, #8
 8013350:	2b08      	cmp	r3, #8
 8013352:	d122      	bne.n	801339a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	68db      	ldr	r3, [r3, #12]
 801335a:	f003 0308 	and.w	r3, r3, #8
 801335e:	2b08      	cmp	r3, #8
 8013360:	d11b      	bne.n	801339a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f06f 0208 	mvn.w	r2, #8
 801336a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2204      	movs	r2, #4
 8013370:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	69db      	ldr	r3, [r3, #28]
 8013378:	f003 0303 	and.w	r3, r3, #3
 801337c:	2b00      	cmp	r3, #0
 801337e:	d003      	beq.n	8013388 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f000 f975 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 8013386:	e005      	b.n	8013394 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f000 f967 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f000 f978 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2200      	movs	r2, #0
 8013398:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	691b      	ldr	r3, [r3, #16]
 80133a0:	f003 0310 	and.w	r3, r3, #16
 80133a4:	2b10      	cmp	r3, #16
 80133a6:	d122      	bne.n	80133ee <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	f003 0310 	and.w	r3, r3, #16
 80133b2:	2b10      	cmp	r3, #16
 80133b4:	d11b      	bne.n	80133ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f06f 0210 	mvn.w	r2, #16
 80133be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2208      	movs	r2, #8
 80133c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	69db      	ldr	r3, [r3, #28]
 80133cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d003      	beq.n	80133dc <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f000 f94b 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 80133da:	e005      	b.n	80133e8 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f000 f93d 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 f94e 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2200      	movs	r2, #0
 80133ec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	691b      	ldr	r3, [r3, #16]
 80133f4:	f003 0301 	and.w	r3, r3, #1
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d10e      	bne.n	801341a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	68db      	ldr	r3, [r3, #12]
 8013402:	f003 0301 	and.w	r3, r3, #1
 8013406:	2b01      	cmp	r3, #1
 8013408:	d107      	bne.n	801341a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f06f 0201 	mvn.w	r2, #1
 8013412:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f011 fb77 	bl	8024b08 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	691b      	ldr	r3, [r3, #16]
 8013420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013424:	2b80      	cmp	r3, #128	; 0x80
 8013426:	d10e      	bne.n	8013446 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013432:	2b80      	cmp	r3, #128	; 0x80
 8013434:	d107      	bne.n	8013446 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801343e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f000 fad5 	bl	80139f0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	691b      	ldr	r3, [r3, #16]
 801344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013450:	2b40      	cmp	r3, #64	; 0x40
 8013452:	d10e      	bne.n	8013472 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801345e:	2b40      	cmp	r3, #64	; 0x40
 8013460:	d107      	bne.n	8013472 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801346a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f000 f913 	bl	8013698 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	691b      	ldr	r3, [r3, #16]
 8013478:	f003 0320 	and.w	r3, r3, #32
 801347c:	2b20      	cmp	r3, #32
 801347e:	d10e      	bne.n	801349e <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	f003 0320 	and.w	r3, r3, #32
 801348a:	2b20      	cmp	r3, #32
 801348c:	d107      	bne.n	801349e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	f06f 0220 	mvn.w	r2, #32
 8013496:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f000 fa9f 	bl	80139dc <HAL_TIMEx_CommutationCallback>
    }
  }
}
 801349e:	bf00      	nop
 80134a0:	3708      	adds	r7, #8
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b084      	sub	sp, #16
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80134b0:	2300      	movs	r3, #0
 80134b2:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80134ba:	2b01      	cmp	r3, #1
 80134bc:	d101      	bne.n	80134c2 <HAL_TIM_ConfigClockSource+0x1c>
 80134be:	2302      	movs	r3, #2
 80134c0:	e0c8      	b.n	8013654 <HAL_TIM_ConfigClockSource+0x1ae>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2201      	movs	r2, #1
 80134c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2202      	movs	r2, #2
 80134ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80134e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80134e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	68fa      	ldr	r2, [r7, #12]
 80134f0:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b40      	cmp	r3, #64	; 0x40
 80134f8:	d077      	beq.n	80135ea <HAL_TIM_ConfigClockSource+0x144>
 80134fa:	2b40      	cmp	r3, #64	; 0x40
 80134fc:	d80e      	bhi.n	801351c <HAL_TIM_ConfigClockSource+0x76>
 80134fe:	2b10      	cmp	r3, #16
 8013500:	f000 808a 	beq.w	8013618 <HAL_TIM_ConfigClockSource+0x172>
 8013504:	2b10      	cmp	r3, #16
 8013506:	d802      	bhi.n	801350e <HAL_TIM_ConfigClockSource+0x68>
 8013508:	2b00      	cmp	r3, #0
 801350a:	d07e      	beq.n	801360a <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 801350c:	e099      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801350e:	2b20      	cmp	r3, #32
 8013510:	f000 8089 	beq.w	8013626 <HAL_TIM_ConfigClockSource+0x180>
 8013514:	2b30      	cmp	r3, #48	; 0x30
 8013516:	f000 808d 	beq.w	8013634 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 801351a:	e092      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801351c:	2b70      	cmp	r3, #112	; 0x70
 801351e:	d016      	beq.n	801354e <HAL_TIM_ConfigClockSource+0xa8>
 8013520:	2b70      	cmp	r3, #112	; 0x70
 8013522:	d804      	bhi.n	801352e <HAL_TIM_ConfigClockSource+0x88>
 8013524:	2b50      	cmp	r3, #80	; 0x50
 8013526:	d040      	beq.n	80135aa <HAL_TIM_ConfigClockSource+0x104>
 8013528:	2b60      	cmp	r3, #96	; 0x60
 801352a:	d04e      	beq.n	80135ca <HAL_TIM_ConfigClockSource+0x124>
    break;    
 801352c:	e089      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801352e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013532:	d003      	beq.n	801353c <HAL_TIM_ConfigClockSource+0x96>
 8013534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013538:	d024      	beq.n	8013584 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 801353a:	e082      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	6812      	ldr	r2, [r2, #0]
 8013544:	6892      	ldr	r2, [r2, #8]
 8013546:	f022 0207 	bic.w	r2, r2, #7
 801354a:	609a      	str	r2, [r3, #8]
    break;
 801354c:	e079      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6818      	ldr	r0, [r3, #0]
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	6899      	ldr	r1, [r3, #8]
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	685a      	ldr	r2, [r3, #4]
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	f000 f9d6 	bl	801390e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	689b      	ldr	r3, [r3, #8]
 8013568:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8013570:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013578:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	609a      	str	r2, [r3, #8]
    break;
 8013582:	e05e      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6818      	ldr	r0, [r3, #0]
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	6899      	ldr	r1, [r3, #8]
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	685a      	ldr	r2, [r3, #4]
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	f000 f9bb 	bl	801390e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	687a      	ldr	r2, [r7, #4]
 801359e:	6812      	ldr	r2, [r2, #0]
 80135a0:	6892      	ldr	r2, [r2, #8]
 80135a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80135a6:	609a      	str	r2, [r3, #8]
    break;
 80135a8:	e04b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6818      	ldr	r0, [r3, #0]
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	6859      	ldr	r1, [r3, #4]
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	68db      	ldr	r3, [r3, #12]
 80135b6:	461a      	mov	r2, r3
 80135b8:	f000 f922 	bl	8013800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2150      	movs	r1, #80	; 0x50
 80135c2:	4618      	mov	r0, r3
 80135c4:	f000 f983 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 80135c8:	e03b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6818      	ldr	r0, [r3, #0]
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	6859      	ldr	r1, [r3, #4]
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	68db      	ldr	r3, [r3, #12]
 80135d6:	461a      	mov	r2, r3
 80135d8:	f000 f945 	bl	8013866 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2160      	movs	r1, #96	; 0x60
 80135e2:	4618      	mov	r0, r3
 80135e4:	f000 f973 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 80135e8:	e02b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6818      	ldr	r0, [r3, #0]
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	6859      	ldr	r1, [r3, #4]
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	68db      	ldr	r3, [r3, #12]
 80135f6:	461a      	mov	r2, r3
 80135f8:	f000 f902 	bl	8013800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2140      	movs	r1, #64	; 0x40
 8013602:	4618      	mov	r0, r3
 8013604:	f000 f963 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013608:	e01b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	2100      	movs	r1, #0
 8013610:	4618      	mov	r0, r3
 8013612:	f000 f95c 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013616:	e014      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	2110      	movs	r1, #16
 801361e:	4618      	mov	r0, r3
 8013620:	f000 f955 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013624:	e00d      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2120      	movs	r1, #32
 801362c:	4618      	mov	r0, r3
 801362e:	f000 f94e 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013632:	e006      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	2130      	movs	r1, #48	; 0x30
 801363a:	4618      	mov	r0, r3
 801363c:	f000 f947 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013640:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2201      	movs	r2, #1
 8013646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2200      	movs	r2, #0
 801364e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8013652:	2300      	movs	r3, #0
}
 8013654:	4618      	mov	r0, r3
 8013656:	3710      	adds	r7, #16
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801365c:	b480      	push	{r7}
 801365e:	b083      	sub	sp, #12
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013664:	bf00      	nop
 8013666:	370c      	adds	r7, #12
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr

08013670 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013670:	b480      	push	{r7}
 8013672:	b083      	sub	sp, #12
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013678:	bf00      	nop
 801367a:	370c      	adds	r7, #12
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr

08013684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013684:	b480      	push	{r7}
 8013686:	b083      	sub	sp, #12
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801368c:	bf00      	nop
 801368e:	370c      	adds	r7, #12
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr

08013698 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013698:	b480      	push	{r7}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80136a0:	bf00      	nop
 80136a2:	370c      	adds	r7, #12
 80136a4:	46bd      	mov	sp, r7
 80136a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136aa:	4770      	bx	lr

080136ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b085      	sub	sp, #20
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80136b6:	2300      	movs	r3, #0
 80136b8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	4a44      	ldr	r2, [pc, #272]	; (80137d4 <TIM_Base_SetConfig+0x128>)
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d013      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80136ce:	d00f      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	4a41      	ldr	r2, [pc, #260]	; (80137d8 <TIM_Base_SetConfig+0x12c>)
 80136d4:	4293      	cmp	r3, r2
 80136d6:	d00b      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	4a40      	ldr	r2, [pc, #256]	; (80137dc <TIM_Base_SetConfig+0x130>)
 80136dc:	4293      	cmp	r3, r2
 80136de:	d007      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	4a3f      	ldr	r2, [pc, #252]	; (80137e0 <TIM_Base_SetConfig+0x134>)
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d003      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	4a3e      	ldr	r2, [pc, #248]	; (80137e4 <TIM_Base_SetConfig+0x138>)
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d101      	bne.n	80136f4 <TIM_Base_SetConfig+0x48>
 80136f0:	2301      	movs	r3, #1
 80136f2:	e000      	b.n	80136f6 <TIM_Base_SetConfig+0x4a>
 80136f4:	2300      	movs	r3, #0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d008      	beq.n	801370c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	68fa      	ldr	r2, [r7, #12]
 8013708:	4313      	orrs	r3, r2
 801370a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	4a31      	ldr	r2, [pc, #196]	; (80137d4 <TIM_Base_SetConfig+0x128>)
 8013710:	4293      	cmp	r3, r2
 8013712:	d02b      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801371a:	d027      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	4a2e      	ldr	r2, [pc, #184]	; (80137d8 <TIM_Base_SetConfig+0x12c>)
 8013720:	4293      	cmp	r3, r2
 8013722:	d023      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	4a2d      	ldr	r2, [pc, #180]	; (80137dc <TIM_Base_SetConfig+0x130>)
 8013728:	4293      	cmp	r3, r2
 801372a:	d01f      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	4a2c      	ldr	r2, [pc, #176]	; (80137e0 <TIM_Base_SetConfig+0x134>)
 8013730:	4293      	cmp	r3, r2
 8013732:	d01b      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	4a2b      	ldr	r2, [pc, #172]	; (80137e4 <TIM_Base_SetConfig+0x138>)
 8013738:	4293      	cmp	r3, r2
 801373a:	d017      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	4a2a      	ldr	r2, [pc, #168]	; (80137e8 <TIM_Base_SetConfig+0x13c>)
 8013740:	4293      	cmp	r3, r2
 8013742:	d013      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	4a29      	ldr	r2, [pc, #164]	; (80137ec <TIM_Base_SetConfig+0x140>)
 8013748:	4293      	cmp	r3, r2
 801374a:	d00f      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	4a28      	ldr	r2, [pc, #160]	; (80137f0 <TIM_Base_SetConfig+0x144>)
 8013750:	4293      	cmp	r3, r2
 8013752:	d00b      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	4a27      	ldr	r2, [pc, #156]	; (80137f4 <TIM_Base_SetConfig+0x148>)
 8013758:	4293      	cmp	r3, r2
 801375a:	d007      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	4a26      	ldr	r2, [pc, #152]	; (80137f8 <TIM_Base_SetConfig+0x14c>)
 8013760:	4293      	cmp	r3, r2
 8013762:	d003      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	4a25      	ldr	r2, [pc, #148]	; (80137fc <TIM_Base_SetConfig+0x150>)
 8013768:	4293      	cmp	r3, r2
 801376a:	d101      	bne.n	8013770 <TIM_Base_SetConfig+0xc4>
 801376c:	2301      	movs	r3, #1
 801376e:	e000      	b.n	8013772 <TIM_Base_SetConfig+0xc6>
 8013770:	2300      	movs	r3, #0
 8013772:	2b00      	cmp	r3, #0
 8013774:	d008      	beq.n	8013788 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801377c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	68db      	ldr	r3, [r3, #12]
 8013782:	68fa      	ldr	r2, [r7, #12]
 8013784:	4313      	orrs	r3, r2
 8013786:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	689a      	ldr	r2, [r3, #8]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4a0c      	ldr	r2, [pc, #48]	; (80137d4 <TIM_Base_SetConfig+0x128>)
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d003      	beq.n	80137ae <TIM_Base_SetConfig+0x102>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4a0e      	ldr	r2, [pc, #56]	; (80137e4 <TIM_Base_SetConfig+0x138>)
 80137aa:	4293      	cmp	r3, r2
 80137ac:	d101      	bne.n	80137b2 <TIM_Base_SetConfig+0x106>
 80137ae:	2301      	movs	r3, #1
 80137b0:	e000      	b.n	80137b4 <TIM_Base_SetConfig+0x108>
 80137b2:	2300      	movs	r3, #0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d003      	beq.n	80137c0 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	691a      	ldr	r2, [r3, #16]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2201      	movs	r2, #1
 80137c4:	615a      	str	r2, [r3, #20]
}
 80137c6:	bf00      	nop
 80137c8:	3714      	adds	r7, #20
 80137ca:	46bd      	mov	sp, r7
 80137cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d0:	4770      	bx	lr
 80137d2:	bf00      	nop
 80137d4:	40010000 	.word	0x40010000
 80137d8:	40000400 	.word	0x40000400
 80137dc:	40000800 	.word	0x40000800
 80137e0:	40000c00 	.word	0x40000c00
 80137e4:	40010400 	.word	0x40010400
 80137e8:	40014000 	.word	0x40014000
 80137ec:	40014400 	.word	0x40014400
 80137f0:	40014800 	.word	0x40014800
 80137f4:	40001800 	.word	0x40001800
 80137f8:	40001c00 	.word	0x40001c00
 80137fc:	40002000 	.word	0x40002000

08013800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013800:	b480      	push	{r7}
 8013802:	b087      	sub	sp, #28
 8013804:	af00      	add	r7, sp, #0
 8013806:	60f8      	str	r0, [r7, #12]
 8013808:	60b9      	str	r1, [r7, #8]
 801380a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 801380c:	2300      	movs	r3, #0
 801380e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8013810:	2300      	movs	r3, #0
 8013812:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	6a1b      	ldr	r3, [r3, #32]
 8013818:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	6a1b      	ldr	r3, [r3, #32]
 801381e:	f023 0201 	bic.w	r2, r3, #1
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	699b      	ldr	r3, [r3, #24]
 801382a:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013832:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	011b      	lsls	r3, r3, #4
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	4313      	orrs	r3, r2
 801383c:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	f023 030a 	bic.w	r3, r3, #10
 8013844:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8013846:	693a      	ldr	r2, [r7, #16]
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	4313      	orrs	r3, r2
 801384c:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	697a      	ldr	r2, [r7, #20]
 8013852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	693a      	ldr	r2, [r7, #16]
 8013858:	621a      	str	r2, [r3, #32]
}
 801385a:	bf00      	nop
 801385c:	371c      	adds	r7, #28
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr

08013866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013866:	b480      	push	{r7}
 8013868:	b087      	sub	sp, #28
 801386a:	af00      	add	r7, sp, #0
 801386c:	60f8      	str	r0, [r7, #12]
 801386e:	60b9      	str	r1, [r7, #8]
 8013870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8013872:	2300      	movs	r3, #0
 8013874:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8013876:	2300      	movs	r3, #0
 8013878:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	6a1b      	ldr	r3, [r3, #32]
 801387e:	f023 0210 	bic.w	r2, r3, #16
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	699b      	ldr	r3, [r3, #24]
 801388a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	6a1b      	ldr	r3, [r3, #32]
 8013890:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	031b      	lsls	r3, r3, #12
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	4313      	orrs	r3, r2
 80138a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80138aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	011b      	lsls	r3, r3, #4
 80138b0:	693a      	ldr	r2, [r7, #16]
 80138b2:	4313      	orrs	r3, r2
 80138b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	697a      	ldr	r2, [r7, #20]
 80138ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	693a      	ldr	r2, [r7, #16]
 80138c0:	621a      	str	r2, [r3, #32]
}
 80138c2:	bf00      	nop
 80138c4:	371c      	adds	r7, #28
 80138c6:	46bd      	mov	sp, r7
 80138c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138cc:	4770      	bx	lr

080138ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 80138ce:	b480      	push	{r7}
 80138d0:	b085      	sub	sp, #20
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
 80138d6:	460b      	mov	r3, r1
 80138d8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80138da:	2300      	movs	r3, #0
 80138dc:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	689b      	ldr	r3, [r3, #8]
 80138e2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80138ea:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80138ec:	887b      	ldrh	r3, [r7, #2]
 80138ee:	f043 0307 	orr.w	r3, r3, #7
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	461a      	mov	r2, r3
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	4313      	orrs	r3, r2
 80138fa:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	609a      	str	r2, [r3, #8]
}
 8013902:	bf00      	nop
 8013904:	3714      	adds	r7, #20
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr

0801390e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801390e:	b480      	push	{r7}
 8013910:	b087      	sub	sp, #28
 8013912:	af00      	add	r7, sp, #0
 8013914:	60f8      	str	r0, [r7, #12]
 8013916:	60b9      	str	r1, [r7, #8]
 8013918:	607a      	str	r2, [r7, #4]
 801391a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 801391c:	2300      	movs	r3, #0
 801391e:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	689b      	ldr	r3, [r3, #8]
 8013924:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801392c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	021a      	lsls	r2, r3, #8
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	431a      	orrs	r2, r3
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	4313      	orrs	r3, r2
 801393a:	697a      	ldr	r2, [r7, #20]
 801393c:	4313      	orrs	r3, r2
 801393e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	697a      	ldr	r2, [r7, #20]
 8013944:	609a      	str	r2, [r3, #8]
} 
 8013946:	bf00      	nop
 8013948:	371c      	adds	r7, #28
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr

08013952 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8013952:	b480      	push	{r7}
 8013954:	b083      	sub	sp, #12
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
 801395a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013962:	2b01      	cmp	r3, #1
 8013964:	d101      	bne.n	801396a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013966:	2302      	movs	r3, #2
 8013968:	e032      	b.n	80139d0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2201      	movs	r2, #1
 801396e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2202      	movs	r2, #2
 8013976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	6812      	ldr	r2, [r2, #0]
 8013982:	6852      	ldr	r2, [r2, #4]
 8013984:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8013988:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	687a      	ldr	r2, [r7, #4]
 8013990:	6812      	ldr	r2, [r2, #0]
 8013992:	6851      	ldr	r1, [r2, #4]
 8013994:	683a      	ldr	r2, [r7, #0]
 8013996:	6812      	ldr	r2, [r2, #0]
 8013998:	430a      	orrs	r2, r1
 801399a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	687a      	ldr	r2, [r7, #4]
 80139a2:	6812      	ldr	r2, [r2, #0]
 80139a4:	6892      	ldr	r2, [r2, #8]
 80139a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80139aa:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	6812      	ldr	r2, [r2, #0]
 80139b4:	6891      	ldr	r1, [r2, #8]
 80139b6:	683a      	ldr	r2, [r7, #0]
 80139b8:	6852      	ldr	r2, [r2, #4]
 80139ba:	430a      	orrs	r2, r1
 80139bc:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2201      	movs	r2, #1
 80139c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2200      	movs	r2, #0
 80139ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80139ce:	2300      	movs	r3, #0
} 
 80139d0:	4618      	mov	r0, r3
 80139d2:	370c      	adds	r7, #12
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr

080139dc <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80139dc:	b480      	push	{r7}
 80139de:	b083      	sub	sp, #12
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80139e4:	bf00      	nop
 80139e6:	370c      	adds	r7, #12
 80139e8:	46bd      	mov	sp, r7
 80139ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ee:	4770      	bx	lr

080139f0 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80139f0:	b480      	push	{r7}
 80139f2:	b083      	sub	sp, #12
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80139f8:	bf00      	nop
 80139fa:	370c      	adds	r7, #12
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr

08013a04 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d101      	bne.n	8013a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013a12:	2301      	movs	r3, #1
 8013a14:	e03f      	b.n	8013a96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d106      	bne.n	8013a30 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2200      	movs	r2, #0
 8013a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f011 feec 	bl	8025808 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2224      	movs	r2, #36	; 0x24
 8013a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	6812      	ldr	r2, [r2, #0]
 8013a40:	68d2      	ldr	r2, [r2, #12]
 8013a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013a46:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f000 fbcf 	bl	80141ec <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	687a      	ldr	r2, [r7, #4]
 8013a54:	6812      	ldr	r2, [r2, #0]
 8013a56:	6912      	ldr	r2, [r2, #16]
 8013a58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	6812      	ldr	r2, [r2, #0]
 8013a66:	6952      	ldr	r2, [r2, #20]
 8013a68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013a6c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	6812      	ldr	r2, [r2, #0]
 8013a76:	68d2      	ldr	r2, [r2, #12]
 8013a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013a7c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2200      	movs	r2, #0
 8013a82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2220      	movs	r2, #32
 8013a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2220      	movs	r2, #32
 8013a90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8013a94:	2300      	movs	r3, #0
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3708      	adds	r7, #8
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <HAL_UART_DeInit>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d101      	bne.n	8013ab0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8013aac:	2301      	movs	r3, #1
 8013aae:	e016      	b.n	8013ade <HAL_UART_DeInit+0x40>
  }
  
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2224      	movs	r2, #36	; 0x24
 8013ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f011 ff87 	bl	80259cc <HAL_UART_MspDeInit>
  
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Lock */
  __HAL_UNLOCK(huart);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8013adc:	2300      	movs	r3, #0
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3708      	adds	r7, #8
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}

08013ae6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013ae6:	b480      	push	{r7}
 8013ae8:	b085      	sub	sp, #20
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	60f8      	str	r0, [r7, #12]
 8013aee:	60b9      	str	r1, [r7, #8]
 8013af0:	4613      	mov	r3, r2
 8013af2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013afa:	b2db      	uxtb	r3, r3
 8013afc:	2b20      	cmp	r3, #32
 8013afe:	d138      	bne.n	8013b72 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d002      	beq.n	8013b0c <HAL_UART_Receive_IT+0x26>
 8013b06:	88fb      	ldrh	r3, [r7, #6]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d101      	bne.n	8013b10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	e031      	b.n	8013b74 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b16:	2b01      	cmp	r3, #1
 8013b18:	d101      	bne.n	8013b1e <HAL_UART_Receive_IT+0x38>
 8013b1a:	2302      	movs	r3, #2
 8013b1c:	e02a      	b.n	8013b74 <HAL_UART_Receive_IT+0x8e>
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	2201      	movs	r2, #1
 8013b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	68ba      	ldr	r2, [r7, #8]
 8013b2a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	88fa      	ldrh	r2, [r7, #6]
 8013b30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	88fa      	ldrh	r2, [r7, #6]
 8013b36:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2222      	movs	r2, #34	; 0x22
 8013b42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	68fa      	ldr	r2, [r7, #12]
 8013b54:	6812      	ldr	r2, [r2, #0]
 8013b56:	6952      	ldr	r2, [r2, #20]
 8013b58:	f042 0201 	orr.w	r2, r2, #1
 8013b5c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	6812      	ldr	r2, [r2, #0]
 8013b66:	68d2      	ldr	r2, [r2, #12]
 8013b68:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8013b6c:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	e000      	b.n	8013b74 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8013b72:	2302      	movs	r3, #2
  }
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3714      	adds	r7, #20
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr

08013b80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b086      	sub	sp, #24
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013b94:	b2db      	uxtb	r3, r3
 8013b96:	2b20      	cmp	r3, #32
 8013b98:	d153      	bne.n	8013c42 <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d002      	beq.n	8013ba6 <HAL_UART_Transmit_DMA+0x26>
 8013ba0:	88fb      	ldrh	r3, [r7, #6]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d101      	bne.n	8013baa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	e04c      	b.n	8013c44 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013bb0:	2b01      	cmp	r3, #1
 8013bb2:	d101      	bne.n	8013bb8 <HAL_UART_Transmit_DMA+0x38>
 8013bb4:	2302      	movs	r3, #2
 8013bb6:	e045      	b.n	8013c44 <HAL_UART_Transmit_DMA+0xc4>
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2201      	movs	r2, #1
 8013bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8013bc0:	68ba      	ldr	r2, [r7, #8]
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	88fa      	ldrh	r2, [r7, #6]
 8013bca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	88fa      	ldrh	r2, [r7, #6]
 8013bd0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2221      	movs	r2, #33	; 0x21
 8013bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013be4:	4a19      	ldr	r2, [pc, #100]	; (8013c4c <HAL_UART_Transmit_DMA+0xcc>)
 8013be6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bec:	4a18      	ldr	r2, [pc, #96]	; (8013c50 <HAL_UART_Transmit_DMA+0xd0>)
 8013bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bf4:	4a17      	ldr	r2, [pc, #92]	; (8013c54 <HAL_UART_Transmit_DMA+0xd4>)
 8013bf6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 8013c00:	f107 0308 	add.w	r3, r7, #8
 8013c04:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	6819      	ldr	r1, [r3, #0]
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	3304      	adds	r3, #4
 8013c14:	461a      	mov	r2, r3
 8013c16:	88fb      	ldrh	r3, [r7, #6]
 8013c18:	f7fc fe0e 	bl	8010838 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013c24:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	2200      	movs	r2, #0
 8013c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	68fa      	ldr	r2, [r7, #12]
 8013c34:	6812      	ldr	r2, [r2, #0]
 8013c36:	6952      	ldr	r2, [r2, #20]
 8013c38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013c3c:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	e000      	b.n	8013c44 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8013c42:	2302      	movs	r3, #2
  }
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	3718      	adds	r7, #24
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	08013e8d 	.word	0x08013e8d
 8013c50:	08013edf 	.word	0x08013edf
 8013c54:	08013efb 	.word	0x08013efb

08013c58 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b088      	sub	sp, #32
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	695b      	ldr	r3, [r3, #20]
 8013c76:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	f003 030f 	and.w	r3, r3, #15
 8013c86:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d10d      	bne.n	8013caa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	f003 0320 	and.w	r3, r3, #32
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d008      	beq.n	8013caa <HAL_UART_IRQHandler+0x52>
 8013c98:	69bb      	ldr	r3, [r7, #24]
 8013c9a:	f003 0320 	and.w	r3, r3, #32
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d003      	beq.n	8013caa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fa28 	bl	80140f8 <UART_Receive_IT>
      return;
 8013ca8:	e0cc      	b.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f000 80ab 	beq.w	8013e08 <HAL_UART_IRQHandler+0x1b0>
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	f003 0301 	and.w	r3, r3, #1
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d105      	bne.n	8013cc8 <HAL_UART_IRQHandler+0x70>
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	f000 80a0 	beq.w	8013e08 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8013cc8:	69fb      	ldr	r3, [r7, #28]
 8013cca:	f003 0301 	and.w	r3, r3, #1
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d00a      	beq.n	8013ce8 <HAL_UART_IRQHandler+0x90>
 8013cd2:	69bb      	ldr	r3, [r7, #24]
 8013cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d005      	beq.n	8013ce8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ce0:	f043 0201 	orr.w	r2, r3, #1
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	f003 0304 	and.w	r3, r3, #4
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d00a      	beq.n	8013d08 <HAL_UART_IRQHandler+0xb0>
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	f003 0301 	and.w	r3, r3, #1
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d005      	beq.n	8013d08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d00:	f043 0202 	orr.w	r2, r3, #2
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	f003 0302 	and.w	r3, r3, #2
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d00a      	beq.n	8013d28 <HAL_UART_IRQHandler+0xd0>
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	f003 0301 	and.w	r3, r3, #1
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d005      	beq.n	8013d28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d20:	f043 0204 	orr.w	r2, r3, #4
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013d28:	69fb      	ldr	r3, [r7, #28]
 8013d2a:	f003 0308 	and.w	r3, r3, #8
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d00a      	beq.n	8013d48 <HAL_UART_IRQHandler+0xf0>
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	f003 0301 	and.w	r3, r3, #1
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d005      	beq.n	8013d48 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d40:	f043 0208 	orr.w	r2, r3, #8
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d078      	beq.n	8013e42 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	f003 0320 	and.w	r3, r3, #32
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d007      	beq.n	8013d6a <HAL_UART_IRQHandler+0x112>
 8013d5a:	69bb      	ldr	r3, [r7, #24]
 8013d5c:	f003 0320 	and.w	r3, r3, #32
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d002      	beq.n	8013d6a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f000 f9c7 	bl	80140f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	695b      	ldr	r3, [r3, #20]
 8013d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	bf14      	ite	ne
 8013d78:	2301      	movne	r3, #1
 8013d7a:	2300      	moveq	r3, #0
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d84:	f003 0308 	and.w	r3, r3, #8
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d102      	bne.n	8013d92 <HAL_UART_IRQHandler+0x13a>
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d031      	beq.n	8013df6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013d92:	6878      	ldr	r0, [r7, #4]
 8013d94:	f000 f911 	bl	8013fba <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	695b      	ldr	r3, [r3, #20]
 8013d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d023      	beq.n	8013dee <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	6812      	ldr	r2, [r2, #0]
 8013dae:	6952      	ldr	r2, [r2, #20]
 8013db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013db4:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d013      	beq.n	8013de6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dc2:	4a22      	ldr	r2, [pc, #136]	; (8013e4c <HAL_UART_IRQHandler+0x1f4>)
 8013dc4:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fc fd94 	bl	80108f8 <HAL_DMA_Abort_IT>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d016      	beq.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013de0:	4610      	mov	r0, r2
 8013de2:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013de4:	e00e      	b.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f000 f846 	bl	8013e78 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013dec:	e00a      	b.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f000 f842 	bl	8013e78 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013df4:	e006      	b.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f000 f83e 	bl	8013e78 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8013e02:	e01e      	b.n	8013e42 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e04:	bf00      	nop
    return;
 8013e06:	e01c      	b.n	8013e42 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8013e08:	69fb      	ldr	r3, [r7, #28]
 8013e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d008      	beq.n	8013e24 <HAL_UART_IRQHandler+0x1cc>
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d003      	beq.n	8013e24 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f000 f8fe 	bl	801401e <UART_Transmit_IT>
    return;
 8013e22:	e00f      	b.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d00a      	beq.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d005      	beq.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f000 f945 	bl	80140c8 <UART_EndTransmit_IT>
    return;
 8013e3e:	bf00      	nop
 8013e40:	e000      	b.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
    return;
 8013e42:	bf00      	nop
  }
}
 8013e44:	3720      	adds	r7, #32
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	08013ff7 	.word	0x08013ff7

08013e50 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013e50:	b480      	push	{r7}
 8013e52:	b083      	sub	sp, #12
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8013e58:	bf00      	nop
 8013e5a:	370c      	adds	r7, #12
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e62:	4770      	bx	lr

08013e64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013e64:	b480      	push	{r7}
 8013e66:	b083      	sub	sp, #12
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8013e6c:	bf00      	nop
 8013e6e:	370c      	adds	r7, #12
 8013e70:	46bd      	mov	sp, r7
 8013e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e76:	4770      	bx	lr

08013e78 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013e78:	b480      	push	{r7}
 8013e7a:	b083      	sub	sp, #12
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8013e80:	bf00      	nop
 8013e82:	370c      	adds	r7, #12
 8013e84:	46bd      	mov	sp, r7
 8013e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8a:	4770      	bx	lr

08013e8c <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b084      	sub	sp, #16
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e98:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d113      	bne.n	8013ed0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	2200      	movs	r2, #0
 8013eac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	68fa      	ldr	r2, [r7, #12]
 8013eb4:	6812      	ldr	r2, [r2, #0]
 8013eb6:	6952      	ldr	r2, [r2, #20]
 8013eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013ebc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	68fa      	ldr	r2, [r7, #12]
 8013ec4:	6812      	ldr	r2, [r2, #0]
 8013ec6:	68d2      	ldr	r2, [r2, #12]
 8013ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013ecc:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 8013ece:	e002      	b.n	8013ed6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f7ff ffbd 	bl	8013e50 <HAL_UART_TxCpltCallback>
}
 8013ed6:	bf00      	nop
 8013ed8:	3710      	adds	r7, #16
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}

08013ede <UART_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013ede:	b580      	push	{r7, lr}
 8013ee0:	b084      	sub	sp, #16
 8013ee2:	af00      	add	r7, sp, #0
 8013ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013eea:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	f7ff ffb9 	bl	8013e64 <HAL_UART_TxHalfCpltCallback>
}
 8013ef2:	bf00      	nop
 8013ef4:	3710      	adds	r7, #16
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}

08013efa <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013efa:	b580      	push	{r7, lr}
 8013efc:	b084      	sub	sp, #16
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8013f02:	2300      	movs	r3, #0
 8013f04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	695b      	ldr	r3, [r3, #20]
 8013f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	bf14      	ite	ne
 8013f1a:	2301      	movne	r3, #1
 8013f1c:	2300      	moveq	r3, #0
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013f28:	b2db      	uxtb	r3, r3
 8013f2a:	2b21      	cmp	r3, #33	; 0x21
 8013f2c:	d108      	bne.n	8013f40 <UART_DMAError+0x46>
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d005      	beq.n	8013f40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	2200      	movs	r2, #0
 8013f38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8013f3a:	68b8      	ldr	r0, [r7, #8]
 8013f3c:	f000 f827 	bl	8013f8e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	695b      	ldr	r3, [r3, #20]
 8013f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	bf14      	ite	ne
 8013f4e:	2301      	movne	r3, #1
 8013f50:	2300      	moveq	r3, #0
 8013f52:	b2db      	uxtb	r3, r3
 8013f54:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013f5c:	b2db      	uxtb	r3, r3
 8013f5e:	2b22      	cmp	r3, #34	; 0x22
 8013f60:	d108      	bne.n	8013f74 <UART_DMAError+0x7a>
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d005      	beq.n	8013f74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8013f6e:	68b8      	ldr	r0, [r7, #8]
 8013f70:	f000 f823 	bl	8013fba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f78:	f043 0210 	orr.w	r2, r3, #16
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8013f80:	68b8      	ldr	r0, [r7, #8]
 8013f82:	f7ff ff79 	bl	8013e78 <HAL_UART_ErrorCallback>
}
 8013f86:	bf00      	nop
 8013f88:	3710      	adds	r7, #16
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}

08013f8e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013f8e:	b480      	push	{r7}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	6812      	ldr	r2, [r2, #0]
 8013f9e:	68d2      	ldr	r2, [r2, #12]
 8013fa0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8013fa4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	2220      	movs	r2, #32
 8013faa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8013fae:	bf00      	nop
 8013fb0:	370c      	adds	r7, #12
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb8:	4770      	bx	lr

08013fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013fba:	b480      	push	{r7}
 8013fbc:	b083      	sub	sp, #12
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	6812      	ldr	r2, [r2, #0]
 8013fca:	68d2      	ldr	r2, [r2, #12]
 8013fcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013fd0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	687a      	ldr	r2, [r7, #4]
 8013fd8:	6812      	ldr	r2, [r2, #0]
 8013fda:	6952      	ldr	r2, [r2, #20]
 8013fdc:	f022 0201 	bic.w	r2, r2, #1
 8013fe0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2220      	movs	r2, #32
 8013fe6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8013fea:	bf00      	nop
 8013fec:	370c      	adds	r7, #12
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff4:	4770      	bx	lr

08013ff6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013ff6:	b580      	push	{r7, lr}
 8013ff8:	b084      	sub	sp, #16
 8013ffa:	af00      	add	r7, sp, #0
 8013ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014002:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	2200      	movs	r2, #0
 8014008:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2200      	movs	r2, #0
 801400e:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8014010:	68f8      	ldr	r0, [r7, #12]
 8014012:	f7ff ff31 	bl	8013e78 <HAL_UART_ErrorCallback>
}
 8014016:	bf00      	nop
 8014018:	3710      	adds	r7, #16
 801401a:	46bd      	mov	sp, r7
 801401c:	bd80      	pop	{r7, pc}

0801401e <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801401e:	b480      	push	{r7}
 8014020:	b085      	sub	sp, #20
 8014022:	af00      	add	r7, sp, #0
 8014024:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801402c:	b2db      	uxtb	r3, r3
 801402e:	2b21      	cmp	r3, #33	; 0x21
 8014030:	d143      	bne.n	80140ba <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	689b      	ldr	r3, [r3, #8]
 8014036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801403a:	d119      	bne.n	8014070 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6a1b      	ldr	r3, [r3, #32]
 8014040:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	68fa      	ldr	r2, [r7, #12]
 8014048:	8812      	ldrh	r2, [r2, #0]
 801404a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801404e:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	691b      	ldr	r3, [r3, #16]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d105      	bne.n	8014064 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6a1b      	ldr	r3, [r3, #32]
 801405c:	1c9a      	adds	r2, r3, #2
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	621a      	str	r2, [r3, #32]
 8014062:	e00e      	b.n	8014082 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6a1b      	ldr	r3, [r3, #32]
 8014068:	1c5a      	adds	r2, r3, #1
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	621a      	str	r2, [r3, #32]
 801406e:	e008      	b.n	8014082 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681a      	ldr	r2, [r3, #0]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6a1b      	ldr	r3, [r3, #32]
 8014078:	1c58      	adds	r0, r3, #1
 801407a:	6879      	ldr	r1, [r7, #4]
 801407c:	6208      	str	r0, [r1, #32]
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014086:	b29b      	uxth	r3, r3
 8014088:	3b01      	subs	r3, #1
 801408a:	b29b      	uxth	r3, r3
 801408c:	687a      	ldr	r2, [r7, #4]
 801408e:	4619      	mov	r1, r3
 8014090:	84d1      	strh	r1, [r2, #38]	; 0x26
 8014092:	2b00      	cmp	r3, #0
 8014094:	d10f      	bne.n	80140b6 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	687a      	ldr	r2, [r7, #4]
 801409c:	6812      	ldr	r2, [r2, #0]
 801409e:	68d2      	ldr	r2, [r2, #12]
 80140a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80140a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	6812      	ldr	r2, [r2, #0]
 80140ae:	68d2      	ldr	r2, [r2, #12]
 80140b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80140b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80140b6:	2300      	movs	r3, #0
 80140b8:	e000      	b.n	80140bc <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80140ba:	2302      	movs	r3, #2
  }
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3714      	adds	r7, #20
 80140c0:	46bd      	mov	sp, r7
 80140c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c6:	4770      	bx	lr

080140c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	687a      	ldr	r2, [r7, #4]
 80140d6:	6812      	ldr	r2, [r2, #0]
 80140d8:	68d2      	ldr	r2, [r2, #12]
 80140da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80140de:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2220      	movs	r2, #32
 80140e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f7ff feb1 	bl	8013e50 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80140ee:	2300      	movs	r3, #0
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	3708      	adds	r7, #8
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b084      	sub	sp, #16
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014106:	b2db      	uxtb	r3, r3
 8014108:	2b22      	cmp	r3, #34	; 0x22
 801410a:	d169      	bne.n	80141e0 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	689b      	ldr	r3, [r3, #8]
 8014110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014114:	d123      	bne.n	801415e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801411a:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	691b      	ldr	r3, [r3, #16]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d10e      	bne.n	8014142 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	b29b      	uxth	r3, r3
 801412c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014130:	b29a      	uxth	r2, r3
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801413a:	1c9a      	adds	r2, r3, #2
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	629a      	str	r2, [r3, #40]	; 0x28
 8014140:	e029      	b.n	8014196 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	b29b      	uxth	r3, r3
 801414a:	b2db      	uxtb	r3, r3
 801414c:	b29a      	uxth	r2, r3
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014156:	1c5a      	adds	r2, r3, #1
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	629a      	str	r2, [r3, #40]	; 0x28
 801415c:	e01b      	b.n	8014196 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	691b      	ldr	r3, [r3, #16]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d10a      	bne.n	801417c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801416a:	1c59      	adds	r1, r3, #1
 801416c:	687a      	ldr	r2, [r7, #4]
 801416e:	6291      	str	r1, [r2, #40]	; 0x28
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	6812      	ldr	r2, [r2, #0]
 8014174:	6852      	ldr	r2, [r2, #4]
 8014176:	b2d2      	uxtb	r2, r2
 8014178:	701a      	strb	r2, [r3, #0]
 801417a:	e00c      	b.n	8014196 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014180:	1c59      	adds	r1, r3, #1
 8014182:	687a      	ldr	r2, [r7, #4]
 8014184:	6291      	str	r1, [r2, #40]	; 0x28
 8014186:	687a      	ldr	r2, [r7, #4]
 8014188:	6812      	ldr	r2, [r2, #0]
 801418a:	6852      	ldr	r2, [r2, #4]
 801418c:	b2d2      	uxtb	r2, r2
 801418e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014192:	b2d2      	uxtb	r2, r2
 8014194:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801419a:	b29b      	uxth	r3, r3
 801419c:	3b01      	subs	r3, #1
 801419e:	b29b      	uxth	r3, r3
 80141a0:	687a      	ldr	r2, [r7, #4]
 80141a2:	4619      	mov	r1, r3
 80141a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d118      	bne.n	80141dc <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	687a      	ldr	r2, [r7, #4]
 80141b0:	6812      	ldr	r2, [r2, #0]
 80141b2:	68d2      	ldr	r2, [r2, #12]
 80141b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80141b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	6812      	ldr	r2, [r2, #0]
 80141c2:	6952      	ldr	r2, [r2, #20]
 80141c4:	f022 0201 	bic.w	r2, r2, #1
 80141c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2220      	movs	r2, #32
 80141ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f010 fd06 	bl	8024be4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80141d8:	2300      	movs	r3, #0
 80141da:	e002      	b.n	80141e2 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 80141dc:	2300      	movs	r3, #0
 80141de:	e000      	b.n	80141e2 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 80141e0:	2302      	movs	r3, #2
  }
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3710      	adds	r7, #16
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
	...

080141ec <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80141ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ee:	b085      	sub	sp, #20
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80141f4:	2300      	movs	r3, #0
 80141f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	691b      	ldr	r3, [r3, #16]
 80141fe:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8014206:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	68fa      	ldr	r2, [r7, #12]
 801420e:	4313      	orrs	r3, r2
 8014210:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	68fa      	ldr	r2, [r7, #12]
 8014218:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	68db      	ldr	r3, [r3, #12]
 8014220:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8014228:	f023 030c 	bic.w	r3, r3, #12
 801422c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	689a      	ldr	r2, [r3, #8]
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	691b      	ldr	r3, [r3, #16]
 8014236:	431a      	orrs	r2, r3
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	695b      	ldr	r3, [r3, #20]
 801423c:	431a      	orrs	r2, r3
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	69db      	ldr	r3, [r3, #28]
 8014242:	4313      	orrs	r3, r2
 8014244:	68fa      	ldr	r2, [r7, #12]
 8014246:	4313      	orrs	r3, r2
 8014248:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	68fa      	ldr	r2, [r7, #12]
 8014250:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	695b      	ldr	r3, [r3, #20]
 8014258:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014260:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	699b      	ldr	r3, [r3, #24]
 8014266:	68fa      	ldr	r2, [r7, #12]
 8014268:	4313      	orrs	r3, r2
 801426a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	68fa      	ldr	r2, [r7, #12]
 8014272:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	69db      	ldr	r3, [r3, #28]
 8014278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801427c:	f040 80e4 	bne.w	8014448 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	4aab      	ldr	r2, [pc, #684]	; (8014534 <UART_SetConfig+0x348>)
 8014286:	4293      	cmp	r3, r2
 8014288:	d004      	beq.n	8014294 <UART_SetConfig+0xa8>
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	4aaa      	ldr	r2, [pc, #680]	; (8014538 <UART_SetConfig+0x34c>)
 8014290:	4293      	cmp	r3, r2
 8014292:	d16c      	bne.n	801436e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681c      	ldr	r4, [r3, #0]
 8014298:	f7fe ff46 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 801429c:	4602      	mov	r2, r0
 801429e:	4613      	mov	r3, r2
 80142a0:	009b      	lsls	r3, r3, #2
 80142a2:	4413      	add	r3, r2
 80142a4:	009a      	lsls	r2, r3, #2
 80142a6:	441a      	add	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	005b      	lsls	r3, r3, #1
 80142ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80142b2:	4aa2      	ldr	r2, [pc, #648]	; (801453c <UART_SetConfig+0x350>)
 80142b4:	fba2 2303 	umull	r2, r3, r2, r3
 80142b8:	095b      	lsrs	r3, r3, #5
 80142ba:	011d      	lsls	r5, r3, #4
 80142bc:	f7fe ff34 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80142c0:	4602      	mov	r2, r0
 80142c2:	4613      	mov	r3, r2
 80142c4:	009b      	lsls	r3, r3, #2
 80142c6:	4413      	add	r3, r2
 80142c8:	009a      	lsls	r2, r3, #2
 80142ca:	441a      	add	r2, r3
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	685b      	ldr	r3, [r3, #4]
 80142d0:	005b      	lsls	r3, r3, #1
 80142d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80142d6:	f7fe ff27 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80142da:	4602      	mov	r2, r0
 80142dc:	4613      	mov	r3, r2
 80142de:	009b      	lsls	r3, r3, #2
 80142e0:	4413      	add	r3, r2
 80142e2:	009a      	lsls	r2, r3, #2
 80142e4:	441a      	add	r2, r3
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	005b      	lsls	r3, r3, #1
 80142ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80142f0:	4a92      	ldr	r2, [pc, #584]	; (801453c <UART_SetConfig+0x350>)
 80142f2:	fba2 2303 	umull	r2, r3, r2, r3
 80142f6:	095b      	lsrs	r3, r3, #5
 80142f8:	2264      	movs	r2, #100	; 0x64
 80142fa:	fb02 f303 	mul.w	r3, r2, r3
 80142fe:	1af3      	subs	r3, r6, r3
 8014300:	00db      	lsls	r3, r3, #3
 8014302:	3332      	adds	r3, #50	; 0x32
 8014304:	4a8d      	ldr	r2, [pc, #564]	; (801453c <UART_SetConfig+0x350>)
 8014306:	fba2 2303 	umull	r2, r3, r2, r3
 801430a:	095b      	lsrs	r3, r3, #5
 801430c:	005b      	lsls	r3, r3, #1
 801430e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014312:	441d      	add	r5, r3
 8014314:	f7fe ff08 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014318:	4602      	mov	r2, r0
 801431a:	4613      	mov	r3, r2
 801431c:	009b      	lsls	r3, r3, #2
 801431e:	4413      	add	r3, r2
 8014320:	009a      	lsls	r2, r3, #2
 8014322:	441a      	add	r2, r3
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	685b      	ldr	r3, [r3, #4]
 8014328:	005b      	lsls	r3, r3, #1
 801432a:	fbb2 f6f3 	udiv	r6, r2, r3
 801432e:	f7fe fefb 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014332:	4602      	mov	r2, r0
 8014334:	4613      	mov	r3, r2
 8014336:	009b      	lsls	r3, r3, #2
 8014338:	4413      	add	r3, r2
 801433a:	009a      	lsls	r2, r3, #2
 801433c:	441a      	add	r2, r3
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	005b      	lsls	r3, r3, #1
 8014344:	fbb2 f3f3 	udiv	r3, r2, r3
 8014348:	4a7c      	ldr	r2, [pc, #496]	; (801453c <UART_SetConfig+0x350>)
 801434a:	fba2 2303 	umull	r2, r3, r2, r3
 801434e:	095b      	lsrs	r3, r3, #5
 8014350:	2264      	movs	r2, #100	; 0x64
 8014352:	fb02 f303 	mul.w	r3, r2, r3
 8014356:	1af3      	subs	r3, r6, r3
 8014358:	00db      	lsls	r3, r3, #3
 801435a:	3332      	adds	r3, #50	; 0x32
 801435c:	4a77      	ldr	r2, [pc, #476]	; (801453c <UART_SetConfig+0x350>)
 801435e:	fba2 2303 	umull	r2, r3, r2, r3
 8014362:	095b      	lsrs	r3, r3, #5
 8014364:	f003 0307 	and.w	r3, r3, #7
 8014368:	442b      	add	r3, r5
 801436a:	60a3      	str	r3, [r4, #8]
 801436c:	e154      	b.n	8014618 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681c      	ldr	r4, [r3, #0]
 8014372:	f7fe fec5 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014376:	4602      	mov	r2, r0
 8014378:	4613      	mov	r3, r2
 801437a:	009b      	lsls	r3, r3, #2
 801437c:	4413      	add	r3, r2
 801437e:	009a      	lsls	r2, r3, #2
 8014380:	441a      	add	r2, r3
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	685b      	ldr	r3, [r3, #4]
 8014386:	005b      	lsls	r3, r3, #1
 8014388:	fbb2 f3f3 	udiv	r3, r2, r3
 801438c:	4a6b      	ldr	r2, [pc, #428]	; (801453c <UART_SetConfig+0x350>)
 801438e:	fba2 2303 	umull	r2, r3, r2, r3
 8014392:	095b      	lsrs	r3, r3, #5
 8014394:	011d      	lsls	r5, r3, #4
 8014396:	f7fe feb3 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 801439a:	4602      	mov	r2, r0
 801439c:	4613      	mov	r3, r2
 801439e:	009b      	lsls	r3, r3, #2
 80143a0:	4413      	add	r3, r2
 80143a2:	009a      	lsls	r2, r3, #2
 80143a4:	441a      	add	r2, r3
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	685b      	ldr	r3, [r3, #4]
 80143aa:	005b      	lsls	r3, r3, #1
 80143ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80143b0:	f7fe fea6 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80143b4:	4602      	mov	r2, r0
 80143b6:	4613      	mov	r3, r2
 80143b8:	009b      	lsls	r3, r3, #2
 80143ba:	4413      	add	r3, r2
 80143bc:	009a      	lsls	r2, r3, #2
 80143be:	441a      	add	r2, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	005b      	lsls	r3, r3, #1
 80143c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80143ca:	4a5c      	ldr	r2, [pc, #368]	; (801453c <UART_SetConfig+0x350>)
 80143cc:	fba2 2303 	umull	r2, r3, r2, r3
 80143d0:	095b      	lsrs	r3, r3, #5
 80143d2:	2264      	movs	r2, #100	; 0x64
 80143d4:	fb02 f303 	mul.w	r3, r2, r3
 80143d8:	1af3      	subs	r3, r6, r3
 80143da:	00db      	lsls	r3, r3, #3
 80143dc:	3332      	adds	r3, #50	; 0x32
 80143de:	4a57      	ldr	r2, [pc, #348]	; (801453c <UART_SetConfig+0x350>)
 80143e0:	fba2 2303 	umull	r2, r3, r2, r3
 80143e4:	095b      	lsrs	r3, r3, #5
 80143e6:	005b      	lsls	r3, r3, #1
 80143e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80143ec:	441d      	add	r5, r3
 80143ee:	f7fe fe87 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80143f2:	4602      	mov	r2, r0
 80143f4:	4613      	mov	r3, r2
 80143f6:	009b      	lsls	r3, r3, #2
 80143f8:	4413      	add	r3, r2
 80143fa:	009a      	lsls	r2, r3, #2
 80143fc:	441a      	add	r2, r3
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	005b      	lsls	r3, r3, #1
 8014404:	fbb2 f6f3 	udiv	r6, r2, r3
 8014408:	f7fe fe7a 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 801440c:	4602      	mov	r2, r0
 801440e:	4613      	mov	r3, r2
 8014410:	009b      	lsls	r3, r3, #2
 8014412:	4413      	add	r3, r2
 8014414:	009a      	lsls	r2, r3, #2
 8014416:	441a      	add	r2, r3
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	685b      	ldr	r3, [r3, #4]
 801441c:	005b      	lsls	r3, r3, #1
 801441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014422:	4a46      	ldr	r2, [pc, #280]	; (801453c <UART_SetConfig+0x350>)
 8014424:	fba2 2303 	umull	r2, r3, r2, r3
 8014428:	095b      	lsrs	r3, r3, #5
 801442a:	2264      	movs	r2, #100	; 0x64
 801442c:	fb02 f303 	mul.w	r3, r2, r3
 8014430:	1af3      	subs	r3, r6, r3
 8014432:	00db      	lsls	r3, r3, #3
 8014434:	3332      	adds	r3, #50	; 0x32
 8014436:	4a41      	ldr	r2, [pc, #260]	; (801453c <UART_SetConfig+0x350>)
 8014438:	fba2 2303 	umull	r2, r3, r2, r3
 801443c:	095b      	lsrs	r3, r3, #5
 801443e:	f003 0307 	and.w	r3, r3, #7
 8014442:	442b      	add	r3, r5
 8014444:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8014446:	e0e7      	b.n	8014618 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	4a39      	ldr	r2, [pc, #228]	; (8014534 <UART_SetConfig+0x348>)
 801444e:	4293      	cmp	r3, r2
 8014450:	d004      	beq.n	801445c <UART_SetConfig+0x270>
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	4a38      	ldr	r2, [pc, #224]	; (8014538 <UART_SetConfig+0x34c>)
 8014458:	4293      	cmp	r3, r2
 801445a:	d171      	bne.n	8014540 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681c      	ldr	r4, [r3, #0]
 8014460:	f7fe fe62 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014464:	4602      	mov	r2, r0
 8014466:	4613      	mov	r3, r2
 8014468:	009b      	lsls	r3, r3, #2
 801446a:	4413      	add	r3, r2
 801446c:	009a      	lsls	r2, r3, #2
 801446e:	441a      	add	r2, r3
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	685b      	ldr	r3, [r3, #4]
 8014474:	009b      	lsls	r3, r3, #2
 8014476:	fbb2 f3f3 	udiv	r3, r2, r3
 801447a:	4a30      	ldr	r2, [pc, #192]	; (801453c <UART_SetConfig+0x350>)
 801447c:	fba2 2303 	umull	r2, r3, r2, r3
 8014480:	095b      	lsrs	r3, r3, #5
 8014482:	011d      	lsls	r5, r3, #4
 8014484:	f7fe fe50 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014488:	4602      	mov	r2, r0
 801448a:	4613      	mov	r3, r2
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	4413      	add	r3, r2
 8014490:	009a      	lsls	r2, r3, #2
 8014492:	441a      	add	r2, r3
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	fbb2 f6f3 	udiv	r6, r2, r3
 801449e:	f7fe fe43 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80144a2:	4602      	mov	r2, r0
 80144a4:	4613      	mov	r3, r2
 80144a6:	009b      	lsls	r3, r3, #2
 80144a8:	4413      	add	r3, r2
 80144aa:	009a      	lsls	r2, r3, #2
 80144ac:	441a      	add	r2, r3
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	685b      	ldr	r3, [r3, #4]
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80144b8:	4a20      	ldr	r2, [pc, #128]	; (801453c <UART_SetConfig+0x350>)
 80144ba:	fba2 2303 	umull	r2, r3, r2, r3
 80144be:	095b      	lsrs	r3, r3, #5
 80144c0:	2264      	movs	r2, #100	; 0x64
 80144c2:	fb02 f303 	mul.w	r3, r2, r3
 80144c6:	1af3      	subs	r3, r6, r3
 80144c8:	011b      	lsls	r3, r3, #4
 80144ca:	3332      	adds	r3, #50	; 0x32
 80144cc:	4a1b      	ldr	r2, [pc, #108]	; (801453c <UART_SetConfig+0x350>)
 80144ce:	fba2 2303 	umull	r2, r3, r2, r3
 80144d2:	095b      	lsrs	r3, r3, #5
 80144d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144d8:	441d      	add	r5, r3
 80144da:	f7fe fe25 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80144de:	4602      	mov	r2, r0
 80144e0:	4613      	mov	r3, r2
 80144e2:	009b      	lsls	r3, r3, #2
 80144e4:	4413      	add	r3, r2
 80144e6:	009a      	lsls	r2, r3, #2
 80144e8:	441a      	add	r2, r3
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	685b      	ldr	r3, [r3, #4]
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80144f4:	f7fe fe18 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80144f8:	4602      	mov	r2, r0
 80144fa:	4613      	mov	r3, r2
 80144fc:	009b      	lsls	r3, r3, #2
 80144fe:	4413      	add	r3, r2
 8014500:	009a      	lsls	r2, r3, #2
 8014502:	441a      	add	r2, r3
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	685b      	ldr	r3, [r3, #4]
 8014508:	009b      	lsls	r3, r3, #2
 801450a:	fbb2 f3f3 	udiv	r3, r2, r3
 801450e:	4a0b      	ldr	r2, [pc, #44]	; (801453c <UART_SetConfig+0x350>)
 8014510:	fba2 2303 	umull	r2, r3, r2, r3
 8014514:	095b      	lsrs	r3, r3, #5
 8014516:	2264      	movs	r2, #100	; 0x64
 8014518:	fb02 f303 	mul.w	r3, r2, r3
 801451c:	1af3      	subs	r3, r6, r3
 801451e:	011b      	lsls	r3, r3, #4
 8014520:	3332      	adds	r3, #50	; 0x32
 8014522:	4a06      	ldr	r2, [pc, #24]	; (801453c <UART_SetConfig+0x350>)
 8014524:	fba2 2303 	umull	r2, r3, r2, r3
 8014528:	095b      	lsrs	r3, r3, #5
 801452a:	f003 030f 	and.w	r3, r3, #15
 801452e:	442b      	add	r3, r5
 8014530:	60a3      	str	r3, [r4, #8]
 8014532:	e071      	b.n	8014618 <UART_SetConfig+0x42c>
 8014534:	40011000 	.word	0x40011000
 8014538:	40011400 	.word	0x40011400
 801453c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681c      	ldr	r4, [r3, #0]
 8014544:	f7fe fddc 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014548:	4602      	mov	r2, r0
 801454a:	4613      	mov	r3, r2
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	4413      	add	r3, r2
 8014550:	009a      	lsls	r2, r3, #2
 8014552:	441a      	add	r2, r3
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	fbb2 f3f3 	udiv	r3, r2, r3
 801455e:	4a30      	ldr	r2, [pc, #192]	; (8014620 <UART_SetConfig+0x434>)
 8014560:	fba2 2303 	umull	r2, r3, r2, r3
 8014564:	095b      	lsrs	r3, r3, #5
 8014566:	011d      	lsls	r5, r3, #4
 8014568:	f7fe fdca 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 801456c:	4602      	mov	r2, r0
 801456e:	4613      	mov	r3, r2
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	4413      	add	r3, r2
 8014574:	009a      	lsls	r2, r3, #2
 8014576:	441a      	add	r2, r3
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	685b      	ldr	r3, [r3, #4]
 801457c:	009b      	lsls	r3, r3, #2
 801457e:	fbb2 f6f3 	udiv	r6, r2, r3
 8014582:	f7fe fdbd 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014586:	4602      	mov	r2, r0
 8014588:	4613      	mov	r3, r2
 801458a:	009b      	lsls	r3, r3, #2
 801458c:	4413      	add	r3, r2
 801458e:	009a      	lsls	r2, r3, #2
 8014590:	441a      	add	r2, r3
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	685b      	ldr	r3, [r3, #4]
 8014596:	009b      	lsls	r3, r3, #2
 8014598:	fbb2 f3f3 	udiv	r3, r2, r3
 801459c:	4a20      	ldr	r2, [pc, #128]	; (8014620 <UART_SetConfig+0x434>)
 801459e:	fba2 2303 	umull	r2, r3, r2, r3
 80145a2:	095b      	lsrs	r3, r3, #5
 80145a4:	2264      	movs	r2, #100	; 0x64
 80145a6:	fb02 f303 	mul.w	r3, r2, r3
 80145aa:	1af3      	subs	r3, r6, r3
 80145ac:	011b      	lsls	r3, r3, #4
 80145ae:	3332      	adds	r3, #50	; 0x32
 80145b0:	4a1b      	ldr	r2, [pc, #108]	; (8014620 <UART_SetConfig+0x434>)
 80145b2:	fba2 2303 	umull	r2, r3, r2, r3
 80145b6:	095b      	lsrs	r3, r3, #5
 80145b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80145bc:	441d      	add	r5, r3
 80145be:	f7fe fd9f 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80145c2:	4602      	mov	r2, r0
 80145c4:	4613      	mov	r3, r2
 80145c6:	009b      	lsls	r3, r3, #2
 80145c8:	4413      	add	r3, r2
 80145ca:	009a      	lsls	r2, r3, #2
 80145cc:	441a      	add	r2, r3
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	009b      	lsls	r3, r3, #2
 80145d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80145d8:	f7fe fd92 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80145dc:	4602      	mov	r2, r0
 80145de:	4613      	mov	r3, r2
 80145e0:	009b      	lsls	r3, r3, #2
 80145e2:	4413      	add	r3, r2
 80145e4:	009a      	lsls	r2, r3, #2
 80145e6:	441a      	add	r2, r3
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	685b      	ldr	r3, [r3, #4]
 80145ec:	009b      	lsls	r3, r3, #2
 80145ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80145f2:	4a0b      	ldr	r2, [pc, #44]	; (8014620 <UART_SetConfig+0x434>)
 80145f4:	fba2 2303 	umull	r2, r3, r2, r3
 80145f8:	095b      	lsrs	r3, r3, #5
 80145fa:	2264      	movs	r2, #100	; 0x64
 80145fc:	fb02 f303 	mul.w	r3, r2, r3
 8014600:	1af3      	subs	r3, r6, r3
 8014602:	011b      	lsls	r3, r3, #4
 8014604:	3332      	adds	r3, #50	; 0x32
 8014606:	4a06      	ldr	r2, [pc, #24]	; (8014620 <UART_SetConfig+0x434>)
 8014608:	fba2 2303 	umull	r2, r3, r2, r3
 801460c:	095b      	lsrs	r3, r3, #5
 801460e:	f003 030f 	and.w	r3, r3, #15
 8014612:	442b      	add	r3, r5
 8014614:	60a3      	str	r3, [r4, #8]
}
 8014616:	e7ff      	b.n	8014618 <UART_SetConfig+0x42c>
 8014618:	bf00      	nop
 801461a:	3714      	adds	r7, #20
 801461c:	46bd      	mov	sp, r7
 801461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014620:	51eb851f 	.word	0x51eb851f

08014624 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014624:	b480      	push	{r7}
 8014626:	b085      	sub	sp, #20
 8014628:	af00      	add	r7, sp, #0
 801462a:	4603      	mov	r3, r0
 801462c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801462e:	2300      	movs	r3, #0
 8014630:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014636:	2b84      	cmp	r3, #132	; 0x84
 8014638:	d005      	beq.n	8014646 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801463a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	4413      	add	r3, r2
 8014642:	3303      	adds	r3, #3
 8014644:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014646:	68fb      	ldr	r3, [r7, #12]
}
 8014648:	4618      	mov	r0, r3
 801464a:	3714      	adds	r7, #20
 801464c:	46bd      	mov	sp, r7
 801464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014652:	4770      	bx	lr

08014654 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014654:	b480      	push	{r7}
 8014656:	b083      	sub	sp, #12
 8014658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801465a:	f3ef 8305 	mrs	r3, IPSR
 801465e:	607b      	str	r3, [r7, #4]
  return(result);
 8014660:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014662:	2b00      	cmp	r3, #0
 8014664:	bf14      	ite	ne
 8014666:	2301      	movne	r3, #1
 8014668:	2300      	moveq	r3, #0
 801466a:	b2db      	uxtb	r3, r3
}
 801466c:	4618      	mov	r0, r3
 801466e:	370c      	adds	r7, #12
 8014670:	46bd      	mov	sp, r7
 8014672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014676:	4770      	bx	lr

08014678 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801467c:	f001 febe 	bl	80163fc <vTaskStartScheduler>
  
  return osOK;
 8014680:	2300      	movs	r3, #0
}
 8014682:	4618      	mov	r0, r3
 8014684:	bd80      	pop	{r7, pc}

08014686 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014686:	b580      	push	{r7, lr}
 8014688:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801468a:	f7ff ffe3 	bl	8014654 <inHandlerMode>
 801468e:	4603      	mov	r3, r0
 8014690:	2b00      	cmp	r3, #0
 8014692:	d003      	beq.n	801469c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014694:	f001 ffb4 	bl	8016600 <xTaskGetTickCountFromISR>
 8014698:	4603      	mov	r3, r0
 801469a:	e002      	b.n	80146a2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801469c:	f001 ffa0 	bl	80165e0 <xTaskGetTickCount>
 80146a0:	4603      	mov	r3, r0
  }
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	bd80      	pop	{r7, pc}

080146a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80146a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146a8:	b087      	sub	sp, #28
 80146aa:	af02      	add	r7, sp, #8
 80146ac:	6078      	str	r0, [r7, #4]
 80146ae:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	685c      	ldr	r4, [r3, #4]
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80146bc:	b29e      	uxth	r6, r3
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7ff ffad 	bl	8014624 <makeFreeRtosPriority>
 80146ca:	4602      	mov	r2, r0
 80146cc:	f107 030c 	add.w	r3, r7, #12
 80146d0:	9301      	str	r3, [sp, #4]
 80146d2:	9200      	str	r2, [sp, #0]
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	4632      	mov	r2, r6
 80146d8:	4629      	mov	r1, r5
 80146da:	4620      	mov	r0, r4
 80146dc:	f001 fd22 	bl	8016124 <xTaskCreate>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b01      	cmp	r3, #1
 80146e4:	d001      	beq.n	80146ea <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80146e6:	2300      	movs	r3, #0
 80146e8:	e000      	b.n	80146ec <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80146ea:	68fb      	ldr	r3, [r7, #12]
}
 80146ec:	4618      	mov	r0, r3
 80146ee:	3714      	adds	r7, #20
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080146f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b084      	sub	sp, #16
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d001      	beq.n	801470a <osDelay+0x16>
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	e000      	b.n	801470c <osDelay+0x18>
 801470a:	2301      	movs	r3, #1
 801470c:	4618      	mov	r0, r3
 801470e:	f001 fe41 	bl	8016394 <vTaskDelay>
  
  return osOK;
 8014712:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014714:	4618      	mov	r0, r3
 8014716:	3710      	adds	r7, #16
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}

0801471c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b082      	sub	sp, #8
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8014724:	2001      	movs	r0, #1
 8014726:	f000 ffaf 	bl	8015688 <xQueueCreateMutex>
 801472a:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 801472c:	4618      	mov	r0, r3
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b084      	sub	sp, #16
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801473e:	2300      	movs	r3, #0
 8014740:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d101      	bne.n	801474c <osMutexWait+0x18>
    return osErrorParameter;
 8014748:	2380      	movs	r3, #128	; 0x80
 801474a:	e03c      	b.n	80147c6 <osMutexWait+0x92>
  }
  
  ticks = 0;
 801474c:	2300      	movs	r3, #0
 801474e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014756:	d103      	bne.n	8014760 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8014758:	f04f 33ff 	mov.w	r3, #4294967295
 801475c:	60fb      	str	r3, [r7, #12]
 801475e:	e009      	b.n	8014774 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d006      	beq.n	8014774 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d101      	bne.n	8014774 <osMutexWait+0x40>
      ticks = 1;
 8014770:	2301      	movs	r3, #1
 8014772:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014774:	f7ff ff6e 	bl	8014654 <inHandlerMode>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d017      	beq.n	80147ae <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801477e:	f107 0308 	add.w	r3, r7, #8
 8014782:	461a      	mov	r2, r3
 8014784:	2100      	movs	r1, #0
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f001 fac0 	bl	8015d0c <xQueueReceiveFromISR>
 801478c:	4603      	mov	r3, r0
 801478e:	2b01      	cmp	r3, #1
 8014790:	d001      	beq.n	8014796 <osMutexWait+0x62>
      return osErrorOS;
 8014792:	23ff      	movs	r3, #255	; 0xff
 8014794:	e017      	b.n	80147c6 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d013      	beq.n	80147c4 <osMutexWait+0x90>
 801479c:	4b0c      	ldr	r3, [pc, #48]	; (80147d0 <osMutexWait+0x9c>)
 801479e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147a2:	601a      	str	r2, [r3, #0]
 80147a4:	f3bf 8f4f 	dsb	sy
 80147a8:	f3bf 8f6f 	isb	sy
 80147ac:	e00a      	b.n	80147c4 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80147ae:	2300      	movs	r3, #0
 80147b0:	68fa      	ldr	r2, [r7, #12]
 80147b2:	2100      	movs	r1, #0
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f001 f997 	bl	8015ae8 <xQueueGenericReceive>
 80147ba:	4603      	mov	r3, r0
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d001      	beq.n	80147c4 <osMutexWait+0x90>
    return osErrorOS;
 80147c0:	23ff      	movs	r3, #255	; 0xff
 80147c2:	e000      	b.n	80147c6 <osMutexWait+0x92>
  }
  
  return osOK;
 80147c4:	2300      	movs	r3, #0
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3710      	adds	r7, #16
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	e000ed04 	.word	0xe000ed04

080147d4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b084      	sub	sp, #16
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80147dc:	2300      	movs	r3, #0
 80147de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80147e0:	2300      	movs	r3, #0
 80147e2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80147e4:	f7ff ff36 	bl	8014654 <inHandlerMode>
 80147e8:	4603      	mov	r3, r0
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d016      	beq.n	801481c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80147ee:	f107 0308 	add.w	r3, r7, #8
 80147f2:	4619      	mov	r1, r3
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f001 f8ed 	bl	80159d4 <xQueueGiveFromISR>
 80147fa:	4603      	mov	r3, r0
 80147fc:	2b01      	cmp	r3, #1
 80147fe:	d001      	beq.n	8014804 <osMutexRelease+0x30>
      return osErrorOS;
 8014800:	23ff      	movs	r3, #255	; 0xff
 8014802:	e017      	b.n	8014834 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d013      	beq.n	8014832 <osMutexRelease+0x5e>
 801480a:	4b0c      	ldr	r3, [pc, #48]	; (801483c <osMutexRelease+0x68>)
 801480c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014810:	601a      	str	r2, [r3, #0]
 8014812:	f3bf 8f4f 	dsb	sy
 8014816:	f3bf 8f6f 	isb	sy
 801481a:	e00a      	b.n	8014832 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 801481c:	2300      	movs	r3, #0
 801481e:	2200      	movs	r2, #0
 8014820:	2100      	movs	r1, #0
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f000 ff48 	bl	80156b8 <xQueueGenericSend>
 8014828:	4603      	mov	r3, r0
 801482a:	2b01      	cmp	r3, #1
 801482c:	d001      	beq.n	8014832 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801482e:	23ff      	movs	r3, #255	; 0xff
 8014830:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8014832:	68fb      	ldr	r3, [r7, #12]
}
 8014834:	4618      	mov	r0, r3
 8014836:	3710      	adds	r7, #16
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}
 801483c:	e000ed04 	.word	0xe000ed04

08014840 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014840:	b580      	push	{r7, lr}
 8014842:	b084      	sub	sp, #16
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	2b01      	cmp	r3, #1
 801484e:	d110      	bne.n	8014872 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8014850:	2203      	movs	r2, #3
 8014852:	2100      	movs	r1, #0
 8014854:	2001      	movs	r0, #1
 8014856:	f000 fea1 	bl	801559c <xQueueGenericCreate>
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d005      	beq.n	801486e <osSemaphoreCreate+0x2e>
 8014862:	2300      	movs	r3, #0
 8014864:	2200      	movs	r2, #0
 8014866:	2100      	movs	r1, #0
 8014868:	68f8      	ldr	r0, [r7, #12]
 801486a:	f000 ff25 	bl	80156b8 <xQueueGenericSend>
    return sema;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	e000      	b.n	8014874 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8014872:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8014874:	4618      	mov	r0, r3
 8014876:	3710      	adds	r7, #16
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014886:	2300      	movs	r3, #0
 8014888:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d101      	bne.n	8014894 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8014890:	2380      	movs	r3, #128	; 0x80
 8014892:	e03c      	b.n	801490e <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 8014894:	2300      	movs	r3, #0
 8014896:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801489e:	d103      	bne.n	80148a8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80148a0:	f04f 33ff 	mov.w	r3, #4294967295
 80148a4:	60fb      	str	r3, [r7, #12]
 80148a6:	e009      	b.n	80148bc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d006      	beq.n	80148bc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d101      	bne.n	80148bc <osSemaphoreWait+0x40>
      ticks = 1;
 80148b8:	2301      	movs	r3, #1
 80148ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80148bc:	f7ff feca 	bl	8014654 <inHandlerMode>
 80148c0:	4603      	mov	r3, r0
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d017      	beq.n	80148f6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80148c6:	f107 0308 	add.w	r3, r7, #8
 80148ca:	461a      	mov	r2, r3
 80148cc:	2100      	movs	r1, #0
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f001 fa1c 	bl	8015d0c <xQueueReceiveFromISR>
 80148d4:	4603      	mov	r3, r0
 80148d6:	2b01      	cmp	r3, #1
 80148d8:	d001      	beq.n	80148de <osSemaphoreWait+0x62>
      return osErrorOS;
 80148da:	23ff      	movs	r3, #255	; 0xff
 80148dc:	e017      	b.n	801490e <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d013      	beq.n	801490c <osSemaphoreWait+0x90>
 80148e4:	4b0c      	ldr	r3, [pc, #48]	; (8014918 <osSemaphoreWait+0x9c>)
 80148e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148ea:	601a      	str	r2, [r3, #0]
 80148ec:	f3bf 8f4f 	dsb	sy
 80148f0:	f3bf 8f6f 	isb	sy
 80148f4:	e00a      	b.n	801490c <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80148f6:	2300      	movs	r3, #0
 80148f8:	68fa      	ldr	r2, [r7, #12]
 80148fa:	2100      	movs	r1, #0
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f001 f8f3 	bl	8015ae8 <xQueueGenericReceive>
 8014902:	4603      	mov	r3, r0
 8014904:	2b01      	cmp	r3, #1
 8014906:	d001      	beq.n	801490c <osSemaphoreWait+0x90>
    return osErrorOS;
 8014908:	23ff      	movs	r3, #255	; 0xff
 801490a:	e000      	b.n	801490e <osSemaphoreWait+0x92>
  }
  
  return osOK;
 801490c:	2300      	movs	r3, #0
}
 801490e:	4618      	mov	r0, r3
 8014910:	3710      	adds	r7, #16
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
 8014916:	bf00      	nop
 8014918:	e000ed04 	.word	0xe000ed04

0801491c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014924:	2300      	movs	r3, #0
 8014926:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014928:	2300      	movs	r3, #0
 801492a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801492c:	f7ff fe92 	bl	8014654 <inHandlerMode>
 8014930:	4603      	mov	r3, r0
 8014932:	2b00      	cmp	r3, #0
 8014934:	d016      	beq.n	8014964 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014936:	f107 0308 	add.w	r3, r7, #8
 801493a:	4619      	mov	r1, r3
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f001 f849 	bl	80159d4 <xQueueGiveFromISR>
 8014942:	4603      	mov	r3, r0
 8014944:	2b01      	cmp	r3, #1
 8014946:	d001      	beq.n	801494c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014948:	23ff      	movs	r3, #255	; 0xff
 801494a:	e017      	b.n	801497c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d013      	beq.n	801497a <osSemaphoreRelease+0x5e>
 8014952:	4b0c      	ldr	r3, [pc, #48]	; (8014984 <osSemaphoreRelease+0x68>)
 8014954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014958:	601a      	str	r2, [r3, #0]
 801495a:	f3bf 8f4f 	dsb	sy
 801495e:	f3bf 8f6f 	isb	sy
 8014962:	e00a      	b.n	801497a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014964:	2300      	movs	r3, #0
 8014966:	2200      	movs	r2, #0
 8014968:	2100      	movs	r1, #0
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f000 fea4 	bl	80156b8 <xQueueGenericSend>
 8014970:	4603      	mov	r3, r0
 8014972:	2b01      	cmp	r3, #1
 8014974:	d001      	beq.n	801497a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014976:	23ff      	movs	r3, #255	; 0xff
 8014978:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801497a:	68fb      	ldr	r3, [r7, #12]
}
 801497c:	4618      	mov	r0, r3
 801497e:	3710      	adds	r7, #16
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	e000ed04 	.word	0xe000ed04

08014988 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014990:	f7ff fe60 	bl	8014654 <inHandlerMode>
 8014994:	4603      	mov	r3, r0
 8014996:	2b00      	cmp	r3, #0
 8014998:	d001      	beq.n	801499e <osSemaphoreDelete+0x16>
    return osErrorISR;
 801499a:	2382      	movs	r3, #130	; 0x82
 801499c:	e003      	b.n	80149a6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f001 fa69 	bl	8015e76 <vQueueDelete>

  return osOK; 
 80149a4:	2300      	movs	r3, #0
}
 80149a6:	4618      	mov	r0, r3
 80149a8:	3708      	adds	r7, #8
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}

080149ae <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80149ae:	b580      	push	{r7, lr}
 80149b0:	b082      	sub	sp, #8
 80149b2:	af00      	add	r7, sp, #0
 80149b4:	6078      	str	r0, [r7, #4]
 80149b6:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	6818      	ldr	r0, [r3, #0]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	2200      	movs	r2, #0
 80149c2:	4619      	mov	r1, r3
 80149c4:	f000 fdea 	bl	801559c <xQueueGenericCreate>
 80149c8:	4603      	mov	r3, r0
#endif
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	3708      	adds	r7, #8
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}
	...

080149d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b086      	sub	sp, #24
 80149d8:	af00      	add	r7, sp, #0
 80149da:	60f8      	str	r0, [r7, #12]
 80149dc:	60b9      	str	r1, [r7, #8]
 80149de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80149e0:	2300      	movs	r3, #0
 80149e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d101      	bne.n	80149f2 <osMessagePut+0x1e>
    ticks = 1;
 80149ee:	2301      	movs	r3, #1
 80149f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80149f2:	f7ff fe2f 	bl	8014654 <inHandlerMode>
 80149f6:	4603      	mov	r3, r0
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d018      	beq.n	8014a2e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80149fc:	f107 0210 	add.w	r2, r7, #16
 8014a00:	f107 0108 	add.w	r1, r7, #8
 8014a04:	2300      	movs	r3, #0
 8014a06:	68f8      	ldr	r0, [r7, #12]
 8014a08:	f000 ff50 	bl	80158ac <xQueueGenericSendFromISR>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	d001      	beq.n	8014a16 <osMessagePut+0x42>
      return osErrorOS;
 8014a12:	23ff      	movs	r3, #255	; 0xff
 8014a14:	e018      	b.n	8014a48 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d014      	beq.n	8014a46 <osMessagePut+0x72>
 8014a1c:	4b0c      	ldr	r3, [pc, #48]	; (8014a50 <osMessagePut+0x7c>)
 8014a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a22:	601a      	str	r2, [r3, #0]
 8014a24:	f3bf 8f4f 	dsb	sy
 8014a28:	f3bf 8f6f 	isb	sy
 8014a2c:	e00b      	b.n	8014a46 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014a2e:	f107 0108 	add.w	r1, r7, #8
 8014a32:	2300      	movs	r3, #0
 8014a34:	697a      	ldr	r2, [r7, #20]
 8014a36:	68f8      	ldr	r0, [r7, #12]
 8014a38:	f000 fe3e 	bl	80156b8 <xQueueGenericSend>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	2b01      	cmp	r3, #1
 8014a40:	d001      	beq.n	8014a46 <osMessagePut+0x72>
      return osErrorOS;
 8014a42:	23ff      	movs	r3, #255	; 0xff
 8014a44:	e000      	b.n	8014a48 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014a46:	2300      	movs	r3, #0
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3718      	adds	r7, #24
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}
 8014a50:	e000ed04 	.word	0xe000ed04

08014a54 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014a54:	b590      	push	{r4, r7, lr}
 8014a56:	b08b      	sub	sp, #44	; 0x2c
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	60f8      	str	r0, [r7, #12]
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014a64:	2300      	movs	r3, #0
 8014a66:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d10a      	bne.n	8014a84 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014a6e:	2380      	movs	r3, #128	; 0x80
 8014a70:	617b      	str	r3, [r7, #20]
    return event;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	461c      	mov	r4, r3
 8014a76:	f107 0314 	add.w	r3, r7, #20
 8014a7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a82:	e054      	b.n	8014b2e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014a84:	2300      	movs	r3, #0
 8014a86:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a92:	d103      	bne.n	8014a9c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014a94:	f04f 33ff 	mov.w	r3, #4294967295
 8014a98:	627b      	str	r3, [r7, #36]	; 0x24
 8014a9a:	e009      	b.n	8014ab0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d006      	beq.n	8014ab0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8014aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d101      	bne.n	8014ab0 <osMessageGet+0x5c>
      ticks = 1;
 8014aac:	2301      	movs	r3, #1
 8014aae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014ab0:	f7ff fdd0 	bl	8014654 <inHandlerMode>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d01c      	beq.n	8014af4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014aba:	f107 0220 	add.w	r2, r7, #32
 8014abe:	f107 0314 	add.w	r3, r7, #20
 8014ac2:	3304      	adds	r3, #4
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	68b8      	ldr	r0, [r7, #8]
 8014ac8:	f001 f920 	bl	8015d0c <xQueueReceiveFromISR>
 8014acc:	4603      	mov	r3, r0
 8014ace:	2b01      	cmp	r3, #1
 8014ad0:	d102      	bne.n	8014ad8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014ad2:	2310      	movs	r3, #16
 8014ad4:	617b      	str	r3, [r7, #20]
 8014ad6:	e001      	b.n	8014adc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014adc:	6a3b      	ldr	r3, [r7, #32]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d01d      	beq.n	8014b1e <osMessageGet+0xca>
 8014ae2:	4b15      	ldr	r3, [pc, #84]	; (8014b38 <osMessageGet+0xe4>)
 8014ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ae8:	601a      	str	r2, [r3, #0]
 8014aea:	f3bf 8f4f 	dsb	sy
 8014aee:	f3bf 8f6f 	isb	sy
 8014af2:	e014      	b.n	8014b1e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014af4:	f107 0314 	add.w	r3, r7, #20
 8014af8:	1d19      	adds	r1, r3, #4
 8014afa:	2300      	movs	r3, #0
 8014afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014afe:	68b8      	ldr	r0, [r7, #8]
 8014b00:	f000 fff2 	bl	8015ae8 <xQueueGenericReceive>
 8014b04:	4603      	mov	r3, r0
 8014b06:	2b01      	cmp	r3, #1
 8014b08:	d102      	bne.n	8014b10 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014b0a:	2310      	movs	r3, #16
 8014b0c:	617b      	str	r3, [r7, #20]
 8014b0e:	e006      	b.n	8014b1e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d101      	bne.n	8014b1a <osMessageGet+0xc6>
 8014b16:	2300      	movs	r3, #0
 8014b18:	e000      	b.n	8014b1c <osMessageGet+0xc8>
 8014b1a:	2340      	movs	r3, #64	; 0x40
 8014b1c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	461c      	mov	r4, r3
 8014b22:	f107 0314 	add.w	r3, r7, #20
 8014b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014b2e:	68f8      	ldr	r0, [r7, #12]
 8014b30:	372c      	adds	r7, #44	; 0x2c
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd90      	pop	{r4, r7, pc}
 8014b36:	bf00      	nop
 8014b38:	e000ed04 	.word	0xe000ed04

08014b3c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b082      	sub	sp, #8
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014b44:	f7ff fd86 	bl	8014654 <inHandlerMode>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d004      	beq.n	8014b58 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f001 f976 	bl	8015e40 <uxQueueMessagesWaitingFromISR>
 8014b54:	4603      	mov	r3, r0
 8014b56:	e003      	b.n	8014b60 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f001 f954 	bl	8015e06 <uxQueueMessagesWaiting>
 8014b5e:	4603      	mov	r3, r0
  }
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3708      	adds	r7, #8
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}

08014b68 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014b70:	f7ff fd70 	bl	8014654 <inHandlerMode>
 8014b74:	4603      	mov	r3, r0
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d001      	beq.n	8014b7e <osMessageDelete+0x16>
    return osErrorISR;
 8014b7a:	2382      	movs	r3, #130	; 0x82
 8014b7c:	e003      	b.n	8014b86 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f001 f979 	bl	8015e76 <vQueueDelete>

  return osOK; 
 8014b84:	2300      	movs	r3, #0
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3708      	adds	r7, #8
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}

08014b8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014b8e:	b480      	push	{r7}
 8014b90:	b083      	sub	sp, #12
 8014b92:	af00      	add	r7, sp, #0
 8014b94:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f103 0208 	add.w	r2, r3, #8
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8014ba6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	f103 0208 	add.w	r2, r3, #8
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f103 0208 	add.w	r2, r3, #8
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014bc2:	bf00      	nop
 8014bc4:	370c      	adds	r7, #12
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bcc:	4770      	bx	lr

08014bce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014bce:	b480      	push	{r7}
 8014bd0:	b083      	sub	sp, #12
 8014bd2:	af00      	add	r7, sp, #0
 8014bd4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014bdc:	bf00      	nop
 8014bde:	370c      	adds	r7, #12
 8014be0:	46bd      	mov	sp, r7
 8014be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be6:	4770      	bx	lr

08014be8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014be8:	b480      	push	{r7}
 8014bea:	b085      	sub	sp, #20
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	685b      	ldr	r3, [r3, #4]
 8014bf6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014bf8:	683b      	ldr	r3, [r7, #0]
 8014bfa:	68fa      	ldr	r2, [r7, #12]
 8014bfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	689a      	ldr	r2, [r3, #8]
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	689b      	ldr	r3, [r3, #8]
 8014c0a:	683a      	ldr	r2, [r7, #0]
 8014c0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	683a      	ldr	r2, [r7, #0]
 8014c12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	687a      	ldr	r2, [r7, #4]
 8014c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	1c5a      	adds	r2, r3, #1
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	601a      	str	r2, [r3, #0]
}
 8014c24:	bf00      	nop
 8014c26:	3714      	adds	r7, #20
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2e:	4770      	bx	lr

08014c30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014c30:	b480      	push	{r7}
 8014c32:	b085      	sub	sp, #20
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014c40:	68bb      	ldr	r3, [r7, #8]
 8014c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c46:	d103      	bne.n	8014c50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	691b      	ldr	r3, [r3, #16]
 8014c4c:	60fb      	str	r3, [r7, #12]
 8014c4e:	e00c      	b.n	8014c6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	3308      	adds	r3, #8
 8014c54:	60fb      	str	r3, [r7, #12]
 8014c56:	e002      	b.n	8014c5e <vListInsert+0x2e>
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	685b      	ldr	r3, [r3, #4]
 8014c5c:	60fb      	str	r3, [r7, #12]
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	68bb      	ldr	r3, [r7, #8]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d9f6      	bls.n	8014c58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	685a      	ldr	r2, [r3, #4]
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	685b      	ldr	r3, [r3, #4]
 8014c76:	683a      	ldr	r2, [r7, #0]
 8014c78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	68fa      	ldr	r2, [r7, #12]
 8014c7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	683a      	ldr	r2, [r7, #0]
 8014c84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014c86:	683b      	ldr	r3, [r7, #0]
 8014c88:	687a      	ldr	r2, [r7, #4]
 8014c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	1c5a      	adds	r2, r3, #1
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	601a      	str	r2, [r3, #0]
}
 8014c96:	bf00      	nop
 8014c98:	3714      	adds	r7, #20
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca0:	4770      	bx	lr

08014ca2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014ca2:	b480      	push	{r7}
 8014ca4:	b085      	sub	sp, #20
 8014ca6:	af00      	add	r7, sp, #0
 8014ca8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	691b      	ldr	r3, [r3, #16]
 8014cae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	685b      	ldr	r3, [r3, #4]
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	6892      	ldr	r2, [r2, #8]
 8014cb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	689b      	ldr	r3, [r3, #8]
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	6852      	ldr	r2, [r2, #4]
 8014cc2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	685a      	ldr	r2, [r3, #4]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d103      	bne.n	8014cd6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	689a      	ldr	r2, [r3, #8]
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	1e5a      	subs	r2, r3, #1
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	681b      	ldr	r3, [r3, #0]
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	3714      	adds	r7, #20
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf4:	4770      	bx	lr
	...

08014cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014cf8:	b480      	push	{r7}
 8014cfa:	b085      	sub	sp, #20
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	60f8      	str	r0, [r7, #12]
 8014d00:	60b9      	str	r1, [r7, #8]
 8014d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	3b04      	subs	r3, #4
 8014d08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	3b04      	subs	r3, #4
 8014d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	f023 0201 	bic.w	r2, r3, #1
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	3b04      	subs	r3, #4
 8014d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014d28:	4a0c      	ldr	r2, [pc, #48]	; (8014d5c <pxPortInitialiseStack+0x64>)
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	3b14      	subs	r3, #20
 8014d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	3b04      	subs	r3, #4
 8014d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	f06f 0202 	mvn.w	r2, #2
 8014d46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	3b20      	subs	r3, #32
 8014d4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
}
 8014d50:	4618      	mov	r0, r3
 8014d52:	3714      	adds	r7, #20
 8014d54:	46bd      	mov	sp, r7
 8014d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5a:	4770      	bx	lr
 8014d5c:	08014d61 	.word	0x08014d61

08014d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014d60:	b480      	push	{r7}
 8014d62:	b083      	sub	sp, #12
 8014d64:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014d66:	4b0c      	ldr	r3, [pc, #48]	; (8014d98 <prvTaskExitError+0x38>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d6e:	d009      	beq.n	8014d84 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d74:	f383 8811 	msr	BASEPRI, r3
 8014d78:	f3bf 8f6f 	isb	sy
 8014d7c:	f3bf 8f4f 	dsb	sy
 8014d80:	607b      	str	r3, [r7, #4]
 8014d82:	e7fe      	b.n	8014d82 <prvTaskExitError+0x22>
 8014d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d88:	f383 8811 	msr	BASEPRI, r3
 8014d8c:	f3bf 8f6f 	isb	sy
 8014d90:	f3bf 8f4f 	dsb	sy
 8014d94:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8014d96:	e7fe      	b.n	8014d96 <prvTaskExitError+0x36>
 8014d98:	20000004 	.word	0x20000004
 8014d9c:	00000000 	.word	0x00000000

08014da0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014da0:	4b07      	ldr	r3, [pc, #28]	; (8014dc0 <pxCurrentTCBConst2>)
 8014da2:	6819      	ldr	r1, [r3, #0]
 8014da4:	6808      	ldr	r0, [r1, #0]
 8014da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014daa:	f380 8809 	msr	PSP, r0
 8014dae:	f3bf 8f6f 	isb	sy
 8014db2:	f04f 0000 	mov.w	r0, #0
 8014db6:	f380 8811 	msr	BASEPRI, r0
 8014dba:	4770      	bx	lr
 8014dbc:	f3af 8000 	nop.w

08014dc0 <pxCurrentTCBConst2>:
 8014dc0:	20003e58 	.word	0x20003e58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014dc4:	bf00      	nop
 8014dc6:	bf00      	nop

08014dc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8014dc8:	4806      	ldr	r0, [pc, #24]	; (8014de4 <prvPortStartFirstTask+0x1c>)
 8014dca:	6800      	ldr	r0, [r0, #0]
 8014dcc:	6800      	ldr	r0, [r0, #0]
 8014dce:	f380 8808 	msr	MSP, r0
 8014dd2:	b662      	cpsie	i
 8014dd4:	b661      	cpsie	f
 8014dd6:	f3bf 8f4f 	dsb	sy
 8014dda:	f3bf 8f6f 	isb	sy
 8014dde:	df00      	svc	0
 8014de0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014de2:	bf00      	nop
 8014de4:	e000ed08 	.word	0xe000ed08

08014de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b086      	sub	sp, #24
 8014dec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014dee:	4b3b      	ldr	r3, [pc, #236]	; (8014edc <xPortStartScheduler+0xf4>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	4a3b      	ldr	r2, [pc, #236]	; (8014ee0 <xPortStartScheduler+0xf8>)
 8014df4:	4293      	cmp	r3, r2
 8014df6:	d109      	bne.n	8014e0c <xPortStartScheduler+0x24>
 8014df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dfc:	f383 8811 	msr	BASEPRI, r3
 8014e00:	f3bf 8f6f 	isb	sy
 8014e04:	f3bf 8f4f 	dsb	sy
 8014e08:	613b      	str	r3, [r7, #16]
 8014e0a:	e7fe      	b.n	8014e0a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014e0c:	4b33      	ldr	r3, [pc, #204]	; (8014edc <xPortStartScheduler+0xf4>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	4a34      	ldr	r2, [pc, #208]	; (8014ee4 <xPortStartScheduler+0xfc>)
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d109      	bne.n	8014e2a <xPortStartScheduler+0x42>
 8014e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e1a:	f383 8811 	msr	BASEPRI, r3
 8014e1e:	f3bf 8f6f 	isb	sy
 8014e22:	f3bf 8f4f 	dsb	sy
 8014e26:	60fb      	str	r3, [r7, #12]
 8014e28:	e7fe      	b.n	8014e28 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014e2a:	4b2f      	ldr	r3, [pc, #188]	; (8014ee8 <xPortStartScheduler+0x100>)
 8014e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	781b      	ldrb	r3, [r3, #0]
 8014e32:	b2db      	uxtb	r3, r3
 8014e34:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014e36:	697b      	ldr	r3, [r7, #20]
 8014e38:	22ff      	movs	r2, #255	; 0xff
 8014e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	781b      	ldrb	r3, [r3, #0]
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014e44:	79fb      	ldrb	r3, [r7, #7]
 8014e46:	b2db      	uxtb	r3, r3
 8014e48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014e4c:	b2da      	uxtb	r2, r3
 8014e4e:	4b27      	ldr	r3, [pc, #156]	; (8014eec <xPortStartScheduler+0x104>)
 8014e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014e52:	4b27      	ldr	r3, [pc, #156]	; (8014ef0 <xPortStartScheduler+0x108>)
 8014e54:	2207      	movs	r2, #7
 8014e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e58:	e009      	b.n	8014e6e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014e5a:	4b25      	ldr	r3, [pc, #148]	; (8014ef0 <xPortStartScheduler+0x108>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	3b01      	subs	r3, #1
 8014e60:	4a23      	ldr	r2, [pc, #140]	; (8014ef0 <xPortStartScheduler+0x108>)
 8014e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014e64:	79fb      	ldrb	r3, [r7, #7]
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	005b      	lsls	r3, r3, #1
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e6e:	79fb      	ldrb	r3, [r7, #7]
 8014e70:	b2db      	uxtb	r3, r3
 8014e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e76:	2b80      	cmp	r3, #128	; 0x80
 8014e78:	d0ef      	beq.n	8014e5a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e7a:	4b1d      	ldr	r3, [pc, #116]	; (8014ef0 <xPortStartScheduler+0x108>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	021b      	lsls	r3, r3, #8
 8014e80:	4a1b      	ldr	r2, [pc, #108]	; (8014ef0 <xPortStartScheduler+0x108>)
 8014e82:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014e84:	4b1a      	ldr	r3, [pc, #104]	; (8014ef0 <xPortStartScheduler+0x108>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014e8c:	4a18      	ldr	r2, [pc, #96]	; (8014ef0 <xPortStartScheduler+0x108>)
 8014e8e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014e90:	68bb      	ldr	r3, [r7, #8]
 8014e92:	b2da      	uxtb	r2, r3
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e98:	4a16      	ldr	r2, [pc, #88]	; (8014ef4 <xPortStartScheduler+0x10c>)
 8014e9a:	4b16      	ldr	r3, [pc, #88]	; (8014ef4 <xPortStartScheduler+0x10c>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014ea2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014ea4:	4a13      	ldr	r2, [pc, #76]	; (8014ef4 <xPortStartScheduler+0x10c>)
 8014ea6:	4b13      	ldr	r3, [pc, #76]	; (8014ef4 <xPortStartScheduler+0x10c>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014eae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014eb0:	f000 f8d2 	bl	8015058 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014eb4:	4b10      	ldr	r3, [pc, #64]	; (8014ef8 <xPortStartScheduler+0x110>)
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014eba:	f000 f8e9 	bl	8015090 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014ebe:	4a0f      	ldr	r2, [pc, #60]	; (8014efc <xPortStartScheduler+0x114>)
 8014ec0:	4b0e      	ldr	r3, [pc, #56]	; (8014efc <xPortStartScheduler+0x114>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014ec8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014eca:	f7ff ff7d 	bl	8014dc8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8014ece:	f7ff ff47 	bl	8014d60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014ed2:	2300      	movs	r3, #0
}
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	3718      	adds	r7, #24
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}
 8014edc:	e000ed00 	.word	0xe000ed00
 8014ee0:	410fc271 	.word	0x410fc271
 8014ee4:	410fc270 	.word	0x410fc270
 8014ee8:	e000e400 	.word	0xe000e400
 8014eec:	20000238 	.word	0x20000238
 8014ef0:	2000023c 	.word	0x2000023c
 8014ef4:	e000ed20 	.word	0xe000ed20
 8014ef8:	20000004 	.word	0x20000004
 8014efc:	e000ef34 	.word	0xe000ef34

08014f00 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014f00:	b480      	push	{r7}
 8014f02:	b083      	sub	sp, #12
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f0a:	f383 8811 	msr	BASEPRI, r3
 8014f0e:	f3bf 8f6f 	isb	sy
 8014f12:	f3bf 8f4f 	dsb	sy
 8014f16:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014f18:	4b0e      	ldr	r3, [pc, #56]	; (8014f54 <vPortEnterCritical+0x54>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	3301      	adds	r3, #1
 8014f1e:	4a0d      	ldr	r2, [pc, #52]	; (8014f54 <vPortEnterCritical+0x54>)
 8014f20:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014f22:	4b0c      	ldr	r3, [pc, #48]	; (8014f54 <vPortEnterCritical+0x54>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	2b01      	cmp	r3, #1
 8014f28:	d10e      	bne.n	8014f48 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014f2a:	4b0b      	ldr	r3, [pc, #44]	; (8014f58 <vPortEnterCritical+0x58>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	b2db      	uxtb	r3, r3
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d009      	beq.n	8014f48 <vPortEnterCritical+0x48>
 8014f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f38:	f383 8811 	msr	BASEPRI, r3
 8014f3c:	f3bf 8f6f 	isb	sy
 8014f40:	f3bf 8f4f 	dsb	sy
 8014f44:	603b      	str	r3, [r7, #0]
 8014f46:	e7fe      	b.n	8014f46 <vPortEnterCritical+0x46>
	}
}
 8014f48:	bf00      	nop
 8014f4a:	370c      	adds	r7, #12
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f52:	4770      	bx	lr
 8014f54:	20000004 	.word	0x20000004
 8014f58:	e000ed04 	.word	0xe000ed04

08014f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014f5c:	b480      	push	{r7}
 8014f5e:	b083      	sub	sp, #12
 8014f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014f62:	4b11      	ldr	r3, [pc, #68]	; (8014fa8 <vPortExitCritical+0x4c>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d109      	bne.n	8014f7e <vPortExitCritical+0x22>
 8014f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f6e:	f383 8811 	msr	BASEPRI, r3
 8014f72:	f3bf 8f6f 	isb	sy
 8014f76:	f3bf 8f4f 	dsb	sy
 8014f7a:	607b      	str	r3, [r7, #4]
 8014f7c:	e7fe      	b.n	8014f7c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8014f7e:	4b0a      	ldr	r3, [pc, #40]	; (8014fa8 <vPortExitCritical+0x4c>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	3b01      	subs	r3, #1
 8014f84:	4a08      	ldr	r2, [pc, #32]	; (8014fa8 <vPortExitCritical+0x4c>)
 8014f86:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f88:	4b07      	ldr	r3, [pc, #28]	; (8014fa8 <vPortExitCritical+0x4c>)
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d104      	bne.n	8014f9a <vPortExitCritical+0x3e>
 8014f90:	2300      	movs	r3, #0
 8014f92:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014f9a:	bf00      	nop
 8014f9c:	370c      	adds	r7, #12
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa4:	4770      	bx	lr
 8014fa6:	bf00      	nop
 8014fa8:	20000004 	.word	0x20000004
 8014fac:	00000000 	.word	0x00000000

08014fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014fb0:	f3ef 8009 	mrs	r0, PSP
 8014fb4:	f3bf 8f6f 	isb	sy
 8014fb8:	4b15      	ldr	r3, [pc, #84]	; (8015010 <pxCurrentTCBConst>)
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	f01e 0f10 	tst.w	lr, #16
 8014fc0:	bf08      	it	eq
 8014fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fca:	6010      	str	r0, [r2, #0]
 8014fcc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8014fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014fd4:	f380 8811 	msr	BASEPRI, r0
 8014fd8:	f3bf 8f4f 	dsb	sy
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	f001 fbdc 	bl	801679c <vTaskSwitchContext>
 8014fe4:	f04f 0000 	mov.w	r0, #0
 8014fe8:	f380 8811 	msr	BASEPRI, r0
 8014fec:	bc08      	pop	{r3}
 8014fee:	6819      	ldr	r1, [r3, #0]
 8014ff0:	6808      	ldr	r0, [r1, #0]
 8014ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ff6:	f01e 0f10 	tst.w	lr, #16
 8014ffa:	bf08      	it	eq
 8014ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015000:	f380 8809 	msr	PSP, r0
 8015004:	f3bf 8f6f 	isb	sy
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	f3af 8000 	nop.w

08015010 <pxCurrentTCBConst>:
 8015010:	20003e58 	.word	0x20003e58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015014:	bf00      	nop
 8015016:	bf00      	nop

08015018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b082      	sub	sp, #8
 801501c:	af00      	add	r7, sp, #0
	__asm volatile
 801501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015022:	f383 8811 	msr	BASEPRI, r3
 8015026:	f3bf 8f6f 	isb	sy
 801502a:	f3bf 8f4f 	dsb	sy
 801502e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015030:	f001 faf8 	bl	8016624 <xTaskIncrementTick>
 8015034:	4603      	mov	r3, r0
 8015036:	2b00      	cmp	r3, #0
 8015038:	d003      	beq.n	8015042 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801503a:	4b06      	ldr	r3, [pc, #24]	; (8015054 <SysTick_Handler+0x3c>)
 801503c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015040:	601a      	str	r2, [r3, #0]
 8015042:	2300      	movs	r3, #0
 8015044:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801504c:	bf00      	nop
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	e000ed04 	.word	0xe000ed04

08015058 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015058:	b480      	push	{r7}
 801505a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801505c:	4a08      	ldr	r2, [pc, #32]	; (8015080 <vPortSetupTimerInterrupt+0x28>)
 801505e:	4b09      	ldr	r3, [pc, #36]	; (8015084 <vPortSetupTimerInterrupt+0x2c>)
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	4909      	ldr	r1, [pc, #36]	; (8015088 <vPortSetupTimerInterrupt+0x30>)
 8015064:	fba1 1303 	umull	r1, r3, r1, r3
 8015068:	099b      	lsrs	r3, r3, #6
 801506a:	3b01      	subs	r3, #1
 801506c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801506e:	4b07      	ldr	r3, [pc, #28]	; (801508c <vPortSetupTimerInterrupt+0x34>)
 8015070:	2207      	movs	r2, #7
 8015072:	601a      	str	r2, [r3, #0]
}
 8015074:	bf00      	nop
 8015076:	46bd      	mov	sp, r7
 8015078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507c:	4770      	bx	lr
 801507e:	bf00      	nop
 8015080:	e000e014 	.word	0xe000e014
 8015084:	20000048 	.word	0x20000048
 8015088:	10624dd3 	.word	0x10624dd3
 801508c:	e000e010 	.word	0xe000e010

08015090 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015090:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80150a0 <vPortEnableVFP+0x10>
 8015094:	6801      	ldr	r1, [r0, #0]
 8015096:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801509a:	6001      	str	r1, [r0, #0]
 801509c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801509e:	bf00      	nop
 80150a0:	e000ed88 	.word	0xe000ed88

080150a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80150a4:	b480      	push	{r7}
 80150a6:	b085      	sub	sp, #20
 80150a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80150aa:	f3ef 8305 	mrs	r3, IPSR
 80150ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	2b0f      	cmp	r3, #15
 80150b4:	d913      	bls.n	80150de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80150b6:	4a16      	ldr	r2, [pc, #88]	; (8015110 <vPortValidateInterruptPriority+0x6c>)
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	4413      	add	r3, r2
 80150bc:	781b      	ldrb	r3, [r3, #0]
 80150be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80150c0:	4b14      	ldr	r3, [pc, #80]	; (8015114 <vPortValidateInterruptPriority+0x70>)
 80150c2:	781b      	ldrb	r3, [r3, #0]
 80150c4:	7afa      	ldrb	r2, [r7, #11]
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d209      	bcs.n	80150de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80150ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ce:	f383 8811 	msr	BASEPRI, r3
 80150d2:	f3bf 8f6f 	isb	sy
 80150d6:	f3bf 8f4f 	dsb	sy
 80150da:	607b      	str	r3, [r7, #4]
 80150dc:	e7fe      	b.n	80150dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80150de:	4b0e      	ldr	r3, [pc, #56]	; (8015118 <vPortValidateInterruptPriority+0x74>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80150e6:	4b0d      	ldr	r3, [pc, #52]	; (801511c <vPortValidateInterruptPriority+0x78>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d909      	bls.n	8015102 <vPortValidateInterruptPriority+0x5e>
 80150ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f2:	f383 8811 	msr	BASEPRI, r3
 80150f6:	f3bf 8f6f 	isb	sy
 80150fa:	f3bf 8f4f 	dsb	sy
 80150fe:	603b      	str	r3, [r7, #0]
 8015100:	e7fe      	b.n	8015100 <vPortValidateInterruptPriority+0x5c>
	}
 8015102:	bf00      	nop
 8015104:	3714      	adds	r7, #20
 8015106:	46bd      	mov	sp, r7
 8015108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510c:	4770      	bx	lr
 801510e:	bf00      	nop
 8015110:	e000e3f0 	.word	0xe000e3f0
 8015114:	20000238 	.word	0x20000238
 8015118:	e000ed0c 	.word	0xe000ed0c
 801511c:	2000023c 	.word	0x2000023c

08015120 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b08a      	sub	sp, #40	; 0x28
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015128:	2300      	movs	r3, #0
 801512a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801512c:	f001 f9ae 	bl	801648c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015130:	4b57      	ldr	r3, [pc, #348]	; (8015290 <pvPortMalloc+0x170>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d101      	bne.n	801513c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015138:	f000 f90c 	bl	8015354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801513c:	4b55      	ldr	r3, [pc, #340]	; (8015294 <pvPortMalloc+0x174>)
 801513e:	681a      	ldr	r2, [r3, #0]
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	4013      	ands	r3, r2
 8015144:	2b00      	cmp	r3, #0
 8015146:	f040 808c 	bne.w	8015262 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d01c      	beq.n	801518a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8015150:	2208      	movs	r2, #8
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	4413      	add	r3, r2
 8015156:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	f003 0307 	and.w	r3, r3, #7
 801515e:	2b00      	cmp	r3, #0
 8015160:	d013      	beq.n	801518a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f023 0307 	bic.w	r3, r3, #7
 8015168:	3308      	adds	r3, #8
 801516a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f003 0307 	and.w	r3, r3, #7
 8015172:	2b00      	cmp	r3, #0
 8015174:	d009      	beq.n	801518a <pvPortMalloc+0x6a>
 8015176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801517a:	f383 8811 	msr	BASEPRI, r3
 801517e:	f3bf 8f6f 	isb	sy
 8015182:	f3bf 8f4f 	dsb	sy
 8015186:	617b      	str	r3, [r7, #20]
 8015188:	e7fe      	b.n	8015188 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d068      	beq.n	8015262 <pvPortMalloc+0x142>
 8015190:	4b41      	ldr	r3, [pc, #260]	; (8015298 <pvPortMalloc+0x178>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	687a      	ldr	r2, [r7, #4]
 8015196:	429a      	cmp	r2, r3
 8015198:	d863      	bhi.n	8015262 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801519a:	4b40      	ldr	r3, [pc, #256]	; (801529c <pvPortMalloc+0x17c>)
 801519c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801519e:	4b3f      	ldr	r3, [pc, #252]	; (801529c <pvPortMalloc+0x17c>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151a4:	e004      	b.n	80151b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80151a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80151aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b2:	685a      	ldr	r2, [r3, #4]
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d203      	bcs.n	80151c2 <pvPortMalloc+0xa2>
 80151ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d1f1      	bne.n	80151a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80151c2:	4b33      	ldr	r3, [pc, #204]	; (8015290 <pvPortMalloc+0x170>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d04a      	beq.n	8015262 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80151cc:	6a3b      	ldr	r3, [r7, #32]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	2208      	movs	r2, #8
 80151d2:	4413      	add	r3, r2
 80151d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80151d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d8:	681a      	ldr	r2, [r3, #0]
 80151da:	6a3b      	ldr	r3, [r7, #32]
 80151dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80151de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e0:	685a      	ldr	r2, [r3, #4]
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	1ad2      	subs	r2, r2, r3
 80151e6:	2308      	movs	r3, #8
 80151e8:	005b      	lsls	r3, r3, #1
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d91e      	bls.n	801522c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80151ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	4413      	add	r3, r2
 80151f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80151f6:	69bb      	ldr	r3, [r7, #24]
 80151f8:	f003 0307 	and.w	r3, r3, #7
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d009      	beq.n	8015214 <pvPortMalloc+0xf4>
 8015200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015204:	f383 8811 	msr	BASEPRI, r3
 8015208:	f3bf 8f6f 	isb	sy
 801520c:	f3bf 8f4f 	dsb	sy
 8015210:	613b      	str	r3, [r7, #16]
 8015212:	e7fe      	b.n	8015212 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015216:	685a      	ldr	r2, [r3, #4]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	1ad2      	subs	r2, r2, r3
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015222:	687a      	ldr	r2, [r7, #4]
 8015224:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015226:	69b8      	ldr	r0, [r7, #24]
 8015228:	f000 f8f6 	bl	8015418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801522c:	4b1a      	ldr	r3, [pc, #104]	; (8015298 <pvPortMalloc+0x178>)
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015232:	685b      	ldr	r3, [r3, #4]
 8015234:	1ad3      	subs	r3, r2, r3
 8015236:	4a18      	ldr	r2, [pc, #96]	; (8015298 <pvPortMalloc+0x178>)
 8015238:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801523a:	4b17      	ldr	r3, [pc, #92]	; (8015298 <pvPortMalloc+0x178>)
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	4b18      	ldr	r3, [pc, #96]	; (80152a0 <pvPortMalloc+0x180>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	429a      	cmp	r2, r3
 8015244:	d203      	bcs.n	801524e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015246:	4b14      	ldr	r3, [pc, #80]	; (8015298 <pvPortMalloc+0x178>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	4a15      	ldr	r2, [pc, #84]	; (80152a0 <pvPortMalloc+0x180>)
 801524c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015250:	685a      	ldr	r2, [r3, #4]
 8015252:	4b10      	ldr	r3, [pc, #64]	; (8015294 <pvPortMalloc+0x174>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	431a      	orrs	r2, r3
 8015258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525e:	2200      	movs	r2, #0
 8015260:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015262:	f001 f921 	bl	80164a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015266:	69fb      	ldr	r3, [r7, #28]
 8015268:	f003 0307 	and.w	r3, r3, #7
 801526c:	2b00      	cmp	r3, #0
 801526e:	d009      	beq.n	8015284 <pvPortMalloc+0x164>
 8015270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015274:	f383 8811 	msr	BASEPRI, r3
 8015278:	f3bf 8f6f 	isb	sy
 801527c:	f3bf 8f4f 	dsb	sy
 8015280:	60fb      	str	r3, [r7, #12]
 8015282:	e7fe      	b.n	8015282 <pvPortMalloc+0x162>
	return pvReturn;
 8015284:	69fb      	ldr	r3, [r7, #28]
}
 8015286:	4618      	mov	r0, r3
 8015288:	3728      	adds	r7, #40	; 0x28
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	20003e48 	.word	0x20003e48
 8015294:	20003e54 	.word	0x20003e54
 8015298:	20003e4c 	.word	0x20003e4c
 801529c:	20003e40 	.word	0x20003e40
 80152a0:	20003e50 	.word	0x20003e50

080152a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b086      	sub	sp, #24
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d046      	beq.n	8015344 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80152b6:	2308      	movs	r3, #8
 80152b8:	425b      	negs	r3, r3
 80152ba:	697a      	ldr	r2, [r7, #20]
 80152bc:	4413      	add	r3, r2
 80152be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80152c4:	693b      	ldr	r3, [r7, #16]
 80152c6:	685a      	ldr	r2, [r3, #4]
 80152c8:	4b20      	ldr	r3, [pc, #128]	; (801534c <vPortFree+0xa8>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	4013      	ands	r3, r2
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d109      	bne.n	80152e6 <vPortFree+0x42>
 80152d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152d6:	f383 8811 	msr	BASEPRI, r3
 80152da:	f3bf 8f6f 	isb	sy
 80152de:	f3bf 8f4f 	dsb	sy
 80152e2:	60fb      	str	r3, [r7, #12]
 80152e4:	e7fe      	b.n	80152e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d009      	beq.n	8015302 <vPortFree+0x5e>
 80152ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f2:	f383 8811 	msr	BASEPRI, r3
 80152f6:	f3bf 8f6f 	isb	sy
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	60bb      	str	r3, [r7, #8]
 8015300:	e7fe      	b.n	8015300 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	685a      	ldr	r2, [r3, #4]
 8015306:	4b11      	ldr	r3, [pc, #68]	; (801534c <vPortFree+0xa8>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	4013      	ands	r3, r2
 801530c:	2b00      	cmp	r3, #0
 801530e:	d019      	beq.n	8015344 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d115      	bne.n	8015344 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	685a      	ldr	r2, [r3, #4]
 801531c:	4b0b      	ldr	r3, [pc, #44]	; (801534c <vPortFree+0xa8>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	43db      	mvns	r3, r3
 8015322:	401a      	ands	r2, r3
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015328:	f001 f8b0 	bl	801648c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801532c:	693b      	ldr	r3, [r7, #16]
 801532e:	685a      	ldr	r2, [r3, #4]
 8015330:	4b07      	ldr	r3, [pc, #28]	; (8015350 <vPortFree+0xac>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	4413      	add	r3, r2
 8015336:	4a06      	ldr	r2, [pc, #24]	; (8015350 <vPortFree+0xac>)
 8015338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801533a:	6938      	ldr	r0, [r7, #16]
 801533c:	f000 f86c 	bl	8015418 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015340:	f001 f8b2 	bl	80164a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015344:	bf00      	nop
 8015346:	3718      	adds	r7, #24
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}
 801534c:	20003e54 	.word	0x20003e54
 8015350:	20003e4c 	.word	0x20003e4c

08015354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015354:	b480      	push	{r7}
 8015356:	b085      	sub	sp, #20
 8015358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801535a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801535e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015360:	4b27      	ldr	r3, [pc, #156]	; (8015400 <prvHeapInit+0xac>)
 8015362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f003 0307 	and.w	r3, r3, #7
 801536a:	2b00      	cmp	r3, #0
 801536c:	d00c      	beq.n	8015388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	3307      	adds	r3, #7
 8015372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	f023 0307 	bic.w	r3, r3, #7
 801537a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801537c:	68ba      	ldr	r2, [r7, #8]
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	1ad3      	subs	r3, r2, r3
 8015382:	4a1f      	ldr	r2, [pc, #124]	; (8015400 <prvHeapInit+0xac>)
 8015384:	4413      	add	r3, r2
 8015386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801538c:	4a1d      	ldr	r2, [pc, #116]	; (8015404 <prvHeapInit+0xb0>)
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015392:	4b1c      	ldr	r3, [pc, #112]	; (8015404 <prvHeapInit+0xb0>)
 8015394:	2200      	movs	r2, #0
 8015396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015398:	687a      	ldr	r2, [r7, #4]
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	4413      	add	r3, r2
 801539e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80153a0:	2208      	movs	r2, #8
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	1a9b      	subs	r3, r3, r2
 80153a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	f023 0307 	bic.w	r3, r3, #7
 80153ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	4a15      	ldr	r2, [pc, #84]	; (8015408 <prvHeapInit+0xb4>)
 80153b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80153b6:	4b14      	ldr	r3, [pc, #80]	; (8015408 <prvHeapInit+0xb4>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	2200      	movs	r2, #0
 80153bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80153be:	4b12      	ldr	r3, [pc, #72]	; (8015408 <prvHeapInit+0xb4>)
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	2200      	movs	r2, #0
 80153c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	68fa      	ldr	r2, [r7, #12]
 80153ce:	1ad2      	subs	r2, r2, r3
 80153d0:	683b      	ldr	r3, [r7, #0]
 80153d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80153d4:	4b0c      	ldr	r3, [pc, #48]	; (8015408 <prvHeapInit+0xb4>)
 80153d6:	681a      	ldr	r2, [r3, #0]
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	685b      	ldr	r3, [r3, #4]
 80153e0:	4a0a      	ldr	r2, [pc, #40]	; (801540c <prvHeapInit+0xb8>)
 80153e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	685b      	ldr	r3, [r3, #4]
 80153e8:	4a09      	ldr	r2, [pc, #36]	; (8015410 <prvHeapInit+0xbc>)
 80153ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80153ec:	4b09      	ldr	r3, [pc, #36]	; (8015414 <prvHeapInit+0xc0>)
 80153ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80153f2:	601a      	str	r2, [r3, #0]
}
 80153f4:	bf00      	nop
 80153f6:	3714      	adds	r7, #20
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr
 8015400:	20000240 	.word	0x20000240
 8015404:	20003e40 	.word	0x20003e40
 8015408:	20003e48 	.word	0x20003e48
 801540c:	20003e50 	.word	0x20003e50
 8015410:	20003e4c 	.word	0x20003e4c
 8015414:	20003e54 	.word	0x20003e54

08015418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015418:	b480      	push	{r7}
 801541a:	b085      	sub	sp, #20
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015420:	4b28      	ldr	r3, [pc, #160]	; (80154c4 <prvInsertBlockIntoFreeList+0xac>)
 8015422:	60fb      	str	r3, [r7, #12]
 8015424:	e002      	b.n	801542c <prvInsertBlockIntoFreeList+0x14>
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	60fb      	str	r3, [r7, #12]
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	429a      	cmp	r2, r3
 8015434:	d3f7      	bcc.n	8015426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	68ba      	ldr	r2, [r7, #8]
 8015440:	441a      	add	r2, r3
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	429a      	cmp	r2, r3
 8015446:	d108      	bne.n	801545a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	685a      	ldr	r2, [r3, #4]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	685b      	ldr	r3, [r3, #4]
 8015450:	441a      	add	r2, r3
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	685b      	ldr	r3, [r3, #4]
 8015462:	68ba      	ldr	r2, [r7, #8]
 8015464:	441a      	add	r2, r3
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	429a      	cmp	r2, r3
 801546c:	d118      	bne.n	80154a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	681a      	ldr	r2, [r3, #0]
 8015472:	4b15      	ldr	r3, [pc, #84]	; (80154c8 <prvInsertBlockIntoFreeList+0xb0>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	429a      	cmp	r2, r3
 8015478:	d00d      	beq.n	8015496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	685a      	ldr	r2, [r3, #4]
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	685b      	ldr	r3, [r3, #4]
 8015484:	441a      	add	r2, r3
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	681a      	ldr	r2, [r3, #0]
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	601a      	str	r2, [r3, #0]
 8015494:	e008      	b.n	80154a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015496:	4b0c      	ldr	r3, [pc, #48]	; (80154c8 <prvInsertBlockIntoFreeList+0xb0>)
 8015498:	681a      	ldr	r2, [r3, #0]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	601a      	str	r2, [r3, #0]
 801549e:	e003      	b.n	80154a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80154a8:	68fa      	ldr	r2, [r7, #12]
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	429a      	cmp	r2, r3
 80154ae:	d002      	beq.n	80154b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	687a      	ldr	r2, [r7, #4]
 80154b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80154b6:	bf00      	nop
 80154b8:	3714      	adds	r7, #20
 80154ba:	46bd      	mov	sp, r7
 80154bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c0:	4770      	bx	lr
 80154c2:	bf00      	nop
 80154c4:	20003e40 	.word	0x20003e40
 80154c8:	20003e48 	.word	0x20003e48

080154cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b084      	sub	sp, #16
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
 80154d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d109      	bne.n	80154f4 <xQueueGenericReset+0x28>
 80154e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154e4:	f383 8811 	msr	BASEPRI, r3
 80154e8:	f3bf 8f6f 	isb	sy
 80154ec:	f3bf 8f4f 	dsb	sy
 80154f0:	60bb      	str	r3, [r7, #8]
 80154f2:	e7fe      	b.n	80154f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80154f4:	f7ff fd04 	bl	8014f00 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	681a      	ldr	r2, [r3, #0]
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015500:	68f9      	ldr	r1, [r7, #12]
 8015502:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015504:	fb01 f303 	mul.w	r3, r1, r3
 8015508:	441a      	add	r2, r3
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	2200      	movs	r2, #0
 8015512:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	681a      	ldr	r2, [r3, #0]
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015524:	3b01      	subs	r3, #1
 8015526:	68f9      	ldr	r1, [r7, #12]
 8015528:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801552a:	fb01 f303 	mul.w	r3, r1, r3
 801552e:	441a      	add	r2, r3
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	22ff      	movs	r2, #255	; 0xff
 8015538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	22ff      	movs	r2, #255	; 0xff
 8015540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d114      	bne.n	8015574 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	691b      	ldr	r3, [r3, #16]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d01a      	beq.n	8015588 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	3310      	adds	r3, #16
 8015556:	4618      	mov	r0, r3
 8015558:	f001 f9ba 	bl	80168d0 <xTaskRemoveFromEventList>
 801555c:	4603      	mov	r3, r0
 801555e:	2b00      	cmp	r3, #0
 8015560:	d012      	beq.n	8015588 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015562:	4b0d      	ldr	r3, [pc, #52]	; (8015598 <xQueueGenericReset+0xcc>)
 8015564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015568:	601a      	str	r2, [r3, #0]
 801556a:	f3bf 8f4f 	dsb	sy
 801556e:	f3bf 8f6f 	isb	sy
 8015572:	e009      	b.n	8015588 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	3310      	adds	r3, #16
 8015578:	4618      	mov	r0, r3
 801557a:	f7ff fb08 	bl	8014b8e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	3324      	adds	r3, #36	; 0x24
 8015582:	4618      	mov	r0, r3
 8015584:	f7ff fb03 	bl	8014b8e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015588:	f7ff fce8 	bl	8014f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801558c:	2301      	movs	r3, #1
}
 801558e:	4618      	mov	r0, r3
 8015590:	3710      	adds	r7, #16
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	e000ed04 	.word	0xe000ed04

0801559c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801559c:	b580      	push	{r7, lr}
 801559e:	b08a      	sub	sp, #40	; 0x28
 80155a0:	af02      	add	r7, sp, #8
 80155a2:	60f8      	str	r0, [r7, #12]
 80155a4:	60b9      	str	r1, [r7, #8]
 80155a6:	4613      	mov	r3, r2
 80155a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d109      	bne.n	80155c4 <xQueueGenericCreate+0x28>
 80155b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155b4:	f383 8811 	msr	BASEPRI, r3
 80155b8:	f3bf 8f6f 	isb	sy
 80155bc:	f3bf 8f4f 	dsb	sy
 80155c0:	613b      	str	r3, [r7, #16]
 80155c2:	e7fe      	b.n	80155c2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80155c4:	68bb      	ldr	r3, [r7, #8]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d102      	bne.n	80155d0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80155ca:	2300      	movs	r3, #0
 80155cc:	61fb      	str	r3, [r7, #28]
 80155ce:	e004      	b.n	80155da <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	68ba      	ldr	r2, [r7, #8]
 80155d4:	fb02 f303 	mul.w	r3, r2, r3
 80155d8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80155da:	69fb      	ldr	r3, [r7, #28]
 80155dc:	3350      	adds	r3, #80	; 0x50
 80155de:	4618      	mov	r0, r3
 80155e0:	f7ff fd9e 	bl	8015120 <pvPortMalloc>
 80155e4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80155e6:	69bb      	ldr	r3, [r7, #24]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d00b      	beq.n	8015604 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	3350      	adds	r3, #80	; 0x50
 80155f0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80155f2:	79fa      	ldrb	r2, [r7, #7]
 80155f4:	69bb      	ldr	r3, [r7, #24]
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	4613      	mov	r3, r2
 80155fa:	697a      	ldr	r2, [r7, #20]
 80155fc:	68b9      	ldr	r1, [r7, #8]
 80155fe:	68f8      	ldr	r0, [r7, #12]
 8015600:	f000 f805 	bl	801560e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8015604:	69bb      	ldr	r3, [r7, #24]
	}
 8015606:	4618      	mov	r0, r3
 8015608:	3720      	adds	r7, #32
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}

0801560e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801560e:	b580      	push	{r7, lr}
 8015610:	b084      	sub	sp, #16
 8015612:	af00      	add	r7, sp, #0
 8015614:	60f8      	str	r0, [r7, #12]
 8015616:	60b9      	str	r1, [r7, #8]
 8015618:	607a      	str	r2, [r7, #4]
 801561a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d103      	bne.n	801562a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	69ba      	ldr	r2, [r7, #24]
 8015626:	601a      	str	r2, [r3, #0]
 8015628:	e002      	b.n	8015630 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801562a:	69bb      	ldr	r3, [r7, #24]
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015630:	69bb      	ldr	r3, [r7, #24]
 8015632:	68fa      	ldr	r2, [r7, #12]
 8015634:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015636:	69bb      	ldr	r3, [r7, #24]
 8015638:	68ba      	ldr	r2, [r7, #8]
 801563a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801563c:	2101      	movs	r1, #1
 801563e:	69b8      	ldr	r0, [r7, #24]
 8015640:	f7ff ff44 	bl	80154cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015644:	69bb      	ldr	r3, [r7, #24]
 8015646:	78fa      	ldrb	r2, [r7, #3]
 8015648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801564c:	bf00      	nop
 801564e:	3710      	adds	r7, #16
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}

08015654 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d00e      	beq.n	8015680 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2200      	movs	r2, #0
 8015666:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2200      	movs	r2, #0
 801566c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2200      	movs	r2, #0
 8015672:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015674:	2300      	movs	r3, #0
 8015676:	2200      	movs	r2, #0
 8015678:	2100      	movs	r1, #0
 801567a:	6878      	ldr	r0, [r7, #4]
 801567c:	f000 f81c 	bl	80156b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015680:	bf00      	nop
 8015682:	3708      	adds	r7, #8
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}

08015688 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015688:	b580      	push	{r7, lr}
 801568a:	b086      	sub	sp, #24
 801568c:	af00      	add	r7, sp, #0
 801568e:	4603      	mov	r3, r0
 8015690:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015692:	2301      	movs	r3, #1
 8015694:	617b      	str	r3, [r7, #20]
 8015696:	2300      	movs	r3, #0
 8015698:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801569a:	79fb      	ldrb	r3, [r7, #7]
 801569c:	461a      	mov	r2, r3
 801569e:	6939      	ldr	r1, [r7, #16]
 80156a0:	6978      	ldr	r0, [r7, #20]
 80156a2:	f7ff ff7b 	bl	801559c <xQueueGenericCreate>
 80156a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80156a8:	68f8      	ldr	r0, [r7, #12]
 80156aa:	f7ff ffd3 	bl	8015654 <prvInitialiseMutex>

		return pxNewQueue;
 80156ae:	68fb      	ldr	r3, [r7, #12]
	}
 80156b0:	4618      	mov	r0, r3
 80156b2:	3718      	adds	r7, #24
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}

080156b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b08e      	sub	sp, #56	; 0x38
 80156bc:	af00      	add	r7, sp, #0
 80156be:	60f8      	str	r0, [r7, #12]
 80156c0:	60b9      	str	r1, [r7, #8]
 80156c2:	607a      	str	r2, [r7, #4]
 80156c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80156c6:	2300      	movs	r3, #0
 80156c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80156ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d109      	bne.n	80156e8 <xQueueGenericSend+0x30>
 80156d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156d8:	f383 8811 	msr	BASEPRI, r3
 80156dc:	f3bf 8f6f 	isb	sy
 80156e0:	f3bf 8f4f 	dsb	sy
 80156e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80156e6:	e7fe      	b.n	80156e6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d103      	bne.n	80156f6 <xQueueGenericSend+0x3e>
 80156ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d101      	bne.n	80156fa <xQueueGenericSend+0x42>
 80156f6:	2301      	movs	r3, #1
 80156f8:	e000      	b.n	80156fc <xQueueGenericSend+0x44>
 80156fa:	2300      	movs	r3, #0
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d109      	bne.n	8015714 <xQueueGenericSend+0x5c>
 8015700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015704:	f383 8811 	msr	BASEPRI, r3
 8015708:	f3bf 8f6f 	isb	sy
 801570c:	f3bf 8f4f 	dsb	sy
 8015710:	627b      	str	r3, [r7, #36]	; 0x24
 8015712:	e7fe      	b.n	8015712 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	2b02      	cmp	r3, #2
 8015718:	d103      	bne.n	8015722 <xQueueGenericSend+0x6a>
 801571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801571e:	2b01      	cmp	r3, #1
 8015720:	d101      	bne.n	8015726 <xQueueGenericSend+0x6e>
 8015722:	2301      	movs	r3, #1
 8015724:	e000      	b.n	8015728 <xQueueGenericSend+0x70>
 8015726:	2300      	movs	r3, #0
 8015728:	2b00      	cmp	r3, #0
 801572a:	d109      	bne.n	8015740 <xQueueGenericSend+0x88>
 801572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015730:	f383 8811 	msr	BASEPRI, r3
 8015734:	f3bf 8f6f 	isb	sy
 8015738:	f3bf 8f4f 	dsb	sy
 801573c:	623b      	str	r3, [r7, #32]
 801573e:	e7fe      	b.n	801573e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015740:	f001 fa80 	bl	8016c44 <xTaskGetSchedulerState>
 8015744:	4603      	mov	r3, r0
 8015746:	2b00      	cmp	r3, #0
 8015748:	d102      	bne.n	8015750 <xQueueGenericSend+0x98>
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d101      	bne.n	8015754 <xQueueGenericSend+0x9c>
 8015750:	2301      	movs	r3, #1
 8015752:	e000      	b.n	8015756 <xQueueGenericSend+0x9e>
 8015754:	2300      	movs	r3, #0
 8015756:	2b00      	cmp	r3, #0
 8015758:	d109      	bne.n	801576e <xQueueGenericSend+0xb6>
 801575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801575e:	f383 8811 	msr	BASEPRI, r3
 8015762:	f3bf 8f6f 	isb	sy
 8015766:	f3bf 8f4f 	dsb	sy
 801576a:	61fb      	str	r3, [r7, #28]
 801576c:	e7fe      	b.n	801576c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801576e:	f7ff fbc7 	bl	8014f00 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801577a:	429a      	cmp	r2, r3
 801577c:	d302      	bcc.n	8015784 <xQueueGenericSend+0xcc>
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	2b02      	cmp	r3, #2
 8015782:	d129      	bne.n	80157d8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015784:	683a      	ldr	r2, [r7, #0]
 8015786:	68b9      	ldr	r1, [r7, #8]
 8015788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801578a:	f000 fb91 	bl	8015eb0 <prvCopyDataToQueue>
 801578e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015794:	2b00      	cmp	r3, #0
 8015796:	d010      	beq.n	80157ba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801579a:	3324      	adds	r3, #36	; 0x24
 801579c:	4618      	mov	r0, r3
 801579e:	f001 f897 	bl	80168d0 <xTaskRemoveFromEventList>
 80157a2:	4603      	mov	r3, r0
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d013      	beq.n	80157d0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80157a8:	4b3f      	ldr	r3, [pc, #252]	; (80158a8 <xQueueGenericSend+0x1f0>)
 80157aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157ae:	601a      	str	r2, [r3, #0]
 80157b0:	f3bf 8f4f 	dsb	sy
 80157b4:	f3bf 8f6f 	isb	sy
 80157b8:	e00a      	b.n	80157d0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80157ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d007      	beq.n	80157d0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80157c0:	4b39      	ldr	r3, [pc, #228]	; (80158a8 <xQueueGenericSend+0x1f0>)
 80157c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157c6:	601a      	str	r2, [r3, #0]
 80157c8:	f3bf 8f4f 	dsb	sy
 80157cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80157d0:	f7ff fbc4 	bl	8014f5c <vPortExitCritical>
				return pdPASS;
 80157d4:	2301      	movs	r3, #1
 80157d6:	e063      	b.n	80158a0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d103      	bne.n	80157e6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80157de:	f7ff fbbd 	bl	8014f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80157e2:	2300      	movs	r3, #0
 80157e4:	e05c      	b.n	80158a0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80157e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d106      	bne.n	80157fa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80157ec:	f107 0314 	add.w	r3, r7, #20
 80157f0:	4618      	mov	r0, r3
 80157f2:	f001 f8cf 	bl	8016994 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80157f6:	2301      	movs	r3, #1
 80157f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80157fa:	f7ff fbaf 	bl	8014f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80157fe:	f000 fe45 	bl	801648c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015802:	f7ff fb7d 	bl	8014f00 <vPortEnterCritical>
 8015806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801580c:	b25b      	sxtb	r3, r3
 801580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015812:	d103      	bne.n	801581c <xQueueGenericSend+0x164>
 8015814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015816:	2200      	movs	r2, #0
 8015818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801581e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015822:	b25b      	sxtb	r3, r3
 8015824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015828:	d103      	bne.n	8015832 <xQueueGenericSend+0x17a>
 801582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801582c:	2200      	movs	r2, #0
 801582e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015832:	f7ff fb93 	bl	8014f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015836:	1d3a      	adds	r2, r7, #4
 8015838:	f107 0314 	add.w	r3, r7, #20
 801583c:	4611      	mov	r1, r2
 801583e:	4618      	mov	r0, r3
 8015840:	f001 f8cc 	bl	80169dc <xTaskCheckForTimeOut>
 8015844:	4603      	mov	r3, r0
 8015846:	2b00      	cmp	r3, #0
 8015848:	d124      	bne.n	8015894 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801584a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801584c:	f000 fc28 	bl	80160a0 <prvIsQueueFull>
 8015850:	4603      	mov	r3, r0
 8015852:	2b00      	cmp	r3, #0
 8015854:	d018      	beq.n	8015888 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015858:	3310      	adds	r3, #16
 801585a:	687a      	ldr	r2, [r7, #4]
 801585c:	4611      	mov	r1, r2
 801585e:	4618      	mov	r0, r3
 8015860:	f001 f812 	bl	8016888 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015866:	f000 fbb3 	bl	8015fd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801586a:	f000 fe1d 	bl	80164a8 <xTaskResumeAll>
 801586e:	4603      	mov	r3, r0
 8015870:	2b00      	cmp	r3, #0
 8015872:	f47f af7c 	bne.w	801576e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8015876:	4b0c      	ldr	r3, [pc, #48]	; (80158a8 <xQueueGenericSend+0x1f0>)
 8015878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801587c:	601a      	str	r2, [r3, #0]
 801587e:	f3bf 8f4f 	dsb	sy
 8015882:	f3bf 8f6f 	isb	sy
 8015886:	e772      	b.n	801576e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801588a:	f000 fba1 	bl	8015fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801588e:	f000 fe0b 	bl	80164a8 <xTaskResumeAll>
 8015892:	e76c      	b.n	801576e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015896:	f000 fb9b 	bl	8015fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801589a:	f000 fe05 	bl	80164a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801589e:	2300      	movs	r3, #0
		}
	}
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	3738      	adds	r7, #56	; 0x38
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}
 80158a8:	e000ed04 	.word	0xe000ed04

080158ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b08e      	sub	sp, #56	; 0x38
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	60b9      	str	r1, [r7, #8]
 80158b6:	607a      	str	r2, [r7, #4]
 80158b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80158be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d109      	bne.n	80158d8 <xQueueGenericSendFromISR+0x2c>
 80158c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158c8:	f383 8811 	msr	BASEPRI, r3
 80158cc:	f3bf 8f6f 	isb	sy
 80158d0:	f3bf 8f4f 	dsb	sy
 80158d4:	627b      	str	r3, [r7, #36]	; 0x24
 80158d6:	e7fe      	b.n	80158d6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d103      	bne.n	80158e6 <xQueueGenericSendFromISR+0x3a>
 80158de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d101      	bne.n	80158ea <xQueueGenericSendFromISR+0x3e>
 80158e6:	2301      	movs	r3, #1
 80158e8:	e000      	b.n	80158ec <xQueueGenericSendFromISR+0x40>
 80158ea:	2300      	movs	r3, #0
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d109      	bne.n	8015904 <xQueueGenericSendFromISR+0x58>
 80158f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158f4:	f383 8811 	msr	BASEPRI, r3
 80158f8:	f3bf 8f6f 	isb	sy
 80158fc:	f3bf 8f4f 	dsb	sy
 8015900:	623b      	str	r3, [r7, #32]
 8015902:	e7fe      	b.n	8015902 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	2b02      	cmp	r3, #2
 8015908:	d103      	bne.n	8015912 <xQueueGenericSendFromISR+0x66>
 801590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801590e:	2b01      	cmp	r3, #1
 8015910:	d101      	bne.n	8015916 <xQueueGenericSendFromISR+0x6a>
 8015912:	2301      	movs	r3, #1
 8015914:	e000      	b.n	8015918 <xQueueGenericSendFromISR+0x6c>
 8015916:	2300      	movs	r3, #0
 8015918:	2b00      	cmp	r3, #0
 801591a:	d109      	bne.n	8015930 <xQueueGenericSendFromISR+0x84>
 801591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015920:	f383 8811 	msr	BASEPRI, r3
 8015924:	f3bf 8f6f 	isb	sy
 8015928:	f3bf 8f4f 	dsb	sy
 801592c:	61fb      	str	r3, [r7, #28]
 801592e:	e7fe      	b.n	801592e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015930:	f7ff fbb8 	bl	80150a4 <vPortValidateInterruptPriority>
	__asm volatile
 8015934:	f3ef 8211 	mrs	r2, BASEPRI
 8015938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801593c:	f383 8811 	msr	BASEPRI, r3
 8015940:	f3bf 8f6f 	isb	sy
 8015944:	f3bf 8f4f 	dsb	sy
 8015948:	61ba      	str	r2, [r7, #24]
 801594a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801594c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801594e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015958:	429a      	cmp	r2, r3
 801595a:	d302      	bcc.n	8015962 <xQueueGenericSendFromISR+0xb6>
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	2b02      	cmp	r3, #2
 8015960:	d12c      	bne.n	80159bc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801596c:	683a      	ldr	r2, [r7, #0]
 801596e:	68b9      	ldr	r1, [r7, #8]
 8015970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015972:	f000 fa9d 	bl	8015eb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015976:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801597e:	d112      	bne.n	80159a6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015984:	2b00      	cmp	r3, #0
 8015986:	d016      	beq.n	80159b6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801598a:	3324      	adds	r3, #36	; 0x24
 801598c:	4618      	mov	r0, r3
 801598e:	f000 ff9f 	bl	80168d0 <xTaskRemoveFromEventList>
 8015992:	4603      	mov	r3, r0
 8015994:	2b00      	cmp	r3, #0
 8015996:	d00e      	beq.n	80159b6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d00b      	beq.n	80159b6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	2201      	movs	r2, #1
 80159a2:	601a      	str	r2, [r3, #0]
 80159a4:	e007      	b.n	80159b6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80159a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80159aa:	3301      	adds	r3, #1
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	b25a      	sxtb	r2, r3
 80159b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80159b6:	2301      	movs	r3, #1
 80159b8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80159ba:	e001      	b.n	80159c0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80159bc:	2300      	movs	r3, #0
 80159be:	637b      	str	r3, [r7, #52]	; 0x34
 80159c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80159ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	3738      	adds	r7, #56	; 0x38
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}

080159d4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b08e      	sub	sp, #56	; 0x38
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80159e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d109      	bne.n	80159fc <xQueueGiveFromISR+0x28>
	__asm volatile
 80159e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ec:	f383 8811 	msr	BASEPRI, r3
 80159f0:	f3bf 8f6f 	isb	sy
 80159f4:	f3bf 8f4f 	dsb	sy
 80159f8:	623b      	str	r3, [r7, #32]
 80159fa:	e7fe      	b.n	80159fa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80159fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d009      	beq.n	8015a18 <xQueueGiveFromISR+0x44>
 8015a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a08:	f383 8811 	msr	BASEPRI, r3
 8015a0c:	f3bf 8f6f 	isb	sy
 8015a10:	f3bf 8f4f 	dsb	sy
 8015a14:	61fb      	str	r3, [r7, #28]
 8015a16:	e7fe      	b.n	8015a16 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8015a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d103      	bne.n	8015a28 <xQueueGiveFromISR+0x54>
 8015a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a22:	685b      	ldr	r3, [r3, #4]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d101      	bne.n	8015a2c <xQueueGiveFromISR+0x58>
 8015a28:	2301      	movs	r3, #1
 8015a2a:	e000      	b.n	8015a2e <xQueueGiveFromISR+0x5a>
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d109      	bne.n	8015a46 <xQueueGiveFromISR+0x72>
 8015a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a36:	f383 8811 	msr	BASEPRI, r3
 8015a3a:	f3bf 8f6f 	isb	sy
 8015a3e:	f3bf 8f4f 	dsb	sy
 8015a42:	61bb      	str	r3, [r7, #24]
 8015a44:	e7fe      	b.n	8015a44 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015a46:	f7ff fb2d 	bl	80150a4 <vPortValidateInterruptPriority>
	__asm volatile
 8015a4a:	f3ef 8211 	mrs	r2, BASEPRI
 8015a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a52:	f383 8811 	msr	BASEPRI, r3
 8015a56:	f3bf 8f6f 	isb	sy
 8015a5a:	f3bf 8f4f 	dsb	sy
 8015a5e:	617a      	str	r2, [r7, #20]
 8015a60:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015a62:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d92b      	bls.n	8015ace <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8015a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a82:	1c5a      	adds	r2, r3, #1
 8015a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a86:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a90:	d112      	bne.n	8015ab8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d016      	beq.n	8015ac8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9c:	3324      	adds	r3, #36	; 0x24
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f000 ff16 	bl	80168d0 <xTaskRemoveFromEventList>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d00e      	beq.n	8015ac8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d00b      	beq.n	8015ac8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	601a      	str	r2, [r3, #0]
 8015ab6:	e007      	b.n	8015ac8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015abc:	3301      	adds	r3, #1
 8015abe:	b2db      	uxtb	r3, r3
 8015ac0:	b25a      	sxtb	r2, r3
 8015ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015ac8:	2301      	movs	r3, #1
 8015aca:	637b      	str	r3, [r7, #52]	; 0x34
 8015acc:	e001      	b.n	8015ad2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8015ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ad4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3738      	adds	r7, #56	; 0x38
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}
	...

08015ae8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b08e      	sub	sp, #56	; 0x38
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	60f8      	str	r0, [r7, #12]
 8015af0:	60b9      	str	r1, [r7, #8]
 8015af2:	607a      	str	r2, [r7, #4]
 8015af4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015af6:	2300      	movs	r3, #0
 8015af8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d109      	bne.n	8015b18 <xQueueGenericReceive+0x30>
	__asm volatile
 8015b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b08:	f383 8811 	msr	BASEPRI, r3
 8015b0c:	f3bf 8f6f 	isb	sy
 8015b10:	f3bf 8f4f 	dsb	sy
 8015b14:	627b      	str	r3, [r7, #36]	; 0x24
 8015b16:	e7fe      	b.n	8015b16 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d103      	bne.n	8015b26 <xQueueGenericReceive+0x3e>
 8015b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d101      	bne.n	8015b2a <xQueueGenericReceive+0x42>
 8015b26:	2301      	movs	r3, #1
 8015b28:	e000      	b.n	8015b2c <xQueueGenericReceive+0x44>
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d109      	bne.n	8015b44 <xQueueGenericReceive+0x5c>
 8015b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b34:	f383 8811 	msr	BASEPRI, r3
 8015b38:	f3bf 8f6f 	isb	sy
 8015b3c:	f3bf 8f4f 	dsb	sy
 8015b40:	623b      	str	r3, [r7, #32]
 8015b42:	e7fe      	b.n	8015b42 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015b44:	f001 f87e 	bl	8016c44 <xTaskGetSchedulerState>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d102      	bne.n	8015b54 <xQueueGenericReceive+0x6c>
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d101      	bne.n	8015b58 <xQueueGenericReceive+0x70>
 8015b54:	2301      	movs	r3, #1
 8015b56:	e000      	b.n	8015b5a <xQueueGenericReceive+0x72>
 8015b58:	2300      	movs	r3, #0
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d109      	bne.n	8015b72 <xQueueGenericReceive+0x8a>
 8015b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b62:	f383 8811 	msr	BASEPRI, r3
 8015b66:	f3bf 8f6f 	isb	sy
 8015b6a:	f3bf 8f4f 	dsb	sy
 8015b6e:	61fb      	str	r3, [r7, #28]
 8015b70:	e7fe      	b.n	8015b70 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8015b72:	f7ff f9c5 	bl	8014f00 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d046      	beq.n	8015c10 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8015b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b84:	68db      	ldr	r3, [r3, #12]
 8015b86:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015b88:	68b9      	ldr	r1, [r7, #8]
 8015b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b8c:	f000 f9fa 	bl	8015f84 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8015b90:	683b      	ldr	r3, [r7, #0]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d121      	bne.n	8015bda <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8015b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b98:	1e5a      	subs	r2, r3, #1
 8015b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b9c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d104      	bne.n	8015bb0 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8015ba6:	f001 f965 	bl	8016e74 <pvTaskIncrementMutexHeldCount>
 8015baa:	4602      	mov	r2, r0
 8015bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bae:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb2:	691b      	ldr	r3, [r3, #16]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d027      	beq.n	8015c08 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bba:	3310      	adds	r3, #16
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f000 fe87 	bl	80168d0 <xTaskRemoveFromEventList>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d01f      	beq.n	8015c08 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8015bc8:	4b4f      	ldr	r3, [pc, #316]	; (8015d08 <xQueueGenericReceive+0x220>)
 8015bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bce:	601a      	str	r2, [r3, #0]
 8015bd0:	f3bf 8f4f 	dsb	sy
 8015bd4:	f3bf 8f6f 	isb	sy
 8015bd8:	e016      	b.n	8015c08 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8015bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015bde:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d00f      	beq.n	8015c08 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bea:	3324      	adds	r3, #36	; 0x24
 8015bec:	4618      	mov	r0, r3
 8015bee:	f000 fe6f 	bl	80168d0 <xTaskRemoveFromEventList>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d007      	beq.n	8015c08 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8015bf8:	4b43      	ldr	r3, [pc, #268]	; (8015d08 <xQueueGenericReceive+0x220>)
 8015bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bfe:	601a      	str	r2, [r3, #0]
 8015c00:	f3bf 8f4f 	dsb	sy
 8015c04:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8015c08:	f7ff f9a8 	bl	8014f5c <vPortExitCritical>
				return pdPASS;
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	e077      	b.n	8015d00 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d103      	bne.n	8015c1e <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015c16:	f7ff f9a1 	bl	8014f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	e070      	b.n	8015d00 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d106      	bne.n	8015c32 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8015c24:	f107 0314 	add.w	r3, r7, #20
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f000 feb3 	bl	8016994 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015c2e:	2301      	movs	r3, #1
 8015c30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015c32:	f7ff f993 	bl	8014f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015c36:	f000 fc29 	bl	801648c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015c3a:	f7ff f961 	bl	8014f00 <vPortEnterCritical>
 8015c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c44:	b25b      	sxtb	r3, r3
 8015c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c4a:	d103      	bne.n	8015c54 <xQueueGenericReceive+0x16c>
 8015c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c4e:	2200      	movs	r2, #0
 8015c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c5a:	b25b      	sxtb	r3, r3
 8015c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c60:	d103      	bne.n	8015c6a <xQueueGenericReceive+0x182>
 8015c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c64:	2200      	movs	r2, #0
 8015c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015c6a:	f7ff f977 	bl	8014f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015c6e:	1d3a      	adds	r2, r7, #4
 8015c70:	f107 0314 	add.w	r3, r7, #20
 8015c74:	4611      	mov	r1, r2
 8015c76:	4618      	mov	r0, r3
 8015c78:	f000 feb0 	bl	80169dc <xTaskCheckForTimeOut>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d131      	bne.n	8015ce6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015c82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c84:	f000 f9f6 	bl	8016074 <prvIsQueueEmpty>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d025      	beq.n	8015cda <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d108      	bne.n	8015ca8 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8015c96:	f7ff f933 	bl	8014f00 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8015c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c9c:	685b      	ldr	r3, [r3, #4]
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f000 ffee 	bl	8016c80 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8015ca4:	f7ff f95a 	bl	8014f5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015caa:	3324      	adds	r3, #36	; 0x24
 8015cac:	687a      	ldr	r2, [r7, #4]
 8015cae:	4611      	mov	r1, r2
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f000 fde9 	bl	8016888 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cb8:	f000 f98a 	bl	8015fd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015cbc:	f000 fbf4 	bl	80164a8 <xTaskResumeAll>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	f47f af55 	bne.w	8015b72 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8015cc8:	4b0f      	ldr	r3, [pc, #60]	; (8015d08 <xQueueGenericReceive+0x220>)
 8015cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cce:	601a      	str	r2, [r3, #0]
 8015cd0:	f3bf 8f4f 	dsb	sy
 8015cd4:	f3bf 8f6f 	isb	sy
 8015cd8:	e74b      	b.n	8015b72 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015cda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cdc:	f000 f978 	bl	8015fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015ce0:	f000 fbe2 	bl	80164a8 <xTaskResumeAll>
 8015ce4:	e745      	b.n	8015b72 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8015ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ce8:	f000 f972 	bl	8015fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015cec:	f000 fbdc 	bl	80164a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cf2:	f000 f9bf 	bl	8016074 <prvIsQueueEmpty>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	f43f af3a 	beq.w	8015b72 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015cfe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8015d00:	4618      	mov	r0, r3
 8015d02:	3738      	adds	r7, #56	; 0x38
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}
 8015d08:	e000ed04 	.word	0xe000ed04

08015d0c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b08e      	sub	sp, #56	; 0x38
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d109      	bne.n	8015d36 <xQueueReceiveFromISR+0x2a>
 8015d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d26:	f383 8811 	msr	BASEPRI, r3
 8015d2a:	f3bf 8f6f 	isb	sy
 8015d2e:	f3bf 8f4f 	dsb	sy
 8015d32:	623b      	str	r3, [r7, #32]
 8015d34:	e7fe      	b.n	8015d34 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d103      	bne.n	8015d44 <xQueueReceiveFromISR+0x38>
 8015d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d101      	bne.n	8015d48 <xQueueReceiveFromISR+0x3c>
 8015d44:	2301      	movs	r3, #1
 8015d46:	e000      	b.n	8015d4a <xQueueReceiveFromISR+0x3e>
 8015d48:	2300      	movs	r3, #0
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d109      	bne.n	8015d62 <xQueueReceiveFromISR+0x56>
 8015d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d52:	f383 8811 	msr	BASEPRI, r3
 8015d56:	f3bf 8f6f 	isb	sy
 8015d5a:	f3bf 8f4f 	dsb	sy
 8015d5e:	61fb      	str	r3, [r7, #28]
 8015d60:	e7fe      	b.n	8015d60 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d62:	f7ff f99f 	bl	80150a4 <vPortValidateInterruptPriority>
	__asm volatile
 8015d66:	f3ef 8211 	mrs	r2, BASEPRI
 8015d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d6e:	f383 8811 	msr	BASEPRI, r3
 8015d72:	f3bf 8f6f 	isb	sy
 8015d76:	f3bf 8f4f 	dsb	sy
 8015d7a:	61ba      	str	r2, [r7, #24]
 8015d7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015d7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015d80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d02f      	beq.n	8015dee <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015d98:	68b9      	ldr	r1, [r7, #8]
 8015d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d9c:	f000 f8f2 	bl	8015f84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8015da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da2:	1e5a      	subs	r2, r3, #1
 8015da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015da8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015db0:	d112      	bne.n	8015dd8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db4:	691b      	ldr	r3, [r3, #16]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d016      	beq.n	8015de8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbc:	3310      	adds	r3, #16
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f000 fd86 	bl	80168d0 <xTaskRemoveFromEventList>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d00e      	beq.n	8015de8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d00b      	beq.n	8015de8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2201      	movs	r2, #1
 8015dd4:	601a      	str	r2, [r3, #0]
 8015dd6:	e007      	b.n	8015de8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ddc:	3301      	adds	r3, #1
 8015dde:	b2db      	uxtb	r3, r3
 8015de0:	b25a      	sxtb	r2, r3
 8015de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015de8:	2301      	movs	r3, #1
 8015dea:	637b      	str	r3, [r7, #52]	; 0x34
 8015dec:	e001      	b.n	8015df2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8015dee:	2300      	movs	r3, #0
 8015df0:	637b      	str	r3, [r7, #52]	; 0x34
 8015df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3738      	adds	r7, #56	; 0x38
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}

08015e06 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015e06:	b580      	push	{r7, lr}
 8015e08:	b084      	sub	sp, #16
 8015e0a:	af00      	add	r7, sp, #0
 8015e0c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d109      	bne.n	8015e28 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8015e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e18:	f383 8811 	msr	BASEPRI, r3
 8015e1c:	f3bf 8f6f 	isb	sy
 8015e20:	f3bf 8f4f 	dsb	sy
 8015e24:	60bb      	str	r3, [r7, #8]
 8015e26:	e7fe      	b.n	8015e26 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8015e28:	f7ff f86a 	bl	8014f00 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e30:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015e32:	f7ff f893 	bl	8014f5c <vPortExitCritical>

	return uxReturn;
 8015e36:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3710      	adds	r7, #16
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}

08015e40 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8015e40:	b480      	push	{r7}
 8015e42:	b085      	sub	sp, #20
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d109      	bne.n	8015e62 <uxQueueMessagesWaitingFromISR+0x22>
 8015e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e52:	f383 8811 	msr	BASEPRI, r3
 8015e56:	f3bf 8f6f 	isb	sy
 8015e5a:	f3bf 8f4f 	dsb	sy
 8015e5e:	60bb      	str	r3, [r7, #8]
 8015e60:	e7fe      	b.n	8015e60 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e66:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8015e68:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3714      	adds	r7, #20
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e74:	4770      	bx	lr

08015e76 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015e76:	b580      	push	{r7, lr}
 8015e78:	b084      	sub	sp, #16
 8015e7a:	af00      	add	r7, sp, #0
 8015e7c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d109      	bne.n	8015e9c <vQueueDelete+0x26>
 8015e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e8c:	f383 8811 	msr	BASEPRI, r3
 8015e90:	f3bf 8f6f 	isb	sy
 8015e94:	f3bf 8f4f 	dsb	sy
 8015e98:	60bb      	str	r3, [r7, #8]
 8015e9a:	e7fe      	b.n	8015e9a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015e9c:	68f8      	ldr	r0, [r7, #12]
 8015e9e:	f000 f917 	bl	80160d0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8015ea2:	68f8      	ldr	r0, [r7, #12]
 8015ea4:	f7ff f9fe 	bl	80152a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015ea8:	bf00      	nop
 8015eaa:	3710      	adds	r7, #16
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}

08015eb0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b086      	sub	sp, #24
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	60b9      	str	r1, [r7, #8]
 8015eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ec4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d10d      	bne.n	8015eea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d14d      	bne.n	8015f72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	685b      	ldr	r3, [r3, #4]
 8015eda:	4618      	mov	r0, r3
 8015edc:	f000 ff46 	bl	8016d6c <xTaskPriorityDisinherit>
 8015ee0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	605a      	str	r2, [r3, #4]
 8015ee8:	e043      	b.n	8015f72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d119      	bne.n	8015f24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	6898      	ldr	r0, [r3, #8]
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ef8:	461a      	mov	r2, r3
 8015efa:	68b9      	ldr	r1, [r7, #8]
 8015efc:	f010 f86b 	bl	8025fd6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	689a      	ldr	r2, [r3, #8]
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f08:	441a      	add	r2, r3
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	689a      	ldr	r2, [r3, #8]
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	685b      	ldr	r3, [r3, #4]
 8015f16:	429a      	cmp	r2, r3
 8015f18:	d32b      	bcc.n	8015f72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	681a      	ldr	r2, [r3, #0]
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	609a      	str	r2, [r3, #8]
 8015f22:	e026      	b.n	8015f72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	68d8      	ldr	r0, [r3, #12]
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	68b9      	ldr	r1, [r7, #8]
 8015f30:	f010 f851 	bl	8025fd6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	68da      	ldr	r2, [r3, #12]
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f3c:	425b      	negs	r3, r3
 8015f3e:	441a      	add	r2, r3
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	68da      	ldr	r2, [r3, #12]
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d207      	bcs.n	8015f60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	685a      	ldr	r2, [r3, #4]
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f58:	425b      	negs	r3, r3
 8015f5a:	441a      	add	r2, r3
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2b02      	cmp	r3, #2
 8015f64:	d105      	bne.n	8015f72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f66:	693b      	ldr	r3, [r7, #16]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d002      	beq.n	8015f72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015f6c:	693b      	ldr	r3, [r7, #16]
 8015f6e:	3b01      	subs	r3, #1
 8015f70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8015f72:	693b      	ldr	r3, [r7, #16]
 8015f74:	1c5a      	adds	r2, r3, #1
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015f7a:	697b      	ldr	r3, [r7, #20]
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	3718      	adds	r7, #24
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}

08015f84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b082      	sub	sp, #8
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
 8015f8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d018      	beq.n	8015fc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	68da      	ldr	r2, [r3, #12]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f9e:	441a      	add	r2, r3
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	68da      	ldr	r2, [r3, #12]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	685b      	ldr	r3, [r3, #4]
 8015fac:	429a      	cmp	r2, r3
 8015fae:	d303      	bcc.n	8015fb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	681a      	ldr	r2, [r3, #0]
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	68d9      	ldr	r1, [r3, #12]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fc0:	461a      	mov	r2, r3
 8015fc2:	6838      	ldr	r0, [r7, #0]
 8015fc4:	f010 f807 	bl	8025fd6 <memcpy>
	}
}
 8015fc8:	bf00      	nop
 8015fca:	3708      	adds	r7, #8
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b084      	sub	sp, #16
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015fd8:	f7fe ff92 	bl	8014f00 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fe2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015fe4:	e011      	b.n	801600a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d012      	beq.n	8016014 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	3324      	adds	r3, #36	; 0x24
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f000 fc6c 	bl	80168d0 <xTaskRemoveFromEventList>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d001      	beq.n	8016002 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015ffe:	f000 fd4b 	bl	8016a98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016002:	7bfb      	ldrb	r3, [r7, #15]
 8016004:	3b01      	subs	r3, #1
 8016006:	b2db      	uxtb	r3, r3
 8016008:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801600a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801600e:	2b00      	cmp	r3, #0
 8016010:	dce9      	bgt.n	8015fe6 <prvUnlockQueue+0x16>
 8016012:	e000      	b.n	8016016 <prvUnlockQueue+0x46>
					break;
 8016014:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	22ff      	movs	r2, #255	; 0xff
 801601a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801601e:	f7fe ff9d 	bl	8014f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016022:	f7fe ff6d 	bl	8014f00 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801602c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801602e:	e011      	b.n	8016054 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	691b      	ldr	r3, [r3, #16]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d012      	beq.n	801605e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	3310      	adds	r3, #16
 801603c:	4618      	mov	r0, r3
 801603e:	f000 fc47 	bl	80168d0 <xTaskRemoveFromEventList>
 8016042:	4603      	mov	r3, r0
 8016044:	2b00      	cmp	r3, #0
 8016046:	d001      	beq.n	801604c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016048:	f000 fd26 	bl	8016a98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801604c:	7bbb      	ldrb	r3, [r7, #14]
 801604e:	3b01      	subs	r3, #1
 8016050:	b2db      	uxtb	r3, r3
 8016052:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016058:	2b00      	cmp	r3, #0
 801605a:	dce9      	bgt.n	8016030 <prvUnlockQueue+0x60>
 801605c:	e000      	b.n	8016060 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801605e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	22ff      	movs	r2, #255	; 0xff
 8016064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016068:	f7fe ff78 	bl	8014f5c <vPortExitCritical>
}
 801606c:	bf00      	nop
 801606e:	3710      	adds	r7, #16
 8016070:	46bd      	mov	sp, r7
 8016072:	bd80      	pop	{r7, pc}

08016074 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b084      	sub	sp, #16
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801607c:	f7fe ff40 	bl	8014f00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016084:	2b00      	cmp	r3, #0
 8016086:	d102      	bne.n	801608e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016088:	2301      	movs	r3, #1
 801608a:	60fb      	str	r3, [r7, #12]
 801608c:	e001      	b.n	8016092 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801608e:	2300      	movs	r3, #0
 8016090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016092:	f7fe ff63 	bl	8014f5c <vPortExitCritical>

	return xReturn;
 8016096:	68fb      	ldr	r3, [r7, #12]
}
 8016098:	4618      	mov	r0, r3
 801609a:	3710      	adds	r7, #16
 801609c:	46bd      	mov	sp, r7
 801609e:	bd80      	pop	{r7, pc}

080160a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b084      	sub	sp, #16
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80160a8:	f7fe ff2a 	bl	8014f00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d102      	bne.n	80160be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80160b8:	2301      	movs	r3, #1
 80160ba:	60fb      	str	r3, [r7, #12]
 80160bc:	e001      	b.n	80160c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80160be:	2300      	movs	r3, #0
 80160c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80160c2:	f7fe ff4b 	bl	8014f5c <vPortExitCritical>

	return xReturn;
 80160c6:	68fb      	ldr	r3, [r7, #12]
}
 80160c8:	4618      	mov	r0, r3
 80160ca:	3710      	adds	r7, #16
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd80      	pop	{r7, pc}

080160d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80160d0:	b480      	push	{r7}
 80160d2:	b085      	sub	sp, #20
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160d8:	2300      	movs	r3, #0
 80160da:	60fb      	str	r3, [r7, #12]
 80160dc:	e016      	b.n	801610c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80160de:	4a10      	ldr	r2, [pc, #64]	; (8016120 <vQueueUnregisterQueue+0x50>)
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	00db      	lsls	r3, r3, #3
 80160e4:	4413      	add	r3, r2
 80160e6:	685a      	ldr	r2, [r3, #4]
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	429a      	cmp	r2, r3
 80160ec:	d10b      	bne.n	8016106 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80160ee:	4a0c      	ldr	r2, [pc, #48]	; (8016120 <vQueueUnregisterQueue+0x50>)
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	2100      	movs	r1, #0
 80160f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80160f8:	4a09      	ldr	r2, [pc, #36]	; (8016120 <vQueueUnregisterQueue+0x50>)
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	00db      	lsls	r3, r3, #3
 80160fe:	4413      	add	r3, r2
 8016100:	2200      	movs	r2, #0
 8016102:	605a      	str	r2, [r3, #4]
				break;
 8016104:	e005      	b.n	8016112 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	3301      	adds	r3, #1
 801610a:	60fb      	str	r3, [r7, #12]
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	2b0f      	cmp	r3, #15
 8016110:	d9e5      	bls.n	80160de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016112:	bf00      	nop
 8016114:	3714      	adds	r7, #20
 8016116:	46bd      	mov	sp, r7
 8016118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611c:	4770      	bx	lr
 801611e:	bf00      	nop
 8016120:	20004574 	.word	0x20004574

08016124 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016124:	b580      	push	{r7, lr}
 8016126:	b08c      	sub	sp, #48	; 0x30
 8016128:	af04      	add	r7, sp, #16
 801612a:	60f8      	str	r0, [r7, #12]
 801612c:	60b9      	str	r1, [r7, #8]
 801612e:	603b      	str	r3, [r7, #0]
 8016130:	4613      	mov	r3, r2
 8016132:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016134:	88fb      	ldrh	r3, [r7, #6]
 8016136:	009b      	lsls	r3, r3, #2
 8016138:	4618      	mov	r0, r3
 801613a:	f7fe fff1 	bl	8015120 <pvPortMalloc>
 801613e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016140:	697b      	ldr	r3, [r7, #20]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d00e      	beq.n	8016164 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8016146:	2060      	movs	r0, #96	; 0x60
 8016148:	f7fe ffea 	bl	8015120 <pvPortMalloc>
 801614c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801614e:	69fb      	ldr	r3, [r7, #28]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d003      	beq.n	801615c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016154:	69fb      	ldr	r3, [r7, #28]
 8016156:	697a      	ldr	r2, [r7, #20]
 8016158:	631a      	str	r2, [r3, #48]	; 0x30
 801615a:	e005      	b.n	8016168 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801615c:	6978      	ldr	r0, [r7, #20]
 801615e:	f7ff f8a1 	bl	80152a4 <vPortFree>
 8016162:	e001      	b.n	8016168 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016164:	2300      	movs	r3, #0
 8016166:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016168:	69fb      	ldr	r3, [r7, #28]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d013      	beq.n	8016196 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801616e:	88fa      	ldrh	r2, [r7, #6]
 8016170:	2300      	movs	r3, #0
 8016172:	9303      	str	r3, [sp, #12]
 8016174:	69fb      	ldr	r3, [r7, #28]
 8016176:	9302      	str	r3, [sp, #8]
 8016178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801617a:	9301      	str	r3, [sp, #4]
 801617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801617e:	9300      	str	r3, [sp, #0]
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	68b9      	ldr	r1, [r7, #8]
 8016184:	68f8      	ldr	r0, [r7, #12]
 8016186:	f000 f80e 	bl	80161a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801618a:	69f8      	ldr	r0, [r7, #28]
 801618c:	f000 f894 	bl	80162b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016190:	2301      	movs	r3, #1
 8016192:	61bb      	str	r3, [r7, #24]
 8016194:	e002      	b.n	801619c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016196:	f04f 33ff 	mov.w	r3, #4294967295
 801619a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801619c:	69bb      	ldr	r3, [r7, #24]
	}
 801619e:	4618      	mov	r0, r3
 80161a0:	3720      	adds	r7, #32
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bd80      	pop	{r7, pc}

080161a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80161a6:	b580      	push	{r7, lr}
 80161a8:	b088      	sub	sp, #32
 80161aa:	af00      	add	r7, sp, #0
 80161ac:	60f8      	str	r0, [r7, #12]
 80161ae:	60b9      	str	r1, [r7, #8]
 80161b0:	607a      	str	r2, [r7, #4]
 80161b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80161b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	009b      	lsls	r3, r3, #2
 80161bc:	461a      	mov	r2, r3
 80161be:	21a5      	movs	r1, #165	; 0xa5
 80161c0:	f00f ff14 	bl	8025fec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80161c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80161ce:	3b01      	subs	r3, #1
 80161d0:	009b      	lsls	r3, r3, #2
 80161d2:	4413      	add	r3, r2
 80161d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80161d6:	69bb      	ldr	r3, [r7, #24]
 80161d8:	f023 0307 	bic.w	r3, r3, #7
 80161dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80161de:	69bb      	ldr	r3, [r7, #24]
 80161e0:	f003 0307 	and.w	r3, r3, #7
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d009      	beq.n	80161fc <prvInitialiseNewTask+0x56>
 80161e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ec:	f383 8811 	msr	BASEPRI, r3
 80161f0:	f3bf 8f6f 	isb	sy
 80161f4:	f3bf 8f4f 	dsb	sy
 80161f8:	617b      	str	r3, [r7, #20]
 80161fa:	e7fe      	b.n	80161fa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80161fc:	2300      	movs	r3, #0
 80161fe:	61fb      	str	r3, [r7, #28]
 8016200:	e012      	b.n	8016228 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016202:	68ba      	ldr	r2, [r7, #8]
 8016204:	69fb      	ldr	r3, [r7, #28]
 8016206:	4413      	add	r3, r2
 8016208:	7819      	ldrb	r1, [r3, #0]
 801620a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801620c:	69fb      	ldr	r3, [r7, #28]
 801620e:	4413      	add	r3, r2
 8016210:	3334      	adds	r3, #52	; 0x34
 8016212:	460a      	mov	r2, r1
 8016214:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8016216:	68ba      	ldr	r2, [r7, #8]
 8016218:	69fb      	ldr	r3, [r7, #28]
 801621a:	4413      	add	r3, r2
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d006      	beq.n	8016230 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016222:	69fb      	ldr	r3, [r7, #28]
 8016224:	3301      	adds	r3, #1
 8016226:	61fb      	str	r3, [r7, #28]
 8016228:	69fb      	ldr	r3, [r7, #28]
 801622a:	2b0f      	cmp	r3, #15
 801622c:	d9e9      	bls.n	8016202 <prvInitialiseNewTask+0x5c>
 801622e:	e000      	b.n	8016232 <prvInitialiseNewTask+0x8c>
		{
			break;
 8016230:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016234:	2200      	movs	r2, #0
 8016236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801623c:	2b06      	cmp	r3, #6
 801623e:	d901      	bls.n	8016244 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016240:	2306      	movs	r3, #6
 8016242:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016248:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801624c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801624e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016252:	2200      	movs	r2, #0
 8016254:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016258:	3304      	adds	r3, #4
 801625a:	4618      	mov	r0, r3
 801625c:	f7fe fcb7 	bl	8014bce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016262:	3318      	adds	r3, #24
 8016264:	4618      	mov	r0, r3
 8016266:	f7fe fcb2 	bl	8014bce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801626c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801626e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016272:	f1c3 0207 	rsb	r2, r3, #7
 8016276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016278:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801627c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801627e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8016280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016282:	2200      	movs	r2, #0
 8016284:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016288:	2200      	movs	r2, #0
 801628a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801628e:	2200      	movs	r2, #0
 8016290:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016294:	683a      	ldr	r2, [r7, #0]
 8016296:	68f9      	ldr	r1, [r7, #12]
 8016298:	69b8      	ldr	r0, [r7, #24]
 801629a:	f7fe fd2d 	bl	8014cf8 <pxPortInitialiseStack>
 801629e:	4602      	mov	r2, r0
 80162a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80162a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d002      	beq.n	80162b0 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80162aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162b0:	bf00      	nop
 80162b2:	3720      	adds	r7, #32
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd80      	pop	{r7, pc}

080162b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b082      	sub	sp, #8
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80162c0:	f7fe fe1e 	bl	8014f00 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80162c4:	4b2c      	ldr	r3, [pc, #176]	; (8016378 <prvAddNewTaskToReadyList+0xc0>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	3301      	adds	r3, #1
 80162ca:	4a2b      	ldr	r2, [pc, #172]	; (8016378 <prvAddNewTaskToReadyList+0xc0>)
 80162cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80162ce:	4b2b      	ldr	r3, [pc, #172]	; (801637c <prvAddNewTaskToReadyList+0xc4>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d109      	bne.n	80162ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80162d6:	4a29      	ldr	r2, [pc, #164]	; (801637c <prvAddNewTaskToReadyList+0xc4>)
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80162dc:	4b26      	ldr	r3, [pc, #152]	; (8016378 <prvAddNewTaskToReadyList+0xc0>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	d110      	bne.n	8016306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80162e4:	f000 fbfc 	bl	8016ae0 <prvInitialiseTaskLists>
 80162e8:	e00d      	b.n	8016306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80162ea:	4b25      	ldr	r3, [pc, #148]	; (8016380 <prvAddNewTaskToReadyList+0xc8>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d109      	bne.n	8016306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80162f2:	4b22      	ldr	r3, [pc, #136]	; (801637c <prvAddNewTaskToReadyList+0xc4>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162fc:	429a      	cmp	r2, r3
 80162fe:	d802      	bhi.n	8016306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016300:	4a1e      	ldr	r2, [pc, #120]	; (801637c <prvAddNewTaskToReadyList+0xc4>)
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016306:	4b1f      	ldr	r3, [pc, #124]	; (8016384 <prvAddNewTaskToReadyList+0xcc>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	3301      	adds	r3, #1
 801630c:	4a1d      	ldr	r2, [pc, #116]	; (8016384 <prvAddNewTaskToReadyList+0xcc>)
 801630e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016310:	4b1c      	ldr	r3, [pc, #112]	; (8016384 <prvAddNewTaskToReadyList+0xcc>)
 8016312:	681a      	ldr	r2, [r3, #0]
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801631c:	2201      	movs	r2, #1
 801631e:	409a      	lsls	r2, r3
 8016320:	4b19      	ldr	r3, [pc, #100]	; (8016388 <prvAddNewTaskToReadyList+0xd0>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	4313      	orrs	r3, r2
 8016326:	4a18      	ldr	r2, [pc, #96]	; (8016388 <prvAddNewTaskToReadyList+0xd0>)
 8016328:	6013      	str	r3, [r2, #0]
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801632e:	4613      	mov	r3, r2
 8016330:	009b      	lsls	r3, r3, #2
 8016332:	4413      	add	r3, r2
 8016334:	009b      	lsls	r3, r3, #2
 8016336:	4a15      	ldr	r2, [pc, #84]	; (801638c <prvAddNewTaskToReadyList+0xd4>)
 8016338:	441a      	add	r2, r3
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	3304      	adds	r3, #4
 801633e:	4619      	mov	r1, r3
 8016340:	4610      	mov	r0, r2
 8016342:	f7fe fc51 	bl	8014be8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016346:	f7fe fe09 	bl	8014f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801634a:	4b0d      	ldr	r3, [pc, #52]	; (8016380 <prvAddNewTaskToReadyList+0xc8>)
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d00e      	beq.n	8016370 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016352:	4b0a      	ldr	r3, [pc, #40]	; (801637c <prvAddNewTaskToReadyList+0xc4>)
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801635c:	429a      	cmp	r2, r3
 801635e:	d207      	bcs.n	8016370 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016360:	4b0b      	ldr	r3, [pc, #44]	; (8016390 <prvAddNewTaskToReadyList+0xd8>)
 8016362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016366:	601a      	str	r2, [r3, #0]
 8016368:	f3bf 8f4f 	dsb	sy
 801636c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016370:	bf00      	nop
 8016372:	3708      	adds	r7, #8
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	20003f58 	.word	0x20003f58
 801637c:	20003e58 	.word	0x20003e58
 8016380:	20003f64 	.word	0x20003f64
 8016384:	20003f74 	.word	0x20003f74
 8016388:	20003f60 	.word	0x20003f60
 801638c:	20003e5c 	.word	0x20003e5c
 8016390:	e000ed04 	.word	0xe000ed04

08016394 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016394:	b580      	push	{r7, lr}
 8016396:	b084      	sub	sp, #16
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801639c:	2300      	movs	r3, #0
 801639e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d016      	beq.n	80163d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80163a6:	4b13      	ldr	r3, [pc, #76]	; (80163f4 <vTaskDelay+0x60>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d009      	beq.n	80163c2 <vTaskDelay+0x2e>
 80163ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163b2:	f383 8811 	msr	BASEPRI, r3
 80163b6:	f3bf 8f6f 	isb	sy
 80163ba:	f3bf 8f4f 	dsb	sy
 80163be:	60bb      	str	r3, [r7, #8]
 80163c0:	e7fe      	b.n	80163c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80163c2:	f000 f863 	bl	801648c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80163c6:	2100      	movs	r1, #0
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	f000 fd67 	bl	8016e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80163ce:	f000 f86b 	bl	80164a8 <xTaskResumeAll>
 80163d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d107      	bne.n	80163ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80163da:	4b07      	ldr	r3, [pc, #28]	; (80163f8 <vTaskDelay+0x64>)
 80163dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163e0:	601a      	str	r2, [r3, #0]
 80163e2:	f3bf 8f4f 	dsb	sy
 80163e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80163ea:	bf00      	nop
 80163ec:	3710      	adds	r7, #16
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	20003f80 	.word	0x20003f80
 80163f8:	e000ed04 	.word	0xe000ed04

080163fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b086      	sub	sp, #24
 8016400:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8016402:	4b1c      	ldr	r3, [pc, #112]	; (8016474 <vTaskStartScheduler+0x78>)
 8016404:	9301      	str	r3, [sp, #4]
 8016406:	2300      	movs	r3, #0
 8016408:	9300      	str	r3, [sp, #0]
 801640a:	2300      	movs	r3, #0
 801640c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016410:	4919      	ldr	r1, [pc, #100]	; (8016478 <vTaskStartScheduler+0x7c>)
 8016412:	481a      	ldr	r0, [pc, #104]	; (801647c <vTaskStartScheduler+0x80>)
 8016414:	f7ff fe86 	bl	8016124 <xTaskCreate>
 8016418:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	2b01      	cmp	r3, #1
 801641e:	d117      	bne.n	8016450 <vTaskStartScheduler+0x54>
 8016420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016424:	f383 8811 	msr	BASEPRI, r3
 8016428:	f3bf 8f6f 	isb	sy
 801642c:	f3bf 8f4f 	dsb	sy
 8016430:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016432:	4b13      	ldr	r3, [pc, #76]	; (8016480 <vTaskStartScheduler+0x84>)
 8016434:	f04f 32ff 	mov.w	r2, #4294967295
 8016438:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801643a:	4b12      	ldr	r3, [pc, #72]	; (8016484 <vTaskStartScheduler+0x88>)
 801643c:	2201      	movs	r2, #1
 801643e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8016440:	4b11      	ldr	r3, [pc, #68]	; (8016488 <vTaskStartScheduler+0x8c>)
 8016442:	2200      	movs	r2, #0
 8016444:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8016446:	f00d ffd1 	bl	80243ec <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801644a:	f7fe fccd 	bl	8014de8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801644e:	e00d      	b.n	801646c <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016456:	d109      	bne.n	801646c <vTaskStartScheduler+0x70>
 8016458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801645c:	f383 8811 	msr	BASEPRI, r3
 8016460:	f3bf 8f6f 	isb	sy
 8016464:	f3bf 8f4f 	dsb	sy
 8016468:	607b      	str	r3, [r7, #4]
 801646a:	e7fe      	b.n	801646a <vTaskStartScheduler+0x6e>
}
 801646c:	bf00      	nop
 801646e:	3710      	adds	r7, #16
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	20003f7c 	.word	0x20003f7c
 8016478:	08026238 	.word	0x08026238
 801647c:	08016ab1 	.word	0x08016ab1
 8016480:	20003f78 	.word	0x20003f78
 8016484:	20003f64 	.word	0x20003f64
 8016488:	20003f5c 	.word	0x20003f5c

0801648c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801648c:	b480      	push	{r7}
 801648e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016490:	4b04      	ldr	r3, [pc, #16]	; (80164a4 <vTaskSuspendAll+0x18>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	3301      	adds	r3, #1
 8016496:	4a03      	ldr	r2, [pc, #12]	; (80164a4 <vTaskSuspendAll+0x18>)
 8016498:	6013      	str	r3, [r2, #0]
}
 801649a:	bf00      	nop
 801649c:	46bd      	mov	sp, r7
 801649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a2:	4770      	bx	lr
 80164a4:	20003f80 	.word	0x20003f80

080164a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b084      	sub	sp, #16
 80164ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80164ae:	2300      	movs	r3, #0
 80164b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80164b2:	2300      	movs	r3, #0
 80164b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80164b6:	4b41      	ldr	r3, [pc, #260]	; (80165bc <xTaskResumeAll+0x114>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d109      	bne.n	80164d2 <xTaskResumeAll+0x2a>
 80164be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c2:	f383 8811 	msr	BASEPRI, r3
 80164c6:	f3bf 8f6f 	isb	sy
 80164ca:	f3bf 8f4f 	dsb	sy
 80164ce:	603b      	str	r3, [r7, #0]
 80164d0:	e7fe      	b.n	80164d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80164d2:	f7fe fd15 	bl	8014f00 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80164d6:	4b39      	ldr	r3, [pc, #228]	; (80165bc <xTaskResumeAll+0x114>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	3b01      	subs	r3, #1
 80164dc:	4a37      	ldr	r2, [pc, #220]	; (80165bc <xTaskResumeAll+0x114>)
 80164de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80164e0:	4b36      	ldr	r3, [pc, #216]	; (80165bc <xTaskResumeAll+0x114>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d161      	bne.n	80165ac <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80164e8:	4b35      	ldr	r3, [pc, #212]	; (80165c0 <xTaskResumeAll+0x118>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d05d      	beq.n	80165ac <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80164f0:	e02e      	b.n	8016550 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80164f2:	4b34      	ldr	r3, [pc, #208]	; (80165c4 <xTaskResumeAll+0x11c>)
 80164f4:	68db      	ldr	r3, [r3, #12]
 80164f6:	68db      	ldr	r3, [r3, #12]
 80164f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	3318      	adds	r3, #24
 80164fe:	4618      	mov	r0, r3
 8016500:	f7fe fbcf 	bl	8014ca2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	3304      	adds	r3, #4
 8016508:	4618      	mov	r0, r3
 801650a:	f7fe fbca 	bl	8014ca2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016512:	2201      	movs	r2, #1
 8016514:	409a      	lsls	r2, r3
 8016516:	4b2c      	ldr	r3, [pc, #176]	; (80165c8 <xTaskResumeAll+0x120>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	4313      	orrs	r3, r2
 801651c:	4a2a      	ldr	r2, [pc, #168]	; (80165c8 <xTaskResumeAll+0x120>)
 801651e:	6013      	str	r3, [r2, #0]
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016524:	4613      	mov	r3, r2
 8016526:	009b      	lsls	r3, r3, #2
 8016528:	4413      	add	r3, r2
 801652a:	009b      	lsls	r3, r3, #2
 801652c:	4a27      	ldr	r2, [pc, #156]	; (80165cc <xTaskResumeAll+0x124>)
 801652e:	441a      	add	r2, r3
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	3304      	adds	r3, #4
 8016534:	4619      	mov	r1, r3
 8016536:	4610      	mov	r0, r2
 8016538:	f7fe fb56 	bl	8014be8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016540:	4b23      	ldr	r3, [pc, #140]	; (80165d0 <xTaskResumeAll+0x128>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016546:	429a      	cmp	r2, r3
 8016548:	d302      	bcc.n	8016550 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 801654a:	4b22      	ldr	r3, [pc, #136]	; (80165d4 <xTaskResumeAll+0x12c>)
 801654c:	2201      	movs	r2, #1
 801654e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016550:	4b1c      	ldr	r3, [pc, #112]	; (80165c4 <xTaskResumeAll+0x11c>)
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d1cc      	bne.n	80164f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d001      	beq.n	8016562 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801655e:	f000 fb4b 	bl	8016bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016562:	4b1d      	ldr	r3, [pc, #116]	; (80165d8 <xTaskResumeAll+0x130>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d010      	beq.n	8016590 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801656e:	f000 f859 	bl	8016624 <xTaskIncrementTick>
 8016572:	4603      	mov	r3, r0
 8016574:	2b00      	cmp	r3, #0
 8016576:	d002      	beq.n	801657e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8016578:	4b16      	ldr	r3, [pc, #88]	; (80165d4 <xTaskResumeAll+0x12c>)
 801657a:	2201      	movs	r2, #1
 801657c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	3b01      	subs	r3, #1
 8016582:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d1f1      	bne.n	801656e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 801658a:	4b13      	ldr	r3, [pc, #76]	; (80165d8 <xTaskResumeAll+0x130>)
 801658c:	2200      	movs	r2, #0
 801658e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016590:	4b10      	ldr	r3, [pc, #64]	; (80165d4 <xTaskResumeAll+0x12c>)
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d009      	beq.n	80165ac <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016598:	2301      	movs	r3, #1
 801659a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801659c:	4b0f      	ldr	r3, [pc, #60]	; (80165dc <xTaskResumeAll+0x134>)
 801659e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165a2:	601a      	str	r2, [r3, #0]
 80165a4:	f3bf 8f4f 	dsb	sy
 80165a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80165ac:	f7fe fcd6 	bl	8014f5c <vPortExitCritical>

	return xAlreadyYielded;
 80165b0:	68bb      	ldr	r3, [r7, #8]
}
 80165b2:	4618      	mov	r0, r3
 80165b4:	3710      	adds	r7, #16
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd80      	pop	{r7, pc}
 80165ba:	bf00      	nop
 80165bc:	20003f80 	.word	0x20003f80
 80165c0:	20003f58 	.word	0x20003f58
 80165c4:	20003f18 	.word	0x20003f18
 80165c8:	20003f60 	.word	0x20003f60
 80165cc:	20003e5c 	.word	0x20003e5c
 80165d0:	20003e58 	.word	0x20003e58
 80165d4:	20003f6c 	.word	0x20003f6c
 80165d8:	20003f68 	.word	0x20003f68
 80165dc:	e000ed04 	.word	0xe000ed04

080165e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80165e0:	b480      	push	{r7}
 80165e2:	b083      	sub	sp, #12
 80165e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80165e6:	4b05      	ldr	r3, [pc, #20]	; (80165fc <xTaskGetTickCount+0x1c>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80165ec:	687b      	ldr	r3, [r7, #4]
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	370c      	adds	r7, #12
 80165f2:	46bd      	mov	sp, r7
 80165f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f8:	4770      	bx	lr
 80165fa:	bf00      	nop
 80165fc:	20003f5c 	.word	0x20003f5c

08016600 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b082      	sub	sp, #8
 8016604:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016606:	f7fe fd4d 	bl	80150a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801660a:	2300      	movs	r3, #0
 801660c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801660e:	4b04      	ldr	r3, [pc, #16]	; (8016620 <xTaskGetTickCountFromISR+0x20>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016614:	683b      	ldr	r3, [r7, #0]
}
 8016616:	4618      	mov	r0, r3
 8016618:	3708      	adds	r7, #8
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	20003f5c 	.word	0x20003f5c

08016624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b086      	sub	sp, #24
 8016628:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801662a:	2300      	movs	r3, #0
 801662c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801662e:	4b50      	ldr	r3, [pc, #320]	; (8016770 <xTaskIncrementTick+0x14c>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	2b00      	cmp	r3, #0
 8016634:	f040 808c 	bne.w	8016750 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8016638:	4b4e      	ldr	r3, [pc, #312]	; (8016774 <xTaskIncrementTick+0x150>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	3301      	adds	r3, #1
 801663e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016640:	4a4c      	ldr	r2, [pc, #304]	; (8016774 <xTaskIncrementTick+0x150>)
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8016646:	693b      	ldr	r3, [r7, #16]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d11f      	bne.n	801668c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801664c:	4b4a      	ldr	r3, [pc, #296]	; (8016778 <xTaskIncrementTick+0x154>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d009      	beq.n	801666a <xTaskIncrementTick+0x46>
 8016656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801665a:	f383 8811 	msr	BASEPRI, r3
 801665e:	f3bf 8f6f 	isb	sy
 8016662:	f3bf 8f4f 	dsb	sy
 8016666:	603b      	str	r3, [r7, #0]
 8016668:	e7fe      	b.n	8016668 <xTaskIncrementTick+0x44>
 801666a:	4b43      	ldr	r3, [pc, #268]	; (8016778 <xTaskIncrementTick+0x154>)
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	60fb      	str	r3, [r7, #12]
 8016670:	4b42      	ldr	r3, [pc, #264]	; (801677c <xTaskIncrementTick+0x158>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	4a40      	ldr	r2, [pc, #256]	; (8016778 <xTaskIncrementTick+0x154>)
 8016676:	6013      	str	r3, [r2, #0]
 8016678:	4a40      	ldr	r2, [pc, #256]	; (801677c <xTaskIncrementTick+0x158>)
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	6013      	str	r3, [r2, #0]
 801667e:	4b40      	ldr	r3, [pc, #256]	; (8016780 <xTaskIncrementTick+0x15c>)
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	3301      	adds	r3, #1
 8016684:	4a3e      	ldr	r2, [pc, #248]	; (8016780 <xTaskIncrementTick+0x15c>)
 8016686:	6013      	str	r3, [r2, #0]
 8016688:	f000 fab6 	bl	8016bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801668c:	4b3d      	ldr	r3, [pc, #244]	; (8016784 <xTaskIncrementTick+0x160>)
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	693a      	ldr	r2, [r7, #16]
 8016692:	429a      	cmp	r2, r3
 8016694:	d34d      	bcc.n	8016732 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016696:	4b38      	ldr	r3, [pc, #224]	; (8016778 <xTaskIncrementTick+0x154>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d101      	bne.n	80166a4 <xTaskIncrementTick+0x80>
 80166a0:	2301      	movs	r3, #1
 80166a2:	e000      	b.n	80166a6 <xTaskIncrementTick+0x82>
 80166a4:	2300      	movs	r3, #0
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d004      	beq.n	80166b4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166aa:	4b36      	ldr	r3, [pc, #216]	; (8016784 <xTaskIncrementTick+0x160>)
 80166ac:	f04f 32ff 	mov.w	r2, #4294967295
 80166b0:	601a      	str	r2, [r3, #0]
					break;
 80166b2:	e03e      	b.n	8016732 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80166b4:	4b30      	ldr	r3, [pc, #192]	; (8016778 <xTaskIncrementTick+0x154>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	68db      	ldr	r3, [r3, #12]
 80166bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80166be:	68bb      	ldr	r3, [r7, #8]
 80166c0:	685b      	ldr	r3, [r3, #4]
 80166c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80166c4:	693a      	ldr	r2, [r7, #16]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	429a      	cmp	r2, r3
 80166ca:	d203      	bcs.n	80166d4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80166cc:	4a2d      	ldr	r2, [pc, #180]	; (8016784 <xTaskIncrementTick+0x160>)
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	6013      	str	r3, [r2, #0]
						break;
 80166d2:	e02e      	b.n	8016732 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	3304      	adds	r3, #4
 80166d8:	4618      	mov	r0, r3
 80166da:	f7fe fae2 	bl	8014ca2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80166de:	68bb      	ldr	r3, [r7, #8]
 80166e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d004      	beq.n	80166f0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	3318      	adds	r3, #24
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7fe fad9 	bl	8014ca2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166f4:	2201      	movs	r2, #1
 80166f6:	409a      	lsls	r2, r3
 80166f8:	4b23      	ldr	r3, [pc, #140]	; (8016788 <xTaskIncrementTick+0x164>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	4313      	orrs	r3, r2
 80166fe:	4a22      	ldr	r2, [pc, #136]	; (8016788 <xTaskIncrementTick+0x164>)
 8016700:	6013      	str	r3, [r2, #0]
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016706:	4613      	mov	r3, r2
 8016708:	009b      	lsls	r3, r3, #2
 801670a:	4413      	add	r3, r2
 801670c:	009b      	lsls	r3, r3, #2
 801670e:	4a1f      	ldr	r2, [pc, #124]	; (801678c <xTaskIncrementTick+0x168>)
 8016710:	441a      	add	r2, r3
 8016712:	68bb      	ldr	r3, [r7, #8]
 8016714:	3304      	adds	r3, #4
 8016716:	4619      	mov	r1, r3
 8016718:	4610      	mov	r0, r2
 801671a:	f7fe fa65 	bl	8014be8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016722:	4b1b      	ldr	r3, [pc, #108]	; (8016790 <xTaskIncrementTick+0x16c>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016728:	429a      	cmp	r2, r3
 801672a:	d3b4      	bcc.n	8016696 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801672c:	2301      	movs	r3, #1
 801672e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016730:	e7b1      	b.n	8016696 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016732:	4b17      	ldr	r3, [pc, #92]	; (8016790 <xTaskIncrementTick+0x16c>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016738:	4914      	ldr	r1, [pc, #80]	; (801678c <xTaskIncrementTick+0x168>)
 801673a:	4613      	mov	r3, r2
 801673c:	009b      	lsls	r3, r3, #2
 801673e:	4413      	add	r3, r2
 8016740:	009b      	lsls	r3, r3, #2
 8016742:	440b      	add	r3, r1
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	2b01      	cmp	r3, #1
 8016748:	d907      	bls.n	801675a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 801674a:	2301      	movs	r3, #1
 801674c:	617b      	str	r3, [r7, #20]
 801674e:	e004      	b.n	801675a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016750:	4b10      	ldr	r3, [pc, #64]	; (8016794 <xTaskIncrementTick+0x170>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	3301      	adds	r3, #1
 8016756:	4a0f      	ldr	r2, [pc, #60]	; (8016794 <xTaskIncrementTick+0x170>)
 8016758:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801675a:	4b0f      	ldr	r3, [pc, #60]	; (8016798 <xTaskIncrementTick+0x174>)
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d001      	beq.n	8016766 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8016762:	2301      	movs	r3, #1
 8016764:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016766:	697b      	ldr	r3, [r7, #20]
}
 8016768:	4618      	mov	r0, r3
 801676a:	3718      	adds	r7, #24
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}
 8016770:	20003f80 	.word	0x20003f80
 8016774:	20003f5c 	.word	0x20003f5c
 8016778:	20003f10 	.word	0x20003f10
 801677c:	20003f14 	.word	0x20003f14
 8016780:	20003f70 	.word	0x20003f70
 8016784:	20003f78 	.word	0x20003f78
 8016788:	20003f60 	.word	0x20003f60
 801678c:	20003e5c 	.word	0x20003e5c
 8016790:	20003e58 	.word	0x20003e58
 8016794:	20003f68 	.word	0x20003f68
 8016798:	20003f6c 	.word	0x20003f6c

0801679c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b086      	sub	sp, #24
 80167a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80167a2:	4b32      	ldr	r3, [pc, #200]	; (801686c <vTaskSwitchContext+0xd0>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d003      	beq.n	80167b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80167aa:	4b31      	ldr	r3, [pc, #196]	; (8016870 <vTaskSwitchContext+0xd4>)
 80167ac:	2201      	movs	r2, #1
 80167ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80167b0:	e057      	b.n	8016862 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 80167b2:	4b2f      	ldr	r3, [pc, #188]	; (8016870 <vTaskSwitchContext+0xd4>)
 80167b4:	2200      	movs	r2, #0
 80167b6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80167b8:	f00d fe2a 	bl	8024410 <getRunTimeCounterValue>
 80167bc:	4602      	mov	r2, r0
 80167be:	4b2d      	ldr	r3, [pc, #180]	; (8016874 <vTaskSwitchContext+0xd8>)
 80167c0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80167c2:	4b2c      	ldr	r3, [pc, #176]	; (8016874 <vTaskSwitchContext+0xd8>)
 80167c4:	681a      	ldr	r2, [r3, #0]
 80167c6:	4b2c      	ldr	r3, [pc, #176]	; (8016878 <vTaskSwitchContext+0xdc>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	429a      	cmp	r2, r3
 80167cc:	d909      	bls.n	80167e2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80167ce:	4b29      	ldr	r3, [pc, #164]	; (8016874 <vTaskSwitchContext+0xd8>)
 80167d0:	681a      	ldr	r2, [r3, #0]
 80167d2:	4b29      	ldr	r3, [pc, #164]	; (8016878 <vTaskSwitchContext+0xdc>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	1ad2      	subs	r2, r2, r3
 80167d8:	4b28      	ldr	r3, [pc, #160]	; (801687c <vTaskSwitchContext+0xe0>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80167de:	440a      	add	r2, r1
 80167e0:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 80167e2:	4b24      	ldr	r3, [pc, #144]	; (8016874 <vTaskSwitchContext+0xd8>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	4a24      	ldr	r2, [pc, #144]	; (8016878 <vTaskSwitchContext+0xdc>)
 80167e8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80167ea:	4b25      	ldr	r3, [pc, #148]	; (8016880 <vTaskSwitchContext+0xe4>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	fab3 f383 	clz	r3, r3
 80167f6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80167f8:	7afb      	ldrb	r3, [r7, #11]
 80167fa:	f1c3 031f 	rsb	r3, r3, #31
 80167fe:	617b      	str	r3, [r7, #20]
 8016800:	4920      	ldr	r1, [pc, #128]	; (8016884 <vTaskSwitchContext+0xe8>)
 8016802:	697a      	ldr	r2, [r7, #20]
 8016804:	4613      	mov	r3, r2
 8016806:	009b      	lsls	r3, r3, #2
 8016808:	4413      	add	r3, r2
 801680a:	009b      	lsls	r3, r3, #2
 801680c:	440b      	add	r3, r1
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d109      	bne.n	8016828 <vTaskSwitchContext+0x8c>
	__asm volatile
 8016814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016818:	f383 8811 	msr	BASEPRI, r3
 801681c:	f3bf 8f6f 	isb	sy
 8016820:	f3bf 8f4f 	dsb	sy
 8016824:	607b      	str	r3, [r7, #4]
 8016826:	e7fe      	b.n	8016826 <vTaskSwitchContext+0x8a>
 8016828:	697a      	ldr	r2, [r7, #20]
 801682a:	4613      	mov	r3, r2
 801682c:	009b      	lsls	r3, r3, #2
 801682e:	4413      	add	r3, r2
 8016830:	009b      	lsls	r3, r3, #2
 8016832:	4a14      	ldr	r2, [pc, #80]	; (8016884 <vTaskSwitchContext+0xe8>)
 8016834:	4413      	add	r3, r2
 8016836:	613b      	str	r3, [r7, #16]
 8016838:	693b      	ldr	r3, [r7, #16]
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	685a      	ldr	r2, [r3, #4]
 801683e:	693b      	ldr	r3, [r7, #16]
 8016840:	605a      	str	r2, [r3, #4]
 8016842:	693b      	ldr	r3, [r7, #16]
 8016844:	685a      	ldr	r2, [r3, #4]
 8016846:	693b      	ldr	r3, [r7, #16]
 8016848:	3308      	adds	r3, #8
 801684a:	429a      	cmp	r2, r3
 801684c:	d104      	bne.n	8016858 <vTaskSwitchContext+0xbc>
 801684e:	693b      	ldr	r3, [r7, #16]
 8016850:	685b      	ldr	r3, [r3, #4]
 8016852:	685a      	ldr	r2, [r3, #4]
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	605a      	str	r2, [r3, #4]
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	68db      	ldr	r3, [r3, #12]
 801685e:	4a07      	ldr	r2, [pc, #28]	; (801687c <vTaskSwitchContext+0xe0>)
 8016860:	6013      	str	r3, [r2, #0]
}
 8016862:	bf00      	nop
 8016864:	3718      	adds	r7, #24
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
 801686a:	bf00      	nop
 801686c:	20003f80 	.word	0x20003f80
 8016870:	20003f6c 	.word	0x20003f6c
 8016874:	20003f88 	.word	0x20003f88
 8016878:	20003f84 	.word	0x20003f84
 801687c:	20003e58 	.word	0x20003e58
 8016880:	20003f60 	.word	0x20003f60
 8016884:	20003e5c 	.word	0x20003e5c

08016888 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b084      	sub	sp, #16
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
 8016890:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d109      	bne.n	80168ac <vTaskPlaceOnEventList+0x24>
 8016898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801689c:	f383 8811 	msr	BASEPRI, r3
 80168a0:	f3bf 8f6f 	isb	sy
 80168a4:	f3bf 8f4f 	dsb	sy
 80168a8:	60fb      	str	r3, [r7, #12]
 80168aa:	e7fe      	b.n	80168aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80168ac:	4b07      	ldr	r3, [pc, #28]	; (80168cc <vTaskPlaceOnEventList+0x44>)
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	3318      	adds	r3, #24
 80168b2:	4619      	mov	r1, r3
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	f7fe f9bb 	bl	8014c30 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80168ba:	2101      	movs	r1, #1
 80168bc:	6838      	ldr	r0, [r7, #0]
 80168be:	f000 faed 	bl	8016e9c <prvAddCurrentTaskToDelayedList>
}
 80168c2:	bf00      	nop
 80168c4:	3710      	adds	r7, #16
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	20003e58 	.word	0x20003e58

080168d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b086      	sub	sp, #24
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	68db      	ldr	r3, [r3, #12]
 80168dc:	68db      	ldr	r3, [r3, #12]
 80168de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80168e0:	693b      	ldr	r3, [r7, #16]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d109      	bne.n	80168fa <xTaskRemoveFromEventList+0x2a>
 80168e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ea:	f383 8811 	msr	BASEPRI, r3
 80168ee:	f3bf 8f6f 	isb	sy
 80168f2:	f3bf 8f4f 	dsb	sy
 80168f6:	60fb      	str	r3, [r7, #12]
 80168f8:	e7fe      	b.n	80168f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80168fa:	693b      	ldr	r3, [r7, #16]
 80168fc:	3318      	adds	r3, #24
 80168fe:	4618      	mov	r0, r3
 8016900:	f7fe f9cf 	bl	8014ca2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016904:	4b1d      	ldr	r3, [pc, #116]	; (801697c <xTaskRemoveFromEventList+0xac>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d11c      	bne.n	8016946 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	3304      	adds	r3, #4
 8016910:	4618      	mov	r0, r3
 8016912:	f7fe f9c6 	bl	8014ca2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801691a:	2201      	movs	r2, #1
 801691c:	409a      	lsls	r2, r3
 801691e:	4b18      	ldr	r3, [pc, #96]	; (8016980 <xTaskRemoveFromEventList+0xb0>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	4313      	orrs	r3, r2
 8016924:	4a16      	ldr	r2, [pc, #88]	; (8016980 <xTaskRemoveFromEventList+0xb0>)
 8016926:	6013      	str	r3, [r2, #0]
 8016928:	693b      	ldr	r3, [r7, #16]
 801692a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801692c:	4613      	mov	r3, r2
 801692e:	009b      	lsls	r3, r3, #2
 8016930:	4413      	add	r3, r2
 8016932:	009b      	lsls	r3, r3, #2
 8016934:	4a13      	ldr	r2, [pc, #76]	; (8016984 <xTaskRemoveFromEventList+0xb4>)
 8016936:	441a      	add	r2, r3
 8016938:	693b      	ldr	r3, [r7, #16]
 801693a:	3304      	adds	r3, #4
 801693c:	4619      	mov	r1, r3
 801693e:	4610      	mov	r0, r2
 8016940:	f7fe f952 	bl	8014be8 <vListInsertEnd>
 8016944:	e005      	b.n	8016952 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016946:	693b      	ldr	r3, [r7, #16]
 8016948:	3318      	adds	r3, #24
 801694a:	4619      	mov	r1, r3
 801694c:	480e      	ldr	r0, [pc, #56]	; (8016988 <xTaskRemoveFromEventList+0xb8>)
 801694e:	f7fe f94b 	bl	8014be8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016952:	693b      	ldr	r3, [r7, #16]
 8016954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016956:	4b0d      	ldr	r3, [pc, #52]	; (801698c <xTaskRemoveFromEventList+0xbc>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801695c:	429a      	cmp	r2, r3
 801695e:	d905      	bls.n	801696c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016960:	2301      	movs	r3, #1
 8016962:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016964:	4b0a      	ldr	r3, [pc, #40]	; (8016990 <xTaskRemoveFromEventList+0xc0>)
 8016966:	2201      	movs	r2, #1
 8016968:	601a      	str	r2, [r3, #0]
 801696a:	e001      	b.n	8016970 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 801696c:	2300      	movs	r3, #0
 801696e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8016970:	697b      	ldr	r3, [r7, #20]
}
 8016972:	4618      	mov	r0, r3
 8016974:	3718      	adds	r7, #24
 8016976:	46bd      	mov	sp, r7
 8016978:	bd80      	pop	{r7, pc}
 801697a:	bf00      	nop
 801697c:	20003f80 	.word	0x20003f80
 8016980:	20003f60 	.word	0x20003f60
 8016984:	20003e5c 	.word	0x20003e5c
 8016988:	20003f18 	.word	0x20003f18
 801698c:	20003e58 	.word	0x20003e58
 8016990:	20003f6c 	.word	0x20003f6c

08016994 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016994:	b480      	push	{r7}
 8016996:	b085      	sub	sp, #20
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d109      	bne.n	80169b6 <vTaskSetTimeOutState+0x22>
 80169a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169a6:	f383 8811 	msr	BASEPRI, r3
 80169aa:	f3bf 8f6f 	isb	sy
 80169ae:	f3bf 8f4f 	dsb	sy
 80169b2:	60fb      	str	r3, [r7, #12]
 80169b4:	e7fe      	b.n	80169b4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80169b6:	4b07      	ldr	r3, [pc, #28]	; (80169d4 <vTaskSetTimeOutState+0x40>)
 80169b8:	681a      	ldr	r2, [r3, #0]
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80169be:	4b06      	ldr	r3, [pc, #24]	; (80169d8 <vTaskSetTimeOutState+0x44>)
 80169c0:	681a      	ldr	r2, [r3, #0]
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	605a      	str	r2, [r3, #4]
}
 80169c6:	bf00      	nop
 80169c8:	3714      	adds	r7, #20
 80169ca:	46bd      	mov	sp, r7
 80169cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d0:	4770      	bx	lr
 80169d2:	bf00      	nop
 80169d4:	20003f70 	.word	0x20003f70
 80169d8:	20003f5c 	.word	0x20003f5c

080169dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b086      	sub	sp, #24
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
 80169e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d109      	bne.n	8016a00 <xTaskCheckForTimeOut+0x24>
 80169ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169f0:	f383 8811 	msr	BASEPRI, r3
 80169f4:	f3bf 8f6f 	isb	sy
 80169f8:	f3bf 8f4f 	dsb	sy
 80169fc:	60fb      	str	r3, [r7, #12]
 80169fe:	e7fe      	b.n	80169fe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d109      	bne.n	8016a1a <xTaskCheckForTimeOut+0x3e>
 8016a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a0a:	f383 8811 	msr	BASEPRI, r3
 8016a0e:	f3bf 8f6f 	isb	sy
 8016a12:	f3bf 8f4f 	dsb	sy
 8016a16:	60bb      	str	r3, [r7, #8]
 8016a18:	e7fe      	b.n	8016a18 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8016a1a:	f7fe fa71 	bl	8014f00 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016a1e:	4b1c      	ldr	r3, [pc, #112]	; (8016a90 <xTaskCheckForTimeOut+0xb4>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a2c:	d102      	bne.n	8016a34 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	617b      	str	r3, [r7, #20]
 8016a32:	e026      	b.n	8016a82 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	681a      	ldr	r2, [r3, #0]
 8016a38:	4b16      	ldr	r3, [pc, #88]	; (8016a94 <xTaskCheckForTimeOut+0xb8>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	429a      	cmp	r2, r3
 8016a3e:	d007      	beq.n	8016a50 <xTaskCheckForTimeOut+0x74>
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	685a      	ldr	r2, [r3, #4]
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	429a      	cmp	r2, r3
 8016a48:	d802      	bhi.n	8016a50 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	617b      	str	r3, [r7, #20]
 8016a4e:	e018      	b.n	8016a82 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	693a      	ldr	r2, [r7, #16]
 8016a56:	1ad2      	subs	r2, r2, r3
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d20e      	bcs.n	8016a7e <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	681a      	ldr	r2, [r3, #0]
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6859      	ldr	r1, [r3, #4]
 8016a68:	693b      	ldr	r3, [r7, #16]
 8016a6a:	1acb      	subs	r3, r1, r3
 8016a6c:	441a      	add	r2, r3
 8016a6e:	683b      	ldr	r3, [r7, #0]
 8016a70:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f7ff ff8e 	bl	8016994 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	617b      	str	r3, [r7, #20]
 8016a7c:	e001      	b.n	8016a82 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8016a7e:	2301      	movs	r3, #1
 8016a80:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8016a82:	f7fe fa6b 	bl	8014f5c <vPortExitCritical>

	return xReturn;
 8016a86:	697b      	ldr	r3, [r7, #20]
}
 8016a88:	4618      	mov	r0, r3
 8016a8a:	3718      	adds	r7, #24
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}
 8016a90:	20003f5c 	.word	0x20003f5c
 8016a94:	20003f70 	.word	0x20003f70

08016a98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016a98:	b480      	push	{r7}
 8016a9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016a9c:	4b03      	ldr	r3, [pc, #12]	; (8016aac <vTaskMissedYield+0x14>)
 8016a9e:	2201      	movs	r2, #1
 8016aa0:	601a      	str	r2, [r3, #0]
}
 8016aa2:	bf00      	nop
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aaa:	4770      	bx	lr
 8016aac:	20003f6c 	.word	0x20003f6c

08016ab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b082      	sub	sp, #8
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016ab8:	f000 f852 	bl	8016b60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016abc:	4b06      	ldr	r3, [pc, #24]	; (8016ad8 <prvIdleTask+0x28>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	2b01      	cmp	r3, #1
 8016ac2:	d9f9      	bls.n	8016ab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016ac4:	4b05      	ldr	r3, [pc, #20]	; (8016adc <prvIdleTask+0x2c>)
 8016ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016aca:	601a      	str	r2, [r3, #0]
 8016acc:	f3bf 8f4f 	dsb	sy
 8016ad0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016ad4:	e7f0      	b.n	8016ab8 <prvIdleTask+0x8>
 8016ad6:	bf00      	nop
 8016ad8:	20003e5c 	.word	0x20003e5c
 8016adc:	e000ed04 	.word	0xe000ed04

08016ae0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b082      	sub	sp, #8
 8016ae4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	607b      	str	r3, [r7, #4]
 8016aea:	e00c      	b.n	8016b06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016aec:	687a      	ldr	r2, [r7, #4]
 8016aee:	4613      	mov	r3, r2
 8016af0:	009b      	lsls	r3, r3, #2
 8016af2:	4413      	add	r3, r2
 8016af4:	009b      	lsls	r3, r3, #2
 8016af6:	4a12      	ldr	r2, [pc, #72]	; (8016b40 <prvInitialiseTaskLists+0x60>)
 8016af8:	4413      	add	r3, r2
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7fe f847 	bl	8014b8e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	3301      	adds	r3, #1
 8016b04:	607b      	str	r3, [r7, #4]
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	2b06      	cmp	r3, #6
 8016b0a:	d9ef      	bls.n	8016aec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016b0c:	480d      	ldr	r0, [pc, #52]	; (8016b44 <prvInitialiseTaskLists+0x64>)
 8016b0e:	f7fe f83e 	bl	8014b8e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016b12:	480d      	ldr	r0, [pc, #52]	; (8016b48 <prvInitialiseTaskLists+0x68>)
 8016b14:	f7fe f83b 	bl	8014b8e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016b18:	480c      	ldr	r0, [pc, #48]	; (8016b4c <prvInitialiseTaskLists+0x6c>)
 8016b1a:	f7fe f838 	bl	8014b8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016b1e:	480c      	ldr	r0, [pc, #48]	; (8016b50 <prvInitialiseTaskLists+0x70>)
 8016b20:	f7fe f835 	bl	8014b8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016b24:	480b      	ldr	r0, [pc, #44]	; (8016b54 <prvInitialiseTaskLists+0x74>)
 8016b26:	f7fe f832 	bl	8014b8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016b2a:	4b0b      	ldr	r3, [pc, #44]	; (8016b58 <prvInitialiseTaskLists+0x78>)
 8016b2c:	4a05      	ldr	r2, [pc, #20]	; (8016b44 <prvInitialiseTaskLists+0x64>)
 8016b2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016b30:	4b0a      	ldr	r3, [pc, #40]	; (8016b5c <prvInitialiseTaskLists+0x7c>)
 8016b32:	4a05      	ldr	r2, [pc, #20]	; (8016b48 <prvInitialiseTaskLists+0x68>)
 8016b34:	601a      	str	r2, [r3, #0]
}
 8016b36:	bf00      	nop
 8016b38:	3708      	adds	r7, #8
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	bf00      	nop
 8016b40:	20003e5c 	.word	0x20003e5c
 8016b44:	20003ee8 	.word	0x20003ee8
 8016b48:	20003efc 	.word	0x20003efc
 8016b4c:	20003f18 	.word	0x20003f18
 8016b50:	20003f2c 	.word	0x20003f2c
 8016b54:	20003f44 	.word	0x20003f44
 8016b58:	20003f10 	.word	0x20003f10
 8016b5c:	20003f14 	.word	0x20003f14

08016b60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016b66:	e028      	b.n	8016bba <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8016b68:	f7ff fc90 	bl	801648c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8016b6c:	4b17      	ldr	r3, [pc, #92]	; (8016bcc <prvCheckTasksWaitingTermination+0x6c>)
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	bf0c      	ite	eq
 8016b74:	2301      	moveq	r3, #1
 8016b76:	2300      	movne	r3, #0
 8016b78:	b2db      	uxtb	r3, r3
 8016b7a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8016b7c:	f7ff fc94 	bl	80164a8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d119      	bne.n	8016bba <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8016b86:	f7fe f9bb 	bl	8014f00 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8016b8a:	4b10      	ldr	r3, [pc, #64]	; (8016bcc <prvCheckTasksWaitingTermination+0x6c>)
 8016b8c:	68db      	ldr	r3, [r3, #12]
 8016b8e:	68db      	ldr	r3, [r3, #12]
 8016b90:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016b92:	683b      	ldr	r3, [r7, #0]
 8016b94:	3304      	adds	r3, #4
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7fe f883 	bl	8014ca2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8016b9c:	4b0c      	ldr	r3, [pc, #48]	; (8016bd0 <prvCheckTasksWaitingTermination+0x70>)
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	3b01      	subs	r3, #1
 8016ba2:	4a0b      	ldr	r2, [pc, #44]	; (8016bd0 <prvCheckTasksWaitingTermination+0x70>)
 8016ba4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8016ba6:	4b0b      	ldr	r3, [pc, #44]	; (8016bd4 <prvCheckTasksWaitingTermination+0x74>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	3b01      	subs	r3, #1
 8016bac:	4a09      	ldr	r2, [pc, #36]	; (8016bd4 <prvCheckTasksWaitingTermination+0x74>)
 8016bae:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8016bb0:	f7fe f9d4 	bl	8014f5c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8016bb4:	6838      	ldr	r0, [r7, #0]
 8016bb6:	f000 f80f 	bl	8016bd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016bba:	4b06      	ldr	r3, [pc, #24]	; (8016bd4 <prvCheckTasksWaitingTermination+0x74>)
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d1d2      	bne.n	8016b68 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016bc2:	bf00      	nop
 8016bc4:	3708      	adds	r7, #8
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}
 8016bca:	bf00      	nop
 8016bcc:	20003f2c 	.word	0x20003f2c
 8016bd0:	20003f58 	.word	0x20003f58
 8016bd4:	20003f40 	.word	0x20003f40

08016bd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b082      	sub	sp, #8
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7fe fb5d 	bl	80152a4 <vPortFree>
			vPortFree( pxTCB );
 8016bea:	6878      	ldr	r0, [r7, #4]
 8016bec:	f7fe fb5a 	bl	80152a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016bf0:	bf00      	nop
 8016bf2:	3708      	adds	r7, #8
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}

08016bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016bf8:	b480      	push	{r7}
 8016bfa:	b083      	sub	sp, #12
 8016bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016bfe:	4b0f      	ldr	r3, [pc, #60]	; (8016c3c <prvResetNextTaskUnblockTime+0x44>)
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d101      	bne.n	8016c0c <prvResetNextTaskUnblockTime+0x14>
 8016c08:	2301      	movs	r3, #1
 8016c0a:	e000      	b.n	8016c0e <prvResetNextTaskUnblockTime+0x16>
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d004      	beq.n	8016c1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016c12:	4b0b      	ldr	r3, [pc, #44]	; (8016c40 <prvResetNextTaskUnblockTime+0x48>)
 8016c14:	f04f 32ff 	mov.w	r2, #4294967295
 8016c18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016c1a:	e008      	b.n	8016c2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8016c1c:	4b07      	ldr	r3, [pc, #28]	; (8016c3c <prvResetNextTaskUnblockTime+0x44>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	68db      	ldr	r3, [r3, #12]
 8016c22:	68db      	ldr	r3, [r3, #12]
 8016c24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	685b      	ldr	r3, [r3, #4]
 8016c2a:	4a05      	ldr	r2, [pc, #20]	; (8016c40 <prvResetNextTaskUnblockTime+0x48>)
 8016c2c:	6013      	str	r3, [r2, #0]
}
 8016c2e:	bf00      	nop
 8016c30:	370c      	adds	r7, #12
 8016c32:	46bd      	mov	sp, r7
 8016c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c38:	4770      	bx	lr
 8016c3a:	bf00      	nop
 8016c3c:	20003f10 	.word	0x20003f10
 8016c40:	20003f78 	.word	0x20003f78

08016c44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016c44:	b480      	push	{r7}
 8016c46:	b083      	sub	sp, #12
 8016c48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016c4a:	4b0b      	ldr	r3, [pc, #44]	; (8016c78 <xTaskGetSchedulerState+0x34>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d102      	bne.n	8016c58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016c52:	2301      	movs	r3, #1
 8016c54:	607b      	str	r3, [r7, #4]
 8016c56:	e008      	b.n	8016c6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c58:	4b08      	ldr	r3, [pc, #32]	; (8016c7c <xTaskGetSchedulerState+0x38>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d102      	bne.n	8016c66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016c60:	2302      	movs	r3, #2
 8016c62:	607b      	str	r3, [r7, #4]
 8016c64:	e001      	b.n	8016c6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016c66:	2300      	movs	r3, #0
 8016c68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016c6a:	687b      	ldr	r3, [r7, #4]
	}
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	370c      	adds	r7, #12
 8016c70:	46bd      	mov	sp, r7
 8016c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c76:	4770      	bx	lr
 8016c78:	20003f64 	.word	0x20003f64
 8016c7c:	20003f80 	.word	0x20003f80

08016c80 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b084      	sub	sp, #16
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d062      	beq.n	8016d58 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c96:	4b32      	ldr	r3, [pc, #200]	; (8016d60 <vTaskPriorityInherit+0xe0>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d25b      	bcs.n	8016d58 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	699b      	ldr	r3, [r3, #24]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	db06      	blt.n	8016cb6 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ca8:	4b2d      	ldr	r3, [pc, #180]	; (8016d60 <vTaskPriorityInherit+0xe0>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cae:	f1c3 0207 	rsb	r2, r3, #7
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	6959      	ldr	r1, [r3, #20]
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	009b      	lsls	r3, r3, #2
 8016cc2:	4413      	add	r3, r2
 8016cc4:	009b      	lsls	r3, r3, #2
 8016cc6:	4a27      	ldr	r2, [pc, #156]	; (8016d64 <vTaskPriorityInherit+0xe4>)
 8016cc8:	4413      	add	r3, r2
 8016cca:	4299      	cmp	r1, r3
 8016ccc:	d101      	bne.n	8016cd2 <vTaskPriorityInherit+0x52>
 8016cce:	2301      	movs	r3, #1
 8016cd0:	e000      	b.n	8016cd4 <vTaskPriorityInherit+0x54>
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d03a      	beq.n	8016d4e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	3304      	adds	r3, #4
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f7fd ffe0 	bl	8014ca2 <uxListRemove>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d115      	bne.n	8016d14 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cec:	491d      	ldr	r1, [pc, #116]	; (8016d64 <vTaskPriorityInherit+0xe4>)
 8016cee:	4613      	mov	r3, r2
 8016cf0:	009b      	lsls	r3, r3, #2
 8016cf2:	4413      	add	r3, r2
 8016cf4:	009b      	lsls	r3, r3, #2
 8016cf6:	440b      	add	r3, r1
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d10a      	bne.n	8016d14 <vTaskPriorityInherit+0x94>
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d02:	2201      	movs	r2, #1
 8016d04:	fa02 f303 	lsl.w	r3, r2, r3
 8016d08:	43da      	mvns	r2, r3
 8016d0a:	4b17      	ldr	r3, [pc, #92]	; (8016d68 <vTaskPriorityInherit+0xe8>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	4013      	ands	r3, r2
 8016d10:	4a15      	ldr	r2, [pc, #84]	; (8016d68 <vTaskPriorityInherit+0xe8>)
 8016d12:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016d14:	4b12      	ldr	r3, [pc, #72]	; (8016d60 <vTaskPriorityInherit+0xe0>)
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d22:	2201      	movs	r2, #1
 8016d24:	409a      	lsls	r2, r3
 8016d26:	4b10      	ldr	r3, [pc, #64]	; (8016d68 <vTaskPriorityInherit+0xe8>)
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	4313      	orrs	r3, r2
 8016d2c:	4a0e      	ldr	r2, [pc, #56]	; (8016d68 <vTaskPriorityInherit+0xe8>)
 8016d2e:	6013      	str	r3, [r2, #0]
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d34:	4613      	mov	r3, r2
 8016d36:	009b      	lsls	r3, r3, #2
 8016d38:	4413      	add	r3, r2
 8016d3a:	009b      	lsls	r3, r3, #2
 8016d3c:	4a09      	ldr	r2, [pc, #36]	; (8016d64 <vTaskPriorityInherit+0xe4>)
 8016d3e:	441a      	add	r2, r3
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	3304      	adds	r3, #4
 8016d44:	4619      	mov	r1, r3
 8016d46:	4610      	mov	r0, r2
 8016d48:	f7fd ff4e 	bl	8014be8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016d4c:	e004      	b.n	8016d58 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016d4e:	4b04      	ldr	r3, [pc, #16]	; (8016d60 <vTaskPriorityInherit+0xe0>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8016d58:	bf00      	nop
 8016d5a:	3710      	adds	r7, #16
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd80      	pop	{r7, pc}
 8016d60:	20003e58 	.word	0x20003e58
 8016d64:	20003e5c 	.word	0x20003e5c
 8016d68:	20003f60 	.word	0x20003f60

08016d6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b086      	sub	sp, #24
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d06c      	beq.n	8016e5c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016d82:	4b39      	ldr	r3, [pc, #228]	; (8016e68 <xTaskPriorityDisinherit+0xfc>)
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	693a      	ldr	r2, [r7, #16]
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d009      	beq.n	8016da0 <xTaskPriorityDisinherit+0x34>
 8016d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d90:	f383 8811 	msr	BASEPRI, r3
 8016d94:	f3bf 8f6f 	isb	sy
 8016d98:	f3bf 8f4f 	dsb	sy
 8016d9c:	60fb      	str	r3, [r7, #12]
 8016d9e:	e7fe      	b.n	8016d9e <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8016da0:	693b      	ldr	r3, [r7, #16]
 8016da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d109      	bne.n	8016dbc <xTaskPriorityDisinherit+0x50>
 8016da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dac:	f383 8811 	msr	BASEPRI, r3
 8016db0:	f3bf 8f6f 	isb	sy
 8016db4:	f3bf 8f4f 	dsb	sy
 8016db8:	60bb      	str	r3, [r7, #8]
 8016dba:	e7fe      	b.n	8016dba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8016dbc:	693b      	ldr	r3, [r7, #16]
 8016dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016dc0:	1e5a      	subs	r2, r3, #1
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016dc6:	693b      	ldr	r3, [r7, #16]
 8016dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016dce:	429a      	cmp	r2, r3
 8016dd0:	d044      	beq.n	8016e5c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016dd2:	693b      	ldr	r3, [r7, #16]
 8016dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d140      	bne.n	8016e5c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016dda:	693b      	ldr	r3, [r7, #16]
 8016ddc:	3304      	adds	r3, #4
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7fd ff5f 	bl	8014ca2 <uxListRemove>
 8016de4:	4603      	mov	r3, r0
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d115      	bne.n	8016e16 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016dea:	693b      	ldr	r3, [r7, #16]
 8016dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dee:	491f      	ldr	r1, [pc, #124]	; (8016e6c <xTaskPriorityDisinherit+0x100>)
 8016df0:	4613      	mov	r3, r2
 8016df2:	009b      	lsls	r3, r3, #2
 8016df4:	4413      	add	r3, r2
 8016df6:	009b      	lsls	r3, r3, #2
 8016df8:	440b      	add	r3, r1
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d10a      	bne.n	8016e16 <xTaskPriorityDisinherit+0xaa>
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e04:	2201      	movs	r2, #1
 8016e06:	fa02 f303 	lsl.w	r3, r2, r3
 8016e0a:	43da      	mvns	r2, r3
 8016e0c:	4b18      	ldr	r3, [pc, #96]	; (8016e70 <xTaskPriorityDisinherit+0x104>)
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	4013      	ands	r3, r2
 8016e12:	4a17      	ldr	r2, [pc, #92]	; (8016e70 <xTaskPriorityDisinherit+0x104>)
 8016e14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016e1a:	693b      	ldr	r3, [r7, #16]
 8016e1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e1e:	693b      	ldr	r3, [r7, #16]
 8016e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e22:	f1c3 0207 	rsb	r2, r3, #7
 8016e26:	693b      	ldr	r3, [r7, #16]
 8016e28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e2e:	2201      	movs	r2, #1
 8016e30:	409a      	lsls	r2, r3
 8016e32:	4b0f      	ldr	r3, [pc, #60]	; (8016e70 <xTaskPriorityDisinherit+0x104>)
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	4313      	orrs	r3, r2
 8016e38:	4a0d      	ldr	r2, [pc, #52]	; (8016e70 <xTaskPriorityDisinherit+0x104>)
 8016e3a:	6013      	str	r3, [r2, #0]
 8016e3c:	693b      	ldr	r3, [r7, #16]
 8016e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e40:	4613      	mov	r3, r2
 8016e42:	009b      	lsls	r3, r3, #2
 8016e44:	4413      	add	r3, r2
 8016e46:	009b      	lsls	r3, r3, #2
 8016e48:	4a08      	ldr	r2, [pc, #32]	; (8016e6c <xTaskPriorityDisinherit+0x100>)
 8016e4a:	441a      	add	r2, r3
 8016e4c:	693b      	ldr	r3, [r7, #16]
 8016e4e:	3304      	adds	r3, #4
 8016e50:	4619      	mov	r1, r3
 8016e52:	4610      	mov	r0, r2
 8016e54:	f7fd fec8 	bl	8014be8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016e58:	2301      	movs	r3, #1
 8016e5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016e5c:	697b      	ldr	r3, [r7, #20]
	}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	3718      	adds	r7, #24
 8016e62:	46bd      	mov	sp, r7
 8016e64:	bd80      	pop	{r7, pc}
 8016e66:	bf00      	nop
 8016e68:	20003e58 	.word	0x20003e58
 8016e6c:	20003e5c 	.word	0x20003e5c
 8016e70:	20003f60 	.word	0x20003f60

08016e74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8016e74:	b480      	push	{r7}
 8016e76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016e78:	4b07      	ldr	r3, [pc, #28]	; (8016e98 <pvTaskIncrementMutexHeldCount+0x24>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d004      	beq.n	8016e8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016e80:	4b05      	ldr	r3, [pc, #20]	; (8016e98 <pvTaskIncrementMutexHeldCount+0x24>)
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016e86:	3201      	adds	r2, #1
 8016e88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8016e8a:	4b03      	ldr	r3, [pc, #12]	; (8016e98 <pvTaskIncrementMutexHeldCount+0x24>)
 8016e8c:	681b      	ldr	r3, [r3, #0]
	}
 8016e8e:	4618      	mov	r0, r3
 8016e90:	46bd      	mov	sp, r7
 8016e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e96:	4770      	bx	lr
 8016e98:	20003e58 	.word	0x20003e58

08016e9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b084      	sub	sp, #16
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
 8016ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016ea6:	4b29      	ldr	r3, [pc, #164]	; (8016f4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016eac:	4b28      	ldr	r3, [pc, #160]	; (8016f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	3304      	adds	r3, #4
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7fd fef5 	bl	8014ca2 <uxListRemove>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d10b      	bne.n	8016ed6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8016ebe:	4b24      	ldr	r3, [pc, #144]	; (8016f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8016eca:	43da      	mvns	r2, r3
 8016ecc:	4b21      	ldr	r3, [pc, #132]	; (8016f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	4013      	ands	r3, r2
 8016ed2:	4a20      	ldr	r2, [pc, #128]	; (8016f54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016ed4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016edc:	d10a      	bne.n	8016ef4 <prvAddCurrentTaskToDelayedList+0x58>
 8016ede:	683b      	ldr	r3, [r7, #0]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d007      	beq.n	8016ef4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016ee4:	4b1a      	ldr	r3, [pc, #104]	; (8016f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	3304      	adds	r3, #4
 8016eea:	4619      	mov	r1, r3
 8016eec:	481a      	ldr	r0, [pc, #104]	; (8016f58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016eee:	f7fd fe7b 	bl	8014be8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016ef2:	e026      	b.n	8016f42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016ef4:	68fa      	ldr	r2, [r7, #12]
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	4413      	add	r3, r2
 8016efa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016efc:	4b14      	ldr	r3, [pc, #80]	; (8016f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	68ba      	ldr	r2, [r7, #8]
 8016f02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016f04:	68ba      	ldr	r2, [r7, #8]
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d209      	bcs.n	8016f20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f0c:	4b13      	ldr	r3, [pc, #76]	; (8016f5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8016f0e:	681a      	ldr	r2, [r3, #0]
 8016f10:	4b0f      	ldr	r3, [pc, #60]	; (8016f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	3304      	adds	r3, #4
 8016f16:	4619      	mov	r1, r3
 8016f18:	4610      	mov	r0, r2
 8016f1a:	f7fd fe89 	bl	8014c30 <vListInsert>
}
 8016f1e:	e010      	b.n	8016f42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f20:	4b0f      	ldr	r3, [pc, #60]	; (8016f60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016f22:	681a      	ldr	r2, [r3, #0]
 8016f24:	4b0a      	ldr	r3, [pc, #40]	; (8016f50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	3304      	adds	r3, #4
 8016f2a:	4619      	mov	r1, r3
 8016f2c:	4610      	mov	r0, r2
 8016f2e:	f7fd fe7f 	bl	8014c30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016f32:	4b0c      	ldr	r3, [pc, #48]	; (8016f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	68ba      	ldr	r2, [r7, #8]
 8016f38:	429a      	cmp	r2, r3
 8016f3a:	d202      	bcs.n	8016f42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016f3c:	4a09      	ldr	r2, [pc, #36]	; (8016f64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016f3e:	68bb      	ldr	r3, [r7, #8]
 8016f40:	6013      	str	r3, [r2, #0]
}
 8016f42:	bf00      	nop
 8016f44:	3710      	adds	r7, #16
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd80      	pop	{r7, pc}
 8016f4a:	bf00      	nop
 8016f4c:	20003f5c 	.word	0x20003f5c
 8016f50:	20003e58 	.word	0x20003e58
 8016f54:	20003f60 	.word	0x20003f60
 8016f58:	20003f44 	.word	0x20003f44
 8016f5c:	20003f14 	.word	0x20003f14
 8016f60:	20003f10 	.word	0x20003f10
 8016f64:	20003f78 	.word	0x20003f78

08016f68 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b084      	sub	sp, #16
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
 8016f70:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	330c      	adds	r3, #12
 8016f78:	461a      	mov	r2, r3
 8016f7a:	6839      	ldr	r1, [r7, #0]
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f002 f943 	bl	8019208 <tcpip_send_msg_wait_sem>
 8016f82:	4603      	mov	r3, r0
 8016f84:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d103      	bne.n	8016f96 <netconn_apimsg+0x2e>
    return apimsg->err;
 8016f8e:	683b      	ldr	r3, [r7, #0]
 8016f90:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016f94:	e001      	b.n	8016f9a <netconn_apimsg+0x32>
  }
  return err;
 8016f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3710      	adds	r7, #16
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}
	...

08016fa4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b08a      	sub	sp, #40	; 0x28
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	4603      	mov	r3, r0
 8016fac:	603a      	str	r2, [r7, #0]
 8016fae:	71fb      	strb	r3, [r7, #7]
 8016fb0:	460b      	mov	r3, r1
 8016fb2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8016fb4:	79fb      	ldrb	r3, [r7, #7]
 8016fb6:	6839      	ldr	r1, [r7, #0]
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f000 ff87 	bl	8017ecc <netconn_alloc>
 8016fbe:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8016fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d054      	beq.n	8017070 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8016fc6:	79bb      	ldrb	r3, [r7, #6]
 8016fc8:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8016fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fcc:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8016fce:	f107 030c 	add.w	r3, r7, #12
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	4829      	ldr	r0, [pc, #164]	; (801707c <netconn_new_with_proto_and_callback+0xd8>)
 8016fd6:	f7ff ffc7 	bl	8016f68 <netconn_apimsg>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8016fe0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d043      	beq.n	8017070 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8016fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fea:	685b      	ldr	r3, [r3, #4]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d005      	beq.n	8016ffc <netconn_new_with_proto_and_callback+0x58>
 8016ff0:	4b23      	ldr	r3, [pc, #140]	; (8017080 <netconn_new_with_proto_and_callback+0xdc>)
 8016ff2:	2289      	movs	r2, #137	; 0x89
 8016ff4:	4923      	ldr	r1, [pc, #140]	; (8017084 <netconn_new_with_proto_and_callback+0xe0>)
 8016ff6:	4824      	ldr	r0, [pc, #144]	; (8017088 <netconn_new_with_proto_and_callback+0xe4>)
 8016ff8:	f00e fb3a 	bl	8025670 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8016ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ffe:	3310      	adds	r3, #16
 8017000:	4618      	mov	r0, r3
 8017002:	f00c f861 	bl	80230c8 <sys_mbox_valid>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d105      	bne.n	8017018 <netconn_new_with_proto_and_callback+0x74>
 801700c:	4b1c      	ldr	r3, [pc, #112]	; (8017080 <netconn_new_with_proto_and_callback+0xdc>)
 801700e:	228a      	movs	r2, #138	; 0x8a
 8017010:	491e      	ldr	r1, [pc, #120]	; (801708c <netconn_new_with_proto_and_callback+0xe8>)
 8017012:	481d      	ldr	r0, [pc, #116]	; (8017088 <netconn_new_with_proto_and_callback+0xe4>)
 8017014:	f00e fb2c 	bl	8025670 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8017018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801701a:	3314      	adds	r3, #20
 801701c:	4618      	mov	r0, r3
 801701e:	f00c f853 	bl	80230c8 <sys_mbox_valid>
 8017022:	4603      	mov	r3, r0
 8017024:	2b00      	cmp	r3, #0
 8017026:	d005      	beq.n	8017034 <netconn_new_with_proto_and_callback+0x90>
 8017028:	4b15      	ldr	r3, [pc, #84]	; (8017080 <netconn_new_with_proto_and_callback+0xdc>)
 801702a:	228c      	movs	r2, #140	; 0x8c
 801702c:	4918      	ldr	r1, [pc, #96]	; (8017090 <netconn_new_with_proto_and_callback+0xec>)
 801702e:	4816      	ldr	r0, [pc, #88]	; (8017088 <netconn_new_with_proto_and_callback+0xe4>)
 8017030:	f00e fb1e 	bl	8025670 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8017034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017036:	330c      	adds	r3, #12
 8017038:	4618      	mov	r0, r3
 801703a:	f00c f8d4 	bl	80231e6 <sys_sem_valid>
 801703e:	4603      	mov	r3, r0
 8017040:	2b00      	cmp	r3, #0
 8017042:	d105      	bne.n	8017050 <netconn_new_with_proto_and_callback+0xac>
 8017044:	4b0e      	ldr	r3, [pc, #56]	; (8017080 <netconn_new_with_proto_and_callback+0xdc>)
 8017046:	228f      	movs	r2, #143	; 0x8f
 8017048:	4912      	ldr	r1, [pc, #72]	; (8017094 <netconn_new_with_proto_and_callback+0xf0>)
 801704a:	480f      	ldr	r0, [pc, #60]	; (8017088 <netconn_new_with_proto_and_callback+0xe4>)
 801704c:	f00e fb10 	bl	8025670 <iprintf>
      sys_sem_free(&conn->op_completed);
 8017050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017052:	330c      	adds	r3, #12
 8017054:	4618      	mov	r0, r3
 8017056:	f00c f8b9 	bl	80231cc <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801705c:	3310      	adds	r3, #16
 801705e:	4618      	mov	r0, r3
 8017060:	f00b ff96 	bl	8022f90 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8017064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017066:	2007      	movs	r0, #7
 8017068:	f005 f8ac 	bl	801c1c4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801706c:	2300      	movs	r3, #0
 801706e:	e000      	b.n	8017072 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8017070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017072:	4618      	mov	r0, r3
 8017074:	3728      	adds	r7, #40	; 0x28
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}
 801707a:	bf00      	nop
 801707c:	08017e75 	.word	0x08017e75
 8017080:	08026240 	.word	0x08026240
 8017084:	08026274 	.word	0x08026274
 8017088:	08026298 	.word	0x08026298
 801708c:	080262c0 	.word	0x080262c0
 8017090:	080262d8 	.word	0x080262d8
 8017094:	080262fc 	.word	0x080262fc

08017098 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b088      	sub	sp, #32
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d101      	bne.n	80170aa <netconn_delete+0x12>
    return ERR_OK;
 80170a6:	2300      	movs	r3, #0
 80170a8:	e016      	b.n	80170d8 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80170ae:	2329      	movs	r3, #41	; 0x29
 80170b0:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80170b2:	f107 0308 	add.w	r3, r7, #8
 80170b6:	4619      	mov	r1, r3
 80170b8:	4809      	ldr	r0, [pc, #36]	; (80170e0 <netconn_delete+0x48>)
 80170ba:	f7ff ff55 	bl	8016f68 <netconn_apimsg>
 80170be:	4603      	mov	r3, r0
 80170c0:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80170c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d002      	beq.n	80170d0 <netconn_delete+0x38>
    return err;
 80170ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80170ce:	e003      	b.n	80170d8 <netconn_delete+0x40>
  }

  netconn_free(conn);
 80170d0:	6878      	ldr	r0, [r7, #4]
 80170d2:	f000 ff6b 	bl	8017fac <netconn_free>

  return ERR_OK;
 80170d6:	2300      	movs	r3, #0
}
 80170d8:	4618      	mov	r0, r3
 80170da:	3720      	adds	r7, #32
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}
 80170e0:	08018431 	.word	0x08018431

080170e4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b08a      	sub	sp, #40	; 0x28
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	60f8      	str	r0, [r7, #12]
 80170ec:	60b9      	str	r1, [r7, #8]
 80170ee:	4613      	mov	r3, r2
 80170f0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d108      	bne.n	801710a <netconn_bind+0x26>
 80170f8:	4b11      	ldr	r3, [pc, #68]	; (8017140 <netconn_bind+0x5c>)
 80170fa:	22ff      	movs	r2, #255	; 0xff
 80170fc:	4911      	ldr	r1, [pc, #68]	; (8017144 <netconn_bind+0x60>)
 80170fe:	4812      	ldr	r0, [pc, #72]	; (8017148 <netconn_bind+0x64>)
 8017100:	f00e fab6 	bl	8025670 <iprintf>
 8017104:	f06f 030f 	mvn.w	r3, #15
 8017108:	e015      	b.n	8017136 <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 801710a:	68bb      	ldr	r3, [r7, #8]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d101      	bne.n	8017114 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8017110:	4b0e      	ldr	r3, [pc, #56]	; (801714c <netconn_bind+0x68>)
 8017112:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801711c:	88fb      	ldrh	r3, [r7, #6]
 801711e:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8017120:	f107 0310 	add.w	r3, r7, #16
 8017124:	4619      	mov	r1, r3
 8017126:	480a      	ldr	r0, [pc, #40]	; (8017150 <netconn_bind+0x6c>)
 8017128:	f7ff ff1e 	bl	8016f68 <netconn_apimsg>
 801712c:	4603      	mov	r3, r0
 801712e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8017132:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017136:	4618      	mov	r0, r3
 8017138:	3728      	adds	r7, #40	; 0x28
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}
 801713e:	bf00      	nop
 8017140:	08026240 	.word	0x08026240
 8017144:	08026378 	.word	0x08026378
 8017148:	08026298 	.word	0x08026298
 801714c:	0802ae60 	.word	0x0802ae60
 8017150:	08018635 	.word	0x08018635

08017154 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b088      	sub	sp, #32
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
 801715c:	460b      	mov	r3, r1
 801715e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d109      	bne.n	801717a <netconn_listen_with_backlog+0x26>
 8017166:	4b0d      	ldr	r3, [pc, #52]	; (801719c <netconn_listen_with_backlog+0x48>)
 8017168:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801716c:	490c      	ldr	r1, [pc, #48]	; (80171a0 <netconn_listen_with_backlog+0x4c>)
 801716e:	480d      	ldr	r0, [pc, #52]	; (80171a4 <netconn_listen_with_backlog+0x50>)
 8017170:	f00e fa7e 	bl	8025670 <iprintf>
 8017174:	f06f 030f 	mvn.w	r3, #15
 8017178:	e00b      	b.n	8017192 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 801717e:	f107 0308 	add.w	r3, r7, #8
 8017182:	4619      	mov	r1, r3
 8017184:	4808      	ldr	r0, [pc, #32]	; (80171a8 <netconn_listen_with_backlog+0x54>)
 8017186:	f7ff feef 	bl	8016f68 <netconn_apimsg>
 801718a:	4603      	mov	r3, r0
 801718c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 801718e:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8017192:	4618      	mov	r0, r3
 8017194:	3720      	adds	r7, #32
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}
 801719a:	bf00      	nop
 801719c:	08026240 	.word	0x08026240
 80171a0:	080263d8 	.word	0x080263d8
 80171a4:	08026298 	.word	0x08026298
 80171a8:	080186f5 	.word	0x080186f5

080171ac <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b086      	sub	sp, #24
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	6078      	str	r0, [r7, #4]
 80171b4:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d109      	bne.n	80171d0 <netconn_accept+0x24>
 80171bc:	4b34      	ldr	r3, [pc, #208]	; (8017290 <netconn_accept+0xe4>)
 80171be:	f240 128d 	movw	r2, #397	; 0x18d
 80171c2:	4934      	ldr	r1, [pc, #208]	; (8017294 <netconn_accept+0xe8>)
 80171c4:	4834      	ldr	r0, [pc, #208]	; (8017298 <netconn_accept+0xec>)
 80171c6:	f00e fa53 	bl	8025670 <iprintf>
 80171ca:	f06f 030f 	mvn.w	r3, #15
 80171ce:	e05b      	b.n	8017288 <netconn_accept+0xdc>
  *new_conn = NULL;
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	2200      	movs	r2, #0
 80171d4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d109      	bne.n	80171f0 <netconn_accept+0x44>
 80171dc:	4b2c      	ldr	r3, [pc, #176]	; (8017290 <netconn_accept+0xe4>)
 80171de:	f240 128f 	movw	r2, #399	; 0x18f
 80171e2:	492e      	ldr	r1, [pc, #184]	; (801729c <netconn_accept+0xf0>)
 80171e4:	482c      	ldr	r0, [pc, #176]	; (8017298 <netconn_accept+0xec>)
 80171e6:	f00e fa43 	bl	8025670 <iprintf>
 80171ea:	f06f 030f 	mvn.w	r3, #15
 80171ee:	e04b      	b.n	8017288 <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80171f6:	f113 0f0c 	cmn.w	r3, #12
 80171fa:	da03      	bge.n	8017204 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017202:	e041      	b.n	8017288 <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	3314      	adds	r3, #20
 8017208:	4618      	mov	r0, r3
 801720a:	f00b ff5d 	bl	80230c8 <sys_mbox_valid>
 801720e:	4603      	mov	r3, r0
 8017210:	2b00      	cmp	r3, #0
 8017212:	d102      	bne.n	801721a <netconn_accept+0x6e>
    return ERR_CLSD;
 8017214:	f06f 030e 	mvn.w	r3, #14
 8017218:	e036      	b.n	8017288 <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	3314      	adds	r3, #20
 801721e:	f107 010c 	add.w	r1, r7, #12
 8017222:	2200      	movs	r2, #0
 8017224:	4618      	mov	r0, r3
 8017226:	f00b fef4 	bl	8023012 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017232:	2b00      	cmp	r3, #0
 8017234:	d005      	beq.n	8017242 <netconn_accept+0x96>
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801723a:	2200      	movs	r2, #0
 801723c:	2101      	movs	r1, #1
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	4a16      	ldr	r2, [pc, #88]	; (80172a0 <netconn_accept+0xf4>)
 8017246:	4293      	cmp	r3, r2
 8017248:	d102      	bne.n	8017250 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 801724a:	f06f 030c 	mvn.w	r3, #12
 801724e:	e01b      	b.n	8017288 <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8017250:	697b      	ldr	r3, [r7, #20]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d114      	bne.n	8017280 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d00e      	beq.n	801727a <netconn_accept+0xce>
 801725c:	f00c f844 	bl	80232e8 <sys_arch_protect>
 8017260:	6138      	str	r0, [r7, #16]
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017268:	f113 0f0c 	cmn.w	r3, #12
 801726c:	db02      	blt.n	8017274 <netconn_accept+0xc8>
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	22f1      	movs	r2, #241	; 0xf1
 8017272:	721a      	strb	r2, [r3, #8]
 8017274:	6938      	ldr	r0, [r7, #16]
 8017276:	f00c f845 	bl	8023304 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 801727a:	f06f 030e 	mvn.w	r3, #14
 801727e:	e003      	b.n	8017288 <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8017280:	683b      	ldr	r3, [r7, #0]
 8017282:	697a      	ldr	r2, [r7, #20]
 8017284:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8017286:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8017288:	4618      	mov	r0, r3
 801728a:	3718      	adds	r7, #24
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}
 8017290:	08026240 	.word	0x08026240
 8017294:	080263f8 	.word	0x080263f8
 8017298:	08026298 	.word	0x08026298
 801729c:	08026418 	.word	0x08026418
 80172a0:	200045f4 	.word	0x200045f4

080172a4 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b08a      	sub	sp, #40	; 0x28
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 80172ae:	2300      	movs	r3, #0
 80172b0:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d109      	bne.n	80172cc <netconn_recv_data+0x28>
 80172b8:	4b5c      	ldr	r3, [pc, #368]	; (801742c <netconn_recv_data+0x188>)
 80172ba:	f240 12e7 	movw	r2, #487	; 0x1e7
 80172be:	495c      	ldr	r1, [pc, #368]	; (8017430 <netconn_recv_data+0x18c>)
 80172c0:	485c      	ldr	r0, [pc, #368]	; (8017434 <netconn_recv_data+0x190>)
 80172c2:	f00e f9d5 	bl	8025670 <iprintf>
 80172c6:	f06f 030f 	mvn.w	r3, #15
 80172ca:	e0aa      	b.n	8017422 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 80172cc:	683b      	ldr	r3, [r7, #0]
 80172ce:	2200      	movs	r2, #0
 80172d0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d109      	bne.n	80172ec <netconn_recv_data+0x48>
 80172d8:	4b54      	ldr	r3, [pc, #336]	; (801742c <netconn_recv_data+0x188>)
 80172da:	f240 12e9 	movw	r2, #489	; 0x1e9
 80172de:	4956      	ldr	r1, [pc, #344]	; (8017438 <netconn_recv_data+0x194>)
 80172e0:	4854      	ldr	r0, [pc, #336]	; (8017434 <netconn_recv_data+0x190>)
 80172e2:	f00e f9c5 	bl	8025670 <iprintf>
 80172e6:	f06f 030f 	mvn.w	r3, #15
 80172ea:	e09a      	b.n	8017422 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80172f4:	2b10      	cmp	r3, #16
 80172f6:	d115      	bne.n	8017324 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	3310      	adds	r3, #16
 80172fc:	4618      	mov	r0, r3
 80172fe:	f00b fee3 	bl	80230c8 <sys_mbox_valid>
 8017302:	4603      	mov	r3, r0
 8017304:	2b00      	cmp	r3, #0
 8017306:	d10d      	bne.n	8017324 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	3314      	adds	r3, #20
 801730c:	4618      	mov	r0, r3
 801730e:	f00b fedb 	bl	80230c8 <sys_mbox_valid>
 8017312:	4603      	mov	r3, r0
 8017314:	2b00      	cmp	r3, #0
 8017316:	d002      	beq.n	801731e <netconn_recv_data+0x7a>
 8017318:	f06f 030a 	mvn.w	r3, #10
 801731c:	e081      	b.n	8017422 <netconn_recv_data+0x17e>
 801731e:	f06f 030e 	mvn.w	r3, #14
 8017322:	e07e      	b.n	8017422 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	3310      	adds	r3, #16
 8017328:	4618      	mov	r0, r3
 801732a:	f00b fecd 	bl	80230c8 <sys_mbox_valid>
 801732e:	4603      	mov	r3, r0
 8017330:	2b00      	cmp	r3, #0
 8017332:	d109      	bne.n	8017348 <netconn_recv_data+0xa4>
 8017334:	4b3d      	ldr	r3, [pc, #244]	; (801742c <netconn_recv_data+0x188>)
 8017336:	f240 12f5 	movw	r2, #501	; 0x1f5
 801733a:	4940      	ldr	r1, [pc, #256]	; (801743c <netconn_recv_data+0x198>)
 801733c:	483d      	ldr	r0, [pc, #244]	; (8017434 <netconn_recv_data+0x190>)
 801733e:	f00e f997 	bl	8025670 <iprintf>
 8017342:	f06f 030a 	mvn.w	r3, #10
 8017346:	e06c      	b.n	8017422 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801734e:	f113 0f0c 	cmn.w	r3, #12
 8017352:	da03      	bge.n	801735c <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801735a:	e062      	b.n	8017422 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	3310      	adds	r3, #16
 8017360:	f107 0120 	add.w	r1, r7, #32
 8017364:	2200      	movs	r2, #0
 8017366:	4618      	mov	r0, r3
 8017368:	f00b fe53 	bl	8023012 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	781b      	ldrb	r3, [r3, #0]
 8017370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017374:	2b10      	cmp	r3, #16
 8017376:	d138      	bne.n	80173ea <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 801737c:	6a3b      	ldr	r3, [r7, #32]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d003      	beq.n	801738a <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8017382:	6a3b      	ldr	r3, [r7, #32]
 8017384:	891b      	ldrh	r3, [r3, #8]
 8017386:	617b      	str	r3, [r7, #20]
 8017388:	e001      	b.n	801738e <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 801738a:	2301      	movs	r3, #1
 801738c:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 801738e:	f107 030c 	add.w	r3, r7, #12
 8017392:	4619      	mov	r1, r3
 8017394:	482a      	ldr	r0, [pc, #168]	; (8017440 <netconn_recv_data+0x19c>)
 8017396:	f7ff fde7 	bl	8016f68 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 801739a:	6a3b      	ldr	r3, [r7, #32]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d120      	bne.n	80173e2 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d005      	beq.n	80173b4 <netconn_recv_data+0x110>
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173ac:	2200      	movs	r2, #0
 80173ae:	2101      	movs	r1, #1
 80173b0:	6878      	ldr	r0, [r7, #4]
 80173b2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	685b      	ldr	r3, [r3, #4]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d10b      	bne.n	80173d4 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d003      	beq.n	80173ce <netconn_recv_data+0x12a>
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80173cc:	e029      	b.n	8017422 <netconn_recv_data+0x17e>
 80173ce:	f06f 030d 	mvn.w	r3, #13
 80173d2:	e026      	b.n	8017422 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80173d4:	2101      	movs	r1, #1
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f000 f926 	bl	8017628 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80173dc:	f06f 030e 	mvn.w	r3, #14
 80173e0:	e01f      	b.n	8017422 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80173e2:	6a3b      	ldr	r3, [r7, #32]
 80173e4:	891b      	ldrh	r3, [r3, #8]
 80173e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80173e8:	e00d      	b.n	8017406 <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80173ea:	6a3b      	ldr	r3, [r7, #32]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d106      	bne.n	80173fe <netconn_recv_data+0x15a>
 80173f0:	4b0e      	ldr	r3, [pc, #56]	; (801742c <netconn_recv_data+0x188>)
 80173f2:	f240 223e 	movw	r2, #574	; 0x23e
 80173f6:	4913      	ldr	r1, [pc, #76]	; (8017444 <netconn_recv_data+0x1a0>)
 80173f8:	480e      	ldr	r0, [pc, #56]	; (8017434 <netconn_recv_data+0x190>)
 80173fa:	f00e f939 	bl	8025670 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 80173fe:	6a3b      	ldr	r3, [r7, #32]
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	891b      	ldrh	r3, [r3, #8]
 8017404:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801740a:	2b00      	cmp	r3, #0
 801740c:	d005      	beq.n	801741a <netconn_recv_data+0x176>
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017412:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017414:	2101      	movs	r1, #1
 8017416:	6878      	ldr	r0, [r7, #4]
 8017418:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801741a:	6a3a      	ldr	r2, [r7, #32]
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8017420:	2300      	movs	r3, #0
}
 8017422:	4618      	mov	r0, r3
 8017424:	3728      	adds	r7, #40	; 0x28
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	08026240 	.word	0x08026240
 8017430:	08026438 	.word	0x08026438
 8017434:	08026298 	.word	0x08026298
 8017438:	08026458 	.word	0x08026458
 801743c:	08026474 	.word	0x08026474
 8017440:	08018879 	.word	0x08018879
 8017444:	08026494 	.word	0x08026494

08017448 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b086      	sub	sp, #24
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8017452:	2300      	movs	r3, #0
 8017454:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d109      	bne.n	8017470 <netconn_recv+0x28>
 801745c:	4b31      	ldr	r3, [pc, #196]	; (8017524 <netconn_recv+0xdc>)
 801745e:	f44f 721d 	mov.w	r2, #628	; 0x274
 8017462:	4931      	ldr	r1, [pc, #196]	; (8017528 <netconn_recv+0xe0>)
 8017464:	4831      	ldr	r0, [pc, #196]	; (801752c <netconn_recv+0xe4>)
 8017466:	f00e f903 	bl	8025670 <iprintf>
 801746a:	f06f 030f 	mvn.w	r3, #15
 801746e:	e054      	b.n	801751a <netconn_recv+0xd2>
  *new_buf = NULL;
 8017470:	683b      	ldr	r3, [r7, #0]
 8017472:	2200      	movs	r2, #0
 8017474:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d109      	bne.n	8017490 <netconn_recv+0x48>
 801747c:	4b29      	ldr	r3, [pc, #164]	; (8017524 <netconn_recv+0xdc>)
 801747e:	f240 2276 	movw	r2, #630	; 0x276
 8017482:	492b      	ldr	r1, [pc, #172]	; (8017530 <netconn_recv+0xe8>)
 8017484:	4829      	ldr	r0, [pc, #164]	; (801752c <netconn_recv+0xe4>)
 8017486:	f00e f8f3 	bl	8025670 <iprintf>
 801748a:	f06f 030f 	mvn.w	r3, #15
 801748e:	e044      	b.n	801751a <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017498:	2b10      	cmp	r3, #16
 801749a:	d139      	bne.n	8017510 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 801749c:	2300      	movs	r3, #0
 801749e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80174a0:	2006      	movs	r0, #6
 80174a2:	f004 fe3d 	bl	801c120 <memp_malloc>
 80174a6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80174a8:	697b      	ldr	r3, [r7, #20]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d102      	bne.n	80174b4 <netconn_recv+0x6c>
      return ERR_MEM;
 80174ae:	f04f 33ff 	mov.w	r3, #4294967295
 80174b2:	e032      	b.n	801751a <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 80174b4:	f107 030c 	add.w	r3, r7, #12
 80174b8:	4619      	mov	r1, r3
 80174ba:	6878      	ldr	r0, [r7, #4]
 80174bc:	f7ff fef2 	bl	80172a4 <netconn_recv_data>
 80174c0:	4603      	mov	r3, r0
 80174c2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80174c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d006      	beq.n	80174da <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 80174cc:	6979      	ldr	r1, [r7, #20]
 80174ce:	2006      	movs	r0, #6
 80174d0:	f004 fe78 	bl	801c1c4 <memp_free>
      return err;
 80174d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174d8:	e01f      	b.n	801751a <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d106      	bne.n	80174ee <netconn_recv+0xa6>
 80174e0:	4b10      	ldr	r3, [pc, #64]	; (8017524 <netconn_recv+0xdc>)
 80174e2:	f240 228a 	movw	r2, #650	; 0x28a
 80174e6:	4913      	ldr	r1, [pc, #76]	; (8017534 <netconn_recv+0xec>)
 80174e8:	4810      	ldr	r0, [pc, #64]	; (801752c <netconn_recv+0xe4>)
 80174ea:	f00e f8c1 	bl	8025670 <iprintf>

    buf->p = p;
 80174ee:	68fa      	ldr	r2, [r7, #12]
 80174f0:	697b      	ldr	r3, [r7, #20]
 80174f2:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80174f4:	68fa      	ldr	r2, [r7, #12]
 80174f6:	697b      	ldr	r3, [r7, #20]
 80174f8:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	2200      	movs	r2, #0
 80174fe:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8017500:	697b      	ldr	r3, [r7, #20]
 8017502:	2200      	movs	r2, #0
 8017504:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	697a      	ldr	r2, [r7, #20]
 801750a:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 801750c:	2300      	movs	r3, #0
 801750e:	e004      	b.n	801751a <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 8017510:	6839      	ldr	r1, [r7, #0]
 8017512:	6878      	ldr	r0, [r7, #4]
 8017514:	f7ff fec6 	bl	80172a4 <netconn_recv_data>
 8017518:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 801751a:	4618      	mov	r0, r3
 801751c:	3718      	adds	r7, #24
 801751e:	46bd      	mov	sp, r7
 8017520:	bd80      	pop	{r7, pc}
 8017522:	bf00      	nop
 8017524:	08026240 	.word	0x08026240
 8017528:	08026438 	.word	0x08026438
 801752c:	08026298 	.word	0x08026298
 8017530:	08026458 	.word	0x08026458
 8017534:	080264a0 	.word	0x080264a0

08017538 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b08a      	sub	sp, #40	; 0x28
 801753c:	af00      	add	r7, sp, #0
 801753e:	60f8      	str	r0, [r7, #12]
 8017540:	60b9      	str	r1, [r7, #8]
 8017542:	607a      	str	r2, [r7, #4]
 8017544:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d109      	bne.n	8017560 <netconn_write_partly+0x28>
 801754c:	4b31      	ldr	r3, [pc, #196]	; (8017614 <netconn_write_partly+0xdc>)
 801754e:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017552:	4931      	ldr	r1, [pc, #196]	; (8017618 <netconn_write_partly+0xe0>)
 8017554:	4831      	ldr	r0, [pc, #196]	; (801761c <netconn_write_partly+0xe4>)
 8017556:	f00e f88b 	bl	8025670 <iprintf>
 801755a:	f06f 030f 	mvn.w	r3, #15
 801755e:	e054      	b.n	801760a <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	781b      	ldrb	r3, [r3, #0]
 8017564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017568:	2b10      	cmp	r3, #16
 801756a:	d009      	beq.n	8017580 <netconn_write_partly+0x48>
 801756c:	4b29      	ldr	r3, [pc, #164]	; (8017614 <netconn_write_partly+0xdc>)
 801756e:	f240 22e7 	movw	r2, #743	; 0x2e7
 8017572:	492b      	ldr	r1, [pc, #172]	; (8017620 <netconn_write_partly+0xe8>)
 8017574:	4829      	ldr	r0, [pc, #164]	; (801761c <netconn_write_partly+0xe4>)
 8017576:	f00e f87b 	bl	8025670 <iprintf>
 801757a:	f06f 0305 	mvn.w	r3, #5
 801757e:	e044      	b.n	801760a <netconn_write_partly+0xd2>
  if (size == 0) {
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d101      	bne.n	801758a <netconn_write_partly+0x52>
    return ERR_OK;
 8017586:	2300      	movs	r3, #0
 8017588:	e03f      	b.n	801760a <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	7f1b      	ldrb	r3, [r3, #28]
 801758e:	f003 0302 	and.w	r3, r3, #2
 8017592:	2b00      	cmp	r3, #0
 8017594:	d104      	bne.n	80175a0 <netconn_write_partly+0x68>
 8017596:	78fb      	ldrb	r3, [r7, #3]
 8017598:	f003 0304 	and.w	r3, r3, #4
 801759c:	2b00      	cmp	r3, #0
 801759e:	d001      	beq.n	80175a4 <netconn_write_partly+0x6c>
 80175a0:	2301      	movs	r3, #1
 80175a2:	e000      	b.n	80175a6 <netconn_write_partly+0x6e>
 80175a4:	2300      	movs	r3, #0
 80175a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80175aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d005      	beq.n	80175be <netconn_write_partly+0x86>
 80175b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d102      	bne.n	80175be <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80175b8:	f06f 0305 	mvn.w	r3, #5
 80175bc:	e025      	b.n	801760a <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 80175c2:	68bb      	ldr	r3, [r7, #8]
 80175c4:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80175c6:	78fb      	ldrb	r3, [r7, #3]
 80175c8:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80175d0:	f107 0310 	add.w	r3, r7, #16
 80175d4:	4619      	mov	r1, r3
 80175d6:	4813      	ldr	r0, [pc, #76]	; (8017624 <netconn_write_partly+0xec>)
 80175d8:	f7ff fcc6 	bl	8016f68 <netconn_apimsg>
 80175dc:	4603      	mov	r3, r0
 80175de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 80175e2:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d10d      	bne.n	8017606 <netconn_write_partly+0xce>
 80175ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d00a      	beq.n	8017606 <netconn_write_partly+0xce>
    if (dontblock) {
 80175f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d003      	beq.n	8017600 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 80175f8:	69fa      	ldr	r2, [r7, #28]
 80175fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175fc:	601a      	str	r2, [r3, #0]
 80175fe:	e002      	b.n	8017606 <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8017600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017602:	687a      	ldr	r2, [r7, #4]
 8017604:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8017606:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 801760a:	4618      	mov	r0, r3
 801760c:	3728      	adds	r7, #40	; 0x28
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
 8017612:	bf00      	nop
 8017614:	08026240 	.word	0x08026240
 8017618:	080264c8 	.word	0x080264c8
 801761c:	08026298 	.word	0x08026298
 8017620:	080264e4 	.word	0x080264e4
 8017624:	08018c59 	.word	0x08018c59

08017628 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b088      	sub	sp, #32
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
 8017630:	460b      	mov	r3, r1
 8017632:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d109      	bne.n	801764e <netconn_close_shutdown+0x26>
 801763a:	4b0f      	ldr	r3, [pc, #60]	; (8017678 <netconn_close_shutdown+0x50>)
 801763c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8017640:	490e      	ldr	r1, [pc, #56]	; (801767c <netconn_close_shutdown+0x54>)
 8017642:	480f      	ldr	r0, [pc, #60]	; (8017680 <netconn_close_shutdown+0x58>)
 8017644:	f00e f814 	bl	8025670 <iprintf>
 8017648:	f06f 030f 	mvn.w	r3, #15
 801764c:	e00f      	b.n	801766e <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8017652:	78fb      	ldrb	r3, [r7, #3]
 8017654:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8017656:	2329      	movs	r3, #41	; 0x29
 8017658:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801765a:	f107 0308 	add.w	r3, r7, #8
 801765e:	4619      	mov	r1, r3
 8017660:	4808      	ldr	r0, [pc, #32]	; (8017684 <netconn_close_shutdown+0x5c>)
 8017662:	f7ff fc81 	bl	8016f68 <netconn_apimsg>
 8017666:	4603      	mov	r3, r0
 8017668:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 801766a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801766e:	4618      	mov	r0, r3
 8017670:	3720      	adds	r7, #32
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}
 8017676:	bf00      	nop
 8017678:	08026240 	.word	0x08026240
 801767c:	08026508 	.word	0x08026508
 8017680:	08026298 	.word	0x08026298
 8017684:	08018db9 	.word	0x08018db9

08017688 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b082      	sub	sp, #8
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8017690:	2103      	movs	r1, #3
 8017692:	6878      	ldr	r0, [r7, #4]
 8017694:	f7ff ffc8 	bl	8017628 <netconn_close_shutdown>
 8017698:	4603      	mov	r3, r0
}
 801769a:	4618      	mov	r0, r3
 801769c:	3708      	adds	r7, #8
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
	...

080176a4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b088      	sub	sp, #32
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	60f8      	str	r0, [r7, #12]
 80176ac:	60b9      	str	r1, [r7, #8]
 80176ae:	607a      	str	r2, [r7, #4]
 80176b0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80176b2:	68bb      	ldr	r3, [r7, #8]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d105      	bne.n	80176c4 <recv_udp+0x20>
 80176b8:	4b34      	ldr	r3, [pc, #208]	; (801778c <recv_udp+0xe8>)
 80176ba:	22b1      	movs	r2, #177	; 0xb1
 80176bc:	4934      	ldr	r1, [pc, #208]	; (8017790 <recv_udp+0xec>)
 80176be:	4835      	ldr	r0, [pc, #212]	; (8017794 <recv_udp+0xf0>)
 80176c0:	f00d ffd6 	bl	8025670 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d105      	bne.n	80176d6 <recv_udp+0x32>
 80176ca:	4b30      	ldr	r3, [pc, #192]	; (801778c <recv_udp+0xe8>)
 80176cc:	22b2      	movs	r2, #178	; 0xb2
 80176ce:	4932      	ldr	r1, [pc, #200]	; (8017798 <recv_udp+0xf4>)
 80176d0:	4830      	ldr	r0, [pc, #192]	; (8017794 <recv_udp+0xf0>)
 80176d2:	f00d ffcd 	bl	8025670 <iprintf>
  conn = (struct netconn *)arg;
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80176da:	69fb      	ldr	r3, [r7, #28]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d103      	bne.n	80176e8 <recv_udp+0x44>
    pbuf_free(p);
 80176e0:	6878      	ldr	r0, [r7, #4]
 80176e2:	f005 fac9 	bl	801cc78 <pbuf_free>
    return;
 80176e6:	e04d      	b.n	8017784 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80176e8:	69fb      	ldr	r3, [r7, #28]
 80176ea:	685a      	ldr	r2, [r3, #4]
 80176ec:	68bb      	ldr	r3, [r7, #8]
 80176ee:	429a      	cmp	r2, r3
 80176f0:	d005      	beq.n	80176fe <recv_udp+0x5a>
 80176f2:	4b26      	ldr	r3, [pc, #152]	; (801778c <recv_udp+0xe8>)
 80176f4:	22ba      	movs	r2, #186	; 0xba
 80176f6:	4929      	ldr	r1, [pc, #164]	; (801779c <recv_udp+0xf8>)
 80176f8:	4826      	ldr	r0, [pc, #152]	; (8017794 <recv_udp+0xf0>)
 80176fa:	f00d ffb9 	bl	8025670 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80176fe:	69fb      	ldr	r3, [r7, #28]
 8017700:	3310      	adds	r3, #16
 8017702:	4618      	mov	r0, r3
 8017704:	f00b fce0 	bl	80230c8 <sys_mbox_valid>
 8017708:	4603      	mov	r3, r0
 801770a:	2b00      	cmp	r3, #0
 801770c:	d103      	bne.n	8017716 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 801770e:	6878      	ldr	r0, [r7, #4]
 8017710:	f005 fab2 	bl	801cc78 <pbuf_free>
    return;
 8017714:	e036      	b.n	8017784 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8017716:	2006      	movs	r0, #6
 8017718:	f004 fd02 	bl	801c120 <memp_malloc>
 801771c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 801771e:	69bb      	ldr	r3, [r7, #24]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d103      	bne.n	801772c <recv_udp+0x88>
    pbuf_free(p);
 8017724:	6878      	ldr	r0, [r7, #4]
 8017726:	f005 faa7 	bl	801cc78 <pbuf_free>
    return;
 801772a:	e02b      	b.n	8017784 <recv_udp+0xe0>
  } else {
    buf->p = p;
 801772c:	69bb      	ldr	r3, [r7, #24]
 801772e:	687a      	ldr	r2, [r7, #4]
 8017730:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8017732:	69bb      	ldr	r3, [r7, #24]
 8017734:	687a      	ldr	r2, [r7, #4]
 8017736:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d002      	beq.n	8017744 <recv_udp+0xa0>
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	e000      	b.n	8017746 <recv_udp+0xa2>
 8017744:	2300      	movs	r3, #0
 8017746:	69ba      	ldr	r2, [r7, #24]
 8017748:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801774e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	891b      	ldrh	r3, [r3, #8]
 8017754:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8017756:	69fb      	ldr	r3, [r7, #28]
 8017758:	3310      	adds	r3, #16
 801775a:	69b9      	ldr	r1, [r7, #24]
 801775c:	4618      	mov	r0, r3
 801775e:	f00b fc3e 	bl	8022fde <sys_mbox_trypost>
 8017762:	4603      	mov	r3, r0
 8017764:	2b00      	cmp	r3, #0
 8017766:	d003      	beq.n	8017770 <recv_udp+0xcc>
    netbuf_delete(buf);
 8017768:	69b8      	ldr	r0, [r7, #24]
 801776a:	f001 fbcd 	bl	8018f08 <netbuf_delete>
    return;
 801776e:	e009      	b.n	8017784 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8017770:	69fb      	ldr	r3, [r7, #28]
 8017772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017774:	2b00      	cmp	r3, #0
 8017776:	d005      	beq.n	8017784 <recv_udp+0xe0>
 8017778:	69fb      	ldr	r3, [r7, #28]
 801777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801777c:	8afa      	ldrh	r2, [r7, #22]
 801777e:	2100      	movs	r1, #0
 8017780:	69f8      	ldr	r0, [r7, #28]
 8017782:	4798      	blx	r3
  }
}
 8017784:	3720      	adds	r7, #32
 8017786:	46bd      	mov	sp, r7
 8017788:	bd80      	pop	{r7, pc}
 801778a:	bf00      	nop
 801778c:	08026524 	.word	0x08026524
 8017790:	08026558 	.word	0x08026558
 8017794:	0802657c 	.word	0x0802657c
 8017798:	080265a4 	.word	0x080265a4
 801779c:	080265c4 	.word	0x080265c4

080177a0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b088      	sub	sp, #32
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	60f8      	str	r0, [r7, #12]
 80177a8:	60b9      	str	r1, [r7, #8]
 80177aa:	607a      	str	r2, [r7, #4]
 80177ac:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80177ae:	68bb      	ldr	r3, [r7, #8]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d105      	bne.n	80177c0 <recv_tcp+0x20>
 80177b4:	4b39      	ldr	r3, [pc, #228]	; (801789c <recv_tcp+0xfc>)
 80177b6:	22f9      	movs	r2, #249	; 0xf9
 80177b8:	4939      	ldr	r1, [pc, #228]	; (80178a0 <recv_tcp+0x100>)
 80177ba:	483a      	ldr	r0, [pc, #232]	; (80178a4 <recv_tcp+0x104>)
 80177bc:	f00d ff58 	bl	8025670 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d105      	bne.n	80177d2 <recv_tcp+0x32>
 80177c6:	4b35      	ldr	r3, [pc, #212]	; (801789c <recv_tcp+0xfc>)
 80177c8:	22fa      	movs	r2, #250	; 0xfa
 80177ca:	4937      	ldr	r1, [pc, #220]	; (80178a8 <recv_tcp+0x108>)
 80177cc:	4835      	ldr	r0, [pc, #212]	; (80178a4 <recv_tcp+0x104>)
 80177ce:	f00d ff4f 	bl	8025670 <iprintf>
  conn = (struct netconn *)arg;
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80177d6:	69bb      	ldr	r3, [r7, #24]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d102      	bne.n	80177e2 <recv_tcp+0x42>
    return ERR_VAL;
 80177dc:	f06f 0305 	mvn.w	r3, #5
 80177e0:	e057      	b.n	8017892 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80177e2:	69bb      	ldr	r3, [r7, #24]
 80177e4:	685a      	ldr	r2, [r3, #4]
 80177e6:	68bb      	ldr	r3, [r7, #8]
 80177e8:	429a      	cmp	r2, r3
 80177ea:	d006      	beq.n	80177fa <recv_tcp+0x5a>
 80177ec:	4b2b      	ldr	r3, [pc, #172]	; (801789c <recv_tcp+0xfc>)
 80177ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80177f2:	492e      	ldr	r1, [pc, #184]	; (80178ac <recv_tcp+0x10c>)
 80177f4:	482b      	ldr	r0, [pc, #172]	; (80178a4 <recv_tcp+0x104>)
 80177f6:	f00d ff3b 	bl	8025670 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 80177fa:	69bb      	ldr	r3, [r7, #24]
 80177fc:	3310      	adds	r3, #16
 80177fe:	4618      	mov	r0, r3
 8017800:	f00b fc62 	bl	80230c8 <sys_mbox_valid>
 8017804:	4603      	mov	r3, r0
 8017806:	2b00      	cmp	r3, #0
 8017808:	d10d      	bne.n	8017826 <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d008      	beq.n	8017822 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	891b      	ldrh	r3, [r3, #8]
 8017814:	4619      	mov	r1, r3
 8017816:	68b8      	ldr	r0, [r7, #8]
 8017818:	f006 f90a 	bl	801da30 <tcp_recved>
      pbuf_free(p);
 801781c:	6878      	ldr	r0, [r7, #4]
 801781e:	f005 fa2b 	bl	801cc78 <pbuf_free>
    }
    return ERR_OK;
 8017822:	2300      	movs	r3, #0
 8017824:	e035      	b.n	8017892 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8017826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d011      	beq.n	8017852 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 801782e:	69bb      	ldr	r3, [r7, #24]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d00e      	beq.n	8017852 <recv_tcp+0xb2>
 8017834:	f00b fd58 	bl	80232e8 <sys_arch_protect>
 8017838:	6178      	str	r0, [r7, #20]
 801783a:	69bb      	ldr	r3, [r7, #24]
 801783c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017840:	f113 0f0c 	cmn.w	r3, #12
 8017844:	db02      	blt.n	801784c <recv_tcp+0xac>
 8017846:	69bb      	ldr	r3, [r7, #24]
 8017848:	78fa      	ldrb	r2, [r7, #3]
 801784a:	721a      	strb	r2, [r3, #8]
 801784c:	6978      	ldr	r0, [r7, #20]
 801784e:	f00b fd59 	bl	8023304 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d003      	beq.n	8017860 <recv_tcp+0xc0>
    len = p->tot_len;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	891b      	ldrh	r3, [r3, #8]
 801785c:	83fb      	strh	r3, [r7, #30]
 801785e:	e001      	b.n	8017864 <recv_tcp+0xc4>
  } else {
    len = 0;
 8017860:	2300      	movs	r3, #0
 8017862:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8017864:	69bb      	ldr	r3, [r7, #24]
 8017866:	3310      	adds	r3, #16
 8017868:	6879      	ldr	r1, [r7, #4]
 801786a:	4618      	mov	r0, r3
 801786c:	f00b fbb7 	bl	8022fde <sys_mbox_trypost>
 8017870:	4603      	mov	r3, r0
 8017872:	2b00      	cmp	r3, #0
 8017874:	d002      	beq.n	801787c <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8017876:	f04f 33ff 	mov.w	r3, #4294967295
 801787a:	e00a      	b.n	8017892 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801787c:	69bb      	ldr	r3, [r7, #24]
 801787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017880:	2b00      	cmp	r3, #0
 8017882:	d005      	beq.n	8017890 <recv_tcp+0xf0>
 8017884:	69bb      	ldr	r3, [r7, #24]
 8017886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017888:	8bfa      	ldrh	r2, [r7, #30]
 801788a:	2100      	movs	r1, #0
 801788c:	69b8      	ldr	r0, [r7, #24]
 801788e:	4798      	blx	r3
  }

  return ERR_OK;
 8017890:	2300      	movs	r3, #0
}
 8017892:	4618      	mov	r0, r3
 8017894:	3720      	adds	r7, #32
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}
 801789a:	bf00      	nop
 801789c:	08026524 	.word	0x08026524
 80178a0:	080265e4 	.word	0x080265e4
 80178a4:	0802657c 	.word	0x0802657c
 80178a8:	08026608 	.word	0x08026608
 80178ac:	08026628 	.word	0x08026628

080178b0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
 80178b8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d106      	bne.n	80178d2 <poll_tcp+0x22>
 80178c4:	4b2a      	ldr	r3, [pc, #168]	; (8017970 <poll_tcp+0xc0>)
 80178c6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80178ca:	492a      	ldr	r1, [pc, #168]	; (8017974 <poll_tcp+0xc4>)
 80178cc:	482a      	ldr	r0, [pc, #168]	; (8017978 <poll_tcp+0xc8>)
 80178ce:	f00d fecf 	bl	8025670 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	785b      	ldrb	r3, [r3, #1]
 80178d6:	2b01      	cmp	r3, #1
 80178d8:	d104      	bne.n	80178e4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80178da:	2101      	movs	r1, #1
 80178dc:	68f8      	ldr	r0, [r7, #12]
 80178de:	f001 f817 	bl	8018910 <lwip_netconn_do_writemore>
 80178e2:	e016      	b.n	8017912 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	785b      	ldrb	r3, [r3, #1]
 80178e8:	2b04      	cmp	r3, #4
 80178ea:	d112      	bne.n	8017912 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d00a      	beq.n	801790a <poll_tcp+0x5a>
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178f8:	7a5b      	ldrb	r3, [r3, #9]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d005      	beq.n	801790a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017902:	7a5a      	ldrb	r2, [r3, #9]
 8017904:	3a01      	subs	r2, #1
 8017906:	b2d2      	uxtb	r2, r2
 8017908:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801790a:	2101      	movs	r1, #1
 801790c:	68f8      	ldr	r0, [r7, #12]
 801790e:	f000 fc17 	bl	8018140 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	7f1b      	ldrb	r3, [r3, #28]
 8017916:	f003 0310 	and.w	r3, r3, #16
 801791a:	2b00      	cmp	r3, #0
 801791c:	d022      	beq.n	8017964 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	685b      	ldr	r3, [r3, #4]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d01e      	beq.n	8017964 <poll_tcp+0xb4>
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	685b      	ldr	r3, [r3, #4]
 801792a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801792e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017932:	4293      	cmp	r3, r2
 8017934:	d916      	bls.n	8017964 <poll_tcp+0xb4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	685b      	ldr	r3, [r3, #4]
 801793a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801793e:	2b04      	cmp	r3, #4
 8017940:	d810      	bhi.n	8017964 <poll_tcp+0xb4>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	7f1b      	ldrb	r3, [r3, #28]
 8017946:	f023 0310 	bic.w	r3, r3, #16
 801794a:	b2da      	uxtb	r2, r3
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017954:	2b00      	cmp	r3, #0
 8017956:	d005      	beq.n	8017964 <poll_tcp+0xb4>
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801795c:	2200      	movs	r2, #0
 801795e:	2102      	movs	r1, #2
 8017960:	68f8      	ldr	r0, [r7, #12]
 8017962:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8017964:	2300      	movs	r3, #0
}
 8017966:	4618      	mov	r0, r3
 8017968:	3710      	adds	r7, #16
 801796a:	46bd      	mov	sp, r7
 801796c:	bd80      	pop	{r7, pc}
 801796e:	bf00      	nop
 8017970:	08026524 	.word	0x08026524
 8017974:	08026648 	.word	0x08026648
 8017978:	0802657c 	.word	0x0802657c

0801797c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801797c:	b580      	push	{r7, lr}
 801797e:	b086      	sub	sp, #24
 8017980:	af00      	add	r7, sp, #0
 8017982:	60f8      	str	r0, [r7, #12]
 8017984:	60b9      	str	r1, [r7, #8]
 8017986:	4613      	mov	r3, r2
 8017988:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801798e:	697b      	ldr	r3, [r7, #20]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d106      	bne.n	80179a2 <sent_tcp+0x26>
 8017994:	4b21      	ldr	r3, [pc, #132]	; (8017a1c <sent_tcp+0xa0>)
 8017996:	f240 1261 	movw	r2, #353	; 0x161
 801799a:	4921      	ldr	r1, [pc, #132]	; (8017a20 <sent_tcp+0xa4>)
 801799c:	4821      	ldr	r0, [pc, #132]	; (8017a24 <sent_tcp+0xa8>)
 801799e:	f00d fe67 	bl	8025670 <iprintf>

  if (conn) {
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d033      	beq.n	8017a10 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 80179a8:	697b      	ldr	r3, [r7, #20]
 80179aa:	785b      	ldrb	r3, [r3, #1]
 80179ac:	2b01      	cmp	r3, #1
 80179ae:	d104      	bne.n	80179ba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80179b0:	2101      	movs	r1, #1
 80179b2:	6978      	ldr	r0, [r7, #20]
 80179b4:	f000 ffac 	bl	8018910 <lwip_netconn_do_writemore>
 80179b8:	e007      	b.n	80179ca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80179ba:	697b      	ldr	r3, [r7, #20]
 80179bc:	785b      	ldrb	r3, [r3, #1]
 80179be:	2b04      	cmp	r3, #4
 80179c0:	d103      	bne.n	80179ca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80179c2:	2101      	movs	r1, #1
 80179c4:	6978      	ldr	r0, [r7, #20]
 80179c6:	f000 fbbb 	bl	8018140 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80179ca:	697b      	ldr	r3, [r7, #20]
 80179cc:	685b      	ldr	r3, [r3, #4]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d01e      	beq.n	8017a10 <sent_tcp+0x94>
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	685b      	ldr	r3, [r3, #4]
 80179d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80179da:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80179de:	4293      	cmp	r3, r2
 80179e0:	d916      	bls.n	8017a10 <sent_tcp+0x94>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80179e2:	697b      	ldr	r3, [r7, #20]
 80179e4:	685b      	ldr	r3, [r3, #4]
 80179e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80179ea:	2b04      	cmp	r3, #4
 80179ec:	d810      	bhi.n	8017a10 <sent_tcp+0x94>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80179ee:	697b      	ldr	r3, [r7, #20]
 80179f0:	7f1b      	ldrb	r3, [r3, #28]
 80179f2:	f023 0310 	bic.w	r3, r3, #16
 80179f6:	b2da      	uxtb	r2, r3
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80179fc:	697b      	ldr	r3, [r7, #20]
 80179fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d005      	beq.n	8017a10 <sent_tcp+0x94>
 8017a04:	697b      	ldr	r3, [r7, #20]
 8017a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a08:	88fa      	ldrh	r2, [r7, #6]
 8017a0a:	2102      	movs	r1, #2
 8017a0c:	6978      	ldr	r0, [r7, #20]
 8017a0e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8017a10:	2300      	movs	r3, #0
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3718      	adds	r7, #24
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}
 8017a1a:	bf00      	nop
 8017a1c:	08026524 	.word	0x08026524
 8017a20:	08026648 	.word	0x08026648
 8017a24:	0802657c 	.word	0x0802657c

08017a28 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b08a      	sub	sp, #40	; 0x28
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
 8017a30:	460b      	mov	r3, r1
 8017a32:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8017a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d106      	bne.n	8017a4c <err_tcp+0x24>
 8017a3e:	4b6c      	ldr	r3, [pc, #432]	; (8017bf0 <err_tcp+0x1c8>)
 8017a40:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017a44:	496b      	ldr	r1, [pc, #428]	; (8017bf4 <err_tcp+0x1cc>)
 8017a46:	486c      	ldr	r0, [pc, #432]	; (8017bf8 <err_tcp+0x1d0>)
 8017a48:	f00d fe12 	bl	8025670 <iprintf>

  conn->pcb.tcp = NULL;
 8017a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a4e:	2200      	movs	r2, #0
 8017a50:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8017a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a54:	785b      	ldrb	r3, [r3, #1]
 8017a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8017a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8017a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017a64:	2b04      	cmp	r3, #4
 8017a66:	d114      	bne.n	8017a92 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8017a68:	2300      	movs	r3, #0
 8017a6a:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8017a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d018      	beq.n	8017aa4 <err_tcp+0x7c>
 8017a72:	f00b fc39 	bl	80232e8 <sys_arch_protect>
 8017a76:	61f8      	str	r0, [r7, #28]
 8017a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017a7e:	f113 0f0c 	cmn.w	r3, #12
 8017a82:	db02      	blt.n	8017a8a <err_tcp+0x62>
 8017a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a86:	2200      	movs	r2, #0
 8017a88:	721a      	strb	r2, [r3, #8]
 8017a8a:	69f8      	ldr	r0, [r7, #28]
 8017a8c:	f00b fc3a 	bl	8023304 <sys_arch_unprotect>
 8017a90:	e008      	b.n	8017aa4 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8017a92:	f00b fc29 	bl	80232e8 <sys_arch_protect>
 8017a96:	61b8      	str	r0, [r7, #24]
 8017a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a9a:	78fa      	ldrb	r2, [r7, #3]
 8017a9c:	721a      	strb	r2, [r3, #8]
 8017a9e:	69b8      	ldr	r0, [r7, #24]
 8017aa0:	f00b fc30 	bl	8023304 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8017aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d005      	beq.n	8017ab8 <err_tcp+0x90>
 8017aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	2104      	movs	r1, #4
 8017ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ab6:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d005      	beq.n	8017acc <err_tcp+0xa4>
 8017ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	2100      	movs	r1, #0
 8017ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017aca:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8017acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d005      	beq.n	8017ae0 <err_tcp+0xb8>
 8017ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ad8:	2200      	movs	r2, #0
 8017ada:	2102      	movs	r1, #2
 8017adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ade:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8017ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae2:	3310      	adds	r3, #16
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	f00b faef 	bl	80230c8 <sys_mbox_valid>
 8017aea:	4603      	mov	r3, r0
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d005      	beq.n	8017afc <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8017af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017af2:	3310      	adds	r3, #16
 8017af4:	2100      	movs	r1, #0
 8017af6:	4618      	mov	r0, r3
 8017af8:	f00b fa71 	bl	8022fde <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8017afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017afe:	3314      	adds	r3, #20
 8017b00:	4618      	mov	r0, r3
 8017b02:	f00b fae1 	bl	80230c8 <sys_mbox_valid>
 8017b06:	4603      	mov	r3, r0
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d005      	beq.n	8017b18 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8017b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b0e:	3314      	adds	r3, #20
 8017b10:	2100      	movs	r1, #0
 8017b12:	4618      	mov	r0, r3
 8017b14:	f00b fa63 	bl	8022fde <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8017b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b1c:	2b01      	cmp	r3, #1
 8017b1e:	d007      	beq.n	8017b30 <err_tcp+0x108>
 8017b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b24:	2b04      	cmp	r3, #4
 8017b26:	d003      	beq.n	8017b30 <err_tcp+0x108>
 8017b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b2c:	2b03      	cmp	r3, #3
 8017b2e:	d14d      	bne.n	8017bcc <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8017b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b32:	7f1b      	ldrb	r3, [r3, #28]
 8017b34:	f003 0304 	and.w	r3, r3, #4
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	bf14      	ite	ne
 8017b3c:	2301      	movne	r3, #1
 8017b3e:	2300      	moveq	r3, #0
 8017b40:	b2db      	uxtb	r3, r3
 8017b42:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8017b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b46:	7f1b      	ldrb	r3, [r3, #28]
 8017b48:	f023 0304 	bic.w	r3, r3, #4
 8017b4c:	b2da      	uxtb	r2, r3
 8017b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b50:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8017b52:	697b      	ldr	r3, [r7, #20]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d145      	bne.n	8017be4 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8017b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d106      	bne.n	8017b6e <err_tcp+0x146>
 8017b60:	4b23      	ldr	r3, [pc, #140]	; (8017bf0 <err_tcp+0x1c8>)
 8017b62:	f240 12b3 	movw	r2, #435	; 0x1b3
 8017b66:	4925      	ldr	r1, [pc, #148]	; (8017bfc <err_tcp+0x1d4>)
 8017b68:	4823      	ldr	r0, [pc, #140]	; (8017bf8 <err_tcp+0x1d0>)
 8017b6a:	f00d fd81 	bl	8025670 <iprintf>
      conn->current_msg->err = err;
 8017b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b72:	78fa      	ldrb	r2, [r7, #3]
 8017b74:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8017b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	330c      	adds	r3, #12
 8017b7e:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8017b80:	6938      	ldr	r0, [r7, #16]
 8017b82:	f00b fb30 	bl	80231e6 <sys_sem_valid>
 8017b86:	4603      	mov	r3, r0
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d106      	bne.n	8017b9a <err_tcp+0x172>
 8017b8c:	4b18      	ldr	r3, [pc, #96]	; (8017bf0 <err_tcp+0x1c8>)
 8017b8e:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017b92:	491b      	ldr	r1, [pc, #108]	; (8017c00 <err_tcp+0x1d8>)
 8017b94:	4818      	ldr	r0, [pc, #96]	; (8017bf8 <err_tcp+0x1d0>)
 8017b96:	f00d fd6b 	bl	8025670 <iprintf>
      conn->current_msg = NULL;
 8017b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8017ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d00e      	beq.n	8017bc4 <err_tcp+0x19c>
 8017ba6:	f00b fb9f 	bl	80232e8 <sys_arch_protect>
 8017baa:	60f8      	str	r0, [r7, #12]
 8017bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017bb2:	f113 0f0c 	cmn.w	r3, #12
 8017bb6:	db02      	blt.n	8017bbe <err_tcp+0x196>
 8017bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bba:	78fa      	ldrb	r2, [r7, #3]
 8017bbc:	721a      	strb	r2, [r3, #8]
 8017bbe:	68f8      	ldr	r0, [r7, #12]
 8017bc0:	f00b fba0 	bl	8023304 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8017bc4:	6938      	ldr	r0, [r7, #16]
 8017bc6:	f00b faf4 	bl	80231b2 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8017bca:	e00b      	b.n	8017be4 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8017bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d008      	beq.n	8017be6 <err_tcp+0x1be>
 8017bd4:	4b06      	ldr	r3, [pc, #24]	; (8017bf0 <err_tcp+0x1c8>)
 8017bd6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8017bda:	490a      	ldr	r1, [pc, #40]	; (8017c04 <err_tcp+0x1dc>)
 8017bdc:	4806      	ldr	r0, [pc, #24]	; (8017bf8 <err_tcp+0x1d0>)
 8017bde:	f00d fd47 	bl	8025670 <iprintf>
  }
}
 8017be2:	e000      	b.n	8017be6 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8017be4:	bf00      	nop
}
 8017be6:	bf00      	nop
 8017be8:	3728      	adds	r7, #40	; 0x28
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bd80      	pop	{r7, pc}
 8017bee:	bf00      	nop
 8017bf0:	08026524 	.word	0x08026524
 8017bf4:	08026648 	.word	0x08026648
 8017bf8:	0802657c 	.word	0x0802657c
 8017bfc:	08026658 	.word	0x08026658
 8017c00:	08026674 	.word	0x08026674
 8017c04:	08026690 	.word	0x08026690

08017c08 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b084      	sub	sp, #16
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	685b      	ldr	r3, [r3, #4]
 8017c14:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8017c16:	6879      	ldr	r1, [r7, #4]
 8017c18:	68f8      	ldr	r0, [r7, #12]
 8017c1a:	f006 fceb 	bl	801e5f4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8017c1e:	490a      	ldr	r1, [pc, #40]	; (8017c48 <setup_tcp+0x40>)
 8017c20:	68f8      	ldr	r0, [r7, #12]
 8017c22:	f006 fcf9 	bl	801e618 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8017c26:	4909      	ldr	r1, [pc, #36]	; (8017c4c <setup_tcp+0x44>)
 8017c28:	68f8      	ldr	r0, [r7, #12]
 8017c2a:	f006 fd17 	bl	801e65c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8017c2e:	2202      	movs	r2, #2
 8017c30:	4907      	ldr	r1, [pc, #28]	; (8017c50 <setup_tcp+0x48>)
 8017c32:	68f8      	ldr	r0, [r7, #12]
 8017c34:	f006 fd6c 	bl	801e710 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8017c38:	4906      	ldr	r1, [pc, #24]	; (8017c54 <setup_tcp+0x4c>)
 8017c3a:	68f8      	ldr	r0, [r7, #12]
 8017c3c:	f006 fd2e 	bl	801e69c <tcp_err>
}
 8017c40:	bf00      	nop
 8017c42:	3710      	adds	r7, #16
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}
 8017c48:	080177a1 	.word	0x080177a1
 8017c4c:	0801797d 	.word	0x0801797d
 8017c50:	080178b1 	.word	0x080178b1
 8017c54:	08017a29 	.word	0x08017a29

08017c58 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b088      	sub	sp, #32
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	60f8      	str	r0, [r7, #12]
 8017c60:	60b9      	str	r1, [r7, #8]
 8017c62:	4613      	mov	r3, r2
 8017c64:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8017c6a:	69fb      	ldr	r3, [r7, #28]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d102      	bne.n	8017c76 <accept_function+0x1e>
    return ERR_VAL;
 8017c70:	f06f 0305 	mvn.w	r3, #5
 8017c74:	e08d      	b.n	8017d92 <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8017c76:	69fb      	ldr	r3, [r7, #28]
 8017c78:	3314      	adds	r3, #20
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f00b fa24 	bl	80230c8 <sys_mbox_valid>
 8017c80:	4603      	mov	r3, r0
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d102      	bne.n	8017c8c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8017c86:	f06f 0305 	mvn.w	r3, #5
 8017c8a:	e082      	b.n	8017d92 <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d115      	bne.n	8017cbe <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8017c92:	69fb      	ldr	r3, [r7, #28]
 8017c94:	3314      	adds	r3, #20
 8017c96:	4941      	ldr	r1, [pc, #260]	; (8017d9c <accept_function+0x144>)
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f00b f9a0 	bl	8022fde <sys_mbox_trypost>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d109      	bne.n	8017cb8 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017ca4:	69fb      	ldr	r3, [r7, #28]
 8017ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d005      	beq.n	8017cb8 <accept_function+0x60>
 8017cac:	69fb      	ldr	r3, [r7, #28]
 8017cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	2100      	movs	r1, #0
 8017cb4:	69f8      	ldr	r0, [r7, #28]
 8017cb6:	4798      	blx	r3
    }
    return ERR_VAL;
 8017cb8:	f06f 0305 	mvn.w	r3, #5
 8017cbc:	e069      	b.n	8017d92 <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8017cbe:	69fb      	ldr	r3, [r7, #28]
 8017cc0:	781a      	ldrb	r2, [r3, #0]
 8017cc2:	69fb      	ldr	r3, [r7, #28]
 8017cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cc6:	4619      	mov	r1, r3
 8017cc8:	4610      	mov	r0, r2
 8017cca:	f000 f8ff 	bl	8017ecc <netconn_alloc>
 8017cce:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8017cd0:	69bb      	ldr	r3, [r7, #24]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d115      	bne.n	8017d02 <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8017cd6:	69fb      	ldr	r3, [r7, #28]
 8017cd8:	3314      	adds	r3, #20
 8017cda:	4930      	ldr	r1, [pc, #192]	; (8017d9c <accept_function+0x144>)
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f00b f97e 	bl	8022fde <sys_mbox_trypost>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d109      	bne.n	8017cfc <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017ce8:	69fb      	ldr	r3, [r7, #28]
 8017cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d005      	beq.n	8017cfc <accept_function+0xa4>
 8017cf0:	69fb      	ldr	r3, [r7, #28]
 8017cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	2100      	movs	r1, #0
 8017cf8:	69f8      	ldr	r0, [r7, #28]
 8017cfa:	4798      	blx	r3
    }
    return ERR_MEM;
 8017cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8017d00:	e047      	b.n	8017d92 <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 8017d02:	69bb      	ldr	r3, [r7, #24]
 8017d04:	68ba      	ldr	r2, [r7, #8]
 8017d06:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8017d08:	69b8      	ldr	r0, [r7, #24]
 8017d0a:	f7ff ff7d 	bl	8017c08 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 8017d0e:	69bb      	ldr	r3, [r7, #24]
 8017d10:	79fa      	ldrb	r2, [r7, #7]
 8017d12:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8017d14:	69fb      	ldr	r3, [r7, #28]
 8017d16:	3314      	adds	r3, #20
 8017d18:	69b9      	ldr	r1, [r7, #24]
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	f00b f95f 	bl	8022fde <sys_mbox_trypost>
 8017d20:	4603      	mov	r3, r0
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d02a      	beq.n	8017d7c <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8017d26:	69bb      	ldr	r3, [r7, #24]
 8017d28:	685b      	ldr	r3, [r3, #4]
 8017d2a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8017d2c:	2100      	movs	r1, #0
 8017d2e:	6978      	ldr	r0, [r7, #20]
 8017d30:	f006 fc60 	bl	801e5f4 <tcp_arg>
    tcp_recv(pcb, NULL);
 8017d34:	2100      	movs	r1, #0
 8017d36:	6978      	ldr	r0, [r7, #20]
 8017d38:	f006 fc6e 	bl	801e618 <tcp_recv>
    tcp_sent(pcb, NULL);
 8017d3c:	2100      	movs	r1, #0
 8017d3e:	6978      	ldr	r0, [r7, #20]
 8017d40:	f006 fc8c 	bl	801e65c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8017d44:	2200      	movs	r2, #0
 8017d46:	2100      	movs	r1, #0
 8017d48:	6978      	ldr	r0, [r7, #20]
 8017d4a:	f006 fce1 	bl	801e710 <tcp_poll>
    tcp_err(pcb, NULL);
 8017d4e:	2100      	movs	r1, #0
 8017d50:	6978      	ldr	r0, [r7, #20]
 8017d52:	f006 fca3 	bl	801e69c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8017d56:	69bb      	ldr	r3, [r7, #24]
 8017d58:	2200      	movs	r2, #0
 8017d5a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8017d5c:	69bb      	ldr	r3, [r7, #24]
 8017d5e:	3310      	adds	r3, #16
 8017d60:	4618      	mov	r0, r3
 8017d62:	f00b f915 	bl	8022f90 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8017d66:	69bb      	ldr	r3, [r7, #24]
 8017d68:	3310      	adds	r3, #16
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f00b f9bd 	bl	80230ea <sys_mbox_set_invalid>
    netconn_free(newconn);
 8017d70:	69b8      	ldr	r0, [r7, #24]
 8017d72:	f000 f91b 	bl	8017fac <netconn_free>
    return ERR_MEM;
 8017d76:	f04f 33ff 	mov.w	r3, #4294967295
 8017d7a:	e00a      	b.n	8017d92 <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017d7c:	69fb      	ldr	r3, [r7, #28]
 8017d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d005      	beq.n	8017d90 <accept_function+0x138>
 8017d84:	69fb      	ldr	r3, [r7, #28]
 8017d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d88:	2200      	movs	r2, #0
 8017d8a:	2100      	movs	r1, #0
 8017d8c:	69f8      	ldr	r0, [r7, #28]
 8017d8e:	4798      	blx	r3
  }

  return ERR_OK;
 8017d90:	2300      	movs	r3, #0
}
 8017d92:	4618      	mov	r0, r3
 8017d94:	3720      	adds	r7, #32
 8017d96:	46bd      	mov	sp, r7
 8017d98:	bd80      	pop	{r7, pc}
 8017d9a:	bf00      	nop
 8017d9c:	200045f4 	.word	0x200045f4

08017da0 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8017da0:	b590      	push	{r4, r7, lr}
 8017da2:	b085      	sub	sp, #20
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8017da8:	2300      	movs	r3, #0
 8017daa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	685b      	ldr	r3, [r3, #4]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d006      	beq.n	8017dc4 <pcb_new+0x24>
 8017db6:	4b2b      	ldr	r3, [pc, #172]	; (8017e64 <pcb_new+0xc4>)
 8017db8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8017dbc:	492a      	ldr	r1, [pc, #168]	; (8017e68 <pcb_new+0xc8>)
 8017dbe:	482b      	ldr	r0, [pc, #172]	; (8017e6c <pcb_new+0xcc>)
 8017dc0:	f00d fc56 	bl	8025670 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	781b      	ldrb	r3, [r3, #0]
 8017dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017dce:	2b10      	cmp	r3, #16
 8017dd0:	d022      	beq.n	8017e18 <pcb_new+0x78>
 8017dd2:	2b20      	cmp	r3, #32
 8017dd4:	d133      	bne.n	8017e3e <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	681c      	ldr	r4, [r3, #0]
 8017dda:	7bfb      	ldrb	r3, [r7, #15]
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f00a ffa2 	bl	8022d26 <udp_new_ip_type>
 8017de2:	4603      	mov	r3, r0
 8017de4:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	685b      	ldr	r3, [r3, #4]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d02a      	beq.n	8017e46 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	781b      	ldrb	r3, [r3, #0]
 8017df6:	2b22      	cmp	r3, #34	; 0x22
 8017df8:	d104      	bne.n	8017e04 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	685b      	ldr	r3, [r3, #4]
 8017e00:	2201      	movs	r2, #1
 8017e02:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	6858      	ldr	r0, [r3, #4]
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	461a      	mov	r2, r3
 8017e10:	4917      	ldr	r1, [pc, #92]	; (8017e70 <pcb_new+0xd0>)
 8017e12:	f00a ff2d 	bl	8022c70 <udp_recv>
    }
    break;
 8017e16:	e016      	b.n	8017e46 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681c      	ldr	r4, [r3, #0]
 8017e1c:	7bfb      	ldrb	r3, [r7, #15]
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f006 fbda 	bl	801e5d8 <tcp_new_ip_type>
 8017e24:	4603      	mov	r3, r0
 8017e26:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d00b      	beq.n	8017e4a <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7ff fee6 	bl	8017c08 <setup_tcp>
    }
    break;
 8017e3c:	e005      	b.n	8017e4a <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	22fa      	movs	r2, #250	; 0xfa
 8017e42:	711a      	strb	r2, [r3, #4]
    return;
 8017e44:	e00a      	b.n	8017e5c <pcb_new+0xbc>
    break;
 8017e46:	bf00      	nop
 8017e48:	e000      	b.n	8017e4c <pcb_new+0xac>
    break;
 8017e4a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	685b      	ldr	r3, [r3, #4]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d102      	bne.n	8017e5c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	22ff      	movs	r2, #255	; 0xff
 8017e5a:	711a      	strb	r2, [r3, #4]
  }
}
 8017e5c:	3714      	adds	r7, #20
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd90      	pop	{r4, r7, pc}
 8017e62:	bf00      	nop
 8017e64:	08026524 	.word	0x08026524
 8017e68:	080266ac 	.word	0x080266ac
 8017e6c:	0802657c 	.word	0x0802657c
 8017e70:	080176a5 	.word	0x080176a5

08017e74 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b084      	sub	sp, #16
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	2200      	movs	r2, #0
 8017e84:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	685b      	ldr	r3, [r3, #4]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d102      	bne.n	8017e96 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8017e90:	68f8      	ldr	r0, [r7, #12]
 8017e92:	f7ff ff85 	bl	8017da0 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d012      	beq.n	8017ec4 <lwip_netconn_do_newconn+0x50>
 8017e9e:	f00b fa23 	bl	80232e8 <sys_arch_protect>
 8017ea2:	60b8      	str	r0, [r7, #8]
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017eac:	f113 0f0c 	cmn.w	r3, #12
 8017eb0:	db05      	blt.n	8017ebe <lwip_netconn_do_newconn+0x4a>
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	68fa      	ldr	r2, [r7, #12]
 8017eb8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8017ebc:	721a      	strb	r2, [r3, #8]
 8017ebe:	68b8      	ldr	r0, [r7, #8]
 8017ec0:	f00b fa20 	bl	8023304 <sys_arch_unprotect>
}
 8017ec4:	bf00      	nop
 8017ec6:	3710      	adds	r7, #16
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}

08017ecc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b084      	sub	sp, #16
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	6039      	str	r1, [r7, #0]
 8017ed6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8017ed8:	2007      	movs	r0, #7
 8017eda:	f004 f921 	bl	801c120 <memp_malloc>
 8017ede:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8017ee0:	68bb      	ldr	r3, [r7, #8]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d101      	bne.n	8017eea <netconn_alloc+0x1e>
    return NULL;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	e055      	b.n	8017f96 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8017eea:	68bb      	ldr	r3, [r7, #8]
 8017eec:	2200      	movs	r2, #0
 8017eee:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8017ef0:	68bb      	ldr	r3, [r7, #8]
 8017ef2:	79fa      	ldrb	r2, [r7, #7]
 8017ef4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8017ef6:	68bb      	ldr	r3, [r7, #8]
 8017ef8:	2200      	movs	r2, #0
 8017efa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8017efc:	79fb      	ldrb	r3, [r7, #7]
 8017efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f02:	2b10      	cmp	r3, #16
 8017f04:	d004      	beq.n	8017f10 <netconn_alloc+0x44>
 8017f06:	2b20      	cmp	r3, #32
 8017f08:	d105      	bne.n	8017f16 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8017f0a:	2306      	movs	r3, #6
 8017f0c:	60fb      	str	r3, [r7, #12]
    break;
 8017f0e:	e00a      	b.n	8017f26 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8017f10:	2306      	movs	r3, #6
 8017f12:	60fb      	str	r3, [r7, #12]
    break;
 8017f14:	e007      	b.n	8017f26 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8017f16:	4b22      	ldr	r3, [pc, #136]	; (8017fa0 <netconn_alloc+0xd4>)
 8017f18:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017f1c:	4921      	ldr	r1, [pc, #132]	; (8017fa4 <netconn_alloc+0xd8>)
 8017f1e:	4822      	ldr	r0, [pc, #136]	; (8017fa8 <netconn_alloc+0xdc>)
 8017f20:	f00d fba6 	bl	8025670 <iprintf>
    goto free_and_return;
 8017f24:	e032      	b.n	8017f8c <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8017f26:	68bb      	ldr	r3, [r7, #8]
 8017f28:	3310      	adds	r3, #16
 8017f2a:	68f9      	ldr	r1, [r7, #12]
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f00b f811 	bl	8022f54 <sys_mbox_new>
 8017f32:	4603      	mov	r3, r0
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d128      	bne.n	8017f8a <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	330c      	adds	r3, #12
 8017f3c:	2100      	movs	r1, #0
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f00b f8e0 	bl	8023104 <sys_sem_new>
 8017f44:	4603      	mov	r3, r0
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d005      	beq.n	8017f56 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8017f4a:	68bb      	ldr	r3, [r7, #8]
 8017f4c:	3310      	adds	r3, #16
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f00b f81e 	bl	8022f90 <sys_mbox_free>
    goto free_and_return;
 8017f54:	e01a      	b.n	8017f8c <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	3314      	adds	r3, #20
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f00b f8c5 	bl	80230ea <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	2200      	movs	r2, #0
 8017f64:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8017f66:	68bb      	ldr	r3, [r7, #8]
 8017f68:	f04f 32ff 	mov.w	r2, #4294967295
 8017f6c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8017f6e:	68bb      	ldr	r3, [r7, #8]
 8017f70:	683a      	ldr	r2, [r7, #0]
 8017f72:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	2200      	movs	r2, #0
 8017f78:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8017f7a:	68bb      	ldr	r3, [r7, #8]
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8017f80:	68bb      	ldr	r3, [r7, #8]
 8017f82:	2200      	movs	r2, #0
 8017f84:	771a      	strb	r2, [r3, #28]
  return conn;
 8017f86:	68bb      	ldr	r3, [r7, #8]
 8017f88:	e005      	b.n	8017f96 <netconn_alloc+0xca>
    goto free_and_return;
 8017f8a:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8017f8c:	68b9      	ldr	r1, [r7, #8]
 8017f8e:	2007      	movs	r0, #7
 8017f90:	f004 f918 	bl	801c1c4 <memp_free>
  return NULL;
 8017f94:	2300      	movs	r3, #0
}
 8017f96:	4618      	mov	r0, r3
 8017f98:	3710      	adds	r7, #16
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}
 8017f9e:	bf00      	nop
 8017fa0:	08026524 	.word	0x08026524
 8017fa4:	080266cc 	.word	0x080266cc
 8017fa8:	0802657c 	.word	0x0802657c

08017fac <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b082      	sub	sp, #8
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	685b      	ldr	r3, [r3, #4]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d006      	beq.n	8017fca <netconn_free+0x1e>
 8017fbc:	4b1b      	ldr	r3, [pc, #108]	; (801802c <netconn_free+0x80>)
 8017fbe:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017fc2:	491b      	ldr	r1, [pc, #108]	; (8018030 <netconn_free+0x84>)
 8017fc4:	481b      	ldr	r0, [pc, #108]	; (8018034 <netconn_free+0x88>)
 8017fc6:	f00d fb53 	bl	8025670 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	3310      	adds	r3, #16
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f00b f87a 	bl	80230c8 <sys_mbox_valid>
 8017fd4:	4603      	mov	r3, r0
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d006      	beq.n	8017fe8 <netconn_free+0x3c>
 8017fda:	4b14      	ldr	r3, [pc, #80]	; (801802c <netconn_free+0x80>)
 8017fdc:	f240 22e2 	movw	r2, #738	; 0x2e2
 8017fe0:	4915      	ldr	r1, [pc, #84]	; (8018038 <netconn_free+0x8c>)
 8017fe2:	4814      	ldr	r0, [pc, #80]	; (8018034 <netconn_free+0x88>)
 8017fe4:	f00d fb44 	bl	8025670 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	3314      	adds	r3, #20
 8017fec:	4618      	mov	r0, r3
 8017fee:	f00b f86b 	bl	80230c8 <sys_mbox_valid>
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d006      	beq.n	8018006 <netconn_free+0x5a>
 8017ff8:	4b0c      	ldr	r3, [pc, #48]	; (801802c <netconn_free+0x80>)
 8017ffa:	f240 22e5 	movw	r2, #741	; 0x2e5
 8017ffe:	490f      	ldr	r1, [pc, #60]	; (801803c <netconn_free+0x90>)
 8018000:	480c      	ldr	r0, [pc, #48]	; (8018034 <netconn_free+0x88>)
 8018002:	f00d fb35 	bl	8025670 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	330c      	adds	r3, #12
 801800a:	4618      	mov	r0, r3
 801800c:	f00b f8de 	bl	80231cc <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	330c      	adds	r3, #12
 8018014:	4618      	mov	r0, r3
 8018016:	f00b f8f7 	bl	8023208 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801801a:	6879      	ldr	r1, [r7, #4]
 801801c:	2007      	movs	r0, #7
 801801e:	f004 f8d1 	bl	801c1c4 <memp_free>
}
 8018022:	bf00      	nop
 8018024:	3708      	adds	r7, #8
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop
 801802c:	08026524 	.word	0x08026524
 8018030:	080266f4 	.word	0x080266f4
 8018034:	0802657c 	.word	0x0802657c
 8018038:	08026724 	.word	0x08026724
 801803c:	08026760 	.word	0x08026760

08018040 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b086      	sub	sp, #24
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	3310      	adds	r3, #16
 801804c:	4618      	mov	r0, r3
 801804e:	f00b f83b 	bl	80230c8 <sys_mbox_valid>
 8018052:	4603      	mov	r3, r0
 8018054:	2b00      	cmp	r3, #0
 8018056:	d035      	beq.n	80180c4 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8018058:	e01e      	b.n	8018098 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	781b      	ldrb	r3, [r3, #0]
 801805e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018062:	2b10      	cmp	r3, #16
 8018064:	d114      	bne.n	8018090 <netconn_drain+0x50>
        if (mem != NULL) {
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d015      	beq.n	8018098 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	685b      	ldr	r3, [r3, #4]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d007      	beq.n	8018088 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	685a      	ldr	r2, [r3, #4]
 801807c:	697b      	ldr	r3, [r7, #20]
 801807e:	891b      	ldrh	r3, [r3, #8]
 8018080:	4619      	mov	r1, r3
 8018082:	4610      	mov	r0, r2
 8018084:	f005 fcd4 	bl	801da30 <tcp_recved>
          }
          pbuf_free(p);
 8018088:	6978      	ldr	r0, [r7, #20]
 801808a:	f004 fdf5 	bl	801cc78 <pbuf_free>
 801808e:	e003      	b.n	8018098 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	4618      	mov	r0, r3
 8018094:	f000 ff38 	bl	8018f08 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	3310      	adds	r3, #16
 801809c:	f107 020c 	add.w	r2, r7, #12
 80180a0:	4611      	mov	r1, r2
 80180a2:	4618      	mov	r0, r3
 80180a4:	f00a fff4 	bl	8023090 <sys_arch_mbox_tryfetch>
 80180a8:	4603      	mov	r3, r0
 80180aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180ae:	d1d4      	bne.n	801805a <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	3310      	adds	r3, #16
 80180b4:	4618      	mov	r0, r3
 80180b6:	f00a ff6b 	bl	8022f90 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	3310      	adds	r3, #16
 80180be:	4618      	mov	r0, r3
 80180c0:	f00b f813 	bl	80230ea <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	3314      	adds	r3, #20
 80180c8:	4618      	mov	r0, r3
 80180ca:	f00a fffd 	bl	80230c8 <sys_mbox_valid>
 80180ce:	4603      	mov	r3, r0
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d02e      	beq.n	8018132 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80180d4:	e017      	b.n	8018106 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	4a18      	ldr	r2, [pc, #96]	; (801813c <netconn_drain+0xfc>)
 80180da:	4293      	cmp	r3, r2
 80180dc:	d013      	beq.n	8018106 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 80180e2:	6938      	ldr	r0, [r7, #16]
 80180e4:	f7ff ffac 	bl	8018040 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80180e8:	693b      	ldr	r3, [r7, #16]
 80180ea:	685b      	ldr	r3, [r3, #4]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d007      	beq.n	8018100 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 80180f0:	693b      	ldr	r3, [r7, #16]
 80180f2:	685b      	ldr	r3, [r3, #4]
 80180f4:	4618      	mov	r0, r3
 80180f6:	f005 fb05 	bl	801d704 <tcp_abort>
          newconn->pcb.tcp = NULL;
 80180fa:	693b      	ldr	r3, [r7, #16]
 80180fc:	2200      	movs	r2, #0
 80180fe:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8018100:	6938      	ldr	r0, [r7, #16]
 8018102:	f7ff ff53 	bl	8017fac <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	3314      	adds	r3, #20
 801810a:	f107 020c 	add.w	r2, r7, #12
 801810e:	4611      	mov	r1, r2
 8018110:	4618      	mov	r0, r3
 8018112:	f00a ffbd 	bl	8023090 <sys_arch_mbox_tryfetch>
 8018116:	4603      	mov	r3, r0
 8018118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801811c:	d1db      	bne.n	80180d6 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	3314      	adds	r3, #20
 8018122:	4618      	mov	r0, r3
 8018124:	f00a ff34 	bl	8022f90 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	3314      	adds	r3, #20
 801812c:	4618      	mov	r0, r3
 801812e:	f00a ffdc 	bl	80230ea <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8018132:	bf00      	nop
 8018134:	3718      	adds	r7, #24
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}
 801813a:	bf00      	nop
 801813c:	200045f4 	.word	0x200045f4

08018140 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b088      	sub	sp, #32
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
 8018148:	460b      	mov	r3, r1
 801814a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 801814c:	2300      	movs	r3, #0
 801814e:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d106      	bne.n	8018164 <lwip_netconn_do_close_internal+0x24>
 8018156:	4baa      	ldr	r3, [pc, #680]	; (8018400 <lwip_netconn_do_close_internal+0x2c0>)
 8018158:	f240 3243 	movw	r2, #835	; 0x343
 801815c:	49a9      	ldr	r1, [pc, #676]	; (8018404 <lwip_netconn_do_close_internal+0x2c4>)
 801815e:	48aa      	ldr	r0, [pc, #680]	; (8018408 <lwip_netconn_do_close_internal+0x2c8>)
 8018160:	f00d fa86 	bl	8025670 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801816c:	2b10      	cmp	r3, #16
 801816e:	d006      	beq.n	801817e <lwip_netconn_do_close_internal+0x3e>
 8018170:	4ba3      	ldr	r3, [pc, #652]	; (8018400 <lwip_netconn_do_close_internal+0x2c0>)
 8018172:	f44f 7251 	mov.w	r2, #836	; 0x344
 8018176:	49a5      	ldr	r1, [pc, #660]	; (801840c <lwip_netconn_do_close_internal+0x2cc>)
 8018178:	48a3      	ldr	r0, [pc, #652]	; (8018408 <lwip_netconn_do_close_internal+0x2c8>)
 801817a:	f00d fa79 	bl	8025670 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	785b      	ldrb	r3, [r3, #1]
 8018182:	2b04      	cmp	r3, #4
 8018184:	d006      	beq.n	8018194 <lwip_netconn_do_close_internal+0x54>
 8018186:	4b9e      	ldr	r3, [pc, #632]	; (8018400 <lwip_netconn_do_close_internal+0x2c0>)
 8018188:	f240 3245 	movw	r2, #837	; 0x345
 801818c:	49a0      	ldr	r1, [pc, #640]	; (8018410 <lwip_netconn_do_close_internal+0x2d0>)
 801818e:	489e      	ldr	r0, [pc, #632]	; (8018408 <lwip_netconn_do_close_internal+0x2c8>)
 8018190:	f00d fa6e 	bl	8025670 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d106      	bne.n	80181aa <lwip_netconn_do_close_internal+0x6a>
 801819c:	4b98      	ldr	r3, [pc, #608]	; (8018400 <lwip_netconn_do_close_internal+0x2c0>)
 801819e:	f240 3246 	movw	r2, #838	; 0x346
 80181a2:	499c      	ldr	r1, [pc, #624]	; (8018414 <lwip_netconn_do_close_internal+0x2d4>)
 80181a4:	4898      	ldr	r0, [pc, #608]	; (8018408 <lwip_netconn_do_close_internal+0x2c8>)
 80181a6:	f00d fa63 	bl	8025670 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d106      	bne.n	80181c0 <lwip_netconn_do_close_internal+0x80>
 80181b2:	4b93      	ldr	r3, [pc, #588]	; (8018400 <lwip_netconn_do_close_internal+0x2c0>)
 80181b4:	f240 3247 	movw	r2, #839	; 0x347
 80181b8:	4997      	ldr	r1, [pc, #604]	; (8018418 <lwip_netconn_do_close_internal+0x2d8>)
 80181ba:	4893      	ldr	r0, [pc, #588]	; (8018408 <lwip_netconn_do_close_internal+0x2c8>)
 80181bc:	f00d fa58 	bl	8025670 <iprintf>

  tpcb = conn->pcb.tcp;
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	685b      	ldr	r3, [r3, #4]
 80181c4:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181ca:	7a1b      	ldrb	r3, [r3, #8]
 80181cc:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 80181ce:	7dfb      	ldrb	r3, [r7, #23]
 80181d0:	f003 0301 	and.w	r3, r3, #1
 80181d4:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 80181d6:	7dfb      	ldrb	r3, [r7, #23]
 80181d8:	f003 0302 	and.w	r3, r3, #2
 80181dc:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80181de:	7dfb      	ldrb	r3, [r7, #23]
 80181e0:	2b03      	cmp	r3, #3
 80181e2:	d102      	bne.n	80181ea <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 80181e4:	2301      	movs	r3, #1
 80181e6:	77bb      	strb	r3, [r7, #30]
 80181e8:	e01f      	b.n	801822a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80181ea:	7dbb      	ldrb	r3, [r7, #22]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d00e      	beq.n	801820e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80181f0:	69bb      	ldr	r3, [r7, #24]
 80181f2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80181f4:	2b05      	cmp	r3, #5
 80181f6:	d007      	beq.n	8018208 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80181f8:	69bb      	ldr	r3, [r7, #24]
 80181fa:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80181fc:	2b06      	cmp	r3, #6
 80181fe:	d003      	beq.n	8018208 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8018200:	69bb      	ldr	r3, [r7, #24]
 8018202:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8018204:	2b08      	cmp	r3, #8
 8018206:	d102      	bne.n	801820e <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8018208:	2301      	movs	r3, #1
 801820a:	77bb      	strb	r3, [r7, #30]
 801820c:	e00d      	b.n	801822a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801820e:	7d7b      	ldrb	r3, [r7, #21]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d008      	beq.n	8018226 <lwip_netconn_do_close_internal+0xe6>
 8018214:	69bb      	ldr	r3, [r7, #24]
 8018216:	7e9b      	ldrb	r3, [r3, #26]
 8018218:	f003 0310 	and.w	r3, r3, #16
 801821c:	2b00      	cmp	r3, #0
 801821e:	d002      	beq.n	8018226 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8018220:	2301      	movs	r3, #1
 8018222:	77bb      	strb	r3, [r7, #30]
 8018224:	e001      	b.n	801822a <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8018226:	2300      	movs	r3, #0
 8018228:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 801822a:	7fbb      	ldrb	r3, [r7, #30]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d003      	beq.n	8018238 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8018230:	2100      	movs	r1, #0
 8018232:	69b8      	ldr	r0, [r7, #24]
 8018234:	f006 f9de 	bl	801e5f4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8018238:	69bb      	ldr	r3, [r7, #24]
 801823a:	7d1b      	ldrb	r3, [r3, #20]
 801823c:	2b01      	cmp	r3, #1
 801823e:	d104      	bne.n	801824a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8018240:	2100      	movs	r1, #0
 8018242:	69b8      	ldr	r0, [r7, #24]
 8018244:	f006 fa4c 	bl	801e6e0 <tcp_accept>
 8018248:	e01d      	b.n	8018286 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801824a:	7dbb      	ldrb	r3, [r7, #22]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d007      	beq.n	8018260 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8018250:	2100      	movs	r1, #0
 8018252:	69b8      	ldr	r0, [r7, #24]
 8018254:	f006 f9e0 	bl	801e618 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8018258:	2100      	movs	r1, #0
 801825a:	69b8      	ldr	r0, [r7, #24]
 801825c:	f006 fa40 	bl	801e6e0 <tcp_accept>
    }
    if (shut_tx) {
 8018260:	7d7b      	ldrb	r3, [r7, #21]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d003      	beq.n	801826e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8018266:	2100      	movs	r1, #0
 8018268:	69b8      	ldr	r0, [r7, #24]
 801826a:	f006 f9f7 	bl	801e65c <tcp_sent>
    }
    if (close) {
 801826e:	7fbb      	ldrb	r3, [r7, #30]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d008      	beq.n	8018286 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8018274:	2200      	movs	r2, #0
 8018276:	2100      	movs	r1, #0
 8018278:	69b8      	ldr	r0, [r7, #24]
 801827a:	f006 fa49 	bl	801e710 <tcp_poll>
      tcp_err(tpcb, NULL);
 801827e:	2100      	movs	r1, #0
 8018280:	69b8      	ldr	r0, [r7, #24]
 8018282:	f006 fa0b 	bl	801e69c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8018286:	7fbb      	ldrb	r3, [r7, #30]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d005      	beq.n	8018298 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 801828c:	69b8      	ldr	r0, [r7, #24]
 801828e:	f005 f927 	bl	801d4e0 <tcp_close>
 8018292:	4603      	mov	r3, r0
 8018294:	77fb      	strb	r3, [r7, #31]
 8018296:	e007      	b.n	80182a8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8018298:	7dbb      	ldrb	r3, [r7, #22]
 801829a:	7d7a      	ldrb	r2, [r7, #21]
 801829c:	4619      	mov	r1, r3
 801829e:	69b8      	ldr	r0, [r7, #24]
 80182a0:	f005 f936 	bl	801d510 <tcp_shutdown>
 80182a4:	4603      	mov	r3, r0
 80182a6:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 80182a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d102      	bne.n	80182b6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80182b0:	2301      	movs	r3, #1
 80182b2:	777b      	strb	r3, [r7, #29]
 80182b4:	e016      	b.n	80182e4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80182b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80182ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182be:	d10f      	bne.n	80182e0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182c4:	7a5b      	ldrb	r3, [r3, #9]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d10c      	bne.n	80182e4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80182ca:	2301      	movs	r3, #1
 80182cc:	777b      	strb	r3, [r7, #29]
        if (close) {
 80182ce:	7fbb      	ldrb	r3, [r7, #30]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d007      	beq.n	80182e4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80182d4:	69b8      	ldr	r0, [r7, #24]
 80182d6:	f005 fa15 	bl	801d704 <tcp_abort>
          err = ERR_OK;
 80182da:	2300      	movs	r3, #0
 80182dc:	77fb      	strb	r3, [r7, #31]
 80182de:	e001      	b.n	80182e4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80182e0:	2301      	movs	r3, #1
 80182e2:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 80182e4:	7f7b      	ldrb	r3, [r7, #29]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d056      	beq.n	8018398 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	330c      	adds	r3, #12
 80182f2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182f8:	7ffa      	ldrb	r2, [r7, #31]
 80182fa:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	2200      	movs	r2, #0
 8018300:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	2200      	movs	r2, #0
 8018306:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8018308:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d129      	bne.n	8018364 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8018310:	7fbb      	ldrb	r3, [r7, #30]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d00c      	beq.n	8018330 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	2200      	movs	r2, #0
 801831a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018320:	2b00      	cmp	r3, #0
 8018322:	d005      	beq.n	8018330 <lwip_netconn_do_close_internal+0x1f0>
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018328:	2200      	movs	r2, #0
 801832a:	2104      	movs	r1, #4
 801832c:	6878      	ldr	r0, [r7, #4]
 801832e:	4798      	blx	r3
      }
      if (shut_rx) {
 8018330:	7dbb      	ldrb	r3, [r7, #22]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d009      	beq.n	801834a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801833a:	2b00      	cmp	r3, #0
 801833c:	d005      	beq.n	801834a <lwip_netconn_do_close_internal+0x20a>
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018342:	2200      	movs	r2, #0
 8018344:	2100      	movs	r1, #0
 8018346:	6878      	ldr	r0, [r7, #4]
 8018348:	4798      	blx	r3
      }
      if (shut_tx) {
 801834a:	7d7b      	ldrb	r3, [r7, #21]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d009      	beq.n	8018364 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018354:	2b00      	cmp	r3, #0
 8018356:	d005      	beq.n	8018364 <lwip_netconn_do_close_internal+0x224>
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801835c:	2200      	movs	r2, #0
 801835e:	2102      	movs	r1, #2
 8018360:	6878      	ldr	r0, [r7, #4]
 8018362:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d00e      	beq.n	8018388 <lwip_netconn_do_close_internal+0x248>
 801836a:	f00a ffbd 	bl	80232e8 <sys_arch_protect>
 801836e:	60f8      	str	r0, [r7, #12]
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018376:	f113 0f0c 	cmn.w	r3, #12
 801837a:	db02      	blt.n	8018382 <lwip_netconn_do_close_internal+0x242>
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	7ffa      	ldrb	r2, [r7, #31]
 8018380:	721a      	strb	r2, [r3, #8]
 8018382:	68f8      	ldr	r0, [r7, #12]
 8018384:	f00a ffbe 	bl	8023304 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8018388:	78fb      	ldrb	r3, [r7, #3]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d002      	beq.n	8018394 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801838e:	6938      	ldr	r0, [r7, #16]
 8018390:	f00a ff0f 	bl	80231b2 <sys_sem_signal>
    }
    return ERR_OK;
 8018394:	2300      	movs	r3, #0
 8018396:	e02e      	b.n	80183f6 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8018398:	7f7b      	ldrb	r3, [r7, #29]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d11e      	bne.n	80183dc <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801839e:	69bb      	ldr	r3, [r7, #24]
 80183a0:	7d1b      	ldrb	r3, [r3, #20]
 80183a2:	2b01      	cmp	r3, #1
 80183a4:	d106      	bne.n	80183b4 <lwip_netconn_do_close_internal+0x274>
 80183a6:	4b16      	ldr	r3, [pc, #88]	; (8018400 <lwip_netconn_do_close_internal+0x2c0>)
 80183a8:	f240 32e3 	movw	r2, #995	; 0x3e3
 80183ac:	491b      	ldr	r1, [pc, #108]	; (801841c <lwip_netconn_do_close_internal+0x2dc>)
 80183ae:	4816      	ldr	r0, [pc, #88]	; (8018408 <lwip_netconn_do_close_internal+0x2c8>)
 80183b0:	f00d f95e 	bl	8025670 <iprintf>
    if (shut_tx) {
 80183b4:	7d7b      	ldrb	r3, [r7, #21]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d003      	beq.n	80183c2 <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 80183ba:	4919      	ldr	r1, [pc, #100]	; (8018420 <lwip_netconn_do_close_internal+0x2e0>)
 80183bc:	69b8      	ldr	r0, [r7, #24]
 80183be:	f006 f94d 	bl	801e65c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80183c2:	2201      	movs	r2, #1
 80183c4:	4917      	ldr	r1, [pc, #92]	; (8018424 <lwip_netconn_do_close_internal+0x2e4>)
 80183c6:	69b8      	ldr	r0, [r7, #24]
 80183c8:	f006 f9a2 	bl	801e710 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80183cc:	4916      	ldr	r1, [pc, #88]	; (8018428 <lwip_netconn_do_close_internal+0x2e8>)
 80183ce:	69b8      	ldr	r0, [r7, #24]
 80183d0:	f006 f964 	bl	801e69c <tcp_err>
    tcp_arg(tpcb, conn);
 80183d4:	6879      	ldr	r1, [r7, #4]
 80183d6:	69b8      	ldr	r0, [r7, #24]
 80183d8:	f006 f90c 	bl	801e5f4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80183dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d106      	bne.n	80183f2 <lwip_netconn_do_close_internal+0x2b2>
 80183e4:	4b06      	ldr	r3, [pc, #24]	; (8018400 <lwip_netconn_do_close_internal+0x2c0>)
 80183e6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80183ea:	4910      	ldr	r1, [pc, #64]	; (801842c <lwip_netconn_do_close_internal+0x2ec>)
 80183ec:	4806      	ldr	r0, [pc, #24]	; (8018408 <lwip_netconn_do_close_internal+0x2c8>)
 80183ee:	f00d f93f 	bl	8025670 <iprintf>
  return err;
 80183f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80183f6:	4618      	mov	r0, r3
 80183f8:	3720      	adds	r7, #32
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bd80      	pop	{r7, pc}
 80183fe:	bf00      	nop
 8018400:	08026524 	.word	0x08026524
 8018404:	0802679c 	.word	0x0802679c
 8018408:	0802657c 	.word	0x0802657c
 801840c:	080267ac 	.word	0x080267ac
 8018410:	080267cc 	.word	0x080267cc
 8018414:	080267f0 	.word	0x080267f0
 8018418:	08026658 	.word	0x08026658
 801841c:	08026804 	.word	0x08026804
 8018420:	0801797d 	.word	0x0801797d
 8018424:	080178b1 	.word	0x080178b1
 8018428:	08017a29 	.word	0x08017a29
 801842c:	08026828 	.word	0x08026828

08018430 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b086      	sub	sp, #24
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 801843c:	697b      	ldr	r3, [r7, #20]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	785b      	ldrb	r3, [r3, #1]
 8018442:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8018444:	7cfb      	ldrb	r3, [r7, #19]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d00d      	beq.n	8018466 <lwip_netconn_do_delconn+0x36>
 801844a:	697b      	ldr	r3, [r7, #20]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	781b      	ldrb	r3, [r3, #0]
 8018450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018454:	2b10      	cmp	r3, #16
 8018456:	d006      	beq.n	8018466 <lwip_netconn_do_delconn+0x36>
 8018458:	4b6f      	ldr	r3, [pc, #444]	; (8018618 <lwip_netconn_do_delconn+0x1e8>)
 801845a:	f240 4201 	movw	r2, #1025	; 0x401
 801845e:	496f      	ldr	r1, [pc, #444]	; (801861c <lwip_netconn_do_delconn+0x1ec>)
 8018460:	486f      	ldr	r0, [pc, #444]	; (8018620 <lwip_netconn_do_delconn+0x1f0>)
 8018462:	f00d f905 	bl	8025670 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8018466:	7cfb      	ldrb	r3, [r7, #19]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d005      	beq.n	8018478 <lwip_netconn_do_delconn+0x48>
 801846c:	7cfb      	ldrb	r3, [r7, #19]
 801846e:	2b02      	cmp	r3, #2
 8018470:	d002      	beq.n	8018478 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8018472:	7cfb      	ldrb	r3, [r7, #19]
 8018474:	2b03      	cmp	r3, #3
 8018476:	d109      	bne.n	801848c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8018478:	7cfb      	ldrb	r3, [r7, #19]
 801847a:	2b03      	cmp	r3, #3
 801847c:	d10a      	bne.n	8018494 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801847e:	697b      	ldr	r3, [r7, #20]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	7f1b      	ldrb	r3, [r3, #28]
 8018484:	f003 0304 	and.w	r3, r3, #4
 8018488:	2b00      	cmp	r3, #0
 801848a:	d103      	bne.n	8018494 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 801848c:	697b      	ldr	r3, [r7, #20]
 801848e:	22fb      	movs	r2, #251	; 0xfb
 8018490:	711a      	strb	r2, [r3, #4]
 8018492:	e09c      	b.n	80185ce <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8018494:	7cfb      	ldrb	r3, [r7, #19]
 8018496:	2b03      	cmp	r3, #3
 8018498:	d10d      	bne.n	80184b6 <lwip_netconn_do_delconn+0x86>
 801849a:	697b      	ldr	r3, [r7, #20]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	7f1b      	ldrb	r3, [r3, #28]
 80184a0:	f003 0304 	and.w	r3, r3, #4
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d106      	bne.n	80184b6 <lwip_netconn_do_delconn+0x86>
 80184a8:	4b5b      	ldr	r3, [pc, #364]	; (8018618 <lwip_netconn_do_delconn+0x1e8>)
 80184aa:	f240 421f 	movw	r2, #1055	; 0x41f
 80184ae:	495d      	ldr	r1, [pc, #372]	; (8018624 <lwip_netconn_do_delconn+0x1f4>)
 80184b0:	485b      	ldr	r0, [pc, #364]	; (8018620 <lwip_netconn_do_delconn+0x1f0>)
 80184b2:	f00d f8dd 	bl	8025670 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80184b6:	697b      	ldr	r3, [r7, #20]
 80184b8:	2200      	movs	r2, #0
 80184ba:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 80184bc:	697b      	ldr	r3, [r7, #20]
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	4618      	mov	r0, r3
 80184c2:	f7ff fdbd 	bl	8018040 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 80184c6:	697b      	ldr	r3, [r7, #20]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	685b      	ldr	r3, [r3, #4]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d064      	beq.n	801859a <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80184d0:	697b      	ldr	r3, [r7, #20]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	781b      	ldrb	r3, [r3, #0]
 80184d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80184da:	2b10      	cmp	r3, #16
 80184dc:	d00e      	beq.n	80184fc <lwip_netconn_do_delconn+0xcc>
 80184de:	2b20      	cmp	r3, #32
 80184e0:	d000      	beq.n	80184e4 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 80184e2:	e056      	b.n	8018592 <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	685b      	ldr	r3, [r3, #4]
 80184ea:	2200      	movs	r2, #0
 80184ec:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 80184ee:	697b      	ldr	r3, [r7, #20]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	685b      	ldr	r3, [r3, #4]
 80184f4:	4618      	mov	r0, r3
 80184f6:	f00a fbcd 	bl	8022c94 <udp_remove>
        break;
 80184fa:	e04a      	b.n	8018592 <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80184fc:	697b      	ldr	r3, [r7, #20]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018502:	2b00      	cmp	r3, #0
 8018504:	d104      	bne.n	8018510 <lwip_netconn_do_delconn+0xe0>
 8018506:	697b      	ldr	r3, [r7, #20]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	6a1b      	ldr	r3, [r3, #32]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d006      	beq.n	801851e <lwip_netconn_do_delconn+0xee>
 8018510:	4b41      	ldr	r3, [pc, #260]	; (8018618 <lwip_netconn_do_delconn+0x1e8>)
 8018512:	f240 4235 	movw	r2, #1077	; 0x435
 8018516:	4944      	ldr	r1, [pc, #272]	; (8018628 <lwip_netconn_do_delconn+0x1f8>)
 8018518:	4841      	ldr	r0, [pc, #260]	; (8018620 <lwip_netconn_do_delconn+0x1f0>)
 801851a:	f00d f8a9 	bl	8025670 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 801851e:	697b      	ldr	r3, [r7, #20]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	2204      	movs	r2, #4
 8018524:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8018526:	697b      	ldr	r3, [r7, #20]
 8018528:	2203      	movs	r2, #3
 801852a:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 801852c:	697b      	ldr	r3, [r7, #20]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	697a      	ldr	r2, [r7, #20]
 8018532:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8018534:	697b      	ldr	r3, [r7, #20]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	2100      	movs	r1, #0
 801853a:	4618      	mov	r0, r3
 801853c:	f7ff fe00 	bl	8018140 <lwip_netconn_do_close_internal>
 8018540:	4603      	mov	r3, r0
 8018542:	2b00      	cmp	r3, #0
 8018544:	d064      	beq.n	8018610 <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8018546:	697b      	ldr	r3, [r7, #20]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	785b      	ldrb	r3, [r3, #1]
 801854c:	2b04      	cmp	r3, #4
 801854e:	d006      	beq.n	801855e <lwip_netconn_do_delconn+0x12e>
 8018550:	4b31      	ldr	r3, [pc, #196]	; (8018618 <lwip_netconn_do_delconn+0x1e8>)
 8018552:	f240 423b 	movw	r2, #1083	; 0x43b
 8018556:	4935      	ldr	r1, [pc, #212]	; (801862c <lwip_netconn_do_delconn+0x1fc>)
 8018558:	4831      	ldr	r0, [pc, #196]	; (8018620 <lwip_netconn_do_delconn+0x1f0>)
 801855a:	f00d f889 	bl	8025670 <iprintf>
          UNLOCK_TCPIP_CORE();
 801855e:	4834      	ldr	r0, [pc, #208]	; (8018630 <lwip_netconn_do_delconn+0x200>)
 8018560:	f00a fe97 	bl	8023292 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018564:	697b      	ldr	r3, [r7, #20]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	330c      	adds	r3, #12
 801856a:	2100      	movs	r1, #0
 801856c:	4618      	mov	r0, r3
 801856e:	f00a fdef 	bl	8023150 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8018572:	482f      	ldr	r0, [pc, #188]	; (8018630 <lwip_netconn_do_delconn+0x200>)
 8018574:	f00a fe7e 	bl	8023274 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8018578:	697b      	ldr	r3, [r7, #20]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	785b      	ldrb	r3, [r3, #1]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d046      	beq.n	8018610 <lwip_netconn_do_delconn+0x1e0>
 8018582:	4b25      	ldr	r3, [pc, #148]	; (8018618 <lwip_netconn_do_delconn+0x1e8>)
 8018584:	f240 423f 	movw	r2, #1087	; 0x43f
 8018588:	4928      	ldr	r1, [pc, #160]	; (801862c <lwip_netconn_do_delconn+0x1fc>)
 801858a:	4825      	ldr	r0, [pc, #148]	; (8018620 <lwip_netconn_do_delconn+0x1f0>)
 801858c:	f00d f870 	bl	8025670 <iprintf>
        return;
 8018590:	e03e      	b.n	8018610 <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 8018592:	697b      	ldr	r3, [r7, #20]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	2200      	movs	r2, #0
 8018598:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801859a:	697b      	ldr	r3, [r7, #20]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d007      	beq.n	80185b4 <lwip_netconn_do_delconn+0x184>
 80185a4:	697b      	ldr	r3, [r7, #20]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185aa:	697a      	ldr	r2, [r7, #20]
 80185ac:	6810      	ldr	r0, [r2, #0]
 80185ae:	2200      	movs	r2, #0
 80185b0:	2100      	movs	r1, #0
 80185b2:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80185b4:	697b      	ldr	r3, [r7, #20]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d007      	beq.n	80185ce <lwip_netconn_do_delconn+0x19e>
 80185be:	697b      	ldr	r3, [r7, #20]
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185c4:	697a      	ldr	r2, [r7, #20]
 80185c6:	6810      	ldr	r0, [r2, #0]
 80185c8:	2200      	movs	r2, #0
 80185ca:	2102      	movs	r1, #2
 80185cc:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80185ce:	697b      	ldr	r3, [r7, #20]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	330c      	adds	r3, #12
 80185d4:	4618      	mov	r0, r3
 80185d6:	f00a fe06 	bl	80231e6 <sys_sem_valid>
 80185da:	4603      	mov	r3, r0
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d018      	beq.n	8018612 <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 80185e0:	697b      	ldr	r3, [r7, #20]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d014      	beq.n	8018612 <lwip_netconn_do_delconn+0x1e2>
 80185e8:	f00a fe7e 	bl	80232e8 <sys_arch_protect>
 80185ec:	60f8      	str	r0, [r7, #12]
 80185ee:	697b      	ldr	r3, [r7, #20]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80185f6:	f113 0f0c 	cmn.w	r3, #12
 80185fa:	db05      	blt.n	8018608 <lwip_netconn_do_delconn+0x1d8>
 80185fc:	697b      	ldr	r3, [r7, #20]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	697a      	ldr	r2, [r7, #20]
 8018602:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018606:	721a      	strb	r2, [r3, #8]
 8018608:	68f8      	ldr	r0, [r7, #12]
 801860a:	f00a fe7b 	bl	8023304 <sys_arch_unprotect>
 801860e:	e000      	b.n	8018612 <lwip_netconn_do_delconn+0x1e2>
        return;
 8018610:	bf00      	nop
  }
}
 8018612:	3718      	adds	r7, #24
 8018614:	46bd      	mov	sp, r7
 8018616:	bd80      	pop	{r7, pc}
 8018618:	08026524 	.word	0x08026524
 801861c:	08026838 	.word	0x08026838
 8018620:	0802657c 	.word	0x0802657c
 8018624:	0802684c 	.word	0x0802684c
 8018628:	0802686c 	.word	0x0802686c
 801862c:	08026888 	.word	0x08026888
 8018630:	200045f8 	.word	0x200045f8

08018634 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b084      	sub	sp, #16
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018648:	f113 0f0c 	cmn.w	r3, #12
 801864c:	da06      	bge.n	801865c <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	711a      	strb	r2, [r3, #4]
 801865a:	e02f      	b.n	80186bc <lwip_netconn_do_bind+0x88>
  } else {
    msg->err = ERR_VAL;
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	22fa      	movs	r2, #250	; 0xfa
 8018660:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d027      	beq.n	80186bc <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	781b      	ldrb	r3, [r3, #0]
 8018672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018676:	2b10      	cmp	r3, #16
 8018678:	d011      	beq.n	801869e <lwip_netconn_do_bind+0x6a>
 801867a:	2b20      	cmp	r3, #32
 801867c:	d000      	beq.n	8018680 <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 801867e:	e01d      	b.n	80186bc <lwip_netconn_do_bind+0x88>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	6858      	ldr	r0, [r3, #4]
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	6899      	ldr	r1, [r3, #8]
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	899b      	ldrh	r3, [r3, #12]
 801868e:	461a      	mov	r2, r3
 8018690:	f00a fa7e 	bl	8022b90 <udp_bind>
 8018694:	4603      	mov	r3, r0
 8018696:	461a      	mov	r2, r3
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	711a      	strb	r2, [r3, #4]
        break;
 801869c:	e00e      	b.n	80186bc <lwip_netconn_do_bind+0x88>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	6858      	ldr	r0, [r3, #4]
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	6899      	ldr	r1, [r3, #8]
 80186a8:	68fb      	ldr	r3, [r7, #12]
 80186aa:	899b      	ldrh	r3, [r3, #12]
 80186ac:	461a      	mov	r2, r3
 80186ae:	f005 f835 	bl	801d71c <tcp_bind>
 80186b2:	4603      	mov	r3, r0
 80186b4:	461a      	mov	r2, r3
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	711a      	strb	r2, [r3, #4]
        break;
 80186ba:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d012      	beq.n	80186ea <lwip_netconn_do_bind+0xb6>
 80186c4:	f00a fe10 	bl	80232e8 <sys_arch_protect>
 80186c8:	60b8      	str	r0, [r7, #8]
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80186d2:	f113 0f0c 	cmn.w	r3, #12
 80186d6:	db05      	blt.n	80186e4 <lwip_netconn_do_bind+0xb0>
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	68fa      	ldr	r2, [r7, #12]
 80186de:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80186e2:	721a      	strb	r2, [r3, #8]
 80186e4:	68b8      	ldr	r0, [r7, #8]
 80186e6:	f00a fe0d 	bl	8023304 <sys_arch_unprotect>
}
 80186ea:	bf00      	nop
 80186ec:	3710      	adds	r7, #16
 80186ee:	46bd      	mov	sp, r7
 80186f0:	bd80      	pop	{r7, pc}
	...

080186f4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b088      	sub	sp, #32
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8018700:	69fb      	ldr	r3, [r7, #28]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018708:	f113 0f0c 	cmn.w	r3, #12
 801870c:	da06      	bge.n	801871c <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 801870e:	69fb      	ldr	r3, [r7, #28]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018716:	69fb      	ldr	r3, [r7, #28]
 8018718:	711a      	strb	r2, [r3, #4]
 801871a:	e090      	b.n	801883e <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 801871c:	69fb      	ldr	r3, [r7, #28]
 801871e:	22f5      	movs	r2, #245	; 0xf5
 8018720:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8018722:	69fb      	ldr	r3, [r7, #28]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	685b      	ldr	r3, [r3, #4]
 8018728:	2b00      	cmp	r3, #0
 801872a:	f000 8088 	beq.w	801883e <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801872e:	69fb      	ldr	r3, [r7, #28]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	781b      	ldrb	r3, [r3, #0]
 8018734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018738:	2b10      	cmp	r3, #16
 801873a:	d17d      	bne.n	8018838 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 801873c:	69fb      	ldr	r3, [r7, #28]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	785b      	ldrb	r3, [r3, #1]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d16f      	bne.n	8018826 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8018746:	69fb      	ldr	r3, [r7, #28]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	685b      	ldr	r3, [r3, #4]
 801874c:	7d1b      	ldrb	r3, [r3, #20]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d003      	beq.n	801875a <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 8018752:	69fb      	ldr	r3, [r7, #28]
 8018754:	22fa      	movs	r2, #250	; 0xfa
 8018756:	711a      	strb	r2, [r3, #4]
 8018758:	e071      	b.n	801883e <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 801875a:	23ff      	movs	r3, #255	; 0xff
 801875c:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 801875e:	69fb      	ldr	r3, [r7, #28]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	685b      	ldr	r3, [r3, #4]
 8018764:	f107 020f 	add.w	r2, r7, #15
 8018768:	7ef9      	ldrb	r1, [r7, #27]
 801876a:	4618      	mov	r0, r3
 801876c:	f005 f878 	bl	801d860 <tcp_listen_with_backlog_and_err>
 8018770:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 8018772:	697b      	ldr	r3, [r7, #20]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d104      	bne.n	8018782 <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8018778:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801877c:	69fb      	ldr	r3, [r7, #28]
 801877e:	711a      	strb	r2, [r3, #4]
 8018780:	e05d      	b.n	801883e <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8018782:	69fb      	ldr	r3, [r7, #28]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	3310      	adds	r3, #16
 8018788:	4618      	mov	r0, r3
 801878a:	f00a fc9d 	bl	80230c8 <sys_mbox_valid>
 801878e:	4603      	mov	r3, r0
 8018790:	2b00      	cmp	r3, #0
 8018792:	d00b      	beq.n	80187ac <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 8018794:	69fb      	ldr	r3, [r7, #28]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	3310      	adds	r3, #16
 801879a:	4618      	mov	r0, r3
 801879c:	f00a fbf8 	bl	8022f90 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 80187a0:	69fb      	ldr	r3, [r7, #28]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	3310      	adds	r3, #16
 80187a6:	4618      	mov	r0, r3
 80187a8:	f00a fc9f 	bl	80230ea <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 80187ac:	69fb      	ldr	r3, [r7, #28]
 80187ae:	2200      	movs	r2, #0
 80187b0:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80187b2:	69fb      	ldr	r3, [r7, #28]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	3314      	adds	r3, #20
 80187b8:	4618      	mov	r0, r3
 80187ba:	f00a fc85 	bl	80230c8 <sys_mbox_valid>
 80187be:	4603      	mov	r3, r0
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d10a      	bne.n	80187da <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80187c4:	69fb      	ldr	r3, [r7, #28]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	3314      	adds	r3, #20
 80187ca:	2106      	movs	r1, #6
 80187cc:	4618      	mov	r0, r3
 80187ce:	f00a fbc1 	bl	8022f54 <sys_mbox_new>
 80187d2:	4603      	mov	r3, r0
 80187d4:	461a      	mov	r2, r3
 80187d6:	69fb      	ldr	r3, [r7, #28]
 80187d8:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 80187da:	69fb      	ldr	r3, [r7, #28]
 80187dc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d118      	bne.n	8018816 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 80187e4:	69fb      	ldr	r3, [r7, #28]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	2202      	movs	r2, #2
 80187ea:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 80187ec:	69fb      	ldr	r3, [r7, #28]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	697a      	ldr	r2, [r7, #20]
 80187f2:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80187f4:	69fb      	ldr	r3, [r7, #28]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	685a      	ldr	r2, [r3, #4]
 80187fa:	69fb      	ldr	r3, [r7, #28]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	4619      	mov	r1, r3
 8018800:	4610      	mov	r0, r2
 8018802:	f005 fef7 	bl	801e5f4 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8018806:	69fb      	ldr	r3, [r7, #28]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	685b      	ldr	r3, [r3, #4]
 801880c:	4919      	ldr	r1, [pc, #100]	; (8018874 <lwip_netconn_do_listen+0x180>)
 801880e:	4618      	mov	r0, r3
 8018810:	f005 ff66 	bl	801e6e0 <tcp_accept>
 8018814:	e013      	b.n	801883e <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 8018816:	6978      	ldr	r0, [r7, #20]
 8018818:	f004 fe62 	bl	801d4e0 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 801881c:	69fb      	ldr	r3, [r7, #28]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	2200      	movs	r2, #0
 8018822:	605a      	str	r2, [r3, #4]
 8018824:	e00b      	b.n	801883e <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8018826:	69fb      	ldr	r3, [r7, #28]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	785b      	ldrb	r3, [r3, #1]
 801882c:	2b02      	cmp	r3, #2
 801882e:	d106      	bne.n	801883e <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 8018830:	69fb      	ldr	r3, [r7, #28]
 8018832:	2200      	movs	r2, #0
 8018834:	711a      	strb	r2, [r3, #4]
 8018836:	e002      	b.n	801883e <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 8018838:	69fb      	ldr	r3, [r7, #28]
 801883a:	22f0      	movs	r2, #240	; 0xf0
 801883c:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 801883e:	69fb      	ldr	r3, [r7, #28]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d012      	beq.n	801886c <lwip_netconn_do_listen+0x178>
 8018846:	f00a fd4f 	bl	80232e8 <sys_arch_protect>
 801884a:	6138      	str	r0, [r7, #16]
 801884c:	69fb      	ldr	r3, [r7, #28]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018854:	f113 0f0c 	cmn.w	r3, #12
 8018858:	db05      	blt.n	8018866 <lwip_netconn_do_listen+0x172>
 801885a:	69fb      	ldr	r3, [r7, #28]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	69fa      	ldr	r2, [r7, #28]
 8018860:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018864:	721a      	strb	r2, [r3, #8]
 8018866:	6938      	ldr	r0, [r7, #16]
 8018868:	f00a fd4c 	bl	8023304 <sys_arch_unprotect>
}
 801886c:	bf00      	nop
 801886e:	3720      	adds	r7, #32
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}
 8018874:	08017c59 	.word	0x08017c59

08018878 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b086      	sub	sp, #24
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8018884:	693b      	ldr	r3, [r7, #16]
 8018886:	2200      	movs	r2, #0
 8018888:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 801888a:	693b      	ldr	r3, [r7, #16]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	685b      	ldr	r3, [r3, #4]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d022      	beq.n	80188da <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8018894:	693b      	ldr	r3, [r7, #16]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	781b      	ldrb	r3, [r3, #0]
 801889a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801889e:	2b10      	cmp	r3, #16
 80188a0:	d11b      	bne.n	80188da <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 80188a2:	693b      	ldr	r3, [r7, #16]
 80188a4:	689b      	ldr	r3, [r3, #8]
 80188a6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 80188a8:	697b      	ldr	r3, [r7, #20]
 80188aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80188ae:	d202      	bcs.n	80188b6 <lwip_netconn_do_recv+0x3e>
 80188b0:	697b      	ldr	r3, [r7, #20]
 80188b2:	b29b      	uxth	r3, r3
 80188b4:	e001      	b.n	80188ba <lwip_netconn_do_recv+0x42>
 80188b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80188ba:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80188bc:	693b      	ldr	r3, [r7, #16]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	685b      	ldr	r3, [r3, #4]
 80188c2:	89fa      	ldrh	r2, [r7, #14]
 80188c4:	4611      	mov	r1, r2
 80188c6:	4618      	mov	r0, r3
 80188c8:	f005 f8b2 	bl	801da30 <tcp_recved>
        remaining -= recved;
 80188cc:	89fb      	ldrh	r3, [r7, #14]
 80188ce:	697a      	ldr	r2, [r7, #20]
 80188d0:	1ad3      	subs	r3, r2, r3
 80188d2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80188d4:	697b      	ldr	r3, [r7, #20]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d1e6      	bne.n	80188a8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80188da:	693b      	ldr	r3, [r7, #16]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d012      	beq.n	8018908 <lwip_netconn_do_recv+0x90>
 80188e2:	f00a fd01 	bl	80232e8 <sys_arch_protect>
 80188e6:	60b8      	str	r0, [r7, #8]
 80188e8:	693b      	ldr	r3, [r7, #16]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80188f0:	f113 0f0c 	cmn.w	r3, #12
 80188f4:	db05      	blt.n	8018902 <lwip_netconn_do_recv+0x8a>
 80188f6:	693b      	ldr	r3, [r7, #16]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	693a      	ldr	r2, [r7, #16]
 80188fc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018900:	721a      	strb	r2, [r3, #8]
 8018902:	68b8      	ldr	r0, [r7, #8]
 8018904:	f00a fcfe 	bl	8023304 <sys_arch_unprotect>
}
 8018908:	bf00      	nop
 801890a:	3718      	adds	r7, #24
 801890c:	46bd      	mov	sp, r7
 801890e:	bd80      	pop	{r7, pc}

08018910 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b08a      	sub	sp, #40	; 0x28
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
 8018918:	460b      	mov	r3, r1
 801891a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801891c:	2300      	movs	r3, #0
 801891e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d106      	bne.n	8018936 <lwip_netconn_do_writemore+0x26>
 8018928:	4ba3      	ldr	r3, [pc, #652]	; (8018bb8 <lwip_netconn_do_writemore+0x2a8>)
 801892a:	f240 52e3 	movw	r2, #1507	; 0x5e3
 801892e:	49a3      	ldr	r1, [pc, #652]	; (8018bbc <lwip_netconn_do_writemore+0x2ac>)
 8018930:	48a3      	ldr	r0, [pc, #652]	; (8018bc0 <lwip_netconn_do_writemore+0x2b0>)
 8018932:	f00c fe9d 	bl	8025670 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	785b      	ldrb	r3, [r3, #1]
 801893a:	2b01      	cmp	r3, #1
 801893c:	d006      	beq.n	801894c <lwip_netconn_do_writemore+0x3c>
 801893e:	4b9e      	ldr	r3, [pc, #632]	; (8018bb8 <lwip_netconn_do_writemore+0x2a8>)
 8018940:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8018944:	499f      	ldr	r1, [pc, #636]	; (8018bc4 <lwip_netconn_do_writemore+0x2b4>)
 8018946:	489e      	ldr	r0, [pc, #632]	; (8018bc0 <lwip_netconn_do_writemore+0x2b0>)
 8018948:	f00c fe92 	bl	8025670 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018950:	2b00      	cmp	r3, #0
 8018952:	d106      	bne.n	8018962 <lwip_netconn_do_writemore+0x52>
 8018954:	4b98      	ldr	r3, [pc, #608]	; (8018bb8 <lwip_netconn_do_writemore+0x2a8>)
 8018956:	f240 52e5 	movw	r2, #1509	; 0x5e5
 801895a:	499b      	ldr	r1, [pc, #620]	; (8018bc8 <lwip_netconn_do_writemore+0x2b8>)
 801895c:	4898      	ldr	r0, [pc, #608]	; (8018bc0 <lwip_netconn_do_writemore+0x2b0>)
 801895e:	f00c fe87 	bl	8025670 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d106      	bne.n	8018978 <lwip_netconn_do_writemore+0x68>
 801896a:	4b93      	ldr	r3, [pc, #588]	; (8018bb8 <lwip_netconn_do_writemore+0x2a8>)
 801896c:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8018970:	4996      	ldr	r1, [pc, #600]	; (8018bcc <lwip_netconn_do_writemore+0x2bc>)
 8018972:	4893      	ldr	r0, [pc, #588]	; (8018bc0 <lwip_netconn_do_writemore+0x2b0>)
 8018974:	f00c fe7c 	bl	8025670 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6a1a      	ldr	r2, [r3, #32]
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018980:	68db      	ldr	r3, [r3, #12]
 8018982:	429a      	cmp	r2, r3
 8018984:	d306      	bcc.n	8018994 <lwip_netconn_do_writemore+0x84>
 8018986:	4b8c      	ldr	r3, [pc, #560]	; (8018bb8 <lwip_netconn_do_writemore+0x2a8>)
 8018988:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 801898c:	4990      	ldr	r1, [pc, #576]	; (8018bd0 <lwip_netconn_do_writemore+0x2c0>)
 801898e:	488c      	ldr	r0, [pc, #560]	; (8018bc0 <lwip_netconn_do_writemore+0x2b0>)
 8018990:	f00c fe6e 	bl	8025670 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018998:	7c1b      	ldrb	r3, [r3, #16]
 801899a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	7f1b      	ldrb	r3, [r3, #28]
 80189a2:	f003 0302 	and.w	r3, r3, #2
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d105      	bne.n	80189b6 <lwip_netconn_do_writemore+0xa6>
 80189aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80189ae:	f003 0304 	and.w	r3, r3, #4
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d001      	beq.n	80189ba <lwip_netconn_do_writemore+0xaa>
 80189b6:	2301      	movs	r3, #1
 80189b8:	e000      	b.n	80189bc <lwip_netconn_do_writemore+0xac>
 80189ba:	2300      	movs	r3, #0
 80189bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c4:	689a      	ldr	r2, [r3, #8]
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	6a1b      	ldr	r3, [r3, #32]
 80189ca:	4413      	add	r3, r2
 80189cc:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189d2:	68da      	ldr	r2, [r3, #12]
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6a1b      	ldr	r3, [r3, #32]
 80189d8:	1ad3      	subs	r3, r2, r3
 80189da:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 80189dc:	69bb      	ldr	r3, [r7, #24]
 80189de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80189e2:	d309      	bcc.n	80189f8 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 80189e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189e8:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 80189ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80189ee:	f043 0302 	orr.w	r3, r3, #2
 80189f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80189f6:	e001      	b.n	80189fc <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 80189f8:	69bb      	ldr	r3, [r7, #24]
 80189fa:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	685b      	ldr	r3, [r3, #4]
 8018a00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018a04:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8018a06:	8afa      	ldrh	r2, [r7, #22]
 8018a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a0a:	429a      	cmp	r2, r3
 8018a0c:	d212      	bcs.n	8018a34 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 8018a0e:	8afb      	ldrh	r3, [r7, #22]
 8018a10:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8018a12:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d006      	beq.n	8018a28 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 8018a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d109      	bne.n	8018a34 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 8018a20:	23f9      	movs	r3, #249	; 0xf9
 8018a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8018a26:	e029      	b.n	8018a7c <lwip_netconn_do_writemore+0x16c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8018a28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018a2c:	f043 0302 	orr.w	r3, r3, #2
 8018a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	6a1a      	ldr	r2, [r3, #32]
 8018a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a3a:	441a      	add	r2, r3
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a40:	68db      	ldr	r3, [r3, #12]
 8018a42:	429a      	cmp	r2, r3
 8018a44:	d906      	bls.n	8018a54 <lwip_netconn_do_writemore+0x144>
 8018a46:	4b5c      	ldr	r3, [pc, #368]	; (8018bb8 <lwip_netconn_do_writemore+0x2a8>)
 8018a48:	f240 6213 	movw	r2, #1555	; 0x613
 8018a4c:	4961      	ldr	r1, [pc, #388]	; (8018bd4 <lwip_netconn_do_writemore+0x2c4>)
 8018a4e:	485c      	ldr	r0, [pc, #368]	; (8018bc0 <lwip_netconn_do_writemore+0x2b0>)
 8018a50:	f00c fe0e 	bl	8025670 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	6858      	ldr	r0, [r3, #4]
 8018a58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018a5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a5e:	69f9      	ldr	r1, [r7, #28]
 8018a60:	f008 fc08 	bl	8021274 <tcp_write>
 8018a64:	4603      	mov	r3, r0
 8018a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8018a6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d004      	beq.n	8018a7c <lwip_netconn_do_writemore+0x16c>
 8018a72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a7a:	d133      	bne.n	8018ae4 <lwip_netconn_do_writemore+0x1d4>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8018a7c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d017      	beq.n	8018ab4 <lwip_netconn_do_writemore+0x1a4>
 8018a84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a8a:	68db      	ldr	r3, [r3, #12]
 8018a8c:	429a      	cmp	r2, r3
 8018a8e:	d211      	bcs.n	8018ab4 <lwip_netconn_do_writemore+0x1a4>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d005      	beq.n	8018aa4 <lwip_netconn_do_writemore+0x194>
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a9e:	2103      	movs	r1, #3
 8018aa0:	6878      	ldr	r0, [r7, #4]
 8018aa2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	7f1b      	ldrb	r3, [r3, #28]
 8018aa8:	f043 0310 	orr.w	r3, r3, #16
 8018aac:	b2da      	uxtb	r2, r3
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	771a      	strb	r2, [r3, #28]
 8018ab2:	e017      	b.n	8018ae4 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	685b      	ldr	r3, [r3, #4]
 8018ab8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018abc:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8018ac0:	4293      	cmp	r3, r2
 8018ac2:	d905      	bls.n	8018ad0 <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	685b      	ldr	r3, [r3, #4]
 8018ac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8018acc:	2b04      	cmp	r3, #4
 8018ace:	d909      	bls.n	8018ae4 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d005      	beq.n	8018ae4 <lwip_netconn_do_writemore+0x1d4>
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018adc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018ade:	2103      	movs	r1, #3
 8018ae0:	6878      	ldr	r0, [r7, #4]
 8018ae2:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8018ae4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d134      	bne.n	8018b56 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	6a1a      	ldr	r2, [r3, #32]
 8018af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018af2:	441a      	add	r2, r3
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	6a1a      	ldr	r2, [r3, #32]
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b00:	68db      	ldr	r3, [r3, #12]
 8018b02:	429a      	cmp	r2, r3
 8018b04:	d003      	beq.n	8018b0e <lwip_netconn_do_writemore+0x1fe>
 8018b06:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d007      	beq.n	8018b1e <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b12:	687a      	ldr	r2, [r7, #4]
 8018b14:	6a12      	ldr	r2, [r2, #32]
 8018b16:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8018b18:	2301      	movs	r3, #1
 8018b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	685b      	ldr	r3, [r3, #4]
 8018b22:	4618      	mov	r0, r3
 8018b24:	f009 f85c 	bl	8021be0 <tcp_output>
 8018b28:	4603      	mov	r3, r0
 8018b2a:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8018b2c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018b30:	f113 0f0c 	cmn.w	r3, #12
 8018b34:	db04      	blt.n	8018b40 <lwip_netconn_do_writemore+0x230>
 8018b36:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018b3a:	f113 0f04 	cmn.w	r3, #4
 8018b3e:	d152      	bne.n	8018be6 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8018b40:	7d7b      	ldrb	r3, [r7, #21]
 8018b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018b46:	2301      	movs	r3, #1
 8018b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b50:	2200      	movs	r2, #0
 8018b52:	60da      	str	r2, [r3, #12]
 8018b54:	e047      	b.n	8018be6 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 8018b56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b5e:	d13b      	bne.n	8018bd8 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	685b      	ldr	r3, [r3, #4]
 8018b64:	4618      	mov	r0, r3
 8018b66:	f009 f83b 	bl	8021be0 <tcp_output>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8018b6e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018b72:	f113 0f0c 	cmn.w	r3, #12
 8018b76:	db04      	blt.n	8018b82 <lwip_netconn_do_writemore+0x272>
 8018b78:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018b7c:	f113 0f04 	cmn.w	r3, #4
 8018b80:	d10a      	bne.n	8018b98 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8018b82:	7d3b      	ldrb	r3, [r7, #20]
 8018b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018b88:	2301      	movs	r3, #1
 8018b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b92:	2200      	movs	r2, #0
 8018b94:	60da      	str	r2, [r3, #12]
 8018b96:	e026      	b.n	8018be6 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 8018b98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d022      	beq.n	8018be6 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8018ba0:	23f9      	movs	r3, #249	; 0xf9
 8018ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018ba6:	2301      	movs	r3, #1
 8018ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bb0:	2200      	movs	r2, #0
 8018bb2:	60da      	str	r2, [r3, #12]
 8018bb4:	e017      	b.n	8018be6 <lwip_netconn_do_writemore+0x2d6>
 8018bb6:	bf00      	nop
 8018bb8:	08026524 	.word	0x08026524
 8018bbc:	08026648 	.word	0x08026648
 8018bc0:	0802657c 	.word	0x0802657c
 8018bc4:	08026928 	.word	0x08026928
 8018bc8:	08026658 	.word	0x08026658
 8018bcc:	08026948 	.word	0x08026948
 8018bd0:	08026960 	.word	0x08026960
 8018bd4:	08026994 	.word	0x08026994
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8018bd8:	2301      	movs	r3, #1
 8018bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018be2:	2200      	movs	r2, #0
 8018be4:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8018be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d02c      	beq.n	8018c48 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	330c      	adds	r3, #12
 8018bf6:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bfc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018c00:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	2200      	movs	r2, #0
 8018c06:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	2200      	movs	r2, #0
 8018c0c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	2200      	movs	r2, #0
 8018c12:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d00f      	beq.n	8018c3a <lwip_netconn_do_writemore+0x32a>
 8018c1a:	f00a fb65 	bl	80232e8 <sys_arch_protect>
 8018c1e:	60f8      	str	r0, [r7, #12]
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018c26:	f113 0f0c 	cmn.w	r3, #12
 8018c2a:	db03      	blt.n	8018c34 <lwip_netconn_do_writemore+0x324>
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018c32:	721a      	strb	r2, [r3, #8]
 8018c34:	68f8      	ldr	r0, [r7, #12]
 8018c36:	f00a fb65 	bl	8023304 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8018c3a:	78fb      	ldrb	r3, [r7, #3]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d006      	beq.n	8018c4e <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8018c40:	6938      	ldr	r0, [r7, #16]
 8018c42:	f00a fab6 	bl	80231b2 <sys_sem_signal>
 8018c46:	e002      	b.n	8018c4e <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8018c48:	f04f 33ff 	mov.w	r3, #4294967295
 8018c4c:	e000      	b.n	8018c50 <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 8018c4e:	2300      	movs	r3, #0
}
 8018c50:	4618      	mov	r0, r3
 8018c52:	3728      	adds	r7, #40	; 0x28
 8018c54:	46bd      	mov	sp, r7
 8018c56:	bd80      	pop	{r7, pc}

08018c58 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b084      	sub	sp, #16
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018c6c:	f113 0f0c 	cmn.w	r3, #12
 8018c70:	da06      	bge.n	8018c80 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	711a      	strb	r2, [r3, #4]
 8018c7e:	e072      	b.n	8018d66 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018c8a:	2b10      	cmp	r3, #16
 8018c8c:	d168      	bne.n	8018d60 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	785b      	ldrb	r3, [r3, #1]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d003      	beq.n	8018ca0 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	22fb      	movs	r2, #251	; 0xfb
 8018c9c:	711a      	strb	r2, [r3, #4]
 8018c9e:	e062      	b.n	8018d66 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	685b      	ldr	r3, [r3, #4]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d056      	beq.n	8018d58 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	2201      	movs	r2, #1
 8018cb0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d104      	bne.n	8018cc6 <lwip_netconn_do_write+0x6e>
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	6a1b      	ldr	r3, [r3, #32]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d006      	beq.n	8018cd4 <lwip_netconn_do_write+0x7c>
 8018cc6:	4b36      	ldr	r3, [pc, #216]	; (8018da0 <lwip_netconn_do_write+0x148>)
 8018cc8:	f240 6283 	movw	r2, #1667	; 0x683
 8018ccc:	4935      	ldr	r1, [pc, #212]	; (8018da4 <lwip_netconn_do_write+0x14c>)
 8018cce:	4836      	ldr	r0, [pc, #216]	; (8018da8 <lwip_netconn_do_write+0x150>)
 8018cd0:	f00c fcce 	bl	8025670 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	68db      	ldr	r3, [r3, #12]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d106      	bne.n	8018cea <lwip_netconn_do_write+0x92>
 8018cdc:	4b30      	ldr	r3, [pc, #192]	; (8018da0 <lwip_netconn_do_write+0x148>)
 8018cde:	f240 6284 	movw	r2, #1668	; 0x684
 8018ce2:	4932      	ldr	r1, [pc, #200]	; (8018dac <lwip_netconn_do_write+0x154>)
 8018ce4:	4830      	ldr	r0, [pc, #192]	; (8018da8 <lwip_netconn_do_write+0x150>)
 8018ce6:	f00c fcc3 	bl	8025670 <iprintf>
        msg->conn->current_msg = msg;
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	68fa      	ldr	r2, [r7, #12]
 8018cf0:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	2100      	movs	r1, #0
 8018d00:	4618      	mov	r0, r3
 8018d02:	f7ff fe05 	bl	8018910 <lwip_netconn_do_writemore>
 8018d06:	4603      	mov	r3, r0
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d044      	beq.n	8018d96 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	785b      	ldrb	r3, [r3, #1]
 8018d12:	2b01      	cmp	r3, #1
 8018d14:	d006      	beq.n	8018d24 <lwip_netconn_do_write+0xcc>
 8018d16:	4b22      	ldr	r3, [pc, #136]	; (8018da0 <lwip_netconn_do_write+0x148>)
 8018d18:	f240 6289 	movw	r2, #1673	; 0x689
 8018d1c:	4924      	ldr	r1, [pc, #144]	; (8018db0 <lwip_netconn_do_write+0x158>)
 8018d1e:	4822      	ldr	r0, [pc, #136]	; (8018da8 <lwip_netconn_do_write+0x150>)
 8018d20:	f00c fca6 	bl	8025670 <iprintf>
          UNLOCK_TCPIP_CORE();
 8018d24:	4823      	ldr	r0, [pc, #140]	; (8018db4 <lwip_netconn_do_write+0x15c>)
 8018d26:	f00a fab4 	bl	8023292 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	330c      	adds	r3, #12
 8018d30:	2100      	movs	r1, #0
 8018d32:	4618      	mov	r0, r3
 8018d34:	f00a fa0c 	bl	8023150 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8018d38:	481e      	ldr	r0, [pc, #120]	; (8018db4 <lwip_netconn_do_write+0x15c>)
 8018d3a:	f00a fa9b 	bl	8023274 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	785b      	ldrb	r3, [r3, #1]
 8018d44:	2b01      	cmp	r3, #1
 8018d46:	d126      	bne.n	8018d96 <lwip_netconn_do_write+0x13e>
 8018d48:	4b15      	ldr	r3, [pc, #84]	; (8018da0 <lwip_netconn_do_write+0x148>)
 8018d4a:	f240 628d 	movw	r2, #1677	; 0x68d
 8018d4e:	4918      	ldr	r1, [pc, #96]	; (8018db0 <lwip_netconn_do_write+0x158>)
 8018d50:	4815      	ldr	r0, [pc, #84]	; (8018da8 <lwip_netconn_do_write+0x150>)
 8018d52:	f00c fc8d 	bl	8025670 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8018d56:	e01e      	b.n	8018d96 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	22f5      	movs	r2, #245	; 0xf5
 8018d5c:	711a      	strb	r2, [r3, #4]
 8018d5e:	e002      	b.n	8018d66 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	22fa      	movs	r2, #250	; 0xfa
 8018d64:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d014      	beq.n	8018d98 <lwip_netconn_do_write+0x140>
 8018d6e:	f00a fabb 	bl	80232e8 <sys_arch_protect>
 8018d72:	60b8      	str	r0, [r7, #8]
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d7c:	f113 0f0c 	cmn.w	r3, #12
 8018d80:	db05      	blt.n	8018d8e <lwip_netconn_do_write+0x136>
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	68fa      	ldr	r2, [r7, #12]
 8018d88:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018d8c:	721a      	strb	r2, [r3, #8]
 8018d8e:	68b8      	ldr	r0, [r7, #8]
 8018d90:	f00a fab8 	bl	8023304 <sys_arch_unprotect>
 8018d94:	e000      	b.n	8018d98 <lwip_netconn_do_write+0x140>
        return;
 8018d96:	bf00      	nop
}
 8018d98:	3710      	adds	r7, #16
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	bd80      	pop	{r7, pc}
 8018d9e:	bf00      	nop
 8018da0:	08026524 	.word	0x08026524
 8018da4:	0802686c 	.word	0x0802686c
 8018da8:	0802657c 	.word	0x0802657c
 8018dac:	080269c0 	.word	0x080269c0
 8018db0:	08026888 	.word	0x08026888
 8018db4:	200045f8 	.word	0x200045f8

08018db8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b086      	sub	sp, #24
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8018dc4:	697b      	ldr	r3, [r7, #20]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	785b      	ldrb	r3, [r3, #1]
 8018dca:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8018dcc:	697b      	ldr	r3, [r7, #20]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	685b      	ldr	r3, [r3, #4]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d06e      	beq.n	8018eb4 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8018dd6:	697b      	ldr	r3, [r7, #20]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	781b      	ldrb	r3, [r3, #0]
 8018ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8018de0:	2b10      	cmp	r3, #16
 8018de2:	d167      	bne.n	8018eb4 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8018de4:	697b      	ldr	r3, [r7, #20]
 8018de6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8018de8:	2b03      	cmp	r3, #3
 8018dea:	d002      	beq.n	8018df2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8018dec:	7cfb      	ldrb	r3, [r7, #19]
 8018dee:	2b02      	cmp	r3, #2
 8018df0:	d060      	beq.n	8018eb4 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8018df2:	7cfb      	ldrb	r3, [r7, #19]
 8018df4:	2b03      	cmp	r3, #3
 8018df6:	d103      	bne.n	8018e00 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8018df8:	697b      	ldr	r3, [r7, #20]
 8018dfa:	22f5      	movs	r2, #245	; 0xf5
 8018dfc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8018dfe:	e05c      	b.n	8018eba <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8018e00:	7cfb      	ldrb	r3, [r7, #19]
 8018e02:	2b01      	cmp	r3, #1
 8018e04:	d103      	bne.n	8018e0e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8018e06:	697b      	ldr	r3, [r7, #20]
 8018e08:	22fb      	movs	r2, #251	; 0xfb
 8018e0a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8018e0c:	e055      	b.n	8018eba <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8018e0e:	697b      	ldr	r3, [r7, #20]
 8018e10:	7a1b      	ldrb	r3, [r3, #8]
 8018e12:	f003 0301 	and.w	r3, r3, #1
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d004      	beq.n	8018e24 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	4618      	mov	r0, r3
 8018e20:	f7ff f90e 	bl	8018040 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d104      	bne.n	8018e38 <lwip_netconn_do_close+0x80>
 8018e2e:	697b      	ldr	r3, [r7, #20]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	6a1b      	ldr	r3, [r3, #32]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d006      	beq.n	8018e46 <lwip_netconn_do_close+0x8e>
 8018e38:	4b2e      	ldr	r3, [pc, #184]	; (8018ef4 <lwip_netconn_do_close+0x13c>)
 8018e3a:	f240 721c 	movw	r2, #1820	; 0x71c
 8018e3e:	492e      	ldr	r1, [pc, #184]	; (8018ef8 <lwip_netconn_do_close+0x140>)
 8018e40:	482e      	ldr	r0, [pc, #184]	; (8018efc <lwip_netconn_do_close+0x144>)
 8018e42:	f00c fc15 	bl	8025670 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8018e46:	697b      	ldr	r3, [r7, #20]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	2204      	movs	r2, #4
 8018e4c:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8018e4e:	697b      	ldr	r3, [r7, #20]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	697a      	ldr	r2, [r7, #20]
 8018e54:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8018e56:	697b      	ldr	r3, [r7, #20]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	2100      	movs	r1, #0
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f7ff f96f 	bl	8018140 <lwip_netconn_do_close_internal>
 8018e62:	4603      	mov	r3, r0
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d040      	beq.n	8018eea <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8018e68:	697b      	ldr	r3, [r7, #20]
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	785b      	ldrb	r3, [r3, #1]
 8018e6e:	2b04      	cmp	r3, #4
 8018e70:	d006      	beq.n	8018e80 <lwip_netconn_do_close+0xc8>
 8018e72:	4b20      	ldr	r3, [pc, #128]	; (8018ef4 <lwip_netconn_do_close+0x13c>)
 8018e74:	f240 7221 	movw	r2, #1825	; 0x721
 8018e78:	4921      	ldr	r1, [pc, #132]	; (8018f00 <lwip_netconn_do_close+0x148>)
 8018e7a:	4820      	ldr	r0, [pc, #128]	; (8018efc <lwip_netconn_do_close+0x144>)
 8018e7c:	f00c fbf8 	bl	8025670 <iprintf>
        UNLOCK_TCPIP_CORE();
 8018e80:	4820      	ldr	r0, [pc, #128]	; (8018f04 <lwip_netconn_do_close+0x14c>)
 8018e82:	f00a fa06 	bl	8023292 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018e86:	697b      	ldr	r3, [r7, #20]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	330c      	adds	r3, #12
 8018e8c:	2100      	movs	r1, #0
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f00a f95e 	bl	8023150 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8018e94:	481b      	ldr	r0, [pc, #108]	; (8018f04 <lwip_netconn_do_close+0x14c>)
 8018e96:	f00a f9ed 	bl	8023274 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	785b      	ldrb	r3, [r3, #1]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d022      	beq.n	8018eea <lwip_netconn_do_close+0x132>
 8018ea4:	4b13      	ldr	r3, [pc, #76]	; (8018ef4 <lwip_netconn_do_close+0x13c>)
 8018ea6:	f240 7225 	movw	r2, #1829	; 0x725
 8018eaa:	4915      	ldr	r1, [pc, #84]	; (8018f00 <lwip_netconn_do_close+0x148>)
 8018eac:	4813      	ldr	r0, [pc, #76]	; (8018efc <lwip_netconn_do_close+0x144>)
 8018eae:	f00c fbdf 	bl	8025670 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8018eb2:	e01a      	b.n	8018eea <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8018eb4:	697b      	ldr	r3, [r7, #20]
 8018eb6:	22f5      	movs	r2, #245	; 0xf5
 8018eb8:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8018eba:	697b      	ldr	r3, [r7, #20]
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d014      	beq.n	8018eec <lwip_netconn_do_close+0x134>
 8018ec2:	f00a fa11 	bl	80232e8 <sys_arch_protect>
 8018ec6:	60f8      	str	r0, [r7, #12]
 8018ec8:	697b      	ldr	r3, [r7, #20]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018ed0:	f113 0f0c 	cmn.w	r3, #12
 8018ed4:	db05      	blt.n	8018ee2 <lwip_netconn_do_close+0x12a>
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	697a      	ldr	r2, [r7, #20]
 8018edc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018ee0:	721a      	strb	r2, [r3, #8]
 8018ee2:	68f8      	ldr	r0, [r7, #12]
 8018ee4:	f00a fa0e 	bl	8023304 <sys_arch_unprotect>
 8018ee8:	e000      	b.n	8018eec <lwip_netconn_do_close+0x134>
      return;
 8018eea:	bf00      	nop
}
 8018eec:	3718      	adds	r7, #24
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}
 8018ef2:	bf00      	nop
 8018ef4:	08026524 	.word	0x08026524
 8018ef8:	0802686c 	.word	0x0802686c
 8018efc:	0802657c 	.word	0x0802657c
 8018f00:	08026888 	.word	0x08026888
 8018f04:	200045f8 	.word	0x200045f8

08018f08 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d013      	beq.n	8018f3e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d00b      	beq.n	8018f36 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	4618      	mov	r0, r3
 8018f24:	f003 fea8 	bl	801cc78 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	605a      	str	r2, [r3, #4]
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	685a      	ldr	r2, [r3, #4]
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8018f36:	6879      	ldr	r1, [r7, #4]
 8018f38:	2006      	movs	r0, #6
 8018f3a:	f003 f943 	bl	801c1c4 <memp_free>
  }
}
 8018f3e:	bf00      	nop
 8018f40:	3708      	adds	r7, #8
 8018f42:	46bd      	mov	sp, r7
 8018f44:	bd80      	pop	{r7, pc}
	...

08018f48 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b084      	sub	sp, #16
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	60f8      	str	r0, [r7, #12]
 8018f50:	60b9      	str	r1, [r7, #8]
 8018f52:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d108      	bne.n	8018f6c <netbuf_data+0x24>
 8018f5a:	4b1b      	ldr	r3, [pc, #108]	; (8018fc8 <netbuf_data+0x80>)
 8018f5c:	22c2      	movs	r2, #194	; 0xc2
 8018f5e:	491b      	ldr	r1, [pc, #108]	; (8018fcc <netbuf_data+0x84>)
 8018f60:	481b      	ldr	r0, [pc, #108]	; (8018fd0 <netbuf_data+0x88>)
 8018f62:	f00c fb85 	bl	8025670 <iprintf>
 8018f66:	f06f 030f 	mvn.w	r3, #15
 8018f6a:	e029      	b.n	8018fc0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8018f6c:	68bb      	ldr	r3, [r7, #8]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d108      	bne.n	8018f84 <netbuf_data+0x3c>
 8018f72:	4b15      	ldr	r3, [pc, #84]	; (8018fc8 <netbuf_data+0x80>)
 8018f74:	22c3      	movs	r2, #195	; 0xc3
 8018f76:	4917      	ldr	r1, [pc, #92]	; (8018fd4 <netbuf_data+0x8c>)
 8018f78:	4815      	ldr	r0, [pc, #84]	; (8018fd0 <netbuf_data+0x88>)
 8018f7a:	f00c fb79 	bl	8025670 <iprintf>
 8018f7e:	f06f 030f 	mvn.w	r3, #15
 8018f82:	e01d      	b.n	8018fc0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d108      	bne.n	8018f9c <netbuf_data+0x54>
 8018f8a:	4b0f      	ldr	r3, [pc, #60]	; (8018fc8 <netbuf_data+0x80>)
 8018f8c:	22c4      	movs	r2, #196	; 0xc4
 8018f8e:	4912      	ldr	r1, [pc, #72]	; (8018fd8 <netbuf_data+0x90>)
 8018f90:	480f      	ldr	r0, [pc, #60]	; (8018fd0 <netbuf_data+0x88>)
 8018f92:	f00c fb6d 	bl	8025670 <iprintf>
 8018f96:	f06f 030f 	mvn.w	r3, #15
 8018f9a:	e011      	b.n	8018fc0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	685b      	ldr	r3, [r3, #4]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d102      	bne.n	8018faa <netbuf_data+0x62>
    return ERR_BUF;
 8018fa4:	f06f 0301 	mvn.w	r3, #1
 8018fa8:	e00a      	b.n	8018fc0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	685b      	ldr	r3, [r3, #4]
 8018fae:	685a      	ldr	r2, [r3, #4]
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	685b      	ldr	r3, [r3, #4]
 8018fb8:	895a      	ldrh	r2, [r3, #10]
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8018fbe:	2300      	movs	r3, #0
}
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	3710      	adds	r7, #16
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd80      	pop	{r7, pc}
 8018fc8:	080269ec 	.word	0x080269ec
 8018fcc:	08026af4 	.word	0x08026af4
 8018fd0:	08026a3c 	.word	0x08026a3c
 8018fd4:	08026b10 	.word	0x08026b10
 8018fd8:	08026b30 	.word	0x08026b30

08018fdc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b084      	sub	sp, #16
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8018fe4:	4b29      	ldr	r3, [pc, #164]	; (801908c <tcpip_thread+0xb0>)
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d005      	beq.n	8018ff8 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8018fec:	4b27      	ldr	r3, [pc, #156]	; (801908c <tcpip_thread+0xb0>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	4a27      	ldr	r2, [pc, #156]	; (8019090 <tcpip_thread+0xb4>)
 8018ff2:	6812      	ldr	r2, [r2, #0]
 8018ff4:	4610      	mov	r0, r2
 8018ff6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8018ff8:	4826      	ldr	r0, [pc, #152]	; (8019094 <tcpip_thread+0xb8>)
 8018ffa:	f00a f93b 	bl	8023274 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8018ffe:	4825      	ldr	r0, [pc, #148]	; (8019094 <tcpip_thread+0xb8>)
 8019000:	f00a f947 	bl	8023292 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8019004:	f107 030c 	add.w	r3, r7, #12
 8019008:	4619      	mov	r1, r3
 801900a:	4823      	ldr	r0, [pc, #140]	; (8019098 <tcpip_thread+0xbc>)
 801900c:	f009 fc38 	bl	8022880 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8019010:	4820      	ldr	r0, [pc, #128]	; (8019094 <tcpip_thread+0xb8>)
 8019012:	f00a f92f 	bl	8023274 <sys_mutex_lock>
    if (msg == NULL) {
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d106      	bne.n	801902a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801901c:	4b1f      	ldr	r3, [pc, #124]	; (801909c <tcpip_thread+0xc0>)
 801901e:	2269      	movs	r2, #105	; 0x69
 8019020:	491f      	ldr	r1, [pc, #124]	; (80190a0 <tcpip_thread+0xc4>)
 8019022:	4820      	ldr	r0, [pc, #128]	; (80190a4 <tcpip_thread+0xc8>)
 8019024:	f00c fb24 	bl	8025670 <iprintf>
      continue;
 8019028:	e02f      	b.n	801908a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	781b      	ldrb	r3, [r3, #0]
 801902e:	2b03      	cmp	r3, #3
 8019030:	d011      	beq.n	8019056 <tcpip_thread+0x7a>
 8019032:	2b04      	cmp	r3, #4
 8019034:	d01b      	beq.n	801906e <tcpip_thread+0x92>
 8019036:	2b02      	cmp	r3, #2
 8019038:	d120      	bne.n	801907c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	68db      	ldr	r3, [r3, #12]
 801903e:	68fa      	ldr	r2, [r7, #12]
 8019040:	6850      	ldr	r0, [r2, #4]
 8019042:	68fa      	ldr	r2, [r7, #12]
 8019044:	6892      	ldr	r2, [r2, #8]
 8019046:	4611      	mov	r1, r2
 8019048:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	4619      	mov	r1, r3
 801904e:	2009      	movs	r0, #9
 8019050:	f003 f8b8 	bl	801c1c4 <memp_free>
      break;
 8019054:	e019      	b.n	801908a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	685b      	ldr	r3, [r3, #4]
 801905a:	68fa      	ldr	r2, [r7, #12]
 801905c:	6892      	ldr	r2, [r2, #8]
 801905e:	4610      	mov	r0, r2
 8019060:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	4619      	mov	r1, r3
 8019066:	2008      	movs	r0, #8
 8019068:	f003 f8ac 	bl	801c1c4 <memp_free>
      break;
 801906c:	e00d      	b.n	801908a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	685b      	ldr	r3, [r3, #4]
 8019072:	68fa      	ldr	r2, [r7, #12]
 8019074:	6892      	ldr	r2, [r2, #8]
 8019076:	4610      	mov	r0, r2
 8019078:	4798      	blx	r3
      break;
 801907a:	e006      	b.n	801908a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801907c:	4b07      	ldr	r3, [pc, #28]	; (801909c <tcpip_thread+0xc0>)
 801907e:	229b      	movs	r2, #155	; 0x9b
 8019080:	4907      	ldr	r1, [pc, #28]	; (80190a0 <tcpip_thread+0xc4>)
 8019082:	4808      	ldr	r0, [pc, #32]	; (80190a4 <tcpip_thread+0xc8>)
 8019084:	f00c faf4 	bl	8025670 <iprintf>
      break;
 8019088:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 801908a:	e7b8      	b.n	8018ffe <tcpip_thread+0x22>
 801908c:	20003f8c 	.word	0x20003f8c
 8019090:	20003f90 	.word	0x20003f90
 8019094:	200045f8 	.word	0x200045f8
 8019098:	20003f94 	.word	0x20003f94
 801909c:	08026b84 	.word	0x08026b84
 80190a0:	08026bb4 	.word	0x08026bb4
 80190a4:	08026bd4 	.word	0x08026bd4

080190a8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b086      	sub	sp, #24
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	60f8      	str	r0, [r7, #12]
 80190b0:	60b9      	str	r1, [r7, #8]
 80190b2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80190b4:	481a      	ldr	r0, [pc, #104]	; (8019120 <tcpip_inpkt+0x78>)
 80190b6:	f00a f807 	bl	80230c8 <sys_mbox_valid>
 80190ba:	4603      	mov	r3, r0
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d105      	bne.n	80190cc <tcpip_inpkt+0x24>
 80190c0:	4b18      	ldr	r3, [pc, #96]	; (8019124 <tcpip_inpkt+0x7c>)
 80190c2:	22b5      	movs	r2, #181	; 0xb5
 80190c4:	4918      	ldr	r1, [pc, #96]	; (8019128 <tcpip_inpkt+0x80>)
 80190c6:	4819      	ldr	r0, [pc, #100]	; (801912c <tcpip_inpkt+0x84>)
 80190c8:	f00c fad2 	bl	8025670 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80190cc:	2009      	movs	r0, #9
 80190ce:	f003 f827 	bl	801c120 <memp_malloc>
 80190d2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80190d4:	697b      	ldr	r3, [r7, #20]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d102      	bne.n	80190e0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80190da:	f04f 33ff 	mov.w	r3, #4294967295
 80190de:	e01a      	b.n	8019116 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	2202      	movs	r2, #2
 80190e4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80190e6:	697b      	ldr	r3, [r7, #20]
 80190e8:	68fa      	ldr	r2, [r7, #12]
 80190ea:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80190ec:	697b      	ldr	r3, [r7, #20]
 80190ee:	68ba      	ldr	r2, [r7, #8]
 80190f0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	687a      	ldr	r2, [r7, #4]
 80190f6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80190f8:	6979      	ldr	r1, [r7, #20]
 80190fa:	4809      	ldr	r0, [pc, #36]	; (8019120 <tcpip_inpkt+0x78>)
 80190fc:	f009 ff6f 	bl	8022fde <sys_mbox_trypost>
 8019100:	4603      	mov	r3, r0
 8019102:	2b00      	cmp	r3, #0
 8019104:	d006      	beq.n	8019114 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8019106:	6979      	ldr	r1, [r7, #20]
 8019108:	2009      	movs	r0, #9
 801910a:	f003 f85b 	bl	801c1c4 <memp_free>
    return ERR_MEM;
 801910e:	f04f 33ff 	mov.w	r3, #4294967295
 8019112:	e000      	b.n	8019116 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8019114:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8019116:	4618      	mov	r0, r3
 8019118:	3718      	adds	r7, #24
 801911a:	46bd      	mov	sp, r7
 801911c:	bd80      	pop	{r7, pc}
 801911e:	bf00      	nop
 8019120:	20003f94 	.word	0x20003f94
 8019124:	08026b84 	.word	0x08026b84
 8019128:	08026bfc 	.word	0x08026bfc
 801912c:	08026bd4 	.word	0x08026bd4

08019130 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b082      	sub	sp, #8
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
 8019138:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801913a:	683b      	ldr	r3, [r7, #0]
 801913c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8019140:	f003 0318 	and.w	r3, r3, #24
 8019144:	2b00      	cmp	r3, #0
 8019146:	d006      	beq.n	8019156 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8019148:	4a08      	ldr	r2, [pc, #32]	; (801916c <tcpip_input+0x3c>)
 801914a:	6839      	ldr	r1, [r7, #0]
 801914c:	6878      	ldr	r0, [r7, #4]
 801914e:	f7ff ffab 	bl	80190a8 <tcpip_inpkt>
 8019152:	4603      	mov	r3, r0
 8019154:	e005      	b.n	8019162 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8019156:	4a06      	ldr	r2, [pc, #24]	; (8019170 <tcpip_input+0x40>)
 8019158:	6839      	ldr	r1, [r7, #0]
 801915a:	6878      	ldr	r0, [r7, #4]
 801915c:	f7ff ffa4 	bl	80190a8 <tcpip_inpkt>
 8019160:	4603      	mov	r3, r0
}
 8019162:	4618      	mov	r0, r3
 8019164:	3708      	adds	r7, #8
 8019166:	46bd      	mov	sp, r7
 8019168:	bd80      	pop	{r7, pc}
 801916a:	bf00      	nop
 801916c:	08022da1 	.word	0x08022da1
 8019170:	0801a5ed 	.word	0x0801a5ed

08019174 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8019174:	b580      	push	{r7, lr}
 8019176:	b086      	sub	sp, #24
 8019178:	af00      	add	r7, sp, #0
 801917a:	60f8      	str	r0, [r7, #12]
 801917c:	60b9      	str	r1, [r7, #8]
 801917e:	4613      	mov	r3, r2
 8019180:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8019182:	481d      	ldr	r0, [pc, #116]	; (80191f8 <tcpip_callback_with_block+0x84>)
 8019184:	f009 ffa0 	bl	80230c8 <sys_mbox_valid>
 8019188:	4603      	mov	r3, r0
 801918a:	2b00      	cmp	r3, #0
 801918c:	d105      	bne.n	801919a <tcpip_callback_with_block+0x26>
 801918e:	4b1b      	ldr	r3, [pc, #108]	; (80191fc <tcpip_callback_with_block+0x88>)
 8019190:	22ee      	movs	r2, #238	; 0xee
 8019192:	491b      	ldr	r1, [pc, #108]	; (8019200 <tcpip_callback_with_block+0x8c>)
 8019194:	481b      	ldr	r0, [pc, #108]	; (8019204 <tcpip_callback_with_block+0x90>)
 8019196:	f00c fa6b 	bl	8025670 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801919a:	2008      	movs	r0, #8
 801919c:	f002 ffc0 	bl	801c120 <memp_malloc>
 80191a0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80191a2:	697b      	ldr	r3, [r7, #20]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d102      	bne.n	80191ae <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 80191a8:	f04f 33ff 	mov.w	r3, #4294967295
 80191ac:	e01f      	b.n	80191ee <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80191ae:	697b      	ldr	r3, [r7, #20]
 80191b0:	2203      	movs	r2, #3
 80191b2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80191b4:	697b      	ldr	r3, [r7, #20]
 80191b6:	68fa      	ldr	r2, [r7, #12]
 80191b8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80191ba:	697b      	ldr	r3, [r7, #20]
 80191bc:	68ba      	ldr	r2, [r7, #8]
 80191be:	609a      	str	r2, [r3, #8]
  if (block) {
 80191c0:	79fb      	ldrb	r3, [r7, #7]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d004      	beq.n	80191d0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 80191c6:	6979      	ldr	r1, [r7, #20]
 80191c8:	480b      	ldr	r0, [pc, #44]	; (80191f8 <tcpip_callback_with_block+0x84>)
 80191ca:	f009 fef3 	bl	8022fb4 <sys_mbox_post>
 80191ce:	e00d      	b.n	80191ec <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80191d0:	6979      	ldr	r1, [r7, #20]
 80191d2:	4809      	ldr	r0, [pc, #36]	; (80191f8 <tcpip_callback_with_block+0x84>)
 80191d4:	f009 ff03 	bl	8022fde <sys_mbox_trypost>
 80191d8:	4603      	mov	r3, r0
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d006      	beq.n	80191ec <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80191de:	6979      	ldr	r1, [r7, #20]
 80191e0:	2008      	movs	r0, #8
 80191e2:	f002 ffef 	bl	801c1c4 <memp_free>
      return ERR_MEM;
 80191e6:	f04f 33ff 	mov.w	r3, #4294967295
 80191ea:	e000      	b.n	80191ee <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 80191ec:	2300      	movs	r3, #0
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	3718      	adds	r7, #24
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}
 80191f6:	bf00      	nop
 80191f8:	20003f94 	.word	0x20003f94
 80191fc:	08026b84 	.word	0x08026b84
 8019200:	08026bfc 	.word	0x08026bfc
 8019204:	08026bd4 	.word	0x08026bd4

08019208 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b084      	sub	sp, #16
 801920c:	af00      	add	r7, sp, #0
 801920e:	60f8      	str	r0, [r7, #12]
 8019210:	60b9      	str	r1, [r7, #8]
 8019212:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8019214:	4806      	ldr	r0, [pc, #24]	; (8019230 <tcpip_send_msg_wait_sem+0x28>)
 8019216:	f00a f82d 	bl	8023274 <sys_mutex_lock>
  fn(apimsg);
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	68b8      	ldr	r0, [r7, #8]
 801921e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8019220:	4803      	ldr	r0, [pc, #12]	; (8019230 <tcpip_send_msg_wait_sem+0x28>)
 8019222:	f00a f836 	bl	8023292 <sys_mutex_unlock>
  return ERR_OK;
 8019226:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8019228:	4618      	mov	r0, r3
 801922a:	3710      	adds	r7, #16
 801922c:	46bd      	mov	sp, r7
 801922e:	bd80      	pop	{r7, pc}
 8019230:	200045f8 	.word	0x200045f8

08019234 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8019234:	b580      	push	{r7, lr}
 8019236:	b084      	sub	sp, #16
 8019238:	af02      	add	r7, sp, #8
 801923a:	6078      	str	r0, [r7, #4]
 801923c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801923e:	f000 f8b2 	bl	80193a6 <lwip_init>

  tcpip_init_done = initfunc;
 8019242:	4a17      	ldr	r2, [pc, #92]	; (80192a0 <tcpip_init+0x6c>)
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8019248:	4a16      	ldr	r2, [pc, #88]	; (80192a4 <tcpip_init+0x70>)
 801924a:	683b      	ldr	r3, [r7, #0]
 801924c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801924e:	2106      	movs	r1, #6
 8019250:	4815      	ldr	r0, [pc, #84]	; (80192a8 <tcpip_init+0x74>)
 8019252:	f009 fe7f 	bl	8022f54 <sys_mbox_new>
 8019256:	4603      	mov	r3, r0
 8019258:	2b00      	cmp	r3, #0
 801925a:	d006      	beq.n	801926a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801925c:	4b13      	ldr	r3, [pc, #76]	; (80192ac <tcpip_init+0x78>)
 801925e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8019262:	4913      	ldr	r1, [pc, #76]	; (80192b0 <tcpip_init+0x7c>)
 8019264:	4813      	ldr	r0, [pc, #76]	; (80192b4 <tcpip_init+0x80>)
 8019266:	f00c fa03 	bl	8025670 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801926a:	4813      	ldr	r0, [pc, #76]	; (80192b8 <tcpip_init+0x84>)
 801926c:	f009 ffe8 	bl	8023240 <sys_mutex_new>
 8019270:	4603      	mov	r3, r0
 8019272:	2b00      	cmp	r3, #0
 8019274:	d006      	beq.n	8019284 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8019276:	4b0d      	ldr	r3, [pc, #52]	; (80192ac <tcpip_init+0x78>)
 8019278:	f240 12d9 	movw	r2, #473	; 0x1d9
 801927c:	490f      	ldr	r1, [pc, #60]	; (80192bc <tcpip_init+0x88>)
 801927e:	480d      	ldr	r0, [pc, #52]	; (80192b4 <tcpip_init+0x80>)
 8019280:	f00c f9f6 	bl	8025670 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8019284:	2303      	movs	r3, #3
 8019286:	9300      	str	r3, [sp, #0]
 8019288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801928c:	2200      	movs	r2, #0
 801928e:	490c      	ldr	r1, [pc, #48]	; (80192c0 <tcpip_init+0x8c>)
 8019290:	480c      	ldr	r0, [pc, #48]	; (80192c4 <tcpip_init+0x90>)
 8019292:	f00a f80b 	bl	80232ac <sys_thread_new>
}
 8019296:	bf00      	nop
 8019298:	3708      	adds	r7, #8
 801929a:	46bd      	mov	sp, r7
 801929c:	bd80      	pop	{r7, pc}
 801929e:	bf00      	nop
 80192a0:	20003f8c 	.word	0x20003f8c
 80192a4:	20003f90 	.word	0x20003f90
 80192a8:	20003f94 	.word	0x20003f94
 80192ac:	08026b84 	.word	0x08026b84
 80192b0:	08026c0c 	.word	0x08026c0c
 80192b4:	08026bd4 	.word	0x08026bd4
 80192b8:	200045f8 	.word	0x200045f8
 80192bc:	08026c30 	.word	0x08026c30
 80192c0:	08018fdd 	.word	0x08018fdd
 80192c4:	08026c54 	.word	0x08026c54

080192c8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b084      	sub	sp, #16
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]
 80192d0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d002      	beq.n	80192de <fs_open+0x16>
 80192d8:	683b      	ldr	r3, [r7, #0]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d102      	bne.n	80192e4 <fs_open+0x1c>
     return ERR_ARG;
 80192de:	f06f 030f 	mvn.w	r3, #15
 80192e2:	e028      	b.n	8019336 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80192e4:	4b16      	ldr	r3, [pc, #88]	; (8019340 <fs_open+0x78>)
 80192e6:	60fb      	str	r3, [r7, #12]
 80192e8:	e020      	b.n	801932c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	685b      	ldr	r3, [r3, #4]
 80192ee:	4619      	mov	r1, r3
 80192f0:	6838      	ldr	r0, [r7, #0]
 80192f2:	f7f6 fea5 	bl	8010040 <strcmp>
 80192f6:	4603      	mov	r3, r0
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d114      	bne.n	8019326 <fs_open+0x5e>
      file->data = (const char *)f->data;
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	689a      	ldr	r2, [r3, #8]
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	68da      	ldr	r2, [r3, #12]
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	68da      	ldr	r2, [r3, #12]
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	2200      	movs	r2, #0
 8019318:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	7c1a      	ldrb	r2, [r3, #16]
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8019322:	2300      	movs	r3, #0
 8019324:	e007      	b.n	8019336 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	60fb      	str	r3, [r7, #12]
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d1db      	bne.n	80192ea <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8019332:	f06f 0305 	mvn.w	r3, #5
}
 8019336:	4618      	mov	r0, r3
 8019338:	3710      	adds	r7, #16
 801933a:	46bd      	mov	sp, r7
 801933c:	bd80      	pop	{r7, pc}
 801933e:	bf00      	nop
 8019340:	0802ae4c 	.word	0x0802ae4c

08019344 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8019344:	b480      	push	{r7}
 8019346:	b083      	sub	sp, #12
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 801934c:	bf00      	nop
 801934e:	370c      	adds	r7, #12
 8019350:	46bd      	mov	sp, r7
 8019352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019356:	4770      	bx	lr

08019358 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8019358:	b480      	push	{r7}
 801935a:	b083      	sub	sp, #12
 801935c:	af00      	add	r7, sp, #0
 801935e:	4603      	mov	r3, r0
 8019360:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8019362:	88fb      	ldrh	r3, [r7, #6]
 8019364:	ba5b      	rev16	r3, r3
 8019366:	b29b      	uxth	r3, r3
}
 8019368:	4618      	mov	r0, r3
 801936a:	370c      	adds	r7, #12
 801936c:	46bd      	mov	sp, r7
 801936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019372:	4770      	bx	lr

08019374 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8019374:	b480      	push	{r7}
 8019376:	b083      	sub	sp, #12
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	061a      	lsls	r2, r3, #24
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	021b      	lsls	r3, r3, #8
 8019384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019388:	431a      	orrs	r2, r3
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	0a1b      	lsrs	r3, r3, #8
 801938e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019392:	431a      	orrs	r2, r3
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	0e1b      	lsrs	r3, r3, #24
 8019398:	4313      	orrs	r3, r2
}
 801939a:	4618      	mov	r0, r3
 801939c:	370c      	adds	r7, #12
 801939e:	46bd      	mov	sp, r7
 80193a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a4:	4770      	bx	lr

080193a6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80193a6:	b580      	push	{r7, lr}
 80193a8:	b082      	sub	sp, #8
 80193aa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80193ac:	2300      	movs	r3, #0
 80193ae:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80193b0:	f009 ff38 	bl	8023224 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80193b4:	f002 fb9c 	bl	801baf0 <mem_init>
  memp_init();
 80193b8:	f002 fe66 	bl	801c088 <memp_init>
  pbuf_init();
  netif_init();
 80193bc:	f002 ff2c 	bl	801c218 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80193c0:	f009 fa84 	bl	80228cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80193c4:	f003 fece 	bl	801d164 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80193c8:	f009 f916 	bl	80225f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80193cc:	bf00      	nop
 80193ce:	3708      	adds	r7, #8
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bd80      	pop	{r7, pc}

080193d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b082      	sub	sp, #8
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80193dc:	4915      	ldr	r1, [pc, #84]	; (8019434 <etharp_free_entry+0x60>)
 80193de:	687a      	ldr	r2, [r7, #4]
 80193e0:	4613      	mov	r3, r2
 80193e2:	005b      	lsls	r3, r3, #1
 80193e4:	4413      	add	r3, r2
 80193e6:	00db      	lsls	r3, r3, #3
 80193e8:	440b      	add	r3, r1
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d013      	beq.n	8019418 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80193f0:	4910      	ldr	r1, [pc, #64]	; (8019434 <etharp_free_entry+0x60>)
 80193f2:	687a      	ldr	r2, [r7, #4]
 80193f4:	4613      	mov	r3, r2
 80193f6:	005b      	lsls	r3, r3, #1
 80193f8:	4413      	add	r3, r2
 80193fa:	00db      	lsls	r3, r3, #3
 80193fc:	440b      	add	r3, r1
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	4618      	mov	r0, r3
 8019402:	f003 fc39 	bl	801cc78 <pbuf_free>
    arp_table[i].q = NULL;
 8019406:	490b      	ldr	r1, [pc, #44]	; (8019434 <etharp_free_entry+0x60>)
 8019408:	687a      	ldr	r2, [r7, #4]
 801940a:	4613      	mov	r3, r2
 801940c:	005b      	lsls	r3, r3, #1
 801940e:	4413      	add	r3, r2
 8019410:	00db      	lsls	r3, r3, #3
 8019412:	440b      	add	r3, r1
 8019414:	2200      	movs	r2, #0
 8019416:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019418:	4906      	ldr	r1, [pc, #24]	; (8019434 <etharp_free_entry+0x60>)
 801941a:	687a      	ldr	r2, [r7, #4]
 801941c:	4613      	mov	r3, r2
 801941e:	005b      	lsls	r3, r3, #1
 8019420:	4413      	add	r3, r2
 8019422:	00db      	lsls	r3, r3, #3
 8019424:	440b      	add	r3, r1
 8019426:	3314      	adds	r3, #20
 8019428:	2200      	movs	r2, #0
 801942a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801942c:	bf00      	nop
 801942e:	3708      	adds	r7, #8
 8019430:	46bd      	mov	sp, r7
 8019432:	bd80      	pop	{r7, pc}
 8019434:	20003f98 	.word	0x20003f98

08019438 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b082      	sub	sp, #8
 801943c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801943e:	2300      	movs	r3, #0
 8019440:	71fb      	strb	r3, [r7, #7]
 8019442:	e096      	b.n	8019572 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019444:	79fa      	ldrb	r2, [r7, #7]
 8019446:	494f      	ldr	r1, [pc, #316]	; (8019584 <etharp_tmr+0x14c>)
 8019448:	4613      	mov	r3, r2
 801944a:	005b      	lsls	r3, r3, #1
 801944c:	4413      	add	r3, r2
 801944e:	00db      	lsls	r3, r3, #3
 8019450:	440b      	add	r3, r1
 8019452:	3314      	adds	r3, #20
 8019454:	781b      	ldrb	r3, [r3, #0]
 8019456:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8019458:	79bb      	ldrb	r3, [r7, #6]
 801945a:	2b00      	cmp	r3, #0
 801945c:	f000 8086 	beq.w	801956c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8019460:	79fa      	ldrb	r2, [r7, #7]
 8019462:	4948      	ldr	r1, [pc, #288]	; (8019584 <etharp_tmr+0x14c>)
 8019464:	4613      	mov	r3, r2
 8019466:	005b      	lsls	r3, r3, #1
 8019468:	4413      	add	r3, r2
 801946a:	00db      	lsls	r3, r3, #3
 801946c:	440b      	add	r3, r1
 801946e:	3312      	adds	r3, #18
 8019470:	881b      	ldrh	r3, [r3, #0]
 8019472:	3301      	adds	r3, #1
 8019474:	b298      	uxth	r0, r3
 8019476:	4943      	ldr	r1, [pc, #268]	; (8019584 <etharp_tmr+0x14c>)
 8019478:	4613      	mov	r3, r2
 801947a:	005b      	lsls	r3, r3, #1
 801947c:	4413      	add	r3, r2
 801947e:	00db      	lsls	r3, r3, #3
 8019480:	440b      	add	r3, r1
 8019482:	3312      	adds	r3, #18
 8019484:	4602      	mov	r2, r0
 8019486:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019488:	79fa      	ldrb	r2, [r7, #7]
 801948a:	493e      	ldr	r1, [pc, #248]	; (8019584 <etharp_tmr+0x14c>)
 801948c:	4613      	mov	r3, r2
 801948e:	005b      	lsls	r3, r3, #1
 8019490:	4413      	add	r3, r2
 8019492:	00db      	lsls	r3, r3, #3
 8019494:	440b      	add	r3, r1
 8019496:	3312      	adds	r3, #18
 8019498:	881b      	ldrh	r3, [r3, #0]
 801949a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801949e:	d215      	bcs.n	80194cc <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80194a0:	79fa      	ldrb	r2, [r7, #7]
 80194a2:	4938      	ldr	r1, [pc, #224]	; (8019584 <etharp_tmr+0x14c>)
 80194a4:	4613      	mov	r3, r2
 80194a6:	005b      	lsls	r3, r3, #1
 80194a8:	4413      	add	r3, r2
 80194aa:	00db      	lsls	r3, r3, #3
 80194ac:	440b      	add	r3, r1
 80194ae:	3314      	adds	r3, #20
 80194b0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80194b2:	2b01      	cmp	r3, #1
 80194b4:	d10f      	bne.n	80194d6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80194b6:	79fa      	ldrb	r2, [r7, #7]
 80194b8:	4932      	ldr	r1, [pc, #200]	; (8019584 <etharp_tmr+0x14c>)
 80194ba:	4613      	mov	r3, r2
 80194bc:	005b      	lsls	r3, r3, #1
 80194be:	4413      	add	r3, r2
 80194c0:	00db      	lsls	r3, r3, #3
 80194c2:	440b      	add	r3, r1
 80194c4:	3312      	adds	r3, #18
 80194c6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80194c8:	2b04      	cmp	r3, #4
 80194ca:	d904      	bls.n	80194d6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80194cc:	79fb      	ldrb	r3, [r7, #7]
 80194ce:	4618      	mov	r0, r3
 80194d0:	f7ff ff80 	bl	80193d4 <etharp_free_entry>
 80194d4:	e04a      	b.n	801956c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80194d6:	79fa      	ldrb	r2, [r7, #7]
 80194d8:	492a      	ldr	r1, [pc, #168]	; (8019584 <etharp_tmr+0x14c>)
 80194da:	4613      	mov	r3, r2
 80194dc:	005b      	lsls	r3, r3, #1
 80194de:	4413      	add	r3, r2
 80194e0:	00db      	lsls	r3, r3, #3
 80194e2:	440b      	add	r3, r1
 80194e4:	3314      	adds	r3, #20
 80194e6:	781b      	ldrb	r3, [r3, #0]
 80194e8:	2b03      	cmp	r3, #3
 80194ea:	d10a      	bne.n	8019502 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80194ec:	79fa      	ldrb	r2, [r7, #7]
 80194ee:	4925      	ldr	r1, [pc, #148]	; (8019584 <etharp_tmr+0x14c>)
 80194f0:	4613      	mov	r3, r2
 80194f2:	005b      	lsls	r3, r3, #1
 80194f4:	4413      	add	r3, r2
 80194f6:	00db      	lsls	r3, r3, #3
 80194f8:	440b      	add	r3, r1
 80194fa:	3314      	adds	r3, #20
 80194fc:	2204      	movs	r2, #4
 80194fe:	701a      	strb	r2, [r3, #0]
 8019500:	e034      	b.n	801956c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019502:	79fa      	ldrb	r2, [r7, #7]
 8019504:	491f      	ldr	r1, [pc, #124]	; (8019584 <etharp_tmr+0x14c>)
 8019506:	4613      	mov	r3, r2
 8019508:	005b      	lsls	r3, r3, #1
 801950a:	4413      	add	r3, r2
 801950c:	00db      	lsls	r3, r3, #3
 801950e:	440b      	add	r3, r1
 8019510:	3314      	adds	r3, #20
 8019512:	781b      	ldrb	r3, [r3, #0]
 8019514:	2b04      	cmp	r3, #4
 8019516:	d10a      	bne.n	801952e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019518:	79fa      	ldrb	r2, [r7, #7]
 801951a:	491a      	ldr	r1, [pc, #104]	; (8019584 <etharp_tmr+0x14c>)
 801951c:	4613      	mov	r3, r2
 801951e:	005b      	lsls	r3, r3, #1
 8019520:	4413      	add	r3, r2
 8019522:	00db      	lsls	r3, r3, #3
 8019524:	440b      	add	r3, r1
 8019526:	3314      	adds	r3, #20
 8019528:	2202      	movs	r2, #2
 801952a:	701a      	strb	r2, [r3, #0]
 801952c:	e01e      	b.n	801956c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801952e:	79fa      	ldrb	r2, [r7, #7]
 8019530:	4914      	ldr	r1, [pc, #80]	; (8019584 <etharp_tmr+0x14c>)
 8019532:	4613      	mov	r3, r2
 8019534:	005b      	lsls	r3, r3, #1
 8019536:	4413      	add	r3, r2
 8019538:	00db      	lsls	r3, r3, #3
 801953a:	440b      	add	r3, r1
 801953c:	3314      	adds	r3, #20
 801953e:	781b      	ldrb	r3, [r3, #0]
 8019540:	2b01      	cmp	r3, #1
 8019542:	d113      	bne.n	801956c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019544:	79fa      	ldrb	r2, [r7, #7]
 8019546:	490f      	ldr	r1, [pc, #60]	; (8019584 <etharp_tmr+0x14c>)
 8019548:	4613      	mov	r3, r2
 801954a:	005b      	lsls	r3, r3, #1
 801954c:	4413      	add	r3, r2
 801954e:	00db      	lsls	r3, r3, #3
 8019550:	440b      	add	r3, r1
 8019552:	3308      	adds	r3, #8
 8019554:	6818      	ldr	r0, [r3, #0]
 8019556:	79fa      	ldrb	r2, [r7, #7]
 8019558:	4613      	mov	r3, r2
 801955a:	005b      	lsls	r3, r3, #1
 801955c:	4413      	add	r3, r2
 801955e:	00db      	lsls	r3, r3, #3
 8019560:	4a08      	ldr	r2, [pc, #32]	; (8019584 <etharp_tmr+0x14c>)
 8019562:	4413      	add	r3, r2
 8019564:	3304      	adds	r3, #4
 8019566:	4619      	mov	r1, r3
 8019568:	f000 fe38 	bl	801a1dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801956c:	79fb      	ldrb	r3, [r7, #7]
 801956e:	3301      	adds	r3, #1
 8019570:	71fb      	strb	r3, [r7, #7]
 8019572:	79fb      	ldrb	r3, [r7, #7]
 8019574:	2b09      	cmp	r3, #9
 8019576:	f67f af65 	bls.w	8019444 <etharp_tmr+0xc>
      }
    }
  }
}
 801957a:	bf00      	nop
 801957c:	3708      	adds	r7, #8
 801957e:	46bd      	mov	sp, r7
 8019580:	bd80      	pop	{r7, pc}
 8019582:	bf00      	nop
 8019584:	20003f98 	.word	0x20003f98

08019588 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8019588:	b580      	push	{r7, lr}
 801958a:	b088      	sub	sp, #32
 801958c:	af00      	add	r7, sp, #0
 801958e:	60f8      	str	r0, [r7, #12]
 8019590:	460b      	mov	r3, r1
 8019592:	607a      	str	r2, [r7, #4]
 8019594:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019596:	230a      	movs	r3, #10
 8019598:	77fb      	strb	r3, [r7, #31]
 801959a:	230a      	movs	r3, #10
 801959c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801959e:	230a      	movs	r3, #10
 80195a0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80195a2:	2300      	movs	r3, #0
 80195a4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80195a6:	230a      	movs	r3, #10
 80195a8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80195aa:	2300      	movs	r3, #0
 80195ac:	833b      	strh	r3, [r7, #24]
 80195ae:	2300      	movs	r3, #0
 80195b0:	82fb      	strh	r3, [r7, #22]
 80195b2:	2300      	movs	r3, #0
 80195b4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80195b6:	2300      	movs	r3, #0
 80195b8:	773b      	strb	r3, [r7, #28]
 80195ba:	e093      	b.n	80196e4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80195bc:	7f3a      	ldrb	r2, [r7, #28]
 80195be:	4990      	ldr	r1, [pc, #576]	; (8019800 <etharp_find_entry+0x278>)
 80195c0:	4613      	mov	r3, r2
 80195c2:	005b      	lsls	r3, r3, #1
 80195c4:	4413      	add	r3, r2
 80195c6:	00db      	lsls	r3, r3, #3
 80195c8:	440b      	add	r3, r1
 80195ca:	3314      	adds	r3, #20
 80195cc:	781b      	ldrb	r3, [r3, #0]
 80195ce:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80195d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80195d4:	2b0a      	cmp	r3, #10
 80195d6:	d105      	bne.n	80195e4 <etharp_find_entry+0x5c>
 80195d8:	7cfb      	ldrb	r3, [r7, #19]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d102      	bne.n	80195e4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80195de:	7f3b      	ldrb	r3, [r7, #28]
 80195e0:	777b      	strb	r3, [r7, #29]
 80195e2:	e07c      	b.n	80196de <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80195e4:	7cfb      	ldrb	r3, [r7, #19]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d079      	beq.n	80196de <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80195ea:	7cfb      	ldrb	r3, [r7, #19]
 80195ec:	2b01      	cmp	r3, #1
 80195ee:	d009      	beq.n	8019604 <etharp_find_entry+0x7c>
 80195f0:	7cfb      	ldrb	r3, [r7, #19]
 80195f2:	2b01      	cmp	r3, #1
 80195f4:	d806      	bhi.n	8019604 <etharp_find_entry+0x7c>
 80195f6:	4b83      	ldr	r3, [pc, #524]	; (8019804 <etharp_find_entry+0x27c>)
 80195f8:	f44f 7293 	mov.w	r2, #294	; 0x126
 80195fc:	4982      	ldr	r1, [pc, #520]	; (8019808 <etharp_find_entry+0x280>)
 80195fe:	4883      	ldr	r0, [pc, #524]	; (801980c <etharp_find_entry+0x284>)
 8019600:	f00c f836 	bl	8025670 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d00f      	beq.n	801962a <etharp_find_entry+0xa2>
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	6819      	ldr	r1, [r3, #0]
 801960e:	7f3a      	ldrb	r2, [r7, #28]
 8019610:	487b      	ldr	r0, [pc, #492]	; (8019800 <etharp_find_entry+0x278>)
 8019612:	4613      	mov	r3, r2
 8019614:	005b      	lsls	r3, r3, #1
 8019616:	4413      	add	r3, r2
 8019618:	00db      	lsls	r3, r3, #3
 801961a:	4403      	add	r3, r0
 801961c:	3304      	adds	r3, #4
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	4299      	cmp	r1, r3
 8019622:	d102      	bne.n	801962a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019624:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8019628:	e0e5      	b.n	80197f6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801962a:	7cfb      	ldrb	r3, [r7, #19]
 801962c:	2b01      	cmp	r3, #1
 801962e:	d13b      	bne.n	80196a8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019630:	7f3a      	ldrb	r2, [r7, #28]
 8019632:	4973      	ldr	r1, [pc, #460]	; (8019800 <etharp_find_entry+0x278>)
 8019634:	4613      	mov	r3, r2
 8019636:	005b      	lsls	r3, r3, #1
 8019638:	4413      	add	r3, r2
 801963a:	00db      	lsls	r3, r3, #3
 801963c:	440b      	add	r3, r1
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	2b00      	cmp	r3, #0
 8019642:	d018      	beq.n	8019676 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8019644:	7f3a      	ldrb	r2, [r7, #28]
 8019646:	496e      	ldr	r1, [pc, #440]	; (8019800 <etharp_find_entry+0x278>)
 8019648:	4613      	mov	r3, r2
 801964a:	005b      	lsls	r3, r3, #1
 801964c:	4413      	add	r3, r2
 801964e:	00db      	lsls	r3, r3, #3
 8019650:	440b      	add	r3, r1
 8019652:	3312      	adds	r3, #18
 8019654:	881b      	ldrh	r3, [r3, #0]
 8019656:	8b3a      	ldrh	r2, [r7, #24]
 8019658:	429a      	cmp	r2, r3
 801965a:	d840      	bhi.n	80196de <etharp_find_entry+0x156>
            old_queue = i;
 801965c:	7f3b      	ldrb	r3, [r7, #28]
 801965e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8019660:	7f3a      	ldrb	r2, [r7, #28]
 8019662:	4967      	ldr	r1, [pc, #412]	; (8019800 <etharp_find_entry+0x278>)
 8019664:	4613      	mov	r3, r2
 8019666:	005b      	lsls	r3, r3, #1
 8019668:	4413      	add	r3, r2
 801966a:	00db      	lsls	r3, r3, #3
 801966c:	440b      	add	r3, r1
 801966e:	3312      	adds	r3, #18
 8019670:	881b      	ldrh	r3, [r3, #0]
 8019672:	833b      	strh	r3, [r7, #24]
 8019674:	e033      	b.n	80196de <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019676:	7f3a      	ldrb	r2, [r7, #28]
 8019678:	4961      	ldr	r1, [pc, #388]	; (8019800 <etharp_find_entry+0x278>)
 801967a:	4613      	mov	r3, r2
 801967c:	005b      	lsls	r3, r3, #1
 801967e:	4413      	add	r3, r2
 8019680:	00db      	lsls	r3, r3, #3
 8019682:	440b      	add	r3, r1
 8019684:	3312      	adds	r3, #18
 8019686:	881b      	ldrh	r3, [r3, #0]
 8019688:	8afa      	ldrh	r2, [r7, #22]
 801968a:	429a      	cmp	r2, r3
 801968c:	d827      	bhi.n	80196de <etharp_find_entry+0x156>
            old_pending = i;
 801968e:	7f3b      	ldrb	r3, [r7, #28]
 8019690:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8019692:	7f3a      	ldrb	r2, [r7, #28]
 8019694:	495a      	ldr	r1, [pc, #360]	; (8019800 <etharp_find_entry+0x278>)
 8019696:	4613      	mov	r3, r2
 8019698:	005b      	lsls	r3, r3, #1
 801969a:	4413      	add	r3, r2
 801969c:	00db      	lsls	r3, r3, #3
 801969e:	440b      	add	r3, r1
 80196a0:	3312      	adds	r3, #18
 80196a2:	881b      	ldrh	r3, [r3, #0]
 80196a4:	82fb      	strh	r3, [r7, #22]
 80196a6:	e01a      	b.n	80196de <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80196a8:	7cfb      	ldrb	r3, [r7, #19]
 80196aa:	2b01      	cmp	r3, #1
 80196ac:	d917      	bls.n	80196de <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80196ae:	7f3a      	ldrb	r2, [r7, #28]
 80196b0:	4953      	ldr	r1, [pc, #332]	; (8019800 <etharp_find_entry+0x278>)
 80196b2:	4613      	mov	r3, r2
 80196b4:	005b      	lsls	r3, r3, #1
 80196b6:	4413      	add	r3, r2
 80196b8:	00db      	lsls	r3, r3, #3
 80196ba:	440b      	add	r3, r1
 80196bc:	3312      	adds	r3, #18
 80196be:	881b      	ldrh	r3, [r3, #0]
 80196c0:	8aba      	ldrh	r2, [r7, #20]
 80196c2:	429a      	cmp	r2, r3
 80196c4:	d80b      	bhi.n	80196de <etharp_find_entry+0x156>
            old_stable = i;
 80196c6:	7f3b      	ldrb	r3, [r7, #28]
 80196c8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80196ca:	7f3a      	ldrb	r2, [r7, #28]
 80196cc:	494c      	ldr	r1, [pc, #304]	; (8019800 <etharp_find_entry+0x278>)
 80196ce:	4613      	mov	r3, r2
 80196d0:	005b      	lsls	r3, r3, #1
 80196d2:	4413      	add	r3, r2
 80196d4:	00db      	lsls	r3, r3, #3
 80196d6:	440b      	add	r3, r1
 80196d8:	3312      	adds	r3, #18
 80196da:	881b      	ldrh	r3, [r3, #0]
 80196dc:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80196de:	7f3b      	ldrb	r3, [r7, #28]
 80196e0:	3301      	adds	r3, #1
 80196e2:	773b      	strb	r3, [r7, #28]
 80196e4:	7f3b      	ldrb	r3, [r7, #28]
 80196e6:	2b09      	cmp	r3, #9
 80196e8:	f67f af68 	bls.w	80195bc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80196ec:	7afb      	ldrb	r3, [r7, #11]
 80196ee:	f003 0302 	and.w	r3, r3, #2
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d108      	bne.n	8019708 <etharp_find_entry+0x180>
 80196f6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80196fa:	2b0a      	cmp	r3, #10
 80196fc:	d107      	bne.n	801970e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80196fe:	7afb      	ldrb	r3, [r7, #11]
 8019700:	f003 0301 	and.w	r3, r3, #1
 8019704:	2b00      	cmp	r3, #0
 8019706:	d102      	bne.n	801970e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8019708:	f04f 33ff 	mov.w	r3, #4294967295
 801970c:	e073      	b.n	80197f6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801970e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019712:	2b09      	cmp	r3, #9
 8019714:	dc02      	bgt.n	801971c <etharp_find_entry+0x194>
    i = empty;
 8019716:	7f7b      	ldrb	r3, [r7, #29]
 8019718:	773b      	strb	r3, [r7, #28]
 801971a:	e036      	b.n	801978a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801971c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019720:	2b09      	cmp	r3, #9
 8019722:	dc13      	bgt.n	801974c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8019724:	7fbb      	ldrb	r3, [r7, #30]
 8019726:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019728:	7f3a      	ldrb	r2, [r7, #28]
 801972a:	4935      	ldr	r1, [pc, #212]	; (8019800 <etharp_find_entry+0x278>)
 801972c:	4613      	mov	r3, r2
 801972e:	005b      	lsls	r3, r3, #1
 8019730:	4413      	add	r3, r2
 8019732:	00db      	lsls	r3, r3, #3
 8019734:	440b      	add	r3, r1
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	2b00      	cmp	r3, #0
 801973a:	d018      	beq.n	801976e <etharp_find_entry+0x1e6>
 801973c:	4b31      	ldr	r3, [pc, #196]	; (8019804 <etharp_find_entry+0x27c>)
 801973e:	f240 126f 	movw	r2, #367	; 0x16f
 8019742:	4933      	ldr	r1, [pc, #204]	; (8019810 <etharp_find_entry+0x288>)
 8019744:	4831      	ldr	r0, [pc, #196]	; (801980c <etharp_find_entry+0x284>)
 8019746:	f00b ff93 	bl	8025670 <iprintf>
 801974a:	e010      	b.n	801976e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801974c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019750:	2b09      	cmp	r3, #9
 8019752:	dc02      	bgt.n	801975a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8019754:	7ffb      	ldrb	r3, [r7, #31]
 8019756:	773b      	strb	r3, [r7, #28]
 8019758:	e009      	b.n	801976e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801975a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801975e:	2b09      	cmp	r3, #9
 8019760:	dc02      	bgt.n	8019768 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019762:	7efb      	ldrb	r3, [r7, #27]
 8019764:	773b      	strb	r3, [r7, #28]
 8019766:	e002      	b.n	801976e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8019768:	f04f 33ff 	mov.w	r3, #4294967295
 801976c:	e043      	b.n	80197f6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801976e:	7f3b      	ldrb	r3, [r7, #28]
 8019770:	2b09      	cmp	r3, #9
 8019772:	d906      	bls.n	8019782 <etharp_find_entry+0x1fa>
 8019774:	4b23      	ldr	r3, [pc, #140]	; (8019804 <etharp_find_entry+0x27c>)
 8019776:	f240 1281 	movw	r2, #385	; 0x181
 801977a:	4926      	ldr	r1, [pc, #152]	; (8019814 <etharp_find_entry+0x28c>)
 801977c:	4823      	ldr	r0, [pc, #140]	; (801980c <etharp_find_entry+0x284>)
 801977e:	f00b ff77 	bl	8025670 <iprintf>
    etharp_free_entry(i);
 8019782:	7f3b      	ldrb	r3, [r7, #28]
 8019784:	4618      	mov	r0, r3
 8019786:	f7ff fe25 	bl	80193d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801978a:	7f3b      	ldrb	r3, [r7, #28]
 801978c:	2b09      	cmp	r3, #9
 801978e:	d906      	bls.n	801979e <etharp_find_entry+0x216>
 8019790:	4b1c      	ldr	r3, [pc, #112]	; (8019804 <etharp_find_entry+0x27c>)
 8019792:	f240 1285 	movw	r2, #389	; 0x185
 8019796:	491f      	ldr	r1, [pc, #124]	; (8019814 <etharp_find_entry+0x28c>)
 8019798:	481c      	ldr	r0, [pc, #112]	; (801980c <etharp_find_entry+0x284>)
 801979a:	f00b ff69 	bl	8025670 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801979e:	7f3a      	ldrb	r2, [r7, #28]
 80197a0:	4917      	ldr	r1, [pc, #92]	; (8019800 <etharp_find_entry+0x278>)
 80197a2:	4613      	mov	r3, r2
 80197a4:	005b      	lsls	r3, r3, #1
 80197a6:	4413      	add	r3, r2
 80197a8:	00db      	lsls	r3, r3, #3
 80197aa:	440b      	add	r3, r1
 80197ac:	3314      	adds	r3, #20
 80197ae:	781b      	ldrb	r3, [r3, #0]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d006      	beq.n	80197c2 <etharp_find_entry+0x23a>
 80197b4:	4b13      	ldr	r3, [pc, #76]	; (8019804 <etharp_find_entry+0x27c>)
 80197b6:	f240 1287 	movw	r2, #391	; 0x187
 80197ba:	4917      	ldr	r1, [pc, #92]	; (8019818 <etharp_find_entry+0x290>)
 80197bc:	4813      	ldr	r0, [pc, #76]	; (801980c <etharp_find_entry+0x284>)
 80197be:	f00b ff57 	bl	8025670 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d00a      	beq.n	80197de <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80197c8:	7f3a      	ldrb	r2, [r7, #28]
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	6819      	ldr	r1, [r3, #0]
 80197ce:	480c      	ldr	r0, [pc, #48]	; (8019800 <etharp_find_entry+0x278>)
 80197d0:	4613      	mov	r3, r2
 80197d2:	005b      	lsls	r3, r3, #1
 80197d4:	4413      	add	r3, r2
 80197d6:	00db      	lsls	r3, r3, #3
 80197d8:	4403      	add	r3, r0
 80197da:	3304      	adds	r3, #4
 80197dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80197de:	7f3a      	ldrb	r2, [r7, #28]
 80197e0:	4907      	ldr	r1, [pc, #28]	; (8019800 <etharp_find_entry+0x278>)
 80197e2:	4613      	mov	r3, r2
 80197e4:	005b      	lsls	r3, r3, #1
 80197e6:	4413      	add	r3, r2
 80197e8:	00db      	lsls	r3, r3, #3
 80197ea:	440b      	add	r3, r1
 80197ec:	3312      	adds	r3, #18
 80197ee:	2200      	movs	r2, #0
 80197f0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80197f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80197f6:	4618      	mov	r0, r3
 80197f8:	3720      	adds	r7, #32
 80197fa:	46bd      	mov	sp, r7
 80197fc:	bd80      	pop	{r7, pc}
 80197fe:	bf00      	nop
 8019800:	20003f98 	.word	0x20003f98
 8019804:	08026c64 	.word	0x08026c64
 8019808:	08026c9c 	.word	0x08026c9c
 801980c:	08026cdc 	.word	0x08026cdc
 8019810:	08026d04 	.word	0x08026d04
 8019814:	08026d1c 	.word	0x08026d1c
 8019818:	08026d30 	.word	0x08026d30

0801981c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b088      	sub	sp, #32
 8019820:	af02      	add	r7, sp, #8
 8019822:	60f8      	str	r0, [r7, #12]
 8019824:	60b9      	str	r1, [r7, #8]
 8019826:	607a      	str	r2, [r7, #4]
 8019828:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019830:	2b06      	cmp	r3, #6
 8019832:	d006      	beq.n	8019842 <etharp_update_arp_entry+0x26>
 8019834:	4b48      	ldr	r3, [pc, #288]	; (8019958 <etharp_update_arp_entry+0x13c>)
 8019836:	f240 12ab 	movw	r2, #427	; 0x1ab
 801983a:	4948      	ldr	r1, [pc, #288]	; (801995c <etharp_update_arp_entry+0x140>)
 801983c:	4848      	ldr	r0, [pc, #288]	; (8019960 <etharp_update_arp_entry+0x144>)
 801983e:	f00b ff17 	bl	8025670 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019842:	68bb      	ldr	r3, [r7, #8]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d012      	beq.n	801986e <etharp_update_arp_entry+0x52>
 8019848:	68bb      	ldr	r3, [r7, #8]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d00e      	beq.n	801986e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019850:	68bb      	ldr	r3, [r7, #8]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	68f9      	ldr	r1, [r7, #12]
 8019856:	4618      	mov	r0, r3
 8019858:	f001 f8d6 	bl	801aa08 <ip4_addr_isbroadcast_u32>
 801985c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801985e:	2b00      	cmp	r3, #0
 8019860:	d105      	bne.n	801986e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801986a:	2be0      	cmp	r3, #224	; 0xe0
 801986c:	d102      	bne.n	8019874 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801986e:	f06f 030f 	mvn.w	r3, #15
 8019872:	e06c      	b.n	801994e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019874:	78fb      	ldrb	r3, [r7, #3]
 8019876:	68fa      	ldr	r2, [r7, #12]
 8019878:	4619      	mov	r1, r3
 801987a:	68b8      	ldr	r0, [r7, #8]
 801987c:	f7ff fe84 	bl	8019588 <etharp_find_entry>
 8019880:	4603      	mov	r3, r0
 8019882:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019888:	2b00      	cmp	r3, #0
 801988a:	da02      	bge.n	8019892 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801988c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019890:	e05d      	b.n	801994e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019892:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019896:	4933      	ldr	r1, [pc, #204]	; (8019964 <etharp_update_arp_entry+0x148>)
 8019898:	4613      	mov	r3, r2
 801989a:	005b      	lsls	r3, r3, #1
 801989c:	4413      	add	r3, r2
 801989e:	00db      	lsls	r3, r3, #3
 80198a0:	440b      	add	r3, r1
 80198a2:	3314      	adds	r3, #20
 80198a4:	2202      	movs	r2, #2
 80198a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80198a8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80198ac:	492d      	ldr	r1, [pc, #180]	; (8019964 <etharp_update_arp_entry+0x148>)
 80198ae:	4613      	mov	r3, r2
 80198b0:	005b      	lsls	r3, r3, #1
 80198b2:	4413      	add	r3, r2
 80198b4:	00db      	lsls	r3, r3, #3
 80198b6:	440b      	add	r3, r1
 80198b8:	3308      	adds	r3, #8
 80198ba:	68fa      	ldr	r2, [r7, #12]
 80198bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80198be:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80198c2:	4613      	mov	r3, r2
 80198c4:	005b      	lsls	r3, r3, #1
 80198c6:	4413      	add	r3, r2
 80198c8:	00db      	lsls	r3, r3, #3
 80198ca:	3308      	adds	r3, #8
 80198cc:	4a25      	ldr	r2, [pc, #148]	; (8019964 <etharp_update_arp_entry+0x148>)
 80198ce:	4413      	add	r3, r2
 80198d0:	3304      	adds	r3, #4
 80198d2:	2206      	movs	r2, #6
 80198d4:	6879      	ldr	r1, [r7, #4]
 80198d6:	4618      	mov	r0, r3
 80198d8:	f00c fb7d 	bl	8025fd6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80198dc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80198e0:	4920      	ldr	r1, [pc, #128]	; (8019964 <etharp_update_arp_entry+0x148>)
 80198e2:	4613      	mov	r3, r2
 80198e4:	005b      	lsls	r3, r3, #1
 80198e6:	4413      	add	r3, r2
 80198e8:	00db      	lsls	r3, r3, #3
 80198ea:	440b      	add	r3, r1
 80198ec:	3312      	adds	r3, #18
 80198ee:	2200      	movs	r2, #0
 80198f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80198f2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80198f6:	491b      	ldr	r1, [pc, #108]	; (8019964 <etharp_update_arp_entry+0x148>)
 80198f8:	4613      	mov	r3, r2
 80198fa:	005b      	lsls	r3, r3, #1
 80198fc:	4413      	add	r3, r2
 80198fe:	00db      	lsls	r3, r3, #3
 8019900:	440b      	add	r3, r1
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	2b00      	cmp	r3, #0
 8019906:	d021      	beq.n	801994c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019908:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801990c:	4915      	ldr	r1, [pc, #84]	; (8019964 <etharp_update_arp_entry+0x148>)
 801990e:	4613      	mov	r3, r2
 8019910:	005b      	lsls	r3, r3, #1
 8019912:	4413      	add	r3, r2
 8019914:	00db      	lsls	r3, r3, #3
 8019916:	440b      	add	r3, r1
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801991c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019920:	4910      	ldr	r1, [pc, #64]	; (8019964 <etharp_update_arp_entry+0x148>)
 8019922:	4613      	mov	r3, r2
 8019924:	005b      	lsls	r3, r3, #1
 8019926:	4413      	add	r3, r2
 8019928:	00db      	lsls	r3, r3, #3
 801992a:	440b      	add	r3, r1
 801992c:	2200      	movs	r2, #0
 801992e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8019936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801993a:	9300      	str	r3, [sp, #0]
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	6939      	ldr	r1, [r7, #16]
 8019940:	68f8      	ldr	r0, [r7, #12]
 8019942:	f009 fabf 	bl	8022ec4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019946:	6938      	ldr	r0, [r7, #16]
 8019948:	f003 f996 	bl	801cc78 <pbuf_free>
  }
  return ERR_OK;
 801994c:	2300      	movs	r3, #0
}
 801994e:	4618      	mov	r0, r3
 8019950:	3718      	adds	r7, #24
 8019952:	46bd      	mov	sp, r7
 8019954:	bd80      	pop	{r7, pc}
 8019956:	bf00      	nop
 8019958:	08026c64 	.word	0x08026c64
 801995c:	08026d5c 	.word	0x08026d5c
 8019960:	08026cdc 	.word	0x08026cdc
 8019964:	20003f98 	.word	0x20003f98

08019968 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b084      	sub	sp, #16
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019970:	2300      	movs	r3, #0
 8019972:	73fb      	strb	r3, [r7, #15]
 8019974:	e01f      	b.n	80199b6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8019976:	7bfa      	ldrb	r2, [r7, #15]
 8019978:	4912      	ldr	r1, [pc, #72]	; (80199c4 <etharp_cleanup_netif+0x5c>)
 801997a:	4613      	mov	r3, r2
 801997c:	005b      	lsls	r3, r3, #1
 801997e:	4413      	add	r3, r2
 8019980:	00db      	lsls	r3, r3, #3
 8019982:	440b      	add	r3, r1
 8019984:	3314      	adds	r3, #20
 8019986:	781b      	ldrb	r3, [r3, #0]
 8019988:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801998a:	7bbb      	ldrb	r3, [r7, #14]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d00f      	beq.n	80199b0 <etharp_cleanup_netif+0x48>
 8019990:	7bfa      	ldrb	r2, [r7, #15]
 8019992:	490c      	ldr	r1, [pc, #48]	; (80199c4 <etharp_cleanup_netif+0x5c>)
 8019994:	4613      	mov	r3, r2
 8019996:	005b      	lsls	r3, r3, #1
 8019998:	4413      	add	r3, r2
 801999a:	00db      	lsls	r3, r3, #3
 801999c:	440b      	add	r3, r1
 801999e:	3308      	adds	r3, #8
 80199a0:	681a      	ldr	r2, [r3, #0]
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	429a      	cmp	r2, r3
 80199a6:	d103      	bne.n	80199b0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80199a8:	7bfb      	ldrb	r3, [r7, #15]
 80199aa:	4618      	mov	r0, r3
 80199ac:	f7ff fd12 	bl	80193d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80199b0:	7bfb      	ldrb	r3, [r7, #15]
 80199b2:	3301      	adds	r3, #1
 80199b4:	73fb      	strb	r3, [r7, #15]
 80199b6:	7bfb      	ldrb	r3, [r7, #15]
 80199b8:	2b09      	cmp	r3, #9
 80199ba:	d9dc      	bls.n	8019976 <etharp_cleanup_netif+0xe>
    }
  }
}
 80199bc:	bf00      	nop
 80199be:	3710      	adds	r7, #16
 80199c0:	46bd      	mov	sp, r7
 80199c2:	bd80      	pop	{r7, pc}
 80199c4:	20003f98 	.word	0x20003f98

080199c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80199c8:	b5b0      	push	{r4, r5, r7, lr}
 80199ca:	b08a      	sub	sp, #40	; 0x28
 80199cc:	af04      	add	r7, sp, #16
 80199ce:	6078      	str	r0, [r7, #4]
 80199d0:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80199d2:	683b      	ldr	r3, [r7, #0]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d107      	bne.n	80199e8 <etharp_input+0x20>
 80199d8:	4b3d      	ldr	r3, [pc, #244]	; (8019ad0 <etharp_input+0x108>)
 80199da:	f44f 7222 	mov.w	r2, #648	; 0x288
 80199de:	493d      	ldr	r1, [pc, #244]	; (8019ad4 <etharp_input+0x10c>)
 80199e0:	483d      	ldr	r0, [pc, #244]	; (8019ad8 <etharp_input+0x110>)
 80199e2:	f00b fe45 	bl	8025670 <iprintf>
 80199e6:	e06f      	b.n	8019ac8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	685b      	ldr	r3, [r3, #4]
 80199ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80199ee:	693b      	ldr	r3, [r7, #16]
 80199f0:	881b      	ldrh	r3, [r3, #0]
 80199f2:	b29b      	uxth	r3, r3
 80199f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80199f8:	d10c      	bne.n	8019a14 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80199fa:	693b      	ldr	r3, [r7, #16]
 80199fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80199fe:	2b06      	cmp	r3, #6
 8019a00:	d108      	bne.n	8019a14 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019a02:	693b      	ldr	r3, [r7, #16]
 8019a04:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019a06:	2b04      	cmp	r3, #4
 8019a08:	d104      	bne.n	8019a14 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019a0a:	693b      	ldr	r3, [r7, #16]
 8019a0c:	885b      	ldrh	r3, [r3, #2]
 8019a0e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019a10:	2b08      	cmp	r3, #8
 8019a12:	d003      	beq.n	8019a1c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019a14:	6878      	ldr	r0, [r7, #4]
 8019a16:	f003 f92f 	bl	801cc78 <pbuf_free>
    return;
 8019a1a:	e055      	b.n	8019ac8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8019a1c:	693b      	ldr	r3, [r7, #16]
 8019a1e:	330e      	adds	r3, #14
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8019a24:	693b      	ldr	r3, [r7, #16]
 8019a26:	3318      	adds	r3, #24
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	3304      	adds	r3, #4
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d102      	bne.n	8019a3c <etharp_input+0x74>
    for_us = 0;
 8019a36:	2300      	movs	r3, #0
 8019a38:	75fb      	strb	r3, [r7, #23]
 8019a3a:	e009      	b.n	8019a50 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019a3c:	68ba      	ldr	r2, [r7, #8]
 8019a3e:	683b      	ldr	r3, [r7, #0]
 8019a40:	3304      	adds	r3, #4
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	429a      	cmp	r2, r3
 8019a46:	bf0c      	ite	eq
 8019a48:	2301      	moveq	r3, #1
 8019a4a:	2300      	movne	r3, #0
 8019a4c:	b2db      	uxtb	r3, r3
 8019a4e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019a50:	693b      	ldr	r3, [r7, #16]
 8019a52:	f103 0208 	add.w	r2, r3, #8
 8019a56:	7dfb      	ldrb	r3, [r7, #23]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d001      	beq.n	8019a60 <etharp_input+0x98>
 8019a5c:	2301      	movs	r3, #1
 8019a5e:	e000      	b.n	8019a62 <etharp_input+0x9a>
 8019a60:	2302      	movs	r3, #2
 8019a62:	f107 010c 	add.w	r1, r7, #12
 8019a66:	6838      	ldr	r0, [r7, #0]
 8019a68:	f7ff fed8 	bl	801981c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019a6c:	693b      	ldr	r3, [r7, #16]
 8019a6e:	88db      	ldrh	r3, [r3, #6]
 8019a70:	b29b      	uxth	r3, r3
 8019a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019a76:	d003      	beq.n	8019a80 <etharp_input+0xb8>
 8019a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019a7c:	d01e      	beq.n	8019abc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8019a7e:	e020      	b.n	8019ac2 <etharp_input+0xfa>
    if (for_us) {
 8019a80:	7dfb      	ldrb	r3, [r7, #23]
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d01c      	beq.n	8019ac0 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019a86:	683b      	ldr	r3, [r7, #0]
 8019a88:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8019a8c:	693b      	ldr	r3, [r7, #16]
 8019a8e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019a92:	683b      	ldr	r3, [r7, #0]
 8019a94:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8019a98:	683b      	ldr	r3, [r7, #0]
 8019a9a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8019a9c:	693a      	ldr	r2, [r7, #16]
 8019a9e:	3208      	adds	r2, #8
      etharp_raw(netif,
 8019aa0:	2102      	movs	r1, #2
 8019aa2:	9103      	str	r1, [sp, #12]
 8019aa4:	f107 010c 	add.w	r1, r7, #12
 8019aa8:	9102      	str	r1, [sp, #8]
 8019aaa:	9201      	str	r2, [sp, #4]
 8019aac:	9300      	str	r3, [sp, #0]
 8019aae:	462b      	mov	r3, r5
 8019ab0:	4622      	mov	r2, r4
 8019ab2:	4601      	mov	r1, r0
 8019ab4:	6838      	ldr	r0, [r7, #0]
 8019ab6:	f000 fae3 	bl	801a080 <etharp_raw>
    break;
 8019aba:	e001      	b.n	8019ac0 <etharp_input+0xf8>
    break;
 8019abc:	bf00      	nop
 8019abe:	e000      	b.n	8019ac2 <etharp_input+0xfa>
    break;
 8019ac0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019ac2:	6878      	ldr	r0, [r7, #4]
 8019ac4:	f003 f8d8 	bl	801cc78 <pbuf_free>
}
 8019ac8:	3718      	adds	r7, #24
 8019aca:	46bd      	mov	sp, r7
 8019acc:	bdb0      	pop	{r4, r5, r7, pc}
 8019ace:	bf00      	nop
 8019ad0:	08026c64 	.word	0x08026c64
 8019ad4:	08026db4 	.word	0x08026db4
 8019ad8:	08026cdc 	.word	0x08026cdc

08019adc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b086      	sub	sp, #24
 8019ae0:	af02      	add	r7, sp, #8
 8019ae2:	60f8      	str	r0, [r7, #12]
 8019ae4:	60b9      	str	r1, [r7, #8]
 8019ae6:	4613      	mov	r3, r2
 8019ae8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8019aea:	79fa      	ldrb	r2, [r7, #7]
 8019aec:	4944      	ldr	r1, [pc, #272]	; (8019c00 <etharp_output_to_arp_index+0x124>)
 8019aee:	4613      	mov	r3, r2
 8019af0:	005b      	lsls	r3, r3, #1
 8019af2:	4413      	add	r3, r2
 8019af4:	00db      	lsls	r3, r3, #3
 8019af6:	440b      	add	r3, r1
 8019af8:	3314      	adds	r3, #20
 8019afa:	781b      	ldrb	r3, [r3, #0]
 8019afc:	2b01      	cmp	r3, #1
 8019afe:	d806      	bhi.n	8019b0e <etharp_output_to_arp_index+0x32>
 8019b00:	4b40      	ldr	r3, [pc, #256]	; (8019c04 <etharp_output_to_arp_index+0x128>)
 8019b02:	f240 22ed 	movw	r2, #749	; 0x2ed
 8019b06:	4940      	ldr	r1, [pc, #256]	; (8019c08 <etharp_output_to_arp_index+0x12c>)
 8019b08:	4840      	ldr	r0, [pc, #256]	; (8019c0c <etharp_output_to_arp_index+0x130>)
 8019b0a:	f00b fdb1 	bl	8025670 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019b0e:	79fa      	ldrb	r2, [r7, #7]
 8019b10:	493b      	ldr	r1, [pc, #236]	; (8019c00 <etharp_output_to_arp_index+0x124>)
 8019b12:	4613      	mov	r3, r2
 8019b14:	005b      	lsls	r3, r3, #1
 8019b16:	4413      	add	r3, r2
 8019b18:	00db      	lsls	r3, r3, #3
 8019b1a:	440b      	add	r3, r1
 8019b1c:	3314      	adds	r3, #20
 8019b1e:	781b      	ldrb	r3, [r3, #0]
 8019b20:	2b02      	cmp	r3, #2
 8019b22:	d153      	bne.n	8019bcc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019b24:	79fa      	ldrb	r2, [r7, #7]
 8019b26:	4936      	ldr	r1, [pc, #216]	; (8019c00 <etharp_output_to_arp_index+0x124>)
 8019b28:	4613      	mov	r3, r2
 8019b2a:	005b      	lsls	r3, r3, #1
 8019b2c:	4413      	add	r3, r2
 8019b2e:	00db      	lsls	r3, r3, #3
 8019b30:	440b      	add	r3, r1
 8019b32:	3312      	adds	r3, #18
 8019b34:	881b      	ldrh	r3, [r3, #0]
 8019b36:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8019b3a:	d919      	bls.n	8019b70 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019b3c:	79fa      	ldrb	r2, [r7, #7]
 8019b3e:	4613      	mov	r3, r2
 8019b40:	005b      	lsls	r3, r3, #1
 8019b42:	4413      	add	r3, r2
 8019b44:	00db      	lsls	r3, r3, #3
 8019b46:	4a2e      	ldr	r2, [pc, #184]	; (8019c00 <etharp_output_to_arp_index+0x124>)
 8019b48:	4413      	add	r3, r2
 8019b4a:	3304      	adds	r3, #4
 8019b4c:	4619      	mov	r1, r3
 8019b4e:	68f8      	ldr	r0, [r7, #12]
 8019b50:	f000 fb44 	bl	801a1dc <etharp_request>
 8019b54:	4603      	mov	r3, r0
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d138      	bne.n	8019bcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019b5a:	79fa      	ldrb	r2, [r7, #7]
 8019b5c:	4928      	ldr	r1, [pc, #160]	; (8019c00 <etharp_output_to_arp_index+0x124>)
 8019b5e:	4613      	mov	r3, r2
 8019b60:	005b      	lsls	r3, r3, #1
 8019b62:	4413      	add	r3, r2
 8019b64:	00db      	lsls	r3, r3, #3
 8019b66:	440b      	add	r3, r1
 8019b68:	3314      	adds	r3, #20
 8019b6a:	2203      	movs	r2, #3
 8019b6c:	701a      	strb	r2, [r3, #0]
 8019b6e:	e02d      	b.n	8019bcc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019b70:	79fa      	ldrb	r2, [r7, #7]
 8019b72:	4923      	ldr	r1, [pc, #140]	; (8019c00 <etharp_output_to_arp_index+0x124>)
 8019b74:	4613      	mov	r3, r2
 8019b76:	005b      	lsls	r3, r3, #1
 8019b78:	4413      	add	r3, r2
 8019b7a:	00db      	lsls	r3, r3, #3
 8019b7c:	440b      	add	r3, r1
 8019b7e:	3312      	adds	r3, #18
 8019b80:	881b      	ldrh	r3, [r3, #0]
 8019b82:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8019b86:	d321      	bcc.n	8019bcc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019b88:	79fa      	ldrb	r2, [r7, #7]
 8019b8a:	4613      	mov	r3, r2
 8019b8c:	005b      	lsls	r3, r3, #1
 8019b8e:	4413      	add	r3, r2
 8019b90:	00db      	lsls	r3, r3, #3
 8019b92:	4a1b      	ldr	r2, [pc, #108]	; (8019c00 <etharp_output_to_arp_index+0x124>)
 8019b94:	4413      	add	r3, r2
 8019b96:	1d19      	adds	r1, r3, #4
 8019b98:	79fa      	ldrb	r2, [r7, #7]
 8019b9a:	4613      	mov	r3, r2
 8019b9c:	005b      	lsls	r3, r3, #1
 8019b9e:	4413      	add	r3, r2
 8019ba0:	00db      	lsls	r3, r3, #3
 8019ba2:	3308      	adds	r3, #8
 8019ba4:	4a16      	ldr	r2, [pc, #88]	; (8019c00 <etharp_output_to_arp_index+0x124>)
 8019ba6:	4413      	add	r3, r2
 8019ba8:	3304      	adds	r3, #4
 8019baa:	461a      	mov	r2, r3
 8019bac:	68f8      	ldr	r0, [r7, #12]
 8019bae:	f000 faf3 	bl	801a198 <etharp_request_dst>
 8019bb2:	4603      	mov	r3, r0
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d109      	bne.n	8019bcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019bb8:	79fa      	ldrb	r2, [r7, #7]
 8019bba:	4911      	ldr	r1, [pc, #68]	; (8019c00 <etharp_output_to_arp_index+0x124>)
 8019bbc:	4613      	mov	r3, r2
 8019bbe:	005b      	lsls	r3, r3, #1
 8019bc0:	4413      	add	r3, r2
 8019bc2:	00db      	lsls	r3, r3, #3
 8019bc4:	440b      	add	r3, r1
 8019bc6:	3314      	adds	r3, #20
 8019bc8:	2203      	movs	r2, #3
 8019bca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8019bd2:	79fa      	ldrb	r2, [r7, #7]
 8019bd4:	4613      	mov	r3, r2
 8019bd6:	005b      	lsls	r3, r3, #1
 8019bd8:	4413      	add	r3, r2
 8019bda:	00db      	lsls	r3, r3, #3
 8019bdc:	3308      	adds	r3, #8
 8019bde:	4a08      	ldr	r2, [pc, #32]	; (8019c00 <etharp_output_to_arp_index+0x124>)
 8019be0:	4413      	add	r3, r2
 8019be2:	1d1a      	adds	r2, r3, #4
 8019be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019be8:	9300      	str	r3, [sp, #0]
 8019bea:	4613      	mov	r3, r2
 8019bec:	460a      	mov	r2, r1
 8019bee:	68b9      	ldr	r1, [r7, #8]
 8019bf0:	68f8      	ldr	r0, [r7, #12]
 8019bf2:	f009 f967 	bl	8022ec4 <ethernet_output>
 8019bf6:	4603      	mov	r3, r0
}
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	3710      	adds	r7, #16
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	bd80      	pop	{r7, pc}
 8019c00:	20003f98 	.word	0x20003f98
 8019c04:	08026c64 	.word	0x08026c64
 8019c08:	08026dd4 	.word	0x08026dd4
 8019c0c:	08026cdc 	.word	0x08026cdc

08019c10 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b08a      	sub	sp, #40	; 0x28
 8019c14:	af02      	add	r7, sp, #8
 8019c16:	60f8      	str	r0, [r7, #12]
 8019c18:	60b9      	str	r1, [r7, #8]
 8019c1a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d106      	bne.n	8019c34 <etharp_output+0x24>
 8019c26:	4b69      	ldr	r3, [pc, #420]	; (8019dcc <etharp_output+0x1bc>)
 8019c28:	f240 321b 	movw	r2, #795	; 0x31b
 8019c2c:	4968      	ldr	r1, [pc, #416]	; (8019dd0 <etharp_output+0x1c0>)
 8019c2e:	4869      	ldr	r0, [pc, #420]	; (8019dd4 <etharp_output+0x1c4>)
 8019c30:	f00b fd1e 	bl	8025670 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d106      	bne.n	8019c48 <etharp_output+0x38>
 8019c3a:	4b64      	ldr	r3, [pc, #400]	; (8019dcc <etharp_output+0x1bc>)
 8019c3c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8019c40:	4965      	ldr	r1, [pc, #404]	; (8019dd8 <etharp_output+0x1c8>)
 8019c42:	4864      	ldr	r0, [pc, #400]	; (8019dd4 <etharp_output+0x1c4>)
 8019c44:	f00b fd14 	bl	8025670 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d106      	bne.n	8019c5c <etharp_output+0x4c>
 8019c4e:	4b5f      	ldr	r3, [pc, #380]	; (8019dcc <etharp_output+0x1bc>)
 8019c50:	f240 321d 	movw	r2, #797	; 0x31d
 8019c54:	4961      	ldr	r1, [pc, #388]	; (8019ddc <etharp_output+0x1cc>)
 8019c56:	485f      	ldr	r0, [pc, #380]	; (8019dd4 <etharp_output+0x1c4>)
 8019c58:	f00b fd0a 	bl	8025670 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	68f9      	ldr	r1, [r7, #12]
 8019c62:	4618      	mov	r0, r3
 8019c64:	f000 fed0 	bl	801aa08 <ip4_addr_isbroadcast_u32>
 8019c68:	4603      	mov	r3, r0
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d002      	beq.n	8019c74 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019c6e:	4b5c      	ldr	r3, [pc, #368]	; (8019de0 <etharp_output+0x1d0>)
 8019c70:	61fb      	str	r3, [r7, #28]
 8019c72:	e09b      	b.n	8019dac <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019c7c:	2be0      	cmp	r3, #224	; 0xe0
 8019c7e:	d118      	bne.n	8019cb2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019c80:	2301      	movs	r3, #1
 8019c82:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019c84:	2300      	movs	r3, #0
 8019c86:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019c88:	235e      	movs	r3, #94	; 0x5e
 8019c8a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	3301      	adds	r3, #1
 8019c90:	781b      	ldrb	r3, [r3, #0]
 8019c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c96:	b2db      	uxtb	r3, r3
 8019c98:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	3302      	adds	r3, #2
 8019c9e:	781b      	ldrb	r3, [r3, #0]
 8019ca0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	3303      	adds	r3, #3
 8019ca6:	781b      	ldrb	r3, [r3, #0]
 8019ca8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019caa:	f107 0310 	add.w	r3, r7, #16
 8019cae:	61fb      	str	r3, [r7, #28]
 8019cb0:	e07c      	b.n	8019dac <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	681a      	ldr	r2, [r3, #0]
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	3304      	adds	r3, #4
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	405a      	eors	r2, r3
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	3308      	adds	r3, #8
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	4013      	ands	r3, r2
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d012      	beq.n	8019cf0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019cd0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019cd4:	4293      	cmp	r3, r2
 8019cd6:	d00b      	beq.n	8019cf0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	330c      	adds	r3, #12
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d003      	beq.n	8019cea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	330c      	adds	r3, #12
 8019ce6:	61bb      	str	r3, [r7, #24]
 8019ce8:	e002      	b.n	8019cf0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019cea:	f06f 0303 	mvn.w	r3, #3
 8019cee:	e069      	b.n	8019dc4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019cf0:	4b3c      	ldr	r3, [pc, #240]	; (8019de4 <etharp_output+0x1d4>)
 8019cf2:	781b      	ldrb	r3, [r3, #0]
 8019cf4:	4619      	mov	r1, r3
 8019cf6:	4a3c      	ldr	r2, [pc, #240]	; (8019de8 <etharp_output+0x1d8>)
 8019cf8:	460b      	mov	r3, r1
 8019cfa:	005b      	lsls	r3, r3, #1
 8019cfc:	440b      	add	r3, r1
 8019cfe:	00db      	lsls	r3, r3, #3
 8019d00:	4413      	add	r3, r2
 8019d02:	3314      	adds	r3, #20
 8019d04:	781b      	ldrb	r3, [r3, #0]
 8019d06:	2b01      	cmp	r3, #1
 8019d08:	d917      	bls.n	8019d3a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019d0a:	69bb      	ldr	r3, [r7, #24]
 8019d0c:	681a      	ldr	r2, [r3, #0]
 8019d0e:	4b35      	ldr	r3, [pc, #212]	; (8019de4 <etharp_output+0x1d4>)
 8019d10:	781b      	ldrb	r3, [r3, #0]
 8019d12:	4618      	mov	r0, r3
 8019d14:	4934      	ldr	r1, [pc, #208]	; (8019de8 <etharp_output+0x1d8>)
 8019d16:	4603      	mov	r3, r0
 8019d18:	005b      	lsls	r3, r3, #1
 8019d1a:	4403      	add	r3, r0
 8019d1c:	00db      	lsls	r3, r3, #3
 8019d1e:	440b      	add	r3, r1
 8019d20:	3304      	adds	r3, #4
 8019d22:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019d24:	429a      	cmp	r2, r3
 8019d26:	d108      	bne.n	8019d3a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019d28:	4b2e      	ldr	r3, [pc, #184]	; (8019de4 <etharp_output+0x1d4>)
 8019d2a:	781b      	ldrb	r3, [r3, #0]
 8019d2c:	461a      	mov	r2, r3
 8019d2e:	68b9      	ldr	r1, [r7, #8]
 8019d30:	68f8      	ldr	r0, [r7, #12]
 8019d32:	f7ff fed3 	bl	8019adc <etharp_output_to_arp_index>
 8019d36:	4603      	mov	r3, r0
 8019d38:	e044      	b.n	8019dc4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019d3a:	2300      	movs	r3, #0
 8019d3c:	75fb      	strb	r3, [r7, #23]
 8019d3e:	e02a      	b.n	8019d96 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019d40:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019d44:	4928      	ldr	r1, [pc, #160]	; (8019de8 <etharp_output+0x1d8>)
 8019d46:	4613      	mov	r3, r2
 8019d48:	005b      	lsls	r3, r3, #1
 8019d4a:	4413      	add	r3, r2
 8019d4c:	00db      	lsls	r3, r3, #3
 8019d4e:	440b      	add	r3, r1
 8019d50:	3314      	adds	r3, #20
 8019d52:	781b      	ldrb	r3, [r3, #0]
 8019d54:	2b01      	cmp	r3, #1
 8019d56:	d918      	bls.n	8019d8a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019d58:	69bb      	ldr	r3, [r7, #24]
 8019d5a:	6819      	ldr	r1, [r3, #0]
 8019d5c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019d60:	4821      	ldr	r0, [pc, #132]	; (8019de8 <etharp_output+0x1d8>)
 8019d62:	4613      	mov	r3, r2
 8019d64:	005b      	lsls	r3, r3, #1
 8019d66:	4413      	add	r3, r2
 8019d68:	00db      	lsls	r3, r3, #3
 8019d6a:	4403      	add	r3, r0
 8019d6c:	3304      	adds	r3, #4
 8019d6e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019d70:	4299      	cmp	r1, r3
 8019d72:	d10a      	bne.n	8019d8a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8019d74:	7dfa      	ldrb	r2, [r7, #23]
 8019d76:	4b1b      	ldr	r3, [pc, #108]	; (8019de4 <etharp_output+0x1d4>)
 8019d78:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019d7a:	7dfb      	ldrb	r3, [r7, #23]
 8019d7c:	461a      	mov	r2, r3
 8019d7e:	68b9      	ldr	r1, [r7, #8]
 8019d80:	68f8      	ldr	r0, [r7, #12]
 8019d82:	f7ff feab 	bl	8019adc <etharp_output_to_arp_index>
 8019d86:	4603      	mov	r3, r0
 8019d88:	e01c      	b.n	8019dc4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019d8e:	b2db      	uxtb	r3, r3
 8019d90:	3301      	adds	r3, #1
 8019d92:	b2db      	uxtb	r3, r3
 8019d94:	75fb      	strb	r3, [r7, #23]
 8019d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019d9a:	2b09      	cmp	r3, #9
 8019d9c:	ddd0      	ble.n	8019d40 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019d9e:	68ba      	ldr	r2, [r7, #8]
 8019da0:	69b9      	ldr	r1, [r7, #24]
 8019da2:	68f8      	ldr	r0, [r7, #12]
 8019da4:	f000 f822 	bl	8019dec <etharp_query>
 8019da8:	4603      	mov	r3, r0
 8019daa:	e00b      	b.n	8019dc4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8019db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019db6:	9300      	str	r3, [sp, #0]
 8019db8:	69fb      	ldr	r3, [r7, #28]
 8019dba:	68b9      	ldr	r1, [r7, #8]
 8019dbc:	68f8      	ldr	r0, [r7, #12]
 8019dbe:	f009 f881 	bl	8022ec4 <ethernet_output>
 8019dc2:	4603      	mov	r3, r0
}
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	3720      	adds	r7, #32
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	bd80      	pop	{r7, pc}
 8019dcc:	08026c64 	.word	0x08026c64
 8019dd0:	08026db4 	.word	0x08026db4
 8019dd4:	08026cdc 	.word	0x08026cdc
 8019dd8:	08026e04 	.word	0x08026e04
 8019ddc:	08026da4 	.word	0x08026da4
 8019de0:	0802af74 	.word	0x0802af74
 8019de4:	20004088 	.word	0x20004088
 8019de8:	20003f98 	.word	0x20003f98

08019dec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b08c      	sub	sp, #48	; 0x30
 8019df0:	af02      	add	r7, sp, #8
 8019df2:	60f8      	str	r0, [r7, #12]
 8019df4:	60b9      	str	r1, [r7, #8]
 8019df6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	3325      	adds	r3, #37	; 0x25
 8019dfc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019dfe:	23ff      	movs	r3, #255	; 0xff
 8019e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019e04:	2300      	movs	r3, #0
 8019e06:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019e08:	68bb      	ldr	r3, [r7, #8]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	68f9      	ldr	r1, [r7, #12]
 8019e0e:	4618      	mov	r0, r3
 8019e10:	f000 fdfa 	bl	801aa08 <ip4_addr_isbroadcast_u32>
 8019e14:	4603      	mov	r3, r0
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d10c      	bne.n	8019e34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019e1a:	68bb      	ldr	r3, [r7, #8]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019e22:	2be0      	cmp	r3, #224	; 0xe0
 8019e24:	d006      	beq.n	8019e34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019e26:	68bb      	ldr	r3, [r7, #8]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d003      	beq.n	8019e34 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019e2c:	68bb      	ldr	r3, [r7, #8]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d102      	bne.n	8019e3a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019e34:	f06f 030f 	mvn.w	r3, #15
 8019e38:	e10f      	b.n	801a05a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019e3a:	68fa      	ldr	r2, [r7, #12]
 8019e3c:	2101      	movs	r1, #1
 8019e3e:	68b8      	ldr	r0, [r7, #8]
 8019e40:	f7ff fba2 	bl	8019588 <etharp_find_entry>
 8019e44:	4603      	mov	r3, r0
 8019e46:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8019e48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	da02      	bge.n	8019e56 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8019e50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019e54:	e101      	b.n	801a05a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019e56:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019e5a:	4982      	ldr	r1, [pc, #520]	; (801a064 <etharp_query+0x278>)
 8019e5c:	4613      	mov	r3, r2
 8019e5e:	005b      	lsls	r3, r3, #1
 8019e60:	4413      	add	r3, r2
 8019e62:	00db      	lsls	r3, r3, #3
 8019e64:	440b      	add	r3, r1
 8019e66:	3314      	adds	r3, #20
 8019e68:	781b      	ldrb	r3, [r3, #0]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d117      	bne.n	8019e9e <etharp_query+0xb2>
    is_new_entry = 1;
 8019e6e:	2301      	movs	r3, #1
 8019e70:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019e72:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019e76:	497b      	ldr	r1, [pc, #492]	; (801a064 <etharp_query+0x278>)
 8019e78:	4613      	mov	r3, r2
 8019e7a:	005b      	lsls	r3, r3, #1
 8019e7c:	4413      	add	r3, r2
 8019e7e:	00db      	lsls	r3, r3, #3
 8019e80:	440b      	add	r3, r1
 8019e82:	3314      	adds	r3, #20
 8019e84:	2201      	movs	r2, #1
 8019e86:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019e88:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019e8c:	4975      	ldr	r1, [pc, #468]	; (801a064 <etharp_query+0x278>)
 8019e8e:	4613      	mov	r3, r2
 8019e90:	005b      	lsls	r3, r3, #1
 8019e92:	4413      	add	r3, r2
 8019e94:	00db      	lsls	r3, r3, #3
 8019e96:	440b      	add	r3, r1
 8019e98:	3308      	adds	r3, #8
 8019e9a:	68fa      	ldr	r2, [r7, #12]
 8019e9c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019e9e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019ea2:	4970      	ldr	r1, [pc, #448]	; (801a064 <etharp_query+0x278>)
 8019ea4:	4613      	mov	r3, r2
 8019ea6:	005b      	lsls	r3, r3, #1
 8019ea8:	4413      	add	r3, r2
 8019eaa:	00db      	lsls	r3, r3, #3
 8019eac:	440b      	add	r3, r1
 8019eae:	3314      	adds	r3, #20
 8019eb0:	781b      	ldrb	r3, [r3, #0]
 8019eb2:	2b01      	cmp	r3, #1
 8019eb4:	d012      	beq.n	8019edc <etharp_query+0xf0>
 8019eb6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019eba:	496a      	ldr	r1, [pc, #424]	; (801a064 <etharp_query+0x278>)
 8019ebc:	4613      	mov	r3, r2
 8019ebe:	005b      	lsls	r3, r3, #1
 8019ec0:	4413      	add	r3, r2
 8019ec2:	00db      	lsls	r3, r3, #3
 8019ec4:	440b      	add	r3, r1
 8019ec6:	3314      	adds	r3, #20
 8019ec8:	781b      	ldrb	r3, [r3, #0]
 8019eca:	2b01      	cmp	r3, #1
 8019ecc:	d806      	bhi.n	8019edc <etharp_query+0xf0>
 8019ece:	4b66      	ldr	r3, [pc, #408]	; (801a068 <etharp_query+0x27c>)
 8019ed0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8019ed4:	4965      	ldr	r1, [pc, #404]	; (801a06c <etharp_query+0x280>)
 8019ed6:	4866      	ldr	r0, [pc, #408]	; (801a070 <etharp_query+0x284>)
 8019ed8:	f00b fbca 	bl	8025670 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019edc:	6a3b      	ldr	r3, [r7, #32]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d102      	bne.n	8019ee8 <etharp_query+0xfc>
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d10c      	bne.n	8019f02 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019ee8:	68b9      	ldr	r1, [r7, #8]
 8019eea:	68f8      	ldr	r0, [r7, #12]
 8019eec:	f000 f976 	bl	801a1dc <etharp_request>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d102      	bne.n	8019f02 <etharp_query+0x116>
      return result;
 8019efc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019f00:	e0ab      	b.n	801a05a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d106      	bne.n	8019f16 <etharp_query+0x12a>
 8019f08:	4b57      	ldr	r3, [pc, #348]	; (801a068 <etharp_query+0x27c>)
 8019f0a:	f240 32db 	movw	r2, #987	; 0x3db
 8019f0e:	4959      	ldr	r1, [pc, #356]	; (801a074 <etharp_query+0x288>)
 8019f10:	4857      	ldr	r0, [pc, #348]	; (801a070 <etharp_query+0x284>)
 8019f12:	f00b fbad 	bl	8025670 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019f16:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019f1a:	4952      	ldr	r1, [pc, #328]	; (801a064 <etharp_query+0x278>)
 8019f1c:	4613      	mov	r3, r2
 8019f1e:	005b      	lsls	r3, r3, #1
 8019f20:	4413      	add	r3, r2
 8019f22:	00db      	lsls	r3, r3, #3
 8019f24:	440b      	add	r3, r1
 8019f26:	3314      	adds	r3, #20
 8019f28:	781b      	ldrb	r3, [r3, #0]
 8019f2a:	2b01      	cmp	r3, #1
 8019f2c:	d919      	bls.n	8019f62 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8019f2e:	7cfa      	ldrb	r2, [r7, #19]
 8019f30:	4b51      	ldr	r3, [pc, #324]	; (801a078 <etharp_query+0x28c>)
 8019f32:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019f34:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019f38:	4613      	mov	r3, r2
 8019f3a:	005b      	lsls	r3, r3, #1
 8019f3c:	4413      	add	r3, r2
 8019f3e:	00db      	lsls	r3, r3, #3
 8019f40:	3308      	adds	r3, #8
 8019f42:	4a48      	ldr	r2, [pc, #288]	; (801a064 <etharp_query+0x278>)
 8019f44:	4413      	add	r3, r2
 8019f46:	1d1a      	adds	r2, r3, #4
 8019f48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019f4c:	9300      	str	r3, [sp, #0]
 8019f4e:	4613      	mov	r3, r2
 8019f50:	697a      	ldr	r2, [r7, #20]
 8019f52:	6879      	ldr	r1, [r7, #4]
 8019f54:	68f8      	ldr	r0, [r7, #12]
 8019f56:	f008 ffb5 	bl	8022ec4 <ethernet_output>
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019f60:	e079      	b.n	801a056 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019f62:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019f66:	493f      	ldr	r1, [pc, #252]	; (801a064 <etharp_query+0x278>)
 8019f68:	4613      	mov	r3, r2
 8019f6a:	005b      	lsls	r3, r3, #1
 8019f6c:	4413      	add	r3, r2
 8019f6e:	00db      	lsls	r3, r3, #3
 8019f70:	440b      	add	r3, r1
 8019f72:	3314      	adds	r3, #20
 8019f74:	781b      	ldrb	r3, [r3, #0]
 8019f76:	2b01      	cmp	r3, #1
 8019f78:	d16d      	bne.n	801a056 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019f82:	e01a      	b.n	8019fba <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019f84:	69fb      	ldr	r3, [r7, #28]
 8019f86:	895a      	ldrh	r2, [r3, #10]
 8019f88:	69fb      	ldr	r3, [r7, #28]
 8019f8a:	891b      	ldrh	r3, [r3, #8]
 8019f8c:	429a      	cmp	r2, r3
 8019f8e:	d10a      	bne.n	8019fa6 <etharp_query+0x1ba>
 8019f90:	69fb      	ldr	r3, [r7, #28]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d006      	beq.n	8019fa6 <etharp_query+0x1ba>
 8019f98:	4b33      	ldr	r3, [pc, #204]	; (801a068 <etharp_query+0x27c>)
 8019f9a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8019f9e:	4937      	ldr	r1, [pc, #220]	; (801a07c <etharp_query+0x290>)
 8019fa0:	4833      	ldr	r0, [pc, #204]	; (801a070 <etharp_query+0x284>)
 8019fa2:	f00b fb65 	bl	8025670 <iprintf>
      if (p->type != PBUF_ROM) {
 8019fa6:	69fb      	ldr	r3, [r7, #28]
 8019fa8:	7b1b      	ldrb	r3, [r3, #12]
 8019faa:	2b01      	cmp	r3, #1
 8019fac:	d002      	beq.n	8019fb4 <etharp_query+0x1c8>
        copy_needed = 1;
 8019fae:	2301      	movs	r3, #1
 8019fb0:	61bb      	str	r3, [r7, #24]
        break;
 8019fb2:	e005      	b.n	8019fc0 <etharp_query+0x1d4>
      }
      p = p->next;
 8019fb4:	69fb      	ldr	r3, [r7, #28]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019fba:	69fb      	ldr	r3, [r7, #28]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d1e1      	bne.n	8019f84 <etharp_query+0x198>
    }
    if (copy_needed) {
 8019fc0:	69bb      	ldr	r3, [r7, #24]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d017      	beq.n	8019ff6 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8019fc6:	69fb      	ldr	r3, [r7, #28]
 8019fc8:	891b      	ldrh	r3, [r3, #8]
 8019fca:	2200      	movs	r2, #0
 8019fcc:	4619      	mov	r1, r3
 8019fce:	2002      	movs	r0, #2
 8019fd0:	f002 fae0 	bl	801c594 <pbuf_alloc>
 8019fd4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8019fd6:	69fb      	ldr	r3, [r7, #28]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d011      	beq.n	801a000 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8019fdc:	6879      	ldr	r1, [r7, #4]
 8019fde:	69f8      	ldr	r0, [r7, #28]
 8019fe0:	f002 ff7a 	bl	801ced8 <pbuf_copy>
 8019fe4:	4603      	mov	r3, r0
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d00a      	beq.n	801a000 <etharp_query+0x214>
          pbuf_free(p);
 8019fea:	69f8      	ldr	r0, [r7, #28]
 8019fec:	f002 fe44 	bl	801cc78 <pbuf_free>
          p = NULL;
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	61fb      	str	r3, [r7, #28]
 8019ff4:	e004      	b.n	801a000 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019ffa:	69f8      	ldr	r0, [r7, #28]
 8019ffc:	f002 feee 	bl	801cddc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a000:	69fb      	ldr	r3, [r7, #28]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d024      	beq.n	801a050 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a006:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a00a:	4916      	ldr	r1, [pc, #88]	; (801a064 <etharp_query+0x278>)
 801a00c:	4613      	mov	r3, r2
 801a00e:	005b      	lsls	r3, r3, #1
 801a010:	4413      	add	r3, r2
 801a012:	00db      	lsls	r3, r3, #3
 801a014:	440b      	add	r3, r1
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d00b      	beq.n	801a034 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801a01c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a020:	4910      	ldr	r1, [pc, #64]	; (801a064 <etharp_query+0x278>)
 801a022:	4613      	mov	r3, r2
 801a024:	005b      	lsls	r3, r3, #1
 801a026:	4413      	add	r3, r2
 801a028:	00db      	lsls	r3, r3, #3
 801a02a:	440b      	add	r3, r1
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	4618      	mov	r0, r3
 801a030:	f002 fe22 	bl	801cc78 <pbuf_free>
      }
      arp_table[i].q = p;
 801a034:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a038:	490a      	ldr	r1, [pc, #40]	; (801a064 <etharp_query+0x278>)
 801a03a:	4613      	mov	r3, r2
 801a03c:	005b      	lsls	r3, r3, #1
 801a03e:	4413      	add	r3, r2
 801a040:	00db      	lsls	r3, r3, #3
 801a042:	440b      	add	r3, r1
 801a044:	69fa      	ldr	r2, [r7, #28]
 801a046:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a048:	2300      	movs	r3, #0
 801a04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a04e:	e002      	b.n	801a056 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a050:	23ff      	movs	r3, #255	; 0xff
 801a052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801a056:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801a05a:	4618      	mov	r0, r3
 801a05c:	3728      	adds	r7, #40	; 0x28
 801a05e:	46bd      	mov	sp, r7
 801a060:	bd80      	pop	{r7, pc}
 801a062:	bf00      	nop
 801a064:	20003f98 	.word	0x20003f98
 801a068:	08026c64 	.word	0x08026c64
 801a06c:	08026e10 	.word	0x08026e10
 801a070:	08026cdc 	.word	0x08026cdc
 801a074:	08026e04 	.word	0x08026e04
 801a078:	20004088 	.word	0x20004088
 801a07c:	08026e38 	.word	0x08026e38

0801a080 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a080:	b580      	push	{r7, lr}
 801a082:	b08a      	sub	sp, #40	; 0x28
 801a084:	af02      	add	r7, sp, #8
 801a086:	60f8      	str	r0, [r7, #12]
 801a088:	60b9      	str	r1, [r7, #8]
 801a08a:	607a      	str	r2, [r7, #4]
 801a08c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a08e:	2300      	movs	r3, #0
 801a090:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d106      	bne.n	801a0a6 <etharp_raw+0x26>
 801a098:	4b3a      	ldr	r3, [pc, #232]	; (801a184 <etharp_raw+0x104>)
 801a09a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801a09e:	493a      	ldr	r1, [pc, #232]	; (801a188 <etharp_raw+0x108>)
 801a0a0:	483a      	ldr	r0, [pc, #232]	; (801a18c <etharp_raw+0x10c>)
 801a0a2:	f00b fae5 	bl	8025670 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	211c      	movs	r1, #28
 801a0aa:	2002      	movs	r0, #2
 801a0ac:	f002 fa72 	bl	801c594 <pbuf_alloc>
 801a0b0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a0b2:	69bb      	ldr	r3, [r7, #24]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d102      	bne.n	801a0be <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a0b8:	f04f 33ff 	mov.w	r3, #4294967295
 801a0bc:	e05d      	b.n	801a17a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a0be:	69bb      	ldr	r3, [r7, #24]
 801a0c0:	895b      	ldrh	r3, [r3, #10]
 801a0c2:	2b1b      	cmp	r3, #27
 801a0c4:	d806      	bhi.n	801a0d4 <etharp_raw+0x54>
 801a0c6:	4b2f      	ldr	r3, [pc, #188]	; (801a184 <etharp_raw+0x104>)
 801a0c8:	f240 4264 	movw	r2, #1124	; 0x464
 801a0cc:	4930      	ldr	r1, [pc, #192]	; (801a190 <etharp_raw+0x110>)
 801a0ce:	482f      	ldr	r0, [pc, #188]	; (801a18c <etharp_raw+0x10c>)
 801a0d0:	f00b face 	bl	8025670 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a0d4:	69bb      	ldr	r3, [r7, #24]
 801a0d6:	685b      	ldr	r3, [r3, #4]
 801a0d8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a0da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f7ff f93b 	bl	8019358 <lwip_htons>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	461a      	mov	r2, r3
 801a0e6:	697b      	ldr	r3, [r7, #20]
 801a0e8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a0f0:	2b06      	cmp	r3, #6
 801a0f2:	d006      	beq.n	801a102 <etharp_raw+0x82>
 801a0f4:	4b23      	ldr	r3, [pc, #140]	; (801a184 <etharp_raw+0x104>)
 801a0f6:	f240 426b 	movw	r2, #1131	; 0x46b
 801a0fa:	4926      	ldr	r1, [pc, #152]	; (801a194 <etharp_raw+0x114>)
 801a0fc:	4823      	ldr	r0, [pc, #140]	; (801a18c <etharp_raw+0x10c>)
 801a0fe:	f00b fab7 	bl	8025670 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801a102:	697b      	ldr	r3, [r7, #20]
 801a104:	3308      	adds	r3, #8
 801a106:	2206      	movs	r2, #6
 801a108:	6839      	ldr	r1, [r7, #0]
 801a10a:	4618      	mov	r0, r3
 801a10c:	f00b ff63 	bl	8025fd6 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801a110:	697b      	ldr	r3, [r7, #20]
 801a112:	3312      	adds	r3, #18
 801a114:	2206      	movs	r2, #6
 801a116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a118:	4618      	mov	r0, r3
 801a11a:	f00b ff5c 	bl	8025fd6 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801a11e:	697b      	ldr	r3, [r7, #20]
 801a120:	330e      	adds	r3, #14
 801a122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a124:	6812      	ldr	r2, [r2, #0]
 801a126:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801a128:	697b      	ldr	r3, [r7, #20]
 801a12a:	3318      	adds	r3, #24
 801a12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a12e:	6812      	ldr	r2, [r2, #0]
 801a130:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801a132:	697b      	ldr	r3, [r7, #20]
 801a134:	2200      	movs	r2, #0
 801a136:	701a      	strb	r2, [r3, #0]
 801a138:	2200      	movs	r2, #0
 801a13a:	f042 0201 	orr.w	r2, r2, #1
 801a13e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a140:	697b      	ldr	r3, [r7, #20]
 801a142:	2200      	movs	r2, #0
 801a144:	f042 0208 	orr.w	r2, r2, #8
 801a148:	709a      	strb	r2, [r3, #2]
 801a14a:	2200      	movs	r2, #0
 801a14c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a14e:	697b      	ldr	r3, [r7, #20]
 801a150:	2206      	movs	r2, #6
 801a152:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a154:	697b      	ldr	r3, [r7, #20]
 801a156:	2204      	movs	r2, #4
 801a158:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a15a:	f640 0306 	movw	r3, #2054	; 0x806
 801a15e:	9300      	str	r3, [sp, #0]
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	68ba      	ldr	r2, [r7, #8]
 801a164:	69b9      	ldr	r1, [r7, #24]
 801a166:	68f8      	ldr	r0, [r7, #12]
 801a168:	f008 feac 	bl	8022ec4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a16c:	69b8      	ldr	r0, [r7, #24]
 801a16e:	f002 fd83 	bl	801cc78 <pbuf_free>
  p = NULL;
 801a172:	2300      	movs	r3, #0
 801a174:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a176:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a17a:	4618      	mov	r0, r3
 801a17c:	3720      	adds	r7, #32
 801a17e:	46bd      	mov	sp, r7
 801a180:	bd80      	pop	{r7, pc}
 801a182:	bf00      	nop
 801a184:	08026c64 	.word	0x08026c64
 801a188:	08026db4 	.word	0x08026db4
 801a18c:	08026cdc 	.word	0x08026cdc
 801a190:	08026e54 	.word	0x08026e54
 801a194:	08026e88 	.word	0x08026e88

0801a198 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801a198:	b580      	push	{r7, lr}
 801a19a:	b088      	sub	sp, #32
 801a19c:	af04      	add	r7, sp, #16
 801a19e:	60f8      	str	r0, [r7, #12]
 801a1a0:	60b9      	str	r1, [r7, #8]
 801a1a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	f103 0025 	add.w	r0, r3, #37	; 0x25
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a1b4:	2201      	movs	r2, #1
 801a1b6:	9203      	str	r2, [sp, #12]
 801a1b8:	68ba      	ldr	r2, [r7, #8]
 801a1ba:	9202      	str	r2, [sp, #8]
 801a1bc:	4a06      	ldr	r2, [pc, #24]	; (801a1d8 <etharp_request_dst+0x40>)
 801a1be:	9201      	str	r2, [sp, #4]
 801a1c0:	9300      	str	r3, [sp, #0]
 801a1c2:	4603      	mov	r3, r0
 801a1c4:	687a      	ldr	r2, [r7, #4]
 801a1c6:	68f8      	ldr	r0, [r7, #12]
 801a1c8:	f7ff ff5a 	bl	801a080 <etharp_raw>
 801a1cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	3710      	adds	r7, #16
 801a1d2:	46bd      	mov	sp, r7
 801a1d4:	bd80      	pop	{r7, pc}
 801a1d6:	bf00      	nop
 801a1d8:	0802af7c 	.word	0x0802af7c

0801a1dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b082      	sub	sp, #8
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	6078      	str	r0, [r7, #4]
 801a1e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a1e6:	4a05      	ldr	r2, [pc, #20]	; (801a1fc <etharp_request+0x20>)
 801a1e8:	6839      	ldr	r1, [r7, #0]
 801a1ea:	6878      	ldr	r0, [r7, #4]
 801a1ec:	f7ff ffd4 	bl	801a198 <etharp_request_dst>
 801a1f0:	4603      	mov	r3, r0
}
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	3708      	adds	r7, #8
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	bd80      	pop	{r7, pc}
 801a1fa:	bf00      	nop
 801a1fc:	0802af74 	.word	0x0802af74

0801a200 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a200:	b580      	push	{r7, lr}
 801a202:	b08e      	sub	sp, #56	; 0x38
 801a204:	af04      	add	r7, sp, #16
 801a206:	6078      	str	r0, [r7, #4]
 801a208:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a20a:	4b7a      	ldr	r3, [pc, #488]	; (801a3f4 <icmp_input+0x1f4>)
 801a20c:	689b      	ldr	r3, [r3, #8]
 801a20e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a212:	781b      	ldrb	r3, [r3, #0]
 801a214:	b29b      	uxth	r3, r3
 801a216:	f003 030f 	and.w	r3, r3, #15
 801a21a:	b29b      	uxth	r3, r3
 801a21c:	009b      	lsls	r3, r3, #2
 801a21e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801a220:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a222:	2b13      	cmp	r3, #19
 801a224:	f240 80d1 	bls.w	801a3ca <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	895b      	ldrh	r3, [r3, #10]
 801a22c:	2b03      	cmp	r3, #3
 801a22e:	f240 80ce 	bls.w	801a3ce <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	685b      	ldr	r3, [r3, #4]
 801a236:	781b      	ldrb	r3, [r3, #0]
 801a238:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a23c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a240:	2b00      	cmp	r3, #0
 801a242:	f000 80bb 	beq.w	801a3bc <icmp_input+0x1bc>
 801a246:	2b08      	cmp	r3, #8
 801a248:	f040 80bb 	bne.w	801a3c2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801a24c:	4b6a      	ldr	r3, [pc, #424]	; (801a3f8 <icmp_input+0x1f8>)
 801a24e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a250:	4b68      	ldr	r3, [pc, #416]	; (801a3f4 <icmp_input+0x1f4>)
 801a252:	695b      	ldr	r3, [r3, #20]
 801a254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a258:	2be0      	cmp	r3, #224	; 0xe0
 801a25a:	f000 80bf 	beq.w	801a3dc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a25e:	4b65      	ldr	r3, [pc, #404]	; (801a3f4 <icmp_input+0x1f4>)
 801a260:	695a      	ldr	r2, [r3, #20]
 801a262:	4b64      	ldr	r3, [pc, #400]	; (801a3f4 <icmp_input+0x1f4>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	4619      	mov	r1, r3
 801a268:	4610      	mov	r0, r2
 801a26a:	f000 fbcd 	bl	801aa08 <ip4_addr_isbroadcast_u32>
 801a26e:	4603      	mov	r3, r0
 801a270:	2b00      	cmp	r3, #0
 801a272:	f040 80b5 	bne.w	801a3e0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	891b      	ldrh	r3, [r3, #8]
 801a27a:	2b07      	cmp	r3, #7
 801a27c:	f240 80a9 	bls.w	801a3d2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801a280:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a282:	330e      	adds	r3, #14
 801a284:	b29b      	uxth	r3, r3
 801a286:	b21b      	sxth	r3, r3
 801a288:	4619      	mov	r1, r3
 801a28a:	6878      	ldr	r0, [r7, #4]
 801a28c:	f002 fcd0 	bl	801cc30 <pbuf_header>
 801a290:	4603      	mov	r3, r0
 801a292:	2b00      	cmp	r3, #0
 801a294:	d046      	beq.n	801a324 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	891a      	ldrh	r2, [r3, #8]
 801a29a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a29c:	4413      	add	r3, r2
 801a29e:	b29b      	uxth	r3, r3
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	4619      	mov	r1, r3
 801a2a4:	2002      	movs	r0, #2
 801a2a6:	f002 f975 	bl	801c594 <pbuf_alloc>
 801a2aa:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801a2ac:	69bb      	ldr	r3, [r7, #24]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	f000 8098 	beq.w	801a3e4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a2b4:	69bb      	ldr	r3, [r7, #24]
 801a2b6:	895b      	ldrh	r3, [r3, #10]
 801a2b8:	461a      	mov	r2, r3
 801a2ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a2bc:	3308      	adds	r3, #8
 801a2be:	429a      	cmp	r2, r3
 801a2c0:	d203      	bcs.n	801a2ca <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801a2c2:	69b8      	ldr	r0, [r7, #24]
 801a2c4:	f002 fcd8 	bl	801cc78 <pbuf_free>
        goto icmperr;
 801a2c8:	e08d      	b.n	801a3e6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801a2ca:	69bb      	ldr	r3, [r7, #24]
 801a2cc:	685b      	ldr	r3, [r3, #4]
 801a2ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a2d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	f00b fe7f 	bl	8025fd6 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801a2d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a2da:	425b      	negs	r3, r3
 801a2dc:	b29b      	uxth	r3, r3
 801a2de:	b21b      	sxth	r3, r3
 801a2e0:	4619      	mov	r1, r3
 801a2e2:	69b8      	ldr	r0, [r7, #24]
 801a2e4:	f002 fca4 	bl	801cc30 <pbuf_header>
 801a2e8:	4603      	mov	r3, r0
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d009      	beq.n	801a302 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a2ee:	4b43      	ldr	r3, [pc, #268]	; (801a3fc <icmp_input+0x1fc>)
 801a2f0:	22af      	movs	r2, #175	; 0xaf
 801a2f2:	4943      	ldr	r1, [pc, #268]	; (801a400 <icmp_input+0x200>)
 801a2f4:	4843      	ldr	r0, [pc, #268]	; (801a404 <icmp_input+0x204>)
 801a2f6:	f00b f9bb 	bl	8025670 <iprintf>
        pbuf_free(r);
 801a2fa:	69b8      	ldr	r0, [r7, #24]
 801a2fc:	f002 fcbc 	bl	801cc78 <pbuf_free>
        goto icmperr;
 801a300:	e071      	b.n	801a3e6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801a302:	6879      	ldr	r1, [r7, #4]
 801a304:	69b8      	ldr	r0, [r7, #24]
 801a306:	f002 fde7 	bl	801ced8 <pbuf_copy>
 801a30a:	4603      	mov	r3, r0
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d003      	beq.n	801a318 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801a310:	69b8      	ldr	r0, [r7, #24]
 801a312:	f002 fcb1 	bl	801cc78 <pbuf_free>
        goto icmperr;
 801a316:	e066      	b.n	801a3e6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 801a318:	6878      	ldr	r0, [r7, #4]
 801a31a:	f002 fcad 	bl	801cc78 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801a31e:	69bb      	ldr	r3, [r7, #24]
 801a320:	607b      	str	r3, [r7, #4]
 801a322:	e015      	b.n	801a350 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801a324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a326:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801a32a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801a32e:	33f2      	adds	r3, #242	; 0xf2
 801a330:	b29b      	uxth	r3, r3
 801a332:	b21b      	sxth	r3, r3
 801a334:	4619      	mov	r1, r3
 801a336:	6878      	ldr	r0, [r7, #4]
 801a338:	f002 fc7a 	bl	801cc30 <pbuf_header>
 801a33c:	4603      	mov	r3, r0
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d006      	beq.n	801a350 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a342:	4b2e      	ldr	r3, [pc, #184]	; (801a3fc <icmp_input+0x1fc>)
 801a344:	22c0      	movs	r2, #192	; 0xc0
 801a346:	4930      	ldr	r1, [pc, #192]	; (801a408 <icmp_input+0x208>)
 801a348:	482e      	ldr	r0, [pc, #184]	; (801a404 <icmp_input+0x204>)
 801a34a:	f00b f991 	bl	8025670 <iprintf>
        goto icmperr;
 801a34e:	e04a      	b.n	801a3e6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	685b      	ldr	r3, [r3, #4]
 801a354:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801a356:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a35a:	4619      	mov	r1, r3
 801a35c:	6878      	ldr	r0, [r7, #4]
 801a35e:	f002 fc67 	bl	801cc30 <pbuf_header>
 801a362:	4603      	mov	r3, r0
 801a364:	2b00      	cmp	r3, #0
 801a366:	d12b      	bne.n	801a3c0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	685b      	ldr	r3, [r3, #4]
 801a36c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801a36e:	69fb      	ldr	r3, [r7, #28]
 801a370:	681a      	ldr	r2, [r3, #0]
 801a372:	693b      	ldr	r3, [r7, #16]
 801a374:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a376:	4b1f      	ldr	r3, [pc, #124]	; (801a3f4 <icmp_input+0x1f4>)
 801a378:	691a      	ldr	r2, [r3, #16]
 801a37a:	693b      	ldr	r3, [r7, #16]
 801a37c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a37e:	697b      	ldr	r3, [r7, #20]
 801a380:	2200      	movs	r2, #0
 801a382:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 801a384:	697b      	ldr	r3, [r7, #20]
 801a386:	2200      	movs	r2, #0
 801a388:	709a      	strb	r2, [r3, #2]
 801a38a:	2200      	movs	r2, #0
 801a38c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801a38e:	693b      	ldr	r3, [r7, #16]
 801a390:	22ff      	movs	r2, #255	; 0xff
 801a392:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801a394:	693b      	ldr	r3, [r7, #16]
 801a396:	2200      	movs	r2, #0
 801a398:	729a      	strb	r2, [r3, #10]
 801a39a:	2200      	movs	r2, #0
 801a39c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a39e:	683b      	ldr	r3, [r7, #0]
 801a3a0:	9302      	str	r3, [sp, #8]
 801a3a2:	2301      	movs	r3, #1
 801a3a4:	9301      	str	r3, [sp, #4]
 801a3a6:	2300      	movs	r3, #0
 801a3a8:	9300      	str	r3, [sp, #0]
 801a3aa:	23ff      	movs	r3, #255	; 0xff
 801a3ac:	2200      	movs	r2, #0
 801a3ae:	69f9      	ldr	r1, [r7, #28]
 801a3b0:	6878      	ldr	r0, [r7, #4]
 801a3b2:	f000 fa57 	bl	801a864 <ip4_output_if>
 801a3b6:	4603      	mov	r3, r0
 801a3b8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801a3ba:	e001      	b.n	801a3c0 <icmp_input+0x1c0>
    break;
 801a3bc:	bf00      	nop
 801a3be:	e000      	b.n	801a3c2 <icmp_input+0x1c2>
    break;
 801a3c0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a3c2:	6878      	ldr	r0, [r7, #4]
 801a3c4:	f002 fc58 	bl	801cc78 <pbuf_free>
  return;
 801a3c8:	e011      	b.n	801a3ee <icmp_input+0x1ee>
    goto lenerr;
 801a3ca:	bf00      	nop
 801a3cc:	e002      	b.n	801a3d4 <icmp_input+0x1d4>
    goto lenerr;
 801a3ce:	bf00      	nop
 801a3d0:	e000      	b.n	801a3d4 <icmp_input+0x1d4>
      goto lenerr;
 801a3d2:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a3d4:	6878      	ldr	r0, [r7, #4]
 801a3d6:	f002 fc4f 	bl	801cc78 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a3da:	e008      	b.n	801a3ee <icmp_input+0x1ee>
      goto icmperr;
 801a3dc:	bf00      	nop
 801a3de:	e002      	b.n	801a3e6 <icmp_input+0x1e6>
      goto icmperr;
 801a3e0:	bf00      	nop
 801a3e2:	e000      	b.n	801a3e6 <icmp_input+0x1e6>
        goto icmperr;
 801a3e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a3e6:	6878      	ldr	r0, [r7, #4]
 801a3e8:	f002 fc46 	bl	801cc78 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a3ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a3ee:	3728      	adds	r7, #40	; 0x28
 801a3f0:	46bd      	mov	sp, r7
 801a3f2:	bd80      	pop	{r7, pc}
 801a3f4:	200045fc 	.word	0x200045fc
 801a3f8:	20004610 	.word	0x20004610
 801a3fc:	08026ecc 	.word	0x08026ecc
 801a400:	08026f04 	.word	0x08026f04
 801a404:	08026f3c 	.word	0x08026f3c
 801a408:	08026f64 	.word	0x08026f64

0801a40c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b082      	sub	sp, #8
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
 801a414:	460b      	mov	r3, r1
 801a416:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a418:	78fb      	ldrb	r3, [r7, #3]
 801a41a:	461a      	mov	r2, r3
 801a41c:	2103      	movs	r1, #3
 801a41e:	6878      	ldr	r0, [r7, #4]
 801a420:	f000 f814 	bl	801a44c <icmp_send_response>
}
 801a424:	bf00      	nop
 801a426:	3708      	adds	r7, #8
 801a428:	46bd      	mov	sp, r7
 801a42a:	bd80      	pop	{r7, pc}

0801a42c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b082      	sub	sp, #8
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
 801a434:	460b      	mov	r3, r1
 801a436:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a438:	78fb      	ldrb	r3, [r7, #3]
 801a43a:	461a      	mov	r2, r3
 801a43c:	210b      	movs	r1, #11
 801a43e:	6878      	ldr	r0, [r7, #4]
 801a440:	f000 f804 	bl	801a44c <icmp_send_response>
}
 801a444:	bf00      	nop
 801a446:	3708      	adds	r7, #8
 801a448:	46bd      	mov	sp, r7
 801a44a:	bd80      	pop	{r7, pc}

0801a44c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b08c      	sub	sp, #48	; 0x30
 801a450:	af04      	add	r7, sp, #16
 801a452:	6078      	str	r0, [r7, #4]
 801a454:	460b      	mov	r3, r1
 801a456:	70fb      	strb	r3, [r7, #3]
 801a458:	4613      	mov	r3, r2
 801a45a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a45c:	2200      	movs	r2, #0
 801a45e:	2124      	movs	r1, #36	; 0x24
 801a460:	2001      	movs	r0, #1
 801a462:	f002 f897 	bl	801c594 <pbuf_alloc>
 801a466:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a468:	69fb      	ldr	r3, [r7, #28]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d04c      	beq.n	801a508 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a46e:	69fb      	ldr	r3, [r7, #28]
 801a470:	895b      	ldrh	r3, [r3, #10]
 801a472:	2b23      	cmp	r3, #35	; 0x23
 801a474:	d806      	bhi.n	801a484 <icmp_send_response+0x38>
 801a476:	4b26      	ldr	r3, [pc, #152]	; (801a510 <icmp_send_response+0xc4>)
 801a478:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801a47c:	4925      	ldr	r1, [pc, #148]	; (801a514 <icmp_send_response+0xc8>)
 801a47e:	4826      	ldr	r0, [pc, #152]	; (801a518 <icmp_send_response+0xcc>)
 801a480:	f00b f8f6 	bl	8025670 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	685b      	ldr	r3, [r3, #4]
 801a488:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a48a:	69fb      	ldr	r3, [r7, #28]
 801a48c:	685b      	ldr	r3, [r3, #4]
 801a48e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a490:	697b      	ldr	r3, [r7, #20]
 801a492:	78fa      	ldrb	r2, [r7, #3]
 801a494:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a496:	697b      	ldr	r3, [r7, #20]
 801a498:	78ba      	ldrb	r2, [r7, #2]
 801a49a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a49c:	697b      	ldr	r3, [r7, #20]
 801a49e:	2200      	movs	r2, #0
 801a4a0:	711a      	strb	r2, [r3, #4]
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a4a6:	697b      	ldr	r3, [r7, #20]
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	719a      	strb	r2, [r3, #6]
 801a4ac:	2200      	movs	r2, #0
 801a4ae:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a4b0:	69fb      	ldr	r3, [r7, #28]
 801a4b2:	685b      	ldr	r3, [r3, #4]
 801a4b4:	f103 0008 	add.w	r0, r3, #8
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	685b      	ldr	r3, [r3, #4]
 801a4bc:	221c      	movs	r2, #28
 801a4be:	4619      	mov	r1, r3
 801a4c0:	f00b fd89 	bl	8025fd6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a4c4:	69bb      	ldr	r3, [r7, #24]
 801a4c6:	68db      	ldr	r3, [r3, #12]
 801a4c8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a4ca:	f107 030c 	add.w	r3, r7, #12
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	f000 f824 	bl	801a51c <ip4_route>
 801a4d4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a4d6:	693b      	ldr	r3, [r7, #16]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d011      	beq.n	801a500 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a4dc:	697b      	ldr	r3, [r7, #20]
 801a4de:	2200      	movs	r2, #0
 801a4e0:	709a      	strb	r2, [r3, #2]
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a4e6:	f107 020c 	add.w	r2, r7, #12
 801a4ea:	693b      	ldr	r3, [r7, #16]
 801a4ec:	9302      	str	r3, [sp, #8]
 801a4ee:	2301      	movs	r3, #1
 801a4f0:	9301      	str	r3, [sp, #4]
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	9300      	str	r3, [sp, #0]
 801a4f6:	23ff      	movs	r3, #255	; 0xff
 801a4f8:	2100      	movs	r1, #0
 801a4fa:	69f8      	ldr	r0, [r7, #28]
 801a4fc:	f000 f9b2 	bl	801a864 <ip4_output_if>
  }
  pbuf_free(q);
 801a500:	69f8      	ldr	r0, [r7, #28]
 801a502:	f002 fbb9 	bl	801cc78 <pbuf_free>
 801a506:	e000      	b.n	801a50a <icmp_send_response+0xbe>
    return;
 801a508:	bf00      	nop
}
 801a50a:	3720      	adds	r7, #32
 801a50c:	46bd      	mov	sp, r7
 801a50e:	bd80      	pop	{r7, pc}
 801a510:	08026ecc 	.word	0x08026ecc
 801a514:	08026f98 	.word	0x08026f98
 801a518:	08026f3c 	.word	0x08026f3c

0801a51c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a51c:	b480      	push	{r7}
 801a51e:	b085      	sub	sp, #20
 801a520:	af00      	add	r7, sp, #0
 801a522:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801a524:	4b2f      	ldr	r3, [pc, #188]	; (801a5e4 <ip4_route+0xc8>)
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	60fb      	str	r3, [r7, #12]
 801a52a:	e033      	b.n	801a594 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a532:	f003 0301 	and.w	r3, r3, #1
 801a536:	2b00      	cmp	r3, #0
 801a538:	d029      	beq.n	801a58e <ip4_route+0x72>
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a540:	f003 0304 	and.w	r3, r3, #4
 801a544:	2b00      	cmp	r3, #0
 801a546:	d022      	beq.n	801a58e <ip4_route+0x72>
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	3304      	adds	r3, #4
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d01d      	beq.n	801a58e <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	681a      	ldr	r2, [r3, #0]
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	3304      	adds	r3, #4
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	405a      	eors	r2, r3
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	3308      	adds	r3, #8
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	4013      	ands	r3, r2
 801a566:	2b00      	cmp	r3, #0
 801a568:	d101      	bne.n	801a56e <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 801a56a:	68fb      	ldr	r3, [r7, #12]
 801a56c:	e033      	b.n	801a5d6 <ip4_route+0xba>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a574:	f003 0302 	and.w	r3, r3, #2
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d108      	bne.n	801a58e <ip4_route+0x72>
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	681a      	ldr	r2, [r3, #0]
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	330c      	adds	r3, #12
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	429a      	cmp	r2, r3
 801a588:	d101      	bne.n	801a58e <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	e023      	b.n	801a5d6 <ip4_route+0xba>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801a58e:	68fb      	ldr	r3, [r7, #12]
 801a590:	681b      	ldr	r3, [r3, #0]
 801a592:	60fb      	str	r3, [r7, #12]
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	2b00      	cmp	r3, #0
 801a598:	d1c8      	bne.n	801a52c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a59a:	4b13      	ldr	r3, [pc, #76]	; (801a5e8 <ip4_route+0xcc>)
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d015      	beq.n	801a5ce <ip4_route+0xb2>
 801a5a2:	4b11      	ldr	r3, [pc, #68]	; (801a5e8 <ip4_route+0xcc>)
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a5aa:	f003 0301 	and.w	r3, r3, #1
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d00d      	beq.n	801a5ce <ip4_route+0xb2>
 801a5b2:	4b0d      	ldr	r3, [pc, #52]	; (801a5e8 <ip4_route+0xcc>)
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a5ba:	f003 0304 	and.w	r3, r3, #4
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d005      	beq.n	801a5ce <ip4_route+0xb2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801a5c2:	4b09      	ldr	r3, [pc, #36]	; (801a5e8 <ip4_route+0xcc>)
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	3304      	adds	r3, #4
 801a5c8:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d101      	bne.n	801a5d2 <ip4_route+0xb6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	e001      	b.n	801a5d6 <ip4_route+0xba>
  }

  return netif_default;
 801a5d2:	4b05      	ldr	r3, [pc, #20]	; (801a5e8 <ip4_route+0xcc>)
 801a5d4:	681b      	ldr	r3, [r3, #0]
}
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	3714      	adds	r7, #20
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5e0:	4770      	bx	lr
 801a5e2:	bf00      	nop
 801a5e4:	20008c14 	.word	0x20008c14
 801a5e8:	20008c18 	.word	0x20008c18

0801a5ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b086      	sub	sp, #24
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
 801a5f4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	685b      	ldr	r3, [r3, #4]
 801a5fa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801a5fc:	697b      	ldr	r3, [r7, #20]
 801a5fe:	781b      	ldrb	r3, [r3, #0]
 801a600:	091b      	lsrs	r3, r3, #4
 801a602:	b2db      	uxtb	r3, r3
 801a604:	2b04      	cmp	r3, #4
 801a606:	d004      	beq.n	801a612 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a608:	6878      	ldr	r0, [r7, #4]
 801a60a:	f002 fb35 	bl	801cc78 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a60e:	2300      	movs	r3, #0
 801a610:	e120      	b.n	801a854 <ip4_input+0x268>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801a612:	697b      	ldr	r3, [r7, #20]
 801a614:	781b      	ldrb	r3, [r3, #0]
 801a616:	b29b      	uxth	r3, r3
 801a618:	f003 030f 	and.w	r3, r3, #15
 801a61c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801a61e:	897b      	ldrh	r3, [r7, #10]
 801a620:	009b      	lsls	r3, r3, #2
 801a622:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a624:	697b      	ldr	r3, [r7, #20]
 801a626:	885b      	ldrh	r3, [r3, #2]
 801a628:	b29b      	uxth	r3, r3
 801a62a:	4618      	mov	r0, r3
 801a62c:	f7fe fe94 	bl	8019358 <lwip_htons>
 801a630:	4603      	mov	r3, r0
 801a632:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	891b      	ldrh	r3, [r3, #8]
 801a638:	893a      	ldrh	r2, [r7, #8]
 801a63a:	429a      	cmp	r2, r3
 801a63c:	d204      	bcs.n	801a648 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801a63e:	893b      	ldrh	r3, [r7, #8]
 801a640:	4619      	mov	r1, r3
 801a642:	6878      	ldr	r0, [r7, #4]
 801a644:	f002 f9a4 	bl	801c990 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	895b      	ldrh	r3, [r3, #10]
 801a64c:	897a      	ldrh	r2, [r7, #10]
 801a64e:	429a      	cmp	r2, r3
 801a650:	d807      	bhi.n	801a662 <ip4_input+0x76>
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	891b      	ldrh	r3, [r3, #8]
 801a656:	893a      	ldrh	r2, [r7, #8]
 801a658:	429a      	cmp	r2, r3
 801a65a:	d802      	bhi.n	801a662 <ip4_input+0x76>
 801a65c:	897b      	ldrh	r3, [r7, #10]
 801a65e:	2b13      	cmp	r3, #19
 801a660:	d804      	bhi.n	801a66c <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a662:	6878      	ldr	r0, [r7, #4]
 801a664:	f002 fb08 	bl	801cc78 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a668:	2300      	movs	r3, #0
 801a66a:	e0f3      	b.n	801a854 <ip4_input+0x268>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a66c:	697b      	ldr	r3, [r7, #20]
 801a66e:	691b      	ldr	r3, [r3, #16]
 801a670:	4a7a      	ldr	r2, [pc, #488]	; (801a85c <ip4_input+0x270>)
 801a672:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a674:	697b      	ldr	r3, [r7, #20]
 801a676:	68db      	ldr	r3, [r3, #12]
 801a678:	4a78      	ldr	r2, [pc, #480]	; (801a85c <ip4_input+0x270>)
 801a67a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a67c:	4b77      	ldr	r3, [pc, #476]	; (801a85c <ip4_input+0x270>)
 801a67e:	695b      	ldr	r3, [r3, #20]
 801a680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a684:	2be0      	cmp	r3, #224	; 0xe0
 801a686:	d111      	bne.n	801a6ac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a688:	683b      	ldr	r3, [r7, #0]
 801a68a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a68e:	f003 0301 	and.w	r3, r3, #1
 801a692:	2b00      	cmp	r3, #0
 801a694:	d007      	beq.n	801a6a6 <ip4_input+0xba>
 801a696:	683b      	ldr	r3, [r7, #0]
 801a698:	3304      	adds	r3, #4
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d002      	beq.n	801a6a6 <ip4_input+0xba>
      netif = inp;
 801a6a0:	683b      	ldr	r3, [r7, #0]
 801a6a2:	613b      	str	r3, [r7, #16]
 801a6a4:	e040      	b.n	801a728 <ip4_input+0x13c>
    } else {
      netif = NULL;
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	613b      	str	r3, [r7, #16]
 801a6aa:	e03d      	b.n	801a728 <ip4_input+0x13c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801a6ac:	2301      	movs	r3, #1
 801a6ae:	60fb      	str	r3, [r7, #12]
    netif = inp;
 801a6b0:	683b      	ldr	r3, [r7, #0]
 801a6b2:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a6b4:	693b      	ldr	r3, [r7, #16]
 801a6b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a6ba:	f003 0301 	and.w	r3, r3, #1
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d014      	beq.n	801a6ec <ip4_input+0x100>
 801a6c2:	693b      	ldr	r3, [r7, #16]
 801a6c4:	3304      	adds	r3, #4
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d00f      	beq.n	801a6ec <ip4_input+0x100>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a6cc:	4b63      	ldr	r3, [pc, #396]	; (801a85c <ip4_input+0x270>)
 801a6ce:	695a      	ldr	r2, [r3, #20]
 801a6d0:	693b      	ldr	r3, [r7, #16]
 801a6d2:	3304      	adds	r3, #4
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	429a      	cmp	r2, r3
 801a6d8:	d026      	beq.n	801a728 <ip4_input+0x13c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a6da:	4b60      	ldr	r3, [pc, #384]	; (801a85c <ip4_input+0x270>)
 801a6dc:	695b      	ldr	r3, [r3, #20]
 801a6de:	6939      	ldr	r1, [r7, #16]
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	f000 f991 	bl	801aa08 <ip4_addr_isbroadcast_u32>
 801a6e6:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d11d      	bne.n	801a728 <ip4_input+0x13c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d00d      	beq.n	801a70e <ip4_input+0x122>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801a6f2:	4b5a      	ldr	r3, [pc, #360]	; (801a85c <ip4_input+0x270>)
 801a6f4:	695b      	ldr	r3, [r3, #20]
 801a6f6:	b2db      	uxtb	r3, r3
 801a6f8:	2b7f      	cmp	r3, #127	; 0x7f
 801a6fa:	d102      	bne.n	801a702 <ip4_input+0x116>
          netif = NULL;
 801a6fc:	2300      	movs	r3, #0
 801a6fe:	613b      	str	r3, [r7, #16]
          break;
 801a700:	e012      	b.n	801a728 <ip4_input+0x13c>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801a702:	2300      	movs	r3, #0
 801a704:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801a706:	4b56      	ldr	r3, [pc, #344]	; (801a860 <ip4_input+0x274>)
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	613b      	str	r3, [r7, #16]
 801a70c:	e002      	b.n	801a714 <ip4_input+0x128>
      } else {
        netif = netif->next;
 801a70e:	693b      	ldr	r3, [r7, #16]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 801a714:	693a      	ldr	r2, [r7, #16]
 801a716:	683b      	ldr	r3, [r7, #0]
 801a718:	429a      	cmp	r2, r3
 801a71a:	d102      	bne.n	801a722 <ip4_input+0x136>
        netif = netif->next;
 801a71c:	693b      	ldr	r3, [r7, #16]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 801a722:	693b      	ldr	r3, [r7, #16]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d1c5      	bne.n	801a6b4 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a728:	4b4c      	ldr	r3, [pc, #304]	; (801a85c <ip4_input+0x270>)
 801a72a:	691b      	ldr	r3, [r3, #16]
 801a72c:	6839      	ldr	r1, [r7, #0]
 801a72e:	4618      	mov	r0, r3
 801a730:	f000 f96a 	bl	801aa08 <ip4_addr_isbroadcast_u32>
 801a734:	4603      	mov	r3, r0
 801a736:	2b00      	cmp	r3, #0
 801a738:	d105      	bne.n	801a746 <ip4_input+0x15a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a73a:	4b48      	ldr	r3, [pc, #288]	; (801a85c <ip4_input+0x270>)
 801a73c:	691b      	ldr	r3, [r3, #16]
 801a73e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a742:	2be0      	cmp	r3, #224	; 0xe0
 801a744:	d104      	bne.n	801a750 <ip4_input+0x164>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f002 fa96 	bl	801cc78 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a74c:	2300      	movs	r3, #0
 801a74e:	e081      	b.n	801a854 <ip4_input+0x268>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a750:	693b      	ldr	r3, [r7, #16]
 801a752:	2b00      	cmp	r3, #0
 801a754:	d104      	bne.n	801a760 <ip4_input+0x174>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a756:	6878      	ldr	r0, [r7, #4]
 801a758:	f002 fa8e 	bl	801cc78 <pbuf_free>
    return ERR_OK;
 801a75c:	2300      	movs	r3, #0
 801a75e:	e079      	b.n	801a854 <ip4_input+0x268>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a760:	697b      	ldr	r3, [r7, #20]
 801a762:	88db      	ldrh	r3, [r3, #6]
 801a764:	b29b      	uxth	r3, r3
 801a766:	461a      	mov	r2, r3
 801a768:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a76c:	4013      	ands	r3, r2
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d00b      	beq.n	801a78a <ip4_input+0x19e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a772:	6878      	ldr	r0, [r7, #4]
 801a774:	f000 fe5e 	bl	801b434 <ip4_reass>
 801a778:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d101      	bne.n	801a784 <ip4_input+0x198>
      return ERR_OK;
 801a780:	2300      	movs	r3, #0
 801a782:	e067      	b.n	801a854 <ip4_input+0x268>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	685b      	ldr	r3, [r3, #4]
 801a788:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a78a:	4a34      	ldr	r2, [pc, #208]	; (801a85c <ip4_input+0x270>)
 801a78c:	693b      	ldr	r3, [r7, #16]
 801a78e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a790:	4a32      	ldr	r2, [pc, #200]	; (801a85c <ip4_input+0x270>)
 801a792:	683b      	ldr	r3, [r7, #0]
 801a794:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a796:	4a31      	ldr	r2, [pc, #196]	; (801a85c <ip4_input+0x270>)
 801a798:	697b      	ldr	r3, [r7, #20]
 801a79a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801a79c:	697b      	ldr	r3, [r7, #20]
 801a79e:	781b      	ldrb	r3, [r3, #0]
 801a7a0:	b29b      	uxth	r3, r3
 801a7a2:	f003 030f 	and.w	r3, r3, #15
 801a7a6:	b29b      	uxth	r3, r3
 801a7a8:	009b      	lsls	r3, r3, #2
 801a7aa:	b29a      	uxth	r2, r3
 801a7ac:	4b2b      	ldr	r3, [pc, #172]	; (801a85c <ip4_input+0x270>)
 801a7ae:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801a7b0:	897b      	ldrh	r3, [r7, #10]
 801a7b2:	425b      	negs	r3, r3
 801a7b4:	b29b      	uxth	r3, r3
 801a7b6:	b21b      	sxth	r3, r3
 801a7b8:	4619      	mov	r1, r3
 801a7ba:	6878      	ldr	r0, [r7, #4]
 801a7bc:	f002 fa38 	bl	801cc30 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 801a7c0:	697b      	ldr	r3, [r7, #20]
 801a7c2:	7a5b      	ldrb	r3, [r3, #9]
 801a7c4:	2b06      	cmp	r3, #6
 801a7c6:	d009      	beq.n	801a7dc <ip4_input+0x1f0>
 801a7c8:	2b11      	cmp	r3, #17
 801a7ca:	d002      	beq.n	801a7d2 <ip4_input+0x1e6>
 801a7cc:	2b01      	cmp	r3, #1
 801a7ce:	d00a      	beq.n	801a7e6 <ip4_input+0x1fa>
 801a7d0:	e00e      	b.n	801a7f0 <ip4_input+0x204>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801a7d2:	6839      	ldr	r1, [r7, #0]
 801a7d4:	6878      	ldr	r0, [r7, #4]
 801a7d6:	f008 f8f5 	bl	80229c4 <udp_input>
      break;
 801a7da:	e028      	b.n	801a82e <ip4_input+0x242>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 801a7dc:	6839      	ldr	r1, [r7, #0]
 801a7de:	6878      	ldr	r0, [r7, #4]
 801a7e0:	f004 f916 	bl	801ea10 <tcp_input>
      break;
 801a7e4:	e023      	b.n	801a82e <ip4_input+0x242>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801a7e6:	6839      	ldr	r1, [r7, #0]
 801a7e8:	6878      	ldr	r0, [r7, #4]
 801a7ea:	f7ff fd09 	bl	801a200 <icmp_input>
      break;
 801a7ee:	e01e      	b.n	801a82e <ip4_input+0x242>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a7f0:	4b1a      	ldr	r3, [pc, #104]	; (801a85c <ip4_input+0x270>)
 801a7f2:	695b      	ldr	r3, [r3, #20]
 801a7f4:	6939      	ldr	r1, [r7, #16]
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	f000 f906 	bl	801aa08 <ip4_addr_isbroadcast_u32>
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d112      	bne.n	801a828 <ip4_input+0x23c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a802:	4b16      	ldr	r3, [pc, #88]	; (801a85c <ip4_input+0x270>)
 801a804:	695b      	ldr	r3, [r3, #20]
 801a806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a80a:	2be0      	cmp	r3, #224	; 0xe0
 801a80c:	d00c      	beq.n	801a828 <ip4_input+0x23c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801a80e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a812:	4619      	mov	r1, r3
 801a814:	6878      	ldr	r0, [r7, #4]
 801a816:	f002 fa1d 	bl	801cc54 <pbuf_header_force>
        p->payload = iphdr;
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	697a      	ldr	r2, [r7, #20]
 801a81e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a820:	2102      	movs	r1, #2
 801a822:	6878      	ldr	r0, [r7, #4]
 801a824:	f7ff fdf2 	bl	801a40c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801a828:	6878      	ldr	r0, [r7, #4]
 801a82a:	f002 fa25 	bl	801cc78 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a82e:	4b0b      	ldr	r3, [pc, #44]	; (801a85c <ip4_input+0x270>)
 801a830:	2200      	movs	r2, #0
 801a832:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a834:	4b09      	ldr	r3, [pc, #36]	; (801a85c <ip4_input+0x270>)
 801a836:	2200      	movs	r2, #0
 801a838:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a83a:	4b08      	ldr	r3, [pc, #32]	; (801a85c <ip4_input+0x270>)
 801a83c:	2200      	movs	r2, #0
 801a83e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a840:	4b06      	ldr	r3, [pc, #24]	; (801a85c <ip4_input+0x270>)
 801a842:	2200      	movs	r2, #0
 801a844:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a846:	4b05      	ldr	r3, [pc, #20]	; (801a85c <ip4_input+0x270>)
 801a848:	2200      	movs	r2, #0
 801a84a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a84c:	4b03      	ldr	r3, [pc, #12]	; (801a85c <ip4_input+0x270>)
 801a84e:	2200      	movs	r2, #0
 801a850:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a852:	2300      	movs	r3, #0
}
 801a854:	4618      	mov	r0, r3
 801a856:	3718      	adds	r7, #24
 801a858:	46bd      	mov	sp, r7
 801a85a:	bd80      	pop	{r7, pc}
 801a85c:	200045fc 	.word	0x200045fc
 801a860:	20008c14 	.word	0x20008c14

0801a864 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801a864:	b580      	push	{r7, lr}
 801a866:	b08a      	sub	sp, #40	; 0x28
 801a868:	af04      	add	r7, sp, #16
 801a86a:	60f8      	str	r0, [r7, #12]
 801a86c:	60b9      	str	r1, [r7, #8]
 801a86e:	607a      	str	r2, [r7, #4]
 801a870:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d009      	beq.n	801a890 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a87c:	68bb      	ldr	r3, [r7, #8]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d003      	beq.n	801a88a <ip4_output_if+0x26>
 801a882:	68bb      	ldr	r3, [r7, #8]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d102      	bne.n	801a890 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a88c:	3304      	adds	r3, #4
 801a88e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a890:	78fa      	ldrb	r2, [r7, #3]
 801a892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a894:	9302      	str	r3, [sp, #8]
 801a896:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a89a:	9301      	str	r3, [sp, #4]
 801a89c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a8a0:	9300      	str	r3, [sp, #0]
 801a8a2:	4613      	mov	r3, r2
 801a8a4:	687a      	ldr	r2, [r7, #4]
 801a8a6:	6979      	ldr	r1, [r7, #20]
 801a8a8:	68f8      	ldr	r0, [r7, #12]
 801a8aa:	f000 f805 	bl	801a8b8 <ip4_output_if_src>
 801a8ae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	3718      	adds	r7, #24
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	bd80      	pop	{r7, pc}

0801a8b8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b088      	sub	sp, #32
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	60f8      	str	r0, [r7, #12]
 801a8c0:	60b9      	str	r1, [r7, #8]
 801a8c2:	607a      	str	r2, [r7, #4]
 801a8c4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	89db      	ldrh	r3, [r3, #14]
 801a8ca:	2b01      	cmp	r3, #1
 801a8cc:	d006      	beq.n	801a8dc <ip4_output_if_src+0x24>
 801a8ce:	4b48      	ldr	r3, [pc, #288]	; (801a9f0 <ip4_output_if_src+0x138>)
 801a8d0:	f240 3233 	movw	r2, #819	; 0x333
 801a8d4:	4947      	ldr	r1, [pc, #284]	; (801a9f4 <ip4_output_if_src+0x13c>)
 801a8d6:	4848      	ldr	r0, [pc, #288]	; (801a9f8 <ip4_output_if_src+0x140>)
 801a8d8:	f00a feca 	bl	8025670 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d060      	beq.n	801a9a4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a8e2:	2314      	movs	r3, #20
 801a8e4:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801a8e6:	2114      	movs	r1, #20
 801a8e8:	68f8      	ldr	r0, [r7, #12]
 801a8ea:	f002 f9a1 	bl	801cc30 <pbuf_header>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d002      	beq.n	801a8fa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a8f4:	f06f 0301 	mvn.w	r3, #1
 801a8f8:	e075      	b.n	801a9e6 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	685b      	ldr	r3, [r3, #4]
 801a8fe:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a900:	68fb      	ldr	r3, [r7, #12]
 801a902:	895b      	ldrh	r3, [r3, #10]
 801a904:	2b13      	cmp	r3, #19
 801a906:	d806      	bhi.n	801a916 <ip4_output_if_src+0x5e>
 801a908:	4b39      	ldr	r3, [pc, #228]	; (801a9f0 <ip4_output_if_src+0x138>)
 801a90a:	f240 3261 	movw	r2, #865	; 0x361
 801a90e:	493b      	ldr	r1, [pc, #236]	; (801a9fc <ip4_output_if_src+0x144>)
 801a910:	4839      	ldr	r0, [pc, #228]	; (801a9f8 <ip4_output_if_src+0x140>)
 801a912:	f00a fead 	bl	8025670 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a916:	69bb      	ldr	r3, [r7, #24]
 801a918:	78fa      	ldrb	r2, [r7, #3]
 801a91a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a91c:	69bb      	ldr	r3, [r7, #24]
 801a91e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a922:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	681a      	ldr	r2, [r3, #0]
 801a928:	69bb      	ldr	r3, [r7, #24]
 801a92a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a92c:	8bfb      	ldrh	r3, [r7, #30]
 801a92e:	089b      	lsrs	r3, r3, #2
 801a930:	b29b      	uxth	r3, r3
 801a932:	b2db      	uxtb	r3, r3
 801a934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a938:	b2da      	uxtb	r2, r3
 801a93a:	69bb      	ldr	r3, [r7, #24]
 801a93c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a93e:	69bb      	ldr	r3, [r7, #24]
 801a940:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a944:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	891b      	ldrh	r3, [r3, #8]
 801a94a:	4618      	mov	r0, r3
 801a94c:	f7fe fd04 	bl	8019358 <lwip_htons>
 801a950:	4603      	mov	r3, r0
 801a952:	461a      	mov	r2, r3
 801a954:	69bb      	ldr	r3, [r7, #24]
 801a956:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a958:	69bb      	ldr	r3, [r7, #24]
 801a95a:	2200      	movs	r2, #0
 801a95c:	719a      	strb	r2, [r3, #6]
 801a95e:	2200      	movs	r2, #0
 801a960:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a962:	4b27      	ldr	r3, [pc, #156]	; (801aa00 <ip4_output_if_src+0x148>)
 801a964:	881b      	ldrh	r3, [r3, #0]
 801a966:	4618      	mov	r0, r3
 801a968:	f7fe fcf6 	bl	8019358 <lwip_htons>
 801a96c:	4603      	mov	r3, r0
 801a96e:	461a      	mov	r2, r3
 801a970:	69bb      	ldr	r3, [r7, #24]
 801a972:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a974:	4b22      	ldr	r3, [pc, #136]	; (801aa00 <ip4_output_if_src+0x148>)
 801a976:	881b      	ldrh	r3, [r3, #0]
 801a978:	3301      	adds	r3, #1
 801a97a:	b29a      	uxth	r2, r3
 801a97c:	4b20      	ldr	r3, [pc, #128]	; (801aa00 <ip4_output_if_src+0x148>)
 801a97e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a980:	68bb      	ldr	r3, [r7, #8]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d104      	bne.n	801a990 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a986:	4b1f      	ldr	r3, [pc, #124]	; (801aa04 <ip4_output_if_src+0x14c>)
 801a988:	681a      	ldr	r2, [r3, #0]
 801a98a:	69bb      	ldr	r3, [r7, #24]
 801a98c:	60da      	str	r2, [r3, #12]
 801a98e:	e003      	b.n	801a998 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a990:	68bb      	ldr	r3, [r7, #8]
 801a992:	681a      	ldr	r2, [r3, #0]
 801a994:	69bb      	ldr	r3, [r7, #24]
 801a996:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a998:	69bb      	ldr	r3, [r7, #24]
 801a99a:	2200      	movs	r2, #0
 801a99c:	729a      	strb	r2, [r3, #10]
 801a99e:	2200      	movs	r2, #0
 801a9a0:	72da      	strb	r2, [r3, #11]
 801a9a2:	e008      	b.n	801a9b6 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801a9a4:	68fb      	ldr	r3, [r7, #12]
 801a9a6:	685b      	ldr	r3, [r3, #4]
 801a9a8:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a9aa:	69bb      	ldr	r3, [r7, #24]
 801a9ac:	691b      	ldr	r3, [r3, #16]
 801a9ae:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a9b0:	f107 0314 	add.w	r3, r7, #20
 801a9b4:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d00c      	beq.n	801a9d8 <ip4_output_if_src+0x120>
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	891a      	ldrh	r2, [r3, #8]
 801a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a9c6:	429a      	cmp	r2, r3
 801a9c8:	d906      	bls.n	801a9d8 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801a9ca:	687a      	ldr	r2, [r7, #4]
 801a9cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a9ce:	68f8      	ldr	r0, [r7, #12]
 801a9d0:	f000 fed8 	bl	801b784 <ip4_frag>
 801a9d4:	4603      	mov	r3, r0
 801a9d6:	e006      	b.n	801a9e6 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9da:	695b      	ldr	r3, [r3, #20]
 801a9dc:	687a      	ldr	r2, [r7, #4]
 801a9de:	68f9      	ldr	r1, [r7, #12]
 801a9e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a9e2:	4798      	blx	r3
 801a9e4:	4603      	mov	r3, r0
}
 801a9e6:	4618      	mov	r0, r3
 801a9e8:	3720      	adds	r7, #32
 801a9ea:	46bd      	mov	sp, r7
 801a9ec:	bd80      	pop	{r7, pc}
 801a9ee:	bf00      	nop
 801a9f0:	08026fc4 	.word	0x08026fc4
 801a9f4:	08026ff8 	.word	0x08026ff8
 801a9f8:	08027004 	.word	0x08027004
 801a9fc:	0802702c 	.word	0x0802702c
 801aa00:	2000408a 	.word	0x2000408a
 801aa04:	0802ae60 	.word	0x0802ae60

0801aa08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801aa08:	b480      	push	{r7}
 801aa0a:	b085      	sub	sp, #20
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
 801aa10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa1c:	d002      	beq.n	801aa24 <ip4_addr_isbroadcast_u32+0x1c>
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d101      	bne.n	801aa28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801aa24:	2301      	movs	r3, #1
 801aa26:	e02a      	b.n	801aa7e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801aa28:	683b      	ldr	r3, [r7, #0]
 801aa2a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801aa2e:	f003 0302 	and.w	r3, r3, #2
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d101      	bne.n	801aa3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801aa36:	2300      	movs	r3, #0
 801aa38:	e021      	b.n	801aa7e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801aa3a:	683b      	ldr	r3, [r7, #0]
 801aa3c:	3304      	adds	r3, #4
 801aa3e:	681a      	ldr	r2, [r3, #0]
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	429a      	cmp	r2, r3
 801aa44:	d101      	bne.n	801aa4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801aa46:	2300      	movs	r3, #0
 801aa48:	e019      	b.n	801aa7e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801aa4a:	68fa      	ldr	r2, [r7, #12]
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	3304      	adds	r3, #4
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	405a      	eors	r2, r3
 801aa54:	683b      	ldr	r3, [r7, #0]
 801aa56:	3308      	adds	r3, #8
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	4013      	ands	r3, r2
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d10d      	bne.n	801aa7c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801aa60:	683b      	ldr	r3, [r7, #0]
 801aa62:	3308      	adds	r3, #8
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	43da      	mvns	r2, r3
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801aa6c:	683b      	ldr	r3, [r7, #0]
 801aa6e:	3308      	adds	r3, #8
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801aa74:	429a      	cmp	r2, r3
 801aa76:	d101      	bne.n	801aa7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801aa78:	2301      	movs	r3, #1
 801aa7a:	e000      	b.n	801aa7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801aa7c:	2300      	movs	r3, #0
  }
}
 801aa7e:	4618      	mov	r0, r3
 801aa80:	3714      	adds	r7, #20
 801aa82:	46bd      	mov	sp, r7
 801aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa88:	4770      	bx	lr
	...

0801aa8c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b08a      	sub	sp, #40	; 0x28
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	6078      	str	r0, [r7, #4]
 801aa94:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801aa96:	f107 030c 	add.w	r3, r7, #12
 801aa9a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	781b      	ldrb	r3, [r3, #0]
 801aaa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801aaa4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aaa8:	2b2f      	cmp	r3, #47	; 0x2f
 801aaaa:	d903      	bls.n	801aab4 <ip4addr_aton+0x28>
 801aaac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aab0:	2b39      	cmp	r3, #57	; 0x39
 801aab2:	d901      	bls.n	801aab8 <ip4addr_aton+0x2c>
      return 0;
 801aab4:	2300      	movs	r3, #0
 801aab6:	e11e      	b.n	801acf6 <ip4addr_aton+0x26a>
    }
    val = 0;
 801aab8:	2300      	movs	r3, #0
 801aaba:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801aabc:	230a      	movs	r3, #10
 801aabe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801aac2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aac6:	2b30      	cmp	r3, #48	; 0x30
 801aac8:	d11c      	bne.n	801ab04 <ip4addr_aton+0x78>
      c = *++cp;
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	3301      	adds	r3, #1
 801aace:	607b      	str	r3, [r7, #4]
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	781b      	ldrb	r3, [r3, #0]
 801aad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801aad8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aadc:	2b78      	cmp	r3, #120	; 0x78
 801aade:	d003      	beq.n	801aae8 <ip4addr_aton+0x5c>
 801aae0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aae4:	2b58      	cmp	r3, #88	; 0x58
 801aae6:	d10a      	bne.n	801aafe <ip4addr_aton+0x72>
        base = 16;
 801aae8:	2310      	movs	r3, #16
 801aaea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	3301      	adds	r3, #1
 801aaf2:	607b      	str	r3, [r7, #4]
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	781b      	ldrb	r3, [r3, #0]
 801aaf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801aafc:	e002      	b.n	801ab04 <ip4addr_aton+0x78>
      } else {
        base = 8;
 801aafe:	2308      	movs	r3, #8
 801ab00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 801ab04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab08:	2b2f      	cmp	r3, #47	; 0x2f
 801ab0a:	d915      	bls.n	801ab38 <ip4addr_aton+0xac>
 801ab0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab10:	2b39      	cmp	r3, #57	; 0x39
 801ab12:	d811      	bhi.n	801ab38 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 801ab14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ab18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab1a:	fb02 f203 	mul.w	r2, r2, r3
 801ab1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab22:	4413      	add	r3, r2
 801ab24:	3b30      	subs	r3, #48	; 0x30
 801ab26:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	3301      	adds	r3, #1
 801ab2c:	607b      	str	r3, [r7, #4]
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	781b      	ldrb	r3, [r3, #0]
 801ab32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801ab36:	e036      	b.n	801aba6 <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 801ab38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ab3c:	2b10      	cmp	r3, #16
 801ab3e:	d133      	bne.n	801aba8 <ip4addr_aton+0x11c>
 801ab40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab44:	2b2f      	cmp	r3, #47	; 0x2f
 801ab46:	d903      	bls.n	801ab50 <ip4addr_aton+0xc4>
 801ab48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab4c:	2b39      	cmp	r3, #57	; 0x39
 801ab4e:	d90f      	bls.n	801ab70 <ip4addr_aton+0xe4>
 801ab50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab54:	2b60      	cmp	r3, #96	; 0x60
 801ab56:	d903      	bls.n	801ab60 <ip4addr_aton+0xd4>
 801ab58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab5c:	2b66      	cmp	r3, #102	; 0x66
 801ab5e:	d907      	bls.n	801ab70 <ip4addr_aton+0xe4>
 801ab60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab64:	2b40      	cmp	r3, #64	; 0x40
 801ab66:	d91f      	bls.n	801aba8 <ip4addr_aton+0x11c>
 801ab68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ab6c:	2b46      	cmp	r3, #70	; 0x46
 801ab6e:	d81b      	bhi.n	801aba8 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab72:	011b      	lsls	r3, r3, #4
 801ab74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801ab78:	f102 010a 	add.w	r1, r2, #10
 801ab7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801ab80:	2a60      	cmp	r2, #96	; 0x60
 801ab82:	d905      	bls.n	801ab90 <ip4addr_aton+0x104>
 801ab84:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801ab88:	2a7a      	cmp	r2, #122	; 0x7a
 801ab8a:	d801      	bhi.n	801ab90 <ip4addr_aton+0x104>
 801ab8c:	2261      	movs	r2, #97	; 0x61
 801ab8e:	e000      	b.n	801ab92 <ip4addr_aton+0x106>
 801ab90:	2241      	movs	r2, #65	; 0x41
 801ab92:	1a8a      	subs	r2, r1, r2
 801ab94:	4313      	orrs	r3, r2
 801ab96:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	3301      	adds	r3, #1
 801ab9c:	607b      	str	r3, [r7, #4]
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	781b      	ldrb	r3, [r3, #0]
 801aba2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (isdigit(c)) {
 801aba6:	e7ad      	b.n	801ab04 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 801aba8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abac:	2b2e      	cmp	r3, #46	; 0x2e
 801abae:	d114      	bne.n	801abda <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801abb0:	f107 030c 	add.w	r3, r7, #12
 801abb4:	330c      	adds	r3, #12
 801abb6:	69fa      	ldr	r2, [r7, #28]
 801abb8:	4293      	cmp	r3, r2
 801abba:	d801      	bhi.n	801abc0 <ip4addr_aton+0x134>
        return 0;
 801abbc:	2300      	movs	r3, #0
 801abbe:	e09a      	b.n	801acf6 <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 801abc0:	69fb      	ldr	r3, [r7, #28]
 801abc2:	1d1a      	adds	r2, r3, #4
 801abc4:	61fa      	str	r2, [r7, #28]
 801abc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801abc8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	3301      	adds	r3, #1
 801abce:	607b      	str	r3, [r7, #4]
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	781b      	ldrb	r3, [r3, #0]
 801abd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!isdigit(c)) {
 801abd8:	e764      	b.n	801aaa4 <ip4addr_aton+0x18>
    } else {
      break;
 801abda:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 801abdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d019      	beq.n	801ac18 <ip4addr_aton+0x18c>
 801abe4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abe8:	2b20      	cmp	r3, #32
 801abea:	d015      	beq.n	801ac18 <ip4addr_aton+0x18c>
 801abec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abf0:	2b0c      	cmp	r3, #12
 801abf2:	d011      	beq.n	801ac18 <ip4addr_aton+0x18c>
 801abf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abf8:	2b0a      	cmp	r3, #10
 801abfa:	d00d      	beq.n	801ac18 <ip4addr_aton+0x18c>
 801abfc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac00:	2b0d      	cmp	r3, #13
 801ac02:	d009      	beq.n	801ac18 <ip4addr_aton+0x18c>
 801ac04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac08:	2b09      	cmp	r3, #9
 801ac0a:	d005      	beq.n	801ac18 <ip4addr_aton+0x18c>
 801ac0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac10:	2b0b      	cmp	r3, #11
 801ac12:	d001      	beq.n	801ac18 <ip4addr_aton+0x18c>
    return 0;
 801ac14:	2300      	movs	r3, #0
 801ac16:	e06e      	b.n	801acf6 <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801ac18:	69fa      	ldr	r2, [r7, #28]
 801ac1a:	f107 030c 	add.w	r3, r7, #12
 801ac1e:	1ad3      	subs	r3, r2, r3
 801ac20:	109b      	asrs	r3, r3, #2
 801ac22:	3301      	adds	r3, #1
 801ac24:	2b04      	cmp	r3, #4
 801ac26:	d853      	bhi.n	801acd0 <ip4addr_aton+0x244>
 801ac28:	a201      	add	r2, pc, #4	; (adr r2, 801ac30 <ip4addr_aton+0x1a4>)
 801ac2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac2e:	bf00      	nop
 801ac30:	0801ac45 	.word	0x0801ac45
 801ac34:	0801ace1 	.word	0x0801ace1
 801ac38:	0801ac49 	.word	0x0801ac49
 801ac3c:	0801ac6b 	.word	0x0801ac6b
 801ac40:	0801ac99 	.word	0x0801ac99

  case 0:
    return 0;       /* initial nondigit */
 801ac44:	2300      	movs	r3, #0
 801ac46:	e056      	b.n	801acf6 <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 801ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ac4e:	d301      	bcc.n	801ac54 <ip4addr_aton+0x1c8>
      return 0;
 801ac50:	2300      	movs	r3, #0
 801ac52:	e050      	b.n	801acf6 <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	2bff      	cmp	r3, #255	; 0xff
 801ac58:	d901      	bls.n	801ac5e <ip4addr_aton+0x1d2>
      return 0;
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	e04b      	b.n	801acf6 <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	061b      	lsls	r3, r3, #24
 801ac62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac64:	4313      	orrs	r3, r2
 801ac66:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801ac68:	e03b      	b.n	801ace2 <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 801ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ac70:	d301      	bcc.n	801ac76 <ip4addr_aton+0x1ea>
      return 0;
 801ac72:	2300      	movs	r3, #0
 801ac74:	e03f      	b.n	801acf6 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	2bff      	cmp	r3, #255	; 0xff
 801ac7a:	d802      	bhi.n	801ac82 <ip4addr_aton+0x1f6>
 801ac7c:	693b      	ldr	r3, [r7, #16]
 801ac7e:	2bff      	cmp	r3, #255	; 0xff
 801ac80:	d901      	bls.n	801ac86 <ip4addr_aton+0x1fa>
      return 0;
 801ac82:	2300      	movs	r3, #0
 801ac84:	e037      	b.n	801acf6 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	061a      	lsls	r2, r3, #24
 801ac8a:	693b      	ldr	r3, [r7, #16]
 801ac8c:	041b      	lsls	r3, r3, #16
 801ac8e:	4313      	orrs	r3, r2
 801ac90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac92:	4313      	orrs	r3, r2
 801ac94:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801ac96:	e024      	b.n	801ace2 <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 801ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac9a:	2bff      	cmp	r3, #255	; 0xff
 801ac9c:	d901      	bls.n	801aca2 <ip4addr_aton+0x216>
      return 0;
 801ac9e:	2300      	movs	r3, #0
 801aca0:	e029      	b.n	801acf6 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	2bff      	cmp	r3, #255	; 0xff
 801aca6:	d805      	bhi.n	801acb4 <ip4addr_aton+0x228>
 801aca8:	693b      	ldr	r3, [r7, #16]
 801acaa:	2bff      	cmp	r3, #255	; 0xff
 801acac:	d802      	bhi.n	801acb4 <ip4addr_aton+0x228>
 801acae:	697b      	ldr	r3, [r7, #20]
 801acb0:	2bff      	cmp	r3, #255	; 0xff
 801acb2:	d901      	bls.n	801acb8 <ip4addr_aton+0x22c>
      return 0;
 801acb4:	2300      	movs	r3, #0
 801acb6:	e01e      	b.n	801acf6 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	061a      	lsls	r2, r3, #24
 801acbc:	693b      	ldr	r3, [r7, #16]
 801acbe:	041b      	lsls	r3, r3, #16
 801acc0:	431a      	orrs	r2, r3
 801acc2:	697b      	ldr	r3, [r7, #20]
 801acc4:	021b      	lsls	r3, r3, #8
 801acc6:	4313      	orrs	r3, r2
 801acc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801acca:	4313      	orrs	r3, r2
 801accc:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801acce:	e008      	b.n	801ace2 <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 801acd0:	4b0b      	ldr	r3, [pc, #44]	; (801ad00 <ip4addr_aton+0x274>)
 801acd2:	f240 1203 	movw	r2, #259	; 0x103
 801acd6:	490b      	ldr	r1, [pc, #44]	; (801ad04 <ip4addr_aton+0x278>)
 801acd8:	480b      	ldr	r0, [pc, #44]	; (801ad08 <ip4addr_aton+0x27c>)
 801acda:	f00a fcc9 	bl	8025670 <iprintf>
    break;
 801acde:	e000      	b.n	801ace2 <ip4addr_aton+0x256>
    break;
 801ace0:	bf00      	nop
  }
  if (addr) {
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d005      	beq.n	801acf4 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801ace8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801acea:	f7fe fb43 	bl	8019374 <lwip_htonl>
 801acee:	4602      	mov	r2, r0
 801acf0:	683b      	ldr	r3, [r7, #0]
 801acf2:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801acf4:	2301      	movs	r3, #1
}
 801acf6:	4618      	mov	r0, r3
 801acf8:	3728      	adds	r7, #40	; 0x28
 801acfa:	46bd      	mov	sp, r7
 801acfc:	bd80      	pop	{r7, pc}
 801acfe:	bf00      	nop
 801ad00:	0802705c 	.word	0x0802705c
 801ad04:	08027098 	.word	0x08027098
 801ad08:	080270a4 	.word	0x080270a4

0801ad0c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b082      	sub	sp, #8
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801ad14:	2210      	movs	r2, #16
 801ad16:	4904      	ldr	r1, [pc, #16]	; (801ad28 <ip4addr_ntoa+0x1c>)
 801ad18:	6878      	ldr	r0, [r7, #4]
 801ad1a:	f000 f807 	bl	801ad2c <ip4addr_ntoa_r>
 801ad1e:	4603      	mov	r3, r0
}
 801ad20:	4618      	mov	r0, r3
 801ad22:	3708      	adds	r7, #8
 801ad24:	46bd      	mov	sp, r7
 801ad26:	bd80      	pop	{r7, pc}
 801ad28:	2000408c 	.word	0x2000408c

0801ad2c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801ad2c:	b480      	push	{r7}
 801ad2e:	b08d      	sub	sp, #52	; 0x34
 801ad30:	af00      	add	r7, sp, #0
 801ad32:	60f8      	str	r0, [r7, #12]
 801ad34:	60b9      	str	r1, [r7, #8]
 801ad36:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801ad38:	2300      	movs	r3, #0
 801ad3a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801ad42:	68bb      	ldr	r3, [r7, #8]
 801ad44:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801ad46:	f107 0318 	add.w	r3, r7, #24
 801ad4a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801ad4c:	2300      	movs	r3, #0
 801ad4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ad52:	e059      	b.n	801ae08 <ip4addr_ntoa_r+0xdc>
    i = 0;
 801ad54:	2300      	movs	r3, #0
 801ad56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801ad5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad5c:	781a      	ldrb	r2, [r3, #0]
 801ad5e:	4b33      	ldr	r3, [pc, #204]	; (801ae2c <ip4addr_ntoa_r+0x100>)
 801ad60:	fba3 1302 	umull	r1, r3, r3, r2
 801ad64:	08d9      	lsrs	r1, r3, #3
 801ad66:	460b      	mov	r3, r1
 801ad68:	009b      	lsls	r3, r3, #2
 801ad6a:	440b      	add	r3, r1
 801ad6c:	005b      	lsls	r3, r3, #1
 801ad6e:	1ad3      	subs	r3, r2, r3
 801ad70:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801ad72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad74:	781b      	ldrb	r3, [r3, #0]
 801ad76:	4a2d      	ldr	r2, [pc, #180]	; (801ae2c <ip4addr_ntoa_r+0x100>)
 801ad78:	fba2 2303 	umull	r2, r3, r2, r3
 801ad7c:	08db      	lsrs	r3, r3, #3
 801ad7e:	b2da      	uxtb	r2, r3
 801ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad82:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801ad84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ad88:	1c5a      	adds	r2, r3, #1
 801ad8a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801ad8e:	4619      	mov	r1, r3
 801ad90:	7ffb      	ldrb	r3, [r7, #31]
 801ad92:	3330      	adds	r3, #48	; 0x30
 801ad94:	b2da      	uxtb	r2, r3
 801ad96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ad9a:	440b      	add	r3, r1
 801ad9c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ada2:	781b      	ldrb	r3, [r3, #0]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d1d8      	bne.n	801ad5a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801ada8:	e012      	b.n	801add0 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801adaa:	6a3b      	ldr	r3, [r7, #32]
 801adac:	1c5a      	adds	r2, r3, #1
 801adae:	623a      	str	r2, [r7, #32]
 801adb0:	687a      	ldr	r2, [r7, #4]
 801adb2:	4293      	cmp	r3, r2
 801adb4:	db01      	blt.n	801adba <ip4addr_ntoa_r+0x8e>
        return NULL;
 801adb6:	2300      	movs	r3, #0
 801adb8:	e031      	b.n	801ae1e <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adbc:	1c5a      	adds	r2, r3, #1
 801adbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 801adc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801adc4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801adc8:	440a      	add	r2, r1
 801adca:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801adce:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801add0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801add4:	1e5a      	subs	r2, r3, #1
 801add6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801adda:	2b00      	cmp	r3, #0
 801addc:	d1e5      	bne.n	801adaa <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801adde:	6a3b      	ldr	r3, [r7, #32]
 801ade0:	1c5a      	adds	r2, r3, #1
 801ade2:	623a      	str	r2, [r7, #32]
 801ade4:	687a      	ldr	r2, [r7, #4]
 801ade6:	4293      	cmp	r3, r2
 801ade8:	db01      	blt.n	801adee <ip4addr_ntoa_r+0xc2>
      return NULL;
 801adea:	2300      	movs	r3, #0
 801adec:	e017      	b.n	801ae1e <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adf0:	1c5a      	adds	r2, r3, #1
 801adf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801adf4:	222e      	movs	r2, #46	; 0x2e
 801adf6:	701a      	strb	r2, [r3, #0]
    ap++;
 801adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adfa:	3301      	adds	r3, #1
 801adfc:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801adfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ae02:	3301      	adds	r3, #1
 801ae04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ae08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ae0c:	2b03      	cmp	r3, #3
 801ae0e:	d9a1      	bls.n	801ad54 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae12:	3b01      	subs	r3, #1
 801ae14:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae18:	2200      	movs	r2, #0
 801ae1a:	701a      	strb	r2, [r3, #0]
  return buf;
 801ae1c:	68bb      	ldr	r3, [r7, #8]
}
 801ae1e:	4618      	mov	r0, r3
 801ae20:	3734      	adds	r7, #52	; 0x34
 801ae22:	46bd      	mov	sp, r7
 801ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae28:	4770      	bx	lr
 801ae2a:	bf00      	nop
 801ae2c:	cccccccd 	.word	0xcccccccd

0801ae30 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ae30:	b580      	push	{r7, lr}
 801ae32:	b084      	sub	sp, #16
 801ae34:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ae36:	2300      	movs	r3, #0
 801ae38:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ae3a:	4b12      	ldr	r3, [pc, #72]	; (801ae84 <ip_reass_tmr+0x54>)
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ae40:	e018      	b.n	801ae74 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	7fdb      	ldrb	r3, [r3, #31]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d00b      	beq.n	801ae62 <ip_reass_tmr+0x32>
      r->timer--;
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	7fdb      	ldrb	r3, [r3, #31]
 801ae4e:	3b01      	subs	r3, #1
 801ae50:	b2da      	uxtb	r2, r3
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	60fb      	str	r3, [r7, #12]
 801ae60:	e008      	b.n	801ae74 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ae66:	68fb      	ldr	r3, [r7, #12]
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ae6c:	68b9      	ldr	r1, [r7, #8]
 801ae6e:	6878      	ldr	r0, [r7, #4]
 801ae70:	f000 f80a 	bl	801ae88 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d1e3      	bne.n	801ae42 <ip_reass_tmr+0x12>
     }
   }
}
 801ae7a:	bf00      	nop
 801ae7c:	3710      	adds	r7, #16
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}
 801ae82:	bf00      	nop
 801ae84:	2000409c 	.word	0x2000409c

0801ae88 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	b088      	sub	sp, #32
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	6078      	str	r0, [r7, #4]
 801ae90:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ae92:	2300      	movs	r3, #0
 801ae94:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ae96:	683a      	ldr	r2, [r7, #0]
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	429a      	cmp	r2, r3
 801ae9c:	d105      	bne.n	801aeaa <ip_reass_free_complete_datagram+0x22>
 801ae9e:	4b45      	ldr	r3, [pc, #276]	; (801afb4 <ip_reass_free_complete_datagram+0x12c>)
 801aea0:	22ab      	movs	r2, #171	; 0xab
 801aea2:	4945      	ldr	r1, [pc, #276]	; (801afb8 <ip_reass_free_complete_datagram+0x130>)
 801aea4:	4845      	ldr	r0, [pc, #276]	; (801afbc <ip_reass_free_complete_datagram+0x134>)
 801aea6:	f00a fbe3 	bl	8025670 <iprintf>
  if (prev != NULL) {
 801aeaa:	683b      	ldr	r3, [r7, #0]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d00a      	beq.n	801aec6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801aeb0:	683b      	ldr	r3, [r7, #0]
 801aeb2:	681a      	ldr	r2, [r3, #0]
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	429a      	cmp	r2, r3
 801aeb8:	d005      	beq.n	801aec6 <ip_reass_free_complete_datagram+0x3e>
 801aeba:	4b3e      	ldr	r3, [pc, #248]	; (801afb4 <ip_reass_free_complete_datagram+0x12c>)
 801aebc:	22ad      	movs	r2, #173	; 0xad
 801aebe:	4940      	ldr	r1, [pc, #256]	; (801afc0 <ip_reass_free_complete_datagram+0x138>)
 801aec0:	483e      	ldr	r0, [pc, #248]	; (801afbc <ip_reass_free_complete_datagram+0x134>)
 801aec2:	f00a fbd5 	bl	8025670 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	685b      	ldr	r3, [r3, #4]
 801aeca:	685b      	ldr	r3, [r3, #4]
 801aecc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801aece:	697b      	ldr	r3, [r7, #20]
 801aed0:	889b      	ldrh	r3, [r3, #4]
 801aed2:	b29b      	uxth	r3, r3
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d12a      	bne.n	801af2e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	685b      	ldr	r3, [r3, #4]
 801aedc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801aede:	697b      	ldr	r3, [r7, #20]
 801aee0:	681a      	ldr	r2, [r3, #0]
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801aee6:	69bb      	ldr	r3, [r7, #24]
 801aee8:	6858      	ldr	r0, [r3, #4]
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	3308      	adds	r3, #8
 801aeee:	2214      	movs	r2, #20
 801aef0:	4619      	mov	r1, r3
 801aef2:	f00b f870 	bl	8025fd6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801aef6:	2101      	movs	r1, #1
 801aef8:	69b8      	ldr	r0, [r7, #24]
 801aefa:	f7ff fa97 	bl	801a42c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801aefe:	69b8      	ldr	r0, [r7, #24]
 801af00:	f001 ff54 	bl	801cdac <pbuf_clen>
 801af04:	4603      	mov	r3, r0
 801af06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801af08:	8bfa      	ldrh	r2, [r7, #30]
 801af0a:	8a7b      	ldrh	r3, [r7, #18]
 801af0c:	4413      	add	r3, r2
 801af0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af12:	db05      	blt.n	801af20 <ip_reass_free_complete_datagram+0x98>
 801af14:	4b27      	ldr	r3, [pc, #156]	; (801afb4 <ip_reass_free_complete_datagram+0x12c>)
 801af16:	22bc      	movs	r2, #188	; 0xbc
 801af18:	492a      	ldr	r1, [pc, #168]	; (801afc4 <ip_reass_free_complete_datagram+0x13c>)
 801af1a:	4828      	ldr	r0, [pc, #160]	; (801afbc <ip_reass_free_complete_datagram+0x134>)
 801af1c:	f00a fba8 	bl	8025670 <iprintf>
    pbufs_freed += clen;
 801af20:	8bfa      	ldrh	r2, [r7, #30]
 801af22:	8a7b      	ldrh	r3, [r7, #18]
 801af24:	4413      	add	r3, r2
 801af26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801af28:	69b8      	ldr	r0, [r7, #24]
 801af2a:	f001 fea5 	bl	801cc78 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	685b      	ldr	r3, [r3, #4]
 801af32:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801af34:	e01f      	b.n	801af76 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801af36:	69bb      	ldr	r3, [r7, #24]
 801af38:	685b      	ldr	r3, [r3, #4]
 801af3a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801af3c:	69bb      	ldr	r3, [r7, #24]
 801af3e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801af40:	697b      	ldr	r3, [r7, #20]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801af46:	68f8      	ldr	r0, [r7, #12]
 801af48:	f001 ff30 	bl	801cdac <pbuf_clen>
 801af4c:	4603      	mov	r3, r0
 801af4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801af50:	8bfa      	ldrh	r2, [r7, #30]
 801af52:	8a7b      	ldrh	r3, [r7, #18]
 801af54:	4413      	add	r3, r2
 801af56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af5a:	db05      	blt.n	801af68 <ip_reass_free_complete_datagram+0xe0>
 801af5c:	4b15      	ldr	r3, [pc, #84]	; (801afb4 <ip_reass_free_complete_datagram+0x12c>)
 801af5e:	22cc      	movs	r2, #204	; 0xcc
 801af60:	4918      	ldr	r1, [pc, #96]	; (801afc4 <ip_reass_free_complete_datagram+0x13c>)
 801af62:	4816      	ldr	r0, [pc, #88]	; (801afbc <ip_reass_free_complete_datagram+0x134>)
 801af64:	f00a fb84 	bl	8025670 <iprintf>
    pbufs_freed += clen;
 801af68:	8bfa      	ldrh	r2, [r7, #30]
 801af6a:	8a7b      	ldrh	r3, [r7, #18]
 801af6c:	4413      	add	r3, r2
 801af6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801af70:	68f8      	ldr	r0, [r7, #12]
 801af72:	f001 fe81 	bl	801cc78 <pbuf_free>
  while (p != NULL) {
 801af76:	69bb      	ldr	r3, [r7, #24]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d1dc      	bne.n	801af36 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801af7c:	6839      	ldr	r1, [r7, #0]
 801af7e:	6878      	ldr	r0, [r7, #4]
 801af80:	f000 f8c2 	bl	801b108 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801af84:	4b10      	ldr	r3, [pc, #64]	; (801afc8 <ip_reass_free_complete_datagram+0x140>)
 801af86:	881b      	ldrh	r3, [r3, #0]
 801af88:	8bfa      	ldrh	r2, [r7, #30]
 801af8a:	429a      	cmp	r2, r3
 801af8c:	d905      	bls.n	801af9a <ip_reass_free_complete_datagram+0x112>
 801af8e:	4b09      	ldr	r3, [pc, #36]	; (801afb4 <ip_reass_free_complete_datagram+0x12c>)
 801af90:	22d2      	movs	r2, #210	; 0xd2
 801af92:	490e      	ldr	r1, [pc, #56]	; (801afcc <ip_reass_free_complete_datagram+0x144>)
 801af94:	4809      	ldr	r0, [pc, #36]	; (801afbc <ip_reass_free_complete_datagram+0x134>)
 801af96:	f00a fb6b 	bl	8025670 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801af9a:	4b0b      	ldr	r3, [pc, #44]	; (801afc8 <ip_reass_free_complete_datagram+0x140>)
 801af9c:	881a      	ldrh	r2, [r3, #0]
 801af9e:	8bfb      	ldrh	r3, [r7, #30]
 801afa0:	1ad3      	subs	r3, r2, r3
 801afa2:	b29a      	uxth	r2, r3
 801afa4:	4b08      	ldr	r3, [pc, #32]	; (801afc8 <ip_reass_free_complete_datagram+0x140>)
 801afa6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801afa8:	8bfb      	ldrh	r3, [r7, #30]
}
 801afaa:	4618      	mov	r0, r3
 801afac:	3720      	adds	r7, #32
 801afae:	46bd      	mov	sp, r7
 801afb0:	bd80      	pop	{r7, pc}
 801afb2:	bf00      	nop
 801afb4:	080270cc 	.word	0x080270cc
 801afb8:	08027108 	.word	0x08027108
 801afbc:	08027114 	.word	0x08027114
 801afc0:	0802713c 	.word	0x0802713c
 801afc4:	08027150 	.word	0x08027150
 801afc8:	200040a0 	.word	0x200040a0
 801afcc:	08027170 	.word	0x08027170

0801afd0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b08a      	sub	sp, #40	; 0x28
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
 801afd8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801afda:	2300      	movs	r3, #0
 801afdc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801afde:	2300      	movs	r3, #0
 801afe0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801afe2:	2300      	movs	r3, #0
 801afe4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801afe6:	2300      	movs	r3, #0
 801afe8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801afea:	2300      	movs	r3, #0
 801afec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801afee:	4b28      	ldr	r3, [pc, #160]	; (801b090 <ip_reass_remove_oldest_datagram+0xc0>)
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801aff4:	e030      	b.n	801b058 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aff8:	695a      	ldr	r2, [r3, #20]
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	68db      	ldr	r3, [r3, #12]
 801affe:	429a      	cmp	r2, r3
 801b000:	d10c      	bne.n	801b01c <ip_reass_remove_oldest_datagram+0x4c>
 801b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b004:	699a      	ldr	r2, [r3, #24]
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	691b      	ldr	r3, [r3, #16]
 801b00a:	429a      	cmp	r2, r3
 801b00c:	d106      	bne.n	801b01c <ip_reass_remove_oldest_datagram+0x4c>
 801b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b010:	899a      	ldrh	r2, [r3, #12]
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	889b      	ldrh	r3, [r3, #4]
 801b016:	b29b      	uxth	r3, r3
 801b018:	429a      	cmp	r2, r3
 801b01a:	d014      	beq.n	801b046 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b01c:	693b      	ldr	r3, [r7, #16]
 801b01e:	3301      	adds	r3, #1
 801b020:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b022:	6a3b      	ldr	r3, [r7, #32]
 801b024:	2b00      	cmp	r3, #0
 801b026:	d104      	bne.n	801b032 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b02a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b02c:	69fb      	ldr	r3, [r7, #28]
 801b02e:	61bb      	str	r3, [r7, #24]
 801b030:	e009      	b.n	801b046 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b034:	7fda      	ldrb	r2, [r3, #31]
 801b036:	6a3b      	ldr	r3, [r7, #32]
 801b038:	7fdb      	ldrb	r3, [r3, #31]
 801b03a:	429a      	cmp	r2, r3
 801b03c:	d803      	bhi.n	801b046 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b040:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b042:	69fb      	ldr	r3, [r7, #28]
 801b044:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d001      	beq.n	801b052 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b050:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d1cb      	bne.n	801aff6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b05e:	6a3b      	ldr	r3, [r7, #32]
 801b060:	2b00      	cmp	r3, #0
 801b062:	d008      	beq.n	801b076 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b064:	69b9      	ldr	r1, [r7, #24]
 801b066:	6a38      	ldr	r0, [r7, #32]
 801b068:	f7ff ff0e 	bl	801ae88 <ip_reass_free_complete_datagram>
 801b06c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b06e:	697a      	ldr	r2, [r7, #20]
 801b070:	68fb      	ldr	r3, [r7, #12]
 801b072:	4413      	add	r3, r2
 801b074:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b076:	697a      	ldr	r2, [r7, #20]
 801b078:	683b      	ldr	r3, [r7, #0]
 801b07a:	429a      	cmp	r2, r3
 801b07c:	da02      	bge.n	801b084 <ip_reass_remove_oldest_datagram+0xb4>
 801b07e:	693b      	ldr	r3, [r7, #16]
 801b080:	2b01      	cmp	r3, #1
 801b082:	dcac      	bgt.n	801afde <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b084:	697b      	ldr	r3, [r7, #20]
}
 801b086:	4618      	mov	r0, r3
 801b088:	3728      	adds	r7, #40	; 0x28
 801b08a:	46bd      	mov	sp, r7
 801b08c:	bd80      	pop	{r7, pc}
 801b08e:	bf00      	nop
 801b090:	2000409c 	.word	0x2000409c

0801b094 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b094:	b580      	push	{r7, lr}
 801b096:	b084      	sub	sp, #16
 801b098:	af00      	add	r7, sp, #0
 801b09a:	6078      	str	r0, [r7, #4]
 801b09c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b09e:	2004      	movs	r0, #4
 801b0a0:	f001 f83e 	bl	801c120 <memp_malloc>
 801b0a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b0a6:	68fb      	ldr	r3, [r7, #12]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d110      	bne.n	801b0ce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b0ac:	6839      	ldr	r1, [r7, #0]
 801b0ae:	6878      	ldr	r0, [r7, #4]
 801b0b0:	f7ff ff8e 	bl	801afd0 <ip_reass_remove_oldest_datagram>
 801b0b4:	4602      	mov	r2, r0
 801b0b6:	683b      	ldr	r3, [r7, #0]
 801b0b8:	429a      	cmp	r2, r3
 801b0ba:	db03      	blt.n	801b0c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b0bc:	2004      	movs	r0, #4
 801b0be:	f001 f82f 	bl	801c120 <memp_malloc>
 801b0c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d101      	bne.n	801b0ce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	e016      	b.n	801b0fc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b0ce:	2220      	movs	r2, #32
 801b0d0:	2100      	movs	r1, #0
 801b0d2:	68f8      	ldr	r0, [r7, #12]
 801b0d4:	f00a ff8a 	bl	8025fec <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	2203      	movs	r2, #3
 801b0dc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b0de:	4b09      	ldr	r3, [pc, #36]	; (801b104 <ip_reass_enqueue_new_datagram+0x70>)
 801b0e0:	681a      	ldr	r2, [r3, #0]
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b0e6:	4a07      	ldr	r2, [pc, #28]	; (801b104 <ip_reass_enqueue_new_datagram+0x70>)
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	3308      	adds	r3, #8
 801b0f0:	2214      	movs	r2, #20
 801b0f2:	6879      	ldr	r1, [r7, #4]
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	f00a ff6e 	bl	8025fd6 <memcpy>
  return ipr;
 801b0fa:	68fb      	ldr	r3, [r7, #12]
}
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	3710      	adds	r7, #16
 801b100:	46bd      	mov	sp, r7
 801b102:	bd80      	pop	{r7, pc}
 801b104:	2000409c 	.word	0x2000409c

0801b108 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b082      	sub	sp, #8
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
 801b110:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b112:	4b10      	ldr	r3, [pc, #64]	; (801b154 <ip_reass_dequeue_datagram+0x4c>)
 801b114:	681a      	ldr	r2, [r3, #0]
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	429a      	cmp	r2, r3
 801b11a:	d104      	bne.n	801b126 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	4a0c      	ldr	r2, [pc, #48]	; (801b154 <ip_reass_dequeue_datagram+0x4c>)
 801b122:	6013      	str	r3, [r2, #0]
 801b124:	e00d      	b.n	801b142 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b126:	683b      	ldr	r3, [r7, #0]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d106      	bne.n	801b13a <ip_reass_dequeue_datagram+0x32>
 801b12c:	4b0a      	ldr	r3, [pc, #40]	; (801b158 <ip_reass_dequeue_datagram+0x50>)
 801b12e:	f240 1245 	movw	r2, #325	; 0x145
 801b132:	490a      	ldr	r1, [pc, #40]	; (801b15c <ip_reass_dequeue_datagram+0x54>)
 801b134:	480a      	ldr	r0, [pc, #40]	; (801b160 <ip_reass_dequeue_datagram+0x58>)
 801b136:	f00a fa9b 	bl	8025670 <iprintf>
    prev->next = ipr->next;
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	681a      	ldr	r2, [r3, #0]
 801b13e:	683b      	ldr	r3, [r7, #0]
 801b140:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b142:	6879      	ldr	r1, [r7, #4]
 801b144:	2004      	movs	r0, #4
 801b146:	f001 f83d 	bl	801c1c4 <memp_free>
}
 801b14a:	bf00      	nop
 801b14c:	3708      	adds	r7, #8
 801b14e:	46bd      	mov	sp, r7
 801b150:	bd80      	pop	{r7, pc}
 801b152:	bf00      	nop
 801b154:	2000409c 	.word	0x2000409c
 801b158:	080270cc 	.word	0x080270cc
 801b15c:	0802718c 	.word	0x0802718c
 801b160:	08027114 	.word	0x08027114

0801b164 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b164:	b580      	push	{r7, lr}
 801b166:	b08c      	sub	sp, #48	; 0x30
 801b168:	af00      	add	r7, sp, #0
 801b16a:	60f8      	str	r0, [r7, #12]
 801b16c:	60b9      	str	r1, [r7, #8]
 801b16e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801b170:	2300      	movs	r3, #0
 801b172:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b174:	2301      	movs	r3, #1
 801b176:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 801b178:	68bb      	ldr	r3, [r7, #8]
 801b17a:	685b      	ldr	r3, [r3, #4]
 801b17c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801b17e:	69fb      	ldr	r3, [r7, #28]
 801b180:	885b      	ldrh	r3, [r3, #2]
 801b182:	b29b      	uxth	r3, r3
 801b184:	4618      	mov	r0, r3
 801b186:	f7fe f8e7 	bl	8019358 <lwip_htons>
 801b18a:	4603      	mov	r3, r0
 801b18c:	461a      	mov	r2, r3
 801b18e:	69fb      	ldr	r3, [r7, #28]
 801b190:	781b      	ldrb	r3, [r3, #0]
 801b192:	b29b      	uxth	r3, r3
 801b194:	f003 030f 	and.w	r3, r3, #15
 801b198:	b29b      	uxth	r3, r3
 801b19a:	009b      	lsls	r3, r3, #2
 801b19c:	b29b      	uxth	r3, r3
 801b19e:	1ad3      	subs	r3, r2, r3
 801b1a0:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801b1a2:	69fb      	ldr	r3, [r7, #28]
 801b1a4:	88db      	ldrh	r3, [r3, #6]
 801b1a6:	b29b      	uxth	r3, r3
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	f7fe f8d5 	bl	8019358 <lwip_htons>
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b1b4:	b29b      	uxth	r3, r3
 801b1b6:	00db      	lsls	r3, r3, #3
 801b1b8:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801b1ba:	68bb      	ldr	r3, [r7, #8]
 801b1bc:	685b      	ldr	r3, [r3, #4]
 801b1be:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801b1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1c2:	2200      	movs	r2, #0
 801b1c4:	701a      	strb	r2, [r3, #0]
 801b1c6:	2200      	movs	r2, #0
 801b1c8:	705a      	strb	r2, [r3, #1]
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	709a      	strb	r2, [r3, #2]
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1d4:	8b3a      	ldrh	r2, [r7, #24]
 801b1d6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801b1d8:	8b3a      	ldrh	r2, [r7, #24]
 801b1da:	8b7b      	ldrh	r3, [r7, #26]
 801b1dc:	4413      	add	r3, r2
 801b1de:	b29a      	uxth	r2, r3
 801b1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1e2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	685b      	ldr	r3, [r3, #4]
 801b1e8:	627b      	str	r3, [r7, #36]	; 0x24
 801b1ea:	e061      	b.n	801b2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1ee:	685b      	ldr	r3, [r3, #4]
 801b1f0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1f4:	889b      	ldrh	r3, [r3, #4]
 801b1f6:	b29a      	uxth	r2, r3
 801b1f8:	697b      	ldr	r3, [r7, #20]
 801b1fa:	889b      	ldrh	r3, [r3, #4]
 801b1fc:	b29b      	uxth	r3, r3
 801b1fe:	429a      	cmp	r2, r3
 801b200:	d232      	bcs.n	801b268 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b206:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d01f      	beq.n	801b24e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b210:	889b      	ldrh	r3, [r3, #4]
 801b212:	b29a      	uxth	r2, r3
 801b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b216:	88db      	ldrh	r3, [r3, #6]
 801b218:	b29b      	uxth	r3, r3
 801b21a:	429a      	cmp	r2, r3
 801b21c:	f0c0 80e8 	bcc.w	801b3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 801b220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b222:	88db      	ldrh	r3, [r3, #6]
 801b224:	b29a      	uxth	r2, r3
 801b226:	697b      	ldr	r3, [r7, #20]
 801b228:	889b      	ldrh	r3, [r3, #4]
 801b22a:	b29b      	uxth	r3, r3
 801b22c:	429a      	cmp	r2, r3
 801b22e:	f200 80df 	bhi.w	801b3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b234:	68ba      	ldr	r2, [r7, #8]
 801b236:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b23a:	88db      	ldrh	r3, [r3, #6]
 801b23c:	b29a      	uxth	r2, r3
 801b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b240:	889b      	ldrh	r3, [r3, #4]
 801b242:	b29b      	uxth	r3, r3
 801b244:	429a      	cmp	r2, r3
 801b246:	d037      	beq.n	801b2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b248:	2300      	movs	r3, #0
 801b24a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b24c:	e034      	b.n	801b2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801b24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b250:	88db      	ldrh	r3, [r3, #6]
 801b252:	b29a      	uxth	r2, r3
 801b254:	697b      	ldr	r3, [r7, #20]
 801b256:	889b      	ldrh	r3, [r3, #4]
 801b258:	b29b      	uxth	r3, r3
 801b25a:	429a      	cmp	r2, r3
 801b25c:	f200 80c3 	bhi.w	801b3e6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 801b260:	68fb      	ldr	r3, [r7, #12]
 801b262:	68ba      	ldr	r2, [r7, #8]
 801b264:	605a      	str	r2, [r3, #4]
      break;
 801b266:	e027      	b.n	801b2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801b268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b26a:	889b      	ldrh	r3, [r3, #4]
 801b26c:	b29a      	uxth	r2, r3
 801b26e:	697b      	ldr	r3, [r7, #20]
 801b270:	889b      	ldrh	r3, [r3, #4]
 801b272:	b29b      	uxth	r3, r3
 801b274:	429a      	cmp	r2, r3
 801b276:	f000 80b8 	beq.w	801b3ea <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b27c:	889b      	ldrh	r3, [r3, #4]
 801b27e:	b29a      	uxth	r2, r3
 801b280:	697b      	ldr	r3, [r7, #20]
 801b282:	88db      	ldrh	r3, [r3, #6]
 801b284:	b29b      	uxth	r3, r3
 801b286:	429a      	cmp	r2, r3
 801b288:	f0c0 80b1 	bcc.w	801b3ee <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d009      	beq.n	801b2a6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 801b292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b294:	88db      	ldrh	r3, [r3, #6]
 801b296:	b29a      	uxth	r2, r3
 801b298:	697b      	ldr	r3, [r7, #20]
 801b29a:	889b      	ldrh	r3, [r3, #4]
 801b29c:	b29b      	uxth	r3, r3
 801b29e:	429a      	cmp	r2, r3
 801b2a0:	d001      	beq.n	801b2a6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b2a6:	697b      	ldr	r3, [r7, #20]
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b2ac:	697b      	ldr	r3, [r7, #20]
 801b2ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d19a      	bne.n	801b1ec <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801b2b6:	e000      	b.n	801b2ba <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801b2b8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d12d      	bne.n	801b31c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 801b2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d01c      	beq.n	801b300 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2c8:	88db      	ldrh	r3, [r3, #6]
 801b2ca:	b29a      	uxth	r2, r3
 801b2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2ce:	889b      	ldrh	r3, [r3, #4]
 801b2d0:	b29b      	uxth	r3, r3
 801b2d2:	429a      	cmp	r2, r3
 801b2d4:	d906      	bls.n	801b2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801b2d6:	4b50      	ldr	r3, [pc, #320]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b2d8:	f240 12ab 	movw	r2, #427	; 0x1ab
 801b2dc:	494f      	ldr	r1, [pc, #316]	; (801b41c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801b2de:	4850      	ldr	r0, [pc, #320]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b2e0:	f00a f9c6 	bl	8025670 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2e6:	68ba      	ldr	r2, [r7, #8]
 801b2e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b2ec:	88db      	ldrh	r3, [r3, #6]
 801b2ee:	b29a      	uxth	r2, r3
 801b2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2f2:	889b      	ldrh	r3, [r3, #4]
 801b2f4:	b29b      	uxth	r3, r3
 801b2f6:	429a      	cmp	r2, r3
 801b2f8:	d010      	beq.n	801b31c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	623b      	str	r3, [r7, #32]
 801b2fe:	e00d      	b.n	801b31c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	685b      	ldr	r3, [r3, #4]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d006      	beq.n	801b316 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 801b308:	4b43      	ldr	r3, [pc, #268]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b30a:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801b30e:	4945      	ldr	r1, [pc, #276]	; (801b424 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b310:	4843      	ldr	r0, [pc, #268]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b312:	f00a f9ad 	bl	8025670 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b316:	68fb      	ldr	r3, [r7, #12]
 801b318:	68ba      	ldr	r2, [r7, #8]
 801b31a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d105      	bne.n	801b32e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	7f9b      	ldrb	r3, [r3, #30]
 801b326:	f003 0301 	and.w	r3, r3, #1
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d059      	beq.n	801b3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801b32e:	6a3b      	ldr	r3, [r7, #32]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d04f      	beq.n	801b3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	685b      	ldr	r3, [r3, #4]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d006      	beq.n	801b34a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	685b      	ldr	r3, [r3, #4]
 801b340:	685b      	ldr	r3, [r3, #4]
 801b342:	889b      	ldrh	r3, [r3, #4]
 801b344:	b29b      	uxth	r3, r3
 801b346:	2b00      	cmp	r3, #0
 801b348:	d002      	beq.n	801b350 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b34a:	2300      	movs	r3, #0
 801b34c:	623b      	str	r3, [r7, #32]
 801b34e:	e041      	b.n	801b3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b352:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b35a:	e012      	b.n	801b382 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801b35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b35e:	685b      	ldr	r3, [r3, #4]
 801b360:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b364:	88db      	ldrh	r3, [r3, #6]
 801b366:	b29a      	uxth	r2, r3
 801b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b36a:	889b      	ldrh	r3, [r3, #4]
 801b36c:	b29b      	uxth	r3, r3
 801b36e:	429a      	cmp	r2, r3
 801b370:	d002      	beq.n	801b378 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801b372:	2300      	movs	r3, #0
 801b374:	623b      	str	r3, [r7, #32]
            break;
 801b376:	e007      	b.n	801b388 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 801b378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b37a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b384:	2b00      	cmp	r3, #0
 801b386:	d1e9      	bne.n	801b35c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b388:	6a3b      	ldr	r3, [r7, #32]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d022      	beq.n	801b3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	685b      	ldr	r3, [r3, #4]
 801b392:	2b00      	cmp	r3, #0
 801b394:	d106      	bne.n	801b3a4 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801b396:	4b20      	ldr	r3, [pc, #128]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b398:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801b39c:	4922      	ldr	r1, [pc, #136]	; (801b428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b39e:	4820      	ldr	r0, [pc, #128]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b3a0:	f00a f966 	bl	8025670 <iprintf>
          LWIP_ASSERT("sanity check",
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	685b      	ldr	r3, [r3, #4]
 801b3a8:	685a      	ldr	r2, [r3, #4]
 801b3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3ac:	429a      	cmp	r2, r3
 801b3ae:	d106      	bne.n	801b3be <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 801b3b0:	4b19      	ldr	r3, [pc, #100]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b3b2:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801b3b6:	491c      	ldr	r1, [pc, #112]	; (801b428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b3b8:	4819      	ldr	r0, [pc, #100]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b3ba:	f00a f959 	bl	8025670 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d006      	beq.n	801b3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801b3c6:	4b14      	ldr	r3, [pc, #80]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b3c8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801b3cc:	4917      	ldr	r1, [pc, #92]	; (801b42c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b3ce:	4814      	ldr	r0, [pc, #80]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b3d0:	f00a f94e 	bl	8025670 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b3d4:	6a3b      	ldr	r3, [r7, #32]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	bf14      	ite	ne
 801b3da:	2301      	movne	r3, #1
 801b3dc:	2300      	moveq	r3, #0
 801b3de:	b2db      	uxtb	r3, r3
 801b3e0:	e016      	b.n	801b410 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	e014      	b.n	801b410 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 801b3e6:	bf00      	nop
 801b3e8:	e002      	b.n	801b3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 801b3ea:	bf00      	nop
 801b3ec:	e000      	b.n	801b3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 801b3ee:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801b3f0:	68b8      	ldr	r0, [r7, #8]
 801b3f2:	f001 fcdb 	bl	801cdac <pbuf_clen>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	461a      	mov	r2, r3
 801b3fa:	4b0d      	ldr	r3, [pc, #52]	; (801b430 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b3fc:	881b      	ldrh	r3, [r3, #0]
 801b3fe:	1a9b      	subs	r3, r3, r2
 801b400:	b29a      	uxth	r2, r3
 801b402:	4b0b      	ldr	r3, [pc, #44]	; (801b430 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b404:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801b406:	68b8      	ldr	r0, [r7, #8]
 801b408:	f001 fc36 	bl	801cc78 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b40c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 801b410:	4618      	mov	r0, r3
 801b412:	3730      	adds	r7, #48	; 0x30
 801b414:	46bd      	mov	sp, r7
 801b416:	bd80      	pop	{r7, pc}
 801b418:	080270cc 	.word	0x080270cc
 801b41c:	080271a8 	.word	0x080271a8
 801b420:	08027114 	.word	0x08027114
 801b424:	080271c8 	.word	0x080271c8
 801b428:	08027200 	.word	0x08027200
 801b42c:	08027210 	.word	0x08027210
 801b430:	200040a0 	.word	0x200040a0

0801b434 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b434:	b580      	push	{r7, lr}
 801b436:	b08e      	sub	sp, #56	; 0x38
 801b438:	af00      	add	r7, sp, #0
 801b43a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	685b      	ldr	r3, [r3, #4]
 801b440:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b444:	781b      	ldrb	r3, [r3, #0]
 801b446:	f003 030f 	and.w	r3, r3, #15
 801b44a:	009b      	lsls	r3, r3, #2
 801b44c:	2b14      	cmp	r3, #20
 801b44e:	f040 8131 	bne.w	801b6b4 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b454:	88db      	ldrh	r3, [r3, #6]
 801b456:	b29b      	uxth	r3, r3
 801b458:	4618      	mov	r0, r3
 801b45a:	f7fd ff7d 	bl	8019358 <lwip_htons>
 801b45e:	4603      	mov	r3, r0
 801b460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b464:	b29b      	uxth	r3, r3
 801b466:	00db      	lsls	r3, r3, #3
 801b468:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801b46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b46c:	885b      	ldrh	r3, [r3, #2]
 801b46e:	b29b      	uxth	r3, r3
 801b470:	4618      	mov	r0, r3
 801b472:	f7fd ff71 	bl	8019358 <lwip_htons>
 801b476:	4603      	mov	r3, r0
 801b478:	461a      	mov	r2, r3
 801b47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b47c:	781b      	ldrb	r3, [r3, #0]
 801b47e:	b29b      	uxth	r3, r3
 801b480:	f003 030f 	and.w	r3, r3, #15
 801b484:	b29b      	uxth	r3, r3
 801b486:	009b      	lsls	r3, r3, #2
 801b488:	b29b      	uxth	r3, r3
 801b48a:	1ad3      	subs	r3, r2, r3
 801b48c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b48e:	6878      	ldr	r0, [r7, #4]
 801b490:	f001 fc8c 	bl	801cdac <pbuf_clen>
 801b494:	4603      	mov	r3, r0
 801b496:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b498:	4b8c      	ldr	r3, [pc, #560]	; (801b6cc <ip4_reass+0x298>)
 801b49a:	881b      	ldrh	r3, [r3, #0]
 801b49c:	461a      	mov	r2, r3
 801b49e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b4a0:	4413      	add	r3, r2
 801b4a2:	2b0a      	cmp	r3, #10
 801b4a4:	dd10      	ble.n	801b4c8 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b4a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b4a8:	4619      	mov	r1, r3
 801b4aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b4ac:	f7ff fd90 	bl	801afd0 <ip_reass_remove_oldest_datagram>
 801b4b0:	4603      	mov	r3, r0
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	f000 8101 	beq.w	801b6ba <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b4b8:	4b84      	ldr	r3, [pc, #528]	; (801b6cc <ip4_reass+0x298>)
 801b4ba:	881b      	ldrh	r3, [r3, #0]
 801b4bc:	461a      	mov	r2, r3
 801b4be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b4c0:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b4c2:	2b0a      	cmp	r3, #10
 801b4c4:	f300 80f9 	bgt.w	801b6ba <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b4c8:	4b81      	ldr	r3, [pc, #516]	; (801b6d0 <ip4_reass+0x29c>)
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	633b      	str	r3, [r7, #48]	; 0x30
 801b4ce:	e015      	b.n	801b4fc <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4d2:	695a      	ldr	r2, [r3, #20]
 801b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4d6:	68db      	ldr	r3, [r3, #12]
 801b4d8:	429a      	cmp	r2, r3
 801b4da:	d10c      	bne.n	801b4f6 <ip4_reass+0xc2>
 801b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4de:	699a      	ldr	r2, [r3, #24]
 801b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4e2:	691b      	ldr	r3, [r3, #16]
 801b4e4:	429a      	cmp	r2, r3
 801b4e6:	d106      	bne.n	801b4f6 <ip4_reass+0xc2>
 801b4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4ea:	899a      	ldrh	r2, [r3, #12]
 801b4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4ee:	889b      	ldrh	r3, [r3, #4]
 801b4f0:	b29b      	uxth	r3, r3
 801b4f2:	429a      	cmp	r2, r3
 801b4f4:	d006      	beq.n	801b504 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	633b      	str	r3, [r7, #48]	; 0x30
 801b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d1e6      	bne.n	801b4d0 <ip4_reass+0x9c>
 801b502:	e000      	b.n	801b506 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b504:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d109      	bne.n	801b520 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b50c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b50e:	4619      	mov	r1, r3
 801b510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b512:	f7ff fdbf 	bl	801b094 <ip_reass_enqueue_new_datagram>
 801b516:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d11c      	bne.n	801b558 <ip4_reass+0x124>
      goto nullreturn;
 801b51e:	e0cc      	b.n	801b6ba <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b522:	88db      	ldrh	r3, [r3, #6]
 801b524:	b29b      	uxth	r3, r3
 801b526:	4618      	mov	r0, r3
 801b528:	f7fd ff16 	bl	8019358 <lwip_htons>
 801b52c:	4603      	mov	r3, r0
 801b52e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b532:	2b00      	cmp	r3, #0
 801b534:	d110      	bne.n	801b558 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b538:	89db      	ldrh	r3, [r3, #14]
 801b53a:	4618      	mov	r0, r3
 801b53c:	f7fd ff0c 	bl	8019358 <lwip_htons>
 801b540:	4603      	mov	r3, r0
 801b542:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b546:	2b00      	cmp	r3, #0
 801b548:	d006      	beq.n	801b558 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b54c:	3308      	adds	r3, #8
 801b54e:	2214      	movs	r2, #20
 801b550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b552:	4618      	mov	r0, r3
 801b554:	f00a fd3f 	bl	8025fd6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b55a:	88db      	ldrh	r3, [r3, #6]
 801b55c:	b29b      	uxth	r3, r3
 801b55e:	f003 0320 	and.w	r3, r3, #32
 801b562:	2b00      	cmp	r3, #0
 801b564:	bf0c      	ite	eq
 801b566:	2301      	moveq	r3, #1
 801b568:	2300      	movne	r3, #0
 801b56a:	b2db      	uxtb	r3, r3
 801b56c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b56e:	69fb      	ldr	r3, [r7, #28]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d00e      	beq.n	801b592 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801b574:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b578:	4413      	add	r3, r2
 801b57a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b57c:	8b7a      	ldrh	r2, [r7, #26]
 801b57e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b580:	429a      	cmp	r2, r3
 801b582:	f0c0 809a 	bcc.w	801b6ba <ip4_reass+0x286>
 801b586:	8b7b      	ldrh	r3, [r7, #26]
 801b588:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b58c:	4293      	cmp	r3, r2
 801b58e:	f200 8094 	bhi.w	801b6ba <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b592:	69fa      	ldr	r2, [r7, #28]
 801b594:	6879      	ldr	r1, [r7, #4]
 801b596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b598:	f7ff fde4 	bl	801b164 <ip_reass_chain_frag_into_datagram_and_validate>
 801b59c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b59e:	697b      	ldr	r3, [r7, #20]
 801b5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b5a4:	f000 8088 	beq.w	801b6b8 <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b5a8:	4b48      	ldr	r3, [pc, #288]	; (801b6cc <ip4_reass+0x298>)
 801b5aa:	881a      	ldrh	r2, [r3, #0]
 801b5ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b5ae:	4413      	add	r3, r2
 801b5b0:	b29a      	uxth	r2, r3
 801b5b2:	4b46      	ldr	r3, [pc, #280]	; (801b6cc <ip4_reass+0x298>)
 801b5b4:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b5b6:	69fb      	ldr	r3, [r7, #28]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d00d      	beq.n	801b5d8 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 801b5bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b5be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b5c0:	4413      	add	r3, r2
 801b5c2:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5c6:	8a7a      	ldrh	r2, [r7, #18]
 801b5c8:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5cc:	7f9b      	ldrb	r3, [r3, #30]
 801b5ce:	f043 0301 	orr.w	r3, r3, #1
 801b5d2:	b2da      	uxtb	r2, r3
 801b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5d6:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b5d8:	697b      	ldr	r3, [r7, #20]
 801b5da:	2b01      	cmp	r3, #1
 801b5dc:	d168      	bne.n	801b6b0 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5e0:	8b9b      	ldrh	r3, [r3, #28]
 801b5e2:	3314      	adds	r3, #20
 801b5e4:	b29a      	uxth	r2, r3
 801b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5e8:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801b5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5ec:	685b      	ldr	r3, [r3, #4]
 801b5ee:	685b      	ldr	r3, [r3, #4]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801b5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5f6:	685b      	ldr	r3, [r3, #4]
 801b5f8:	685b      	ldr	r3, [r3, #4]
 801b5fa:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b5fe:	3308      	adds	r3, #8
 801b600:	2214      	movs	r2, #20
 801b602:	4619      	mov	r1, r3
 801b604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b606:	f00a fce6 	bl	8025fd6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b60c:	8b9b      	ldrh	r3, [r3, #28]
 801b60e:	4618      	mov	r0, r3
 801b610:	f7fd fea2 	bl	8019358 <lwip_htons>
 801b614:	4603      	mov	r3, r0
 801b616:	461a      	mov	r2, r3
 801b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b61a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b61e:	2200      	movs	r2, #0
 801b620:	719a      	strb	r2, [r3, #6]
 801b622:	2200      	movs	r2, #0
 801b624:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b628:	2200      	movs	r2, #0
 801b62a:	729a      	strb	r2, [r3, #10]
 801b62c:	2200      	movs	r2, #0
 801b62e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b632:	685b      	ldr	r3, [r3, #4]
 801b634:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b636:	e00e      	b.n	801b656 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 801b638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b63a:	685b      	ldr	r3, [r3, #4]
 801b63c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801b63e:	f06f 0113 	mvn.w	r1, #19
 801b642:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b644:	f001 faf4 	bl	801cc30 <pbuf_header>
      pbuf_cat(p, r);
 801b648:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b64a:	6878      	ldr	r0, [r7, #4]
 801b64c:	f001 fbee 	bl	801ce2c <pbuf_cat>
      r = iprh->next_pbuf;
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d1ed      	bne.n	801b638 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b65c:	4b1c      	ldr	r3, [pc, #112]	; (801b6d0 <ip4_reass+0x29c>)
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b662:	429a      	cmp	r2, r3
 801b664:	d102      	bne.n	801b66c <ip4_reass+0x238>
      ipr_prev = NULL;
 801b666:	2300      	movs	r3, #0
 801b668:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b66a:	e010      	b.n	801b68e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b66c:	4b18      	ldr	r3, [pc, #96]	; (801b6d0 <ip4_reass+0x29c>)
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b672:	e007      	b.n	801b684 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801b674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b676:	681a      	ldr	r2, [r3, #0]
 801b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b67a:	429a      	cmp	r2, r3
 801b67c:	d006      	beq.n	801b68c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b680:	681b      	ldr	r3, [r3, #0]
 801b682:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b686:	2b00      	cmp	r3, #0
 801b688:	d1f4      	bne.n	801b674 <ip4_reass+0x240>
 801b68a:	e000      	b.n	801b68e <ip4_reass+0x25a>
          break;
 801b68c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b68e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b692:	f7ff fd39 	bl	801b108 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801b696:	6878      	ldr	r0, [r7, #4]
 801b698:	f001 fb88 	bl	801cdac <pbuf_clen>
 801b69c:	4603      	mov	r3, r0
 801b69e:	461a      	mov	r2, r3
 801b6a0:	4b0a      	ldr	r3, [pc, #40]	; (801b6cc <ip4_reass+0x298>)
 801b6a2:	881b      	ldrh	r3, [r3, #0]
 801b6a4:	1a9b      	subs	r3, r3, r2
 801b6a6:	b29a      	uxth	r2, r3
 801b6a8:	4b08      	ldr	r3, [pc, #32]	; (801b6cc <ip4_reass+0x298>)
 801b6aa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	e008      	b.n	801b6c2 <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	e006      	b.n	801b6c2 <ip4_reass+0x28e>
    goto nullreturn;
 801b6b4:	bf00      	nop
 801b6b6:	e000      	b.n	801b6ba <ip4_reass+0x286>
    goto nullreturn;
 801b6b8:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b6ba:	6878      	ldr	r0, [r7, #4]
 801b6bc:	f001 fadc 	bl	801cc78 <pbuf_free>
  return NULL;
 801b6c0:	2300      	movs	r3, #0
}
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	3738      	adds	r7, #56	; 0x38
 801b6c6:	46bd      	mov	sp, r7
 801b6c8:	bd80      	pop	{r7, pc}
 801b6ca:	bf00      	nop
 801b6cc:	200040a0 	.word	0x200040a0
 801b6d0:	2000409c 	.word	0x2000409c

0801b6d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801b6d8:	2005      	movs	r0, #5
 801b6da:	f000 fd21 	bl	801c120 <memp_malloc>
 801b6de:	4603      	mov	r3, r0
}
 801b6e0:	4618      	mov	r0, r3
 801b6e2:	bd80      	pop	{r7, pc}

0801b6e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801b6e4:	b580      	push	{r7, lr}
 801b6e6:	b082      	sub	sp, #8
 801b6e8:	af00      	add	r7, sp, #0
 801b6ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d106      	bne.n	801b700 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b6f2:	4b07      	ldr	r3, [pc, #28]	; (801b710 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b6f4:	f240 22ae 	movw	r2, #686	; 0x2ae
 801b6f8:	4906      	ldr	r1, [pc, #24]	; (801b714 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b6fa:	4807      	ldr	r0, [pc, #28]	; (801b718 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b6fc:	f009 ffb8 	bl	8025670 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b700:	6879      	ldr	r1, [r7, #4]
 801b702:	2005      	movs	r0, #5
 801b704:	f000 fd5e 	bl	801c1c4 <memp_free>
}
 801b708:	bf00      	nop
 801b70a:	3708      	adds	r7, #8
 801b70c:	46bd      	mov	sp, r7
 801b70e:	bd80      	pop	{r7, pc}
 801b710:	080270cc 	.word	0x080270cc
 801b714:	08027234 	.word	0x08027234
 801b718:	08027114 	.word	0x08027114

0801b71c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b71c:	b580      	push	{r7, lr}
 801b71e:	b084      	sub	sp, #16
 801b720:	af00      	add	r7, sp, #0
 801b722:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d106      	bne.n	801b73c <ipfrag_free_pbuf_custom+0x20>
 801b72e:	4b11      	ldr	r3, [pc, #68]	; (801b774 <ipfrag_free_pbuf_custom+0x58>)
 801b730:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801b734:	4910      	ldr	r1, [pc, #64]	; (801b778 <ipfrag_free_pbuf_custom+0x5c>)
 801b736:	4811      	ldr	r0, [pc, #68]	; (801b77c <ipfrag_free_pbuf_custom+0x60>)
 801b738:	f009 ff9a 	bl	8025670 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 801b73c:	68fa      	ldr	r2, [r7, #12]
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	429a      	cmp	r2, r3
 801b742:	d006      	beq.n	801b752 <ipfrag_free_pbuf_custom+0x36>
 801b744:	4b0b      	ldr	r3, [pc, #44]	; (801b774 <ipfrag_free_pbuf_custom+0x58>)
 801b746:	f240 22b9 	movw	r2, #697	; 0x2b9
 801b74a:	490d      	ldr	r1, [pc, #52]	; (801b780 <ipfrag_free_pbuf_custom+0x64>)
 801b74c:	480b      	ldr	r0, [pc, #44]	; (801b77c <ipfrag_free_pbuf_custom+0x60>)
 801b74e:	f009 ff8f 	bl	8025670 <iprintf>
  if (pcr->original != NULL) {
 801b752:	68fb      	ldr	r3, [r7, #12]
 801b754:	695b      	ldr	r3, [r3, #20]
 801b756:	2b00      	cmp	r3, #0
 801b758:	d004      	beq.n	801b764 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	695b      	ldr	r3, [r3, #20]
 801b75e:	4618      	mov	r0, r3
 801b760:	f001 fa8a 	bl	801cc78 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b764:	68f8      	ldr	r0, [r7, #12]
 801b766:	f7ff ffbd 	bl	801b6e4 <ip_frag_free_pbuf_custom_ref>
}
 801b76a:	bf00      	nop
 801b76c:	3710      	adds	r7, #16
 801b76e:	46bd      	mov	sp, r7
 801b770:	bd80      	pop	{r7, pc}
 801b772:	bf00      	nop
 801b774:	080270cc 	.word	0x080270cc
 801b778:	08027240 	.word	0x08027240
 801b77c:	08027114 	.word	0x08027114
 801b780:	0802724c 	.word	0x0802724c

0801b784 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b784:	b580      	push	{r7, lr}
 801b786:	b092      	sub	sp, #72	; 0x48
 801b788:	af02      	add	r7, sp, #8
 801b78a:	60f8      	str	r0, [r7, #12]
 801b78c:	60b9      	str	r1, [r7, #8]
 801b78e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b790:	2300      	movs	r3, #0
 801b792:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801b794:	68bb      	ldr	r3, [r7, #8]
 801b796:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b798:	3b14      	subs	r3, #20
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	da00      	bge.n	801b7a0 <ip4_frag+0x1c>
 801b79e:	3307      	adds	r3, #7
 801b7a0:	10db      	asrs	r3, r3, #3
 801b7a2:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b7a4:	2314      	movs	r3, #20
 801b7a6:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	685b      	ldr	r3, [r3, #4]
 801b7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801b7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7b0:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7b4:	781b      	ldrb	r3, [r3, #0]
 801b7b6:	f003 030f 	and.w	r3, r3, #15
 801b7ba:	009b      	lsls	r3, r3, #2
 801b7bc:	2b14      	cmp	r3, #20
 801b7be:	d009      	beq.n	801b7d4 <ip4_frag+0x50>
 801b7c0:	4b79      	ldr	r3, [pc, #484]	; (801b9a8 <ip4_frag+0x224>)
 801b7c2:	f240 22e1 	movw	r2, #737	; 0x2e1
 801b7c6:	4979      	ldr	r1, [pc, #484]	; (801b9ac <ip4_frag+0x228>)
 801b7c8:	4879      	ldr	r0, [pc, #484]	; (801b9b0 <ip4_frag+0x22c>)
 801b7ca:	f009 ff51 	bl	8025670 <iprintf>
 801b7ce:	f06f 0305 	mvn.w	r3, #5
 801b7d2:	e0e5      	b.n	801b9a0 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7d6:	88db      	ldrh	r3, [r3, #6]
 801b7d8:	b29b      	uxth	r3, r3
 801b7da:	4618      	mov	r0, r3
 801b7dc:	f7fd fdbc 	bl	8019358 <lwip_htons>
 801b7e0:	4603      	mov	r3, r0
 801b7e2:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 801b7e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b7e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b7ea:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801b7ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b7ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d009      	beq.n	801b80a <ip4_frag+0x86>
 801b7f6:	4b6c      	ldr	r3, [pc, #432]	; (801b9a8 <ip4_frag+0x224>)
 801b7f8:	f240 22e6 	movw	r2, #742	; 0x2e6
 801b7fc:	496d      	ldr	r1, [pc, #436]	; (801b9b4 <ip4_frag+0x230>)
 801b7fe:	486c      	ldr	r0, [pc, #432]	; (801b9b0 <ip4_frag+0x22c>)
 801b800:	f009 ff36 	bl	8025670 <iprintf>
 801b804:	f06f 0305 	mvn.w	r3, #5
 801b808:	e0ca      	b.n	801b9a0 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	891b      	ldrh	r3, [r3, #8]
 801b80e:	3b14      	subs	r3, #20
 801b810:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801b812:	e0bc      	b.n	801b98e <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801b814:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b816:	00da      	lsls	r2, r3, #3
 801b818:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b81a:	4293      	cmp	r3, r2
 801b81c:	bfa8      	it	ge
 801b81e:	4613      	movge	r3, r2
 801b820:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b822:	2200      	movs	r2, #0
 801b824:	2114      	movs	r1, #20
 801b826:	2002      	movs	r0, #2
 801b828:	f000 feb4 	bl	801c594 <pbuf_alloc>
 801b82c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801b82e:	6a3b      	ldr	r3, [r7, #32]
 801b830:	2b00      	cmp	r3, #0
 801b832:	f000 80b2 	beq.w	801b99a <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	895b      	ldrh	r3, [r3, #10]
 801b83a:	2b13      	cmp	r3, #19
 801b83c:	d806      	bhi.n	801b84c <ip4_frag+0xc8>
 801b83e:	4b5a      	ldr	r3, [pc, #360]	; (801b9a8 <ip4_frag+0x224>)
 801b840:	f240 3209 	movw	r2, #777	; 0x309
 801b844:	495c      	ldr	r1, [pc, #368]	; (801b9b8 <ip4_frag+0x234>)
 801b846:	485a      	ldr	r0, [pc, #360]	; (801b9b0 <ip4_frag+0x22c>)
 801b848:	f009 ff12 	bl	8025670 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b84c:	6a3b      	ldr	r3, [r7, #32]
 801b84e:	685b      	ldr	r3, [r3, #4]
 801b850:	2214      	movs	r2, #20
 801b852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b854:	4618      	mov	r0, r3
 801b856:	f00a fbbe 	bl	8025fd6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b85a:	6a3b      	ldr	r3, [r7, #32]
 801b85c:	685b      	ldr	r3, [r3, #4]
 801b85e:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801b860:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b862:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801b864:	e04f      	b.n	801b906 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	895a      	ldrh	r2, [r3, #10]
 801b86a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b86c:	1ad3      	subs	r3, r2, r3
 801b86e:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b870:	8bfa      	ldrh	r2, [r7, #30]
 801b872:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b874:	4293      	cmp	r3, r2
 801b876:	bf28      	it	cs
 801b878:	4613      	movcs	r3, r2
 801b87a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b87c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d105      	bne.n	801b88e <ip4_frag+0x10a>
        poff = 0;
 801b882:	2300      	movs	r3, #0
 801b884:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	60fb      	str	r3, [r7, #12]
        continue;
 801b88c:	e03b      	b.n	801b906 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b88e:	f7ff ff21 	bl	801b6d4 <ip_frag_alloc_pbuf_custom_ref>
 801b892:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b894:	69bb      	ldr	r3, [r7, #24]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d103      	bne.n	801b8a2 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801b89a:	6a38      	ldr	r0, [r7, #32]
 801b89c:	f001 f9ec 	bl	801cc78 <pbuf_free>
        goto memerr;
 801b8a0:	e07c      	b.n	801b99c <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b8a2:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b8a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b8aa:	4413      	add	r3, r2
 801b8ac:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801b8ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b8b0:	9201      	str	r2, [sp, #4]
 801b8b2:	9300      	str	r3, [sp, #0]
 801b8b4:	4603      	mov	r3, r0
 801b8b6:	2202      	movs	r2, #2
 801b8b8:	2004      	movs	r0, #4
 801b8ba:	f000 ffff 	bl	801c8bc <pbuf_alloced_custom>
 801b8be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b8c0:	697b      	ldr	r3, [r7, #20]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d106      	bne.n	801b8d4 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b8c6:	69b8      	ldr	r0, [r7, #24]
 801b8c8:	f7ff ff0c 	bl	801b6e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b8cc:	6a38      	ldr	r0, [r7, #32]
 801b8ce:	f001 f9d3 	bl	801cc78 <pbuf_free>
        goto memerr;
 801b8d2:	e063      	b.n	801b99c <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801b8d4:	68f8      	ldr	r0, [r7, #12]
 801b8d6:	f001 fa81 	bl	801cddc <pbuf_ref>
      pcr->original = p;
 801b8da:	69bb      	ldr	r3, [r7, #24]
 801b8dc:	68fa      	ldr	r2, [r7, #12]
 801b8de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b8e0:	69bb      	ldr	r3, [r7, #24]
 801b8e2:	4a36      	ldr	r2, [pc, #216]	; (801b9bc <ip4_frag+0x238>)
 801b8e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b8e6:	6979      	ldr	r1, [r7, #20]
 801b8e8:	6a38      	ldr	r0, [r7, #32]
 801b8ea:	f001 fa9f 	bl	801ce2c <pbuf_cat>
      left_to_copy -= newpbuflen;
 801b8ee:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801b8f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b8f2:	1ad3      	subs	r3, r2, r3
 801b8f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801b8f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d004      	beq.n	801b906 <ip4_frag+0x182>
        poff = 0;
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b906:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d1ac      	bne.n	801b866 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 801b90c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b90e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b910:	4413      	add	r3, r2
 801b912:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b914:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b916:	68bb      	ldr	r3, [r7, #8]
 801b918:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b91a:	3b14      	subs	r3, #20
 801b91c:	429a      	cmp	r2, r3
 801b91e:	bfd4      	ite	le
 801b920:	2301      	movle	r3, #1
 801b922:	2300      	movgt	r3, #0
 801b924:	b2db      	uxtb	r3, r3
 801b926:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b928:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b92a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b92e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801b930:	693b      	ldr	r3, [r7, #16]
 801b932:	2b00      	cmp	r3, #0
 801b934:	d103      	bne.n	801b93e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 801b936:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b938:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b93c:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b93e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b940:	4618      	mov	r0, r3
 801b942:	f7fd fd09 	bl	8019358 <lwip_htons>
 801b946:	4603      	mov	r3, r0
 801b948:	461a      	mov	r2, r3
 801b94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b94c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801b94e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b950:	3314      	adds	r3, #20
 801b952:	b29b      	uxth	r3, r3
 801b954:	4618      	mov	r0, r3
 801b956:	f7fd fcff 	bl	8019358 <lwip_htons>
 801b95a:	4603      	mov	r3, r0
 801b95c:	461a      	mov	r2, r3
 801b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b960:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b964:	2200      	movs	r2, #0
 801b966:	729a      	strb	r2, [r3, #10]
 801b968:	2200      	movs	r2, #0
 801b96a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	695b      	ldr	r3, [r3, #20]
 801b970:	687a      	ldr	r2, [r7, #4]
 801b972:	6a39      	ldr	r1, [r7, #32]
 801b974:	68b8      	ldr	r0, [r7, #8]
 801b976:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b978:	6a38      	ldr	r0, [r7, #32]
 801b97a:	f001 f97d 	bl	801cc78 <pbuf_free>
    left -= fragsize;
 801b97e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b982:	1ad3      	subs	r3, r2, r3
 801b984:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801b986:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801b988:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b98a:	4413      	add	r3, r2
 801b98c:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801b98e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b990:	2b00      	cmp	r3, #0
 801b992:	f47f af3f 	bne.w	801b814 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b996:	2300      	movs	r3, #0
 801b998:	e002      	b.n	801b9a0 <ip4_frag+0x21c>
      goto memerr;
 801b99a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b99c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b9a0:	4618      	mov	r0, r3
 801b9a2:	3740      	adds	r7, #64	; 0x40
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd80      	pop	{r7, pc}
 801b9a8:	080270cc 	.word	0x080270cc
 801b9ac:	08027258 	.word	0x08027258
 801b9b0:	08027114 	.word	0x08027114
 801b9b4:	08027280 	.word	0x08027280
 801b9b8:	0802729c 	.word	0x0802729c
 801b9bc:	0801b71d 	.word	0x0801b71d

0801b9c0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801b9c0:	b580      	push	{r7, lr}
 801b9c2:	b084      	sub	sp, #16
 801b9c4:	af00      	add	r7, sp, #0
 801b9c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b9c8:	4b40      	ldr	r3, [pc, #256]	; (801bacc <plug_holes+0x10c>)
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	687a      	ldr	r2, [r7, #4]
 801b9ce:	429a      	cmp	r2, r3
 801b9d0:	d206      	bcs.n	801b9e0 <plug_holes+0x20>
 801b9d2:	4b3f      	ldr	r3, [pc, #252]	; (801bad0 <plug_holes+0x110>)
 801b9d4:	f240 125d 	movw	r2, #349	; 0x15d
 801b9d8:	493e      	ldr	r1, [pc, #248]	; (801bad4 <plug_holes+0x114>)
 801b9da:	483f      	ldr	r0, [pc, #252]	; (801bad8 <plug_holes+0x118>)
 801b9dc:	f009 fe48 	bl	8025670 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b9e0:	4b3e      	ldr	r3, [pc, #248]	; (801badc <plug_holes+0x11c>)
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	687a      	ldr	r2, [r7, #4]
 801b9e6:	429a      	cmp	r2, r3
 801b9e8:	d306      	bcc.n	801b9f8 <plug_holes+0x38>
 801b9ea:	4b39      	ldr	r3, [pc, #228]	; (801bad0 <plug_holes+0x110>)
 801b9ec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801b9f0:	493b      	ldr	r1, [pc, #236]	; (801bae0 <plug_holes+0x120>)
 801b9f2:	4839      	ldr	r0, [pc, #228]	; (801bad8 <plug_holes+0x118>)
 801b9f4:	f009 fe3c 	bl	8025670 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	791b      	ldrb	r3, [r3, #4]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d006      	beq.n	801ba0e <plug_holes+0x4e>
 801ba00:	4b33      	ldr	r3, [pc, #204]	; (801bad0 <plug_holes+0x110>)
 801ba02:	f240 125f 	movw	r2, #351	; 0x15f
 801ba06:	4937      	ldr	r1, [pc, #220]	; (801bae4 <plug_holes+0x124>)
 801ba08:	4833      	ldr	r0, [pc, #204]	; (801bad8 <plug_holes+0x118>)
 801ba0a:	f009 fe31 	bl	8025670 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	881b      	ldrh	r3, [r3, #0]
 801ba12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801ba16:	d906      	bls.n	801ba26 <plug_holes+0x66>
 801ba18:	4b2d      	ldr	r3, [pc, #180]	; (801bad0 <plug_holes+0x110>)
 801ba1a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801ba1e:	4932      	ldr	r1, [pc, #200]	; (801bae8 <plug_holes+0x128>)
 801ba20:	482d      	ldr	r0, [pc, #180]	; (801bad8 <plug_holes+0x118>)
 801ba22:	f009 fe25 	bl	8025670 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 801ba26:	4b29      	ldr	r3, [pc, #164]	; (801bacc <plug_holes+0x10c>)
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	687a      	ldr	r2, [r7, #4]
 801ba2c:	8812      	ldrh	r2, [r2, #0]
 801ba2e:	4413      	add	r3, r2
 801ba30:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801ba32:	687a      	ldr	r2, [r7, #4]
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	429a      	cmp	r2, r3
 801ba38:	d01f      	beq.n	801ba7a <plug_holes+0xba>
 801ba3a:	68fb      	ldr	r3, [r7, #12]
 801ba3c:	791b      	ldrb	r3, [r3, #4]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d11b      	bne.n	801ba7a <plug_holes+0xba>
 801ba42:	4b26      	ldr	r3, [pc, #152]	; (801badc <plug_holes+0x11c>)
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	68fa      	ldr	r2, [r7, #12]
 801ba48:	429a      	cmp	r2, r3
 801ba4a:	d016      	beq.n	801ba7a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801ba4c:	4b27      	ldr	r3, [pc, #156]	; (801baec <plug_holes+0x12c>)
 801ba4e:	681a      	ldr	r2, [r3, #0]
 801ba50:	68fb      	ldr	r3, [r7, #12]
 801ba52:	429a      	cmp	r2, r3
 801ba54:	d102      	bne.n	801ba5c <plug_holes+0x9c>
      lfree = mem;
 801ba56:	4a25      	ldr	r2, [pc, #148]	; (801baec <plug_holes+0x12c>)
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	881a      	ldrh	r2, [r3, #0]
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 801ba64:	4b19      	ldr	r3, [pc, #100]	; (801bacc <plug_holes+0x10c>)
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	68fa      	ldr	r2, [r7, #12]
 801ba6a:	8812      	ldrh	r2, [r2, #0]
 801ba6c:	4413      	add	r3, r2
 801ba6e:	687a      	ldr	r2, [r7, #4]
 801ba70:	4916      	ldr	r1, [pc, #88]	; (801bacc <plug_holes+0x10c>)
 801ba72:	6809      	ldr	r1, [r1, #0]
 801ba74:	1a52      	subs	r2, r2, r1
 801ba76:	b292      	uxth	r2, r2
 801ba78:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 801ba7a:	4b14      	ldr	r3, [pc, #80]	; (801bacc <plug_holes+0x10c>)
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	687a      	ldr	r2, [r7, #4]
 801ba80:	8852      	ldrh	r2, [r2, #2]
 801ba82:	4413      	add	r3, r2
 801ba84:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801ba86:	68ba      	ldr	r2, [r7, #8]
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	429a      	cmp	r2, r3
 801ba8c:	d01a      	beq.n	801bac4 <plug_holes+0x104>
 801ba8e:	68bb      	ldr	r3, [r7, #8]
 801ba90:	791b      	ldrb	r3, [r3, #4]
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d116      	bne.n	801bac4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801ba96:	4b15      	ldr	r3, [pc, #84]	; (801baec <plug_holes+0x12c>)
 801ba98:	681a      	ldr	r2, [r3, #0]
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	429a      	cmp	r2, r3
 801ba9e:	d102      	bne.n	801baa6 <plug_holes+0xe6>
      lfree = pmem;
 801baa0:	4a12      	ldr	r2, [pc, #72]	; (801baec <plug_holes+0x12c>)
 801baa2:	68bb      	ldr	r3, [r7, #8]
 801baa4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	881a      	ldrh	r2, [r3, #0]
 801baaa:	68bb      	ldr	r3, [r7, #8]
 801baac:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 801baae:	4b07      	ldr	r3, [pc, #28]	; (801bacc <plug_holes+0x10c>)
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	687a      	ldr	r2, [r7, #4]
 801bab4:	8812      	ldrh	r2, [r2, #0]
 801bab6:	4413      	add	r3, r2
 801bab8:	68ba      	ldr	r2, [r7, #8]
 801baba:	4904      	ldr	r1, [pc, #16]	; (801bacc <plug_holes+0x10c>)
 801babc:	6809      	ldr	r1, [r1, #0]
 801babe:	1a52      	subs	r2, r2, r1
 801bac0:	b292      	uxth	r2, r2
 801bac2:	805a      	strh	r2, [r3, #2]
  }
}
 801bac4:	bf00      	nop
 801bac6:	3710      	adds	r7, #16
 801bac8:	46bd      	mov	sp, r7
 801baca:	bd80      	pop	{r7, pc}
 801bacc:	200040a4 	.word	0x200040a4
 801bad0:	080272bc 	.word	0x080272bc
 801bad4:	080272ec 	.word	0x080272ec
 801bad8:	08027304 	.word	0x08027304
 801badc:	200040a8 	.word	0x200040a8
 801bae0:	0802732c 	.word	0x0802732c
 801bae4:	08027348 	.word	0x08027348
 801bae8:	08027364 	.word	0x08027364
 801baec:	200040ac 	.word	0x200040ac

0801baf0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801baf0:	b580      	push	{r7, lr}
 801baf2:	b082      	sub	sp, #8
 801baf4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801baf6:	4b1e      	ldr	r3, [pc, #120]	; (801bb70 <mem_init+0x80>)
 801baf8:	3303      	adds	r3, #3
 801bafa:	f023 0303 	bic.w	r3, r3, #3
 801bafe:	461a      	mov	r2, r3
 801bb00:	4b1c      	ldr	r3, [pc, #112]	; (801bb74 <mem_init+0x84>)
 801bb02:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801bb04:	4b1b      	ldr	r3, [pc, #108]	; (801bb74 <mem_init+0x84>)
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801bb10:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	2200      	movs	r2, #0
 801bb16:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 801bb1e:	4b15      	ldr	r3, [pc, #84]	; (801bb74 <mem_init+0x84>)
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801bb26:	4a14      	ldr	r2, [pc, #80]	; (801bb78 <mem_init+0x88>)
 801bb28:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801bb2a:	4b13      	ldr	r3, [pc, #76]	; (801bb78 <mem_init+0x88>)
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	2201      	movs	r2, #1
 801bb30:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801bb32:	4b11      	ldr	r3, [pc, #68]	; (801bb78 <mem_init+0x88>)
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801bb3a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801bb3c:	4b0e      	ldr	r3, [pc, #56]	; (801bb78 <mem_init+0x88>)
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801bb44:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801bb46:	4b0b      	ldr	r3, [pc, #44]	; (801bb74 <mem_init+0x84>)
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	4a0c      	ldr	r2, [pc, #48]	; (801bb7c <mem_init+0x8c>)
 801bb4c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801bb4e:	480c      	ldr	r0, [pc, #48]	; (801bb80 <mem_init+0x90>)
 801bb50:	f007 fb76 	bl	8023240 <sys_mutex_new>
 801bb54:	4603      	mov	r3, r0
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d006      	beq.n	801bb68 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801bb5a:	4b0a      	ldr	r3, [pc, #40]	; (801bb84 <mem_init+0x94>)
 801bb5c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801bb60:	4909      	ldr	r1, [pc, #36]	; (801bb88 <mem_init+0x98>)
 801bb62:	480a      	ldr	r0, [pc, #40]	; (801bb8c <mem_init+0x9c>)
 801bb64:	f009 fd84 	bl	8025670 <iprintf>
  }
}
 801bb68:	bf00      	nop
 801bb6a:	3708      	adds	r7, #8
 801bb6c:	46bd      	mov	sp, r7
 801bb6e:	bd80      	pop	{r7, pc}
 801bb70:	20004614 	.word	0x20004614
 801bb74:	200040a4 	.word	0x200040a4
 801bb78:	200040a8 	.word	0x200040a8
 801bb7c:	200040ac 	.word	0x200040ac
 801bb80:	200040b0 	.word	0x200040b0
 801bb84:	080272bc 	.word	0x080272bc
 801bb88:	08027390 	.word	0x08027390
 801bb8c:	08027304 	.word	0x08027304

0801bb90 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801bb90:	b580      	push	{r7, lr}
 801bb92:	b084      	sub	sp, #16
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d050      	beq.n	801bc40 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	f003 0303 	and.w	r3, r3, #3
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d006      	beq.n	801bbb6 <mem_free+0x26>
 801bba8:	4b27      	ldr	r3, [pc, #156]	; (801bc48 <mem_free+0xb8>)
 801bbaa:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 801bbae:	4927      	ldr	r1, [pc, #156]	; (801bc4c <mem_free+0xbc>)
 801bbb0:	4827      	ldr	r0, [pc, #156]	; (801bc50 <mem_free+0xc0>)
 801bbb2:	f009 fd5d 	bl	8025670 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801bbb6:	4b27      	ldr	r3, [pc, #156]	; (801bc54 <mem_free+0xc4>)
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	687a      	ldr	r2, [r7, #4]
 801bbbc:	429a      	cmp	r2, r3
 801bbbe:	d304      	bcc.n	801bbca <mem_free+0x3a>
 801bbc0:	4b25      	ldr	r3, [pc, #148]	; (801bc58 <mem_free+0xc8>)
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	687a      	ldr	r2, [r7, #4]
 801bbc6:	429a      	cmp	r2, r3
 801bbc8:	d306      	bcc.n	801bbd8 <mem_free+0x48>
 801bbca:	4b1f      	ldr	r3, [pc, #124]	; (801bc48 <mem_free+0xb8>)
 801bbcc:	f240 12af 	movw	r2, #431	; 0x1af
 801bbd0:	4922      	ldr	r1, [pc, #136]	; (801bc5c <mem_free+0xcc>)
 801bbd2:	481f      	ldr	r0, [pc, #124]	; (801bc50 <mem_free+0xc0>)
 801bbd4:	f009 fd4c 	bl	8025670 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801bbd8:	4b1e      	ldr	r3, [pc, #120]	; (801bc54 <mem_free+0xc4>)
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	687a      	ldr	r2, [r7, #4]
 801bbde:	429a      	cmp	r2, r3
 801bbe0:	d304      	bcc.n	801bbec <mem_free+0x5c>
 801bbe2:	4b1d      	ldr	r3, [pc, #116]	; (801bc58 <mem_free+0xc8>)
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	687a      	ldr	r2, [r7, #4]
 801bbe8:	429a      	cmp	r2, r3
 801bbea:	d306      	bcc.n	801bbfa <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 801bbec:	f007 fb7c 	bl	80232e8 <sys_arch_protect>
 801bbf0:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 801bbf2:	68b8      	ldr	r0, [r7, #8]
 801bbf4:	f007 fb86 	bl	8023304 <sys_arch_unprotect>
    return;
 801bbf8:	e023      	b.n	801bc42 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801bbfa:	4819      	ldr	r0, [pc, #100]	; (801bc60 <mem_free+0xd0>)
 801bbfc:	f007 fb3a 	bl	8023274 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	3b08      	subs	r3, #8
 801bc04:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	791b      	ldrb	r3, [r3, #4]
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d106      	bne.n	801bc1c <mem_free+0x8c>
 801bc0e:	4b0e      	ldr	r3, [pc, #56]	; (801bc48 <mem_free+0xb8>)
 801bc10:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 801bc14:	4913      	ldr	r1, [pc, #76]	; (801bc64 <mem_free+0xd4>)
 801bc16:	480e      	ldr	r0, [pc, #56]	; (801bc50 <mem_free+0xc0>)
 801bc18:	f009 fd2a 	bl	8025670 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 801bc1c:	68fb      	ldr	r3, [r7, #12]
 801bc1e:	2200      	movs	r2, #0
 801bc20:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801bc22:	4b11      	ldr	r3, [pc, #68]	; (801bc68 <mem_free+0xd8>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	68fa      	ldr	r2, [r7, #12]
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	d202      	bcs.n	801bc32 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801bc2c:	4a0e      	ldr	r2, [pc, #56]	; (801bc68 <mem_free+0xd8>)
 801bc2e:	68fb      	ldr	r3, [r7, #12]
 801bc30:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801bc32:	68f8      	ldr	r0, [r7, #12]
 801bc34:	f7ff fec4 	bl	801b9c0 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801bc38:	4809      	ldr	r0, [pc, #36]	; (801bc60 <mem_free+0xd0>)
 801bc3a:	f007 fb2a 	bl	8023292 <sys_mutex_unlock>
 801bc3e:	e000      	b.n	801bc42 <mem_free+0xb2>
    return;
 801bc40:	bf00      	nop
}
 801bc42:	3710      	adds	r7, #16
 801bc44:	46bd      	mov	sp, r7
 801bc46:	bd80      	pop	{r7, pc}
 801bc48:	080272bc 	.word	0x080272bc
 801bc4c:	080273ac 	.word	0x080273ac
 801bc50:	08027304 	.word	0x08027304
 801bc54:	200040a4 	.word	0x200040a4
 801bc58:	200040a8 	.word	0x200040a8
 801bc5c:	080273d0 	.word	0x080273d0
 801bc60:	200040b0 	.word	0x200040b0
 801bc64:	080273e8 	.word	0x080273e8
 801bc68:	200040ac 	.word	0x200040ac

0801bc6c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 801bc6c:	b580      	push	{r7, lr}
 801bc6e:	b088      	sub	sp, #32
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	6078      	str	r0, [r7, #4]
 801bc74:	460b      	mov	r3, r1
 801bc76:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 801bc78:	887b      	ldrh	r3, [r7, #2]
 801bc7a:	3303      	adds	r3, #3
 801bc7c:	b29b      	uxth	r3, r3
 801bc7e:	f023 0303 	bic.w	r3, r3, #3
 801bc82:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 801bc84:	887b      	ldrh	r3, [r7, #2]
 801bc86:	2b0b      	cmp	r3, #11
 801bc88:	d801      	bhi.n	801bc8e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801bc8a:	230c      	movs	r3, #12
 801bc8c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 801bc8e:	887b      	ldrh	r3, [r7, #2]
 801bc90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bc94:	d901      	bls.n	801bc9a <mem_trim+0x2e>
    return NULL;
 801bc96:	2300      	movs	r3, #0
 801bc98:	e0bd      	b.n	801be16 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801bc9a:	4b61      	ldr	r3, [pc, #388]	; (801be20 <mem_trim+0x1b4>)
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	687a      	ldr	r2, [r7, #4]
 801bca0:	429a      	cmp	r2, r3
 801bca2:	d304      	bcc.n	801bcae <mem_trim+0x42>
 801bca4:	4b5f      	ldr	r3, [pc, #380]	; (801be24 <mem_trim+0x1b8>)
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	687a      	ldr	r2, [r7, #4]
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	d306      	bcc.n	801bcbc <mem_trim+0x50>
 801bcae:	4b5e      	ldr	r3, [pc, #376]	; (801be28 <mem_trim+0x1bc>)
 801bcb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801bcb4:	495d      	ldr	r1, [pc, #372]	; (801be2c <mem_trim+0x1c0>)
 801bcb6:	485e      	ldr	r0, [pc, #376]	; (801be30 <mem_trim+0x1c4>)
 801bcb8:	f009 fcda 	bl	8025670 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801bcbc:	4b58      	ldr	r3, [pc, #352]	; (801be20 <mem_trim+0x1b4>)
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	687a      	ldr	r2, [r7, #4]
 801bcc2:	429a      	cmp	r2, r3
 801bcc4:	d304      	bcc.n	801bcd0 <mem_trim+0x64>
 801bcc6:	4b57      	ldr	r3, [pc, #348]	; (801be24 <mem_trim+0x1b8>)
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	687a      	ldr	r2, [r7, #4]
 801bccc:	429a      	cmp	r2, r3
 801bcce:	d307      	bcc.n	801bce0 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 801bcd0:	f007 fb0a 	bl	80232e8 <sys_arch_protect>
 801bcd4:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 801bcd6:	68f8      	ldr	r0, [r7, #12]
 801bcd8:	f007 fb14 	bl	8023304 <sys_arch_unprotect>
    return rmem;
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	e09a      	b.n	801be16 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	3b08      	subs	r3, #8
 801bce4:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 801bce6:	69fb      	ldr	r3, [r7, #28]
 801bce8:	4a4d      	ldr	r2, [pc, #308]	; (801be20 <mem_trim+0x1b4>)
 801bcea:	6812      	ldr	r2, [r2, #0]
 801bcec:	1a9b      	subs	r3, r3, r2
 801bcee:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 801bcf0:	69fb      	ldr	r3, [r7, #28]
 801bcf2:	881a      	ldrh	r2, [r3, #0]
 801bcf4:	8b7b      	ldrh	r3, [r7, #26]
 801bcf6:	1ad3      	subs	r3, r2, r3
 801bcf8:	b29b      	uxth	r3, r3
 801bcfa:	3b08      	subs	r3, #8
 801bcfc:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801bcfe:	887a      	ldrh	r2, [r7, #2]
 801bd00:	8b3b      	ldrh	r3, [r7, #24]
 801bd02:	429a      	cmp	r2, r3
 801bd04:	d906      	bls.n	801bd14 <mem_trim+0xa8>
 801bd06:	4b48      	ldr	r3, [pc, #288]	; (801be28 <mem_trim+0x1bc>)
 801bd08:	f240 2206 	movw	r2, #518	; 0x206
 801bd0c:	4949      	ldr	r1, [pc, #292]	; (801be34 <mem_trim+0x1c8>)
 801bd0e:	4848      	ldr	r0, [pc, #288]	; (801be30 <mem_trim+0x1c4>)
 801bd10:	f009 fcae 	bl	8025670 <iprintf>
  if (newsize > size) {
 801bd14:	887a      	ldrh	r2, [r7, #2]
 801bd16:	8b3b      	ldrh	r3, [r7, #24]
 801bd18:	429a      	cmp	r2, r3
 801bd1a:	d901      	bls.n	801bd20 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 801bd1c:	2300      	movs	r3, #0
 801bd1e:	e07a      	b.n	801be16 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 801bd20:	887a      	ldrh	r2, [r7, #2]
 801bd22:	8b3b      	ldrh	r3, [r7, #24]
 801bd24:	429a      	cmp	r2, r3
 801bd26:	d101      	bne.n	801bd2c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	e074      	b.n	801be16 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801bd2c:	4842      	ldr	r0, [pc, #264]	; (801be38 <mem_trim+0x1cc>)
 801bd2e:	f007 faa1 	bl	8023274 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 801bd32:	4b3b      	ldr	r3, [pc, #236]	; (801be20 <mem_trim+0x1b4>)
 801bd34:	681b      	ldr	r3, [r3, #0]
 801bd36:	69fa      	ldr	r2, [r7, #28]
 801bd38:	8812      	ldrh	r2, [r2, #0]
 801bd3a:	4413      	add	r3, r2
 801bd3c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 801bd3e:	697b      	ldr	r3, [r7, #20]
 801bd40:	791b      	ldrb	r3, [r3, #4]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d131      	bne.n	801bdaa <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 801bd46:	697b      	ldr	r3, [r7, #20]
 801bd48:	881b      	ldrh	r3, [r3, #0]
 801bd4a:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801bd4c:	8b7a      	ldrh	r2, [r7, #26]
 801bd4e:	887b      	ldrh	r3, [r7, #2]
 801bd50:	4413      	add	r3, r2
 801bd52:	b29b      	uxth	r3, r3
 801bd54:	3308      	adds	r3, #8
 801bd56:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 801bd58:	4b38      	ldr	r3, [pc, #224]	; (801be3c <mem_trim+0x1d0>)
 801bd5a:	681a      	ldr	r2, [r3, #0]
 801bd5c:	697b      	ldr	r3, [r7, #20]
 801bd5e:	429a      	cmp	r2, r3
 801bd60:	d105      	bne.n	801bd6e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 801bd62:	4b2f      	ldr	r3, [pc, #188]	; (801be20 <mem_trim+0x1b4>)
 801bd64:	681a      	ldr	r2, [r3, #0]
 801bd66:	8a3b      	ldrh	r3, [r7, #16]
 801bd68:	4413      	add	r3, r2
 801bd6a:	4a34      	ldr	r2, [pc, #208]	; (801be3c <mem_trim+0x1d0>)
 801bd6c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801bd6e:	4b2c      	ldr	r3, [pc, #176]	; (801be20 <mem_trim+0x1b4>)
 801bd70:	681a      	ldr	r2, [r3, #0]
 801bd72:	8a3b      	ldrh	r3, [r7, #16]
 801bd74:	4413      	add	r3, r2
 801bd76:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 801bd78:	697b      	ldr	r3, [r7, #20]
 801bd7a:	2200      	movs	r2, #0
 801bd7c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801bd7e:	697b      	ldr	r3, [r7, #20]
 801bd80:	8a7a      	ldrh	r2, [r7, #18]
 801bd82:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801bd84:	697b      	ldr	r3, [r7, #20]
 801bd86:	8b7a      	ldrh	r2, [r7, #26]
 801bd88:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801bd8a:	69fb      	ldr	r3, [r7, #28]
 801bd8c:	8a3a      	ldrh	r2, [r7, #16]
 801bd8e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801bd90:	697b      	ldr	r3, [r7, #20]
 801bd92:	881b      	ldrh	r3, [r3, #0]
 801bd94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bd98:	d039      	beq.n	801be0e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801bd9a:	4b21      	ldr	r3, [pc, #132]	; (801be20 <mem_trim+0x1b4>)
 801bd9c:	681b      	ldr	r3, [r3, #0]
 801bd9e:	697a      	ldr	r2, [r7, #20]
 801bda0:	8812      	ldrh	r2, [r2, #0]
 801bda2:	4413      	add	r3, r2
 801bda4:	8a3a      	ldrh	r2, [r7, #16]
 801bda6:	805a      	strh	r2, [r3, #2]
 801bda8:	e031      	b.n	801be0e <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801bdaa:	887b      	ldrh	r3, [r7, #2]
 801bdac:	f103 0214 	add.w	r2, r3, #20
 801bdb0:	8b3b      	ldrh	r3, [r7, #24]
 801bdb2:	429a      	cmp	r2, r3
 801bdb4:	d82b      	bhi.n	801be0e <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801bdb6:	8b7a      	ldrh	r2, [r7, #26]
 801bdb8:	887b      	ldrh	r3, [r7, #2]
 801bdba:	4413      	add	r3, r2
 801bdbc:	b29b      	uxth	r3, r3
 801bdbe:	3308      	adds	r3, #8
 801bdc0:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801bdc2:	4b17      	ldr	r3, [pc, #92]	; (801be20 <mem_trim+0x1b4>)
 801bdc4:	681a      	ldr	r2, [r3, #0]
 801bdc6:	8a3b      	ldrh	r3, [r7, #16]
 801bdc8:	4413      	add	r3, r2
 801bdca:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 801bdcc:	4b1b      	ldr	r3, [pc, #108]	; (801be3c <mem_trim+0x1d0>)
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	697a      	ldr	r2, [r7, #20]
 801bdd2:	429a      	cmp	r2, r3
 801bdd4:	d202      	bcs.n	801bddc <mem_trim+0x170>
      lfree = mem2;
 801bdd6:	4a19      	ldr	r2, [pc, #100]	; (801be3c <mem_trim+0x1d0>)
 801bdd8:	697b      	ldr	r3, [r7, #20]
 801bdda:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801bddc:	697b      	ldr	r3, [r7, #20]
 801bdde:	2200      	movs	r2, #0
 801bde0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801bde2:	69fb      	ldr	r3, [r7, #28]
 801bde4:	881a      	ldrh	r2, [r3, #0]
 801bde6:	697b      	ldr	r3, [r7, #20]
 801bde8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801bdea:	697b      	ldr	r3, [r7, #20]
 801bdec:	8b7a      	ldrh	r2, [r7, #26]
 801bdee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801bdf0:	69fb      	ldr	r3, [r7, #28]
 801bdf2:	8a3a      	ldrh	r2, [r7, #16]
 801bdf4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801bdf6:	697b      	ldr	r3, [r7, #20]
 801bdf8:	881b      	ldrh	r3, [r3, #0]
 801bdfa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bdfe:	d006      	beq.n	801be0e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801be00:	4b07      	ldr	r3, [pc, #28]	; (801be20 <mem_trim+0x1b4>)
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	697a      	ldr	r2, [r7, #20]
 801be06:	8812      	ldrh	r2, [r2, #0]
 801be08:	4413      	add	r3, r2
 801be0a:	8a3a      	ldrh	r2, [r7, #16]
 801be0c:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801be0e:	480a      	ldr	r0, [pc, #40]	; (801be38 <mem_trim+0x1cc>)
 801be10:	f007 fa3f 	bl	8023292 <sys_mutex_unlock>
  return rmem;
 801be14:	687b      	ldr	r3, [r7, #4]
}
 801be16:	4618      	mov	r0, r3
 801be18:	3720      	adds	r7, #32
 801be1a:	46bd      	mov	sp, r7
 801be1c:	bd80      	pop	{r7, pc}
 801be1e:	bf00      	nop
 801be20:	200040a4 	.word	0x200040a4
 801be24:	200040a8 	.word	0x200040a8
 801be28:	080272bc 	.word	0x080272bc
 801be2c:	080273fc 	.word	0x080273fc
 801be30:	08027304 	.word	0x08027304
 801be34:	08027414 	.word	0x08027414
 801be38:	200040b0 	.word	0x200040b0
 801be3c:	200040ac 	.word	0x200040ac

0801be40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b088      	sub	sp, #32
 801be44:	af00      	add	r7, sp, #0
 801be46:	4603      	mov	r3, r0
 801be48:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 801be4a:	88fb      	ldrh	r3, [r7, #6]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d101      	bne.n	801be54 <mem_malloc+0x14>
    return NULL;
 801be50:	2300      	movs	r3, #0
 801be52:	e0d1      	b.n	801bff8 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 801be54:	88fb      	ldrh	r3, [r7, #6]
 801be56:	3303      	adds	r3, #3
 801be58:	b29b      	uxth	r3, r3
 801be5a:	f023 0303 	bic.w	r3, r3, #3
 801be5e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 801be60:	88fb      	ldrh	r3, [r7, #6]
 801be62:	2b0b      	cmp	r3, #11
 801be64:	d801      	bhi.n	801be6a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801be66:	230c      	movs	r3, #12
 801be68:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 801be6a:	88fb      	ldrh	r3, [r7, #6]
 801be6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801be70:	d901      	bls.n	801be76 <mem_malloc+0x36>
    return NULL;
 801be72:	2300      	movs	r3, #0
 801be74:	e0c0      	b.n	801bff8 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801be76:	4862      	ldr	r0, [pc, #392]	; (801c000 <mem_malloc+0x1c0>)
 801be78:	f007 f9fc 	bl	8023274 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801be7c:	4b61      	ldr	r3, [pc, #388]	; (801c004 <mem_malloc+0x1c4>)
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	461a      	mov	r2, r3
 801be82:	4b61      	ldr	r3, [pc, #388]	; (801c008 <mem_malloc+0x1c8>)
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	1ad3      	subs	r3, r2, r3
 801be88:	83fb      	strh	r3, [r7, #30]
 801be8a:	e0aa      	b.n	801bfe2 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 801be8c:	4b5e      	ldr	r3, [pc, #376]	; (801c008 <mem_malloc+0x1c8>)
 801be8e:	681a      	ldr	r2, [r3, #0]
 801be90:	8bfb      	ldrh	r3, [r7, #30]
 801be92:	4413      	add	r3, r2
 801be94:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801be96:	697b      	ldr	r3, [r7, #20]
 801be98:	791b      	ldrb	r3, [r3, #4]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	f040 809b 	bne.w	801bfd6 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801bea0:	697b      	ldr	r3, [r7, #20]
 801bea2:	881b      	ldrh	r3, [r3, #0]
 801bea4:	461a      	mov	r2, r3
 801bea6:	8bfb      	ldrh	r3, [r7, #30]
 801bea8:	1ad3      	subs	r3, r2, r3
 801beaa:	f1a3 0208 	sub.w	r2, r3, #8
 801beae:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 801beb0:	429a      	cmp	r2, r3
 801beb2:	f0c0 8090 	bcc.w	801bfd6 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801beb6:	697b      	ldr	r3, [r7, #20]
 801beb8:	881b      	ldrh	r3, [r3, #0]
 801beba:	461a      	mov	r2, r3
 801bebc:	8bfb      	ldrh	r3, [r7, #30]
 801bebe:	1ad3      	subs	r3, r2, r3
 801bec0:	f1a3 0208 	sub.w	r2, r3, #8
 801bec4:	88fb      	ldrh	r3, [r7, #6]
 801bec6:	3314      	adds	r3, #20
 801bec8:	429a      	cmp	r2, r3
 801beca:	d327      	bcc.n	801bf1c <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 801becc:	8bfa      	ldrh	r2, [r7, #30]
 801bece:	88fb      	ldrh	r3, [r7, #6]
 801bed0:	4413      	add	r3, r2
 801bed2:	b29b      	uxth	r3, r3
 801bed4:	3308      	adds	r3, #8
 801bed6:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 801bed8:	4b4b      	ldr	r3, [pc, #300]	; (801c008 <mem_malloc+0x1c8>)
 801beda:	681a      	ldr	r2, [r3, #0]
 801bedc:	8a7b      	ldrh	r3, [r7, #18]
 801bede:	4413      	add	r3, r2
 801bee0:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	2200      	movs	r2, #0
 801bee6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801bee8:	697b      	ldr	r3, [r7, #20]
 801beea:	881a      	ldrh	r2, [r3, #0]
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	8bfa      	ldrh	r2, [r7, #30]
 801bef4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801bef6:	697b      	ldr	r3, [r7, #20]
 801bef8:	8a7a      	ldrh	r2, [r7, #18]
 801befa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801befc:	697b      	ldr	r3, [r7, #20]
 801befe:	2201      	movs	r2, #1
 801bf00:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	881b      	ldrh	r3, [r3, #0]
 801bf06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bf0a:	d00a      	beq.n	801bf22 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801bf0c:	4b3e      	ldr	r3, [pc, #248]	; (801c008 <mem_malloc+0x1c8>)
 801bf0e:	681b      	ldr	r3, [r3, #0]
 801bf10:	68fa      	ldr	r2, [r7, #12]
 801bf12:	8812      	ldrh	r2, [r2, #0]
 801bf14:	4413      	add	r3, r2
 801bf16:	8a7a      	ldrh	r2, [r7, #18]
 801bf18:	805a      	strh	r2, [r3, #2]
 801bf1a:	e002      	b.n	801bf22 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801bf1c:	697b      	ldr	r3, [r7, #20]
 801bf1e:	2201      	movs	r2, #1
 801bf20:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801bf22:	4b38      	ldr	r3, [pc, #224]	; (801c004 <mem_malloc+0x1c4>)
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	697a      	ldr	r2, [r7, #20]
 801bf28:	429a      	cmp	r2, r3
 801bf2a:	d127      	bne.n	801bf7c <mem_malloc+0x13c>
          struct mem *cur = lfree;
 801bf2c:	4b35      	ldr	r3, [pc, #212]	; (801c004 <mem_malloc+0x1c4>)
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801bf32:	e005      	b.n	801bf40 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 801bf34:	4b34      	ldr	r3, [pc, #208]	; (801c008 <mem_malloc+0x1c8>)
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	69ba      	ldr	r2, [r7, #24]
 801bf3a:	8812      	ldrh	r2, [r2, #0]
 801bf3c:	4413      	add	r3, r2
 801bf3e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 801bf40:	69bb      	ldr	r3, [r7, #24]
 801bf42:	791b      	ldrb	r3, [r3, #4]
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	d004      	beq.n	801bf52 <mem_malloc+0x112>
 801bf48:	4b30      	ldr	r3, [pc, #192]	; (801c00c <mem_malloc+0x1cc>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	69ba      	ldr	r2, [r7, #24]
 801bf4e:	429a      	cmp	r2, r3
 801bf50:	d1f0      	bne.n	801bf34 <mem_malloc+0xf4>
          }
          lfree = cur;
 801bf52:	4a2c      	ldr	r2, [pc, #176]	; (801c004 <mem_malloc+0x1c4>)
 801bf54:	69bb      	ldr	r3, [r7, #24]
 801bf56:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801bf58:	4b2a      	ldr	r3, [pc, #168]	; (801c004 <mem_malloc+0x1c4>)
 801bf5a:	681a      	ldr	r2, [r3, #0]
 801bf5c:	4b2b      	ldr	r3, [pc, #172]	; (801c00c <mem_malloc+0x1cc>)
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	429a      	cmp	r2, r3
 801bf62:	d00b      	beq.n	801bf7c <mem_malloc+0x13c>
 801bf64:	4b27      	ldr	r3, [pc, #156]	; (801c004 <mem_malloc+0x1c4>)
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	791b      	ldrb	r3, [r3, #4]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d006      	beq.n	801bf7c <mem_malloc+0x13c>
 801bf6e:	4b28      	ldr	r3, [pc, #160]	; (801c010 <mem_malloc+0x1d0>)
 801bf70:	f240 22cf 	movw	r2, #719	; 0x2cf
 801bf74:	4927      	ldr	r1, [pc, #156]	; (801c014 <mem_malloc+0x1d4>)
 801bf76:	4828      	ldr	r0, [pc, #160]	; (801c018 <mem_malloc+0x1d8>)
 801bf78:	f009 fb7a 	bl	8025670 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801bf7c:	4820      	ldr	r0, [pc, #128]	; (801c000 <mem_malloc+0x1c0>)
 801bf7e:	f007 f988 	bl	8023292 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801bf82:	88fa      	ldrh	r2, [r7, #6]
 801bf84:	697b      	ldr	r3, [r7, #20]
 801bf86:	4413      	add	r3, r2
 801bf88:	3308      	adds	r3, #8
 801bf8a:	4a20      	ldr	r2, [pc, #128]	; (801c00c <mem_malloc+0x1cc>)
 801bf8c:	6812      	ldr	r2, [r2, #0]
 801bf8e:	4293      	cmp	r3, r2
 801bf90:	d906      	bls.n	801bfa0 <mem_malloc+0x160>
 801bf92:	4b1f      	ldr	r3, [pc, #124]	; (801c010 <mem_malloc+0x1d0>)
 801bf94:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801bf98:	4920      	ldr	r1, [pc, #128]	; (801c01c <mem_malloc+0x1dc>)
 801bf9a:	481f      	ldr	r0, [pc, #124]	; (801c018 <mem_malloc+0x1d8>)
 801bf9c:	f009 fb68 	bl	8025670 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801bfa0:	697b      	ldr	r3, [r7, #20]
 801bfa2:	f003 0303 	and.w	r3, r3, #3
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d006      	beq.n	801bfb8 <mem_malloc+0x178>
 801bfaa:	4b19      	ldr	r3, [pc, #100]	; (801c010 <mem_malloc+0x1d0>)
 801bfac:	f240 22d6 	movw	r2, #726	; 0x2d6
 801bfb0:	491b      	ldr	r1, [pc, #108]	; (801c020 <mem_malloc+0x1e0>)
 801bfb2:	4819      	ldr	r0, [pc, #100]	; (801c018 <mem_malloc+0x1d8>)
 801bfb4:	f009 fb5c 	bl	8025670 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801bfb8:	697b      	ldr	r3, [r7, #20]
 801bfba:	f003 0303 	and.w	r3, r3, #3
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d006      	beq.n	801bfd0 <mem_malloc+0x190>
 801bfc2:	4b13      	ldr	r3, [pc, #76]	; (801c010 <mem_malloc+0x1d0>)
 801bfc4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 801bfc8:	4916      	ldr	r1, [pc, #88]	; (801c024 <mem_malloc+0x1e4>)
 801bfca:	4813      	ldr	r0, [pc, #76]	; (801c018 <mem_malloc+0x1d8>)
 801bfcc:	f009 fb50 	bl	8025670 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 801bfd0:	697b      	ldr	r3, [r7, #20]
 801bfd2:	3308      	adds	r3, #8
 801bfd4:	e010      	b.n	801bff8 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 801bfd6:	4b0c      	ldr	r3, [pc, #48]	; (801c008 <mem_malloc+0x1c8>)
 801bfd8:	681a      	ldr	r2, [r3, #0]
 801bfda:	8bfb      	ldrh	r3, [r7, #30]
 801bfdc:	4413      	add	r3, r2
 801bfde:	881b      	ldrh	r3, [r3, #0]
 801bfe0:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801bfe2:	8bfa      	ldrh	r2, [r7, #30]
 801bfe4:	88fb      	ldrh	r3, [r7, #6]
 801bfe6:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801bfea:	429a      	cmp	r2, r3
 801bfec:	f4ff af4e 	bcc.w	801be8c <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801bff0:	4803      	ldr	r0, [pc, #12]	; (801c000 <mem_malloc+0x1c0>)
 801bff2:	f007 f94e 	bl	8023292 <sys_mutex_unlock>
  return NULL;
 801bff6:	2300      	movs	r3, #0
}
 801bff8:	4618      	mov	r0, r3
 801bffa:	3720      	adds	r7, #32
 801bffc:	46bd      	mov	sp, r7
 801bffe:	bd80      	pop	{r7, pc}
 801c000:	200040b0 	.word	0x200040b0
 801c004:	200040ac 	.word	0x200040ac
 801c008:	200040a4 	.word	0x200040a4
 801c00c:	200040a8 	.word	0x200040a8
 801c010:	080272bc 	.word	0x080272bc
 801c014:	08027434 	.word	0x08027434
 801c018:	08027304 	.word	0x08027304
 801c01c:	08027450 	.word	0x08027450
 801c020:	08027480 	.word	0x08027480
 801c024:	080274b0 	.word	0x080274b0

0801c028 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801c028:	b480      	push	{r7}
 801c02a:	b085      	sub	sp, #20
 801c02c:	af00      	add	r7, sp, #0
 801c02e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	689b      	ldr	r3, [r3, #8]
 801c034:	2200      	movs	r2, #0
 801c036:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	685b      	ldr	r3, [r3, #4]
 801c03c:	3303      	adds	r3, #3
 801c03e:	f023 0303 	bic.w	r3, r3, #3
 801c042:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801c044:	2300      	movs	r3, #0
 801c046:	60fb      	str	r3, [r7, #12]
 801c048:	e011      	b.n	801c06e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	689b      	ldr	r3, [r3, #8]
 801c04e:	681a      	ldr	r2, [r3, #0]
 801c050:	68bb      	ldr	r3, [r7, #8]
 801c052:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	689b      	ldr	r3, [r3, #8]
 801c058:	68ba      	ldr	r2, [r7, #8]
 801c05a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	881b      	ldrh	r3, [r3, #0]
 801c060:	461a      	mov	r2, r3
 801c062:	68bb      	ldr	r3, [r7, #8]
 801c064:	4413      	add	r3, r2
 801c066:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	3301      	adds	r3, #1
 801c06c:	60fb      	str	r3, [r7, #12]
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	885b      	ldrh	r3, [r3, #2]
 801c072:	461a      	mov	r2, r3
 801c074:	68fb      	ldr	r3, [r7, #12]
 801c076:	429a      	cmp	r2, r3
 801c078:	dce7      	bgt.n	801c04a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801c07a:	bf00      	nop
 801c07c:	3714      	adds	r7, #20
 801c07e:	46bd      	mov	sp, r7
 801c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c084:	4770      	bx	lr
	...

0801c088 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801c088:	b580      	push	{r7, lr}
 801c08a:	b082      	sub	sp, #8
 801c08c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801c08e:	2300      	movs	r3, #0
 801c090:	80fb      	strh	r3, [r7, #6]
 801c092:	e009      	b.n	801c0a8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801c094:	88fb      	ldrh	r3, [r7, #6]
 801c096:	4a08      	ldr	r2, [pc, #32]	; (801c0b8 <memp_init+0x30>)
 801c098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c09c:	4618      	mov	r0, r3
 801c09e:	f7ff ffc3 	bl	801c028 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801c0a2:	88fb      	ldrh	r3, [r7, #6]
 801c0a4:	3301      	adds	r3, #1
 801c0a6:	80fb      	strh	r3, [r7, #6]
 801c0a8:	88fb      	ldrh	r3, [r7, #6]
 801c0aa:	2b0c      	cmp	r3, #12
 801c0ac:	d9f2      	bls.n	801c094 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801c0ae:	bf00      	nop
 801c0b0:	3708      	adds	r7, #8
 801c0b2:	46bd      	mov	sp, r7
 801c0b4:	bd80      	pop	{r7, pc}
 801c0b6:	bf00      	nop
 801c0b8:	0802af00 	.word	0x0802af00

0801c0bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 801c0bc:	b580      	push	{r7, lr}
 801c0be:	b084      	sub	sp, #16
 801c0c0:	af00      	add	r7, sp, #0
 801c0c2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801c0c4:	f007 f910 	bl	80232e8 <sys_arch_protect>
 801c0c8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	689b      	ldr	r3, [r3, #8]
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801c0d2:	68bb      	ldr	r3, [r7, #8]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d015      	beq.n	801c104 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	689b      	ldr	r3, [r3, #8]
 801c0dc:	68ba      	ldr	r2, [r7, #8]
 801c0de:	6812      	ldr	r2, [r2, #0]
 801c0e0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801c0e2:	68bb      	ldr	r3, [r7, #8]
 801c0e4:	f003 0303 	and.w	r3, r3, #3
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d006      	beq.n	801c0fa <do_memp_malloc_pool+0x3e>
 801c0ec:	4b09      	ldr	r3, [pc, #36]	; (801c114 <do_memp_malloc_pool+0x58>)
 801c0ee:	f240 1249 	movw	r2, #329	; 0x149
 801c0f2:	4909      	ldr	r1, [pc, #36]	; (801c118 <do_memp_malloc_pool+0x5c>)
 801c0f4:	4809      	ldr	r0, [pc, #36]	; (801c11c <do_memp_malloc_pool+0x60>)
 801c0f6:	f009 fabb 	bl	8025670 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801c0fa:	68f8      	ldr	r0, [r7, #12]
 801c0fc:	f007 f902 	bl	8023304 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 801c100:	68bb      	ldr	r3, [r7, #8]
 801c102:	e003      	b.n	801c10c <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 801c104:	68f8      	ldr	r0, [r7, #12]
 801c106:	f007 f8fd 	bl	8023304 <sys_arch_unprotect>
  return NULL;
 801c10a:	2300      	movs	r3, #0
}
 801c10c:	4618      	mov	r0, r3
 801c10e:	3710      	adds	r7, #16
 801c110:	46bd      	mov	sp, r7
 801c112:	bd80      	pop	{r7, pc}
 801c114:	080274d4 	.word	0x080274d4
 801c118:	08027504 	.word	0x08027504
 801c11c:	08027528 	.word	0x08027528

0801c120 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 801c120:	b580      	push	{r7, lr}
 801c122:	b084      	sub	sp, #16
 801c124:	af00      	add	r7, sp, #0
 801c126:	4603      	mov	r3, r0
 801c128:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801c12a:	79fb      	ldrb	r3, [r7, #7]
 801c12c:	2b0c      	cmp	r3, #12
 801c12e:	d908      	bls.n	801c142 <memp_malloc+0x22>
 801c130:	4b0a      	ldr	r3, [pc, #40]	; (801c15c <memp_malloc+0x3c>)
 801c132:	f240 1287 	movw	r2, #391	; 0x187
 801c136:	490a      	ldr	r1, [pc, #40]	; (801c160 <memp_malloc+0x40>)
 801c138:	480a      	ldr	r0, [pc, #40]	; (801c164 <memp_malloc+0x44>)
 801c13a:	f009 fa99 	bl	8025670 <iprintf>
 801c13e:	2300      	movs	r3, #0
 801c140:	e008      	b.n	801c154 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801c142:	79fb      	ldrb	r3, [r7, #7]
 801c144:	4a08      	ldr	r2, [pc, #32]	; (801c168 <memp_malloc+0x48>)
 801c146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c14a:	4618      	mov	r0, r3
 801c14c:	f7ff ffb6 	bl	801c0bc <do_memp_malloc_pool>
 801c150:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801c152:	68fb      	ldr	r3, [r7, #12]
}
 801c154:	4618      	mov	r0, r3
 801c156:	3710      	adds	r7, #16
 801c158:	46bd      	mov	sp, r7
 801c15a:	bd80      	pop	{r7, pc}
 801c15c:	080274d4 	.word	0x080274d4
 801c160:	08027564 	.word	0x08027564
 801c164:	08027528 	.word	0x08027528
 801c168:	0802af00 	.word	0x0802af00

0801c16c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 801c16c:	b580      	push	{r7, lr}
 801c16e:	b084      	sub	sp, #16
 801c170:	af00      	add	r7, sp, #0
 801c172:	6078      	str	r0, [r7, #4]
 801c174:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801c176:	683b      	ldr	r3, [r7, #0]
 801c178:	f003 0303 	and.w	r3, r3, #3
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d006      	beq.n	801c18e <do_memp_free_pool+0x22>
 801c180:	4b0d      	ldr	r3, [pc, #52]	; (801c1b8 <do_memp_free_pool+0x4c>)
 801c182:	f240 129d 	movw	r2, #413	; 0x19d
 801c186:	490d      	ldr	r1, [pc, #52]	; (801c1bc <do_memp_free_pool+0x50>)
 801c188:	480d      	ldr	r0, [pc, #52]	; (801c1c0 <do_memp_free_pool+0x54>)
 801c18a:	f009 fa71 	bl	8025670 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 801c18e:	683b      	ldr	r3, [r7, #0]
 801c190:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801c192:	f007 f8a9 	bl	80232e8 <sys_arch_protect>
 801c196:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	689b      	ldr	r3, [r3, #8]
 801c19c:	681a      	ldr	r2, [r3, #0]
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	689b      	ldr	r3, [r3, #8]
 801c1a6:	68fa      	ldr	r2, [r7, #12]
 801c1a8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801c1aa:	68b8      	ldr	r0, [r7, #8]
 801c1ac:	f007 f8aa 	bl	8023304 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801c1b0:	bf00      	nop
 801c1b2:	3710      	adds	r7, #16
 801c1b4:	46bd      	mov	sp, r7
 801c1b6:	bd80      	pop	{r7, pc}
 801c1b8:	080274d4 	.word	0x080274d4
 801c1bc:	08027584 	.word	0x08027584
 801c1c0:	08027528 	.word	0x08027528

0801c1c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b082      	sub	sp, #8
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	6039      	str	r1, [r7, #0]
 801c1ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801c1d0:	79fb      	ldrb	r3, [r7, #7]
 801c1d2:	2b0c      	cmp	r3, #12
 801c1d4:	d907      	bls.n	801c1e6 <memp_free+0x22>
 801c1d6:	4b0c      	ldr	r3, [pc, #48]	; (801c208 <memp_free+0x44>)
 801c1d8:	f240 12db 	movw	r2, #475	; 0x1db
 801c1dc:	490b      	ldr	r1, [pc, #44]	; (801c20c <memp_free+0x48>)
 801c1de:	480c      	ldr	r0, [pc, #48]	; (801c210 <memp_free+0x4c>)
 801c1e0:	f009 fa46 	bl	8025670 <iprintf>
 801c1e4:	e00c      	b.n	801c200 <memp_free+0x3c>

  if (mem == NULL) {
 801c1e6:	683b      	ldr	r3, [r7, #0]
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d008      	beq.n	801c1fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801c1ec:	79fb      	ldrb	r3, [r7, #7]
 801c1ee:	4a09      	ldr	r2, [pc, #36]	; (801c214 <memp_free+0x50>)
 801c1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c1f4:	6839      	ldr	r1, [r7, #0]
 801c1f6:	4618      	mov	r0, r3
 801c1f8:	f7ff ffb8 	bl	801c16c <do_memp_free_pool>
 801c1fc:	e000      	b.n	801c200 <memp_free+0x3c>
    return;
 801c1fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801c200:	3708      	adds	r7, #8
 801c202:	46bd      	mov	sp, r7
 801c204:	bd80      	pop	{r7, pc}
 801c206:	bf00      	nop
 801c208:	080274d4 	.word	0x080274d4
 801c20c:	080275a4 	.word	0x080275a4
 801c210:	08027528 	.word	0x08027528
 801c214:	0802af00 	.word	0x0802af00

0801c218 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801c218:	b480      	push	{r7}
 801c21a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801c21c:	bf00      	nop
 801c21e:	46bd      	mov	sp, r7
 801c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c224:	4770      	bx	lr
	...

0801c228 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801c228:	b580      	push	{r7, lr}
 801c22a:	b084      	sub	sp, #16
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	60f8      	str	r0, [r7, #12]
 801c230:	60b9      	str	r1, [r7, #8]
 801c232:	607a      	str	r2, [r7, #4]
 801c234:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 801c236:	69fb      	ldr	r3, [r7, #28]
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d105      	bne.n	801c248 <netif_add+0x20>
 801c23c:	4b1f      	ldr	r3, [pc, #124]	; (801c2bc <netif_add+0x94>)
 801c23e:	22fb      	movs	r2, #251	; 0xfb
 801c240:	491f      	ldr	r1, [pc, #124]	; (801c2c0 <netif_add+0x98>)
 801c242:	4820      	ldr	r0, [pc, #128]	; (801c2c4 <netif_add+0x9c>)
 801c244:	f009 fa14 	bl	8025670 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	2200      	movs	r2, #0
 801c24c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	2200      	movs	r2, #0
 801c252:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	2200      	movs	r2, #0
 801c258:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	2200      	movs	r2, #0
 801c25e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 801c262:	68fb      	ldr	r3, [r7, #12]
 801c264:	2203      	movs	r2, #3
 801c266:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	69ba      	ldr	r2, [r7, #24]
 801c26e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 801c270:	4b15      	ldr	r3, [pc, #84]	; (801c2c8 <netif_add+0xa0>)
 801c272:	781b      	ldrb	r3, [r3, #0]
 801c274:	1c5a      	adds	r2, r3, #1
 801c276:	b2d1      	uxtb	r1, r2
 801c278:	4a13      	ldr	r2, [pc, #76]	; (801c2c8 <netif_add+0xa0>)
 801c27a:	7011      	strb	r1, [r2, #0]
 801c27c:	68fa      	ldr	r2, [r7, #12]
 801c27e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	6a3a      	ldr	r2, [r7, #32]
 801c286:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801c288:	683b      	ldr	r3, [r7, #0]
 801c28a:	687a      	ldr	r2, [r7, #4]
 801c28c:	68b9      	ldr	r1, [r7, #8]
 801c28e:	68f8      	ldr	r0, [r7, #12]
 801c290:	f000 f81e 	bl	801c2d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801c294:	69fb      	ldr	r3, [r7, #28]
 801c296:	68f8      	ldr	r0, [r7, #12]
 801c298:	4798      	blx	r3
 801c29a:	4603      	mov	r3, r0
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d001      	beq.n	801c2a4 <netif_add+0x7c>
    return NULL;
 801c2a0:	2300      	movs	r3, #0
 801c2a2:	e007      	b.n	801c2b4 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801c2a4:	4b09      	ldr	r3, [pc, #36]	; (801c2cc <netif_add+0xa4>)
 801c2a6:	681a      	ldr	r2, [r3, #0]
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801c2ac:	4a07      	ldr	r2, [pc, #28]	; (801c2cc <netif_add+0xa4>)
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 801c2b2:	68fb      	ldr	r3, [r7, #12]
}
 801c2b4:	4618      	mov	r0, r3
 801c2b6:	3710      	adds	r7, #16
 801c2b8:	46bd      	mov	sp, r7
 801c2ba:	bd80      	pop	{r7, pc}
 801c2bc:	080275c0 	.word	0x080275c0
 801c2c0:	080275f4 	.word	0x080275f4
 801c2c4:	0802760c 	.word	0x0802760c
 801c2c8:	200040e8 	.word	0x200040e8
 801c2cc:	20008c14 	.word	0x20008c14

0801c2d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 801c2d0:	b580      	push	{r7, lr}
 801c2d2:	b084      	sub	sp, #16
 801c2d4:	af00      	add	r7, sp, #0
 801c2d6:	60f8      	str	r0, [r7, #12]
 801c2d8:	60b9      	str	r1, [r7, #8]
 801c2da:	607a      	str	r2, [r7, #4]
 801c2dc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 801c2de:	68bb      	ldr	r3, [r7, #8]
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d003      	beq.n	801c2ec <netif_set_addr+0x1c>
 801c2e4:	68bb      	ldr	r3, [r7, #8]
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d10c      	bne.n	801c306 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 801c2ec:	68b9      	ldr	r1, [r7, #8]
 801c2ee:	68f8      	ldr	r0, [r7, #12]
 801c2f0:	f000 f81a 	bl	801c328 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 801c2f4:	6879      	ldr	r1, [r7, #4]
 801c2f6:	68f8      	ldr	r0, [r7, #12]
 801c2f8:	f000 f862 	bl	801c3c0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801c2fc:	6839      	ldr	r1, [r7, #0]
 801c2fe:	68f8      	ldr	r0, [r7, #12]
 801c300:	f000 f84a 	bl	801c398 <netif_set_gw>
 801c304:	e00b      	b.n	801c31e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 801c306:	6879      	ldr	r1, [r7, #4]
 801c308:	68f8      	ldr	r0, [r7, #12]
 801c30a:	f000 f859 	bl	801c3c0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801c30e:	6839      	ldr	r1, [r7, #0]
 801c310:	68f8      	ldr	r0, [r7, #12]
 801c312:	f000 f841 	bl	801c398 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 801c316:	68b9      	ldr	r1, [r7, #8]
 801c318:	68f8      	ldr	r0, [r7, #12]
 801c31a:	f000 f805 	bl	801c328 <netif_set_ipaddr>
  }
}
 801c31e:	bf00      	nop
 801c320:	3710      	adds	r7, #16
 801c322:	46bd      	mov	sp, r7
 801c324:	bd80      	pop	{r7, pc}
	...

0801c328 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c328:	b580      	push	{r7, lr}
 801c32a:	b084      	sub	sp, #16
 801c32c:	af00      	add	r7, sp, #0
 801c32e:	6078      	str	r0, [r7, #4]
 801c330:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 801c332:	683b      	ldr	r3, [r7, #0]
 801c334:	2b00      	cmp	r3, #0
 801c336:	d003      	beq.n	801c340 <netif_set_ipaddr+0x18>
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	60fb      	str	r3, [r7, #12]
 801c33e:	e002      	b.n	801c346 <netif_set_ipaddr+0x1e>
 801c340:	4b14      	ldr	r3, [pc, #80]	; (801c394 <netif_set_ipaddr+0x6c>)
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 801c346:	68fa      	ldr	r2, [r7, #12]
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	3304      	adds	r3, #4
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	429a      	cmp	r2, r3
 801c350:	d01c      	beq.n	801c38c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	3304      	adds	r3, #4
 801c356:	f107 020c 	add.w	r2, r7, #12
 801c35a:	4611      	mov	r1, r2
 801c35c:	4618      	mov	r0, r3
 801c35e:	f002 fb17 	bl	801e990 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	3304      	adds	r3, #4
 801c366:	f107 020c 	add.w	r2, r7, #12
 801c36a:	4611      	mov	r1, r2
 801c36c:	4618      	mov	r0, r3
 801c36e:	f006 fce7 	bl	8022d40 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801c372:	683b      	ldr	r3, [r7, #0]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d002      	beq.n	801c37e <netif_set_ipaddr+0x56>
 801c378:	683b      	ldr	r3, [r7, #0]
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	e000      	b.n	801c380 <netif_set_ipaddr+0x58>
 801c37e:	2300      	movs	r3, #0
 801c380:	687a      	ldr	r2, [r7, #4]
 801c382:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801c384:	2101      	movs	r1, #1
 801c386:	6878      	ldr	r0, [r7, #4]
 801c388:	f000 f861 	bl	801c44e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 801c38c:	bf00      	nop
 801c38e:	3710      	adds	r7, #16
 801c390:	46bd      	mov	sp, r7
 801c392:	bd80      	pop	{r7, pc}
 801c394:	0802ae60 	.word	0x0802ae60

0801c398 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 801c398:	b480      	push	{r7}
 801c39a:	b083      	sub	sp, #12
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	6078      	str	r0, [r7, #4]
 801c3a0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801c3a2:	683b      	ldr	r3, [r7, #0]
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d002      	beq.n	801c3ae <netif_set_gw+0x16>
 801c3a8:	683b      	ldr	r3, [r7, #0]
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	e000      	b.n	801c3b0 <netif_set_gw+0x18>
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	687a      	ldr	r2, [r7, #4]
 801c3b2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 801c3b4:	bf00      	nop
 801c3b6:	370c      	adds	r7, #12
 801c3b8:	46bd      	mov	sp, r7
 801c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3be:	4770      	bx	lr

0801c3c0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 801c3c0:	b480      	push	{r7}
 801c3c2:	b083      	sub	sp, #12
 801c3c4:	af00      	add	r7, sp, #0
 801c3c6:	6078      	str	r0, [r7, #4]
 801c3c8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801c3ca:	683b      	ldr	r3, [r7, #0]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d002      	beq.n	801c3d6 <netif_set_netmask+0x16>
 801c3d0:	683b      	ldr	r3, [r7, #0]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	e000      	b.n	801c3d8 <netif_set_netmask+0x18>
 801c3d6:	2300      	movs	r3, #0
 801c3d8:	687a      	ldr	r2, [r7, #4]
 801c3da:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 801c3dc:	bf00      	nop
 801c3de:	370c      	adds	r7, #12
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3e6:	4770      	bx	lr

0801c3e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801c3e8:	b480      	push	{r7}
 801c3ea:	b083      	sub	sp, #12
 801c3ec:	af00      	add	r7, sp, #0
 801c3ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801c3f0:	4a04      	ldr	r2, [pc, #16]	; (801c404 <netif_set_default+0x1c>)
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801c3f6:	bf00      	nop
 801c3f8:	370c      	adds	r7, #12
 801c3fa:	46bd      	mov	sp, r7
 801c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c400:	4770      	bx	lr
 801c402:	bf00      	nop
 801c404:	20008c18 	.word	0x20008c18

0801c408 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b082      	sub	sp, #8
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c416:	f003 0301 	and.w	r3, r3, #1
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d113      	bne.n	801c446 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c424:	f043 0301 	orr.w	r3, r3, #1
 801c428:	b2da      	uxtb	r2, r3
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c436:	f003 0304 	and.w	r3, r3, #4
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d003      	beq.n	801c446 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801c43e:	2103      	movs	r1, #3
 801c440:	6878      	ldr	r0, [r7, #4]
 801c442:	f000 f804 	bl	801c44e <netif_issue_reports>
    }
  }
}
 801c446:	bf00      	nop
 801c448:	3708      	adds	r7, #8
 801c44a:	46bd      	mov	sp, r7
 801c44c:	bd80      	pop	{r7, pc}

0801c44e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 801c44e:	b580      	push	{r7, lr}
 801c450:	b082      	sub	sp, #8
 801c452:	af00      	add	r7, sp, #0
 801c454:	6078      	str	r0, [r7, #4]
 801c456:	460b      	mov	r3, r1
 801c458:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801c45a:	78fb      	ldrb	r3, [r7, #3]
 801c45c:	f003 0301 	and.w	r3, r3, #1
 801c460:	2b00      	cmp	r3, #0
 801c462:	d011      	beq.n	801c488 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	3304      	adds	r3, #4
 801c468:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d00c      	beq.n	801c488 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c474:	f003 0308 	and.w	r3, r3, #8
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d005      	beq.n	801c488 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	3304      	adds	r3, #4
 801c480:	4619      	mov	r1, r3
 801c482:	6878      	ldr	r0, [r7, #4]
 801c484:	f7fd feaa 	bl	801a1dc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 801c488:	bf00      	nop
 801c48a:	3708      	adds	r7, #8
 801c48c:	46bd      	mov	sp, r7
 801c48e:	bd80      	pop	{r7, pc}

0801c490 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801c490:	b580      	push	{r7, lr}
 801c492:	b082      	sub	sp, #8
 801c494:	af00      	add	r7, sp, #0
 801c496:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c49e:	f003 0301 	and.w	r3, r3, #1
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d012      	beq.n	801c4cc <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c4ac:	f023 0301 	bic.w	r3, r3, #1
 801c4b0:	b2da      	uxtb	r2, r3
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c4be:	f003 0308 	and.w	r3, r3, #8
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d002      	beq.n	801c4cc <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 801c4c6:	6878      	ldr	r0, [r7, #4]
 801c4c8:	f7fd fa4e 	bl	8019968 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801c4cc:	bf00      	nop
 801c4ce:	3708      	adds	r7, #8
 801c4d0:	46bd      	mov	sp, r7
 801c4d2:	bd80      	pop	{r7, pc}

0801c4d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801c4d4:	b580      	push	{r7, lr}
 801c4d6:	b082      	sub	sp, #8
 801c4d8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801c4da:	f006 ff05 	bl	80232e8 <sys_arch_protect>
 801c4de:	6038      	str	r0, [r7, #0]
 801c4e0:	4b0f      	ldr	r3, [pc, #60]	; (801c520 <pbuf_free_ooseq+0x4c>)
 801c4e2:	2200      	movs	r2, #0
 801c4e4:	701a      	strb	r2, [r3, #0]
 801c4e6:	6838      	ldr	r0, [r7, #0]
 801c4e8:	f006 ff0c 	bl	8023304 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801c4ec:	4b0d      	ldr	r3, [pc, #52]	; (801c524 <pbuf_free_ooseq+0x50>)
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	607b      	str	r3, [r7, #4]
 801c4f2:	e00f      	b.n	801c514 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d008      	beq.n	801c50e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c500:	4618      	mov	r0, r3
 801c502:	f001 fec0 	bl	801e286 <tcp_segs_free>
      pcb->ooseq = NULL;
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	2200      	movs	r2, #0
 801c50a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 801c50c:	e005      	b.n	801c51a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	68db      	ldr	r3, [r3, #12]
 801c512:	607b      	str	r3, [r7, #4]
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d1ec      	bne.n	801c4f4 <pbuf_free_ooseq+0x20>
    }
  }
}
 801c51a:	3708      	adds	r7, #8
 801c51c:	46bd      	mov	sp, r7
 801c51e:	bd80      	pop	{r7, pc}
 801c520:	20008c1c 	.word	0x20008c1c
 801c524:	20008c24 	.word	0x20008c24

0801c528 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801c528:	b580      	push	{r7, lr}
 801c52a:	b082      	sub	sp, #8
 801c52c:	af00      	add	r7, sp, #0
 801c52e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801c530:	f7ff ffd0 	bl	801c4d4 <pbuf_free_ooseq>
}
 801c534:	bf00      	nop
 801c536:	3708      	adds	r7, #8
 801c538:	46bd      	mov	sp, r7
 801c53a:	bd80      	pop	{r7, pc}

0801c53c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801c53c:	b580      	push	{r7, lr}
 801c53e:	b082      	sub	sp, #8
 801c540:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801c542:	f006 fed1 	bl	80232e8 <sys_arch_protect>
 801c546:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801c548:	4b10      	ldr	r3, [pc, #64]	; (801c58c <pbuf_pool_is_empty+0x50>)
 801c54a:	781b      	ldrb	r3, [r3, #0]
 801c54c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801c54e:	4b0f      	ldr	r3, [pc, #60]	; (801c58c <pbuf_pool_is_empty+0x50>)
 801c550:	2201      	movs	r2, #1
 801c552:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801c554:	6878      	ldr	r0, [r7, #4]
 801c556:	f006 fed5 	bl	8023304 <sys_arch_unprotect>

  if (!queued) {
 801c55a:	78fb      	ldrb	r3, [r7, #3]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d110      	bne.n	801c582 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801c560:	2200      	movs	r2, #0
 801c562:	2100      	movs	r1, #0
 801c564:	480a      	ldr	r0, [pc, #40]	; (801c590 <pbuf_pool_is_empty+0x54>)
 801c566:	f7fc fe05 	bl	8019174 <tcpip_callback_with_block>
 801c56a:	4603      	mov	r3, r0
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d008      	beq.n	801c582 <pbuf_pool_is_empty+0x46>
 801c570:	f006 feba 	bl	80232e8 <sys_arch_protect>
 801c574:	6078      	str	r0, [r7, #4]
 801c576:	4b05      	ldr	r3, [pc, #20]	; (801c58c <pbuf_pool_is_empty+0x50>)
 801c578:	2200      	movs	r2, #0
 801c57a:	701a      	strb	r2, [r3, #0]
 801c57c:	6878      	ldr	r0, [r7, #4]
 801c57e:	f006 fec1 	bl	8023304 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801c582:	bf00      	nop
 801c584:	3708      	adds	r7, #8
 801c586:	46bd      	mov	sp, r7
 801c588:	bd80      	pop	{r7, pc}
 801c58a:	bf00      	nop
 801c58c:	20008c1c 	.word	0x20008c1c
 801c590:	0801c529 	.word	0x0801c529

0801c594 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b088      	sub	sp, #32
 801c598:	af00      	add	r7, sp, #0
 801c59a:	4603      	mov	r3, r0
 801c59c:	71fb      	strb	r3, [r7, #7]
 801c59e:	460b      	mov	r3, r1
 801c5a0:	80bb      	strh	r3, [r7, #4]
 801c5a2:	4613      	mov	r3, r2
 801c5a4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 801c5a6:	79fb      	ldrb	r3, [r7, #7]
 801c5a8:	2b04      	cmp	r3, #4
 801c5aa:	d81c      	bhi.n	801c5e6 <pbuf_alloc+0x52>
 801c5ac:	a201      	add	r2, pc, #4	; (adr r2, 801c5b4 <pbuf_alloc+0x20>)
 801c5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c5b2:	bf00      	nop
 801c5b4:	0801c5c9 	.word	0x0801c5c9
 801c5b8:	0801c5cf 	.word	0x0801c5cf
 801c5bc:	0801c5d5 	.word	0x0801c5d5
 801c5c0:	0801c5db 	.word	0x0801c5db
 801c5c4:	0801c5e1 	.word	0x0801c5e1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801c5c8:	2336      	movs	r3, #54	; 0x36
 801c5ca:	82fb      	strh	r3, [r7, #22]
    break;
 801c5cc:	e014      	b.n	801c5f8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801c5ce:	2322      	movs	r3, #34	; 0x22
 801c5d0:	82fb      	strh	r3, [r7, #22]
    break;
 801c5d2:	e011      	b.n	801c5f8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801c5d4:	230e      	movs	r3, #14
 801c5d6:	82fb      	strh	r3, [r7, #22]
    break;
 801c5d8:	e00e      	b.n	801c5f8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801c5da:	2300      	movs	r3, #0
 801c5dc:	82fb      	strh	r3, [r7, #22]
    break;
 801c5de:	e00b      	b.n	801c5f8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 801c5e0:	2300      	movs	r3, #0
 801c5e2:	82fb      	strh	r3, [r7, #22]
    break;
 801c5e4:	e008      	b.n	801c5f8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 801c5e6:	4ba5      	ldr	r3, [pc, #660]	; (801c87c <pbuf_alloc+0x2e8>)
 801c5e8:	f44f 728b 	mov.w	r2, #278	; 0x116
 801c5ec:	49a4      	ldr	r1, [pc, #656]	; (801c880 <pbuf_alloc+0x2ec>)
 801c5ee:	48a5      	ldr	r0, [pc, #660]	; (801c884 <pbuf_alloc+0x2f0>)
 801c5f0:	f009 f83e 	bl	8025670 <iprintf>
    return NULL;
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	e15d      	b.n	801c8b4 <pbuf_alloc+0x320>
  }

  switch (type) {
 801c5f8:	79bb      	ldrb	r3, [r7, #6]
 801c5fa:	2b03      	cmp	r3, #3
 801c5fc:	f200 8134 	bhi.w	801c868 <pbuf_alloc+0x2d4>
 801c600:	a201      	add	r2, pc, #4	; (adr r2, 801c608 <pbuf_alloc+0x74>)
 801c602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c606:	bf00      	nop
 801c608:	0801c7a9 	.word	0x0801c7a9
 801c60c:	0801c835 	.word	0x0801c835
 801c610:	0801c835 	.word	0x0801c835
 801c614:	0801c619 	.word	0x0801c619
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c618:	200c      	movs	r0, #12
 801c61a:	f7ff fd81 	bl	801c120 <memp_malloc>
 801c61e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 801c620:	69fb      	ldr	r3, [r7, #28]
 801c622:	2b00      	cmp	r3, #0
 801c624:	d103      	bne.n	801c62e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 801c626:	f7ff ff89 	bl	801c53c <pbuf_pool_is_empty>
      return NULL;
 801c62a:	2300      	movs	r3, #0
 801c62c:	e142      	b.n	801c8b4 <pbuf_alloc+0x320>
    }
    p->type = type;
 801c62e:	69fb      	ldr	r3, [r7, #28]
 801c630:	79ba      	ldrb	r2, [r7, #6]
 801c632:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 801c634:	69fb      	ldr	r3, [r7, #28]
 801c636:	2200      	movs	r2, #0
 801c638:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801c63a:	8afb      	ldrh	r3, [r7, #22]
 801c63c:	3310      	adds	r3, #16
 801c63e:	69fa      	ldr	r2, [r7, #28]
 801c640:	4413      	add	r3, r2
 801c642:	3303      	adds	r3, #3
 801c644:	f023 0303 	bic.w	r3, r3, #3
 801c648:	461a      	mov	r2, r3
 801c64a:	69fb      	ldr	r3, [r7, #28]
 801c64c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 801c64e:	69fb      	ldr	r3, [r7, #28]
 801c650:	685b      	ldr	r3, [r3, #4]
 801c652:	f003 0303 	and.w	r3, r3, #3
 801c656:	2b00      	cmp	r3, #0
 801c658:	d006      	beq.n	801c668 <pbuf_alloc+0xd4>
 801c65a:	4b88      	ldr	r3, [pc, #544]	; (801c87c <pbuf_alloc+0x2e8>)
 801c65c:	f240 1229 	movw	r2, #297	; 0x129
 801c660:	4989      	ldr	r1, [pc, #548]	; (801c888 <pbuf_alloc+0x2f4>)
 801c662:	4888      	ldr	r0, [pc, #544]	; (801c884 <pbuf_alloc+0x2f0>)
 801c664:	f009 f804 	bl	8025670 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 801c668:	69fb      	ldr	r3, [r7, #28]
 801c66a:	88ba      	ldrh	r2, [r7, #4]
 801c66c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801c66e:	8afb      	ldrh	r3, [r7, #22]
 801c670:	3303      	adds	r3, #3
 801c672:	f023 0303 	bic.w	r3, r3, #3
 801c676:	f5c3 7242 	rsb	r2, r3, #776	; 0x308
 801c67a:	88bb      	ldrh	r3, [r7, #4]
 801c67c:	4293      	cmp	r3, r2
 801c67e:	bf28      	it	cs
 801c680:	4613      	movcs	r3, r2
 801c682:	b29a      	uxth	r2, r3
 801c684:	69fb      	ldr	r3, [r7, #28]
 801c686:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801c688:	69fb      	ldr	r3, [r7, #28]
 801c68a:	685b      	ldr	r3, [r3, #4]
 801c68c:	69fa      	ldr	r2, [r7, #28]
 801c68e:	8952      	ldrh	r2, [r2, #10]
 801c690:	441a      	add	r2, r3
 801c692:	69fb      	ldr	r3, [r7, #28]
 801c694:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801c698:	429a      	cmp	r2, r3
 801c69a:	d906      	bls.n	801c6aa <pbuf_alloc+0x116>
 801c69c:	4b77      	ldr	r3, [pc, #476]	; (801c87c <pbuf_alloc+0x2e8>)
 801c69e:	f44f 7298 	mov.w	r2, #304	; 0x130
 801c6a2:	497a      	ldr	r1, [pc, #488]	; (801c88c <pbuf_alloc+0x2f8>)
 801c6a4:	4877      	ldr	r0, [pc, #476]	; (801c884 <pbuf_alloc+0x2f0>)
 801c6a6:	f008 ffe3 	bl	8025670 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801c6aa:	8afb      	ldrh	r3, [r7, #22]
 801c6ac:	3303      	adds	r3, #3
 801c6ae:	f023 0303 	bic.w	r3, r3, #3
 801c6b2:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 801c6b6:	d106      	bne.n	801c6c6 <pbuf_alloc+0x132>
 801c6b8:	4b70      	ldr	r3, [pc, #448]	; (801c87c <pbuf_alloc+0x2e8>)
 801c6ba:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c6be:	4974      	ldr	r1, [pc, #464]	; (801c890 <pbuf_alloc+0x2fc>)
 801c6c0:	4870      	ldr	r0, [pc, #448]	; (801c884 <pbuf_alloc+0x2f0>)
 801c6c2:	f008 ffd5 	bl	8025670 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 801c6c6:	69fb      	ldr	r3, [r7, #28]
 801c6c8:	2201      	movs	r2, #1
 801c6ca:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 801c6cc:	69fb      	ldr	r3, [r7, #28]
 801c6ce:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 801c6d0:	88bb      	ldrh	r3, [r7, #4]
 801c6d2:	69fa      	ldr	r2, [r7, #28]
 801c6d4:	8952      	ldrh	r2, [r2, #10]
 801c6d6:	1a9b      	subs	r3, r3, r2
 801c6d8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 801c6da:	e061      	b.n	801c7a0 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c6dc:	200c      	movs	r0, #12
 801c6de:	f7ff fd1f 	bl	801c120 <memp_malloc>
 801c6e2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d106      	bne.n	801c6f8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 801c6ea:	f7ff ff27 	bl	801c53c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 801c6ee:	69f8      	ldr	r0, [r7, #28]
 801c6f0:	f000 fac2 	bl	801cc78 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 801c6f4:	2300      	movs	r3, #0
 801c6f6:	e0dd      	b.n	801c8b4 <pbuf_alloc+0x320>
      }
      q->type = type;
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	79ba      	ldrb	r2, [r7, #6]
 801c6fc:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 801c6fe:	68fb      	ldr	r3, [r7, #12]
 801c700:	2200      	movs	r2, #0
 801c702:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	2200      	movs	r2, #0
 801c708:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 801c70a:	69bb      	ldr	r3, [r7, #24]
 801c70c:	68fa      	ldr	r2, [r7, #12]
 801c70e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 801c710:	693b      	ldr	r3, [r7, #16]
 801c712:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c716:	4293      	cmp	r3, r2
 801c718:	dd06      	ble.n	801c728 <pbuf_alloc+0x194>
 801c71a:	4b58      	ldr	r3, [pc, #352]	; (801c87c <pbuf_alloc+0x2e8>)
 801c71c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801c720:	495c      	ldr	r1, [pc, #368]	; (801c894 <pbuf_alloc+0x300>)
 801c722:	4858      	ldr	r0, [pc, #352]	; (801c884 <pbuf_alloc+0x2f0>)
 801c724:	f008 ffa4 	bl	8025670 <iprintf>
      q->tot_len = (u16_t)rem_len;
 801c728:	693b      	ldr	r3, [r7, #16]
 801c72a:	b29a      	uxth	r2, r3
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 801c730:	693b      	ldr	r3, [r7, #16]
 801c732:	b29b      	uxth	r3, r3
 801c734:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 801c738:	bf28      	it	cs
 801c73a:	f44f 7342 	movcs.w	r3, #776	; 0x308
 801c73e:	b29a      	uxth	r2, r3
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	f103 0210 	add.w	r2, r3, #16
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	685b      	ldr	r3, [r3, #4]
 801c752:	f003 0303 	and.w	r3, r3, #3
 801c756:	2b00      	cmp	r3, #0
 801c758:	d006      	beq.n	801c768 <pbuf_alloc+0x1d4>
 801c75a:	4b48      	ldr	r3, [pc, #288]	; (801c87c <pbuf_alloc+0x2e8>)
 801c75c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 801c760:	494d      	ldr	r1, [pc, #308]	; (801c898 <pbuf_alloc+0x304>)
 801c762:	4848      	ldr	r0, [pc, #288]	; (801c884 <pbuf_alloc+0x2f0>)
 801c764:	f008 ff84 	bl	8025670 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801c768:	69fb      	ldr	r3, [r7, #28]
 801c76a:	685b      	ldr	r3, [r3, #4]
 801c76c:	69fa      	ldr	r2, [r7, #28]
 801c76e:	8952      	ldrh	r2, [r2, #10]
 801c770:	441a      	add	r2, r3
 801c772:	69fb      	ldr	r3, [r7, #28]
 801c774:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801c778:	429a      	cmp	r2, r3
 801c77a:	d906      	bls.n	801c78a <pbuf_alloc+0x1f6>
 801c77c:	4b3f      	ldr	r3, [pc, #252]	; (801c87c <pbuf_alloc+0x2e8>)
 801c77e:	f240 1255 	movw	r2, #341	; 0x155
 801c782:	4942      	ldr	r1, [pc, #264]	; (801c88c <pbuf_alloc+0x2f8>)
 801c784:	483f      	ldr	r0, [pc, #252]	; (801c884 <pbuf_alloc+0x2f0>)
 801c786:	f008 ff73 	bl	8025670 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	2201      	movs	r2, #1
 801c78e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	895b      	ldrh	r3, [r3, #10]
 801c794:	461a      	mov	r2, r3
 801c796:	693b      	ldr	r3, [r7, #16]
 801c798:	1a9b      	subs	r3, r3, r2
 801c79a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 801c7a0:	693b      	ldr	r3, [r7, #16]
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	dc9a      	bgt.n	801c6dc <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 801c7a6:	e07e      	b.n	801c8a6 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 801c7a8:	8afb      	ldrh	r3, [r7, #22]
 801c7aa:	3313      	adds	r3, #19
 801c7ac:	b29b      	uxth	r3, r3
 801c7ae:	f023 0303 	bic.w	r3, r3, #3
 801c7b2:	b29a      	uxth	r2, r3
 801c7b4:	88bb      	ldrh	r3, [r7, #4]
 801c7b6:	3303      	adds	r3, #3
 801c7b8:	b29b      	uxth	r3, r3
 801c7ba:	f023 0303 	bic.w	r3, r3, #3
 801c7be:	b29b      	uxth	r3, r3
 801c7c0:	4413      	add	r3, r2
 801c7c2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 801c7c4:	897a      	ldrh	r2, [r7, #10]
 801c7c6:	88bb      	ldrh	r3, [r7, #4]
 801c7c8:	3303      	adds	r3, #3
 801c7ca:	f023 0303 	bic.w	r3, r3, #3
 801c7ce:	429a      	cmp	r2, r3
 801c7d0:	d201      	bcs.n	801c7d6 <pbuf_alloc+0x242>
        return NULL;
 801c7d2:	2300      	movs	r3, #0
 801c7d4:	e06e      	b.n	801c8b4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 801c7d6:	897b      	ldrh	r3, [r7, #10]
 801c7d8:	4618      	mov	r0, r3
 801c7da:	f7ff fb31 	bl	801be40 <mem_malloc>
 801c7de:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 801c7e0:	69fb      	ldr	r3, [r7, #28]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d101      	bne.n	801c7ea <pbuf_alloc+0x256>
      return NULL;
 801c7e6:	2300      	movs	r3, #0
 801c7e8:	e064      	b.n	801c8b4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 801c7ea:	8afb      	ldrh	r3, [r7, #22]
 801c7ec:	3310      	adds	r3, #16
 801c7ee:	69fa      	ldr	r2, [r7, #28]
 801c7f0:	4413      	add	r3, r2
 801c7f2:	3303      	adds	r3, #3
 801c7f4:	f023 0303 	bic.w	r3, r3, #3
 801c7f8:	461a      	mov	r2, r3
 801c7fa:	69fb      	ldr	r3, [r7, #28]
 801c7fc:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801c7fe:	69fb      	ldr	r3, [r7, #28]
 801c800:	88ba      	ldrh	r2, [r7, #4]
 801c802:	811a      	strh	r2, [r3, #8]
 801c804:	69fb      	ldr	r3, [r7, #28]
 801c806:	891a      	ldrh	r2, [r3, #8]
 801c808:	69fb      	ldr	r3, [r7, #28]
 801c80a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801c80c:	69fb      	ldr	r3, [r7, #28]
 801c80e:	2200      	movs	r2, #0
 801c810:	601a      	str	r2, [r3, #0]
    p->type = type;
 801c812:	69fb      	ldr	r3, [r7, #28]
 801c814:	79ba      	ldrb	r2, [r7, #6]
 801c816:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801c818:	69fb      	ldr	r3, [r7, #28]
 801c81a:	685b      	ldr	r3, [r3, #4]
 801c81c:	f003 0303 	and.w	r3, r3, #3
 801c820:	2b00      	cmp	r3, #0
 801c822:	d03f      	beq.n	801c8a4 <pbuf_alloc+0x310>
 801c824:	4b15      	ldr	r3, [pc, #84]	; (801c87c <pbuf_alloc+0x2e8>)
 801c826:	f240 1277 	movw	r2, #375	; 0x177
 801c82a:	491c      	ldr	r1, [pc, #112]	; (801c89c <pbuf_alloc+0x308>)
 801c82c:	4815      	ldr	r0, [pc, #84]	; (801c884 <pbuf_alloc+0x2f0>)
 801c82e:	f008 ff1f 	bl	8025670 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 801c832:	e037      	b.n	801c8a4 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801c834:	200b      	movs	r0, #11
 801c836:	f7ff fc73 	bl	801c120 <memp_malloc>
 801c83a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 801c83c:	69fb      	ldr	r3, [r7, #28]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d101      	bne.n	801c846 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 801c842:	2300      	movs	r3, #0
 801c844:	e036      	b.n	801c8b4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 801c846:	69fb      	ldr	r3, [r7, #28]
 801c848:	2200      	movs	r2, #0
 801c84a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801c84c:	69fb      	ldr	r3, [r7, #28]
 801c84e:	88ba      	ldrh	r2, [r7, #4]
 801c850:	811a      	strh	r2, [r3, #8]
 801c852:	69fb      	ldr	r3, [r7, #28]
 801c854:	891a      	ldrh	r2, [r3, #8]
 801c856:	69fb      	ldr	r3, [r7, #28]
 801c858:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801c85a:	69fb      	ldr	r3, [r7, #28]
 801c85c:	2200      	movs	r2, #0
 801c85e:	601a      	str	r2, [r3, #0]
    p->type = type;
 801c860:	69fb      	ldr	r3, [r7, #28]
 801c862:	79ba      	ldrb	r2, [r7, #6]
 801c864:	731a      	strb	r2, [r3, #12]
    break;
 801c866:	e01e      	b.n	801c8a6 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c868:	4b04      	ldr	r3, [pc, #16]	; (801c87c <pbuf_alloc+0x2e8>)
 801c86a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 801c86e:	490c      	ldr	r1, [pc, #48]	; (801c8a0 <pbuf_alloc+0x30c>)
 801c870:	4804      	ldr	r0, [pc, #16]	; (801c884 <pbuf_alloc+0x2f0>)
 801c872:	f008 fefd 	bl	8025670 <iprintf>
    return NULL;
 801c876:	2300      	movs	r3, #0
 801c878:	e01c      	b.n	801c8b4 <pbuf_alloc+0x320>
 801c87a:	bf00      	nop
 801c87c:	08027634 	.word	0x08027634
 801c880:	08027664 	.word	0x08027664
 801c884:	08027680 	.word	0x08027680
 801c888:	080276a8 	.word	0x080276a8
 801c88c:	080276d8 	.word	0x080276d8
 801c890:	0802770c 	.word	0x0802770c
 801c894:	08027740 	.word	0x08027740
 801c898:	08027754 	.word	0x08027754
 801c89c:	08027784 	.word	0x08027784
 801c8a0:	080277b0 	.word	0x080277b0
    break;
 801c8a4:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 801c8a6:	69fb      	ldr	r3, [r7, #28]
 801c8a8:	2201      	movs	r2, #1
 801c8aa:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801c8ac:	69fb      	ldr	r3, [r7, #28]
 801c8ae:	2200      	movs	r2, #0
 801c8b0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801c8b2:	69fb      	ldr	r3, [r7, #28]
}
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	3720      	adds	r7, #32
 801c8b8:	46bd      	mov	sp, r7
 801c8ba:	bd80      	pop	{r7, pc}

0801c8bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801c8bc:	b580      	push	{r7, lr}
 801c8be:	b084      	sub	sp, #16
 801c8c0:	af00      	add	r7, sp, #0
 801c8c2:	603b      	str	r3, [r7, #0]
 801c8c4:	4603      	mov	r3, r0
 801c8c6:	71fb      	strb	r3, [r7, #7]
 801c8c8:	460b      	mov	r3, r1
 801c8ca:	80bb      	strh	r3, [r7, #4]
 801c8cc:	4613      	mov	r3, r2
 801c8ce:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 801c8d0:	79fb      	ldrb	r3, [r7, #7]
 801c8d2:	2b04      	cmp	r3, #4
 801c8d4:	d81b      	bhi.n	801c90e <pbuf_alloced_custom+0x52>
 801c8d6:	a201      	add	r2, pc, #4	; (adr r2, 801c8dc <pbuf_alloced_custom+0x20>)
 801c8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c8dc:	0801c8f1 	.word	0x0801c8f1
 801c8e0:	0801c8f7 	.word	0x0801c8f7
 801c8e4:	0801c8fd 	.word	0x0801c8fd
 801c8e8:	0801c903 	.word	0x0801c903
 801c8ec:	0801c909 	.word	0x0801c909
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801c8f0:	2336      	movs	r3, #54	; 0x36
 801c8f2:	81fb      	strh	r3, [r7, #14]
    break;
 801c8f4:	e014      	b.n	801c920 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801c8f6:	2322      	movs	r3, #34	; 0x22
 801c8f8:	81fb      	strh	r3, [r7, #14]
    break;
 801c8fa:	e011      	b.n	801c920 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801c8fc:	230e      	movs	r3, #14
 801c8fe:	81fb      	strh	r3, [r7, #14]
    break;
 801c900:	e00e      	b.n	801c920 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801c902:	2300      	movs	r3, #0
 801c904:	81fb      	strh	r3, [r7, #14]
    break;
 801c906:	e00b      	b.n	801c920 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 801c908:	2300      	movs	r3, #0
 801c90a:	81fb      	strh	r3, [r7, #14]
    break;
 801c90c:	e008      	b.n	801c920 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 801c90e:	4b1d      	ldr	r3, [pc, #116]	; (801c984 <pbuf_alloced_custom+0xc8>)
 801c910:	f240 12c5 	movw	r2, #453	; 0x1c5
 801c914:	491c      	ldr	r1, [pc, #112]	; (801c988 <pbuf_alloced_custom+0xcc>)
 801c916:	481d      	ldr	r0, [pc, #116]	; (801c98c <pbuf_alloced_custom+0xd0>)
 801c918:	f008 feaa 	bl	8025670 <iprintf>
    return NULL;
 801c91c:	2300      	movs	r3, #0
 801c91e:	e02d      	b.n	801c97c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c920:	89fb      	ldrh	r3, [r7, #14]
 801c922:	3303      	adds	r3, #3
 801c924:	f023 0203 	bic.w	r2, r3, #3
 801c928:	88bb      	ldrh	r3, [r7, #4]
 801c92a:	441a      	add	r2, r3
 801c92c:	8bbb      	ldrh	r3, [r7, #28]
 801c92e:	429a      	cmp	r2, r3
 801c930:	d901      	bls.n	801c936 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801c932:	2300      	movs	r3, #0
 801c934:	e022      	b.n	801c97c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 801c936:	683b      	ldr	r3, [r7, #0]
 801c938:	2200      	movs	r2, #0
 801c93a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 801c93c:	69bb      	ldr	r3, [r7, #24]
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d008      	beq.n	801c954 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801c942:	89fb      	ldrh	r3, [r7, #14]
 801c944:	3303      	adds	r3, #3
 801c946:	f023 0303 	bic.w	r3, r3, #3
 801c94a:	69ba      	ldr	r2, [r7, #24]
 801c94c:	441a      	add	r2, r3
 801c94e:	683b      	ldr	r3, [r7, #0]
 801c950:	605a      	str	r2, [r3, #4]
 801c952:	e002      	b.n	801c95a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 801c954:	683b      	ldr	r3, [r7, #0]
 801c956:	2200      	movs	r2, #0
 801c958:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 801c95a:	683b      	ldr	r3, [r7, #0]
 801c95c:	2202      	movs	r2, #2
 801c95e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 801c960:	683b      	ldr	r3, [r7, #0]
 801c962:	88ba      	ldrh	r2, [r7, #4]
 801c964:	811a      	strh	r2, [r3, #8]
 801c966:	683b      	ldr	r3, [r7, #0]
 801c968:	891a      	ldrh	r2, [r3, #8]
 801c96a:	683b      	ldr	r3, [r7, #0]
 801c96c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801c96e:	683b      	ldr	r3, [r7, #0]
 801c970:	79ba      	ldrb	r2, [r7, #6]
 801c972:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 801c974:	683b      	ldr	r3, [r7, #0]
 801c976:	2201      	movs	r2, #1
 801c978:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801c97a:	683b      	ldr	r3, [r7, #0]
}
 801c97c:	4618      	mov	r0, r3
 801c97e:	3710      	adds	r7, #16
 801c980:	46bd      	mov	sp, r7
 801c982:	bd80      	pop	{r7, pc}
 801c984:	08027634 	.word	0x08027634
 801c988:	080277cc 	.word	0x080277cc
 801c98c:	08027680 	.word	0x08027680

0801c990 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801c990:	b580      	push	{r7, lr}
 801c992:	b086      	sub	sp, #24
 801c994:	af00      	add	r7, sp, #0
 801c996:	6078      	str	r0, [r7, #4]
 801c998:	460b      	mov	r3, r1
 801c99a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d106      	bne.n	801c9b0 <pbuf_realloc+0x20>
 801c9a2:	4b4b      	ldr	r3, [pc, #300]	; (801cad0 <pbuf_realloc+0x140>)
 801c9a4:	f240 12f3 	movw	r2, #499	; 0x1f3
 801c9a8:	494a      	ldr	r1, [pc, #296]	; (801cad4 <pbuf_realloc+0x144>)
 801c9aa:	484b      	ldr	r0, [pc, #300]	; (801cad8 <pbuf_realloc+0x148>)
 801c9ac:	f008 fe60 	bl	8025670 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	7b1b      	ldrb	r3, [r3, #12]
 801c9b4:	2b03      	cmp	r3, #3
 801c9b6:	d012      	beq.n	801c9de <pbuf_realloc+0x4e>
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	7b1b      	ldrb	r3, [r3, #12]
 801c9bc:	2b01      	cmp	r3, #1
 801c9be:	d00e      	beq.n	801c9de <pbuf_realloc+0x4e>
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	7b1b      	ldrb	r3, [r3, #12]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d00a      	beq.n	801c9de <pbuf_realloc+0x4e>
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	7b1b      	ldrb	r3, [r3, #12]
 801c9cc:	2b02      	cmp	r3, #2
 801c9ce:	d006      	beq.n	801c9de <pbuf_realloc+0x4e>
 801c9d0:	4b3f      	ldr	r3, [pc, #252]	; (801cad0 <pbuf_realloc+0x140>)
 801c9d2:	f240 12f7 	movw	r2, #503	; 0x1f7
 801c9d6:	4941      	ldr	r1, [pc, #260]	; (801cadc <pbuf_realloc+0x14c>)
 801c9d8:	483f      	ldr	r0, [pc, #252]	; (801cad8 <pbuf_realloc+0x148>)
 801c9da:	f008 fe49 	bl	8025670 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	891b      	ldrh	r3, [r3, #8]
 801c9e2:	887a      	ldrh	r2, [r7, #2]
 801c9e4:	429a      	cmp	r2, r3
 801c9e6:	d26f      	bcs.n	801cac8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 801c9e8:	887b      	ldrh	r3, [r7, #2]
 801c9ea:	687a      	ldr	r2, [r7, #4]
 801c9ec:	8912      	ldrh	r2, [r2, #8]
 801c9ee:	1a9b      	subs	r3, r3, r2
 801c9f0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801c9f2:	887b      	ldrh	r3, [r7, #2]
 801c9f4:	827b      	strh	r3, [r7, #18]
  q = p;
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801c9fa:	e025      	b.n	801ca48 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801c9fc:	697b      	ldr	r3, [r7, #20]
 801c9fe:	895b      	ldrh	r3, [r3, #10]
 801ca00:	8a7a      	ldrh	r2, [r7, #18]
 801ca02:	1ad3      	subs	r3, r2, r3
 801ca04:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ca0c:	4293      	cmp	r3, r2
 801ca0e:	dd06      	ble.n	801ca1e <pbuf_realloc+0x8e>
 801ca10:	4b2f      	ldr	r3, [pc, #188]	; (801cad0 <pbuf_realloc+0x140>)
 801ca12:	f240 220b 	movw	r2, #523	; 0x20b
 801ca16:	4932      	ldr	r1, [pc, #200]	; (801cae0 <pbuf_realloc+0x150>)
 801ca18:	482f      	ldr	r0, [pc, #188]	; (801cad8 <pbuf_realloc+0x148>)
 801ca1a:	f008 fe29 	bl	8025670 <iprintf>
    q->tot_len += (u16_t)grow;
 801ca1e:	697b      	ldr	r3, [r7, #20]
 801ca20:	891a      	ldrh	r2, [r3, #8]
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	b29b      	uxth	r3, r3
 801ca26:	4413      	add	r3, r2
 801ca28:	b29a      	uxth	r2, r3
 801ca2a:	697b      	ldr	r3, [r7, #20]
 801ca2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801ca2e:	697b      	ldr	r3, [r7, #20]
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801ca34:	697b      	ldr	r3, [r7, #20]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d106      	bne.n	801ca48 <pbuf_realloc+0xb8>
 801ca3a:	4b25      	ldr	r3, [pc, #148]	; (801cad0 <pbuf_realloc+0x140>)
 801ca3c:	f240 220f 	movw	r2, #527	; 0x20f
 801ca40:	4928      	ldr	r1, [pc, #160]	; (801cae4 <pbuf_realloc+0x154>)
 801ca42:	4825      	ldr	r0, [pc, #148]	; (801cad8 <pbuf_realloc+0x148>)
 801ca44:	f008 fe14 	bl	8025670 <iprintf>
  while (rem_len > q->len) {
 801ca48:	697b      	ldr	r3, [r7, #20]
 801ca4a:	895b      	ldrh	r3, [r3, #10]
 801ca4c:	8a7a      	ldrh	r2, [r7, #18]
 801ca4e:	429a      	cmp	r2, r3
 801ca50:	d8d4      	bhi.n	801c9fc <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 801ca52:	697b      	ldr	r3, [r7, #20]
 801ca54:	7b1b      	ldrb	r3, [r3, #12]
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d122      	bne.n	801caa0 <pbuf_realloc+0x110>
 801ca5a:	697b      	ldr	r3, [r7, #20]
 801ca5c:	895b      	ldrh	r3, [r3, #10]
 801ca5e:	8a7a      	ldrh	r2, [r7, #18]
 801ca60:	429a      	cmp	r2, r3
 801ca62:	d01d      	beq.n	801caa0 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801ca64:	697b      	ldr	r3, [r7, #20]
 801ca66:	7b5b      	ldrb	r3, [r3, #13]
 801ca68:	f003 0302 	and.w	r3, r3, #2
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d117      	bne.n	801caa0 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 801ca70:	697b      	ldr	r3, [r7, #20]
 801ca72:	685b      	ldr	r3, [r3, #4]
 801ca74:	461a      	mov	r2, r3
 801ca76:	697b      	ldr	r3, [r7, #20]
 801ca78:	1ad3      	subs	r3, r2, r3
 801ca7a:	b29a      	uxth	r2, r3
 801ca7c:	8a7b      	ldrh	r3, [r7, #18]
 801ca7e:	4413      	add	r3, r2
 801ca80:	b29b      	uxth	r3, r3
 801ca82:	4619      	mov	r1, r3
 801ca84:	6978      	ldr	r0, [r7, #20]
 801ca86:	f7ff f8f1 	bl	801bc6c <mem_trim>
 801ca8a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801ca8c:	697b      	ldr	r3, [r7, #20]
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d106      	bne.n	801caa0 <pbuf_realloc+0x110>
 801ca92:	4b0f      	ldr	r3, [pc, #60]	; (801cad0 <pbuf_realloc+0x140>)
 801ca94:	f240 221d 	movw	r2, #541	; 0x21d
 801ca98:	4913      	ldr	r1, [pc, #76]	; (801cae8 <pbuf_realloc+0x158>)
 801ca9a:	480f      	ldr	r0, [pc, #60]	; (801cad8 <pbuf_realloc+0x148>)
 801ca9c:	f008 fde8 	bl	8025670 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801caa0:	697b      	ldr	r3, [r7, #20]
 801caa2:	8a7a      	ldrh	r2, [r7, #18]
 801caa4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801caa6:	697b      	ldr	r3, [r7, #20]
 801caa8:	895a      	ldrh	r2, [r3, #10]
 801caaa:	697b      	ldr	r3, [r7, #20]
 801caac:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801caae:	697b      	ldr	r3, [r7, #20]
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d004      	beq.n	801cac0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801cab6:	697b      	ldr	r3, [r7, #20]
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	4618      	mov	r0, r3
 801cabc:	f000 f8dc 	bl	801cc78 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801cac0:	697b      	ldr	r3, [r7, #20]
 801cac2:	2200      	movs	r2, #0
 801cac4:	601a      	str	r2, [r3, #0]
 801cac6:	e000      	b.n	801caca <pbuf_realloc+0x13a>
    return;
 801cac8:	bf00      	nop

}
 801caca:	3718      	adds	r7, #24
 801cacc:	46bd      	mov	sp, r7
 801cace:	bd80      	pop	{r7, pc}
 801cad0:	08027634 	.word	0x08027634
 801cad4:	080277f0 	.word	0x080277f0
 801cad8:	08027680 	.word	0x08027680
 801cadc:	08027808 	.word	0x08027808
 801cae0:	08027824 	.word	0x08027824
 801cae4:	08027838 	.word	0x08027838
 801cae8:	08027850 	.word	0x08027850

0801caec <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801caec:	b580      	push	{r7, lr}
 801caee:	b084      	sub	sp, #16
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	6078      	str	r0, [r7, #4]
 801caf4:	460b      	mov	r3, r1
 801caf6:	807b      	strh	r3, [r7, #2]
 801caf8:	4613      	mov	r3, r2
 801cafa:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d106      	bne.n	801cb10 <pbuf_header_impl+0x24>
 801cb02:	4b46      	ldr	r3, [pc, #280]	; (801cc1c <pbuf_header_impl+0x130>)
 801cb04:	f240 223f 	movw	r2, #575	; 0x23f
 801cb08:	4945      	ldr	r1, [pc, #276]	; (801cc20 <pbuf_header_impl+0x134>)
 801cb0a:	4846      	ldr	r0, [pc, #280]	; (801cc24 <pbuf_header_impl+0x138>)
 801cb0c:	f008 fdb0 	bl	8025670 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 801cb10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d002      	beq.n	801cb1e <pbuf_header_impl+0x32>
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d101      	bne.n	801cb22 <pbuf_header_impl+0x36>
    return 0;
 801cb1e:	2300      	movs	r3, #0
 801cb20:	e078      	b.n	801cc14 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 801cb22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	da10      	bge.n	801cb4c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 801cb2a:	887b      	ldrh	r3, [r7, #2]
 801cb2c:	425b      	negs	r3, r3
 801cb2e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	895b      	ldrh	r3, [r3, #10]
 801cb34:	89fa      	ldrh	r2, [r7, #14]
 801cb36:	429a      	cmp	r2, r3
 801cb38:	d90a      	bls.n	801cb50 <pbuf_header_impl+0x64>
 801cb3a:	4b38      	ldr	r3, [pc, #224]	; (801cc1c <pbuf_header_impl+0x130>)
 801cb3c:	f240 2247 	movw	r2, #583	; 0x247
 801cb40:	4939      	ldr	r1, [pc, #228]	; (801cc28 <pbuf_header_impl+0x13c>)
 801cb42:	4838      	ldr	r0, [pc, #224]	; (801cc24 <pbuf_header_impl+0x138>)
 801cb44:	f008 fd94 	bl	8025670 <iprintf>
 801cb48:	2301      	movs	r3, #1
 801cb4a:	e063      	b.n	801cc14 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 801cb4c:	887b      	ldrh	r3, [r7, #2]
 801cb4e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	7b1b      	ldrb	r3, [r3, #12]
 801cb54:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	685b      	ldr	r3, [r3, #4]
 801cb5a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 801cb5c:	89bb      	ldrh	r3, [r7, #12]
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d002      	beq.n	801cb68 <pbuf_header_impl+0x7c>
 801cb62:	89bb      	ldrh	r3, [r7, #12]
 801cb64:	2b03      	cmp	r3, #3
 801cb66:	d112      	bne.n	801cb8e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	685a      	ldr	r2, [r3, #4]
 801cb6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cb70:	425b      	negs	r3, r3
 801cb72:	441a      	add	r2, r3
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	685a      	ldr	r2, [r3, #4]
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	3310      	adds	r3, #16
 801cb80:	429a      	cmp	r2, r3
 801cb82:	d238      	bcs.n	801cbf6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	68ba      	ldr	r2, [r7, #8]
 801cb88:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 801cb8a:	2301      	movs	r3, #1
 801cb8c:	e042      	b.n	801cc14 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801cb8e:	89bb      	ldrh	r3, [r7, #12]
 801cb90:	2b02      	cmp	r3, #2
 801cb92:	d002      	beq.n	801cb9a <pbuf_header_impl+0xae>
 801cb94:	89bb      	ldrh	r3, [r7, #12]
 801cb96:	2b01      	cmp	r3, #1
 801cb98:	d124      	bne.n	801cbe4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801cb9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	da0d      	bge.n	801cbbe <pbuf_header_impl+0xd2>
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	895b      	ldrh	r3, [r3, #10]
 801cba6:	89fa      	ldrh	r2, [r7, #14]
 801cba8:	429a      	cmp	r2, r3
 801cbaa:	d808      	bhi.n	801cbbe <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	685a      	ldr	r2, [r3, #4]
 801cbb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cbb4:	425b      	negs	r3, r3
 801cbb6:	441a      	add	r2, r3
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	605a      	str	r2, [r3, #4]
 801cbbc:	e011      	b.n	801cbe2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 801cbbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	dd0b      	ble.n	801cbde <pbuf_header_impl+0xf2>
 801cbc6:	787b      	ldrb	r3, [r7, #1]
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d008      	beq.n	801cbde <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	685a      	ldr	r2, [r3, #4]
 801cbd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cbd4:	425b      	negs	r3, r3
 801cbd6:	441a      	add	r2, r3
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	605a      	str	r2, [r3, #4]
 801cbdc:	e001      	b.n	801cbe2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801cbde:	2301      	movs	r3, #1
 801cbe0:	e018      	b.n	801cc14 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801cbe2:	e008      	b.n	801cbf6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 801cbe4:	4b0d      	ldr	r3, [pc, #52]	; (801cc1c <pbuf_header_impl+0x130>)
 801cbe6:	f240 2277 	movw	r2, #631	; 0x277
 801cbea:	4910      	ldr	r1, [pc, #64]	; (801cc2c <pbuf_header_impl+0x140>)
 801cbec:	480d      	ldr	r0, [pc, #52]	; (801cc24 <pbuf_header_impl+0x138>)
 801cbee:	f008 fd3f 	bl	8025670 <iprintf>
    return 1;
 801cbf2:	2301      	movs	r3, #1
 801cbf4:	e00e      	b.n	801cc14 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	895a      	ldrh	r2, [r3, #10]
 801cbfa:	887b      	ldrh	r3, [r7, #2]
 801cbfc:	4413      	add	r3, r2
 801cbfe:	b29a      	uxth	r2, r3
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	891a      	ldrh	r2, [r3, #8]
 801cc08:	887b      	ldrh	r3, [r7, #2]
 801cc0a:	4413      	add	r3, r2
 801cc0c:	b29a      	uxth	r2, r3
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 801cc12:	2300      	movs	r3, #0
}
 801cc14:	4618      	mov	r0, r3
 801cc16:	3710      	adds	r7, #16
 801cc18:	46bd      	mov	sp, r7
 801cc1a:	bd80      	pop	{r7, pc}
 801cc1c:	08027634 	.word	0x08027634
 801cc20:	0802786c 	.word	0x0802786c
 801cc24:	08027680 	.word	0x08027680
 801cc28:	08027878 	.word	0x08027878
 801cc2c:	08027898 	.word	0x08027898

0801cc30 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 801cc30:	b580      	push	{r7, lr}
 801cc32:	b082      	sub	sp, #8
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	6078      	str	r0, [r7, #4]
 801cc38:	460b      	mov	r3, r1
 801cc3a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 801cc3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cc40:	2200      	movs	r2, #0
 801cc42:	4619      	mov	r1, r3
 801cc44:	6878      	ldr	r0, [r7, #4]
 801cc46:	f7ff ff51 	bl	801caec <pbuf_header_impl>
 801cc4a:	4603      	mov	r3, r0
}
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	3708      	adds	r7, #8
 801cc50:	46bd      	mov	sp, r7
 801cc52:	bd80      	pop	{r7, pc}

0801cc54 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b082      	sub	sp, #8
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
 801cc5c:	460b      	mov	r3, r1
 801cc5e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 801cc60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cc64:	2201      	movs	r2, #1
 801cc66:	4619      	mov	r1, r3
 801cc68:	6878      	ldr	r0, [r7, #4]
 801cc6a:	f7ff ff3f 	bl	801caec <pbuf_header_impl>
 801cc6e:	4603      	mov	r3, r0
}
 801cc70:	4618      	mov	r0, r3
 801cc72:	3708      	adds	r7, #8
 801cc74:	46bd      	mov	sp, r7
 801cc76:	bd80      	pop	{r7, pc}

0801cc78 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801cc78:	b580      	push	{r7, lr}
 801cc7a:	b088      	sub	sp, #32
 801cc7c:	af00      	add	r7, sp, #0
 801cc7e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d10b      	bne.n	801cc9e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d106      	bne.n	801cc9a <pbuf_free+0x22>
 801cc8c:	4b41      	ldr	r3, [pc, #260]	; (801cd94 <pbuf_free+0x11c>)
 801cc8e:	f240 22d2 	movw	r2, #722	; 0x2d2
 801cc92:	4941      	ldr	r1, [pc, #260]	; (801cd98 <pbuf_free+0x120>)
 801cc94:	4841      	ldr	r0, [pc, #260]	; (801cd9c <pbuf_free+0x124>)
 801cc96:	f008 fceb 	bl	8025670 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801cc9a:	2300      	movs	r3, #0
 801cc9c:	e076      	b.n	801cd8c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	7b1b      	ldrb	r3, [r3, #12]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d012      	beq.n	801cccc <pbuf_free+0x54>
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	7b1b      	ldrb	r3, [r3, #12]
 801ccaa:	2b01      	cmp	r3, #1
 801ccac:	d00e      	beq.n	801cccc <pbuf_free+0x54>
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	7b1b      	ldrb	r3, [r3, #12]
 801ccb2:	2b02      	cmp	r3, #2
 801ccb4:	d00a      	beq.n	801cccc <pbuf_free+0x54>
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	7b1b      	ldrb	r3, [r3, #12]
 801ccba:	2b03      	cmp	r3, #3
 801ccbc:	d006      	beq.n	801cccc <pbuf_free+0x54>
 801ccbe:	4b35      	ldr	r3, [pc, #212]	; (801cd94 <pbuf_free+0x11c>)
 801ccc0:	f240 22de 	movw	r2, #734	; 0x2de
 801ccc4:	4936      	ldr	r1, [pc, #216]	; (801cda0 <pbuf_free+0x128>)
 801ccc6:	4835      	ldr	r0, [pc, #212]	; (801cd9c <pbuf_free+0x124>)
 801ccc8:	f008 fcd2 	bl	8025670 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 801cccc:	2300      	movs	r3, #0
 801ccce:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801ccd0:	e058      	b.n	801cd84 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801ccd2:	f006 fb09 	bl	80232e8 <sys_arch_protect>
 801ccd6:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	89db      	ldrh	r3, [r3, #14]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d106      	bne.n	801ccee <pbuf_free+0x76>
 801cce0:	4b2c      	ldr	r3, [pc, #176]	; (801cd94 <pbuf_free+0x11c>)
 801cce2:	f240 22eb 	movw	r2, #747	; 0x2eb
 801cce6:	492f      	ldr	r1, [pc, #188]	; (801cda4 <pbuf_free+0x12c>)
 801cce8:	482c      	ldr	r0, [pc, #176]	; (801cd9c <pbuf_free+0x124>)
 801ccea:	f008 fcc1 	bl	8025670 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	89db      	ldrh	r3, [r3, #14]
 801ccf2:	3b01      	subs	r3, #1
 801ccf4:	b29a      	uxth	r2, r3
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	81da      	strh	r2, [r3, #14]
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	89db      	ldrh	r3, [r3, #14]
 801ccfe:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 801cd00:	69b8      	ldr	r0, [r7, #24]
 801cd02:	f006 faff 	bl	8023304 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801cd06:	8afb      	ldrh	r3, [r7, #22]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d139      	bne.n	801cd80 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	681b      	ldr	r3, [r3, #0]
 801cd10:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	7b1b      	ldrb	r3, [r3, #12]
 801cd16:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	7b5b      	ldrb	r3, [r3, #13]
 801cd1c:	f003 0302 	and.w	r3, r3, #2
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d011      	beq.n	801cd48 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801cd28:	68bb      	ldr	r3, [r7, #8]
 801cd2a:	691b      	ldr	r3, [r3, #16]
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d106      	bne.n	801cd3e <pbuf_free+0xc6>
 801cd30:	4b18      	ldr	r3, [pc, #96]	; (801cd94 <pbuf_free+0x11c>)
 801cd32:	f240 22f9 	movw	r2, #761	; 0x2f9
 801cd36:	491c      	ldr	r1, [pc, #112]	; (801cda8 <pbuf_free+0x130>)
 801cd38:	4818      	ldr	r0, [pc, #96]	; (801cd9c <pbuf_free+0x124>)
 801cd3a:	f008 fc99 	bl	8025670 <iprintf>
        pc->custom_free_function(p);
 801cd3e:	68bb      	ldr	r3, [r7, #8]
 801cd40:	691b      	ldr	r3, [r3, #16]
 801cd42:	6878      	ldr	r0, [r7, #4]
 801cd44:	4798      	blx	r3
 801cd46:	e015      	b.n	801cd74 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 801cd48:	89fb      	ldrh	r3, [r7, #14]
 801cd4a:	2b03      	cmp	r3, #3
 801cd4c:	d104      	bne.n	801cd58 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 801cd4e:	6879      	ldr	r1, [r7, #4]
 801cd50:	200c      	movs	r0, #12
 801cd52:	f7ff fa37 	bl	801c1c4 <memp_free>
 801cd56:	e00d      	b.n	801cd74 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 801cd58:	89fb      	ldrh	r3, [r7, #14]
 801cd5a:	2b01      	cmp	r3, #1
 801cd5c:	d002      	beq.n	801cd64 <pbuf_free+0xec>
 801cd5e:	89fb      	ldrh	r3, [r7, #14]
 801cd60:	2b02      	cmp	r3, #2
 801cd62:	d104      	bne.n	801cd6e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 801cd64:	6879      	ldr	r1, [r7, #4]
 801cd66:	200b      	movs	r0, #11
 801cd68:	f7ff fa2c 	bl	801c1c4 <memp_free>
 801cd6c:	e002      	b.n	801cd74 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 801cd6e:	6878      	ldr	r0, [r7, #4]
 801cd70:	f7fe ff0e 	bl	801bb90 <mem_free>
        }
      }
      count++;
 801cd74:	7ffb      	ldrb	r3, [r7, #31]
 801cd76:	3301      	adds	r3, #1
 801cd78:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801cd7a:	693b      	ldr	r3, [r7, #16]
 801cd7c:	607b      	str	r3, [r7, #4]
 801cd7e:	e001      	b.n	801cd84 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 801cd80:	2300      	movs	r3, #0
 801cd82:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d1a3      	bne.n	801ccd2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801cd8a:	7ffb      	ldrb	r3, [r7, #31]
}
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	3720      	adds	r7, #32
 801cd90:	46bd      	mov	sp, r7
 801cd92:	bd80      	pop	{r7, pc}
 801cd94:	08027634 	.word	0x08027634
 801cd98:	0802786c 	.word	0x0802786c
 801cd9c:	08027680 	.word	0x08027680
 801cda0:	080278a8 	.word	0x080278a8
 801cda4:	080278c0 	.word	0x080278c0
 801cda8:	080278d8 	.word	0x080278d8

0801cdac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801cdac:	b480      	push	{r7}
 801cdae:	b085      	sub	sp, #20
 801cdb0:	af00      	add	r7, sp, #0
 801cdb2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801cdb8:	e005      	b.n	801cdc6 <pbuf_clen+0x1a>
    ++len;
 801cdba:	89fb      	ldrh	r3, [r7, #14]
 801cdbc:	3301      	adds	r3, #1
 801cdbe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d1f6      	bne.n	801cdba <pbuf_clen+0xe>
  }
  return len;
 801cdcc:	89fb      	ldrh	r3, [r7, #14]
}
 801cdce:	4618      	mov	r0, r3
 801cdd0:	3714      	adds	r7, #20
 801cdd2:	46bd      	mov	sp, r7
 801cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdd8:	4770      	bx	lr
	...

0801cddc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801cddc:	b580      	push	{r7, lr}
 801cdde:	b084      	sub	sp, #16
 801cde0:	af00      	add	r7, sp, #0
 801cde2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d016      	beq.n	801ce18 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 801cdea:	f006 fa7d 	bl	80232e8 <sys_arch_protect>
 801cdee:	60f8      	str	r0, [r7, #12]
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	89db      	ldrh	r3, [r3, #14]
 801cdf4:	3301      	adds	r3, #1
 801cdf6:	b29a      	uxth	r2, r3
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	81da      	strh	r2, [r3, #14]
 801cdfc:	68f8      	ldr	r0, [r7, #12]
 801cdfe:	f006 fa81 	bl	8023304 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	89db      	ldrh	r3, [r3, #14]
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d106      	bne.n	801ce18 <pbuf_ref+0x3c>
 801ce0a:	4b05      	ldr	r3, [pc, #20]	; (801ce20 <pbuf_ref+0x44>)
 801ce0c:	f240 3239 	movw	r2, #825	; 0x339
 801ce10:	4904      	ldr	r1, [pc, #16]	; (801ce24 <pbuf_ref+0x48>)
 801ce12:	4805      	ldr	r0, [pc, #20]	; (801ce28 <pbuf_ref+0x4c>)
 801ce14:	f008 fc2c 	bl	8025670 <iprintf>
  }
}
 801ce18:	bf00      	nop
 801ce1a:	3710      	adds	r7, #16
 801ce1c:	46bd      	mov	sp, r7
 801ce1e:	bd80      	pop	{r7, pc}
 801ce20:	08027634 	.word	0x08027634
 801ce24:	080278fc 	.word	0x080278fc
 801ce28:	08027680 	.word	0x08027680

0801ce2c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801ce2c:	b580      	push	{r7, lr}
 801ce2e:	b084      	sub	sp, #16
 801ce30:	af00      	add	r7, sp, #0
 801ce32:	6078      	str	r0, [r7, #4]
 801ce34:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d002      	beq.n	801ce42 <pbuf_cat+0x16>
 801ce3c:	683b      	ldr	r3, [r7, #0]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d107      	bne.n	801ce52 <pbuf_cat+0x26>
 801ce42:	4b20      	ldr	r3, [pc, #128]	; (801cec4 <pbuf_cat+0x98>)
 801ce44:	f240 324d 	movw	r2, #845	; 0x34d
 801ce48:	491f      	ldr	r1, [pc, #124]	; (801cec8 <pbuf_cat+0x9c>)
 801ce4a:	4820      	ldr	r0, [pc, #128]	; (801cecc <pbuf_cat+0xa0>)
 801ce4c:	f008 fc10 	bl	8025670 <iprintf>
 801ce50:	e034      	b.n	801cebc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	60fb      	str	r3, [r7, #12]
 801ce56:	e00a      	b.n	801ce6e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	891a      	ldrh	r2, [r3, #8]
 801ce5c:	683b      	ldr	r3, [r7, #0]
 801ce5e:	891b      	ldrh	r3, [r3, #8]
 801ce60:	4413      	add	r3, r2
 801ce62:	b29a      	uxth	r2, r3
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801ce68:	68fb      	ldr	r3, [r7, #12]
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	60fb      	str	r3, [r7, #12]
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	d1f0      	bne.n	801ce58 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	891a      	ldrh	r2, [r3, #8]
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	895b      	ldrh	r3, [r3, #10]
 801ce7e:	429a      	cmp	r2, r3
 801ce80:	d006      	beq.n	801ce90 <pbuf_cat+0x64>
 801ce82:	4b10      	ldr	r3, [pc, #64]	; (801cec4 <pbuf_cat+0x98>)
 801ce84:	f240 3255 	movw	r2, #853	; 0x355
 801ce88:	4911      	ldr	r1, [pc, #68]	; (801ced0 <pbuf_cat+0xa4>)
 801ce8a:	4810      	ldr	r0, [pc, #64]	; (801cecc <pbuf_cat+0xa0>)
 801ce8c:	f008 fbf0 	bl	8025670 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d006      	beq.n	801cea6 <pbuf_cat+0x7a>
 801ce98:	4b0a      	ldr	r3, [pc, #40]	; (801cec4 <pbuf_cat+0x98>)
 801ce9a:	f240 3256 	movw	r2, #854	; 0x356
 801ce9e:	490d      	ldr	r1, [pc, #52]	; (801ced4 <pbuf_cat+0xa8>)
 801cea0:	480a      	ldr	r0, [pc, #40]	; (801cecc <pbuf_cat+0xa0>)
 801cea2:	f008 fbe5 	bl	8025670 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 801cea6:	68fb      	ldr	r3, [r7, #12]
 801cea8:	891a      	ldrh	r2, [r3, #8]
 801ceaa:	683b      	ldr	r3, [r7, #0]
 801ceac:	891b      	ldrh	r3, [r3, #8]
 801ceae:	4413      	add	r3, r2
 801ceb0:	b29a      	uxth	r2, r3
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801ceb6:	68fb      	ldr	r3, [r7, #12]
 801ceb8:	683a      	ldr	r2, [r7, #0]
 801ceba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801cebc:	3710      	adds	r7, #16
 801cebe:	46bd      	mov	sp, r7
 801cec0:	bd80      	pop	{r7, pc}
 801cec2:	bf00      	nop
 801cec4:	08027634 	.word	0x08027634
 801cec8:	08027910 	.word	0x08027910
 801cecc:	08027680 	.word	0x08027680
 801ced0:	08027948 	.word	0x08027948
 801ced4:	08027978 	.word	0x08027978

0801ced8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801ced8:	b580      	push	{r7, lr}
 801ceda:	b084      	sub	sp, #16
 801cedc:	af00      	add	r7, sp, #0
 801cede:	6078      	str	r0, [r7, #4]
 801cee0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 801cee2:	2300      	movs	r3, #0
 801cee4:	81fb      	strh	r3, [r7, #14]
 801cee6:	2300      	movs	r3, #0
 801cee8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d008      	beq.n	801cf02 <pbuf_copy+0x2a>
 801cef0:	683b      	ldr	r3, [r7, #0]
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d005      	beq.n	801cf02 <pbuf_copy+0x2a>
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	891a      	ldrh	r2, [r3, #8]
 801cefa:	683b      	ldr	r3, [r7, #0]
 801cefc:	891b      	ldrh	r3, [r3, #8]
 801cefe:	429a      	cmp	r2, r3
 801cf00:	d209      	bcs.n	801cf16 <pbuf_copy+0x3e>
 801cf02:	4b54      	ldr	r3, [pc, #336]	; (801d054 <pbuf_copy+0x17c>)
 801cf04:	f240 32bd 	movw	r2, #957	; 0x3bd
 801cf08:	4953      	ldr	r1, [pc, #332]	; (801d058 <pbuf_copy+0x180>)
 801cf0a:	4854      	ldr	r0, [pc, #336]	; (801d05c <pbuf_copy+0x184>)
 801cf0c:	f008 fbb0 	bl	8025670 <iprintf>
 801cf10:	f06f 030f 	mvn.w	r3, #15
 801cf14:	e099      	b.n	801d04a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	895b      	ldrh	r3, [r3, #10]
 801cf1a:	461a      	mov	r2, r3
 801cf1c:	89fb      	ldrh	r3, [r7, #14]
 801cf1e:	1ad2      	subs	r2, r2, r3
 801cf20:	683b      	ldr	r3, [r7, #0]
 801cf22:	895b      	ldrh	r3, [r3, #10]
 801cf24:	4619      	mov	r1, r3
 801cf26:	89bb      	ldrh	r3, [r7, #12]
 801cf28:	1acb      	subs	r3, r1, r3
 801cf2a:	429a      	cmp	r2, r3
 801cf2c:	db05      	blt.n	801cf3a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801cf2e:	683b      	ldr	r3, [r7, #0]
 801cf30:	895a      	ldrh	r2, [r3, #10]
 801cf32:	89bb      	ldrh	r3, [r7, #12]
 801cf34:	1ad3      	subs	r3, r2, r3
 801cf36:	817b      	strh	r3, [r7, #10]
 801cf38:	e004      	b.n	801cf44 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	895a      	ldrh	r2, [r3, #10]
 801cf3e:	89fb      	ldrh	r3, [r7, #14]
 801cf40:	1ad3      	subs	r3, r2, r3
 801cf42:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	685a      	ldr	r2, [r3, #4]
 801cf48:	89fb      	ldrh	r3, [r7, #14]
 801cf4a:	18d0      	adds	r0, r2, r3
 801cf4c:	683b      	ldr	r3, [r7, #0]
 801cf4e:	685a      	ldr	r2, [r3, #4]
 801cf50:	89bb      	ldrh	r3, [r7, #12]
 801cf52:	4413      	add	r3, r2
 801cf54:	897a      	ldrh	r2, [r7, #10]
 801cf56:	4619      	mov	r1, r3
 801cf58:	f009 f83d 	bl	8025fd6 <memcpy>
    offset_to += len;
 801cf5c:	89fa      	ldrh	r2, [r7, #14]
 801cf5e:	897b      	ldrh	r3, [r7, #10]
 801cf60:	4413      	add	r3, r2
 801cf62:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 801cf64:	89ba      	ldrh	r2, [r7, #12]
 801cf66:	897b      	ldrh	r3, [r7, #10]
 801cf68:	4413      	add	r3, r2
 801cf6a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	895b      	ldrh	r3, [r3, #10]
 801cf70:	89fa      	ldrh	r2, [r7, #14]
 801cf72:	429a      	cmp	r2, r3
 801cf74:	d906      	bls.n	801cf84 <pbuf_copy+0xac>
 801cf76:	4b37      	ldr	r3, [pc, #220]	; (801d054 <pbuf_copy+0x17c>)
 801cf78:	f240 32cd 	movw	r2, #973	; 0x3cd
 801cf7c:	4938      	ldr	r1, [pc, #224]	; (801d060 <pbuf_copy+0x188>)
 801cf7e:	4837      	ldr	r0, [pc, #220]	; (801d05c <pbuf_copy+0x184>)
 801cf80:	f008 fb76 	bl	8025670 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801cf84:	683b      	ldr	r3, [r7, #0]
 801cf86:	895b      	ldrh	r3, [r3, #10]
 801cf88:	89ba      	ldrh	r2, [r7, #12]
 801cf8a:	429a      	cmp	r2, r3
 801cf8c:	d906      	bls.n	801cf9c <pbuf_copy+0xc4>
 801cf8e:	4b31      	ldr	r3, [pc, #196]	; (801d054 <pbuf_copy+0x17c>)
 801cf90:	f240 32ce 	movw	r2, #974	; 0x3ce
 801cf94:	4933      	ldr	r1, [pc, #204]	; (801d064 <pbuf_copy+0x18c>)
 801cf96:	4831      	ldr	r0, [pc, #196]	; (801d05c <pbuf_copy+0x184>)
 801cf98:	f008 fb6a 	bl	8025670 <iprintf>
    if (offset_from >= p_from->len) {
 801cf9c:	683b      	ldr	r3, [r7, #0]
 801cf9e:	895b      	ldrh	r3, [r3, #10]
 801cfa0:	89ba      	ldrh	r2, [r7, #12]
 801cfa2:	429a      	cmp	r2, r3
 801cfa4:	d304      	bcc.n	801cfb0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 801cfa6:	2300      	movs	r3, #0
 801cfa8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801cfaa:	683b      	ldr	r3, [r7, #0]
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	895b      	ldrh	r3, [r3, #10]
 801cfb4:	89fa      	ldrh	r2, [r7, #14]
 801cfb6:	429a      	cmp	r2, r3
 801cfb8:	d114      	bne.n	801cfe4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801cfba:	2300      	movs	r3, #0
 801cfbc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	681b      	ldr	r3, [r3, #0]
 801cfc2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d10c      	bne.n	801cfe4 <pbuf_copy+0x10c>
 801cfca:	683b      	ldr	r3, [r7, #0]
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d009      	beq.n	801cfe4 <pbuf_copy+0x10c>
 801cfd0:	4b20      	ldr	r3, [pc, #128]	; (801d054 <pbuf_copy+0x17c>)
 801cfd2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801cfd6:	4924      	ldr	r1, [pc, #144]	; (801d068 <pbuf_copy+0x190>)
 801cfd8:	4820      	ldr	r0, [pc, #128]	; (801d05c <pbuf_copy+0x184>)
 801cfda:	f008 fb49 	bl	8025670 <iprintf>
 801cfde:	f06f 030f 	mvn.w	r3, #15
 801cfe2:	e032      	b.n	801d04a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801cfe4:	683b      	ldr	r3, [r7, #0]
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d013      	beq.n	801d012 <pbuf_copy+0x13a>
 801cfea:	683b      	ldr	r3, [r7, #0]
 801cfec:	895a      	ldrh	r2, [r3, #10]
 801cfee:	683b      	ldr	r3, [r7, #0]
 801cff0:	891b      	ldrh	r3, [r3, #8]
 801cff2:	429a      	cmp	r2, r3
 801cff4:	d10d      	bne.n	801d012 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801cff6:	683b      	ldr	r3, [r7, #0]
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d009      	beq.n	801d012 <pbuf_copy+0x13a>
 801cffe:	4b15      	ldr	r3, [pc, #84]	; (801d054 <pbuf_copy+0x17c>)
 801d000:	f240 32de 	movw	r2, #990	; 0x3de
 801d004:	4919      	ldr	r1, [pc, #100]	; (801d06c <pbuf_copy+0x194>)
 801d006:	4815      	ldr	r0, [pc, #84]	; (801d05c <pbuf_copy+0x184>)
 801d008:	f008 fb32 	bl	8025670 <iprintf>
 801d00c:	f06f 0305 	mvn.w	r3, #5
 801d010:	e01b      	b.n	801d04a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	2b00      	cmp	r3, #0
 801d016:	d013      	beq.n	801d040 <pbuf_copy+0x168>
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	895a      	ldrh	r2, [r3, #10]
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	891b      	ldrh	r3, [r3, #8]
 801d020:	429a      	cmp	r2, r3
 801d022:	d10d      	bne.n	801d040 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	2b00      	cmp	r3, #0
 801d02a:	d009      	beq.n	801d040 <pbuf_copy+0x168>
 801d02c:	4b09      	ldr	r3, [pc, #36]	; (801d054 <pbuf_copy+0x17c>)
 801d02e:	f240 32e3 	movw	r2, #995	; 0x3e3
 801d032:	490e      	ldr	r1, [pc, #56]	; (801d06c <pbuf_copy+0x194>)
 801d034:	4809      	ldr	r0, [pc, #36]	; (801d05c <pbuf_copy+0x184>)
 801d036:	f008 fb1b 	bl	8025670 <iprintf>
 801d03a:	f06f 0305 	mvn.w	r3, #5
 801d03e:	e004      	b.n	801d04a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801d040:	683b      	ldr	r3, [r7, #0]
 801d042:	2b00      	cmp	r3, #0
 801d044:	f47f af67 	bne.w	801cf16 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801d048:	2300      	movs	r3, #0
}
 801d04a:	4618      	mov	r0, r3
 801d04c:	3710      	adds	r7, #16
 801d04e:	46bd      	mov	sp, r7
 801d050:	bd80      	pop	{r7, pc}
 801d052:	bf00      	nop
 801d054:	08027634 	.word	0x08027634
 801d058:	080279c4 	.word	0x080279c4
 801d05c:	08027680 	.word	0x08027680
 801d060:	080279f4 	.word	0x080279f4
 801d064:	08027a0c 	.word	0x08027a0c
 801d068:	08027a28 	.word	0x08027a28
 801d06c:	08027a38 	.word	0x08027a38

0801d070 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801d070:	b580      	push	{r7, lr}
 801d072:	b088      	sub	sp, #32
 801d074:	af00      	add	r7, sp, #0
 801d076:	60f8      	str	r0, [r7, #12]
 801d078:	60b9      	str	r1, [r7, #8]
 801d07a:	4611      	mov	r1, r2
 801d07c:	461a      	mov	r2, r3
 801d07e:	460b      	mov	r3, r1
 801d080:	80fb      	strh	r3, [r7, #6]
 801d082:	4613      	mov	r3, r2
 801d084:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801d086:	2300      	movs	r3, #0
 801d088:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801d08a:	68fb      	ldr	r3, [r7, #12]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d108      	bne.n	801d0a2 <pbuf_copy_partial+0x32>
 801d090:	4b30      	ldr	r3, [pc, #192]	; (801d154 <pbuf_copy_partial+0xe4>)
 801d092:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801d096:	4930      	ldr	r1, [pc, #192]	; (801d158 <pbuf_copy_partial+0xe8>)
 801d098:	4830      	ldr	r0, [pc, #192]	; (801d15c <pbuf_copy_partial+0xec>)
 801d09a:	f008 fae9 	bl	8025670 <iprintf>
 801d09e:	2300      	movs	r3, #0
 801d0a0:	e054      	b.n	801d14c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801d0a2:	68bb      	ldr	r3, [r7, #8]
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	d108      	bne.n	801d0ba <pbuf_copy_partial+0x4a>
 801d0a8:	4b2a      	ldr	r3, [pc, #168]	; (801d154 <pbuf_copy_partial+0xe4>)
 801d0aa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801d0ae:	492c      	ldr	r1, [pc, #176]	; (801d160 <pbuf_copy_partial+0xf0>)
 801d0b0:	482a      	ldr	r0, [pc, #168]	; (801d15c <pbuf_copy_partial+0xec>)
 801d0b2:	f008 fadd 	bl	8025670 <iprintf>
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	e048      	b.n	801d14c <pbuf_copy_partial+0xdc>

  left = 0;
 801d0ba:	2300      	movs	r3, #0
 801d0bc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801d0be:	68fb      	ldr	r3, [r7, #12]
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d002      	beq.n	801d0ca <pbuf_copy_partial+0x5a>
 801d0c4:	68bb      	ldr	r3, [r7, #8]
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d101      	bne.n	801d0ce <pbuf_copy_partial+0x5e>
    return 0;
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	e03e      	b.n	801d14c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	61fb      	str	r3, [r7, #28]
 801d0d2:	e034      	b.n	801d13e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 801d0d4:	88bb      	ldrh	r3, [r7, #4]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d00a      	beq.n	801d0f0 <pbuf_copy_partial+0x80>
 801d0da:	69fb      	ldr	r3, [r7, #28]
 801d0dc:	895b      	ldrh	r3, [r3, #10]
 801d0de:	88ba      	ldrh	r2, [r7, #4]
 801d0e0:	429a      	cmp	r2, r3
 801d0e2:	d305      	bcc.n	801d0f0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 801d0e4:	69fb      	ldr	r3, [r7, #28]
 801d0e6:	895b      	ldrh	r3, [r3, #10]
 801d0e8:	88ba      	ldrh	r2, [r7, #4]
 801d0ea:	1ad3      	subs	r3, r2, r3
 801d0ec:	80bb      	strh	r3, [r7, #4]
 801d0ee:	e023      	b.n	801d138 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 801d0f0:	69fb      	ldr	r3, [r7, #28]
 801d0f2:	895a      	ldrh	r2, [r3, #10]
 801d0f4:	88bb      	ldrh	r3, [r7, #4]
 801d0f6:	1ad3      	subs	r3, r2, r3
 801d0f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801d0fa:	8b3a      	ldrh	r2, [r7, #24]
 801d0fc:	88fb      	ldrh	r3, [r7, #6]
 801d0fe:	429a      	cmp	r2, r3
 801d100:	d901      	bls.n	801d106 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 801d102:	88fb      	ldrh	r3, [r7, #6]
 801d104:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 801d106:	8b7b      	ldrh	r3, [r7, #26]
 801d108:	68ba      	ldr	r2, [r7, #8]
 801d10a:	18d0      	adds	r0, r2, r3
 801d10c:	69fb      	ldr	r3, [r7, #28]
 801d10e:	685a      	ldr	r2, [r3, #4]
 801d110:	88bb      	ldrh	r3, [r7, #4]
 801d112:	4413      	add	r3, r2
 801d114:	8b3a      	ldrh	r2, [r7, #24]
 801d116:	4619      	mov	r1, r3
 801d118:	f008 ff5d 	bl	8025fd6 <memcpy>
      copied_total += buf_copy_len;
 801d11c:	8afa      	ldrh	r2, [r7, #22]
 801d11e:	8b3b      	ldrh	r3, [r7, #24]
 801d120:	4413      	add	r3, r2
 801d122:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 801d124:	8b7a      	ldrh	r2, [r7, #26]
 801d126:	8b3b      	ldrh	r3, [r7, #24]
 801d128:	4413      	add	r3, r2
 801d12a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 801d12c:	88fa      	ldrh	r2, [r7, #6]
 801d12e:	8b3b      	ldrh	r3, [r7, #24]
 801d130:	1ad3      	subs	r3, r2, r3
 801d132:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801d134:	2300      	movs	r3, #0
 801d136:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801d138:	69fb      	ldr	r3, [r7, #28]
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	61fb      	str	r3, [r7, #28]
 801d13e:	88fb      	ldrh	r3, [r7, #6]
 801d140:	2b00      	cmp	r3, #0
 801d142:	d002      	beq.n	801d14a <pbuf_copy_partial+0xda>
 801d144:	69fb      	ldr	r3, [r7, #28]
 801d146:	2b00      	cmp	r3, #0
 801d148:	d1c4      	bne.n	801d0d4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 801d14a:	8afb      	ldrh	r3, [r7, #22]
}
 801d14c:	4618      	mov	r0, r3
 801d14e:	3720      	adds	r7, #32
 801d150:	46bd      	mov	sp, r7
 801d152:	bd80      	pop	{r7, pc}
 801d154:	08027634 	.word	0x08027634
 801d158:	08027a64 	.word	0x08027a64
 801d15c:	08027680 	.word	0x08027680
 801d160:	08027a84 	.word	0x08027a84

0801d164 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801d164:	b480      	push	{r7}
 801d166:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801d168:	bf00      	nop
 801d16a:	46bd      	mov	sp, r7
 801d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d170:	4770      	bx	lr
	...

0801d174 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801d174:	b580      	push	{r7, lr}
 801d176:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801d178:	f000 ffb8 	bl	801e0ec <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801d17c:	4b07      	ldr	r3, [pc, #28]	; (801d19c <tcp_tmr+0x28>)
 801d17e:	781b      	ldrb	r3, [r3, #0]
 801d180:	3301      	adds	r3, #1
 801d182:	b2da      	uxtb	r2, r3
 801d184:	4b05      	ldr	r3, [pc, #20]	; (801d19c <tcp_tmr+0x28>)
 801d186:	701a      	strb	r2, [r3, #0]
 801d188:	4b04      	ldr	r3, [pc, #16]	; (801d19c <tcp_tmr+0x28>)
 801d18a:	781b      	ldrb	r3, [r3, #0]
 801d18c:	f003 0301 	and.w	r3, r3, #1
 801d190:	2b00      	cmp	r3, #0
 801d192:	d001      	beq.n	801d198 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801d194:	f000 fcea 	bl	801db6c <tcp_slowtmr>
  }
}
 801d198:	bf00      	nop
 801d19a:	bd80      	pop	{r7, pc}
 801d19c:	200040e9 	.word	0x200040e9

0801d1a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801d1a0:	b480      	push	{r7}
 801d1a2:	b085      	sub	sp, #20
 801d1a4:	af00      	add	r7, sp, #0
 801d1a6:	6078      	str	r0, [r7, #4]
 801d1a8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	60fb      	str	r3, [r7, #12]
 801d1ae:	e00a      	b.n	801d1c6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801d1b4:	683b      	ldr	r3, [r7, #0]
 801d1b6:	429a      	cmp	r2, r3
 801d1b8:	d102      	bne.n	801d1c0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801d1ba:	68fb      	ldr	r3, [r7, #12]
 801d1bc:	2200      	movs	r2, #0
 801d1be:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	68db      	ldr	r3, [r3, #12]
 801d1c4:	60fb      	str	r3, [r7, #12]
 801d1c6:	68fb      	ldr	r3, [r7, #12]
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d1f1      	bne.n	801d1b0 <tcp_remove_listener+0x10>
      }
   }
}
 801d1cc:	bf00      	nop
 801d1ce:	3714      	adds	r7, #20
 801d1d0:	46bd      	mov	sp, r7
 801d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1d6:	4770      	bx	lr

0801d1d8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b084      	sub	sp, #16
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d105      	bne.n	801d1f2 <tcp_listen_closed+0x1a>
 801d1e6:	4b13      	ldr	r3, [pc, #76]	; (801d234 <tcp_listen_closed+0x5c>)
 801d1e8:	22c0      	movs	r2, #192	; 0xc0
 801d1ea:	4913      	ldr	r1, [pc, #76]	; (801d238 <tcp_listen_closed+0x60>)
 801d1ec:	4813      	ldr	r0, [pc, #76]	; (801d23c <tcp_listen_closed+0x64>)
 801d1ee:	f008 fa3f 	bl	8025670 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	7d1b      	ldrb	r3, [r3, #20]
 801d1f6:	2b01      	cmp	r3, #1
 801d1f8:	d005      	beq.n	801d206 <tcp_listen_closed+0x2e>
 801d1fa:	4b0e      	ldr	r3, [pc, #56]	; (801d234 <tcp_listen_closed+0x5c>)
 801d1fc:	22c1      	movs	r2, #193	; 0xc1
 801d1fe:	4910      	ldr	r1, [pc, #64]	; (801d240 <tcp_listen_closed+0x68>)
 801d200:	480e      	ldr	r0, [pc, #56]	; (801d23c <tcp_listen_closed+0x64>)
 801d202:	f008 fa35 	bl	8025670 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801d206:	2301      	movs	r3, #1
 801d208:	60fb      	str	r3, [r7, #12]
 801d20a:	e00b      	b.n	801d224 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 801d20c:	4a0d      	ldr	r2, [pc, #52]	; (801d244 <tcp_listen_closed+0x6c>)
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	6879      	ldr	r1, [r7, #4]
 801d218:	4618      	mov	r0, r3
 801d21a:	f7ff ffc1 	bl	801d1a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	3301      	adds	r3, #1
 801d222:	60fb      	str	r3, [r7, #12]
 801d224:	68fb      	ldr	r3, [r7, #12]
 801d226:	2b03      	cmp	r3, #3
 801d228:	d9f0      	bls.n	801d20c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801d22a:	bf00      	nop
 801d22c:	3710      	adds	r7, #16
 801d22e:	46bd      	mov	sp, r7
 801d230:	bd80      	pop	{r7, pc}
 801d232:	bf00      	nop
 801d234:	08027bb8 	.word	0x08027bb8
 801d238:	08027be8 	.word	0x08027be8
 801d23c:	08027bf4 	.word	0x08027bf4
 801d240:	08027c1c 	.word	0x08027c1c
 801d244:	0802af4c 	.word	0x0802af4c

0801d248 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801d248:	b5b0      	push	{r4, r5, r7, lr}
 801d24a:	b086      	sub	sp, #24
 801d24c:	af02      	add	r7, sp, #8
 801d24e:	6078      	str	r0, [r7, #4]
 801d250:	460b      	mov	r3, r1
 801d252:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801d254:	78fb      	ldrb	r3, [r7, #3]
 801d256:	2b00      	cmp	r3, #0
 801d258:	d075      	beq.n	801d346 <tcp_close_shutdown+0xfe>
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	7d1b      	ldrb	r3, [r3, #20]
 801d25e:	2b04      	cmp	r3, #4
 801d260:	d003      	beq.n	801d26a <tcp_close_shutdown+0x22>
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	7d1b      	ldrb	r3, [r3, #20]
 801d266:	2b07      	cmp	r3, #7
 801d268:	d16d      	bne.n	801d346 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d26e:	2b00      	cmp	r3, #0
 801d270:	d104      	bne.n	801d27c <tcp_close_shutdown+0x34>
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d27a:	d064      	beq.n	801d346 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	7e9b      	ldrb	r3, [r3, #26]
 801d280:	f003 0310 	and.w	r3, r3, #16
 801d284:	2b00      	cmp	r3, #0
 801d286:	d106      	bne.n	801d296 <tcp_close_shutdown+0x4e>
 801d288:	4b59      	ldr	r3, [pc, #356]	; (801d3f0 <tcp_close_shutdown+0x1a8>)
 801d28a:	f240 120f 	movw	r2, #271	; 0x10f
 801d28e:	4959      	ldr	r1, [pc, #356]	; (801d3f4 <tcp_close_shutdown+0x1ac>)
 801d290:	4859      	ldr	r0, [pc, #356]	; (801d3f8 <tcp_close_shutdown+0x1b0>)
 801d292:	f008 f9ed 	bl	8025670 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801d29e:	687c      	ldr	r4, [r7, #4]
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	1d1d      	adds	r5, r3, #4
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	8adb      	ldrh	r3, [r3, #22]
 801d2a8:	687a      	ldr	r2, [r7, #4]
 801d2aa:	8b12      	ldrh	r2, [r2, #24]
 801d2ac:	9201      	str	r2, [sp, #4]
 801d2ae:	9300      	str	r3, [sp, #0]
 801d2b0:	462b      	mov	r3, r5
 801d2b2:	4622      	mov	r2, r4
 801d2b4:	f004 ff1c 	bl	80220f0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801d2b8:	6878      	ldr	r0, [r7, #4]
 801d2ba:	f001 fa4d 	bl	801e758 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801d2be:	4b4f      	ldr	r3, [pc, #316]	; (801d3fc <tcp_close_shutdown+0x1b4>)
 801d2c0:	681a      	ldr	r2, [r3, #0]
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	429a      	cmp	r2, r3
 801d2c6:	d105      	bne.n	801d2d4 <tcp_close_shutdown+0x8c>
 801d2c8:	4b4c      	ldr	r3, [pc, #304]	; (801d3fc <tcp_close_shutdown+0x1b4>)
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	68db      	ldr	r3, [r3, #12]
 801d2ce:	4a4b      	ldr	r2, [pc, #300]	; (801d3fc <tcp_close_shutdown+0x1b4>)
 801d2d0:	6013      	str	r3, [r2, #0]
 801d2d2:	e013      	b.n	801d2fc <tcp_close_shutdown+0xb4>
 801d2d4:	4b49      	ldr	r3, [pc, #292]	; (801d3fc <tcp_close_shutdown+0x1b4>)
 801d2d6:	681b      	ldr	r3, [r3, #0]
 801d2d8:	60fb      	str	r3, [r7, #12]
 801d2da:	e00c      	b.n	801d2f6 <tcp_close_shutdown+0xae>
 801d2dc:	68fb      	ldr	r3, [r7, #12]
 801d2de:	68da      	ldr	r2, [r3, #12]
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	429a      	cmp	r2, r3
 801d2e4:	d104      	bne.n	801d2f0 <tcp_close_shutdown+0xa8>
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	68da      	ldr	r2, [r3, #12]
 801d2ea:	68fb      	ldr	r3, [r7, #12]
 801d2ec:	60da      	str	r2, [r3, #12]
 801d2ee:	e005      	b.n	801d2fc <tcp_close_shutdown+0xb4>
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	68db      	ldr	r3, [r3, #12]
 801d2f4:	60fb      	str	r3, [r7, #12]
 801d2f6:	68fb      	ldr	r3, [r7, #12]
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	d1ef      	bne.n	801d2dc <tcp_close_shutdown+0x94>
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	2200      	movs	r2, #0
 801d300:	60da      	str	r2, [r3, #12]
 801d302:	4b3f      	ldr	r3, [pc, #252]	; (801d400 <tcp_close_shutdown+0x1b8>)
 801d304:	2201      	movs	r2, #1
 801d306:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	7d1b      	ldrb	r3, [r3, #20]
 801d30c:	2b04      	cmp	r3, #4
 801d30e:	d10c      	bne.n	801d32a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	220a      	movs	r2, #10
 801d314:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d316:	4b3b      	ldr	r3, [pc, #236]	; (801d404 <tcp_close_shutdown+0x1bc>)
 801d318:	681a      	ldr	r2, [r3, #0]
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	60da      	str	r2, [r3, #12]
 801d31e:	4a39      	ldr	r2, [pc, #228]	; (801d404 <tcp_close_shutdown+0x1bc>)
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	6013      	str	r3, [r2, #0]
 801d324:	f005 f932 	bl	802258c <tcp_timer_needed>
 801d328:	e00b      	b.n	801d342 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 801d32a:	4b37      	ldr	r3, [pc, #220]	; (801d408 <tcp_close_shutdown+0x1c0>)
 801d32c:	681a      	ldr	r2, [r3, #0]
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	429a      	cmp	r2, r3
 801d332:	d102      	bne.n	801d33a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 801d334:	f003 fd72 	bl	8020e1c <tcp_trigger_input_pcb_close>
 801d338:	e003      	b.n	801d342 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 801d33a:	6879      	ldr	r1, [r7, #4]
 801d33c:	2001      	movs	r0, #1
 801d33e:	f7fe ff41 	bl	801c1c4 <memp_free>
        }
      }
      return ERR_OK;
 801d342:	2300      	movs	r3, #0
 801d344:	e050      	b.n	801d3e8 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	7d1b      	ldrb	r3, [r3, #20]
 801d34a:	2b01      	cmp	r3, #1
 801d34c:	d02e      	beq.n	801d3ac <tcp_close_shutdown+0x164>
 801d34e:	2b02      	cmp	r3, #2
 801d350:	d038      	beq.n	801d3c4 <tcp_close_shutdown+0x17c>
 801d352:	2b00      	cmp	r3, #0
 801d354:	d142      	bne.n	801d3dc <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	8adb      	ldrh	r3, [r3, #22]
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	d021      	beq.n	801d3a2 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801d35e:	4b2b      	ldr	r3, [pc, #172]	; (801d40c <tcp_close_shutdown+0x1c4>)
 801d360:	681a      	ldr	r2, [r3, #0]
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	429a      	cmp	r2, r3
 801d366:	d105      	bne.n	801d374 <tcp_close_shutdown+0x12c>
 801d368:	4b28      	ldr	r3, [pc, #160]	; (801d40c <tcp_close_shutdown+0x1c4>)
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	68db      	ldr	r3, [r3, #12]
 801d36e:	4a27      	ldr	r2, [pc, #156]	; (801d40c <tcp_close_shutdown+0x1c4>)
 801d370:	6013      	str	r3, [r2, #0]
 801d372:	e013      	b.n	801d39c <tcp_close_shutdown+0x154>
 801d374:	4b25      	ldr	r3, [pc, #148]	; (801d40c <tcp_close_shutdown+0x1c4>)
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	60bb      	str	r3, [r7, #8]
 801d37a:	e00c      	b.n	801d396 <tcp_close_shutdown+0x14e>
 801d37c:	68bb      	ldr	r3, [r7, #8]
 801d37e:	68da      	ldr	r2, [r3, #12]
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	429a      	cmp	r2, r3
 801d384:	d104      	bne.n	801d390 <tcp_close_shutdown+0x148>
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	68da      	ldr	r2, [r3, #12]
 801d38a:	68bb      	ldr	r3, [r7, #8]
 801d38c:	60da      	str	r2, [r3, #12]
 801d38e:	e005      	b.n	801d39c <tcp_close_shutdown+0x154>
 801d390:	68bb      	ldr	r3, [r7, #8]
 801d392:	68db      	ldr	r3, [r3, #12]
 801d394:	60bb      	str	r3, [r7, #8]
 801d396:	68bb      	ldr	r3, [r7, #8]
 801d398:	2b00      	cmp	r3, #0
 801d39a:	d1ef      	bne.n	801d37c <tcp_close_shutdown+0x134>
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	2200      	movs	r2, #0
 801d3a0:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 801d3a2:	6879      	ldr	r1, [r7, #4]
 801d3a4:	2001      	movs	r0, #1
 801d3a6:	f7fe ff0d 	bl	801c1c4 <memp_free>
    break;
 801d3aa:	e01c      	b.n	801d3e6 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 801d3ac:	6878      	ldr	r0, [r7, #4]
 801d3ae:	f7ff ff13 	bl	801d1d8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801d3b2:	6879      	ldr	r1, [r7, #4]
 801d3b4:	4816      	ldr	r0, [pc, #88]	; (801d410 <tcp_close_shutdown+0x1c8>)
 801d3b6:	f001 fa11 	bl	801e7dc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801d3ba:	6879      	ldr	r1, [r7, #4]
 801d3bc:	2002      	movs	r0, #2
 801d3be:	f7fe ff01 	bl	801c1c4 <memp_free>
    break;
 801d3c2:	e010      	b.n	801d3e6 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 801d3c4:	6879      	ldr	r1, [r7, #4]
 801d3c6:	480d      	ldr	r0, [pc, #52]	; (801d3fc <tcp_close_shutdown+0x1b4>)
 801d3c8:	f001 fa08 	bl	801e7dc <tcp_pcb_remove>
 801d3cc:	4b0c      	ldr	r3, [pc, #48]	; (801d400 <tcp_close_shutdown+0x1b8>)
 801d3ce:	2201      	movs	r2, #1
 801d3d0:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 801d3d2:	6879      	ldr	r1, [r7, #4]
 801d3d4:	2001      	movs	r0, #1
 801d3d6:	f7fe fef5 	bl	801c1c4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 801d3da:	e004      	b.n	801d3e6 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 801d3dc:	6878      	ldr	r0, [r7, #4]
 801d3de:	f000 f819 	bl	801d414 <tcp_close_shutdown_fin>
 801d3e2:	4603      	mov	r3, r0
 801d3e4:	e000      	b.n	801d3e8 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 801d3e6:	2300      	movs	r3, #0
}
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	3710      	adds	r7, #16
 801d3ec:	46bd      	mov	sp, r7
 801d3ee:	bdb0      	pop	{r4, r5, r7, pc}
 801d3f0:	08027bb8 	.word	0x08027bb8
 801d3f4:	08027c34 	.word	0x08027c34
 801d3f8:	08027bf4 	.word	0x08027bf4
 801d3fc:	20008c24 	.word	0x20008c24
 801d400:	20008c20 	.word	0x20008c20
 801d404:	20008c34 	.word	0x20008c34
 801d408:	20008c38 	.word	0x20008c38
 801d40c:	20008c30 	.word	0x20008c30
 801d410:	20008c2c 	.word	0x20008c2c

0801d414 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801d414:	b580      	push	{r7, lr}
 801d416:	b084      	sub	sp, #16
 801d418:	af00      	add	r7, sp, #0
 801d41a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d106      	bne.n	801d430 <tcp_close_shutdown_fin+0x1c>
 801d422:	4b2c      	ldr	r3, [pc, #176]	; (801d4d4 <tcp_close_shutdown_fin+0xc0>)
 801d424:	f240 124d 	movw	r2, #333	; 0x14d
 801d428:	492b      	ldr	r1, [pc, #172]	; (801d4d8 <tcp_close_shutdown_fin+0xc4>)
 801d42a:	482c      	ldr	r0, [pc, #176]	; (801d4dc <tcp_close_shutdown_fin+0xc8>)
 801d42c:	f008 f920 	bl	8025670 <iprintf>

  switch (pcb->state) {
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	7d1b      	ldrb	r3, [r3, #20]
 801d434:	2b04      	cmp	r3, #4
 801d436:	d010      	beq.n	801d45a <tcp_close_shutdown_fin+0x46>
 801d438:	2b07      	cmp	r3, #7
 801d43a:	d01b      	beq.n	801d474 <tcp_close_shutdown_fin+0x60>
 801d43c:	2b03      	cmp	r3, #3
 801d43e:	d126      	bne.n	801d48e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 801d440:	6878      	ldr	r0, [r7, #4]
 801d442:	f003 fd77 	bl	8020f34 <tcp_send_fin>
 801d446:	4603      	mov	r3, r0
 801d448:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d44a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d11f      	bne.n	801d492 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	2205      	movs	r2, #5
 801d456:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d458:	e01b      	b.n	801d492 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 801d45a:	6878      	ldr	r0, [r7, #4]
 801d45c:	f003 fd6a 	bl	8020f34 <tcp_send_fin>
 801d460:	4603      	mov	r3, r0
 801d462:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d468:	2b00      	cmp	r3, #0
 801d46a:	d114      	bne.n	801d496 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	2205      	movs	r2, #5
 801d470:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d472:	e010      	b.n	801d496 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 801d474:	6878      	ldr	r0, [r7, #4]
 801d476:	f003 fd5d 	bl	8020f34 <tcp_send_fin>
 801d47a:	4603      	mov	r3, r0
 801d47c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d482:	2b00      	cmp	r3, #0
 801d484:	d109      	bne.n	801d49a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	2209      	movs	r2, #9
 801d48a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d48c:	e005      	b.n	801d49a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 801d48e:	2300      	movs	r3, #0
 801d490:	e01c      	b.n	801d4cc <tcp_close_shutdown_fin+0xb8>
    break;
 801d492:	bf00      	nop
 801d494:	e002      	b.n	801d49c <tcp_close_shutdown_fin+0x88>
    break;
 801d496:	bf00      	nop
 801d498:	e000      	b.n	801d49c <tcp_close_shutdown_fin+0x88>
    break;
 801d49a:	bf00      	nop
  }

  if (err == ERR_OK) {
 801d49c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d103      	bne.n	801d4ac <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801d4a4:	6878      	ldr	r0, [r7, #4]
 801d4a6:	f004 fb9b 	bl	8021be0 <tcp_output>
 801d4aa:	e00d      	b.n	801d4c8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801d4ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4b4:	d108      	bne.n	801d4c8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	7e9b      	ldrb	r3, [r3, #26]
 801d4ba:	f043 0308 	orr.w	r3, r3, #8
 801d4be:	b2da      	uxtb	r2, r3
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	e001      	b.n	801d4cc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 801d4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d4cc:	4618      	mov	r0, r3
 801d4ce:	3710      	adds	r7, #16
 801d4d0:	46bd      	mov	sp, r7
 801d4d2:	bd80      	pop	{r7, pc}
 801d4d4:	08027bb8 	.word	0x08027bb8
 801d4d8:	08027be8 	.word	0x08027be8
 801d4dc:	08027bf4 	.word	0x08027bf4

0801d4e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801d4e0:	b580      	push	{r7, lr}
 801d4e2:	b082      	sub	sp, #8
 801d4e4:	af00      	add	r7, sp, #0
 801d4e6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	7d1b      	ldrb	r3, [r3, #20]
 801d4ec:	2b01      	cmp	r3, #1
 801d4ee:	d006      	beq.n	801d4fe <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	7e9b      	ldrb	r3, [r3, #26]
 801d4f4:	f043 0310 	orr.w	r3, r3, #16
 801d4f8:	b2da      	uxtb	r2, r3
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801d4fe:	2101      	movs	r1, #1
 801d500:	6878      	ldr	r0, [r7, #4]
 801d502:	f7ff fea1 	bl	801d248 <tcp_close_shutdown>
 801d506:	4603      	mov	r3, r0
}
 801d508:	4618      	mov	r0, r3
 801d50a:	3708      	adds	r7, #8
 801d50c:	46bd      	mov	sp, r7
 801d50e:	bd80      	pop	{r7, pc}

0801d510 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801d510:	b580      	push	{r7, lr}
 801d512:	b084      	sub	sp, #16
 801d514:	af00      	add	r7, sp, #0
 801d516:	60f8      	str	r0, [r7, #12]
 801d518:	60b9      	str	r1, [r7, #8]
 801d51a:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	7d1b      	ldrb	r3, [r3, #20]
 801d520:	2b01      	cmp	r3, #1
 801d522:	d102      	bne.n	801d52a <tcp_shutdown+0x1a>
    return ERR_CONN;
 801d524:	f06f 030a 	mvn.w	r3, #10
 801d528:	e035      	b.n	801d596 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 801d52a:	68bb      	ldr	r3, [r7, #8]
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d01b      	beq.n	801d568 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	7e9b      	ldrb	r3, [r3, #26]
 801d534:	f043 0310 	orr.w	r3, r3, #16
 801d538:	b2da      	uxtb	r2, r3
 801d53a:	68fb      	ldr	r3, [r7, #12]
 801d53c:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	2b00      	cmp	r3, #0
 801d542:	d005      	beq.n	801d550 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801d544:	2101      	movs	r1, #1
 801d546:	68f8      	ldr	r0, [r7, #12]
 801d548:	f7ff fe7e 	bl	801d248 <tcp_close_shutdown>
 801d54c:	4603      	mov	r3, r0
 801d54e:	e022      	b.n	801d596 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801d550:	68fb      	ldr	r3, [r7, #12]
 801d552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d554:	2b00      	cmp	r3, #0
 801d556:	d007      	beq.n	801d568 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d55c:	4618      	mov	r0, r3
 801d55e:	f7ff fb8b 	bl	801cc78 <pbuf_free>
      pcb->refused_data = NULL;
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	2200      	movs	r2, #0
 801d566:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d012      	beq.n	801d594 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	7d1b      	ldrb	r3, [r3, #20]
 801d572:	2b03      	cmp	r3, #3
 801d574:	db0b      	blt.n	801d58e <tcp_shutdown+0x7e>
 801d576:	2b04      	cmp	r3, #4
 801d578:	dd01      	ble.n	801d57e <tcp_shutdown+0x6e>
 801d57a:	2b07      	cmp	r3, #7
 801d57c:	d107      	bne.n	801d58e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801d57e:	68bb      	ldr	r3, [r7, #8]
 801d580:	b2db      	uxtb	r3, r3
 801d582:	4619      	mov	r1, r3
 801d584:	68f8      	ldr	r0, [r7, #12]
 801d586:	f7ff fe5f 	bl	801d248 <tcp_close_shutdown>
 801d58a:	4603      	mov	r3, r0
 801d58c:	e003      	b.n	801d596 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 801d58e:	f06f 030a 	mvn.w	r3, #10
 801d592:	e000      	b.n	801d596 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 801d594:	2300      	movs	r3, #0
}
 801d596:	4618      	mov	r0, r3
 801d598:	3710      	adds	r7, #16
 801d59a:	46bd      	mov	sp, r7
 801d59c:	bd80      	pop	{r7, pc}
	...

0801d5a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801d5a0:	b580      	push	{r7, lr}
 801d5a2:	b08c      	sub	sp, #48	; 0x30
 801d5a4:	af02      	add	r7, sp, #8
 801d5a6:	6078      	str	r0, [r7, #4]
 801d5a8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	7d1b      	ldrb	r3, [r3, #20]
 801d5ae:	2b01      	cmp	r3, #1
 801d5b0:	d106      	bne.n	801d5c0 <tcp_abandon+0x20>
 801d5b2:	4b4d      	ldr	r3, [pc, #308]	; (801d6e8 <tcp_abandon+0x148>)
 801d5b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d5b8:	494c      	ldr	r1, [pc, #304]	; (801d6ec <tcp_abandon+0x14c>)
 801d5ba:	484d      	ldr	r0, [pc, #308]	; (801d6f0 <tcp_abandon+0x150>)
 801d5bc:	f008 f858 	bl	8025670 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	7d1b      	ldrb	r3, [r3, #20]
 801d5c4:	2b0a      	cmp	r3, #10
 801d5c6:	d108      	bne.n	801d5da <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801d5c8:	6879      	ldr	r1, [r7, #4]
 801d5ca:	484a      	ldr	r0, [pc, #296]	; (801d6f4 <tcp_abandon+0x154>)
 801d5cc:	f001 f906 	bl	801e7dc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801d5d0:	6879      	ldr	r1, [r7, #4]
 801d5d2:	2001      	movs	r0, #1
 801d5d4:	f7fe fdf6 	bl	801c1c4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 801d5d8:	e081      	b.n	801d6de <tcp_abandon+0x13e>
    int send_rst = 0;
 801d5da:	2300      	movs	r3, #0
 801d5dc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801d5de:	2300      	movs	r3, #0
 801d5e0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d5e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801d5e8:	687b      	ldr	r3, [r7, #4]
 801d5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5ec:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d5f4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	691b      	ldr	r3, [r3, #16]
 801d5fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	7d1b      	ldrb	r3, [r3, #20]
 801d600:	2b00      	cmp	r3, #0
 801d602:	d126      	bne.n	801d652 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	8adb      	ldrh	r3, [r3, #22]
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d02e      	beq.n	801d66a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d60c:	4b3a      	ldr	r3, [pc, #232]	; (801d6f8 <tcp_abandon+0x158>)
 801d60e:	681a      	ldr	r2, [r3, #0]
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	429a      	cmp	r2, r3
 801d614:	d105      	bne.n	801d622 <tcp_abandon+0x82>
 801d616:	4b38      	ldr	r3, [pc, #224]	; (801d6f8 <tcp_abandon+0x158>)
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	68db      	ldr	r3, [r3, #12]
 801d61c:	4a36      	ldr	r2, [pc, #216]	; (801d6f8 <tcp_abandon+0x158>)
 801d61e:	6013      	str	r3, [r2, #0]
 801d620:	e013      	b.n	801d64a <tcp_abandon+0xaa>
 801d622:	4b35      	ldr	r3, [pc, #212]	; (801d6f8 <tcp_abandon+0x158>)
 801d624:	681b      	ldr	r3, [r3, #0]
 801d626:	61fb      	str	r3, [r7, #28]
 801d628:	e00c      	b.n	801d644 <tcp_abandon+0xa4>
 801d62a:	69fb      	ldr	r3, [r7, #28]
 801d62c:	68da      	ldr	r2, [r3, #12]
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	429a      	cmp	r2, r3
 801d632:	d104      	bne.n	801d63e <tcp_abandon+0x9e>
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	68da      	ldr	r2, [r3, #12]
 801d638:	69fb      	ldr	r3, [r7, #28]
 801d63a:	60da      	str	r2, [r3, #12]
 801d63c:	e005      	b.n	801d64a <tcp_abandon+0xaa>
 801d63e:	69fb      	ldr	r3, [r7, #28]
 801d640:	68db      	ldr	r3, [r3, #12]
 801d642:	61fb      	str	r3, [r7, #28]
 801d644:	69fb      	ldr	r3, [r7, #28]
 801d646:	2b00      	cmp	r3, #0
 801d648:	d1ef      	bne.n	801d62a <tcp_abandon+0x8a>
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	2200      	movs	r2, #0
 801d64e:	60da      	str	r2, [r3, #12]
 801d650:	e00b      	b.n	801d66a <tcp_abandon+0xca>
      send_rst = reset;
 801d652:	683b      	ldr	r3, [r7, #0]
 801d654:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	8adb      	ldrh	r3, [r3, #22]
 801d65a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d65c:	6879      	ldr	r1, [r7, #4]
 801d65e:	4827      	ldr	r0, [pc, #156]	; (801d6fc <tcp_abandon+0x15c>)
 801d660:	f001 f8bc 	bl	801e7dc <tcp_pcb_remove>
 801d664:	4b26      	ldr	r3, [pc, #152]	; (801d700 <tcp_abandon+0x160>)
 801d666:	2201      	movs	r2, #1
 801d668:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d004      	beq.n	801d67c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d676:	4618      	mov	r0, r3
 801d678:	f000 fe05 	bl	801e286 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d680:	2b00      	cmp	r3, #0
 801d682:	d004      	beq.n	801d68e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d688:	4618      	mov	r0, r3
 801d68a:	f000 fdfc 	bl	801e286 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d692:	2b00      	cmp	r3, #0
 801d694:	d004      	beq.n	801d6a0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d69a:	4618      	mov	r0, r3
 801d69c:	f000 fdf3 	bl	801e286 <tcp_segs_free>
    if (send_rst) {
 801d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d00c      	beq.n	801d6c0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801d6a6:	687a      	ldr	r2, [r7, #4]
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	1d19      	adds	r1, r3, #4
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	8b1b      	ldrh	r3, [r3, #24]
 801d6b0:	9301      	str	r3, [sp, #4]
 801d6b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d6b4:	9300      	str	r3, [sp, #0]
 801d6b6:	460b      	mov	r3, r1
 801d6b8:	6979      	ldr	r1, [r7, #20]
 801d6ba:	69b8      	ldr	r0, [r7, #24]
 801d6bc:	f004 fd18 	bl	80220f0 <tcp_rst>
    last_state = pcb->state;
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	7d1b      	ldrb	r3, [r3, #20]
 801d6c4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 801d6c6:	6879      	ldr	r1, [r7, #4]
 801d6c8:	2001      	movs	r0, #1
 801d6ca:	f7fe fd7b 	bl	801c1c4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d6ce:	693b      	ldr	r3, [r7, #16]
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d004      	beq.n	801d6de <tcp_abandon+0x13e>
 801d6d4:	693b      	ldr	r3, [r7, #16]
 801d6d6:	f06f 010c 	mvn.w	r1, #12
 801d6da:	68f8      	ldr	r0, [r7, #12]
 801d6dc:	4798      	blx	r3
}
 801d6de:	bf00      	nop
 801d6e0:	3728      	adds	r7, #40	; 0x28
 801d6e2:	46bd      	mov	sp, r7
 801d6e4:	bd80      	pop	{r7, pc}
 801d6e6:	bf00      	nop
 801d6e8:	08027bb8 	.word	0x08027bb8
 801d6ec:	08027c50 	.word	0x08027c50
 801d6f0:	08027bf4 	.word	0x08027bf4
 801d6f4:	20008c34 	.word	0x20008c34
 801d6f8:	20008c30 	.word	0x20008c30
 801d6fc:	20008c24 	.word	0x20008c24
 801d700:	20008c20 	.word	0x20008c20

0801d704 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801d704:	b580      	push	{r7, lr}
 801d706:	b082      	sub	sp, #8
 801d708:	af00      	add	r7, sp, #0
 801d70a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801d70c:	2101      	movs	r1, #1
 801d70e:	6878      	ldr	r0, [r7, #4]
 801d710:	f7ff ff46 	bl	801d5a0 <tcp_abandon>
}
 801d714:	bf00      	nop
 801d716:	3708      	adds	r7, #8
 801d718:	46bd      	mov	sp, r7
 801d71a:	bd80      	pop	{r7, pc}

0801d71c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b088      	sub	sp, #32
 801d720:	af00      	add	r7, sp, #0
 801d722:	60f8      	str	r0, [r7, #12]
 801d724:	60b9      	str	r1, [r7, #8]
 801d726:	4613      	mov	r3, r2
 801d728:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801d72a:	2304      	movs	r3, #4
 801d72c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d72e:	68bb      	ldr	r3, [r7, #8]
 801d730:	2b00      	cmp	r3, #0
 801d732:	d101      	bne.n	801d738 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801d734:	4b3c      	ldr	r3, [pc, #240]	; (801d828 <tcp_bind+0x10c>)
 801d736:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	d002      	beq.n	801d744 <tcp_bind+0x28>
 801d73e:	68bb      	ldr	r3, [r7, #8]
 801d740:	2b00      	cmp	r3, #0
 801d742:	d102      	bne.n	801d74a <tcp_bind+0x2e>
    return ERR_VAL;
 801d744:	f06f 0305 	mvn.w	r3, #5
 801d748:	e06a      	b.n	801d820 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	7d1b      	ldrb	r3, [r3, #20]
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d009      	beq.n	801d766 <tcp_bind+0x4a>
 801d752:	4b36      	ldr	r3, [pc, #216]	; (801d82c <tcp_bind+0x110>)
 801d754:	f44f 7211 	mov.w	r2, #580	; 0x244
 801d758:	4935      	ldr	r1, [pc, #212]	; (801d830 <tcp_bind+0x114>)
 801d75a:	4836      	ldr	r0, [pc, #216]	; (801d834 <tcp_bind+0x118>)
 801d75c:	f007 ff88 	bl	8025670 <iprintf>
 801d760:	f06f 0305 	mvn.w	r3, #5
 801d764:	e05c      	b.n	801d820 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 801d766:	88fb      	ldrh	r3, [r7, #6]
 801d768:	2b00      	cmp	r3, #0
 801d76a:	d109      	bne.n	801d780 <tcp_bind+0x64>
    port = tcp_new_port();
 801d76c:	f000 f9ba 	bl	801dae4 <tcp_new_port>
 801d770:	4603      	mov	r3, r0
 801d772:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d774:	88fb      	ldrh	r3, [r7, #6]
 801d776:	2b00      	cmp	r3, #0
 801d778:	d135      	bne.n	801d7e6 <tcp_bind+0xca>
      return ERR_BUF;
 801d77a:	f06f 0301 	mvn.w	r3, #1
 801d77e:	e04f      	b.n	801d820 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801d780:	2300      	movs	r3, #0
 801d782:	61fb      	str	r3, [r7, #28]
 801d784:	e02b      	b.n	801d7de <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801d786:	4a2c      	ldr	r2, [pc, #176]	; (801d838 <tcp_bind+0x11c>)
 801d788:	69fb      	ldr	r3, [r7, #28]
 801d78a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	61bb      	str	r3, [r7, #24]
 801d792:	e01e      	b.n	801d7d2 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 801d794:	69bb      	ldr	r3, [r7, #24]
 801d796:	8adb      	ldrh	r3, [r3, #22]
 801d798:	88fa      	ldrh	r2, [r7, #6]
 801d79a:	429a      	cmp	r2, r3
 801d79c:	d116      	bne.n	801d7cc <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801d79e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	d010      	beq.n	801d7c6 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 801d7a4:	69bb      	ldr	r3, [r7, #24]
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d00c      	beq.n	801d7c6 <tcp_bind+0xaa>
 801d7ac:	68bb      	ldr	r3, [r7, #8]
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d009      	beq.n	801d7c6 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 801d7b2:	68bb      	ldr	r3, [r7, #8]
 801d7b4:	681b      	ldr	r3, [r3, #0]
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	d005      	beq.n	801d7c6 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801d7ba:	69bb      	ldr	r3, [r7, #24]
 801d7bc:	681a      	ldr	r2, [r3, #0]
 801d7be:	68bb      	ldr	r3, [r7, #8]
 801d7c0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801d7c2:	429a      	cmp	r2, r3
 801d7c4:	d102      	bne.n	801d7cc <tcp_bind+0xb0>
              return ERR_USE;
 801d7c6:	f06f 0307 	mvn.w	r3, #7
 801d7ca:	e029      	b.n	801d820 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801d7cc:	69bb      	ldr	r3, [r7, #24]
 801d7ce:	68db      	ldr	r3, [r3, #12]
 801d7d0:	61bb      	str	r3, [r7, #24]
 801d7d2:	69bb      	ldr	r3, [r7, #24]
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	d1dd      	bne.n	801d794 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 801d7d8:	69fb      	ldr	r3, [r7, #28]
 801d7da:	3301      	adds	r3, #1
 801d7dc:	61fb      	str	r3, [r7, #28]
 801d7de:	69fa      	ldr	r2, [r7, #28]
 801d7e0:	697b      	ldr	r3, [r7, #20]
 801d7e2:	429a      	cmp	r2, r3
 801d7e4:	dbcf      	blt.n	801d786 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 801d7e6:	68bb      	ldr	r3, [r7, #8]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d00c      	beq.n	801d806 <tcp_bind+0xea>
 801d7ec:	68bb      	ldr	r3, [r7, #8]
 801d7ee:	681b      	ldr	r3, [r3, #0]
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d008      	beq.n	801d806 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801d7f4:	68bb      	ldr	r3, [r7, #8]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d002      	beq.n	801d800 <tcp_bind+0xe4>
 801d7fa:	68bb      	ldr	r3, [r7, #8]
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	e000      	b.n	801d802 <tcp_bind+0xe6>
 801d800:	2300      	movs	r3, #0
 801d802:	68fa      	ldr	r2, [r7, #12]
 801d804:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	88fa      	ldrh	r2, [r7, #6]
 801d80a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801d80c:	4b0b      	ldr	r3, [pc, #44]	; (801d83c <tcp_bind+0x120>)
 801d80e:	681a      	ldr	r2, [r3, #0]
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	60da      	str	r2, [r3, #12]
 801d814:	4a09      	ldr	r2, [pc, #36]	; (801d83c <tcp_bind+0x120>)
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	6013      	str	r3, [r2, #0]
 801d81a:	f004 feb7 	bl	802258c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801d81e:	2300      	movs	r3, #0
}
 801d820:	4618      	mov	r0, r3
 801d822:	3720      	adds	r7, #32
 801d824:	46bd      	mov	sp, r7
 801d826:	bd80      	pop	{r7, pc}
 801d828:	0802ae60 	.word	0x0802ae60
 801d82c:	08027bb8 	.word	0x08027bb8
 801d830:	08027c84 	.word	0x08027c84
 801d834:	08027bf4 	.word	0x08027bf4
 801d838:	0802af4c 	.word	0x0802af4c
 801d83c:	20008c30 	.word	0x20008c30

0801d840 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801d840:	b580      	push	{r7, lr}
 801d842:	b084      	sub	sp, #16
 801d844:	af00      	add	r7, sp, #0
 801d846:	60f8      	str	r0, [r7, #12]
 801d848:	60b9      	str	r1, [r7, #8]
 801d84a:	4613      	mov	r3, r2
 801d84c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 801d84e:	68b8      	ldr	r0, [r7, #8]
 801d850:	f7ff ff58 	bl	801d704 <tcp_abort>

  return ERR_ABRT;
 801d854:	f06f 030c 	mvn.w	r3, #12
}
 801d858:	4618      	mov	r0, r3
 801d85a:	3710      	adds	r7, #16
 801d85c:	46bd      	mov	sp, r7
 801d85e:	bd80      	pop	{r7, pc}

0801d860 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801d860:	b580      	push	{r7, lr}
 801d862:	b088      	sub	sp, #32
 801d864:	af00      	add	r7, sp, #0
 801d866:	60f8      	str	r0, [r7, #12]
 801d868:	460b      	mov	r3, r1
 801d86a:	607a      	str	r2, [r7, #4]
 801d86c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801d86e:	2300      	movs	r3, #0
 801d870:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	7d1b      	ldrb	r3, [r3, #20]
 801d876:	2b00      	cmp	r3, #0
 801d878:	d009      	beq.n	801d88e <tcp_listen_with_backlog_and_err+0x2e>
 801d87a:	4b3f      	ldr	r3, [pc, #252]	; (801d978 <tcp_listen_with_backlog_and_err+0x118>)
 801d87c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 801d880:	493e      	ldr	r1, [pc, #248]	; (801d97c <tcp_listen_with_backlog_and_err+0x11c>)
 801d882:	483f      	ldr	r0, [pc, #252]	; (801d980 <tcp_listen_with_backlog_and_err+0x120>)
 801d884:	f007 fef4 	bl	8025670 <iprintf>
 801d888:	23f1      	movs	r3, #241	; 0xf1
 801d88a:	76fb      	strb	r3, [r7, #27]
 801d88c:	e069      	b.n	801d962 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	7d1b      	ldrb	r3, [r3, #20]
 801d892:	2b01      	cmp	r3, #1
 801d894:	d104      	bne.n	801d8a0 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801d89a:	23f7      	movs	r3, #247	; 0xf7
 801d89c:	76fb      	strb	r3, [r7, #27]
    goto done;
 801d89e:	e060      	b.n	801d962 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801d8a0:	2002      	movs	r0, #2
 801d8a2:	f7fe fc3d 	bl	801c120 <memp_malloc>
 801d8a6:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801d8a8:	69fb      	ldr	r3, [r7, #28]
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	d102      	bne.n	801d8b4 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 801d8ae:	23ff      	movs	r3, #255	; 0xff
 801d8b0:	76fb      	strb	r3, [r7, #27]
    goto done;
 801d8b2:	e056      	b.n	801d962 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	691a      	ldr	r2, [r3, #16]
 801d8b8:	69fb      	ldr	r3, [r7, #28]
 801d8ba:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	8ada      	ldrh	r2, [r3, #22]
 801d8c0:	69fb      	ldr	r3, [r7, #28]
 801d8c2:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801d8c4:	69fb      	ldr	r3, [r7, #28]
 801d8c6:	2201      	movs	r2, #1
 801d8c8:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	7d5a      	ldrb	r2, [r3, #21]
 801d8ce:	69fb      	ldr	r3, [r7, #28]
 801d8d0:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	7a1a      	ldrb	r2, [r3, #8]
 801d8d6:	69fb      	ldr	r3, [r7, #28]
 801d8d8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	7a9a      	ldrb	r2, [r3, #10]
 801d8de:	69fb      	ldr	r3, [r7, #28]
 801d8e0:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	7a5a      	ldrb	r2, [r3, #9]
 801d8e6:	69fb      	ldr	r3, [r7, #28]
 801d8e8:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	681a      	ldr	r2, [r3, #0]
 801d8ee:	69fb      	ldr	r3, [r7, #28]
 801d8f0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	8adb      	ldrh	r3, [r3, #22]
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	d021      	beq.n	801d93e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801d8fa:	4b22      	ldr	r3, [pc, #136]	; (801d984 <tcp_listen_with_backlog_and_err+0x124>)
 801d8fc:	681a      	ldr	r2, [r3, #0]
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	429a      	cmp	r2, r3
 801d902:	d105      	bne.n	801d910 <tcp_listen_with_backlog_and_err+0xb0>
 801d904:	4b1f      	ldr	r3, [pc, #124]	; (801d984 <tcp_listen_with_backlog_and_err+0x124>)
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	68db      	ldr	r3, [r3, #12]
 801d90a:	4a1e      	ldr	r2, [pc, #120]	; (801d984 <tcp_listen_with_backlog_and_err+0x124>)
 801d90c:	6013      	str	r3, [r2, #0]
 801d90e:	e013      	b.n	801d938 <tcp_listen_with_backlog_and_err+0xd8>
 801d910:	4b1c      	ldr	r3, [pc, #112]	; (801d984 <tcp_listen_with_backlog_and_err+0x124>)
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	617b      	str	r3, [r7, #20]
 801d916:	e00c      	b.n	801d932 <tcp_listen_with_backlog_and_err+0xd2>
 801d918:	697b      	ldr	r3, [r7, #20]
 801d91a:	68da      	ldr	r2, [r3, #12]
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	429a      	cmp	r2, r3
 801d920:	d104      	bne.n	801d92c <tcp_listen_with_backlog_and_err+0xcc>
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	68da      	ldr	r2, [r3, #12]
 801d926:	697b      	ldr	r3, [r7, #20]
 801d928:	60da      	str	r2, [r3, #12]
 801d92a:	e005      	b.n	801d938 <tcp_listen_with_backlog_and_err+0xd8>
 801d92c:	697b      	ldr	r3, [r7, #20]
 801d92e:	68db      	ldr	r3, [r3, #12]
 801d930:	617b      	str	r3, [r7, #20]
 801d932:	697b      	ldr	r3, [r7, #20]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d1ef      	bne.n	801d918 <tcp_listen_with_backlog_and_err+0xb8>
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	2200      	movs	r2, #0
 801d93c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 801d93e:	68f9      	ldr	r1, [r7, #12]
 801d940:	2001      	movs	r0, #1
 801d942:	f7fe fc3f 	bl	801c1c4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801d946:	69fb      	ldr	r3, [r7, #28]
 801d948:	4a0f      	ldr	r2, [pc, #60]	; (801d988 <tcp_listen_with_backlog_and_err+0x128>)
 801d94a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801d94c:	4b0f      	ldr	r3, [pc, #60]	; (801d98c <tcp_listen_with_backlog_and_err+0x12c>)
 801d94e:	681a      	ldr	r2, [r3, #0]
 801d950:	69fb      	ldr	r3, [r7, #28]
 801d952:	60da      	str	r2, [r3, #12]
 801d954:	4a0d      	ldr	r2, [pc, #52]	; (801d98c <tcp_listen_with_backlog_and_err+0x12c>)
 801d956:	69fb      	ldr	r3, [r7, #28]
 801d958:	6013      	str	r3, [r2, #0]
 801d95a:	f004 fe17 	bl	802258c <tcp_timer_needed>
  res = ERR_OK;
 801d95e:	2300      	movs	r3, #0
 801d960:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	2b00      	cmp	r3, #0
 801d966:	d002      	beq.n	801d96e <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	7efa      	ldrb	r2, [r7, #27]
 801d96c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801d96e:	69fb      	ldr	r3, [r7, #28]
}
 801d970:	4618      	mov	r0, r3
 801d972:	3720      	adds	r7, #32
 801d974:	46bd      	mov	sp, r7
 801d976:	bd80      	pop	{r7, pc}
 801d978:	08027bb8 	.word	0x08027bb8
 801d97c:	08027cac 	.word	0x08027cac
 801d980:	08027bf4 	.word	0x08027bf4
 801d984:	20008c30 	.word	0x20008c30
 801d988:	0801d841 	.word	0x0801d841
 801d98c:	20008c2c 	.word	0x20008c2c

0801d990 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801d990:	b580      	push	{r7, lr}
 801d992:	b084      	sub	sp, #16
 801d994:	af00      	add	r7, sp, #0
 801d996:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d99c:	687a      	ldr	r2, [r7, #4]
 801d99e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801d9a0:	4413      	add	r3, r2
 801d9a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9a8:	687a      	ldr	r2, [r7, #4]
 801d9aa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801d9ac:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801d9b0:	d802      	bhi.n	801d9b8 <tcp_update_rcv_ann_wnd+0x28>
 801d9b2:	687a      	ldr	r2, [r7, #4]
 801d9b4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801d9b6:	e001      	b.n	801d9bc <tcp_update_rcv_ann_wnd+0x2c>
 801d9b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d9bc:	4413      	add	r3, r2
 801d9be:	68fa      	ldr	r2, [r7, #12]
 801d9c0:	1ad3      	subs	r3, r2, r3
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	db08      	blt.n	801d9d8 <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9d2:	68fa      	ldr	r2, [r7, #12]
 801d9d4:	1ad3      	subs	r3, r2, r3
 801d9d6:	e020      	b.n	801da1a <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9e0:	1ad3      	subs	r3, r2, r3
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	dd03      	ble.n	801d9ee <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	2200      	movs	r2, #0
 801d9ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 801d9ec:	e014      	b.n	801da18 <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9f6:	1ad3      	subs	r3, r2, r3
 801d9f8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801d9fa:	68bb      	ldr	r3, [r7, #8]
 801d9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801da00:	d306      	bcc.n	801da10 <tcp_update_rcv_ann_wnd+0x80>
 801da02:	4b08      	ldr	r3, [pc, #32]	; (801da24 <tcp_update_rcv_ann_wnd+0x94>)
 801da04:	f44f 7242 	mov.w	r2, #776	; 0x308
 801da08:	4907      	ldr	r1, [pc, #28]	; (801da28 <tcp_update_rcv_ann_wnd+0x98>)
 801da0a:	4808      	ldr	r0, [pc, #32]	; (801da2c <tcp_update_rcv_ann_wnd+0x9c>)
 801da0c:	f007 fe30 	bl	8025670 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801da10:	68bb      	ldr	r3, [r7, #8]
 801da12:	b29a      	uxth	r2, r3
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801da18:	2300      	movs	r3, #0
  }
}
 801da1a:	4618      	mov	r0, r3
 801da1c:	3710      	adds	r7, #16
 801da1e:	46bd      	mov	sp, r7
 801da20:	bd80      	pop	{r7, pc}
 801da22:	bf00      	nop
 801da24:	08027bb8 	.word	0x08027bb8
 801da28:	08027cd0 	.word	0x08027cd0
 801da2c:	08027bf4 	.word	0x08027bf4

0801da30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801da30:	b580      	push	{r7, lr}
 801da32:	b084      	sub	sp, #16
 801da34:	af00      	add	r7, sp, #0
 801da36:	6078      	str	r0, [r7, #4]
 801da38:	460b      	mov	r3, r1
 801da3a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	7d1b      	ldrb	r3, [r3, #20]
 801da40:	2b01      	cmp	r3, #1
 801da42:	d106      	bne.n	801da52 <tcp_recved+0x22>
 801da44:	4b23      	ldr	r3, [pc, #140]	; (801dad4 <tcp_recved+0xa4>)
 801da46:	f44f 7248 	mov.w	r2, #800	; 0x320
 801da4a:	4923      	ldr	r1, [pc, #140]	; (801dad8 <tcp_recved+0xa8>)
 801da4c:	4823      	ldr	r0, [pc, #140]	; (801dadc <tcp_recved+0xac>)
 801da4e:	f007 fe0f 	bl	8025670 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801da56:	887b      	ldrh	r3, [r7, #2]
 801da58:	4413      	add	r3, r2
 801da5a:	b29a      	uxth	r2, r3
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801da64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801da68:	d904      	bls.n	801da74 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801da70:	851a      	strh	r2, [r3, #40]	; 0x28
 801da72:	e017      	b.n	801daa4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801da78:	2b00      	cmp	r3, #0
 801da7a:	d113      	bne.n	801daa4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	7d1b      	ldrb	r3, [r3, #20]
 801da80:	2b07      	cmp	r3, #7
 801da82:	d003      	beq.n	801da8c <tcp_recved+0x5c>
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	7d1b      	ldrb	r3, [r3, #20]
 801da88:	2b09      	cmp	r3, #9
 801da8a:	d104      	bne.n	801da96 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801da92:	851a      	strh	r2, [r3, #40]	; 0x28
 801da94:	e006      	b.n	801daa4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 801da96:	4b0f      	ldr	r3, [pc, #60]	; (801dad4 <tcp_recved+0xa4>)
 801da98:	f240 322d 	movw	r2, #813	; 0x32d
 801da9c:	4910      	ldr	r1, [pc, #64]	; (801dae0 <tcp_recved+0xb0>)
 801da9e:	480f      	ldr	r0, [pc, #60]	; (801dadc <tcp_recved+0xac>)
 801daa0:	f007 fde6 	bl	8025670 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801daa4:	6878      	ldr	r0, [r7, #4]
 801daa6:	f7ff ff73 	bl	801d990 <tcp_update_rcv_ann_wnd>
 801daaa:	4603      	mov	r3, r0
 801daac:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801daae:	68fb      	ldr	r3, [r7, #12]
 801dab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dab4:	db09      	blt.n	801daca <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	7e9b      	ldrb	r3, [r3, #26]
 801daba:	f043 0302 	orr.w	r3, r3, #2
 801dabe:	b2da      	uxtb	r2, r3
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801dac4:	6878      	ldr	r0, [r7, #4]
 801dac6:	f004 f88b 	bl	8021be0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801daca:	bf00      	nop
 801dacc:	3710      	adds	r7, #16
 801dace:	46bd      	mov	sp, r7
 801dad0:	bd80      	pop	{r7, pc}
 801dad2:	bf00      	nop
 801dad4:	08027bb8 	.word	0x08027bb8
 801dad8:	08027cec 	.word	0x08027cec
 801dadc:	08027bf4 	.word	0x08027bf4
 801dae0:	08027d14 	.word	0x08027d14

0801dae4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801dae4:	b480      	push	{r7}
 801dae6:	b083      	sub	sp, #12
 801dae8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801daea:	2300      	movs	r3, #0
 801daec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801daee:	4b1d      	ldr	r3, [pc, #116]	; (801db64 <tcp_new_port+0x80>)
 801daf0:	881b      	ldrh	r3, [r3, #0]
 801daf2:	1c5a      	adds	r2, r3, #1
 801daf4:	b291      	uxth	r1, r2
 801daf6:	4a1b      	ldr	r2, [pc, #108]	; (801db64 <tcp_new_port+0x80>)
 801daf8:	8011      	strh	r1, [r2, #0]
 801dafa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dafe:	4293      	cmp	r3, r2
 801db00:	d103      	bne.n	801db0a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801db02:	4b18      	ldr	r3, [pc, #96]	; (801db64 <tcp_new_port+0x80>)
 801db04:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801db08:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801db0a:	2300      	movs	r3, #0
 801db0c:	71fb      	strb	r3, [r7, #7]
 801db0e:	e01e      	b.n	801db4e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801db10:	79fb      	ldrb	r3, [r7, #7]
 801db12:	4a15      	ldr	r2, [pc, #84]	; (801db68 <tcp_new_port+0x84>)
 801db14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	603b      	str	r3, [r7, #0]
 801db1c:	e011      	b.n	801db42 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 801db1e:	683b      	ldr	r3, [r7, #0]
 801db20:	8ada      	ldrh	r2, [r3, #22]
 801db22:	4b10      	ldr	r3, [pc, #64]	; (801db64 <tcp_new_port+0x80>)
 801db24:	881b      	ldrh	r3, [r3, #0]
 801db26:	429a      	cmp	r2, r3
 801db28:	d108      	bne.n	801db3c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801db2a:	88bb      	ldrh	r3, [r7, #4]
 801db2c:	3301      	adds	r3, #1
 801db2e:	80bb      	strh	r3, [r7, #4]
 801db30:	88bb      	ldrh	r3, [r7, #4]
 801db32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801db36:	d3da      	bcc.n	801daee <tcp_new_port+0xa>
          return 0;
 801db38:	2300      	movs	r3, #0
 801db3a:	e00d      	b.n	801db58 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801db3c:	683b      	ldr	r3, [r7, #0]
 801db3e:	68db      	ldr	r3, [r3, #12]
 801db40:	603b      	str	r3, [r7, #0]
 801db42:	683b      	ldr	r3, [r7, #0]
 801db44:	2b00      	cmp	r3, #0
 801db46:	d1ea      	bne.n	801db1e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801db48:	79fb      	ldrb	r3, [r7, #7]
 801db4a:	3301      	adds	r3, #1
 801db4c:	71fb      	strb	r3, [r7, #7]
 801db4e:	79fb      	ldrb	r3, [r7, #7]
 801db50:	2b03      	cmp	r3, #3
 801db52:	d9dd      	bls.n	801db10 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801db54:	4b03      	ldr	r3, [pc, #12]	; (801db64 <tcp_new_port+0x80>)
 801db56:	881b      	ldrh	r3, [r3, #0]
}
 801db58:	4618      	mov	r0, r3
 801db5a:	370c      	adds	r7, #12
 801db5c:	46bd      	mov	sp, r7
 801db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db62:	4770      	bx	lr
 801db64:	20000008 	.word	0x20000008
 801db68:	0802af4c 	.word	0x0802af4c

0801db6c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801db6c:	b5b0      	push	{r4, r5, r7, lr}
 801db6e:	b08c      	sub	sp, #48	; 0x30
 801db70:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801db72:	2300      	movs	r3, #0
 801db74:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 801db76:	4b97      	ldr	r3, [pc, #604]	; (801ddd4 <tcp_slowtmr+0x268>)
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	3301      	adds	r3, #1
 801db7c:	4a95      	ldr	r2, [pc, #596]	; (801ddd4 <tcp_slowtmr+0x268>)
 801db7e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801db80:	4b95      	ldr	r3, [pc, #596]	; (801ddd8 <tcp_slowtmr+0x26c>)
 801db82:	781b      	ldrb	r3, [r3, #0]
 801db84:	3301      	adds	r3, #1
 801db86:	b2da      	uxtb	r2, r3
 801db88:	4b93      	ldr	r3, [pc, #588]	; (801ddd8 <tcp_slowtmr+0x26c>)
 801db8a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801db8c:	2300      	movs	r3, #0
 801db8e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 801db90:	4b92      	ldr	r3, [pc, #584]	; (801dddc <tcp_slowtmr+0x270>)
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801db96:	e227      	b.n	801dfe8 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db9a:	7d1b      	ldrb	r3, [r3, #20]
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d106      	bne.n	801dbae <tcp_slowtmr+0x42>
 801dba0:	4b8f      	ldr	r3, [pc, #572]	; (801dde0 <tcp_slowtmr+0x274>)
 801dba2:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 801dba6:	498f      	ldr	r1, [pc, #572]	; (801dde4 <tcp_slowtmr+0x278>)
 801dba8:	488f      	ldr	r0, [pc, #572]	; (801dde8 <tcp_slowtmr+0x27c>)
 801dbaa:	f007 fd61 	bl	8025670 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbb0:	7d1b      	ldrb	r3, [r3, #20]
 801dbb2:	2b01      	cmp	r3, #1
 801dbb4:	d106      	bne.n	801dbc4 <tcp_slowtmr+0x58>
 801dbb6:	4b8a      	ldr	r3, [pc, #552]	; (801dde0 <tcp_slowtmr+0x274>)
 801dbb8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801dbbc:	498b      	ldr	r1, [pc, #556]	; (801ddec <tcp_slowtmr+0x280>)
 801dbbe:	488a      	ldr	r0, [pc, #552]	; (801dde8 <tcp_slowtmr+0x27c>)
 801dbc0:	f007 fd56 	bl	8025670 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbc6:	7d1b      	ldrb	r3, [r3, #20]
 801dbc8:	2b0a      	cmp	r3, #10
 801dbca:	d106      	bne.n	801dbda <tcp_slowtmr+0x6e>
 801dbcc:	4b84      	ldr	r3, [pc, #528]	; (801dde0 <tcp_slowtmr+0x274>)
 801dbce:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801dbd2:	4987      	ldr	r1, [pc, #540]	; (801ddf0 <tcp_slowtmr+0x284>)
 801dbd4:	4884      	ldr	r0, [pc, #528]	; (801dde8 <tcp_slowtmr+0x27c>)
 801dbd6:	f007 fd4b 	bl	8025670 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbdc:	7f5a      	ldrb	r2, [r3, #29]
 801dbde:	4b7e      	ldr	r3, [pc, #504]	; (801ddd8 <tcp_slowtmr+0x26c>)
 801dbe0:	781b      	ldrb	r3, [r3, #0]
 801dbe2:	429a      	cmp	r2, r3
 801dbe4:	d103      	bne.n	801dbee <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 801dbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbe8:	68db      	ldr	r3, [r3, #12]
 801dbea:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 801dbec:	e1fc      	b.n	801dfe8 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801dbee:	4b7a      	ldr	r3, [pc, #488]	; (801ddd8 <tcp_slowtmr+0x26c>)
 801dbf0:	781a      	ldrb	r2, [r3, #0]
 801dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbf4:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 801dbfa:	2300      	movs	r3, #0
 801dbfc:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801dbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc00:	7d1b      	ldrb	r3, [r3, #20]
 801dc02:	2b02      	cmp	r3, #2
 801dc04:	d108      	bne.n	801dc18 <tcp_slowtmr+0xac>
 801dc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dc0c:	2b05      	cmp	r3, #5
 801dc0e:	d903      	bls.n	801dc18 <tcp_slowtmr+0xac>
      ++pcb_remove;
 801dc10:	7ffb      	ldrb	r3, [r7, #31]
 801dc12:	3301      	adds	r3, #1
 801dc14:	77fb      	strb	r3, [r7, #31]
 801dc16:	e0a2      	b.n	801dd5e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 801dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dc1e:	2b0b      	cmp	r3, #11
 801dc20:	d903      	bls.n	801dc2a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801dc22:	7ffb      	ldrb	r3, [r7, #31]
 801dc24:	3301      	adds	r3, #1
 801dc26:	77fb      	strb	r3, [r7, #31]
 801dc28:	e099      	b.n	801dd5e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc2c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d032      	beq.n	801dc9a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 801dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc36:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801dc3a:	3b01      	subs	r3, #1
 801dc3c:	4a6d      	ldr	r2, [pc, #436]	; (801ddf4 <tcp_slowtmr+0x288>)
 801dc3e:	5cd3      	ldrb	r3, [r2, r3]
 801dc40:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 801dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc44:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801dc48:	7f3a      	ldrb	r2, [r7, #28]
 801dc4a:	429a      	cmp	r2, r3
 801dc4c:	d907      	bls.n	801dc5e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 801dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc50:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801dc54:	3301      	adds	r3, #1
 801dc56:	b2da      	uxtb	r2, r3
 801dc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc5a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 801dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc60:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801dc64:	7f3a      	ldrb	r2, [r7, #28]
 801dc66:	429a      	cmp	r2, r3
 801dc68:	d879      	bhi.n	801dd5e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 801dc6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dc6c:	f004 fbce 	bl	802240c <tcp_zero_window_probe>
 801dc70:	4603      	mov	r3, r0
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d173      	bne.n	801dd5e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 801dc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc78:	2200      	movs	r2, #0
 801dc7a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc80:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801dc84:	2b06      	cmp	r3, #6
 801dc86:	d86a      	bhi.n	801dd5e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 801dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc8a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801dc8e:	3301      	adds	r3, #1
 801dc90:	b2da      	uxtb	r2, r3
 801dc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc94:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 801dc98:	e061      	b.n	801dd5e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 801dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	db08      	blt.n	801dcb6 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 801dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dca6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801dcaa:	b29b      	uxth	r3, r3
 801dcac:	3301      	adds	r3, #1
 801dcae:	b29b      	uxth	r3, r3
 801dcb0:	b21a      	sxth	r2, r3
 801dcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcb4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 801dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d04f      	beq.n	801dd5e <tcp_slowtmr+0x1f2>
 801dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcc0:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcc6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801dcca:	429a      	cmp	r2, r3
 801dccc:	db47      	blt.n	801dd5e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801dcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcd0:	7d1b      	ldrb	r3, [r3, #20]
 801dcd2:	2b02      	cmp	r3, #2
 801dcd4:	d018      	beq.n	801dd08 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 801dcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dcdc:	2b0c      	cmp	r3, #12
 801dcde:	bf28      	it	cs
 801dce0:	230c      	movcs	r3, #12
 801dce2:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801dce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dce6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801dcea:	10db      	asrs	r3, r3, #3
 801dcec:	b21b      	sxth	r3, r3
 801dcee:	461a      	mov	r2, r3
 801dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcf2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801dcf6:	4413      	add	r3, r2
 801dcf8:	7efa      	ldrb	r2, [r7, #27]
 801dcfa:	493f      	ldr	r1, [pc, #252]	; (801ddf8 <tcp_slowtmr+0x28c>)
 801dcfc:	5c8a      	ldrb	r2, [r1, r2]
 801dcfe:	4093      	lsls	r3, r2
 801dd00:	b21a      	sxth	r2, r3
 801dd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 801dd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd0a:	2200      	movs	r2, #0
 801dd0c:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801dd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dd1a:	4293      	cmp	r3, r2
 801dd1c:	bf28      	it	cs
 801dd1e:	4613      	movcs	r3, r2
 801dd20:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 801dd22:	8b3b      	ldrh	r3, [r7, #24]
 801dd24:	085b      	lsrs	r3, r3, #1
 801dd26:	b29a      	uxth	r2, r3
 801dd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd2a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801dd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd30:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd38:	005b      	lsls	r3, r3, #1
 801dd3a:	b29b      	uxth	r3, r3
 801dd3c:	429a      	cmp	r2, r3
 801dd3e:	d206      	bcs.n	801dd4e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 801dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd44:	005b      	lsls	r3, r3, #1
 801dd46:	b29a      	uxth	r2, r3
 801dd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd4a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 801dd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd50:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801dd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 801dd58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dd5a:	f004 fa3d 	bl	80221d8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd60:	7d1b      	ldrb	r3, [r3, #20]
 801dd62:	2b06      	cmp	r3, #6
 801dd64:	d10f      	bne.n	801dd86 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd68:	7e9b      	ldrb	r3, [r3, #26]
 801dd6a:	f003 0310 	and.w	r3, r3, #16
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	d009      	beq.n	801dd86 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dd72:	4b18      	ldr	r3, [pc, #96]	; (801ddd4 <tcp_slowtmr+0x268>)
 801dd74:	681a      	ldr	r2, [r3, #0]
 801dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd78:	6a1b      	ldr	r3, [r3, #32]
 801dd7a:	1ad3      	subs	r3, r2, r3
 801dd7c:	2b28      	cmp	r3, #40	; 0x28
 801dd7e:	d902      	bls.n	801dd86 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801dd80:	7ffb      	ldrb	r3, [r7, #31]
 801dd82:	3301      	adds	r3, #1
 801dd84:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd88:	7a1b      	ldrb	r3, [r3, #8]
 801dd8a:	f003 0308 	and.w	r3, r3, #8
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d05d      	beq.n	801de4e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 801dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd94:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801dd96:	2b04      	cmp	r3, #4
 801dd98:	d003      	beq.n	801dda2 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 801dd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd9c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 801dd9e:	2b07      	cmp	r3, #7
 801dda0:	d155      	bne.n	801de4e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dda2:	4b0c      	ldr	r3, [pc, #48]	; (801ddd4 <tcp_slowtmr+0x268>)
 801dda4:	681a      	ldr	r2, [r3, #0]
 801dda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dda8:	6a1b      	ldr	r3, [r3, #32]
 801ddaa:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 801ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ddb2:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801ddb6:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801ddba:	4910      	ldr	r1, [pc, #64]	; (801ddfc <tcp_slowtmr+0x290>)
 801ddbc:	fba1 1303 	umull	r1, r3, r1, r3
 801ddc0:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ddc2:	429a      	cmp	r2, r3
 801ddc4:	d91c      	bls.n	801de00 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801ddc6:	7ffb      	ldrb	r3, [r7, #31]
 801ddc8:	3301      	adds	r3, #1
 801ddca:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 801ddcc:	7fbb      	ldrb	r3, [r7, #30]
 801ddce:	3301      	adds	r3, #1
 801ddd0:	77bb      	strb	r3, [r7, #30]
 801ddd2:	e03c      	b.n	801de4e <tcp_slowtmr+0x2e2>
 801ddd4:	20008c28 	.word	0x20008c28
 801ddd8:	200040ea 	.word	0x200040ea
 801dddc:	20008c24 	.word	0x20008c24
 801dde0:	08027bb8 	.word	0x08027bb8
 801dde4:	08027d68 	.word	0x08027d68
 801dde8:	08027bf4 	.word	0x08027bf4
 801ddec:	08027d94 	.word	0x08027d94
 801ddf0:	08027dc0 	.word	0x08027dc0
 801ddf4:	0802af44 	.word	0x0802af44
 801ddf8:	0802af34 	.word	0x0802af34
 801ddfc:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801de00:	4b97      	ldr	r3, [pc, #604]	; (801e060 <tcp_slowtmr+0x4f4>)
 801de02:	681a      	ldr	r2, [r3, #0]
 801de04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de06:	6a1b      	ldr	r3, [r3, #32]
 801de08:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de0c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801de10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de12:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801de16:	4618      	mov	r0, r3
 801de18:	4b92      	ldr	r3, [pc, #584]	; (801e064 <tcp_slowtmr+0x4f8>)
 801de1a:	fb03 f300 	mul.w	r3, r3, r0
 801de1e:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 801de20:	4991      	ldr	r1, [pc, #580]	; (801e068 <tcp_slowtmr+0x4fc>)
 801de22:	fba1 1303 	umull	r1, r3, r1, r3
 801de26:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801de28:	429a      	cmp	r2, r3
 801de2a:	d910      	bls.n	801de4e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 801de2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de2e:	f004 fab0 	bl	8022392 <tcp_keepalive>
 801de32:	4603      	mov	r3, r0
 801de34:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 801de36:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801de3a:	2b00      	cmp	r3, #0
 801de3c:	d107      	bne.n	801de4e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 801de3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de40:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801de44:	3301      	adds	r3, #1
 801de46:	b2da      	uxtb	r2, r3
 801de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de4a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de52:	2b00      	cmp	r3, #0
 801de54:	d016      	beq.n	801de84 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 801de56:	4b82      	ldr	r3, [pc, #520]	; (801e060 <tcp_slowtmr+0x4f4>)
 801de58:	681a      	ldr	r2, [r3, #0]
 801de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de5c:	6a1b      	ldr	r3, [r3, #32]
 801de5e:	1ad2      	subs	r2, r2, r3
 801de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de62:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801de66:	4619      	mov	r1, r3
 801de68:	460b      	mov	r3, r1
 801de6a:	005b      	lsls	r3, r3, #1
 801de6c:	440b      	add	r3, r1
 801de6e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801de70:	429a      	cmp	r2, r3
 801de72:	d307      	bcc.n	801de84 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 801de74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de78:	4618      	mov	r0, r3
 801de7a:	f000 fa04 	bl	801e286 <tcp_segs_free>
      pcb->ooseq = NULL;
 801de7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de80:	2200      	movs	r2, #0
 801de82:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de86:	7d1b      	ldrb	r3, [r3, #20]
 801de88:	2b03      	cmp	r3, #3
 801de8a:	d109      	bne.n	801dea0 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801de8c:	4b74      	ldr	r3, [pc, #464]	; (801e060 <tcp_slowtmr+0x4f4>)
 801de8e:	681a      	ldr	r2, [r3, #0]
 801de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de92:	6a1b      	ldr	r3, [r3, #32]
 801de94:	1ad3      	subs	r3, r2, r3
 801de96:	2b28      	cmp	r3, #40	; 0x28
 801de98:	d902      	bls.n	801dea0 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801de9a:	7ffb      	ldrb	r3, [r7, #31]
 801de9c:	3301      	adds	r3, #1
 801de9e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dea2:	7d1b      	ldrb	r3, [r3, #20]
 801dea4:	2b09      	cmp	r3, #9
 801dea6:	d109      	bne.n	801debc <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801dea8:	4b6d      	ldr	r3, [pc, #436]	; (801e060 <tcp_slowtmr+0x4f4>)
 801deaa:	681a      	ldr	r2, [r3, #0]
 801deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deae:	6a1b      	ldr	r3, [r3, #32]
 801deb0:	1ad3      	subs	r3, r2, r3
 801deb2:	2bf0      	cmp	r3, #240	; 0xf0
 801deb4:	d902      	bls.n	801debc <tcp_slowtmr+0x350>
        ++pcb_remove;
 801deb6:	7ffb      	ldrb	r3, [r7, #31]
 801deb8:	3301      	adds	r3, #1
 801deba:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801debc:	7ffb      	ldrb	r3, [r7, #31]
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d05d      	beq.n	801df7e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dec8:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801deca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801decc:	f000 fc44 	bl	801e758 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801ded0:	6a3b      	ldr	r3, [r7, #32]
 801ded2:	2b00      	cmp	r3, #0
 801ded4:	d010      	beq.n	801def8 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801ded6:	4b65      	ldr	r3, [pc, #404]	; (801e06c <tcp_slowtmr+0x500>)
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dedc:	429a      	cmp	r2, r3
 801dede:	d106      	bne.n	801deee <tcp_slowtmr+0x382>
 801dee0:	4b63      	ldr	r3, [pc, #396]	; (801e070 <tcp_slowtmr+0x504>)
 801dee2:	f240 4289 	movw	r2, #1161	; 0x489
 801dee6:	4963      	ldr	r1, [pc, #396]	; (801e074 <tcp_slowtmr+0x508>)
 801dee8:	4863      	ldr	r0, [pc, #396]	; (801e078 <tcp_slowtmr+0x50c>)
 801deea:	f007 fbc1 	bl	8025670 <iprintf>
        prev->next = pcb->next;
 801deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801def0:	68da      	ldr	r2, [r3, #12]
 801def2:	6a3b      	ldr	r3, [r7, #32]
 801def4:	60da      	str	r2, [r3, #12]
 801def6:	e00f      	b.n	801df18 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801def8:	4b5c      	ldr	r3, [pc, #368]	; (801e06c <tcp_slowtmr+0x500>)
 801defa:	681a      	ldr	r2, [r3, #0]
 801defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801defe:	429a      	cmp	r2, r3
 801df00:	d006      	beq.n	801df10 <tcp_slowtmr+0x3a4>
 801df02:	4b5b      	ldr	r3, [pc, #364]	; (801e070 <tcp_slowtmr+0x504>)
 801df04:	f240 428d 	movw	r2, #1165	; 0x48d
 801df08:	495c      	ldr	r1, [pc, #368]	; (801e07c <tcp_slowtmr+0x510>)
 801df0a:	485b      	ldr	r0, [pc, #364]	; (801e078 <tcp_slowtmr+0x50c>)
 801df0c:	f007 fbb0 	bl	8025670 <iprintf>
        tcp_active_pcbs = pcb->next;
 801df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df12:	68db      	ldr	r3, [r3, #12]
 801df14:	4a55      	ldr	r2, [pc, #340]	; (801e06c <tcp_slowtmr+0x500>)
 801df16:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801df18:	7fbb      	ldrb	r3, [r7, #30]
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	d010      	beq.n	801df40 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df20:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801df22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801df26:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df2a:	1d1d      	adds	r5, r3, #4
 801df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df2e:	8adb      	ldrh	r3, [r3, #22]
 801df30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801df32:	8b12      	ldrh	r2, [r2, #24]
 801df34:	9201      	str	r2, [sp, #4]
 801df36:	9300      	str	r3, [sp, #0]
 801df38:	462b      	mov	r3, r5
 801df3a:	4622      	mov	r2, r4
 801df3c:	f004 f8d8 	bl	80220f0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df42:	691b      	ldr	r3, [r3, #16]
 801df44:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 801df46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df48:	7d1b      	ldrb	r3, [r3, #20]
 801df4a:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 801df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df4e:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 801df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df52:	68db      	ldr	r3, [r3, #12]
 801df54:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801df56:	68b9      	ldr	r1, [r7, #8]
 801df58:	2001      	movs	r0, #1
 801df5a:	f7fe f933 	bl	801c1c4 <memp_free>

      tcp_active_pcbs_changed = 0;
 801df5e:	4b48      	ldr	r3, [pc, #288]	; (801e080 <tcp_slowtmr+0x514>)
 801df60:	2200      	movs	r2, #0
 801df62:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801df64:	697b      	ldr	r3, [r7, #20]
 801df66:	2b00      	cmp	r3, #0
 801df68:	d004      	beq.n	801df74 <tcp_slowtmr+0x408>
 801df6a:	697b      	ldr	r3, [r7, #20]
 801df6c:	f06f 010c 	mvn.w	r1, #12
 801df70:	6938      	ldr	r0, [r7, #16]
 801df72:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801df74:	4b42      	ldr	r3, [pc, #264]	; (801e080 <tcp_slowtmr+0x514>)
 801df76:	781b      	ldrb	r3, [r3, #0]
 801df78:	2b00      	cmp	r3, #0
 801df7a:	d035      	beq.n	801dfe8 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 801df7c:	e606      	b.n	801db8c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801df7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df80:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df84:	68db      	ldr	r3, [r3, #12]
 801df86:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801df88:	6a3b      	ldr	r3, [r7, #32]
 801df8a:	7edb      	ldrb	r3, [r3, #27]
 801df8c:	3301      	adds	r3, #1
 801df8e:	b2da      	uxtb	r2, r3
 801df90:	6a3b      	ldr	r3, [r7, #32]
 801df92:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 801df94:	6a3b      	ldr	r3, [r7, #32]
 801df96:	7eda      	ldrb	r2, [r3, #27]
 801df98:	6a3b      	ldr	r3, [r7, #32]
 801df9a:	7f1b      	ldrb	r3, [r3, #28]
 801df9c:	429a      	cmp	r2, r3
 801df9e:	d323      	bcc.n	801dfe8 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 801dfa0:	6a3b      	ldr	r3, [r7, #32]
 801dfa2:	2200      	movs	r2, #0
 801dfa4:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801dfa6:	4b36      	ldr	r3, [pc, #216]	; (801e080 <tcp_slowtmr+0x514>)
 801dfa8:	2200      	movs	r2, #0
 801dfaa:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801dfac:	6a3b      	ldr	r3, [r7, #32]
 801dfae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d00a      	beq.n	801dfcc <tcp_slowtmr+0x460>
 801dfb6:	6a3b      	ldr	r3, [r7, #32]
 801dfb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dfbc:	6a3a      	ldr	r2, [r7, #32]
 801dfbe:	6912      	ldr	r2, [r2, #16]
 801dfc0:	6a39      	ldr	r1, [r7, #32]
 801dfc2:	4610      	mov	r0, r2
 801dfc4:	4798      	blx	r3
 801dfc6:	4603      	mov	r3, r0
 801dfc8:	777b      	strb	r3, [r7, #29]
 801dfca:	e001      	b.n	801dfd0 <tcp_slowtmr+0x464>
 801dfcc:	2300      	movs	r3, #0
 801dfce:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 801dfd0:	4b2b      	ldr	r3, [pc, #172]	; (801e080 <tcp_slowtmr+0x514>)
 801dfd2:	781b      	ldrb	r3, [r3, #0]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d000      	beq.n	801dfda <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 801dfd8:	e5d8      	b.n	801db8c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801dfda:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d102      	bne.n	801dfe8 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 801dfe2:	6a38      	ldr	r0, [r7, #32]
 801dfe4:	f003 fdfc 	bl	8021be0 <tcp_output>
  while (pcb != NULL) {
 801dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	f47f add4 	bne.w	801db98 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801dff0:	2300      	movs	r3, #0
 801dff2:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 801dff4:	4b23      	ldr	r3, [pc, #140]	; (801e084 <tcp_slowtmr+0x518>)
 801dff6:	681b      	ldr	r3, [r3, #0]
 801dff8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801dffa:	e068      	b.n	801e0ce <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801dffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dffe:	7d1b      	ldrb	r3, [r3, #20]
 801e000:	2b0a      	cmp	r3, #10
 801e002:	d006      	beq.n	801e012 <tcp_slowtmr+0x4a6>
 801e004:	4b1a      	ldr	r3, [pc, #104]	; (801e070 <tcp_slowtmr+0x504>)
 801e006:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801e00a:	491f      	ldr	r1, [pc, #124]	; (801e088 <tcp_slowtmr+0x51c>)
 801e00c:	481a      	ldr	r0, [pc, #104]	; (801e078 <tcp_slowtmr+0x50c>)
 801e00e:	f007 fb2f 	bl	8025670 <iprintf>
    pcb_remove = 0;
 801e012:	2300      	movs	r3, #0
 801e014:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801e016:	4b12      	ldr	r3, [pc, #72]	; (801e060 <tcp_slowtmr+0x4f4>)
 801e018:	681a      	ldr	r2, [r3, #0]
 801e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e01c:	6a1b      	ldr	r3, [r3, #32]
 801e01e:	1ad3      	subs	r3, r2, r3
 801e020:	2bf0      	cmp	r3, #240	; 0xf0
 801e022:	d902      	bls.n	801e02a <tcp_slowtmr+0x4be>
      ++pcb_remove;
 801e024:	7ffb      	ldrb	r3, [r7, #31]
 801e026:	3301      	adds	r3, #1
 801e028:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801e02a:	7ffb      	ldrb	r3, [r7, #31]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d049      	beq.n	801e0c4 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801e030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e032:	f000 fb91 	bl	801e758 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801e036:	6a3b      	ldr	r3, [r7, #32]
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d029      	beq.n	801e090 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801e03c:	4b11      	ldr	r3, [pc, #68]	; (801e084 <tcp_slowtmr+0x518>)
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e042:	429a      	cmp	r2, r3
 801e044:	d106      	bne.n	801e054 <tcp_slowtmr+0x4e8>
 801e046:	4b0a      	ldr	r3, [pc, #40]	; (801e070 <tcp_slowtmr+0x504>)
 801e048:	f240 42cb 	movw	r2, #1227	; 0x4cb
 801e04c:	490f      	ldr	r1, [pc, #60]	; (801e08c <tcp_slowtmr+0x520>)
 801e04e:	480a      	ldr	r0, [pc, #40]	; (801e078 <tcp_slowtmr+0x50c>)
 801e050:	f007 fb0e 	bl	8025670 <iprintf>
        prev->next = pcb->next;
 801e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e056:	68da      	ldr	r2, [r3, #12]
 801e058:	6a3b      	ldr	r3, [r7, #32]
 801e05a:	60da      	str	r2, [r3, #12]
 801e05c:	e028      	b.n	801e0b0 <tcp_slowtmr+0x544>
 801e05e:	bf00      	nop
 801e060:	20008c28 	.word	0x20008c28
 801e064:	000124f8 	.word	0x000124f8
 801e068:	10624dd3 	.word	0x10624dd3
 801e06c:	20008c24 	.word	0x20008c24
 801e070:	08027bb8 	.word	0x08027bb8
 801e074:	08027df0 	.word	0x08027df0
 801e078:	08027bf4 	.word	0x08027bf4
 801e07c:	08027e1c 	.word	0x08027e1c
 801e080:	20008c20 	.word	0x20008c20
 801e084:	20008c34 	.word	0x20008c34
 801e088:	08027e48 	.word	0x08027e48
 801e08c:	08027e78 	.word	0x08027e78
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801e090:	4b12      	ldr	r3, [pc, #72]	; (801e0dc <tcp_slowtmr+0x570>)
 801e092:	681a      	ldr	r2, [r3, #0]
 801e094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e096:	429a      	cmp	r2, r3
 801e098:	d006      	beq.n	801e0a8 <tcp_slowtmr+0x53c>
 801e09a:	4b11      	ldr	r3, [pc, #68]	; (801e0e0 <tcp_slowtmr+0x574>)
 801e09c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 801e0a0:	4910      	ldr	r1, [pc, #64]	; (801e0e4 <tcp_slowtmr+0x578>)
 801e0a2:	4811      	ldr	r0, [pc, #68]	; (801e0e8 <tcp_slowtmr+0x57c>)
 801e0a4:	f007 fae4 	bl	8025670 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0aa:	68db      	ldr	r3, [r3, #12]
 801e0ac:	4a0b      	ldr	r2, [pc, #44]	; (801e0dc <tcp_slowtmr+0x570>)
 801e0ae:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0b2:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 801e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0b6:	68db      	ldr	r3, [r3, #12]
 801e0b8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801e0ba:	6879      	ldr	r1, [r7, #4]
 801e0bc:	2001      	movs	r0, #1
 801e0be:	f7fe f881 	bl	801c1c4 <memp_free>
 801e0c2:	e004      	b.n	801e0ce <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 801e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0c6:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0ca:	68db      	ldr	r3, [r3, #12]
 801e0cc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801e0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	d193      	bne.n	801dffc <tcp_slowtmr+0x490>
    }
  }
}
 801e0d4:	bf00      	nop
 801e0d6:	3728      	adds	r7, #40	; 0x28
 801e0d8:	46bd      	mov	sp, r7
 801e0da:	bdb0      	pop	{r4, r5, r7, pc}
 801e0dc:	20008c34 	.word	0x20008c34
 801e0e0:	08027bb8 	.word	0x08027bb8
 801e0e4:	08027ea0 	.word	0x08027ea0
 801e0e8:	08027bf4 	.word	0x08027bf4

0801e0ec <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801e0ec:	b580      	push	{r7, lr}
 801e0ee:	b082      	sub	sp, #8
 801e0f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801e0f2:	4b2d      	ldr	r3, [pc, #180]	; (801e1a8 <tcp_fasttmr+0xbc>)
 801e0f4:	781b      	ldrb	r3, [r3, #0]
 801e0f6:	3301      	adds	r3, #1
 801e0f8:	b2da      	uxtb	r2, r3
 801e0fa:	4b2b      	ldr	r3, [pc, #172]	; (801e1a8 <tcp_fasttmr+0xbc>)
 801e0fc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801e0fe:	4b2b      	ldr	r3, [pc, #172]	; (801e1ac <tcp_fasttmr+0xc0>)
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801e104:	e048      	b.n	801e198 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	7f5a      	ldrb	r2, [r3, #29]
 801e10a:	4b27      	ldr	r3, [pc, #156]	; (801e1a8 <tcp_fasttmr+0xbc>)
 801e10c:	781b      	ldrb	r3, [r3, #0]
 801e10e:	429a      	cmp	r2, r3
 801e110:	d03f      	beq.n	801e192 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801e112:	4b25      	ldr	r3, [pc, #148]	; (801e1a8 <tcp_fasttmr+0xbc>)
 801e114:	781a      	ldrb	r2, [r3, #0]
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	7e9b      	ldrb	r3, [r3, #26]
 801e11e:	f003 0301 	and.w	r3, r3, #1
 801e122:	2b00      	cmp	r3, #0
 801e124:	d010      	beq.n	801e148 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	7e9b      	ldrb	r3, [r3, #26]
 801e12a:	f043 0302 	orr.w	r3, r3, #2
 801e12e:	b2da      	uxtb	r2, r3
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 801e134:	6878      	ldr	r0, [r7, #4]
 801e136:	f003 fd53 	bl	8021be0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	7e9b      	ldrb	r3, [r3, #26]
 801e13e:	f023 0303 	bic.w	r3, r3, #3
 801e142:	b2da      	uxtb	r2, r3
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	7e9b      	ldrb	r3, [r3, #26]
 801e14c:	f003 0308 	and.w	r3, r3, #8
 801e150:	2b00      	cmp	r3, #0
 801e152:	d009      	beq.n	801e168 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	7e9b      	ldrb	r3, [r3, #26]
 801e158:	f023 0308 	bic.w	r3, r3, #8
 801e15c:	b2da      	uxtb	r2, r3
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801e162:	6878      	ldr	r0, [r7, #4]
 801e164:	f7ff f956 	bl	801d414 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	68db      	ldr	r3, [r3, #12]
 801e16c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e172:	2b00      	cmp	r3, #0
 801e174:	d00a      	beq.n	801e18c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801e176:	4b0e      	ldr	r3, [pc, #56]	; (801e1b0 <tcp_fasttmr+0xc4>)
 801e178:	2200      	movs	r2, #0
 801e17a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801e17c:	6878      	ldr	r0, [r7, #4]
 801e17e:	f000 f819 	bl	801e1b4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801e182:	4b0b      	ldr	r3, [pc, #44]	; (801e1b0 <tcp_fasttmr+0xc4>)
 801e184:	781b      	ldrb	r3, [r3, #0]
 801e186:	2b00      	cmp	r3, #0
 801e188:	d000      	beq.n	801e18c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801e18a:	e7b8      	b.n	801e0fe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801e18c:	683b      	ldr	r3, [r7, #0]
 801e18e:	607b      	str	r3, [r7, #4]
 801e190:	e002      	b.n	801e198 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	68db      	ldr	r3, [r3, #12]
 801e196:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d1b3      	bne.n	801e106 <tcp_fasttmr+0x1a>
    }
  }
}
 801e19e:	bf00      	nop
 801e1a0:	3708      	adds	r7, #8
 801e1a2:	46bd      	mov	sp, r7
 801e1a4:	bd80      	pop	{r7, pc}
 801e1a6:	bf00      	nop
 801e1a8:	200040ea 	.word	0x200040ea
 801e1ac:	20008c24 	.word	0x20008c24
 801e1b0:	20008c20 	.word	0x20008c20

0801e1b4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801e1b4:	b590      	push	{r4, r7, lr}
 801e1b6:	b085      	sub	sp, #20
 801e1b8:	af00      	add	r7, sp, #0
 801e1ba:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1c0:	7b5b      	ldrb	r3, [r3, #13]
 801e1c2:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1c8:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	2200      	movs	r2, #0
 801e1ce:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d00b      	beq.n	801e1f2 <tcp_process_refused_data+0x3e>
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	6918      	ldr	r0, [r3, #16]
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	68ba      	ldr	r2, [r7, #8]
 801e1e8:	6879      	ldr	r1, [r7, #4]
 801e1ea:	47a0      	blx	r4
 801e1ec:	4603      	mov	r3, r0
 801e1ee:	73fb      	strb	r3, [r7, #15]
 801e1f0:	e007      	b.n	801e202 <tcp_process_refused_data+0x4e>
 801e1f2:	2300      	movs	r3, #0
 801e1f4:	68ba      	ldr	r2, [r7, #8]
 801e1f6:	6879      	ldr	r1, [r7, #4]
 801e1f8:	2000      	movs	r0, #0
 801e1fa:	f000 f88c 	bl	801e316 <tcp_recv_null>
 801e1fe:	4603      	mov	r3, r0
 801e200:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801e202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e206:	2b00      	cmp	r3, #0
 801e208:	d12a      	bne.n	801e260 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 801e20a:	7bbb      	ldrb	r3, [r7, #14]
 801e20c:	f003 0320 	and.w	r3, r3, #32
 801e210:	2b00      	cmp	r3, #0
 801e212:	d033      	beq.n	801e27c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e21c:	d005      	beq.n	801e22a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e222:	3301      	adds	r3, #1
 801e224:	b29a      	uxth	r2, r3
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801e22a:	687b      	ldr	r3, [r7, #4]
 801e22c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e230:	2b00      	cmp	r3, #0
 801e232:	d00b      	beq.n	801e24c <tcp_process_refused_data+0x98>
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	6918      	ldr	r0, [r3, #16]
 801e23e:	2300      	movs	r3, #0
 801e240:	2200      	movs	r2, #0
 801e242:	6879      	ldr	r1, [r7, #4]
 801e244:	47a0      	blx	r4
 801e246:	4603      	mov	r3, r0
 801e248:	73fb      	strb	r3, [r7, #15]
 801e24a:	e001      	b.n	801e250 <tcp_process_refused_data+0x9c>
 801e24c:	2300      	movs	r3, #0
 801e24e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801e250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e254:	f113 0f0d 	cmn.w	r3, #13
 801e258:	d110      	bne.n	801e27c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 801e25a:	f06f 030c 	mvn.w	r3, #12
 801e25e:	e00e      	b.n	801e27e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 801e260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e264:	f113 0f0d 	cmn.w	r3, #13
 801e268:	d102      	bne.n	801e270 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801e26a:	f06f 030c 	mvn.w	r3, #12
 801e26e:	e006      	b.n	801e27e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	68ba      	ldr	r2, [r7, #8]
 801e274:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 801e276:	f06f 0304 	mvn.w	r3, #4
 801e27a:	e000      	b.n	801e27e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 801e27c:	2300      	movs	r3, #0
}
 801e27e:	4618      	mov	r0, r3
 801e280:	3714      	adds	r7, #20
 801e282:	46bd      	mov	sp, r7
 801e284:	bd90      	pop	{r4, r7, pc}

0801e286 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801e286:	b580      	push	{r7, lr}
 801e288:	b084      	sub	sp, #16
 801e28a:	af00      	add	r7, sp, #0
 801e28c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801e28e:	e007      	b.n	801e2a0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801e296:	6878      	ldr	r0, [r7, #4]
 801e298:	f000 f809 	bl	801e2ae <tcp_seg_free>
    seg = next;
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d1f4      	bne.n	801e290 <tcp_segs_free+0xa>
  }
}
 801e2a6:	bf00      	nop
 801e2a8:	3710      	adds	r7, #16
 801e2aa:	46bd      	mov	sp, r7
 801e2ac:	bd80      	pop	{r7, pc}

0801e2ae <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801e2ae:	b580      	push	{r7, lr}
 801e2b0:	b082      	sub	sp, #8
 801e2b2:	af00      	add	r7, sp, #0
 801e2b4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d00c      	beq.n	801e2d6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	685b      	ldr	r3, [r3, #4]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d004      	beq.n	801e2ce <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	685b      	ldr	r3, [r3, #4]
 801e2c8:	4618      	mov	r0, r3
 801e2ca:	f7fe fcd5 	bl	801cc78 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801e2ce:	6879      	ldr	r1, [r7, #4]
 801e2d0:	2003      	movs	r0, #3
 801e2d2:	f7fd ff77 	bl	801c1c4 <memp_free>
  }
}
 801e2d6:	bf00      	nop
 801e2d8:	3708      	adds	r7, #8
 801e2da:	46bd      	mov	sp, r7
 801e2dc:	bd80      	pop	{r7, pc}

0801e2de <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801e2de:	b580      	push	{r7, lr}
 801e2e0:	b084      	sub	sp, #16
 801e2e2:	af00      	add	r7, sp, #0
 801e2e4:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801e2e6:	2003      	movs	r0, #3
 801e2e8:	f7fd ff1a 	bl	801c120 <memp_malloc>
 801e2ec:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	d101      	bne.n	801e2f8 <tcp_seg_copy+0x1a>
    return NULL;
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	e00a      	b.n	801e30e <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801e2f8:	2210      	movs	r2, #16
 801e2fa:	6879      	ldr	r1, [r7, #4]
 801e2fc:	68f8      	ldr	r0, [r7, #12]
 801e2fe:	f007 fe6a 	bl	8025fd6 <memcpy>
  pbuf_ref(cseg->p);
 801e302:	68fb      	ldr	r3, [r7, #12]
 801e304:	685b      	ldr	r3, [r3, #4]
 801e306:	4618      	mov	r0, r3
 801e308:	f7fe fd68 	bl	801cddc <pbuf_ref>
  return cseg;
 801e30c:	68fb      	ldr	r3, [r7, #12]
}
 801e30e:	4618      	mov	r0, r3
 801e310:	3710      	adds	r7, #16
 801e312:	46bd      	mov	sp, r7
 801e314:	bd80      	pop	{r7, pc}

0801e316 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801e316:	b580      	push	{r7, lr}
 801e318:	b084      	sub	sp, #16
 801e31a:	af00      	add	r7, sp, #0
 801e31c:	60f8      	str	r0, [r7, #12]
 801e31e:	60b9      	str	r1, [r7, #8]
 801e320:	607a      	str	r2, [r7, #4]
 801e322:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	2b00      	cmp	r3, #0
 801e328:	d009      	beq.n	801e33e <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	891b      	ldrh	r3, [r3, #8]
 801e32e:	4619      	mov	r1, r3
 801e330:	68b8      	ldr	r0, [r7, #8]
 801e332:	f7ff fb7d 	bl	801da30 <tcp_recved>
    pbuf_free(p);
 801e336:	6878      	ldr	r0, [r7, #4]
 801e338:	f7fe fc9e 	bl	801cc78 <pbuf_free>
 801e33c:	e008      	b.n	801e350 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 801e33e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e342:	2b00      	cmp	r3, #0
 801e344:	d104      	bne.n	801e350 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 801e346:	68b8      	ldr	r0, [r7, #8]
 801e348:	f7ff f8ca 	bl	801d4e0 <tcp_close>
 801e34c:	4603      	mov	r3, r0
 801e34e:	e000      	b.n	801e352 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 801e350:	2300      	movs	r3, #0
}
 801e352:	4618      	mov	r0, r3
 801e354:	3710      	adds	r7, #16
 801e356:	46bd      	mov	sp, r7
 801e358:	bd80      	pop	{r7, pc}
	...

0801e35c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801e35c:	b580      	push	{r7, lr}
 801e35e:	b086      	sub	sp, #24
 801e360:	af00      	add	r7, sp, #0
 801e362:	4603      	mov	r3, r0
 801e364:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801e366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	db01      	blt.n	801e372 <tcp_kill_prio+0x16>
 801e36e:	79fb      	ldrb	r3, [r7, #7]
 801e370:	e000      	b.n	801e374 <tcp_kill_prio+0x18>
 801e372:	237f      	movs	r3, #127	; 0x7f
 801e374:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 801e376:	2300      	movs	r3, #0
 801e378:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e37a:	2300      	movs	r3, #0
 801e37c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e37e:	4b16      	ldr	r3, [pc, #88]	; (801e3d8 <tcp_kill_prio+0x7c>)
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	617b      	str	r3, [r7, #20]
 801e384:	e01a      	b.n	801e3bc <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 801e386:	697b      	ldr	r3, [r7, #20]
 801e388:	7d5b      	ldrb	r3, [r3, #21]
 801e38a:	7afa      	ldrb	r2, [r7, #11]
 801e38c:	429a      	cmp	r2, r3
 801e38e:	d312      	bcc.n	801e3b6 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e390:	4b12      	ldr	r3, [pc, #72]	; (801e3dc <tcp_kill_prio+0x80>)
 801e392:	681a      	ldr	r2, [r3, #0]
 801e394:	697b      	ldr	r3, [r7, #20]
 801e396:	6a1b      	ldr	r3, [r3, #32]
 801e398:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 801e39a:	68fb      	ldr	r3, [r7, #12]
 801e39c:	429a      	cmp	r2, r3
 801e39e:	d30a      	bcc.n	801e3b6 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 801e3a0:	4b0e      	ldr	r3, [pc, #56]	; (801e3dc <tcp_kill_prio+0x80>)
 801e3a2:	681a      	ldr	r2, [r3, #0]
 801e3a4:	697b      	ldr	r3, [r7, #20]
 801e3a6:	6a1b      	ldr	r3, [r3, #32]
 801e3a8:	1ad3      	subs	r3, r2, r3
 801e3aa:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 801e3ac:	697b      	ldr	r3, [r7, #20]
 801e3ae:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 801e3b0:	697b      	ldr	r3, [r7, #20]
 801e3b2:	7d5b      	ldrb	r3, [r3, #21]
 801e3b4:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e3b6:	697b      	ldr	r3, [r7, #20]
 801e3b8:	68db      	ldr	r3, [r3, #12]
 801e3ba:	617b      	str	r3, [r7, #20]
 801e3bc:	697b      	ldr	r3, [r7, #20]
 801e3be:	2b00      	cmp	r3, #0
 801e3c0:	d1e1      	bne.n	801e386 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 801e3c2:	693b      	ldr	r3, [r7, #16]
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d002      	beq.n	801e3ce <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e3c8:	6938      	ldr	r0, [r7, #16]
 801e3ca:	f7ff f99b 	bl	801d704 <tcp_abort>
  }
}
 801e3ce:	bf00      	nop
 801e3d0:	3718      	adds	r7, #24
 801e3d2:	46bd      	mov	sp, r7
 801e3d4:	bd80      	pop	{r7, pc}
 801e3d6:	bf00      	nop
 801e3d8:	20008c24 	.word	0x20008c24
 801e3dc:	20008c28 	.word	0x20008c28

0801e3e0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801e3e0:	b580      	push	{r7, lr}
 801e3e2:	b086      	sub	sp, #24
 801e3e4:	af00      	add	r7, sp, #0
 801e3e6:	4603      	mov	r3, r0
 801e3e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801e3ea:	79fb      	ldrb	r3, [r7, #7]
 801e3ec:	2b08      	cmp	r3, #8
 801e3ee:	d009      	beq.n	801e404 <tcp_kill_state+0x24>
 801e3f0:	79fb      	ldrb	r3, [r7, #7]
 801e3f2:	2b09      	cmp	r3, #9
 801e3f4:	d006      	beq.n	801e404 <tcp_kill_state+0x24>
 801e3f6:	4b1a      	ldr	r3, [pc, #104]	; (801e460 <tcp_kill_state+0x80>)
 801e3f8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801e3fc:	4919      	ldr	r1, [pc, #100]	; (801e464 <tcp_kill_state+0x84>)
 801e3fe:	481a      	ldr	r0, [pc, #104]	; (801e468 <tcp_kill_state+0x88>)
 801e400:	f007 f936 	bl	8025670 <iprintf>

  inactivity = 0;
 801e404:	2300      	movs	r3, #0
 801e406:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e408:	2300      	movs	r3, #0
 801e40a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e40c:	4b17      	ldr	r3, [pc, #92]	; (801e46c <tcp_kill_state+0x8c>)
 801e40e:	681b      	ldr	r3, [r3, #0]
 801e410:	617b      	str	r3, [r7, #20]
 801e412:	e017      	b.n	801e444 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801e414:	697b      	ldr	r3, [r7, #20]
 801e416:	7d1b      	ldrb	r3, [r3, #20]
 801e418:	79fa      	ldrb	r2, [r7, #7]
 801e41a:	429a      	cmp	r2, r3
 801e41c:	d10f      	bne.n	801e43e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e41e:	4b14      	ldr	r3, [pc, #80]	; (801e470 <tcp_kill_state+0x90>)
 801e420:	681a      	ldr	r2, [r3, #0]
 801e422:	697b      	ldr	r3, [r7, #20]
 801e424:	6a1b      	ldr	r3, [r3, #32]
 801e426:	1ad2      	subs	r2, r2, r3
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	429a      	cmp	r2, r3
 801e42c:	d307      	bcc.n	801e43e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801e42e:	4b10      	ldr	r3, [pc, #64]	; (801e470 <tcp_kill_state+0x90>)
 801e430:	681a      	ldr	r2, [r3, #0]
 801e432:	697b      	ldr	r3, [r7, #20]
 801e434:	6a1b      	ldr	r3, [r3, #32]
 801e436:	1ad3      	subs	r3, r2, r3
 801e438:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801e43a:	697b      	ldr	r3, [r7, #20]
 801e43c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e43e:	697b      	ldr	r3, [r7, #20]
 801e440:	68db      	ldr	r3, [r3, #12]
 801e442:	617b      	str	r3, [r7, #20]
 801e444:	697b      	ldr	r3, [r7, #20]
 801e446:	2b00      	cmp	r3, #0
 801e448:	d1e4      	bne.n	801e414 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801e44a:	693b      	ldr	r3, [r7, #16]
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d003      	beq.n	801e458 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801e450:	2100      	movs	r1, #0
 801e452:	6938      	ldr	r0, [r7, #16]
 801e454:	f7ff f8a4 	bl	801d5a0 <tcp_abandon>
  }
}
 801e458:	bf00      	nop
 801e45a:	3718      	adds	r7, #24
 801e45c:	46bd      	mov	sp, r7
 801e45e:	bd80      	pop	{r7, pc}
 801e460:	08027bb8 	.word	0x08027bb8
 801e464:	08027ec8 	.word	0x08027ec8
 801e468:	08027bf4 	.word	0x08027bf4
 801e46c:	20008c24 	.word	0x20008c24
 801e470:	20008c28 	.word	0x20008c28

0801e474 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801e474:	b580      	push	{r7, lr}
 801e476:	b084      	sub	sp, #16
 801e478:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801e47a:	2300      	movs	r3, #0
 801e47c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801e47e:	2300      	movs	r3, #0
 801e480:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e482:	4b12      	ldr	r3, [pc, #72]	; (801e4cc <tcp_kill_timewait+0x58>)
 801e484:	681b      	ldr	r3, [r3, #0]
 801e486:	60fb      	str	r3, [r7, #12]
 801e488:	e012      	b.n	801e4b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e48a:	4b11      	ldr	r3, [pc, #68]	; (801e4d0 <tcp_kill_timewait+0x5c>)
 801e48c:	681a      	ldr	r2, [r3, #0]
 801e48e:	68fb      	ldr	r3, [r7, #12]
 801e490:	6a1b      	ldr	r3, [r3, #32]
 801e492:	1ad2      	subs	r2, r2, r3
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	429a      	cmp	r2, r3
 801e498:	d307      	bcc.n	801e4aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801e49a:	4b0d      	ldr	r3, [pc, #52]	; (801e4d0 <tcp_kill_timewait+0x5c>)
 801e49c:	681a      	ldr	r2, [r3, #0]
 801e49e:	68fb      	ldr	r3, [r7, #12]
 801e4a0:	6a1b      	ldr	r3, [r3, #32]
 801e4a2:	1ad3      	subs	r3, r2, r3
 801e4a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e4aa:	68fb      	ldr	r3, [r7, #12]
 801e4ac:	68db      	ldr	r3, [r3, #12]
 801e4ae:	60fb      	str	r3, [r7, #12]
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d1e9      	bne.n	801e48a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801e4b6:	68bb      	ldr	r3, [r7, #8]
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d002      	beq.n	801e4c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e4bc:	68b8      	ldr	r0, [r7, #8]
 801e4be:	f7ff f921 	bl	801d704 <tcp_abort>
  }
}
 801e4c2:	bf00      	nop
 801e4c4:	3710      	adds	r7, #16
 801e4c6:	46bd      	mov	sp, r7
 801e4c8:	bd80      	pop	{r7, pc}
 801e4ca:	bf00      	nop
 801e4cc:	20008c34 	.word	0x20008c34
 801e4d0:	20008c28 	.word	0x20008c28

0801e4d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801e4d4:	b580      	push	{r7, lr}
 801e4d6:	b084      	sub	sp, #16
 801e4d8:	af00      	add	r7, sp, #0
 801e4da:	4603      	mov	r3, r0
 801e4dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e4de:	2001      	movs	r0, #1
 801e4e0:	f7fd fe1e 	bl	801c120 <memp_malloc>
 801e4e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801e4e6:	68fb      	ldr	r3, [r7, #12]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d124      	bne.n	801e536 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801e4ec:	f7ff ffc2 	bl	801e474 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e4f0:	2001      	movs	r0, #1
 801e4f2:	f7fd fe15 	bl	801c120 <memp_malloc>
 801e4f6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801e4f8:	68fb      	ldr	r3, [r7, #12]
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	d11b      	bne.n	801e536 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801e4fe:	2009      	movs	r0, #9
 801e500:	f7ff ff6e 	bl	801e3e0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e504:	2001      	movs	r0, #1
 801e506:	f7fd fe0b 	bl	801c120 <memp_malloc>
 801e50a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801e50c:	68fb      	ldr	r3, [r7, #12]
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d111      	bne.n	801e536 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801e512:	2008      	movs	r0, #8
 801e514:	f7ff ff64 	bl	801e3e0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e518:	2001      	movs	r0, #1
 801e51a:	f7fd fe01 	bl	801c120 <memp_malloc>
 801e51e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801e520:	68fb      	ldr	r3, [r7, #12]
 801e522:	2b00      	cmp	r3, #0
 801e524:	d107      	bne.n	801e536 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801e526:	79fb      	ldrb	r3, [r7, #7]
 801e528:	4618      	mov	r0, r3
 801e52a:	f7ff ff17 	bl	801e35c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e52e:	2001      	movs	r0, #1
 801e530:	f7fd fdf6 	bl	801c120 <memp_malloc>
 801e534:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801e536:	68fb      	ldr	r3, [r7, #12]
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d03f      	beq.n	801e5bc <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801e53c:	2298      	movs	r2, #152	; 0x98
 801e53e:	2100      	movs	r1, #0
 801e540:	68f8      	ldr	r0, [r7, #12]
 801e542:	f007 fd53 	bl	8025fec <memset>
    pcb->prio = prio;
 801e546:	68fb      	ldr	r3, [r7, #12]
 801e548:	79fa      	ldrb	r2, [r7, #7]
 801e54a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801e54c:	68fb      	ldr	r3, [r7, #12]
 801e54e:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801e552:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801e556:	68fb      	ldr	r3, [r7, #12]
 801e558:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801e55c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801e55e:	68fb      	ldr	r3, [r7, #12]
 801e560:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e562:	68fb      	ldr	r3, [r7, #12]
 801e564:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801e566:	68fb      	ldr	r3, [r7, #12]
 801e568:	22ff      	movs	r2, #255	; 0xff
 801e56a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801e56c:	68fb      	ldr	r3, [r7, #12]
 801e56e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801e572:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	2206      	movs	r2, #6
 801e578:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801e57c:	68fb      	ldr	r3, [r7, #12]
 801e57e:	2206      	movs	r2, #6
 801e580:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e588:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	2201      	movs	r2, #1
 801e58e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801e592:	4b0d      	ldr	r3, [pc, #52]	; (801e5c8 <tcp_alloc+0xf4>)
 801e594:	681a      	ldr	r2, [r3, #0]
 801e596:	68fb      	ldr	r3, [r7, #12]
 801e598:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801e59a:	4b0c      	ldr	r3, [pc, #48]	; (801e5cc <tcp_alloc+0xf8>)
 801e59c:	781a      	ldrb	r2, [r3, #0]
 801e59e:	68fb      	ldr	r3, [r7, #12]
 801e5a0:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801e5a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801e5ac:	68fb      	ldr	r3, [r7, #12]
 801e5ae:	4a08      	ldr	r2, [pc, #32]	; (801e5d0 <tcp_alloc+0xfc>)
 801e5b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801e5b4:	68fb      	ldr	r3, [r7, #12]
 801e5b6:	4a07      	ldr	r2, [pc, #28]	; (801e5d4 <tcp_alloc+0x100>)
 801e5b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801e5bc:	68fb      	ldr	r3, [r7, #12]
}
 801e5be:	4618      	mov	r0, r3
 801e5c0:	3710      	adds	r7, #16
 801e5c2:	46bd      	mov	sp, r7
 801e5c4:	bd80      	pop	{r7, pc}
 801e5c6:	bf00      	nop
 801e5c8:	20008c28 	.word	0x20008c28
 801e5cc:	200040ea 	.word	0x200040ea
 801e5d0:	0801e317 	.word	0x0801e317
 801e5d4:	006ddd00 	.word	0x006ddd00

0801e5d8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801e5d8:	b580      	push	{r7, lr}
 801e5da:	b084      	sub	sp, #16
 801e5dc:	af00      	add	r7, sp, #0
 801e5de:	4603      	mov	r3, r0
 801e5e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801e5e2:	2040      	movs	r0, #64	; 0x40
 801e5e4:	f7ff ff76 	bl	801e4d4 <tcp_alloc>
 801e5e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801e5ea:	68fb      	ldr	r3, [r7, #12]
}
 801e5ec:	4618      	mov	r0, r3
 801e5ee:	3710      	adds	r7, #16
 801e5f0:	46bd      	mov	sp, r7
 801e5f2:	bd80      	pop	{r7, pc}

0801e5f4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801e5f4:	b480      	push	{r7}
 801e5f6:	b083      	sub	sp, #12
 801e5f8:	af00      	add	r7, sp, #0
 801e5fa:	6078      	str	r0, [r7, #4]
 801e5fc:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	2b00      	cmp	r3, #0
 801e602:	d002      	beq.n	801e60a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	683a      	ldr	r2, [r7, #0]
 801e608:	611a      	str	r2, [r3, #16]
  }
}
 801e60a:	bf00      	nop
 801e60c:	370c      	adds	r7, #12
 801e60e:	46bd      	mov	sp, r7
 801e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e614:	4770      	bx	lr
	...

0801e618 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801e618:	b580      	push	{r7, lr}
 801e61a:	b082      	sub	sp, #8
 801e61c:	af00      	add	r7, sp, #0
 801e61e:	6078      	str	r0, [r7, #4]
 801e620:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	2b00      	cmp	r3, #0
 801e626:	d00e      	beq.n	801e646 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	7d1b      	ldrb	r3, [r3, #20]
 801e62c:	2b01      	cmp	r3, #1
 801e62e:	d106      	bne.n	801e63e <tcp_recv+0x26>
 801e630:	4b07      	ldr	r3, [pc, #28]	; (801e650 <tcp_recv+0x38>)
 801e632:	f240 62bb 	movw	r2, #1723	; 0x6bb
 801e636:	4907      	ldr	r1, [pc, #28]	; (801e654 <tcp_recv+0x3c>)
 801e638:	4807      	ldr	r0, [pc, #28]	; (801e658 <tcp_recv+0x40>)
 801e63a:	f007 f819 	bl	8025670 <iprintf>
    pcb->recv = recv;
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	683a      	ldr	r2, [r7, #0]
 801e642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801e646:	bf00      	nop
 801e648:	3708      	adds	r7, #8
 801e64a:	46bd      	mov	sp, r7
 801e64c:	bd80      	pop	{r7, pc}
 801e64e:	bf00      	nop
 801e650:	08027bb8 	.word	0x08027bb8
 801e654:	08027ed8 	.word	0x08027ed8
 801e658:	08027bf4 	.word	0x08027bf4

0801e65c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801e65c:	b580      	push	{r7, lr}
 801e65e:	b082      	sub	sp, #8
 801e660:	af00      	add	r7, sp, #0
 801e662:	6078      	str	r0, [r7, #4]
 801e664:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d00d      	beq.n	801e688 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801e66c:	687b      	ldr	r3, [r7, #4]
 801e66e:	7d1b      	ldrb	r3, [r3, #20]
 801e670:	2b01      	cmp	r3, #1
 801e672:	d106      	bne.n	801e682 <tcp_sent+0x26>
 801e674:	4b06      	ldr	r3, [pc, #24]	; (801e690 <tcp_sent+0x34>)
 801e676:	f240 62cc 	movw	r2, #1740	; 0x6cc
 801e67a:	4906      	ldr	r1, [pc, #24]	; (801e694 <tcp_sent+0x38>)
 801e67c:	4806      	ldr	r0, [pc, #24]	; (801e698 <tcp_sent+0x3c>)
 801e67e:	f006 fff7 	bl	8025670 <iprintf>
    pcb->sent = sent;
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	683a      	ldr	r2, [r7, #0]
 801e686:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 801e688:	bf00      	nop
 801e68a:	3708      	adds	r7, #8
 801e68c:	46bd      	mov	sp, r7
 801e68e:	bd80      	pop	{r7, pc}
 801e690:	08027bb8 	.word	0x08027bb8
 801e694:	08027f00 	.word	0x08027f00
 801e698:	08027bf4 	.word	0x08027bf4

0801e69c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801e69c:	b580      	push	{r7, lr}
 801e69e:	b082      	sub	sp, #8
 801e6a0:	af00      	add	r7, sp, #0
 801e6a2:	6078      	str	r0, [r7, #4]
 801e6a4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	d00e      	beq.n	801e6ca <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	7d1b      	ldrb	r3, [r3, #20]
 801e6b0:	2b01      	cmp	r3, #1
 801e6b2:	d106      	bne.n	801e6c2 <tcp_err+0x26>
 801e6b4:	4b07      	ldr	r3, [pc, #28]	; (801e6d4 <tcp_err+0x38>)
 801e6b6:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 801e6ba:	4907      	ldr	r1, [pc, #28]	; (801e6d8 <tcp_err+0x3c>)
 801e6bc:	4807      	ldr	r0, [pc, #28]	; (801e6dc <tcp_err+0x40>)
 801e6be:	f006 ffd7 	bl	8025670 <iprintf>
    pcb->errf = err;
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	683a      	ldr	r2, [r7, #0]
 801e6c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 801e6ca:	bf00      	nop
 801e6cc:	3708      	adds	r7, #8
 801e6ce:	46bd      	mov	sp, r7
 801e6d0:	bd80      	pop	{r7, pc}
 801e6d2:	bf00      	nop
 801e6d4:	08027bb8 	.word	0x08027bb8
 801e6d8:	08027f28 	.word	0x08027f28
 801e6dc:	08027bf4 	.word	0x08027bf4

0801e6e0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801e6e0:	b480      	push	{r7}
 801e6e2:	b085      	sub	sp, #20
 801e6e4:	af00      	add	r7, sp, #0
 801e6e6:	6078      	str	r0, [r7, #4]
 801e6e8:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801e6ea:	687b      	ldr	r3, [r7, #4]
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	d008      	beq.n	801e702 <tcp_accept+0x22>
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	7d1b      	ldrb	r3, [r3, #20]
 801e6f4:	2b01      	cmp	r3, #1
 801e6f6:	d104      	bne.n	801e702 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801e6fc:	68fb      	ldr	r3, [r7, #12]
 801e6fe:	683a      	ldr	r2, [r7, #0]
 801e700:	619a      	str	r2, [r3, #24]
  }
}
 801e702:	bf00      	nop
 801e704:	3714      	adds	r7, #20
 801e706:	46bd      	mov	sp, r7
 801e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e70c:	4770      	bx	lr
	...

0801e710 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801e710:	b580      	push	{r7, lr}
 801e712:	b084      	sub	sp, #16
 801e714:	af00      	add	r7, sp, #0
 801e716:	60f8      	str	r0, [r7, #12]
 801e718:	60b9      	str	r1, [r7, #8]
 801e71a:	4613      	mov	r3, r2
 801e71c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801e71e:	68fb      	ldr	r3, [r7, #12]
 801e720:	7d1b      	ldrb	r3, [r3, #20]
 801e722:	2b01      	cmp	r3, #1
 801e724:	d106      	bne.n	801e734 <tcp_poll+0x24>
 801e726:	4b09      	ldr	r3, [pc, #36]	; (801e74c <tcp_poll+0x3c>)
 801e728:	f240 7203 	movw	r2, #1795	; 0x703
 801e72c:	4908      	ldr	r1, [pc, #32]	; (801e750 <tcp_poll+0x40>)
 801e72e:	4809      	ldr	r0, [pc, #36]	; (801e754 <tcp_poll+0x44>)
 801e730:	f006 ff9e 	bl	8025670 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801e734:	68fb      	ldr	r3, [r7, #12]
 801e736:	68ba      	ldr	r2, [r7, #8]
 801e738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801e73c:	68fb      	ldr	r3, [r7, #12]
 801e73e:	79fa      	ldrb	r2, [r7, #7]
 801e740:	771a      	strb	r2, [r3, #28]
}
 801e742:	bf00      	nop
 801e744:	3710      	adds	r7, #16
 801e746:	46bd      	mov	sp, r7
 801e748:	bd80      	pop	{r7, pc}
 801e74a:	bf00      	nop
 801e74c:	08027bb8 	.word	0x08027bb8
 801e750:	08027f50 	.word	0x08027f50
 801e754:	08027bf4 	.word	0x08027bf4

0801e758 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801e758:	b580      	push	{r7, lr}
 801e75a:	b082      	sub	sp, #8
 801e75c:	af00      	add	r7, sp, #0
 801e75e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	7d1b      	ldrb	r3, [r3, #20]
 801e764:	2b00      	cmp	r3, #0
 801e766:	d034      	beq.n	801e7d2 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801e76c:	2b0a      	cmp	r3, #10
 801e76e:	d030      	beq.n	801e7d2 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 801e774:	2b01      	cmp	r3, #1
 801e776:	d02c      	beq.n	801e7d2 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	d007      	beq.n	801e790 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801e780:	687b      	ldr	r3, [r7, #4]
 801e782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e784:	4618      	mov	r0, r3
 801e786:	f7fe fa77 	bl	801cc78 <pbuf_free>
      pcb->refused_data = NULL;
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	2200      	movs	r2, #0
 801e78e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e794:	4618      	mov	r0, r3
 801e796:	f7ff fd76 	bl	801e286 <tcp_segs_free>
    pcb->ooseq = NULL;
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	2200      	movs	r2, #0
 801e79e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e7a6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e7ac:	4618      	mov	r0, r3
 801e7ae:	f7ff fd6a 	bl	801e286 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e7b6:	4618      	mov	r0, r3
 801e7b8:	f7ff fd65 	bl	801e286 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	2200      	movs	r2, #0
 801e7c0:	669a      	str	r2, [r3, #104]	; 0x68
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	2200      	movs	r2, #0
 801e7ce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801e7d2:	bf00      	nop
 801e7d4:	3708      	adds	r7, #8
 801e7d6:	46bd      	mov	sp, r7
 801e7d8:	bd80      	pop	{r7, pc}
	...

0801e7dc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801e7dc:	b580      	push	{r7, lr}
 801e7de:	b084      	sub	sp, #16
 801e7e0:	af00      	add	r7, sp, #0
 801e7e2:	6078      	str	r0, [r7, #4]
 801e7e4:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	681a      	ldr	r2, [r3, #0]
 801e7ea:	683b      	ldr	r3, [r7, #0]
 801e7ec:	429a      	cmp	r2, r3
 801e7ee:	d105      	bne.n	801e7fc <tcp_pcb_remove+0x20>
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	68da      	ldr	r2, [r3, #12]
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	601a      	str	r2, [r3, #0]
 801e7fa:	e013      	b.n	801e824 <tcp_pcb_remove+0x48>
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	681b      	ldr	r3, [r3, #0]
 801e800:	60fb      	str	r3, [r7, #12]
 801e802:	e00c      	b.n	801e81e <tcp_pcb_remove+0x42>
 801e804:	68fb      	ldr	r3, [r7, #12]
 801e806:	68da      	ldr	r2, [r3, #12]
 801e808:	683b      	ldr	r3, [r7, #0]
 801e80a:	429a      	cmp	r2, r3
 801e80c:	d104      	bne.n	801e818 <tcp_pcb_remove+0x3c>
 801e80e:	683b      	ldr	r3, [r7, #0]
 801e810:	68da      	ldr	r2, [r3, #12]
 801e812:	68fb      	ldr	r3, [r7, #12]
 801e814:	60da      	str	r2, [r3, #12]
 801e816:	e005      	b.n	801e824 <tcp_pcb_remove+0x48>
 801e818:	68fb      	ldr	r3, [r7, #12]
 801e81a:	68db      	ldr	r3, [r3, #12]
 801e81c:	60fb      	str	r3, [r7, #12]
 801e81e:	68fb      	ldr	r3, [r7, #12]
 801e820:	2b00      	cmp	r3, #0
 801e822:	d1ef      	bne.n	801e804 <tcp_pcb_remove+0x28>
 801e824:	683b      	ldr	r3, [r7, #0]
 801e826:	2200      	movs	r2, #0
 801e828:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801e82a:	6838      	ldr	r0, [r7, #0]
 801e82c:	f7ff ff94 	bl	801e758 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 801e830:	683b      	ldr	r3, [r7, #0]
 801e832:	7d1b      	ldrb	r3, [r3, #20]
 801e834:	2b0a      	cmp	r3, #10
 801e836:	d013      	beq.n	801e860 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 801e838:	683b      	ldr	r3, [r7, #0]
 801e83a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 801e83c:	2b01      	cmp	r3, #1
 801e83e:	d00f      	beq.n	801e860 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 801e840:	683b      	ldr	r3, [r7, #0]
 801e842:	7e9b      	ldrb	r3, [r3, #26]
 801e844:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 801e848:	2b00      	cmp	r3, #0
 801e84a:	d009      	beq.n	801e860 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 801e84c:	683b      	ldr	r3, [r7, #0]
 801e84e:	7e9b      	ldrb	r3, [r3, #26]
 801e850:	f043 0302 	orr.w	r3, r3, #2
 801e854:	b2da      	uxtb	r2, r3
 801e856:	683b      	ldr	r3, [r7, #0]
 801e858:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801e85a:	6838      	ldr	r0, [r7, #0]
 801e85c:	f003 f9c0 	bl	8021be0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801e860:	683b      	ldr	r3, [r7, #0]
 801e862:	7d1b      	ldrb	r3, [r3, #20]
 801e864:	2b01      	cmp	r3, #1
 801e866:	d020      	beq.n	801e8aa <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801e868:	683b      	ldr	r3, [r7, #0]
 801e86a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	d006      	beq.n	801e87e <tcp_pcb_remove+0xa2>
 801e870:	4b13      	ldr	r3, [pc, #76]	; (801e8c0 <tcp_pcb_remove+0xe4>)
 801e872:	f240 7253 	movw	r2, #1875	; 0x753
 801e876:	4913      	ldr	r1, [pc, #76]	; (801e8c4 <tcp_pcb_remove+0xe8>)
 801e878:	4813      	ldr	r0, [pc, #76]	; (801e8c8 <tcp_pcb_remove+0xec>)
 801e87a:	f006 fef9 	bl	8025670 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801e87e:	683b      	ldr	r3, [r7, #0]
 801e880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e882:	2b00      	cmp	r3, #0
 801e884:	d006      	beq.n	801e894 <tcp_pcb_remove+0xb8>
 801e886:	4b0e      	ldr	r3, [pc, #56]	; (801e8c0 <tcp_pcb_remove+0xe4>)
 801e888:	f240 7254 	movw	r2, #1876	; 0x754
 801e88c:	490f      	ldr	r1, [pc, #60]	; (801e8cc <tcp_pcb_remove+0xf0>)
 801e88e:	480e      	ldr	r0, [pc, #56]	; (801e8c8 <tcp_pcb_remove+0xec>)
 801e890:	f006 feee 	bl	8025670 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801e894:	683b      	ldr	r3, [r7, #0]
 801e896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d006      	beq.n	801e8aa <tcp_pcb_remove+0xce>
 801e89c:	4b08      	ldr	r3, [pc, #32]	; (801e8c0 <tcp_pcb_remove+0xe4>)
 801e89e:	f240 7256 	movw	r2, #1878	; 0x756
 801e8a2:	490b      	ldr	r1, [pc, #44]	; (801e8d0 <tcp_pcb_remove+0xf4>)
 801e8a4:	4808      	ldr	r0, [pc, #32]	; (801e8c8 <tcp_pcb_remove+0xec>)
 801e8a6:	f006 fee3 	bl	8025670 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801e8aa:	683b      	ldr	r3, [r7, #0]
 801e8ac:	2200      	movs	r2, #0
 801e8ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801e8b0:	683b      	ldr	r3, [r7, #0]
 801e8b2:	2200      	movs	r2, #0
 801e8b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801e8b6:	bf00      	nop
 801e8b8:	3710      	adds	r7, #16
 801e8ba:	46bd      	mov	sp, r7
 801e8bc:	bd80      	pop	{r7, pc}
 801e8be:	bf00      	nop
 801e8c0:	08027bb8 	.word	0x08027bb8
 801e8c4:	08027f70 	.word	0x08027f70
 801e8c8:	08027bf4 	.word	0x08027bf4
 801e8cc:	08027f88 	.word	0x08027f88
 801e8d0:	08027fa4 	.word	0x08027fa4

0801e8d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801e8d4:	b480      	push	{r7}
 801e8d6:	b083      	sub	sp, #12
 801e8d8:	af00      	add	r7, sp, #0
 801e8da:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801e8dc:	4b07      	ldr	r3, [pc, #28]	; (801e8fc <tcp_next_iss+0x28>)
 801e8de:	681a      	ldr	r2, [r3, #0]
 801e8e0:	4b07      	ldr	r3, [pc, #28]	; (801e900 <tcp_next_iss+0x2c>)
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	4413      	add	r3, r2
 801e8e6:	4a05      	ldr	r2, [pc, #20]	; (801e8fc <tcp_next_iss+0x28>)
 801e8e8:	6013      	str	r3, [r2, #0]
  return iss;
 801e8ea:	4b04      	ldr	r3, [pc, #16]	; (801e8fc <tcp_next_iss+0x28>)
 801e8ec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801e8ee:	4618      	mov	r0, r3
 801e8f0:	370c      	adds	r7, #12
 801e8f2:	46bd      	mov	sp, r7
 801e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8f8:	4770      	bx	lr
 801e8fa:	bf00      	nop
 801e8fc:	2000000c 	.word	0x2000000c
 801e900:	20008c28 	.word	0x20008c28

0801e904 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 801e904:	b580      	push	{r7, lr}
 801e906:	b084      	sub	sp, #16
 801e908:	af00      	add	r7, sp, #0
 801e90a:	4603      	mov	r3, r0
 801e90c:	6039      	str	r1, [r7, #0]
 801e90e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801e910:	6838      	ldr	r0, [r7, #0]
 801e912:	f7fb fe03 	bl	801a51c <ip4_route>
 801e916:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801e918:	68fb      	ldr	r3, [r7, #12]
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	d101      	bne.n	801e922 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801e91e:	88fb      	ldrh	r3, [r7, #6]
 801e920:	e010      	b.n	801e944 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 801e922:	68fb      	ldr	r3, [r7, #12]
 801e924:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e926:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801e928:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d008      	beq.n	801e942 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 801e930:	897b      	ldrh	r3, [r7, #10]
 801e932:	3b28      	subs	r3, #40	; 0x28
 801e934:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801e936:	893a      	ldrh	r2, [r7, #8]
 801e938:	88fb      	ldrh	r3, [r7, #6]
 801e93a:	4293      	cmp	r3, r2
 801e93c:	bf28      	it	cs
 801e93e:	4613      	movcs	r3, r2
 801e940:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801e942:	88fb      	ldrh	r3, [r7, #6]
}
 801e944:	4618      	mov	r0, r3
 801e946:	3710      	adds	r7, #16
 801e948:	46bd      	mov	sp, r7
 801e94a:	bd80      	pop	{r7, pc}

0801e94c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 801e94c:	b580      	push	{r7, lr}
 801e94e:	b084      	sub	sp, #16
 801e950:	af00      	add	r7, sp, #0
 801e952:	6078      	str	r0, [r7, #4]
 801e954:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801e956:	683b      	ldr	r3, [r7, #0]
 801e958:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801e95a:	e011      	b.n	801e980 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	681a      	ldr	r2, [r3, #0]
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	429a      	cmp	r2, r3
 801e966:	d108      	bne.n	801e97a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801e968:	68fb      	ldr	r3, [r7, #12]
 801e96a:	68db      	ldr	r3, [r3, #12]
 801e96c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801e96e:	68f8      	ldr	r0, [r7, #12]
 801e970:	f7fe fec8 	bl	801d704 <tcp_abort>
      pcb = next;
 801e974:	68bb      	ldr	r3, [r7, #8]
 801e976:	60fb      	str	r3, [r7, #12]
 801e978:	e002      	b.n	801e980 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 801e97a:	68fb      	ldr	r3, [r7, #12]
 801e97c:	68db      	ldr	r3, [r3, #12]
 801e97e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801e980:	68fb      	ldr	r3, [r7, #12]
 801e982:	2b00      	cmp	r3, #0
 801e984:	d1ea      	bne.n	801e95c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 801e986:	bf00      	nop
 801e988:	3710      	adds	r7, #16
 801e98a:	46bd      	mov	sp, r7
 801e98c:	bd80      	pop	{r7, pc}
	...

0801e990 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801e990:	b580      	push	{r7, lr}
 801e992:	b084      	sub	sp, #16
 801e994:	af00      	add	r7, sp, #0
 801e996:	6078      	str	r0, [r7, #4]
 801e998:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	d02c      	beq.n	801e9fa <tcp_netif_ip_addr_changed+0x6a>
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	681b      	ldr	r3, [r3, #0]
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	d028      	beq.n	801e9fa <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801e9a8:	4b16      	ldr	r3, [pc, #88]	; (801ea04 <tcp_netif_ip_addr_changed+0x74>)
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	4619      	mov	r1, r3
 801e9ae:	6878      	ldr	r0, [r7, #4]
 801e9b0:	f7ff ffcc 	bl	801e94c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801e9b4:	4b14      	ldr	r3, [pc, #80]	; (801ea08 <tcp_netif_ip_addr_changed+0x78>)
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	4619      	mov	r1, r3
 801e9ba:	6878      	ldr	r0, [r7, #4]
 801e9bc:	f7ff ffc6 	bl	801e94c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801e9c0:	683b      	ldr	r3, [r7, #0]
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d019      	beq.n	801e9fa <tcp_netif_ip_addr_changed+0x6a>
 801e9c6:	683b      	ldr	r3, [r7, #0]
 801e9c8:	681b      	ldr	r3, [r3, #0]
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d015      	beq.n	801e9fa <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801e9ce:	4b0f      	ldr	r3, [pc, #60]	; (801ea0c <tcp_netif_ip_addr_changed+0x7c>)
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	60fb      	str	r3, [r7, #12]
 801e9d4:	e00e      	b.n	801e9f4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 801e9d6:	68fb      	ldr	r3, [r7, #12]
 801e9d8:	68db      	ldr	r3, [r3, #12]
 801e9da:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801e9dc:	68fb      	ldr	r3, [r7, #12]
 801e9de:	681a      	ldr	r2, [r3, #0]
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	429a      	cmp	r2, r3
 801e9e6:	d103      	bne.n	801e9f0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801e9e8:	683b      	ldr	r3, [r7, #0]
 801e9ea:	681a      	ldr	r2, [r3, #0]
 801e9ec:	68fb      	ldr	r3, [r7, #12]
 801e9ee:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801e9f0:	68bb      	ldr	r3, [r7, #8]
 801e9f2:	60fb      	str	r3, [r7, #12]
 801e9f4:	68fb      	ldr	r3, [r7, #12]
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	d1ed      	bne.n	801e9d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801e9fa:	bf00      	nop
 801e9fc:	3710      	adds	r7, #16
 801e9fe:	46bd      	mov	sp, r7
 801ea00:	bd80      	pop	{r7, pc}
 801ea02:	bf00      	nop
 801ea04:	20008c24 	.word	0x20008c24
 801ea08:	20008c30 	.word	0x20008c30
 801ea0c:	20008c2c 	.word	0x20008c2c

0801ea10 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801ea10:	b590      	push	{r4, r7, lr}
 801ea12:	b08b      	sub	sp, #44	; 0x2c
 801ea14:	af02      	add	r7, sp, #8
 801ea16:	6078      	str	r0, [r7, #4]
 801ea18:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	685b      	ldr	r3, [r3, #4]
 801ea1e:	4a82      	ldr	r2, [pc, #520]	; (801ec28 <tcp_input+0x218>)
 801ea20:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	895b      	ldrh	r3, [r3, #10]
 801ea26:	2b13      	cmp	r3, #19
 801ea28:	f240 8388 	bls.w	801f13c <tcp_input+0x72c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ea2c:	4b7f      	ldr	r3, [pc, #508]	; (801ec2c <tcp_input+0x21c>)
 801ea2e:	695a      	ldr	r2, [r3, #20]
 801ea30:	4b7e      	ldr	r3, [pc, #504]	; (801ec2c <tcp_input+0x21c>)
 801ea32:	681b      	ldr	r3, [r3, #0]
 801ea34:	4619      	mov	r1, r3
 801ea36:	4610      	mov	r0, r2
 801ea38:	f7fb ffe6 	bl	801aa08 <ip4_addr_isbroadcast_u32>
 801ea3c:	4603      	mov	r3, r0
 801ea3e:	2b00      	cmp	r3, #0
 801ea40:	f040 837f 	bne.w	801f142 <tcp_input+0x732>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ea44:	4b79      	ldr	r3, [pc, #484]	; (801ec2c <tcp_input+0x21c>)
 801ea46:	695b      	ldr	r3, [r3, #20]
 801ea48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ea4c:	2be0      	cmp	r3, #224	; 0xe0
 801ea4e:	f000 8378 	beq.w	801f142 <tcp_input+0x732>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801ea52:	4b75      	ldr	r3, [pc, #468]	; (801ec28 <tcp_input+0x218>)
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	899b      	ldrh	r3, [r3, #12]
 801ea58:	b29b      	uxth	r3, r3
 801ea5a:	4618      	mov	r0, r3
 801ea5c:	f7fa fc7c 	bl	8019358 <lwip_htons>
 801ea60:	4603      	mov	r3, r0
 801ea62:	0b1b      	lsrs	r3, r3, #12
 801ea64:	b29b      	uxth	r3, r3
 801ea66:	b2db      	uxtb	r3, r3
 801ea68:	009b      	lsls	r3, r3, #2
 801ea6a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ea6c:	7cbb      	ldrb	r3, [r7, #18]
 801ea6e:	2b13      	cmp	r3, #19
 801ea70:	f240 8367 	bls.w	801f142 <tcp_input+0x732>
 801ea74:	7cbb      	ldrb	r3, [r7, #18]
 801ea76:	b29a      	uxth	r2, r3
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	891b      	ldrh	r3, [r3, #8]
 801ea7c:	429a      	cmp	r2, r3
 801ea7e:	f200 8360 	bhi.w	801f142 <tcp_input+0x732>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801ea82:	7cbb      	ldrb	r3, [r7, #18]
 801ea84:	b29b      	uxth	r3, r3
 801ea86:	3b14      	subs	r3, #20
 801ea88:	b29a      	uxth	r2, r3
 801ea8a:	4b69      	ldr	r3, [pc, #420]	; (801ec30 <tcp_input+0x220>)
 801ea8c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801ea8e:	4b69      	ldr	r3, [pc, #420]	; (801ec34 <tcp_input+0x224>)
 801ea90:	2200      	movs	r2, #0
 801ea92:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	895a      	ldrh	r2, [r3, #10]
 801ea98:	7cbb      	ldrb	r3, [r7, #18]
 801ea9a:	b29b      	uxth	r3, r3
 801ea9c:	429a      	cmp	r2, r3
 801ea9e:	d30d      	bcc.n	801eabc <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801eaa0:	4b63      	ldr	r3, [pc, #396]	; (801ec30 <tcp_input+0x220>)
 801eaa2:	881a      	ldrh	r2, [r3, #0]
 801eaa4:	4b64      	ldr	r3, [pc, #400]	; (801ec38 <tcp_input+0x228>)
 801eaa6:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801eaa8:	7cbb      	ldrb	r3, [r7, #18]
 801eaaa:	b29b      	uxth	r3, r3
 801eaac:	425b      	negs	r3, r3
 801eaae:	b29b      	uxth	r3, r3
 801eab0:	b21b      	sxth	r3, r3
 801eab2:	4619      	mov	r1, r3
 801eab4:	6878      	ldr	r0, [r7, #4]
 801eab6:	f7fe f8bb 	bl	801cc30 <pbuf_header>
 801eaba:	e055      	b.n	801eb68 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	681b      	ldr	r3, [r3, #0]
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d105      	bne.n	801ead0 <tcp_input+0xc0>
 801eac4:	4b5d      	ldr	r3, [pc, #372]	; (801ec3c <tcp_input+0x22c>)
 801eac6:	22b2      	movs	r2, #178	; 0xb2
 801eac8:	495d      	ldr	r1, [pc, #372]	; (801ec40 <tcp_input+0x230>)
 801eaca:	485e      	ldr	r0, [pc, #376]	; (801ec44 <tcp_input+0x234>)
 801eacc:	f006 fdd0 	bl	8025670 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801ead0:	f06f 0113 	mvn.w	r1, #19
 801ead4:	6878      	ldr	r0, [r7, #4]
 801ead6:	f7fe f8ab 	bl	801cc30 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	895a      	ldrh	r2, [r3, #10]
 801eade:	4b56      	ldr	r3, [pc, #344]	; (801ec38 <tcp_input+0x228>)
 801eae0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801eae2:	4b53      	ldr	r3, [pc, #332]	; (801ec30 <tcp_input+0x220>)
 801eae4:	881a      	ldrh	r2, [r3, #0]
 801eae6:	4b54      	ldr	r3, [pc, #336]	; (801ec38 <tcp_input+0x228>)
 801eae8:	881b      	ldrh	r3, [r3, #0]
 801eaea:	1ad3      	subs	r3, r2, r3
 801eaec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801eaee:	4b52      	ldr	r3, [pc, #328]	; (801ec38 <tcp_input+0x228>)
 801eaf0:	881b      	ldrh	r3, [r3, #0]
 801eaf2:	425b      	negs	r3, r3
 801eaf4:	b29b      	uxth	r3, r3
 801eaf6:	b21b      	sxth	r3, r3
 801eaf8:	4619      	mov	r1, r3
 801eafa:	6878      	ldr	r0, [r7, #4]
 801eafc:	f7fe f898 	bl	801cc30 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	681b      	ldr	r3, [r3, #0]
 801eb04:	895b      	ldrh	r3, [r3, #10]
 801eb06:	8a3a      	ldrh	r2, [r7, #16]
 801eb08:	429a      	cmp	r2, r3
 801eb0a:	f200 8319 	bhi.w	801f140 <tcp_input+0x730>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	685b      	ldr	r3, [r3, #4]
 801eb14:	4a47      	ldr	r2, [pc, #284]	; (801ec34 <tcp_input+0x224>)
 801eb16:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	681a      	ldr	r2, [r3, #0]
 801eb1c:	8a3b      	ldrh	r3, [r7, #16]
 801eb1e:	425b      	negs	r3, r3
 801eb20:	b29b      	uxth	r3, r3
 801eb22:	b21b      	sxth	r3, r3
 801eb24:	4619      	mov	r1, r3
 801eb26:	4610      	mov	r0, r2
 801eb28:	f7fe f882 	bl	801cc30 <pbuf_header>
    p->tot_len -= opt2len;
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	891a      	ldrh	r2, [r3, #8]
 801eb30:	8a3b      	ldrh	r3, [r7, #16]
 801eb32:	1ad3      	subs	r3, r2, r3
 801eb34:	b29a      	uxth	r2, r3
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	895b      	ldrh	r3, [r3, #10]
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d005      	beq.n	801eb4e <tcp_input+0x13e>
 801eb42:	4b3e      	ldr	r3, [pc, #248]	; (801ec3c <tcp_input+0x22c>)
 801eb44:	22cf      	movs	r2, #207	; 0xcf
 801eb46:	4940      	ldr	r1, [pc, #256]	; (801ec48 <tcp_input+0x238>)
 801eb48:	483e      	ldr	r0, [pc, #248]	; (801ec44 <tcp_input+0x234>)
 801eb4a:	f006 fd91 	bl	8025670 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	891a      	ldrh	r2, [r3, #8]
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	681b      	ldr	r3, [r3, #0]
 801eb56:	891b      	ldrh	r3, [r3, #8]
 801eb58:	429a      	cmp	r2, r3
 801eb5a:	d005      	beq.n	801eb68 <tcp_input+0x158>
 801eb5c:	4b37      	ldr	r3, [pc, #220]	; (801ec3c <tcp_input+0x22c>)
 801eb5e:	22d0      	movs	r2, #208	; 0xd0
 801eb60:	493a      	ldr	r1, [pc, #232]	; (801ec4c <tcp_input+0x23c>)
 801eb62:	4838      	ldr	r0, [pc, #224]	; (801ec44 <tcp_input+0x234>)
 801eb64:	f006 fd84 	bl	8025670 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801eb68:	4b2f      	ldr	r3, [pc, #188]	; (801ec28 <tcp_input+0x218>)
 801eb6a:	681c      	ldr	r4, [r3, #0]
 801eb6c:	4b2e      	ldr	r3, [pc, #184]	; (801ec28 <tcp_input+0x218>)
 801eb6e:	681b      	ldr	r3, [r3, #0]
 801eb70:	881b      	ldrh	r3, [r3, #0]
 801eb72:	b29b      	uxth	r3, r3
 801eb74:	4618      	mov	r0, r3
 801eb76:	f7fa fbef 	bl	8019358 <lwip_htons>
 801eb7a:	4603      	mov	r3, r0
 801eb7c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801eb7e:	4b2a      	ldr	r3, [pc, #168]	; (801ec28 <tcp_input+0x218>)
 801eb80:	681c      	ldr	r4, [r3, #0]
 801eb82:	4b29      	ldr	r3, [pc, #164]	; (801ec28 <tcp_input+0x218>)
 801eb84:	681b      	ldr	r3, [r3, #0]
 801eb86:	885b      	ldrh	r3, [r3, #2]
 801eb88:	b29b      	uxth	r3, r3
 801eb8a:	4618      	mov	r0, r3
 801eb8c:	f7fa fbe4 	bl	8019358 <lwip_htons>
 801eb90:	4603      	mov	r3, r0
 801eb92:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801eb94:	4b24      	ldr	r3, [pc, #144]	; (801ec28 <tcp_input+0x218>)
 801eb96:	681c      	ldr	r4, [r3, #0]
 801eb98:	4b23      	ldr	r3, [pc, #140]	; (801ec28 <tcp_input+0x218>)
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	685b      	ldr	r3, [r3, #4]
 801eb9e:	4618      	mov	r0, r3
 801eba0:	f7fa fbe8 	bl	8019374 <lwip_htonl>
 801eba4:	4603      	mov	r3, r0
 801eba6:	6063      	str	r3, [r4, #4]
 801eba8:	6863      	ldr	r3, [r4, #4]
 801ebaa:	4a29      	ldr	r2, [pc, #164]	; (801ec50 <tcp_input+0x240>)
 801ebac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ebae:	4b1e      	ldr	r3, [pc, #120]	; (801ec28 <tcp_input+0x218>)
 801ebb0:	681c      	ldr	r4, [r3, #0]
 801ebb2:	4b1d      	ldr	r3, [pc, #116]	; (801ec28 <tcp_input+0x218>)
 801ebb4:	681b      	ldr	r3, [r3, #0]
 801ebb6:	689b      	ldr	r3, [r3, #8]
 801ebb8:	4618      	mov	r0, r3
 801ebba:	f7fa fbdb 	bl	8019374 <lwip_htonl>
 801ebbe:	4603      	mov	r3, r0
 801ebc0:	60a3      	str	r3, [r4, #8]
 801ebc2:	68a3      	ldr	r3, [r4, #8]
 801ebc4:	4a23      	ldr	r2, [pc, #140]	; (801ec54 <tcp_input+0x244>)
 801ebc6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ebc8:	4b17      	ldr	r3, [pc, #92]	; (801ec28 <tcp_input+0x218>)
 801ebca:	681c      	ldr	r4, [r3, #0]
 801ebcc:	4b16      	ldr	r3, [pc, #88]	; (801ec28 <tcp_input+0x218>)
 801ebce:	681b      	ldr	r3, [r3, #0]
 801ebd0:	89db      	ldrh	r3, [r3, #14]
 801ebd2:	b29b      	uxth	r3, r3
 801ebd4:	4618      	mov	r0, r3
 801ebd6:	f7fa fbbf 	bl	8019358 <lwip_htons>
 801ebda:	4603      	mov	r3, r0
 801ebdc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801ebde:	4b12      	ldr	r3, [pc, #72]	; (801ec28 <tcp_input+0x218>)
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	899b      	ldrh	r3, [r3, #12]
 801ebe4:	b29b      	uxth	r3, r3
 801ebe6:	4618      	mov	r0, r3
 801ebe8:	f7fa fbb6 	bl	8019358 <lwip_htons>
 801ebec:	4603      	mov	r3, r0
 801ebee:	b2db      	uxtb	r3, r3
 801ebf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ebf4:	b2da      	uxtb	r2, r3
 801ebf6:	4b18      	ldr	r3, [pc, #96]	; (801ec58 <tcp_input+0x248>)
 801ebf8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	891a      	ldrh	r2, [r3, #8]
 801ebfe:	4b16      	ldr	r3, [pc, #88]	; (801ec58 <tcp_input+0x248>)
 801ec00:	781b      	ldrb	r3, [r3, #0]
 801ec02:	f003 0303 	and.w	r3, r3, #3
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	bf14      	ite	ne
 801ec0a:	2301      	movne	r3, #1
 801ec0c:	2300      	moveq	r3, #0
 801ec0e:	b2db      	uxtb	r3, r3
 801ec10:	b29b      	uxth	r3, r3
 801ec12:	4413      	add	r3, r2
 801ec14:	b29a      	uxth	r2, r3
 801ec16:	4b11      	ldr	r3, [pc, #68]	; (801ec5c <tcp_input+0x24c>)
 801ec18:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801ec1a:	2300      	movs	r3, #0
 801ec1c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ec1e:	4b10      	ldr	r3, [pc, #64]	; (801ec60 <tcp_input+0x250>)
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	61fb      	str	r3, [r7, #28]
 801ec24:	e082      	b.n	801ed2c <tcp_input+0x31c>
 801ec26:	bf00      	nop
 801ec28:	200040fc 	.word	0x200040fc
 801ec2c:	200045fc 	.word	0x200045fc
 801ec30:	20004100 	.word	0x20004100
 801ec34:	20004104 	.word	0x20004104
 801ec38:	20004102 	.word	0x20004102
 801ec3c:	08027fbc 	.word	0x08027fbc
 801ec40:	08027ff0 	.word	0x08027ff0
 801ec44:	08028000 	.word	0x08028000
 801ec48:	08028028 	.word	0x08028028
 801ec4c:	08028034 	.word	0x08028034
 801ec50:	2000410c 	.word	0x2000410c
 801ec54:	20004110 	.word	0x20004110
 801ec58:	20004118 	.word	0x20004118
 801ec5c:	20004116 	.word	0x20004116
 801ec60:	20008c24 	.word	0x20008c24
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ec64:	69fb      	ldr	r3, [r7, #28]
 801ec66:	7d1b      	ldrb	r3, [r3, #20]
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d105      	bne.n	801ec78 <tcp_input+0x268>
 801ec6c:	4b8f      	ldr	r3, [pc, #572]	; (801eeac <tcp_input+0x49c>)
 801ec6e:	22e2      	movs	r2, #226	; 0xe2
 801ec70:	498f      	ldr	r1, [pc, #572]	; (801eeb0 <tcp_input+0x4a0>)
 801ec72:	4890      	ldr	r0, [pc, #576]	; (801eeb4 <tcp_input+0x4a4>)
 801ec74:	f006 fcfc 	bl	8025670 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ec78:	69fb      	ldr	r3, [r7, #28]
 801ec7a:	7d1b      	ldrb	r3, [r3, #20]
 801ec7c:	2b0a      	cmp	r3, #10
 801ec7e:	d105      	bne.n	801ec8c <tcp_input+0x27c>
 801ec80:	4b8a      	ldr	r3, [pc, #552]	; (801eeac <tcp_input+0x49c>)
 801ec82:	22e3      	movs	r2, #227	; 0xe3
 801ec84:	498c      	ldr	r1, [pc, #560]	; (801eeb8 <tcp_input+0x4a8>)
 801ec86:	488b      	ldr	r0, [pc, #556]	; (801eeb4 <tcp_input+0x4a4>)
 801ec88:	f006 fcf2 	bl	8025670 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ec8c:	69fb      	ldr	r3, [r7, #28]
 801ec8e:	7d1b      	ldrb	r3, [r3, #20]
 801ec90:	2b01      	cmp	r3, #1
 801ec92:	d105      	bne.n	801eca0 <tcp_input+0x290>
 801ec94:	4b85      	ldr	r3, [pc, #532]	; (801eeac <tcp_input+0x49c>)
 801ec96:	22e4      	movs	r2, #228	; 0xe4
 801ec98:	4988      	ldr	r1, [pc, #544]	; (801eebc <tcp_input+0x4ac>)
 801ec9a:	4886      	ldr	r0, [pc, #536]	; (801eeb4 <tcp_input+0x4a4>)
 801ec9c:	f006 fce8 	bl	8025670 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 801eca0:	69fb      	ldr	r3, [r7, #28]
 801eca2:	8b1a      	ldrh	r2, [r3, #24]
 801eca4:	4b86      	ldr	r3, [pc, #536]	; (801eec0 <tcp_input+0x4b0>)
 801eca6:	681b      	ldr	r3, [r3, #0]
 801eca8:	881b      	ldrh	r3, [r3, #0]
 801ecaa:	b29b      	uxth	r3, r3
 801ecac:	429a      	cmp	r2, r3
 801ecae:	d138      	bne.n	801ed22 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 801ecb0:	69fb      	ldr	r3, [r7, #28]
 801ecb2:	8ada      	ldrh	r2, [r3, #22]
 801ecb4:	4b82      	ldr	r3, [pc, #520]	; (801eec0 <tcp_input+0x4b0>)
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	885b      	ldrh	r3, [r3, #2]
 801ecba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801ecbc:	429a      	cmp	r2, r3
 801ecbe:	d130      	bne.n	801ed22 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ecc0:	69fb      	ldr	r3, [r7, #28]
 801ecc2:	685a      	ldr	r2, [r3, #4]
 801ecc4:	4b7f      	ldr	r3, [pc, #508]	; (801eec4 <tcp_input+0x4b4>)
 801ecc6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801ecc8:	429a      	cmp	r2, r3
 801ecca:	d12a      	bne.n	801ed22 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801eccc:	69fb      	ldr	r3, [r7, #28]
 801ecce:	681a      	ldr	r2, [r3, #0]
 801ecd0:	4b7c      	ldr	r3, [pc, #496]	; (801eec4 <tcp_input+0x4b4>)
 801ecd2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ecd4:	429a      	cmp	r2, r3
 801ecd6:	d124      	bne.n	801ed22 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ecd8:	69fb      	ldr	r3, [r7, #28]
 801ecda:	68da      	ldr	r2, [r3, #12]
 801ecdc:	69fb      	ldr	r3, [r7, #28]
 801ecde:	429a      	cmp	r2, r3
 801ece0:	d105      	bne.n	801ecee <tcp_input+0x2de>
 801ece2:	4b72      	ldr	r3, [pc, #456]	; (801eeac <tcp_input+0x49c>)
 801ece4:	22ec      	movs	r2, #236	; 0xec
 801ece6:	4978      	ldr	r1, [pc, #480]	; (801eec8 <tcp_input+0x4b8>)
 801ece8:	4872      	ldr	r0, [pc, #456]	; (801eeb4 <tcp_input+0x4a4>)
 801ecea:	f006 fcc1 	bl	8025670 <iprintf>
      if (prev != NULL) {
 801ecee:	69bb      	ldr	r3, [r7, #24]
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	d00a      	beq.n	801ed0a <tcp_input+0x2fa>
        prev->next = pcb->next;
 801ecf4:	69fb      	ldr	r3, [r7, #28]
 801ecf6:	68da      	ldr	r2, [r3, #12]
 801ecf8:	69bb      	ldr	r3, [r7, #24]
 801ecfa:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801ecfc:	4b73      	ldr	r3, [pc, #460]	; (801eecc <tcp_input+0x4bc>)
 801ecfe:	681a      	ldr	r2, [r3, #0]
 801ed00:	69fb      	ldr	r3, [r7, #28]
 801ed02:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801ed04:	4a71      	ldr	r2, [pc, #452]	; (801eecc <tcp_input+0x4bc>)
 801ed06:	69fb      	ldr	r3, [r7, #28]
 801ed08:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ed0a:	69fb      	ldr	r3, [r7, #28]
 801ed0c:	68da      	ldr	r2, [r3, #12]
 801ed0e:	69fb      	ldr	r3, [r7, #28]
 801ed10:	429a      	cmp	r2, r3
 801ed12:	d10f      	bne.n	801ed34 <tcp_input+0x324>
 801ed14:	4b65      	ldr	r3, [pc, #404]	; (801eeac <tcp_input+0x49c>)
 801ed16:	22f4      	movs	r2, #244	; 0xf4
 801ed18:	496d      	ldr	r1, [pc, #436]	; (801eed0 <tcp_input+0x4c0>)
 801ed1a:	4866      	ldr	r0, [pc, #408]	; (801eeb4 <tcp_input+0x4a4>)
 801ed1c:	f006 fca8 	bl	8025670 <iprintf>
      break;
 801ed20:	e008      	b.n	801ed34 <tcp_input+0x324>
    }
    prev = pcb;
 801ed22:	69fb      	ldr	r3, [r7, #28]
 801ed24:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed26:	69fb      	ldr	r3, [r7, #28]
 801ed28:	68db      	ldr	r3, [r3, #12]
 801ed2a:	61fb      	str	r3, [r7, #28]
 801ed2c:	69fb      	ldr	r3, [r7, #28]
 801ed2e:	2b00      	cmp	r3, #0
 801ed30:	d198      	bne.n	801ec64 <tcp_input+0x254>
 801ed32:	e000      	b.n	801ed36 <tcp_input+0x326>
      break;
 801ed34:	bf00      	nop
  }

  if (pcb == NULL) {
 801ed36:	69fb      	ldr	r3, [r7, #28]
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	d173      	bne.n	801ee24 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed3c:	4b65      	ldr	r3, [pc, #404]	; (801eed4 <tcp_input+0x4c4>)
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	61fb      	str	r3, [r7, #28]
 801ed42:	e02f      	b.n	801eda4 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ed44:	69fb      	ldr	r3, [r7, #28]
 801ed46:	7d1b      	ldrb	r3, [r3, #20]
 801ed48:	2b0a      	cmp	r3, #10
 801ed4a:	d005      	beq.n	801ed58 <tcp_input+0x348>
 801ed4c:	4b57      	ldr	r3, [pc, #348]	; (801eeac <tcp_input+0x49c>)
 801ed4e:	22fe      	movs	r2, #254	; 0xfe
 801ed50:	4961      	ldr	r1, [pc, #388]	; (801eed8 <tcp_input+0x4c8>)
 801ed52:	4858      	ldr	r0, [pc, #352]	; (801eeb4 <tcp_input+0x4a4>)
 801ed54:	f006 fc8c 	bl	8025670 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 801ed58:	69fb      	ldr	r3, [r7, #28]
 801ed5a:	8b1a      	ldrh	r2, [r3, #24]
 801ed5c:	4b58      	ldr	r3, [pc, #352]	; (801eec0 <tcp_input+0x4b0>)
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	881b      	ldrh	r3, [r3, #0]
 801ed62:	b29b      	uxth	r3, r3
 801ed64:	429a      	cmp	r2, r3
 801ed66:	d11a      	bne.n	801ed9e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 801ed68:	69fb      	ldr	r3, [r7, #28]
 801ed6a:	8ada      	ldrh	r2, [r3, #22]
 801ed6c:	4b54      	ldr	r3, [pc, #336]	; (801eec0 <tcp_input+0x4b0>)
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	885b      	ldrh	r3, [r3, #2]
 801ed72:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801ed74:	429a      	cmp	r2, r3
 801ed76:	d112      	bne.n	801ed9e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ed78:	69fb      	ldr	r3, [r7, #28]
 801ed7a:	685a      	ldr	r2, [r3, #4]
 801ed7c:	4b51      	ldr	r3, [pc, #324]	; (801eec4 <tcp_input+0x4b4>)
 801ed7e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801ed80:	429a      	cmp	r2, r3
 801ed82:	d10c      	bne.n	801ed9e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ed84:	69fb      	ldr	r3, [r7, #28]
 801ed86:	681a      	ldr	r2, [r3, #0]
 801ed88:	4b4e      	ldr	r3, [pc, #312]	; (801eec4 <tcp_input+0x4b4>)
 801ed8a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ed8c:	429a      	cmp	r2, r3
 801ed8e:	d106      	bne.n	801ed9e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 801ed90:	69f8      	ldr	r0, [r7, #28]
 801ed92:	f000 fb11 	bl	801f3b8 <tcp_timewait_input>
        pbuf_free(p);
 801ed96:	6878      	ldr	r0, [r7, #4]
 801ed98:	f7fd ff6e 	bl	801cc78 <pbuf_free>
        return;
 801ed9c:	e1d6      	b.n	801f14c <tcp_input+0x73c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed9e:	69fb      	ldr	r3, [r7, #28]
 801eda0:	68db      	ldr	r3, [r3, #12]
 801eda2:	61fb      	str	r3, [r7, #28]
 801eda4:	69fb      	ldr	r3, [r7, #28]
 801eda6:	2b00      	cmp	r3, #0
 801eda8:	d1cc      	bne.n	801ed44 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801edaa:	2300      	movs	r3, #0
 801edac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801edae:	4b4b      	ldr	r3, [pc, #300]	; (801eedc <tcp_input+0x4cc>)
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	617b      	str	r3, [r7, #20]
 801edb4:	e019      	b.n	801edea <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 801edb6:	697b      	ldr	r3, [r7, #20]
 801edb8:	8ada      	ldrh	r2, [r3, #22]
 801edba:	4b41      	ldr	r3, [pc, #260]	; (801eec0 <tcp_input+0x4b0>)
 801edbc:	681b      	ldr	r3, [r3, #0]
 801edbe:	885b      	ldrh	r3, [r3, #2]
 801edc0:	b29b      	uxth	r3, r3
 801edc2:	429a      	cmp	r2, r3
 801edc4:	d10c      	bne.n	801ede0 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801edc6:	697b      	ldr	r3, [r7, #20]
 801edc8:	681a      	ldr	r2, [r3, #0]
 801edca:	4b3e      	ldr	r3, [pc, #248]	; (801eec4 <tcp_input+0x4b4>)
 801edcc:	695b      	ldr	r3, [r3, #20]
 801edce:	429a      	cmp	r2, r3
 801edd0:	d00f      	beq.n	801edf2 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801edd2:	697b      	ldr	r3, [r7, #20]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d00d      	beq.n	801edf4 <tcp_input+0x3e4>
 801edd8:	697b      	ldr	r3, [r7, #20]
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d009      	beq.n	801edf4 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801ede0:	697b      	ldr	r3, [r7, #20]
 801ede2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ede4:	697b      	ldr	r3, [r7, #20]
 801ede6:	68db      	ldr	r3, [r3, #12]
 801ede8:	617b      	str	r3, [r7, #20]
 801edea:	697b      	ldr	r3, [r7, #20]
 801edec:	2b00      	cmp	r3, #0
 801edee:	d1e2      	bne.n	801edb6 <tcp_input+0x3a6>
 801edf0:	e000      	b.n	801edf4 <tcp_input+0x3e4>
            break;
 801edf2:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801edf4:	697b      	ldr	r3, [r7, #20]
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d014      	beq.n	801ee24 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801edfa:	69bb      	ldr	r3, [r7, #24]
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d00a      	beq.n	801ee16 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801ee00:	697b      	ldr	r3, [r7, #20]
 801ee02:	68da      	ldr	r2, [r3, #12]
 801ee04:	69bb      	ldr	r3, [r7, #24]
 801ee06:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801ee08:	4b34      	ldr	r3, [pc, #208]	; (801eedc <tcp_input+0x4cc>)
 801ee0a:	681a      	ldr	r2, [r3, #0]
 801ee0c:	697b      	ldr	r3, [r7, #20]
 801ee0e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801ee10:	4a32      	ldr	r2, [pc, #200]	; (801eedc <tcp_input+0x4cc>)
 801ee12:	697b      	ldr	r3, [r7, #20]
 801ee14:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 801ee16:	6978      	ldr	r0, [r7, #20]
 801ee18:	f000 f9ec 	bl	801f1f4 <tcp_listen_input>
      pbuf_free(p);
 801ee1c:	6878      	ldr	r0, [r7, #4]
 801ee1e:	f7fd ff2b 	bl	801cc78 <pbuf_free>
      return;
 801ee22:	e193      	b.n	801f14c <tcp_input+0x73c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 801ee24:	69fb      	ldr	r3, [r7, #28]
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	f000 8162 	beq.w	801f0f0 <tcp_input+0x6e0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801ee2c:	4b2c      	ldr	r3, [pc, #176]	; (801eee0 <tcp_input+0x4d0>)
 801ee2e:	2200      	movs	r2, #0
 801ee30:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	891a      	ldrh	r2, [r3, #8]
 801ee36:	4b2a      	ldr	r3, [pc, #168]	; (801eee0 <tcp_input+0x4d0>)
 801ee38:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801ee3a:	4a29      	ldr	r2, [pc, #164]	; (801eee0 <tcp_input+0x4d0>)
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801ee40:	4b1f      	ldr	r3, [pc, #124]	; (801eec0 <tcp_input+0x4b0>)
 801ee42:	681b      	ldr	r3, [r3, #0]
 801ee44:	4a26      	ldr	r2, [pc, #152]	; (801eee0 <tcp_input+0x4d0>)
 801ee46:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801ee48:	4b26      	ldr	r3, [pc, #152]	; (801eee4 <tcp_input+0x4d4>)
 801ee4a:	2200      	movs	r2, #0
 801ee4c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801ee4e:	4b26      	ldr	r3, [pc, #152]	; (801eee8 <tcp_input+0x4d8>)
 801ee50:	2200      	movs	r2, #0
 801ee52:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801ee54:	4b25      	ldr	r3, [pc, #148]	; (801eeec <tcp_input+0x4dc>)
 801ee56:	2200      	movs	r2, #0
 801ee58:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801ee5a:	4b25      	ldr	r3, [pc, #148]	; (801eef0 <tcp_input+0x4e0>)
 801ee5c:	781b      	ldrb	r3, [r3, #0]
 801ee5e:	f003 0308 	and.w	r3, r3, #8
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d006      	beq.n	801ee74 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	7b5b      	ldrb	r3, [r3, #13]
 801ee6a:	f043 0301 	orr.w	r3, r3, #1
 801ee6e:	b2da      	uxtb	r2, r3
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801ee74:	69fb      	ldr	r3, [r7, #28]
 801ee76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	d03d      	beq.n	801eef8 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ee7c:	69f8      	ldr	r0, [r7, #28]
 801ee7e:	f7ff f999 	bl	801e1b4 <tcp_process_refused_data>
 801ee82:	4603      	mov	r3, r0
 801ee84:	f113 0f0d 	cmn.w	r3, #13
 801ee88:	d007      	beq.n	801ee9a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ee8a:	69fb      	ldr	r3, [r7, #28]
 801ee8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d032      	beq.n	801eef8 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ee92:	4b18      	ldr	r3, [pc, #96]	; (801eef4 <tcp_input+0x4e4>)
 801ee94:	881b      	ldrh	r3, [r3, #0]
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	d02e      	beq.n	801eef8 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801ee9a:	69fb      	ldr	r3, [r7, #28]
 801ee9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	f040 8108 	bne.w	801f0b4 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801eea4:	69f8      	ldr	r0, [r7, #28]
 801eea6:	f002 fe3f 	bl	8021b28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801eeaa:	e103      	b.n	801f0b4 <tcp_input+0x6a4>
 801eeac:	08027fbc 	.word	0x08027fbc
 801eeb0:	08028054 	.word	0x08028054
 801eeb4:	08028000 	.word	0x08028000
 801eeb8:	0802807c 	.word	0x0802807c
 801eebc:	080280a8 	.word	0x080280a8
 801eec0:	200040fc 	.word	0x200040fc
 801eec4:	200045fc 	.word	0x200045fc
 801eec8:	080280d0 	.word	0x080280d0
 801eecc:	20008c24 	.word	0x20008c24
 801eed0:	080280fc 	.word	0x080280fc
 801eed4:	20008c34 	.word	0x20008c34
 801eed8:	08028128 	.word	0x08028128
 801eedc:	20008c2c 	.word	0x20008c2c
 801eee0:	200040ec 	.word	0x200040ec
 801eee4:	2000411c 	.word	0x2000411c
 801eee8:	20004119 	.word	0x20004119
 801eeec:	20004114 	.word	0x20004114
 801eef0:	20004118 	.word	0x20004118
 801eef4:	20004116 	.word	0x20004116
      }
    }
    tcp_input_pcb = pcb;
 801eef8:	4a96      	ldr	r2, [pc, #600]	; (801f154 <tcp_input+0x744>)
 801eefa:	69fb      	ldr	r3, [r7, #28]
 801eefc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801eefe:	69f8      	ldr	r0, [r7, #28]
 801ef00:	f000 fac2 	bl	801f488 <tcp_process>
 801ef04:	4603      	mov	r3, r0
 801ef06:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801ef08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ef0c:	f113 0f0d 	cmn.w	r3, #13
 801ef10:	f000 80db 	beq.w	801f0ca <tcp_input+0x6ba>
      if (recv_flags & TF_RESET) {
 801ef14:	4b90      	ldr	r3, [pc, #576]	; (801f158 <tcp_input+0x748>)
 801ef16:	781b      	ldrb	r3, [r3, #0]
 801ef18:	f003 0308 	and.w	r3, r3, #8
 801ef1c:	2b00      	cmp	r3, #0
 801ef1e:	d016      	beq.n	801ef4e <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801ef20:	69fb      	ldr	r3, [r7, #28]
 801ef22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	d008      	beq.n	801ef3c <tcp_input+0x52c>
 801ef2a:	69fb      	ldr	r3, [r7, #28]
 801ef2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ef30:	69fa      	ldr	r2, [r7, #28]
 801ef32:	6912      	ldr	r2, [r2, #16]
 801ef34:	f06f 010d 	mvn.w	r1, #13
 801ef38:	4610      	mov	r0, r2
 801ef3a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ef3c:	69f9      	ldr	r1, [r7, #28]
 801ef3e:	4887      	ldr	r0, [pc, #540]	; (801f15c <tcp_input+0x74c>)
 801ef40:	f7ff fc4c 	bl	801e7dc <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 801ef44:	69f9      	ldr	r1, [r7, #28]
 801ef46:	2001      	movs	r0, #1
 801ef48:	f7fd f93c 	bl	801c1c4 <memp_free>
 801ef4c:	e0bd      	b.n	801f0ca <tcp_input+0x6ba>
      } else {
        err = ERR_OK;
 801ef4e:	2300      	movs	r3, #0
 801ef50:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801ef52:	4b83      	ldr	r3, [pc, #524]	; (801f160 <tcp_input+0x750>)
 801ef54:	881b      	ldrh	r3, [r3, #0]
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d01b      	beq.n	801ef92 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801ef5a:	4b81      	ldr	r3, [pc, #516]	; (801f160 <tcp_input+0x750>)
 801ef5c:	881b      	ldrh	r3, [r3, #0]
 801ef5e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801ef60:	69fb      	ldr	r3, [r7, #28]
 801ef62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d009      	beq.n	801ef7c <tcp_input+0x56c>
 801ef68:	69fb      	ldr	r3, [r7, #28]
 801ef6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ef6c:	69fa      	ldr	r2, [r7, #28]
 801ef6e:	6910      	ldr	r0, [r2, #16]
 801ef70:	89fa      	ldrh	r2, [r7, #14]
 801ef72:	69f9      	ldr	r1, [r7, #28]
 801ef74:	4798      	blx	r3
 801ef76:	4603      	mov	r3, r0
 801ef78:	74fb      	strb	r3, [r7, #19]
 801ef7a:	e001      	b.n	801ef80 <tcp_input+0x570>
 801ef7c:	2300      	movs	r3, #0
 801ef7e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ef80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ef84:	f113 0f0d 	cmn.w	r3, #13
 801ef88:	f000 8096 	beq.w	801f0b8 <tcp_input+0x6a8>
              goto aborted;
            }
          }
          recv_acked = 0;
 801ef8c:	4b74      	ldr	r3, [pc, #464]	; (801f160 <tcp_input+0x750>)
 801ef8e:	2200      	movs	r2, #0
 801ef90:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801ef92:	69f8      	ldr	r0, [r7, #28]
 801ef94:	f000 f8fc 	bl	801f190 <tcp_input_delayed_close>
 801ef98:	4603      	mov	r3, r0
 801ef9a:	2b00      	cmp	r3, #0
 801ef9c:	f040 808e 	bne.w	801f0bc <tcp_input+0x6ac>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801efa0:	4b70      	ldr	r3, [pc, #448]	; (801f164 <tcp_input+0x754>)
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d041      	beq.n	801f02c <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801efa8:	69fb      	ldr	r3, [r7, #28]
 801efaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801efac:	2b00      	cmp	r3, #0
 801efae:	d006      	beq.n	801efbe <tcp_input+0x5ae>
 801efb0:	4b6d      	ldr	r3, [pc, #436]	; (801f168 <tcp_input+0x758>)
 801efb2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 801efb6:	496d      	ldr	r1, [pc, #436]	; (801f16c <tcp_input+0x75c>)
 801efb8:	486d      	ldr	r0, [pc, #436]	; (801f170 <tcp_input+0x760>)
 801efba:	f006 fb59 	bl	8025670 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801efbe:	69fb      	ldr	r3, [r7, #28]
 801efc0:	7e9b      	ldrb	r3, [r3, #26]
 801efc2:	f003 0310 	and.w	r3, r3, #16
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	d008      	beq.n	801efdc <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801efca:	4b66      	ldr	r3, [pc, #408]	; (801f164 <tcp_input+0x754>)
 801efcc:	681b      	ldr	r3, [r3, #0]
 801efce:	4618      	mov	r0, r3
 801efd0:	f7fd fe52 	bl	801cc78 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801efd4:	69f8      	ldr	r0, [r7, #28]
 801efd6:	f7fe fb95 	bl	801d704 <tcp_abort>
            goto aborted;
 801efda:	e076      	b.n	801f0ca <tcp_input+0x6ba>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801efdc:	69fb      	ldr	r3, [r7, #28]
 801efde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d00c      	beq.n	801f000 <tcp_input+0x5f0>
 801efe6:	69fb      	ldr	r3, [r7, #28]
 801efe8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801efec:	69fb      	ldr	r3, [r7, #28]
 801efee:	6918      	ldr	r0, [r3, #16]
 801eff0:	4b5c      	ldr	r3, [pc, #368]	; (801f164 <tcp_input+0x754>)
 801eff2:	681a      	ldr	r2, [r3, #0]
 801eff4:	2300      	movs	r3, #0
 801eff6:	69f9      	ldr	r1, [r7, #28]
 801eff8:	47a0      	blx	r4
 801effa:	4603      	mov	r3, r0
 801effc:	74fb      	strb	r3, [r7, #19]
 801effe:	e008      	b.n	801f012 <tcp_input+0x602>
 801f000:	4b58      	ldr	r3, [pc, #352]	; (801f164 <tcp_input+0x754>)
 801f002:	681a      	ldr	r2, [r3, #0]
 801f004:	2300      	movs	r3, #0
 801f006:	69f9      	ldr	r1, [r7, #28]
 801f008:	2000      	movs	r0, #0
 801f00a:	f7ff f984 	bl	801e316 <tcp_recv_null>
 801f00e:	4603      	mov	r3, r0
 801f010:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801f012:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f016:	f113 0f0d 	cmn.w	r3, #13
 801f01a:	d051      	beq.n	801f0c0 <tcp_input+0x6b0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801f01c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f020:	2b00      	cmp	r3, #0
 801f022:	d003      	beq.n	801f02c <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801f024:	4b4f      	ldr	r3, [pc, #316]	; (801f164 <tcp_input+0x754>)
 801f026:	681a      	ldr	r2, [r3, #0]
 801f028:	69fb      	ldr	r3, [r7, #28]
 801f02a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801f02c:	4b4a      	ldr	r3, [pc, #296]	; (801f158 <tcp_input+0x748>)
 801f02e:	781b      	ldrb	r3, [r3, #0]
 801f030:	f003 0320 	and.w	r3, r3, #32
 801f034:	2b00      	cmp	r3, #0
 801f036:	d030      	beq.n	801f09a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 801f038:	69fb      	ldr	r3, [r7, #28]
 801f03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	d009      	beq.n	801f054 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801f040:	69fb      	ldr	r3, [r7, #28]
 801f042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f044:	69fa      	ldr	r2, [r7, #28]
 801f046:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801f048:	7b52      	ldrb	r2, [r2, #13]
 801f04a:	f042 0220 	orr.w	r2, r2, #32
 801f04e:	b2d2      	uxtb	r2, r2
 801f050:	735a      	strb	r2, [r3, #13]
 801f052:	e022      	b.n	801f09a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801f054:	69fb      	ldr	r3, [r7, #28]
 801f056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f05c:	d005      	beq.n	801f06a <tcp_input+0x65a>
              pcb->rcv_wnd++;
 801f05e:	69fb      	ldr	r3, [r7, #28]
 801f060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f062:	3301      	adds	r3, #1
 801f064:	b29a      	uxth	r2, r3
 801f066:	69fb      	ldr	r3, [r7, #28]
 801f068:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801f06a:	69fb      	ldr	r3, [r7, #28]
 801f06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f070:	2b00      	cmp	r3, #0
 801f072:	d00b      	beq.n	801f08c <tcp_input+0x67c>
 801f074:	69fb      	ldr	r3, [r7, #28]
 801f076:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801f07a:	69fb      	ldr	r3, [r7, #28]
 801f07c:	6918      	ldr	r0, [r3, #16]
 801f07e:	2300      	movs	r3, #0
 801f080:	2200      	movs	r2, #0
 801f082:	69f9      	ldr	r1, [r7, #28]
 801f084:	47a0      	blx	r4
 801f086:	4603      	mov	r3, r0
 801f088:	74fb      	strb	r3, [r7, #19]
 801f08a:	e001      	b.n	801f090 <tcp_input+0x680>
 801f08c:	2300      	movs	r3, #0
 801f08e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801f090:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f094:	f113 0f0d 	cmn.w	r3, #13
 801f098:	d014      	beq.n	801f0c4 <tcp_input+0x6b4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801f09a:	4b2e      	ldr	r3, [pc, #184]	; (801f154 <tcp_input+0x744>)
 801f09c:	2200      	movs	r2, #0
 801f09e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801f0a0:	69f8      	ldr	r0, [r7, #28]
 801f0a2:	f000 f875 	bl	801f190 <tcp_input_delayed_close>
 801f0a6:	4603      	mov	r3, r0
 801f0a8:	2b00      	cmp	r3, #0
 801f0aa:	d10d      	bne.n	801f0c8 <tcp_input+0x6b8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801f0ac:	69f8      	ldr	r0, [r7, #28]
 801f0ae:	f002 fd97 	bl	8021be0 <tcp_output>
 801f0b2:	e00a      	b.n	801f0ca <tcp_input+0x6ba>
        goto aborted;
 801f0b4:	bf00      	nop
 801f0b6:	e008      	b.n	801f0ca <tcp_input+0x6ba>
              goto aborted;
 801f0b8:	bf00      	nop
 801f0ba:	e006      	b.n	801f0ca <tcp_input+0x6ba>
          goto aborted;
 801f0bc:	bf00      	nop
 801f0be:	e004      	b.n	801f0ca <tcp_input+0x6ba>
            goto aborted;
 801f0c0:	bf00      	nop
 801f0c2:	e002      	b.n	801f0ca <tcp_input+0x6ba>
              goto aborted;
 801f0c4:	bf00      	nop
 801f0c6:	e000      	b.n	801f0ca <tcp_input+0x6ba>
          goto aborted;
 801f0c8:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 801f0ca:	4b22      	ldr	r3, [pc, #136]	; (801f154 <tcp_input+0x744>)
 801f0cc:	2200      	movs	r2, #0
 801f0ce:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801f0d0:	4b24      	ldr	r3, [pc, #144]	; (801f164 <tcp_input+0x754>)
 801f0d2:	2200      	movs	r2, #0
 801f0d4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 801f0d6:	4b27      	ldr	r3, [pc, #156]	; (801f174 <tcp_input+0x764>)
 801f0d8:	685b      	ldr	r3, [r3, #4]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d035      	beq.n	801f14a <tcp_input+0x73a>
    {
      pbuf_free(inseg.p);
 801f0de:	4b25      	ldr	r3, [pc, #148]	; (801f174 <tcp_input+0x764>)
 801f0e0:	685b      	ldr	r3, [r3, #4]
 801f0e2:	4618      	mov	r0, r3
 801f0e4:	f7fd fdc8 	bl	801cc78 <pbuf_free>
      inseg.p = NULL;
 801f0e8:	4b22      	ldr	r3, [pc, #136]	; (801f174 <tcp_input+0x764>)
 801f0ea:	2200      	movs	r2, #0
 801f0ec:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801f0ee:	e02c      	b.n	801f14a <tcp_input+0x73a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801f0f0:	4b21      	ldr	r3, [pc, #132]	; (801f178 <tcp_input+0x768>)
 801f0f2:	681b      	ldr	r3, [r3, #0]
 801f0f4:	899b      	ldrh	r3, [r3, #12]
 801f0f6:	b29b      	uxth	r3, r3
 801f0f8:	4618      	mov	r0, r3
 801f0fa:	f7fa f92d 	bl	8019358 <lwip_htons>
 801f0fe:	4603      	mov	r3, r0
 801f100:	f003 0304 	and.w	r3, r3, #4
 801f104:	2b00      	cmp	r3, #0
 801f106:	d115      	bne.n	801f134 <tcp_input+0x724>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f108:	4b1c      	ldr	r3, [pc, #112]	; (801f17c <tcp_input+0x76c>)
 801f10a:	6818      	ldr	r0, [r3, #0]
 801f10c:	4b1c      	ldr	r3, [pc, #112]	; (801f180 <tcp_input+0x770>)
 801f10e:	881b      	ldrh	r3, [r3, #0]
 801f110:	461a      	mov	r2, r3
 801f112:	4b1c      	ldr	r3, [pc, #112]	; (801f184 <tcp_input+0x774>)
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f118:	4b17      	ldr	r3, [pc, #92]	; (801f178 <tcp_input+0x768>)
 801f11a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f11c:	885b      	ldrh	r3, [r3, #2]
 801f11e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f120:	4a15      	ldr	r2, [pc, #84]	; (801f178 <tcp_input+0x768>)
 801f122:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f124:	8812      	ldrh	r2, [r2, #0]
 801f126:	b292      	uxth	r2, r2
 801f128:	9201      	str	r2, [sp, #4]
 801f12a:	9300      	str	r3, [sp, #0]
 801f12c:	4b16      	ldr	r3, [pc, #88]	; (801f188 <tcp_input+0x778>)
 801f12e:	4a17      	ldr	r2, [pc, #92]	; (801f18c <tcp_input+0x77c>)
 801f130:	f002 ffde 	bl	80220f0 <tcp_rst>
    pbuf_free(p);
 801f134:	6878      	ldr	r0, [r7, #4]
 801f136:	f7fd fd9f 	bl	801cc78 <pbuf_free>
  return;
 801f13a:	e006      	b.n	801f14a <tcp_input+0x73a>
    goto dropped;
 801f13c:	bf00      	nop
 801f13e:	e000      	b.n	801f142 <tcp_input+0x732>
      goto dropped;
 801f140:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801f142:	6878      	ldr	r0, [r7, #4]
 801f144:	f7fd fd98 	bl	801cc78 <pbuf_free>
 801f148:	e000      	b.n	801f14c <tcp_input+0x73c>
  return;
 801f14a:	bf00      	nop
}
 801f14c:	3724      	adds	r7, #36	; 0x24
 801f14e:	46bd      	mov	sp, r7
 801f150:	bd90      	pop	{r4, r7, pc}
 801f152:	bf00      	nop
 801f154:	20008c38 	.word	0x20008c38
 801f158:	20004119 	.word	0x20004119
 801f15c:	20008c24 	.word	0x20008c24
 801f160:	20004114 	.word	0x20004114
 801f164:	2000411c 	.word	0x2000411c
 801f168:	08027fbc 	.word	0x08027fbc
 801f16c:	08028158 	.word	0x08028158
 801f170:	08028000 	.word	0x08028000
 801f174:	200040ec 	.word	0x200040ec
 801f178:	200040fc 	.word	0x200040fc
 801f17c:	20004110 	.word	0x20004110
 801f180:	20004116 	.word	0x20004116
 801f184:	2000410c 	.word	0x2000410c
 801f188:	2000460c 	.word	0x2000460c
 801f18c:	20004610 	.word	0x20004610

0801f190 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801f190:	b580      	push	{r7, lr}
 801f192:	b082      	sub	sp, #8
 801f194:	af00      	add	r7, sp, #0
 801f196:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 801f198:	4b14      	ldr	r3, [pc, #80]	; (801f1ec <tcp_input_delayed_close+0x5c>)
 801f19a:	781b      	ldrb	r3, [r3, #0]
 801f19c:	f003 0310 	and.w	r3, r3, #16
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	d01d      	beq.n	801f1e0 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	7e9b      	ldrb	r3, [r3, #26]
 801f1a8:	f003 0310 	and.w	r3, r3, #16
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d10d      	bne.n	801f1cc <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d008      	beq.n	801f1cc <tcp_input_delayed_close+0x3c>
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f1c0:	687a      	ldr	r2, [r7, #4]
 801f1c2:	6912      	ldr	r2, [r2, #16]
 801f1c4:	f06f 010e 	mvn.w	r1, #14
 801f1c8:	4610      	mov	r0, r2
 801f1ca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801f1cc:	6879      	ldr	r1, [r7, #4]
 801f1ce:	4808      	ldr	r0, [pc, #32]	; (801f1f0 <tcp_input_delayed_close+0x60>)
 801f1d0:	f7ff fb04 	bl	801e7dc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801f1d4:	6879      	ldr	r1, [r7, #4]
 801f1d6:	2001      	movs	r0, #1
 801f1d8:	f7fc fff4 	bl	801c1c4 <memp_free>
    return 1;
 801f1dc:	2301      	movs	r3, #1
 801f1de:	e000      	b.n	801f1e2 <tcp_input_delayed_close+0x52>
  }
  return 0;
 801f1e0:	2300      	movs	r3, #0
}
 801f1e2:	4618      	mov	r0, r3
 801f1e4:	3708      	adds	r7, #8
 801f1e6:	46bd      	mov	sp, r7
 801f1e8:	bd80      	pop	{r7, pc}
 801f1ea:	bf00      	nop
 801f1ec:	20004119 	.word	0x20004119
 801f1f0:	20008c24 	.word	0x20008c24

0801f1f4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801f1f4:	b580      	push	{r7, lr}
 801f1f6:	b088      	sub	sp, #32
 801f1f8:	af02      	add	r7, sp, #8
 801f1fa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801f1fc:	4b64      	ldr	r3, [pc, #400]	; (801f390 <tcp_listen_input+0x19c>)
 801f1fe:	781b      	ldrb	r3, [r3, #0]
 801f200:	f003 0304 	and.w	r3, r3, #4
 801f204:	2b00      	cmp	r3, #0
 801f206:	f040 80bc 	bne.w	801f382 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801f20a:	4b61      	ldr	r3, [pc, #388]	; (801f390 <tcp_listen_input+0x19c>)
 801f20c:	781b      	ldrb	r3, [r3, #0]
 801f20e:	f003 0310 	and.w	r3, r3, #16
 801f212:	2b00      	cmp	r3, #0
 801f214:	d016      	beq.n	801f244 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f216:	4b5f      	ldr	r3, [pc, #380]	; (801f394 <tcp_listen_input+0x1a0>)
 801f218:	6818      	ldr	r0, [r3, #0]
 801f21a:	4b5f      	ldr	r3, [pc, #380]	; (801f398 <tcp_listen_input+0x1a4>)
 801f21c:	881b      	ldrh	r3, [r3, #0]
 801f21e:	461a      	mov	r2, r3
 801f220:	4b5e      	ldr	r3, [pc, #376]	; (801f39c <tcp_listen_input+0x1a8>)
 801f222:	681b      	ldr	r3, [r3, #0]
 801f224:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f226:	4b5e      	ldr	r3, [pc, #376]	; (801f3a0 <tcp_listen_input+0x1ac>)
 801f228:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f22a:	885b      	ldrh	r3, [r3, #2]
 801f22c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f22e:	4a5c      	ldr	r2, [pc, #368]	; (801f3a0 <tcp_listen_input+0x1ac>)
 801f230:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f232:	8812      	ldrh	r2, [r2, #0]
 801f234:	b292      	uxth	r2, r2
 801f236:	9201      	str	r2, [sp, #4]
 801f238:	9300      	str	r3, [sp, #0]
 801f23a:	4b5a      	ldr	r3, [pc, #360]	; (801f3a4 <tcp_listen_input+0x1b0>)
 801f23c:	4a5a      	ldr	r2, [pc, #360]	; (801f3a8 <tcp_listen_input+0x1b4>)
 801f23e:	f002 ff57 	bl	80220f0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801f242:	e0a0      	b.n	801f386 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 801f244:	4b52      	ldr	r3, [pc, #328]	; (801f390 <tcp_listen_input+0x19c>)
 801f246:	781b      	ldrb	r3, [r3, #0]
 801f248:	f003 0302 	and.w	r3, r3, #2
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	f000 809a 	beq.w	801f386 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	7d5b      	ldrb	r3, [r3, #21]
 801f256:	4618      	mov	r0, r3
 801f258:	f7ff f93c 	bl	801e4d4 <tcp_alloc>
 801f25c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801f25e:	697b      	ldr	r3, [r7, #20]
 801f260:	2b00      	cmp	r3, #0
 801f262:	d111      	bne.n	801f288 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	699b      	ldr	r3, [r3, #24]
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d00a      	beq.n	801f282 <tcp_listen_input+0x8e>
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	699b      	ldr	r3, [r3, #24]
 801f270:	687a      	ldr	r2, [r7, #4]
 801f272:	6910      	ldr	r0, [r2, #16]
 801f274:	f04f 32ff 	mov.w	r2, #4294967295
 801f278:	2100      	movs	r1, #0
 801f27a:	4798      	blx	r3
 801f27c:	4603      	mov	r3, r0
 801f27e:	74fb      	strb	r3, [r7, #19]
      return;
 801f280:	e082      	b.n	801f388 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f282:	23f0      	movs	r3, #240	; 0xf0
 801f284:	74fb      	strb	r3, [r7, #19]
      return;
 801f286:	e07f      	b.n	801f388 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f288:	4b48      	ldr	r3, [pc, #288]	; (801f3ac <tcp_listen_input+0x1b8>)
 801f28a:	695a      	ldr	r2, [r3, #20]
 801f28c:	697b      	ldr	r3, [r7, #20]
 801f28e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f290:	4b46      	ldr	r3, [pc, #280]	; (801f3ac <tcp_listen_input+0x1b8>)
 801f292:	691a      	ldr	r2, [r3, #16]
 801f294:	697b      	ldr	r3, [r7, #20]
 801f296:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	8ada      	ldrh	r2, [r3, #22]
 801f29c:	697b      	ldr	r3, [r7, #20]
 801f29e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801f2a0:	4b3f      	ldr	r3, [pc, #252]	; (801f3a0 <tcp_listen_input+0x1ac>)
 801f2a2:	681b      	ldr	r3, [r3, #0]
 801f2a4:	881b      	ldrh	r3, [r3, #0]
 801f2a6:	b29a      	uxth	r2, r3
 801f2a8:	697b      	ldr	r3, [r7, #20]
 801f2aa:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801f2ac:	697b      	ldr	r3, [r7, #20]
 801f2ae:	2203      	movs	r2, #3
 801f2b0:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801f2b2:	4b3a      	ldr	r3, [pc, #232]	; (801f39c <tcp_listen_input+0x1a8>)
 801f2b4:	681b      	ldr	r3, [r3, #0]
 801f2b6:	1c5a      	adds	r2, r3, #1
 801f2b8:	697b      	ldr	r3, [r7, #20]
 801f2ba:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801f2bc:	697b      	ldr	r3, [r7, #20]
 801f2be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f2c0:	697b      	ldr	r3, [r7, #20]
 801f2c2:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801f2c4:	6978      	ldr	r0, [r7, #20]
 801f2c6:	f7ff fb05 	bl	801e8d4 <tcp_next_iss>
 801f2ca:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 801f2cc:	697b      	ldr	r3, [r7, #20]
 801f2ce:	68fa      	ldr	r2, [r7, #12]
 801f2d0:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 801f2d2:	697b      	ldr	r3, [r7, #20]
 801f2d4:	68fa      	ldr	r2, [r7, #12]
 801f2d6:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 801f2d8:	697b      	ldr	r3, [r7, #20]
 801f2da:	68fa      	ldr	r2, [r7, #12]
 801f2dc:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801f2de:	697b      	ldr	r3, [r7, #20]
 801f2e0:	68fa      	ldr	r2, [r7, #12]
 801f2e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f2e4:	4b2d      	ldr	r3, [pc, #180]	; (801f39c <tcp_listen_input+0x1a8>)
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	1e5a      	subs	r2, r3, #1
 801f2ea:	697b      	ldr	r3, [r7, #20]
 801f2ec:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	691a      	ldr	r2, [r3, #16]
 801f2f2:	697b      	ldr	r3, [r7, #20]
 801f2f4:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801f2f6:	697b      	ldr	r3, [r7, #20]
 801f2f8:	687a      	ldr	r2, [r7, #4]
 801f2fa:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	7a1b      	ldrb	r3, [r3, #8]
 801f300:	f003 030c 	and.w	r3, r3, #12
 801f304:	b2da      	uxtb	r2, r3
 801f306:	697b      	ldr	r3, [r7, #20]
 801f308:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801f30a:	4b29      	ldr	r3, [pc, #164]	; (801f3b0 <tcp_listen_input+0x1bc>)
 801f30c:	681a      	ldr	r2, [r3, #0]
 801f30e:	697b      	ldr	r3, [r7, #20]
 801f310:	60da      	str	r2, [r3, #12]
 801f312:	4a27      	ldr	r2, [pc, #156]	; (801f3b0 <tcp_listen_input+0x1bc>)
 801f314:	697b      	ldr	r3, [r7, #20]
 801f316:	6013      	str	r3, [r2, #0]
 801f318:	f003 f938 	bl	802258c <tcp_timer_needed>
 801f31c:	4b25      	ldr	r3, [pc, #148]	; (801f3b4 <tcp_listen_input+0x1c0>)
 801f31e:	2201      	movs	r2, #1
 801f320:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801f322:	6978      	ldr	r0, [r7, #20]
 801f324:	f001 fd16 	bl	8020d54 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801f328:	4b1d      	ldr	r3, [pc, #116]	; (801f3a0 <tcp_listen_input+0x1ac>)
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	89db      	ldrh	r3, [r3, #14]
 801f32e:	b29a      	uxth	r2, r3
 801f330:	697b      	ldr	r3, [r7, #20]
 801f332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 801f336:	697b      	ldr	r3, [r7, #20]
 801f338:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801f33c:	697b      	ldr	r3, [r7, #20]
 801f33e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f342:	697b      	ldr	r3, [r7, #20]
 801f344:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801f346:	697b      	ldr	r3, [r7, #20]
 801f348:	3304      	adds	r3, #4
 801f34a:	4619      	mov	r1, r3
 801f34c:	4610      	mov	r0, r2
 801f34e:	f7ff fad9 	bl	801e904 <tcp_eff_send_mss_impl>
 801f352:	4603      	mov	r3, r0
 801f354:	461a      	mov	r2, r3
 801f356:	697b      	ldr	r3, [r7, #20]
 801f358:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f35a:	2112      	movs	r1, #18
 801f35c:	6978      	ldr	r0, [r7, #20]
 801f35e:	f002 fae5 	bl	802192c <tcp_enqueue_flags>
 801f362:	4603      	mov	r3, r0
 801f364:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 801f366:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d004      	beq.n	801f378 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 801f36e:	2100      	movs	r1, #0
 801f370:	6978      	ldr	r0, [r7, #20]
 801f372:	f7fe f915 	bl	801d5a0 <tcp_abandon>
      return;
 801f376:	e007      	b.n	801f388 <tcp_listen_input+0x194>
    tcp_output(npcb);
 801f378:	6978      	ldr	r0, [r7, #20]
 801f37a:	f002 fc31 	bl	8021be0 <tcp_output>
  return;
 801f37e:	bf00      	nop
 801f380:	e001      	b.n	801f386 <tcp_listen_input+0x192>
    return;
 801f382:	bf00      	nop
 801f384:	e000      	b.n	801f388 <tcp_listen_input+0x194>
  return;
 801f386:	bf00      	nop
}
 801f388:	3718      	adds	r7, #24
 801f38a:	46bd      	mov	sp, r7
 801f38c:	bd80      	pop	{r7, pc}
 801f38e:	bf00      	nop
 801f390:	20004118 	.word	0x20004118
 801f394:	20004110 	.word	0x20004110
 801f398:	20004116 	.word	0x20004116
 801f39c:	2000410c 	.word	0x2000410c
 801f3a0:	200040fc 	.word	0x200040fc
 801f3a4:	2000460c 	.word	0x2000460c
 801f3a8:	20004610 	.word	0x20004610
 801f3ac:	200045fc 	.word	0x200045fc
 801f3b0:	20008c24 	.word	0x20008c24
 801f3b4:	20008c20 	.word	0x20008c20

0801f3b8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801f3b8:	b580      	push	{r7, lr}
 801f3ba:	b084      	sub	sp, #16
 801f3bc:	af02      	add	r7, sp, #8
 801f3be:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801f3c0:	4b29      	ldr	r3, [pc, #164]	; (801f468 <tcp_timewait_input+0xb0>)
 801f3c2:	781b      	ldrb	r3, [r3, #0]
 801f3c4:	f003 0304 	and.w	r3, r3, #4
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d147      	bne.n	801f45c <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801f3cc:	4b26      	ldr	r3, [pc, #152]	; (801f468 <tcp_timewait_input+0xb0>)
 801f3ce:	781b      	ldrb	r3, [r3, #0]
 801f3d0:	f003 0302 	and.w	r3, r3, #2
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	d027      	beq.n	801f428 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801f3d8:	4b24      	ldr	r3, [pc, #144]	; (801f46c <tcp_timewait_input+0xb4>)
 801f3da:	681a      	ldr	r2, [r3, #0]
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3e0:	1ad3      	subs	r3, r2, r3
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	db2a      	blt.n	801f43c <tcp_timewait_input+0x84>
 801f3e6:	4b21      	ldr	r3, [pc, #132]	; (801f46c <tcp_timewait_input+0xb4>)
 801f3e8:	681a      	ldr	r2, [r3, #0]
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3ee:	6879      	ldr	r1, [r7, #4]
 801f3f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f3f2:	440b      	add	r3, r1
 801f3f4:	1ad3      	subs	r3, r2, r3
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	dc20      	bgt.n	801f43c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f3fa:	4b1d      	ldr	r3, [pc, #116]	; (801f470 <tcp_timewait_input+0xb8>)
 801f3fc:	6818      	ldr	r0, [r3, #0]
 801f3fe:	4b1d      	ldr	r3, [pc, #116]	; (801f474 <tcp_timewait_input+0xbc>)
 801f400:	881b      	ldrh	r3, [r3, #0]
 801f402:	461a      	mov	r2, r3
 801f404:	4b19      	ldr	r3, [pc, #100]	; (801f46c <tcp_timewait_input+0xb4>)
 801f406:	681b      	ldr	r3, [r3, #0]
 801f408:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f40a:	4b1b      	ldr	r3, [pc, #108]	; (801f478 <tcp_timewait_input+0xc0>)
 801f40c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f40e:	885b      	ldrh	r3, [r3, #2]
 801f410:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f412:	4a19      	ldr	r2, [pc, #100]	; (801f478 <tcp_timewait_input+0xc0>)
 801f414:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f416:	8812      	ldrh	r2, [r2, #0]
 801f418:	b292      	uxth	r2, r2
 801f41a:	9201      	str	r2, [sp, #4]
 801f41c:	9300      	str	r3, [sp, #0]
 801f41e:	4b17      	ldr	r3, [pc, #92]	; (801f47c <tcp_timewait_input+0xc4>)
 801f420:	4a17      	ldr	r2, [pc, #92]	; (801f480 <tcp_timewait_input+0xc8>)
 801f422:	f002 fe65 	bl	80220f0 <tcp_rst>
      return;
 801f426:	e01c      	b.n	801f462 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 801f428:	4b0f      	ldr	r3, [pc, #60]	; (801f468 <tcp_timewait_input+0xb0>)
 801f42a:	781b      	ldrb	r3, [r3, #0]
 801f42c:	f003 0301 	and.w	r3, r3, #1
 801f430:	2b00      	cmp	r3, #0
 801f432:	d003      	beq.n	801f43c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801f434:	4b13      	ldr	r3, [pc, #76]	; (801f484 <tcp_timewait_input+0xcc>)
 801f436:	681a      	ldr	r2, [r3, #0]
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801f43c:	4b0d      	ldr	r3, [pc, #52]	; (801f474 <tcp_timewait_input+0xbc>)
 801f43e:	881b      	ldrh	r3, [r3, #0]
 801f440:	2b00      	cmp	r3, #0
 801f442:	d00d      	beq.n	801f460 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	7e9b      	ldrb	r3, [r3, #26]
 801f448:	f043 0302 	orr.w	r3, r3, #2
 801f44c:	b2da      	uxtb	r2, r3
 801f44e:	687b      	ldr	r3, [r7, #4]
 801f450:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801f452:	6878      	ldr	r0, [r7, #4]
 801f454:	f002 fbc4 	bl	8021be0 <tcp_output>
  }
  return;
 801f458:	bf00      	nop
 801f45a:	e001      	b.n	801f460 <tcp_timewait_input+0xa8>
    return;
 801f45c:	bf00      	nop
 801f45e:	e000      	b.n	801f462 <tcp_timewait_input+0xaa>
  return;
 801f460:	bf00      	nop
}
 801f462:	3708      	adds	r7, #8
 801f464:	46bd      	mov	sp, r7
 801f466:	bd80      	pop	{r7, pc}
 801f468:	20004118 	.word	0x20004118
 801f46c:	2000410c 	.word	0x2000410c
 801f470:	20004110 	.word	0x20004110
 801f474:	20004116 	.word	0x20004116
 801f478:	200040fc 	.word	0x200040fc
 801f47c:	2000460c 	.word	0x2000460c
 801f480:	20004610 	.word	0x20004610
 801f484:	20008c28 	.word	0x20008c28

0801f488 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801f488:	b580      	push	{r7, lr}
 801f48a:	b08a      	sub	sp, #40	; 0x28
 801f48c:	af02      	add	r7, sp, #8
 801f48e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801f490:	2300      	movs	r3, #0
 801f492:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801f494:	2300      	movs	r3, #0
 801f496:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801f498:	4ba4      	ldr	r3, [pc, #656]	; (801f72c <tcp_process+0x2a4>)
 801f49a:	781b      	ldrb	r3, [r3, #0]
 801f49c:	f003 0304 	and.w	r3, r3, #4
 801f4a0:	2b00      	cmp	r3, #0
 801f4a2:	d04e      	beq.n	801f542 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	7d1b      	ldrb	r3, [r3, #20]
 801f4a8:	2b02      	cmp	r3, #2
 801f4aa:	d108      	bne.n	801f4be <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f4b0:	4b9f      	ldr	r3, [pc, #636]	; (801f730 <tcp_process+0x2a8>)
 801f4b2:	681b      	ldr	r3, [r3, #0]
 801f4b4:	429a      	cmp	r2, r3
 801f4b6:	d123      	bne.n	801f500 <tcp_process+0x78>
        acceptable = 1;
 801f4b8:	2301      	movs	r3, #1
 801f4ba:	76fb      	strb	r3, [r7, #27]
 801f4bc:	e020      	b.n	801f500 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801f4be:	687b      	ldr	r3, [r7, #4]
 801f4c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f4c2:	4b9c      	ldr	r3, [pc, #624]	; (801f734 <tcp_process+0x2ac>)
 801f4c4:	681b      	ldr	r3, [r3, #0]
 801f4c6:	429a      	cmp	r2, r3
 801f4c8:	d102      	bne.n	801f4d0 <tcp_process+0x48>
        acceptable = 1;
 801f4ca:	2301      	movs	r3, #1
 801f4cc:	76fb      	strb	r3, [r7, #27]
 801f4ce:	e017      	b.n	801f500 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f4d0:	4b98      	ldr	r3, [pc, #608]	; (801f734 <tcp_process+0x2ac>)
 801f4d2:	681a      	ldr	r2, [r3, #0]
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4d8:	1ad3      	subs	r3, r2, r3
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	db10      	blt.n	801f500 <tcp_process+0x78>
 801f4de:	4b95      	ldr	r3, [pc, #596]	; (801f734 <tcp_process+0x2ac>)
 801f4e0:	681a      	ldr	r2, [r3, #0]
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4e6:	6879      	ldr	r1, [r7, #4]
 801f4e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f4ea:	440b      	add	r3, r1
 801f4ec:	1ad3      	subs	r3, r2, r3
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	dc06      	bgt.n	801f500 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	7e9b      	ldrb	r3, [r3, #26]
 801f4f6:	f043 0302 	orr.w	r3, r3, #2
 801f4fa:	b2da      	uxtb	r2, r3
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801f500:	7efb      	ldrb	r3, [r7, #27]
 801f502:	2b00      	cmp	r3, #0
 801f504:	d01b      	beq.n	801f53e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801f506:	687b      	ldr	r3, [r7, #4]
 801f508:	7d1b      	ldrb	r3, [r3, #20]
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d106      	bne.n	801f51c <tcp_process+0x94>
 801f50e:	4b8a      	ldr	r3, [pc, #552]	; (801f738 <tcp_process+0x2b0>)
 801f510:	f240 22e7 	movw	r2, #743	; 0x2e7
 801f514:	4989      	ldr	r1, [pc, #548]	; (801f73c <tcp_process+0x2b4>)
 801f516:	488a      	ldr	r0, [pc, #552]	; (801f740 <tcp_process+0x2b8>)
 801f518:	f006 f8aa 	bl	8025670 <iprintf>
      recv_flags |= TF_RESET;
 801f51c:	4b89      	ldr	r3, [pc, #548]	; (801f744 <tcp_process+0x2bc>)
 801f51e:	781b      	ldrb	r3, [r3, #0]
 801f520:	f043 0308 	orr.w	r3, r3, #8
 801f524:	b2da      	uxtb	r2, r3
 801f526:	4b87      	ldr	r3, [pc, #540]	; (801f744 <tcp_process+0x2bc>)
 801f528:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	7e9b      	ldrb	r3, [r3, #26]
 801f52e:	f023 0301 	bic.w	r3, r3, #1
 801f532:	b2da      	uxtb	r2, r3
 801f534:	687b      	ldr	r3, [r7, #4]
 801f536:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801f538:	f06f 030d 	mvn.w	r3, #13
 801f53c:	e34d      	b.n	801fbda <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 801f53e:	2300      	movs	r3, #0
 801f540:	e34b      	b.n	801fbda <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801f542:	4b7a      	ldr	r3, [pc, #488]	; (801f72c <tcp_process+0x2a4>)
 801f544:	781b      	ldrb	r3, [r3, #0]
 801f546:	f003 0302 	and.w	r3, r3, #2
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	d010      	beq.n	801f570 <tcp_process+0xe8>
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	7d1b      	ldrb	r3, [r3, #20]
 801f552:	2b02      	cmp	r3, #2
 801f554:	d00c      	beq.n	801f570 <tcp_process+0xe8>
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	7d1b      	ldrb	r3, [r3, #20]
 801f55a:	2b03      	cmp	r3, #3
 801f55c:	d008      	beq.n	801f570 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801f55e:	687b      	ldr	r3, [r7, #4]
 801f560:	7e9b      	ldrb	r3, [r3, #26]
 801f562:	f043 0302 	orr.w	r3, r3, #2
 801f566:	b2da      	uxtb	r2, r3
 801f568:	687b      	ldr	r3, [r7, #4]
 801f56a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 801f56c:	2300      	movs	r3, #0
 801f56e:	e334      	b.n	801fbda <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	7e9b      	ldrb	r3, [r3, #26]
 801f574:	f003 0310 	and.w	r3, r3, #16
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d103      	bne.n	801f584 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801f57c:	4b72      	ldr	r3, [pc, #456]	; (801f748 <tcp_process+0x2c0>)
 801f57e:	681a      	ldr	r2, [r3, #0]
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	2200      	movs	r2, #0
 801f588:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 801f58c:	6878      	ldr	r0, [r7, #4]
 801f58e:	f001 fbe1 	bl	8020d54 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801f592:	687b      	ldr	r3, [r7, #4]
 801f594:	7d1b      	ldrb	r3, [r3, #20]
 801f596:	3b02      	subs	r3, #2
 801f598:	2b07      	cmp	r3, #7
 801f59a:	f200 830e 	bhi.w	801fbba <tcp_process+0x732>
 801f59e:	a201      	add	r2, pc, #4	; (adr r2, 801f5a4 <tcp_process+0x11c>)
 801f5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f5a4:	0801f5c5 	.word	0x0801f5c5
 801f5a8:	0801f7bd 	.word	0x0801f7bd
 801f5ac:	0801f915 	.word	0x0801f915
 801f5b0:	0801f93f 	.word	0x0801f93f
 801f5b4:	0801fa69 	.word	0x0801fa69
 801f5b8:	0801f915 	.word	0x0801f915
 801f5bc:	0801faf5 	.word	0x0801faf5
 801f5c0:	0801fb85 	.word	0x0801fb85
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801f5c4:	4b59      	ldr	r3, [pc, #356]	; (801f72c <tcp_process+0x2a4>)
 801f5c6:	781b      	ldrb	r3, [r3, #0]
 801f5c8:	f003 0310 	and.w	r3, r3, #16
 801f5cc:	2b00      	cmp	r3, #0
 801f5ce:	f000 80cb 	beq.w	801f768 <tcp_process+0x2e0>
 801f5d2:	4b56      	ldr	r3, [pc, #344]	; (801f72c <tcp_process+0x2a4>)
 801f5d4:	781b      	ldrb	r3, [r3, #0]
 801f5d6:	f003 0302 	and.w	r3, r3, #2
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	f000 80c4 	beq.w	801f768 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f5e4:	1c5a      	adds	r2, r3, #1
 801f5e6:	4b52      	ldr	r3, [pc, #328]	; (801f730 <tcp_process+0x2a8>)
 801f5e8:	681b      	ldr	r3, [r3, #0]
 801f5ea:	429a      	cmp	r2, r3
 801f5ec:	f040 80bc 	bne.w	801f768 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 801f5f0:	4b50      	ldr	r3, [pc, #320]	; (801f734 <tcp_process+0x2ac>)
 801f5f2:	681b      	ldr	r3, [r3, #0]
 801f5f4:	1c5a      	adds	r2, r3, #1
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 801f602:	4b4b      	ldr	r3, [pc, #300]	; (801f730 <tcp_process+0x2a8>)
 801f604:	681a      	ldr	r2, [r3, #0]
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801f60a:	4b50      	ldr	r3, [pc, #320]	; (801f74c <tcp_process+0x2c4>)
 801f60c:	681b      	ldr	r3, [r3, #0]
 801f60e:	89db      	ldrh	r3, [r3, #14]
 801f610:	b29a      	uxth	r2, r3
 801f612:	687b      	ldr	r3, [r7, #4]
 801f614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f624:	4b43      	ldr	r3, [pc, #268]	; (801f734 <tcp_process+0x2ac>)
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	1e5a      	subs	r2, r3, #1
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	2204      	movs	r2, #4
 801f632:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f634:	687b      	ldr	r3, [r7, #4]
 801f636:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	3304      	adds	r3, #4
 801f63c:	4619      	mov	r1, r3
 801f63e:	4610      	mov	r0, r2
 801f640:	f7ff f960 	bl	801e904 <tcp_eff_send_mss_impl>
 801f644:	4603      	mov	r3, r0
 801f646:	461a      	mov	r2, r3
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f650:	005b      	lsls	r3, r3, #1
 801f652:	f241 121c 	movw	r2, #4380	; 0x111c
 801f656:	429a      	cmp	r2, r3
 801f658:	bf38      	it	cc
 801f65a:	461a      	movcc	r2, r3
 801f65c:	687b      	ldr	r3, [r7, #4]
 801f65e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f660:	009b      	lsls	r3, r3, #2
 801f662:	4293      	cmp	r3, r2
 801f664:	bf28      	it	cs
 801f666:	4613      	movcs	r3, r2
 801f668:	b29a      	uxth	r2, r3
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f676:	2b00      	cmp	r3, #0
 801f678:	d106      	bne.n	801f688 <tcp_process+0x200>
 801f67a:	4b2f      	ldr	r3, [pc, #188]	; (801f738 <tcp_process+0x2b0>)
 801f67c:	f240 321a 	movw	r2, #794	; 0x31a
 801f680:	4933      	ldr	r1, [pc, #204]	; (801f750 <tcp_process+0x2c8>)
 801f682:	482f      	ldr	r0, [pc, #188]	; (801f740 <tcp_process+0x2b8>)
 801f684:	f005 fff4 	bl	8025670 <iprintf>
      --pcb->snd_queuelen;
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f68e:	3b01      	subs	r3, #1
 801f690:	b29a      	uxth	r2, r3
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 801f698:	687b      	ldr	r3, [r7, #4]
 801f69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f69c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 801f69e:	69fb      	ldr	r3, [r7, #28]
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d111      	bne.n	801f6c8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f6a8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801f6aa:	69fb      	ldr	r3, [r7, #28]
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	d106      	bne.n	801f6be <tcp_process+0x236>
 801f6b0:	4b21      	ldr	r3, [pc, #132]	; (801f738 <tcp_process+0x2b0>)
 801f6b2:	f240 3222 	movw	r2, #802	; 0x322
 801f6b6:	4927      	ldr	r1, [pc, #156]	; (801f754 <tcp_process+0x2cc>)
 801f6b8:	4821      	ldr	r0, [pc, #132]	; (801f740 <tcp_process+0x2b8>)
 801f6ba:	f005 ffd9 	bl	8025670 <iprintf>
        pcb->unsent = rseg->next;
 801f6be:	69fb      	ldr	r3, [r7, #28]
 801f6c0:	681a      	ldr	r2, [r3, #0]
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	669a      	str	r2, [r3, #104]	; 0x68
 801f6c6:	e003      	b.n	801f6d0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801f6c8:	69fb      	ldr	r3, [r7, #28]
 801f6ca:	681a      	ldr	r2, [r3, #0]
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 801f6d0:	69f8      	ldr	r0, [r7, #28]
 801f6d2:	f7fe fdec 	bl	801e2ae <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801f6d6:	687b      	ldr	r3, [r7, #4]
 801f6d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f6da:	2b00      	cmp	r3, #0
 801f6dc:	d104      	bne.n	801f6e8 <tcp_process+0x260>
        pcb->rtime = -1;
 801f6de:	687b      	ldr	r3, [r7, #4]
 801f6e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f6e4:	861a      	strh	r2, [r3, #48]	; 0x30
 801f6e6:	e006      	b.n	801f6f6 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	2200      	movs	r2, #0
 801f6ec:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	2200      	movs	r2, #0
 801f6f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	d00a      	beq.n	801f716 <tcp_process+0x28e>
 801f700:	687b      	ldr	r3, [r7, #4]
 801f702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f706:	687a      	ldr	r2, [r7, #4]
 801f708:	6910      	ldr	r0, [r2, #16]
 801f70a:	2200      	movs	r2, #0
 801f70c:	6879      	ldr	r1, [r7, #4]
 801f70e:	4798      	blx	r3
 801f710:	4603      	mov	r3, r0
 801f712:	76bb      	strb	r3, [r7, #26]
 801f714:	e001      	b.n	801f71a <tcp_process+0x292>
 801f716:	2300      	movs	r3, #0
 801f718:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801f71a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f71e:	f113 0f0d 	cmn.w	r3, #13
 801f722:	d119      	bne.n	801f758 <tcp_process+0x2d0>
        return ERR_ABRT;
 801f724:	f06f 030c 	mvn.w	r3, #12
 801f728:	e257      	b.n	801fbda <tcp_process+0x752>
 801f72a:	bf00      	nop
 801f72c:	20004118 	.word	0x20004118
 801f730:	20004110 	.word	0x20004110
 801f734:	2000410c 	.word	0x2000410c
 801f738:	08027fbc 	.word	0x08027fbc
 801f73c:	08028174 	.word	0x08028174
 801f740:	08028000 	.word	0x08028000
 801f744:	20004119 	.word	0x20004119
 801f748:	20008c28 	.word	0x20008c28
 801f74c:	200040fc 	.word	0x200040fc
 801f750:	08028194 	.word	0x08028194
 801f754:	080281ac 	.word	0x080281ac
      }
      tcp_ack_now(pcb);
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	7e9b      	ldrb	r3, [r3, #26]
 801f75c:	f043 0302 	orr.w	r3, r3, #2
 801f760:	b2da      	uxtb	r2, r3
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801f766:	e22a      	b.n	801fbbe <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 801f768:	4b9f      	ldr	r3, [pc, #636]	; (801f9e8 <tcp_process+0x560>)
 801f76a:	781b      	ldrb	r3, [r3, #0]
 801f76c:	f003 0310 	and.w	r3, r3, #16
 801f770:	2b00      	cmp	r3, #0
 801f772:	f000 8224 	beq.w	801fbbe <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f776:	4b9d      	ldr	r3, [pc, #628]	; (801f9ec <tcp_process+0x564>)
 801f778:	6818      	ldr	r0, [r3, #0]
 801f77a:	4b9d      	ldr	r3, [pc, #628]	; (801f9f0 <tcp_process+0x568>)
 801f77c:	881b      	ldrh	r3, [r3, #0]
 801f77e:	461a      	mov	r2, r3
 801f780:	4b9c      	ldr	r3, [pc, #624]	; (801f9f4 <tcp_process+0x56c>)
 801f782:	681b      	ldr	r3, [r3, #0]
 801f784:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f786:	4b9c      	ldr	r3, [pc, #624]	; (801f9f8 <tcp_process+0x570>)
 801f788:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f78a:	885b      	ldrh	r3, [r3, #2]
 801f78c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f78e:	4a9a      	ldr	r2, [pc, #616]	; (801f9f8 <tcp_process+0x570>)
 801f790:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f792:	8812      	ldrh	r2, [r2, #0]
 801f794:	b292      	uxth	r2, r2
 801f796:	9201      	str	r2, [sp, #4]
 801f798:	9300      	str	r3, [sp, #0]
 801f79a:	4b98      	ldr	r3, [pc, #608]	; (801f9fc <tcp_process+0x574>)
 801f79c:	4a98      	ldr	r2, [pc, #608]	; (801fa00 <tcp_process+0x578>)
 801f79e:	f002 fca7 	bl	80220f0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801f7a2:	687b      	ldr	r3, [r7, #4]
 801f7a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f7a8:	2b05      	cmp	r3, #5
 801f7aa:	f200 8208 	bhi.w	801fbbe <tcp_process+0x736>
        pcb->rtime = 0;
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	2200      	movs	r2, #0
 801f7b2:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 801f7b4:	6878      	ldr	r0, [r7, #4]
 801f7b6:	f002 fd0f 	bl	80221d8 <tcp_rexmit_rto>
    break;
 801f7ba:	e200      	b.n	801fbbe <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 801f7bc:	4b8a      	ldr	r3, [pc, #552]	; (801f9e8 <tcp_process+0x560>)
 801f7be:	781b      	ldrb	r3, [r3, #0]
 801f7c0:	f003 0310 	and.w	r3, r3, #16
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	f000 8091 	beq.w	801f8ec <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801f7ca:	4b88      	ldr	r3, [pc, #544]	; (801f9ec <tcp_process+0x564>)
 801f7cc:	681a      	ldr	r2, [r3, #0]
 801f7ce:	687b      	ldr	r3, [r7, #4]
 801f7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f7d2:	1ad3      	subs	r3, r2, r3
 801f7d4:	3b01      	subs	r3, #1
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	db71      	blt.n	801f8be <tcp_process+0x436>
 801f7da:	4b84      	ldr	r3, [pc, #528]	; (801f9ec <tcp_process+0x564>)
 801f7dc:	681a      	ldr	r2, [r3, #0]
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f7e2:	1ad3      	subs	r3, r2, r3
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	dc6a      	bgt.n	801f8be <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	2204      	movs	r2, #4
 801f7ec:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801f7ee:	687b      	ldr	r3, [r7, #4]
 801f7f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d00b      	beq.n	801f80e <tcp_process+0x386>
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f7fa:	699b      	ldr	r3, [r3, #24]
 801f7fc:	2b00      	cmp	r3, #0
 801f7fe:	d106      	bne.n	801f80e <tcp_process+0x386>
 801f800:	4b80      	ldr	r3, [pc, #512]	; (801fa04 <tcp_process+0x57c>)
 801f802:	f240 3251 	movw	r2, #849	; 0x351
 801f806:	4980      	ldr	r1, [pc, #512]	; (801fa08 <tcp_process+0x580>)
 801f808:	4880      	ldr	r0, [pc, #512]	; (801fa0c <tcp_process+0x584>)
 801f80a:	f005 ff31 	bl	8025670 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f812:	2b00      	cmp	r3, #0
 801f814:	d102      	bne.n	801f81c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 801f816:	23fa      	movs	r3, #250	; 0xfa
 801f818:	76bb      	strb	r3, [r7, #26]
 801f81a:	e011      	b.n	801f840 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f820:	699b      	ldr	r3, [r3, #24]
 801f822:	2b00      	cmp	r3, #0
 801f824:	d00a      	beq.n	801f83c <tcp_process+0x3b4>
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f82a:	699b      	ldr	r3, [r3, #24]
 801f82c:	687a      	ldr	r2, [r7, #4]
 801f82e:	6910      	ldr	r0, [r2, #16]
 801f830:	2200      	movs	r2, #0
 801f832:	6879      	ldr	r1, [r7, #4]
 801f834:	4798      	blx	r3
 801f836:	4603      	mov	r3, r0
 801f838:	76bb      	strb	r3, [r7, #26]
 801f83a:	e001      	b.n	801f840 <tcp_process+0x3b8>
 801f83c:	23f0      	movs	r3, #240	; 0xf0
 801f83e:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801f840:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f844:	2b00      	cmp	r3, #0
 801f846:	d00a      	beq.n	801f85e <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801f848:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f84c:	f113 0f0d 	cmn.w	r3, #13
 801f850:	d002      	beq.n	801f858 <tcp_process+0x3d0>
            tcp_abort(pcb);
 801f852:	6878      	ldr	r0, [r7, #4]
 801f854:	f7fd ff56 	bl	801d704 <tcp_abort>
          }
          return ERR_ABRT;
 801f858:	f06f 030c 	mvn.w	r3, #12
 801f85c:	e1bd      	b.n	801fbda <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801f85e:	6878      	ldr	r0, [r7, #4]
 801f860:	f000 fa42 	bl	801fce8 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 801f864:	4b6a      	ldr	r3, [pc, #424]	; (801fa10 <tcp_process+0x588>)
 801f866:	881b      	ldrh	r3, [r3, #0]
 801f868:	2b00      	cmp	r3, #0
 801f86a:	d005      	beq.n	801f878 <tcp_process+0x3f0>
          recv_acked--;
 801f86c:	4b68      	ldr	r3, [pc, #416]	; (801fa10 <tcp_process+0x588>)
 801f86e:	881b      	ldrh	r3, [r3, #0]
 801f870:	3b01      	subs	r3, #1
 801f872:	b29a      	uxth	r2, r3
 801f874:	4b66      	ldr	r3, [pc, #408]	; (801fa10 <tcp_process+0x588>)
 801f876:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f87c:	005b      	lsls	r3, r3, #1
 801f87e:	f241 121c 	movw	r2, #4380	; 0x111c
 801f882:	429a      	cmp	r2, r3
 801f884:	bf38      	it	cc
 801f886:	461a      	movcc	r2, r3
 801f888:	687b      	ldr	r3, [r7, #4]
 801f88a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f88c:	009b      	lsls	r3, r3, #2
 801f88e:	4293      	cmp	r3, r2
 801f890:	bf28      	it	cs
 801f892:	4613      	movcs	r3, r2
 801f894:	b29a      	uxth	r2, r3
 801f896:	687b      	ldr	r3, [r7, #4]
 801f898:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 801f89c:	4b5d      	ldr	r3, [pc, #372]	; (801fa14 <tcp_process+0x58c>)
 801f89e:	781b      	ldrb	r3, [r3, #0]
 801f8a0:	f003 0320 	and.w	r3, r3, #32
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	d034      	beq.n	801f912 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	7e9b      	ldrb	r3, [r3, #26]
 801f8ac:	f043 0302 	orr.w	r3, r3, #2
 801f8b0:	b2da      	uxtb	r2, r3
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	2207      	movs	r2, #7
 801f8ba:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 801f8bc:	e029      	b.n	801f912 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8be:	4b4b      	ldr	r3, [pc, #300]	; (801f9ec <tcp_process+0x564>)
 801f8c0:	6818      	ldr	r0, [r3, #0]
 801f8c2:	4b4b      	ldr	r3, [pc, #300]	; (801f9f0 <tcp_process+0x568>)
 801f8c4:	881b      	ldrh	r3, [r3, #0]
 801f8c6:	461a      	mov	r2, r3
 801f8c8:	4b4a      	ldr	r3, [pc, #296]	; (801f9f4 <tcp_process+0x56c>)
 801f8ca:	681b      	ldr	r3, [r3, #0]
 801f8cc:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f8ce:	4b4a      	ldr	r3, [pc, #296]	; (801f9f8 <tcp_process+0x570>)
 801f8d0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8d2:	885b      	ldrh	r3, [r3, #2]
 801f8d4:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f8d6:	4a48      	ldr	r2, [pc, #288]	; (801f9f8 <tcp_process+0x570>)
 801f8d8:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8da:	8812      	ldrh	r2, [r2, #0]
 801f8dc:	b292      	uxth	r2, r2
 801f8de:	9201      	str	r2, [sp, #4]
 801f8e0:	9300      	str	r3, [sp, #0]
 801f8e2:	4b46      	ldr	r3, [pc, #280]	; (801f9fc <tcp_process+0x574>)
 801f8e4:	4a46      	ldr	r2, [pc, #280]	; (801fa00 <tcp_process+0x578>)
 801f8e6:	f002 fc03 	bl	80220f0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801f8ea:	e16a      	b.n	801fbc2 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801f8ec:	4b3e      	ldr	r3, [pc, #248]	; (801f9e8 <tcp_process+0x560>)
 801f8ee:	781b      	ldrb	r3, [r3, #0]
 801f8f0:	f003 0302 	and.w	r3, r3, #2
 801f8f4:	2b00      	cmp	r3, #0
 801f8f6:	f000 8164 	beq.w	801fbc2 <tcp_process+0x73a>
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8fe:	1e5a      	subs	r2, r3, #1
 801f900:	4b3c      	ldr	r3, [pc, #240]	; (801f9f4 <tcp_process+0x56c>)
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	429a      	cmp	r2, r3
 801f906:	f040 815c 	bne.w	801fbc2 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 801f90a:	6878      	ldr	r0, [r7, #4]
 801f90c:	f002 fc9a 	bl	8022244 <tcp_rexmit>
    break;
 801f910:	e157      	b.n	801fbc2 <tcp_process+0x73a>
 801f912:	e156      	b.n	801fbc2 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 801f914:	6878      	ldr	r0, [r7, #4]
 801f916:	f000 f9e7 	bl	801fce8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801f91a:	4b3e      	ldr	r3, [pc, #248]	; (801fa14 <tcp_process+0x58c>)
 801f91c:	781b      	ldrb	r3, [r3, #0]
 801f91e:	f003 0320 	and.w	r3, r3, #32
 801f922:	2b00      	cmp	r3, #0
 801f924:	f000 814f 	beq.w	801fbc6 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	7e9b      	ldrb	r3, [r3, #26]
 801f92c:	f043 0302 	orr.w	r3, r3, #2
 801f930:	b2da      	uxtb	r2, r3
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	2207      	movs	r2, #7
 801f93a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801f93c:	e143      	b.n	801fbc6 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801f93e:	6878      	ldr	r0, [r7, #4]
 801f940:	f000 f9d2 	bl	801fce8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801f944:	4b33      	ldr	r3, [pc, #204]	; (801fa14 <tcp_process+0x58c>)
 801f946:	781b      	ldrb	r3, [r3, #0]
 801f948:	f003 0320 	and.w	r3, r3, #32
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	d074      	beq.n	801fa3a <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f950:	4b25      	ldr	r3, [pc, #148]	; (801f9e8 <tcp_process+0x560>)
 801f952:	781b      	ldrb	r3, [r3, #0]
 801f954:	f003 0310 	and.w	r3, r3, #16
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d063      	beq.n	801fa24 <tcp_process+0x59c>
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f960:	4b22      	ldr	r3, [pc, #136]	; (801f9ec <tcp_process+0x564>)
 801f962:	681b      	ldr	r3, [r3, #0]
 801f964:	429a      	cmp	r2, r3
 801f966:	d15d      	bne.n	801fa24 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801f96c:	2b00      	cmp	r3, #0
 801f96e:	d159      	bne.n	801fa24 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801f970:	687b      	ldr	r3, [r7, #4]
 801f972:	7e9b      	ldrb	r3, [r3, #26]
 801f974:	f043 0302 	orr.w	r3, r3, #2
 801f978:	b2da      	uxtb	r2, r3
 801f97a:	687b      	ldr	r3, [r7, #4]
 801f97c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801f97e:	6878      	ldr	r0, [r7, #4]
 801f980:	f7fe feea 	bl	801e758 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801f984:	4b24      	ldr	r3, [pc, #144]	; (801fa18 <tcp_process+0x590>)
 801f986:	681a      	ldr	r2, [r3, #0]
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	429a      	cmp	r2, r3
 801f98c:	d105      	bne.n	801f99a <tcp_process+0x512>
 801f98e:	4b22      	ldr	r3, [pc, #136]	; (801fa18 <tcp_process+0x590>)
 801f990:	681b      	ldr	r3, [r3, #0]
 801f992:	68db      	ldr	r3, [r3, #12]
 801f994:	4a20      	ldr	r2, [pc, #128]	; (801fa18 <tcp_process+0x590>)
 801f996:	6013      	str	r3, [r2, #0]
 801f998:	e013      	b.n	801f9c2 <tcp_process+0x53a>
 801f99a:	4b1f      	ldr	r3, [pc, #124]	; (801fa18 <tcp_process+0x590>)
 801f99c:	681b      	ldr	r3, [r3, #0]
 801f99e:	617b      	str	r3, [r7, #20]
 801f9a0:	e00c      	b.n	801f9bc <tcp_process+0x534>
 801f9a2:	697b      	ldr	r3, [r7, #20]
 801f9a4:	68da      	ldr	r2, [r3, #12]
 801f9a6:	687b      	ldr	r3, [r7, #4]
 801f9a8:	429a      	cmp	r2, r3
 801f9aa:	d104      	bne.n	801f9b6 <tcp_process+0x52e>
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	68da      	ldr	r2, [r3, #12]
 801f9b0:	697b      	ldr	r3, [r7, #20]
 801f9b2:	60da      	str	r2, [r3, #12]
 801f9b4:	e005      	b.n	801f9c2 <tcp_process+0x53a>
 801f9b6:	697b      	ldr	r3, [r7, #20]
 801f9b8:	68db      	ldr	r3, [r3, #12]
 801f9ba:	617b      	str	r3, [r7, #20]
 801f9bc:	697b      	ldr	r3, [r7, #20]
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d1ef      	bne.n	801f9a2 <tcp_process+0x51a>
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	2200      	movs	r2, #0
 801f9c6:	60da      	str	r2, [r3, #12]
 801f9c8:	4b14      	ldr	r3, [pc, #80]	; (801fa1c <tcp_process+0x594>)
 801f9ca:	2201      	movs	r2, #1
 801f9cc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801f9ce:	687b      	ldr	r3, [r7, #4]
 801f9d0:	220a      	movs	r2, #10
 801f9d2:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801f9d4:	4b12      	ldr	r3, [pc, #72]	; (801fa20 <tcp_process+0x598>)
 801f9d6:	681a      	ldr	r2, [r3, #0]
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	60da      	str	r2, [r3, #12]
 801f9dc:	4a10      	ldr	r2, [pc, #64]	; (801fa20 <tcp_process+0x598>)
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	6013      	str	r3, [r2, #0]
 801f9e2:	f002 fdd3 	bl	802258c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801f9e6:	e0f0      	b.n	801fbca <tcp_process+0x742>
 801f9e8:	20004118 	.word	0x20004118
 801f9ec:	20004110 	.word	0x20004110
 801f9f0:	20004116 	.word	0x20004116
 801f9f4:	2000410c 	.word	0x2000410c
 801f9f8:	200040fc 	.word	0x200040fc
 801f9fc:	2000460c 	.word	0x2000460c
 801fa00:	20004610 	.word	0x20004610
 801fa04:	08027fbc 	.word	0x08027fbc
 801fa08:	080281c0 	.word	0x080281c0
 801fa0c:	08028000 	.word	0x08028000
 801fa10:	20004114 	.word	0x20004114
 801fa14:	20004119 	.word	0x20004119
 801fa18:	20008c24 	.word	0x20008c24
 801fa1c:	20008c20 	.word	0x20008c20
 801fa20:	20008c34 	.word	0x20008c34
        tcp_ack_now(pcb);
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	7e9b      	ldrb	r3, [r3, #26]
 801fa28:	f043 0302 	orr.w	r3, r3, #2
 801fa2c:	b2da      	uxtb	r2, r3
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	2208      	movs	r2, #8
 801fa36:	751a      	strb	r2, [r3, #20]
    break;
 801fa38:	e0c7      	b.n	801fbca <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801fa3a:	4b6a      	ldr	r3, [pc, #424]	; (801fbe4 <tcp_process+0x75c>)
 801fa3c:	781b      	ldrb	r3, [r3, #0]
 801fa3e:	f003 0310 	and.w	r3, r3, #16
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	f000 80c1 	beq.w	801fbca <tcp_process+0x742>
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fa4c:	4b66      	ldr	r3, [pc, #408]	; (801fbe8 <tcp_process+0x760>)
 801fa4e:	681b      	ldr	r3, [r3, #0]
 801fa50:	429a      	cmp	r2, r3
 801fa52:	f040 80ba 	bne.w	801fbca <tcp_process+0x742>
               pcb->unsent == NULL) {
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	f040 80b5 	bne.w	801fbca <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 801fa60:	687b      	ldr	r3, [r7, #4]
 801fa62:	2206      	movs	r2, #6
 801fa64:	751a      	strb	r2, [r3, #20]
    break;
 801fa66:	e0b0      	b.n	801fbca <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801fa68:	6878      	ldr	r0, [r7, #4]
 801fa6a:	f000 f93d 	bl	801fce8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801fa6e:	4b5f      	ldr	r3, [pc, #380]	; (801fbec <tcp_process+0x764>)
 801fa70:	781b      	ldrb	r3, [r3, #0]
 801fa72:	f003 0320 	and.w	r3, r3, #32
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	f000 80a9 	beq.w	801fbce <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	7e9b      	ldrb	r3, [r3, #26]
 801fa80:	f043 0302 	orr.w	r3, r3, #2
 801fa84:	b2da      	uxtb	r2, r3
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801fa8a:	6878      	ldr	r0, [r7, #4]
 801fa8c:	f7fe fe64 	bl	801e758 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801fa90:	4b57      	ldr	r3, [pc, #348]	; (801fbf0 <tcp_process+0x768>)
 801fa92:	681a      	ldr	r2, [r3, #0]
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	429a      	cmp	r2, r3
 801fa98:	d105      	bne.n	801faa6 <tcp_process+0x61e>
 801fa9a:	4b55      	ldr	r3, [pc, #340]	; (801fbf0 <tcp_process+0x768>)
 801fa9c:	681b      	ldr	r3, [r3, #0]
 801fa9e:	68db      	ldr	r3, [r3, #12]
 801faa0:	4a53      	ldr	r2, [pc, #332]	; (801fbf0 <tcp_process+0x768>)
 801faa2:	6013      	str	r3, [r2, #0]
 801faa4:	e013      	b.n	801face <tcp_process+0x646>
 801faa6:	4b52      	ldr	r3, [pc, #328]	; (801fbf0 <tcp_process+0x768>)
 801faa8:	681b      	ldr	r3, [r3, #0]
 801faaa:	613b      	str	r3, [r7, #16]
 801faac:	e00c      	b.n	801fac8 <tcp_process+0x640>
 801faae:	693b      	ldr	r3, [r7, #16]
 801fab0:	68da      	ldr	r2, [r3, #12]
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	429a      	cmp	r2, r3
 801fab6:	d104      	bne.n	801fac2 <tcp_process+0x63a>
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	68da      	ldr	r2, [r3, #12]
 801fabc:	693b      	ldr	r3, [r7, #16]
 801fabe:	60da      	str	r2, [r3, #12]
 801fac0:	e005      	b.n	801face <tcp_process+0x646>
 801fac2:	693b      	ldr	r3, [r7, #16]
 801fac4:	68db      	ldr	r3, [r3, #12]
 801fac6:	613b      	str	r3, [r7, #16]
 801fac8:	693b      	ldr	r3, [r7, #16]
 801faca:	2b00      	cmp	r3, #0
 801facc:	d1ef      	bne.n	801faae <tcp_process+0x626>
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	2200      	movs	r2, #0
 801fad2:	60da      	str	r2, [r3, #12]
 801fad4:	4b47      	ldr	r3, [pc, #284]	; (801fbf4 <tcp_process+0x76c>)
 801fad6:	2201      	movs	r2, #1
 801fad8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801fada:	687b      	ldr	r3, [r7, #4]
 801fadc:	220a      	movs	r2, #10
 801fade:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801fae0:	4b45      	ldr	r3, [pc, #276]	; (801fbf8 <tcp_process+0x770>)
 801fae2:	681a      	ldr	r2, [r3, #0]
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	60da      	str	r2, [r3, #12]
 801fae8:	4a43      	ldr	r2, [pc, #268]	; (801fbf8 <tcp_process+0x770>)
 801faea:	687b      	ldr	r3, [r7, #4]
 801faec:	6013      	str	r3, [r2, #0]
 801faee:	f002 fd4d 	bl	802258c <tcp_timer_needed>
    }
    break;
 801faf2:	e06c      	b.n	801fbce <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 801faf4:	6878      	ldr	r0, [r7, #4]
 801faf6:	f000 f8f7 	bl	801fce8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801fafa:	4b3a      	ldr	r3, [pc, #232]	; (801fbe4 <tcp_process+0x75c>)
 801fafc:	781b      	ldrb	r3, [r3, #0]
 801fafe:	f003 0310 	and.w	r3, r3, #16
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	d065      	beq.n	801fbd2 <tcp_process+0x74a>
 801fb06:	687b      	ldr	r3, [r7, #4]
 801fb08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fb0a:	4b37      	ldr	r3, [pc, #220]	; (801fbe8 <tcp_process+0x760>)
 801fb0c:	681b      	ldr	r3, [r3, #0]
 801fb0e:	429a      	cmp	r2, r3
 801fb10:	d15f      	bne.n	801fbd2 <tcp_process+0x74a>
 801fb12:	687b      	ldr	r3, [r7, #4]
 801fb14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	d15b      	bne.n	801fbd2 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801fb1a:	6878      	ldr	r0, [r7, #4]
 801fb1c:	f7fe fe1c 	bl	801e758 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801fb20:	4b33      	ldr	r3, [pc, #204]	; (801fbf0 <tcp_process+0x768>)
 801fb22:	681a      	ldr	r2, [r3, #0]
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	429a      	cmp	r2, r3
 801fb28:	d105      	bne.n	801fb36 <tcp_process+0x6ae>
 801fb2a:	4b31      	ldr	r3, [pc, #196]	; (801fbf0 <tcp_process+0x768>)
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	68db      	ldr	r3, [r3, #12]
 801fb30:	4a2f      	ldr	r2, [pc, #188]	; (801fbf0 <tcp_process+0x768>)
 801fb32:	6013      	str	r3, [r2, #0]
 801fb34:	e013      	b.n	801fb5e <tcp_process+0x6d6>
 801fb36:	4b2e      	ldr	r3, [pc, #184]	; (801fbf0 <tcp_process+0x768>)
 801fb38:	681b      	ldr	r3, [r3, #0]
 801fb3a:	60fb      	str	r3, [r7, #12]
 801fb3c:	e00c      	b.n	801fb58 <tcp_process+0x6d0>
 801fb3e:	68fb      	ldr	r3, [r7, #12]
 801fb40:	68da      	ldr	r2, [r3, #12]
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	429a      	cmp	r2, r3
 801fb46:	d104      	bne.n	801fb52 <tcp_process+0x6ca>
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	68da      	ldr	r2, [r3, #12]
 801fb4c:	68fb      	ldr	r3, [r7, #12]
 801fb4e:	60da      	str	r2, [r3, #12]
 801fb50:	e005      	b.n	801fb5e <tcp_process+0x6d6>
 801fb52:	68fb      	ldr	r3, [r7, #12]
 801fb54:	68db      	ldr	r3, [r3, #12]
 801fb56:	60fb      	str	r3, [r7, #12]
 801fb58:	68fb      	ldr	r3, [r7, #12]
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	d1ef      	bne.n	801fb3e <tcp_process+0x6b6>
 801fb5e:	687b      	ldr	r3, [r7, #4]
 801fb60:	2200      	movs	r2, #0
 801fb62:	60da      	str	r2, [r3, #12]
 801fb64:	4b23      	ldr	r3, [pc, #140]	; (801fbf4 <tcp_process+0x76c>)
 801fb66:	2201      	movs	r2, #1
 801fb68:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801fb6a:	687b      	ldr	r3, [r7, #4]
 801fb6c:	220a      	movs	r2, #10
 801fb6e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801fb70:	4b21      	ldr	r3, [pc, #132]	; (801fbf8 <tcp_process+0x770>)
 801fb72:	681a      	ldr	r2, [r3, #0]
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	60da      	str	r2, [r3, #12]
 801fb78:	4a1f      	ldr	r2, [pc, #124]	; (801fbf8 <tcp_process+0x770>)
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	6013      	str	r3, [r2, #0]
 801fb7e:	f002 fd05 	bl	802258c <tcp_timer_needed>
    }
    break;
 801fb82:	e026      	b.n	801fbd2 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 801fb84:	6878      	ldr	r0, [r7, #4]
 801fb86:	f000 f8af 	bl	801fce8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801fb8a:	4b16      	ldr	r3, [pc, #88]	; (801fbe4 <tcp_process+0x75c>)
 801fb8c:	781b      	ldrb	r3, [r3, #0]
 801fb8e:	f003 0310 	and.w	r3, r3, #16
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d01f      	beq.n	801fbd6 <tcp_process+0x74e>
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fb9a:	4b13      	ldr	r3, [pc, #76]	; (801fbe8 <tcp_process+0x760>)
 801fb9c:	681b      	ldr	r3, [r3, #0]
 801fb9e:	429a      	cmp	r2, r3
 801fba0:	d119      	bne.n	801fbd6 <tcp_process+0x74e>
 801fba2:	687b      	ldr	r3, [r7, #4]
 801fba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	d115      	bne.n	801fbd6 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801fbaa:	4b10      	ldr	r3, [pc, #64]	; (801fbec <tcp_process+0x764>)
 801fbac:	781b      	ldrb	r3, [r3, #0]
 801fbae:	f043 0310 	orr.w	r3, r3, #16
 801fbb2:	b2da      	uxtb	r2, r3
 801fbb4:	4b0d      	ldr	r3, [pc, #52]	; (801fbec <tcp_process+0x764>)
 801fbb6:	701a      	strb	r2, [r3, #0]
    }
    break;
 801fbb8:	e00d      	b.n	801fbd6 <tcp_process+0x74e>
  default:
    break;
 801fbba:	bf00      	nop
 801fbbc:	e00c      	b.n	801fbd8 <tcp_process+0x750>
    break;
 801fbbe:	bf00      	nop
 801fbc0:	e00a      	b.n	801fbd8 <tcp_process+0x750>
    break;
 801fbc2:	bf00      	nop
 801fbc4:	e008      	b.n	801fbd8 <tcp_process+0x750>
    break;
 801fbc6:	bf00      	nop
 801fbc8:	e006      	b.n	801fbd8 <tcp_process+0x750>
    break;
 801fbca:	bf00      	nop
 801fbcc:	e004      	b.n	801fbd8 <tcp_process+0x750>
    break;
 801fbce:	bf00      	nop
 801fbd0:	e002      	b.n	801fbd8 <tcp_process+0x750>
    break;
 801fbd2:	bf00      	nop
 801fbd4:	e000      	b.n	801fbd8 <tcp_process+0x750>
    break;
 801fbd6:	bf00      	nop
  }
  return ERR_OK;
 801fbd8:	2300      	movs	r3, #0
}
 801fbda:	4618      	mov	r0, r3
 801fbdc:	3720      	adds	r7, #32
 801fbde:	46bd      	mov	sp, r7
 801fbe0:	bd80      	pop	{r7, pc}
 801fbe2:	bf00      	nop
 801fbe4:	20004118 	.word	0x20004118
 801fbe8:	20004110 	.word	0x20004110
 801fbec:	20004119 	.word	0x20004119
 801fbf0:	20008c24 	.word	0x20008c24
 801fbf4:	20008c20 	.word	0x20008c20
 801fbf8:	20008c34 	.word	0x20008c34

0801fbfc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801fbfc:	b5b0      	push	{r4, r5, r7, lr}
 801fbfe:	b084      	sub	sp, #16
 801fc00:	af00      	add	r7, sp, #0
 801fc02:	6078      	str	r0, [r7, #4]
 801fc04:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	68db      	ldr	r3, [r3, #12]
 801fc0a:	899b      	ldrh	r3, [r3, #12]
 801fc0c:	b29b      	uxth	r3, r3
 801fc0e:	4618      	mov	r0, r3
 801fc10:	f7f9 fba2 	bl	8019358 <lwip_htons>
 801fc14:	4603      	mov	r3, r0
 801fc16:	f003 0301 	and.w	r3, r3, #1
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d026      	beq.n	801fc6c <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801fc1e:	6838      	ldr	r0, [r7, #0]
 801fc20:	f7fe fb31 	bl	801e286 <tcp_segs_free>
    next = NULL;
 801fc24:	2300      	movs	r3, #0
 801fc26:	603b      	str	r3, [r7, #0]
 801fc28:	e054      	b.n	801fcd4 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801fc2a:	683b      	ldr	r3, [r7, #0]
 801fc2c:	68db      	ldr	r3, [r3, #12]
 801fc2e:	899b      	ldrh	r3, [r3, #12]
 801fc30:	b29b      	uxth	r3, r3
 801fc32:	4618      	mov	r0, r3
 801fc34:	f7f9 fb90 	bl	8019358 <lwip_htons>
 801fc38:	4603      	mov	r3, r0
 801fc3a:	f003 0301 	and.w	r3, r3, #1
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	d00c      	beq.n	801fc5c <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	68dc      	ldr	r4, [r3, #12]
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	68db      	ldr	r3, [r3, #12]
 801fc4a:	899b      	ldrh	r3, [r3, #12]
 801fc4c:	b29d      	uxth	r5, r3
 801fc4e:	2001      	movs	r0, #1
 801fc50:	f7f9 fb82 	bl	8019358 <lwip_htons>
 801fc54:	4603      	mov	r3, r0
 801fc56:	432b      	orrs	r3, r5
 801fc58:	b29b      	uxth	r3, r3
 801fc5a:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 801fc5c:	683b      	ldr	r3, [r7, #0]
 801fc5e:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801fc60:	683b      	ldr	r3, [r7, #0]
 801fc62:	681b      	ldr	r3, [r3, #0]
 801fc64:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801fc66:	68f8      	ldr	r0, [r7, #12]
 801fc68:	f7fe fb21 	bl	801e2ae <tcp_seg_free>
    while (next &&
 801fc6c:	683b      	ldr	r3, [r7, #0]
 801fc6e:	2b00      	cmp	r3, #0
 801fc70:	d00e      	beq.n	801fc90 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801fc72:	687b      	ldr	r3, [r7, #4]
 801fc74:	891b      	ldrh	r3, [r3, #8]
 801fc76:	461a      	mov	r2, r3
 801fc78:	4b1a      	ldr	r3, [pc, #104]	; (801fce4 <tcp_oos_insert_segment+0xe8>)
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	441a      	add	r2, r3
 801fc7e:	683b      	ldr	r3, [r7, #0]
 801fc80:	68db      	ldr	r3, [r3, #12]
 801fc82:	685b      	ldr	r3, [r3, #4]
 801fc84:	6839      	ldr	r1, [r7, #0]
 801fc86:	8909      	ldrh	r1, [r1, #8]
 801fc88:	440b      	add	r3, r1
 801fc8a:	1ad3      	subs	r3, r2, r3
    while (next &&
 801fc8c:	2b00      	cmp	r3, #0
 801fc8e:	dacc      	bge.n	801fc2a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 801fc90:	683b      	ldr	r3, [r7, #0]
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d01e      	beq.n	801fcd4 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	891b      	ldrh	r3, [r3, #8]
 801fc9a:	461a      	mov	r2, r3
 801fc9c:	4b11      	ldr	r3, [pc, #68]	; (801fce4 <tcp_oos_insert_segment+0xe8>)
 801fc9e:	681b      	ldr	r3, [r3, #0]
 801fca0:	441a      	add	r2, r3
 801fca2:	683b      	ldr	r3, [r7, #0]
 801fca4:	68db      	ldr	r3, [r3, #12]
 801fca6:	685b      	ldr	r3, [r3, #4]
 801fca8:	1ad3      	subs	r3, r2, r3
    if (next &&
 801fcaa:	2b00      	cmp	r3, #0
 801fcac:	dd12      	ble.n	801fcd4 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801fcae:	683b      	ldr	r3, [r7, #0]
 801fcb0:	68db      	ldr	r3, [r3, #12]
 801fcb2:	685b      	ldr	r3, [r3, #4]
 801fcb4:	b29a      	uxth	r2, r3
 801fcb6:	4b0b      	ldr	r3, [pc, #44]	; (801fce4 <tcp_oos_insert_segment+0xe8>)
 801fcb8:	681b      	ldr	r3, [r3, #0]
 801fcba:	b29b      	uxth	r3, r3
 801fcbc:	1ad3      	subs	r3, r2, r3
 801fcbe:	b29a      	uxth	r2, r3
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	685a      	ldr	r2, [r3, #4]
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	891b      	ldrh	r3, [r3, #8]
 801fccc:	4619      	mov	r1, r3
 801fcce:	4610      	mov	r0, r2
 801fcd0:	f7fc fe5e 	bl	801c990 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801fcd4:	687b      	ldr	r3, [r7, #4]
 801fcd6:	683a      	ldr	r2, [r7, #0]
 801fcd8:	601a      	str	r2, [r3, #0]
}
 801fcda:	bf00      	nop
 801fcdc:	3710      	adds	r7, #16
 801fcde:	46bd      	mov	sp, r7
 801fce0:	bdb0      	pop	{r4, r5, r7, pc}
 801fce2:	bf00      	nop
 801fce4:	2000410c 	.word	0x2000410c

0801fce8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801fce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcea:	b08d      	sub	sp, #52	; 0x34
 801fcec:	af00      	add	r7, sp, #0
 801fcee:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 801fcf0:	2300      	movs	r3, #0
 801fcf2:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	7d1b      	ldrb	r3, [r3, #20]
 801fcf8:	2b03      	cmp	r3, #3
 801fcfa:	d806      	bhi.n	801fd0a <tcp_receive+0x22>
 801fcfc:	4b9a      	ldr	r3, [pc, #616]	; (801ff68 <tcp_receive+0x280>)
 801fcfe:	f44f 6281 	mov.w	r2, #1032	; 0x408
 801fd02:	499a      	ldr	r1, [pc, #616]	; (801ff6c <tcp_receive+0x284>)
 801fd04:	489a      	ldr	r0, [pc, #616]	; (801ff70 <tcp_receive+0x288>)
 801fd06:	f005 fcb3 	bl	8025670 <iprintf>

  if (flags & TCP_ACK) {
 801fd0a:	4b9a      	ldr	r3, [pc, #616]	; (801ff74 <tcp_receive+0x28c>)
 801fd0c:	781b      	ldrb	r3, [r3, #0]
 801fd0e:	f003 0310 	and.w	r3, r3, #16
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	f000 82c5 	beq.w	80202a2 <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fd1e:	461a      	mov	r2, r3
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fd24:	4413      	add	r3, r2
 801fd26:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fd2c:	4b92      	ldr	r3, [pc, #584]	; (801ff78 <tcp_receive+0x290>)
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	1ad3      	subs	r3, r2, r3
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	db1b      	blt.n	801fd6e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fd3a:	4b8f      	ldr	r3, [pc, #572]	; (801ff78 <tcp_receive+0x290>)
 801fd3c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fd3e:	429a      	cmp	r2, r3
 801fd40:	d106      	bne.n	801fd50 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fd42:	687b      	ldr	r3, [r7, #4]
 801fd44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd46:	4b8d      	ldr	r3, [pc, #564]	; (801ff7c <tcp_receive+0x294>)
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	1ad3      	subs	r3, r2, r3
 801fd4c:	2b00      	cmp	r3, #0
 801fd4e:	db0e      	blt.n	801fd6e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd54:	4b89      	ldr	r3, [pc, #548]	; (801ff7c <tcp_receive+0x294>)
 801fd56:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fd58:	429a      	cmp	r2, r3
 801fd5a:	d141      	bne.n	801fde0 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fd5c:	4b88      	ldr	r3, [pc, #544]	; (801ff80 <tcp_receive+0x298>)
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	89db      	ldrh	r3, [r3, #14]
 801fd62:	b29a      	uxth	r2, r3
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fd6a:	429a      	cmp	r2, r3
 801fd6c:	d938      	bls.n	801fde0 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801fd6e:	4b84      	ldr	r3, [pc, #528]	; (801ff80 <tcp_receive+0x298>)
 801fd70:	681b      	ldr	r3, [r3, #0]
 801fd72:	89db      	ldrh	r3, [r3, #14]
 801fd74:	b29a      	uxth	r2, r3
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 801fd82:	687b      	ldr	r3, [r7, #4]
 801fd84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fd88:	429a      	cmp	r2, r3
 801fd8a:	d205      	bcs.n	801fd98 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 801fd98:	4b77      	ldr	r3, [pc, #476]	; (801ff78 <tcp_receive+0x290>)
 801fd9a:	681a      	ldr	r2, [r3, #0]
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 801fda0:	4b76      	ldr	r3, [pc, #472]	; (801ff7c <tcp_receive+0x294>)
 801fda2:	681a      	ldr	r2, [r3, #0]
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fdae:	2b00      	cmp	r3, #0
 801fdb0:	d10d      	bne.n	801fdce <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d111      	bne.n	801fde0 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	2200      	movs	r2, #0
 801fdc0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 801fdc4:	687b      	ldr	r3, [r7, #4]
 801fdc6:	2201      	movs	r2, #1
 801fdc8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 801fdcc:	e008      	b.n	801fde0 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	d003      	beq.n	801fde0 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	2200      	movs	r2, #0
 801fddc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801fde0:	4b66      	ldr	r3, [pc, #408]	; (801ff7c <tcp_receive+0x294>)
 801fde2:	681a      	ldr	r2, [r3, #0]
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fde8:	1ad3      	subs	r3, r2, r3
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	dc58      	bgt.n	801fea0 <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 801fdee:	4b65      	ldr	r3, [pc, #404]	; (801ff84 <tcp_receive+0x29c>)
 801fdf0:	881b      	ldrh	r3, [r3, #0]
 801fdf2:	2b00      	cmp	r3, #0
 801fdf4:	d14b      	bne.n	801fe8e <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fdfa:	687a      	ldr	r2, [r7, #4]
 801fdfc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 801fe00:	441a      	add	r2, r3
 801fe02:	697b      	ldr	r3, [r7, #20]
 801fe04:	429a      	cmp	r2, r3
 801fe06:	d142      	bne.n	801fe8e <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	db3d      	blt.n	801fe8e <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fe16:	4b59      	ldr	r3, [pc, #356]	; (801ff7c <tcp_receive+0x294>)
 801fe18:	681b      	ldr	r3, [r3, #0]
 801fe1a:	429a      	cmp	r2, r3
 801fe1c:	d137      	bne.n	801fe8e <tcp_receive+0x1a6>
              found_dupack = 1;
 801fe1e:	2301      	movs	r3, #1
 801fe20:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801fe22:	687b      	ldr	r3, [r7, #4]
 801fe24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe28:	3301      	adds	r3, #1
 801fe2a:	b2da      	uxtb	r2, r3
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe32:	429a      	cmp	r2, r3
 801fe34:	d907      	bls.n	801fe46 <tcp_receive+0x15e>
                ++pcb->dupacks;
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe3c:	3301      	adds	r3, #1
 801fe3e:	b2da      	uxtb	r2, r3
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe4c:	2b03      	cmp	r3, #3
 801fe4e:	d916      	bls.n	801fe7e <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fe5a:	4413      	add	r3, r2
 801fe5c:	b29a      	uxth	r2, r3
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801fe64:	429a      	cmp	r2, r3
 801fe66:	d912      	bls.n	801fe8e <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fe72:	4413      	add	r3, r2
 801fe74:	b29a      	uxth	r2, r3
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801fe7c:	e007      	b.n	801fe8e <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 801fe7e:	687b      	ldr	r3, [r7, #4]
 801fe80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe84:	2b03      	cmp	r3, #3
 801fe86:	d102      	bne.n	801fe8e <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 801fe88:	6878      	ldr	r0, [r7, #4]
 801fe8a:	f002 fa2b 	bl	80222e4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801fe8e:	69fb      	ldr	r3, [r7, #28]
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	f040 8169 	bne.w	8020168 <tcp_receive+0x480>
        pcb->dupacks = 0;
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	2200      	movs	r2, #0
 801fe9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801fe9e:	e163      	b.n	8020168 <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801fea0:	4b36      	ldr	r3, [pc, #216]	; (801ff7c <tcp_receive+0x294>)
 801fea2:	681a      	ldr	r2, [r3, #0]
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fea8:	1ad3      	subs	r3, r2, r3
 801feaa:	3b01      	subs	r3, #1
 801feac:	2b00      	cmp	r3, #0
 801feae:	f2c0 8107 	blt.w	80200c0 <tcp_receive+0x3d8>
 801feb2:	4b32      	ldr	r3, [pc, #200]	; (801ff7c <tcp_receive+0x294>)
 801feb4:	681a      	ldr	r2, [r3, #0]
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801feba:	1ad3      	subs	r3, r2, r3
 801febc:	2b00      	cmp	r3, #0
 801febe:	f300 80ff 	bgt.w	80200c0 <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801fec2:	687b      	ldr	r3, [r7, #4]
 801fec4:	7e9b      	ldrb	r3, [r3, #26]
 801fec6:	f003 0304 	and.w	r3, r3, #4
 801feca:	2b00      	cmp	r3, #0
 801fecc:	d00c      	beq.n	801fee8 <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 801fece:	687b      	ldr	r3, [r7, #4]
 801fed0:	7e9b      	ldrb	r3, [r3, #26]
 801fed2:	f023 0304 	bic.w	r3, r3, #4
 801fed6:	b2da      	uxtb	r2, r3
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	2200      	movs	r2, #0
 801feec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801fef6:	10db      	asrs	r3, r3, #3
 801fef8:	b21b      	sxth	r3, r3
 801fefa:	b29a      	uxth	r2, r3
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ff02:	b29b      	uxth	r3, r3
 801ff04:	4413      	add	r3, r2
 801ff06:	b29b      	uxth	r3, r3
 801ff08:	b21a      	sxth	r2, r3
 801ff0a:	687b      	ldr	r3, [r7, #4]
 801ff0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	2200      	movs	r2, #0
 801ff14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801ff18:	4b18      	ldr	r3, [pc, #96]	; (801ff7c <tcp_receive+0x294>)
 801ff1a:	681a      	ldr	r2, [r3, #0]
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801ff20:	687b      	ldr	r3, [r7, #4]
 801ff22:	7d1b      	ldrb	r3, [r3, #20]
 801ff24:	2b03      	cmp	r3, #3
 801ff26:	f240 8094 	bls.w	8020052 <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ff36:	429a      	cmp	r2, r3
 801ff38:	d226      	bcs.n	801ff88 <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801ff3a:	687b      	ldr	r3, [r7, #4]
 801ff3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff44:	4413      	add	r3, r2
 801ff46:	b29a      	uxth	r2, r3
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ff4e:	429a      	cmp	r2, r3
 801ff50:	d97f      	bls.n	8020052 <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff5c:	4413      	add	r3, r2
 801ff5e:	b29a      	uxth	r2, r3
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ff66:	e074      	b.n	8020052 <tcp_receive+0x36a>
 801ff68:	08027fbc 	.word	0x08027fbc
 801ff6c:	080281e0 	.word	0x080281e0
 801ff70:	08028000 	.word	0x08028000
 801ff74:	20004118 	.word	0x20004118
 801ff78:	2000410c 	.word	0x2000410c
 801ff7c:	20004110 	.word	0x20004110
 801ff80:	200040fc 	.word	0x200040fc
 801ff84:	20004116 	.word	0x20004116
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff8e:	687b      	ldr	r3, [r7, #4]
 801ff90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff92:	4619      	mov	r1, r3
 801ff94:	687b      	ldr	r3, [r7, #4]
 801ff96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff98:	fb03 f301 	mul.w	r3, r3, r1
 801ff9c:	6879      	ldr	r1, [r7, #4]
 801ff9e:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 801ffa2:	fb93 f3f1 	sdiv	r3, r3, r1
 801ffa6:	b29b      	uxth	r3, r3
 801ffa8:	4413      	add	r3, r2
 801ffaa:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ffb2:	8a7a      	ldrh	r2, [r7, #18]
 801ffb4:	429a      	cmp	r2, r3
 801ffb6:	d94c      	bls.n	8020052 <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 801ffb8:	687b      	ldr	r3, [r7, #4]
 801ffba:	8a7a      	ldrh	r2, [r7, #18]
 801ffbc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 801ffc0:	e047      	b.n	8020052 <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 801ffc2:	687b      	ldr	r3, [r7, #4]
 801ffc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ffc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ffcc:	681a      	ldr	r2, [r3, #0]
 801ffce:	687b      	ldr	r3, [r7, #4]
 801ffd0:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 801ffd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffda:	685b      	ldr	r3, [r3, #4]
 801ffdc:	4618      	mov	r0, r3
 801ffde:	f7fc fee5 	bl	801cdac <pbuf_clen>
 801ffe2:	4603      	mov	r3, r0
 801ffe4:	429c      	cmp	r4, r3
 801ffe6:	d206      	bcs.n	801fff6 <tcp_receive+0x30e>
 801ffe8:	4b70      	ldr	r3, [pc, #448]	; (80201ac <tcp_receive+0x4c4>)
 801ffea:	f240 429e 	movw	r2, #1182	; 0x49e
 801ffee:	4970      	ldr	r1, [pc, #448]	; (80201b0 <tcp_receive+0x4c8>)
 801fff0:	4870      	ldr	r0, [pc, #448]	; (80201b4 <tcp_receive+0x4cc>)
 801fff2:	f005 fb3d 	bl	8025670 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 801fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fff8:	685b      	ldr	r3, [r3, #4]
 801fffa:	4618      	mov	r0, r3
 801fffc:	f7fc fed6 	bl	801cdac <pbuf_clen>
 8020000:	4603      	mov	r3, r0
 8020002:	461a      	mov	r2, r3
 8020004:	687b      	ldr	r3, [r7, #4]
 8020006:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802000a:	1a9b      	subs	r3, r3, r2
 802000c:	b29a      	uxth	r2, r3
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8020014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020016:	891a      	ldrh	r2, [r3, #8]
 8020018:	4b67      	ldr	r3, [pc, #412]	; (80201b8 <tcp_receive+0x4d0>)
 802001a:	881b      	ldrh	r3, [r3, #0]
 802001c:	4413      	add	r3, r2
 802001e:	b29a      	uxth	r2, r3
 8020020:	4b65      	ldr	r3, [pc, #404]	; (80201b8 <tcp_receive+0x4d0>)
 8020022:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8020024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020026:	f7fe f942 	bl	801e2ae <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020030:	2b00      	cmp	r3, #0
 8020032:	d00e      	beq.n	8020052 <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020038:	2b00      	cmp	r3, #0
 802003a:	d10a      	bne.n	8020052 <tcp_receive+0x36a>
 802003c:	687b      	ldr	r3, [r7, #4]
 802003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020040:	2b00      	cmp	r3, #0
 8020042:	d106      	bne.n	8020052 <tcp_receive+0x36a>
 8020044:	4b59      	ldr	r3, [pc, #356]	; (80201ac <tcp_receive+0x4c4>)
 8020046:	f240 42a7 	movw	r2, #1191	; 0x4a7
 802004a:	495c      	ldr	r1, [pc, #368]	; (80201bc <tcp_receive+0x4d4>)
 802004c:	4859      	ldr	r0, [pc, #356]	; (80201b4 <tcp_receive+0x4cc>)
 802004e:	f005 fb0f 	bl	8025670 <iprintf>
      while (pcb->unacked != NULL &&
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020056:	2b00      	cmp	r3, #0
 8020058:	d022      	beq.n	80200a0 <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802005e:	68db      	ldr	r3, [r3, #12]
 8020060:	685b      	ldr	r3, [r3, #4]
 8020062:	4618      	mov	r0, r3
 8020064:	f7f9 f986 	bl	8019374 <lwip_htonl>
 8020068:	4604      	mov	r4, r0
 802006a:	687b      	ldr	r3, [r7, #4]
 802006c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802006e:	891b      	ldrh	r3, [r3, #8]
 8020070:	461d      	mov	r5, r3
 8020072:	687b      	ldr	r3, [r7, #4]
 8020074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020076:	68db      	ldr	r3, [r3, #12]
 8020078:	899b      	ldrh	r3, [r3, #12]
 802007a:	b29b      	uxth	r3, r3
 802007c:	4618      	mov	r0, r3
 802007e:	f7f9 f96b 	bl	8019358 <lwip_htons>
 8020082:	4603      	mov	r3, r0
 8020084:	f003 0303 	and.w	r3, r3, #3
 8020088:	2b00      	cmp	r3, #0
 802008a:	d001      	beq.n	8020090 <tcp_receive+0x3a8>
 802008c:	2301      	movs	r3, #1
 802008e:	e000      	b.n	8020092 <tcp_receive+0x3aa>
 8020090:	2300      	movs	r3, #0
 8020092:	442b      	add	r3, r5
 8020094:	18e2      	adds	r2, r4, r3
 8020096:	4b4a      	ldr	r3, [pc, #296]	; (80201c0 <tcp_receive+0x4d8>)
 8020098:	681b      	ldr	r3, [r3, #0]
 802009a:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 802009c:	2b00      	cmp	r3, #0
 802009e:	dd90      	ble.n	801ffc2 <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	d104      	bne.n	80200b2 <tcp_receive+0x3ca>
        pcb->rtime = -1;
 80200a8:	687b      	ldr	r3, [r7, #4]
 80200aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80200ae:	861a      	strh	r2, [r3, #48]	; 0x30
 80200b0:	e002      	b.n	80200b8 <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 80200b2:	687b      	ldr	r3, [r7, #4]
 80200b4:	2200      	movs	r2, #0
 80200b6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	2200      	movs	r2, #0
 80200bc:	76da      	strb	r2, [r3, #27]
 80200be:	e002      	b.n	80200c6 <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80200c0:	6878      	ldr	r0, [r7, #4]
 80200c2:	f001 fd31 	bl	8021b28 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80200c6:	e04f      	b.n	8020168 <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80200cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80200d2:	681a      	ldr	r2, [r3, #0]
 80200d4:	687b      	ldr	r3, [r7, #4]
 80200d6:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80200dc:	2b00      	cmp	r3, #0
 80200de:	d103      	bne.n	80200e8 <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	2200      	movs	r2, #0
 80200e4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80200ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80200f0:	685b      	ldr	r3, [r3, #4]
 80200f2:	4618      	mov	r0, r3
 80200f4:	f7fc fe5a 	bl	801cdac <pbuf_clen>
 80200f8:	4603      	mov	r3, r0
 80200fa:	429c      	cmp	r4, r3
 80200fc:	d206      	bcs.n	802010c <tcp_receive+0x424>
 80200fe:	4b2b      	ldr	r3, [pc, #172]	; (80201ac <tcp_receive+0x4c4>)
 8020100:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8020104:	492a      	ldr	r1, [pc, #168]	; (80201b0 <tcp_receive+0x4c8>)
 8020106:	482b      	ldr	r0, [pc, #172]	; (80201b4 <tcp_receive+0x4cc>)
 8020108:	f005 fab2 	bl	8025670 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 802010c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802010e:	685b      	ldr	r3, [r3, #4]
 8020110:	4618      	mov	r0, r3
 8020112:	f7fc fe4b 	bl	801cdac <pbuf_clen>
 8020116:	4603      	mov	r3, r0
 8020118:	461a      	mov	r2, r3
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020120:	1a9b      	subs	r3, r3, r2
 8020122:	b29a      	uxth	r2, r3
 8020124:	687b      	ldr	r3, [r7, #4]
 8020126:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 802012a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802012c:	891a      	ldrh	r2, [r3, #8]
 802012e:	4b22      	ldr	r3, [pc, #136]	; (80201b8 <tcp_receive+0x4d0>)
 8020130:	881b      	ldrh	r3, [r3, #0]
 8020132:	4413      	add	r3, r2
 8020134:	b29a      	uxth	r2, r3
 8020136:	4b20      	ldr	r3, [pc, #128]	; (80201b8 <tcp_receive+0x4d0>)
 8020138:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 802013a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802013c:	f7fe f8b7 	bl	801e2ae <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020146:	2b00      	cmp	r3, #0
 8020148:	d00e      	beq.n	8020168 <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802014e:	2b00      	cmp	r3, #0
 8020150:	d10a      	bne.n	8020168 <tcp_receive+0x480>
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020156:	2b00      	cmp	r3, #0
 8020158:	d106      	bne.n	8020168 <tcp_receive+0x480>
 802015a:	4b14      	ldr	r3, [pc, #80]	; (80201ac <tcp_receive+0x4c4>)
 802015c:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8020160:	4916      	ldr	r1, [pc, #88]	; (80201bc <tcp_receive+0x4d4>)
 8020162:	4814      	ldr	r0, [pc, #80]	; (80201b4 <tcp_receive+0x4cc>)
 8020164:	f005 fa84 	bl	8025670 <iprintf>
    while (pcb->unsent != NULL &&
 8020168:	687b      	ldr	r3, [r7, #4]
 802016a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802016c:	2b00      	cmp	r3, #0
 802016e:	d037      	beq.n	80201e0 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8020170:	4b13      	ldr	r3, [pc, #76]	; (80201c0 <tcp_receive+0x4d8>)
 8020172:	681c      	ldr	r4, [r3, #0]
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020178:	68db      	ldr	r3, [r3, #12]
 802017a:	685b      	ldr	r3, [r3, #4]
 802017c:	4618      	mov	r0, r3
 802017e:	f7f9 f8f9 	bl	8019374 <lwip_htonl>
 8020182:	4605      	mov	r5, r0
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020188:	891b      	ldrh	r3, [r3, #8]
 802018a:	461e      	mov	r6, r3
 802018c:	687b      	ldr	r3, [r7, #4]
 802018e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020190:	68db      	ldr	r3, [r3, #12]
 8020192:	899b      	ldrh	r3, [r3, #12]
 8020194:	b29b      	uxth	r3, r3
 8020196:	4618      	mov	r0, r3
 8020198:	f7f9 f8de 	bl	8019358 <lwip_htons>
 802019c:	4603      	mov	r3, r0
 802019e:	f003 0303 	and.w	r3, r3, #3
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d00e      	beq.n	80201c4 <tcp_receive+0x4dc>
 80201a6:	2301      	movs	r3, #1
 80201a8:	e00d      	b.n	80201c6 <tcp_receive+0x4de>
 80201aa:	bf00      	nop
 80201ac:	08027fbc 	.word	0x08027fbc
 80201b0:	080281fc 	.word	0x080281fc
 80201b4:	08028000 	.word	0x08028000
 80201b8:	20004114 	.word	0x20004114
 80201bc:	08028224 	.word	0x08028224
 80201c0:	20004110 	.word	0x20004110
 80201c4:	2300      	movs	r3, #0
 80201c6:	4433      	add	r3, r6
 80201c8:	442b      	add	r3, r5
 80201ca:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80201cc:	2b00      	cmp	r3, #0
 80201ce:	db07      	blt.n	80201e0 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80201d0:	4b8d      	ldr	r3, [pc, #564]	; (8020408 <tcp_receive+0x720>)
 80201d2:	681a      	ldr	r2, [r3, #0]
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80201d8:	1ad3      	subs	r3, r2, r3
 80201da:	2b00      	cmp	r3, #0
 80201dc:	f77f af74 	ble.w	80200c8 <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80201e0:	687b      	ldr	r3, [r7, #4]
 80201e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80201e6:	4b89      	ldr	r3, [pc, #548]	; (802040c <tcp_receive+0x724>)
 80201e8:	881b      	ldrh	r3, [r3, #0]
 80201ea:	4413      	add	r3, r2
 80201ec:	b29a      	uxth	r2, r3
 80201ee:	687b      	ldr	r3, [r7, #4]
 80201f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80201f8:	2b00      	cmp	r3, #0
 80201fa:	d052      	beq.n	80202a2 <tcp_receive+0x5ba>
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020200:	4b81      	ldr	r3, [pc, #516]	; (8020408 <tcp_receive+0x720>)
 8020202:	681b      	ldr	r3, [r3, #0]
 8020204:	1ad3      	subs	r3, r2, r3
 8020206:	2b00      	cmp	r3, #0
 8020208:	da4b      	bge.n	80202a2 <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 802020a:	4b81      	ldr	r3, [pc, #516]	; (8020410 <tcp_receive+0x728>)
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	b29a      	uxth	r2, r3
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020214:	b29b      	uxth	r3, r3
 8020216:	1ad3      	subs	r3, r2, r3
 8020218:	b29b      	uxth	r3, r3
 802021a:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 802021c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802021e:	687b      	ldr	r3, [r7, #4]
 8020220:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020224:	10db      	asrs	r3, r3, #3
 8020226:	b21b      	sxth	r3, r3
 8020228:	b29b      	uxth	r3, r3
 802022a:	1ad3      	subs	r3, r2, r3
 802022c:	b29b      	uxth	r3, r3
 802022e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8020230:	687b      	ldr	r3, [r7, #4]
 8020232:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020236:	b29a      	uxth	r2, r3
 8020238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802023a:	4413      	add	r3, r2
 802023c:	b29b      	uxth	r3, r3
 802023e:	b21a      	sxth	r2, r3
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8020244:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020248:	2b00      	cmp	r3, #0
 802024a:	da03      	bge.n	8020254 <tcp_receive+0x56c>
        m = -m;
 802024c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802024e:	425b      	negs	r3, r3
 8020250:	b29b      	uxth	r3, r3
 8020252:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8020254:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802025c:	109b      	asrs	r3, r3, #2
 802025e:	b21b      	sxth	r3, r3
 8020260:	b29b      	uxth	r3, r3
 8020262:	1ad3      	subs	r3, r2, r3
 8020264:	b29b      	uxth	r3, r3
 8020266:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802026e:	b29a      	uxth	r2, r3
 8020270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020272:	4413      	add	r3, r2
 8020274:	b29b      	uxth	r3, r3
 8020276:	b21a      	sxth	r2, r3
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020282:	10db      	asrs	r3, r3, #3
 8020284:	b21b      	sxth	r3, r3
 8020286:	b29a      	uxth	r2, r3
 8020288:	687b      	ldr	r3, [r7, #4]
 802028a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 802028e:	b29b      	uxth	r3, r3
 8020290:	4413      	add	r3, r2
 8020292:	b29b      	uxth	r3, r3
 8020294:	b21a      	sxth	r2, r3
 8020296:	687b      	ldr	r3, [r7, #4]
 8020298:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	2200      	movs	r2, #0
 80202a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80202a2:	4b5c      	ldr	r3, [pc, #368]	; (8020414 <tcp_receive+0x72c>)
 80202a4:	881b      	ldrh	r3, [r3, #0]
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	f000 84ee 	beq.w	8020c88 <tcp_receive+0xfa0>
 80202ac:	687b      	ldr	r3, [r7, #4]
 80202ae:	7d1b      	ldrb	r3, [r3, #20]
 80202b0:	2b06      	cmp	r3, #6
 80202b2:	f200 84e9 	bhi.w	8020c88 <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80202ba:	4b57      	ldr	r3, [pc, #348]	; (8020418 <tcp_receive+0x730>)
 80202bc:	681b      	ldr	r3, [r3, #0]
 80202be:	1ad3      	subs	r3, r2, r3
 80202c0:	3b01      	subs	r3, #1
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	f2c0 80b8 	blt.w	8020438 <tcp_receive+0x750>
 80202c8:	687b      	ldr	r3, [r7, #4]
 80202ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80202cc:	4b51      	ldr	r3, [pc, #324]	; (8020414 <tcp_receive+0x72c>)
 80202ce:	881b      	ldrh	r3, [r3, #0]
 80202d0:	4619      	mov	r1, r3
 80202d2:	4b51      	ldr	r3, [pc, #324]	; (8020418 <tcp_receive+0x730>)
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	440b      	add	r3, r1
 80202d8:	1ad3      	subs	r3, r2, r3
 80202da:	3301      	adds	r3, #1
 80202dc:	2b00      	cmp	r3, #0
 80202de:	f300 80ab 	bgt.w	8020438 <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80202e2:	4b4e      	ldr	r3, [pc, #312]	; (802041c <tcp_receive+0x734>)
 80202e4:	685b      	ldr	r3, [r3, #4]
 80202e6:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80202e8:	687b      	ldr	r3, [r7, #4]
 80202ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80202ec:	4b4a      	ldr	r3, [pc, #296]	; (8020418 <tcp_receive+0x730>)
 80202ee:	681b      	ldr	r3, [r3, #0]
 80202f0:	1ad3      	subs	r3, r2, r3
 80202f2:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80202f4:	4b49      	ldr	r3, [pc, #292]	; (802041c <tcp_receive+0x734>)
 80202f6:	685b      	ldr	r3, [r3, #4]
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	d106      	bne.n	802030a <tcp_receive+0x622>
 80202fc:	4b48      	ldr	r3, [pc, #288]	; (8020420 <tcp_receive+0x738>)
 80202fe:	f240 523c 	movw	r2, #1340	; 0x53c
 8020302:	4948      	ldr	r1, [pc, #288]	; (8020424 <tcp_receive+0x73c>)
 8020304:	4848      	ldr	r0, [pc, #288]	; (8020428 <tcp_receive+0x740>)
 8020306:	f005 f9b3 	bl	8025670 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 802030a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802030c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8020310:	4293      	cmp	r3, r2
 8020312:	dd06      	ble.n	8020322 <tcp_receive+0x63a>
 8020314:	4b42      	ldr	r3, [pc, #264]	; (8020420 <tcp_receive+0x738>)
 8020316:	f240 523d 	movw	r2, #1341	; 0x53d
 802031a:	4944      	ldr	r1, [pc, #272]	; (802042c <tcp_receive+0x744>)
 802031c:	4842      	ldr	r0, [pc, #264]	; (8020428 <tcp_receive+0x740>)
 802031e:	f005 f9a7 	bl	8025670 <iprintf>
      if (inseg.p->len < off) {
 8020322:	4b3e      	ldr	r3, [pc, #248]	; (802041c <tcp_receive+0x734>)
 8020324:	685b      	ldr	r3, [r3, #4]
 8020326:	895b      	ldrh	r3, [r3, #10]
 8020328:	461a      	mov	r2, r3
 802032a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802032c:	429a      	cmp	r2, r3
 802032e:	da3e      	bge.n	80203ae <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8020330:	4b3a      	ldr	r3, [pc, #232]	; (802041c <tcp_receive+0x734>)
 8020332:	685b      	ldr	r3, [r3, #4]
 8020334:	891b      	ldrh	r3, [r3, #8]
 8020336:	461a      	mov	r2, r3
 8020338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802033a:	429a      	cmp	r2, r3
 802033c:	da06      	bge.n	802034c <tcp_receive+0x664>
 802033e:	4b38      	ldr	r3, [pc, #224]	; (8020420 <tcp_receive+0x738>)
 8020340:	f240 523f 	movw	r2, #1343	; 0x53f
 8020344:	493a      	ldr	r1, [pc, #232]	; (8020430 <tcp_receive+0x748>)
 8020346:	4838      	ldr	r0, [pc, #224]	; (8020428 <tcp_receive+0x740>)
 8020348:	f005 f992 	bl	8025670 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 802034c:	4b33      	ldr	r3, [pc, #204]	; (802041c <tcp_receive+0x734>)
 802034e:	685b      	ldr	r3, [r3, #4]
 8020350:	891a      	ldrh	r2, [r3, #8]
 8020352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020354:	b29b      	uxth	r3, r3
 8020356:	1ad3      	subs	r3, r2, r3
 8020358:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 802035a:	e00e      	b.n	802037a <tcp_receive+0x692>
          off -= p->len;
 802035c:	69bb      	ldr	r3, [r7, #24]
 802035e:	895b      	ldrh	r3, [r3, #10]
 8020360:	461a      	mov	r2, r3
 8020362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020364:	1a9b      	subs	r3, r3, r2
 8020366:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8020368:	69bb      	ldr	r3, [r7, #24]
 802036a:	8a3a      	ldrh	r2, [r7, #16]
 802036c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 802036e:	69bb      	ldr	r3, [r7, #24]
 8020370:	2200      	movs	r2, #0
 8020372:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8020374:	69bb      	ldr	r3, [r7, #24]
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 802037a:	69bb      	ldr	r3, [r7, #24]
 802037c:	895b      	ldrh	r3, [r3, #10]
 802037e:	461a      	mov	r2, r3
 8020380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020382:	429a      	cmp	r2, r3
 8020384:	dbea      	blt.n	802035c <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8020386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020388:	b29b      	uxth	r3, r3
 802038a:	425b      	negs	r3, r3
 802038c:	b29b      	uxth	r3, r3
 802038e:	b21b      	sxth	r3, r3
 8020390:	4619      	mov	r1, r3
 8020392:	69b8      	ldr	r0, [r7, #24]
 8020394:	f7fc fc4c 	bl	801cc30 <pbuf_header>
 8020398:	4603      	mov	r3, r0
 802039a:	2b00      	cmp	r3, #0
 802039c:	d01c      	beq.n	80203d8 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 802039e:	4b20      	ldr	r3, [pc, #128]	; (8020420 <tcp_receive+0x738>)
 80203a0:	f240 524c 	movw	r2, #1356	; 0x54c
 80203a4:	4923      	ldr	r1, [pc, #140]	; (8020434 <tcp_receive+0x74c>)
 80203a6:	4820      	ldr	r0, [pc, #128]	; (8020428 <tcp_receive+0x740>)
 80203a8:	f005 f962 	bl	8025670 <iprintf>
 80203ac:	e014      	b.n	80203d8 <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80203ae:	4b1b      	ldr	r3, [pc, #108]	; (802041c <tcp_receive+0x734>)
 80203b0:	685b      	ldr	r3, [r3, #4]
 80203b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80203b4:	b292      	uxth	r2, r2
 80203b6:	4252      	negs	r2, r2
 80203b8:	b292      	uxth	r2, r2
 80203ba:	b212      	sxth	r2, r2
 80203bc:	4611      	mov	r1, r2
 80203be:	4618      	mov	r0, r3
 80203c0:	f7fc fc36 	bl	801cc30 <pbuf_header>
 80203c4:	4603      	mov	r3, r0
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	d006      	beq.n	80203d8 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80203ca:	4b15      	ldr	r3, [pc, #84]	; (8020420 <tcp_receive+0x738>)
 80203cc:	f240 5251 	movw	r2, #1361	; 0x551
 80203d0:	4918      	ldr	r1, [pc, #96]	; (8020434 <tcp_receive+0x74c>)
 80203d2:	4815      	ldr	r0, [pc, #84]	; (8020428 <tcp_receive+0x740>)
 80203d4:	f005 f94c 	bl	8025670 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80203d8:	4b10      	ldr	r3, [pc, #64]	; (802041c <tcp_receive+0x734>)
 80203da:	891a      	ldrh	r2, [r3, #8]
 80203dc:	4b0e      	ldr	r3, [pc, #56]	; (8020418 <tcp_receive+0x730>)
 80203de:	681b      	ldr	r3, [r3, #0]
 80203e0:	b299      	uxth	r1, r3
 80203e2:	687b      	ldr	r3, [r7, #4]
 80203e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203e6:	b29b      	uxth	r3, r3
 80203e8:	1acb      	subs	r3, r1, r3
 80203ea:	b29b      	uxth	r3, r3
 80203ec:	4413      	add	r3, r2
 80203ee:	b29a      	uxth	r2, r3
 80203f0:	4b0a      	ldr	r3, [pc, #40]	; (802041c <tcp_receive+0x734>)
 80203f2:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80203f4:	4b09      	ldr	r3, [pc, #36]	; (802041c <tcp_receive+0x734>)
 80203f6:	68db      	ldr	r3, [r3, #12]
 80203f8:	687a      	ldr	r2, [r7, #4]
 80203fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80203fc:	4906      	ldr	r1, [pc, #24]	; (8020418 <tcp_receive+0x730>)
 80203fe:	600a      	str	r2, [r1, #0]
 8020400:	4a05      	ldr	r2, [pc, #20]	; (8020418 <tcp_receive+0x730>)
 8020402:	6812      	ldr	r2, [r2, #0]
 8020404:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8020406:	e025      	b.n	8020454 <tcp_receive+0x76c>
 8020408:	20004110 	.word	0x20004110
 802040c:	20004114 	.word	0x20004114
 8020410:	20008c28 	.word	0x20008c28
 8020414:	20004116 	.word	0x20004116
 8020418:	2000410c 	.word	0x2000410c
 802041c:	200040ec 	.word	0x200040ec
 8020420:	08027fbc 	.word	0x08027fbc
 8020424:	08028244 	.word	0x08028244
 8020428:	08028000 	.word	0x08028000
 802042c:	08028254 	.word	0x08028254
 8020430:	08028264 	.word	0x08028264
 8020434:	08028274 	.word	0x08028274
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8020438:	4b86      	ldr	r3, [pc, #536]	; (8020654 <tcp_receive+0x96c>)
 802043a:	681a      	ldr	r2, [r3, #0]
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020440:	1ad3      	subs	r3, r2, r3
 8020442:	2b00      	cmp	r3, #0
 8020444:	da06      	bge.n	8020454 <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	7e9b      	ldrb	r3, [r3, #26]
 802044a:	f043 0302 	orr.w	r3, r3, #2
 802044e:	b2da      	uxtb	r2, r3
 8020450:	687b      	ldr	r3, [r7, #4]
 8020452:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020454:	4b7f      	ldr	r3, [pc, #508]	; (8020654 <tcp_receive+0x96c>)
 8020456:	681a      	ldr	r2, [r3, #0]
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802045c:	1ad3      	subs	r3, r2, r3
 802045e:	2b00      	cmp	r3, #0
 8020460:	f2c0 840d 	blt.w	8020c7e <tcp_receive+0xf96>
 8020464:	4b7b      	ldr	r3, [pc, #492]	; (8020654 <tcp_receive+0x96c>)
 8020466:	681a      	ldr	r2, [r3, #0]
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802046c:	6879      	ldr	r1, [r7, #4]
 802046e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020470:	440b      	add	r3, r1
 8020472:	1ad3      	subs	r3, r2, r3
 8020474:	3301      	adds	r3, #1
 8020476:	2b00      	cmp	r3, #0
 8020478:	f300 8401 	bgt.w	8020c7e <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 802047c:	687b      	ldr	r3, [r7, #4]
 802047e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020480:	4b74      	ldr	r3, [pc, #464]	; (8020654 <tcp_receive+0x96c>)
 8020482:	681b      	ldr	r3, [r3, #0]
 8020484:	429a      	cmp	r2, r3
 8020486:	f040 8285 	bne.w	8020994 <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 802048a:	4b73      	ldr	r3, [pc, #460]	; (8020658 <tcp_receive+0x970>)
 802048c:	891c      	ldrh	r4, [r3, #8]
 802048e:	4b72      	ldr	r3, [pc, #456]	; (8020658 <tcp_receive+0x970>)
 8020490:	68db      	ldr	r3, [r3, #12]
 8020492:	899b      	ldrh	r3, [r3, #12]
 8020494:	b29b      	uxth	r3, r3
 8020496:	4618      	mov	r0, r3
 8020498:	f7f8 ff5e 	bl	8019358 <lwip_htons>
 802049c:	4603      	mov	r3, r0
 802049e:	f003 0303 	and.w	r3, r3, #3
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	d001      	beq.n	80204aa <tcp_receive+0x7c2>
 80204a6:	2301      	movs	r3, #1
 80204a8:	e000      	b.n	80204ac <tcp_receive+0x7c4>
 80204aa:	2300      	movs	r3, #0
 80204ac:	4423      	add	r3, r4
 80204ae:	b29a      	uxth	r2, r3
 80204b0:	4b6a      	ldr	r3, [pc, #424]	; (802065c <tcp_receive+0x974>)
 80204b2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80204b4:	687b      	ldr	r3, [r7, #4]
 80204b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80204b8:	4b68      	ldr	r3, [pc, #416]	; (802065c <tcp_receive+0x974>)
 80204ba:	881b      	ldrh	r3, [r3, #0]
 80204bc:	429a      	cmp	r2, r3
 80204be:	d26d      	bcs.n	802059c <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80204c0:	4b65      	ldr	r3, [pc, #404]	; (8020658 <tcp_receive+0x970>)
 80204c2:	68db      	ldr	r3, [r3, #12]
 80204c4:	899b      	ldrh	r3, [r3, #12]
 80204c6:	b29b      	uxth	r3, r3
 80204c8:	4618      	mov	r0, r3
 80204ca:	f7f8 ff45 	bl	8019358 <lwip_htons>
 80204ce:	4603      	mov	r3, r0
 80204d0:	f003 0301 	and.w	r3, r3, #1
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	d01a      	beq.n	802050e <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80204d8:	4b5f      	ldr	r3, [pc, #380]	; (8020658 <tcp_receive+0x970>)
 80204da:	68dc      	ldr	r4, [r3, #12]
 80204dc:	4b5e      	ldr	r3, [pc, #376]	; (8020658 <tcp_receive+0x970>)
 80204de:	68db      	ldr	r3, [r3, #12]
 80204e0:	899b      	ldrh	r3, [r3, #12]
 80204e2:	b29b      	uxth	r3, r3
 80204e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80204e8:	b29d      	uxth	r5, r3
 80204ea:	4b5b      	ldr	r3, [pc, #364]	; (8020658 <tcp_receive+0x970>)
 80204ec:	68db      	ldr	r3, [r3, #12]
 80204ee:	899b      	ldrh	r3, [r3, #12]
 80204f0:	b29b      	uxth	r3, r3
 80204f2:	4618      	mov	r0, r3
 80204f4:	f7f8 ff30 	bl	8019358 <lwip_htons>
 80204f8:	4603      	mov	r3, r0
 80204fa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80204fe:	b29b      	uxth	r3, r3
 8020500:	4618      	mov	r0, r3
 8020502:	f7f8 ff29 	bl	8019358 <lwip_htons>
 8020506:	4603      	mov	r3, r0
 8020508:	432b      	orrs	r3, r5
 802050a:	b29b      	uxth	r3, r3
 802050c:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 802050e:	687b      	ldr	r3, [r7, #4]
 8020510:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020512:	4b51      	ldr	r3, [pc, #324]	; (8020658 <tcp_receive+0x970>)
 8020514:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8020516:	4b50      	ldr	r3, [pc, #320]	; (8020658 <tcp_receive+0x970>)
 8020518:	68db      	ldr	r3, [r3, #12]
 802051a:	899b      	ldrh	r3, [r3, #12]
 802051c:	b29b      	uxth	r3, r3
 802051e:	4618      	mov	r0, r3
 8020520:	f7f8 ff1a 	bl	8019358 <lwip_htons>
 8020524:	4603      	mov	r3, r0
 8020526:	f003 0302 	and.w	r3, r3, #2
 802052a:	2b00      	cmp	r3, #0
 802052c:	d005      	beq.n	802053a <tcp_receive+0x852>
            inseg.len -= 1;
 802052e:	4b4a      	ldr	r3, [pc, #296]	; (8020658 <tcp_receive+0x970>)
 8020530:	891b      	ldrh	r3, [r3, #8]
 8020532:	3b01      	subs	r3, #1
 8020534:	b29a      	uxth	r2, r3
 8020536:	4b48      	ldr	r3, [pc, #288]	; (8020658 <tcp_receive+0x970>)
 8020538:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 802053a:	4b47      	ldr	r3, [pc, #284]	; (8020658 <tcp_receive+0x970>)
 802053c:	685a      	ldr	r2, [r3, #4]
 802053e:	4b46      	ldr	r3, [pc, #280]	; (8020658 <tcp_receive+0x970>)
 8020540:	891b      	ldrh	r3, [r3, #8]
 8020542:	4619      	mov	r1, r3
 8020544:	4610      	mov	r0, r2
 8020546:	f7fc fa23 	bl	801c990 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 802054a:	4b43      	ldr	r3, [pc, #268]	; (8020658 <tcp_receive+0x970>)
 802054c:	891c      	ldrh	r4, [r3, #8]
 802054e:	4b42      	ldr	r3, [pc, #264]	; (8020658 <tcp_receive+0x970>)
 8020550:	68db      	ldr	r3, [r3, #12]
 8020552:	899b      	ldrh	r3, [r3, #12]
 8020554:	b29b      	uxth	r3, r3
 8020556:	4618      	mov	r0, r3
 8020558:	f7f8 fefe 	bl	8019358 <lwip_htons>
 802055c:	4603      	mov	r3, r0
 802055e:	f003 0303 	and.w	r3, r3, #3
 8020562:	2b00      	cmp	r3, #0
 8020564:	d001      	beq.n	802056a <tcp_receive+0x882>
 8020566:	2301      	movs	r3, #1
 8020568:	e000      	b.n	802056c <tcp_receive+0x884>
 802056a:	2300      	movs	r3, #0
 802056c:	4423      	add	r3, r4
 802056e:	b29a      	uxth	r2, r3
 8020570:	4b3a      	ldr	r3, [pc, #232]	; (802065c <tcp_receive+0x974>)
 8020572:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8020574:	4b39      	ldr	r3, [pc, #228]	; (802065c <tcp_receive+0x974>)
 8020576:	881b      	ldrh	r3, [r3, #0]
 8020578:	461a      	mov	r2, r3
 802057a:	4b36      	ldr	r3, [pc, #216]	; (8020654 <tcp_receive+0x96c>)
 802057c:	681b      	ldr	r3, [r3, #0]
 802057e:	441a      	add	r2, r3
 8020580:	687b      	ldr	r3, [r7, #4]
 8020582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020584:	6879      	ldr	r1, [r7, #4]
 8020586:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020588:	440b      	add	r3, r1
 802058a:	429a      	cmp	r2, r3
 802058c:	d006      	beq.n	802059c <tcp_receive+0x8b4>
 802058e:	4b34      	ldr	r3, [pc, #208]	; (8020660 <tcp_receive+0x978>)
 8020590:	f240 527f 	movw	r2, #1407	; 0x57f
 8020594:	4933      	ldr	r1, [pc, #204]	; (8020664 <tcp_receive+0x97c>)
 8020596:	4834      	ldr	r0, [pc, #208]	; (8020668 <tcp_receive+0x980>)
 8020598:	f005 f86a 	bl	8025670 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	f000 80e0 	beq.w	8020766 <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80205a6:	4b2c      	ldr	r3, [pc, #176]	; (8020658 <tcp_receive+0x970>)
 80205a8:	68db      	ldr	r3, [r3, #12]
 80205aa:	899b      	ldrh	r3, [r3, #12]
 80205ac:	b29b      	uxth	r3, r3
 80205ae:	4618      	mov	r0, r3
 80205b0:	f7f8 fed2 	bl	8019358 <lwip_htons>
 80205b4:	4603      	mov	r3, r0
 80205b6:	f003 0301 	and.w	r3, r3, #1
 80205ba:	2b00      	cmp	r3, #0
 80205bc:	d010      	beq.n	80205e0 <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80205be:	e00a      	b.n	80205d6 <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80205c0:	687b      	ldr	r3, [r7, #4]
 80205c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205c4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205ca:	681a      	ldr	r2, [r3, #0]
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80205d0:	68f8      	ldr	r0, [r7, #12]
 80205d2:	f7fd fe6c 	bl	801e2ae <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80205d6:	687b      	ldr	r3, [r7, #4]
 80205d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205da:	2b00      	cmp	r3, #0
 80205dc:	d1f0      	bne.n	80205c0 <tcp_receive+0x8d8>
 80205de:	e0c2      	b.n	8020766 <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80205e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80205e6:	e04e      	b.n	8020686 <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80205e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205ea:	68db      	ldr	r3, [r3, #12]
 80205ec:	899b      	ldrh	r3, [r3, #12]
 80205ee:	b29b      	uxth	r3, r3
 80205f0:	4618      	mov	r0, r3
 80205f2:	f7f8 feb1 	bl	8019358 <lwip_htons>
 80205f6:	4603      	mov	r3, r0
 80205f8:	f003 0301 	and.w	r3, r3, #1
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d03a      	beq.n	8020676 <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8020600:	4b15      	ldr	r3, [pc, #84]	; (8020658 <tcp_receive+0x970>)
 8020602:	68db      	ldr	r3, [r3, #12]
 8020604:	899b      	ldrh	r3, [r3, #12]
 8020606:	b29b      	uxth	r3, r3
 8020608:	4618      	mov	r0, r3
 802060a:	f7f8 fea5 	bl	8019358 <lwip_htons>
 802060e:	4603      	mov	r3, r0
 8020610:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8020614:	2b00      	cmp	r3, #0
 8020616:	d12e      	bne.n	8020676 <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8020618:	4b0f      	ldr	r3, [pc, #60]	; (8020658 <tcp_receive+0x970>)
 802061a:	68dc      	ldr	r4, [r3, #12]
 802061c:	4b0e      	ldr	r3, [pc, #56]	; (8020658 <tcp_receive+0x970>)
 802061e:	68db      	ldr	r3, [r3, #12]
 8020620:	899b      	ldrh	r3, [r3, #12]
 8020622:	b29d      	uxth	r5, r3
 8020624:	2001      	movs	r0, #1
 8020626:	f7f8 fe97 	bl	8019358 <lwip_htons>
 802062a:	4603      	mov	r3, r0
 802062c:	432b      	orrs	r3, r5
 802062e:	b29b      	uxth	r3, r3
 8020630:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8020632:	4b09      	ldr	r3, [pc, #36]	; (8020658 <tcp_receive+0x970>)
 8020634:	891c      	ldrh	r4, [r3, #8]
 8020636:	4b08      	ldr	r3, [pc, #32]	; (8020658 <tcp_receive+0x970>)
 8020638:	68db      	ldr	r3, [r3, #12]
 802063a:	899b      	ldrh	r3, [r3, #12]
 802063c:	b29b      	uxth	r3, r3
 802063e:	4618      	mov	r0, r3
 8020640:	f7f8 fe8a 	bl	8019358 <lwip_htons>
 8020644:	4603      	mov	r3, r0
 8020646:	f003 0303 	and.w	r3, r3, #3
 802064a:	2b00      	cmp	r3, #0
 802064c:	d00e      	beq.n	802066c <tcp_receive+0x984>
 802064e:	2301      	movs	r3, #1
 8020650:	e00d      	b.n	802066e <tcp_receive+0x986>
 8020652:	bf00      	nop
 8020654:	2000410c 	.word	0x2000410c
 8020658:	200040ec 	.word	0x200040ec
 802065c:	20004116 	.word	0x20004116
 8020660:	08027fbc 	.word	0x08027fbc
 8020664:	08028288 	.word	0x08028288
 8020668:	08028000 	.word	0x08028000
 802066c:	2300      	movs	r3, #0
 802066e:	4423      	add	r3, r4
 8020670:	b29a      	uxth	r2, r3
 8020672:	4b95      	ldr	r3, [pc, #596]	; (80208c8 <tcp_receive+0xbe0>)
 8020674:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8020676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020678:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 802067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8020680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020682:	f7fd fe14 	bl	801e2ae <tcp_seg_free>
            while (next &&
 8020686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020688:	2b00      	cmp	r3, #0
 802068a:	d00e      	beq.n	80206aa <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 802068c:	4b8e      	ldr	r3, [pc, #568]	; (80208c8 <tcp_receive+0xbe0>)
 802068e:	881b      	ldrh	r3, [r3, #0]
 8020690:	461a      	mov	r2, r3
 8020692:	4b8e      	ldr	r3, [pc, #568]	; (80208cc <tcp_receive+0xbe4>)
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	441a      	add	r2, r3
 8020698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802069a:	68db      	ldr	r3, [r3, #12]
 802069c:	685b      	ldr	r3, [r3, #4]
 802069e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80206a0:	8909      	ldrh	r1, [r1, #8]
 80206a2:	440b      	add	r3, r1
 80206a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	da9e      	bge.n	80205e8 <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80206aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	d057      	beq.n	8020760 <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 80206b0:	4b85      	ldr	r3, [pc, #532]	; (80208c8 <tcp_receive+0xbe0>)
 80206b2:	881b      	ldrh	r3, [r3, #0]
 80206b4:	461a      	mov	r2, r3
 80206b6:	4b85      	ldr	r3, [pc, #532]	; (80208cc <tcp_receive+0xbe4>)
 80206b8:	681b      	ldr	r3, [r3, #0]
 80206ba:	441a      	add	r2, r3
 80206bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206be:	68db      	ldr	r3, [r3, #12]
 80206c0:	685b      	ldr	r3, [r3, #4]
 80206c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80206c4:	2b00      	cmp	r3, #0
 80206c6:	dd4b      	ble.n	8020760 <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80206c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206ca:	68db      	ldr	r3, [r3, #12]
 80206cc:	685b      	ldr	r3, [r3, #4]
 80206ce:	b29a      	uxth	r2, r3
 80206d0:	4b7e      	ldr	r3, [pc, #504]	; (80208cc <tcp_receive+0xbe4>)
 80206d2:	681b      	ldr	r3, [r3, #0]
 80206d4:	b29b      	uxth	r3, r3
 80206d6:	1ad3      	subs	r3, r2, r3
 80206d8:	b29a      	uxth	r2, r3
 80206da:	4b7d      	ldr	r3, [pc, #500]	; (80208d0 <tcp_receive+0xbe8>)
 80206dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80206de:	4b7c      	ldr	r3, [pc, #496]	; (80208d0 <tcp_receive+0xbe8>)
 80206e0:	68db      	ldr	r3, [r3, #12]
 80206e2:	899b      	ldrh	r3, [r3, #12]
 80206e4:	b29b      	uxth	r3, r3
 80206e6:	4618      	mov	r0, r3
 80206e8:	f7f8 fe36 	bl	8019358 <lwip_htons>
 80206ec:	4603      	mov	r3, r0
 80206ee:	f003 0302 	and.w	r3, r3, #2
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	d005      	beq.n	8020702 <tcp_receive+0xa1a>
                inseg.len -= 1;
 80206f6:	4b76      	ldr	r3, [pc, #472]	; (80208d0 <tcp_receive+0xbe8>)
 80206f8:	891b      	ldrh	r3, [r3, #8]
 80206fa:	3b01      	subs	r3, #1
 80206fc:	b29a      	uxth	r2, r3
 80206fe:	4b74      	ldr	r3, [pc, #464]	; (80208d0 <tcp_receive+0xbe8>)
 8020700:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8020702:	4b73      	ldr	r3, [pc, #460]	; (80208d0 <tcp_receive+0xbe8>)
 8020704:	685a      	ldr	r2, [r3, #4]
 8020706:	4b72      	ldr	r3, [pc, #456]	; (80208d0 <tcp_receive+0xbe8>)
 8020708:	891b      	ldrh	r3, [r3, #8]
 802070a:	4619      	mov	r1, r3
 802070c:	4610      	mov	r0, r2
 802070e:	f7fc f93f 	bl	801c990 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8020712:	4b6f      	ldr	r3, [pc, #444]	; (80208d0 <tcp_receive+0xbe8>)
 8020714:	891c      	ldrh	r4, [r3, #8]
 8020716:	4b6e      	ldr	r3, [pc, #440]	; (80208d0 <tcp_receive+0xbe8>)
 8020718:	68db      	ldr	r3, [r3, #12]
 802071a:	899b      	ldrh	r3, [r3, #12]
 802071c:	b29b      	uxth	r3, r3
 802071e:	4618      	mov	r0, r3
 8020720:	f7f8 fe1a 	bl	8019358 <lwip_htons>
 8020724:	4603      	mov	r3, r0
 8020726:	f003 0303 	and.w	r3, r3, #3
 802072a:	2b00      	cmp	r3, #0
 802072c:	d001      	beq.n	8020732 <tcp_receive+0xa4a>
 802072e:	2301      	movs	r3, #1
 8020730:	e000      	b.n	8020734 <tcp_receive+0xa4c>
 8020732:	2300      	movs	r3, #0
 8020734:	4423      	add	r3, r4
 8020736:	b29a      	uxth	r2, r3
 8020738:	4b63      	ldr	r3, [pc, #396]	; (80208c8 <tcp_receive+0xbe0>)
 802073a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 802073c:	4b62      	ldr	r3, [pc, #392]	; (80208c8 <tcp_receive+0xbe0>)
 802073e:	881b      	ldrh	r3, [r3, #0]
 8020740:	461a      	mov	r2, r3
 8020742:	4b62      	ldr	r3, [pc, #392]	; (80208cc <tcp_receive+0xbe4>)
 8020744:	681b      	ldr	r3, [r3, #0]
 8020746:	441a      	add	r2, r3
 8020748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802074a:	68db      	ldr	r3, [r3, #12]
 802074c:	685b      	ldr	r3, [r3, #4]
 802074e:	429a      	cmp	r2, r3
 8020750:	d006      	beq.n	8020760 <tcp_receive+0xa78>
 8020752:	4b60      	ldr	r3, [pc, #384]	; (80208d4 <tcp_receive+0xbec>)
 8020754:	f240 52af 	movw	r2, #1455	; 0x5af
 8020758:	495f      	ldr	r1, [pc, #380]	; (80208d8 <tcp_receive+0xbf0>)
 802075a:	4860      	ldr	r0, [pc, #384]	; (80208dc <tcp_receive+0xbf4>)
 802075c:	f004 ff88 	bl	8025670 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8020760:	687b      	ldr	r3, [r7, #4]
 8020762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020764:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8020766:	4b58      	ldr	r3, [pc, #352]	; (80208c8 <tcp_receive+0xbe0>)
 8020768:	881b      	ldrh	r3, [r3, #0]
 802076a:	461a      	mov	r2, r3
 802076c:	4b57      	ldr	r3, [pc, #348]	; (80208cc <tcp_receive+0xbe4>)
 802076e:	681b      	ldr	r3, [r3, #0]
 8020770:	441a      	add	r2, r3
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8020776:	687b      	ldr	r3, [r7, #4]
 8020778:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 802077a:	4b53      	ldr	r3, [pc, #332]	; (80208c8 <tcp_receive+0xbe0>)
 802077c:	881b      	ldrh	r3, [r3, #0]
 802077e:	429a      	cmp	r2, r3
 8020780:	d206      	bcs.n	8020790 <tcp_receive+0xaa8>
 8020782:	4b54      	ldr	r3, [pc, #336]	; (80208d4 <tcp_receive+0xbec>)
 8020784:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8020788:	4955      	ldr	r1, [pc, #340]	; (80208e0 <tcp_receive+0xbf8>)
 802078a:	4854      	ldr	r0, [pc, #336]	; (80208dc <tcp_receive+0xbf4>)
 802078c:	f004 ff70 	bl	8025670 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8020790:	687b      	ldr	r3, [r7, #4]
 8020792:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020794:	4b4c      	ldr	r3, [pc, #304]	; (80208c8 <tcp_receive+0xbe0>)
 8020796:	881b      	ldrh	r3, [r3, #0]
 8020798:	1ad3      	subs	r3, r2, r3
 802079a:	b29a      	uxth	r2, r3
 802079c:	687b      	ldr	r3, [r7, #4]
 802079e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80207a0:	6878      	ldr	r0, [r7, #4]
 80207a2:	f7fd f8f5 	bl	801d990 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80207a6:	4b4a      	ldr	r3, [pc, #296]	; (80208d0 <tcp_receive+0xbe8>)
 80207a8:	685b      	ldr	r3, [r3, #4]
 80207aa:	891b      	ldrh	r3, [r3, #8]
 80207ac:	2b00      	cmp	r3, #0
 80207ae:	d006      	beq.n	80207be <tcp_receive+0xad6>
          recv_data = inseg.p;
 80207b0:	4b47      	ldr	r3, [pc, #284]	; (80208d0 <tcp_receive+0xbe8>)
 80207b2:	685b      	ldr	r3, [r3, #4]
 80207b4:	4a4b      	ldr	r2, [pc, #300]	; (80208e4 <tcp_receive+0xbfc>)
 80207b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80207b8:	4b45      	ldr	r3, [pc, #276]	; (80208d0 <tcp_receive+0xbe8>)
 80207ba:	2200      	movs	r2, #0
 80207bc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80207be:	4b44      	ldr	r3, [pc, #272]	; (80208d0 <tcp_receive+0xbe8>)
 80207c0:	68db      	ldr	r3, [r3, #12]
 80207c2:	899b      	ldrh	r3, [r3, #12]
 80207c4:	b29b      	uxth	r3, r3
 80207c6:	4618      	mov	r0, r3
 80207c8:	f7f8 fdc6 	bl	8019358 <lwip_htons>
 80207cc:	4603      	mov	r3, r0
 80207ce:	f003 0301 	and.w	r3, r3, #1
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	f000 80b4 	beq.w	8020940 <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80207d8:	4b43      	ldr	r3, [pc, #268]	; (80208e8 <tcp_receive+0xc00>)
 80207da:	781b      	ldrb	r3, [r3, #0]
 80207dc:	f043 0320 	orr.w	r3, r3, #32
 80207e0:	b2da      	uxtb	r2, r3
 80207e2:	4b41      	ldr	r3, [pc, #260]	; (80208e8 <tcp_receive+0xc00>)
 80207e4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80207e6:	e0ab      	b.n	8020940 <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80207e8:	687b      	ldr	r3, [r7, #4]
 80207ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207ec:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207f2:	68db      	ldr	r3, [r3, #12]
 80207f4:	685b      	ldr	r3, [r3, #4]
 80207f6:	4a35      	ldr	r2, [pc, #212]	; (80208cc <tcp_receive+0xbe4>)
 80207f8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80207fa:	68bb      	ldr	r3, [r7, #8]
 80207fc:	891b      	ldrh	r3, [r3, #8]
 80207fe:	461c      	mov	r4, r3
 8020800:	68bb      	ldr	r3, [r7, #8]
 8020802:	68db      	ldr	r3, [r3, #12]
 8020804:	899b      	ldrh	r3, [r3, #12]
 8020806:	b29b      	uxth	r3, r3
 8020808:	4618      	mov	r0, r3
 802080a:	f7f8 fda5 	bl	8019358 <lwip_htons>
 802080e:	4603      	mov	r3, r0
 8020810:	f003 0303 	and.w	r3, r3, #3
 8020814:	2b00      	cmp	r3, #0
 8020816:	d001      	beq.n	802081c <tcp_receive+0xb34>
 8020818:	2301      	movs	r3, #1
 802081a:	e000      	b.n	802081e <tcp_receive+0xb36>
 802081c:	2300      	movs	r3, #0
 802081e:	4423      	add	r3, r4
 8020820:	687a      	ldr	r2, [r7, #4]
 8020822:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8020824:	441a      	add	r2, r3
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 802082a:	687b      	ldr	r3, [r7, #4]
 802082c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802082e:	461c      	mov	r4, r3
 8020830:	68bb      	ldr	r3, [r7, #8]
 8020832:	891b      	ldrh	r3, [r3, #8]
 8020834:	461d      	mov	r5, r3
 8020836:	68bb      	ldr	r3, [r7, #8]
 8020838:	68db      	ldr	r3, [r3, #12]
 802083a:	899b      	ldrh	r3, [r3, #12]
 802083c:	b29b      	uxth	r3, r3
 802083e:	4618      	mov	r0, r3
 8020840:	f7f8 fd8a 	bl	8019358 <lwip_htons>
 8020844:	4603      	mov	r3, r0
 8020846:	f003 0303 	and.w	r3, r3, #3
 802084a:	2b00      	cmp	r3, #0
 802084c:	d001      	beq.n	8020852 <tcp_receive+0xb6a>
 802084e:	2301      	movs	r3, #1
 8020850:	e000      	b.n	8020854 <tcp_receive+0xb6c>
 8020852:	2300      	movs	r3, #0
 8020854:	442b      	add	r3, r5
 8020856:	429c      	cmp	r4, r3
 8020858:	d206      	bcs.n	8020868 <tcp_receive+0xb80>
 802085a:	4b1e      	ldr	r3, [pc, #120]	; (80208d4 <tcp_receive+0xbec>)
 802085c:	f240 52de 	movw	r2, #1502	; 0x5de
 8020860:	4922      	ldr	r1, [pc, #136]	; (80208ec <tcp_receive+0xc04>)
 8020862:	481e      	ldr	r0, [pc, #120]	; (80208dc <tcp_receive+0xbf4>)
 8020864:	f004 ff04 	bl	8025670 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8020868:	68bb      	ldr	r3, [r7, #8]
 802086a:	891b      	ldrh	r3, [r3, #8]
 802086c:	461c      	mov	r4, r3
 802086e:	68bb      	ldr	r3, [r7, #8]
 8020870:	68db      	ldr	r3, [r3, #12]
 8020872:	899b      	ldrh	r3, [r3, #12]
 8020874:	b29b      	uxth	r3, r3
 8020876:	4618      	mov	r0, r3
 8020878:	f7f8 fd6e 	bl	8019358 <lwip_htons>
 802087c:	4603      	mov	r3, r0
 802087e:	f003 0303 	and.w	r3, r3, #3
 8020882:	2b00      	cmp	r3, #0
 8020884:	d001      	beq.n	802088a <tcp_receive+0xba2>
 8020886:	2301      	movs	r3, #1
 8020888:	e000      	b.n	802088c <tcp_receive+0xba4>
 802088a:	2300      	movs	r3, #0
 802088c:	18e1      	adds	r1, r4, r3
 802088e:	687b      	ldr	r3, [r7, #4]
 8020890:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020892:	b28b      	uxth	r3, r1
 8020894:	1ad3      	subs	r3, r2, r3
 8020896:	b29a      	uxth	r2, r3
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 802089c:	6878      	ldr	r0, [r7, #4]
 802089e:	f7fd f877 	bl	801d990 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80208a2:	68bb      	ldr	r3, [r7, #8]
 80208a4:	685b      	ldr	r3, [r3, #4]
 80208a6:	891b      	ldrh	r3, [r3, #8]
 80208a8:	2b00      	cmp	r3, #0
 80208aa:	d028      	beq.n	80208fe <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80208ac:	4b0d      	ldr	r3, [pc, #52]	; (80208e4 <tcp_receive+0xbfc>)
 80208ae:	681b      	ldr	r3, [r3, #0]
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d01d      	beq.n	80208f0 <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 80208b4:	4b0b      	ldr	r3, [pc, #44]	; (80208e4 <tcp_receive+0xbfc>)
 80208b6:	681a      	ldr	r2, [r3, #0]
 80208b8:	68bb      	ldr	r3, [r7, #8]
 80208ba:	685b      	ldr	r3, [r3, #4]
 80208bc:	4619      	mov	r1, r3
 80208be:	4610      	mov	r0, r2
 80208c0:	f7fc fab4 	bl	801ce2c <pbuf_cat>
 80208c4:	e018      	b.n	80208f8 <tcp_receive+0xc10>
 80208c6:	bf00      	nop
 80208c8:	20004116 	.word	0x20004116
 80208cc:	2000410c 	.word	0x2000410c
 80208d0:	200040ec 	.word	0x200040ec
 80208d4:	08027fbc 	.word	0x08027fbc
 80208d8:	080282c0 	.word	0x080282c0
 80208dc:	08028000 	.word	0x08028000
 80208e0:	080282fc 	.word	0x080282fc
 80208e4:	2000411c 	.word	0x2000411c
 80208e8:	20004119 	.word	0x20004119
 80208ec:	0802831c 	.word	0x0802831c
            } else {
              recv_data = cseg->p;
 80208f0:	68bb      	ldr	r3, [r7, #8]
 80208f2:	685b      	ldr	r3, [r3, #4]
 80208f4:	4a71      	ldr	r2, [pc, #452]	; (8020abc <tcp_receive+0xdd4>)
 80208f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80208f8:	68bb      	ldr	r3, [r7, #8]
 80208fa:	2200      	movs	r2, #0
 80208fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80208fe:	68bb      	ldr	r3, [r7, #8]
 8020900:	68db      	ldr	r3, [r3, #12]
 8020902:	899b      	ldrh	r3, [r3, #12]
 8020904:	b29b      	uxth	r3, r3
 8020906:	4618      	mov	r0, r3
 8020908:	f7f8 fd26 	bl	8019358 <lwip_htons>
 802090c:	4603      	mov	r3, r0
 802090e:	f003 0301 	and.w	r3, r3, #1
 8020912:	2b00      	cmp	r3, #0
 8020914:	d00d      	beq.n	8020932 <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8020916:	4b6a      	ldr	r3, [pc, #424]	; (8020ac0 <tcp_receive+0xdd8>)
 8020918:	781b      	ldrb	r3, [r3, #0]
 802091a:	f043 0320 	orr.w	r3, r3, #32
 802091e:	b2da      	uxtb	r2, r3
 8020920:	4b67      	ldr	r3, [pc, #412]	; (8020ac0 <tcp_receive+0xdd8>)
 8020922:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	7d1b      	ldrb	r3, [r3, #20]
 8020928:	2b04      	cmp	r3, #4
 802092a:	d102      	bne.n	8020932 <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 802092c:	687b      	ldr	r3, [r7, #4]
 802092e:	2207      	movs	r2, #7
 8020930:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8020932:	68bb      	ldr	r3, [r7, #8]
 8020934:	681a      	ldr	r2, [r3, #0]
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 802093a:	68b8      	ldr	r0, [r7, #8]
 802093c:	f7fd fcb7 	bl	801e2ae <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8020940:	687b      	ldr	r3, [r7, #4]
 8020942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020944:	2b00      	cmp	r3, #0
 8020946:	d008      	beq.n	802095a <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8020948:	687b      	ldr	r3, [r7, #4]
 802094a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802094c:	68db      	ldr	r3, [r3, #12]
 802094e:	685a      	ldr	r2, [r3, #4]
 8020950:	687b      	ldr	r3, [r7, #4]
 8020952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8020954:	429a      	cmp	r2, r3
 8020956:	f43f af47 	beq.w	80207e8 <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	7e9b      	ldrb	r3, [r3, #26]
 802095e:	f003 0301 	and.w	r3, r3, #1
 8020962:	2b00      	cmp	r3, #0
 8020964:	d00e      	beq.n	8020984 <tcp_receive+0xc9c>
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	7e9b      	ldrb	r3, [r3, #26]
 802096a:	f023 0301 	bic.w	r3, r3, #1
 802096e:	b2da      	uxtb	r2, r3
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	769a      	strb	r2, [r3, #26]
 8020974:	687b      	ldr	r3, [r7, #4]
 8020976:	7e9b      	ldrb	r3, [r3, #26]
 8020978:	f043 0302 	orr.w	r3, r3, #2
 802097c:	b2da      	uxtb	r2, r3
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020982:	e180      	b.n	8020c86 <tcp_receive+0xf9e>
        tcp_ack(pcb);
 8020984:	687b      	ldr	r3, [r7, #4]
 8020986:	7e9b      	ldrb	r3, [r3, #26]
 8020988:	f043 0301 	orr.w	r3, r3, #1
 802098c:	b2da      	uxtb	r2, r3
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020992:	e178      	b.n	8020c86 <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8020994:	6878      	ldr	r0, [r7, #4]
 8020996:	f001 f8c7 	bl	8021b28 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802099e:	2b00      	cmp	r3, #0
 80209a0:	d106      	bne.n	80209b0 <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80209a2:	4848      	ldr	r0, [pc, #288]	; (8020ac4 <tcp_receive+0xddc>)
 80209a4:	f7fd fc9b 	bl	801e2de <tcp_seg_copy>
 80209a8:	4602      	mov	r2, r0
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80209ae:	e16a      	b.n	8020c86 <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80209b0:	2300      	movs	r3, #0
 80209b2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80209b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80209ba:	e14f      	b.n	8020c5c <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 80209bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209be:	68db      	ldr	r3, [r3, #12]
 80209c0:	685a      	ldr	r2, [r3, #4]
 80209c2:	4b41      	ldr	r3, [pc, #260]	; (8020ac8 <tcp_receive+0xde0>)
 80209c4:	681b      	ldr	r3, [r3, #0]
 80209c6:	429a      	cmp	r2, r3
 80209c8:	d11d      	bne.n	8020a06 <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80209ca:	4b3e      	ldr	r3, [pc, #248]	; (8020ac4 <tcp_receive+0xddc>)
 80209cc:	891a      	ldrh	r2, [r3, #8]
 80209ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209d0:	891b      	ldrh	r3, [r3, #8]
 80209d2:	429a      	cmp	r2, r3
 80209d4:	f240 8147 	bls.w	8020c66 <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80209d8:	483a      	ldr	r0, [pc, #232]	; (8020ac4 <tcp_receive+0xddc>)
 80209da:	f7fd fc80 	bl	801e2de <tcp_seg_copy>
 80209de:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 80209e0:	68bb      	ldr	r3, [r7, #8]
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	f000 8141 	beq.w	8020c6a <tcp_receive+0xf82>
                  if (prev != NULL) {
 80209e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209ea:	2b00      	cmp	r3, #0
 80209ec:	d003      	beq.n	80209f6 <tcp_receive+0xd0e>
                    prev->next = cseg;
 80209ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209f0:	68ba      	ldr	r2, [r7, #8]
 80209f2:	601a      	str	r2, [r3, #0]
 80209f4:	e002      	b.n	80209fc <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 80209f6:	687b      	ldr	r3, [r7, #4]
 80209f8:	68ba      	ldr	r2, [r7, #8]
 80209fa:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80209fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80209fe:	68b8      	ldr	r0, [r7, #8]
 8020a00:	f7ff f8fc 	bl	801fbfc <tcp_oos_insert_segment>
                }
                break;
 8020a04:	e131      	b.n	8020c6a <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8020a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a08:	2b00      	cmp	r3, #0
 8020a0a:	d117      	bne.n	8020a3c <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8020a0c:	4b2e      	ldr	r3, [pc, #184]	; (8020ac8 <tcp_receive+0xde0>)
 8020a0e:	681a      	ldr	r2, [r3, #0]
 8020a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a12:	68db      	ldr	r3, [r3, #12]
 8020a14:	685b      	ldr	r3, [r3, #4]
 8020a16:	1ad3      	subs	r3, r2, r3
 8020a18:	2b00      	cmp	r3, #0
 8020a1a:	da57      	bge.n	8020acc <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8020a1c:	4829      	ldr	r0, [pc, #164]	; (8020ac4 <tcp_receive+0xddc>)
 8020a1e:	f7fd fc5e 	bl	801e2de <tcp_seg_copy>
 8020a22:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8020a24:	68bb      	ldr	r3, [r7, #8]
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	f000 8121 	beq.w	8020c6e <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	68ba      	ldr	r2, [r7, #8]
 8020a30:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8020a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020a34:	68b8      	ldr	r0, [r7, #8]
 8020a36:	f7ff f8e1 	bl	801fbfc <tcp_oos_insert_segment>
                  }
                  break;
 8020a3a:	e118      	b.n	8020c6e <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8020a3c:	4b22      	ldr	r3, [pc, #136]	; (8020ac8 <tcp_receive+0xde0>)
 8020a3e:	681a      	ldr	r2, [r3, #0]
 8020a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a42:	68db      	ldr	r3, [r3, #12]
 8020a44:	685b      	ldr	r3, [r3, #4]
 8020a46:	1ad3      	subs	r3, r2, r3
 8020a48:	3b01      	subs	r3, #1
 8020a4a:	2b00      	cmp	r3, #0
 8020a4c:	db3e      	blt.n	8020acc <tcp_receive+0xde4>
 8020a4e:	4b1e      	ldr	r3, [pc, #120]	; (8020ac8 <tcp_receive+0xde0>)
 8020a50:	681a      	ldr	r2, [r3, #0]
 8020a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a54:	68db      	ldr	r3, [r3, #12]
 8020a56:	685b      	ldr	r3, [r3, #4]
 8020a58:	1ad3      	subs	r3, r2, r3
 8020a5a:	3301      	adds	r3, #1
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	dc35      	bgt.n	8020acc <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8020a60:	4818      	ldr	r0, [pc, #96]	; (8020ac4 <tcp_receive+0xddc>)
 8020a62:	f7fd fc3c 	bl	801e2de <tcp_seg_copy>
 8020a66:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8020a68:	68bb      	ldr	r3, [r7, #8]
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	f000 8101 	beq.w	8020c72 <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8020a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a72:	68db      	ldr	r3, [r3, #12]
 8020a74:	685b      	ldr	r3, [r3, #4]
 8020a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020a78:	8912      	ldrh	r2, [r2, #8]
 8020a7a:	441a      	add	r2, r3
 8020a7c:	4b12      	ldr	r3, [pc, #72]	; (8020ac8 <tcp_receive+0xde0>)
 8020a7e:	681b      	ldr	r3, [r3, #0]
 8020a80:	1ad3      	subs	r3, r2, r3
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	dd12      	ble.n	8020aac <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8020a86:	4b10      	ldr	r3, [pc, #64]	; (8020ac8 <tcp_receive+0xde0>)
 8020a88:	681b      	ldr	r3, [r3, #0]
 8020a8a:	b29a      	uxth	r2, r3
 8020a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a8e:	68db      	ldr	r3, [r3, #12]
 8020a90:	685b      	ldr	r3, [r3, #4]
 8020a92:	b29b      	uxth	r3, r3
 8020a94:	1ad3      	subs	r3, r2, r3
 8020a96:	b29a      	uxth	r2, r3
 8020a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a9a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8020a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a9e:	685a      	ldr	r2, [r3, #4]
 8020aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020aa2:	891b      	ldrh	r3, [r3, #8]
 8020aa4:	4619      	mov	r1, r3
 8020aa6:	4610      	mov	r0, r2
 8020aa8:	f7fb ff72 	bl	801c990 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8020aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020aae:	68ba      	ldr	r2, [r7, #8]
 8020ab0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8020ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020ab4:	68b8      	ldr	r0, [r7, #8]
 8020ab6:	f7ff f8a1 	bl	801fbfc <tcp_oos_insert_segment>
                  }
                  break;
 8020aba:	e0da      	b.n	8020c72 <tcp_receive+0xf8a>
 8020abc:	2000411c 	.word	0x2000411c
 8020ac0:	20004119 	.word	0x20004119
 8020ac4:	200040ec 	.word	0x200040ec
 8020ac8:	2000410c 	.word	0x2000410c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8020acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	f040 80be 	bne.w	8020c52 <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8020ad6:	4b7b      	ldr	r3, [pc, #492]	; (8020cc4 <tcp_receive+0xfdc>)
 8020ad8:	681a      	ldr	r2, [r3, #0]
 8020ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020adc:	68db      	ldr	r3, [r3, #12]
 8020ade:	685b      	ldr	r3, [r3, #4]
 8020ae0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	f340 80b5 	ble.w	8020c52 <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8020ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020aea:	68db      	ldr	r3, [r3, #12]
 8020aec:	899b      	ldrh	r3, [r3, #12]
 8020aee:	b29b      	uxth	r3, r3
 8020af0:	4618      	mov	r0, r3
 8020af2:	f7f8 fc31 	bl	8019358 <lwip_htons>
 8020af6:	4603      	mov	r3, r0
 8020af8:	f003 0301 	and.w	r3, r3, #1
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	f040 80ba 	bne.w	8020c76 <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8020b02:	4871      	ldr	r0, [pc, #452]	; (8020cc8 <tcp_receive+0xfe0>)
 8020b04:	f7fd fbeb 	bl	801e2de <tcp_seg_copy>
 8020b08:	4602      	mov	r2, r0
 8020b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b0c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8020b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b10:	681b      	ldr	r3, [r3, #0]
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	f000 80b1 	beq.w	8020c7a <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8020b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b1a:	68db      	ldr	r3, [r3, #12]
 8020b1c:	685b      	ldr	r3, [r3, #4]
 8020b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020b20:	8912      	ldrh	r2, [r2, #8]
 8020b22:	441a      	add	r2, r3
 8020b24:	4b67      	ldr	r3, [pc, #412]	; (8020cc4 <tcp_receive+0xfdc>)
 8020b26:	681b      	ldr	r3, [r3, #0]
 8020b28:	1ad3      	subs	r3, r2, r3
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	dd12      	ble.n	8020b54 <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8020b2e:	4b65      	ldr	r3, [pc, #404]	; (8020cc4 <tcp_receive+0xfdc>)
 8020b30:	681b      	ldr	r3, [r3, #0]
 8020b32:	b29a      	uxth	r2, r3
 8020b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b36:	68db      	ldr	r3, [r3, #12]
 8020b38:	685b      	ldr	r3, [r3, #4]
 8020b3a:	b29b      	uxth	r3, r3
 8020b3c:	1ad3      	subs	r3, r2, r3
 8020b3e:	b29a      	uxth	r2, r3
 8020b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b42:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8020b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b46:	685a      	ldr	r2, [r3, #4]
 8020b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b4a:	891b      	ldrh	r3, [r3, #8]
 8020b4c:	4619      	mov	r1, r3
 8020b4e:	4610      	mov	r0, r2
 8020b50:	f7fb ff1e 	bl	801c990 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8020b54:	4b5d      	ldr	r3, [pc, #372]	; (8020ccc <tcp_receive+0xfe4>)
 8020b56:	881b      	ldrh	r3, [r3, #0]
 8020b58:	461a      	mov	r2, r3
 8020b5a:	4b5a      	ldr	r3, [pc, #360]	; (8020cc4 <tcp_receive+0xfdc>)
 8020b5c:	681b      	ldr	r3, [r3, #0]
 8020b5e:	441a      	add	r2, r3
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020b64:	6879      	ldr	r1, [r7, #4]
 8020b66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020b68:	440b      	add	r3, r1
 8020b6a:	1ad3      	subs	r3, r2, r3
 8020b6c:	2b00      	cmp	r3, #0
 8020b6e:	f340 8084 	ble.w	8020c7a <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8020b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	68db      	ldr	r3, [r3, #12]
 8020b78:	899b      	ldrh	r3, [r3, #12]
 8020b7a:	b29b      	uxth	r3, r3
 8020b7c:	4618      	mov	r0, r3
 8020b7e:	f7f8 fbeb 	bl	8019358 <lwip_htons>
 8020b82:	4603      	mov	r3, r0
 8020b84:	f003 0301 	and.w	r3, r3, #1
 8020b88:	2b00      	cmp	r3, #0
 8020b8a:	d01d      	beq.n	8020bc8 <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8020b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b8e:	681b      	ldr	r3, [r3, #0]
 8020b90:	68dc      	ldr	r4, [r3, #12]
 8020b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b94:	681b      	ldr	r3, [r3, #0]
 8020b96:	68db      	ldr	r3, [r3, #12]
 8020b98:	899b      	ldrh	r3, [r3, #12]
 8020b9a:	b29b      	uxth	r3, r3
 8020b9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8020ba0:	b29d      	uxth	r5, r3
 8020ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ba4:	681b      	ldr	r3, [r3, #0]
 8020ba6:	68db      	ldr	r3, [r3, #12]
 8020ba8:	899b      	ldrh	r3, [r3, #12]
 8020baa:	b29b      	uxth	r3, r3
 8020bac:	4618      	mov	r0, r3
 8020bae:	f7f8 fbd3 	bl	8019358 <lwip_htons>
 8020bb2:	4603      	mov	r3, r0
 8020bb4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8020bb8:	b29b      	uxth	r3, r3
 8020bba:	4618      	mov	r0, r3
 8020bbc:	f7f8 fbcc 	bl	8019358 <lwip_htons>
 8020bc0:	4603      	mov	r3, r0
 8020bc2:	432b      	orrs	r3, r5
 8020bc4:	b29b      	uxth	r3, r3
 8020bc6:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8020bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bca:	681b      	ldr	r3, [r3, #0]
 8020bcc:	687a      	ldr	r2, [r7, #4]
 8020bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8020bd0:	b291      	uxth	r1, r2
 8020bd2:	687a      	ldr	r2, [r7, #4]
 8020bd4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8020bd6:	440a      	add	r2, r1
 8020bd8:	b291      	uxth	r1, r2
 8020bda:	4a3a      	ldr	r2, [pc, #232]	; (8020cc4 <tcp_receive+0xfdc>)
 8020bdc:	6812      	ldr	r2, [r2, #0]
 8020bde:	b292      	uxth	r2, r2
 8020be0:	1a8a      	subs	r2, r1, r2
 8020be2:	b292      	uxth	r2, r2
 8020be4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8020be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020be8:	681b      	ldr	r3, [r3, #0]
 8020bea:	685a      	ldr	r2, [r3, #4]
 8020bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bee:	681b      	ldr	r3, [r3, #0]
 8020bf0:	891b      	ldrh	r3, [r3, #8]
 8020bf2:	4619      	mov	r1, r3
 8020bf4:	4610      	mov	r0, r2
 8020bf6:	f7fb fecb 	bl	801c990 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8020bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bfc:	681b      	ldr	r3, [r3, #0]
 8020bfe:	891c      	ldrh	r4, [r3, #8]
 8020c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	68db      	ldr	r3, [r3, #12]
 8020c06:	899b      	ldrh	r3, [r3, #12]
 8020c08:	b29b      	uxth	r3, r3
 8020c0a:	4618      	mov	r0, r3
 8020c0c:	f7f8 fba4 	bl	8019358 <lwip_htons>
 8020c10:	4603      	mov	r3, r0
 8020c12:	f003 0303 	and.w	r3, r3, #3
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d001      	beq.n	8020c1e <tcp_receive+0xf36>
 8020c1a:	2301      	movs	r3, #1
 8020c1c:	e000      	b.n	8020c20 <tcp_receive+0xf38>
 8020c1e:	2300      	movs	r3, #0
 8020c20:	4423      	add	r3, r4
 8020c22:	b29a      	uxth	r2, r3
 8020c24:	4b29      	ldr	r3, [pc, #164]	; (8020ccc <tcp_receive+0xfe4>)
 8020c26:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8020c28:	4b28      	ldr	r3, [pc, #160]	; (8020ccc <tcp_receive+0xfe4>)
 8020c2a:	881b      	ldrh	r3, [r3, #0]
 8020c2c:	461a      	mov	r2, r3
 8020c2e:	4b25      	ldr	r3, [pc, #148]	; (8020cc4 <tcp_receive+0xfdc>)
 8020c30:	681b      	ldr	r3, [r3, #0]
 8020c32:	441a      	add	r2, r3
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c38:	6879      	ldr	r1, [r7, #4]
 8020c3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020c3c:	440b      	add	r3, r1
 8020c3e:	429a      	cmp	r2, r3
 8020c40:	d01b      	beq.n	8020c7a <tcp_receive+0xf92>
 8020c42:	4b23      	ldr	r3, [pc, #140]	; (8020cd0 <tcp_receive+0xfe8>)
 8020c44:	f240 627b 	movw	r2, #1659	; 0x67b
 8020c48:	4922      	ldr	r1, [pc, #136]	; (8020cd4 <tcp_receive+0xfec>)
 8020c4a:	4823      	ldr	r0, [pc, #140]	; (8020cd8 <tcp_receive+0xff0>)
 8020c4c:	f004 fd10 	bl	8025670 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8020c50:	e013      	b.n	8020c7a <tcp_receive+0xf92>
              }
            }
            prev = next;
 8020c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c54:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8020c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c58:	681b      	ldr	r3, [r3, #0]
 8020c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	f47f aeac 	bne.w	80209bc <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 8020c64:	e00f      	b.n	8020c86 <tcp_receive+0xf9e>
                break;
 8020c66:	bf00      	nop
 8020c68:	e00d      	b.n	8020c86 <tcp_receive+0xf9e>
                break;
 8020c6a:	bf00      	nop
 8020c6c:	e00b      	b.n	8020c86 <tcp_receive+0xf9e>
                  break;
 8020c6e:	bf00      	nop
 8020c70:	e009      	b.n	8020c86 <tcp_receive+0xf9e>
                  break;
 8020c72:	bf00      	nop
 8020c74:	e007      	b.n	8020c86 <tcp_receive+0xf9e>
                  break;
 8020c76:	bf00      	nop
 8020c78:	e005      	b.n	8020c86 <tcp_receive+0xf9e>
                break;
 8020c7a:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8020c7c:	e003      	b.n	8020c86 <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8020c7e:	6878      	ldr	r0, [r7, #4]
 8020c80:	f000 ff52 	bl	8021b28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020c84:	e01a      	b.n	8020cbc <tcp_receive+0xfd4>
 8020c86:	e019      	b.n	8020cbc <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8020c88:	4b0e      	ldr	r3, [pc, #56]	; (8020cc4 <tcp_receive+0xfdc>)
 8020c8a:	681a      	ldr	r2, [r3, #0]
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c90:	1ad3      	subs	r3, r2, r3
 8020c92:	2b00      	cmp	r3, #0
 8020c94:	db0a      	blt.n	8020cac <tcp_receive+0xfc4>
 8020c96:	4b0b      	ldr	r3, [pc, #44]	; (8020cc4 <tcp_receive+0xfdc>)
 8020c98:	681a      	ldr	r2, [r3, #0]
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c9e:	6879      	ldr	r1, [r7, #4]
 8020ca0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020ca2:	440b      	add	r3, r1
 8020ca4:	1ad3      	subs	r3, r2, r3
 8020ca6:	3301      	adds	r3, #1
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	dd07      	ble.n	8020cbc <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	7e9b      	ldrb	r3, [r3, #26]
 8020cb0:	f043 0302 	orr.w	r3, r3, #2
 8020cb4:	b2da      	uxtb	r2, r3
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8020cba:	e7ff      	b.n	8020cbc <tcp_receive+0xfd4>
 8020cbc:	bf00      	nop
 8020cbe:	3734      	adds	r7, #52	; 0x34
 8020cc0:	46bd      	mov	sp, r7
 8020cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020cc4:	2000410c 	.word	0x2000410c
 8020cc8:	200040ec 	.word	0x200040ec
 8020ccc:	20004116 	.word	0x20004116
 8020cd0:	08027fbc 	.word	0x08027fbc
 8020cd4:	08028288 	.word	0x08028288
 8020cd8:	08028000 	.word	0x08028000

08020cdc <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8020cdc:	b480      	push	{r7}
 8020cde:	b083      	sub	sp, #12
 8020ce0:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8020ce2:	4b18      	ldr	r3, [pc, #96]	; (8020d44 <tcp_getoptbyte+0x68>)
 8020ce4:	681b      	ldr	r3, [r3, #0]
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	d005      	beq.n	8020cf6 <tcp_getoptbyte+0x1a>
 8020cea:	4b17      	ldr	r3, [pc, #92]	; (8020d48 <tcp_getoptbyte+0x6c>)
 8020cec:	881a      	ldrh	r2, [r3, #0]
 8020cee:	4b17      	ldr	r3, [pc, #92]	; (8020d4c <tcp_getoptbyte+0x70>)
 8020cf0:	881b      	ldrh	r3, [r3, #0]
 8020cf2:	429a      	cmp	r2, r3
 8020cf4:	d20e      	bcs.n	8020d14 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8020cf6:	4b16      	ldr	r3, [pc, #88]	; (8020d50 <tcp_getoptbyte+0x74>)
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	3314      	adds	r3, #20
 8020cfc:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8020cfe:	4b12      	ldr	r3, [pc, #72]	; (8020d48 <tcp_getoptbyte+0x6c>)
 8020d00:	881b      	ldrh	r3, [r3, #0]
 8020d02:	1c5a      	adds	r2, r3, #1
 8020d04:	b291      	uxth	r1, r2
 8020d06:	4a10      	ldr	r2, [pc, #64]	; (8020d48 <tcp_getoptbyte+0x6c>)
 8020d08:	8011      	strh	r1, [r2, #0]
 8020d0a:	461a      	mov	r2, r3
 8020d0c:	683b      	ldr	r3, [r7, #0]
 8020d0e:	4413      	add	r3, r2
 8020d10:	781b      	ldrb	r3, [r3, #0]
 8020d12:	e010      	b.n	8020d36 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8020d14:	4b0c      	ldr	r3, [pc, #48]	; (8020d48 <tcp_getoptbyte+0x6c>)
 8020d16:	881b      	ldrh	r3, [r3, #0]
 8020d18:	1c5a      	adds	r2, r3, #1
 8020d1a:	b291      	uxth	r1, r2
 8020d1c:	4a0a      	ldr	r2, [pc, #40]	; (8020d48 <tcp_getoptbyte+0x6c>)
 8020d1e:	8011      	strh	r1, [r2, #0]
 8020d20:	b2da      	uxtb	r2, r3
 8020d22:	4b0a      	ldr	r3, [pc, #40]	; (8020d4c <tcp_getoptbyte+0x70>)
 8020d24:	881b      	ldrh	r3, [r3, #0]
 8020d26:	b2db      	uxtb	r3, r3
 8020d28:	1ad3      	subs	r3, r2, r3
 8020d2a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8020d2c:	4b05      	ldr	r3, [pc, #20]	; (8020d44 <tcp_getoptbyte+0x68>)
 8020d2e:	681a      	ldr	r2, [r3, #0]
 8020d30:	79fb      	ldrb	r3, [r7, #7]
 8020d32:	4413      	add	r3, r2
 8020d34:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020d36:	4618      	mov	r0, r3
 8020d38:	370c      	adds	r7, #12
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d40:	4770      	bx	lr
 8020d42:	bf00      	nop
 8020d44:	20004104 	.word	0x20004104
 8020d48:	20004108 	.word	0x20004108
 8020d4c:	20004102 	.word	0x20004102
 8020d50:	200040fc 	.word	0x200040fc

08020d54 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8020d54:	b580      	push	{r7, lr}
 8020d56:	b084      	sub	sp, #16
 8020d58:	af00      	add	r7, sp, #0
 8020d5a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8020d5c:	4b2d      	ldr	r3, [pc, #180]	; (8020e14 <tcp_parseopt+0xc0>)
 8020d5e:	881b      	ldrh	r3, [r3, #0]
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	d053      	beq.n	8020e0c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020d64:	4b2c      	ldr	r3, [pc, #176]	; (8020e18 <tcp_parseopt+0xc4>)
 8020d66:	2200      	movs	r2, #0
 8020d68:	801a      	strh	r2, [r3, #0]
 8020d6a:	e043      	b.n	8020df4 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8020d6c:	f7ff ffb6 	bl	8020cdc <tcp_getoptbyte>
 8020d70:	4603      	mov	r3, r0
 8020d72:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8020d74:	7bfb      	ldrb	r3, [r7, #15]
 8020d76:	2b01      	cmp	r3, #1
 8020d78:	d03c      	beq.n	8020df4 <tcp_parseopt+0xa0>
 8020d7a:	2b02      	cmp	r3, #2
 8020d7c:	d002      	beq.n	8020d84 <tcp_parseopt+0x30>
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d03f      	beq.n	8020e02 <tcp_parseopt+0xae>
 8020d82:	e026      	b.n	8020dd2 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8020d84:	f7ff ffaa 	bl	8020cdc <tcp_getoptbyte>
 8020d88:	4603      	mov	r3, r0
 8020d8a:	2b04      	cmp	r3, #4
 8020d8c:	d13b      	bne.n	8020e06 <tcp_parseopt+0xb2>
 8020d8e:	4b22      	ldr	r3, [pc, #136]	; (8020e18 <tcp_parseopt+0xc4>)
 8020d90:	881b      	ldrh	r3, [r3, #0]
 8020d92:	3302      	adds	r3, #2
 8020d94:	4a1f      	ldr	r2, [pc, #124]	; (8020e14 <tcp_parseopt+0xc0>)
 8020d96:	8812      	ldrh	r2, [r2, #0]
 8020d98:	4293      	cmp	r3, r2
 8020d9a:	dc34      	bgt.n	8020e06 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8020d9c:	f7ff ff9e 	bl	8020cdc <tcp_getoptbyte>
 8020da0:	4603      	mov	r3, r0
 8020da2:	b29b      	uxth	r3, r3
 8020da4:	021b      	lsls	r3, r3, #8
 8020da6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8020da8:	f7ff ff98 	bl	8020cdc <tcp_getoptbyte>
 8020dac:	4603      	mov	r3, r0
 8020dae:	b29a      	uxth	r2, r3
 8020db0:	89bb      	ldrh	r3, [r7, #12]
 8020db2:	4313      	orrs	r3, r2
 8020db4:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8020db6:	89bb      	ldrh	r3, [r7, #12]
 8020db8:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8020dbc:	d804      	bhi.n	8020dc8 <tcp_parseopt+0x74>
 8020dbe:	89bb      	ldrh	r3, [r7, #12]
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	d001      	beq.n	8020dc8 <tcp_parseopt+0x74>
 8020dc4:	89ba      	ldrh	r2, [r7, #12]
 8020dc6:	e001      	b.n	8020dcc <tcp_parseopt+0x78>
 8020dc8:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8020dd0:	e010      	b.n	8020df4 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8020dd2:	f7ff ff83 	bl	8020cdc <tcp_getoptbyte>
 8020dd6:	4603      	mov	r3, r0
 8020dd8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8020dda:	7afb      	ldrb	r3, [r7, #11]
 8020ddc:	2b01      	cmp	r3, #1
 8020dde:	d914      	bls.n	8020e0a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8020de0:	7afb      	ldrb	r3, [r7, #11]
 8020de2:	b29a      	uxth	r2, r3
 8020de4:	4b0c      	ldr	r3, [pc, #48]	; (8020e18 <tcp_parseopt+0xc4>)
 8020de6:	881b      	ldrh	r3, [r3, #0]
 8020de8:	4413      	add	r3, r2
 8020dea:	b29b      	uxth	r3, r3
 8020dec:	3b02      	subs	r3, #2
 8020dee:	b29a      	uxth	r2, r3
 8020df0:	4b09      	ldr	r3, [pc, #36]	; (8020e18 <tcp_parseopt+0xc4>)
 8020df2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020df4:	4b08      	ldr	r3, [pc, #32]	; (8020e18 <tcp_parseopt+0xc4>)
 8020df6:	881a      	ldrh	r2, [r3, #0]
 8020df8:	4b06      	ldr	r3, [pc, #24]	; (8020e14 <tcp_parseopt+0xc0>)
 8020dfa:	881b      	ldrh	r3, [r3, #0]
 8020dfc:	429a      	cmp	r2, r3
 8020dfe:	d3b5      	bcc.n	8020d6c <tcp_parseopt+0x18>
 8020e00:	e004      	b.n	8020e0c <tcp_parseopt+0xb8>
        return;
 8020e02:	bf00      	nop
 8020e04:	e002      	b.n	8020e0c <tcp_parseopt+0xb8>
          return;
 8020e06:	bf00      	nop
 8020e08:	e000      	b.n	8020e0c <tcp_parseopt+0xb8>
          return;
 8020e0a:	bf00      	nop
      }
    }
  }
}
 8020e0c:	3710      	adds	r7, #16
 8020e0e:	46bd      	mov	sp, r7
 8020e10:	bd80      	pop	{r7, pc}
 8020e12:	bf00      	nop
 8020e14:	20004100 	.word	0x20004100
 8020e18:	20004108 	.word	0x20004108

08020e1c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8020e1c:	b480      	push	{r7}
 8020e1e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8020e20:	4b05      	ldr	r3, [pc, #20]	; (8020e38 <tcp_trigger_input_pcb_close+0x1c>)
 8020e22:	781b      	ldrb	r3, [r3, #0]
 8020e24:	f043 0310 	orr.w	r3, r3, #16
 8020e28:	b2da      	uxtb	r2, r3
 8020e2a:	4b03      	ldr	r3, [pc, #12]	; (8020e38 <tcp_trigger_input_pcb_close+0x1c>)
 8020e2c:	701a      	strb	r2, [r3, #0]
}
 8020e2e:	bf00      	nop
 8020e30:	46bd      	mov	sp, r7
 8020e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e36:	4770      	bx	lr
 8020e38:	20004119 	.word	0x20004119

08020e3c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8020e3c:	b580      	push	{r7, lr}
 8020e3e:	b086      	sub	sp, #24
 8020e40:	af00      	add	r7, sp, #0
 8020e42:	60f8      	str	r0, [r7, #12]
 8020e44:	607b      	str	r3, [r7, #4]
 8020e46:	460b      	mov	r3, r1
 8020e48:	817b      	strh	r3, [r7, #10]
 8020e4a:	4613      	mov	r3, r2
 8020e4c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8020e4e:	897a      	ldrh	r2, [r7, #10]
 8020e50:	893b      	ldrh	r3, [r7, #8]
 8020e52:	4413      	add	r3, r2
 8020e54:	b29b      	uxth	r3, r3
 8020e56:	3314      	adds	r3, #20
 8020e58:	b29b      	uxth	r3, r3
 8020e5a:	2200      	movs	r2, #0
 8020e5c:	4619      	mov	r1, r3
 8020e5e:	2001      	movs	r0, #1
 8020e60:	f7fb fb98 	bl	801c594 <pbuf_alloc>
 8020e64:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8020e66:	697b      	ldr	r3, [r7, #20]
 8020e68:	2b00      	cmp	r3, #0
 8020e6a:	d057      	beq.n	8020f1c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8020e6c:	697b      	ldr	r3, [r7, #20]
 8020e6e:	895b      	ldrh	r3, [r3, #10]
 8020e70:	461a      	mov	r2, r3
 8020e72:	897b      	ldrh	r3, [r7, #10]
 8020e74:	3314      	adds	r3, #20
 8020e76:	429a      	cmp	r2, r3
 8020e78:	da05      	bge.n	8020e86 <tcp_output_alloc_header+0x4a>
 8020e7a:	4b2b      	ldr	r3, [pc, #172]	; (8020f28 <tcp_output_alloc_header+0xec>)
 8020e7c:	2273      	movs	r2, #115	; 0x73
 8020e7e:	492b      	ldr	r1, [pc, #172]	; (8020f2c <tcp_output_alloc_header+0xf0>)
 8020e80:	482b      	ldr	r0, [pc, #172]	; (8020f30 <tcp_output_alloc_header+0xf4>)
 8020e82:	f004 fbf5 	bl	8025670 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8020e86:	697b      	ldr	r3, [r7, #20]
 8020e88:	685b      	ldr	r3, [r3, #4]
 8020e8a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8020e8c:	68fb      	ldr	r3, [r7, #12]
 8020e8e:	8adb      	ldrh	r3, [r3, #22]
 8020e90:	4618      	mov	r0, r3
 8020e92:	f7f8 fa61 	bl	8019358 <lwip_htons>
 8020e96:	4603      	mov	r3, r0
 8020e98:	461a      	mov	r2, r3
 8020e9a:	693b      	ldr	r3, [r7, #16]
 8020e9c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8020e9e:	68fb      	ldr	r3, [r7, #12]
 8020ea0:	8b1b      	ldrh	r3, [r3, #24]
 8020ea2:	4618      	mov	r0, r3
 8020ea4:	f7f8 fa58 	bl	8019358 <lwip_htons>
 8020ea8:	4603      	mov	r3, r0
 8020eaa:	461a      	mov	r2, r3
 8020eac:	693b      	ldr	r3, [r7, #16]
 8020eae:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8020eb0:	693b      	ldr	r3, [r7, #16]
 8020eb2:	687a      	ldr	r2, [r7, #4]
 8020eb4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020eb6:	68fb      	ldr	r3, [r7, #12]
 8020eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020eba:	4618      	mov	r0, r3
 8020ebc:	f7f8 fa5a 	bl	8019374 <lwip_htonl>
 8020ec0:	4602      	mov	r2, r0
 8020ec2:	693b      	ldr	r3, [r7, #16]
 8020ec4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8020ec6:	897b      	ldrh	r3, [r7, #10]
 8020ec8:	089b      	lsrs	r3, r3, #2
 8020eca:	b29b      	uxth	r3, r3
 8020ecc:	3305      	adds	r3, #5
 8020ece:	b29b      	uxth	r3, r3
 8020ed0:	031b      	lsls	r3, r3, #12
 8020ed2:	b29b      	uxth	r3, r3
 8020ed4:	f043 0310 	orr.w	r3, r3, #16
 8020ed8:	b29b      	uxth	r3, r3
 8020eda:	4618      	mov	r0, r3
 8020edc:	f7f8 fa3c 	bl	8019358 <lwip_htons>
 8020ee0:	4603      	mov	r3, r0
 8020ee2:	461a      	mov	r2, r3
 8020ee4:	693b      	ldr	r3, [r7, #16]
 8020ee6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8020ee8:	68fb      	ldr	r3, [r7, #12]
 8020eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020eec:	4618      	mov	r0, r3
 8020eee:	f7f8 fa33 	bl	8019358 <lwip_htons>
 8020ef2:	4603      	mov	r3, r0
 8020ef4:	461a      	mov	r2, r3
 8020ef6:	693b      	ldr	r3, [r7, #16]
 8020ef8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8020efa:	693b      	ldr	r3, [r7, #16]
 8020efc:	2200      	movs	r2, #0
 8020efe:	741a      	strb	r2, [r3, #16]
 8020f00:	2200      	movs	r2, #0
 8020f02:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8020f04:	693b      	ldr	r3, [r7, #16]
 8020f06:	2200      	movs	r2, #0
 8020f08:	749a      	strb	r2, [r3, #18]
 8020f0a:	2200      	movs	r2, #0
 8020f0c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020f0e:	68fb      	ldr	r3, [r7, #12]
 8020f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f12:	68fa      	ldr	r2, [r7, #12]
 8020f14:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8020f16:	441a      	add	r2, r3
 8020f18:	68fb      	ldr	r3, [r7, #12]
 8020f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8020f1c:	697b      	ldr	r3, [r7, #20]
}
 8020f1e:	4618      	mov	r0, r3
 8020f20:	3718      	adds	r7, #24
 8020f22:	46bd      	mov	sp, r7
 8020f24:	bd80      	pop	{r7, pc}
 8020f26:	bf00      	nop
 8020f28:	08028344 	.word	0x08028344
 8020f2c:	08028378 	.word	0x08028378
 8020f30:	080283a8 	.word	0x080283a8

08020f34 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8020f34:	b5b0      	push	{r4, r5, r7, lr}
 8020f36:	b084      	sub	sp, #16
 8020f38:	af00      	add	r7, sp, #0
 8020f3a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	d02c      	beq.n	8020f9e <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020f44:	687b      	ldr	r3, [r7, #4]
 8020f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020f48:	60fb      	str	r3, [r7, #12]
 8020f4a:	e002      	b.n	8020f52 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8020f4c:	68fb      	ldr	r3, [r7, #12]
 8020f4e:	681b      	ldr	r3, [r3, #0]
 8020f50:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020f52:	68fb      	ldr	r3, [r7, #12]
 8020f54:	681b      	ldr	r3, [r3, #0]
 8020f56:	2b00      	cmp	r3, #0
 8020f58:	d1f8      	bne.n	8020f4c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8020f5a:	68fb      	ldr	r3, [r7, #12]
 8020f5c:	68db      	ldr	r3, [r3, #12]
 8020f5e:	899b      	ldrh	r3, [r3, #12]
 8020f60:	b29b      	uxth	r3, r3
 8020f62:	4618      	mov	r0, r3
 8020f64:	f7f8 f9f8 	bl	8019358 <lwip_htons>
 8020f68:	4603      	mov	r3, r0
 8020f6a:	f003 0307 	and.w	r3, r3, #7
 8020f6e:	2b00      	cmp	r3, #0
 8020f70:	d115      	bne.n	8020f9e <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8020f72:	68fb      	ldr	r3, [r7, #12]
 8020f74:	68dc      	ldr	r4, [r3, #12]
 8020f76:	68fb      	ldr	r3, [r7, #12]
 8020f78:	68db      	ldr	r3, [r3, #12]
 8020f7a:	899b      	ldrh	r3, [r3, #12]
 8020f7c:	b29d      	uxth	r5, r3
 8020f7e:	2001      	movs	r0, #1
 8020f80:	f7f8 f9ea 	bl	8019358 <lwip_htons>
 8020f84:	4603      	mov	r3, r0
 8020f86:	432b      	orrs	r3, r5
 8020f88:	b29b      	uxth	r3, r3
 8020f8a:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 8020f8c:	687b      	ldr	r3, [r7, #4]
 8020f8e:	7e9b      	ldrb	r3, [r3, #26]
 8020f90:	f043 0320 	orr.w	r3, r3, #32
 8020f94:	b2da      	uxtb	r2, r3
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8020f9a:	2300      	movs	r3, #0
 8020f9c:	e004      	b.n	8020fa8 <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8020f9e:	2101      	movs	r1, #1
 8020fa0:	6878      	ldr	r0, [r7, #4]
 8020fa2:	f000 fcc3 	bl	802192c <tcp_enqueue_flags>
 8020fa6:	4603      	mov	r3, r0
}
 8020fa8:	4618      	mov	r0, r3
 8020faa:	3710      	adds	r7, #16
 8020fac:	46bd      	mov	sp, r7
 8020fae:	bdb0      	pop	{r4, r5, r7, pc}

08020fb0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8020fb0:	b590      	push	{r4, r7, lr}
 8020fb2:	b087      	sub	sp, #28
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	60f8      	str	r0, [r7, #12]
 8020fb8:	60b9      	str	r1, [r7, #8]
 8020fba:	603b      	str	r3, [r7, #0]
 8020fbc:	4613      	mov	r3, r2
 8020fbe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8020fc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8020fc4:	f003 0301 	and.w	r3, r3, #1
 8020fc8:	2b00      	cmp	r3, #0
 8020fca:	d001      	beq.n	8020fd0 <tcp_create_segment+0x20>
 8020fcc:	2304      	movs	r3, #4
 8020fce:	e000      	b.n	8020fd2 <tcp_create_segment+0x22>
 8020fd0:	2300      	movs	r3, #0
 8020fd2:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8020fd4:	2003      	movs	r0, #3
 8020fd6:	f7fb f8a3 	bl	801c120 <memp_malloc>
 8020fda:	6138      	str	r0, [r7, #16]
 8020fdc:	693b      	ldr	r3, [r7, #16]
 8020fde:	2b00      	cmp	r3, #0
 8020fe0:	d104      	bne.n	8020fec <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8020fe2:	68b8      	ldr	r0, [r7, #8]
 8020fe4:	f7fb fe48 	bl	801cc78 <pbuf_free>
    return NULL;
 8020fe8:	2300      	movs	r3, #0
 8020fea:	e061      	b.n	80210b0 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 8020fec:	693b      	ldr	r3, [r7, #16]
 8020fee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8020ff2:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8020ff4:	693b      	ldr	r3, [r7, #16]
 8020ff6:	2200      	movs	r2, #0
 8020ff8:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8020ffa:	693b      	ldr	r3, [r7, #16]
 8020ffc:	68ba      	ldr	r2, [r7, #8]
 8020ffe:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8021000:	68bb      	ldr	r3, [r7, #8]
 8021002:	891a      	ldrh	r2, [r3, #8]
 8021004:	7dfb      	ldrb	r3, [r7, #23]
 8021006:	b29b      	uxth	r3, r3
 8021008:	429a      	cmp	r2, r3
 802100a:	d205      	bcs.n	8021018 <tcp_create_segment+0x68>
 802100c:	4b2a      	ldr	r3, [pc, #168]	; (80210b8 <tcp_create_segment+0x108>)
 802100e:	22ba      	movs	r2, #186	; 0xba
 8021010:	492a      	ldr	r1, [pc, #168]	; (80210bc <tcp_create_segment+0x10c>)
 8021012:	482b      	ldr	r0, [pc, #172]	; (80210c0 <tcp_create_segment+0x110>)
 8021014:	f004 fb2c 	bl	8025670 <iprintf>
  seg->len = p->tot_len - optlen;
 8021018:	68bb      	ldr	r3, [r7, #8]
 802101a:	891a      	ldrh	r2, [r3, #8]
 802101c:	7dfb      	ldrb	r3, [r7, #23]
 802101e:	b29b      	uxth	r3, r3
 8021020:	1ad3      	subs	r3, r2, r3
 8021022:	b29a      	uxth	r2, r3
 8021024:	693b      	ldr	r3, [r7, #16]
 8021026:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8021028:	2114      	movs	r1, #20
 802102a:	68b8      	ldr	r0, [r7, #8]
 802102c:	f7fb fe00 	bl	801cc30 <pbuf_header>
 8021030:	4603      	mov	r3, r0
 8021032:	2b00      	cmp	r3, #0
 8021034:	d004      	beq.n	8021040 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8021036:	6938      	ldr	r0, [r7, #16]
 8021038:	f7fd f939 	bl	801e2ae <tcp_seg_free>
    return NULL;
 802103c:	2300      	movs	r3, #0
 802103e:	e037      	b.n	80210b0 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8021040:	693b      	ldr	r3, [r7, #16]
 8021042:	685b      	ldr	r3, [r3, #4]
 8021044:	685a      	ldr	r2, [r3, #4]
 8021046:	693b      	ldr	r3, [r7, #16]
 8021048:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 802104a:	693b      	ldr	r3, [r7, #16]
 802104c:	68dc      	ldr	r4, [r3, #12]
 802104e:	68fb      	ldr	r3, [r7, #12]
 8021050:	8adb      	ldrh	r3, [r3, #22]
 8021052:	4618      	mov	r0, r3
 8021054:	f7f8 f980 	bl	8019358 <lwip_htons>
 8021058:	4603      	mov	r3, r0
 802105a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 802105c:	693b      	ldr	r3, [r7, #16]
 802105e:	68dc      	ldr	r4, [r3, #12]
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	8b1b      	ldrh	r3, [r3, #24]
 8021064:	4618      	mov	r0, r3
 8021066:	f7f8 f977 	bl	8019358 <lwip_htons>
 802106a:	4603      	mov	r3, r0
 802106c:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 802106e:	693b      	ldr	r3, [r7, #16]
 8021070:	68dc      	ldr	r4, [r3, #12]
 8021072:	6838      	ldr	r0, [r7, #0]
 8021074:	f7f8 f97e 	bl	8019374 <lwip_htonl>
 8021078:	4603      	mov	r3, r0
 802107a:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 802107c:	693b      	ldr	r3, [r7, #16]
 802107e:	68dc      	ldr	r4, [r3, #12]
 8021080:	7dfb      	ldrb	r3, [r7, #23]
 8021082:	089b      	lsrs	r3, r3, #2
 8021084:	b2db      	uxtb	r3, r3
 8021086:	b29b      	uxth	r3, r3
 8021088:	3305      	adds	r3, #5
 802108a:	b29b      	uxth	r3, r3
 802108c:	031b      	lsls	r3, r3, #12
 802108e:	b29a      	uxth	r2, r3
 8021090:	79fb      	ldrb	r3, [r7, #7]
 8021092:	b29b      	uxth	r3, r3
 8021094:	4313      	orrs	r3, r2
 8021096:	b29b      	uxth	r3, r3
 8021098:	4618      	mov	r0, r3
 802109a:	f7f8 f95d 	bl	8019358 <lwip_htons>
 802109e:	4603      	mov	r3, r0
 80210a0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80210a2:	693b      	ldr	r3, [r7, #16]
 80210a4:	68db      	ldr	r3, [r3, #12]
 80210a6:	2200      	movs	r2, #0
 80210a8:	749a      	strb	r2, [r3, #18]
 80210aa:	2200      	movs	r2, #0
 80210ac:	74da      	strb	r2, [r3, #19]
  return seg;
 80210ae:	693b      	ldr	r3, [r7, #16]
}
 80210b0:	4618      	mov	r0, r3
 80210b2:	371c      	adds	r7, #28
 80210b4:	46bd      	mov	sp, r7
 80210b6:	bd90      	pop	{r4, r7, pc}
 80210b8:	08028344 	.word	0x08028344
 80210bc:	080283d0 	.word	0x080283d0
 80210c0:	080283a8 	.word	0x080283a8

080210c4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80210c4:	b580      	push	{r7, lr}
 80210c6:	b086      	sub	sp, #24
 80210c8:	af00      	add	r7, sp, #0
 80210ca:	607b      	str	r3, [r7, #4]
 80210cc:	4603      	mov	r3, r0
 80210ce:	73fb      	strb	r3, [r7, #15]
 80210d0:	460b      	mov	r3, r1
 80210d2:	81bb      	strh	r3, [r7, #12]
 80210d4:	4613      	mov	r3, r2
 80210d6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80210d8:	89bb      	ldrh	r3, [r7, #12]
 80210da:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80210dc:	89ba      	ldrh	r2, [r7, #12]
 80210de:	897b      	ldrh	r3, [r7, #10]
 80210e0:	429a      	cmp	r2, r3
 80210e2:	d221      	bcs.n	8021128 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80210e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80210e8:	f003 0302 	and.w	r3, r3, #2
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	d111      	bne.n	8021114 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 80210f0:	6a3b      	ldr	r3, [r7, #32]
 80210f2:	7e9b      	ldrb	r3, [r3, #26]
 80210f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d115      	bne.n	8021128 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 80210fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8021100:	2b00      	cmp	r3, #0
 8021102:	d007      	beq.n	8021114 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8021104:	6a3b      	ldr	r3, [r7, #32]
 8021106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8021108:	2b00      	cmp	r3, #0
 802110a:	d103      	bne.n	8021114 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 802110c:	6a3b      	ldr	r3, [r7, #32]
 802110e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8021110:	2b00      	cmp	r3, #0
 8021112:	d009      	beq.n	8021128 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8021114:	89bb      	ldrh	r3, [r7, #12]
 8021116:	f203 23d3 	addw	r3, r3, #723	; 0x2d3
 802111a:	f023 0203 	bic.w	r2, r3, #3
 802111e:	897b      	ldrh	r3, [r7, #10]
 8021120:	4293      	cmp	r3, r2
 8021122:	bf28      	it	cs
 8021124:	4613      	movcs	r3, r2
 8021126:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8021128:	8af9      	ldrh	r1, [r7, #22]
 802112a:	7bfb      	ldrb	r3, [r7, #15]
 802112c:	2200      	movs	r2, #0
 802112e:	4618      	mov	r0, r3
 8021130:	f7fb fa30 	bl	801c594 <pbuf_alloc>
 8021134:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021136:	693b      	ldr	r3, [r7, #16]
 8021138:	2b00      	cmp	r3, #0
 802113a:	d101      	bne.n	8021140 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 802113c:	2300      	movs	r3, #0
 802113e:	e019      	b.n	8021174 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8021140:	693b      	ldr	r3, [r7, #16]
 8021142:	681b      	ldr	r3, [r3, #0]
 8021144:	2b00      	cmp	r3, #0
 8021146:	d006      	beq.n	8021156 <tcp_pbuf_prealloc+0x92>
 8021148:	4b0c      	ldr	r3, [pc, #48]	; (802117c <tcp_pbuf_prealloc+0xb8>)
 802114a:	f44f 7288 	mov.w	r2, #272	; 0x110
 802114e:	490c      	ldr	r1, [pc, #48]	; (8021180 <tcp_pbuf_prealloc+0xbc>)
 8021150:	480c      	ldr	r0, [pc, #48]	; (8021184 <tcp_pbuf_prealloc+0xc0>)
 8021152:	f004 fa8d 	bl	8025670 <iprintf>
  *oversize = p->len - length;
 8021156:	693b      	ldr	r3, [r7, #16]
 8021158:	895a      	ldrh	r2, [r3, #10]
 802115a:	89bb      	ldrh	r3, [r7, #12]
 802115c:	1ad3      	subs	r3, r2, r3
 802115e:	b29a      	uxth	r2, r3
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8021164:	693b      	ldr	r3, [r7, #16]
 8021166:	89ba      	ldrh	r2, [r7, #12]
 8021168:	811a      	strh	r2, [r3, #8]
 802116a:	693b      	ldr	r3, [r7, #16]
 802116c:	891a      	ldrh	r2, [r3, #8]
 802116e:	693b      	ldr	r3, [r7, #16]
 8021170:	815a      	strh	r2, [r3, #10]
  return p;
 8021172:	693b      	ldr	r3, [r7, #16]
}
 8021174:	4618      	mov	r0, r3
 8021176:	3718      	adds	r7, #24
 8021178:	46bd      	mov	sp, r7
 802117a:	bd80      	pop	{r7, pc}
 802117c:	08028344 	.word	0x08028344
 8021180:	080283e8 	.word	0x080283e8
 8021184:	080283a8 	.word	0x080283a8

08021188 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8021188:	b580      	push	{r7, lr}
 802118a:	b082      	sub	sp, #8
 802118c:	af00      	add	r7, sp, #0
 802118e:	6078      	str	r0, [r7, #4]
 8021190:	460b      	mov	r3, r1
 8021192:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8021194:	687b      	ldr	r3, [r7, #4]
 8021196:	7d1b      	ldrb	r3, [r3, #20]
 8021198:	2b04      	cmp	r3, #4
 802119a:	d00e      	beq.n	80211ba <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80211a0:	2b07      	cmp	r3, #7
 80211a2:	d00a      	beq.n	80211ba <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80211a8:	2b02      	cmp	r3, #2
 80211aa:	d006      	beq.n	80211ba <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80211b0:	2b03      	cmp	r3, #3
 80211b2:	d002      	beq.n	80211ba <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80211b4:	f06f 030a 	mvn.w	r3, #10
 80211b8:	e04f      	b.n	802125a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80211ba:	887b      	ldrh	r3, [r7, #2]
 80211bc:	2b00      	cmp	r3, #0
 80211be:	d101      	bne.n	80211c4 <tcp_write_checks+0x3c>
    return ERR_OK;
 80211c0:	2300      	movs	r3, #0
 80211c2:	e04a      	b.n	802125a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80211c4:	687b      	ldr	r3, [r7, #4]
 80211c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80211ca:	887a      	ldrh	r2, [r7, #2]
 80211cc:	429a      	cmp	r2, r3
 80211ce:	d909      	bls.n	80211e4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	7e9b      	ldrb	r3, [r3, #26]
 80211d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80211d8:	b2da      	uxtb	r2, r3
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80211de:	f04f 33ff 	mov.w	r3, #4294967295
 80211e2:	e03a      	b.n	802125a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80211ea:	2b0a      	cmp	r3, #10
 80211ec:	d806      	bhi.n	80211fc <tcp_write_checks+0x74>
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80211f4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80211f8:	4293      	cmp	r3, r2
 80211fa:	d909      	bls.n	8021210 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80211fc:	687b      	ldr	r3, [r7, #4]
 80211fe:	7e9b      	ldrb	r3, [r3, #26]
 8021200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021204:	b2da      	uxtb	r2, r3
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 802120a:	f04f 33ff 	mov.w	r3, #4294967295
 802120e:	e024      	b.n	802125a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021216:	2b00      	cmp	r3, #0
 8021218:	d00f      	beq.n	802123a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 802121a:	687b      	ldr	r3, [r7, #4]
 802121c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802121e:	2b00      	cmp	r3, #0
 8021220:	d11a      	bne.n	8021258 <tcp_write_checks+0xd0>
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021226:	2b00      	cmp	r3, #0
 8021228:	d116      	bne.n	8021258 <tcp_write_checks+0xd0>
 802122a:	4b0e      	ldr	r3, [pc, #56]	; (8021264 <tcp_write_checks+0xdc>)
 802122c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8021230:	490d      	ldr	r1, [pc, #52]	; (8021268 <tcp_write_checks+0xe0>)
 8021232:	480e      	ldr	r0, [pc, #56]	; (802126c <tcp_write_checks+0xe4>)
 8021234:	f004 fa1c 	bl	8025670 <iprintf>
 8021238:	e00e      	b.n	8021258 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802123e:	2b00      	cmp	r3, #0
 8021240:	d103      	bne.n	802124a <tcp_write_checks+0xc2>
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021246:	2b00      	cmp	r3, #0
 8021248:	d006      	beq.n	8021258 <tcp_write_checks+0xd0>
 802124a:	4b06      	ldr	r3, [pc, #24]	; (8021264 <tcp_write_checks+0xdc>)
 802124c:	f240 1259 	movw	r2, #345	; 0x159
 8021250:	4907      	ldr	r1, [pc, #28]	; (8021270 <tcp_write_checks+0xe8>)
 8021252:	4806      	ldr	r0, [pc, #24]	; (802126c <tcp_write_checks+0xe4>)
 8021254:	f004 fa0c 	bl	8025670 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8021258:	2300      	movs	r3, #0
}
 802125a:	4618      	mov	r0, r3
 802125c:	3708      	adds	r7, #8
 802125e:	46bd      	mov	sp, r7
 8021260:	bd80      	pop	{r7, pc}
 8021262:	bf00      	nop
 8021264:	08028344 	.word	0x08028344
 8021268:	080283fc 	.word	0x080283fc
 802126c:	080283a8 	.word	0x080283a8
 8021270:	08028438 	.word	0x08028438

08021274 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8021274:	b5b0      	push	{r4, r5, r7, lr}
 8021276:	b09a      	sub	sp, #104	; 0x68
 8021278:	af04      	add	r7, sp, #16
 802127a:	60f8      	str	r0, [r7, #12]
 802127c:	60b9      	str	r1, [r7, #8]
 802127e:	4611      	mov	r1, r2
 8021280:	461a      	mov	r2, r3
 8021282:	460b      	mov	r3, r1
 8021284:	80fb      	strh	r3, [r7, #6]
 8021286:	4613      	mov	r3, r2
 8021288:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 802128a:	2300      	movs	r3, #0
 802128c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 802128e:	2300      	movs	r3, #0
 8021290:	653b      	str	r3, [r7, #80]	; 0x50
 8021292:	2300      	movs	r3, #0
 8021294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021296:	2300      	movs	r3, #0
 8021298:	64bb      	str	r3, [r7, #72]	; 0x48
 802129a:	2300      	movs	r3, #0
 802129c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 802129e:	2300      	movs	r3, #0
 80212a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 80212a4:	2300      	movs	r3, #0
 80212a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 80212aa:	2300      	movs	r3, #0
 80212ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80212b0:	2300      	movs	r3, #0
 80212b2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80212b4:	2300      	movs	r3, #0
 80212b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80212b8:	2300      	movs	r3, #0
 80212ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80212bc:	68fb      	ldr	r3, [r7, #12]
 80212be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80212c2:	085b      	lsrs	r3, r3, #1
 80212c4:	b29a      	uxth	r2, r3
 80212c6:	68fb      	ldr	r3, [r7, #12]
 80212c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80212ca:	4293      	cmp	r3, r2
 80212cc:	bf28      	it	cs
 80212ce:	4613      	movcs	r3, r2
 80212d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80212d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	d102      	bne.n	80212de <tcp_write+0x6a>
 80212d8:	68fb      	ldr	r3, [r7, #12]
 80212da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80212dc:	e000      	b.n	80212e0 <tcp_write+0x6c>
 80212de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80212e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80212e2:	68bb      	ldr	r3, [r7, #8]
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d109      	bne.n	80212fc <tcp_write+0x88>
 80212e8:	4b94      	ldr	r3, [pc, #592]	; (802153c <tcp_write+0x2c8>)
 80212ea:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80212ee:	4994      	ldr	r1, [pc, #592]	; (8021540 <tcp_write+0x2cc>)
 80212f0:	4894      	ldr	r0, [pc, #592]	; (8021544 <tcp_write+0x2d0>)
 80212f2:	f004 f9bd 	bl	8025670 <iprintf>
 80212f6:	f06f 030f 	mvn.w	r3, #15
 80212fa:	e30d      	b.n	8021918 <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80212fc:	88fb      	ldrh	r3, [r7, #6]
 80212fe:	4619      	mov	r1, r3
 8021300:	68f8      	ldr	r0, [r7, #12]
 8021302:	f7ff ff41 	bl	8021188 <tcp_write_checks>
 8021306:	4603      	mov	r3, r0
 8021308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 802130c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8021310:	2b00      	cmp	r3, #0
 8021312:	d002      	beq.n	802131a <tcp_write+0xa6>
    return err;
 8021314:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8021318:	e2fe      	b.n	8021918 <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 802131a:	68fb      	ldr	r3, [r7, #12]
 802131c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021320:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8021324:	68fb      	ldr	r3, [r7, #12]
 8021326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021328:	2b00      	cmp	r3, #0
 802132a:	f000 80f8 	beq.w	802151e <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802132e:	68fb      	ldr	r3, [r7, #12]
 8021330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021332:	653b      	str	r3, [r7, #80]	; 0x50
 8021334:	e002      	b.n	802133c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8021336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021338:	681b      	ldr	r3, [r3, #0]
 802133a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 802133c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802133e:	681b      	ldr	r3, [r3, #0]
 8021340:	2b00      	cmp	r3, #0
 8021342:	d1f8      	bne.n	8021336 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8021344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021346:	7a9b      	ldrb	r3, [r3, #10]
 8021348:	f003 0301 	and.w	r3, r3, #1
 802134c:	2b00      	cmp	r3, #0
 802134e:	d001      	beq.n	8021354 <tcp_write+0xe0>
 8021350:	2304      	movs	r3, #4
 8021352:	e000      	b.n	8021356 <tcp_write+0xe2>
 8021354:	2300      	movs	r3, #0
 8021356:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8021358:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802135a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802135c:	891b      	ldrh	r3, [r3, #8]
 802135e:	4619      	mov	r1, r3
 8021360:	8c3b      	ldrh	r3, [r7, #32]
 8021362:	440b      	add	r3, r1
 8021364:	429a      	cmp	r2, r3
 8021366:	da06      	bge.n	8021376 <tcp_write+0x102>
 8021368:	4b74      	ldr	r3, [pc, #464]	; (802153c <tcp_write+0x2c8>)
 802136a:	f240 12c7 	movw	r2, #455	; 0x1c7
 802136e:	4976      	ldr	r1, [pc, #472]	; (8021548 <tcp_write+0x2d4>)
 8021370:	4874      	ldr	r0, [pc, #464]	; (8021544 <tcp_write+0x2d0>)
 8021372:	f004 f97d 	bl	8025670 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8021376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021378:	891a      	ldrh	r2, [r3, #8]
 802137a:	8c3b      	ldrh	r3, [r7, #32]
 802137c:	4413      	add	r3, r2
 802137e:	b29b      	uxth	r3, r3
 8021380:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021382:	1ad3      	subs	r3, r2, r3
 8021384:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8021386:	68fb      	ldr	r3, [r7, #12]
 8021388:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 802138c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 802138e:	8a7b      	ldrh	r3, [r7, #18]
 8021390:	2b00      	cmp	r3, #0
 8021392:	d027      	beq.n	80213e4 <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8021394:	8a7b      	ldrh	r3, [r7, #18]
 8021396:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021398:	429a      	cmp	r2, r3
 802139a:	d206      	bcs.n	80213aa <tcp_write+0x136>
 802139c:	4b67      	ldr	r3, [pc, #412]	; (802153c <tcp_write+0x2c8>)
 802139e:	f240 12d9 	movw	r2, #473	; 0x1d9
 80213a2:	496a      	ldr	r1, [pc, #424]	; (802154c <tcp_write+0x2d8>)
 80213a4:	4867      	ldr	r0, [pc, #412]	; (8021544 <tcp_write+0x2d0>)
 80213a6:	f004 f963 	bl	8025670 <iprintf>
      seg = last_unsent;
 80213aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80213ac:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80213ae:	8a7b      	ldrh	r3, [r7, #18]
 80213b0:	88fa      	ldrh	r2, [r7, #6]
 80213b2:	429a      	cmp	r2, r3
 80213b4:	d901      	bls.n	80213ba <tcp_write+0x146>
 80213b6:	8a7b      	ldrh	r3, [r7, #18]
 80213b8:	e000      	b.n	80213bc <tcp_write+0x148>
 80213ba:	88fb      	ldrh	r3, [r7, #6]
 80213bc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80213be:	4293      	cmp	r3, r2
 80213c0:	bfa8      	it	ge
 80213c2:	4613      	movge	r3, r2
 80213c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80213c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80213ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80213cc:	4413      	add	r3, r2
 80213ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80213d2:	8a7a      	ldrh	r2, [r7, #18]
 80213d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80213d6:	1ad3      	subs	r3, r2, r3
 80213d8:	b29b      	uxth	r3, r3
 80213da:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80213dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80213de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80213e0:	1ad3      	subs	r3, r2, r3
 80213e2:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80213e4:	8a7b      	ldrh	r3, [r7, #18]
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d00b      	beq.n	8021402 <tcp_write+0x18e>
 80213ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80213ee:	88fb      	ldrh	r3, [r7, #6]
 80213f0:	429a      	cmp	r2, r3
 80213f2:	d006      	beq.n	8021402 <tcp_write+0x18e>
 80213f4:	4b51      	ldr	r3, [pc, #324]	; (802153c <tcp_write+0x2c8>)
 80213f6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80213fa:	4955      	ldr	r1, [pc, #340]	; (8021550 <tcp_write+0x2dc>)
 80213fc:	4851      	ldr	r0, [pc, #324]	; (8021544 <tcp_write+0x2d0>)
 80213fe:	f004 f937 	bl	8025670 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8021402:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021406:	88fb      	ldrh	r3, [r7, #6]
 8021408:	429a      	cmp	r2, r3
 802140a:	f080 8169 	bcs.w	80216e0 <tcp_write+0x46c>
 802140e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021410:	2b00      	cmp	r3, #0
 8021412:	f000 8165 	beq.w	80216e0 <tcp_write+0x46c>
 8021416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021418:	891b      	ldrh	r3, [r3, #8]
 802141a:	2b00      	cmp	r3, #0
 802141c:	f000 8160 	beq.w	80216e0 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8021420:	88fa      	ldrh	r2, [r7, #6]
 8021422:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021426:	1ad2      	subs	r2, r2, r3
 8021428:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802142a:	4293      	cmp	r3, r2
 802142c:	bfa8      	it	ge
 802142e:	4613      	movge	r3, r2
 8021430:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8021432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021434:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8021436:	797b      	ldrb	r3, [r7, #5]
 8021438:	f003 0301 	and.w	r3, r3, #1
 802143c:	2b00      	cmp	r3, #0
 802143e:	d027      	beq.n	8021490 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8021440:	f107 0012 	add.w	r0, r7, #18
 8021444:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021446:	8bf9      	ldrh	r1, [r7, #30]
 8021448:	2301      	movs	r3, #1
 802144a:	9302      	str	r3, [sp, #8]
 802144c:	797b      	ldrb	r3, [r7, #5]
 802144e:	9301      	str	r3, [sp, #4]
 8021450:	68fb      	ldr	r3, [r7, #12]
 8021452:	9300      	str	r3, [sp, #0]
 8021454:	4603      	mov	r3, r0
 8021456:	2004      	movs	r0, #4
 8021458:	f7ff fe34 	bl	80210c4 <tcp_pbuf_prealloc>
 802145c:	6578      	str	r0, [r7, #84]	; 0x54
 802145e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021460:	2b00      	cmp	r3, #0
 8021462:	f000 8227 	beq.w	80218b4 <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8021466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021468:	6858      	ldr	r0, [r3, #4]
 802146a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802146e:	68ba      	ldr	r2, [r7, #8]
 8021470:	4413      	add	r3, r2
 8021472:	8bfa      	ldrh	r2, [r7, #30]
 8021474:	4619      	mov	r1, r3
 8021476:	f004 fdae 	bl	8025fd6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 802147a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802147c:	f7fb fc96 	bl	801cdac <pbuf_clen>
 8021480:	4603      	mov	r3, r0
 8021482:	461a      	mov	r2, r3
 8021484:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021488:	4413      	add	r3, r2
 802148a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 802148e:	e03f      	b.n	8021510 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8021490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021492:	685b      	ldr	r3, [r3, #4]
 8021494:	637b      	str	r3, [r7, #52]	; 0x34
 8021496:	e002      	b.n	802149e <tcp_write+0x22a>
 8021498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802149a:	681b      	ldr	r3, [r3, #0]
 802149c:	637b      	str	r3, [r7, #52]	; 0x34
 802149e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80214a0:	681b      	ldr	r3, [r3, #0]
 80214a2:	2b00      	cmp	r3, #0
 80214a4:	d1f8      	bne.n	8021498 <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80214a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80214a8:	7b1b      	ldrb	r3, [r3, #12]
 80214aa:	2b01      	cmp	r3, #1
 80214ac:	d115      	bne.n	80214da <tcp_write+0x266>
 80214ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80214b0:	685b      	ldr	r3, [r3, #4]
 80214b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80214b4:	8952      	ldrh	r2, [r2, #10]
 80214b6:	441a      	add	r2, r3
 80214b8:	68bb      	ldr	r3, [r7, #8]
 80214ba:	429a      	cmp	r2, r3
 80214bc:	d10d      	bne.n	80214da <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80214be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	d006      	beq.n	80214d4 <tcp_write+0x260>
 80214c6:	4b1d      	ldr	r3, [pc, #116]	; (802153c <tcp_write+0x2c8>)
 80214c8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80214cc:	4921      	ldr	r1, [pc, #132]	; (8021554 <tcp_write+0x2e0>)
 80214ce:	481d      	ldr	r0, [pc, #116]	; (8021544 <tcp_write+0x2d0>)
 80214d0:	f004 f8ce 	bl	8025670 <iprintf>
          extendlen = seglen;
 80214d4:	8bfb      	ldrh	r3, [r7, #30]
 80214d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80214d8:	e01a      	b.n	8021510 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80214da:	8bfb      	ldrh	r3, [r7, #30]
 80214dc:	2201      	movs	r2, #1
 80214de:	4619      	mov	r1, r3
 80214e0:	2004      	movs	r0, #4
 80214e2:	f7fb f857 	bl	801c594 <pbuf_alloc>
 80214e6:	6578      	str	r0, [r7, #84]	; 0x54
 80214e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80214ea:	2b00      	cmp	r3, #0
 80214ec:	f000 81e4 	beq.w	80218b8 <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80214f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80214f4:	68ba      	ldr	r2, [r7, #8]
 80214f6:	441a      	add	r2, r3
 80214f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80214fa:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80214fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80214fe:	f7fb fc55 	bl	801cdac <pbuf_clen>
 8021502:	4603      	mov	r3, r0
 8021504:	461a      	mov	r2, r3
 8021506:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802150a:	4413      	add	r3, r2
 802150c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8021510:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021514:	8bfb      	ldrh	r3, [r7, #30]
 8021516:	4413      	add	r3, r2
 8021518:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 802151c:	e0e0      	b.n	80216e0 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 802151e:	68fb      	ldr	r3, [r7, #12]
 8021520:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8021524:	2b00      	cmp	r3, #0
 8021526:	f000 80db 	beq.w	80216e0 <tcp_write+0x46c>
 802152a:	4b04      	ldr	r3, [pc, #16]	; (802153c <tcp_write+0x2c8>)
 802152c:	f240 2225 	movw	r2, #549	; 0x225
 8021530:	4909      	ldr	r1, [pc, #36]	; (8021558 <tcp_write+0x2e4>)
 8021532:	4804      	ldr	r0, [pc, #16]	; (8021544 <tcp_write+0x2d0>)
 8021534:	f004 f89c 	bl	8025670 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8021538:	e0d2      	b.n	80216e0 <tcp_write+0x46c>
 802153a:	bf00      	nop
 802153c:	08028344 	.word	0x08028344
 8021540:	0802846c 	.word	0x0802846c
 8021544:	080283a8 	.word	0x080283a8
 8021548:	080284a0 	.word	0x080284a0
 802154c:	080284b8 	.word	0x080284b8
 8021550:	080284d8 	.word	0x080284d8
 8021554:	080284f8 	.word	0x080284f8
 8021558:	08028524 	.word	0x08028524
    struct pbuf *p;
    u16_t left = len - pos;
 802155c:	88fa      	ldrh	r2, [r7, #6]
 802155e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021562:	1ad3      	subs	r3, r2, r3
 8021564:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8021566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802156a:	b29b      	uxth	r3, r3
 802156c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802156e:	1ad3      	subs	r3, r2, r3
 8021570:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8021572:	8b7a      	ldrh	r2, [r7, #26]
 8021574:	8bbb      	ldrh	r3, [r7, #28]
 8021576:	4293      	cmp	r3, r2
 8021578:	bf28      	it	cs
 802157a:	4613      	movcs	r3, r2
 802157c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 802157e:	797b      	ldrb	r3, [r7, #5]
 8021580:	f003 0301 	and.w	r3, r3, #1
 8021584:	2b00      	cmp	r3, #0
 8021586:	d036      	beq.n	80215f6 <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8021588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802158c:	b29a      	uxth	r2, r3
 802158e:	8b3b      	ldrh	r3, [r7, #24]
 8021590:	4413      	add	r3, r2
 8021592:	b299      	uxth	r1, r3
 8021594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021596:	2b00      	cmp	r3, #0
 8021598:	bf0c      	ite	eq
 802159a:	2301      	moveq	r3, #1
 802159c:	2300      	movne	r3, #0
 802159e:	b2db      	uxtb	r3, r3
 80215a0:	f107 0012 	add.w	r0, r7, #18
 80215a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80215a6:	9302      	str	r3, [sp, #8]
 80215a8:	797b      	ldrb	r3, [r7, #5]
 80215aa:	9301      	str	r3, [sp, #4]
 80215ac:	68fb      	ldr	r3, [r7, #12]
 80215ae:	9300      	str	r3, [sp, #0]
 80215b0:	4603      	mov	r3, r0
 80215b2:	2000      	movs	r0, #0
 80215b4:	f7ff fd86 	bl	80210c4 <tcp_pbuf_prealloc>
 80215b8:	6338      	str	r0, [r7, #48]	; 0x30
 80215ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215bc:	2b00      	cmp	r3, #0
 80215be:	f000 817d 	beq.w	80218bc <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80215c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215c4:	895b      	ldrh	r3, [r3, #10]
 80215c6:	8b3a      	ldrh	r2, [r7, #24]
 80215c8:	429a      	cmp	r2, r3
 80215ca:	d906      	bls.n	80215da <tcp_write+0x366>
 80215cc:	4b8f      	ldr	r3, [pc, #572]	; (802180c <tcp_write+0x598>)
 80215ce:	f240 2241 	movw	r2, #577	; 0x241
 80215d2:	498f      	ldr	r1, [pc, #572]	; (8021810 <tcp_write+0x59c>)
 80215d4:	488f      	ldr	r0, [pc, #572]	; (8021814 <tcp_write+0x5a0>)
 80215d6:	f004 f84b 	bl	8025670 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80215da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215dc:	685a      	ldr	r2, [r3, #4]
 80215de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80215e2:	18d0      	adds	r0, r2, r3
 80215e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80215e8:	68ba      	ldr	r2, [r7, #8]
 80215ea:	4413      	add	r3, r2
 80215ec:	8b3a      	ldrh	r2, [r7, #24]
 80215ee:	4619      	mov	r1, r3
 80215f0:	f004 fcf1 	bl	8025fd6 <memcpy>
 80215f4:	e02e      	b.n	8021654 <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80215f6:	8a7b      	ldrh	r3, [r7, #18]
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d006      	beq.n	802160a <tcp_write+0x396>
 80215fc:	4b83      	ldr	r3, [pc, #524]	; (802180c <tcp_write+0x598>)
 80215fe:	f240 224b 	movw	r2, #587	; 0x24b
 8021602:	4985      	ldr	r1, [pc, #532]	; (8021818 <tcp_write+0x5a4>)
 8021604:	4883      	ldr	r0, [pc, #524]	; (8021814 <tcp_write+0x5a0>)
 8021606:	f004 f833 	bl	8025670 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 802160a:	8b3b      	ldrh	r3, [r7, #24]
 802160c:	2201      	movs	r2, #1
 802160e:	4619      	mov	r1, r3
 8021610:	2000      	movs	r0, #0
 8021612:	f7fa ffbf 	bl	801c594 <pbuf_alloc>
 8021616:	6178      	str	r0, [r7, #20]
 8021618:	697b      	ldr	r3, [r7, #20]
 802161a:	2b00      	cmp	r3, #0
 802161c:	f000 8150 	beq.w	80218c0 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8021620:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021624:	68ba      	ldr	r2, [r7, #8]
 8021626:	441a      	add	r2, r3
 8021628:	697b      	ldr	r3, [r7, #20]
 802162a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802162c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021630:	b29b      	uxth	r3, r3
 8021632:	2200      	movs	r2, #0
 8021634:	4619      	mov	r1, r3
 8021636:	2000      	movs	r0, #0
 8021638:	f7fa ffac 	bl	801c594 <pbuf_alloc>
 802163c:	6338      	str	r0, [r7, #48]	; 0x30
 802163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021640:	2b00      	cmp	r3, #0
 8021642:	d103      	bne.n	802164c <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8021644:	6978      	ldr	r0, [r7, #20]
 8021646:	f7fb fb17 	bl	801cc78 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 802164a:	e13c      	b.n	80218c6 <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 802164c:	6979      	ldr	r1, [r7, #20]
 802164e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021650:	f7fb fbec 	bl	801ce2c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8021654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021656:	f7fb fba9 	bl	801cdac <pbuf_clen>
 802165a:	4603      	mov	r3, r0
 802165c:	461a      	mov	r2, r3
 802165e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021662:	4413      	add	r3, r2
 8021664:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8021668:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802166c:	2b0b      	cmp	r3, #11
 802166e:	d805      	bhi.n	802167c <tcp_write+0x408>
 8021670:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021674:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8021678:	4293      	cmp	r3, r2
 802167a:	d903      	bls.n	8021684 <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 802167c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802167e:	f7fb fafb 	bl	801cc78 <pbuf_free>
      goto memerr;
 8021682:	e120      	b.n	80218c6 <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8021684:	68fb      	ldr	r3, [r7, #12]
 8021686:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021688:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802168c:	441a      	add	r2, r3
 802168e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021692:	9300      	str	r3, [sp, #0]
 8021694:	4613      	mov	r3, r2
 8021696:	2200      	movs	r2, #0
 8021698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802169a:	68f8      	ldr	r0, [r7, #12]
 802169c:	f7ff fc88 	bl	8020fb0 <tcp_create_segment>
 80216a0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80216a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	f000 810d 	beq.w	80218c4 <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80216aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80216ac:	2b00      	cmp	r3, #0
 80216ae:	d102      	bne.n	80216b6 <tcp_write+0x442>
      queue = seg;
 80216b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80216b2:	647b      	str	r3, [r7, #68]	; 0x44
 80216b4:	e00c      	b.n	80216d0 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80216b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80216b8:	2b00      	cmp	r3, #0
 80216ba:	d106      	bne.n	80216ca <tcp_write+0x456>
 80216bc:	4b53      	ldr	r3, [pc, #332]	; (802180c <tcp_write+0x598>)
 80216be:	f240 2285 	movw	r2, #645	; 0x285
 80216c2:	4956      	ldr	r1, [pc, #344]	; (802181c <tcp_write+0x5a8>)
 80216c4:	4853      	ldr	r0, [pc, #332]	; (8021814 <tcp_write+0x5a0>)
 80216c6:	f003 ffd3 	bl	8025670 <iprintf>
      prev_seg->next = seg;
 80216ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80216cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80216ce:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80216d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80216d2:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80216d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80216d8:	8b3b      	ldrh	r3, [r7, #24]
 80216da:	4413      	add	r3, r2
 80216dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80216e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80216e4:	88fb      	ldrh	r3, [r7, #6]
 80216e6:	429a      	cmp	r2, r3
 80216e8:	f4ff af38 	bcc.w	802155c <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80216ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d02c      	beq.n	802174c <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80216f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80216f4:	685b      	ldr	r3, [r3, #4]
 80216f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80216f8:	e01e      	b.n	8021738 <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 80216fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216fc:	891a      	ldrh	r2, [r3, #8]
 80216fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021700:	4413      	add	r3, r2
 8021702:	b29a      	uxth	r2, r3
 8021704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021706:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8021708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802170a:	681b      	ldr	r3, [r3, #0]
 802170c:	2b00      	cmp	r3, #0
 802170e:	d110      	bne.n	8021732 <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8021710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021712:	685b      	ldr	r3, [r3, #4]
 8021714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021716:	8952      	ldrh	r2, [r2, #10]
 8021718:	4413      	add	r3, r2
 802171a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 802171c:	68b9      	ldr	r1, [r7, #8]
 802171e:	4618      	mov	r0, r3
 8021720:	f004 fc59 	bl	8025fd6 <memcpy>
        p->len += oversize_used;
 8021724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021726:	895a      	ldrh	r2, [r3, #10]
 8021728:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802172a:	4413      	add	r3, r2
 802172c:	b29a      	uxth	r2, r3
 802172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021730:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8021732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021734:	681b      	ldr	r3, [r3, #0]
 8021736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802173a:	2b00      	cmp	r3, #0
 802173c:	d1dd      	bne.n	80216fa <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 802173e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021740:	891a      	ldrh	r2, [r3, #8]
 8021742:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021744:	4413      	add	r3, r2
 8021746:	b29a      	uxth	r2, r3
 8021748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802174a:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 802174c:	8a7a      	ldrh	r2, [r7, #18]
 802174e:	68fb      	ldr	r3, [r7, #12]
 8021750:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8021754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021756:	2b00      	cmp	r3, #0
 8021758:	d018      	beq.n	802178c <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 802175a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802175c:	2b00      	cmp	r3, #0
 802175e:	d106      	bne.n	802176e <tcp_write+0x4fa>
 8021760:	4b2a      	ldr	r3, [pc, #168]	; (802180c <tcp_write+0x598>)
 8021762:	f240 22bb 	movw	r2, #699	; 0x2bb
 8021766:	492e      	ldr	r1, [pc, #184]	; (8021820 <tcp_write+0x5ac>)
 8021768:	482a      	ldr	r0, [pc, #168]	; (8021814 <tcp_write+0x5a0>)
 802176a:	f003 ff81 	bl	8025670 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 802176e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021770:	685b      	ldr	r3, [r3, #4]
 8021772:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021774:	4618      	mov	r0, r3
 8021776:	f7fb fb59 	bl	801ce2c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 802177a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802177c:	891a      	ldrh	r2, [r3, #8]
 802177e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021780:	891b      	ldrh	r3, [r3, #8]
 8021782:	4413      	add	r3, r2
 8021784:	b29a      	uxth	r2, r3
 8021786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021788:	811a      	strh	r2, [r3, #8]
 802178a:	e037      	b.n	80217fc <tcp_write+0x588>
  } else if (extendlen > 0) {
 802178c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802178e:	2b00      	cmp	r3, #0
 8021790:	d034      	beq.n	80217fc <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8021792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021794:	2b00      	cmp	r3, #0
 8021796:	d003      	beq.n	80217a0 <tcp_write+0x52c>
 8021798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802179a:	685b      	ldr	r3, [r3, #4]
 802179c:	2b00      	cmp	r3, #0
 802179e:	d106      	bne.n	80217ae <tcp_write+0x53a>
 80217a0:	4b1a      	ldr	r3, [pc, #104]	; (802180c <tcp_write+0x598>)
 80217a2:	f240 22c1 	movw	r2, #705	; 0x2c1
 80217a6:	491f      	ldr	r1, [pc, #124]	; (8021824 <tcp_write+0x5b0>)
 80217a8:	481a      	ldr	r0, [pc, #104]	; (8021814 <tcp_write+0x5a0>)
 80217aa:	f003 ff61 	bl	8025670 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80217ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217b0:	685b      	ldr	r3, [r3, #4]
 80217b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80217b4:	e009      	b.n	80217ca <tcp_write+0x556>
      p->tot_len += extendlen;
 80217b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217b8:	891a      	ldrh	r2, [r3, #8]
 80217ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217bc:	4413      	add	r3, r2
 80217be:	b29a      	uxth	r2, r3
 80217c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217c2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80217c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217c6:	681b      	ldr	r3, [r3, #0]
 80217c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80217ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217cc:	681b      	ldr	r3, [r3, #0]
 80217ce:	2b00      	cmp	r3, #0
 80217d0:	d1f1      	bne.n	80217b6 <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 80217d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217d4:	891a      	ldrh	r2, [r3, #8]
 80217d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217d8:	4413      	add	r3, r2
 80217da:	b29a      	uxth	r2, r3
 80217dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217de:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80217e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217e2:	895a      	ldrh	r2, [r3, #10]
 80217e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217e6:	4413      	add	r3, r2
 80217e8:	b29a      	uxth	r2, r3
 80217ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217ec:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80217ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217f0:	891a      	ldrh	r2, [r3, #8]
 80217f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80217f4:	4413      	add	r3, r2
 80217f6:	b29a      	uxth	r2, r3
 80217f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217fa:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80217fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80217fe:	2b00      	cmp	r3, #0
 8021800:	d112      	bne.n	8021828 <tcp_write+0x5b4>
    pcb->unsent = queue;
 8021802:	68fb      	ldr	r3, [r7, #12]
 8021804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021806:	669a      	str	r2, [r3, #104]	; 0x68
 8021808:	e011      	b.n	802182e <tcp_write+0x5ba>
 802180a:	bf00      	nop
 802180c:	08028344 	.word	0x08028344
 8021810:	08028554 	.word	0x08028554
 8021814:	080283a8 	.word	0x080283a8
 8021818:	08028594 	.word	0x08028594
 802181c:	080285a4 	.word	0x080285a4
 8021820:	080285b8 	.word	0x080285b8
 8021824:	080285f0 	.word	0x080285f0
  } else {
    last_unsent->next = queue;
 8021828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802182a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802182c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 802182e:	68fb      	ldr	r3, [r7, #12]
 8021830:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021832:	88fb      	ldrh	r3, [r7, #6]
 8021834:	441a      	add	r2, r3
 8021836:	68fb      	ldr	r3, [r7, #12]
 8021838:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 802183a:	68fb      	ldr	r3, [r7, #12]
 802183c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8021840:	88fb      	ldrh	r3, [r7, #6]
 8021842:	1ad3      	subs	r3, r2, r3
 8021844:	b29a      	uxth	r2, r3
 8021846:	68fb      	ldr	r3, [r7, #12]
 8021848:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 802184c:	68fb      	ldr	r3, [r7, #12]
 802184e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8021852:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8021856:	68fb      	ldr	r3, [r7, #12]
 8021858:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802185c:	2b00      	cmp	r3, #0
 802185e:	d00e      	beq.n	802187e <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8021860:	68fb      	ldr	r3, [r7, #12]
 8021862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021864:	2b00      	cmp	r3, #0
 8021866:	d10a      	bne.n	802187e <tcp_write+0x60a>
 8021868:	68fb      	ldr	r3, [r7, #12]
 802186a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802186c:	2b00      	cmp	r3, #0
 802186e:	d106      	bne.n	802187e <tcp_write+0x60a>
 8021870:	4b2b      	ldr	r3, [pc, #172]	; (8021920 <tcp_write+0x6ac>)
 8021872:	f240 22ed 	movw	r2, #749	; 0x2ed
 8021876:	492b      	ldr	r1, [pc, #172]	; (8021924 <tcp_write+0x6b0>)
 8021878:	482b      	ldr	r0, [pc, #172]	; (8021928 <tcp_write+0x6b4>)
 802187a:	f003 fef9 	bl	8025670 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 802187e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021880:	2b00      	cmp	r3, #0
 8021882:	d015      	beq.n	80218b0 <tcp_write+0x63c>
 8021884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021886:	68db      	ldr	r3, [r3, #12]
 8021888:	2b00      	cmp	r3, #0
 802188a:	d011      	beq.n	80218b0 <tcp_write+0x63c>
 802188c:	797b      	ldrb	r3, [r7, #5]
 802188e:	f003 0302 	and.w	r3, r3, #2
 8021892:	2b00      	cmp	r3, #0
 8021894:	d10c      	bne.n	80218b0 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8021896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021898:	68dc      	ldr	r4, [r3, #12]
 802189a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802189c:	68db      	ldr	r3, [r3, #12]
 802189e:	899b      	ldrh	r3, [r3, #12]
 80218a0:	b29d      	uxth	r5, r3
 80218a2:	2008      	movs	r0, #8
 80218a4:	f7f7 fd58 	bl	8019358 <lwip_htons>
 80218a8:	4603      	mov	r3, r0
 80218aa:	432b      	orrs	r3, r5
 80218ac:	b29b      	uxth	r3, r3
 80218ae:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 80218b0:	2300      	movs	r3, #0
 80218b2:	e031      	b.n	8021918 <tcp_write+0x6a4>
          goto memerr;
 80218b4:	bf00      	nop
 80218b6:	e006      	b.n	80218c6 <tcp_write+0x652>
            goto memerr;
 80218b8:	bf00      	nop
 80218ba:	e004      	b.n	80218c6 <tcp_write+0x652>
        goto memerr;
 80218bc:	bf00      	nop
 80218be:	e002      	b.n	80218c6 <tcp_write+0x652>
        goto memerr;
 80218c0:	bf00      	nop
 80218c2:	e000      	b.n	80218c6 <tcp_write+0x652>
      goto memerr;
 80218c4:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80218c6:	68fb      	ldr	r3, [r7, #12]
 80218c8:	7e9b      	ldrb	r3, [r3, #26]
 80218ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80218ce:	b2da      	uxtb	r2, r3
 80218d0:	68fb      	ldr	r3, [r7, #12]
 80218d2:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80218d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80218d6:	2b00      	cmp	r3, #0
 80218d8:	d002      	beq.n	80218e0 <tcp_write+0x66c>
    pbuf_free(concat_p);
 80218da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80218dc:	f7fb f9cc 	bl	801cc78 <pbuf_free>
  }
  if (queue != NULL) {
 80218e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80218e2:	2b00      	cmp	r3, #0
 80218e4:	d002      	beq.n	80218ec <tcp_write+0x678>
    tcp_segs_free(queue);
 80218e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80218e8:	f7fc fccd 	bl	801e286 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80218ec:	68fb      	ldr	r3, [r7, #12]
 80218ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d00e      	beq.n	8021914 <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80218f6:	68fb      	ldr	r3, [r7, #12]
 80218f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80218fa:	2b00      	cmp	r3, #0
 80218fc:	d10a      	bne.n	8021914 <tcp_write+0x6a0>
 80218fe:	68fb      	ldr	r3, [r7, #12]
 8021900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021902:	2b00      	cmp	r3, #0
 8021904:	d106      	bne.n	8021914 <tcp_write+0x6a0>
 8021906:	4b06      	ldr	r3, [pc, #24]	; (8021920 <tcp_write+0x6ac>)
 8021908:	f240 3202 	movw	r2, #770	; 0x302
 802190c:	4905      	ldr	r1, [pc, #20]	; (8021924 <tcp_write+0x6b0>)
 802190e:	4806      	ldr	r0, [pc, #24]	; (8021928 <tcp_write+0x6b4>)
 8021910:	f003 feae 	bl	8025670 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8021914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021918:	4618      	mov	r0, r3
 802191a:	3758      	adds	r7, #88	; 0x58
 802191c:	46bd      	mov	sp, r7
 802191e:	bdb0      	pop	{r4, r5, r7, pc}
 8021920:	08028344 	.word	0x08028344
 8021924:	08028628 	.word	0x08028628
 8021928:	080283a8 	.word	0x080283a8

0802192c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 802192c:	b580      	push	{r7, lr}
 802192e:	b08a      	sub	sp, #40	; 0x28
 8021930:	af02      	add	r7, sp, #8
 8021932:	6078      	str	r0, [r7, #4]
 8021934:	460b      	mov	r3, r1
 8021936:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8021938:	2300      	movs	r3, #0
 802193a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 802193c:	2300      	movs	r3, #0
 802193e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8021940:	78fb      	ldrb	r3, [r7, #3]
 8021942:	f003 0303 	and.w	r3, r3, #3
 8021946:	2b00      	cmp	r3, #0
 8021948:	d106      	bne.n	8021958 <tcp_enqueue_flags+0x2c>
 802194a:	4b70      	ldr	r3, [pc, #448]	; (8021b0c <tcp_enqueue_flags+0x1e0>)
 802194c:	f240 321b 	movw	r2, #795	; 0x31b
 8021950:	496f      	ldr	r1, [pc, #444]	; (8021b10 <tcp_enqueue_flags+0x1e4>)
 8021952:	4870      	ldr	r0, [pc, #448]	; (8021b14 <tcp_enqueue_flags+0x1e8>)
 8021954:	f003 fe8c 	bl	8025670 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8021958:	687b      	ldr	r3, [r7, #4]
 802195a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802195e:	2b0a      	cmp	r3, #10
 8021960:	d806      	bhi.n	8021970 <tcp_enqueue_flags+0x44>
 8021962:	687b      	ldr	r3, [r7, #4]
 8021964:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021968:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 802196c:	4293      	cmp	r3, r2
 802196e:	d90e      	bls.n	802198e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8021970:	78fb      	ldrb	r3, [r7, #3]
 8021972:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8021976:	2b00      	cmp	r3, #0
 8021978:	d109      	bne.n	802198e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 802197a:	687b      	ldr	r3, [r7, #4]
 802197c:	7e9b      	ldrb	r3, [r3, #26]
 802197e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021982:	b2da      	uxtb	r2, r3
 8021984:	687b      	ldr	r3, [r7, #4]
 8021986:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8021988:	f04f 33ff 	mov.w	r3, #4294967295
 802198c:	e0ba      	b.n	8021b04 <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 802198e:	78fb      	ldrb	r3, [r7, #3]
 8021990:	f003 0302 	and.w	r3, r3, #2
 8021994:	2b00      	cmp	r3, #0
 8021996:	d001      	beq.n	802199c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8021998:	2301      	movs	r3, #1
 802199a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 802199c:	7ffb      	ldrb	r3, [r7, #31]
 802199e:	f003 0301 	and.w	r3, r3, #1
 80219a2:	2b00      	cmp	r3, #0
 80219a4:	d001      	beq.n	80219aa <tcp_enqueue_flags+0x7e>
 80219a6:	2304      	movs	r3, #4
 80219a8:	e000      	b.n	80219ac <tcp_enqueue_flags+0x80>
 80219aa:	2300      	movs	r3, #0
 80219ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80219ae:	7dfb      	ldrb	r3, [r7, #23]
 80219b0:	b29b      	uxth	r3, r3
 80219b2:	2200      	movs	r2, #0
 80219b4:	4619      	mov	r1, r3
 80219b6:	2000      	movs	r0, #0
 80219b8:	f7fa fdec 	bl	801c594 <pbuf_alloc>
 80219bc:	6138      	str	r0, [r7, #16]
 80219be:	693b      	ldr	r3, [r7, #16]
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	d109      	bne.n	80219d8 <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 80219c4:	687b      	ldr	r3, [r7, #4]
 80219c6:	7e9b      	ldrb	r3, [r3, #26]
 80219c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80219cc:	b2da      	uxtb	r2, r3
 80219ce:	687b      	ldr	r3, [r7, #4]
 80219d0:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80219d2:	f04f 33ff 	mov.w	r3, #4294967295
 80219d6:	e095      	b.n	8021b04 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80219d8:	693b      	ldr	r3, [r7, #16]
 80219da:	895a      	ldrh	r2, [r3, #10]
 80219dc:	7dfb      	ldrb	r3, [r7, #23]
 80219de:	b29b      	uxth	r3, r3
 80219e0:	429a      	cmp	r2, r3
 80219e2:	d206      	bcs.n	80219f2 <tcp_enqueue_flags+0xc6>
 80219e4:	4b49      	ldr	r3, [pc, #292]	; (8021b0c <tcp_enqueue_flags+0x1e0>)
 80219e6:	f240 3241 	movw	r2, #833	; 0x341
 80219ea:	494b      	ldr	r1, [pc, #300]	; (8021b18 <tcp_enqueue_flags+0x1ec>)
 80219ec:	4849      	ldr	r0, [pc, #292]	; (8021b14 <tcp_enqueue_flags+0x1e8>)
 80219ee:	f003 fe3f 	bl	8025670 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80219f2:	687b      	ldr	r3, [r7, #4]
 80219f4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80219f6:	78fa      	ldrb	r2, [r7, #3]
 80219f8:	7ffb      	ldrb	r3, [r7, #31]
 80219fa:	9300      	str	r3, [sp, #0]
 80219fc:	460b      	mov	r3, r1
 80219fe:	6939      	ldr	r1, [r7, #16]
 8021a00:	6878      	ldr	r0, [r7, #4]
 8021a02:	f7ff fad5 	bl	8020fb0 <tcp_create_segment>
 8021a06:	60f8      	str	r0, [r7, #12]
 8021a08:	68fb      	ldr	r3, [r7, #12]
 8021a0a:	2b00      	cmp	r3, #0
 8021a0c:	d109      	bne.n	8021a22 <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	7e9b      	ldrb	r3, [r3, #26]
 8021a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021a16:	b2da      	uxtb	r2, r3
 8021a18:	687b      	ldr	r3, [r7, #4]
 8021a1a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8021a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8021a20:	e070      	b.n	8021b04 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8021a22:	68fb      	ldr	r3, [r7, #12]
 8021a24:	68db      	ldr	r3, [r3, #12]
 8021a26:	f003 0303 	and.w	r3, r3, #3
 8021a2a:	2b00      	cmp	r3, #0
 8021a2c:	d006      	beq.n	8021a3c <tcp_enqueue_flags+0x110>
 8021a2e:	4b37      	ldr	r3, [pc, #220]	; (8021b0c <tcp_enqueue_flags+0x1e0>)
 8021a30:	f240 3249 	movw	r2, #841	; 0x349
 8021a34:	4939      	ldr	r1, [pc, #228]	; (8021b1c <tcp_enqueue_flags+0x1f0>)
 8021a36:	4837      	ldr	r0, [pc, #220]	; (8021b14 <tcp_enqueue_flags+0x1e8>)
 8021a38:	f003 fe1a 	bl	8025670 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8021a3c:	68fb      	ldr	r3, [r7, #12]
 8021a3e:	891b      	ldrh	r3, [r3, #8]
 8021a40:	2b00      	cmp	r3, #0
 8021a42:	d006      	beq.n	8021a52 <tcp_enqueue_flags+0x126>
 8021a44:	4b31      	ldr	r3, [pc, #196]	; (8021b0c <tcp_enqueue_flags+0x1e0>)
 8021a46:	f240 324a 	movw	r2, #842	; 0x34a
 8021a4a:	4935      	ldr	r1, [pc, #212]	; (8021b20 <tcp_enqueue_flags+0x1f4>)
 8021a4c:	4831      	ldr	r0, [pc, #196]	; (8021b14 <tcp_enqueue_flags+0x1e8>)
 8021a4e:	f003 fe0f 	bl	8025670 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8021a52:	687b      	ldr	r3, [r7, #4]
 8021a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	d103      	bne.n	8021a62 <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 8021a5a:	687b      	ldr	r3, [r7, #4]
 8021a5c:	68fa      	ldr	r2, [r7, #12]
 8021a5e:	669a      	str	r2, [r3, #104]	; 0x68
 8021a60:	e00d      	b.n	8021a7e <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021a66:	61bb      	str	r3, [r7, #24]
 8021a68:	e002      	b.n	8021a70 <tcp_enqueue_flags+0x144>
 8021a6a:	69bb      	ldr	r3, [r7, #24]
 8021a6c:	681b      	ldr	r3, [r3, #0]
 8021a6e:	61bb      	str	r3, [r7, #24]
 8021a70:	69bb      	ldr	r3, [r7, #24]
 8021a72:	681b      	ldr	r3, [r3, #0]
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d1f8      	bne.n	8021a6a <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 8021a78:	69bb      	ldr	r3, [r7, #24]
 8021a7a:	68fa      	ldr	r2, [r7, #12]
 8021a7c:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8021a7e:	687b      	ldr	r3, [r7, #4]
 8021a80:	2200      	movs	r2, #0
 8021a82:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8021a86:	78fb      	ldrb	r3, [r7, #3]
 8021a88:	f003 0302 	and.w	r3, r3, #2
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	d104      	bne.n	8021a9a <tcp_enqueue_flags+0x16e>
 8021a90:	78fb      	ldrb	r3, [r7, #3]
 8021a92:	f003 0301 	and.w	r3, r3, #1
 8021a96:	2b00      	cmp	r3, #0
 8021a98:	d004      	beq.n	8021aa4 <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021a9e:	1c5a      	adds	r2, r3, #1
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8021aa4:	78fb      	ldrb	r3, [r7, #3]
 8021aa6:	f003 0301 	and.w	r3, r3, #1
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	d006      	beq.n	8021abc <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	7e9b      	ldrb	r3, [r3, #26]
 8021ab2:	f043 0320 	orr.w	r3, r3, #32
 8021ab6:	b2da      	uxtb	r2, r3
 8021ab8:	687b      	ldr	r3, [r7, #4]
 8021aba:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8021abc:	68fb      	ldr	r3, [r7, #12]
 8021abe:	685b      	ldr	r3, [r3, #4]
 8021ac0:	4618      	mov	r0, r3
 8021ac2:	f7fb f973 	bl	801cdac <pbuf_clen>
 8021ac6:	4603      	mov	r3, r0
 8021ac8:	461a      	mov	r2, r3
 8021aca:	687b      	ldr	r3, [r7, #4]
 8021acc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021ad0:	4413      	add	r3, r2
 8021ad2:	b29a      	uxth	r2, r3
 8021ad4:	687b      	ldr	r3, [r7, #4]
 8021ad6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8021ada:	687b      	ldr	r3, [r7, #4]
 8021adc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021ae0:	2b00      	cmp	r3, #0
 8021ae2:	d00e      	beq.n	8021b02 <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021ae8:	2b00      	cmp	r3, #0
 8021aea:	d10a      	bne.n	8021b02 <tcp_enqueue_flags+0x1d6>
 8021aec:	687b      	ldr	r3, [r7, #4]
 8021aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d106      	bne.n	8021b02 <tcp_enqueue_flags+0x1d6>
 8021af4:	4b05      	ldr	r3, [pc, #20]	; (8021b0c <tcp_enqueue_flags+0x1e0>)
 8021af6:	f240 326d 	movw	r2, #877	; 0x36d
 8021afa:	490a      	ldr	r1, [pc, #40]	; (8021b24 <tcp_enqueue_flags+0x1f8>)
 8021afc:	4805      	ldr	r0, [pc, #20]	; (8021b14 <tcp_enqueue_flags+0x1e8>)
 8021afe:	f003 fdb7 	bl	8025670 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8021b02:	2300      	movs	r3, #0
}
 8021b04:	4618      	mov	r0, r3
 8021b06:	3720      	adds	r7, #32
 8021b08:	46bd      	mov	sp, r7
 8021b0a:	bd80      	pop	{r7, pc}
 8021b0c:	08028344 	.word	0x08028344
 8021b10:	08028648 	.word	0x08028648
 8021b14:	080283a8 	.word	0x080283a8
 8021b18:	080286a0 	.word	0x080286a0
 8021b1c:	080286dc 	.word	0x080286dc
 8021b20:	080286f4 	.word	0x080286f4
 8021b24:	08028720 	.word	0x08028720

08021b28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8021b28:	b590      	push	{r4, r7, lr}
 8021b2a:	b08b      	sub	sp, #44	; 0x2c
 8021b2c:	af04      	add	r7, sp, #16
 8021b2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8021b30:	2300      	movs	r3, #0
 8021b32:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8021b34:	7dbb      	ldrb	r3, [r7, #22]
 8021b36:	b29c      	uxth	r4, r3
 8021b38:	687b      	ldr	r3, [r7, #4]
 8021b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021b3c:	4618      	mov	r0, r3
 8021b3e:	f7f7 fc19 	bl	8019374 <lwip_htonl>
 8021b42:	4603      	mov	r3, r0
 8021b44:	2200      	movs	r2, #0
 8021b46:	4621      	mov	r1, r4
 8021b48:	6878      	ldr	r0, [r7, #4]
 8021b4a:	f7ff f977 	bl	8020e3c <tcp_output_alloc_header>
 8021b4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021b50:	693b      	ldr	r3, [r7, #16]
 8021b52:	2b00      	cmp	r3, #0
 8021b54:	d109      	bne.n	8021b6a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	7e9b      	ldrb	r3, [r3, #26]
 8021b5a:	f043 0303 	orr.w	r3, r3, #3
 8021b5e:	b2da      	uxtb	r2, r3
 8021b60:	687b      	ldr	r3, [r7, #4]
 8021b62:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8021b64:	f06f 0301 	mvn.w	r3, #1
 8021b68:	e036      	b.n	8021bd8 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8021b6a:	687b      	ldr	r3, [r7, #4]
 8021b6c:	3304      	adds	r3, #4
 8021b6e:	4618      	mov	r0, r3
 8021b70:	f7f8 fcd4 	bl	801a51c <ip4_route>
 8021b74:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8021b76:	68fb      	ldr	r3, [r7, #12]
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	d102      	bne.n	8021b82 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8021b7c:	23fc      	movs	r3, #252	; 0xfc
 8021b7e:	75fb      	strb	r3, [r7, #23]
 8021b80:	e012      	b.n	8021ba8 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8021b82:	6879      	ldr	r1, [r7, #4]
 8021b84:	687b      	ldr	r3, [r7, #4]
 8021b86:	1d18      	adds	r0, r3, #4
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	7a9c      	ldrb	r4, [r3, #10]
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	7a5b      	ldrb	r3, [r3, #9]
 8021b90:	68fa      	ldr	r2, [r7, #12]
 8021b92:	9202      	str	r2, [sp, #8]
 8021b94:	2206      	movs	r2, #6
 8021b96:	9201      	str	r2, [sp, #4]
 8021b98:	9300      	str	r3, [sp, #0]
 8021b9a:	4623      	mov	r3, r4
 8021b9c:	4602      	mov	r2, r0
 8021b9e:	6938      	ldr	r0, [r7, #16]
 8021ba0:	f7f8 fe60 	bl	801a864 <ip4_output_if>
 8021ba4:	4603      	mov	r3, r0
 8021ba6:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8021ba8:	6938      	ldr	r0, [r7, #16]
 8021baa:	f7fb f865 	bl	801cc78 <pbuf_free>

  if (err != ERR_OK) {
 8021bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8021bb2:	2b00      	cmp	r3, #0
 8021bb4:	d007      	beq.n	8021bc6 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	7e9b      	ldrb	r3, [r3, #26]
 8021bba:	f043 0303 	orr.w	r3, r3, #3
 8021bbe:	b2da      	uxtb	r2, r3
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	769a      	strb	r2, [r3, #26]
 8021bc4:	e006      	b.n	8021bd4 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	7e9b      	ldrb	r3, [r3, #26]
 8021bca:	f023 0303 	bic.w	r3, r3, #3
 8021bce:	b2da      	uxtb	r2, r3
 8021bd0:	687b      	ldr	r3, [r7, #4]
 8021bd2:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8021bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021bd8:	4618      	mov	r0, r3
 8021bda:	371c      	adds	r7, #28
 8021bdc:	46bd      	mov	sp, r7
 8021bde:	bd90      	pop	{r4, r7, pc}

08021be0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8021be0:	b5b0      	push	{r4, r5, r7, lr}
 8021be2:	b08a      	sub	sp, #40	; 0x28
 8021be4:	af00      	add	r7, sp, #0
 8021be6:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	7d1b      	ldrb	r3, [r3, #20]
 8021bec:	2b01      	cmp	r3, #1
 8021bee:	d106      	bne.n	8021bfe <tcp_output+0x1e>
 8021bf0:	4b9b      	ldr	r3, [pc, #620]	; (8021e60 <tcp_output+0x280>)
 8021bf2:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8021bf6:	499b      	ldr	r1, [pc, #620]	; (8021e64 <tcp_output+0x284>)
 8021bf8:	489b      	ldr	r0, [pc, #620]	; (8021e68 <tcp_output+0x288>)
 8021bfa:	f003 fd39 	bl	8025670 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8021bfe:	4b9b      	ldr	r3, [pc, #620]	; (8021e6c <tcp_output+0x28c>)
 8021c00:	681a      	ldr	r2, [r3, #0]
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	429a      	cmp	r2, r3
 8021c06:	d101      	bne.n	8021c0c <tcp_output+0x2c>
    return ERR_OK;
 8021c08:	2300      	movs	r3, #0
 8021c0a:	e1cd      	b.n	8021fa8 <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8021c18:	429a      	cmp	r2, r3
 8021c1a:	d203      	bcs.n	8021c24 <tcp_output+0x44>
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8021c22:	e002      	b.n	8021c2a <tcp_output+0x4a>
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8021c2a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021c30:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	7e9b      	ldrb	r3, [r3, #26]
 8021c36:	f003 0302 	and.w	r3, r3, #2
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d017      	beq.n	8021c6e <tcp_output+0x8e>
 8021c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	d00f      	beq.n	8021c64 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8021c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c46:	68db      	ldr	r3, [r3, #12]
 8021c48:	685b      	ldr	r3, [r3, #4]
 8021c4a:	4618      	mov	r0, r3
 8021c4c:	f7f7 fb92 	bl	8019374 <lwip_htonl>
 8021c50:	4602      	mov	r2, r0
 8021c52:	687b      	ldr	r3, [r7, #4]
 8021c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c56:	1ad3      	subs	r3, r2, r3
 8021c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021c5a:	8912      	ldrh	r2, [r2, #8]
 8021c5c:	441a      	add	r2, r3
     (seg == NULL ||
 8021c5e:	69bb      	ldr	r3, [r7, #24]
 8021c60:	429a      	cmp	r2, r3
 8021c62:	d904      	bls.n	8021c6e <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8021c64:	6878      	ldr	r0, [r7, #4]
 8021c66:	f7ff ff5f 	bl	8021b28 <tcp_send_empty_ack>
 8021c6a:	4603      	mov	r3, r0
 8021c6c:	e19c      	b.n	8021fa8 <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8021c6e:	687b      	ldr	r3, [r7, #4]
 8021c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021c72:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8021c74:	6a3b      	ldr	r3, [r7, #32]
 8021c76:	2b00      	cmp	r3, #0
 8021c78:	d007      	beq.n	8021c8a <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8021c7a:	e002      	b.n	8021c82 <tcp_output+0xa2>
 8021c7c:	6a3b      	ldr	r3, [r7, #32]
 8021c7e:	681b      	ldr	r3, [r3, #0]
 8021c80:	623b      	str	r3, [r7, #32]
 8021c82:	6a3b      	ldr	r3, [r7, #32]
 8021c84:	681b      	ldr	r3, [r3, #0]
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d1f8      	bne.n	8021c7c <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	3304      	adds	r3, #4
 8021c8e:	4618      	mov	r0, r3
 8021c90:	f7f8 fc44 	bl	801a51c <ip4_route>
 8021c94:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8021c96:	697b      	ldr	r3, [r7, #20]
 8021c98:	2b00      	cmp	r3, #0
 8021c9a:	d102      	bne.n	8021ca2 <tcp_output+0xc2>
    return ERR_RTE;
 8021c9c:	f06f 0303 	mvn.w	r3, #3
 8021ca0:	e182      	b.n	8021fa8 <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8021ca2:	687b      	ldr	r3, [r7, #4]
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d003      	beq.n	8021cb0 <tcp_output+0xd0>
 8021ca8:	687b      	ldr	r3, [r7, #4]
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d111      	bne.n	8021cd4 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8021cb0:	697b      	ldr	r3, [r7, #20]
 8021cb2:	2b00      	cmp	r3, #0
 8021cb4:	d002      	beq.n	8021cbc <tcp_output+0xdc>
 8021cb6:	697b      	ldr	r3, [r7, #20]
 8021cb8:	3304      	adds	r3, #4
 8021cba:	e000      	b.n	8021cbe <tcp_output+0xde>
 8021cbc:	2300      	movs	r3, #0
 8021cbe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8021cc0:	693b      	ldr	r3, [r7, #16]
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d102      	bne.n	8021ccc <tcp_output+0xec>
      return ERR_RTE;
 8021cc6:	f06f 0303 	mvn.w	r3, #3
 8021cca:	e16d      	b.n	8021fa8 <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8021ccc:	693b      	ldr	r3, [r7, #16]
 8021cce:	681a      	ldr	r2, [r3, #0]
 8021cd0:	687b      	ldr	r3, [r7, #4]
 8021cd2:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8021cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	f000 813e 	beq.w	8021f58 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8021cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cde:	68db      	ldr	r3, [r3, #12]
 8021ce0:	685b      	ldr	r3, [r3, #4]
 8021ce2:	4618      	mov	r0, r3
 8021ce4:	f7f7 fb46 	bl	8019374 <lwip_htonl>
 8021ce8:	4602      	mov	r2, r0
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021cee:	1ad3      	subs	r3, r2, r3
 8021cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021cf2:	8912      	ldrh	r2, [r2, #8]
 8021cf4:	441a      	add	r2, r3
  if (seg != NULL &&
 8021cf6:	69bb      	ldr	r3, [r7, #24]
 8021cf8:	429a      	cmp	r2, r3
 8021cfa:	f240 812d 	bls.w	8021f58 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8021cfe:	69bb      	ldr	r3, [r7, #24]
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	f000 8129 	beq.w	8021f58 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8021d0c:	461a      	mov	r2, r3
 8021d0e:	69bb      	ldr	r3, [r7, #24]
 8021d10:	429a      	cmp	r2, r3
 8021d12:	f040 8121 	bne.w	8021f58 <tcp_output+0x378>
 8021d16:	687b      	ldr	r3, [r7, #4]
 8021d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	f040 811c 	bne.w	8021f58 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	f040 812b 	bne.w	8021f82 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	2200      	movs	r2, #0
 8021d30:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8021d34:	687b      	ldr	r3, [r7, #4]
 8021d36:	2201      	movs	r2, #1
 8021d38:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8021d3c:	e121      	b.n	8021f82 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8021d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d40:	68db      	ldr	r3, [r3, #12]
 8021d42:	899b      	ldrh	r3, [r3, #12]
 8021d44:	b29b      	uxth	r3, r3
 8021d46:	4618      	mov	r0, r3
 8021d48:	f7f7 fb06 	bl	8019358 <lwip_htons>
 8021d4c:	4603      	mov	r3, r0
 8021d4e:	f003 0304 	and.w	r3, r3, #4
 8021d52:	2b00      	cmp	r3, #0
 8021d54:	d006      	beq.n	8021d64 <tcp_output+0x184>
 8021d56:	4b42      	ldr	r3, [pc, #264]	; (8021e60 <tcp_output+0x280>)
 8021d58:	f240 4246 	movw	r2, #1094	; 0x446
 8021d5c:	4944      	ldr	r1, [pc, #272]	; (8021e70 <tcp_output+0x290>)
 8021d5e:	4842      	ldr	r0, [pc, #264]	; (8021e68 <tcp_output+0x288>)
 8021d60:	f003 fc86 	bl	8025670 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8021d64:	687b      	ldr	r3, [r7, #4]
 8021d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	d01f      	beq.n	8021dac <tcp_output+0x1cc>
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	7e9b      	ldrb	r3, [r3, #26]
 8021d70:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8021d74:	2b00      	cmp	r3, #0
 8021d76:	d119      	bne.n	8021dac <tcp_output+0x1cc>
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021d7c:	2b00      	cmp	r3, #0
 8021d7e:	d00b      	beq.n	8021d98 <tcp_output+0x1b8>
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021d84:	681b      	ldr	r3, [r3, #0]
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	d110      	bne.n	8021dac <tcp_output+0x1cc>
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021d8e:	891a      	ldrh	r2, [r3, #8]
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8021d94:	429a      	cmp	r2, r3
 8021d96:	d209      	bcs.n	8021dac <tcp_output+0x1cc>
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d004      	beq.n	8021dac <tcp_output+0x1cc>
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021da8:	2b0a      	cmp	r3, #10
 8021daa:	d901      	bls.n	8021db0 <tcp_output+0x1d0>
 8021dac:	2301      	movs	r3, #1
 8021dae:	e000      	b.n	8021db2 <tcp_output+0x1d2>
 8021db0:	2300      	movs	r3, #0
 8021db2:	2b00      	cmp	r3, #0
 8021db4:	d106      	bne.n	8021dc4 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8021db6:	687b      	ldr	r3, [r7, #4]
 8021db8:	7e9b      	ldrb	r3, [r3, #26]
 8021dba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8021dbe:	2b00      	cmp	r3, #0
 8021dc0:	f000 80e1 	beq.w	8021f86 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	7d1b      	ldrb	r3, [r3, #20]
 8021dc8:	2b02      	cmp	r3, #2
 8021dca:	d00c      	beq.n	8021de6 <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8021dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dce:	68dc      	ldr	r4, [r3, #12]
 8021dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dd2:	68db      	ldr	r3, [r3, #12]
 8021dd4:	899b      	ldrh	r3, [r3, #12]
 8021dd6:	b29d      	uxth	r5, r3
 8021dd8:	2010      	movs	r0, #16
 8021dda:	f7f7 fabd 	bl	8019358 <lwip_htons>
 8021dde:	4603      	mov	r3, r0
 8021de0:	432b      	orrs	r3, r5
 8021de2:	b29b      	uxth	r3, r3
 8021de4:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8021de6:	697a      	ldr	r2, [r7, #20]
 8021de8:	6879      	ldr	r1, [r7, #4]
 8021dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021dec:	f000 f8e0 	bl	8021fb0 <tcp_output_segment>
 8021df0:	4603      	mov	r3, r0
 8021df2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8021df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021df8:	2b00      	cmp	r3, #0
 8021dfa:	d009      	beq.n	8021e10 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8021dfc:	687b      	ldr	r3, [r7, #4]
 8021dfe:	7e9b      	ldrb	r3, [r3, #26]
 8021e00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021e04:	b2da      	uxtb	r2, r3
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	769a      	strb	r2, [r3, #26]
      return err;
 8021e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021e0e:	e0cb      	b.n	8021fa8 <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 8021e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e12:	681a      	ldr	r2, [r3, #0]
 8021e14:	687b      	ldr	r3, [r7, #4]
 8021e16:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8021e18:	687b      	ldr	r3, [r7, #4]
 8021e1a:	7d1b      	ldrb	r3, [r3, #20]
 8021e1c:	2b02      	cmp	r3, #2
 8021e1e:	d006      	beq.n	8021e2e <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8021e20:	687b      	ldr	r3, [r7, #4]
 8021e22:	7e9b      	ldrb	r3, [r3, #26]
 8021e24:	f023 0303 	bic.w	r3, r3, #3
 8021e28:	b2da      	uxtb	r2, r3
 8021e2a:	687b      	ldr	r3, [r7, #4]
 8021e2c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8021e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e30:	68db      	ldr	r3, [r3, #12]
 8021e32:	685b      	ldr	r3, [r3, #4]
 8021e34:	4618      	mov	r0, r3
 8021e36:	f7f7 fa9d 	bl	8019374 <lwip_htonl>
 8021e3a:	4604      	mov	r4, r0
 8021e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e3e:	891b      	ldrh	r3, [r3, #8]
 8021e40:	461d      	mov	r5, r3
 8021e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e44:	68db      	ldr	r3, [r3, #12]
 8021e46:	899b      	ldrh	r3, [r3, #12]
 8021e48:	b29b      	uxth	r3, r3
 8021e4a:	4618      	mov	r0, r3
 8021e4c:	f7f7 fa84 	bl	8019358 <lwip_htons>
 8021e50:	4603      	mov	r3, r0
 8021e52:	f003 0303 	and.w	r3, r3, #3
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d00c      	beq.n	8021e74 <tcp_output+0x294>
 8021e5a:	2301      	movs	r3, #1
 8021e5c:	e00b      	b.n	8021e76 <tcp_output+0x296>
 8021e5e:	bf00      	nop
 8021e60:	08028344 	.word	0x08028344
 8021e64:	08028748 	.word	0x08028748
 8021e68:	080283a8 	.word	0x080283a8
 8021e6c:	20008c38 	.word	0x20008c38
 8021e70:	08028770 	.word	0x08028770
 8021e74:	2300      	movs	r3, #0
 8021e76:	442b      	add	r3, r5
 8021e78:	4423      	add	r3, r4
 8021e7a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8021e7c:	687b      	ldr	r3, [r7, #4]
 8021e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021e80:	68bb      	ldr	r3, [r7, #8]
 8021e82:	1ad3      	subs	r3, r2, r3
 8021e84:	2b00      	cmp	r3, #0
 8021e86:	da02      	bge.n	8021e8e <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	68ba      	ldr	r2, [r7, #8]
 8021e8c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8021e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e90:	891b      	ldrh	r3, [r3, #8]
 8021e92:	461c      	mov	r4, r3
 8021e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e96:	68db      	ldr	r3, [r3, #12]
 8021e98:	899b      	ldrh	r3, [r3, #12]
 8021e9a:	b29b      	uxth	r3, r3
 8021e9c:	4618      	mov	r0, r3
 8021e9e:	f7f7 fa5b 	bl	8019358 <lwip_htons>
 8021ea2:	4603      	mov	r3, r0
 8021ea4:	f003 0303 	and.w	r3, r3, #3
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	d001      	beq.n	8021eb0 <tcp_output+0x2d0>
 8021eac:	2301      	movs	r3, #1
 8021eae:	e000      	b.n	8021eb2 <tcp_output+0x2d2>
 8021eb0:	2300      	movs	r3, #0
 8021eb2:	4423      	add	r3, r4
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	d049      	beq.n	8021f4c <tcp_output+0x36c>
      seg->next = NULL;
 8021eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021eba:	2200      	movs	r2, #0
 8021ebc:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d105      	bne.n	8021ed2 <tcp_output+0x2f2>
        pcb->unacked = seg;
 8021ec6:	687b      	ldr	r3, [r7, #4]
 8021ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021eca:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8021ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ece:	623b      	str	r3, [r7, #32]
 8021ed0:	e03f      	b.n	8021f52 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8021ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ed4:	68db      	ldr	r3, [r3, #12]
 8021ed6:	685b      	ldr	r3, [r3, #4]
 8021ed8:	4618      	mov	r0, r3
 8021eda:	f7f7 fa4b 	bl	8019374 <lwip_htonl>
 8021ede:	4604      	mov	r4, r0
 8021ee0:	6a3b      	ldr	r3, [r7, #32]
 8021ee2:	68db      	ldr	r3, [r3, #12]
 8021ee4:	685b      	ldr	r3, [r3, #4]
 8021ee6:	4618      	mov	r0, r3
 8021ee8:	f7f7 fa44 	bl	8019374 <lwip_htonl>
 8021eec:	4603      	mov	r3, r0
 8021eee:	1ae3      	subs	r3, r4, r3
 8021ef0:	2b00      	cmp	r3, #0
 8021ef2:	da24      	bge.n	8021f3e <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8021ef4:	687b      	ldr	r3, [r7, #4]
 8021ef6:	336c      	adds	r3, #108	; 0x6c
 8021ef8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8021efa:	e002      	b.n	8021f02 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8021efc:	69fb      	ldr	r3, [r7, #28]
 8021efe:	681b      	ldr	r3, [r3, #0]
 8021f00:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8021f02:	69fb      	ldr	r3, [r7, #28]
 8021f04:	681b      	ldr	r3, [r3, #0]
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d011      	beq.n	8021f2e <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8021f0a:	69fb      	ldr	r3, [r7, #28]
 8021f0c:	681b      	ldr	r3, [r3, #0]
 8021f0e:	68db      	ldr	r3, [r3, #12]
 8021f10:	685b      	ldr	r3, [r3, #4]
 8021f12:	4618      	mov	r0, r3
 8021f14:	f7f7 fa2e 	bl	8019374 <lwip_htonl>
 8021f18:	4604      	mov	r4, r0
 8021f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f1c:	68db      	ldr	r3, [r3, #12]
 8021f1e:	685b      	ldr	r3, [r3, #4]
 8021f20:	4618      	mov	r0, r3
 8021f22:	f7f7 fa27 	bl	8019374 <lwip_htonl>
 8021f26:	4603      	mov	r3, r0
 8021f28:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	dbe6      	blt.n	8021efc <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8021f2e:	69fb      	ldr	r3, [r7, #28]
 8021f30:	681a      	ldr	r2, [r3, #0]
 8021f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f34:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8021f36:	69fb      	ldr	r3, [r7, #28]
 8021f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021f3a:	601a      	str	r2, [r3, #0]
 8021f3c:	e009      	b.n	8021f52 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8021f3e:	6a3b      	ldr	r3, [r7, #32]
 8021f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021f42:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8021f44:	6a3b      	ldr	r3, [r7, #32]
 8021f46:	681b      	ldr	r3, [r3, #0]
 8021f48:	623b      	str	r3, [r7, #32]
 8021f4a:	e002      	b.n	8021f52 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8021f4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021f4e:	f7fc f9ae 	bl	801e2ae <tcp_seg_free>
    }
    seg = pcb->unsent;
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021f56:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8021f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f5a:	2b00      	cmp	r3, #0
 8021f5c:	d014      	beq.n	8021f88 <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8021f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f60:	68db      	ldr	r3, [r3, #12]
 8021f62:	685b      	ldr	r3, [r3, #4]
 8021f64:	4618      	mov	r0, r3
 8021f66:	f7f7 fa05 	bl	8019374 <lwip_htonl>
 8021f6a:	4602      	mov	r2, r0
 8021f6c:	687b      	ldr	r3, [r7, #4]
 8021f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021f70:	1ad3      	subs	r3, r2, r3
 8021f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021f74:	8912      	ldrh	r2, [r2, #8]
 8021f76:	441a      	add	r2, r3
  while (seg != NULL &&
 8021f78:	69bb      	ldr	r3, [r7, #24]
 8021f7a:	429a      	cmp	r2, r3
 8021f7c:	f67f aedf 	bls.w	8021d3e <tcp_output+0x15e>
 8021f80:	e002      	b.n	8021f88 <tcp_output+0x3a8>
    goto output_done;
 8021f82:	bf00      	nop
 8021f84:	e000      	b.n	8021f88 <tcp_output+0x3a8>
      break;
 8021f86:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021f8c:	2b00      	cmp	r3, #0
 8021f8e:	d103      	bne.n	8021f98 <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8021f90:	687b      	ldr	r3, [r7, #4]
 8021f92:	2200      	movs	r2, #0
 8021f94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8021f98:	687b      	ldr	r3, [r7, #4]
 8021f9a:	7e9b      	ldrb	r3, [r3, #26]
 8021f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021fa0:	b2da      	uxtb	r2, r3
 8021fa2:	687b      	ldr	r3, [r7, #4]
 8021fa4:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8021fa6:	2300      	movs	r3, #0
}
 8021fa8:	4618      	mov	r0, r3
 8021faa:	3728      	adds	r7, #40	; 0x28
 8021fac:	46bd      	mov	sp, r7
 8021fae:	bdb0      	pop	{r4, r5, r7, pc}

08021fb0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8021fb0:	b5b0      	push	{r4, r5, r7, lr}
 8021fb2:	b08c      	sub	sp, #48	; 0x30
 8021fb4:	af04      	add	r7, sp, #16
 8021fb6:	60f8      	str	r0, [r7, #12]
 8021fb8:	60b9      	str	r1, [r7, #8]
 8021fba:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8021fbc:	68fb      	ldr	r3, [r7, #12]
 8021fbe:	685b      	ldr	r3, [r3, #4]
 8021fc0:	89db      	ldrh	r3, [r3, #14]
 8021fc2:	2b01      	cmp	r3, #1
 8021fc4:	d001      	beq.n	8021fca <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8021fc6:	2300      	movs	r3, #0
 8021fc8:	e08b      	b.n	80220e2 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8021fca:	68fb      	ldr	r3, [r7, #12]
 8021fcc:	68dc      	ldr	r4, [r3, #12]
 8021fce:	68bb      	ldr	r3, [r7, #8]
 8021fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021fd2:	4618      	mov	r0, r3
 8021fd4:	f7f7 f9ce 	bl	8019374 <lwip_htonl>
 8021fd8:	4603      	mov	r3, r0
 8021fda:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8021fdc:	68fb      	ldr	r3, [r7, #12]
 8021fde:	68dc      	ldr	r4, [r3, #12]
 8021fe0:	68bb      	ldr	r3, [r7, #8]
 8021fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021fe4:	4618      	mov	r0, r3
 8021fe6:	f7f7 f9b7 	bl	8019358 <lwip_htons>
 8021fea:	4603      	mov	r3, r0
 8021fec:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8021fee:	68bb      	ldr	r3, [r7, #8]
 8021ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021ff2:	68ba      	ldr	r2, [r7, #8]
 8021ff4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8021ff6:	441a      	add	r2, r3
 8021ff8:	68bb      	ldr	r3, [r7, #8]
 8021ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8021ffc:	68fb      	ldr	r3, [r7, #12]
 8021ffe:	68db      	ldr	r3, [r3, #12]
 8022000:	3314      	adds	r3, #20
 8022002:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8022004:	68fb      	ldr	r3, [r7, #12]
 8022006:	7a9b      	ldrb	r3, [r3, #10]
 8022008:	f003 0301 	and.w	r3, r3, #1
 802200c:	2b00      	cmp	r3, #0
 802200e:	d014      	beq.n	802203a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8022010:	68bb      	ldr	r3, [r7, #8]
 8022012:	3304      	adds	r3, #4
 8022014:	4619      	mov	r1, r3
 8022016:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 802201a:	f7fc fc73 	bl	801e904 <tcp_eff_send_mss_impl>
 802201e:	4603      	mov	r3, r0
 8022020:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8022022:	8b7b      	ldrh	r3, [r7, #26]
 8022024:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8022028:	4618      	mov	r0, r3
 802202a:	f7f7 f9a3 	bl	8019374 <lwip_htonl>
 802202e:	4602      	mov	r2, r0
 8022030:	69fb      	ldr	r3, [r7, #28]
 8022032:	601a      	str	r2, [r3, #0]
    opts += 1;
 8022034:	69fb      	ldr	r3, [r7, #28]
 8022036:	3304      	adds	r3, #4
 8022038:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 802203a:	68bb      	ldr	r3, [r7, #8]
 802203c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8022040:	2b00      	cmp	r3, #0
 8022042:	da02      	bge.n	802204a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8022044:	68bb      	ldr	r3, [r7, #8]
 8022046:	2200      	movs	r2, #0
 8022048:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 802204a:	68bb      	ldr	r3, [r7, #8]
 802204c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802204e:	2b00      	cmp	r3, #0
 8022050:	d10c      	bne.n	802206c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8022052:	4b26      	ldr	r3, [pc, #152]	; (80220ec <tcp_output_segment+0x13c>)
 8022054:	681a      	ldr	r2, [r3, #0]
 8022056:	68bb      	ldr	r3, [r7, #8]
 8022058:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 802205a:	68fb      	ldr	r3, [r7, #12]
 802205c:	68db      	ldr	r3, [r3, #12]
 802205e:	685b      	ldr	r3, [r3, #4]
 8022060:	4618      	mov	r0, r3
 8022062:	f7f7 f987 	bl	8019374 <lwip_htonl>
 8022066:	4602      	mov	r2, r0
 8022068:	68bb      	ldr	r3, [r7, #8]
 802206a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 802206c:	68fb      	ldr	r3, [r7, #12]
 802206e:	68db      	ldr	r3, [r3, #12]
 8022070:	461a      	mov	r2, r3
 8022072:	68fb      	ldr	r3, [r7, #12]
 8022074:	685b      	ldr	r3, [r3, #4]
 8022076:	685b      	ldr	r3, [r3, #4]
 8022078:	1ad3      	subs	r3, r2, r3
 802207a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 802207c:	68fb      	ldr	r3, [r7, #12]
 802207e:	685b      	ldr	r3, [r3, #4]
 8022080:	68fa      	ldr	r2, [r7, #12]
 8022082:	6852      	ldr	r2, [r2, #4]
 8022084:	8951      	ldrh	r1, [r2, #10]
 8022086:	8b3a      	ldrh	r2, [r7, #24]
 8022088:	1a8a      	subs	r2, r1, r2
 802208a:	b292      	uxth	r2, r2
 802208c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 802208e:	68fb      	ldr	r3, [r7, #12]
 8022090:	685b      	ldr	r3, [r3, #4]
 8022092:	68fa      	ldr	r2, [r7, #12]
 8022094:	6852      	ldr	r2, [r2, #4]
 8022096:	8911      	ldrh	r1, [r2, #8]
 8022098:	8b3a      	ldrh	r2, [r7, #24]
 802209a:	1a8a      	subs	r2, r1, r2
 802209c:	b292      	uxth	r2, r2
 802209e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80220a0:	68fb      	ldr	r3, [r7, #12]
 80220a2:	685b      	ldr	r3, [r3, #4]
 80220a4:	68fa      	ldr	r2, [r7, #12]
 80220a6:	68d2      	ldr	r2, [r2, #12]
 80220a8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80220aa:	68fb      	ldr	r3, [r7, #12]
 80220ac:	68db      	ldr	r3, [r3, #12]
 80220ae:	2200      	movs	r2, #0
 80220b0:	741a      	strb	r2, [r3, #16]
 80220b2:	2200      	movs	r2, #0
 80220b4:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80220b6:	68fb      	ldr	r3, [r7, #12]
 80220b8:	6858      	ldr	r0, [r3, #4]
 80220ba:	68b9      	ldr	r1, [r7, #8]
 80220bc:	68bb      	ldr	r3, [r7, #8]
 80220be:	1d1c      	adds	r4, r3, #4
 80220c0:	68bb      	ldr	r3, [r7, #8]
 80220c2:	7a9d      	ldrb	r5, [r3, #10]
 80220c4:	68bb      	ldr	r3, [r7, #8]
 80220c6:	7a5b      	ldrb	r3, [r3, #9]
 80220c8:	687a      	ldr	r2, [r7, #4]
 80220ca:	9202      	str	r2, [sp, #8]
 80220cc:	2206      	movs	r2, #6
 80220ce:	9201      	str	r2, [sp, #4]
 80220d0:	9300      	str	r3, [sp, #0]
 80220d2:	462b      	mov	r3, r5
 80220d4:	4622      	mov	r2, r4
 80220d6:	f7f8 fbc5 	bl	801a864 <ip4_output_if>
 80220da:	4603      	mov	r3, r0
 80220dc:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80220de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80220e2:	4618      	mov	r0, r3
 80220e4:	3720      	adds	r7, #32
 80220e6:	46bd      	mov	sp, r7
 80220e8:	bdb0      	pop	{r4, r5, r7, pc}
 80220ea:	bf00      	nop
 80220ec:	20008c28 	.word	0x20008c28

080220f0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80220f0:	b580      	push	{r7, lr}
 80220f2:	b08c      	sub	sp, #48	; 0x30
 80220f4:	af04      	add	r7, sp, #16
 80220f6:	60f8      	str	r0, [r7, #12]
 80220f8:	60b9      	str	r1, [r7, #8]
 80220fa:	607a      	str	r2, [r7, #4]
 80220fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80220fe:	2200      	movs	r2, #0
 8022100:	2114      	movs	r1, #20
 8022102:	2001      	movs	r0, #1
 8022104:	f7fa fa46 	bl	801c594 <pbuf_alloc>
 8022108:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 802210a:	69fb      	ldr	r3, [r7, #28]
 802210c:	2b00      	cmp	r3, #0
 802210e:	d059      	beq.n	80221c4 <tcp_rst+0xd4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8022110:	69fb      	ldr	r3, [r7, #28]
 8022112:	895b      	ldrh	r3, [r3, #10]
 8022114:	2b13      	cmp	r3, #19
 8022116:	d806      	bhi.n	8022126 <tcp_rst+0x36>
 8022118:	4b2c      	ldr	r3, [pc, #176]	; (80221cc <tcp_rst+0xdc>)
 802211a:	f240 524d 	movw	r2, #1357	; 0x54d
 802211e:	492c      	ldr	r1, [pc, #176]	; (80221d0 <tcp_rst+0xe0>)
 8022120:	482c      	ldr	r0, [pc, #176]	; (80221d4 <tcp_rst+0xe4>)
 8022122:	f003 faa5 	bl	8025670 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8022126:	69fb      	ldr	r3, [r7, #28]
 8022128:	685b      	ldr	r3, [r3, #4]
 802212a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 802212c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802212e:	4618      	mov	r0, r3
 8022130:	f7f7 f912 	bl	8019358 <lwip_htons>
 8022134:	4603      	mov	r3, r0
 8022136:	461a      	mov	r2, r3
 8022138:	69bb      	ldr	r3, [r7, #24]
 802213a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 802213c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802213e:	4618      	mov	r0, r3
 8022140:	f7f7 f90a 	bl	8019358 <lwip_htons>
 8022144:	4603      	mov	r3, r0
 8022146:	461a      	mov	r2, r3
 8022148:	69bb      	ldr	r3, [r7, #24]
 802214a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 802214c:	68f8      	ldr	r0, [r7, #12]
 802214e:	f7f7 f911 	bl	8019374 <lwip_htonl>
 8022152:	4602      	mov	r2, r0
 8022154:	69bb      	ldr	r3, [r7, #24]
 8022156:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8022158:	68b8      	ldr	r0, [r7, #8]
 802215a:	f7f7 f90b 	bl	8019374 <lwip_htonl>
 802215e:	4602      	mov	r2, r0
 8022160:	69bb      	ldr	r3, [r7, #24]
 8022162:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8022164:	f245 0014 	movw	r0, #20500	; 0x5014
 8022168:	f7f7 f8f6 	bl	8019358 <lwip_htons>
 802216c:	4603      	mov	r3, r0
 802216e:	461a      	mov	r2, r3
 8022170:	69bb      	ldr	r3, [r7, #24]
 8022172:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8022174:	69bb      	ldr	r3, [r7, #24]
 8022176:	2200      	movs	r2, #0
 8022178:	f042 0210 	orr.w	r2, r2, #16
 802217c:	739a      	strb	r2, [r3, #14]
 802217e:	2200      	movs	r2, #0
 8022180:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8022182:	69bb      	ldr	r3, [r7, #24]
 8022184:	2200      	movs	r2, #0
 8022186:	741a      	strb	r2, [r3, #16]
 8022188:	2200      	movs	r2, #0
 802218a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 802218c:	69bb      	ldr	r3, [r7, #24]
 802218e:	2200      	movs	r2, #0
 8022190:	749a      	strb	r2, [r3, #18]
 8022192:	2200      	movs	r2, #0
 8022194:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8022196:	6838      	ldr	r0, [r7, #0]
 8022198:	f7f8 f9c0 	bl	801a51c <ip4_route>
 802219c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 802219e:	697b      	ldr	r3, [r7, #20]
 80221a0:	2b00      	cmp	r3, #0
 80221a2:	d00b      	beq.n	80221bc <tcp_rst+0xcc>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80221a4:	697b      	ldr	r3, [r7, #20]
 80221a6:	9302      	str	r3, [sp, #8]
 80221a8:	2306      	movs	r3, #6
 80221aa:	9301      	str	r3, [sp, #4]
 80221ac:	2300      	movs	r3, #0
 80221ae:	9300      	str	r3, [sp, #0]
 80221b0:	23ff      	movs	r3, #255	; 0xff
 80221b2:	683a      	ldr	r2, [r7, #0]
 80221b4:	6879      	ldr	r1, [r7, #4]
 80221b6:	69f8      	ldr	r0, [r7, #28]
 80221b8:	f7f8 fb54 	bl	801a864 <ip4_output_if>
  }
  pbuf_free(p);
 80221bc:	69f8      	ldr	r0, [r7, #28]
 80221be:	f7fa fd5b 	bl	801cc78 <pbuf_free>
 80221c2:	e000      	b.n	80221c6 <tcp_rst+0xd6>
    return;
 80221c4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80221c6:	3720      	adds	r7, #32
 80221c8:	46bd      	mov	sp, r7
 80221ca:	bd80      	pop	{r7, pc}
 80221cc:	08028344 	.word	0x08028344
 80221d0:	08028378 	.word	0x08028378
 80221d4:	080283a8 	.word	0x080283a8

080221d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80221d8:	b580      	push	{r7, lr}
 80221da:	b084      	sub	sp, #16
 80221dc:	af00      	add	r7, sp, #0
 80221de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80221e0:	687b      	ldr	r3, [r7, #4]
 80221e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d029      	beq.n	802223c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80221e8:	687b      	ldr	r3, [r7, #4]
 80221ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80221ec:	60fb      	str	r3, [r7, #12]
 80221ee:	e002      	b.n	80221f6 <tcp_rexmit_rto+0x1e>
 80221f0:	68fb      	ldr	r3, [r7, #12]
 80221f2:	681b      	ldr	r3, [r3, #0]
 80221f4:	60fb      	str	r3, [r7, #12]
 80221f6:	68fb      	ldr	r3, [r7, #12]
 80221f8:	681b      	ldr	r3, [r3, #0]
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	d1f8      	bne.n	80221f0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8022202:	68fb      	ldr	r3, [r7, #12]
 8022204:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	2200      	movs	r2, #0
 8022212:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802221a:	2bff      	cmp	r3, #255	; 0xff
 802221c:	d007      	beq.n	802222e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 802221e:	687b      	ldr	r3, [r7, #4]
 8022220:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022224:	3301      	adds	r3, #1
 8022226:	b2da      	uxtb	r2, r3
 8022228:	687b      	ldr	r3, [r7, #4]
 802222a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 802222e:	687b      	ldr	r3, [r7, #4]
 8022230:	2200      	movs	r2, #0
 8022232:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8022234:	6878      	ldr	r0, [r7, #4]
 8022236:	f7ff fcd3 	bl	8021be0 <tcp_output>
 802223a:	e000      	b.n	802223e <tcp_rexmit_rto+0x66>
    return;
 802223c:	bf00      	nop
}
 802223e:	3710      	adds	r7, #16
 8022240:	46bd      	mov	sp, r7
 8022242:	bd80      	pop	{r7, pc}

08022244 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8022244:	b590      	push	{r4, r7, lr}
 8022246:	b085      	sub	sp, #20
 8022248:	af00      	add	r7, sp, #0
 802224a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022250:	2b00      	cmp	r3, #0
 8022252:	d043      	beq.n	80222dc <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022258:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 802225a:	68bb      	ldr	r3, [r7, #8]
 802225c:	681a      	ldr	r2, [r3, #0]
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	3368      	adds	r3, #104	; 0x68
 8022266:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8022268:	e002      	b.n	8022270 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 802226a:	68fb      	ldr	r3, [r7, #12]
 802226c:	681b      	ldr	r3, [r3, #0]
 802226e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8022270:	68fb      	ldr	r3, [r7, #12]
 8022272:	681b      	ldr	r3, [r3, #0]
 8022274:	2b00      	cmp	r3, #0
 8022276:	d011      	beq.n	802229c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8022278:	68fb      	ldr	r3, [r7, #12]
 802227a:	681b      	ldr	r3, [r3, #0]
 802227c:	68db      	ldr	r3, [r3, #12]
 802227e:	685b      	ldr	r3, [r3, #4]
 8022280:	4618      	mov	r0, r3
 8022282:	f7f7 f877 	bl	8019374 <lwip_htonl>
 8022286:	4604      	mov	r4, r0
 8022288:	68bb      	ldr	r3, [r7, #8]
 802228a:	68db      	ldr	r3, [r3, #12]
 802228c:	685b      	ldr	r3, [r3, #4]
 802228e:	4618      	mov	r0, r3
 8022290:	f7f7 f870 	bl	8019374 <lwip_htonl>
 8022294:	4603      	mov	r3, r0
 8022296:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8022298:	2b00      	cmp	r3, #0
 802229a:	dbe6      	blt.n	802226a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 802229c:	68fb      	ldr	r3, [r7, #12]
 802229e:	681a      	ldr	r2, [r3, #0]
 80222a0:	68bb      	ldr	r3, [r7, #8]
 80222a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80222a4:	68fb      	ldr	r3, [r7, #12]
 80222a6:	68ba      	ldr	r2, [r7, #8]
 80222a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80222aa:	68bb      	ldr	r3, [r7, #8]
 80222ac:	681b      	ldr	r3, [r3, #0]
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d103      	bne.n	80222ba <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	2200      	movs	r2, #0
 80222b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80222ba:	687b      	ldr	r3, [r7, #4]
 80222bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80222c0:	2bff      	cmp	r3, #255	; 0xff
 80222c2:	d007      	beq.n	80222d4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80222ca:	3301      	adds	r3, #1
 80222cc:	b2da      	uxtb	r2, r3
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80222d4:	687b      	ldr	r3, [r7, #4]
 80222d6:	2200      	movs	r2, #0
 80222d8:	635a      	str	r2, [r3, #52]	; 0x34
 80222da:	e000      	b.n	80222de <tcp_rexmit+0x9a>
    return;
 80222dc:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80222de:	3714      	adds	r7, #20
 80222e0:	46bd      	mov	sp, r7
 80222e2:	bd90      	pop	{r4, r7, pc}

080222e4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80222e4:	b580      	push	{r7, lr}
 80222e6:	b082      	sub	sp, #8
 80222e8:	af00      	add	r7, sp, #0
 80222ea:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80222ec:	687b      	ldr	r3, [r7, #4]
 80222ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	d04a      	beq.n	802238a <tcp_rexmit_fast+0xa6>
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	7e9b      	ldrb	r3, [r3, #26]
 80222f8:	f003 0304 	and.w	r3, r3, #4
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d144      	bne.n	802238a <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8022300:	6878      	ldr	r0, [r7, #4]
 8022302:	f7ff ff9f 	bl	8022244 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8022306:	687b      	ldr	r3, [r7, #4]
 8022308:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8022312:	429a      	cmp	r2, r3
 8022314:	d207      	bcs.n	8022326 <tcp_rexmit_fast+0x42>
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802231c:	0fda      	lsrs	r2, r3, #31
 802231e:	4413      	add	r3, r2
 8022320:	105b      	asrs	r3, r3, #1
 8022322:	b29b      	uxth	r3, r3
 8022324:	e006      	b.n	8022334 <tcp_rexmit_fast+0x50>
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802232c:	0fda      	lsrs	r2, r3, #31
 802232e:	4413      	add	r3, r2
 8022330:	105b      	asrs	r3, r3, #1
 8022332:	b29b      	uxth	r3, r3
 8022334:	687a      	ldr	r2, [r7, #4]
 8022336:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8022340:	461a      	mov	r2, r3
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022346:	005b      	lsls	r3, r3, #1
 8022348:	429a      	cmp	r2, r3
 802234a:	d206      	bcs.n	802235a <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022350:	005b      	lsls	r3, r3, #1
 8022352:	b29a      	uxth	r2, r3
 8022354:	687b      	ldr	r3, [r7, #4]
 8022356:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022364:	4619      	mov	r1, r3
 8022366:	0049      	lsls	r1, r1, #1
 8022368:	440b      	add	r3, r1
 802236a:	b29b      	uxth	r3, r3
 802236c:	4413      	add	r3, r2
 802236e:	b29a      	uxth	r2, r3
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8022376:	687b      	ldr	r3, [r7, #4]
 8022378:	7e9b      	ldrb	r3, [r3, #26]
 802237a:	f043 0304 	orr.w	r3, r3, #4
 802237e:	b2da      	uxtb	r2, r3
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	2200      	movs	r2, #0
 8022388:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 802238a:	bf00      	nop
 802238c:	3708      	adds	r7, #8
 802238e:	46bd      	mov	sp, r7
 8022390:	bd80      	pop	{r7, pc}

08022392 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8022392:	b580      	push	{r7, lr}
 8022394:	b08a      	sub	sp, #40	; 0x28
 8022396:	af04      	add	r7, sp, #16
 8022398:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 802239a:	687b      	ldr	r3, [r7, #4]
 802239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802239e:	3b01      	subs	r3, #1
 80223a0:	4618      	mov	r0, r3
 80223a2:	f7f6 ffe7 	bl	8019374 <lwip_htonl>
 80223a6:	4603      	mov	r3, r0
 80223a8:	2200      	movs	r2, #0
 80223aa:	2100      	movs	r1, #0
 80223ac:	6878      	ldr	r0, [r7, #4]
 80223ae:	f7fe fd45 	bl	8020e3c <tcp_output_alloc_header>
 80223b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80223b4:	693b      	ldr	r3, [r7, #16]
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d102      	bne.n	80223c0 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80223ba:	f04f 33ff 	mov.w	r3, #4294967295
 80223be:	e021      	b.n	8022404 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	3304      	adds	r3, #4
 80223c4:	4618      	mov	r0, r3
 80223c6:	f7f8 f8a9 	bl	801a51c <ip4_route>
 80223ca:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80223cc:	68fb      	ldr	r3, [r7, #12]
 80223ce:	2b00      	cmp	r3, #0
 80223d0:	d102      	bne.n	80223d8 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80223d2:	23fc      	movs	r3, #252	; 0xfc
 80223d4:	75fb      	strb	r3, [r7, #23]
 80223d6:	e010      	b.n	80223fa <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80223d8:	6879      	ldr	r1, [r7, #4]
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	1d1a      	adds	r2, r3, #4
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	7a98      	ldrb	r0, [r3, #10]
 80223e2:	68fb      	ldr	r3, [r7, #12]
 80223e4:	9302      	str	r3, [sp, #8]
 80223e6:	2306      	movs	r3, #6
 80223e8:	9301      	str	r3, [sp, #4]
 80223ea:	2300      	movs	r3, #0
 80223ec:	9300      	str	r3, [sp, #0]
 80223ee:	4603      	mov	r3, r0
 80223f0:	6938      	ldr	r0, [r7, #16]
 80223f2:	f7f8 fa37 	bl	801a864 <ip4_output_if>
 80223f6:	4603      	mov	r3, r0
 80223f8:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80223fa:	6938      	ldr	r0, [r7, #16]
 80223fc:	f7fa fc3c 	bl	801cc78 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8022400:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8022404:	4618      	mov	r0, r3
 8022406:	3718      	adds	r7, #24
 8022408:	46bd      	mov	sp, r7
 802240a:	bd80      	pop	{r7, pc}

0802240c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 802240c:	b590      	push	{r4, r7, lr}
 802240e:	b08f      	sub	sp, #60	; 0x3c
 8022410:	af04      	add	r7, sp, #16
 8022412:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022418:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 802241a:	6a3b      	ldr	r3, [r7, #32]
 802241c:	2b00      	cmp	r3, #0
 802241e:	d102      	bne.n	8022426 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022424:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8022426:	6a3b      	ldr	r3, [r7, #32]
 8022428:	2b00      	cmp	r3, #0
 802242a:	d101      	bne.n	8022430 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 802242c:	2300      	movs	r3, #0
 802242e:	e085      	b.n	802253c <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8022430:	6a3b      	ldr	r3, [r7, #32]
 8022432:	68db      	ldr	r3, [r3, #12]
 8022434:	899b      	ldrh	r3, [r3, #12]
 8022436:	b29b      	uxth	r3, r3
 8022438:	4618      	mov	r0, r3
 802243a:	f7f6 ff8d 	bl	8019358 <lwip_htons>
 802243e:	4603      	mov	r3, r0
 8022440:	f003 0301 	and.w	r3, r3, #1
 8022444:	2b00      	cmp	r3, #0
 8022446:	d005      	beq.n	8022454 <tcp_zero_window_probe+0x48>
 8022448:	6a3b      	ldr	r3, [r7, #32]
 802244a:	891b      	ldrh	r3, [r3, #8]
 802244c:	2b00      	cmp	r3, #0
 802244e:	d101      	bne.n	8022454 <tcp_zero_window_probe+0x48>
 8022450:	2301      	movs	r3, #1
 8022452:	e000      	b.n	8022456 <tcp_zero_window_probe+0x4a>
 8022454:	2300      	movs	r3, #0
 8022456:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8022458:	7ffb      	ldrb	r3, [r7, #31]
 802245a:	2b00      	cmp	r3, #0
 802245c:	bf0c      	ite	eq
 802245e:	2301      	moveq	r3, #1
 8022460:	2300      	movne	r3, #0
 8022462:	b2db      	uxtb	r3, r3
 8022464:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8022466:	6a3b      	ldr	r3, [r7, #32]
 8022468:	68db      	ldr	r3, [r3, #12]
 802246a:	685b      	ldr	r3, [r3, #4]
 802246c:	8bba      	ldrh	r2, [r7, #28]
 802246e:	2100      	movs	r1, #0
 8022470:	6878      	ldr	r0, [r7, #4]
 8022472:	f7fe fce3 	bl	8020e3c <tcp_output_alloc_header>
 8022476:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8022478:	69bb      	ldr	r3, [r7, #24]
 802247a:	2b00      	cmp	r3, #0
 802247c:	d102      	bne.n	8022484 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 802247e:	f04f 33ff 	mov.w	r3, #4294967295
 8022482:	e05b      	b.n	802253c <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8022484:	69bb      	ldr	r3, [r7, #24]
 8022486:	685b      	ldr	r3, [r3, #4]
 8022488:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 802248a:	7ffb      	ldrb	r3, [r7, #31]
 802248c:	2b00      	cmp	r3, #0
 802248e:	d00e      	beq.n	80224ae <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8022490:	697b      	ldr	r3, [r7, #20]
 8022492:	899b      	ldrh	r3, [r3, #12]
 8022494:	b29b      	uxth	r3, r3
 8022496:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802249a:	b29c      	uxth	r4, r3
 802249c:	2011      	movs	r0, #17
 802249e:	f7f6 ff5b 	bl	8019358 <lwip_htons>
 80224a2:	4603      	mov	r3, r0
 80224a4:	4323      	orrs	r3, r4
 80224a6:	b29a      	uxth	r2, r3
 80224a8:	697b      	ldr	r3, [r7, #20]
 80224aa:	819a      	strh	r2, [r3, #12]
 80224ac:	e010      	b.n	80224d0 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80224ae:	69bb      	ldr	r3, [r7, #24]
 80224b0:	685b      	ldr	r3, [r3, #4]
 80224b2:	3314      	adds	r3, #20
 80224b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80224b6:	6a3b      	ldr	r3, [r7, #32]
 80224b8:	6858      	ldr	r0, [r3, #4]
 80224ba:	6a3b      	ldr	r3, [r7, #32]
 80224bc:	685b      	ldr	r3, [r3, #4]
 80224be:	891a      	ldrh	r2, [r3, #8]
 80224c0:	6a3b      	ldr	r3, [r7, #32]
 80224c2:	891b      	ldrh	r3, [r3, #8]
 80224c4:	1ad3      	subs	r3, r2, r3
 80224c6:	b29b      	uxth	r3, r3
 80224c8:	2201      	movs	r2, #1
 80224ca:	6939      	ldr	r1, [r7, #16]
 80224cc:	f7fa fdd0 	bl	801d070 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80224d0:	6a3b      	ldr	r3, [r7, #32]
 80224d2:	68db      	ldr	r3, [r3, #12]
 80224d4:	685b      	ldr	r3, [r3, #4]
 80224d6:	4618      	mov	r0, r3
 80224d8:	f7f6 ff4c 	bl	8019374 <lwip_htonl>
 80224dc:	4603      	mov	r3, r0
 80224de:	3301      	adds	r3, #1
 80224e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80224e2:	687b      	ldr	r3, [r7, #4]
 80224e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80224e6:	68fb      	ldr	r3, [r7, #12]
 80224e8:	1ad3      	subs	r3, r2, r3
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	da02      	bge.n	80224f4 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80224ee:	687b      	ldr	r3, [r7, #4]
 80224f0:	68fa      	ldr	r2, [r7, #12]
 80224f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	3304      	adds	r3, #4
 80224f8:	4618      	mov	r0, r3
 80224fa:	f7f8 f80f 	bl	801a51c <ip4_route>
 80224fe:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8022500:	68bb      	ldr	r3, [r7, #8]
 8022502:	2b00      	cmp	r3, #0
 8022504:	d103      	bne.n	802250e <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8022506:	23fc      	movs	r3, #252	; 0xfc
 8022508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802250c:	e011      	b.n	8022532 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 802250e:	6879      	ldr	r1, [r7, #4]
 8022510:	687b      	ldr	r3, [r7, #4]
 8022512:	1d1a      	adds	r2, r3, #4
 8022514:	687b      	ldr	r3, [r7, #4]
 8022516:	7a98      	ldrb	r0, [r3, #10]
 8022518:	68bb      	ldr	r3, [r7, #8]
 802251a:	9302      	str	r3, [sp, #8]
 802251c:	2306      	movs	r3, #6
 802251e:	9301      	str	r3, [sp, #4]
 8022520:	2300      	movs	r3, #0
 8022522:	9300      	str	r3, [sp, #0]
 8022524:	4603      	mov	r3, r0
 8022526:	69b8      	ldr	r0, [r7, #24]
 8022528:	f7f8 f99c 	bl	801a864 <ip4_output_if>
 802252c:	4603      	mov	r3, r0
 802252e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8022532:	69b8      	ldr	r0, [r7, #24]
 8022534:	f7fa fba0 	bl	801cc78 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8022538:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802253c:	4618      	mov	r0, r3
 802253e:	372c      	adds	r7, #44	; 0x2c
 8022540:	46bd      	mov	sp, r7
 8022542:	bd90      	pop	{r4, r7, pc}

08022544 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8022544:	b580      	push	{r7, lr}
 8022546:	b082      	sub	sp, #8
 8022548:	af00      	add	r7, sp, #0
 802254a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 802254c:	f7fa fe12 	bl	801d174 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8022550:	4b0a      	ldr	r3, [pc, #40]	; (802257c <tcpip_tcp_timer+0x38>)
 8022552:	681b      	ldr	r3, [r3, #0]
 8022554:	2b00      	cmp	r3, #0
 8022556:	d103      	bne.n	8022560 <tcpip_tcp_timer+0x1c>
 8022558:	4b09      	ldr	r3, [pc, #36]	; (8022580 <tcpip_tcp_timer+0x3c>)
 802255a:	681b      	ldr	r3, [r3, #0]
 802255c:	2b00      	cmp	r3, #0
 802255e:	d005      	beq.n	802256c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8022560:	2200      	movs	r2, #0
 8022562:	4908      	ldr	r1, [pc, #32]	; (8022584 <tcpip_tcp_timer+0x40>)
 8022564:	20fa      	movs	r0, #250	; 0xfa
 8022566:	f000 f86f 	bl	8022648 <sys_timeout>
 802256a:	e002      	b.n	8022572 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 802256c:	4b06      	ldr	r3, [pc, #24]	; (8022588 <tcpip_tcp_timer+0x44>)
 802256e:	2200      	movs	r2, #0
 8022570:	601a      	str	r2, [r3, #0]
  }
}
 8022572:	bf00      	nop
 8022574:	3708      	adds	r7, #8
 8022576:	46bd      	mov	sp, r7
 8022578:	bd80      	pop	{r7, pc}
 802257a:	bf00      	nop
 802257c:	20008c24 	.word	0x20008c24
 8022580:	20008c34 	.word	0x20008c34
 8022584:	08022545 	.word	0x08022545
 8022588:	20004128 	.word	0x20004128

0802258c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 802258c:	b580      	push	{r7, lr}
 802258e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8022590:	4b0a      	ldr	r3, [pc, #40]	; (80225bc <tcp_timer_needed+0x30>)
 8022592:	681b      	ldr	r3, [r3, #0]
 8022594:	2b00      	cmp	r3, #0
 8022596:	d10f      	bne.n	80225b8 <tcp_timer_needed+0x2c>
 8022598:	4b09      	ldr	r3, [pc, #36]	; (80225c0 <tcp_timer_needed+0x34>)
 802259a:	681b      	ldr	r3, [r3, #0]
 802259c:	2b00      	cmp	r3, #0
 802259e:	d103      	bne.n	80225a8 <tcp_timer_needed+0x1c>
 80225a0:	4b08      	ldr	r3, [pc, #32]	; (80225c4 <tcp_timer_needed+0x38>)
 80225a2:	681b      	ldr	r3, [r3, #0]
 80225a4:	2b00      	cmp	r3, #0
 80225a6:	d007      	beq.n	80225b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80225a8:	4b04      	ldr	r3, [pc, #16]	; (80225bc <tcp_timer_needed+0x30>)
 80225aa:	2201      	movs	r2, #1
 80225ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80225ae:	2200      	movs	r2, #0
 80225b0:	4905      	ldr	r1, [pc, #20]	; (80225c8 <tcp_timer_needed+0x3c>)
 80225b2:	20fa      	movs	r0, #250	; 0xfa
 80225b4:	f000 f848 	bl	8022648 <sys_timeout>
  }
}
 80225b8:	bf00      	nop
 80225ba:	bd80      	pop	{r7, pc}
 80225bc:	20004128 	.word	0x20004128
 80225c0:	20008c24 	.word	0x20008c24
 80225c4:	20008c34 	.word	0x20008c34
 80225c8:	08022545 	.word	0x08022545

080225cc <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80225cc:	b580      	push	{r7, lr}
 80225ce:	b084      	sub	sp, #16
 80225d0:	af00      	add	r7, sp, #0
 80225d2:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80225d8:	68fb      	ldr	r3, [r7, #12]
 80225da:	685b      	ldr	r3, [r3, #4]
 80225dc:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80225de:	68fb      	ldr	r3, [r7, #12]
 80225e0:	681b      	ldr	r3, [r3, #0]
 80225e2:	687a      	ldr	r2, [r7, #4]
 80225e4:	4903      	ldr	r1, [pc, #12]	; (80225f4 <cyclic_timer+0x28>)
 80225e6:	4618      	mov	r0, r3
 80225e8:	f000 f82e 	bl	8022648 <sys_timeout>
}
 80225ec:	bf00      	nop
 80225ee:	3710      	adds	r7, #16
 80225f0:	46bd      	mov	sp, r7
 80225f2:	bd80      	pop	{r7, pc}
 80225f4:	080225cd 	.word	0x080225cd

080225f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80225f8:	b580      	push	{r7, lr}
 80225fa:	b082      	sub	sp, #8
 80225fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80225fe:	2301      	movs	r3, #1
 8022600:	607b      	str	r3, [r7, #4]
 8022602:	e00e      	b.n	8022622 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8022604:	4a0d      	ldr	r2, [pc, #52]	; (802263c <sys_timeouts_init+0x44>)
 8022606:	687b      	ldr	r3, [r7, #4]
 8022608:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	00db      	lsls	r3, r3, #3
 8022610:	4a0a      	ldr	r2, [pc, #40]	; (802263c <sys_timeouts_init+0x44>)
 8022612:	4413      	add	r3, r2
 8022614:	461a      	mov	r2, r3
 8022616:	490a      	ldr	r1, [pc, #40]	; (8022640 <sys_timeouts_init+0x48>)
 8022618:	f000 f816 	bl	8022648 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 802261c:	687b      	ldr	r3, [r7, #4]
 802261e:	3301      	adds	r3, #1
 8022620:	607b      	str	r3, [r7, #4]
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	2b02      	cmp	r3, #2
 8022626:	d9ed      	bls.n	8022604 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8022628:	f001 fe94 	bl	8024354 <sys_now>
 802262c:	4602      	mov	r2, r0
 802262e:	4b05      	ldr	r3, [pc, #20]	; (8022644 <sys_timeouts_init+0x4c>)
 8022630:	601a      	str	r2, [r3, #0]
}
 8022632:	bf00      	nop
 8022634:	3708      	adds	r7, #8
 8022636:	46bd      	mov	sp, r7
 8022638:	bd80      	pop	{r7, pc}
 802263a:	bf00      	nop
 802263c:	0802af5c 	.word	0x0802af5c
 8022640:	080225cd 	.word	0x080225cd
 8022644:	20004124 	.word	0x20004124

08022648 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8022648:	b580      	push	{r7, lr}
 802264a:	b088      	sub	sp, #32
 802264c:	af00      	add	r7, sp, #0
 802264e:	60f8      	str	r0, [r7, #12]
 8022650:	60b9      	str	r1, [r7, #8]
 8022652:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8022654:	200a      	movs	r0, #10
 8022656:	f7f9 fd63 	bl	801c120 <memp_malloc>
 802265a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 802265c:	697b      	ldr	r3, [r7, #20]
 802265e:	2b00      	cmp	r3, #0
 8022660:	d10a      	bne.n	8022678 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8022662:	697b      	ldr	r3, [r7, #20]
 8022664:	2b00      	cmp	r3, #0
 8022666:	f040 8084 	bne.w	8022772 <sys_timeout+0x12a>
 802266a:	4b44      	ldr	r3, [pc, #272]	; (802277c <sys_timeout+0x134>)
 802266c:	22d4      	movs	r2, #212	; 0xd4
 802266e:	4944      	ldr	r1, [pc, #272]	; (8022780 <sys_timeout+0x138>)
 8022670:	4844      	ldr	r0, [pc, #272]	; (8022784 <sys_timeout+0x13c>)
 8022672:	f002 fffd 	bl	8025670 <iprintf>
    return;
 8022676:	e07c      	b.n	8022772 <sys_timeout+0x12a>
  }

  now = sys_now();
 8022678:	f001 fe6c 	bl	8024354 <sys_now>
 802267c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 802267e:	4b42      	ldr	r3, [pc, #264]	; (8022788 <sys_timeout+0x140>)
 8022680:	681b      	ldr	r3, [r3, #0]
 8022682:	2b00      	cmp	r3, #0
 8022684:	d105      	bne.n	8022692 <sys_timeout+0x4a>
    diff = 0;
 8022686:	2300      	movs	r3, #0
 8022688:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 802268a:	4a40      	ldr	r2, [pc, #256]	; (802278c <sys_timeout+0x144>)
 802268c:	693b      	ldr	r3, [r7, #16]
 802268e:	6013      	str	r3, [r2, #0]
 8022690:	e004      	b.n	802269c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8022692:	4b3e      	ldr	r3, [pc, #248]	; (802278c <sys_timeout+0x144>)
 8022694:	681b      	ldr	r3, [r3, #0]
 8022696:	693a      	ldr	r2, [r7, #16]
 8022698:	1ad3      	subs	r3, r2, r3
 802269a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 802269c:	697b      	ldr	r3, [r7, #20]
 802269e:	2200      	movs	r2, #0
 80226a0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80226a2:	697b      	ldr	r3, [r7, #20]
 80226a4:	68ba      	ldr	r2, [r7, #8]
 80226a6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80226a8:	697b      	ldr	r3, [r7, #20]
 80226aa:	687a      	ldr	r2, [r7, #4]
 80226ac:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80226ae:	68fa      	ldr	r2, [r7, #12]
 80226b0:	69bb      	ldr	r3, [r7, #24]
 80226b2:	441a      	add	r2, r3
 80226b4:	697b      	ldr	r3, [r7, #20]
 80226b6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80226b8:	4b33      	ldr	r3, [pc, #204]	; (8022788 <sys_timeout+0x140>)
 80226ba:	681b      	ldr	r3, [r3, #0]
 80226bc:	2b00      	cmp	r3, #0
 80226be:	d103      	bne.n	80226c8 <sys_timeout+0x80>
    next_timeout = timeout;
 80226c0:	4a31      	ldr	r2, [pc, #196]	; (8022788 <sys_timeout+0x140>)
 80226c2:	697b      	ldr	r3, [r7, #20]
 80226c4:	6013      	str	r3, [r2, #0]
    return;
 80226c6:	e055      	b.n	8022774 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80226c8:	4b2f      	ldr	r3, [pc, #188]	; (8022788 <sys_timeout+0x140>)
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	685a      	ldr	r2, [r3, #4]
 80226ce:	68fb      	ldr	r3, [r7, #12]
 80226d0:	429a      	cmp	r2, r3
 80226d2:	d90f      	bls.n	80226f4 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80226d4:	4b2c      	ldr	r3, [pc, #176]	; (8022788 <sys_timeout+0x140>)
 80226d6:	681b      	ldr	r3, [r3, #0]
 80226d8:	4a2b      	ldr	r2, [pc, #172]	; (8022788 <sys_timeout+0x140>)
 80226da:	6812      	ldr	r2, [r2, #0]
 80226dc:	6851      	ldr	r1, [r2, #4]
 80226de:	68fa      	ldr	r2, [r7, #12]
 80226e0:	1a8a      	subs	r2, r1, r2
 80226e2:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80226e4:	4b28      	ldr	r3, [pc, #160]	; (8022788 <sys_timeout+0x140>)
 80226e6:	681a      	ldr	r2, [r3, #0]
 80226e8:	697b      	ldr	r3, [r7, #20]
 80226ea:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80226ec:	4a26      	ldr	r2, [pc, #152]	; (8022788 <sys_timeout+0x140>)
 80226ee:	697b      	ldr	r3, [r7, #20]
 80226f0:	6013      	str	r3, [r2, #0]
 80226f2:	e03f      	b.n	8022774 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80226f4:	4b24      	ldr	r3, [pc, #144]	; (8022788 <sys_timeout+0x140>)
 80226f6:	681b      	ldr	r3, [r3, #0]
 80226f8:	61fb      	str	r3, [r7, #28]
 80226fa:	e036      	b.n	802276a <sys_timeout+0x122>
      timeout->time -= t->time;
 80226fc:	697b      	ldr	r3, [r7, #20]
 80226fe:	685a      	ldr	r2, [r3, #4]
 8022700:	69fb      	ldr	r3, [r7, #28]
 8022702:	685b      	ldr	r3, [r3, #4]
 8022704:	1ad2      	subs	r2, r2, r3
 8022706:	697b      	ldr	r3, [r7, #20]
 8022708:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 802270a:	69fb      	ldr	r3, [r7, #28]
 802270c:	681b      	ldr	r3, [r3, #0]
 802270e:	2b00      	cmp	r3, #0
 8022710:	d006      	beq.n	8022720 <sys_timeout+0xd8>
 8022712:	69fb      	ldr	r3, [r7, #28]
 8022714:	681b      	ldr	r3, [r3, #0]
 8022716:	685a      	ldr	r2, [r3, #4]
 8022718:	697b      	ldr	r3, [r7, #20]
 802271a:	685b      	ldr	r3, [r3, #4]
 802271c:	429a      	cmp	r2, r3
 802271e:	d921      	bls.n	8022764 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8022720:	69fb      	ldr	r3, [r7, #28]
 8022722:	681b      	ldr	r3, [r3, #0]
 8022724:	2b00      	cmp	r3, #0
 8022726:	d009      	beq.n	802273c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8022728:	69fb      	ldr	r3, [r7, #28]
 802272a:	681b      	ldr	r3, [r3, #0]
 802272c:	69fa      	ldr	r2, [r7, #28]
 802272e:	6812      	ldr	r2, [r2, #0]
 8022730:	6851      	ldr	r1, [r2, #4]
 8022732:	697a      	ldr	r2, [r7, #20]
 8022734:	6852      	ldr	r2, [r2, #4]
 8022736:	1a8a      	subs	r2, r1, r2
 8022738:	605a      	str	r2, [r3, #4]
 802273a:	e00b      	b.n	8022754 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 802273c:	697b      	ldr	r3, [r7, #20]
 802273e:	685a      	ldr	r2, [r3, #4]
 8022740:	68fb      	ldr	r3, [r7, #12]
 8022742:	429a      	cmp	r2, r3
 8022744:	d906      	bls.n	8022754 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8022746:	4b10      	ldr	r3, [pc, #64]	; (8022788 <sys_timeout+0x140>)
 8022748:	681b      	ldr	r3, [r3, #0]
 802274a:	685a      	ldr	r2, [r3, #4]
 802274c:	68fb      	ldr	r3, [r7, #12]
 802274e:	441a      	add	r2, r3
 8022750:	697b      	ldr	r3, [r7, #20]
 8022752:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8022754:	69fb      	ldr	r3, [r7, #28]
 8022756:	681a      	ldr	r2, [r3, #0]
 8022758:	697b      	ldr	r3, [r7, #20]
 802275a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 802275c:	69fb      	ldr	r3, [r7, #28]
 802275e:	697a      	ldr	r2, [r7, #20]
 8022760:	601a      	str	r2, [r3, #0]
        break;
 8022762:	e007      	b.n	8022774 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8022764:	69fb      	ldr	r3, [r7, #28]
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	61fb      	str	r3, [r7, #28]
 802276a:	69fb      	ldr	r3, [r7, #28]
 802276c:	2b00      	cmp	r3, #0
 802276e:	d1c5      	bne.n	80226fc <sys_timeout+0xb4>
 8022770:	e000      	b.n	8022774 <sys_timeout+0x12c>
    return;
 8022772:	bf00      	nop
      }
    }
  }
}
 8022774:	3720      	adds	r7, #32
 8022776:	46bd      	mov	sp, r7
 8022778:	bd80      	pop	{r7, pc}
 802277a:	bf00      	nop
 802277c:	08028788 	.word	0x08028788
 8022780:	080287bc 	.word	0x080287bc
 8022784:	080287fc 	.word	0x080287fc
 8022788:	20004120 	.word	0x20004120
 802278c:	20004124 	.word	0x20004124

08022790 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8022790:	b580      	push	{r7, lr}
 8022792:	b086      	sub	sp, #24
 8022794:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8022796:	4b24      	ldr	r3, [pc, #144]	; (8022828 <sys_check_timeouts+0x98>)
 8022798:	681b      	ldr	r3, [r3, #0]
 802279a:	2b00      	cmp	r3, #0
 802279c:	d03f      	beq.n	802281e <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 802279e:	f001 fdd9 	bl	8024354 <sys_now>
 80227a2:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80227a4:	4b21      	ldr	r3, [pc, #132]	; (802282c <sys_check_timeouts+0x9c>)
 80227a6:	681b      	ldr	r3, [r3, #0]
 80227a8:	68fa      	ldr	r2, [r7, #12]
 80227aa:	1ad3      	subs	r3, r2, r3
 80227ac:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 80227ae:	2300      	movs	r3, #0
 80227b0:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80227b2:	4b1d      	ldr	r3, [pc, #116]	; (8022828 <sys_check_timeouts+0x98>)
 80227b4:	681b      	ldr	r3, [r3, #0]
 80227b6:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80227b8:	68bb      	ldr	r3, [r7, #8]
 80227ba:	2b00      	cmp	r3, #0
 80227bc:	d02c      	beq.n	8022818 <sys_check_timeouts+0x88>
 80227be:	68bb      	ldr	r3, [r7, #8]
 80227c0:	685a      	ldr	r2, [r3, #4]
 80227c2:	697b      	ldr	r3, [r7, #20]
 80227c4:	429a      	cmp	r2, r3
 80227c6:	d827      	bhi.n	8022818 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 80227c8:	2301      	movs	r3, #1
 80227ca:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80227cc:	68bb      	ldr	r3, [r7, #8]
 80227ce:	685a      	ldr	r2, [r3, #4]
 80227d0:	4b16      	ldr	r3, [pc, #88]	; (802282c <sys_check_timeouts+0x9c>)
 80227d2:	681b      	ldr	r3, [r3, #0]
 80227d4:	4413      	add	r3, r2
 80227d6:	4a15      	ldr	r2, [pc, #84]	; (802282c <sys_check_timeouts+0x9c>)
 80227d8:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80227da:	68bb      	ldr	r3, [r7, #8]
 80227dc:	685b      	ldr	r3, [r3, #4]
 80227de:	697a      	ldr	r2, [r7, #20]
 80227e0:	1ad3      	subs	r3, r2, r3
 80227e2:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80227e4:	68bb      	ldr	r3, [r7, #8]
 80227e6:	681b      	ldr	r3, [r3, #0]
 80227e8:	4a0f      	ldr	r2, [pc, #60]	; (8022828 <sys_check_timeouts+0x98>)
 80227ea:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80227ec:	68bb      	ldr	r3, [r7, #8]
 80227ee:	689b      	ldr	r3, [r3, #8]
 80227f0:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80227f2:	68bb      	ldr	r3, [r7, #8]
 80227f4:	68db      	ldr	r3, [r3, #12]
 80227f6:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80227f8:	68b9      	ldr	r1, [r7, #8]
 80227fa:	200a      	movs	r0, #10
 80227fc:	f7f9 fce2 	bl	801c1c4 <memp_free>
        if (handler != NULL) {
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	2b00      	cmp	r3, #0
 8022804:	d008      	beq.n	8022818 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8022806:	480a      	ldr	r0, [pc, #40]	; (8022830 <sys_check_timeouts+0xa0>)
 8022808:	f000 fd34 	bl	8023274 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	6838      	ldr	r0, [r7, #0]
 8022810:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8022812:	4807      	ldr	r0, [pc, #28]	; (8022830 <sys_check_timeouts+0xa0>)
 8022814:	f000 fd3d 	bl	8023292 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8022818:	7cfb      	ldrb	r3, [r7, #19]
 802281a:	2b00      	cmp	r3, #0
 802281c:	d1c7      	bne.n	80227ae <sys_check_timeouts+0x1e>
  }
}
 802281e:	bf00      	nop
 8022820:	3718      	adds	r7, #24
 8022822:	46bd      	mov	sp, r7
 8022824:	bd80      	pop	{r7, pc}
 8022826:	bf00      	nop
 8022828:	20004120 	.word	0x20004120
 802282c:	20004124 	.word	0x20004124
 8022830:	200045f8 	.word	0x200045f8

08022834 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8022834:	b580      	push	{r7, lr}
 8022836:	b082      	sub	sp, #8
 8022838:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 802283a:	4b0f      	ldr	r3, [pc, #60]	; (8022878 <sys_timeouts_sleeptime+0x44>)
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	2b00      	cmp	r3, #0
 8022840:	d102      	bne.n	8022848 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8022842:	f04f 33ff 	mov.w	r3, #4294967295
 8022846:	e013      	b.n	8022870 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8022848:	f001 fd84 	bl	8024354 <sys_now>
 802284c:	4602      	mov	r2, r0
 802284e:	4b0b      	ldr	r3, [pc, #44]	; (802287c <sys_timeouts_sleeptime+0x48>)
 8022850:	681b      	ldr	r3, [r3, #0]
 8022852:	1ad3      	subs	r3, r2, r3
 8022854:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8022856:	4b08      	ldr	r3, [pc, #32]	; (8022878 <sys_timeouts_sleeptime+0x44>)
 8022858:	681b      	ldr	r3, [r3, #0]
 802285a:	685a      	ldr	r2, [r3, #4]
 802285c:	687b      	ldr	r3, [r7, #4]
 802285e:	429a      	cmp	r2, r3
 8022860:	d201      	bcs.n	8022866 <sys_timeouts_sleeptime+0x32>
    return 0;
 8022862:	2300      	movs	r3, #0
 8022864:	e004      	b.n	8022870 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8022866:	4b04      	ldr	r3, [pc, #16]	; (8022878 <sys_timeouts_sleeptime+0x44>)
 8022868:	681b      	ldr	r3, [r3, #0]
 802286a:	685a      	ldr	r2, [r3, #4]
 802286c:	687b      	ldr	r3, [r7, #4]
 802286e:	1ad3      	subs	r3, r2, r3
  }
}
 8022870:	4618      	mov	r0, r3
 8022872:	3708      	adds	r7, #8
 8022874:	46bd      	mov	sp, r7
 8022876:	bd80      	pop	{r7, pc}
 8022878:	20004120 	.word	0x20004120
 802287c:	20004124 	.word	0x20004124

08022880 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8022880:	b580      	push	{r7, lr}
 8022882:	b084      	sub	sp, #16
 8022884:	af00      	add	r7, sp, #0
 8022886:	6078      	str	r0, [r7, #4]
 8022888:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 802288a:	4b0f      	ldr	r3, [pc, #60]	; (80228c8 <sys_timeouts_mbox_fetch+0x48>)
 802288c:	681b      	ldr	r3, [r3, #0]
 802288e:	2b00      	cmp	r3, #0
 8022890:	d105      	bne.n	802289e <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8022892:	2200      	movs	r2, #0
 8022894:	6839      	ldr	r1, [r7, #0]
 8022896:	6878      	ldr	r0, [r7, #4]
 8022898:	f000 fbbb 	bl	8023012 <sys_arch_mbox_fetch>
    return;
 802289c:	e011      	b.n	80228c2 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 802289e:	f7ff ffc9 	bl	8022834 <sys_timeouts_sleeptime>
 80228a2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80228a4:	68fb      	ldr	r3, [r7, #12]
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d008      	beq.n	80228bc <sys_timeouts_mbox_fetch+0x3c>
 80228aa:	68fa      	ldr	r2, [r7, #12]
 80228ac:	6839      	ldr	r1, [r7, #0]
 80228ae:	6878      	ldr	r0, [r7, #4]
 80228b0:	f000 fbaf 	bl	8023012 <sys_arch_mbox_fetch>
 80228b4:	4603      	mov	r3, r0
 80228b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80228ba:	d102      	bne.n	80228c2 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80228bc:	f7ff ff68 	bl	8022790 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80228c0:	e7e3      	b.n	802288a <sys_timeouts_mbox_fetch+0xa>
  }
}
 80228c2:	3710      	adds	r7, #16
 80228c4:	46bd      	mov	sp, r7
 80228c6:	bd80      	pop	{r7, pc}
 80228c8:	20004120 	.word	0x20004120

080228cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80228cc:	b480      	push	{r7}
 80228ce:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80228d0:	bf00      	nop
 80228d2:	46bd      	mov	sp, r7
 80228d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228d8:	4770      	bx	lr
	...

080228dc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80228dc:	b480      	push	{r7}
 80228de:	b083      	sub	sp, #12
 80228e0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80228e2:	2300      	movs	r3, #0
 80228e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80228e6:	4b17      	ldr	r3, [pc, #92]	; (8022944 <udp_new_port+0x68>)
 80228e8:	881b      	ldrh	r3, [r3, #0]
 80228ea:	1c5a      	adds	r2, r3, #1
 80228ec:	b291      	uxth	r1, r2
 80228ee:	4a15      	ldr	r2, [pc, #84]	; (8022944 <udp_new_port+0x68>)
 80228f0:	8011      	strh	r1, [r2, #0]
 80228f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80228f6:	4293      	cmp	r3, r2
 80228f8:	d103      	bne.n	8022902 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80228fa:	4b12      	ldr	r3, [pc, #72]	; (8022944 <udp_new_port+0x68>)
 80228fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8022900:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022902:	4b11      	ldr	r3, [pc, #68]	; (8022948 <udp_new_port+0x6c>)
 8022904:	681b      	ldr	r3, [r3, #0]
 8022906:	603b      	str	r3, [r7, #0]
 8022908:	e011      	b.n	802292e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 802290a:	683b      	ldr	r3, [r7, #0]
 802290c:	8a5a      	ldrh	r2, [r3, #18]
 802290e:	4b0d      	ldr	r3, [pc, #52]	; (8022944 <udp_new_port+0x68>)
 8022910:	881b      	ldrh	r3, [r3, #0]
 8022912:	429a      	cmp	r2, r3
 8022914:	d108      	bne.n	8022928 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8022916:	88fb      	ldrh	r3, [r7, #6]
 8022918:	3301      	adds	r3, #1
 802291a:	80fb      	strh	r3, [r7, #6]
 802291c:	88fb      	ldrh	r3, [r7, #6]
 802291e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8022922:	d3e0      	bcc.n	80228e6 <udp_new_port+0xa>
        return 0;
 8022924:	2300      	movs	r3, #0
 8022926:	e007      	b.n	8022938 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022928:	683b      	ldr	r3, [r7, #0]
 802292a:	68db      	ldr	r3, [r3, #12]
 802292c:	603b      	str	r3, [r7, #0]
 802292e:	683b      	ldr	r3, [r7, #0]
 8022930:	2b00      	cmp	r3, #0
 8022932:	d1ea      	bne.n	802290a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8022934:	4b03      	ldr	r3, [pc, #12]	; (8022944 <udp_new_port+0x68>)
 8022936:	881b      	ldrh	r3, [r3, #0]
}
 8022938:	4618      	mov	r0, r3
 802293a:	370c      	adds	r7, #12
 802293c:	46bd      	mov	sp, r7
 802293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022942:	4770      	bx	lr
 8022944:	20000010 	.word	0x20000010
 8022948:	20008c3c 	.word	0x20008c3c

0802294c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 802294c:	b480      	push	{r7}
 802294e:	b085      	sub	sp, #20
 8022950:	af00      	add	r7, sp, #0
 8022952:	60f8      	str	r0, [r7, #12]
 8022954:	60b9      	str	r1, [r7, #8]
 8022956:	4613      	mov	r3, r2
 8022958:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 802295a:	79fb      	ldrb	r3, [r7, #7]
 802295c:	2b00      	cmp	r3, #0
 802295e:	d018      	beq.n	8022992 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022960:	68fb      	ldr	r3, [r7, #12]
 8022962:	2b00      	cmp	r3, #0
 8022964:	d013      	beq.n	802298e <udp_input_local_match+0x42>
 8022966:	68fb      	ldr	r3, [r7, #12]
 8022968:	681b      	ldr	r3, [r3, #0]
 802296a:	2b00      	cmp	r3, #0
 802296c:	d00f      	beq.n	802298e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802296e:	4b14      	ldr	r3, [pc, #80]	; (80229c0 <udp_input_local_match+0x74>)
 8022970:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022976:	d00a      	beq.n	802298e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8022978:	68fb      	ldr	r3, [r7, #12]
 802297a:	681a      	ldr	r2, [r3, #0]
 802297c:	4b10      	ldr	r3, [pc, #64]	; (80229c0 <udp_input_local_match+0x74>)
 802297e:	695b      	ldr	r3, [r3, #20]
 8022980:	405a      	eors	r2, r3
 8022982:	68bb      	ldr	r3, [r7, #8]
 8022984:	3308      	adds	r3, #8
 8022986:	681b      	ldr	r3, [r3, #0]
 8022988:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802298a:	2b00      	cmp	r3, #0
 802298c:	d110      	bne.n	80229b0 <udp_input_local_match+0x64>
          return 1;
 802298e:	2301      	movs	r3, #1
 8022990:	e00f      	b.n	80229b2 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8022992:	68fb      	ldr	r3, [r7, #12]
 8022994:	2b00      	cmp	r3, #0
 8022996:	d009      	beq.n	80229ac <udp_input_local_match+0x60>
 8022998:	68fb      	ldr	r3, [r7, #12]
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	2b00      	cmp	r3, #0
 802299e:	d005      	beq.n	80229ac <udp_input_local_match+0x60>
 80229a0:	68fb      	ldr	r3, [r7, #12]
 80229a2:	681a      	ldr	r2, [r3, #0]
 80229a4:	4b06      	ldr	r3, [pc, #24]	; (80229c0 <udp_input_local_match+0x74>)
 80229a6:	695b      	ldr	r3, [r3, #20]
 80229a8:	429a      	cmp	r2, r3
 80229aa:	d101      	bne.n	80229b0 <udp_input_local_match+0x64>
      return 1;
 80229ac:	2301      	movs	r3, #1
 80229ae:	e000      	b.n	80229b2 <udp_input_local_match+0x66>
    }
  }

  return 0;
 80229b0:	2300      	movs	r3, #0
}
 80229b2:	4618      	mov	r0, r3
 80229b4:	3714      	adds	r7, #20
 80229b6:	46bd      	mov	sp, r7
 80229b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229bc:	4770      	bx	lr
 80229be:	bf00      	nop
 80229c0:	200045fc 	.word	0x200045fc

080229c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80229c4:	b590      	push	{r4, r7, lr}
 80229c6:	b08d      	sub	sp, #52	; 0x34
 80229c8:	af02      	add	r7, sp, #8
 80229ca:	6078      	str	r0, [r7, #4]
 80229cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80229ce:	2300      	movs	r3, #0
 80229d0:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80229d2:	687b      	ldr	r3, [r7, #4]
 80229d4:	895b      	ldrh	r3, [r3, #10]
 80229d6:	2b07      	cmp	r3, #7
 80229d8:	d803      	bhi.n	80229e2 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80229da:	6878      	ldr	r0, [r7, #4]
 80229dc:	f7fa f94c 	bl	801cc78 <pbuf_free>
    goto end;
 80229e0:	e0c6      	b.n	8022b70 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80229e2:	687b      	ldr	r3, [r7, #4]
 80229e4:	685b      	ldr	r3, [r3, #4]
 80229e6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80229e8:	4b63      	ldr	r3, [pc, #396]	; (8022b78 <udp_input+0x1b4>)
 80229ea:	695a      	ldr	r2, [r3, #20]
 80229ec:	4b62      	ldr	r3, [pc, #392]	; (8022b78 <udp_input+0x1b4>)
 80229ee:	681b      	ldr	r3, [r3, #0]
 80229f0:	4619      	mov	r1, r3
 80229f2:	4610      	mov	r0, r2
 80229f4:	f7f8 f808 	bl	801aa08 <ip4_addr_isbroadcast_u32>
 80229f8:	4603      	mov	r3, r0
 80229fa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80229fc:	697b      	ldr	r3, [r7, #20]
 80229fe:	881b      	ldrh	r3, [r3, #0]
 8022a00:	b29b      	uxth	r3, r3
 8022a02:	4618      	mov	r0, r3
 8022a04:	f7f6 fca8 	bl	8019358 <lwip_htons>
 8022a08:	4603      	mov	r3, r0
 8022a0a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8022a0c:	697b      	ldr	r3, [r7, #20]
 8022a0e:	885b      	ldrh	r3, [r3, #2]
 8022a10:	b29b      	uxth	r3, r3
 8022a12:	4618      	mov	r0, r3
 8022a14:	f7f6 fca0 	bl	8019358 <lwip_htons>
 8022a18:	4603      	mov	r3, r0
 8022a1a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8022a1c:	2300      	movs	r3, #0
 8022a1e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8022a20:	2300      	movs	r3, #0
 8022a22:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8022a24:	2300      	movs	r3, #0
 8022a26:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022a28:	4b54      	ldr	r3, [pc, #336]	; (8022b7c <udp_input+0x1b8>)
 8022a2a:	681b      	ldr	r3, [r3, #0]
 8022a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8022a2e:	e03b      	b.n	8022aa8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8022a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a32:	8a5b      	ldrh	r3, [r3, #18]
 8022a34:	89fa      	ldrh	r2, [r7, #14]
 8022a36:	429a      	cmp	r2, r3
 8022a38:	d131      	bne.n	8022a9e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8022a3a:	7cfb      	ldrb	r3, [r7, #19]
 8022a3c:	461a      	mov	r2, r3
 8022a3e:	6839      	ldr	r1, [r7, #0]
 8022a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022a42:	f7ff ff83 	bl	802294c <udp_input_local_match>
 8022a46:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	d028      	beq.n	8022a9e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8022a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a4e:	7c1b      	ldrb	r3, [r3, #16]
 8022a50:	f003 0304 	and.w	r3, r3, #4
 8022a54:	2b00      	cmp	r3, #0
 8022a56:	d104      	bne.n	8022a62 <udp_input+0x9e>
 8022a58:	69fb      	ldr	r3, [r7, #28]
 8022a5a:	2b00      	cmp	r3, #0
 8022a5c:	d101      	bne.n	8022a62 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8022a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a60:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8022a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a64:	8a9b      	ldrh	r3, [r3, #20]
 8022a66:	8a3a      	ldrh	r2, [r7, #16]
 8022a68:	429a      	cmp	r2, r3
 8022a6a:	d118      	bne.n	8022a9e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8022a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a6e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8022a70:	2b00      	cmp	r3, #0
 8022a72:	d005      	beq.n	8022a80 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8022a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a76:	685a      	ldr	r2, [r3, #4]
 8022a78:	4b3f      	ldr	r3, [pc, #252]	; (8022b78 <udp_input+0x1b4>)
 8022a7a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8022a7c:	429a      	cmp	r2, r3
 8022a7e:	d10e      	bne.n	8022a9e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8022a80:	6a3b      	ldr	r3, [r7, #32]
 8022a82:	2b00      	cmp	r3, #0
 8022a84:	d014      	beq.n	8022ab0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8022a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a88:	68da      	ldr	r2, [r3, #12]
 8022a8a:	6a3b      	ldr	r3, [r7, #32]
 8022a8c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8022a8e:	4b3b      	ldr	r3, [pc, #236]	; (8022b7c <udp_input+0x1b8>)
 8022a90:	681a      	ldr	r2, [r3, #0]
 8022a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a94:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8022a96:	4a39      	ldr	r2, [pc, #228]	; (8022b7c <udp_input+0x1b8>)
 8022a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a9a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8022a9c:	e008      	b.n	8022ab0 <udp_input+0xec>
      }
    }

    prev = pcb;
 8022a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aa0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aa4:	68db      	ldr	r3, [r3, #12]
 8022aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8022aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	d1c0      	bne.n	8022a30 <udp_input+0x6c>
 8022aae:	e000      	b.n	8022ab2 <udp_input+0xee>
        break;
 8022ab0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8022ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ab4:	2b00      	cmp	r3, #0
 8022ab6:	d101      	bne.n	8022abc <udp_input+0xf8>
    pcb = uncon_pcb;
 8022ab8:	69fb      	ldr	r3, [r7, #28]
 8022aba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8022abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022abe:	2b00      	cmp	r3, #0
 8022ac0:	d002      	beq.n	8022ac8 <udp_input+0x104>
    for_us = 1;
 8022ac2:	2301      	movs	r3, #1
 8022ac4:	76fb      	strb	r3, [r7, #27]
 8022ac6:	e00a      	b.n	8022ade <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8022ac8:	683b      	ldr	r3, [r7, #0]
 8022aca:	3304      	adds	r3, #4
 8022acc:	681a      	ldr	r2, [r3, #0]
 8022ace:	4b2a      	ldr	r3, [pc, #168]	; (8022b78 <udp_input+0x1b4>)
 8022ad0:	695b      	ldr	r3, [r3, #20]
 8022ad2:	429a      	cmp	r2, r3
 8022ad4:	bf0c      	ite	eq
 8022ad6:	2301      	moveq	r3, #1
 8022ad8:	2300      	movne	r3, #0
 8022ada:	b2db      	uxtb	r3, r3
 8022adc:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8022ade:	7efb      	ldrb	r3, [r7, #27]
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d042      	beq.n	8022b6a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8022ae4:	f06f 0107 	mvn.w	r1, #7
 8022ae8:	6878      	ldr	r0, [r7, #4]
 8022aea:	f7fa f8a1 	bl	801cc30 <pbuf_header>
 8022aee:	4603      	mov	r3, r0
 8022af0:	2b00      	cmp	r3, #0
 8022af2:	d00a      	beq.n	8022b0a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8022af4:	4b22      	ldr	r3, [pc, #136]	; (8022b80 <udp_input+0x1bc>)
 8022af6:	f240 1255 	movw	r2, #341	; 0x155
 8022afa:	4922      	ldr	r1, [pc, #136]	; (8022b84 <udp_input+0x1c0>)
 8022afc:	4822      	ldr	r0, [pc, #136]	; (8022b88 <udp_input+0x1c4>)
 8022afe:	f002 fdb7 	bl	8025670 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8022b02:	6878      	ldr	r0, [r7, #4]
 8022b04:	f7fa f8b8 	bl	801cc78 <pbuf_free>
      goto end;
 8022b08:	e032      	b.n	8022b70 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8022b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b0c:	2b00      	cmp	r3, #0
 8022b0e:	d012      	beq.n	8022b36 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8022b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b12:	699b      	ldr	r3, [r3, #24]
 8022b14:	2b00      	cmp	r3, #0
 8022b16:	d00a      	beq.n	8022b2e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8022b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b1a:	699c      	ldr	r4, [r3, #24]
 8022b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b1e:	69d8      	ldr	r0, [r3, #28]
 8022b20:	8a3b      	ldrh	r3, [r7, #16]
 8022b22:	9300      	str	r3, [sp, #0]
 8022b24:	4b19      	ldr	r3, [pc, #100]	; (8022b8c <udp_input+0x1c8>)
 8022b26:	687a      	ldr	r2, [r7, #4]
 8022b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022b2a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8022b2c:	e021      	b.n	8022b72 <udp_input+0x1ae>
        pbuf_free(p);
 8022b2e:	6878      	ldr	r0, [r7, #4]
 8022b30:	f7fa f8a2 	bl	801cc78 <pbuf_free>
        goto end;
 8022b34:	e01c      	b.n	8022b70 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8022b36:	7cfb      	ldrb	r3, [r7, #19]
 8022b38:	2b00      	cmp	r3, #0
 8022b3a:	d112      	bne.n	8022b62 <udp_input+0x19e>
 8022b3c:	4b0e      	ldr	r3, [pc, #56]	; (8022b78 <udp_input+0x1b4>)
 8022b3e:	695b      	ldr	r3, [r3, #20]
 8022b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022b44:	2be0      	cmp	r3, #224	; 0xe0
 8022b46:	d00c      	beq.n	8022b62 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8022b48:	4b0b      	ldr	r3, [pc, #44]	; (8022b78 <udp_input+0x1b4>)
 8022b4a:	899b      	ldrh	r3, [r3, #12]
 8022b4c:	3308      	adds	r3, #8
 8022b4e:	b29b      	uxth	r3, r3
 8022b50:	b21b      	sxth	r3, r3
 8022b52:	4619      	mov	r1, r3
 8022b54:	6878      	ldr	r0, [r7, #4]
 8022b56:	f7fa f87d 	bl	801cc54 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8022b5a:	2103      	movs	r1, #3
 8022b5c:	6878      	ldr	r0, [r7, #4]
 8022b5e:	f7f7 fc55 	bl	801a40c <icmp_dest_unreach>
      pbuf_free(p);
 8022b62:	6878      	ldr	r0, [r7, #4]
 8022b64:	f7fa f888 	bl	801cc78 <pbuf_free>
  return;
 8022b68:	e003      	b.n	8022b72 <udp_input+0x1ae>
    pbuf_free(p);
 8022b6a:	6878      	ldr	r0, [r7, #4]
 8022b6c:	f7fa f884 	bl	801cc78 <pbuf_free>
  return;
 8022b70:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8022b72:	372c      	adds	r7, #44	; 0x2c
 8022b74:	46bd      	mov	sp, r7
 8022b76:	bd90      	pop	{r4, r7, pc}
 8022b78:	200045fc 	.word	0x200045fc
 8022b7c:	20008c3c 	.word	0x20008c3c
 8022b80:	08028824 	.word	0x08028824
 8022b84:	08028854 	.word	0x08028854
 8022b88:	08028868 	.word	0x08028868
 8022b8c:	2000460c 	.word	0x2000460c

08022b90 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8022b90:	b580      	push	{r7, lr}
 8022b92:	b086      	sub	sp, #24
 8022b94:	af00      	add	r7, sp, #0
 8022b96:	60f8      	str	r0, [r7, #12]
 8022b98:	60b9      	str	r1, [r7, #8]
 8022b9a:	4613      	mov	r3, r2
 8022b9c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8022b9e:	68bb      	ldr	r3, [r7, #8]
 8022ba0:	2b00      	cmp	r3, #0
 8022ba2:	d101      	bne.n	8022ba8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8022ba4:	4b30      	ldr	r3, [pc, #192]	; (8022c68 <udp_bind+0xd8>)
 8022ba6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8022ba8:	68fb      	ldr	r3, [r7, #12]
 8022baa:	2b00      	cmp	r3, #0
 8022bac:	d002      	beq.n	8022bb4 <udp_bind+0x24>
 8022bae:	68bb      	ldr	r3, [r7, #8]
 8022bb0:	2b00      	cmp	r3, #0
 8022bb2:	d102      	bne.n	8022bba <udp_bind+0x2a>
    return ERR_VAL;
 8022bb4:	f06f 0305 	mvn.w	r3, #5
 8022bb8:	e052      	b.n	8022c60 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8022bba:	2300      	movs	r3, #0
 8022bbc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022bbe:	4b2b      	ldr	r3, [pc, #172]	; (8022c6c <udp_bind+0xdc>)
 8022bc0:	681b      	ldr	r3, [r3, #0]
 8022bc2:	617b      	str	r3, [r7, #20]
 8022bc4:	e009      	b.n	8022bda <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8022bc6:	68fa      	ldr	r2, [r7, #12]
 8022bc8:	697b      	ldr	r3, [r7, #20]
 8022bca:	429a      	cmp	r2, r3
 8022bcc:	d102      	bne.n	8022bd4 <udp_bind+0x44>
      rebind = 1;
 8022bce:	2301      	movs	r3, #1
 8022bd0:	74fb      	strb	r3, [r7, #19]
      break;
 8022bd2:	e005      	b.n	8022be0 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022bd4:	697b      	ldr	r3, [r7, #20]
 8022bd6:	68db      	ldr	r3, [r3, #12]
 8022bd8:	617b      	str	r3, [r7, #20]
 8022bda:	697b      	ldr	r3, [r7, #20]
 8022bdc:	2b00      	cmp	r3, #0
 8022bde:	d1f2      	bne.n	8022bc6 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8022be0:	88fb      	ldrh	r3, [r7, #6]
 8022be2:	2b00      	cmp	r3, #0
 8022be4:	d109      	bne.n	8022bfa <udp_bind+0x6a>
    port = udp_new_port();
 8022be6:	f7ff fe79 	bl	80228dc <udp_new_port>
 8022bea:	4603      	mov	r3, r0
 8022bec:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8022bee:	88fb      	ldrh	r3, [r7, #6]
 8022bf0:	2b00      	cmp	r3, #0
 8022bf2:	d11e      	bne.n	8022c32 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8022bf4:	f06f 0307 	mvn.w	r3, #7
 8022bf8:	e032      	b.n	8022c60 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022bfa:	4b1c      	ldr	r3, [pc, #112]	; (8022c6c <udp_bind+0xdc>)
 8022bfc:	681b      	ldr	r3, [r3, #0]
 8022bfe:	617b      	str	r3, [r7, #20]
 8022c00:	e014      	b.n	8022c2c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8022c02:	68fa      	ldr	r2, [r7, #12]
 8022c04:	697b      	ldr	r3, [r7, #20]
 8022c06:	429a      	cmp	r2, r3
 8022c08:	d00d      	beq.n	8022c26 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8022c0a:	697b      	ldr	r3, [r7, #20]
 8022c0c:	8a5b      	ldrh	r3, [r3, #18]
 8022c0e:	88fa      	ldrh	r2, [r7, #6]
 8022c10:	429a      	cmp	r2, r3
 8022c12:	d108      	bne.n	8022c26 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8022c14:	697b      	ldr	r3, [r7, #20]
 8022c16:	681a      	ldr	r2, [r3, #0]
 8022c18:	68bb      	ldr	r3, [r7, #8]
 8022c1a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8022c1c:	429a      	cmp	r2, r3
 8022c1e:	d102      	bne.n	8022c26 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8022c20:	f06f 0307 	mvn.w	r3, #7
 8022c24:	e01c      	b.n	8022c60 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022c26:	697b      	ldr	r3, [r7, #20]
 8022c28:	68db      	ldr	r3, [r3, #12]
 8022c2a:	617b      	str	r3, [r7, #20]
 8022c2c:	697b      	ldr	r3, [r7, #20]
 8022c2e:	2b00      	cmp	r3, #0
 8022c30:	d1e7      	bne.n	8022c02 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8022c32:	68bb      	ldr	r3, [r7, #8]
 8022c34:	2b00      	cmp	r3, #0
 8022c36:	d002      	beq.n	8022c3e <udp_bind+0xae>
 8022c38:	68bb      	ldr	r3, [r7, #8]
 8022c3a:	681b      	ldr	r3, [r3, #0]
 8022c3c:	e000      	b.n	8022c40 <udp_bind+0xb0>
 8022c3e:	2300      	movs	r3, #0
 8022c40:	68fa      	ldr	r2, [r7, #12]
 8022c42:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8022c44:	68fb      	ldr	r3, [r7, #12]
 8022c46:	88fa      	ldrh	r2, [r7, #6]
 8022c48:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8022c4a:	7cfb      	ldrb	r3, [r7, #19]
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	d106      	bne.n	8022c5e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8022c50:	4b06      	ldr	r3, [pc, #24]	; (8022c6c <udp_bind+0xdc>)
 8022c52:	681a      	ldr	r2, [r3, #0]
 8022c54:	68fb      	ldr	r3, [r7, #12]
 8022c56:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8022c58:	4a04      	ldr	r2, [pc, #16]	; (8022c6c <udp_bind+0xdc>)
 8022c5a:	68fb      	ldr	r3, [r7, #12]
 8022c5c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8022c5e:	2300      	movs	r3, #0
}
 8022c60:	4618      	mov	r0, r3
 8022c62:	3718      	adds	r7, #24
 8022c64:	46bd      	mov	sp, r7
 8022c66:	bd80      	pop	{r7, pc}
 8022c68:	0802ae60 	.word	0x0802ae60
 8022c6c:	20008c3c 	.word	0x20008c3c

08022c70 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8022c70:	b480      	push	{r7}
 8022c72:	b085      	sub	sp, #20
 8022c74:	af00      	add	r7, sp, #0
 8022c76:	60f8      	str	r0, [r7, #12]
 8022c78:	60b9      	str	r1, [r7, #8]
 8022c7a:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8022c7c:	68fb      	ldr	r3, [r7, #12]
 8022c7e:	68ba      	ldr	r2, [r7, #8]
 8022c80:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8022c82:	68fb      	ldr	r3, [r7, #12]
 8022c84:	687a      	ldr	r2, [r7, #4]
 8022c86:	61da      	str	r2, [r3, #28]
}
 8022c88:	bf00      	nop
 8022c8a:	3714      	adds	r7, #20
 8022c8c:	46bd      	mov	sp, r7
 8022c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c92:	4770      	bx	lr

08022c94 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8022c94:	b580      	push	{r7, lr}
 8022c96:	b084      	sub	sp, #16
 8022c98:	af00      	add	r7, sp, #0
 8022c9a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8022c9c:	4b15      	ldr	r3, [pc, #84]	; (8022cf4 <udp_remove+0x60>)
 8022c9e:	681a      	ldr	r2, [r3, #0]
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	429a      	cmp	r2, r3
 8022ca4:	d105      	bne.n	8022cb2 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8022ca6:	4b13      	ldr	r3, [pc, #76]	; (8022cf4 <udp_remove+0x60>)
 8022ca8:	681b      	ldr	r3, [r3, #0]
 8022caa:	68db      	ldr	r3, [r3, #12]
 8022cac:	4a11      	ldr	r2, [pc, #68]	; (8022cf4 <udp_remove+0x60>)
 8022cae:	6013      	str	r3, [r2, #0]
 8022cb0:	e017      	b.n	8022ce2 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8022cb2:	4b10      	ldr	r3, [pc, #64]	; (8022cf4 <udp_remove+0x60>)
 8022cb4:	681b      	ldr	r3, [r3, #0]
 8022cb6:	60fb      	str	r3, [r7, #12]
 8022cb8:	e010      	b.n	8022cdc <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8022cba:	68fb      	ldr	r3, [r7, #12]
 8022cbc:	68db      	ldr	r3, [r3, #12]
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	d009      	beq.n	8022cd6 <udp_remove+0x42>
 8022cc2:	68fb      	ldr	r3, [r7, #12]
 8022cc4:	68da      	ldr	r2, [r3, #12]
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	429a      	cmp	r2, r3
 8022cca:	d104      	bne.n	8022cd6 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	68da      	ldr	r2, [r3, #12]
 8022cd0:	68fb      	ldr	r3, [r7, #12]
 8022cd2:	60da      	str	r2, [r3, #12]
        break;
 8022cd4:	e005      	b.n	8022ce2 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8022cd6:	68fb      	ldr	r3, [r7, #12]
 8022cd8:	68db      	ldr	r3, [r3, #12]
 8022cda:	60fb      	str	r3, [r7, #12]
 8022cdc:	68fb      	ldr	r3, [r7, #12]
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	d1eb      	bne.n	8022cba <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8022ce2:	6879      	ldr	r1, [r7, #4]
 8022ce4:	2000      	movs	r0, #0
 8022ce6:	f7f9 fa6d 	bl	801c1c4 <memp_free>
}
 8022cea:	bf00      	nop
 8022cec:	3710      	adds	r7, #16
 8022cee:	46bd      	mov	sp, r7
 8022cf0:	bd80      	pop	{r7, pc}
 8022cf2:	bf00      	nop
 8022cf4:	20008c3c 	.word	0x20008c3c

08022cf8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8022cf8:	b580      	push	{r7, lr}
 8022cfa:	b082      	sub	sp, #8
 8022cfc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8022cfe:	2000      	movs	r0, #0
 8022d00:	f7f9 fa0e 	bl	801c120 <memp_malloc>
 8022d04:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8022d06:	687b      	ldr	r3, [r7, #4]
 8022d08:	2b00      	cmp	r3, #0
 8022d0a:	d007      	beq.n	8022d1c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8022d0c:	2220      	movs	r2, #32
 8022d0e:	2100      	movs	r1, #0
 8022d10:	6878      	ldr	r0, [r7, #4]
 8022d12:	f003 f96b 	bl	8025fec <memset>
    pcb->ttl = UDP_TTL;
 8022d16:	687b      	ldr	r3, [r7, #4]
 8022d18:	22ff      	movs	r2, #255	; 0xff
 8022d1a:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8022d1c:	687b      	ldr	r3, [r7, #4]
}
 8022d1e:	4618      	mov	r0, r3
 8022d20:	3708      	adds	r7, #8
 8022d22:	46bd      	mov	sp, r7
 8022d24:	bd80      	pop	{r7, pc}

08022d26 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8022d26:	b580      	push	{r7, lr}
 8022d28:	b084      	sub	sp, #16
 8022d2a:	af00      	add	r7, sp, #0
 8022d2c:	4603      	mov	r3, r0
 8022d2e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8022d30:	f7ff ffe2 	bl	8022cf8 <udp_new>
 8022d34:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8022d36:	68fb      	ldr	r3, [r7, #12]
}
 8022d38:	4618      	mov	r0, r3
 8022d3a:	3710      	adds	r7, #16
 8022d3c:	46bd      	mov	sp, r7
 8022d3e:	bd80      	pop	{r7, pc}

08022d40 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8022d40:	b480      	push	{r7}
 8022d42:	b085      	sub	sp, #20
 8022d44:	af00      	add	r7, sp, #0
 8022d46:	6078      	str	r0, [r7, #4]
 8022d48:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8022d4a:	687b      	ldr	r3, [r7, #4]
 8022d4c:	2b00      	cmp	r3, #0
 8022d4e:	d01e      	beq.n	8022d8e <udp_netif_ip_addr_changed+0x4e>
 8022d50:	687b      	ldr	r3, [r7, #4]
 8022d52:	681b      	ldr	r3, [r3, #0]
 8022d54:	2b00      	cmp	r3, #0
 8022d56:	d01a      	beq.n	8022d8e <udp_netif_ip_addr_changed+0x4e>
 8022d58:	683b      	ldr	r3, [r7, #0]
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d017      	beq.n	8022d8e <udp_netif_ip_addr_changed+0x4e>
 8022d5e:	683b      	ldr	r3, [r7, #0]
 8022d60:	681b      	ldr	r3, [r3, #0]
 8022d62:	2b00      	cmp	r3, #0
 8022d64:	d013      	beq.n	8022d8e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022d66:	4b0d      	ldr	r3, [pc, #52]	; (8022d9c <udp_netif_ip_addr_changed+0x5c>)
 8022d68:	681b      	ldr	r3, [r3, #0]
 8022d6a:	60fb      	str	r3, [r7, #12]
 8022d6c:	e00c      	b.n	8022d88 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8022d6e:	68fb      	ldr	r3, [r7, #12]
 8022d70:	681a      	ldr	r2, [r3, #0]
 8022d72:	687b      	ldr	r3, [r7, #4]
 8022d74:	681b      	ldr	r3, [r3, #0]
 8022d76:	429a      	cmp	r2, r3
 8022d78:	d103      	bne.n	8022d82 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8022d7a:	683b      	ldr	r3, [r7, #0]
 8022d7c:	681a      	ldr	r2, [r3, #0]
 8022d7e:	68fb      	ldr	r3, [r7, #12]
 8022d80:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022d82:	68fb      	ldr	r3, [r7, #12]
 8022d84:	68db      	ldr	r3, [r3, #12]
 8022d86:	60fb      	str	r3, [r7, #12]
 8022d88:	68fb      	ldr	r3, [r7, #12]
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d1ef      	bne.n	8022d6e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8022d8e:	bf00      	nop
 8022d90:	3714      	adds	r7, #20
 8022d92:	46bd      	mov	sp, r7
 8022d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d98:	4770      	bx	lr
 8022d9a:	bf00      	nop
 8022d9c:	20008c3c 	.word	0x20008c3c

08022da0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022da0:	b580      	push	{r7, lr}
 8022da2:	b086      	sub	sp, #24
 8022da4:	af00      	add	r7, sp, #0
 8022da6:	6078      	str	r0, [r7, #4]
 8022da8:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8022daa:	230e      	movs	r3, #14
 8022dac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8022dae:	687b      	ldr	r3, [r7, #4]
 8022db0:	895b      	ldrh	r3, [r3, #10]
 8022db2:	2b0e      	cmp	r3, #14
 8022db4:	d977      	bls.n	8022ea6 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8022db6:	687b      	ldr	r3, [r7, #4]
 8022db8:	685b      	ldr	r3, [r3, #4]
 8022dba:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8022dbc:	693b      	ldr	r3, [r7, #16]
 8022dbe:	7b1a      	ldrb	r2, [r3, #12]
 8022dc0:	7b5b      	ldrb	r3, [r3, #13]
 8022dc2:	021b      	lsls	r3, r3, #8
 8022dc4:	4313      	orrs	r3, r2
 8022dc6:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8022dc8:	693b      	ldr	r3, [r7, #16]
 8022dca:	781b      	ldrb	r3, [r3, #0]
 8022dcc:	f003 0301 	and.w	r3, r3, #1
 8022dd0:	2b00      	cmp	r3, #0
 8022dd2:	d023      	beq.n	8022e1c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8022dd4:	693b      	ldr	r3, [r7, #16]
 8022dd6:	781b      	ldrb	r3, [r3, #0]
 8022dd8:	2b01      	cmp	r3, #1
 8022dda:	d10f      	bne.n	8022dfc <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022ddc:	693b      	ldr	r3, [r7, #16]
 8022dde:	785b      	ldrb	r3, [r3, #1]
 8022de0:	2b00      	cmp	r3, #0
 8022de2:	d11b      	bne.n	8022e1c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8022de4:	693b      	ldr	r3, [r7, #16]
 8022de6:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022de8:	2b5e      	cmp	r3, #94	; 0x5e
 8022dea:	d117      	bne.n	8022e1c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8022dec:	687b      	ldr	r3, [r7, #4]
 8022dee:	7b5b      	ldrb	r3, [r3, #13]
 8022df0:	f043 0310 	orr.w	r3, r3, #16
 8022df4:	b2da      	uxtb	r2, r3
 8022df6:	687b      	ldr	r3, [r7, #4]
 8022df8:	735a      	strb	r2, [r3, #13]
 8022dfa:	e00f      	b.n	8022e1c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8022dfc:	693b      	ldr	r3, [r7, #16]
 8022dfe:	2206      	movs	r2, #6
 8022e00:	492f      	ldr	r1, [pc, #188]	; (8022ec0 <ethernet_input+0x120>)
 8022e02:	4618      	mov	r0, r3
 8022e04:	f003 f8d8 	bl	8025fb8 <memcmp>
 8022e08:	4603      	mov	r3, r0
 8022e0a:	2b00      	cmp	r3, #0
 8022e0c:	d106      	bne.n	8022e1c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	7b5b      	ldrb	r3, [r3, #13]
 8022e12:	f043 0308 	orr.w	r3, r3, #8
 8022e16:	b2da      	uxtb	r2, r3
 8022e18:	687b      	ldr	r3, [r7, #4]
 8022e1a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8022e1c:	89fb      	ldrh	r3, [r7, #14]
 8022e1e:	2b08      	cmp	r3, #8
 8022e20:	d003      	beq.n	8022e2a <ethernet_input+0x8a>
 8022e22:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8022e26:	d01e      	beq.n	8022e66 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8022e28:	e042      	b.n	8022eb0 <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022e2a:	683b      	ldr	r3, [r7, #0]
 8022e2c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8022e30:	f003 0308 	and.w	r3, r3, #8
 8022e34:	2b00      	cmp	r3, #0
 8022e36:	d038      	beq.n	8022eaa <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8022e38:	687b      	ldr	r3, [r7, #4]
 8022e3a:	895b      	ldrh	r3, [r3, #10]
 8022e3c:	461a      	mov	r2, r3
 8022e3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022e42:	429a      	cmp	r2, r3
 8022e44:	db34      	blt.n	8022eb0 <ethernet_input+0x110>
 8022e46:	8afb      	ldrh	r3, [r7, #22]
 8022e48:	425b      	negs	r3, r3
 8022e4a:	b29b      	uxth	r3, r3
 8022e4c:	b21b      	sxth	r3, r3
 8022e4e:	4619      	mov	r1, r3
 8022e50:	6878      	ldr	r0, [r7, #4]
 8022e52:	f7f9 feed 	bl	801cc30 <pbuf_header>
 8022e56:	4603      	mov	r3, r0
 8022e58:	2b00      	cmp	r3, #0
 8022e5a:	d129      	bne.n	8022eb0 <ethernet_input+0x110>
        ip4_input(p, netif);
 8022e5c:	6839      	ldr	r1, [r7, #0]
 8022e5e:	6878      	ldr	r0, [r7, #4]
 8022e60:	f7f7 fbc4 	bl	801a5ec <ip4_input>
      break;
 8022e64:	e01d      	b.n	8022ea2 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022e66:	683b      	ldr	r3, [r7, #0]
 8022e68:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8022e6c:	f003 0308 	and.w	r3, r3, #8
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	d01c      	beq.n	8022eae <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8022e74:	687b      	ldr	r3, [r7, #4]
 8022e76:	895b      	ldrh	r3, [r3, #10]
 8022e78:	461a      	mov	r2, r3
 8022e7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022e7e:	429a      	cmp	r2, r3
 8022e80:	db16      	blt.n	8022eb0 <ethernet_input+0x110>
 8022e82:	8afb      	ldrh	r3, [r7, #22]
 8022e84:	425b      	negs	r3, r3
 8022e86:	b29b      	uxth	r3, r3
 8022e88:	b21b      	sxth	r3, r3
 8022e8a:	4619      	mov	r1, r3
 8022e8c:	6878      	ldr	r0, [r7, #4]
 8022e8e:	f7f9 fecf 	bl	801cc30 <pbuf_header>
 8022e92:	4603      	mov	r3, r0
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	d10b      	bne.n	8022eb0 <ethernet_input+0x110>
        etharp_input(p, netif);
 8022e98:	6839      	ldr	r1, [r7, #0]
 8022e9a:	6878      	ldr	r0, [r7, #4]
 8022e9c:	f7f6 fd94 	bl	80199c8 <etharp_input>
      break;
 8022ea0:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022ea2:	2300      	movs	r3, #0
 8022ea4:	e008      	b.n	8022eb8 <ethernet_input+0x118>
    goto free_and_return;
 8022ea6:	bf00      	nop
 8022ea8:	e002      	b.n	8022eb0 <ethernet_input+0x110>
        goto free_and_return;
 8022eaa:	bf00      	nop
 8022eac:	e000      	b.n	8022eb0 <ethernet_input+0x110>
        goto free_and_return;
 8022eae:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022eb0:	6878      	ldr	r0, [r7, #4]
 8022eb2:	f7f9 fee1 	bl	801cc78 <pbuf_free>
  return ERR_OK;
 8022eb6:	2300      	movs	r3, #0
}
 8022eb8:	4618      	mov	r0, r3
 8022eba:	3718      	adds	r7, #24
 8022ebc:	46bd      	mov	sp, r7
 8022ebe:	bd80      	pop	{r7, pc}
 8022ec0:	0802af74 	.word	0x0802af74

08022ec4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8022ec4:	b580      	push	{r7, lr}
 8022ec6:	b086      	sub	sp, #24
 8022ec8:	af00      	add	r7, sp, #0
 8022eca:	60f8      	str	r0, [r7, #12]
 8022ecc:	60b9      	str	r1, [r7, #8]
 8022ece:	607a      	str	r2, [r7, #4]
 8022ed0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8022ed2:	8c3b      	ldrh	r3, [r7, #32]
 8022ed4:	4618      	mov	r0, r3
 8022ed6:	f7f6 fa3f 	bl	8019358 <lwip_htons>
 8022eda:	4603      	mov	r3, r0
 8022edc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8022ede:	210e      	movs	r1, #14
 8022ee0:	68b8      	ldr	r0, [r7, #8]
 8022ee2:	f7f9 fea5 	bl	801cc30 <pbuf_header>
 8022ee6:	4603      	mov	r3, r0
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	d125      	bne.n	8022f38 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8022eec:	68bb      	ldr	r3, [r7, #8]
 8022eee:	685b      	ldr	r3, [r3, #4]
 8022ef0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8022ef2:	693b      	ldr	r3, [r7, #16]
 8022ef4:	8afa      	ldrh	r2, [r7, #22]
 8022ef6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8022ef8:	693b      	ldr	r3, [r7, #16]
 8022efa:	2206      	movs	r2, #6
 8022efc:	6839      	ldr	r1, [r7, #0]
 8022efe:	4618      	mov	r0, r3
 8022f00:	f003 f869 	bl	8025fd6 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8022f04:	693b      	ldr	r3, [r7, #16]
 8022f06:	3306      	adds	r3, #6
 8022f08:	2206      	movs	r2, #6
 8022f0a:	6879      	ldr	r1, [r7, #4]
 8022f0c:	4618      	mov	r0, r3
 8022f0e:	f003 f862 	bl	8025fd6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8022f12:	68fb      	ldr	r3, [r7, #12]
 8022f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8022f18:	2b06      	cmp	r3, #6
 8022f1a:	d006      	beq.n	8022f2a <ethernet_output+0x66>
 8022f1c:	4b0a      	ldr	r3, [pc, #40]	; (8022f48 <ethernet_output+0x84>)
 8022f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022f22:	490a      	ldr	r1, [pc, #40]	; (8022f4c <ethernet_output+0x88>)
 8022f24:	480a      	ldr	r0, [pc, #40]	; (8022f50 <ethernet_output+0x8c>)
 8022f26:	f002 fba3 	bl	8025670 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022f2a:	68fb      	ldr	r3, [r7, #12]
 8022f2c:	699b      	ldr	r3, [r3, #24]
 8022f2e:	68b9      	ldr	r1, [r7, #8]
 8022f30:	68f8      	ldr	r0, [r7, #12]
 8022f32:	4798      	blx	r3
 8022f34:	4603      	mov	r3, r0
 8022f36:	e002      	b.n	8022f3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022f38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8022f3a:	f06f 0301 	mvn.w	r3, #1
}
 8022f3e:	4618      	mov	r0, r3
 8022f40:	3718      	adds	r7, #24
 8022f42:	46bd      	mov	sp, r7
 8022f44:	bd80      	pop	{r7, pc}
 8022f46:	bf00      	nop
 8022f48:	080288c0 	.word	0x080288c0
 8022f4c:	080288f8 	.word	0x080288f8
 8022f50:	0802892c 	.word	0x0802892c

08022f54 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8022f54:	b580      	push	{r7, lr}
 8022f56:	b084      	sub	sp, #16
 8022f58:	af00      	add	r7, sp, #0
 8022f5a:	6078      	str	r0, [r7, #4]
 8022f5c:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 8022f5e:	683b      	ldr	r3, [r7, #0]
 8022f60:	60bb      	str	r3, [r7, #8]
 8022f62:	2304      	movs	r3, #4
 8022f64:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8022f66:	f107 0308 	add.w	r3, r7, #8
 8022f6a:	2100      	movs	r1, #0
 8022f6c:	4618      	mov	r0, r3
 8022f6e:	f7f1 fd1e 	bl	80149ae <osMessageCreate>
 8022f72:	4602      	mov	r2, r0
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 8022f78:	687b      	ldr	r3, [r7, #4]
 8022f7a:	681b      	ldr	r3, [r3, #0]
 8022f7c:	2b00      	cmp	r3, #0
 8022f7e:	d102      	bne.n	8022f86 <sys_mbox_new+0x32>
  return ERR_MEM;
 8022f80:	f04f 33ff 	mov.w	r3, #4294967295
 8022f84:	e000      	b.n	8022f88 <sys_mbox_new+0x34>
 
 return ERR_OK;
 8022f86:	2300      	movs	r3, #0
}
 8022f88:	4618      	mov	r0, r3
 8022f8a:	3710      	adds	r7, #16
 8022f8c:	46bd      	mov	sp, r7
 8022f8e:	bd80      	pop	{r7, pc}

08022f90 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022f90:	b580      	push	{r7, lr}
 8022f92:	b082      	sub	sp, #8
 8022f94:	af00      	add	r7, sp, #0
 8022f96:	6078      	str	r0, [r7, #4]
	if( osMessageWaiting(*mbox) )
 8022f98:	687b      	ldr	r3, [r7, #4]
 8022f9a:	681b      	ldr	r3, [r3, #0]
 8022f9c:	4618      	mov	r0, r3
 8022f9e:	f7f1 fdcd 	bl	8014b3c <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	681b      	ldr	r3, [r3, #0]
 8022fa6:	4618      	mov	r0, r3
 8022fa8:	f7f1 fdde 	bl	8014b68 <osMessageDelete>

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8022fac:	bf00      	nop
 8022fae:	3708      	adds	r7, #8
 8022fb0:	46bd      	mov	sp, r7
 8022fb2:	bd80      	pop	{r7, pc}

08022fb4 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8022fb4:	b580      	push	{r7, lr}
 8022fb6:	b082      	sub	sp, #8
 8022fb8:	af00      	add	r7, sp, #0
 8022fba:	6078      	str	r0, [r7, #4]
 8022fbc:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8022fbe:	bf00      	nop
 8022fc0:	687b      	ldr	r3, [r7, #4]
 8022fc2:	681b      	ldr	r3, [r3, #0]
 8022fc4:	6839      	ldr	r1, [r7, #0]
 8022fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8022fca:	4618      	mov	r0, r3
 8022fcc:	f7f1 fd02 	bl	80149d4 <osMessagePut>
 8022fd0:	4603      	mov	r3, r0
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	d1f4      	bne.n	8022fc0 <sys_mbox_post+0xc>
}
 8022fd6:	bf00      	nop
 8022fd8:	3708      	adds	r7, #8
 8022fda:	46bd      	mov	sp, r7
 8022fdc:	bd80      	pop	{r7, pc}

08022fde <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022fde:	b580      	push	{r7, lr}
 8022fe0:	b084      	sub	sp, #16
 8022fe2:	af00      	add	r7, sp, #0
 8022fe4:	6078      	str	r0, [r7, #4]
 8022fe6:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	681b      	ldr	r3, [r3, #0]
 8022fec:	6839      	ldr	r1, [r7, #0]
 8022fee:	2200      	movs	r2, #0
 8022ff0:	4618      	mov	r0, r3
 8022ff2:	f7f1 fcef 	bl	80149d4 <osMessagePut>
 8022ff6:	4603      	mov	r3, r0
 8022ff8:	2b00      	cmp	r3, #0
 8022ffa:	d102      	bne.n	8023002 <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 8022ffc:	2300      	movs	r3, #0
 8022ffe:	73fb      	strb	r3, [r7, #15]
 8023000:	e001      	b.n	8023006 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 8023002:	23ff      	movs	r3, #255	; 0xff
 8023004:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 8023006:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802300a:	4618      	mov	r0, r3
 802300c:	3710      	adds	r7, #16
 802300e:	46bd      	mov	sp, r7
 8023010:	bd80      	pop	{r7, pc}

08023012 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8023012:	b580      	push	{r7, lr}
 8023014:	b08c      	sub	sp, #48	; 0x30
 8023016:	af00      	add	r7, sp, #0
 8023018:	61f8      	str	r0, [r7, #28]
 802301a:	61b9      	str	r1, [r7, #24]
 802301c:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 802301e:	f7f1 fb32 	bl	8014686 <osKernelSysTick>
 8023022:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 8023024:	697b      	ldr	r3, [r7, #20]
 8023026:	2b00      	cmp	r3, #0
 8023028:	d017      	beq.n	802305a <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 802302a:	69fb      	ldr	r3, [r7, #28]
 802302c:	6819      	ldr	r1, [r3, #0]
 802302e:	f107 0320 	add.w	r3, r7, #32
 8023032:	697a      	ldr	r2, [r7, #20]
 8023034:	4618      	mov	r0, r3
 8023036:	f7f1 fd0d 	bl	8014a54 <osMessageGet>
    
    if(event.status == osEventMessage)
 802303a:	6a3b      	ldr	r3, [r7, #32]
 802303c:	2b10      	cmp	r3, #16
 802303e:	d109      	bne.n	8023054 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8023040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023042:	461a      	mov	r2, r3
 8023044:	69bb      	ldr	r3, [r7, #24]
 8023046:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8023048:	f7f1 fb1d 	bl	8014686 <osKernelSysTick>
 802304c:	4602      	mov	r2, r0
 802304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023050:	1ad3      	subs	r3, r2, r3
 8023052:	e019      	b.n	8023088 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8023054:	f04f 33ff 	mov.w	r3, #4294967295
 8023058:	e016      	b.n	8023088 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 802305a:	69fb      	ldr	r3, [r7, #28]
 802305c:	6819      	ldr	r1, [r3, #0]
 802305e:	463b      	mov	r3, r7
 8023060:	f04f 32ff 	mov.w	r2, #4294967295
 8023064:	4618      	mov	r0, r3
 8023066:	f7f1 fcf5 	bl	8014a54 <osMessageGet>
 802306a:	f107 0320 	add.w	r3, r7, #32
 802306e:	463a      	mov	r2, r7
 8023070:	ca07      	ldmia	r2, {r0, r1, r2}
 8023072:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8023076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023078:	461a      	mov	r2, r3
 802307a:	69bb      	ldr	r3, [r7, #24]
 802307c:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 802307e:	f7f1 fb02 	bl	8014686 <osKernelSysTick>
 8023082:	4602      	mov	r2, r0
 8023084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023086:	1ad3      	subs	r3, r2, r3
  }
}
 8023088:	4618      	mov	r0, r3
 802308a:	3730      	adds	r7, #48	; 0x30
 802308c:	46bd      	mov	sp, r7
 802308e:	bd80      	pop	{r7, pc}

08023090 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8023090:	b580      	push	{r7, lr}
 8023092:	b086      	sub	sp, #24
 8023094:	af00      	add	r7, sp, #0
 8023096:	6078      	str	r0, [r7, #4]
 8023098:	6039      	str	r1, [r7, #0]
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 802309a:	687b      	ldr	r3, [r7, #4]
 802309c:	6819      	ldr	r1, [r3, #0]
 802309e:	f107 030c 	add.w	r3, r7, #12
 80230a2:	2200      	movs	r2, #0
 80230a4:	4618      	mov	r0, r3
 80230a6:	f7f1 fcd5 	bl	8014a54 <osMessageGet>
  
  if(event.status == osEventMessage)
 80230aa:	68fb      	ldr	r3, [r7, #12]
 80230ac:	2b10      	cmp	r3, #16
 80230ae:	d105      	bne.n	80230bc <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80230b0:	693b      	ldr	r3, [r7, #16]
 80230b2:	461a      	mov	r2, r3
 80230b4:	683b      	ldr	r3, [r7, #0]
 80230b6:	601a      	str	r2, [r3, #0]
    return ERR_OK;
 80230b8:	2300      	movs	r3, #0
 80230ba:	e001      	b.n	80230c0 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80230bc:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80230c0:	4618      	mov	r0, r3
 80230c2:	3718      	adds	r7, #24
 80230c4:	46bd      	mov	sp, r7
 80230c6:	bd80      	pop	{r7, pc}

080230c8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 80230c8:	b480      	push	{r7}
 80230ca:	b083      	sub	sp, #12
 80230cc:	af00      	add	r7, sp, #0
 80230ce:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	681b      	ldr	r3, [r3, #0]
 80230d4:	2b00      	cmp	r3, #0
 80230d6:	d101      	bne.n	80230dc <sys_mbox_valid+0x14>
    return 0;
 80230d8:	2300      	movs	r3, #0
 80230da:	e000      	b.n	80230de <sys_mbox_valid+0x16>
  else
    return 1;
 80230dc:	2301      	movs	r3, #1
}                                             
 80230de:	4618      	mov	r0, r3
 80230e0:	370c      	adds	r7, #12
 80230e2:	46bd      	mov	sp, r7
 80230e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230e8:	4770      	bx	lr

080230ea <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
 80230ea:	b480      	push	{r7}
 80230ec:	b083      	sub	sp, #12
 80230ee:	af00      	add	r7, sp, #0
 80230f0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;                      
 80230f2:	687b      	ldr	r3, [r7, #4]
 80230f4:	2200      	movs	r2, #0
 80230f6:	601a      	str	r2, [r3, #0]
}                                             
 80230f8:	bf00      	nop
 80230fa:	370c      	adds	r7, #12
 80230fc:	46bd      	mov	sp, r7
 80230fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023102:	4770      	bx	lr

08023104 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8023104:	b580      	push	{r7, lr}
 8023106:	b084      	sub	sp, #16
 8023108:	af00      	add	r7, sp, #0
 802310a:	6078      	str	r0, [r7, #4]
 802310c:	460b      	mov	r3, r1
 802310e:	70fb      	strb	r3, [r7, #3]
  osSemaphoreDef(SEM);
 8023110:	2300      	movs	r3, #0
 8023112:	60fb      	str	r3, [r7, #12]

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8023114:	f107 030c 	add.w	r3, r7, #12
 8023118:	2101      	movs	r1, #1
 802311a:	4618      	mov	r0, r3
 802311c:	f7f1 fb90 	bl	8014840 <osSemaphoreCreate>
 8023120:	4602      	mov	r2, r0
 8023122:	687b      	ldr	r3, [r7, #4]
 8023124:	601a      	str	r2, [r3, #0]
	
  if(*sem == NULL)
 8023126:	687b      	ldr	r3, [r7, #4]
 8023128:	681b      	ldr	r3, [r3, #0]
 802312a:	2b00      	cmp	r3, #0
 802312c:	d102      	bne.n	8023134 <sys_sem_new+0x30>
  {
#if SYS_STATS
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
 802312e:	f04f 33ff 	mov.w	r3, #4294967295
 8023132:	e009      	b.n	8023148 <sys_sem_new+0x44>
  }
	
  if(count == 0)	// Means it can't be taken
 8023134:	78fb      	ldrb	r3, [r7, #3]
 8023136:	2b00      	cmp	r3, #0
 8023138:	d105      	bne.n	8023146 <sys_sem_new+0x42>
  {
    osSemaphoreWait(*sem,0);
 802313a:	687b      	ldr	r3, [r7, #4]
 802313c:	681b      	ldr	r3, [r3, #0]
 802313e:	2100      	movs	r1, #0
 8023140:	4618      	mov	r0, r3
 8023142:	f7f1 fb9b 	bl	801487c <osSemaphoreWait>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 8023146:	2300      	movs	r3, #0
}
 8023148:	4618      	mov	r0, r3
 802314a:	3710      	adds	r7, #16
 802314c:	46bd      	mov	sp, r7
 802314e:	bd80      	pop	{r7, pc}

08023150 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8023150:	b580      	push	{r7, lr}
 8023152:	b084      	sub	sp, #16
 8023154:	af00      	add	r7, sp, #0
 8023156:	6078      	str	r0, [r7, #4]
 8023158:	6039      	str	r1, [r7, #0]
  uint32_t starttime = osKernelSysTick();
 802315a:	f7f1 fa94 	bl	8014686 <osKernelSysTick>
 802315e:	60f8      	str	r0, [r7, #12]
  
  if(timeout != 0)
 8023160:	683b      	ldr	r3, [r7, #0]
 8023162:	2b00      	cmp	r3, #0
 8023164:	d011      	beq.n	802318a <sys_arch_sem_wait+0x3a>
  {    
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8023166:	687b      	ldr	r3, [r7, #4]
 8023168:	681b      	ldr	r3, [r3, #0]
 802316a:	6839      	ldr	r1, [r7, #0]
 802316c:	4618      	mov	r0, r3
 802316e:	f7f1 fb85 	bl	801487c <osSemaphoreWait>
 8023172:	4603      	mov	r3, r0
 8023174:	2b00      	cmp	r3, #0
 8023176:	d105      	bne.n	8023184 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8023178:	f7f1 fa85 	bl	8014686 <osKernelSysTick>
 802317c:	4602      	mov	r2, r0
 802317e:	68fb      	ldr	r3, [r7, #12]
 8023180:	1ad3      	subs	r3, r2, r3
 8023182:	e012      	b.n	80231aa <sys_arch_sem_wait+0x5a>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8023184:	f04f 33ff 	mov.w	r3, #4294967295
 8023188:	e00f      	b.n	80231aa <sys_arch_sem_wait+0x5a>
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 802318a:	bf00      	nop
 802318c:	687b      	ldr	r3, [r7, #4]
 802318e:	681b      	ldr	r3, [r3, #0]
 8023190:	f04f 31ff 	mov.w	r1, #4294967295
 8023194:	4618      	mov	r0, r3
 8023196:	f7f1 fb71 	bl	801487c <osSemaphoreWait>
 802319a:	4603      	mov	r3, r0
 802319c:	2b00      	cmp	r3, #0
 802319e:	d1f5      	bne.n	802318c <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80231a0:	f7f1 fa71 	bl	8014686 <osKernelSysTick>
 80231a4:	4602      	mov	r2, r0
 80231a6:	68fb      	ldr	r3, [r7, #12]
 80231a8:	1ad3      	subs	r3, r2, r3
  }
}
 80231aa:	4618      	mov	r0, r3
 80231ac:	3710      	adds	r7, #16
 80231ae:	46bd      	mov	sp, r7
 80231b0:	bd80      	pop	{r7, pc}

080231b2 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80231b2:	b580      	push	{r7, lr}
 80231b4:	b082      	sub	sp, #8
 80231b6:	af00      	add	r7, sp, #0
 80231b8:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80231ba:	687b      	ldr	r3, [r7, #4]
 80231bc:	681b      	ldr	r3, [r3, #0]
 80231be:	4618      	mov	r0, r3
 80231c0:	f7f1 fbac 	bl	801491c <osSemaphoreRelease>
}
 80231c4:	bf00      	nop
 80231c6:	3708      	adds	r7, #8
 80231c8:	46bd      	mov	sp, r7
 80231ca:	bd80      	pop	{r7, pc}

080231cc <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80231cc:	b580      	push	{r7, lr}
 80231ce:	b082      	sub	sp, #8
 80231d0:	af00      	add	r7, sp, #0
 80231d2:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	681b      	ldr	r3, [r3, #0]
 80231d8:	4618      	mov	r0, r3
 80231da:	f7f1 fbd5 	bl	8014988 <osSemaphoreDelete>
}
 80231de:	bf00      	nop
 80231e0:	3708      	adds	r7, #8
 80231e2:	46bd      	mov	sp, r7
 80231e4:	bd80      	pop	{r7, pc}

080231e6 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
 80231e6:	b480      	push	{r7}
 80231e8:	b083      	sub	sp, #12
 80231ea:	af00      	add	r7, sp, #0
 80231ec:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80231ee:	687b      	ldr	r3, [r7, #4]
 80231f0:	681b      	ldr	r3, [r3, #0]
 80231f2:	2b00      	cmp	r3, #0
 80231f4:	d101      	bne.n	80231fa <sys_sem_valid+0x14>
    return 0;
 80231f6:	2300      	movs	r3, #0
 80231f8:	e000      	b.n	80231fc <sys_sem_valid+0x16>
  else
    return 1;                                       
 80231fa:	2301      	movs	r3, #1
}
 80231fc:	4618      	mov	r0, r3
 80231fe:	370c      	adds	r7, #12
 8023200:	46bd      	mov	sp, r7
 8023202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023206:	4770      	bx	lr

08023208 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
 8023208:	b480      	push	{r7}
 802320a:	b083      	sub	sp, #12
 802320c:	af00      	add	r7, sp, #0
 802320e:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;                                                          
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	2200      	movs	r2, #0
 8023214:	601a      	str	r2, [r3, #0]
} 
 8023216:	bf00      	nop
 8023218:	370c      	adds	r7, #12
 802321a:	46bd      	mov	sp, r7
 802321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023220:	4770      	bx	lr
	...

08023224 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 8023224:	b580      	push	{r7, lr}
 8023226:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8023228:	4803      	ldr	r0, [pc, #12]	; (8023238 <sys_init+0x14>)
 802322a:	f7f1 fa77 	bl	801471c <osMutexCreate>
 802322e:	4602      	mov	r2, r0
 8023230:	4b02      	ldr	r3, [pc, #8]	; (802323c <sys_init+0x18>)
 8023232:	601a      	str	r2, [r3, #0]
}
 8023234:	bf00      	nop
 8023236:	bd80      	pop	{r7, pc}
 8023238:	0802af84 	.word	0x0802af84
 802323c:	20008c44 	.word	0x20008c44

08023240 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8023240:	b580      	push	{r7, lr}
 8023242:	b084      	sub	sp, #16
 8023244:	af00      	add	r7, sp, #0
 8023246:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 8023248:	2300      	movs	r3, #0
 802324a:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 802324c:	f107 030c 	add.w	r3, r7, #12
 8023250:	4618      	mov	r0, r3
 8023252:	f7f1 fa63 	bl	801471c <osMutexCreate>
 8023256:	4602      	mov	r2, r0
 8023258:	687b      	ldr	r3, [r7, #4]
 802325a:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 802325c:	687b      	ldr	r3, [r7, #4]
 802325e:	681b      	ldr	r3, [r3, #0]
 8023260:	2b00      	cmp	r3, #0
 8023262:	d102      	bne.n	802326a <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 8023264:	f04f 33ff 	mov.w	r3, #4294967295
 8023268:	e000      	b.n	802326c <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 802326a:	2300      	movs	r3, #0
}
 802326c:	4618      	mov	r0, r3
 802326e:	3710      	adds	r7, #16
 8023270:	46bd      	mov	sp, r7
 8023272:	bd80      	pop	{r7, pc}

08023274 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8023274:	b580      	push	{r7, lr}
 8023276:	b082      	sub	sp, #8
 8023278:	af00      	add	r7, sp, #0
 802327a:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 802327c:	687b      	ldr	r3, [r7, #4]
 802327e:	681b      	ldr	r3, [r3, #0]
 8023280:	f04f 31ff 	mov.w	r1, #4294967295
 8023284:	4618      	mov	r0, r3
 8023286:	f7f1 fa55 	bl	8014734 <osMutexWait>
}
 802328a:	bf00      	nop
 802328c:	3708      	adds	r7, #8
 802328e:	46bd      	mov	sp, r7
 8023290:	bd80      	pop	{r7, pc}

08023292 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8023292:	b580      	push	{r7, lr}
 8023294:	b082      	sub	sp, #8
 8023296:	af00      	add	r7, sp, #0
 8023298:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	681b      	ldr	r3, [r3, #0]
 802329e:	4618      	mov	r0, r3
 80232a0:	f7f1 fa98 	bl	80147d4 <osMutexRelease>
}
 80232a4:	bf00      	nop
 80232a6:	3708      	adds	r7, #8
 80232a8:	46bd      	mov	sp, r7
 80232aa:	bd80      	pop	{r7, pc}

080232ac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80232ac:	b580      	push	{r7, lr}
 80232ae:	b08a      	sub	sp, #40	; 0x28
 80232b0:	af00      	add	r7, sp, #0
 80232b2:	60f8      	str	r0, [r7, #12]
 80232b4:	60b9      	str	r1, [r7, #8]
 80232b6:	607a      	str	r2, [r7, #4]
 80232b8:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80232ba:	68fb      	ldr	r3, [r7, #12]
 80232bc:	617b      	str	r3, [r7, #20]
 80232be:	68bb      	ldr	r3, [r7, #8]
 80232c0:	61bb      	str	r3, [r7, #24]
 80232c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80232c4:	b21b      	sxth	r3, r3
 80232c6:	83bb      	strh	r3, [r7, #28]
 80232c8:	2300      	movs	r3, #0
 80232ca:	623b      	str	r3, [r7, #32]
 80232cc:	683b      	ldr	r3, [r7, #0]
 80232ce:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80232d0:	f107 0314 	add.w	r3, r7, #20
 80232d4:	6879      	ldr	r1, [r7, #4]
 80232d6:	4618      	mov	r0, r3
 80232d8:	f7f1 f9e5 	bl	80146a6 <osThreadCreate>
 80232dc:	4603      	mov	r3, r0
}
 80232de:	4618      	mov	r0, r3
 80232e0:	3728      	adds	r7, #40	; 0x28
 80232e2:	46bd      	mov	sp, r7
 80232e4:	bd80      	pop	{r7, pc}
	...

080232e8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80232e8:	b580      	push	{r7, lr}
 80232ea:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80232ec:	4b04      	ldr	r3, [pc, #16]	; (8023300 <sys_arch_protect+0x18>)
 80232ee:	681b      	ldr	r3, [r3, #0]
 80232f0:	f04f 31ff 	mov.w	r1, #4294967295
 80232f4:	4618      	mov	r0, r3
 80232f6:	f7f1 fa1d 	bl	8014734 <osMutexWait>
  return (sys_prot_t)1;
 80232fa:	2301      	movs	r3, #1
}
 80232fc:	4618      	mov	r0, r3
 80232fe:	bd80      	pop	{r7, pc}
 8023300:	20008c44 	.word	0x20008c44

08023304 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8023304:	b580      	push	{r7, lr}
 8023306:	b082      	sub	sp, #8
 8023308:	af00      	add	r7, sp, #0
 802330a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 802330c:	4b04      	ldr	r3, [pc, #16]	; (8023320 <sys_arch_unprotect+0x1c>)
 802330e:	681b      	ldr	r3, [r3, #0]
 8023310:	4618      	mov	r0, r3
 8023312:	f7f1 fa5f 	bl	80147d4 <osMutexRelease>
}
 8023316:	bf00      	nop
 8023318:	3708      	adds	r7, #8
 802331a:	46bd      	mov	sp, r7
 802331c:	bd80      	pop	{r7, pc}
 802331e:	bf00      	nop
 8023320:	20008c44 	.word	0x20008c44

08023324 <is_exp_of_2>:
#include "circbuff.h"

/*Checks if argument is power of 2 --------------------------------------- */

static uint8_t is_exp_of_2(uint32_t n)
{
 8023324:	b480      	push	{r7}
 8023326:	b083      	sub	sp, #12
 8023328:	af00      	add	r7, sp, #0
 802332a:	6078      	str	r0, [r7, #4]
    return ( n & (n - 1) ) == 0;
 802332c:	687b      	ldr	r3, [r7, #4]
 802332e:	1e5a      	subs	r2, r3, #1
 8023330:	687b      	ldr	r3, [r7, #4]
 8023332:	4013      	ands	r3, r2
 8023334:	2b00      	cmp	r3, #0
 8023336:	bf0c      	ite	eq
 8023338:	2301      	moveq	r3, #1
 802333a:	2300      	movne	r3, #0
 802333c:	b2db      	uxtb	r3, r3
}
 802333e:	4618      	mov	r0, r3
 8023340:	370c      	adds	r7, #12
 8023342:	46bd      	mov	sp, r7
 8023344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023348:	4770      	bx	lr

0802334a <CB_Init>:

/* Circular buffer initiation function ----------------------------------- */

error_t CB_Init(circbuff *cb, uint32_t buf_size) {
 802334a:	b580      	push	{r7, lr}
 802334c:	b082      	sub	sp, #8
 802334e:	af00      	add	r7, sp, #0
 8023350:	6078      	str	r0, [r7, #4]
 8023352:	6039      	str	r1, [r7, #0]
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 8023354:	6838      	ldr	r0, [r7, #0]
 8023356:	f7ff ffe5 	bl	8023324 <is_exp_of_2>
 802335a:	4603      	mov	r3, r0
 802335c:	2b00      	cmp	r3, #0
 802335e:	d101      	bne.n	8023364 <CB_Init+0x1a>
 8023360:	2304      	movs	r3, #4
 8023362:	e015      	b.n	8023390 <CB_Init+0x46>
						/* return error if buffer size is not power of 2 */
	cb->size = buf_size;
 8023364:	687b      	ldr	r3, [r7, #4]
 8023366:	683a      	ldr	r2, [r7, #0]
 8023368:	605a      	str	r2, [r3, #4]
	cb->read_pos = 0;
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	2200      	movs	r2, #0
 802336e:	609a      	str	r2, [r3, #8]
	cb->write_pos = 0;
 8023370:	687b      	ldr	r3, [r7, #4]
 8023372:	2200      	movs	r2, #0
 8023374:	60da      	str	r2, [r3, #12]
	cb->buf = (uint8_t*) pvPortMalloc(buf_size * sizeof(uint8_t));
 8023376:	6838      	ldr	r0, [r7, #0]
 8023378:	f7f1 fed2 	bl	8015120 <pvPortMalloc>
 802337c:	4602      	mov	r2, r0
 802337e:	687b      	ldr	r3, [r7, #4]
 8023380:	601a      	str	r2, [r3, #0]
	if (cb->buf == NULL) {
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	681b      	ldr	r3, [r3, #0]
 8023386:	2b00      	cmp	r3, #0
 8023388:	d101      	bne.n	802338e <CB_Init+0x44>
		return MEM_ERR;
 802338a:	2301      	movs	r3, #1
 802338c:	e000      	b.n	8023390 <CB_Init+0x46>
	}
	return NO_ERR;
 802338e:	2300      	movs	r3, #0
}
 8023390:	4618      	mov	r0, r3
 8023392:	3708      	adds	r7, #8
 8023394:	46bd      	mov	sp, r7
 8023396:	bd80      	pop	{r7, pc}

08023398 <CB_Data_Length>:

/* Returns length of data in buffer ---------------------------------------*/

uint32_t CB_Data_Length(circbuff *cb) {
 8023398:	b480      	push	{r7}
 802339a:	b083      	sub	sp, #12
 802339c:	af00      	add	r7, sp, #0
 802339e:	6078      	str	r0, [r7, #4]
	return ((cb->write_pos - cb->read_pos) & (cb->size - 1));
 80233a0:	687b      	ldr	r3, [r7, #4]
 80233a2:	68da      	ldr	r2, [r3, #12]
 80233a4:	687b      	ldr	r3, [r7, #4]
 80233a6:	689b      	ldr	r3, [r3, #8]
 80233a8:	1ad2      	subs	r2, r2, r3
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	685b      	ldr	r3, [r3, #4]
 80233ae:	3b01      	subs	r3, #1
 80233b0:	4013      	ands	r3, r2
}
 80233b2:	4618      	mov	r0, r3
 80233b4:	370c      	adds	r7, #12
 80233b6:	46bd      	mov	sp, r7
 80233b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233bc:	4770      	bx	lr

080233be <CB_Write>:

/* Write new element to buffer --------------------------------------------*/

error_t CB_Write(circbuff *cb, uint8_t item){
 80233be:	b580      	push	{r7, lr}
 80233c0:	b082      	sub	sp, #8
 80233c2:	af00      	add	r7, sp, #0
 80233c4:	6078      	str	r0, [r7, #4]
 80233c6:	460b      	mov	r3, r1
 80233c8:	70fb      	strb	r3, [r7, #3]
	if (CB_Data_Length(cb) >= (cb->size - 1)){
 80233ca:	6878      	ldr	r0, [r7, #4]
 80233cc:	f7ff ffe4 	bl	8023398 <CB_Data_Length>
 80233d0:	4602      	mov	r2, r0
 80233d2:	687b      	ldr	r3, [r7, #4]
 80233d4:	685b      	ldr	r3, [r3, #4]
 80233d6:	3b01      	subs	r3, #1
 80233d8:	429a      	cmp	r2, r3
 80233da:	d301      	bcc.n	80233e0 <CB_Write+0x22>
		return FULL_ERR;
 80233dc:	2303      	movs	r3, #3
 80233de:	e010      	b.n	8023402 <CB_Write+0x44>
	}
	cb->buf[cb->write_pos] = item;
 80233e0:	687b      	ldr	r3, [r7, #4]
 80233e2:	681a      	ldr	r2, [r3, #0]
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	68db      	ldr	r3, [r3, #12]
 80233e8:	4413      	add	r3, r2
 80233ea:	78fa      	ldrb	r2, [r7, #3]
 80233ec:	701a      	strb	r2, [r3, #0]
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
 80233ee:	687b      	ldr	r3, [r7, #4]
 80233f0:	68db      	ldr	r3, [r3, #12]
 80233f2:	1c5a      	adds	r2, r3, #1
 80233f4:	687b      	ldr	r3, [r7, #4]
 80233f6:	685b      	ldr	r3, [r3, #4]
 80233f8:	3b01      	subs	r3, #1
 80233fa:	401a      	ands	r2, r3
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	60da      	str	r2, [r3, #12]
	return NO_ERR;
 8023400:	2300      	movs	r3, #0
}
 8023402:	4618      	mov	r0, r3
 8023404:	3708      	adds	r7, #8
 8023406:	46bd      	mov	sp, r7
 8023408:	bd80      	pop	{r7, pc}

0802340a <CB_Read>:

/* Read element from buffer -----------------------------------------------*/

error_t CB_Read(circbuff *cb, uint8_t * item){
 802340a:	b580      	push	{r7, lr}
 802340c:	b082      	sub	sp, #8
 802340e:	af00      	add	r7, sp, #0
 8023410:	6078      	str	r0, [r7, #4]
 8023412:	6039      	str	r1, [r7, #0]
	if (CB_Data_Length(cb) == 0){
 8023414:	6878      	ldr	r0, [r7, #4]
 8023416:	f7ff ffbf 	bl	8023398 <CB_Data_Length>
 802341a:	4603      	mov	r3, r0
 802341c:	2b00      	cmp	r3, #0
 802341e:	d101      	bne.n	8023424 <CB_Read+0x1a>
		return EMPTY_ERR;
 8023420:	2302      	movs	r3, #2
 8023422:	e011      	b.n	8023448 <CB_Read+0x3e>
	}
	*item = cb->buf[cb->read_pos];
 8023424:	687b      	ldr	r3, [r7, #4]
 8023426:	681a      	ldr	r2, [r3, #0]
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	689b      	ldr	r3, [r3, #8]
 802342c:	4413      	add	r3, r2
 802342e:	781a      	ldrb	r2, [r3, #0]
 8023430:	683b      	ldr	r3, [r7, #0]
 8023432:	701a      	strb	r2, [r3, #0]
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
 8023434:	687b      	ldr	r3, [r7, #4]
 8023436:	689b      	ldr	r3, [r3, #8]
 8023438:	1c5a      	adds	r2, r3, #1
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	685b      	ldr	r3, [r3, #4]
 802343e:	3b01      	subs	r3, #1
 8023440:	401a      	ands	r2, r3
 8023442:	687b      	ldr	r3, [r7, #4]
 8023444:	609a      	str	r2, [r3, #8]
	return NO_ERR;
 8023446:	2300      	movs	r3, #0
}
 8023448:	4618      	mov	r0, r3
 802344a:	3708      	adds	r7, #8
 802344c:	46bd      	mov	sp, r7
 802344e:	bd80      	pop	{r7, pc}

08023450 <FlashInit>:
RESERVED01,
RESERVED02,
RESERVED03,
RESERVED04, };

void FlashInit() {
 8023450:	b580      	push	{r7, lr}
 8023452:	b082      	sub	sp, #8
 8023454:	af00      	add	r7, sp, #0

	uint16_t mem_key;
	EE_ReadVariable(MEM_KEY_ADDR, &mem_key); /* Memory key reading */
 8023456:	1dbb      	adds	r3, r7, #6
 8023458:	4619      	mov	r1, r3
 802345a:	2000      	movs	r0, #0
 802345c:	f000 fa7a 	bl	8023954 <EE_ReadVariable>
	if (mem_key != MEMORY_KEY) { /* First launching of device */
 8023460:	88fb      	ldrh	r3, [r7, #6]
 8023462:	f64b 62af 	movw	r2, #48815	; 0xbeaf
 8023466:	4293      	cmp	r3, r2
 8023468:	d01b      	beq.n	80234a2 <FlashInit+0x52>
		/* Default FLASH initialization --------------------- */
		EE_WriteVariable(MEM_KEY_ADDR, MEMORY_KEY);
 802346a:	f64b 61af 	movw	r1, #48815	; 0xbeaf
 802346e:	2000      	movs	r0, #0
 8023470:	f000 faba 	bl	80239e8 <EE_WriteVariable>
		EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 8023474:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 8023478:	2001      	movs	r0, #1
 802347a:	f000 fab5 	bl	80239e8 <EE_WriteVariable>
		EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 802347e:	f64f 5104 	movw	r1, #64772	; 0xfd04
 8023482:	2002      	movs	r0, #2
 8023484:	f000 fab0 	bl	80239e8 <EE_WriteVariable>
		EE_WriteVariable(BR_MS_ADDR, DEFAULT_BR_MS);
 8023488:	2102      	movs	r1, #2
 802348a:	2003      	movs	r0, #3
 802348c:	f000 faac 	bl	80239e8 <EE_WriteVariable>
		EE_WriteVariable(BR_LS_ADDR, DEFAULT_BR_LS);
 8023490:	f64d 416c 	movw	r1, #56428	; 0xdc6c
 8023494:	2004      	movs	r0, #4
 8023496:	f000 faa7 	bl	80239e8 <EE_WriteVariable>
		EE_WriteVariable(MPI_ADRR_ADDR, DEFAULT_MPI_ADDR);
 802349a:	2101      	movs	r1, #1
 802349c:	2005      	movs	r0, #5
 802349e:	f000 faa3 	bl	80239e8 <EE_WriteVariable>
		uint16_t ui16[2];
		uint8_t ui8[4];
	} tmp_u;

	/*baud rate */
	EE_ReadVariable(BR_MS_ADDR, &tmp_u.ui16[1]);
 80234a2:	463b      	mov	r3, r7
 80234a4:	3302      	adds	r3, #2
 80234a6:	4619      	mov	r1, r3
 80234a8:	2003      	movs	r0, #3
 80234aa:	f000 fa53 	bl	8023954 <EE_ReadVariable>
	EE_ReadVariable(BR_LS_ADDR, &tmp_u.ui16[0]);
 80234ae:	463b      	mov	r3, r7
 80234b0:	4619      	mov	r1, r3
 80234b2:	2004      	movs	r0, #4
 80234b4:	f000 fa4e 	bl	8023954 <EE_ReadVariable>
	huart5.Init.BaudRate = tmp_u.ui32;
 80234b8:	683b      	ldr	r3, [r7, #0]
 80234ba:	4a12      	ldr	r2, [pc, #72]	; (8023504 <FlashInit+0xb4>)
 80234bc:	6053      	str	r3, [r2, #4]
	hflash.speed = huart5.Init.BaudRate;
 80234be:	4b11      	ldr	r3, [pc, #68]	; (8023504 <FlashInit+0xb4>)
 80234c0:	685b      	ldr	r3, [r3, #4]
 80234c2:	4a11      	ldr	r2, [pc, #68]	; (8023508 <FlashInit+0xb8>)
 80234c4:	6013      	str	r3, [r2, #0]
    /* IP-address */
	EE_ReadVariable(IP_02_01_ADDR, &tmp_u.ui16[0]);
 80234c6:	463b      	mov	r3, r7
 80234c8:	4619      	mov	r1, r3
 80234ca:	2001      	movs	r0, #1
 80234cc:	f000 fa42 	bl	8023954 <EE_ReadVariable>
	EE_ReadVariable(IP_04_03_ADDR, &tmp_u.ui16[1]);
 80234d0:	463b      	mov	r3, r7
 80234d2:	3302      	adds	r3, #2
 80234d4:	4619      	mov	r1, r3
 80234d6:	2002      	movs	r0, #2
 80234d8:	f000 fa3c 	bl	8023954 <EE_ReadVariable>
	hflash.IP_addr[0] = tmp_u.ui8[0];
 80234dc:	783a      	ldrb	r2, [r7, #0]
 80234de:	4b0a      	ldr	r3, [pc, #40]	; (8023508 <FlashInit+0xb8>)
 80234e0:	719a      	strb	r2, [r3, #6]
	hflash.IP_addr[1] = tmp_u.ui8[1];
 80234e2:	787a      	ldrb	r2, [r7, #1]
 80234e4:	4b08      	ldr	r3, [pc, #32]	; (8023508 <FlashInit+0xb8>)
 80234e6:	71da      	strb	r2, [r3, #7]
	hflash.IP_addr[2] = tmp_u.ui8[2];
 80234e8:	78ba      	ldrb	r2, [r7, #2]
 80234ea:	4b07      	ldr	r3, [pc, #28]	; (8023508 <FlashInit+0xb8>)
 80234ec:	721a      	strb	r2, [r3, #8]
	hflash.IP_addr[3] = tmp_u.ui8[3];
 80234ee:	78fa      	ldrb	r2, [r7, #3]
 80234f0:	4b05      	ldr	r3, [pc, #20]	; (8023508 <FlashInit+0xb8>)
 80234f2:	725a      	strb	r2, [r3, #9]
	/* MPI/Profibus address */
	EE_ReadVariable(MPI_ADRR_ADDR, &hflash.own_addr);
 80234f4:	4905      	ldr	r1, [pc, #20]	; (802350c <FlashInit+0xbc>)
 80234f6:	2005      	movs	r0, #5
 80234f8:	f000 fa2c 	bl	8023954 <EE_ReadVariable>
	/* ------------------------------------------------------- */
}
 80234fc:	bf00      	nop
 80234fe:	3708      	adds	r7, #8
 8023500:	46bd      	mov	sp, r7
 8023502:	bd80      	pop	{r7, pc}
 8023504:	2000bed0 	.word	0x2000bed0
 8023508:	20008c48 	.word	0x20008c48
 802350c:	20008c4c 	.word	0x20008c4c

08023510 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8023510:	b580      	push	{r7, lr}
 8023512:	b082      	sub	sp, #8
 8023514:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8023516:	2300      	movs	r3, #0
 8023518:	607b      	str	r3, [r7, #4]
 802351a:	4a0c      	ldr	r2, [pc, #48]	; (802354c <MX_DMA_Init+0x3c>)
 802351c:	4b0b      	ldr	r3, [pc, #44]	; (802354c <MX_DMA_Init+0x3c>)
 802351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023524:	6313      	str	r3, [r2, #48]	; 0x30
 8023526:	4b09      	ldr	r3, [pc, #36]	; (802354c <MX_DMA_Init+0x3c>)
 8023528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802352e:	607b      	str	r3, [r7, #4]
 8023530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8023532:	2200      	movs	r2, #0
 8023534:	2105      	movs	r1, #5
 8023536:	2046      	movs	r0, #70	; 0x46
 8023538:	f7ed f84c 	bl	80105d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 802353c:	2046      	movs	r0, #70	; 0x46
 802353e:	f7ed f865 	bl	801060c <HAL_NVIC_EnableIRQ>

}
 8023542:	bf00      	nop
 8023544:	3708      	adds	r7, #8
 8023546:	46bd      	mov	sp, r7
 8023548:	bd80      	pop	{r7, pc}
 802354a:	bf00      	nop
 802354c:	40023800 	.word	0x40023800

08023550 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8023550:	b580      	push	{r7, lr}
 8023552:	b08a      	sub	sp, #40	; 0x28
 8023554:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8023556:	2306      	movs	r3, #6
 8023558:	847b      	strh	r3, [r7, #34]	; 0x22
 802355a:	2306      	movs	r3, #6
 802355c:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 802355e:	2300      	movs	r3, #0
 8023560:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8023562:	2300      	movs	r3, #0
 8023564:	83fb      	strh	r3, [r7, #30]
 8023566:	2300      	movs	r3, #0
 8023568:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 802356a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802356e:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8023570:	2300      	movs	r3, #0
 8023572:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8023574:	4b9f      	ldr	r3, [pc, #636]	; (80237f4 <EE_Init+0x2a4>)
 8023576:	881b      	ldrh	r3, [r3, #0]
 8023578:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 802357a:	4b9f      	ldr	r3, [pc, #636]	; (80237f8 <EE_Init+0x2a8>)
 802357c:	881b      	ldrh	r3, [r3, #0]
 802357e:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8023580:	2300      	movs	r3, #0
 8023582:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8023584:	2302      	movs	r3, #2
 8023586:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8023588:	2301      	movs	r3, #1
 802358a:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 802358c:	2302      	movs	r3, #2
 802358e:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8023590:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023592:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023596:	4293      	cmp	r3, r2
 8023598:	d057      	beq.n	802364a <EE_Init+0xfa>
 802359a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802359e:	4293      	cmp	r3, r2
 80235a0:	d003      	beq.n	80235aa <EE_Init+0x5a>
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	f000 80f4 	beq.w	8023790 <EE_Init+0x240>
 80235a8:	e18d      	b.n	80238c6 <EE_Init+0x376>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80235aa:	8c3b      	ldrh	r3, [r7, #32]
 80235ac:	2b00      	cmp	r3, #0
 80235ae:	d116      	bne.n	80235de <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80235b0:	4890      	ldr	r0, [pc, #576]	; (80237f4 <EE_Init+0x2a4>)
 80235b2:	f000 f9a9 	bl	8023908 <EE_VerifyPageFullyErased>
 80235b6:	4603      	mov	r3, r0
 80235b8:	2b00      	cmp	r3, #0
 80235ba:	f040 818e 	bne.w	80238da <EE_Init+0x38a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80235be:	f107 0214 	add.w	r2, r7, #20
 80235c2:	463b      	mov	r3, r7
 80235c4:	4611      	mov	r1, r2
 80235c6:	4618      	mov	r0, r3
 80235c8:	f7ee fdd0 	bl	801216c <HAL_FLASHEx_Erase>
 80235cc:	4603      	mov	r3, r0
 80235ce:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80235d0:	7efb      	ldrb	r3, [r7, #27]
 80235d2:	2b00      	cmp	r3, #0
 80235d4:	f000 8181 	beq.w	80238da <EE_Init+0x38a>
          {
            return FlashStatus;
 80235d8:	7efb      	ldrb	r3, [r7, #27]
 80235da:	b29b      	uxth	r3, r3
 80235dc:	e185      	b.n	80238ea <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80235de:	8c3b      	ldrh	r3, [r7, #32]
 80235e0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80235e4:	4293      	cmp	r3, r2
 80235e6:	d125      	bne.n	8023634 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80235e8:	4882      	ldr	r0, [pc, #520]	; (80237f4 <EE_Init+0x2a4>)
 80235ea:	f000 f98d 	bl	8023908 <EE_VerifyPageFullyErased>
 80235ee:	4603      	mov	r3, r0
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d10e      	bne.n	8023612 <EE_Init+0xc2>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80235f4:	f107 0214 	add.w	r2, r7, #20
 80235f8:	463b      	mov	r3, r7
 80235fa:	4611      	mov	r1, r2
 80235fc:	4618      	mov	r0, r3
 80235fe:	f7ee fdb5 	bl	801216c <HAL_FLASHEx_Erase>
 8023602:	4603      	mov	r3, r0
 8023604:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8023606:	7efb      	ldrb	r3, [r7, #27]
 8023608:	2b00      	cmp	r3, #0
 802360a:	d002      	beq.n	8023612 <EE_Init+0xc2>
          {
            return FlashStatus;
 802360c:	7efb      	ldrb	r3, [r7, #27]
 802360e:	b29b      	uxth	r3, r3
 8023610:	e16b      	b.n	80238ea <EE_Init+0x39a>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8023612:	f04f 0200 	mov.w	r2, #0
 8023616:	f04f 0300 	mov.w	r3, #0
 802361a:	4977      	ldr	r1, [pc, #476]	; (80237f8 <EE_Init+0x2a8>)
 802361c:	2001      	movs	r0, #1
 802361e:	f7ee fc05 	bl	8011e2c <HAL_FLASH_Program>
 8023622:	4603      	mov	r3, r0
 8023624:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023626:	7efb      	ldrb	r3, [r7, #27]
 8023628:	2b00      	cmp	r3, #0
 802362a:	f000 8156 	beq.w	80238da <EE_Init+0x38a>
        {
          return FlashStatus;
 802362e:	7efb      	ldrb	r3, [r7, #27]
 8023630:	b29b      	uxth	r3, r3
 8023632:	e15a      	b.n	80238ea <EE_Init+0x39a>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8023634:	f000 f9fa 	bl	8023a2c <EE_Format>
 8023638:	4603      	mov	r3, r0
 802363a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 802363c:	7efb      	ldrb	r3, [r7, #27]
 802363e:	2b00      	cmp	r3, #0
 8023640:	f000 814b 	beq.w	80238da <EE_Init+0x38a>
        {
          return FlashStatus;
 8023644:	7efb      	ldrb	r3, [r7, #27]
 8023646:	b29b      	uxth	r3, r3
 8023648:	e14f      	b.n	80238ea <EE_Init+0x39a>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 802364a:	8c3b      	ldrh	r3, [r7, #32]
 802364c:	2b00      	cmp	r3, #0
 802364e:	d163      	bne.n	8023718 <EE_Init+0x1c8>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023650:	2300      	movs	r3, #0
 8023652:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023654:	e030      	b.n	80236b8 <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8023656:	4b69      	ldr	r3, [pc, #420]	; (80237fc <EE_Init+0x2ac>)
 8023658:	881b      	ldrh	r3, [r3, #0]
 802365a:	b29a      	uxth	r2, r3
 802365c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802365e:	4968      	ldr	r1, [pc, #416]	; (8023800 <EE_Init+0x2b0>)
 8023660:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023664:	429a      	cmp	r2, r3
 8023666:	d101      	bne.n	802366c <EE_Init+0x11c>
          {
            x = VarIdx;
 8023668:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802366a:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 802366c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802366e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8023672:	429a      	cmp	r2, r3
 8023674:	d01d      	beq.n	80236b2 <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8023676:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023678:	4a61      	ldr	r2, [pc, #388]	; (8023800 <EE_Init+0x2b0>)
 802367a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802367e:	4961      	ldr	r1, [pc, #388]	; (8023804 <EE_Init+0x2b4>)
 8023680:	4618      	mov	r0, r3
 8023682:	f000 f967 	bl	8023954 <EE_ReadVariable>
 8023686:	4603      	mov	r3, r0
 8023688:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 802368a:	8bbb      	ldrh	r3, [r7, #28]
 802368c:	2b01      	cmp	r3, #1
 802368e:	d010      	beq.n	80236b2 <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8023690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023692:	4a5b      	ldr	r2, [pc, #364]	; (8023800 <EE_Init+0x2b0>)
 8023694:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8023698:	4b5a      	ldr	r3, [pc, #360]	; (8023804 <EE_Init+0x2b4>)
 802369a:	881b      	ldrh	r3, [r3, #0]
 802369c:	4619      	mov	r1, r3
 802369e:	4610      	mov	r0, r2
 80236a0:	f000 fa5c 	bl	8023b5c <EE_VerifyPageFullWriteVariable>
 80236a4:	4603      	mov	r3, r0
 80236a6:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80236a8:	8bfb      	ldrh	r3, [r7, #30]
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d001      	beq.n	80236b2 <EE_Init+0x162>
              {
                return EepromStatus;
 80236ae:	8bfb      	ldrh	r3, [r7, #30]
 80236b0:	e11b      	b.n	80238ea <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80236b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80236b4:	3301      	adds	r3, #1
 80236b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80236b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80236ba:	2b09      	cmp	r3, #9
 80236bc:	d9cb      	bls.n	8023656 <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80236be:	f04f 0200 	mov.w	r2, #0
 80236c2:	f04f 0300 	mov.w	r3, #0
 80236c6:	494b      	ldr	r1, [pc, #300]	; (80237f4 <EE_Init+0x2a4>)
 80236c8:	2001      	movs	r0, #1
 80236ca:	f7ee fbaf 	bl	8011e2c <HAL_FLASH_Program>
 80236ce:	4603      	mov	r3, r0
 80236d0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80236d2:	7efb      	ldrb	r3, [r7, #27]
 80236d4:	2b00      	cmp	r3, #0
 80236d6:	d002      	beq.n	80236de <EE_Init+0x18e>
        {
          return FlashStatus;
 80236d8:	7efb      	ldrb	r3, [r7, #27]
 80236da:	b29b      	uxth	r3, r3
 80236dc:	e105      	b.n	80238ea <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE1_ID;
 80236de:	2303      	movs	r3, #3
 80236e0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80236e2:	2301      	movs	r3, #1
 80236e4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80236e6:	2302      	movs	r3, #2
 80236e8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80236ea:	4843      	ldr	r0, [pc, #268]	; (80237f8 <EE_Init+0x2a8>)
 80236ec:	f000 f90c 	bl	8023908 <EE_VerifyPageFullyErased>
 80236f0:	4603      	mov	r3, r0
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	f040 80f3 	bne.w	80238de <EE_Init+0x38e>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80236f8:	f107 0214 	add.w	r2, r7, #20
 80236fc:	463b      	mov	r3, r7
 80236fe:	4611      	mov	r1, r2
 8023700:	4618      	mov	r0, r3
 8023702:	f7ee fd33 	bl	801216c <HAL_FLASHEx_Erase>
 8023706:	4603      	mov	r3, r0
 8023708:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 802370a:	7efb      	ldrb	r3, [r7, #27]
 802370c:	2b00      	cmp	r3, #0
 802370e:	f000 80e6 	beq.w	80238de <EE_Init+0x38e>
          {
            return FlashStatus;
 8023712:	7efb      	ldrb	r3, [r7, #27]
 8023714:	b29b      	uxth	r3, r3
 8023716:	e0e8      	b.n	80238ea <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8023718:	8c3b      	ldrh	r3, [r7, #32]
 802371a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802371e:	4293      	cmp	r3, r2
 8023720:	d12b      	bne.n	802377a <EE_Init+0x22a>
      {
        pEraseInit.Sector = PAGE1_ID;
 8023722:	2303      	movs	r3, #3
 8023724:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8023726:	2301      	movs	r3, #1
 8023728:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 802372a:	2302      	movs	r3, #2
 802372c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 802372e:	4832      	ldr	r0, [pc, #200]	; (80237f8 <EE_Init+0x2a8>)
 8023730:	f000 f8ea 	bl	8023908 <EE_VerifyPageFullyErased>
 8023734:	4603      	mov	r3, r0
 8023736:	2b00      	cmp	r3, #0
 8023738:	d10e      	bne.n	8023758 <EE_Init+0x208>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 802373a:	f107 0214 	add.w	r2, r7, #20
 802373e:	463b      	mov	r3, r7
 8023740:	4611      	mov	r1, r2
 8023742:	4618      	mov	r0, r3
 8023744:	f7ee fd12 	bl	801216c <HAL_FLASHEx_Erase>
 8023748:	4603      	mov	r3, r0
 802374a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 802374c:	7efb      	ldrb	r3, [r7, #27]
 802374e:	2b00      	cmp	r3, #0
 8023750:	d002      	beq.n	8023758 <EE_Init+0x208>
          {
            return FlashStatus;
 8023752:	7efb      	ldrb	r3, [r7, #27]
 8023754:	b29b      	uxth	r3, r3
 8023756:	e0c8      	b.n	80238ea <EE_Init+0x39a>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8023758:	f04f 0200 	mov.w	r2, #0
 802375c:	f04f 0300 	mov.w	r3, #0
 8023760:	4924      	ldr	r1, [pc, #144]	; (80237f4 <EE_Init+0x2a4>)
 8023762:	2001      	movs	r0, #1
 8023764:	f7ee fb62 	bl	8011e2c <HAL_FLASH_Program>
 8023768:	4603      	mov	r3, r0
 802376a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 802376c:	7efb      	ldrb	r3, [r7, #27]
 802376e:	2b00      	cmp	r3, #0
 8023770:	f000 80b5 	beq.w	80238de <EE_Init+0x38e>
        {
          return FlashStatus;
 8023774:	7efb      	ldrb	r3, [r7, #27]
 8023776:	b29b      	uxth	r3, r3
 8023778:	e0b7      	b.n	80238ea <EE_Init+0x39a>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 802377a:	f000 f957 	bl	8023a2c <EE_Format>
 802377e:	4603      	mov	r3, r0
 8023780:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023782:	7efb      	ldrb	r3, [r7, #27]
 8023784:	2b00      	cmp	r3, #0
 8023786:	f000 80aa 	beq.w	80238de <EE_Init+0x38e>
        {
          return FlashStatus;
 802378a:	7efb      	ldrb	r3, [r7, #27]
 802378c:	b29b      	uxth	r3, r3
 802378e:	e0ac      	b.n	80238ea <EE_Init+0x39a>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8023790:	8c3b      	ldrh	r3, [r7, #32]
 8023792:	2b00      	cmp	r3, #0
 8023794:	d10a      	bne.n	80237ac <EE_Init+0x25c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8023796:	f000 f949 	bl	8023a2c <EE_Format>
 802379a:	4603      	mov	r3, r0
 802379c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 802379e:	7efb      	ldrb	r3, [r7, #27]
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	f000 809e 	beq.w	80238e2 <EE_Init+0x392>
        {
          return FlashStatus;
 80237a6:	7efb      	ldrb	r3, [r7, #27]
 80237a8:	b29b      	uxth	r3, r3
 80237aa:	e09e      	b.n	80238ea <EE_Init+0x39a>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80237ac:	8c3b      	ldrh	r3, [r7, #32]
 80237ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80237b2:	4293      	cmp	r3, r2
 80237b4:	d11b      	bne.n	80237ee <EE_Init+0x29e>
      {
        pEraseInit.Sector = PAGE1_ID;
 80237b6:	2303      	movs	r3, #3
 80237b8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80237ba:	2301      	movs	r3, #1
 80237bc:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80237be:	2302      	movs	r3, #2
 80237c0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80237c2:	480d      	ldr	r0, [pc, #52]	; (80237f8 <EE_Init+0x2a8>)
 80237c4:	f000 f8a0 	bl	8023908 <EE_VerifyPageFullyErased>
 80237c8:	4603      	mov	r3, r0
 80237ca:	2b00      	cmp	r3, #0
 80237cc:	f040 8089 	bne.w	80238e2 <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80237d0:	f107 0214 	add.w	r2, r7, #20
 80237d4:	463b      	mov	r3, r7
 80237d6:	4611      	mov	r1, r2
 80237d8:	4618      	mov	r0, r3
 80237da:	f7ee fcc7 	bl	801216c <HAL_FLASHEx_Erase>
 80237de:	4603      	mov	r3, r0
 80237e0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80237e2:	7efb      	ldrb	r3, [r7, #27]
 80237e4:	2b00      	cmp	r3, #0
 80237e6:	d07c      	beq.n	80238e2 <EE_Init+0x392>
          {
            return FlashStatus;
 80237e8:	7efb      	ldrb	r3, [r7, #27]
 80237ea:	b29b      	uxth	r3, r3
 80237ec:	e07d      	b.n	80238ea <EE_Init+0x39a>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80237ee:	2300      	movs	r3, #0
 80237f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80237f2:	e03a      	b.n	802386a <EE_Init+0x31a>
 80237f4:	08008000 	.word	0x08008000
 80237f8:	0800c000 	.word	0x0800c000
 80237fc:	08008006 	.word	0x08008006
 8023800:	20000014 	.word	0x20000014
 8023804:	2000412c 	.word	0x2000412c
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8023808:	4b3a      	ldr	r3, [pc, #232]	; (80238f4 <EE_Init+0x3a4>)
 802380a:	881b      	ldrh	r3, [r3, #0]
 802380c:	b29a      	uxth	r2, r3
 802380e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023810:	4939      	ldr	r1, [pc, #228]	; (80238f8 <EE_Init+0x3a8>)
 8023812:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023816:	429a      	cmp	r2, r3
 8023818:	d101      	bne.n	802381e <EE_Init+0x2ce>
          {
            x = VarIdx;
 802381a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802381c:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 802381e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8023820:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8023824:	429a      	cmp	r2, r3
 8023826:	d01d      	beq.n	8023864 <EE_Init+0x314>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8023828:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802382a:	4a33      	ldr	r2, [pc, #204]	; (80238f8 <EE_Init+0x3a8>)
 802382c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023830:	4932      	ldr	r1, [pc, #200]	; (80238fc <EE_Init+0x3ac>)
 8023832:	4618      	mov	r0, r3
 8023834:	f000 f88e 	bl	8023954 <EE_ReadVariable>
 8023838:	4603      	mov	r3, r0
 802383a:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 802383c:	8bbb      	ldrh	r3, [r7, #28]
 802383e:	2b01      	cmp	r3, #1
 8023840:	d010      	beq.n	8023864 <EE_Init+0x314>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8023842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023844:	4a2c      	ldr	r2, [pc, #176]	; (80238f8 <EE_Init+0x3a8>)
 8023846:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 802384a:	4b2c      	ldr	r3, [pc, #176]	; (80238fc <EE_Init+0x3ac>)
 802384c:	881b      	ldrh	r3, [r3, #0]
 802384e:	4619      	mov	r1, r3
 8023850:	4610      	mov	r0, r2
 8023852:	f000 f983 	bl	8023b5c <EE_VerifyPageFullWriteVariable>
 8023856:	4603      	mov	r3, r0
 8023858:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 802385a:	8bfb      	ldrh	r3, [r7, #30]
 802385c:	2b00      	cmp	r3, #0
 802385e:	d001      	beq.n	8023864 <EE_Init+0x314>
              {
                return EepromStatus;
 8023860:	8bfb      	ldrh	r3, [r7, #30]
 8023862:	e042      	b.n	80238ea <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023866:	3301      	adds	r3, #1
 8023868:	84fb      	strh	r3, [r7, #38]	; 0x26
 802386a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802386c:	2b09      	cmp	r3, #9
 802386e:	d9cb      	bls.n	8023808 <EE_Init+0x2b8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8023870:	f04f 0200 	mov.w	r2, #0
 8023874:	f04f 0300 	mov.w	r3, #0
 8023878:	4921      	ldr	r1, [pc, #132]	; (8023900 <EE_Init+0x3b0>)
 802387a:	2001      	movs	r0, #1
 802387c:	f7ee fad6 	bl	8011e2c <HAL_FLASH_Program>
 8023880:	4603      	mov	r3, r0
 8023882:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023884:	7efb      	ldrb	r3, [r7, #27]
 8023886:	2b00      	cmp	r3, #0
 8023888:	d002      	beq.n	8023890 <EE_Init+0x340>
        {
          return FlashStatus;
 802388a:	7efb      	ldrb	r3, [r7, #27]
 802388c:	b29b      	uxth	r3, r3
 802388e:	e02c      	b.n	80238ea <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE0_ID;
 8023890:	2302      	movs	r3, #2
 8023892:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8023894:	2301      	movs	r3, #1
 8023896:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023898:	2302      	movs	r3, #2
 802389a:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 802389c:	4819      	ldr	r0, [pc, #100]	; (8023904 <EE_Init+0x3b4>)
 802389e:	f000 f833 	bl	8023908 <EE_VerifyPageFullyErased>
 80238a2:	4603      	mov	r3, r0
 80238a4:	2b00      	cmp	r3, #0
 80238a6:	d11c      	bne.n	80238e2 <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80238a8:	f107 0214 	add.w	r2, r7, #20
 80238ac:	463b      	mov	r3, r7
 80238ae:	4611      	mov	r1, r2
 80238b0:	4618      	mov	r0, r3
 80238b2:	f7ee fc5b 	bl	801216c <HAL_FLASHEx_Erase>
 80238b6:	4603      	mov	r3, r0
 80238b8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80238ba:	7efb      	ldrb	r3, [r7, #27]
 80238bc:	2b00      	cmp	r3, #0
 80238be:	d010      	beq.n	80238e2 <EE_Init+0x392>
          {
            return FlashStatus;
 80238c0:	7efb      	ldrb	r3, [r7, #27]
 80238c2:	b29b      	uxth	r3, r3
 80238c4:	e011      	b.n	80238ea <EE_Init+0x39a>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80238c6:	f000 f8b1 	bl	8023a2c <EE_Format>
 80238ca:	4603      	mov	r3, r0
 80238cc:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80238ce:	7efb      	ldrb	r3, [r7, #27]
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	d008      	beq.n	80238e6 <EE_Init+0x396>
      {
        return FlashStatus;
 80238d4:	7efb      	ldrb	r3, [r7, #27]
 80238d6:	b29b      	uxth	r3, r3
 80238d8:	e007      	b.n	80238ea <EE_Init+0x39a>
      break;
 80238da:	bf00      	nop
 80238dc:	e004      	b.n	80238e8 <EE_Init+0x398>
      break;
 80238de:	bf00      	nop
 80238e0:	e002      	b.n	80238e8 <EE_Init+0x398>
      break;
 80238e2:	bf00      	nop
 80238e4:	e000      	b.n	80238e8 <EE_Init+0x398>
      }
      break;
 80238e6:	bf00      	nop
  }

  return HAL_OK;
 80238e8:	2300      	movs	r3, #0
}
 80238ea:	4618      	mov	r0, r3
 80238ec:	3728      	adds	r7, #40	; 0x28
 80238ee:	46bd      	mov	sp, r7
 80238f0:	bd80      	pop	{r7, pc}
 80238f2:	bf00      	nop
 80238f4:	0800c006 	.word	0x0800c006
 80238f8:	20000014 	.word	0x20000014
 80238fc:	2000412c 	.word	0x2000412c
 8023900:	0800c000 	.word	0x0800c000
 8023904:	08008000 	.word	0x08008000

08023908 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8023908:	b480      	push	{r7}
 802390a:	b085      	sub	sp, #20
 802390c:	af00      	add	r7, sp, #0
 802390e:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8023910:	2301      	movs	r3, #1
 8023912:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8023914:	f245 5355 	movw	r3, #21845	; 0x5555
 8023918:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 802391a:	e00d      	b.n	8023938 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 802391c:	687b      	ldr	r3, [r7, #4]
 802391e:	881b      	ldrh	r3, [r3, #0]
 8023920:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8023922:	897b      	ldrh	r3, [r7, #10]
 8023924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023928:	4293      	cmp	r3, r2
 802392a:	d002      	beq.n	8023932 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 802392c:	2300      	movs	r3, #0
 802392e:	60fb      	str	r3, [r7, #12]

      break;
 8023930:	e006      	b.n	8023940 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 8023932:	687b      	ldr	r3, [r7, #4]
 8023934:	3304      	adds	r3, #4
 8023936:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8023938:	687b      	ldr	r3, [r7, #4]
 802393a:	4a05      	ldr	r2, [pc, #20]	; (8023950 <EE_VerifyPageFullyErased+0x48>)
 802393c:	4293      	cmp	r3, r2
 802393e:	d9ed      	bls.n	802391c <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8023940:	68fb      	ldr	r3, [r7, #12]
 8023942:	b29b      	uxth	r3, r3
}
 8023944:	4618      	mov	r0, r3
 8023946:	3714      	adds	r7, #20
 8023948:	46bd      	mov	sp, r7
 802394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802394e:	4770      	bx	lr
 8023950:	0800bfff 	.word	0x0800bfff

08023954 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8023954:	b580      	push	{r7, lr}
 8023956:	b086      	sub	sp, #24
 8023958:	af00      	add	r7, sp, #0
 802395a:	4603      	mov	r3, r0
 802395c:	6039      	str	r1, [r7, #0]
 802395e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8023960:	2300      	movs	r3, #0
 8023962:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8023964:	f245 5355 	movw	r3, #21845	; 0x5555
 8023968:	81bb      	strh	r3, [r7, #12]
 802396a:	2301      	movs	r3, #1
 802396c:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 802396e:	4b1c      	ldr	r3, [pc, #112]	; (80239e0 <EE_ReadVariable+0x8c>)
 8023970:	613b      	str	r3, [r7, #16]
 8023972:	4b1b      	ldr	r3, [pc, #108]	; (80239e0 <EE_ReadVariable+0x8c>)
 8023974:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8023976:	2000      	movs	r0, #0
 8023978:	f000 f8aa 	bl	8023ad0 <EE_FindValidPage>
 802397c:	4603      	mov	r3, r0
 802397e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8023980:	89fb      	ldrh	r3, [r7, #14]
 8023982:	2bab      	cmp	r3, #171	; 0xab
 8023984:	d101      	bne.n	802398a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8023986:	23ab      	movs	r3, #171	; 0xab
 8023988:	e025      	b.n	80239d6 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 802398a:	89fb      	ldrh	r3, [r7, #14]
 802398c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023990:	3302      	adds	r3, #2
 8023992:	039b      	lsls	r3, r3, #14
 8023994:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8023996:	89fb      	ldrh	r3, [r7, #14]
 8023998:	3301      	adds	r3, #1
 802399a:	039a      	lsls	r2, r3, #14
 802399c:	4b11      	ldr	r3, [pc, #68]	; (80239e4 <EE_ReadVariable+0x90>)
 802399e:	4413      	add	r3, r2
 80239a0:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80239a2:	e012      	b.n	80239ca <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80239a4:	693b      	ldr	r3, [r7, #16]
 80239a6:	881b      	ldrh	r3, [r3, #0]
 80239a8:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80239aa:	89ba      	ldrh	r2, [r7, #12]
 80239ac:	88fb      	ldrh	r3, [r7, #6]
 80239ae:	429a      	cmp	r2, r3
 80239b0:	d108      	bne.n	80239c4 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80239b2:	693b      	ldr	r3, [r7, #16]
 80239b4:	3b02      	subs	r3, #2
 80239b6:	881b      	ldrh	r3, [r3, #0]
 80239b8:	b29a      	uxth	r2, r3
 80239ba:	683b      	ldr	r3, [r7, #0]
 80239bc:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80239be:	2300      	movs	r3, #0
 80239c0:	82fb      	strh	r3, [r7, #22]

      break;
 80239c2:	e007      	b.n	80239d4 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80239c4:	693b      	ldr	r3, [r7, #16]
 80239c6:	3b04      	subs	r3, #4
 80239c8:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80239ca:	68bb      	ldr	r3, [r7, #8]
 80239cc:	1c9a      	adds	r2, r3, #2
 80239ce:	693b      	ldr	r3, [r7, #16]
 80239d0:	429a      	cmp	r2, r3
 80239d2:	d3e7      	bcc.n	80239a4 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80239d4:	8afb      	ldrh	r3, [r7, #22]
}
 80239d6:	4618      	mov	r0, r3
 80239d8:	3718      	adds	r7, #24
 80239da:	46bd      	mov	sp, r7
 80239dc:	bd80      	pop	{r7, pc}
 80239de:	bf00      	nop
 80239e0:	08008000 	.word	0x08008000
 80239e4:	08007ffe 	.word	0x08007ffe

080239e8 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80239e8:	b580      	push	{r7, lr}
 80239ea:	b084      	sub	sp, #16
 80239ec:	af00      	add	r7, sp, #0
 80239ee:	4603      	mov	r3, r0
 80239f0:	460a      	mov	r2, r1
 80239f2:	80fb      	strh	r3, [r7, #6]
 80239f4:	4613      	mov	r3, r2
 80239f6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80239f8:	2300      	movs	r3, #0
 80239fa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80239fc:	88ba      	ldrh	r2, [r7, #4]
 80239fe:	88fb      	ldrh	r3, [r7, #6]
 8023a00:	4611      	mov	r1, r2
 8023a02:	4618      	mov	r0, r3
 8023a04:	f000 f8aa 	bl	8023b5c <EE_VerifyPageFullWriteVariable>
 8023a08:	4603      	mov	r3, r0
 8023a0a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8023a0c:	89fb      	ldrh	r3, [r7, #14]
 8023a0e:	2b80      	cmp	r3, #128	; 0x80
 8023a10:	d107      	bne.n	8023a22 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8023a12:	88ba      	ldrh	r2, [r7, #4]
 8023a14:	88fb      	ldrh	r3, [r7, #6]
 8023a16:	4611      	mov	r1, r2
 8023a18:	4618      	mov	r0, r3
 8023a1a:	f000 f8fd 	bl	8023c18 <EE_PageTransfer>
 8023a1e:	4603      	mov	r3, r0
 8023a20:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8023a22:	89fb      	ldrh	r3, [r7, #14]
}
 8023a24:	4618      	mov	r0, r3
 8023a26:	3710      	adds	r7, #16
 8023a28:	46bd      	mov	sp, r7
 8023a2a:	bd80      	pop	{r7, pc}

08023a2c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8023a2c:	b580      	push	{r7, lr}
 8023a2e:	b088      	sub	sp, #32
 8023a30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8023a32:	2300      	movs	r3, #0
 8023a34:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8023a36:	2300      	movs	r3, #0
 8023a38:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8023a3a:	2300      	movs	r3, #0
 8023a3c:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8023a3e:	2302      	movs	r3, #2
 8023a40:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8023a42:	2301      	movs	r3, #1
 8023a44:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023a46:	2302      	movs	r3, #2
 8023a48:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8023a4a:	481f      	ldr	r0, [pc, #124]	; (8023ac8 <EE_Format+0x9c>)
 8023a4c:	f7ff ff5c 	bl	8023908 <EE_VerifyPageFullyErased>
 8023a50:	4603      	mov	r3, r0
 8023a52:	2b00      	cmp	r3, #0
 8023a54:	d10d      	bne.n	8023a72 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8023a56:	f107 0218 	add.w	r2, r7, #24
 8023a5a:	1d3b      	adds	r3, r7, #4
 8023a5c:	4611      	mov	r1, r2
 8023a5e:	4618      	mov	r0, r3
 8023a60:	f7ee fb84 	bl	801216c <HAL_FLASHEx_Erase>
 8023a64:	4603      	mov	r3, r0
 8023a66:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8023a68:	7ffb      	ldrb	r3, [r7, #31]
 8023a6a:	2b00      	cmp	r3, #0
 8023a6c:	d001      	beq.n	8023a72 <EE_Format+0x46>
    {
      return FlashStatus;
 8023a6e:	7ffb      	ldrb	r3, [r7, #31]
 8023a70:	e025      	b.n	8023abe <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8023a72:	f04f 0200 	mov.w	r2, #0
 8023a76:	f04f 0300 	mov.w	r3, #0
 8023a7a:	4913      	ldr	r1, [pc, #76]	; (8023ac8 <EE_Format+0x9c>)
 8023a7c:	2001      	movs	r0, #1
 8023a7e:	f7ee f9d5 	bl	8011e2c <HAL_FLASH_Program>
 8023a82:	4603      	mov	r3, r0
 8023a84:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023a86:	7ffb      	ldrb	r3, [r7, #31]
 8023a88:	2b00      	cmp	r3, #0
 8023a8a:	d001      	beq.n	8023a90 <EE_Format+0x64>
  {
    return FlashStatus;
 8023a8c:	7ffb      	ldrb	r3, [r7, #31]
 8023a8e:	e016      	b.n	8023abe <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8023a90:	2303      	movs	r3, #3
 8023a92:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8023a94:	480d      	ldr	r0, [pc, #52]	; (8023acc <EE_Format+0xa0>)
 8023a96:	f7ff ff37 	bl	8023908 <EE_VerifyPageFullyErased>
 8023a9a:	4603      	mov	r3, r0
 8023a9c:	2b00      	cmp	r3, #0
 8023a9e:	d10d      	bne.n	8023abc <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8023aa0:	f107 0218 	add.w	r2, r7, #24
 8023aa4:	1d3b      	adds	r3, r7, #4
 8023aa6:	4611      	mov	r1, r2
 8023aa8:	4618      	mov	r0, r3
 8023aaa:	f7ee fb5f 	bl	801216c <HAL_FLASHEx_Erase>
 8023aae:	4603      	mov	r3, r0
 8023ab0:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8023ab2:	7ffb      	ldrb	r3, [r7, #31]
 8023ab4:	2b00      	cmp	r3, #0
 8023ab6:	d001      	beq.n	8023abc <EE_Format+0x90>
    {
      return FlashStatus;
 8023ab8:	7ffb      	ldrb	r3, [r7, #31]
 8023aba:	e000      	b.n	8023abe <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8023abc:	2300      	movs	r3, #0
}
 8023abe:	4618      	mov	r0, r3
 8023ac0:	3720      	adds	r7, #32
 8023ac2:	46bd      	mov	sp, r7
 8023ac4:	bd80      	pop	{r7, pc}
 8023ac6:	bf00      	nop
 8023ac8:	08008000 	.word	0x08008000
 8023acc:	0800c000 	.word	0x0800c000

08023ad0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8023ad0:	b480      	push	{r7}
 8023ad2:	b085      	sub	sp, #20
 8023ad4:	af00      	add	r7, sp, #0
 8023ad6:	4603      	mov	r3, r0
 8023ad8:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8023ada:	2306      	movs	r3, #6
 8023adc:	81fb      	strh	r3, [r7, #14]
 8023ade:	2306      	movs	r3, #6
 8023ae0:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8023ae2:	4b1c      	ldr	r3, [pc, #112]	; (8023b54 <EE_FindValidPage+0x84>)
 8023ae4:	881b      	ldrh	r3, [r3, #0]
 8023ae6:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8023ae8:	4b1b      	ldr	r3, [pc, #108]	; (8023b58 <EE_FindValidPage+0x88>)
 8023aea:	881b      	ldrh	r3, [r3, #0]
 8023aec:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8023aee:	79fb      	ldrb	r3, [r7, #7]
 8023af0:	2b00      	cmp	r3, #0
 8023af2:	d01b      	beq.n	8023b2c <EE_FindValidPage+0x5c>
 8023af4:	2b01      	cmp	r3, #1
 8023af6:	d125      	bne.n	8023b44 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8023af8:	89bb      	ldrh	r3, [r7, #12]
 8023afa:	2b00      	cmp	r3, #0
 8023afc:	d108      	bne.n	8023b10 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8023afe:	89fb      	ldrh	r3, [r7, #14]
 8023b00:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023b04:	4293      	cmp	r3, r2
 8023b06:	d101      	bne.n	8023b0c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8023b08:	2300      	movs	r3, #0
 8023b0a:	e01c      	b.n	8023b46 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8023b0c:	2301      	movs	r3, #1
 8023b0e:	e01a      	b.n	8023b46 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8023b10:	89fb      	ldrh	r3, [r7, #14]
 8023b12:	2b00      	cmp	r3, #0
 8023b14:	d108      	bne.n	8023b28 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8023b16:	89bb      	ldrh	r3, [r7, #12]
 8023b18:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023b1c:	4293      	cmp	r3, r2
 8023b1e:	d101      	bne.n	8023b24 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8023b20:	2301      	movs	r3, #1
 8023b22:	e010      	b.n	8023b46 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8023b24:	2300      	movs	r3, #0
 8023b26:	e00e      	b.n	8023b46 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8023b28:	23ab      	movs	r3, #171	; 0xab
 8023b2a:	e00c      	b.n	8023b46 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8023b2c:	89fb      	ldrh	r3, [r7, #14]
 8023b2e:	2b00      	cmp	r3, #0
 8023b30:	d101      	bne.n	8023b36 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8023b32:	2300      	movs	r3, #0
 8023b34:	e007      	b.n	8023b46 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8023b36:	89bb      	ldrh	r3, [r7, #12]
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	d101      	bne.n	8023b40 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8023b3c:	2301      	movs	r3, #1
 8023b3e:	e002      	b.n	8023b46 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8023b40:	23ab      	movs	r3, #171	; 0xab
 8023b42:	e000      	b.n	8023b46 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8023b44:	2300      	movs	r3, #0
  }
}
 8023b46:	4618      	mov	r0, r3
 8023b48:	3714      	adds	r7, #20
 8023b4a:	46bd      	mov	sp, r7
 8023b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b50:	4770      	bx	lr
 8023b52:	bf00      	nop
 8023b54:	08008000 	.word	0x08008000
 8023b58:	0800c000 	.word	0x0800c000

08023b5c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8023b5c:	b590      	push	{r4, r7, lr}
 8023b5e:	b087      	sub	sp, #28
 8023b60:	af00      	add	r7, sp, #0
 8023b62:	4603      	mov	r3, r0
 8023b64:	460a      	mov	r2, r1
 8023b66:	80fb      	strh	r3, [r7, #6]
 8023b68:	4613      	mov	r3, r2
 8023b6a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8023b6c:	2300      	movs	r3, #0
 8023b6e:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8023b70:	2300      	movs	r3, #0
 8023b72:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8023b74:	4b25      	ldr	r3, [pc, #148]	; (8023c0c <EE_VerifyPageFullWriteVariable+0xb0>)
 8023b76:	617b      	str	r3, [r7, #20]
 8023b78:	4b25      	ldr	r3, [pc, #148]	; (8023c10 <EE_VerifyPageFullWriteVariable+0xb4>)
 8023b7a:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8023b7c:	2001      	movs	r0, #1
 8023b7e:	f7ff ffa7 	bl	8023ad0 <EE_FindValidPage>
 8023b82:	4603      	mov	r3, r0
 8023b84:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8023b86:	8a3b      	ldrh	r3, [r7, #16]
 8023b88:	2bab      	cmp	r3, #171	; 0xab
 8023b8a:	d101      	bne.n	8023b90 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8023b8c:	23ab      	movs	r3, #171	; 0xab
 8023b8e:	e039      	b.n	8023c04 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8023b90:	8a3b      	ldrh	r3, [r7, #16]
 8023b92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023b96:	3302      	adds	r3, #2
 8023b98:	039b      	lsls	r3, r3, #14
 8023b9a:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8023b9c:	8a3b      	ldrh	r3, [r7, #16]
 8023b9e:	3301      	adds	r3, #1
 8023ba0:	039a      	lsls	r2, r3, #14
 8023ba2:	4b1c      	ldr	r3, [pc, #112]	; (8023c14 <EE_VerifyPageFullWriteVariable+0xb8>)
 8023ba4:	4413      	add	r3, r2
 8023ba6:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8023ba8:	e027      	b.n	8023bfa <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8023baa:	697b      	ldr	r3, [r7, #20]
 8023bac:	681b      	ldr	r3, [r3, #0]
 8023bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023bb2:	d11f      	bne.n	8023bf4 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8023bb4:	88bb      	ldrh	r3, [r7, #4]
 8023bb6:	f04f 0400 	mov.w	r4, #0
 8023bba:	461a      	mov	r2, r3
 8023bbc:	4623      	mov	r3, r4
 8023bbe:	6979      	ldr	r1, [r7, #20]
 8023bc0:	2001      	movs	r0, #1
 8023bc2:	f7ee f933 	bl	8011e2c <HAL_FLASH_Program>
 8023bc6:	4603      	mov	r3, r0
 8023bc8:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8023bca:	7cfb      	ldrb	r3, [r7, #19]
 8023bcc:	2b00      	cmp	r3, #0
 8023bce:	d002      	beq.n	8023bd6 <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return FlashStatus;
 8023bd0:	7cfb      	ldrb	r3, [r7, #19]
 8023bd2:	b29b      	uxth	r3, r3
 8023bd4:	e016      	b.n	8023c04 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8023bd6:	697b      	ldr	r3, [r7, #20]
 8023bd8:	1c99      	adds	r1, r3, #2
 8023bda:	88fb      	ldrh	r3, [r7, #6]
 8023bdc:	f04f 0400 	mov.w	r4, #0
 8023be0:	461a      	mov	r2, r3
 8023be2:	4623      	mov	r3, r4
 8023be4:	2001      	movs	r0, #1
 8023be6:	f7ee f921 	bl	8011e2c <HAL_FLASH_Program>
 8023bea:	4603      	mov	r3, r0
 8023bec:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8023bee:	7cfb      	ldrb	r3, [r7, #19]
 8023bf0:	b29b      	uxth	r3, r3
 8023bf2:	e007      	b.n	8023c04 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8023bf4:	697b      	ldr	r3, [r7, #20]
 8023bf6:	3304      	adds	r3, #4
 8023bf8:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8023bfa:	697a      	ldr	r2, [r7, #20]
 8023bfc:	68fb      	ldr	r3, [r7, #12]
 8023bfe:	429a      	cmp	r2, r3
 8023c00:	d3d3      	bcc.n	8023baa <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8023c02:	2380      	movs	r3, #128	; 0x80
}
 8023c04:	4618      	mov	r0, r3
 8023c06:	371c      	adds	r7, #28
 8023c08:	46bd      	mov	sp, r7
 8023c0a:	bd90      	pop	{r4, r7, pc}
 8023c0c:	08008000 	.word	0x08008000
 8023c10:	0800c000 	.word	0x0800c000
 8023c14:	08007fff 	.word	0x08007fff

08023c18 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8023c18:	b580      	push	{r7, lr}
 8023c1a:	b08c      	sub	sp, #48	; 0x30
 8023c1c:	af00      	add	r7, sp, #0
 8023c1e:	4603      	mov	r3, r0
 8023c20:	460a      	mov	r2, r1
 8023c22:	80fb      	strh	r3, [r7, #6]
 8023c24:	4613      	mov	r3, r2
 8023c26:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8023c28:	2300      	movs	r3, #0
 8023c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8023c2e:	4b54      	ldr	r3, [pc, #336]	; (8023d80 <EE_PageTransfer+0x168>)
 8023c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8023c32:	2300      	movs	r3, #0
 8023c34:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8023c36:	2300      	movs	r3, #0
 8023c38:	84bb      	strh	r3, [r7, #36]	; 0x24
 8023c3a:	2300      	movs	r3, #0
 8023c3c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8023c3e:	2300      	movs	r3, #0
 8023c40:	847b      	strh	r3, [r7, #34]	; 0x22
 8023c42:	2300      	movs	r3, #0
 8023c44:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8023c46:	2300      	movs	r3, #0
 8023c48:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8023c4a:	2000      	movs	r0, #0
 8023c4c:	f7ff ff40 	bl	8023ad0 <EE_FindValidPage>
 8023c50:	4603      	mov	r3, r0
 8023c52:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8023c54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023c56:	2b01      	cmp	r3, #1
 8023c58:	d104      	bne.n	8023c64 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8023c5a:	4b49      	ldr	r3, [pc, #292]	; (8023d80 <EE_PageTransfer+0x168>)
 8023c5c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8023c5e:	2303      	movs	r3, #3
 8023c60:	857b      	strh	r3, [r7, #42]	; 0x2a
 8023c62:	e009      	b.n	8023c78 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8023c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023c66:	2b00      	cmp	r3, #0
 8023c68:	d104      	bne.n	8023c74 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8023c6a:	4b46      	ldr	r3, [pc, #280]	; (8023d84 <EE_PageTransfer+0x16c>)
 8023c6c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8023c6e:	2302      	movs	r3, #2
 8023c70:	857b      	strh	r3, [r7, #42]	; 0x2a
 8023c72:	e001      	b.n	8023c78 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8023c74:	23ab      	movs	r3, #171	; 0xab
 8023c76:	e07e      	b.n	8023d76 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8023c78:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023c7c:	f04f 0300 	mov.w	r3, #0
 8023c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023c82:	2001      	movs	r0, #1
 8023c84:	f7ee f8d2 	bl	8011e2c <HAL_FLASH_Program>
 8023c88:	4603      	mov	r3, r0
 8023c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023c92:	2b00      	cmp	r3, #0
 8023c94:	d003      	beq.n	8023c9e <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8023c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023c9a:	b29b      	uxth	r3, r3
 8023c9c:	e06b      	b.n	8023d76 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8023c9e:	88ba      	ldrh	r2, [r7, #4]
 8023ca0:	88fb      	ldrh	r3, [r7, #6]
 8023ca2:	4611      	mov	r1, r2
 8023ca4:	4618      	mov	r0, r3
 8023ca6:	f7ff ff59 	bl	8023b5c <EE_VerifyPageFullWriteVariable>
 8023caa:	4603      	mov	r3, r0
 8023cac:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8023cae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023cb0:	2b00      	cmp	r3, #0
 8023cb2:	d001      	beq.n	8023cb8 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8023cb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023cb6:	e05e      	b.n	8023d76 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023cb8:	2300      	movs	r3, #0
 8023cba:	853b      	strh	r3, [r7, #40]	; 0x28
 8023cbc:	e027      	b.n	8023d0e <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8023cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023cc0:	4a31      	ldr	r2, [pc, #196]	; (8023d88 <EE_PageTransfer+0x170>)
 8023cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023cc6:	88fa      	ldrh	r2, [r7, #6]
 8023cc8:	429a      	cmp	r2, r3
 8023cca:	d01d      	beq.n	8023d08 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8023ccc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023cce:	4a2e      	ldr	r2, [pc, #184]	; (8023d88 <EE_PageTransfer+0x170>)
 8023cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023cd4:	492d      	ldr	r1, [pc, #180]	; (8023d8c <EE_PageTransfer+0x174>)
 8023cd6:	4618      	mov	r0, r3
 8023cd8:	f7ff fe3c 	bl	8023954 <EE_ReadVariable>
 8023cdc:	4603      	mov	r3, r0
 8023cde:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8023ce0:	8c3b      	ldrh	r3, [r7, #32]
 8023ce2:	2b01      	cmp	r3, #1
 8023ce4:	d010      	beq.n	8023d08 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8023ce6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023ce8:	4a27      	ldr	r2, [pc, #156]	; (8023d88 <EE_PageTransfer+0x170>)
 8023cea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8023cee:	4b27      	ldr	r3, [pc, #156]	; (8023d8c <EE_PageTransfer+0x174>)
 8023cf0:	881b      	ldrh	r3, [r3, #0]
 8023cf2:	4619      	mov	r1, r3
 8023cf4:	4610      	mov	r0, r2
 8023cf6:	f7ff ff31 	bl	8023b5c <EE_VerifyPageFullWriteVariable>
 8023cfa:	4603      	mov	r3, r0
 8023cfc:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8023cfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023d00:	2b00      	cmp	r3, #0
 8023d02:	d001      	beq.n	8023d08 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8023d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023d06:	e036      	b.n	8023d76 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023d08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023d0a:	3301      	adds	r3, #1
 8023d0c:	853b      	strh	r3, [r7, #40]	; 0x28
 8023d0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023d10:	2b09      	cmp	r3, #9
 8023d12:	d9d4      	bls.n	8023cbe <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8023d14:	2300      	movs	r3, #0
 8023d16:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8023d18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8023d1a:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8023d1c:	2301      	movs	r3, #1
 8023d1e:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023d20:	2302      	movs	r3, #2
 8023d22:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8023d24:	f107 021c 	add.w	r2, r7, #28
 8023d28:	f107 0308 	add.w	r3, r7, #8
 8023d2c:	4611      	mov	r1, r2
 8023d2e:	4618      	mov	r0, r3
 8023d30:	f7ee fa1c 	bl	801216c <HAL_FLASHEx_Erase>
 8023d34:	4603      	mov	r3, r0
 8023d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023d3e:	2b00      	cmp	r3, #0
 8023d40:	d003      	beq.n	8023d4a <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8023d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023d46:	b29b      	uxth	r3, r3
 8023d48:	e015      	b.n	8023d76 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8023d4a:	f04f 0200 	mov.w	r2, #0
 8023d4e:	f04f 0300 	mov.w	r3, #0
 8023d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023d54:	2001      	movs	r0, #1
 8023d56:	f7ee f869 	bl	8011e2c <HAL_FLASH_Program>
 8023d5a:	4603      	mov	r3, r0
 8023d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023d64:	2b00      	cmp	r3, #0
 8023d66:	d003      	beq.n	8023d70 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8023d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023d6c:	b29b      	uxth	r3, r3
 8023d6e:	e002      	b.n	8023d76 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8023d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023d74:	b29b      	uxth	r3, r3
}
 8023d76:	4618      	mov	r0, r3
 8023d78:	3730      	adds	r7, #48	; 0x30
 8023d7a:	46bd      	mov	sp, r7
 8023d7c:	bd80      	pop	{r7, pc}
 8023d7e:	bf00      	nop
 8023d80:	08008000 	.word	0x08008000
 8023d84:	0800c000 	.word	0x0800c000
 8023d88:	20000014 	.word	0x20000014
 8023d8c:	2000412c 	.word	0x2000412c

08023d90 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8023d90:	b580      	push	{r7, lr}
 8023d92:	b08a      	sub	sp, #40	; 0x28
 8023d94:	af00      	add	r7, sp, #0
 8023d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 8023d98:	687b      	ldr	r3, [r7, #4]
 8023d9a:	681b      	ldr	r3, [r3, #0]
 8023d9c:	4a34      	ldr	r2, [pc, #208]	; (8023e70 <HAL_ETH_MspInit+0xe0>)
 8023d9e:	4293      	cmp	r3, r2
 8023da0:	d162      	bne.n	8023e68 <HAL_ETH_MspInit+0xd8>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8023da2:	2300      	movs	r3, #0
 8023da4:	613b      	str	r3, [r7, #16]
 8023da6:	4a33      	ldr	r2, [pc, #204]	; (8023e74 <HAL_ETH_MspInit+0xe4>)
 8023da8:	4b32      	ldr	r3, [pc, #200]	; (8023e74 <HAL_ETH_MspInit+0xe4>)
 8023daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8023db0:	6313      	str	r3, [r2, #48]	; 0x30
 8023db2:	4b30      	ldr	r3, [pc, #192]	; (8023e74 <HAL_ETH_MspInit+0xe4>)
 8023db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023dba:	613b      	str	r3, [r7, #16]
 8023dbc:	693b      	ldr	r3, [r7, #16]
 8023dbe:	2300      	movs	r3, #0
 8023dc0:	60fb      	str	r3, [r7, #12]
 8023dc2:	4a2c      	ldr	r2, [pc, #176]	; (8023e74 <HAL_ETH_MspInit+0xe4>)
 8023dc4:	4b2b      	ldr	r3, [pc, #172]	; (8023e74 <HAL_ETH_MspInit+0xe4>)
 8023dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8023dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8023dce:	4b29      	ldr	r3, [pc, #164]	; (8023e74 <HAL_ETH_MspInit+0xe4>)
 8023dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8023dd6:	60fb      	str	r3, [r7, #12]
 8023dd8:	68fb      	ldr	r3, [r7, #12]
 8023dda:	2300      	movs	r3, #0
 8023ddc:	60bb      	str	r3, [r7, #8]
 8023dde:	4a25      	ldr	r2, [pc, #148]	; (8023e74 <HAL_ETH_MspInit+0xe4>)
 8023de0:	4b24      	ldr	r3, [pc, #144]	; (8023e74 <HAL_ETH_MspInit+0xe4>)
 8023de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023de4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8023de8:	6313      	str	r3, [r2, #48]	; 0x30
 8023dea:	4b22      	ldr	r3, [pc, #136]	; (8023e74 <HAL_ETH_MspInit+0xe4>)
 8023dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023df2:	60bb      	str	r3, [r7, #8]
 8023df4:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> ETH_RX_ER
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8023df6:	2332      	movs	r3, #50	; 0x32
 8023df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023dfa:	2302      	movs	r3, #2
 8023dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023dfe:	2300      	movs	r3, #0
 8023e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023e02:	2303      	movs	r3, #3
 8023e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023e06:	230b      	movs	r3, #11
 8023e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023e0a:	f107 0314 	add.w	r3, r7, #20
 8023e0e:	4619      	mov	r1, r3
 8023e10:	4819      	ldr	r0, [pc, #100]	; (8023e78 <HAL_ETH_MspInit+0xe8>)
 8023e12:	f7ee facd 	bl	80123b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8023e16:	2386      	movs	r3, #134	; 0x86
 8023e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023e1a:	2302      	movs	r3, #2
 8023e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023e1e:	2300      	movs	r3, #0
 8023e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023e22:	2303      	movs	r3, #3
 8023e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023e26:	230b      	movs	r3, #11
 8023e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023e2a:	f107 0314 	add.w	r3, r7, #20
 8023e2e:	4619      	mov	r1, r3
 8023e30:	4812      	ldr	r0, [pc, #72]	; (8023e7c <HAL_ETH_MspInit+0xec>)
 8023e32:	f7ee fabd 	bl	80123b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8023e36:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8023e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023e3c:	2302      	movs	r3, #2
 8023e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023e40:	2300      	movs	r3, #0
 8023e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023e44:	2303      	movs	r3, #3
 8023e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023e48:	230b      	movs	r3, #11
 8023e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023e4c:	f107 0314 	add.w	r3, r7, #20
 8023e50:	4619      	mov	r1, r3
 8023e52:	480b      	ldr	r0, [pc, #44]	; (8023e80 <HAL_ETH_MspInit+0xf0>)
 8023e54:	f7ee faac 	bl	80123b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8023e58:	2200      	movs	r2, #0
 8023e5a:	2105      	movs	r1, #5
 8023e5c:	203d      	movs	r0, #61	; 0x3d
 8023e5e:	f7ec fbb9 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8023e62:	203d      	movs	r0, #61	; 0x3d
 8023e64:	f7ec fbd2 	bl	801060c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8023e68:	bf00      	nop
 8023e6a:	3728      	adds	r7, #40	; 0x28
 8023e6c:	46bd      	mov	sp, r7
 8023e6e:	bd80      	pop	{r7, pc}
 8023e70:	40028000 	.word	0x40028000
 8023e74:	40023800 	.word	0x40023800
 8023e78:	40020800 	.word	0x40020800
 8023e7c:	40020000 	.word	0x40020000
 8023e80:	40020400 	.word	0x40020400

08023e84 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8023e84:	b580      	push	{r7, lr}
 8023e86:	b082      	sub	sp, #8
 8023e88:	af00      	add	r7, sp, #0
 8023e8a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8023e8c:	4b04      	ldr	r3, [pc, #16]	; (8023ea0 <HAL_ETH_RxCpltCallback+0x1c>)
 8023e8e:	681b      	ldr	r3, [r3, #0]
 8023e90:	4618      	mov	r0, r3
 8023e92:	f7f0 fd43 	bl	801491c <osSemaphoreRelease>
}
 8023e96:	bf00      	nop
 8023e98:	3708      	adds	r7, #8
 8023e9a:	46bd      	mov	sp, r7
 8023e9c:	bd80      	pop	{r7, pc}
 8023e9e:	bf00      	nop
 8023ea0:	20004130 	.word	0x20004130

08023ea4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8023ea4:	b5b0      	push	{r4, r5, r7, lr}
 8023ea6:	b08a      	sub	sp, #40	; 0x28
 8023ea8:	af00      	add	r7, sp, #0
 8023eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8023eac:	4b4e      	ldr	r3, [pc, #312]	; (8023fe8 <low_level_init+0x144>)
 8023eae:	4a4f      	ldr	r2, [pc, #316]	; (8023fec <low_level_init+0x148>)
 8023eb0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8023eb2:	4b4d      	ldr	r3, [pc, #308]	; (8023fe8 <low_level_init+0x144>)
 8023eb4:	2201      	movs	r2, #1
 8023eb6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848I_PHY_ADDRESS;
 8023eb8:	4b4b      	ldr	r3, [pc, #300]	; (8023fe8 <low_level_init+0x144>)
 8023eba:	2201      	movs	r2, #1
 8023ebc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8023ebe:	2300      	movs	r3, #0
 8023ec0:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x02;
 8023ec4:	2302      	movs	r3, #2
 8023ec6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0xA2;
 8023eca:	23a2      	movs	r3, #162	; 0xa2
 8023ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x42;
 8023ed0:	2342      	movs	r3, #66	; 0x42
 8023ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x50;
 8023ed6:	2350      	movs	r3, #80	; 0x50
 8023ed8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0xE4;
 8023edc:	23e4      	movs	r3, #228	; 0xe4
 8023ede:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 8023ee2:	4a41      	ldr	r2, [pc, #260]	; (8023fe8 <low_level_init+0x144>)
 8023ee4:	f107 0320 	add.w	r3, r7, #32
 8023ee8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8023eea:	4b3f      	ldr	r3, [pc, #252]	; (8023fe8 <low_level_init+0x144>)
 8023eec:	2201      	movs	r2, #1
 8023eee:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8023ef0:	4b3d      	ldr	r3, [pc, #244]	; (8023fe8 <low_level_init+0x144>)
 8023ef2:	2200      	movs	r2, #0
 8023ef4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8023ef6:	4b3c      	ldr	r3, [pc, #240]	; (8023fe8 <low_level_init+0x144>)
 8023ef8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8023efc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8023efe:	483a      	ldr	r0, [pc, #232]	; (8023fe8 <low_level_init+0x144>)
 8023f00:	f7ec ff84 	bl	8010e0c <HAL_ETH_Init>
 8023f04:	4603      	mov	r3, r0
 8023f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hal_eth_init_status == HAL_OK)
 8023f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023f0e:	2b00      	cmp	r3, #0
 8023f10:	d108      	bne.n	8023f24 <low_level_init+0x80>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8023f12:	687b      	ldr	r3, [r7, #4]
 8023f14:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8023f18:	f043 0304 	orr.w	r3, r3, #4
 8023f1c:	b2da      	uxtb	r2, r3
 8023f1e:	687b      	ldr	r3, [r7, #4]
 8023f20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8023f24:	2304      	movs	r3, #4
 8023f26:	4a32      	ldr	r2, [pc, #200]	; (8023ff0 <low_level_init+0x14c>)
 8023f28:	4932      	ldr	r1, [pc, #200]	; (8023ff4 <low_level_init+0x150>)
 8023f2a:	482f      	ldr	r0, [pc, #188]	; (8023fe8 <low_level_init+0x144>)
 8023f2c:	f7ed f90c 	bl	8011148 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8023f30:	2304      	movs	r3, #4
 8023f32:	4a31      	ldr	r2, [pc, #196]	; (8023ff8 <low_level_init+0x154>)
 8023f34:	4931      	ldr	r1, [pc, #196]	; (8023ffc <low_level_init+0x158>)
 8023f36:	482c      	ldr	r0, [pc, #176]	; (8023fe8 <low_level_init+0x144>)
 8023f38:	f7ed f96f 	bl	801121a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8023f3c:	687b      	ldr	r3, [r7, #4]
 8023f3e:	2206      	movs	r2, #6
 8023f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8023f44:	4b28      	ldr	r3, [pc, #160]	; (8023fe8 <low_level_init+0x144>)
 8023f46:	695b      	ldr	r3, [r3, #20]
 8023f48:	781a      	ldrb	r2, [r3, #0]
 8023f4a:	687b      	ldr	r3, [r7, #4]
 8023f4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8023f50:	4b25      	ldr	r3, [pc, #148]	; (8023fe8 <low_level_init+0x144>)
 8023f52:	695b      	ldr	r3, [r3, #20]
 8023f54:	785a      	ldrb	r2, [r3, #1]
 8023f56:	687b      	ldr	r3, [r7, #4]
 8023f58:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8023f5c:	4b22      	ldr	r3, [pc, #136]	; (8023fe8 <low_level_init+0x144>)
 8023f5e:	695b      	ldr	r3, [r3, #20]
 8023f60:	789a      	ldrb	r2, [r3, #2]
 8023f62:	687b      	ldr	r3, [r7, #4]
 8023f64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8023f68:	4b1f      	ldr	r3, [pc, #124]	; (8023fe8 <low_level_init+0x144>)
 8023f6a:	695b      	ldr	r3, [r3, #20]
 8023f6c:	78da      	ldrb	r2, [r3, #3]
 8023f6e:	687b      	ldr	r3, [r7, #4]
 8023f70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8023f74:	4b1c      	ldr	r3, [pc, #112]	; (8023fe8 <low_level_init+0x144>)
 8023f76:	695b      	ldr	r3, [r3, #20]
 8023f78:	791a      	ldrb	r2, [r3, #4]
 8023f7a:	687b      	ldr	r3, [r7, #4]
 8023f7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8023f80:	4b19      	ldr	r3, [pc, #100]	; (8023fe8 <low_level_init+0x144>)
 8023f82:	695b      	ldr	r3, [r3, #20]
 8023f84:	795a      	ldrb	r2, [r3, #5]
 8023f86:	687b      	ldr	r3, [r7, #4]
 8023f88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8023f8c:	687b      	ldr	r3, [r7, #4]
 8023f8e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8023f92:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8023f94:	687b      	ldr	r3, [r7, #4]
 8023f96:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8023f9a:	f043 030a 	orr.w	r3, r3, #10
 8023f9e:	b2da      	uxtb	r2, r3
 8023fa0:	687b      	ldr	r3, [r7, #4]
 8023fa2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8023fa6:	2300      	movs	r3, #0
 8023fa8:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8023faa:	f107 031c 	add.w	r3, r7, #28
 8023fae:	2101      	movs	r1, #1
 8023fb0:	4618      	mov	r0, r3
 8023fb2:	f7f0 fc45 	bl	8014840 <osSemaphoreCreate>
 8023fb6:	4602      	mov	r2, r0
 8023fb8:	4b11      	ldr	r3, [pc, #68]	; (8024000 <low_level_init+0x15c>)
 8023fba:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8023fbc:	4b11      	ldr	r3, [pc, #68]	; (8024004 <low_level_init+0x160>)
 8023fbe:	f107 0408 	add.w	r4, r7, #8
 8023fc2:	461d      	mov	r5, r3
 8023fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023fc8:	682b      	ldr	r3, [r5, #0]
 8023fca:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 8023fcc:	f107 0308 	add.w	r3, r7, #8
 8023fd0:	6879      	ldr	r1, [r7, #4]
 8023fd2:	4618      	mov	r0, r3
 8023fd4:	f7f0 fb67 	bl	80146a6 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8023fd8:	4803      	ldr	r0, [pc, #12]	; (8023fe8 <low_level_init+0x144>)
 8023fda:	f7ed fc46 	bl	801186a <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8023fde:	bf00      	nop
 8023fe0:	3728      	adds	r7, #40	; 0x28
 8023fe2:	46bd      	mov	sp, r7
 8023fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8023fe6:	bf00      	nop
 8023fe8:	2000a524 	.word	0x2000a524
 8023fec:	40028000 	.word	0x40028000
 8023ff0:	2000a56c 	.word	0x2000a56c
 8023ff4:	20008c54 	.word	0x20008c54
 8023ff8:	20008cd4 	.word	0x20008cd4
 8023ffc:	2000a4a4 	.word	0x2000a4a4
 8024000:	20004130 	.word	0x20004130
 8024004:	0802895c 	.word	0x0802895c

08024008 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8024008:	b580      	push	{r7, lr}
 802400a:	b08a      	sub	sp, #40	; 0x28
 802400c:	af00      	add	r7, sp, #0
 802400e:	6078      	str	r0, [r7, #4]
 8024010:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8024012:	4b4b      	ldr	r3, [pc, #300]	; (8024140 <low_level_output+0x138>)
 8024014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024016:	689b      	ldr	r3, [r3, #8]
 8024018:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 802401a:	2300      	movs	r3, #0
 802401c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 802401e:	2300      	movs	r3, #0
 8024020:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8024022:	2300      	movs	r3, #0
 8024024:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8024026:	2300      	movs	r3, #0
 8024028:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 802402a:	4b45      	ldr	r3, [pc, #276]	; (8024140 <low_level_output+0x138>)
 802402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802402e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8024030:	2300      	movs	r3, #0
 8024032:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8024034:	683b      	ldr	r3, [r7, #0]
 8024036:	623b      	str	r3, [r7, #32]
 8024038:	e05a      	b.n	80240f0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 802403a:	69bb      	ldr	r3, [r7, #24]
 802403c:	681b      	ldr	r3, [r3, #0]
 802403e:	2b00      	cmp	r3, #0
 8024040:	da03      	bge.n	802404a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8024042:	23f8      	movs	r3, #248	; 0xf8
 8024044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8024048:	e05c      	b.n	8024104 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 802404a:	6a3b      	ldr	r3, [r7, #32]
 802404c:	895b      	ldrh	r3, [r3, #10]
 802404e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8024050:	2300      	movs	r3, #0
 8024052:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8024054:	e02f      	b.n	80240b6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8024056:	69fa      	ldr	r2, [r7, #28]
 8024058:	693b      	ldr	r3, [r7, #16]
 802405a:	18d0      	adds	r0, r2, r3
 802405c:	6a3b      	ldr	r3, [r7, #32]
 802405e:	685a      	ldr	r2, [r3, #4]
 8024060:	68bb      	ldr	r3, [r7, #8]
 8024062:	18d1      	adds	r1, r2, r3
 8024064:	693b      	ldr	r3, [r7, #16]
 8024066:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 802406a:	3304      	adds	r3, #4
 802406c:	461a      	mov	r2, r3
 802406e:	f001 ffb2 	bl	8025fd6 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8024072:	69bb      	ldr	r3, [r7, #24]
 8024074:	68db      	ldr	r3, [r3, #12]
 8024076:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8024078:	69bb      	ldr	r3, [r7, #24]
 802407a:	681b      	ldr	r3, [r3, #0]
 802407c:	2b00      	cmp	r3, #0
 802407e:	da03      	bge.n	8024088 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8024080:	23f8      	movs	r3, #248	; 0xf8
 8024082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8024086:	e03d      	b.n	8024104 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8024088:	69bb      	ldr	r3, [r7, #24]
 802408a:	689b      	ldr	r3, [r3, #8]
 802408c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 802408e:	693a      	ldr	r2, [r7, #16]
 8024090:	68fb      	ldr	r3, [r7, #12]
 8024092:	4413      	add	r3, r2
 8024094:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8024098:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 802409a:	68ba      	ldr	r2, [r7, #8]
 802409c:	693b      	ldr	r3, [r7, #16]
 802409e:	1ad3      	subs	r3, r2, r3
 80240a0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80240a4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80240a6:	697a      	ldr	r2, [r7, #20]
 80240a8:	693b      	ldr	r3, [r7, #16]
 80240aa:	1ad3      	subs	r3, r2, r3
 80240ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80240b0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80240b2:	2300      	movs	r3, #0
 80240b4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80240b6:	68fa      	ldr	r2, [r7, #12]
 80240b8:	693b      	ldr	r3, [r7, #16]
 80240ba:	4413      	add	r3, r2
 80240bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80240c0:	4293      	cmp	r3, r2
 80240c2:	d8c8      	bhi.n	8024056 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80240c4:	69fa      	ldr	r2, [r7, #28]
 80240c6:	693b      	ldr	r3, [r7, #16]
 80240c8:	18d0      	adds	r0, r2, r3
 80240ca:	6a3b      	ldr	r3, [r7, #32]
 80240cc:	685a      	ldr	r2, [r3, #4]
 80240ce:	68bb      	ldr	r3, [r7, #8]
 80240d0:	4413      	add	r3, r2
 80240d2:	68fa      	ldr	r2, [r7, #12]
 80240d4:	4619      	mov	r1, r3
 80240d6:	f001 ff7e 	bl	8025fd6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80240da:	693a      	ldr	r2, [r7, #16]
 80240dc:	68fb      	ldr	r3, [r7, #12]
 80240de:	4413      	add	r3, r2
 80240e0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80240e2:	697a      	ldr	r2, [r7, #20]
 80240e4:	68fb      	ldr	r3, [r7, #12]
 80240e6:	4413      	add	r3, r2
 80240e8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80240ea:	6a3b      	ldr	r3, [r7, #32]
 80240ec:	681b      	ldr	r3, [r3, #0]
 80240ee:	623b      	str	r3, [r7, #32]
 80240f0:	6a3b      	ldr	r3, [r7, #32]
 80240f2:	2b00      	cmp	r3, #0
 80240f4:	d1a1      	bne.n	802403a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80240f6:	6979      	ldr	r1, [r7, #20]
 80240f8:	4811      	ldr	r0, [pc, #68]	; (8024140 <low_level_output+0x138>)
 80240fa:	f7ed f8fb 	bl	80112f4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80240fe:	2300      	movs	r3, #0
 8024100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8024104:	4b0e      	ldr	r3, [pc, #56]	; (8024140 <low_level_output+0x138>)
 8024106:	681b      	ldr	r3, [r3, #0]
 8024108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802410c:	3314      	adds	r3, #20
 802410e:	681b      	ldr	r3, [r3, #0]
 8024110:	f003 0320 	and.w	r3, r3, #32
 8024114:	2b00      	cmp	r3, #0
 8024116:	d00d      	beq.n	8024134 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8024118:	4b09      	ldr	r3, [pc, #36]	; (8024140 <low_level_output+0x138>)
 802411a:	681b      	ldr	r3, [r3, #0]
 802411c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024120:	3314      	adds	r3, #20
 8024122:	2220      	movs	r2, #32
 8024124:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8024126:	4b06      	ldr	r3, [pc, #24]	; (8024140 <low_level_output+0x138>)
 8024128:	681b      	ldr	r3, [r3, #0]
 802412a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802412e:	3304      	adds	r3, #4
 8024130:	2200      	movs	r2, #0
 8024132:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8024134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8024138:	4618      	mov	r0, r3
 802413a:	3728      	adds	r7, #40	; 0x28
 802413c:	46bd      	mov	sp, r7
 802413e:	bd80      	pop	{r7, pc}
 8024140:	2000a524 	.word	0x2000a524

08024144 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8024144:	b580      	push	{r7, lr}
 8024146:	b08c      	sub	sp, #48	; 0x30
 8024148:	af00      	add	r7, sp, #0
 802414a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 802414c:	2300      	movs	r3, #0
 802414e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8024150:	2300      	movs	r3, #0
 8024152:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8024154:	2300      	movs	r3, #0
 8024156:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8024158:	2300      	movs	r3, #0
 802415a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 802415c:	2300      	movs	r3, #0
 802415e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8024160:	2300      	movs	r3, #0
 8024162:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8024164:	2300      	movs	r3, #0
 8024166:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8024168:	484e      	ldr	r0, [pc, #312]	; (80242a4 <low_level_input+0x160>)
 802416a:	f7ed f9ad 	bl	80114c8 <HAL_ETH_GetReceivedFrame_IT>
 802416e:	4603      	mov	r3, r0
 8024170:	2b00      	cmp	r3, #0
 8024172:	d001      	beq.n	8024178 <low_level_input+0x34>
    return NULL;
 8024174:	2300      	movs	r3, #0
 8024176:	e091      	b.n	802429c <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8024178:	4b4a      	ldr	r3, [pc, #296]	; (80242a4 <low_level_input+0x160>)
 802417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802417c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 802417e:	4b49      	ldr	r3, [pc, #292]	; (80242a4 <low_level_input+0x160>)
 8024180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024182:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8024184:	89fb      	ldrh	r3, [r7, #14]
 8024186:	2b00      	cmp	r3, #0
 8024188:	d006      	beq.n	8024198 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 802418a:	89fb      	ldrh	r3, [r7, #14]
 802418c:	2203      	movs	r2, #3
 802418e:	4619      	mov	r1, r3
 8024190:	2004      	movs	r0, #4
 8024192:	f7f8 f9ff 	bl	801c594 <pbuf_alloc>
 8024196:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8024198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802419a:	2b00      	cmp	r3, #0
 802419c:	d04b      	beq.n	8024236 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 802419e:	4b41      	ldr	r3, [pc, #260]	; (80242a4 <low_level_input+0x160>)
 80241a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80241a2:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80241a4:	2300      	movs	r3, #0
 80241a6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80241a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80241aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80241ac:	e040      	b.n	8024230 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80241ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241b0:	895b      	ldrh	r3, [r3, #10]
 80241b2:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80241b4:	2300      	movs	r3, #0
 80241b6:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80241b8:	e021      	b.n	80241fe <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80241ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241bc:	685a      	ldr	r2, [r3, #4]
 80241be:	69bb      	ldr	r3, [r7, #24]
 80241c0:	18d0      	adds	r0, r2, r3
 80241c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80241c4:	69fb      	ldr	r3, [r7, #28]
 80241c6:	18d1      	adds	r1, r2, r3
 80241c8:	69fb      	ldr	r3, [r7, #28]
 80241ca:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80241ce:	3304      	adds	r3, #4
 80241d0:	461a      	mov	r2, r3
 80241d2:	f001 ff00 	bl	8025fd6 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80241d6:	6a3b      	ldr	r3, [r7, #32]
 80241d8:	68db      	ldr	r3, [r3, #12]
 80241da:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80241dc:	6a3b      	ldr	r3, [r7, #32]
 80241de:	689b      	ldr	r3, [r3, #8]
 80241e0:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80241e2:	69fa      	ldr	r2, [r7, #28]
 80241e4:	697b      	ldr	r3, [r7, #20]
 80241e6:	4413      	add	r3, r2
 80241e8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80241ec:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80241ee:	69ba      	ldr	r2, [r7, #24]
 80241f0:	69fb      	ldr	r3, [r7, #28]
 80241f2:	1ad3      	subs	r3, r2, r3
 80241f4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80241f8:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80241fa:	2300      	movs	r3, #0
 80241fc:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80241fe:	697a      	ldr	r2, [r7, #20]
 8024200:	69fb      	ldr	r3, [r7, #28]
 8024202:	4413      	add	r3, r2
 8024204:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8024208:	4293      	cmp	r3, r2
 802420a:	d8d6      	bhi.n	80241ba <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 802420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802420e:	685a      	ldr	r2, [r3, #4]
 8024210:	69bb      	ldr	r3, [r7, #24]
 8024212:	18d0      	adds	r0, r2, r3
 8024214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024216:	69fb      	ldr	r3, [r7, #28]
 8024218:	4413      	add	r3, r2
 802421a:	697a      	ldr	r2, [r7, #20]
 802421c:	4619      	mov	r1, r3
 802421e:	f001 feda 	bl	8025fd6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8024222:	69fa      	ldr	r2, [r7, #28]
 8024224:	697b      	ldr	r3, [r7, #20]
 8024226:	4413      	add	r3, r2
 8024228:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 802422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802422c:	681b      	ldr	r3, [r3, #0]
 802422e:	62bb      	str	r3, [r7, #40]	; 0x28
 8024230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024232:	2b00      	cmp	r3, #0
 8024234:	d1bb      	bne.n	80241ae <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8024236:	4b1b      	ldr	r3, [pc, #108]	; (80242a4 <low_level_input+0x160>)
 8024238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802423a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 802423c:	2300      	movs	r3, #0
 802423e:	613b      	str	r3, [r7, #16]
 8024240:	e00b      	b.n	802425a <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8024242:	6a3b      	ldr	r3, [r7, #32]
 8024244:	681b      	ldr	r3, [r3, #0]
 8024246:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 802424a:	6a3b      	ldr	r3, [r7, #32]
 802424c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 802424e:	6a3b      	ldr	r3, [r7, #32]
 8024250:	68db      	ldr	r3, [r3, #12]
 8024252:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8024254:	693b      	ldr	r3, [r7, #16]
 8024256:	3301      	adds	r3, #1
 8024258:	613b      	str	r3, [r7, #16]
 802425a:	4b12      	ldr	r3, [pc, #72]	; (80242a4 <low_level_input+0x160>)
 802425c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802425e:	693b      	ldr	r3, [r7, #16]
 8024260:	429a      	cmp	r2, r3
 8024262:	d8ee      	bhi.n	8024242 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8024264:	4b0f      	ldr	r3, [pc, #60]	; (80242a4 <low_level_input+0x160>)
 8024266:	2200      	movs	r2, #0
 8024268:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 802426a:	4b0e      	ldr	r3, [pc, #56]	; (80242a4 <low_level_input+0x160>)
 802426c:	681b      	ldr	r3, [r3, #0]
 802426e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024272:	3314      	adds	r3, #20
 8024274:	681b      	ldr	r3, [r3, #0]
 8024276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802427a:	2b00      	cmp	r3, #0
 802427c:	d00d      	beq.n	802429a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 802427e:	4b09      	ldr	r3, [pc, #36]	; (80242a4 <low_level_input+0x160>)
 8024280:	681b      	ldr	r3, [r3, #0]
 8024282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024286:	3314      	adds	r3, #20
 8024288:	2280      	movs	r2, #128	; 0x80
 802428a:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 802428c:	4b05      	ldr	r3, [pc, #20]	; (80242a4 <low_level_input+0x160>)
 802428e:	681b      	ldr	r3, [r3, #0]
 8024290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024294:	3308      	adds	r3, #8
 8024296:	2200      	movs	r2, #0
 8024298:	601a      	str	r2, [r3, #0]
  }
  return p;
 802429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802429c:	4618      	mov	r0, r3
 802429e:	3730      	adds	r7, #48	; 0x30
 80242a0:	46bd      	mov	sp, r7
 80242a2:	bd80      	pop	{r7, pc}
 80242a4:	2000a524 	.word	0x2000a524

080242a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 80242a8:	b580      	push	{r7, lr}
 80242aa:	b084      	sub	sp, #16
 80242ac:	af00      	add	r7, sp, #0
 80242ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80242b0:	687b      	ldr	r3, [r7, #4]
 80242b2:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80242b4:	4b0f      	ldr	r3, [pc, #60]	; (80242f4 <ethernetif_input+0x4c>)
 80242b6:	681b      	ldr	r3, [r3, #0]
 80242b8:	f04f 31ff 	mov.w	r1, #4294967295
 80242bc:	4618      	mov	r0, r3
 80242be:	f7f0 fadd 	bl	801487c <osSemaphoreWait>
 80242c2:	4603      	mov	r3, r0
 80242c4:	2b00      	cmp	r3, #0
 80242c6:	d1f5      	bne.n	80242b4 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 80242c8:	68f8      	ldr	r0, [r7, #12]
 80242ca:	f7ff ff3b 	bl	8024144 <low_level_input>
 80242ce:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80242d0:	68bb      	ldr	r3, [r7, #8]
 80242d2:	2b00      	cmp	r3, #0
 80242d4:	d00a      	beq.n	80242ec <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80242d6:	68fb      	ldr	r3, [r7, #12]
 80242d8:	691b      	ldr	r3, [r3, #16]
 80242da:	68f9      	ldr	r1, [r7, #12]
 80242dc:	68b8      	ldr	r0, [r7, #8]
 80242de:	4798      	blx	r3
 80242e0:	4603      	mov	r3, r0
 80242e2:	2b00      	cmp	r3, #0
 80242e4:	d002      	beq.n	80242ec <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80242e6:	68b8      	ldr	r0, [r7, #8]
 80242e8:	f7f8 fcc6 	bl	801cc78 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80242ec:	68bb      	ldr	r3, [r7, #8]
 80242ee:	2b00      	cmp	r3, #0
 80242f0:	d1ea      	bne.n	80242c8 <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80242f2:	e7df      	b.n	80242b4 <ethernetif_input+0xc>
 80242f4:	20004130 	.word	0x20004130

080242f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80242f8:	b580      	push	{r7, lr}
 80242fa:	b082      	sub	sp, #8
 80242fc:	af00      	add	r7, sp, #0
 80242fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8024300:	687b      	ldr	r3, [r7, #4]
 8024302:	2b00      	cmp	r3, #0
 8024304:	d106      	bne.n	8024314 <ethernetif_init+0x1c>
 8024306:	4b0e      	ldr	r3, [pc, #56]	; (8024340 <ethernetif_init+0x48>)
 8024308:	f240 2235 	movw	r2, #565	; 0x235
 802430c:	490d      	ldr	r1, [pc, #52]	; (8024344 <ethernetif_init+0x4c>)
 802430e:	480e      	ldr	r0, [pc, #56]	; (8024348 <ethernetif_init+0x50>)
 8024310:	f001 f9ae 	bl	8025670 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8024314:	687b      	ldr	r3, [r7, #4]
 8024316:	2273      	movs	r2, #115	; 0x73
 8024318:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 802431c:	687b      	ldr	r3, [r7, #4]
 802431e:	2274      	movs	r2, #116	; 0x74
 8024320:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8024324:	687b      	ldr	r3, [r7, #4]
 8024326:	4a09      	ldr	r2, [pc, #36]	; (802434c <ethernetif_init+0x54>)
 8024328:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 802432a:	687b      	ldr	r3, [r7, #4]
 802432c:	4a08      	ldr	r2, [pc, #32]	; (8024350 <ethernetif_init+0x58>)
 802432e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8024330:	6878      	ldr	r0, [r7, #4]
 8024332:	f7ff fdb7 	bl	8023ea4 <low_level_init>

  return ERR_OK;
 8024336:	2300      	movs	r3, #0
}
 8024338:	4618      	mov	r0, r3
 802433a:	3708      	adds	r7, #8
 802433c:	46bd      	mov	sp, r7
 802433e:	bd80      	pop	{r7, pc}
 8024340:	08028970 	.word	0x08028970
 8024344:	08028984 	.word	0x08028984
 8024348:	08028994 	.word	0x08028994
 802434c:	08019c11 	.word	0x08019c11
 8024350:	08024009 	.word	0x08024009

08024354 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8024354:	b580      	push	{r7, lr}
 8024356:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8024358:	f7ec f842 	bl	80103e0 <HAL_GetTick>
 802435c:	4603      	mov	r3, r0
}
 802435e:	4618      	mov	r0, r3
 8024360:	bd80      	pop	{r7, pc}
	...

08024364 <NVIC_EnableIRQ>:
{
 8024364:	b480      	push	{r7}
 8024366:	b083      	sub	sp, #12
 8024368:	af00      	add	r7, sp, #0
 802436a:	4603      	mov	r3, r0
 802436c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 802436e:	4909      	ldr	r1, [pc, #36]	; (8024394 <NVIC_EnableIRQ+0x30>)
 8024370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024374:	095b      	lsrs	r3, r3, #5
 8024376:	79fa      	ldrb	r2, [r7, #7]
 8024378:	f002 021f 	and.w	r2, r2, #31
 802437c:	2001      	movs	r0, #1
 802437e:	fa00 f202 	lsl.w	r2, r0, r2
 8024382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8024386:	bf00      	nop
 8024388:	370c      	adds	r7, #12
 802438a:	46bd      	mov	sp, r7
 802438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024390:	4770      	bx	lr
 8024392:	bf00      	nop
 8024394:	e000e100 	.word	0xe000e100

08024398 <NVIC_SetPriority>:
{
 8024398:	b480      	push	{r7}
 802439a:	b083      	sub	sp, #12
 802439c:	af00      	add	r7, sp, #0
 802439e:	4603      	mov	r3, r0
 80243a0:	6039      	str	r1, [r7, #0]
 80243a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80243a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80243a8:	2b00      	cmp	r3, #0
 80243aa:	da0b      	bge.n	80243c4 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80243ac:	490d      	ldr	r1, [pc, #52]	; (80243e4 <NVIC_SetPriority+0x4c>)
 80243ae:	79fb      	ldrb	r3, [r7, #7]
 80243b0:	f003 030f 	and.w	r3, r3, #15
 80243b4:	3b04      	subs	r3, #4
 80243b6:	683a      	ldr	r2, [r7, #0]
 80243b8:	b2d2      	uxtb	r2, r2
 80243ba:	0112      	lsls	r2, r2, #4
 80243bc:	b2d2      	uxtb	r2, r2
 80243be:	440b      	add	r3, r1
 80243c0:	761a      	strb	r2, [r3, #24]
}
 80243c2:	e009      	b.n	80243d8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80243c4:	4908      	ldr	r1, [pc, #32]	; (80243e8 <NVIC_SetPriority+0x50>)
 80243c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80243ca:	683a      	ldr	r2, [r7, #0]
 80243cc:	b2d2      	uxtb	r2, r2
 80243ce:	0112      	lsls	r2, r2, #4
 80243d0:	b2d2      	uxtb	r2, r2
 80243d2:	440b      	add	r3, r1
 80243d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80243d8:	bf00      	nop
 80243da:	370c      	adds	r7, #12
 80243dc:	46bd      	mov	sp, r7
 80243de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243e2:	4770      	bx	lr
 80243e4:	e000ed00 	.word	0xe000ed00
 80243e8:	e000e100 	.word	0xe000e100

080243ec <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80243ec:	b580      	push	{r7, lr}
 80243ee:	af00      	add	r7, sp, #0
	NVIC_SetPriority(TIM7_IRQn,0);
 80243f0:	2100      	movs	r1, #0
 80243f2:	2037      	movs	r0, #55	; 0x37
 80243f4:	f7ff ffd0 	bl	8024398 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 80243f8:	2037      	movs	r0, #55	; 0x37
 80243fa:	f7ff ffb3 	bl	8024364 <NVIC_EnableIRQ>
	MX_TIM7_Init();
 80243fe:	f000 fee5 	bl	80251cc <MX_TIM7_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 8024402:	4802      	ldr	r0, [pc, #8]	; (802440c <configureTimerForRunTimeStats+0x20>)
 8024404:	f7ee ff01 	bl	801320a <HAL_TIM_Base_Start_IT>
}
 8024408:	bf00      	nop
 802440a:	bd80      	pop	{r7, pc}
 802440c:	2000be34 	.word	0x2000be34

08024410 <getRunTimeCounterValue>:



__weak unsigned long getRunTimeCounterValue(void)
{
 8024410:	b480      	push	{r7}
 8024412:	af00      	add	r7, sp, #0
return ulHighFrequencyTimerTicks;
 8024414:	4b03      	ldr	r3, [pc, #12]	; (8024424 <getRunTimeCounterValue+0x14>)
 8024416:	681b      	ldr	r3, [r3, #0]
}
 8024418:	4618      	mov	r0, r3
 802441a:	46bd      	mov	sp, r7
 802441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024420:	4770      	bx	lr
 8024422:	bf00      	nop
 8024424:	20004134 	.word	0x20004134

08024428 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8024428:	b5b0      	push	{r4, r5, r7, lr}
 802442a:	b08a      	sub	sp, #40	; 0x28
 802442c:	af00      	add	r7, sp, #0

  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	osThreadDef(processTask, StartProcessTask, osPriorityNormal, 0, 1024);
 802442e:	4b16      	ldr	r3, [pc, #88]	; (8024488 <MX_FREERTOS_Init+0x60>)
 8024430:	f107 0414 	add.w	r4, r7, #20
 8024434:	461d      	mov	r5, r3
 8024436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802443a:	682b      	ldr	r3, [r5, #0]
 802443c:	6023      	str	r3, [r4, #0]
	processTaskHandle = osThreadCreate(osThread(processTask), NULL);
 802443e:	f107 0314 	add.w	r3, r7, #20
 8024442:	2100      	movs	r1, #0
 8024444:	4618      	mov	r0, r3
 8024446:	f7f0 f92e 	bl	80146a6 <osThreadCreate>
 802444a:	4602      	mov	r2, r0
 802444c:	4b0f      	ldr	r3, [pc, #60]	; (802448c <MX_FREERTOS_Init+0x64>)
 802444e:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8024450:	4b0f      	ldr	r3, [pc, #60]	; (8024490 <MX_FREERTOS_Init+0x68>)
 8024452:	463c      	mov	r4, r7
 8024454:	461d      	mov	r5, r3
 8024456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802445a:	682b      	ldr	r3, [r5, #0]
 802445c:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 802445e:	463b      	mov	r3, r7
 8024460:	2100      	movs	r1, #0
 8024462:	4618      	mov	r0, r3
 8024464:	f7f0 f91f 	bl	80146a6 <osThreadCreate>
 8024468:	4602      	mov	r2, r0
 802446a:	4b0a      	ldr	r3, [pc, #40]	; (8024494 <MX_FREERTOS_Init+0x6c>)
 802446c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
	frames_queue = xQueueCreate(16, sizeof(uint16_t));
 802446e:	2200      	movs	r2, #0
 8024470:	2102      	movs	r1, #2
 8024472:	2010      	movs	r0, #16
 8024474:	f7f1 f892 	bl	801559c <xQueueGenericCreate>
 8024478:	4602      	mov	r2, r0
 802447a:	4b07      	ldr	r3, [pc, #28]	; (8024498 <MX_FREERTOS_Init+0x70>)
 802447c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */
}
 802447e:	bf00      	nop
 8024480:	3728      	adds	r7, #40	; 0x28
 8024482:	46bd      	mov	sp, r7
 8024484:	bdb0      	pop	{r4, r5, r7, pc}
 8024486:	bf00      	nop
 8024488:	080289c8 	.word	0x080289c8
 802448c:	2000bd48 	.word	0x2000bd48
 8024490:	080289e8 	.word	0x080289e8
 8024494:	2000bd3c 	.word	0x2000bd3c
 8024498:	2000bd40 	.word	0x2000bd40

0802449c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 802449c:	b580      	push	{r7, lr}
 802449e:	b086      	sub	sp, #24
 80244a0:	af02      	add	r7, sp, #8
 80244a2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80244a4:	f000 f97a 	bl	802479c <MX_LWIP_Init>

  /* USER CODE BEGIN StartDefaultTask */
	printf("lwIP init completed.\n");
 80244a8:	481f      	ldr	r0, [pc, #124]	; (8024528 <StartDefaultTask+0x8c>)
 80244aa:	f001 f92b 	bl	8025704 <puts>
	struct netconn *conn;
	err_t err;
	conn = netconn_new(NETCONN_TCP);
 80244ae:	2200      	movs	r2, #0
 80244b0:	2100      	movs	r1, #0
 80244b2:	2010      	movs	r0, #16
 80244b4:	f7f2 fd76 	bl	8016fa4 <netconn_new_with_proto_and_callback>
 80244b8:	60f8      	str	r0, [r7, #12]
	if (conn != NULL) {
 80244ba:	68fb      	ldr	r3, [r7, #12]
 80244bc:	2b00      	cmp	r3, #0
 80244be:	d027      	beq.n	8024510 <StartDefaultTask+0x74>
		err = netconn_bind(conn, IP_ADDR_ANY, 80);
 80244c0:	2250      	movs	r2, #80	; 0x50
 80244c2:	491a      	ldr	r1, [pc, #104]	; (802452c <StartDefaultTask+0x90>)
 80244c4:	68f8      	ldr	r0, [r7, #12]
 80244c6:	f7f2 fe0d 	bl	80170e4 <netconn_bind>
 80244ca:	4603      	mov	r3, r0
 80244cc:	72fb      	strb	r3, [r7, #11]
		if (err == ERR_OK) {
 80244ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80244d2:	2b00      	cmp	r3, #0
 80244d4:	d113      	bne.n	80244fe <StartDefaultTask+0x62>
			netconn_listen(conn);
 80244d6:	21ff      	movs	r1, #255	; 0xff
 80244d8:	68f8      	ldr	r0, [r7, #12]
 80244da:	f7f2 fe3b 	bl	8017154 <netconn_listen_with_backlog>
			sys_thread_new("web_server_thread", web_server_thread, (void*) conn,
 80244de:	2301      	movs	r3, #1
 80244e0:	9300      	str	r3, [sp, #0]
 80244e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80244e6:	68fa      	ldr	r2, [r7, #12]
 80244e8:	4911      	ldr	r1, [pc, #68]	; (8024530 <StartDefaultTask+0x94>)
 80244ea:	4812      	ldr	r0, [pc, #72]	; (8024534 <StartDefaultTask+0x98>)
 80244ec:	f7fe fede 	bl	80232ac <sys_thread_new>
			DEFAULT_THREAD_STACKSIZE / 4, osPriorityAboveNormal);
			printf("Binding ... OK\n");
 80244f0:	4811      	ldr	r0, [pc, #68]	; (8024538 <StartDefaultTask+0x9c>)
 80244f2:	f001 f907 	bl	8025704 <puts>
			osDelay(1);
 80244f6:	2001      	movs	r0, #1
 80244f8:	f7f0 f8fc 	bl	80146f4 <osDelay>
 80244fc:	e008      	b.n	8024510 <StartDefaultTask+0x74>
		} else {
			netconn_delete(conn);
 80244fe:	68f8      	ldr	r0, [r7, #12]
 8024500:	f7f2 fdca 	bl	8017098 <netconn_delete>
			printf("Binding ... Err\n");
 8024504:	480d      	ldr	r0, [pc, #52]	; (802453c <StartDefaultTask+0xa0>)
 8024506:	f001 f8fd 	bl	8025704 <puts>
			osDelay(1);
 802450a:	2001      	movs	r0, #1
 802450c:	f7f0 f8f2 	bl	80146f4 <osDelay>
		}
	}

	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8024510:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8024514:	f7f0 f8ee 	bl	80146f4 <osDelay>
		LogTextNum(SUB_SYS_MEMORY,LOG_LEV_INFO," Current year is ",2018);
 8024518:	f240 73e2 	movw	r3, #2018	; 0x7e2
 802451c:	4a08      	ldr	r2, [pc, #32]	; (8024540 <StartDefaultTask+0xa4>)
 802451e:	2103      	movs	r1, #3
 8024520:	2000      	movs	r0, #0
 8024522:	f000 f8a3 	bl	802466c <LogTextNum>
		osDelay(1000);
 8024526:	e7f3      	b.n	8024510 <StartDefaultTask+0x74>
 8024528:	080289fc 	.word	0x080289fc
 802452c:	0802ae60 	.word	0x0802ae60
 8024530:	08025bcd 	.word	0x08025bcd
 8024534:	08028a14 	.word	0x08028a14
 8024538:	08028a28 	.word	0x08028a28
 802453c:	08028a38 	.word	0x08028a38
 8024540:	08028a48 	.word	0x08028a48

08024544 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8024544:	b580      	push	{r7, lr}
 8024546:	b08c      	sub	sp, #48	; 0x30
 8024548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802454a:	f107 031c 	add.w	r3, r7, #28
 802454e:	2200      	movs	r2, #0
 8024550:	601a      	str	r2, [r3, #0]
 8024552:	605a      	str	r2, [r3, #4]
 8024554:	609a      	str	r2, [r3, #8]
 8024556:	60da      	str	r2, [r3, #12]
 8024558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802455a:	2300      	movs	r3, #0
 802455c:	61bb      	str	r3, [r7, #24]
 802455e:	4a35      	ldr	r2, [pc, #212]	; (8024634 <MX_GPIO_Init+0xf0>)
 8024560:	4b34      	ldr	r3, [pc, #208]	; (8024634 <MX_GPIO_Init+0xf0>)
 8024562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024568:	6313      	str	r3, [r2, #48]	; 0x30
 802456a:	4b32      	ldr	r3, [pc, #200]	; (8024634 <MX_GPIO_Init+0xf0>)
 802456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024572:	61bb      	str	r3, [r7, #24]
 8024574:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8024576:	2300      	movs	r3, #0
 8024578:	617b      	str	r3, [r7, #20]
 802457a:	4a2e      	ldr	r2, [pc, #184]	; (8024634 <MX_GPIO_Init+0xf0>)
 802457c:	4b2d      	ldr	r3, [pc, #180]	; (8024634 <MX_GPIO_Init+0xf0>)
 802457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024580:	f043 0304 	orr.w	r3, r3, #4
 8024584:	6313      	str	r3, [r2, #48]	; 0x30
 8024586:	4b2b      	ldr	r3, [pc, #172]	; (8024634 <MX_GPIO_Init+0xf0>)
 8024588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802458a:	f003 0304 	and.w	r3, r3, #4
 802458e:	617b      	str	r3, [r7, #20]
 8024590:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8024592:	2300      	movs	r3, #0
 8024594:	613b      	str	r3, [r7, #16]
 8024596:	4a27      	ldr	r2, [pc, #156]	; (8024634 <MX_GPIO_Init+0xf0>)
 8024598:	4b26      	ldr	r3, [pc, #152]	; (8024634 <MX_GPIO_Init+0xf0>)
 802459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802459c:	f043 0301 	orr.w	r3, r3, #1
 80245a0:	6313      	str	r3, [r2, #48]	; 0x30
 80245a2:	4b24      	ldr	r3, [pc, #144]	; (8024634 <MX_GPIO_Init+0xf0>)
 80245a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245a6:	f003 0301 	and.w	r3, r3, #1
 80245aa:	613b      	str	r3, [r7, #16]
 80245ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80245ae:	2300      	movs	r3, #0
 80245b0:	60fb      	str	r3, [r7, #12]
 80245b2:	4a20      	ldr	r2, [pc, #128]	; (8024634 <MX_GPIO_Init+0xf0>)
 80245b4:	4b1f      	ldr	r3, [pc, #124]	; (8024634 <MX_GPIO_Init+0xf0>)
 80245b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245b8:	f043 0310 	orr.w	r3, r3, #16
 80245bc:	6313      	str	r3, [r2, #48]	; 0x30
 80245be:	4b1d      	ldr	r3, [pc, #116]	; (8024634 <MX_GPIO_Init+0xf0>)
 80245c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245c2:	f003 0310 	and.w	r3, r3, #16
 80245c6:	60fb      	str	r3, [r7, #12]
 80245c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80245ca:	2300      	movs	r3, #0
 80245cc:	60bb      	str	r3, [r7, #8]
 80245ce:	4a19      	ldr	r2, [pc, #100]	; (8024634 <MX_GPIO_Init+0xf0>)
 80245d0:	4b18      	ldr	r3, [pc, #96]	; (8024634 <MX_GPIO_Init+0xf0>)
 80245d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245d4:	f043 0302 	orr.w	r3, r3, #2
 80245d8:	6313      	str	r3, [r2, #48]	; 0x30
 80245da:	4b16      	ldr	r3, [pc, #88]	; (8024634 <MX_GPIO_Init+0xf0>)
 80245dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245de:	f003 0302 	and.w	r3, r3, #2
 80245e2:	60bb      	str	r3, [r7, #8]
 80245e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80245e6:	2300      	movs	r3, #0
 80245e8:	607b      	str	r3, [r7, #4]
 80245ea:	4a12      	ldr	r2, [pc, #72]	; (8024634 <MX_GPIO_Init+0xf0>)
 80245ec:	4b11      	ldr	r3, [pc, #68]	; (8024634 <MX_GPIO_Init+0xf0>)
 80245ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245f0:	f043 0308 	orr.w	r3, r3, #8
 80245f4:	6313      	str	r3, [r2, #48]	; 0x30
 80245f6:	4b0f      	ldr	r3, [pc, #60]	; (8024634 <MX_GPIO_Init+0xf0>)
 80245f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245fa:	f003 0308 	and.w	r3, r3, #8
 80245fe:	607b      	str	r3, [r7, #4]
 8024600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 8024602:	2200      	movs	r2, #0
 8024604:	f240 6101 	movw	r1, #1537	; 0x601
 8024608:	480b      	ldr	r0, [pc, #44]	; (8024638 <MX_GPIO_Init+0xf4>)
 802460a:	f7ee f967 	bl	80128dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin;
 802460e:	f240 6301 	movw	r3, #1537	; 0x601
 8024612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024614:	2301      	movs	r3, #1
 8024616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024618:	2300      	movs	r3, #0
 802461a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802461c:	2300      	movs	r3, #0
 802461e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8024620:	f107 031c 	add.w	r3, r7, #28
 8024624:	4619      	mov	r1, r3
 8024626:	4804      	ldr	r0, [pc, #16]	; (8024638 <MX_GPIO_Init+0xf4>)
 8024628:	f7ed fec2 	bl	80123b0 <HAL_GPIO_Init>

}
 802462c:	bf00      	nop
 802462e:	3730      	adds	r7, #48	; 0x30
 8024630:	46bd      	mov	sp, r7
 8024632:	bd80      	pop	{r7, pc}
 8024634:	40023800 	.word	0x40023800
 8024638:	40021000 	.word	0x40021000

0802463c <LogInit>:

static char* txt_lev[NUM_LOG_LEV - 1] = { "OFF", "ERR", "WAR", "INF", };

static char* txt_sys[NUM_OF_SUB_SYS] = { "MEM", "WEB", "458", "TCP", };

void LogInit(UART_HandleTypeDef * log_if) {
 802463c:	b490      	push	{r4, r7}
 802463e:	b082      	sub	sp, #8
 8024640:	af00      	add	r7, sp, #0
 8024642:	6078      	str	r0, [r7, #4]
	hlog.interface = log_if;
 8024644:	4a08      	ldr	r2, [pc, #32]	; (8024668 <LogInit+0x2c>)
 8024646:	687b      	ldr	r3, [r7, #4]
 8024648:	6013      	str	r3, [r2, #0]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 802464a:	2400      	movs	r4, #0
 802464c:	e004      	b.n	8024658 <LogInit+0x1c>
		hlog.levels[i] = LOG_LEV_ALL;
 802464e:	4b06      	ldr	r3, [pc, #24]	; (8024668 <LogInit+0x2c>)
 8024650:	4423      	add	r3, r4
 8024652:	2204      	movs	r2, #4
 8024654:	711a      	strb	r2, [r3, #4]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 8024656:	3401      	adds	r4, #1
 8024658:	2c03      	cmp	r4, #3
 802465a:	ddf8      	ble.n	802464e <LogInit+0x12>
	}
}
 802465c:	bf00      	nop
 802465e:	3708      	adds	r7, #8
 8024660:	46bd      	mov	sp, r7
 8024662:	bc90      	pop	{r4, r7}
 8024664:	4770      	bx	lr
 8024666:	bf00      	nop
 8024668:	2000bd4c 	.word	0x2000bd4c

0802466c <LogTextNum>:
			vPortFree(ptr);
		}
	}
}

void LogTextNum(log_sub_sys sys, log_level level, char *msg, int number) {
 802466c:	b580      	push	{r7, lr}
 802466e:	b088      	sub	sp, #32
 8024670:	af00      	add	r7, sp, #0
 8024672:	60ba      	str	r2, [r7, #8]
 8024674:	607b      	str	r3, [r7, #4]
 8024676:	4603      	mov	r3, r0
 8024678:	73fb      	strb	r3, [r7, #15]
 802467a:	460b      	mov	r3, r1
 802467c:	73bb      	strb	r3, [r7, #14]
	if (level <= hlog.levels[sys]
 802467e:	7bfb      	ldrb	r3, [r7, #15]
 8024680:	4a40      	ldr	r2, [pc, #256]	; (8024784 <LogTextNum+0x118>)
 8024682:	4413      	add	r3, r2
 8024684:	791b      	ldrb	r3, [r3, #4]
 8024686:	7bba      	ldrb	r2, [r7, #14]
 8024688:	429a      	cmp	r2, r3
 802468a:	d876      	bhi.n	802477a <LogTextNum+0x10e>
			&& hlog.interface->gState == HAL_UART_STATE_READY) {
 802468c:	4b3d      	ldr	r3, [pc, #244]	; (8024784 <LogTextNum+0x118>)
 802468e:	681b      	ldr	r3, [r3, #0]
 8024690:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8024694:	b2db      	uxtb	r3, r3
 8024696:	2b20      	cmp	r3, #32
 8024698:	d16f      	bne.n	802477a <LogTextNum+0x10e>
		uint len = 0;
 802469a:	2300      	movs	r3, #0
 802469c:	61fb      	str	r3, [r7, #28]
		uint msg_len = 0;
 802469e:	2300      	movs	r3, #0
 80246a0:	61bb      	str	r3, [r7, #24]
		char * ptr = msg;
 80246a2:	68bb      	ldr	r3, [r7, #8]
 80246a4:	617b      	str	r3, [r7, #20]
		while (*ptr++) {
 80246a6:	e002      	b.n	80246ae <LogTextNum+0x42>
			msg_len++;
 80246a8:	69bb      	ldr	r3, [r7, #24]
 80246aa:	3301      	adds	r3, #1
 80246ac:	61bb      	str	r3, [r7, #24]
		while (*ptr++) {
 80246ae:	697b      	ldr	r3, [r7, #20]
 80246b0:	1c5a      	adds	r2, r3, #1
 80246b2:	617a      	str	r2, [r7, #20]
 80246b4:	781b      	ldrb	r3, [r3, #0]
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	d1f6      	bne.n	80246a8 <LogTextNum+0x3c>
		}
		ptr -= msg_len + 1;
 80246ba:	69bb      	ldr	r3, [r7, #24]
 80246bc:	43db      	mvns	r3, r3
 80246be:	697a      	ldr	r2, [r7, #20]
 80246c0:	4413      	add	r3, r2
 80246c2:	617b      	str	r3, [r7, #20]
		ptr = (char*) pvPortMalloc(msg_len + 30);
 80246c4:	69bb      	ldr	r3, [r7, #24]
 80246c6:	331e      	adds	r3, #30
 80246c8:	4618      	mov	r0, r3
 80246ca:	f7f0 fd29 	bl	8015120 <pvPortMalloc>
 80246ce:	6178      	str	r0, [r7, #20]
		if (ptr != NULL) {
 80246d0:	697b      	ldr	r3, [r7, #20]
 80246d2:	2b00      	cmp	r3, #0
 80246d4:	d051      	beq.n	802477a <LogTextNum+0x10e>
			strcpy(ptr, txt_sys[sys]);
 80246d6:	7bfb      	ldrb	r3, [r7, #15]
 80246d8:	4a2b      	ldr	r2, [pc, #172]	; (8024788 <LogTextNum+0x11c>)
 80246da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80246de:	4619      	mov	r1, r3
 80246e0:	6978      	ldr	r0, [r7, #20]
 80246e2:	f001 fc8b 	bl	8025ffc <strcpy>
			strcpy(ptr + 3, "_");
 80246e6:	697b      	ldr	r3, [r7, #20]
 80246e8:	3303      	adds	r3, #3
 80246ea:	4928      	ldr	r1, [pc, #160]	; (802478c <LogTextNum+0x120>)
 80246ec:	461a      	mov	r2, r3
 80246ee:	460b      	mov	r3, r1
 80246f0:	881b      	ldrh	r3, [r3, #0]
 80246f2:	8013      	strh	r3, [r2, #0]
			strcpy(ptr + 4, txt_lev[level]);
 80246f4:	697b      	ldr	r3, [r7, #20]
 80246f6:	1d18      	adds	r0, r3, #4
 80246f8:	7bbb      	ldrb	r3, [r7, #14]
 80246fa:	4a25      	ldr	r2, [pc, #148]	; (8024790 <LogTextNum+0x124>)
 80246fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024700:	4619      	mov	r1, r3
 8024702:	f001 fc7b 	bl	8025ffc <strcpy>
			strcpy(ptr + 7, ":");
 8024706:	697b      	ldr	r3, [r7, #20]
 8024708:	3307      	adds	r3, #7
 802470a:	4922      	ldr	r1, [pc, #136]	; (8024794 <LogTextNum+0x128>)
 802470c:	461a      	mov	r2, r3
 802470e:	460b      	mov	r3, r1
 8024710:	881b      	ldrh	r3, [r3, #0]
 8024712:	8013      	strh	r3, [r2, #0]
			strcpy(ptr + 8, msg);
 8024714:	697b      	ldr	r3, [r7, #20]
 8024716:	3308      	adds	r3, #8
 8024718:	68b9      	ldr	r1, [r7, #8]
 802471a:	4618      	mov	r0, r3
 802471c:	f001 fc6e 	bl	8025ffc <strcpy>
			itoa(number, ptr + 8 + msg_len, 10);
 8024720:	69bb      	ldr	r3, [r7, #24]
 8024722:	3308      	adds	r3, #8
 8024724:	697a      	ldr	r2, [r7, #20]
 8024726:	4413      	add	r3, r2
 8024728:	220a      	movs	r2, #10
 802472a:	4619      	mov	r1, r3
 802472c:	6878      	ldr	r0, [r7, #4]
 802472e:	f001 fc41 	bl	8025fb4 <itoa>
			while (*ptr++) {
 8024732:	e002      	b.n	802473a <LogTextNum+0xce>
				len++;
 8024734:	69fb      	ldr	r3, [r7, #28]
 8024736:	3301      	adds	r3, #1
 8024738:	61fb      	str	r3, [r7, #28]
			while (*ptr++) {
 802473a:	697b      	ldr	r3, [r7, #20]
 802473c:	1c5a      	adds	r2, r3, #1
 802473e:	617a      	str	r2, [r7, #20]
 8024740:	781b      	ldrb	r3, [r3, #0]
 8024742:	2b00      	cmp	r3, #0
 8024744:	d1f6      	bne.n	8024734 <LogTextNum+0xc8>
			}
			ptr -= len + 1;
 8024746:	69fb      	ldr	r3, [r7, #28]
 8024748:	43db      	mvns	r3, r3
 802474a:	697a      	ldr	r2, [r7, #20]
 802474c:	4413      	add	r3, r2
 802474e:	617b      	str	r3, [r7, #20]
			strcpy(ptr + len, "\r\n");
 8024750:	697a      	ldr	r2, [r7, #20]
 8024752:	69fb      	ldr	r3, [r7, #28]
 8024754:	4413      	add	r3, r2
 8024756:	4a10      	ldr	r2, [pc, #64]	; (8024798 <LogTextNum+0x12c>)
 8024758:	8811      	ldrh	r1, [r2, #0]
 802475a:	7892      	ldrb	r2, [r2, #2]
 802475c:	8019      	strh	r1, [r3, #0]
 802475e:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit_DMA(hlog.interface, (uint8_t*) ptr, len + 2);
 8024760:	4b08      	ldr	r3, [pc, #32]	; (8024784 <LogTextNum+0x118>)
 8024762:	6818      	ldr	r0, [r3, #0]
 8024764:	69fb      	ldr	r3, [r7, #28]
 8024766:	b29b      	uxth	r3, r3
 8024768:	3302      	adds	r3, #2
 802476a:	b29b      	uxth	r3, r3
 802476c:	461a      	mov	r2, r3
 802476e:	6979      	ldr	r1, [r7, #20]
 8024770:	f7ef fa06 	bl	8013b80 <HAL_UART_Transmit_DMA>
			vPortFree(ptr);
 8024774:	6978      	ldr	r0, [r7, #20]
 8024776:	f7f0 fd95 	bl	80152a4 <vPortFree>
		}
	}
}
 802477a:	bf00      	nop
 802477c:	3720      	adds	r7, #32
 802477e:	46bd      	mov	sp, r7
 8024780:	bd80      	pop	{r7, pc}
 8024782:	bf00      	nop
 8024784:	2000bd4c 	.word	0x2000bd4c
 8024788:	20000038 	.word	0x20000038
 802478c:	08028a7c 	.word	0x08028a7c
 8024790:	20000028 	.word	0x20000028
 8024794:	08028a80 	.word	0x08028a80
 8024798:	08028a84 	.word	0x08028a84

0802479c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 802479c:	b580      	push	{r7, lr}
 802479e:	b084      	sub	sp, #16
 80247a0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80247a2:	4b8b      	ldr	r3, [pc, #556]	; (80249d0 <MX_LWIP_Init+0x234>)
 80247a4:	22c0      	movs	r2, #192	; 0xc0
 80247a6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80247a8:	4b89      	ldr	r3, [pc, #548]	; (80249d0 <MX_LWIP_Init+0x234>)
 80247aa:	22a8      	movs	r2, #168	; 0xa8
 80247ac:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 4;
 80247ae:	4b88      	ldr	r3, [pc, #544]	; (80249d0 <MX_LWIP_Init+0x234>)
 80247b0:	2204      	movs	r2, #4
 80247b2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 253;
 80247b4:	4b86      	ldr	r3, [pc, #536]	; (80249d0 <MX_LWIP_Init+0x234>)
 80247b6:	22fd      	movs	r2, #253	; 0xfd
 80247b8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80247ba:	4b86      	ldr	r3, [pc, #536]	; (80249d4 <MX_LWIP_Init+0x238>)
 80247bc:	22ff      	movs	r2, #255	; 0xff
 80247be:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80247c0:	4b84      	ldr	r3, [pc, #528]	; (80249d4 <MX_LWIP_Init+0x238>)
 80247c2:	22ff      	movs	r2, #255	; 0xff
 80247c4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80247c6:	4b83      	ldr	r3, [pc, #524]	; (80249d4 <MX_LWIP_Init+0x238>)
 80247c8:	22ff      	movs	r2, #255	; 0xff
 80247ca:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80247cc:	4b81      	ldr	r3, [pc, #516]	; (80249d4 <MX_LWIP_Init+0x238>)
 80247ce:	2200      	movs	r2, #0
 80247d0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80247d2:	4b81      	ldr	r3, [pc, #516]	; (80249d8 <MX_LWIP_Init+0x23c>)
 80247d4:	2200      	movs	r2, #0
 80247d6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80247d8:	4b7f      	ldr	r3, [pc, #508]	; (80249d8 <MX_LWIP_Init+0x23c>)
 80247da:	2200      	movs	r2, #0
 80247dc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80247de:	4b7e      	ldr	r3, [pc, #504]	; (80249d8 <MX_LWIP_Init+0x23c>)
 80247e0:	2200      	movs	r2, #0
 80247e2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80247e4:	4b7c      	ldr	r3, [pc, #496]	; (80249d8 <MX_LWIP_Init+0x23c>)
 80247e6:	2200      	movs	r2, #0
 80247e8:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80247ea:	2100      	movs	r1, #0
 80247ec:	2000      	movs	r0, #0
 80247ee:	f7f4 fd21 	bl	8019234 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80247f2:	4b77      	ldr	r3, [pc, #476]	; (80249d0 <MX_LWIP_Init+0x234>)
 80247f4:	781b      	ldrb	r3, [r3, #0]
 80247f6:	061a      	lsls	r2, r3, #24
 80247f8:	4b75      	ldr	r3, [pc, #468]	; (80249d0 <MX_LWIP_Init+0x234>)
 80247fa:	785b      	ldrb	r3, [r3, #1]
 80247fc:	041b      	lsls	r3, r3, #16
 80247fe:	431a      	orrs	r2, r3
 8024800:	4b73      	ldr	r3, [pc, #460]	; (80249d0 <MX_LWIP_Init+0x234>)
 8024802:	789b      	ldrb	r3, [r3, #2]
 8024804:	021b      	lsls	r3, r3, #8
 8024806:	4313      	orrs	r3, r2
 8024808:	4a71      	ldr	r2, [pc, #452]	; (80249d0 <MX_LWIP_Init+0x234>)
 802480a:	78d2      	ldrb	r2, [r2, #3]
 802480c:	4313      	orrs	r3, r2
 802480e:	061a      	lsls	r2, r3, #24
 8024810:	4b6f      	ldr	r3, [pc, #444]	; (80249d0 <MX_LWIP_Init+0x234>)
 8024812:	781b      	ldrb	r3, [r3, #0]
 8024814:	0619      	lsls	r1, r3, #24
 8024816:	4b6e      	ldr	r3, [pc, #440]	; (80249d0 <MX_LWIP_Init+0x234>)
 8024818:	785b      	ldrb	r3, [r3, #1]
 802481a:	041b      	lsls	r3, r3, #16
 802481c:	4319      	orrs	r1, r3
 802481e:	4b6c      	ldr	r3, [pc, #432]	; (80249d0 <MX_LWIP_Init+0x234>)
 8024820:	789b      	ldrb	r3, [r3, #2]
 8024822:	021b      	lsls	r3, r3, #8
 8024824:	430b      	orrs	r3, r1
 8024826:	496a      	ldr	r1, [pc, #424]	; (80249d0 <MX_LWIP_Init+0x234>)
 8024828:	78c9      	ldrb	r1, [r1, #3]
 802482a:	430b      	orrs	r3, r1
 802482c:	021b      	lsls	r3, r3, #8
 802482e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8024832:	431a      	orrs	r2, r3
 8024834:	4b66      	ldr	r3, [pc, #408]	; (80249d0 <MX_LWIP_Init+0x234>)
 8024836:	781b      	ldrb	r3, [r3, #0]
 8024838:	0619      	lsls	r1, r3, #24
 802483a:	4b65      	ldr	r3, [pc, #404]	; (80249d0 <MX_LWIP_Init+0x234>)
 802483c:	785b      	ldrb	r3, [r3, #1]
 802483e:	041b      	lsls	r3, r3, #16
 8024840:	4319      	orrs	r1, r3
 8024842:	4b63      	ldr	r3, [pc, #396]	; (80249d0 <MX_LWIP_Init+0x234>)
 8024844:	789b      	ldrb	r3, [r3, #2]
 8024846:	021b      	lsls	r3, r3, #8
 8024848:	430b      	orrs	r3, r1
 802484a:	4961      	ldr	r1, [pc, #388]	; (80249d0 <MX_LWIP_Init+0x234>)
 802484c:	78c9      	ldrb	r1, [r1, #3]
 802484e:	430b      	orrs	r3, r1
 8024850:	0a1b      	lsrs	r3, r3, #8
 8024852:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024856:	431a      	orrs	r2, r3
 8024858:	4b5d      	ldr	r3, [pc, #372]	; (80249d0 <MX_LWIP_Init+0x234>)
 802485a:	781b      	ldrb	r3, [r3, #0]
 802485c:	0619      	lsls	r1, r3, #24
 802485e:	4b5c      	ldr	r3, [pc, #368]	; (80249d0 <MX_LWIP_Init+0x234>)
 8024860:	785b      	ldrb	r3, [r3, #1]
 8024862:	041b      	lsls	r3, r3, #16
 8024864:	4319      	orrs	r1, r3
 8024866:	4b5a      	ldr	r3, [pc, #360]	; (80249d0 <MX_LWIP_Init+0x234>)
 8024868:	789b      	ldrb	r3, [r3, #2]
 802486a:	021b      	lsls	r3, r3, #8
 802486c:	430b      	orrs	r3, r1
 802486e:	4958      	ldr	r1, [pc, #352]	; (80249d0 <MX_LWIP_Init+0x234>)
 8024870:	78c9      	ldrb	r1, [r1, #3]
 8024872:	430b      	orrs	r3, r1
 8024874:	0e1b      	lsrs	r3, r3, #24
 8024876:	4313      	orrs	r3, r2
 8024878:	4a58      	ldr	r2, [pc, #352]	; (80249dc <MX_LWIP_Init+0x240>)
 802487a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 802487c:	4b55      	ldr	r3, [pc, #340]	; (80249d4 <MX_LWIP_Init+0x238>)
 802487e:	781b      	ldrb	r3, [r3, #0]
 8024880:	061a      	lsls	r2, r3, #24
 8024882:	4b54      	ldr	r3, [pc, #336]	; (80249d4 <MX_LWIP_Init+0x238>)
 8024884:	785b      	ldrb	r3, [r3, #1]
 8024886:	041b      	lsls	r3, r3, #16
 8024888:	431a      	orrs	r2, r3
 802488a:	4b52      	ldr	r3, [pc, #328]	; (80249d4 <MX_LWIP_Init+0x238>)
 802488c:	789b      	ldrb	r3, [r3, #2]
 802488e:	021b      	lsls	r3, r3, #8
 8024890:	4313      	orrs	r3, r2
 8024892:	4a50      	ldr	r2, [pc, #320]	; (80249d4 <MX_LWIP_Init+0x238>)
 8024894:	78d2      	ldrb	r2, [r2, #3]
 8024896:	4313      	orrs	r3, r2
 8024898:	061a      	lsls	r2, r3, #24
 802489a:	4b4e      	ldr	r3, [pc, #312]	; (80249d4 <MX_LWIP_Init+0x238>)
 802489c:	781b      	ldrb	r3, [r3, #0]
 802489e:	0619      	lsls	r1, r3, #24
 80248a0:	4b4c      	ldr	r3, [pc, #304]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248a2:	785b      	ldrb	r3, [r3, #1]
 80248a4:	041b      	lsls	r3, r3, #16
 80248a6:	4319      	orrs	r1, r3
 80248a8:	4b4a      	ldr	r3, [pc, #296]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248aa:	789b      	ldrb	r3, [r3, #2]
 80248ac:	021b      	lsls	r3, r3, #8
 80248ae:	430b      	orrs	r3, r1
 80248b0:	4948      	ldr	r1, [pc, #288]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248b2:	78c9      	ldrb	r1, [r1, #3]
 80248b4:	430b      	orrs	r3, r1
 80248b6:	021b      	lsls	r3, r3, #8
 80248b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80248bc:	431a      	orrs	r2, r3
 80248be:	4b45      	ldr	r3, [pc, #276]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248c0:	781b      	ldrb	r3, [r3, #0]
 80248c2:	0619      	lsls	r1, r3, #24
 80248c4:	4b43      	ldr	r3, [pc, #268]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248c6:	785b      	ldrb	r3, [r3, #1]
 80248c8:	041b      	lsls	r3, r3, #16
 80248ca:	4319      	orrs	r1, r3
 80248cc:	4b41      	ldr	r3, [pc, #260]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248ce:	789b      	ldrb	r3, [r3, #2]
 80248d0:	021b      	lsls	r3, r3, #8
 80248d2:	430b      	orrs	r3, r1
 80248d4:	493f      	ldr	r1, [pc, #252]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248d6:	78c9      	ldrb	r1, [r1, #3]
 80248d8:	430b      	orrs	r3, r1
 80248da:	0a1b      	lsrs	r3, r3, #8
 80248dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248e0:	431a      	orrs	r2, r3
 80248e2:	4b3c      	ldr	r3, [pc, #240]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248e4:	781b      	ldrb	r3, [r3, #0]
 80248e6:	0619      	lsls	r1, r3, #24
 80248e8:	4b3a      	ldr	r3, [pc, #232]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248ea:	785b      	ldrb	r3, [r3, #1]
 80248ec:	041b      	lsls	r3, r3, #16
 80248ee:	4319      	orrs	r1, r3
 80248f0:	4b38      	ldr	r3, [pc, #224]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248f2:	789b      	ldrb	r3, [r3, #2]
 80248f4:	021b      	lsls	r3, r3, #8
 80248f6:	430b      	orrs	r3, r1
 80248f8:	4936      	ldr	r1, [pc, #216]	; (80249d4 <MX_LWIP_Init+0x238>)
 80248fa:	78c9      	ldrb	r1, [r1, #3]
 80248fc:	430b      	orrs	r3, r1
 80248fe:	0e1b      	lsrs	r3, r3, #24
 8024900:	4313      	orrs	r3, r2
 8024902:	4a37      	ldr	r2, [pc, #220]	; (80249e0 <MX_LWIP_Init+0x244>)
 8024904:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8024906:	4b34      	ldr	r3, [pc, #208]	; (80249d8 <MX_LWIP_Init+0x23c>)
 8024908:	781b      	ldrb	r3, [r3, #0]
 802490a:	061a      	lsls	r2, r3, #24
 802490c:	4b32      	ldr	r3, [pc, #200]	; (80249d8 <MX_LWIP_Init+0x23c>)
 802490e:	785b      	ldrb	r3, [r3, #1]
 8024910:	041b      	lsls	r3, r3, #16
 8024912:	431a      	orrs	r2, r3
 8024914:	4b30      	ldr	r3, [pc, #192]	; (80249d8 <MX_LWIP_Init+0x23c>)
 8024916:	789b      	ldrb	r3, [r3, #2]
 8024918:	021b      	lsls	r3, r3, #8
 802491a:	4313      	orrs	r3, r2
 802491c:	4a2e      	ldr	r2, [pc, #184]	; (80249d8 <MX_LWIP_Init+0x23c>)
 802491e:	78d2      	ldrb	r2, [r2, #3]
 8024920:	4313      	orrs	r3, r2
 8024922:	061a      	lsls	r2, r3, #24
 8024924:	4b2c      	ldr	r3, [pc, #176]	; (80249d8 <MX_LWIP_Init+0x23c>)
 8024926:	781b      	ldrb	r3, [r3, #0]
 8024928:	0619      	lsls	r1, r3, #24
 802492a:	4b2b      	ldr	r3, [pc, #172]	; (80249d8 <MX_LWIP_Init+0x23c>)
 802492c:	785b      	ldrb	r3, [r3, #1]
 802492e:	041b      	lsls	r3, r3, #16
 8024930:	4319      	orrs	r1, r3
 8024932:	4b29      	ldr	r3, [pc, #164]	; (80249d8 <MX_LWIP_Init+0x23c>)
 8024934:	789b      	ldrb	r3, [r3, #2]
 8024936:	021b      	lsls	r3, r3, #8
 8024938:	430b      	orrs	r3, r1
 802493a:	4927      	ldr	r1, [pc, #156]	; (80249d8 <MX_LWIP_Init+0x23c>)
 802493c:	78c9      	ldrb	r1, [r1, #3]
 802493e:	430b      	orrs	r3, r1
 8024940:	021b      	lsls	r3, r3, #8
 8024942:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8024946:	431a      	orrs	r2, r3
 8024948:	4b23      	ldr	r3, [pc, #140]	; (80249d8 <MX_LWIP_Init+0x23c>)
 802494a:	781b      	ldrb	r3, [r3, #0]
 802494c:	0619      	lsls	r1, r3, #24
 802494e:	4b22      	ldr	r3, [pc, #136]	; (80249d8 <MX_LWIP_Init+0x23c>)
 8024950:	785b      	ldrb	r3, [r3, #1]
 8024952:	041b      	lsls	r3, r3, #16
 8024954:	4319      	orrs	r1, r3
 8024956:	4b20      	ldr	r3, [pc, #128]	; (80249d8 <MX_LWIP_Init+0x23c>)
 8024958:	789b      	ldrb	r3, [r3, #2]
 802495a:	021b      	lsls	r3, r3, #8
 802495c:	430b      	orrs	r3, r1
 802495e:	491e      	ldr	r1, [pc, #120]	; (80249d8 <MX_LWIP_Init+0x23c>)
 8024960:	78c9      	ldrb	r1, [r1, #3]
 8024962:	430b      	orrs	r3, r1
 8024964:	0a1b      	lsrs	r3, r3, #8
 8024966:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802496a:	431a      	orrs	r2, r3
 802496c:	4b1a      	ldr	r3, [pc, #104]	; (80249d8 <MX_LWIP_Init+0x23c>)
 802496e:	781b      	ldrb	r3, [r3, #0]
 8024970:	0619      	lsls	r1, r3, #24
 8024972:	4b19      	ldr	r3, [pc, #100]	; (80249d8 <MX_LWIP_Init+0x23c>)
 8024974:	785b      	ldrb	r3, [r3, #1]
 8024976:	041b      	lsls	r3, r3, #16
 8024978:	4319      	orrs	r1, r3
 802497a:	4b17      	ldr	r3, [pc, #92]	; (80249d8 <MX_LWIP_Init+0x23c>)
 802497c:	789b      	ldrb	r3, [r3, #2]
 802497e:	021b      	lsls	r3, r3, #8
 8024980:	430b      	orrs	r3, r1
 8024982:	4915      	ldr	r1, [pc, #84]	; (80249d8 <MX_LWIP_Init+0x23c>)
 8024984:	78c9      	ldrb	r1, [r1, #3]
 8024986:	430b      	orrs	r3, r1
 8024988:	0e1b      	lsrs	r3, r3, #24
 802498a:	4313      	orrs	r3, r2
 802498c:	4a15      	ldr	r2, [pc, #84]	; (80249e4 <MX_LWIP_Init+0x248>)
 802498e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8024990:	4b15      	ldr	r3, [pc, #84]	; (80249e8 <MX_LWIP_Init+0x24c>)
 8024992:	9302      	str	r3, [sp, #8]
 8024994:	4b15      	ldr	r3, [pc, #84]	; (80249ec <MX_LWIP_Init+0x250>)
 8024996:	9301      	str	r3, [sp, #4]
 8024998:	2300      	movs	r3, #0
 802499a:	9300      	str	r3, [sp, #0]
 802499c:	4b11      	ldr	r3, [pc, #68]	; (80249e4 <MX_LWIP_Init+0x248>)
 802499e:	4a10      	ldr	r2, [pc, #64]	; (80249e0 <MX_LWIP_Init+0x244>)
 80249a0:	490e      	ldr	r1, [pc, #56]	; (80249dc <MX_LWIP_Init+0x240>)
 80249a2:	4813      	ldr	r0, [pc, #76]	; (80249f0 <MX_LWIP_Init+0x254>)
 80249a4:	f7f7 fc40 	bl	801c228 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80249a8:	4811      	ldr	r0, [pc, #68]	; (80249f0 <MX_LWIP_Init+0x254>)
 80249aa:	f7f7 fd1d 	bl	801c3e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80249ae:	4b10      	ldr	r3, [pc, #64]	; (80249f0 <MX_LWIP_Init+0x254>)
 80249b0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80249b4:	f003 0304 	and.w	r3, r3, #4
 80249b8:	2b00      	cmp	r3, #0
 80249ba:	d003      	beq.n	80249c4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80249bc:	480c      	ldr	r0, [pc, #48]	; (80249f0 <MX_LWIP_Init+0x254>)
 80249be:	f7f7 fd23 	bl	801c408 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80249c2:	e002      	b.n	80249ca <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 80249c4:	480a      	ldr	r0, [pc, #40]	; (80249f0 <MX_LWIP_Init+0x254>)
 80249c6:	f7f7 fd63 	bl	801c490 <netif_set_down>
}
 80249ca:	bf00      	nop
 80249cc:	46bd      	mov	sp, r7
 80249ce:	bd80      	pop	{r7, pc}
 80249d0:	2000bd90 	.word	0x2000bd90
 80249d4:	2000bd8c 	.word	0x2000bd8c
 80249d8:	2000bd54 	.word	0x2000bd54
 80249dc:	2000bd88 	.word	0x2000bd88
 80249e0:	2000bd94 	.word	0x2000bd94
 80249e4:	2000bd98 	.word	0x2000bd98
 80249e8:	08019131 	.word	0x08019131
 80249ec:	080242f9 	.word	0x080242f9
 80249f0:	2000bd58 	.word	0x2000bd58

080249f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80249f4:	b580      	push	{r7, lr}
 80249f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80249f8:	f7eb fcbc 	bl	8010374 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80249fc:	f000 f81a 	bl	8024a34 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_FLASH_Unlock();
 8024a00:	f7ed fa68 	bl	8011ed4 <HAL_FLASH_Unlock>
	EE_Init();
 8024a04:	f7fe fda4 	bl	8023550 <EE_Init>
	FlashInit();
 8024a08:	f7fe fd22 	bl	8023450 <FlashInit>
	//ProtocolSettingsInit(&hprot);

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8024a0c:	f7ff fd9a 	bl	8024544 <MX_GPIO_Init>
	MX_DMA_Init();
 8024a10:	f7fe fd7e 	bl	8023510 <MX_DMA_Init>
	MX_UART5_Init();
 8024a14:	f000 fea2 	bl	802575c <MX_UART5_Init>
	MX_TIM8_Init();
 8024a18:	f000 fc0a 	bl	8025230 <MX_TIM8_Init>
	//MX_TIM7_Init();
	MX_USART1_UART_Init();
 8024a1c:	f000 feca 	bl	80257b4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	LogInit(&huart1);
 8024a20:	4803      	ldr	r0, [pc, #12]	; (8024a30 <main+0x3c>)
 8024a22:	f7ff fe0b 	bl	802463c <LogInit>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8024a26:	f7ff fcff 	bl	8024428 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8024a2a:	f7ef fe25 	bl	8014678 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8024a2e:	e7fe      	b.n	8024a2e <main+0x3a>
 8024a30:	2000bf10 	.word	0x2000bf10

08024a34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8024a34:	b580      	push	{r7, lr}
 8024a36:	b094      	sub	sp, #80	; 0x50
 8024a38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8024a3a:	f107 0320 	add.w	r3, r7, #32
 8024a3e:	2230      	movs	r2, #48	; 0x30
 8024a40:	2100      	movs	r1, #0
 8024a42:	4618      	mov	r0, r3
 8024a44:	f001 fad2 	bl	8025fec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8024a48:	f107 030c 	add.w	r3, r7, #12
 8024a4c:	2200      	movs	r2, #0
 8024a4e:	601a      	str	r2, [r3, #0]
 8024a50:	605a      	str	r2, [r3, #4]
 8024a52:	609a      	str	r2, [r3, #8]
 8024a54:	60da      	str	r2, [r3, #12]
 8024a56:	611a      	str	r2, [r3, #16]

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8024a58:	2300      	movs	r3, #0
 8024a5a:	60bb      	str	r3, [r7, #8]
 8024a5c:	4a28      	ldr	r2, [pc, #160]	; (8024b00 <SystemClock_Config+0xcc>)
 8024a5e:	4b28      	ldr	r3, [pc, #160]	; (8024b00 <SystemClock_Config+0xcc>)
 8024a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024a66:	6413      	str	r3, [r2, #64]	; 0x40
 8024a68:	4b25      	ldr	r3, [pc, #148]	; (8024b00 <SystemClock_Config+0xcc>)
 8024a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024a70:	60bb      	str	r3, [r7, #8]
 8024a72:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8024a74:	2300      	movs	r3, #0
 8024a76:	607b      	str	r3, [r7, #4]
 8024a78:	4a22      	ldr	r2, [pc, #136]	; (8024b04 <SystemClock_Config+0xd0>)
 8024a7a:	4b22      	ldr	r3, [pc, #136]	; (8024b04 <SystemClock_Config+0xd0>)
 8024a7c:	681b      	ldr	r3, [r3, #0]
 8024a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024a82:	6013      	str	r3, [r2, #0]
 8024a84:	4b1f      	ldr	r3, [pc, #124]	; (8024b04 <SystemClock_Config+0xd0>)
 8024a86:	681b      	ldr	r3, [r3, #0]
 8024a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024a8c:	607b      	str	r3, [r7, #4]
 8024a8e:	687b      	ldr	r3, [r7, #4]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8024a90:	2301      	movs	r3, #1
 8024a92:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8024a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8024a98:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8024a9a:	2302      	movs	r3, #2
 8024a9c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8024a9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8024aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8024aa4:	2319      	movs	r3, #25
 8024aa6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8024aa8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8024aac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8024aae:	2302      	movs	r3, #2
 8024ab0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8024ab2:	2305      	movs	r3, #5
 8024ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8024ab6:	f107 0320 	add.w	r3, r7, #32
 8024aba:	4618      	mov	r0, r3
 8024abc:	f7ed ff3a 	bl	8012934 <HAL_RCC_OscConfig>
 8024ac0:	4603      	mov	r3, r0
 8024ac2:	2b00      	cmp	r3, #0
 8024ac4:	d001      	beq.n	8024aca <SystemClock_Config+0x96>
		Error_Handler();
 8024ac6:	f000 f851 	bl	8024b6c <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8024aca:	230f      	movs	r3, #15
 8024acc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8024ace:	2302      	movs	r3, #2
 8024ad0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8024ad2:	2300      	movs	r3, #0
 8024ad4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8024ad6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8024ada:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8024adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024ae0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8024ae2:	f107 030c 	add.w	r3, r7, #12
 8024ae6:	2105      	movs	r1, #5
 8024ae8:	4618      	mov	r0, r3
 8024aea:	f7ee f965 	bl	8012db8 <HAL_RCC_ClockConfig>
 8024aee:	4603      	mov	r3, r0
 8024af0:	2b00      	cmp	r3, #0
 8024af2:	d001      	beq.n	8024af8 <SystemClock_Config+0xc4>
		Error_Handler();
 8024af4:	f000 f83a 	bl	8024b6c <Error_Handler>
	}
}
 8024af8:	bf00      	nop
 8024afa:	3750      	adds	r7, #80	; 0x50
 8024afc:	46bd      	mov	sp, r7
 8024afe:	bd80      	pop	{r7, pc}
 8024b00:	40023800 	.word	0x40023800
 8024b04:	40007000 	.word	0x40007000

08024b08 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8024b08:	b580      	push	{r7, lr}
 8024b0a:	b082      	sub	sp, #8
 8024b0c:	af00      	add	r7, sp, #0
 8024b0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8024b10:	687b      	ldr	r3, [r7, #4]
 8024b12:	681b      	ldr	r3, [r3, #0]
 8024b14:	4a10      	ldr	r2, [pc, #64]	; (8024b58 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8024b16:	4293      	cmp	r3, r2
 8024b18:	d101      	bne.n	8024b1e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8024b1a:	f7eb fc4d 	bl	80103b8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM8) {
 8024b1e:	687b      	ldr	r3, [r7, #4]
 8024b20:	681b      	ldr	r3, [r3, #0]
 8024b22:	4a0e      	ldr	r2, [pc, #56]	; (8024b5c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8024b24:	4293      	cmp	r3, r2
 8024b26:	d101      	bne.n	8024b2c <HAL_TIM_PeriodElapsedCallback+0x24>
		CommandProcess();
 8024b28:	f000 f828 	bl	8024b7c <CommandProcess>
	}
	if (htim->Instance == TIM7) {
 8024b2c:	687b      	ldr	r3, [r7, #4]
 8024b2e:	681b      	ldr	r3, [r3, #0]
 8024b30:	4a0b      	ldr	r2, [pc, #44]	; (8024b60 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8024b32:	4293      	cmp	r3, r2
 8024b34:	d10b      	bne.n	8024b4e <HAL_TIM_PeriodElapsedCallback+0x46>
		__HAL_TIM_SET_COUNTER(&htim7, 0x00U);
 8024b36:	4b0b      	ldr	r3, [pc, #44]	; (8024b64 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8024b38:	681b      	ldr	r3, [r3, #0]
 8024b3a:	2200      	movs	r2, #0
 8024b3c:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim7);
 8024b3e:	4809      	ldr	r0, [pc, #36]	; (8024b64 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8024b40:	f7ee fb63 	bl	801320a <HAL_TIM_Base_Start_IT>
		ulHighFrequencyTimerTicks++;
 8024b44:	4b08      	ldr	r3, [pc, #32]	; (8024b68 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8024b46:	681b      	ldr	r3, [r3, #0]
 8024b48:	3301      	adds	r3, #1
 8024b4a:	4a07      	ldr	r2, [pc, #28]	; (8024b68 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8024b4c:	6013      	str	r3, [r2, #0]
	}
	/* USER CODE END Callback 1 */
}
 8024b4e:	bf00      	nop
 8024b50:	3708      	adds	r7, #8
 8024b52:	46bd      	mov	sp, r7
 8024b54:	bd80      	pop	{r7, pc}
 8024b56:	bf00      	nop
 8024b58:	40010000 	.word	0x40010000
 8024b5c:	40010400 	.word	0x40010400
 8024b60:	40001400 	.word	0x40001400
 8024b64:	2000be34 	.word	0x2000be34
 8024b68:	20004134 	.word	0x20004134

08024b6c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8024b6c:	b480      	push	{r7}
 8024b6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8024b70:	bf00      	nop
 8024b72:	46bd      	mov	sp, r7
 8024b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b78:	4770      	bx	lr
	...

08024b7c <CommandProcess>:

extern xQueueHandle frames_queue;

profibus_MPI_t hprot;

inline void CommandProcess() {
 8024b7c:	b580      	push	{r7, lr}
 8024b7e:	b082      	sub	sp, #8
 8024b80:	af00      	add	r7, sp, #0
	static portBASE_TYPE xHigherPriorityTaskWoken;
	uint32_t len;
	xHigherPriorityTaskWoken = pdFALSE;
 8024b82:	4b13      	ldr	r3, [pc, #76]	; (8024bd0 <CommandProcess+0x54>)
 8024b84:	2200      	movs	r2, #0
 8024b86:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim8);
 8024b88:	4812      	ldr	r0, [pc, #72]	; (8024bd4 <CommandProcess+0x58>)
 8024b8a:	f7ee fb59 	bl	8013240 <HAL_TIM_Base_Stop_IT>
	len = CB_Data_Length(&inbuf_UART);
 8024b8e:	4812      	ldr	r0, [pc, #72]	; (8024bd8 <CommandProcess+0x5c>)
 8024b90:	f7fe fc02 	bl	8023398 <CB_Data_Length>
 8024b94:	4603      	mov	r3, r0
 8024b96:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR(frames_queue, &len, &xHigherPriorityTaskWoken);
 8024b98:	4b10      	ldr	r3, [pc, #64]	; (8024bdc <CommandProcess+0x60>)
 8024b9a:	6818      	ldr	r0, [r3, #0]
 8024b9c:	1d39      	adds	r1, r7, #4
 8024b9e:	2300      	movs	r3, #0
 8024ba0:	4a0b      	ldr	r2, [pc, #44]	; (8024bd0 <CommandProcess+0x54>)
 8024ba2:	f7f0 fe83 	bl	80158ac <xQueueGenericSendFromISR>
	if (xHigherPriorityTaskWoken == pdTRUE) {
 8024ba6:	4b0a      	ldr	r3, [pc, #40]	; (8024bd0 <CommandProcess+0x54>)
 8024ba8:	681b      	ldr	r3, [r3, #0]
 8024baa:	2b01      	cmp	r3, #1
 8024bac:	d10b      	bne.n	8024bc6 <CommandProcess+0x4a>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8024bae:	4b08      	ldr	r3, [pc, #32]	; (8024bd0 <CommandProcess+0x54>)
 8024bb0:	681b      	ldr	r3, [r3, #0]
 8024bb2:	2b00      	cmp	r3, #0
 8024bb4:	d007      	beq.n	8024bc6 <CommandProcess+0x4a>
 8024bb6:	4b0a      	ldr	r3, [pc, #40]	; (8024be0 <CommandProcess+0x64>)
 8024bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8024bbc:	601a      	str	r2, [r3, #0]
 8024bbe:	f3bf 8f4f 	dsb	sy
 8024bc2:	f3bf 8f6f 	isb	sy
	}
}
 8024bc6:	bf00      	nop
 8024bc8:	3708      	adds	r7, #8
 8024bca:	46bd      	mov	sp, r7
 8024bcc:	bd80      	pop	{r7, pc}
 8024bce:	bf00      	nop
 8024bd0:	20004138 	.word	0x20004138
 8024bd4:	2000bdf8 	.word	0x2000bdf8
 8024bd8:	2000bda0 	.word	0x2000bda0
 8024bdc:	2000bd40 	.word	0x2000bd40
 8024be0:	e000ed04 	.word	0xe000ed04

08024be4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8024be4:	b580      	push	{r7, lr}
 8024be6:	b082      	sub	sp, #8
 8024be8:	af00      	add	r7, sp, #0
 8024bea:	6078      	str	r0, [r7, #4]
	if (huart == &huart5)
 8024bec:	687b      	ldr	r3, [r7, #4]
 8024bee:	4a0c      	ldr	r2, [pc, #48]	; (8024c20 <HAL_UART_RxCpltCallback+0x3c>)
 8024bf0:	4293      	cmp	r3, r2
 8024bf2:	d111      	bne.n	8024c18 <HAL_UART_RxCpltCallback+0x34>
	{
		CB_Write(&inbuf_UART, received_byte);
 8024bf4:	4b0b      	ldr	r3, [pc, #44]	; (8024c24 <HAL_UART_RxCpltCallback+0x40>)
 8024bf6:	781b      	ldrb	r3, [r3, #0]
 8024bf8:	4619      	mov	r1, r3
 8024bfa:	480b      	ldr	r0, [pc, #44]	; (8024c28 <HAL_UART_RxCpltCallback+0x44>)
 8024bfc:	f7fe fbdf 	bl	80233be <CB_Write>
		HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 8024c00:	2201      	movs	r2, #1
 8024c02:	4908      	ldr	r1, [pc, #32]	; (8024c24 <HAL_UART_RxCpltCallback+0x40>)
 8024c04:	4806      	ldr	r0, [pc, #24]	; (8024c20 <HAL_UART_RxCpltCallback+0x3c>)
 8024c06:	f7ee ff6e 	bl	8013ae6 <HAL_UART_Receive_IT>
		__HAL_TIM_SET_COUNTER(&htim8, 0x00U);
 8024c0a:	4b08      	ldr	r3, [pc, #32]	; (8024c2c <HAL_UART_RxCpltCallback+0x48>)
 8024c0c:	681b      	ldr	r3, [r3, #0]
 8024c0e:	2200      	movs	r2, #0
 8024c10:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim8);
 8024c12:	4806      	ldr	r0, [pc, #24]	; (8024c2c <HAL_UART_RxCpltCallback+0x48>)
 8024c14:	f7ee faf9 	bl	801320a <HAL_TIM_Base_Start_IT>
	}

}
 8024c18:	bf00      	nop
 8024c1a:	3708      	adds	r7, #8
 8024c1c:	46bd      	mov	sp, r7
 8024c1e:	bd80      	pop	{r7, pc}
 8024c20:	2000bed0 	.word	0x2000bed0
 8024c24:	2000bd9c 	.word	0x2000bd9c
 8024c28:	2000bda0 	.word	0x2000bda0
 8024c2c:	2000bdf8 	.word	0x2000bdf8

08024c30 <StartProcessTask>:


void StartProcessTask(void const * argument) {
 8024c30:	b580      	push	{r7, lr}
 8024c32:	b084      	sub	sp, #16
 8024c34:	af00      	add	r7, sp, #0
 8024c36:	6078      	str	r0, [r7, #4]
	uint8_t len;
	static uint8_t cmd_data_buf[SIZE_OF_CMD_BUF];

	error_t err = NO_ERR;
 8024c38:	2300      	movs	r3, #0
 8024c3a:	72fb      	strb	r3, [r7, #11]
	err = CB_Init(&inbuf_UART, UART_BUFF_SIZE);
 8024c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024c40:	481b      	ldr	r0, [pc, #108]	; (8024cb0 <StartProcessTask+0x80>)
 8024c42:	f7fe fb82 	bl	802334a <CB_Init>
 8024c46:	4603      	mov	r3, r0
 8024c48:	72fb      	strb	r3, [r7, #11]
	if (err != NO_ERR) {
 8024c4a:	7afb      	ldrb	r3, [r7, #11]
 8024c4c:	2b00      	cmp	r3, #0
 8024c4e:	d002      	beq.n	8024c56 <StartProcessTask+0x26>
		printf("Buffer allocation error");
 8024c50:	4818      	ldr	r0, [pc, #96]	; (8024cb4 <StartProcessTask+0x84>)
 8024c52:	f000 fd0d 	bl	8025670 <iprintf>
	}
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 8024c56:	2201      	movs	r2, #1
 8024c58:	4917      	ldr	r1, [pc, #92]	; (8024cb8 <StartProcessTask+0x88>)
 8024c5a:	4818      	ldr	r0, [pc, #96]	; (8024cbc <StartProcessTask+0x8c>)
 8024c5c:	f7ee ff43 	bl	8013ae6 <HAL_UART_Receive_IT>
	for (;;) {
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
 8024c60:	4b17      	ldr	r3, [pc, #92]	; (8024cc0 <StartProcessTask+0x90>)
 8024c62:	6818      	ldr	r0, [r3, #0]
 8024c64:	f107 010a 	add.w	r1, r7, #10
 8024c68:	2300      	movs	r3, #0
 8024c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8024c6e:	f7f0 ff3b 	bl	8015ae8 <xQueueGenericReceive>
		cmd_data_buf[SIZE_OF_CMD_BUF-1] = len;
 8024c72:	7aba      	ldrb	r2, [r7, #10]
 8024c74:	4b13      	ldr	r3, [pc, #76]	; (8024cc4 <StartProcessTask+0x94>)
 8024c76:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		uint pos = 0;
 8024c7a:	2300      	movs	r3, #0
 8024c7c:	60fb      	str	r3, [r7, #12]
		while (len) {
 8024c7e:	e00f      	b.n	8024ca0 <StartProcessTask+0x70>
			uint8_t ch;
			CB_Read(&inbuf_UART, &ch);
 8024c80:	f107 0309 	add.w	r3, r7, #9
 8024c84:	4619      	mov	r1, r3
 8024c86:	480a      	ldr	r0, [pc, #40]	; (8024cb0 <StartProcessTask+0x80>)
 8024c88:	f7fe fbbf 	bl	802340a <CB_Read>
			--len;
 8024c8c:	7abb      	ldrb	r3, [r7, #10]
 8024c8e:	3b01      	subs	r3, #1
 8024c90:	b2db      	uxtb	r3, r3
 8024c92:	72bb      	strb	r3, [r7, #10]
			cmd_data_buf[pos++] = ch;
 8024c94:	68fb      	ldr	r3, [r7, #12]
 8024c96:	1c5a      	adds	r2, r3, #1
 8024c98:	60fa      	str	r2, [r7, #12]
 8024c9a:	7a79      	ldrb	r1, [r7, #9]
 8024c9c:	4a09      	ldr	r2, [pc, #36]	; (8024cc4 <StartProcessTask+0x94>)
 8024c9e:	54d1      	strb	r1, [r2, r3]
		while (len) {
 8024ca0:	7abb      	ldrb	r3, [r7, #10]
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	d1ec      	bne.n	8024c80 <StartProcessTask+0x50>
		}
		CommandParser(cmd_data_buf);
 8024ca6:	4807      	ldr	r0, [pc, #28]	; (8024cc4 <StartProcessTask+0x94>)
 8024ca8:	f000 f84c 	bl	8024d44 <CommandParser>
	for (;;) {
 8024cac:	e7d8      	b.n	8024c60 <StartProcessTask+0x30>
 8024cae:	bf00      	nop
 8024cb0:	2000bda0 	.word	0x2000bda0
 8024cb4:	08028a88 	.word	0x08028a88
 8024cb8:	2000bd9c 	.word	0x2000bd9c
 8024cbc:	2000bed0 	.word	0x2000bed0
 8024cc0:	2000bd40 	.word	0x2000bd40
 8024cc4:	2000413c 	.word	0x2000413c

08024cc8 <CalculateFCS>:
	hp->must_answer = 0U;
	hp->wait_for_answer = 0U;
	hp->answer_ptr = NULL;
}

static inline uint8_t CalculateFCS(uint8_t * buf, uint8_t len) {
 8024cc8:	b480      	push	{r7}
 8024cca:	b085      	sub	sp, #20
 8024ccc:	af00      	add	r7, sp, #0
 8024cce:	6078      	str	r0, [r7, #4]
 8024cd0:	460b      	mov	r3, r1
 8024cd2:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 8024cd4:	2300      	movs	r3, #0
 8024cd6:	73fb      	strb	r3, [r7, #15]
	while (len--) {
 8024cd8:	e006      	b.n	8024ce8 <CalculateFCS+0x20>
		result += *buf++;
 8024cda:	687b      	ldr	r3, [r7, #4]
 8024cdc:	1c5a      	adds	r2, r3, #1
 8024cde:	607a      	str	r2, [r7, #4]
 8024ce0:	781a      	ldrb	r2, [r3, #0]
 8024ce2:	7bfb      	ldrb	r3, [r7, #15]
 8024ce4:	4413      	add	r3, r2
 8024ce6:	73fb      	strb	r3, [r7, #15]
	while (len--) {
 8024ce8:	78fb      	ldrb	r3, [r7, #3]
 8024cea:	1e5a      	subs	r2, r3, #1
 8024cec:	70fa      	strb	r2, [r7, #3]
 8024cee:	2b00      	cmp	r3, #0
 8024cf0:	d1f3      	bne.n	8024cda <CalculateFCS+0x12>
	}
	return result;
 8024cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8024cf4:	4618      	mov	r0, r3
 8024cf6:	3714      	adds	r7, #20
 8024cf8:	46bd      	mov	sp, r7
 8024cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cfe:	4770      	bx	lr

08024d00 <TokenCmdProcessing>:

static inline error_t TokenCmdProcessing(telegram_t * tel) {
 8024d00:	b480      	push	{r7}
 8024d02:	b083      	sub	sp, #12
 8024d04:	af00      	add	r7, sp, #0
 8024d06:	6078      	str	r0, [r7, #4]

	return NO_ERR;
 8024d08:	2300      	movs	r3, #0
}
 8024d0a:	4618      	mov	r0, r3
 8024d0c:	370c      	adds	r7, #12
 8024d0e:	46bd      	mov	sp, r7
 8024d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d14:	4770      	bx	lr

08024d16 <NoDataCmdProcessing>:

static inline error_t NoDataCmdProcessing(telegram_t * tel) {
 8024d16:	b480      	push	{r7}
 8024d18:	b083      	sub	sp, #12
 8024d1a:	af00      	add	r7, sp, #0
 8024d1c:	6078      	str	r0, [r7, #4]

	return NO_ERR;
 8024d1e:	2300      	movs	r3, #0
}
 8024d20:	4618      	mov	r0, r3
 8024d22:	370c      	adds	r7, #12
 8024d24:	46bd      	mov	sp, r7
 8024d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d2a:	4770      	bx	lr

08024d2c <VarDataCmdProcessing>:

static inline error_t VarDataCmdProcessing(telegram_t * tel) {
 8024d2c:	b480      	push	{r7}
 8024d2e:	b083      	sub	sp, #12
 8024d30:	af00      	add	r7, sp, #0
 8024d32:	6078      	str	r0, [r7, #4]

	return NO_ERR;
 8024d34:	2300      	movs	r3, #0
}
 8024d36:	4618      	mov	r0, r3
 8024d38:	370c      	adds	r7, #12
 8024d3a:	46bd      	mov	sp, r7
 8024d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d40:	4770      	bx	lr
	...

08024d44 <CommandParser>:
static inline error_t FixDataCmdProcessing(telegram_t * tel) {

	return NO_ERR;
}

error_t CommandParser(uint8_t *buf) {
 8024d44:	b580      	push	{r7, lr}
 8024d46:	b084      	sub	sp, #16
 8024d48:	af00      	add	r7, sp, #0
 8024d4a:	6078      	str	r0, [r7, #4]
	static telegram_t htel;
	htel.SD = *buf++;
 8024d4c:	687b      	ldr	r3, [r7, #4]
 8024d4e:	1c5a      	adds	r2, r3, #1
 8024d50:	607a      	str	r2, [r7, #4]
 8024d52:	781a      	ldrb	r2, [r3, #0]
 8024d54:	4b6b      	ldr	r3, [pc, #428]	; (8024f04 <CommandParser+0x1c0>)
 8024d56:	701a      	strb	r2, [r3, #0]
	switch (htel.SD) {
 8024d58:	4b6a      	ldr	r3, [pc, #424]	; (8024f04 <CommandParser+0x1c0>)
 8024d5a:	781b      	ldrb	r3, [r3, #0]
 8024d5c:	2b68      	cmp	r3, #104	; 0x68
 8024d5e:	d038      	beq.n	8024dd2 <CommandParser+0x8e>
 8024d60:	2b68      	cmp	r3, #104	; 0x68
 8024d62:	dc02      	bgt.n	8024d6a <CommandParser+0x26>
 8024d64:	2b10      	cmp	r3, #16
 8024d66:	d014      	beq.n	8024d92 <CommandParser+0x4e>
 8024d68:	e0c4      	b.n	8024ef4 <CommandParser+0x1b0>
 8024d6a:	2ba2      	cmp	r3, #162	; 0xa2
 8024d6c:	f000 80c4 	beq.w	8024ef8 <CommandParser+0x1b4>
 8024d70:	2bdc      	cmp	r3, #220	; 0xdc
 8024d72:	f040 80bf 	bne.w	8024ef4 <CommandParser+0x1b0>
	case 0xDC: /* Token  */
		/* Format: |SD4|DA|SA|*/
		htel.DA = *buf++;
 8024d76:	687b      	ldr	r3, [r7, #4]
 8024d78:	1c5a      	adds	r2, r3, #1
 8024d7a:	607a      	str	r2, [r7, #4]
 8024d7c:	781a      	ldrb	r2, [r3, #0]
 8024d7e:	4b61      	ldr	r3, [pc, #388]	; (8024f04 <CommandParser+0x1c0>)
 8024d80:	70da      	strb	r2, [r3, #3]
		htel.SA = *buf;
 8024d82:	687b      	ldr	r3, [r7, #4]
 8024d84:	781a      	ldrb	r2, [r3, #0]
 8024d86:	4b5f      	ldr	r3, [pc, #380]	; (8024f04 <CommandParser+0x1c0>)
 8024d88:	711a      	strb	r2, [r3, #4]
		TokenCmdProcessing(&htel);
 8024d8a:	485e      	ldr	r0, [pc, #376]	; (8024f04 <CommandParser+0x1c0>)
 8024d8c:	f7ff ffb8 	bl	8024d00 <TokenCmdProcessing>
		break;
 8024d90:	e0b3      	b.n	8024efa <CommandParser+0x1b6>
	case 0x10: /* No data */
		/* Format: |SD1|DA|SA|FC|FCS|ED| */
		htel.DA = *buf++;
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	1c5a      	adds	r2, r3, #1
 8024d96:	607a      	str	r2, [r7, #4]
 8024d98:	781a      	ldrb	r2, [r3, #0]
 8024d9a:	4b5a      	ldr	r3, [pc, #360]	; (8024f04 <CommandParser+0x1c0>)
 8024d9c:	70da      	strb	r2, [r3, #3]
		htel.SA = *buf++;
 8024d9e:	687b      	ldr	r3, [r7, #4]
 8024da0:	1c5a      	adds	r2, r3, #1
 8024da2:	607a      	str	r2, [r7, #4]
 8024da4:	781a      	ldrb	r2, [r3, #0]
 8024da6:	4b57      	ldr	r3, [pc, #348]	; (8024f04 <CommandParser+0x1c0>)
 8024da8:	711a      	strb	r2, [r3, #4]
		htel.FC = *buf++;
 8024daa:	687b      	ldr	r3, [r7, #4]
 8024dac:	1c5a      	adds	r2, r3, #1
 8024dae:	607a      	str	r2, [r7, #4]
 8024db0:	781a      	ldrb	r2, [r3, #0]
 8024db2:	4b54      	ldr	r3, [pc, #336]	; (8024f04 <CommandParser+0x1c0>)
 8024db4:	715a      	strb	r2, [r3, #5]
		htel.FCS = *buf++;
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	1c5a      	adds	r2, r3, #1
 8024dba:	607a      	str	r2, [r7, #4]
 8024dbc:	781a      	ldrb	r2, [r3, #0]
 8024dbe:	4b51      	ldr	r3, [pc, #324]	; (8024f04 <CommandParser+0x1c0>)
 8024dc0:	741a      	strb	r2, [r3, #16]
		htel.ED = *buf;
 8024dc2:	687b      	ldr	r3, [r7, #4]
 8024dc4:	781a      	ldrb	r2, [r3, #0]
 8024dc6:	4b4f      	ldr	r3, [pc, #316]	; (8024f04 <CommandParser+0x1c0>)
 8024dc8:	745a      	strb	r2, [r3, #17]
		NoDataCmdProcessing(&htel);
 8024dca:	484e      	ldr	r0, [pc, #312]	; (8024f04 <CommandParser+0x1c0>)
 8024dcc:	f7ff ffa3 	bl	8024d16 <NoDataCmdProcessing>
		break;
 8024dd0:	e093      	b.n	8024efa <CommandParser+0x1b6>
	case 0x68: /* Variable length data */
		/* Format by wiki: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|PDU|FCS|ED| */
		/* Real MPI frame: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|F1/[B0|0x]|RN|PDU|FCS|ED| */
		htel.LE = *buf++;
 8024dd2:	687b      	ldr	r3, [r7, #4]
 8024dd4:	1c5a      	adds	r2, r3, #1
 8024dd6:	607a      	str	r2, [r7, #4]
 8024dd8:	781a      	ldrb	r2, [r3, #0]
 8024dda:	4b4a      	ldr	r3, [pc, #296]	; (8024f04 <CommandParser+0x1c0>)
 8024ddc:	705a      	strb	r2, [r3, #1]
		htel.LEr = *buf++;
 8024dde:	687b      	ldr	r3, [r7, #4]
 8024de0:	1c5a      	adds	r2, r3, #1
 8024de2:	607a      	str	r2, [r7, #4]
 8024de4:	781a      	ldrb	r2, [r3, #0]
 8024de6:	4b47      	ldr	r3, [pc, #284]	; (8024f04 <CommandParser+0x1c0>)
 8024de8:	709a      	strb	r2, [r3, #2]
		buf++;
 8024dea:	687b      	ldr	r3, [r7, #4]
 8024dec:	3301      	adds	r3, #1
 8024dee:	607b      	str	r3, [r7, #4]
		if (htel.LE != htel.LEr) {
 8024df0:	4b44      	ldr	r3, [pc, #272]	; (8024f04 <CommandParser+0x1c0>)
 8024df2:	785a      	ldrb	r2, [r3, #1]
 8024df4:	4b43      	ldr	r3, [pc, #268]	; (8024f04 <CommandParser+0x1c0>)
 8024df6:	789b      	ldrb	r3, [r3, #2]
 8024df8:	429a      	cmp	r2, r3
 8024dfa:	d001      	beq.n	8024e00 <CommandParser+0xbc>
			return FRAME_ERR;
 8024dfc:	2306      	movs	r3, #6
 8024dfe:	e07d      	b.n	8024efc <CommandParser+0x1b8>
		}
		if (CalculateFCS(buf, htel.LE) != *(buf + htel.LE)) {
 8024e00:	4b40      	ldr	r3, [pc, #256]	; (8024f04 <CommandParser+0x1c0>)
 8024e02:	785b      	ldrb	r3, [r3, #1]
 8024e04:	4619      	mov	r1, r3
 8024e06:	6878      	ldr	r0, [r7, #4]
 8024e08:	f7ff ff5e 	bl	8024cc8 <CalculateFCS>
 8024e0c:	4603      	mov	r3, r0
 8024e0e:	461a      	mov	r2, r3
 8024e10:	4b3c      	ldr	r3, [pc, #240]	; (8024f04 <CommandParser+0x1c0>)
 8024e12:	785b      	ldrb	r3, [r3, #1]
 8024e14:	4619      	mov	r1, r3
 8024e16:	687b      	ldr	r3, [r7, #4]
 8024e18:	440b      	add	r3, r1
 8024e1a:	781b      	ldrb	r3, [r3, #0]
 8024e1c:	429a      	cmp	r2, r3
 8024e1e:	d001      	beq.n	8024e24 <CommandParser+0xe0>
			return FCS_ERR;
 8024e20:	2307      	movs	r3, #7
 8024e22:	e06b      	b.n	8024efc <CommandParser+0x1b8>
		}
		htel.DA = *buf++;
 8024e24:	687b      	ldr	r3, [r7, #4]
 8024e26:	1c5a      	adds	r2, r3, #1
 8024e28:	607a      	str	r2, [r7, #4]
 8024e2a:	781a      	ldrb	r2, [r3, #0]
 8024e2c:	4b35      	ldr	r3, [pc, #212]	; (8024f04 <CommandParser+0x1c0>)
 8024e2e:	70da      	strb	r2, [r3, #3]
		htel.SA = *buf++;
 8024e30:	687b      	ldr	r3, [r7, #4]
 8024e32:	1c5a      	adds	r2, r3, #1
 8024e34:	607a      	str	r2, [r7, #4]
 8024e36:	781a      	ldrb	r2, [r3, #0]
 8024e38:	4b32      	ldr	r3, [pc, #200]	; (8024f04 <CommandParser+0x1c0>)
 8024e3a:	711a      	strb	r2, [r3, #4]
		htel.FC = *buf++;
 8024e3c:	687b      	ldr	r3, [r7, #4]
 8024e3e:	1c5a      	adds	r2, r3, #1
 8024e40:	607a      	str	r2, [r7, #4]
 8024e42:	781a      	ldrb	r2, [r3, #0]
 8024e44:	4b2f      	ldr	r3, [pc, #188]	; (8024f04 <CommandParser+0x1c0>)
 8024e46:	715a      	strb	r2, [r3, #5]
		htel.DSAP = *buf++;
 8024e48:	687b      	ldr	r3, [r7, #4]
 8024e4a:	1c5a      	adds	r2, r3, #1
 8024e4c:	607a      	str	r2, [r7, #4]
 8024e4e:	781a      	ldrb	r2, [r3, #0]
 8024e50:	4b2c      	ldr	r3, [pc, #176]	; (8024f04 <CommandParser+0x1c0>)
 8024e52:	719a      	strb	r2, [r3, #6]
		htel.SSAP = *buf++;
 8024e54:	687b      	ldr	r3, [r7, #4]
 8024e56:	1c5a      	adds	r2, r3, #1
 8024e58:	607a      	str	r2, [r7, #4]
 8024e5a:	781a      	ldrb	r2, [r3, #0]
 8024e5c:	4b29      	ldr	r3, [pc, #164]	; (8024f04 <CommandParser+0x1c0>)
 8024e5e:	71da      	strb	r2, [r3, #7]
		htel.UK1 = *buf++;
 8024e60:	687b      	ldr	r3, [r7, #4]
 8024e62:	1c5a      	adds	r2, r3, #1
 8024e64:	607a      	str	r2, [r7, #4]
 8024e66:	781a      	ldrb	r2, [r3, #0]
 8024e68:	4b26      	ldr	r3, [pc, #152]	; (8024f04 <CommandParser+0x1c0>)
 8024e6a:	721a      	strb	r2, [r3, #8]
		if (htel.UK1 == 0xB0) {
 8024e6c:	4b25      	ldr	r3, [pc, #148]	; (8024f04 <CommandParser+0x1c0>)
 8024e6e:	7a1b      	ldrb	r3, [r3, #8]
 8024e70:	2bb0      	cmp	r3, #176	; 0xb0
 8024e72:	d116      	bne.n	8024ea2 <CommandParser+0x15e>
			htel.UK2 = *buf++;
 8024e74:	687b      	ldr	r3, [r7, #4]
 8024e76:	1c5a      	adds	r2, r3, #1
 8024e78:	607a      	str	r2, [r7, #4]
 8024e7a:	781a      	ldrb	r2, [r3, #0]
 8024e7c:	4b21      	ldr	r3, [pc, #132]	; (8024f04 <CommandParser+0x1c0>)
 8024e7e:	725a      	strb	r2, [r3, #9]
			htel.RN = *buf++;
 8024e80:	687b      	ldr	r3, [r7, #4]
 8024e82:	1c5a      	adds	r2, r3, #1
 8024e84:	607a      	str	r2, [r7, #4]
 8024e86:	781a      	ldrb	r2, [r3, #0]
 8024e88:	4b1e      	ldr	r3, [pc, #120]	; (8024f04 <CommandParser+0x1c0>)
 8024e8a:	729a      	strb	r2, [r3, #10]
			htel.FCS = *buf++;
 8024e8c:	687b      	ldr	r3, [r7, #4]
 8024e8e:	1c5a      	adds	r2, r3, #1
 8024e90:	607a      	str	r2, [r7, #4]
 8024e92:	781a      	ldrb	r2, [r3, #0]
 8024e94:	4b1b      	ldr	r3, [pc, #108]	; (8024f04 <CommandParser+0x1c0>)
 8024e96:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 8024e98:	687b      	ldr	r3, [r7, #4]
 8024e9a:	781a      	ldrb	r2, [r3, #0]
 8024e9c:	4b19      	ldr	r3, [pc, #100]	; (8024f04 <CommandParser+0x1c0>)
 8024e9e:	745a      	strb	r2, [r3, #17]
 8024ea0:	e024      	b.n	8024eec <CommandParser+0x1a8>
		} else {
			htel.RN = *buf++;
 8024ea2:	687b      	ldr	r3, [r7, #4]
 8024ea4:	1c5a      	adds	r2, r3, #1
 8024ea6:	607a      	str	r2, [r7, #4]
 8024ea8:	781a      	ldrb	r2, [r3, #0]
 8024eaa:	4b16      	ldr	r3, [pc, #88]	; (8024f04 <CommandParser+0x1c0>)
 8024eac:	729a      	strb	r2, [r3, #10]
			uint pdu_size = htel.LE - 7;
 8024eae:	4b15      	ldr	r3, [pc, #84]	; (8024f04 <CommandParser+0x1c0>)
 8024eb0:	785b      	ldrb	r3, [r3, #1]
 8024eb2:	3b07      	subs	r3, #7
 8024eb4:	60fb      	str	r3, [r7, #12]
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 8024eb6:	68f8      	ldr	r0, [r7, #12]
 8024eb8:	f7f0 f932 	bl	8015120 <pvPortMalloc>
 8024ebc:	4602      	mov	r2, r0
 8024ebe:	4b11      	ldr	r3, [pc, #68]	; (8024f04 <CommandParser+0x1c0>)
 8024ec0:	60da      	str	r2, [r3, #12]
			memcpy(htel.PDU,buf,pdu_size);
 8024ec2:	4b10      	ldr	r3, [pc, #64]	; (8024f04 <CommandParser+0x1c0>)
 8024ec4:	68db      	ldr	r3, [r3, #12]
 8024ec6:	68fa      	ldr	r2, [r7, #12]
 8024ec8:	6879      	ldr	r1, [r7, #4]
 8024eca:	4618      	mov	r0, r3
 8024ecc:	f001 f883 	bl	8025fd6 <memcpy>
			buf += pdu_size;
 8024ed0:	687a      	ldr	r2, [r7, #4]
 8024ed2:	68fb      	ldr	r3, [r7, #12]
 8024ed4:	4413      	add	r3, r2
 8024ed6:	607b      	str	r3, [r7, #4]
			htel.FCS = *buf++;
 8024ed8:	687b      	ldr	r3, [r7, #4]
 8024eda:	1c5a      	adds	r2, r3, #1
 8024edc:	607a      	str	r2, [r7, #4]
 8024ede:	781a      	ldrb	r2, [r3, #0]
 8024ee0:	4b08      	ldr	r3, [pc, #32]	; (8024f04 <CommandParser+0x1c0>)
 8024ee2:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 8024ee4:	687b      	ldr	r3, [r7, #4]
 8024ee6:	781a      	ldrb	r2, [r3, #0]
 8024ee8:	4b06      	ldr	r3, [pc, #24]	; (8024f04 <CommandParser+0x1c0>)
 8024eea:	745a      	strb	r2, [r3, #17]
		}
		VarDataCmdProcessing(&htel);
 8024eec:	4805      	ldr	r0, [pc, #20]	; (8024f04 <CommandParser+0x1c0>)
 8024eee:	f7ff ff1d 	bl	8024d2c <VarDataCmdProcessing>
		break;
 8024ef2:	e002      	b.n	8024efa <CommandParser+0x1b6>
	case 0xA2: /* Fixed length data */
		break;
	default:
		return UNKNOWN_SD_ERR;
 8024ef4:	2305      	movs	r3, #5
 8024ef6:	e001      	b.n	8024efc <CommandParser+0x1b8>
		break;
 8024ef8:	bf00      	nop
	}
	return NO_ERR;
 8024efa:	2300      	movs	r3, #0
}
 8024efc:	4618      	mov	r0, r3
 8024efe:	3710      	adds	r7, #16
 8024f00:	46bd      	mov	sp, r7
 8024f02:	bd80      	pop	{r7, pc}
 8024f04:	2000423c 	.word	0x2000423c

08024f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8024f08:	b580      	push	{r7, lr}
 8024f0a:	b082      	sub	sp, #8
 8024f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024f0e:	2300      	movs	r3, #0
 8024f10:	607b      	str	r3, [r7, #4]
 8024f12:	4a12      	ldr	r2, [pc, #72]	; (8024f5c <HAL_MspInit+0x54>)
 8024f14:	4b11      	ldr	r3, [pc, #68]	; (8024f5c <HAL_MspInit+0x54>)
 8024f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8024f1e:	4b0f      	ldr	r3, [pc, #60]	; (8024f5c <HAL_MspInit+0x54>)
 8024f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024f26:	607b      	str	r3, [r7, #4]
 8024f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8024f2a:	2300      	movs	r3, #0
 8024f2c:	603b      	str	r3, [r7, #0]
 8024f2e:	4a0b      	ldr	r2, [pc, #44]	; (8024f5c <HAL_MspInit+0x54>)
 8024f30:	4b0a      	ldr	r3, [pc, #40]	; (8024f5c <HAL_MspInit+0x54>)
 8024f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024f38:	6413      	str	r3, [r2, #64]	; 0x40
 8024f3a:	4b08      	ldr	r3, [pc, #32]	; (8024f5c <HAL_MspInit+0x54>)
 8024f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024f42:	603b      	str	r3, [r7, #0]
 8024f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8024f46:	2200      	movs	r2, #0
 8024f48:	210f      	movs	r1, #15
 8024f4a:	f06f 0001 	mvn.w	r0, #1
 8024f4e:	f7eb fb41 	bl	80105d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8024f52:	bf00      	nop
 8024f54:	3708      	adds	r7, #8
 8024f56:	46bd      	mov	sp, r7
 8024f58:	bd80      	pop	{r7, pc}
 8024f5a:	bf00      	nop
 8024f5c:	40023800 	.word	0x40023800

08024f60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8024f60:	b580      	push	{r7, lr}
 8024f62:	b08c      	sub	sp, #48	; 0x30
 8024f64:	af00      	add	r7, sp, #0
 8024f66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8024f68:	2300      	movs	r3, #0
 8024f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8024f6c:	2300      	movs	r3, #0
 8024f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8024f70:	2200      	movs	r2, #0
 8024f72:	6879      	ldr	r1, [r7, #4]
 8024f74:	2019      	movs	r0, #25
 8024f76:	f7eb fb2d 	bl	80105d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8024f7a:	2019      	movs	r0, #25
 8024f7c:	f7eb fb46 	bl	801060c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8024f80:	2300      	movs	r3, #0
 8024f82:	60fb      	str	r3, [r7, #12]
 8024f84:	4a1f      	ldr	r2, [pc, #124]	; (8025004 <HAL_InitTick+0xa4>)
 8024f86:	4b1f      	ldr	r3, [pc, #124]	; (8025004 <HAL_InitTick+0xa4>)
 8024f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f8a:	f043 0301 	orr.w	r3, r3, #1
 8024f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8024f90:	4b1c      	ldr	r3, [pc, #112]	; (8025004 <HAL_InitTick+0xa4>)
 8024f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024f94:	f003 0301 	and.w	r3, r3, #1
 8024f98:	60fb      	str	r3, [r7, #12]
 8024f9a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8024f9c:	f107 0210 	add.w	r2, r7, #16
 8024fa0:	f107 0314 	add.w	r3, r7, #20
 8024fa4:	4611      	mov	r1, r2
 8024fa6:	4618      	mov	r0, r3
 8024fa8:	f7ee f8d2 	bl	8013150 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8024fac:	f7ee f8bc 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8024fb0:	4603      	mov	r3, r0
 8024fb2:	005b      	lsls	r3, r3, #1
 8024fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8024fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024fb8:	4a13      	ldr	r2, [pc, #76]	; (8025008 <HAL_InitTick+0xa8>)
 8024fba:	fba2 2303 	umull	r2, r3, r2, r3
 8024fbe:	0c9b      	lsrs	r3, r3, #18
 8024fc0:	3b01      	subs	r3, #1
 8024fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8024fc4:	4b11      	ldr	r3, [pc, #68]	; (802500c <HAL_InitTick+0xac>)
 8024fc6:	4a12      	ldr	r2, [pc, #72]	; (8025010 <HAL_InitTick+0xb0>)
 8024fc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8024fca:	4b10      	ldr	r3, [pc, #64]	; (802500c <HAL_InitTick+0xac>)
 8024fcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8024fd0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8024fd2:	4a0e      	ldr	r2, [pc, #56]	; (802500c <HAL_InitTick+0xac>)
 8024fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024fd6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8024fd8:	4b0c      	ldr	r3, [pc, #48]	; (802500c <HAL_InitTick+0xac>)
 8024fda:	2200      	movs	r2, #0
 8024fdc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8024fde:	4b0b      	ldr	r3, [pc, #44]	; (802500c <HAL_InitTick+0xac>)
 8024fe0:	2200      	movs	r2, #0
 8024fe2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8024fe4:	4809      	ldr	r0, [pc, #36]	; (802500c <HAL_InitTick+0xac>)
 8024fe6:	f7ee f8e5 	bl	80131b4 <HAL_TIM_Base_Init>
 8024fea:	4603      	mov	r3, r0
 8024fec:	2b00      	cmp	r3, #0
 8024fee:	d104      	bne.n	8024ffa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8024ff0:	4806      	ldr	r0, [pc, #24]	; (802500c <HAL_InitTick+0xac>)
 8024ff2:	f7ee f90a 	bl	801320a <HAL_TIM_Base_Start_IT>
 8024ff6:	4603      	mov	r3, r0
 8024ff8:	e000      	b.n	8024ffc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8024ffa:	2301      	movs	r3, #1
}
 8024ffc:	4618      	mov	r0, r3
 8024ffe:	3730      	adds	r7, #48	; 0x30
 8025000:	46bd      	mov	sp, r7
 8025002:	bd80      	pop	{r7, pc}
 8025004:	40023800 	.word	0x40023800
 8025008:	431bde83 	.word	0x431bde83
 802500c:	2000bdbc 	.word	0x2000bdbc
 8025010:	40010000 	.word	0x40010000

08025014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8025014:	b480      	push	{r7}
 8025016:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8025018:	bf00      	nop
 802501a:	46bd      	mov	sp, r7
 802501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025020:	4770      	bx	lr

08025022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8025022:	b480      	push	{r7}
 8025024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8025026:	e7fe      	b.n	8025026 <HardFault_Handler+0x4>

08025028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8025028:	b480      	push	{r7}
 802502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802502c:	e7fe      	b.n	802502c <MemManage_Handler+0x4>

0802502e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802502e:	b480      	push	{r7}
 8025030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8025032:	e7fe      	b.n	8025032 <BusFault_Handler+0x4>

08025034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8025034:	b480      	push	{r7}
 8025036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8025038:	e7fe      	b.n	8025038 <UsageFault_Handler+0x4>

0802503a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802503a:	b480      	push	{r7}
 802503c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802503e:	bf00      	nop
 8025040:	46bd      	mov	sp, r7
 8025042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025046:	4770      	bx	lr

08025048 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8025048:	b580      	push	{r7, lr}
 802504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 802504c:	4802      	ldr	r0, [pc, #8]	; (8025058 <TIM1_UP_TIM10_IRQHandler+0x10>)
 802504e:	f7ee f922 	bl	8013296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8025052:	bf00      	nop
 8025054:	bd80      	pop	{r7, pc}
 8025056:	bf00      	nop
 8025058:	2000bdbc 	.word	0x2000bdbc

0802505c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 802505c:	b580      	push	{r7, lr}
 802505e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8025060:	4802      	ldr	r0, [pc, #8]	; (802506c <USART1_IRQHandler+0x10>)
 8025062:	f7ee fdf9 	bl	8013c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8025066:	bf00      	nop
 8025068:	bd80      	pop	{r7, pc}
 802506a:	bf00      	nop
 802506c:	2000bf10 	.word	0x2000bf10

08025070 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8025070:	b580      	push	{r7, lr}
 8025072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8025074:	4802      	ldr	r0, [pc, #8]	; (8025080 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8025076:	f7ee f90e 	bl	8013296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 802507a:	bf00      	nop
 802507c:	bd80      	pop	{r7, pc}
 802507e:	bf00      	nop
 8025080:	2000bdf8 	.word	0x2000bdf8

08025084 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8025084:	b580      	push	{r7, lr}
 8025086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8025088:	4802      	ldr	r0, [pc, #8]	; (8025094 <UART5_IRQHandler+0x10>)
 802508a:	f7ee fde5 	bl	8013c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 802508e:	bf00      	nop
 8025090:	bd80      	pop	{r7, pc}
 8025092:	bf00      	nop
 8025094:	2000bed0 	.word	0x2000bed0

08025098 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8025098:	b580      	push	{r7, lr}
 802509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 802509c:	4802      	ldr	r0, [pc, #8]	; (80250a8 <TIM7_IRQHandler+0x10>)
 802509e:	f7ee f8fa 	bl	8013296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80250a2:	bf00      	nop
 80250a4:	bd80      	pop	{r7, pc}
 80250a6:	bf00      	nop
 80250a8:	2000be34 	.word	0x2000be34

080250ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80250ac:	b580      	push	{r7, lr}
 80250ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80250b0:	4802      	ldr	r0, [pc, #8]	; (80250bc <ETH_IRQHandler+0x10>)
 80250b2:	f7ec fa91 	bl	80115d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80250b6:	bf00      	nop
 80250b8:	bd80      	pop	{r7, pc}
 80250ba:	bf00      	nop
 80250bc:	2000a524 	.word	0x2000a524

080250c0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80250c0:	b580      	push	{r7, lr}
 80250c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80250c4:	4802      	ldr	r0, [pc, #8]	; (80250d0 <DMA2_Stream7_IRQHandler+0x10>)
 80250c6:	f7eb fc39 	bl	801093c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80250ca:	bf00      	nop
 80250cc:	bd80      	pop	{r7, pc}
 80250ce:	bf00      	nop
 80250d0:	2000be70 	.word	0x2000be70

080250d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80250d4:	b480      	push	{r7}
 80250d6:	b083      	sub	sp, #12
 80250d8:	af00      	add	r7, sp, #0
 80250da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80250dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80250e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80250e4:	f003 0301 	and.w	r3, r3, #1
 80250e8:	2b00      	cmp	r3, #0
 80250ea:	d013      	beq.n	8025114 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80250ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80250f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80250f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80250f8:	2b00      	cmp	r3, #0
 80250fa:	d00b      	beq.n	8025114 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80250fc:	e000      	b.n	8025100 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 80250fe:	bf00      	nop
 8025100:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025104:	681b      	ldr	r3, [r3, #0]
 8025106:	2b00      	cmp	r3, #0
 8025108:	d0f9      	beq.n	80250fe <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 802510a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 802510e:	687a      	ldr	r2, [r7, #4]
 8025110:	b2d2      	uxtb	r2, r2
 8025112:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8025114:	687b      	ldr	r3, [r7, #4]
}
 8025116:	4618      	mov	r0, r3
 8025118:	370c      	adds	r7, #12
 802511a:	46bd      	mov	sp, r7
 802511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025120:	4770      	bx	lr

08025122 <_write>:
	}

	return len;
}

int _write(int file, char *ptr, int len) {
 8025122:	b580      	push	{r7, lr}
 8025124:	b086      	sub	sp, #24
 8025126:	af00      	add	r7, sp, #0
 8025128:	60f8      	str	r0, [r7, #12]
 802512a:	60b9      	str	r1, [r7, #8]
 802512c:	607a      	str	r2, [r7, #4]
	int i = 0;
 802512e:	2300      	movs	r3, #0
 8025130:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8025132:	2300      	movs	r3, #0
 8025134:	617b      	str	r3, [r7, #20]
 8025136:	e009      	b.n	802514c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8025138:	68bb      	ldr	r3, [r7, #8]
 802513a:	1c5a      	adds	r2, r3, #1
 802513c:	60ba      	str	r2, [r7, #8]
 802513e:	781b      	ldrb	r3, [r3, #0]
 8025140:	4618      	mov	r0, r3
 8025142:	f7ff ffc7 	bl	80250d4 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8025146:	697b      	ldr	r3, [r7, #20]
 8025148:	3301      	adds	r3, #1
 802514a:	617b      	str	r3, [r7, #20]
 802514c:	697a      	ldr	r2, [r7, #20]
 802514e:	687b      	ldr	r3, [r7, #4]
 8025150:	429a      	cmp	r2, r3
 8025152:	dbf1      	blt.n	8025138 <_write+0x16>
	return len;
 8025154:	687b      	ldr	r3, [r7, #4]
}
 8025156:	4618      	mov	r0, r3
 8025158:	3718      	adds	r7, #24
 802515a:	46bd      	mov	sp, r7
 802515c:	bd80      	pop	{r7, pc}
	...

08025160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8025160:	b480      	push	{r7}
 8025162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8025164:	4a16      	ldr	r2, [pc, #88]	; (80251c0 <SystemInit+0x60>)
 8025166:	4b16      	ldr	r3, [pc, #88]	; (80251c0 <SystemInit+0x60>)
 8025168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802516c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8025170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8025174:	4a13      	ldr	r2, [pc, #76]	; (80251c4 <SystemInit+0x64>)
 8025176:	4b13      	ldr	r3, [pc, #76]	; (80251c4 <SystemInit+0x64>)
 8025178:	681b      	ldr	r3, [r3, #0]
 802517a:	f043 0301 	orr.w	r3, r3, #1
 802517e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8025180:	4b10      	ldr	r3, [pc, #64]	; (80251c4 <SystemInit+0x64>)
 8025182:	2200      	movs	r2, #0
 8025184:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8025186:	4a0f      	ldr	r2, [pc, #60]	; (80251c4 <SystemInit+0x64>)
 8025188:	4b0e      	ldr	r3, [pc, #56]	; (80251c4 <SystemInit+0x64>)
 802518a:	681b      	ldr	r3, [r3, #0]
 802518c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8025190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8025194:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8025196:	4b0b      	ldr	r3, [pc, #44]	; (80251c4 <SystemInit+0x64>)
 8025198:	4a0b      	ldr	r2, [pc, #44]	; (80251c8 <SystemInit+0x68>)
 802519a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 802519c:	4a09      	ldr	r2, [pc, #36]	; (80251c4 <SystemInit+0x64>)
 802519e:	4b09      	ldr	r3, [pc, #36]	; (80251c4 <SystemInit+0x64>)
 80251a0:	681b      	ldr	r3, [r3, #0]
 80251a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80251a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80251a8:	4b06      	ldr	r3, [pc, #24]	; (80251c4 <SystemInit+0x64>)
 80251aa:	2200      	movs	r2, #0
 80251ac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80251ae:	4b04      	ldr	r3, [pc, #16]	; (80251c0 <SystemInit+0x60>)
 80251b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80251b4:	609a      	str	r2, [r3, #8]
#endif
}
 80251b6:	bf00      	nop
 80251b8:	46bd      	mov	sp, r7
 80251ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251be:	4770      	bx	lr
 80251c0:	e000ed00 	.word	0xe000ed00
 80251c4:	40023800 	.word	0x40023800
 80251c8:	24003010 	.word	0x24003010

080251cc <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80251cc:	b580      	push	{r7, lr}
 80251ce:	b082      	sub	sp, #8
 80251d0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80251d2:	463b      	mov	r3, r7
 80251d4:	2200      	movs	r2, #0
 80251d6:	601a      	str	r2, [r3, #0]
 80251d8:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80251da:	4b13      	ldr	r3, [pc, #76]	; (8025228 <MX_TIM7_Init+0x5c>)
 80251dc:	4a13      	ldr	r2, [pc, #76]	; (802522c <MX_TIM7_Init+0x60>)
 80251de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80251e0:	4b11      	ldr	r3, [pc, #68]	; (8025228 <MX_TIM7_Init+0x5c>)
 80251e2:	2200      	movs	r2, #0
 80251e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80251e6:	4b10      	ldr	r3, [pc, #64]	; (8025228 <MX_TIM7_Init+0x5c>)
 80251e8:	2200      	movs	r2, #0
 80251ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840;
 80251ec:	4b0e      	ldr	r3, [pc, #56]	; (8025228 <MX_TIM7_Init+0x5c>)
 80251ee:	f44f 7252 	mov.w	r2, #840	; 0x348
 80251f2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80251f4:	480c      	ldr	r0, [pc, #48]	; (8025228 <MX_TIM7_Init+0x5c>)
 80251f6:	f7ed ffdd 	bl	80131b4 <HAL_TIM_Base_Init>
 80251fa:	4603      	mov	r3, r0
 80251fc:	2b00      	cmp	r3, #0
 80251fe:	d001      	beq.n	8025204 <MX_TIM7_Init+0x38>
  {
    Error_Handler();
 8025200:	f7ff fcb4 	bl	8024b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8025204:	2300      	movs	r3, #0
 8025206:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8025208:	2300      	movs	r3, #0
 802520a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 802520c:	463b      	mov	r3, r7
 802520e:	4619      	mov	r1, r3
 8025210:	4805      	ldr	r0, [pc, #20]	; (8025228 <MX_TIM7_Init+0x5c>)
 8025212:	f7ee fb9e 	bl	8013952 <HAL_TIMEx_MasterConfigSynchronization>
 8025216:	4603      	mov	r3, r0
 8025218:	2b00      	cmp	r3, #0
 802521a:	d001      	beq.n	8025220 <MX_TIM7_Init+0x54>
  {
    Error_Handler();
 802521c:	f7ff fca6 	bl	8024b6c <Error_Handler>
  }

}
 8025220:	bf00      	nop
 8025222:	3708      	adds	r7, #8
 8025224:	46bd      	mov	sp, r7
 8025226:	bd80      	pop	{r7, pc}
 8025228:	2000be34 	.word	0x2000be34
 802522c:	40001400 	.word	0x40001400

08025230 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8025230:	b580      	push	{r7, lr}
 8025232:	b086      	sub	sp, #24
 8025234:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8025236:	f107 0308 	add.w	r3, r7, #8
 802523a:	2200      	movs	r2, #0
 802523c:	601a      	str	r2, [r3, #0]
 802523e:	605a      	str	r2, [r3, #4]
 8025240:	609a      	str	r2, [r3, #8]
 8025242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8025244:	463b      	mov	r3, r7
 8025246:	2200      	movs	r2, #0
 8025248:	601a      	str	r2, [r3, #0]
 802524a:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 802524c:	4b1d      	ldr	r3, [pc, #116]	; (80252c4 <MX_TIM8_Init+0x94>)
 802524e:	4a1e      	ldr	r2, [pc, #120]	; (80252c8 <MX_TIM8_Init+0x98>)
 8025250:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8025252:	4b1c      	ldr	r3, [pc, #112]	; (80252c4 <MX_TIM8_Init+0x94>)
 8025254:	2200      	movs	r2, #0
 8025256:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8025258:	4b1a      	ldr	r3, [pc, #104]	; (80252c4 <MX_TIM8_Init+0x94>)
 802525a:	2200      	movs	r2, #0
 802525c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27720;
 802525e:	4b19      	ldr	r3, [pc, #100]	; (80252c4 <MX_TIM8_Init+0x94>)
 8025260:	f646 4248 	movw	r2, #27720	; 0x6c48
 8025264:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8025266:	4b17      	ldr	r3, [pc, #92]	; (80252c4 <MX_TIM8_Init+0x94>)
 8025268:	2200      	movs	r2, #0
 802526a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 802526c:	4b15      	ldr	r3, [pc, #84]	; (80252c4 <MX_TIM8_Init+0x94>)
 802526e:	2200      	movs	r2, #0
 8025270:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8025272:	4814      	ldr	r0, [pc, #80]	; (80252c4 <MX_TIM8_Init+0x94>)
 8025274:	f7ed ff9e 	bl	80131b4 <HAL_TIM_Base_Init>
 8025278:	4603      	mov	r3, r0
 802527a:	2b00      	cmp	r3, #0
 802527c:	d001      	beq.n	8025282 <MX_TIM8_Init+0x52>
  {
    Error_Handler();
 802527e:	f7ff fc75 	bl	8024b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8025282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8025286:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8025288:	f107 0308 	add.w	r3, r7, #8
 802528c:	4619      	mov	r1, r3
 802528e:	480d      	ldr	r0, [pc, #52]	; (80252c4 <MX_TIM8_Init+0x94>)
 8025290:	f7ee f909 	bl	80134a6 <HAL_TIM_ConfigClockSource>
 8025294:	4603      	mov	r3, r0
 8025296:	2b00      	cmp	r3, #0
 8025298:	d001      	beq.n	802529e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 802529a:	f7ff fc67 	bl	8024b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802529e:	2300      	movs	r3, #0
 80252a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80252a2:	2300      	movs	r3, #0
 80252a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80252a6:	463b      	mov	r3, r7
 80252a8:	4619      	mov	r1, r3
 80252aa:	4806      	ldr	r0, [pc, #24]	; (80252c4 <MX_TIM8_Init+0x94>)
 80252ac:	f7ee fb51 	bl	8013952 <HAL_TIMEx_MasterConfigSynchronization>
 80252b0:	4603      	mov	r3, r0
 80252b2:	2b00      	cmp	r3, #0
 80252b4:	d001      	beq.n	80252ba <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80252b6:	f7ff fc59 	bl	8024b6c <Error_Handler>
  }

}
 80252ba:	bf00      	nop
 80252bc:	3718      	adds	r7, #24
 80252be:	46bd      	mov	sp, r7
 80252c0:	bd80      	pop	{r7, pc}
 80252c2:	bf00      	nop
 80252c4:	2000bdf8 	.word	0x2000bdf8
 80252c8:	40010400 	.word	0x40010400

080252cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80252cc:	b580      	push	{r7, lr}
 80252ce:	b084      	sub	sp, #16
 80252d0:	af00      	add	r7, sp, #0
 80252d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80252d4:	687b      	ldr	r3, [r7, #4]
 80252d6:	681b      	ldr	r3, [r3, #0]
 80252d8:	4a1c      	ldr	r2, [pc, #112]	; (802534c <HAL_TIM_Base_MspInit+0x80>)
 80252da:	4293      	cmp	r3, r2
 80252dc:	d116      	bne.n	802530c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80252de:	2300      	movs	r3, #0
 80252e0:	60fb      	str	r3, [r7, #12]
 80252e2:	4a1b      	ldr	r2, [pc, #108]	; (8025350 <HAL_TIM_Base_MspInit+0x84>)
 80252e4:	4b1a      	ldr	r3, [pc, #104]	; (8025350 <HAL_TIM_Base_MspInit+0x84>)
 80252e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80252e8:	f043 0320 	orr.w	r3, r3, #32
 80252ec:	6413      	str	r3, [r2, #64]	; 0x40
 80252ee:	4b18      	ldr	r3, [pc, #96]	; (8025350 <HAL_TIM_Base_MspInit+0x84>)
 80252f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80252f2:	f003 0320 	and.w	r3, r3, #32
 80252f6:	60fb      	str	r3, [r7, #12]
 80252f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80252fa:	2200      	movs	r2, #0
 80252fc:	2105      	movs	r1, #5
 80252fe:	2037      	movs	r0, #55	; 0x37
 8025300:	f7eb f968 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8025304:	2037      	movs	r0, #55	; 0x37
 8025306:	f7eb f981 	bl	801060c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 802530a:	e01a      	b.n	8025342 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM8)
 802530c:	687b      	ldr	r3, [r7, #4]
 802530e:	681b      	ldr	r3, [r3, #0]
 8025310:	4a10      	ldr	r2, [pc, #64]	; (8025354 <HAL_TIM_Base_MspInit+0x88>)
 8025312:	4293      	cmp	r3, r2
 8025314:	d115      	bne.n	8025342 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8025316:	2300      	movs	r3, #0
 8025318:	60bb      	str	r3, [r7, #8]
 802531a:	4a0d      	ldr	r2, [pc, #52]	; (8025350 <HAL_TIM_Base_MspInit+0x84>)
 802531c:	4b0c      	ldr	r3, [pc, #48]	; (8025350 <HAL_TIM_Base_MspInit+0x84>)
 802531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025320:	f043 0302 	orr.w	r3, r3, #2
 8025324:	6453      	str	r3, [r2, #68]	; 0x44
 8025326:	4b0a      	ldr	r3, [pc, #40]	; (8025350 <HAL_TIM_Base_MspInit+0x84>)
 8025328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802532a:	f003 0302 	and.w	r3, r3, #2
 802532e:	60bb      	str	r3, [r7, #8]
 8025330:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8025332:	2200      	movs	r2, #0
 8025334:	2105      	movs	r1, #5
 8025336:	202c      	movs	r0, #44	; 0x2c
 8025338:	f7eb f94c 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 802533c:	202c      	movs	r0, #44	; 0x2c
 802533e:	f7eb f965 	bl	801060c <HAL_NVIC_EnableIRQ>
}
 8025342:	bf00      	nop
 8025344:	3710      	adds	r7, #16
 8025346:	46bd      	mov	sp, r7
 8025348:	bd80      	pop	{r7, pc}
 802534a:	bf00      	nop
 802534c:	40001400 	.word	0x40001400
 8025350:	40023800 	.word	0x40023800
 8025354:	40010400 	.word	0x40010400

08025358 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8025358:	b480      	push	{r7}
 802535a:	b087      	sub	sp, #28
 802535c:	af00      	add	r7, sp, #0
 802535e:	60f8      	str	r0, [r7, #12]
 8025360:	60b9      	str	r1, [r7, #8]
 8025362:	607a      	str	r2, [r7, #4]
	int div = 1;
 8025364:	2301      	movs	r3, #1
 8025366:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8025368:	e004      	b.n	8025374 <ts_itoa+0x1c>
		div *= base;
 802536a:	697b      	ldr	r3, [r7, #20]
 802536c:	687a      	ldr	r2, [r7, #4]
 802536e:	fb02 f303 	mul.w	r3, r2, r3
 8025372:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8025374:	697b      	ldr	r3, [r7, #20]
 8025376:	68ba      	ldr	r2, [r7, #8]
 8025378:	fbb2 f2f3 	udiv	r2, r2, r3
 802537c:	687b      	ldr	r3, [r7, #4]
 802537e:	429a      	cmp	r2, r3
 8025380:	d2f3      	bcs.n	802536a <ts_itoa+0x12>

	while (div != 0)
 8025382:	e029      	b.n	80253d8 <ts_itoa+0x80>
	{
		int num = d/div;
 8025384:	697b      	ldr	r3, [r7, #20]
 8025386:	68ba      	ldr	r2, [r7, #8]
 8025388:	fbb2 f3f3 	udiv	r3, r2, r3
 802538c:	613b      	str	r3, [r7, #16]
		d = d%div;
 802538e:	697a      	ldr	r2, [r7, #20]
 8025390:	68bb      	ldr	r3, [r7, #8]
 8025392:	fbb3 f1f2 	udiv	r1, r3, r2
 8025396:	fb02 f201 	mul.w	r2, r2, r1
 802539a:	1a9b      	subs	r3, r3, r2
 802539c:	60bb      	str	r3, [r7, #8]
		div /= base;
 802539e:	697a      	ldr	r2, [r7, #20]
 80253a0:	687b      	ldr	r3, [r7, #4]
 80253a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80253a6:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80253a8:	693b      	ldr	r3, [r7, #16]
 80253aa:	2b09      	cmp	r3, #9
 80253ac:	dd0a      	ble.n	80253c4 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80253ae:	68fb      	ldr	r3, [r7, #12]
 80253b0:	681b      	ldr	r3, [r3, #0]
 80253b2:	1c59      	adds	r1, r3, #1
 80253b4:	68fa      	ldr	r2, [r7, #12]
 80253b6:	6011      	str	r1, [r2, #0]
 80253b8:	693a      	ldr	r2, [r7, #16]
 80253ba:	b2d2      	uxtb	r2, r2
 80253bc:	3237      	adds	r2, #55	; 0x37
 80253be:	b2d2      	uxtb	r2, r2
 80253c0:	701a      	strb	r2, [r3, #0]
 80253c2:	e009      	b.n	80253d8 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80253c4:	68fb      	ldr	r3, [r7, #12]
 80253c6:	681b      	ldr	r3, [r3, #0]
 80253c8:	1c59      	adds	r1, r3, #1
 80253ca:	68fa      	ldr	r2, [r7, #12]
 80253cc:	6011      	str	r1, [r2, #0]
 80253ce:	693a      	ldr	r2, [r7, #16]
 80253d0:	b2d2      	uxtb	r2, r2
 80253d2:	3230      	adds	r2, #48	; 0x30
 80253d4:	b2d2      	uxtb	r2, r2
 80253d6:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80253d8:	697b      	ldr	r3, [r7, #20]
 80253da:	2b00      	cmp	r3, #0
 80253dc:	d1d2      	bne.n	8025384 <ts_itoa+0x2c>
	}
}
 80253de:	bf00      	nop
 80253e0:	371c      	adds	r7, #28
 80253e2:	46bd      	mov	sp, r7
 80253e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253e8:	4770      	bx	lr

080253ea <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80253ea:	b580      	push	{r7, lr}
 80253ec:	b088      	sub	sp, #32
 80253ee:	af00      	add	r7, sp, #0
 80253f0:	60f8      	str	r0, [r7, #12]
 80253f2:	60b9      	str	r1, [r7, #8]
 80253f4:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80253f6:	68fb      	ldr	r3, [r7, #12]
 80253f8:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80253fa:	e07d      	b.n	80254f8 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80253fc:	68bb      	ldr	r3, [r7, #8]
 80253fe:	781b      	ldrb	r3, [r3, #0]
 8025400:	2b25      	cmp	r3, #37	; 0x25
 8025402:	d171      	bne.n	80254e8 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8025404:	68bb      	ldr	r3, [r7, #8]
 8025406:	3301      	adds	r3, #1
 8025408:	60bb      	str	r3, [r7, #8]
 802540a:	68bb      	ldr	r3, [r7, #8]
 802540c:	781b      	ldrb	r3, [r3, #0]
 802540e:	2b64      	cmp	r3, #100	; 0x64
 8025410:	d01e      	beq.n	8025450 <ts_formatstring+0x66>
 8025412:	2b64      	cmp	r3, #100	; 0x64
 8025414:	dc06      	bgt.n	8025424 <ts_formatstring+0x3a>
 8025416:	2b58      	cmp	r3, #88	; 0x58
 8025418:	d050      	beq.n	80254bc <ts_formatstring+0xd2>
 802541a:	2b63      	cmp	r3, #99	; 0x63
 802541c:	d00e      	beq.n	802543c <ts_formatstring+0x52>
 802541e:	2b25      	cmp	r3, #37	; 0x25
 8025420:	d058      	beq.n	80254d4 <ts_formatstring+0xea>
 8025422:	e05d      	b.n	80254e0 <ts_formatstring+0xf6>
 8025424:	2b73      	cmp	r3, #115	; 0x73
 8025426:	d02b      	beq.n	8025480 <ts_formatstring+0x96>
 8025428:	2b73      	cmp	r3, #115	; 0x73
 802542a:	dc02      	bgt.n	8025432 <ts_formatstring+0x48>
 802542c:	2b69      	cmp	r3, #105	; 0x69
 802542e:	d00f      	beq.n	8025450 <ts_formatstring+0x66>
 8025430:	e056      	b.n	80254e0 <ts_formatstring+0xf6>
 8025432:	2b75      	cmp	r3, #117	; 0x75
 8025434:	d037      	beq.n	80254a6 <ts_formatstring+0xbc>
 8025436:	2b78      	cmp	r3, #120	; 0x78
 8025438:	d040      	beq.n	80254bc <ts_formatstring+0xd2>
 802543a:	e051      	b.n	80254e0 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 802543c:	68fb      	ldr	r3, [r7, #12]
 802543e:	1c5a      	adds	r2, r3, #1
 8025440:	60fa      	str	r2, [r7, #12]
 8025442:	687a      	ldr	r2, [r7, #4]
 8025444:	1d11      	adds	r1, r2, #4
 8025446:	6079      	str	r1, [r7, #4]
 8025448:	6812      	ldr	r2, [r2, #0]
 802544a:	b2d2      	uxtb	r2, r2
 802544c:	701a      	strb	r2, [r3, #0]
				break;
 802544e:	e047      	b.n	80254e0 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8025450:	687b      	ldr	r3, [r7, #4]
 8025452:	1d1a      	adds	r2, r3, #4
 8025454:	607a      	str	r2, [r7, #4]
 8025456:	681b      	ldr	r3, [r3, #0]
 8025458:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 802545a:	69fb      	ldr	r3, [r7, #28]
 802545c:	2b00      	cmp	r3, #0
 802545e:	da07      	bge.n	8025470 <ts_formatstring+0x86>
					{
						val *= -1;
 8025460:	69fb      	ldr	r3, [r7, #28]
 8025462:	425b      	negs	r3, r3
 8025464:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8025466:	68fb      	ldr	r3, [r7, #12]
 8025468:	1c5a      	adds	r2, r3, #1
 802546a:	60fa      	str	r2, [r7, #12]
 802546c:	222d      	movs	r2, #45	; 0x2d
 802546e:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8025470:	69f9      	ldr	r1, [r7, #28]
 8025472:	f107 030c 	add.w	r3, r7, #12
 8025476:	220a      	movs	r2, #10
 8025478:	4618      	mov	r0, r3
 802547a:	f7ff ff6d 	bl	8025358 <ts_itoa>
				}
				break;
 802547e:	e02f      	b.n	80254e0 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8025480:	687b      	ldr	r3, [r7, #4]
 8025482:	1d1a      	adds	r2, r3, #4
 8025484:	607a      	str	r2, [r7, #4]
 8025486:	681b      	ldr	r3, [r3, #0]
 8025488:	61bb      	str	r3, [r7, #24]
					while (*arg)
 802548a:	e007      	b.n	802549c <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 802548c:	68fb      	ldr	r3, [r7, #12]
 802548e:	1c5a      	adds	r2, r3, #1
 8025490:	60fa      	str	r2, [r7, #12]
 8025492:	69ba      	ldr	r2, [r7, #24]
 8025494:	1c51      	adds	r1, r2, #1
 8025496:	61b9      	str	r1, [r7, #24]
 8025498:	7812      	ldrb	r2, [r2, #0]
 802549a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 802549c:	69bb      	ldr	r3, [r7, #24]
 802549e:	781b      	ldrb	r3, [r3, #0]
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	d1f3      	bne.n	802548c <ts_formatstring+0xa2>
					}
				}
				break;
 80254a4:	e01c      	b.n	80254e0 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80254a6:	687b      	ldr	r3, [r7, #4]
 80254a8:	1d1a      	adds	r2, r3, #4
 80254aa:	607a      	str	r2, [r7, #4]
 80254ac:	6819      	ldr	r1, [r3, #0]
 80254ae:	f107 030c 	add.w	r3, r7, #12
 80254b2:	220a      	movs	r2, #10
 80254b4:	4618      	mov	r0, r3
 80254b6:	f7ff ff4f 	bl	8025358 <ts_itoa>
				break;
 80254ba:	e011      	b.n	80254e0 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80254bc:	687b      	ldr	r3, [r7, #4]
 80254be:	1d1a      	adds	r2, r3, #4
 80254c0:	607a      	str	r2, [r7, #4]
 80254c2:	681b      	ldr	r3, [r3, #0]
 80254c4:	4619      	mov	r1, r3
 80254c6:	f107 030c 	add.w	r3, r7, #12
 80254ca:	2210      	movs	r2, #16
 80254cc:	4618      	mov	r0, r3
 80254ce:	f7ff ff43 	bl	8025358 <ts_itoa>
				break;
 80254d2:	e005      	b.n	80254e0 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80254d4:	68fb      	ldr	r3, [r7, #12]
 80254d6:	1c5a      	adds	r2, r3, #1
 80254d8:	60fa      	str	r2, [r7, #12]
 80254da:	2225      	movs	r2, #37	; 0x25
 80254dc:	701a      	strb	r2, [r3, #0]
				  break;
 80254de:	bf00      	nop
			}
			fmt++;
 80254e0:	68bb      	ldr	r3, [r7, #8]
 80254e2:	3301      	adds	r3, #1
 80254e4:	60bb      	str	r3, [r7, #8]
 80254e6:	e007      	b.n	80254f8 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80254e8:	68fb      	ldr	r3, [r7, #12]
 80254ea:	1c5a      	adds	r2, r3, #1
 80254ec:	60fa      	str	r2, [r7, #12]
 80254ee:	68ba      	ldr	r2, [r7, #8]
 80254f0:	1c51      	adds	r1, r2, #1
 80254f2:	60b9      	str	r1, [r7, #8]
 80254f4:	7812      	ldrb	r2, [r2, #0]
 80254f6:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80254f8:	68bb      	ldr	r3, [r7, #8]
 80254fa:	781b      	ldrb	r3, [r3, #0]
 80254fc:	2b00      	cmp	r3, #0
 80254fe:	f47f af7d 	bne.w	80253fc <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8025502:	68fb      	ldr	r3, [r7, #12]
 8025504:	2200      	movs	r2, #0
 8025506:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8025508:	68fb      	ldr	r3, [r7, #12]
 802550a:	461a      	mov	r2, r3
 802550c:	697b      	ldr	r3, [r7, #20]
 802550e:	1ad3      	subs	r3, r2, r3
}
 8025510:	4618      	mov	r0, r3
 8025512:	3720      	adds	r7, #32
 8025514:	46bd      	mov	sp, r7
 8025516:	bd80      	pop	{r7, pc}

08025518 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8025518:	b480      	push	{r7}
 802551a:	b085      	sub	sp, #20
 802551c:	af00      	add	r7, sp, #0
 802551e:	6078      	str	r0, [r7, #4]
 8025520:	6039      	str	r1, [r7, #0]
	int length = 0;
 8025522:	2300      	movs	r3, #0
 8025524:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8025526:	e081      	b.n	802562c <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8025528:	687b      	ldr	r3, [r7, #4]
 802552a:	781b      	ldrb	r3, [r3, #0]
 802552c:	2b25      	cmp	r3, #37	; 0x25
 802552e:	d177      	bne.n	8025620 <ts_formatlength+0x108>
		{
			++fmt;
 8025530:	687b      	ldr	r3, [r7, #4]
 8025532:	3301      	adds	r3, #1
 8025534:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8025536:	687b      	ldr	r3, [r7, #4]
 8025538:	781b      	ldrb	r3, [r3, #0]
 802553a:	3b58      	subs	r3, #88	; 0x58
 802553c:	2b20      	cmp	r3, #32
 802553e:	d86a      	bhi.n	8025616 <ts_formatlength+0xfe>
 8025540:	a201      	add	r2, pc, #4	; (adr r2, 8025548 <ts_formatlength+0x30>)
 8025542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025546:	bf00      	nop
 8025548:	08025609 	.word	0x08025609
 802554c:	08025617 	.word	0x08025617
 8025550:	08025617 	.word	0x08025617
 8025554:	08025617 	.word	0x08025617
 8025558:	08025617 	.word	0x08025617
 802555c:	08025617 	.word	0x08025617
 8025560:	08025617 	.word	0x08025617
 8025564:	08025617 	.word	0x08025617
 8025568:	08025617 	.word	0x08025617
 802556c:	08025617 	.word	0x08025617
 8025570:	08025617 	.word	0x08025617
 8025574:	080255cd 	.word	0x080255cd
 8025578:	080255db 	.word	0x080255db
 802557c:	08025617 	.word	0x08025617
 8025580:	08025617 	.word	0x08025617
 8025584:	08025617 	.word	0x08025617
 8025588:	08025617 	.word	0x08025617
 802558c:	080255db 	.word	0x080255db
 8025590:	08025617 	.word	0x08025617
 8025594:	08025617 	.word	0x08025617
 8025598:	08025617 	.word	0x08025617
 802559c:	08025617 	.word	0x08025617
 80255a0:	08025617 	.word	0x08025617
 80255a4:	08025617 	.word	0x08025617
 80255a8:	08025617 	.word	0x08025617
 80255ac:	08025617 	.word	0x08025617
 80255b0:	08025617 	.word	0x08025617
 80255b4:	080255e9 	.word	0x080255e9
 80255b8:	08025617 	.word	0x08025617
 80255bc:	080255db 	.word	0x080255db
 80255c0:	08025617 	.word	0x08025617
 80255c4:	08025617 	.word	0x08025617
 80255c8:	08025609 	.word	0x08025609
			{
			  case 'c':
		  		  va_arg(va, int);
 80255cc:	683b      	ldr	r3, [r7, #0]
 80255ce:	3304      	adds	r3, #4
 80255d0:	603b      	str	r3, [r7, #0]
				  ++length;
 80255d2:	68fb      	ldr	r3, [r7, #12]
 80255d4:	3301      	adds	r3, #1
 80255d6:	60fb      	str	r3, [r7, #12]
				  break;
 80255d8:	e025      	b.n	8025626 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80255da:	68fb      	ldr	r3, [r7, #12]
 80255dc:	330b      	adds	r3, #11
 80255de:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80255e0:	683b      	ldr	r3, [r7, #0]
 80255e2:	3304      	adds	r3, #4
 80255e4:	603b      	str	r3, [r7, #0]
				  break;
 80255e6:	e01e      	b.n	8025626 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80255e8:	683b      	ldr	r3, [r7, #0]
 80255ea:	1d1a      	adds	r2, r3, #4
 80255ec:	603a      	str	r2, [r7, #0]
 80255ee:	681b      	ldr	r3, [r3, #0]
 80255f0:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80255f2:	e002      	b.n	80255fa <ts_formatlength+0xe2>
			  			  ++length;
 80255f4:	68fb      	ldr	r3, [r7, #12]
 80255f6:	3301      	adds	r3, #1
 80255f8:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80255fa:	68bb      	ldr	r3, [r7, #8]
 80255fc:	1c5a      	adds	r2, r3, #1
 80255fe:	60ba      	str	r2, [r7, #8]
 8025600:	781b      	ldrb	r3, [r3, #0]
 8025602:	2b00      	cmp	r3, #0
 8025604:	d1f6      	bne.n	80255f4 <ts_formatlength+0xdc>
			  	  }
				  break;
 8025606:	e00e      	b.n	8025626 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8025608:	68fb      	ldr	r3, [r7, #12]
 802560a:	3308      	adds	r3, #8
 802560c:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 802560e:	683b      	ldr	r3, [r7, #0]
 8025610:	3304      	adds	r3, #4
 8025612:	603b      	str	r3, [r7, #0]
				  break;
 8025614:	e007      	b.n	8025626 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8025616:	68fb      	ldr	r3, [r7, #12]
 8025618:	3301      	adds	r3, #1
 802561a:	60fb      	str	r3, [r7, #12]
				  break;
 802561c:	bf00      	nop
 802561e:	e002      	b.n	8025626 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8025620:	68fb      	ldr	r3, [r7, #12]
 8025622:	3301      	adds	r3, #1
 8025624:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8025626:	687b      	ldr	r3, [r7, #4]
 8025628:	3301      	adds	r3, #1
 802562a:	607b      	str	r3, [r7, #4]
	while (*fmt)
 802562c:	687b      	ldr	r3, [r7, #4]
 802562e:	781b      	ldrb	r3, [r3, #0]
 8025630:	2b00      	cmp	r3, #0
 8025632:	f47f af79 	bne.w	8025528 <ts_formatlength+0x10>
	}
	return length;
 8025636:	68fb      	ldr	r3, [r7, #12]
}
 8025638:	4618      	mov	r0, r3
 802563a:	3714      	adds	r7, #20
 802563c:	46bd      	mov	sp, r7
 802563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025642:	4770      	bx	lr

08025644 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8025644:	b40e      	push	{r1, r2, r3}
 8025646:	b580      	push	{r7, lr}
 8025648:	b085      	sub	sp, #20
 802564a:	af00      	add	r7, sp, #0
 802564c:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 802564e:	f107 0320 	add.w	r3, r7, #32
 8025652:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8025654:	68ba      	ldr	r2, [r7, #8]
 8025656:	69f9      	ldr	r1, [r7, #28]
 8025658:	6878      	ldr	r0, [r7, #4]
 802565a:	f7ff fec6 	bl	80253ea <ts_formatstring>
 802565e:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8025660:	68fb      	ldr	r3, [r7, #12]
}
 8025662:	4618      	mov	r0, r3
 8025664:	3714      	adds	r7, #20
 8025666:	46bd      	mov	sp, r7
 8025668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802566c:	b003      	add	sp, #12
 802566e:	4770      	bx	lr

08025670 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8025670:	b40f      	push	{r0, r1, r2, r3}
 8025672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025676:	b085      	sub	sp, #20
 8025678:	af00      	add	r7, sp, #0
	int length = 0;
 802567a:	2300      	movs	r3, #0
 802567c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 802567e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025682:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8025684:	6839      	ldr	r1, [r7, #0]
 8025686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025688:	f7ff ff46 	bl	8025518 <ts_formatlength>
 802568c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 802568e:	466b      	mov	r3, sp
 8025690:	461e      	mov	r6, r3
		char buf[length];
 8025692:	68f9      	ldr	r1, [r7, #12]
 8025694:	1e4b      	subs	r3, r1, #1
 8025696:	60bb      	str	r3, [r7, #8]
 8025698:	460b      	mov	r3, r1
 802569a:	461a      	mov	r2, r3
 802569c:	f04f 0300 	mov.w	r3, #0
 80256a0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80256a4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80256a8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80256ac:	460b      	mov	r3, r1
 80256ae:	461a      	mov	r2, r3
 80256b0:	f04f 0300 	mov.w	r3, #0
 80256b4:	00dd      	lsls	r5, r3, #3
 80256b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80256ba:	00d4      	lsls	r4, r2, #3
 80256bc:	460b      	mov	r3, r1
 80256be:	3307      	adds	r3, #7
 80256c0:	08db      	lsrs	r3, r3, #3
 80256c2:	00db      	lsls	r3, r3, #3
 80256c4:	ebad 0d03 	sub.w	sp, sp, r3
 80256c8:	466b      	mov	r3, sp
 80256ca:	3300      	adds	r3, #0
 80256cc:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 80256ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80256d2:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 80256d4:	687b      	ldr	r3, [r7, #4]
 80256d6:	683a      	ldr	r2, [r7, #0]
 80256d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80256da:	4618      	mov	r0, r3
 80256dc:	f7ff fe85 	bl	80253ea <ts_formatstring>
 80256e0:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80256e2:	687b      	ldr	r3, [r7, #4]
 80256e4:	68fa      	ldr	r2, [r7, #12]
 80256e6:	4619      	mov	r1, r3
 80256e8:	2001      	movs	r0, #1
 80256ea:	f7ff fd1a 	bl	8025122 <_write>
 80256ee:	60f8      	str	r0, [r7, #12]
 80256f0:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80256f2:	68fb      	ldr	r3, [r7, #12]
}
 80256f4:	4618      	mov	r0, r3
 80256f6:	3714      	adds	r7, #20
 80256f8:	46bd      	mov	sp, r7
 80256fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80256fe:	b004      	add	sp, #16
 8025700:	4770      	bx	lr
	...

08025704 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8025704:	b580      	push	{r7, lr}
 8025706:	b086      	sub	sp, #24
 8025708:	af00      	add	r7, sp, #0
 802570a:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 802570c:	6878      	ldr	r0, [r7, #4]
 802570e:	f7ea fca1 	bl	8010054 <strlen>
 8025712:	4603      	mov	r3, r0
 8025714:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8025716:	2300      	movs	r3, #0
 8025718:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 802571a:	693a      	ldr	r2, [r7, #16]
 802571c:	6879      	ldr	r1, [r7, #4]
 802571e:	2001      	movs	r0, #1
 8025720:	f7ff fcff 	bl	8025122 <_write>
 8025724:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8025726:	2201      	movs	r2, #1
 8025728:	490b      	ldr	r1, [pc, #44]	; (8025758 <puts+0x54>)
 802572a:	2001      	movs	r0, #1
 802572c:	f7ff fcf9 	bl	8025122 <_write>
 8025730:	4602      	mov	r2, r0
 8025732:	68fb      	ldr	r3, [r7, #12]
 8025734:	4413      	add	r3, r2
 8025736:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8025738:	693b      	ldr	r3, [r7, #16]
 802573a:	1c5a      	adds	r2, r3, #1
 802573c:	68fb      	ldr	r3, [r7, #12]
 802573e:	429a      	cmp	r2, r3
 8025740:	d102      	bne.n	8025748 <puts+0x44>
	{
		res = 0;
 8025742:	2300      	movs	r3, #0
 8025744:	617b      	str	r3, [r7, #20]
 8025746:	e002      	b.n	802574e <puts+0x4a>
	}
	else
	{
		res = EOF;
 8025748:	f04f 33ff 	mov.w	r3, #4294967295
 802574c:	617b      	str	r3, [r7, #20]
	}

	return res;
 802574e:	697b      	ldr	r3, [r7, #20]
}
 8025750:	4618      	mov	r0, r3
 8025752:	3718      	adds	r7, #24
 8025754:	46bd      	mov	sp, r7
 8025756:	bd80      	pop	{r7, pc}
 8025758:	08028aa0 	.word	0x08028aa0

0802575c <MX_UART5_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 802575c:	b580      	push	{r7, lr}
 802575e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8025760:	4b11      	ldr	r3, [pc, #68]	; (80257a8 <MX_UART5_Init+0x4c>)
 8025762:	4a12      	ldr	r2, [pc, #72]	; (80257ac <MX_UART5_Init+0x50>)
 8025764:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 187500;
 8025766:	4b10      	ldr	r3, [pc, #64]	; (80257a8 <MX_UART5_Init+0x4c>)
 8025768:	4a11      	ldr	r2, [pc, #68]	; (80257b0 <MX_UART5_Init+0x54>)
 802576a:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 802576c:	4b0e      	ldr	r3, [pc, #56]	; (80257a8 <MX_UART5_Init+0x4c>)
 802576e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8025772:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8025774:	4b0c      	ldr	r3, [pc, #48]	; (80257a8 <MX_UART5_Init+0x4c>)
 8025776:	2200      	movs	r2, #0
 8025778:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 802577a:	4b0b      	ldr	r3, [pc, #44]	; (80257a8 <MX_UART5_Init+0x4c>)
 802577c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025780:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8025782:	4b09      	ldr	r3, [pc, #36]	; (80257a8 <MX_UART5_Init+0x4c>)
 8025784:	220c      	movs	r2, #12
 8025786:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8025788:	4b07      	ldr	r3, [pc, #28]	; (80257a8 <MX_UART5_Init+0x4c>)
 802578a:	2200      	movs	r2, #0
 802578c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 802578e:	4b06      	ldr	r3, [pc, #24]	; (80257a8 <MX_UART5_Init+0x4c>)
 8025790:	2200      	movs	r2, #0
 8025792:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8025794:	4804      	ldr	r0, [pc, #16]	; (80257a8 <MX_UART5_Init+0x4c>)
 8025796:	f7ee f935 	bl	8013a04 <HAL_UART_Init>
 802579a:	4603      	mov	r3, r0
 802579c:	2b00      	cmp	r3, #0
 802579e:	d001      	beq.n	80257a4 <MX_UART5_Init+0x48>
  {
    Error_Handler();
 80257a0:	f7ff f9e4 	bl	8024b6c <Error_Handler>
  }

}
 80257a4:	bf00      	nop
 80257a6:	bd80      	pop	{r7, pc}
 80257a8:	2000bed0 	.word	0x2000bed0
 80257ac:	40005000 	.word	0x40005000
 80257b0:	0002dc6c 	.word	0x0002dc6c

080257b4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80257b4:	b580      	push	{r7, lr}
 80257b6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80257b8:	4b11      	ldr	r3, [pc, #68]	; (8025800 <MX_USART1_UART_Init+0x4c>)
 80257ba:	4a12      	ldr	r2, [pc, #72]	; (8025804 <MX_USART1_UART_Init+0x50>)
 80257bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80257be:	4b10      	ldr	r3, [pc, #64]	; (8025800 <MX_USART1_UART_Init+0x4c>)
 80257c0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80257c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80257c6:	4b0e      	ldr	r3, [pc, #56]	; (8025800 <MX_USART1_UART_Init+0x4c>)
 80257c8:	2200      	movs	r2, #0
 80257ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80257cc:	4b0c      	ldr	r3, [pc, #48]	; (8025800 <MX_USART1_UART_Init+0x4c>)
 80257ce:	2200      	movs	r2, #0
 80257d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80257d2:	4b0b      	ldr	r3, [pc, #44]	; (8025800 <MX_USART1_UART_Init+0x4c>)
 80257d4:	2200      	movs	r2, #0
 80257d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80257d8:	4b09      	ldr	r3, [pc, #36]	; (8025800 <MX_USART1_UART_Init+0x4c>)
 80257da:	2208      	movs	r2, #8
 80257dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80257de:	4b08      	ldr	r3, [pc, #32]	; (8025800 <MX_USART1_UART_Init+0x4c>)
 80257e0:	2200      	movs	r2, #0
 80257e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80257e4:	4b06      	ldr	r3, [pc, #24]	; (8025800 <MX_USART1_UART_Init+0x4c>)
 80257e6:	2200      	movs	r2, #0
 80257e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80257ea:	4805      	ldr	r0, [pc, #20]	; (8025800 <MX_USART1_UART_Init+0x4c>)
 80257ec:	f7ee f90a 	bl	8013a04 <HAL_UART_Init>
 80257f0:	4603      	mov	r3, r0
 80257f2:	2b00      	cmp	r3, #0
 80257f4:	d001      	beq.n	80257fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80257f6:	f7ff f9b9 	bl	8024b6c <Error_Handler>
  }

}
 80257fa:	bf00      	nop
 80257fc:	bd80      	pop	{r7, pc}
 80257fe:	bf00      	nop
 8025800:	2000bf10 	.word	0x2000bf10
 8025804:	40011000 	.word	0x40011000

08025808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8025808:	b580      	push	{r7, lr}
 802580a:	b08c      	sub	sp, #48	; 0x30
 802580c:	af00      	add	r7, sp, #0
 802580e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025810:	f107 031c 	add.w	r3, r7, #28
 8025814:	2200      	movs	r2, #0
 8025816:	601a      	str	r2, [r3, #0]
 8025818:	605a      	str	r2, [r3, #4]
 802581a:	609a      	str	r2, [r3, #8]
 802581c:	60da      	str	r2, [r3, #12]
 802581e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8025820:	687b      	ldr	r3, [r7, #4]
 8025822:	681b      	ldr	r3, [r3, #0]
 8025824:	4a61      	ldr	r2, [pc, #388]	; (80259ac <HAL_UART_MspInit+0x1a4>)
 8025826:	4293      	cmp	r3, r2
 8025828:	d153      	bne.n	80258d2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 802582a:	2300      	movs	r3, #0
 802582c:	61bb      	str	r3, [r7, #24]
 802582e:	4a60      	ldr	r2, [pc, #384]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 8025830:	4b5f      	ldr	r3, [pc, #380]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 8025832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8025838:	6413      	str	r3, [r2, #64]	; 0x40
 802583a:	4b5d      	ldr	r3, [pc, #372]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 802583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802583e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025842:	61bb      	str	r3, [r7, #24]
 8025844:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025846:	2300      	movs	r3, #0
 8025848:	617b      	str	r3, [r7, #20]
 802584a:	4a59      	ldr	r2, [pc, #356]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 802584c:	4b58      	ldr	r3, [pc, #352]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 802584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025850:	f043 0304 	orr.w	r3, r3, #4
 8025854:	6313      	str	r3, [r2, #48]	; 0x30
 8025856:	4b56      	ldr	r3, [pc, #344]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 8025858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802585a:	f003 0304 	and.w	r3, r3, #4
 802585e:	617b      	str	r3, [r7, #20]
 8025860:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8025862:	2300      	movs	r3, #0
 8025864:	613b      	str	r3, [r7, #16]
 8025866:	4a52      	ldr	r2, [pc, #328]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 8025868:	4b51      	ldr	r3, [pc, #324]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 802586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802586c:	f043 0308 	orr.w	r3, r3, #8
 8025870:	6313      	str	r3, [r2, #48]	; 0x30
 8025872:	4b4f      	ldr	r3, [pc, #316]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 8025874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025876:	f003 0308 	and.w	r3, r3, #8
 802587a:	613b      	str	r3, [r7, #16]
 802587c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 802587e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8025882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025884:	2302      	movs	r3, #2
 8025886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8025888:	2301      	movs	r3, #1
 802588a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802588c:	2303      	movs	r3, #3
 802588e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8025890:	2308      	movs	r3, #8
 8025892:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025894:	f107 031c 	add.w	r3, r7, #28
 8025898:	4619      	mov	r1, r3
 802589a:	4846      	ldr	r0, [pc, #280]	; (80259b4 <HAL_UART_MspInit+0x1ac>)
 802589c:	f7ec fd88 	bl	80123b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80258a0:	2304      	movs	r3, #4
 80258a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80258a4:	2302      	movs	r3, #2
 80258a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80258a8:	2301      	movs	r3, #1
 80258aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80258ac:	2303      	movs	r3, #3
 80258ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80258b0:	2308      	movs	r3, #8
 80258b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80258b4:	f107 031c 	add.w	r3, r7, #28
 80258b8:	4619      	mov	r1, r3
 80258ba:	483f      	ldr	r0, [pc, #252]	; (80259b8 <HAL_UART_MspInit+0x1b0>)
 80258bc:	f7ec fd78 	bl	80123b0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80258c0:	2200      	movs	r2, #0
 80258c2:	2105      	movs	r1, #5
 80258c4:	2035      	movs	r0, #53	; 0x35
 80258c6:	f7ea fe85 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80258ca:	2035      	movs	r0, #53	; 0x35
 80258cc:	f7ea fe9e 	bl	801060c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80258d0:	e068      	b.n	80259a4 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART1)
 80258d2:	687b      	ldr	r3, [r7, #4]
 80258d4:	681b      	ldr	r3, [r3, #0]
 80258d6:	4a39      	ldr	r2, [pc, #228]	; (80259bc <HAL_UART_MspInit+0x1b4>)
 80258d8:	4293      	cmp	r3, r2
 80258da:	d163      	bne.n	80259a4 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART1_CLK_ENABLE();
 80258dc:	2300      	movs	r3, #0
 80258de:	60fb      	str	r3, [r7, #12]
 80258e0:	4a33      	ldr	r2, [pc, #204]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 80258e2:	4b33      	ldr	r3, [pc, #204]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 80258e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80258e6:	f043 0310 	orr.w	r3, r3, #16
 80258ea:	6453      	str	r3, [r2, #68]	; 0x44
 80258ec:	4b30      	ldr	r3, [pc, #192]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 80258ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80258f0:	f003 0310 	and.w	r3, r3, #16
 80258f4:	60fb      	str	r3, [r7, #12]
 80258f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80258f8:	2300      	movs	r3, #0
 80258fa:	60bb      	str	r3, [r7, #8]
 80258fc:	4a2c      	ldr	r2, [pc, #176]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 80258fe:	4b2c      	ldr	r3, [pc, #176]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 8025900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025902:	f043 0301 	orr.w	r3, r3, #1
 8025906:	6313      	str	r3, [r2, #48]	; 0x30
 8025908:	4b29      	ldr	r3, [pc, #164]	; (80259b0 <HAL_UART_MspInit+0x1a8>)
 802590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802590c:	f003 0301 	and.w	r3, r3, #1
 8025910:	60bb      	str	r3, [r7, #8]
 8025912:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8025914:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8025918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802591a:	2302      	movs	r3, #2
 802591c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802591e:	2301      	movs	r3, #1
 8025920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025922:	2303      	movs	r3, #3
 8025924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8025926:	2307      	movs	r3, #7
 8025928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802592a:	f107 031c 	add.w	r3, r7, #28
 802592e:	4619      	mov	r1, r3
 8025930:	4823      	ldr	r0, [pc, #140]	; (80259c0 <HAL_UART_MspInit+0x1b8>)
 8025932:	f7ec fd3d 	bl	80123b0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8025936:	4b23      	ldr	r3, [pc, #140]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 8025938:	4a23      	ldr	r2, [pc, #140]	; (80259c8 <HAL_UART_MspInit+0x1c0>)
 802593a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 802593c:	4b21      	ldr	r3, [pc, #132]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 802593e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025942:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8025944:	4b1f      	ldr	r3, [pc, #124]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 8025946:	2240      	movs	r2, #64	; 0x40
 8025948:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802594a:	4b1e      	ldr	r3, [pc, #120]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 802594c:	2200      	movs	r2, #0
 802594e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8025950:	4b1c      	ldr	r3, [pc, #112]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 8025952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025956:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8025958:	4b1a      	ldr	r3, [pc, #104]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 802595a:	2200      	movs	r2, #0
 802595c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802595e:	4b19      	ldr	r3, [pc, #100]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 8025960:	2200      	movs	r2, #0
 8025962:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8025964:	4b17      	ldr	r3, [pc, #92]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 8025966:	2200      	movs	r2, #0
 8025968:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802596a:	4b16      	ldr	r3, [pc, #88]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 802596c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8025970:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8025972:	4b14      	ldr	r3, [pc, #80]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 8025974:	2200      	movs	r2, #0
 8025976:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8025978:	4812      	ldr	r0, [pc, #72]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 802597a:	f7ea fe63 	bl	8010644 <HAL_DMA_Init>
 802597e:	4603      	mov	r3, r0
 8025980:	2b00      	cmp	r3, #0
 8025982:	d001      	beq.n	8025988 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8025984:	f7ff f8f2 	bl	8024b6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8025988:	687b      	ldr	r3, [r7, #4]
 802598a:	4a0e      	ldr	r2, [pc, #56]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 802598c:	631a      	str	r2, [r3, #48]	; 0x30
 802598e:	4a0d      	ldr	r2, [pc, #52]	; (80259c4 <HAL_UART_MspInit+0x1bc>)
 8025990:	687b      	ldr	r3, [r7, #4]
 8025992:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8025994:	2200      	movs	r2, #0
 8025996:	2105      	movs	r1, #5
 8025998:	2025      	movs	r0, #37	; 0x25
 802599a:	f7ea fe1b 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 802599e:	2025      	movs	r0, #37	; 0x25
 80259a0:	f7ea fe34 	bl	801060c <HAL_NVIC_EnableIRQ>
}
 80259a4:	bf00      	nop
 80259a6:	3730      	adds	r7, #48	; 0x30
 80259a8:	46bd      	mov	sp, r7
 80259aa:	bd80      	pop	{r7, pc}
 80259ac:	40005000 	.word	0x40005000
 80259b0:	40023800 	.word	0x40023800
 80259b4:	40020800 	.word	0x40020800
 80259b8:	40020c00 	.word	0x40020c00
 80259bc:	40011000 	.word	0x40011000
 80259c0:	40020000 	.word	0x40020000
 80259c4:	2000be70 	.word	0x2000be70
 80259c8:	400264b8 	.word	0x400264b8

080259cc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80259cc:	b580      	push	{r7, lr}
 80259ce:	b082      	sub	sp, #8
 80259d0:	af00      	add	r7, sp, #0
 80259d2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 80259d4:	687b      	ldr	r3, [r7, #4]
 80259d6:	681b      	ldr	r3, [r3, #0]
 80259d8:	4a18      	ldr	r2, [pc, #96]	; (8025a3c <HAL_UART_MspDeInit+0x70>)
 80259da:	4293      	cmp	r3, r2
 80259dc:	d112      	bne.n	8025a04 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 80259de:	4a18      	ldr	r2, [pc, #96]	; (8025a40 <HAL_UART_MspDeInit+0x74>)
 80259e0:	4b17      	ldr	r3, [pc, #92]	; (8025a40 <HAL_UART_MspDeInit+0x74>)
 80259e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80259e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80259e8:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 80259ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80259ee:	4815      	ldr	r0, [pc, #84]	; (8025a44 <HAL_UART_MspDeInit+0x78>)
 80259f0:	f7ec fe78 	bl	80126e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80259f4:	2104      	movs	r1, #4
 80259f6:	4814      	ldr	r0, [pc, #80]	; (8025a48 <HAL_UART_MspDeInit+0x7c>)
 80259f8:	f7ec fe74 	bl	80126e4 <HAL_GPIO_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80259fc:	2035      	movs	r0, #53	; 0x35
 80259fe:	f7ea fe13 	bl	8010628 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 8025a02:	e017      	b.n	8025a34 <HAL_UART_MspDeInit+0x68>
  else if(uartHandle->Instance==USART1)
 8025a04:	687b      	ldr	r3, [r7, #4]
 8025a06:	681b      	ldr	r3, [r3, #0]
 8025a08:	4a10      	ldr	r2, [pc, #64]	; (8025a4c <HAL_UART_MspDeInit+0x80>)
 8025a0a:	4293      	cmp	r3, r2
 8025a0c:	d112      	bne.n	8025a34 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART1_CLK_DISABLE();
 8025a0e:	4a0c      	ldr	r2, [pc, #48]	; (8025a40 <HAL_UART_MspDeInit+0x74>)
 8025a10:	4b0b      	ldr	r3, [pc, #44]	; (8025a40 <HAL_UART_MspDeInit+0x74>)
 8025a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025a14:	f023 0310 	bic.w	r3, r3, #16
 8025a18:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8025a1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8025a1e:	480c      	ldr	r0, [pc, #48]	; (8025a50 <HAL_UART_MspDeInit+0x84>)
 8025a20:	f7ec fe60 	bl	80126e4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8025a24:	687b      	ldr	r3, [r7, #4]
 8025a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a28:	4618      	mov	r0, r3
 8025a2a:	f7ea feb9 	bl	80107a0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8025a2e:	2025      	movs	r0, #37	; 0x25
 8025a30:	f7ea fdfa 	bl	8010628 <HAL_NVIC_DisableIRQ>
} 
 8025a34:	bf00      	nop
 8025a36:	3708      	adds	r7, #8
 8025a38:	46bd      	mov	sp, r7
 8025a3a:	bd80      	pop	{r7, pc}
 8025a3c:	40005000 	.word	0x40005000
 8025a40:	40023800 	.word	0x40023800
 8025a44:	40020800 	.word	0x40020800
 8025a48:	40020c00 	.word	0x40020c00
 8025a4c:	40011000 	.word	0x40011000
 8025a50:	40020000 	.word	0x40020000

08025a54 <read_param>:
extern UART_HandleTypeDef huart5;

static void form_data_parser(char * in_buf);
static uint read_param(char * out_buf, const char * const in_buf, const uint max_len);

static uint read_param(char * out_buf, const char * const  in_buf, const uint max_len){
 8025a54:	b480      	push	{r7}
 8025a56:	b087      	sub	sp, #28
 8025a58:	af00      	add	r7, sp, #0
 8025a5a:	60f8      	str	r0, [r7, #12]
 8025a5c:	60b9      	str	r1, [r7, #8]
 8025a5e:	607a      	str	r2, [r7, #4]
	const char* tmp_p =  in_buf;
 8025a60:	68bb      	ldr	r3, [r7, #8]
 8025a62:	617b      	str	r3, [r7, #20]
	uint len = 0;
 8025a64:	2300      	movs	r3, #0
 8025a66:	613b      	str	r3, [r7, #16]
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 8025a68:	e00b      	b.n	8025a82 <read_param+0x2e>
		*out_buf++ = *tmp_p;
 8025a6a:	68fb      	ldr	r3, [r7, #12]
 8025a6c:	1c5a      	adds	r2, r3, #1
 8025a6e:	60fa      	str	r2, [r7, #12]
 8025a70:	697a      	ldr	r2, [r7, #20]
 8025a72:	7812      	ldrb	r2, [r2, #0]
 8025a74:	701a      	strb	r2, [r3, #0]
		len++;
 8025a76:	693b      	ldr	r3, [r7, #16]
 8025a78:	3301      	adds	r3, #1
 8025a7a:	613b      	str	r3, [r7, #16]
		tmp_p++;
 8025a7c:	697b      	ldr	r3, [r7, #20]
 8025a7e:	3301      	adds	r3, #1
 8025a80:	617b      	str	r3, [r7, #20]
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 8025a82:	697b      	ldr	r3, [r7, #20]
 8025a84:	781b      	ldrb	r3, [r3, #0]
 8025a86:	2b20      	cmp	r3, #32
 8025a88:	d007      	beq.n	8025a9a <read_param+0x46>
 8025a8a:	697b      	ldr	r3, [r7, #20]
 8025a8c:	781b      	ldrb	r3, [r3, #0]
 8025a8e:	2b26      	cmp	r3, #38	; 0x26
 8025a90:	d003      	beq.n	8025a9a <read_param+0x46>
 8025a92:	693a      	ldr	r2, [r7, #16]
 8025a94:	687b      	ldr	r3, [r7, #4]
 8025a96:	429a      	cmp	r2, r3
 8025a98:	d9e7      	bls.n	8025a6a <read_param+0x16>
	}
	return len;
 8025a9a:	693b      	ldr	r3, [r7, #16]
}
 8025a9c:	4618      	mov	r0, r3
 8025a9e:	371c      	adds	r7, #28
 8025aa0:	46bd      	mov	sp, r7
 8025aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025aa6:	4770      	bx	lr

08025aa8 <form_data_parser>:



static void form_data_parser(char * in_buf) {
 8025aa8:	b580      	push	{r7, lr}
 8025aaa:	b08a      	sub	sp, #40	; 0x28
 8025aac:	af00      	add	r7, sp, #0
 8025aae:	6078      	str	r0, [r7, #4]
	char par_str[16];
	uint par_len;
	uint baudrate = 0;
 8025ab0:	2300      	movs	r3, #0
 8025ab2:	627b      	str	r3, [r7, #36]	; 0x24
	while (*in_buf != ' ') {
 8025ab4:	e07d      	b.n	8025bb2 <form_data_parser+0x10a>
		if (*in_buf == '&') {
 8025ab6:	687b      	ldr	r3, [r7, #4]
 8025ab8:	781b      	ldrb	r3, [r3, #0]
 8025aba:	2b26      	cmp	r3, #38	; 0x26
 8025abc:	d102      	bne.n	8025ac4 <form_data_parser+0x1c>
			in_buf++;
 8025abe:	687b      	ldr	r3, [r7, #4]
 8025ac0:	3301      	adds	r3, #1
 8025ac2:	607b      	str	r3, [r7, #4]
		}
		int param_num = atoi(in_buf);
 8025ac4:	6878      	ldr	r0, [r7, #4]
 8025ac6:	f000 fa34 	bl	8025f32 <atoi>
 8025aca:	6238      	str	r0, [r7, #32]
		if (param_num < 9){
 8025acc:	6a3b      	ldr	r3, [r7, #32]
 8025ace:	2b08      	cmp	r3, #8
 8025ad0:	dc03      	bgt.n	8025ada <form_data_parser+0x32>
			in_buf += 2;
 8025ad2:	687b      	ldr	r3, [r7, #4]
 8025ad4:	3302      	adds	r3, #2
 8025ad6:	607b      	str	r3, [r7, #4]
 8025ad8:	e002      	b.n	8025ae0 <form_data_parser+0x38>
		} else {
			in_buf += 3;
 8025ada:	687b      	ldr	r3, [r7, #4]
 8025adc:	3303      	adds	r3, #3
 8025ade:	607b      	str	r3, [r7, #4]
		}
		switch(param_num){
 8025ae0:	6a3b      	ldr	r3, [r7, #32]
 8025ae2:	2b01      	cmp	r3, #1
 8025ae4:	d002      	beq.n	8025aec <form_data_parser+0x44>
 8025ae6:	2b02      	cmp	r3, #2
 8025ae8:	d02e      	beq.n	8025b48 <form_data_parser+0xa0>
 8025aea:	e062      	b.n	8025bb2 <form_data_parser+0x10a>
		case 1:                                        //IP-address
			par_len = read_param(par_str,in_buf,15);
 8025aec:	f107 030c 	add.w	r3, r7, #12
 8025af0:	220f      	movs	r2, #15
 8025af2:	6879      	ldr	r1, [r7, #4]
 8025af4:	4618      	mov	r0, r3
 8025af6:	f7ff ffad 	bl	8025a54 <read_param>
 8025afa:	61f8      	str	r0, [r7, #28]
			par_str[par_len] = '\0';
 8025afc:	f107 020c 	add.w	r2, r7, #12
 8025b00:	69fb      	ldr	r3, [r7, #28]
 8025b02:	4413      	add	r3, r2
 8025b04:	2200      	movs	r2, #0
 8025b06:	701a      	strb	r2, [r3, #0]
			ip4_addr_t new_ip;
			ipaddr_aton(par_str,&new_ip);
 8025b08:	f107 0208 	add.w	r2, r7, #8
 8025b0c:	f107 030c 	add.w	r3, r7, #12
 8025b10:	4611      	mov	r1, r2
 8025b12:	4618      	mov	r0, r3
 8025b14:	f7f4 ffba 	bl	801aa8c <ip4addr_aton>
			EE_WriteVariable(IP_02_01_ADDR,(uint16_t)(new_ip.addr & 0x0000FFFF));
 8025b18:	68bb      	ldr	r3, [r7, #8]
 8025b1a:	b29b      	uxth	r3, r3
 8025b1c:	4619      	mov	r1, r3
 8025b1e:	2001      	movs	r0, #1
 8025b20:	f7fd ff62 	bl	80239e8 <EE_WriteVariable>
			EE_WriteVariable(IP_04_03_ADDR,(uint16_t)((new_ip.addr >> 16) & 0x0000FFFF));
 8025b24:	68bb      	ldr	r3, [r7, #8]
 8025b26:	0c1b      	lsrs	r3, r3, #16
 8025b28:	b29b      	uxth	r3, r3
 8025b2a:	4619      	mov	r1, r3
 8025b2c:	2002      	movs	r0, #2
 8025b2e:	f7fd ff5b 	bl	80239e8 <EE_WriteVariable>
			netif_set_ipaddr(&gnetif,&new_ip);
 8025b32:	f107 0308 	add.w	r3, r7, #8
 8025b36:	4619      	mov	r1, r3
 8025b38:	4822      	ldr	r0, [pc, #136]	; (8025bc4 <form_data_parser+0x11c>)
 8025b3a:	f7f6 fbf5 	bl	801c328 <netif_set_ipaddr>
			in_buf += par_len;
 8025b3e:	687a      	ldr	r2, [r7, #4]
 8025b40:	69fb      	ldr	r3, [r7, #28]
 8025b42:	4413      	add	r3, r2
 8025b44:	607b      	str	r3, [r7, #4]
			break;
 8025b46:	e034      	b.n	8025bb2 <form_data_parser+0x10a>
		case 2:                                       //Baudrate
			par_len = read_param(par_str,in_buf,15);
 8025b48:	f107 030c 	add.w	r3, r7, #12
 8025b4c:	220f      	movs	r2, #15
 8025b4e:	6879      	ldr	r1, [r7, #4]
 8025b50:	4618      	mov	r0, r3
 8025b52:	f7ff ff7f 	bl	8025a54 <read_param>
 8025b56:	61f8      	str	r0, [r7, #28]
			par_str[par_len] = '\0';
 8025b58:	f107 020c 	add.w	r2, r7, #12
 8025b5c:	69fb      	ldr	r3, [r7, #28]
 8025b5e:	4413      	add	r3, r2
 8025b60:	2200      	movs	r2, #0
 8025b62:	701a      	strb	r2, [r3, #0]
			baudrate = atoi(par_str);
 8025b64:	f107 030c 	add.w	r3, r7, #12
 8025b68:	4618      	mov	r0, r3
 8025b6a:	f000 f9e2 	bl	8025f32 <atoi>
 8025b6e:	4603      	mov	r3, r0
 8025b70:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_UART_DeInit(&huart5);
 8025b72:	4815      	ldr	r0, [pc, #84]	; (8025bc8 <form_data_parser+0x120>)
 8025b74:	f7ed ff93 	bl	8013a9e <HAL_UART_DeInit>
			huart5.Init.BaudRate = baudrate;
 8025b78:	4a13      	ldr	r2, [pc, #76]	; (8025bc8 <form_data_parser+0x120>)
 8025b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b7c:	6053      	str	r3, [r2, #4]
			EE_WriteVariable(BR_LS_ADDR,(uint16_t)(baudrate & 0x0000FFFF));
 8025b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b80:	b29b      	uxth	r3, r3
 8025b82:	4619      	mov	r1, r3
 8025b84:	2004      	movs	r0, #4
 8025b86:	f7fd ff2f 	bl	80239e8 <EE_WriteVariable>
			EE_WriteVariable(BR_MS_ADDR,(uint16_t)((baudrate >> 16) & 0x0000FFFF));
 8025b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b8c:	0c1b      	lsrs	r3, r3, #16
 8025b8e:	b29b      	uxth	r3, r3
 8025b90:	4619      	mov	r1, r3
 8025b92:	2003      	movs	r0, #3
 8025b94:	f7fd ff28 	bl	80239e8 <EE_WriteVariable>
			if (HAL_UART_Init(&huart5) != HAL_OK)
 8025b98:	480b      	ldr	r0, [pc, #44]	; (8025bc8 <form_data_parser+0x120>)
 8025b9a:	f7ed ff33 	bl	8013a04 <HAL_UART_Init>
 8025b9e:	4603      	mov	r3, r0
 8025ba0:	2b00      	cmp	r3, #0
 8025ba2:	d001      	beq.n	8025ba8 <form_data_parser+0x100>
			{
			   Error_Handler();
 8025ba4:	f7fe ffe2 	bl	8024b6c <Error_Handler>
			}
			in_buf += par_len;
 8025ba8:	687a      	ldr	r2, [r7, #4]
 8025baa:	69fb      	ldr	r3, [r7, #28]
 8025bac:	4413      	add	r3, r2
 8025bae:	607b      	str	r3, [r7, #4]
			break;
 8025bb0:	bf00      	nop
	while (*in_buf != ' ') {
 8025bb2:	687b      	ldr	r3, [r7, #4]
 8025bb4:	781b      	ldrb	r3, [r3, #0]
 8025bb6:	2b20      	cmp	r3, #32
 8025bb8:	f47f af7d 	bne.w	8025ab6 <form_data_parser+0xe>
		}
	}
}
 8025bbc:	bf00      	nop
 8025bbe:	3728      	adds	r7, #40	; 0x28
 8025bc0:	46bd      	mov	sp, r7
 8025bc2:	bd80      	pop	{r7, pc}
 8025bc4:	2000bd58 	.word	0x2000bd58
 8025bc8:	2000bed0 	.word	0x2000bed0

08025bcc <web_server_thread>:

void web_server_thread(void *arg) {
 8025bcc:	b590      	push	{r4, r7, lr}
 8025bce:	b091      	sub	sp, #68	; 0x44
 8025bd0:	af02      	add	r7, sp, #8
 8025bd2:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	struct netbuf *inbuf;
	struct netconn *newconn;
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
 8025bd4:	687b      	ldr	r3, [r7, #4]
 8025bd6:	637b      	str	r3, [r7, #52]	; 0x34
	u16_t buflen;
	char* buf;
	struct fs_file file;

	printf("Net task created.\n");
 8025bd8:	48a9      	ldr	r0, [pc, #676]	; (8025e80 <web_server_thread+0x2b4>)
 8025bda:	f7ff fd93 	bl	8025704 <puts>
	osDelay(1);
 8025bde:	2001      	movs	r0, #1
 8025be0:	f7ee fd88 	bl	80146f4 <osDelay>
	for (;;) {
		err = netconn_accept(arg_conn, &newconn);
 8025be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025be8:	4619      	mov	r1, r3
 8025bea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025bec:	f7f1 fade 	bl	80171ac <netconn_accept>
 8025bf0:	4603      	mov	r3, r0
 8025bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (err == ERR_OK) {
 8025bf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8025bfa:	2b00      	cmp	r3, #0
 8025bfc:	d1f2      	bne.n	8025be4 <web_server_thread+0x18>
			printf("Accept.\n");
 8025bfe:	48a1      	ldr	r0, [pc, #644]	; (8025e84 <web_server_thread+0x2b8>)
 8025c00:	f7ff fd80 	bl	8025704 <puts>
			recv_err = netconn_recv(newconn, &inbuf);
 8025c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c06:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8025c0a:	4611      	mov	r1, r2
 8025c0c:	4618      	mov	r0, r3
 8025c0e:	f7f1 fc1b 	bl	8017448 <netconn_recv>
 8025c12:	4603      	mov	r3, r0
 8025c14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			if (recv_err == ERR_OK) {
 8025c18:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8025c1c:	2b00      	cmp	r3, #0
 8025c1e:	f040 8122 	bne.w	8025e66 <web_server_thread+0x29a>
				if (netconn_err(newconn) == ERR_OK) {
 8025c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c24:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8025c28:	2b00      	cmp	r3, #0
 8025c2a:	f040 811c 	bne.w	8025e66 <web_server_thread+0x29a>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 8025c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025c30:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8025c34:	f107 0120 	add.w	r1, r7, #32
 8025c38:	4618      	mov	r0, r3
 8025c3a:	f7f3 f985 	bl	8018f48 <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 8025c3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8025c40:	2b04      	cmp	r3, #4
 8025c42:	f240 8110 	bls.w	8025e66 <web_server_thread+0x29a>
 8025c46:	6a3b      	ldr	r3, [r7, #32]
 8025c48:	2205      	movs	r2, #5
 8025c4a:	498f      	ldr	r1, [pc, #572]	; (8025e88 <web_server_thread+0x2bc>)
 8025c4c:	4618      	mov	r0, r3
 8025c4e:	f000 f9dd 	bl	802600c <strncmp>
 8025c52:	4603      	mov	r3, r0
 8025c54:	2b00      	cmp	r3, #0
 8025c56:	f040 8106 	bne.w	8025e66 <web_server_thread+0x29a>
						buf += 5;
 8025c5a:	6a3b      	ldr	r3, [r7, #32]
 8025c5c:	3305      	adds	r3, #5
 8025c5e:	623b      	str	r3, [r7, #32]
						if ((strncmp((char const *) buf, " ", 1) == 0)
 8025c60:	6a3b      	ldr	r3, [r7, #32]
 8025c62:	781a      	ldrb	r2, [r3, #0]
 8025c64:	4b89      	ldr	r3, [pc, #548]	; (8025e8c <web_server_thread+0x2c0>)
 8025c66:	781b      	ldrb	r3, [r3, #0]
 8025c68:	429a      	cmp	r2, r3
 8025c6a:	d008      	beq.n	8025c7e <web_server_thread+0xb2>
								|| (strncmp((char const *) buf, "index.shtml",
 8025c6c:	6a3b      	ldr	r3, [r7, #32]
 8025c6e:	220b      	movs	r2, #11
 8025c70:	4987      	ldr	r1, [pc, #540]	; (8025e90 <web_server_thread+0x2c4>)
 8025c72:	4618      	mov	r0, r3
 8025c74:	f000 f9ca 	bl	802600c <strncmp>
 8025c78:	4603      	mov	r3, r0
 8025c7a:	2b00      	cmp	r3, #0
 8025c7c:	d114      	bne.n	8025ca8 <web_server_thread+0xdc>
										11) == 0)) {
							fs_open(&file, "/index.shtml");
 8025c7e:	f107 030c 	add.w	r3, r7, #12
 8025c82:	4984      	ldr	r1, [pc, #528]	; (8025e94 <web_server_thread+0x2c8>)
 8025c84:	4618      	mov	r0, r3
 8025c86:	f7f3 fb1f 	bl	80192c8 <fs_open>
							netconn_write(newconn,
 8025c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025c8c:	68f9      	ldr	r1, [r7, #12]
 8025c8e:	693b      	ldr	r3, [r7, #16]
 8025c90:	461a      	mov	r2, r3
 8025c92:	2300      	movs	r3, #0
 8025c94:	9300      	str	r3, [sp, #0]
 8025c96:	2300      	movs	r3, #0
 8025c98:	f7f1 fc4e 	bl	8017538 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8025c9c:	f107 030c 	add.w	r3, r7, #12
 8025ca0:	4618      	mov	r0, r3
 8025ca2:	f7f3 fb4f 	bl	8019344 <fs_close>
 8025ca6:	e0de      	b.n	8025e66 <web_server_thread+0x29a>
						} else if (strncmp((char const *) buf, "img/logo.png",
 8025ca8:	6a3b      	ldr	r3, [r7, #32]
 8025caa:	220c      	movs	r2, #12
 8025cac:	497a      	ldr	r1, [pc, #488]	; (8025e98 <web_server_thread+0x2cc>)
 8025cae:	4618      	mov	r0, r3
 8025cb0:	f000 f9ac 	bl	802600c <strncmp>
 8025cb4:	4603      	mov	r3, r0
 8025cb6:	2b00      	cmp	r3, #0
 8025cb8:	d114      	bne.n	8025ce4 <web_server_thread+0x118>
								12) == 0) {
							fs_open(&file, "/img/logo.png");
 8025cba:	f107 030c 	add.w	r3, r7, #12
 8025cbe:	4977      	ldr	r1, [pc, #476]	; (8025e9c <web_server_thread+0x2d0>)
 8025cc0:	4618      	mov	r0, r3
 8025cc2:	f7f3 fb01 	bl	80192c8 <fs_open>
							netconn_write(newconn,
 8025cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025cc8:	68f9      	ldr	r1, [r7, #12]
 8025cca:	693b      	ldr	r3, [r7, #16]
 8025ccc:	461a      	mov	r2, r3
 8025cce:	2300      	movs	r3, #0
 8025cd0:	9300      	str	r3, [sp, #0]
 8025cd2:	2300      	movs	r3, #0
 8025cd4:	f7f1 fc30 	bl	8017538 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8025cd8:	f107 030c 	add.w	r3, r7, #12
 8025cdc:	4618      	mov	r0, r3
 8025cde:	f7f3 fb31 	bl	8019344 <fs_close>
 8025ce2:	e0c0      	b.n	8025e66 <web_server_thread+0x29a>
						} else if (strncmp((char const *) buf, "img/icon.png",
 8025ce4:	6a3b      	ldr	r3, [r7, #32]
 8025ce6:	220c      	movs	r2, #12
 8025ce8:	496d      	ldr	r1, [pc, #436]	; (8025ea0 <web_server_thread+0x2d4>)
 8025cea:	4618      	mov	r0, r3
 8025cec:	f000 f98e 	bl	802600c <strncmp>
 8025cf0:	4603      	mov	r3, r0
 8025cf2:	2b00      	cmp	r3, #0
 8025cf4:	d114      	bne.n	8025d20 <web_server_thread+0x154>
								12) == 0) {
							fs_open(&file, "/img/icon.png");
 8025cf6:	f107 030c 	add.w	r3, r7, #12
 8025cfa:	496a      	ldr	r1, [pc, #424]	; (8025ea4 <web_server_thread+0x2d8>)
 8025cfc:	4618      	mov	r0, r3
 8025cfe:	f7f3 fae3 	bl	80192c8 <fs_open>
							netconn_write(newconn,
 8025d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025d04:	68f9      	ldr	r1, [r7, #12]
 8025d06:	693b      	ldr	r3, [r7, #16]
 8025d08:	461a      	mov	r2, r3
 8025d0a:	2300      	movs	r3, #0
 8025d0c:	9300      	str	r3, [sp, #0]
 8025d0e:	2300      	movs	r3, #0
 8025d10:	f7f1 fc12 	bl	8017538 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8025d14:	f107 030c 	add.w	r3, r7, #12
 8025d18:	4618      	mov	r0, r3
 8025d1a:	f7f3 fb13 	bl	8019344 <fs_close>
 8025d1e:	e0a2      	b.n	8025e66 <web_server_thread+0x29a>
						} else if (strncmp((char const *) buf, "style.css", 9)
 8025d20:	6a3b      	ldr	r3, [r7, #32]
 8025d22:	2209      	movs	r2, #9
 8025d24:	4960      	ldr	r1, [pc, #384]	; (8025ea8 <web_server_thread+0x2dc>)
 8025d26:	4618      	mov	r0, r3
 8025d28:	f000 f970 	bl	802600c <strncmp>
 8025d2c:	4603      	mov	r3, r0
 8025d2e:	2b00      	cmp	r3, #0
 8025d30:	d114      	bne.n	8025d5c <web_server_thread+0x190>
								== 0) {
							fs_open(&file, "/style.css");
 8025d32:	f107 030c 	add.w	r3, r7, #12
 8025d36:	495d      	ldr	r1, [pc, #372]	; (8025eac <web_server_thread+0x2e0>)
 8025d38:	4618      	mov	r0, r3
 8025d3a:	f7f3 fac5 	bl	80192c8 <fs_open>
							netconn_write(newconn,
 8025d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025d40:	68f9      	ldr	r1, [r7, #12]
 8025d42:	693b      	ldr	r3, [r7, #16]
 8025d44:	461a      	mov	r2, r3
 8025d46:	2300      	movs	r3, #0
 8025d48:	9300      	str	r3, [sp, #0]
 8025d4a:	2300      	movs	r3, #0
 8025d4c:	f7f1 fbf4 	bl	8017538 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8025d50:	f107 030c 	add.w	r3, r7, #12
 8025d54:	4618      	mov	r0, r3
 8025d56:	f7f3 faf5 	bl	8019344 <fs_close>
 8025d5a:	e084      	b.n	8025e66 <web_server_thread+0x29a>
						} else if (strncmp((char const *) buf, "AI.shtml?led=1",
 8025d5c:	6a3b      	ldr	r3, [r7, #32]
 8025d5e:	220e      	movs	r2, #14
 8025d60:	4953      	ldr	r1, [pc, #332]	; (8025eb0 <web_server_thread+0x2e4>)
 8025d62:	4618      	mov	r0, r3
 8025d64:	f000 f952 	bl	802600c <strncmp>
 8025d68:	4603      	mov	r3, r0
 8025d6a:	2b00      	cmp	r3, #0
 8025d6c:	d105      	bne.n	8025d7a <web_server_thread+0x1ae>
								14) == 0) {
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8025d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8025d72:	4850      	ldr	r0, [pc, #320]	; (8025eb4 <web_server_thread+0x2e8>)
 8025d74:	f7ec fdcb 	bl	801290e <HAL_GPIO_TogglePin>
 8025d78:	e075      	b.n	8025e66 <web_server_thread+0x29a>
						} else if (strncmp((char const *) buf, "AI.shtml?IP=",
 8025d7a:	6a3b      	ldr	r3, [r7, #32]
 8025d7c:	220c      	movs	r2, #12
 8025d7e:	494e      	ldr	r1, [pc, #312]	; (8025eb8 <web_server_thread+0x2ec>)
 8025d80:	4618      	mov	r0, r3
 8025d82:	f000 f943 	bl	802600c <strncmp>
 8025d86:	4603      	mov	r3, r0
 8025d88:	2b00      	cmp	r3, #0
 8025d8a:	d115      	bne.n	8025db8 <web_server_thread+0x1ec>
								12) == 0) {
							sprintf(PAGE_BODY, "%s%s", PAGE_HEADER,
 8025d8c:	484b      	ldr	r0, [pc, #300]	; (8025ebc <web_server_thread+0x2f0>)
 8025d8e:	f7f4 ffbd 	bl	801ad0c <ip4addr_ntoa>
 8025d92:	4603      	mov	r3, r0
 8025d94:	4a4a      	ldr	r2, [pc, #296]	; (8025ec0 <web_server_thread+0x2f4>)
 8025d96:	494b      	ldr	r1, [pc, #300]	; (8025ec4 <web_server_thread+0x2f8>)
 8025d98:	484b      	ldr	r0, [pc, #300]	; (8025ec8 <web_server_thread+0x2fc>)
 8025d9a:	f7ff fc53 	bl	8025644 <siprintf>
									ip4addr_ntoa(&gnetif.ip_addr));
							netconn_write(newconn, PAGE_BODY,
 8025d9e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8025da0:	4849      	ldr	r0, [pc, #292]	; (8025ec8 <web_server_thread+0x2fc>)
 8025da2:	f7ea f957 	bl	8010054 <strlen>
 8025da6:	4602      	mov	r2, r0
 8025da8:	2300      	movs	r3, #0
 8025daa:	9300      	str	r3, [sp, #0]
 8025dac:	2301      	movs	r3, #1
 8025dae:	4946      	ldr	r1, [pc, #280]	; (8025ec8 <web_server_thread+0x2fc>)
 8025db0:	4620      	mov	r0, r4
 8025db2:	f7f1 fbc1 	bl	8017538 <netconn_write_partly>
 8025db6:	e056      	b.n	8025e66 <web_server_thread+0x29a>
									strlen((char* )PAGE_BODY), NETCONN_COPY);
						} else if (strncmp((char const *) buf, "AI.shtml?BR=",
 8025db8:	6a3b      	ldr	r3, [r7, #32]
 8025dba:	220c      	movs	r2, #12
 8025dbc:	4943      	ldr	r1, [pc, #268]	; (8025ecc <web_server_thread+0x300>)
 8025dbe:	4618      	mov	r0, r3
 8025dc0:	f000 f924 	bl	802600c <strncmp>
 8025dc4:	4603      	mov	r3, r0
 8025dc6:	2b00      	cmp	r3, #0
 8025dc8:	d113      	bne.n	8025df2 <web_server_thread+0x226>
								12) == 0) {

							sprintf(PAGE_BODY, "%s%u", PAGE_HEADER,(uint)huart5.Init.BaudRate);
 8025dca:	4b41      	ldr	r3, [pc, #260]	; (8025ed0 <web_server_thread+0x304>)
 8025dcc:	685b      	ldr	r3, [r3, #4]
 8025dce:	4a3c      	ldr	r2, [pc, #240]	; (8025ec0 <web_server_thread+0x2f4>)
 8025dd0:	4940      	ldr	r1, [pc, #256]	; (8025ed4 <web_server_thread+0x308>)
 8025dd2:	483d      	ldr	r0, [pc, #244]	; (8025ec8 <web_server_thread+0x2fc>)
 8025dd4:	f7ff fc36 	bl	8025644 <siprintf>
							netconn_write(newconn, PAGE_BODY,
 8025dd8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8025dda:	483b      	ldr	r0, [pc, #236]	; (8025ec8 <web_server_thread+0x2fc>)
 8025ddc:	f7ea f93a 	bl	8010054 <strlen>
 8025de0:	4602      	mov	r2, r0
 8025de2:	2300      	movs	r3, #0
 8025de4:	9300      	str	r3, [sp, #0]
 8025de6:	2301      	movs	r3, #1
 8025de8:	4937      	ldr	r1, [pc, #220]	; (8025ec8 <web_server_thread+0x2fc>)
 8025dea:	4620      	mov	r0, r4
 8025dec:	f7f1 fba4 	bl	8017538 <netconn_write_partly>
 8025df0:	e039      	b.n	8025e66 <web_server_thread+0x29a>
									strlen((char* )PAGE_BODY), NETCONN_COPY);
						} else if (*buf == '?') {
 8025df2:	6a3b      	ldr	r3, [r7, #32]
 8025df4:	781b      	ldrb	r3, [r3, #0]
 8025df6:	2b3f      	cmp	r3, #63	; 0x3f
 8025df8:	d11b      	bne.n	8025e32 <web_server_thread+0x266>
							form_data_parser(++buf);
 8025dfa:	6a3b      	ldr	r3, [r7, #32]
 8025dfc:	3301      	adds	r3, #1
 8025dfe:	623b      	str	r3, [r7, #32]
 8025e00:	6a3b      	ldr	r3, [r7, #32]
 8025e02:	4618      	mov	r0, r3
 8025e04:	f7ff fe50 	bl	8025aa8 <form_data_parser>
							fs_open(&file, "/index.shtml");
 8025e08:	f107 030c 	add.w	r3, r7, #12
 8025e0c:	4921      	ldr	r1, [pc, #132]	; (8025e94 <web_server_thread+0x2c8>)
 8025e0e:	4618      	mov	r0, r3
 8025e10:	f7f3 fa5a 	bl	80192c8 <fs_open>
							netconn_write(newconn,
 8025e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025e16:	68f9      	ldr	r1, [r7, #12]
 8025e18:	693b      	ldr	r3, [r7, #16]
 8025e1a:	461a      	mov	r2, r3
 8025e1c:	2300      	movs	r3, #0
 8025e1e:	9300      	str	r3, [sp, #0]
 8025e20:	2300      	movs	r3, #0
 8025e22:	f7f1 fb89 	bl	8017538 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8025e26:	f107 030c 	add.w	r3, r7, #12
 8025e2a:	4618      	mov	r0, r3
 8025e2c:	f7f3 fa8a 	bl	8019344 <fs_close>
 8025e30:	e019      	b.n	8025e66 <web_server_thread+0x29a>
						} else {
							fs_open(&file, "/404.html");
 8025e32:	f107 030c 	add.w	r3, r7, #12
 8025e36:	4928      	ldr	r1, [pc, #160]	; (8025ed8 <web_server_thread+0x30c>)
 8025e38:	4618      	mov	r0, r3
 8025e3a:	f7f3 fa45 	bl	80192c8 <fs_open>
							netconn_write(newconn,
 8025e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025e40:	68f9      	ldr	r1, [r7, #12]
 8025e42:	693b      	ldr	r3, [r7, #16]
 8025e44:	461a      	mov	r2, r3
 8025e46:	2300      	movs	r3, #0
 8025e48:	9300      	str	r3, [sp, #0]
 8025e4a:	2300      	movs	r3, #0
 8025e4c:	f7f1 fb74 	bl	8017538 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8025e50:	f107 030c 	add.w	r3, r7, #12
 8025e54:	4618      	mov	r0, r3
 8025e56:	f7f3 fa75 	bl	8019344 <fs_close>
							printf("File not found\n");
 8025e5a:	4820      	ldr	r0, [pc, #128]	; (8025edc <web_server_thread+0x310>)
 8025e5c:	f7ff fc52 	bl	8025704 <puts>
							osDelay(1);
 8025e60:	2001      	movs	r0, #1
 8025e62:	f7ee fc47 	bl	80146f4 <osDelay>
						}
					}
				}
			}
			netconn_close(newconn);
 8025e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e68:	4618      	mov	r0, r3
 8025e6a:	f7f1 fc0d 	bl	8017688 <netconn_close>
			netbuf_delete(inbuf);
 8025e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e70:	4618      	mov	r0, r3
 8025e72:	f7f3 f849 	bl	8018f08 <netbuf_delete>
			netconn_delete(newconn);
 8025e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e78:	4618      	mov	r0, r3
 8025e7a:	f7f1 f90d 	bl	8017098 <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 8025e7e:	e6b1      	b.n	8025be4 <web_server_thread+0x18>
 8025e80:	08028aa4 	.word	0x08028aa4
 8025e84:	08028ab8 	.word	0x08028ab8
 8025e88:	08028ac0 	.word	0x08028ac0
 8025e8c:	08028ac8 	.word	0x08028ac8
 8025e90:	08028acc 	.word	0x08028acc
 8025e94:	08028ad8 	.word	0x08028ad8
 8025e98:	08028ae8 	.word	0x08028ae8
 8025e9c:	08028af8 	.word	0x08028af8
 8025ea0:	08028b08 	.word	0x08028b08
 8025ea4:	08028b18 	.word	0x08028b18
 8025ea8:	08028b28 	.word	0x08028b28
 8025eac:	08028b34 	.word	0x08028b34
 8025eb0:	08028b40 	.word	0x08028b40
 8025eb4:	40020400 	.word	0x40020400
 8025eb8:	08028b50 	.word	0x08028b50
 8025ebc:	2000bd5c 	.word	0x2000bd5c
 8025ec0:	0802afa0 	.word	0x0802afa0
 8025ec4:	08028b60 	.word	0x08028b60
 8025ec8:	20004250 	.word	0x20004250
 8025ecc:	08028b68 	.word	0x08028b68
 8025ed0:	2000bed0 	.word	0x2000bed0
 8025ed4:	08028b78 	.word	0x08028b78
 8025ed8:	08028b80 	.word	0x08028b80
 8025edc:	08028b8c 	.word	0x08028b8c

08025ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8025ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8025f18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8025ee4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8025ee6:	e003      	b.n	8025ef0 <LoopCopyDataInit>

08025ee8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8025ee8:	4b0c      	ldr	r3, [pc, #48]	; (8025f1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8025eea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8025eec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8025eee:	3104      	adds	r1, #4

08025ef0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8025ef0:	480b      	ldr	r0, [pc, #44]	; (8025f20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8025ef2:	4b0c      	ldr	r3, [pc, #48]	; (8025f24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8025ef4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8025ef6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8025ef8:	d3f6      	bcc.n	8025ee8 <CopyDataInit>
  ldr  r2, =_sbss
 8025efa:	4a0b      	ldr	r2, [pc, #44]	; (8025f28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8025efc:	e002      	b.n	8025f04 <LoopFillZerobss>

08025efe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8025efe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8025f00:	f842 3b04 	str.w	r3, [r2], #4

08025f04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8025f04:	4b09      	ldr	r3, [pc, #36]	; (8025f2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8025f06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8025f08:	d3f9      	bcc.n	8025efe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8025f0a:	f7ff f929 	bl	8025160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8025f0e:	f000 f815 	bl	8025f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8025f12:	f7fe fd6f 	bl	80249f4 <main>
  bx  lr    
 8025f16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8025f18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8025f1c:	0802b14c 	.word	0x0802b14c
  ldr  r0, =_sdata
 8025f20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8025f24:	2000021c 	.word	0x2000021c
  ldr  r2, =_sbss
 8025f28:	2000021c 	.word	0x2000021c
  ldr  r3, = _ebss
 8025f2c:	2000bf50 	.word	0x2000bf50

08025f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8025f30:	e7fe      	b.n	8025f30 <ADC_IRQHandler>

08025f32 <atoi>:
 8025f32:	220a      	movs	r2, #10
 8025f34:	2100      	movs	r1, #0
 8025f36:	f000 b8fb 	b.w	8026130 <strtol>
	...

08025f3c <__libc_init_array>:
 8025f3c:	b570      	push	{r4, r5, r6, lr}
 8025f3e:	4e0d      	ldr	r6, [pc, #52]	; (8025f74 <__libc_init_array+0x38>)
 8025f40:	4c0d      	ldr	r4, [pc, #52]	; (8025f78 <__libc_init_array+0x3c>)
 8025f42:	1ba4      	subs	r4, r4, r6
 8025f44:	10a4      	asrs	r4, r4, #2
 8025f46:	2500      	movs	r5, #0
 8025f48:	42a5      	cmp	r5, r4
 8025f4a:	d109      	bne.n	8025f60 <__libc_init_array+0x24>
 8025f4c:	4e0b      	ldr	r6, [pc, #44]	; (8025f7c <__libc_init_array+0x40>)
 8025f4e:	4c0c      	ldr	r4, [pc, #48]	; (8025f80 <__libc_init_array+0x44>)
 8025f50:	f000 f966 	bl	8026220 <_init>
 8025f54:	1ba4      	subs	r4, r4, r6
 8025f56:	10a4      	asrs	r4, r4, #2
 8025f58:	2500      	movs	r5, #0
 8025f5a:	42a5      	cmp	r5, r4
 8025f5c:	d105      	bne.n	8025f6a <__libc_init_array+0x2e>
 8025f5e:	bd70      	pop	{r4, r5, r6, pc}
 8025f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025f64:	4798      	blx	r3
 8025f66:	3501      	adds	r5, #1
 8025f68:	e7ee      	b.n	8025f48 <__libc_init_array+0xc>
 8025f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025f6e:	4798      	blx	r3
 8025f70:	3501      	adds	r5, #1
 8025f72:	e7f2      	b.n	8025f5a <__libc_init_array+0x1e>
 8025f74:	0802b144 	.word	0x0802b144
 8025f78:	0802b144 	.word	0x0802b144
 8025f7c:	0802b144 	.word	0x0802b144
 8025f80:	0802b148 	.word	0x0802b148

08025f84 <__itoa>:
 8025f84:	1e93      	subs	r3, r2, #2
 8025f86:	2b22      	cmp	r3, #34	; 0x22
 8025f88:	b510      	push	{r4, lr}
 8025f8a:	460c      	mov	r4, r1
 8025f8c:	d904      	bls.n	8025f98 <__itoa+0x14>
 8025f8e:	2300      	movs	r3, #0
 8025f90:	700b      	strb	r3, [r1, #0]
 8025f92:	461c      	mov	r4, r3
 8025f94:	4620      	mov	r0, r4
 8025f96:	bd10      	pop	{r4, pc}
 8025f98:	2a0a      	cmp	r2, #10
 8025f9a:	d109      	bne.n	8025fb0 <__itoa+0x2c>
 8025f9c:	2800      	cmp	r0, #0
 8025f9e:	da07      	bge.n	8025fb0 <__itoa+0x2c>
 8025fa0:	232d      	movs	r3, #45	; 0x2d
 8025fa2:	700b      	strb	r3, [r1, #0]
 8025fa4:	4240      	negs	r0, r0
 8025fa6:	2101      	movs	r1, #1
 8025fa8:	4421      	add	r1, r4
 8025faa:	f000 f8d7 	bl	802615c <__utoa>
 8025fae:	e7f1      	b.n	8025f94 <__itoa+0x10>
 8025fb0:	2100      	movs	r1, #0
 8025fb2:	e7f9      	b.n	8025fa8 <__itoa+0x24>

08025fb4 <itoa>:
 8025fb4:	f7ff bfe6 	b.w	8025f84 <__itoa>

08025fb8 <memcmp>:
 8025fb8:	b510      	push	{r4, lr}
 8025fba:	3901      	subs	r1, #1
 8025fbc:	4402      	add	r2, r0
 8025fbe:	4290      	cmp	r0, r2
 8025fc0:	d101      	bne.n	8025fc6 <memcmp+0xe>
 8025fc2:	2000      	movs	r0, #0
 8025fc4:	bd10      	pop	{r4, pc}
 8025fc6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8025fca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025fce:	42a3      	cmp	r3, r4
 8025fd0:	d0f5      	beq.n	8025fbe <memcmp+0x6>
 8025fd2:	1b18      	subs	r0, r3, r4
 8025fd4:	bd10      	pop	{r4, pc}

08025fd6 <memcpy>:
 8025fd6:	b510      	push	{r4, lr}
 8025fd8:	1e43      	subs	r3, r0, #1
 8025fda:	440a      	add	r2, r1
 8025fdc:	4291      	cmp	r1, r2
 8025fde:	d100      	bne.n	8025fe2 <memcpy+0xc>
 8025fe0:	bd10      	pop	{r4, pc}
 8025fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025fea:	e7f7      	b.n	8025fdc <memcpy+0x6>

08025fec <memset>:
 8025fec:	4402      	add	r2, r0
 8025fee:	4603      	mov	r3, r0
 8025ff0:	4293      	cmp	r3, r2
 8025ff2:	d100      	bne.n	8025ff6 <memset+0xa>
 8025ff4:	4770      	bx	lr
 8025ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8025ffa:	e7f9      	b.n	8025ff0 <memset+0x4>

08025ffc <strcpy>:
 8025ffc:	4603      	mov	r3, r0
 8025ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026002:	f803 2b01 	strb.w	r2, [r3], #1
 8026006:	2a00      	cmp	r2, #0
 8026008:	d1f9      	bne.n	8025ffe <strcpy+0x2>
 802600a:	4770      	bx	lr

0802600c <strncmp>:
 802600c:	b510      	push	{r4, lr}
 802600e:	b16a      	cbz	r2, 802602c <strncmp+0x20>
 8026010:	3901      	subs	r1, #1
 8026012:	1884      	adds	r4, r0, r2
 8026014:	f810 3b01 	ldrb.w	r3, [r0], #1
 8026018:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802601c:	4293      	cmp	r3, r2
 802601e:	d103      	bne.n	8026028 <strncmp+0x1c>
 8026020:	42a0      	cmp	r0, r4
 8026022:	d001      	beq.n	8026028 <strncmp+0x1c>
 8026024:	2b00      	cmp	r3, #0
 8026026:	d1f5      	bne.n	8026014 <strncmp+0x8>
 8026028:	1a98      	subs	r0, r3, r2
 802602a:	bd10      	pop	{r4, pc}
 802602c:	4610      	mov	r0, r2
 802602e:	bd10      	pop	{r4, pc}

08026030 <_strtol_l.isra.0>:
 8026030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026034:	4680      	mov	r8, r0
 8026036:	4689      	mov	r9, r1
 8026038:	4692      	mov	sl, r2
 802603a:	461f      	mov	r7, r3
 802603c:	468b      	mov	fp, r1
 802603e:	465d      	mov	r5, fp
 8026040:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026042:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026046:	f000 f8c9 	bl	80261dc <__locale_ctype_ptr_l>
 802604a:	4420      	add	r0, r4
 802604c:	7846      	ldrb	r6, [r0, #1]
 802604e:	f016 0608 	ands.w	r6, r6, #8
 8026052:	d10b      	bne.n	802606c <_strtol_l.isra.0+0x3c>
 8026054:	2c2d      	cmp	r4, #45	; 0x2d
 8026056:	d10b      	bne.n	8026070 <_strtol_l.isra.0+0x40>
 8026058:	782c      	ldrb	r4, [r5, #0]
 802605a:	2601      	movs	r6, #1
 802605c:	f10b 0502 	add.w	r5, fp, #2
 8026060:	b167      	cbz	r7, 802607c <_strtol_l.isra.0+0x4c>
 8026062:	2f10      	cmp	r7, #16
 8026064:	d114      	bne.n	8026090 <_strtol_l.isra.0+0x60>
 8026066:	2c30      	cmp	r4, #48	; 0x30
 8026068:	d00a      	beq.n	8026080 <_strtol_l.isra.0+0x50>
 802606a:	e011      	b.n	8026090 <_strtol_l.isra.0+0x60>
 802606c:	46ab      	mov	fp, r5
 802606e:	e7e6      	b.n	802603e <_strtol_l.isra.0+0xe>
 8026070:	2c2b      	cmp	r4, #43	; 0x2b
 8026072:	bf04      	itt	eq
 8026074:	782c      	ldrbeq	r4, [r5, #0]
 8026076:	f10b 0502 	addeq.w	r5, fp, #2
 802607a:	e7f1      	b.n	8026060 <_strtol_l.isra.0+0x30>
 802607c:	2c30      	cmp	r4, #48	; 0x30
 802607e:	d127      	bne.n	80260d0 <_strtol_l.isra.0+0xa0>
 8026080:	782b      	ldrb	r3, [r5, #0]
 8026082:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8026086:	2b58      	cmp	r3, #88	; 0x58
 8026088:	d14b      	bne.n	8026122 <_strtol_l.isra.0+0xf2>
 802608a:	786c      	ldrb	r4, [r5, #1]
 802608c:	2710      	movs	r7, #16
 802608e:	3502      	adds	r5, #2
 8026090:	2e00      	cmp	r6, #0
 8026092:	bf0c      	ite	eq
 8026094:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8026098:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 802609c:	2200      	movs	r2, #0
 802609e:	fbb1 fef7 	udiv	lr, r1, r7
 80260a2:	4610      	mov	r0, r2
 80260a4:	fb07 1c1e 	mls	ip, r7, lr, r1
 80260a8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80260ac:	2b09      	cmp	r3, #9
 80260ae:	d811      	bhi.n	80260d4 <_strtol_l.isra.0+0xa4>
 80260b0:	461c      	mov	r4, r3
 80260b2:	42a7      	cmp	r7, r4
 80260b4:	dd1d      	ble.n	80260f2 <_strtol_l.isra.0+0xc2>
 80260b6:	1c53      	adds	r3, r2, #1
 80260b8:	d007      	beq.n	80260ca <_strtol_l.isra.0+0x9a>
 80260ba:	4586      	cmp	lr, r0
 80260bc:	d316      	bcc.n	80260ec <_strtol_l.isra.0+0xbc>
 80260be:	d101      	bne.n	80260c4 <_strtol_l.isra.0+0x94>
 80260c0:	45a4      	cmp	ip, r4
 80260c2:	db13      	blt.n	80260ec <_strtol_l.isra.0+0xbc>
 80260c4:	fb00 4007 	mla	r0, r0, r7, r4
 80260c8:	2201      	movs	r2, #1
 80260ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80260ce:	e7eb      	b.n	80260a8 <_strtol_l.isra.0+0x78>
 80260d0:	270a      	movs	r7, #10
 80260d2:	e7dd      	b.n	8026090 <_strtol_l.isra.0+0x60>
 80260d4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80260d8:	2b19      	cmp	r3, #25
 80260da:	d801      	bhi.n	80260e0 <_strtol_l.isra.0+0xb0>
 80260dc:	3c37      	subs	r4, #55	; 0x37
 80260de:	e7e8      	b.n	80260b2 <_strtol_l.isra.0+0x82>
 80260e0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80260e4:	2b19      	cmp	r3, #25
 80260e6:	d804      	bhi.n	80260f2 <_strtol_l.isra.0+0xc2>
 80260e8:	3c57      	subs	r4, #87	; 0x57
 80260ea:	e7e2      	b.n	80260b2 <_strtol_l.isra.0+0x82>
 80260ec:	f04f 32ff 	mov.w	r2, #4294967295
 80260f0:	e7eb      	b.n	80260ca <_strtol_l.isra.0+0x9a>
 80260f2:	1c53      	adds	r3, r2, #1
 80260f4:	d108      	bne.n	8026108 <_strtol_l.isra.0+0xd8>
 80260f6:	2322      	movs	r3, #34	; 0x22
 80260f8:	f8c8 3000 	str.w	r3, [r8]
 80260fc:	4608      	mov	r0, r1
 80260fe:	f1ba 0f00 	cmp.w	sl, #0
 8026102:	d107      	bne.n	8026114 <_strtol_l.isra.0+0xe4>
 8026104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026108:	b106      	cbz	r6, 802610c <_strtol_l.isra.0+0xdc>
 802610a:	4240      	negs	r0, r0
 802610c:	f1ba 0f00 	cmp.w	sl, #0
 8026110:	d00c      	beq.n	802612c <_strtol_l.isra.0+0xfc>
 8026112:	b122      	cbz	r2, 802611e <_strtol_l.isra.0+0xee>
 8026114:	3d01      	subs	r5, #1
 8026116:	f8ca 5000 	str.w	r5, [sl]
 802611a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802611e:	464d      	mov	r5, r9
 8026120:	e7f9      	b.n	8026116 <_strtol_l.isra.0+0xe6>
 8026122:	2430      	movs	r4, #48	; 0x30
 8026124:	2f00      	cmp	r7, #0
 8026126:	d1b3      	bne.n	8026090 <_strtol_l.isra.0+0x60>
 8026128:	2708      	movs	r7, #8
 802612a:	e7b1      	b.n	8026090 <_strtol_l.isra.0+0x60>
 802612c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026130 <strtol>:
 8026130:	4b08      	ldr	r3, [pc, #32]	; (8026154 <strtol+0x24>)
 8026132:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026134:	681c      	ldr	r4, [r3, #0]
 8026136:	4d08      	ldr	r5, [pc, #32]	; (8026158 <strtol+0x28>)
 8026138:	6a23      	ldr	r3, [r4, #32]
 802613a:	2b00      	cmp	r3, #0
 802613c:	bf08      	it	eq
 802613e:	462b      	moveq	r3, r5
 8026140:	9300      	str	r3, [sp, #0]
 8026142:	4613      	mov	r3, r2
 8026144:	460a      	mov	r2, r1
 8026146:	4601      	mov	r1, r0
 8026148:	4620      	mov	r0, r4
 802614a:	f7ff ff71 	bl	8026030 <_strtol_l.isra.0>
 802614e:	b003      	add	sp, #12
 8026150:	bd30      	pop	{r4, r5, pc}
 8026152:	bf00      	nop
 8026154:	2000004c 	.word	0x2000004c
 8026158:	200000b0 	.word	0x200000b0

0802615c <__utoa>:
 802615c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802615e:	4c1e      	ldr	r4, [pc, #120]	; (80261d8 <__utoa+0x7c>)
 8026160:	b08b      	sub	sp, #44	; 0x2c
 8026162:	4603      	mov	r3, r0
 8026164:	460f      	mov	r7, r1
 8026166:	466d      	mov	r5, sp
 8026168:	f104 0e20 	add.w	lr, r4, #32
 802616c:	6820      	ldr	r0, [r4, #0]
 802616e:	6861      	ldr	r1, [r4, #4]
 8026170:	462e      	mov	r6, r5
 8026172:	c603      	stmia	r6!, {r0, r1}
 8026174:	3408      	adds	r4, #8
 8026176:	4574      	cmp	r4, lr
 8026178:	4635      	mov	r5, r6
 802617a:	d1f7      	bne.n	802616c <__utoa+0x10>
 802617c:	7921      	ldrb	r1, [r4, #4]
 802617e:	7131      	strb	r1, [r6, #4]
 8026180:	1e91      	subs	r1, r2, #2
 8026182:	6820      	ldr	r0, [r4, #0]
 8026184:	6030      	str	r0, [r6, #0]
 8026186:	2922      	cmp	r1, #34	; 0x22
 8026188:	f04f 0100 	mov.w	r1, #0
 802618c:	d904      	bls.n	8026198 <__utoa+0x3c>
 802618e:	7039      	strb	r1, [r7, #0]
 8026190:	460f      	mov	r7, r1
 8026192:	4638      	mov	r0, r7
 8026194:	b00b      	add	sp, #44	; 0x2c
 8026196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026198:	1e78      	subs	r0, r7, #1
 802619a:	4606      	mov	r6, r0
 802619c:	fbb3 f5f2 	udiv	r5, r3, r2
 80261a0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80261a4:	fb02 3315 	mls	r3, r2, r5, r3
 80261a8:	4473      	add	r3, lr
 80261aa:	1c4c      	adds	r4, r1, #1
 80261ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80261b0:	f806 3f01 	strb.w	r3, [r6, #1]!
 80261b4:	462b      	mov	r3, r5
 80261b6:	b965      	cbnz	r5, 80261d2 <__utoa+0x76>
 80261b8:	553d      	strb	r5, [r7, r4]
 80261ba:	187a      	adds	r2, r7, r1
 80261bc:	1acc      	subs	r4, r1, r3
 80261be:	42a3      	cmp	r3, r4
 80261c0:	dae7      	bge.n	8026192 <__utoa+0x36>
 80261c2:	7844      	ldrb	r4, [r0, #1]
 80261c4:	7815      	ldrb	r5, [r2, #0]
 80261c6:	f800 5f01 	strb.w	r5, [r0, #1]!
 80261ca:	3301      	adds	r3, #1
 80261cc:	f802 4901 	strb.w	r4, [r2], #-1
 80261d0:	e7f4      	b.n	80261bc <__utoa+0x60>
 80261d2:	4621      	mov	r1, r4
 80261d4:	e7e2      	b.n	802619c <__utoa+0x40>
 80261d6:	bf00      	nop
 80261d8:	0802b00c 	.word	0x0802b00c

080261dc <__locale_ctype_ptr_l>:
 80261dc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80261e0:	4770      	bx	lr

080261e2 <__ascii_mbtowc>:
 80261e2:	b082      	sub	sp, #8
 80261e4:	b901      	cbnz	r1, 80261e8 <__ascii_mbtowc+0x6>
 80261e6:	a901      	add	r1, sp, #4
 80261e8:	b142      	cbz	r2, 80261fc <__ascii_mbtowc+0x1a>
 80261ea:	b14b      	cbz	r3, 8026200 <__ascii_mbtowc+0x1e>
 80261ec:	7813      	ldrb	r3, [r2, #0]
 80261ee:	600b      	str	r3, [r1, #0]
 80261f0:	7812      	ldrb	r2, [r2, #0]
 80261f2:	1c10      	adds	r0, r2, #0
 80261f4:	bf18      	it	ne
 80261f6:	2001      	movne	r0, #1
 80261f8:	b002      	add	sp, #8
 80261fa:	4770      	bx	lr
 80261fc:	4610      	mov	r0, r2
 80261fe:	e7fb      	b.n	80261f8 <__ascii_mbtowc+0x16>
 8026200:	f06f 0001 	mvn.w	r0, #1
 8026204:	e7f8      	b.n	80261f8 <__ascii_mbtowc+0x16>

08026206 <__ascii_wctomb>:
 8026206:	b149      	cbz	r1, 802621c <__ascii_wctomb+0x16>
 8026208:	2aff      	cmp	r2, #255	; 0xff
 802620a:	bf85      	ittet	hi
 802620c:	238a      	movhi	r3, #138	; 0x8a
 802620e:	6003      	strhi	r3, [r0, #0]
 8026210:	700a      	strbls	r2, [r1, #0]
 8026212:	f04f 30ff 	movhi.w	r0, #4294967295
 8026216:	bf98      	it	ls
 8026218:	2001      	movls	r0, #1
 802621a:	4770      	bx	lr
 802621c:	4608      	mov	r0, r1
 802621e:	4770      	bx	lr

08026220 <_init>:
 8026220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026222:	bf00      	nop
 8026224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026226:	bc08      	pop	{r3}
 8026228:	469e      	mov	lr, r3
 802622a:	4770      	bx	lr

0802622c <_fini>:
 802622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802622e:	bf00      	nop
 8026230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026232:	bc08      	pop	{r3}
 8026234:	469e      	mov	lr, r3
 8026236:	4770      	bx	lr
