
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .eeprom_emul  00000000  08008000  08008000  000401f8  2**0
                  CONTENTS
  2 .text         0000e858  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004780  0801e858  0801e858  0002e858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08022fd8  08022fd8  00032fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08022fe0  08022fe0  00032fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08022fe4  08022fe4  00032fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000001f8  20000000  08022fe8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  000401f8  2**0
                  CONTENTS
  9 .bss          0000bc04  200001f8  200001f8  000401f8  2**2
                  ALLOC
 10 ._user_heap_stack 00010000  2000bdfc  2000bdfc  000401f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005cd26  00000000  00000000  00040228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a724  00000000  00000000  0009cf4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b3a3  00000000  00000000  000a7672  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000021b8  00000000  00000000  000c2a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002568  00000000  00000000  000c4bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017108  00000000  00000000  000c7138  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a269  00000000  00000000  000de240  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  000e84a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000602c  00000000  00000000  000e8528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	200001f8 	.word	0x200001f8
 801001c:	00000000 	.word	0x00000000
 8010020:	0801e840 	.word	0x0801e840

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	200001fc 	.word	0x200001fc
 801003c:	0801e840 	.word	0x0801e840

08010040 <strcmp>:
 8010040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010048:	2a01      	cmp	r2, #1
 801004a:	bf28      	it	cs
 801004c:	429a      	cmpcs	r2, r3
 801004e:	d0f7      	beq.n	8010040 <strcmp>
 8010050:	1ad0      	subs	r0, r2, r3
 8010052:	4770      	bx	lr

08010054 <strlen>:
 8010054:	4603      	mov	r3, r0
 8010056:	f813 2b01 	ldrb.w	r2, [r3], #1
 801005a:	2a00      	cmp	r2, #0
 801005c:	d1fb      	bne.n	8010056 <strlen+0x2>
 801005e:	1a18      	subs	r0, r3, r0
 8010060:	3801      	subs	r0, #1
 8010062:	4770      	bx	lr

08010064 <__aeabi_uldivmod>:
 8010064:	b953      	cbnz	r3, 801007c <__aeabi_uldivmod+0x18>
 8010066:	b94a      	cbnz	r2, 801007c <__aeabi_uldivmod+0x18>
 8010068:	2900      	cmp	r1, #0
 801006a:	bf08      	it	eq
 801006c:	2800      	cmpeq	r0, #0
 801006e:	bf1c      	itt	ne
 8010070:	f04f 31ff 	movne.w	r1, #4294967295
 8010074:	f04f 30ff 	movne.w	r0, #4294967295
 8010078:	f000 b97a 	b.w	8010370 <__aeabi_idiv0>
 801007c:	f1ad 0c08 	sub.w	ip, sp, #8
 8010080:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010084:	f000 f806 	bl	8010094 <__udivmoddi4>
 8010088:	f8dd e004 	ldr.w	lr, [sp, #4]
 801008c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010090:	b004      	add	sp, #16
 8010092:	4770      	bx	lr

08010094 <__udivmoddi4>:
 8010094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010098:	468c      	mov	ip, r1
 801009a:	460d      	mov	r5, r1
 801009c:	4604      	mov	r4, r0
 801009e:	9e08      	ldr	r6, [sp, #32]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d151      	bne.n	8010148 <__udivmoddi4+0xb4>
 80100a4:	428a      	cmp	r2, r1
 80100a6:	4617      	mov	r7, r2
 80100a8:	d96d      	bls.n	8010186 <__udivmoddi4+0xf2>
 80100aa:	fab2 fe82 	clz	lr, r2
 80100ae:	f1be 0f00 	cmp.w	lr, #0
 80100b2:	d00b      	beq.n	80100cc <__udivmoddi4+0x38>
 80100b4:	f1ce 0c20 	rsb	ip, lr, #32
 80100b8:	fa01 f50e 	lsl.w	r5, r1, lr
 80100bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80100c0:	fa02 f70e 	lsl.w	r7, r2, lr
 80100c4:	ea4c 0c05 	orr.w	ip, ip, r5
 80100c8:	fa00 f40e 	lsl.w	r4, r0, lr
 80100cc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80100d0:	0c25      	lsrs	r5, r4, #16
 80100d2:	fbbc f8fa 	udiv	r8, ip, sl
 80100d6:	fa1f f987 	uxth.w	r9, r7
 80100da:	fb0a cc18 	mls	ip, sl, r8, ip
 80100de:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80100e2:	fb08 f309 	mul.w	r3, r8, r9
 80100e6:	42ab      	cmp	r3, r5
 80100e8:	d90a      	bls.n	8010100 <__udivmoddi4+0x6c>
 80100ea:	19ed      	adds	r5, r5, r7
 80100ec:	f108 32ff 	add.w	r2, r8, #4294967295
 80100f0:	f080 8123 	bcs.w	801033a <__udivmoddi4+0x2a6>
 80100f4:	42ab      	cmp	r3, r5
 80100f6:	f240 8120 	bls.w	801033a <__udivmoddi4+0x2a6>
 80100fa:	f1a8 0802 	sub.w	r8, r8, #2
 80100fe:	443d      	add	r5, r7
 8010100:	1aed      	subs	r5, r5, r3
 8010102:	b2a4      	uxth	r4, r4
 8010104:	fbb5 f0fa 	udiv	r0, r5, sl
 8010108:	fb0a 5510 	mls	r5, sl, r0, r5
 801010c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010110:	fb00 f909 	mul.w	r9, r0, r9
 8010114:	45a1      	cmp	r9, r4
 8010116:	d909      	bls.n	801012c <__udivmoddi4+0x98>
 8010118:	19e4      	adds	r4, r4, r7
 801011a:	f100 33ff 	add.w	r3, r0, #4294967295
 801011e:	f080 810a 	bcs.w	8010336 <__udivmoddi4+0x2a2>
 8010122:	45a1      	cmp	r9, r4
 8010124:	f240 8107 	bls.w	8010336 <__udivmoddi4+0x2a2>
 8010128:	3802      	subs	r0, #2
 801012a:	443c      	add	r4, r7
 801012c:	eba4 0409 	sub.w	r4, r4, r9
 8010130:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010134:	2100      	movs	r1, #0
 8010136:	2e00      	cmp	r6, #0
 8010138:	d061      	beq.n	80101fe <__udivmoddi4+0x16a>
 801013a:	fa24 f40e 	lsr.w	r4, r4, lr
 801013e:	2300      	movs	r3, #0
 8010140:	6034      	str	r4, [r6, #0]
 8010142:	6073      	str	r3, [r6, #4]
 8010144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010148:	428b      	cmp	r3, r1
 801014a:	d907      	bls.n	801015c <__udivmoddi4+0xc8>
 801014c:	2e00      	cmp	r6, #0
 801014e:	d054      	beq.n	80101fa <__udivmoddi4+0x166>
 8010150:	2100      	movs	r1, #0
 8010152:	e886 0021 	stmia.w	r6, {r0, r5}
 8010156:	4608      	mov	r0, r1
 8010158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015c:	fab3 f183 	clz	r1, r3
 8010160:	2900      	cmp	r1, #0
 8010162:	f040 808e 	bne.w	8010282 <__udivmoddi4+0x1ee>
 8010166:	42ab      	cmp	r3, r5
 8010168:	d302      	bcc.n	8010170 <__udivmoddi4+0xdc>
 801016a:	4282      	cmp	r2, r0
 801016c:	f200 80fa 	bhi.w	8010364 <__udivmoddi4+0x2d0>
 8010170:	1a84      	subs	r4, r0, r2
 8010172:	eb65 0503 	sbc.w	r5, r5, r3
 8010176:	2001      	movs	r0, #1
 8010178:	46ac      	mov	ip, r5
 801017a:	2e00      	cmp	r6, #0
 801017c:	d03f      	beq.n	80101fe <__udivmoddi4+0x16a>
 801017e:	e886 1010 	stmia.w	r6, {r4, ip}
 8010182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010186:	b912      	cbnz	r2, 801018e <__udivmoddi4+0xfa>
 8010188:	2701      	movs	r7, #1
 801018a:	fbb7 f7f2 	udiv	r7, r7, r2
 801018e:	fab7 fe87 	clz	lr, r7
 8010192:	f1be 0f00 	cmp.w	lr, #0
 8010196:	d134      	bne.n	8010202 <__udivmoddi4+0x16e>
 8010198:	1beb      	subs	r3, r5, r7
 801019a:	0c3a      	lsrs	r2, r7, #16
 801019c:	fa1f fc87 	uxth.w	ip, r7
 80101a0:	2101      	movs	r1, #1
 80101a2:	fbb3 f8f2 	udiv	r8, r3, r2
 80101a6:	0c25      	lsrs	r5, r4, #16
 80101a8:	fb02 3318 	mls	r3, r2, r8, r3
 80101ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80101b0:	fb0c f308 	mul.w	r3, ip, r8
 80101b4:	42ab      	cmp	r3, r5
 80101b6:	d907      	bls.n	80101c8 <__udivmoddi4+0x134>
 80101b8:	19ed      	adds	r5, r5, r7
 80101ba:	f108 30ff 	add.w	r0, r8, #4294967295
 80101be:	d202      	bcs.n	80101c6 <__udivmoddi4+0x132>
 80101c0:	42ab      	cmp	r3, r5
 80101c2:	f200 80d1 	bhi.w	8010368 <__udivmoddi4+0x2d4>
 80101c6:	4680      	mov	r8, r0
 80101c8:	1aed      	subs	r5, r5, r3
 80101ca:	b2a3      	uxth	r3, r4
 80101cc:	fbb5 f0f2 	udiv	r0, r5, r2
 80101d0:	fb02 5510 	mls	r5, r2, r0, r5
 80101d4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80101d8:	fb0c fc00 	mul.w	ip, ip, r0
 80101dc:	45a4      	cmp	ip, r4
 80101de:	d907      	bls.n	80101f0 <__udivmoddi4+0x15c>
 80101e0:	19e4      	adds	r4, r4, r7
 80101e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80101e6:	d202      	bcs.n	80101ee <__udivmoddi4+0x15a>
 80101e8:	45a4      	cmp	ip, r4
 80101ea:	f200 80b8 	bhi.w	801035e <__udivmoddi4+0x2ca>
 80101ee:	4618      	mov	r0, r3
 80101f0:	eba4 040c 	sub.w	r4, r4, ip
 80101f4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80101f8:	e79d      	b.n	8010136 <__udivmoddi4+0xa2>
 80101fa:	4631      	mov	r1, r6
 80101fc:	4630      	mov	r0, r6
 80101fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010202:	f1ce 0420 	rsb	r4, lr, #32
 8010206:	fa05 f30e 	lsl.w	r3, r5, lr
 801020a:	fa07 f70e 	lsl.w	r7, r7, lr
 801020e:	fa20 f804 	lsr.w	r8, r0, r4
 8010212:	0c3a      	lsrs	r2, r7, #16
 8010214:	fa25 f404 	lsr.w	r4, r5, r4
 8010218:	ea48 0803 	orr.w	r8, r8, r3
 801021c:	fbb4 f1f2 	udiv	r1, r4, r2
 8010220:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8010224:	fb02 4411 	mls	r4, r2, r1, r4
 8010228:	fa1f fc87 	uxth.w	ip, r7
 801022c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8010230:	fb01 f30c 	mul.w	r3, r1, ip
 8010234:	42ab      	cmp	r3, r5
 8010236:	fa00 f40e 	lsl.w	r4, r0, lr
 801023a:	d909      	bls.n	8010250 <__udivmoddi4+0x1bc>
 801023c:	19ed      	adds	r5, r5, r7
 801023e:	f101 30ff 	add.w	r0, r1, #4294967295
 8010242:	f080 808a 	bcs.w	801035a <__udivmoddi4+0x2c6>
 8010246:	42ab      	cmp	r3, r5
 8010248:	f240 8087 	bls.w	801035a <__udivmoddi4+0x2c6>
 801024c:	3902      	subs	r1, #2
 801024e:	443d      	add	r5, r7
 8010250:	1aeb      	subs	r3, r5, r3
 8010252:	fa1f f588 	uxth.w	r5, r8
 8010256:	fbb3 f0f2 	udiv	r0, r3, r2
 801025a:	fb02 3310 	mls	r3, r2, r0, r3
 801025e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8010262:	fb00 f30c 	mul.w	r3, r0, ip
 8010266:	42ab      	cmp	r3, r5
 8010268:	d907      	bls.n	801027a <__udivmoddi4+0x1e6>
 801026a:	19ed      	adds	r5, r5, r7
 801026c:	f100 38ff 	add.w	r8, r0, #4294967295
 8010270:	d26f      	bcs.n	8010352 <__udivmoddi4+0x2be>
 8010272:	42ab      	cmp	r3, r5
 8010274:	d96d      	bls.n	8010352 <__udivmoddi4+0x2be>
 8010276:	3802      	subs	r0, #2
 8010278:	443d      	add	r5, r7
 801027a:	1aeb      	subs	r3, r5, r3
 801027c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8010280:	e78f      	b.n	80101a2 <__udivmoddi4+0x10e>
 8010282:	f1c1 0720 	rsb	r7, r1, #32
 8010286:	fa22 f807 	lsr.w	r8, r2, r7
 801028a:	408b      	lsls	r3, r1
 801028c:	fa05 f401 	lsl.w	r4, r5, r1
 8010290:	ea48 0303 	orr.w	r3, r8, r3
 8010294:	fa20 fe07 	lsr.w	lr, r0, r7
 8010298:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 801029c:	40fd      	lsrs	r5, r7
 801029e:	ea4e 0e04 	orr.w	lr, lr, r4
 80102a2:	fbb5 f9fc 	udiv	r9, r5, ip
 80102a6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80102aa:	fb0c 5519 	mls	r5, ip, r9, r5
 80102ae:	fa1f f883 	uxth.w	r8, r3
 80102b2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80102b6:	fb09 f408 	mul.w	r4, r9, r8
 80102ba:	42ac      	cmp	r4, r5
 80102bc:	fa02 f201 	lsl.w	r2, r2, r1
 80102c0:	fa00 fa01 	lsl.w	sl, r0, r1
 80102c4:	d908      	bls.n	80102d8 <__udivmoddi4+0x244>
 80102c6:	18ed      	adds	r5, r5, r3
 80102c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80102cc:	d243      	bcs.n	8010356 <__udivmoddi4+0x2c2>
 80102ce:	42ac      	cmp	r4, r5
 80102d0:	d941      	bls.n	8010356 <__udivmoddi4+0x2c2>
 80102d2:	f1a9 0902 	sub.w	r9, r9, #2
 80102d6:	441d      	add	r5, r3
 80102d8:	1b2d      	subs	r5, r5, r4
 80102da:	fa1f fe8e 	uxth.w	lr, lr
 80102de:	fbb5 f0fc 	udiv	r0, r5, ip
 80102e2:	fb0c 5510 	mls	r5, ip, r0, r5
 80102e6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80102ea:	fb00 f808 	mul.w	r8, r0, r8
 80102ee:	45a0      	cmp	r8, r4
 80102f0:	d907      	bls.n	8010302 <__udivmoddi4+0x26e>
 80102f2:	18e4      	adds	r4, r4, r3
 80102f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80102f8:	d229      	bcs.n	801034e <__udivmoddi4+0x2ba>
 80102fa:	45a0      	cmp	r8, r4
 80102fc:	d927      	bls.n	801034e <__udivmoddi4+0x2ba>
 80102fe:	3802      	subs	r0, #2
 8010300:	441c      	add	r4, r3
 8010302:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010306:	eba4 0408 	sub.w	r4, r4, r8
 801030a:	fba0 8902 	umull	r8, r9, r0, r2
 801030e:	454c      	cmp	r4, r9
 8010310:	46c6      	mov	lr, r8
 8010312:	464d      	mov	r5, r9
 8010314:	d315      	bcc.n	8010342 <__udivmoddi4+0x2ae>
 8010316:	d012      	beq.n	801033e <__udivmoddi4+0x2aa>
 8010318:	b156      	cbz	r6, 8010330 <__udivmoddi4+0x29c>
 801031a:	ebba 030e 	subs.w	r3, sl, lr
 801031e:	eb64 0405 	sbc.w	r4, r4, r5
 8010322:	fa04 f707 	lsl.w	r7, r4, r7
 8010326:	40cb      	lsrs	r3, r1
 8010328:	431f      	orrs	r7, r3
 801032a:	40cc      	lsrs	r4, r1
 801032c:	6037      	str	r7, [r6, #0]
 801032e:	6074      	str	r4, [r6, #4]
 8010330:	2100      	movs	r1, #0
 8010332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010336:	4618      	mov	r0, r3
 8010338:	e6f8      	b.n	801012c <__udivmoddi4+0x98>
 801033a:	4690      	mov	r8, r2
 801033c:	e6e0      	b.n	8010100 <__udivmoddi4+0x6c>
 801033e:	45c2      	cmp	sl, r8
 8010340:	d2ea      	bcs.n	8010318 <__udivmoddi4+0x284>
 8010342:	ebb8 0e02 	subs.w	lr, r8, r2
 8010346:	eb69 0503 	sbc.w	r5, r9, r3
 801034a:	3801      	subs	r0, #1
 801034c:	e7e4      	b.n	8010318 <__udivmoddi4+0x284>
 801034e:	4628      	mov	r0, r5
 8010350:	e7d7      	b.n	8010302 <__udivmoddi4+0x26e>
 8010352:	4640      	mov	r0, r8
 8010354:	e791      	b.n	801027a <__udivmoddi4+0x1e6>
 8010356:	4681      	mov	r9, r0
 8010358:	e7be      	b.n	80102d8 <__udivmoddi4+0x244>
 801035a:	4601      	mov	r1, r0
 801035c:	e778      	b.n	8010250 <__udivmoddi4+0x1bc>
 801035e:	3802      	subs	r0, #2
 8010360:	443c      	add	r4, r7
 8010362:	e745      	b.n	80101f0 <__udivmoddi4+0x15c>
 8010364:	4608      	mov	r0, r1
 8010366:	e708      	b.n	801017a <__udivmoddi4+0xe6>
 8010368:	f1a8 0802 	sub.w	r8, r8, #2
 801036c:	443d      	add	r5, r7
 801036e:	e72b      	b.n	80101c8 <__udivmoddi4+0x134>

08010370 <__aeabi_idiv0>:
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop

08010374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010374:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010376:	4b0b      	ldr	r3, [pc, #44]	; (80103a4 <HAL_Init+0x30>)
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801037e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010386:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801038e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010390:	2003      	movs	r0, #3
 8010392:	f000 f82f 	bl	80103f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010396:	2000      	movs	r0, #0
 8010398:	f00d fb64 	bl	801da64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801039c:	f00d fb40 	bl	801da20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80103a0:	2000      	movs	r0, #0
 80103a2:	bd08      	pop	{r3, pc}
 80103a4:	40023c00 	.word	0x40023c00

080103a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80103a8:	4a03      	ldr	r2, [pc, #12]	; (80103b8 <HAL_IncTick+0x10>)
 80103aa:	6811      	ldr	r1, [r2, #0]
 80103ac:	4b03      	ldr	r3, [pc, #12]	; (80103bc <HAL_IncTick+0x14>)
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	440b      	add	r3, r1
 80103b2:	6013      	str	r3, [r2, #0]
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop
 80103b8:	20004414 	.word	0x20004414
 80103bc:	20000000 	.word	0x20000000

080103c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80103c0:	4b01      	ldr	r3, [pc, #4]	; (80103c8 <HAL_GetTick+0x8>)
 80103c2:	6818      	ldr	r0, [r3, #0]
}
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	20004414 	.word	0x20004414

080103cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80103cc:	b538      	push	{r3, r4, r5, lr}
 80103ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80103d0:	f7ff fff6 	bl	80103c0 <HAL_GetTick>
 80103d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80103d6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80103da:	d002      	beq.n	80103e2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80103dc:	4b04      	ldr	r3, [pc, #16]	; (80103f0 <HAL_Delay+0x24>)
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80103e2:	f7ff ffed 	bl	80103c0 <HAL_GetTick>
 80103e6:	1b40      	subs	r0, r0, r5
 80103e8:	4284      	cmp	r4, r0
 80103ea:	d8fa      	bhi.n	80103e2 <HAL_Delay+0x16>
  {
  }
}
 80103ec:	bd38      	pop	{r3, r4, r5, pc}
 80103ee:	bf00      	nop
 80103f0:	20000000 	.word	0x20000000

080103f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80103f4:	4a07      	ldr	r2, [pc, #28]	; (8010414 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80103f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80103f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80103fc:	041b      	lsls	r3, r3, #16
 80103fe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8010400:	0200      	lsls	r0, r0, #8
 8010402:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010406:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8010408:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 801040c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8010410:	60d0      	str	r0, [r2, #12]
 8010412:	4770      	bx	lr
 8010414:	e000ed00 	.word	0xe000ed00

08010418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010418:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801041a:	4b16      	ldr	r3, [pc, #88]	; (8010474 <HAL_NVIC_SetPriority+0x5c>)
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010422:	f1c3 0407 	rsb	r4, r3, #7
 8010426:	2c04      	cmp	r4, #4
 8010428:	bf28      	it	cs
 801042a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801042c:	1d1d      	adds	r5, r3, #4
 801042e:	2d06      	cmp	r5, #6
 8010430:	d917      	bls.n	8010462 <HAL_NVIC_SetPriority+0x4a>
 8010432:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010434:	2501      	movs	r5, #1
 8010436:	fa05 f404 	lsl.w	r4, r5, r4
 801043a:	3c01      	subs	r4, #1
 801043c:	4021      	ands	r1, r4
 801043e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010440:	fa05 f303 	lsl.w	r3, r5, r3
 8010444:	3b01      	subs	r3, #1
 8010446:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010448:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 801044a:	2800      	cmp	r0, #0
 801044c:	db0b      	blt.n	8010466 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801044e:	0109      	lsls	r1, r1, #4
 8010450:	b2c9      	uxtb	r1, r1
 8010452:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8010456:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 801045a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 801045e:	bc30      	pop	{r4, r5}
 8010460:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010462:	2300      	movs	r3, #0
 8010464:	e7e6      	b.n	8010434 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010466:	f000 000f 	and.w	r0, r0, #15
 801046a:	0109      	lsls	r1, r1, #4
 801046c:	b2c9      	uxtb	r1, r1
 801046e:	4b02      	ldr	r3, [pc, #8]	; (8010478 <HAL_NVIC_SetPriority+0x60>)
 8010470:	5419      	strb	r1, [r3, r0]
 8010472:	e7f4      	b.n	801045e <HAL_NVIC_SetPriority+0x46>
 8010474:	e000ed00 	.word	0xe000ed00
 8010478:	e000ed14 	.word	0xe000ed14

0801047c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801047c:	0942      	lsrs	r2, r0, #5
 801047e:	f000 001f 	and.w	r0, r0, #31
 8010482:	2301      	movs	r3, #1
 8010484:	fa03 f000 	lsl.w	r0, r3, r0
 8010488:	4b01      	ldr	r3, [pc, #4]	; (8010490 <HAL_NVIC_EnableIRQ+0x14>)
 801048a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801048e:	4770      	bx	lr
 8010490:	e000e100 	.word	0xe000e100

08010494 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010494:	0943      	lsrs	r3, r0, #5
 8010496:	f000 001f 	and.w	r0, r0, #31
 801049a:	2201      	movs	r2, #1
 801049c:	fa02 f000 	lsl.w	r0, r2, r0
 80104a0:	3320      	adds	r3, #32
 80104a2:	4a02      	ldr	r2, [pc, #8]	; (80104ac <HAL_NVIC_DisableIRQ+0x18>)
 80104a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	e000e100 	.word	0xe000e100

080104b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80104b0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80104b2:	6805      	ldr	r5, [r0, #0]
 80104b4:	682c      	ldr	r4, [r5, #0]
 80104b6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80104ba:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80104bc:	6804      	ldr	r4, [r0, #0]
 80104be:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80104c0:	6883      	ldr	r3, [r0, #8]
 80104c2:	2b40      	cmp	r3, #64	; 0x40
 80104c4:	d005      	beq.n	80104d2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80104c6:	6803      	ldr	r3, [r0, #0]
 80104c8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	60da      	str	r2, [r3, #12]
  }
}
 80104ce:	bc30      	pop	{r4, r5}
 80104d0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80104d2:	6803      	ldr	r3, [r0, #0]
 80104d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80104d6:	6803      	ldr	r3, [r0, #0]
 80104d8:	60d9      	str	r1, [r3, #12]
 80104da:	e7f8      	b.n	80104ce <DMA_SetConfig+0x1e>

080104dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80104dc:	6802      	ldr	r2, [r0, #0]
 80104de:	b2d3      	uxtb	r3, r2
 80104e0:	3b10      	subs	r3, #16
 80104e2:	490b      	ldr	r1, [pc, #44]	; (8010510 <DMA_CalcBaseAndBitshift+0x34>)
 80104e4:	fba1 1303 	umull	r1, r3, r1, r3
 80104e8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80104ea:	490a      	ldr	r1, [pc, #40]	; (8010514 <DMA_CalcBaseAndBitshift+0x38>)
 80104ec:	5cc9      	ldrb	r1, [r1, r3]
 80104ee:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80104f0:	2b03      	cmp	r3, #3
 80104f2:	d806      	bhi.n	8010502 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80104f4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80104f8:	f022 0203 	bic.w	r2, r2, #3
 80104fc:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80104fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8010500:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010502:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8010506:	f022 0203 	bic.w	r2, r2, #3
 801050a:	3204      	adds	r2, #4
 801050c:	6582      	str	r2, [r0, #88]	; 0x58
 801050e:	e7f6      	b.n	80104fe <DMA_CalcBaseAndBitshift+0x22>
 8010510:	aaaaaaab 	.word	0xaaaaaaab
 8010514:	0801e894 	.word	0x0801e894

08010518 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010518:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801051a:	6982      	ldr	r2, [r0, #24]
 801051c:	b992      	cbnz	r2, 8010544 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 801051e:	2b01      	cmp	r3, #1
 8010520:	d00a      	beq.n	8010538 <DMA_CheckFifoParam+0x20>
 8010522:	b11b      	cbz	r3, 801052c <DMA_CheckFifoParam+0x14>
 8010524:	2b02      	cmp	r3, #2
 8010526:	d001      	beq.n	801052c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8010528:	2000      	movs	r0, #0
 801052a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801052c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801052e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8010532:	d12c      	bne.n	801058e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8010534:	2000      	movs	r0, #0
 8010536:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010538:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801053a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801053e:	d028      	beq.n	8010592 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8010540:	2000      	movs	r0, #0
 8010542:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010544:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8010548:	d005      	beq.n	8010556 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801054a:	2b02      	cmp	r3, #2
 801054c:	d929      	bls.n	80105a2 <DMA_CheckFifoParam+0x8a>
 801054e:	2b03      	cmp	r3, #3
 8010550:	d015      	beq.n	801057e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8010552:	2000      	movs	r0, #0
 8010554:	4770      	bx	lr
    switch (tmp)
 8010556:	2b03      	cmp	r3, #3
 8010558:	d803      	bhi.n	8010562 <DMA_CheckFifoParam+0x4a>
 801055a:	e8df f003 	tbb	[pc, r3]
 801055e:	041c      	.short	0x041c
 8010560:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8010562:	2000      	movs	r0, #0
 8010564:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010566:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010568:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 801056c:	d115      	bne.n	801059a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 801056e:	2000      	movs	r0, #0
 8010570:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010572:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010578:	d011      	beq.n	801059e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 801057a:	2000      	movs	r0, #0
 801057c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801057e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010580:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8010584:	d001      	beq.n	801058a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8010586:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8010588:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 801058a:	2000      	movs	r0, #0
 801058c:	4770      	bx	lr
        status = HAL_ERROR;
 801058e:	2001      	movs	r0, #1
 8010590:	4770      	bx	lr
        status = HAL_ERROR;
 8010592:	2001      	movs	r0, #1
 8010594:	4770      	bx	lr
      status = HAL_ERROR;
 8010596:	2001      	movs	r0, #1
 8010598:	4770      	bx	lr
        status = HAL_ERROR;
 801059a:	2001      	movs	r0, #1
 801059c:	4770      	bx	lr
        status = HAL_ERROR;
 801059e:	2001      	movs	r0, #1
 80105a0:	4770      	bx	lr
      status = HAL_ERROR;
 80105a2:	2001      	movs	r0, #1
 80105a4:	4770      	bx	lr
	...

080105a8 <HAL_DMA_Init>:
{
 80105a8:	b570      	push	{r4, r5, r6, lr}
 80105aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80105ac:	f7ff ff08 	bl	80103c0 <HAL_GetTick>
  if(hdma == NULL)
 80105b0:	2c00      	cmp	r4, #0
 80105b2:	d05d      	beq.n	8010670 <HAL_DMA_Init+0xc8>
 80105b4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80105b6:	2300      	movs	r3, #0
 80105b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80105bc:	2302      	movs	r3, #2
 80105be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80105c2:	6822      	ldr	r2, [r4, #0]
 80105c4:	6813      	ldr	r3, [r2, #0]
 80105c6:	f023 0301 	bic.w	r3, r3, #1
 80105ca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80105cc:	6823      	ldr	r3, [r4, #0]
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	f012 0f01 	tst.w	r2, #1
 80105d4:	d00a      	beq.n	80105ec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80105d6:	f7ff fef3 	bl	80103c0 <HAL_GetTick>
 80105da:	1b40      	subs	r0, r0, r5
 80105dc:	2805      	cmp	r0, #5
 80105de:	d9f5      	bls.n	80105cc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80105e0:	2320      	movs	r3, #32
 80105e2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80105e4:	2003      	movs	r0, #3
 80105e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80105ea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80105ec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80105ee:	4921      	ldr	r1, [pc, #132]	; (8010674 <HAL_DMA_Init+0xcc>)
 80105f0:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80105f2:	6862      	ldr	r2, [r4, #4]
 80105f4:	68a0      	ldr	r0, [r4, #8]
 80105f6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80105f8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80105fa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80105fc:	6920      	ldr	r0, [r4, #16]
 80105fe:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010600:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010602:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010604:	69a0      	ldr	r0, [r4, #24]
 8010606:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8010608:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801060a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 801060c:	6a20      	ldr	r0, [r4, #32]
 801060e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010610:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010612:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010614:	2904      	cmp	r1, #4
 8010616:	d016      	beq.n	8010646 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8010618:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 801061a:	6826      	ldr	r6, [r4, #0]
 801061c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801061e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8010622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010624:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010626:	2b04      	cmp	r3, #4
 8010628:	d012      	beq.n	8010650 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 801062a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801062c:	4620      	mov	r0, r4
 801062e:	f7ff ff55 	bl	80104dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010632:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010634:	233f      	movs	r3, #63	; 0x3f
 8010636:	4093      	lsls	r3, r2
 8010638:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801063a:	2000      	movs	r0, #0
 801063c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 801063e:	2301      	movs	r3, #1
 8010640:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8010644:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010646:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010648:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801064a:	4301      	orrs	r1, r0
 801064c:	430a      	orrs	r2, r1
 801064e:	e7e3      	b.n	8010618 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 8010650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010652:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010656:	2b00      	cmp	r3, #0
 8010658:	d0e7      	beq.n	801062a <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801065a:	4620      	mov	r0, r4
 801065c:	f7ff ff5c 	bl	8010518 <DMA_CheckFifoParam>
 8010660:	2800      	cmp	r0, #0
 8010662:	d0e2      	beq.n	801062a <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010664:	2340      	movs	r3, #64	; 0x40
 8010666:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8010668:	2001      	movs	r0, #1
 801066a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 801066e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010670:	2001      	movs	r0, #1
}
 8010672:	bd70      	pop	{r4, r5, r6, pc}
 8010674:	f010803f 	.word	0xf010803f

08010678 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8010678:	b340      	cbz	r0, 80106cc <HAL_DMA_DeInit+0x54>
{
 801067a:	b538      	push	{r3, r4, r5, lr}
 801067c:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 801067e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8010682:	b2db      	uxtb	r3, r3
 8010684:	2b02      	cmp	r3, #2
 8010686:	d101      	bne.n	801068c <HAL_DMA_DeInit+0x14>
    return HAL_BUSY;
 8010688:	2002      	movs	r0, #2
}
 801068a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_DMA_DISABLE(hdma);
 801068c:	6802      	ldr	r2, [r0, #0]
 801068e:	6813      	ldr	r3, [r2, #0]
 8010690:	f023 0301 	bic.w	r3, r3, #1
 8010694:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8010696:	6803      	ldr	r3, [r0, #0]
 8010698:	2500      	movs	r5, #0
 801069a:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 801069c:	6803      	ldr	r3, [r0, #0]
 801069e:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80106a0:	6803      	ldr	r3, [r0, #0]
 80106a2:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80106a4:	6803      	ldr	r3, [r0, #0]
 80106a6:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80106a8:	6803      	ldr	r3, [r0, #0]
 80106aa:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80106ac:	6803      	ldr	r3, [r0, #0]
 80106ae:	2221      	movs	r2, #33	; 0x21
 80106b0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80106b2:	f7ff ff13 	bl	80104dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80106b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80106b8:	233f      	movs	r3, #63	; 0x3f
 80106ba:	4093      	lsls	r3, r2
 80106bc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80106be:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80106c0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80106c4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 80106c8:	4628      	mov	r0, r5
 80106ca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80106cc:	2001      	movs	r0, #1
 80106ce:	4770      	bx	lr

080106d0 <HAL_DMA_Start_IT>:
{
 80106d0:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80106d2:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80106d4:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80106d8:	2c01      	cmp	r4, #1
 80106da:	d031      	beq.n	8010740 <HAL_DMA_Start_IT+0x70>
 80106dc:	2401      	movs	r4, #1
 80106de:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80106e2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80106e6:	b2e4      	uxtb	r4, r4
 80106e8:	2c01      	cmp	r4, #1
 80106ea:	d004      	beq.n	80106f6 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80106ec:	2300      	movs	r3, #0
 80106ee:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80106f2:	2002      	movs	r0, #2
 80106f4:	bd38      	pop	{r3, r4, r5, pc}
 80106f6:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80106f8:	2002      	movs	r0, #2
 80106fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80106fe:	2000      	movs	r0, #0
 8010700:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010702:	4620      	mov	r0, r4
 8010704:	f7ff fed4 	bl	80104b0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010708:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801070a:	233f      	movs	r3, #63	; 0x3f
 801070c:	4093      	lsls	r3, r2
 801070e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010710:	6822      	ldr	r2, [r4, #0]
 8010712:	6813      	ldr	r3, [r2, #0]
 8010714:	f043 0316 	orr.w	r3, r3, #22
 8010718:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 801071a:	6822      	ldr	r2, [r4, #0]
 801071c:	6953      	ldr	r3, [r2, #20]
 801071e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010722:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8010724:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010726:	b123      	cbz	r3, 8010732 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8010728:	6822      	ldr	r2, [r4, #0]
 801072a:	6813      	ldr	r3, [r2, #0]
 801072c:	f043 0308 	orr.w	r3, r3, #8
 8010730:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8010732:	6822      	ldr	r2, [r4, #0]
 8010734:	6813      	ldr	r3, [r2, #0]
 8010736:	f043 0301 	orr.w	r3, r3, #1
 801073a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801073c:	2000      	movs	r0, #0
 801073e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 8010740:	2002      	movs	r0, #2
}
 8010742:	bd38      	pop	{r3, r4, r5, pc}

08010744 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010744:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8010748:	b2db      	uxtb	r3, r3
 801074a:	2b02      	cmp	r3, #2
 801074c:	d003      	beq.n	8010756 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801074e:	2380      	movs	r3, #128	; 0x80
 8010750:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8010752:	2001      	movs	r0, #1
 8010754:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8010756:	2305      	movs	r3, #5
 8010758:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 801075c:	6802      	ldr	r2, [r0, #0]
 801075e:	6813      	ldr	r3, [r2, #0]
 8010760:	f023 0301 	bic.w	r3, r3, #1
 8010764:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8010766:	2000      	movs	r0, #0
}
 8010768:	4770      	bx	lr
	...

0801076c <HAL_DMA_IRQHandler>:
{
 801076c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801076e:	b083      	sub	sp, #12
 8010770:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8010772:	2300      	movs	r3, #0
 8010774:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010776:	4b72      	ldr	r3, [pc, #456]	; (8010940 <HAL_DMA_IRQHandler+0x1d4>)
 8010778:	681d      	ldr	r5, [r3, #0]
 801077a:	4b72      	ldr	r3, [pc, #456]	; (8010944 <HAL_DMA_IRQHandler+0x1d8>)
 801077c:	fba3 3505 	umull	r3, r5, r3, r5
 8010780:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010782:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8010784:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010786:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8010788:	2308      	movs	r3, #8
 801078a:	4093      	lsls	r3, r2
 801078c:	421e      	tst	r6, r3
 801078e:	d010      	beq.n	80107b2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010790:	6803      	ldr	r3, [r0, #0]
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	f012 0f04 	tst.w	r2, #4
 8010798:	d00b      	beq.n	80107b2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	f022 0204 	bic.w	r2, r2, #4
 80107a0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80107a2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80107a4:	2308      	movs	r3, #8
 80107a6:	4093      	lsls	r3, r2
 80107a8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80107aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80107ac:	f043 0301 	orr.w	r3, r3, #1
 80107b0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80107b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80107b4:	2301      	movs	r3, #1
 80107b6:	4093      	lsls	r3, r2
 80107b8:	421e      	tst	r6, r3
 80107ba:	d009      	beq.n	80107d0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80107bc:	6822      	ldr	r2, [r4, #0]
 80107be:	6952      	ldr	r2, [r2, #20]
 80107c0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80107c4:	d004      	beq.n	80107d0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80107c6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80107c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80107ca:	f043 0302 	orr.w	r3, r3, #2
 80107ce:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80107d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80107d2:	2304      	movs	r3, #4
 80107d4:	4093      	lsls	r3, r2
 80107d6:	421e      	tst	r6, r3
 80107d8:	d009      	beq.n	80107ee <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80107da:	6822      	ldr	r2, [r4, #0]
 80107dc:	6812      	ldr	r2, [r2, #0]
 80107de:	f012 0f02 	tst.w	r2, #2
 80107e2:	d004      	beq.n	80107ee <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80107e4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80107e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80107e8:	f043 0304 	orr.w	r3, r3, #4
 80107ec:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80107ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80107f0:	2310      	movs	r3, #16
 80107f2:	4093      	lsls	r3, r2
 80107f4:	421e      	tst	r6, r3
 80107f6:	d024      	beq.n	8010842 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80107f8:	6822      	ldr	r2, [r4, #0]
 80107fa:	6812      	ldr	r2, [r2, #0]
 80107fc:	f012 0f08 	tst.w	r2, #8
 8010800:	d01f      	beq.n	8010842 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010802:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010804:	6823      	ldr	r3, [r4, #0]
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 801080c:	d00d      	beq.n	801082a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8010814:	d104      	bne.n	8010820 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8010816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010818:	b19b      	cbz	r3, 8010842 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 801081a:	4620      	mov	r0, r4
 801081c:	4798      	blx	r3
 801081e:	e010      	b.n	8010842 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010820:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010822:	b173      	cbz	r3, 8010842 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8010824:	4620      	mov	r0, r4
 8010826:	4798      	blx	r3
 8010828:	e00b      	b.n	8010842 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8010830:	d103      	bne.n	801083a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	f022 0208 	bic.w	r2, r2, #8
 8010838:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 801083a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801083c:	b10b      	cbz	r3, 8010842 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 801083e:	4620      	mov	r0, r4
 8010840:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8010842:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010844:	2320      	movs	r3, #32
 8010846:	4093      	lsls	r3, r2
 8010848:	421e      	tst	r6, r3
 801084a:	d055      	beq.n	80108f8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801084c:	6822      	ldr	r2, [r4, #0]
 801084e:	6812      	ldr	r2, [r2, #0]
 8010850:	f012 0f10 	tst.w	r2, #16
 8010854:	d050      	beq.n	80108f8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010856:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010858:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801085c:	b2db      	uxtb	r3, r3
 801085e:	2b05      	cmp	r3, #5
 8010860:	d00e      	beq.n	8010880 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010862:	6823      	ldr	r3, [r4, #0]
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 801086a:	d033      	beq.n	80108d4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8010872:	d12a      	bne.n	80108ca <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8010874:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010876:	2b00      	cmp	r3, #0
 8010878:	d03e      	beq.n	80108f8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 801087a:	4620      	mov	r0, r4
 801087c:	4798      	blx	r3
 801087e:	e03b      	b.n	80108f8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010880:	6822      	ldr	r2, [r4, #0]
 8010882:	6813      	ldr	r3, [r2, #0]
 8010884:	f023 0316 	bic.w	r3, r3, #22
 8010888:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801088a:	6822      	ldr	r2, [r4, #0]
 801088c:	6953      	ldr	r3, [r2, #20]
 801088e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010892:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010896:	b1a3      	cbz	r3, 80108c2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010898:	6822      	ldr	r2, [r4, #0]
 801089a:	6813      	ldr	r3, [r2, #0]
 801089c:	f023 0308 	bic.w	r3, r3, #8
 80108a0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80108a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80108a4:	233f      	movs	r3, #63	; 0x3f
 80108a6:	4093      	lsls	r3, r2
 80108a8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80108aa:	2300      	movs	r3, #0
 80108ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80108b0:	2301      	movs	r3, #1
 80108b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80108b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d03f      	beq.n	801093c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80108bc:	4620      	mov	r0, r4
 80108be:	4798      	blx	r3
 80108c0:	e03c      	b.n	801093c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80108c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1e7      	bne.n	8010898 <HAL_DMA_IRQHandler+0x12c>
 80108c8:	e7eb      	b.n	80108a2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80108ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80108cc:	b1a3      	cbz	r3, 80108f8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80108ce:	4620      	mov	r0, r4
 80108d0:	4798      	blx	r3
 80108d2:	e011      	b.n	80108f8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80108da:	d109      	bne.n	80108f0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	f022 0210 	bic.w	r2, r2, #16
 80108e2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80108e4:	2300      	movs	r3, #0
 80108e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80108ea:	2301      	movs	r3, #1
 80108ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80108f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80108f2:	b10b      	cbz	r3, 80108f8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80108f4:	4620      	mov	r0, r4
 80108f6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80108f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80108fa:	b1fb      	cbz	r3, 801093c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80108fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80108fe:	f013 0f01 	tst.w	r3, #1
 8010902:	d017      	beq.n	8010934 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8010904:	2305      	movs	r3, #5
 8010906:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 801090a:	6822      	ldr	r2, [r4, #0]
 801090c:	6813      	ldr	r3, [r2, #0]
 801090e:	f023 0301 	bic.w	r3, r3, #1
 8010912:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8010914:	9b01      	ldr	r3, [sp, #4]
 8010916:	3301      	adds	r3, #1
 8010918:	9301      	str	r3, [sp, #4]
 801091a:	429d      	cmp	r5, r3
 801091c:	d304      	bcc.n	8010928 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f013 0f01 	tst.w	r3, #1
 8010926:	d1f5      	bne.n	8010914 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8010928:	2300      	movs	r3, #0
 801092a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 801092e:	2301      	movs	r3, #1
 8010930:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8010934:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010936:	b10b      	cbz	r3, 801093c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8010938:	4620      	mov	r0, r4
 801093a:	4798      	blx	r3
}
 801093c:	b003      	add	sp, #12
 801093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010940:	20000024 	.word	0x20000024
 8010944:	1b4e81b5 	.word	0x1b4e81b5

08010948 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8010948:	7950      	ldrb	r0, [r2, #5]
 801094a:	7913      	ldrb	r3, [r2, #4]
 801094c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8010950:	4807      	ldr	r0, [pc, #28]	; (8010970 <ETH_MACAddressConfig+0x28>)
 8010952:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8010954:	78d0      	ldrb	r0, [r2, #3]
 8010956:	7893      	ldrb	r3, [r2, #2]
 8010958:	041b      	lsls	r3, r3, #16
 801095a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801095e:	7850      	ldrb	r0, [r2, #1]
 8010960:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8010964:	7812      	ldrb	r2, [r2, #0]
 8010966:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8010968:	4a02      	ldr	r2, [pc, #8]	; (8010974 <ETH_MACAddressConfig+0x2c>)
 801096a:	508b      	str	r3, [r1, r2]
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	40028040 	.word	0x40028040
 8010974:	40028044 	.word	0x40028044

08010978 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8010978:	6801      	ldr	r1, [r0, #0]
 801097a:	f241 0218 	movw	r2, #4120	; 0x1018
 801097e:	588b      	ldr	r3, [r1, r2]
 8010980:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010984:	508b      	str	r3, [r1, r2]
 8010986:	4770      	bx	lr

08010988 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8010988:	6801      	ldr	r1, [r0, #0]
 801098a:	f241 0218 	movw	r2, #4120	; 0x1018
 801098e:	588b      	ldr	r3, [r1, r2]
 8010990:	f043 0302 	orr.w	r3, r3, #2
 8010994:	508b      	str	r3, [r1, r2]
 8010996:	4770      	bx	lr

08010998 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8010998:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 801099a:	4b08      	ldr	r3, [pc, #32]	; (80109bc <ETH_Delay+0x24>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	4a08      	ldr	r2, [pc, #32]	; (80109c0 <ETH_Delay+0x28>)
 80109a0:	fba2 2303 	umull	r2, r3, r2, r3
 80109a4:	0a5b      	lsrs	r3, r3, #9
 80109a6:	fb00 f003 	mul.w	r0, r0, r3
 80109aa:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80109ac:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80109ae:	9b01      	ldr	r3, [sp, #4]
 80109b0:	1e5a      	subs	r2, r3, #1
 80109b2:	9201      	str	r2, [sp, #4]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1f9      	bne.n	80109ac <ETH_Delay+0x14>
}
 80109b8:	b002      	add	sp, #8
 80109ba:	4770      	bx	lr
 80109bc:	20000024 	.word	0x20000024
 80109c0:	10624dd3 	.word	0x10624dd3

080109c4 <ETH_MACTransmissionEnable>:
{ 
 80109c4:	b510      	push	{r4, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80109ca:	2300      	movs	r3, #0
 80109cc:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80109ce:	6802      	ldr	r2, [r0, #0]
 80109d0:	6813      	ldr	r3, [r2, #0]
 80109d2:	f043 0308 	orr.w	r3, r3, #8
 80109d6:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80109d8:	6803      	ldr	r3, [r0, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80109de:	2001      	movs	r0, #1
 80109e0:	f7ff ffda 	bl	8010998 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80109e4:	6823      	ldr	r3, [r4, #0]
 80109e6:	9a01      	ldr	r2, [sp, #4]
 80109e8:	601a      	str	r2, [r3, #0]
}
 80109ea:	b002      	add	sp, #8
 80109ec:	bd10      	pop	{r4, pc}

080109ee <ETH_MACReceptionEnable>:
{ 
 80109ee:	b510      	push	{r4, lr}
 80109f0:	b082      	sub	sp, #8
 80109f2:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80109f4:	2300      	movs	r3, #0
 80109f6:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80109f8:	6802      	ldr	r2, [r0, #0]
 80109fa:	6813      	ldr	r3, [r2, #0]
 80109fc:	f043 0304 	orr.w	r3, r3, #4
 8010a00:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010a02:	6803      	ldr	r3, [r0, #0]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010a08:	2001      	movs	r0, #1
 8010a0a:	f7ff ffc5 	bl	8010998 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	9a01      	ldr	r2, [sp, #4]
 8010a12:	601a      	str	r2, [r3, #0]
}
 8010a14:	b002      	add	sp, #8
 8010a16:	bd10      	pop	{r4, pc}

08010a18 <ETH_FlushTransmitFIFO>:
{
 8010a18:	b530      	push	{r4, r5, lr}
 8010a1a:	b083      	sub	sp, #12
 8010a1c:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8010a22:	6802      	ldr	r2, [r0, #0]
 8010a24:	f241 0418 	movw	r4, #4120	; 0x1018
 8010a28:	5913      	ldr	r3, [r2, r4]
 8010a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a2e:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8010a30:	6803      	ldr	r3, [r0, #0]
 8010a32:	591b      	ldr	r3, [r3, r4]
 8010a34:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010a36:	2001      	movs	r0, #1
 8010a38:	f7ff ffae 	bl	8010998 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8010a3c:	682b      	ldr	r3, [r5, #0]
 8010a3e:	9a01      	ldr	r2, [sp, #4]
 8010a40:	511a      	str	r2, [r3, r4]
}
 8010a42:	b003      	add	sp, #12
 8010a44:	bd30      	pop	{r4, r5, pc}
	...

08010a48 <ETH_MACDMAConfig>:
{
 8010a48:	b570      	push	{r4, r5, r6, lr}
 8010a4a:	b09e      	sub	sp, #120	; 0x78
 8010a4c:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8010a4e:	b129      	cbz	r1, 8010a5c <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8010a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a54:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8010a56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010a5a:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010a5c:	69e3      	ldr	r3, [r4, #28]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d16a      	bne.n	8010b38 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8010a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a66:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8010a68:	6821      	ldr	r1, [r4, #0]
 8010a6a:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8010a6c:	4a39      	ldr	r2, [pc, #228]	; (8010b54 <ETH_MACDMAConfig+0x10c>)
 8010a6e:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8010a70:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8010a72:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8010a74:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8010a76:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8010a78:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8010a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8010a7e:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8010a80:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a86:	2001      	movs	r0, #1
 8010a88:	f7ff fca0 	bl	80103cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8010a8c:	6823      	ldr	r3, [r4, #0]
 8010a8e:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8010a90:	6823      	ldr	r3, [r4, #0]
 8010a92:	2240      	movs	r2, #64	; 0x40
 8010a94:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8010a96:	6823      	ldr	r3, [r4, #0]
 8010a98:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a9a:	2001      	movs	r0, #1
 8010a9c:	f7ff fc96 	bl	80103cc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8010aa4:	6823      	ldr	r3, [r4, #0]
 8010aa6:	2500      	movs	r5, #0
 8010aa8:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010aae:	6822      	ldr	r2, [r4, #0]
 8010ab0:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8010ab2:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8010ab6:	041b      	lsls	r3, r3, #16
 8010ab8:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8010aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8010abe:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010ac0:	6823      	ldr	r3, [r4, #0]
 8010ac2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010ac4:	2001      	movs	r0, #1
 8010ac6:	f7ff fc81 	bl	80103cc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8010aca:	6823      	ldr	r3, [r4, #0]
 8010acc:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8010ace:	6823      	ldr	r3, [r4, #0]
 8010ad0:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8010ad6:	2001      	movs	r0, #1
 8010ad8:	f7ff fc78 	bl	80103cc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8010adc:	6823      	ldr	r3, [r4, #0]
 8010ade:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8010ae0:	6822      	ldr	r2, [r4, #0]
 8010ae2:	f241 0518 	movw	r5, #4120	; 0x1018
 8010ae6:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8010ae8:	4b1b      	ldr	r3, [pc, #108]	; (8010b58 <ETH_MACDMAConfig+0x110>)
 8010aea:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8010aec:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8010af0:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8010af4:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8010af6:	6823      	ldr	r3, [r4, #0]
 8010af8:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8010afa:	2001      	movs	r0, #1
 8010afc:	f7ff fc66 	bl	80103cc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8010b00:	6823      	ldr	r3, [r4, #0]
 8010b02:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8010b04:	6823      	ldr	r3, [r4, #0]
 8010b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b0a:	4a14      	ldr	r2, [pc, #80]	; (8010b5c <ETH_MACDMAConfig+0x114>)
 8010b0c:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b14:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8010b16:	2001      	movs	r0, #1
 8010b18:	f7ff fc58 	bl	80103cc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8010b1c:	6823      	ldr	r3, [r4, #0]
 8010b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b22:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8010b24:	69a3      	ldr	r3, [r4, #24]
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d009      	beq.n	8010b3e <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8010b2a:	6962      	ldr	r2, [r4, #20]
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f7ff ff0a 	bl	8010948 <ETH_MACAddressConfig>
}
 8010b34:	b01e      	add	sp, #120	; 0x78
 8010b36:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	9307      	str	r3, [sp, #28]
 8010b3c:	e794      	b.n	8010a68 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8010b3e:	6821      	ldr	r1, [r4, #0]
 8010b40:	f241 021c 	movw	r2, #4124	; 0x101c
 8010b44:	588b      	ldr	r3, [r1, r2]
 8010b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b4e:	508b      	str	r3, [r1, r2]
 8010b50:	e7eb      	b.n	8010b2a <ETH_MACDMAConfig+0xe2>
 8010b52:	bf00      	nop
 8010b54:	ff20810f 	.word	0xff20810f
 8010b58:	f8de3f23 	.word	0xf8de3f23
 8010b5c:	02c12080 	.word	0x02c12080

08010b60 <HAL_ETH_DMATxDescListInit>:
{
 8010b60:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8010b62:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010b66:	2c01      	cmp	r4, #1
 8010b68:	d031      	beq.n	8010bce <HAL_ETH_DMATxDescListInit+0x6e>
 8010b6a:	2401      	movs	r4, #1
 8010b6c:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010b70:	2402      	movs	r4, #2
 8010b72:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8010b76:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8010b78:	2400      	movs	r4, #0
 8010b7a:	e001      	b.n	8010b80 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8010b7c:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 8010b7e:	3401      	adds	r4, #1
 8010b80:	429c      	cmp	r4, r3
 8010b82:	d217      	bcs.n	8010bb4 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8010b84:	0165      	lsls	r5, r4, #5
 8010b86:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8010b88:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8010b8c:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8010b8e:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8010b92:	fb06 2604 	mla	r6, r6, r4, r2
 8010b96:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010b98:	69c6      	ldr	r6, [r0, #28]
 8010b9a:	b91e      	cbnz	r6, 8010ba4 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8010b9c:	594e      	ldr	r6, [r1, r5]
 8010b9e:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8010ba2:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 8010ba4:	1e5d      	subs	r5, r3, #1
 8010ba6:	42ac      	cmp	r4, r5
 8010ba8:	d2e8      	bcs.n	8010b7c <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8010baa:	1c65      	adds	r5, r4, #1
 8010bac:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8010bb0:	60fd      	str	r5, [r7, #12]
 8010bb2:	e7e4      	b.n	8010b7e <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8010bb4:	6802      	ldr	r2, [r0, #0]
 8010bb6:	f241 0310 	movw	r3, #4112	; 0x1010
 8010bba:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010bc8:	4618      	mov	r0, r3
}
 8010bca:	bcf0      	pop	{r4, r5, r6, r7}
 8010bcc:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010bce:	2002      	movs	r0, #2
 8010bd0:	e7fb      	b.n	8010bca <HAL_ETH_DMATxDescListInit+0x6a>

08010bd2 <HAL_ETH_DMARxDescListInit>:
{
 8010bd2:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8010bd4:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010bd8:	2c01      	cmp	r4, #1
 8010bda:	d02e      	beq.n	8010c3a <HAL_ETH_DMARxDescListInit+0x68>
 8010bdc:	2401      	movs	r4, #1
 8010bde:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010be2:	2402      	movs	r4, #2
 8010be4:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8010be8:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8010bea:	2400      	movs	r4, #0
 8010bec:	e001      	b.n	8010bf2 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8010bee:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 8010bf0:	3401      	adds	r4, #1
 8010bf2:	429c      	cmp	r4, r3
 8010bf4:	d214      	bcs.n	8010c20 <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 8010bf6:	0166      	lsls	r6, r4, #5
 8010bf8:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8010bfa:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8010bfe:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8010c00:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8010c04:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8010c06:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8010c0a:	fb06 2604 	mla	r6, r6, r4, r2
 8010c0e:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8010c10:	1e5e      	subs	r6, r3, #1
 8010c12:	42b4      	cmp	r4, r6
 8010c14:	d2eb      	bcs.n	8010bee <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8010c16:	1c66      	adds	r6, r4, #1
 8010c18:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8010c1c:	60ee      	str	r6, [r5, #12]
 8010c1e:	e7e7      	b.n	8010bf0 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8010c20:	6802      	ldr	r2, [r0, #0]
 8010c22:	f241 030c 	movw	r3, #4108	; 0x100c
 8010c26:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010c2e:	2300      	movs	r3, #0
 8010c30:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010c34:	4618      	mov	r0, r3
}
 8010c36:	bcf0      	pop	{r4, r5, r6, r7}
 8010c38:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010c3a:	2002      	movs	r0, #2
 8010c3c:	e7fb      	b.n	8010c36 <HAL_ETH_DMARxDescListInit+0x64>
	...

08010c40 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8010c40:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	f000 8087 	beq.w	8010d58 <HAL_ETH_TransmitFrame+0x118>
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010c50:	2302      	movs	r3, #2
 8010c52:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8010c56:	b199      	cbz	r1, 8010c80 <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8010c58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	2a00      	cmp	r2, #0
 8010c5e:	db17      	blt.n	8010c90 <HAL_ETH_TransmitFrame+0x50>
{
 8010c60:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8010c62:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010c66:	4291      	cmp	r1, r2
 8010c68:	d91a      	bls.n	8010ca0 <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8010c6a:	4c3c      	ldr	r4, [pc, #240]	; (8010d5c <HAL_ETH_TransmitFrame+0x11c>)
 8010c6c:	fba4 2401 	umull	r2, r4, r4, r1
 8010c70:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8010c72:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010c76:	fb02 1214 	mls	r2, r2, r4, r1
 8010c7a:	b192      	cbz	r2, 8010ca2 <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8010c7c:	3401      	adds	r4, #1
 8010c7e:	e010      	b.n	8010ca2 <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 8010c80:	2301      	movs	r3, #1
 8010c82:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010c86:	2200      	movs	r2, #0
 8010c88:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8010c90:	2312      	movs	r3, #18
 8010c92:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010c96:	2300      	movs	r3, #0
 8010c98:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 8010c9c:	2001      	movs	r0, #1
 8010c9e:	4770      	bx	lr
    bufcount = 1U;
 8010ca0:	2401      	movs	r4, #1
  if (bufcount == 1U)
 8010ca2:	2c01      	cmp	r4, #1
 8010ca4:	d001      	beq.n	8010caa <HAL_ETH_TransmitFrame+0x6a>
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	e037      	b.n	8010d1a <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8010caa:	681a      	ldr	r2, [r3, #0]
 8010cac:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8010cb0:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8010cb2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010cb4:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8010cb8:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8010cba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010cbc:	6813      	ldr	r3, [r2, #0]
 8010cbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010cc2:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8010cc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8010cca:	6803      	ldr	r3, [r0, #0]
 8010ccc:	f241 0214 	movw	r2, #4116	; 0x1014
 8010cd0:	589a      	ldr	r2, [r3, r2]
 8010cd2:	f012 0f04 	tst.w	r2, #4
 8010cd6:	d008      	beq.n	8010cea <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8010cd8:	2104      	movs	r1, #4
 8010cda:	f241 0214 	movw	r2, #4116	; 0x1014
 8010cde:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8010ce0:	6802      	ldr	r2, [r0, #0]
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	f241 0304 	movw	r3, #4100	; 0x1004
 8010ce8:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8010cea:	2301      	movs	r3, #1
 8010cec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010cf6:	4618      	mov	r0, r3
}
 8010cf8:	bc30      	pop	{r4, r5}
 8010cfa:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8010cfc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010cfe:	682a      	ldr	r2, [r5, #0]
 8010d00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010d04:	602a      	str	r2, [r5, #0]
 8010d06:	e011      	b.n	8010d2c <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8010d08:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010d0a:	682a      	ldr	r2, [r5, #0]
 8010d0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8010d10:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8010d12:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010d14:	68d2      	ldr	r2, [r2, #12]
 8010d16:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8010d18:	3301      	adds	r3, #1
 8010d1a:	429c      	cmp	r4, r3
 8010d1c:	d9d5      	bls.n	8010cca <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8010d1e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010d20:	682a      	ldr	r2, [r5, #0]
 8010d22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010d26:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d0e7      	beq.n	8010cfc <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8010d2c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010d2e:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8010d32:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8010d34:	1e62      	subs	r2, r4, #1
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d1e6      	bne.n	8010d08 <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8010d3a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010d3c:	682a      	ldr	r2, [r5, #0]
 8010d3e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8010d42:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8010d44:	4a06      	ldr	r2, [pc, #24]	; (8010d60 <HAL_ETH_TransmitFrame+0x120>)
 8010d46:	fb02 1204 	mla	r2, r2, r4, r1
 8010d4a:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8010d4e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010d50:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010d54:	606a      	str	r2, [r5, #4]
 8010d56:	e7d7      	b.n	8010d08 <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8010d58:	2002      	movs	r0, #2
 8010d5a:	4770      	bx	lr
 8010d5c:	ac02b00b 	.word	0xac02b00b
 8010d60:	fffffa0c 	.word	0xfffffa0c

08010d64 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8010d64:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d045      	beq.n	8010df8 <HAL_ETH_GetReceivedFrame_IT+0x94>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010d72:	2302      	movs	r3, #2
 8010d74:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0U;
 8010d78:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8010d7a:	e00a      	b.n	8010d92 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8010d7c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8010d7e:	2201      	movs	r2, #1
 8010d80:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	6283      	str	r3, [r0, #40]	; 0x28
 8010d86:	e004      	b.n	8010d92 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8010d88:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8010d8a:	3201      	adds	r2, #1
 8010d8c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8010d92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	2a00      	cmp	r2, #0
 8010d98:	db26      	blt.n	8010de8 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8010d9a:	2903      	cmp	r1, #3
 8010d9c:	d824      	bhi.n	8010de8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8010d9e:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8010da6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8010daa:	d0e7      	beq.n	8010d7c <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	f412 7f40 	tst.w	r2, #768	; 0x300
 8010db2:	d0e9      	beq.n	8010d88 <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8010db4:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8010db6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8010db8:	3201      	adds	r2, #1
 8010dba:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8010dbc:	2a01      	cmp	r2, #1
 8010dbe:	d011      	beq.n	8010de4 <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8010dc6:	3a04      	subs	r2, #4
 8010dc8:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8010dca:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8010dcc:	6892      	ldr	r2, [r2, #8]
 8010dce:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8010de0:	4618      	mov	r0, r3
 8010de2:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8010de4:	6303      	str	r3, [r0, #48]	; 0x30
 8010de6:	e7eb      	b.n	8010dc0 <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8010de8:	2301      	movs	r3, #1
 8010dea:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010dee:	2200      	movs	r2, #0
 8010df0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8010df4:	4618      	mov	r0, r3
 8010df6:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010df8:	2002      	movs	r0, #2
}
 8010dfa:	4770      	bx	lr

08010dfc <HAL_ETH_TxCpltCallback>:
{
 8010dfc:	4770      	bx	lr

08010dfe <HAL_ETH_ErrorCallback>:
{
 8010dfe:	4770      	bx	lr

08010e00 <HAL_ETH_IRQHandler>:
{
 8010e00:	b510      	push	{r4, lr}
 8010e02:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8010e04:	6803      	ldr	r3, [r0, #0]
 8010e06:	f241 0214 	movw	r2, #4116	; 0x1014
 8010e0a:	589a      	ldr	r2, [r3, r2]
 8010e0c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8010e10:	d111      	bne.n	8010e36 <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8010e12:	f241 0214 	movw	r2, #4116	; 0x1014
 8010e16:	589b      	ldr	r3, [r3, r2]
 8010e18:	f013 0f01 	tst.w	r3, #1
 8010e1c:	d119      	bne.n	8010e52 <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8010e1e:	6822      	ldr	r2, [r4, #0]
 8010e20:	f241 0314 	movw	r3, #4116	; 0x1014
 8010e24:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8010e28:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8010e2a:	6822      	ldr	r2, [r4, #0]
 8010e2c:	58d3      	ldr	r3, [r2, r3]
 8010e2e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8010e32:	d11b      	bne.n	8010e6c <HAL_ETH_IRQHandler+0x6c>
 8010e34:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8010e36:	f00c fad7 	bl	801d3e8 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8010e3a:	6822      	ldr	r2, [r4, #0]
 8010e3c:	2140      	movs	r1, #64	; 0x40
 8010e3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8010e42:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8010e44:	2301      	movs	r3, #1
 8010e46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e50:	e7e5      	b.n	8010e1e <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8010e52:	f7ff ffd3 	bl	8010dfc <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8010e56:	6821      	ldr	r1, [r4, #0]
 8010e58:	2301      	movs	r3, #1
 8010e5a:	f241 0214 	movw	r2, #4116	; 0x1014
 8010e5e:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8010e60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010e64:	2300      	movs	r3, #0
 8010e66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e6a:	e7d8      	b.n	8010e1e <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f7ff ffc6 	bl	8010dfe <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8010e72:	6822      	ldr	r2, [r4, #0]
 8010e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010e78:	f241 0314 	movw	r3, #4116	; 0x1014
 8010e7c:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8010e7e:	2301      	movs	r3, #1
 8010e80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010e84:	2300      	movs	r3, #0
 8010e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010e8a:	e7d3      	b.n	8010e34 <HAL_ETH_IRQHandler+0x34>

08010e8c <HAL_ETH_ReadPHYRegister>:
{
 8010e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8010e8e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	2b82      	cmp	r3, #130	; 0x82
 8010e96:	d101      	bne.n	8010e9c <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8010e98:	2002      	movs	r0, #2
}
 8010e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e9c:	4616      	mov	r6, r2
 8010e9e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8010ea0:	2382      	movs	r3, #130	; 0x82
 8010ea2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8010ea6:	6802      	ldr	r2, [r0, #0]
 8010ea8:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8010eaa:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8010eae:	8a03      	ldrh	r3, [r0, #16]
 8010eb0:	02db      	lsls	r3, r3, #11
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8010eb6:	0189      	lsls	r1, r1, #6
 8010eb8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8010ebc:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8010ebe:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8010ec2:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8010ec4:	f7ff fa7c 	bl	80103c0 <HAL_GetTick>
 8010ec8:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8010eca:	f014 0f01 	tst.w	r4, #1
 8010ece:	d010      	beq.n	8010ef2 <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8010ed0:	f7ff fa76 	bl	80103c0 <HAL_GetTick>
 8010ed4:	1bc0      	subs	r0, r0, r7
 8010ed6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010eda:	d202      	bcs.n	8010ee2 <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8010edc:	682b      	ldr	r3, [r5, #0]
 8010ede:	691c      	ldr	r4, [r3, #16]
 8010ee0:	e7f3      	b.n	8010eca <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010ee8:	2300      	movs	r3, #0
 8010eea:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8010eee:	2003      	movs	r0, #3
 8010ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8010ef2:	682b      	ldr	r3, [r5, #0]
 8010ef4:	695b      	ldr	r3, [r3, #20]
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8010efa:	2301      	movs	r3, #1
 8010efc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8010f00:	2000      	movs	r0, #0
 8010f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f04 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8010f04:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	2b42      	cmp	r3, #66	; 0x42
 8010f0c:	d101      	bne.n	8010f12 <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8010f0e:	2002      	movs	r0, #2
 8010f10:	4770      	bx	lr
{
 8010f12:	b570      	push	{r4, r5, r6, lr}
 8010f14:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8010f16:	2342      	movs	r3, #66	; 0x42
 8010f18:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8010f1c:	6800      	ldr	r0, [r0, #0]
 8010f1e:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8010f20:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8010f24:	8a2b      	ldrh	r3, [r5, #16]
 8010f26:	02db      	lsls	r3, r3, #11
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8010f2c:	0189      	lsls	r1, r1, #6
 8010f2e:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8010f32:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8010f34:	f044 0403 	orr.w	r4, r4, #3
 8010f38:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8010f3a:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8010f3c:	682b      	ldr	r3, [r5, #0]
 8010f3e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8010f40:	f7ff fa3e 	bl	80103c0 <HAL_GetTick>
 8010f44:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8010f46:	f014 0f01 	tst.w	r4, #1
 8010f4a:	d010      	beq.n	8010f6e <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8010f4c:	f7ff fa38 	bl	80103c0 <HAL_GetTick>
 8010f50:	1b80      	subs	r0, r0, r6
 8010f52:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010f56:	d202      	bcs.n	8010f5e <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8010f58:	682b      	ldr	r3, [r5, #0]
 8010f5a:	691c      	ldr	r4, [r3, #16]
 8010f5c:	e7f3      	b.n	8010f46 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010f64:	2300      	movs	r3, #0
 8010f66:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8010f6a:	2003      	movs	r0, #3
 8010f6c:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8010f6e:	2301      	movs	r3, #1
 8010f70:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8010f74:	2000      	movs	r0, #0
 8010f76:	bd70      	pop	{r4, r5, r6, pc}

08010f78 <HAL_ETH_Init>:
{
 8010f78:	b570      	push	{r4, r5, r6, lr}
 8010f7a:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8010f80:	2800      	cmp	r0, #0
 8010f82:	f000 810e 	beq.w	80111a2 <HAL_ETH_Init+0x22a>
 8010f86:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8010f88:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d034      	beq.n	8010ffa <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f90:	2300      	movs	r3, #0
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	4b84      	ldr	r3, [pc, #528]	; (80111a8 <HAL_ETH_Init+0x230>)
 8010f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8010f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fa4:	9300      	str	r3, [sp, #0]
 8010fa6:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8010fa8:	4b80      	ldr	r3, [pc, #512]	; (80111ac <HAL_ETH_Init+0x234>)
 8010faa:	685a      	ldr	r2, [r3, #4]
 8010fac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010fb0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8010fb2:	685a      	ldr	r2, [r3, #4]
 8010fb4:	6a21      	ldr	r1, [r4, #32]
 8010fb6:	430a      	orrs	r2, r1
 8010fb8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8010fba:	6823      	ldr	r3, [r4, #0]
 8010fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	f042 0201 	orr.w	r2, r2, #1
 8010fc6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010fc8:	f7ff f9fa 	bl	80103c0 <HAL_GetTick>
 8010fcc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8010fd4:	6812      	ldr	r2, [r2, #0]
 8010fd6:	f012 0f01 	tst.w	r2, #1
 8010fda:	d013      	beq.n	8011004 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8010fdc:	f7ff f9f0 	bl	80103c0 <HAL_GetTick>
 8010fe0:	1b40      	subs	r0, r0, r5
 8010fe2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8010fe6:	d9f2      	bls.n	8010fce <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8010fe8:	2503      	movs	r5, #3
 8010fea:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010fee:	2300      	movs	r3, #0
 8010ff0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	b002      	add	sp, #8
 8010ff8:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8010ffa:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8010ffe:	f00c f997 	bl	801d330 <HAL_ETH_MspInit>
 8011002:	e7c5      	b.n	8010f90 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8011004:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8011006:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 801100a:	f000 ff1d 	bl	8011e48 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 801100e:	4b68      	ldr	r3, [pc, #416]	; (80111b0 <HAL_ETH_Init+0x238>)
 8011010:	4403      	add	r3, r0
 8011012:	4a68      	ldr	r2, [pc, #416]	; (80111b4 <HAL_ETH_Init+0x23c>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d855      	bhi.n	80110c4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8011018:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8011020:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011024:	2100      	movs	r1, #0
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff ff6c 	bl	8010f04 <HAL_ETH_WritePHYRegister>
 801102c:	4605      	mov	r5, r0
 801102e:	2800      	cmp	r0, #0
 8011030:	d160      	bne.n	80110f4 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8011032:	20ff      	movs	r0, #255	; 0xff
 8011034:	f7ff f9ca 	bl	80103cc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8011038:	6863      	ldr	r3, [r4, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	f000 8091 	beq.w	8011162 <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8011040:	f7ff f9be 	bl	80103c0 <HAL_GetTick>
 8011044:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8011046:	aa01      	add	r2, sp, #4
 8011048:	2101      	movs	r1, #1
 801104a:	4620      	mov	r0, r4
 801104c:	f7ff ff1e 	bl	8010e8c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8011050:	f7ff f9b6 	bl	80103c0 <HAL_GetTick>
 8011054:	1b80      	subs	r0, r0, r6
 8011056:	f241 3388 	movw	r3, #5000	; 0x1388
 801105a:	4298      	cmp	r0, r3
 801105c:	d852      	bhi.n	8011104 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 801105e:	9b01      	ldr	r3, [sp, #4]
 8011060:	f013 0f04 	tst.w	r3, #4
 8011064:	d0ef      	beq.n	8011046 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8011066:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801106a:	2100      	movs	r1, #0
 801106c:	4620      	mov	r0, r4
 801106e:	f7ff ff49 	bl	8010f04 <HAL_ETH_WritePHYRegister>
 8011072:	2800      	cmp	r0, #0
 8011074:	d152      	bne.n	801111c <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8011076:	f7ff f9a3 	bl	80103c0 <HAL_GetTick>
 801107a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 801107c:	aa01      	add	r2, sp, #4
 801107e:	2101      	movs	r1, #1
 8011080:	4620      	mov	r0, r4
 8011082:	f7ff ff03 	bl	8010e8c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8011086:	f7ff f99b 	bl	80103c0 <HAL_GetTick>
 801108a:	1b80      	subs	r0, r0, r6
 801108c:	f241 3388 	movw	r3, #5000	; 0x1388
 8011090:	4298      	cmp	r0, r3
 8011092:	d84b      	bhi.n	801112c <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8011094:	9b01      	ldr	r3, [sp, #4]
 8011096:	f013 0f20 	tst.w	r3, #32
 801109a:	d0ef      	beq.n	801107c <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 801109c:	aa01      	add	r2, sp, #4
 801109e:	2110      	movs	r1, #16
 80110a0:	4620      	mov	r0, r4
 80110a2:	f7ff fef3 	bl	8010e8c <HAL_ETH_ReadPHYRegister>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d14c      	bne.n	8011144 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80110aa:	9b01      	ldr	r3, [sp, #4]
 80110ac:	f013 0f04 	tst.w	r3, #4
 80110b0:	d050      	beq.n	8011154 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80110b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110b6:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80110b8:	f013 0f02 	tst.w	r3, #2
 80110bc:	d04d      	beq.n	801115a <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80110be:	2300      	movs	r3, #0
 80110c0:	60a3      	str	r3, [r4, #8]
 80110c2:	e05e      	b.n	8011182 <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80110c4:	4b3c      	ldr	r3, [pc, #240]	; (80111b8 <HAL_ETH_Init+0x240>)
 80110c6:	4403      	add	r3, r0
 80110c8:	4a3c      	ldr	r2, [pc, #240]	; (80111bc <HAL_ETH_Init+0x244>)
 80110ca:	4293      	cmp	r3, r2
 80110cc:	d802      	bhi.n	80110d4 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80110ce:	f045 050c 	orr.w	r5, r5, #12
 80110d2:	e7a3      	b.n	801101c <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80110d4:	4b3a      	ldr	r3, [pc, #232]	; (80111c0 <HAL_ETH_Init+0x248>)
 80110d6:	4403      	add	r3, r0
 80110d8:	4a3a      	ldr	r2, [pc, #232]	; (80111c4 <HAL_ETH_Init+0x24c>)
 80110da:	4293      	cmp	r3, r2
 80110dc:	d99e      	bls.n	801101c <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80110de:	4b3a      	ldr	r3, [pc, #232]	; (80111c8 <HAL_ETH_Init+0x250>)
 80110e0:	4403      	add	r3, r0
 80110e2:	4a3a      	ldr	r2, [pc, #232]	; (80111cc <HAL_ETH_Init+0x254>)
 80110e4:	4293      	cmp	r3, r2
 80110e6:	d802      	bhi.n	80110ee <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80110e8:	f045 0504 	orr.w	r5, r5, #4
 80110ec:	e796      	b.n	801101c <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80110ee:	f045 0510 	orr.w	r5, r5, #16
 80110f2:	e793      	b.n	801101c <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 80110f4:	2101      	movs	r1, #1
 80110f6:	4620      	mov	r0, r4
 80110f8:	f7ff fca6 	bl	8010a48 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80110fc:	2501      	movs	r5, #1
 80110fe:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8011102:	e777      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8011104:	2101      	movs	r1, #1
 8011106:	4620      	mov	r0, r4
 8011108:	f7ff fc9e 	bl	8010a48 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 801110c:	2301      	movs	r3, #1
 801110e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8011112:	2300      	movs	r3, #0
 8011114:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8011118:	2503      	movs	r5, #3
 801111a:	e76b      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 801111c:	2101      	movs	r1, #1
 801111e:	4620      	mov	r0, r4
 8011120:	f7ff fc92 	bl	8010a48 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8011124:	2501      	movs	r5, #1
 8011126:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 801112a:	e763      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 801112c:	2101      	movs	r1, #1
 801112e:	4620      	mov	r0, r4
 8011130:	f7ff fc8a 	bl	8010a48 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8011134:	2301      	movs	r3, #1
 8011136:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 801113a:	2300      	movs	r3, #0
 801113c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8011140:	2503      	movs	r5, #3
 8011142:	e757      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8011144:	2101      	movs	r1, #1
 8011146:	4620      	mov	r0, r4
 8011148:	f7ff fc7e 	bl	8010a48 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 801114c:	2501      	movs	r5, #1
 801114e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8011152:	e74f      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8011154:	2200      	movs	r2, #0
 8011156:	60e2      	str	r2, [r4, #12]
 8011158:	e7ae      	b.n	80110b8 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 801115a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801115e:	60a3      	str	r3, [r4, #8]
 8011160:	e00f      	b.n	8011182 <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8011162:	68e3      	ldr	r3, [r4, #12]
 8011164:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8011168:	68a3      	ldr	r3, [r4, #8]
 801116a:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 801116e:	431a      	orrs	r2, r3
 8011170:	2100      	movs	r1, #0
 8011172:	4620      	mov	r0, r4
 8011174:	f7ff fec6 	bl	8010f04 <HAL_ETH_WritePHYRegister>
 8011178:	b958      	cbnz	r0, 8011192 <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 801117a:	f640 70ff 	movw	r0, #4095	; 0xfff
 801117e:	f7ff f925 	bl	80103cc <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8011182:	2100      	movs	r1, #0
 8011184:	4620      	mov	r0, r4
 8011186:	f7ff fc5f 	bl	8010a48 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 801118a:	2301      	movs	r3, #1
 801118c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8011190:	e730      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8011192:	2101      	movs	r1, #1
 8011194:	4620      	mov	r0, r4
 8011196:	f7ff fc57 	bl	8010a48 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 801119a:	2501      	movs	r5, #1
 801119c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80111a0:	e728      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 80111a2:	2501      	movs	r5, #1
 80111a4:	e726      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
 80111a6:	bf00      	nop
 80111a8:	40023800 	.word	0x40023800
 80111ac:	40013800 	.word	0x40013800
 80111b0:	feced300 	.word	0xfeced300
 80111b4:	00e4e1bf 	.word	0x00e4e1bf
 80111b8:	fde9f140 	.word	0xfde9f140
 80111bc:	017d783f 	.word	0x017d783f
 80111c0:	fc6c7900 	.word	0xfc6c7900
 80111c4:	026259ff 	.word	0x026259ff
 80111c8:	fa0a1f00 	.word	0xfa0a1f00
 80111cc:	02faf07f 	.word	0x02faf07f

080111d0 <HAL_ETH_Start>:
{  
 80111d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 80111d2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d101      	bne.n	80111de <HAL_ETH_Start+0xe>
 80111da:	2002      	movs	r0, #2
}
 80111dc:	bd38      	pop	{r3, r4, r5, pc}
 80111de:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 80111e0:	2501      	movs	r5, #1
 80111e2:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80111e6:	2302      	movs	r3, #2
 80111e8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 80111ec:	f7ff fbea 	bl	80109c4 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 80111f0:	4620      	mov	r0, r4
 80111f2:	f7ff fbfc 	bl	80109ee <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 80111f6:	4620      	mov	r0, r4
 80111f8:	f7ff fc0e 	bl	8010a18 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 80111fc:	4620      	mov	r0, r4
 80111fe:	f7ff fbbb 	bl	8010978 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8011202:	4620      	mov	r0, r4
 8011204:	f7ff fbc0 	bl	8010988 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8011208:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 801120c:	2000      	movs	r0, #0
 801120e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8011212:	bd38      	pop	{r3, r4, r5, pc}

08011214 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8011214:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011216:	4909      	ldr	r1, [pc, #36]	; (801123c <FLASH_Program_DoubleWord+0x28>)
 8011218:	690c      	ldr	r4, [r1, #16]
 801121a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 801121e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8011220:	690c      	ldr	r4, [r1, #16]
 8011222:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8011226:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011228:	690c      	ldr	r4, [r1, #16]
 801122a:	f044 0401 	orr.w	r4, r4, #1
 801122e:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8011230:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8011232:	6043      	str	r3, [r0, #4]
}
 8011234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop
 801123c:	40023c00 	.word	0x40023c00

08011240 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011240:	4b07      	ldr	r3, [pc, #28]	; (8011260 <FLASH_Program_Word+0x20>)
 8011242:	691a      	ldr	r2, [r3, #16]
 8011244:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011248:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801124a:	691a      	ldr	r2, [r3, #16]
 801124c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011250:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011252:	691a      	ldr	r2, [r3, #16]
 8011254:	f042 0201 	orr.w	r2, r2, #1
 8011258:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 801125a:	6001      	str	r1, [r0, #0]
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	40023c00 	.word	0x40023c00

08011264 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011264:	4b07      	ldr	r3, [pc, #28]	; (8011284 <FLASH_Program_HalfWord+0x20>)
 8011266:	691a      	ldr	r2, [r3, #16]
 8011268:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801126c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801126e:	691a      	ldr	r2, [r3, #16]
 8011270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011274:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011276:	691a      	ldr	r2, [r3, #16]
 8011278:	f042 0201 	orr.w	r2, r2, #1
 801127c:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 801127e:	8001      	strh	r1, [r0, #0]
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	40023c00 	.word	0x40023c00

08011288 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011288:	4b06      	ldr	r3, [pc, #24]	; (80112a4 <FLASH_Program_Byte+0x1c>)
 801128a:	691a      	ldr	r2, [r3, #16]
 801128c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011290:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8011292:	691a      	ldr	r2, [r3, #16]
 8011294:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011296:	691a      	ldr	r2, [r3, #16]
 8011298:	f042 0201 	orr.w	r2, r2, #1
 801129c:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 801129e:	7001      	strb	r1, [r0, #0]
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	40023c00 	.word	0x40023c00

080112a8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80112a8:	4b20      	ldr	r3, [pc, #128]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	f013 0f10 	tst.w	r3, #16
 80112b0:	d007      	beq.n	80112c2 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80112b2:	4a1f      	ldr	r2, [pc, #124]	; (8011330 <FLASH_SetErrorCode+0x88>)
 80112b4:	69d3      	ldr	r3, [r2, #28]
 80112b6:	f043 0310 	orr.w	r3, r3, #16
 80112ba:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80112bc:	2210      	movs	r2, #16
 80112be:	4b1b      	ldr	r3, [pc, #108]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80112c2:	4b1a      	ldr	r3, [pc, #104]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112c4:	68db      	ldr	r3, [r3, #12]
 80112c6:	f013 0f20 	tst.w	r3, #32
 80112ca:	d007      	beq.n	80112dc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80112cc:	4a18      	ldr	r2, [pc, #96]	; (8011330 <FLASH_SetErrorCode+0x88>)
 80112ce:	69d3      	ldr	r3, [r2, #28]
 80112d0:	f043 0308 	orr.w	r3, r3, #8
 80112d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80112d6:	2220      	movs	r2, #32
 80112d8:	4b14      	ldr	r3, [pc, #80]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80112dc:	4b13      	ldr	r3, [pc, #76]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80112e4:	d007      	beq.n	80112f6 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80112e6:	4a12      	ldr	r2, [pc, #72]	; (8011330 <FLASH_SetErrorCode+0x88>)
 80112e8:	69d3      	ldr	r3, [r2, #28]
 80112ea:	f043 0304 	orr.w	r3, r3, #4
 80112ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80112f0:	2240      	movs	r2, #64	; 0x40
 80112f2:	4b0e      	ldr	r3, [pc, #56]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80112f6:	4b0d      	ldr	r3, [pc, #52]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80112fe:	d007      	beq.n	8011310 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8011300:	4a0b      	ldr	r2, [pc, #44]	; (8011330 <FLASH_SetErrorCode+0x88>)
 8011302:	69d3      	ldr	r3, [r2, #28]
 8011304:	f043 0302 	orr.w	r3, r3, #2
 8011308:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801130a:	2280      	movs	r2, #128	; 0x80
 801130c:	4b07      	ldr	r3, [pc, #28]	; (801132c <FLASH_SetErrorCode+0x84>)
 801130e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8011310:	4b06      	ldr	r3, [pc, #24]	; (801132c <FLASH_SetErrorCode+0x84>)
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	f013 0f02 	tst.w	r3, #2
 8011318:	d007      	beq.n	801132a <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801131a:	4a05      	ldr	r2, [pc, #20]	; (8011330 <FLASH_SetErrorCode+0x88>)
 801131c:	69d3      	ldr	r3, [r2, #28]
 801131e:	f043 0320 	orr.w	r3, r3, #32
 8011322:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8011324:	2202      	movs	r2, #2
 8011326:	4b01      	ldr	r3, [pc, #4]	; (801132c <FLASH_SetErrorCode+0x84>)
 8011328:	60da      	str	r2, [r3, #12]
 801132a:	4770      	bx	lr
 801132c:	40023c00 	.word	0x40023c00
 8011330:	20004418 	.word	0x20004418

08011334 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011334:	4b09      	ldr	r3, [pc, #36]	; (801135c <HAL_FLASH_Unlock+0x28>)
 8011336:	691b      	ldr	r3, [r3, #16]
 8011338:	2b00      	cmp	r3, #0
 801133a:	db01      	blt.n	8011340 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 801133c:	2000      	movs	r0, #0
 801133e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011340:	4b06      	ldr	r3, [pc, #24]	; (801135c <HAL_FLASH_Unlock+0x28>)
 8011342:	4a07      	ldr	r2, [pc, #28]	; (8011360 <HAL_FLASH_Unlock+0x2c>)
 8011344:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011346:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 801134a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801134c:	691b      	ldr	r3, [r3, #16]
 801134e:	2b00      	cmp	r3, #0
 8011350:	db01      	blt.n	8011356 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8011352:	2000      	movs	r0, #0
 8011354:	4770      	bx	lr
      status = HAL_ERROR;
 8011356:	2001      	movs	r0, #1
}
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	40023c00 	.word	0x40023c00
 8011360:	45670123 	.word	0x45670123

08011364 <FLASH_WaitForLastOperation>:
{ 
 8011364:	b538      	push	{r3, r4, r5, lr}
 8011366:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011368:	2200      	movs	r2, #0
 801136a:	4b15      	ldr	r3, [pc, #84]	; (80113c0 <FLASH_WaitForLastOperation+0x5c>)
 801136c:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 801136e:	f7ff f827 	bl	80103c0 <HAL_GetTick>
 8011372:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011374:	4b13      	ldr	r3, [pc, #76]	; (80113c4 <FLASH_WaitForLastOperation+0x60>)
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801137c:	d00a      	beq.n	8011394 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 801137e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011382:	d0f7      	beq.n	8011374 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8011384:	b1cc      	cbz	r4, 80113ba <FLASH_WaitForLastOperation+0x56>
 8011386:	f7ff f81b 	bl	80103c0 <HAL_GetTick>
 801138a:	1b40      	subs	r0, r0, r5
 801138c:	4284      	cmp	r4, r0
 801138e:	d2f1      	bcs.n	8011374 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8011390:	2003      	movs	r0, #3
 8011392:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011394:	4b0b      	ldr	r3, [pc, #44]	; (80113c4 <FLASH_WaitForLastOperation+0x60>)
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	f013 0f01 	tst.w	r3, #1
 801139c:	d002      	beq.n	80113a4 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801139e:	2201      	movs	r2, #1
 80113a0:	4b08      	ldr	r3, [pc, #32]	; (80113c4 <FLASH_WaitForLastOperation+0x60>)
 80113a2:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80113a4:	4b07      	ldr	r3, [pc, #28]	; (80113c4 <FLASH_WaitForLastOperation+0x60>)
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 80113ac:	d101      	bne.n	80113b2 <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 80113ae:	2000      	movs	r0, #0
}  
 80113b0:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 80113b2:	f7ff ff79 	bl	80112a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80113b6:	2001      	movs	r0, #1
 80113b8:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 80113ba:	2003      	movs	r0, #3
 80113bc:	bd38      	pop	{r3, r4, r5, pc}
 80113be:	bf00      	nop
 80113c0:	20004418 	.word	0x20004418
 80113c4:	40023c00 	.word	0x40023c00

080113c8 <HAL_FLASH_Program>:
{
 80113c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80113cc:	4c1d      	ldr	r4, [pc, #116]	; (8011444 <HAL_FLASH_Program+0x7c>)
 80113ce:	7e24      	ldrb	r4, [r4, #24]
 80113d0:	2c01      	cmp	r4, #1
 80113d2:	d103      	bne.n	80113dc <HAL_FLASH_Program+0x14>
 80113d4:	2402      	movs	r4, #2
}
 80113d6:	4620      	mov	r0, r4
 80113d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113dc:	4698      	mov	r8, r3
 80113de:	4617      	mov	r7, r2
 80113e0:	460e      	mov	r6, r1
 80113e2:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80113e4:	2201      	movs	r2, #1
 80113e6:	4b17      	ldr	r3, [pc, #92]	; (8011444 <HAL_FLASH_Program+0x7c>)
 80113e8:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80113ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80113ee:	f7ff ffb9 	bl	8011364 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80113f2:	4604      	mov	r4, r0
 80113f4:	b998      	cbnz	r0, 801141e <HAL_FLASH_Program+0x56>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80113f6:	b1b5      	cbz	r5, 8011426 <HAL_FLASH_Program+0x5e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80113f8:	2d01      	cmp	r5, #1
 80113fa:	d019      	beq.n	8011430 <HAL_FLASH_Program+0x68>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80113fc:	2d02      	cmp	r5, #2
 80113fe:	d01c      	beq.n	801143a <HAL_FLASH_Program+0x72>
      FLASH_Program_DoubleWord(Address, Data);
 8011400:	463a      	mov	r2, r7
 8011402:	4643      	mov	r3, r8
 8011404:	4630      	mov	r0, r6
 8011406:	f7ff ff05 	bl	8011214 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801140a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801140e:	f7ff ffa9 	bl	8011364 <FLASH_WaitForLastOperation>
 8011412:	4604      	mov	r4, r0
    FLASH->CR &= (~FLASH_CR_PG);  
 8011414:	4a0c      	ldr	r2, [pc, #48]	; (8011448 <HAL_FLASH_Program+0x80>)
 8011416:	6913      	ldr	r3, [r2, #16]
 8011418:	f023 0301 	bic.w	r3, r3, #1
 801141c:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 801141e:	2200      	movs	r2, #0
 8011420:	4b08      	ldr	r3, [pc, #32]	; (8011444 <HAL_FLASH_Program+0x7c>)
 8011422:	761a      	strb	r2, [r3, #24]
  return status;
 8011424:	e7d7      	b.n	80113d6 <HAL_FLASH_Program+0xe>
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8011426:	b2f9      	uxtb	r1, r7
 8011428:	4630      	mov	r0, r6
 801142a:	f7ff ff2d 	bl	8011288 <FLASH_Program_Byte>
 801142e:	e7ec      	b.n	801140a <HAL_FLASH_Program+0x42>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8011430:	b2b9      	uxth	r1, r7
 8011432:	4630      	mov	r0, r6
 8011434:	f7ff ff16 	bl	8011264 <FLASH_Program_HalfWord>
 8011438:	e7e7      	b.n	801140a <HAL_FLASH_Program+0x42>
      FLASH_Program_Word(Address, (uint32_t) Data);
 801143a:	4639      	mov	r1, r7
 801143c:	4630      	mov	r0, r6
 801143e:	f7ff feff 	bl	8011240 <FLASH_Program_Word>
 8011442:	e7e2      	b.n	801140a <HAL_FLASH_Program+0x42>
 8011444:	20004418 	.word	0x20004418
 8011448:	40023c00 	.word	0x40023c00

0801144c <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801144c:	4b07      	ldr	r3, [pc, #28]	; (801146c <FLASH_MassErase+0x20>)
 801144e:	691a      	ldr	r2, [r3, #16]
 8011450:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011454:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8011456:	691a      	ldr	r2, [r3, #16]
 8011458:	f042 0204 	orr.w	r2, r2, #4
 801145c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 801145e:	691a      	ldr	r2, [r3, #16]
 8011460:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8011464:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8011468:	6118      	str	r0, [r3, #16]
 801146a:	4770      	bx	lr
 801146c:	40023c00 	.word	0x40023c00

08011470 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011470:	b1f9      	cbz	r1, 80114b2 <FLASH_Erase_Sector+0x42>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8011472:	2901      	cmp	r1, #1
 8011474:	d01f      	beq.n	80114b6 <FLASH_Erase_Sector+0x46>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8011476:	2902      	cmp	r1, #2
 8011478:	d018      	beq.n	80114ac <FLASH_Erase_Sector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 801147a:	f44f 7140 	mov.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801147e:	4b0f      	ldr	r3, [pc, #60]	; (80114bc <FLASH_Erase_Sector+0x4c>)
 8011480:	691a      	ldr	r2, [r3, #16]
 8011482:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011486:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8011488:	691a      	ldr	r2, [r3, #16]
 801148a:	430a      	orrs	r2, r1
 801148c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801148e:	691a      	ldr	r2, [r3, #16]
 8011490:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8011494:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8011496:	691a      	ldr	r2, [r3, #16]
 8011498:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 801149c:	f040 0002 	orr.w	r0, r0, #2
 80114a0:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80114a2:	691a      	ldr	r2, [r3, #16]
 80114a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80114a8:	611a      	str	r2, [r3, #16]
 80114aa:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_WORD;
 80114ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80114b0:	e7e5      	b.n	801147e <FLASH_Erase_Sector+0xe>
     tmp_psize = FLASH_PSIZE_BYTE;
 80114b2:	2100      	movs	r1, #0
 80114b4:	e7e3      	b.n	801147e <FLASH_Erase_Sector+0xe>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80114b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80114ba:	e7e0      	b.n	801147e <FLASH_Erase_Sector+0xe>
 80114bc:	40023c00 	.word	0x40023c00

080114c0 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80114c0:	4b16      	ldr	r3, [pc, #88]	; (801151c <FLASH_FlushCaches+0x5c>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80114c8:	d010      	beq.n	80114ec <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80114ca:	4b14      	ldr	r3, [pc, #80]	; (801151c <FLASH_FlushCaches+0x5c>)
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80114d2:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80114da:	601a      	str	r2, [r3, #0]
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80114e2:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80114e4:	681a      	ldr	r2, [r3, #0]
 80114e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80114ea:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80114ec:	4b0b      	ldr	r3, [pc, #44]	; (801151c <FLASH_FlushCaches+0x5c>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80114f4:	d010      	beq.n	8011518 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80114f6:	4b09      	ldr	r3, [pc, #36]	; (801151c <FLASH_FlushCaches+0x5c>)
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114fe:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8011500:	681a      	ldr	r2, [r3, #0]
 8011502:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801150e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011516:	601a      	str	r2, [r3, #0]
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop
 801151c:	40023c00 	.word	0x40023c00

08011520 <HAL_FLASHEx_Erase>:
{
 8011520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8011522:	4b22      	ldr	r3, [pc, #136]	; (80115ac <HAL_FLASHEx_Erase+0x8c>)
 8011524:	7e1b      	ldrb	r3, [r3, #24]
 8011526:	2b01      	cmp	r3, #1
 8011528:	d102      	bne.n	8011530 <HAL_FLASHEx_Erase+0x10>
 801152a:	2702      	movs	r7, #2
}
 801152c:	4638      	mov	r0, r7
 801152e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011530:	460e      	mov	r6, r1
 8011532:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8011534:	2201      	movs	r2, #1
 8011536:	4b1d      	ldr	r3, [pc, #116]	; (80115ac <HAL_FLASHEx_Erase+0x8c>)
 8011538:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801153a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801153e:	f7ff ff11 	bl	8011364 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011542:	4607      	mov	r7, r0
 8011544:	bb70      	cbnz	r0, 80115a4 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 8011546:	f04f 33ff 	mov.w	r3, #4294967295
 801154a:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801154c:	6823      	ldr	r3, [r4, #0]
 801154e:	2b01      	cmp	r3, #1
 8011550:	d016      	beq.n	8011580 <HAL_FLASHEx_Erase+0x60>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011552:	68a5      	ldr	r5, [r4, #8]
 8011554:	68e3      	ldr	r3, [r4, #12]
 8011556:	68a2      	ldr	r2, [r4, #8]
 8011558:	4413      	add	r3, r2
 801155a:	429d      	cmp	r5, r3
 801155c:	d220      	bcs.n	80115a0 <HAL_FLASHEx_Erase+0x80>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801155e:	7c21      	ldrb	r1, [r4, #16]
 8011560:	4628      	mov	r0, r5
 8011562:	f7ff ff85 	bl	8011470 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011566:	f24c 3050 	movw	r0, #50000	; 0xc350
 801156a:	f7ff fefb 	bl	8011364 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 801156e:	4a10      	ldr	r2, [pc, #64]	; (80115b0 <HAL_FLASHEx_Erase+0x90>)
 8011570:	6913      	ldr	r3, [r2, #16]
 8011572:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8011576:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8011578:	4607      	mov	r7, r0
 801157a:	b980      	cbnz	r0, 801159e <HAL_FLASHEx_Erase+0x7e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801157c:	3501      	adds	r5, #1
 801157e:	e7e9      	b.n	8011554 <HAL_FLASHEx_Erase+0x34>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8011580:	6861      	ldr	r1, [r4, #4]
 8011582:	7c20      	ldrb	r0, [r4, #16]
 8011584:	f7ff ff62 	bl	801144c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011588:	f24c 3050 	movw	r0, #50000	; 0xc350
 801158c:	f7ff feea 	bl	8011364 <FLASH_WaitForLastOperation>
 8011590:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8011592:	4a07      	ldr	r2, [pc, #28]	; (80115b0 <HAL_FLASHEx_Erase+0x90>)
 8011594:	6913      	ldr	r3, [r2, #16]
 8011596:	f023 0304 	bic.w	r3, r3, #4
 801159a:	6113      	str	r3, [r2, #16]
 801159c:	e000      	b.n	80115a0 <HAL_FLASHEx_Erase+0x80>
          *SectorError = index;
 801159e:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 80115a0:	f7ff ff8e 	bl	80114c0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80115a4:	2200      	movs	r2, #0
 80115a6:	4b01      	ldr	r3, [pc, #4]	; (80115ac <HAL_FLASHEx_Erase+0x8c>)
 80115a8:	761a      	strb	r2, [r3, #24]
  return status;
 80115aa:	e7bf      	b.n	801152c <HAL_FLASHEx_Erase+0xc>
 80115ac:	20004418 	.word	0x20004418
 80115b0:	40023c00 	.word	0x40023c00

080115b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80115b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115b6:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80115b8:	2400      	movs	r4, #0
 80115ba:	e04b      	b.n	8011654 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80115bc:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80115c0:	f10e 0e08 	add.w	lr, lr, #8
 80115c4:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80115c8:	f004 0607 	and.w	r6, r4, #7
 80115cc:	00b6      	lsls	r6, r6, #2
 80115ce:	270f      	movs	r7, #15
 80115d0:	40b7      	lsls	r7, r6
 80115d2:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80115d6:	690f      	ldr	r7, [r1, #16]
 80115d8:	fa07 f606 	lsl.w	r6, r7, r6
 80115dc:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 80115de:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 80115e2:	e046      	b.n	8011672 <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80115e4:	2607      	movs	r6, #7
 80115e6:	e000      	b.n	80115ea <HAL_GPIO_Init+0x36>
 80115e8:	2600      	movs	r6, #0
 80115ea:	fa06 f60e 	lsl.w	r6, r6, lr
 80115ee:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80115f0:	3302      	adds	r3, #2
 80115f2:	4e5e      	ldr	r6, [pc, #376]	; (801176c <HAL_GPIO_Init+0x1b8>)
 80115f4:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80115f8:	4b5d      	ldr	r3, [pc, #372]	; (8011770 <HAL_GPIO_Init+0x1bc>)
 80115fa:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 80115fc:	43eb      	mvns	r3, r5
 80115fe:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011602:	684f      	ldr	r7, [r1, #4]
 8011604:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8011608:	d001      	beq.n	801160e <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 801160a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 801160e:	4a58      	ldr	r2, [pc, #352]	; (8011770 <HAL_GPIO_Init+0x1bc>)
 8011610:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8011612:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8011614:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011618:	684f      	ldr	r7, [r1, #4]
 801161a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 801161e:	d001      	beq.n	8011624 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8011620:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8011624:	4a52      	ldr	r2, [pc, #328]	; (8011770 <HAL_GPIO_Init+0x1bc>)
 8011626:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011628:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 801162a:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801162e:	684f      	ldr	r7, [r1, #4]
 8011630:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8011634:	d001      	beq.n	801163a <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8011636:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 801163a:	4a4d      	ldr	r2, [pc, #308]	; (8011770 <HAL_GPIO_Init+0x1bc>)
 801163c:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 801163e:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8011640:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011642:	684e      	ldr	r6, [r1, #4]
 8011644:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8011648:	d001      	beq.n	801164e <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 801164a:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 801164e:	4a48      	ldr	r2, [pc, #288]	; (8011770 <HAL_GPIO_Init+0x1bc>)
 8011650:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011652:	3401      	adds	r4, #1
 8011654:	2c0f      	cmp	r4, #15
 8011656:	f200 8086 	bhi.w	8011766 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 801165a:	2301      	movs	r3, #1
 801165c:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801165e:	680a      	ldr	r2, [r1, #0]
 8011660:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8011664:	42ab      	cmp	r3, r5
 8011666:	d1f4      	bne.n	8011652 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011668:	684a      	ldr	r2, [r1, #4]
 801166a:	2a02      	cmp	r2, #2
 801166c:	d0a6      	beq.n	80115bc <HAL_GPIO_Init+0x8>
 801166e:	2a12      	cmp	r2, #18
 8011670:	d0a4      	beq.n	80115bc <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8011672:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011674:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8011678:	2203      	movs	r2, #3
 801167a:	fa02 f20e 	lsl.w	r2, r2, lr
 801167e:	43d2      	mvns	r2, r2
 8011680:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011682:	684f      	ldr	r7, [r1, #4]
 8011684:	f007 0703 	and.w	r7, r7, #3
 8011688:	fa07 f70e 	lsl.w	r7, r7, lr
 801168c:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 801168e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011690:	684e      	ldr	r6, [r1, #4]
 8011692:	1e77      	subs	r7, r6, #1
 8011694:	2f01      	cmp	r7, #1
 8011696:	d903      	bls.n	80116a0 <HAL_GPIO_Init+0xec>
 8011698:	2e11      	cmp	r6, #17
 801169a:	d001      	beq.n	80116a0 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801169c:	2e12      	cmp	r6, #18
 801169e:	d10f      	bne.n	80116c0 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 80116a0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80116a2:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80116a4:	68cf      	ldr	r7, [r1, #12]
 80116a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80116aa:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80116ac:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80116ae:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80116b0:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80116b4:	684e      	ldr	r6, [r1, #4]
 80116b6:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80116ba:	40a6      	lsls	r6, r4
 80116bc:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80116be:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80116c0:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80116c2:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80116c4:	688b      	ldr	r3, [r1, #8]
 80116c6:	fa03 f30e 	lsl.w	r3, r3, lr
 80116ca:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80116cc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80116ce:	684b      	ldr	r3, [r1, #4]
 80116d0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80116d4:	d0bd      	beq.n	8011652 <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80116d6:	2300      	movs	r3, #0
 80116d8:	9301      	str	r3, [sp, #4]
 80116da:	4b26      	ldr	r3, [pc, #152]	; (8011774 <HAL_GPIO_Init+0x1c0>)
 80116dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80116de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80116e2:	645a      	str	r2, [r3, #68]	; 0x44
 80116e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116ea:	9301      	str	r3, [sp, #4]
 80116ec:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80116ee:	08a3      	lsrs	r3, r4, #2
 80116f0:	1c9e      	adds	r6, r3, #2
 80116f2:	4a1e      	ldr	r2, [pc, #120]	; (801176c <HAL_GPIO_Init+0x1b8>)
 80116f4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80116f8:	f004 0603 	and.w	r6, r4, #3
 80116fc:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8011700:	260f      	movs	r6, #15
 8011702:	fa06 f60e 	lsl.w	r6, r6, lr
 8011706:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801170a:	4f1b      	ldr	r7, [pc, #108]	; (8011778 <HAL_GPIO_Init+0x1c4>)
 801170c:	42b8      	cmp	r0, r7
 801170e:	f43f af6b 	beq.w	80115e8 <HAL_GPIO_Init+0x34>
 8011712:	4e1a      	ldr	r6, [pc, #104]	; (801177c <HAL_GPIO_Init+0x1c8>)
 8011714:	42b0      	cmp	r0, r6
 8011716:	d01a      	beq.n	801174e <HAL_GPIO_Init+0x19a>
 8011718:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801171c:	42b0      	cmp	r0, r6
 801171e:	d018      	beq.n	8011752 <HAL_GPIO_Init+0x19e>
 8011720:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011724:	42b0      	cmp	r0, r6
 8011726:	d016      	beq.n	8011756 <HAL_GPIO_Init+0x1a2>
 8011728:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801172c:	42b0      	cmp	r0, r6
 801172e:	d014      	beq.n	801175a <HAL_GPIO_Init+0x1a6>
 8011730:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011734:	42b0      	cmp	r0, r6
 8011736:	d012      	beq.n	801175e <HAL_GPIO_Init+0x1aa>
 8011738:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801173c:	42b0      	cmp	r0, r6
 801173e:	d010      	beq.n	8011762 <HAL_GPIO_Init+0x1ae>
 8011740:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011744:	42b0      	cmp	r0, r6
 8011746:	f43f af4d 	beq.w	80115e4 <HAL_GPIO_Init+0x30>
 801174a:	2608      	movs	r6, #8
 801174c:	e74d      	b.n	80115ea <HAL_GPIO_Init+0x36>
 801174e:	2601      	movs	r6, #1
 8011750:	e74b      	b.n	80115ea <HAL_GPIO_Init+0x36>
 8011752:	2602      	movs	r6, #2
 8011754:	e749      	b.n	80115ea <HAL_GPIO_Init+0x36>
 8011756:	2603      	movs	r6, #3
 8011758:	e747      	b.n	80115ea <HAL_GPIO_Init+0x36>
 801175a:	2604      	movs	r6, #4
 801175c:	e745      	b.n	80115ea <HAL_GPIO_Init+0x36>
 801175e:	2605      	movs	r6, #5
 8011760:	e743      	b.n	80115ea <HAL_GPIO_Init+0x36>
 8011762:	2606      	movs	r6, #6
 8011764:	e741      	b.n	80115ea <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8011766:	b003      	add	sp, #12
 8011768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801176a:	bf00      	nop
 801176c:	40013800 	.word	0x40013800
 8011770:	40013c00 	.word	0x40013c00
 8011774:	40023800 	.word	0x40023800
 8011778:	40020000 	.word	0x40020000
 801177c:	40020400 	.word	0x40020400

08011780 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011780:	2300      	movs	r3, #0
 8011782:	2b0f      	cmp	r3, #15
 8011784:	f200 8085 	bhi.w	8011892 <HAL_GPIO_DeInit+0x112>
{
 8011788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801178a:	e009      	b.n	80117a0 <HAL_GPIO_DeInit+0x20>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801178c:	2607      	movs	r6, #7
 801178e:	e000      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 8011790:	2600      	movs	r6, #0
 8011792:	fa06 f202 	lsl.w	r2, r6, r2
 8011796:	4294      	cmp	r4, r2
 8011798:	d062      	beq.n	8011860 <HAL_GPIO_DeInit+0xe0>
  for(position = 0U; position < GPIO_NUMBER; position++)
 801179a:	3301      	adds	r3, #1
 801179c:	2b0f      	cmp	r3, #15
 801179e:	d877      	bhi.n	8011890 <HAL_GPIO_DeInit+0x110>
    ioposition = 0x01U << position;
 80117a0:	2201      	movs	r2, #1
 80117a2:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80117a4:	ea02 0501 	and.w	r5, r2, r1
    if(iocurrent == ioposition)
 80117a8:	42aa      	cmp	r2, r5
 80117aa:	d1f6      	bne.n	801179a <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80117ac:	6806      	ldr	r6, [r0, #0]
 80117ae:	005f      	lsls	r7, r3, #1
 80117b0:	2403      	movs	r4, #3
 80117b2:	40bc      	lsls	r4, r7
 80117b4:	43e4      	mvns	r4, r4
 80117b6:	4026      	ands	r6, r4
 80117b8:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80117ba:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80117be:	f10e 0e08 	add.w	lr, lr, #8
 80117c2:	f850 c02e 	ldr.w	ip, [r0, lr, lsl #2]
 80117c6:	f003 0607 	and.w	r6, r3, #7
 80117ca:	00b6      	lsls	r6, r6, #2
 80117cc:	270f      	movs	r7, #15
 80117ce:	fa07 f606 	lsl.w	r6, r7, r6
 80117d2:	ea2c 0606 	bic.w	r6, ip, r6
 80117d6:	f840 602e 	str.w	r6, [r0, lr, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80117da:	6886      	ldr	r6, [r0, #8]
 80117dc:	4026      	ands	r6, r4
 80117de:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80117e0:	6846      	ldr	r6, [r0, #4]
 80117e2:	ea26 0202 	bic.w	r2, r6, r2
 80117e6:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80117e8:	68c2      	ldr	r2, [r0, #12]
 80117ea:	4014      	ands	r4, r2
 80117ec:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2U];
 80117ee:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80117f2:	f10e 0402 	add.w	r4, lr, #2
 80117f6:	4a27      	ldr	r2, [pc, #156]	; (8011894 <HAL_GPIO_DeInit+0x114>)
 80117f8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80117fc:	f003 0203 	and.w	r2, r3, #3
 8011800:	0092      	lsls	r2, r2, #2
 8011802:	4097      	lsls	r7, r2
 8011804:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8011806:	4e24      	ldr	r6, [pc, #144]	; (8011898 <HAL_GPIO_DeInit+0x118>)
 8011808:	42b0      	cmp	r0, r6
 801180a:	d0c1      	beq.n	8011790 <HAL_GPIO_DeInit+0x10>
 801180c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011810:	42b0      	cmp	r0, r6
 8011812:	d019      	beq.n	8011848 <HAL_GPIO_DeInit+0xc8>
 8011814:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011818:	42b0      	cmp	r0, r6
 801181a:	d017      	beq.n	801184c <HAL_GPIO_DeInit+0xcc>
 801181c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011820:	42b0      	cmp	r0, r6
 8011822:	d015      	beq.n	8011850 <HAL_GPIO_DeInit+0xd0>
 8011824:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011828:	42b0      	cmp	r0, r6
 801182a:	d013      	beq.n	8011854 <HAL_GPIO_DeInit+0xd4>
 801182c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011830:	42b0      	cmp	r0, r6
 8011832:	d011      	beq.n	8011858 <HAL_GPIO_DeInit+0xd8>
 8011834:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011838:	42b0      	cmp	r0, r6
 801183a:	d00f      	beq.n	801185c <HAL_GPIO_DeInit+0xdc>
 801183c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011840:	42b0      	cmp	r0, r6
 8011842:	d0a3      	beq.n	801178c <HAL_GPIO_DeInit+0xc>
 8011844:	2608      	movs	r6, #8
 8011846:	e7a4      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 8011848:	2601      	movs	r6, #1
 801184a:	e7a2      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 801184c:	2602      	movs	r6, #2
 801184e:	e7a0      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 8011850:	2603      	movs	r6, #3
 8011852:	e79e      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 8011854:	2604      	movs	r6, #4
 8011856:	e79c      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 8011858:	2605      	movs	r6, #5
 801185a:	e79a      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 801185c:	2606      	movs	r6, #6
 801185e:	e798      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011860:	4e0c      	ldr	r6, [pc, #48]	; (8011894 <HAL_GPIO_DeInit+0x114>)
 8011862:	f10e 0202 	add.w	r2, lr, #2
 8011866:	f856 4022 	ldr.w	r4, [r6, r2, lsl #2]
 801186a:	ea24 0707 	bic.w	r7, r4, r7
 801186e:	f846 7022 	str.w	r7, [r6, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8011872:	4c0a      	ldr	r4, [pc, #40]	; (801189c <HAL_GPIO_DeInit+0x11c>)
 8011874:	6826      	ldr	r6, [r4, #0]
 8011876:	43ea      	mvns	r2, r5
 8011878:	4016      	ands	r6, r2
 801187a:	6026      	str	r6, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801187c:	6865      	ldr	r5, [r4, #4]
 801187e:	4015      	ands	r5, r2
 8011880:	6065      	str	r5, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8011882:	68a5      	ldr	r5, [r4, #8]
 8011884:	4015      	ands	r5, r2
 8011886:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8011888:	68e5      	ldr	r5, [r4, #12]
 801188a:	402a      	ands	r2, r5
 801188c:	60e2      	str	r2, [r4, #12]
 801188e:	e784      	b.n	801179a <HAL_GPIO_DeInit+0x1a>
      }
    }
  }
}
 8011890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011892:	4770      	bx	lr
 8011894:	40013800 	.word	0x40013800
 8011898:	40020000 	.word	0x40020000
 801189c:	40013c00 	.word	0x40013c00

080118a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80118a0:	b912      	cbnz	r2, 80118a8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80118a2:	0409      	lsls	r1, r1, #16
 80118a4:	6181      	str	r1, [r0, #24]
 80118a6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80118a8:	6181      	str	r1, [r0, #24]
 80118aa:	4770      	bx	lr

080118ac <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80118ac:	6943      	ldr	r3, [r0, #20]
 80118ae:	4059      	eors	r1, r3
 80118b0:	6141      	str	r1, [r0, #20]
 80118b2:	4770      	bx	lr

080118b4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80118b4:	2800      	cmp	r0, #0
 80118b6:	f000 81bb 	beq.w	8011c30 <HAL_RCC_OscConfig+0x37c>
{
 80118ba:	b570      	push	{r4, r5, r6, lr}
 80118bc:	b082      	sub	sp, #8
 80118be:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80118c0:	6803      	ldr	r3, [r0, #0]
 80118c2:	f013 0f01 	tst.w	r3, #1
 80118c6:	d03b      	beq.n	8011940 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80118c8:	4ba7      	ldr	r3, [pc, #668]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	f003 030c 	and.w	r3, r3, #12
 80118d0:	2b04      	cmp	r3, #4
 80118d2:	d02c      	beq.n	801192e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80118d4:	4ba4      	ldr	r3, [pc, #656]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80118d6:	689b      	ldr	r3, [r3, #8]
 80118d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80118dc:	2b08      	cmp	r3, #8
 80118de:	d021      	beq.n	8011924 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80118e0:	6863      	ldr	r3, [r4, #4]
 80118e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118e6:	d04f      	beq.n	8011988 <HAL_RCC_OscConfig+0xd4>
 80118e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80118ec:	d052      	beq.n	8011994 <HAL_RCC_OscConfig+0xe0>
 80118ee:	4b9e      	ldr	r3, [pc, #632]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80118f6:	601a      	str	r2, [r3, #0]
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80118fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011900:	6863      	ldr	r3, [r4, #4]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d050      	beq.n	80119a8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011906:	f7fe fd5b 	bl	80103c0 <HAL_GetTick>
 801190a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801190c:	4b96      	ldr	r3, [pc, #600]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8011914:	d114      	bne.n	8011940 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011916:	f7fe fd53 	bl	80103c0 <HAL_GetTick>
 801191a:	1b40      	subs	r0, r0, r5
 801191c:	2864      	cmp	r0, #100	; 0x64
 801191e:	d9f5      	bls.n	801190c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8011920:	2003      	movs	r0, #3
 8011922:	e18a      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011924:	4b90      	ldr	r3, [pc, #576]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 801192c:	d0d8      	beq.n	80118e0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801192e:	4b8e      	ldr	r3, [pc, #568]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8011936:	d003      	beq.n	8011940 <HAL_RCC_OscConfig+0x8c>
 8011938:	6863      	ldr	r3, [r4, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	f000 817a 	beq.w	8011c34 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011940:	6823      	ldr	r3, [r4, #0]
 8011942:	f013 0f02 	tst.w	r3, #2
 8011946:	d055      	beq.n	80119f4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011948:	4b87      	ldr	r3, [pc, #540]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 801194a:	689b      	ldr	r3, [r3, #8]
 801194c:	f013 0f0c 	tst.w	r3, #12
 8011950:	d03e      	beq.n	80119d0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011952:	4b85      	ldr	r3, [pc, #532]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011954:	689b      	ldr	r3, [r3, #8]
 8011956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801195a:	2b08      	cmp	r3, #8
 801195c:	d033      	beq.n	80119c6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801195e:	68e3      	ldr	r3, [r4, #12]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d068      	beq.n	8011a36 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011964:	2201      	movs	r2, #1
 8011966:	4b81      	ldr	r3, [pc, #516]	; (8011b6c <HAL_RCC_OscConfig+0x2b8>)
 8011968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801196a:	f7fe fd29 	bl	80103c0 <HAL_GetTick>
 801196e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011970:	4b7d      	ldr	r3, [pc, #500]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f013 0f02 	tst.w	r3, #2
 8011978:	d154      	bne.n	8011a24 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801197a:	f7fe fd21 	bl	80103c0 <HAL_GetTick>
 801197e:	1b40      	subs	r0, r0, r5
 8011980:	2802      	cmp	r0, #2
 8011982:	d9f5      	bls.n	8011970 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8011984:	2003      	movs	r0, #3
 8011986:	e158      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011988:	4a77      	ldr	r2, [pc, #476]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 801198a:	6813      	ldr	r3, [r2, #0]
 801198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011990:	6013      	str	r3, [r2, #0]
 8011992:	e7b5      	b.n	8011900 <HAL_RCC_OscConfig+0x4c>
 8011994:	4b74      	ldr	r3, [pc, #464]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801199c:	601a      	str	r2, [r3, #0]
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80119a4:	601a      	str	r2, [r3, #0]
 80119a6:	e7ab      	b.n	8011900 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80119a8:	f7fe fd0a 	bl	80103c0 <HAL_GetTick>
 80119ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80119ae:	4b6e      	ldr	r3, [pc, #440]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80119b6:	d0c3      	beq.n	8011940 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80119b8:	f7fe fd02 	bl	80103c0 <HAL_GetTick>
 80119bc:	1b40      	subs	r0, r0, r5
 80119be:	2864      	cmp	r0, #100	; 0x64
 80119c0:	d9f5      	bls.n	80119ae <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80119c2:	2003      	movs	r0, #3
 80119c4:	e139      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80119c6:	4b68      	ldr	r3, [pc, #416]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80119ce:	d1c6      	bne.n	801195e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80119d0:	4b65      	ldr	r3, [pc, #404]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f013 0f02 	tst.w	r3, #2
 80119d8:	d004      	beq.n	80119e4 <HAL_RCC_OscConfig+0x130>
 80119da:	68e3      	ldr	r3, [r4, #12]
 80119dc:	2b01      	cmp	r3, #1
 80119de:	d001      	beq.n	80119e4 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80119e0:	2001      	movs	r0, #1
 80119e2:	e12a      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80119e4:	4a60      	ldr	r2, [pc, #384]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80119e6:	6813      	ldr	r3, [r2, #0]
 80119e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80119ec:	6921      	ldr	r1, [r4, #16]
 80119ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80119f2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80119f4:	6823      	ldr	r3, [r4, #0]
 80119f6:	f013 0f08 	tst.w	r3, #8
 80119fa:	d040      	beq.n	8011a7e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80119fc:	6963      	ldr	r3, [r4, #20]
 80119fe:	b363      	cbz	r3, 8011a5a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011a00:	2201      	movs	r2, #1
 8011a02:	4b5b      	ldr	r3, [pc, #364]	; (8011b70 <HAL_RCC_OscConfig+0x2bc>)
 8011a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011a06:	f7fe fcdb 	bl	80103c0 <HAL_GetTick>
 8011a0a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011a0c:	4b56      	ldr	r3, [pc, #344]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a10:	f013 0f02 	tst.w	r3, #2
 8011a14:	d133      	bne.n	8011a7e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011a16:	f7fe fcd3 	bl	80103c0 <HAL_GetTick>
 8011a1a:	1b40      	subs	r0, r0, r5
 8011a1c:	2802      	cmp	r0, #2
 8011a1e:	d9f5      	bls.n	8011a0c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8011a20:	2003      	movs	r0, #3
 8011a22:	e10a      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a24:	4a50      	ldr	r2, [pc, #320]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a26:	6813      	ldr	r3, [r2, #0]
 8011a28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011a2c:	6921      	ldr	r1, [r4, #16]
 8011a2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011a32:	6013      	str	r3, [r2, #0]
 8011a34:	e7de      	b.n	80119f4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8011a36:	2200      	movs	r2, #0
 8011a38:	4b4c      	ldr	r3, [pc, #304]	; (8011b6c <HAL_RCC_OscConfig+0x2b8>)
 8011a3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011a3c:	f7fe fcc0 	bl	80103c0 <HAL_GetTick>
 8011a40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011a42:	4b49      	ldr	r3, [pc, #292]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f013 0f02 	tst.w	r3, #2
 8011a4a:	d0d3      	beq.n	80119f4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011a4c:	f7fe fcb8 	bl	80103c0 <HAL_GetTick>
 8011a50:	1b40      	subs	r0, r0, r5
 8011a52:	2802      	cmp	r0, #2
 8011a54:	d9f5      	bls.n	8011a42 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8011a56:	2003      	movs	r0, #3
 8011a58:	e0ef      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	4b44      	ldr	r3, [pc, #272]	; (8011b70 <HAL_RCC_OscConfig+0x2bc>)
 8011a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011a60:	f7fe fcae 	bl	80103c0 <HAL_GetTick>
 8011a64:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011a66:	4b40      	ldr	r3, [pc, #256]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a6a:	f013 0f02 	tst.w	r3, #2
 8011a6e:	d006      	beq.n	8011a7e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011a70:	f7fe fca6 	bl	80103c0 <HAL_GetTick>
 8011a74:	1b40      	subs	r0, r0, r5
 8011a76:	2802      	cmp	r0, #2
 8011a78:	d9f5      	bls.n	8011a66 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8011a7a:	2003      	movs	r0, #3
 8011a7c:	e0dd      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011a7e:	6823      	ldr	r3, [r4, #0]
 8011a80:	f013 0f04 	tst.w	r3, #4
 8011a84:	d079      	beq.n	8011b7a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011a86:	4b38      	ldr	r3, [pc, #224]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a8a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8011a8e:	d133      	bne.n	8011af8 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011a90:	2300      	movs	r3, #0
 8011a92:	9301      	str	r3, [sp, #4]
 8011a94:	4b34      	ldr	r3, [pc, #208]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8011a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8011aa8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011aaa:	4b32      	ldr	r3, [pc, #200]	; (8011b74 <HAL_RCC_OscConfig+0x2c0>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011ab2:	d023      	beq.n	8011afc <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011ab4:	68a3      	ldr	r3, [r4, #8]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d034      	beq.n	8011b24 <HAL_RCC_OscConfig+0x270>
 8011aba:	2b05      	cmp	r3, #5
 8011abc:	d038      	beq.n	8011b30 <HAL_RCC_OscConfig+0x27c>
 8011abe:	4b2a      	ldr	r3, [pc, #168]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011ac0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011ac2:	f022 0201 	bic.w	r2, r2, #1
 8011ac6:	671a      	str	r2, [r3, #112]	; 0x70
 8011ac8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011aca:	f022 0204 	bic.w	r2, r2, #4
 8011ace:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011ad0:	68a3      	ldr	r3, [r4, #8]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d036      	beq.n	8011b44 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011ad6:	f7fe fc73 	bl	80103c0 <HAL_GetTick>
 8011ada:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011adc:	4b22      	ldr	r3, [pc, #136]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ae0:	f013 0f02 	tst.w	r3, #2
 8011ae4:	d148      	bne.n	8011b78 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011ae6:	f7fe fc6b 	bl	80103c0 <HAL_GetTick>
 8011aea:	1b80      	subs	r0, r0, r6
 8011aec:	f241 3388 	movw	r3, #5000	; 0x1388
 8011af0:	4298      	cmp	r0, r3
 8011af2:	d9f3      	bls.n	8011adc <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8011af4:	2003      	movs	r0, #3
 8011af6:	e0a0      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8011af8:	2500      	movs	r5, #0
 8011afa:	e7d6      	b.n	8011aaa <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011afc:	4a1d      	ldr	r2, [pc, #116]	; (8011b74 <HAL_RCC_OscConfig+0x2c0>)
 8011afe:	6813      	ldr	r3, [r2, #0]
 8011b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b04:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8011b06:	f7fe fc5b 	bl	80103c0 <HAL_GetTick>
 8011b0a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011b0c:	4b19      	ldr	r3, [pc, #100]	; (8011b74 <HAL_RCC_OscConfig+0x2c0>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011b14:	d1ce      	bne.n	8011ab4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011b16:	f7fe fc53 	bl	80103c0 <HAL_GetTick>
 8011b1a:	1b80      	subs	r0, r0, r6
 8011b1c:	2802      	cmp	r0, #2
 8011b1e:	d9f5      	bls.n	8011b0c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8011b20:	2003      	movs	r0, #3
 8011b22:	e08a      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011b24:	4a10      	ldr	r2, [pc, #64]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011b26:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8011b28:	f043 0301 	orr.w	r3, r3, #1
 8011b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8011b2e:	e7cf      	b.n	8011ad0 <HAL_RCC_OscConfig+0x21c>
 8011b30:	4b0d      	ldr	r3, [pc, #52]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011b32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011b34:	f042 0204 	orr.w	r2, r2, #4
 8011b38:	671a      	str	r2, [r3, #112]	; 0x70
 8011b3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011b3c:	f042 0201 	orr.w	r2, r2, #1
 8011b40:	671a      	str	r2, [r3, #112]	; 0x70
 8011b42:	e7c5      	b.n	8011ad0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011b44:	f7fe fc3c 	bl	80103c0 <HAL_GetTick>
 8011b48:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011b4a:	4b07      	ldr	r3, [pc, #28]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b4e:	f013 0f02 	tst.w	r3, #2
 8011b52:	d011      	beq.n	8011b78 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011b54:	f7fe fc34 	bl	80103c0 <HAL_GetTick>
 8011b58:	1b80      	subs	r0, r0, r6
 8011b5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8011b5e:	4298      	cmp	r0, r3
 8011b60:	d9f3      	bls.n	8011b4a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8011b62:	2003      	movs	r0, #3
 8011b64:	e069      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
 8011b66:	bf00      	nop
 8011b68:	40023800 	.word	0x40023800
 8011b6c:	42470000 	.word	0x42470000
 8011b70:	42470e80 	.word	0x42470e80
 8011b74:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011b78:	b9e5      	cbnz	r5, 8011bb4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011b7a:	69a3      	ldr	r3, [r4, #24]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d05b      	beq.n	8011c38 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011b80:	4a30      	ldr	r2, [pc, #192]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011b82:	6892      	ldr	r2, [r2, #8]
 8011b84:	f002 020c 	and.w	r2, r2, #12
 8011b88:	2a08      	cmp	r2, #8
 8011b8a:	d058      	beq.n	8011c3e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011b8c:	2b02      	cmp	r3, #2
 8011b8e:	d017      	beq.n	8011bc0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011b90:	2200      	movs	r2, #0
 8011b92:	4b2d      	ldr	r3, [pc, #180]	; (8011c48 <HAL_RCC_OscConfig+0x394>)
 8011b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b96:	f7fe fc13 	bl	80103c0 <HAL_GetTick>
 8011b9a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011b9c:	4b29      	ldr	r3, [pc, #164]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011ba4:	d042      	beq.n	8011c2c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011ba6:	f7fe fc0b 	bl	80103c0 <HAL_GetTick>
 8011baa:	1b00      	subs	r0, r0, r4
 8011bac:	2802      	cmp	r0, #2
 8011bae:	d9f5      	bls.n	8011b9c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8011bb0:	2003      	movs	r0, #3
 8011bb2:	e042      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011bb4:	4a23      	ldr	r2, [pc, #140]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011bb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8011bbe:	e7dc      	b.n	8011b7a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	4b21      	ldr	r3, [pc, #132]	; (8011c48 <HAL_RCC_OscConfig+0x394>)
 8011bc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011bc6:	f7fe fbfb 	bl	80103c0 <HAL_GetTick>
 8011bca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011bcc:	4b1d      	ldr	r3, [pc, #116]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011bd4:	d006      	beq.n	8011be4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011bd6:	f7fe fbf3 	bl	80103c0 <HAL_GetTick>
 8011bda:	1b40      	subs	r0, r0, r5
 8011bdc:	2802      	cmp	r0, #2
 8011bde:	d9f5      	bls.n	8011bcc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8011be0:	2003      	movs	r0, #3
 8011be2:	e02a      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011be4:	69e3      	ldr	r3, [r4, #28]
 8011be6:	6a22      	ldr	r2, [r4, #32]
 8011be8:	4313      	orrs	r3, r2
 8011bea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011bec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011bf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011bf2:	0852      	lsrs	r2, r2, #1
 8011bf4:	3a01      	subs	r2, #1
 8011bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011bfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011bfc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011c00:	4a10      	ldr	r2, [pc, #64]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011c02:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8011c04:	2201      	movs	r2, #1
 8011c06:	4b10      	ldr	r3, [pc, #64]	; (8011c48 <HAL_RCC_OscConfig+0x394>)
 8011c08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011c0a:	f7fe fbd9 	bl	80103c0 <HAL_GetTick>
 8011c0e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c10:	4b0c      	ldr	r3, [pc, #48]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011c18:	d106      	bne.n	8011c28 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011c1a:	f7fe fbd1 	bl	80103c0 <HAL_GetTick>
 8011c1e:	1b00      	subs	r0, r0, r4
 8011c20:	2802      	cmp	r0, #2
 8011c22:	d9f5      	bls.n	8011c10 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8011c24:	2003      	movs	r0, #3
 8011c26:	e008      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8011c28:	2000      	movs	r0, #0
 8011c2a:	e006      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
 8011c2c:	2000      	movs	r0, #0
 8011c2e:	e004      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8011c30:	2001      	movs	r0, #1
 8011c32:	4770      	bx	lr
        return HAL_ERROR;
 8011c34:	2001      	movs	r0, #1
 8011c36:	e000      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8011c38:	2000      	movs	r0, #0
}
 8011c3a:	b002      	add	sp, #8
 8011c3c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8011c3e:	2001      	movs	r0, #1
 8011c40:	e7fb      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
 8011c42:	bf00      	nop
 8011c44:	40023800 	.word	0x40023800
 8011c48:	42470060 	.word	0x42470060

08011c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011c4e:	4b25      	ldr	r3, [pc, #148]	; (8011ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	f003 030c 	and.w	r3, r3, #12
 8011c56:	2b04      	cmp	r3, #4
 8011c58:	d041      	beq.n	8011cde <HAL_RCC_GetSysClockFreq+0x92>
 8011c5a:	2b08      	cmp	r3, #8
 8011c5c:	d001      	beq.n	8011c62 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011c5e:	4822      	ldr	r0, [pc, #136]	; (8011ce8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8011c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011c62:	4b20      	ldr	r3, [pc, #128]	; (8011ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c64:	685a      	ldr	r2, [r3, #4]
 8011c66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8011c70:	d012      	beq.n	8011c98 <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011c72:	4b1c      	ldr	r3, [pc, #112]	; (8011ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c74:	6859      	ldr	r1, [r3, #4]
 8011c76:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	481b      	ldr	r0, [pc, #108]	; (8011cec <HAL_RCC_GetSysClockFreq+0xa0>)
 8011c7e:	fba1 0100 	umull	r0, r1, r1, r0
 8011c82:	f7fe f9ef 	bl	8010064 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011c86:	4b17      	ldr	r3, [pc, #92]	; (8011ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8011c8e:	3301      	adds	r3, #1
 8011c90:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8011c92:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8011c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011c98:	4b12      	ldr	r3, [pc, #72]	; (8011ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8011ca0:	461e      	mov	r6, r3
 8011ca2:	2700      	movs	r7, #0
 8011ca4:	015c      	lsls	r4, r3, #5
 8011ca6:	2500      	movs	r5, #0
 8011ca8:	1ae4      	subs	r4, r4, r3
 8011caa:	eb65 0507 	sbc.w	r5, r5, r7
 8011cae:	01a9      	lsls	r1, r5, #6
 8011cb0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8011cb4:	01a0      	lsls	r0, r4, #6
 8011cb6:	1b00      	subs	r0, r0, r4
 8011cb8:	eb61 0105 	sbc.w	r1, r1, r5
 8011cbc:	00cb      	lsls	r3, r1, #3
 8011cbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8011cc2:	00c4      	lsls	r4, r0, #3
 8011cc4:	19a0      	adds	r0, r4, r6
 8011cc6:	eb43 0107 	adc.w	r1, r3, r7
 8011cca:	028b      	lsls	r3, r1, #10
 8011ccc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8011cd0:	0284      	lsls	r4, r0, #10
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	f7fe f9c4 	bl	8010064 <__aeabi_uldivmod>
 8011cdc:	e7d3      	b.n	8011c86 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8011cde:	4803      	ldr	r0, [pc, #12]	; (8011cec <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	40023800 	.word	0x40023800
 8011ce8:	00f42400 	.word	0x00f42400
 8011cec:	017d7840 	.word	0x017d7840

08011cf0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	f000 809d 	beq.w	8011e30 <HAL_RCC_ClockConfig+0x140>
{
 8011cf6:	b570      	push	{r4, r5, r6, lr}
 8011cf8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011cfa:	4b4f      	ldr	r3, [pc, #316]	; (8011e38 <HAL_RCC_ClockConfig+0x148>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	f003 030f 	and.w	r3, r3, #15
 8011d02:	428b      	cmp	r3, r1
 8011d04:	d209      	bcs.n	8011d1a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011d06:	b2cb      	uxtb	r3, r1
 8011d08:	4a4b      	ldr	r2, [pc, #300]	; (8011e38 <HAL_RCC_ClockConfig+0x148>)
 8011d0a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011d0c:	6813      	ldr	r3, [r2, #0]
 8011d0e:	f003 030f 	and.w	r3, r3, #15
 8011d12:	4299      	cmp	r1, r3
 8011d14:	d001      	beq.n	8011d1a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8011d16:	2001      	movs	r0, #1
 8011d18:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011d1a:	6823      	ldr	r3, [r4, #0]
 8011d1c:	f013 0f02 	tst.w	r3, #2
 8011d20:	d017      	beq.n	8011d52 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011d22:	f013 0f04 	tst.w	r3, #4
 8011d26:	d004      	beq.n	8011d32 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011d28:	4a44      	ldr	r2, [pc, #272]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d2a:	6893      	ldr	r3, [r2, #8]
 8011d2c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011d30:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011d32:	6823      	ldr	r3, [r4, #0]
 8011d34:	f013 0f08 	tst.w	r3, #8
 8011d38:	d004      	beq.n	8011d44 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011d3a:	4a40      	ldr	r2, [pc, #256]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d3c:	6893      	ldr	r3, [r2, #8]
 8011d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011d42:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011d44:	4a3d      	ldr	r2, [pc, #244]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d46:	6893      	ldr	r3, [r2, #8]
 8011d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011d4c:	68a0      	ldr	r0, [r4, #8]
 8011d4e:	4303      	orrs	r3, r0
 8011d50:	6093      	str	r3, [r2, #8]
 8011d52:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011d54:	6823      	ldr	r3, [r4, #0]
 8011d56:	f013 0f01 	tst.w	r3, #1
 8011d5a:	d032      	beq.n	8011dc2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d5c:	6863      	ldr	r3, [r4, #4]
 8011d5e:	2b01      	cmp	r3, #1
 8011d60:	d021      	beq.n	8011da6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011d62:	1e9a      	subs	r2, r3, #2
 8011d64:	2a01      	cmp	r2, #1
 8011d66:	d925      	bls.n	8011db4 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d68:	4a34      	ldr	r2, [pc, #208]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d6a:	6812      	ldr	r2, [r2, #0]
 8011d6c:	f012 0f02 	tst.w	r2, #2
 8011d70:	d060      	beq.n	8011e34 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011d72:	4932      	ldr	r1, [pc, #200]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d74:	688a      	ldr	r2, [r1, #8]
 8011d76:	f022 0203 	bic.w	r2, r2, #3
 8011d7a:	4313      	orrs	r3, r2
 8011d7c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8011d7e:	f7fe fb1f 	bl	80103c0 <HAL_GetTick>
 8011d82:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011d84:	4b2d      	ldr	r3, [pc, #180]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	f003 030c 	and.w	r3, r3, #12
 8011d8c:	6862      	ldr	r2, [r4, #4]
 8011d8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8011d92:	d016      	beq.n	8011dc2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d94:	f7fe fb14 	bl	80103c0 <HAL_GetTick>
 8011d98:	1b80      	subs	r0, r0, r6
 8011d9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8011d9e:	4298      	cmp	r0, r3
 8011da0:	d9f0      	bls.n	8011d84 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8011da2:	2003      	movs	r0, #3
 8011da4:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011da6:	4a25      	ldr	r2, [pc, #148]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011da8:	6812      	ldr	r2, [r2, #0]
 8011daa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8011dae:	d1e0      	bne.n	8011d72 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8011db0:	2001      	movs	r0, #1
 8011db2:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011db4:	4a21      	ldr	r2, [pc, #132]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011db6:	6812      	ldr	r2, [r2, #0]
 8011db8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8011dbc:	d1d9      	bne.n	8011d72 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8011dbe:	2001      	movs	r0, #1
 8011dc0:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011dc2:	4b1d      	ldr	r3, [pc, #116]	; (8011e38 <HAL_RCC_ClockConfig+0x148>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f003 030f 	and.w	r3, r3, #15
 8011dca:	429d      	cmp	r5, r3
 8011dcc:	d209      	bcs.n	8011de2 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011dce:	b2ea      	uxtb	r2, r5
 8011dd0:	4b19      	ldr	r3, [pc, #100]	; (8011e38 <HAL_RCC_ClockConfig+0x148>)
 8011dd2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f003 030f 	and.w	r3, r3, #15
 8011dda:	429d      	cmp	r5, r3
 8011ddc:	d001      	beq.n	8011de2 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8011dde:	2001      	movs	r0, #1
}
 8011de0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011de2:	6823      	ldr	r3, [r4, #0]
 8011de4:	f013 0f04 	tst.w	r3, #4
 8011de8:	d006      	beq.n	8011df8 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011dea:	4a14      	ldr	r2, [pc, #80]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011dec:	6893      	ldr	r3, [r2, #8]
 8011dee:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8011df2:	68e1      	ldr	r1, [r4, #12]
 8011df4:	430b      	orrs	r3, r1
 8011df6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011df8:	6823      	ldr	r3, [r4, #0]
 8011dfa:	f013 0f08 	tst.w	r3, #8
 8011dfe:	d007      	beq.n	8011e10 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011e00:	4a0e      	ldr	r2, [pc, #56]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011e02:	6893      	ldr	r3, [r2, #8]
 8011e04:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8011e08:	6921      	ldr	r1, [r4, #16]
 8011e0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011e0e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011e10:	f7ff ff1c 	bl	8011c4c <HAL_RCC_GetSysClockFreq>
 8011e14:	4b09      	ldr	r3, [pc, #36]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011e16:	689b      	ldr	r3, [r3, #8]
 8011e18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8011e1c:	4a08      	ldr	r2, [pc, #32]	; (8011e40 <HAL_RCC_ClockConfig+0x150>)
 8011e1e:	5cd3      	ldrb	r3, [r2, r3]
 8011e20:	40d8      	lsrs	r0, r3
 8011e22:	4b08      	ldr	r3, [pc, #32]	; (8011e44 <HAL_RCC_ClockConfig+0x154>)
 8011e24:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8011e26:	2000      	movs	r0, #0
 8011e28:	f00b fe1c 	bl	801da64 <HAL_InitTick>
  return HAL_OK;
 8011e2c:	2000      	movs	r0, #0
 8011e2e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8011e30:	2001      	movs	r0, #1
 8011e32:	4770      	bx	lr
        return HAL_ERROR;
 8011e34:	2001      	movs	r0, #1
 8011e36:	bd70      	pop	{r4, r5, r6, pc}
 8011e38:	40023c00 	.word	0x40023c00
 8011e3c:	40023800 	.word	0x40023800
 8011e40:	08022d30 	.word	0x08022d30
 8011e44:	20000024 	.word	0x20000024

08011e48 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8011e48:	4b01      	ldr	r3, [pc, #4]	; (8011e50 <HAL_RCC_GetHCLKFreq+0x8>)
 8011e4a:	6818      	ldr	r0, [r3, #0]
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop
 8011e50:	20000024 	.word	0x20000024

08011e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011e54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011e56:	f7ff fff7 	bl	8011e48 <HAL_RCC_GetHCLKFreq>
 8011e5a:	4b04      	ldr	r3, [pc, #16]	; (8011e6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8011e5c:	689b      	ldr	r3, [r3, #8]
 8011e5e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8011e62:	4a03      	ldr	r2, [pc, #12]	; (8011e70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011e64:	5cd3      	ldrb	r3, [r2, r3]
}
 8011e66:	40d8      	lsrs	r0, r3
 8011e68:	bd08      	pop	{r3, pc}
 8011e6a:	bf00      	nop
 8011e6c:	40023800 	.word	0x40023800
 8011e70:	08022d40 	.word	0x08022d40

08011e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011e74:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011e76:	f7ff ffe7 	bl	8011e48 <HAL_RCC_GetHCLKFreq>
 8011e7a:	4b04      	ldr	r3, [pc, #16]	; (8011e8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8011e7c:	689b      	ldr	r3, [r3, #8]
 8011e7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8011e82:	4a03      	ldr	r2, [pc, #12]	; (8011e90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8011e84:	5cd3      	ldrb	r3, [r2, r3]
}
 8011e86:	40d8      	lsrs	r0, r3
 8011e88:	bd08      	pop	{r3, pc}
 8011e8a:	bf00      	nop
 8011e8c:	40023800 	.word	0x40023800
 8011e90:	08022d40 	.word	0x08022d40

08011e94 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011e94:	230f      	movs	r3, #15
 8011e96:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011e98:	4b0b      	ldr	r3, [pc, #44]	; (8011ec8 <HAL_RCC_GetClockConfig+0x34>)
 8011e9a:	689a      	ldr	r2, [r3, #8]
 8011e9c:	f002 0203 	and.w	r2, r2, #3
 8011ea0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8011ea2:	689a      	ldr	r2, [r3, #8]
 8011ea4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8011ea8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011eaa:	689a      	ldr	r2, [r3, #8]
 8011eac:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8011eb0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	08db      	lsrs	r3, r3, #3
 8011eb6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8011eba:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011ebc:	4b03      	ldr	r3, [pc, #12]	; (8011ecc <HAL_RCC_GetClockConfig+0x38>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f003 030f 	and.w	r3, r3, #15
 8011ec4:	600b      	str	r3, [r1, #0]
 8011ec6:	4770      	bx	lr
 8011ec8:	40023800 	.word	0x40023800
 8011ecc:	40023c00 	.word	0x40023c00

08011ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011ed0:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011ed2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011ed4:	6a04      	ldr	r4, [r0, #32]
 8011ed6:	f024 0401 	bic.w	r4, r4, #1
 8011eda:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8011edc:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011ede:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011ee2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011ee6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8011eea:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011eec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8011eee:	6203      	str	r3, [r0, #32]
}
 8011ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ef4:	4770      	bx	lr

08011ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011ef6:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011ef8:	6a03      	ldr	r3, [r0, #32]
 8011efa:	f023 0310 	bic.w	r3, r3, #16
 8011efe:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011f00:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8011f02:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011f04:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011f08:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011f0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8011f10:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011f14:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8011f16:	6203      	str	r3, [r0, #32]
}
 8011f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f1c:	4770      	bx	lr

08011f1e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8011f1e:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8011f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8011f24:	f041 0107 	orr.w	r1, r1, #7
 8011f28:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8011f2a:	6083      	str	r3, [r0, #8]
 8011f2c:	4770      	bx	lr

08011f2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011f2e:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8011f30:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011f32:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011f36:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8011f3a:	4319      	orrs	r1, r3
 8011f3c:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011f3e:	6084      	str	r4, [r0, #8]
} 
 8011f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f44:	4770      	bx	lr

08011f46 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011f46:	6802      	ldr	r2, [r0, #0]
 8011f48:	68d3      	ldr	r3, [r2, #12]
 8011f4a:	f043 0301 	orr.w	r3, r3, #1
 8011f4e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8011f50:	6802      	ldr	r2, [r0, #0]
 8011f52:	6813      	ldr	r3, [r2, #0]
 8011f54:	f043 0301 	orr.w	r3, r3, #1
 8011f58:	6013      	str	r3, [r2, #0]
}
 8011f5a:	2000      	movs	r0, #0
 8011f5c:	4770      	bx	lr

08011f5e <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011f5e:	6802      	ldr	r2, [r0, #0]
 8011f60:	68d3      	ldr	r3, [r2, #12]
 8011f62:	f023 0301 	bic.w	r3, r3, #1
 8011f66:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8011f68:	6803      	ldr	r3, [r0, #0]
 8011f6a:	6a19      	ldr	r1, [r3, #32]
 8011f6c:	f241 1211 	movw	r2, #4369	; 0x1111
 8011f70:	4211      	tst	r1, r2
 8011f72:	d108      	bne.n	8011f86 <HAL_TIM_Base_Stop_IT+0x28>
 8011f74:	6a19      	ldr	r1, [r3, #32]
 8011f76:	f240 4244 	movw	r2, #1092	; 0x444
 8011f7a:	4211      	tst	r1, r2
 8011f7c:	d103      	bne.n	8011f86 <HAL_TIM_Base_Stop_IT+0x28>
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	f022 0201 	bic.w	r2, r2, #1
 8011f84:	601a      	str	r2, [r3, #0]
}
 8011f86:	2000      	movs	r0, #0
 8011f88:	4770      	bx	lr

08011f8a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8011f8a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d07d      	beq.n	801208e <HAL_TIM_ConfigClockSource+0x104>
{
 8011f92:	b510      	push	{r4, lr}
 8011f94:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8011f96:	2301      	movs	r3, #1
 8011f98:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8011f9c:	2302      	movs	r3, #2
 8011f9e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8011fa2:	6802      	ldr	r2, [r0, #0]
 8011fa4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8011fae:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8011fb0:	680b      	ldr	r3, [r1, #0]
 8011fb2:	2b40      	cmp	r3, #64	; 0x40
 8011fb4:	d057      	beq.n	8012066 <HAL_TIM_ConfigClockSource+0xdc>
 8011fb6:	d910      	bls.n	8011fda <HAL_TIM_ConfigClockSource+0x50>
 8011fb8:	2b70      	cmp	r3, #112	; 0x70
 8011fba:	d03e      	beq.n	801203a <HAL_TIM_ConfigClockSource+0xb0>
 8011fbc:	d81f      	bhi.n	8011ffe <HAL_TIM_ConfigClockSource+0x74>
 8011fbe:	2b50      	cmp	r3, #80	; 0x50
 8011fc0:	d047      	beq.n	8012052 <HAL_TIM_ConfigClockSource+0xc8>
 8011fc2:	2b60      	cmp	r3, #96	; 0x60
 8011fc4:	d132      	bne.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8011fc6:	68ca      	ldr	r2, [r1, #12]
 8011fc8:	6849      	ldr	r1, [r1, #4]
 8011fca:	6800      	ldr	r0, [r0, #0]
 8011fcc:	f7ff ff93 	bl	8011ef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011fd0:	2160      	movs	r1, #96	; 0x60
 8011fd2:	6820      	ldr	r0, [r4, #0]
 8011fd4:	f7ff ffa3 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8011fd8:	e028      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011fda:	2b10      	cmp	r3, #16
 8011fdc:	d04d      	beq.n	801207a <HAL_TIM_ConfigClockSource+0xf0>
 8011fde:	d908      	bls.n	8011ff2 <HAL_TIM_ConfigClockSource+0x68>
 8011fe0:	2b20      	cmp	r3, #32
 8011fe2:	d04f      	beq.n	8012084 <HAL_TIM_ConfigClockSource+0xfa>
 8011fe4:	2b30      	cmp	r3, #48	; 0x30
 8011fe6:	d121      	bne.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8011fe8:	2130      	movs	r1, #48	; 0x30
 8011fea:	6800      	ldr	r0, [r0, #0]
 8011fec:	f7ff ff97 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8011ff0:	e01c      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011ff2:	b9db      	cbnz	r3, 801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	6800      	ldr	r0, [r0, #0]
 8011ff8:	f7ff ff91 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8011ffc:	e016      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012002:	d00e      	beq.n	8012022 <HAL_TIM_ConfigClockSource+0x98>
 8012004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012008:	d110      	bne.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance, 
 801200a:	68cb      	ldr	r3, [r1, #12]
 801200c:	684a      	ldr	r2, [r1, #4]
 801200e:	6889      	ldr	r1, [r1, #8]
 8012010:	6800      	ldr	r0, [r0, #0]
 8012012:	f7ff ff8c 	bl	8011f2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012016:	6822      	ldr	r2, [r4, #0]
 8012018:	6893      	ldr	r3, [r2, #8]
 801201a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801201e:	6093      	str	r3, [r2, #8]
    break;
 8012020:	e004      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8012022:	6802      	ldr	r2, [r0, #0]
 8012024:	6893      	ldr	r3, [r2, #8]
 8012026:	f023 0307 	bic.w	r3, r3, #7
 801202a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 801202c:	2301      	movs	r3, #1
 801202e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8012032:	2000      	movs	r0, #0
 8012034:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8012038:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 801203a:	68cb      	ldr	r3, [r1, #12]
 801203c:	684a      	ldr	r2, [r1, #4]
 801203e:	6889      	ldr	r1, [r1, #8]
 8012040:	6800      	ldr	r0, [r0, #0]
 8012042:	f7ff ff74 	bl	8011f2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8012046:	6822      	ldr	r2, [r4, #0]
 8012048:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801204a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 801204e:	6093      	str	r3, [r2, #8]
    break;
 8012050:	e7ec      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8012052:	68ca      	ldr	r2, [r1, #12]
 8012054:	6849      	ldr	r1, [r1, #4]
 8012056:	6800      	ldr	r0, [r0, #0]
 8012058:	f7ff ff3a 	bl	8011ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801205c:	2150      	movs	r1, #80	; 0x50
 801205e:	6820      	ldr	r0, [r4, #0]
 8012060:	f7ff ff5d 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8012064:	e7e2      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8012066:	68ca      	ldr	r2, [r1, #12]
 8012068:	6849      	ldr	r1, [r1, #4]
 801206a:	6800      	ldr	r0, [r0, #0]
 801206c:	f7ff ff30 	bl	8011ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012070:	2140      	movs	r1, #64	; 0x40
 8012072:	6820      	ldr	r0, [r4, #0]
 8012074:	f7ff ff53 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8012078:	e7d8      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 801207a:	2110      	movs	r1, #16
 801207c:	6800      	ldr	r0, [r0, #0]
 801207e:	f7ff ff4e 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8012082:	e7d3      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8012084:	2120      	movs	r1, #32
 8012086:	6800      	ldr	r0, [r0, #0]
 8012088:	f7ff ff49 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 801208c:	e7ce      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 801208e:	2002      	movs	r0, #2
 8012090:	4770      	bx	lr

08012092 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8012092:	4770      	bx	lr

08012094 <HAL_TIM_IC_CaptureCallback>:
{
 8012094:	4770      	bx	lr

08012096 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8012096:	4770      	bx	lr

08012098 <HAL_TIM_TriggerCallback>:
{
 8012098:	4770      	bx	lr

0801209a <HAL_TIM_IRQHandler>:
{
 801209a:	b510      	push	{r4, lr}
 801209c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801209e:	6803      	ldr	r3, [r0, #0]
 80120a0:	691a      	ldr	r2, [r3, #16]
 80120a2:	f012 0f02 	tst.w	r2, #2
 80120a6:	d011      	beq.n	80120cc <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80120a8:	68da      	ldr	r2, [r3, #12]
 80120aa:	f012 0f02 	tst.w	r2, #2
 80120ae:	d00d      	beq.n	80120cc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80120b0:	f06f 0202 	mvn.w	r2, #2
 80120b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80120b6:	2301      	movs	r3, #1
 80120b8:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80120ba:	6803      	ldr	r3, [r0, #0]
 80120bc:	699b      	ldr	r3, [r3, #24]
 80120be:	f013 0f03 	tst.w	r3, #3
 80120c2:	d070      	beq.n	80121a6 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80120c4:	f7ff ffe6 	bl	8012094 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80120c8:	2300      	movs	r3, #0
 80120ca:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	691a      	ldr	r2, [r3, #16]
 80120d0:	f012 0f04 	tst.w	r2, #4
 80120d4:	d012      	beq.n	80120fc <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80120d6:	68da      	ldr	r2, [r3, #12]
 80120d8:	f012 0f04 	tst.w	r2, #4
 80120dc:	d00e      	beq.n	80120fc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80120de:	f06f 0204 	mvn.w	r2, #4
 80120e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80120e4:	2302      	movs	r3, #2
 80120e6:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80120e8:	6823      	ldr	r3, [r4, #0]
 80120ea:	699b      	ldr	r3, [r3, #24]
 80120ec:	f413 7f40 	tst.w	r3, #768	; 0x300
 80120f0:	d05f      	beq.n	80121b2 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80120f2:	4620      	mov	r0, r4
 80120f4:	f7ff ffce 	bl	8012094 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80120f8:	2300      	movs	r3, #0
 80120fa:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80120fc:	6823      	ldr	r3, [r4, #0]
 80120fe:	691a      	ldr	r2, [r3, #16]
 8012100:	f012 0f08 	tst.w	r2, #8
 8012104:	d012      	beq.n	801212c <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8012106:	68da      	ldr	r2, [r3, #12]
 8012108:	f012 0f08 	tst.w	r2, #8
 801210c:	d00e      	beq.n	801212c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801210e:	f06f 0208 	mvn.w	r2, #8
 8012112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012114:	2304      	movs	r3, #4
 8012116:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012118:	6823      	ldr	r3, [r4, #0]
 801211a:	69db      	ldr	r3, [r3, #28]
 801211c:	f013 0f03 	tst.w	r3, #3
 8012120:	d04e      	beq.n	80121c0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8012122:	4620      	mov	r0, r4
 8012124:	f7ff ffb6 	bl	8012094 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012128:	2300      	movs	r3, #0
 801212a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801212c:	6823      	ldr	r3, [r4, #0]
 801212e:	691a      	ldr	r2, [r3, #16]
 8012130:	f012 0f10 	tst.w	r2, #16
 8012134:	d012      	beq.n	801215c <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8012136:	68da      	ldr	r2, [r3, #12]
 8012138:	f012 0f10 	tst.w	r2, #16
 801213c:	d00e      	beq.n	801215c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801213e:	f06f 0210 	mvn.w	r2, #16
 8012142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012144:	2308      	movs	r3, #8
 8012146:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012148:	6823      	ldr	r3, [r4, #0]
 801214a:	69db      	ldr	r3, [r3, #28]
 801214c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8012150:	d03d      	beq.n	80121ce <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8012152:	4620      	mov	r0, r4
 8012154:	f7ff ff9e 	bl	8012094 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012158:	2300      	movs	r3, #0
 801215a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801215c:	6823      	ldr	r3, [r4, #0]
 801215e:	691a      	ldr	r2, [r3, #16]
 8012160:	f012 0f01 	tst.w	r2, #1
 8012164:	d003      	beq.n	801216e <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8012166:	68da      	ldr	r2, [r3, #12]
 8012168:	f012 0f01 	tst.w	r2, #1
 801216c:	d136      	bne.n	80121dc <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801216e:	6823      	ldr	r3, [r4, #0]
 8012170:	691a      	ldr	r2, [r3, #16]
 8012172:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012176:	d003      	beq.n	8012180 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8012178:	68da      	ldr	r2, [r3, #12]
 801217a:	f012 0f80 	tst.w	r2, #128	; 0x80
 801217e:	d134      	bne.n	80121ea <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012180:	6823      	ldr	r3, [r4, #0]
 8012182:	691a      	ldr	r2, [r3, #16]
 8012184:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012188:	d003      	beq.n	8012192 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 801218a:	68da      	ldr	r2, [r3, #12]
 801218c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012190:	d132      	bne.n	80121f8 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012192:	6823      	ldr	r3, [r4, #0]
 8012194:	691a      	ldr	r2, [r3, #16]
 8012196:	f012 0f20 	tst.w	r2, #32
 801219a:	d003      	beq.n	80121a4 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 801219c:	68da      	ldr	r2, [r3, #12]
 801219e:	f012 0f20 	tst.w	r2, #32
 80121a2:	d130      	bne.n	8012206 <HAL_TIM_IRQHandler+0x16c>
 80121a4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80121a6:	f7ff ff74 	bl	8012092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121aa:	4620      	mov	r0, r4
 80121ac:	f7ff ff73 	bl	8012096 <HAL_TIM_PWM_PulseFinishedCallback>
 80121b0:	e78a      	b.n	80120c8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121b2:	4620      	mov	r0, r4
 80121b4:	f7ff ff6d 	bl	8012092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121b8:	4620      	mov	r0, r4
 80121ba:	f7ff ff6c 	bl	8012096 <HAL_TIM_PWM_PulseFinishedCallback>
 80121be:	e79b      	b.n	80120f8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121c0:	4620      	mov	r0, r4
 80121c2:	f7ff ff66 	bl	8012092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80121c6:	4620      	mov	r0, r4
 80121c8:	f7ff ff65 	bl	8012096 <HAL_TIM_PWM_PulseFinishedCallback>
 80121cc:	e7ac      	b.n	8012128 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121ce:	4620      	mov	r0, r4
 80121d0:	f7ff ff5f 	bl	8012092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121d4:	4620      	mov	r0, r4
 80121d6:	f7ff ff5e 	bl	8012096 <HAL_TIM_PWM_PulseFinishedCallback>
 80121da:	e7bd      	b.n	8012158 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80121dc:	f06f 0201 	mvn.w	r2, #1
 80121e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80121e2:	4620      	mov	r0, r4
 80121e4:	f00b fb82 	bl	801d8ec <HAL_TIM_PeriodElapsedCallback>
 80121e8:	e7c1      	b.n	801216e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80121ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80121ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80121f0:	4620      	mov	r0, r4
 80121f2:	f000 f8e0 	bl	80123b6 <HAL_TIMEx_BreakCallback>
 80121f6:	e7c3      	b.n	8012180 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80121f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80121fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80121fe:	4620      	mov	r0, r4
 8012200:	f7ff ff4a 	bl	8012098 <HAL_TIM_TriggerCallback>
 8012204:	e7c5      	b.n	8012192 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012206:	f06f 0220 	mvn.w	r2, #32
 801220a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 801220c:	4620      	mov	r0, r4
 801220e:	f000 f8d1 	bl	80123b4 <HAL_TIMEx_CommutationCallback>
}
 8012212:	e7c7      	b.n	80121a4 <HAL_TIM_IRQHandler+0x10a>

08012214 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8012214:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8012216:	4a45      	ldr	r2, [pc, #276]	; (801232c <TIM_Base_SetConfig+0x118>)
 8012218:	4290      	cmp	r0, r2
 801221a:	d04a      	beq.n	80122b2 <TIM_Base_SetConfig+0x9e>
 801221c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012220:	d049      	beq.n	80122b6 <TIM_Base_SetConfig+0xa2>
 8012222:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8012226:	4290      	cmp	r0, r2
 8012228:	d047      	beq.n	80122ba <TIM_Base_SetConfig+0xa6>
 801222a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801222e:	4290      	cmp	r0, r2
 8012230:	d045      	beq.n	80122be <TIM_Base_SetConfig+0xaa>
 8012232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012236:	4290      	cmp	r0, r2
 8012238:	d043      	beq.n	80122c2 <TIM_Base_SetConfig+0xae>
 801223a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801223e:	4290      	cmp	r0, r2
 8012240:	d035      	beq.n	80122ae <TIM_Base_SetConfig+0x9a>
 8012242:	2200      	movs	r2, #0
 8012244:	b11a      	cbz	r2, 801224e <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801224a:	684a      	ldr	r2, [r1, #4]
 801224c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 801224e:	4a37      	ldr	r2, [pc, #220]	; (801232c <TIM_Base_SetConfig+0x118>)
 8012250:	4290      	cmp	r0, r2
 8012252:	d03a      	beq.n	80122ca <TIM_Base_SetConfig+0xb6>
 8012254:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012258:	d050      	beq.n	80122fc <TIM_Base_SetConfig+0xe8>
 801225a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 801225e:	4290      	cmp	r0, r2
 8012260:	d04e      	beq.n	8012300 <TIM_Base_SetConfig+0xec>
 8012262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012266:	4290      	cmp	r0, r2
 8012268:	d04c      	beq.n	8012304 <TIM_Base_SetConfig+0xf0>
 801226a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801226e:	4290      	cmp	r0, r2
 8012270:	d04a      	beq.n	8012308 <TIM_Base_SetConfig+0xf4>
 8012272:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8012276:	4290      	cmp	r0, r2
 8012278:	d048      	beq.n	801230c <TIM_Base_SetConfig+0xf8>
 801227a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 801227e:	4290      	cmp	r0, r2
 8012280:	d046      	beq.n	8012310 <TIM_Base_SetConfig+0xfc>
 8012282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012286:	4290      	cmp	r0, r2
 8012288:	d044      	beq.n	8012314 <TIM_Base_SetConfig+0x100>
 801228a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801228e:	4290      	cmp	r0, r2
 8012290:	d042      	beq.n	8012318 <TIM_Base_SetConfig+0x104>
 8012292:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8012296:	4290      	cmp	r0, r2
 8012298:	d040      	beq.n	801231c <TIM_Base_SetConfig+0x108>
 801229a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801229e:	4290      	cmp	r0, r2
 80122a0:	d03e      	beq.n	8012320 <TIM_Base_SetConfig+0x10c>
 80122a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80122a6:	4290      	cmp	r0, r2
 80122a8:	d00d      	beq.n	80122c6 <TIM_Base_SetConfig+0xb2>
 80122aa:	2200      	movs	r2, #0
 80122ac:	e00e      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80122ae:	2201      	movs	r2, #1
 80122b0:	e7c8      	b.n	8012244 <TIM_Base_SetConfig+0x30>
 80122b2:	2201      	movs	r2, #1
 80122b4:	e7c6      	b.n	8012244 <TIM_Base_SetConfig+0x30>
 80122b6:	2201      	movs	r2, #1
 80122b8:	e7c4      	b.n	8012244 <TIM_Base_SetConfig+0x30>
 80122ba:	2201      	movs	r2, #1
 80122bc:	e7c2      	b.n	8012244 <TIM_Base_SetConfig+0x30>
 80122be:	2201      	movs	r2, #1
 80122c0:	e7c0      	b.n	8012244 <TIM_Base_SetConfig+0x30>
 80122c2:	2201      	movs	r2, #1
 80122c4:	e7be      	b.n	8012244 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80122c6:	2201      	movs	r2, #1
 80122c8:	e000      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 80122ca:	2201      	movs	r2, #1
 80122cc:	b11a      	cbz	r2, 80122d6 <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 80122ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80122d2:	68ca      	ldr	r2, [r1, #12]
 80122d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80122d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80122d8:	688b      	ldr	r3, [r1, #8]
 80122da:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80122dc:	680b      	ldr	r3, [r1, #0]
 80122de:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80122e0:	4b12      	ldr	r3, [pc, #72]	; (801232c <TIM_Base_SetConfig+0x118>)
 80122e2:	4298      	cmp	r0, r3
 80122e4:	d020      	beq.n	8012328 <TIM_Base_SetConfig+0x114>
 80122e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80122ea:	4298      	cmp	r0, r3
 80122ec:	d01a      	beq.n	8012324 <TIM_Base_SetConfig+0x110>
 80122ee:	2300      	movs	r3, #0
 80122f0:	b10b      	cbz	r3, 80122f6 <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 80122f2:	690b      	ldr	r3, [r1, #16]
 80122f4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80122f6:	2301      	movs	r3, #1
 80122f8:	6143      	str	r3, [r0, #20]
 80122fa:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80122fc:	2201      	movs	r2, #1
 80122fe:	e7e5      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012300:	2201      	movs	r2, #1
 8012302:	e7e3      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012304:	2201      	movs	r2, #1
 8012306:	e7e1      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012308:	2201      	movs	r2, #1
 801230a:	e7df      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 801230c:	2201      	movs	r2, #1
 801230e:	e7dd      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012310:	2201      	movs	r2, #1
 8012312:	e7db      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012314:	2201      	movs	r2, #1
 8012316:	e7d9      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012318:	2201      	movs	r2, #1
 801231a:	e7d7      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 801231c:	2201      	movs	r2, #1
 801231e:	e7d5      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012320:	2201      	movs	r2, #1
 8012322:	e7d3      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8012324:	2301      	movs	r3, #1
 8012326:	e7e3      	b.n	80122f0 <TIM_Base_SetConfig+0xdc>
 8012328:	2301      	movs	r3, #1
 801232a:	e7e1      	b.n	80122f0 <TIM_Base_SetConfig+0xdc>
 801232c:	40010000 	.word	0x40010000

08012330 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8012330:	b1a8      	cbz	r0, 801235e <HAL_TIM_Base_Init+0x2e>
{ 
 8012332:	b510      	push	{r4, lr}
 8012334:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8012336:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801233a:	b15b      	cbz	r3, 8012354 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 801233c:	2302      	movs	r3, #2
 801233e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8012342:	1d21      	adds	r1, r4, #4
 8012344:	6820      	ldr	r0, [r4, #0]
 8012346:	f7ff ff65 	bl	8012214 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 801234a:	2301      	movs	r3, #1
 801234c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8012350:	2000      	movs	r0, #0
 8012352:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8012354:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8012358:	f00b fca8 	bl	801dcac <HAL_TIM_Base_MspInit>
 801235c:	e7ee      	b.n	801233c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 801235e:	2001      	movs	r0, #1
 8012360:	4770      	bx	lr

08012362 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8012362:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8012366:	2b01      	cmp	r3, #1
 8012368:	d022      	beq.n	80123b0 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 801236a:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 801236c:	2201      	movs	r2, #1
 801236e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8012372:	2302      	movs	r3, #2
 8012374:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012378:	6804      	ldr	r4, [r0, #0]
 801237a:	6863      	ldr	r3, [r4, #4]
 801237c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012380:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8012382:	6804      	ldr	r4, [r0, #0]
 8012384:	6863      	ldr	r3, [r4, #4]
 8012386:	680d      	ldr	r5, [r1, #0]
 8012388:	432b      	orrs	r3, r5
 801238a:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801238c:	6804      	ldr	r4, [r0, #0]
 801238e:	68a3      	ldr	r3, [r4, #8]
 8012390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012394:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012396:	6804      	ldr	r4, [r0, #0]
 8012398:	68a3      	ldr	r3, [r4, #8]
 801239a:	6849      	ldr	r1, [r1, #4]
 801239c:	430b      	orrs	r3, r1
 801239e:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80123a0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80123a4:	2300      	movs	r3, #0
 80123a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80123aa:	4618      	mov	r0, r3
} 
 80123ac:	bc30      	pop	{r4, r5}
 80123ae:	4770      	bx	lr
  __HAL_LOCK(htim);
 80123b0:	2002      	movs	r0, #2
 80123b2:	4770      	bx	lr

080123b4 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80123b4:	4770      	bx	lr

080123b6 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80123b6:	4770      	bx	lr

080123b8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80123b8:	6802      	ldr	r2, [r0, #0]
 80123ba:	68d3      	ldr	r3, [r2, #12]
 80123bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80123c0:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80123c2:	2320      	movs	r3, #32
 80123c4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 80123c8:	4770      	bx	lr

080123ca <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80123ca:	6802      	ldr	r2, [r0, #0]
 80123cc:	68d3      	ldr	r3, [r2, #12]
 80123ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80123d2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123d4:	6802      	ldr	r2, [r0, #0]
 80123d6:	6953      	ldr	r3, [r2, #20]
 80123d8:	f023 0301 	bic.w	r3, r3, #1
 80123dc:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80123de:	2320      	movs	r3, #32
 80123e0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80123e4:	4770      	bx	lr

080123e6 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80123e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	2b21      	cmp	r3, #33	; 0x21
 80123ee:	d001      	beq.n	80123f4 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80123f0:	2002      	movs	r0, #2
 80123f2:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80123f4:	6883      	ldr	r3, [r0, #8]
 80123f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123fa:	d017      	beq.n	801242c <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80123fc:	6802      	ldr	r2, [r0, #0]
 80123fe:	6a03      	ldr	r3, [r0, #32]
 8012400:	1c59      	adds	r1, r3, #1
 8012402:	6201      	str	r1, [r0, #32]
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8012408:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801240a:	b29b      	uxth	r3, r3
 801240c:	3b01      	subs	r3, #1
 801240e:	b29b      	uxth	r3, r3
 8012410:	84c3      	strh	r3, [r0, #38]	; 0x26
 8012412:	b9db      	cbnz	r3, 801244c <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8012414:	6802      	ldr	r2, [r0, #0]
 8012416:	68d3      	ldr	r3, [r2, #12]
 8012418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801241c:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801241e:	6802      	ldr	r2, [r0, #0]
 8012420:	68d3      	ldr	r3, [r2, #12]
 8012422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012426:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8012428:	2000      	movs	r0, #0
 801242a:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 801242c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801242e:	6802      	ldr	r2, [r0, #0]
 8012430:	881b      	ldrh	r3, [r3, #0]
 8012432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012436:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8012438:	6903      	ldr	r3, [r0, #16]
 801243a:	b91b      	cbnz	r3, 8012444 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 801243c:	6a03      	ldr	r3, [r0, #32]
 801243e:	3302      	adds	r3, #2
 8012440:	6203      	str	r3, [r0, #32]
 8012442:	e7e1      	b.n	8012408 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8012444:	6a03      	ldr	r3, [r0, #32]
 8012446:	3301      	adds	r3, #1
 8012448:	6203      	str	r3, [r0, #32]
 801244a:	e7dd      	b.n	8012408 <UART_Transmit_IT+0x22>
    return HAL_OK;
 801244c:	2000      	movs	r0, #0
  }
}
 801244e:	4770      	bx	lr

08012450 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012454:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8012456:	6802      	ldr	r2, [r0, #0]
 8012458:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 801245a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 801245e:	68c1      	ldr	r1, [r0, #12]
 8012460:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8012462:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8012464:	6801      	ldr	r1, [r0, #0]
 8012466:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8012468:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801246c:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012470:	6882      	ldr	r2, [r0, #8]
 8012472:	6900      	ldr	r0, [r0, #16]
 8012474:	4302      	orrs	r2, r0
 8012476:	6960      	ldr	r0, [r4, #20]
 8012478:	4302      	orrs	r2, r0
 801247a:	69e0      	ldr	r0, [r4, #28]
 801247c:	4302      	orrs	r2, r0
 801247e:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8012480:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8012482:	6822      	ldr	r2, [r4, #0]
 8012484:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8012486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 801248a:	69a1      	ldr	r1, [r4, #24]
 801248c:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 801248e:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012490:	69e3      	ldr	r3, [r4, #28]
 8012492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012496:	d062      	beq.n	801255e <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8012498:	f8d4 8000 	ldr.w	r8, [r4]
 801249c:	4bbb      	ldr	r3, [pc, #748]	; (801278c <UART_SetConfig+0x33c>)
 801249e:	4598      	cmp	r8, r3
 80124a0:	f000 811b 	beq.w	80126da <UART_SetConfig+0x28a>
 80124a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80124a8:	4598      	cmp	r8, r3
 80124aa:	f000 8116 	beq.w	80126da <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80124ae:	f7ff fcd1 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80124b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124ba:	6865      	ldr	r5, [r4, #4]
 80124bc:	00ad      	lsls	r5, r5, #2
 80124be:	fbb0 f5f5 	udiv	r5, r0, r5
 80124c2:	4fb3      	ldr	r7, [pc, #716]	; (8012790 <UART_SetConfig+0x340>)
 80124c4:	fba7 3505 	umull	r3, r5, r7, r5
 80124c8:	096d      	lsrs	r5, r5, #5
 80124ca:	012e      	lsls	r6, r5, #4
 80124cc:	f7ff fcc2 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80124d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124d8:	6865      	ldr	r5, [r4, #4]
 80124da:	00ad      	lsls	r5, r5, #2
 80124dc:	fbb0 faf5 	udiv	sl, r0, r5
 80124e0:	f7ff fcb8 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80124e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124ec:	6865      	ldr	r5, [r4, #4]
 80124ee:	00ad      	lsls	r5, r5, #2
 80124f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80124f4:	fba7 3505 	umull	r3, r5, r7, r5
 80124f8:	096d      	lsrs	r5, r5, #5
 80124fa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80124fe:	fb09 a515 	mls	r5, r9, r5, sl
 8012502:	012d      	lsls	r5, r5, #4
 8012504:	3532      	adds	r5, #50	; 0x32
 8012506:	fba7 3505 	umull	r3, r5, r7, r5
 801250a:	096d      	lsrs	r5, r5, #5
 801250c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8012510:	4435      	add	r5, r6
 8012512:	f7ff fc9f 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 8012516:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801251a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801251e:	6866      	ldr	r6, [r4, #4]
 8012520:	00b6      	lsls	r6, r6, #2
 8012522:	fbb0 f6f6 	udiv	r6, r0, r6
 8012526:	f7ff fc95 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 801252a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801252e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012532:	6863      	ldr	r3, [r4, #4]
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	fbb0 f0f3 	udiv	r0, r0, r3
 801253a:	fba7 3000 	umull	r3, r0, r7, r0
 801253e:	0940      	lsrs	r0, r0, #5
 8012540:	fb09 6910 	mls	r9, r9, r0, r6
 8012544:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8012548:	f109 0932 	add.w	r9, r9, #50	; 0x32
 801254c:	fba7 3709 	umull	r3, r7, r7, r9
 8012550:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8012554:	442f      	add	r7, r5
 8012556:	f8c8 7008 	str.w	r7, [r8, #8]
 801255a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 801255e:	f8d4 8000 	ldr.w	r8, [r4]
 8012562:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012566:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 801256a:	4598      	cmp	r8, r3
 801256c:	d05c      	beq.n	8012628 <UART_SetConfig+0x1d8>
 801256e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012572:	4598      	cmp	r8, r3
 8012574:	d058      	beq.n	8012628 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8012576:	f7ff fc6d 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 801257a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801257e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012582:	6865      	ldr	r5, [r4, #4]
 8012584:	006d      	lsls	r5, r5, #1
 8012586:	fbb0 f5f5 	udiv	r5, r0, r5
 801258a:	4f81      	ldr	r7, [pc, #516]	; (8012790 <UART_SetConfig+0x340>)
 801258c:	fba7 3505 	umull	r3, r5, r7, r5
 8012590:	096d      	lsrs	r5, r5, #5
 8012592:	012e      	lsls	r6, r5, #4
 8012594:	f7ff fc5e 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 8012598:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801259c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125a0:	6865      	ldr	r5, [r4, #4]
 80125a2:	006d      	lsls	r5, r5, #1
 80125a4:	fbb0 faf5 	udiv	sl, r0, r5
 80125a8:	f7ff fc54 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80125ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125b4:	6865      	ldr	r5, [r4, #4]
 80125b6:	006d      	lsls	r5, r5, #1
 80125b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80125bc:	fba7 3505 	umull	r3, r5, r7, r5
 80125c0:	096d      	lsrs	r5, r5, #5
 80125c2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80125c6:	fb09 a515 	mls	r5, r9, r5, sl
 80125ca:	00ed      	lsls	r5, r5, #3
 80125cc:	3532      	adds	r5, #50	; 0x32
 80125ce:	fba7 3505 	umull	r3, r5, r7, r5
 80125d2:	096d      	lsrs	r5, r5, #5
 80125d4:	006d      	lsls	r5, r5, #1
 80125d6:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80125da:	4435      	add	r5, r6
 80125dc:	f7ff fc3a 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80125e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125e8:	6866      	ldr	r6, [r4, #4]
 80125ea:	0076      	lsls	r6, r6, #1
 80125ec:	fbb0 f6f6 	udiv	r6, r0, r6
 80125f0:	f7ff fc30 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80125f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125fc:	6863      	ldr	r3, [r4, #4]
 80125fe:	005b      	lsls	r3, r3, #1
 8012600:	fbb0 f3f3 	udiv	r3, r0, r3
 8012604:	fba7 2303 	umull	r2, r3, r7, r3
 8012608:	095b      	lsrs	r3, r3, #5
 801260a:	fb09 6913 	mls	r9, r9, r3, r6
 801260e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8012612:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8012616:	fba7 3709 	umull	r3, r7, r7, r9
 801261a:	f3c7 1742 	ubfx	r7, r7, #5, #3
 801261e:	442f      	add	r7, r5
 8012620:	f8c8 7008 	str.w	r7, [r8, #8]
 8012624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8012628:	f7ff fc24 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 801262c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012634:	6865      	ldr	r5, [r4, #4]
 8012636:	006d      	lsls	r5, r5, #1
 8012638:	fbb0 f5f5 	udiv	r5, r0, r5
 801263c:	4f54      	ldr	r7, [pc, #336]	; (8012790 <UART_SetConfig+0x340>)
 801263e:	fba7 3505 	umull	r3, r5, r7, r5
 8012642:	096d      	lsrs	r5, r5, #5
 8012644:	012e      	lsls	r6, r5, #4
 8012646:	f7ff fc15 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 801264a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801264e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012652:	6865      	ldr	r5, [r4, #4]
 8012654:	006d      	lsls	r5, r5, #1
 8012656:	fbb0 faf5 	udiv	sl, r0, r5
 801265a:	f7ff fc0b 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 801265e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012662:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012666:	6865      	ldr	r5, [r4, #4]
 8012668:	006d      	lsls	r5, r5, #1
 801266a:	fbb0 f5f5 	udiv	r5, r0, r5
 801266e:	fba7 3505 	umull	r3, r5, r7, r5
 8012672:	096d      	lsrs	r5, r5, #5
 8012674:	f04f 0964 	mov.w	r9, #100	; 0x64
 8012678:	fb09 a515 	mls	r5, r9, r5, sl
 801267c:	00ed      	lsls	r5, r5, #3
 801267e:	3532      	adds	r5, #50	; 0x32
 8012680:	fba7 3505 	umull	r3, r5, r7, r5
 8012684:	096d      	lsrs	r5, r5, #5
 8012686:	006d      	lsls	r5, r5, #1
 8012688:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 801268c:	4435      	add	r5, r6
 801268e:	f7ff fbf1 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 8012692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012696:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801269a:	6866      	ldr	r6, [r4, #4]
 801269c:	0076      	lsls	r6, r6, #1
 801269e:	fbb0 f6f6 	udiv	r6, r0, r6
 80126a2:	f7ff fbe7 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 80126a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80126aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80126ae:	6863      	ldr	r3, [r4, #4]
 80126b0:	005b      	lsls	r3, r3, #1
 80126b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80126b6:	fba7 2303 	umull	r2, r3, r7, r3
 80126ba:	095b      	lsrs	r3, r3, #5
 80126bc:	fb09 6913 	mls	r9, r9, r3, r6
 80126c0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80126c4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80126c8:	fba7 3709 	umull	r3, r7, r7, r9
 80126cc:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80126d0:	442f      	add	r7, r5
 80126d2:	f8c8 7008 	str.w	r7, [r8, #8]
 80126d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80126da:	f7ff fbcb 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 80126de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80126e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80126e6:	6865      	ldr	r5, [r4, #4]
 80126e8:	00ad      	lsls	r5, r5, #2
 80126ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80126ee:	4f28      	ldr	r7, [pc, #160]	; (8012790 <UART_SetConfig+0x340>)
 80126f0:	fba7 3505 	umull	r3, r5, r7, r5
 80126f4:	096d      	lsrs	r5, r5, #5
 80126f6:	012e      	lsls	r6, r5, #4
 80126f8:	f7ff fbbc 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 80126fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012700:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012704:	6865      	ldr	r5, [r4, #4]
 8012706:	00ad      	lsls	r5, r5, #2
 8012708:	fbb0 faf5 	udiv	sl, r0, r5
 801270c:	f7ff fbb2 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 8012710:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012714:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012718:	6865      	ldr	r5, [r4, #4]
 801271a:	00ad      	lsls	r5, r5, #2
 801271c:	fbb0 f5f5 	udiv	r5, r0, r5
 8012720:	fba7 3505 	umull	r3, r5, r7, r5
 8012724:	096d      	lsrs	r5, r5, #5
 8012726:	f04f 0964 	mov.w	r9, #100	; 0x64
 801272a:	fb09 a515 	mls	r5, r9, r5, sl
 801272e:	012d      	lsls	r5, r5, #4
 8012730:	3532      	adds	r5, #50	; 0x32
 8012732:	fba7 3505 	umull	r3, r5, r7, r5
 8012736:	096d      	lsrs	r5, r5, #5
 8012738:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 801273c:	4435      	add	r5, r6
 801273e:	f7ff fb99 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 8012742:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012746:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801274a:	6866      	ldr	r6, [r4, #4]
 801274c:	00b6      	lsls	r6, r6, #2
 801274e:	fbb0 f6f6 	udiv	r6, r0, r6
 8012752:	f7ff fb8f 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 8012756:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801275a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801275e:	6863      	ldr	r3, [r4, #4]
 8012760:	009b      	lsls	r3, r3, #2
 8012762:	fbb0 f3f3 	udiv	r3, r0, r3
 8012766:	fba7 2303 	umull	r2, r3, r7, r3
 801276a:	095b      	lsrs	r3, r3, #5
 801276c:	fb09 6913 	mls	r9, r9, r3, r6
 8012770:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8012774:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8012778:	fba7 3709 	umull	r3, r7, r7, r9
 801277c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8012780:	442f      	add	r7, r5
 8012782:	f8c8 7008 	str.w	r7, [r8, #8]
 8012786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801278a:	bf00      	nop
 801278c:	40011000 	.word	0x40011000
 8012790:	51eb851f 	.word	0x51eb851f

08012794 <HAL_UART_Init>:
  if(huart == NULL)
 8012794:	b358      	cbz	r0, 80127ee <HAL_UART_Init+0x5a>
{
 8012796:	b510      	push	{r4, lr}
 8012798:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 801279a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801279e:	b30b      	cbz	r3, 80127e4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80127a0:	2324      	movs	r3, #36	; 0x24
 80127a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80127a6:	6822      	ldr	r2, [r4, #0]
 80127a8:	68d3      	ldr	r3, [r2, #12]
 80127aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80127ae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80127b0:	4620      	mov	r0, r4
 80127b2:	f7ff fe4d 	bl	8012450 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80127b6:	6822      	ldr	r2, [r4, #0]
 80127b8:	6913      	ldr	r3, [r2, #16]
 80127ba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80127be:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80127c0:	6822      	ldr	r2, [r4, #0]
 80127c2:	6953      	ldr	r3, [r2, #20]
 80127c4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80127c8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80127ca:	6822      	ldr	r2, [r4, #0]
 80127cc:	68d3      	ldr	r3, [r2, #12]
 80127ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80127d2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127d4:	2000      	movs	r0, #0
 80127d6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80127d8:	2320      	movs	r3, #32
 80127da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80127de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80127e2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80127e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80127e8:	f00b fbf6 	bl	801dfd8 <HAL_UART_MspInit>
 80127ec:	e7d8      	b.n	80127a0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80127ee:	2001      	movs	r0, #1
 80127f0:	4770      	bx	lr

080127f2 <HAL_UART_DeInit>:
  if(huart == NULL)
 80127f2:	b178      	cbz	r0, 8012814 <HAL_UART_DeInit+0x22>
{
 80127f4:	b510      	push	{r4, lr}
 80127f6:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80127f8:	2324      	movs	r3, #36	; 0x24
 80127fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_MspDeInit(huart);
 80127fe:	f00b fc9f 	bl	801e140 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012802:	2000      	movs	r0, #0
 8012804:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8012806:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 801280a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  __HAL_UNLOCK(huart);
 801280e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8012812:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8012814:	2001      	movs	r0, #1
 8012816:	4770      	bx	lr

08012818 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8012818:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 801281c:	b2db      	uxtb	r3, r3
 801281e:	2b20      	cmp	r3, #32
 8012820:	d001      	beq.n	8012826 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY; 
 8012822:	2002      	movs	r0, #2
 8012824:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0)) 
 8012826:	b1d1      	cbz	r1, 801285e <HAL_UART_Receive_IT+0x46>
 8012828:	b1da      	cbz	r2, 8012862 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 801282a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801282e:	2b01      	cmp	r3, #1
 8012830:	d019      	beq.n	8012866 <HAL_UART_Receive_IT+0x4e>
    huart->pRxBuffPtr = pData;
 8012832:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8012834:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8012836:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012838:	2300      	movs	r3, #0
 801283a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801283c:	2222      	movs	r2, #34	; 0x22
 801283e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8012842:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012846:	6801      	ldr	r1, [r0, #0]
 8012848:	694a      	ldr	r2, [r1, #20]
 801284a:	f042 0201 	orr.w	r2, r2, #1
 801284e:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8012850:	6801      	ldr	r1, [r0, #0]
 8012852:	68ca      	ldr	r2, [r1, #12]
 8012854:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8012858:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 801285a:	4618      	mov	r0, r3
 801285c:	4770      	bx	lr
      return HAL_ERROR;
 801285e:	2001      	movs	r0, #1
 8012860:	4770      	bx	lr
 8012862:	2001      	movs	r0, #1
 8012864:	4770      	bx	lr
    __HAL_LOCK(huart);
 8012866:	2002      	movs	r0, #2
}
 8012868:	4770      	bx	lr
	...

0801286c <HAL_UART_Transmit_DMA>:
{
 801286c:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 801286e:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8012872:	b2e4      	uxtb	r4, r4
 8012874:	2c20      	cmp	r4, #32
 8012876:	d001      	beq.n	801287c <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 8012878:	2002      	movs	r0, #2
 801287a:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL ) || (Size == 0))
 801287c:	2900      	cmp	r1, #0
 801287e:	d031      	beq.n	80128e4 <HAL_UART_Transmit_DMA+0x78>
 8012880:	2a00      	cmp	r2, #0
 8012882:	d031      	beq.n	80128e8 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8012884:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8012888:	2b01      	cmp	r3, #1
 801288a:	d101      	bne.n	8012890 <HAL_UART_Transmit_DMA+0x24>
 801288c:	2002      	movs	r0, #2
}
 801288e:	bd38      	pop	{r3, r4, r5, pc}
 8012890:	4613      	mov	r3, r2
 8012892:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8012894:	2201      	movs	r2, #1
 8012896:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 801289a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 801289c:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 801289e:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128a0:	2500      	movs	r5, #0
 80128a2:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80128a4:	2221      	movs	r2, #33	; 0x21
 80128a6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80128aa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80128ac:	480f      	ldr	r0, [pc, #60]	; (80128ec <HAL_UART_Transmit_DMA+0x80>)
 80128ae:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80128b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80128b2:	480f      	ldr	r0, [pc, #60]	; (80128f0 <HAL_UART_Transmit_DMA+0x84>)
 80128b4:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80128b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80128b8:	480e      	ldr	r0, [pc, #56]	; (80128f4 <HAL_UART_Transmit_DMA+0x88>)
 80128ba:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 80128bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80128be:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80128c0:	6822      	ldr	r2, [r4, #0]
 80128c2:	3204      	adds	r2, #4
 80128c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80128c6:	f7fd ff03 	bl	80106d0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80128ca:	6823      	ldr	r3, [r4, #0]
 80128cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80128d0:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 80128d2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80128d6:	6822      	ldr	r2, [r4, #0]
 80128d8:	6953      	ldr	r3, [r2, #20]
 80128da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128de:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80128e0:	4628      	mov	r0, r5
 80128e2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80128e4:	2001      	movs	r0, #1
 80128e6:	bd38      	pop	{r3, r4, r5, pc}
 80128e8:	2001      	movs	r0, #1
 80128ea:	bd38      	pop	{r3, r4, r5, pc}
 80128ec:	080128fb 	.word	0x080128fb
 80128f0:	08012947 	.word	0x08012947
 80128f4:	080129e7 	.word	0x080129e7

080128f8 <HAL_UART_TxCpltCallback>:
{
 80128f8:	4770      	bx	lr

080128fa <UART_DMATransmitCplt>:
{
 80128fa:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80128fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80128fe:	6802      	ldr	r2, [r0, #0]
 8012900:	6812      	ldr	r2, [r2, #0]
 8012902:	f412 7f80 	tst.w	r2, #256	; 0x100
 8012906:	d10c      	bne.n	8012922 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0U;
 8012908:	2200      	movs	r2, #0
 801290a:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801290c:	6819      	ldr	r1, [r3, #0]
 801290e:	694a      	ldr	r2, [r1, #20]
 8012910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012914:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012916:	681a      	ldr	r2, [r3, #0]
 8012918:	68d3      	ldr	r3, [r2, #12]
 801291a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801291e:	60d3      	str	r3, [r2, #12]
 8012920:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8012922:	4618      	mov	r0, r3
 8012924:	f7ff ffe8 	bl	80128f8 <HAL_UART_TxCpltCallback>
 8012928:	bd08      	pop	{r3, pc}

0801292a <UART_EndTransmit_IT>:
{
 801292a:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801292c:	6801      	ldr	r1, [r0, #0]
 801292e:	68cb      	ldr	r3, [r1, #12]
 8012930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012934:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8012936:	2320      	movs	r3, #32
 8012938:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 801293c:	f7ff ffdc 	bl	80128f8 <HAL_UART_TxCpltCallback>
}
 8012940:	2000      	movs	r0, #0
 8012942:	bd08      	pop	{r3, pc}

08012944 <HAL_UART_TxHalfCpltCallback>:
{
 8012944:	4770      	bx	lr

08012946 <UART_DMATxHalfCplt>:
{
 8012946:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8012948:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801294a:	f7ff fffb 	bl	8012944 <HAL_UART_TxHalfCpltCallback>
 801294e:	bd08      	pop	{r3, pc}

08012950 <UART_Receive_IT>:
{
 8012950:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8012952:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8012956:	b2db      	uxtb	r3, r3
 8012958:	2b22      	cmp	r3, #34	; 0x22
 801295a:	d001      	beq.n	8012960 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 801295c:	2002      	movs	r0, #2
 801295e:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012960:	6883      	ldr	r3, [r0, #8]
 8012962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012966:	d00f      	beq.n	8012988 <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8012968:	6903      	ldr	r3, [r0, #16]
 801296a:	bb0b      	cbnz	r3, 80129b0 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801296c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801296e:	1c5a      	adds	r2, r3, #1
 8012970:	6282      	str	r2, [r0, #40]	; 0x28
 8012972:	6802      	ldr	r2, [r0, #0]
 8012974:	6852      	ldr	r2, [r2, #4]
 8012976:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8012978:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801297a:	b29b      	uxth	r3, r3
 801297c:	3b01      	subs	r3, #1
 801297e:	b29b      	uxth	r3, r3
 8012980:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8012982:	b1f3      	cbz	r3, 80129c2 <UART_Receive_IT+0x72>
    return HAL_OK;
 8012984:	2000      	movs	r0, #0
}
 8012986:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8012988:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 801298a:	6903      	ldr	r3, [r0, #16]
 801298c:	b943      	cbnz	r3, 80129a0 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801298e:	6803      	ldr	r3, [r0, #0]
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012996:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8012998:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801299a:	3302      	adds	r3, #2
 801299c:	6283      	str	r3, [r0, #40]	; 0x28
 801299e:	e7eb      	b.n	8012978 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80129a0:	6803      	ldr	r3, [r0, #0]
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80129a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80129aa:	3301      	adds	r3, #1
 80129ac:	6283      	str	r3, [r0, #40]	; 0x28
 80129ae:	e7e3      	b.n	8012978 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80129b0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80129b2:	1c53      	adds	r3, r2, #1
 80129b4:	6283      	str	r3, [r0, #40]	; 0x28
 80129b6:	6803      	ldr	r3, [r0, #0]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129be:	7013      	strb	r3, [r2, #0]
 80129c0:	e7da      	b.n	8012978 <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80129c2:	6802      	ldr	r2, [r0, #0]
 80129c4:	68d3      	ldr	r3, [r2, #12]
 80129c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80129ca:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80129cc:	6802      	ldr	r2, [r0, #0]
 80129ce:	6953      	ldr	r3, [r2, #20]
 80129d0:	f023 0301 	bic.w	r3, r3, #1
 80129d4:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80129d6:	2320      	movs	r3, #32
 80129d8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80129dc:	f00a ffcc 	bl	801d978 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80129e0:	2000      	movs	r0, #0
 80129e2:	bd08      	pop	{r3, pc}

080129e4 <HAL_UART_ErrorCallback>:
{
 80129e4:	4770      	bx	lr

080129e6 <UART_DMAError>:
{
 80129e6:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80129e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80129ea:	6823      	ldr	r3, [r4, #0]
 80129ec:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80129ee:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	2b21      	cmp	r3, #33	; 0x21
 80129f6:	d010      	beq.n	8012a1a <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80129f8:	6823      	ldr	r3, [r4, #0]
 80129fa:	695a      	ldr	r2, [r3, #20]
 80129fc:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8012a00:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	2b22      	cmp	r3, #34	; 0x22
 8012a08:	d011      	beq.n	8012a2e <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012a0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012a0c:	f043 0310 	orr.w	r3, r3, #16
 8012a10:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8012a12:	4620      	mov	r0, r4
 8012a14:	f7ff ffe6 	bl	80129e4 <HAL_UART_ErrorCallback>
 8012a18:	bd10      	pop	{r4, pc}
 8012a1a:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8012a1e:	2a00      	cmp	r2, #0
 8012a20:	d0ea      	beq.n	80129f8 <UART_DMAError+0x12>
    huart->TxXferCount = 0U;
 8012a22:	2300      	movs	r3, #0
 8012a24:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8012a26:	4620      	mov	r0, r4
 8012a28:	f7ff fcc6 	bl	80123b8 <UART_EndTxTransfer>
 8012a2c:	e7e4      	b.n	80129f8 <UART_DMAError+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8012a2e:	2a00      	cmp	r2, #0
 8012a30:	d0eb      	beq.n	8012a0a <UART_DMAError+0x24>
    huart->RxXferCount = 0U;
 8012a32:	2300      	movs	r3, #0
 8012a34:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8012a36:	4620      	mov	r0, r4
 8012a38:	f7ff fcc7 	bl	80123ca <UART_EndRxTransfer>
 8012a3c:	e7e5      	b.n	8012a0a <UART_DMAError+0x24>
	...

08012a40 <HAL_UART_IRQHandler>:
{
 8012a40:	b510      	push	{r4, lr}
 8012a42:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012a44:	6802      	ldr	r2, [r0, #0]
 8012a46:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012a48:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012a4a:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8012a4c:	f013 000f 	ands.w	r0, r3, #15
 8012a50:	d105      	bne.n	8012a5e <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012a52:	f013 0f20 	tst.w	r3, #32
 8012a56:	d002      	beq.n	8012a5e <HAL_UART_IRQHandler+0x1e>
 8012a58:	f011 0f20 	tst.w	r1, #32
 8012a5c:	d153      	bne.n	8012b06 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	d067      	beq.n	8012b32 <HAL_UART_IRQHandler+0xf2>
 8012a62:	f012 0201 	ands.w	r2, r2, #1
 8012a66:	d102      	bne.n	8012a6e <HAL_UART_IRQHandler+0x2e>
 8012a68:	f411 7f90 	tst.w	r1, #288	; 0x120
 8012a6c:	d061      	beq.n	8012b32 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012a6e:	f013 0f01 	tst.w	r3, #1
 8012a72:	d006      	beq.n	8012a82 <HAL_UART_IRQHandler+0x42>
 8012a74:	f411 7f80 	tst.w	r1, #256	; 0x100
 8012a78:	d003      	beq.n	8012a82 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012a7c:	f040 0001 	orr.w	r0, r0, #1
 8012a80:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a82:	f013 0f04 	tst.w	r3, #4
 8012a86:	d004      	beq.n	8012a92 <HAL_UART_IRQHandler+0x52>
 8012a88:	b11a      	cbz	r2, 8012a92 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a8a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012a8c:	f040 0002 	orr.w	r0, r0, #2
 8012a90:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a92:	f013 0f02 	tst.w	r3, #2
 8012a96:	d004      	beq.n	8012aa2 <HAL_UART_IRQHandler+0x62>
 8012a98:	b11a      	cbz	r2, 8012aa2 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012a9c:	f040 0004 	orr.w	r0, r0, #4
 8012aa0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012aa2:	f013 0f08 	tst.w	r3, #8
 8012aa6:	d004      	beq.n	8012ab2 <HAL_UART_IRQHandler+0x72>
 8012aa8:	b11a      	cbz	r2, 8012ab2 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012aaa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012aac:	f042 0208 	orr.w	r2, r2, #8
 8012ab0:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012ab2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012ab4:	2a00      	cmp	r2, #0
 8012ab6:	d048      	beq.n	8012b4a <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012ab8:	f013 0f20 	tst.w	r3, #32
 8012abc:	d002      	beq.n	8012ac4 <HAL_UART_IRQHandler+0x84>
 8012abe:	f011 0f20 	tst.w	r1, #32
 8012ac2:	d124      	bne.n	8012b0e <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012ac4:	6823      	ldr	r3, [r4, #0]
 8012ac6:	695b      	ldr	r3, [r3, #20]
 8012ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012acc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012ace:	f012 0f08 	tst.w	r2, #8
 8012ad2:	d100      	bne.n	8012ad6 <HAL_UART_IRQHandler+0x96>
 8012ad4:	b33b      	cbz	r3, 8012b26 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	f7ff fc77 	bl	80123ca <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012adc:	6823      	ldr	r3, [r4, #0]
 8012ade:	695a      	ldr	r2, [r3, #20]
 8012ae0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012ae4:	d01b      	beq.n	8012b1e <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012ae6:	695a      	ldr	r2, [r3, #20]
 8012ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012aec:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8012aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012af0:	b18b      	cbz	r3, 8012b16 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012af2:	4a1a      	ldr	r2, [pc, #104]	; (8012b5c <HAL_UART_IRQHandler+0x11c>)
 8012af4:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012af6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012af8:	f7fd fe24 	bl	8010744 <HAL_DMA_Abort_IT>
 8012afc:	b328      	cbz	r0, 8012b4a <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012afe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012b00:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012b02:	4798      	blx	r3
 8012b04:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8012b06:	4620      	mov	r0, r4
 8012b08:	f7ff ff22 	bl	8012950 <UART_Receive_IT>
      return;
 8012b0c:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8012b0e:	4620      	mov	r0, r4
 8012b10:	f7ff ff1e 	bl	8012950 <UART_Receive_IT>
 8012b14:	e7d6      	b.n	8012ac4 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8012b16:	4620      	mov	r0, r4
 8012b18:	f7ff ff64 	bl	80129e4 <HAL_UART_ErrorCallback>
 8012b1c:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f7ff ff60 	bl	80129e4 <HAL_UART_ErrorCallback>
 8012b24:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8012b26:	4620      	mov	r0, r4
 8012b28:	f7ff ff5c 	bl	80129e4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012b30:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012b32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012b36:	d002      	beq.n	8012b3e <HAL_UART_IRQHandler+0xfe>
 8012b38:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012b3c:	d106      	bne.n	8012b4c <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012b3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012b42:	d002      	beq.n	8012b4a <HAL_UART_IRQHandler+0x10a>
 8012b44:	f011 0f40 	tst.w	r1, #64	; 0x40
 8012b48:	d104      	bne.n	8012b54 <HAL_UART_IRQHandler+0x114>
 8012b4a:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	f7ff fc4a 	bl	80123e6 <UART_Transmit_IT>
    return;
 8012b52:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8012b54:	4620      	mov	r0, r4
 8012b56:	f7ff fee8 	bl	801292a <UART_EndTransmit_IT>
    return;
 8012b5a:	e7f6      	b.n	8012b4a <HAL_UART_IRQHandler+0x10a>
 8012b5c:	08012b61 	.word	0x08012b61

08012b60 <UART_DMAAbortOnError>:
{
 8012b60:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012b62:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8012b64:	2300      	movs	r3, #0
 8012b66:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8012b68:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8012b6a:	f7ff ff3b 	bl	80129e4 <HAL_UART_ErrorCallback>
 8012b6e:	bd08      	pop	{r3, pc}

08012b70 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8012b70:	2884      	cmp	r0, #132	; 0x84
 8012b72:	d001      	beq.n	8012b78 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8012b74:	3003      	adds	r0, #3
 8012b76:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012b78:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8012b7a:	4770      	bx	lr

08012b7c <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b7c:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8012b80:	3000      	adds	r0, #0
 8012b82:	bf18      	it	ne
 8012b84:	2001      	movne	r0, #1
 8012b86:	4770      	bx	lr

08012b88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012b88:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8012b8a:	f001 fa6b 	bl	8014064 <vTaskStartScheduler>
  
  return osOK;
}
 8012b8e:	2000      	movs	r0, #0
 8012b90:	bd08      	pop	{r3, pc}

08012b92 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012b92:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8012b94:	f7ff fff2 	bl	8012b7c <inHandlerMode>
 8012b98:	b910      	cbnz	r0, 8012ba0 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8012b9a:	f001 faa9 	bl	80140f0 <xTaskGetTickCount>
  }
}
 8012b9e:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 8012ba0:	f001 faac 	bl	80140fc <xTaskGetTickCountFromISR>
 8012ba4:	bd08      	pop	{r3, pc}

08012ba6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ba8:	b085      	sub	sp, #20
 8012baa:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bac:	6844      	ldr	r4, [r0, #4]
 8012bae:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012bb0:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bb2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8012bb6:	f7ff ffdb 	bl	8012b70 <makeFreeRtosPriority>
 8012bba:	ab03      	add	r3, sp, #12
 8012bbc:	9301      	str	r3, [sp, #4]
 8012bbe:	9000      	str	r0, [sp, #0]
 8012bc0:	463b      	mov	r3, r7
 8012bc2:	b2b2      	uxth	r2, r6
 8012bc4:	4629      	mov	r1, r5
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	f001 fa1a 	bl	8014000 <xTaskCreate>
 8012bcc:	2801      	cmp	r0, #1
 8012bce:	d102      	bne.n	8012bd6 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012bd0:	9803      	ldr	r0, [sp, #12]
}
 8012bd2:	b005      	add	sp, #20
 8012bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	e7fb      	b.n	8012bd2 <osThreadCreate+0x2c>

08012bda <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012bda:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012bdc:	4603      	mov	r3, r0
 8012bde:	b900      	cbnz	r0, 8012be2 <osDelay+0x8>
 8012be0:	2301      	movs	r3, #1
 8012be2:	4618      	mov	r0, r3
 8012be4:	f001 fba0 	bl	8014328 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012be8:	2000      	movs	r0, #0
 8012bea:	bd08      	pop	{r3, pc}

08012bec <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012bec:	b508      	push	{r3, lr}
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8012bee:	2001      	movs	r0, #1
 8012bf0:	f000 fe7c 	bl	80138ec <xQueueCreateMutex>
#endif
#else
  return NULL;
#endif
}
 8012bf4:	bd08      	pop	{r3, pc}
	...

08012bf8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8012bf8:	b530      	push	{r4, r5, lr}
 8012bfa:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8012c00:	b360      	cbz	r0, 8012c5c <osMutexWait+0x64>
 8012c02:	460c      	mov	r4, r1
 8012c04:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012c06:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012c0a:	d00d      	beq.n	8012c28 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012c0c:	b901      	cbnz	r1, 8012c10 <osMutexWait+0x18>
  ticks = 0;
 8012c0e:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012c10:	f7ff ffb4 	bl	8012b7c <inHandlerMode>
 8012c14:	b1b8      	cbz	r0, 8012c46 <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012c16:	aa01      	add	r2, sp, #4
 8012c18:	2100      	movs	r1, #0
 8012c1a:	4628      	mov	r0, r5
 8012c1c:	f001 f816 	bl	8013c4c <xQueueReceiveFromISR>
 8012c20:	2801      	cmp	r0, #1
 8012c22:	d004      	beq.n	8012c2e <osMutexWait+0x36>
      return osErrorOS;
 8012c24:	20ff      	movs	r0, #255	; 0xff
 8012c26:	e017      	b.n	8012c58 <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 8012c28:	f04f 34ff 	mov.w	r4, #4294967295
 8012c2c:	e7f0      	b.n	8012c10 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012c2e:	9b01      	ldr	r3, [sp, #4]
 8012c30:	b1b3      	cbz	r3, 8012c60 <osMutexWait+0x68>
 8012c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c36:	4b0c      	ldr	r3, [pc, #48]	; (8012c68 <osMutexWait+0x70>)
 8012c38:	601a      	str	r2, [r3, #0]
 8012c3a:	f3bf 8f4f 	dsb	sy
 8012c3e:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8012c42:	2000      	movs	r0, #0
 8012c44:	e008      	b.n	8012c58 <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8012c46:	2300      	movs	r3, #0
 8012c48:	4622      	mov	r2, r4
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	f000 ff25 	bl	8013a9c <xQueueGenericReceive>
 8012c52:	2801      	cmp	r0, #1
 8012c54:	d006      	beq.n	8012c64 <osMutexWait+0x6c>
    return osErrorOS;
 8012c56:	20ff      	movs	r0, #255	; 0xff
}
 8012c58:	b003      	add	sp, #12
 8012c5a:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8012c5c:	2080      	movs	r0, #128	; 0x80
 8012c5e:	e7fb      	b.n	8012c58 <osMutexWait+0x60>
  return osOK;
 8012c60:	2000      	movs	r0, #0
 8012c62:	e7f9      	b.n	8012c58 <osMutexWait+0x60>
 8012c64:	2000      	movs	r0, #0
 8012c66:	e7f7      	b.n	8012c58 <osMutexWait+0x60>
 8012c68:	e000ed04 	.word	0xe000ed04

08012c6c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8012c6c:	b510      	push	{r4, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8012c72:	2300      	movs	r3, #0
 8012c74:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8012c76:	f7ff ff81 	bl	8012b7c <inHandlerMode>
 8012c7a:	b1a0      	cbz	r0, 8012ca6 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012c7c:	a901      	add	r1, sp, #4
 8012c7e:	4620      	mov	r0, r4
 8012c80:	f000 feae 	bl	80139e0 <xQueueGiveFromISR>
 8012c84:	2801      	cmp	r0, #1
 8012c86:	d002      	beq.n	8012c8e <osMutexRelease+0x22>
      return osErrorOS;
 8012c88:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8012c8a:	b002      	add	sp, #8
 8012c8c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012c8e:	9b01      	ldr	r3, [sp, #4]
 8012c90:	b1ab      	cbz	r3, 8012cbe <osMutexRelease+0x52>
 8012c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c96:	4b0b      	ldr	r3, [pc, #44]	; (8012cc4 <osMutexRelease+0x58>)
 8012c98:	601a      	str	r2, [r3, #0]
 8012c9a:	f3bf 8f4f 	dsb	sy
 8012c9e:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	e7f1      	b.n	8012c8a <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	461a      	mov	r2, r3
 8012caa:	4619      	mov	r1, r3
 8012cac:	4620      	mov	r0, r4
 8012cae:	f000 fd4d 	bl	801374c <xQueueGenericSend>
 8012cb2:	2801      	cmp	r0, #1
 8012cb4:	d001      	beq.n	8012cba <osMutexRelease+0x4e>
    result = osErrorOS;
 8012cb6:	20ff      	movs	r0, #255	; 0xff
 8012cb8:	e7e7      	b.n	8012c8a <osMutexRelease+0x1e>
  osStatus result = osOK;
 8012cba:	2000      	movs	r0, #0
 8012cbc:	e7e5      	b.n	8012c8a <osMutexRelease+0x1e>
 8012cbe:	2000      	movs	r0, #0
 8012cc0:	e7e3      	b.n	8012c8a <osMutexRelease+0x1e>
 8012cc2:	bf00      	nop
 8012cc4:	e000ed04 	.word	0xe000ed04

08012cc8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012cc8:	b510      	push	{r4, lr}
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8012cca:	2901      	cmp	r1, #1
 8012ccc:	d10d      	bne.n	8012cea <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8012cce:	2203      	movs	r2, #3
 8012cd0:	2100      	movs	r1, #0
 8012cd2:	2001      	movs	r0, #1
 8012cd4:	f000 fd16 	bl	8013704 <xQueueGenericCreate>
 8012cd8:	4604      	mov	r4, r0
 8012cda:	b120      	cbz	r0, 8012ce6 <osSemaphoreCreate+0x1e>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	461a      	mov	r2, r3
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	f000 fd33 	bl	801374c <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	bd10      	pop	{r4, pc}
    return NULL;
 8012cea:	2400      	movs	r4, #0
 8012cec:	e7fb      	b.n	8012ce6 <osSemaphoreCreate+0x1e>
	...

08012cf0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012cf0:	b530      	push	{r4, r5, lr}
 8012cf2:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8012cf8:	b360      	cbz	r0, 8012d54 <osSemaphoreWait+0x64>
 8012cfa:	460c      	mov	r4, r1
 8012cfc:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012cfe:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012d02:	d00d      	beq.n	8012d20 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012d04:	b901      	cbnz	r1, 8012d08 <osSemaphoreWait+0x18>
  ticks = 0;
 8012d06:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012d08:	f7ff ff38 	bl	8012b7c <inHandlerMode>
 8012d0c:	b1b8      	cbz	r0, 8012d3e <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012d0e:	aa01      	add	r2, sp, #4
 8012d10:	2100      	movs	r1, #0
 8012d12:	4628      	mov	r0, r5
 8012d14:	f000 ff9a 	bl	8013c4c <xQueueReceiveFromISR>
 8012d18:	2801      	cmp	r0, #1
 8012d1a:	d004      	beq.n	8012d26 <osSemaphoreWait+0x36>
      return osErrorOS;
 8012d1c:	20ff      	movs	r0, #255	; 0xff
 8012d1e:	e017      	b.n	8012d50 <osSemaphoreWait+0x60>
    ticks = portMAX_DELAY;
 8012d20:	f04f 34ff 	mov.w	r4, #4294967295
 8012d24:	e7f0      	b.n	8012d08 <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012d26:	9b01      	ldr	r3, [sp, #4]
 8012d28:	b1b3      	cbz	r3, 8012d58 <osSemaphoreWait+0x68>
 8012d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d2e:	4b0c      	ldr	r3, [pc, #48]	; (8012d60 <osSemaphoreWait+0x70>)
 8012d30:	601a      	str	r2, [r3, #0]
 8012d32:	f3bf 8f4f 	dsb	sy
 8012d36:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8012d3a:	2000      	movs	r0, #0
 8012d3c:	e008      	b.n	8012d50 <osSemaphoreWait+0x60>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012d3e:	2300      	movs	r3, #0
 8012d40:	4622      	mov	r2, r4
 8012d42:	4619      	mov	r1, r3
 8012d44:	4628      	mov	r0, r5
 8012d46:	f000 fea9 	bl	8013a9c <xQueueGenericReceive>
 8012d4a:	2801      	cmp	r0, #1
 8012d4c:	d006      	beq.n	8012d5c <osSemaphoreWait+0x6c>
    return osErrorOS;
 8012d4e:	20ff      	movs	r0, #255	; 0xff
}
 8012d50:	b003      	add	sp, #12
 8012d52:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8012d54:	2080      	movs	r0, #128	; 0x80
 8012d56:	e7fb      	b.n	8012d50 <osSemaphoreWait+0x60>
  return osOK;
 8012d58:	2000      	movs	r0, #0
 8012d5a:	e7f9      	b.n	8012d50 <osSemaphoreWait+0x60>
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	e7f7      	b.n	8012d50 <osSemaphoreWait+0x60>
 8012d60:	e000ed04 	.word	0xe000ed04

08012d64 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012d64:	b510      	push	{r4, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8012d6e:	f7ff ff05 	bl	8012b7c <inHandlerMode>
 8012d72:	b1a0      	cbz	r0, 8012d9e <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012d74:	a901      	add	r1, sp, #4
 8012d76:	4620      	mov	r0, r4
 8012d78:	f000 fe32 	bl	80139e0 <xQueueGiveFromISR>
 8012d7c:	2801      	cmp	r0, #1
 8012d7e:	d002      	beq.n	8012d86 <osSemaphoreRelease+0x22>
      return osErrorOS;
 8012d80:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8012d82:	b002      	add	sp, #8
 8012d84:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012d86:	9b01      	ldr	r3, [sp, #4]
 8012d88:	b1ab      	cbz	r3, 8012db6 <osSemaphoreRelease+0x52>
 8012d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d8e:	4b0b      	ldr	r3, [pc, #44]	; (8012dbc <osSemaphoreRelease+0x58>)
 8012d90:	601a      	str	r2, [r3, #0]
 8012d92:	f3bf 8f4f 	dsb	sy
 8012d96:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8012d9a:	2000      	movs	r0, #0
 8012d9c:	e7f1      	b.n	8012d82 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012d9e:	2300      	movs	r3, #0
 8012da0:	461a      	mov	r2, r3
 8012da2:	4619      	mov	r1, r3
 8012da4:	4620      	mov	r0, r4
 8012da6:	f000 fcd1 	bl	801374c <xQueueGenericSend>
 8012daa:	2801      	cmp	r0, #1
 8012dac:	d001      	beq.n	8012db2 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8012dae:	20ff      	movs	r0, #255	; 0xff
 8012db0:	e7e7      	b.n	8012d82 <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8012db2:	2000      	movs	r0, #0
 8012db4:	e7e5      	b.n	8012d82 <osSemaphoreRelease+0x1e>
 8012db6:	2000      	movs	r0, #0
 8012db8:	e7e3      	b.n	8012d82 <osSemaphoreRelease+0x1e>
 8012dba:	bf00      	nop
 8012dbc:	e000ed04 	.word	0xe000ed04

08012dc0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012dc0:	b510      	push	{r4, lr}
 8012dc2:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012dc4:	f7ff feda 	bl	8012b7c <inHandlerMode>
 8012dc8:	b108      	cbz	r0, 8012dce <osSemaphoreDelete+0xe>
    return osErrorISR;
 8012dca:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 8012dcc:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f000 ffcc 	bl	8013d6c <vQueueDelete>
  return osOK; 
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	bd10      	pop	{r4, pc}

08012dd8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012dd8:	b508      	push	{r3, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012dda:	2200      	movs	r2, #0
 8012ddc:	6841      	ldr	r1, [r0, #4]
 8012dde:	6800      	ldr	r0, [r0, #0]
 8012de0:	f000 fc90 	bl	8013704 <xQueueGenericCreate>
#endif
}
 8012de4:	bd08      	pop	{r3, pc}
	...

08012de8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012de8:	b530      	push	{r4, r5, lr}
 8012dea:	b085      	sub	sp, #20
 8012dec:	4604      	mov	r4, r0
 8012dee:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012df0:	2300      	movs	r3, #0
 8012df2:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8012df4:	4615      	mov	r5, r2
 8012df6:	b902      	cbnz	r2, 8012dfa <osMessagePut+0x12>
    ticks = 1;
 8012df8:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8012dfa:	f7ff febf 	bl	8012b7c <inHandlerMode>
 8012dfe:	b1a8      	cbz	r0, 8012e2c <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012e00:	2300      	movs	r3, #0
 8012e02:	aa03      	add	r2, sp, #12
 8012e04:	a901      	add	r1, sp, #4
 8012e06:	4620      	mov	r0, r4
 8012e08:	f000 fd7b 	bl	8013902 <xQueueGenericSendFromISR>
 8012e0c:	2801      	cmp	r0, #1
 8012e0e:	d001      	beq.n	8012e14 <osMessagePut+0x2c>
      return osErrorOS;
 8012e10:	20ff      	movs	r0, #255	; 0xff
 8012e12:	e014      	b.n	8012e3e <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012e14:	9b03      	ldr	r3, [sp, #12]
 8012e16:	b1a3      	cbz	r3, 8012e42 <osMessagePut+0x5a>
 8012e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e1c:	4b0b      	ldr	r3, [pc, #44]	; (8012e4c <osMessagePut+0x64>)
 8012e1e:	601a      	str	r2, [r3, #0]
 8012e20:	f3bf 8f4f 	dsb	sy
 8012e24:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8012e28:	2000      	movs	r0, #0
 8012e2a:	e008      	b.n	8012e3e <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	462a      	mov	r2, r5
 8012e30:	a901      	add	r1, sp, #4
 8012e32:	4620      	mov	r0, r4
 8012e34:	f000 fc8a 	bl	801374c <xQueueGenericSend>
 8012e38:	2801      	cmp	r0, #1
 8012e3a:	d004      	beq.n	8012e46 <osMessagePut+0x5e>
      return osErrorOS;
 8012e3c:	20ff      	movs	r0, #255	; 0xff
}
 8012e3e:	b005      	add	sp, #20
 8012e40:	bd30      	pop	{r4, r5, pc}
  return osOK;
 8012e42:	2000      	movs	r0, #0
 8012e44:	e7fb      	b.n	8012e3e <osMessagePut+0x56>
 8012e46:	2000      	movs	r0, #0
 8012e48:	e7f9      	b.n	8012e3e <osMessagePut+0x56>
 8012e4a:	bf00      	nop
 8012e4c:	e000ed04 	.word	0xe000ed04

08012e50 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012e50:	b570      	push	{r4, r5, r6, lr}
 8012e52:	b084      	sub	sp, #16
 8012e54:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012e56:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8012e5c:	b1f9      	cbz	r1, 8012e9e <osMessageGet+0x4e>
 8012e5e:	460d      	mov	r5, r1
 8012e60:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8012e62:	2300      	movs	r3, #0
 8012e64:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012e66:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012e6a:	d021      	beq.n	8012eb0 <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012e6c:	b902      	cbnz	r2, 8012e70 <osMessageGet+0x20>
  ticks = 0;
 8012e6e:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012e70:	f7ff fe84 	bl	8012b7c <inHandlerMode>
 8012e74:	b310      	cbz	r0, 8012ebc <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012e76:	aa03      	add	r2, sp, #12
 8012e78:	a901      	add	r1, sp, #4
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	f000 fee6 	bl	8013c4c <xQueueReceiveFromISR>
 8012e80:	2801      	cmp	r0, #1
 8012e82:	d018      	beq.n	8012eb6 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8012e84:	2300      	movs	r3, #0
 8012e86:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012e88:	9b03      	ldr	r3, [sp, #12]
 8012e8a:	b313      	cbz	r3, 8012ed2 <osMessageGet+0x82>
 8012e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e90:	4b16      	ldr	r3, [pc, #88]	; (8012eec <osMessageGet+0x9c>)
 8012e92:	601a      	str	r2, [r3, #0]
 8012e94:	f3bf 8f4f 	dsb	sy
 8012e98:	f3bf 8f6f 	isb	sy
 8012e9c:	e019      	b.n	8012ed2 <osMessageGet+0x82>
    event.status = osErrorParameter;
 8012e9e:	ab04      	add	r3, sp, #16
 8012ea0:	2280      	movs	r2, #128	; 0x80
 8012ea2:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8012ea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012eae:	e014      	b.n	8012eda <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 8012eb0:	f04f 36ff 	mov.w	r6, #4294967295
 8012eb4:	e7dc      	b.n	8012e70 <osMessageGet+0x20>
      event.status = osEventMessage;
 8012eb6:	2310      	movs	r3, #16
 8012eb8:	9300      	str	r3, [sp, #0]
 8012eba:	e7e5      	b.n	8012e88 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	4632      	mov	r2, r6
 8012ec0:	a901      	add	r1, sp, #4
 8012ec2:	4628      	mov	r0, r5
 8012ec4:	f000 fdea 	bl	8013a9c <xQueueGenericReceive>
 8012ec8:	2801      	cmp	r0, #1
 8012eca:	d009      	beq.n	8012ee0 <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012ecc:	b95e      	cbnz	r6, 8012ee6 <osMessageGet+0x96>
 8012ece:	2300      	movs	r3, #0
 8012ed0:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8012ed2:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 8012ed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012eda:	4620      	mov	r0, r4
 8012edc:	b004      	add	sp, #16
 8012ede:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8012ee0:	2310      	movs	r3, #16
 8012ee2:	9300      	str	r3, [sp, #0]
 8012ee4:	e7f5      	b.n	8012ed2 <osMessageGet+0x82>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012ee6:	2340      	movs	r3, #64	; 0x40
 8012ee8:	e7f2      	b.n	8012ed0 <osMessageGet+0x80>
 8012eea:	bf00      	nop
 8012eec:	e000ed04 	.word	0xe000ed04

08012ef0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8012ef0:	b510      	push	{r4, lr}
 8012ef2:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012ef4:	f7ff fe42 	bl	8012b7c <inHandlerMode>
 8012ef8:	b918      	cbnz	r0, 8012f02 <osMessageWaiting+0x12>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8012efa:	4620      	mov	r0, r4
 8012efc:	f000 ff01 	bl	8013d02 <uxQueueMessagesWaiting>
  }
}
 8012f00:	bd10      	pop	{r4, pc}
    return uxQueueMessagesWaitingFromISR(queue_id);
 8012f02:	4620      	mov	r0, r4
 8012f04:	f000 ff10 	bl	8013d28 <uxQueueMessagesWaitingFromISR>
 8012f08:	bd10      	pop	{r4, pc}

08012f0a <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8012f0a:	b510      	push	{r4, lr}
 8012f0c:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012f0e:	f7ff fe35 	bl	8012b7c <inHandlerMode>
 8012f12:	b108      	cbz	r0, 8012f18 <osMessageDelete+0xe>
    return osErrorISR;
 8012f14:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 8012f16:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f000 ff27 	bl	8013d6c <vQueueDelete>
  return osOK; 
 8012f1e:	2000      	movs	r0, #0
 8012f20:	bd10      	pop	{r4, pc}

08012f22 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f22:	f100 0308 	add.w	r3, r0, #8
 8012f26:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012f28:	f04f 32ff 	mov.w	r2, #4294967295
 8012f2c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f2e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f30:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012f32:	2300      	movs	r3, #0
 8012f34:	6003      	str	r3, [r0, #0]
 8012f36:	4770      	bx	lr

08012f38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	6103      	str	r3, [r0, #16]
 8012f3c:	4770      	bx	lr

08012f3e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8012f3e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012f40:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f42:	689a      	ldr	r2, [r3, #8]
 8012f44:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f46:	689a      	ldr	r2, [r3, #8]
 8012f48:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f4a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012f4c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8012f4e:	6803      	ldr	r3, [r0, #0]
 8012f50:	3301      	adds	r3, #1
 8012f52:	6003      	str	r3, [r0, #0]
 8012f54:	4770      	bx	lr

08012f56 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f56:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012f58:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012f5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012f5e:	d002      	beq.n	8012f66 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f60:	f100 0208 	add.w	r2, r0, #8
 8012f64:	e002      	b.n	8012f6c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8012f66:	6902      	ldr	r2, [r0, #16]
 8012f68:	e004      	b.n	8012f74 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	6853      	ldr	r3, [r2, #4]
 8012f6e:	681c      	ldr	r4, [r3, #0]
 8012f70:	42a5      	cmp	r5, r4
 8012f72:	d2fa      	bcs.n	8012f6a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012f74:	6853      	ldr	r3, [r2, #4]
 8012f76:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012f78:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012f7a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8012f7c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012f7e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8012f80:	6803      	ldr	r3, [r0, #0]
 8012f82:	3301      	adds	r3, #1
 8012f84:	6003      	str	r3, [r0, #0]
}
 8012f86:	bc30      	pop	{r4, r5}
 8012f88:	4770      	bx	lr

08012f8a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8012f8a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012f8c:	6842      	ldr	r2, [r0, #4]
 8012f8e:	6881      	ldr	r1, [r0, #8]
 8012f90:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012f92:	6882      	ldr	r2, [r0, #8]
 8012f94:	6841      	ldr	r1, [r0, #4]
 8012f96:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012f98:	685a      	ldr	r2, [r3, #4]
 8012f9a:	4290      	cmp	r0, r2
 8012f9c:	d005      	beq.n	8012faa <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8012fa2:	6818      	ldr	r0, [r3, #0]
 8012fa4:	3801      	subs	r0, #1
 8012fa6:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8012fa8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012faa:	6882      	ldr	r2, [r0, #8]
 8012fac:	605a      	str	r2, [r3, #4]
 8012fae:	e7f6      	b.n	8012f9e <uxListRemove+0x14>

08012fb0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012fb0:	4b0b      	ldr	r3, [pc, #44]	; (8012fe0 <prvTaskExitError+0x30>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb8:	d008      	beq.n	8012fcc <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fbe:	f383 8811 	msr	BASEPRI, r3
 8012fc2:	f3bf 8f6f 	isb	sy
 8012fc6:	f3bf 8f4f 	dsb	sy
 8012fca:	e7fe      	b.n	8012fca <prvTaskExitError+0x1a>
 8012fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fd0:	f383 8811 	msr	BASEPRI, r3
 8012fd4:	f3bf 8f6f 	isb	sy
 8012fd8:	f3bf 8f4f 	dsb	sy
 8012fdc:	e7fe      	b.n	8012fdc <prvTaskExitError+0x2c>
 8012fde:	bf00      	nop
 8012fe0:	20000004 	.word	0x20000004

08012fe4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8012fe4:	4806      	ldr	r0, [pc, #24]	; (8013000 <prvPortStartFirstTask+0x1c>)
 8012fe6:	6800      	ldr	r0, [r0, #0]
 8012fe8:	6800      	ldr	r0, [r0, #0]
 8012fea:	f380 8808 	msr	MSP, r0
 8012fee:	b662      	cpsie	i
 8012ff0:	b661      	cpsie	f
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	f3bf 8f6f 	isb	sy
 8012ffa:	df00      	svc	0
 8012ffc:	bf00      	nop
 8012ffe:	0000      	.short	0x0000
 8013000:	e000ed08 	.word	0xe000ed08

08013004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013014 <vPortEnableVFP+0x10>
 8013008:	6801      	ldr	r1, [r0, #0]
 801300a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801300e:	6001      	str	r1, [r0, #0]
 8013010:	4770      	bx	lr
 8013012:	0000      	.short	0x0000
 8013014:	e000ed88 	.word	0xe000ed88

08013018 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801301c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013020:	f021 0101 	bic.w	r1, r1, #1
 8013024:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013028:	4b05      	ldr	r3, [pc, #20]	; (8013040 <pxPortInitialiseStack+0x28>)
 801302a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801302e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8013032:	f06f 0302 	mvn.w	r3, #2
 8013036:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801303a:	3844      	subs	r0, #68	; 0x44
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop
 8013040:	08012fb1 	.word	0x08012fb1
	...

08013050 <SVC_Handler>:
	__asm volatile (
 8013050:	4b07      	ldr	r3, [pc, #28]	; (8013070 <pxCurrentTCBConst2>)
 8013052:	6819      	ldr	r1, [r3, #0]
 8013054:	6808      	ldr	r0, [r1, #0]
 8013056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801305a:	f380 8809 	msr	PSP, r0
 801305e:	f3bf 8f6f 	isb	sy
 8013062:	f04f 0000 	mov.w	r0, #0
 8013066:	f380 8811 	msr	BASEPRI, r0
 801306a:	4770      	bx	lr
 801306c:	f3af 8000 	nop.w

08013070 <pxCurrentTCBConst2>:
 8013070:	20003e34 	.word	0x20003e34

08013074 <vPortEnterCritical>:
 8013074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013078:	f383 8811 	msr	BASEPRI, r3
 801307c:	f3bf 8f6f 	isb	sy
 8013080:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8013084:	4a0a      	ldr	r2, [pc, #40]	; (80130b0 <vPortEnterCritical+0x3c>)
 8013086:	6813      	ldr	r3, [r2, #0]
 8013088:	3301      	adds	r3, #1
 801308a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 801308c:	2b01      	cmp	r3, #1
 801308e:	d10d      	bne.n	80130ac <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013090:	4b08      	ldr	r3, [pc, #32]	; (80130b4 <vPortEnterCritical+0x40>)
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013098:	d008      	beq.n	80130ac <vPortEnterCritical+0x38>
 801309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801309e:	f383 8811 	msr	BASEPRI, r3
 80130a2:	f3bf 8f6f 	isb	sy
 80130a6:	f3bf 8f4f 	dsb	sy
 80130aa:	e7fe      	b.n	80130aa <vPortEnterCritical+0x36>
 80130ac:	4770      	bx	lr
 80130ae:	bf00      	nop
 80130b0:	20000004 	.word	0x20000004
 80130b4:	e000ed04 	.word	0xe000ed04

080130b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80130b8:	4b09      	ldr	r3, [pc, #36]	; (80130e0 <vPortExitCritical+0x28>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	b943      	cbnz	r3, 80130d0 <vPortExitCritical+0x18>
 80130be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c2:	f383 8811 	msr	BASEPRI, r3
 80130c6:	f3bf 8f6f 	isb	sy
 80130ca:	f3bf 8f4f 	dsb	sy
 80130ce:	e7fe      	b.n	80130ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80130d0:	3b01      	subs	r3, #1
 80130d2:	4a03      	ldr	r2, [pc, #12]	; (80130e0 <vPortExitCritical+0x28>)
 80130d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80130d6:	b90b      	cbnz	r3, 80130dc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80130d8:	f383 8811 	msr	BASEPRI, r3
 80130dc:	4770      	bx	lr
 80130de:	bf00      	nop
 80130e0:	20000004 	.word	0x20000004
	...

080130f0 <PendSV_Handler>:
	__asm volatile
 80130f0:	f3ef 8009 	mrs	r0, PSP
 80130f4:	f3bf 8f6f 	isb	sy
 80130f8:	4b15      	ldr	r3, [pc, #84]	; (8013150 <pxCurrentTCBConst>)
 80130fa:	681a      	ldr	r2, [r3, #0]
 80130fc:	f01e 0f10 	tst.w	lr, #16
 8013100:	bf08      	it	eq
 8013102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801310a:	6010      	str	r0, [r2, #0]
 801310c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8013110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013114:	f380 8811 	msr	BASEPRI, r0
 8013118:	f3bf 8f4f 	dsb	sy
 801311c:	f3bf 8f6f 	isb	sy
 8013120:	f001 f96c 	bl	80143fc <vTaskSwitchContext>
 8013124:	f04f 0000 	mov.w	r0, #0
 8013128:	f380 8811 	msr	BASEPRI, r0
 801312c:	bc08      	pop	{r3}
 801312e:	6819      	ldr	r1, [r3, #0]
 8013130:	6808      	ldr	r0, [r1, #0]
 8013132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013136:	f01e 0f10 	tst.w	lr, #16
 801313a:	bf08      	it	eq
 801313c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013140:	f380 8809 	msr	PSP, r0
 8013144:	f3bf 8f6f 	isb	sy
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	f3af 8000 	nop.w

08013150 <pxCurrentTCBConst>:
 8013150:	20003e34 	.word	0x20003e34

08013154 <SysTick_Handler>:
{
 8013154:	b508      	push	{r3, lr}
	__asm volatile
 8013156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801315a:	f383 8811 	msr	BASEPRI, r3
 801315e:	f3bf 8f6f 	isb	sy
 8013162:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8013166:	f000 ffd1 	bl	801410c <xTaskIncrementTick>
 801316a:	b118      	cbz	r0, 8013174 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801316c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013170:	4b02      	ldr	r3, [pc, #8]	; (801317c <SysTick_Handler+0x28>)
 8013172:	601a      	str	r2, [r3, #0]
	__asm volatile
 8013174:	2300      	movs	r3, #0
 8013176:	f383 8811 	msr	BASEPRI, r3
 801317a:	bd08      	pop	{r3, pc}
 801317c:	e000ed04 	.word	0xe000ed04

08013180 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013180:	4b06      	ldr	r3, [pc, #24]	; (801319c <vPortSetupTimerInterrupt+0x1c>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4a06      	ldr	r2, [pc, #24]	; (80131a0 <vPortSetupTimerInterrupt+0x20>)
 8013186:	fba2 2303 	umull	r2, r3, r2, r3
 801318a:	099b      	lsrs	r3, r3, #6
 801318c:	3b01      	subs	r3, #1
 801318e:	4a05      	ldr	r2, [pc, #20]	; (80131a4 <vPortSetupTimerInterrupt+0x24>)
 8013190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013192:	2207      	movs	r2, #7
 8013194:	4b04      	ldr	r3, [pc, #16]	; (80131a8 <vPortSetupTimerInterrupt+0x28>)
 8013196:	601a      	str	r2, [r3, #0]
 8013198:	4770      	bx	lr
 801319a:	bf00      	nop
 801319c:	20000024 	.word	0x20000024
 80131a0:	10624dd3 	.word	0x10624dd3
 80131a4:	e000e014 	.word	0xe000e014
 80131a8:	e000e010 	.word	0xe000e010

080131ac <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80131ac:	4b31      	ldr	r3, [pc, #196]	; (8013274 <xPortStartScheduler+0xc8>)
 80131ae:	681a      	ldr	r2, [r3, #0]
 80131b0:	4b31      	ldr	r3, [pc, #196]	; (8013278 <xPortStartScheduler+0xcc>)
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d01a      	beq.n	80131ec <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80131b6:	4b2f      	ldr	r3, [pc, #188]	; (8013274 <xPortStartScheduler+0xc8>)
 80131b8:	681a      	ldr	r2, [r3, #0]
 80131ba:	4b30      	ldr	r3, [pc, #192]	; (801327c <xPortStartScheduler+0xd0>)
 80131bc:	429a      	cmp	r2, r3
 80131be:	d01e      	beq.n	80131fe <xPortStartScheduler+0x52>
{
 80131c0:	b500      	push	{lr}
 80131c2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80131c4:	4b2e      	ldr	r3, [pc, #184]	; (8013280 <xPortStartScheduler+0xd4>)
 80131c6:	781a      	ldrb	r2, [r3, #0]
 80131c8:	b2d2      	uxtb	r2, r2
 80131ca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80131cc:	22ff      	movs	r2, #255	; 0xff
 80131ce:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80131d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80131dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80131e0:	4a28      	ldr	r2, [pc, #160]	; (8013284 <xPortStartScheduler+0xd8>)
 80131e2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80131e4:	2207      	movs	r2, #7
 80131e6:	4b28      	ldr	r3, [pc, #160]	; (8013288 <xPortStartScheduler+0xdc>)
 80131e8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80131ea:	e01b      	b.n	8013224 <xPortStartScheduler+0x78>
	__asm volatile
 80131ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f0:	f383 8811 	msr	BASEPRI, r3
 80131f4:	f3bf 8f6f 	isb	sy
 80131f8:	f3bf 8f4f 	dsb	sy
 80131fc:	e7fe      	b.n	80131fc <xPortStartScheduler+0x50>
 80131fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013202:	f383 8811 	msr	BASEPRI, r3
 8013206:	f3bf 8f6f 	isb	sy
 801320a:	f3bf 8f4f 	dsb	sy
 801320e:	e7fe      	b.n	801320e <xPortStartScheduler+0x62>
			ulMaxPRIGROUPValue--;
 8013210:	4a1d      	ldr	r2, [pc, #116]	; (8013288 <xPortStartScheduler+0xdc>)
 8013212:	6813      	ldr	r3, [r2, #0]
 8013214:	3b01      	subs	r3, #1
 8013216:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013218:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801321c:	005b      	lsls	r3, r3, #1
 801321e:	b2db      	uxtb	r3, r3
 8013220:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013224:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013228:	f013 0f80 	tst.w	r3, #128	; 0x80
 801322c:	d1f0      	bne.n	8013210 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801322e:	4a16      	ldr	r2, [pc, #88]	; (8013288 <xPortStartScheduler+0xdc>)
 8013230:	6813      	ldr	r3, [r2, #0]
 8013232:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013234:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013238:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801323a:	9b01      	ldr	r3, [sp, #4]
 801323c:	b2db      	uxtb	r3, r3
 801323e:	4a10      	ldr	r2, [pc, #64]	; (8013280 <xPortStartScheduler+0xd4>)
 8013240:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013242:	4b12      	ldr	r3, [pc, #72]	; (801328c <xPortStartScheduler+0xe0>)
 8013244:	681a      	ldr	r2, [r3, #0]
 8013246:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 801324a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801324c:	681a      	ldr	r2, [r3, #0]
 801324e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8013252:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8013254:	f7ff ff94 	bl	8013180 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8013258:	2200      	movs	r2, #0
 801325a:	4b0d      	ldr	r3, [pc, #52]	; (8013290 <xPortStartScheduler+0xe4>)
 801325c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 801325e:	f7ff fed1 	bl	8013004 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013262:	4a0c      	ldr	r2, [pc, #48]	; (8013294 <xPortStartScheduler+0xe8>)
 8013264:	6813      	ldr	r3, [r2, #0]
 8013266:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801326a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 801326c:	f7ff feba 	bl	8012fe4 <prvPortStartFirstTask>
	prvTaskExitError();
 8013270:	f7ff fe9e 	bl	8012fb0 <prvTaskExitError>
 8013274:	e000ed00 	.word	0xe000ed00
 8013278:	410fc271 	.word	0x410fc271
 801327c:	410fc270 	.word	0x410fc270
 8013280:	e000e400 	.word	0xe000e400
 8013284:	20000214 	.word	0x20000214
 8013288:	20000218 	.word	0x20000218
 801328c:	e000ed20 	.word	0xe000ed20
 8013290:	20000004 	.word	0x20000004
 8013294:	e000ef34 	.word	0xe000ef34

08013298 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8013298:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801329c:	2b0f      	cmp	r3, #15
 801329e:	d90f      	bls.n	80132c0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80132a0:	4a10      	ldr	r2, [pc, #64]	; (80132e4 <vPortValidateInterruptPriority+0x4c>)
 80132a2:	5c9b      	ldrb	r3, [r3, r2]
 80132a4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80132a6:	4a10      	ldr	r2, [pc, #64]	; (80132e8 <vPortValidateInterruptPriority+0x50>)
 80132a8:	7812      	ldrb	r2, [r2, #0]
 80132aa:	4293      	cmp	r3, r2
 80132ac:	d208      	bcs.n	80132c0 <vPortValidateInterruptPriority+0x28>
 80132ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b2:	f383 8811 	msr	BASEPRI, r3
 80132b6:	f3bf 8f6f 	isb	sy
 80132ba:	f3bf 8f4f 	dsb	sy
 80132be:	e7fe      	b.n	80132be <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80132c0:	4b0a      	ldr	r3, [pc, #40]	; (80132ec <vPortValidateInterruptPriority+0x54>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80132c8:	4a09      	ldr	r2, [pc, #36]	; (80132f0 <vPortValidateInterruptPriority+0x58>)
 80132ca:	6812      	ldr	r2, [r2, #0]
 80132cc:	4293      	cmp	r3, r2
 80132ce:	d908      	bls.n	80132e2 <vPortValidateInterruptPriority+0x4a>
 80132d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d4:	f383 8811 	msr	BASEPRI, r3
 80132d8:	f3bf 8f6f 	isb	sy
 80132dc:	f3bf 8f4f 	dsb	sy
 80132e0:	e7fe      	b.n	80132e0 <vPortValidateInterruptPriority+0x48>
 80132e2:	4770      	bx	lr
 80132e4:	e000e3f0 	.word	0xe000e3f0
 80132e8:	20000214 	.word	0x20000214
 80132ec:	e000ed0c 	.word	0xe000ed0c
 80132f0:	20000218 	.word	0x20000218

080132f4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80132f4:	4a12      	ldr	r2, [pc, #72]	; (8013340 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80132f6:	f012 0f07 	tst.w	r2, #7
 80132fa:	d01e      	beq.n	801333a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80132fc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80132fe:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013302:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8013306:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013308:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801330a:	480e      	ldr	r0, [pc, #56]	; (8013344 <prvHeapInit+0x50>)
 801330c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801330e:	2100      	movs	r1, #0
 8013310:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013312:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8013314:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013316:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801331a:	480b      	ldr	r0, [pc, #44]	; (8013348 <prvHeapInit+0x54>)
 801331c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801331e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013320:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013322:	1a99      	subs	r1, r3, r2
 8013324:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013326:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013328:	4b08      	ldr	r3, [pc, #32]	; (801334c <prvHeapInit+0x58>)
 801332a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801332c:	4b08      	ldr	r3, [pc, #32]	; (8013350 <prvHeapInit+0x5c>)
 801332e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013330:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013334:	4b07      	ldr	r3, [pc, #28]	; (8013354 <prvHeapInit+0x60>)
 8013336:	601a      	str	r2, [r3, #0]
 8013338:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801333a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801333e:	e7e4      	b.n	801330a <prvHeapInit+0x16>
 8013340:	20000220 	.word	0x20000220
 8013344:	20003e2c 	.word	0x20003e2c
 8013348:	2000021c 	.word	0x2000021c
 801334c:	20003e28 	.word	0x20003e28
 8013350:	20003e24 	.word	0x20003e24
 8013354:	20003e20 	.word	0x20003e20

08013358 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013358:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801335a:	4b13      	ldr	r3, [pc, #76]	; (80133a8 <prvInsertBlockIntoFreeList+0x50>)
 801335c:	681a      	ldr	r2, [r3, #0]
 801335e:	4282      	cmp	r2, r0
 8013360:	d31b      	bcc.n	801339a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013362:	6859      	ldr	r1, [r3, #4]
 8013364:	185c      	adds	r4, r3, r1
 8013366:	42a0      	cmp	r0, r4
 8013368:	d103      	bne.n	8013372 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801336a:	6840      	ldr	r0, [r0, #4]
 801336c:	4401      	add	r1, r0
 801336e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013370:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013372:	6841      	ldr	r1, [r0, #4]
 8013374:	1844      	adds	r4, r0, r1
 8013376:	42a2      	cmp	r2, r4
 8013378:	d113      	bne.n	80133a2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801337a:	4c0c      	ldr	r4, [pc, #48]	; (80133ac <prvInsertBlockIntoFreeList+0x54>)
 801337c:	6824      	ldr	r4, [r4, #0]
 801337e:	42a2      	cmp	r2, r4
 8013380:	d00d      	beq.n	801339e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013382:	6852      	ldr	r2, [r2, #4]
 8013384:	4411      	add	r1, r2
 8013386:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013388:	681a      	ldr	r2, [r3, #0]
 801338a:	6812      	ldr	r2, [r2, #0]
 801338c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801338e:	4298      	cmp	r0, r3
 8013390:	d000      	beq.n	8013394 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013392:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013398:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801339a:	4613      	mov	r3, r2
 801339c:	e7de      	b.n	801335c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801339e:	6004      	str	r4, [r0, #0]
 80133a0:	e7f5      	b.n	801338e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80133a2:	6002      	str	r2, [r0, #0]
 80133a4:	e7f3      	b.n	801338e <prvInsertBlockIntoFreeList+0x36>
 80133a6:	bf00      	nop
 80133a8:	20003e2c 	.word	0x20003e2c
 80133ac:	2000021c 	.word	0x2000021c

080133b0 <pvPortMalloc>:
{
 80133b0:	b570      	push	{r4, r5, r6, lr}
 80133b2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80133b4:	f000 fe94 	bl	80140e0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80133b8:	4b3a      	ldr	r3, [pc, #232]	; (80134a4 <pvPortMalloc+0xf4>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	b1bb      	cbz	r3, 80133ee <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80133be:	4b3a      	ldr	r3, [pc, #232]	; (80134a8 <pvPortMalloc+0xf8>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	421c      	tst	r4, r3
 80133c4:	d163      	bne.n	801348e <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 80133c6:	b1ac      	cbz	r4, 80133f4 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 80133c8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80133ca:	f014 0f07 	tst.w	r4, #7
 80133ce:	d011      	beq.n	80133f4 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80133d0:	f024 0407 	bic.w	r4, r4, #7
 80133d4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80133d6:	f004 0307 	and.w	r3, r4, #7
 80133da:	b15b      	cbz	r3, 80133f4 <pvPortMalloc+0x44>
 80133dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e0:	f383 8811 	msr	BASEPRI, r3
 80133e4:	f3bf 8f6f 	isb	sy
 80133e8:	f3bf 8f4f 	dsb	sy
 80133ec:	e7fe      	b.n	80133ec <pvPortMalloc+0x3c>
			prvHeapInit();
 80133ee:	f7ff ff81 	bl	80132f4 <prvHeapInit>
 80133f2:	e7e4      	b.n	80133be <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80133f4:	2c00      	cmp	r4, #0
 80133f6:	d04c      	beq.n	8013492 <pvPortMalloc+0xe2>
 80133f8:	4b2c      	ldr	r3, [pc, #176]	; (80134ac <pvPortMalloc+0xfc>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	429c      	cmp	r4, r3
 80133fe:	d84a      	bhi.n	8013496 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8013400:	4b2b      	ldr	r3, [pc, #172]	; (80134b0 <pvPortMalloc+0x100>)
 8013402:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013404:	e001      	b.n	801340a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8013406:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8013408:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801340a:	686a      	ldr	r2, [r5, #4]
 801340c:	4294      	cmp	r4, r2
 801340e:	d902      	bls.n	8013416 <pvPortMalloc+0x66>
 8013410:	682a      	ldr	r2, [r5, #0]
 8013412:	2a00      	cmp	r2, #0
 8013414:	d1f7      	bne.n	8013406 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8013416:	4a23      	ldr	r2, [pc, #140]	; (80134a4 <pvPortMalloc+0xf4>)
 8013418:	6812      	ldr	r2, [r2, #0]
 801341a:	4295      	cmp	r5, r2
 801341c:	d03d      	beq.n	801349a <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801341e:	681e      	ldr	r6, [r3, #0]
 8013420:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013422:	682a      	ldr	r2, [r5, #0]
 8013424:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013426:	686b      	ldr	r3, [r5, #4]
 8013428:	1b1b      	subs	r3, r3, r4
 801342a:	2b10      	cmp	r3, #16
 801342c:	d910      	bls.n	8013450 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801342e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013430:	f010 0f07 	tst.w	r0, #7
 8013434:	d008      	beq.n	8013448 <pvPortMalloc+0x98>
 8013436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801343a:	f383 8811 	msr	BASEPRI, r3
 801343e:	f3bf 8f6f 	isb	sy
 8013442:	f3bf 8f4f 	dsb	sy
 8013446:	e7fe      	b.n	8013446 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013448:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801344a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801344c:	f7ff ff84 	bl	8013358 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013450:	686a      	ldr	r2, [r5, #4]
 8013452:	4916      	ldr	r1, [pc, #88]	; (80134ac <pvPortMalloc+0xfc>)
 8013454:	680b      	ldr	r3, [r1, #0]
 8013456:	1a9b      	subs	r3, r3, r2
 8013458:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801345a:	4916      	ldr	r1, [pc, #88]	; (80134b4 <pvPortMalloc+0x104>)
 801345c:	6809      	ldr	r1, [r1, #0]
 801345e:	428b      	cmp	r3, r1
 8013460:	d201      	bcs.n	8013466 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013462:	4914      	ldr	r1, [pc, #80]	; (80134b4 <pvPortMalloc+0x104>)
 8013464:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013466:	4b10      	ldr	r3, [pc, #64]	; (80134a8 <pvPortMalloc+0xf8>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	4313      	orrs	r3, r2
 801346c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801346e:	2300      	movs	r3, #0
 8013470:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8013472:	f000 fedb 	bl	801422c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013476:	f016 0f07 	tst.w	r6, #7
 801347a:	d010      	beq.n	801349e <pvPortMalloc+0xee>
 801347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013480:	f383 8811 	msr	BASEPRI, r3
 8013484:	f3bf 8f6f 	isb	sy
 8013488:	f3bf 8f4f 	dsb	sy
 801348c:	e7fe      	b.n	801348c <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 801348e:	2600      	movs	r6, #0
 8013490:	e7ef      	b.n	8013472 <pvPortMalloc+0xc2>
 8013492:	2600      	movs	r6, #0
 8013494:	e7ed      	b.n	8013472 <pvPortMalloc+0xc2>
 8013496:	2600      	movs	r6, #0
 8013498:	e7eb      	b.n	8013472 <pvPortMalloc+0xc2>
 801349a:	2600      	movs	r6, #0
 801349c:	e7e9      	b.n	8013472 <pvPortMalloc+0xc2>
}
 801349e:	4630      	mov	r0, r6
 80134a0:	bd70      	pop	{r4, r5, r6, pc}
 80134a2:	bf00      	nop
 80134a4:	2000021c 	.word	0x2000021c
 80134a8:	20003e20 	.word	0x20003e20
 80134ac:	20003e24 	.word	0x20003e24
 80134b0:	20003e2c 	.word	0x20003e2c
 80134b4:	20003e28 	.word	0x20003e28

080134b8 <vPortFree>:
	if( pv != NULL )
 80134b8:	b380      	cbz	r0, 801351c <vPortFree+0x64>
{
 80134ba:	b538      	push	{r3, r4, r5, lr}
 80134bc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80134be:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80134c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80134c6:	4916      	ldr	r1, [pc, #88]	; (8013520 <vPortFree+0x68>)
 80134c8:	6809      	ldr	r1, [r1, #0]
 80134ca:	420a      	tst	r2, r1
 80134cc:	d108      	bne.n	80134e0 <vPortFree+0x28>
 80134ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d2:	f383 8811 	msr	BASEPRI, r3
 80134d6:	f3bf 8f6f 	isb	sy
 80134da:	f3bf 8f4f 	dsb	sy
 80134de:	e7fe      	b.n	80134de <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80134e0:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80134e4:	b140      	cbz	r0, 80134f8 <vPortFree+0x40>
 80134e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ea:	f383 8811 	msr	BASEPRI, r3
 80134ee:	f3bf 8f6f 	isb	sy
 80134f2:	f3bf 8f4f 	dsb	sy
 80134f6:	e7fe      	b.n	80134f6 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80134f8:	ea22 0201 	bic.w	r2, r2, r1
 80134fc:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8013500:	f000 fdee 	bl	80140e0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013504:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8013508:	4a06      	ldr	r2, [pc, #24]	; (8013524 <vPortFree+0x6c>)
 801350a:	6813      	ldr	r3, [r2, #0]
 801350c:	440b      	add	r3, r1
 801350e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013510:	4628      	mov	r0, r5
 8013512:	f7ff ff21 	bl	8013358 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8013516:	f000 fe89 	bl	801422c <xTaskResumeAll>
 801351a:	bd38      	pop	{r3, r4, r5, pc}
 801351c:	4770      	bx	lr
 801351e:	bf00      	nop
 8013520:	20003e20 	.word	0x20003e20
 8013524:	20003e24 	.word	0x20003e24

08013528 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013528:	b510      	push	{r4, lr}
 801352a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801352c:	f7ff fda2 	bl	8013074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013530:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013532:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013534:	429a      	cmp	r2, r3
 8013536:	d004      	beq.n	8013542 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8013538:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 801353a:	f7ff fdbd 	bl	80130b8 <vPortExitCritical>

	return xReturn;
}
 801353e:	4620      	mov	r0, r4
 8013540:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8013542:	2401      	movs	r4, #1
 8013544:	e7f9      	b.n	801353a <prvIsQueueFull+0x12>

08013546 <prvIsQueueEmpty>:
{
 8013546:	b510      	push	{r4, lr}
 8013548:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801354a:	f7ff fd93 	bl	8013074 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801354e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013550:	b123      	cbz	r3, 801355c <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8013552:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8013554:	f7ff fdb0 	bl	80130b8 <vPortExitCritical>
}
 8013558:	4620      	mov	r0, r4
 801355a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 801355c:	2401      	movs	r4, #1
 801355e:	e7f9      	b.n	8013554 <prvIsQueueEmpty+0xe>

08013560 <prvCopyDataToQueue>:
{
 8013560:	b570      	push	{r4, r5, r6, lr}
 8013562:	4604      	mov	r4, r0
 8013564:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013566:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013568:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801356a:	b94a      	cbnz	r2, 8013580 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801356c:	6803      	ldr	r3, [r0, #0]
 801356e:	bb53      	cbnz	r3, 80135c6 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8013570:	6840      	ldr	r0, [r0, #4]
 8013572:	f001 f8ad 	bl	80146d0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8013576:	2300      	movs	r3, #0
 8013578:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 801357a:	3501      	adds	r5, #1
 801357c:	63a5      	str	r5, [r4, #56]	; 0x38
}
 801357e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8013580:	b96e      	cbnz	r6, 801359e <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8013582:	6880      	ldr	r0, [r0, #8]
 8013584:	f00b f837 	bl	801e5f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8013588:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801358a:	68a3      	ldr	r3, [r4, #8]
 801358c:	4413      	add	r3, r2
 801358e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013590:	6862      	ldr	r2, [r4, #4]
 8013592:	4293      	cmp	r3, r2
 8013594:	d319      	bcc.n	80135ca <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013596:	6823      	ldr	r3, [r4, #0]
 8013598:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 801359a:	2000      	movs	r0, #0
 801359c:	e7ed      	b.n	801357a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801359e:	68c0      	ldr	r0, [r0, #12]
 80135a0:	f00b f829 	bl	801e5f6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80135a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80135a6:	425b      	negs	r3, r3
 80135a8:	68e2      	ldr	r2, [r4, #12]
 80135aa:	441a      	add	r2, r3
 80135ac:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80135ae:	6821      	ldr	r1, [r4, #0]
 80135b0:	428a      	cmp	r2, r1
 80135b2:	d202      	bcs.n	80135ba <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80135b4:	6862      	ldr	r2, [r4, #4]
 80135b6:	4413      	add	r3, r2
 80135b8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80135ba:	2e02      	cmp	r6, #2
 80135bc:	d107      	bne.n	80135ce <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80135be:	b145      	cbz	r5, 80135d2 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80135c0:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80135c2:	2000      	movs	r0, #0
 80135c4:	e7d9      	b.n	801357a <prvCopyDataToQueue+0x1a>
 80135c6:	2000      	movs	r0, #0
 80135c8:	e7d7      	b.n	801357a <prvCopyDataToQueue+0x1a>
 80135ca:	2000      	movs	r0, #0
 80135cc:	e7d5      	b.n	801357a <prvCopyDataToQueue+0x1a>
 80135ce:	2000      	movs	r0, #0
 80135d0:	e7d3      	b.n	801357a <prvCopyDataToQueue+0x1a>
 80135d2:	2000      	movs	r0, #0
 80135d4:	e7d1      	b.n	801357a <prvCopyDataToQueue+0x1a>

080135d6 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80135d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80135d8:	b172      	cbz	r2, 80135f8 <prvCopyDataFromQueue+0x22>
{
 80135da:	b510      	push	{r4, lr}
 80135dc:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80135de:	68c4      	ldr	r4, [r0, #12]
 80135e0:	4414      	add	r4, r2
 80135e2:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80135e4:	6840      	ldr	r0, [r0, #4]
 80135e6:	4284      	cmp	r4, r0
 80135e8:	d301      	bcc.n	80135ee <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80135ea:	6818      	ldr	r0, [r3, #0]
 80135ec:	60d8      	str	r0, [r3, #12]
 80135ee:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80135f0:	68d9      	ldr	r1, [r3, #12]
 80135f2:	f00b f800 	bl	801e5f6 <memcpy>
 80135f6:	bd10      	pop	{r4, pc}
 80135f8:	4770      	bx	lr

080135fa <prvUnlockQueue>:
{
 80135fa:	b538      	push	{r3, r4, r5, lr}
 80135fc:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80135fe:	f7ff fd39 	bl	8013074 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8013602:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8013606:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013608:	e001      	b.n	801360e <prvUnlockQueue+0x14>
			--cTxLock;
 801360a:	3c01      	subs	r4, #1
 801360c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801360e:	2c00      	cmp	r4, #0
 8013610:	dd0a      	ble.n	8013628 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013612:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013614:	b143      	cbz	r3, 8013628 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013616:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801361a:	f000 ff55 	bl	80144c8 <xTaskRemoveFromEventList>
 801361e:	2800      	cmp	r0, #0
 8013620:	d0f3      	beq.n	801360a <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8013622:	f000 ffed 	bl	8014600 <vTaskMissedYield>
 8013626:	e7f0      	b.n	801360a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8013628:	23ff      	movs	r3, #255	; 0xff
 801362a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 801362e:	f7ff fd43 	bl	80130b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8013632:	f7ff fd1f 	bl	8013074 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8013636:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 801363a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801363c:	e001      	b.n	8013642 <prvUnlockQueue+0x48>
				--cRxLock;
 801363e:	3c01      	subs	r4, #1
 8013640:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013642:	2c00      	cmp	r4, #0
 8013644:	dd0a      	ble.n	801365c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013646:	692b      	ldr	r3, [r5, #16]
 8013648:	b143      	cbz	r3, 801365c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801364a:	f105 0010 	add.w	r0, r5, #16
 801364e:	f000 ff3b 	bl	80144c8 <xTaskRemoveFromEventList>
 8013652:	2800      	cmp	r0, #0
 8013654:	d0f3      	beq.n	801363e <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8013656:	f000 ffd3 	bl	8014600 <vTaskMissedYield>
 801365a:	e7f0      	b.n	801363e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 801365c:	23ff      	movs	r3, #255	; 0xff
 801365e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8013662:	f7ff fd29 	bl	80130b8 <vPortExitCritical>
 8013666:	bd38      	pop	{r3, r4, r5, pc}

08013668 <xQueueGenericReset>:
{
 8013668:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801366a:	b330      	cbz	r0, 80136ba <xQueueGenericReset+0x52>
 801366c:	4604      	mov	r4, r0
 801366e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8013670:	f7ff fd00 	bl	8013074 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8013674:	6821      	ldr	r1, [r4, #0]
 8013676:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8013678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801367a:	fb03 1002 	mla	r0, r3, r2, r1
 801367e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013680:	2000      	movs	r0, #0
 8013682:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013684:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8013686:	3a01      	subs	r2, #1
 8013688:	fb02 1303 	mla	r3, r2, r3, r1
 801368c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801368e:	23ff      	movs	r3, #255	; 0xff
 8013690:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013694:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8013698:	b9c5      	cbnz	r5, 80136cc <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801369a:	6923      	ldr	r3, [r4, #16]
 801369c:	b1f3      	cbz	r3, 80136dc <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801369e:	f104 0010 	add.w	r0, r4, #16
 80136a2:	f000 ff11 	bl	80144c8 <xTaskRemoveFromEventList>
 80136a6:	b1c8      	cbz	r0, 80136dc <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 80136a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136ac:	4b0d      	ldr	r3, [pc, #52]	; (80136e4 <xQueueGenericReset+0x7c>)
 80136ae:	601a      	str	r2, [r3, #0]
 80136b0:	f3bf 8f4f 	dsb	sy
 80136b4:	f3bf 8f6f 	isb	sy
 80136b8:	e010      	b.n	80136dc <xQueueGenericReset+0x74>
 80136ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136be:	f383 8811 	msr	BASEPRI, r3
 80136c2:	f3bf 8f6f 	isb	sy
 80136c6:	f3bf 8f4f 	dsb	sy
 80136ca:	e7fe      	b.n	80136ca <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80136cc:	f104 0010 	add.w	r0, r4, #16
 80136d0:	f7ff fc27 	bl	8012f22 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80136d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80136d8:	f7ff fc23 	bl	8012f22 <vListInitialise>
	taskEXIT_CRITICAL();
 80136dc:	f7ff fcec 	bl	80130b8 <vPortExitCritical>
}
 80136e0:	2001      	movs	r0, #1
 80136e2:	bd38      	pop	{r3, r4, r5, pc}
 80136e4:	e000ed04 	.word	0xe000ed04

080136e8 <prvInitialiseNewQueue>:
{
 80136e8:	b510      	push	{r4, lr}
 80136ea:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80136ec:	460c      	mov	r4, r1
 80136ee:	b139      	cbz	r1, 8013700 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80136f0:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80136f2:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80136f4:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80136f6:	2101      	movs	r1, #1
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7ff ffb5 	bl	8013668 <xQueueGenericReset>
 80136fe:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013700:	601b      	str	r3, [r3, #0]
 8013702:	e7f6      	b.n	80136f2 <prvInitialiseNewQueue+0xa>

08013704 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013704:	b940      	cbnz	r0, 8013718 <xQueueGenericCreate+0x14>
 8013706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801370a:	f383 8811 	msr	BASEPRI, r3
 801370e:	f3bf 8f6f 	isb	sy
 8013712:	f3bf 8f4f 	dsb	sy
 8013716:	e7fe      	b.n	8013716 <xQueueGenericCreate+0x12>
	{
 8013718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801371a:	b083      	sub	sp, #12
 801371c:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 801371e:	b111      	cbz	r1, 8013726 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013720:	fb01 f000 	mul.w	r0, r1, r0
 8013724:	e000      	b.n	8013728 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8013726:	2000      	movs	r0, #0
 8013728:	4617      	mov	r7, r2
 801372a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801372c:	3048      	adds	r0, #72	; 0x48
 801372e:	f7ff fe3f 	bl	80133b0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8013732:	4606      	mov	r6, r0
 8013734:	b138      	cbz	r0, 8013746 <xQueueGenericCreate+0x42>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013736:	9000      	str	r0, [sp, #0]
 8013738:	463b      	mov	r3, r7
 801373a:	f100 0248 	add.w	r2, r0, #72	; 0x48
 801373e:	4621      	mov	r1, r4
 8013740:	4628      	mov	r0, r5
 8013742:	f7ff ffd1 	bl	80136e8 <prvInitialiseNewQueue>
	}
 8013746:	4630      	mov	r0, r6
 8013748:	b003      	add	sp, #12
 801374a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801374c <xQueueGenericSend>:
{
 801374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801374e:	b085      	sub	sp, #20
 8013750:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8013752:	b160      	cbz	r0, 801376e <xQueueGenericSend+0x22>
 8013754:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013756:	b199      	cbz	r1, 8013780 <xQueueGenericSend+0x34>
 8013758:	2501      	movs	r5, #1
 801375a:	b9bd      	cbnz	r5, 801378c <xQueueGenericSend+0x40>
 801375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013760:	f383 8811 	msr	BASEPRI, r3
 8013764:	f3bf 8f6f 	isb	sy
 8013768:	f3bf 8f4f 	dsb	sy
 801376c:	e7fe      	b.n	801376c <xQueueGenericSend+0x20>
 801376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013772:	f383 8811 	msr	BASEPRI, r3
 8013776:	f3bf 8f6f 	isb	sy
 801377a:	f3bf 8f4f 	dsb	sy
 801377e:	e7fe      	b.n	801377e <xQueueGenericSend+0x32>
 8013780:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013782:	b90a      	cbnz	r2, 8013788 <xQueueGenericSend+0x3c>
 8013784:	2501      	movs	r5, #1
 8013786:	e7e8      	b.n	801375a <xQueueGenericSend+0xe>
 8013788:	2500      	movs	r5, #0
 801378a:	e7e6      	b.n	801375a <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801378c:	2b02      	cmp	r3, #2
 801378e:	d009      	beq.n	80137a4 <xQueueGenericSend+0x58>
 8013790:	b96d      	cbnz	r5, 80137ae <xQueueGenericSend+0x62>
 8013792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013796:	f383 8811 	msr	BASEPRI, r3
 801379a:	f3bf 8f6f 	isb	sy
 801379e:	f3bf 8f4f 	dsb	sy
 80137a2:	e7fe      	b.n	80137a2 <xQueueGenericSend+0x56>
 80137a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80137a6:	2a01      	cmp	r2, #1
 80137a8:	d0f2      	beq.n	8013790 <xQueueGenericSend+0x44>
 80137aa:	2500      	movs	r5, #0
 80137ac:	e7f0      	b.n	8013790 <xQueueGenericSend+0x44>
 80137ae:	461e      	mov	r6, r3
 80137b0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80137b2:	f000 ff2b 	bl	801460c <xTaskGetSchedulerState>
 80137b6:	b910      	cbnz	r0, 80137be <xQueueGenericSend+0x72>
 80137b8:	9b01      	ldr	r3, [sp, #4]
 80137ba:	b103      	cbz	r3, 80137be <xQueueGenericSend+0x72>
 80137bc:	2500      	movs	r5, #0
 80137be:	b945      	cbnz	r5, 80137d2 <xQueueGenericSend+0x86>
 80137c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c4:	f383 8811 	msr	BASEPRI, r3
 80137c8:	f3bf 8f6f 	isb	sy
 80137cc:	f3bf 8f4f 	dsb	sy
 80137d0:	e7fe      	b.n	80137d0 <xQueueGenericSend+0x84>
 80137d2:	2500      	movs	r5, #0
 80137d4:	e02c      	b.n	8013830 <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80137d6:	4632      	mov	r2, r6
 80137d8:	4639      	mov	r1, r7
 80137da:	4620      	mov	r0, r4
 80137dc:	f7ff fec0 	bl	8013560 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137e2:	b18b      	cbz	r3, 8013808 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80137e8:	f000 fe6e 	bl	80144c8 <xTaskRemoveFromEventList>
 80137ec:	b138      	cbz	r0, 80137fe <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 80137ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137f2:	4b37      	ldr	r3, [pc, #220]	; (80138d0 <xQueueGenericSend+0x184>)
 80137f4:	601a      	str	r2, [r3, #0]
 80137f6:	f3bf 8f4f 	dsb	sy
 80137fa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80137fe:	f7ff fc5b 	bl	80130b8 <vPortExitCritical>
				return pdPASS;
 8013802:	2001      	movs	r0, #1
}
 8013804:	b005      	add	sp, #20
 8013806:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 8013808:	2800      	cmp	r0, #0
 801380a:	d0f8      	beq.n	80137fe <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 801380c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013810:	4b2f      	ldr	r3, [pc, #188]	; (80138d0 <xQueueGenericSend+0x184>)
 8013812:	601a      	str	r2, [r3, #0]
 8013814:	f3bf 8f4f 	dsb	sy
 8013818:	f3bf 8f6f 	isb	sy
 801381c:	e7ef      	b.n	80137fe <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 801381e:	f7ff fc4b 	bl	80130b8 <vPortExitCritical>
					return errQUEUE_FULL;
 8013822:	2000      	movs	r0, #0
 8013824:	e7ee      	b.n	8013804 <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
 8013826:	4620      	mov	r0, r4
 8013828:	f7ff fee7 	bl	80135fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801382c:	f000 fcfe 	bl	801422c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8013830:	f7ff fc20 	bl	8013074 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013834:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013836:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013838:	429a      	cmp	r2, r3
 801383a:	d3cc      	bcc.n	80137d6 <xQueueGenericSend+0x8a>
 801383c:	2e02      	cmp	r6, #2
 801383e:	d0ca      	beq.n	80137d6 <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013840:	9b01      	ldr	r3, [sp, #4]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d0eb      	beq.n	801381e <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
 8013846:	b91d      	cbnz	r5, 8013850 <xQueueGenericSend+0x104>
					vTaskSetTimeOutState( &xTimeOut );
 8013848:	a802      	add	r0, sp, #8
 801384a:	f000 fe83 	bl	8014554 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801384e:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8013850:	f7ff fc32 	bl	80130b8 <vPortExitCritical>
		vTaskSuspendAll();
 8013854:	f000 fc44 	bl	80140e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013858:	f7ff fc0c 	bl	8013074 <vPortEnterCritical>
 801385c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013860:	b25b      	sxtb	r3, r3
 8013862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013866:	d102      	bne.n	801386e <xQueueGenericSend+0x122>
 8013868:	2300      	movs	r3, #0
 801386a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801386e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013872:	b25b      	sxtb	r3, r3
 8013874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013878:	d102      	bne.n	8013880 <xQueueGenericSend+0x134>
 801387a:	2300      	movs	r3, #0
 801387c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013880:	f7ff fc1a 	bl	80130b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013884:	a901      	add	r1, sp, #4
 8013886:	a802      	add	r0, sp, #8
 8013888:	f000 fe7a 	bl	8014580 <xTaskCheckForTimeOut>
 801388c:	b9c8      	cbnz	r0, 80138c2 <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801388e:	4620      	mov	r0, r4
 8013890:	f7ff fe4a 	bl	8013528 <prvIsQueueFull>
 8013894:	2800      	cmp	r0, #0
 8013896:	d0c6      	beq.n	8013826 <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013898:	9901      	ldr	r1, [sp, #4]
 801389a:	f104 0010 	add.w	r0, r4, #16
 801389e:	f000 fdfb 	bl	8014498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80138a2:	4620      	mov	r0, r4
 80138a4:	f7ff fea9 	bl	80135fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80138a8:	f000 fcc0 	bl	801422c <xTaskResumeAll>
 80138ac:	2800      	cmp	r0, #0
 80138ae:	d1bf      	bne.n	8013830 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 80138b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138b4:	4b06      	ldr	r3, [pc, #24]	; (80138d0 <xQueueGenericSend+0x184>)
 80138b6:	601a      	str	r2, [r3, #0]
 80138b8:	f3bf 8f4f 	dsb	sy
 80138bc:	f3bf 8f6f 	isb	sy
 80138c0:	e7b6      	b.n	8013830 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 80138c2:	4620      	mov	r0, r4
 80138c4:	f7ff fe99 	bl	80135fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80138c8:	f000 fcb0 	bl	801422c <xTaskResumeAll>
			return errQUEUE_FULL;
 80138cc:	2000      	movs	r0, #0
 80138ce:	e799      	b.n	8013804 <xQueueGenericSend+0xb8>
 80138d0:	e000ed04 	.word	0xe000ed04

080138d4 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80138d4:	b148      	cbz	r0, 80138ea <prvInitialiseMutex+0x16>
	{
 80138d6:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80138d8:	2100      	movs	r1, #0
 80138da:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80138dc:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80138de:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80138e0:	460b      	mov	r3, r1
 80138e2:	460a      	mov	r2, r1
 80138e4:	f7ff ff32 	bl	801374c <xQueueGenericSend>
 80138e8:	bd08      	pop	{r3, pc}
 80138ea:	4770      	bx	lr

080138ec <xQueueCreateMutex>:
	{
 80138ec:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80138ee:	4602      	mov	r2, r0
 80138f0:	2100      	movs	r1, #0
 80138f2:	2001      	movs	r0, #1
 80138f4:	f7ff ff06 	bl	8013704 <xQueueGenericCreate>
 80138f8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80138fa:	f7ff ffeb 	bl	80138d4 <prvInitialiseMutex>
	}
 80138fe:	4620      	mov	r0, r4
 8013900:	bd10      	pop	{r4, pc}

08013902 <xQueueGenericSendFromISR>:
{
 8013902:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013906:	b160      	cbz	r0, 8013922 <xQueueGenericSendFromISR+0x20>
 8013908:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801390a:	b199      	cbz	r1, 8013934 <xQueueGenericSendFromISR+0x32>
 801390c:	2001      	movs	r0, #1
 801390e:	b9b8      	cbnz	r0, 8013940 <xQueueGenericSendFromISR+0x3e>
 8013910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013914:	f383 8811 	msr	BASEPRI, r3
 8013918:	f3bf 8f6f 	isb	sy
 801391c:	f3bf 8f4f 	dsb	sy
 8013920:	e7fe      	b.n	8013920 <xQueueGenericSendFromISR+0x1e>
 8013922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013926:	f383 8811 	msr	BASEPRI, r3
 801392a:	f3bf 8f6f 	isb	sy
 801392e:	f3bf 8f4f 	dsb	sy
 8013932:	e7fe      	b.n	8013932 <xQueueGenericSendFromISR+0x30>
 8013934:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8013936:	b908      	cbnz	r0, 801393c <xQueueGenericSendFromISR+0x3a>
 8013938:	2001      	movs	r0, #1
 801393a:	e7e8      	b.n	801390e <xQueueGenericSendFromISR+0xc>
 801393c:	2000      	movs	r0, #0
 801393e:	e7e6      	b.n	801390e <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013940:	2b02      	cmp	r3, #2
 8013942:	d009      	beq.n	8013958 <xQueueGenericSendFromISR+0x56>
 8013944:	b968      	cbnz	r0, 8013962 <xQueueGenericSendFromISR+0x60>
 8013946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801394a:	f383 8811 	msr	BASEPRI, r3
 801394e:	f3bf 8f6f 	isb	sy
 8013952:	f3bf 8f4f 	dsb	sy
 8013956:	e7fe      	b.n	8013956 <xQueueGenericSendFromISR+0x54>
 8013958:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 801395a:	2d01      	cmp	r5, #1
 801395c:	d0f2      	beq.n	8013944 <xQueueGenericSendFromISR+0x42>
 801395e:	2000      	movs	r0, #0
 8013960:	e7f0      	b.n	8013944 <xQueueGenericSendFromISR+0x42>
 8013962:	461f      	mov	r7, r3
 8013964:	4690      	mov	r8, r2
 8013966:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013968:	f7ff fc96 	bl	8013298 <vPortValidateInterruptPriority>
	__asm volatile
 801396c:	f3ef 8611 	mrs	r6, BASEPRI
 8013970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013974:	f383 8811 	msr	BASEPRI, r3
 8013978:	f3bf 8f6f 	isb	sy
 801397c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013980:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013982:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013984:	429a      	cmp	r2, r3
 8013986:	d301      	bcc.n	801398c <xQueueGenericSendFromISR+0x8a>
 8013988:	2f02      	cmp	r7, #2
 801398a:	d121      	bne.n	80139d0 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 801398c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8013990:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013992:	463a      	mov	r2, r7
 8013994:	4649      	mov	r1, r9
 8013996:	4620      	mov	r0, r4
 8013998:	f7ff fde2 	bl	8013560 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 801399c:	f1b5 3fff 	cmp.w	r5, #4294967295
 80139a0:	d110      	bne.n	80139c4 <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139a4:	b1b3      	cbz	r3, 80139d4 <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80139aa:	f000 fd8d 	bl	80144c8 <xTaskRemoveFromEventList>
 80139ae:	b198      	cbz	r0, 80139d8 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 80139b0:	f1b8 0f00 	cmp.w	r8, #0
 80139b4:	d012      	beq.n	80139dc <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80139b6:	2001      	movs	r0, #1
 80139b8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80139bc:	f386 8811 	msr	BASEPRI, r6
}
 80139c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80139c4:	1c6b      	adds	r3, r5, #1
 80139c6:	b25b      	sxtb	r3, r3
 80139c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80139cc:	2001      	movs	r0, #1
 80139ce:	e7f5      	b.n	80139bc <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 80139d0:	2000      	movs	r0, #0
 80139d2:	e7f3      	b.n	80139bc <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 80139d4:	2001      	movs	r0, #1
 80139d6:	e7f1      	b.n	80139bc <xQueueGenericSendFromISR+0xba>
 80139d8:	2001      	movs	r0, #1
 80139da:	e7ef      	b.n	80139bc <xQueueGenericSendFromISR+0xba>
 80139dc:	2001      	movs	r0, #1
 80139de:	e7ed      	b.n	80139bc <xQueueGenericSendFromISR+0xba>

080139e0 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80139e0:	b160      	cbz	r0, 80139fc <xQueueGiveFromISR+0x1c>
{
 80139e2:	b570      	push	{r4, r5, r6, lr}
 80139e4:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80139e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80139e8:	b18b      	cbz	r3, 8013a0e <xQueueGiveFromISR+0x2e>
	__asm volatile
 80139ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ee:	f383 8811 	msr	BASEPRI, r3
 80139f2:	f3bf 8f6f 	isb	sy
 80139f6:	f3bf 8f4f 	dsb	sy
 80139fa:	e7fe      	b.n	80139fa <xQueueGiveFromISR+0x1a>
 80139fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a00:	f383 8811 	msr	BASEPRI, r3
 8013a04:	f3bf 8f6f 	isb	sy
 8013a08:	f3bf 8f4f 	dsb	sy
 8013a0c:	e7fe      	b.n	8013a0c <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8013a0e:	6803      	ldr	r3, [r0, #0]
 8013a10:	b153      	cbz	r3, 8013a28 <xQueueGiveFromISR+0x48>
 8013a12:	2301      	movs	r3, #1
 8013a14:	b973      	cbnz	r3, 8013a34 <xQueueGiveFromISR+0x54>
 8013a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a1a:	f383 8811 	msr	BASEPRI, r3
 8013a1e:	f3bf 8f6f 	isb	sy
 8013a22:	f3bf 8f4f 	dsb	sy
 8013a26:	e7fe      	b.n	8013a26 <xQueueGiveFromISR+0x46>
 8013a28:	6843      	ldr	r3, [r0, #4]
 8013a2a:	b90b      	cbnz	r3, 8013a30 <xQueueGiveFromISR+0x50>
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	e7f1      	b.n	8013a14 <xQueueGiveFromISR+0x34>
 8013a30:	2300      	movs	r3, #0
 8013a32:	e7ef      	b.n	8013a14 <xQueueGiveFromISR+0x34>
 8013a34:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a36:	f7ff fc2f 	bl	8013298 <vPortValidateInterruptPriority>
	__asm volatile
 8013a3a:	f3ef 8511 	mrs	r5, BASEPRI
 8013a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a42:	f383 8811 	msr	BASEPRI, r3
 8013a46:	f3bf 8f6f 	isb	sy
 8013a4a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d21a      	bcs.n	8013a8c <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013a56:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013a5a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8013a5c:	3201      	adds	r2, #1
 8013a5e:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8013a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a64:	d10c      	bne.n	8013a80 <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a68:	b193      	cbz	r3, 8013a90 <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013a6e:	f000 fd2b 	bl	80144c8 <xTaskRemoveFromEventList>
 8013a72:	b178      	cbz	r0, 8013a94 <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 8013a74:	b186      	cbz	r6, 8013a98 <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013a76:	2001      	movs	r0, #1
 8013a78:	6030      	str	r0, [r6, #0]
	__asm volatile
 8013a7a:	f385 8811 	msr	BASEPRI, r5
}
 8013a7e:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013a80:	3301      	adds	r3, #1
 8013a82:	b25b      	sxtb	r3, r3
 8013a84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8013a88:	2001      	movs	r0, #1
 8013a8a:	e7f6      	b.n	8013a7a <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 8013a8c:	2000      	movs	r0, #0
 8013a8e:	e7f4      	b.n	8013a7a <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 8013a90:	2001      	movs	r0, #1
 8013a92:	e7f2      	b.n	8013a7a <xQueueGiveFromISR+0x9a>
 8013a94:	2001      	movs	r0, #1
 8013a96:	e7f0      	b.n	8013a7a <xQueueGiveFromISR+0x9a>
 8013a98:	2001      	movs	r0, #1
 8013a9a:	e7ee      	b.n	8013a7a <xQueueGiveFromISR+0x9a>

08013a9c <xQueueGenericReceive>:
{
 8013a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa0:	b084      	sub	sp, #16
 8013aa2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8013aa4:	b160      	cbz	r0, 8013ac0 <xQueueGenericReceive+0x24>
 8013aa6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013aa8:	b199      	cbz	r1, 8013ad2 <xQueueGenericReceive+0x36>
 8013aaa:	2501      	movs	r5, #1
 8013aac:	b9bd      	cbnz	r5, 8013ade <xQueueGenericReceive+0x42>
	__asm volatile
 8013aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab2:	f383 8811 	msr	BASEPRI, r3
 8013ab6:	f3bf 8f6f 	isb	sy
 8013aba:	f3bf 8f4f 	dsb	sy
 8013abe:	e7fe      	b.n	8013abe <xQueueGenericReceive+0x22>
 8013ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac4:	f383 8811 	msr	BASEPRI, r3
 8013ac8:	f3bf 8f6f 	isb	sy
 8013acc:	f3bf 8f4f 	dsb	sy
 8013ad0:	e7fe      	b.n	8013ad0 <xQueueGenericReceive+0x34>
 8013ad2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013ad4:	b90a      	cbnz	r2, 8013ada <xQueueGenericReceive+0x3e>
 8013ad6:	2501      	movs	r5, #1
 8013ad8:	e7e8      	b.n	8013aac <xQueueGenericReceive+0x10>
 8013ada:	2500      	movs	r5, #0
 8013adc:	e7e6      	b.n	8013aac <xQueueGenericReceive+0x10>
 8013ade:	461f      	mov	r7, r3
 8013ae0:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013ae2:	f000 fd93 	bl	801460c <xTaskGetSchedulerState>
 8013ae6:	b910      	cbnz	r0, 8013aee <xQueueGenericReceive+0x52>
 8013ae8:	9b01      	ldr	r3, [sp, #4]
 8013aea:	b103      	cbz	r3, 8013aee <xQueueGenericReceive+0x52>
 8013aec:	2500      	movs	r5, #0
 8013aee:	b945      	cbnz	r5, 8013b02 <xQueueGenericReceive+0x66>
 8013af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af4:	f383 8811 	msr	BASEPRI, r3
 8013af8:	f3bf 8f6f 	isb	sy
 8013afc:	f3bf 8f4f 	dsb	sy
 8013b00:	e7fe      	b.n	8013b00 <xQueueGenericReceive+0x64>
 8013b02:	2600      	movs	r6, #0
 8013b04:	e05d      	b.n	8013bc2 <xQueueGenericReceive+0x126>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8013b06:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013b08:	4641      	mov	r1, r8
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	f7ff fd63 	bl	80135d6 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8013b10:	b9df      	cbnz	r7, 8013b4a <xQueueGenericReceive+0xae>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8013b12:	3d01      	subs	r5, #1
 8013b14:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b16:	6823      	ldr	r3, [r4, #0]
 8013b18:	b913      	cbnz	r3, 8013b20 <xQueueGenericReceive+0x84>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8013b1a:	f000 fe33 	bl	8014784 <pvTaskIncrementMutexHeldCount>
 8013b1e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b20:	6923      	ldr	r3, [r4, #16]
 8013b22:	b163      	cbz	r3, 8013b3e <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b24:	f104 0010 	add.w	r0, r4, #16
 8013b28:	f000 fcce 	bl	80144c8 <xTaskRemoveFromEventList>
 8013b2c:	b138      	cbz	r0, 8013b3e <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8013b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b32:	4b45      	ldr	r3, [pc, #276]	; (8013c48 <xQueueGenericReceive+0x1ac>)
 8013b34:	601a      	str	r2, [r3, #0]
 8013b36:	f3bf 8f4f 	dsb	sy
 8013b3a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8013b3e:	f7ff fabb 	bl	80130b8 <vPortExitCritical>
				return pdPASS;
 8013b42:	2001      	movs	r0, #1
}
 8013b44:	b004      	add	sp, #16
 8013b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8013b4a:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d0f5      	beq.n	8013b3e <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013b56:	f000 fcb7 	bl	80144c8 <xTaskRemoveFromEventList>
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	d0ef      	beq.n	8013b3e <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8013b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b62:	4b39      	ldr	r3, [pc, #228]	; (8013c48 <xQueueGenericReceive+0x1ac>)
 8013b64:	601a      	str	r2, [r3, #0]
 8013b66:	f3bf 8f4f 	dsb	sy
 8013b6a:	f3bf 8f6f 	isb	sy
 8013b6e:	e7e6      	b.n	8013b3e <xQueueGenericReceive+0xa2>
					taskEXIT_CRITICAL();
 8013b70:	f7ff faa2 	bl	80130b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8013b74:	2000      	movs	r0, #0
 8013b76:	e7e5      	b.n	8013b44 <xQueueGenericReceive+0xa8>
					vTaskSetTimeOutState( &xTimeOut );
 8013b78:	a802      	add	r0, sp, #8
 8013b7a:	f000 fceb 	bl	8014554 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013b7e:	2601      	movs	r6, #1
 8013b80:	e029      	b.n	8013bd6 <xQueueGenericReceive+0x13a>
		prvLockQueue( pxQueue );
 8013b82:	2300      	movs	r3, #0
 8013b84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013b88:	e031      	b.n	8013bee <xQueueGenericReceive+0x152>
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b90:	e033      	b.n	8013bfa <xQueueGenericReceive+0x15e>
						taskENTER_CRITICAL();
 8013b92:	f7ff fa6f 	bl	8013074 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8013b96:	6860      	ldr	r0, [r4, #4]
 8013b98:	f000 fd48 	bl	801462c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8013b9c:	f7ff fa8c 	bl	80130b8 <vPortExitCritical>
 8013ba0:	e03b      	b.n	8013c1a <xQueueGenericReceive+0x17e>
				prvUnlockQueue( pxQueue );
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	f7ff fd29 	bl	80135fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ba8:	f000 fb40 	bl	801422c <xTaskResumeAll>
 8013bac:	e009      	b.n	8013bc2 <xQueueGenericReceive+0x126>
			prvUnlockQueue( pxQueue );
 8013bae:	4620      	mov	r0, r4
 8013bb0:	f7ff fd23 	bl	80135fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013bb4:	f000 fb3a 	bl	801422c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f7ff fcc4 	bl	8013546 <prvIsQueueEmpty>
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	d140      	bne.n	8013c44 <xQueueGenericReceive+0x1a8>
		taskENTER_CRITICAL();
 8013bc2:	f7ff fa57 	bl	8013074 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bc6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013bc8:	2d00      	cmp	r5, #0
 8013bca:	d19c      	bne.n	8013b06 <xQueueGenericReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013bcc:	9b01      	ldr	r3, [sp, #4]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d0ce      	beq.n	8013b70 <xQueueGenericReceive+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8013bd2:	2e00      	cmp	r6, #0
 8013bd4:	d0d0      	beq.n	8013b78 <xQueueGenericReceive+0xdc>
		taskEXIT_CRITICAL();
 8013bd6:	f7ff fa6f 	bl	80130b8 <vPortExitCritical>
		vTaskSuspendAll();
 8013bda:	f000 fa81 	bl	80140e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013bde:	f7ff fa49 	bl	8013074 <vPortEnterCritical>
 8013be2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013be6:	b25b      	sxtb	r3, r3
 8013be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bec:	d0c9      	beq.n	8013b82 <xQueueGenericReceive+0xe6>
 8013bee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013bf2:	b25b      	sxtb	r3, r3
 8013bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bf8:	d0c7      	beq.n	8013b8a <xQueueGenericReceive+0xee>
 8013bfa:	f7ff fa5d 	bl	80130b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013bfe:	a901      	add	r1, sp, #4
 8013c00:	a802      	add	r0, sp, #8
 8013c02:	f000 fcbd 	bl	8014580 <xTaskCheckForTimeOut>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	d1d1      	bne.n	8013bae <xQueueGenericReceive+0x112>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	f7ff fc9b 	bl	8013546 <prvIsQueueEmpty>
 8013c10:	2800      	cmp	r0, #0
 8013c12:	d0c6      	beq.n	8013ba2 <xQueueGenericReceive+0x106>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c14:	6823      	ldr	r3, [r4, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d0bb      	beq.n	8013b92 <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013c1a:	9901      	ldr	r1, [sp, #4]
 8013c1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013c20:	f000 fc3a 	bl	8014498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013c24:	4620      	mov	r0, r4
 8013c26:	f7ff fce8 	bl	80135fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013c2a:	f000 faff 	bl	801422c <xTaskResumeAll>
 8013c2e:	2800      	cmp	r0, #0
 8013c30:	d1c7      	bne.n	8013bc2 <xQueueGenericReceive+0x126>
					portYIELD_WITHIN_API();
 8013c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c36:	4b04      	ldr	r3, [pc, #16]	; (8013c48 <xQueueGenericReceive+0x1ac>)
 8013c38:	601a      	str	r2, [r3, #0]
 8013c3a:	f3bf 8f4f 	dsb	sy
 8013c3e:	f3bf 8f6f 	isb	sy
 8013c42:	e7be      	b.n	8013bc2 <xQueueGenericReceive+0x126>
				return errQUEUE_EMPTY;
 8013c44:	2000      	movs	r0, #0
 8013c46:	e77d      	b.n	8013b44 <xQueueGenericReceive+0xa8>
 8013c48:	e000ed04 	.word	0xe000ed04

08013c4c <xQueueReceiveFromISR>:
{
 8013c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013c50:	b160      	cbz	r0, 8013c6c <xQueueReceiveFromISR+0x20>
 8013c52:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c54:	b199      	cbz	r1, 8013c7e <xQueueReceiveFromISR+0x32>
 8013c56:	2301      	movs	r3, #1
 8013c58:	b9bb      	cbnz	r3, 8013c8a <xQueueReceiveFromISR+0x3e>
 8013c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c5e:	f383 8811 	msr	BASEPRI, r3
 8013c62:	f3bf 8f6f 	isb	sy
 8013c66:	f3bf 8f4f 	dsb	sy
 8013c6a:	e7fe      	b.n	8013c6a <xQueueReceiveFromISR+0x1e>
 8013c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c70:	f383 8811 	msr	BASEPRI, r3
 8013c74:	f3bf 8f6f 	isb	sy
 8013c78:	f3bf 8f4f 	dsb	sy
 8013c7c:	e7fe      	b.n	8013c7c <xQueueReceiveFromISR+0x30>
 8013c7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013c80:	b90b      	cbnz	r3, 8013c86 <xQueueReceiveFromISR+0x3a>
 8013c82:	2301      	movs	r3, #1
 8013c84:	e7e8      	b.n	8013c58 <xQueueReceiveFromISR+0xc>
 8013c86:	2300      	movs	r3, #0
 8013c88:	e7e6      	b.n	8013c58 <xQueueReceiveFromISR+0xc>
 8013c8a:	4617      	mov	r7, r2
 8013c8c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c8e:	f7ff fb03 	bl	8013298 <vPortValidateInterruptPriority>
	__asm volatile
 8013c92:	f3ef 8611 	mrs	r6, BASEPRI
 8013c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c9a:	f383 8811 	msr	BASEPRI, r3
 8013c9e:	f3bf 8f6f 	isb	sy
 8013ca2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ca6:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013caa:	f1b8 0f00 	cmp.w	r8, #0
 8013cae:	d020      	beq.n	8013cf2 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8013cb0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8013cb4:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013cb6:	4649      	mov	r1, r9
 8013cb8:	4620      	mov	r0, r4
 8013cba:	f7ff fc8c 	bl	80135d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8013cbe:	f108 33ff 	add.w	r3, r8, #4294967295
 8013cc2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8013cc4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013cc8:	d10d      	bne.n	8013ce6 <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013cca:	6923      	ldr	r3, [r4, #16]
 8013ccc:	b19b      	cbz	r3, 8013cf6 <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cce:	f104 0010 	add.w	r0, r4, #16
 8013cd2:	f000 fbf9 	bl	80144c8 <xTaskRemoveFromEventList>
 8013cd6:	b180      	cbz	r0, 8013cfa <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 8013cd8:	b18f      	cbz	r7, 8013cfe <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013cda:	2001      	movs	r0, #1
 8013cdc:	6038      	str	r0, [r7, #0]
	__asm volatile
 8013cde:	f386 8811 	msr	BASEPRI, r6
}
 8013ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013ce6:	1c6b      	adds	r3, r5, #1
 8013ce8:	b25b      	sxtb	r3, r3
 8013cea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8013cee:	2001      	movs	r0, #1
 8013cf0:	e7f5      	b.n	8013cde <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	e7f3      	b.n	8013cde <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 8013cf6:	2001      	movs	r0, #1
 8013cf8:	e7f1      	b.n	8013cde <xQueueReceiveFromISR+0x92>
 8013cfa:	2001      	movs	r0, #1
 8013cfc:	e7ef      	b.n	8013cde <xQueueReceiveFromISR+0x92>
 8013cfe:	2001      	movs	r0, #1
 8013d00:	e7ed      	b.n	8013cde <xQueueReceiveFromISR+0x92>

08013d02 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8013d02:	b940      	cbnz	r0, 8013d16 <uxQueueMessagesWaiting+0x14>
	__asm volatile
 8013d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d08:	f383 8811 	msr	BASEPRI, r3
 8013d0c:	f3bf 8f6f 	isb	sy
 8013d10:	f3bf 8f4f 	dsb	sy
 8013d14:	e7fe      	b.n	8013d14 <uxQueueMessagesWaiting+0x12>
{
 8013d16:	b510      	push	{r4, lr}
 8013d18:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8013d1a:	f7ff f9ab 	bl	8013074 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013d1e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8013d20:	f7ff f9ca 	bl	80130b8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013d24:	4620      	mov	r0, r4
 8013d26:	bd10      	pop	{r4, pc}

08013d28 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8013d28:	b108      	cbz	r0, 8013d2e <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013d2a:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013d2c:	4770      	bx	lr
 8013d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d32:	f383 8811 	msr	BASEPRI, r3
 8013d36:	f3bf 8f6f 	isb	sy
 8013d3a:	f3bf 8f4f 	dsb	sy
 8013d3e:	e7fe      	b.n	8013d3e <uxQueueMessagesWaitingFromISR+0x16>

08013d40 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d40:	2300      	movs	r3, #0
 8013d42:	2b0f      	cmp	r3, #15
 8013d44:	d80f      	bhi.n	8013d66 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013d46:	4a08      	ldr	r2, [pc, #32]	; (8013d68 <vQueueUnregisterQueue+0x28>)
 8013d48:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013d4c:	6852      	ldr	r2, [r2, #4]
 8013d4e:	4282      	cmp	r2, r0
 8013d50:	d001      	beq.n	8013d56 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d52:	3301      	adds	r3, #1
 8013d54:	e7f5      	b.n	8013d42 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013d56:	4a04      	ldr	r2, [pc, #16]	; (8013d68 <vQueueUnregisterQueue+0x28>)
 8013d58:	2100      	movs	r1, #0
 8013d5a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013d5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013d62:	6059      	str	r1, [r3, #4]
				break;
 8013d64:	4770      	bx	lr
 8013d66:	4770      	bx	lr
 8013d68:	20004438 	.word	0x20004438

08013d6c <vQueueDelete>:
	configASSERT( pxQueue );
 8013d6c:	b940      	cbnz	r0, 8013d80 <vQueueDelete+0x14>
 8013d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d72:	f383 8811 	msr	BASEPRI, r3
 8013d76:	f3bf 8f6f 	isb	sy
 8013d7a:	f3bf 8f4f 	dsb	sy
 8013d7e:	e7fe      	b.n	8013d7e <vQueueDelete+0x12>
{
 8013d80:	b510      	push	{r4, lr}
 8013d82:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8013d84:	f7ff ffdc 	bl	8013d40 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8013d88:	4620      	mov	r0, r4
 8013d8a:	f7ff fb95 	bl	80134b8 <vPortFree>
 8013d8e:	bd10      	pop	{r4, pc}

08013d90 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d90:	4b0a      	ldr	r3, [pc, #40]	; (8013dbc <prvResetNextTaskUnblockTime+0x2c>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	b94b      	cbnz	r3, 8013dac <prvResetNextTaskUnblockTime+0x1c>
 8013d98:	2301      	movs	r3, #1
 8013d9a:	b94b      	cbnz	r3, 8013db0 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013d9c:	4b07      	ldr	r3, [pc, #28]	; (8013dbc <prvResetNextTaskUnblockTime+0x2c>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013da4:	685a      	ldr	r2, [r3, #4]
 8013da6:	4b06      	ldr	r3, [pc, #24]	; (8013dc0 <prvResetNextTaskUnblockTime+0x30>)
 8013da8:	601a      	str	r2, [r3, #0]
 8013daa:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dac:	2300      	movs	r3, #0
 8013dae:	e7f4      	b.n	8013d9a <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8013db0:	f04f 32ff 	mov.w	r2, #4294967295
 8013db4:	4b02      	ldr	r3, [pc, #8]	; (8013dc0 <prvResetNextTaskUnblockTime+0x30>)
 8013db6:	601a      	str	r2, [r3, #0]
 8013db8:	4770      	bx	lr
 8013dba:	bf00      	nop
 8013dbc:	20003e38 	.word	0x20003e38
 8013dc0:	20003f10 	.word	0x20003f10

08013dc4 <prvDeleteTCB>:
	{
 8013dc4:	b510      	push	{r4, lr}
 8013dc6:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8013dc8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8013dca:	f7ff fb75 	bl	80134b8 <vPortFree>
			vPortFree( pxTCB );
 8013dce:	4620      	mov	r0, r4
 8013dd0:	f7ff fb72 	bl	80134b8 <vPortFree>
 8013dd4:	bd10      	pop	{r4, pc}

08013dd6 <prvInitialiseNewTask>:
{
 8013dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dda:	4680      	mov	r8, r0
 8013ddc:	4699      	mov	r9, r3
 8013dde:	9d08      	ldr	r5, [sp, #32]
 8013de0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013de2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013de4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8013de6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8013dea:	3a01      	subs	r2, #1
 8013dec:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013df0:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013df4:	2300      	movs	r3, #0
 8013df6:	2b0f      	cmp	r3, #15
 8013df8:	d807      	bhi.n	8013e0a <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013dfa:	5cc8      	ldrb	r0, [r1, r3]
 8013dfc:	18e2      	adds	r2, r4, r3
 8013dfe:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8013e02:	5cca      	ldrb	r2, [r1, r3]
 8013e04:	b10a      	cbz	r2, 8013e0a <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013e06:	3301      	adds	r3, #1
 8013e08:	e7f5      	b.n	8013df6 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013e10:	2d06      	cmp	r5, #6
 8013e12:	d900      	bls.n	8013e16 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013e14:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8013e16:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8013e18:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013e1a:	f04f 0a00 	mov.w	sl, #0
 8013e1e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013e22:	1d20      	adds	r0, r4, #4
 8013e24:	f7ff f888 	bl	8012f38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013e28:	f104 0018 	add.w	r0, r4, #24
 8013e2c:	f7ff f884 	bl	8012f38 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013e30:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e32:	f1c5 0507 	rsb	r5, r5, #7
 8013e36:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013e38:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8013e3a:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013e3e:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013e42:	464a      	mov	r2, r9
 8013e44:	4641      	mov	r1, r8
 8013e46:	4630      	mov	r0, r6
 8013e48:	f7ff f8e6 	bl	8013018 <pxPortInitialiseStack>
 8013e4c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8013e4e:	b107      	cbz	r7, 8013e52 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013e50:	603c      	str	r4, [r7, #0]
 8013e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08013e58 <prvInitialiseTaskLists>:
{
 8013e58:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e5a:	2400      	movs	r4, #0
 8013e5c:	e007      	b.n	8013e6e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013e5e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8013e62:	0093      	lsls	r3, r2, #2
 8013e64:	480e      	ldr	r0, [pc, #56]	; (8013ea0 <prvInitialiseTaskLists+0x48>)
 8013e66:	4418      	add	r0, r3
 8013e68:	f7ff f85b 	bl	8012f22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e6c:	3401      	adds	r4, #1
 8013e6e:	2c06      	cmp	r4, #6
 8013e70:	d9f5      	bls.n	8013e5e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8013e72:	4d0c      	ldr	r5, [pc, #48]	; (8013ea4 <prvInitialiseTaskLists+0x4c>)
 8013e74:	4628      	mov	r0, r5
 8013e76:	f7ff f854 	bl	8012f22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013e7a:	4c0b      	ldr	r4, [pc, #44]	; (8013ea8 <prvInitialiseTaskLists+0x50>)
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	f7ff f850 	bl	8012f22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013e82:	480a      	ldr	r0, [pc, #40]	; (8013eac <prvInitialiseTaskLists+0x54>)
 8013e84:	f7ff f84d 	bl	8012f22 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8013e88:	4809      	ldr	r0, [pc, #36]	; (8013eb0 <prvInitialiseTaskLists+0x58>)
 8013e8a:	f7ff f84a 	bl	8012f22 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8013e8e:	4809      	ldr	r0, [pc, #36]	; (8013eb4 <prvInitialiseTaskLists+0x5c>)
 8013e90:	f7ff f847 	bl	8012f22 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8013e94:	4b08      	ldr	r3, [pc, #32]	; (8013eb8 <prvInitialiseTaskLists+0x60>)
 8013e96:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013e98:	4b08      	ldr	r3, [pc, #32]	; (8013ebc <prvInitialiseTaskLists+0x64>)
 8013e9a:	601c      	str	r4, [r3, #0]
 8013e9c:	bd38      	pop	{r3, r4, r5, pc}
 8013e9e:	bf00      	nop
 8013ea0:	20003e40 	.word	0x20003e40
 8013ea4:	20003ee4 	.word	0x20003ee4
 8013ea8:	20003ef8 	.word	0x20003ef8
 8013eac:	20003f18 	.word	0x20003f18
 8013eb0:	20003f44 	.word	0x20003f44
 8013eb4:	20003f30 	.word	0x20003f30
 8013eb8:	20003e38 	.word	0x20003e38
 8013ebc:	20003e3c 	.word	0x20003e3c

08013ec0 <prvAddNewTaskToReadyList>:
{
 8013ec0:	b510      	push	{r4, lr}
 8013ec2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8013ec4:	f7ff f8d6 	bl	8013074 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8013ec8:	4a20      	ldr	r2, [pc, #128]	; (8013f4c <prvAddNewTaskToReadyList+0x8c>)
 8013eca:	6813      	ldr	r3, [r2, #0]
 8013ecc:	3301      	adds	r3, #1
 8013ece:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013ed0:	4b1f      	ldr	r3, [pc, #124]	; (8013f50 <prvAddNewTaskToReadyList+0x90>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d031      	beq.n	8013f3c <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8013ed8:	4b1e      	ldr	r3, [pc, #120]	; (8013f54 <prvAddNewTaskToReadyList+0x94>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	b93b      	cbnz	r3, 8013eee <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013ede:	4b1c      	ldr	r3, [pc, #112]	; (8013f50 <prvAddNewTaskToReadyList+0x90>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ee4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d801      	bhi.n	8013eee <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 8013eea:	4b19      	ldr	r3, [pc, #100]	; (8013f50 <prvAddNewTaskToReadyList+0x90>)
 8013eec:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8013eee:	4a1a      	ldr	r2, [pc, #104]	; (8013f58 <prvAddNewTaskToReadyList+0x98>)
 8013ef0:	6813      	ldr	r3, [r2, #0]
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8013ef6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013ef8:	2201      	movs	r2, #1
 8013efa:	409a      	lsls	r2, r3
 8013efc:	4917      	ldr	r1, [pc, #92]	; (8013f5c <prvAddNewTaskToReadyList+0x9c>)
 8013efe:	6808      	ldr	r0, [r1, #0]
 8013f00:	4302      	orrs	r2, r0
 8013f02:	600a      	str	r2, [r1, #0]
 8013f04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013f08:	009a      	lsls	r2, r3, #2
 8013f0a:	1d21      	adds	r1, r4, #4
 8013f0c:	4814      	ldr	r0, [pc, #80]	; (8013f60 <prvAddNewTaskToReadyList+0xa0>)
 8013f0e:	4410      	add	r0, r2
 8013f10:	f7ff f815 	bl	8012f3e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8013f14:	f7ff f8d0 	bl	80130b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8013f18:	4b0e      	ldr	r3, [pc, #56]	; (8013f54 <prvAddNewTaskToReadyList+0x94>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	b16b      	cbz	r3, 8013f3a <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013f1e:	4b0c      	ldr	r3, [pc, #48]	; (8013f50 <prvAddNewTaskToReadyList+0x90>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d207      	bcs.n	8013f3a <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 8013f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f2e:	4b0d      	ldr	r3, [pc, #52]	; (8013f64 <prvAddNewTaskToReadyList+0xa4>)
 8013f30:	601a      	str	r2, [r3, #0]
 8013f32:	f3bf 8f4f 	dsb	sy
 8013f36:	f3bf 8f6f 	isb	sy
 8013f3a:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8013f3c:	4b04      	ldr	r3, [pc, #16]	; (8013f50 <prvAddNewTaskToReadyList+0x90>)
 8013f3e:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013f40:	6813      	ldr	r3, [r2, #0]
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d1d3      	bne.n	8013eee <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 8013f46:	f7ff ff87 	bl	8013e58 <prvInitialiseTaskLists>
 8013f4a:	e7d0      	b.n	8013eee <prvAddNewTaskToReadyList+0x2e>
 8013f4c:	20003ecc 	.word	0x20003ecc
 8013f50:	20003e34 	.word	0x20003e34
 8013f54:	20003f2c 	.word	0x20003f2c
 8013f58:	20003edc 	.word	0x20003edc
 8013f5c:	20003ee0 	.word	0x20003ee0
 8013f60:	20003e40 	.word	0x20003e40
 8013f64:	e000ed04 	.word	0xe000ed04

08013f68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013f68:	b570      	push	{r4, r5, r6, lr}
 8013f6a:	4604      	mov	r4, r0
 8013f6c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013f6e:	4b1d      	ldr	r3, [pc, #116]	; (8013fe4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8013f70:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f72:	4b1d      	ldr	r3, [pc, #116]	; (8013fe8 <prvAddCurrentTaskToDelayedList+0x80>)
 8013f74:	6818      	ldr	r0, [r3, #0]
 8013f76:	3004      	adds	r0, #4
 8013f78:	f7ff f807 	bl	8012f8a <uxListRemove>
 8013f7c:	b950      	cbnz	r0, 8013f94 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8013f7e:	4b1a      	ldr	r3, [pc, #104]	; (8013fe8 <prvAddCurrentTaskToDelayedList+0x80>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f84:	2301      	movs	r3, #1
 8013f86:	fa03 f202 	lsl.w	r2, r3, r2
 8013f8a:	4918      	ldr	r1, [pc, #96]	; (8013fec <prvAddCurrentTaskToDelayedList+0x84>)
 8013f8c:	680b      	ldr	r3, [r1, #0]
 8013f8e:	ea23 0302 	bic.w	r3, r3, r2
 8013f92:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013f94:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013f98:	d013      	beq.n	8013fc2 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013f9a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013f9c:	4b12      	ldr	r3, [pc, #72]	; (8013fe8 <prvAddCurrentTaskToDelayedList+0x80>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8013fa2:	42a5      	cmp	r5, r4
 8013fa4:	d816      	bhi.n	8013fd4 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013fa6:	4b12      	ldr	r3, [pc, #72]	; (8013ff0 <prvAddCurrentTaskToDelayedList+0x88>)
 8013fa8:	6818      	ldr	r0, [r3, #0]
 8013faa:	4b0f      	ldr	r3, [pc, #60]	; (8013fe8 <prvAddCurrentTaskToDelayedList+0x80>)
 8013fac:	6819      	ldr	r1, [r3, #0]
 8013fae:	3104      	adds	r1, #4
 8013fb0:	f7fe ffd1 	bl	8012f56 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8013fb4:	4b0f      	ldr	r3, [pc, #60]	; (8013ff4 <prvAddCurrentTaskToDelayedList+0x8c>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	429c      	cmp	r4, r3
 8013fba:	d201      	bcs.n	8013fc0 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8013fbc:	4b0d      	ldr	r3, [pc, #52]	; (8013ff4 <prvAddCurrentTaskToDelayedList+0x8c>)
 8013fbe:	601c      	str	r4, [r3, #0]
 8013fc0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013fc2:	2e00      	cmp	r6, #0
 8013fc4:	d0e9      	beq.n	8013f9a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013fc6:	4b08      	ldr	r3, [pc, #32]	; (8013fe8 <prvAddCurrentTaskToDelayedList+0x80>)
 8013fc8:	6819      	ldr	r1, [r3, #0]
 8013fca:	3104      	adds	r1, #4
 8013fcc:	480a      	ldr	r0, [pc, #40]	; (8013ff8 <prvAddCurrentTaskToDelayedList+0x90>)
 8013fce:	f7fe ffb6 	bl	8012f3e <vListInsertEnd>
 8013fd2:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013fd4:	4b09      	ldr	r3, [pc, #36]	; (8013ffc <prvAddCurrentTaskToDelayedList+0x94>)
 8013fd6:	6818      	ldr	r0, [r3, #0]
 8013fd8:	4b03      	ldr	r3, [pc, #12]	; (8013fe8 <prvAddCurrentTaskToDelayedList+0x80>)
 8013fda:	6819      	ldr	r1, [r3, #0]
 8013fdc:	3104      	adds	r1, #4
 8013fde:	f7fe ffba 	bl	8012f56 <vListInsert>
 8013fe2:	bd70      	pop	{r4, r5, r6, pc}
 8013fe4:	20003f58 	.word	0x20003f58
 8013fe8:	20003e34 	.word	0x20003e34
 8013fec:	20003ee0 	.word	0x20003ee0
 8013ff0:	20003e38 	.word	0x20003e38
 8013ff4:	20003f10 	.word	0x20003f10
 8013ff8:	20003f30 	.word	0x20003f30
 8013ffc:	20003e3c 	.word	0x20003e3c

08014000 <xTaskCreate>:
	{
 8014000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014004:	b085      	sub	sp, #20
 8014006:	4606      	mov	r6, r0
 8014008:	460f      	mov	r7, r1
 801400a:	4615      	mov	r5, r2
 801400c:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801400e:	0090      	lsls	r0, r2, #2
 8014010:	f7ff f9ce 	bl	80133b0 <pvPortMalloc>
			if( pxStack != NULL )
 8014014:	b300      	cbz	r0, 8014058 <xTaskCreate+0x58>
 8014016:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8014018:	2054      	movs	r0, #84	; 0x54
 801401a:	f7ff f9c9 	bl	80133b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801401e:	4604      	mov	r4, r0
 8014020:	b1b0      	cbz	r0, 8014050 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8014022:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8014026:	b1cc      	cbz	r4, 801405c <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014028:	2300      	movs	r3, #0
 801402a:	9303      	str	r3, [sp, #12]
 801402c:	9402      	str	r4, [sp, #8]
 801402e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014030:	9301      	str	r3, [sp, #4]
 8014032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014034:	9300      	str	r3, [sp, #0]
 8014036:	4643      	mov	r3, r8
 8014038:	462a      	mov	r2, r5
 801403a:	4639      	mov	r1, r7
 801403c:	4630      	mov	r0, r6
 801403e:	f7ff feca 	bl	8013dd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014042:	4620      	mov	r0, r4
 8014044:	f7ff ff3c 	bl	8013ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014048:	2001      	movs	r0, #1
	}
 801404a:	b005      	add	sp, #20
 801404c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8014050:	4648      	mov	r0, r9
 8014052:	f7ff fa31 	bl	80134b8 <vPortFree>
 8014056:	e7e6      	b.n	8014026 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8014058:	2400      	movs	r4, #0
 801405a:	e7e4      	b.n	8014026 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801405c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8014060:	e7f3      	b.n	801404a <xTaskCreate+0x4a>
	...

08014064 <vTaskStartScheduler>:
{
 8014064:	b500      	push	{lr}
 8014066:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8014068:	4b17      	ldr	r3, [pc, #92]	; (80140c8 <vTaskStartScheduler+0x64>)
 801406a:	9301      	str	r3, [sp, #4]
 801406c:	2300      	movs	r3, #0
 801406e:	9300      	str	r3, [sp, #0]
 8014070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014074:	4915      	ldr	r1, [pc, #84]	; (80140cc <vTaskStartScheduler+0x68>)
 8014076:	4816      	ldr	r0, [pc, #88]	; (80140d0 <vTaskStartScheduler+0x6c>)
 8014078:	f7ff ffc2 	bl	8014000 <xTaskCreate>
	if( xReturn == pdPASS )
 801407c:	2801      	cmp	r0, #1
 801407e:	d005      	beq.n	801408c <vTaskStartScheduler+0x28>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014080:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014084:	d017      	beq.n	80140b6 <vTaskStartScheduler+0x52>
}
 8014086:	b003      	add	sp, #12
 8014088:	f85d fb04 	ldr.w	pc, [sp], #4
 801408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014090:	f383 8811 	msr	BASEPRI, r3
 8014094:	f3bf 8f6f 	isb	sy
 8014098:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 801409c:	f04f 32ff 	mov.w	r2, #4294967295
 80140a0:	4b0c      	ldr	r3, [pc, #48]	; (80140d4 <vTaskStartScheduler+0x70>)
 80140a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80140a4:	2201      	movs	r2, #1
 80140a6:	4b0c      	ldr	r3, [pc, #48]	; (80140d8 <vTaskStartScheduler+0x74>)
 80140a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80140aa:	2200      	movs	r2, #0
 80140ac:	4b0b      	ldr	r3, [pc, #44]	; (80140dc <vTaskStartScheduler+0x78>)
 80140ae:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80140b0:	f7ff f87c 	bl	80131ac <xPortStartScheduler>
 80140b4:	e7e7      	b.n	8014086 <vTaskStartScheduler+0x22>
 80140b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ba:	f383 8811 	msr	BASEPRI, r3
 80140be:	f3bf 8f6f 	isb	sy
 80140c2:	f3bf 8f4f 	dsb	sy
 80140c6:	e7fe      	b.n	80140c6 <vTaskStartScheduler+0x62>
 80140c8:	20003f0c 	.word	0x20003f0c
 80140cc:	0801e89c 	.word	0x0801e89c
 80140d0:	080143d5 	.word	0x080143d5
 80140d4:	20003f10 	.word	0x20003f10
 80140d8:	20003f2c 	.word	0x20003f2c
 80140dc:	20003f58 	.word	0x20003f58

080140e0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80140e0:	4a02      	ldr	r2, [pc, #8]	; (80140ec <vTaskSuspendAll+0xc>)
 80140e2:	6813      	ldr	r3, [r2, #0]
 80140e4:	3301      	adds	r3, #1
 80140e6:	6013      	str	r3, [r2, #0]
 80140e8:	4770      	bx	lr
 80140ea:	bf00      	nop
 80140ec:	20003ed8 	.word	0x20003ed8

080140f0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80140f0:	4b01      	ldr	r3, [pc, #4]	; (80140f8 <xTaskGetTickCount+0x8>)
 80140f2:	6818      	ldr	r0, [r3, #0]
}
 80140f4:	4770      	bx	lr
 80140f6:	bf00      	nop
 80140f8:	20003f58 	.word	0x20003f58

080140fc <xTaskGetTickCountFromISR>:
{
 80140fc:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80140fe:	f7ff f8cb 	bl	8013298 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8014102:	4b01      	ldr	r3, [pc, #4]	; (8014108 <xTaskGetTickCountFromISR+0xc>)
 8014104:	6818      	ldr	r0, [r3, #0]
}
 8014106:	bd08      	pop	{r3, pc}
 8014108:	20003f58 	.word	0x20003f58

0801410c <xTaskIncrementTick>:
{
 801410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801410e:	4b3c      	ldr	r3, [pc, #240]	; (8014200 <xTaskIncrementTick+0xf4>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d168      	bne.n	80141e8 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + 1;
 8014116:	4b3b      	ldr	r3, [pc, #236]	; (8014204 <xTaskIncrementTick+0xf8>)
 8014118:	681d      	ldr	r5, [r3, #0]
 801411a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 801411c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 801411e:	b9c5      	cbnz	r5, 8014152 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8014120:	4b39      	ldr	r3, [pc, #228]	; (8014208 <xTaskIncrementTick+0xfc>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	b143      	cbz	r3, 801413a <xTaskIncrementTick+0x2e>
 8014128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801412c:	f383 8811 	msr	BASEPRI, r3
 8014130:	f3bf 8f6f 	isb	sy
 8014134:	f3bf 8f4f 	dsb	sy
 8014138:	e7fe      	b.n	8014138 <xTaskIncrementTick+0x2c>
 801413a:	4a33      	ldr	r2, [pc, #204]	; (8014208 <xTaskIncrementTick+0xfc>)
 801413c:	6811      	ldr	r1, [r2, #0]
 801413e:	4b33      	ldr	r3, [pc, #204]	; (801420c <xTaskIncrementTick+0x100>)
 8014140:	6818      	ldr	r0, [r3, #0]
 8014142:	6010      	str	r0, [r2, #0]
 8014144:	6019      	str	r1, [r3, #0]
 8014146:	4a32      	ldr	r2, [pc, #200]	; (8014210 <xTaskIncrementTick+0x104>)
 8014148:	6813      	ldr	r3, [r2, #0]
 801414a:	3301      	adds	r3, #1
 801414c:	6013      	str	r3, [r2, #0]
 801414e:	f7ff fe1f 	bl	8013d90 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014152:	4b30      	ldr	r3, [pc, #192]	; (8014214 <xTaskIncrementTick+0x108>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	429d      	cmp	r5, r3
 8014158:	d23a      	bcs.n	80141d0 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 801415a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801415c:	4b2e      	ldr	r3, [pc, #184]	; (8014218 <xTaskIncrementTick+0x10c>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014162:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014166:	009a      	lsls	r2, r3, #2
 8014168:	4b2c      	ldr	r3, [pc, #176]	; (801421c <xTaskIncrementTick+0x110>)
 801416a:	589b      	ldr	r3, [r3, r2]
 801416c:	2b01      	cmp	r3, #1
 801416e:	d940      	bls.n	80141f2 <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8014170:	2401      	movs	r4, #1
 8014172:	e03e      	b.n	80141f2 <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 8014174:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014176:	4b24      	ldr	r3, [pc, #144]	; (8014208 <xTaskIncrementTick+0xfc>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	b353      	cbz	r3, 80141d4 <xTaskIncrementTick+0xc8>
 801417e:	2300      	movs	r3, #0
 8014180:	bb53      	cbnz	r3, 80141d8 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014182:	4b21      	ldr	r3, [pc, #132]	; (8014208 <xTaskIncrementTick+0xfc>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	68db      	ldr	r3, [r3, #12]
 8014188:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801418a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 801418c:	429d      	cmp	r5, r3
 801418e:	d328      	bcc.n	80141e2 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014190:	1d37      	adds	r7, r6, #4
 8014192:	4638      	mov	r0, r7
 8014194:	f7fe fef9 	bl	8012f8a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014198:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 801419a:	b11b      	cbz	r3, 80141a4 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801419c:	f106 0018 	add.w	r0, r6, #24
 80141a0:	f7fe fef3 	bl	8012f8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80141a4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80141a6:	2201      	movs	r2, #1
 80141a8:	409a      	lsls	r2, r3
 80141aa:	491d      	ldr	r1, [pc, #116]	; (8014220 <xTaskIncrementTick+0x114>)
 80141ac:	6808      	ldr	r0, [r1, #0]
 80141ae:	4302      	orrs	r2, r0
 80141b0:	600a      	str	r2, [r1, #0]
 80141b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80141b6:	009a      	lsls	r2, r3, #2
 80141b8:	4639      	mov	r1, r7
 80141ba:	4818      	ldr	r0, [pc, #96]	; (801421c <xTaskIncrementTick+0x110>)
 80141bc:	4410      	add	r0, r2
 80141be:	f7fe febe 	bl	8012f3e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80141c2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80141c4:	4b14      	ldr	r3, [pc, #80]	; (8014218 <xTaskIncrementTick+0x10c>)
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d2d2      	bcs.n	8014174 <xTaskIncrementTick+0x68>
 80141ce:	e7d2      	b.n	8014176 <xTaskIncrementTick+0x6a>
 80141d0:	2400      	movs	r4, #0
 80141d2:	e7d0      	b.n	8014176 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80141d4:	2301      	movs	r3, #1
 80141d6:	e7d3      	b.n	8014180 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141d8:	f04f 32ff 	mov.w	r2, #4294967295
 80141dc:	4b0d      	ldr	r3, [pc, #52]	; (8014214 <xTaskIncrementTick+0x108>)
 80141de:	601a      	str	r2, [r3, #0]
					break;
 80141e0:	e7bc      	b.n	801415c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80141e2:	4a0c      	ldr	r2, [pc, #48]	; (8014214 <xTaskIncrementTick+0x108>)
 80141e4:	6013      	str	r3, [r2, #0]
						break;
 80141e6:	e7b9      	b.n	801415c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80141e8:	4a0e      	ldr	r2, [pc, #56]	; (8014224 <xTaskIncrementTick+0x118>)
 80141ea:	6813      	ldr	r3, [r2, #0]
 80141ec:	3301      	adds	r3, #1
 80141ee:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80141f0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80141f2:	4b0d      	ldr	r3, [pc, #52]	; (8014228 <xTaskIncrementTick+0x11c>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	b103      	cbz	r3, 80141fa <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 80141f8:	2401      	movs	r4, #1
}
 80141fa:	4620      	mov	r0, r4
 80141fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141fe:	bf00      	nop
 8014200:	20003ed8 	.word	0x20003ed8
 8014204:	20003f58 	.word	0x20003f58
 8014208:	20003e38 	.word	0x20003e38
 801420c:	20003e3c 	.word	0x20003e3c
 8014210:	20003f14 	.word	0x20003f14
 8014214:	20003f10 	.word	0x20003f10
 8014218:	20003e34 	.word	0x20003e34
 801421c:	20003e40 	.word	0x20003e40
 8014220:	20003ee0 	.word	0x20003ee0
 8014224:	20003ed4 	.word	0x20003ed4
 8014228:	20003f5c 	.word	0x20003f5c

0801422c <xTaskResumeAll>:
{
 801422c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 801422e:	4b35      	ldr	r3, [pc, #212]	; (8014304 <xTaskResumeAll+0xd8>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	b943      	cbnz	r3, 8014246 <xTaskResumeAll+0x1a>
 8014234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014238:	f383 8811 	msr	BASEPRI, r3
 801423c:	f3bf 8f6f 	isb	sy
 8014240:	f3bf 8f4f 	dsb	sy
 8014244:	e7fe      	b.n	8014244 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8014246:	f7fe ff15 	bl	8013074 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801424a:	4b2e      	ldr	r3, [pc, #184]	; (8014304 <xTaskResumeAll+0xd8>)
 801424c:	681a      	ldr	r2, [r3, #0]
 801424e:	3a01      	subs	r2, #1
 8014250:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d150      	bne.n	80142fa <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014258:	4b2b      	ldr	r3, [pc, #172]	; (8014308 <xTaskResumeAll+0xdc>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	b923      	cbnz	r3, 8014268 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 801425e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8014260:	f7fe ff2a 	bl	80130b8 <vPortExitCritical>
}
 8014264:	4620      	mov	r0, r4
 8014266:	bd38      	pop	{r3, r4, r5, pc}
 8014268:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801426a:	4b28      	ldr	r3, [pc, #160]	; (801430c <xTaskResumeAll+0xe0>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	b31b      	cbz	r3, 80142b8 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8014270:	4b26      	ldr	r3, [pc, #152]	; (801430c <xTaskResumeAll+0xe0>)
 8014272:	68db      	ldr	r3, [r3, #12]
 8014274:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014276:	f104 0018 	add.w	r0, r4, #24
 801427a:	f7fe fe86 	bl	8012f8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801427e:	1d25      	adds	r5, r4, #4
 8014280:	4628      	mov	r0, r5
 8014282:	f7fe fe82 	bl	8012f8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014286:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014288:	2201      	movs	r2, #1
 801428a:	409a      	lsls	r2, r3
 801428c:	4920      	ldr	r1, [pc, #128]	; (8014310 <xTaskResumeAll+0xe4>)
 801428e:	6808      	ldr	r0, [r1, #0]
 8014290:	4302      	orrs	r2, r0
 8014292:	600a      	str	r2, [r1, #0]
 8014294:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014298:	009a      	lsls	r2, r3, #2
 801429a:	4629      	mov	r1, r5
 801429c:	481d      	ldr	r0, [pc, #116]	; (8014314 <xTaskResumeAll+0xe8>)
 801429e:	4410      	add	r0, r2
 80142a0:	f7fe fe4d 	bl	8012f3e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80142a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80142a6:	4b1c      	ldr	r3, [pc, #112]	; (8014318 <xTaskResumeAll+0xec>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d3dc      	bcc.n	801426a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80142b0:	2201      	movs	r2, #1
 80142b2:	4b1a      	ldr	r3, [pc, #104]	; (801431c <xTaskResumeAll+0xf0>)
 80142b4:	601a      	str	r2, [r3, #0]
 80142b6:	e7d8      	b.n	801426a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 80142b8:	b10c      	cbz	r4, 80142be <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80142ba:	f7ff fd69 	bl	8013d90 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80142be:	4b18      	ldr	r3, [pc, #96]	; (8014320 <xTaskResumeAll+0xf4>)
 80142c0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80142c2:	b974      	cbnz	r4, 80142e2 <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 80142c4:	4b15      	ldr	r3, [pc, #84]	; (801431c <xTaskResumeAll+0xf0>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	b1cb      	cbz	r3, 80142fe <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 80142ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142ce:	4b15      	ldr	r3, [pc, #84]	; (8014324 <xTaskResumeAll+0xf8>)
 80142d0:	601a      	str	r2, [r3, #0]
 80142d2:	f3bf 8f4f 	dsb	sy
 80142d6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80142da:	2401      	movs	r4, #1
 80142dc:	e7c0      	b.n	8014260 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80142de:	3c01      	subs	r4, #1
 80142e0:	d007      	beq.n	80142f2 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 80142e2:	f7ff ff13 	bl	801410c <xTaskIncrementTick>
 80142e6:	2800      	cmp	r0, #0
 80142e8:	d0f9      	beq.n	80142de <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 80142ea:	2201      	movs	r2, #1
 80142ec:	4b0b      	ldr	r3, [pc, #44]	; (801431c <xTaskResumeAll+0xf0>)
 80142ee:	601a      	str	r2, [r3, #0]
 80142f0:	e7f5      	b.n	80142de <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 80142f2:	2200      	movs	r2, #0
 80142f4:	4b0a      	ldr	r3, [pc, #40]	; (8014320 <xTaskResumeAll+0xf4>)
 80142f6:	601a      	str	r2, [r3, #0]
 80142f8:	e7e4      	b.n	80142c4 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 80142fa:	2400      	movs	r4, #0
 80142fc:	e7b0      	b.n	8014260 <xTaskResumeAll+0x34>
 80142fe:	2400      	movs	r4, #0
 8014300:	e7ae      	b.n	8014260 <xTaskResumeAll+0x34>
 8014302:	bf00      	nop
 8014304:	20003ed8 	.word	0x20003ed8
 8014308:	20003ecc 	.word	0x20003ecc
 801430c:	20003f18 	.word	0x20003f18
 8014310:	20003ee0 	.word	0x20003ee0
 8014314:	20003e40 	.word	0x20003e40
 8014318:	20003e34 	.word	0x20003e34
 801431c:	20003f5c 	.word	0x20003f5c
 8014320:	20003ed4 	.word	0x20003ed4
 8014324:	e000ed04 	.word	0xe000ed04

08014328 <vTaskDelay>:
	{
 8014328:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801432a:	b1a8      	cbz	r0, 8014358 <vTaskDelay+0x30>
 801432c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 801432e:	4b10      	ldr	r3, [pc, #64]	; (8014370 <vTaskDelay+0x48>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	b143      	cbz	r3, 8014346 <vTaskDelay+0x1e>
 8014334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014338:	f383 8811 	msr	BASEPRI, r3
 801433c:	f3bf 8f6f 	isb	sy
 8014340:	f3bf 8f4f 	dsb	sy
 8014344:	e7fe      	b.n	8014344 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8014346:	f7ff fecb 	bl	80140e0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801434a:	2100      	movs	r1, #0
 801434c:	4620      	mov	r0, r4
 801434e:	f7ff fe0b 	bl	8013f68 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8014352:	f7ff ff6b 	bl	801422c <xTaskResumeAll>
 8014356:	e000      	b.n	801435a <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8014358:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 801435a:	b938      	cbnz	r0, 801436c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 801435c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014360:	4b04      	ldr	r3, [pc, #16]	; (8014374 <vTaskDelay+0x4c>)
 8014362:	601a      	str	r2, [r3, #0]
 8014364:	f3bf 8f4f 	dsb	sy
 8014368:	f3bf 8f6f 	isb	sy
 801436c:	bd10      	pop	{r4, pc}
 801436e:	bf00      	nop
 8014370:	20003ed8 	.word	0x20003ed8
 8014374:	e000ed04 	.word	0xe000ed04

08014378 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014378:	4b13      	ldr	r3, [pc, #76]	; (80143c8 <prvCheckTasksWaitingTermination+0x50>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	b313      	cbz	r3, 80143c4 <prvCheckTasksWaitingTermination+0x4c>
{
 801437e:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8014380:	f7ff feae 	bl	80140e0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8014384:	4b11      	ldr	r3, [pc, #68]	; (80143cc <prvCheckTasksWaitingTermination+0x54>)
 8014386:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8014388:	f7ff ff50 	bl	801422c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 801438c:	b924      	cbnz	r4, 8014398 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801438e:	4b0e      	ldr	r3, [pc, #56]	; (80143c8 <prvCheckTasksWaitingTermination+0x50>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d1f4      	bne.n	8014380 <prvCheckTasksWaitingTermination+0x8>
}
 8014396:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8014398:	f7fe fe6c 	bl	8013074 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801439c:	4b0b      	ldr	r3, [pc, #44]	; (80143cc <prvCheckTasksWaitingTermination+0x54>)
 801439e:	68db      	ldr	r3, [r3, #12]
 80143a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143a2:	1d20      	adds	r0, r4, #4
 80143a4:	f7fe fdf1 	bl	8012f8a <uxListRemove>
					--uxCurrentNumberOfTasks;
 80143a8:	4a09      	ldr	r2, [pc, #36]	; (80143d0 <prvCheckTasksWaitingTermination+0x58>)
 80143aa:	6813      	ldr	r3, [r2, #0]
 80143ac:	3b01      	subs	r3, #1
 80143ae:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80143b0:	4a05      	ldr	r2, [pc, #20]	; (80143c8 <prvCheckTasksWaitingTermination+0x50>)
 80143b2:	6813      	ldr	r3, [r2, #0]
 80143b4:	3b01      	subs	r3, #1
 80143b6:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 80143b8:	f7fe fe7e 	bl	80130b8 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 80143bc:	4620      	mov	r0, r4
 80143be:	f7ff fd01 	bl	8013dc4 <prvDeleteTCB>
 80143c2:	e7e4      	b.n	801438e <prvCheckTasksWaitingTermination+0x16>
 80143c4:	4770      	bx	lr
 80143c6:	bf00      	nop
 80143c8:	20003ed0 	.word	0x20003ed0
 80143cc:	20003f44 	.word	0x20003f44
 80143d0:	20003ecc 	.word	0x20003ecc

080143d4 <prvIdleTask>:
{
 80143d4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80143d6:	f7ff ffcf 	bl	8014378 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80143da:	4b06      	ldr	r3, [pc, #24]	; (80143f4 <prvIdleTask+0x20>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	2b01      	cmp	r3, #1
 80143e0:	d9f9      	bls.n	80143d6 <prvIdleTask+0x2>
				taskYIELD();
 80143e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143e6:	4b04      	ldr	r3, [pc, #16]	; (80143f8 <prvIdleTask+0x24>)
 80143e8:	601a      	str	r2, [r3, #0]
 80143ea:	f3bf 8f4f 	dsb	sy
 80143ee:	f3bf 8f6f 	isb	sy
 80143f2:	e7f0      	b.n	80143d6 <prvIdleTask+0x2>
 80143f4:	20003e40 	.word	0x20003e40
 80143f8:	e000ed04 	.word	0xe000ed04

080143fc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80143fc:	4b21      	ldr	r3, [pc, #132]	; (8014484 <vTaskSwitchContext+0x88>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	b9c3      	cbnz	r3, 8014434 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 8014402:	2200      	movs	r2, #0
 8014404:	4b20      	ldr	r3, [pc, #128]	; (8014488 <vTaskSwitchContext+0x8c>)
 8014406:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8014408:	4b20      	ldr	r3, [pc, #128]	; (801448c <vTaskSwitchContext+0x90>)
 801440a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 801440c:	fab3 f383 	clz	r3, r3
 8014410:	b2db      	uxtb	r3, r3
 8014412:	f1c3 031f 	rsb	r3, r3, #31
 8014416:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801441a:	008a      	lsls	r2, r1, #2
 801441c:	491c      	ldr	r1, [pc, #112]	; (8014490 <vTaskSwitchContext+0x94>)
 801441e:	588a      	ldr	r2, [r1, r2]
 8014420:	b962      	cbnz	r2, 801443c <vTaskSwitchContext+0x40>
	__asm volatile
 8014422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014426:	f383 8811 	msr	BASEPRI, r3
 801442a:	f3bf 8f6f 	isb	sy
 801442e:	f3bf 8f4f 	dsb	sy
 8014432:	e7fe      	b.n	8014432 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 8014434:	2201      	movs	r2, #1
 8014436:	4b14      	ldr	r3, [pc, #80]	; (8014488 <vTaskSwitchContext+0x8c>)
 8014438:	601a      	str	r2, [r3, #0]
 801443a:	4770      	bx	lr
{
 801443c:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801443e:	4814      	ldr	r0, [pc, #80]	; (8014490 <vTaskSwitchContext+0x94>)
 8014440:	009a      	lsls	r2, r3, #2
 8014442:	18d4      	adds	r4, r2, r3
 8014444:	00a1      	lsls	r1, r4, #2
 8014446:	4401      	add	r1, r0
 8014448:	684c      	ldr	r4, [r1, #4]
 801444a:	6864      	ldr	r4, [r4, #4]
 801444c:	604c      	str	r4, [r1, #4]
 801444e:	441a      	add	r2, r3
 8014450:	0091      	lsls	r1, r2, #2
 8014452:	3108      	adds	r1, #8
 8014454:	4408      	add	r0, r1
 8014456:	4284      	cmp	r4, r0
 8014458:	d00b      	beq.n	8014472 <vTaskSwitchContext+0x76>
 801445a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801445e:	009a      	lsls	r2, r3, #2
 8014460:	4b0b      	ldr	r3, [pc, #44]	; (8014490 <vTaskSwitchContext+0x94>)
 8014462:	4413      	add	r3, r2
 8014464:	685b      	ldr	r3, [r3, #4]
 8014466:	68da      	ldr	r2, [r3, #12]
 8014468:	4b0a      	ldr	r3, [pc, #40]	; (8014494 <vTaskSwitchContext+0x98>)
 801446a:	601a      	str	r2, [r3, #0]
}
 801446c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014470:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8014472:	6860      	ldr	r0, [r4, #4]
 8014474:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014478:	0091      	lsls	r1, r2, #2
 801447a:	4a05      	ldr	r2, [pc, #20]	; (8014490 <vTaskSwitchContext+0x94>)
 801447c:	440a      	add	r2, r1
 801447e:	6050      	str	r0, [r2, #4]
 8014480:	e7eb      	b.n	801445a <vTaskSwitchContext+0x5e>
 8014482:	bf00      	nop
 8014484:	20003ed8 	.word	0x20003ed8
 8014488:	20003f5c 	.word	0x20003f5c
 801448c:	20003ee0 	.word	0x20003ee0
 8014490:	20003e40 	.word	0x20003e40
 8014494:	20003e34 	.word	0x20003e34

08014498 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8014498:	b940      	cbnz	r0, 80144ac <vTaskPlaceOnEventList+0x14>
 801449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801449e:	f383 8811 	msr	BASEPRI, r3
 80144a2:	f3bf 8f6f 	isb	sy
 80144a6:	f3bf 8f4f 	dsb	sy
 80144aa:	e7fe      	b.n	80144aa <vTaskPlaceOnEventList+0x12>
{
 80144ac:	b510      	push	{r4, lr}
 80144ae:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80144b0:	4b04      	ldr	r3, [pc, #16]	; (80144c4 <vTaskPlaceOnEventList+0x2c>)
 80144b2:	6819      	ldr	r1, [r3, #0]
 80144b4:	3118      	adds	r1, #24
 80144b6:	f7fe fd4e 	bl	8012f56 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80144ba:	2101      	movs	r1, #1
 80144bc:	4620      	mov	r0, r4
 80144be:	f7ff fd53 	bl	8013f68 <prvAddCurrentTaskToDelayedList>
 80144c2:	bd10      	pop	{r4, pc}
 80144c4:	20003e34 	.word	0x20003e34

080144c8 <xTaskRemoveFromEventList>:
{
 80144c8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80144ca:	68c3      	ldr	r3, [r0, #12]
 80144cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80144ce:	b324      	cbz	r4, 801451a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80144d0:	f104 0518 	add.w	r5, r4, #24
 80144d4:	4628      	mov	r0, r5
 80144d6:	f7fe fd58 	bl	8012f8a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144da:	4b18      	ldr	r3, [pc, #96]	; (801453c <xTaskRemoveFromEventList+0x74>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	bb2b      	cbnz	r3, 801452c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80144e0:	1d25      	adds	r5, r4, #4
 80144e2:	4628      	mov	r0, r5
 80144e4:	f7fe fd51 	bl	8012f8a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80144e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80144ea:	2201      	movs	r2, #1
 80144ec:	409a      	lsls	r2, r3
 80144ee:	4914      	ldr	r1, [pc, #80]	; (8014540 <xTaskRemoveFromEventList+0x78>)
 80144f0:	6808      	ldr	r0, [r1, #0]
 80144f2:	4302      	orrs	r2, r0
 80144f4:	600a      	str	r2, [r1, #0]
 80144f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80144fa:	009a      	lsls	r2, r3, #2
 80144fc:	4629      	mov	r1, r5
 80144fe:	4811      	ldr	r0, [pc, #68]	; (8014544 <xTaskRemoveFromEventList+0x7c>)
 8014500:	4410      	add	r0, r2
 8014502:	f7fe fd1c 	bl	8012f3e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014506:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014508:	4b0f      	ldr	r3, [pc, #60]	; (8014548 <xTaskRemoveFromEventList+0x80>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801450e:	429a      	cmp	r2, r3
 8014510:	d911      	bls.n	8014536 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8014512:	2001      	movs	r0, #1
 8014514:	4b0d      	ldr	r3, [pc, #52]	; (801454c <xTaskRemoveFromEventList+0x84>)
 8014516:	6018      	str	r0, [r3, #0]
 8014518:	bd38      	pop	{r3, r4, r5, pc}
 801451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801451e:	f383 8811 	msr	BASEPRI, r3
 8014522:	f3bf 8f6f 	isb	sy
 8014526:	f3bf 8f4f 	dsb	sy
 801452a:	e7fe      	b.n	801452a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801452c:	4629      	mov	r1, r5
 801452e:	4808      	ldr	r0, [pc, #32]	; (8014550 <xTaskRemoveFromEventList+0x88>)
 8014530:	f7fe fd05 	bl	8012f3e <vListInsertEnd>
 8014534:	e7e7      	b.n	8014506 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8014536:	2000      	movs	r0, #0
}
 8014538:	bd38      	pop	{r3, r4, r5, pc}
 801453a:	bf00      	nop
 801453c:	20003ed8 	.word	0x20003ed8
 8014540:	20003ee0 	.word	0x20003ee0
 8014544:	20003e40 	.word	0x20003e40
 8014548:	20003e34 	.word	0x20003e34
 801454c:	20003f5c 	.word	0x20003f5c
 8014550:	20003f18 	.word	0x20003f18

08014554 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8014554:	b130      	cbz	r0, 8014564 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014556:	4a08      	ldr	r2, [pc, #32]	; (8014578 <vTaskSetTimeOutState+0x24>)
 8014558:	6812      	ldr	r2, [r2, #0]
 801455a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801455c:	4a07      	ldr	r2, [pc, #28]	; (801457c <vTaskSetTimeOutState+0x28>)
 801455e:	6812      	ldr	r2, [r2, #0]
 8014560:	6042      	str	r2, [r0, #4]
 8014562:	4770      	bx	lr
 8014564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014568:	f383 8811 	msr	BASEPRI, r3
 801456c:	f3bf 8f6f 	isb	sy
 8014570:	f3bf 8f4f 	dsb	sy
 8014574:	e7fe      	b.n	8014574 <vTaskSetTimeOutState+0x20>
 8014576:	bf00      	nop
 8014578:	20003f14 	.word	0x20003f14
 801457c:	20003f58 	.word	0x20003f58

08014580 <xTaskCheckForTimeOut>:
{
 8014580:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8014582:	b1c0      	cbz	r0, 80145b6 <xTaskCheckForTimeOut+0x36>
 8014584:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8014586:	b1f9      	cbz	r1, 80145c8 <xTaskCheckForTimeOut+0x48>
 8014588:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 801458a:	f7fe fd73 	bl	8013074 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801458e:	4b1a      	ldr	r3, [pc, #104]	; (80145f8 <xTaskCheckForTimeOut+0x78>)
 8014590:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8014592:	682b      	ldr	r3, [r5, #0]
 8014594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014598:	d02a      	beq.n	80145f0 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801459a:	6820      	ldr	r0, [r4, #0]
 801459c:	4a17      	ldr	r2, [pc, #92]	; (80145fc <xTaskCheckForTimeOut+0x7c>)
 801459e:	6812      	ldr	r2, [r2, #0]
 80145a0:	4290      	cmp	r0, r2
 80145a2:	d002      	beq.n	80145aa <xTaskCheckForTimeOut+0x2a>
 80145a4:	6862      	ldr	r2, [r4, #4]
 80145a6:	4291      	cmp	r1, r2
 80145a8:	d224      	bcs.n	80145f4 <xTaskCheckForTimeOut+0x74>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80145aa:	6862      	ldr	r2, [r4, #4]
 80145ac:	1a88      	subs	r0, r1, r2
 80145ae:	4283      	cmp	r3, r0
 80145b0:	d813      	bhi.n	80145da <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 80145b2:	2401      	movs	r4, #1
 80145b4:	e018      	b.n	80145e8 <xTaskCheckForTimeOut+0x68>
 80145b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ba:	f383 8811 	msr	BASEPRI, r3
 80145be:	f3bf 8f6f 	isb	sy
 80145c2:	f3bf 8f4f 	dsb	sy
 80145c6:	e7fe      	b.n	80145c6 <xTaskCheckForTimeOut+0x46>
 80145c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145cc:	f383 8811 	msr	BASEPRI, r3
 80145d0:	f3bf 8f6f 	isb	sy
 80145d4:	f3bf 8f4f 	dsb	sy
 80145d8:	e7fe      	b.n	80145d8 <xTaskCheckForTimeOut+0x58>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80145da:	1a52      	subs	r2, r2, r1
 80145dc:	4413      	add	r3, r2
 80145de:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80145e0:	4620      	mov	r0, r4
 80145e2:	f7ff ffb7 	bl	8014554 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80145e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80145e8:	f7fe fd66 	bl	80130b8 <vPortExitCritical>
}
 80145ec:	4620      	mov	r0, r4
 80145ee:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 80145f0:	2400      	movs	r4, #0
 80145f2:	e7f9      	b.n	80145e8 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 80145f4:	2401      	movs	r4, #1
 80145f6:	e7f7      	b.n	80145e8 <xTaskCheckForTimeOut+0x68>
 80145f8:	20003f58 	.word	0x20003f58
 80145fc:	20003f14 	.word	0x20003f14

08014600 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8014600:	2201      	movs	r2, #1
 8014602:	4b01      	ldr	r3, [pc, #4]	; (8014608 <vTaskMissedYield+0x8>)
 8014604:	601a      	str	r2, [r3, #0]
 8014606:	4770      	bx	lr
 8014608:	20003f5c 	.word	0x20003f5c

0801460c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801460c:	4b05      	ldr	r3, [pc, #20]	; (8014624 <xTaskGetSchedulerState+0x18>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	b123      	cbz	r3, 801461c <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014612:	4b05      	ldr	r3, [pc, #20]	; (8014628 <xTaskGetSchedulerState+0x1c>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	b91b      	cbnz	r3, 8014620 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8014618:	2002      	movs	r0, #2
 801461a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801461c:	2001      	movs	r0, #1
 801461e:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8014620:	2000      	movs	r0, #0
	}
 8014622:	4770      	bx	lr
 8014624:	20003f2c 	.word	0x20003f2c
 8014628:	20003ed8 	.word	0x20003ed8

0801462c <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 801462c:	2800      	cmp	r0, #0
 801462e:	d047      	beq.n	80146c0 <vTaskPriorityInherit+0x94>
	{
 8014630:	b538      	push	{r3, r4, r5, lr}
 8014632:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014634:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014636:	4923      	ldr	r1, [pc, #140]	; (80146c4 <vTaskPriorityInherit+0x98>)
 8014638:	6809      	ldr	r1, [r1, #0]
 801463a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801463c:	428b      	cmp	r3, r1
 801463e:	d216      	bcs.n	801466e <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014640:	6981      	ldr	r1, [r0, #24]
 8014642:	2900      	cmp	r1, #0
 8014644:	db05      	blt.n	8014652 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014646:	491f      	ldr	r1, [pc, #124]	; (80146c4 <vTaskPriorityInherit+0x98>)
 8014648:	6809      	ldr	r1, [r1, #0]
 801464a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801464c:	f1c1 0107 	rsb	r1, r1, #7
 8014650:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014652:	6960      	ldr	r0, [r4, #20]
 8014654:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014658:	0099      	lsls	r1, r3, #2
 801465a:	4b1b      	ldr	r3, [pc, #108]	; (80146c8 <vTaskPriorityInherit+0x9c>)
 801465c:	440b      	add	r3, r1
 801465e:	4298      	cmp	r0, r3
 8014660:	d006      	beq.n	8014670 <vTaskPriorityInherit+0x44>
 8014662:	2300      	movs	r3, #0
 8014664:	b933      	cbnz	r3, 8014674 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014666:	4b17      	ldr	r3, [pc, #92]	; (80146c4 <vTaskPriorityInherit+0x98>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801466c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801466e:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014670:	2301      	movs	r3, #1
 8014672:	e7f7      	b.n	8014664 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014674:	1d25      	adds	r5, r4, #4
 8014676:	4628      	mov	r0, r5
 8014678:	f7fe fc87 	bl	8012f8a <uxListRemove>
 801467c:	b968      	cbnz	r0, 801469a <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801467e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014680:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8014684:	008a      	lsls	r2, r1, #2
 8014686:	4910      	ldr	r1, [pc, #64]	; (80146c8 <vTaskPriorityInherit+0x9c>)
 8014688:	588a      	ldr	r2, [r1, r2]
 801468a:	b932      	cbnz	r2, 801469a <vTaskPriorityInherit+0x6e>
 801468c:	2201      	movs	r2, #1
 801468e:	409a      	lsls	r2, r3
 8014690:	490e      	ldr	r1, [pc, #56]	; (80146cc <vTaskPriorityInherit+0xa0>)
 8014692:	680b      	ldr	r3, [r1, #0]
 8014694:	ea23 0302 	bic.w	r3, r3, r2
 8014698:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801469a:	4b0a      	ldr	r3, [pc, #40]	; (80146c4 <vTaskPriorityInherit+0x98>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146a0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80146a2:	2201      	movs	r2, #1
 80146a4:	409a      	lsls	r2, r3
 80146a6:	4909      	ldr	r1, [pc, #36]	; (80146cc <vTaskPriorityInherit+0xa0>)
 80146a8:	6808      	ldr	r0, [r1, #0]
 80146aa:	4302      	orrs	r2, r0
 80146ac:	600a      	str	r2, [r1, #0]
 80146ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80146b2:	009a      	lsls	r2, r3, #2
 80146b4:	4629      	mov	r1, r5
 80146b6:	4804      	ldr	r0, [pc, #16]	; (80146c8 <vTaskPriorityInherit+0x9c>)
 80146b8:	4410      	add	r0, r2
 80146ba:	f7fe fc40 	bl	8012f3e <vListInsertEnd>
 80146be:	bd38      	pop	{r3, r4, r5, pc}
 80146c0:	4770      	bx	lr
 80146c2:	bf00      	nop
 80146c4:	20003e34 	.word	0x20003e34
 80146c8:	20003e40 	.word	0x20003e40
 80146cc:	20003ee0 	.word	0x20003ee0

080146d0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80146d0:	2800      	cmp	r0, #0
 80146d2:	d04a      	beq.n	801476a <xTaskPriorityDisinherit+0x9a>
	{
 80146d4:	b538      	push	{r3, r4, r5, lr}
 80146d6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80146d8:	4a27      	ldr	r2, [pc, #156]	; (8014778 <xTaskPriorityDisinherit+0xa8>)
 80146da:	6812      	ldr	r2, [r2, #0]
 80146dc:	4290      	cmp	r0, r2
 80146de:	d008      	beq.n	80146f2 <xTaskPriorityDisinherit+0x22>
 80146e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e4:	f383 8811 	msr	BASEPRI, r3
 80146e8:	f3bf 8f6f 	isb	sy
 80146ec:	f3bf 8f4f 	dsb	sy
 80146f0:	e7fe      	b.n	80146f0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80146f2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80146f4:	b942      	cbnz	r2, 8014708 <xTaskPriorityDisinherit+0x38>
 80146f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146fa:	f383 8811 	msr	BASEPRI, r3
 80146fe:	f3bf 8f6f 	isb	sy
 8014702:	f3bf 8f4f 	dsb	sy
 8014706:	e7fe      	b.n	8014706 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8014708:	3a01      	subs	r2, #1
 801470a:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801470c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801470e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014710:	4288      	cmp	r0, r1
 8014712:	d02c      	beq.n	801476e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014714:	bb6a      	cbnz	r2, 8014772 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014716:	1d25      	adds	r5, r4, #4
 8014718:	4628      	mov	r0, r5
 801471a:	f7fe fc36 	bl	8012f8a <uxListRemove>
 801471e:	b970      	cbnz	r0, 801473e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014720:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014722:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8014726:	008b      	lsls	r3, r1, #2
 8014728:	4914      	ldr	r1, [pc, #80]	; (801477c <xTaskPriorityDisinherit+0xac>)
 801472a:	58cb      	ldr	r3, [r1, r3]
 801472c:	b93b      	cbnz	r3, 801473e <xTaskPriorityDisinherit+0x6e>
 801472e:	2301      	movs	r3, #1
 8014730:	fa03 f202 	lsl.w	r2, r3, r2
 8014734:	4912      	ldr	r1, [pc, #72]	; (8014780 <xTaskPriorityDisinherit+0xb0>)
 8014736:	680b      	ldr	r3, [r1, #0]
 8014738:	ea23 0302 	bic.w	r3, r3, r2
 801473c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801473e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014740:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014742:	f1c3 0207 	rsb	r2, r3, #7
 8014746:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8014748:	2401      	movs	r4, #1
 801474a:	fa04 f203 	lsl.w	r2, r4, r3
 801474e:	490c      	ldr	r1, [pc, #48]	; (8014780 <xTaskPriorityDisinherit+0xb0>)
 8014750:	6808      	ldr	r0, [r1, #0]
 8014752:	4302      	orrs	r2, r0
 8014754:	600a      	str	r2, [r1, #0]
 8014756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801475a:	009a      	lsls	r2, r3, #2
 801475c:	4629      	mov	r1, r5
 801475e:	4807      	ldr	r0, [pc, #28]	; (801477c <xTaskPriorityDisinherit+0xac>)
 8014760:	4410      	add	r0, r2
 8014762:	f7fe fbec 	bl	8012f3e <vListInsertEnd>
					xReturn = pdTRUE;
 8014766:	4620      	mov	r0, r4
 8014768:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 801476a:	2000      	movs	r0, #0
 801476c:	4770      	bx	lr
 801476e:	2000      	movs	r0, #0
 8014770:	bd38      	pop	{r3, r4, r5, pc}
 8014772:	2000      	movs	r0, #0
	}
 8014774:	bd38      	pop	{r3, r4, r5, pc}
 8014776:	bf00      	nop
 8014778:	20003e34 	.word	0x20003e34
 801477c:	20003e40 	.word	0x20003e40
 8014780:	20003ee0 	.word	0x20003ee0

08014784 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8014784:	4b05      	ldr	r3, [pc, #20]	; (801479c <pvTaskIncrementMutexHeldCount+0x18>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	b123      	cbz	r3, 8014794 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 801478a:	4b04      	ldr	r3, [pc, #16]	; (801479c <pvTaskIncrementMutexHeldCount+0x18>)
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014790:	3301      	adds	r3, #1
 8014792:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8014794:	4b01      	ldr	r3, [pc, #4]	; (801479c <pvTaskIncrementMutexHeldCount+0x18>)
 8014796:	6818      	ldr	r0, [r3, #0]
	}
 8014798:	4770      	bx	lr
 801479a:	bf00      	nop
 801479c:	20003e34 	.word	0x20003e34

080147a0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80147a0:	b510      	push	{r4, lr}
 80147a2:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80147a4:	680a      	ldr	r2, [r1, #0]
 80147a6:	320c      	adds	r2, #12
 80147a8:	f001 fc26 	bl	8015ff8 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80147ac:	4603      	mov	r3, r0
 80147ae:	b908      	cbnz	r0, 80147b4 <netconn_apimsg+0x14>
    return apimsg->err;
 80147b0:	f994 3004 	ldrsb.w	r3, [r4, #4]
  }
  return err;
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	bd10      	pop	{r4, pc}

080147b8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80147b8:	b500      	push	{lr}
 80147ba:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80147bc:	b160      	cbz	r0, 80147d8 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80147be:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80147c0:	f88d 100c 	strb.w	r1, [sp, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80147c4:	2329      	movs	r3, #41	; 0x29
 80147c6:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80147ca:	a901      	add	r1, sp, #4
 80147cc:	4807      	ldr	r0, [pc, #28]	; (80147ec <netconn_close_shutdown+0x34>)
 80147ce:	f7ff ffe7 	bl	80147a0 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 80147d2:	b007      	add	sp, #28
 80147d4:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80147d8:	4b05      	ldr	r3, [pc, #20]	; (80147f0 <netconn_close_shutdown+0x38>)
 80147da:	f44f 724a 	mov.w	r2, #808	; 0x328
 80147de:	4905      	ldr	r1, [pc, #20]	; (80147f4 <netconn_close_shutdown+0x3c>)
 80147e0:	4805      	ldr	r0, [pc, #20]	; (80147f8 <netconn_close_shutdown+0x40>)
 80147e2:	f009 fb80 	bl	801dee6 <iprintf>
 80147e6:	f06f 000f 	mvn.w	r0, #15
 80147ea:	e7f2      	b.n	80147d2 <netconn_close_shutdown+0x1a>
 80147ec:	08015cd9 	.word	0x08015cd9
 80147f0:	0801e900 	.word	0x0801e900
 80147f4:	0801e934 	.word	0x0801e934
 80147f8:	0801e950 	.word	0x0801e950

080147fc <netconn_recv_data>:
{
 80147fc:	b570      	push	{r4, r5, r6, lr}
 80147fe:	b086      	sub	sp, #24
  void *buf = NULL;
 8014800:	2300      	movs	r3, #0
 8014802:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014804:	b1b1      	cbz	r1, 8014834 <netconn_recv_data+0x38>
 8014806:	4604      	mov	r4, r0
 8014808:	460d      	mov	r5, r1
  *new_buf = NULL;
 801480a:	2300      	movs	r3, #0
 801480c:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801480e:	b1d8      	cbz	r0, 8014848 <netconn_recv_data+0x4c>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014810:	7803      	ldrb	r3, [r0, #0]
 8014812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014816:	2b10      	cmp	r3, #16
 8014818:	d020      	beq.n	801485c <netconn_recv_data+0x60>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 801481a:	f104 0610 	add.w	r6, r4, #16
 801481e:	4630      	mov	r0, r6
 8014820:	f008 f86a 	bl	801c8f8 <sys_mbox_valid>
 8014824:	b340      	cbz	r0, 8014878 <netconn_recv_data+0x7c>
  if (ERR_IS_FATAL(conn->last_err)) {
 8014826:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801482a:	f110 0f0c 	cmn.w	r0, #12
 801482e:	da2d      	bge.n	801488c <netconn_recv_data+0x90>
}
 8014830:	b006      	add	sp, #24
 8014832:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014834:	4b3a      	ldr	r3, [pc, #232]	; (8014920 <netconn_recv_data+0x124>)
 8014836:	f240 12e7 	movw	r2, #487	; 0x1e7
 801483a:	493a      	ldr	r1, [pc, #232]	; (8014924 <netconn_recv_data+0x128>)
 801483c:	483a      	ldr	r0, [pc, #232]	; (8014928 <netconn_recv_data+0x12c>)
 801483e:	f009 fb52 	bl	801dee6 <iprintf>
 8014842:	f06f 000f 	mvn.w	r0, #15
 8014846:	e7f3      	b.n	8014830 <netconn_recv_data+0x34>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014848:	4b35      	ldr	r3, [pc, #212]	; (8014920 <netconn_recv_data+0x124>)
 801484a:	f240 12e9 	movw	r2, #489	; 0x1e9
 801484e:	4937      	ldr	r1, [pc, #220]	; (801492c <netconn_recv_data+0x130>)
 8014850:	4835      	ldr	r0, [pc, #212]	; (8014928 <netconn_recv_data+0x12c>)
 8014852:	f009 fb48 	bl	801dee6 <iprintf>
 8014856:	f06f 000f 	mvn.w	r0, #15
 801485a:	e7e9      	b.n	8014830 <netconn_recv_data+0x34>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 801485c:	3010      	adds	r0, #16
 801485e:	f008 f84b 	bl	801c8f8 <sys_mbox_valid>
 8014862:	2800      	cmp	r0, #0
 8014864:	d1d9      	bne.n	801481a <netconn_recv_data+0x1e>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8014866:	f104 0014 	add.w	r0, r4, #20
 801486a:	f008 f845 	bl	801c8f8 <sys_mbox_valid>
 801486e:	2800      	cmp	r0, #0
 8014870:	d053      	beq.n	801491a <netconn_recv_data+0x11e>
 8014872:	f06f 000a 	mvn.w	r0, #10
 8014876:	e7db      	b.n	8014830 <netconn_recv_data+0x34>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8014878:	4b29      	ldr	r3, [pc, #164]	; (8014920 <netconn_recv_data+0x124>)
 801487a:	f240 12f5 	movw	r2, #501	; 0x1f5
 801487e:	492c      	ldr	r1, [pc, #176]	; (8014930 <netconn_recv_data+0x134>)
 8014880:	4829      	ldr	r0, [pc, #164]	; (8014928 <netconn_recv_data+0x12c>)
 8014882:	f009 fb30 	bl	801dee6 <iprintf>
 8014886:	f06f 000a 	mvn.w	r0, #10
 801488a:	e7d1      	b.n	8014830 <netconn_recv_data+0x34>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801488c:	2200      	movs	r2, #0
 801488e:	a905      	add	r1, sp, #20
 8014890:	4630      	mov	r0, r6
 8014892:	f007 fff2 	bl	801c87a <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014896:	7823      	ldrb	r3, [r4, #0]
 8014898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801489c:	2b10      	cmp	r3, #16
 801489e:	d00e      	beq.n	80148be <netconn_recv_data+0xc2>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80148a0:	9b05      	ldr	r3, [sp, #20]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d031      	beq.n	801490a <netconn_recv_data+0x10e>
    len = netbuf_len((struct netbuf*)buf);
 80148a6:	9b05      	ldr	r3, [sp, #20]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80148ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80148ae:	b113      	cbz	r3, 80148b6 <netconn_recv_data+0xba>
 80148b0:	2101      	movs	r1, #1
 80148b2:	4620      	mov	r0, r4
 80148b4:	4798      	blx	r3
  *new_buf = buf;
 80148b6:	9b05      	ldr	r3, [sp, #20]
 80148b8:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 80148ba:	2000      	movs	r0, #0
 80148bc:	e7b8      	b.n	8014830 <netconn_recv_data+0x34>
    API_MSG_VAR_REF(msg).conn = conn;
 80148be:	9400      	str	r4, [sp, #0]
    if (buf != NULL) {
 80148c0:	9b05      	ldr	r3, [sp, #20]
 80148c2:	b14b      	cbz	r3, 80148d8 <netconn_recv_data+0xdc>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 80148c4:	891b      	ldrh	r3, [r3, #8]
 80148c6:	9302      	str	r3, [sp, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 80148c8:	4669      	mov	r1, sp
 80148ca:	481a      	ldr	r0, [pc, #104]	; (8014934 <netconn_recv_data+0x138>)
 80148cc:	f7ff ff68 	bl	80147a0 <netconn_apimsg>
    if (buf == NULL) {
 80148d0:	9b05      	ldr	r3, [sp, #20]
 80148d2:	b123      	cbz	r3, 80148de <netconn_recv_data+0xe2>
    len = ((struct pbuf *)buf)->tot_len;
 80148d4:	891a      	ldrh	r2, [r3, #8]
 80148d6:	e7e9      	b.n	80148ac <netconn_recv_data+0xb0>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 80148d8:	2301      	movs	r3, #1
 80148da:	9302      	str	r3, [sp, #8]
 80148dc:	e7f4      	b.n	80148c8 <netconn_recv_data+0xcc>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80148de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80148e0:	b11b      	cbz	r3, 80148ea <netconn_recv_data+0xee>
 80148e2:	2200      	movs	r2, #0
 80148e4:	2101      	movs	r1, #1
 80148e6:	4620      	mov	r0, r4
 80148e8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80148ea:	6863      	ldr	r3, [r4, #4]
 80148ec:	b933      	cbnz	r3, 80148fc <netconn_recv_data+0x100>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 80148ee:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80148f2:	2800      	cmp	r0, #0
 80148f4:	d19c      	bne.n	8014830 <netconn_recv_data+0x34>
 80148f6:	f06f 000d 	mvn.w	r0, #13
 80148fa:	e799      	b.n	8014830 <netconn_recv_data+0x34>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80148fc:	2101      	movs	r1, #1
 80148fe:	4620      	mov	r0, r4
 8014900:	f7ff ff5a 	bl	80147b8 <netconn_close_shutdown>
      return ERR_CLSD;
 8014904:	f06f 000e 	mvn.w	r0, #14
 8014908:	e792      	b.n	8014830 <netconn_recv_data+0x34>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801490a:	4b05      	ldr	r3, [pc, #20]	; (8014920 <netconn_recv_data+0x124>)
 801490c:	f240 223e 	movw	r2, #574	; 0x23e
 8014910:	4909      	ldr	r1, [pc, #36]	; (8014938 <netconn_recv_data+0x13c>)
 8014912:	4805      	ldr	r0, [pc, #20]	; (8014928 <netconn_recv_data+0x12c>)
 8014914:	f009 fae7 	bl	801dee6 <iprintf>
 8014918:	e7c5      	b.n	80148a6 <netconn_recv_data+0xaa>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 801491a:	f06f 000e 	mvn.w	r0, #14
 801491e:	e787      	b.n	8014830 <netconn_recv_data+0x34>
 8014920:	0801e900 	.word	0x0801e900
 8014924:	0801ea14 	.word	0x0801ea14
 8014928:	0801e950 	.word	0x0801e950
 801492c:	0801ea34 	.word	0x0801ea34
 8014930:	0801ea50 	.word	0x0801ea50
 8014934:	08015b81 	.word	0x08015b81
 8014938:	0801ea70 	.word	0x0801ea70

0801493c <netconn_new_with_proto_and_callback>:
{
 801493c:	b570      	push	{r4, r5, r6, lr}
 801493e:	b086      	sub	sp, #24
 8014940:	460d      	mov	r5, r1
  conn = netconn_alloc(t, callback);
 8014942:	4611      	mov	r1, r2
 8014944:	f000 fe68 	bl	8015618 <netconn_alloc>
  if (conn != NULL) {
 8014948:	4604      	mov	r4, r0
 801494a:	b140      	cbz	r0, 801495e <netconn_new_with_proto_and_callback+0x22>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 801494c:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8014950:	a906      	add	r1, sp, #24
 8014952:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8014956:	4820      	ldr	r0, [pc, #128]	; (80149d8 <netconn_new_with_proto_and_callback+0x9c>)
 8014958:	f7ff ff22 	bl	80147a0 <netconn_apimsg>
    if (err != ERR_OK) {
 801495c:	b910      	cbnz	r0, 8014964 <netconn_new_with_proto_and_callback+0x28>
}
 801495e:	4620      	mov	r0, r4
 8014960:	b006      	add	sp, #24
 8014962:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8014964:	6863      	ldr	r3, [r4, #4]
 8014966:	b12b      	cbz	r3, 8014974 <netconn_new_with_proto_and_callback+0x38>
 8014968:	4b1c      	ldr	r3, [pc, #112]	; (80149dc <netconn_new_with_proto_and_callback+0xa0>)
 801496a:	2289      	movs	r2, #137	; 0x89
 801496c:	491c      	ldr	r1, [pc, #112]	; (80149e0 <netconn_new_with_proto_and_callback+0xa4>)
 801496e:	481d      	ldr	r0, [pc, #116]	; (80149e4 <netconn_new_with_proto_and_callback+0xa8>)
 8014970:	f009 fab9 	bl	801dee6 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014974:	f104 0510 	add.w	r5, r4, #16
 8014978:	4628      	mov	r0, r5
 801497a:	f007 ffbd 	bl	801c8f8 <sys_mbox_valid>
 801497e:	b1b0      	cbz	r0, 80149ae <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014980:	f104 0014 	add.w	r0, r4, #20
 8014984:	f007 ffb8 	bl	801c8f8 <sys_mbox_valid>
 8014988:	b9c0      	cbnz	r0, 80149bc <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 801498a:	f104 060c 	add.w	r6, r4, #12
 801498e:	4630      	mov	r0, r6
 8014990:	f007 fffc 	bl	801c98c <sys_sem_valid>
 8014994:	b1c8      	cbz	r0, 80149ca <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 8014996:	4630      	mov	r0, r6
 8014998:	f007 fff3 	bl	801c982 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 801499c:	4628      	mov	r0, r5
 801499e:	f007 ff4d 	bl	801c83c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80149a2:	4621      	mov	r1, r4
 80149a4:	2007      	movs	r0, #7
 80149a6:	f003 fafb 	bl	8017fa0 <memp_free>
      return NULL;
 80149aa:	2400      	movs	r4, #0
 80149ac:	e7d7      	b.n	801495e <netconn_new_with_proto_and_callback+0x22>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80149ae:	4b0b      	ldr	r3, [pc, #44]	; (80149dc <netconn_new_with_proto_and_callback+0xa0>)
 80149b0:	228a      	movs	r2, #138	; 0x8a
 80149b2:	490d      	ldr	r1, [pc, #52]	; (80149e8 <netconn_new_with_proto_and_callback+0xac>)
 80149b4:	480b      	ldr	r0, [pc, #44]	; (80149e4 <netconn_new_with_proto_and_callback+0xa8>)
 80149b6:	f009 fa96 	bl	801dee6 <iprintf>
 80149ba:	e7e1      	b.n	8014980 <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80149bc:	4b07      	ldr	r3, [pc, #28]	; (80149dc <netconn_new_with_proto_and_callback+0xa0>)
 80149be:	228c      	movs	r2, #140	; 0x8c
 80149c0:	490a      	ldr	r1, [pc, #40]	; (80149ec <netconn_new_with_proto_and_callback+0xb0>)
 80149c2:	4808      	ldr	r0, [pc, #32]	; (80149e4 <netconn_new_with_proto_and_callback+0xa8>)
 80149c4:	f009 fa8f 	bl	801dee6 <iprintf>
 80149c8:	e7df      	b.n	801498a <netconn_new_with_proto_and_callback+0x4e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80149ca:	4b04      	ldr	r3, [pc, #16]	; (80149dc <netconn_new_with_proto_and_callback+0xa0>)
 80149cc:	228f      	movs	r2, #143	; 0x8f
 80149ce:	4908      	ldr	r1, [pc, #32]	; (80149f0 <netconn_new_with_proto_and_callback+0xb4>)
 80149d0:	4804      	ldr	r0, [pc, #16]	; (80149e4 <netconn_new_with_proto_and_callback+0xa8>)
 80149d2:	f009 fa88 	bl	801dee6 <iprintf>
 80149d6:	e7de      	b.n	8014996 <netconn_new_with_proto_and_callback+0x5a>
 80149d8:	080155e5 	.word	0x080155e5
 80149dc:	0801e900 	.word	0x0801e900
 80149e0:	0801e998 	.word	0x0801e998
 80149e4:	0801e950 	.word	0x0801e950
 80149e8:	0801e9bc 	.word	0x0801e9bc
 80149ec:	0801e9d4 	.word	0x0801e9d4
 80149f0:	0801e9f8 	.word	0x0801e9f8

080149f4 <netconn_delete>:
{
 80149f4:	b530      	push	{r4, r5, lr}
 80149f6:	b087      	sub	sp, #28
  if (conn == NULL) {
 80149f8:	b188      	cbz	r0, 8014a1e <netconn_delete+0x2a>
 80149fa:	4604      	mov	r4, r0
  API_MSG_VAR_REF(msg).conn = conn;
 80149fc:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80149fe:	2329      	movs	r3, #41	; 0x29
 8014a00:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8014a04:	a901      	add	r1, sp, #4
 8014a06:	4807      	ldr	r0, [pc, #28]	; (8014a24 <netconn_delete+0x30>)
 8014a08:	f7ff feca 	bl	80147a0 <netconn_apimsg>
  if (err != ERR_OK) {
 8014a0c:	4605      	mov	r5, r0
 8014a0e:	b110      	cbz	r0, 8014a16 <netconn_delete+0x22>
}
 8014a10:	4628      	mov	r0, r5
 8014a12:	b007      	add	sp, #28
 8014a14:	bd30      	pop	{r4, r5, pc}
  netconn_free(conn);
 8014a16:	4620      	mov	r0, r4
 8014a18:	f000 fe44 	bl	80156a4 <netconn_free>
  return ERR_OK;
 8014a1c:	e7f8      	b.n	8014a10 <netconn_delete+0x1c>
    return ERR_OK;
 8014a1e:	2500      	movs	r5, #0
 8014a20:	e7f6      	b.n	8014a10 <netconn_delete+0x1c>
 8014a22:	bf00      	nop
 8014a24:	080158c1 	.word	0x080158c1

08014a28 <netconn_bind>:
{
 8014a28:	b500      	push	{lr}
 8014a2a:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014a2c:	b160      	cbz	r0, 8014a48 <netconn_bind+0x20>
 8014a2e:	4603      	mov	r3, r0
  if (addr == NULL) {
 8014a30:	b199      	cbz	r1, 8014a5a <netconn_bind+0x32>
  API_MSG_VAR_REF(msg).conn = conn;
 8014a32:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014a34:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014a36:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8014a3a:	a901      	add	r1, sp, #4
 8014a3c:	4808      	ldr	r0, [pc, #32]	; (8014a60 <netconn_bind+0x38>)
 8014a3e:	f7ff feaf 	bl	80147a0 <netconn_apimsg>
}
 8014a42:	b007      	add	sp, #28
 8014a44:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014a48:	4b06      	ldr	r3, [pc, #24]	; (8014a64 <netconn_bind+0x3c>)
 8014a4a:	22ff      	movs	r2, #255	; 0xff
 8014a4c:	4906      	ldr	r1, [pc, #24]	; (8014a68 <netconn_bind+0x40>)
 8014a4e:	4807      	ldr	r0, [pc, #28]	; (8014a6c <netconn_bind+0x44>)
 8014a50:	f009 fa49 	bl	801dee6 <iprintf>
 8014a54:	f06f 000f 	mvn.w	r0, #15
 8014a58:	e7f3      	b.n	8014a42 <netconn_bind+0x1a>
    addr = IP4_ADDR_ANY;
 8014a5a:	4905      	ldr	r1, [pc, #20]	; (8014a70 <netconn_bind+0x48>)
 8014a5c:	e7e9      	b.n	8014a32 <netconn_bind+0xa>
 8014a5e:	bf00      	nop
 8014a60:	08015a2d 	.word	0x08015a2d
 8014a64:	0801e900 	.word	0x0801e900
 8014a68:	0801e8e4 	.word	0x0801e8e4
 8014a6c:	0801e950 	.word	0x0801e950
 8014a70:	08021640 	.word	0x08021640

08014a74 <netconn_listen_with_backlog>:
{
 8014a74:	b500      	push	{lr}
 8014a76:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014a78:	b140      	cbz	r0, 8014a8c <netconn_listen_with_backlog+0x18>
  API_MSG_VAR_REF(msg).conn = conn;
 8014a7a:	a906      	add	r1, sp, #24
 8014a7c:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8014a80:	4807      	ldr	r0, [pc, #28]	; (8014aa0 <netconn_listen_with_backlog+0x2c>)
 8014a82:	f7ff fe8d 	bl	80147a0 <netconn_apimsg>
}
 8014a86:	b007      	add	sp, #28
 8014a88:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014a8c:	4b05      	ldr	r3, [pc, #20]	; (8014aa4 <netconn_listen_with_backlog+0x30>)
 8014a8e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014a92:	4905      	ldr	r1, [pc, #20]	; (8014aa8 <netconn_listen_with_backlog+0x34>)
 8014a94:	4805      	ldr	r0, [pc, #20]	; (8014aac <netconn_listen_with_backlog+0x38>)
 8014a96:	f009 fa26 	bl	801dee6 <iprintf>
 8014a9a:	f06f 000f 	mvn.w	r0, #15
 8014a9e:	e7f2      	b.n	8014a86 <netconn_listen_with_backlog+0x12>
 8014aa0:	08015a91 	.word	0x08015a91
 8014aa4:	0801e900 	.word	0x0801e900
 8014aa8:	0801e978 	.word	0x0801e978
 8014aac:	0801e950 	.word	0x0801e950

08014ab0 <netconn_accept>:
{
 8014ab0:	b570      	push	{r4, r5, r6, lr}
 8014ab2:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014ab4:	b159      	cbz	r1, 8014ace <netconn_accept+0x1e>
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	460d      	mov	r5, r1
  *new_conn = NULL;
 8014aba:	2300      	movs	r3, #0
 8014abc:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014abe:	b180      	cbz	r0, 8014ae2 <netconn_accept+0x32>
  if (ERR_IS_FATAL(conn->last_err)) {
 8014ac0:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8014ac4:	f110 0f0c 	cmn.w	r0, #12
 8014ac8:	da15      	bge.n	8014af6 <netconn_accept+0x46>
}
 8014aca:	b002      	add	sp, #8
 8014acc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014ace:	4b21      	ldr	r3, [pc, #132]	; (8014b54 <netconn_accept+0xa4>)
 8014ad0:	f240 128d 	movw	r2, #397	; 0x18d
 8014ad4:	4920      	ldr	r1, [pc, #128]	; (8014b58 <netconn_accept+0xa8>)
 8014ad6:	4821      	ldr	r0, [pc, #132]	; (8014b5c <netconn_accept+0xac>)
 8014ad8:	f009 fa05 	bl	801dee6 <iprintf>
 8014adc:	f06f 000f 	mvn.w	r0, #15
 8014ae0:	e7f3      	b.n	8014aca <netconn_accept+0x1a>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014ae2:	4b1c      	ldr	r3, [pc, #112]	; (8014b54 <netconn_accept+0xa4>)
 8014ae4:	f240 128f 	movw	r2, #399	; 0x18f
 8014ae8:	491d      	ldr	r1, [pc, #116]	; (8014b60 <netconn_accept+0xb0>)
 8014aea:	481c      	ldr	r0, [pc, #112]	; (8014b5c <netconn_accept+0xac>)
 8014aec:	f009 f9fb 	bl	801dee6 <iprintf>
 8014af0:	f06f 000f 	mvn.w	r0, #15
 8014af4:	e7e9      	b.n	8014aca <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8014af6:	f104 0614 	add.w	r6, r4, #20
 8014afa:	4630      	mov	r0, r6
 8014afc:	f007 fefc 	bl	801c8f8 <sys_mbox_valid>
 8014b00:	b308      	cbz	r0, 8014b46 <netconn_accept+0x96>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8014b02:	2200      	movs	r2, #0
 8014b04:	a901      	add	r1, sp, #4
 8014b06:	4630      	mov	r0, r6
 8014b08:	f007 feb7 	bl	801c87a <sys_arch_mbox_fetch>
  newconn = (struct netconn *)accept_ptr;
 8014b0c:	9e01      	ldr	r6, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014b0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014b10:	b11b      	cbz	r3, 8014b1a <netconn_accept+0x6a>
 8014b12:	2200      	movs	r2, #0
 8014b14:	2101      	movs	r1, #1
 8014b16:	4620      	mov	r0, r4
 8014b18:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 8014b1a:	4b12      	ldr	r3, [pc, #72]	; (8014b64 <netconn_accept+0xb4>)
 8014b1c:	9a01      	ldr	r2, [sp, #4]
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d014      	beq.n	8014b4c <netconn_accept+0x9c>
  if (newconn == NULL) {
 8014b22:	b116      	cbz	r6, 8014b2a <netconn_accept+0x7a>
  *new_conn = newconn;
 8014b24:	602e      	str	r6, [r5, #0]
  return ERR_OK;
 8014b26:	2000      	movs	r0, #0
 8014b28:	e7cf      	b.n	8014aca <netconn_accept+0x1a>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8014b2a:	f007 ff75 	bl	801ca18 <sys_arch_protect>
 8014b2e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014b32:	f113 0f0c 	cmn.w	r3, #12
 8014b36:	db01      	blt.n	8014b3c <netconn_accept+0x8c>
 8014b38:	23f1      	movs	r3, #241	; 0xf1
 8014b3a:	7223      	strb	r3, [r4, #8]
 8014b3c:	f007 ff78 	bl	801ca30 <sys_arch_unprotect>
    return ERR_CLSD;
 8014b40:	f06f 000e 	mvn.w	r0, #14
 8014b44:	e7c1      	b.n	8014aca <netconn_accept+0x1a>
    return ERR_CLSD;
 8014b46:	f06f 000e 	mvn.w	r0, #14
 8014b4a:	e7be      	b.n	8014aca <netconn_accept+0x1a>
    return ERR_ABRT;
 8014b4c:	f06f 000c 	mvn.w	r0, #12
 8014b50:	e7bb      	b.n	8014aca <netconn_accept+0x1a>
 8014b52:	bf00      	nop
 8014b54:	0801e900 	.word	0x0801e900
 8014b58:	0801e8a4 	.word	0x0801e8a4
 8014b5c:	0801e950 	.word	0x0801e950
 8014b60:	0801e8c4 	.word	0x0801e8c4
 8014b64:	200044b8 	.word	0x200044b8

08014b68 <netconn_recv>:
{
 8014b68:	b570      	push	{r4, r5, r6, lr}
 8014b6a:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014b6c:	b179      	cbz	r1, 8014b8e <netconn_recv+0x26>
 8014b6e:	4604      	mov	r4, r0
 8014b70:	460d      	mov	r5, r1
  *new_buf = NULL;
 8014b72:	2300      	movs	r3, #0
 8014b74:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014b76:	b1a0      	cbz	r0, 8014ba2 <netconn_recv+0x3a>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014b78:	7803      	ldrb	r3, [r0, #0]
 8014b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b7e:	2b10      	cmp	r3, #16
 8014b80:	d019      	beq.n	8014bb6 <netconn_recv+0x4e>
    return netconn_recv_data(conn, (void **)new_buf);
 8014b82:	f7ff fe3b 	bl	80147fc <netconn_recv_data>
 8014b86:	4604      	mov	r4, r0
}
 8014b88:	4620      	mov	r0, r4
 8014b8a:	b002      	add	sp, #8
 8014b8c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014b8e:	4b1e      	ldr	r3, [pc, #120]	; (8014c08 <netconn_recv+0xa0>)
 8014b90:	f44f 721d 	mov.w	r2, #628	; 0x274
 8014b94:	491d      	ldr	r1, [pc, #116]	; (8014c0c <netconn_recv+0xa4>)
 8014b96:	481e      	ldr	r0, [pc, #120]	; (8014c10 <netconn_recv+0xa8>)
 8014b98:	f009 f9a5 	bl	801dee6 <iprintf>
 8014b9c:	f06f 040f 	mvn.w	r4, #15
 8014ba0:	e7f2      	b.n	8014b88 <netconn_recv+0x20>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014ba2:	4b19      	ldr	r3, [pc, #100]	; (8014c08 <netconn_recv+0xa0>)
 8014ba4:	f240 2276 	movw	r2, #630	; 0x276
 8014ba8:	491a      	ldr	r1, [pc, #104]	; (8014c14 <netconn_recv+0xac>)
 8014baa:	4819      	ldr	r0, [pc, #100]	; (8014c10 <netconn_recv+0xa8>)
 8014bac:	f009 f99b 	bl	801dee6 <iprintf>
 8014bb0:	f06f 040f 	mvn.w	r4, #15
 8014bb4:	e7e8      	b.n	8014b88 <netconn_recv+0x20>
    struct pbuf *p = NULL;
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8014bba:	2006      	movs	r0, #6
 8014bbc:	f003 f9d6 	bl	8017f6c <memp_malloc>
    if (buf == NULL) {
 8014bc0:	4606      	mov	r6, r0
 8014bc2:	b1e8      	cbz	r0, 8014c00 <netconn_recv+0x98>
    err = netconn_recv_data(conn, (void **)&p);
 8014bc4:	a901      	add	r1, sp, #4
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	f7ff fe18 	bl	80147fc <netconn_recv_data>
    if (err != ERR_OK) {
 8014bcc:	4604      	mov	r4, r0
 8014bce:	b950      	cbnz	r0, 8014be6 <netconn_recv+0x7e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014bd0:	9b01      	ldr	r3, [sp, #4]
 8014bd2:	b16b      	cbz	r3, 8014bf0 <netconn_recv+0x88>
    buf->p = p;
 8014bd4:	9b01      	ldr	r3, [sp, #4]
 8014bd6:	6033      	str	r3, [r6, #0]
    buf->ptr = p;
 8014bd8:	9b01      	ldr	r3, [sp, #4]
 8014bda:	6073      	str	r3, [r6, #4]
    buf->port = 0;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	81b3      	strh	r3, [r6, #12]
    ip_addr_set_zero(&buf->addr);
 8014be0:	60b3      	str	r3, [r6, #8]
    *new_buf = buf;
 8014be2:	602e      	str	r6, [r5, #0]
    return ERR_OK;
 8014be4:	e7d0      	b.n	8014b88 <netconn_recv+0x20>
      memp_free(MEMP_NETBUF, buf);
 8014be6:	4631      	mov	r1, r6
 8014be8:	2006      	movs	r0, #6
 8014bea:	f003 f9d9 	bl	8017fa0 <memp_free>
      return err;
 8014bee:	e7cb      	b.n	8014b88 <netconn_recv+0x20>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014bf0:	4b05      	ldr	r3, [pc, #20]	; (8014c08 <netconn_recv+0xa0>)
 8014bf2:	f240 228a 	movw	r2, #650	; 0x28a
 8014bf6:	4908      	ldr	r1, [pc, #32]	; (8014c18 <netconn_recv+0xb0>)
 8014bf8:	4805      	ldr	r0, [pc, #20]	; (8014c10 <netconn_recv+0xa8>)
 8014bfa:	f009 f974 	bl	801dee6 <iprintf>
 8014bfe:	e7e9      	b.n	8014bd4 <netconn_recv+0x6c>
      return ERR_MEM;
 8014c00:	f04f 34ff 	mov.w	r4, #4294967295
 8014c04:	e7c0      	b.n	8014b88 <netconn_recv+0x20>
 8014c06:	bf00      	nop
 8014c08:	0801e900 	.word	0x0801e900
 8014c0c:	0801ea14 	.word	0x0801ea14
 8014c10:	0801e950 	.word	0x0801e950
 8014c14:	0801ea34 	.word	0x0801ea34
 8014c18:	0801ec44 	.word	0x0801ec44

08014c1c <netconn_write_partly>:
{
 8014c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c1e:	b087      	sub	sp, #28
 8014c20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014c22:	b188      	cbz	r0, 8014c48 <netconn_write_partly+0x2c>
 8014c24:	4616      	mov	r6, r2
 8014c26:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8014c28:	7802      	ldrb	r2, [r0, #0]
 8014c2a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8014c2e:	2a10      	cmp	r2, #16
 8014c30:	d114      	bne.n	8014c5c <netconn_write_partly+0x40>
  if (size == 0) {
 8014c32:	2e00      	cmp	r6, #0
 8014c34:	d035      	beq.n	8014ca2 <netconn_write_partly+0x86>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014c36:	7f02      	ldrb	r2, [r0, #28]
 8014c38:	f012 0f02 	tst.w	r2, #2
 8014c3c:	d118      	bne.n	8014c70 <netconn_write_partly+0x54>
 8014c3e:	f013 0f04 	tst.w	r3, #4
 8014c42:	d029      	beq.n	8014c98 <netconn_write_partly+0x7c>
 8014c44:	2201      	movs	r2, #1
 8014c46:	e014      	b.n	8014c72 <netconn_write_partly+0x56>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014c48:	4b19      	ldr	r3, [pc, #100]	; (8014cb0 <netconn_write_partly+0x94>)
 8014c4a:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014c4e:	4919      	ldr	r1, [pc, #100]	; (8014cb4 <netconn_write_partly+0x98>)
 8014c50:	4819      	ldr	r0, [pc, #100]	; (8014cb8 <netconn_write_partly+0x9c>)
 8014c52:	f009 f948 	bl	801dee6 <iprintf>
 8014c56:	f06f 030f 	mvn.w	r3, #15
 8014c5a:	e023      	b.n	8014ca4 <netconn_write_partly+0x88>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8014c5c:	4b14      	ldr	r3, [pc, #80]	; (8014cb0 <netconn_write_partly+0x94>)
 8014c5e:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014c62:	4916      	ldr	r1, [pc, #88]	; (8014cbc <netconn_write_partly+0xa0>)
 8014c64:	4814      	ldr	r0, [pc, #80]	; (8014cb8 <netconn_write_partly+0x9c>)
 8014c66:	f009 f93e 	bl	801dee6 <iprintf>
 8014c6a:	f06f 0305 	mvn.w	r3, #5
 8014c6e:	e019      	b.n	8014ca4 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014c70:	2201      	movs	r2, #1
  if (dontblock && !bytes_written) {
 8014c72:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 8014c76:	b102      	cbz	r2, 8014c7a <netconn_write_partly+0x5e>
 8014c78:	b1bd      	cbz	r5, 8014caa <netconn_write_partly+0x8e>
  API_MSG_VAR_REF(msg).conn = conn;
 8014c7a:	9401      	str	r4, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8014c7c:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8014c7e:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8014c82:	9604      	str	r6, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8014c84:	a901      	add	r1, sp, #4
 8014c86:	480e      	ldr	r0, [pc, #56]	; (8014cc0 <netconn_write_partly+0xa4>)
 8014c88:	f7ff fd8a 	bl	80147a0 <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	b948      	cbnz	r0, 8014ca4 <netconn_write_partly+0x88>
 8014c90:	b145      	cbz	r5, 8014ca4 <netconn_write_partly+0x88>
    if (dontblock) {
 8014c92:	b91f      	cbnz	r7, 8014c9c <netconn_write_partly+0x80>
      *bytes_written = size;
 8014c94:	602e      	str	r6, [r5, #0]
 8014c96:	e005      	b.n	8014ca4 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014c98:	2200      	movs	r2, #0
 8014c9a:	e7ea      	b.n	8014c72 <netconn_write_partly+0x56>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8014c9c:	9a04      	ldr	r2, [sp, #16]
 8014c9e:	602a      	str	r2, [r5, #0]
 8014ca0:	e000      	b.n	8014ca4 <netconn_write_partly+0x88>
    return ERR_OK;
 8014ca2:	2300      	movs	r3, #0
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	b007      	add	sp, #28
 8014ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8014caa:	f06f 0305 	mvn.w	r3, #5
 8014cae:	e7f9      	b.n	8014ca4 <netconn_write_partly+0x88>
 8014cb0:	0801e900 	.word	0x0801e900
 8014cb4:	0801ea7c 	.word	0x0801ea7c
 8014cb8:	0801e950 	.word	0x0801e950
 8014cbc:	0801ea98 	.word	0x0801ea98
 8014cc0:	08015bd9 	.word	0x08015bd9

08014cc4 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8014cc4:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8014cc6:	2103      	movs	r1, #3
 8014cc8:	f7ff fd76 	bl	80147b8 <netconn_close_shutdown>
}
 8014ccc:	bd08      	pop	{r3, pc}
	...

08014cd0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8014cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd4:	4604      	mov	r4, r0
 8014cd6:	4616      	mov	r6, r2
 8014cd8:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8014cda:	460d      	mov	r5, r1
 8014cdc:	2900      	cmp	r1, #0
 8014cde:	d030      	beq.n	8014d42 <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8014ce0:	2c00      	cmp	r4, #0
 8014ce2:	d035      	beq.n	8014d50 <recv_udp+0x80>
  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8014ce4:	2c00      	cmp	r4, #0
 8014ce6:	d03a      	beq.n	8014d5e <recv_udp+0x8e>
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8014ce8:	6863      	ldr	r3, [r4, #4]
 8014cea:	429d      	cmp	r5, r3
 8014cec:	d005      	beq.n	8014cfa <recv_udp+0x2a>
 8014cee:	4b27      	ldr	r3, [pc, #156]	; (8014d8c <recv_udp+0xbc>)
 8014cf0:	22ba      	movs	r2, #186	; 0xba
 8014cf2:	4927      	ldr	r1, [pc, #156]	; (8014d90 <recv_udp+0xc0>)
 8014cf4:	4827      	ldr	r0, [pc, #156]	; (8014d94 <recv_udp+0xc4>)
 8014cf6:	f009 f8f6 	bl	801dee6 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8014cfa:	f104 0710 	add.w	r7, r4, #16
 8014cfe:	4638      	mov	r0, r7
 8014d00:	f007 fdfa 	bl	801c8f8 <sys_mbox_valid>
 8014d04:	b380      	cbz	r0, 8014d68 <recv_udp+0x98>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8014d06:	2006      	movs	r0, #6
 8014d08:	f003 f930 	bl	8017f6c <memp_malloc>
  if (buf == NULL) {
 8014d0c:	4605      	mov	r5, r0
 8014d0e:	b380      	cbz	r0, 8014d72 <recv_udp+0xa2>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 8014d10:	6006      	str	r6, [r0, #0]
    buf->ptr = p;
 8014d12:	6046      	str	r6, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 8014d14:	f1b8 0f00 	cmp.w	r8, #0
 8014d18:	d030      	beq.n	8014d7c <recv_udp+0xac>
 8014d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8014d1e:	60ab      	str	r3, [r5, #8]
    buf->port = port;
 8014d20:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8014d24:	81ab      	strh	r3, [r5, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8014d26:	8936      	ldrh	r6, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8014d28:	4629      	mov	r1, r5
 8014d2a:	4638      	mov	r0, r7
 8014d2c:	f007 fd9b 	bl	801c866 <sys_mbox_trypost>
 8014d30:	bb30      	cbnz	r0, 8014d80 <recv_udp+0xb0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8014d32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014d34:	b11b      	cbz	r3, 8014d3e <recv_udp+0x6e>
 8014d36:	4632      	mov	r2, r6
 8014d38:	2100      	movs	r1, #0
 8014d3a:	4620      	mov	r0, r4
 8014d3c:	4798      	blx	r3
 8014d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8014d42:	4b12      	ldr	r3, [pc, #72]	; (8014d8c <recv_udp+0xbc>)
 8014d44:	22b1      	movs	r2, #177	; 0xb1
 8014d46:	4914      	ldr	r1, [pc, #80]	; (8014d98 <recv_udp+0xc8>)
 8014d48:	4812      	ldr	r0, [pc, #72]	; (8014d94 <recv_udp+0xc4>)
 8014d4a:	f009 f8cc 	bl	801dee6 <iprintf>
 8014d4e:	e7c7      	b.n	8014ce0 <recv_udp+0x10>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8014d50:	4b0e      	ldr	r3, [pc, #56]	; (8014d8c <recv_udp+0xbc>)
 8014d52:	22b2      	movs	r2, #178	; 0xb2
 8014d54:	4911      	ldr	r1, [pc, #68]	; (8014d9c <recv_udp+0xcc>)
 8014d56:	480f      	ldr	r0, [pc, #60]	; (8014d94 <recv_udp+0xc4>)
 8014d58:	f009 f8c5 	bl	801dee6 <iprintf>
 8014d5c:	e7c2      	b.n	8014ce4 <recv_udp+0x14>
    pbuf_free(p);
 8014d5e:	4630      	mov	r0, r6
 8014d60:	f003 faf4 	bl	801834c <pbuf_free>
    return;
 8014d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8014d68:	4630      	mov	r0, r6
 8014d6a:	f003 faef 	bl	801834c <pbuf_free>
    return;
 8014d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8014d72:	4630      	mov	r0, r6
 8014d74:	f003 faea 	bl	801834c <pbuf_free>
    return;
 8014d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ip_addr_set(&buf->addr, addr);
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	e7ce      	b.n	8014d1e <recv_udp+0x4e>
    netbuf_delete(buf);
 8014d80:	4628      	mov	r0, r5
 8014d82:	f001 f821 	bl	8015dc8 <netbuf_delete>
    return;
 8014d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d8a:	bf00      	nop
 8014d8c:	0801ee04 	.word	0x0801ee04
 8014d90:	0801ee7c 	.word	0x0801ee7c
 8014d94:	0801e950 	.word	0x0801e950
 8014d98:	0801ee38 	.word	0x0801ee38
 8014d9c:	0801ee5c 	.word	0x0801ee5c

08014da0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8014da0:	b510      	push	{r4, lr}
 8014da2:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8014da4:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 8014da6:	4620      	mov	r0, r4
 8014da8:	f003 ffdf 	bl	8018d6a <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8014dac:	4908      	ldr	r1, [pc, #32]	; (8014dd0 <setup_tcp+0x30>)
 8014dae:	4620      	mov	r0, r4
 8014db0:	f003 ffde 	bl	8018d70 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8014db4:	4907      	ldr	r1, [pc, #28]	; (8014dd4 <setup_tcp+0x34>)
 8014db6:	4620      	mov	r0, r4
 8014db8:	f003 fff4 	bl	8018da4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8014dbc:	2202      	movs	r2, #2
 8014dbe:	4906      	ldr	r1, [pc, #24]	; (8014dd8 <setup_tcp+0x38>)
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f004 f829 	bl	8018e18 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8014dc6:	4905      	ldr	r1, [pc, #20]	; (8014ddc <setup_tcp+0x3c>)
 8014dc8:	4620      	mov	r0, r4
 8014dca:	f004 f803 	bl	8018dd4 <tcp_err>
 8014dce:	bd10      	pop	{r4, pc}
 8014dd0:	08015515 	.word	0x08015515
 8014dd4:	080154a1 	.word	0x080154a1
 8014dd8:	0801541d 	.word	0x0801541d
 8014ddc:	08014e69 	.word	0x08014e69

08014de0 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8014de0:	b538      	push	{r3, r4, r5, lr}
 8014de2:	4604      	mov	r4, r0
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8014de4:	6803      	ldr	r3, [r0, #0]
 8014de6:	685b      	ldr	r3, [r3, #4]
 8014de8:	b133      	cbz	r3, 8014df8 <pcb_new+0x18>
 8014dea:	4b1b      	ldr	r3, [pc, #108]	; (8014e58 <pcb_new+0x78>)
 8014dec:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8014df0:	491a      	ldr	r1, [pc, #104]	; (8014e5c <pcb_new+0x7c>)
 8014df2:	481b      	ldr	r0, [pc, #108]	; (8014e60 <pcb_new+0x80>)
 8014df4:	f009 f877 	bl	801dee6 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8014df8:	6825      	ldr	r5, [r4, #0]
 8014dfa:	782b      	ldrb	r3, [r5, #0]
 8014dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e00:	2b10      	cmp	r3, #16
 8014e02:	d018      	beq.n	8014e36 <pcb_new+0x56>
 8014e04:	2b20      	cmp	r3, #32
 8014e06:	d121      	bne.n	8014e4c <pcb_new+0x6c>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8014e08:	2000      	movs	r0, #0
 8014e0a:	f007 fc5b 	bl	801c6c4 <udp_new_ip_type>
 8014e0e:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 8014e10:	6823      	ldr	r3, [r4, #0]
 8014e12:	685a      	ldr	r2, [r3, #4]
 8014e14:	b142      	cbz	r2, 8014e28 <pcb_new+0x48>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	2b22      	cmp	r3, #34	; 0x22
 8014e1a:	d009      	beq.n	8014e30 <pcb_new+0x50>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8014e1c:	6823      	ldr	r3, [r4, #0]
 8014e1e:	461a      	mov	r2, r3
 8014e20:	4910      	ldr	r1, [pc, #64]	; (8014e64 <pcb_new+0x84>)
 8014e22:	6858      	ldr	r0, [r3, #4]
 8014e24:	f007 fc20 	bl	801c668 <udp_recv>
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
    return;
  }
  if (msg->conn->pcb.ip == NULL) {
 8014e28:	6823      	ldr	r3, [r4, #0]
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	b18b      	cbz	r3, 8014e52 <pcb_new+0x72>
 8014e2e:	bd38      	pop	{r3, r4, r5, pc}
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8014e30:	2301      	movs	r3, #1
 8014e32:	7413      	strb	r3, [r2, #16]
 8014e34:	e7f2      	b.n	8014e1c <pcb_new+0x3c>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8014e36:	2000      	movs	r0, #0
 8014e38:	f004 fd60 	bl	80198fc <tcp_new_ip_type>
 8014e3c:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8014e3e:	6820      	ldr	r0, [r4, #0]
 8014e40:	6843      	ldr	r3, [r0, #4]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d0f0      	beq.n	8014e28 <pcb_new+0x48>
      setup_tcp(msg->conn);
 8014e46:	f7ff ffab 	bl	8014da0 <setup_tcp>
 8014e4a:	e7ed      	b.n	8014e28 <pcb_new+0x48>
    msg->err = ERR_VAL;
 8014e4c:	23fa      	movs	r3, #250	; 0xfa
 8014e4e:	7123      	strb	r3, [r4, #4]
    return;
 8014e50:	bd38      	pop	{r3, r4, r5, pc}
    msg->err = ERR_MEM;
 8014e52:	23ff      	movs	r3, #255	; 0xff
 8014e54:	7123      	strb	r3, [r4, #4]
 8014e56:	e7ea      	b.n	8014e2e <pcb_new+0x4e>
 8014e58:	0801ee04 	.word	0x0801ee04
 8014e5c:	0801ed80 	.word	0x0801ed80
 8014e60:	0801e950 	.word	0x0801e950
 8014e64:	08014cd1 	.word	0x08014cd1

08014e68 <err_tcp>:
{
 8014e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e6a:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014e6c:	4604      	mov	r4, r0
 8014e6e:	2800      	cmp	r0, #0
 8014e70:	d038      	beq.n	8014ee4 <err_tcp+0x7c>
  conn->pcb.tcp = NULL;
 8014e72:	2300      	movs	r3, #0
 8014e74:	6063      	str	r3, [r4, #4]
  old_state = conn->state;
 8014e76:	7865      	ldrb	r5, [r4, #1]
  conn->state = NETCONN_NONE;
 8014e78:	7063      	strb	r3, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 8014e7a:	2d04      	cmp	r5, #4
 8014e7c:	d03a      	beq.n	8014ef4 <err_tcp+0x8c>
    SYS_ARCH_SET(conn->last_err, err);
 8014e7e:	f007 fdcb 	bl	801ca18 <sys_arch_protect>
 8014e82:	7226      	strb	r6, [r4, #8]
 8014e84:	f007 fdd4 	bl	801ca30 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8014e88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014e8a:	b11b      	cbz	r3, 8014e94 <err_tcp+0x2c>
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	2104      	movs	r1, #4
 8014e90:	4620      	mov	r0, r4
 8014e92:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014e94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014e96:	b11b      	cbz	r3, 8014ea0 <err_tcp+0x38>
 8014e98:	2200      	movs	r2, #0
 8014e9a:	4611      	mov	r1, r2
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014ea0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014ea2:	b11b      	cbz	r3, 8014eac <err_tcp+0x44>
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	2102      	movs	r1, #2
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 8014eac:	f104 0710 	add.w	r7, r4, #16
 8014eb0:	4638      	mov	r0, r7
 8014eb2:	f007 fd21 	bl	801c8f8 <sys_mbox_valid>
 8014eb6:	bb68      	cbnz	r0, 8014f14 <err_tcp+0xac>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8014eb8:	f104 0714 	add.w	r7, r4, #20
 8014ebc:	4638      	mov	r0, r7
 8014ebe:	f007 fd1b 	bl	801c8f8 <sys_mbox_valid>
 8014ec2:	bb60      	cbnz	r0, 8014f1e <err_tcp+0xb6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8014ec4:	2d01      	cmp	r5, #1
 8014ec6:	d02f      	beq.n	8014f28 <err_tcp+0xc0>
 8014ec8:	2d04      	cmp	r5, #4
 8014eca:	d02d      	beq.n	8014f28 <err_tcp+0xc0>
 8014ecc:	2d03      	cmp	r5, #3
 8014ece:	d02b      	beq.n	8014f28 <err_tcp+0xc0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8014ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ed2:	b133      	cbz	r3, 8014ee2 <err_tcp+0x7a>
 8014ed4:	4b2e      	ldr	r3, [pc, #184]	; (8014f90 <err_tcp+0x128>)
 8014ed6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8014eda:	492e      	ldr	r1, [pc, #184]	; (8014f94 <err_tcp+0x12c>)
 8014edc:	482e      	ldr	r0, [pc, #184]	; (8014f98 <err_tcp+0x130>)
 8014ede:	f009 f802 	bl	801dee6 <iprintf>
 8014ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014ee4:	4b2a      	ldr	r3, [pc, #168]	; (8014f90 <err_tcp+0x128>)
 8014ee6:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014eea:	492c      	ldr	r1, [pc, #176]	; (8014f9c <err_tcp+0x134>)
 8014eec:	482a      	ldr	r0, [pc, #168]	; (8014f98 <err_tcp+0x130>)
 8014eee:	f008 fffa 	bl	801dee6 <iprintf>
 8014ef2:	e7be      	b.n	8014e72 <err_tcp+0xa>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8014ef4:	b164      	cbz	r4, 8014f10 <err_tcp+0xa8>
 8014ef6:	f007 fd8f 	bl	801ca18 <sys_arch_protect>
 8014efa:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014efe:	f113 0f0c 	cmn.w	r3, #12
 8014f02:	db01      	blt.n	8014f08 <err_tcp+0xa0>
 8014f04:	2300      	movs	r3, #0
 8014f06:	7223      	strb	r3, [r4, #8]
 8014f08:	f007 fd92 	bl	801ca30 <sys_arch_unprotect>
    err = ERR_OK;
 8014f0c:	2600      	movs	r6, #0
 8014f0e:	e7bb      	b.n	8014e88 <err_tcp+0x20>
 8014f10:	2600      	movs	r6, #0
 8014f12:	e7b9      	b.n	8014e88 <err_tcp+0x20>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8014f14:	2100      	movs	r1, #0
 8014f16:	4638      	mov	r0, r7
 8014f18:	f007 fca5 	bl	801c866 <sys_mbox_trypost>
 8014f1c:	e7cc      	b.n	8014eb8 <err_tcp+0x50>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8014f1e:	2100      	movs	r1, #0
 8014f20:	4638      	mov	r0, r7
 8014f22:	f007 fca0 	bl	801c866 <sys_mbox_trypost>
 8014f26:	e7cd      	b.n	8014ec4 <err_tcp+0x5c>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8014f28:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8014f2a:	f023 0204 	bic.w	r2, r3, #4
 8014f2e:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8014f30:	f013 0f04 	tst.w	r3, #4
 8014f34:	d1d5      	bne.n	8014ee2 <err_tcp+0x7a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f38:	b1cb      	cbz	r3, 8014f6e <err_tcp+0x106>
      conn->current_msg->err = err;
 8014f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f3c:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8014f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f40:	681d      	ldr	r5, [r3, #0]
 8014f42:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8014f44:	4628      	mov	r0, r5
 8014f46:	f007 fd21 	bl	801c98c <sys_sem_valid>
 8014f4a:	b1c0      	cbz	r0, 8014f7e <err_tcp+0x116>
      conn->current_msg = NULL;
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8014f50:	b14c      	cbz	r4, 8014f66 <err_tcp+0xfe>
 8014f52:	f007 fd61 	bl	801ca18 <sys_arch_protect>
 8014f56:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014f5a:	f113 0f0c 	cmn.w	r3, #12
 8014f5e:	db00      	blt.n	8014f62 <err_tcp+0xfa>
 8014f60:	7226      	strb	r6, [r4, #8]
 8014f62:	f007 fd65 	bl	801ca30 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8014f66:	4628      	mov	r0, r5
 8014f68:	f007 fd06 	bl	801c978 <sys_sem_signal>
 8014f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014f6e:	4b08      	ldr	r3, [pc, #32]	; (8014f90 <err_tcp+0x128>)
 8014f70:	f240 12b3 	movw	r2, #435	; 0x1b3
 8014f74:	490a      	ldr	r1, [pc, #40]	; (8014fa0 <err_tcp+0x138>)
 8014f76:	4808      	ldr	r0, [pc, #32]	; (8014f98 <err_tcp+0x130>)
 8014f78:	f008 ffb5 	bl	801dee6 <iprintf>
 8014f7c:	e7dd      	b.n	8014f3a <err_tcp+0xd2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8014f7e:	4b04      	ldr	r3, [pc, #16]	; (8014f90 <err_tcp+0x128>)
 8014f80:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014f84:	4907      	ldr	r1, [pc, #28]	; (8014fa4 <err_tcp+0x13c>)
 8014f86:	4804      	ldr	r0, [pc, #16]	; (8014f98 <err_tcp+0x130>)
 8014f88:	f008 ffad 	bl	801dee6 <iprintf>
 8014f8c:	e7de      	b.n	8014f4c <err_tcp+0xe4>
 8014f8e:	bf00      	nop
 8014f90:	0801ee04 	.word	0x0801ee04
 8014f94:	0801eb04 	.word	0x0801eb04
 8014f98:	0801e950 	.word	0x0801e950
 8014f9c:	0801eabc 	.word	0x0801eabc
 8014fa0:	0801eacc 	.word	0x0801eacc
 8014fa4:	0801eae8 	.word	0x0801eae8

08014fa8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8014fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fac:	4688      	mov	r8, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8014fae:	4604      	mov	r4, r0
 8014fb0:	b1f0      	cbz	r0, 8014ff0 <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8014fb2:	7863      	ldrb	r3, [r4, #1]
 8014fb4:	2b01      	cmp	r3, #1
 8014fb6:	d006      	beq.n	8014fc6 <lwip_netconn_do_writemore+0x1e>
 8014fb8:	4b7b      	ldr	r3, [pc, #492]	; (80151a8 <lwip_netconn_do_writemore+0x200>)
 8014fba:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8014fbe:	497b      	ldr	r1, [pc, #492]	; (80151ac <lwip_netconn_do_writemore+0x204>)
 8014fc0:	487b      	ldr	r0, [pc, #492]	; (80151b0 <lwip_netconn_do_writemore+0x208>)
 8014fc2:	f008 ff90 	bl	801dee6 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fc8:	b1d3      	cbz	r3, 8015000 <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8014fca:	6863      	ldr	r3, [r4, #4]
 8014fcc:	b303      	cbz	r3, 8015010 <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8014fce:	6a22      	ldr	r2, [r4, #32]
 8014fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fd2:	68db      	ldr	r3, [r3, #12]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d223      	bcs.n	8015020 <lwip_netconn_do_writemore+0x78>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8014fd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014fda:	f892 9010 	ldrb.w	r9, [r2, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014fde:	7f23      	ldrb	r3, [r4, #28]
 8014fe0:	f013 0f02 	tst.w	r3, #2
 8014fe4:	d124      	bne.n	8015030 <lwip_netconn_do_writemore+0x88>
 8014fe6:	f019 0f04 	tst.w	r9, #4
 8014fea:	d039      	beq.n	8015060 <lwip_netconn_do_writemore+0xb8>
 8014fec:	2601      	movs	r6, #1
 8014fee:	e020      	b.n	8015032 <lwip_netconn_do_writemore+0x8a>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8014ff0:	4b6d      	ldr	r3, [pc, #436]	; (80151a8 <lwip_netconn_do_writemore+0x200>)
 8014ff2:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8014ff6:	496f      	ldr	r1, [pc, #444]	; (80151b4 <lwip_netconn_do_writemore+0x20c>)
 8014ff8:	486d      	ldr	r0, [pc, #436]	; (80151b0 <lwip_netconn_do_writemore+0x208>)
 8014ffa:	f008 ff74 	bl	801dee6 <iprintf>
 8014ffe:	e7d8      	b.n	8014fb2 <lwip_netconn_do_writemore+0xa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015000:	4b69      	ldr	r3, [pc, #420]	; (80151a8 <lwip_netconn_do_writemore+0x200>)
 8015002:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8015006:	496c      	ldr	r1, [pc, #432]	; (80151b8 <lwip_netconn_do_writemore+0x210>)
 8015008:	4869      	ldr	r0, [pc, #420]	; (80151b0 <lwip_netconn_do_writemore+0x208>)
 801500a:	f008 ff6c 	bl	801dee6 <iprintf>
 801500e:	e7dc      	b.n	8014fca <lwip_netconn_do_writemore+0x22>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8015010:	4b65      	ldr	r3, [pc, #404]	; (80151a8 <lwip_netconn_do_writemore+0x200>)
 8015012:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8015016:	4969      	ldr	r1, [pc, #420]	; (80151bc <lwip_netconn_do_writemore+0x214>)
 8015018:	4865      	ldr	r0, [pc, #404]	; (80151b0 <lwip_netconn_do_writemore+0x208>)
 801501a:	f008 ff64 	bl	801dee6 <iprintf>
 801501e:	e7d6      	b.n	8014fce <lwip_netconn_do_writemore+0x26>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8015020:	4b61      	ldr	r3, [pc, #388]	; (80151a8 <lwip_netconn_do_writemore+0x200>)
 8015022:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8015026:	4966      	ldr	r1, [pc, #408]	; (80151c0 <lwip_netconn_do_writemore+0x218>)
 8015028:	4861      	ldr	r0, [pc, #388]	; (80151b0 <lwip_netconn_do_writemore+0x208>)
 801502a:	f008 ff5c 	bl	801dee6 <iprintf>
 801502e:	e7d3      	b.n	8014fd8 <lwip_netconn_do_writemore+0x30>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015030:	2601      	movs	r6, #1
 8015032:	b2f6      	uxtb	r6, r6
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8015034:	6897      	ldr	r7, [r2, #8]
 8015036:	6a23      	ldr	r3, [r4, #32]
 8015038:	441f      	add	r7, r3
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 801503a:	68d2      	ldr	r2, [r2, #12]
 801503c:	1ad5      	subs	r5, r2, r3
    if (diff > 0xffffUL) { /* max_u16_t */
 801503e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8015042:	d30f      	bcc.n	8015064 <lwip_netconn_do_writemore+0xbc>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 8015044:	f049 0902 	orr.w	r9, r9, #2
      len = 0xffff;
 8015048:	f64f 75ff 	movw	r5, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 801504c:	6861      	ldr	r1, [r4, #4]
 801504e:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
    if (available < len) {
 8015052:	428d      	cmp	r5, r1
 8015054:	d90b      	bls.n	801506e <lwip_netconn_do_writemore+0xc6>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 8015056:	b13e      	cbz	r6, 8015068 <lwip_netconn_do_writemore+0xc0>
        if (!len) {
 8015058:	2900      	cmp	r1, #0
 801505a:	d039      	beq.n	80150d0 <lwip_netconn_do_writemore+0x128>
      len = available;
 801505c:	460d      	mov	r5, r1
 801505e:	e006      	b.n	801506e <lwip_netconn_do_writemore+0xc6>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015060:	2600      	movs	r6, #0
 8015062:	e7e6      	b.n	8015032 <lwip_netconn_do_writemore+0x8a>
      len = (u16_t)diff;
 8015064:	b2ad      	uxth	r5, r5
 8015066:	e7f1      	b.n	801504c <lwip_netconn_do_writemore+0xa4>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8015068:	f049 0902 	orr.w	r9, r9, #2
      len = available;
 801506c:	460d      	mov	r5, r1
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 801506e:	442b      	add	r3, r5
 8015070:	429a      	cmp	r2, r3
 8015072:	d325      	bcc.n	80150c0 <lwip_netconn_do_writemore+0x118>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8015074:	464b      	mov	r3, r9
 8015076:	462a      	mov	r2, r5
 8015078:	4639      	mov	r1, r7
 801507a:	6860      	ldr	r0, [r4, #4]
 801507c:	f006 fa2a 	bl	801b4d4 <tcp_write>
 8015080:	4607      	mov	r7, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8015082:	1c43      	adds	r3, r0, #1
 8015084:	b2db      	uxtb	r3, r3
 8015086:	2b01      	cmp	r3, #1
 8015088:	d925      	bls.n	80150d6 <lwip_netconn_do_writemore+0x12e>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 801508a:	2f00      	cmp	r7, #0
 801508c:	d146      	bne.n	801511c <lwip_netconn_do_writemore+0x174>
      err_t out_err;
      conn->write_offset += len;
 801508e:	6a23      	ldr	r3, [r4, #32]
 8015090:	441d      	add	r5, r3
 8015092:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8015094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015096:	68da      	ldr	r2, [r3, #12]
 8015098:	4295      	cmp	r5, r2
 801509a:	d000      	beq.n	801509e <lwip_netconn_do_writemore+0xf6>
 801509c:	b10e      	cbz	r6, 80150a2 <lwip_netconn_do_writemore+0xfa>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 801509e:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80150a0:	2601      	movs	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 80150a2:	6860      	ldr	r0, [r4, #4]
 80150a4:	f006 fdc4 	bl	801bc30 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80150a8:	f110 0f0c 	cmn.w	r0, #12
 80150ac:	db02      	blt.n	80150b4 <lwip_netconn_do_writemore+0x10c>
 80150ae:	f110 0f04 	cmn.w	r0, #4
 80150b2:	d13a      	bne.n	801512a <lwip_netconn_do_writemore+0x182>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 80150b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150b6:	2200      	movs	r2, #0
 80150b8:	60da      	str	r2, [r3, #12]
        err = out_err;
 80150ba:	4607      	mov	r7, r0
        write_finished = 1;
 80150bc:	2601      	movs	r6, #1
 80150be:	e034      	b.n	801512a <lwip_netconn_do_writemore+0x182>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80150c0:	4b39      	ldr	r3, [pc, #228]	; (80151a8 <lwip_netconn_do_writemore+0x200>)
 80150c2:	f240 6213 	movw	r2, #1555	; 0x613
 80150c6:	493f      	ldr	r1, [pc, #252]	; (80151c4 <lwip_netconn_do_writemore+0x21c>)
 80150c8:	4839      	ldr	r0, [pc, #228]	; (80151b0 <lwip_netconn_do_writemore+0x208>)
 80150ca:	f008 ff0c 	bl	801dee6 <iprintf>
 80150ce:	e7d1      	b.n	8015074 <lwip_netconn_do_writemore+0xcc>
      len = available;
 80150d0:	460d      	mov	r5, r1
          err = ERR_WOULDBLOCK;
 80150d2:	f06f 0706 	mvn.w	r7, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 80150d6:	b176      	cbz	r6, 80150f6 <lwip_netconn_do_writemore+0x14e>
 80150d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150da:	68db      	ldr	r3, [r3, #12]
 80150dc:	429d      	cmp	r5, r3
 80150de:	d20a      	bcs.n	80150f6 <lwip_netconn_do_writemore+0x14e>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80150e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80150e2:	b11b      	cbz	r3, 80150ec <lwip_netconn_do_writemore+0x144>
 80150e4:	462a      	mov	r2, r5
 80150e6:	2103      	movs	r1, #3
 80150e8:	4620      	mov	r0, r4
 80150ea:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80150ec:	7f23      	ldrb	r3, [r4, #28]
 80150ee:	f043 0310 	orr.w	r3, r3, #16
 80150f2:	7723      	strb	r3, [r4, #28]
 80150f4:	e7c9      	b.n	801508a <lwip_netconn_do_writemore+0xe2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80150f6:	6863      	ldr	r3, [r4, #4]
 80150f8:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 80150fc:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015100:	4291      	cmp	r1, r2
 8015102:	d903      	bls.n	801510c <lwip_netconn_do_writemore+0x164>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8015104:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8015108:	2b04      	cmp	r3, #4
 801510a:	d9be      	bls.n	801508a <lwip_netconn_do_writemore+0xe2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 801510c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801510e:	2b00      	cmp	r3, #0
 8015110:	d0bb      	beq.n	801508a <lwip_netconn_do_writemore+0xe2>
 8015112:	462a      	mov	r2, r5
 8015114:	2103      	movs	r1, #3
 8015116:	4620      	mov	r0, r4
 8015118:	4798      	blx	r3
 801511a:	e7b6      	b.n	801508a <lwip_netconn_do_writemore+0xe2>
      }
    } else if (err == ERR_MEM) {
 801511c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8015120:	d01f      	beq.n	8015162 <lwip_netconn_do_writemore+0x1ba>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 8015122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015124:	2200      	movs	r2, #0
 8015126:	60da      	str	r2, [r3, #12]
      write_finished = 1;
 8015128:	2601      	movs	r6, #1
    }
  }
  if (write_finished) {
 801512a:	2e00      	cmp	r6, #0
 801512c:	d037      	beq.n	801519e <lwip_netconn_do_writemore+0x1f6>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801512e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015130:	6818      	ldr	r0, [r3, #0]
 8015132:	f100 050c 	add.w	r5, r0, #12
    conn->current_msg->err = err;
 8015136:	711f      	strb	r7, [r3, #4]
    conn->current_msg = NULL;
 8015138:	2300      	movs	r3, #0
 801513a:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 801513c:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 801513e:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8015140:	b14c      	cbz	r4, 8015156 <lwip_netconn_do_writemore+0x1ae>
 8015142:	f007 fc69 	bl	801ca18 <sys_arch_protect>
 8015146:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801514a:	f113 0f0c 	cmn.w	r3, #12
 801514e:	db00      	blt.n	8015152 <lwip_netconn_do_writemore+0x1aa>
 8015150:	7227      	strb	r7, [r4, #8]
 8015152:	f007 fc6d 	bl	801ca30 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8015156:	f1b8 0f00 	cmp.w	r8, #0
 801515a:	d11a      	bne.n	8015192 <lwip_netconn_do_writemore+0x1ea>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 801515c:	2000      	movs	r0, #0
}
 801515e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      err_t out_err = tcp_output(conn->pcb.tcp);
 8015162:	6860      	ldr	r0, [r4, #4]
 8015164:	f006 fd64 	bl	801bc30 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8015168:	f110 0f0c 	cmn.w	r0, #12
 801516c:	db0b      	blt.n	8015186 <lwip_netconn_do_writemore+0x1de>
 801516e:	f110 0f04 	cmn.w	r0, #4
 8015172:	d008      	beq.n	8015186 <lwip_netconn_do_writemore+0x1de>
      } else if (dontblock) {
 8015174:	2e00      	cmp	r6, #0
 8015176:	d0d8      	beq.n	801512a <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 8015178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801517a:	2200      	movs	r2, #0
 801517c:	60da      	str	r2, [r3, #12]
        write_finished = 1;
 801517e:	2601      	movs	r6, #1
        err = ERR_WOULDBLOCK;
 8015180:	f06f 0706 	mvn.w	r7, #6
 8015184:	e7d1      	b.n	801512a <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 8015186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015188:	2200      	movs	r2, #0
 801518a:	60da      	str	r2, [r3, #12]
        err = out_err;
 801518c:	4607      	mov	r7, r0
        write_finished = 1;
 801518e:	2601      	movs	r6, #1
        conn->current_msg->msg.w.len = 0;
 8015190:	e7cb      	b.n	801512a <lwip_netconn_do_writemore+0x182>
      sys_sem_signal(op_completed_sem);
 8015192:	4628      	mov	r0, r5
 8015194:	f007 fbf0 	bl	801c978 <sys_sem_signal>
  return ERR_OK;
 8015198:	2000      	movs	r0, #0
 801519a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 801519e:	f04f 30ff 	mov.w	r0, #4294967295
 80151a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151a6:	bf00      	nop
 80151a8:	0801ee04 	.word	0x0801ee04
 80151ac:	0801ec18 	.word	0x0801ec18
 80151b0:	0801e950 	.word	0x0801e950
 80151b4:	0801eabc 	.word	0x0801eabc
 80151b8:	0801eacc 	.word	0x0801eacc
 80151bc:	0801ec38 	.word	0x0801ec38
 80151c0:	0801ec50 	.word	0x0801ec50
 80151c4:	0801ec84 	.word	0x0801ec84

080151c8 <lwip_netconn_do_close_internal>:
{
 80151c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151cc:	4688      	mov	r8, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80151ce:	4604      	mov	r4, r0
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d035      	beq.n	8015240 <lwip_netconn_do_close_internal+0x78>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80151d4:	7823      	ldrb	r3, [r4, #0]
 80151d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80151da:	2b10      	cmp	r3, #16
 80151dc:	d006      	beq.n	80151ec <lwip_netconn_do_close_internal+0x24>
 80151de:	4b83      	ldr	r3, [pc, #524]	; (80153ec <lwip_netconn_do_close_internal+0x224>)
 80151e0:	f44f 7251 	mov.w	r2, #836	; 0x344
 80151e4:	4982      	ldr	r1, [pc, #520]	; (80153f0 <lwip_netconn_do_close_internal+0x228>)
 80151e6:	4883      	ldr	r0, [pc, #524]	; (80153f4 <lwip_netconn_do_close_internal+0x22c>)
 80151e8:	f008 fe7d 	bl	801dee6 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80151ec:	7863      	ldrb	r3, [r4, #1]
 80151ee:	2b04      	cmp	r3, #4
 80151f0:	d006      	beq.n	8015200 <lwip_netconn_do_close_internal+0x38>
 80151f2:	4b7e      	ldr	r3, [pc, #504]	; (80153ec <lwip_netconn_do_close_internal+0x224>)
 80151f4:	f240 3245 	movw	r2, #837	; 0x345
 80151f8:	497f      	ldr	r1, [pc, #508]	; (80153f8 <lwip_netconn_do_close_internal+0x230>)
 80151fa:	487e      	ldr	r0, [pc, #504]	; (80153f4 <lwip_netconn_do_close_internal+0x22c>)
 80151fc:	f008 fe73 	bl	801dee6 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8015200:	6863      	ldr	r3, [r4, #4]
 8015202:	b32b      	cbz	r3, 8015250 <lwip_netconn_do_close_internal+0x88>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015206:	b35b      	cbz	r3, 8015260 <lwip_netconn_do_close_internal+0x98>
  tpcb = conn->pcb.tcp;
 8015208:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 801520a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801520c:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 801520e:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8015212:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8015216:	2b03      	cmp	r3, #3
 8015218:	d02a      	beq.n	8015270 <lwip_netconn_do_close_internal+0xa8>
  } else if (shut_rx &&
 801521a:	f1ba 0f00 	cmp.w	sl, #0
 801521e:	d006      	beq.n	801522e <lwip_netconn_do_close_internal+0x66>
             ((tpcb->state == FIN_WAIT_1) ||
 8015220:	7d2a      	ldrb	r2, [r5, #20]
 8015222:	1f53      	subs	r3, r2, #5
 8015224:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 8015226:	2b01      	cmp	r3, #1
 8015228:	d93a      	bls.n	80152a0 <lwip_netconn_do_close_internal+0xd8>
              (tpcb->state == FIN_WAIT_2) ||
 801522a:	2a08      	cmp	r2, #8
 801522c:	d03a      	beq.n	80152a4 <lwip_netconn_do_close_internal+0xdc>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801522e:	f1b9 0f00 	cmp.w	r9, #0
 8015232:	d039      	beq.n	80152a8 <lwip_netconn_do_close_internal+0xe0>
 8015234:	7eab      	ldrb	r3, [r5, #26]
 8015236:	f013 0f10 	tst.w	r3, #16
 801523a:	d137      	bne.n	80152ac <lwip_netconn_do_close_internal+0xe4>
    close = 0;
 801523c:	2700      	movs	r7, #0
 801523e:	e018      	b.n	8015272 <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8015240:	4b6a      	ldr	r3, [pc, #424]	; (80153ec <lwip_netconn_do_close_internal+0x224>)
 8015242:	f240 3243 	movw	r2, #835	; 0x343
 8015246:	496d      	ldr	r1, [pc, #436]	; (80153fc <lwip_netconn_do_close_internal+0x234>)
 8015248:	486a      	ldr	r0, [pc, #424]	; (80153f4 <lwip_netconn_do_close_internal+0x22c>)
 801524a:	f008 fe4c 	bl	801dee6 <iprintf>
 801524e:	e7c1      	b.n	80151d4 <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8015250:	4b66      	ldr	r3, [pc, #408]	; (80153ec <lwip_netconn_do_close_internal+0x224>)
 8015252:	f240 3246 	movw	r2, #838	; 0x346
 8015256:	496a      	ldr	r1, [pc, #424]	; (8015400 <lwip_netconn_do_close_internal+0x238>)
 8015258:	4866      	ldr	r0, [pc, #408]	; (80153f4 <lwip_netconn_do_close_internal+0x22c>)
 801525a:	f008 fe44 	bl	801dee6 <iprintf>
 801525e:	e7d1      	b.n	8015204 <lwip_netconn_do_close_internal+0x3c>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015260:	4b62      	ldr	r3, [pc, #392]	; (80153ec <lwip_netconn_do_close_internal+0x224>)
 8015262:	f240 3247 	movw	r2, #839	; 0x347
 8015266:	4967      	ldr	r1, [pc, #412]	; (8015404 <lwip_netconn_do_close_internal+0x23c>)
 8015268:	4862      	ldr	r0, [pc, #392]	; (80153f4 <lwip_netconn_do_close_internal+0x22c>)
 801526a:	f008 fe3c 	bl	801dee6 <iprintf>
 801526e:	e7cb      	b.n	8015208 <lwip_netconn_do_close_internal+0x40>
    close = 1;
 8015270:	2701      	movs	r7, #1
  if (close) {
 8015272:	b9ef      	cbnz	r7, 80152b0 <lwip_netconn_do_close_internal+0xe8>
  if (tpcb->state == LISTEN) {
 8015274:	7d2b      	ldrb	r3, [r5, #20]
 8015276:	2b01      	cmp	r3, #1
 8015278:	d01f      	beq.n	80152ba <lwip_netconn_do_close_internal+0xf2>
    if (shut_rx) {
 801527a:	f1ba 0f00 	cmp.w	sl, #0
 801527e:	d121      	bne.n	80152c4 <lwip_netconn_do_close_internal+0xfc>
    if (shut_tx) {
 8015280:	f1b9 0f00 	cmp.w	r9, #0
 8015284:	d127      	bne.n	80152d6 <lwip_netconn_do_close_internal+0x10e>
    if (close) {
 8015286:	bb5f      	cbnz	r7, 80152e0 <lwip_netconn_do_close_internal+0x118>
  if (close) {
 8015288:	b3a7      	cbz	r7, 80152f4 <lwip_netconn_do_close_internal+0x12c>
      err = tcp_close(tpcb);
 801528a:	4628      	mov	r0, r5
 801528c:	f004 f8fe 	bl	801948c <tcp_close>
 8015290:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8015292:	2e00      	cmp	r6, #0
 8015294:	d042      	beq.n	801531c <lwip_netconn_do_close_internal+0x154>
    if (err == ERR_MEM) {
 8015296:	f1b6 3fff 	cmp.w	r6, #4294967295
 801529a:	d032      	beq.n	8015302 <lwip_netconn_do_close_internal+0x13a>
      close_finished = 1;
 801529c:	2301      	movs	r3, #1
 801529e:	e03e      	b.n	801531e <lwip_netconn_do_close_internal+0x156>
    close = 1;
 80152a0:	2701      	movs	r7, #1
 80152a2:	e7e6      	b.n	8015272 <lwip_netconn_do_close_internal+0xaa>
 80152a4:	2701      	movs	r7, #1
 80152a6:	e7e4      	b.n	8015272 <lwip_netconn_do_close_internal+0xaa>
    close = 0;
 80152a8:	2700      	movs	r7, #0
 80152aa:	e7e2      	b.n	8015272 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 80152ac:	2701      	movs	r7, #1
 80152ae:	e7e0      	b.n	8015272 <lwip_netconn_do_close_internal+0xaa>
    tcp_arg(tpcb, NULL);
 80152b0:	2100      	movs	r1, #0
 80152b2:	4628      	mov	r0, r5
 80152b4:	f003 fd59 	bl	8018d6a <tcp_arg>
 80152b8:	e7dc      	b.n	8015274 <lwip_netconn_do_close_internal+0xac>
    tcp_accept(tpcb, NULL);
 80152ba:	2100      	movs	r1, #0
 80152bc:	4628      	mov	r0, r5
 80152be:	f003 fda3 	bl	8018e08 <tcp_accept>
 80152c2:	e7e1      	b.n	8015288 <lwip_netconn_do_close_internal+0xc0>
      tcp_recv(tpcb, NULL);
 80152c4:	2100      	movs	r1, #0
 80152c6:	4628      	mov	r0, r5
 80152c8:	f003 fd52 	bl	8018d70 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80152cc:	2100      	movs	r1, #0
 80152ce:	4628      	mov	r0, r5
 80152d0:	f003 fd9a 	bl	8018e08 <tcp_accept>
 80152d4:	e7d4      	b.n	8015280 <lwip_netconn_do_close_internal+0xb8>
      tcp_sent(tpcb, NULL);
 80152d6:	2100      	movs	r1, #0
 80152d8:	4628      	mov	r0, r5
 80152da:	f003 fd63 	bl	8018da4 <tcp_sent>
 80152de:	e7d2      	b.n	8015286 <lwip_netconn_do_close_internal+0xbe>
      tcp_poll(tpcb, NULL, 0);
 80152e0:	2200      	movs	r2, #0
 80152e2:	4611      	mov	r1, r2
 80152e4:	4628      	mov	r0, r5
 80152e6:	f003 fd97 	bl	8018e18 <tcp_poll>
      tcp_err(tpcb, NULL);
 80152ea:	2100      	movs	r1, #0
 80152ec:	4628      	mov	r0, r5
 80152ee:	f003 fd71 	bl	8018dd4 <tcp_err>
 80152f2:	e7c9      	b.n	8015288 <lwip_netconn_do_close_internal+0xc0>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80152f4:	464a      	mov	r2, r9
 80152f6:	4651      	mov	r1, sl
 80152f8:	4628      	mov	r0, r5
 80152fa:	f004 f96f 	bl	80195dc <tcp_shutdown>
 80152fe:	4606      	mov	r6, r0
 8015300:	e7c7      	b.n	8015292 <lwip_netconn_do_close_internal+0xca>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8015302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015304:	7a5b      	ldrb	r3, [r3, #9]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d13f      	bne.n	801538a <lwip_netconn_do_close_internal+0x1c2>
        if (close) {
 801530a:	b90f      	cbnz	r7, 8015310 <lwip_netconn_do_close_internal+0x148>
        close_finished = 1;
 801530c:	2301      	movs	r3, #1
 801530e:	e006      	b.n	801531e <lwip_netconn_do_close_internal+0x156>
          tcp_abort(tpcb);
 8015310:	4628      	mov	r0, r5
 8015312:	f004 fa0b 	bl	801972c <tcp_abort>
        close_finished = 1;
 8015316:	463b      	mov	r3, r7
          err = ERR_OK;
 8015318:	2600      	movs	r6, #0
 801531a:	e000      	b.n	801531e <lwip_netconn_do_close_internal+0x156>
    close_finished = 1;
 801531c:	2301      	movs	r3, #1
  if (close_finished) {
 801531e:	2b00      	cmp	r3, #0
 8015320:	d03a      	beq.n	8015398 <lwip_netconn_do_close_internal+0x1d0>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015324:	681d      	ldr	r5, [r3, #0]
 8015326:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 8015328:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 801532a:	2300      	movs	r3, #0
 801532c:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 801532e:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8015330:	b9ce      	cbnz	r6, 8015366 <lwip_netconn_do_close_internal+0x19e>
      if (close) {
 8015332:	b137      	cbz	r7, 8015342 <lwip_netconn_do_close_internal+0x17a>
        conn->pcb.tcp = NULL;
 8015334:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8015336:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015338:	b11b      	cbz	r3, 8015342 <lwip_netconn_do_close_internal+0x17a>
 801533a:	2200      	movs	r2, #0
 801533c:	2104      	movs	r1, #4
 801533e:	4620      	mov	r0, r4
 8015340:	4798      	blx	r3
      if (shut_rx) {
 8015342:	f1ba 0f00 	cmp.w	sl, #0
 8015346:	d005      	beq.n	8015354 <lwip_netconn_do_close_internal+0x18c>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015348:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801534a:	b11b      	cbz	r3, 8015354 <lwip_netconn_do_close_internal+0x18c>
 801534c:	2200      	movs	r2, #0
 801534e:	4611      	mov	r1, r2
 8015350:	4620      	mov	r0, r4
 8015352:	4798      	blx	r3
      if (shut_tx) {
 8015354:	f1b9 0f00 	cmp.w	r9, #0
 8015358:	d005      	beq.n	8015366 <lwip_netconn_do_close_internal+0x19e>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801535a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801535c:	b11b      	cbz	r3, 8015366 <lwip_netconn_do_close_internal+0x19e>
 801535e:	2200      	movs	r2, #0
 8015360:	2102      	movs	r1, #2
 8015362:	4620      	mov	r0, r4
 8015364:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 8015366:	b14c      	cbz	r4, 801537c <lwip_netconn_do_close_internal+0x1b4>
 8015368:	f007 fb56 	bl	801ca18 <sys_arch_protect>
 801536c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8015370:	f113 0f0c 	cmn.w	r3, #12
 8015374:	db00      	blt.n	8015378 <lwip_netconn_do_close_internal+0x1b0>
 8015376:	7226      	strb	r6, [r4, #8]
 8015378:	f007 fb5a 	bl	801ca30 <sys_arch_unprotect>
    if (delayed)
 801537c:	f1b8 0f00 	cmp.w	r8, #0
 8015380:	d105      	bne.n	801538e <lwip_netconn_do_close_internal+0x1c6>
    return ERR_OK;
 8015382:	2600      	movs	r6, #0
}
 8015384:	4630      	mov	r0, r6
 8015386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t close_finished = 0;
 801538a:	2300      	movs	r3, #0
 801538c:	e7c7      	b.n	801531e <lwip_netconn_do_close_internal+0x156>
      sys_sem_signal(op_completed_sem);
 801538e:	4628      	mov	r0, r5
 8015390:	f007 faf2 	bl	801c978 <sys_sem_signal>
    return ERR_OK;
 8015394:	2600      	movs	r6, #0
 8015396:	e7f5      	b.n	8015384 <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8015398:	7d2b      	ldrb	r3, [r5, #20]
 801539a:	2b01      	cmp	r3, #1
 801539c:	d019      	beq.n	80153d2 <lwip_netconn_do_close_internal+0x20a>
    if (shut_tx) {
 801539e:	f1b9 0f00 	cmp.w	r9, #0
 80153a2:	d11e      	bne.n	80153e2 <lwip_netconn_do_close_internal+0x21a>
    tcp_poll(tpcb, poll_tcp, 1);
 80153a4:	2201      	movs	r2, #1
 80153a6:	4918      	ldr	r1, [pc, #96]	; (8015408 <lwip_netconn_do_close_internal+0x240>)
 80153a8:	4628      	mov	r0, r5
 80153aa:	f003 fd35 	bl	8018e18 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80153ae:	4917      	ldr	r1, [pc, #92]	; (801540c <lwip_netconn_do_close_internal+0x244>)
 80153b0:	4628      	mov	r0, r5
 80153b2:	f003 fd0f 	bl	8018dd4 <tcp_err>
    tcp_arg(tpcb, conn);
 80153b6:	4621      	mov	r1, r4
 80153b8:	4628      	mov	r0, r5
 80153ba:	f003 fcd6 	bl	8018d6a <tcp_arg>
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80153be:	2e00      	cmp	r6, #0
 80153c0:	d1e0      	bne.n	8015384 <lwip_netconn_do_close_internal+0x1bc>
 80153c2:	4b0a      	ldr	r3, [pc, #40]	; (80153ec <lwip_netconn_do_close_internal+0x224>)
 80153c4:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80153c8:	4911      	ldr	r1, [pc, #68]	; (8015410 <lwip_netconn_do_close_internal+0x248>)
 80153ca:	480a      	ldr	r0, [pc, #40]	; (80153f4 <lwip_netconn_do_close_internal+0x22c>)
 80153cc:	f008 fd8b 	bl	801dee6 <iprintf>
 80153d0:	e7d8      	b.n	8015384 <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80153d2:	4b06      	ldr	r3, [pc, #24]	; (80153ec <lwip_netconn_do_close_internal+0x224>)
 80153d4:	f240 32e3 	movw	r2, #995	; 0x3e3
 80153d8:	490e      	ldr	r1, [pc, #56]	; (8015414 <lwip_netconn_do_close_internal+0x24c>)
 80153da:	4806      	ldr	r0, [pc, #24]	; (80153f4 <lwip_netconn_do_close_internal+0x22c>)
 80153dc:	f008 fd83 	bl	801dee6 <iprintf>
 80153e0:	e7dd      	b.n	801539e <lwip_netconn_do_close_internal+0x1d6>
      tcp_sent(tpcb, sent_tcp);
 80153e2:	490d      	ldr	r1, [pc, #52]	; (8015418 <lwip_netconn_do_close_internal+0x250>)
 80153e4:	4628      	mov	r0, r5
 80153e6:	f003 fcdd 	bl	8018da4 <tcp_sent>
 80153ea:	e7db      	b.n	80153a4 <lwip_netconn_do_close_internal+0x1dc>
 80153ec:	0801ee04 	.word	0x0801ee04
 80153f0:	0801eb20 	.word	0x0801eb20
 80153f4:	0801e950 	.word	0x0801e950
 80153f8:	0801eb40 	.word	0x0801eb40
 80153fc:	0801e988 	.word	0x0801e988
 8015400:	0801eb64 	.word	0x0801eb64
 8015404:	0801eacc 	.word	0x0801eacc
 8015408:	0801541d 	.word	0x0801541d
 801540c:	08014e69 	.word	0x08014e69
 8015410:	0801eb9c 	.word	0x0801eb9c
 8015414:	0801eb78 	.word	0x0801eb78
 8015418:	080154a1 	.word	0x080154a1

0801541c <poll_tcp>:
{
 801541c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801541e:	4604      	mov	r4, r0
 8015420:	b1f8      	cbz	r0, 8015462 <poll_tcp+0x46>
  if (conn->state == NETCONN_WRITE) {
 8015422:	7863      	ldrb	r3, [r4, #1]
 8015424:	2b01      	cmp	r3, #1
 8015426:	d024      	beq.n	8015472 <poll_tcp+0x56>
  } else if (conn->state == NETCONN_CLOSE) {
 8015428:	2b04      	cmp	r3, #4
 801542a:	d027      	beq.n	801547c <poll_tcp+0x60>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801542c:	7f23      	ldrb	r3, [r4, #28]
 801542e:	f013 0f10 	tst.w	r3, #16
 8015432:	d014      	beq.n	801545e <poll_tcp+0x42>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015434:	6862      	ldr	r2, [r4, #4]
 8015436:	b192      	cbz	r2, 801545e <poll_tcp+0x42>
 8015438:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
 801543c:	f240 51a1 	movw	r1, #1441	; 0x5a1
 8015440:	4288      	cmp	r0, r1
 8015442:	d90c      	bls.n	801545e <poll_tcp+0x42>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8015444:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015448:	2a04      	cmp	r2, #4
 801544a:	d808      	bhi.n	801545e <poll_tcp+0x42>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 801544c:	f023 0310 	bic.w	r3, r3, #16
 8015450:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015454:	b11b      	cbz	r3, 801545e <poll_tcp+0x42>
 8015456:	2200      	movs	r2, #0
 8015458:	2102      	movs	r1, #2
 801545a:	4620      	mov	r0, r4
 801545c:	4798      	blx	r3
}
 801545e:	2000      	movs	r0, #0
 8015460:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015462:	4b0c      	ldr	r3, [pc, #48]	; (8015494 <poll_tcp+0x78>)
 8015464:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015468:	490b      	ldr	r1, [pc, #44]	; (8015498 <poll_tcp+0x7c>)
 801546a:	480c      	ldr	r0, [pc, #48]	; (801549c <poll_tcp+0x80>)
 801546c:	f008 fd3b 	bl	801dee6 <iprintf>
 8015470:	e7d7      	b.n	8015422 <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015472:	2101      	movs	r1, #1
 8015474:	4620      	mov	r0, r4
 8015476:	f7ff fd97 	bl	8014fa8 <lwip_netconn_do_writemore>
 801547a:	e7d7      	b.n	801542c <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 801547c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801547e:	b11b      	cbz	r3, 8015488 <poll_tcp+0x6c>
 8015480:	7a5a      	ldrb	r2, [r3, #9]
 8015482:	b10a      	cbz	r2, 8015488 <poll_tcp+0x6c>
      conn->current_msg->msg.sd.polls_left--;
 8015484:	3a01      	subs	r2, #1
 8015486:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8015488:	2101      	movs	r1, #1
 801548a:	4620      	mov	r0, r4
 801548c:	f7ff fe9c 	bl	80151c8 <lwip_netconn_do_close_internal>
 8015490:	e7cc      	b.n	801542c <poll_tcp+0x10>
 8015492:	bf00      	nop
 8015494:	0801ee04 	.word	0x0801ee04
 8015498:	0801eabc 	.word	0x0801eabc
 801549c:	0801e950 	.word	0x0801e950

080154a0 <sent_tcp>:
{
 80154a0:	b538      	push	{r3, r4, r5, lr}
 80154a2:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80154a4:	4604      	mov	r4, r0
 80154a6:	b1e8      	cbz	r0, 80154e4 <sent_tcp+0x44>
  if (conn) {
 80154a8:	b1d4      	cbz	r4, 80154e0 <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 80154aa:	7863      	ldrb	r3, [r4, #1]
 80154ac:	2b01      	cmp	r3, #1
 80154ae:	d021      	beq.n	80154f4 <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 80154b0:	2b04      	cmp	r3, #4
 80154b2:	d024      	beq.n	80154fe <sent_tcp+0x5e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80154b4:	6863      	ldr	r3, [r4, #4]
 80154b6:	b19b      	cbz	r3, 80154e0 <sent_tcp+0x40>
 80154b8:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 80154bc:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80154c0:	4291      	cmp	r1, r2
 80154c2:	d90d      	bls.n	80154e0 <sent_tcp+0x40>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80154c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80154c8:	2b04      	cmp	r3, #4
 80154ca:	d809      	bhi.n	80154e0 <sent_tcp+0x40>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80154cc:	7f23      	ldrb	r3, [r4, #28]
 80154ce:	f023 0310 	bic.w	r3, r3, #16
 80154d2:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80154d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80154d6:	b11b      	cbz	r3, 80154e0 <sent_tcp+0x40>
 80154d8:	462a      	mov	r2, r5
 80154da:	2102      	movs	r1, #2
 80154dc:	4620      	mov	r0, r4
 80154de:	4798      	blx	r3
}
 80154e0:	2000      	movs	r0, #0
 80154e2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80154e4:	4b08      	ldr	r3, [pc, #32]	; (8015508 <sent_tcp+0x68>)
 80154e6:	f240 1261 	movw	r2, #353	; 0x161
 80154ea:	4908      	ldr	r1, [pc, #32]	; (801550c <sent_tcp+0x6c>)
 80154ec:	4808      	ldr	r0, [pc, #32]	; (8015510 <sent_tcp+0x70>)
 80154ee:	f008 fcfa 	bl	801dee6 <iprintf>
 80154f2:	e7d9      	b.n	80154a8 <sent_tcp+0x8>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80154f4:	2101      	movs	r1, #1
 80154f6:	4620      	mov	r0, r4
 80154f8:	f7ff fd56 	bl	8014fa8 <lwip_netconn_do_writemore>
 80154fc:	e7da      	b.n	80154b4 <sent_tcp+0x14>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80154fe:	2101      	movs	r1, #1
 8015500:	4620      	mov	r0, r4
 8015502:	f7ff fe61 	bl	80151c8 <lwip_netconn_do_close_internal>
 8015506:	e7d5      	b.n	80154b4 <sent_tcp+0x14>
 8015508:	0801ee04 	.word	0x0801ee04
 801550c:	0801eabc 	.word	0x0801eabc
 8015510:	0801e950 	.word	0x0801e950

08015514 <recv_tcp>:
{
 8015514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015518:	4604      	mov	r4, r0
 801551a:	4615      	mov	r5, r2
 801551c:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801551e:	460f      	mov	r7, r1
 8015520:	b1e9      	cbz	r1, 801555e <recv_tcp+0x4a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8015522:	b31c      	cbz	r4, 801556c <recv_tcp+0x58>
  if (conn == NULL) {
 8015524:	2c00      	cmp	r4, #0
 8015526:	d04a      	beq.n	80155be <recv_tcp+0xaa>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8015528:	6863      	ldr	r3, [r4, #4]
 801552a:	429f      	cmp	r7, r3
 801552c:	d006      	beq.n	801553c <recv_tcp+0x28>
 801552e:	4b28      	ldr	r3, [pc, #160]	; (80155d0 <recv_tcp+0xbc>)
 8015530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015534:	4927      	ldr	r1, [pc, #156]	; (80155d4 <recv_tcp+0xc0>)
 8015536:	4828      	ldr	r0, [pc, #160]	; (80155d8 <recv_tcp+0xc4>)
 8015538:	f008 fcd5 	bl	801dee6 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 801553c:	f104 0610 	add.w	r6, r4, #16
 8015540:	4630      	mov	r0, r6
 8015542:	f007 f9d9 	bl	801c8f8 <sys_mbox_valid>
 8015546:	b9c0      	cbnz	r0, 801557a <recv_tcp+0x66>
    if (p != NULL) {
 8015548:	2d00      	cmp	r5, #0
 801554a:	d03b      	beq.n	80155c4 <recv_tcp+0xb0>
      tcp_recved(pcb, p->tot_len);
 801554c:	8929      	ldrh	r1, [r5, #8]
 801554e:	4638      	mov	r0, r7
 8015550:	f003 fb9e 	bl	8018c90 <tcp_recved>
      pbuf_free(p);
 8015554:	4628      	mov	r0, r5
 8015556:	f002 fef9 	bl	801834c <pbuf_free>
    return ERR_OK;
 801555a:	2500      	movs	r5, #0
 801555c:	e01e      	b.n	801559c <recv_tcp+0x88>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801555e:	4b1c      	ldr	r3, [pc, #112]	; (80155d0 <recv_tcp+0xbc>)
 8015560:	22f9      	movs	r2, #249	; 0xf9
 8015562:	491e      	ldr	r1, [pc, #120]	; (80155dc <recv_tcp+0xc8>)
 8015564:	481c      	ldr	r0, [pc, #112]	; (80155d8 <recv_tcp+0xc4>)
 8015566:	f008 fcbe 	bl	801dee6 <iprintf>
 801556a:	e7da      	b.n	8015522 <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801556c:	4b18      	ldr	r3, [pc, #96]	; (80155d0 <recv_tcp+0xbc>)
 801556e:	22fa      	movs	r2, #250	; 0xfa
 8015570:	491b      	ldr	r1, [pc, #108]	; (80155e0 <recv_tcp+0xcc>)
 8015572:	4819      	ldr	r0, [pc, #100]	; (80155d8 <recv_tcp+0xc4>)
 8015574:	f008 fcb7 	bl	801dee6 <iprintf>
 8015578:	e7d4      	b.n	8015524 <recv_tcp+0x10>
  if (err != ERR_OK) {
 801557a:	f1b8 0f00 	cmp.w	r8, #0
 801557e:	d110      	bne.n	80155a2 <recv_tcp+0x8e>
  if (p != NULL) {
 8015580:	b1dd      	cbz	r5, 80155ba <recv_tcp+0xa6>
    len = p->tot_len;
 8015582:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8015584:	4629      	mov	r1, r5
 8015586:	4630      	mov	r0, r6
 8015588:	f007 f96d 	bl	801c866 <sys_mbox_trypost>
 801558c:	4605      	mov	r5, r0
 801558e:	b9d8      	cbnz	r0, 80155c8 <recv_tcp+0xb4>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8015590:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015592:	b11b      	cbz	r3, 801559c <recv_tcp+0x88>
 8015594:	463a      	mov	r2, r7
 8015596:	2100      	movs	r1, #0
 8015598:	4620      	mov	r0, r4
 801559a:	4798      	blx	r3
}
 801559c:	4628      	mov	r0, r5
 801559e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 80155a2:	f007 fa39 	bl	801ca18 <sys_arch_protect>
 80155a6:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80155aa:	f113 0f0c 	cmn.w	r3, #12
 80155ae:	db01      	blt.n	80155b4 <recv_tcp+0xa0>
 80155b0:	f884 8008 	strb.w	r8, [r4, #8]
 80155b4:	f007 fa3c 	bl	801ca30 <sys_arch_unprotect>
 80155b8:	e7e2      	b.n	8015580 <recv_tcp+0x6c>
    len = 0;
 80155ba:	2700      	movs	r7, #0
 80155bc:	e7e2      	b.n	8015584 <recv_tcp+0x70>
    return ERR_VAL;
 80155be:	f06f 0505 	mvn.w	r5, #5
 80155c2:	e7eb      	b.n	801559c <recv_tcp+0x88>
    return ERR_OK;
 80155c4:	2500      	movs	r5, #0
 80155c6:	e7e9      	b.n	801559c <recv_tcp+0x88>
    return ERR_MEM;
 80155c8:	f04f 35ff 	mov.w	r5, #4294967295
 80155cc:	e7e6      	b.n	801559c <recv_tcp+0x88>
 80155ce:	bf00      	nop
 80155d0:	0801ee04 	.word	0x0801ee04
 80155d4:	0801ede4 	.word	0x0801ede4
 80155d8:	0801e950 	.word	0x0801e950
 80155dc:	0801eda0 	.word	0x0801eda0
 80155e0:	0801edc4 	.word	0x0801edc4

080155e4 <lwip_netconn_do_newconn>:
{
 80155e4:	b510      	push	{r4, lr}
 80155e6:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 80155e8:	2300      	movs	r3, #0
 80155ea:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80155ec:	6803      	ldr	r3, [r0, #0]
 80155ee:	685b      	ldr	r3, [r3, #4]
 80155f0:	b17b      	cbz	r3, 8015612 <lwip_netconn_do_newconn+0x2e>
  TCPIP_APIMSG_ACK(msg);
 80155f2:	6823      	ldr	r3, [r4, #0]
 80155f4:	b163      	cbz	r3, 8015610 <lwip_netconn_do_newconn+0x2c>
 80155f6:	f007 fa0f 	bl	801ca18 <sys_arch_protect>
 80155fa:	6823      	ldr	r3, [r4, #0]
 80155fc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015600:	f112 0f0c 	cmn.w	r2, #12
 8015604:	db02      	blt.n	801560c <lwip_netconn_do_newconn+0x28>
 8015606:	f994 2004 	ldrsb.w	r2, [r4, #4]
 801560a:	721a      	strb	r2, [r3, #8]
 801560c:	f007 fa10 	bl	801ca30 <sys_arch_unprotect>
 8015610:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 8015612:	f7ff fbe5 	bl	8014de0 <pcb_new>
 8015616:	e7ec      	b.n	80155f2 <lwip_netconn_do_newconn+0xe>

08015618 <netconn_alloc>:
{
 8015618:	b570      	push	{r4, r5, r6, lr}
 801561a:	4605      	mov	r5, r0
 801561c:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 801561e:	2007      	movs	r0, #7
 8015620:	f002 fca4 	bl	8017f6c <memp_malloc>
  if (conn == NULL) {
 8015624:	4604      	mov	r4, r0
 8015626:	b318      	cbz	r0, 8015670 <netconn_alloc+0x58>
  conn->last_err = ERR_OK;
 8015628:	2300      	movs	r3, #0
 801562a:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 801562c:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 801562e:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8015630:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8015634:	2d10      	cmp	r5, #16
 8015636:	d001      	beq.n	801563c <netconn_alloc+0x24>
 8015638:	2d20      	cmp	r5, #32
 801563a:	d11b      	bne.n	8015674 <netconn_alloc+0x5c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801563c:	f104 0510 	add.w	r5, r4, #16
 8015640:	2106      	movs	r1, #6
 8015642:	4628      	mov	r0, r5
 8015644:	f007 f8e8 	bl	801c818 <sys_mbox_new>
 8015648:	b9d8      	cbnz	r0, 8015682 <netconn_alloc+0x6a>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801564a:	2100      	movs	r1, #0
 801564c:	f104 000c 	add.w	r0, r4, #12
 8015650:	f007 f95b 	bl	801c90a <sys_sem_new>
 8015654:	b9d8      	cbnz	r0, 801568e <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8015656:	f104 0014 	add.w	r0, r4, #20
 801565a:	f007 f953 	bl	801c904 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 801565e:	2300      	movs	r3, #0
 8015660:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8015662:	f04f 32ff 	mov.w	r2, #4294967295
 8015666:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8015668:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 801566a:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 801566c:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 801566e:	7723      	strb	r3, [r4, #28]
}
 8015670:	4620      	mov	r0, r4
 8015672:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8015674:	4b08      	ldr	r3, [pc, #32]	; (8015698 <netconn_alloc+0x80>)
 8015676:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801567a:	4908      	ldr	r1, [pc, #32]	; (801569c <netconn_alloc+0x84>)
 801567c:	4808      	ldr	r0, [pc, #32]	; (80156a0 <netconn_alloc+0x88>)
 801567e:	f008 fc32 	bl	801dee6 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8015682:	4621      	mov	r1, r4
 8015684:	2007      	movs	r0, #7
 8015686:	f002 fc8b 	bl	8017fa0 <memp_free>
  return NULL;
 801568a:	2400      	movs	r4, #0
 801568c:	e7f0      	b.n	8015670 <netconn_alloc+0x58>
    sys_mbox_free(&conn->recvmbox);
 801568e:	4628      	mov	r0, r5
 8015690:	f007 f8d4 	bl	801c83c <sys_mbox_free>
    goto free_and_return;
 8015694:	e7f5      	b.n	8015682 <netconn_alloc+0x6a>
 8015696:	bf00      	nop
 8015698:	0801ee04 	.word	0x0801ee04
 801569c:	0801ecb0 	.word	0x0801ecb0
 80156a0:	0801e950 	.word	0x0801e950

080156a4 <netconn_free>:
{
 80156a4:	b538      	push	{r3, r4, r5, lr}
 80156a6:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80156a8:	6843      	ldr	r3, [r0, #4]
 80156aa:	b133      	cbz	r3, 80156ba <netconn_free+0x16>
 80156ac:	4b16      	ldr	r3, [pc, #88]	; (8015708 <netconn_free+0x64>)
 80156ae:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80156b2:	4916      	ldr	r1, [pc, #88]	; (801570c <netconn_free+0x68>)
 80156b4:	4816      	ldr	r0, [pc, #88]	; (8015710 <netconn_free+0x6c>)
 80156b6:	f008 fc16 	bl	801dee6 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80156ba:	f104 0010 	add.w	r0, r4, #16
 80156be:	f007 f91b 	bl	801c8f8 <sys_mbox_valid>
 80156c2:	b988      	cbnz	r0, 80156e8 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80156c4:	f104 0014 	add.w	r0, r4, #20
 80156c8:	f007 f916 	bl	801c8f8 <sys_mbox_valid>
 80156cc:	b9a0      	cbnz	r0, 80156f8 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 80156ce:	f104 050c 	add.w	r5, r4, #12
 80156d2:	4628      	mov	r0, r5
 80156d4:	f007 f955 	bl	801c982 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80156d8:	4628      	mov	r0, r5
 80156da:	f007 f95d 	bl	801c998 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 80156de:	4621      	mov	r1, r4
 80156e0:	2007      	movs	r0, #7
 80156e2:	f002 fc5d 	bl	8017fa0 <memp_free>
 80156e6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80156e8:	4b07      	ldr	r3, [pc, #28]	; (8015708 <netconn_free+0x64>)
 80156ea:	f240 22e2 	movw	r2, #738	; 0x2e2
 80156ee:	4909      	ldr	r1, [pc, #36]	; (8015714 <netconn_free+0x70>)
 80156f0:	4807      	ldr	r0, [pc, #28]	; (8015710 <netconn_free+0x6c>)
 80156f2:	f008 fbf8 	bl	801dee6 <iprintf>
 80156f6:	e7e5      	b.n	80156c4 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80156f8:	4b03      	ldr	r3, [pc, #12]	; (8015708 <netconn_free+0x64>)
 80156fa:	f240 22e5 	movw	r2, #741	; 0x2e5
 80156fe:	4906      	ldr	r1, [pc, #24]	; (8015718 <netconn_free+0x74>)
 8015700:	4803      	ldr	r0, [pc, #12]	; (8015710 <netconn_free+0x6c>)
 8015702:	f008 fbf0 	bl	801dee6 <iprintf>
 8015706:	e7e2      	b.n	80156ce <netconn_free+0x2a>
 8015708:	0801ee04 	.word	0x0801ee04
 801570c:	0801ecd8 	.word	0x0801ecd8
 8015710:	0801e950 	.word	0x0801e950
 8015714:	0801ed08 	.word	0x0801ed08
 8015718:	0801ed44 	.word	0x0801ed44

0801571c <netconn_drain>:
{
 801571c:	b570      	push	{r4, r5, r6, lr}
 801571e:	b082      	sub	sp, #8
 8015720:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8015722:	f100 0410 	add.w	r4, r0, #16
 8015726:	4620      	mov	r0, r4
 8015728:	f007 f8e6 	bl	801c8f8 <sys_mbox_valid>
 801572c:	bb38      	cbnz	r0, 801577e <netconn_drain+0x62>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 801572e:	3514      	adds	r5, #20
 8015730:	4628      	mov	r0, r5
 8015732:	f007 f8e1 	bl	801c8f8 <sys_mbox_valid>
 8015736:	2800      	cmp	r0, #0
 8015738:	d03e      	beq.n	80157b8 <netconn_drain+0x9c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801573a:	a901      	add	r1, sp, #4
 801573c:	4628      	mov	r0, r5
 801573e:	f007 f8c8 	bl	801c8d2 <sys_arch_mbox_tryfetch>
 8015742:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015746:	d031      	beq.n	80157ac <netconn_drain+0x90>
      if (mem != &netconn_aborted) {
 8015748:	9c01      	ldr	r4, [sp, #4]
 801574a:	4b1c      	ldr	r3, [pc, #112]	; (80157bc <netconn_drain+0xa0>)
 801574c:	429c      	cmp	r4, r3
 801574e:	d0f4      	beq.n	801573a <netconn_drain+0x1e>
        netconn_drain(newconn);
 8015750:	4620      	mov	r0, r4
 8015752:	f7ff ffe3 	bl	801571c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8015756:	6860      	ldr	r0, [r4, #4]
 8015758:	b118      	cbz	r0, 8015762 <netconn_drain+0x46>
          tcp_abort(newconn->pcb.tcp);
 801575a:	f003 ffe7 	bl	801972c <tcp_abort>
          newconn->pcb.tcp = NULL;
 801575e:	2300      	movs	r3, #0
 8015760:	6063      	str	r3, [r4, #4]
        netconn_free(newconn);
 8015762:	4620      	mov	r0, r4
 8015764:	f7ff ff9e 	bl	80156a4 <netconn_free>
 8015768:	e7e7      	b.n	801573a <netconn_drain+0x1e>
        if (mem != NULL) {
 801576a:	9e01      	ldr	r6, [sp, #4]
 801576c:	b13e      	cbz	r6, 801577e <netconn_drain+0x62>
          if (conn->pcb.tcp != NULL) {
 801576e:	6868      	ldr	r0, [r5, #4]
 8015770:	b110      	cbz	r0, 8015778 <netconn_drain+0x5c>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8015772:	8931      	ldrh	r1, [r6, #8]
 8015774:	f003 fa8c 	bl	8018c90 <tcp_recved>
          pbuf_free(p);
 8015778:	4630      	mov	r0, r6
 801577a:	f002 fde7 	bl	801834c <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801577e:	a901      	add	r1, sp, #4
 8015780:	4620      	mov	r0, r4
 8015782:	f007 f8a6 	bl	801c8d2 <sys_arch_mbox_tryfetch>
 8015786:	f1b0 3fff 	cmp.w	r0, #4294967295
 801578a:	d008      	beq.n	801579e <netconn_drain+0x82>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801578c:	782b      	ldrb	r3, [r5, #0]
 801578e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015792:	2b10      	cmp	r3, #16
 8015794:	d0e9      	beq.n	801576a <netconn_drain+0x4e>
        netbuf_delete((struct netbuf *)mem);
 8015796:	9801      	ldr	r0, [sp, #4]
 8015798:	f000 fb16 	bl	8015dc8 <netbuf_delete>
 801579c:	e7ef      	b.n	801577e <netconn_drain+0x62>
    sys_mbox_free(&conn->recvmbox);
 801579e:	4620      	mov	r0, r4
 80157a0:	f007 f84c 	bl	801c83c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80157a4:	4620      	mov	r0, r4
 80157a6:	f007 f8ad 	bl	801c904 <sys_mbox_set_invalid>
 80157aa:	e7c0      	b.n	801572e <netconn_drain+0x12>
    sys_mbox_free(&conn->acceptmbox);
 80157ac:	4628      	mov	r0, r5
 80157ae:	f007 f845 	bl	801c83c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80157b2:	4628      	mov	r0, r5
 80157b4:	f007 f8a6 	bl	801c904 <sys_mbox_set_invalid>
}
 80157b8:	b002      	add	sp, #8
 80157ba:	bd70      	pop	{r4, r5, r6, pc}
 80157bc:	200044b8 	.word	0x200044b8

080157c0 <accept_function>:
{
 80157c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 80157c4:	2800      	cmp	r0, #0
 80157c6:	d067      	beq.n	8015898 <accept_function+0xd8>
 80157c8:	4604      	mov	r4, r0
 80157ca:	4616      	mov	r6, r2
 80157cc:	460d      	mov	r5, r1
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80157ce:	f100 0814 	add.w	r8, r0, #20
 80157d2:	4640      	mov	r0, r8
 80157d4:	f007 f890 	bl	801c8f8 <sys_mbox_valid>
 80157d8:	2800      	cmp	r0, #0
 80157da:	d060      	beq.n	801589e <accept_function+0xde>
  if (newpcb == NULL) {
 80157dc:	b1c5      	cbz	r5, 8015810 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 80157de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80157e0:	7820      	ldrb	r0, [r4, #0]
 80157e2:	f7ff ff19 	bl	8015618 <netconn_alloc>
  if (newconn == NULL) {
 80157e6:	4607      	mov	r7, r0
 80157e8:	b310      	cbz	r0, 8015830 <accept_function+0x70>
  newconn->pcb.tcp = newpcb;
 80157ea:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 80157ec:	f7ff fad8 	bl	8014da0 <setup_tcp>
  newconn->last_err = err;
 80157f0:	723e      	strb	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80157f2:	4639      	mov	r1, r7
 80157f4:	4640      	mov	r0, r8
 80157f6:	f007 f836 	bl	801c866 <sys_mbox_trypost>
 80157fa:	4605      	mov	r5, r0
 80157fc:	bb30      	cbnz	r0, 801584c <accept_function+0x8c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80157fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015800:	b11b      	cbz	r3, 801580a <accept_function+0x4a>
 8015802:	2200      	movs	r2, #0
 8015804:	4611      	mov	r1, r2
 8015806:	4620      	mov	r0, r4
 8015808:	4798      	blx	r3
}
 801580a:	4628      	mov	r0, r5
 801580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8015810:	492a      	ldr	r1, [pc, #168]	; (80158bc <accept_function+0xfc>)
 8015812:	4640      	mov	r0, r8
 8015814:	f007 f827 	bl	801c866 <sys_mbox_trypost>
 8015818:	2800      	cmp	r0, #0
 801581a:	d143      	bne.n	80158a4 <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801581c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801581e:	2b00      	cmp	r3, #0
 8015820:	d043      	beq.n	80158aa <accept_function+0xea>
 8015822:	2200      	movs	r2, #0
 8015824:	4611      	mov	r1, r2
 8015826:	4620      	mov	r0, r4
 8015828:	4798      	blx	r3
    return ERR_VAL;
 801582a:	f06f 0505 	mvn.w	r5, #5
 801582e:	e7ec      	b.n	801580a <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8015830:	4922      	ldr	r1, [pc, #136]	; (80158bc <accept_function+0xfc>)
 8015832:	4640      	mov	r0, r8
 8015834:	f007 f817 	bl	801c866 <sys_mbox_trypost>
 8015838:	bbd0      	cbnz	r0, 80158b0 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801583a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801583c:	b3db      	cbz	r3, 80158b6 <accept_function+0xf6>
 801583e:	2200      	movs	r2, #0
 8015840:	4611      	mov	r1, r2
 8015842:	4620      	mov	r0, r4
 8015844:	4798      	blx	r3
    return ERR_MEM;
 8015846:	f04f 35ff 	mov.w	r5, #4294967295
 801584a:	e7de      	b.n	801580a <accept_function+0x4a>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 801584c:	687c      	ldr	r4, [r7, #4]
    tcp_arg(pcb, NULL);
 801584e:	2100      	movs	r1, #0
 8015850:	4620      	mov	r0, r4
 8015852:	f003 fa8a 	bl	8018d6a <tcp_arg>
    tcp_recv(pcb, NULL);
 8015856:	2100      	movs	r1, #0
 8015858:	4620      	mov	r0, r4
 801585a:	f003 fa89 	bl	8018d70 <tcp_recv>
    tcp_sent(pcb, NULL);
 801585e:	2100      	movs	r1, #0
 8015860:	4620      	mov	r0, r4
 8015862:	f003 fa9f 	bl	8018da4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8015866:	2200      	movs	r2, #0
 8015868:	4611      	mov	r1, r2
 801586a:	4620      	mov	r0, r4
 801586c:	f003 fad4 	bl	8018e18 <tcp_poll>
    tcp_err(pcb, NULL);
 8015870:	2100      	movs	r1, #0
 8015872:	4620      	mov	r0, r4
 8015874:	f003 faae 	bl	8018dd4 <tcp_err>
    newconn->pcb.tcp = NULL;
 8015878:	2300      	movs	r3, #0
 801587a:	607b      	str	r3, [r7, #4]
    sys_mbox_free(&newconn->recvmbox);
 801587c:	f107 0410 	add.w	r4, r7, #16
 8015880:	4620      	mov	r0, r4
 8015882:	f006 ffdb 	bl	801c83c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8015886:	4620      	mov	r0, r4
 8015888:	f007 f83c 	bl	801c904 <sys_mbox_set_invalid>
    netconn_free(newconn);
 801588c:	4638      	mov	r0, r7
 801588e:	f7ff ff09 	bl	80156a4 <netconn_free>
    return ERR_MEM;
 8015892:	f04f 35ff 	mov.w	r5, #4294967295
 8015896:	e7b8      	b.n	801580a <accept_function+0x4a>
    return ERR_VAL;
 8015898:	f06f 0505 	mvn.w	r5, #5
 801589c:	e7b5      	b.n	801580a <accept_function+0x4a>
    return ERR_VAL;
 801589e:	f06f 0505 	mvn.w	r5, #5
 80158a2:	e7b2      	b.n	801580a <accept_function+0x4a>
    return ERR_VAL;
 80158a4:	f06f 0505 	mvn.w	r5, #5
 80158a8:	e7af      	b.n	801580a <accept_function+0x4a>
 80158aa:	f06f 0505 	mvn.w	r5, #5
 80158ae:	e7ac      	b.n	801580a <accept_function+0x4a>
    return ERR_MEM;
 80158b0:	f04f 35ff 	mov.w	r5, #4294967295
 80158b4:	e7a9      	b.n	801580a <accept_function+0x4a>
 80158b6:	f04f 35ff 	mov.w	r5, #4294967295
 80158ba:	e7a6      	b.n	801580a <accept_function+0x4a>
 80158bc:	200044b8 	.word	0x200044b8

080158c0 <lwip_netconn_do_delconn>:
{
 80158c0:	b538      	push	{r3, r4, r5, lr}
 80158c2:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 80158c4:	6803      	ldr	r3, [r0, #0]
 80158c6:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80158c8:	b15d      	cbz	r5, 80158e2 <lwip_netconn_do_delconn+0x22>
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80158d0:	2b10      	cmp	r3, #16
 80158d2:	d006      	beq.n	80158e2 <lwip_netconn_do_delconn+0x22>
 80158d4:	4b4e      	ldr	r3, [pc, #312]	; (8015a10 <lwip_netconn_do_delconn+0x150>)
 80158d6:	f240 4201 	movw	r2, #1025	; 0x401
 80158da:	494e      	ldr	r1, [pc, #312]	; (8015a14 <lwip_netconn_do_delconn+0x154>)
 80158dc:	484e      	ldr	r0, [pc, #312]	; (8015a18 <lwip_netconn_do_delconn+0x158>)
 80158de:	f008 fb02 	bl	801dee6 <iprintf>
  if (((state != NETCONN_NONE) &&
 80158e2:	b1d5      	cbz	r5, 801591a <lwip_netconn_do_delconn+0x5a>
 80158e4:	2d02      	cmp	r5, #2
 80158e6:	d018      	beq.n	801591a <lwip_netconn_do_delconn+0x5a>
       (state != NETCONN_LISTEN) &&
 80158e8:	2d03      	cmp	r5, #3
 80158ea:	d016      	beq.n	801591a <lwip_netconn_do_delconn+0x5a>
    msg->err = ERR_INPROGRESS;
 80158ec:	23fb      	movs	r3, #251	; 0xfb
 80158ee:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80158f0:	6820      	ldr	r0, [r4, #0]
 80158f2:	300c      	adds	r0, #12
 80158f4:	f007 f84a 	bl	801c98c <sys_sem_valid>
 80158f8:	b170      	cbz	r0, 8015918 <lwip_netconn_do_delconn+0x58>
    TCPIP_APIMSG_ACK(msg);
 80158fa:	6823      	ldr	r3, [r4, #0]
 80158fc:	b163      	cbz	r3, 8015918 <lwip_netconn_do_delconn+0x58>
 80158fe:	f007 f88b 	bl	801ca18 <sys_arch_protect>
 8015902:	6823      	ldr	r3, [r4, #0]
 8015904:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015908:	f112 0f0c 	cmn.w	r2, #12
 801590c:	db02      	blt.n	8015914 <lwip_netconn_do_delconn+0x54>
 801590e:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015912:	721a      	strb	r2, [r3, #8]
 8015914:	f007 f88c 	bl	801ca30 <sys_arch_unprotect>
 8015918:	bd38      	pop	{r3, r4, r5, pc}
       (state != NETCONN_CONNECT)) ||
 801591a:	2d03      	cmp	r5, #3
 801591c:	d027      	beq.n	801596e <lwip_netconn_do_delconn+0xae>
    LWIP_ASSERT("blocking connect in progress",
 801591e:	2d03      	cmp	r5, #3
 8015920:	d02b      	beq.n	801597a <lwip_netconn_do_delconn+0xba>
    msg->err = ERR_OK;
 8015922:	2300      	movs	r3, #0
 8015924:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 8015926:	6820      	ldr	r0, [r4, #0]
 8015928:	f7ff fef8 	bl	801571c <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 801592c:	6822      	ldr	r2, [r4, #0]
 801592e:	6851      	ldr	r1, [r2, #4]
 8015930:	b179      	cbz	r1, 8015952 <lwip_netconn_do_delconn+0x92>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015932:	7813      	ldrb	r3, [r2, #0]
 8015934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015938:	2b10      	cmp	r3, #16
 801593a:	d02b      	beq.n	8015994 <lwip_netconn_do_delconn+0xd4>
 801593c:	2b20      	cmp	r3, #32
 801593e:	d105      	bne.n	801594c <lwip_netconn_do_delconn+0x8c>
        msg->conn->pcb.udp->recv_arg = NULL;
 8015940:	2300      	movs	r3, #0
 8015942:	61cb      	str	r3, [r1, #28]
        udp_remove(msg->conn->pcb.udp);
 8015944:	6823      	ldr	r3, [r4, #0]
 8015946:	6858      	ldr	r0, [r3, #4]
 8015948:	f006 fe92 	bl	801c670 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 801594c:	6823      	ldr	r3, [r4, #0]
 801594e:	2200      	movs	r2, #0
 8015950:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8015952:	6820      	ldr	r0, [r4, #0]
 8015954:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015956:	b113      	cbz	r3, 801595e <lwip_netconn_do_delconn+0x9e>
 8015958:	2200      	movs	r2, #0
 801595a:	4611      	mov	r1, r2
 801595c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801595e:	6820      	ldr	r0, [r4, #0]
 8015960:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015962:	2b00      	cmp	r3, #0
 8015964:	d0c4      	beq.n	80158f0 <lwip_netconn_do_delconn+0x30>
 8015966:	2200      	movs	r2, #0
 8015968:	2102      	movs	r1, #2
 801596a:	4798      	blx	r3
 801596c:	e7c0      	b.n	80158f0 <lwip_netconn_do_delconn+0x30>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801596e:	6823      	ldr	r3, [r4, #0]
 8015970:	7f1b      	ldrb	r3, [r3, #28]
 8015972:	f013 0f04 	tst.w	r3, #4
 8015976:	d1d2      	bne.n	801591e <lwip_netconn_do_delconn+0x5e>
 8015978:	e7b8      	b.n	80158ec <lwip_netconn_do_delconn+0x2c>
    LWIP_ASSERT("blocking connect in progress",
 801597a:	6823      	ldr	r3, [r4, #0]
 801597c:	7f1b      	ldrb	r3, [r3, #28]
 801597e:	f013 0f04 	tst.w	r3, #4
 8015982:	d1ce      	bne.n	8015922 <lwip_netconn_do_delconn+0x62>
 8015984:	4b22      	ldr	r3, [pc, #136]	; (8015a10 <lwip_netconn_do_delconn+0x150>)
 8015986:	f240 421f 	movw	r2, #1055	; 0x41f
 801598a:	4924      	ldr	r1, [pc, #144]	; (8015a1c <lwip_netconn_do_delconn+0x15c>)
 801598c:	4822      	ldr	r0, [pc, #136]	; (8015a18 <lwip_netconn_do_delconn+0x158>)
 801598e:	f008 faaa 	bl	801dee6 <iprintf>
 8015992:	e7c6      	b.n	8015922 <lwip_netconn_do_delconn+0x62>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015994:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8015996:	2b00      	cmp	r3, #0
 8015998:	d036      	beq.n	8015a08 <lwip_netconn_do_delconn+0x148>
 801599a:	4b1d      	ldr	r3, [pc, #116]	; (8015a10 <lwip_netconn_do_delconn+0x150>)
 801599c:	f240 4235 	movw	r2, #1077	; 0x435
 80159a0:	491f      	ldr	r1, [pc, #124]	; (8015a20 <lwip_netconn_do_delconn+0x160>)
 80159a2:	481d      	ldr	r0, [pc, #116]	; (8015a18 <lwip_netconn_do_delconn+0x158>)
 80159a4:	f008 fa9f 	bl	801dee6 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80159a8:	6823      	ldr	r3, [r4, #0]
 80159aa:	2204      	movs	r2, #4
 80159ac:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80159ae:	2303      	movs	r3, #3
 80159b0:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 80159b2:	6823      	ldr	r3, [r4, #0]
 80159b4:	625c      	str	r4, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80159b6:	2100      	movs	r1, #0
 80159b8:	6820      	ldr	r0, [r4, #0]
 80159ba:	f7ff fc05 	bl	80151c8 <lwip_netconn_do_close_internal>
 80159be:	2800      	cmp	r0, #0
 80159c0:	d0aa      	beq.n	8015918 <lwip_netconn_do_delconn+0x58>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80159c2:	6823      	ldr	r3, [r4, #0]
 80159c4:	785b      	ldrb	r3, [r3, #1]
 80159c6:	2b04      	cmp	r3, #4
 80159c8:	d006      	beq.n	80159d8 <lwip_netconn_do_delconn+0x118>
 80159ca:	4b11      	ldr	r3, [pc, #68]	; (8015a10 <lwip_netconn_do_delconn+0x150>)
 80159cc:	f240 423b 	movw	r2, #1083	; 0x43b
 80159d0:	4914      	ldr	r1, [pc, #80]	; (8015a24 <lwip_netconn_do_delconn+0x164>)
 80159d2:	4811      	ldr	r0, [pc, #68]	; (8015a18 <lwip_netconn_do_delconn+0x158>)
 80159d4:	f008 fa87 	bl	801dee6 <iprintf>
          UNLOCK_TCPIP_CORE();
 80159d8:	4d13      	ldr	r5, [pc, #76]	; (8015a28 <lwip_netconn_do_delconn+0x168>)
 80159da:	4628      	mov	r0, r5
 80159dc:	f007 f804 	bl	801c9e8 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80159e0:	6820      	ldr	r0, [r4, #0]
 80159e2:	2100      	movs	r1, #0
 80159e4:	300c      	adds	r0, #12
 80159e6:	f006 ffa9 	bl	801c93c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80159ea:	4628      	mov	r0, r5
 80159ec:	f006 fff5 	bl	801c9da <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80159f0:	6823      	ldr	r3, [r4, #0]
 80159f2:	785b      	ldrb	r3, [r3, #1]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d08f      	beq.n	8015918 <lwip_netconn_do_delconn+0x58>
 80159f8:	4b05      	ldr	r3, [pc, #20]	; (8015a10 <lwip_netconn_do_delconn+0x150>)
 80159fa:	f240 423f 	movw	r2, #1087	; 0x43f
 80159fe:	4909      	ldr	r1, [pc, #36]	; (8015a24 <lwip_netconn_do_delconn+0x164>)
 8015a00:	4805      	ldr	r0, [pc, #20]	; (8015a18 <lwip_netconn_do_delconn+0x158>)
 8015a02:	f008 fa70 	bl	801dee6 <iprintf>
 8015a06:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015a08:	6a13      	ldr	r3, [r2, #32]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d0cc      	beq.n	80159a8 <lwip_netconn_do_delconn+0xe8>
 8015a0e:	e7c4      	b.n	801599a <lwip_netconn_do_delconn+0xda>
 8015a10:	0801ee04 	.word	0x0801ee04
 8015a14:	0801ebac 	.word	0x0801ebac
 8015a18:	0801e950 	.word	0x0801e950
 8015a1c:	0801ebc0 	.word	0x0801ebc0
 8015a20:	0801ebe0 	.word	0x0801ebe0
 8015a24:	0801ebfc 	.word	0x0801ebfc
 8015a28:	200044bc 	.word	0x200044bc

08015a2c <lwip_netconn_do_bind>:
{
 8015a2c:	b510      	push	{r4, lr}
 8015a2e:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015a30:	6803      	ldr	r3, [r0, #0]
 8015a32:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015a36:	f112 0f0c 	cmn.w	r2, #12
 8015a3a:	da10      	bge.n	8015a5e <lwip_netconn_do_bind+0x32>
    msg->err = msg->conn->last_err;
 8015a3c:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8015a3e:	6823      	ldr	r3, [r4, #0]
 8015a40:	b163      	cbz	r3, 8015a5c <lwip_netconn_do_bind+0x30>
 8015a42:	f006 ffe9 	bl	801ca18 <sys_arch_protect>
 8015a46:	6823      	ldr	r3, [r4, #0]
 8015a48:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015a4c:	f112 0f0c 	cmn.w	r2, #12
 8015a50:	db02      	blt.n	8015a58 <lwip_netconn_do_bind+0x2c>
 8015a52:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015a56:	721a      	strb	r2, [r3, #8]
 8015a58:	f006 ffea 	bl	801ca30 <sys_arch_unprotect>
 8015a5c:	bd10      	pop	{r4, pc}
    msg->err = ERR_VAL;
 8015a5e:	22fa      	movs	r2, #250	; 0xfa
 8015a60:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8015a62:	6858      	ldr	r0, [r3, #4]
 8015a64:	2800      	cmp	r0, #0
 8015a66:	d0ea      	beq.n	8015a3e <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015a68:	781b      	ldrb	r3, [r3, #0]
 8015a6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015a6e:	2b10      	cmp	r3, #16
 8015a70:	d007      	beq.n	8015a82 <lwip_netconn_do_bind+0x56>
 8015a72:	2b20      	cmp	r3, #32
 8015a74:	d1e3      	bne.n	8015a3e <lwip_netconn_do_bind+0x12>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8015a76:	89a2      	ldrh	r2, [r4, #12]
 8015a78:	68a1      	ldr	r1, [r4, #8]
 8015a7a:	f006 fdb3 	bl	801c5e4 <udp_bind>
 8015a7e:	7120      	strb	r0, [r4, #4]
        break;
 8015a80:	e7dd      	b.n	8015a3e <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8015a82:	89a2      	ldrh	r2, [r4, #12]
 8015a84:	68a1      	ldr	r1, [r4, #8]
 8015a86:	f003 f815 	bl	8018ab4 <tcp_bind>
 8015a8a:	7120      	strb	r0, [r4, #4]
        break;
 8015a8c:	e7d7      	b.n	8015a3e <lwip_netconn_do_bind+0x12>
	...

08015a90 <lwip_netconn_do_listen>:
{
 8015a90:	b530      	push	{r4, r5, lr}
 8015a92:	b083      	sub	sp, #12
 8015a94:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015a96:	6803      	ldr	r3, [r0, #0]
 8015a98:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015a9c:	f112 0f0c 	cmn.w	r2, #12
 8015aa0:	da11      	bge.n	8015ac6 <lwip_netconn_do_listen+0x36>
    msg->err = msg->conn->last_err;
 8015aa2:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8015aa4:	6823      	ldr	r3, [r4, #0]
 8015aa6:	b163      	cbz	r3, 8015ac2 <lwip_netconn_do_listen+0x32>
 8015aa8:	f006 ffb6 	bl	801ca18 <sys_arch_protect>
 8015aac:	6823      	ldr	r3, [r4, #0]
 8015aae:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015ab2:	f112 0f0c 	cmn.w	r2, #12
 8015ab6:	db02      	blt.n	8015abe <lwip_netconn_do_listen+0x2e>
 8015ab8:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015abc:	721a      	strb	r2, [r3, #8]
 8015abe:	f006 ffb7 	bl	801ca30 <sys_arch_unprotect>
}
 8015ac2:	b003      	add	sp, #12
 8015ac4:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 8015ac6:	22f5      	movs	r2, #245	; 0xf5
 8015ac8:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8015aca:	6858      	ldr	r0, [r3, #4]
 8015acc:	2800      	cmp	r0, #0
 8015ace:	d0e9      	beq.n	8015aa4 <lwip_netconn_do_listen+0x14>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015ad0:	781a      	ldrb	r2, [r3, #0]
 8015ad2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8015ad6:	2a10      	cmp	r2, #16
 8015ad8:	d002      	beq.n	8015ae0 <lwip_netconn_do_listen+0x50>
        msg->err = ERR_ARG;
 8015ada:	23f0      	movs	r3, #240	; 0xf0
 8015adc:	7123      	strb	r3, [r4, #4]
 8015ade:	e7e1      	b.n	8015aa4 <lwip_netconn_do_listen+0x14>
        if (msg->conn->state == NETCONN_NONE) {
 8015ae0:	785b      	ldrb	r3, [r3, #1]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d145      	bne.n	8015b72 <lwip_netconn_do_listen+0xe2>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8015ae6:	7d03      	ldrb	r3, [r0, #20]
 8015ae8:	b113      	cbz	r3, 8015af0 <lwip_netconn_do_listen+0x60>
            msg->err = ERR_VAL;
 8015aea:	23fa      	movs	r3, #250	; 0xfa
 8015aec:	7123      	strb	r3, [r4, #4]
 8015aee:	e7d9      	b.n	8015aa4 <lwip_netconn_do_listen+0x14>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8015af0:	f10d 0207 	add.w	r2, sp, #7
 8015af4:	21ff      	movs	r1, #255	; 0xff
 8015af6:	f003 f83b 	bl	8018b70 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8015afa:	4605      	mov	r5, r0
 8015afc:	b1f0      	cbz	r0, 8015b3c <lwip_netconn_do_listen+0xac>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8015afe:	6820      	ldr	r0, [r4, #0]
 8015b00:	3010      	adds	r0, #16
 8015b02:	f006 fef9 	bl	801c8f8 <sys_mbox_valid>
 8015b06:	b9e8      	cbnz	r0, 8015b44 <lwip_netconn_do_listen+0xb4>
              msg->err = ERR_OK;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8015b0c:	6820      	ldr	r0, [r4, #0]
 8015b0e:	3014      	adds	r0, #20
 8015b10:	f006 fef2 	bl	801c8f8 <sys_mbox_valid>
 8015b14:	b1f8      	cbz	r0, 8015b56 <lwip_netconn_do_listen+0xc6>
              if (msg->err == ERR_OK) {
 8015b16:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8015b1a:	bb1b      	cbnz	r3, 8015b64 <lwip_netconn_do_listen+0xd4>
                msg->conn->state = NETCONN_LISTEN;
 8015b1c:	6823      	ldr	r3, [r4, #0]
 8015b1e:	2202      	movs	r2, #2
 8015b20:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8015b22:	6823      	ldr	r3, [r4, #0]
 8015b24:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8015b26:	6823      	ldr	r3, [r4, #0]
 8015b28:	4619      	mov	r1, r3
 8015b2a:	6858      	ldr	r0, [r3, #4]
 8015b2c:	f003 f91d 	bl	8018d6a <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8015b30:	6823      	ldr	r3, [r4, #0]
 8015b32:	4912      	ldr	r1, [pc, #72]	; (8015b7c <lwip_netconn_do_listen+0xec>)
 8015b34:	6858      	ldr	r0, [r3, #4]
 8015b36:	f003 f967 	bl	8018e08 <tcp_accept>
 8015b3a:	e7b3      	b.n	8015aa4 <lwip_netconn_do_listen+0x14>
              msg->err = err;
 8015b3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015b40:	7123      	strb	r3, [r4, #4]
 8015b42:	e7af      	b.n	8015aa4 <lwip_netconn_do_listen+0x14>
                sys_mbox_free(&msg->conn->recvmbox);
 8015b44:	6820      	ldr	r0, [r4, #0]
 8015b46:	3010      	adds	r0, #16
 8015b48:	f006 fe78 	bl	801c83c <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8015b4c:	6820      	ldr	r0, [r4, #0]
 8015b4e:	3010      	adds	r0, #16
 8015b50:	f006 fed8 	bl	801c904 <sys_mbox_set_invalid>
 8015b54:	e7d8      	b.n	8015b08 <lwip_netconn_do_listen+0x78>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8015b56:	6820      	ldr	r0, [r4, #0]
 8015b58:	2106      	movs	r1, #6
 8015b5a:	3014      	adds	r0, #20
 8015b5c:	f006 fe5c 	bl	801c818 <sys_mbox_new>
 8015b60:	7120      	strb	r0, [r4, #4]
 8015b62:	e7d8      	b.n	8015b16 <lwip_netconn_do_listen+0x86>
                tcp_close(lpcb);
 8015b64:	4628      	mov	r0, r5
 8015b66:	f003 fc91 	bl	801948c <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8015b6a:	6823      	ldr	r3, [r4, #0]
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	605a      	str	r2, [r3, #4]
 8015b70:	e798      	b.n	8015aa4 <lwip_netconn_do_listen+0x14>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8015b72:	2b02      	cmp	r3, #2
 8015b74:	d196      	bne.n	8015aa4 <lwip_netconn_do_listen+0x14>
          msg->err = ERR_OK;
 8015b76:	2300      	movs	r3, #0
 8015b78:	7123      	strb	r3, [r4, #4]
 8015b7a:	e793      	b.n	8015aa4 <lwip_netconn_do_listen+0x14>
 8015b7c:	080157c1 	.word	0x080157c1

08015b80 <lwip_netconn_do_recv>:
{
 8015b80:	b570      	push	{r4, r5, r6, lr}
 8015b82:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 8015b84:	2300      	movs	r3, #0
 8015b86:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8015b88:	6803      	ldr	r3, [r0, #0]
 8015b8a:	685a      	ldr	r2, [r3, #4]
 8015b8c:	b122      	cbz	r2, 8015b98 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b94:	2b10      	cmp	r3, #16
 8015b96:	d00f      	beq.n	8015bb8 <lwip_netconn_do_recv+0x38>
  TCPIP_APIMSG_ACK(msg);
 8015b98:	6833      	ldr	r3, [r6, #0]
 8015b9a:	b163      	cbz	r3, 8015bb6 <lwip_netconn_do_recv+0x36>
 8015b9c:	f006 ff3c 	bl	801ca18 <sys_arch_protect>
 8015ba0:	6833      	ldr	r3, [r6, #0]
 8015ba2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015ba6:	f112 0f0c 	cmn.w	r2, #12
 8015baa:	db02      	blt.n	8015bb2 <lwip_netconn_do_recv+0x32>
 8015bac:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8015bb0:	721a      	strb	r2, [r3, #8]
 8015bb2:	f006 ff3d 	bl	801ca30 <sys_arch_unprotect>
 8015bb6:	bd70      	pop	{r4, r5, r6, pc}
      u32_t remaining = msg->msg.r.len;
 8015bb8:	6884      	ldr	r4, [r0, #8]
 8015bba:	e008      	b.n	8015bce <lwip_netconn_do_recv+0x4e>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8015bbc:	f64f 75ff 	movw	r5, #65535	; 0xffff
        tcp_recved(msg->conn->pcb.tcp, recved);
 8015bc0:	6833      	ldr	r3, [r6, #0]
 8015bc2:	4629      	mov	r1, r5
 8015bc4:	6858      	ldr	r0, [r3, #4]
 8015bc6:	f003 f863 	bl	8018c90 <tcp_recved>
      } while (remaining != 0);
 8015bca:	1b64      	subs	r4, r4, r5
 8015bcc:	d0e4      	beq.n	8015b98 <lwip_netconn_do_recv+0x18>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8015bce:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8015bd2:	d2f3      	bcs.n	8015bbc <lwip_netconn_do_recv+0x3c>
 8015bd4:	b2a5      	uxth	r5, r4
 8015bd6:	e7f3      	b.n	8015bc0 <lwip_netconn_do_recv+0x40>

08015bd8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8015bd8:	b538      	push	{r3, r4, r5, lr}
 8015bda:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015bdc:	6803      	ldr	r3, [r0, #0]
 8015bde:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015be2:	f112 0f0c 	cmn.w	r2, #12
 8015be6:	da0f      	bge.n	8015c08 <lwip_netconn_do_write+0x30>
    msg->err = msg->conn->last_err;
 8015be8:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8015bea:	b163      	cbz	r3, 8015c06 <lwip_netconn_do_write+0x2e>
 8015bec:	f006 ff14 	bl	801ca18 <sys_arch_protect>
 8015bf0:	6823      	ldr	r3, [r4, #0]
 8015bf2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015bf6:	f112 0f0c 	cmn.w	r2, #12
 8015bfa:	db02      	blt.n	8015c02 <lwip_netconn_do_write+0x2a>
 8015bfc:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015c00:	721a      	strb	r2, [r3, #8]
 8015c02:	f006 ff15 	bl	801ca30 <sys_arch_unprotect>
 8015c06:	bd38      	pop	{r3, r4, r5, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015c08:	781a      	ldrb	r2, [r3, #0]
 8015c0a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8015c0e:	2a10      	cmp	r2, #16
 8015c10:	d002      	beq.n	8015c18 <lwip_netconn_do_write+0x40>
      msg->err = ERR_VAL;
 8015c12:	22fa      	movs	r2, #250	; 0xfa
 8015c14:	7102      	strb	r2, [r0, #4]
 8015c16:	e7e8      	b.n	8015bea <lwip_netconn_do_write+0x12>
      if (msg->conn->state != NETCONN_NONE) {
 8015c18:	785a      	ldrb	r2, [r3, #1]
 8015c1a:	b112      	cbz	r2, 8015c22 <lwip_netconn_do_write+0x4a>
        msg->err = ERR_INPROGRESS;
 8015c1c:	22fb      	movs	r2, #251	; 0xfb
 8015c1e:	7102      	strb	r2, [r0, #4]
 8015c20:	e7e3      	b.n	8015bea <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 8015c22:	685a      	ldr	r2, [r3, #4]
 8015c24:	2a00      	cmp	r2, #0
 8015c26:	d048      	beq.n	8015cba <lwip_netconn_do_write+0xe2>
        msg->conn->state = NETCONN_WRITE;
 8015c28:	2201      	movs	r2, #1
 8015c2a:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015c2c:	6803      	ldr	r3, [r0, #0]
 8015c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c30:	2a00      	cmp	r2, #0
 8015c32:	d036      	beq.n	8015ca2 <lwip_netconn_do_write+0xca>
 8015c34:	4b22      	ldr	r3, [pc, #136]	; (8015cc0 <lwip_netconn_do_write+0xe8>)
 8015c36:	f240 6283 	movw	r2, #1667	; 0x683
 8015c3a:	4922      	ldr	r1, [pc, #136]	; (8015cc4 <lwip_netconn_do_write+0xec>)
 8015c3c:	4822      	ldr	r0, [pc, #136]	; (8015cc8 <lwip_netconn_do_write+0xf0>)
 8015c3e:	f008 f952 	bl	801dee6 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8015c42:	68e3      	ldr	r3, [r4, #12]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d030      	beq.n	8015caa <lwip_netconn_do_write+0xd2>
        msg->conn->current_msg = msg;
 8015c48:	6823      	ldr	r3, [r4, #0]
 8015c4a:	625c      	str	r4, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8015c4c:	6823      	ldr	r3, [r4, #0]
 8015c4e:	2100      	movs	r1, #0
 8015c50:	6219      	str	r1, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8015c52:	6820      	ldr	r0, [r4, #0]
 8015c54:	f7ff f9a8 	bl	8014fa8 <lwip_netconn_do_writemore>
 8015c58:	2800      	cmp	r0, #0
 8015c5a:	d0d4      	beq.n	8015c06 <lwip_netconn_do_write+0x2e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8015c5c:	6823      	ldr	r3, [r4, #0]
 8015c5e:	785b      	ldrb	r3, [r3, #1]
 8015c60:	2b01      	cmp	r3, #1
 8015c62:	d006      	beq.n	8015c72 <lwip_netconn_do_write+0x9a>
 8015c64:	4b16      	ldr	r3, [pc, #88]	; (8015cc0 <lwip_netconn_do_write+0xe8>)
 8015c66:	f240 6289 	movw	r2, #1673	; 0x689
 8015c6a:	4918      	ldr	r1, [pc, #96]	; (8015ccc <lwip_netconn_do_write+0xf4>)
 8015c6c:	4816      	ldr	r0, [pc, #88]	; (8015cc8 <lwip_netconn_do_write+0xf0>)
 8015c6e:	f008 f93a 	bl	801dee6 <iprintf>
          UNLOCK_TCPIP_CORE();
 8015c72:	4d17      	ldr	r5, [pc, #92]	; (8015cd0 <lwip_netconn_do_write+0xf8>)
 8015c74:	4628      	mov	r0, r5
 8015c76:	f006 feb7 	bl	801c9e8 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015c7a:	6820      	ldr	r0, [r4, #0]
 8015c7c:	2100      	movs	r1, #0
 8015c7e:	300c      	adds	r0, #12
 8015c80:	f006 fe5c 	bl	801c93c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8015c84:	4628      	mov	r0, r5
 8015c86:	f006 fea8 	bl	801c9da <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8015c8a:	6823      	ldr	r3, [r4, #0]
 8015c8c:	785b      	ldrb	r3, [r3, #1]
 8015c8e:	2b01      	cmp	r3, #1
 8015c90:	d1b9      	bne.n	8015c06 <lwip_netconn_do_write+0x2e>
 8015c92:	4b0b      	ldr	r3, [pc, #44]	; (8015cc0 <lwip_netconn_do_write+0xe8>)
 8015c94:	f240 628d 	movw	r2, #1677	; 0x68d
 8015c98:	490c      	ldr	r1, [pc, #48]	; (8015ccc <lwip_netconn_do_write+0xf4>)
 8015c9a:	480b      	ldr	r0, [pc, #44]	; (8015cc8 <lwip_netconn_do_write+0xf0>)
 8015c9c:	f008 f923 	bl	801dee6 <iprintf>
 8015ca0:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015ca2:	6a1b      	ldr	r3, [r3, #32]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d0cc      	beq.n	8015c42 <lwip_netconn_do_write+0x6a>
 8015ca8:	e7c4      	b.n	8015c34 <lwip_netconn_do_write+0x5c>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8015caa:	4b05      	ldr	r3, [pc, #20]	; (8015cc0 <lwip_netconn_do_write+0xe8>)
 8015cac:	f240 6284 	movw	r2, #1668	; 0x684
 8015cb0:	4908      	ldr	r1, [pc, #32]	; (8015cd4 <lwip_netconn_do_write+0xfc>)
 8015cb2:	4805      	ldr	r0, [pc, #20]	; (8015cc8 <lwip_netconn_do_write+0xf0>)
 8015cb4:	f008 f917 	bl	801dee6 <iprintf>
 8015cb8:	e7c6      	b.n	8015c48 <lwip_netconn_do_write+0x70>
        msg->err = ERR_CONN;
 8015cba:	22f5      	movs	r2, #245	; 0xf5
 8015cbc:	7102      	strb	r2, [r0, #4]
 8015cbe:	e794      	b.n	8015bea <lwip_netconn_do_write+0x12>
 8015cc0:	0801ee04 	.word	0x0801ee04
 8015cc4:	0801ebe0 	.word	0x0801ebe0
 8015cc8:	0801e950 	.word	0x0801e950
 8015ccc:	0801ebfc 	.word	0x0801ebfc
 8015cd0:	200044bc 	.word	0x200044bc
 8015cd4:	0801ec04 	.word	0x0801ec04

08015cd8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8015cd8:	b538      	push	{r3, r4, r5, lr}
 8015cda:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8015cdc:	6800      	ldr	r0, [r0, #0]
 8015cde:	7842      	ldrb	r2, [r0, #1]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8015ce0:	6843      	ldr	r3, [r0, #4]
 8015ce2:	b123      	cbz	r3, 8015cee <lwip_netconn_do_close+0x16>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8015ce4:	7803      	ldrb	r3, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 8015ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015cea:	2b10      	cmp	r3, #16
 8015cec:	d010      	beq.n	8015d10 <lwip_netconn_do_close+0x38>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8015cee:	23f5      	movs	r3, #245	; 0xf5
 8015cf0:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8015cf2:	b160      	cbz	r0, 8015d0e <lwip_netconn_do_close+0x36>
 8015cf4:	f006 fe90 	bl	801ca18 <sys_arch_protect>
 8015cf8:	6823      	ldr	r3, [r4, #0]
 8015cfa:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015cfe:	f112 0f0c 	cmn.w	r2, #12
 8015d02:	db02      	blt.n	8015d0a <lwip_netconn_do_close+0x32>
 8015d04:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015d08:	721a      	strb	r2, [r3, #8]
 8015d0a:	f006 fe91 	bl	801ca30 <sys_arch_unprotect>
 8015d0e:	bd38      	pop	{r3, r4, r5, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8015d10:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8015d12:	2b03      	cmp	r3, #3
 8015d14:	d001      	beq.n	8015d1a <lwip_netconn_do_close+0x42>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8015d16:	2a02      	cmp	r2, #2
 8015d18:	d0e9      	beq.n	8015cee <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 8015d1a:	2a03      	cmp	r2, #3
 8015d1c:	d03d      	beq.n	8015d9a <lwip_netconn_do_close+0xc2>
    } else if (state == NETCONN_WRITE) {
 8015d1e:	2a01      	cmp	r2, #1
 8015d20:	d03e      	beq.n	8015da0 <lwip_netconn_do_close+0xc8>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8015d22:	f013 0f01 	tst.w	r3, #1
 8015d26:	d13e      	bne.n	8015da6 <lwip_netconn_do_close+0xce>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015d28:	6823      	ldr	r3, [r4, #0]
 8015d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d2c:	2a00      	cmp	r2, #0
 8015d2e:	d03d      	beq.n	8015dac <lwip_netconn_do_close+0xd4>
 8015d30:	4b20      	ldr	r3, [pc, #128]	; (8015db4 <lwip_netconn_do_close+0xdc>)
 8015d32:	f240 721c 	movw	r2, #1820	; 0x71c
 8015d36:	4920      	ldr	r1, [pc, #128]	; (8015db8 <lwip_netconn_do_close+0xe0>)
 8015d38:	4820      	ldr	r0, [pc, #128]	; (8015dbc <lwip_netconn_do_close+0xe4>)
 8015d3a:	f008 f8d4 	bl	801dee6 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8015d3e:	6823      	ldr	r3, [r4, #0]
 8015d40:	2204      	movs	r2, #4
 8015d42:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8015d44:	6823      	ldr	r3, [r4, #0]
 8015d46:	625c      	str	r4, [r3, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8015d48:	2100      	movs	r1, #0
 8015d4a:	6820      	ldr	r0, [r4, #0]
 8015d4c:	f7ff fa3c 	bl	80151c8 <lwip_netconn_do_close_internal>
 8015d50:	2800      	cmp	r0, #0
 8015d52:	d0dc      	beq.n	8015d0e <lwip_netconn_do_close+0x36>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8015d54:	6823      	ldr	r3, [r4, #0]
 8015d56:	785b      	ldrb	r3, [r3, #1]
 8015d58:	2b04      	cmp	r3, #4
 8015d5a:	d006      	beq.n	8015d6a <lwip_netconn_do_close+0x92>
 8015d5c:	4b15      	ldr	r3, [pc, #84]	; (8015db4 <lwip_netconn_do_close+0xdc>)
 8015d5e:	f240 7221 	movw	r2, #1825	; 0x721
 8015d62:	4917      	ldr	r1, [pc, #92]	; (8015dc0 <lwip_netconn_do_close+0xe8>)
 8015d64:	4815      	ldr	r0, [pc, #84]	; (8015dbc <lwip_netconn_do_close+0xe4>)
 8015d66:	f008 f8be 	bl	801dee6 <iprintf>
        UNLOCK_TCPIP_CORE();
 8015d6a:	4d16      	ldr	r5, [pc, #88]	; (8015dc4 <lwip_netconn_do_close+0xec>)
 8015d6c:	4628      	mov	r0, r5
 8015d6e:	f006 fe3b 	bl	801c9e8 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015d72:	6820      	ldr	r0, [r4, #0]
 8015d74:	2100      	movs	r1, #0
 8015d76:	300c      	adds	r0, #12
 8015d78:	f006 fde0 	bl	801c93c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8015d7c:	4628      	mov	r0, r5
 8015d7e:	f006 fe2c 	bl	801c9da <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015d82:	6823      	ldr	r3, [r4, #0]
 8015d84:	785b      	ldrb	r3, [r3, #1]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d0c1      	beq.n	8015d0e <lwip_netconn_do_close+0x36>
 8015d8a:	4b0a      	ldr	r3, [pc, #40]	; (8015db4 <lwip_netconn_do_close+0xdc>)
 8015d8c:	f240 7225 	movw	r2, #1829	; 0x725
 8015d90:	490b      	ldr	r1, [pc, #44]	; (8015dc0 <lwip_netconn_do_close+0xe8>)
 8015d92:	480a      	ldr	r0, [pc, #40]	; (8015dbc <lwip_netconn_do_close+0xe4>)
 8015d94:	f008 f8a7 	bl	801dee6 <iprintf>
 8015d98:	bd38      	pop	{r3, r4, r5, pc}
      msg->err = ERR_CONN;
 8015d9a:	23f5      	movs	r3, #245	; 0xf5
 8015d9c:	7123      	strb	r3, [r4, #4]
 8015d9e:	e7a8      	b.n	8015cf2 <lwip_netconn_do_close+0x1a>
      msg->err = ERR_INPROGRESS;
 8015da0:	23fb      	movs	r3, #251	; 0xfb
 8015da2:	7123      	strb	r3, [r4, #4]
 8015da4:	e7a5      	b.n	8015cf2 <lwip_netconn_do_close+0x1a>
        netconn_drain(msg->conn);
 8015da6:	f7ff fcb9 	bl	801571c <netconn_drain>
 8015daa:	e7bd      	b.n	8015d28 <lwip_netconn_do_close+0x50>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015dac:	6a1b      	ldr	r3, [r3, #32]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d0c5      	beq.n	8015d3e <lwip_netconn_do_close+0x66>
 8015db2:	e7bd      	b.n	8015d30 <lwip_netconn_do_close+0x58>
 8015db4:	0801ee04 	.word	0x0801ee04
 8015db8:	0801ebe0 	.word	0x0801ebe0
 8015dbc:	0801e950 	.word	0x0801e950
 8015dc0:	0801ebfc 	.word	0x0801ebfc
 8015dc4:	200044bc 	.word	0x200044bc

08015dc8 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8015dc8:	b168      	cbz	r0, 8015de6 <netbuf_delete+0x1e>
{
 8015dca:	b510      	push	{r4, lr}
 8015dcc:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 8015dce:	6800      	ldr	r0, [r0, #0]
 8015dd0:	b120      	cbz	r0, 8015ddc <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8015dd2:	f002 fabb 	bl	801834c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	6063      	str	r3, [r4, #4]
 8015dda:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8015ddc:	4621      	mov	r1, r4
 8015dde:	2006      	movs	r0, #6
 8015de0:	f002 f8de 	bl	8017fa0 <memp_free>
 8015de4:	bd10      	pop	{r4, pc}
 8015de6:	4770      	bx	lr

08015de8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8015de8:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8015dea:	b158      	cbz	r0, 8015e04 <netbuf_data+0x1c>
 8015dec:	4603      	mov	r3, r0
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8015dee:	b191      	cbz	r1, 8015e16 <netbuf_data+0x2e>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8015df0:	b1d2      	cbz	r2, 8015e28 <netbuf_data+0x40>

  if (buf->ptr == NULL) {
 8015df2:	6840      	ldr	r0, [r0, #4]
 8015df4:	b308      	cbz	r0, 8015e3a <netbuf_data+0x52>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 8015df6:	6840      	ldr	r0, [r0, #4]
 8015df8:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
 8015dfa:	685b      	ldr	r3, [r3, #4]
 8015dfc:	895b      	ldrh	r3, [r3, #10]
 8015dfe:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8015e00:	2000      	movs	r0, #0
 8015e02:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8015e04:	4b0e      	ldr	r3, [pc, #56]	; (8015e40 <netbuf_data+0x58>)
 8015e06:	22c2      	movs	r2, #194	; 0xc2
 8015e08:	490e      	ldr	r1, [pc, #56]	; (8015e44 <netbuf_data+0x5c>)
 8015e0a:	480f      	ldr	r0, [pc, #60]	; (8015e48 <netbuf_data+0x60>)
 8015e0c:	f008 f86b 	bl	801dee6 <iprintf>
 8015e10:	f06f 000f 	mvn.w	r0, #15
 8015e14:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8015e16:	4b0a      	ldr	r3, [pc, #40]	; (8015e40 <netbuf_data+0x58>)
 8015e18:	22c3      	movs	r2, #195	; 0xc3
 8015e1a:	490c      	ldr	r1, [pc, #48]	; (8015e4c <netbuf_data+0x64>)
 8015e1c:	480a      	ldr	r0, [pc, #40]	; (8015e48 <netbuf_data+0x60>)
 8015e1e:	f008 f862 	bl	801dee6 <iprintf>
 8015e22:	f06f 000f 	mvn.w	r0, #15
 8015e26:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8015e28:	4b05      	ldr	r3, [pc, #20]	; (8015e40 <netbuf_data+0x58>)
 8015e2a:	22c4      	movs	r2, #196	; 0xc4
 8015e2c:	4908      	ldr	r1, [pc, #32]	; (8015e50 <netbuf_data+0x68>)
 8015e2e:	4806      	ldr	r0, [pc, #24]	; (8015e48 <netbuf_data+0x60>)
 8015e30:	f008 f859 	bl	801dee6 <iprintf>
 8015e34:	f06f 000f 	mvn.w	r0, #15
 8015e38:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 8015e3a:	f06f 0001 	mvn.w	r0, #1
}
 8015e3e:	bd08      	pop	{r3, pc}
 8015e40:	0801ee9c 	.word	0x0801ee9c
 8015e44:	0801ef10 	.word	0x0801ef10
 8015e48:	0801e950 	.word	0x0801e950
 8015e4c:	0801ef2c 	.word	0x0801ef2c
 8015e50:	0801ef4c 	.word	0x0801ef4c

08015e54 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8015e54:	b500      	push	{lr}
 8015e56:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8015e58:	4b20      	ldr	r3, [pc, #128]	; (8015edc <tcpip_thread+0x88>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	b113      	cbz	r3, 8015e64 <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 8015e5e:	4a20      	ldr	r2, [pc, #128]	; (8015ee0 <tcpip_thread+0x8c>)
 8015e60:	6810      	ldr	r0, [r2, #0]
 8015e62:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8015e64:	481f      	ldr	r0, [pc, #124]	; (8015ee4 <tcpip_thread+0x90>)
 8015e66:	f006 fdb8 	bl	801c9da <sys_mutex_lock>
 8015e6a:	e00e      	b.n	8015e8a <tcpip_thread+0x36>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015e6c:	4b1e      	ldr	r3, [pc, #120]	; (8015ee8 <tcpip_thread+0x94>)
 8015e6e:	2269      	movs	r2, #105	; 0x69
 8015e70:	491e      	ldr	r1, [pc, #120]	; (8015eec <tcpip_thread+0x98>)
 8015e72:	481f      	ldr	r0, [pc, #124]	; (8015ef0 <tcpip_thread+0x9c>)
 8015e74:	f008 f837 	bl	801dee6 <iprintf>
      continue;
 8015e78:	e007      	b.n	8015e8a <tcpip_thread+0x36>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8015e7a:	68da      	ldr	r2, [r3, #12]
 8015e7c:	6899      	ldr	r1, [r3, #8]
 8015e7e:	6858      	ldr	r0, [r3, #4]
 8015e80:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015e82:	9901      	ldr	r1, [sp, #4]
 8015e84:	2009      	movs	r0, #9
 8015e86:	f002 f88b 	bl	8017fa0 <memp_free>
    UNLOCK_TCPIP_CORE();
 8015e8a:	4c16      	ldr	r4, [pc, #88]	; (8015ee4 <tcpip_thread+0x90>)
 8015e8c:	4620      	mov	r0, r4
 8015e8e:	f006 fdab 	bl	801c9e8 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8015e92:	a901      	add	r1, sp, #4
 8015e94:	4817      	ldr	r0, [pc, #92]	; (8015ef4 <tcpip_thread+0xa0>)
 8015e96:	f006 fa93 	bl	801c3c0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	f006 fd9d 	bl	801c9da <sys_mutex_lock>
    if (msg == NULL) {
 8015ea0:	9b01      	ldr	r3, [sp, #4]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d0e2      	beq.n	8015e6c <tcpip_thread+0x18>
    switch (msg->type) {
 8015ea6:	781a      	ldrb	r2, [r3, #0]
 8015ea8:	2a03      	cmp	r2, #3
 8015eaa:	d00a      	beq.n	8015ec2 <tcpip_thread+0x6e>
 8015eac:	2a04      	cmp	r2, #4
 8015eae:	d010      	beq.n	8015ed2 <tcpip_thread+0x7e>
 8015eb0:	2a02      	cmp	r2, #2
 8015eb2:	d0e2      	beq.n	8015e7a <tcpip_thread+0x26>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015eb4:	4b0c      	ldr	r3, [pc, #48]	; (8015ee8 <tcpip_thread+0x94>)
 8015eb6:	229b      	movs	r2, #155	; 0x9b
 8015eb8:	490c      	ldr	r1, [pc, #48]	; (8015eec <tcpip_thread+0x98>)
 8015eba:	480d      	ldr	r0, [pc, #52]	; (8015ef0 <tcpip_thread+0x9c>)
 8015ebc:	f008 f813 	bl	801dee6 <iprintf>
      break;
 8015ec0:	e7e3      	b.n	8015e8a <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015ec2:	685a      	ldr	r2, [r3, #4]
 8015ec4:	6898      	ldr	r0, [r3, #8]
 8015ec6:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015ec8:	9901      	ldr	r1, [sp, #4]
 8015eca:	2008      	movs	r0, #8
 8015ecc:	f002 f868 	bl	8017fa0 <memp_free>
      break;
 8015ed0:	e7db      	b.n	8015e8a <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015ed2:	685a      	ldr	r2, [r3, #4]
 8015ed4:	6898      	ldr	r0, [r3, #8]
 8015ed6:	4790      	blx	r2
      break;
 8015ed8:	e7d7      	b.n	8015e8a <tcpip_thread+0x36>
 8015eda:	bf00      	nop
 8015edc:	20003f64 	.word	0x20003f64
 8015ee0:	20003f68 	.word	0x20003f68
 8015ee4:	200044bc 	.word	0x200044bc
 8015ee8:	0801efd0 	.word	0x0801efd0
 8015eec:	0801f000 	.word	0x0801f000
 8015ef0:	0801e950 	.word	0x0801e950
 8015ef4:	20003f60 	.word	0x20003f60

08015ef8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8015ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015efa:	4607      	mov	r7, r0
 8015efc:	460e      	mov	r6, r1
 8015efe:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8015f00:	4813      	ldr	r0, [pc, #76]	; (8015f50 <tcpip_inpkt+0x58>)
 8015f02:	f006 fcf9 	bl	801c8f8 <sys_mbox_valid>
 8015f06:	b188      	cbz	r0, 8015f2c <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015f08:	2009      	movs	r0, #9
 8015f0a:	f002 f82f 	bl	8017f6c <memp_malloc>
  if (msg == NULL) {
 8015f0e:	4604      	mov	r4, r0
 8015f10:	b1d0      	cbz	r0, 8015f48 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8015f12:	2302      	movs	r3, #2
 8015f14:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8015f16:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8015f18:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8015f1a:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8015f1c:	4601      	mov	r1, r0
 8015f1e:	480c      	ldr	r0, [pc, #48]	; (8015f50 <tcpip_inpkt+0x58>)
 8015f20:	f006 fca1 	bl	801c866 <sys_mbox_trypost>
 8015f24:	4603      	mov	r3, r0
 8015f26:	b940      	cbnz	r0, 8015f3a <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8015f2c:	4b09      	ldr	r3, [pc, #36]	; (8015f54 <tcpip_inpkt+0x5c>)
 8015f2e:	22b5      	movs	r2, #181	; 0xb5
 8015f30:	4909      	ldr	r1, [pc, #36]	; (8015f58 <tcpip_inpkt+0x60>)
 8015f32:	480a      	ldr	r0, [pc, #40]	; (8015f5c <tcpip_inpkt+0x64>)
 8015f34:	f007 ffd7 	bl	801dee6 <iprintf>
 8015f38:	e7e6      	b.n	8015f08 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015f3a:	4621      	mov	r1, r4
 8015f3c:	2009      	movs	r0, #9
 8015f3e:	f002 f82f 	bl	8017fa0 <memp_free>
    return ERR_MEM;
 8015f42:	f04f 33ff 	mov.w	r3, #4294967295
 8015f46:	e7ef      	b.n	8015f28 <tcpip_inpkt+0x30>
    return ERR_MEM;
 8015f48:	f04f 33ff 	mov.w	r3, #4294967295
 8015f4c:	e7ec      	b.n	8015f28 <tcpip_inpkt+0x30>
 8015f4e:	bf00      	nop
 8015f50:	20003f60 	.word	0x20003f60
 8015f54:	0801efd0 	.word	0x0801efd0
 8015f58:	0801efc0 	.word	0x0801efc0
 8015f5c:	0801e950 	.word	0x0801e950

08015f60 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8015f60:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8015f62:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8015f66:	f013 0f18 	tst.w	r3, #24
 8015f6a:	d103      	bne.n	8015f74 <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8015f6c:	4a03      	ldr	r2, [pc, #12]	; (8015f7c <tcpip_input+0x1c>)
 8015f6e:	f7ff ffc3 	bl	8015ef8 <tcpip_inpkt>
}
 8015f72:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 8015f74:	4a02      	ldr	r2, [pc, #8]	; (8015f80 <tcpip_input+0x20>)
 8015f76:	f7ff ffbf 	bl	8015ef8 <tcpip_inpkt>
 8015f7a:	bd08      	pop	{r3, pc}
 8015f7c:	08016cd9 	.word	0x08016cd9
 8015f80:	0801c701 	.word	0x0801c701

08015f84 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8015f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f86:	4607      	mov	r7, r0
 8015f88:	460e      	mov	r6, r1
 8015f8a:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8015f8c:	4816      	ldr	r0, [pc, #88]	; (8015fe8 <tcpip_callback_with_block+0x64>)
 8015f8e:	f006 fcb3 	bl	801c8f8 <sys_mbox_valid>
 8015f92:	b188      	cbz	r0, 8015fb8 <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8015f94:	2008      	movs	r0, #8
 8015f96:	f001 ffe9 	bl	8017f6c <memp_malloc>
  if (msg == NULL) {
 8015f9a:	4604      	mov	r4, r0
 8015f9c:	b300      	cbz	r0, 8015fe0 <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8015f9e:	2303      	movs	r3, #3
 8015fa0:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8015fa2:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8015fa4:	6086      	str	r6, [r0, #8]
  if (block) {
 8015fa6:	b975      	cbnz	r5, 8015fc6 <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8015fa8:	4601      	mov	r1, r0
 8015faa:	480f      	ldr	r0, [pc, #60]	; (8015fe8 <tcpip_callback_with_block+0x64>)
 8015fac:	f006 fc5b 	bl	801c866 <sys_mbox_trypost>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	b970      	cbnz	r0, 8015fd2 <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8015fb8:	4b0c      	ldr	r3, [pc, #48]	; (8015fec <tcpip_callback_with_block+0x68>)
 8015fba:	22ee      	movs	r2, #238	; 0xee
 8015fbc:	490c      	ldr	r1, [pc, #48]	; (8015ff0 <tcpip_callback_with_block+0x6c>)
 8015fbe:	480d      	ldr	r0, [pc, #52]	; (8015ff4 <tcpip_callback_with_block+0x70>)
 8015fc0:	f007 ff91 	bl	801dee6 <iprintf>
 8015fc4:	e7e6      	b.n	8015f94 <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 8015fc6:	4601      	mov	r1, r0
 8015fc8:	4807      	ldr	r0, [pc, #28]	; (8015fe8 <tcpip_callback_with_block+0x64>)
 8015fca:	f006 fc40 	bl	801c84e <sys_mbox_post>
  return ERR_OK;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	e7f0      	b.n	8015fb4 <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015fd2:	4621      	mov	r1, r4
 8015fd4:	2008      	movs	r0, #8
 8015fd6:	f001 ffe3 	bl	8017fa0 <memp_free>
      return ERR_MEM;
 8015fda:	f04f 33ff 	mov.w	r3, #4294967295
 8015fde:	e7e9      	b.n	8015fb4 <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 8015fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8015fe4:	e7e6      	b.n	8015fb4 <tcpip_callback_with_block+0x30>
 8015fe6:	bf00      	nop
 8015fe8:	20003f60 	.word	0x20003f60
 8015fec:	0801efd0 	.word	0x0801efd0
 8015ff0:	0801efc0 	.word	0x0801efc0
 8015ff4:	0801e950 	.word	0x0801e950

08015ff8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8015ff8:	b570      	push	{r4, r5, r6, lr}
 8015ffa:	4605      	mov	r5, r0
 8015ffc:	460e      	mov	r6, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8015ffe:	4c05      	ldr	r4, [pc, #20]	; (8016014 <tcpip_send_msg_wait_sem+0x1c>)
 8016000:	4620      	mov	r0, r4
 8016002:	f006 fcea 	bl	801c9da <sys_mutex_lock>
  fn(apimsg);
 8016006:	4630      	mov	r0, r6
 8016008:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 801600a:	4620      	mov	r0, r4
 801600c:	f006 fcec 	bl	801c9e8 <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8016010:	2000      	movs	r0, #0
 8016012:	bd70      	pop	{r4, r5, r6, pc}
 8016014:	200044bc 	.word	0x200044bc

08016018 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8016018:	b530      	push	{r4, r5, lr}
 801601a:	b083      	sub	sp, #12
 801601c:	4605      	mov	r5, r0
 801601e:	460c      	mov	r4, r1
  lwip_init();
 8016020:	f000 f870 	bl	8016104 <lwip_init>

  tcpip_init_done = initfunc;
 8016024:	4b13      	ldr	r3, [pc, #76]	; (8016074 <tcpip_init+0x5c>)
 8016026:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8016028:	4b13      	ldr	r3, [pc, #76]	; (8016078 <tcpip_init+0x60>)
 801602a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801602c:	2106      	movs	r1, #6
 801602e:	4813      	ldr	r0, [pc, #76]	; (801607c <tcpip_init+0x64>)
 8016030:	f006 fbf2 	bl	801c818 <sys_mbox_new>
 8016034:	b970      	cbnz	r0, 8016054 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016036:	4812      	ldr	r0, [pc, #72]	; (8016080 <tcpip_init+0x68>)
 8016038:	f006 fcbe 	bl	801c9b8 <sys_mutex_new>
 801603c:	b990      	cbnz	r0, 8016064 <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801603e:	2303      	movs	r3, #3
 8016040:	9300      	str	r3, [sp, #0]
 8016042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016046:	2200      	movs	r2, #0
 8016048:	490e      	ldr	r1, [pc, #56]	; (8016084 <tcpip_init+0x6c>)
 801604a:	480f      	ldr	r0, [pc, #60]	; (8016088 <tcpip_init+0x70>)
 801604c:	f006 fcd1 	bl	801c9f2 <sys_thread_new>
}
 8016050:	b003      	add	sp, #12
 8016052:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016054:	4b0d      	ldr	r3, [pc, #52]	; (801608c <tcpip_init+0x74>)
 8016056:	f240 12d5 	movw	r2, #469	; 0x1d5
 801605a:	490d      	ldr	r1, [pc, #52]	; (8016090 <tcpip_init+0x78>)
 801605c:	480d      	ldr	r0, [pc, #52]	; (8016094 <tcpip_init+0x7c>)
 801605e:	f007 ff42 	bl	801dee6 <iprintf>
 8016062:	e7e8      	b.n	8016036 <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8016064:	4b09      	ldr	r3, [pc, #36]	; (801608c <tcpip_init+0x74>)
 8016066:	f240 12d9 	movw	r2, #473	; 0x1d9
 801606a:	490b      	ldr	r1, [pc, #44]	; (8016098 <tcpip_init+0x80>)
 801606c:	4809      	ldr	r0, [pc, #36]	; (8016094 <tcpip_init+0x7c>)
 801606e:	f007 ff3a 	bl	801dee6 <iprintf>
 8016072:	e7e4      	b.n	801603e <tcpip_init+0x26>
 8016074:	20003f64 	.word	0x20003f64
 8016078:	20003f68 	.word	0x20003f68
 801607c:	20003f60 	.word	0x20003f60
 8016080:	200044bc 	.word	0x200044bc
 8016084:	08015e55 	.word	0x08015e55
 8016088:	0801efb0 	.word	0x0801efb0
 801608c:	0801efd0 	.word	0x0801efd0
 8016090:	0801ef68 	.word	0x0801ef68
 8016094:	0801e950 	.word	0x0801e950
 8016098:	0801ef8c 	.word	0x0801ef8c

0801609c <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801609c:	b1c8      	cbz	r0, 80160d2 <fs_open+0x36>
{
 801609e:	b570      	push	{r4, r5, r6, lr}
 80160a0:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 80160a2:	b1c9      	cbz	r1, 80160d8 <fs_open+0x3c>
 80160a4:	460d      	mov	r5, r1
 80160a6:	4c0e      	ldr	r4, [pc, #56]	; (80160e0 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80160a8:	b184      	cbz	r4, 80160cc <fs_open+0x30>
    if (!strcmp(name, (const char *)f->name)) {
 80160aa:	6861      	ldr	r1, [r4, #4]
 80160ac:	4628      	mov	r0, r5
 80160ae:	f7f9 ffc7 	bl	8010040 <strcmp>
 80160b2:	b108      	cbz	r0, 80160b8 <fs_open+0x1c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80160b4:	6824      	ldr	r4, [r4, #0]
 80160b6:	e7f7      	b.n	80160a8 <fs_open+0xc>
      file->data = (const char *)f->data;
 80160b8:	68a3      	ldr	r3, [r4, #8]
 80160ba:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 80160bc:	68e3      	ldr	r3, [r4, #12]
 80160be:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 80160c0:	68e3      	ldr	r3, [r4, #12]
 80160c2:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 80160c4:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 80160c6:	7c23      	ldrb	r3, [r4, #16]
 80160c8:	7433      	strb	r3, [r6, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80160ca:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  /* file not found */
  return ERR_VAL;
 80160cc:	f06f 0005 	mvn.w	r0, #5
 80160d0:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 80160d2:	f06f 000f 	mvn.w	r0, #15
 80160d6:	4770      	bx	lr
 80160d8:	f06f 000f 	mvn.w	r0, #15
}
 80160dc:	bd70      	pop	{r4, r5, r6, pc}
 80160de:	bf00      	nop
 80160e0:	080212c8 	.word	0x080212c8

080160e4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80160e4:	4770      	bx	lr

080160e6 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 80160e6:	ba40      	rev16	r0, r0
}
 80160e8:	b280      	uxth	r0, r0
 80160ea:	4770      	bx	lr

080160ec <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 80160ec:	0203      	lsls	r3, r0, #8
 80160ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80160f2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80160f6:	0a02      	lsrs	r2, r0, #8
 80160f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80160fc:	4313      	orrs	r3, r2
}
 80160fe:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8016102:	4770      	bx	lr

08016104 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8016104:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8016106:	f006 fc4b 	bl	801c9a0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801610a:	f001 fcf1 	bl	8017af0 <mem_init>
  memp_init();
 801610e:	f001 ff1d 	bl	8017f4c <memp_init>
  pbuf_init();
  netif_init();
 8016112:	f001 ff70 	bl	8017ff6 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8016116:	f006 f9c1 	bl	801c49c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801611a:	f002 fcc9 	bl	8018ab0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 801611e:	f006 f929 	bl	801c374 <sys_timeouts_init>
 8016122:	bd08      	pop	{r3, pc}

08016124 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016124:	b510      	push	{r4, lr}
 8016126:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016128:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801612c:	00d3      	lsls	r3, r2, #3
 801612e:	4a09      	ldr	r2, [pc, #36]	; (8016154 <etharp_free_entry+0x30>)
 8016130:	58d0      	ldr	r0, [r2, r3]
 8016132:	b138      	cbz	r0, 8016144 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016134:	f002 f90a 	bl	801834c <pbuf_free>
    arp_table[i].q = NULL;
 8016138:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801613c:	00d3      	lsls	r3, r2, #3
 801613e:	2100      	movs	r1, #0
 8016140:	4a04      	ldr	r2, [pc, #16]	; (8016154 <etharp_free_entry+0x30>)
 8016142:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016144:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016148:	00e2      	lsls	r2, r4, #3
 801614a:	4b02      	ldr	r3, [pc, #8]	; (8016154 <etharp_free_entry+0x30>)
 801614c:	4413      	add	r3, r2
 801614e:	2200      	movs	r2, #0
 8016150:	751a      	strb	r2, [r3, #20]
 8016152:	bd10      	pop	{r4, pc}
 8016154:	20003f6c 	.word	0x20003f6c

08016158 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8016158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801615c:	f04f 0e00 	mov.w	lr, #0
 8016160:	46f3      	mov	fp, lr
 8016162:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 8016164:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016168:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 801616a:	4667      	mov	r7, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801616c:	46e0      	mov	r8, ip
 801616e:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016170:	e003      	b.n	801617a <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016172:	b96c      	cbnz	r4, 8016190 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8016174:	b25f      	sxtb	r7, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016176:	3301      	adds	r3, #1
 8016178:	b2db      	uxtb	r3, r3
 801617a:	2b09      	cmp	r3, #9
 801617c:	d845      	bhi.n	801620a <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 801617e:	461a      	mov	r2, r3
 8016180:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8016184:	00e5      	lsls	r5, r4, #3
 8016186:	4c59      	ldr	r4, [pc, #356]	; (80162ec <etharp_find_entry+0x194>)
 8016188:	442c      	add	r4, r5
 801618a:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801618c:	2f0a      	cmp	r7, #10
 801618e:	d0f0      	beq.n	8016172 <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016190:	2c00      	cmp	r4, #0
 8016192:	d0f0      	beq.n	8016176 <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016194:	b140      	cbz	r0, 80161a8 <etharp_find_entry+0x50>
 8016196:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801619a:	00ee      	lsls	r6, r5, #3
 801619c:	4d53      	ldr	r5, [pc, #332]	; (80162ec <etharp_find_entry+0x194>)
 801619e:	4435      	add	r5, r6
 80161a0:	686d      	ldr	r5, [r5, #4]
 80161a2:	6806      	ldr	r6, [r0, #0]
 80161a4:	42ae      	cmp	r6, r5
 80161a6:	d00f      	beq.n	80161c8 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80161a8:	2c01      	cmp	r4, #1
 80161aa:	d010      	beq.n	80161ce <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80161ac:	2c01      	cmp	r4, #1
 80161ae:	d9e2      	bls.n	8016176 <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80161b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80161b4:	00d4      	lsls	r4, r2, #3
 80161b6:	4a4d      	ldr	r2, [pc, #308]	; (80162ec <etharp_find_entry+0x194>)
 80161b8:	4422      	add	r2, r4
 80161ba:	8a52      	ldrh	r2, [r2, #18]
 80161bc:	4596      	cmp	lr, r2
 80161be:	d8da      	bhi.n	8016176 <etharp_find_entry+0x1e>
            old_stable = i;
 80161c0:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 80161c4:	4696      	mov	lr, r2
 80161c6:	e7d6      	b.n	8016176 <etharp_find_entry+0x1e>
        return i;
 80161c8:	b258      	sxtb	r0, r3
 80161ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 80161ce:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80161d2:	00ec      	lsls	r4, r5, #3
 80161d4:	4d45      	ldr	r5, [pc, #276]	; (80162ec <etharp_find_entry+0x194>)
 80161d6:	592c      	ldr	r4, [r5, r4]
 80161d8:	b15c      	cbz	r4, 80161f2 <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 80161da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80161de:	00d4      	lsls	r4, r2, #3
 80161e0:	462a      	mov	r2, r5
 80161e2:	4422      	add	r2, r4
 80161e4:	8a52      	ldrh	r2, [r2, #18]
 80161e6:	4591      	cmp	r9, r2
 80161e8:	d8c5      	bhi.n	8016176 <etharp_find_entry+0x1e>
            old_queue = i;
 80161ea:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 80161ee:	4691      	mov	r9, r2
 80161f0:	e7c1      	b.n	8016176 <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 80161f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80161f6:	00d4      	lsls	r4, r2, #3
 80161f8:	4a3c      	ldr	r2, [pc, #240]	; (80162ec <etharp_find_entry+0x194>)
 80161fa:	4422      	add	r2, r4
 80161fc:	8a52      	ldrh	r2, [r2, #18]
 80161fe:	4593      	cmp	fp, r2
 8016200:	d8b9      	bhi.n	8016176 <etharp_find_entry+0x1e>
            old_pending = i;
 8016202:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 8016206:	4693      	mov	fp, r2
 8016208:	e7b5      	b.n	8016176 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801620a:	f011 0f02 	tst.w	r1, #2
 801620e:	d165      	bne.n	80162dc <etharp_find_entry+0x184>
 8016210:	2f0a      	cmp	r7, #10
 8016212:	d020      	beq.n	8016256 <etharp_find_entry+0xfe>
 8016214:	4605      	mov	r5, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016216:	2f09      	cmp	r7, #9
 8016218:	dc24      	bgt.n	8016264 <etharp_find_entry+0x10c>
    i = empty;
 801621a:	b2ff      	uxtb	r7, r7
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801621c:	2f09      	cmp	r7, #9
 801621e:	d84d      	bhi.n	80162bc <etharp_find_entry+0x164>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016220:	463c      	mov	r4, r7
 8016222:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8016226:	00da      	lsls	r2, r3, #3
 8016228:	4b30      	ldr	r3, [pc, #192]	; (80162ec <etharp_find_entry+0x194>)
 801622a:	4413      	add	r3, r2
 801622c:	7d1b      	ldrb	r3, [r3, #20]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d14c      	bne.n	80162cc <etharp_find_entry+0x174>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016232:	b135      	cbz	r5, 8016242 <etharp_find_entry+0xea>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016234:	6829      	ldr	r1, [r5, #0]
 8016236:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801623a:	00da      	lsls	r2, r3, #3
 801623c:	4b2b      	ldr	r3, [pc, #172]	; (80162ec <etharp_find_entry+0x194>)
 801623e:	4413      	add	r3, r2
 8016240:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8016242:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016246:	00e2      	lsls	r2, r4, #3
 8016248:	4b28      	ldr	r3, [pc, #160]	; (80162ec <etharp_find_entry+0x194>)
 801624a:	4413      	add	r3, r2
 801624c:	2200      	movs	r2, #0
 801624e:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8016250:	b278      	sxtb	r0, r7
 8016252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016256:	f011 0f01 	tst.w	r1, #1
 801625a:	d1db      	bne.n	8016214 <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 801625c:	f04f 30ff 	mov.w	r0, #4294967295
 8016260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 8016264:	f1b8 0f09 	cmp.w	r8, #9
 8016268:	dc14      	bgt.n	8016294 <etharp_find_entry+0x13c>
      i = old_stable;
 801626a:	fa5f f788 	uxtb.w	r7, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801626e:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8016272:	00d3      	lsls	r3, r2, #3
 8016274:	4a1d      	ldr	r2, [pc, #116]	; (80162ec <etharp_find_entry+0x194>)
 8016276:	58d3      	ldr	r3, [r2, r3]
 8016278:	b133      	cbz	r3, 8016288 <etharp_find_entry+0x130>
 801627a:	4b1d      	ldr	r3, [pc, #116]	; (80162f0 <etharp_find_entry+0x198>)
 801627c:	f240 126f 	movw	r2, #367	; 0x16f
 8016280:	491c      	ldr	r1, [pc, #112]	; (80162f4 <etharp_find_entry+0x19c>)
 8016282:	481d      	ldr	r0, [pc, #116]	; (80162f8 <etharp_find_entry+0x1a0>)
 8016284:	f007 fe2f 	bl	801dee6 <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016288:	2f09      	cmp	r7, #9
 801628a:	d80f      	bhi.n	80162ac <etharp_find_entry+0x154>
    etharp_free_entry(i);
 801628c:	4638      	mov	r0, r7
 801628e:	f7ff ff49 	bl	8016124 <etharp_free_entry>
 8016292:	e7c3      	b.n	801621c <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016294:	f1ba 0f09 	cmp.w	sl, #9
 8016298:	dc02      	bgt.n	80162a0 <etharp_find_entry+0x148>
      i = old_pending;
 801629a:	fa5f f78a 	uxtb.w	r7, sl
 801629e:	e7f3      	b.n	8016288 <etharp_find_entry+0x130>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80162a0:	f1bc 0f09 	cmp.w	ip, #9
 80162a4:	dc1e      	bgt.n	80162e4 <etharp_find_entry+0x18c>
      i = old_queue;
 80162a6:	fa5f f78c 	uxtb.w	r7, ip
 80162aa:	e7ed      	b.n	8016288 <etharp_find_entry+0x130>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80162ac:	4b10      	ldr	r3, [pc, #64]	; (80162f0 <etharp_find_entry+0x198>)
 80162ae:	f240 1281 	movw	r2, #385	; 0x181
 80162b2:	4912      	ldr	r1, [pc, #72]	; (80162fc <etharp_find_entry+0x1a4>)
 80162b4:	4810      	ldr	r0, [pc, #64]	; (80162f8 <etharp_find_entry+0x1a0>)
 80162b6:	f007 fe16 	bl	801dee6 <iprintf>
 80162ba:	e7e7      	b.n	801628c <etharp_find_entry+0x134>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80162bc:	4b0c      	ldr	r3, [pc, #48]	; (80162f0 <etharp_find_entry+0x198>)
 80162be:	f240 1285 	movw	r2, #389	; 0x185
 80162c2:	490e      	ldr	r1, [pc, #56]	; (80162fc <etharp_find_entry+0x1a4>)
 80162c4:	480c      	ldr	r0, [pc, #48]	; (80162f8 <etharp_find_entry+0x1a0>)
 80162c6:	f007 fe0e 	bl	801dee6 <iprintf>
 80162ca:	e7a9      	b.n	8016220 <etharp_find_entry+0xc8>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80162cc:	4b08      	ldr	r3, [pc, #32]	; (80162f0 <etharp_find_entry+0x198>)
 80162ce:	f240 1287 	movw	r2, #391	; 0x187
 80162d2:	490b      	ldr	r1, [pc, #44]	; (8016300 <etharp_find_entry+0x1a8>)
 80162d4:	4808      	ldr	r0, [pc, #32]	; (80162f8 <etharp_find_entry+0x1a0>)
 80162d6:	f007 fe06 	bl	801dee6 <iprintf>
 80162da:	e7aa      	b.n	8016232 <etharp_find_entry+0xda>
    return (s8_t)ERR_MEM;
 80162dc:	f04f 30ff 	mov.w	r0, #4294967295
 80162e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 80162e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80162e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ec:	20003f6c 	.word	0x20003f6c
 80162f0:	080212dc 	.word	0x080212dc
 80162f4:	08021314 	.word	0x08021314
 80162f8:	0801e950 	.word	0x0801e950
 80162fc:	0802132c 	.word	0x0802132c
 8016300:	08021340 	.word	0x08021340

08016304 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016306:	b083      	sub	sp, #12
 8016308:	4604      	mov	r4, r0
 801630a:	460d      	mov	r5, r1
 801630c:	4616      	mov	r6, r2
 801630e:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016310:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016314:	2b06      	cmp	r3, #6
 8016316:	d006      	beq.n	8016326 <etharp_update_arp_entry+0x22>
 8016318:	4b28      	ldr	r3, [pc, #160]	; (80163bc <etharp_update_arp_entry+0xb8>)
 801631a:	f240 12ab 	movw	r2, #427	; 0x1ab
 801631e:	4928      	ldr	r1, [pc, #160]	; (80163c0 <etharp_update_arp_entry+0xbc>)
 8016320:	4828      	ldr	r0, [pc, #160]	; (80163c4 <etharp_update_arp_entry+0xc0>)
 8016322:	f007 fde0 	bl	801dee6 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016326:	2d00      	cmp	r5, #0
 8016328:	d039      	beq.n	801639e <etharp_update_arp_entry+0x9a>
 801632a:	6828      	ldr	r0, [r5, #0]
 801632c:	2800      	cmp	r0, #0
 801632e:	d039      	beq.n	80163a4 <etharp_update_arp_entry+0xa0>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016330:	4621      	mov	r1, r4
 8016332:	f000 fe3c 	bl	8016fae <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8016336:	2800      	cmp	r0, #0
 8016338:	d137      	bne.n	80163aa <etharp_update_arp_entry+0xa6>
      ip4_addr_ismulticast(ipaddr)) {
 801633a:	682b      	ldr	r3, [r5, #0]
 801633c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016340:	2be0      	cmp	r3, #224	; 0xe0
 8016342:	d035      	beq.n	80163b0 <etharp_update_arp_entry+0xac>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016344:	4622      	mov	r2, r4
 8016346:	4639      	mov	r1, r7
 8016348:	4628      	mov	r0, r5
 801634a:	f7ff ff05 	bl	8016158 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 801634e:	2800      	cmp	r0, #0
 8016350:	db23      	blt.n	801639a <etharp_update_arp_entry+0x96>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016352:	4d1d      	ldr	r5, [pc, #116]	; (80163c8 <etharp_update_arp_entry+0xc4>)
 8016354:	0042      	lsls	r2, r0, #1
 8016356:	1813      	adds	r3, r2, r0
 8016358:	00d9      	lsls	r1, r3, #3
 801635a:	186f      	adds	r7, r5, r1
 801635c:	2302      	movs	r3, #2
 801635e:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016360:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8016362:	460b      	mov	r3, r1
 8016364:	3308      	adds	r3, #8
 8016366:	442b      	add	r3, r5
 8016368:	6832      	ldr	r2, [r6, #0]
 801636a:	605a      	str	r2, [r3, #4]
 801636c:	88b2      	ldrh	r2, [r6, #4]
 801636e:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016370:	2300      	movs	r3, #0
 8016372:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016374:	586d      	ldr	r5, [r5, r1]
 8016376:	b1f5      	cbz	r5, 80163b6 <etharp_update_arp_entry+0xb2>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 8016378:	2700      	movs	r7, #0
 801637a:	4a13      	ldr	r2, [pc, #76]	; (80163c8 <etharp_update_arp_entry+0xc4>)
 801637c:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801637e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016382:	9300      	str	r3, [sp, #0]
 8016384:	4633      	mov	r3, r6
 8016386:	f104 0225 	add.w	r2, r4, #37	; 0x25
 801638a:	4629      	mov	r1, r5
 801638c:	4620      	mov	r0, r4
 801638e:	f006 fa0b 	bl	801c7a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016392:	4628      	mov	r0, r5
 8016394:	f001 ffda 	bl	801834c <pbuf_free>
  }
  return ERR_OK;
 8016398:	4638      	mov	r0, r7
}
 801639a:	b003      	add	sp, #12
 801639c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 801639e:	f06f 000f 	mvn.w	r0, #15
 80163a2:	e7fa      	b.n	801639a <etharp_update_arp_entry+0x96>
 80163a4:	f06f 000f 	mvn.w	r0, #15
 80163a8:	e7f7      	b.n	801639a <etharp_update_arp_entry+0x96>
 80163aa:	f06f 000f 	mvn.w	r0, #15
 80163ae:	e7f4      	b.n	801639a <etharp_update_arp_entry+0x96>
 80163b0:	f06f 000f 	mvn.w	r0, #15
 80163b4:	e7f1      	b.n	801639a <etharp_update_arp_entry+0x96>
  return ERR_OK;
 80163b6:	2000      	movs	r0, #0
 80163b8:	e7ef      	b.n	801639a <etharp_update_arp_entry+0x96>
 80163ba:	bf00      	nop
 80163bc:	080212dc 	.word	0x080212dc
 80163c0:	08021494 	.word	0x08021494
 80163c4:	0801e950 	.word	0x0801e950
 80163c8:	20003f6c 	.word	0x20003f6c

080163cc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80163cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163d0:	b082      	sub	sp, #8
 80163d2:	4689      	mov	r9, r1
 80163d4:	4692      	mov	sl, r2
 80163d6:	4698      	mov	r8, r3
 80163d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80163da:	4607      	mov	r7, r0
 80163dc:	2800      	cmp	r0, #0
 80163de:	d048      	beq.n	8016472 <etharp_raw+0xa6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80163e0:	2200      	movs	r2, #0
 80163e2:	211c      	movs	r1, #28
 80163e4:	2002      	movs	r0, #2
 80163e6:	f002 f81d 	bl	8018424 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80163ea:	4606      	mov	r6, r0
 80163ec:	2800      	cmp	r0, #0
 80163ee:	d050      	beq.n	8016492 <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80163f0:	8943      	ldrh	r3, [r0, #10]
 80163f2:	2b1b      	cmp	r3, #27
 80163f4:	d945      	bls.n	8016482 <etharp_raw+0xb6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80163f6:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80163f8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80163fc:	f7ff fe73 	bl	80160e6 <lwip_htons>
 8016400:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016402:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016406:	2b06      	cmp	r3, #6
 8016408:	d006      	beq.n	8016418 <etharp_raw+0x4c>
 801640a:	4b23      	ldr	r3, [pc, #140]	; (8016498 <etharp_raw+0xcc>)
 801640c:	f240 426b 	movw	r2, #1131	; 0x46b
 8016410:	4922      	ldr	r1, [pc, #136]	; (801649c <etharp_raw+0xd0>)
 8016412:	4823      	ldr	r0, [pc, #140]	; (80164a0 <etharp_raw+0xd4>)
 8016414:	f007 fd67 	bl	801dee6 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8016418:	f8d8 3000 	ldr.w	r3, [r8]
 801641c:	60a3      	str	r3, [r4, #8]
 801641e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8016422:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8016424:	682b      	ldr	r3, [r5, #0]
 8016426:	f8c4 3012 	str.w	r3, [r4, #18]
 801642a:	88ab      	ldrh	r3, [r5, #4]
 801642c:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801642e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8016436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801643c:	2500      	movs	r5, #0
 801643e:	7025      	strb	r5, [r4, #0]
 8016440:	2301      	movs	r3, #1
 8016442:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016444:	2308      	movs	r3, #8
 8016446:	70a3      	strb	r3, [r4, #2]
 8016448:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801644a:	2306      	movs	r3, #6
 801644c:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801644e:	2304      	movs	r3, #4
 8016450:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016452:	f640 0306 	movw	r3, #2054	; 0x806
 8016456:	9300      	str	r3, [sp, #0]
 8016458:	4653      	mov	r3, sl
 801645a:	464a      	mov	r2, r9
 801645c:	4631      	mov	r1, r6
 801645e:	4638      	mov	r0, r7
 8016460:	f006 f9a2 	bl	801c7a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016464:	4630      	mov	r0, r6
 8016466:	f001 ff71 	bl	801834c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801646a:	4628      	mov	r0, r5
}
 801646c:	b002      	add	sp, #8
 801646e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016472:	4b09      	ldr	r3, [pc, #36]	; (8016498 <etharp_raw+0xcc>)
 8016474:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8016478:	490a      	ldr	r1, [pc, #40]	; (80164a4 <etharp_raw+0xd8>)
 801647a:	4809      	ldr	r0, [pc, #36]	; (80164a0 <etharp_raw+0xd4>)
 801647c:	f007 fd33 	bl	801dee6 <iprintf>
 8016480:	e7ae      	b.n	80163e0 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016482:	4b05      	ldr	r3, [pc, #20]	; (8016498 <etharp_raw+0xcc>)
 8016484:	f240 4264 	movw	r2, #1124	; 0x464
 8016488:	4907      	ldr	r1, [pc, #28]	; (80164a8 <etharp_raw+0xdc>)
 801648a:	4805      	ldr	r0, [pc, #20]	; (80164a0 <etharp_raw+0xd4>)
 801648c:	f007 fd2b 	bl	801dee6 <iprintf>
 8016490:	e7b1      	b.n	80163f6 <etharp_raw+0x2a>
    return ERR_MEM;
 8016492:	f04f 30ff 	mov.w	r0, #4294967295
 8016496:	e7e9      	b.n	801646c <etharp_raw+0xa0>
 8016498:	080212dc 	.word	0x080212dc
 801649c:	08021450 	.word	0x08021450
 80164a0:	0801e950 	.word	0x0801e950
 80164a4:	0802140c 	.word	0x0802140c
 80164a8:	0802141c 	.word	0x0802141c

080164ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80164ac:	b530      	push	{r4, r5, lr}
 80164ae:	b085      	sub	sp, #20
 80164b0:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80164b2:	f100 0425 	add.w	r4, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80164b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80164b8:	2501      	movs	r5, #1
 80164ba:	9503      	str	r5, [sp, #12]
 80164bc:	9102      	str	r1, [sp, #8]
 80164be:	4904      	ldr	r1, [pc, #16]	; (80164d0 <etharp_request_dst+0x24>)
 80164c0:	9101      	str	r1, [sp, #4]
 80164c2:	9300      	str	r3, [sp, #0]
 80164c4:	4623      	mov	r3, r4
 80164c6:	4621      	mov	r1, r4
 80164c8:	f7ff ff80 	bl	80163cc <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 80164cc:	b005      	add	sp, #20
 80164ce:	bd30      	pop	{r4, r5, pc}
 80164d0:	08022bec 	.word	0x08022bec

080164d4 <etharp_cleanup_netif>:
{
 80164d4:	b538      	push	{r3, r4, r5, lr}
 80164d6:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164d8:	2400      	movs	r4, #0
 80164da:	e001      	b.n	80164e0 <etharp_cleanup_netif+0xc>
 80164dc:	3401      	adds	r4, #1
 80164de:	b2e4      	uxtb	r4, r4
 80164e0:	2c09      	cmp	r4, #9
 80164e2:	d810      	bhi.n	8016506 <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 80164e4:	4620      	mov	r0, r4
 80164e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80164ea:	00da      	lsls	r2, r3, #3
 80164ec:	4b06      	ldr	r3, [pc, #24]	; (8016508 <etharp_cleanup_netif+0x34>)
 80164ee:	4413      	add	r3, r2
 80164f0:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d0f2      	beq.n	80164dc <etharp_cleanup_netif+0x8>
 80164f6:	4b04      	ldr	r3, [pc, #16]	; (8016508 <etharp_cleanup_netif+0x34>)
 80164f8:	4413      	add	r3, r2
 80164fa:	689b      	ldr	r3, [r3, #8]
 80164fc:	42ab      	cmp	r3, r5
 80164fe:	d1ed      	bne.n	80164dc <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 8016500:	f7ff fe10 	bl	8016124 <etharp_free_entry>
 8016504:	e7ea      	b.n	80164dc <etharp_cleanup_netif+0x8>
}
 8016506:	bd38      	pop	{r3, r4, r5, pc}
 8016508:	20003f6c 	.word	0x20003f6c

0801650c <etharp_input>:
{
 801650c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016510:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016512:	b161      	cbz	r1, 801652e <etharp_input+0x22>
 8016514:	4604      	mov	r4, r0
 8016516:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 8016518:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801651a:	882b      	ldrh	r3, [r5, #0]
 801651c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016520:	d00d      	beq.n	801653e <etharp_input+0x32>
    pbuf_free(p);
 8016522:	4620      	mov	r0, r4
 8016524:	f001 ff12 	bl	801834c <pbuf_free>
}
 8016528:	b006      	add	sp, #24
 801652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801652e:	4b20      	ldr	r3, [pc, #128]	; (80165b0 <etharp_input+0xa4>)
 8016530:	f44f 7222 	mov.w	r2, #648	; 0x288
 8016534:	491f      	ldr	r1, [pc, #124]	; (80165b4 <etharp_input+0xa8>)
 8016536:	4820      	ldr	r0, [pc, #128]	; (80165b8 <etharp_input+0xac>)
 8016538:	f007 fcd5 	bl	801dee6 <iprintf>
 801653c:	e7f4      	b.n	8016528 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801653e:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016540:	2b06      	cmp	r3, #6
 8016542:	d1ee      	bne.n	8016522 <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016544:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016546:	2b04      	cmp	r3, #4
 8016548:	d1eb      	bne.n	8016522 <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801654a:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801654c:	2b08      	cmp	r3, #8
 801654e:	d1e8      	bne.n	8016522 <etharp_input+0x16>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8016550:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8016554:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8016556:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016558:	684b      	ldr	r3, [r1, #4]
 801655a:	b1ab      	cbz	r3, 8016588 <etharp_input+0x7c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801655c:	429f      	cmp	r7, r3
 801655e:	bf14      	ite	ne
 8016560:	2700      	movne	r7, #0
 8016562:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016564:	f105 0808 	add.w	r8, r5, #8
 8016568:	b187      	cbz	r7, 801658c <etharp_input+0x80>
 801656a:	2301      	movs	r3, #1
 801656c:	4642      	mov	r2, r8
 801656e:	a905      	add	r1, sp, #20
 8016570:	4630      	mov	r0, r6
 8016572:	f7ff fec7 	bl	8016304 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 8016576:	88eb      	ldrh	r3, [r5, #6]
 8016578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801657c:	d100      	bne.n	8016580 <etharp_input+0x74>
    if (for_us) {
 801657e:	b93f      	cbnz	r7, 8016590 <etharp_input+0x84>
  pbuf_free(p);
 8016580:	4620      	mov	r0, r4
 8016582:	f001 fee3 	bl	801834c <pbuf_free>
 8016586:	e7cf      	b.n	8016528 <etharp_input+0x1c>
    for_us = 0;
 8016588:	2700      	movs	r7, #0
 801658a:	e7eb      	b.n	8016564 <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801658c:	2302      	movs	r3, #2
 801658e:	e7ed      	b.n	801656c <etharp_input+0x60>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016590:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016594:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 8016596:	2202      	movs	r2, #2
 8016598:	9203      	str	r2, [sp, #12]
 801659a:	aa05      	add	r2, sp, #20
 801659c:	9202      	str	r2, [sp, #8]
 801659e:	f8cd 8004 	str.w	r8, [sp, #4]
 80165a2:	9300      	str	r3, [sp, #0]
 80165a4:	460b      	mov	r3, r1
 80165a6:	4642      	mov	r2, r8
 80165a8:	4630      	mov	r0, r6
 80165aa:	f7ff ff0f 	bl	80163cc <etharp_raw>
 80165ae:	e7e7      	b.n	8016580 <etharp_input+0x74>
 80165b0:	080212dc 	.word	0x080212dc
 80165b4:	0802140c 	.word	0x0802140c
 80165b8:	0801e950 	.word	0x0801e950

080165bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80165bc:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80165be:	4a02      	ldr	r2, [pc, #8]	; (80165c8 <etharp_request+0xc>)
 80165c0:	f7ff ff74 	bl	80164ac <etharp_request_dst>
}
 80165c4:	bd08      	pop	{r3, pc}
 80165c6:	bf00      	nop
 80165c8:	08022b78 	.word	0x08022b78

080165cc <etharp_tmr>:
{
 80165cc:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165ce:	2400      	movs	r4, #0
 80165d0:	e005      	b.n	80165de <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80165d2:	2b04      	cmp	r3, #4
 80165d4:	d91d      	bls.n	8016612 <etharp_tmr+0x46>
        etharp_free_entry(i);
 80165d6:	f7ff fda5 	bl	8016124 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165da:	3401      	adds	r4, #1
 80165dc:	b2e4      	uxtb	r4, r4
 80165de:	2c09      	cmp	r4, #9
 80165e0:	d838      	bhi.n	8016654 <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 80165e2:	4620      	mov	r0, r4
 80165e4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80165e8:	00da      	lsls	r2, r3, #3
 80165ea:	4b1b      	ldr	r3, [pc, #108]	; (8016658 <etharp_tmr+0x8c>)
 80165ec:	4413      	add	r3, r2
 80165ee:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d0f2      	beq.n	80165da <etharp_tmr+0xe>
      arp_table[i].ctime++;
 80165f4:	4611      	mov	r1, r2
 80165f6:	4a18      	ldr	r2, [pc, #96]	; (8016658 <etharp_tmr+0x8c>)
 80165f8:	440a      	add	r2, r1
 80165fa:	8a53      	ldrh	r3, [r2, #18]
 80165fc:	3301      	adds	r3, #1
 80165fe:	b29b      	uxth	r3, r3
 8016600:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016602:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016606:	d2e6      	bcs.n	80165d6 <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016608:	4a13      	ldr	r2, [pc, #76]	; (8016658 <etharp_tmr+0x8c>)
 801660a:	440a      	add	r2, r1
 801660c:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801660e:	2a01      	cmp	r2, #1
 8016610:	d0df      	beq.n	80165d2 <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016612:	2a03      	cmp	r2, #3
 8016614:	d00e      	beq.n	8016634 <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016616:	2a04      	cmp	r2, #4
 8016618:	d014      	beq.n	8016644 <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801661a:	2a01      	cmp	r2, #1
 801661c:	d1dd      	bne.n	80165da <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801661e:	4a0e      	ldr	r2, [pc, #56]	; (8016658 <etharp_tmr+0x8c>)
 8016620:	0043      	lsls	r3, r0, #1
 8016622:	181d      	adds	r5, r3, r0
 8016624:	00e9      	lsls	r1, r5, #3
 8016626:	4411      	add	r1, r2
 8016628:	460a      	mov	r2, r1
 801662a:	3104      	adds	r1, #4
 801662c:	6890      	ldr	r0, [r2, #8]
 801662e:	f7ff ffc5 	bl	80165bc <etharp_request>
 8016632:	e7d2      	b.n	80165da <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016634:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016638:	00c2      	lsls	r2, r0, #3
 801663a:	4b07      	ldr	r3, [pc, #28]	; (8016658 <etharp_tmr+0x8c>)
 801663c:	4413      	add	r3, r2
 801663e:	2204      	movs	r2, #4
 8016640:	751a      	strb	r2, [r3, #20]
 8016642:	e7ca      	b.n	80165da <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016644:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016648:	00c2      	lsls	r2, r0, #3
 801664a:	4b03      	ldr	r3, [pc, #12]	; (8016658 <etharp_tmr+0x8c>)
 801664c:	4413      	add	r3, r2
 801664e:	2202      	movs	r2, #2
 8016650:	751a      	strb	r2, [r3, #20]
 8016652:	e7c2      	b.n	80165da <etharp_tmr+0xe>
}
 8016654:	bd38      	pop	{r3, r4, r5, pc}
 8016656:	bf00      	nop
 8016658:	20003f6c 	.word	0x20003f6c

0801665c <etharp_output_to_arp_index>:
{
 801665c:	b570      	push	{r4, r5, r6, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	4605      	mov	r5, r0
 8016662:	460e      	mov	r6, r1
 8016664:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016666:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801666a:	00da      	lsls	r2, r3, #3
 801666c:	4b2c      	ldr	r3, [pc, #176]	; (8016720 <etharp_output_to_arp_index+0xc4>)
 801666e:	4413      	add	r3, r2
 8016670:	7d1b      	ldrb	r3, [r3, #20]
 8016672:	2b01      	cmp	r3, #1
 8016674:	d919      	bls.n	80166aa <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016676:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801667a:	00da      	lsls	r2, r3, #3
 801667c:	4b28      	ldr	r3, [pc, #160]	; (8016720 <etharp_output_to_arp_index+0xc4>)
 801667e:	4413      	add	r3, r2
 8016680:	7d1b      	ldrb	r3, [r3, #20]
 8016682:	2b02      	cmp	r3, #2
 8016684:	d019      	beq.n	80166ba <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016686:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801668a:	00e3      	lsls	r3, r4, #3
 801668c:	3308      	adds	r3, #8
 801668e:	4a24      	ldr	r2, [pc, #144]	; (8016720 <etharp_output_to_arp_index+0xc4>)
 8016690:	4413      	add	r3, r2
 8016692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016696:	9200      	str	r2, [sp, #0]
 8016698:	3304      	adds	r3, #4
 801669a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 801669e:	4631      	mov	r1, r6
 80166a0:	4628      	mov	r0, r5
 80166a2:	f006 f881 	bl	801c7a8 <ethernet_output>
}
 80166a6:	b002      	add	sp, #8
 80166a8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80166aa:	4b1e      	ldr	r3, [pc, #120]	; (8016724 <etharp_output_to_arp_index+0xc8>)
 80166ac:	f240 22ed 	movw	r2, #749	; 0x2ed
 80166b0:	491d      	ldr	r1, [pc, #116]	; (8016728 <etharp_output_to_arp_index+0xcc>)
 80166b2:	481e      	ldr	r0, [pc, #120]	; (801672c <etharp_output_to_arp_index+0xd0>)
 80166b4:	f007 fc17 	bl	801dee6 <iprintf>
 80166b8:	e7dd      	b.n	8016676 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80166ba:	4b19      	ldr	r3, [pc, #100]	; (8016720 <etharp_output_to_arp_index+0xc4>)
 80166bc:	4413      	add	r3, r2
 80166be:	8a5b      	ldrh	r3, [r3, #18]
 80166c0:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80166c4:	d819      	bhi.n	80166fa <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80166c6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80166ca:	d3dc      	bcc.n	8016686 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80166cc:	4a14      	ldr	r2, [pc, #80]	; (8016720 <etharp_output_to_arp_index+0xc4>)
 80166ce:	0063      	lsls	r3, r4, #1
 80166d0:	1918      	adds	r0, r3, r4
 80166d2:	00c1      	lsls	r1, r0, #3
 80166d4:	4608      	mov	r0, r1
 80166d6:	4411      	add	r1, r2
 80166d8:	3008      	adds	r0, #8
 80166da:	4402      	add	r2, r0
 80166dc:	3204      	adds	r2, #4
 80166de:	3104      	adds	r1, #4
 80166e0:	4628      	mov	r0, r5
 80166e2:	f7ff fee3 	bl	80164ac <etharp_request_dst>
 80166e6:	2800      	cmp	r0, #0
 80166e8:	d1cd      	bne.n	8016686 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80166ea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80166ee:	00da      	lsls	r2, r3, #3
 80166f0:	4b0b      	ldr	r3, [pc, #44]	; (8016720 <etharp_output_to_arp_index+0xc4>)
 80166f2:	4413      	add	r3, r2
 80166f4:	2203      	movs	r2, #3
 80166f6:	751a      	strb	r2, [r3, #20]
 80166f8:	e7c5      	b.n	8016686 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80166fa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80166fe:	00d3      	lsls	r3, r2, #3
 8016700:	4907      	ldr	r1, [pc, #28]	; (8016720 <etharp_output_to_arp_index+0xc4>)
 8016702:	4419      	add	r1, r3
 8016704:	3104      	adds	r1, #4
 8016706:	4628      	mov	r0, r5
 8016708:	f7ff ff58 	bl	80165bc <etharp_request>
 801670c:	2800      	cmp	r0, #0
 801670e:	d1ba      	bne.n	8016686 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016710:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8016714:	00da      	lsls	r2, r3, #3
 8016716:	4b02      	ldr	r3, [pc, #8]	; (8016720 <etharp_output_to_arp_index+0xc4>)
 8016718:	4413      	add	r3, r2
 801671a:	2203      	movs	r2, #3
 801671c:	751a      	strb	r2, [r3, #20]
 801671e:	e7b2      	b.n	8016686 <etharp_output_to_arp_index+0x2a>
 8016720:	20003f6c 	.word	0x20003f6c
 8016724:	080212dc 	.word	0x080212dc
 8016728:	0802138c 	.word	0x0802138c
 801672c:	0801e950 	.word	0x0801e950

08016730 <etharp_query>:
{
 8016730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016734:	b083      	sub	sp, #12
 8016736:	4606      	mov	r6, r0
 8016738:	460c      	mov	r4, r1
 801673a:	4617      	mov	r7, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801673c:	f100 0825 	add.w	r8, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016740:	4601      	mov	r1, r0
 8016742:	6820      	ldr	r0, [r4, #0]
 8016744:	f000 fc33 	bl	8016fae <ip4_addr_isbroadcast_u32>
 8016748:	2800      	cmp	r0, #0
 801674a:	f040 80aa 	bne.w	80168a2 <etharp_query+0x172>
      ip4_addr_ismulticast(ipaddr) ||
 801674e:	6823      	ldr	r3, [r4, #0]
 8016750:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016754:	2ae0      	cmp	r2, #224	; 0xe0
 8016756:	f000 80a7 	beq.w	80168a8 <etharp_query+0x178>
      ip4_addr_ismulticast(ipaddr) ||
 801675a:	2c00      	cmp	r4, #0
 801675c:	f000 80a7 	beq.w	80168ae <etharp_query+0x17e>
      ip4_addr_isany(ipaddr)) {
 8016760:	2b00      	cmp	r3, #0
 8016762:	f000 80a7 	beq.w	80168b4 <etharp_query+0x184>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016766:	4632      	mov	r2, r6
 8016768:	2101      	movs	r1, #1
 801676a:	4620      	mov	r0, r4
 801676c:	f7ff fcf4 	bl	8016158 <etharp_find_entry>
  if (i < 0) {
 8016770:	1e05      	subs	r5, r0, #0
 8016772:	f2c0 80a2 	blt.w	80168ba <etharp_query+0x18a>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016776:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801677a:	00da      	lsls	r2, r3, #3
 801677c:	4b51      	ldr	r3, [pc, #324]	; (80168c4 <etharp_query+0x194>)
 801677e:	4413      	add	r3, r2
 8016780:	7d1b      	ldrb	r3, [r3, #20]
 8016782:	bb1b      	cbnz	r3, 80167cc <etharp_query+0x9c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016784:	006a      	lsls	r2, r5, #1
 8016786:	442a      	add	r2, r5
 8016788:	00d1      	lsls	r1, r2, #3
 801678a:	4b4e      	ldr	r3, [pc, #312]	; (80168c4 <etharp_query+0x194>)
 801678c:	440b      	add	r3, r1
 801678e:	f04f 0901 	mov.w	r9, #1
 8016792:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 8016796:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016798:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801679c:	00da      	lsls	r2, r3, #3
 801679e:	4b49      	ldr	r3, [pc, #292]	; (80168c4 <etharp_query+0x194>)
 80167a0:	4413      	add	r3, r2
 80167a2:	7d1b      	ldrb	r3, [r3, #20]
 80167a4:	b1ab      	cbz	r3, 80167d2 <etharp_query+0xa2>
  if (is_new_entry || (q == NULL)) {
 80167a6:	f1b9 0f00 	cmp.w	r9, #0
 80167aa:	d11a      	bne.n	80167e2 <etharp_query+0xb2>
 80167ac:	b1cf      	cbz	r7, 80167e2 <etharp_query+0xb2>
  err_t result = ERR_MEM;
 80167ae:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 80167b2:	b1f7      	cbz	r7, 80167f2 <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80167b4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80167b8:	00da      	lsls	r2, r3, #3
 80167ba:	4b42      	ldr	r3, [pc, #264]	; (80168c4 <etharp_query+0x194>)
 80167bc:	4413      	add	r3, r2
 80167be:	7d1b      	ldrb	r3, [r3, #20]
 80167c0:	2b01      	cmp	r3, #1
 80167c2:	d81e      	bhi.n	8016802 <etharp_query+0xd2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80167c4:	2b01      	cmp	r3, #1
 80167c6:	d12c      	bne.n	8016822 <etharp_query+0xf2>
 80167c8:	463c      	mov	r4, r7
 80167ca:	e032      	b.n	8016832 <etharp_query+0x102>
  int is_new_entry = 0;
 80167cc:	f04f 0900 	mov.w	r9, #0
 80167d0:	e7e2      	b.n	8016798 <etharp_query+0x68>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80167d2:	4b3d      	ldr	r3, [pc, #244]	; (80168c8 <etharp_query+0x198>)
 80167d4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80167d8:	493c      	ldr	r1, [pc, #240]	; (80168cc <etharp_query+0x19c>)
 80167da:	483d      	ldr	r0, [pc, #244]	; (80168d0 <etharp_query+0x1a0>)
 80167dc:	f007 fb83 	bl	801dee6 <iprintf>
 80167e0:	e7e1      	b.n	80167a6 <etharp_query+0x76>
    result = etharp_request(netif, ipaddr);
 80167e2:	4621      	mov	r1, r4
 80167e4:	4630      	mov	r0, r6
 80167e6:	f7ff fee9 	bl	80165bc <etharp_request>
 80167ea:	4604      	mov	r4, r0
    if (q == NULL) {
 80167ec:	2f00      	cmp	r7, #0
 80167ee:	d1e0      	bne.n	80167b2 <etharp_query+0x82>
 80167f0:	e017      	b.n	8016822 <etharp_query+0xf2>
  LWIP_ASSERT("q != NULL", q != NULL);
 80167f2:	4b35      	ldr	r3, [pc, #212]	; (80168c8 <etharp_query+0x198>)
 80167f4:	f240 32db 	movw	r2, #987	; 0x3db
 80167f8:	4936      	ldr	r1, [pc, #216]	; (80168d4 <etharp_query+0x1a4>)
 80167fa:	4835      	ldr	r0, [pc, #212]	; (80168d0 <etharp_query+0x1a0>)
 80167fc:	f007 fb73 	bl	801dee6 <iprintf>
 8016800:	e7d8      	b.n	80167b4 <etharp_query+0x84>
    ETHARP_SET_HINT(netif, i);
 8016802:	4b35      	ldr	r3, [pc, #212]	; (80168d8 <etharp_query+0x1a8>)
 8016804:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016806:	4613      	mov	r3, r2
 8016808:	3308      	adds	r3, #8
 801680a:	4a2e      	ldr	r2, [pc, #184]	; (80168c4 <etharp_query+0x194>)
 801680c:	4413      	add	r3, r2
 801680e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016812:	9200      	str	r2, [sp, #0]
 8016814:	3304      	adds	r3, #4
 8016816:	4642      	mov	r2, r8
 8016818:	4639      	mov	r1, r7
 801681a:	4630      	mov	r0, r6
 801681c:	f005 ffc4 	bl	801c7a8 <ethernet_output>
 8016820:	4604      	mov	r4, r0
}
 8016822:	4620      	mov	r0, r4
 8016824:	b003      	add	sp, #12
 8016826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (p->type != PBUF_ROM) {
 801682a:	7b23      	ldrb	r3, [r4, #12]
 801682c:	2b01      	cmp	r3, #1
 801682e:	d122      	bne.n	8016876 <etharp_query+0x146>
      p = p->next;
 8016830:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8016832:	b174      	cbz	r4, 8016852 <etharp_query+0x122>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016834:	8962      	ldrh	r2, [r4, #10]
 8016836:	8923      	ldrh	r3, [r4, #8]
 8016838:	429a      	cmp	r2, r3
 801683a:	d1f6      	bne.n	801682a <etharp_query+0xfa>
 801683c:	6823      	ldr	r3, [r4, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d0f3      	beq.n	801682a <etharp_query+0xfa>
 8016842:	4b21      	ldr	r3, [pc, #132]	; (80168c8 <etharp_query+0x198>)
 8016844:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8016848:	4924      	ldr	r1, [pc, #144]	; (80168dc <etharp_query+0x1ac>)
 801684a:	4821      	ldr	r0, [pc, #132]	; (80168d0 <etharp_query+0x1a0>)
 801684c:	f007 fb4b 	bl	801dee6 <iprintf>
 8016850:	e7eb      	b.n	801682a <etharp_query+0xfa>
    int copy_needed = 0;
 8016852:	2300      	movs	r3, #0
    if (copy_needed) {
 8016854:	b18b      	cbz	r3, 801687a <etharp_query+0x14a>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8016856:	2200      	movs	r2, #0
 8016858:	8921      	ldrh	r1, [r4, #8]
 801685a:	2002      	movs	r0, #2
 801685c:	f001 fde2 	bl	8018424 <pbuf_alloc>
      if (p != NULL) {
 8016860:	4604      	mov	r4, r0
 8016862:	b170      	cbz	r0, 8016882 <etharp_query+0x152>
        if (pbuf_copy(p, q) != ERR_OK) {
 8016864:	4639      	mov	r1, r7
 8016866:	f001 ff97 	bl	8018798 <pbuf_copy>
 801686a:	b150      	cbz	r0, 8016882 <etharp_query+0x152>
          pbuf_free(p);
 801686c:	4620      	mov	r0, r4
 801686e:	f001 fd6d 	bl	801834c <pbuf_free>
          p = NULL;
 8016872:	2400      	movs	r4, #0
 8016874:	e005      	b.n	8016882 <etharp_query+0x152>
        copy_needed = 1;
 8016876:	2301      	movs	r3, #1
 8016878:	e7ec      	b.n	8016854 <etharp_query+0x124>
      pbuf_ref(p);
 801687a:	4638      	mov	r0, r7
 801687c:	f001 ff36 	bl	80186ec <pbuf_ref>
      p = q;
 8016880:	463c      	mov	r4, r7
    if (p != NULL) {
 8016882:	b1e4      	cbz	r4, 80168be <etharp_query+0x18e>
      if (arp_table[i].q != NULL) {
 8016884:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016888:	00d3      	lsls	r3, r2, #3
 801688a:	4a0e      	ldr	r2, [pc, #56]	; (80168c4 <etharp_query+0x194>)
 801688c:	58d0      	ldr	r0, [r2, r3]
 801688e:	b108      	cbz	r0, 8016894 <etharp_query+0x164>
        pbuf_free(arp_table[i].q);
 8016890:	f001 fd5c 	bl	801834c <pbuf_free>
      arp_table[i].q = p;
 8016894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016898:	00eb      	lsls	r3, r5, #3
 801689a:	4a0a      	ldr	r2, [pc, #40]	; (80168c4 <etharp_query+0x194>)
 801689c:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 801689e:	2400      	movs	r4, #0
 80168a0:	e7bf      	b.n	8016822 <etharp_query+0xf2>
    return ERR_ARG;
 80168a2:	f06f 040f 	mvn.w	r4, #15
 80168a6:	e7bc      	b.n	8016822 <etharp_query+0xf2>
 80168a8:	f06f 040f 	mvn.w	r4, #15
 80168ac:	e7b9      	b.n	8016822 <etharp_query+0xf2>
 80168ae:	f06f 040f 	mvn.w	r4, #15
 80168b2:	e7b6      	b.n	8016822 <etharp_query+0xf2>
 80168b4:	f06f 040f 	mvn.w	r4, #15
 80168b8:	e7b3      	b.n	8016822 <etharp_query+0xf2>
    return (err_t)i;
 80168ba:	462c      	mov	r4, r5
 80168bc:	e7b1      	b.n	8016822 <etharp_query+0xf2>
      result = ERR_MEM;
 80168be:	f04f 34ff 	mov.w	r4, #4294967295
 80168c2:	e7ae      	b.n	8016822 <etharp_query+0xf2>
 80168c4:	20003f6c 	.word	0x20003f6c
 80168c8:	080212dc 	.word	0x080212dc
 80168cc:	080213bc 	.word	0x080213bc
 80168d0:	0801e950 	.word	0x0801e950
 80168d4:	080213e4 	.word	0x080213e4
 80168d8:	2000405c 	.word	0x2000405c
 80168dc:	080213f0 	.word	0x080213f0

080168e0 <etharp_output>:
{
 80168e0:	b570      	push	{r4, r5, r6, lr}
 80168e2:	b084      	sub	sp, #16
 80168e4:	460e      	mov	r6, r1
 80168e6:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80168e8:	4605      	mov	r5, r0
 80168ea:	2800      	cmp	r0, #0
 80168ec:	d02f      	beq.n	801694e <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 80168ee:	2e00      	cmp	r6, #0
 80168f0:	d035      	beq.n	801695e <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80168f2:	2c00      	cmp	r4, #0
 80168f4:	d03b      	beq.n	801696e <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80168f6:	4629      	mov	r1, r5
 80168f8:	6820      	ldr	r0, [r4, #0]
 80168fa:	f000 fb58 	bl	8016fae <ip4_addr_isbroadcast_u32>
 80168fe:	2800      	cmp	r0, #0
 8016900:	d17a      	bne.n	80169f8 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016902:	6823      	ldr	r3, [r4, #0]
 8016904:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016908:	2ae0      	cmp	r2, #224	; 0xe0
 801690a:	d038      	beq.n	801697e <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801690c:	686a      	ldr	r2, [r5, #4]
 801690e:	68a9      	ldr	r1, [r5, #8]
 8016910:	405a      	eors	r2, r3
 8016912:	420a      	tst	r2, r1
 8016914:	d009      	beq.n	801692a <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 8016916:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016918:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801691c:	4293      	cmp	r3, r2
 801691e:	d004      	beq.n	801692a <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016920:	68eb      	ldr	r3, [r5, #12]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d074      	beq.n	8016a10 <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 8016926:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801692a:	4b3b      	ldr	r3, [pc, #236]	; (8016a18 <etharp_output+0x138>)
 801692c:	781a      	ldrb	r2, [r3, #0]
 801692e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016932:	00d9      	lsls	r1, r3, #3
 8016934:	4b39      	ldr	r3, [pc, #228]	; (8016a1c <etharp_output+0x13c>)
 8016936:	440b      	add	r3, r1
 8016938:	7d1b      	ldrb	r3, [r3, #20]
 801693a:	2b01      	cmp	r3, #1
 801693c:	d954      	bls.n	80169e8 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801693e:	6820      	ldr	r0, [r4, #0]
 8016940:	4b36      	ldr	r3, [pc, #216]	; (8016a1c <etharp_output+0x13c>)
 8016942:	440b      	add	r3, r1
 8016944:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016946:	4298      	cmp	r0, r3
 8016948:	d02f      	beq.n	80169aa <etharp_output+0xca>
 801694a:	2200      	movs	r2, #0
 801694c:	e034      	b.n	80169b8 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801694e:	4b34      	ldr	r3, [pc, #208]	; (8016a20 <etharp_output+0x140>)
 8016950:	f240 321b 	movw	r2, #795	; 0x31b
 8016954:	4933      	ldr	r1, [pc, #204]	; (8016a24 <etharp_output+0x144>)
 8016956:	4834      	ldr	r0, [pc, #208]	; (8016a28 <etharp_output+0x148>)
 8016958:	f007 fac5 	bl	801dee6 <iprintf>
 801695c:	e7c7      	b.n	80168ee <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 801695e:	4b30      	ldr	r3, [pc, #192]	; (8016a20 <etharp_output+0x140>)
 8016960:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016964:	4931      	ldr	r1, [pc, #196]	; (8016a2c <etharp_output+0x14c>)
 8016966:	4830      	ldr	r0, [pc, #192]	; (8016a28 <etharp_output+0x148>)
 8016968:	f007 fabd 	bl	801dee6 <iprintf>
 801696c:	e7c1      	b.n	80168f2 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801696e:	4b2c      	ldr	r3, [pc, #176]	; (8016a20 <etharp_output+0x140>)
 8016970:	f240 321d 	movw	r2, #797	; 0x31d
 8016974:	492e      	ldr	r1, [pc, #184]	; (8016a30 <etharp_output+0x150>)
 8016976:	482c      	ldr	r0, [pc, #176]	; (8016a28 <etharp_output+0x148>)
 8016978:	f007 fab5 	bl	801dee6 <iprintf>
 801697c:	e7bb      	b.n	80168f6 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801697e:	2301      	movs	r3, #1
 8016980:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016984:	2300      	movs	r3, #0
 8016986:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801698a:	235e      	movs	r3, #94	; 0x5e
 801698c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016990:	7863      	ldrb	r3, [r4, #1]
 8016992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016996:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801699a:	78a3      	ldrb	r3, [r4, #2]
 801699c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80169a0:	78e3      	ldrb	r3, [r4, #3]
 80169a2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80169a6:	ab02      	add	r3, sp, #8
 80169a8:	e027      	b.n	80169fa <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80169aa:	4631      	mov	r1, r6
 80169ac:	4628      	mov	r0, r5
 80169ae:	f7ff fe55 	bl	801665c <etharp_output_to_arp_index>
 80169b2:	e02b      	b.n	8016a0c <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80169b4:	3201      	adds	r2, #1
 80169b6:	b252      	sxtb	r2, r2
 80169b8:	2a09      	cmp	r2, #9
 80169ba:	dc17      	bgt.n	80169ec <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80169bc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80169c0:	00d9      	lsls	r1, r3, #3
 80169c2:	4b16      	ldr	r3, [pc, #88]	; (8016a1c <etharp_output+0x13c>)
 80169c4:	440b      	add	r3, r1
 80169c6:	7d1b      	ldrb	r3, [r3, #20]
 80169c8:	2b01      	cmp	r3, #1
 80169ca:	d9f3      	bls.n	80169b4 <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80169cc:	6820      	ldr	r0, [r4, #0]
 80169ce:	4b13      	ldr	r3, [pc, #76]	; (8016a1c <etharp_output+0x13c>)
 80169d0:	440b      	add	r3, r1
 80169d2:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80169d4:	4298      	cmp	r0, r3
 80169d6:	d1ed      	bne.n	80169b4 <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 80169d8:	b2d2      	uxtb	r2, r2
 80169da:	4b0f      	ldr	r3, [pc, #60]	; (8016a18 <etharp_output+0x138>)
 80169dc:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80169de:	4631      	mov	r1, r6
 80169e0:	4628      	mov	r0, r5
 80169e2:	f7ff fe3b 	bl	801665c <etharp_output_to_arp_index>
 80169e6:	e011      	b.n	8016a0c <etharp_output+0x12c>
 80169e8:	2200      	movs	r2, #0
 80169ea:	e7e5      	b.n	80169b8 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 80169ec:	4632      	mov	r2, r6
 80169ee:	4621      	mov	r1, r4
 80169f0:	4628      	mov	r0, r5
 80169f2:	f7ff fe9d 	bl	8016730 <etharp_query>
 80169f6:	e009      	b.n	8016a0c <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 80169f8:	4b0e      	ldr	r3, [pc, #56]	; (8016a34 <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80169fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80169fe:	9200      	str	r2, [sp, #0]
 8016a00:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8016a04:	4631      	mov	r1, r6
 8016a06:	4628      	mov	r0, r5
 8016a08:	f005 fece 	bl	801c7a8 <ethernet_output>
}
 8016a0c:	b004      	add	sp, #16
 8016a0e:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 8016a10:	f06f 0003 	mvn.w	r0, #3
 8016a14:	e7fa      	b.n	8016a0c <etharp_output+0x12c>
 8016a16:	bf00      	nop
 8016a18:	2000405c 	.word	0x2000405c
 8016a1c:	20003f6c 	.word	0x20003f6c
 8016a20:	080212dc 	.word	0x080212dc
 8016a24:	0802140c 	.word	0x0802140c
 8016a28:	0801e950 	.word	0x0801e950
 8016a2c:	080213e4 	.word	0x080213e4
 8016a30:	0802136c 	.word	0x0802136c
 8016a34:	08022b78 	.word	0x08022b78

08016a38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a3c:	b086      	sub	sp, #24
 8016a3e:	4606      	mov	r6, r0
 8016a40:	4688      	mov	r8, r1
 8016a42:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016a44:	2200      	movs	r2, #0
 8016a46:	2124      	movs	r1, #36	; 0x24
 8016a48:	2001      	movs	r0, #1
 8016a4a:	f001 fceb 	bl	8018424 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	d037      	beq.n	8016ac2 <icmp_send_response+0x8a>
 8016a52:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016a54:	8943      	ldrh	r3, [r0, #10]
 8016a56:	2b23      	cmp	r3, #35	; 0x23
 8016a58:	d936      	bls.n	8016ac8 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016a5a:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016a5e:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8016a60:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8016a64:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8016a66:	2300      	movs	r3, #0
 8016a68:	7123      	strb	r3, [r4, #4]
 8016a6a:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8016a6c:	71a3      	strb	r3, [r4, #6]
 8016a6e:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016a70:	686f      	ldr	r7, [r5, #4]
 8016a72:	6873      	ldr	r3, [r6, #4]
 8016a74:	681e      	ldr	r6, [r3, #0]
 8016a76:	6858      	ldr	r0, [r3, #4]
 8016a78:	6899      	ldr	r1, [r3, #8]
 8016a7a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8016a7e:	60be      	str	r6, [r7, #8]
 8016a80:	60f8      	str	r0, [r7, #12]
 8016a82:	6139      	str	r1, [r7, #16]
 8016a84:	f8c7 c014 	str.w	ip, [r7, #20]
 8016a88:	691e      	ldr	r6, [r3, #16]
 8016a8a:	6958      	ldr	r0, [r3, #20]
 8016a8c:	6999      	ldr	r1, [r3, #24]
 8016a8e:	61be      	str	r6, [r7, #24]
 8016a90:	61f8      	str	r0, [r7, #28]
 8016a92:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016a94:	f8de 300c 	ldr.w	r3, [lr, #12]
 8016a98:	a806      	add	r0, sp, #24
 8016a9a:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016a9e:	f000 f8cb 	bl	8016c38 <ip4_route>
#endif
  if (netif != NULL) {
 8016aa2:	b158      	cbz	r0, 8016abc <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016aa4:	2100      	movs	r1, #0
 8016aa6:	70a1      	strb	r1, [r4, #2]
 8016aa8:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016aaa:	9002      	str	r0, [sp, #8]
 8016aac:	2301      	movs	r3, #1
 8016aae:	9301      	str	r3, [sp, #4]
 8016ab0:	9100      	str	r1, [sp, #0]
 8016ab2:	23ff      	movs	r3, #255	; 0xff
 8016ab4:	aa05      	add	r2, sp, #20
 8016ab6:	4628      	mov	r0, r5
 8016ab8:	f000 fa64 	bl	8016f84 <ip4_output_if>
  }
  pbuf_free(q);
 8016abc:	4628      	mov	r0, r5
 8016abe:	f001 fc45 	bl	801834c <pbuf_free>
}
 8016ac2:	b006      	add	sp, #24
 8016ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016ac8:	4b03      	ldr	r3, [pc, #12]	; (8016ad8 <icmp_send_response+0xa0>)
 8016aca:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8016ace:	4903      	ldr	r1, [pc, #12]	; (8016adc <icmp_send_response+0xa4>)
 8016ad0:	4803      	ldr	r0, [pc, #12]	; (8016ae0 <icmp_send_response+0xa8>)
 8016ad2:	f007 fa08 	bl	801dee6 <iprintf>
 8016ad6:	e7c0      	b.n	8016a5a <icmp_send_response+0x22>
 8016ad8:	08021524 	.word	0x08021524
 8016adc:	0802155c 	.word	0x0802155c
 8016ae0:	0801e950 	.word	0x0801e950

08016ae4 <icmp_input>:
{
 8016ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ae8:	b084      	sub	sp, #16
 8016aea:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8016aec:	4b47      	ldr	r3, [pc, #284]	; (8016c0c <icmp_input+0x128>)
 8016aee:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8016af0:	7834      	ldrb	r4, [r6, #0]
 8016af2:	f004 040f 	and.w	r4, r4, #15
 8016af6:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8016af8:	2c13      	cmp	r4, #19
 8016afa:	d915      	bls.n	8016b28 <icmp_input+0x44>
 8016afc:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 8016afe:	8943      	ldrh	r3, [r0, #10]
 8016b00:	2b03      	cmp	r3, #3
 8016b02:	d911      	bls.n	8016b28 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8016b04:	6843      	ldr	r3, [r0, #4]
 8016b06:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8016b08:	2b08      	cmp	r3, #8
 8016b0a:	d15d      	bne.n	8016bc8 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016b0c:	4b3f      	ldr	r3, [pc, #252]	; (8016c0c <icmp_input+0x128>)
 8016b0e:	6958      	ldr	r0, [r3, #20]
 8016b10:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8016b14:	2be0      	cmp	r3, #224	; 0xe0
 8016b16:	d023      	beq.n	8016b60 <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016b18:	4b3c      	ldr	r3, [pc, #240]	; (8016c0c <icmp_input+0x128>)
 8016b1a:	6819      	ldr	r1, [r3, #0]
 8016b1c:	f000 fa47 	bl	8016fae <ip4_addr_isbroadcast_u32>
 8016b20:	b9f0      	cbnz	r0, 8016b60 <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016b22:	892b      	ldrh	r3, [r5, #8]
 8016b24:	2b07      	cmp	r3, #7
 8016b26:	d805      	bhi.n	8016b34 <icmp_input+0x50>
  pbuf_free(p);
 8016b28:	4628      	mov	r0, r5
 8016b2a:	f001 fc0f 	bl	801834c <pbuf_free>
}
 8016b2e:	b004      	add	sp, #16
 8016b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016b34:	f104 010e 	add.w	r1, r4, #14
 8016b38:	4628      	mov	r0, r5
 8016b3a:	f001 fbfd 	bl	8018338 <pbuf_header>
 8016b3e:	b3a8      	cbz	r0, 8016bac <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8016b40:	8929      	ldrh	r1, [r5, #8]
 8016b42:	4421      	add	r1, r4
 8016b44:	2200      	movs	r2, #0
 8016b46:	b289      	uxth	r1, r1
 8016b48:	2002      	movs	r0, #2
 8016b4a:	f001 fc6b 	bl	8018424 <pbuf_alloc>
      if (r == NULL) {
 8016b4e:	4680      	mov	r8, r0
 8016b50:	b130      	cbz	r0, 8016b60 <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016b52:	8942      	ldrh	r2, [r0, #10]
 8016b54:	f104 0308 	add.w	r3, r4, #8
 8016b58:	429a      	cmp	r2, r3
 8016b5a:	d205      	bcs.n	8016b68 <icmp_input+0x84>
        pbuf_free(r);
 8016b5c:	f001 fbf6 	bl	801834c <pbuf_free>
  pbuf_free(p);
 8016b60:	4628      	mov	r0, r5
 8016b62:	f001 fbf3 	bl	801834c <pbuf_free>
  return;
 8016b66:	e7e2      	b.n	8016b2e <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 8016b68:	4622      	mov	r2, r4
 8016b6a:	4631      	mov	r1, r6
 8016b6c:	6840      	ldr	r0, [r0, #4]
 8016b6e:	f007 fd42 	bl	801e5f6 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8016b72:	4261      	negs	r1, r4
 8016b74:	4640      	mov	r0, r8
 8016b76:	f001 fbdf 	bl	8018338 <pbuf_header>
 8016b7a:	b148      	cbz	r0, 8016b90 <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016b7c:	4b24      	ldr	r3, [pc, #144]	; (8016c10 <icmp_input+0x12c>)
 8016b7e:	22af      	movs	r2, #175	; 0xaf
 8016b80:	4924      	ldr	r1, [pc, #144]	; (8016c14 <icmp_input+0x130>)
 8016b82:	4825      	ldr	r0, [pc, #148]	; (8016c18 <icmp_input+0x134>)
 8016b84:	f007 f9af 	bl	801dee6 <iprintf>
        pbuf_free(r);
 8016b88:	4640      	mov	r0, r8
 8016b8a:	f001 fbdf 	bl	801834c <pbuf_free>
        goto icmperr;
 8016b8e:	e7e7      	b.n	8016b60 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 8016b90:	4629      	mov	r1, r5
 8016b92:	4640      	mov	r0, r8
 8016b94:	f001 fe00 	bl	8018798 <pbuf_copy>
 8016b98:	b118      	cbz	r0, 8016ba2 <icmp_input+0xbe>
        pbuf_free(r);
 8016b9a:	4640      	mov	r0, r8
 8016b9c:	f001 fbd6 	bl	801834c <pbuf_free>
        goto icmperr;
 8016ba0:	e7de      	b.n	8016b60 <icmp_input+0x7c>
      pbuf_free(p);
 8016ba2:	4628      	mov	r0, r5
 8016ba4:	f001 fbd2 	bl	801834c <pbuf_free>
      p = r;
 8016ba8:	4645      	mov	r5, r8
 8016baa:	e007      	b.n	8016bbc <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016bac:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 8016bb0:	31f2      	adds	r1, #242	; 0xf2
 8016bb2:	b209      	sxth	r1, r1
 8016bb4:	4628      	mov	r0, r5
 8016bb6:	f001 fbbf 	bl	8018338 <pbuf_header>
 8016bba:	b948      	cbnz	r0, 8016bd0 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 8016bbc:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8016bbe:	4621      	mov	r1, r4
 8016bc0:	4628      	mov	r0, r5
 8016bc2:	f001 fbb9 	bl	8018338 <pbuf_header>
 8016bc6:	b150      	cbz	r0, 8016bde <icmp_input+0xfa>
  pbuf_free(p);
 8016bc8:	4628      	mov	r0, r5
 8016bca:	f001 fbbf 	bl	801834c <pbuf_free>
  return;
 8016bce:	e7ae      	b.n	8016b2e <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016bd0:	4b0f      	ldr	r3, [pc, #60]	; (8016c10 <icmp_input+0x12c>)
 8016bd2:	22c0      	movs	r2, #192	; 0xc0
 8016bd4:	4911      	ldr	r1, [pc, #68]	; (8016c1c <icmp_input+0x138>)
 8016bd6:	4810      	ldr	r0, [pc, #64]	; (8016c18 <icmp_input+0x134>)
 8016bd8:	f007 f985 	bl	801dee6 <iprintf>
        goto icmperr;
 8016bdc:	e7c0      	b.n	8016b60 <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8016bde:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8016be0:	490a      	ldr	r1, [pc, #40]	; (8016c0c <icmp_input+0x128>)
 8016be2:	694b      	ldr	r3, [r1, #20]
 8016be4:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016be6:	690b      	ldr	r3, [r1, #16]
 8016be8:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016bea:	2200      	movs	r2, #0
 8016bec:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 8016bee:	70b2      	strb	r2, [r6, #2]
 8016bf0:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8016bf2:	23ff      	movs	r3, #255	; 0xff
 8016bf4:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8016bf6:	7282      	strb	r2, [r0, #10]
 8016bf8:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016bfa:	9702      	str	r7, [sp, #8]
 8016bfc:	2001      	movs	r0, #1
 8016bfe:	9001      	str	r0, [sp, #4]
 8016c00:	9200      	str	r2, [sp, #0]
 8016c02:	3114      	adds	r1, #20
 8016c04:	4628      	mov	r0, r5
 8016c06:	f000 f9bd 	bl	8016f84 <ip4_output_if>
 8016c0a:	e7dd      	b.n	8016bc8 <icmp_input+0xe4>
 8016c0c:	200044c0 	.word	0x200044c0
 8016c10:	08021524 	.word	0x08021524
 8016c14:	080214b8 	.word	0x080214b8
 8016c18:	0801e950 	.word	0x0801e950
 8016c1c:	080214f0 	.word	0x080214f0

08016c20 <icmp_dest_unreach>:
{
 8016c20:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 8016c22:	460a      	mov	r2, r1
 8016c24:	2103      	movs	r1, #3
 8016c26:	f7ff ff07 	bl	8016a38 <icmp_send_response>
 8016c2a:	bd08      	pop	{r3, pc}

08016c2c <icmp_time_exceeded>:
{
 8016c2c:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 8016c2e:	460a      	mov	r2, r1
 8016c30:	210b      	movs	r1, #11
 8016c32:	f7ff ff01 	bl	8016a38 <icmp_send_response>
 8016c36:	bd08      	pop	{r3, pc}

08016c38 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016c38:	4b25      	ldr	r3, [pc, #148]	; (8016cd0 <ip4_route+0x98>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	e02b      	b.n	8016c96 <ip4_route+0x5e>
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	b1ab      	cbz	r3, 8016c6e <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016c42:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8016c46:	f002 0105 	and.w	r1, r2, #5
 8016c4a:	2905      	cmp	r1, #5
 8016c4c:	d1f7      	bne.n	8016c3e <ip4_route+0x6>
 8016c4e:	6859      	ldr	r1, [r3, #4]
 8016c50:	2900      	cmp	r1, #0
 8016c52:	d0f4      	beq.n	8016c3e <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016c54:	6804      	ldr	r4, [r0, #0]
 8016c56:	689d      	ldr	r5, [r3, #8]
 8016c58:	4061      	eors	r1, r4
 8016c5a:	4229      	tst	r1, r5
 8016c5c:	d016      	beq.n	8016c8c <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016c5e:	f012 0f02 	tst.w	r2, #2
 8016c62:	d1ec      	bne.n	8016c3e <ip4_route+0x6>
 8016c64:	68da      	ldr	r2, [r3, #12]
 8016c66:	4294      	cmp	r4, r2
 8016c68:	d1e9      	bne.n	8016c3e <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	e00a      	b.n	8016c84 <ip4_route+0x4c>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c6e:	4a19      	ldr	r2, [pc, #100]	; (8016cd4 <ip4_route+0x9c>)
 8016c70:	6810      	ldr	r0, [r2, #0]
 8016c72:	b138      	cbz	r0, 8016c84 <ip4_route+0x4c>
 8016c74:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8016c78:	f002 0205 	and.w	r2, r2, #5
 8016c7c:	2a05      	cmp	r2, #5
 8016c7e:	d107      	bne.n	8016c90 <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8016c80:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c82:	b10a      	cbz	r2, 8016c88 <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8016c84:	bc30      	pop	{r4, r5}
 8016c86:	4770      	bx	lr
    return NULL;
 8016c88:	4618      	mov	r0, r3
 8016c8a:	e7fb      	b.n	8016c84 <ip4_route+0x4c>
        return netif;
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	e7f9      	b.n	8016c84 <ip4_route+0x4c>
    return NULL;
 8016c90:	4618      	mov	r0, r3
 8016c92:	e7f7      	b.n	8016c84 <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	b153      	cbz	r3, 8016cae <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016c98:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8016c9c:	f002 0105 	and.w	r1, r2, #5
 8016ca0:	2905      	cmp	r1, #5
 8016ca2:	d1f7      	bne.n	8016c94 <ip4_route+0x5c>
 8016ca4:	6859      	ldr	r1, [r3, #4]
 8016ca6:	2900      	cmp	r1, #0
 8016ca8:	d0f4      	beq.n	8016c94 <ip4_route+0x5c>
{
 8016caa:	b430      	push	{r4, r5}
 8016cac:	e7d2      	b.n	8016c54 <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016cae:	4a09      	ldr	r2, [pc, #36]	; (8016cd4 <ip4_route+0x9c>)
 8016cb0:	6810      	ldr	r0, [r2, #0]
 8016cb2:	2800      	cmp	r0, #0
 8016cb4:	d0e7      	beq.n	8016c86 <ip4_route+0x4e>
 8016cb6:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8016cba:	f002 0205 	and.w	r2, r2, #5
 8016cbe:	2a05      	cmp	r2, #5
 8016cc0:	d104      	bne.n	8016ccc <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8016cc2:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016cc4:	2a00      	cmp	r2, #0
 8016cc6:	d1de      	bne.n	8016c86 <ip4_route+0x4e>
    return NULL;
 8016cc8:	4618      	mov	r0, r3
 8016cca:	4770      	bx	lr
 8016ccc:	4618      	mov	r0, r3
 8016cce:	4770      	bx	lr
 8016cd0:	20008ad8 	.word	0x20008ad8
 8016cd4:	20008adc 	.word	0x20008adc

08016cd8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cdc:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016cde:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8016ce2:	f898 3000 	ldrb.w	r3, [r8]
 8016ce6:	091a      	lsrs	r2, r3, #4
 8016ce8:	2a04      	cmp	r2, #4
 8016cea:	d004      	beq.n	8016cf6 <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016cec:	f001 fb2e 	bl	801834c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8016cf0:	2000      	movs	r0, #0
 8016cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cf6:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
 8016cf8:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 8016cfc:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016cfe:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8016d02:	f7ff f9f0 	bl	80160e6 <lwip_htons>
 8016d06:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8016d08:	892b      	ldrh	r3, [r5, #8]
 8016d0a:	4298      	cmp	r0, r3
 8016d0c:	d316      	bcc.n	8016d3c <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016d0e:	896b      	ldrh	r3, [r5, #10]
 8016d10:	429e      	cmp	r6, r3
 8016d12:	d818      	bhi.n	8016d46 <ip4_input+0x6e>
 8016d14:	892b      	ldrh	r3, [r5, #8]
 8016d16:	429c      	cmp	r4, r3
 8016d18:	d815      	bhi.n	8016d46 <ip4_input+0x6e>
 8016d1a:	2e13      	cmp	r6, #19
 8016d1c:	d913      	bls.n	8016d46 <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016d1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016d22:	4a59      	ldr	r2, [pc, #356]	; (8016e88 <ip4_input+0x1b0>)
 8016d24:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016d26:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8016d2a:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d30:	2be0      	cmp	r3, #224	; 0xe0
 8016d32:	d00c      	beq.n	8016d4e <ip4_input+0x76>
 8016d34:	463c      	mov	r4, r7
 8016d36:	f04f 0901 	mov.w	r9, #1
 8016d3a:	e015      	b.n	8016d68 <ip4_input+0x90>
    pbuf_realloc(p, iphdr_len);
 8016d3c:	4601      	mov	r1, r0
 8016d3e:	4628      	mov	r0, r5
 8016d40:	f001 fc58 	bl	80185f4 <pbuf_realloc>
 8016d44:	e7e3      	b.n	8016d0e <ip4_input+0x36>
    pbuf_free(p);
 8016d46:	4628      	mov	r0, r5
 8016d48:	f001 fb00 	bl	801834c <pbuf_free>
    return ERR_OK;
 8016d4c:	e7d0      	b.n	8016cf0 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016d52:	f013 0f01 	tst.w	r3, #1
 8016d56:	d024      	beq.n	8016da2 <ip4_input+0xca>
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	bb23      	cbnz	r3, 8016da6 <ip4_input+0xce>
      netif = NULL;
 8016d5c:	2400      	movs	r4, #0
 8016d5e:	e025      	b.n	8016dac <ip4_input+0xd4>
        netif = netif->next;
 8016d60:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 8016d62:	42bc      	cmp	r4, r7
 8016d64:	d01b      	beq.n	8016d9e <ip4_input+0xc6>
    } while (netif != NULL);
 8016d66:	b30c      	cbz	r4, 8016dac <ip4_input+0xd4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016d68:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8016d6c:	f013 0f01 	tst.w	r3, #1
 8016d70:	d009      	beq.n	8016d86 <ip4_input+0xae>
 8016d72:	6863      	ldr	r3, [r4, #4]
 8016d74:	b13b      	cbz	r3, 8016d86 <ip4_input+0xae>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016d76:	4a44      	ldr	r2, [pc, #272]	; (8016e88 <ip4_input+0x1b0>)
 8016d78:	6950      	ldr	r0, [r2, #20]
 8016d7a:	4283      	cmp	r3, r0
 8016d7c:	d016      	beq.n	8016dac <ip4_input+0xd4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016d7e:	4621      	mov	r1, r4
 8016d80:	f000 f915 	bl	8016fae <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016d84:	b990      	cbnz	r0, 8016dac <ip4_input+0xd4>
      if (first) {
 8016d86:	f1b9 0f00 	cmp.w	r9, #0
 8016d8a:	d0e9      	beq.n	8016d60 <ip4_input+0x88>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8016d8c:	4b3e      	ldr	r3, [pc, #248]	; (8016e88 <ip4_input+0x1b0>)
 8016d8e:	7d1b      	ldrb	r3, [r3, #20]
 8016d90:	2b7f      	cmp	r3, #127	; 0x7f
 8016d92:	d00a      	beq.n	8016daa <ip4_input+0xd2>
        netif = netif_list;
 8016d94:	4b3d      	ldr	r3, [pc, #244]	; (8016e8c <ip4_input+0x1b4>)
 8016d96:	681c      	ldr	r4, [r3, #0]
        first = 0;
 8016d98:	f04f 0900 	mov.w	r9, #0
 8016d9c:	e7e1      	b.n	8016d62 <ip4_input+0x8a>
        netif = netif->next;
 8016d9e:	6824      	ldr	r4, [r4, #0]
 8016da0:	e7e1      	b.n	8016d66 <ip4_input+0x8e>
      netif = NULL;
 8016da2:	2400      	movs	r4, #0
 8016da4:	e002      	b.n	8016dac <ip4_input+0xd4>
      netif = inp;
 8016da6:	463c      	mov	r4, r7
 8016da8:	e000      	b.n	8016dac <ip4_input+0xd4>
          netif = NULL;
 8016daa:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016dac:	4639      	mov	r1, r7
 8016dae:	4b36      	ldr	r3, [pc, #216]	; (8016e88 <ip4_input+0x1b0>)
 8016db0:	6918      	ldr	r0, [r3, #16]
 8016db2:	f000 f8fc 	bl	8016fae <ip4_addr_isbroadcast_u32>
 8016db6:	2800      	cmp	r0, #0
 8016db8:	d146      	bne.n	8016e48 <ip4_input+0x170>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016dba:	4b33      	ldr	r3, [pc, #204]	; (8016e88 <ip4_input+0x1b0>)
 8016dbc:	691b      	ldr	r3, [r3, #16]
 8016dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016dc2:	2be0      	cmp	r3, #224	; 0xe0
 8016dc4:	d040      	beq.n	8016e48 <ip4_input+0x170>
  if (netif == NULL) {
 8016dc6:	2c00      	cmp	r4, #0
 8016dc8:	d042      	beq.n	8016e50 <ip4_input+0x178>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016dca:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8016dce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	b13b      	cbz	r3, 8016de6 <ip4_input+0x10e>
    p = ip4_reass(p);
 8016dd6:	4628      	mov	r0, r5
 8016dd8:	f000 fc50 	bl	801767c <ip4_reass>
    if (p == NULL) {
 8016ddc:	4605      	mov	r5, r0
 8016dde:	2800      	cmp	r0, #0
 8016de0:	d086      	beq.n	8016cf0 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 8016de2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 8016de6:	4a28      	ldr	r2, [pc, #160]	; (8016e88 <ip4_input+0x1b0>)
 8016de8:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 8016dea:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016dec:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8016df0:	f898 3000 	ldrb.w	r3, [r8]
 8016df4:	f003 030f 	and.w	r3, r3, #15
 8016df8:	009b      	lsls	r3, r3, #2
 8016dfa:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8016dfc:	4271      	negs	r1, r6
 8016dfe:	4628      	mov	r0, r5
 8016e00:	f001 fa9a 	bl	8018338 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8016e04:	f898 3009 	ldrb.w	r3, [r8, #9]
 8016e08:	2b06      	cmp	r3, #6
 8016e0a:	d032      	beq.n	8016e72 <ip4_input+0x19a>
 8016e0c:	2b11      	cmp	r3, #17
 8016e0e:	d023      	beq.n	8016e58 <ip4_input+0x180>
 8016e10:	2b01      	cmp	r3, #1
 8016e12:	d033      	beq.n	8016e7c <ip4_input+0x1a4>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e14:	4621      	mov	r1, r4
 8016e16:	4b1c      	ldr	r3, [pc, #112]	; (8016e88 <ip4_input+0x1b0>)
 8016e18:	6958      	ldr	r0, [r3, #20]
 8016e1a:	f000 f8c8 	bl	8016fae <ip4_addr_isbroadcast_u32>
 8016e1e:	b978      	cbnz	r0, 8016e40 <ip4_input+0x168>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016e20:	4b19      	ldr	r3, [pc, #100]	; (8016e88 <ip4_input+0x1b0>)
 8016e22:	695b      	ldr	r3, [r3, #20]
 8016e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e28:	2be0      	cmp	r3, #224	; 0xe0
 8016e2a:	d009      	beq.n	8016e40 <ip4_input+0x168>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8016e2c:	4631      	mov	r1, r6
 8016e2e:	4628      	mov	r0, r5
 8016e30:	f001 fa87 	bl	8018342 <pbuf_header_force>
        p->payload = iphdr;
 8016e34:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016e38:	2102      	movs	r1, #2
 8016e3a:	4628      	mov	r0, r5
 8016e3c:	f7ff fef0 	bl	8016c20 <icmp_dest_unreach>
      pbuf_free(p);
 8016e40:	4628      	mov	r0, r5
 8016e42:	f001 fa83 	bl	801834c <pbuf_free>
 8016e46:	e00b      	b.n	8016e60 <ip4_input+0x188>
      pbuf_free(p);
 8016e48:	4628      	mov	r0, r5
 8016e4a:	f001 fa7f 	bl	801834c <pbuf_free>
      return ERR_OK;
 8016e4e:	e74f      	b.n	8016cf0 <ip4_input+0x18>
    pbuf_free(p);
 8016e50:	4628      	mov	r0, r5
 8016e52:	f001 fa7b 	bl	801834c <pbuf_free>
    return ERR_OK;
 8016e56:	e74b      	b.n	8016cf0 <ip4_input+0x18>
      udp_input(p, inp);
 8016e58:	4639      	mov	r1, r7
 8016e5a:	4628      	mov	r0, r5
 8016e5c:	f005 fb20 	bl	801c4a0 <udp_input>
  ip_data.current_netif = NULL;
 8016e60:	4b09      	ldr	r3, [pc, #36]	; (8016e88 <ip4_input+0x1b0>)
 8016e62:	2200      	movs	r2, #0
 8016e64:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016e66:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016e68:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016e6a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016e6c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016e6e:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 8016e70:	e73e      	b.n	8016cf0 <ip4_input+0x18>
      tcp_input(p, inp);
 8016e72:	4639      	mov	r1, r7
 8016e74:	4628      	mov	r0, r5
 8016e76:	f003 fef1 	bl	801ac5c <tcp_input>
      break;
 8016e7a:	e7f1      	b.n	8016e60 <ip4_input+0x188>
      icmp_input(p, inp);
 8016e7c:	4639      	mov	r1, r7
 8016e7e:	4628      	mov	r0, r5
 8016e80:	f7ff fe30 	bl	8016ae4 <icmp_input>
      break;
 8016e84:	e7ec      	b.n	8016e60 <ip4_input+0x188>
 8016e86:	bf00      	nop
 8016e88:	200044c0 	.word	0x200044c0
 8016e8c:	20008ad8 	.word	0x20008ad8

08016e90 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8016e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e94:	b083      	sub	sp, #12
 8016e96:	4605      	mov	r5, r0
 8016e98:	4689      	mov	r9, r1
 8016e9a:	4616      	mov	r6, r2
 8016e9c:	4698      	mov	r8, r3
 8016e9e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016ea0:	89c3      	ldrh	r3, [r0, #14]
 8016ea2:	2b01      	cmp	r3, #1
 8016ea4:	d006      	beq.n	8016eb4 <ip4_output_if_src+0x24>
 8016ea6:	4b31      	ldr	r3, [pc, #196]	; (8016f6c <ip4_output_if_src+0xdc>)
 8016ea8:	f240 3233 	movw	r2, #819	; 0x333
 8016eac:	4930      	ldr	r1, [pc, #192]	; (8016f70 <ip4_output_if_src+0xe0>)
 8016eae:	4831      	ldr	r0, [pc, #196]	; (8016f74 <ip4_output_if_src+0xe4>)
 8016eb0:	f007 f819 	bl	801dee6 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016eb4:	2e00      	cmp	r6, #0
 8016eb6:	d04a      	beq.n	8016f4e <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8016eb8:	2114      	movs	r1, #20
 8016eba:	4628      	mov	r0, r5
 8016ebc:	f001 fa3c 	bl	8018338 <pbuf_header>
 8016ec0:	2800      	cmp	r0, #0
 8016ec2:	d150      	bne.n	8016f66 <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016ec4:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016ec6:	896b      	ldrh	r3, [r5, #10]
 8016ec8:	2b13      	cmp	r3, #19
 8016eca:	d934      	bls.n	8016f36 <ip4_output_if_src+0xa6>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016ecc:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016ed0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8016ed4:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016ed6:	6833      	ldr	r3, [r6, #0]
 8016ed8:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016eda:	2345      	movs	r3, #69	; 0x45
 8016edc:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8016ede:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8016ee2:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016ee4:	8928      	ldrh	r0, [r5, #8]
 8016ee6:	f7ff f8fe 	bl	80160e6 <lwip_htons>
 8016eea:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016eec:	2300      	movs	r3, #0
 8016eee:	71a3      	strb	r3, [r4, #6]
 8016ef0:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016ef2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8016f80 <ip4_output_if_src+0xf0>
 8016ef6:	f8b8 0000 	ldrh.w	r0, [r8]
 8016efa:	f7ff f8f4 	bl	80160e6 <lwip_htons>
 8016efe:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016f00:	f8b8 3000 	ldrh.w	r3, [r8]
 8016f04:	3301      	adds	r3, #1
 8016f06:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 8016f0a:	f1b9 0f00 	cmp.w	r9, #0
 8016f0e:	d01a      	beq.n	8016f46 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016f10:	f8d9 3000 	ldr.w	r3, [r9]
 8016f14:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016f16:	2300      	movs	r3, #0
 8016f18:	72a3      	strb	r3, [r4, #10]
 8016f1a:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016f1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f1e:	b113      	cbz	r3, 8016f26 <ip4_output_if_src+0x96>
 8016f20:	892a      	ldrh	r2, [r5, #8]
 8016f22:	4293      	cmp	r3, r2
 8016f24:	d319      	bcc.n	8016f5a <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016f26:	697b      	ldr	r3, [r7, #20]
 8016f28:	4632      	mov	r2, r6
 8016f2a:	4629      	mov	r1, r5
 8016f2c:	4638      	mov	r0, r7
 8016f2e:	4798      	blx	r3
}
 8016f30:	b003      	add	sp, #12
 8016f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016f36:	4b0d      	ldr	r3, [pc, #52]	; (8016f6c <ip4_output_if_src+0xdc>)
 8016f38:	f240 3261 	movw	r2, #865	; 0x361
 8016f3c:	490e      	ldr	r1, [pc, #56]	; (8016f78 <ip4_output_if_src+0xe8>)
 8016f3e:	480d      	ldr	r0, [pc, #52]	; (8016f74 <ip4_output_if_src+0xe4>)
 8016f40:	f006 ffd1 	bl	801dee6 <iprintf>
 8016f44:	e7c2      	b.n	8016ecc <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016f46:	4b0d      	ldr	r3, [pc, #52]	; (8016f7c <ip4_output_if_src+0xec>)
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	60e3      	str	r3, [r4, #12]
 8016f4c:	e7e3      	b.n	8016f16 <ip4_output_if_src+0x86>
    iphdr = (struct ip_hdr *)p->payload;
 8016f4e:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016f50:	691b      	ldr	r3, [r3, #16]
 8016f52:	ae02      	add	r6, sp, #8
 8016f54:	f846 3d04 	str.w	r3, [r6, #-4]!
 8016f58:	e7e0      	b.n	8016f1c <ip4_output_if_src+0x8c>
    return ip4_frag(p, netif, dest);
 8016f5a:	4632      	mov	r2, r6
 8016f5c:	4639      	mov	r1, r7
 8016f5e:	4628      	mov	r0, r5
 8016f60:	f000 fc60 	bl	8017824 <ip4_frag>
 8016f64:	e7e4      	b.n	8016f30 <ip4_output_if_src+0xa0>
      return ERR_BUF;
 8016f66:	f06f 0001 	mvn.w	r0, #1
 8016f6a:	e7e1      	b.n	8016f30 <ip4_output_if_src+0xa0>
 8016f6c:	08021588 	.word	0x08021588
 8016f70:	080215bc 	.word	0x080215bc
 8016f74:	0801e950 	.word	0x0801e950
 8016f78:	080215c8 	.word	0x080215c8
 8016f7c:	08021640 	.word	0x08021640
 8016f80:	2000405e 	.word	0x2000405e

08016f84 <ip4_output_if>:
{
 8016f84:	b530      	push	{r4, r5, lr}
 8016f86:	b085      	sub	sp, #20
 8016f88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 8016f8a:	4615      	mov	r5, r2
 8016f8c:	b11a      	cbz	r2, 8016f96 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 8016f8e:	b109      	cbz	r1, 8016f94 <ip4_output_if+0x10>
 8016f90:	680a      	ldr	r2, [r1, #0]
 8016f92:	b902      	cbnz	r2, 8016f96 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 8016f94:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016f96:	9402      	str	r4, [sp, #8]
 8016f98:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8016f9c:	9201      	str	r2, [sp, #4]
 8016f9e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8016fa2:	9200      	str	r2, [sp, #0]
 8016fa4:	462a      	mov	r2, r5
 8016fa6:	f7ff ff73 	bl	8016e90 <ip4_output_if_src>
}
 8016faa:	b005      	add	sp, #20
 8016fac:	bd30      	pop	{r4, r5, pc}

08016fae <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016fae:	1e43      	subs	r3, r0, #1
 8016fb0:	f113 0f03 	cmn.w	r3, #3
 8016fb4:	d811      	bhi.n	8016fda <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016fb6:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8016fba:	f013 0f02 	tst.w	r3, #2
 8016fbe:	d00e      	beq.n	8016fde <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016fc0:	684b      	ldr	r3, [r1, #4]
 8016fc2:	4298      	cmp	r0, r3
 8016fc4:	d00d      	beq.n	8016fe2 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016fc6:	688a      	ldr	r2, [r1, #8]
 8016fc8:	4043      	eors	r3, r0
 8016fca:	4213      	tst	r3, r2
 8016fcc:	d10b      	bne.n	8016fe6 <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016fce:	43d2      	mvns	r2, r2
 8016fd0:	ea32 0300 	bics.w	r3, r2, r0
 8016fd4:	d009      	beq.n	8016fea <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8016fd6:	2000      	movs	r0, #0
 8016fd8:	4770      	bx	lr
    return 1;
 8016fda:	2001      	movs	r0, #1
 8016fdc:	4770      	bx	lr
    return 0;
 8016fde:	2000      	movs	r0, #0
 8016fe0:	4770      	bx	lr
    return 0;
 8016fe2:	2000      	movs	r0, #0
 8016fe4:	4770      	bx	lr
    return 0;
 8016fe6:	2000      	movs	r0, #0
 8016fe8:	4770      	bx	lr
    return 1;
 8016fea:	2001      	movs	r0, #1
  }
}
 8016fec:	4770      	bx	lr
	...

08016ff0 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8016ff0:	b570      	push	{r4, r5, r6, lr}
 8016ff2:	b084      	sub	sp, #16
 8016ff4:	460c      	mov	r4, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 8016ff6:	7803      	ldrb	r3, [r0, #0]
  u32_t *pp = parts;
 8016ff8:	466e      	mov	r6, sp
 8016ffa:	e03b      	b.n	8017074 <ip4addr_aton+0x84>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
 8016ffc:	1c42      	adds	r2, r0, #1
 8016ffe:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8017000:	2b78      	cmp	r3, #120	; 0x78
 8017002:	d004      	beq.n	801700e <ip4addr_aton+0x1e>
 8017004:	2b58      	cmp	r3, #88	; 0x58
 8017006:	d002      	beq.n	801700e <ip4addr_aton+0x1e>
      c = *++cp;
 8017008:	4610      	mov	r0, r2
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 801700a:	2108      	movs	r1, #8
 801700c:	e03a      	b.n	8017084 <ip4addr_aton+0x94>
        c = *++cp;
 801700e:	7883      	ldrb	r3, [r0, #2]
 8017010:	3002      	adds	r0, #2
        base = 16;
 8017012:	2110      	movs	r1, #16
        c = *++cp;
 8017014:	e036      	b.n	8017084 <ip4addr_aton+0x94>
    }
    for (;;) {
      if (isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
        c = *++cp;
      } else if (base == 16 && isxdigit(c)) {
 8017016:	2910      	cmp	r1, #16
 8017018:	d123      	bne.n	8017062 <ip4addr_aton+0x72>
 801701a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801701e:	b2d2      	uxtb	r2, r2
 8017020:	2a05      	cmp	r2, #5
 8017022:	d904      	bls.n	801702e <ip4addr_aton+0x3e>
 8017024:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017028:	b2d2      	uxtb	r2, r2
 801702a:	2a05      	cmp	r2, #5
 801702c:	d819      	bhi.n	8017062 <ip4addr_aton+0x72>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801702e:	012d      	lsls	r5, r5, #4
 8017030:	f103 020a 	add.w	r2, r3, #10
 8017034:	3b61      	subs	r3, #97	; 0x61
 8017036:	b2db      	uxtb	r3, r3
 8017038:	2b19      	cmp	r3, #25
 801703a:	d810      	bhi.n	801705e <ip4addr_aton+0x6e>
 801703c:	2361      	movs	r3, #97	; 0x61
 801703e:	1ad2      	subs	r2, r2, r3
 8017040:	4315      	orrs	r5, r2
        c = *++cp;
 8017042:	f810 3f01 	ldrb.w	r3, [r0, #1]!
      if (isdigit(c)) {
 8017046:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801704a:	b2d2      	uxtb	r2, r2
 801704c:	2a09      	cmp	r2, #9
 801704e:	d8e2      	bhi.n	8017016 <ip4addr_aton+0x26>
        val = (val * base) + (u32_t)(c - '0');
 8017050:	fb05 3201 	mla	r2, r5, r1, r3
 8017054:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
        c = *++cp;
 8017058:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801705c:	e7f3      	b.n	8017046 <ip4addr_aton+0x56>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801705e:	2341      	movs	r3, #65	; 0x41
 8017060:	e7ed      	b.n	801703e <ip4addr_aton+0x4e>
      } else {
        break;
      }
    }
    if (c == '.') {
 8017062:	2b2e      	cmp	r3, #46	; 0x2e
 8017064:	d110      	bne.n	8017088 <ip4addr_aton+0x98>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8017066:	ab03      	add	r3, sp, #12
 8017068:	429e      	cmp	r6, r3
 801706a:	d260      	bcs.n	801712e <ip4addr_aton+0x13e>
        return 0;
      }
      *pp++ = val;
 801706c:	6035      	str	r5, [r6, #0]
      c = *++cp;
 801706e:	7843      	ldrb	r3, [r0, #1]
      *pp++ = val;
 8017070:	3604      	adds	r6, #4
      c = *++cp;
 8017072:	3001      	adds	r0, #1
    if (!isdigit(c)) {
 8017074:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017078:	b2d2      	uxtb	r2, r2
 801707a:	2a09      	cmp	r2, #9
 801707c:	d855      	bhi.n	801712a <ip4addr_aton+0x13a>
    if (c == '0') {
 801707e:	2b30      	cmp	r3, #48	; 0x30
 8017080:	d0bc      	beq.n	8016ffc <ip4addr_aton+0xc>
    base = 10;
 8017082:	210a      	movs	r1, #10
        base = 16;
 8017084:	2500      	movs	r5, #0
 8017086:	e7de      	b.n	8017046 <ip4addr_aton+0x56>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8017088:	b16b      	cbz	r3, 80170a6 <ip4addr_aton+0xb6>
 801708a:	2b20      	cmp	r3, #32
 801708c:	d00b      	beq.n	80170a6 <ip4addr_aton+0xb6>
 801708e:	2b0c      	cmp	r3, #12
 8017090:	d009      	beq.n	80170a6 <ip4addr_aton+0xb6>
 8017092:	2b0a      	cmp	r3, #10
 8017094:	d007      	beq.n	80170a6 <ip4addr_aton+0xb6>
 8017096:	2b0d      	cmp	r3, #13
 8017098:	d005      	beq.n	80170a6 <ip4addr_aton+0xb6>
 801709a:	2b09      	cmp	r3, #9
 801709c:	d003      	beq.n	80170a6 <ip4addr_aton+0xb6>
 801709e:	2b0b      	cmp	r3, #11
 80170a0:	d001      	beq.n	80170a6 <ip4addr_aton+0xb6>
    return 0;
 80170a2:	2000      	movs	r0, #0
 80170a4:	e044      	b.n	8017130 <ip4addr_aton+0x140>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80170a6:	4668      	mov	r0, sp
 80170a8:	1a30      	subs	r0, r6, r0
 80170aa:	1080      	asrs	r0, r0, #2
 80170ac:	3001      	adds	r0, #1
 80170ae:	2804      	cmp	r0, #4
 80170b0:	d82d      	bhi.n	801710e <ip4addr_aton+0x11e>
 80170b2:	e8df f000 	tbb	[pc, r0]
 80170b6:	333d      	.short	0x333d
 80170b8:	0c03      	.short	0x0c03
 80170ba:	1a          	.byte	0x1a
 80170bb:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 80170bc:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 80170c0:	d238      	bcs.n	8017134 <ip4addr_aton+0x144>
      return 0;
    }
    if (parts[0] > 0xff) {
 80170c2:	9b00      	ldr	r3, [sp, #0]
 80170c4:	2bff      	cmp	r3, #255	; 0xff
 80170c6:	d837      	bhi.n	8017138 <ip4addr_aton+0x148>
      return 0;
    }
    val |= parts[0] << 24;
 80170c8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    break;
 80170cc:	e026      	b.n	801711c <ip4addr_aton+0x12c>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 80170ce:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80170d2:	d233      	bcs.n	801713c <ip4addr_aton+0x14c>
      return 0;
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80170d4:	9a00      	ldr	r2, [sp, #0]
 80170d6:	2aff      	cmp	r2, #255	; 0xff
 80170d8:	d832      	bhi.n	8017140 <ip4addr_aton+0x150>
 80170da:	9b01      	ldr	r3, [sp, #4]
 80170dc:	2bff      	cmp	r3, #255	; 0xff
 80170de:	d831      	bhi.n	8017144 <ip4addr_aton+0x154>
      return 0;
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 80170e0:	041b      	lsls	r3, r3, #16
 80170e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80170e6:	431d      	orrs	r5, r3
    break;
 80170e8:	e018      	b.n	801711c <ip4addr_aton+0x12c>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 80170ea:	2dff      	cmp	r5, #255	; 0xff
 80170ec:	d82c      	bhi.n	8017148 <ip4addr_aton+0x158>
      return 0;
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80170ee:	9900      	ldr	r1, [sp, #0]
 80170f0:	29ff      	cmp	r1, #255	; 0xff
 80170f2:	d82b      	bhi.n	801714c <ip4addr_aton+0x15c>
 80170f4:	9b01      	ldr	r3, [sp, #4]
 80170f6:	2bff      	cmp	r3, #255	; 0xff
 80170f8:	d82a      	bhi.n	8017150 <ip4addr_aton+0x160>
 80170fa:	9a02      	ldr	r2, [sp, #8]
 80170fc:	2aff      	cmp	r2, #255	; 0xff
 80170fe:	d829      	bhi.n	8017154 <ip4addr_aton+0x164>
      return 0;
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8017100:	041b      	lsls	r3, r3, #16
 8017102:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8017106:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801710a:	431d      	orrs	r5, r3
    break;
 801710c:	e006      	b.n	801711c <ip4addr_aton+0x12c>
  default:
    LWIP_ASSERT("unhandled", 0);
 801710e:	4b13      	ldr	r3, [pc, #76]	; (801715c <ip4addr_aton+0x16c>)
 8017110:	f240 1203 	movw	r2, #259	; 0x103
 8017114:	4912      	ldr	r1, [pc, #72]	; (8017160 <ip4addr_aton+0x170>)
 8017116:	4813      	ldr	r0, [pc, #76]	; (8017164 <ip4addr_aton+0x174>)
 8017118:	f006 fee5 	bl	801dee6 <iprintf>
    break;
  }
  if (addr) {
 801711c:	b1e4      	cbz	r4, 8017158 <ip4addr_aton+0x168>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801711e:	4628      	mov	r0, r5
 8017120:	f7fe ffe4 	bl	80160ec <lwip_htonl>
 8017124:	6020      	str	r0, [r4, #0]
  }
  return 1;
 8017126:	2001      	movs	r0, #1
 8017128:	e002      	b.n	8017130 <ip4addr_aton+0x140>
      return 0;
 801712a:	2000      	movs	r0, #0
 801712c:	e000      	b.n	8017130 <ip4addr_aton+0x140>
        return 0;
 801712e:	2000      	movs	r0, #0
}
 8017130:	b004      	add	sp, #16
 8017132:	bd70      	pop	{r4, r5, r6, pc}
      return 0;
 8017134:	2000      	movs	r0, #0
 8017136:	e7fb      	b.n	8017130 <ip4addr_aton+0x140>
      return 0;
 8017138:	2000      	movs	r0, #0
 801713a:	e7f9      	b.n	8017130 <ip4addr_aton+0x140>
      return 0;
 801713c:	2000      	movs	r0, #0
 801713e:	e7f7      	b.n	8017130 <ip4addr_aton+0x140>
      return 0;
 8017140:	2000      	movs	r0, #0
 8017142:	e7f5      	b.n	8017130 <ip4addr_aton+0x140>
 8017144:	2000      	movs	r0, #0
 8017146:	e7f3      	b.n	8017130 <ip4addr_aton+0x140>
      return 0;
 8017148:	2000      	movs	r0, #0
 801714a:	e7f1      	b.n	8017130 <ip4addr_aton+0x140>
      return 0;
 801714c:	2000      	movs	r0, #0
 801714e:	e7ef      	b.n	8017130 <ip4addr_aton+0x140>
 8017150:	2000      	movs	r0, #0
 8017152:	e7ed      	b.n	8017130 <ip4addr_aton+0x140>
 8017154:	2000      	movs	r0, #0
 8017156:	e7eb      	b.n	8017130 <ip4addr_aton+0x140>
  return 1;
 8017158:	2001      	movs	r0, #1
 801715a:	e7e9      	b.n	8017130 <ip4addr_aton+0x140>
 801715c:	080215f8 	.word	0x080215f8
 8017160:	08021634 	.word	0x08021634
 8017164:	0801e950 	.word	0x0801e950

08017168 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801716c:	b083      	sub	sp, #12
 801716e:	4689      	mov	r9, r1
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8017170:	6803      	ldr	r3, [r0, #0]
 8017172:	f10d 0e08 	add.w	lr, sp, #8
 8017176:	f84e 3d04 	str.w	r3, [lr, #-4]!

  rp = buf;
 801717a:	460f      	mov	r7, r1
  int len = 0;
 801717c:	2600      	movs	r6, #0
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 801717e:	4630      	mov	r0, r6
 8017180:	2803      	cmp	r0, #3
 8017182:	d838      	bhi.n	80171f6 <ip4addr_ntoa_r+0x8e>
 8017184:	2500      	movs	r5, #0
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8017186:	f89e 4000 	ldrb.w	r4, [lr]
 801718a:	4b20      	ldr	r3, [pc, #128]	; (801720c <ip4addr_ntoa_r+0xa4>)
 801718c:	fba3 1304 	umull	r1, r3, r3, r4
 8017190:	08db      	lsrs	r3, r3, #3
 8017192:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 8017196:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 801719a:	eba4 040c 	sub.w	r4, r4, ip
 801719e:	b2e4      	uxtb	r4, r4
      *ap /= (u8_t)10;
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	f88e 3000 	strb.w	r3, [lr]
      inv[i++] = (char)('0' + rem);
 80171a6:	f105 0c01 	add.w	ip, r5, #1
 80171aa:	fa5f f18c 	uxtb.w	r1, ip
 80171ae:	3430      	adds	r4, #48	; 0x30
 80171b0:	f10d 0c08 	add.w	ip, sp, #8
 80171b4:	4465      	add	r5, ip
 80171b6:	f805 4c08 	strb.w	r4, [r5, #-8]
 80171ba:	460d      	mov	r5, r1
    } while (*ap);
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d1e2      	bne.n	8017186 <ip4addr_ntoa_r+0x1e>
    while (i--) {
 80171c0:	1e4b      	subs	r3, r1, #1
 80171c2:	b2db      	uxtb	r3, r3
 80171c4:	b159      	cbz	r1, 80171de <ip4addr_ntoa_r+0x76>
      if (len++ >= buflen) {
 80171c6:	1c74      	adds	r4, r6, #1
 80171c8:	4296      	cmp	r6, r2
 80171ca:	da19      	bge.n	8017200 <ip4addr_ntoa_r+0x98>
        return NULL;
      }
      *rp++ = inv[i];
 80171cc:	a902      	add	r1, sp, #8
 80171ce:	18cd      	adds	r5, r1, r3
 80171d0:	f815 5c08 	ldrb.w	r5, [r5, #-8]
 80171d4:	703d      	strb	r5, [r7, #0]
      if (len++ >= buflen) {
 80171d6:	4626      	mov	r6, r4
    while (i--) {
 80171d8:	4619      	mov	r1, r3
      *rp++ = inv[i];
 80171da:	3701      	adds	r7, #1
 80171dc:	e7f0      	b.n	80171c0 <ip4addr_ntoa_r+0x58>
    }
    if (len++ >= buflen) {
 80171de:	1c73      	adds	r3, r6, #1
 80171e0:	4296      	cmp	r6, r2
 80171e2:	da11      	bge.n	8017208 <ip4addr_ntoa_r+0xa0>
      return NULL;
    }
    *rp++ = '.';
 80171e4:	242e      	movs	r4, #46	; 0x2e
 80171e6:	703c      	strb	r4, [r7, #0]
    ap++;
 80171e8:	f10e 0e01 	add.w	lr, lr, #1
  for (n = 0; n < 4; n++) {
 80171ec:	3001      	adds	r0, #1
 80171ee:	b2c0      	uxtb	r0, r0
    if (len++ >= buflen) {
 80171f0:	461e      	mov	r6, r3
    *rp++ = '.';
 80171f2:	3701      	adds	r7, #1
 80171f4:	e7c4      	b.n	8017180 <ip4addr_ntoa_r+0x18>
  }
  *--rp = 0;
 80171f6:	2300      	movs	r3, #0
 80171f8:	f807 3c01 	strb.w	r3, [r7, #-1]
  return buf;
 80171fc:	4648      	mov	r0, r9
 80171fe:	e000      	b.n	8017202 <ip4addr_ntoa_r+0x9a>
        return NULL;
 8017200:	2000      	movs	r0, #0
}
 8017202:	b003      	add	sp, #12
 8017204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8017208:	2000      	movs	r0, #0
 801720a:	e7fa      	b.n	8017202 <ip4addr_ntoa_r+0x9a>
 801720c:	cccccccd 	.word	0xcccccccd

08017210 <ip4addr_ntoa>:
{
 8017210:	b508      	push	{r3, lr}
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8017212:	2210      	movs	r2, #16
 8017214:	4901      	ldr	r1, [pc, #4]	; (801721c <ip4addr_ntoa+0xc>)
 8017216:	f7ff ffa7 	bl	8017168 <ip4addr_ntoa_r>
}
 801721a:	bd08      	pop	{r3, pc}
 801721c:	20004060 	.word	0x20004060

08017220 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017220:	b538      	push	{r3, r4, r5, lr}
 8017222:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017224:	4b0c      	ldr	r3, [pc, #48]	; (8017258 <ip_reass_dequeue_datagram+0x38>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	4283      	cmp	r3, r0
 801722a:	d008      	beq.n	801723e <ip_reass_dequeue_datagram+0x1e>
 801722c:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801722e:	b151      	cbz	r1, 8017246 <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8017230:	6823      	ldr	r3, [r4, #0]
 8017232:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017234:	4621      	mov	r1, r4
 8017236:	2004      	movs	r0, #4
 8017238:	f000 feb2 	bl	8017fa0 <memp_free>
 801723c:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 801723e:	6802      	ldr	r2, [r0, #0]
 8017240:	4b05      	ldr	r3, [pc, #20]	; (8017258 <ip_reass_dequeue_datagram+0x38>)
 8017242:	601a      	str	r2, [r3, #0]
 8017244:	e7f6      	b.n	8017234 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017246:	4b05      	ldr	r3, [pc, #20]	; (801725c <ip_reass_dequeue_datagram+0x3c>)
 8017248:	f240 1245 	movw	r2, #325	; 0x145
 801724c:	4904      	ldr	r1, [pc, #16]	; (8017260 <ip_reass_dequeue_datagram+0x40>)
 801724e:	4805      	ldr	r0, [pc, #20]	; (8017264 <ip_reass_dequeue_datagram+0x44>)
 8017250:	f006 fe49 	bl	801dee6 <iprintf>
 8017254:	e7ec      	b.n	8017230 <ip_reass_dequeue_datagram+0x10>
 8017256:	bf00      	nop
 8017258:	20004074 	.word	0x20004074
 801725c:	08021734 	.word	0x08021734
 8017260:	08021770 	.word	0x08021770
 8017264:	0801e950 	.word	0x0801e950

08017268 <ip_reass_free_complete_datagram>:
{
 8017268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801726c:	4680      	mov	r8, r0
 801726e:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017270:	4281      	cmp	r1, r0
 8017272:	d015      	beq.n	80172a0 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 8017274:	f1b9 0f00 	cmp.w	r9, #0
 8017278:	d009      	beq.n	801728e <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801727a:	f8d9 3000 	ldr.w	r3, [r9]
 801727e:	4598      	cmp	r8, r3
 8017280:	d005      	beq.n	801728e <ip_reass_free_complete_datagram+0x26>
 8017282:	4b35      	ldr	r3, [pc, #212]	; (8017358 <ip_reass_free_complete_datagram+0xf0>)
 8017284:	22ad      	movs	r2, #173	; 0xad
 8017286:	4935      	ldr	r1, [pc, #212]	; (801735c <ip_reass_free_complete_datagram+0xf4>)
 8017288:	4835      	ldr	r0, [pc, #212]	; (8017360 <ip_reass_free_complete_datagram+0xf8>)
 801728a:	f006 fe2c 	bl	801dee6 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801728e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017292:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 8017294:	889a      	ldrh	r2, [r3, #4]
 8017296:	b152      	cbz	r2, 80172ae <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 8017298:	2600      	movs	r6, #0
  p = ipr->p;
 801729a:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 801729e:	e032      	b.n	8017306 <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80172a0:	4b2d      	ldr	r3, [pc, #180]	; (8017358 <ip_reass_free_complete_datagram+0xf0>)
 80172a2:	22ab      	movs	r2, #171	; 0xab
 80172a4:	492f      	ldr	r1, [pc, #188]	; (8017364 <ip_reass_free_complete_datagram+0xfc>)
 80172a6:	482e      	ldr	r0, [pc, #184]	; (8017360 <ip_reass_free_complete_datagram+0xf8>)
 80172a8:	f006 fe1d 	bl	801dee6 <iprintf>
 80172ac:	e7e2      	b.n	8017274 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80172b4:	4643      	mov	r3, r8
 80172b6:	6862      	ldr	r2, [r4, #4]
 80172b8:	f853 1f08 	ldr.w	r1, [r3, #8]!
 80172bc:	685e      	ldr	r6, [r3, #4]
 80172be:	689d      	ldr	r5, [r3, #8]
 80172c0:	68d8      	ldr	r0, [r3, #12]
 80172c2:	6011      	str	r1, [r2, #0]
 80172c4:	6056      	str	r6, [r2, #4]
 80172c6:	6095      	str	r5, [r2, #8]
 80172c8:	60d0      	str	r0, [r2, #12]
 80172ca:	6919      	ldr	r1, [r3, #16]
 80172cc:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80172ce:	2101      	movs	r1, #1
 80172d0:	4620      	mov	r0, r4
 80172d2:	f7ff fcab 	bl	8016c2c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80172d6:	4620      	mov	r0, r4
 80172d8:	f001 f9fe 	bl	80186d8 <pbuf_clen>
 80172dc:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80172de:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80172e2:	da03      	bge.n	80172ec <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 80172e4:	4620      	mov	r0, r4
 80172e6:	f001 f831 	bl	801834c <pbuf_free>
 80172ea:	e7d6      	b.n	801729a <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80172ec:	4b1a      	ldr	r3, [pc, #104]	; (8017358 <ip_reass_free_complete_datagram+0xf0>)
 80172ee:	22bc      	movs	r2, #188	; 0xbc
 80172f0:	491d      	ldr	r1, [pc, #116]	; (8017368 <ip_reass_free_complete_datagram+0x100>)
 80172f2:	481b      	ldr	r0, [pc, #108]	; (8017360 <ip_reass_free_complete_datagram+0xf8>)
 80172f4:	f006 fdf7 	bl	801dee6 <iprintf>
 80172f8:	e7f4      	b.n	80172e4 <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed += clen;
 80172fa:	4435      	add	r5, r6
 80172fc:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 80172fe:	4620      	mov	r0, r4
 8017300:	f001 f824 	bl	801834c <pbuf_free>
    p = iprh->next_pbuf;
 8017304:	463c      	mov	r4, r7
  while (p != NULL) {
 8017306:	b184      	cbz	r4, 801732a <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 8017308:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 801730a:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 801730c:	4620      	mov	r0, r4
 801730e:	f001 f9e3 	bl	80186d8 <pbuf_clen>
 8017312:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017314:	1833      	adds	r3, r6, r0
 8017316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801731a:	dbee      	blt.n	80172fa <ip_reass_free_complete_datagram+0x92>
 801731c:	4b0e      	ldr	r3, [pc, #56]	; (8017358 <ip_reass_free_complete_datagram+0xf0>)
 801731e:	22cc      	movs	r2, #204	; 0xcc
 8017320:	4911      	ldr	r1, [pc, #68]	; (8017368 <ip_reass_free_complete_datagram+0x100>)
 8017322:	480f      	ldr	r0, [pc, #60]	; (8017360 <ip_reass_free_complete_datagram+0xf8>)
 8017324:	f006 fddf 	bl	801dee6 <iprintf>
 8017328:	e7e7      	b.n	80172fa <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 801732a:	4649      	mov	r1, r9
 801732c:	4640      	mov	r0, r8
 801732e:	f7ff ff77 	bl	8017220 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8017332:	4b0e      	ldr	r3, [pc, #56]	; (801736c <ip_reass_free_complete_datagram+0x104>)
 8017334:	881b      	ldrh	r3, [r3, #0]
 8017336:	429e      	cmp	r6, r3
 8017338:	d806      	bhi.n	8017348 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount -= pbufs_freed;
 801733a:	4a0c      	ldr	r2, [pc, #48]	; (801736c <ip_reass_free_complete_datagram+0x104>)
 801733c:	8813      	ldrh	r3, [r2, #0]
 801733e:	1b9b      	subs	r3, r3, r6
 8017340:	8013      	strh	r3, [r2, #0]
}
 8017342:	4630      	mov	r0, r6
 8017344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8017348:	4b03      	ldr	r3, [pc, #12]	; (8017358 <ip_reass_free_complete_datagram+0xf0>)
 801734a:	22d2      	movs	r2, #210	; 0xd2
 801734c:	4908      	ldr	r1, [pc, #32]	; (8017370 <ip_reass_free_complete_datagram+0x108>)
 801734e:	4804      	ldr	r0, [pc, #16]	; (8017360 <ip_reass_free_complete_datagram+0xf8>)
 8017350:	f006 fdc9 	bl	801dee6 <iprintf>
 8017354:	e7f1      	b.n	801733a <ip_reass_free_complete_datagram+0xd2>
 8017356:	bf00      	nop
 8017358:	08021734 	.word	0x08021734
 801735c:	08021798 	.word	0x08021798
 8017360:	0801e950 	.word	0x0801e950
 8017364:	0802178c 	.word	0x0802178c
 8017368:	080217ac 	.word	0x080217ac
 801736c:	20004070 	.word	0x20004070
 8017370:	080217cc 	.word	0x080217cc

08017374 <ip_reass_remove_oldest_datagram>:
{
 8017374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017378:	4605      	mov	r5, r0
 801737a:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801737c:	2600      	movs	r6, #0
 801737e:	e02a      	b.n	80173d6 <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017380:	699a      	ldr	r2, [r3, #24]
 8017382:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8017386:	4562      	cmp	r2, ip
 8017388:	d110      	bne.n	80173ac <ip_reass_remove_oldest_datagram+0x38>
 801738a:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 801738e:	88aa      	ldrh	r2, [r5, #4]
 8017390:	4594      	cmp	ip, r2
 8017392:	d10b      	bne.n	80173ac <ip_reass_remove_oldest_datagram+0x38>
 8017394:	e001      	b.n	801739a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 8017396:	4671      	mov	r1, lr
          oldest = r;
 8017398:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801739a:	681a      	ldr	r2, [r3, #0]
 801739c:	b18a      	cbz	r2, 80173c2 <ip_reass_remove_oldest_datagram+0x4e>
 801739e:	469e      	mov	lr, r3
 80173a0:	4613      	mov	r3, r2
    while (r != NULL) {
 80173a2:	b183      	cbz	r3, 80173c6 <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80173a4:	68ea      	ldr	r2, [r5, #12]
 80173a6:	695f      	ldr	r7, [r3, #20]
 80173a8:	4297      	cmp	r7, r2
 80173aa:	d0e9      	beq.n	8017380 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 80173ac:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80173ae:	2800      	cmp	r0, #0
 80173b0:	d0f1      	beq.n	8017396 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 80173b2:	f893 c01f 	ldrb.w	ip, [r3, #31]
 80173b6:	7fc2      	ldrb	r2, [r0, #31]
 80173b8:	4594      	cmp	ip, r2
 80173ba:	d8ee      	bhi.n	801739a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 80173bc:	4671      	mov	r1, lr
          oldest = r;
 80173be:	4618      	mov	r0, r3
 80173c0:	e7eb      	b.n	801739a <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 80173c2:	4673      	mov	r3, lr
 80173c4:	e7eb      	b.n	801739e <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 80173c6:	b110      	cbz	r0, 80173ce <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80173c8:	f7ff ff4e 	bl	8017268 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80173cc:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80173ce:	4546      	cmp	r6, r8
 80173d0:	da08      	bge.n	80173e4 <ip_reass_remove_oldest_datagram+0x70>
 80173d2:	2c01      	cmp	r4, #1
 80173d4:	dd06      	ble.n	80173e4 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 80173d6:	4b05      	ldr	r3, [pc, #20]	; (80173ec <ip_reass_remove_oldest_datagram+0x78>)
 80173d8:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 80173da:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80173dc:	4621      	mov	r1, r4
    prev = NULL;
 80173de:	46a6      	mov	lr, r4
    oldest = NULL;
 80173e0:	4620      	mov	r0, r4
    while (r != NULL) {
 80173e2:	e7de      	b.n	80173a2 <ip_reass_remove_oldest_datagram+0x2e>
}
 80173e4:	4630      	mov	r0, r6
 80173e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173ea:	bf00      	nop
 80173ec:	20004074 	.word	0x20004074

080173f0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80173f0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80173f2:	4604      	mov	r4, r0
 80173f4:	b120      	cbz	r0, 8017400 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80173f6:	4621      	mov	r1, r4
 80173f8:	2005      	movs	r0, #5
 80173fa:	f000 fdd1 	bl	8017fa0 <memp_free>
 80173fe:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8017400:	4b03      	ldr	r3, [pc, #12]	; (8017410 <ip_frag_free_pbuf_custom_ref+0x20>)
 8017402:	f240 22ae 	movw	r2, #686	; 0x2ae
 8017406:	4903      	ldr	r1, [pc, #12]	; (8017414 <ip_frag_free_pbuf_custom_ref+0x24>)
 8017408:	4803      	ldr	r0, [pc, #12]	; (8017418 <ip_frag_free_pbuf_custom_ref+0x28>)
 801740a:	f006 fd6c 	bl	801dee6 <iprintf>
 801740e:	e7f2      	b.n	80173f6 <ip_frag_free_pbuf_custom_ref+0x6>
 8017410:	08021734 	.word	0x08021734
 8017414:	0801ec44 	.word	0x0801ec44
 8017418:	0801e950 	.word	0x0801e950

0801741c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801741c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801741e:	4604      	mov	r4, r0
 8017420:	b138      	cbz	r0, 8017432 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8017422:	6960      	ldr	r0, [r4, #20]
 8017424:	b108      	cbz	r0, 801742a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8017426:	f000 ff91 	bl	801834c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801742a:	4620      	mov	r0, r4
 801742c:	f7ff ffe0 	bl	80173f0 <ip_frag_free_pbuf_custom_ref>
 8017430:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017432:	4b04      	ldr	r3, [pc, #16]	; (8017444 <ipfrag_free_pbuf_custom+0x28>)
 8017434:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8017438:	4903      	ldr	r1, [pc, #12]	; (8017448 <ipfrag_free_pbuf_custom+0x2c>)
 801743a:	4804      	ldr	r0, [pc, #16]	; (801744c <ipfrag_free_pbuf_custom+0x30>)
 801743c:	f006 fd53 	bl	801dee6 <iprintf>
 8017440:	e7ef      	b.n	8017422 <ipfrag_free_pbuf_custom+0x6>
 8017442:	bf00      	nop
 8017444:	08021734 	.word	0x08021734
 8017448:	080217e8 	.word	0x080217e8
 801744c:	0801e950 	.word	0x0801e950

08017450 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 8017450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017454:	4680      	mov	r8, r0
 8017456:	460f      	mov	r7, r1
 8017458:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 801745a:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801745c:	8860      	ldrh	r0, [r4, #2]
 801745e:	f7fe fe42 	bl	80160e6 <lwip_htons>
 8017462:	7826      	ldrb	r6, [r4, #0]
 8017464:	f006 060f 	and.w	r6, r6, #15
 8017468:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 801746c:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801746e:	88e0      	ldrh	r0, [r4, #6]
 8017470:	f7fe fe39 	bl	80160e6 <lwip_htons>
 8017474:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017478:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 801747a:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 801747c:	2400      	movs	r4, #0
 801747e:	702c      	strb	r4, [r5, #0]
 8017480:	706c      	strb	r4, [r5, #1]
 8017482:	70ac      	strb	r4, [r5, #2]
 8017484:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 8017486:	80a8      	strh	r0, [r5, #4]
  iprh->end = offset + len;
 8017488:	eb06 0e00 	add.w	lr, r6, r0
 801748c:	fa1f fe8e 	uxth.w	lr, lr
 8017490:	f8a5 e006 	strh.w	lr, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 8017494:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 8017498:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 801749a:	e033      	b.n	8017504 <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 801749c:	6029      	str	r1, [r5, #0]
      if (iprh_prev != NULL) {
 801749e:	b34c      	cbz	r4, 80174f4 <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80174a0:	88e2      	ldrh	r2, [r4, #6]
 80174a2:	4290      	cmp	r0, r2
 80174a4:	d37e      	bcc.n	80175a4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
 80174a6:	889b      	ldrh	r3, [r3, #4]
 80174a8:	459e      	cmp	lr, r3
 80174aa:	d87b      	bhi.n	80175a4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        iprh_prev->next_pbuf = new_p;
 80174ac:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 80174ae:	88ab      	ldrh	r3, [r5, #4]
 80174b0:	429a      	cmp	r2, r3
 80174b2:	d000      	beq.n	80174b6 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 80174b4:	2600      	movs	r6, #0
  if (q == NULL) {
 80174b6:	2900      	cmp	r1, #0
 80174b8:	d036      	beq.n	8017528 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80174ba:	f1b9 0f00 	cmp.w	r9, #0
 80174be:	d104      	bne.n	80174ca <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 80174c0:	f898 301e 	ldrb.w	r3, [r8, #30]
 80174c4:	f013 0f01 	tst.w	r3, #1
 80174c8:	d07a      	beq.n	80175c0 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
    if (valid) {
 80174ca:	2e00      	cmp	r6, #0
 80174cc:	d067      	beq.n	801759e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80174ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d060      	beq.n	8017598 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 80174d6:	6858      	ldr	r0, [r3, #4]
 80174d8:	8883      	ldrh	r3, [r0, #4]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d15e      	bne.n	801759c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 80174de:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 80174e0:	2a00      	cmp	r2, #0
 80174e2:	d044      	beq.n	801756e <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 80174e4:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 80174e6:	88e9      	ldrh	r1, [r5, #6]
 80174e8:	889a      	ldrh	r2, [r3, #4]
 80174ea:	4291      	cmp	r1, r2
 80174ec:	d13d      	bne.n	801756a <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 80174ee:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 80174f0:	461d      	mov	r5, r3
 80174f2:	e7f5      	b.n	80174e0 <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 80174f4:	889b      	ldrh	r3, [r3, #4]
 80174f6:	459e      	cmp	lr, r3
 80174f8:	d854      	bhi.n	80175a4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        ipr->p = new_p;
 80174fa:	f8c8 7004 	str.w	r7, [r8, #4]
 80174fe:	e7da      	b.n	80174b6 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 8017500:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 8017502:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 8017504:	2900      	cmp	r1, #0
 8017506:	d0d6      	beq.n	80174b6 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8017508:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 801750a:	889a      	ldrh	r2, [r3, #4]
 801750c:	4290      	cmp	r0, r2
 801750e:	d3c5      	bcc.n	801749c <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 8017510:	4290      	cmp	r0, r2
 8017512:	d047      	beq.n	80175a4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start < iprh_tmp->end) {
 8017514:	88d9      	ldrh	r1, [r3, #6]
 8017516:	4288      	cmp	r0, r1
 8017518:	d344      	bcc.n	80175a4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      if (iprh_prev != NULL) {
 801751a:	2c00      	cmp	r4, #0
 801751c:	d0f0      	beq.n	8017500 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 801751e:	88e1      	ldrh	r1, [r4, #6]
 8017520:	428a      	cmp	r2, r1
 8017522:	d0ed      	beq.n	8017500 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 8017524:	2600      	movs	r6, #0
 8017526:	e7eb      	b.n	8017500 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 8017528:	b194      	cbz	r4, 8017550 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801752a:	88e2      	ldrh	r2, [r4, #6]
 801752c:	88ab      	ldrh	r3, [r5, #4]
 801752e:	429a      	cmp	r2, r3
 8017530:	d806      	bhi.n	8017540 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 8017532:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 8017534:	88e2      	ldrh	r2, [r4, #6]
 8017536:	88ab      	ldrh	r3, [r5, #4]
 8017538:	429a      	cmp	r2, r3
 801753a:	d0be      	beq.n	80174ba <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 801753c:	2600      	movs	r6, #0
 801753e:	e7bc      	b.n	80174ba <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017540:	4b21      	ldr	r3, [pc, #132]	; (80175c8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8017542:	f240 12ab 	movw	r2, #427	; 0x1ab
 8017546:	4921      	ldr	r1, [pc, #132]	; (80175cc <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 8017548:	4821      	ldr	r0, [pc, #132]	; (80175d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 801754a:	f006 fccc 	bl	801dee6 <iprintf>
 801754e:	e7f0      	b.n	8017532 <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017550:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017554:	b133      	cbz	r3, 8017564 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 8017556:	4b1c      	ldr	r3, [pc, #112]	; (80175c8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8017558:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801755c:	491d      	ldr	r1, [pc, #116]	; (80175d4 <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 801755e:	481c      	ldr	r0, [pc, #112]	; (80175d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8017560:	f006 fcc1 	bl	801dee6 <iprintf>
      ipr->p = new_p;
 8017564:	f8c8 7004 	str.w	r7, [r8, #4]
 8017568:	e7a7      	b.n	80174ba <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 801756a:	461d      	mov	r5, r3
            valid = 0;
 801756c:	2600      	movs	r6, #0
        if (valid) {
 801756e:	b1b6      	cbz	r6, 801759e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8017570:	4285      	cmp	r5, r0
 8017572:	d009      	beq.n	8017588 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017574:	682b      	ldr	r3, [r5, #0]
 8017576:	b193      	cbz	r3, 801759e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 8017578:	4b13      	ldr	r3, [pc, #76]	; (80175c8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 801757a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801757e:	4916      	ldr	r1, [pc, #88]	; (80175d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 8017580:	4813      	ldr	r0, [pc, #76]	; (80175d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8017582:	f006 fcb0 	bl	801dee6 <iprintf>
 8017586:	e00a      	b.n	801759e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8017588:	4b0f      	ldr	r3, [pc, #60]	; (80175c8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 801758a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801758e:	4913      	ldr	r1, [pc, #76]	; (80175dc <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 8017590:	480f      	ldr	r0, [pc, #60]	; (80175d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8017592:	f006 fca8 	bl	801dee6 <iprintf>
 8017596:	e7ed      	b.n	8017574 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 8017598:	2600      	movs	r6, #0
 801759a:	e000      	b.n	801759e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 801759c:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801759e:	4630      	mov	r0, r6
 80175a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80175a4:	4638      	mov	r0, r7
 80175a6:	f001 f897 	bl	80186d8 <pbuf_clen>
 80175aa:	4a0d      	ldr	r2, [pc, #52]	; (80175e0 <ip_reass_chain_frag_into_datagram_and_validate+0x190>)
 80175ac:	8813      	ldrh	r3, [r2, #0]
 80175ae:	1a18      	subs	r0, r3, r0
 80175b0:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 80175b2:	4638      	mov	r0, r7
 80175b4:	f000 feca 	bl	801834c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175b8:	f04f 30ff 	mov.w	r0, #4294967295
 80175bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80175c0:	4648      	mov	r0, r9
}
 80175c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175c6:	bf00      	nop
 80175c8:	08021734 	.word	0x08021734
 80175cc:	080216a8 	.word	0x080216a8
 80175d0:	0801e950 	.word	0x0801e950
 80175d4:	080216c8 	.word	0x080216c8
 80175d8:	08021710 	.word	0x08021710
 80175dc:	08021700 	.word	0x08021700
 80175e0:	20004070 	.word	0x20004070

080175e4 <ip_frag_alloc_pbuf_custom_ref>:
{
 80175e4:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80175e6:	2005      	movs	r0, #5
 80175e8:	f000 fcc0 	bl	8017f6c <memp_malloc>
}
 80175ec:	bd08      	pop	{r3, pc}
	...

080175f0 <ip_reass_enqueue_new_datagram>:
{
 80175f0:	b570      	push	{r4, r5, r6, lr}
 80175f2:	4605      	mov	r5, r0
 80175f4:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80175f6:	2004      	movs	r0, #4
 80175f8:	f000 fcb8 	bl	8017f6c <memp_malloc>
  if (ipr == NULL) {
 80175fc:	4604      	mov	r4, r0
 80175fe:	b1b0      	cbz	r0, 801762e <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017600:	2220      	movs	r2, #32
 8017602:	2100      	movs	r1, #0
 8017604:	4620      	mov	r0, r4
 8017606:	f007 f801 	bl	801e60c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801760a:	2303      	movs	r3, #3
 801760c:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 801760e:	4b0f      	ldr	r3, [pc, #60]	; (801764c <ip_reass_enqueue_new_datagram+0x5c>)
 8017610:	681a      	ldr	r2, [r3, #0]
 8017612:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 8017614:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017616:	682a      	ldr	r2, [r5, #0]
 8017618:	686e      	ldr	r6, [r5, #4]
 801761a:	68a8      	ldr	r0, [r5, #8]
 801761c:	68e9      	ldr	r1, [r5, #12]
 801761e:	60a2      	str	r2, [r4, #8]
 8017620:	60e6      	str	r6, [r4, #12]
 8017622:	6120      	str	r0, [r4, #16]
 8017624:	6161      	str	r1, [r4, #20]
 8017626:	692a      	ldr	r2, [r5, #16]
 8017628:	61a2      	str	r2, [r4, #24]
}
 801762a:	4620      	mov	r0, r4
 801762c:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801762e:	4631      	mov	r1, r6
 8017630:	4628      	mov	r0, r5
 8017632:	f7ff fe9f 	bl	8017374 <ip_reass_remove_oldest_datagram>
 8017636:	4286      	cmp	r6, r0
 8017638:	dd02      	ble.n	8017640 <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 801763a:	2c00      	cmp	r4, #0
 801763c:	d1e0      	bne.n	8017600 <ip_reass_enqueue_new_datagram+0x10>
 801763e:	e7f4      	b.n	801762a <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017640:	2004      	movs	r0, #4
 8017642:	f000 fc93 	bl	8017f6c <memp_malloc>
 8017646:	4604      	mov	r4, r0
 8017648:	e7f7      	b.n	801763a <ip_reass_enqueue_new_datagram+0x4a>
 801764a:	bf00      	nop
 801764c:	20004074 	.word	0x20004074

08017650 <ip_reass_tmr>:
{
 8017650:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8017652:	4b09      	ldr	r3, [pc, #36]	; (8017678 <ip_reass_tmr+0x28>)
 8017654:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8017656:	2400      	movs	r4, #0
  while (r != NULL) {
 8017658:	e004      	b.n	8017664 <ip_reass_tmr+0x14>
      r = r->next;
 801765a:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 801765c:	4621      	mov	r1, r4
 801765e:	f7ff fe03 	bl	8017268 <ip_reass_free_complete_datagram>
      r = r->next;
 8017662:	4628      	mov	r0, r5
  while (r != NULL) {
 8017664:	b138      	cbz	r0, 8017676 <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 8017666:	7fc3      	ldrb	r3, [r0, #31]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d0f6      	beq.n	801765a <ip_reass_tmr+0xa>
      r->timer--;
 801766c:	3b01      	subs	r3, #1
 801766e:	77c3      	strb	r3, [r0, #31]
      prev = r;
 8017670:	4604      	mov	r4, r0
      r = r->next;
 8017672:	6800      	ldr	r0, [r0, #0]
 8017674:	e7f6      	b.n	8017664 <ip_reass_tmr+0x14>
}
 8017676:	bd38      	pop	{r3, r4, r5, pc}
 8017678:	20004074 	.word	0x20004074

0801767c <ip4_reass>:
{
 801767c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017680:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 8017682:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8017684:	782b      	ldrb	r3, [r5, #0]
 8017686:	f003 030f 	and.w	r3, r3, #15
 801768a:	2b05      	cmp	r3, #5
 801768c:	d124      	bne.n	80176d8 <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801768e:	88e8      	ldrh	r0, [r5, #6]
 8017690:	f7fe fd29 	bl	80160e6 <lwip_htons>
 8017694:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017698:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801769a:	8868      	ldrh	r0, [r5, #2]
 801769c:	f7fe fd23 	bl	80160e6 <lwip_htons>
 80176a0:	782e      	ldrb	r6, [r5, #0]
 80176a2:	f006 060f 	and.w	r6, r6, #15
 80176a6:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 80176aa:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 80176ac:	4648      	mov	r0, r9
 80176ae:	f001 f813 	bl	80186d8 <pbuf_clen>
 80176b2:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80176b4:	4b59      	ldr	r3, [pc, #356]	; (801781c <ip4_reass+0x1a0>)
 80176b6:	881b      	ldrh	r3, [r3, #0]
 80176b8:	4403      	add	r3, r0
 80176ba:	2b0a      	cmp	r3, #10
 80176bc:	dc02      	bgt.n	80176c4 <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80176be:	4b58      	ldr	r3, [pc, #352]	; (8017820 <ip4_reass+0x1a4>)
 80176c0:	681c      	ldr	r4, [r3, #0]
 80176c2:	e011      	b.n	80176e8 <ip4_reass+0x6c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80176c4:	4601      	mov	r1, r0
 80176c6:	4628      	mov	r0, r5
 80176c8:	f7ff fe54 	bl	8017374 <ip_reass_remove_oldest_datagram>
 80176cc:	b120      	cbz	r0, 80176d8 <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80176ce:	4b53      	ldr	r3, [pc, #332]	; (801781c <ip4_reass+0x1a0>)
 80176d0:	881b      	ldrh	r3, [r3, #0]
 80176d2:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80176d4:	2b0a      	cmp	r3, #10
 80176d6:	ddf2      	ble.n	80176be <ip4_reass+0x42>
  pbuf_free(p);
 80176d8:	4648      	mov	r0, r9
 80176da:	f000 fe37 	bl	801834c <pbuf_free>
  return NULL;
 80176de:	2700      	movs	r7, #0
}
 80176e0:	4638      	mov	r0, r7
 80176e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80176e6:	6824      	ldr	r4, [r4, #0]
 80176e8:	b15c      	cbz	r4, 8017702 <ip4_reass+0x86>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80176ea:	6962      	ldr	r2, [r4, #20]
 80176ec:	68eb      	ldr	r3, [r5, #12]
 80176ee:	429a      	cmp	r2, r3
 80176f0:	d1f9      	bne.n	80176e6 <ip4_reass+0x6a>
 80176f2:	69a2      	ldr	r2, [r4, #24]
 80176f4:	692b      	ldr	r3, [r5, #16]
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d1f5      	bne.n	80176e6 <ip4_reass+0x6a>
 80176fa:	89a2      	ldrh	r2, [r4, #12]
 80176fc:	88ab      	ldrh	r3, [r5, #4]
 80176fe:	429a      	cmp	r2, r3
 8017700:	d1f1      	bne.n	80176e6 <ip4_reass+0x6a>
  if (ipr == NULL) {
 8017702:	2c00      	cmp	r4, #0
 8017704:	d048      	beq.n	8017798 <ip4_reass+0x11c>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017706:	88e8      	ldrh	r0, [r5, #6]
 8017708:	f7fe fced 	bl	80160e6 <lwip_htons>
 801770c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017710:	2800      	cmp	r0, #0
 8017712:	d049      	beq.n	80177a8 <ip4_reass+0x12c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017714:	88ed      	ldrh	r5, [r5, #6]
 8017716:	f005 0520 	and.w	r5, r5, #32
 801771a:	2d00      	cmp	r5, #0
 801771c:	bf0c      	ite	eq
 801771e:	2201      	moveq	r2, #1
 8017720:	2200      	movne	r2, #0
  if (is_last) {
 8017722:	d107      	bne.n	8017734 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8017724:	19bb      	adds	r3, r7, r6
 8017726:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017728:	429f      	cmp	r7, r3
 801772a:	d8d5      	bhi.n	80176d8 <ip4_reass+0x5c>
 801772c:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 8017730:	428b      	cmp	r3, r1
 8017732:	d8d1      	bhi.n	80176d8 <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017734:	4649      	mov	r1, r9
 8017736:	4620      	mov	r0, r4
 8017738:	f7ff fe8a 	bl	8017450 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801773c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017740:	d0ca      	beq.n	80176d8 <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017742:	4b36      	ldr	r3, [pc, #216]	; (801781c <ip4_reass+0x1a0>)
 8017744:	881a      	ldrh	r2, [r3, #0]
 8017746:	4490      	add	r8, r2
 8017748:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 801774c:	b92d      	cbnz	r5, 801775a <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 801774e:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 8017750:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017752:	7fa3      	ldrb	r3, [r4, #30]
 8017754:	f043 0301 	orr.w	r3, r3, #1
 8017758:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801775a:	2801      	cmp	r0, #1
 801775c:	d15b      	bne.n	8017816 <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 801775e:	8ba3      	ldrh	r3, [r4, #28]
 8017760:	3314      	adds	r3, #20
 8017762:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8017764:	6863      	ldr	r3, [r4, #4]
 8017766:	685e      	ldr	r6, [r3, #4]
 8017768:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801776a:	4623      	mov	r3, r4
 801776c:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8017770:	685f      	ldr	r7, [r3, #4]
 8017772:	6898      	ldr	r0, [r3, #8]
 8017774:	68d9      	ldr	r1, [r3, #12]
 8017776:	6032      	str	r2, [r6, #0]
 8017778:	6077      	str	r7, [r6, #4]
 801777a:	60b0      	str	r0, [r6, #8]
 801777c:	60f1      	str	r1, [r6, #12]
 801777e:	691a      	ldr	r2, [r3, #16]
 8017780:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8017782:	8ba0      	ldrh	r0, [r4, #28]
 8017784:	f7fe fcaf 	bl	80160e6 <lwip_htons>
 8017788:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801778a:	2300      	movs	r3, #0
 801778c:	71b3      	strb	r3, [r6, #6]
 801778e:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017790:	72b3      	strb	r3, [r6, #10]
 8017792:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8017794:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8017796:	e026      	b.n	80177e6 <ip4_reass+0x16a>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017798:	4641      	mov	r1, r8
 801779a:	4628      	mov	r0, r5
 801779c:	f7ff ff28 	bl	80175f0 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 80177a0:	4604      	mov	r4, r0
 80177a2:	2800      	cmp	r0, #0
 80177a4:	d1b6      	bne.n	8017714 <ip4_reass+0x98>
 80177a6:	e797      	b.n	80176d8 <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80177a8:	89e0      	ldrh	r0, [r4, #14]
 80177aa:	f7fe fc9c 	bl	80160e6 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80177ae:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80177b2:	2800      	cmp	r0, #0
 80177b4:	d0ae      	beq.n	8017714 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80177b6:	682a      	ldr	r2, [r5, #0]
 80177b8:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80177bc:	68a8      	ldr	r0, [r5, #8]
 80177be:	68e9      	ldr	r1, [r5, #12]
 80177c0:	60a2      	str	r2, [r4, #8]
 80177c2:	f8c4 e00c 	str.w	lr, [r4, #12]
 80177c6:	6120      	str	r0, [r4, #16]
 80177c8:	6161      	str	r1, [r4, #20]
 80177ca:	692a      	ldr	r2, [r5, #16]
 80177cc:	61a2      	str	r2, [r4, #24]
 80177ce:	e7a1      	b.n	8017714 <ip4_reass+0x98>
      iprh = (struct ip_reass_helper*)r->payload;
 80177d0:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 80177d2:	f06f 0113 	mvn.w	r1, #19
 80177d6:	4628      	mov	r0, r5
 80177d8:	f000 fdae 	bl	8018338 <pbuf_header>
      pbuf_cat(p, r);
 80177dc:	4629      	mov	r1, r5
 80177de:	4638      	mov	r0, r7
 80177e0:	f000 ffa0 	bl	8018724 <pbuf_cat>
      r = iprh->next_pbuf;
 80177e4:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 80177e6:	2d00      	cmp	r5, #0
 80177e8:	d1f2      	bne.n	80177d0 <ip4_reass+0x154>
    if (ipr == reassdatagrams) {
 80177ea:	4b0d      	ldr	r3, [pc, #52]	; (8017820 <ip4_reass+0x1a4>)
 80177ec:	6819      	ldr	r1, [r3, #0]
 80177ee:	428c      	cmp	r4, r1
 80177f0:	d005      	beq.n	80177fe <ip4_reass+0x182>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80177f2:	b129      	cbz	r1, 8017800 <ip4_reass+0x184>
        if (ipr_prev->next == ipr) {
 80177f4:	680b      	ldr	r3, [r1, #0]
 80177f6:	429c      	cmp	r4, r3
 80177f8:	d002      	beq.n	8017800 <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80177fa:	4619      	mov	r1, r3
 80177fc:	e7f9      	b.n	80177f2 <ip4_reass+0x176>
      ipr_prev = NULL;
 80177fe:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017800:	4620      	mov	r0, r4
 8017802:	f7ff fd0d 	bl	8017220 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8017806:	4638      	mov	r0, r7
 8017808:	f000 ff66 	bl	80186d8 <pbuf_clen>
 801780c:	4a03      	ldr	r2, [pc, #12]	; (801781c <ip4_reass+0x1a0>)
 801780e:	8813      	ldrh	r3, [r2, #0]
 8017810:	1a18      	subs	r0, r3, r0
 8017812:	8010      	strh	r0, [r2, #0]
    return p;
 8017814:	e764      	b.n	80176e0 <ip4_reass+0x64>
  return NULL;
 8017816:	2700      	movs	r7, #0
 8017818:	e762      	b.n	80176e0 <ip4_reass+0x64>
 801781a:	bf00      	nop
 801781c:	20004070 	.word	0x20004070
 8017820:	20004074 	.word	0x20004074

08017824 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017828:	b08d      	sub	sp, #52	; 0x34
 801782a:	4605      	mov	r5, r0
 801782c:	9107      	str	r1, [sp, #28]
 801782e:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8017830:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8017832:	3b14      	subs	r3, #20
 8017834:	d420      	bmi.n	8017878 <ip4_frag+0x54>
 8017836:	10db      	asrs	r3, r3, #3
 8017838:	9309      	str	r3, [sp, #36]	; 0x24
 801783a:	b29b      	uxth	r3, r3
 801783c:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801783e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8017842:	f89a 3000 	ldrb.w	r3, [sl]
 8017846:	f003 030f 	and.w	r3, r3, #15
 801784a:	2b05      	cmp	r3, #5
 801784c:	d116      	bne.n	801787c <ip4_frag+0x58>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801784e:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8017852:	f7fe fc48 	bl	80160e6 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8017856:	f3c0 030c 	ubfx	r3, r0, #0, #13
 801785a:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801785c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8017860:	d116      	bne.n	8017890 <ip4_frag+0x6c>

  left = p->tot_len - IP_HLEN;
 8017862:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8017866:	f1a9 0914 	sub.w	r9, r9, #20
 801786a:	fa1f fb89 	uxth.w	fp, r9
  u16_t poff = IP_HLEN;
 801786e:	f04f 0814 	mov.w	r8, #20
  u16_t newpbuflen = 0;
 8017872:	2400      	movs	r4, #0
 8017874:	46d9      	mov	r9, fp

  while (left) {
 8017876:	e08c      	b.n	8017992 <ip4_frag+0x16e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8017878:	3307      	adds	r3, #7
 801787a:	e7dc      	b.n	8017836 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801787c:	4b5e      	ldr	r3, [pc, #376]	; (80179f8 <ip4_frag+0x1d4>)
 801787e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8017882:	495e      	ldr	r1, [pc, #376]	; (80179fc <ip4_frag+0x1d8>)
 8017884:	485e      	ldr	r0, [pc, #376]	; (8017a00 <ip4_frag+0x1dc>)
 8017886:	f006 fb2e 	bl	801dee6 <iprintf>
 801788a:	f06f 0005 	mvn.w	r0, #5
 801788e:	e043      	b.n	8017918 <ip4_frag+0xf4>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8017890:	4b59      	ldr	r3, [pc, #356]	; (80179f8 <ip4_frag+0x1d4>)
 8017892:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017896:	495b      	ldr	r1, [pc, #364]	; (8017a04 <ip4_frag+0x1e0>)
 8017898:	4859      	ldr	r0, [pc, #356]	; (8017a00 <ip4_frag+0x1dc>)
 801789a:	f006 fb24 	bl	801dee6 <iprintf>
 801789e:	f06f 0005 	mvn.w	r0, #5
 80178a2:	e039      	b.n	8017918 <ip4_frag+0xf4>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80178a4:	4b54      	ldr	r3, [pc, #336]	; (80179f8 <ip4_frag+0x1d4>)
 80178a6:	f240 3209 	movw	r2, #777	; 0x309
 80178aa:	4957      	ldr	r1, [pc, #348]	; (8017a08 <ip4_frag+0x1e4>)
 80178ac:	4854      	ldr	r0, [pc, #336]	; (8017a00 <ip4_frag+0x1dc>)
 80178ae:	f006 fb1a 	bl	801dee6 <iprintf>
 80178b2:	e086      	b.n	80179c2 <ip4_frag+0x19e>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80178b4:	f7ff fe96 	bl	80175e4 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 80178b8:	4607      	mov	r7, r0
 80178ba:	b340      	cbz	r0, 801790e <ip4_frag+0xea>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 80178bc:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80178be:	4443      	add	r3, r8
 80178c0:	9401      	str	r4, [sp, #4]
 80178c2:	9300      	str	r3, [sp, #0]
 80178c4:	4603      	mov	r3, r0
 80178c6:	2202      	movs	r2, #2
 80178c8:	4621      	mov	r1, r4
 80178ca:	2004      	movs	r0, #4
 80178cc:	f000 fcf8 	bl	80182c0 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80178d0:	9003      	str	r0, [sp, #12]
 80178d2:	b320      	cbz	r0, 801791e <ip4_frag+0xfa>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80178d4:	4628      	mov	r0, r5
 80178d6:	f000 ff09 	bl	80186ec <pbuf_ref>
      pcr->original = p;
 80178da:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80178dc:	4b4b      	ldr	r3, [pc, #300]	; (8017a0c <ip4_frag+0x1e8>)
 80178de:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80178e0:	9903      	ldr	r1, [sp, #12]
 80178e2:	9804      	ldr	r0, [sp, #16]
 80178e4:	f000 ff1e 	bl	8018724 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80178e8:	1b36      	subs	r6, r6, r4
 80178ea:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 80178ec:	b116      	cbz	r6, 80178f4 <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 80178ee:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 80178f0:	f04f 0800 	mov.w	r8, #0
    while (left_to_copy) {
 80178f4:	b1e6      	cbz	r6, 8017930 <ip4_frag+0x10c>
      u16_t plen = p->len - poff;
 80178f6:	896c      	ldrh	r4, [r5, #10]
 80178f8:	eba4 0408 	sub.w	r4, r4, r8
 80178fc:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80178fe:	42b4      	cmp	r4, r6
 8017900:	bf28      	it	cs
 8017902:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 8017904:	2c00      	cmp	r4, #0
 8017906:	d1d5      	bne.n	80178b4 <ip4_frag+0x90>
        p = p->next;
 8017908:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 801790a:	46a0      	mov	r8, r4
        continue;
 801790c:	e7f2      	b.n	80178f4 <ip4_frag+0xd0>
        pbuf_free(rambuf);
 801790e:	9804      	ldr	r0, [sp, #16]
 8017910:	f000 fd1c 	bl	801834c <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017914:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017918:	b00d      	add	sp, #52	; 0x34
 801791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 801791e:	4638      	mov	r0, r7
 8017920:	f7ff fd66 	bl	80173f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017924:	9804      	ldr	r0, [sp, #16]
 8017926:	f000 fd11 	bl	801834c <pbuf_free>
  return ERR_MEM;
 801792a:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 801792e:	e7f3      	b.n	8017918 <ip4_frag+0xf4>
    poff += newpbuflen;
 8017930:	44a0      	add	r8, r4
 8017932:	fa1f f888 	uxth.w	r8, r8
    last = (left <= netif->mtu - IP_HLEN);
 8017936:	9b07      	ldr	r3, [sp, #28]
 8017938:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801793a:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 801793c:	9a06      	ldr	r2, [sp, #24]
 801793e:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 8017942:	9a08      	ldr	r2, [sp, #32]
 8017944:	429a      	cmp	r2, r3
 8017946:	dd01      	ble.n	801794c <ip4_frag+0x128>
      tmp = tmp | IP_MF;
 8017948:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801794c:	f7fe fbcb 	bl	80160e6 <lwip_htons>
 8017950:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8017954:	9e05      	ldr	r6, [sp, #20]
 8017956:	f106 0014 	add.w	r0, r6, #20
 801795a:	b280      	uxth	r0, r0
 801795c:	f7fe fbc3 	bl	80160e6 <lwip_htons>
 8017960:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017964:	2300      	movs	r3, #0
 8017966:	f88b 300a 	strb.w	r3, [fp, #10]
 801796a:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 801796e:	9807      	ldr	r0, [sp, #28]
 8017970:	6943      	ldr	r3, [r0, #20]
 8017972:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017974:	9f04      	ldr	r7, [sp, #16]
 8017976:	4639      	mov	r1, r7
 8017978:	4798      	blx	r3
    pbuf_free(rambuf);
 801797a:	4638      	mov	r0, r7
 801797c:	f000 fce6 	bl	801834c <pbuf_free>
    left -= fragsize;
 8017980:	eba9 0306 	sub.w	r3, r9, r6
 8017984:	fa1f f983 	uxth.w	r9, r3
    ofo += nfb;
 8017988:	9b06      	ldr	r3, [sp, #24]
 801798a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801798c:	4413      	add	r3, r2
 801798e:	b29b      	uxth	r3, r3
 8017990:	9306      	str	r3, [sp, #24]
  while (left) {
 8017992:	f1b9 0f00 	cmp.w	r9, #0
 8017996:	d029      	beq.n	80179ec <ip4_frag+0x1c8>
    fragsize = LWIP_MIN(left, nfb * 8);
 8017998:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801799c:	00db      	lsls	r3, r3, #3
 801799e:	f8cd 9020 	str.w	r9, [sp, #32]
 80179a2:	454b      	cmp	r3, r9
 80179a4:	bfa8      	it	ge
 80179a6:	464b      	movge	r3, r9
 80179a8:	b29b      	uxth	r3, r3
 80179aa:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80179ac:	2200      	movs	r2, #0
 80179ae:	2114      	movs	r1, #20
 80179b0:	2002      	movs	r0, #2
 80179b2:	f000 fd37 	bl	8018424 <pbuf_alloc>
    if (rambuf == NULL) {
 80179b6:	9004      	str	r0, [sp, #16]
 80179b8:	b1d0      	cbz	r0, 80179f0 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80179ba:	896b      	ldrh	r3, [r5, #10]
 80179bc:	2b13      	cmp	r3, #19
 80179be:	f67f af71 	bls.w	80178a4 <ip4_frag+0x80>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80179c2:	9f04      	ldr	r7, [sp, #16]
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	f8da 2000 	ldr.w	r2, [sl]
 80179ca:	f8da 6004 	ldr.w	r6, [sl, #4]
 80179ce:	f8da 0008 	ldr.w	r0, [sl, #8]
 80179d2:	f8da 100c 	ldr.w	r1, [sl, #12]
 80179d6:	601a      	str	r2, [r3, #0]
 80179d8:	605e      	str	r6, [r3, #4]
 80179da:	6098      	str	r0, [r3, #8]
 80179dc:	60d9      	str	r1, [r3, #12]
 80179de:	f8da 2010 	ldr.w	r2, [sl, #16]
 80179e2:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80179e4:	f8d7 b004 	ldr.w	fp, [r7, #4]
    left_to_copy = fragsize;
 80179e8:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 80179ea:	e783      	b.n	80178f4 <ip4_frag+0xd0>
  return ERR_OK;
 80179ec:	2000      	movs	r0, #0
 80179ee:	e793      	b.n	8017918 <ip4_frag+0xf4>
  return ERR_MEM;
 80179f0:	f04f 30ff 	mov.w	r0, #4294967295
 80179f4:	e790      	b.n	8017918 <ip4_frag+0xf4>
 80179f6:	bf00      	nop
 80179f8:	08021734 	.word	0x08021734
 80179fc:	08021644 	.word	0x08021644
 8017a00:	0801e950 	.word	0x0801e950
 8017a04:	0802166c 	.word	0x0802166c
 8017a08:	08021688 	.word	0x08021688
 8017a0c:	0801741d 	.word	0x0801741d

08017a10 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017a10:	b510      	push	{r4, lr}
 8017a12:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017a14:	4b2d      	ldr	r3, [pc, #180]	; (8017acc <plug_holes+0xbc>)
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	4283      	cmp	r3, r0
 8017a1a:	d831      	bhi.n	8017a80 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017a1c:	4b2c      	ldr	r3, [pc, #176]	; (8017ad0 <plug_holes+0xc0>)
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	429c      	cmp	r4, r3
 8017a22:	d235      	bcs.n	8017a90 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017a24:	7923      	ldrb	r3, [r4, #4]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d13a      	bne.n	8017aa0 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017a2a:	8823      	ldrh	r3, [r4, #0]
 8017a2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017a30:	d83e      	bhi.n	8017ab0 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8017a32:	4b26      	ldr	r3, [pc, #152]	; (8017acc <plug_holes+0xbc>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	8821      	ldrh	r1, [r4, #0]
 8017a38:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8017a3a:	4294      	cmp	r4, r2
 8017a3c:	d00f      	beq.n	8017a5e <plug_holes+0x4e>
 8017a3e:	7910      	ldrb	r0, [r2, #4]
 8017a40:	b968      	cbnz	r0, 8017a5e <plug_holes+0x4e>
 8017a42:	4823      	ldr	r0, [pc, #140]	; (8017ad0 <plug_holes+0xc0>)
 8017a44:	6800      	ldr	r0, [r0, #0]
 8017a46:	4282      	cmp	r2, r0
 8017a48:	d009      	beq.n	8017a5e <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8017a4a:	4822      	ldr	r0, [pc, #136]	; (8017ad4 <plug_holes+0xc4>)
 8017a4c:	6800      	ldr	r0, [r0, #0]
 8017a4e:	4282      	cmp	r2, r0
 8017a50:	d036      	beq.n	8017ac0 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 8017a52:	5a5a      	ldrh	r2, [r3, r1]
 8017a54:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8017a56:	5a5a      	ldrh	r2, [r3, r1]
 8017a58:	441a      	add	r2, r3
 8017a5a:	1ae1      	subs	r1, r4, r3
 8017a5c:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8017a5e:	8861      	ldrh	r1, [r4, #2]
 8017a60:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8017a62:	4294      	cmp	r4, r2
 8017a64:	d00b      	beq.n	8017a7e <plug_holes+0x6e>
 8017a66:	7910      	ldrb	r0, [r2, #4]
 8017a68:	b948      	cbnz	r0, 8017a7e <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8017a6a:	481a      	ldr	r0, [pc, #104]	; (8017ad4 <plug_holes+0xc4>)
 8017a6c:	6800      	ldr	r0, [r0, #0]
 8017a6e:	4284      	cmp	r4, r0
 8017a70:	d029      	beq.n	8017ac6 <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 8017a72:	8820      	ldrh	r0, [r4, #0]
 8017a74:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8017a76:	8821      	ldrh	r1, [r4, #0]
 8017a78:	4419      	add	r1, r3
 8017a7a:	1ad3      	subs	r3, r2, r3
 8017a7c:	804b      	strh	r3, [r1, #2]
 8017a7e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017a80:	4b15      	ldr	r3, [pc, #84]	; (8017ad8 <plug_holes+0xc8>)
 8017a82:	f240 125d 	movw	r2, #349	; 0x15d
 8017a86:	4915      	ldr	r1, [pc, #84]	; (8017adc <plug_holes+0xcc>)
 8017a88:	4815      	ldr	r0, [pc, #84]	; (8017ae0 <plug_holes+0xd0>)
 8017a8a:	f006 fa2c 	bl	801dee6 <iprintf>
 8017a8e:	e7c5      	b.n	8017a1c <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017a90:	4b11      	ldr	r3, [pc, #68]	; (8017ad8 <plug_holes+0xc8>)
 8017a92:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8017a96:	4913      	ldr	r1, [pc, #76]	; (8017ae4 <plug_holes+0xd4>)
 8017a98:	4811      	ldr	r0, [pc, #68]	; (8017ae0 <plug_holes+0xd0>)
 8017a9a:	f006 fa24 	bl	801dee6 <iprintf>
 8017a9e:	e7c1      	b.n	8017a24 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017aa0:	4b0d      	ldr	r3, [pc, #52]	; (8017ad8 <plug_holes+0xc8>)
 8017aa2:	f240 125f 	movw	r2, #351	; 0x15f
 8017aa6:	4910      	ldr	r1, [pc, #64]	; (8017ae8 <plug_holes+0xd8>)
 8017aa8:	480d      	ldr	r0, [pc, #52]	; (8017ae0 <plug_holes+0xd0>)
 8017aaa:	f006 fa1c 	bl	801dee6 <iprintf>
 8017aae:	e7bc      	b.n	8017a2a <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017ab0:	4b09      	ldr	r3, [pc, #36]	; (8017ad8 <plug_holes+0xc8>)
 8017ab2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8017ab6:	490d      	ldr	r1, [pc, #52]	; (8017aec <plug_holes+0xdc>)
 8017ab8:	4809      	ldr	r0, [pc, #36]	; (8017ae0 <plug_holes+0xd0>)
 8017aba:	f006 fa14 	bl	801dee6 <iprintf>
 8017abe:	e7b8      	b.n	8017a32 <plug_holes+0x22>
      lfree = mem;
 8017ac0:	4a04      	ldr	r2, [pc, #16]	; (8017ad4 <plug_holes+0xc4>)
 8017ac2:	6014      	str	r4, [r2, #0]
 8017ac4:	e7c5      	b.n	8017a52 <plug_holes+0x42>
      lfree = pmem;
 8017ac6:	4803      	ldr	r0, [pc, #12]	; (8017ad4 <plug_holes+0xc4>)
 8017ac8:	6002      	str	r2, [r0, #0]
 8017aca:	e7d2      	b.n	8017a72 <plug_holes+0x62>
 8017acc:	20004080 	.word	0x20004080
 8017ad0:	20004084 	.word	0x20004084
 8017ad4:	20004078 	.word	0x20004078
 8017ad8:	08021938 	.word	0x08021938
 8017adc:	08021968 	.word	0x08021968
 8017ae0:	0801e950 	.word	0x0801e950
 8017ae4:	08021980 	.word	0x08021980
 8017ae8:	0802199c 	.word	0x0802199c
 8017aec:	080219b8 	.word	0x080219b8

08017af0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8017af0:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8017af2:	4b11      	ldr	r3, [pc, #68]	; (8017b38 <mem_init+0x48>)
 8017af4:	f023 0303 	bic.w	r3, r3, #3
 8017af8:	4a10      	ldr	r2, [pc, #64]	; (8017b3c <mem_init+0x4c>)
 8017afa:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8017afc:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8017b00:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8017b02:	2200      	movs	r2, #0
 8017b04:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8017b06:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8017b08:	185a      	adds	r2, r3, r1
 8017b0a:	480d      	ldr	r0, [pc, #52]	; (8017b40 <mem_init+0x50>)
 8017b0c:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8017b0e:	2001      	movs	r0, #1
 8017b10:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017b12:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8017b16:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8017b18:	4a0a      	ldr	r2, [pc, #40]	; (8017b44 <mem_init+0x54>)
 8017b1a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8017b1c:	480a      	ldr	r0, [pc, #40]	; (8017b48 <mem_init+0x58>)
 8017b1e:	f004 ff4b 	bl	801c9b8 <sys_mutex_new>
 8017b22:	b900      	cbnz	r0, 8017b26 <mem_init+0x36>
 8017b24:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8017b26:	4b09      	ldr	r3, [pc, #36]	; (8017b4c <mem_init+0x5c>)
 8017b28:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8017b2c:	4908      	ldr	r1, [pc, #32]	; (8017b50 <mem_init+0x60>)
 8017b2e:	4809      	ldr	r0, [pc, #36]	; (8017b54 <mem_init+0x64>)
 8017b30:	f006 f9d9 	bl	801dee6 <iprintf>
  }
}
 8017b34:	e7f6      	b.n	8017b24 <mem_init+0x34>
 8017b36:	bf00      	nop
 8017b38:	200044db 	.word	0x200044db
 8017b3c:	20004080 	.word	0x20004080
 8017b40:	20004084 	.word	0x20004084
 8017b44:	20004078 	.word	0x20004078
 8017b48:	2000407c 	.word	0x2000407c
 8017b4c:	08021938 	.word	0x08021938
 8017b50:	08021844 	.word	0x08021844
 8017b54:	0801e950 	.word	0x0801e950

08017b58 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017b58:	2800      	cmp	r0, #0
 8017b5a:	d048      	beq.n	8017bee <mem_free+0x96>
{
 8017b5c:	b538      	push	{r3, r4, r5, lr}
 8017b5e:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8017b60:	f010 0f03 	tst.w	r0, #3
 8017b64:	d11b      	bne.n	8017b9e <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017b66:	4b22      	ldr	r3, [pc, #136]	; (8017bf0 <mem_free+0x98>)
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	429c      	cmp	r4, r3
 8017b6c:	d303      	bcc.n	8017b76 <mem_free+0x1e>
 8017b6e:	4b21      	ldr	r3, [pc, #132]	; (8017bf4 <mem_free+0x9c>)
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	429c      	cmp	r4, r3
 8017b74:	d306      	bcc.n	8017b84 <mem_free+0x2c>
 8017b76:	4b20      	ldr	r3, [pc, #128]	; (8017bf8 <mem_free+0xa0>)
 8017b78:	f240 12af 	movw	r2, #431	; 0x1af
 8017b7c:	491f      	ldr	r1, [pc, #124]	; (8017bfc <mem_free+0xa4>)
 8017b7e:	4820      	ldr	r0, [pc, #128]	; (8017c00 <mem_free+0xa8>)
 8017b80:	f006 f9b1 	bl	801dee6 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017b84:	4b1a      	ldr	r3, [pc, #104]	; (8017bf0 <mem_free+0x98>)
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	429c      	cmp	r4, r3
 8017b8a:	d303      	bcc.n	8017b94 <mem_free+0x3c>
 8017b8c:	4b19      	ldr	r3, [pc, #100]	; (8017bf4 <mem_free+0x9c>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	429c      	cmp	r4, r3
 8017b92:	d30c      	bcc.n	8017bae <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8017b94:	f004 ff40 	bl	801ca18 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8017b98:	f004 ff4a 	bl	801ca30 <sys_arch_unprotect>
    return;
 8017b9c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8017b9e:	4b16      	ldr	r3, [pc, #88]	; (8017bf8 <mem_free+0xa0>)
 8017ba0:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8017ba4:	4917      	ldr	r1, [pc, #92]	; (8017c04 <mem_free+0xac>)
 8017ba6:	4816      	ldr	r0, [pc, #88]	; (8017c00 <mem_free+0xa8>)
 8017ba8:	f006 f99d 	bl	801dee6 <iprintf>
 8017bac:	e7db      	b.n	8017b66 <mem_free+0xe>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017bae:	4816      	ldr	r0, [pc, #88]	; (8017c08 <mem_free+0xb0>)
 8017bb0:	f004 ff13 	bl	801c9da <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8017bb4:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8017bb8:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8017bbc:	b17b      	cbz	r3, 8017bde <mem_free+0x86>
  /* ... and is now unused. */
  mem->used = 0;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8017bc4:	4b11      	ldr	r3, [pc, #68]	; (8017c0c <mem_free+0xb4>)
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	429d      	cmp	r5, r3
 8017bca:	d201      	bcs.n	8017bd0 <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8017bcc:	4b0f      	ldr	r3, [pc, #60]	; (8017c0c <mem_free+0xb4>)
 8017bce:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017bd0:	4628      	mov	r0, r5
 8017bd2:	f7ff ff1d 	bl	8017a10 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017bd6:	480c      	ldr	r0, [pc, #48]	; (8017c08 <mem_free+0xb0>)
 8017bd8:	f004 ff06 	bl	801c9e8 <sys_mutex_unlock>
 8017bdc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8017bde:	4b06      	ldr	r3, [pc, #24]	; (8017bf8 <mem_free+0xa0>)
 8017be0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8017be4:	490a      	ldr	r1, [pc, #40]	; (8017c10 <mem_free+0xb8>)
 8017be6:	4806      	ldr	r0, [pc, #24]	; (8017c00 <mem_free+0xa8>)
 8017be8:	f006 f97d 	bl	801dee6 <iprintf>
 8017bec:	e7e7      	b.n	8017bbe <mem_free+0x66>
 8017bee:	4770      	bx	lr
 8017bf0:	20004080 	.word	0x20004080
 8017bf4:	20004084 	.word	0x20004084
 8017bf8:	08021938 	.word	0x08021938
 8017bfc:	08021818 	.word	0x08021818
 8017c00:	0801e950 	.word	0x0801e950
 8017c04:	080217f4 	.word	0x080217f4
 8017c08:	2000407c 	.word	0x2000407c
 8017c0c:	20004078 	.word	0x20004078
 8017c10:	08021830 	.word	0x08021830

08017c14 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8017c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c16:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8017c18:	1ccc      	adds	r4, r1, #3
 8017c1a:	b2a4      	uxth	r4, r4
 8017c1c:	f024 0403 	bic.w	r4, r4, #3
 8017c20:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8017c22:	2c0b      	cmp	r4, #11
 8017c24:	d800      	bhi.n	8017c28 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8017c26:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8017c28:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8017c2c:	d879      	bhi.n	8017d22 <mem_trim+0x10e>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017c2e:	4b3f      	ldr	r3, [pc, #252]	; (8017d2c <mem_trim+0x118>)
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	42ab      	cmp	r3, r5
 8017c34:	d803      	bhi.n	8017c3e <mem_trim+0x2a>
 8017c36:	4b3e      	ldr	r3, [pc, #248]	; (8017d30 <mem_trim+0x11c>)
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	429d      	cmp	r5, r3
 8017c3c:	d306      	bcc.n	8017c4c <mem_trim+0x38>
 8017c3e:	4b3d      	ldr	r3, [pc, #244]	; (8017d34 <mem_trim+0x120>)
 8017c40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017c44:	493c      	ldr	r1, [pc, #240]	; (8017d38 <mem_trim+0x124>)
 8017c46:	483d      	ldr	r0, [pc, #244]	; (8017d3c <mem_trim+0x128>)
 8017c48:	f006 f94d 	bl	801dee6 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017c4c:	4b37      	ldr	r3, [pc, #220]	; (8017d2c <mem_trim+0x118>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	429d      	cmp	r5, r3
 8017c52:	d336      	bcc.n	8017cc2 <mem_trim+0xae>
 8017c54:	4a36      	ldr	r2, [pc, #216]	; (8017d30 <mem_trim+0x11c>)
 8017c56:	6812      	ldr	r2, [r2, #0]
 8017c58:	4295      	cmp	r5, r2
 8017c5a:	d232      	bcs.n	8017cc2 <mem_trim+0xae>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8017c5c:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8017c60:	1aff      	subs	r7, r7, r3
 8017c62:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8017c64:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8017c68:	1bf6      	subs	r6, r6, r7
 8017c6a:	b2b6      	uxth	r6, r6
 8017c6c:	3e08      	subs	r6, #8
 8017c6e:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017c70:	42b4      	cmp	r4, r6
 8017c72:	d82c      	bhi.n	8017cce <mem_trim+0xba>
  if (newsize > size) {
 8017c74:	42b4      	cmp	r4, r6
 8017c76:	d856      	bhi.n	8017d26 <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8017c78:	d027      	beq.n	8017cca <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017c7a:	4831      	ldr	r0, [pc, #196]	; (8017d40 <mem_trim+0x12c>)
 8017c7c:	f004 fead 	bl	801c9da <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8017c80:	4b2a      	ldr	r3, [pc, #168]	; (8017d2c <mem_trim+0x118>)
 8017c82:	681a      	ldr	r2, [r3, #0]
 8017c84:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8017c88:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8017c8a:	7908      	ldrb	r0, [r1, #4]
 8017c8c:	bb58      	cbnz	r0, 8017ce6 <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8017c8e:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8017c90:	19e3      	adds	r3, r4, r7
 8017c92:	b29b      	uxth	r3, r3
 8017c94:	3308      	adds	r3, #8
 8017c96:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8017c98:	4c2a      	ldr	r4, [pc, #168]	; (8017d44 <mem_trim+0x130>)
 8017c9a:	6824      	ldr	r4, [r4, #0]
 8017c9c:	42a1      	cmp	r1, r4
 8017c9e:	d01e      	beq.n	8017cde <mem_trim+0xca>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8017ca0:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 8017ca2:	2400      	movs	r4, #0
 8017ca4:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017ca6:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 8017ca8:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017caa:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017cae:	5ad1      	ldrh	r1, [r2, r3]
 8017cb0:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8017cb4:	d001      	beq.n	8017cba <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017cb6:	440a      	add	r2, r1
 8017cb8:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017cba:	4821      	ldr	r0, [pc, #132]	; (8017d40 <mem_trim+0x12c>)
 8017cbc:	f004 fe94 	bl	801c9e8 <sys_mutex_unlock>
  return rmem;
 8017cc0:	e003      	b.n	8017cca <mem_trim+0xb6>
    SYS_ARCH_PROTECT(lev);
 8017cc2:	f004 fea9 	bl	801ca18 <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 8017cc6:	f004 feb3 	bl	801ca30 <sys_arch_unprotect>
}
 8017cca:	4628      	mov	r0, r5
 8017ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017cce:	4b19      	ldr	r3, [pc, #100]	; (8017d34 <mem_trim+0x120>)
 8017cd0:	f240 2206 	movw	r2, #518	; 0x206
 8017cd4:	491c      	ldr	r1, [pc, #112]	; (8017d48 <mem_trim+0x134>)
 8017cd6:	4819      	ldr	r0, [pc, #100]	; (8017d3c <mem_trim+0x128>)
 8017cd8:	f006 f905 	bl	801dee6 <iprintf>
 8017cdc:	e7ca      	b.n	8017c74 <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8017cde:	18d1      	adds	r1, r2, r3
 8017ce0:	4c18      	ldr	r4, [pc, #96]	; (8017d44 <mem_trim+0x130>)
 8017ce2:	6021      	str	r1, [r4, #0]
 8017ce4:	e7dc      	b.n	8017ca0 <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017ce6:	f104 0314 	add.w	r3, r4, #20
 8017cea:	42b3      	cmp	r3, r6
 8017cec:	d8e5      	bhi.n	8017cba <mem_trim+0xa6>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8017cee:	19e3      	adds	r3, r4, r7
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	3308      	adds	r3, #8
 8017cf4:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8017cf6:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8017cf8:	4812      	ldr	r0, [pc, #72]	; (8017d44 <mem_trim+0x130>)
 8017cfa:	6800      	ldr	r0, [r0, #0]
 8017cfc:	4281      	cmp	r1, r0
 8017cfe:	d201      	bcs.n	8017d04 <mem_trim+0xf0>
      lfree = mem2;
 8017d00:	4810      	ldr	r0, [pc, #64]	; (8017d44 <mem_trim+0x130>)
 8017d02:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8017d04:	2000      	movs	r0, #0
 8017d06:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8017d08:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8017d0c:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8017d0e:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8017d10:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017d14:	5ad1      	ldrh	r1, [r2, r3]
 8017d16:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8017d1a:	d0ce      	beq.n	8017cba <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017d1c:	440a      	add	r2, r1
 8017d1e:	8053      	strh	r3, [r2, #2]
 8017d20:	e7cb      	b.n	8017cba <mem_trim+0xa6>
    return NULL;
 8017d22:	2500      	movs	r5, #0
 8017d24:	e7d1      	b.n	8017cca <mem_trim+0xb6>
    return NULL;
 8017d26:	2500      	movs	r5, #0
 8017d28:	e7cf      	b.n	8017cca <mem_trim+0xb6>
 8017d2a:	bf00      	nop
 8017d2c:	20004080 	.word	0x20004080
 8017d30:	20004084 	.word	0x20004084
 8017d34:	08021938 	.word	0x08021938
 8017d38:	08021900 	.word	0x08021900
 8017d3c:	0801e950 	.word	0x0801e950
 8017d40:	2000407c 	.word	0x2000407c
 8017d44:	20004078 	.word	0x20004078
 8017d48:	08021918 	.word	0x08021918

08017d4c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8017d4c:	2800      	cmp	r0, #0
 8017d4e:	f000 808e 	beq.w	8017e6e <mem_malloc+0x122>
{
 8017d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d54:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8017d56:	3503      	adds	r5, #3
 8017d58:	b2ad      	uxth	r5, r5
 8017d5a:	f025 0503 	bic.w	r5, r5, #3
 8017d5e:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 8017d60:	2d0b      	cmp	r5, #11
 8017d62:	d800      	bhi.n	8017d66 <mem_malloc+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8017d64:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 8017d66:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8017d6a:	f200 8082 	bhi.w	8017e72 <mem_malloc+0x126>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017d6e:	4842      	ldr	r0, [pc, #264]	; (8017e78 <mem_malloc+0x12c>)
 8017d70:	f004 fe33 	bl	801c9da <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8017d74:	4b41      	ldr	r3, [pc, #260]	; (8017e7c <mem_malloc+0x130>)
 8017d76:	6818      	ldr	r0, [r3, #0]
 8017d78:	4b41      	ldr	r3, [pc, #260]	; (8017e80 <mem_malloc+0x134>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	1a1b      	subs	r3, r3, r0
 8017d7e:	b29b      	uxth	r3, r3
 8017d80:	e049      	b.n	8017e16 <mem_malloc+0xca>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017d82:	2301      	movs	r3, #1
 8017d84:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017d86:	4b3e      	ldr	r3, [pc, #248]	; (8017e80 <mem_malloc+0x134>)
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	429c      	cmp	r4, r3
 8017d8c:	d014      	beq.n	8017db8 <mem_malloc+0x6c>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017d8e:	483a      	ldr	r0, [pc, #232]	; (8017e78 <mem_malloc+0x12c>)
 8017d90:	f004 fe2a 	bl	801c9e8 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017d94:	4426      	add	r6, r4
 8017d96:	3608      	adds	r6, #8
 8017d98:	4b3a      	ldr	r3, [pc, #232]	; (8017e84 <mem_malloc+0x138>)
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	429e      	cmp	r6, r3
 8017d9e:	d821      	bhi.n	8017de4 <mem_malloc+0x98>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017da0:	f014 0503 	ands.w	r5, r4, #3
 8017da4:	d126      	bne.n	8017df4 <mem_malloc+0xa8>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017da6:	2d00      	cmp	r5, #0
 8017da8:	d12c      	bne.n	8017e04 <mem_malloc+0xb8>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8017daa:	f104 0008 	add.w	r0, r4, #8
 8017dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 8017db0:	4a32      	ldr	r2, [pc, #200]	; (8017e7c <mem_malloc+0x130>)
 8017db2:	6812      	ldr	r2, [r2, #0]
 8017db4:	881b      	ldrh	r3, [r3, #0]
 8017db6:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 8017db8:	791a      	ldrb	r2, [r3, #4]
 8017dba:	b11a      	cbz	r2, 8017dc4 <mem_malloc+0x78>
 8017dbc:	4931      	ldr	r1, [pc, #196]	; (8017e84 <mem_malloc+0x138>)
 8017dbe:	6809      	ldr	r1, [r1, #0]
 8017dc0:	428b      	cmp	r3, r1
 8017dc2:	d1f5      	bne.n	8017db0 <mem_malloc+0x64>
          lfree = cur;
 8017dc4:	492e      	ldr	r1, [pc, #184]	; (8017e80 <mem_malloc+0x134>)
 8017dc6:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017dc8:	492e      	ldr	r1, [pc, #184]	; (8017e84 <mem_malloc+0x138>)
 8017dca:	6809      	ldr	r1, [r1, #0]
 8017dcc:	428b      	cmp	r3, r1
 8017dce:	d0de      	beq.n	8017d8e <mem_malloc+0x42>
 8017dd0:	2a00      	cmp	r2, #0
 8017dd2:	d0dc      	beq.n	8017d8e <mem_malloc+0x42>
 8017dd4:	4b2c      	ldr	r3, [pc, #176]	; (8017e88 <mem_malloc+0x13c>)
 8017dd6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017dda:	492c      	ldr	r1, [pc, #176]	; (8017e8c <mem_malloc+0x140>)
 8017ddc:	482c      	ldr	r0, [pc, #176]	; (8017e90 <mem_malloc+0x144>)
 8017dde:	f006 f882 	bl	801dee6 <iprintf>
 8017de2:	e7d4      	b.n	8017d8e <mem_malloc+0x42>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017de4:	4b28      	ldr	r3, [pc, #160]	; (8017e88 <mem_malloc+0x13c>)
 8017de6:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8017dea:	492a      	ldr	r1, [pc, #168]	; (8017e94 <mem_malloc+0x148>)
 8017dec:	4828      	ldr	r0, [pc, #160]	; (8017e90 <mem_malloc+0x144>)
 8017dee:	f006 f87a 	bl	801dee6 <iprintf>
 8017df2:	e7d5      	b.n	8017da0 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017df4:	4b24      	ldr	r3, [pc, #144]	; (8017e88 <mem_malloc+0x13c>)
 8017df6:	f240 22d6 	movw	r2, #726	; 0x2d6
 8017dfa:	4927      	ldr	r1, [pc, #156]	; (8017e98 <mem_malloc+0x14c>)
 8017dfc:	4824      	ldr	r0, [pc, #144]	; (8017e90 <mem_malloc+0x144>)
 8017dfe:	f006 f872 	bl	801dee6 <iprintf>
 8017e02:	e7d0      	b.n	8017da6 <mem_malloc+0x5a>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017e04:	4b20      	ldr	r3, [pc, #128]	; (8017e88 <mem_malloc+0x13c>)
 8017e06:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8017e0a:	4924      	ldr	r1, [pc, #144]	; (8017e9c <mem_malloc+0x150>)
 8017e0c:	4820      	ldr	r0, [pc, #128]	; (8017e90 <mem_malloc+0x144>)
 8017e0e:	f006 f86a 	bl	801dee6 <iprintf>
 8017e12:	e7ca      	b.n	8017daa <mem_malloc+0x5e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8017e14:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8017e16:	461f      	mov	r7, r3
 8017e18:	462e      	mov	r6, r5
 8017e1a:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 8017e1e:	428b      	cmp	r3, r1
 8017e20:	d220      	bcs.n	8017e64 <mem_malloc+0x118>
      mem = (struct mem *)(void *)&ram[ptr];
 8017e22:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 8017e24:	7921      	ldrb	r1, [r4, #4]
 8017e26:	2900      	cmp	r1, #0
 8017e28:	d1f4      	bne.n	8017e14 <mem_malloc+0xc8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017e2a:	5ac2      	ldrh	r2, [r0, r3]
 8017e2c:	1bd2      	subs	r2, r2, r7
 8017e2e:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 8017e30:	4296      	cmp	r6, r2
 8017e32:	d8ef      	bhi.n	8017e14 <mem_malloc+0xc8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017e34:	f106 0114 	add.w	r1, r6, #20
 8017e38:	428a      	cmp	r2, r1
 8017e3a:	d3a2      	bcc.n	8017d82 <mem_malloc+0x36>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8017e3c:	18ea      	adds	r2, r5, r3
 8017e3e:	b292      	uxth	r2, r2
 8017e40:	3208      	adds	r2, #8
 8017e42:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8017e44:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 8017e46:	2500      	movs	r5, #0
 8017e48:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 8017e4a:	8825      	ldrh	r5, [r4, #0]
 8017e4c:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 8017e4e:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8017e50:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8017e52:	2301      	movs	r3, #1
 8017e54:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017e56:	5a83      	ldrh	r3, [r0, r2]
 8017e58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017e5c:	d093      	beq.n	8017d86 <mem_malloc+0x3a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017e5e:	4418      	add	r0, r3
 8017e60:	8042      	strh	r2, [r0, #2]
 8017e62:	e790      	b.n	8017d86 <mem_malloc+0x3a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017e64:	4804      	ldr	r0, [pc, #16]	; (8017e78 <mem_malloc+0x12c>)
 8017e66:	f004 fdbf 	bl	801c9e8 <sys_mutex_unlock>
  return NULL;
 8017e6a:	2000      	movs	r0, #0
 8017e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8017e6e:	2000      	movs	r0, #0
 8017e70:	4770      	bx	lr
    return NULL;
 8017e72:	2000      	movs	r0, #0
}
 8017e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e76:	bf00      	nop
 8017e78:	2000407c 	.word	0x2000407c
 8017e7c:	20004080 	.word	0x20004080
 8017e80:	20004078 	.word	0x20004078
 8017e84:	20004084 	.word	0x20004084
 8017e88:	08021938 	.word	0x08021938
 8017e8c:	08021860 	.word	0x08021860
 8017e90:	0801e950 	.word	0x0801e950
 8017e94:	0802187c 	.word	0x0802187c
 8017e98:	080218ac 	.word	0x080218ac
 8017e9c:	080218dc 	.word	0x080218dc

08017ea0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8017ea0:	b538      	push	{r3, r4, r5, lr}
 8017ea2:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8017ea4:	f004 fdb8 	bl	801ca18 <sys_arch_protect>
 8017ea8:	4605      	mov	r5, r0

  memp = *desc->tab;
 8017eaa:	68a3      	ldr	r3, [r4, #8]
 8017eac:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8017eae:	b18c      	cbz	r4, 8017ed4 <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8017eb0:	6822      	ldr	r2, [r4, #0]
 8017eb2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017eb4:	f014 0f03 	tst.w	r4, #3
 8017eb8:	d104      	bne.n	8017ec4 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017eba:	4628      	mov	r0, r5
 8017ebc:	f004 fdb8 	bl	801ca30 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017ec4:	4b05      	ldr	r3, [pc, #20]	; (8017edc <do_memp_malloc_pool+0x3c>)
 8017ec6:	f240 1249 	movw	r2, #329	; 0x149
 8017eca:	4905      	ldr	r1, [pc, #20]	; (8017ee0 <do_memp_malloc_pool+0x40>)
 8017ecc:	4805      	ldr	r0, [pc, #20]	; (8017ee4 <do_memp_malloc_pool+0x44>)
 8017ece:	f006 f80a 	bl	801dee6 <iprintf>
 8017ed2:	e7f2      	b.n	8017eba <do_memp_malloc_pool+0x1a>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8017ed4:	f004 fdac 	bl	801ca30 <sys_arch_unprotect>
  return NULL;
 8017ed8:	2000      	movs	r0, #0
}
 8017eda:	bd38      	pop	{r3, r4, r5, pc}
 8017edc:	08021a04 	.word	0x08021a04
 8017ee0:	08021a34 	.word	0x08021a34
 8017ee4:	0801e950 	.word	0x0801e950

08017ee8 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8017ee8:	b538      	push	{r3, r4, r5, lr}
 8017eea:	4605      	mov	r5, r0
 8017eec:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8017eee:	f011 0f03 	tst.w	r1, #3
 8017ef2:	d109      	bne.n	8017f08 <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8017ef4:	f004 fd90 	bl	801ca18 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8017ef8:	68ab      	ldr	r3, [r5, #8]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8017efe:	68ab      	ldr	r3, [r5, #8]
 8017f00:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8017f02:	f004 fd95 	bl	801ca30 <sys_arch_unprotect>
 8017f06:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8017f08:	4b03      	ldr	r3, [pc, #12]	; (8017f18 <do_memp_free_pool+0x30>)
 8017f0a:	f240 129d 	movw	r2, #413	; 0x19d
 8017f0e:	4903      	ldr	r1, [pc, #12]	; (8017f1c <do_memp_free_pool+0x34>)
 8017f10:	4803      	ldr	r0, [pc, #12]	; (8017f20 <do_memp_free_pool+0x38>)
 8017f12:	f005 ffe8 	bl	801dee6 <iprintf>
 8017f16:	e7ed      	b.n	8017ef4 <do_memp_free_pool+0xc>
 8017f18:	08021a04 	.word	0x08021a04
 8017f1c:	080219e4 	.word	0x080219e4
 8017f20:	0801e950 	.word	0x0801e950

08017f24 <memp_init_pool>:
  *desc->tab = NULL;
 8017f24:	6883      	ldr	r3, [r0, #8]
 8017f26:	2200      	movs	r2, #0
 8017f28:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8017f2a:	6843      	ldr	r3, [r0, #4]
 8017f2c:	3303      	adds	r3, #3
 8017f2e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8017f32:	e007      	b.n	8017f44 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8017f34:	6881      	ldr	r1, [r0, #8]
 8017f36:	6809      	ldr	r1, [r1, #0]
 8017f38:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8017f3a:	6881      	ldr	r1, [r0, #8]
 8017f3c:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8017f3e:	8801      	ldrh	r1, [r0, #0]
 8017f40:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8017f42:	3201      	adds	r2, #1
 8017f44:	8841      	ldrh	r1, [r0, #2]
 8017f46:	428a      	cmp	r2, r1
 8017f48:	dbf4      	blt.n	8017f34 <memp_init_pool+0x10>
}
 8017f4a:	4770      	bx	lr

08017f4c <memp_init>:
{
 8017f4c:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017f4e:	2400      	movs	r4, #0
 8017f50:	e006      	b.n	8017f60 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 8017f52:	4b05      	ldr	r3, [pc, #20]	; (8017f68 <memp_init+0x1c>)
 8017f54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017f58:	f7ff ffe4 	bl	8017f24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017f5c:	3401      	adds	r4, #1
 8017f5e:	b2a4      	uxth	r4, r4
 8017f60:	2c0c      	cmp	r4, #12
 8017f62:	d9f6      	bls.n	8017f52 <memp_init+0x6>
}
 8017f64:	bd10      	pop	{r4, pc}
 8017f66:	bf00      	nop
 8017f68:	08021b30 	.word	0x08021b30

08017f6c <memp_malloc>:
{
 8017f6c:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017f6e:	280c      	cmp	r0, #12
 8017f70:	d805      	bhi.n	8017f7e <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8017f72:	4b07      	ldr	r3, [pc, #28]	; (8017f90 <memp_malloc+0x24>)
 8017f74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017f78:	f7ff ff92 	bl	8017ea0 <do_memp_malloc_pool>
}
 8017f7c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017f7e:	4b05      	ldr	r3, [pc, #20]	; (8017f94 <memp_malloc+0x28>)
 8017f80:	f240 1287 	movw	r2, #391	; 0x187
 8017f84:	4904      	ldr	r1, [pc, #16]	; (8017f98 <memp_malloc+0x2c>)
 8017f86:	4805      	ldr	r0, [pc, #20]	; (8017f9c <memp_malloc+0x30>)
 8017f88:	f005 ffad 	bl	801dee6 <iprintf>
 8017f8c:	2000      	movs	r0, #0
 8017f8e:	bd08      	pop	{r3, pc}
 8017f90:	08021b30 	.word	0x08021b30
 8017f94:	08021a04 	.word	0x08021a04
 8017f98:	08021b10 	.word	0x08021b10
 8017f9c:	0801e950 	.word	0x0801e950

08017fa0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8017fa0:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017fa2:	280c      	cmp	r0, #12
 8017fa4:	d806      	bhi.n	8017fb4 <memp_free+0x14>

  if (mem == NULL) {
 8017fa6:	b121      	cbz	r1, 8017fb2 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017fa8:	4b06      	ldr	r3, [pc, #24]	; (8017fc4 <memp_free+0x24>)
 8017faa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017fae:	f7ff ff9b 	bl	8017ee8 <do_memp_free_pool>
 8017fb2:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017fb4:	4b04      	ldr	r3, [pc, #16]	; (8017fc8 <memp_free+0x28>)
 8017fb6:	f240 12db 	movw	r2, #475	; 0x1db
 8017fba:	4904      	ldr	r1, [pc, #16]	; (8017fcc <memp_free+0x2c>)
 8017fbc:	4804      	ldr	r0, [pc, #16]	; (8017fd0 <memp_free+0x30>)
 8017fbe:	f005 ff92 	bl	801dee6 <iprintf>
 8017fc2:	bd08      	pop	{r3, pc}
 8017fc4:	08021b30 	.word	0x08021b30
 8017fc8:	08021a04 	.word	0x08021a04
 8017fcc:	08021af4 	.word	0x08021af4
 8017fd0:	0801e950 	.word	0x0801e950

08017fd4 <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017fd4:	f011 0f01 	tst.w	r1, #1
 8017fd8:	d00c      	beq.n	8017ff4 <netif_issue_reports+0x20>
{
 8017fda:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017fdc:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017fde:	b123      	cbz	r3, 8017fea <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8017fe0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8017fe4:	f013 0f08 	tst.w	r3, #8
 8017fe8:	d100      	bne.n	8017fec <netif_issue_reports+0x18>
 8017fea:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 8017fec:	1d01      	adds	r1, r0, #4
 8017fee:	f7fe fae5 	bl	80165bc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8017ff2:	e7fa      	b.n	8017fea <netif_issue_reports+0x16>
 8017ff4:	4770      	bx	lr

08017ff6 <netif_init>:
{
 8017ff6:	4770      	bx	lr

08017ff8 <netif_set_ipaddr>:
{
 8017ff8:	b570      	push	{r4, r5, r6, lr}
 8017ffa:	b082      	sub	sp, #8
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8017ffc:	460d      	mov	r5, r1
 8017ffe:	b1c1      	cbz	r1, 8018032 <netif_set_ipaddr+0x3a>
 8018000:	680a      	ldr	r2, [r1, #0]
 8018002:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8018004:	6842      	ldr	r2, [r0, #4]
 8018006:	9901      	ldr	r1, [sp, #4]
 8018008:	4291      	cmp	r1, r2
 801800a:	d010      	beq.n	801802e <netif_set_ipaddr+0x36>
 801800c:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801800e:	1d06      	adds	r6, r0, #4
 8018010:	a901      	add	r1, sp, #4
 8018012:	4630      	mov	r0, r6
 8018014:	f001 fc96 	bl	8019944 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8018018:	a901      	add	r1, sp, #4
 801801a:	4630      	mov	r0, r6
 801801c:	f004 fb56 	bl	801c6cc <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8018020:	b15d      	cbz	r5, 801803a <netif_set_ipaddr+0x42>
 8018022:	682b      	ldr	r3, [r5, #0]
 8018024:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8018026:	2101      	movs	r1, #1
 8018028:	4620      	mov	r0, r4
 801802a:	f7ff ffd3 	bl	8017fd4 <netif_issue_reports>
}
 801802e:	b002      	add	sp, #8
 8018030:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8018032:	4a03      	ldr	r2, [pc, #12]	; (8018040 <netif_set_ipaddr+0x48>)
 8018034:	6812      	ldr	r2, [r2, #0]
 8018036:	9201      	str	r2, [sp, #4]
 8018038:	e7e4      	b.n	8018004 <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801803a:	2300      	movs	r3, #0
 801803c:	e7f2      	b.n	8018024 <netif_set_ipaddr+0x2c>
 801803e:	bf00      	nop
 8018040:	08021640 	.word	0x08021640

08018044 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8018044:	b111      	cbz	r1, 801804c <netif_set_gw+0x8>
 8018046:	680b      	ldr	r3, [r1, #0]
 8018048:	60c3      	str	r3, [r0, #12]
 801804a:	4770      	bx	lr
 801804c:	2300      	movs	r3, #0
 801804e:	e7fb      	b.n	8018048 <netif_set_gw+0x4>

08018050 <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8018050:	b111      	cbz	r1, 8018058 <netif_set_netmask+0x8>
 8018052:	680b      	ldr	r3, [r1, #0]
 8018054:	6083      	str	r3, [r0, #8]
 8018056:	4770      	bx	lr
 8018058:	2300      	movs	r3, #0
 801805a:	e7fb      	b.n	8018054 <netif_set_netmask+0x4>

0801805c <netif_set_addr>:
{
 801805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801805e:	4604      	mov	r4, r0
 8018060:	4617      	mov	r7, r2
 8018062:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 8018064:	460d      	mov	r5, r1
 8018066:	b109      	cbz	r1, 801806c <netif_set_addr+0x10>
 8018068:	680b      	ldr	r3, [r1, #0]
 801806a:	b963      	cbnz	r3, 8018086 <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 801806c:	4629      	mov	r1, r5
 801806e:	4620      	mov	r0, r4
 8018070:	f7ff ffc2 	bl	8017ff8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8018074:	4639      	mov	r1, r7
 8018076:	4620      	mov	r0, r4
 8018078:	f7ff ffea 	bl	8018050 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801807c:	4631      	mov	r1, r6
 801807e:	4620      	mov	r0, r4
 8018080:	f7ff ffe0 	bl	8018044 <netif_set_gw>
 8018084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 8018086:	4611      	mov	r1, r2
 8018088:	f7ff ffe2 	bl	8018050 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801808c:	4631      	mov	r1, r6
 801808e:	4620      	mov	r0, r4
 8018090:	f7ff ffd8 	bl	8018044 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 8018094:	4629      	mov	r1, r5
 8018096:	4620      	mov	r0, r4
 8018098:	f7ff ffae 	bl	8017ff8 <netif_set_ipaddr>
 801809c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080180a0 <netif_add>:
{
 80180a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180a4:	4604      	mov	r4, r0
 80180a6:	460e      	mov	r6, r1
 80180a8:	4617      	mov	r7, r2
 80180aa:	4698      	mov	r8, r3
 80180ac:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 80180ae:	b315      	cbz	r5, 80180f6 <netif_add+0x56>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80180b0:	2300      	movs	r3, #0
 80180b2:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80180b4:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80180b6:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 80180b8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80180bc:	2303      	movs	r3, #3
 80180be:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80180c2:	9b06      	ldr	r3, [sp, #24]
 80180c4:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80180c6:	4a11      	ldr	r2, [pc, #68]	; (801810c <netif_add+0x6c>)
 80180c8:	7813      	ldrb	r3, [r2, #0]
 80180ca:	1c59      	adds	r1, r3, #1
 80180cc:	7011      	strb	r1, [r2, #0]
 80180ce:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 80180d2:	9b08      	ldr	r3, [sp, #32]
 80180d4:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80180d6:	4643      	mov	r3, r8
 80180d8:	463a      	mov	r2, r7
 80180da:	4631      	mov	r1, r6
 80180dc:	4620      	mov	r0, r4
 80180de:	f7ff ffbd 	bl	801805c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80180e2:	4620      	mov	r0, r4
 80180e4:	47a8      	blx	r5
 80180e6:	b968      	cbnz	r0, 8018104 <netif_add+0x64>
  netif->next = netif_list;
 80180e8:	4b09      	ldr	r3, [pc, #36]	; (8018110 <netif_add+0x70>)
 80180ea:	681a      	ldr	r2, [r3, #0]
 80180ec:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80180ee:	601c      	str	r4, [r3, #0]
  return netif;
 80180f0:	4620      	mov	r0, r4
 80180f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 80180f6:	4b07      	ldr	r3, [pc, #28]	; (8018114 <netif_add+0x74>)
 80180f8:	22fb      	movs	r2, #251	; 0xfb
 80180fa:	4907      	ldr	r1, [pc, #28]	; (8018118 <netif_add+0x78>)
 80180fc:	4807      	ldr	r0, [pc, #28]	; (801811c <netif_add+0x7c>)
 80180fe:	f005 fef2 	bl	801dee6 <iprintf>
 8018102:	e7d5      	b.n	80180b0 <netif_add+0x10>
    return NULL;
 8018104:	2000      	movs	r0, #0
}
 8018106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801810a:	bf00      	nop
 801810c:	200040bc 	.word	0x200040bc
 8018110:	20008ad8 	.word	0x20008ad8
 8018114:	08021b64 	.word	0x08021b64
 8018118:	08021b98 	.word	0x08021b98
 801811c:	0801e950 	.word	0x0801e950

08018120 <netif_set_default>:
  netif_default = netif;
 8018120:	4b01      	ldr	r3, [pc, #4]	; (8018128 <netif_set_default+0x8>)
 8018122:	6018      	str	r0, [r3, #0]
 8018124:	4770      	bx	lr
 8018126:	bf00      	nop
 8018128:	20008adc 	.word	0x20008adc

0801812c <netif_set_up>:
{
 801812c:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801812e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8018132:	f013 0f01 	tst.w	r3, #1
 8018136:	d106      	bne.n	8018146 <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8018138:	f043 0301 	orr.w	r3, r3, #1
 801813c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8018140:	f013 0f04 	tst.w	r3, #4
 8018144:	d100      	bne.n	8018148 <netif_set_up+0x1c>
 8018146:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8018148:	2103      	movs	r1, #3
 801814a:	f7ff ff43 	bl	8017fd4 <netif_issue_reports>
}
 801814e:	e7fa      	b.n	8018146 <netif_set_up+0x1a>

08018150 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8018150:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8018152:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8018156:	f013 0f01 	tst.w	r3, #1
 801815a:	d006      	beq.n	801816a <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 801815c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8018160:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018164:	f013 0f08 	tst.w	r3, #8
 8018168:	d100      	bne.n	801816c <netif_set_down+0x1c>
 801816a:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 801816c:	f7fe f9b2 	bl	80164d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8018170:	e7fb      	b.n	801816a <netif_set_down+0x1a>
	...

08018174 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8018174:	b570      	push	{r4, r5, r6, lr}
 8018176:	460c      	mov	r4, r1
 8018178:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801817a:	4605      	mov	r5, r0
 801817c:	b1c0      	cbz	r0, 80181b0 <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 801817e:	2c00      	cmp	r4, #0
 8018180:	d04e      	beq.n	8018220 <pbuf_header_impl+0xac>
 8018182:	2d00      	cmp	r5, #0
 8018184:	d04e      	beq.n	8018224 <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 8018186:	2c00      	cmp	r4, #0
 8018188:	db1a      	blt.n	80181c0 <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 801818a:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 801818c:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 801818e:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8018190:	b32b      	cbz	r3, 80181de <pbuf_header_impl+0x6a>
 8018192:	2b03      	cmp	r3, #3
 8018194:	d023      	beq.n	80181de <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8018196:	3b01      	subs	r3, #1
 8018198:	b29b      	uxth	r3, r3
 801819a:	2b01      	cmp	r3, #1
 801819c:	d837      	bhi.n	801820e <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801819e:	2c00      	cmp	r4, #0
 80181a0:	db2f      	blt.n	8018202 <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 80181a2:	2c00      	cmp	r4, #0
 80181a4:	dd40      	ble.n	8018228 <pbuf_header_impl+0xb4>
 80181a6:	2e00      	cmp	r6, #0
 80181a8:	d040      	beq.n	801822c <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80181aa:	1b09      	subs	r1, r1, r4
 80181ac:	6069      	str	r1, [r5, #4]
 80181ae:	e01c      	b.n	80181ea <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 80181b0:	4b1f      	ldr	r3, [pc, #124]	; (8018230 <pbuf_header_impl+0xbc>)
 80181b2:	f240 223f 	movw	r2, #575	; 0x23f
 80181b6:	491f      	ldr	r1, [pc, #124]	; (8018234 <pbuf_header_impl+0xc0>)
 80181b8:	481f      	ldr	r0, [pc, #124]	; (8018238 <pbuf_header_impl+0xc4>)
 80181ba:	f005 fe94 	bl	801dee6 <iprintf>
 80181be:	e7de      	b.n	801817e <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 80181c0:	b2a2      	uxth	r2, r4
 80181c2:	4252      	negs	r2, r2
 80181c4:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80181c6:	896b      	ldrh	r3, [r5, #10]
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d9df      	bls.n	801818c <pbuf_header_impl+0x18>
 80181cc:	4b18      	ldr	r3, [pc, #96]	; (8018230 <pbuf_header_impl+0xbc>)
 80181ce:	f240 2247 	movw	r2, #583	; 0x247
 80181d2:	491a      	ldr	r1, [pc, #104]	; (801823c <pbuf_header_impl+0xc8>)
 80181d4:	4818      	ldr	r0, [pc, #96]	; (8018238 <pbuf_header_impl+0xc4>)
 80181d6:	f005 fe86 	bl	801dee6 <iprintf>
 80181da:	2001      	movs	r0, #1
 80181dc:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 80181de:	1b0b      	subs	r3, r1, r4
 80181e0:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80181e2:	f105 0210 	add.w	r2, r5, #16
 80181e6:	4293      	cmp	r3, r2
 80181e8:	d308      	bcc.n	80181fc <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80181ea:	b2a4      	uxth	r4, r4
 80181ec:	896b      	ldrh	r3, [r5, #10]
 80181ee:	4423      	add	r3, r4
 80181f0:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 80181f2:	892b      	ldrh	r3, [r5, #8]
 80181f4:	441c      	add	r4, r3
 80181f6:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80181f8:	2000      	movs	r0, #0
 80181fa:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 80181fc:	6069      	str	r1, [r5, #4]
      return 1;
 80181fe:	2001      	movs	r0, #1
 8018200:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8018202:	896b      	ldrh	r3, [r5, #10]
 8018204:	429a      	cmp	r2, r3
 8018206:	d8cc      	bhi.n	80181a2 <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8018208:	1b09      	subs	r1, r1, r4
 801820a:	6069      	str	r1, [r5, #4]
 801820c:	e7ed      	b.n	80181ea <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 801820e:	4b08      	ldr	r3, [pc, #32]	; (8018230 <pbuf_header_impl+0xbc>)
 8018210:	f240 2277 	movw	r2, #631	; 0x277
 8018214:	490a      	ldr	r1, [pc, #40]	; (8018240 <pbuf_header_impl+0xcc>)
 8018216:	4808      	ldr	r0, [pc, #32]	; (8018238 <pbuf_header_impl+0xc4>)
 8018218:	f005 fe65 	bl	801dee6 <iprintf>
    return 1;
 801821c:	2001      	movs	r0, #1
 801821e:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8018220:	2000      	movs	r0, #0
 8018222:	bd70      	pop	{r4, r5, r6, pc}
 8018224:	2000      	movs	r0, #0
 8018226:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8018228:	2001      	movs	r0, #1
 801822a:	bd70      	pop	{r4, r5, r6, pc}
 801822c:	2001      	movs	r0, #1
}
 801822e:	bd70      	pop	{r4, r5, r6, pc}
 8018230:	08021e68 	.word	0x08021e68
 8018234:	0801ec44 	.word	0x0801ec44
 8018238:	0801e950 	.word	0x0801e950
 801823c:	08021e98 	.word	0x08021e98
 8018240:	08021eb8 	.word	0x08021eb8

08018244 <pbuf_pool_is_empty>:
{
 8018244:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 8018246:	f004 fbe7 	bl	801ca18 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 801824a:	4b0c      	ldr	r3, [pc, #48]	; (801827c <pbuf_pool_is_empty+0x38>)
 801824c:	781c      	ldrb	r4, [r3, #0]
 801824e:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8018250:	2201      	movs	r2, #1
 8018252:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018254:	f004 fbec 	bl	801ca30 <sys_arch_unprotect>
  if (!queued) {
 8018258:	b104      	cbz	r4, 801825c <pbuf_pool_is_empty+0x18>
 801825a:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801825c:	2200      	movs	r2, #0
 801825e:	4611      	mov	r1, r2
 8018260:	4807      	ldr	r0, [pc, #28]	; (8018280 <pbuf_pool_is_empty+0x3c>)
 8018262:	f7fd fe8f 	bl	8015f84 <tcpip_callback_with_block>
 8018266:	2800      	cmp	r0, #0
 8018268:	d0f7      	beq.n	801825a <pbuf_pool_is_empty+0x16>
 801826a:	f004 fbd5 	bl	801ca18 <sys_arch_protect>
 801826e:	2200      	movs	r2, #0
 8018270:	4b02      	ldr	r3, [pc, #8]	; (801827c <pbuf_pool_is_empty+0x38>)
 8018272:	701a      	strb	r2, [r3, #0]
 8018274:	f004 fbdc 	bl	801ca30 <sys_arch_unprotect>
}
 8018278:	e7ef      	b.n	801825a <pbuf_pool_is_empty+0x16>
 801827a:	bf00      	nop
 801827c:	20008ae0 	.word	0x20008ae0
 8018280:	080182b9 	.word	0x080182b9

08018284 <pbuf_free_ooseq>:
{
 8018284:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018286:	f004 fbc7 	bl	801ca18 <sys_arch_protect>
 801828a:	2200      	movs	r2, #0
 801828c:	4b08      	ldr	r3, [pc, #32]	; (80182b0 <pbuf_free_ooseq+0x2c>)
 801828e:	701a      	strb	r2, [r3, #0]
 8018290:	f004 fbce 	bl	801ca30 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018294:	4b07      	ldr	r3, [pc, #28]	; (80182b4 <pbuf_free_ooseq+0x30>)
 8018296:	681c      	ldr	r4, [r3, #0]
 8018298:	b144      	cbz	r4, 80182ac <pbuf_free_ooseq+0x28>
    if (NULL != pcb->ooseq) {
 801829a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801829c:	b908      	cbnz	r0, 80182a2 <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801829e:	68e4      	ldr	r4, [r4, #12]
 80182a0:	e7fa      	b.n	8018298 <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 80182a2:	f000 fd44 	bl	8018d2e <tcp_segs_free>
      pcb->ooseq = NULL;
 80182a6:	2300      	movs	r3, #0
 80182a8:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 80182aa:	bd10      	pop	{r4, pc}
 80182ac:	bd10      	pop	{r4, pc}
 80182ae:	bf00      	nop
 80182b0:	20008ae0 	.word	0x20008ae0
 80182b4:	20008ae8 	.word	0x20008ae8

080182b8 <pbuf_free_ooseq_callback>:
{
 80182b8:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 80182ba:	f7ff ffe3 	bl	8018284 <pbuf_free_ooseq>
 80182be:	bd08      	pop	{r3, pc}

080182c0 <pbuf_alloced_custom>:
{
 80182c0:	b570      	push	{r4, r5, r6, lr}
 80182c2:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 80182c4:	2804      	cmp	r0, #4
 80182c6:	d80a      	bhi.n	80182de <pbuf_alloced_custom+0x1e>
 80182c8:	e8df f000 	tbb	[pc, r0]
 80182cc:	05031412 	.word	0x05031412
 80182d0:	07          	.byte	0x07
 80182d1:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80182d2:	200e      	movs	r0, #14
    break;
 80182d4:	e00f      	b.n	80182f6 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80182d6:	2000      	movs	r0, #0
    break;
 80182d8:	e00d      	b.n	80182f6 <pbuf_alloced_custom+0x36>
    offset = 0;
 80182da:	2000      	movs	r0, #0
    break;
 80182dc:	e00b      	b.n	80182f6 <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80182de:	4b13      	ldr	r3, [pc, #76]	; (801832c <pbuf_alloced_custom+0x6c>)
 80182e0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80182e4:	4912      	ldr	r1, [pc, #72]	; (8018330 <pbuf_alloced_custom+0x70>)
 80182e6:	4813      	ldr	r0, [pc, #76]	; (8018334 <pbuf_alloced_custom+0x74>)
 80182e8:	f005 fdfd 	bl	801dee6 <iprintf>
    return NULL;
 80182ec:	2000      	movs	r0, #0
 80182ee:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80182f0:	2036      	movs	r0, #54	; 0x36
 80182f2:	e000      	b.n	80182f6 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80182f4:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80182f6:	3003      	adds	r0, #3
 80182f8:	f020 0003 	bic.w	r0, r0, #3
 80182fc:	180e      	adds	r6, r1, r0
 80182fe:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8018302:	42ae      	cmp	r6, r5
 8018304:	d810      	bhi.n	8018328 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 8018306:	2500      	movs	r5, #0
 8018308:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 801830a:	b154      	cbz	r4, 8018322 <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801830c:	4420      	add	r0, r4
 801830e:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8018310:	2002      	movs	r0, #2
 8018312:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8018314:	8119      	strh	r1, [r3, #8]
 8018316:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8018318:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 801831a:	2201      	movs	r2, #1
 801831c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801831e:	4618      	mov	r0, r3
 8018320:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 8018322:	2000      	movs	r0, #0
 8018324:	6058      	str	r0, [r3, #4]
 8018326:	e7f3      	b.n	8018310 <pbuf_alloced_custom+0x50>
    return NULL;
 8018328:	2000      	movs	r0, #0
}
 801832a:	bd70      	pop	{r4, r5, r6, pc}
 801832c:	08021e68 	.word	0x08021e68
 8018330:	08021c94 	.word	0x08021c94
 8018334:	0801e950 	.word	0x0801e950

08018338 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8018338:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 801833a:	2200      	movs	r2, #0
 801833c:	f7ff ff1a 	bl	8018174 <pbuf_header_impl>
}
 8018340:	bd08      	pop	{r3, pc}

08018342 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8018342:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 8018344:	2201      	movs	r2, #1
 8018346:	f7ff ff15 	bl	8018174 <pbuf_header_impl>
}
 801834a:	bd08      	pop	{r3, pc}

0801834c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801834e:	b128      	cbz	r0, 801835c <pbuf_free+0x10>
 8018350:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8018352:	7b03      	ldrb	r3, [r0, #12]
 8018354:	2b03      	cmp	r3, #3
 8018356:	d80b      	bhi.n	8018370 <pbuf_free+0x24>
{
 8018358:	2600      	movs	r6, #0
 801835a:	e01f      	b.n	801839c <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 801835c:	4b2b      	ldr	r3, [pc, #172]	; (801840c <pbuf_free+0xc0>)
 801835e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018362:	492b      	ldr	r1, [pc, #172]	; (8018410 <pbuf_free+0xc4>)
 8018364:	482b      	ldr	r0, [pc, #172]	; (8018414 <pbuf_free+0xc8>)
 8018366:	f005 fdbe 	bl	801dee6 <iprintf>
    return 0;
 801836a:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 801836c:	4630      	mov	r0, r6
 801836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8018370:	4b26      	ldr	r3, [pc, #152]	; (801840c <pbuf_free+0xc0>)
 8018372:	f240 22de 	movw	r2, #734	; 0x2de
 8018376:	4928      	ldr	r1, [pc, #160]	; (8018418 <pbuf_free+0xcc>)
 8018378:	4826      	ldr	r0, [pc, #152]	; (8018414 <pbuf_free+0xc8>)
 801837a:	f005 fdb4 	bl	801dee6 <iprintf>
 801837e:	e7eb      	b.n	8018358 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018380:	4b22      	ldr	r3, [pc, #136]	; (801840c <pbuf_free+0xc0>)
 8018382:	f240 22eb 	movw	r2, #747	; 0x2eb
 8018386:	4925      	ldr	r1, [pc, #148]	; (801841c <pbuf_free+0xd0>)
 8018388:	4822      	ldr	r0, [pc, #136]	; (8018414 <pbuf_free+0xc8>)
 801838a:	f005 fdac 	bl	801dee6 <iprintf>
 801838e:	e00d      	b.n	80183ac <pbuf_free+0x60>
        pc->custom_free_function(p);
 8018390:	6923      	ldr	r3, [r4, #16]
 8018392:	4620      	mov	r0, r4
 8018394:	4798      	blx	r3
      count++;
 8018396:	3601      	adds	r6, #1
 8018398:	b2f6      	uxtb	r6, r6
      p = q;
 801839a:	462c      	mov	r4, r5
  while (p != NULL) {
 801839c:	2c00      	cmp	r4, #0
 801839e:	d0e5      	beq.n	801836c <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 80183a0:	f004 fb3a 	bl	801ca18 <sys_arch_protect>
 80183a4:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80183a6:	89e3      	ldrh	r3, [r4, #14]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d0e9      	beq.n	8018380 <pbuf_free+0x34>
    ref = --(p->ref);
 80183ac:	89e5      	ldrh	r5, [r4, #14]
 80183ae:	3d01      	subs	r5, #1
 80183b0:	b2ad      	uxth	r5, r5
 80183b2:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80183b4:	4638      	mov	r0, r7
 80183b6:	f004 fb3b 	bl	801ca30 <sys_arch_unprotect>
    if (ref == 0) {
 80183ba:	bb25      	cbnz	r5, 8018406 <pbuf_free+0xba>
      q = p->next;
 80183bc:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 80183be:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80183c0:	7b62      	ldrb	r2, [r4, #13]
 80183c2:	f012 0f02 	tst.w	r2, #2
 80183c6:	d00a      	beq.n	80183de <pbuf_free+0x92>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80183c8:	6923      	ldr	r3, [r4, #16]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d1e0      	bne.n	8018390 <pbuf_free+0x44>
 80183ce:	4b0f      	ldr	r3, [pc, #60]	; (801840c <pbuf_free+0xc0>)
 80183d0:	f240 22f9 	movw	r2, #761	; 0x2f9
 80183d4:	4912      	ldr	r1, [pc, #72]	; (8018420 <pbuf_free+0xd4>)
 80183d6:	480f      	ldr	r0, [pc, #60]	; (8018414 <pbuf_free+0xc8>)
 80183d8:	f005 fd85 	bl	801dee6 <iprintf>
 80183dc:	e7d8      	b.n	8018390 <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 80183de:	2b03      	cmp	r3, #3
 80183e0:	d007      	beq.n	80183f2 <pbuf_free+0xa6>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80183e2:	3b01      	subs	r3, #1
 80183e4:	b29b      	uxth	r3, r3
 80183e6:	2b01      	cmp	r3, #1
 80183e8:	d908      	bls.n	80183fc <pbuf_free+0xb0>
          mem_free(p);
 80183ea:	4620      	mov	r0, r4
 80183ec:	f7ff fbb4 	bl	8017b58 <mem_free>
 80183f0:	e7d1      	b.n	8018396 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 80183f2:	4621      	mov	r1, r4
 80183f4:	200c      	movs	r0, #12
 80183f6:	f7ff fdd3 	bl	8017fa0 <memp_free>
 80183fa:	e7cc      	b.n	8018396 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 80183fc:	4621      	mov	r1, r4
 80183fe:	200b      	movs	r0, #11
 8018400:	f7ff fdce 	bl	8017fa0 <memp_free>
 8018404:	e7c7      	b.n	8018396 <pbuf_free+0x4a>
      p = NULL;
 8018406:	2400      	movs	r4, #0
 8018408:	e7c8      	b.n	801839c <pbuf_free+0x50>
 801840a:	bf00      	nop
 801840c:	08021e68 	.word	0x08021e68
 8018410:	0801ec44 	.word	0x0801ec44
 8018414:	0801e950 	.word	0x0801e950
 8018418:	08021e14 	.word	0x08021e14
 801841c:	08021e2c 	.word	0x08021e2c
 8018420:	08021e44 	.word	0x08021e44

08018424 <pbuf_alloc>:
{
 8018424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018428:	460d      	mov	r5, r1
 801842a:	4617      	mov	r7, r2
  switch (layer) {
 801842c:	2804      	cmp	r0, #4
 801842e:	d80a      	bhi.n	8018446 <pbuf_alloc+0x22>
 8018430:	e8df f000 	tbb	[pc, r0]
 8018434:	05031412 	.word	0x05031412
 8018438:	07          	.byte	0x07
 8018439:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801843a:	240e      	movs	r4, #14
    break;
 801843c:	e00f      	b.n	801845e <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801843e:	2400      	movs	r4, #0
    break;
 8018440:	e00d      	b.n	801845e <pbuf_alloc+0x3a>
    offset = 0;
 8018442:	2400      	movs	r4, #0
    break;
 8018444:	e00b      	b.n	801845e <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8018446:	4b64      	ldr	r3, [pc, #400]	; (80185d8 <pbuf_alloc+0x1b4>)
 8018448:	f44f 728b 	mov.w	r2, #278	; 0x116
 801844c:	4963      	ldr	r1, [pc, #396]	; (80185dc <pbuf_alloc+0x1b8>)
 801844e:	4864      	ldr	r0, [pc, #400]	; (80185e0 <pbuf_alloc+0x1bc>)
 8018450:	f005 fd49 	bl	801dee6 <iprintf>
    return NULL;
 8018454:	2600      	movs	r6, #0
 8018456:	e0b1      	b.n	80185bc <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8018458:	2436      	movs	r4, #54	; 0x36
 801845a:	e000      	b.n	801845e <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801845c:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 801845e:	2f03      	cmp	r7, #3
 8018460:	f200 80af 	bhi.w	80185c2 <pbuf_alloc+0x19e>
 8018464:	e8df f007 	tbb	[pc, r7]
 8018468:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801846c:	200c      	movs	r0, #12
 801846e:	f7ff fd7d 	bl	8017f6c <memp_malloc>
    if (p == NULL) {
 8018472:	4606      	mov	r6, r0
 8018474:	b1f8      	cbz	r0, 80184b6 <pbuf_alloc+0x92>
    p->type = type;
 8018476:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 8018478:	2300      	movs	r3, #0
 801847a:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801847c:	f104 0310 	add.w	r3, r4, #16
 8018480:	4403      	add	r3, r0
 8018482:	3303      	adds	r3, #3
 8018484:	f023 0303 	bic.w	r3, r3, #3
 8018488:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 801848a:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801848c:	1ce2      	adds	r2, r4, #3
 801848e:	f022 0203 	bic.w	r2, r2, #3
 8018492:	f5c2 7242 	rsb	r2, r2, #776	; 0x308
 8018496:	42aa      	cmp	r2, r5
 8018498:	bf28      	it	cs
 801849a:	462a      	movcs	r2, r5
 801849c:	b292      	uxth	r2, r2
 801849e:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80184a0:	4413      	add	r3, r2
 80184a2:	f500 7846 	add.w	r8, r0, #792	; 0x318
 80184a6:	4543      	cmp	r3, r8
 80184a8:	d808      	bhi.n	80184bc <pbuf_alloc+0x98>
    p->ref = 1;
 80184aa:	2301      	movs	r3, #1
 80184ac:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 80184ae:	8973      	ldrh	r3, [r6, #10]
 80184b0:	1aed      	subs	r5, r5, r3
    r = p;
 80184b2:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 80184b4:	e026      	b.n	8018504 <pbuf_alloc+0xe0>
      PBUF_POOL_IS_EMPTY();
 80184b6:	f7ff fec5 	bl	8018244 <pbuf_pool_is_empty>
      return NULL;
 80184ba:	e07f      	b.n	80185bc <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80184bc:	4b46      	ldr	r3, [pc, #280]	; (80185d8 <pbuf_alloc+0x1b4>)
 80184be:	f44f 7298 	mov.w	r2, #304	; 0x130
 80184c2:	4948      	ldr	r1, [pc, #288]	; (80185e4 <pbuf_alloc+0x1c0>)
 80184c4:	4846      	ldr	r0, [pc, #280]	; (80185e0 <pbuf_alloc+0x1bc>)
 80184c6:	f005 fd0e 	bl	801dee6 <iprintf>
 80184ca:	e7ee      	b.n	80184aa <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 80184cc:	f7ff feba 	bl	8018244 <pbuf_pool_is_empty>
        pbuf_free(p);
 80184d0:	4630      	mov	r0, r6
 80184d2:	f7ff ff3b 	bl	801834c <pbuf_free>
        return NULL;
 80184d6:	4626      	mov	r6, r4
 80184d8:	e070      	b.n	80185bc <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80184da:	4b3f      	ldr	r3, [pc, #252]	; (80185d8 <pbuf_alloc+0x1b4>)
 80184dc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80184e0:	4941      	ldr	r1, [pc, #260]	; (80185e8 <pbuf_alloc+0x1c4>)
 80184e2:	483f      	ldr	r0, [pc, #252]	; (80185e0 <pbuf_alloc+0x1bc>)
 80184e4:	f005 fcff 	bl	801dee6 <iprintf>
 80184e8:	e01e      	b.n	8018528 <pbuf_alloc+0x104>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80184ea:	4b3b      	ldr	r3, [pc, #236]	; (80185d8 <pbuf_alloc+0x1b4>)
 80184ec:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80184f0:	493e      	ldr	r1, [pc, #248]	; (80185ec <pbuf_alloc+0x1c8>)
 80184f2:	483b      	ldr	r0, [pc, #236]	; (80185e0 <pbuf_alloc+0x1bc>)
 80184f4:	f005 fcf7 	bl	801dee6 <iprintf>
 80184f8:	e024      	b.n	8018544 <pbuf_alloc+0x120>
      q->ref = 1;
 80184fa:	2301      	movs	r3, #1
 80184fc:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 80184fe:	8963      	ldrh	r3, [r4, #10]
 8018500:	1aed      	subs	r5, r5, r3
      r = q;
 8018502:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 8018504:	2d00      	cmp	r5, #0
 8018506:	dd55      	ble.n	80185b4 <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8018508:	200c      	movs	r0, #12
 801850a:	f7ff fd2f 	bl	8017f6c <memp_malloc>
      if (q == NULL) {
 801850e:	4604      	mov	r4, r0
 8018510:	2800      	cmp	r0, #0
 8018512:	d0db      	beq.n	80184cc <pbuf_alloc+0xa8>
      q->type = type;
 8018514:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 8018516:	2300      	movs	r3, #0
 8018518:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 801851a:	6003      	str	r3, [r0, #0]
      r->next = q;
 801851c:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8018520:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018524:	429d      	cmp	r5, r3
 8018526:	dcd8      	bgt.n	80184da <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 8018528:	b2ab      	uxth	r3, r5
 801852a:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 801852c:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 8018530:	bf28      	it	cs
 8018532:	f44f 7342 	movcs.w	r3, #776	; 0x308
 8018536:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8018538:	f104 0310 	add.w	r3, r4, #16
 801853c:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801853e:	f013 0f03 	tst.w	r3, #3
 8018542:	d1d2      	bne.n	80184ea <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8018544:	6873      	ldr	r3, [r6, #4]
 8018546:	8972      	ldrh	r2, [r6, #10]
 8018548:	4413      	add	r3, r2
 801854a:	4598      	cmp	r8, r3
 801854c:	d2d5      	bcs.n	80184fa <pbuf_alloc+0xd6>
 801854e:	4b22      	ldr	r3, [pc, #136]	; (80185d8 <pbuf_alloc+0x1b4>)
 8018550:	f240 1255 	movw	r2, #341	; 0x155
 8018554:	4923      	ldr	r1, [pc, #140]	; (80185e4 <pbuf_alloc+0x1c0>)
 8018556:	4822      	ldr	r0, [pc, #136]	; (80185e0 <pbuf_alloc+0x1bc>)
 8018558:	f005 fcc5 	bl	801dee6 <iprintf>
 801855c:	e7cd      	b.n	80184fa <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 801855e:	f104 0013 	add.w	r0, r4, #19
 8018562:	f020 0003 	bic.w	r0, r0, #3
 8018566:	b283      	uxth	r3, r0
 8018568:	1cea      	adds	r2, r5, #3
 801856a:	b290      	uxth	r0, r2
 801856c:	f020 0003 	bic.w	r0, r0, #3
 8018570:	4418      	add	r0, r3
 8018572:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8018574:	f022 0203 	bic.w	r2, r2, #3
 8018578:	4290      	cmp	r0, r2
 801857a:	d32b      	bcc.n	80185d4 <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 801857c:	f7ff fbe6 	bl	8017d4c <mem_malloc>
    if (p == NULL) {
 8018580:	4606      	mov	r6, r0
 8018582:	b1d8      	cbz	r0, 80185bc <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8018584:	f104 0310 	add.w	r3, r4, #16
 8018588:	4403      	add	r3, r0
 801858a:	3303      	adds	r3, #3
 801858c:	f023 0303 	bic.w	r3, r3, #3
 8018590:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8018592:	8105      	strh	r5, [r0, #8]
 8018594:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8018596:	2300      	movs	r3, #0
 8018598:	6003      	str	r3, [r0, #0]
    p->type = type;
 801859a:	7307      	strb	r7, [r0, #12]
 801859c:	e00a      	b.n	80185b4 <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801859e:	200b      	movs	r0, #11
 80185a0:	f7ff fce4 	bl	8017f6c <memp_malloc>
    if (p == NULL) {
 80185a4:	4606      	mov	r6, r0
 80185a6:	b148      	cbz	r0, 80185bc <pbuf_alloc+0x198>
    p->payload = NULL;
 80185a8:	2300      	movs	r3, #0
 80185aa:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 80185ac:	8105      	strh	r5, [r0, #8]
 80185ae:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 80185b0:	6003      	str	r3, [r0, #0]
    p->type = type;
 80185b2:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 80185b4:	2301      	movs	r3, #1
 80185b6:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 80185b8:	2300      	movs	r3, #0
 80185ba:	7373      	strb	r3, [r6, #13]
}
 80185bc:	4630      	mov	r0, r6
 80185be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80185c2:	4b05      	ldr	r3, [pc, #20]	; (80185d8 <pbuf_alloc+0x1b4>)
 80185c4:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80185c8:	4909      	ldr	r1, [pc, #36]	; (80185f0 <pbuf_alloc+0x1cc>)
 80185ca:	4805      	ldr	r0, [pc, #20]	; (80185e0 <pbuf_alloc+0x1bc>)
 80185cc:	f005 fc8b 	bl	801dee6 <iprintf>
    return NULL;
 80185d0:	2600      	movs	r6, #0
 80185d2:	e7f3      	b.n	80185bc <pbuf_alloc+0x198>
        return NULL;
 80185d4:	2600      	movs	r6, #0
 80185d6:	e7f1      	b.n	80185bc <pbuf_alloc+0x198>
 80185d8:	08021e68 	.word	0x08021e68
 80185dc:	08021bb0 	.word	0x08021bb0
 80185e0:	0801e950 	.word	0x0801e950
 80185e4:	08021bcc 	.word	0x08021bcc
 80185e8:	08021c34 	.word	0x08021c34
 80185ec:	08021c48 	.word	0x08021c48
 80185f0:	08021c78 	.word	0x08021c78

080185f4 <pbuf_realloc>:
{
 80185f4:	b570      	push	{r4, r5, r6, lr}
 80185f6:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80185f8:	4604      	mov	r4, r0
 80185fa:	b198      	cbz	r0, 8018624 <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80185fc:	7b23      	ldrb	r3, [r4, #12]
 80185fe:	2b03      	cmp	r3, #3
 8018600:	d00b      	beq.n	801861a <pbuf_realloc+0x26>
 8018602:	2b01      	cmp	r3, #1
 8018604:	d009      	beq.n	801861a <pbuf_realloc+0x26>
 8018606:	b143      	cbz	r3, 801861a <pbuf_realloc+0x26>
 8018608:	2b02      	cmp	r3, #2
 801860a:	d006      	beq.n	801861a <pbuf_realloc+0x26>
 801860c:	4b2b      	ldr	r3, [pc, #172]	; (80186bc <pbuf_realloc+0xc8>)
 801860e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8018612:	492b      	ldr	r1, [pc, #172]	; (80186c0 <pbuf_realloc+0xcc>)
 8018614:	482b      	ldr	r0, [pc, #172]	; (80186c4 <pbuf_realloc+0xd0>)
 8018616:	f005 fc66 	bl	801dee6 <iprintf>
  if (new_len >= p->tot_len) {
 801861a:	8926      	ldrh	r6, [r4, #8]
 801861c:	42ae      	cmp	r6, r5
 801861e:	d938      	bls.n	8018692 <pbuf_realloc+0x9e>
  grow = new_len - p->tot_len;
 8018620:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8018622:	e00d      	b.n	8018640 <pbuf_realloc+0x4c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018624:	4b25      	ldr	r3, [pc, #148]	; (80186bc <pbuf_realloc+0xc8>)
 8018626:	f240 12f3 	movw	r2, #499	; 0x1f3
 801862a:	4927      	ldr	r1, [pc, #156]	; (80186c8 <pbuf_realloc+0xd4>)
 801862c:	4825      	ldr	r0, [pc, #148]	; (80186c4 <pbuf_realloc+0xd0>)
 801862e:	f005 fc5a 	bl	801dee6 <iprintf>
 8018632:	e7e3      	b.n	80185fc <pbuf_realloc+0x8>
    q->tot_len += (u16_t)grow;
 8018634:	8923      	ldrh	r3, [r4, #8]
 8018636:	fa13 f386 	uxtah	r3, r3, r6
 801863a:	8123      	strh	r3, [r4, #8]
    q = q->next;
 801863c:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801863e:	b184      	cbz	r4, 8018662 <pbuf_realloc+0x6e>
  while (rem_len > q->len) {
 8018640:	8961      	ldrh	r1, [r4, #10]
 8018642:	428d      	cmp	r5, r1
 8018644:	d915      	bls.n	8018672 <pbuf_realloc+0x7e>
    rem_len -= q->len;
 8018646:	1a69      	subs	r1, r5, r1
 8018648:	b28d      	uxth	r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 801864a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801864e:	429e      	cmp	r6, r3
 8018650:	ddf0      	ble.n	8018634 <pbuf_realloc+0x40>
 8018652:	4b1a      	ldr	r3, [pc, #104]	; (80186bc <pbuf_realloc+0xc8>)
 8018654:	f240 220b 	movw	r2, #523	; 0x20b
 8018658:	491c      	ldr	r1, [pc, #112]	; (80186cc <pbuf_realloc+0xd8>)
 801865a:	481a      	ldr	r0, [pc, #104]	; (80186c4 <pbuf_realloc+0xd0>)
 801865c:	f005 fc43 	bl	801dee6 <iprintf>
 8018660:	e7e8      	b.n	8018634 <pbuf_realloc+0x40>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018662:	4b16      	ldr	r3, [pc, #88]	; (80186bc <pbuf_realloc+0xc8>)
 8018664:	f240 220f 	movw	r2, #527	; 0x20f
 8018668:	4919      	ldr	r1, [pc, #100]	; (80186d0 <pbuf_realloc+0xdc>)
 801866a:	4816      	ldr	r0, [pc, #88]	; (80186c4 <pbuf_realloc+0xd0>)
 801866c:	f005 fc3b 	bl	801dee6 <iprintf>
 8018670:	e7e6      	b.n	8018640 <pbuf_realloc+0x4c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8018672:	7b23      	ldrb	r3, [r4, #12]
 8018674:	b92b      	cbnz	r3, 8018682 <pbuf_realloc+0x8e>
 8018676:	428d      	cmp	r5, r1
 8018678:	d003      	beq.n	8018682 <pbuf_realloc+0x8e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801867a:	7b63      	ldrb	r3, [r4, #13]
 801867c:	f013 0f02 	tst.w	r3, #2
 8018680:	d008      	beq.n	8018694 <pbuf_realloc+0xa0>
  q->len = rem_len;
 8018682:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8018684:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8018686:	6820      	ldr	r0, [r4, #0]
 8018688:	b108      	cbz	r0, 801868e <pbuf_realloc+0x9a>
    pbuf_free(q->next);
 801868a:	f7ff fe5f 	bl	801834c <pbuf_free>
  q->next = NULL;
 801868e:	2300      	movs	r3, #0
 8018690:	6023      	str	r3, [r4, #0]
 8018692:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8018694:	6863      	ldr	r3, [r4, #4]
 8018696:	1b1b      	subs	r3, r3, r4
 8018698:	fa15 f183 	uxtah	r1, r5, r3
 801869c:	b289      	uxth	r1, r1
 801869e:	4620      	mov	r0, r4
 80186a0:	f7ff fab8 	bl	8017c14 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80186a4:	4604      	mov	r4, r0
 80186a6:	2800      	cmp	r0, #0
 80186a8:	d1eb      	bne.n	8018682 <pbuf_realloc+0x8e>
 80186aa:	4b04      	ldr	r3, [pc, #16]	; (80186bc <pbuf_realloc+0xc8>)
 80186ac:	f240 221d 	movw	r2, #541	; 0x21d
 80186b0:	4908      	ldr	r1, [pc, #32]	; (80186d4 <pbuf_realloc+0xe0>)
 80186b2:	4804      	ldr	r0, [pc, #16]	; (80186c4 <pbuf_realloc+0xd0>)
 80186b4:	f005 fc17 	bl	801dee6 <iprintf>
 80186b8:	e7e3      	b.n	8018682 <pbuf_realloc+0x8e>
 80186ba:	bf00      	nop
 80186bc:	08021e68 	.word	0x08021e68
 80186c0:	08021ee0 	.word	0x08021ee0
 80186c4:	0801e950 	.word	0x0801e950
 80186c8:	08021ec8 	.word	0x08021ec8
 80186cc:	08021efc 	.word	0x08021efc
 80186d0:	08021f10 	.word	0x08021f10
 80186d4:	08021f28 	.word	0x08021f28

080186d8 <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 80186d8:	2300      	movs	r3, #0
  while (p != NULL) {
 80186da:	e002      	b.n	80186e2 <pbuf_clen+0xa>
    ++len;
 80186dc:	3301      	adds	r3, #1
 80186de:	b29b      	uxth	r3, r3
    p = p->next;
 80186e0:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 80186e2:	2800      	cmp	r0, #0
 80186e4:	d1fa      	bne.n	80186dc <pbuf_clen+0x4>
  }
  return len;
}
 80186e6:	4618      	mov	r0, r3
 80186e8:	4770      	bx	lr
	...

080186ec <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 80186ec:	b198      	cbz	r0, 8018716 <pbuf_ref+0x2a>
{
 80186ee:	b510      	push	{r4, lr}
 80186f0:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 80186f2:	f004 f991 	bl	801ca18 <sys_arch_protect>
 80186f6:	89e3      	ldrh	r3, [r4, #14]
 80186f8:	3301      	adds	r3, #1
 80186fa:	81e3      	strh	r3, [r4, #14]
 80186fc:	f004 f998 	bl	801ca30 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8018700:	89e3      	ldrh	r3, [r4, #14]
 8018702:	b103      	cbz	r3, 8018706 <pbuf_ref+0x1a>
 8018704:	bd10      	pop	{r4, pc}
 8018706:	4b04      	ldr	r3, [pc, #16]	; (8018718 <pbuf_ref+0x2c>)
 8018708:	f240 3239 	movw	r2, #825	; 0x339
 801870c:	4903      	ldr	r1, [pc, #12]	; (801871c <pbuf_ref+0x30>)
 801870e:	4804      	ldr	r0, [pc, #16]	; (8018720 <pbuf_ref+0x34>)
 8018710:	f005 fbe9 	bl	801dee6 <iprintf>
  }
}
 8018714:	e7f6      	b.n	8018704 <pbuf_ref+0x18>
 8018716:	4770      	bx	lr
 8018718:	08021e68 	.word	0x08021e68
 801871c:	08021f44 	.word	0x08021f44
 8018720:	0801e950 	.word	0x0801e950

08018724 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018724:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8018726:	b110      	cbz	r0, 801872e <pbuf_cat+0xa>
 8018728:	460d      	mov	r5, r1
 801872a:	4604      	mov	r4, r0
 801872c:	b961      	cbnz	r1, 8018748 <pbuf_cat+0x24>
 801872e:	4b15      	ldr	r3, [pc, #84]	; (8018784 <pbuf_cat+0x60>)
 8018730:	f240 324d 	movw	r2, #845	; 0x34d
 8018734:	4914      	ldr	r1, [pc, #80]	; (8018788 <pbuf_cat+0x64>)
 8018736:	4815      	ldr	r0, [pc, #84]	; (801878c <pbuf_cat+0x68>)
 8018738:	f005 fbd5 	bl	801dee6 <iprintf>
 801873c:	bd38      	pop	{r3, r4, r5, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 801873e:	892b      	ldrh	r3, [r5, #8]
 8018740:	8921      	ldrh	r1, [r4, #8]
 8018742:	440b      	add	r3, r1
 8018744:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8018746:	4614      	mov	r4, r2
 8018748:	6822      	ldr	r2, [r4, #0]
 801874a:	2a00      	cmp	r2, #0
 801874c:	d1f7      	bne.n	801873e <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801874e:	8922      	ldrh	r2, [r4, #8]
 8018750:	8963      	ldrh	r3, [r4, #10]
 8018752:	429a      	cmp	r2, r3
 8018754:	d006      	beq.n	8018764 <pbuf_cat+0x40>
 8018756:	4b0b      	ldr	r3, [pc, #44]	; (8018784 <pbuf_cat+0x60>)
 8018758:	f240 3255 	movw	r2, #853	; 0x355
 801875c:	490c      	ldr	r1, [pc, #48]	; (8018790 <pbuf_cat+0x6c>)
 801875e:	480b      	ldr	r0, [pc, #44]	; (801878c <pbuf_cat+0x68>)
 8018760:	f005 fbc1 	bl	801dee6 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8018764:	6823      	ldr	r3, [r4, #0]
 8018766:	b133      	cbz	r3, 8018776 <pbuf_cat+0x52>
 8018768:	4b06      	ldr	r3, [pc, #24]	; (8018784 <pbuf_cat+0x60>)
 801876a:	f240 3256 	movw	r2, #854	; 0x356
 801876e:	4909      	ldr	r1, [pc, #36]	; (8018794 <pbuf_cat+0x70>)
 8018770:	4806      	ldr	r0, [pc, #24]	; (801878c <pbuf_cat+0x68>)
 8018772:	f005 fbb8 	bl	801dee6 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8018776:	892b      	ldrh	r3, [r5, #8]
 8018778:	8922      	ldrh	r2, [r4, #8]
 801877a:	4413      	add	r3, r2
 801877c:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801877e:	6025      	str	r5, [r4, #0]
 8018780:	bd38      	pop	{r3, r4, r5, pc}
 8018782:	bf00      	nop
 8018784:	08021e68 	.word	0x08021e68
 8018788:	08021cb8 	.word	0x08021cb8
 801878c:	0801e950 	.word	0x0801e950
 8018790:	08021cf0 	.word	0x08021cf0
 8018794:	08021d20 	.word	0x08021d20

08018798 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8018798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801879c:	b150      	cbz	r0, 80187b4 <pbuf_copy+0x1c>
 801879e:	460d      	mov	r5, r1
 80187a0:	4607      	mov	r7, r0
 80187a2:	b139      	cbz	r1, 80187b4 <pbuf_copy+0x1c>
 80187a4:	8902      	ldrh	r2, [r0, #8]
 80187a6:	890b      	ldrh	r3, [r1, #8]
 80187a8:	429a      	cmp	r2, r3
 80187aa:	d303      	bcc.n	80187b4 <pbuf_copy+0x1c>
 80187ac:	f04f 0800 	mov.w	r8, #0
 80187b0:	4646      	mov	r6, r8
 80187b2:	e02c      	b.n	801880e <pbuf_copy+0x76>
 80187b4:	4b3f      	ldr	r3, [pc, #252]	; (80188b4 <pbuf_copy+0x11c>)
 80187b6:	f240 32bd 	movw	r2, #957	; 0x3bd
 80187ba:	493f      	ldr	r1, [pc, #252]	; (80188b8 <pbuf_copy+0x120>)
 80187bc:	483f      	ldr	r0, [pc, #252]	; (80188bc <pbuf_copy+0x124>)
 80187be:	f005 fb92 	bl	801dee6 <iprintf>
 80187c2:	f06f 000f 	mvn.w	r0, #15
 80187c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80187ca:	1b9b      	subs	r3, r3, r6
 80187cc:	b29c      	uxth	r4, r3
 80187ce:	e026      	b.n	801881e <pbuf_copy+0x86>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80187d0:	4b38      	ldr	r3, [pc, #224]	; (80188b4 <pbuf_copy+0x11c>)
 80187d2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80187d6:	493a      	ldr	r1, [pc, #232]	; (80188c0 <pbuf_copy+0x128>)
 80187d8:	4838      	ldr	r0, [pc, #224]	; (80188bc <pbuf_copy+0x124>)
 80187da:	f005 fb84 	bl	801dee6 <iprintf>
 80187de:	e02d      	b.n	801883c <pbuf_copy+0xa4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80187e0:	4b34      	ldr	r3, [pc, #208]	; (80188b4 <pbuf_copy+0x11c>)
 80187e2:	f240 32ce 	movw	r2, #974	; 0x3ce
 80187e6:	4937      	ldr	r1, [pc, #220]	; (80188c4 <pbuf_copy+0x12c>)
 80187e8:	4834      	ldr	r0, [pc, #208]	; (80188bc <pbuf_copy+0x124>)
 80187ea:	f005 fb7c 	bl	801dee6 <iprintf>
 80187ee:	e028      	b.n	8018842 <pbuf_copy+0xaa>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80187f0:	897b      	ldrh	r3, [r7, #10]
 80187f2:	429e      	cmp	r6, r3
 80187f4:	d02c      	beq.n	8018850 <pbuf_copy+0xb8>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80187f6:	b11d      	cbz	r5, 8018800 <pbuf_copy+0x68>
 80187f8:	896a      	ldrh	r2, [r5, #10]
 80187fa:	892b      	ldrh	r3, [r5, #8]
 80187fc:	429a      	cmp	r2, r3
 80187fe:	d039      	beq.n	8018874 <pbuf_copy+0xdc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8018800:	b11f      	cbz	r7, 801880a <pbuf_copy+0x72>
 8018802:	897a      	ldrh	r2, [r7, #10]
 8018804:	893b      	ldrh	r3, [r7, #8]
 8018806:	429a      	cmp	r2, r3
 8018808:	d042      	beq.n	8018890 <pbuf_copy+0xf8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801880a:	2d00      	cmp	r5, #0
 801880c:	d04e      	beq.n	80188ac <pbuf_copy+0x114>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801880e:	897b      	ldrh	r3, [r7, #10]
 8018810:	1b99      	subs	r1, r3, r6
 8018812:	896c      	ldrh	r4, [r5, #10]
 8018814:	eba4 0208 	sub.w	r2, r4, r8
 8018818:	4291      	cmp	r1, r2
 801881a:	dbd6      	blt.n	80187ca <pbuf_copy+0x32>
      len = p_from->len - offset_from;
 801881c:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 801881e:	6878      	ldr	r0, [r7, #4]
 8018820:	6869      	ldr	r1, [r5, #4]
 8018822:	4622      	mov	r2, r4
 8018824:	4441      	add	r1, r8
 8018826:	4430      	add	r0, r6
 8018828:	f005 fee5 	bl	801e5f6 <memcpy>
    offset_to += len;
 801882c:	4426      	add	r6, r4
 801882e:	b2b6      	uxth	r6, r6
    offset_from += len;
 8018830:	4444      	add	r4, r8
 8018832:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8018836:	897b      	ldrh	r3, [r7, #10]
 8018838:	429e      	cmp	r6, r3
 801883a:	d8c9      	bhi.n	80187d0 <pbuf_copy+0x38>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801883c:	896b      	ldrh	r3, [r5, #10]
 801883e:	4598      	cmp	r8, r3
 8018840:	d8ce      	bhi.n	80187e0 <pbuf_copy+0x48>
    if (offset_from >= p_from->len) {
 8018842:	896b      	ldrh	r3, [r5, #10]
 8018844:	4598      	cmp	r8, r3
 8018846:	d3d3      	bcc.n	80187f0 <pbuf_copy+0x58>
      p_from = p_from->next;
 8018848:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 801884a:	f04f 0800 	mov.w	r8, #0
 801884e:	e7cf      	b.n	80187f0 <pbuf_copy+0x58>
      p_to = p_to->next;
 8018850:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8018852:	b10f      	cbz	r7, 8018858 <pbuf_copy+0xc0>
      offset_to = 0;
 8018854:	2600      	movs	r6, #0
 8018856:	e7ce      	b.n	80187f6 <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8018858:	b90d      	cbnz	r5, 801885e <pbuf_copy+0xc6>
      offset_to = 0;
 801885a:	2600      	movs	r6, #0
 801885c:	e7cb      	b.n	80187f6 <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 801885e:	4b15      	ldr	r3, [pc, #84]	; (80188b4 <pbuf_copy+0x11c>)
 8018860:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8018864:	4918      	ldr	r1, [pc, #96]	; (80188c8 <pbuf_copy+0x130>)
 8018866:	4815      	ldr	r0, [pc, #84]	; (80188bc <pbuf_copy+0x124>)
 8018868:	f005 fb3d 	bl	801dee6 <iprintf>
 801886c:	f06f 000f 	mvn.w	r0, #15
 8018870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018874:	682b      	ldr	r3, [r5, #0]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d0c2      	beq.n	8018800 <pbuf_copy+0x68>
 801887a:	4b0e      	ldr	r3, [pc, #56]	; (80188b4 <pbuf_copy+0x11c>)
 801887c:	f240 32de 	movw	r2, #990	; 0x3de
 8018880:	4912      	ldr	r1, [pc, #72]	; (80188cc <pbuf_copy+0x134>)
 8018882:	480e      	ldr	r0, [pc, #56]	; (80188bc <pbuf_copy+0x124>)
 8018884:	f005 fb2f 	bl	801dee6 <iprintf>
 8018888:	f06f 0005 	mvn.w	r0, #5
 801888c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018890:	683b      	ldr	r3, [r7, #0]
 8018892:	2b00      	cmp	r3, #0
 8018894:	d0b9      	beq.n	801880a <pbuf_copy+0x72>
 8018896:	4b07      	ldr	r3, [pc, #28]	; (80188b4 <pbuf_copy+0x11c>)
 8018898:	f240 32e3 	movw	r2, #995	; 0x3e3
 801889c:	490b      	ldr	r1, [pc, #44]	; (80188cc <pbuf_copy+0x134>)
 801889e:	4807      	ldr	r0, [pc, #28]	; (80188bc <pbuf_copy+0x124>)
 80188a0:	f005 fb21 	bl	801dee6 <iprintf>
 80188a4:	f06f 0005 	mvn.w	r0, #5
 80188a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80188ac:	2000      	movs	r0, #0
}
 80188ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188b2:	bf00      	nop
 80188b4:	08021e68 	.word	0x08021e68
 80188b8:	08021d30 	.word	0x08021d30
 80188bc:	0801e950 	.word	0x0801e950
 80188c0:	08021d60 	.word	0x08021d60
 80188c4:	08021d78 	.word	0x08021d78
 80188c8:	08021d94 	.word	0x08021d94
 80188cc:	08021da4 	.word	0x08021da4

080188d0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80188d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80188d4:	b128      	cbz	r0, 80188e2 <pbuf_copy_partial+0x12>
 80188d6:	460f      	mov	r7, r1
 80188d8:	4690      	mov	r8, r2
 80188da:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80188dc:	b161      	cbz	r1, 80188f8 <pbuf_copy_partial+0x28>
 80188de:	2600      	movs	r6, #0
 80188e0:	e027      	b.n	8018932 <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80188e2:	4b1a      	ldr	r3, [pc, #104]	; (801894c <pbuf_copy_partial+0x7c>)
 80188e4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80188e8:	4919      	ldr	r1, [pc, #100]	; (8018950 <pbuf_copy_partial+0x80>)
 80188ea:	481a      	ldr	r0, [pc, #104]	; (8018954 <pbuf_copy_partial+0x84>)
 80188ec:	f005 fafb 	bl	801dee6 <iprintf>
 80188f0:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 80188f2:	4630      	mov	r0, r6
 80188f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80188f8:	4b14      	ldr	r3, [pc, #80]	; (801894c <pbuf_copy_partial+0x7c>)
 80188fa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80188fe:	4916      	ldr	r1, [pc, #88]	; (8018958 <pbuf_copy_partial+0x88>)
 8018900:	4814      	ldr	r0, [pc, #80]	; (8018954 <pbuf_copy_partial+0x84>)
 8018902:	f005 faf0 	bl	801dee6 <iprintf>
 8018906:	2600      	movs	r6, #0
 8018908:	e7f3      	b.n	80188f2 <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 801890a:	896a      	ldrh	r2, [r5, #10]
 801890c:	1ad2      	subs	r2, r2, r3
 801890e:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 8018910:	45a0      	cmp	r8, r4
 8018912:	d200      	bcs.n	8018916 <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 8018914:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8018916:	6869      	ldr	r1, [r5, #4]
 8018918:	4622      	mov	r2, r4
 801891a:	4419      	add	r1, r3
 801891c:	19b8      	adds	r0, r7, r6
 801891e:	f005 fe6a 	bl	801e5f6 <memcpy>
      copied_total += buf_copy_len;
 8018922:	4426      	add	r6, r4
 8018924:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 8018926:	eba8 0404 	sub.w	r4, r8, r4
 801892a:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 801892e:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018930:	682d      	ldr	r5, [r5, #0]
 8018932:	f1b8 0f00 	cmp.w	r8, #0
 8018936:	d0dc      	beq.n	80188f2 <pbuf_copy_partial+0x22>
 8018938:	2d00      	cmp	r5, #0
 801893a:	d0da      	beq.n	80188f2 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 801893c:	2b00      	cmp	r3, #0
 801893e:	d0e4      	beq.n	801890a <pbuf_copy_partial+0x3a>
 8018940:	8969      	ldrh	r1, [r5, #10]
 8018942:	428b      	cmp	r3, r1
 8018944:	d3e1      	bcc.n	801890a <pbuf_copy_partial+0x3a>
      offset -= p->len;
 8018946:	1a5b      	subs	r3, r3, r1
 8018948:	b29b      	uxth	r3, r3
 801894a:	e7f1      	b.n	8018930 <pbuf_copy_partial+0x60>
 801894c:	08021e68 	.word	0x08021e68
 8018950:	08021dd0 	.word	0x08021dd0
 8018954:	0801e950 	.word	0x0801e950
 8018958:	08021df0 	.word	0x08021df0

0801895c <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801895c:	e000      	b.n	8018960 <tcp_remove_listener+0x4>
 801895e:	68c0      	ldr	r0, [r0, #12]
 8018960:	b128      	cbz	r0, 801896e <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 8018962:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8018964:	428b      	cmp	r3, r1
 8018966:	d1fa      	bne.n	801895e <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 8018968:	2300      	movs	r3, #0
 801896a:	6783      	str	r3, [r0, #120]	; 0x78
 801896c:	e7f7      	b.n	801895e <tcp_remove_listener+0x2>
      }
   }
}
 801896e:	4770      	bx	lr

08018970 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8018970:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 8018972:	2400      	movs	r4, #0
 8018974:	e009      	b.n	801898a <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018976:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801897a:	4b14      	ldr	r3, [pc, #80]	; (80189cc <tcp_new_port+0x5c>)
 801897c:	801a      	strh	r2, [r3, #0]
 801897e:	e00c      	b.n	801899a <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018980:	3401      	adds	r4, #1
 8018982:	b2a4      	uxth	r4, r4
 8018984:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8018988:	d21e      	bcs.n	80189c8 <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801898a:	4a10      	ldr	r2, [pc, #64]	; (80189cc <tcp_new_port+0x5c>)
 801898c:	8813      	ldrh	r3, [r2, #0]
 801898e:	1c59      	adds	r1, r3, #1
 8018990:	8011      	strh	r1, [r2, #0]
 8018992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018996:	4293      	cmp	r3, r2
 8018998:	d0ed      	beq.n	8018976 <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801899a:	2000      	movs	r0, #0
 801899c:	2803      	cmp	r0, #3
 801899e:	d80e      	bhi.n	80189be <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80189a0:	4b0b      	ldr	r3, [pc, #44]	; (80189d0 <tcp_new_port+0x60>)
 80189a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	b133      	cbz	r3, 80189b8 <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 80189aa:	8ad9      	ldrh	r1, [r3, #22]
 80189ac:	4a07      	ldr	r2, [pc, #28]	; (80189cc <tcp_new_port+0x5c>)
 80189ae:	8812      	ldrh	r2, [r2, #0]
 80189b0:	4291      	cmp	r1, r2
 80189b2:	d0e5      	beq.n	8018980 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80189b4:	68db      	ldr	r3, [r3, #12]
 80189b6:	e7f7      	b.n	80189a8 <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80189b8:	3001      	adds	r0, #1
 80189ba:	b2c0      	uxtb	r0, r0
 80189bc:	e7ee      	b.n	801899c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80189be:	4b03      	ldr	r3, [pc, #12]	; (80189cc <tcp_new_port+0x5c>)
 80189c0:	8818      	ldrh	r0, [r3, #0]
}
 80189c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189c6:	4770      	bx	lr
          return 0;
 80189c8:	2000      	movs	r0, #0
 80189ca:	e7fa      	b.n	80189c2 <tcp_new_port+0x52>
 80189cc:	2000000c 	.word	0x2000000c
 80189d0:	08022090 	.word	0x08022090

080189d4 <tcp_listen_closed>:
{
 80189d4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80189d6:	4605      	mov	r5, r0
 80189d8:	b150      	cbz	r0, 80189f0 <tcp_listen_closed+0x1c>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80189da:	7d2b      	ldrb	r3, [r5, #20]
 80189dc:	2b01      	cmp	r3, #1
 80189de:	d005      	beq.n	80189ec <tcp_listen_closed+0x18>
 80189e0:	4b0c      	ldr	r3, [pc, #48]	; (8018a14 <tcp_listen_closed+0x40>)
 80189e2:	22c1      	movs	r2, #193	; 0xc1
 80189e4:	490c      	ldr	r1, [pc, #48]	; (8018a18 <tcp_listen_closed+0x44>)
 80189e6:	480d      	ldr	r0, [pc, #52]	; (8018a1c <tcp_listen_closed+0x48>)
 80189e8:	f005 fa7d 	bl	801dee6 <iprintf>
{
 80189ec:	2401      	movs	r4, #1
 80189ee:	e00e      	b.n	8018a0e <tcp_listen_closed+0x3a>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80189f0:	4b08      	ldr	r3, [pc, #32]	; (8018a14 <tcp_listen_closed+0x40>)
 80189f2:	22c0      	movs	r2, #192	; 0xc0
 80189f4:	490a      	ldr	r1, [pc, #40]	; (8018a20 <tcp_listen_closed+0x4c>)
 80189f6:	4809      	ldr	r0, [pc, #36]	; (8018a1c <tcp_listen_closed+0x48>)
 80189f8:	f005 fa75 	bl	801dee6 <iprintf>
 80189fc:	e7ed      	b.n	80189da <tcp_listen_closed+0x6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80189fe:	4b09      	ldr	r3, [pc, #36]	; (8018a24 <tcp_listen_closed+0x50>)
 8018a00:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018a04:	4629      	mov	r1, r5
 8018a06:	6818      	ldr	r0, [r3, #0]
 8018a08:	f7ff ffa8 	bl	801895c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018a0c:	3401      	adds	r4, #1
 8018a0e:	2c03      	cmp	r4, #3
 8018a10:	d9f5      	bls.n	80189fe <tcp_listen_closed+0x2a>
}
 8018a12:	bd38      	pop	{r3, r4, r5, pc}
 8018a14:	08022018 	.word	0x08022018
 8018a18:	08022054 	.word	0x08022054
 8018a1c:	0801e950 	.word	0x0801e950
 8018a20:	08022048 	.word	0x08022048
 8018a24:	08022090 	.word	0x08022090

08018a28 <tcp_close_shutdown_fin>:
{
 8018a28:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018a2a:	4604      	mov	r4, r0
 8018a2c:	b140      	cbz	r0, 8018a40 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8018a2e:	7d23      	ldrb	r3, [r4, #20]
 8018a30:	2b04      	cmp	r3, #4
 8018a32:	d01a      	beq.n	8018a6a <tcp_close_shutdown_fin+0x42>
 8018a34:	2b07      	cmp	r3, #7
 8018a36:	d021      	beq.n	8018a7c <tcp_close_shutdown_fin+0x54>
 8018a38:	2b03      	cmp	r3, #3
 8018a3a:	d009      	beq.n	8018a50 <tcp_close_shutdown_fin+0x28>
    return ERR_OK;
 8018a3c:	2500      	movs	r5, #0
 8018a3e:	e012      	b.n	8018a66 <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018a40:	4b18      	ldr	r3, [pc, #96]	; (8018aa4 <tcp_close_shutdown_fin+0x7c>)
 8018a42:	f240 124d 	movw	r2, #333	; 0x14d
 8018a46:	4918      	ldr	r1, [pc, #96]	; (8018aa8 <tcp_close_shutdown_fin+0x80>)
 8018a48:	4818      	ldr	r0, [pc, #96]	; (8018aac <tcp_close_shutdown_fin+0x84>)
 8018a4a:	f005 fa4c 	bl	801dee6 <iprintf>
 8018a4e:	e7ee      	b.n	8018a2e <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 8018a50:	4620      	mov	r0, r4
 8018a52:	f003 f891 	bl	801bb78 <tcp_send_fin>
    if (err == ERR_OK) {
 8018a56:	4605      	mov	r5, r0
 8018a58:	b908      	cbnz	r0, 8018a5e <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8018a5a:	2305      	movs	r3, #5
 8018a5c:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8018a5e:	b1b5      	cbz	r5, 8018a8e <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 8018a60:	f1b5 3fff 	cmp.w	r5, #4294967295
 8018a64:	d017      	beq.n	8018a96 <tcp_close_shutdown_fin+0x6e>
}
 8018a66:	4628      	mov	r0, r5
 8018a68:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	f003 f884 	bl	801bb78 <tcp_send_fin>
    if (err == ERR_OK) {
 8018a70:	4605      	mov	r5, r0
 8018a72:	2800      	cmp	r0, #0
 8018a74:	d1f3      	bne.n	8018a5e <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8018a76:	2305      	movs	r3, #5
 8018a78:	7523      	strb	r3, [r4, #20]
 8018a7a:	e7f0      	b.n	8018a5e <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 8018a7c:	4620      	mov	r0, r4
 8018a7e:	f003 f87b 	bl	801bb78 <tcp_send_fin>
    if (err == ERR_OK) {
 8018a82:	4605      	mov	r5, r0
 8018a84:	2800      	cmp	r0, #0
 8018a86:	d1ea      	bne.n	8018a5e <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 8018a88:	2309      	movs	r3, #9
 8018a8a:	7523      	strb	r3, [r4, #20]
 8018a8c:	e7e7      	b.n	8018a5e <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 8018a8e:	4620      	mov	r0, r4
 8018a90:	f003 f8ce 	bl	801bc30 <tcp_output>
 8018a94:	e7e7      	b.n	8018a66 <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 8018a96:	7ea3      	ldrb	r3, [r4, #26]
 8018a98:	f043 0308 	orr.w	r3, r3, #8
 8018a9c:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8018a9e:	2500      	movs	r5, #0
 8018aa0:	e7e1      	b.n	8018a66 <tcp_close_shutdown_fin+0x3e>
 8018aa2:	bf00      	nop
 8018aa4:	08022018 	.word	0x08022018
 8018aa8:	08022048 	.word	0x08022048
 8018aac:	0801e950 	.word	0x0801e950

08018ab0 <tcp_init>:
{
 8018ab0:	4770      	bx	lr
	...

08018ab4 <tcp_bind>:
{
 8018ab4:	b570      	push	{r4, r5, r6, lr}
 8018ab6:	4605      	mov	r5, r0
  if (ipaddr == NULL) {
 8018ab8:	460c      	mov	r4, r1
 8018aba:	b171      	cbz	r1, 8018ada <tcp_bind+0x26>
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8018abc:	2d00      	cmp	r5, #0
 8018abe:	d039      	beq.n	8018b34 <tcp_bind+0x80>
 8018ac0:	2c00      	cmp	r4, #0
 8018ac2:	d03a      	beq.n	8018b3a <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018ac4:	7d2b      	ldrb	r3, [r5, #20]
 8018ac6:	b953      	cbnz	r3, 8018ade <tcp_bind+0x2a>
  if (port == 0) {
 8018ac8:	b19a      	cbz	r2, 8018af2 <tcp_bind+0x3e>
 8018aca:	2600      	movs	r6, #0
    for (i = 0; i < max_pcb_list; i++) {
 8018acc:	2e03      	cmp	r6, #3
 8018ace:	dc14      	bgt.n	8018afa <tcp_bind+0x46>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018ad0:	4b21      	ldr	r3, [pc, #132]	; (8018b58 <tcp_bind+0xa4>)
 8018ad2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	e01c      	b.n	8018b14 <tcp_bind+0x60>
    ipaddr = IP4_ADDR_ANY;
 8018ada:	4c20      	ldr	r4, [pc, #128]	; (8018b5c <tcp_bind+0xa8>)
 8018adc:	e7ee      	b.n	8018abc <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018ade:	4b20      	ldr	r3, [pc, #128]	; (8018b60 <tcp_bind+0xac>)
 8018ae0:	f44f 7211 	mov.w	r2, #580	; 0x244
 8018ae4:	491f      	ldr	r1, [pc, #124]	; (8018b64 <tcp_bind+0xb0>)
 8018ae6:	4820      	ldr	r0, [pc, #128]	; (8018b68 <tcp_bind+0xb4>)
 8018ae8:	f005 f9fd 	bl	801dee6 <iprintf>
 8018aec:	f06f 0005 	mvn.w	r0, #5
 8018af0:	bd70      	pop	{r4, r5, r6, pc}
    port = tcp_new_port();
 8018af2:	f7ff ff3d 	bl	8018970 <tcp_new_port>
    if (port == 0) {
 8018af6:	4602      	mov	r2, r0
 8018af8:	b310      	cbz	r0, 8018b40 <tcp_bind+0x8c>
  if (!ip_addr_isany(ipaddr)) {
 8018afa:	6823      	ldr	r3, [r4, #0]
 8018afc:	b103      	cbz	r3, 8018b00 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8018afe:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8018b00:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018b02:	4b1a      	ldr	r3, [pc, #104]	; (8018b6c <tcp_bind+0xb8>)
 8018b04:	681a      	ldr	r2, [r3, #0]
 8018b06:	60ea      	str	r2, [r5, #12]
 8018b08:	601d      	str	r5, [r3, #0]
 8018b0a:	f003 fbf9 	bl	801c300 <tcp_timer_needed>
  return ERR_OK;
 8018b0e:	2000      	movs	r0, #0
 8018b10:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018b12:	68db      	ldr	r3, [r3, #12]
 8018b14:	b163      	cbz	r3, 8018b30 <tcp_bind+0x7c>
        if (cpcb->local_port == port) {
 8018b16:	8ad9      	ldrh	r1, [r3, #22]
 8018b18:	428a      	cmp	r2, r1
 8018b1a:	d1fa      	bne.n	8018b12 <tcp_bind+0x5e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018b1c:	b19b      	cbz	r3, 8018b46 <tcp_bind+0x92>
                (ip_addr_isany(&cpcb->local_ip) ||
 8018b1e:	6819      	ldr	r1, [r3, #0]
 8018b20:	b1a1      	cbz	r1, 8018b4c <tcp_bind+0x98>
                ip_addr_isany(ipaddr) ||
 8018b22:	6820      	ldr	r0, [r4, #0]
 8018b24:	b1a8      	cbz	r0, 8018b52 <tcp_bind+0x9e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018b26:	4281      	cmp	r1, r0
 8018b28:	d1f3      	bne.n	8018b12 <tcp_bind+0x5e>
              return ERR_USE;
 8018b2a:	f06f 0007 	mvn.w	r0, #7
}
 8018b2e:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8018b30:	3601      	adds	r6, #1
 8018b32:	e7cb      	b.n	8018acc <tcp_bind+0x18>
    return ERR_VAL;
 8018b34:	f06f 0005 	mvn.w	r0, #5
 8018b38:	bd70      	pop	{r4, r5, r6, pc}
 8018b3a:	f06f 0005 	mvn.w	r0, #5
 8018b3e:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_BUF;
 8018b40:	f06f 0001 	mvn.w	r0, #1
 8018b44:	bd70      	pop	{r4, r5, r6, pc}
              return ERR_USE;
 8018b46:	f06f 0007 	mvn.w	r0, #7
 8018b4a:	bd70      	pop	{r4, r5, r6, pc}
 8018b4c:	f06f 0007 	mvn.w	r0, #7
 8018b50:	bd70      	pop	{r4, r5, r6, pc}
 8018b52:	f06f 0007 	mvn.w	r0, #7
 8018b56:	bd70      	pop	{r4, r5, r6, pc}
 8018b58:	08022090 	.word	0x08022090
 8018b5c:	08021640 	.word	0x08021640
 8018b60:	08022018 	.word	0x08022018
 8018b64:	08021f9c 	.word	0x08021f9c
 8018b68:	0801e950 	.word	0x0801e950
 8018b6c:	20008af4 	.word	0x20008af4

08018b70 <tcp_listen_with_backlog_and_err>:
{
 8018b70:	b570      	push	{r4, r5, r6, lr}
 8018b72:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018b74:	7d03      	ldrb	r3, [r0, #20]
 8018b76:	bb23      	cbnz	r3, 8018bc2 <tcp_listen_with_backlog_and_err+0x52>
 8018b78:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 8018b7a:	2b01      	cmp	r3, #1
 8018b7c:	d042      	beq.n	8018c04 <tcp_listen_with_backlog_and_err+0x94>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018b7e:	2002      	movs	r0, #2
 8018b80:	f7ff f9f4 	bl	8017f6c <memp_malloc>
  if (lpcb == NULL) {
 8018b84:	4605      	mov	r5, r0
 8018b86:	2800      	cmp	r0, #0
 8018b88:	d043      	beq.n	8018c12 <tcp_listen_with_backlog_and_err+0xa2>
  lpcb->callback_arg = pcb->callback_arg;
 8018b8a:	6923      	ldr	r3, [r4, #16]
 8018b8c:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8018b8e:	8ae3      	ldrh	r3, [r4, #22]
 8018b90:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8018b92:	2301      	movs	r3, #1
 8018b94:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8018b96:	7d63      	ldrb	r3, [r4, #21]
 8018b98:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8018b9a:	7a23      	ldrb	r3, [r4, #8]
 8018b9c:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8018b9e:	7aa3      	ldrb	r3, [r4, #10]
 8018ba0:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 8018ba2:	7a63      	ldrb	r3, [r4, #9]
 8018ba4:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018ba6:	6823      	ldr	r3, [r4, #0]
 8018ba8:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8018baa:	8ae3      	ldrh	r3, [r4, #22]
 8018bac:	b1e3      	cbz	r3, 8018be8 <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018bae:	4b1a      	ldr	r3, [pc, #104]	; (8018c18 <tcp_listen_with_backlog_and_err+0xa8>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	429c      	cmp	r4, r3
 8018bb4:	d010      	beq.n	8018bd8 <tcp_listen_with_backlog_and_err+0x68>
 8018bb6:	b1ab      	cbz	r3, 8018be4 <tcp_listen_with_backlog_and_err+0x74>
 8018bb8:	68da      	ldr	r2, [r3, #12]
 8018bba:	4294      	cmp	r4, r2
 8018bbc:	d010      	beq.n	8018be0 <tcp_listen_with_backlog_and_err+0x70>
 8018bbe:	4613      	mov	r3, r2
 8018bc0:	e7f9      	b.n	8018bb6 <tcp_listen_with_backlog_and_err+0x46>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018bc2:	4b16      	ldr	r3, [pc, #88]	; (8018c1c <tcp_listen_with_backlog_and_err+0xac>)
 8018bc4:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8018bc8:	4915      	ldr	r1, [pc, #84]	; (8018c20 <tcp_listen_with_backlog_and_err+0xb0>)
 8018bca:	4816      	ldr	r0, [pc, #88]	; (8018c24 <tcp_listen_with_backlog_and_err+0xb4>)
 8018bcc:	f005 f98b 	bl	801dee6 <iprintf>
 8018bd0:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8018bd4:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018bd6:	e018      	b.n	8018c0a <tcp_listen_with_backlog_and_err+0x9a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018bd8:	68da      	ldr	r2, [r3, #12]
 8018bda:	4b0f      	ldr	r3, [pc, #60]	; (8018c18 <tcp_listen_with_backlog_and_err+0xa8>)
 8018bdc:	601a      	str	r2, [r3, #0]
 8018bde:	e001      	b.n	8018be4 <tcp_listen_with_backlog_and_err+0x74>
 8018be0:	68e2      	ldr	r2, [r4, #12]
 8018be2:	60da      	str	r2, [r3, #12]
 8018be4:	2300      	movs	r3, #0
 8018be6:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8018be8:	4621      	mov	r1, r4
 8018bea:	2001      	movs	r0, #1
 8018bec:	f7ff f9d8 	bl	8017fa0 <memp_free>
  lpcb->accept = tcp_accept_null;
 8018bf0:	4b0d      	ldr	r3, [pc, #52]	; (8018c28 <tcp_listen_with_backlog_and_err+0xb8>)
 8018bf2:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018bf4:	4b0d      	ldr	r3, [pc, #52]	; (8018c2c <tcp_listen_with_backlog_and_err+0xbc>)
 8018bf6:	681a      	ldr	r2, [r3, #0]
 8018bf8:	60ea      	str	r2, [r5, #12]
 8018bfa:	601d      	str	r5, [r3, #0]
 8018bfc:	f003 fb80 	bl	801c300 <tcp_timer_needed>
  res = ERR_OK;
 8018c00:	2300      	movs	r3, #0
 8018c02:	e002      	b.n	8018c0a <tcp_listen_with_backlog_and_err+0x9a>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8018c04:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 8018c06:	f06f 0308 	mvn.w	r3, #8
  if (err != NULL) {
 8018c0a:	b106      	cbz	r6, 8018c0e <tcp_listen_with_backlog_and_err+0x9e>
    *err = res;
 8018c0c:	7033      	strb	r3, [r6, #0]
}
 8018c0e:	4628      	mov	r0, r5
 8018c10:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8018c12:	f04f 33ff 	mov.w	r3, #4294967295
 8018c16:	e7f8      	b.n	8018c0a <tcp_listen_with_backlog_and_err+0x9a>
 8018c18:	20008af4 	.word	0x20008af4
 8018c1c:	08022018 	.word	0x08022018
 8018c20:	0802206c 	.word	0x0802206c
 8018c24:	0801e950 	.word	0x0801e950
 8018c28:	08019737 	.word	0x08019737
 8018c2c:	20008af0 	.word	0x20008af0

08018c30 <tcp_update_rcv_ann_wnd>:
{
 8018c30:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018c32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018c34:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8018c36:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018c38:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8018c3a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8018c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018c40:	d901      	bls.n	8018c46 <tcp_update_rcv_ann_wnd+0x16>
 8018c42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018c46:	440b      	add	r3, r1
 8018c48:	1ad3      	subs	r3, r2, r3
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	db02      	blt.n	8018c54 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018c4e:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8018c50:	1a50      	subs	r0, r2, r1
 8018c52:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018c54:	1a6b      	subs	r3, r5, r1
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	dd03      	ble.n	8018c62 <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	8542      	strh	r2, [r0, #42]	; 0x2a
    return 0;
 8018c5e:	4610      	mov	r0, r2
 8018c60:	bd38      	pop	{r3, r4, r5, pc}
 8018c62:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8018c64:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018c66:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8018c6a:	d202      	bcs.n	8018c72 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8018c6c:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8018c6e:	2000      	movs	r0, #0
}
 8018c70:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018c72:	4b04      	ldr	r3, [pc, #16]	; (8018c84 <tcp_update_rcv_ann_wnd+0x54>)
 8018c74:	f44f 7242 	mov.w	r2, #776	; 0x308
 8018c78:	4903      	ldr	r1, [pc, #12]	; (8018c88 <tcp_update_rcv_ann_wnd+0x58>)
 8018c7a:	4804      	ldr	r0, [pc, #16]	; (8018c8c <tcp_update_rcv_ann_wnd+0x5c>)
 8018c7c:	f005 f933 	bl	801dee6 <iprintf>
 8018c80:	e7f4      	b.n	8018c6c <tcp_update_rcv_ann_wnd+0x3c>
 8018c82:	bf00      	nop
 8018c84:	08022018 	.word	0x08022018
 8018c88:	08022310 	.word	0x08022310
 8018c8c:	0801e950 	.word	0x0801e950

08018c90 <tcp_recved>:
{
 8018c90:	b538      	push	{r3, r4, r5, lr}
 8018c92:	4605      	mov	r5, r0
 8018c94:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018c96:	7d03      	ldrb	r3, [r0, #20]
 8018c98:	2b01      	cmp	r3, #1
 8018c9a:	d010      	beq.n	8018cbe <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 8018c9c:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8018c9e:	4421      	add	r1, r4
 8018ca0:	b289      	uxth	r1, r1
 8018ca2:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8018ca4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8018ca8:	d911      	bls.n	8018cce <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018cae:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8018cb0:	4628      	mov	r0, r5
 8018cb2:	f7ff ffbd 	bl	8018c30 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8018cb6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018cba:	da1b      	bge.n	8018cf4 <tcp_recved+0x64>
 8018cbc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018cbe:	4b11      	ldr	r3, [pc, #68]	; (8018d04 <tcp_recved+0x74>)
 8018cc0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018cc4:	4910      	ldr	r1, [pc, #64]	; (8018d08 <tcp_recved+0x78>)
 8018cc6:	4811      	ldr	r0, [pc, #68]	; (8018d0c <tcp_recved+0x7c>)
 8018cc8:	f005 f90d 	bl	801dee6 <iprintf>
 8018ccc:	e7e6      	b.n	8018c9c <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 8018cce:	2900      	cmp	r1, #0
 8018cd0:	d1ee      	bne.n	8018cb0 <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8018cd2:	7d2b      	ldrb	r3, [r5, #20]
 8018cd4:	2b07      	cmp	r3, #7
 8018cd6:	d009      	beq.n	8018cec <tcp_recved+0x5c>
 8018cd8:	2b09      	cmp	r3, #9
 8018cda:	d007      	beq.n	8018cec <tcp_recved+0x5c>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8018cdc:	4b09      	ldr	r3, [pc, #36]	; (8018d04 <tcp_recved+0x74>)
 8018cde:	f240 322d 	movw	r2, #813	; 0x32d
 8018ce2:	490b      	ldr	r1, [pc, #44]	; (8018d10 <tcp_recved+0x80>)
 8018ce4:	4809      	ldr	r0, [pc, #36]	; (8018d0c <tcp_recved+0x7c>)
 8018ce6:	f005 f8fe 	bl	801dee6 <iprintf>
 8018cea:	e7e1      	b.n	8018cb0 <tcp_recved+0x20>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018cf0:	852b      	strh	r3, [r5, #40]	; 0x28
 8018cf2:	e7dd      	b.n	8018cb0 <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8018cf4:	7eab      	ldrb	r3, [r5, #26]
 8018cf6:	f043 0302 	orr.w	r3, r3, #2
 8018cfa:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 8018cfc:	4628      	mov	r0, r5
 8018cfe:	f002 ff97 	bl	801bc30 <tcp_output>
}
 8018d02:	e7db      	b.n	8018cbc <tcp_recved+0x2c>
 8018d04:	08022018 	.word	0x08022018
 8018d08:	0802213c 	.word	0x0802213c
 8018d0c:	0801e950 	.word	0x0801e950
 8018d10:	08022164 	.word	0x08022164

08018d14 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8018d14:	b150      	cbz	r0, 8018d2c <tcp_seg_free+0x18>
{
 8018d16:	b510      	push	{r4, lr}
 8018d18:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8018d1a:	6840      	ldr	r0, [r0, #4]
 8018d1c:	b108      	cbz	r0, 8018d22 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8018d1e:	f7ff fb15 	bl	801834c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018d22:	4621      	mov	r1, r4
 8018d24:	2003      	movs	r0, #3
 8018d26:	f7ff f93b 	bl	8017fa0 <memp_free>
 8018d2a:	bd10      	pop	{r4, pc}
 8018d2c:	4770      	bx	lr

08018d2e <tcp_segs_free>:
  while (seg != NULL) {
 8018d2e:	b138      	cbz	r0, 8018d40 <tcp_segs_free+0x12>
{
 8018d30:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8018d32:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8018d34:	f7ff ffee 	bl	8018d14 <tcp_seg_free>
    seg = next;
 8018d38:	4620      	mov	r0, r4
  while (seg != NULL) {
 8018d3a:	2c00      	cmp	r4, #0
 8018d3c:	d1f9      	bne.n	8018d32 <tcp_segs_free+0x4>
}
 8018d3e:	bd10      	pop	{r4, pc}
 8018d40:	4770      	bx	lr

08018d42 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018d42:	b538      	push	{r3, r4, r5, lr}
 8018d44:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018d46:	2003      	movs	r0, #3
 8018d48:	f7ff f910 	bl	8017f6c <memp_malloc>
  if (cseg == NULL) {
 8018d4c:	4604      	mov	r4, r0
 8018d4e:	b150      	cbz	r0, 8018d66 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8018d50:	6828      	ldr	r0, [r5, #0]
 8018d52:	6869      	ldr	r1, [r5, #4]
 8018d54:	68aa      	ldr	r2, [r5, #8]
 8018d56:	68eb      	ldr	r3, [r5, #12]
 8018d58:	6020      	str	r0, [r4, #0]
 8018d5a:	6061      	str	r1, [r4, #4]
 8018d5c:	60a2      	str	r2, [r4, #8]
 8018d5e:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8018d60:	6860      	ldr	r0, [r4, #4]
 8018d62:	f7ff fcc3 	bl	80186ec <pbuf_ref>
  return cseg;
}
 8018d66:	4620      	mov	r0, r4
 8018d68:	bd38      	pop	{r3, r4, r5, pc}

08018d6a <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8018d6a:	b100      	cbz	r0, 8018d6e <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8018d6c:	6101      	str	r1, [r0, #16]
 8018d6e:	4770      	bx	lr

08018d70 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 8018d70:	b180      	cbz	r0, 8018d94 <tcp_recv+0x24>
{
 8018d72:	b538      	push	{r3, r4, r5, lr}
 8018d74:	4604      	mov	r4, r0
 8018d76:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018d78:	7d03      	ldrb	r3, [r0, #20]
 8018d7a:	2b01      	cmp	r3, #1
 8018d7c:	d002      	beq.n	8018d84 <tcp_recv+0x14>
    pcb->recv = recv;
 8018d7e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8018d82:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018d84:	4b04      	ldr	r3, [pc, #16]	; (8018d98 <tcp_recv+0x28>)
 8018d86:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8018d8a:	4904      	ldr	r1, [pc, #16]	; (8018d9c <tcp_recv+0x2c>)
 8018d8c:	4804      	ldr	r0, [pc, #16]	; (8018da0 <tcp_recv+0x30>)
 8018d8e:	f005 f8aa 	bl	801dee6 <iprintf>
 8018d92:	e7f4      	b.n	8018d7e <tcp_recv+0xe>
 8018d94:	4770      	bx	lr
 8018d96:	bf00      	nop
 8018d98:	08022018 	.word	0x08022018
 8018d9c:	08022114 	.word	0x08022114
 8018da0:	0801e950 	.word	0x0801e950

08018da4 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 8018da4:	b178      	cbz	r0, 8018dc6 <tcp_sent+0x22>
{
 8018da6:	b538      	push	{r3, r4, r5, lr}
 8018da8:	4604      	mov	r4, r0
 8018daa:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018dac:	7d03      	ldrb	r3, [r0, #20]
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	d001      	beq.n	8018db6 <tcp_sent+0x12>
    pcb->sent = sent;
 8018db2:	67e5      	str	r5, [r4, #124]	; 0x7c
 8018db4:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018db6:	4b04      	ldr	r3, [pc, #16]	; (8018dc8 <tcp_sent+0x24>)
 8018db8:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8018dbc:	4903      	ldr	r1, [pc, #12]	; (8018dcc <tcp_sent+0x28>)
 8018dbe:	4804      	ldr	r0, [pc, #16]	; (8018dd0 <tcp_sent+0x2c>)
 8018dc0:	f005 f891 	bl	801dee6 <iprintf>
 8018dc4:	e7f5      	b.n	8018db2 <tcp_sent+0xe>
 8018dc6:	4770      	bx	lr
 8018dc8:	08022018 	.word	0x08022018
 8018dcc:	08022188 	.word	0x08022188
 8018dd0:	0801e950 	.word	0x0801e950

08018dd4 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 8018dd4:	b180      	cbz	r0, 8018df8 <tcp_err+0x24>
{
 8018dd6:	b538      	push	{r3, r4, r5, lr}
 8018dd8:	4604      	mov	r4, r0
 8018dda:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018ddc:	7d03      	ldrb	r3, [r0, #20]
 8018dde:	2b01      	cmp	r3, #1
 8018de0:	d002      	beq.n	8018de8 <tcp_err+0x14>
    pcb->errf = err;
 8018de2:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8018de6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018de8:	4b04      	ldr	r3, [pc, #16]	; (8018dfc <tcp_err+0x28>)
 8018dea:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8018dee:	4904      	ldr	r1, [pc, #16]	; (8018e00 <tcp_err+0x2c>)
 8018df0:	4804      	ldr	r0, [pc, #16]	; (8018e04 <tcp_err+0x30>)
 8018df2:	f005 f878 	bl	801dee6 <iprintf>
 8018df6:	e7f4      	b.n	8018de2 <tcp_err+0xe>
 8018df8:	4770      	bx	lr
 8018dfa:	bf00      	nop
 8018dfc:	08022018 	.word	0x08022018
 8018e00:	08021fe0 	.word	0x08021fe0
 8018e04:	0801e950 	.word	0x0801e950

08018e08 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8018e08:	b110      	cbz	r0, 8018e10 <tcp_accept+0x8>
 8018e0a:	7d02      	ldrb	r2, [r0, #20]
 8018e0c:	2a01      	cmp	r2, #1
 8018e0e:	d000      	beq.n	8018e12 <tcp_accept+0xa>
 8018e10:	4770      	bx	lr
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8018e12:	6181      	str	r1, [r0, #24]
  }
}
 8018e14:	e7fc      	b.n	8018e10 <tcp_accept+0x8>
	...

08018e18 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8018e18:	b570      	push	{r4, r5, r6, lr}
 8018e1a:	4604      	mov	r4, r0
 8018e1c:	460e      	mov	r6, r1
 8018e1e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018e20:	7d03      	ldrb	r3, [r0, #20]
 8018e22:	2b01      	cmp	r3, #1
 8018e24:	d003      	beq.n	8018e2e <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8018e26:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8018e2a:	7725      	strb	r5, [r4, #28]
 8018e2c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018e2e:	4b04      	ldr	r3, [pc, #16]	; (8018e40 <tcp_poll+0x28>)
 8018e30:	f240 7203 	movw	r2, #1795	; 0x703
 8018e34:	4903      	ldr	r1, [pc, #12]	; (8018e44 <tcp_poll+0x2c>)
 8018e36:	4804      	ldr	r0, [pc, #16]	; (8018e48 <tcp_poll+0x30>)
 8018e38:	f005 f855 	bl	801dee6 <iprintf>
 8018e3c:	e7f3      	b.n	8018e26 <tcp_poll+0xe>
 8018e3e:	bf00      	nop
 8018e40:	08022018 	.word	0x08022018
 8018e44:	080220f4 	.word	0x080220f4
 8018e48:	0801e950 	.word	0x0801e950

08018e4c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8018e4c:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8018e4e:	7d03      	ldrb	r3, [r0, #20]
 8018e50:	b1e3      	cbz	r3, 8018e8c <tcp_pcb_purge+0x40>
 8018e52:	2b0a      	cmp	r3, #10
 8018e54:	d01a      	beq.n	8018e8c <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 8018e56:	2b01      	cmp	r3, #1
 8018e58:	d018      	beq.n	8018e8c <tcp_pcb_purge+0x40>
 8018e5a:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8018e5c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8018e5e:	b118      	cbz	r0, 8018e68 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8018e60:	f7ff fa74 	bl	801834c <pbuf_free>
      pcb->refused_data = NULL;
 8018e64:	2300      	movs	r3, #0
 8018e66:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8018e68:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8018e6a:	f7ff ff60 	bl	8018d2e <tcp_segs_free>
    pcb->ooseq = NULL;
 8018e6e:	2500      	movs	r5, #0
 8018e70:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8018e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018e76:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8018e78:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8018e7a:	f7ff ff58 	bl	8018d2e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8018e7e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8018e80:	f7ff ff55 	bl	8018d2e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8018e84:	66a5      	str	r5, [r4, #104]	; 0x68
 8018e86:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8018e88:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8018e8c:	bd38      	pop	{r3, r4, r5, pc}
	...

08018e90 <tcp_slowtmr>:
{
 8018e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e94:	b082      	sub	sp, #8
  ++tcp_ticks;
 8018e96:	4aae      	ldr	r2, [pc, #696]	; (8019150 <tcp_slowtmr+0x2c0>)
 8018e98:	6813      	ldr	r3, [r2, #0]
 8018e9a:	3301      	adds	r3, #1
 8018e9c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8018e9e:	4aad      	ldr	r2, [pc, #692]	; (8019154 <tcp_slowtmr+0x2c4>)
 8018ea0:	7813      	ldrb	r3, [r2, #0]
 8018ea2:	3301      	adds	r3, #1
 8018ea4:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8018ea6:	4bac      	ldr	r3, [pc, #688]	; (8019158 <tcp_slowtmr+0x2c8>)
 8018ea8:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8018eaa:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8018eac:	e018      	b.n	8018ee0 <tcp_slowtmr+0x50>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018eae:	4bab      	ldr	r3, [pc, #684]	; (801915c <tcp_slowtmr+0x2cc>)
 8018eb0:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8018eb4:	49aa      	ldr	r1, [pc, #680]	; (8019160 <tcp_slowtmr+0x2d0>)
 8018eb6:	48ab      	ldr	r0, [pc, #684]	; (8019164 <tcp_slowtmr+0x2d4>)
 8018eb8:	f005 f815 	bl	801dee6 <iprintf>
 8018ebc:	e016      	b.n	8018eec <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018ebe:	4ba7      	ldr	r3, [pc, #668]	; (801915c <tcp_slowtmr+0x2cc>)
 8018ec0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018ec4:	49a8      	ldr	r1, [pc, #672]	; (8019168 <tcp_slowtmr+0x2d8>)
 8018ec6:	48a7      	ldr	r0, [pc, #668]	; (8019164 <tcp_slowtmr+0x2d4>)
 8018ec8:	f005 f80d 	bl	801dee6 <iprintf>
 8018ecc:	e011      	b.n	8018ef2 <tcp_slowtmr+0x62>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8018ece:	4ba3      	ldr	r3, [pc, #652]	; (801915c <tcp_slowtmr+0x2cc>)
 8018ed0:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8018ed4:	49a5      	ldr	r1, [pc, #660]	; (801916c <tcp_slowtmr+0x2dc>)
 8018ed6:	48a3      	ldr	r0, [pc, #652]	; (8019164 <tcp_slowtmr+0x2d4>)
 8018ed8:	f005 f805 	bl	801dee6 <iprintf>
 8018edc:	e00c      	b.n	8018ef8 <tcp_slowtmr+0x68>
      pcb = pcb->next;
 8018ede:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8018ee0:	2c00      	cmp	r4, #0
 8018ee2:	f000 817c 	beq.w	80191de <tcp_slowtmr+0x34e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018ee6:	7d23      	ldrb	r3, [r4, #20]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d0e0      	beq.n	8018eae <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018eec:	7d23      	ldrb	r3, [r4, #20]
 8018eee:	2b01      	cmp	r3, #1
 8018ef0:	d0e5      	beq.n	8018ebe <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8018ef2:	7d23      	ldrb	r3, [r4, #20]
 8018ef4:	2b0a      	cmp	r3, #10
 8018ef6:	d0ea      	beq.n	8018ece <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8018ef8:	7f62      	ldrb	r2, [r4, #29]
 8018efa:	4b96      	ldr	r3, [pc, #600]	; (8019154 <tcp_slowtmr+0x2c4>)
 8018efc:	781b      	ldrb	r3, [r3, #0]
 8018efe:	429a      	cmp	r2, r3
 8018f00:	d0ed      	beq.n	8018ede <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8018f02:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8018f04:	7d23      	ldrb	r3, [r4, #20]
 8018f06:	2b02      	cmp	r3, #2
 8018f08:	d016      	beq.n	8018f38 <tcp_slowtmr+0xa8>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8018f0a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8018f0e:	2a0b      	cmp	r2, #11
 8018f10:	d860      	bhi.n	8018fd4 <tcp_slowtmr+0x144>
      if (pcb->persist_backoff > 0) {
 8018f12:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 8018f16:	b335      	cbz	r5, 8018f66 <tcp_slowtmr+0xd6>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8018f18:	3d01      	subs	r5, #1
 8018f1a:	4b95      	ldr	r3, [pc, #596]	; (8019170 <tcp_slowtmr+0x2e0>)
 8018f1c:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 8018f1e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8018f22:	429a      	cmp	r2, r3
 8018f24:	d902      	bls.n	8018f2c <tcp_slowtmr+0x9c>
          pcb->persist_cnt++;
 8018f26:	3301      	adds	r3, #1
 8018f28:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8018f2c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8018f30:	429a      	cmp	r2, r3
 8018f32:	d907      	bls.n	8018f44 <tcp_slowtmr+0xb4>
    pcb_remove = 0;
 8018f34:	2500      	movs	r5, #0
 8018f36:	e04e      	b.n	8018fd6 <tcp_slowtmr+0x146>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8018f38:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8018f3c:	2a05      	cmp	r2, #5
 8018f3e:	d9e4      	bls.n	8018f0a <tcp_slowtmr+0x7a>
      ++pcb_remove;
 8018f40:	2501      	movs	r5, #1
 8018f42:	e048      	b.n	8018fd6 <tcp_slowtmr+0x146>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8018f44:	4620      	mov	r0, r4
 8018f46:	f003 f8c0 	bl	801c0ca <tcp_zero_window_probe>
 8018f4a:	2800      	cmp	r0, #0
 8018f4c:	d150      	bne.n	8018ff0 <tcp_slowtmr+0x160>
            pcb->persist_cnt = 0;
 8018f4e:	2300      	movs	r3, #0
 8018f50:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8018f54:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8018f58:	2b06      	cmp	r3, #6
 8018f5a:	d84b      	bhi.n	8018ff4 <tcp_slowtmr+0x164>
              pcb->persist_backoff++;
 8018f5c:	3301      	adds	r3, #1
 8018f5e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 8018f62:	2500      	movs	r5, #0
 8018f64:	e037      	b.n	8018fd6 <tcp_slowtmr+0x146>
        if (pcb->rtime >= 0) {
 8018f66:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8018f6a:	2900      	cmp	r1, #0
 8018f6c:	db01      	blt.n	8018f72 <tcp_slowtmr+0xe2>
          ++pcb->rtime;
 8018f6e:	3101      	adds	r1, #1
 8018f70:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8018f72:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8018f74:	b379      	cbz	r1, 8018fd6 <tcp_slowtmr+0x146>
 8018f76:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8018f7a:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8018f7e:	4288      	cmp	r0, r1
 8018f80:	db29      	blt.n	8018fd6 <tcp_slowtmr+0x146>
          if (pcb->state != SYN_SENT) {
 8018f82:	2b02      	cmp	r3, #2
 8018f84:	d00d      	beq.n	8018fa2 <tcp_slowtmr+0x112>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8018f86:	2a0c      	cmp	r2, #12
 8018f88:	bf28      	it	cs
 8018f8a:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8018f8c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8018f90:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8018f94:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8018f98:	4976      	ldr	r1, [pc, #472]	; (8019174 <tcp_slowtmr+0x2e4>)
 8018f9a:	5c8a      	ldrb	r2, [r1, r2]
 8018f9c:	4093      	lsls	r3, r2
 8018f9e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8018fa6:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8018faa:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8018fae:	4293      	cmp	r3, r2
 8018fb0:	bf28      	it	cs
 8018fb2:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8018fb4:	085b      	lsrs	r3, r3, #1
 8018fb6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8018fba:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8018fbc:	004a      	lsls	r2, r1, #1
 8018fbe:	b292      	uxth	r2, r2
 8018fc0:	4293      	cmp	r3, r2
 8018fc2:	d201      	bcs.n	8018fc8 <tcp_slowtmr+0x138>
            pcb->ssthresh = (pcb->mss << 1);
 8018fc4:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 8018fc8:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 8018fcc:	4620      	mov	r0, r4
 8018fce:	f002 ffdf 	bl	801bf90 <tcp_rexmit_rto>
 8018fd2:	e000      	b.n	8018fd6 <tcp_slowtmr+0x146>
      ++pcb_remove;
 8018fd4:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8018fd6:	7d23      	ldrb	r3, [r4, #20]
 8018fd8:	2b06      	cmp	r3, #6
 8018fda:	d00d      	beq.n	8018ff8 <tcp_slowtmr+0x168>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8018fdc:	7a22      	ldrb	r2, [r4, #8]
 8018fde:	f012 0f08 	tst.w	r2, #8
 8018fe2:	d043      	beq.n	801906c <tcp_slowtmr+0x1dc>
 8018fe4:	2b04      	cmp	r3, #4
 8018fe6:	d014      	beq.n	8019012 <tcp_slowtmr+0x182>
       ((pcb->state == ESTABLISHED) ||
 8018fe8:	2b07      	cmp	r3, #7
 8018fea:	d012      	beq.n	8019012 <tcp_slowtmr+0x182>
    pcb_reset = 0;
 8018fec:	2700      	movs	r7, #0
 8018fee:	e03e      	b.n	801906e <tcp_slowtmr+0x1de>
    pcb_remove = 0;
 8018ff0:	2500      	movs	r5, #0
 8018ff2:	e7f0      	b.n	8018fd6 <tcp_slowtmr+0x146>
 8018ff4:	2500      	movs	r5, #0
 8018ff6:	e7ee      	b.n	8018fd6 <tcp_slowtmr+0x146>
      if (pcb->flags & TF_RXCLOSED) {
 8018ff8:	7ea2      	ldrb	r2, [r4, #26]
 8018ffa:	f012 0f10 	tst.w	r2, #16
 8018ffe:	d0ed      	beq.n	8018fdc <tcp_slowtmr+0x14c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019000:	6a21      	ldr	r1, [r4, #32]
 8019002:	4a53      	ldr	r2, [pc, #332]	; (8019150 <tcp_slowtmr+0x2c0>)
 8019004:	6812      	ldr	r2, [r2, #0]
 8019006:	1a52      	subs	r2, r2, r1
 8019008:	2a28      	cmp	r2, #40	; 0x28
 801900a:	d9e7      	bls.n	8018fdc <tcp_slowtmr+0x14c>
          ++pcb_remove;
 801900c:	3501      	adds	r5, #1
 801900e:	b2ed      	uxtb	r5, r5
 8019010:	e7e4      	b.n	8018fdc <tcp_slowtmr+0x14c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019012:	4b4f      	ldr	r3, [pc, #316]	; (8019150 <tcp_slowtmr+0x2c0>)
 8019014:	681a      	ldr	r2, [r3, #0]
 8019016:	6a23      	ldr	r3, [r4, #32]
 8019018:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 801901a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801901e:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8019022:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8019026:	4854      	ldr	r0, [pc, #336]	; (8019178 <tcp_slowtmr+0x2e8>)
 8019028:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801902c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8019030:	d903      	bls.n	801903a <tcp_slowtmr+0x1aa>
        ++pcb_remove;
 8019032:	3501      	adds	r5, #1
 8019034:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8019036:	2701      	movs	r7, #1
 8019038:	e019      	b.n	801906e <tcp_slowtmr+0x1de>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801903a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 801903e:	484f      	ldr	r0, [pc, #316]	; (801917c <tcp_slowtmr+0x2ec>)
 8019040:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 8019044:	494c      	ldr	r1, [pc, #304]	; (8019178 <tcp_slowtmr+0x2e8>)
 8019046:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801904a:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801904e:	d801      	bhi.n	8019054 <tcp_slowtmr+0x1c4>
    pcb_reset = 0;
 8019050:	2700      	movs	r7, #0
 8019052:	e00c      	b.n	801906e <tcp_slowtmr+0x1de>
        err = tcp_keepalive(pcb);
 8019054:	4620      	mov	r0, r4
 8019056:	f003 f80c 	bl	801c072 <tcp_keepalive>
        if (err == ERR_OK) {
 801905a:	2800      	cmp	r0, #0
 801905c:	d13a      	bne.n	80190d4 <tcp_slowtmr+0x244>
          pcb->keep_cnt_sent++;
 801905e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8019062:	3301      	adds	r3, #1
 8019064:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8019068:	2700      	movs	r7, #0
 801906a:	e000      	b.n	801906e <tcp_slowtmr+0x1de>
 801906c:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 801906e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8019070:	b150      	cbz	r0, 8019088 <tcp_slowtmr+0x1f8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8019072:	4b37      	ldr	r3, [pc, #220]	; (8019150 <tcp_slowtmr+0x2c0>)
 8019074:	681a      	ldr	r2, [r3, #0]
 8019076:	6a23      	ldr	r3, [r4, #32]
 8019078:	1ad2      	subs	r2, r2, r3
 801907a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801907e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019082:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 8019084:	428a      	cmp	r2, r1
 8019086:	d227      	bcs.n	80190d8 <tcp_slowtmr+0x248>
    if (pcb->state == SYN_RCVD) {
 8019088:	7d23      	ldrb	r3, [r4, #20]
 801908a:	2b03      	cmp	r3, #3
 801908c:	d029      	beq.n	80190e2 <tcp_slowtmr+0x252>
    if (pcb->state == LAST_ACK) {
 801908e:	2b09      	cmp	r3, #9
 8019090:	d030      	beq.n	80190f4 <tcp_slowtmr+0x264>
    if (pcb_remove) {
 8019092:	2d00      	cmp	r5, #0
 8019094:	d137      	bne.n	8019106 <tcp_slowtmr+0x276>
      pcb = pcb->next;
 8019096:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8019098:	7ee3      	ldrb	r3, [r4, #27]
 801909a:	3301      	adds	r3, #1
 801909c:	b2db      	uxtb	r3, r3
 801909e:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80190a0:	7f22      	ldrb	r2, [r4, #28]
 80190a2:	4293      	cmp	r3, r2
 80190a4:	f0c0 8098 	bcc.w	80191d8 <tcp_slowtmr+0x348>
        prev->polltmr = 0;
 80190a8:	2300      	movs	r3, #0
 80190aa:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 80190ac:	4a34      	ldr	r2, [pc, #208]	; (8019180 <tcp_slowtmr+0x2f0>)
 80190ae:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 80190b0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	f000 8087 	beq.w	80191c8 <tcp_slowtmr+0x338>
 80190ba:	4621      	mov	r1, r4
 80190bc:	6920      	ldr	r0, [r4, #16]
 80190be:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80190c0:	4b2f      	ldr	r3, [pc, #188]	; (8019180 <tcp_slowtmr+0x2f0>)
 80190c2:	781b      	ldrb	r3, [r3, #0]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f47f aeee 	bne.w	8018ea6 <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 80190ca:	2800      	cmp	r0, #0
 80190cc:	d07e      	beq.n	80191cc <tcp_slowtmr+0x33c>
      prev = pcb;
 80190ce:	4626      	mov	r6, r4
      pcb = pcb->next;
 80190d0:	462c      	mov	r4, r5
 80190d2:	e705      	b.n	8018ee0 <tcp_slowtmr+0x50>
    pcb_reset = 0;
 80190d4:	2700      	movs	r7, #0
 80190d6:	e7ca      	b.n	801906e <tcp_slowtmr+0x1de>
      tcp_segs_free(pcb->ooseq);
 80190d8:	f7ff fe29 	bl	8018d2e <tcp_segs_free>
      pcb->ooseq = NULL;
 80190dc:	2300      	movs	r3, #0
 80190de:	6723      	str	r3, [r4, #112]	; 0x70
 80190e0:	e7d2      	b.n	8019088 <tcp_slowtmr+0x1f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80190e2:	6a21      	ldr	r1, [r4, #32]
 80190e4:	4a1a      	ldr	r2, [pc, #104]	; (8019150 <tcp_slowtmr+0x2c0>)
 80190e6:	6812      	ldr	r2, [r2, #0]
 80190e8:	1a52      	subs	r2, r2, r1
 80190ea:	2a28      	cmp	r2, #40	; 0x28
 80190ec:	d9cf      	bls.n	801908e <tcp_slowtmr+0x1fe>
        ++pcb_remove;
 80190ee:	3501      	adds	r5, #1
 80190f0:	b2ed      	uxtb	r5, r5
 80190f2:	e7cc      	b.n	801908e <tcp_slowtmr+0x1fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80190f4:	6a22      	ldr	r2, [r4, #32]
 80190f6:	4b16      	ldr	r3, [pc, #88]	; (8019150 <tcp_slowtmr+0x2c0>)
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	1a9b      	subs	r3, r3, r2
 80190fc:	2bf0      	cmp	r3, #240	; 0xf0
 80190fe:	d9c8      	bls.n	8019092 <tcp_slowtmr+0x202>
        ++pcb_remove;
 8019100:	3501      	adds	r5, #1
 8019102:	b2ed      	uxtb	r5, r5
 8019104:	e7c5      	b.n	8019092 <tcp_slowtmr+0x202>
      tcp_err_fn err_fn = pcb->errf;
 8019106:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 801910a:	4620      	mov	r0, r4
 801910c:	f7ff fe9e 	bl	8018e4c <tcp_pcb_purge>
      if (prev != NULL) {
 8019110:	2e00      	cmp	r6, #0
 8019112:	d03f      	beq.n	8019194 <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019114:	4b10      	ldr	r3, [pc, #64]	; (8019158 <tcp_slowtmr+0x2c8>)
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	429c      	cmp	r4, r3
 801911a:	d033      	beq.n	8019184 <tcp_slowtmr+0x2f4>
        prev->next = pcb->next;
 801911c:	68e3      	ldr	r3, [r4, #12]
 801911e:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 8019120:	2f00      	cmp	r7, #0
 8019122:	d146      	bne.n	80191b2 <tcp_slowtmr+0x322>
      err_arg = pcb->callback_arg;
 8019124:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 8019128:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 801912a:	4621      	mov	r1, r4
 801912c:	2001      	movs	r0, #1
 801912e:	f7fe ff37 	bl	8017fa0 <memp_free>
      tcp_active_pcbs_changed = 0;
 8019132:	2200      	movs	r2, #0
 8019134:	4b12      	ldr	r3, [pc, #72]	; (8019180 <tcp_slowtmr+0x2f0>)
 8019136:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8019138:	b11d      	cbz	r5, 8019142 <tcp_slowtmr+0x2b2>
 801913a:	f06f 010c 	mvn.w	r1, #12
 801913e:	4640      	mov	r0, r8
 8019140:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8019142:	4b0f      	ldr	r3, [pc, #60]	; (8019180 <tcp_slowtmr+0x2f0>)
 8019144:	781b      	ldrb	r3, [r3, #0]
 8019146:	2b00      	cmp	r3, #0
 8019148:	f47f aead 	bne.w	8018ea6 <tcp_slowtmr+0x16>
      pcb = pcb->next;
 801914c:	463c      	mov	r4, r7
 801914e:	e6c7      	b.n	8018ee0 <tcp_slowtmr+0x50>
 8019150:	20008aec 	.word	0x20008aec
 8019154:	200040be 	.word	0x200040be
 8019158:	20008ae8 	.word	0x20008ae8
 801915c:	08022018 	.word	0x08022018
 8019160:	080221b0 	.word	0x080221b0
 8019164:	0801e950 	.word	0x0801e950
 8019168:	080221dc 	.word	0x080221dc
 801916c:	08022208 	.word	0x08022208
 8019170:	080220ec 	.word	0x080220ec
 8019174:	08021f8c 	.word	0x08021f8c
 8019178:	10624dd3 	.word	0x10624dd3
 801917c:	000124f8 	.word	0x000124f8
 8019180:	20008ae4 	.word	0x20008ae4
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019184:	4b39      	ldr	r3, [pc, #228]	; (801926c <tcp_slowtmr+0x3dc>)
 8019186:	f240 4289 	movw	r2, #1161	; 0x489
 801918a:	4939      	ldr	r1, [pc, #228]	; (8019270 <tcp_slowtmr+0x3e0>)
 801918c:	4839      	ldr	r0, [pc, #228]	; (8019274 <tcp_slowtmr+0x3e4>)
 801918e:	f004 feaa 	bl	801dee6 <iprintf>
 8019192:	e7c3      	b.n	801911c <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8019194:	4b38      	ldr	r3, [pc, #224]	; (8019278 <tcp_slowtmr+0x3e8>)
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	429c      	cmp	r4, r3
 801919a:	d006      	beq.n	80191aa <tcp_slowtmr+0x31a>
 801919c:	4b33      	ldr	r3, [pc, #204]	; (801926c <tcp_slowtmr+0x3dc>)
 801919e:	f240 428d 	movw	r2, #1165	; 0x48d
 80191a2:	4936      	ldr	r1, [pc, #216]	; (801927c <tcp_slowtmr+0x3ec>)
 80191a4:	4833      	ldr	r0, [pc, #204]	; (8019274 <tcp_slowtmr+0x3e4>)
 80191a6:	f004 fe9e 	bl	801dee6 <iprintf>
        tcp_active_pcbs = pcb->next;
 80191aa:	68e2      	ldr	r2, [r4, #12]
 80191ac:	4b32      	ldr	r3, [pc, #200]	; (8019278 <tcp_slowtmr+0x3e8>)
 80191ae:	601a      	str	r2, [r3, #0]
 80191b0:	e7b6      	b.n	8019120 <tcp_slowtmr+0x290>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80191b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80191b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80191b6:	8b23      	ldrh	r3, [r4, #24]
 80191b8:	9301      	str	r3, [sp, #4]
 80191ba:	8ae3      	ldrh	r3, [r4, #22]
 80191bc:	9300      	str	r3, [sp, #0]
 80191be:	1d23      	adds	r3, r4, #4
 80191c0:	4622      	mov	r2, r4
 80191c2:	f002 fe91 	bl	801bee8 <tcp_rst>
 80191c6:	e7ad      	b.n	8019124 <tcp_slowtmr+0x294>
        TCP_EVENT_POLL(prev, err);
 80191c8:	2000      	movs	r0, #0
 80191ca:	e779      	b.n	80190c0 <tcp_slowtmr+0x230>
          tcp_output(prev);
 80191cc:	4620      	mov	r0, r4
 80191ce:	f002 fd2f 	bl	801bc30 <tcp_output>
      prev = pcb;
 80191d2:	4626      	mov	r6, r4
      pcb = pcb->next;
 80191d4:	462c      	mov	r4, r5
 80191d6:	e683      	b.n	8018ee0 <tcp_slowtmr+0x50>
      prev = pcb;
 80191d8:	4626      	mov	r6, r4
      pcb = pcb->next;
 80191da:	462c      	mov	r4, r5
 80191dc:	e680      	b.n	8018ee0 <tcp_slowtmr+0x50>
  pcb = tcp_tw_pcbs;
 80191de:	4b28      	ldr	r3, [pc, #160]	; (8019280 <tcp_slowtmr+0x3f0>)
 80191e0:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 80191e2:	e003      	b.n	80191ec <tcp_slowtmr+0x35c>
      ++pcb_remove;
 80191e4:	2301      	movs	r3, #1
    if (pcb_remove) {
 80191e6:	b9ab      	cbnz	r3, 8019214 <tcp_slowtmr+0x384>
      prev = pcb;
 80191e8:	462c      	mov	r4, r5
      pcb = pcb->next;
 80191ea:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 80191ec:	2d00      	cmp	r5, #0
 80191ee:	d039      	beq.n	8019264 <tcp_slowtmr+0x3d4>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80191f0:	7d2b      	ldrb	r3, [r5, #20]
 80191f2:	2b0a      	cmp	r3, #10
 80191f4:	d006      	beq.n	8019204 <tcp_slowtmr+0x374>
 80191f6:	4b1d      	ldr	r3, [pc, #116]	; (801926c <tcp_slowtmr+0x3dc>)
 80191f8:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80191fc:	4921      	ldr	r1, [pc, #132]	; (8019284 <tcp_slowtmr+0x3f4>)
 80191fe:	481d      	ldr	r0, [pc, #116]	; (8019274 <tcp_slowtmr+0x3e4>)
 8019200:	f004 fe71 	bl	801dee6 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019204:	6a2a      	ldr	r2, [r5, #32]
 8019206:	4b20      	ldr	r3, [pc, #128]	; (8019288 <tcp_slowtmr+0x3f8>)
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	1a9b      	subs	r3, r3, r2
 801920c:	2bf0      	cmp	r3, #240	; 0xf0
 801920e:	d8e9      	bhi.n	80191e4 <tcp_slowtmr+0x354>
    pcb_remove = 0;
 8019210:	2300      	movs	r3, #0
 8019212:	e7e8      	b.n	80191e6 <tcp_slowtmr+0x356>
      tcp_pcb_purge(pcb);
 8019214:	4628      	mov	r0, r5
 8019216:	f7ff fe19 	bl	8018e4c <tcp_pcb_purge>
      if (prev != NULL) {
 801921a:	b1a4      	cbz	r4, 8019246 <tcp_slowtmr+0x3b6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801921c:	4b18      	ldr	r3, [pc, #96]	; (8019280 <tcp_slowtmr+0x3f0>)
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	429d      	cmp	r5, r3
 8019222:	d008      	beq.n	8019236 <tcp_slowtmr+0x3a6>
        prev->next = pcb->next;
 8019224:	68eb      	ldr	r3, [r5, #12]
 8019226:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8019228:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 801922a:	4629      	mov	r1, r5
 801922c:	2001      	movs	r0, #1
 801922e:	f7fe feb7 	bl	8017fa0 <memp_free>
      pcb = pcb->next;
 8019232:	4635      	mov	r5, r6
 8019234:	e7da      	b.n	80191ec <tcp_slowtmr+0x35c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8019236:	4b0d      	ldr	r3, [pc, #52]	; (801926c <tcp_slowtmr+0x3dc>)
 8019238:	f240 42cb 	movw	r2, #1227	; 0x4cb
 801923c:	4913      	ldr	r1, [pc, #76]	; (801928c <tcp_slowtmr+0x3fc>)
 801923e:	480d      	ldr	r0, [pc, #52]	; (8019274 <tcp_slowtmr+0x3e4>)
 8019240:	f004 fe51 	bl	801dee6 <iprintf>
 8019244:	e7ee      	b.n	8019224 <tcp_slowtmr+0x394>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8019246:	4b0e      	ldr	r3, [pc, #56]	; (8019280 <tcp_slowtmr+0x3f0>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	429d      	cmp	r5, r3
 801924c:	d006      	beq.n	801925c <tcp_slowtmr+0x3cc>
 801924e:	4b07      	ldr	r3, [pc, #28]	; (801926c <tcp_slowtmr+0x3dc>)
 8019250:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8019254:	490e      	ldr	r1, [pc, #56]	; (8019290 <tcp_slowtmr+0x400>)
 8019256:	4807      	ldr	r0, [pc, #28]	; (8019274 <tcp_slowtmr+0x3e4>)
 8019258:	f004 fe45 	bl	801dee6 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801925c:	68ea      	ldr	r2, [r5, #12]
 801925e:	4b08      	ldr	r3, [pc, #32]	; (8019280 <tcp_slowtmr+0x3f0>)
 8019260:	601a      	str	r2, [r3, #0]
 8019262:	e7e1      	b.n	8019228 <tcp_slowtmr+0x398>
}
 8019264:	b002      	add	sp, #8
 8019266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801926a:	bf00      	nop
 801926c:	08022018 	.word	0x08022018
 8019270:	08022238 	.word	0x08022238
 8019274:	0801e950 	.word	0x0801e950
 8019278:	20008ae8 	.word	0x20008ae8
 801927c:	08022264 	.word	0x08022264
 8019280:	20008af8 	.word	0x20008af8
 8019284:	08022290 	.word	0x08022290
 8019288:	20008aec 	.word	0x20008aec
 801928c:	080222c0 	.word	0x080222c0
 8019290:	080222e8 	.word	0x080222e8

08019294 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8019294:	b510      	push	{r4, lr}
 8019296:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8019298:	6803      	ldr	r3, [r0, #0]
 801929a:	428b      	cmp	r3, r1
 801929c:	d005      	beq.n	80192aa <tcp_pcb_remove+0x16>
 801929e:	b14b      	cbz	r3, 80192b4 <tcp_pcb_remove+0x20>
 80192a0:	68da      	ldr	r2, [r3, #12]
 80192a2:	4294      	cmp	r4, r2
 80192a4:	d004      	beq.n	80192b0 <tcp_pcb_remove+0x1c>
 80192a6:	4613      	mov	r3, r2
 80192a8:	e7f9      	b.n	801929e <tcp_pcb_remove+0xa>
 80192aa:	68db      	ldr	r3, [r3, #12]
 80192ac:	6003      	str	r3, [r0, #0]
 80192ae:	e001      	b.n	80192b4 <tcp_pcb_remove+0x20>
 80192b0:	68e2      	ldr	r2, [r4, #12]
 80192b2:	60da      	str	r2, [r3, #12]
 80192b4:	2300      	movs	r3, #0
 80192b6:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 80192b8:	4620      	mov	r0, r4
 80192ba:	f7ff fdc7 	bl	8018e4c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80192be:	7d23      	ldrb	r3, [r4, #20]
 80192c0:	2b0a      	cmp	r3, #10
 80192c2:	d005      	beq.n	80192d0 <tcp_pcb_remove+0x3c>
 80192c4:	2b01      	cmp	r3, #1
 80192c6:	d003      	beq.n	80192d0 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80192c8:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80192ca:	f013 0f01 	tst.w	r3, #1
 80192ce:	d121      	bne.n	8019314 <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 80192d0:	7d23      	ldrb	r3, [r4, #20]
 80192d2:	2b01      	cmp	r3, #1
 80192d4:	d01a      	beq.n	801930c <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80192d6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80192d8:	b133      	cbz	r3, 80192e8 <tcp_pcb_remove+0x54>
 80192da:	4b12      	ldr	r3, [pc, #72]	; (8019324 <tcp_pcb_remove+0x90>)
 80192dc:	f240 7253 	movw	r2, #1875	; 0x753
 80192e0:	4911      	ldr	r1, [pc, #68]	; (8019328 <tcp_pcb_remove+0x94>)
 80192e2:	4812      	ldr	r0, [pc, #72]	; (801932c <tcp_pcb_remove+0x98>)
 80192e4:	f004 fdff 	bl	801dee6 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80192e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80192ea:	b133      	cbz	r3, 80192fa <tcp_pcb_remove+0x66>
 80192ec:	4b0d      	ldr	r3, [pc, #52]	; (8019324 <tcp_pcb_remove+0x90>)
 80192ee:	f240 7254 	movw	r2, #1876	; 0x754
 80192f2:	490f      	ldr	r1, [pc, #60]	; (8019330 <tcp_pcb_remove+0x9c>)
 80192f4:	480d      	ldr	r0, [pc, #52]	; (801932c <tcp_pcb_remove+0x98>)
 80192f6:	f004 fdf6 	bl	801dee6 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80192fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80192fc:	b133      	cbz	r3, 801930c <tcp_pcb_remove+0x78>
 80192fe:	4b09      	ldr	r3, [pc, #36]	; (8019324 <tcp_pcb_remove+0x90>)
 8019300:	f240 7256 	movw	r2, #1878	; 0x756
 8019304:	490b      	ldr	r1, [pc, #44]	; (8019334 <tcp_pcb_remove+0xa0>)
 8019306:	4809      	ldr	r0, [pc, #36]	; (801932c <tcp_pcb_remove+0x98>)
 8019308:	f004 fded 	bl	801dee6 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801930c:	2300      	movs	r3, #0
 801930e:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8019310:	82e3      	strh	r3, [r4, #22]
 8019312:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 8019314:	f043 0302 	orr.w	r3, r3, #2
 8019318:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 801931a:	4620      	mov	r0, r4
 801931c:	f002 fc88 	bl	801bc30 <tcp_output>
 8019320:	e7d6      	b.n	80192d0 <tcp_pcb_remove+0x3c>
 8019322:	bf00      	nop
 8019324:	08022018 	.word	0x08022018
 8019328:	080220a0 	.word	0x080220a0
 801932c:	0801e950 	.word	0x0801e950
 8019330:	080220b8 	.word	0x080220b8
 8019334:	080220d4 	.word	0x080220d4

08019338 <tcp_close_shutdown>:
{
 8019338:	b510      	push	{r4, lr}
 801933a:	b082      	sub	sp, #8
 801933c:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801933e:	b121      	cbz	r1, 801934a <tcp_close_shutdown+0x12>
 8019340:	7d03      	ldrb	r3, [r0, #20]
 8019342:	2b04      	cmp	r3, #4
 8019344:	d00c      	beq.n	8019360 <tcp_close_shutdown+0x28>
 8019346:	2b07      	cmp	r3, #7
 8019348:	d00a      	beq.n	8019360 <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 801934a:	7d23      	ldrb	r3, [r4, #20]
 801934c:	2b01      	cmp	r3, #1
 801934e:	d072      	beq.n	8019436 <tcp_close_shutdown+0xfe>
 8019350:	2b00      	cmp	r3, #0
 8019352:	d055      	beq.n	8019400 <tcp_close_shutdown+0xc8>
 8019354:	2b02      	cmp	r3, #2
 8019356:	d07b      	beq.n	8019450 <tcp_close_shutdown+0x118>
    return tcp_close_shutdown_fin(pcb);
 8019358:	4620      	mov	r0, r4
 801935a:	f7ff fb65 	bl	8018a28 <tcp_close_shutdown_fin>
 801935e:	e068      	b.n	8019432 <tcp_close_shutdown+0xfa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019360:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8019362:	b1d3      	cbz	r3, 801939a <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019364:	7ea3      	ldrb	r3, [r4, #26]
 8019366:	f013 0f10 	tst.w	r3, #16
 801936a:	d01b      	beq.n	80193a4 <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801936c:	8b23      	ldrh	r3, [r4, #24]
 801936e:	9301      	str	r3, [sp, #4]
 8019370:	8ae3      	ldrh	r3, [r4, #22]
 8019372:	9300      	str	r3, [sp, #0]
 8019374:	1d23      	adds	r3, r4, #4
 8019376:	4622      	mov	r2, r4
 8019378:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801937a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801937c:	f002 fdb4 	bl	801bee8 <tcp_rst>
      tcp_pcb_purge(pcb);
 8019380:	4620      	mov	r0, r4
 8019382:	f7ff fd63 	bl	8018e4c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8019386:	4b38      	ldr	r3, [pc, #224]	; (8019468 <tcp_close_shutdown+0x130>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	429c      	cmp	r4, r3
 801938c:	d012      	beq.n	80193b4 <tcp_close_shutdown+0x7c>
 801938e:	b1bb      	cbz	r3, 80193c0 <tcp_close_shutdown+0x88>
 8019390:	68da      	ldr	r2, [r3, #12]
 8019392:	4294      	cmp	r4, r2
 8019394:	d012      	beq.n	80193bc <tcp_close_shutdown+0x84>
 8019396:	4613      	mov	r3, r2
 8019398:	e7f9      	b.n	801938e <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801939a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801939c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80193a0:	d1e0      	bne.n	8019364 <tcp_close_shutdown+0x2c>
 80193a2:	e7d2      	b.n	801934a <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80193a4:	4b31      	ldr	r3, [pc, #196]	; (801946c <tcp_close_shutdown+0x134>)
 80193a6:	f240 120f 	movw	r2, #271	; 0x10f
 80193aa:	4931      	ldr	r1, [pc, #196]	; (8019470 <tcp_close_shutdown+0x138>)
 80193ac:	4831      	ldr	r0, [pc, #196]	; (8019474 <tcp_close_shutdown+0x13c>)
 80193ae:	f004 fd9a 	bl	801dee6 <iprintf>
 80193b2:	e7db      	b.n	801936c <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 80193b4:	68da      	ldr	r2, [r3, #12]
 80193b6:	4b2c      	ldr	r3, [pc, #176]	; (8019468 <tcp_close_shutdown+0x130>)
 80193b8:	601a      	str	r2, [r3, #0]
 80193ba:	e001      	b.n	80193c0 <tcp_close_shutdown+0x88>
 80193bc:	68e2      	ldr	r2, [r4, #12]
 80193be:	60da      	str	r2, [r3, #12]
 80193c0:	2300      	movs	r3, #0
 80193c2:	60e3      	str	r3, [r4, #12]
 80193c4:	2201      	movs	r2, #1
 80193c6:	4b2c      	ldr	r3, [pc, #176]	; (8019478 <tcp_close_shutdown+0x140>)
 80193c8:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80193ca:	7d23      	ldrb	r3, [r4, #20]
 80193cc:	2b04      	cmp	r3, #4
 80193ce:	d009      	beq.n	80193e4 <tcp_close_shutdown+0xac>
        if (tcp_input_pcb == pcb) {
 80193d0:	4b2a      	ldr	r3, [pc, #168]	; (801947c <tcp_close_shutdown+0x144>)
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	429c      	cmp	r4, r3
 80193d6:	d00f      	beq.n	80193f8 <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 80193d8:	4621      	mov	r1, r4
 80193da:	2001      	movs	r0, #1
 80193dc:	f7fe fde0 	bl	8017fa0 <memp_free>
      return ERR_OK;
 80193e0:	2000      	movs	r0, #0
 80193e2:	e026      	b.n	8019432 <tcp_close_shutdown+0xfa>
        pcb->state = TIME_WAIT;
 80193e4:	230a      	movs	r3, #10
 80193e6:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80193e8:	4b25      	ldr	r3, [pc, #148]	; (8019480 <tcp_close_shutdown+0x148>)
 80193ea:	681a      	ldr	r2, [r3, #0]
 80193ec:	60e2      	str	r2, [r4, #12]
 80193ee:	601c      	str	r4, [r3, #0]
 80193f0:	f002 ff86 	bl	801c300 <tcp_timer_needed>
      return ERR_OK;
 80193f4:	2000      	movs	r0, #0
 80193f6:	e01c      	b.n	8019432 <tcp_close_shutdown+0xfa>
          tcp_trigger_input_pcb_close();
 80193f8:	f001 feca 	bl	801b190 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 80193fc:	2000      	movs	r0, #0
 80193fe:	e018      	b.n	8019432 <tcp_close_shutdown+0xfa>
    if (pcb->local_port != 0) {
 8019400:	8ae3      	ldrh	r3, [r4, #22]
 8019402:	b18b      	cbz	r3, 8019428 <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019404:	4b1f      	ldr	r3, [pc, #124]	; (8019484 <tcp_close_shutdown+0x14c>)
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	429c      	cmp	r4, r3
 801940a:	d005      	beq.n	8019418 <tcp_close_shutdown+0xe0>
 801940c:	b153      	cbz	r3, 8019424 <tcp_close_shutdown+0xec>
 801940e:	68da      	ldr	r2, [r3, #12]
 8019410:	4294      	cmp	r4, r2
 8019412:	d005      	beq.n	8019420 <tcp_close_shutdown+0xe8>
 8019414:	4613      	mov	r3, r2
 8019416:	e7f9      	b.n	801940c <tcp_close_shutdown+0xd4>
 8019418:	68da      	ldr	r2, [r3, #12]
 801941a:	4b1a      	ldr	r3, [pc, #104]	; (8019484 <tcp_close_shutdown+0x14c>)
 801941c:	601a      	str	r2, [r3, #0]
 801941e:	e001      	b.n	8019424 <tcp_close_shutdown+0xec>
 8019420:	68e2      	ldr	r2, [r4, #12]
 8019422:	60da      	str	r2, [r3, #12]
 8019424:	2300      	movs	r3, #0
 8019426:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 8019428:	4621      	mov	r1, r4
 801942a:	2001      	movs	r0, #1
 801942c:	f7fe fdb8 	bl	8017fa0 <memp_free>
  return ERR_OK;
 8019430:	2000      	movs	r0, #0
}
 8019432:	b002      	add	sp, #8
 8019434:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 8019436:	4620      	mov	r0, r4
 8019438:	f7ff facc 	bl	80189d4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801943c:	4621      	mov	r1, r4
 801943e:	4812      	ldr	r0, [pc, #72]	; (8019488 <tcp_close_shutdown+0x150>)
 8019440:	f7ff ff28 	bl	8019294 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8019444:	4621      	mov	r1, r4
 8019446:	2002      	movs	r0, #2
 8019448:	f7fe fdaa 	bl	8017fa0 <memp_free>
  return ERR_OK;
 801944c:	2000      	movs	r0, #0
    break;
 801944e:	e7f0      	b.n	8019432 <tcp_close_shutdown+0xfa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8019450:	4621      	mov	r1, r4
 8019452:	4805      	ldr	r0, [pc, #20]	; (8019468 <tcp_close_shutdown+0x130>)
 8019454:	f7ff ff1e 	bl	8019294 <tcp_pcb_remove>
 8019458:	2001      	movs	r0, #1
 801945a:	4b07      	ldr	r3, [pc, #28]	; (8019478 <tcp_close_shutdown+0x140>)
 801945c:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 801945e:	4621      	mov	r1, r4
 8019460:	f7fe fd9e 	bl	8017fa0 <memp_free>
  return ERR_OK;
 8019464:	2000      	movs	r0, #0
    break;
 8019466:	e7e4      	b.n	8019432 <tcp_close_shutdown+0xfa>
 8019468:	20008ae8 	.word	0x20008ae8
 801946c:	08022018 	.word	0x08022018
 8019470:	08021fc4 	.word	0x08021fc4
 8019474:	0801e950 	.word	0x0801e950
 8019478:	20008ae4 	.word	0x20008ae4
 801947c:	20008afc 	.word	0x20008afc
 8019480:	20008af8 	.word	0x20008af8
 8019484:	20008af4 	.word	0x20008af4
 8019488:	20008af0 	.word	0x20008af0

0801948c <tcp_close>:
{
 801948c:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 801948e:	7d03      	ldrb	r3, [r0, #20]
 8019490:	2b01      	cmp	r3, #1
 8019492:	d003      	beq.n	801949c <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 8019494:	7e83      	ldrb	r3, [r0, #26]
 8019496:	f043 0310 	orr.w	r3, r3, #16
 801949a:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801949c:	2101      	movs	r1, #1
 801949e:	f7ff ff4b 	bl	8019338 <tcp_close_shutdown>
}
 80194a2:	bd08      	pop	{r3, pc}

080194a4 <tcp_recv_null>:
{
 80194a4:	b510      	push	{r4, lr}
 80194a6:	4608      	mov	r0, r1
  if (p != NULL) {
 80194a8:	b142      	cbz	r2, 80194bc <tcp_recv_null+0x18>
 80194aa:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 80194ac:	8911      	ldrh	r1, [r2, #8]
 80194ae:	f7ff fbef 	bl	8018c90 <tcp_recved>
    pbuf_free(p);
 80194b2:	4620      	mov	r0, r4
 80194b4:	f7fe ff4a 	bl	801834c <pbuf_free>
  return ERR_OK;
 80194b8:	2000      	movs	r0, #0
 80194ba:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80194bc:	b10b      	cbz	r3, 80194c2 <tcp_recv_null+0x1e>
  return ERR_OK;
 80194be:	2000      	movs	r0, #0
}
 80194c0:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 80194c2:	f7ff ffe3 	bl	801948c <tcp_close>
 80194c6:	bd10      	pop	{r4, pc}

080194c8 <tcp_process_refused_data>:
{
 80194c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194ca:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80194cc:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80194ce:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80194d0:	2300      	movs	r3, #0
 80194d2:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80194d4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80194d8:	b1dd      	cbz	r5, 8019512 <tcp_process_refused_data+0x4a>
 80194da:	4632      	mov	r2, r6
 80194dc:	4601      	mov	r1, r0
 80194de:	6900      	ldr	r0, [r0, #16]
 80194e0:	47a8      	blx	r5
 80194e2:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80194e4:	b9fd      	cbnz	r5, 8019526 <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80194e6:	f017 0f20 	tst.w	r7, #32
 80194ea:	d022      	beq.n	8019532 <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80194ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80194ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80194f2:	d001      	beq.n	80194f8 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 80194f4:	3301      	adds	r3, #1
 80194f6:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80194f8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80194fc:	b18e      	cbz	r6, 8019522 <tcp_process_refused_data+0x5a>
 80194fe:	2300      	movs	r3, #0
 8019500:	461a      	mov	r2, r3
 8019502:	4621      	mov	r1, r4
 8019504:	6920      	ldr	r0, [r4, #16]
 8019506:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8019508:	f110 0f0d 	cmn.w	r0, #13
 801950c:	d111      	bne.n	8019532 <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 801950e:	4605      	mov	r5, r0
 8019510:	e00f      	b.n	8019532 <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8019512:	2300      	movs	r3, #0
 8019514:	4632      	mov	r2, r6
 8019516:	4601      	mov	r1, r0
 8019518:	4618      	mov	r0, r3
 801951a:	f7ff ffc3 	bl	80194a4 <tcp_recv_null>
 801951e:	4605      	mov	r5, r0
 8019520:	e7e0      	b.n	80194e4 <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 8019522:	4628      	mov	r0, r5
 8019524:	e7f0      	b.n	8019508 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 8019526:	f115 0f0d 	cmn.w	r5, #13
 801952a:	d002      	beq.n	8019532 <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 801952c:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 801952e:	f06f 0504 	mvn.w	r5, #4
}
 8019532:	4628      	mov	r0, r5
 8019534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019538 <tcp_fasttmr>:
{
 8019538:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 801953a:	4a1c      	ldr	r2, [pc, #112]	; (80195ac <tcp_fasttmr+0x74>)
 801953c:	7813      	ldrb	r3, [r2, #0]
 801953e:	3301      	adds	r3, #1
 8019540:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8019542:	4b1b      	ldr	r3, [pc, #108]	; (80195b0 <tcp_fasttmr+0x78>)
 8019544:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8019546:	e013      	b.n	8019570 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8019548:	f043 0302 	orr.w	r3, r3, #2
 801954c:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 801954e:	4620      	mov	r0, r4
 8019550:	f002 fb6e 	bl	801bc30 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8019554:	7ea3      	ldrb	r3, [r4, #26]
 8019556:	f023 0303 	bic.w	r3, r3, #3
 801955a:	76a3      	strb	r3, [r4, #26]
 801955c:	e013      	b.n	8019586 <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 801955e:	f023 0308 	bic.w	r3, r3, #8
 8019562:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8019564:	4620      	mov	r0, r4
 8019566:	f7ff fa5f 	bl	8018a28 <tcp_close_shutdown_fin>
 801956a:	e010      	b.n	801958e <tcp_fasttmr+0x56>
      pcb = pcb->next;
 801956c:	68e5      	ldr	r5, [r4, #12]
{
 801956e:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8019570:	b1dc      	cbz	r4, 80195aa <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 8019572:	7f62      	ldrb	r2, [r4, #29]
 8019574:	4b0d      	ldr	r3, [pc, #52]	; (80195ac <tcp_fasttmr+0x74>)
 8019576:	781b      	ldrb	r3, [r3, #0]
 8019578:	429a      	cmp	r2, r3
 801957a:	d0f7      	beq.n	801956c <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 801957c:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 801957e:	7ea3      	ldrb	r3, [r4, #26]
 8019580:	f013 0f01 	tst.w	r3, #1
 8019584:	d1e0      	bne.n	8019548 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8019586:	7ea3      	ldrb	r3, [r4, #26]
 8019588:	f013 0f08 	tst.w	r3, #8
 801958c:	d1e7      	bne.n	801955e <tcp_fasttmr+0x26>
      next = pcb->next;
 801958e:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8019590:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8019592:	2b00      	cmp	r3, #0
 8019594:	d0eb      	beq.n	801956e <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 8019596:	4e07      	ldr	r6, [pc, #28]	; (80195b4 <tcp_fasttmr+0x7c>)
 8019598:	2300      	movs	r3, #0
 801959a:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 801959c:	4620      	mov	r0, r4
 801959e:	f7ff ff93 	bl	80194c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80195a2:	7833      	ldrb	r3, [r6, #0]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d0e2      	beq.n	801956e <tcp_fasttmr+0x36>
 80195a8:	e7cb      	b.n	8019542 <tcp_fasttmr+0xa>
}
 80195aa:	bd70      	pop	{r4, r5, r6, pc}
 80195ac:	200040be 	.word	0x200040be
 80195b0:	20008ae8 	.word	0x20008ae8
 80195b4:	20008ae4 	.word	0x20008ae4

080195b8 <tcp_tmr>:
{
 80195b8:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80195ba:	f7ff ffbd 	bl	8019538 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80195be:	4a06      	ldr	r2, [pc, #24]	; (80195d8 <tcp_tmr+0x20>)
 80195c0:	7813      	ldrb	r3, [r2, #0]
 80195c2:	3301      	adds	r3, #1
 80195c4:	b2db      	uxtb	r3, r3
 80195c6:	7013      	strb	r3, [r2, #0]
 80195c8:	f013 0f01 	tst.w	r3, #1
 80195cc:	d100      	bne.n	80195d0 <tcp_tmr+0x18>
 80195ce:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80195d0:	f7ff fc5e 	bl	8018e90 <tcp_slowtmr>
}
 80195d4:	e7fb      	b.n	80195ce <tcp_tmr+0x16>
 80195d6:	bf00      	nop
 80195d8:	200040bd 	.word	0x200040bd

080195dc <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 80195dc:	7d03      	ldrb	r3, [r0, #20]
 80195de:	2b01      	cmp	r3, #1
 80195e0:	d020      	beq.n	8019624 <tcp_shutdown+0x48>
{
 80195e2:	b570      	push	{r4, r5, r6, lr}
 80195e4:	4616      	mov	r6, r2
 80195e6:	460d      	mov	r5, r1
 80195e8:	4604      	mov	r4, r0
  if (shut_rx) {
 80195ea:	b151      	cbz	r1, 8019602 <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 80195ec:	7e83      	ldrb	r3, [r0, #26]
 80195ee:	f043 0310 	orr.w	r3, r3, #16
 80195f2:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 80195f4:	b992      	cbnz	r2, 801961c <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 80195f6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80195f8:	b118      	cbz	r0, 8019602 <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 80195fa:	f7fe fea7 	bl	801834c <pbuf_free>
      pcb->refused_data = NULL;
 80195fe:	2300      	movs	r3, #0
 8019600:	6763      	str	r3, [r4, #116]	; 0x74
  if (shut_tx) {
 8019602:	b196      	cbz	r6, 801962a <tcp_shutdown+0x4e>
    switch (pcb->state) {
 8019604:	7d23      	ldrb	r3, [r4, #20]
 8019606:	2b03      	cmp	r3, #3
 8019608:	d311      	bcc.n	801962e <tcp_shutdown+0x52>
 801960a:	2b04      	cmp	r3, #4
 801960c:	d901      	bls.n	8019612 <tcp_shutdown+0x36>
 801960e:	2b07      	cmp	r3, #7
 8019610:	d10d      	bne.n	801962e <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8019612:	b2e9      	uxtb	r1, r5
 8019614:	4620      	mov	r0, r4
 8019616:	f7ff fe8f 	bl	8019338 <tcp_close_shutdown>
 801961a:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 801961c:	2101      	movs	r1, #1
 801961e:	f7ff fe8b 	bl	8019338 <tcp_close_shutdown>
 8019622:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 8019624:	f06f 000a 	mvn.w	r0, #10
 8019628:	4770      	bx	lr
  return ERR_OK;
 801962a:	2000      	movs	r0, #0
 801962c:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_CONN;
 801962e:	f06f 000a 	mvn.w	r0, #10
}
 8019632:	bd70      	pop	{r4, r5, r6, pc}

08019634 <tcp_abandon>:
{
 8019634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019638:	b082      	sub	sp, #8
 801963a:	4604      	mov	r4, r0
 801963c:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801963e:	7d03      	ldrb	r3, [r0, #20]
 8019640:	2b01      	cmp	r3, #1
 8019642:	d01a      	beq.n	801967a <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 8019644:	7d23      	ldrb	r3, [r4, #20]
 8019646:	2b0a      	cmp	r3, #10
 8019648:	d01f      	beq.n	801968a <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 801964a:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 801964e:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8019652:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8019656:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8019658:	2b00      	cmp	r3, #0
 801965a:	d141      	bne.n	80196e0 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 801965c:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8019660:	f1ba 0f00 	cmp.w	sl, #0
 8019664:	d046      	beq.n	80196f4 <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019666:	4b2a      	ldr	r3, [pc, #168]	; (8019710 <tcp_abandon+0xdc>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	429c      	cmp	r4, r3
 801966c:	d016      	beq.n	801969c <tcp_abandon+0x68>
 801966e:	b1db      	cbz	r3, 80196a8 <tcp_abandon+0x74>
 8019670:	68da      	ldr	r2, [r3, #12]
 8019672:	4294      	cmp	r4, r2
 8019674:	d016      	beq.n	80196a4 <tcp_abandon+0x70>
 8019676:	4613      	mov	r3, r2
 8019678:	e7f9      	b.n	801966e <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801967a:	4b26      	ldr	r3, [pc, #152]	; (8019714 <tcp_abandon+0xe0>)
 801967c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019680:	4925      	ldr	r1, [pc, #148]	; (8019718 <tcp_abandon+0xe4>)
 8019682:	4826      	ldr	r0, [pc, #152]	; (801971c <tcp_abandon+0xe8>)
 8019684:	f004 fc2f 	bl	801dee6 <iprintf>
 8019688:	e7dc      	b.n	8019644 <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801968a:	4621      	mov	r1, r4
 801968c:	4824      	ldr	r0, [pc, #144]	; (8019720 <tcp_abandon+0xec>)
 801968e:	f7ff fe01 	bl	8019294 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8019692:	4621      	mov	r1, r4
 8019694:	2001      	movs	r0, #1
 8019696:	f7fe fc83 	bl	8017fa0 <memp_free>
 801969a:	e01e      	b.n	80196da <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801969c:	68da      	ldr	r2, [r3, #12]
 801969e:	4b1c      	ldr	r3, [pc, #112]	; (8019710 <tcp_abandon+0xdc>)
 80196a0:	601a      	str	r2, [r3, #0]
 80196a2:	e001      	b.n	80196a8 <tcp_abandon+0x74>
 80196a4:	68e2      	ldr	r2, [r4, #12]
 80196a6:	60da      	str	r2, [r3, #12]
 80196a8:	2500      	movs	r5, #0
 80196aa:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 80196ac:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 80196ae:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80196b0:	b108      	cbz	r0, 80196b6 <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 80196b2:	f7ff fb3c 	bl	8018d2e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80196b6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80196b8:	b108      	cbz	r0, 80196be <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 80196ba:	f7ff fb38 	bl	8018d2e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80196be:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80196c0:	b108      	cbz	r0, 80196c6 <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 80196c2:	f7ff fb34 	bl	8018d2e <tcp_segs_free>
    if (send_rst) {
 80196c6:	b9bd      	cbnz	r5, 80196f8 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 80196c8:	4621      	mov	r1, r4
 80196ca:	2001      	movs	r0, #1
 80196cc:	f7fe fc68 	bl	8017fa0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80196d0:	b11e      	cbz	r6, 80196da <tcp_abandon+0xa6>
 80196d2:	f06f 010c 	mvn.w	r1, #12
 80196d6:	4638      	mov	r0, r7
 80196d8:	47b0      	blx	r6
}
 80196da:	b002      	add	sp, #8
 80196dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 80196e0:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80196e4:	4621      	mov	r1, r4
 80196e6:	480f      	ldr	r0, [pc, #60]	; (8019724 <tcp_abandon+0xf0>)
 80196e8:	f7ff fdd4 	bl	8019294 <tcp_pcb_remove>
 80196ec:	2201      	movs	r2, #1
 80196ee:	4b0e      	ldr	r3, [pc, #56]	; (8019728 <tcp_abandon+0xf4>)
 80196f0:	701a      	strb	r2, [r3, #0]
 80196f2:	e7dc      	b.n	80196ae <tcp_abandon+0x7a>
    int send_rst = 0;
 80196f4:	2500      	movs	r5, #0
 80196f6:	e7da      	b.n	80196ae <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80196f8:	8b23      	ldrh	r3, [r4, #24]
 80196fa:	9301      	str	r3, [sp, #4]
 80196fc:	f8cd a000 	str.w	sl, [sp]
 8019700:	1d23      	adds	r3, r4, #4
 8019702:	4622      	mov	r2, r4
 8019704:	4649      	mov	r1, r9
 8019706:	4640      	mov	r0, r8
 8019708:	f002 fbee 	bl	801bee8 <tcp_rst>
 801970c:	e7dc      	b.n	80196c8 <tcp_abandon+0x94>
 801970e:	bf00      	nop
 8019710:	20008af4 	.word	0x20008af4
 8019714:	08022018 	.word	0x08022018
 8019718:	08021f58 	.word	0x08021f58
 801971c:	0801e950 	.word	0x0801e950
 8019720:	20008af8 	.word	0x20008af8
 8019724:	20008ae8 	.word	0x20008ae8
 8019728:	20008ae4 	.word	0x20008ae4

0801972c <tcp_abort>:
{
 801972c:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 801972e:	2101      	movs	r1, #1
 8019730:	f7ff ff80 	bl	8019634 <tcp_abandon>
 8019734:	bd08      	pop	{r3, pc}

08019736 <tcp_accept_null>:
{
 8019736:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8019738:	4608      	mov	r0, r1
 801973a:	f7ff fff7 	bl	801972c <tcp_abort>
}
 801973e:	f06f 000c 	mvn.w	r0, #12
 8019742:	bd08      	pop	{r3, pc}

08019744 <tcp_kill_timewait>:
{
 8019744:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019746:	4b0a      	ldr	r3, [pc, #40]	; (8019770 <tcp_kill_timewait+0x2c>)
 8019748:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 801974a:	2400      	movs	r4, #0
  inactive = NULL;
 801974c:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801974e:	e000      	b.n	8019752 <tcp_kill_timewait+0xe>
 8019750:	68db      	ldr	r3, [r3, #12]
 8019752:	b143      	cbz	r3, 8019766 <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019754:	6a19      	ldr	r1, [r3, #32]
 8019756:	4a07      	ldr	r2, [pc, #28]	; (8019774 <tcp_kill_timewait+0x30>)
 8019758:	6812      	ldr	r2, [r2, #0]
 801975a:	1a52      	subs	r2, r2, r1
 801975c:	4294      	cmp	r4, r2
 801975e:	d8f7      	bhi.n	8019750 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8019760:	4614      	mov	r4, r2
      inactive = pcb;
 8019762:	4618      	mov	r0, r3
 8019764:	e7f4      	b.n	8019750 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 8019766:	b108      	cbz	r0, 801976c <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8019768:	f7ff ffe0 	bl	801972c <tcp_abort>
 801976c:	bd10      	pop	{r4, pc}
 801976e:	bf00      	nop
 8019770:	20008af8 	.word	0x20008af8
 8019774:	20008aec 	.word	0x20008aec

08019778 <tcp_kill_prio>:
{
 8019778:	b570      	push	{r4, r5, r6, lr}
 801977a:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801977c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8019780:	d000      	beq.n	8019784 <tcp_kill_prio+0xc>
 8019782:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019784:	4b0b      	ldr	r3, [pc, #44]	; (80197b4 <tcp_kill_prio+0x3c>)
 8019786:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8019788:	2400      	movs	r4, #0
  inactive = NULL;
 801978a:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801978c:	b91b      	cbnz	r3, 8019796 <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 801978e:	b108      	cbz	r0, 8019794 <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 8019790:	f7ff ffcc 	bl	801972c <tcp_abort>
 8019794:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 8019796:	7d5d      	ldrb	r5, [r3, #21]
 8019798:	42aa      	cmp	r2, r5
 801979a:	d308      	bcc.n	80197ae <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801979c:	6a1e      	ldr	r6, [r3, #32]
 801979e:	4906      	ldr	r1, [pc, #24]	; (80197b8 <tcp_kill_prio+0x40>)
 80197a0:	6809      	ldr	r1, [r1, #0]
 80197a2:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 80197a4:	428c      	cmp	r4, r1
 80197a6:	d802      	bhi.n	80197ae <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 80197a8:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 80197aa:	460c      	mov	r4, r1
      inactive = pcb;
 80197ac:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80197ae:	68db      	ldr	r3, [r3, #12]
 80197b0:	e7ec      	b.n	801978c <tcp_kill_prio+0x14>
 80197b2:	bf00      	nop
 80197b4:	20008ae8 	.word	0x20008ae8
 80197b8:	20008aec 	.word	0x20008aec

080197bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80197bc:	b538      	push	{r3, r4, r5, lr}
 80197be:	4604      	mov	r4, r0
 80197c0:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 80197c2:	e003      	b.n	80197cc <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80197c4:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80197c6:	f7ff ffb1 	bl	801972c <tcp_abort>
      pcb = next;
 80197ca:	4628      	mov	r0, r5
  while (pcb != NULL) {
 80197cc:	b128      	cbz	r0, 80197da <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80197ce:	6802      	ldr	r2, [r0, #0]
 80197d0:	6823      	ldr	r3, [r4, #0]
 80197d2:	429a      	cmp	r2, r3
 80197d4:	d0f6      	beq.n	80197c4 <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 80197d6:	68c0      	ldr	r0, [r0, #12]
 80197d8:	e7f8      	b.n	80197cc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80197da:	bd38      	pop	{r3, r4, r5, pc}

080197dc <tcp_kill_state>:
{
 80197dc:	b538      	push	{r3, r4, r5, lr}
 80197de:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80197e0:	f1a0 0308 	sub.w	r3, r0, #8
 80197e4:	b2db      	uxtb	r3, r3
 80197e6:	2b01      	cmp	r3, #1
 80197e8:	d906      	bls.n	80197f8 <tcp_kill_state+0x1c>
 80197ea:	4b0f      	ldr	r3, [pc, #60]	; (8019828 <tcp_kill_state+0x4c>)
 80197ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80197f0:	490e      	ldr	r1, [pc, #56]	; (801982c <tcp_kill_state+0x50>)
 80197f2:	480f      	ldr	r0, [pc, #60]	; (8019830 <tcp_kill_state+0x54>)
 80197f4:	f004 fb77 	bl	801dee6 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80197f8:	4b0e      	ldr	r3, [pc, #56]	; (8019834 <tcp_kill_state+0x58>)
 80197fa:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80197fc:	2100      	movs	r1, #0
  inactive = NULL;
 80197fe:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019800:	e000      	b.n	8019804 <tcp_kill_state+0x28>
 8019802:	68db      	ldr	r3, [r3, #12]
 8019804:	b15b      	cbz	r3, 801981e <tcp_kill_state+0x42>
    if (pcb->state == state) {
 8019806:	7d1a      	ldrb	r2, [r3, #20]
 8019808:	4294      	cmp	r4, r2
 801980a:	d1fa      	bne.n	8019802 <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801980c:	6a1d      	ldr	r5, [r3, #32]
 801980e:	4a0a      	ldr	r2, [pc, #40]	; (8019838 <tcp_kill_state+0x5c>)
 8019810:	6812      	ldr	r2, [r2, #0]
 8019812:	1b52      	subs	r2, r2, r5
 8019814:	4291      	cmp	r1, r2
 8019816:	d8f4      	bhi.n	8019802 <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 8019818:	4611      	mov	r1, r2
        inactive = pcb;
 801981a:	4618      	mov	r0, r3
 801981c:	e7f1      	b.n	8019802 <tcp_kill_state+0x26>
  if (inactive != NULL) {
 801981e:	b110      	cbz	r0, 8019826 <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 8019820:	2100      	movs	r1, #0
 8019822:	f7ff ff07 	bl	8019634 <tcp_abandon>
 8019826:	bd38      	pop	{r3, r4, r5, pc}
 8019828:	08022018 	.word	0x08022018
 801982c:	08022008 	.word	0x08022008
 8019830:	0801e950 	.word	0x0801e950
 8019834:	20008ae8 	.word	0x20008ae8
 8019838:	20008aec 	.word	0x20008aec

0801983c <tcp_alloc>:
{
 801983c:	b538      	push	{r3, r4, r5, lr}
 801983e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019840:	2001      	movs	r0, #1
 8019842:	f7fe fb93 	bl	8017f6c <memp_malloc>
  if (pcb == NULL) {
 8019846:	4604      	mov	r4, r0
 8019848:	b368      	cbz	r0, 80198a6 <tcp_alloc+0x6a>
  if (pcb != NULL) {
 801984a:	b354      	cbz	r4, 80198a2 <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801984c:	2298      	movs	r2, #152	; 0x98
 801984e:	2100      	movs	r1, #0
 8019850:	4620      	mov	r0, r4
 8019852:	f004 fedb 	bl	801e60c <memset>
    pcb->prio = prio;
 8019856:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8019858:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 801985c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019860:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019864:	8562      	strh	r2, [r4, #42]	; 0x2a
 8019866:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8019868:	22ff      	movs	r2, #255	; 0xff
 801986a:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 801986c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019870:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8019872:	2206      	movs	r2, #6
 8019874:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8019878:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 801987a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801987e:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8019880:	2201      	movs	r2, #1
 8019882:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8019886:	4a19      	ldr	r2, [pc, #100]	; (80198ec <tcp_alloc+0xb0>)
 8019888:	6812      	ldr	r2, [r2, #0]
 801988a:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 801988c:	4a18      	ldr	r2, [pc, #96]	; (80198f0 <tcp_alloc+0xb4>)
 801988e:	7812      	ldrb	r2, [r2, #0]
 8019890:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 8019892:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8019896:	4b17      	ldr	r3, [pc, #92]	; (80198f4 <tcp_alloc+0xb8>)
 8019898:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801989c:	4b16      	ldr	r3, [pc, #88]	; (80198f8 <tcp_alloc+0xbc>)
 801989e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 80198a2:	4620      	mov	r0, r4
 80198a4:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 80198a6:	f7ff ff4d 	bl	8019744 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80198aa:	2001      	movs	r0, #1
 80198ac:	f7fe fb5e 	bl	8017f6c <memp_malloc>
    if (pcb == NULL) {
 80198b0:	4604      	mov	r4, r0
 80198b2:	2800      	cmp	r0, #0
 80198b4:	d1c9      	bne.n	801984a <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 80198b6:	2009      	movs	r0, #9
 80198b8:	f7ff ff90 	bl	80197dc <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80198bc:	2001      	movs	r0, #1
 80198be:	f7fe fb55 	bl	8017f6c <memp_malloc>
      if (pcb == NULL) {
 80198c2:	4604      	mov	r4, r0
 80198c4:	2800      	cmp	r0, #0
 80198c6:	d1c0      	bne.n	801984a <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 80198c8:	2008      	movs	r0, #8
 80198ca:	f7ff ff87 	bl	80197dc <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80198ce:	2001      	movs	r0, #1
 80198d0:	f7fe fb4c 	bl	8017f6c <memp_malloc>
        if (pcb == NULL) {
 80198d4:	4604      	mov	r4, r0
 80198d6:	2800      	cmp	r0, #0
 80198d8:	d1b7      	bne.n	801984a <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 80198da:	4628      	mov	r0, r5
 80198dc:	f7ff ff4c 	bl	8019778 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80198e0:	2001      	movs	r0, #1
 80198e2:	f7fe fb43 	bl	8017f6c <memp_malloc>
 80198e6:	4604      	mov	r4, r0
 80198e8:	e7af      	b.n	801984a <tcp_alloc+0xe>
 80198ea:	bf00      	nop
 80198ec:	20008aec 	.word	0x20008aec
 80198f0:	200040be 	.word	0x200040be
 80198f4:	080194a5 	.word	0x080194a5
 80198f8:	006ddd00 	.word	0x006ddd00

080198fc <tcp_new_ip_type>:
{
 80198fc:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80198fe:	2040      	movs	r0, #64	; 0x40
 8019900:	f7ff ff9c 	bl	801983c <tcp_alloc>
}
 8019904:	bd08      	pop	{r3, pc}
	...

08019908 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8019908:	4b03      	ldr	r3, [pc, #12]	; (8019918 <tcp_next_iss+0x10>)
 801990a:	6818      	ldr	r0, [r3, #0]
 801990c:	4a03      	ldr	r2, [pc, #12]	; (801991c <tcp_next_iss+0x14>)
 801990e:	6812      	ldr	r2, [r2, #0]
 8019910:	4410      	add	r0, r2
 8019912:	6018      	str	r0, [r3, #0]
}
 8019914:	4770      	bx	lr
 8019916:	bf00      	nop
 8019918:	20000008 	.word	0x20000008
 801991c:	20008aec 	.word	0x20008aec

08019920 <tcp_eff_send_mss_impl>:
{
 8019920:	b510      	push	{r4, lr}
 8019922:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8019924:	4608      	mov	r0, r1
 8019926:	f7fd f987 	bl	8016c38 <ip4_route>
    if (outif == NULL) {
 801992a:	b138      	cbz	r0, 801993c <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 801992c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 801992e:	b13b      	cbz	r3, 8019940 <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8019930:	3b28      	subs	r3, #40	; 0x28
 8019932:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8019934:	42a0      	cmp	r0, r4
 8019936:	bf28      	it	cs
 8019938:	4620      	movcs	r0, r4
 801993a:	bd10      	pop	{r4, pc}
      return sendmss;
 801993c:	4620      	mov	r0, r4
 801993e:	bd10      	pop	{r4, pc}
 8019940:	4620      	mov	r0, r4
}
 8019942:	bd10      	pop	{r4, pc}

08019944 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8019944:	b308      	cbz	r0, 801998a <tcp_netif_ip_addr_changed+0x46>
{
 8019946:	b570      	push	{r4, r5, r6, lr}
 8019948:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 801994a:	6803      	ldr	r3, [r0, #0]
 801994c:	b903      	cbnz	r3, 8019950 <tcp_netif_ip_addr_changed+0xc>
 801994e:	bd70      	pop	{r4, r5, r6, pc}
 8019950:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8019952:	4b0e      	ldr	r3, [pc, #56]	; (801998c <tcp_netif_ip_addr_changed+0x48>)
 8019954:	6819      	ldr	r1, [r3, #0]
 8019956:	f7ff ff31 	bl	80197bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801995a:	4b0d      	ldr	r3, [pc, #52]	; (8019990 <tcp_netif_ip_addr_changed+0x4c>)
 801995c:	6819      	ldr	r1, [r3, #0]
 801995e:	4620      	mov	r0, r4
 8019960:	f7ff ff2c 	bl	80197bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8019964:	2e00      	cmp	r6, #0
 8019966:	d0f2      	beq.n	801994e <tcp_netif_ip_addr_changed+0xa>
 8019968:	6833      	ldr	r3, [r6, #0]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d0ef      	beq.n	801994e <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801996e:	4b09      	ldr	r3, [pc, #36]	; (8019994 <tcp_netif_ip_addr_changed+0x50>)
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	e000      	b.n	8019976 <tcp_netif_ip_addr_changed+0x32>
{
 8019974:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8019976:	2b00      	cmp	r3, #0
 8019978:	d0e9      	beq.n	801994e <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 801997a:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801997c:	681d      	ldr	r5, [r3, #0]
 801997e:	6820      	ldr	r0, [r4, #0]
 8019980:	4285      	cmp	r5, r0
 8019982:	d1f7      	bne.n	8019974 <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8019984:	6831      	ldr	r1, [r6, #0]
 8019986:	6019      	str	r1, [r3, #0]
 8019988:	e7f4      	b.n	8019974 <tcp_netif_ip_addr_changed+0x30>
 801998a:	4770      	bx	lr
 801998c:	20008ae8 	.word	0x20008ae8
 8019990:	20008af4 	.word	0x20008af4
 8019994:	20008af0 	.word	0x20008af0

08019998 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8019998:	4b0e      	ldr	r3, [pc, #56]	; (80199d4 <tcp_getoptbyte+0x3c>)
 801999a:	6819      	ldr	r1, [r3, #0]
 801999c:	b189      	cbz	r1, 80199c2 <tcp_getoptbyte+0x2a>
 801999e:	4b0e      	ldr	r3, [pc, #56]	; (80199d8 <tcp_getoptbyte+0x40>)
 80199a0:	881b      	ldrh	r3, [r3, #0]
 80199a2:	4a0e      	ldr	r2, [pc, #56]	; (80199dc <tcp_getoptbyte+0x44>)
 80199a4:	8812      	ldrh	r2, [r2, #0]
 80199a6:	4293      	cmp	r3, r2
 80199a8:	d30b      	bcc.n	80199c2 <tcp_getoptbyte+0x2a>
{
 80199aa:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80199ac:	1c5c      	adds	r4, r3, #1
 80199ae:	480a      	ldr	r0, [pc, #40]	; (80199d8 <tcp_getoptbyte+0x40>)
 80199b0:	8004      	strh	r4, [r0, #0]
 80199b2:	b2db      	uxtb	r3, r3
 80199b4:	b2d2      	uxtb	r2, r2
 80199b6:	1a9b      	subs	r3, r3, r2
 80199b8:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 80199ba:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 80199bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199c0:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80199c2:	4b07      	ldr	r3, [pc, #28]	; (80199e0 <tcp_getoptbyte+0x48>)
 80199c4:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 80199c6:	4904      	ldr	r1, [pc, #16]	; (80199d8 <tcp_getoptbyte+0x40>)
 80199c8:	880a      	ldrh	r2, [r1, #0]
 80199ca:	1c50      	adds	r0, r2, #1
 80199cc:	8008      	strh	r0, [r1, #0]
 80199ce:	4413      	add	r3, r2
 80199d0:	7d18      	ldrb	r0, [r3, #20]
 80199d2:	4770      	bx	lr
 80199d4:	200040f4 	.word	0x200040f4
 80199d8:	200040e8 	.word	0x200040e8
 80199dc:	200040f0 	.word	0x200040f0
 80199e0:	200040ec 	.word	0x200040ec

080199e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80199e4:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80199e6:	4b1f      	ldr	r3, [pc, #124]	; (8019a64 <tcp_parseopt+0x80>)
 80199e8:	881b      	ldrh	r3, [r3, #0]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d038      	beq.n	8019a60 <tcp_parseopt+0x7c>
 80199ee:	4605      	mov	r5, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80199f0:	2200      	movs	r2, #0
 80199f2:	4b1d      	ldr	r3, [pc, #116]	; (8019a68 <tcp_parseopt+0x84>)
 80199f4:	801a      	strh	r2, [r3, #0]
 80199f6:	4b1c      	ldr	r3, [pc, #112]	; (8019a68 <tcp_parseopt+0x84>)
 80199f8:	881a      	ldrh	r2, [r3, #0]
 80199fa:	4b1a      	ldr	r3, [pc, #104]	; (8019a64 <tcp_parseopt+0x80>)
 80199fc:	881b      	ldrh	r3, [r3, #0]
 80199fe:	429a      	cmp	r2, r3
 8019a00:	d22e      	bcs.n	8019a60 <tcp_parseopt+0x7c>
      u8_t opt = tcp_getoptbyte();
 8019a02:	f7ff ffc9 	bl	8019998 <tcp_getoptbyte>
      switch (opt) {
 8019a06:	2801      	cmp	r0, #1
 8019a08:	d0f5      	beq.n	80199f6 <tcp_parseopt+0x12>
 8019a0a:	b348      	cbz	r0, 8019a60 <tcp_parseopt+0x7c>
 8019a0c:	2802      	cmp	r0, #2
 8019a0e:	d11d      	bne.n	8019a4c <tcp_parseopt+0x68>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019a10:	f7ff ffc2 	bl	8019998 <tcp_getoptbyte>
 8019a14:	2804      	cmp	r0, #4
 8019a16:	d123      	bne.n	8019a60 <tcp_parseopt+0x7c>
 8019a18:	4b13      	ldr	r3, [pc, #76]	; (8019a68 <tcp_parseopt+0x84>)
 8019a1a:	881b      	ldrh	r3, [r3, #0]
 8019a1c:	3302      	adds	r3, #2
 8019a1e:	4a11      	ldr	r2, [pc, #68]	; (8019a64 <tcp_parseopt+0x80>)
 8019a20:	8812      	ldrh	r2, [r2, #0]
 8019a22:	4293      	cmp	r3, r2
 8019a24:	dc1c      	bgt.n	8019a60 <tcp_parseopt+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8019a26:	f7ff ffb7 	bl	8019998 <tcp_getoptbyte>
 8019a2a:	b283      	uxth	r3, r0
 8019a2c:	021b      	lsls	r3, r3, #8
 8019a2e:	b29c      	uxth	r4, r3
        mss |= tcp_getoptbyte();
 8019a30:	f7ff ffb2 	bl	8019998 <tcp_getoptbyte>
 8019a34:	b280      	uxth	r0, r0
 8019a36:	ea44 0300 	orr.w	r3, r4, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019a3a:	1e5a      	subs	r2, r3, #1
 8019a3c:	b292      	uxth	r2, r2
 8019a3e:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 8019a42:	d301      	bcc.n	8019a48 <tcp_parseopt+0x64>
 8019a44:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8019a48:	866b      	strh	r3, [r5, #50]	; 0x32
        break;
 8019a4a:	e7d4      	b.n	80199f6 <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8019a4c:	f7ff ffa4 	bl	8019998 <tcp_getoptbyte>
        if (data < 2) {
 8019a50:	2801      	cmp	r0, #1
 8019a52:	d905      	bls.n	8019a60 <tcp_parseopt+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8019a54:	4b04      	ldr	r3, [pc, #16]	; (8019a68 <tcp_parseopt+0x84>)
 8019a56:	881a      	ldrh	r2, [r3, #0]
 8019a58:	4410      	add	r0, r2
 8019a5a:	3802      	subs	r0, #2
 8019a5c:	8018      	strh	r0, [r3, #0]
 8019a5e:	e7ca      	b.n	80199f6 <tcp_parseopt+0x12>
 8019a60:	bd38      	pop	{r3, r4, r5, pc}
 8019a62:	bf00      	nop
 8019a64:	200040f8 	.word	0x200040f8
 8019a68:	200040e8 	.word	0x200040e8

08019a6c <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8019a6c:	4b0e      	ldr	r3, [pc, #56]	; (8019aa8 <tcp_input_delayed_close+0x3c>)
 8019a6e:	781b      	ldrb	r3, [r3, #0]
 8019a70:	f013 0f10 	tst.w	r3, #16
 8019a74:	d016      	beq.n	8019aa4 <tcp_input_delayed_close+0x38>
{
 8019a76:	b510      	push	{r4, lr}
 8019a78:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 8019a7a:	7e83      	ldrb	r3, [r0, #26]
 8019a7c:	f013 0f10 	tst.w	r3, #16
 8019a80:	d106      	bne.n	8019a90 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019a82:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8019a86:	b11b      	cbz	r3, 8019a90 <tcp_input_delayed_close+0x24>
 8019a88:	f06f 010e 	mvn.w	r1, #14
 8019a8c:	6900      	ldr	r0, [r0, #16]
 8019a8e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019a90:	4621      	mov	r1, r4
 8019a92:	4806      	ldr	r0, [pc, #24]	; (8019aac <tcp_input_delayed_close+0x40>)
 8019a94:	f7ff fbfe 	bl	8019294 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8019a98:	4621      	mov	r1, r4
 8019a9a:	2001      	movs	r0, #1
 8019a9c:	f7fe fa80 	bl	8017fa0 <memp_free>
    return 1;
 8019aa0:	2001      	movs	r0, #1
 8019aa2:	bd10      	pop	{r4, pc}
  return 0;
 8019aa4:	2000      	movs	r0, #0
 8019aa6:	4770      	bx	lr
 8019aa8:	200040e0 	.word	0x200040e0
 8019aac:	20008ae8 	.word	0x20008ae8

08019ab0 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8019ab0:	4b1c      	ldr	r3, [pc, #112]	; (8019b24 <tcp_timewait_input+0x74>)
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	f013 0f04 	tst.w	r3, #4
 8019ab8:	d132      	bne.n	8019b20 <tcp_timewait_input+0x70>
{
 8019aba:	b510      	push	{r4, lr}
 8019abc:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 8019abe:	f013 0f02 	tst.w	r3, #2
 8019ac2:	d01c      	beq.n	8019afe <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8019ac4:	4b18      	ldr	r3, [pc, #96]	; (8019b28 <tcp_timewait_input+0x78>)
 8019ac6:	6819      	ldr	r1, [r3, #0]
 8019ac8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019aca:	1aca      	subs	r2, r1, r3
 8019acc:	2a00      	cmp	r2, #0
 8019ace:	db1c      	blt.n	8019b0a <tcp_timewait_input+0x5a>
 8019ad0:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8019ad2:	4413      	add	r3, r2
 8019ad4:	1acb      	subs	r3, r1, r3
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	dc17      	bgt.n	8019b0a <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019ada:	4b14      	ldr	r3, [pc, #80]	; (8019b2c <tcp_timewait_input+0x7c>)
 8019adc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019ade:	4a14      	ldr	r2, [pc, #80]	; (8019b30 <tcp_timewait_input+0x80>)
 8019ae0:	4814      	ldr	r0, [pc, #80]	; (8019b34 <tcp_timewait_input+0x84>)
 8019ae2:	8800      	ldrh	r0, [r0, #0]
 8019ae4:	881c      	ldrh	r4, [r3, #0]
 8019ae6:	9401      	str	r4, [sp, #4]
 8019ae8:	885b      	ldrh	r3, [r3, #2]
 8019aea:	9300      	str	r3, [sp, #0]
 8019aec:	4613      	mov	r3, r2
 8019aee:	3204      	adds	r2, #4
 8019af0:	4401      	add	r1, r0
 8019af2:	4811      	ldr	r0, [pc, #68]	; (8019b38 <tcp_timewait_input+0x88>)
 8019af4:	6800      	ldr	r0, [r0, #0]
 8019af6:	f002 f9f7 	bl	801bee8 <tcp_rst>
}
 8019afa:	b002      	add	sp, #8
 8019afc:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 8019afe:	f013 0f01 	tst.w	r3, #1
 8019b02:	d002      	beq.n	8019b0a <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 8019b04:	4b0d      	ldr	r3, [pc, #52]	; (8019b3c <tcp_timewait_input+0x8c>)
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 8019b0a:	4b0a      	ldr	r3, [pc, #40]	; (8019b34 <tcp_timewait_input+0x84>)
 8019b0c:	881b      	ldrh	r3, [r3, #0]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d0f3      	beq.n	8019afa <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 8019b12:	7e83      	ldrb	r3, [r0, #26]
 8019b14:	f043 0302 	orr.w	r3, r3, #2
 8019b18:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 8019b1a:	f002 f889 	bl	801bc30 <tcp_output>
 8019b1e:	e7ec      	b.n	8019afa <tcp_timewait_input+0x4a>
 8019b20:	4770      	bx	lr
 8019b22:	bf00      	nop
 8019b24:	200040c4 	.word	0x200040c4
 8019b28:	200040e4 	.word	0x200040e4
 8019b2c:	200040ec 	.word	0x200040ec
 8019b30:	200044d0 	.word	0x200044d0
 8019b34:	200040fa 	.word	0x200040fa
 8019b38:	200040c0 	.word	0x200040c0
 8019b3c:	20008aec 	.word	0x20008aec

08019b40 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8019b40:	4b3c      	ldr	r3, [pc, #240]	; (8019c34 <tcp_listen_input+0xf4>)
 8019b42:	781b      	ldrb	r3, [r3, #0]
 8019b44:	f013 0f04 	tst.w	r3, #4
 8019b48:	d173      	bne.n	8019c32 <tcp_listen_input+0xf2>
{
 8019b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b4c:	b083      	sub	sp, #12
 8019b4e:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 8019b50:	f013 0f10 	tst.w	r3, #16
 8019b54:	d104      	bne.n	8019b60 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 8019b56:	f013 0f02 	tst.w	r3, #2
 8019b5a:	d114      	bne.n	8019b86 <tcp_listen_input+0x46>
}
 8019b5c:	b003      	add	sp, #12
 8019b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019b60:	4b35      	ldr	r3, [pc, #212]	; (8019c38 <tcp_listen_input+0xf8>)
 8019b62:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019b64:	4a35      	ldr	r2, [pc, #212]	; (8019c3c <tcp_listen_input+0xfc>)
 8019b66:	4936      	ldr	r1, [pc, #216]	; (8019c40 <tcp_listen_input+0x100>)
 8019b68:	880c      	ldrh	r4, [r1, #0]
 8019b6a:	4936      	ldr	r1, [pc, #216]	; (8019c44 <tcp_listen_input+0x104>)
 8019b6c:	6809      	ldr	r1, [r1, #0]
 8019b6e:	4836      	ldr	r0, [pc, #216]	; (8019c48 <tcp_listen_input+0x108>)
 8019b70:	6800      	ldr	r0, [r0, #0]
 8019b72:	881d      	ldrh	r5, [r3, #0]
 8019b74:	9501      	str	r5, [sp, #4]
 8019b76:	885b      	ldrh	r3, [r3, #2]
 8019b78:	9300      	str	r3, [sp, #0]
 8019b7a:	4613      	mov	r3, r2
 8019b7c:	3204      	adds	r2, #4
 8019b7e:	4421      	add	r1, r4
 8019b80:	f002 f9b2 	bl	801bee8 <tcp_rst>
 8019b84:	e7ea      	b.n	8019b5c <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 8019b86:	7d40      	ldrb	r0, [r0, #21]
 8019b88:	f7ff fe58 	bl	801983c <tcp_alloc>
    if (npcb == NULL) {
 8019b8c:	4604      	mov	r4, r0
 8019b8e:	2800      	cmp	r0, #0
 8019b90:	d041      	beq.n	8019c16 <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8019b92:	4b2e      	ldr	r3, [pc, #184]	; (8019c4c <tcp_listen_input+0x10c>)
 8019b94:	695a      	ldr	r2, [r3, #20]
 8019b96:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8019b98:	691b      	ldr	r3, [r3, #16]
 8019b9a:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8019b9c:	8aeb      	ldrh	r3, [r5, #22]
 8019b9e:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8019ba0:	4e25      	ldr	r6, [pc, #148]	; (8019c38 <tcp_listen_input+0xf8>)
 8019ba2:	6833      	ldr	r3, [r6, #0]
 8019ba4:	881b      	ldrh	r3, [r3, #0]
 8019ba6:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8019ba8:	2303      	movs	r3, #3
 8019baa:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8019bac:	4f25      	ldr	r7, [pc, #148]	; (8019c44 <tcp_listen_input+0x104>)
 8019bae:	683b      	ldr	r3, [r7, #0]
 8019bb0:	3301      	adds	r3, #1
 8019bb2:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8019bb4:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8019bb6:	f7ff fea7 	bl	8019908 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8019bba:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 8019bbc:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8019bbe:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8019bc0:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019bc2:	683b      	ldr	r3, [r7, #0]
 8019bc4:	3b01      	subs	r3, #1
 8019bc6:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8019bc8:	692b      	ldr	r3, [r5, #16]
 8019bca:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8019bcc:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019bce:	7a2b      	ldrb	r3, [r5, #8]
 8019bd0:	f003 030c 	and.w	r3, r3, #12
 8019bd4:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8019bd6:	4b1e      	ldr	r3, [pc, #120]	; (8019c50 <tcp_listen_input+0x110>)
 8019bd8:	681a      	ldr	r2, [r3, #0]
 8019bda:	60e2      	str	r2, [r4, #12]
 8019bdc:	601c      	str	r4, [r3, #0]
 8019bde:	f002 fb8f 	bl	801c300 <tcp_timer_needed>
 8019be2:	2201      	movs	r2, #1
 8019be4:	4b1b      	ldr	r3, [pc, #108]	; (8019c54 <tcp_listen_input+0x114>)
 8019be6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019be8:	4620      	mov	r0, r4
 8019bea:	f7ff fefb 	bl	80199e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019bee:	6833      	ldr	r3, [r6, #0]
 8019bf0:	89db      	ldrh	r3, [r3, #14]
 8019bf2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019bf6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019bfa:	1d21      	adds	r1, r4, #4
 8019bfc:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8019bfe:	f7ff fe8f 	bl	8019920 <tcp_eff_send_mss_impl>
 8019c02:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019c04:	2112      	movs	r1, #18
 8019c06:	4620      	mov	r0, r4
 8019c08:	f001 ff02 	bl	801ba10 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8019c0c:	b960      	cbnz	r0, 8019c28 <tcp_listen_input+0xe8>
    tcp_output(npcb);
 8019c0e:	4620      	mov	r0, r4
 8019c10:	f002 f80e 	bl	801bc30 <tcp_output>
 8019c14:	e7a2      	b.n	8019b5c <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019c16:	69ab      	ldr	r3, [r5, #24]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d09f      	beq.n	8019b5c <tcp_listen_input+0x1c>
 8019c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8019c20:	2100      	movs	r1, #0
 8019c22:	6928      	ldr	r0, [r5, #16]
 8019c24:	4798      	blx	r3
 8019c26:	e799      	b.n	8019b5c <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 8019c28:	2100      	movs	r1, #0
 8019c2a:	4620      	mov	r0, r4
 8019c2c:	f7ff fd02 	bl	8019634 <tcp_abandon>
      return;
 8019c30:	e794      	b.n	8019b5c <tcp_listen_input+0x1c>
 8019c32:	4770      	bx	lr
 8019c34:	200040c4 	.word	0x200040c4
 8019c38:	200040ec 	.word	0x200040ec
 8019c3c:	200044d0 	.word	0x200044d0
 8019c40:	200040fa 	.word	0x200040fa
 8019c44:	200040e4 	.word	0x200040e4
 8019c48:	200040c0 	.word	0x200040c0
 8019c4c:	200044c0 	.word	0x200044c0
 8019c50:	20008ae8 	.word	0x20008ae8
 8019c54:	20008ae4 	.word	0x20008ae4

08019c58 <tcp_oos_insert_segment>:
{
 8019c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c5a:	4605      	mov	r5, r0
 8019c5c:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019c5e:	68c3      	ldr	r3, [r0, #12]
 8019c60:	8998      	ldrh	r0, [r3, #12]
 8019c62:	f7fc fa40 	bl	80160e6 <lwip_htons>
 8019c66:	f010 0f01 	tst.w	r0, #1
 8019c6a:	d009      	beq.n	8019c80 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 8019c6c:	4620      	mov	r0, r4
 8019c6e:	f7ff f85e 	bl	8018d2e <tcp_segs_free>
    next = NULL;
 8019c72:	2400      	movs	r4, #0
 8019c74:	e02e      	b.n	8019cd4 <tcp_oos_insert_segment+0x7c>
      next = next->next;
 8019c76:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 8019c78:	4620      	mov	r0, r4
 8019c7a:	f7ff f84b 	bl	8018d14 <tcp_seg_free>
      next = next->next;
 8019c7e:	4634      	mov	r4, r6
    while (next &&
 8019c80:	b1c4      	cbz	r4, 8019cb4 <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019c82:	892b      	ldrh	r3, [r5, #8]
 8019c84:	4a14      	ldr	r2, [pc, #80]	; (8019cd8 <tcp_oos_insert_segment+0x80>)
 8019c86:	6812      	ldr	r2, [r2, #0]
 8019c88:	4413      	add	r3, r2
 8019c8a:	68e1      	ldr	r1, [r4, #12]
 8019c8c:	684a      	ldr	r2, [r1, #4]
 8019c8e:	8920      	ldrh	r0, [r4, #8]
 8019c90:	4402      	add	r2, r0
 8019c92:	1a9b      	subs	r3, r3, r2
    while (next &&
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	db0d      	blt.n	8019cb4 <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019c98:	8988      	ldrh	r0, [r1, #12]
 8019c9a:	f7fc fa24 	bl	80160e6 <lwip_htons>
 8019c9e:	f010 0f01 	tst.w	r0, #1
 8019ca2:	d0e8      	beq.n	8019c76 <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019ca4:	68ef      	ldr	r7, [r5, #12]
 8019ca6:	89be      	ldrh	r6, [r7, #12]
 8019ca8:	2001      	movs	r0, #1
 8019caa:	f7fc fa1c 	bl	80160e6 <lwip_htons>
 8019cae:	4330      	orrs	r0, r6
 8019cb0:	81b8      	strh	r0, [r7, #12]
 8019cb2:	e7e0      	b.n	8019c76 <tcp_oos_insert_segment+0x1e>
    if (next &&
 8019cb4:	b174      	cbz	r4, 8019cd4 <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019cb6:	892b      	ldrh	r3, [r5, #8]
 8019cb8:	4a07      	ldr	r2, [pc, #28]	; (8019cd8 <tcp_oos_insert_segment+0x80>)
 8019cba:	6811      	ldr	r1, [r2, #0]
 8019cbc:	440b      	add	r3, r1
 8019cbe:	68e2      	ldr	r2, [r4, #12]
 8019cc0:	6852      	ldr	r2, [r2, #4]
 8019cc2:	1a9b      	subs	r3, r3, r2
    if (next &&
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	dd05      	ble.n	8019cd4 <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019cc8:	1a52      	subs	r2, r2, r1
 8019cca:	b291      	uxth	r1, r2
 8019ccc:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019cce:	6868      	ldr	r0, [r5, #4]
 8019cd0:	f7fe fc90 	bl	80185f4 <pbuf_realloc>
  cseg->next = next;
 8019cd4:	602c      	str	r4, [r5, #0]
 8019cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cd8:	200040e4 	.word	0x200040e4

08019cdc <tcp_receive>:
{
 8019cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ce0:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019ce2:	7d03      	ldrb	r3, [r0, #20]
 8019ce4:	2b03      	cmp	r3, #3
 8019ce6:	d979      	bls.n	8019ddc <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 8019ce8:	4bae      	ldr	r3, [pc, #696]	; (8019fa4 <tcp_receive+0x2c8>)
 8019cea:	781b      	ldrb	r3, [r3, #0]
 8019cec:	f013 0f10 	tst.w	r3, #16
 8019cf0:	f000 81aa 	beq.w	801a048 <tcp_receive+0x36c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019cf4:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8019cf8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8019cfa:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019cfc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8019cfe:	4baa      	ldr	r3, [pc, #680]	; (8019fa8 <tcp_receive+0x2cc>)
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	1acd      	subs	r5, r1, r3
 8019d04:	2d00      	cmp	r5, #0
 8019d06:	db7c      	blt.n	8019e02 <tcp_receive+0x126>
 8019d08:	4299      	cmp	r1, r3
 8019d0a:	d06f      	beq.n	8019dec <tcp_receive+0x110>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019d0c:	49a7      	ldr	r1, [pc, #668]	; (8019fac <tcp_receive+0x2d0>)
 8019d0e:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019d10:	428a      	cmp	r2, r1
 8019d12:	d071      	beq.n	8019df8 <tcp_receive+0x11c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019d14:	4ba5      	ldr	r3, [pc, #660]	; (8019fac <tcp_receive+0x2d0>)
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019d1a:	1a5a      	subs	r2, r3, r1
 8019d1c:	2a00      	cmp	r2, #0
 8019d1e:	f340 8095 	ble.w	8019e4c <tcp_receive+0x170>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8019d22:	2a01      	cmp	r2, #1
 8019d24:	d404      	bmi.n	8019d30 <tcp_receive+0x54>
 8019d26:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019d28:	1a9a      	subs	r2, r3, r2
 8019d2a:	2a00      	cmp	r2, #0
 8019d2c:	f340 80cc 	ble.w	8019ec8 <tcp_receive+0x1ec>
      tcp_send_empty_ack(pcb);
 8019d30:	4620      	mov	r0, r4
 8019d32:	f001 ff43 	bl	801bbbc <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 8019d36:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	f000 8176 	beq.w	801a02a <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019d3e:	4a9b      	ldr	r2, [pc, #620]	; (8019fac <tcp_receive+0x2d0>)
 8019d40:	6815      	ldr	r5, [r2, #0]
 8019d42:	68db      	ldr	r3, [r3, #12]
 8019d44:	6858      	ldr	r0, [r3, #4]
 8019d46:	f7fc f9d1 	bl	80160ec <lwip_htonl>
 8019d4a:	4606      	mov	r6, r0
 8019d4c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019d4e:	891f      	ldrh	r7, [r3, #8]
 8019d50:	68db      	ldr	r3, [r3, #12]
 8019d52:	8998      	ldrh	r0, [r3, #12]
 8019d54:	f7fc f9c7 	bl	80160e6 <lwip_htons>
 8019d58:	f010 0f03 	tst.w	r0, #3
 8019d5c:	f000 8163 	beq.w	801a026 <tcp_receive+0x34a>
 8019d60:	2301      	movs	r3, #1
 8019d62:	443b      	add	r3, r7
 8019d64:	441e      	add	r6, r3
 8019d66:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 8019d68:	2d00      	cmp	r5, #0
 8019d6a:	f2c0 815e 	blt.w	801a02a <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019d6e:	4b8f      	ldr	r3, [pc, #572]	; (8019fac <tcp_receive+0x2d0>)
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019d74:	1a9b      	subs	r3, r3, r2
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	f300 8157 	bgt.w	801a02a <tcp_receive+0x34e>
      next = pcb->unsent;
 8019d7c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8019d7e:	682b      	ldr	r3, [r5, #0]
 8019d80:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	f000 8144 	beq.w	801a010 <tcp_receive+0x334>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019d88:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8019d8c:	6868      	ldr	r0, [r5, #4]
 8019d8e:	f7fe fca3 	bl	80186d8 <pbuf_clen>
 8019d92:	4286      	cmp	r6, r0
 8019d94:	f0c0 813f 	bcc.w	801a016 <tcp_receive+0x33a>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8019d98:	6868      	ldr	r0, [r5, #4]
 8019d9a:	f7fe fc9d 	bl	80186d8 <pbuf_clen>
 8019d9e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019da2:	1a18      	subs	r0, r3, r0
 8019da4:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8019da8:	892b      	ldrh	r3, [r5, #8]
 8019daa:	4a81      	ldr	r2, [pc, #516]	; (8019fb0 <tcp_receive+0x2d4>)
 8019dac:	8811      	ldrh	r1, [r2, #0]
 8019dae:	440b      	add	r3, r1
 8019db0:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 8019db2:	4628      	mov	r0, r5
 8019db4:	f7fe ffae 	bl	8018d14 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 8019db8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d0ba      	beq.n	8019d36 <tcp_receive+0x5a>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8019dc0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d1b7      	bne.n	8019d36 <tcp_receive+0x5a>
 8019dc6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d1b4      	bne.n	8019d36 <tcp_receive+0x5a>
 8019dcc:	4b79      	ldr	r3, [pc, #484]	; (8019fb4 <tcp_receive+0x2d8>)
 8019dce:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8019dd2:	4979      	ldr	r1, [pc, #484]	; (8019fb8 <tcp_receive+0x2dc>)
 8019dd4:	4879      	ldr	r0, [pc, #484]	; (8019fbc <tcp_receive+0x2e0>)
 8019dd6:	f004 f886 	bl	801dee6 <iprintf>
 8019dda:	e7ac      	b.n	8019d36 <tcp_receive+0x5a>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019ddc:	4b75      	ldr	r3, [pc, #468]	; (8019fb4 <tcp_receive+0x2d8>)
 8019dde:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8019de2:	4977      	ldr	r1, [pc, #476]	; (8019fc0 <tcp_receive+0x2e4>)
 8019de4:	4875      	ldr	r0, [pc, #468]	; (8019fbc <tcp_receive+0x2e0>)
 8019de6:	f004 f87e 	bl	801dee6 <iprintf>
 8019dea:	e77d      	b.n	8019ce8 <tcp_receive+0xc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019dec:	496f      	ldr	r1, [pc, #444]	; (8019fac <tcp_receive+0x2d0>)
 8019dee:	6809      	ldr	r1, [r1, #0]
 8019df0:	1a51      	subs	r1, r2, r1
 8019df2:	2900      	cmp	r1, #0
 8019df4:	da8a      	bge.n	8019d0c <tcp_receive+0x30>
 8019df6:	e004      	b.n	8019e02 <tcp_receive+0x126>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019df8:	4a72      	ldr	r2, [pc, #456]	; (8019fc4 <tcp_receive+0x2e8>)
 8019dfa:	6812      	ldr	r2, [r2, #0]
 8019dfc:	89d2      	ldrh	r2, [r2, #14]
 8019dfe:	4290      	cmp	r0, r2
 8019e00:	d288      	bcs.n	8019d14 <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019e02:	4a70      	ldr	r2, [pc, #448]	; (8019fc4 <tcp_receive+0x2e8>)
 8019e04:	6812      	ldr	r2, [r2, #0]
 8019e06:	89d2      	ldrh	r2, [r2, #14]
 8019e08:	b291      	uxth	r1, r2
 8019e0a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019e0e:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 8019e12:	4281      	cmp	r1, r0
 8019e14:	d901      	bls.n	8019e1a <tcp_receive+0x13e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019e16:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 8019e1a:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8019e1c:	4b63      	ldr	r3, [pc, #396]	; (8019fac <tcp_receive+0x2d0>)
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8019e22:	b951      	cbnz	r1, 8019e3a <tcp_receive+0x15e>
        if (pcb->persist_backoff == 0) {
 8019e24:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	f47f af73 	bne.w	8019d14 <tcp_receive+0x38>
          pcb->persist_cnt = 0;
 8019e2e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8019e32:	2301      	movs	r3, #1
 8019e34:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8019e38:	e76c      	b.n	8019d14 <tcp_receive+0x38>
      } else if (pcb->persist_backoff > 0) {
 8019e3a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	f43f af68 	beq.w	8019d14 <tcp_receive+0x38>
          pcb->persist_backoff = 0;
 8019e44:	2300      	movs	r3, #0
 8019e46:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8019e4a:	e763      	b.n	8019d14 <tcp_receive+0x38>
      if (tcplen == 0) {
 8019e4c:	4a5e      	ldr	r2, [pc, #376]	; (8019fc8 <tcp_receive+0x2ec>)
 8019e4e:	8812      	ldrh	r2, [r2, #0]
 8019e50:	bb7a      	cbnz	r2, 8019eb2 <tcp_receive+0x1d6>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019e52:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8019e54:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8019e58:	4402      	add	r2, r0
 8019e5a:	4296      	cmp	r6, r2
 8019e5c:	d001      	beq.n	8019e62 <tcp_receive+0x186>
  int found_dupack = 0;
 8019e5e:	2300      	movs	r3, #0
 8019e60:	e028      	b.n	8019eb4 <tcp_receive+0x1d8>
          if (pcb->rtime >= 0) {
 8019e62:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8019e66:	2a00      	cmp	r2, #0
 8019e68:	db2a      	blt.n	8019ec0 <tcp_receive+0x1e4>
            if (pcb->lastack == ackno) {
 8019e6a:	428b      	cmp	r3, r1
 8019e6c:	d001      	beq.n	8019e72 <tcp_receive+0x196>
  int found_dupack = 0;
 8019e6e:	2300      	movs	r3, #0
 8019e70:	e020      	b.n	8019eb4 <tcp_receive+0x1d8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8019e72:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e76:	1c53      	adds	r3, r2, #1
 8019e78:	b2db      	uxtb	r3, r3
 8019e7a:	429a      	cmp	r2, r3
 8019e7c:	d201      	bcs.n	8019e82 <tcp_receive+0x1a6>
                ++pcb->dupacks;
 8019e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8019e82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019e86:	2b03      	cmp	r3, #3
 8019e88:	d90a      	bls.n	8019ea0 <tcp_receive+0x1c4>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8019e8a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8019e8e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019e90:	4413      	add	r3, r2
 8019e92:	b29b      	uxth	r3, r3
 8019e94:	429a      	cmp	r2, r3
 8019e96:	d215      	bcs.n	8019ec4 <tcp_receive+0x1e8>
                  pcb->cwnd += pcb->mss;
 8019e98:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
              found_dupack = 1;
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	e009      	b.n	8019eb4 <tcp_receive+0x1d8>
              } else if (pcb->dupacks == 3) {
 8019ea0:	2b03      	cmp	r3, #3
 8019ea2:	d001      	beq.n	8019ea8 <tcp_receive+0x1cc>
              found_dupack = 1;
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	e005      	b.n	8019eb4 <tcp_receive+0x1d8>
                tcp_rexmit_fast(pcb);
 8019ea8:	4620      	mov	r0, r4
 8019eaa:	f002 f8b6 	bl	801c01a <tcp_rexmit_fast>
              found_dupack = 1;
 8019eae:	2301      	movs	r3, #1
 8019eb0:	e000      	b.n	8019eb4 <tcp_receive+0x1d8>
  int found_dupack = 0;
 8019eb2:	2300      	movs	r3, #0
      if (!found_dupack) {
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	f47f af3e 	bne.w	8019d36 <tcp_receive+0x5a>
        pcb->dupacks = 0;
 8019eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ebe:	e73a      	b.n	8019d36 <tcp_receive+0x5a>
  int found_dupack = 0;
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	e7f7      	b.n	8019eb4 <tcp_receive+0x1d8>
              found_dupack = 1;
 8019ec4:	2301      	movs	r3, #1
 8019ec6:	e7f5      	b.n	8019eb4 <tcp_receive+0x1d8>
      if (pcb->flags & TF_INFR) {
 8019ec8:	7ea2      	ldrb	r2, [r4, #26]
 8019eca:	f012 0f04 	tst.w	r2, #4
 8019ece:	d006      	beq.n	8019ede <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 8019ed0:	f022 0204 	bic.w	r2, r2, #4
 8019ed4:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8019ed6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8019eda:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 8019ede:	2100      	movs	r1, #0
 8019ee0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8019ee4:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8019ee8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019eea:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8019eee:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8019ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8019ef6:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8019ef8:	7d23      	ldrb	r3, [r4, #20]
 8019efa:	2b03      	cmp	r3, #3
 8019efc:	d90c      	bls.n	8019f18 <tcp_receive+0x23c>
        if (pcb->cwnd < pcb->ssthresh) {
 8019efe:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8019f02:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8019f06:	429a      	cmp	r2, r3
 8019f08:	d260      	bcs.n	8019fcc <tcp_receive+0x2f0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8019f0a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019f0c:	4413      	add	r3, r2
 8019f0e:	b29b      	uxth	r3, r3
 8019f10:	429a      	cmp	r2, r3
 8019f12:	d201      	bcs.n	8019f18 <tcp_receive+0x23c>
            pcb->cwnd += pcb->mss;
 8019f14:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 8019f18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d06d      	beq.n	8019ffa <tcp_receive+0x31e>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8019f1e:	68db      	ldr	r3, [r3, #12]
 8019f20:	6858      	ldr	r0, [r3, #4]
 8019f22:	f7fc f8e3 	bl	80160ec <lwip_htonl>
 8019f26:	4605      	mov	r5, r0
 8019f28:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019f2a:	891e      	ldrh	r6, [r3, #8]
 8019f2c:	68db      	ldr	r3, [r3, #12]
 8019f2e:	8998      	ldrh	r0, [r3, #12]
 8019f30:	f7fc f8d9 	bl	80160e6 <lwip_htons>
 8019f34:	f010 0f03 	tst.w	r0, #3
 8019f38:	d05d      	beq.n	8019ff6 <tcp_receive+0x31a>
 8019f3a:	2301      	movs	r3, #1
 8019f3c:	4433      	add	r3, r6
 8019f3e:	441d      	add	r5, r3
 8019f40:	4b1a      	ldr	r3, [pc, #104]	; (8019fac <tcp_receive+0x2d0>)
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 8019f46:	2d00      	cmp	r5, #0
 8019f48:	dc57      	bgt.n	8019ffa <tcp_receive+0x31e>
        next = pcb->unacked;
 8019f4a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 8019f4c:	682b      	ldr	r3, [r5, #0]
 8019f4e:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019f50:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8019f54:	6868      	ldr	r0, [r5, #4]
 8019f56:	f7fe fbbf 	bl	80186d8 <pbuf_clen>
 8019f5a:	4286      	cmp	r6, r0
 8019f5c:	d343      	bcc.n	8019fe6 <tcp_receive+0x30a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8019f5e:	6868      	ldr	r0, [r5, #4]
 8019f60:	f7fe fbba 	bl	80186d8 <pbuf_clen>
 8019f64:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019f68:	1a18      	subs	r0, r3, r0
 8019f6a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8019f6e:	892b      	ldrh	r3, [r5, #8]
 8019f70:	4a0f      	ldr	r2, [pc, #60]	; (8019fb0 <tcp_receive+0x2d4>)
 8019f72:	8811      	ldrh	r1, [r2, #0]
 8019f74:	440b      	add	r3, r1
 8019f76:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 8019f78:	4628      	mov	r0, r5
 8019f7a:	f7fe fecb 	bl	8018d14 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8019f7e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d0c8      	beq.n	8019f18 <tcp_receive+0x23c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8019f86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d1c5      	bne.n	8019f18 <tcp_receive+0x23c>
 8019f8c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d1c2      	bne.n	8019f18 <tcp_receive+0x23c>
 8019f92:	4b08      	ldr	r3, [pc, #32]	; (8019fb4 <tcp_receive+0x2d8>)
 8019f94:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8019f98:	4907      	ldr	r1, [pc, #28]	; (8019fb8 <tcp_receive+0x2dc>)
 8019f9a:	4808      	ldr	r0, [pc, #32]	; (8019fbc <tcp_receive+0x2e0>)
 8019f9c:	f003 ffa3 	bl	801dee6 <iprintf>
 8019fa0:	e7ba      	b.n	8019f18 <tcp_receive+0x23c>
 8019fa2:	bf00      	nop
 8019fa4:	200040c4 	.word	0x200040c4
 8019fa8:	200040e4 	.word	0x200040e4
 8019fac:	200040c0 	.word	0x200040c0
 8019fb0:	200040d8 	.word	0x200040d8
 8019fb4:	080224f4 	.word	0x080224f4
 8019fb8:	0802256c 	.word	0x0802256c
 8019fbc:	0801e950 	.word	0x0801e950
 8019fc0:	08022528 	.word	0x08022528
 8019fc4:	200040ec 	.word	0x200040ec
 8019fc8:	200040fa 	.word	0x200040fa
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8019fcc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019fce:	fb03 f303 	mul.w	r3, r3, r3
 8019fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8019fd6:	fa12 f383 	uxtah	r3, r2, r3
 8019fda:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8019fdc:	429a      	cmp	r2, r3
 8019fde:	d29b      	bcs.n	8019f18 <tcp_receive+0x23c>
            pcb->cwnd = new_cwnd;
 8019fe0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8019fe4:	e798      	b.n	8019f18 <tcp_receive+0x23c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019fe6:	4ba2      	ldr	r3, [pc, #648]	; (801a270 <tcp_receive+0x594>)
 8019fe8:	f240 429e 	movw	r2, #1182	; 0x49e
 8019fec:	49a1      	ldr	r1, [pc, #644]	; (801a274 <tcp_receive+0x598>)
 8019fee:	48a2      	ldr	r0, [pc, #648]	; (801a278 <tcp_receive+0x59c>)
 8019ff0:	f003 ff79 	bl	801dee6 <iprintf>
 8019ff4:	e7b3      	b.n	8019f5e <tcp_receive+0x282>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	e7a0      	b.n	8019f3c <tcp_receive+0x260>
      if (pcb->unacked == NULL) {
 8019ffa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019ffc:	b123      	cbz	r3, 801a008 <tcp_receive+0x32c>
        pcb->rtime = 0;
 8019ffe:	2300      	movs	r3, #0
 801a000:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801a002:	2300      	movs	r3, #0
 801a004:	76e3      	strb	r3, [r4, #27]
 801a006:	e696      	b.n	8019d36 <tcp_receive+0x5a>
        pcb->rtime = -1;
 801a008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a00c:	8623      	strh	r3, [r4, #48]	; 0x30
 801a00e:	e7f8      	b.n	801a002 <tcp_receive+0x326>
        pcb->unsent_oversize = 0;
 801a010:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 801a014:	e6b8      	b.n	8019d88 <tcp_receive+0xac>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801a016:	4b96      	ldr	r3, [pc, #600]	; (801a270 <tcp_receive+0x594>)
 801a018:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801a01c:	4995      	ldr	r1, [pc, #596]	; (801a274 <tcp_receive+0x598>)
 801a01e:	4896      	ldr	r0, [pc, #600]	; (801a278 <tcp_receive+0x59c>)
 801a020:	f003 ff61 	bl	801dee6 <iprintf>
 801a024:	e6b8      	b.n	8019d98 <tcp_receive+0xbc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801a026:	2300      	movs	r3, #0
 801a028:	e69b      	b.n	8019d62 <tcp_receive+0x86>
    pcb->snd_buf += recv_acked;
 801a02a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801a02e:	4a93      	ldr	r2, [pc, #588]	; (801a27c <tcp_receive+0x5a0>)
 801a030:	8812      	ldrh	r2, [r2, #0]
 801a032:	4413      	add	r3, r2
 801a034:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801a038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a03a:	b12b      	cbz	r3, 801a048 <tcp_receive+0x36c>
 801a03c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801a03e:	4990      	ldr	r1, [pc, #576]	; (801a280 <tcp_receive+0x5a4>)
 801a040:	6809      	ldr	r1, [r1, #0]
 801a042:	1a52      	subs	r2, r2, r1
 801a044:	2a00      	cmp	r2, #0
 801a046:	db29      	blt.n	801a09c <tcp_receive+0x3c0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801a048:	4b8e      	ldr	r3, [pc, #568]	; (801a284 <tcp_receive+0x5a8>)
 801a04a:	881b      	ldrh	r3, [r3, #0]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	f000 834b 	beq.w	801a6e8 <tcp_receive+0xa0c>
 801a052:	7d22      	ldrb	r2, [r4, #20]
 801a054:	2a06      	cmp	r2, #6
 801a056:	f200 8347 	bhi.w	801a6e8 <tcp_receive+0xa0c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a05a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a05c:	4a8a      	ldr	r2, [pc, #552]	; (801a288 <tcp_receive+0x5ac>)
 801a05e:	6812      	ldr	r2, [r2, #0]
 801a060:	1a8e      	subs	r6, r1, r2
 801a062:	2e01      	cmp	r6, #1
 801a064:	d404      	bmi.n	801a070 <tcp_receive+0x394>
 801a066:	4413      	add	r3, r2
 801a068:	1acb      	subs	r3, r1, r3
 801a06a:	3301      	adds	r3, #1
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	dd36      	ble.n	801a0de <tcp_receive+0x402>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801a070:	1a52      	subs	r2, r2, r1
 801a072:	2a00      	cmp	r2, #0
 801a074:	f2c0 8093 	blt.w	801a19e <tcp_receive+0x4c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a078:	4b83      	ldr	r3, [pc, #524]	; (801a288 <tcp_receive+0x5ac>)
 801a07a:	6819      	ldr	r1, [r3, #0]
 801a07c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a07e:	1a8b      	subs	r3, r1, r2
 801a080:	2b00      	cmp	r3, #0
 801a082:	db06      	blt.n	801a092 <tcp_receive+0x3b6>
 801a084:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a086:	4413      	add	r3, r2
 801a088:	1acb      	subs	r3, r1, r3
 801a08a:	3301      	adds	r3, #1
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	f340 808b 	ble.w	801a1a8 <tcp_receive+0x4cc>
      tcp_send_empty_ack(pcb);
 801a092:	4620      	mov	r0, r4
 801a094:	f001 fd92 	bl	801bbbc <tcp_send_empty_ack>
 801a098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801a09c:	4a7b      	ldr	r2, [pc, #492]	; (801a28c <tcp_receive+0x5b0>)
 801a09e:	6812      	ldr	r2, [r2, #0]
 801a0a0:	1ad2      	subs	r2, r2, r3
 801a0a2:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 801a0a4:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801a0a8:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 801a0ac:	b292      	uxth	r2, r2
 801a0ae:	b213      	sxth	r3, r2
      pcb->sa += m;
 801a0b0:	4411      	add	r1, r2
 801a0b2:	b209      	sxth	r1, r1
 801a0b4:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	db0e      	blt.n	801a0d8 <tcp_receive+0x3fc>
      m = m - (pcb->sv >> 2);
 801a0ba:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 801a0be:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 801a0c2:	fa12 f383 	uxtah	r3, r2, r3
 801a0c6:	b29b      	uxth	r3, r3
 801a0c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801a0ca:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801a0ce:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	6363      	str	r3, [r4, #52]	; 0x34
 801a0d6:	e7b7      	b.n	801a048 <tcp_receive+0x36c>
        m = -m;
 801a0d8:	4253      	negs	r3, r2
 801a0da:	b21b      	sxth	r3, r3
 801a0dc:	e7ed      	b.n	801a0ba <tcp_receive+0x3de>
      struct pbuf *p = inseg.p;
 801a0de:	4b6c      	ldr	r3, [pc, #432]	; (801a290 <tcp_receive+0x5b4>)
 801a0e0:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 801a0e2:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a0e4:	b195      	cbz	r5, 801a10c <tcp_receive+0x430>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801a0e6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 801a0ea:	429e      	cmp	r6, r3
 801a0ec:	dc16      	bgt.n	801a11c <tcp_receive+0x440>
      if (inseg.p->len < off) {
 801a0ee:	4b68      	ldr	r3, [pc, #416]	; (801a290 <tcp_receive+0x5b4>)
 801a0f0:	6858      	ldr	r0, [r3, #4]
 801a0f2:	8943      	ldrh	r3, [r0, #10]
 801a0f4:	429e      	cmp	r6, r3
 801a0f6:	dd44      	ble.n	801a182 <tcp_receive+0x4a6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a0f8:	8903      	ldrh	r3, [r0, #8]
 801a0fa:	429e      	cmp	r6, r3
 801a0fc:	dc16      	bgt.n	801a12c <tcp_receive+0x450>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801a0fe:	4b64      	ldr	r3, [pc, #400]	; (801a290 <tcp_receive+0x5b4>)
 801a100:	685b      	ldr	r3, [r3, #4]
 801a102:	891a      	ldrh	r2, [r3, #8]
 801a104:	b2b6      	uxth	r6, r6
 801a106:	1b92      	subs	r2, r2, r6
 801a108:	b292      	uxth	r2, r2
        while (p->len < off) {
 801a10a:	e01c      	b.n	801a146 <tcp_receive+0x46a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a10c:	4b58      	ldr	r3, [pc, #352]	; (801a270 <tcp_receive+0x594>)
 801a10e:	f240 523c 	movw	r2, #1340	; 0x53c
 801a112:	4960      	ldr	r1, [pc, #384]	; (801a294 <tcp_receive+0x5b8>)
 801a114:	4858      	ldr	r0, [pc, #352]	; (801a278 <tcp_receive+0x59c>)
 801a116:	f003 fee6 	bl	801dee6 <iprintf>
 801a11a:	e7e4      	b.n	801a0e6 <tcp_receive+0x40a>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801a11c:	4b54      	ldr	r3, [pc, #336]	; (801a270 <tcp_receive+0x594>)
 801a11e:	f240 523d 	movw	r2, #1341	; 0x53d
 801a122:	495d      	ldr	r1, [pc, #372]	; (801a298 <tcp_receive+0x5bc>)
 801a124:	4854      	ldr	r0, [pc, #336]	; (801a278 <tcp_receive+0x59c>)
 801a126:	f003 fede 	bl	801dee6 <iprintf>
 801a12a:	e7e0      	b.n	801a0ee <tcp_receive+0x412>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a12c:	4b50      	ldr	r3, [pc, #320]	; (801a270 <tcp_receive+0x594>)
 801a12e:	f240 523f 	movw	r2, #1343	; 0x53f
 801a132:	495a      	ldr	r1, [pc, #360]	; (801a29c <tcp_receive+0x5c0>)
 801a134:	4850      	ldr	r0, [pc, #320]	; (801a278 <tcp_receive+0x59c>)
 801a136:	f003 fed6 	bl	801dee6 <iprintf>
 801a13a:	e7e0      	b.n	801a0fe <tcp_receive+0x422>
          off -= p->len;
 801a13c:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 801a13e:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 801a140:	2300      	movs	r3, #0
 801a142:	816b      	strh	r3, [r5, #10]
          p = p->next;
 801a144:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 801a146:	896b      	ldrh	r3, [r5, #10]
 801a148:	429f      	cmp	r7, r3
 801a14a:	dcf7      	bgt.n	801a13c <tcp_receive+0x460>
        if (pbuf_header(p, (s16_t)-off)) {
 801a14c:	4279      	negs	r1, r7
 801a14e:	b209      	sxth	r1, r1
 801a150:	4628      	mov	r0, r5
 801a152:	f7fe f8f1 	bl	8018338 <pbuf_header>
 801a156:	b960      	cbnz	r0, 801a172 <tcp_receive+0x496>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 801a158:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a15a:	484b      	ldr	r0, [pc, #300]	; (801a288 <tcp_receive+0x5ac>)
 801a15c:	6803      	ldr	r3, [r0, #0]
 801a15e:	1a9b      	subs	r3, r3, r2
 801a160:	494b      	ldr	r1, [pc, #300]	; (801a290 <tcp_receive+0x5b4>)
 801a162:	890d      	ldrh	r5, [r1, #8]
 801a164:	fa15 f383 	uxtah	r3, r5, r3
 801a168:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a16a:	68cb      	ldr	r3, [r1, #12]
 801a16c:	6002      	str	r2, [r0, #0]
 801a16e:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a170:	e782      	b.n	801a078 <tcp_receive+0x39c>
          LWIP_ASSERT("pbuf_header failed", 0);
 801a172:	4b3f      	ldr	r3, [pc, #252]	; (801a270 <tcp_receive+0x594>)
 801a174:	f240 524c 	movw	r2, #1356	; 0x54c
 801a178:	4949      	ldr	r1, [pc, #292]	; (801a2a0 <tcp_receive+0x5c4>)
 801a17a:	483f      	ldr	r0, [pc, #252]	; (801a278 <tcp_receive+0x59c>)
 801a17c:	f003 feb3 	bl	801dee6 <iprintf>
 801a180:	e7ea      	b.n	801a158 <tcp_receive+0x47c>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 801a182:	4271      	negs	r1, r6
 801a184:	b209      	sxth	r1, r1
 801a186:	f7fe f8d7 	bl	8018338 <pbuf_header>
 801a18a:	2800      	cmp	r0, #0
 801a18c:	d0e4      	beq.n	801a158 <tcp_receive+0x47c>
          LWIP_ASSERT("pbuf_header failed", 0);
 801a18e:	4b38      	ldr	r3, [pc, #224]	; (801a270 <tcp_receive+0x594>)
 801a190:	f240 5251 	movw	r2, #1361	; 0x551
 801a194:	4942      	ldr	r1, [pc, #264]	; (801a2a0 <tcp_receive+0x5c4>)
 801a196:	4838      	ldr	r0, [pc, #224]	; (801a278 <tcp_receive+0x59c>)
 801a198:	f003 fea5 	bl	801dee6 <iprintf>
 801a19c:	e7dc      	b.n	801a158 <tcp_receive+0x47c>
        tcp_ack_now(pcb);
 801a19e:	7ea3      	ldrb	r3, [r4, #26]
 801a1a0:	f043 0302 	orr.w	r3, r3, #2
 801a1a4:	76a3      	strb	r3, [r4, #26]
 801a1a6:	e767      	b.n	801a078 <tcp_receive+0x39c>
      if (pcb->rcv_nxt == seqno) {
 801a1a8:	4291      	cmp	r1, r2
 801a1aa:	d008      	beq.n	801a1be <tcp_receive+0x4e2>
        tcp_send_empty_ack(pcb);
 801a1ac:	4620      	mov	r0, r4
 801a1ae:	f001 fd05 	bl	801bbbc <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 801a1b2:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801a1b4:	2d00      	cmp	r5, #0
 801a1b6:	f000 81ad 	beq.w	801a514 <tcp_receive+0x838>
 801a1ba:	2600      	movs	r6, #0
 801a1bc:	e1e4      	b.n	801a588 <tcp_receive+0x8ac>
        tcplen = TCP_TCPLEN(&inseg);
 801a1be:	4b34      	ldr	r3, [pc, #208]	; (801a290 <tcp_receive+0x5b4>)
 801a1c0:	891d      	ldrh	r5, [r3, #8]
 801a1c2:	68db      	ldr	r3, [r3, #12]
 801a1c4:	8998      	ldrh	r0, [r3, #12]
 801a1c6:	f7fb ff8e 	bl	80160e6 <lwip_htons>
 801a1ca:	f010 0f03 	tst.w	r0, #3
 801a1ce:	d015      	beq.n	801a1fc <tcp_receive+0x520>
 801a1d0:	2301      	movs	r3, #1
 801a1d2:	442b      	add	r3, r5
 801a1d4:	b29b      	uxth	r3, r3
 801a1d6:	4a2b      	ldr	r2, [pc, #172]	; (801a284 <tcp_receive+0x5a8>)
 801a1d8:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 801a1da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a1dc:	4293      	cmp	r3, r2
 801a1de:	d80f      	bhi.n	801a200 <tcp_receive+0x524>
        if (pcb->ooseq != NULL) {
 801a1e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	f000 80ed 	beq.w	801a3c2 <tcp_receive+0x6e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a1e8:	4b29      	ldr	r3, [pc, #164]	; (801a290 <tcp_receive+0x5b4>)
 801a1ea:	68db      	ldr	r3, [r3, #12]
 801a1ec:	8998      	ldrh	r0, [r3, #12]
 801a1ee:	f7fb ff7a 	bl	80160e6 <lwip_htons>
 801a1f2:	f010 0f01 	tst.w	r0, #1
 801a1f6:	d168      	bne.n	801a2ca <tcp_receive+0x5ee>
            next = pcb->ooseq;
 801a1f8:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 801a1fa:	e077      	b.n	801a2ec <tcp_receive+0x610>
        tcplen = TCP_TCPLEN(&inseg);
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	e7e8      	b.n	801a1d2 <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a200:	4b23      	ldr	r3, [pc, #140]	; (801a290 <tcp_receive+0x5b4>)
 801a202:	68db      	ldr	r3, [r3, #12]
 801a204:	8998      	ldrh	r0, [r3, #12]
 801a206:	f7fb ff6e 	bl	80160e6 <lwip_htons>
 801a20a:	f010 0f01 	tst.w	r0, #1
 801a20e:	d14b      	bne.n	801a2a8 <tcp_receive+0x5cc>
          inseg.len = (u16_t)pcb->rcv_wnd;
 801a210:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a212:	4b1f      	ldr	r3, [pc, #124]	; (801a290 <tcp_receive+0x5b4>)
 801a214:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a216:	68db      	ldr	r3, [r3, #12]
 801a218:	8998      	ldrh	r0, [r3, #12]
 801a21a:	f7fb ff64 	bl	80160e6 <lwip_htons>
 801a21e:	f010 0f02 	tst.w	r0, #2
 801a222:	d003      	beq.n	801a22c <tcp_receive+0x550>
            inseg.len -= 1;
 801a224:	4a1a      	ldr	r2, [pc, #104]	; (801a290 <tcp_receive+0x5b4>)
 801a226:	8913      	ldrh	r3, [r2, #8]
 801a228:	3b01      	subs	r3, #1
 801a22a:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801a22c:	4d18      	ldr	r5, [pc, #96]	; (801a290 <tcp_receive+0x5b4>)
 801a22e:	8929      	ldrh	r1, [r5, #8]
 801a230:	6868      	ldr	r0, [r5, #4]
 801a232:	f7fe f9df 	bl	80185f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801a236:	892e      	ldrh	r6, [r5, #8]
 801a238:	68eb      	ldr	r3, [r5, #12]
 801a23a:	8998      	ldrh	r0, [r3, #12]
 801a23c:	f7fb ff53 	bl	80160e6 <lwip_htons>
 801a240:	f010 0f03 	tst.w	r0, #3
 801a244:	d03f      	beq.n	801a2c6 <tcp_receive+0x5ea>
 801a246:	2301      	movs	r3, #1
 801a248:	4433      	add	r3, r6
 801a24a:	b29b      	uxth	r3, r3
 801a24c:	4a0d      	ldr	r2, [pc, #52]	; (801a284 <tcp_receive+0x5a8>)
 801a24e:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a250:	4a0d      	ldr	r2, [pc, #52]	; (801a288 <tcp_receive+0x5ac>)
 801a252:	6812      	ldr	r2, [r2, #0]
 801a254:	4413      	add	r3, r2
 801a256:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a258:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a25a:	440a      	add	r2, r1
 801a25c:	4293      	cmp	r3, r2
 801a25e:	d0bf      	beq.n	801a1e0 <tcp_receive+0x504>
 801a260:	4b03      	ldr	r3, [pc, #12]	; (801a270 <tcp_receive+0x594>)
 801a262:	f240 527f 	movw	r2, #1407	; 0x57f
 801a266:	490f      	ldr	r1, [pc, #60]	; (801a2a4 <tcp_receive+0x5c8>)
 801a268:	4803      	ldr	r0, [pc, #12]	; (801a278 <tcp_receive+0x59c>)
 801a26a:	f003 fe3c 	bl	801dee6 <iprintf>
 801a26e:	e7b7      	b.n	801a1e0 <tcp_receive+0x504>
 801a270:	080224f4 	.word	0x080224f4
 801a274:	08022544 	.word	0x08022544
 801a278:	0801e950 	.word	0x0801e950
 801a27c:	200040d8 	.word	0x200040d8
 801a280:	200040c0 	.word	0x200040c0
 801a284:	200040fa 	.word	0x200040fa
 801a288:	200040e4 	.word	0x200040e4
 801a28c:	20008aec 	.word	0x20008aec
 801a290:	200040c8 	.word	0x200040c8
 801a294:	0802258c 	.word	0x0802258c
 801a298:	0802259c 	.word	0x0802259c
 801a29c:	080225ac 	.word	0x080225ac
 801a2a0:	080225bc 	.word	0x080225bc
 801a2a4:	080225d0 	.word	0x080225d0
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801a2a8:	4ba9      	ldr	r3, [pc, #676]	; (801a550 <tcp_receive+0x874>)
 801a2aa:	68de      	ldr	r6, [r3, #12]
 801a2ac:	89b0      	ldrh	r0, [r6, #12]
 801a2ae:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 801a2b2:	b2ad      	uxth	r5, r5
 801a2b4:	f7fb ff17 	bl	80160e6 <lwip_htons>
 801a2b8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801a2bc:	f7fb ff13 	bl	80160e6 <lwip_htons>
 801a2c0:	4328      	orrs	r0, r5
 801a2c2:	81b0      	strh	r0, [r6, #12]
 801a2c4:	e7a4      	b.n	801a210 <tcp_receive+0x534>
          tcplen = TCP_TCPLEN(&inseg);
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	e7be      	b.n	801a248 <tcp_receive+0x56c>
            while (pcb->ooseq != NULL) {
 801a2ca:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801a2cc:	2800      	cmp	r0, #0
 801a2ce:	d078      	beq.n	801a3c2 <tcp_receive+0x6e6>
              pcb->ooseq = pcb->ooseq->next;
 801a2d0:	6803      	ldr	r3, [r0, #0]
 801a2d2:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 801a2d4:	f7fe fd1e 	bl	8018d14 <tcp_seg_free>
 801a2d8:	e7f7      	b.n	801a2ca <tcp_receive+0x5ee>
                tcplen = TCP_TCPLEN(&inseg);
 801a2da:	2300      	movs	r3, #0
 801a2dc:	443b      	add	r3, r7
 801a2de:	4a9d      	ldr	r2, [pc, #628]	; (801a554 <tcp_receive+0x878>)
 801a2e0:	8013      	strh	r3, [r2, #0]
              next = next->next;
 801a2e2:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 801a2e4:	4628      	mov	r0, r5
 801a2e6:	f7fe fd15 	bl	8018d14 <tcp_seg_free>
              next = next->next;
 801a2ea:	4635      	mov	r5, r6
            while (next &&
 801a2ec:	b375      	cbz	r5, 801a34c <tcp_receive+0x670>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a2ee:	4b99      	ldr	r3, [pc, #612]	; (801a554 <tcp_receive+0x878>)
 801a2f0:	881b      	ldrh	r3, [r3, #0]
 801a2f2:	4a99      	ldr	r2, [pc, #612]	; (801a558 <tcp_receive+0x87c>)
 801a2f4:	6812      	ldr	r2, [r2, #0]
 801a2f6:	4413      	add	r3, r2
 801a2f8:	68e9      	ldr	r1, [r5, #12]
 801a2fa:	684a      	ldr	r2, [r1, #4]
 801a2fc:	8928      	ldrh	r0, [r5, #8]
 801a2fe:	4402      	add	r2, r0
 801a300:	1a9b      	subs	r3, r3, r2
            while (next &&
 801a302:	2b00      	cmp	r3, #0
 801a304:	db22      	blt.n	801a34c <tcp_receive+0x670>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a306:	8988      	ldrh	r0, [r1, #12]
 801a308:	f7fb feed 	bl	80160e6 <lwip_htons>
 801a30c:	f010 0f01 	tst.w	r0, #1
 801a310:	d0e7      	beq.n	801a2e2 <tcp_receive+0x606>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801a312:	4b8f      	ldr	r3, [pc, #572]	; (801a550 <tcp_receive+0x874>)
 801a314:	68db      	ldr	r3, [r3, #12]
 801a316:	8998      	ldrh	r0, [r3, #12]
 801a318:	f7fb fee5 	bl	80160e6 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a31c:	f010 0f02 	tst.w	r0, #2
 801a320:	d1df      	bne.n	801a2e2 <tcp_receive+0x606>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801a322:	4e8b      	ldr	r6, [pc, #556]	; (801a550 <tcp_receive+0x874>)
 801a324:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801a328:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 801a32c:	2001      	movs	r0, #1
 801a32e:	f7fb feda 	bl	80160e6 <lwip_htons>
 801a332:	4338      	orrs	r0, r7
 801a334:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801a338:	8937      	ldrh	r7, [r6, #8]
 801a33a:	68f3      	ldr	r3, [r6, #12]
 801a33c:	8998      	ldrh	r0, [r3, #12]
 801a33e:	f7fb fed2 	bl	80160e6 <lwip_htons>
 801a342:	f010 0f03 	tst.w	r0, #3
 801a346:	d0c8      	beq.n	801a2da <tcp_receive+0x5fe>
 801a348:	2301      	movs	r3, #1
 801a34a:	e7c7      	b.n	801a2dc <tcp_receive+0x600>
            if (next &&
 801a34c:	2d00      	cmp	r5, #0
 801a34e:	d037      	beq.n	801a3c0 <tcp_receive+0x6e4>
                TCP_SEQ_GT(seqno + tcplen,
 801a350:	4b81      	ldr	r3, [pc, #516]	; (801a558 <tcp_receive+0x87c>)
 801a352:	6819      	ldr	r1, [r3, #0]
 801a354:	4b7f      	ldr	r3, [pc, #508]	; (801a554 <tcp_receive+0x878>)
 801a356:	881b      	ldrh	r3, [r3, #0]
 801a358:	440b      	add	r3, r1
 801a35a:	68ea      	ldr	r2, [r5, #12]
 801a35c:	6852      	ldr	r2, [r2, #4]
 801a35e:	1a9b      	subs	r3, r3, r2
            if (next &&
 801a360:	2b00      	cmp	r3, #0
 801a362:	dd2d      	ble.n	801a3c0 <tcp_receive+0x6e4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a364:	1a52      	subs	r2, r2, r1
 801a366:	4b7a      	ldr	r3, [pc, #488]	; (801a550 <tcp_receive+0x874>)
 801a368:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a36a:	68db      	ldr	r3, [r3, #12]
 801a36c:	8998      	ldrh	r0, [r3, #12]
 801a36e:	f7fb feba 	bl	80160e6 <lwip_htons>
 801a372:	f010 0f02 	tst.w	r0, #2
 801a376:	d003      	beq.n	801a380 <tcp_receive+0x6a4>
                inseg.len -= 1;
 801a378:	4a75      	ldr	r2, [pc, #468]	; (801a550 <tcp_receive+0x874>)
 801a37a:	8913      	ldrh	r3, [r2, #8]
 801a37c:	3b01      	subs	r3, #1
 801a37e:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801a380:	4e73      	ldr	r6, [pc, #460]	; (801a550 <tcp_receive+0x874>)
 801a382:	8931      	ldrh	r1, [r6, #8]
 801a384:	6870      	ldr	r0, [r6, #4]
 801a386:	f7fe f935 	bl	80185f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a38a:	8937      	ldrh	r7, [r6, #8]
 801a38c:	68f3      	ldr	r3, [r6, #12]
 801a38e:	8998      	ldrh	r0, [r3, #12]
 801a390:	f7fb fea9 	bl	80160e6 <lwip_htons>
 801a394:	f010 0f03 	tst.w	r0, #3
 801a398:	d03b      	beq.n	801a412 <tcp_receive+0x736>
 801a39a:	2301      	movs	r3, #1
 801a39c:	443b      	add	r3, r7
 801a39e:	b29b      	uxth	r3, r3
 801a3a0:	4a6c      	ldr	r2, [pc, #432]	; (801a554 <tcp_receive+0x878>)
 801a3a2:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a3a4:	4a6c      	ldr	r2, [pc, #432]	; (801a558 <tcp_receive+0x87c>)
 801a3a6:	6812      	ldr	r2, [r2, #0]
 801a3a8:	4413      	add	r3, r2
 801a3aa:	68ea      	ldr	r2, [r5, #12]
 801a3ac:	6852      	ldr	r2, [r2, #4]
 801a3ae:	4293      	cmp	r3, r2
 801a3b0:	d006      	beq.n	801a3c0 <tcp_receive+0x6e4>
 801a3b2:	4b6a      	ldr	r3, [pc, #424]	; (801a55c <tcp_receive+0x880>)
 801a3b4:	f240 52af 	movw	r2, #1455	; 0x5af
 801a3b8:	4969      	ldr	r1, [pc, #420]	; (801a560 <tcp_receive+0x884>)
 801a3ba:	486a      	ldr	r0, [pc, #424]	; (801a564 <tcp_receive+0x888>)
 801a3bc:	f003 fd93 	bl	801dee6 <iprintf>
            pcb->ooseq = next;
 801a3c0:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
 801a3c2:	4b64      	ldr	r3, [pc, #400]	; (801a554 <tcp_receive+0x878>)
 801a3c4:	881a      	ldrh	r2, [r3, #0]
 801a3c6:	4b64      	ldr	r3, [pc, #400]	; (801a558 <tcp_receive+0x87c>)
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	4413      	add	r3, r2
 801a3cc:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a3ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a3d0:	429a      	cmp	r2, r3
 801a3d2:	d820      	bhi.n	801a416 <tcp_receive+0x73a>
        pcb->rcv_wnd -= tcplen;
 801a3d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a3d6:	4a5f      	ldr	r2, [pc, #380]	; (801a554 <tcp_receive+0x878>)
 801a3d8:	8812      	ldrh	r2, [r2, #0]
 801a3da:	1a9b      	subs	r3, r3, r2
 801a3dc:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801a3de:	4620      	mov	r0, r4
 801a3e0:	f7fe fc26 	bl	8018c30 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801a3e4:	4b5a      	ldr	r3, [pc, #360]	; (801a550 <tcp_receive+0x874>)
 801a3e6:	685b      	ldr	r3, [r3, #4]
 801a3e8:	891a      	ldrh	r2, [r3, #8]
 801a3ea:	b122      	cbz	r2, 801a3f6 <tcp_receive+0x71a>
          recv_data = inseg.p;
 801a3ec:	4a5e      	ldr	r2, [pc, #376]	; (801a568 <tcp_receive+0x88c>)
 801a3ee:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801a3f0:	2200      	movs	r2, #0
 801a3f2:	4b57      	ldr	r3, [pc, #348]	; (801a550 <tcp_receive+0x874>)
 801a3f4:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a3f6:	4b56      	ldr	r3, [pc, #344]	; (801a550 <tcp_receive+0x874>)
 801a3f8:	68db      	ldr	r3, [r3, #12]
 801a3fa:	8998      	ldrh	r0, [r3, #12]
 801a3fc:	f7fb fe73 	bl	80160e6 <lwip_htons>
 801a400:	f010 0f01 	tst.w	r0, #1
 801a404:	d035      	beq.n	801a472 <tcp_receive+0x796>
          recv_flags |= TF_GOT_FIN;
 801a406:	4a59      	ldr	r2, [pc, #356]	; (801a56c <tcp_receive+0x890>)
 801a408:	7813      	ldrb	r3, [r2, #0]
 801a40a:	f043 0320 	orr.w	r3, r3, #32
 801a40e:	7013      	strb	r3, [r2, #0]
 801a410:	e02f      	b.n	801a472 <tcp_receive+0x796>
              tcplen = TCP_TCPLEN(&inseg);
 801a412:	2300      	movs	r3, #0
 801a414:	e7c2      	b.n	801a39c <tcp_receive+0x6c0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a416:	4b51      	ldr	r3, [pc, #324]	; (801a55c <tcp_receive+0x880>)
 801a418:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a41c:	4954      	ldr	r1, [pc, #336]	; (801a570 <tcp_receive+0x894>)
 801a41e:	4851      	ldr	r0, [pc, #324]	; (801a564 <tcp_receive+0x888>)
 801a420:	f003 fd61 	bl	801dee6 <iprintf>
 801a424:	e7d6      	b.n	801a3d4 <tcp_receive+0x6f8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a426:	2300      	movs	r3, #0
 801a428:	e035      	b.n	801a496 <tcp_receive+0x7ba>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a42a:	2300      	movs	r3, #0
 801a42c:	e041      	b.n	801a4b2 <tcp_receive+0x7d6>
 801a42e:	4b4b      	ldr	r3, [pc, #300]	; (801a55c <tcp_receive+0x880>)
 801a430:	f240 52de 	movw	r2, #1502	; 0x5de
 801a434:	494f      	ldr	r1, [pc, #316]	; (801a574 <tcp_receive+0x898>)
 801a436:	484b      	ldr	r0, [pc, #300]	; (801a564 <tcp_receive+0x888>)
 801a438:	f003 fd55 	bl	801dee6 <iprintf>
 801a43c:	e03c      	b.n	801a4b8 <tcp_receive+0x7dc>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a43e:	2300      	movs	r3, #0
 801a440:	e043      	b.n	801a4ca <tcp_receive+0x7ee>
              recv_data = cseg->p;
 801a442:	4b49      	ldr	r3, [pc, #292]	; (801a568 <tcp_receive+0x88c>)
 801a444:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 801a446:	2300      	movs	r3, #0
 801a448:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a44a:	68eb      	ldr	r3, [r5, #12]
 801a44c:	8998      	ldrh	r0, [r3, #12]
 801a44e:	f7fb fe4a 	bl	80160e6 <lwip_htons>
 801a452:	f010 0f01 	tst.w	r0, #1
 801a456:	d007      	beq.n	801a468 <tcp_receive+0x78c>
            recv_flags |= TF_GOT_FIN;
 801a458:	4a44      	ldr	r2, [pc, #272]	; (801a56c <tcp_receive+0x890>)
 801a45a:	7813      	ldrb	r3, [r2, #0]
 801a45c:	f043 0320 	orr.w	r3, r3, #32
 801a460:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a462:	7d23      	ldrb	r3, [r4, #20]
 801a464:	2b04      	cmp	r3, #4
 801a466:	d042      	beq.n	801a4ee <tcp_receive+0x812>
          pcb->ooseq = cseg->next;
 801a468:	682b      	ldr	r3, [r5, #0]
 801a46a:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 801a46c:	4628      	mov	r0, r5
 801a46e:	f7fe fc51 	bl	8018d14 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a472:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801a474:	2d00      	cmp	r5, #0
 801a476:	d03d      	beq.n	801a4f4 <tcp_receive+0x818>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a478:	68ea      	ldr	r2, [r5, #12]
 801a47a:	6853      	ldr	r3, [r2, #4]
 801a47c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a47e:	428b      	cmp	r3, r1
 801a480:	d138      	bne.n	801a4f4 <tcp_receive+0x818>
          seqno = pcb->ooseq->tcphdr->seqno;
 801a482:	4935      	ldr	r1, [pc, #212]	; (801a558 <tcp_receive+0x87c>)
 801a484:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a486:	892e      	ldrh	r6, [r5, #8]
 801a488:	8990      	ldrh	r0, [r2, #12]
 801a48a:	f7fb fe2c 	bl	80160e6 <lwip_htons>
 801a48e:	f010 0f03 	tst.w	r0, #3
 801a492:	d0c8      	beq.n	801a426 <tcp_receive+0x74a>
 801a494:	2301      	movs	r3, #1
 801a496:	199a      	adds	r2, r3, r6
 801a498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a49a:	4413      	add	r3, r2
 801a49c:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a49e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 801a4a0:	892f      	ldrh	r7, [r5, #8]
 801a4a2:	68eb      	ldr	r3, [r5, #12]
 801a4a4:	8998      	ldrh	r0, [r3, #12]
 801a4a6:	f7fb fe1e 	bl	80160e6 <lwip_htons>
 801a4aa:	f010 0f03 	tst.w	r0, #3
 801a4ae:	d0bc      	beq.n	801a42a <tcp_receive+0x74e>
 801a4b0:	2301      	movs	r3, #1
 801a4b2:	443b      	add	r3, r7
 801a4b4:	429e      	cmp	r6, r3
 801a4b6:	d3ba      	bcc.n	801a42e <tcp_receive+0x752>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a4b8:	892e      	ldrh	r6, [r5, #8]
 801a4ba:	68eb      	ldr	r3, [r5, #12]
 801a4bc:	8998      	ldrh	r0, [r3, #12]
 801a4be:	f7fb fe12 	bl	80160e6 <lwip_htons>
 801a4c2:	f010 0f03 	tst.w	r0, #3
 801a4c6:	d0ba      	beq.n	801a43e <tcp_receive+0x762>
 801a4c8:	2301      	movs	r3, #1
 801a4ca:	199a      	adds	r2, r3, r6
 801a4cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a4ce:	1a9b      	subs	r3, r3, r2
 801a4d0:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801a4d2:	4620      	mov	r0, r4
 801a4d4:	f7fe fbac 	bl	8018c30 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801a4d8:	6869      	ldr	r1, [r5, #4]
 801a4da:	890b      	ldrh	r3, [r1, #8]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d0b4      	beq.n	801a44a <tcp_receive+0x76e>
            if (recv_data) {
 801a4e0:	4b21      	ldr	r3, [pc, #132]	; (801a568 <tcp_receive+0x88c>)
 801a4e2:	6818      	ldr	r0, [r3, #0]
 801a4e4:	2800      	cmp	r0, #0
 801a4e6:	d0ac      	beq.n	801a442 <tcp_receive+0x766>
              pbuf_cat(recv_data, cseg->p);
 801a4e8:	f7fe f91c 	bl	8018724 <pbuf_cat>
 801a4ec:	e7ab      	b.n	801a446 <tcp_receive+0x76a>
              pcb->state = CLOSE_WAIT;
 801a4ee:	2307      	movs	r3, #7
 801a4f0:	7523      	strb	r3, [r4, #20]
 801a4f2:	e7b9      	b.n	801a468 <tcp_receive+0x78c>
        tcp_ack(pcb);
 801a4f4:	7ea3      	ldrb	r3, [r4, #26]
 801a4f6:	f013 0f01 	tst.w	r3, #1
 801a4fa:	d006      	beq.n	801a50a <tcp_receive+0x82e>
 801a4fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801a500:	f043 0302 	orr.w	r3, r3, #2
 801a504:	76a3      	strb	r3, [r4, #26]
 801a506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a50a:	f043 0301 	orr.w	r3, r3, #1
 801a50e:	76a3      	strb	r3, [r4, #26]
 801a510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a514:	480e      	ldr	r0, [pc, #56]	; (801a550 <tcp_receive+0x874>)
 801a516:	f7fe fc14 	bl	8018d42 <tcp_seg_copy>
 801a51a:	6720      	str	r0, [r4, #112]	; 0x70
 801a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 801a520:	4b0b      	ldr	r3, [pc, #44]	; (801a550 <tcp_receive+0x874>)
 801a522:	891a      	ldrh	r2, [r3, #8]
 801a524:	892b      	ldrh	r3, [r5, #8]
 801a526:	429a      	cmp	r2, r3
 801a528:	f240 80ee 	bls.w	801a708 <tcp_receive+0xa2c>
                cseg = tcp_seg_copy(&inseg);
 801a52c:	4808      	ldr	r0, [pc, #32]	; (801a550 <tcp_receive+0x874>)
 801a52e:	f7fe fc08 	bl	8018d42 <tcp_seg_copy>
                if (cseg != NULL) {
 801a532:	4603      	mov	r3, r0
 801a534:	2800      	cmp	r0, #0
 801a536:	f000 80e7 	beq.w	801a708 <tcp_receive+0xa2c>
                  if (prev != NULL) {
 801a53a:	b136      	cbz	r6, 801a54a <tcp_receive+0x86e>
                    prev->next = cseg;
 801a53c:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 801a53e:	4629      	mov	r1, r5
 801a540:	4618      	mov	r0, r3
 801a542:	f7ff fb89 	bl	8019c58 <tcp_oos_insert_segment>
 801a546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 801a54a:	6720      	str	r0, [r4, #112]	; 0x70
 801a54c:	e7f7      	b.n	801a53e <tcp_receive+0x862>
 801a54e:	bf00      	nop
 801a550:	200040c8 	.word	0x200040c8
 801a554:	200040fa 	.word	0x200040fa
 801a558:	200040e4 	.word	0x200040e4
 801a55c:	080224f4 	.word	0x080224f4
 801a560:	08022608 	.word	0x08022608
 801a564:	0801e950 	.word	0x0801e950
 801a568:	200040dc 	.word	0x200040dc
 801a56c:	200040e0 	.word	0x200040e0
 801a570:	08022644 	.word	0x08022644
 801a574:	08022664 	.word	0x08022664
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a578:	1a5a      	subs	r2, r3, r1
 801a57a:	2a00      	cmp	r2, #0
 801a57c:	db35      	blt.n	801a5ea <tcp_receive+0x90e>
              if (next->next == NULL &&
 801a57e:	682a      	ldr	r2, [r5, #0]
 801a580:	462e      	mov	r6, r5
 801a582:	2a00      	cmp	r2, #0
 801a584:	d03d      	beq.n	801a602 <tcp_receive+0x926>
 801a586:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a588:	2d00      	cmp	r5, #0
 801a58a:	f000 80ab 	beq.w	801a6e4 <tcp_receive+0xa08>
            if (seqno == next->tcphdr->seqno) {
 801a58e:	68e8      	ldr	r0, [r5, #12]
 801a590:	6841      	ldr	r1, [r0, #4]
 801a592:	4b5e      	ldr	r3, [pc, #376]	; (801a70c <tcp_receive+0xa30>)
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	4299      	cmp	r1, r3
 801a598:	d0c2      	beq.n	801a520 <tcp_receive+0x844>
              if (prev == NULL) {
 801a59a:	2e00      	cmp	r6, #0
 801a59c:	d0ec      	beq.n	801a578 <tcp_receive+0x89c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 801a59e:	68f2      	ldr	r2, [r6, #12]
 801a5a0:	6852      	ldr	r2, [r2, #4]
 801a5a2:	1a9a      	subs	r2, r3, r2
 801a5a4:	2a01      	cmp	r2, #1
 801a5a6:	d4ea      	bmi.n	801a57e <tcp_receive+0x8a2>
 801a5a8:	1a5a      	subs	r2, r3, r1
 801a5aa:	3201      	adds	r2, #1
 801a5ac:	2a00      	cmp	r2, #0
 801a5ae:	dce6      	bgt.n	801a57e <tcp_receive+0x8a2>
                  cseg = tcp_seg_copy(&inseg);
 801a5b0:	4857      	ldr	r0, [pc, #348]	; (801a710 <tcp_receive+0xa34>)
 801a5b2:	f7fe fbc6 	bl	8018d42 <tcp_seg_copy>
                  if (cseg != NULL) {
 801a5b6:	4604      	mov	r4, r0
 801a5b8:	2800      	cmp	r0, #0
 801a5ba:	f000 80a5 	beq.w	801a708 <tcp_receive+0xa2c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a5be:	68f3      	ldr	r3, [r6, #12]
 801a5c0:	6859      	ldr	r1, [r3, #4]
 801a5c2:	8932      	ldrh	r2, [r6, #8]
 801a5c4:	440a      	add	r2, r1
 801a5c6:	4b51      	ldr	r3, [pc, #324]	; (801a70c <tcp_receive+0xa30>)
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	1ad2      	subs	r2, r2, r3
 801a5cc:	2a00      	cmp	r2, #0
 801a5ce:	dd05      	ble.n	801a5dc <tcp_receive+0x900>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a5d0:	1a5b      	subs	r3, r3, r1
 801a5d2:	b299      	uxth	r1, r3
 801a5d4:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a5d6:	6870      	ldr	r0, [r6, #4]
 801a5d8:	f7fe f80c 	bl	80185f4 <pbuf_realloc>
                    prev->next = cseg;
 801a5dc:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a5de:	4629      	mov	r1, r5
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	f7ff fb39 	bl	8019c58 <tcp_oos_insert_segment>
 801a5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 801a5ea:	4849      	ldr	r0, [pc, #292]	; (801a710 <tcp_receive+0xa34>)
 801a5ec:	f7fe fba9 	bl	8018d42 <tcp_seg_copy>
                  if (cseg != NULL) {
 801a5f0:	2800      	cmp	r0, #0
 801a5f2:	f000 8089 	beq.w	801a708 <tcp_receive+0xa2c>
                    pcb->ooseq = cseg;
 801a5f6:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801a5f8:	4629      	mov	r1, r5
 801a5fa:	f7ff fb2d 	bl	8019c58 <tcp_oos_insert_segment>
 801a5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a602:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 801a604:	2b00      	cmp	r3, #0
 801a606:	dc01      	bgt.n	801a60c <tcp_receive+0x930>
 801a608:	4615      	mov	r5, r2
 801a60a:	e7bd      	b.n	801a588 <tcp_receive+0x8ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a60c:	8980      	ldrh	r0, [r0, #12]
 801a60e:	f7fb fd6a 	bl	80160e6 <lwip_htons>
 801a612:	f010 0f01 	tst.w	r0, #1
 801a616:	d177      	bne.n	801a708 <tcp_receive+0xa2c>
                next->next = tcp_seg_copy(&inseg);
 801a618:	483d      	ldr	r0, [pc, #244]	; (801a710 <tcp_receive+0xa34>)
 801a61a:	f7fe fb92 	bl	8018d42 <tcp_seg_copy>
 801a61e:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801a620:	2800      	cmp	r0, #0
 801a622:	d071      	beq.n	801a708 <tcp_receive+0xa2c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a624:	68eb      	ldr	r3, [r5, #12]
 801a626:	6859      	ldr	r1, [r3, #4]
 801a628:	892a      	ldrh	r2, [r5, #8]
 801a62a:	440a      	add	r2, r1
 801a62c:	4b37      	ldr	r3, [pc, #220]	; (801a70c <tcp_receive+0xa30>)
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	1ad2      	subs	r2, r2, r3
 801a632:	2a00      	cmp	r2, #0
 801a634:	dd05      	ble.n	801a642 <tcp_receive+0x966>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a636:	1a5b      	subs	r3, r3, r1
 801a638:	b299      	uxth	r1, r3
 801a63a:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801a63c:	6868      	ldr	r0, [r5, #4]
 801a63e:	f7fd ffd9 	bl	80185f4 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a642:	4b34      	ldr	r3, [pc, #208]	; (801a714 <tcp_receive+0xa38>)
 801a644:	881b      	ldrh	r3, [r3, #0]
 801a646:	4a31      	ldr	r2, [pc, #196]	; (801a70c <tcp_receive+0xa30>)
 801a648:	6812      	ldr	r2, [r2, #0]
 801a64a:	4413      	add	r3, r2
 801a64c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a64e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a650:	440a      	add	r2, r1
 801a652:	1a9b      	subs	r3, r3, r2
 801a654:	2b00      	cmp	r3, #0
 801a656:	dd57      	ble.n	801a708 <tcp_receive+0xa2c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a658:	682b      	ldr	r3, [r5, #0]
 801a65a:	68db      	ldr	r3, [r3, #12]
 801a65c:	8998      	ldrh	r0, [r3, #12]
 801a65e:	f7fb fd42 	bl	80160e6 <lwip_htons>
 801a662:	f010 0f01 	tst.w	r0, #1
 801a666:	d12c      	bne.n	801a6c2 <tcp_receive+0x9e6>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a668:	682a      	ldr	r2, [r5, #0]
 801a66a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a66c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a66e:	440b      	add	r3, r1
 801a670:	b29b      	uxth	r3, r3
 801a672:	4926      	ldr	r1, [pc, #152]	; (801a70c <tcp_receive+0xa30>)
 801a674:	6809      	ldr	r1, [r1, #0]
 801a676:	1a5b      	subs	r3, r3, r1
 801a678:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a67a:	682b      	ldr	r3, [r5, #0]
 801a67c:	8919      	ldrh	r1, [r3, #8]
 801a67e:	6858      	ldr	r0, [r3, #4]
 801a680:	f7fd ffb8 	bl	80185f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a684:	682b      	ldr	r3, [r5, #0]
 801a686:	891d      	ldrh	r5, [r3, #8]
 801a688:	68db      	ldr	r3, [r3, #12]
 801a68a:	8998      	ldrh	r0, [r3, #12]
 801a68c:	f7fb fd2b 	bl	80160e6 <lwip_htons>
 801a690:	f010 0f03 	tst.w	r0, #3
 801a694:	d024      	beq.n	801a6e0 <tcp_receive+0xa04>
 801a696:	2301      	movs	r3, #1
 801a698:	442b      	add	r3, r5
 801a69a:	b29b      	uxth	r3, r3
 801a69c:	4a1d      	ldr	r2, [pc, #116]	; (801a714 <tcp_receive+0xa38>)
 801a69e:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a6a0:	4a1a      	ldr	r2, [pc, #104]	; (801a70c <tcp_receive+0xa30>)
 801a6a2:	6812      	ldr	r2, [r2, #0]
 801a6a4:	4413      	add	r3, r2
 801a6a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a6a8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a6aa:	440a      	add	r2, r1
 801a6ac:	4293      	cmp	r3, r2
 801a6ae:	d02b      	beq.n	801a708 <tcp_receive+0xa2c>
 801a6b0:	4b19      	ldr	r3, [pc, #100]	; (801a718 <tcp_receive+0xa3c>)
 801a6b2:	f240 627b 	movw	r2, #1659	; 0x67b
 801a6b6:	4919      	ldr	r1, [pc, #100]	; (801a71c <tcp_receive+0xa40>)
 801a6b8:	4819      	ldr	r0, [pc, #100]	; (801a720 <tcp_receive+0xa44>)
 801a6ba:	f003 fc14 	bl	801dee6 <iprintf>
 801a6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a6c2:	682b      	ldr	r3, [r5, #0]
 801a6c4:	68df      	ldr	r7, [r3, #12]
 801a6c6:	89b8      	ldrh	r0, [r7, #12]
 801a6c8:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 801a6cc:	b2b6      	uxth	r6, r6
 801a6ce:	f7fb fd0a 	bl	80160e6 <lwip_htons>
 801a6d2:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801a6d6:	f7fb fd06 	bl	80160e6 <lwip_htons>
 801a6da:	4330      	orrs	r0, r6
 801a6dc:	81b8      	strh	r0, [r7, #12]
 801a6de:	e7c3      	b.n	801a668 <tcp_receive+0x98c>
                    tcplen = TCP_TCPLEN(next->next);
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	e7d9      	b.n	801a698 <tcp_receive+0x9bc>
 801a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a6e8:	4b08      	ldr	r3, [pc, #32]	; (801a70c <tcp_receive+0xa30>)
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a6ee:	1a99      	subs	r1, r3, r2
 801a6f0:	2900      	cmp	r1, #0
 801a6f2:	db05      	blt.n	801a700 <tcp_receive+0xa24>
 801a6f4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a6f6:	440a      	add	r2, r1
 801a6f8:	1a9b      	subs	r3, r3, r2
 801a6fa:	3301      	adds	r3, #1
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	dd03      	ble.n	801a708 <tcp_receive+0xa2c>
      tcp_ack_now(pcb);
 801a700:	7ea3      	ldrb	r3, [r4, #26]
 801a702:	f043 0302 	orr.w	r3, r3, #2
 801a706:	76a3      	strb	r3, [r4, #26]
 801a708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a70c:	200040e4 	.word	0x200040e4
 801a710:	200040c8 	.word	0x200040c8
 801a714:	200040fa 	.word	0x200040fa
 801a718:	080224f4 	.word	0x080224f4
 801a71c:	080225d0 	.word	0x080225d0
 801a720:	0801e950 	.word	0x0801e950

0801a724 <tcp_process>:
{
 801a724:	b570      	push	{r4, r5, r6, lr}
 801a726:	b082      	sub	sp, #8
 801a728:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 801a72a:	4ba3      	ldr	r3, [pc, #652]	; (801a9b8 <tcp_process+0x294>)
 801a72c:	781b      	ldrb	r3, [r3, #0]
 801a72e:	f013 0f04 	tst.w	r3, #4
 801a732:	d03d      	beq.n	801a7b0 <tcp_process+0x8c>
    if (pcb->state == SYN_SENT) {
 801a734:	7d01      	ldrb	r1, [r0, #20]
 801a736:	2902      	cmp	r1, #2
 801a738:	d012      	beq.n	801a760 <tcp_process+0x3c>
      if (seqno == pcb->rcv_nxt) {
 801a73a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801a73c:	4b9f      	ldr	r3, [pc, #636]	; (801a9bc <tcp_process+0x298>)
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	429a      	cmp	r2, r3
 801a742:	d01c      	beq.n	801a77e <tcp_process+0x5a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a744:	1a98      	subs	r0, r3, r2
 801a746:	2800      	cmp	r0, #0
 801a748:	db1b      	blt.n	801a782 <tcp_process+0x5e>
 801a74a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801a74c:	4402      	add	r2, r0
 801a74e:	1a9b      	subs	r3, r3, r2
 801a750:	2b00      	cmp	r3, #0
 801a752:	dd0c      	ble.n	801a76e <tcp_process+0x4a>
  u8_t acceptable = 0;
 801a754:	2300      	movs	r3, #0
    if (acceptable) {
 801a756:	b9b3      	cbnz	r3, 801a786 <tcp_process+0x62>
      return ERR_OK;
 801a758:	2500      	movs	r5, #0
}
 801a75a:	4628      	mov	r0, r5
 801a75c:	b002      	add	sp, #8
 801a75e:	bd70      	pop	{r4, r5, r6, pc}
      if (ackno == pcb->snd_nxt) {
 801a760:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801a762:	4b97      	ldr	r3, [pc, #604]	; (801a9c0 <tcp_process+0x29c>)
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	429a      	cmp	r2, r3
 801a768:	d007      	beq.n	801a77a <tcp_process+0x56>
  u8_t acceptable = 0;
 801a76a:	2300      	movs	r3, #0
 801a76c:	e7f3      	b.n	801a756 <tcp_process+0x32>
        tcp_ack_now(pcb);
 801a76e:	7ea3      	ldrb	r3, [r4, #26]
 801a770:	f043 0302 	orr.w	r3, r3, #2
 801a774:	76a3      	strb	r3, [r4, #26]
  u8_t acceptable = 0;
 801a776:	2300      	movs	r3, #0
 801a778:	e7ed      	b.n	801a756 <tcp_process+0x32>
        acceptable = 1;
 801a77a:	2301      	movs	r3, #1
 801a77c:	e7eb      	b.n	801a756 <tcp_process+0x32>
        acceptable = 1;
 801a77e:	2301      	movs	r3, #1
 801a780:	e7e9      	b.n	801a756 <tcp_process+0x32>
  u8_t acceptable = 0;
 801a782:	2300      	movs	r3, #0
 801a784:	e7e7      	b.n	801a756 <tcp_process+0x32>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a786:	b159      	cbz	r1, 801a7a0 <tcp_process+0x7c>
      recv_flags |= TF_RESET;
 801a788:	4a8e      	ldr	r2, [pc, #568]	; (801a9c4 <tcp_process+0x2a0>)
 801a78a:	7813      	ldrb	r3, [r2, #0]
 801a78c:	f043 0308 	orr.w	r3, r3, #8
 801a790:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801a792:	7ea3      	ldrb	r3, [r4, #26]
 801a794:	f023 0301 	bic.w	r3, r3, #1
 801a798:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 801a79a:	f06f 050d 	mvn.w	r5, #13
 801a79e:	e7dc      	b.n	801a75a <tcp_process+0x36>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a7a0:	4b89      	ldr	r3, [pc, #548]	; (801a9c8 <tcp_process+0x2a4>)
 801a7a2:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a7a6:	4989      	ldr	r1, [pc, #548]	; (801a9cc <tcp_process+0x2a8>)
 801a7a8:	4889      	ldr	r0, [pc, #548]	; (801a9d0 <tcp_process+0x2ac>)
 801a7aa:	f003 fb9c 	bl	801dee6 <iprintf>
 801a7ae:	e7eb      	b.n	801a788 <tcp_process+0x64>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801a7b0:	f013 0f02 	tst.w	r3, #2
 801a7b4:	d00a      	beq.n	801a7cc <tcp_process+0xa8>
 801a7b6:	7d03      	ldrb	r3, [r0, #20]
 801a7b8:	3b02      	subs	r3, #2
 801a7ba:	b2db      	uxtb	r3, r3
 801a7bc:	2b01      	cmp	r3, #1
 801a7be:	d905      	bls.n	801a7cc <tcp_process+0xa8>
    tcp_ack_now(pcb);
 801a7c0:	7e83      	ldrb	r3, [r0, #26]
 801a7c2:	f043 0302 	orr.w	r3, r3, #2
 801a7c6:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 801a7c8:	2500      	movs	r5, #0
 801a7ca:	e7c6      	b.n	801a75a <tcp_process+0x36>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801a7cc:	7ea3      	ldrb	r3, [r4, #26]
 801a7ce:	f013 0f10 	tst.w	r3, #16
 801a7d2:	d102      	bne.n	801a7da <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 801a7d4:	4b7f      	ldr	r3, [pc, #508]	; (801a9d4 <tcp_process+0x2b0>)
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 801a7da:	2300      	movs	r3, #0
 801a7dc:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 801a7e0:	4620      	mov	r0, r4
 801a7e2:	f7ff f8ff 	bl	80199e4 <tcp_parseopt>
  switch (pcb->state) {
 801a7e6:	7d23      	ldrb	r3, [r4, #20]
 801a7e8:	3b02      	subs	r3, #2
 801a7ea:	2b07      	cmp	r3, #7
 801a7ec:	f200 8219 	bhi.w	801ac22 <tcp_process+0x4fe>
 801a7f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a7f4:	009b0008 	.word	0x009b0008
 801a7f8:	01460135 	.word	0x01460135
 801a7fc:	0135019c 	.word	0x0135019c
 801a800:	01fd01ca 	.word	0x01fd01ca
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801a804:	4b6c      	ldr	r3, [pc, #432]	; (801a9b8 <tcp_process+0x294>)
 801a806:	781b      	ldrb	r3, [r3, #0]
 801a808:	f003 0212 	and.w	r2, r3, #18
 801a80c:	2a12      	cmp	r2, #18
 801a80e:	d004      	beq.n	801a81a <tcp_process+0xf6>
    else if (flags & TCP_ACK) {
 801a810:	f013 0f10 	tst.w	r3, #16
 801a814:	d16b      	bne.n	801a8ee <tcp_process+0x1ca>
  return ERR_OK;
 801a816:	2500      	movs	r5, #0
 801a818:	e79f      	b.n	801a75a <tcp_process+0x36>
        && (ackno == pcb->lastack + 1)) {
 801a81a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801a81c:	3201      	adds	r2, #1
 801a81e:	4968      	ldr	r1, [pc, #416]	; (801a9c0 <tcp_process+0x29c>)
 801a820:	6809      	ldr	r1, [r1, #0]
 801a822:	428a      	cmp	r2, r1
 801a824:	d1f4      	bne.n	801a810 <tcp_process+0xec>
      pcb->rcv_nxt = seqno + 1;
 801a826:	4b65      	ldr	r3, [pc, #404]	; (801a9bc <tcp_process+0x298>)
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	1c5a      	adds	r2, r3, #1
 801a82c:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a82e:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 801a830:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801a832:	4a69      	ldr	r2, [pc, #420]	; (801a9d8 <tcp_process+0x2b4>)
 801a834:	6812      	ldr	r2, [r2, #0]
 801a836:	89d2      	ldrh	r2, [r2, #14]
 801a838:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801a83c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801a840:	3b01      	subs	r3, #1
 801a842:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801a844:	2304      	movs	r3, #4
 801a846:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a848:	18e1      	adds	r1, r4, r3
 801a84a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801a84c:	f7ff f868 	bl	8019920 <tcp_eff_send_mss_impl>
 801a850:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a852:	0043      	lsls	r3, r0, #1
 801a854:	f241 121c 	movw	r2, #4380	; 0x111c
 801a858:	4293      	cmp	r3, r2
 801a85a:	bf38      	it	cc
 801a85c:	4613      	movcc	r3, r2
 801a85e:	0080      	lsls	r0, r0, #2
 801a860:	4283      	cmp	r3, r0
 801a862:	bf28      	it	cs
 801a864:	4603      	movcs	r3, r0
 801a866:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a86a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a86e:	b31b      	cbz	r3, 801a8b8 <tcp_process+0x194>
      --pcb->snd_queuelen;
 801a870:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a874:	3b01      	subs	r3, #1
 801a876:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 801a87a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 801a87c:	b325      	cbz	r5, 801a8c8 <tcp_process+0x1a4>
        pcb->unacked = rseg->next;
 801a87e:	682b      	ldr	r3, [r5, #0]
 801a880:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 801a882:	4628      	mov	r0, r5
 801a884:	f7fe fa46 	bl	8018d14 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 801a888:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a88a:	b353      	cbz	r3, 801a8e2 <tcp_process+0x1be>
        pcb->rtime = 0;
 801a88c:	2300      	movs	r3, #0
 801a88e:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 801a890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a894:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801a898:	b33b      	cbz	r3, 801a8ea <tcp_process+0x1c6>
 801a89a:	2200      	movs	r2, #0
 801a89c:	4621      	mov	r1, r4
 801a89e:	6920      	ldr	r0, [r4, #16]
 801a8a0:	4798      	blx	r3
 801a8a2:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 801a8a4:	f115 0f0d 	cmn.w	r5, #13
 801a8a8:	f43f af57 	beq.w	801a75a <tcp_process+0x36>
      tcp_ack_now(pcb);
 801a8ac:	7ea3      	ldrb	r3, [r4, #26]
 801a8ae:	f043 0302 	orr.w	r3, r3, #2
 801a8b2:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 801a8b4:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 801a8b6:	e750      	b.n	801a75a <tcp_process+0x36>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a8b8:	4b43      	ldr	r3, [pc, #268]	; (801a9c8 <tcp_process+0x2a4>)
 801a8ba:	f240 321a 	movw	r2, #794	; 0x31a
 801a8be:	4947      	ldr	r1, [pc, #284]	; (801a9dc <tcp_process+0x2b8>)
 801a8c0:	4843      	ldr	r0, [pc, #268]	; (801a9d0 <tcp_process+0x2ac>)
 801a8c2:	f003 fb10 	bl	801dee6 <iprintf>
 801a8c6:	e7d3      	b.n	801a870 <tcp_process+0x14c>
        rseg = pcb->unsent;
 801a8c8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801a8ca:	b115      	cbz	r5, 801a8d2 <tcp_process+0x1ae>
        pcb->unsent = rseg->next;
 801a8cc:	682b      	ldr	r3, [r5, #0]
 801a8ce:	66a3      	str	r3, [r4, #104]	; 0x68
 801a8d0:	e7d7      	b.n	801a882 <tcp_process+0x15e>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801a8d2:	4b3d      	ldr	r3, [pc, #244]	; (801a9c8 <tcp_process+0x2a4>)
 801a8d4:	f240 3222 	movw	r2, #802	; 0x322
 801a8d8:	4941      	ldr	r1, [pc, #260]	; (801a9e0 <tcp_process+0x2bc>)
 801a8da:	483d      	ldr	r0, [pc, #244]	; (801a9d0 <tcp_process+0x2ac>)
 801a8dc:	f003 fb03 	bl	801dee6 <iprintf>
 801a8e0:	e7f4      	b.n	801a8cc <tcp_process+0x1a8>
        pcb->rtime = -1;
 801a8e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a8e6:	8623      	strh	r3, [r4, #48]	; 0x30
 801a8e8:	e7d4      	b.n	801a894 <tcp_process+0x170>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a8ea:	2500      	movs	r5, #0
 801a8ec:	e7da      	b.n	801a8a4 <tcp_process+0x180>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a8ee:	4b3a      	ldr	r3, [pc, #232]	; (801a9d8 <tcp_process+0x2b4>)
 801a8f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801a8f2:	4a3c      	ldr	r2, [pc, #240]	; (801a9e4 <tcp_process+0x2c0>)
 801a8f4:	493c      	ldr	r1, [pc, #240]	; (801a9e8 <tcp_process+0x2c4>)
 801a8f6:	880d      	ldrh	r5, [r1, #0]
 801a8f8:	4930      	ldr	r1, [pc, #192]	; (801a9bc <tcp_process+0x298>)
 801a8fa:	6809      	ldr	r1, [r1, #0]
 801a8fc:	4830      	ldr	r0, [pc, #192]	; (801a9c0 <tcp_process+0x29c>)
 801a8fe:	6800      	ldr	r0, [r0, #0]
 801a900:	881e      	ldrh	r6, [r3, #0]
 801a902:	9601      	str	r6, [sp, #4]
 801a904:	885b      	ldrh	r3, [r3, #2]
 801a906:	9300      	str	r3, [sp, #0]
 801a908:	4613      	mov	r3, r2
 801a90a:	3204      	adds	r2, #4
 801a90c:	4429      	add	r1, r5
 801a90e:	f001 faeb 	bl	801bee8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801a912:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801a916:	2b05      	cmp	r3, #5
 801a918:	d901      	bls.n	801a91e <tcp_process+0x1fa>
  return ERR_OK;
 801a91a:	2500      	movs	r5, #0
 801a91c:	e71d      	b.n	801a75a <tcp_process+0x36>
        pcb->rtime = 0;
 801a91e:	2500      	movs	r5, #0
 801a920:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 801a922:	4620      	mov	r0, r4
 801a924:	f001 fb34 	bl	801bf90 <tcp_rexmit_rto>
 801a928:	e717      	b.n	801a75a <tcp_process+0x36>
    if (flags & TCP_ACK) {
 801a92a:	4b23      	ldr	r3, [pc, #140]	; (801a9b8 <tcp_process+0x294>)
 801a92c:	781b      	ldrb	r3, [r3, #0]
 801a92e:	f013 0f10 	tst.w	r3, #16
 801a932:	f000 8083 	beq.w	801aa3c <tcp_process+0x318>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801a936:	4b22      	ldr	r3, [pc, #136]	; (801a9c0 <tcp_process+0x29c>)
 801a938:	6818      	ldr	r0, [r3, #0]
 801a93a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a93c:	1ac3      	subs	r3, r0, r3
 801a93e:	2b01      	cmp	r3, #1
 801a940:	d403      	bmi.n	801a94a <tcp_process+0x226>
 801a942:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a944:	1ac3      	subs	r3, r0, r3
 801a946:	2b00      	cmp	r3, #0
 801a948:	dd11      	ble.n	801a96e <tcp_process+0x24a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a94a:	4b23      	ldr	r3, [pc, #140]	; (801a9d8 <tcp_process+0x2b4>)
 801a94c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801a94e:	4a25      	ldr	r2, [pc, #148]	; (801a9e4 <tcp_process+0x2c0>)
 801a950:	4925      	ldr	r1, [pc, #148]	; (801a9e8 <tcp_process+0x2c4>)
 801a952:	880c      	ldrh	r4, [r1, #0]
 801a954:	4919      	ldr	r1, [pc, #100]	; (801a9bc <tcp_process+0x298>)
 801a956:	6809      	ldr	r1, [r1, #0]
 801a958:	881d      	ldrh	r5, [r3, #0]
 801a95a:	9501      	str	r5, [sp, #4]
 801a95c:	885b      	ldrh	r3, [r3, #2]
 801a95e:	9300      	str	r3, [sp, #0]
 801a960:	4613      	mov	r3, r2
 801a962:	3204      	adds	r2, #4
 801a964:	4421      	add	r1, r4
 801a966:	f001 fabf 	bl	801bee8 <tcp_rst>
  return ERR_OK;
 801a96a:	2500      	movs	r5, #0
 801a96c:	e6f5      	b.n	801a75a <tcp_process+0x36>
        pcb->state = ESTABLISHED;
 801a96e:	2304      	movs	r3, #4
 801a970:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801a972:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801a974:	b10b      	cbz	r3, 801a97a <tcp_process+0x256>
 801a976:	699b      	ldr	r3, [r3, #24]
 801a978:	b19b      	cbz	r3, 801a9a2 <tcp_process+0x27e>
        if (pcb->listener == NULL) {
 801a97a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801a97c:	b1cb      	cbz	r3, 801a9b2 <tcp_process+0x28e>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801a97e:	699b      	ldr	r3, [r3, #24]
 801a980:	b3b3      	cbz	r3, 801a9f0 <tcp_process+0x2cc>
 801a982:	2200      	movs	r2, #0
 801a984:	4621      	mov	r1, r4
 801a986:	6920      	ldr	r0, [r4, #16]
 801a988:	4798      	blx	r3
 801a98a:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 801a98c:	b39d      	cbz	r5, 801a9f6 <tcp_process+0x2d2>
          if (err != ERR_ABRT) {
 801a98e:	f115 0f0d 	cmn.w	r5, #13
 801a992:	f43f aee2 	beq.w	801a75a <tcp_process+0x36>
            tcp_abort(pcb);
 801a996:	4620      	mov	r0, r4
 801a998:	f7fe fec8 	bl	801972c <tcp_abort>
          return ERR_ABRT;
 801a99c:	f06f 050c 	mvn.w	r5, #12
 801a9a0:	e6db      	b.n	801a75a <tcp_process+0x36>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801a9a2:	4b09      	ldr	r3, [pc, #36]	; (801a9c8 <tcp_process+0x2a4>)
 801a9a4:	f240 3251 	movw	r2, #849	; 0x351
 801a9a8:	4910      	ldr	r1, [pc, #64]	; (801a9ec <tcp_process+0x2c8>)
 801a9aa:	4809      	ldr	r0, [pc, #36]	; (801a9d0 <tcp_process+0x2ac>)
 801a9ac:	f003 fa9b 	bl	801dee6 <iprintf>
 801a9b0:	e7e3      	b.n	801a97a <tcp_process+0x256>
          err = ERR_VAL;
 801a9b2:	f06f 0505 	mvn.w	r5, #5
 801a9b6:	e7e9      	b.n	801a98c <tcp_process+0x268>
 801a9b8:	200040c4 	.word	0x200040c4
 801a9bc:	200040e4 	.word	0x200040e4
 801a9c0:	200040c0 	.word	0x200040c0
 801a9c4:	200040e0 	.word	0x200040e0
 801a9c8:	080224f4 	.word	0x080224f4
 801a9cc:	08022488 	.word	0x08022488
 801a9d0:	0801e950 	.word	0x0801e950
 801a9d4:	20008aec 	.word	0x20008aec
 801a9d8:	200040ec 	.word	0x200040ec
 801a9dc:	080224a8 	.word	0x080224a8
 801a9e0:	080224c0 	.word	0x080224c0
 801a9e4:	200044d0 	.word	0x200044d0
 801a9e8:	200040fa 	.word	0x200040fa
 801a9ec:	080224d4 	.word	0x080224d4
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801a9f0:	f06f 050f 	mvn.w	r5, #15
 801a9f4:	e7ca      	b.n	801a98c <tcp_process+0x268>
        tcp_receive(pcb);
 801a9f6:	4620      	mov	r0, r4
 801a9f8:	f7ff f970 	bl	8019cdc <tcp_receive>
        if (recv_acked != 0) {
 801a9fc:	4b8f      	ldr	r3, [pc, #572]	; (801ac3c <tcp_process+0x518>)
 801a9fe:	881b      	ldrh	r3, [r3, #0]
 801aa00:	b113      	cbz	r3, 801aa08 <tcp_process+0x2e4>
          recv_acked--;
 801aa02:	3b01      	subs	r3, #1
 801aa04:	4a8d      	ldr	r2, [pc, #564]	; (801ac3c <tcp_process+0x518>)
 801aa06:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801aa08:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801aa0a:	0053      	lsls	r3, r2, #1
 801aa0c:	f241 111c 	movw	r1, #4380	; 0x111c
 801aa10:	428b      	cmp	r3, r1
 801aa12:	bf38      	it	cc
 801aa14:	460b      	movcc	r3, r1
 801aa16:	0092      	lsls	r2, r2, #2
 801aa18:	4293      	cmp	r3, r2
 801aa1a:	bf28      	it	cs
 801aa1c:	4613      	movcs	r3, r2
 801aa1e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 801aa22:	4b87      	ldr	r3, [pc, #540]	; (801ac40 <tcp_process+0x51c>)
 801aa24:	781b      	ldrb	r3, [r3, #0]
 801aa26:	f013 0f20 	tst.w	r3, #32
 801aa2a:	f43f ae96 	beq.w	801a75a <tcp_process+0x36>
          tcp_ack_now(pcb);
 801aa2e:	7ea3      	ldrb	r3, [r4, #26]
 801aa30:	f043 0302 	orr.w	r3, r3, #2
 801aa34:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 801aa36:	2307      	movs	r3, #7
 801aa38:	7523      	strb	r3, [r4, #20]
 801aa3a:	e68e      	b.n	801a75a <tcp_process+0x36>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801aa3c:	f013 0f02 	tst.w	r3, #2
 801aa40:	f000 80f1 	beq.w	801ac26 <tcp_process+0x502>
 801aa44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aa46:	3b01      	subs	r3, #1
 801aa48:	4a7e      	ldr	r2, [pc, #504]	; (801ac44 <tcp_process+0x520>)
 801aa4a:	6812      	ldr	r2, [r2, #0]
 801aa4c:	4293      	cmp	r3, r2
 801aa4e:	d001      	beq.n	801aa54 <tcp_process+0x330>
  return ERR_OK;
 801aa50:	2500      	movs	r5, #0
 801aa52:	e682      	b.n	801a75a <tcp_process+0x36>
      tcp_rexmit(pcb);
 801aa54:	4620      	mov	r0, r4
 801aa56:	f001 fab6 	bl	801bfc6 <tcp_rexmit>
  return ERR_OK;
 801aa5a:	2500      	movs	r5, #0
 801aa5c:	e67d      	b.n	801a75a <tcp_process+0x36>
    tcp_receive(pcb);
 801aa5e:	4620      	mov	r0, r4
 801aa60:	f7ff f93c 	bl	8019cdc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801aa64:	4b76      	ldr	r3, [pc, #472]	; (801ac40 <tcp_process+0x51c>)
 801aa66:	781b      	ldrb	r3, [r3, #0]
 801aa68:	f013 0f20 	tst.w	r3, #32
 801aa6c:	f000 80dd 	beq.w	801ac2a <tcp_process+0x506>
      tcp_ack_now(pcb);
 801aa70:	7ea3      	ldrb	r3, [r4, #26]
 801aa72:	f043 0302 	orr.w	r3, r3, #2
 801aa76:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 801aa78:	2307      	movs	r3, #7
 801aa7a:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801aa7c:	2500      	movs	r5, #0
 801aa7e:	e66c      	b.n	801a75a <tcp_process+0x36>
    tcp_receive(pcb);
 801aa80:	4620      	mov	r0, r4
 801aa82:	f7ff f92b 	bl	8019cdc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801aa86:	4b6e      	ldr	r3, [pc, #440]	; (801ac40 <tcp_process+0x51c>)
 801aa88:	781b      	ldrb	r3, [r3, #0]
 801aa8a:	f013 0f20 	tst.w	r3, #32
 801aa8e:	d038      	beq.n	801ab02 <tcp_process+0x3de>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801aa90:	4b6d      	ldr	r3, [pc, #436]	; (801ac48 <tcp_process+0x524>)
 801aa92:	781b      	ldrb	r3, [r3, #0]
 801aa94:	f013 0f10 	tst.w	r3, #16
 801aa98:	d004      	beq.n	801aaa4 <tcp_process+0x380>
 801aa9a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801aa9c:	4b6b      	ldr	r3, [pc, #428]	; (801ac4c <tcp_process+0x528>)
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	429a      	cmp	r2, r3
 801aaa2:	d007      	beq.n	801aab4 <tcp_process+0x390>
        tcp_ack_now(pcb);
 801aaa4:	7ea3      	ldrb	r3, [r4, #26]
 801aaa6:	f043 0302 	orr.w	r3, r3, #2
 801aaaa:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 801aaac:	2308      	movs	r3, #8
 801aaae:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801aab0:	2500      	movs	r5, #0
 801aab2:	e652      	b.n	801a75a <tcp_process+0x36>
          pcb->unsent == NULL) {
 801aab4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d1f4      	bne.n	801aaa4 <tcp_process+0x380>
        tcp_ack_now(pcb);
 801aaba:	7ea3      	ldrb	r3, [r4, #26]
 801aabc:	f043 0302 	orr.w	r3, r3, #2
 801aac0:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 801aac2:	4620      	mov	r0, r4
 801aac4:	f7fe f9c2 	bl	8018e4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801aac8:	4b61      	ldr	r3, [pc, #388]	; (801ac50 <tcp_process+0x52c>)
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	429c      	cmp	r4, r3
 801aace:	d005      	beq.n	801aadc <tcp_process+0x3b8>
 801aad0:	b153      	cbz	r3, 801aae8 <tcp_process+0x3c4>
 801aad2:	68da      	ldr	r2, [r3, #12]
 801aad4:	4294      	cmp	r4, r2
 801aad6:	d005      	beq.n	801aae4 <tcp_process+0x3c0>
 801aad8:	4613      	mov	r3, r2
 801aada:	e7f9      	b.n	801aad0 <tcp_process+0x3ac>
 801aadc:	68da      	ldr	r2, [r3, #12]
 801aade:	4b5c      	ldr	r3, [pc, #368]	; (801ac50 <tcp_process+0x52c>)
 801aae0:	601a      	str	r2, [r3, #0]
 801aae2:	e001      	b.n	801aae8 <tcp_process+0x3c4>
 801aae4:	68e2      	ldr	r2, [r4, #12]
 801aae6:	60da      	str	r2, [r3, #12]
 801aae8:	2201      	movs	r2, #1
 801aaea:	4b5a      	ldr	r3, [pc, #360]	; (801ac54 <tcp_process+0x530>)
 801aaec:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801aaee:	230a      	movs	r3, #10
 801aaf0:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801aaf2:	4b59      	ldr	r3, [pc, #356]	; (801ac58 <tcp_process+0x534>)
 801aaf4:	681a      	ldr	r2, [r3, #0]
 801aaf6:	60e2      	str	r2, [r4, #12]
 801aaf8:	601c      	str	r4, [r3, #0]
 801aafa:	f001 fc01 	bl	801c300 <tcp_timer_needed>
  return ERR_OK;
 801aafe:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 801ab00:	e62b      	b.n	801a75a <tcp_process+0x36>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ab02:	4b51      	ldr	r3, [pc, #324]	; (801ac48 <tcp_process+0x524>)
 801ab04:	781b      	ldrb	r3, [r3, #0]
 801ab06:	f013 0f10 	tst.w	r3, #16
 801ab0a:	f000 8090 	beq.w	801ac2e <tcp_process+0x50a>
 801ab0e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801ab10:	4b4e      	ldr	r3, [pc, #312]	; (801ac4c <tcp_process+0x528>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	429a      	cmp	r2, r3
 801ab16:	d001      	beq.n	801ab1c <tcp_process+0x3f8>
  return ERR_OK;
 801ab18:	2500      	movs	r5, #0
 801ab1a:	e61e      	b.n	801a75a <tcp_process+0x36>
               pcb->unsent == NULL) {
 801ab1c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ab1e:	b10b      	cbz	r3, 801ab24 <tcp_process+0x400>
  return ERR_OK;
 801ab20:	2500      	movs	r5, #0
 801ab22:	e61a      	b.n	801a75a <tcp_process+0x36>
      pcb->state = FIN_WAIT_2;
 801ab24:	2306      	movs	r3, #6
 801ab26:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801ab28:	2500      	movs	r5, #0
 801ab2a:	e616      	b.n	801a75a <tcp_process+0x36>
    tcp_receive(pcb);
 801ab2c:	4620      	mov	r0, r4
 801ab2e:	f7ff f8d5 	bl	8019cdc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801ab32:	4b43      	ldr	r3, [pc, #268]	; (801ac40 <tcp_process+0x51c>)
 801ab34:	781b      	ldrb	r3, [r3, #0]
 801ab36:	f013 0f20 	tst.w	r3, #32
 801ab3a:	d101      	bne.n	801ab40 <tcp_process+0x41c>
  return ERR_OK;
 801ab3c:	2500      	movs	r5, #0
 801ab3e:	e60c      	b.n	801a75a <tcp_process+0x36>
      tcp_ack_now(pcb);
 801ab40:	7ea3      	ldrb	r3, [r4, #26]
 801ab42:	f043 0302 	orr.w	r3, r3, #2
 801ab46:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 801ab48:	4620      	mov	r0, r4
 801ab4a:	f7fe f97f 	bl	8018e4c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801ab4e:	4b40      	ldr	r3, [pc, #256]	; (801ac50 <tcp_process+0x52c>)
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	429c      	cmp	r4, r3
 801ab54:	d005      	beq.n	801ab62 <tcp_process+0x43e>
 801ab56:	b153      	cbz	r3, 801ab6e <tcp_process+0x44a>
 801ab58:	68da      	ldr	r2, [r3, #12]
 801ab5a:	4294      	cmp	r4, r2
 801ab5c:	d005      	beq.n	801ab6a <tcp_process+0x446>
 801ab5e:	4613      	mov	r3, r2
 801ab60:	e7f9      	b.n	801ab56 <tcp_process+0x432>
 801ab62:	68da      	ldr	r2, [r3, #12]
 801ab64:	4b3a      	ldr	r3, [pc, #232]	; (801ac50 <tcp_process+0x52c>)
 801ab66:	601a      	str	r2, [r3, #0]
 801ab68:	e001      	b.n	801ab6e <tcp_process+0x44a>
 801ab6a:	68e2      	ldr	r2, [r4, #12]
 801ab6c:	60da      	str	r2, [r3, #12]
 801ab6e:	2201      	movs	r2, #1
 801ab70:	4b38      	ldr	r3, [pc, #224]	; (801ac54 <tcp_process+0x530>)
 801ab72:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801ab74:	230a      	movs	r3, #10
 801ab76:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801ab78:	4b37      	ldr	r3, [pc, #220]	; (801ac58 <tcp_process+0x534>)
 801ab7a:	681a      	ldr	r2, [r3, #0]
 801ab7c:	60e2      	str	r2, [r4, #12]
 801ab7e:	601c      	str	r4, [r3, #0]
 801ab80:	f001 fbbe 	bl	801c300 <tcp_timer_needed>
  return ERR_OK;
 801ab84:	2500      	movs	r5, #0
 801ab86:	e5e8      	b.n	801a75a <tcp_process+0x36>
    tcp_receive(pcb);
 801ab88:	4620      	mov	r0, r4
 801ab8a:	f7ff f8a7 	bl	8019cdc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ab8e:	4b2e      	ldr	r3, [pc, #184]	; (801ac48 <tcp_process+0x524>)
 801ab90:	781b      	ldrb	r3, [r3, #0]
 801ab92:	f013 0f10 	tst.w	r3, #16
 801ab96:	d04c      	beq.n	801ac32 <tcp_process+0x50e>
 801ab98:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801ab9a:	4b2c      	ldr	r3, [pc, #176]	; (801ac4c <tcp_process+0x528>)
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	429a      	cmp	r2, r3
 801aba0:	d001      	beq.n	801aba6 <tcp_process+0x482>
  return ERR_OK;
 801aba2:	2500      	movs	r5, #0
 801aba4:	e5d9      	b.n	801a75a <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801aba6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801aba8:	b10b      	cbz	r3, 801abae <tcp_process+0x48a>
  return ERR_OK;
 801abaa:	2500      	movs	r5, #0
 801abac:	e5d5      	b.n	801a75a <tcp_process+0x36>
      tcp_pcb_purge(pcb);
 801abae:	4620      	mov	r0, r4
 801abb0:	f7fe f94c 	bl	8018e4c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801abb4:	4b26      	ldr	r3, [pc, #152]	; (801ac50 <tcp_process+0x52c>)
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	429c      	cmp	r4, r3
 801abba:	d005      	beq.n	801abc8 <tcp_process+0x4a4>
 801abbc:	b153      	cbz	r3, 801abd4 <tcp_process+0x4b0>
 801abbe:	68da      	ldr	r2, [r3, #12]
 801abc0:	4294      	cmp	r4, r2
 801abc2:	d005      	beq.n	801abd0 <tcp_process+0x4ac>
 801abc4:	4613      	mov	r3, r2
 801abc6:	e7f9      	b.n	801abbc <tcp_process+0x498>
 801abc8:	68da      	ldr	r2, [r3, #12]
 801abca:	4b21      	ldr	r3, [pc, #132]	; (801ac50 <tcp_process+0x52c>)
 801abcc:	601a      	str	r2, [r3, #0]
 801abce:	e001      	b.n	801abd4 <tcp_process+0x4b0>
 801abd0:	68e2      	ldr	r2, [r4, #12]
 801abd2:	60da      	str	r2, [r3, #12]
 801abd4:	2201      	movs	r2, #1
 801abd6:	4b1f      	ldr	r3, [pc, #124]	; (801ac54 <tcp_process+0x530>)
 801abd8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801abda:	230a      	movs	r3, #10
 801abdc:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801abde:	4b1e      	ldr	r3, [pc, #120]	; (801ac58 <tcp_process+0x534>)
 801abe0:	681a      	ldr	r2, [r3, #0]
 801abe2:	60e2      	str	r2, [r4, #12]
 801abe4:	601c      	str	r4, [r3, #0]
 801abe6:	f001 fb8b 	bl	801c300 <tcp_timer_needed>
  return ERR_OK;
 801abea:	2500      	movs	r5, #0
 801abec:	e5b5      	b.n	801a75a <tcp_process+0x36>
    tcp_receive(pcb);
 801abee:	4620      	mov	r0, r4
 801abf0:	f7ff f874 	bl	8019cdc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801abf4:	4b14      	ldr	r3, [pc, #80]	; (801ac48 <tcp_process+0x524>)
 801abf6:	781b      	ldrb	r3, [r3, #0]
 801abf8:	f013 0f10 	tst.w	r3, #16
 801abfc:	d01b      	beq.n	801ac36 <tcp_process+0x512>
 801abfe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801ac00:	4b12      	ldr	r3, [pc, #72]	; (801ac4c <tcp_process+0x528>)
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	429a      	cmp	r2, r3
 801ac06:	d001      	beq.n	801ac0c <tcp_process+0x4e8>
  return ERR_OK;
 801ac08:	2500      	movs	r5, #0
 801ac0a:	e5a6      	b.n	801a75a <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ac0c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801ac0e:	b10b      	cbz	r3, 801ac14 <tcp_process+0x4f0>
  return ERR_OK;
 801ac10:	2500      	movs	r5, #0
 801ac12:	e5a2      	b.n	801a75a <tcp_process+0x36>
      recv_flags |= TF_CLOSED;
 801ac14:	4a0a      	ldr	r2, [pc, #40]	; (801ac40 <tcp_process+0x51c>)
 801ac16:	7813      	ldrb	r3, [r2, #0]
 801ac18:	f043 0310 	orr.w	r3, r3, #16
 801ac1c:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 801ac1e:	2500      	movs	r5, #0
 801ac20:	e59b      	b.n	801a75a <tcp_process+0x36>
 801ac22:	2500      	movs	r5, #0
 801ac24:	e599      	b.n	801a75a <tcp_process+0x36>
 801ac26:	2500      	movs	r5, #0
 801ac28:	e597      	b.n	801a75a <tcp_process+0x36>
 801ac2a:	2500      	movs	r5, #0
 801ac2c:	e595      	b.n	801a75a <tcp_process+0x36>
 801ac2e:	2500      	movs	r5, #0
 801ac30:	e593      	b.n	801a75a <tcp_process+0x36>
 801ac32:	2500      	movs	r5, #0
 801ac34:	e591      	b.n	801a75a <tcp_process+0x36>
 801ac36:	2500      	movs	r5, #0
 801ac38:	e58f      	b.n	801a75a <tcp_process+0x36>
 801ac3a:	bf00      	nop
 801ac3c:	200040d8 	.word	0x200040d8
 801ac40:	200040e0 	.word	0x200040e0
 801ac44:	200040e4 	.word	0x200040e4
 801ac48:	200040c4 	.word	0x200040c4
 801ac4c:	200040c0 	.word	0x200040c0
 801ac50:	20008ae8 	.word	0x20008ae8
 801ac54:	20008ae4 	.word	0x20008ae4
 801ac58:	20008af8 	.word	0x20008af8

0801ac5c <tcp_input>:
{
 801ac5c:	b570      	push	{r4, r5, r6, lr}
 801ac5e:	b082      	sub	sp, #8
 801ac60:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 801ac62:	6842      	ldr	r2, [r0, #4]
 801ac64:	4b9f      	ldr	r3, [pc, #636]	; (801aee4 <tcp_input+0x288>)
 801ac66:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 801ac68:	8943      	ldrh	r3, [r0, #10]
 801ac6a:	2b13      	cmp	r3, #19
 801ac6c:	d93e      	bls.n	801acec <tcp_input+0x90>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ac6e:	4b9e      	ldr	r3, [pc, #632]	; (801aee8 <tcp_input+0x28c>)
 801ac70:	6819      	ldr	r1, [r3, #0]
 801ac72:	6958      	ldr	r0, [r3, #20]
 801ac74:	f7fc f99b 	bl	8016fae <ip4_addr_isbroadcast_u32>
 801ac78:	2800      	cmp	r0, #0
 801ac7a:	d137      	bne.n	801acec <tcp_input+0x90>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ac7c:	4b9a      	ldr	r3, [pc, #616]	; (801aee8 <tcp_input+0x28c>)
 801ac7e:	695b      	ldr	r3, [r3, #20]
 801ac80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ac84:	2be0      	cmp	r3, #224	; 0xe0
 801ac86:	d031      	beq.n	801acec <tcp_input+0x90>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801ac88:	4b96      	ldr	r3, [pc, #600]	; (801aee4 <tcp_input+0x288>)
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	8998      	ldrh	r0, [r3, #12]
 801ac8e:	f7fb fa2a 	bl	80160e6 <lwip_htons>
 801ac92:	f3c0 310f 	ubfx	r1, r0, #12, #16
 801ac96:	0089      	lsls	r1, r1, #2
 801ac98:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ac9a:	2913      	cmp	r1, #19
 801ac9c:	d926      	bls.n	801acec <tcp_input+0x90>
 801ac9e:	b289      	uxth	r1, r1
 801aca0:	8923      	ldrh	r3, [r4, #8]
 801aca2:	4299      	cmp	r1, r3
 801aca4:	d822      	bhi.n	801acec <tcp_input+0x90>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801aca6:	f1a1 0314 	sub.w	r3, r1, #20
 801acaa:	b29b      	uxth	r3, r3
 801acac:	4a8f      	ldr	r2, [pc, #572]	; (801aeec <tcp_input+0x290>)
 801acae:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 801acb0:	2000      	movs	r0, #0
 801acb2:	4a8f      	ldr	r2, [pc, #572]	; (801aef0 <tcp_input+0x294>)
 801acb4:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 801acb6:	8962      	ldrh	r2, [r4, #10]
 801acb8:	4291      	cmp	r1, r2
 801acba:	d91c      	bls.n	801acf6 <tcp_input+0x9a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801acbc:	6823      	ldr	r3, [r4, #0]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d051      	beq.n	801ad66 <tcp_input+0x10a>
    pbuf_header(p, -TCP_HLEN);
 801acc2:	f06f 0113 	mvn.w	r1, #19
 801acc6:	4620      	mov	r0, r4
 801acc8:	f7fd fb36 	bl	8018338 <pbuf_header>
    tcphdr_opt1len = p->len;
 801accc:	8961      	ldrh	r1, [r4, #10]
 801acce:	4b89      	ldr	r3, [pc, #548]	; (801aef4 <tcp_input+0x298>)
 801acd0:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801acd2:	4b86      	ldr	r3, [pc, #536]	; (801aeec <tcp_input+0x290>)
 801acd4:	881d      	ldrh	r5, [r3, #0]
 801acd6:	1a6d      	subs	r5, r5, r1
 801acd8:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801acda:	4249      	negs	r1, r1
 801acdc:	b209      	sxth	r1, r1
 801acde:	4620      	mov	r0, r4
 801ace0:	f7fd fb2a 	bl	8018338 <pbuf_header>
    if (opt2len > p->next->len) {
 801ace4:	6820      	ldr	r0, [r4, #0]
 801ace6:	8943      	ldrh	r3, [r0, #10]
 801ace8:	429d      	cmp	r5, r3
 801acea:	d943      	bls.n	801ad74 <tcp_input+0x118>
  pbuf_free(p);
 801acec:	4620      	mov	r0, r4
 801acee:	f7fd fb2d 	bl	801834c <pbuf_free>
}
 801acf2:	b002      	add	sp, #8
 801acf4:	bd70      	pop	{r4, r5, r6, pc}
    tcphdr_opt1len = tcphdr_optlen;
 801acf6:	4a7f      	ldr	r2, [pc, #508]	; (801aef4 <tcp_input+0x298>)
 801acf8:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801acfa:	4249      	negs	r1, r1
 801acfc:	4620      	mov	r0, r4
 801acfe:	f7fd fb1b 	bl	8018338 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801ad02:	4d78      	ldr	r5, [pc, #480]	; (801aee4 <tcp_input+0x288>)
 801ad04:	682e      	ldr	r6, [r5, #0]
 801ad06:	8830      	ldrh	r0, [r6, #0]
 801ad08:	f7fb f9ed 	bl	80160e6 <lwip_htons>
 801ad0c:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801ad0e:	682e      	ldr	r6, [r5, #0]
 801ad10:	8870      	ldrh	r0, [r6, #2]
 801ad12:	f7fb f9e8 	bl	80160e6 <lwip_htons>
 801ad16:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ad18:	682e      	ldr	r6, [r5, #0]
 801ad1a:	6870      	ldr	r0, [r6, #4]
 801ad1c:	f7fb f9e6 	bl	80160ec <lwip_htonl>
 801ad20:	6070      	str	r0, [r6, #4]
 801ad22:	4b75      	ldr	r3, [pc, #468]	; (801aef8 <tcp_input+0x29c>)
 801ad24:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ad26:	682e      	ldr	r6, [r5, #0]
 801ad28:	68b0      	ldr	r0, [r6, #8]
 801ad2a:	f7fb f9df 	bl	80160ec <lwip_htonl>
 801ad2e:	60b0      	str	r0, [r6, #8]
 801ad30:	4b72      	ldr	r3, [pc, #456]	; (801aefc <tcp_input+0x2a0>)
 801ad32:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ad34:	682e      	ldr	r6, [r5, #0]
 801ad36:	89f0      	ldrh	r0, [r6, #14]
 801ad38:	f7fb f9d5 	bl	80160e6 <lwip_htons>
 801ad3c:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 801ad3e:	682b      	ldr	r3, [r5, #0]
 801ad40:	8998      	ldrh	r0, [r3, #12]
 801ad42:	f7fb f9d0 	bl	80160e6 <lwip_htons>
 801ad46:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 801ad4a:	4a6d      	ldr	r2, [pc, #436]	; (801af00 <tcp_input+0x2a4>)
 801ad4c:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801ad4e:	8922      	ldrh	r2, [r4, #8]
 801ad50:	f013 0303 	ands.w	r3, r3, #3
 801ad54:	bf18      	it	ne
 801ad56:	2301      	movne	r3, #1
 801ad58:	4413      	add	r3, r2
 801ad5a:	4a6a      	ldr	r2, [pc, #424]	; (801af04 <tcp_input+0x2a8>)
 801ad5c:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad5e:	4b6a      	ldr	r3, [pc, #424]	; (801af08 <tcp_input+0x2ac>)
 801ad60:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 801ad62:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad64:	e033      	b.n	801adce <tcp_input+0x172>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ad66:	4b69      	ldr	r3, [pc, #420]	; (801af0c <tcp_input+0x2b0>)
 801ad68:	22b2      	movs	r2, #178	; 0xb2
 801ad6a:	4969      	ldr	r1, [pc, #420]	; (801af10 <tcp_input+0x2b4>)
 801ad6c:	4869      	ldr	r0, [pc, #420]	; (801af14 <tcp_input+0x2b8>)
 801ad6e:	f003 f8ba 	bl	801dee6 <iprintf>
 801ad72:	e7a6      	b.n	801acc2 <tcp_input+0x66>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801ad74:	6842      	ldr	r2, [r0, #4]
 801ad76:	4b5e      	ldr	r3, [pc, #376]	; (801aef0 <tcp_input+0x294>)
 801ad78:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 801ad7a:	4269      	negs	r1, r5
 801ad7c:	b209      	sxth	r1, r1
 801ad7e:	f7fd fadb 	bl	8018338 <pbuf_header>
    p->tot_len -= opt2len;
 801ad82:	8923      	ldrh	r3, [r4, #8]
 801ad84:	1b5d      	subs	r5, r3, r5
 801ad86:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ad88:	8963      	ldrh	r3, [r4, #10]
 801ad8a:	b95b      	cbnz	r3, 801ada4 <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801ad8c:	8922      	ldrh	r2, [r4, #8]
 801ad8e:	6823      	ldr	r3, [r4, #0]
 801ad90:	891b      	ldrh	r3, [r3, #8]
 801ad92:	429a      	cmp	r2, r3
 801ad94:	d0b5      	beq.n	801ad02 <tcp_input+0xa6>
 801ad96:	4b5d      	ldr	r3, [pc, #372]	; (801af0c <tcp_input+0x2b0>)
 801ad98:	22d0      	movs	r2, #208	; 0xd0
 801ad9a:	495f      	ldr	r1, [pc, #380]	; (801af18 <tcp_input+0x2bc>)
 801ad9c:	485d      	ldr	r0, [pc, #372]	; (801af14 <tcp_input+0x2b8>)
 801ad9e:	f003 f8a2 	bl	801dee6 <iprintf>
 801ada2:	e7ae      	b.n	801ad02 <tcp_input+0xa6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ada4:	4b59      	ldr	r3, [pc, #356]	; (801af0c <tcp_input+0x2b0>)
 801ada6:	22cf      	movs	r2, #207	; 0xcf
 801ada8:	495c      	ldr	r1, [pc, #368]	; (801af1c <tcp_input+0x2c0>)
 801adaa:	485a      	ldr	r0, [pc, #360]	; (801af14 <tcp_input+0x2b8>)
 801adac:	f003 f89b 	bl	801dee6 <iprintf>
 801adb0:	e7ec      	b.n	801ad8c <tcp_input+0x130>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801adb2:	7d2b      	ldrb	r3, [r5, #20]
 801adb4:	2b0a      	cmp	r3, #10
 801adb6:	d016      	beq.n	801ade6 <tcp_input+0x18a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801adb8:	7d2b      	ldrb	r3, [r5, #20]
 801adba:	2b01      	cmp	r3, #1
 801adbc:	d01a      	beq.n	801adf4 <tcp_input+0x198>
    if (pcb->remote_port == tcphdr->src &&
 801adbe:	8b29      	ldrh	r1, [r5, #24]
 801adc0:	4b48      	ldr	r3, [pc, #288]	; (801aee4 <tcp_input+0x288>)
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	881a      	ldrh	r2, [r3, #0]
 801adc6:	4291      	cmp	r1, r2
 801adc8:	d01b      	beq.n	801ae02 <tcp_input+0x1a6>
    prev = pcb;
 801adca:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801adcc:	68ed      	ldr	r5, [r5, #12]
 801adce:	2d00      	cmp	r5, #0
 801add0:	d032      	beq.n	801ae38 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801add2:	7d2b      	ldrb	r3, [r5, #20]
 801add4:	2b00      	cmp	r3, #0
 801add6:	d1ec      	bne.n	801adb2 <tcp_input+0x156>
 801add8:	4b4c      	ldr	r3, [pc, #304]	; (801af0c <tcp_input+0x2b0>)
 801adda:	22e2      	movs	r2, #226	; 0xe2
 801addc:	4950      	ldr	r1, [pc, #320]	; (801af20 <tcp_input+0x2c4>)
 801adde:	484d      	ldr	r0, [pc, #308]	; (801af14 <tcp_input+0x2b8>)
 801ade0:	f003 f881 	bl	801dee6 <iprintf>
 801ade4:	e7e5      	b.n	801adb2 <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ade6:	4b49      	ldr	r3, [pc, #292]	; (801af0c <tcp_input+0x2b0>)
 801ade8:	22e3      	movs	r2, #227	; 0xe3
 801adea:	494e      	ldr	r1, [pc, #312]	; (801af24 <tcp_input+0x2c8>)
 801adec:	4849      	ldr	r0, [pc, #292]	; (801af14 <tcp_input+0x2b8>)
 801adee:	f003 f87a 	bl	801dee6 <iprintf>
 801adf2:	e7e1      	b.n	801adb8 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801adf4:	4b45      	ldr	r3, [pc, #276]	; (801af0c <tcp_input+0x2b0>)
 801adf6:	22e4      	movs	r2, #228	; 0xe4
 801adf8:	494b      	ldr	r1, [pc, #300]	; (801af28 <tcp_input+0x2cc>)
 801adfa:	4846      	ldr	r0, [pc, #280]	; (801af14 <tcp_input+0x2b8>)
 801adfc:	f003 f873 	bl	801dee6 <iprintf>
 801ae00:	e7dd      	b.n	801adbe <tcp_input+0x162>
        pcb->local_port == tcphdr->dest &&
 801ae02:	8aea      	ldrh	r2, [r5, #22]
 801ae04:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 801ae06:	429a      	cmp	r2, r3
 801ae08:	d1df      	bne.n	801adca <tcp_input+0x16e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ae0a:	686a      	ldr	r2, [r5, #4]
 801ae0c:	4b36      	ldr	r3, [pc, #216]	; (801aee8 <tcp_input+0x28c>)
 801ae0e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801ae10:	429a      	cmp	r2, r3
 801ae12:	d1da      	bne.n	801adca <tcp_input+0x16e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ae14:	682a      	ldr	r2, [r5, #0]
 801ae16:	4b34      	ldr	r3, [pc, #208]	; (801aee8 <tcp_input+0x28c>)
 801ae18:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ae1a:	429a      	cmp	r2, r3
 801ae1c:	d1d5      	bne.n	801adca <tcp_input+0x16e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ae1e:	68eb      	ldr	r3, [r5, #12]
 801ae20:	429d      	cmp	r5, r3
 801ae22:	d04d      	beq.n	801aec0 <tcp_input+0x264>
      if (prev != NULL) {
 801ae24:	b12e      	cbz	r6, 801ae32 <tcp_input+0x1d6>
        prev->next = pcb->next;
 801ae26:	68eb      	ldr	r3, [r5, #12]
 801ae28:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 801ae2a:	4b37      	ldr	r3, [pc, #220]	; (801af08 <tcp_input+0x2ac>)
 801ae2c:	681a      	ldr	r2, [r3, #0]
 801ae2e:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 801ae30:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ae32:	68eb      	ldr	r3, [r5, #12]
 801ae34:	429d      	cmp	r5, r3
 801ae36:	d04a      	beq.n	801aece <tcp_input+0x272>
  if (pcb == NULL) {
 801ae38:	2d00      	cmp	r5, #0
 801ae3a:	d04f      	beq.n	801aedc <tcp_input+0x280>
  if (pcb != NULL) {
 801ae3c:	2d00      	cmp	r5, #0
 801ae3e:	f000 8168 	beq.w	801b112 <tcp_input+0x4b6>
    inseg.next = NULL;
 801ae42:	4a3a      	ldr	r2, [pc, #232]	; (801af2c <tcp_input+0x2d0>)
 801ae44:	2300      	movs	r3, #0
 801ae46:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 801ae48:	8921      	ldrh	r1, [r4, #8]
 801ae4a:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 801ae4c:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 801ae4e:	4925      	ldr	r1, [pc, #148]	; (801aee4 <tcp_input+0x288>)
 801ae50:	6809      	ldr	r1, [r1, #0]
 801ae52:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 801ae54:	4a36      	ldr	r2, [pc, #216]	; (801af30 <tcp_input+0x2d4>)
 801ae56:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 801ae58:	4a36      	ldr	r2, [pc, #216]	; (801af34 <tcp_input+0x2d8>)
 801ae5a:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 801ae5c:	4a36      	ldr	r2, [pc, #216]	; (801af38 <tcp_input+0x2dc>)
 801ae5e:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 801ae60:	4b27      	ldr	r3, [pc, #156]	; (801af00 <tcp_input+0x2a4>)
 801ae62:	781b      	ldrb	r3, [r3, #0]
 801ae64:	f013 0f08 	tst.w	r3, #8
 801ae68:	d003      	beq.n	801ae72 <tcp_input+0x216>
      p->flags |= PBUF_FLAG_PUSH;
 801ae6a:	7b63      	ldrb	r3, [r4, #13]
 801ae6c:	f043 0301 	orr.w	r3, r3, #1
 801ae70:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 801ae72:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	f000 80b9 	beq.w	801afec <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ae7a:	4628      	mov	r0, r5
 801ae7c:	f7fe fb24 	bl	80194c8 <tcp_process_refused_data>
 801ae80:	f110 0f0d 	cmn.w	r0, #13
 801ae84:	d008      	beq.n	801ae98 <tcp_input+0x23c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ae86:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	f000 80af 	beq.w	801afec <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ae8e:	4b1d      	ldr	r3, [pc, #116]	; (801af04 <tcp_input+0x2a8>)
 801ae90:	881b      	ldrh	r3, [r3, #0]
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	f000 80aa 	beq.w	801afec <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 801ae98:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	f000 80a2 	beq.w	801afe4 <tcp_input+0x388>
    tcp_input_pcb = NULL;
 801aea0:	2300      	movs	r3, #0
 801aea2:	4a26      	ldr	r2, [pc, #152]	; (801af3c <tcp_input+0x2e0>)
 801aea4:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 801aea6:	4a22      	ldr	r2, [pc, #136]	; (801af30 <tcp_input+0x2d4>)
 801aea8:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 801aeaa:	4b20      	ldr	r3, [pc, #128]	; (801af2c <tcp_input+0x2d0>)
 801aeac:	6858      	ldr	r0, [r3, #4]
 801aeae:	2800      	cmp	r0, #0
 801aeb0:	f43f af1f 	beq.w	801acf2 <tcp_input+0x96>
      pbuf_free(inseg.p);
 801aeb4:	f7fd fa4a 	bl	801834c <pbuf_free>
      inseg.p = NULL;
 801aeb8:	2200      	movs	r2, #0
 801aeba:	4b1c      	ldr	r3, [pc, #112]	; (801af2c <tcp_input+0x2d0>)
 801aebc:	605a      	str	r2, [r3, #4]
 801aebe:	e718      	b.n	801acf2 <tcp_input+0x96>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801aec0:	4b12      	ldr	r3, [pc, #72]	; (801af0c <tcp_input+0x2b0>)
 801aec2:	22ec      	movs	r2, #236	; 0xec
 801aec4:	491e      	ldr	r1, [pc, #120]	; (801af40 <tcp_input+0x2e4>)
 801aec6:	4813      	ldr	r0, [pc, #76]	; (801af14 <tcp_input+0x2b8>)
 801aec8:	f003 f80d 	bl	801dee6 <iprintf>
 801aecc:	e7aa      	b.n	801ae24 <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801aece:	4b0f      	ldr	r3, [pc, #60]	; (801af0c <tcp_input+0x2b0>)
 801aed0:	22f4      	movs	r2, #244	; 0xf4
 801aed2:	491c      	ldr	r1, [pc, #112]	; (801af44 <tcp_input+0x2e8>)
 801aed4:	480f      	ldr	r0, [pc, #60]	; (801af14 <tcp_input+0x2b8>)
 801aed6:	f003 f806 	bl	801dee6 <iprintf>
 801aeda:	e7ad      	b.n	801ae38 <tcp_input+0x1dc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801aedc:	4b1a      	ldr	r3, [pc, #104]	; (801af48 <tcp_input+0x2ec>)
 801aede:	681d      	ldr	r5, [r3, #0]
 801aee0:	e03b      	b.n	801af5a <tcp_input+0x2fe>
 801aee2:	bf00      	nop
 801aee4:	200040ec 	.word	0x200040ec
 801aee8:	200044c0 	.word	0x200044c0
 801aeec:	200040f8 	.word	0x200040f8
 801aef0:	200040f4 	.word	0x200040f4
 801aef4:	200040f0 	.word	0x200040f0
 801aef8:	200040e4 	.word	0x200040e4
 801aefc:	200040c0 	.word	0x200040c0
 801af00:	200040c4 	.word	0x200040c4
 801af04:	200040fa 	.word	0x200040fa
 801af08:	20008ae8 	.word	0x20008ae8
 801af0c:	080224f4 	.word	0x080224f4
 801af10:	0802232c 	.word	0x0802232c
 801af14:	0801e950 	.word	0x0801e950
 801af18:	08022348 	.word	0x08022348
 801af1c:	0802233c 	.word	0x0802233c
 801af20:	08022368 	.word	0x08022368
 801af24:	08022390 	.word	0x08022390
 801af28:	080223bc 	.word	0x080223bc
 801af2c:	200040c8 	.word	0x200040c8
 801af30:	200040dc 	.word	0x200040dc
 801af34:	200040e0 	.word	0x200040e0
 801af38:	200040d8 	.word	0x200040d8
 801af3c:	20008afc 	.word	0x20008afc
 801af40:	080223e4 	.word	0x080223e4
 801af44:	08022410 	.word	0x08022410
 801af48:	20008af8 	.word	0x20008af8
      if (pcb->remote_port == tcphdr->src &&
 801af4c:	8b29      	ldrh	r1, [r5, #24]
 801af4e:	4b80      	ldr	r3, [pc, #512]	; (801b150 <tcp_input+0x4f4>)
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	881a      	ldrh	r2, [r3, #0]
 801af54:	4291      	cmp	r1, r2
 801af56:	d00b      	beq.n	801af70 <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801af58:	68ed      	ldr	r5, [r5, #12]
 801af5a:	b1f5      	cbz	r5, 801af9a <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801af5c:	7d2b      	ldrb	r3, [r5, #20]
 801af5e:	2b0a      	cmp	r3, #10
 801af60:	d0f4      	beq.n	801af4c <tcp_input+0x2f0>
 801af62:	4b7c      	ldr	r3, [pc, #496]	; (801b154 <tcp_input+0x4f8>)
 801af64:	22fe      	movs	r2, #254	; 0xfe
 801af66:	497c      	ldr	r1, [pc, #496]	; (801b158 <tcp_input+0x4fc>)
 801af68:	487c      	ldr	r0, [pc, #496]	; (801b15c <tcp_input+0x500>)
 801af6a:	f002 ffbc 	bl	801dee6 <iprintf>
 801af6e:	e7ed      	b.n	801af4c <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 801af70:	8aea      	ldrh	r2, [r5, #22]
 801af72:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 801af74:	429a      	cmp	r2, r3
 801af76:	d1ef      	bne.n	801af58 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801af78:	686a      	ldr	r2, [r5, #4]
 801af7a:	4b79      	ldr	r3, [pc, #484]	; (801b160 <tcp_input+0x504>)
 801af7c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801af7e:	429a      	cmp	r2, r3
 801af80:	d1ea      	bne.n	801af58 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801af82:	682a      	ldr	r2, [r5, #0]
 801af84:	4b76      	ldr	r3, [pc, #472]	; (801b160 <tcp_input+0x504>)
 801af86:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801af88:	429a      	cmp	r2, r3
 801af8a:	d1e5      	bne.n	801af58 <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 801af8c:	4628      	mov	r0, r5
 801af8e:	f7fe fd8f 	bl	8019ab0 <tcp_timewait_input>
        pbuf_free(p);
 801af92:	4620      	mov	r0, r4
 801af94:	f7fd f9da 	bl	801834c <pbuf_free>
        return;
 801af98:	e6ab      	b.n	801acf2 <tcp_input+0x96>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801af9a:	4b72      	ldr	r3, [pc, #456]	; (801b164 <tcp_input+0x508>)
 801af9c:	681e      	ldr	r6, [r3, #0]
 801af9e:	4630      	mov	r0, r6
    prev = NULL;
 801afa0:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801afa2:	e001      	b.n	801afa8 <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 801afa4:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801afa6:	68c0      	ldr	r0, [r0, #12]
 801afa8:	b168      	cbz	r0, 801afc6 <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 801afaa:	8ac2      	ldrh	r2, [r0, #22]
 801afac:	4b68      	ldr	r3, [pc, #416]	; (801b150 <tcp_input+0x4f4>)
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	885b      	ldrh	r3, [r3, #2]
 801afb2:	429a      	cmp	r2, r3
 801afb4:	d1f6      	bne.n	801afa4 <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801afb6:	6803      	ldr	r3, [r0, #0]
 801afb8:	4a69      	ldr	r2, [pc, #420]	; (801b160 <tcp_input+0x504>)
 801afba:	6952      	ldr	r2, [r2, #20]
 801afbc:	4293      	cmp	r3, r2
 801afbe:	d002      	beq.n	801afc6 <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801afc0:	b108      	cbz	r0, 801afc6 <tcp_input+0x36a>
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d1ee      	bne.n	801afa4 <tcp_input+0x348>
    if (lpcb != NULL) {
 801afc6:	2800      	cmp	r0, #0
 801afc8:	f43f af38 	beq.w	801ae3c <tcp_input+0x1e0>
      if (prev != NULL) {
 801afcc:	b121      	cbz	r1, 801afd8 <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801afce:	68c3      	ldr	r3, [r0, #12]
 801afd0:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801afd2:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801afd4:	4b63      	ldr	r3, [pc, #396]	; (801b164 <tcp_input+0x508>)
 801afd6:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 801afd8:	f7fe fdb2 	bl	8019b40 <tcp_listen_input>
      pbuf_free(p);
 801afdc:	4620      	mov	r0, r4
 801afde:	f7fd f9b5 	bl	801834c <pbuf_free>
      return;
 801afe2:	e686      	b.n	801acf2 <tcp_input+0x96>
          tcp_send_empty_ack(pcb);
 801afe4:	4628      	mov	r0, r5
 801afe6:	f000 fde9 	bl	801bbbc <tcp_send_empty_ack>
 801afea:	e759      	b.n	801aea0 <tcp_input+0x244>
    tcp_input_pcb = pcb;
 801afec:	4b5e      	ldr	r3, [pc, #376]	; (801b168 <tcp_input+0x50c>)
 801afee:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 801aff0:	4628      	mov	r0, r5
 801aff2:	f7ff fb97 	bl	801a724 <tcp_process>
    if (err != ERR_ABRT) {
 801aff6:	f110 0f0d 	cmn.w	r0, #13
 801affa:	f43f af51 	beq.w	801aea0 <tcp_input+0x244>
      if (recv_flags & TF_RESET) {
 801affe:	4b5b      	ldr	r3, [pc, #364]	; (801b16c <tcp_input+0x510>)
 801b000:	781b      	ldrb	r3, [r3, #0]
 801b002:	f013 0f08 	tst.w	r3, #8
 801b006:	d00f      	beq.n	801b028 <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b008:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 801b00c:	b11b      	cbz	r3, 801b016 <tcp_input+0x3ba>
 801b00e:	f06f 010d 	mvn.w	r1, #13
 801b012:	6928      	ldr	r0, [r5, #16]
 801b014:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b016:	4629      	mov	r1, r5
 801b018:	4855      	ldr	r0, [pc, #340]	; (801b170 <tcp_input+0x514>)
 801b01a:	f7fe f93b 	bl	8019294 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 801b01e:	4629      	mov	r1, r5
 801b020:	2001      	movs	r0, #1
 801b022:	f7fc ffbd 	bl	8017fa0 <memp_free>
 801b026:	e73b      	b.n	801aea0 <tcp_input+0x244>
        if (recv_acked > 0) {
 801b028:	4b52      	ldr	r3, [pc, #328]	; (801b174 <tcp_input+0x518>)
 801b02a:	881a      	ldrh	r2, [r3, #0]
 801b02c:	b162      	cbz	r2, 801b048 <tcp_input+0x3ec>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b02e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801b030:	2b00      	cmp	r3, #0
 801b032:	d048      	beq.n	801b0c6 <tcp_input+0x46a>
 801b034:	4629      	mov	r1, r5
 801b036:	6928      	ldr	r0, [r5, #16]
 801b038:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801b03a:	f110 0f0d 	cmn.w	r0, #13
 801b03e:	f43f af2f 	beq.w	801aea0 <tcp_input+0x244>
          recv_acked = 0;
 801b042:	2200      	movs	r2, #0
 801b044:	4b4b      	ldr	r3, [pc, #300]	; (801b174 <tcp_input+0x518>)
 801b046:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b048:	4628      	mov	r0, r5
 801b04a:	f7fe fd0f 	bl	8019a6c <tcp_input_delayed_close>
 801b04e:	2800      	cmp	r0, #0
 801b050:	f47f af26 	bne.w	801aea0 <tcp_input+0x244>
        if (recv_data != NULL) {
 801b054:	4b48      	ldr	r3, [pc, #288]	; (801b178 <tcp_input+0x51c>)
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	b1eb      	cbz	r3, 801b096 <tcp_input+0x43a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b05a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801b05c:	b133      	cbz	r3, 801b06c <tcp_input+0x410>
 801b05e:	4b3d      	ldr	r3, [pc, #244]	; (801b154 <tcp_input+0x4f8>)
 801b060:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 801b064:	4945      	ldr	r1, [pc, #276]	; (801b17c <tcp_input+0x520>)
 801b066:	483d      	ldr	r0, [pc, #244]	; (801b15c <tcp_input+0x500>)
 801b068:	f002 ff3d 	bl	801dee6 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b06c:	7eab      	ldrb	r3, [r5, #26]
 801b06e:	f013 0f10 	tst.w	r3, #16
 801b072:	d12a      	bne.n	801b0ca <tcp_input+0x46e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b074:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 801b078:	b37c      	cbz	r4, 801b0da <tcp_input+0x47e>
 801b07a:	2300      	movs	r3, #0
 801b07c:	4a3e      	ldr	r2, [pc, #248]	; (801b178 <tcp_input+0x51c>)
 801b07e:	6812      	ldr	r2, [r2, #0]
 801b080:	4629      	mov	r1, r5
 801b082:	6928      	ldr	r0, [r5, #16]
 801b084:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 801b086:	f110 0f0d 	cmn.w	r0, #13
 801b08a:	f43f af09 	beq.w	801aea0 <tcp_input+0x244>
          if (err != ERR_OK) {
 801b08e:	b110      	cbz	r0, 801b096 <tcp_input+0x43a>
            pcb->refused_data = recv_data;
 801b090:	4b39      	ldr	r3, [pc, #228]	; (801b178 <tcp_input+0x51c>)
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 801b096:	4b35      	ldr	r3, [pc, #212]	; (801b16c <tcp_input+0x510>)
 801b098:	781b      	ldrb	r3, [r3, #0]
 801b09a:	f013 0f20 	tst.w	r3, #32
 801b09e:	d005      	beq.n	801b0ac <tcp_input+0x450>
          if (pcb->refused_data != NULL) {
 801b0a0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801b0a2:	b313      	cbz	r3, 801b0ea <tcp_input+0x48e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b0a4:	7b5a      	ldrb	r2, [r3, #13]
 801b0a6:	f042 0220 	orr.w	r2, r2, #32
 801b0aa:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801b0ac:	2200      	movs	r2, #0
 801b0ae:	4b2e      	ldr	r3, [pc, #184]	; (801b168 <tcp_input+0x50c>)
 801b0b0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b0b2:	4628      	mov	r0, r5
 801b0b4:	f7fe fcda 	bl	8019a6c <tcp_input_delayed_close>
 801b0b8:	2800      	cmp	r0, #0
 801b0ba:	f47f aef1 	bne.w	801aea0 <tcp_input+0x244>
        tcp_output(pcb);
 801b0be:	4628      	mov	r0, r5
 801b0c0:	f000 fdb6 	bl	801bc30 <tcp_output>
 801b0c4:	e6ec      	b.n	801aea0 <tcp_input+0x244>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b0c6:	2000      	movs	r0, #0
 801b0c8:	e7b7      	b.n	801b03a <tcp_input+0x3de>
            pbuf_free(recv_data);
 801b0ca:	4b2b      	ldr	r3, [pc, #172]	; (801b178 <tcp_input+0x51c>)
 801b0cc:	6818      	ldr	r0, [r3, #0]
 801b0ce:	f7fd f93d 	bl	801834c <pbuf_free>
            tcp_abort(pcb);
 801b0d2:	4628      	mov	r0, r5
 801b0d4:	f7fe fb2a 	bl	801972c <tcp_abort>
            goto aborted;
 801b0d8:	e6e2      	b.n	801aea0 <tcp_input+0x244>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b0da:	2300      	movs	r3, #0
 801b0dc:	4a26      	ldr	r2, [pc, #152]	; (801b178 <tcp_input+0x51c>)
 801b0de:	6812      	ldr	r2, [r2, #0]
 801b0e0:	4629      	mov	r1, r5
 801b0e2:	4618      	mov	r0, r3
 801b0e4:	f7fe f9de 	bl	80194a4 <tcp_recv_null>
 801b0e8:	e7cd      	b.n	801b086 <tcp_input+0x42a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b0ea:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801b0ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b0f0:	d001      	beq.n	801b0f6 <tcp_input+0x49a>
              pcb->rcv_wnd++;
 801b0f2:	3301      	adds	r3, #1
 801b0f4:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801b0f6:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 801b0fa:	b144      	cbz	r4, 801b10e <tcp_input+0x4b2>
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	461a      	mov	r2, r3
 801b100:	4629      	mov	r1, r5
 801b102:	6928      	ldr	r0, [r5, #16]
 801b104:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 801b106:	f110 0f0d 	cmn.w	r0, #13
 801b10a:	d1cf      	bne.n	801b0ac <tcp_input+0x450>
 801b10c:	e6c8      	b.n	801aea0 <tcp_input+0x244>
            TCP_EVENT_CLOSED(pcb, err);
 801b10e:	2000      	movs	r0, #0
 801b110:	e7f9      	b.n	801b106 <tcp_input+0x4aa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b112:	4b0f      	ldr	r3, [pc, #60]	; (801b150 <tcp_input+0x4f4>)
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	8998      	ldrh	r0, [r3, #12]
 801b118:	f7fa ffe5 	bl	80160e6 <lwip_htons>
 801b11c:	f010 0f04 	tst.w	r0, #4
 801b120:	d003      	beq.n	801b12a <tcp_input+0x4ce>
    pbuf_free(p);
 801b122:	4620      	mov	r0, r4
 801b124:	f7fd f912 	bl	801834c <pbuf_free>
 801b128:	e5e3      	b.n	801acf2 <tcp_input+0x96>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b12a:	4b09      	ldr	r3, [pc, #36]	; (801b150 <tcp_input+0x4f4>)
 801b12c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801b12e:	4a14      	ldr	r2, [pc, #80]	; (801b180 <tcp_input+0x524>)
 801b130:	4914      	ldr	r1, [pc, #80]	; (801b184 <tcp_input+0x528>)
 801b132:	8808      	ldrh	r0, [r1, #0]
 801b134:	4914      	ldr	r1, [pc, #80]	; (801b188 <tcp_input+0x52c>)
 801b136:	6809      	ldr	r1, [r1, #0]
 801b138:	881d      	ldrh	r5, [r3, #0]
 801b13a:	9501      	str	r5, [sp, #4]
 801b13c:	885b      	ldrh	r3, [r3, #2]
 801b13e:	9300      	str	r3, [sp, #0]
 801b140:	4613      	mov	r3, r2
 801b142:	3204      	adds	r2, #4
 801b144:	4401      	add	r1, r0
 801b146:	4811      	ldr	r0, [pc, #68]	; (801b18c <tcp_input+0x530>)
 801b148:	6800      	ldr	r0, [r0, #0]
 801b14a:	f000 fecd 	bl	801bee8 <tcp_rst>
 801b14e:	e7e8      	b.n	801b122 <tcp_input+0x4c6>
 801b150:	200040ec 	.word	0x200040ec
 801b154:	080224f4 	.word	0x080224f4
 801b158:	0802243c 	.word	0x0802243c
 801b15c:	0801e950 	.word	0x0801e950
 801b160:	200044c0 	.word	0x200044c0
 801b164:	20008af0 	.word	0x20008af0
 801b168:	20008afc 	.word	0x20008afc
 801b16c:	200040e0 	.word	0x200040e0
 801b170:	20008ae8 	.word	0x20008ae8
 801b174:	200040d8 	.word	0x200040d8
 801b178:	200040dc 	.word	0x200040dc
 801b17c:	0802246c 	.word	0x0802246c
 801b180:	200044d0 	.word	0x200044d0
 801b184:	200040fa 	.word	0x200040fa
 801b188:	200040e4 	.word	0x200040e4
 801b18c:	200040c0 	.word	0x200040c0

0801b190 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801b190:	4a02      	ldr	r2, [pc, #8]	; (801b19c <tcp_trigger_input_pcb_close+0xc>)
 801b192:	7813      	ldrb	r3, [r2, #0]
 801b194:	f043 0310 	orr.w	r3, r3, #16
 801b198:	7013      	strb	r3, [r2, #0]
 801b19a:	4770      	bx	lr
 801b19c:	200040e0 	.word	0x200040e0

0801b1a0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801b1a0:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801b1a2:	7d03      	ldrb	r3, [r0, #20]
 801b1a4:	2b04      	cmp	r3, #4
 801b1a6:	d005      	beq.n	801b1b4 <tcp_write_checks+0x14>
 801b1a8:	2b07      	cmp	r3, #7
 801b1aa:	d003      	beq.n	801b1b4 <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 801b1ac:	2b02      	cmp	r3, #2
 801b1ae:	d001      	beq.n	801b1b4 <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 801b1b0:	2b03      	cmp	r3, #3
 801b1b2:	d139      	bne.n	801b228 <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 801b1b4:	2900      	cmp	r1, #0
 801b1b6:	d03a      	beq.n	801b22e <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801b1b8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801b1bc:	4299      	cmp	r1, r3
 801b1be:	d808      	bhi.n	801b1d2 <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801b1c0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801b1c4:	2b0a      	cmp	r3, #10
 801b1c6:	d80b      	bhi.n	801b1e0 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 801b1c8:	b1f3      	cbz	r3, 801b208 <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b1ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801b1cc:	b17b      	cbz	r3, 801b1ee <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801b1ce:	2000      	movs	r0, #0
 801b1d0:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 801b1d2:	7e83      	ldrb	r3, [r0, #26]
 801b1d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b1d8:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 801b1da:	f04f 30ff 	mov.w	r0, #4294967295
 801b1de:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 801b1e0:	7e83      	ldrb	r3, [r0, #26]
 801b1e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b1e6:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 801b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 801b1ec:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b1ee:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801b1f0:	b10b      	cbz	r3, 801b1f6 <tcp_write_checks+0x56>
  return ERR_OK;
 801b1f2:	2000      	movs	r0, #0
 801b1f4:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b1f6:	4b0f      	ldr	r3, [pc, #60]	; (801b234 <tcp_write_checks+0x94>)
 801b1f8:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801b1fc:	490e      	ldr	r1, [pc, #56]	; (801b238 <tcp_write_checks+0x98>)
 801b1fe:	480f      	ldr	r0, [pc, #60]	; (801b23c <tcp_write_checks+0x9c>)
 801b200:	f002 fe71 	bl	801dee6 <iprintf>
  return ERR_OK;
 801b204:	2000      	movs	r0, #0
 801b206:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b208:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801b20a:	b143      	cbz	r3, 801b21e <tcp_write_checks+0x7e>
 801b20c:	4b09      	ldr	r3, [pc, #36]	; (801b234 <tcp_write_checks+0x94>)
 801b20e:	f240 1259 	movw	r2, #345	; 0x159
 801b212:	490b      	ldr	r1, [pc, #44]	; (801b240 <tcp_write_checks+0xa0>)
 801b214:	4809      	ldr	r0, [pc, #36]	; (801b23c <tcp_write_checks+0x9c>)
 801b216:	f002 fe66 	bl	801dee6 <iprintf>
  return ERR_OK;
 801b21a:	2000      	movs	r0, #0
 801b21c:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b21e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801b220:	2b00      	cmp	r3, #0
 801b222:	d1f3      	bne.n	801b20c <tcp_write_checks+0x6c>
  return ERR_OK;
 801b224:	2000      	movs	r0, #0
}
 801b226:	bd08      	pop	{r3, pc}
    return ERR_CONN;
 801b228:	f06f 000a 	mvn.w	r0, #10
 801b22c:	bd08      	pop	{r3, pc}
    return ERR_OK;
 801b22e:	2000      	movs	r0, #0
 801b230:	bd08      	pop	{r3, pc}
 801b232:	bf00      	nop
 801b234:	08022a04 	.word	0x08022a04
 801b238:	08022a38 	.word	0x08022a38
 801b23c:	0801e950 	.word	0x0801e950
 801b240:	08022a74 	.word	0x08022a74

0801b244 <tcp_pbuf_prealloc>:
{
 801b244:	b570      	push	{r4, r5, r6, lr}
 801b246:	460c      	mov	r4, r1
 801b248:	461e      	mov	r6, r3
 801b24a:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 801b24e:	4291      	cmp	r1, r2
 801b250:	d215      	bcs.n	801b27e <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b252:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801b256:	f011 0f02 	tst.w	r1, #2
 801b25a:	d108      	bne.n	801b26e <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 801b25c:	9904      	ldr	r1, [sp, #16]
 801b25e:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b260:	f011 0f40 	tst.w	r1, #64	; 0x40
 801b264:	d126      	bne.n	801b2b4 <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 801b266:	b113      	cbz	r3, 801b26e <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 801b268:	9b04      	ldr	r3, [sp, #16]
 801b26a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 801b26c:	b1e3      	cbz	r3, 801b2a8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801b26e:	f204 21d3 	addw	r1, r4, #723	; 0x2d3
 801b272:	f021 0103 	bic.w	r1, r1, #3
 801b276:	428a      	cmp	r2, r1
 801b278:	bf28      	it	cs
 801b27a:	460a      	movcs	r2, r1
 801b27c:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801b27e:	2200      	movs	r2, #0
 801b280:	f7fd f8d0 	bl	8018424 <pbuf_alloc>
  if (p == NULL) {
 801b284:	4605      	mov	r5, r0
 801b286:	b168      	cbz	r0, 801b2a4 <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801b288:	6803      	ldr	r3, [r0, #0]
 801b28a:	b133      	cbz	r3, 801b29a <tcp_pbuf_prealloc+0x56>
 801b28c:	4b0a      	ldr	r3, [pc, #40]	; (801b2b8 <tcp_pbuf_prealloc+0x74>)
 801b28e:	f44f 7288 	mov.w	r2, #272	; 0x110
 801b292:	490a      	ldr	r1, [pc, #40]	; (801b2bc <tcp_pbuf_prealloc+0x78>)
 801b294:	480a      	ldr	r0, [pc, #40]	; (801b2c0 <tcp_pbuf_prealloc+0x7c>)
 801b296:	f002 fe26 	bl	801dee6 <iprintf>
  *oversize = p->len - length;
 801b29a:	896b      	ldrh	r3, [r5, #10]
 801b29c:	1b1b      	subs	r3, r3, r4
 801b29e:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 801b2a0:	812c      	strh	r4, [r5, #8]
 801b2a2:	816c      	strh	r4, [r5, #10]
}
 801b2a4:	4628      	mov	r0, r5
 801b2a6:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 801b2a8:	9b04      	ldr	r3, [sp, #16]
 801b2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d1de      	bne.n	801b26e <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 801b2b0:	4621      	mov	r1, r4
 801b2b2:	e7e4      	b.n	801b27e <tcp_pbuf_prealloc+0x3a>
 801b2b4:	4621      	mov	r1, r4
 801b2b6:	e7e2      	b.n	801b27e <tcp_pbuf_prealloc+0x3a>
 801b2b8:	08022a04 	.word	0x08022a04
 801b2bc:	08022814 	.word	0x08022814
 801b2c0:	0801e950 	.word	0x0801e950

0801b2c4 <tcp_create_segment>:
{
 801b2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2c8:	4680      	mov	r8, r0
 801b2ca:	460e      	mov	r6, r1
 801b2cc:	4617      	mov	r7, r2
 801b2ce:	4699      	mov	r9, r3
 801b2d0:	f89d a020 	ldrb.w	sl, [sp, #32]
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b2d4:	f01a 0f01 	tst.w	sl, #1
 801b2d8:	d03c      	beq.n	801b354 <tcp_create_segment+0x90>
 801b2da:	2504      	movs	r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801b2dc:	2003      	movs	r0, #3
 801b2de:	f7fc fe45 	bl	8017f6c <memp_malloc>
 801b2e2:	4604      	mov	r4, r0
 801b2e4:	2800      	cmp	r0, #0
 801b2e6:	d037      	beq.n	801b358 <tcp_create_segment+0x94>
  seg->flags = optflags;
 801b2e8:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	6003      	str	r3, [r0, #0]
  seg->p = p;
 801b2f0:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b2f2:	8933      	ldrh	r3, [r6, #8]
 801b2f4:	fa1f fa85 	uxth.w	sl, r5
 801b2f8:	4553      	cmp	r3, sl
 801b2fa:	d331      	bcc.n	801b360 <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 801b2fc:	8933      	ldrh	r3, [r6, #8]
 801b2fe:	eba3 030a 	sub.w	r3, r3, sl
 801b302:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 801b304:	2114      	movs	r1, #20
 801b306:	4630      	mov	r0, r6
 801b308:	f7fd f816 	bl	8018338 <pbuf_header>
 801b30c:	bb78      	cbnz	r0, 801b36e <tcp_create_segment+0xaa>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801b30e:	6863      	ldr	r3, [r4, #4]
 801b310:	685e      	ldr	r6, [r3, #4]
 801b312:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801b314:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 801b318:	f7fa fee5 	bl	80160e6 <lwip_htons>
 801b31c:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801b31e:	68e6      	ldr	r6, [r4, #12]
 801b320:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 801b324:	f7fa fedf 	bl	80160e6 <lwip_htons>
 801b328:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801b32a:	68e6      	ldr	r6, [r4, #12]
 801b32c:	4648      	mov	r0, r9
 801b32e:	f7fa fedd 	bl	80160ec <lwip_htonl>
 801b332:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801b334:	68e6      	ldr	r6, [r4, #12]
 801b336:	08a8      	lsrs	r0, r5, #2
 801b338:	3005      	adds	r0, #5
 801b33a:	0300      	lsls	r0, r0, #12
 801b33c:	b280      	uxth	r0, r0
 801b33e:	4338      	orrs	r0, r7
 801b340:	f7fa fed1 	bl	80160e6 <lwip_htons>
 801b344:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 801b346:	68e3      	ldr	r3, [r4, #12]
 801b348:	2200      	movs	r2, #0
 801b34a:	749a      	strb	r2, [r3, #18]
 801b34c:	74da      	strb	r2, [r3, #19]
}
 801b34e:	4620      	mov	r0, r4
 801b350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b354:	2500      	movs	r5, #0
 801b356:	e7c1      	b.n	801b2dc <tcp_create_segment+0x18>
    pbuf_free(p);
 801b358:	4630      	mov	r0, r6
 801b35a:	f7fc fff7 	bl	801834c <pbuf_free>
    return NULL;
 801b35e:	e7f6      	b.n	801b34e <tcp_create_segment+0x8a>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b360:	4b05      	ldr	r3, [pc, #20]	; (801b378 <tcp_create_segment+0xb4>)
 801b362:	22ba      	movs	r2, #186	; 0xba
 801b364:	4905      	ldr	r1, [pc, #20]	; (801b37c <tcp_create_segment+0xb8>)
 801b366:	4806      	ldr	r0, [pc, #24]	; (801b380 <tcp_create_segment+0xbc>)
 801b368:	f002 fdbd 	bl	801dee6 <iprintf>
 801b36c:	e7c6      	b.n	801b2fc <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 801b36e:	4620      	mov	r0, r4
 801b370:	f7fd fcd0 	bl	8018d14 <tcp_seg_free>
    return NULL;
 801b374:	2400      	movs	r4, #0
 801b376:	e7ea      	b.n	801b34e <tcp_create_segment+0x8a>
 801b378:	08022a04 	.word	0x08022a04
 801b37c:	0802268c 	.word	0x0802268c
 801b380:	0801e950 	.word	0x0801e950

0801b384 <tcp_output_alloc_header>:
{
 801b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b388:	4606      	mov	r6, r0
 801b38a:	460c      	mov	r4, r1
 801b38c:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b38e:	4411      	add	r1, r2
 801b390:	b289      	uxth	r1, r1
 801b392:	3114      	adds	r1, #20
 801b394:	2200      	movs	r2, #0
 801b396:	b289      	uxth	r1, r1
 801b398:	2001      	movs	r0, #1
 801b39a:	f7fd f843 	bl	8018424 <pbuf_alloc>
  if (p != NULL) {
 801b39e:	4607      	mov	r7, r0
 801b3a0:	b348      	cbz	r0, 801b3f6 <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b3a2:	8942      	ldrh	r2, [r0, #10]
 801b3a4:	f104 0314 	add.w	r3, r4, #20
 801b3a8:	429a      	cmp	r2, r3
 801b3aa:	db27      	blt.n	801b3fc <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 801b3ac:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 801b3ae:	8af0      	ldrh	r0, [r6, #22]
 801b3b0:	f7fa fe99 	bl	80160e6 <lwip_htons>
 801b3b4:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801b3b6:	8b30      	ldrh	r0, [r6, #24]
 801b3b8:	f7fa fe95 	bl	80160e6 <lwip_htons>
 801b3bc:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 801b3be:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b3c2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801b3c4:	f7fa fe92 	bl	80160ec <lwip_htonl>
 801b3c8:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801b3ca:	08a0      	lsrs	r0, r4, #2
 801b3cc:	3005      	adds	r0, #5
 801b3ce:	0300      	lsls	r0, r0, #12
 801b3d0:	b280      	uxth	r0, r0
 801b3d2:	f040 0010 	orr.w	r0, r0, #16
 801b3d6:	f7fa fe86 	bl	80160e6 <lwip_htons>
 801b3da:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b3dc:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 801b3de:	f7fa fe82 	bl	80160e6 <lwip_htons>
 801b3e2:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	742b      	strb	r3, [r5, #16]
 801b3e8:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 801b3ea:	74ab      	strb	r3, [r5, #18]
 801b3ec:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b3ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b3f0:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 801b3f2:	4413      	add	r3, r2
 801b3f4:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 801b3f6:	4638      	mov	r0, r7
 801b3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b3fc:	4b03      	ldr	r3, [pc, #12]	; (801b40c <tcp_output_alloc_header+0x88>)
 801b3fe:	2273      	movs	r2, #115	; 0x73
 801b400:	4903      	ldr	r1, [pc, #12]	; (801b410 <tcp_output_alloc_header+0x8c>)
 801b402:	4804      	ldr	r0, [pc, #16]	; (801b414 <tcp_output_alloc_header+0x90>)
 801b404:	f002 fd6f 	bl	801dee6 <iprintf>
 801b408:	e7d0      	b.n	801b3ac <tcp_output_alloc_header+0x28>
 801b40a:	bf00      	nop
 801b40c:	08022a04 	.word	0x08022a04
 801b410:	080227e4 	.word	0x080227e4
 801b414:	0801e950 	.word	0x0801e950

0801b418 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801b418:	6843      	ldr	r3, [r0, #4]
 801b41a:	89db      	ldrh	r3, [r3, #14]
 801b41c:	2b01      	cmp	r3, #1
 801b41e:	d001      	beq.n	801b424 <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801b420:	2000      	movs	r0, #0
 801b422:	4770      	bx	lr
{
 801b424:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b426:	b085      	sub	sp, #20
 801b428:	4616      	mov	r6, r2
 801b42a:	460d      	mov	r5, r1
 801b42c:	4604      	mov	r4, r0
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b42e:	68c7      	ldr	r7, [r0, #12]
 801b430:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801b432:	f7fa fe5b 	bl	80160ec <lwip_htonl>
 801b436:	60b8      	str	r0, [r7, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b438:	68e7      	ldr	r7, [r4, #12]
 801b43a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 801b43c:	f7fa fe53 	bl	80160e6 <lwip_htons>
 801b440:	81f8      	strh	r0, [r7, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b442:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b444:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 801b446:	4413      	add	r3, r2
 801b448:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b44a:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b44c:	7aa3      	ldrb	r3, [r4, #10]
 801b44e:	f013 0f01 	tst.w	r3, #1
 801b452:	d126      	bne.n	801b4a2 <tcp_output_segment+0x8a>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b454:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 801b458:	2b00      	cmp	r3, #0
 801b45a:	db2d      	blt.n	801b4b8 <tcp_output_segment+0xa0>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
 801b45c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d02d      	beq.n	801b4be <tcp_output_segment+0xa6>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b462:	68e3      	ldr	r3, [r4, #12]
 801b464:	6862      	ldr	r2, [r4, #4]
 801b466:	6851      	ldr	r1, [r2, #4]
 801b468:	1a5b      	subs	r3, r3, r1
 801b46a:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b46c:	8951      	ldrh	r1, [r2, #10]
 801b46e:	1ac9      	subs	r1, r1, r3
 801b470:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 801b472:	6861      	ldr	r1, [r4, #4]
 801b474:	890a      	ldrh	r2, [r1, #8]
 801b476:	1ad3      	subs	r3, r2, r3
 801b478:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 801b47a:	6863      	ldr	r3, [r4, #4]
 801b47c:	68e2      	ldr	r2, [r4, #12]
 801b47e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b480:	68e3      	ldr	r3, [r4, #12]
 801b482:	2200      	movs	r2, #0
 801b484:	741a      	strb	r2, [r3, #16]
 801b486:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b488:	6860      	ldr	r0, [r4, #4]
 801b48a:	7aab      	ldrb	r3, [r5, #10]
 801b48c:	7a6a      	ldrb	r2, [r5, #9]
 801b48e:	9602      	str	r6, [sp, #8]
 801b490:	2106      	movs	r1, #6
 801b492:	9101      	str	r1, [sp, #4]
 801b494:	9200      	str	r2, [sp, #0]
 801b496:	1d2a      	adds	r2, r5, #4
 801b498:	4629      	mov	r1, r5
 801b49a:	f7fb fd73 	bl	8016f84 <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 801b49e:	b005      	add	sp, #20
 801b4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801b4a2:	1d29      	adds	r1, r5, #4
 801b4a4:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 801b4a8:	f7fe fa3a 	bl	8019920 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b4ac:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801b4b0:	f7fa fe1c 	bl	80160ec <lwip_htonl>
 801b4b4:	6178      	str	r0, [r7, #20]
 801b4b6:	e7cd      	b.n	801b454 <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 801b4b8:	2300      	movs	r3, #0
 801b4ba:	862b      	strh	r3, [r5, #48]	; 0x30
 801b4bc:	e7ce      	b.n	801b45c <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 801b4be:	4b04      	ldr	r3, [pc, #16]	; (801b4d0 <tcp_output_segment+0xb8>)
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b4c4:	68e3      	ldr	r3, [r4, #12]
 801b4c6:	6858      	ldr	r0, [r3, #4]
 801b4c8:	f7fa fe10 	bl	80160ec <lwip_htonl>
 801b4cc:	63a8      	str	r0, [r5, #56]	; 0x38
 801b4ce:	e7c8      	b.n	801b462 <tcp_output_segment+0x4a>
 801b4d0:	20008aec 	.word	0x20008aec

0801b4d4 <tcp_write>:
{
 801b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4d8:	b091      	sub	sp, #68	; 0x44
 801b4da:	4681      	mov	r9, r0
 801b4dc:	9108      	str	r1, [sp, #32]
 801b4de:	4692      	mov	sl, r2
 801b4e0:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801b4e8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 801b4ec:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801b4ee:	9205      	str	r2, [sp, #20]
 801b4f0:	085b      	lsrs	r3, r3, #1
 801b4f2:	4293      	cmp	r3, r2
 801b4f4:	bf28      	it	cs
 801b4f6:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 801b4f8:	b103      	cbz	r3, 801b4fc <tcp_write+0x28>
 801b4fa:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b4fc:	9b08      	ldr	r3, [sp, #32]
 801b4fe:	b1cb      	cbz	r3, 801b534 <tcp_write+0x60>
  err = tcp_write_checks(pcb, len);
 801b500:	4651      	mov	r1, sl
 801b502:	4648      	mov	r0, r9
 801b504:	f7ff fe4c 	bl	801b1a0 <tcp_write_checks>
  if (err != ERR_OK) {
 801b508:	9009      	str	r0, [sp, #36]	; 0x24
 801b50a:	2800      	cmp	r0, #0
 801b50c:	f040 81b2 	bne.w	801b874 <tcp_write+0x3a0>
  queuelen = pcb->snd_queuelen;
 801b510:	f8b9 6062 	ldrh.w	r6, [r9, #98]	; 0x62
  if (pcb->unsent != NULL) {
 801b514:	f8d9 b068 	ldr.w	fp, [r9, #104]	; 0x68
 801b518:	f1bb 0f00 	cmp.w	fp, #0
 801b51c:	d116      	bne.n	801b54c <tcp_write+0x78>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b51e:	f8b9 4064 	ldrh.w	r4, [r9, #100]	; 0x64
 801b522:	2c00      	cmp	r4, #0
 801b524:	f040 80d8 	bne.w	801b6d8 <tcp_write+0x204>
  u16_t extendlen = 0;
 801b528:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 801b52a:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b52c:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 801b52e:	2300      	movs	r3, #0
 801b530:	930c      	str	r3, [sp, #48]	; 0x30
 801b532:	e0e3      	b.n	801b6fc <tcp_write+0x228>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b534:	4bb1      	ldr	r3, [pc, #708]	; (801b7fc <tcp_write+0x328>)
 801b536:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801b53a:	49b1      	ldr	r1, [pc, #708]	; (801b800 <tcp_write+0x32c>)
 801b53c:	48b1      	ldr	r0, [pc, #708]	; (801b804 <tcp_write+0x330>)
 801b53e:	f002 fcd2 	bl	801dee6 <iprintf>
 801b542:	f06f 030f 	mvn.w	r3, #15
 801b546:	9309      	str	r3, [sp, #36]	; 0x24
 801b548:	e194      	b.n	801b874 <tcp_write+0x3a0>
         last_unsent = last_unsent->next);
 801b54a:	46bb      	mov	fp, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b54c:	f8db 7000 	ldr.w	r7, [fp]
 801b550:	2f00      	cmp	r7, #0
 801b552:	d1fa      	bne.n	801b54a <tcp_write+0x76>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801b554:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b558:	f013 0f01 	tst.w	r3, #1
 801b55c:	d051      	beq.n	801b602 <tcp_write+0x12e>
 801b55e:	2404      	movs	r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b560:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b564:	4423      	add	r3, r4
 801b566:	9a05      	ldr	r2, [sp, #20]
 801b568:	429a      	cmp	r2, r3
 801b56a:	db4c      	blt.n	801b606 <tcp_write+0x132>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b56c:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b570:	441c      	add	r4, r3
 801b572:	b2a4      	uxth	r4, r4
 801b574:	9b05      	ldr	r3, [sp, #20]
 801b576:	1b1c      	subs	r4, r3, r4
 801b578:	b2a3      	uxth	r3, r4
 801b57a:	461a      	mov	r2, r3
 801b57c:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 801b57e:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801b582:	930a      	str	r3, [sp, #40]	; 0x28
 801b584:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d04e      	beq.n	801b62a <tcp_write+0x156>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b58c:	429a      	cmp	r2, r3
 801b58e:	d342      	bcc.n	801b616 <tcp_write+0x142>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b590:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b594:	459a      	cmp	sl, r3
 801b596:	d946      	bls.n	801b626 <tcp_write+0x152>
 801b598:	461a      	mov	r2, r3
 801b59a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b59c:	4282      	cmp	r2, r0
 801b59e:	bfa8      	it	ge
 801b5a0:	4602      	movge	r2, r0
 801b5a2:	b292      	uxth	r2, r2
 801b5a4:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801b5a6:	1a9b      	subs	r3, r3, r2
 801b5a8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 801b5ac:	1a83      	subs	r3, r0, r2
 801b5ae:	b29b      	uxth	r3, r3
 801b5b0:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 801b5b2:	46d8      	mov	r8, fp
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801b5b4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b5b8:	b14b      	cbz	r3, 801b5ce <tcp_write+0xfa>
 801b5ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5bc:	4553      	cmp	r3, sl
 801b5be:	d006      	beq.n	801b5ce <tcp_write+0xfa>
 801b5c0:	4b8e      	ldr	r3, [pc, #568]	; (801b7fc <tcp_write+0x328>)
 801b5c2:	f240 12e1 	movw	r2, #481	; 0x1e1
 801b5c6:	4990      	ldr	r1, [pc, #576]	; (801b808 <tcp_write+0x334>)
 801b5c8:	488e      	ldr	r0, [pc, #568]	; (801b804 <tcp_write+0x330>)
 801b5ca:	f002 fc8c 	bl	801dee6 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b5ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b5d0:	4552      	cmp	r2, sl
 801b5d2:	f080 808f 	bcs.w	801b6f4 <tcp_write+0x220>
 801b5d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b5d8:	2900      	cmp	r1, #0
 801b5da:	f000 8094 	beq.w	801b706 <tcp_write+0x232>
 801b5de:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	f000 8093 	beq.w	801b70e <tcp_write+0x23a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b5e8:	ebaa 0502 	sub.w	r5, sl, r2
 801b5ec:	428d      	cmp	r5, r1
 801b5ee:	bfa8      	it	ge
 801b5f0:	460d      	movge	r5, r1
 801b5f2:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b5f4:	9b06      	ldr	r3, [sp, #24]
 801b5f6:	f013 0f01 	tst.w	r3, #1
 801b5fa:	d118      	bne.n	801b62e <tcp_write+0x15a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b5fc:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b600:	e038      	b.n	801b674 <tcp_write+0x1a0>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801b602:	2400      	movs	r4, #0
 801b604:	e7ac      	b.n	801b560 <tcp_write+0x8c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b606:	4b7d      	ldr	r3, [pc, #500]	; (801b7fc <tcp_write+0x328>)
 801b608:	f240 12c7 	movw	r2, #455	; 0x1c7
 801b60c:	497f      	ldr	r1, [pc, #508]	; (801b80c <tcp_write+0x338>)
 801b60e:	487d      	ldr	r0, [pc, #500]	; (801b804 <tcp_write+0x330>)
 801b610:	f002 fc69 	bl	801dee6 <iprintf>
 801b614:	e7aa      	b.n	801b56c <tcp_write+0x98>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b616:	4b79      	ldr	r3, [pc, #484]	; (801b7fc <tcp_write+0x328>)
 801b618:	f240 12d9 	movw	r2, #473	; 0x1d9
 801b61c:	497c      	ldr	r1, [pc, #496]	; (801b810 <tcp_write+0x33c>)
 801b61e:	4879      	ldr	r0, [pc, #484]	; (801b804 <tcp_write+0x330>)
 801b620:	f002 fc61 	bl	801dee6 <iprintf>
 801b624:	e7b4      	b.n	801b590 <tcp_write+0xbc>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b626:	4652      	mov	r2, sl
 801b628:	e7b7      	b.n	801b59a <tcp_write+0xc6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b62a:	46b8      	mov	r8, r7
 801b62c:	e7c2      	b.n	801b5b4 <tcp_write+0xe0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801b62e:	2301      	movs	r3, #1
 801b630:	9302      	str	r3, [sp, #8]
 801b632:	9b06      	ldr	r3, [sp, #24]
 801b634:	9301      	str	r3, [sp, #4]
 801b636:	f8cd 9000 	str.w	r9, [sp]
 801b63a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801b63e:	460a      	mov	r2, r1
 801b640:	4621      	mov	r1, r4
 801b642:	2004      	movs	r0, #4
 801b644:	f7ff fdfe 	bl	801b244 <tcp_pbuf_prealloc>
 801b648:	4603      	mov	r3, r0
 801b64a:	900c      	str	r0, [sp, #48]	; 0x30
 801b64c:	2800      	cmp	r0, #0
 801b64e:	f000 80f0 	beq.w	801b832 <tcp_write+0x35e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801b652:	4622      	mov	r2, r4
 801b654:	9908      	ldr	r1, [sp, #32]
 801b656:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b658:	4401      	add	r1, r0
 801b65a:	461d      	mov	r5, r3
 801b65c:	6858      	ldr	r0, [r3, #4]
 801b65e:	f002 ffca 	bl	801e5f6 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801b662:	4628      	mov	r0, r5
 801b664:	f7fd f838 	bl	80186d8 <pbuf_clen>
 801b668:	4406      	add	r6, r0
 801b66a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801b66c:	2300      	movs	r3, #0
 801b66e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b670:	e01a      	b.n	801b6a8 <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b672:	4613      	mov	r3, r2
 801b674:	681a      	ldr	r2, [r3, #0]
 801b676:	2a00      	cmp	r2, #0
 801b678:	d1fb      	bne.n	801b672 <tcp_write+0x19e>
 801b67a:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b67c:	7b1a      	ldrb	r2, [r3, #12]
 801b67e:	2a01      	cmp	r2, #1
 801b680:	d017      	beq.n	801b6b2 <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801b682:	2201      	movs	r2, #1
 801b684:	4621      	mov	r1, r4
 801b686:	2004      	movs	r0, #4
 801b688:	f7fc fecc 	bl	8018424 <pbuf_alloc>
 801b68c:	900c      	str	r0, [sp, #48]	; 0x30
 801b68e:	2800      	cmp	r0, #0
 801b690:	f000 80cf 	beq.w	801b832 <tcp_write+0x35e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801b694:	9b08      	ldr	r3, [sp, #32]
 801b696:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b698:	440b      	add	r3, r1
 801b69a:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801b69c:	f7fd f81c 	bl	80186d8 <pbuf_clen>
 801b6a0:	4406      	add	r6, r0
 801b6a2:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801b6a4:	2300      	movs	r3, #0
 801b6a6:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 801b6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6aa:	441c      	add	r4, r3
 801b6ac:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 801b6ae:	46d8      	mov	r8, fp
 801b6b0:	e024      	b.n	801b6fc <tcp_write+0x228>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b6b2:	685a      	ldr	r2, [r3, #4]
 801b6b4:	895b      	ldrh	r3, [r3, #10]
 801b6b6:	4413      	add	r3, r2
 801b6b8:	9a08      	ldr	r2, [sp, #32]
 801b6ba:	429a      	cmp	r2, r3
 801b6bc:	d1e1      	bne.n	801b682 <tcp_write+0x1ae>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6c0:	b90b      	cbnz	r3, 801b6c6 <tcp_write+0x1f2>
          extendlen = seglen;
 801b6c2:	940b      	str	r4, [sp, #44]	; 0x2c
 801b6c4:	e7f0      	b.n	801b6a8 <tcp_write+0x1d4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b6c6:	4b4d      	ldr	r3, [pc, #308]	; (801b7fc <tcp_write+0x328>)
 801b6c8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801b6cc:	4951      	ldr	r1, [pc, #324]	; (801b814 <tcp_write+0x340>)
 801b6ce:	484d      	ldr	r0, [pc, #308]	; (801b804 <tcp_write+0x330>)
 801b6d0:	f002 fc09 	bl	801dee6 <iprintf>
          extendlen = seglen;
 801b6d4:	940b      	str	r4, [sp, #44]	; 0x2c
 801b6d6:	e7e7      	b.n	801b6a8 <tcp_write+0x1d4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b6d8:	4b48      	ldr	r3, [pc, #288]	; (801b7fc <tcp_write+0x328>)
 801b6da:	f240 2225 	movw	r2, #549	; 0x225
 801b6de:	494e      	ldr	r1, [pc, #312]	; (801b818 <tcp_write+0x344>)
 801b6e0:	4848      	ldr	r0, [pc, #288]	; (801b804 <tcp_write+0x330>)
 801b6e2:	f002 fc00 	bl	801dee6 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b6e6:	46d8      	mov	r8, fp
  u16_t extendlen = 0;
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 801b6ec:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 801b6ee:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 801b6f0:	930c      	str	r3, [sp, #48]	; 0x30
 801b6f2:	e003      	b.n	801b6fc <tcp_write+0x228>
 801b6f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 801b6f6:	2300      	movs	r3, #0
 801b6f8:	930b      	str	r3, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 801b6fa:	930c      	str	r3, [sp, #48]	; 0x30
      queue = seg;
 801b6fc:	2700      	movs	r7, #0
 801b6fe:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801b702:	46bb      	mov	fp, r7
 801b704:	e060      	b.n	801b7c8 <tcp_write+0x2f4>
 801b706:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 801b708:	2300      	movs	r3, #0
 801b70a:	930c      	str	r3, [sp, #48]	; 0x30
 801b70c:	e7f6      	b.n	801b6fc <tcp_write+0x228>
  u16_t extendlen = 0;
 801b70e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b710:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 801b712:	2300      	movs	r3, #0
 801b714:	930c      	str	r3, [sp, #48]	; 0x30
 801b716:	e7f1      	b.n	801b6fc <tcp_write+0x228>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801b718:	fab7 f387 	clz	r3, r7
 801b71c:	095b      	lsrs	r3, r3, #5
 801b71e:	9302      	str	r3, [sp, #8]
 801b720:	9b06      	ldr	r3, [sp, #24]
 801b722:	9301      	str	r3, [sp, #4]
 801b724:	f8cd 9000 	str.w	r9, [sp]
 801b728:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801b72c:	9a05      	ldr	r2, [sp, #20]
 801b72e:	4629      	mov	r1, r5
 801b730:	2000      	movs	r0, #0
 801b732:	f7ff fd87 	bl	801b244 <tcp_pbuf_prealloc>
 801b736:	4680      	mov	r8, r0
 801b738:	2800      	cmp	r0, #0
 801b73a:	d07a      	beq.n	801b832 <tcp_write+0x35e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b73c:	8943      	ldrh	r3, [r0, #10]
 801b73e:	429d      	cmp	r5, r3
 801b740:	d807      	bhi.n	801b752 <tcp_write+0x27e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 801b742:	462a      	mov	r2, r5
 801b744:	9b08      	ldr	r3, [sp, #32]
 801b746:	1919      	adds	r1, r3, r4
 801b748:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b74c:	f002 ff53 	bl	801e5f6 <memcpy>
 801b750:	e01d      	b.n	801b78e <tcp_write+0x2ba>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b752:	4b2a      	ldr	r3, [pc, #168]	; (801b7fc <tcp_write+0x328>)
 801b754:	f240 2241 	movw	r2, #577	; 0x241
 801b758:	4930      	ldr	r1, [pc, #192]	; (801b81c <tcp_write+0x348>)
 801b75a:	482a      	ldr	r0, [pc, #168]	; (801b804 <tcp_write+0x330>)
 801b75c:	f002 fbc3 	bl	801dee6 <iprintf>
 801b760:	e7ef      	b.n	801b742 <tcp_write+0x26e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801b762:	2201      	movs	r2, #1
 801b764:	4629      	mov	r1, r5
 801b766:	2000      	movs	r0, #0
 801b768:	f7fc fe5c 	bl	8018424 <pbuf_alloc>
 801b76c:	9007      	str	r0, [sp, #28]
 801b76e:	2800      	cmp	r0, #0
 801b770:	d05f      	beq.n	801b832 <tcp_write+0x35e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801b772:	9b08      	ldr	r3, [sp, #32]
 801b774:	4423      	add	r3, r4
 801b776:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b778:	2200      	movs	r2, #0
 801b77a:	4611      	mov	r1, r2
 801b77c:	4610      	mov	r0, r2
 801b77e:	f7fc fe51 	bl	8018424 <pbuf_alloc>
 801b782:	4680      	mov	r8, r0
 801b784:	2800      	cmp	r0, #0
 801b786:	d04d      	beq.n	801b824 <tcp_write+0x350>
      pbuf_cat(p/*header*/, p2/*data*/);
 801b788:	9907      	ldr	r1, [sp, #28]
 801b78a:	f7fc ffcb 	bl	8018724 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801b78e:	4640      	mov	r0, r8
 801b790:	f7fc ffa2 	bl	80186d8 <pbuf_clen>
 801b794:	4406      	add	r6, r0
 801b796:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801b798:	2e0b      	cmp	r6, #11
 801b79a:	d847      	bhi.n	801b82c <tcp_write+0x358>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801b79c:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 801b7a0:	2200      	movs	r2, #0
 801b7a2:	9200      	str	r2, [sp, #0]
 801b7a4:	4423      	add	r3, r4
 801b7a6:	4641      	mov	r1, r8
 801b7a8:	4648      	mov	r0, r9
 801b7aa:	f7ff fd8b 	bl	801b2c4 <tcp_create_segment>
 801b7ae:	4680      	mov	r8, r0
 801b7b0:	2800      	cmp	r0, #0
 801b7b2:	d03e      	beq.n	801b832 <tcp_write+0x35e>
    if (queue == NULL) {
 801b7b4:	2f00      	cmp	r7, #0
 801b7b6:	d069      	beq.n	801b88c <tcp_write+0x3b8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b7b8:	f1bb 0f00 	cmp.w	fp, #0
 801b7bc:	d05e      	beq.n	801b87c <tcp_write+0x3a8>
      prev_seg->next = seg;
 801b7be:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 801b7c2:	442c      	add	r4, r5
 801b7c4:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 801b7c6:	46c3      	mov	fp, r8
  while (pos < len) {
 801b7c8:	4554      	cmp	r4, sl
 801b7ca:	d261      	bcs.n	801b890 <tcp_write+0x3bc>
    u16_t left = len - pos;
 801b7cc:	ebaa 0504 	sub.w	r5, sl, r4
 801b7d0:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 801b7d2:	9b05      	ldr	r3, [sp, #20]
 801b7d4:	429d      	cmp	r5, r3
 801b7d6:	bf28      	it	cs
 801b7d8:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b7da:	9b06      	ldr	r3, [sp, #24]
 801b7dc:	f013 0f01 	tst.w	r3, #1
 801b7e0:	d19a      	bne.n	801b718 <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801b7e2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d0bb      	beq.n	801b762 <tcp_write+0x28e>
 801b7ea:	4b04      	ldr	r3, [pc, #16]	; (801b7fc <tcp_write+0x328>)
 801b7ec:	f240 224b 	movw	r2, #587	; 0x24b
 801b7f0:	490b      	ldr	r1, [pc, #44]	; (801b820 <tcp_write+0x34c>)
 801b7f2:	4804      	ldr	r0, [pc, #16]	; (801b804 <tcp_write+0x330>)
 801b7f4:	f002 fb77 	bl	801dee6 <iprintf>
 801b7f8:	e7b3      	b.n	801b762 <tcp_write+0x28e>
 801b7fa:	bf00      	nop
 801b7fc:	08022a04 	.word	0x08022a04
 801b800:	08022828 	.word	0x08022828
 801b804:	0801e950 	.word	0x0801e950
 801b808:	08022894 	.word	0x08022894
 801b80c:	0802285c 	.word	0x0802285c
 801b810:	08022874 	.word	0x08022874
 801b814:	080228b4 	.word	0x080228b4
 801b818:	080228e0 	.word	0x080228e0
 801b81c:	08022910 	.word	0x08022910
 801b820:	08022950 	.word	0x08022950
        pbuf_free(p2);
 801b824:	9807      	ldr	r0, [sp, #28]
 801b826:	f7fc fd91 	bl	801834c <pbuf_free>
        goto memerr;
 801b82a:	e002      	b.n	801b832 <tcp_write+0x35e>
      pbuf_free(p);
 801b82c:	4640      	mov	r0, r8
 801b82e:	f7fc fd8d 	bl	801834c <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 801b832:	f899 301a 	ldrb.w	r3, [r9, #26]
 801b836:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b83a:	f889 301a 	strb.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801b83e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b840:	b113      	cbz	r3, 801b848 <tcp_write+0x374>
    pbuf_free(concat_p);
 801b842:	4618      	mov	r0, r3
 801b844:	f7fc fd82 	bl	801834c <pbuf_free>
  if (queue != NULL) {
 801b848:	b117      	cbz	r7, 801b850 <tcp_write+0x37c>
    tcp_segs_free(queue);
 801b84a:	4638      	mov	r0, r7
 801b84c:	f7fd fa6f 	bl	8018d2e <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801b850:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
 801b854:	2b00      	cmp	r3, #0
 801b856:	f000 80c6 	beq.w	801b9e6 <tcp_write+0x512>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b85a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801b85e:	2b00      	cmp	r3, #0
 801b860:	f040 80c5 	bne.w	801b9ee <tcp_write+0x51a>
 801b864:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 801b868:	2b00      	cmp	r3, #0
 801b86a:	f000 80b1 	beq.w	801b9d0 <tcp_write+0x4fc>
  return ERR_MEM;
 801b86e:	f04f 33ff 	mov.w	r3, #4294967295
 801b872:	9309      	str	r3, [sp, #36]	; 0x24
}
 801b874:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b876:	b011      	add	sp, #68	; 0x44
 801b878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b87c:	4b5e      	ldr	r3, [pc, #376]	; (801b9f8 <tcp_write+0x524>)
 801b87e:	f240 2285 	movw	r2, #645	; 0x285
 801b882:	495e      	ldr	r1, [pc, #376]	; (801b9fc <tcp_write+0x528>)
 801b884:	485e      	ldr	r0, [pc, #376]	; (801ba00 <tcp_write+0x52c>)
 801b886:	f002 fb2e 	bl	801dee6 <iprintf>
 801b88a:	e798      	b.n	801b7be <tcp_write+0x2ea>
      queue = seg;
 801b88c:	4607      	mov	r7, r0
 801b88e:	e798      	b.n	801b7c2 <tcp_write+0x2ee>
 801b890:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 801b894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b896:	b1e3      	cbz	r3, 801b8d2 <tcp_write+0x3fe>
    for (p = last_unsent->p; p; p = p->next) {
 801b898:	f8db 4004 	ldr.w	r4, [fp, #4]
 801b89c:	461d      	mov	r5, r3
 801b89e:	e000      	b.n	801b8a2 <tcp_write+0x3ce>
 801b8a0:	6824      	ldr	r4, [r4, #0]
 801b8a2:	b184      	cbz	r4, 801b8c6 <tcp_write+0x3f2>
      p->tot_len += oversize_used;
 801b8a4:	8923      	ldrh	r3, [r4, #8]
 801b8a6:	442b      	add	r3, r5
 801b8a8:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801b8aa:	6823      	ldr	r3, [r4, #0]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d1f7      	bne.n	801b8a0 <tcp_write+0x3cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801b8b0:	6860      	ldr	r0, [r4, #4]
 801b8b2:	8963      	ldrh	r3, [r4, #10]
 801b8b4:	462a      	mov	r2, r5
 801b8b6:	9908      	ldr	r1, [sp, #32]
 801b8b8:	4418      	add	r0, r3
 801b8ba:	f002 fe9c 	bl	801e5f6 <memcpy>
        p->len += oversize_used;
 801b8be:	8963      	ldrh	r3, [r4, #10]
 801b8c0:	442b      	add	r3, r5
 801b8c2:	8163      	strh	r3, [r4, #10]
 801b8c4:	e7ec      	b.n	801b8a0 <tcp_write+0x3cc>
    last_unsent->len += oversize_used;
 801b8c6:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b8ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b8cc:	441a      	add	r2, r3
 801b8ce:	f8ab 2008 	strh.w	r2, [fp, #8]
  pcb->unsent_oversize = oversize;
 801b8d2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b8d6:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 801b8da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d03f      	beq.n	801b960 <tcp_write+0x48c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b8e0:	f1bb 0f00 	cmp.w	fp, #0
 801b8e4:	d034      	beq.n	801b950 <tcp_write+0x47c>
    pbuf_cat(last_unsent->p, concat_p);
 801b8e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b8e8:	4621      	mov	r1, r4
 801b8ea:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b8ee:	f7fc ff19 	bl	8018724 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b8f2:	8923      	ldrh	r3, [r4, #8]
 801b8f4:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 801b8f8:	4413      	add	r3, r2
 801b8fa:	f8ab 3008 	strh.w	r3, [fp, #8]
  if (last_unsent == NULL) {
 801b8fe:	f1bb 0f00 	cmp.w	fp, #0
 801b902:	d056      	beq.n	801b9b2 <tcp_write+0x4de>
    last_unsent->next = queue;
 801b904:	f8cb 7000 	str.w	r7, [fp]
  pcb->snd_lbb += len;
 801b908:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 801b90c:	4453      	add	r3, sl
 801b90e:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 801b912:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
 801b916:	eba3 0a0a 	sub.w	sl, r3, sl
 801b91a:	f8a9 a060 	strh.w	sl, [r9, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 801b91e:	f8a9 6062 	strh.w	r6, [r9, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 801b922:	b11e      	cbz	r6, 801b92c <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b924:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d045      	beq.n	801b9b8 <tcp_write+0x4e4>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801b92c:	f1b8 0f00 	cmp.w	r8, #0
 801b930:	d0a0      	beq.n	801b874 <tcp_write+0x3a0>
 801b932:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801b936:	2c00      	cmp	r4, #0
 801b938:	d09c      	beq.n	801b874 <tcp_write+0x3a0>
 801b93a:	9b06      	ldr	r3, [sp, #24]
 801b93c:	f013 0f02 	tst.w	r3, #2
 801b940:	d198      	bne.n	801b874 <tcp_write+0x3a0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b942:	89a5      	ldrh	r5, [r4, #12]
 801b944:	2008      	movs	r0, #8
 801b946:	f7fa fbce 	bl	80160e6 <lwip_htons>
 801b94a:	4328      	orrs	r0, r5
 801b94c:	81a0      	strh	r0, [r4, #12]
 801b94e:	e791      	b.n	801b874 <tcp_write+0x3a0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b950:	4b29      	ldr	r3, [pc, #164]	; (801b9f8 <tcp_write+0x524>)
 801b952:	f240 22bb 	movw	r2, #699	; 0x2bb
 801b956:	492b      	ldr	r1, [pc, #172]	; (801ba04 <tcp_write+0x530>)
 801b958:	4829      	ldr	r0, [pc, #164]	; (801ba00 <tcp_write+0x52c>)
 801b95a:	f002 fac4 	bl	801dee6 <iprintf>
 801b95e:	e7c2      	b.n	801b8e6 <tcp_write+0x412>
  } else if (extendlen > 0) {
 801b960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b962:	2b00      	cmp	r3, #0
 801b964:	d0cb      	beq.n	801b8fe <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b966:	f1bb 0f00 	cmp.w	fp, #0
 801b96a:	d006      	beq.n	801b97a <tcp_write+0x4a6>
 801b96c:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b970:	b11b      	cbz	r3, 801b97a <tcp_write+0x4a6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b972:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b976:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b978:	e00b      	b.n	801b992 <tcp_write+0x4be>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b97a:	4b1f      	ldr	r3, [pc, #124]	; (801b9f8 <tcp_write+0x524>)
 801b97c:	f240 22c1 	movw	r2, #705	; 0x2c1
 801b980:	4921      	ldr	r1, [pc, #132]	; (801ba08 <tcp_write+0x534>)
 801b982:	481f      	ldr	r0, [pc, #124]	; (801ba00 <tcp_write+0x52c>)
 801b984:	f002 faaf 	bl	801dee6 <iprintf>
 801b988:	e7f3      	b.n	801b972 <tcp_write+0x49e>
      p->tot_len += extendlen;
 801b98a:	891a      	ldrh	r2, [r3, #8]
 801b98c:	4402      	add	r2, r0
 801b98e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b990:	460b      	mov	r3, r1
 801b992:	6819      	ldr	r1, [r3, #0]
 801b994:	2900      	cmp	r1, #0
 801b996:	d1f8      	bne.n	801b98a <tcp_write+0x4b6>
    p->tot_len += extendlen;
 801b998:	891a      	ldrh	r2, [r3, #8]
 801b99a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b99c:	4402      	add	r2, r0
 801b99e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801b9a0:	895a      	ldrh	r2, [r3, #10]
 801b9a2:	4402      	add	r2, r0
 801b9a4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801b9a6:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b9aa:	4403      	add	r3, r0
 801b9ac:	f8ab 3008 	strh.w	r3, [fp, #8]
 801b9b0:	e7a5      	b.n	801b8fe <tcp_write+0x42a>
    pcb->unsent = queue;
 801b9b2:	f8c9 7068 	str.w	r7, [r9, #104]	; 0x68
 801b9b6:	e7a7      	b.n	801b908 <tcp_write+0x434>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b9b8:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d1b5      	bne.n	801b92c <tcp_write+0x458>
 801b9c0:	4b0d      	ldr	r3, [pc, #52]	; (801b9f8 <tcp_write+0x524>)
 801b9c2:	f240 22ed 	movw	r2, #749	; 0x2ed
 801b9c6:	4911      	ldr	r1, [pc, #68]	; (801ba0c <tcp_write+0x538>)
 801b9c8:	480d      	ldr	r0, [pc, #52]	; (801ba00 <tcp_write+0x52c>)
 801b9ca:	f002 fa8c 	bl	801dee6 <iprintf>
 801b9ce:	e7ad      	b.n	801b92c <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b9d0:	4b09      	ldr	r3, [pc, #36]	; (801b9f8 <tcp_write+0x524>)
 801b9d2:	f240 3202 	movw	r2, #770	; 0x302
 801b9d6:	490d      	ldr	r1, [pc, #52]	; (801ba0c <tcp_write+0x538>)
 801b9d8:	4809      	ldr	r0, [pc, #36]	; (801ba00 <tcp_write+0x52c>)
 801b9da:	f002 fa84 	bl	801dee6 <iprintf>
  return ERR_MEM;
 801b9de:	f04f 33ff 	mov.w	r3, #4294967295
 801b9e2:	9309      	str	r3, [sp, #36]	; 0x24
 801b9e4:	e746      	b.n	801b874 <tcp_write+0x3a0>
 801b9e6:	f04f 33ff 	mov.w	r3, #4294967295
 801b9ea:	9309      	str	r3, [sp, #36]	; 0x24
 801b9ec:	e742      	b.n	801b874 <tcp_write+0x3a0>
 801b9ee:	f04f 33ff 	mov.w	r3, #4294967295
 801b9f2:	9309      	str	r3, [sp, #36]	; 0x24
 801b9f4:	e73e      	b.n	801b874 <tcp_write+0x3a0>
 801b9f6:	bf00      	nop
 801b9f8:	08022a04 	.word	0x08022a04
 801b9fc:	08022960 	.word	0x08022960
 801ba00:	0801e950 	.word	0x0801e950
 801ba04:	08022974 	.word	0x08022974
 801ba08:	080229ac 	.word	0x080229ac
 801ba0c:	080229e4 	.word	0x080229e4

0801ba10 <tcp_enqueue_flags>:
{
 801ba10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba14:	b083      	sub	sp, #12
 801ba16:	4604      	mov	r4, r0
 801ba18:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ba1a:	f011 0703 	ands.w	r7, r1, #3
 801ba1e:	d030      	beq.n	801ba82 <tcp_enqueue_flags+0x72>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801ba20:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801ba24:	2b0a      	cmp	r3, #10
 801ba26:	d902      	bls.n	801ba2e <tcp_enqueue_flags+0x1e>
 801ba28:	f015 0f01 	tst.w	r5, #1
 801ba2c:	d031      	beq.n	801ba92 <tcp_enqueue_flags+0x82>
  if (flags & TCP_SYN) {
 801ba2e:	f015 0f02 	tst.w	r5, #2
 801ba32:	d135      	bne.n	801baa0 <tcp_enqueue_flags+0x90>
  u8_t optflags = 0;
 801ba34:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ba38:	f1b9 0f00 	cmp.w	r9, #0
 801ba3c:	d033      	beq.n	801baa6 <tcp_enqueue_flags+0x96>
 801ba3e:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ba40:	b2b6      	uxth	r6, r6
 801ba42:	2200      	movs	r2, #0
 801ba44:	4631      	mov	r1, r6
 801ba46:	4610      	mov	r0, r2
 801ba48:	f7fc fcec 	bl	8018424 <pbuf_alloc>
 801ba4c:	4680      	mov	r8, r0
 801ba4e:	b360      	cbz	r0, 801baaa <tcp_enqueue_flags+0x9a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ba50:	8943      	ldrh	r3, [r0, #10]
 801ba52:	429e      	cmp	r6, r3
 801ba54:	d830      	bhi.n	801bab8 <tcp_enqueue_flags+0xa8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801ba56:	f8cd 9000 	str.w	r9, [sp]
 801ba5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ba5c:	462a      	mov	r2, r5
 801ba5e:	4641      	mov	r1, r8
 801ba60:	4620      	mov	r0, r4
 801ba62:	f7ff fc2f 	bl	801b2c4 <tcp_create_segment>
 801ba66:	4606      	mov	r6, r0
 801ba68:	b370      	cbz	r0, 801bac8 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ba6a:	68c3      	ldr	r3, [r0, #12]
 801ba6c:	f013 0f03 	tst.w	r3, #3
 801ba70:	d131      	bne.n	801bad6 <tcp_enqueue_flags+0xc6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ba72:	8933      	ldrh	r3, [r6, #8]
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d136      	bne.n	801bae6 <tcp_enqueue_flags+0xd6>
  if (pcb->unsent == NULL) {
 801ba78:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801ba7a:	2a00      	cmp	r2, #0
 801ba7c:	d13c      	bne.n	801baf8 <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 801ba7e:	66a6      	str	r6, [r4, #104]	; 0x68
 801ba80:	e03e      	b.n	801bb00 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ba82:	4b36      	ldr	r3, [pc, #216]	; (801bb5c <tcp_enqueue_flags+0x14c>)
 801ba84:	f240 321b 	movw	r2, #795	; 0x31b
 801ba88:	4935      	ldr	r1, [pc, #212]	; (801bb60 <tcp_enqueue_flags+0x150>)
 801ba8a:	4836      	ldr	r0, [pc, #216]	; (801bb64 <tcp_enqueue_flags+0x154>)
 801ba8c:	f002 fa2b 	bl	801dee6 <iprintf>
 801ba90:	e7c6      	b.n	801ba20 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 801ba92:	7ea3      	ldrb	r3, [r4, #26]
 801ba94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ba98:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801ba9a:	f04f 30ff 	mov.w	r0, #4294967295
 801ba9e:	e04a      	b.n	801bb36 <tcp_enqueue_flags+0x126>
    optflags = TF_SEG_OPTS_MSS;
 801baa0:	f04f 0901 	mov.w	r9, #1
 801baa4:	e7c8      	b.n	801ba38 <tcp_enqueue_flags+0x28>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801baa6:	2600      	movs	r6, #0
 801baa8:	e7ca      	b.n	801ba40 <tcp_enqueue_flags+0x30>
    pcb->flags |= TF_NAGLEMEMERR;
 801baaa:	7ea3      	ldrb	r3, [r4, #26]
 801baac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bab0:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801bab2:	f04f 30ff 	mov.w	r0, #4294967295
 801bab6:	e03e      	b.n	801bb36 <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801bab8:	4b28      	ldr	r3, [pc, #160]	; (801bb5c <tcp_enqueue_flags+0x14c>)
 801baba:	f240 3241 	movw	r2, #833	; 0x341
 801babe:	492a      	ldr	r1, [pc, #168]	; (801bb68 <tcp_enqueue_flags+0x158>)
 801bac0:	4828      	ldr	r0, [pc, #160]	; (801bb64 <tcp_enqueue_flags+0x154>)
 801bac2:	f002 fa10 	bl	801dee6 <iprintf>
 801bac6:	e7c6      	b.n	801ba56 <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 801bac8:	7ea3      	ldrb	r3, [r4, #26]
 801baca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bace:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801bad0:	f04f 30ff 	mov.w	r0, #4294967295
 801bad4:	e02f      	b.n	801bb36 <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801bad6:	4b21      	ldr	r3, [pc, #132]	; (801bb5c <tcp_enqueue_flags+0x14c>)
 801bad8:	f240 3249 	movw	r2, #841	; 0x349
 801badc:	4923      	ldr	r1, [pc, #140]	; (801bb6c <tcp_enqueue_flags+0x15c>)
 801bade:	4821      	ldr	r0, [pc, #132]	; (801bb64 <tcp_enqueue_flags+0x154>)
 801bae0:	f002 fa01 	bl	801dee6 <iprintf>
 801bae4:	e7c5      	b.n	801ba72 <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801bae6:	4b1d      	ldr	r3, [pc, #116]	; (801bb5c <tcp_enqueue_flags+0x14c>)
 801bae8:	f240 324a 	movw	r2, #842	; 0x34a
 801baec:	4920      	ldr	r1, [pc, #128]	; (801bb70 <tcp_enqueue_flags+0x160>)
 801baee:	481d      	ldr	r0, [pc, #116]	; (801bb64 <tcp_enqueue_flags+0x154>)
 801baf0:	f002 f9f9 	bl	801dee6 <iprintf>
 801baf4:	e7c0      	b.n	801ba78 <tcp_enqueue_flags+0x68>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801baf6:	461a      	mov	r2, r3
 801baf8:	6813      	ldr	r3, [r2, #0]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d1fb      	bne.n	801baf6 <tcp_enqueue_flags+0xe6>
    useg->next = seg;
 801bafe:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801bb00:	2300      	movs	r3, #0
 801bb02:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801bb06:	b117      	cbz	r7, 801bb0e <tcp_enqueue_flags+0xfe>
    pcb->snd_lbb++;
 801bb08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bb0a:	3301      	adds	r3, #1
 801bb0c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 801bb0e:	f015 0f01 	tst.w	r5, #1
 801bb12:	d003      	beq.n	801bb1c <tcp_enqueue_flags+0x10c>
    pcb->flags |= TF_FIN;
 801bb14:	7ea3      	ldrb	r3, [r4, #26]
 801bb16:	f043 0320 	orr.w	r3, r3, #32
 801bb1a:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801bb1c:	6870      	ldr	r0, [r6, #4]
 801bb1e:	f7fc fddb 	bl	80186d8 <pbuf_clen>
 801bb22:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801bb26:	4418      	add	r0, r3
 801bb28:	b280      	uxth	r0, r0
 801bb2a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 801bb2e:	b190      	cbz	r0, 801bb56 <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801bb30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bb32:	b11b      	cbz	r3, 801bb3c <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 801bb34:	2000      	movs	r0, #0
}
 801bb36:	b003      	add	sp, #12
 801bb38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801bb3c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801bb3e:	b10b      	cbz	r3, 801bb44 <tcp_enqueue_flags+0x134>
  return ERR_OK;
 801bb40:	2000      	movs	r0, #0
 801bb42:	e7f8      	b.n	801bb36 <tcp_enqueue_flags+0x126>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801bb44:	4b05      	ldr	r3, [pc, #20]	; (801bb5c <tcp_enqueue_flags+0x14c>)
 801bb46:	f240 326d 	movw	r2, #877	; 0x36d
 801bb4a:	490a      	ldr	r1, [pc, #40]	; (801bb74 <tcp_enqueue_flags+0x164>)
 801bb4c:	4805      	ldr	r0, [pc, #20]	; (801bb64 <tcp_enqueue_flags+0x154>)
 801bb4e:	f002 f9ca 	bl	801dee6 <iprintf>
  return ERR_OK;
 801bb52:	2000      	movs	r0, #0
 801bb54:	e7ef      	b.n	801bb36 <tcp_enqueue_flags+0x126>
 801bb56:	2000      	movs	r0, #0
 801bb58:	e7ed      	b.n	801bb36 <tcp_enqueue_flags+0x126>
 801bb5a:	bf00      	nop
 801bb5c:	08022a04 	.word	0x08022a04
 801bb60:	080226a4 	.word	0x080226a4
 801bb64:	0801e950 	.word	0x0801e950
 801bb68:	080226fc 	.word	0x080226fc
 801bb6c:	08022738 	.word	0x08022738
 801bb70:	08022750 	.word	0x08022750
 801bb74:	0802277c 	.word	0x0802277c

0801bb78 <tcp_send_fin>:
{
 801bb78:	b570      	push	{r4, r5, r6, lr}
 801bb7a:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 801bb7c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 801bb7e:	b90c      	cbnz	r4, 801bb84 <tcp_send_fin+0xc>
 801bb80:	e00a      	b.n	801bb98 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 801bb82:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801bb84:	6823      	ldr	r3, [r4, #0]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d1fb      	bne.n	801bb82 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801bb8a:	68e3      	ldr	r3, [r4, #12]
 801bb8c:	8998      	ldrh	r0, [r3, #12]
 801bb8e:	f7fa faaa 	bl	80160e6 <lwip_htons>
 801bb92:	f010 0f07 	tst.w	r0, #7
 801bb96:	d004      	beq.n	801bba2 <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801bb98:	2101      	movs	r1, #1
 801bb9a:	4628      	mov	r0, r5
 801bb9c:	f7ff ff38 	bl	801ba10 <tcp_enqueue_flags>
}
 801bba0:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801bba2:	68e6      	ldr	r6, [r4, #12]
 801bba4:	89b4      	ldrh	r4, [r6, #12]
 801bba6:	2001      	movs	r0, #1
 801bba8:	f7fa fa9d 	bl	80160e6 <lwip_htons>
 801bbac:	4320      	orrs	r0, r4
 801bbae:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 801bbb0:	7eab      	ldrb	r3, [r5, #26]
 801bbb2:	f043 0320 	orr.w	r3, r3, #32
 801bbb6:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 801bbb8:	2000      	movs	r0, #0
 801bbba:	bd70      	pop	{r4, r5, r6, pc}

0801bbbc <tcp_send_empty_ack>:
{
 801bbbc:	b570      	push	{r4, r5, r6, lr}
 801bbbe:	b084      	sub	sp, #16
 801bbc0:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801bbc2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801bbc4:	f7fa fa92 	bl	80160ec <lwip_htonl>
 801bbc8:	4603      	mov	r3, r0
 801bbca:	2200      	movs	r2, #0
 801bbcc:	4611      	mov	r1, r2
 801bbce:	4620      	mov	r0, r4
 801bbd0:	f7ff fbd8 	bl	801b384 <tcp_output_alloc_header>
  if (p == NULL) {
 801bbd4:	b1e0      	cbz	r0, 801bc10 <tcp_send_empty_ack+0x54>
 801bbd6:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bbd8:	1d25      	adds	r5, r4, #4
 801bbda:	4628      	mov	r0, r5
 801bbdc:	f7fb f82c 	bl	8016c38 <ip4_route>
  if (netif == NULL) {
 801bbe0:	b1e8      	cbz	r0, 801bc1e <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801bbe2:	7aa3      	ldrb	r3, [r4, #10]
 801bbe4:	7a61      	ldrb	r1, [r4, #9]
 801bbe6:	9002      	str	r0, [sp, #8]
 801bbe8:	2206      	movs	r2, #6
 801bbea:	9201      	str	r2, [sp, #4]
 801bbec:	9100      	str	r1, [sp, #0]
 801bbee:	462a      	mov	r2, r5
 801bbf0:	4621      	mov	r1, r4
 801bbf2:	4630      	mov	r0, r6
 801bbf4:	f7fb f9c6 	bl	8016f84 <ip4_output_if>
 801bbf8:	4605      	mov	r5, r0
  pbuf_free(p);
 801bbfa:	4630      	mov	r0, r6
 801bbfc:	f7fc fba6 	bl	801834c <pbuf_free>
  if (err != ERR_OK) {
 801bc00:	b985      	cbnz	r5, 801bc24 <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801bc02:	7ea3      	ldrb	r3, [r4, #26]
 801bc04:	f023 0303 	bic.w	r3, r3, #3
 801bc08:	76a3      	strb	r3, [r4, #26]
}
 801bc0a:	4628      	mov	r0, r5
 801bc0c:	b004      	add	sp, #16
 801bc0e:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801bc10:	7ea3      	ldrb	r3, [r4, #26]
 801bc12:	f043 0303 	orr.w	r3, r3, #3
 801bc16:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 801bc18:	f06f 0501 	mvn.w	r5, #1
 801bc1c:	e7f5      	b.n	801bc0a <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 801bc1e:	f06f 0503 	mvn.w	r5, #3
 801bc22:	e7ea      	b.n	801bbfa <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801bc24:	7ea3      	ldrb	r3, [r4, #26]
 801bc26:	f043 0303 	orr.w	r3, r3, #3
 801bc2a:	76a3      	strb	r3, [r4, #26]
 801bc2c:	e7ed      	b.n	801bc0a <tcp_send_empty_ack+0x4e>
	...

0801bc30 <tcp_output>:
{
 801bc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc34:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801bc36:	7d03      	ldrb	r3, [r0, #20]
 801bc38:	2b01      	cmp	r3, #1
 801bc3a:	d01e      	beq.n	801bc7a <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 801bc3c:	4ba5      	ldr	r3, [pc, #660]	; (801bed4 <tcp_output+0x2a4>)
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	429d      	cmp	r5, r3
 801bc42:	f000 813e 	beq.w	801bec2 <tcp_output+0x292>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801bc46:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 801bc4a:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 801bc4e:	42bb      	cmp	r3, r7
 801bc50:	d200      	bcs.n	801bc54 <tcp_output+0x24>
 801bc52:	461f      	mov	r7, r3
  seg = pcb->unsent;
 801bc54:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 801bc56:	7eab      	ldrb	r3, [r5, #26]
 801bc58:	f013 0f02 	tst.w	r3, #2
 801bc5c:	d00a      	beq.n	801bc74 <tcp_output+0x44>
 801bc5e:	b1a4      	cbz	r4, 801bc8a <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801bc60:	68e3      	ldr	r3, [r4, #12]
 801bc62:	6858      	ldr	r0, [r3, #4]
 801bc64:	f7fa fa42 	bl	80160ec <lwip_htonl>
 801bc68:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801bc6a:	1ac3      	subs	r3, r0, r3
 801bc6c:	8920      	ldrh	r0, [r4, #8]
 801bc6e:	4403      	add	r3, r0
     (seg == NULL ||
 801bc70:	429f      	cmp	r7, r3
 801bc72:	d30a      	bcc.n	801bc8a <tcp_output+0x5a>
  useg = pcb->unacked;
 801bc74:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 801bc76:	b976      	cbnz	r6, 801bc96 <tcp_output+0x66>
 801bc78:	e010      	b.n	801bc9c <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801bc7a:	4b97      	ldr	r3, [pc, #604]	; (801bed8 <tcp_output+0x2a8>)
 801bc7c:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801bc80:	4996      	ldr	r1, [pc, #600]	; (801bedc <tcp_output+0x2ac>)
 801bc82:	4897      	ldr	r0, [pc, #604]	; (801bee0 <tcp_output+0x2b0>)
 801bc84:	f002 f92f 	bl	801dee6 <iprintf>
 801bc88:	e7d8      	b.n	801bc3c <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 801bc8a:	4628      	mov	r0, r5
 801bc8c:	f7ff ff96 	bl	801bbbc <tcp_send_empty_ack>
 801bc90:	4603      	mov	r3, r0
 801bc92:	e03f      	b.n	801bd14 <tcp_output+0xe4>
    for (; useg->next != NULL; useg = useg->next);
 801bc94:	461e      	mov	r6, r3
 801bc96:	6833      	ldr	r3, [r6, #0]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d1fb      	bne.n	801bc94 <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bc9c:	1d28      	adds	r0, r5, #4
 801bc9e:	f7fa ffcb 	bl	8016c38 <ip4_route>
  if (netif == NULL) {
 801bca2:	4680      	mov	r8, r0
 801bca4:	2800      	cmp	r0, #0
 801bca6:	f000 810e 	beq.w	801bec6 <tcp_output+0x296>
  if (ip_addr_isany(&pcb->local_ip)) {
 801bcaa:	b10d      	cbz	r5, 801bcb0 <tcp_output+0x80>
 801bcac:	682b      	ldr	r3, [r5, #0]
 801bcae:	b933      	cbnz	r3, 801bcbe <tcp_output+0x8e>
    if (local_ip == NULL) {
 801bcb0:	f118 0f04 	cmn.w	r8, #4
 801bcb4:	f000 810a 	beq.w	801becc <tcp_output+0x29c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801bcb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bcbc:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 801bcbe:	2c00      	cmp	r4, #0
 801bcc0:	f000 80a2 	beq.w	801be08 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801bcc4:	68e3      	ldr	r3, [r4, #12]
 801bcc6:	6858      	ldr	r0, [r3, #4]
 801bcc8:	f7fa fa10 	bl	80160ec <lwip_htonl>
 801bccc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801bcce:	1ac3      	subs	r3, r0, r3
 801bcd0:	8920      	ldrh	r0, [r4, #8]
 801bcd2:	4403      	add	r3, r0
  if (seg != NULL &&
 801bcd4:	429f      	cmp	r7, r3
 801bcd6:	f080 8097 	bcs.w	801be08 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801bcda:	2f00      	cmp	r7, #0
 801bcdc:	f000 8094 	beq.w	801be08 <tcp_output+0x1d8>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801bce0:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 801bce4:	429f      	cmp	r7, r3
 801bce6:	f040 808f 	bne.w	801be08 <tcp_output+0x1d8>
 801bcea:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	f040 808b 	bne.w	801be08 <tcp_output+0x1d8>
    if (pcb->persist_backoff == 0) {
 801bcf2:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 801bcf6:	b923      	cbnz	r3, 801bd02 <tcp_output+0xd2>
      pcb->persist_cnt = 0;
 801bcf8:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 801bcfc:	2301      	movs	r3, #1
 801bcfe:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  if (pcb->unsent == NULL) {
 801bd02:	6eab      	ldr	r3, [r5, #104]	; 0x68
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	f000 80d9 	beq.w	801bebc <tcp_output+0x28c>
  pcb->flags &= ~TF_NAGLEMEMERR;
 801bd0a:	7eab      	ldrb	r3, [r5, #26]
 801bd0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bd10:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 801bd12:	2300      	movs	r3, #0
}
 801bd14:	4618      	mov	r0, r3
 801bd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("RST not expected here!",
 801bd1a:	4b6f      	ldr	r3, [pc, #444]	; (801bed8 <tcp_output+0x2a8>)
 801bd1c:	f240 4246 	movw	r2, #1094	; 0x446
 801bd20:	4970      	ldr	r1, [pc, #448]	; (801bee4 <tcp_output+0x2b4>)
 801bd22:	486f      	ldr	r0, [pc, #444]	; (801bee0 <tcp_output+0x2b0>)
 801bd24:	f002 f8df 	bl	801dee6 <iprintf>
 801bd28:	e084      	b.n	801be34 <tcp_output+0x204>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801bd2a:	891a      	ldrh	r2, [r3, #8]
 801bd2c:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801bd2e:	429a      	cmp	r2, r3
 801bd30:	f080 8091 	bcs.w	801be56 <tcp_output+0x226>
 801bd34:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	f000 808e 	beq.w	801be5a <tcp_output+0x22a>
 801bd3e:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 801bd42:	2b0a      	cmp	r3, #10
 801bd44:	f240 808b 	bls.w	801be5e <tcp_output+0x22e>
 801bd48:	2301      	movs	r3, #1
 801bd4a:	e002      	b.n	801bd52 <tcp_output+0x122>
 801bd4c:	2301      	movs	r3, #1
 801bd4e:	e000      	b.n	801bd52 <tcp_output+0x122>
 801bd50:	2301      	movs	r3, #1
 801bd52:	b91b      	cbnz	r3, 801bd5c <tcp_output+0x12c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801bd54:	7eab      	ldrb	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801bd56:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801bd5a:	d0d2      	beq.n	801bd02 <tcp_output+0xd2>
    if (pcb->state != SYN_SENT) {
 801bd5c:	7d2b      	ldrb	r3, [r5, #20]
 801bd5e:	2b02      	cmp	r3, #2
 801bd60:	d00a      	beq.n	801bd78 <tcp_output+0x148>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801bd62:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 801bd66:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 801bd6a:	2010      	movs	r0, #16
 801bd6c:	f7fa f9bb 	bl	80160e6 <lwip_htons>
 801bd70:	ea49 0000 	orr.w	r0, r9, r0
 801bd74:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 801bd78:	4642      	mov	r2, r8
 801bd7a:	4629      	mov	r1, r5
 801bd7c:	4620      	mov	r0, r4
 801bd7e:	f7ff fb4b 	bl	801b418 <tcp_output_segment>
    if (err != ERR_OK) {
 801bd82:	4603      	mov	r3, r0
 801bd84:	2800      	cmp	r0, #0
 801bd86:	d16c      	bne.n	801be62 <tcp_output+0x232>
    pcb->unsent = seg->next;
 801bd88:	6823      	ldr	r3, [r4, #0]
 801bd8a:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 801bd8c:	7d2b      	ldrb	r3, [r5, #20]
 801bd8e:	2b02      	cmp	r3, #2
 801bd90:	d003      	beq.n	801bd9a <tcp_output+0x16a>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801bd92:	7eab      	ldrb	r3, [r5, #26]
 801bd94:	f023 0303 	bic.w	r3, r3, #3
 801bd98:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bd9a:	68e3      	ldr	r3, [r4, #12]
 801bd9c:	6858      	ldr	r0, [r3, #4]
 801bd9e:	f7fa f9a5 	bl	80160ec <lwip_htonl>
 801bda2:	4681      	mov	r9, r0
 801bda4:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 801bda8:	68e3      	ldr	r3, [r4, #12]
 801bdaa:	8998      	ldrh	r0, [r3, #12]
 801bdac:	f7fa f99b 	bl	80160e6 <lwip_htons>
 801bdb0:	f010 0f03 	tst.w	r0, #3
 801bdb4:	d05a      	beq.n	801be6c <tcp_output+0x23c>
 801bdb6:	2001      	movs	r0, #1
 801bdb8:	4450      	add	r0, sl
 801bdba:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bdbc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801bdbe:	1a1b      	subs	r3, r3, r0
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	db55      	blt.n	801be70 <tcp_output+0x240>
    if (TCP_TCPLEN(seg) > 0) {
 801bdc4:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 801bdc8:	68e3      	ldr	r3, [r4, #12]
 801bdca:	8998      	ldrh	r0, [r3, #12]
 801bdcc:	f7fa f98b 	bl	80160e6 <lwip_htons>
 801bdd0:	f010 0f03 	tst.w	r0, #3
 801bdd4:	d04e      	beq.n	801be74 <tcp_output+0x244>
 801bdd6:	2301      	movs	r3, #1
 801bdd8:	eb13 0f09 	cmn.w	r3, r9
 801bddc:	d06a      	beq.n	801beb4 <tcp_output+0x284>
      seg->next = NULL;
 801bdde:	2300      	movs	r3, #0
 801bde0:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 801bde2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d047      	beq.n	801be78 <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801bde8:	68e3      	ldr	r3, [r4, #12]
 801bdea:	6858      	ldr	r0, [r3, #4]
 801bdec:	f7fa f97e 	bl	80160ec <lwip_htonl>
 801bdf0:	4681      	mov	r9, r0
 801bdf2:	68f3      	ldr	r3, [r6, #12]
 801bdf4:	6858      	ldr	r0, [r3, #4]
 801bdf6:	f7fa f979 	bl	80160ec <lwip_htonl>
 801bdfa:	eba9 0000 	sub.w	r0, r9, r0
 801bdfe:	2800      	cmp	r0, #0
 801be00:	db3d      	blt.n	801be7e <tcp_output+0x24e>
          useg->next = seg;
 801be02:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 801be04:	4626      	mov	r6, r4
    seg = pcb->unsent;
 801be06:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 801be08:	2c00      	cmp	r4, #0
 801be0a:	f43f af7a 	beq.w	801bd02 <tcp_output+0xd2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801be0e:	68e3      	ldr	r3, [r4, #12]
 801be10:	6858      	ldr	r0, [r3, #4]
 801be12:	f7fa f96b 	bl	80160ec <lwip_htonl>
 801be16:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801be18:	1ac0      	subs	r0, r0, r3
 801be1a:	8923      	ldrh	r3, [r4, #8]
 801be1c:	4418      	add	r0, r3
  while (seg != NULL &&
 801be1e:	4287      	cmp	r7, r0
 801be20:	f4ff af6f 	bcc.w	801bd02 <tcp_output+0xd2>
    LWIP_ASSERT("RST not expected here!",
 801be24:	68e3      	ldr	r3, [r4, #12]
 801be26:	8998      	ldrh	r0, [r3, #12]
 801be28:	f7fa f95d 	bl	80160e6 <lwip_htons>
 801be2c:	f010 0f04 	tst.w	r0, #4
 801be30:	f47f af73 	bne.w	801bd1a <tcp_output+0xea>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801be34:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801be36:	2b00      	cmp	r3, #0
 801be38:	d088      	beq.n	801bd4c <tcp_output+0x11c>
 801be3a:	7eab      	ldrb	r3, [r5, #26]
 801be3c:	f013 0f44 	tst.w	r3, #68	; 0x44
 801be40:	d186      	bne.n	801bd50 <tcp_output+0x120>
 801be42:	6eab      	ldr	r3, [r5, #104]	; 0x68
 801be44:	2b00      	cmp	r3, #0
 801be46:	f43f af75 	beq.w	801bd34 <tcp_output+0x104>
 801be4a:	681a      	ldr	r2, [r3, #0]
 801be4c:	2a00      	cmp	r2, #0
 801be4e:	f43f af6c 	beq.w	801bd2a <tcp_output+0xfa>
 801be52:	2301      	movs	r3, #1
 801be54:	e77d      	b.n	801bd52 <tcp_output+0x122>
 801be56:	2301      	movs	r3, #1
 801be58:	e77b      	b.n	801bd52 <tcp_output+0x122>
 801be5a:	2301      	movs	r3, #1
 801be5c:	e779      	b.n	801bd52 <tcp_output+0x122>
 801be5e:	2300      	movs	r3, #0
 801be60:	e777      	b.n	801bd52 <tcp_output+0x122>
      pcb->flags |= TF_NAGLEMEMERR;
 801be62:	7eaa      	ldrb	r2, [r5, #26]
 801be64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801be68:	76aa      	strb	r2, [r5, #26]
      return err;
 801be6a:	e753      	b.n	801bd14 <tcp_output+0xe4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801be6c:	2000      	movs	r0, #0
 801be6e:	e7a3      	b.n	801bdb8 <tcp_output+0x188>
      pcb->snd_nxt = snd_nxt;
 801be70:	64e8      	str	r0, [r5, #76]	; 0x4c
 801be72:	e7a7      	b.n	801bdc4 <tcp_output+0x194>
    if (TCP_TCPLEN(seg) > 0) {
 801be74:	2300      	movs	r3, #0
 801be76:	e7af      	b.n	801bdd8 <tcp_output+0x1a8>
        pcb->unacked = seg;
 801be78:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 801be7a:	4626      	mov	r6, r4
 801be7c:	e7c3      	b.n	801be06 <tcp_output+0x1d6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801be7e:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 801be82:	e001      	b.n	801be88 <tcp_output+0x258>
              cur_seg = &((*cur_seg)->next );
 801be84:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 801be88:	f8da 3000 	ldr.w	r3, [sl]
 801be8c:	b163      	cbz	r3, 801bea8 <tcp_output+0x278>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801be8e:	68db      	ldr	r3, [r3, #12]
 801be90:	6858      	ldr	r0, [r3, #4]
 801be92:	f7fa f92b 	bl	80160ec <lwip_htonl>
 801be96:	4681      	mov	r9, r0
 801be98:	68e3      	ldr	r3, [r4, #12]
 801be9a:	6858      	ldr	r0, [r3, #4]
 801be9c:	f7fa f926 	bl	80160ec <lwip_htonl>
 801bea0:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801bea4:	2800      	cmp	r0, #0
 801bea6:	dbed      	blt.n	801be84 <tcp_output+0x254>
          seg->next = (*cur_seg);
 801bea8:	f8da 3000 	ldr.w	r3, [sl]
 801beac:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 801beae:	f8ca 4000 	str.w	r4, [sl]
 801beb2:	e7a8      	b.n	801be06 <tcp_output+0x1d6>
      tcp_seg_free(seg);
 801beb4:	4620      	mov	r0, r4
 801beb6:	f7fc ff2d 	bl	8018d14 <tcp_seg_free>
 801beba:	e7a4      	b.n	801be06 <tcp_output+0x1d6>
    pcb->unsent_oversize = 0;
 801bebc:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 801bec0:	e723      	b.n	801bd0a <tcp_output+0xda>
    return ERR_OK;
 801bec2:	2300      	movs	r3, #0
 801bec4:	e726      	b.n	801bd14 <tcp_output+0xe4>
    return ERR_RTE;
 801bec6:	f06f 0303 	mvn.w	r3, #3
 801beca:	e723      	b.n	801bd14 <tcp_output+0xe4>
      return ERR_RTE;
 801becc:	f06f 0303 	mvn.w	r3, #3
 801bed0:	e720      	b.n	801bd14 <tcp_output+0xe4>
 801bed2:	bf00      	nop
 801bed4:	20008afc 	.word	0x20008afc
 801bed8:	08022a04 	.word	0x08022a04
 801bedc:	080227a4 	.word	0x080227a4
 801bee0:	0801e950 	.word	0x0801e950
 801bee4:	080227cc 	.word	0x080227cc

0801bee8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801bee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801beec:	b085      	sub	sp, #20
 801beee:	4680      	mov	r8, r0
 801bef0:	460f      	mov	r7, r1
 801bef2:	4691      	mov	r9, r2
 801bef4:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801bef6:	2200      	movs	r2, #0
 801bef8:	2114      	movs	r1, #20
 801befa:	2001      	movs	r0, #1
 801befc:	f7fc fa92 	bl	8018424 <pbuf_alloc>
  if (p == NULL) {
 801bf00:	b3a8      	cbz	r0, 801bf6e <tcp_rst+0x86>
 801bf02:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bf04:	8943      	ldrh	r3, [r0, #10]
 801bf06:	2b13      	cmp	r3, #19
 801bf08:	d934      	bls.n	801bf74 <tcp_rst+0x8c>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801bf0a:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 801bf0c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801bf10:	f7fa f8e9 	bl	80160e6 <lwip_htons>
 801bf14:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801bf16:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801bf1a:	f7fa f8e4 	bl	80160e6 <lwip_htons>
 801bf1e:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801bf20:	4640      	mov	r0, r8
 801bf22:	f7fa f8e3 	bl	80160ec <lwip_htonl>
 801bf26:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801bf28:	4638      	mov	r0, r7
 801bf2a:	f7fa f8df 	bl	80160ec <lwip_htonl>
 801bf2e:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801bf30:	f245 0014 	movw	r0, #20500	; 0x5014
 801bf34:	f7fa f8d7 	bl	80160e6 <lwip_htons>
 801bf38:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	2210      	movs	r2, #16
 801bf3e:	73a2      	strb	r2, [r4, #14]
 801bf40:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 801bf42:	7423      	strb	r3, [r4, #16]
 801bf44:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 801bf46:	74a3      	strb	r3, [r4, #18]
 801bf48:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801bf4a:	4630      	mov	r0, r6
 801bf4c:	f7fa fe74 	bl	8016c38 <ip4_route>
  if (netif != NULL) {
 801bf50:	b150      	cbz	r0, 801bf68 <tcp_rst+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801bf52:	9002      	str	r0, [sp, #8]
 801bf54:	2306      	movs	r3, #6
 801bf56:	9301      	str	r3, [sp, #4]
 801bf58:	2300      	movs	r3, #0
 801bf5a:	9300      	str	r3, [sp, #0]
 801bf5c:	23ff      	movs	r3, #255	; 0xff
 801bf5e:	4632      	mov	r2, r6
 801bf60:	4649      	mov	r1, r9
 801bf62:	4628      	mov	r0, r5
 801bf64:	f7fb f80e 	bl	8016f84 <ip4_output_if>
  }
  pbuf_free(p);
 801bf68:	4628      	mov	r0, r5
 801bf6a:	f7fc f9ef 	bl	801834c <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bf6e:	b005      	add	sp, #20
 801bf70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bf74:	4b03      	ldr	r3, [pc, #12]	; (801bf84 <tcp_rst+0x9c>)
 801bf76:	f240 524d 	movw	r2, #1357	; 0x54d
 801bf7a:	4903      	ldr	r1, [pc, #12]	; (801bf88 <tcp_rst+0xa0>)
 801bf7c:	4803      	ldr	r0, [pc, #12]	; (801bf8c <tcp_rst+0xa4>)
 801bf7e:	f001 ffb2 	bl	801dee6 <iprintf>
 801bf82:	e7c2      	b.n	801bf0a <tcp_rst+0x22>
 801bf84:	08022a04 	.word	0x08022a04
 801bf88:	080227e4 	.word	0x080227e4
 801bf8c:	0801e950 	.word	0x0801e950

0801bf90 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801bf90:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 801bf92:	b10a      	cbz	r2, 801bf98 <tcp_rexmit_rto+0x8>
{
 801bf94:	b508      	push	{r3, lr}
 801bf96:	e001      	b.n	801bf9c <tcp_rexmit_rto+0xc>
 801bf98:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801bf9a:	461a      	mov	r2, r3
 801bf9c:	6813      	ldr	r3, [r2, #0]
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d1fb      	bne.n	801bf9a <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801bfa2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801bfa4:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801bfa6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801bfa8:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801bfaa:	2300      	movs	r3, #0
 801bfac:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801bfae:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801bfb2:	2bff      	cmp	r3, #255	; 0xff
 801bfb4:	d002      	beq.n	801bfbc <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 801bfb6:	3301      	adds	r3, #1
 801bfb8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bfbc:	2300      	movs	r3, #0
 801bfbe:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801bfc0:	f7ff fe36 	bl	801bc30 <tcp_output>
 801bfc4:	bd08      	pop	{r3, pc}

0801bfc6 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801bfc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801bfc8:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 801bfca:	b316      	cbz	r6, 801c012 <tcp_rexmit+0x4c>
 801bfcc:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 801bfce:	6833      	ldr	r3, [r6, #0]
 801bfd0:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801bfd2:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 801bfd6:	e000      	b.n	801bfda <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801bfd8:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801bfda:	682b      	ldr	r3, [r5, #0]
 801bfdc:	b15b      	cbz	r3, 801bff6 <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bfde:	68db      	ldr	r3, [r3, #12]
 801bfe0:	6858      	ldr	r0, [r3, #4]
 801bfe2:	f7fa f883 	bl	80160ec <lwip_htonl>
 801bfe6:	4604      	mov	r4, r0
 801bfe8:	68f3      	ldr	r3, [r6, #12]
 801bfea:	6858      	ldr	r0, [r3, #4]
 801bfec:	f7fa f87e 	bl	80160ec <lwip_htonl>
 801bff0:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 801bff2:	2800      	cmp	r0, #0
 801bff4:	dbf0      	blt.n	801bfd8 <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 801bff6:	682b      	ldr	r3, [r5, #0]
 801bff8:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801bffa:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bffc:	6833      	ldr	r3, [r6, #0]
 801bffe:	b14b      	cbz	r3, 801c014 <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801c000:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801c004:	2bff      	cmp	r3, #255	; 0xff
 801c006:	d002      	beq.n	801c00e <tcp_rexmit+0x48>
    ++pcb->nrtx;
 801c008:	3301      	adds	r3, #1
 801c00a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801c00e:	2300      	movs	r3, #0
 801c010:	637b      	str	r3, [r7, #52]	; 0x34
 801c012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801c014:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801c018:	e7f2      	b.n	801c000 <tcp_rexmit+0x3a>

0801c01a <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801c01a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801c01c:	b11b      	cbz	r3, 801c026 <tcp_rexmit_fast+0xc>
 801c01e:	7e83      	ldrb	r3, [r0, #26]
 801c020:	f013 0f04 	tst.w	r3, #4
 801c024:	d000      	beq.n	801c028 <tcp_rexmit_fast+0xe>
 801c026:	4770      	bx	lr
{
 801c028:	b510      	push	{r4, lr}
 801c02a:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801c02c:	f7ff ffcb 	bl	801bfc6 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c030:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801c034:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 801c038:	4293      	cmp	r3, r2
 801c03a:	d218      	bcs.n	801c06e <tcp_rexmit_fast+0x54>
 801c03c:	085a      	lsrs	r2, r3, #1
 801c03e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801c042:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c044:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801c048:	d202      	bcs.n	801c050 <tcp_rexmit_fast+0x36>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801c04a:	005a      	lsls	r2, r3, #1
 801c04c:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801c050:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801c054:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c058:	fa12 f383 	uxtah	r3, r2, r3
 801c05c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801c060:	7ea3      	ldrb	r3, [r4, #26]
 801c062:	f043 0304 	orr.w	r3, r3, #4
 801c066:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801c068:	2300      	movs	r3, #0
 801c06a:	8623      	strh	r3, [r4, #48]	; 0x30
 801c06c:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c06e:	0852      	lsrs	r2, r2, #1
 801c070:	e7e5      	b.n	801c03e <tcp_rexmit_fast+0x24>

0801c072 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c072:	b570      	push	{r4, r5, r6, lr}
 801c074:	b084      	sub	sp, #16
 801c076:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c078:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c07a:	3801      	subs	r0, #1
 801c07c:	f7fa f836 	bl	80160ec <lwip_htonl>
 801c080:	4603      	mov	r3, r0
 801c082:	2200      	movs	r2, #0
 801c084:	4611      	mov	r1, r2
 801c086:	4620      	mov	r0, r4
 801c088:	f7ff f97c 	bl	801b384 <tcp_output_alloc_header>
  if (p == NULL) {
 801c08c:	b1d0      	cbz	r0, 801c0c4 <tcp_keepalive+0x52>
 801c08e:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801c090:	1d26      	adds	r6, r4, #4
 801c092:	4630      	mov	r0, r6
 801c094:	f7fa fdd0 	bl	8016c38 <ip4_route>
  if (netif == NULL) {
 801c098:	b188      	cbz	r0, 801c0be <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801c09a:	7aa3      	ldrb	r3, [r4, #10]
 801c09c:	9002      	str	r0, [sp, #8]
 801c09e:	2206      	movs	r2, #6
 801c0a0:	9201      	str	r2, [sp, #4]
 801c0a2:	2200      	movs	r2, #0
 801c0a4:	9200      	str	r2, [sp, #0]
 801c0a6:	4632      	mov	r2, r6
 801c0a8:	4621      	mov	r1, r4
 801c0aa:	4628      	mov	r0, r5
 801c0ac:	f7fa ff6a 	bl	8016f84 <ip4_output_if>
 801c0b0:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801c0b2:	4628      	mov	r0, r5
 801c0b4:	f7fc f94a 	bl	801834c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801c0b8:	4620      	mov	r0, r4
 801c0ba:	b004      	add	sp, #16
 801c0bc:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 801c0be:	f06f 0403 	mvn.w	r4, #3
 801c0c2:	e7f6      	b.n	801c0b2 <tcp_keepalive+0x40>
    return ERR_MEM;
 801c0c4:	f04f 34ff 	mov.w	r4, #4294967295
 801c0c8:	e7f6      	b.n	801c0b8 <tcp_keepalive+0x46>

0801c0ca <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0ce:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801c0d0:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 801c0d2:	b175      	cbz	r5, 801c0f2 <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 801c0d4:	2d00      	cmp	r5, #0
 801c0d6:	d05d      	beq.n	801c194 <tcp_zero_window_probe+0xca>
 801c0d8:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c0da:	68eb      	ldr	r3, [r5, #12]
 801c0dc:	8998      	ldrh	r0, [r3, #12]
 801c0de:	f7fa f802 	bl	80160e6 <lwip_htons>
 801c0e2:	f010 0f01 	tst.w	r0, #1
 801c0e6:	d006      	beq.n	801c0f6 <tcp_zero_window_probe+0x2c>
 801c0e8:	892b      	ldrh	r3, [r5, #8]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d040      	beq.n	801c170 <tcp_zero_window_probe+0xa6>
 801c0ee:	2200      	movs	r2, #0
 801c0f0:	e002      	b.n	801c0f8 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 801c0f2:	6e85      	ldr	r5, [r0, #104]	; 0x68
 801c0f4:	e7ee      	b.n	801c0d4 <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c0f6:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c0f8:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801c0fc:	68eb      	ldr	r3, [r5, #12]
 801c0fe:	685b      	ldr	r3, [r3, #4]
 801c100:	f082 0201 	eor.w	r2, r2, #1
 801c104:	2100      	movs	r1, #0
 801c106:	4620      	mov	r0, r4
 801c108:	f7ff f93c 	bl	801b384 <tcp_output_alloc_header>
  if (p == NULL) {
 801c10c:	4607      	mov	r7, r0
 801c10e:	2800      	cmp	r0, #0
 801c110:	d042      	beq.n	801c198 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c112:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 801c116:	b36e      	cbz	r6, 801c174 <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c118:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 801c11c:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 801c120:	b2b6      	uxth	r6, r6
 801c122:	2011      	movs	r0, #17
 801c124:	f7f9 ffdf 	bl	80160e6 <lwip_htons>
 801c128:	4330      	orrs	r0, r6
 801c12a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c12e:	68eb      	ldr	r3, [r5, #12]
 801c130:	6858      	ldr	r0, [r3, #4]
 801c132:	f7f9 ffdb 	bl	80160ec <lwip_htonl>
 801c136:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c138:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c13a:	1a1b      	subs	r3, r3, r0
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	db24      	blt.n	801c18a <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801c140:	1d25      	adds	r5, r4, #4
 801c142:	4628      	mov	r0, r5
 801c144:	f7fa fd78 	bl	8016c38 <ip4_route>
  if (netif == NULL) {
 801c148:	b308      	cbz	r0, 801c18e <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801c14a:	7aa3      	ldrb	r3, [r4, #10]
 801c14c:	9002      	str	r0, [sp, #8]
 801c14e:	2206      	movs	r2, #6
 801c150:	9201      	str	r2, [sp, #4]
 801c152:	2200      	movs	r2, #0
 801c154:	9200      	str	r2, [sp, #0]
 801c156:	462a      	mov	r2, r5
 801c158:	4621      	mov	r1, r4
 801c15a:	4638      	mov	r0, r7
 801c15c:	f7fa ff12 	bl	8016f84 <ip4_output_if>
 801c160:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801c162:	4638      	mov	r0, r7
 801c164:	f7fc f8f2 	bl	801834c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801c168:	4620      	mov	r0, r4
 801c16a:	b004      	add	sp, #16
 801c16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c170:	2201      	movs	r2, #1
 801c172:	e7c1      	b.n	801c0f8 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c174:	6868      	ldr	r0, [r5, #4]
 801c176:	8903      	ldrh	r3, [r0, #8]
 801c178:	892a      	ldrh	r2, [r5, #8]
 801c17a:	1a9b      	subs	r3, r3, r2
 801c17c:	b29b      	uxth	r3, r3
 801c17e:	2201      	movs	r2, #1
 801c180:	f108 0114 	add.w	r1, r8, #20
 801c184:	f7fc fba4 	bl	80188d0 <pbuf_copy_partial>
 801c188:	e7d1      	b.n	801c12e <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 801c18a:	64e0      	str	r0, [r4, #76]	; 0x4c
 801c18c:	e7d8      	b.n	801c140 <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 801c18e:	f06f 0403 	mvn.w	r4, #3
 801c192:	e7e6      	b.n	801c162 <tcp_zero_window_probe+0x98>
    return ERR_OK;
 801c194:	2400      	movs	r4, #0
 801c196:	e7e7      	b.n	801c168 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 801c198:	f04f 34ff 	mov.w	r4, #4294967295
 801c19c:	e7e4      	b.n	801c168 <tcp_zero_window_probe+0x9e>
	...

0801c1a0 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 801c1a0:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 801c1a2:	4b0a      	ldr	r3, [pc, #40]	; (801c1cc <sys_timeouts_sleeptime+0x2c>)
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	b15b      	cbz	r3, 801c1c0 <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 801c1a8:	f001 f94a 	bl	801d440 <sys_now>
 801c1ac:	4b08      	ldr	r3, [pc, #32]	; (801c1d0 <sys_timeouts_sleeptime+0x30>)
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 801c1b2:	4b06      	ldr	r3, [pc, #24]	; (801c1cc <sys_timeouts_sleeptime+0x2c>)
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	685b      	ldr	r3, [r3, #4]
 801c1b8:	4298      	cmp	r0, r3
 801c1ba:	d804      	bhi.n	801c1c6 <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 801c1bc:	1a18      	subs	r0, r3, r0
 801c1be:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 801c1c0:	f04f 30ff 	mov.w	r0, #4294967295
 801c1c4:	bd08      	pop	{r3, pc}
    return 0;
 801c1c6:	2000      	movs	r0, #0
  }
}
 801c1c8:	bd08      	pop	{r3, pc}
 801c1ca:	bf00      	nop
 801c1cc:	200040fc 	.word	0x200040fc
 801c1d0:	20004104 	.word	0x20004104

0801c1d4 <sys_check_timeouts>:
{
 801c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (next_timeout) {
 801c1d6:	4b18      	ldr	r3, [pc, #96]	; (801c238 <sys_check_timeouts+0x64>)
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	b363      	cbz	r3, 801c236 <sys_check_timeouts+0x62>
    now = sys_now();
 801c1dc:	f001 f930 	bl	801d440 <sys_now>
    diff = now - timeouts_last_time;
 801c1e0:	4b16      	ldr	r3, [pc, #88]	; (801c23c <sys_check_timeouts+0x68>)
 801c1e2:	681c      	ldr	r4, [r3, #0]
 801c1e4:	1b04      	subs	r4, r0, r4
 801c1e6:	e005      	b.n	801c1f4 <sys_check_timeouts+0x20>
      had_one = 0;
 801c1e8:	2300      	movs	r3, #0
 801c1ea:	e002      	b.n	801c1f2 <sys_check_timeouts+0x1e>
 801c1ec:	2300      	movs	r3, #0
 801c1ee:	e000      	b.n	801c1f2 <sys_check_timeouts+0x1e>
        had_one = 1;
 801c1f0:	2301      	movs	r3, #1
    } while (had_one);
 801c1f2:	b303      	cbz	r3, 801c236 <sys_check_timeouts+0x62>
      tmptimeout = next_timeout;
 801c1f4:	4b10      	ldr	r3, [pc, #64]	; (801c238 <sys_check_timeouts+0x64>)
 801c1f6:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801c1f8:	2900      	cmp	r1, #0
 801c1fa:	d0f5      	beq.n	801c1e8 <sys_check_timeouts+0x14>
 801c1fc:	684b      	ldr	r3, [r1, #4]
 801c1fe:	429c      	cmp	r4, r3
 801c200:	d3f4      	bcc.n	801c1ec <sys_check_timeouts+0x18>
        timeouts_last_time += tmptimeout->time;
 801c202:	480e      	ldr	r0, [pc, #56]	; (801c23c <sys_check_timeouts+0x68>)
 801c204:	6802      	ldr	r2, [r0, #0]
 801c206:	441a      	add	r2, r3
 801c208:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 801c20a:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 801c20c:	680a      	ldr	r2, [r1, #0]
 801c20e:	4b0a      	ldr	r3, [pc, #40]	; (801c238 <sys_check_timeouts+0x64>)
 801c210:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 801c212:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 801c214:	68cf      	ldr	r7, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c216:	200a      	movs	r0, #10
 801c218:	f7fb fec2 	bl	8017fa0 <memp_free>
        if (handler != NULL) {
 801c21c:	2d00      	cmp	r5, #0
 801c21e:	d0e7      	beq.n	801c1f0 <sys_check_timeouts+0x1c>
          LOCK_TCPIP_CORE();
 801c220:	4e07      	ldr	r6, [pc, #28]	; (801c240 <sys_check_timeouts+0x6c>)
 801c222:	4630      	mov	r0, r6
 801c224:	f000 fbd9 	bl	801c9da <sys_mutex_lock>
          handler(arg);
 801c228:	4638      	mov	r0, r7
 801c22a:	47a8      	blx	r5
          UNLOCK_TCPIP_CORE();
 801c22c:	4630      	mov	r0, r6
 801c22e:	f000 fbdb 	bl	801c9e8 <sys_mutex_unlock>
        had_one = 1;
 801c232:	2301      	movs	r3, #1
 801c234:	e7dd      	b.n	801c1f2 <sys_check_timeouts+0x1e>
 801c236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c238:	200040fc 	.word	0x200040fc
 801c23c:	20004104 	.word	0x20004104
 801c240:	200044bc 	.word	0x200044bc

0801c244 <sys_timeout>:
{
 801c244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c248:	4605      	mov	r5, r0
 801c24a:	4688      	mov	r8, r1
 801c24c:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c24e:	200a      	movs	r0, #10
 801c250:	f7fb fe8c 	bl	8017f6c <memp_malloc>
  if (timeout == NULL) {
 801c254:	b308      	cbz	r0, 801c29a <sys_timeout+0x56>
 801c256:	4604      	mov	r4, r0
  now = sys_now();
 801c258:	f001 f8f2 	bl	801d440 <sys_now>
  if (next_timeout == NULL) {
 801c25c:	4b23      	ldr	r3, [pc, #140]	; (801c2ec <sys_timeout+0xa8>)
 801c25e:	681e      	ldr	r6, [r3, #0]
 801c260:	b31e      	cbz	r6, 801c2aa <sys_timeout+0x66>
    diff = now - timeouts_last_time;
 801c262:	4b23      	ldr	r3, [pc, #140]	; (801c2f0 <sys_timeout+0xac>)
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 801c268:	2300      	movs	r3, #0
 801c26a:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 801c26c:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 801c270:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 801c272:	4428      	add	r0, r5
 801c274:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 801c276:	b1e6      	cbz	r6, 801c2b2 <sys_timeout+0x6e>
  if (next_timeout->time > msecs) {
 801c278:	6873      	ldr	r3, [r6, #4]
 801c27a:	429d      	cmp	r5, r3
 801c27c:	d31d      	bcc.n	801c2ba <sys_timeout+0x76>
 801c27e:	4632      	mov	r2, r6
    for (t = next_timeout; t != NULL; t = t->next) {
 801c280:	2a00      	cmp	r2, #0
 801c282:	d030      	beq.n	801c2e6 <sys_timeout+0xa2>
      timeout->time -= t->time;
 801c284:	6851      	ldr	r1, [r2, #4]
 801c286:	6863      	ldr	r3, [r4, #4]
 801c288:	1a5b      	subs	r3, r3, r1
 801c28a:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801c28c:	6811      	ldr	r1, [r2, #0]
 801c28e:	b1d9      	cbz	r1, 801c2c8 <sys_timeout+0x84>
 801c290:	6848      	ldr	r0, [r1, #4]
 801c292:	4283      	cmp	r3, r0
 801c294:	d318      	bcc.n	801c2c8 <sys_timeout+0x84>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c296:	460a      	mov	r2, r1
 801c298:	e7f2      	b.n	801c280 <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c29a:	4b16      	ldr	r3, [pc, #88]	; (801c2f4 <sys_timeout+0xb0>)
 801c29c:	22d4      	movs	r2, #212	; 0xd4
 801c29e:	4916      	ldr	r1, [pc, #88]	; (801c2f8 <sys_timeout+0xb4>)
 801c2a0:	4816      	ldr	r0, [pc, #88]	; (801c2fc <sys_timeout+0xb8>)
 801c2a2:	f001 fe20 	bl	801dee6 <iprintf>
 801c2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 801c2aa:	4b11      	ldr	r3, [pc, #68]	; (801c2f0 <sys_timeout+0xac>)
 801c2ac:	6018      	str	r0, [r3, #0]
    diff = 0;
 801c2ae:	2000      	movs	r0, #0
 801c2b0:	e7da      	b.n	801c268 <sys_timeout+0x24>
    next_timeout = timeout;
 801c2b2:	4b0e      	ldr	r3, [pc, #56]	; (801c2ec <sys_timeout+0xa8>)
 801c2b4:	601c      	str	r4, [r3, #0]
    return;
 801c2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 801c2ba:	1b5d      	subs	r5, r3, r5
 801c2bc:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 801c2be:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 801c2c0:	4b0a      	ldr	r3, [pc, #40]	; (801c2ec <sys_timeout+0xa8>)
 801c2c2:	601c      	str	r4, [r3, #0]
 801c2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (t->next != NULL) {
 801c2c8:	b139      	cbz	r1, 801c2da <sys_timeout+0x96>
          t->next->time -= timeout->time;
 801c2ca:	6848      	ldr	r0, [r1, #4]
 801c2cc:	1ac3      	subs	r3, r0, r3
 801c2ce:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 801c2d0:	6813      	ldr	r3, [r2, #0]
 801c2d2:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 801c2d4:	6014      	str	r4, [r2, #0]
        break;
 801c2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if (timeout->time > msecs) {
 801c2da:	429d      	cmp	r5, r3
 801c2dc:	d2f8      	bcs.n	801c2d0 <sys_timeout+0x8c>
          timeout->time = msecs + next_timeout->time;
 801c2de:	6873      	ldr	r3, [r6, #4]
 801c2e0:	441d      	add	r5, r3
 801c2e2:	6065      	str	r5, [r4, #4]
 801c2e4:	e7f4      	b.n	801c2d0 <sys_timeout+0x8c>
 801c2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2ea:	bf00      	nop
 801c2ec:	200040fc 	.word	0x200040fc
 801c2f0:	20004104 	.word	0x20004104
 801c2f4:	08022ac0 	.word	0x08022ac0
 801c2f8:	08022af4 	.word	0x08022af4
 801c2fc:	0801e950 	.word	0x0801e950

0801c300 <tcp_timer_needed>:
{
 801c300:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c302:	4b0a      	ldr	r3, [pc, #40]	; (801c32c <tcp_timer_needed+0x2c>)
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	b953      	cbnz	r3, 801c31e <tcp_timer_needed+0x1e>
 801c308:	4b09      	ldr	r3, [pc, #36]	; (801c330 <tcp_timer_needed+0x30>)
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	b143      	cbz	r3, 801c320 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 801c30e:	2201      	movs	r2, #1
 801c310:	4b06      	ldr	r3, [pc, #24]	; (801c32c <tcp_timer_needed+0x2c>)
 801c312:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c314:	2200      	movs	r2, #0
 801c316:	4907      	ldr	r1, [pc, #28]	; (801c334 <tcp_timer_needed+0x34>)
 801c318:	20fa      	movs	r0, #250	; 0xfa
 801c31a:	f7ff ff93 	bl	801c244 <sys_timeout>
 801c31e:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c320:	4b05      	ldr	r3, [pc, #20]	; (801c338 <tcp_timer_needed+0x38>)
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	2b00      	cmp	r3, #0
 801c326:	d1f2      	bne.n	801c30e <tcp_timer_needed+0xe>
 801c328:	e7f9      	b.n	801c31e <tcp_timer_needed+0x1e>
 801c32a:	bf00      	nop
 801c32c:	20004100 	.word	0x20004100
 801c330:	20008ae8 	.word	0x20008ae8
 801c334:	0801c33d 	.word	0x0801c33d
 801c338:	20008af8 	.word	0x20008af8

0801c33c <tcpip_tcp_timer>:
{
 801c33c:	b508      	push	{r3, lr}
  tcp_tmr();
 801c33e:	f7fd f93b 	bl	80195b8 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c342:	4b08      	ldr	r3, [pc, #32]	; (801c364 <tcpip_tcp_timer+0x28>)
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	b12b      	cbz	r3, 801c354 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c348:	2200      	movs	r2, #0
 801c34a:	4907      	ldr	r1, [pc, #28]	; (801c368 <tcpip_tcp_timer+0x2c>)
 801c34c:	20fa      	movs	r0, #250	; 0xfa
 801c34e:	f7ff ff79 	bl	801c244 <sys_timeout>
 801c352:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c354:	4b05      	ldr	r3, [pc, #20]	; (801c36c <tcpip_tcp_timer+0x30>)
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d1f5      	bne.n	801c348 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801c35c:	2200      	movs	r2, #0
 801c35e:	4b04      	ldr	r3, [pc, #16]	; (801c370 <tcpip_tcp_timer+0x34>)
 801c360:	601a      	str	r2, [r3, #0]
 801c362:	bd08      	pop	{r3, pc}
 801c364:	20008ae8 	.word	0x20008ae8
 801c368:	0801c33d 	.word	0x0801c33d
 801c36c:	20008af8 	.word	0x20008af8
 801c370:	20004100 	.word	0x20004100

0801c374 <sys_timeouts_init>:
{
 801c374:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c376:	2401      	movs	r4, #1
 801c378:	e008      	b.n	801c38c <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801c37a:	4b08      	ldr	r3, [pc, #32]	; (801c39c <sys_timeouts_init+0x28>)
 801c37c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 801c380:	4907      	ldr	r1, [pc, #28]	; (801c3a0 <sys_timeouts_init+0x2c>)
 801c382:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 801c386:	f7ff ff5d 	bl	801c244 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c38a:	3401      	adds	r4, #1
 801c38c:	2c02      	cmp	r4, #2
 801c38e:	d9f4      	bls.n	801c37a <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 801c390:	f001 f856 	bl	801d440 <sys_now>
 801c394:	4b03      	ldr	r3, [pc, #12]	; (801c3a4 <sys_timeouts_init+0x30>)
 801c396:	6018      	str	r0, [r3, #0]
 801c398:	bd10      	pop	{r4, pc}
 801c39a:	bf00      	nop
 801c39c:	08022aa8 	.word	0x08022aa8
 801c3a0:	0801c3a9 	.word	0x0801c3a9
 801c3a4:	20004104 	.word	0x20004104

0801c3a8 <cyclic_timer>:
{
 801c3a8:	b510      	push	{r4, lr}
 801c3aa:	4604      	mov	r4, r0
  cyclic->handler();
 801c3ac:	6843      	ldr	r3, [r0, #4]
 801c3ae:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801c3b0:	4622      	mov	r2, r4
 801c3b2:	4902      	ldr	r1, [pc, #8]	; (801c3bc <cyclic_timer+0x14>)
 801c3b4:	6820      	ldr	r0, [r4, #0]
 801c3b6:	f7ff ff45 	bl	801c244 <sys_timeout>
 801c3ba:	bd10      	pop	{r4, pc}
 801c3bc:	0801c3a9 	.word	0x0801c3a9

0801c3c0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801c3c0:	b538      	push	{r3, r4, r5, lr}
 801c3c2:	4604      	mov	r4, r0
 801c3c4:	460d      	mov	r5, r1
 801c3c6:	e007      	b.n	801c3d8 <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 801c3c8:	2200      	movs	r2, #0
 801c3ca:	4629      	mov	r1, r5
 801c3cc:	4620      	mov	r0, r4
 801c3ce:	f000 fa54 	bl	801c87a <sys_arch_mbox_fetch>
    return;
 801c3d2:	bd38      	pop	{r3, r4, r5, pc}

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801c3d4:	f7ff fefe 	bl	801c1d4 <sys_check_timeouts>
  if (!next_timeout) {
 801c3d8:	4b08      	ldr	r3, [pc, #32]	; (801c3fc <sys_timeouts_mbox_fetch+0x3c>)
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d0f3      	beq.n	801c3c8 <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 801c3e0:	f7ff fede 	bl	801c1a0 <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801c3e4:	4602      	mov	r2, r0
 801c3e6:	2800      	cmp	r0, #0
 801c3e8:	d0f4      	beq.n	801c3d4 <sys_timeouts_mbox_fetch+0x14>
 801c3ea:	4629      	mov	r1, r5
 801c3ec:	4620      	mov	r0, r4
 801c3ee:	f000 fa44 	bl	801c87a <sys_arch_mbox_fetch>
 801c3f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 801c3f6:	d0ed      	beq.n	801c3d4 <sys_timeouts_mbox_fetch+0x14>
 801c3f8:	bd38      	pop	{r3, r4, r5, pc}
 801c3fa:	bf00      	nop
 801c3fc:	200040fc 	.word	0x200040fc

0801c400 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 801c400:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c402:	4a10      	ldr	r2, [pc, #64]	; (801c444 <udp_new_port+0x44>)
 801c404:	8813      	ldrh	r3, [r2, #0]
 801c406:	1c59      	adds	r1, r3, #1
 801c408:	8011      	strh	r1, [r2, #0]
 801c40a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c40e:	4293      	cmp	r3, r2
 801c410:	d009      	beq.n	801c426 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c412:	4b0d      	ldr	r3, [pc, #52]	; (801c448 <udp_new_port+0x48>)
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	b193      	cbz	r3, 801c43e <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 801c418:	8a59      	ldrh	r1, [r3, #18]
 801c41a:	4a0a      	ldr	r2, [pc, #40]	; (801c444 <udp_new_port+0x44>)
 801c41c:	8812      	ldrh	r2, [r2, #0]
 801c41e:	4291      	cmp	r1, r2
 801c420:	d006      	beq.n	801c430 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c422:	68db      	ldr	r3, [r3, #12]
 801c424:	e7f7      	b.n	801c416 <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c426:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c42a:	4b06      	ldr	r3, [pc, #24]	; (801c444 <udp_new_port+0x44>)
 801c42c:	801a      	strh	r2, [r3, #0]
 801c42e:	e7f0      	b.n	801c412 <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c430:	3001      	adds	r0, #1
 801c432:	b280      	uxth	r0, r0
 801c434:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 801c438:	d3e3      	bcc.n	801c402 <udp_new_port+0x2>
        return 0;
 801c43a:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 801c43c:	4770      	bx	lr
  return udp_port;
 801c43e:	4b01      	ldr	r3, [pc, #4]	; (801c444 <udp_new_port+0x44>)
 801c440:	8818      	ldrh	r0, [r3, #0]
 801c442:	4770      	bx	lr
 801c444:	2000000e 	.word	0x2000000e
 801c448:	20008b00 	.word	0x20008b00

0801c44c <udp_input_local_match>:
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c44c:	b16a      	cbz	r2, 801c46a <udp_input_local_match+0x1e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c44e:	b1a8      	cbz	r0, 801c47c <udp_input_local_match+0x30>
 801c450:	6803      	ldr	r3, [r0, #0]
 801c452:	b1ab      	cbz	r3, 801c480 <udp_input_local_match+0x34>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c454:	4a10      	ldr	r2, [pc, #64]	; (801c498 <udp_input_local_match+0x4c>)
 801c456:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c458:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c45c:	d012      	beq.n	801c484 <udp_input_local_match+0x38>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c45e:	6889      	ldr	r1, [r1, #8]
 801c460:	4053      	eors	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c462:	420b      	tst	r3, r1
 801c464:	d010      	beq.n	801c488 <udp_input_local_match+0x3c>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      return 1;
    }
  }

  return 0;
 801c466:	2000      	movs	r0, #0
 801c468:	4770      	bx	lr
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c46a:	b178      	cbz	r0, 801c48c <udp_input_local_match+0x40>
 801c46c:	6803      	ldr	r3, [r0, #0]
 801c46e:	b17b      	cbz	r3, 801c490 <udp_input_local_match+0x44>
 801c470:	4a09      	ldr	r2, [pc, #36]	; (801c498 <udp_input_local_match+0x4c>)
 801c472:	6952      	ldr	r2, [r2, #20]
 801c474:	4293      	cmp	r3, r2
 801c476:	d00d      	beq.n	801c494 <udp_input_local_match+0x48>
  return 0;
 801c478:	2000      	movs	r0, #0
 801c47a:	4770      	bx	lr
          return 1;
 801c47c:	2001      	movs	r0, #1
 801c47e:	4770      	bx	lr
 801c480:	2001      	movs	r0, #1
 801c482:	4770      	bx	lr
 801c484:	2001      	movs	r0, #1
 801c486:	4770      	bx	lr
 801c488:	2001      	movs	r0, #1
 801c48a:	4770      	bx	lr
      return 1;
 801c48c:	2001      	movs	r0, #1
 801c48e:	4770      	bx	lr
 801c490:	2001      	movs	r0, #1
 801c492:	4770      	bx	lr
 801c494:	2001      	movs	r0, #1
}
 801c496:	4770      	bx	lr
 801c498:	200044c0 	.word	0x200044c0

0801c49c <udp_init>:
{
 801c49c:	4770      	bx	lr
	...

0801c4a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4a4:	b085      	sub	sp, #20
 801c4a6:	4681      	mov	r9, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c4a8:	8943      	ldrh	r3, [r0, #10]
 801c4aa:	2b07      	cmp	r3, #7
 801c4ac:	d917      	bls.n	801c4de <udp_input+0x3e>
 801c4ae:	460f      	mov	r7, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c4b0:	6844      	ldr	r4, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c4b2:	4b46      	ldr	r3, [pc, #280]	; (801c5cc <udp_input+0x12c>)
 801c4b4:	6819      	ldr	r1, [r3, #0]
 801c4b6:	6958      	ldr	r0, [r3, #20]
 801c4b8:	f7fa fd79 	bl	8016fae <ip4_addr_isbroadcast_u32>
 801c4bc:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c4be:	8820      	ldrh	r0, [r4, #0]
 801c4c0:	f7f9 fe11 	bl	80160e6 <lwip_htons>
 801c4c4:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 801c4c6:	8860      	ldrh	r0, [r4, #2]
 801c4c8:	f7f9 fe0d 	bl	80160e6 <lwip_htons>
 801c4cc:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c4ce:	4b40      	ldr	r3, [pc, #256]	; (801c5d0 <udp_input+0x130>)
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	9303      	str	r3, [sp, #12]
 801c4d4:	461c      	mov	r4, r3
  uncon_pcb = NULL;
 801c4d6:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 801c4da:	465d      	mov	r5, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c4dc:	e009      	b.n	801c4f2 <udp_input+0x52>
    pbuf_free(p);
 801c4de:	f7fb ff35 	bl	801834c <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c4e2:	b005      	add	sp, #20
 801c4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((pcb->remote_port == src) &&
 801c4e8:	8aa3      	ldrh	r3, [r4, #20]
 801c4ea:	459a      	cmp	sl, r3
 801c4ec:	d015      	beq.n	801c51a <udp_input+0x7a>
    prev = pcb;
 801c4ee:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c4f0:	68e4      	ldr	r4, [r4, #12]
 801c4f2:	b1fc      	cbz	r4, 801c534 <udp_input+0x94>
    if ((pcb->local_port == dest) &&
 801c4f4:	8a63      	ldrh	r3, [r4, #18]
 801c4f6:	429e      	cmp	r6, r3
 801c4f8:	d1f9      	bne.n	801c4ee <udp_input+0x4e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c4fa:	4642      	mov	r2, r8
 801c4fc:	4639      	mov	r1, r7
 801c4fe:	4620      	mov	r0, r4
 801c500:	f7ff ffa4 	bl	801c44c <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 801c504:	2800      	cmp	r0, #0
 801c506:	d0f2      	beq.n	801c4ee <udp_input+0x4e>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801c508:	7c23      	ldrb	r3, [r4, #16]
 801c50a:	f013 0f04 	tst.w	r3, #4
 801c50e:	d1eb      	bne.n	801c4e8 <udp_input+0x48>
 801c510:	f1bb 0f00 	cmp.w	fp, #0
 801c514:	d1e8      	bne.n	801c4e8 <udp_input+0x48>
        uncon_pcb = pcb;
 801c516:	46a3      	mov	fp, r4
 801c518:	e7e6      	b.n	801c4e8 <udp_input+0x48>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c51a:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 801c51c:	b11b      	cbz	r3, 801c526 <udp_input+0x86>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c51e:	4a2b      	ldr	r2, [pc, #172]	; (801c5cc <udp_input+0x12c>)
 801c520:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c522:	4293      	cmp	r3, r2
 801c524:	d1e3      	bne.n	801c4ee <udp_input+0x4e>
        if (prev != NULL) {
 801c526:	b12d      	cbz	r5, 801c534 <udp_input+0x94>
          prev->next = pcb->next;
 801c528:	68e3      	ldr	r3, [r4, #12]
 801c52a:	60eb      	str	r3, [r5, #12]
          pcb->next = udp_pcbs;
 801c52c:	9b03      	ldr	r3, [sp, #12]
 801c52e:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 801c530:	4b27      	ldr	r3, [pc, #156]	; (801c5d0 <udp_input+0x130>)
 801c532:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 801c534:	b1a4      	cbz	r4, 801c560 <udp_input+0xc0>
  if (pcb != NULL) {
 801c536:	b1ac      	cbz	r4, 801c564 <udp_input+0xc4>
    for_us = 1;
 801c538:	2301      	movs	r3, #1
  if (for_us) {
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d041      	beq.n	801c5c2 <udp_input+0x122>
    if (pbuf_header(p, -UDP_HLEN)) {
 801c53e:	f06f 0107 	mvn.w	r1, #7
 801c542:	4648      	mov	r0, r9
 801c544:	f7fb fef8 	bl	8018338 <pbuf_header>
 801c548:	b9a0      	cbnz	r0, 801c574 <udp_input+0xd4>
    if (pcb != NULL) {
 801c54a:	b314      	cbz	r4, 801c592 <udp_input+0xf2>
      if (pcb->recv != NULL) {
 801c54c:	69a5      	ldr	r5, [r4, #24]
 801c54e:	b1e5      	cbz	r5, 801c58a <udp_input+0xea>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c550:	69e0      	ldr	r0, [r4, #28]
 801c552:	f8cd a000 	str.w	sl, [sp]
 801c556:	4b1f      	ldr	r3, [pc, #124]	; (801c5d4 <udp_input+0x134>)
 801c558:	464a      	mov	r2, r9
 801c55a:	4621      	mov	r1, r4
 801c55c:	47a8      	blx	r5
 801c55e:	e7c0      	b.n	801c4e2 <udp_input+0x42>
    pcb = uncon_pcb;
 801c560:	465c      	mov	r4, fp
 801c562:	e7e8      	b.n	801c536 <udp_input+0x96>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	4a19      	ldr	r2, [pc, #100]	; (801c5cc <udp_input+0x12c>)
 801c568:	6952      	ldr	r2, [r2, #20]
 801c56a:	4293      	cmp	r3, r2
 801c56c:	bf14      	ite	ne
 801c56e:	2300      	movne	r3, #0
 801c570:	2301      	moveq	r3, #1
 801c572:	e7e2      	b.n	801c53a <udp_input+0x9a>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801c574:	4b18      	ldr	r3, [pc, #96]	; (801c5d8 <udp_input+0x138>)
 801c576:	f240 1255 	movw	r2, #341	; 0x155
 801c57a:	4918      	ldr	r1, [pc, #96]	; (801c5dc <udp_input+0x13c>)
 801c57c:	4818      	ldr	r0, [pc, #96]	; (801c5e0 <udp_input+0x140>)
 801c57e:	f001 fcb2 	bl	801dee6 <iprintf>
      pbuf_free(p);
 801c582:	4648      	mov	r0, r9
 801c584:	f7fb fee2 	bl	801834c <pbuf_free>
      goto end;
 801c588:	e7ab      	b.n	801c4e2 <udp_input+0x42>
        pbuf_free(p);
 801c58a:	4648      	mov	r0, r9
 801c58c:	f7fb fede 	bl	801834c <pbuf_free>
        goto end;
 801c590:	e7a7      	b.n	801c4e2 <udp_input+0x42>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c592:	f1b8 0f00 	cmp.w	r8, #0
 801c596:	d110      	bne.n	801c5ba <udp_input+0x11a>
 801c598:	4b0c      	ldr	r3, [pc, #48]	; (801c5cc <udp_input+0x12c>)
 801c59a:	695b      	ldr	r3, [r3, #20]
 801c59c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c5a0:	2be0      	cmp	r3, #224	; 0xe0
 801c5a2:	d00a      	beq.n	801c5ba <udp_input+0x11a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c5a4:	4b09      	ldr	r3, [pc, #36]	; (801c5cc <udp_input+0x12c>)
 801c5a6:	8999      	ldrh	r1, [r3, #12]
 801c5a8:	3108      	adds	r1, #8
 801c5aa:	b209      	sxth	r1, r1
 801c5ac:	4648      	mov	r0, r9
 801c5ae:	f7fb fec8 	bl	8018342 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c5b2:	2103      	movs	r1, #3
 801c5b4:	4648      	mov	r0, r9
 801c5b6:	f7fa fb33 	bl	8016c20 <icmp_dest_unreach>
      pbuf_free(p);
 801c5ba:	4648      	mov	r0, r9
 801c5bc:	f7fb fec6 	bl	801834c <pbuf_free>
 801c5c0:	e78f      	b.n	801c4e2 <udp_input+0x42>
    pbuf_free(p);
 801c5c2:	4648      	mov	r0, r9
 801c5c4:	f7fb fec2 	bl	801834c <pbuf_free>
  return;
 801c5c8:	e78b      	b.n	801c4e2 <udp_input+0x42>
 801c5ca:	bf00      	nop
 801c5cc:	200044c0 	.word	0x200044c0
 801c5d0:	20008b00 	.word	0x20008b00
 801c5d4:	200044d0 	.word	0x200044d0
 801c5d8:	08022b34 	.word	0x08022b34
 801c5dc:	08022b64 	.word	0x08022b64
 801c5e0:	0801e950 	.word	0x0801e950

0801c5e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c5e4:	b570      	push	{r4, r5, r6, lr}
 801c5e6:	4604      	mov	r4, r0
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c5e8:	460d      	mov	r5, r1
 801c5ea:	b159      	cbz	r1, 801c604 <udp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801c5ec:	2c00      	cmp	r4, #0
 801c5ee:	d02c      	beq.n	801c64a <udp_bind+0x66>
 801c5f0:	2d00      	cmp	r5, #0
 801c5f2:	d02d      	beq.n	801c650 <udp_bind+0x6c>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c5f4:	4b1a      	ldr	r3, [pc, #104]	; (801c660 <udp_bind+0x7c>)
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	4619      	mov	r1, r3
 801c5fa:	b129      	cbz	r1, 801c608 <udp_bind+0x24>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c5fc:	42a1      	cmp	r1, r4
 801c5fe:	d013      	beq.n	801c628 <udp_bind+0x44>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c600:	68c9      	ldr	r1, [r1, #12]
 801c602:	e7fa      	b.n	801c5fa <udp_bind+0x16>
    ipaddr = IP4_ADDR_ANY;
 801c604:	4d17      	ldr	r5, [pc, #92]	; (801c664 <udp_bind+0x80>)
 801c606:	e7f1      	b.n	801c5ec <udp_bind+0x8>
  rebind = 0;
 801c608:	2600      	movs	r6, #0
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 801c60a:	b982      	cbnz	r2, 801c62e <udp_bind+0x4a>
    port = udp_new_port();
 801c60c:	f7ff fef8 	bl	801c400 <udp_new_port>
    if (port == 0) {
 801c610:	4602      	mov	r2, r0
 801c612:	b300      	cbz	r0, 801c656 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c614:	682b      	ldr	r3, [r5, #0]
 801c616:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 801c618:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c61a:	b9fe      	cbnz	r6, 801c65c <udp_bind+0x78>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c61c:	4b10      	ldr	r3, [pc, #64]	; (801c660 <udp_bind+0x7c>)
 801c61e:	681a      	ldr	r2, [r3, #0]
 801c620:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 801c622:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c624:	2000      	movs	r0, #0
 801c626:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 801c628:	2601      	movs	r6, #1
 801c62a:	e7ee      	b.n	801c60a <udp_bind+0x26>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c62c:	68db      	ldr	r3, [r3, #12]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d0f0      	beq.n	801c614 <udp_bind+0x30>
      if (pcb != ipcb) {
 801c632:	42a3      	cmp	r3, r4
 801c634:	d0fa      	beq.n	801c62c <udp_bind+0x48>
          if ((ipcb->local_port == port) &&
 801c636:	8a59      	ldrh	r1, [r3, #18]
 801c638:	428a      	cmp	r2, r1
 801c63a:	d1f7      	bne.n	801c62c <udp_bind+0x48>
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 801c63c:	6818      	ldr	r0, [r3, #0]
 801c63e:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 801c640:	4288      	cmp	r0, r1
 801c642:	d1f3      	bne.n	801c62c <udp_bind+0x48>
            return ERR_USE;
 801c644:	f06f 0007 	mvn.w	r0, #7
 801c648:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 801c64a:	f06f 0005 	mvn.w	r0, #5
 801c64e:	bd70      	pop	{r4, r5, r6, pc}
 801c650:	f06f 0005 	mvn.w	r0, #5
 801c654:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_USE;
 801c656:	f06f 0007 	mvn.w	r0, #7
 801c65a:	bd70      	pop	{r4, r5, r6, pc}
  return ERR_OK;
 801c65c:	2000      	movs	r0, #0
}
 801c65e:	bd70      	pop	{r4, r5, r6, pc}
 801c660:	20008b00 	.word	0x20008b00
 801c664:	08021640 	.word	0x08021640

0801c668 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c668:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 801c66a:	61c2      	str	r2, [r0, #28]
 801c66c:	4770      	bx	lr
	...

0801c670 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c670:	b508      	push	{r3, lr}
 801c672:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c674:	4b0b      	ldr	r3, [pc, #44]	; (801c6a4 <udp_remove+0x34>)
 801c676:	681a      	ldr	r2, [r3, #0]
 801c678:	4282      	cmp	r2, r0
 801c67a:	d109      	bne.n	801c690 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c67c:	68d2      	ldr	r2, [r2, #12]
 801c67e:	601a      	str	r2, [r3, #0]
 801c680:	e001      	b.n	801c686 <udp_remove+0x16>
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c682:	68cb      	ldr	r3, [r1, #12]
 801c684:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c686:	2000      	movs	r0, #0
 801c688:	f7fb fc8a 	bl	8017fa0 <memp_free>
 801c68c:	bd08      	pop	{r3, pc}
 801c68e:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c690:	2a00      	cmp	r2, #0
 801c692:	d0f8      	beq.n	801c686 <udp_remove+0x16>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c694:	68d3      	ldr	r3, [r2, #12]
 801c696:	2b00      	cmp	r3, #0
 801c698:	d0f9      	beq.n	801c68e <udp_remove+0x1e>
 801c69a:	4299      	cmp	r1, r3
 801c69c:	d0f1      	beq.n	801c682 <udp_remove+0x12>
 801c69e:	461a      	mov	r2, r3
 801c6a0:	e7f6      	b.n	801c690 <udp_remove+0x20>
 801c6a2:	bf00      	nop
 801c6a4:	20008b00 	.word	0x20008b00

0801c6a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c6a8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c6aa:	2000      	movs	r0, #0
 801c6ac:	f7fb fc5e 	bl	8017f6c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c6b0:	4604      	mov	r4, r0
 801c6b2:	b128      	cbz	r0, 801c6c0 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c6b4:	2220      	movs	r2, #32
 801c6b6:	2100      	movs	r1, #0
 801c6b8:	f001 ffa8 	bl	801e60c <memset>
    pcb->ttl = UDP_TTL;
 801c6bc:	23ff      	movs	r3, #255	; 0xff
 801c6be:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801c6c0:	4620      	mov	r0, r4
 801c6c2:	bd10      	pop	{r4, pc}

0801c6c4 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c6c4:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;
  pcb = udp_new();
 801c6c6:	f7ff ffef 	bl	801c6a8 <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 801c6ca:	bd08      	pop	{r3, pc}

0801c6cc <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c6cc:	b1a0      	cbz	r0, 801c6f8 <udp_netif_ip_addr_changed+0x2c>
{
 801c6ce:	b410      	push	{r4}
 801c6d0:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c6d2:	6803      	ldr	r3, [r0, #0]
 801c6d4:	b173      	cbz	r3, 801c6f4 <udp_netif_ip_addr_changed+0x28>
 801c6d6:	b169      	cbz	r1, 801c6f4 <udp_netif_ip_addr_changed+0x28>
 801c6d8:	680b      	ldr	r3, [r1, #0]
 801c6da:	b15b      	cbz	r3, 801c6f4 <udp_netif_ip_addr_changed+0x28>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c6dc:	4b07      	ldr	r3, [pc, #28]	; (801c6fc <udp_netif_ip_addr_changed+0x30>)
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	e000      	b.n	801c6e4 <udp_netif_ip_addr_changed+0x18>
 801c6e2:	68db      	ldr	r3, [r3, #12]
 801c6e4:	b133      	cbz	r3, 801c6f4 <udp_netif_ip_addr_changed+0x28>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c6e6:	6818      	ldr	r0, [r3, #0]
 801c6e8:	6822      	ldr	r2, [r4, #0]
 801c6ea:	4290      	cmp	r0, r2
 801c6ec:	d1f9      	bne.n	801c6e2 <udp_netif_ip_addr_changed+0x16>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c6ee:	680a      	ldr	r2, [r1, #0]
 801c6f0:	601a      	str	r2, [r3, #0]
 801c6f2:	e7f6      	b.n	801c6e2 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 801c6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c6f8:	4770      	bx	lr
 801c6fa:	bf00      	nop
 801c6fc:	20008b00 	.word	0x20008b00

0801c700 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c702:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801c704:	8945      	ldrh	r5, [r0, #10]
 801c706:	2d0e      	cmp	r5, #14
 801c708:	d916      	bls.n	801c738 <ethernet_input+0x38>
 801c70a:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c70c:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c70e:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c710:	7803      	ldrb	r3, [r0, #0]
 801c712:	f013 0f01 	tst.w	r3, #1
 801c716:	d00a      	beq.n	801c72e <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c718:	2b01      	cmp	r3, #1
 801c71a:	d012      	beq.n	801c742 <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c71c:	2206      	movs	r2, #6
 801c71e:	4921      	ldr	r1, [pc, #132]	; (801c7a4 <ethernet_input+0xa4>)
 801c720:	f001 ff5a 	bl	801e5d8 <memcmp>
 801c724:	b918      	cbnz	r0, 801c72e <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c726:	7b63      	ldrb	r3, [r4, #13]
 801c728:	f043 0308 	orr.w	r3, r3, #8
 801c72c:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801c72e:	2e08      	cmp	r6, #8
 801c730:	d012      	beq.n	801c758 <ethernet_input+0x58>
 801c732:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801c736:	d022      	beq.n	801c77e <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801c738:	4620      	mov	r0, r4
 801c73a:	f7fb fe07 	bl	801834c <pbuf_free>
  return ERR_OK;
}
 801c73e:	2000      	movs	r0, #0
 801c740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c742:	7843      	ldrb	r3, [r0, #1]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d1f2      	bne.n	801c72e <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c748:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c74a:	2b5e      	cmp	r3, #94	; 0x5e
 801c74c:	d1ef      	bne.n	801c72e <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 801c74e:	7b63      	ldrb	r3, [r4, #13]
 801c750:	f043 0310 	orr.w	r3, r3, #16
 801c754:	7363      	strb	r3, [r4, #13]
 801c756:	e7ea      	b.n	801c72e <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c75c:	f013 0f08 	tst.w	r3, #8
 801c760:	d0ea      	beq.n	801c738 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801c762:	2d0d      	cmp	r5, #13
 801c764:	dde8      	ble.n	801c738 <ethernet_input+0x38>
 801c766:	f06f 010d 	mvn.w	r1, #13
 801c76a:	4620      	mov	r0, r4
 801c76c:	f7fb fde4 	bl	8018338 <pbuf_header>
 801c770:	2800      	cmp	r0, #0
 801c772:	d1e1      	bne.n	801c738 <ethernet_input+0x38>
        ip4_input(p, netif);
 801c774:	4639      	mov	r1, r7
 801c776:	4620      	mov	r0, r4
 801c778:	f7fa faae 	bl	8016cd8 <ip4_input>
      break;
 801c77c:	e7df      	b.n	801c73e <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c77e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c782:	f013 0f08 	tst.w	r3, #8
 801c786:	d0d7      	beq.n	801c738 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801c788:	2d0d      	cmp	r5, #13
 801c78a:	ddd5      	ble.n	801c738 <ethernet_input+0x38>
 801c78c:	f06f 010d 	mvn.w	r1, #13
 801c790:	4620      	mov	r0, r4
 801c792:	f7fb fdd1 	bl	8018338 <pbuf_header>
 801c796:	2800      	cmp	r0, #0
 801c798:	d1ce      	bne.n	801c738 <ethernet_input+0x38>
        etharp_input(p, netif);
 801c79a:	4639      	mov	r1, r7
 801c79c:	4620      	mov	r0, r4
 801c79e:	f7f9 feb5 	bl	801650c <etharp_input>
      break;
 801c7a2:	e7cc      	b.n	801c73e <ethernet_input+0x3e>
 801c7a4:	08022b78 	.word	0x08022b78

0801c7a8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801c7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7ac:	4605      	mov	r5, r0
 801c7ae:	460c      	mov	r4, r1
 801c7b0:	4616      	mov	r6, r2
 801c7b2:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c7b4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801c7b8:	f7f9 fc95 	bl	80160e6 <lwip_htons>
 801c7bc:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801c7be:	210e      	movs	r1, #14
 801c7c0:	4620      	mov	r0, r4
 801c7c2:	f7fb fdb9 	bl	8018338 <pbuf_header>
 801c7c6:	b9e0      	cbnz	r0, 801c802 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801c7c8:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 801c7ca:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801c7ce:	683a      	ldr	r2, [r7, #0]
 801c7d0:	601a      	str	r2, [r3, #0]
 801c7d2:	88ba      	ldrh	r2, [r7, #4]
 801c7d4:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 801c7d6:	6832      	ldr	r2, [r6, #0]
 801c7d8:	f8c3 2006 	str.w	r2, [r3, #6]
 801c7dc:	88b2      	ldrh	r2, [r6, #4]
 801c7de:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c7e0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801c7e4:	2b06      	cmp	r3, #6
 801c7e6:	d006      	beq.n	801c7f6 <ethernet_output+0x4e>
 801c7e8:	4b08      	ldr	r3, [pc, #32]	; (801c80c <ethernet_output+0x64>)
 801c7ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801c7ee:	4908      	ldr	r1, [pc, #32]	; (801c810 <ethernet_output+0x68>)
 801c7f0:	4808      	ldr	r0, [pc, #32]	; (801c814 <ethernet_output+0x6c>)
 801c7f2:	f001 fb78 	bl	801dee6 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c7f6:	69ab      	ldr	r3, [r5, #24]
 801c7f8:	4621      	mov	r1, r4
 801c7fa:	4628      	mov	r0, r5
 801c7fc:	4798      	blx	r3
 801c7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c802:	f06f 0001 	mvn.w	r0, #1
}
 801c806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c80a:	bf00      	nop
 801c80c:	08022b80 	.word	0x08022b80
 801c810:	08022bb8 	.word	0x08022bb8
 801c814:	0801e950 	.word	0x0801e950

0801c818 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c818:	b510      	push	{r4, lr}
 801c81a:	b082      	sub	sp, #8
 801c81c:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 801c81e:	9100      	str	r1, [sp, #0]
 801c820:	2304      	movs	r3, #4
 801c822:	9301      	str	r3, [sp, #4]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c824:	2100      	movs	r1, #0
 801c826:	4668      	mov	r0, sp
 801c828:	f7f6 fad6 	bl	8012dd8 <osMessageCreate>
 801c82c:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801c82e:	b110      	cbz	r0, 801c836 <sys_mbox_new+0x1e>
  return ERR_MEM;
 
 return ERR_OK;
 801c830:	2000      	movs	r0, #0
}
 801c832:	b002      	add	sp, #8
 801c834:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 801c836:	f04f 30ff 	mov.w	r0, #4294967295
 801c83a:	e7fa      	b.n	801c832 <sys_mbox_new+0x1a>

0801c83c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c83c:	b510      	push	{r4, lr}
 801c83e:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 801c840:	6800      	ldr	r0, [r0, #0]
 801c842:	f7f6 fb55 	bl	8012ef0 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 801c846:	6820      	ldr	r0, [r4, #0]
 801c848:	f7f6 fb5f 	bl	8012f0a <osMessageDelete>
 801c84c:	bd10      	pop	{r4, pc}

0801c84e <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801c84e:	b538      	push	{r3, r4, r5, lr}
 801c850:	4605      	mov	r5, r0
 801c852:	460c      	mov	r4, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801c854:	f04f 32ff 	mov.w	r2, #4294967295
 801c858:	4621      	mov	r1, r4
 801c85a:	6828      	ldr	r0, [r5, #0]
 801c85c:	f7f6 fac4 	bl	8012de8 <osMessagePut>
 801c860:	2800      	cmp	r0, #0
 801c862:	d1f7      	bne.n	801c854 <sys_mbox_post+0x6>
}
 801c864:	bd38      	pop	{r3, r4, r5, pc}

0801c866 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c866:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c868:	2200      	movs	r2, #0
 801c86a:	6800      	ldr	r0, [r0, #0]
 801c86c:	f7f6 fabc 	bl	8012de8 <osMessagePut>
 801c870:	b900      	cbnz	r0, 801c874 <sys_mbox_trypost+0xe>
#endif /* SYS_STATS */
			
   }

   return result;
}
 801c872:	bd08      	pop	{r3, pc}
      result = ERR_MEM;
 801c874:	f04f 30ff 	mov.w	r0, #4294967295
 801c878:	e7fb      	b.n	801c872 <sys_mbox_trypost+0xc>

0801c87a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c87a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c87c:	b089      	sub	sp, #36	; 0x24
 801c87e:	4606      	mov	r6, r0
 801c880:	460f      	mov	r7, r1
 801c882:	4615      	mov	r5, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801c884:	f7f6 f985 	bl	8012b92 <osKernelSysTick>
 801c888:	4604      	mov	r4, r0
  
  if(timeout != 0)
 801c88a:	b185      	cbz	r5, 801c8ae <sys_arch_mbox_fetch+0x34>
  { 
    event = osMessageGet (*mbox, timeout);
 801c88c:	462a      	mov	r2, r5
 801c88e:	6831      	ldr	r1, [r6, #0]
 801c890:	a805      	add	r0, sp, #20
 801c892:	f7f6 fadd 	bl	8012e50 <osMessageGet>
    
    if(event.status == osEventMessage)
 801c896:	9b05      	ldr	r3, [sp, #20]
 801c898:	2b10      	cmp	r3, #16
 801c89a:	d002      	beq.n	801c8a2 <sys_arch_mbox_fetch+0x28>
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c89c:	f04f 30ff 	mov.w	r0, #4294967295
 801c8a0:	e015      	b.n	801c8ce <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 801c8a2:	9b06      	ldr	r3, [sp, #24]
 801c8a4:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 801c8a6:	f7f6 f974 	bl	8012b92 <osKernelSysTick>
 801c8aa:	1b00      	subs	r0, r0, r4
 801c8ac:	e00f      	b.n	801c8ce <sys_arch_mbox_fetch+0x54>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801c8ae:	f04f 32ff 	mov.w	r2, #4294967295
 801c8b2:	6831      	ldr	r1, [r6, #0]
 801c8b4:	4668      	mov	r0, sp
 801c8b6:	f7f6 facb 	bl	8012e50 <osMessageGet>
 801c8ba:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 801c8be:	ab08      	add	r3, sp, #32
 801c8c0:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c8c4:	9b06      	ldr	r3, [sp, #24]
 801c8c6:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 801c8c8:	f7f6 f963 	bl	8012b92 <osKernelSysTick>
 801c8cc:	1b00      	subs	r0, r0, r4
  }
}
 801c8ce:	b009      	add	sp, #36	; 0x24
 801c8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c8d2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c8d2:	b510      	push	{r4, lr}
 801c8d4:	b084      	sub	sp, #16
 801c8d6:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 801c8d8:	2200      	movs	r2, #0
 801c8da:	6801      	ldr	r1, [r0, #0]
 801c8dc:	a801      	add	r0, sp, #4
 801c8de:	f7f6 fab7 	bl	8012e50 <osMessageGet>
  
  if(event.status == osEventMessage)
 801c8e2:	9b01      	ldr	r3, [sp, #4]
 801c8e4:	2b10      	cmp	r3, #16
 801c8e6:	d003      	beq.n	801c8f0 <sys_arch_mbox_tryfetch+0x1e>
    *msg = (void *)event.value.v;
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c8e8:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 801c8ec:	b004      	add	sp, #16
 801c8ee:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 801c8f0:	9b02      	ldr	r3, [sp, #8]
 801c8f2:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 801c8f4:	2000      	movs	r0, #0
 801c8f6:	e7f9      	b.n	801c8ec <sys_arch_mbox_tryfetch+0x1a>

0801c8f8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
  if (*mbox == SYS_MBOX_NULL) 
 801c8f8:	6803      	ldr	r3, [r0, #0]
 801c8fa:	b10b      	cbz	r3, 801c900 <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 801c8fc:	2001      	movs	r0, #1
}                                             
 801c8fe:	4770      	bx	lr
    return 0;
 801c900:	2000      	movs	r0, #0
 801c902:	4770      	bx	lr

0801c904 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
  *mbox = SYS_MBOX_NULL;                      
 801c904:	2300      	movs	r3, #0
 801c906:	6003      	str	r3, [r0, #0]
 801c908:	4770      	bx	lr

0801c90a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c90a:	b530      	push	{r4, r5, lr}
 801c90c:	b083      	sub	sp, #12
 801c90e:	4604      	mov	r4, r0
 801c910:	460d      	mov	r5, r1
  osSemaphoreDef(SEM);
 801c912:	a802      	add	r0, sp, #8
 801c914:	2300      	movs	r3, #0
 801c916:	f840 3d04 	str.w	r3, [r0, #-4]!

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c91a:	2101      	movs	r1, #1
 801c91c:	f7f6 f9d4 	bl	8012cc8 <osSemaphoreCreate>
 801c920:	6020      	str	r0, [r4, #0]
	
  if(*sem == NULL)
 801c922:	b140      	cbz	r0, 801c936 <sys_sem_new+0x2c>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 801c924:	b115      	cbz	r5, 801c92c <sys_sem_new+0x22>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 801c926:	2000      	movs	r0, #0
}
 801c928:	b003      	add	sp, #12
 801c92a:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem,0);
 801c92c:	2100      	movs	r1, #0
 801c92e:	f7f6 f9df 	bl	8012cf0 <osSemaphoreWait>
	return ERR_OK;
 801c932:	2000      	movs	r0, #0
 801c934:	e7f8      	b.n	801c928 <sys_sem_new+0x1e>
		return ERR_MEM;
 801c936:	f04f 30ff 	mov.w	r0, #4294967295
 801c93a:	e7f5      	b.n	801c928 <sys_sem_new+0x1e>

0801c93c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c93c:	b570      	push	{r4, r5, r6, lr}
 801c93e:	4604      	mov	r4, r0
 801c940:	460e      	mov	r6, r1
  uint32_t starttime = osKernelSysTick();
 801c942:	f7f6 f926 	bl	8012b92 <osKernelSysTick>
 801c946:	4605      	mov	r5, r0
  
  if(timeout != 0)
 801c948:	b956      	cbnz	r6, 801c960 <sys_arch_sem_wait+0x24>
      return SYS_ARCH_TIMEOUT;
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c94a:	f04f 31ff 	mov.w	r1, #4294967295
 801c94e:	6820      	ldr	r0, [r4, #0]
 801c950:	f7f6 f9ce 	bl	8012cf0 <osSemaphoreWait>
 801c954:	2800      	cmp	r0, #0
 801c956:	d1f8      	bne.n	801c94a <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 801c958:	f7f6 f91b 	bl	8012b92 <osKernelSysTick>
 801c95c:	1b40      	subs	r0, r0, r5
 801c95e:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c960:	4631      	mov	r1, r6
 801c962:	6820      	ldr	r0, [r4, #0]
 801c964:	f7f6 f9c4 	bl	8012cf0 <osSemaphoreWait>
 801c968:	b110      	cbz	r0, 801c970 <sys_arch_sem_wait+0x34>
      return SYS_ARCH_TIMEOUT;
 801c96a:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 801c96e:	bd70      	pop	{r4, r5, r6, pc}
      return (osKernelSysTick() - starttime);
 801c970:	f7f6 f90f 	bl	8012b92 <osKernelSysTick>
 801c974:	1b40      	subs	r0, r0, r5
 801c976:	bd70      	pop	{r4, r5, r6, pc}

0801c978 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c978:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 801c97a:	6800      	ldr	r0, [r0, #0]
 801c97c:	f7f6 f9f2 	bl	8012d64 <osSemaphoreRelease>
 801c980:	bd08      	pop	{r3, pc}

0801c982 <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c982:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 801c984:	6800      	ldr	r0, [r0, #0]
 801c986:	f7f6 fa1b 	bl	8012dc0 <osSemaphoreDelete>
 801c98a:	bd08      	pop	{r3, pc}

0801c98c <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 801c98c:	6803      	ldr	r3, [r0, #0]
 801c98e:	b10b      	cbz	r3, 801c994 <sys_sem_valid+0x8>
    return 0;
  else
    return 1;                                       
 801c990:	2001      	movs	r0, #1
}
 801c992:	4770      	bx	lr
    return 0;
 801c994:	2000      	movs	r0, #0
 801c996:	4770      	bx	lr

0801c998 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 801c998:	2300      	movs	r3, #0
 801c99a:	6003      	str	r3, [r0, #0]
 801c99c:	4770      	bx	lr
	...

0801c9a0 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801c9a0:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c9a2:	4803      	ldr	r0, [pc, #12]	; (801c9b0 <sys_init+0x10>)
 801c9a4:	f7f6 f922 	bl	8012bec <osMutexCreate>
 801c9a8:	4b02      	ldr	r3, [pc, #8]	; (801c9b4 <sys_init+0x14>)
 801c9aa:	6018      	str	r0, [r3, #0]
 801c9ac:	bd08      	pop	{r3, pc}
 801c9ae:	bf00      	nop
 801c9b0:	08022bf4 	.word	0x08022bf4
 801c9b4:	20008b08 	.word	0x20008b08

0801c9b8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c9b8:	b510      	push	{r4, lr}
 801c9ba:	b082      	sub	sp, #8
 801c9bc:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 801c9be:	a802      	add	r0, sp, #8
 801c9c0:	2300      	movs	r3, #0
 801c9c2:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c9c6:	f7f6 f911 	bl	8012bec <osMutexCreate>
 801c9ca:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801c9cc:	b110      	cbz	r0, 801c9d4 <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c9ce:	2000      	movs	r0, #0
}
 801c9d0:	b002      	add	sp, #8
 801c9d2:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 801c9d4:	f04f 30ff 	mov.w	r0, #4294967295
 801c9d8:	e7fa      	b.n	801c9d0 <sys_mutex_new+0x18>

0801c9da <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c9da:	b508      	push	{r3, lr}
  osMutexWait (*mutex, osWaitForever);
 801c9dc:	f04f 31ff 	mov.w	r1, #4294967295
 801c9e0:	6800      	ldr	r0, [r0, #0]
 801c9e2:	f7f6 f909 	bl	8012bf8 <osMutexWait>
 801c9e6:	bd08      	pop	{r3, pc}

0801c9e8 <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c9e8:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 801c9ea:	6800      	ldr	r0, [r0, #0]
 801c9ec:	f7f6 f93e 	bl	8012c6c <osMutexRelease>
 801c9f0:	bd08      	pop	{r3, pc}

0801c9f2 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c9f2:	b500      	push	{lr}
 801c9f4:	b087      	sub	sp, #28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c9f6:	9001      	str	r0, [sp, #4]
 801c9f8:	9102      	str	r1, [sp, #8]
 801c9fa:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801c9fe:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ca02:	2100      	movs	r1, #0
 801ca04:	9104      	str	r1, [sp, #16]
 801ca06:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 801ca08:	4611      	mov	r1, r2
 801ca0a:	a801      	add	r0, sp, #4
 801ca0c:	f7f6 f8cb 	bl	8012ba6 <osThreadCreate>
}
 801ca10:	b007      	add	sp, #28
 801ca12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ca18 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ca18:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801ca1a:	f04f 31ff 	mov.w	r1, #4294967295
 801ca1e:	4b03      	ldr	r3, [pc, #12]	; (801ca2c <sys_arch_protect+0x14>)
 801ca20:	6818      	ldr	r0, [r3, #0]
 801ca22:	f7f6 f8e9 	bl	8012bf8 <osMutexWait>
  return (sys_prot_t)1;
}
 801ca26:	2001      	movs	r0, #1
 801ca28:	bd08      	pop	{r3, pc}
 801ca2a:	bf00      	nop
 801ca2c:	20008b08 	.word	0x20008b08

0801ca30 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ca30:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ca32:	4b02      	ldr	r3, [pc, #8]	; (801ca3c <sys_arch_unprotect+0xc>)
 801ca34:	6818      	ldr	r0, [r3, #0]
 801ca36:	f7f6 f919 	bl	8012c6c <osMutexRelease>
 801ca3a:	bd08      	pop	{r3, pc}
 801ca3c:	20008b08 	.word	0x20008b08

0801ca40 <is_exp_of_2>:

/*Checks if argument is power of 2 --------------------------------------- */

static uint8_t is_exp_of_2(uint32_t n)
{
    return ( n & (n - 1) ) == 0;
 801ca40:	1e43      	subs	r3, r0, #1
 801ca42:	4218      	tst	r0, r3
}
 801ca44:	bf0c      	ite	eq
 801ca46:	2001      	moveq	r0, #1
 801ca48:	2000      	movne	r0, #0
 801ca4a:	4770      	bx	lr

0801ca4c <CB_Init>:

/* Circular buffer initiation function ----------------------------------- */

cb_err CB_Init(circbuff *cb, uint32_t buf_size) {
 801ca4c:	b538      	push	{r3, r4, r5, lr}
 801ca4e:	4605      	mov	r5, r0
 801ca50:	460c      	mov	r4, r1
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 801ca52:	4608      	mov	r0, r1
 801ca54:	f7ff fff4 	bl	801ca40 <is_exp_of_2>
 801ca58:	b908      	cbnz	r0, 801ca5e <CB_Init+0x12>
 801ca5a:	2004      	movs	r0, #4
 801ca5c:	bd38      	pop	{r3, r4, r5, pc}
						/* return error if buffer size is not power of 2 */
	cb->size = buf_size;
 801ca5e:	606c      	str	r4, [r5, #4]
	cb->read_pos = 0;
 801ca60:	2300      	movs	r3, #0
 801ca62:	60ab      	str	r3, [r5, #8]
	cb->write_pos = 0;
 801ca64:	60eb      	str	r3, [r5, #12]
	cb->buf = (uint8_t*) pvPortMalloc(buf_size * sizeof(uint8_t));
 801ca66:	4620      	mov	r0, r4
 801ca68:	f7f6 fca2 	bl	80133b0 <pvPortMalloc>
 801ca6c:	6028      	str	r0, [r5, #0]
	if (cb->buf == NULL) {
 801ca6e:	b108      	cbz	r0, 801ca74 <CB_Init+0x28>
		return MEM_ERR;
	}
	return NO_ERR;
 801ca70:	2000      	movs	r0, #0
}
 801ca72:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ERR;
 801ca74:	2001      	movs	r0, #1
 801ca76:	bd38      	pop	{r3, r4, r5, pc}

0801ca78 <CB_Data_Length>:

/* Returns length of data in buffer ---------------------------------------*/

uint32_t CB_Data_Length(circbuff *cb) {
	return ((cb->write_pos - cb->read_pos) & (cb->size - 1));
 801ca78:	68c3      	ldr	r3, [r0, #12]
 801ca7a:	6882      	ldr	r2, [r0, #8]
 801ca7c:	1a9a      	subs	r2, r3, r2
 801ca7e:	6843      	ldr	r3, [r0, #4]
 801ca80:	3b01      	subs	r3, #1
}
 801ca82:	ea02 0003 	and.w	r0, r2, r3
 801ca86:	4770      	bx	lr

0801ca88 <CB_Write>:

/* Write new element to buffer --------------------------------------------*/

cb_err CB_Write(circbuff *cb, uint8_t item){
 801ca88:	b538      	push	{r3, r4, r5, lr}
 801ca8a:	4604      	mov	r4, r0
 801ca8c:	460d      	mov	r5, r1
	if (CB_Data_Length(cb) >= (cb->size - 1)){
 801ca8e:	f7ff fff3 	bl	801ca78 <CB_Data_Length>
 801ca92:	6863      	ldr	r3, [r4, #4]
 801ca94:	3b01      	subs	r3, #1
 801ca96:	4298      	cmp	r0, r3
 801ca98:	d301      	bcc.n	801ca9e <CB_Write+0x16>
		return FULL_ERR;
 801ca9a:	2003      	movs	r0, #3
	}
	cb->buf[cb->write_pos] = item;
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
	return NO_ERR;
}
 801ca9c:	bd38      	pop	{r3, r4, r5, pc}
	cb->buf[cb->write_pos] = item;
 801ca9e:	6822      	ldr	r2, [r4, #0]
 801caa0:	68e3      	ldr	r3, [r4, #12]
 801caa2:	54d5      	strb	r5, [r2, r3]
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
 801caa4:	68e3      	ldr	r3, [r4, #12]
 801caa6:	3301      	adds	r3, #1
 801caa8:	6862      	ldr	r2, [r4, #4]
 801caaa:	3a01      	subs	r2, #1
 801caac:	4013      	ands	r3, r2
 801caae:	60e3      	str	r3, [r4, #12]
	return NO_ERR;
 801cab0:	2000      	movs	r0, #0
 801cab2:	bd38      	pop	{r3, r4, r5, pc}

0801cab4 <CB_Read>:

/* Read element from buffer -----------------------------------------------*/

cb_err CB_Read(circbuff *cb, uint8_t * item){
 801cab4:	b538      	push	{r3, r4, r5, lr}
 801cab6:	4604      	mov	r4, r0
 801cab8:	460d      	mov	r5, r1
	if (CB_Data_Length(cb) == 0){
 801caba:	f7ff ffdd 	bl	801ca78 <CB_Data_Length>
 801cabe:	b908      	cbnz	r0, 801cac4 <CB_Read+0x10>
		return EMPTY_ERR;
 801cac0:	2002      	movs	r0, #2
	}
	*item = cb->buf[cb->read_pos];
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
	return NO_ERR;
}
 801cac2:	bd38      	pop	{r3, r4, r5, pc}
	*item = cb->buf[cb->read_pos];
 801cac4:	6822      	ldr	r2, [r4, #0]
 801cac6:	68a3      	ldr	r3, [r4, #8]
 801cac8:	5cd3      	ldrb	r3, [r2, r3]
 801caca:	702b      	strb	r3, [r5, #0]
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
 801cacc:	68a3      	ldr	r3, [r4, #8]
 801cace:	3301      	adds	r3, #1
 801cad0:	6862      	ldr	r2, [r4, #4]
 801cad2:	3a01      	subs	r2, #1
 801cad4:	4013      	ands	r3, r2
 801cad6:	60a3      	str	r3, [r4, #8]
	return NO_ERR;
 801cad8:	2000      	movs	r0, #0
 801cada:	bd38      	pop	{r3, r4, r5, pc}

0801cadc <FlashInit>:
RESERVED01,
RESERVED02,
RESERVED03,
RESERVED04, };

void FlashInit() {
 801cadc:	b500      	push	{lr}
 801cade:	b083      	sub	sp, #12

	uint16_t mem_key;
	EE_ReadVariable(MEM_KEY_ADDR, &mem_key); /* Memory key reading */
 801cae0:	f10d 0106 	add.w	r1, sp, #6
 801cae4:	2000      	movs	r0, #0
 801cae6:	f000 f8ef 	bl	801ccc8 <EE_ReadVariable>
	if (mem_key != MEMORY_KEY) { /* First launching of device */
 801caea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801caee:	f64b 63af 	movw	r3, #48815	; 0xbeaf
 801caf2:	429a      	cmp	r2, r3
 801caf4:	d01a      	beq.n	801cb2c <FlashInit+0x50>
		/* Default FLASH initialization --------------------- */
		EE_WriteVariable(MEM_KEY_ADDR, MEMORY_KEY);
 801caf6:	4619      	mov	r1, r3
 801caf8:	2000      	movs	r0, #0
 801cafa:	f000 faa1 	bl	801d040 <EE_WriteVariable>
		EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 801cafe:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 801cb02:	2001      	movs	r0, #1
 801cb04:	f000 fa9c 	bl	801d040 <EE_WriteVariable>
		EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 801cb08:	f64f 5104 	movw	r1, #64772	; 0xfd04
 801cb0c:	2002      	movs	r0, #2
 801cb0e:	f000 fa97 	bl	801d040 <EE_WriteVariable>
		EE_WriteVariable(BR_MS_ADDR, DEFAULT_BR_MS);
 801cb12:	2102      	movs	r1, #2
 801cb14:	2003      	movs	r0, #3
 801cb16:	f000 fa93 	bl	801d040 <EE_WriteVariable>
		EE_WriteVariable(BR_LS_ADDR, DEFAULT_BR_LS);
 801cb1a:	f64d 416c 	movw	r1, #56428	; 0xdc6c
 801cb1e:	2004      	movs	r0, #4
 801cb20:	f000 fa8e 	bl	801d040 <EE_WriteVariable>
		EE_WriteVariable(MPI_ADRR_ADDR, DEFAULT_MPI_ADDR);
 801cb24:	2101      	movs	r1, #1
 801cb26:	2005      	movs	r0, #5
 801cb28:	f000 fa8a 	bl	801d040 <EE_WriteVariable>
		uint32_t ui32;
		uint16_t ui16[2];
	} br;

	/*baud rate */
	EE_ReadVariable(BR_MS_ADDR, &br.ui16[1]);
 801cb2c:	f10d 0102 	add.w	r1, sp, #2
 801cb30:	2003      	movs	r0, #3
 801cb32:	f000 f8c9 	bl	801ccc8 <EE_ReadVariable>
	EE_ReadVariable(BR_LS_ADDR, &br.ui16[0]);
 801cb36:	4669      	mov	r1, sp
 801cb38:	2004      	movs	r0, #4
 801cb3a:	f000 f8c5 	bl	801ccc8 <EE_ReadVariable>
	huart5.Init.BaudRate = br.ui32;
 801cb3e:	4b08      	ldr	r3, [pc, #32]	; (801cb60 <FlashInit+0x84>)
 801cb40:	9a00      	ldr	r2, [sp, #0]
 801cb42:	605a      	str	r2, [r3, #4]
    /* IP-address */
	EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 801cb44:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 801cb48:	2001      	movs	r0, #1
 801cb4a:	f000 fa79 	bl	801d040 <EE_WriteVariable>
	EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 801cb4e:	f64f 5104 	movw	r1, #64772	; 0xfd04
 801cb52:	2002      	movs	r0, #2
 801cb54:	f000 fa74 	bl	801d040 <EE_WriteVariable>

	/* ------------------------------------------------------- */
}
 801cb58:	b003      	add	sp, #12
 801cb5a:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb5e:	bf00      	nop
 801cb60:	2000bd7c 	.word	0x2000bd7c

0801cb64 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 801cb64:	b500      	push	{lr}
 801cb66:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801cb68:	2200      	movs	r2, #0
 801cb6a:	9201      	str	r2, [sp, #4]
 801cb6c:	4b09      	ldr	r3, [pc, #36]	; (801cb94 <MX_DMA_Init+0x30>)
 801cb6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801cb70:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 801cb74:	6319      	str	r1, [r3, #48]	; 0x30
 801cb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801cb7c:	9301      	str	r3, [sp, #4]
 801cb7e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 801cb80:	2105      	movs	r1, #5
 801cb82:	2046      	movs	r0, #70	; 0x46
 801cb84:	f7f3 fc48 	bl	8010418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 801cb88:	2046      	movs	r0, #70	; 0x46
 801cb8a:	f7f3 fc77 	bl	801047c <HAL_NVIC_EnableIRQ>

}
 801cb8e:	b003      	add	sp, #12
 801cb90:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb94:	40023800 	.word	0x40023800

0801cb98 <EE_VerifyPageFullyErased>:
{
  uint32_t ReadStatus = 1;
  uint16_t AddressValue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 801cb98:	4b07      	ldr	r3, [pc, #28]	; (801cbb8 <EE_VerifyPageFullyErased+0x20>)
 801cb9a:	4298      	cmp	r0, r3
 801cb9c:	d807      	bhi.n	801cbae <EE_VerifyPageFullyErased+0x16>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 801cb9e:	8803      	ldrh	r3, [r0, #0]
 801cba0:	b29b      	uxth	r3, r3

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 801cba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cba6:	4293      	cmp	r3, r2
 801cba8:	d103      	bne.n	801cbb2 <EE_VerifyPageFullyErased+0x1a>
      ReadStatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 801cbaa:	3004      	adds	r0, #4
 801cbac:	e7f4      	b.n	801cb98 <EE_VerifyPageFullyErased>
  uint32_t ReadStatus = 1;
 801cbae:	2001      	movs	r0, #1
 801cbb0:	4770      	bx	lr
      ReadStatus = 0;
 801cbb2:	2000      	movs	r0, #0
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
}
 801cbb4:	4770      	bx	lr
 801cbb6:	bf00      	nop
 801cbb8:	0800bfff 	.word	0x0800bfff

0801cbbc <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801cbbc:	4b11      	ldr	r3, [pc, #68]	; (801cc04 <EE_FindValidPage+0x48>)
 801cbbe:	881b      	ldrh	r3, [r3, #0]
 801cbc0:	b29b      	uxth	r3, r3

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801cbc2:	4a11      	ldr	r2, [pc, #68]	; (801cc08 <EE_FindValidPage+0x4c>)
 801cbc4:	8812      	ldrh	r2, [r2, #0]
 801cbc6:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 801cbc8:	b198      	cbz	r0, 801cbf2 <EE_FindValidPage+0x36>
 801cbca:	2801      	cmp	r0, #1
 801cbcc:	d117      	bne.n	801cbfe <EE_FindValidPage+0x42>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 801cbce:	b93a      	cbnz	r2, 801cbe0 <EE_FindValidPage+0x24>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 801cbd0:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 801cbd4:	428b      	cmp	r3, r1
 801cbd6:	d001      	beq.n	801cbdc <EE_FindValidPage+0x20>
        {
          return PAGE0;         /* Page0 valid */
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 801cbd8:	2301      	movs	r3, #1
 801cbda:	e011      	b.n	801cc00 <EE_FindValidPage+0x44>
          return PAGE0;         /* Page0 valid */
 801cbdc:	4613      	mov	r3, r2
 801cbde:	e00f      	b.n	801cc00 <EE_FindValidPage+0x44>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 801cbe0:	b10b      	cbz	r3, 801cbe6 <EE_FindValidPage+0x2a>
          return PAGE0;         /* Page0 valid */
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 801cbe2:	23ab      	movs	r3, #171	; 0xab
 801cbe4:	e00c      	b.n	801cc00 <EE_FindValidPage+0x44>
        if (PageStatus1 == RECEIVE_DATA)
 801cbe6:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 801cbea:	428a      	cmp	r2, r1
 801cbec:	d108      	bne.n	801cc00 <EE_FindValidPage+0x44>
          return PAGE1;         /* Page1 valid */
 801cbee:	2301      	movs	r3, #1
 801cbf0:	e006      	b.n	801cc00 <EE_FindValidPage+0x44>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 801cbf2:	b12b      	cbz	r3, 801cc00 <EE_FindValidPage+0x44>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (PageStatus1 == VALID_PAGE)
 801cbf4:	b10a      	cbz	r2, 801cbfa <EE_FindValidPage+0x3e>
      {
        return PAGE1;           /* Page1 valid */
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 801cbf6:	23ab      	movs	r3, #171	; 0xab
 801cbf8:	e002      	b.n	801cc00 <EE_FindValidPage+0x44>
        return PAGE1;           /* Page1 valid */
 801cbfa:	2301      	movs	r3, #1
 801cbfc:	e000      	b.n	801cc00 <EE_FindValidPage+0x44>
      }

    default:
      return PAGE0;             /* Page0 valid */
 801cbfe:	2300      	movs	r3, #0
  }
}
 801cc00:	4618      	mov	r0, r3
 801cc02:	4770      	bx	lr
 801cc04:	08008000 	.word	0x08008000
 801cc08:	0800c000 	.word	0x0800c000

0801cc0c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 801cc0c:	b570      	push	{r4, r5, r6, lr}
 801cc0e:	4605      	mov	r5, r0
 801cc10:	460e      	mov	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGE0;
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 801cc12:	2001      	movs	r0, #1
 801cc14:	f7ff ffd2 	bl	801cbbc <EE_FindValidPage>
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 801cc18:	28ab      	cmp	r0, #171	; 0xab
 801cc1a:	d021      	beq.n	801cc60 <EE_VerifyPageFullWriteVariable+0x54>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801cc1c:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
 801cc20:	3402      	adds	r4, #2
 801cc22:	03a4      	lsls	r4, r4, #14

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 801cc24:	1c43      	adds	r3, r0, #1
 801cc26:	480f      	ldr	r0, [pc, #60]	; (801cc64 <EE_VerifyPageFullWriteVariable+0x58>)
 801cc28:	eb00 3083 	add.w	r0, r0, r3, lsl #14

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 801cc2c:	4284      	cmp	r4, r0
 801cc2e:	d216      	bcs.n	801cc5e <EE_VerifyPageFullWriteVariable+0x52>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 801cc30:	6823      	ldr	r3, [r4, #0]
 801cc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc36:	d001      	beq.n	801cc3c <EE_VerifyPageFullWriteVariable+0x30>
      return FlashStatus;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 801cc38:	3404      	adds	r4, #4
 801cc3a:	e7f7      	b.n	801cc2c <EE_VerifyPageFullWriteVariable+0x20>
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 801cc3c:	b2b2      	uxth	r2, r6
 801cc3e:	2300      	movs	r3, #0
 801cc40:	4621      	mov	r1, r4
 801cc42:	2001      	movs	r0, #1
 801cc44:	f7f4 fbc0 	bl	80113c8 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 801cc48:	b108      	cbz	r0, 801cc4e <EE_VerifyPageFullWriteVariable+0x42>
        return FlashStatus;
 801cc4a:	b280      	uxth	r0, r0
 801cc4c:	bd70      	pop	{r4, r5, r6, pc}
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 801cc4e:	b2aa      	uxth	r2, r5
 801cc50:	2300      	movs	r3, #0
 801cc52:	1ca1      	adds	r1, r4, #2
 801cc54:	2001      	movs	r0, #1
 801cc56:	f7f4 fbb7 	bl	80113c8 <HAL_FLASH_Program>
      return FlashStatus;
 801cc5a:	b280      	uxth	r0, r0
 801cc5c:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 801cc5e:	2080      	movs	r0, #128	; 0x80
}
 801cc60:	bd70      	pop	{r4, r5, r6, pc}
 801cc62:	bf00      	nop
 801cc64:	08007fff 	.word	0x08007fff

0801cc68 <EE_Format>:
{
 801cc68:	b510      	push	{r4, lr}
 801cc6a:	b086      	sub	sp, #24
  uint32_t SectorError = 0;
 801cc6c:	2300      	movs	r3, #0
 801cc6e:	9305      	str	r3, [sp, #20]
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 801cc70:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = PAGE0_ID;
 801cc72:	2302      	movs	r3, #2
 801cc74:	9302      	str	r3, [sp, #8]
  pEraseInit.NbSectors = 1;
 801cc76:	2201      	movs	r2, #1
 801cc78:	9203      	str	r2, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cc7a:	9304      	str	r3, [sp, #16]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cc7c:	4810      	ldr	r0, [pc, #64]	; (801ccc0 <EE_Format+0x58>)
 801cc7e:	f7ff ff8b 	bl	801cb98 <EE_VerifyPageFullyErased>
 801cc82:	b928      	cbnz	r0, 801cc90 <EE_Format+0x28>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801cc84:	a905      	add	r1, sp, #20
 801cc86:	4668      	mov	r0, sp
 801cc88:	f7f4 fc4a 	bl	8011520 <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 801cc8c:	4604      	mov	r4, r0
 801cc8e:	b938      	cbnz	r0, 801cca0 <EE_Format+0x38>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 801cc90:	2200      	movs	r2, #0
 801cc92:	2300      	movs	r3, #0
 801cc94:	490a      	ldr	r1, [pc, #40]	; (801ccc0 <EE_Format+0x58>)
 801cc96:	2001      	movs	r0, #1
 801cc98:	f7f4 fb96 	bl	80113c8 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801cc9c:	4604      	mov	r4, r0
 801cc9e:	b110      	cbz	r0, 801cca6 <EE_Format+0x3e>
}
 801cca0:	4620      	mov	r0, r4
 801cca2:	b006      	add	sp, #24
 801cca4:	bd10      	pop	{r4, pc}
  pEraseInit.Sector = PAGE1_ID;
 801cca6:	2303      	movs	r3, #3
 801cca8:	9302      	str	r3, [sp, #8]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801ccaa:	4806      	ldr	r0, [pc, #24]	; (801ccc4 <EE_Format+0x5c>)
 801ccac:	f7ff ff74 	bl	801cb98 <EE_VerifyPageFullyErased>
 801ccb0:	2800      	cmp	r0, #0
 801ccb2:	d1f5      	bne.n	801cca0 <EE_Format+0x38>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801ccb4:	a905      	add	r1, sp, #20
 801ccb6:	4668      	mov	r0, sp
 801ccb8:	f7f4 fc32 	bl	8011520 <HAL_FLASHEx_Erase>
 801ccbc:	4604      	mov	r4, r0
 801ccbe:	e7ef      	b.n	801cca0 <EE_Format+0x38>
 801ccc0:	08008000 	.word	0x08008000
 801ccc4:	0800c000 	.word	0x0800c000

0801ccc8 <EE_ReadVariable>:
{
 801ccc8:	b538      	push	{r3, r4, r5, lr}
 801ccca:	4604      	mov	r4, r0
 801cccc:	460d      	mov	r5, r1
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801ccce:	2000      	movs	r0, #0
 801ccd0:	f7ff ff74 	bl	801cbbc <EE_FindValidPage>
  if (ValidPage == NO_VALID_PAGE)
 801ccd4:	28ab      	cmp	r0, #171	; 0xab
 801ccd6:	d016      	beq.n	801cd06 <EE_ReadVariable+0x3e>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801ccd8:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 801ccdc:	3202      	adds	r2, #2
 801ccde:	0392      	lsls	r2, r2, #14
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801cce0:	1c43      	adds	r3, r0, #1
 801cce2:	4809      	ldr	r0, [pc, #36]	; (801cd08 <EE_ReadVariable+0x40>)
 801cce4:	eb00 3083 	add.w	r0, r0, r3, lsl #14
  while (Address > (PageStartAddress + 2))
 801cce8:	1c93      	adds	r3, r2, #2
 801ccea:	4298      	cmp	r0, r3
 801ccec:	d90a      	bls.n	801cd04 <EE_ReadVariable+0x3c>
    AddressValue = (*(__IO uint16_t*)Address);
 801ccee:	8803      	ldrh	r3, [r0, #0]
 801ccf0:	b29b      	uxth	r3, r3
    if (AddressValue == VirtAddress)
 801ccf2:	42a3      	cmp	r3, r4
 801ccf4:	d001      	beq.n	801ccfa <EE_ReadVariable+0x32>
      Address = Address - 4;
 801ccf6:	3804      	subs	r0, #4
 801ccf8:	e7f6      	b.n	801cce8 <EE_ReadVariable+0x20>
      *Data = (*(__IO uint16_t*)(Address - 2));
 801ccfa:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 801ccfe:	802b      	strh	r3, [r5, #0]
      ReadStatus = 0;
 801cd00:	2000      	movs	r0, #0
      break;
 801cd02:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 801cd04:	2001      	movs	r0, #1
}
 801cd06:	bd38      	pop	{r3, r4, r5, pc}
 801cd08:	08007ffe 	.word	0x08007ffe

0801cd0c <EE_Init>:
{
 801cd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd0e:	b087      	sub	sp, #28
  uint32_t SectorError = 0;
 801cd10:	2300      	movs	r3, #0
 801cd12:	9305      	str	r3, [sp, #20]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801cd14:	4a92      	ldr	r2, [pc, #584]	; (801cf60 <EE_Init+0x254>)
 801cd16:	8816      	ldrh	r6, [r2, #0]
 801cd18:	b2b6      	uxth	r6, r6
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801cd1a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 801cd1e:	8815      	ldrh	r5, [r2, #0]
 801cd20:	b2ad      	uxth	r5, r5
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801cd22:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = PAGE0_ID;
 801cd24:	2302      	movs	r3, #2
 801cd26:	9302      	str	r3, [sp, #8]
  pEraseInit.NbSectors = 1;
 801cd28:	2201      	movs	r2, #1
 801cd2a:	9203      	str	r2, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cd2c:	9304      	str	r3, [sp, #16]
  switch (PageStatus0)
 801cd2e:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 801cd32:	429e      	cmp	r6, r3
 801cd34:	d040      	beq.n	801cdb8 <EE_Init+0xac>
 801cd36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cd3a:	429e      	cmp	r6, r3
 801cd3c:	d00b      	beq.n	801cd56 <EE_Init+0x4a>
 801cd3e:	2e00      	cmp	r6, #0
 801cd40:	f000 809f 	beq.w	801ce82 <EE_Init+0x176>
      FlashStatus = EE_Format();
 801cd44:	f7ff ff90 	bl	801cc68 <EE_Format>
      if (FlashStatus != HAL_OK)
 801cd48:	2800      	cmp	r0, #0
 801cd4a:	f000 8107 	beq.w	801cf5c <EE_Init+0x250>
        return FlashStatus;
 801cd4e:	b285      	uxth	r5, r0
}
 801cd50:	4628      	mov	r0, r5
 801cd52:	b007      	add	sp, #28
 801cd54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 801cd56:	b155      	cbz	r5, 801cd6e <EE_Init+0x62>
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 801cd58:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 801cd5c:	429d      	cmp	r5, r3
 801cd5e:	d015      	beq.n	801cd8c <EE_Init+0x80>
        FlashStatus = EE_Format();
 801cd60:	f7ff ff82 	bl	801cc68 <EE_Format>
        if (FlashStatus != HAL_OK)
 801cd64:	2800      	cmp	r0, #0
 801cd66:	f000 80f1 	beq.w	801cf4c <EE_Init+0x240>
          return FlashStatus;
 801cd6a:	b285      	uxth	r5, r0
 801cd6c:	e7f0      	b.n	801cd50 <EE_Init+0x44>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cd6e:	487c      	ldr	r0, [pc, #496]	; (801cf60 <EE_Init+0x254>)
 801cd70:	f7ff ff12 	bl	801cb98 <EE_VerifyPageFullyErased>
 801cd74:	4604      	mov	r4, r0
 801cd76:	2800      	cmp	r0, #0
 801cd78:	d1ea      	bne.n	801cd50 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cd7a:	a905      	add	r1, sp, #20
 801cd7c:	4668      	mov	r0, sp
 801cd7e:	f7f4 fbcf 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cd82:	2800      	cmp	r0, #0
 801cd84:	f000 80de 	beq.w	801cf44 <EE_Init+0x238>
            return FlashStatus;
 801cd88:	b285      	uxth	r5, r0
 801cd8a:	e7e1      	b.n	801cd50 <EE_Init+0x44>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cd8c:	4874      	ldr	r0, [pc, #464]	; (801cf60 <EE_Init+0x254>)
 801cd8e:	f7ff ff03 	bl	801cb98 <EE_VerifyPageFullyErased>
 801cd92:	b920      	cbnz	r0, 801cd9e <EE_Init+0x92>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cd94:	a905      	add	r1, sp, #20
 801cd96:	4668      	mov	r0, sp
 801cd98:	f7f4 fbc2 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cd9c:	b950      	cbnz	r0, 801cdb4 <EE_Init+0xa8>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 801cd9e:	2200      	movs	r2, #0
 801cda0:	2300      	movs	r3, #0
 801cda2:	4970      	ldr	r1, [pc, #448]	; (801cf64 <EE_Init+0x258>)
 801cda4:	2001      	movs	r0, #1
 801cda6:	f7f4 fb0f 	bl	80113c8 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cdaa:	2800      	cmp	r0, #0
 801cdac:	f000 80cc 	beq.w	801cf48 <EE_Init+0x23c>
          return FlashStatus;
 801cdb0:	b285      	uxth	r5, r0
 801cdb2:	e7cd      	b.n	801cd50 <EE_Init+0x44>
            return FlashStatus;
 801cdb4:	b285      	uxth	r5, r0
 801cdb6:	e7cb      	b.n	801cd50 <EE_Init+0x44>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 801cdb8:	b35d      	cbz	r5, 801ce12 <EE_Init+0x106>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 801cdba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cdbe:	429d      	cmp	r5, r3
 801cdc0:	d048      	beq.n	801ce54 <EE_Init+0x148>
        FlashStatus = EE_Format();
 801cdc2:	f7ff ff51 	bl	801cc68 <EE_Format>
        if (FlashStatus != HAL_OK)
 801cdc6:	2800      	cmp	r0, #0
 801cdc8:	f000 80c6 	beq.w	801cf58 <EE_Init+0x24c>
          return FlashStatus;
 801cdcc:	b285      	uxth	r5, r0
 801cdce:	e7bf      	b.n	801cd50 <EE_Init+0x44>
            x = VarIdx;
 801cdd0:	b227      	sxth	r7, r4
 801cdd2:	e00c      	b.n	801cdee <EE_Init+0xe2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801cdd4:	3401      	adds	r4, #1
 801cdd6:	b2a4      	uxth	r4, r4
 801cdd8:	2c09      	cmp	r4, #9
 801cdda:	d81e      	bhi.n	801ce1a <EE_Init+0x10e>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801cddc:	4b62      	ldr	r3, [pc, #392]	; (801cf68 <EE_Init+0x25c>)
 801cdde:	881b      	ldrh	r3, [r3, #0]
 801cde0:	b29b      	uxth	r3, r3
 801cde2:	4626      	mov	r6, r4
 801cde4:	4a61      	ldr	r2, [pc, #388]	; (801cf6c <EE_Init+0x260>)
 801cde6:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801cdea:	4283      	cmp	r3, r0
 801cdec:	d0f0      	beq.n	801cdd0 <EE_Init+0xc4>
          if (VarIdx != x)
 801cdee:	42be      	cmp	r6, r7
 801cdf0:	d0f0      	beq.n	801cdd4 <EE_Init+0xc8>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801cdf2:	495f      	ldr	r1, [pc, #380]	; (801cf70 <EE_Init+0x264>)
 801cdf4:	f7ff ff68 	bl	801ccc8 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 801cdf8:	2801      	cmp	r0, #1
 801cdfa:	d0eb      	beq.n	801cdd4 <EE_Init+0xc8>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801cdfc:	4b5c      	ldr	r3, [pc, #368]	; (801cf70 <EE_Init+0x264>)
 801cdfe:	8819      	ldrh	r1, [r3, #0]
 801ce00:	4b5a      	ldr	r3, [pc, #360]	; (801cf6c <EE_Init+0x260>)
 801ce02:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 801ce06:	f7ff ff01 	bl	801cc0c <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 801ce0a:	2800      	cmp	r0, #0
 801ce0c:	d0e2      	beq.n	801cdd4 <EE_Init+0xc8>
                return EepromStatus;
 801ce0e:	4605      	mov	r5, r0
 801ce10:	e79e      	b.n	801cd50 <EE_Init+0x44>
 801ce12:	462c      	mov	r4, r5
 801ce14:	f04f 37ff 	mov.w	r7, #4294967295
 801ce18:	e7de      	b.n	801cdd8 <EE_Init+0xcc>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801ce1a:	2200      	movs	r2, #0
 801ce1c:	2300      	movs	r3, #0
 801ce1e:	4950      	ldr	r1, [pc, #320]	; (801cf60 <EE_Init+0x254>)
 801ce20:	2001      	movs	r0, #1
 801ce22:	f7f4 fad1 	bl	80113c8 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801ce26:	b108      	cbz	r0, 801ce2c <EE_Init+0x120>
          return FlashStatus;
 801ce28:	b285      	uxth	r5, r0
 801ce2a:	e791      	b.n	801cd50 <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801ce2c:	2303      	movs	r3, #3
 801ce2e:	9302      	str	r3, [sp, #8]
        pEraseInit.NbSectors = 1;
 801ce30:	2301      	movs	r3, #1
 801ce32:	9303      	str	r3, [sp, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801ce34:	2302      	movs	r3, #2
 801ce36:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801ce38:	484a      	ldr	r0, [pc, #296]	; (801cf64 <EE_Init+0x258>)
 801ce3a:	f7ff fead 	bl	801cb98 <EE_VerifyPageFullyErased>
 801ce3e:	4604      	mov	r4, r0
 801ce40:	2800      	cmp	r0, #0
 801ce42:	d185      	bne.n	801cd50 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801ce44:	a905      	add	r1, sp, #20
 801ce46:	4668      	mov	r0, sp
 801ce48:	f7f4 fb6a 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801ce4c:	2800      	cmp	r0, #0
 801ce4e:	d07f      	beq.n	801cf50 <EE_Init+0x244>
            return FlashStatus;
 801ce50:	b285      	uxth	r5, r0
 801ce52:	e77d      	b.n	801cd50 <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801ce54:	2303      	movs	r3, #3
 801ce56:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801ce58:	4842      	ldr	r0, [pc, #264]	; (801cf64 <EE_Init+0x258>)
 801ce5a:	f7ff fe9d 	bl	801cb98 <EE_VerifyPageFullyErased>
 801ce5e:	b920      	cbnz	r0, 801ce6a <EE_Init+0x15e>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801ce60:	a905      	add	r1, sp, #20
 801ce62:	4668      	mov	r0, sp
 801ce64:	f7f4 fb5c 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801ce68:	b948      	cbnz	r0, 801ce7e <EE_Init+0x172>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801ce6a:	2200      	movs	r2, #0
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	493c      	ldr	r1, [pc, #240]	; (801cf60 <EE_Init+0x254>)
 801ce70:	2001      	movs	r0, #1
 801ce72:	f7f4 faa9 	bl	80113c8 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801ce76:	2800      	cmp	r0, #0
 801ce78:	d06c      	beq.n	801cf54 <EE_Init+0x248>
          return FlashStatus;
 801ce7a:	b285      	uxth	r5, r0
 801ce7c:	e768      	b.n	801cd50 <EE_Init+0x44>
            return FlashStatus;
 801ce7e:	b285      	uxth	r5, r0
 801ce80:	e766      	b.n	801cd50 <EE_Init+0x44>
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801ce82:	b13d      	cbz	r5, 801ce94 <EE_Init+0x188>
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 801ce84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ce88:	429d      	cmp	r5, r3
 801ce8a:	d00a      	beq.n	801cea2 <EE_Init+0x196>
 801ce8c:	4634      	mov	r4, r6
 801ce8e:	f04f 37ff 	mov.w	r7, #4294967295
 801ce92:	e01c      	b.n	801cece <EE_Init+0x1c2>
        FlashStatus = EE_Format();
 801ce94:	f7ff fee8 	bl	801cc68 <EE_Format>
        if (FlashStatus != HAL_OK)
 801ce98:	2800      	cmp	r0, #0
 801ce9a:	f43f af59 	beq.w	801cd50 <EE_Init+0x44>
          return FlashStatus;
 801ce9e:	b285      	uxth	r5, r0
 801cea0:	e756      	b.n	801cd50 <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801cea2:	2303      	movs	r3, #3
 801cea4:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801cea6:	482f      	ldr	r0, [pc, #188]	; (801cf64 <EE_Init+0x258>)
 801cea8:	f7ff fe76 	bl	801cb98 <EE_VerifyPageFullyErased>
 801ceac:	4605      	mov	r5, r0
 801ceae:	b108      	cbz	r0, 801ceb4 <EE_Init+0x1a8>
  return HAL_OK;
 801ceb0:	4635      	mov	r5, r6
 801ceb2:	e74d      	b.n	801cd50 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801ceb4:	a905      	add	r1, sp, #20
 801ceb6:	4668      	mov	r0, sp
 801ceb8:	f7f4 fb32 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cebc:	2800      	cmp	r0, #0
 801cebe:	f43f af47 	beq.w	801cd50 <EE_Init+0x44>
            return FlashStatus;
 801cec2:	b285      	uxth	r5, r0
 801cec4:	e744      	b.n	801cd50 <EE_Init+0x44>
            x = VarIdx;
 801cec6:	b227      	sxth	r7, r4
 801cec8:	e00c      	b.n	801cee4 <EE_Init+0x1d8>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801ceca:	3401      	adds	r4, #1
 801cecc:	b2a4      	uxth	r4, r4
 801cece:	2c09      	cmp	r4, #9
 801ced0:	d81a      	bhi.n	801cf08 <EE_Init+0x1fc>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801ced2:	4b28      	ldr	r3, [pc, #160]	; (801cf74 <EE_Init+0x268>)
 801ced4:	881b      	ldrh	r3, [r3, #0]
 801ced6:	b29b      	uxth	r3, r3
 801ced8:	4625      	mov	r5, r4
 801ceda:	4a24      	ldr	r2, [pc, #144]	; (801cf6c <EE_Init+0x260>)
 801cedc:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801cee0:	4283      	cmp	r3, r0
 801cee2:	d0f0      	beq.n	801cec6 <EE_Init+0x1ba>
          if (VarIdx != x)
 801cee4:	42bd      	cmp	r5, r7
 801cee6:	d0f0      	beq.n	801ceca <EE_Init+0x1be>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801cee8:	4921      	ldr	r1, [pc, #132]	; (801cf70 <EE_Init+0x264>)
 801ceea:	f7ff feed 	bl	801ccc8 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 801ceee:	2801      	cmp	r0, #1
 801cef0:	d0eb      	beq.n	801ceca <EE_Init+0x1be>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801cef2:	4b1f      	ldr	r3, [pc, #124]	; (801cf70 <EE_Init+0x264>)
 801cef4:	8819      	ldrh	r1, [r3, #0]
 801cef6:	4b1d      	ldr	r3, [pc, #116]	; (801cf6c <EE_Init+0x260>)
 801cef8:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 801cefc:	f7ff fe86 	bl	801cc0c <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 801cf00:	4605      	mov	r5, r0
 801cf02:	2800      	cmp	r0, #0
 801cf04:	d0e1      	beq.n	801ceca <EE_Init+0x1be>
 801cf06:	e723      	b.n	801cd50 <EE_Init+0x44>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 801cf08:	2200      	movs	r2, #0
 801cf0a:	2300      	movs	r3, #0
 801cf0c:	4915      	ldr	r1, [pc, #84]	; (801cf64 <EE_Init+0x258>)
 801cf0e:	2001      	movs	r0, #1
 801cf10:	f7f4 fa5a 	bl	80113c8 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cf14:	b108      	cbz	r0, 801cf1a <EE_Init+0x20e>
          return FlashStatus;
 801cf16:	b285      	uxth	r5, r0
 801cf18:	e71a      	b.n	801cd50 <EE_Init+0x44>
        pEraseInit.Sector = PAGE0_ID;
 801cf1a:	2302      	movs	r3, #2
 801cf1c:	9302      	str	r3, [sp, #8]
        pEraseInit.NbSectors = 1;
 801cf1e:	2201      	movs	r2, #1
 801cf20:	9203      	str	r2, [sp, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cf22:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cf24:	480e      	ldr	r0, [pc, #56]	; (801cf60 <EE_Init+0x254>)
 801cf26:	f7ff fe37 	bl	801cb98 <EE_VerifyPageFullyErased>
 801cf2a:	4605      	mov	r5, r0
 801cf2c:	b108      	cbz	r0, 801cf32 <EE_Init+0x226>
  return HAL_OK;
 801cf2e:	4635      	mov	r5, r6
 801cf30:	e70e      	b.n	801cd50 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cf32:	a905      	add	r1, sp, #20
 801cf34:	4668      	mov	r0, sp
 801cf36:	f7f4 faf3 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cf3a:	2800      	cmp	r0, #0
 801cf3c:	f43f af08 	beq.w	801cd50 <EE_Init+0x44>
            return FlashStatus;
 801cf40:	b285      	uxth	r5, r0
 801cf42:	e705      	b.n	801cd50 <EE_Init+0x44>
  return HAL_OK;
 801cf44:	4625      	mov	r5, r4
 801cf46:	e703      	b.n	801cd50 <EE_Init+0x44>
 801cf48:	2500      	movs	r5, #0
 801cf4a:	e701      	b.n	801cd50 <EE_Init+0x44>
 801cf4c:	2500      	movs	r5, #0
 801cf4e:	e6ff      	b.n	801cd50 <EE_Init+0x44>
 801cf50:	4625      	mov	r5, r4
 801cf52:	e6fd      	b.n	801cd50 <EE_Init+0x44>
 801cf54:	2500      	movs	r5, #0
 801cf56:	e6fb      	b.n	801cd50 <EE_Init+0x44>
 801cf58:	2500      	movs	r5, #0
 801cf5a:	e6f9      	b.n	801cd50 <EE_Init+0x44>
 801cf5c:	2500      	movs	r5, #0
 801cf5e:	e6f7      	b.n	801cd50 <EE_Init+0x44>
 801cf60:	08008000 	.word	0x08008000
 801cf64:	0800c000 	.word	0x0800c000
 801cf68:	08008006 	.word	0x08008006
 801cf6c:	20000010 	.word	0x20000010
 801cf70:	20004108 	.word	0x20004108
 801cf74:	0800c006 	.word	0x0800c006

0801cf78 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 801cf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf7c:	b086      	sub	sp, #24
 801cf7e:	4605      	mov	r5, r0
 801cf80:	460e      	mov	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
  uint16_t OldPageId=0;
  uint16_t ValidPage = PAGE0, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
  uint32_t SectorError = 0;
 801cf82:	2000      	movs	r0, #0
 801cf84:	9005      	str	r0, [sp, #20]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801cf86:	f7ff fe19 	bl	801cbbc <EE_FindValidPage>

  if (ValidPage == PAGE1)       /* Page1 valid */
 801cf8a:	2801      	cmp	r0, #1
 801cf8c:	d012      	beq.n	801cfb4 <EE_PageTransfer+0x3c>
    NewPageAddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 801cf8e:	b120      	cbz	r0, 801cf9a <EE_PageTransfer+0x22>
    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 801cf90:	24ab      	movs	r4, #171	; 0xab
    return FlashStatus;
  }

  /* Return last operation flash status */
  return FlashStatus;
}
 801cf92:	4620      	mov	r0, r4
 801cf94:	b006      	add	sp, #24
 801cf96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    OldPageId = PAGE0_ID;
 801cf9a:	f04f 0802 	mov.w	r8, #2
    NewPageAddress = PAGE1_BASE_ADDRESS;
 801cf9e:	4f24      	ldr	r7, [pc, #144]	; (801d030 <EE_PageTransfer+0xb8>)
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 801cfa0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	4639      	mov	r1, r7
 801cfa8:	2001      	movs	r0, #1
 801cfaa:	f7f4 fa0d 	bl	80113c8 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801cfae:	b128      	cbz	r0, 801cfbc <EE_PageTransfer+0x44>
    return FlashStatus;
 801cfb0:	b284      	uxth	r4, r0
 801cfb2:	e7ee      	b.n	801cf92 <EE_PageTransfer+0x1a>
    OldPageId = PAGE1_ID;
 801cfb4:	f04f 0803 	mov.w	r8, #3
    NewPageAddress = PAGE0_BASE_ADDRESS;
 801cfb8:	4f1e      	ldr	r7, [pc, #120]	; (801d034 <EE_PageTransfer+0xbc>)
 801cfba:	e7f1      	b.n	801cfa0 <EE_PageTransfer+0x28>
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801cfbc:	4631      	mov	r1, r6
 801cfbe:	4628      	mov	r0, r5
 801cfc0:	f7ff fe24 	bl	801cc0c <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 801cfc4:	4604      	mov	r4, r0
 801cfc6:	b110      	cbz	r0, 801cfce <EE_PageTransfer+0x56>
 801cfc8:	e7e3      	b.n	801cf92 <EE_PageTransfer+0x1a>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801cfca:	3401      	adds	r4, #1
 801cfcc:	b2a4      	uxth	r4, r4
 801cfce:	2c09      	cmp	r4, #9
 801cfd0:	d814      	bhi.n	801cffc <EE_PageTransfer+0x84>
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 801cfd2:	4b19      	ldr	r3, [pc, #100]	; (801d038 <EE_PageTransfer+0xc0>)
 801cfd4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 801cfd8:	4285      	cmp	r5, r0
 801cfda:	d0f6      	beq.n	801cfca <EE_PageTransfer+0x52>
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801cfdc:	4917      	ldr	r1, [pc, #92]	; (801d03c <EE_PageTransfer+0xc4>)
 801cfde:	f7ff fe73 	bl	801ccc8 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 801cfe2:	2801      	cmp	r0, #1
 801cfe4:	d0f1      	beq.n	801cfca <EE_PageTransfer+0x52>
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801cfe6:	4b15      	ldr	r3, [pc, #84]	; (801d03c <EE_PageTransfer+0xc4>)
 801cfe8:	8819      	ldrh	r1, [r3, #0]
 801cfea:	4b13      	ldr	r3, [pc, #76]	; (801d038 <EE_PageTransfer+0xc0>)
 801cfec:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 801cff0:	f7ff fe0c 	bl	801cc0c <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 801cff4:	2800      	cmp	r0, #0
 801cff6:	d0e8      	beq.n	801cfca <EE_PageTransfer+0x52>
          return EepromStatus;
 801cff8:	4604      	mov	r4, r0
 801cffa:	e7ca      	b.n	801cf92 <EE_PageTransfer+0x1a>
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801cffc:	2300      	movs	r3, #0
 801cffe:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = OldPageId;
 801d000:	f8cd 8008 	str.w	r8, [sp, #8]
  pEraseInit.NbSectors = 1;
 801d004:	2301      	movs	r3, #1
 801d006:	9303      	str	r3, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801d008:	2302      	movs	r3, #2
 801d00a:	9304      	str	r3, [sp, #16]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 801d00c:	a905      	add	r1, sp, #20
 801d00e:	4668      	mov	r0, sp
 801d010:	f7f4 fa86 	bl	8011520 <HAL_FLASHEx_Erase>
  if (FlashStatus != HAL_OK)
 801d014:	b108      	cbz	r0, 801d01a <EE_PageTransfer+0xa2>
    return FlashStatus;
 801d016:	b284      	uxth	r4, r0
 801d018:	e7bb      	b.n	801cf92 <EE_PageTransfer+0x1a>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 801d01a:	2200      	movs	r2, #0
 801d01c:	2300      	movs	r3, #0
 801d01e:	4639      	mov	r1, r7
 801d020:	2001      	movs	r0, #1
 801d022:	f7f4 f9d1 	bl	80113c8 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801d026:	b908      	cbnz	r0, 801d02c <EE_PageTransfer+0xb4>
  return FlashStatus;
 801d028:	b284      	uxth	r4, r0
 801d02a:	e7b2      	b.n	801cf92 <EE_PageTransfer+0x1a>
    return FlashStatus;
 801d02c:	b284      	uxth	r4, r0
 801d02e:	e7b0      	b.n	801cf92 <EE_PageTransfer+0x1a>
 801d030:	0800c000 	.word	0x0800c000
 801d034:	08008000 	.word	0x08008000
 801d038:	20000010 	.word	0x20000010
 801d03c:	20004108 	.word	0x20004108

0801d040 <EE_WriteVariable>:
{
 801d040:	b538      	push	{r3, r4, r5, lr}
 801d042:	4604      	mov	r4, r0
 801d044:	460d      	mov	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801d046:	f7ff fde1 	bl	801cc0c <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 801d04a:	2880      	cmp	r0, #128	; 0x80
 801d04c:	d000      	beq.n	801d050 <EE_WriteVariable+0x10>
}
 801d04e:	bd38      	pop	{r3, r4, r5, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 801d050:	4629      	mov	r1, r5
 801d052:	4620      	mov	r0, r4
 801d054:	f7ff ff90 	bl	801cf78 <EE_PageTransfer>
 801d058:	e7f9      	b.n	801d04e <EE_WriteVariable+0xe>
	...

0801d05c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801d05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801d060:	4834      	ldr	r0, [pc, #208]	; (801d134 <low_level_input+0xd8>)
 801d062:	f7f3 fe7f 	bl	8010d64 <HAL_ETH_GetReceivedFrame_IT>
 801d066:	2800      	cmp	r0, #0
 801d068:	d160      	bne.n	801d12c <low_level_input+0xd0>
    return NULL;
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 801d06a:	4b32      	ldr	r3, [pc, #200]	; (801d134 <low_level_input+0xd8>)
 801d06c:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801d06e:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
  
  if (len > 0)
 801d072:	b949      	cbnz	r1, 801d088 <low_level_input+0x2c>
  struct pbuf *p = NULL;
 801d074:	f04f 0a00 	mov.w	sl, #0
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  }
  
  if (p != NULL)
 801d078:	f1ba 0f00 	cmp.w	sl, #0
 801d07c:	d033      	beq.n	801d0e6 <low_level_input+0x8a>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801d07e:	4b2d      	ldr	r3, [pc, #180]	; (801d134 <low_level_input+0xd8>)
 801d080:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 801d082:	46d1      	mov	r9, sl
    bufferoffset = 0;
 801d084:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 801d086:	e027      	b.n	801d0d8 <low_level_input+0x7c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801d088:	2203      	movs	r2, #3
 801d08a:	2004      	movs	r0, #4
 801d08c:	f7fb f9ca 	bl	8018424 <pbuf_alloc>
 801d090:	4682      	mov	sl, r0
 801d092:	e7f1      	b.n	801d078 <low_level_input+0x1c>
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801d094:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d098:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 801d09c:	3204      	adds	r2, #4
 801d09e:	eb08 0104 	add.w	r1, r8, r4
 801d0a2:	4430      	add	r0, r6
 801d0a4:	f001 faa7 	bl	801e5f6 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801d0a8:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801d0aa:	f8d7 8008 	ldr.w	r8, [r7, #8]
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801d0ae:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801d0b2:	1b36      	subs	r6, r6, r4
 801d0b4:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 801d0b8:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801d0ba:	18a5      	adds	r5, r4, r2
 801d0bc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801d0c0:	429d      	cmp	r5, r3
 801d0c2:	d8e7      	bhi.n	801d094 <low_level_input+0x38>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801d0c4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d0c8:	eb08 0104 	add.w	r1, r8, r4
 801d0cc:	4430      	add	r0, r6
 801d0ce:	f001 fa92 	bl	801e5f6 <memcpy>
    for(q = p; q != NULL; q = q->next)
 801d0d2:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 801d0d6:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 801d0d8:	f1b9 0f00 	cmp.w	r9, #0
 801d0dc:	d003      	beq.n	801d0e6 <low_level_input+0x8a>
      byteslefttocopy = q->len;
 801d0de:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 801d0e2:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801d0e4:	e7e9      	b.n	801d0ba <low_level_input+0x5e>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801d0e6:	4b13      	ldr	r3, [pc, #76]	; (801d134 <low_level_input+0xd8>)
 801d0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801d0ea:	2100      	movs	r1, #0
 801d0ec:	e005      	b.n	801d0fa <low_level_input+0x9e>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801d0ee:	681a      	ldr	r2, [r3, #0]
 801d0f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801d0f4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801d0f6:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801d0f8:	3101      	adds	r1, #1
 801d0fa:	4a0e      	ldr	r2, [pc, #56]	; (801d134 <low_level_input+0xd8>)
 801d0fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801d0fe:	4291      	cmp	r1, r2
 801d100:	d3f5      	bcc.n	801d0ee <low_level_input+0x92>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 801d102:	4b0c      	ldr	r3, [pc, #48]	; (801d134 <low_level_input+0xd8>)
 801d104:	2200      	movs	r2, #0
 801d106:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	f241 0214 	movw	r2, #4116	; 0x1014
 801d10e:	589a      	ldr	r2, [r3, r2]
 801d110:	f012 0f80 	tst.w	r2, #128	; 0x80
 801d114:	d007      	beq.n	801d126 <low_level_input+0xca>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801d116:	2180      	movs	r1, #128	; 0x80
 801d118:	f241 0214 	movw	r2, #4116	; 0x1014
 801d11c:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 801d11e:	2100      	movs	r1, #0
 801d120:	f241 0208 	movw	r2, #4104	; 0x1008
 801d124:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 801d126:	4650      	mov	r0, sl
 801d128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 801d12c:	f04f 0a00 	mov.w	sl, #0
 801d130:	e7f9      	b.n	801d126 <low_level_input+0xca>
 801d132:	bf00      	nop
 801d134:	2000a3dc 	.word	0x2000a3dc

0801d138 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 801d138:	b538      	push	{r3, r4, r5, lr}
 801d13a:	4605      	mov	r5, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 801d13c:	f04f 31ff 	mov.w	r1, #4294967295
 801d140:	4b0b      	ldr	r3, [pc, #44]	; (801d170 <ethernetif_input+0x38>)
 801d142:	6818      	ldr	r0, [r3, #0]
 801d144:	f7f5 fdd4 	bl	8012cf0 <osSemaphoreWait>
 801d148:	2800      	cmp	r0, #0
 801d14a:	d1f7      	bne.n	801d13c <ethernetif_input+0x4>
 801d14c:	e001      	b.n	801d152 <ethernetif_input+0x1a>
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
      } while(p!=NULL);
 801d14e:	2c00      	cmp	r4, #0
 801d150:	d0f4      	beq.n	801d13c <ethernetif_input+0x4>
        p = low_level_input( netif );
 801d152:	4628      	mov	r0, r5
 801d154:	f7ff ff82 	bl	801d05c <low_level_input>
        if   (p != NULL)
 801d158:	4604      	mov	r4, r0
 801d15a:	2800      	cmp	r0, #0
 801d15c:	d0f7      	beq.n	801d14e <ethernetif_input+0x16>
          if (netif->input( p, netif) != ERR_OK )
 801d15e:	692b      	ldr	r3, [r5, #16]
 801d160:	4629      	mov	r1, r5
 801d162:	4798      	blx	r3
 801d164:	2800      	cmp	r0, #0
 801d166:	d0f2      	beq.n	801d14e <ethernetif_input+0x16>
            pbuf_free(p);
 801d168:	4620      	mov	r0, r4
 801d16a:	f7fb f8ef 	bl	801834c <pbuf_free>
 801d16e:	e7ee      	b.n	801d14e <ethernetif_input+0x16>
 801d170:	2000410c 	.word	0x2000410c

0801d174 <low_level_output>:
{
 801d174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d178:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801d17a:	4b2c      	ldr	r3, [pc, #176]	; (801d22c <low_level_output+0xb8>)
 801d17c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801d17e:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 801d182:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 801d184:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 801d186:	f1bb 0f00 	cmp.w	fp, #0
 801d18a:	d032      	beq.n	801d1f2 <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801d18c:	6833      	ldr	r3, [r6, #0]
 801d18e:	2b00      	cmp	r3, #0
 801d190:	db35      	blt.n	801d1fe <low_level_output+0x8a>
      byteslefttocopy = q->len;
 801d192:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 801d196:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801d198:	eb04 0809 	add.w	r8, r4, r9
 801d19c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801d1a0:	4598      	cmp	r8, r3
 801d1a2:	d919      	bls.n	801d1d8 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 801d1a4:	f8db 1004 	ldr.w	r1, [fp, #4]
 801d1a8:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 801d1ac:	3204      	adds	r2, #4
 801d1ae:	4429      	add	r1, r5
 801d1b0:	eb0a 0004 	add.w	r0, sl, r4
 801d1b4:	f001 fa1f 	bl	801e5f6 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801d1b8:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801d1ba:	6833      	ldr	r3, [r6, #0]
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	db21      	blt.n	801d204 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 801d1c0:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801d1c4:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801d1c8:	1b2d      	subs	r5, r5, r4
 801d1ca:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801d1ce:	1b3f      	subs	r7, r7, r4
 801d1d0:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 801d1d4:	2400      	movs	r4, #0
 801d1d6:	e7df      	b.n	801d198 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801d1d8:	f8db 1004 	ldr.w	r1, [fp, #4]
 801d1dc:	464a      	mov	r2, r9
 801d1de:	4429      	add	r1, r5
 801d1e0:	eb0a 0004 	add.w	r0, sl, r4
 801d1e4:	f001 fa07 	bl	801e5f6 <memcpy>
      framelength = framelength + byteslefttocopy;
 801d1e8:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 801d1ea:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 801d1ee:	4644      	mov	r4, r8
 801d1f0:	e7c9      	b.n	801d186 <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 801d1f2:	4639      	mov	r1, r7
 801d1f4:	480d      	ldr	r0, [pc, #52]	; (801d22c <low_level_output+0xb8>)
 801d1f6:	f7f3 fd23 	bl	8010c40 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 801d1fa:	2000      	movs	r0, #0
 801d1fc:	e004      	b.n	801d208 <low_level_output+0x94>
        errval = ERR_USE;
 801d1fe:	f06f 0007 	mvn.w	r0, #7
 801d202:	e001      	b.n	801d208 <low_level_output+0x94>
          errval = ERR_USE;
 801d204:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 801d208:	4b08      	ldr	r3, [pc, #32]	; (801d22c <low_level_output+0xb8>)
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	f241 0214 	movw	r2, #4116	; 0x1014
 801d210:	589a      	ldr	r2, [r3, r2]
 801d212:	f012 0f20 	tst.w	r2, #32
 801d216:	d007      	beq.n	801d228 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801d218:	2120      	movs	r1, #32
 801d21a:	f241 0214 	movw	r2, #4116	; 0x1014
 801d21e:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 801d220:	2100      	movs	r1, #0
 801d222:	f241 0204 	movw	r2, #4100	; 0x1004
 801d226:	5099      	str	r1, [r3, r2]
}
 801d228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d22c:	2000a3dc 	.word	0x2000a3dc

0801d230 <low_level_init>:
{ 
 801d230:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d232:	b089      	sub	sp, #36	; 0x24
 801d234:	4604      	mov	r4, r0
  heth.Instance = ETH;
 801d236:	4836      	ldr	r0, [pc, #216]	; (801d310 <low_level_init+0xe0>)
 801d238:	4b36      	ldr	r3, [pc, #216]	; (801d314 <low_level_init+0xe4>)
 801d23a:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801d23c:	2301      	movs	r3, #1
 801d23e:	6043      	str	r3, [r0, #4]
  heth.Init.PhyAddress = DP83848I_PHY_ADDRESS;
 801d240:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 801d242:	2200      	movs	r2, #0
 801d244:	f88d 2018 	strb.w	r2, [sp, #24]
  MACAddr[1] = 0x02;
 801d248:	2102      	movs	r1, #2
 801d24a:	f88d 1019 	strb.w	r1, [sp, #25]
  MACAddr[2] = 0xA2;
 801d24e:	21a2      	movs	r1, #162	; 0xa2
 801d250:	f88d 101a 	strb.w	r1, [sp, #26]
  MACAddr[3] = 0x42;
 801d254:	2142      	movs	r1, #66	; 0x42
 801d256:	f88d 101b 	strb.w	r1, [sp, #27]
  MACAddr[4] = 0x50;
 801d25a:	2150      	movs	r1, #80	; 0x50
 801d25c:	f88d 101c 	strb.w	r1, [sp, #28]
  MACAddr[5] = 0xE4;
 801d260:	21e4      	movs	r1, #228	; 0xe4
 801d262:	f88d 101d 	strb.w	r1, [sp, #29]
  heth.Init.MACAddr = &MACAddr[0];
 801d266:	a906      	add	r1, sp, #24
 801d268:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 801d26a:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801d26c:	61c2      	str	r2, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801d26e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801d272:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801d274:	f7f3 fe80 	bl	8010f78 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 801d278:	b928      	cbnz	r0, 801d286 <low_level_init+0x56>
    netif->flags |= NETIF_FLAG_LINK_UP;
 801d27a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801d27e:	f043 0304 	orr.w	r3, r3, #4
 801d282:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801d286:	4f22      	ldr	r7, [pc, #136]	; (801d310 <low_level_init+0xe0>)
 801d288:	2304      	movs	r3, #4
 801d28a:	4a23      	ldr	r2, [pc, #140]	; (801d318 <low_level_init+0xe8>)
 801d28c:	4923      	ldr	r1, [pc, #140]	; (801d31c <low_level_init+0xec>)
 801d28e:	4638      	mov	r0, r7
 801d290:	f7f3 fc66 	bl	8010b60 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801d294:	2304      	movs	r3, #4
 801d296:	4a22      	ldr	r2, [pc, #136]	; (801d320 <low_level_init+0xf0>)
 801d298:	4922      	ldr	r1, [pc, #136]	; (801d324 <low_level_init+0xf4>)
 801d29a:	4638      	mov	r0, r7
 801d29c:	f7f3 fc99 	bl	8010bd2 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801d2a0:	2306      	movs	r3, #6
 801d2a2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801d2a6:	697b      	ldr	r3, [r7, #20]
 801d2a8:	781a      	ldrb	r2, [r3, #0]
 801d2aa:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801d2ae:	785a      	ldrb	r2, [r3, #1]
 801d2b0:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801d2b4:	789a      	ldrb	r2, [r3, #2]
 801d2b6:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801d2ba:	78da      	ldrb	r2, [r3, #3]
 801d2bc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801d2c0:	791a      	ldrb	r2, [r3, #4]
 801d2c2:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801d2c6:	795b      	ldrb	r3, [r3, #5]
 801d2c8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 801d2cc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 801d2d0:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801d2d2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801d2d6:	f043 030a 	orr.w	r3, r3, #10
 801d2da:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  osSemaphoreDef(SEM);
 801d2de:	a808      	add	r0, sp, #32
 801d2e0:	2300      	movs	r3, #0
 801d2e2:	f840 3d0c 	str.w	r3, [r0, #-12]!
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 801d2e6:	2101      	movs	r1, #1
 801d2e8:	f7f5 fcee 	bl	8012cc8 <osSemaphoreCreate>
 801d2ec:	4b0e      	ldr	r3, [pc, #56]	; (801d328 <low_level_init+0xf8>)
 801d2ee:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801d2f0:	466d      	mov	r5, sp
 801d2f2:	4e0e      	ldr	r6, [pc, #56]	; (801d32c <low_level_init+0xfc>)
 801d2f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d2f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d2f8:	6833      	ldr	r3, [r6, #0]
 801d2fa:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 801d2fc:	4621      	mov	r1, r4
 801d2fe:	4668      	mov	r0, sp
 801d300:	f7f5 fc51 	bl	8012ba6 <osThreadCreate>
  HAL_ETH_Start(&heth);
 801d304:	4638      	mov	r0, r7
 801d306:	f7f3 ff63 	bl	80111d0 <HAL_ETH_Start>
}
 801d30a:	b009      	add	sp, #36	; 0x24
 801d30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d30e:	bf00      	nop
 801d310:	2000a3dc 	.word	0x2000a3dc
 801d314:	40028000 	.word	0x40028000
 801d318:	2000a424 	.word	0x2000a424
 801d31c:	20008b0c 	.word	0x20008b0c
 801d320:	20008b8c 	.word	0x20008b8c
 801d324:	2000a35c 	.word	0x2000a35c
 801d328:	2000410c 	.word	0x2000410c
 801d32c:	0801e858 	.word	0x0801e858

0801d330 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 801d330:	6802      	ldr	r2, [r0, #0]
 801d332:	4b29      	ldr	r3, [pc, #164]	; (801d3d8 <HAL_ETH_MspInit+0xa8>)
 801d334:	429a      	cmp	r2, r3
 801d336:	d000      	beq.n	801d33a <HAL_ETH_MspInit+0xa>
 801d338:	4770      	bx	lr
{
 801d33a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d33c:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_ETH_CLK_ENABLE();
 801d33e:	2400      	movs	r4, #0
 801d340:	9400      	str	r4, [sp, #0]
 801d342:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 801d346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d348:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 801d34c:	631a      	str	r2, [r3, #48]	; 0x30
 801d34e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d350:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 801d354:	9200      	str	r2, [sp, #0]
 801d356:	9a00      	ldr	r2, [sp, #0]
 801d358:	9401      	str	r4, [sp, #4]
 801d35a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d35c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801d360:	631a      	str	r2, [r3, #48]	; 0x30
 801d362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d364:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801d368:	9201      	str	r2, [sp, #4]
 801d36a:	9a01      	ldr	r2, [sp, #4]
 801d36c:	9402      	str	r4, [sp, #8]
 801d36e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d370:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801d374:	631a      	str	r2, [r3, #48]	; 0x30
 801d376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d37c:	9302      	str	r3, [sp, #8]
 801d37e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801d380:	2332      	movs	r3, #50	; 0x32
 801d382:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d384:	2702      	movs	r7, #2
 801d386:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d388:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d38a:	2603      	movs	r6, #3
 801d38c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d38e:	250b      	movs	r5, #11
 801d390:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d392:	a903      	add	r1, sp, #12
 801d394:	4811      	ldr	r0, [pc, #68]	; (801d3dc <HAL_ETH_MspInit+0xac>)
 801d396:	f7f4 f90d 	bl	80115b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801d39a:	2386      	movs	r3, #134	; 0x86
 801d39c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d39e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d3a0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d3a2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d3a4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d3a6:	a903      	add	r1, sp, #12
 801d3a8:	480d      	ldr	r0, [pc, #52]	; (801d3e0 <HAL_ETH_MspInit+0xb0>)
 801d3aa:	f7f4 f903 	bl	80115b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 801d3ae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801d3b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d3b4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d3b6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d3b8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d3ba:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801d3bc:	a903      	add	r1, sp, #12
 801d3be:	4809      	ldr	r0, [pc, #36]	; (801d3e4 <HAL_ETH_MspInit+0xb4>)
 801d3c0:	f7f4 f8f8 	bl	80115b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 801d3c4:	4622      	mov	r2, r4
 801d3c6:	2105      	movs	r1, #5
 801d3c8:	203d      	movs	r0, #61	; 0x3d
 801d3ca:	f7f3 f825 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801d3ce:	203d      	movs	r0, #61	; 0x3d
 801d3d0:	f7f3 f854 	bl	801047c <HAL_NVIC_EnableIRQ>
}
 801d3d4:	b009      	add	sp, #36	; 0x24
 801d3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3d8:	40028000 	.word	0x40028000
 801d3dc:	40020800 	.word	0x40020800
 801d3e0:	40020000 	.word	0x40020000
 801d3e4:	40020400 	.word	0x40020400

0801d3e8 <HAL_ETH_RxCpltCallback>:
{
 801d3e8:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 801d3ea:	4b02      	ldr	r3, [pc, #8]	; (801d3f4 <HAL_ETH_RxCpltCallback+0xc>)
 801d3ec:	6818      	ldr	r0, [r3, #0]
 801d3ee:	f7f5 fcb9 	bl	8012d64 <osSemaphoreRelease>
 801d3f2:	bd08      	pop	{r3, pc}
 801d3f4:	2000410c 	.word	0x2000410c

0801d3f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801d3f8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d3fa:	4604      	mov	r4, r0
 801d3fc:	b170      	cbz	r0, 801d41c <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 801d3fe:	2373      	movs	r3, #115	; 0x73
 801d400:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 801d404:	2374      	movs	r3, #116	; 0x74
 801d406:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801d40a:	4b08      	ldr	r3, [pc, #32]	; (801d42c <ethernetif_init+0x34>)
 801d40c:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801d40e:	4b08      	ldr	r3, [pc, #32]	; (801d430 <ethernetif_init+0x38>)
 801d410:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801d412:	4620      	mov	r0, r4
 801d414:	f7ff ff0c 	bl	801d230 <low_level_init>

  return ERR_OK;
}
 801d418:	2000      	movs	r0, #0
 801d41a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d41c:	4b05      	ldr	r3, [pc, #20]	; (801d434 <ethernetif_init+0x3c>)
 801d41e:	f240 2235 	movw	r2, #565	; 0x235
 801d422:	4905      	ldr	r1, [pc, #20]	; (801d438 <ethernetif_init+0x40>)
 801d424:	4805      	ldr	r0, [pc, #20]	; (801d43c <ethernetif_init+0x44>)
 801d426:	f000 fd5e 	bl	801dee6 <iprintf>
 801d42a:	e7e8      	b.n	801d3fe <ethernetif_init+0x6>
 801d42c:	080168e1 	.word	0x080168e1
 801d430:	0801d175 	.word	0x0801d175
 801d434:	08022bf8 	.word	0x08022bf8
 801d438:	0802140c 	.word	0x0802140c
 801d43c:	0801e950 	.word	0x0801e950

0801d440 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 801d440:	b508      	push	{r3, lr}
  return HAL_GetTick();
 801d442:	f7f2 ffbd 	bl	80103c0 <HAL_GetTick>
}
 801d446:	bd08      	pop	{r3, pc}

0801d448 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 801d448:	b530      	push	{r4, r5, lr}
 801d44a:	b083      	sub	sp, #12
  /* init code for LWIP */
  MX_LWIP_Init();
 801d44c:	f000 f948 	bl	801d6e0 <MX_LWIP_Init>

  /* USER CODE BEGIN StartDefaultTask */
	printf("lwIP init completed.\n");
 801d450:	481b      	ldr	r0, [pc, #108]	; (801d4c0 <StartDefaultTask+0x78>)
 801d452:	f000 fd6b 	bl	801df2c <puts>
	struct netconn *conn;
	err_t err;
	conn = netconn_new(NETCONN_TCP);
 801d456:	2200      	movs	r2, #0
 801d458:	4611      	mov	r1, r2
 801d45a:	2010      	movs	r0, #16
 801d45c:	f7f7 fa6e 	bl	801493c <netconn_new_with_proto_and_callback>
	if (conn != NULL) {
 801d460:	b1c0      	cbz	r0, 801d494 <StartDefaultTask+0x4c>
 801d462:	4604      	mov	r4, r0
		err = netconn_bind(conn, IP_ADDR_ANY, 80);
 801d464:	2250      	movs	r2, #80	; 0x50
 801d466:	4917      	ldr	r1, [pc, #92]	; (801d4c4 <StartDefaultTask+0x7c>)
 801d468:	f7f7 fade 	bl	8014a28 <netconn_bind>
		if (err == ERR_OK) {
 801d46c:	b9f0      	cbnz	r0, 801d4ac <StartDefaultTask+0x64>
			netconn_listen(conn);
 801d46e:	21ff      	movs	r1, #255	; 0xff
 801d470:	4620      	mov	r0, r4
 801d472:	f7f7 faff 	bl	8014a74 <netconn_listen_with_backlog>
			sys_thread_new("web_server_thread", web_server_thread, (void*) conn,
 801d476:	2501      	movs	r5, #1
 801d478:	9500      	str	r5, [sp, #0]
 801d47a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d47e:	4622      	mov	r2, r4
 801d480:	4911      	ldr	r1, [pc, #68]	; (801d4c8 <StartDefaultTask+0x80>)
 801d482:	4812      	ldr	r0, [pc, #72]	; (801d4cc <StartDefaultTask+0x84>)
 801d484:	f7ff fab5 	bl	801c9f2 <sys_thread_new>
			DEFAULT_THREAD_STACKSIZE / 4, osPriorityAboveNormal);
			printf("Binding ... OK\n");
 801d488:	4811      	ldr	r0, [pc, #68]	; (801d4d0 <StartDefaultTask+0x88>)
 801d48a:	f000 fd4f 	bl	801df2c <puts>
			osDelay(1);
 801d48e:	4628      	mov	r0, r5
 801d490:	f7f5 fba3 	bl	8012bda <osDelay>
		}
	}

	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 801d494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d498:	f7f5 fb9f 	bl	8012bda <osDelay>
		LogTextNum(SUB_SYS_MEMORY,LOG_LEV_INFO," Current year is ",2018);
 801d49c:	f240 73e2 	movw	r3, #2018	; 0x7e2
 801d4a0:	4a0c      	ldr	r2, [pc, #48]	; (801d4d4 <StartDefaultTask+0x8c>)
 801d4a2:	2103      	movs	r1, #3
 801d4a4:	2000      	movs	r0, #0
 801d4a6:	f000 f8b1 	bl	801d60c <LogTextNum>
 801d4aa:	e7f3      	b.n	801d494 <StartDefaultTask+0x4c>
			netconn_delete(conn);
 801d4ac:	4620      	mov	r0, r4
 801d4ae:	f7f7 faa1 	bl	80149f4 <netconn_delete>
			printf("Binding ... Err\n");
 801d4b2:	4809      	ldr	r0, [pc, #36]	; (801d4d8 <StartDefaultTask+0x90>)
 801d4b4:	f000 fd3a 	bl	801df2c <puts>
			osDelay(1);
 801d4b8:	2001      	movs	r0, #1
 801d4ba:	f7f5 fb8e 	bl	8012bda <osDelay>
 801d4be:	e7e9      	b.n	801d494 <StartDefaultTask+0x4c>
 801d4c0:	08022c14 	.word	0x08022c14
 801d4c4:	08021640 	.word	0x08021640
 801d4c8:	0801e299 	.word	0x0801e299
 801d4cc:	08022c2c 	.word	0x08022c2c
 801d4d0:	08022c40 	.word	0x08022c40
 801d4d4:	08022c60 	.word	0x08022c60
 801d4d8:	08022c50 	.word	0x08022c50

0801d4dc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 801d4dc:	b570      	push	{r4, r5, r6, lr}
 801d4de:	b08a      	sub	sp, #40	; 0x28
	osThreadDef(processTask, StartProcessTask, osPriorityNormal, 0, 1024);
 801d4e0:	4c10      	ldr	r4, [pc, #64]	; (801d524 <MX_FREERTOS_Init+0x48>)
 801d4e2:	ad05      	add	r5, sp, #20
 801d4e4:	4626      	mov	r6, r4
 801d4e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d4e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d4ea:	6833      	ldr	r3, [r6, #0]
 801d4ec:	602b      	str	r3, [r5, #0]
	processTaskHandle = osThreadCreate(osThread(processTask), NULL);
 801d4ee:	2100      	movs	r1, #0
 801d4f0:	a805      	add	r0, sp, #20
 801d4f2:	f7f5 fb58 	bl	8012ba6 <osThreadCreate>
 801d4f6:	4b0c      	ldr	r3, [pc, #48]	; (801d528 <MX_FREERTOS_Init+0x4c>)
 801d4f8:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 801d4fa:	466d      	mov	r5, sp
 801d4fc:	3414      	adds	r4, #20
 801d4fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d502:	6823      	ldr	r3, [r4, #0]
 801d504:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801d506:	2100      	movs	r1, #0
 801d508:	4668      	mov	r0, sp
 801d50a:	f7f5 fb4c 	bl	8012ba6 <osThreadCreate>
 801d50e:	4b07      	ldr	r3, [pc, #28]	; (801d52c <MX_FREERTOS_Init+0x50>)
 801d510:	6018      	str	r0, [r3, #0]
	frames_queue = xQueueCreate(16, sizeof(uint16_t));
 801d512:	2200      	movs	r2, #0
 801d514:	2102      	movs	r1, #2
 801d516:	2010      	movs	r0, #16
 801d518:	f7f6 f8f4 	bl	8013704 <xQueueGenericCreate>
 801d51c:	4b04      	ldr	r3, [pc, #16]	; (801d530 <MX_FREERTOS_Init+0x54>)
 801d51e:	6018      	str	r0, [r3, #0]
}
 801d520:	b00a      	add	sp, #40	; 0x28
 801d522:	bd70      	pop	{r4, r5, r6, pc}
 801d524:	0801e86c 	.word	0x0801e86c
 801d528:	2000bc00 	.word	0x2000bc00
 801d52c:	2000bbf4 	.word	0x2000bbf4
 801d530:	2000bbf8 	.word	0x2000bbf8

0801d534 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801d534:	b530      	push	{r4, r5, lr}
 801d536:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d538:	2400      	movs	r4, #0
 801d53a:	9407      	str	r4, [sp, #28]
 801d53c:	9408      	str	r4, [sp, #32]
 801d53e:	9409      	str	r4, [sp, #36]	; 0x24
 801d540:	940a      	str	r4, [sp, #40]	; 0x28
 801d542:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801d544:	9401      	str	r4, [sp, #4]
 801d546:	4b28      	ldr	r3, [pc, #160]	; (801d5e8 <MX_GPIO_Init+0xb4>)
 801d548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d54a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801d54e:	631a      	str	r2, [r3, #48]	; 0x30
 801d550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d552:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801d556:	9201      	str	r2, [sp, #4]
 801d558:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801d55a:	9402      	str	r4, [sp, #8]
 801d55c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d55e:	f042 0204 	orr.w	r2, r2, #4
 801d562:	631a      	str	r2, [r3, #48]	; 0x30
 801d564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d566:	f002 0204 	and.w	r2, r2, #4
 801d56a:	9202      	str	r2, [sp, #8]
 801d56c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801d56e:	9403      	str	r4, [sp, #12]
 801d570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d572:	f042 0201 	orr.w	r2, r2, #1
 801d576:	631a      	str	r2, [r3, #48]	; 0x30
 801d578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d57a:	f002 0201 	and.w	r2, r2, #1
 801d57e:	9203      	str	r2, [sp, #12]
 801d580:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801d582:	9404      	str	r4, [sp, #16]
 801d584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d586:	f042 0210 	orr.w	r2, r2, #16
 801d58a:	631a      	str	r2, [r3, #48]	; 0x30
 801d58c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d58e:	f002 0210 	and.w	r2, r2, #16
 801d592:	9204      	str	r2, [sp, #16]
 801d594:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801d596:	9405      	str	r4, [sp, #20]
 801d598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d59a:	f042 0202 	orr.w	r2, r2, #2
 801d59e:	631a      	str	r2, [r3, #48]	; 0x30
 801d5a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d5a2:	f002 0202 	and.w	r2, r2, #2
 801d5a6:	9205      	str	r2, [sp, #20]
 801d5a8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801d5aa:	9406      	str	r4, [sp, #24]
 801d5ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d5ae:	f042 0208 	orr.w	r2, r2, #8
 801d5b2:	631a      	str	r2, [r3, #48]	; 0x30
 801d5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d5b6:	f003 0308 	and.w	r3, r3, #8
 801d5ba:	9306      	str	r3, [sp, #24]
 801d5bc:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 801d5be:	4d0b      	ldr	r5, [pc, #44]	; (801d5ec <MX_GPIO_Init+0xb8>)
 801d5c0:	4622      	mov	r2, r4
 801d5c2:	f240 6101 	movw	r1, #1537	; 0x601
 801d5c6:	4628      	mov	r0, r5
 801d5c8:	f7f4 f96a 	bl	80118a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin;
 801d5cc:	f240 6301 	movw	r3, #1537	; 0x601
 801d5d0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d5d2:	2301      	movs	r3, #1
 801d5d4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d5d6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d5d8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801d5da:	a907      	add	r1, sp, #28
 801d5dc:	4628      	mov	r0, r5
 801d5de:	f7f3 ffe9 	bl	80115b4 <HAL_GPIO_Init>

}
 801d5e2:	b00d      	add	sp, #52	; 0x34
 801d5e4:	bd30      	pop	{r4, r5, pc}
 801d5e6:	bf00      	nop
 801d5e8:	40023800 	.word	0x40023800
 801d5ec:	40021000 	.word	0x40021000

0801d5f0 <LogInit>:
static char* txt_lev[NUM_LOG_LEV - 1] = { "OFF", "ERR", "WAR", "INF", };

static char* txt_sys[NUM_OF_SUB_SYS] = { "MEM", "WEB", "458", "TCP", };

void LogInit(UART_HandleTypeDef * log_if) {
	hlog.interface = log_if;
 801d5f0:	4b05      	ldr	r3, [pc, #20]	; (801d608 <LogInit+0x18>)
 801d5f2:	6018      	str	r0, [r3, #0]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 801d5f4:	2300      	movs	r3, #0
 801d5f6:	e004      	b.n	801d602 <LogInit+0x12>
		hlog.levels[i] = LOG_LEV_ALL;
 801d5f8:	4a03      	ldr	r2, [pc, #12]	; (801d608 <LogInit+0x18>)
 801d5fa:	441a      	add	r2, r3
 801d5fc:	2104      	movs	r1, #4
 801d5fe:	7111      	strb	r1, [r2, #4]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 801d600:	3301      	adds	r3, #1
 801d602:	2b03      	cmp	r3, #3
 801d604:	ddf8      	ble.n	801d5f8 <LogInit+0x8>
	}
}
 801d606:	4770      	bx	lr
 801d608:	2000bc04 	.word	0x2000bc04

0801d60c <LogTextNum>:
			vPortFree(ptr);
		}
	}
}

void LogTextNum(log_sub_sys sys, log_level level, char *msg, int number) {
 801d60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (level <= hlog.levels[sys]
 801d610:	4c2d      	ldr	r4, [pc, #180]	; (801d6c8 <LogTextNum+0xbc>)
 801d612:	4404      	add	r4, r0
 801d614:	7924      	ldrb	r4, [r4, #4]
 801d616:	428c      	cmp	r4, r1
 801d618:	d306      	bcc.n	801d628 <LogTextNum+0x1c>
			&& hlog.interface->gState == HAL_UART_STATE_READY) {
 801d61a:	4c2b      	ldr	r4, [pc, #172]	; (801d6c8 <LogTextNum+0xbc>)
 801d61c:	6824      	ldr	r4, [r4, #0]
 801d61e:	f894 4039 	ldrb.w	r4, [r4, #57]	; 0x39
 801d622:	b2e4      	uxtb	r4, r4
 801d624:	2c20      	cmp	r4, #32
 801d626:	d033      	beq.n	801d690 <LogTextNum+0x84>
 801d628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint len = 0;
		uint msg_len = 0;
		char * ptr = msg;
		while (*ptr++) {
			msg_len++;
 801d62c:	3501      	adds	r5, #1
		while (*ptr++) {
 801d62e:	4634      	mov	r4, r6
 801d630:	1c66      	adds	r6, r4, #1
 801d632:	7824      	ldrb	r4, [r4, #0]
 801d634:	2c00      	cmp	r4, #0
 801d636:	d1f9      	bne.n	801d62c <LogTextNum+0x20>
 801d638:	461f      	mov	r7, r3
 801d63a:	4690      	mov	r8, r2
 801d63c:	4689      	mov	r9, r1
 801d63e:	4606      	mov	r6, r0
		}
		ptr -= msg_len + 1;
		ptr = (char*) pvPortMalloc(msg_len + 30);
 801d640:	f105 001e 	add.w	r0, r5, #30
 801d644:	f7f5 feb4 	bl	80133b0 <pvPortMalloc>
		if (ptr != NULL) {
 801d648:	4604      	mov	r4, r0
 801d64a:	2800      	cmp	r0, #0
 801d64c:	d0ec      	beq.n	801d628 <LogTextNum+0x1c>
			strcpy(ptr, txt_sys[sys]);
 801d64e:	4b1f      	ldr	r3, [pc, #124]	; (801d6cc <LogTextNum+0xc0>)
 801d650:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 801d654:	f000 ffe2 	bl	801e61c <strcpy>
			strcpy(ptr + 3, "_");
 801d658:	4b1d      	ldr	r3, [pc, #116]	; (801d6d0 <LogTextNum+0xc4>)
 801d65a:	881b      	ldrh	r3, [r3, #0]
 801d65c:	f8a4 3003 	strh.w	r3, [r4, #3]
			strcpy(ptr + 4, txt_lev[level]);
 801d660:	4b1c      	ldr	r3, [pc, #112]	; (801d6d4 <LogTextNum+0xc8>)
 801d662:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
 801d666:	1d20      	adds	r0, r4, #4
 801d668:	f000 ffd8 	bl	801e61c <strcpy>
			strcpy(ptr + 7, ":");
 801d66c:	4b1a      	ldr	r3, [pc, #104]	; (801d6d8 <LogTextNum+0xcc>)
 801d66e:	881b      	ldrh	r3, [r3, #0]
 801d670:	f8a4 3007 	strh.w	r3, [r4, #7]
			strcpy(ptr + 8, msg);
 801d674:	4641      	mov	r1, r8
 801d676:	f104 0008 	add.w	r0, r4, #8
 801d67a:	f000 ffcf 	bl	801e61c <strcpy>
			itoa(number, ptr + 8 + msg_len, 10);
 801d67e:	f105 0108 	add.w	r1, r5, #8
 801d682:	220a      	movs	r2, #10
 801d684:	4421      	add	r1, r4
 801d686:	4638      	mov	r0, r7
 801d688:	f000 ffa4 	bl	801e5d4 <itoa>
		uint len = 0;
 801d68c:	2200      	movs	r2, #0
			while (*ptr++) {
 801d68e:	e004      	b.n	801d69a <LogTextNum+0x8e>
 801d690:	4614      	mov	r4, r2
 801d692:	2500      	movs	r5, #0
 801d694:	e7cc      	b.n	801d630 <LogTextNum+0x24>
				len++;
 801d696:	3201      	adds	r2, #1
			while (*ptr++) {
 801d698:	461c      	mov	r4, r3
 801d69a:	1c63      	adds	r3, r4, #1
 801d69c:	7821      	ldrb	r1, [r4, #0]
 801d69e:	2900      	cmp	r1, #0
 801d6a0:	d1f9      	bne.n	801d696 <LogTextNum+0x8a>
			}
			ptr -= len + 1;
 801d6a2:	43d5      	mvns	r5, r2
 801d6a4:	441d      	add	r5, r3
			strcpy(ptr + len, "\r\n");
 801d6a6:	4b0d      	ldr	r3, [pc, #52]	; (801d6dc <LogTextNum+0xd0>)
 801d6a8:	8819      	ldrh	r1, [r3, #0]
 801d6aa:	789b      	ldrb	r3, [r3, #2]
 801d6ac:	8021      	strh	r1, [r4, #0]
 801d6ae:	70a3      	strb	r3, [r4, #2]
			HAL_UART_Transmit_DMA(hlog.interface, (uint8_t*) ptr, len + 2);
 801d6b0:	3202      	adds	r2, #2
 801d6b2:	b292      	uxth	r2, r2
 801d6b4:	4629      	mov	r1, r5
 801d6b6:	4b04      	ldr	r3, [pc, #16]	; (801d6c8 <LogTextNum+0xbc>)
 801d6b8:	6818      	ldr	r0, [r3, #0]
 801d6ba:	f7f5 f8d7 	bl	801286c <HAL_UART_Transmit_DMA>
			vPortFree(ptr);
 801d6be:	4628      	mov	r0, r5
 801d6c0:	f7f5 fefa 	bl	80134b8 <vPortFree>
		}
	}
}
 801d6c4:	e7b0      	b.n	801d628 <LogTextNum+0x1c>
 801d6c6:	bf00      	nop
 801d6c8:	2000bc04 	.word	0x2000bc04
 801d6cc:	08022cc8 	.word	0x08022cc8
 801d6d0:	08022c90 	.word	0x08022c90
 801d6d4:	08022cb8 	.word	0x08022cb8
 801d6d8:	08022c94 	.word	0x08022c94
 801d6dc:	08022c8c 	.word	0x08022c8c

0801d6e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801d6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6e2:	b085      	sub	sp, #20
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801d6e4:	4f3b      	ldr	r7, [pc, #236]	; (801d7d4 <MX_LWIP_Init+0xf4>)
 801d6e6:	23c0      	movs	r3, #192	; 0xc0
 801d6e8:	703b      	strb	r3, [r7, #0]
  IP_ADDRESS[1] = 168;
 801d6ea:	23a8      	movs	r3, #168	; 0xa8
 801d6ec:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 4;
 801d6ee:	2304      	movs	r3, #4
 801d6f0:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 253;
 801d6f2:	23fd      	movs	r3, #253	; 0xfd
 801d6f4:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 801d6f6:	4e38      	ldr	r6, [pc, #224]	; (801d7d8 <MX_LWIP_Init+0xf8>)
 801d6f8:	23ff      	movs	r3, #255	; 0xff
 801d6fa:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 801d6fc:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 801d6fe:	70b3      	strb	r3, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 801d700:	2400      	movs	r4, #0
 801d702:	70f4      	strb	r4, [r6, #3]
  GATEWAY_ADDRESS[0] = 0;
 801d704:	4d35      	ldr	r5, [pc, #212]	; (801d7dc <MX_LWIP_Init+0xfc>)
 801d706:	702c      	strb	r4, [r5, #0]
  GATEWAY_ADDRESS[1] = 0;
 801d708:	706c      	strb	r4, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 801d70a:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 0;
 801d70c:	70ec      	strb	r4, [r5, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801d70e:	4621      	mov	r1, r4
 801d710:	4620      	mov	r0, r4
 801d712:	f7f8 fc81 	bl	8016018 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801d716:	783a      	ldrb	r2, [r7, #0]
 801d718:	787b      	ldrb	r3, [r7, #1]
 801d71a:	041b      	lsls	r3, r3, #16
 801d71c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801d720:	78ba      	ldrb	r2, [r7, #2]
 801d722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d726:	78fa      	ldrb	r2, [r7, #3]
 801d728:	4313      	orrs	r3, r2
 801d72a:	021a      	lsls	r2, r3, #8
 801d72c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801d730:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801d734:	0a19      	lsrs	r1, r3, #8
 801d736:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801d73a:	430a      	orrs	r2, r1
 801d73c:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 801d740:	4927      	ldr	r1, [pc, #156]	; (801d7e0 <MX_LWIP_Init+0x100>)
 801d742:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801d744:	7832      	ldrb	r2, [r6, #0]
 801d746:	7873      	ldrb	r3, [r6, #1]
 801d748:	041b      	lsls	r3, r3, #16
 801d74a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801d74e:	78b2      	ldrb	r2, [r6, #2]
 801d750:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d754:	78f2      	ldrb	r2, [r6, #3]
 801d756:	4313      	orrs	r3, r2
 801d758:	021a      	lsls	r2, r3, #8
 801d75a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801d75e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801d762:	0a18      	lsrs	r0, r3, #8
 801d764:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d768:	4302      	orrs	r2, r0
 801d76a:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 801d76e:	4a1d      	ldr	r2, [pc, #116]	; (801d7e4 <MX_LWIP_Init+0x104>)
 801d770:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801d772:	7828      	ldrb	r0, [r5, #0]
 801d774:	786b      	ldrb	r3, [r5, #1]
 801d776:	041b      	lsls	r3, r3, #16
 801d778:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801d77c:	78a8      	ldrb	r0, [r5, #2]
 801d77e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801d782:	78e8      	ldrb	r0, [r5, #3]
 801d784:	4303      	orrs	r3, r0
 801d786:	0218      	lsls	r0, r3, #8
 801d788:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 801d78c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801d790:	0a1d      	lsrs	r5, r3, #8
 801d792:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d796:	4328      	orrs	r0, r5
 801d798:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 801d79c:	4b12      	ldr	r3, [pc, #72]	; (801d7e8 <MX_LWIP_Init+0x108>)
 801d79e:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801d7a0:	4d12      	ldr	r5, [pc, #72]	; (801d7ec <MX_LWIP_Init+0x10c>)
 801d7a2:	4813      	ldr	r0, [pc, #76]	; (801d7f0 <MX_LWIP_Init+0x110>)
 801d7a4:	9002      	str	r0, [sp, #8]
 801d7a6:	4813      	ldr	r0, [pc, #76]	; (801d7f4 <MX_LWIP_Init+0x114>)
 801d7a8:	9001      	str	r0, [sp, #4]
 801d7aa:	9400      	str	r4, [sp, #0]
 801d7ac:	4628      	mov	r0, r5
 801d7ae:	f7fa fc77 	bl	80180a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801d7b2:	4628      	mov	r0, r5
 801d7b4:	f7fa fcb4 	bl	8018120 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801d7b8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 801d7bc:	f013 0f04 	tst.w	r3, #4
 801d7c0:	d104      	bne.n	801d7cc <MX_LWIP_Init+0xec>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801d7c2:	480a      	ldr	r0, [pc, #40]	; (801d7ec <MX_LWIP_Init+0x10c>)
 801d7c4:	f7fa fcc4 	bl	8018150 <netif_set_down>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801d7c8:	b005      	add	sp, #20
 801d7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 801d7cc:	4628      	mov	r0, r5
 801d7ce:	f7fa fcad 	bl	801812c <netif_set_up>
 801d7d2:	e7f9      	b.n	801d7c8 <MX_LWIP_Init+0xe8>
 801d7d4:	2000bc48 	.word	0x2000bc48
 801d7d8:	2000bc44 	.word	0x2000bc44
 801d7dc:	2000bc0c 	.word	0x2000bc0c
 801d7e0:	2000bc40 	.word	0x2000bc40
 801d7e4:	2000bc4c 	.word	0x2000bc4c
 801d7e8:	2000bc50 	.word	0x2000bc50
 801d7ec:	2000bc10 	.word	0x2000bc10
 801d7f0:	08015f61 	.word	0x08015f61
 801d7f4:	0801d3f9 	.word	0x0801d3f9

0801d7f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 801d7f8:	b570      	push	{r4, r5, r6, lr}
 801d7fa:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 801d7fc:	2230      	movs	r2, #48	; 0x30
 801d7fe:	2100      	movs	r1, #0
 801d800:	a808      	add	r0, sp, #32
 801d802:	f000 ff03 	bl	801e60c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 801d806:	2400      	movs	r4, #0
 801d808:	9403      	str	r4, [sp, #12]
 801d80a:	9404      	str	r4, [sp, #16]
 801d80c:	9405      	str	r4, [sp, #20]
 801d80e:	9406      	str	r4, [sp, #24]
 801d810:	9407      	str	r4, [sp, #28]

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 801d812:	9401      	str	r4, [sp, #4]
 801d814:	4b1c      	ldr	r3, [pc, #112]	; (801d888 <SystemClock_Config+0x90>)
 801d816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801d818:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801d81c:	641a      	str	r2, [r3, #64]	; 0x40
 801d81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d824:	9301      	str	r3, [sp, #4]
 801d826:	9b01      	ldr	r3, [sp, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801d828:	9402      	str	r4, [sp, #8]
 801d82a:	4b18      	ldr	r3, [pc, #96]	; (801d88c <SystemClock_Config+0x94>)
 801d82c:	681a      	ldr	r2, [r3, #0]
 801d82e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d832:	601a      	str	r2, [r3, #0]
 801d834:	681b      	ldr	r3, [r3, #0]
 801d836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d83a:	9302      	str	r3, [sp, #8]
 801d83c:	9b02      	ldr	r3, [sp, #8]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801d83e:	2301      	movs	r3, #1
 801d840:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801d842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801d846:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d848:	2502      	movs	r5, #2
 801d84a:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801d84c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801d850:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 801d852:	2319      	movs	r3, #25
 801d854:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 801d856:	f44f 73a8 	mov.w	r3, #336	; 0x150
 801d85a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801d85c:	9512      	str	r5, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 801d85e:	2605      	movs	r6, #5
 801d860:	9613      	str	r6, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 801d862:	a808      	add	r0, sp, #32
 801d864:	f7f4 f826 	bl	80118b4 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 801d868:	230f      	movs	r3, #15
 801d86a:	9303      	str	r3, [sp, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801d86c:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801d86e:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801d870:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801d874:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801d876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d87a:	9307      	str	r3, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 801d87c:	4631      	mov	r1, r6
 801d87e:	a803      	add	r0, sp, #12
 801d880:	f7f4 fa36 	bl	8011cf0 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 801d884:	b014      	add	sp, #80	; 0x50
 801d886:	bd70      	pop	{r4, r5, r6, pc}
 801d888:	40023800 	.word	0x40023800
 801d88c:	40007000 	.word	0x40007000

0801d890 <main>:
{
 801d890:	b508      	push	{r3, lr}
	HAL_Init();
 801d892:	f7f2 fd6f 	bl	8010374 <HAL_Init>
	SystemClock_Config();
 801d896:	f7ff ffaf 	bl	801d7f8 <SystemClock_Config>
	HAL_FLASH_Unlock();
 801d89a:	f7f3 fd4b 	bl	8011334 <HAL_FLASH_Unlock>
	if (EE_Init() == HAL_OK) {
 801d89e:	f7ff fa35 	bl	801cd0c <EE_Init>
 801d8a2:	b9c0      	cbnz	r0, 801d8d6 <main+0x46>
		printf("EEPROM emulation init ... OK\n");
 801d8a4:	480e      	ldr	r0, [pc, #56]	; (801d8e0 <main+0x50>)
 801d8a6:	f000 fb41 	bl	801df2c <puts>
	FlashInit();
 801d8aa:	f7ff f917 	bl	801cadc <FlashInit>
	MX_GPIO_Init();
 801d8ae:	f7ff fe41 	bl	801d534 <MX_GPIO_Init>
	MX_DMA_Init();
 801d8b2:	f7ff f957 	bl	801cb64 <MX_DMA_Init>
	MX_UART5_Init();
 801d8b6:	f000 fb55 	bl	801df64 <MX_UART5_Init>
	MX_TIM8_Init();
 801d8ba:	f000 f9bf 	bl	801dc3c <MX_TIM8_Init>
	MX_TIM7_Init();
 801d8be:	f000 f997 	bl	801dbf0 <MX_TIM7_Init>
	MX_USART1_UART_Init();
 801d8c2:	f000 fb6f 	bl	801dfa4 <MX_USART1_UART_Init>
	LogInit(&huart1);
 801d8c6:	4807      	ldr	r0, [pc, #28]	; (801d8e4 <main+0x54>)
 801d8c8:	f7ff fe92 	bl	801d5f0 <LogInit>
	MX_FREERTOS_Init();
 801d8cc:	f7ff fe06 	bl	801d4dc <MX_FREERTOS_Init>
	osKernelStart();
 801d8d0:	f7f5 f95a 	bl	8012b88 <osKernelStart>
 801d8d4:	e7fe      	b.n	801d8d4 <main+0x44>
		printf("EEPROM emulation init ... ERROR\n");
 801d8d6:	4804      	ldr	r0, [pc, #16]	; (801d8e8 <main+0x58>)
 801d8d8:	f000 fb28 	bl	801df2c <puts>
 801d8dc:	e7e5      	b.n	801d8aa <main+0x1a>
 801d8de:	bf00      	nop
 801d8e0:	08022cd8 	.word	0x08022cd8
 801d8e4:	2000bdbc 	.word	0x2000bdbc
 801d8e8:	08022cf8 	.word	0x08022cf8

0801d8ec <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 801d8ec:	b510      	push	{r4, lr}
 801d8ee:	4604      	mov	r4, r0
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 801d8f0:	6802      	ldr	r2, [r0, #0]
 801d8f2:	4b07      	ldr	r3, [pc, #28]	; (801d910 <HAL_TIM_PeriodElapsedCallback+0x24>)
 801d8f4:	429a      	cmp	r2, r3
 801d8f6:	d004      	beq.n	801d902 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM8) {
 801d8f8:	6822      	ldr	r2, [r4, #0]
 801d8fa:	4b06      	ldr	r3, [pc, #24]	; (801d914 <HAL_TIM_PeriodElapsedCallback+0x28>)
 801d8fc:	429a      	cmp	r2, r3
 801d8fe:	d003      	beq.n	801d908 <HAL_TIM_PeriodElapsedCallback+0x1c>
 801d900:	bd10      	pop	{r4, pc}
		HAL_IncTick();
 801d902:	f7f2 fd51 	bl	80103a8 <HAL_IncTick>
 801d906:	e7f7      	b.n	801d8f8 <HAL_TIM_PeriodElapsedCallback+0xc>
		CommandProcess();
 801d908:	f000 f808 	bl	801d91c <CommandProcess>
	}
	/* USER CODE END Callback 1 */
}
 801d90c:	e7f8      	b.n	801d900 <HAL_TIM_PeriodElapsedCallback+0x14>
 801d90e:	bf00      	nop
 801d910:	40010000 	.word	0x40010000
 801d914:	40010400 	.word	0x40010400

0801d918 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 801d918:	4770      	bx	lr
	...

0801d91c <CommandProcess>:
uint8_t received_byte;
circbuff inbuf_UART;

extern xQueueHandle frames_queue;

inline void CommandProcess() {
 801d91c:	b530      	push	{r4, r5, lr}
 801d91e:	b083      	sub	sp, #12
	static portBASE_TYPE xHigherPriorityTaskWoken;
	uint32_t len;
	xHigherPriorityTaskWoken = pdFALSE;
 801d920:	4c10      	ldr	r4, [pc, #64]	; (801d964 <CommandProcess+0x48>)
 801d922:	2500      	movs	r5, #0
 801d924:	6025      	str	r5, [r4, #0]
	HAL_TIM_Base_Stop_IT(&htim8);
 801d926:	4810      	ldr	r0, [pc, #64]	; (801d968 <CommandProcess+0x4c>)
 801d928:	f7f4 fb19 	bl	8011f5e <HAL_TIM_Base_Stop_IT>
	len = CB_Data_Length(&inbuf_UART);
 801d92c:	480f      	ldr	r0, [pc, #60]	; (801d96c <CommandProcess+0x50>)
 801d92e:	f7ff f8a3 	bl	801ca78 <CB_Data_Length>
 801d932:	a902      	add	r1, sp, #8
 801d934:	f841 0d04 	str.w	r0, [r1, #-4]!
	xQueueSendFromISR(frames_queue, &len, &xHigherPriorityTaskWoken);
 801d938:	462b      	mov	r3, r5
 801d93a:	4622      	mov	r2, r4
 801d93c:	480c      	ldr	r0, [pc, #48]	; (801d970 <CommandProcess+0x54>)
 801d93e:	6800      	ldr	r0, [r0, #0]
 801d940:	f7f5 ffdf 	bl	8013902 <xQueueGenericSendFromISR>
	if (xHigherPriorityTaskWoken == pdTRUE) {
 801d944:	6823      	ldr	r3, [r4, #0]
 801d946:	2b01      	cmp	r3, #1
 801d948:	d001      	beq.n	801d94e <CommandProcess+0x32>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 801d94a:	b003      	add	sp, #12
 801d94c:	bd30      	pop	{r4, r5, pc}
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d94e:	2b00      	cmp	r3, #0
 801d950:	d0fb      	beq.n	801d94a <CommandProcess+0x2e>
 801d952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d956:	4b07      	ldr	r3, [pc, #28]	; (801d974 <CommandProcess+0x58>)
 801d958:	601a      	str	r2, [r3, #0]
 801d95a:	f3bf 8f4f 	dsb	sy
 801d95e:	f3bf 8f6f 	isb	sy
}
 801d962:	e7f2      	b.n	801d94a <CommandProcess+0x2e>
 801d964:	20004110 	.word	0x20004110
 801d968:	2000bca4 	.word	0x2000bca4
 801d96c:	2000bc58 	.word	0x2000bc58
 801d970:	2000bbf8 	.word	0x2000bbf8
 801d974:	e000ed04 	.word	0xe000ed04

0801d978 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == &huart5)
 801d978:	4b0a      	ldr	r3, [pc, #40]	; (801d9a4 <HAL_UART_RxCpltCallback+0x2c>)
 801d97a:	4283      	cmp	r3, r0
 801d97c:	d000      	beq.n	801d980 <HAL_UART_RxCpltCallback+0x8>
 801d97e:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801d980:	b510      	push	{r4, lr}
	{
		CB_Write(&inbuf_UART, received_byte);
 801d982:	4c09      	ldr	r4, [pc, #36]	; (801d9a8 <HAL_UART_RxCpltCallback+0x30>)
 801d984:	7821      	ldrb	r1, [r4, #0]
 801d986:	4809      	ldr	r0, [pc, #36]	; (801d9ac <HAL_UART_RxCpltCallback+0x34>)
 801d988:	f7ff f87e 	bl	801ca88 <CB_Write>
		HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801d98c:	2201      	movs	r2, #1
 801d98e:	4621      	mov	r1, r4
 801d990:	4804      	ldr	r0, [pc, #16]	; (801d9a4 <HAL_UART_RxCpltCallback+0x2c>)
 801d992:	f7f4 ff41 	bl	8012818 <HAL_UART_Receive_IT>
		__HAL_TIM_SET_COUNTER(&htim8, 0x00U);
 801d996:	4806      	ldr	r0, [pc, #24]	; (801d9b0 <HAL_UART_RxCpltCallback+0x38>)
 801d998:	6803      	ldr	r3, [r0, #0]
 801d99a:	2200      	movs	r2, #0
 801d99c:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim8);
 801d99e:	f7f4 fad2 	bl	8011f46 <HAL_TIM_Base_Start_IT>
 801d9a2:	bd10      	pop	{r4, pc}
 801d9a4:	2000bd7c 	.word	0x2000bd7c
 801d9a8:	2000bc54 	.word	0x2000bc54
 801d9ac:	2000bc58 	.word	0x2000bc58
 801d9b0:	2000bca4 	.word	0x2000bca4

0801d9b4 <StartProcessTask>:
	}

}

void StartProcessTask(void const * argument) {
 801d9b4:	b500      	push	{lr}
 801d9b6:	b083      	sub	sp, #12
	uint32_t len;
	cb_err err = NO_ERR;
	err = CB_Init(&inbuf_UART, UART_BUFF_SIZE);
 801d9b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d9bc:	4812      	ldr	r0, [pc, #72]	; (801da08 <StartProcessTask+0x54>)
 801d9be:	f7ff f845 	bl	801ca4c <CB_Init>
	if (err != NO_ERR) {
 801d9c2:	b110      	cbz	r0, 801d9ca <StartProcessTask+0x16>
		printf("Buffer allocation error");
 801d9c4:	4811      	ldr	r0, [pc, #68]	; (801da0c <StartProcessTask+0x58>)
 801d9c6:	f000 fa8e 	bl	801dee6 <iprintf>
	}
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801d9ca:	2201      	movs	r2, #1
 801d9cc:	4910      	ldr	r1, [pc, #64]	; (801da10 <StartProcessTask+0x5c>)
 801d9ce:	4811      	ldr	r0, [pc, #68]	; (801da14 <StartProcessTask+0x60>)
 801d9d0:	f7f4 ff22 	bl	8012818 <HAL_UART_Receive_IT>
 801d9d4:	e00f      	b.n	801d9f6 <StartProcessTask+0x42>
	for (;;) {
		xQueueReceive(frames_queue, &len, portMAX_DELAY);

		while (len) {
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 801d9d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d9da:	480f      	ldr	r0, [pc, #60]	; (801da18 <StartProcessTask+0x64>)
 801d9dc:	f7f3 ff66 	bl	80118ac <HAL_GPIO_TogglePin>
			uint8_t ch;
			CB_Read(&inbuf_UART, &ch);
 801d9e0:	f10d 0103 	add.w	r1, sp, #3
 801d9e4:	4808      	ldr	r0, [pc, #32]	; (801da08 <StartProcessTask+0x54>)
 801d9e6:	f7ff f865 	bl	801cab4 <CB_Read>
			--len;
 801d9ea:	9b01      	ldr	r3, [sp, #4]
 801d9ec:	3b01      	subs	r3, #1
 801d9ee:	9301      	str	r3, [sp, #4]
		while (len) {
 801d9f0:	9b01      	ldr	r3, [sp, #4]
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d1ef      	bne.n	801d9d6 <StartProcessTask+0x22>
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	f04f 32ff 	mov.w	r2, #4294967295
 801d9fc:	a901      	add	r1, sp, #4
 801d9fe:	4807      	ldr	r0, [pc, #28]	; (801da1c <StartProcessTask+0x68>)
 801da00:	6800      	ldr	r0, [r0, #0]
 801da02:	f7f6 f84b 	bl	8013a9c <xQueueGenericReceive>
		while (len) {
 801da06:	e7f3      	b.n	801d9f0 <StartProcessTask+0x3c>
 801da08:	2000bc58 	.word	0x2000bc58
 801da0c:	08022d18 	.word	0x08022d18
 801da10:	2000bc54 	.word	0x2000bc54
 801da14:	2000bd7c 	.word	0x2000bd7c
 801da18:	40021000 	.word	0x40021000
 801da1c:	2000bbf8 	.word	0x2000bbf8

0801da20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801da20:	b500      	push	{lr}
 801da22:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801da24:	2200      	movs	r2, #0
 801da26:	9200      	str	r2, [sp, #0]
 801da28:	4b0d      	ldr	r3, [pc, #52]	; (801da60 <HAL_MspInit+0x40>)
 801da2a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801da2c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 801da30:	6459      	str	r1, [r3, #68]	; 0x44
 801da32:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801da34:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 801da38:	9100      	str	r1, [sp, #0]
 801da3a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801da3c:	9201      	str	r2, [sp, #4]
 801da3e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801da40:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801da44:	6419      	str	r1, [r3, #64]	; 0x40
 801da46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801da4c:	9301      	str	r3, [sp, #4]
 801da4e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801da50:	210f      	movs	r1, #15
 801da52:	f06f 0001 	mvn.w	r0, #1
 801da56:	f7f2 fcdf 	bl	8010418 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801da5a:	b003      	add	sp, #12
 801da5c:	f85d fb04 	ldr.w	pc, [sp], #4
 801da60:	40023800 	.word	0x40023800

0801da64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801da64:	b510      	push	{r4, lr}
 801da66:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 801da68:	2200      	movs	r2, #0
 801da6a:	4601      	mov	r1, r0
 801da6c:	2019      	movs	r0, #25
 801da6e:	f7f2 fcd3 	bl	8010418 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 801da72:	2019      	movs	r0, #25
 801da74:	f7f2 fd02 	bl	801047c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 801da78:	2400      	movs	r4, #0
 801da7a:	9401      	str	r4, [sp, #4]
 801da7c:	4b14      	ldr	r3, [pc, #80]	; (801dad0 <HAL_InitTick+0x6c>)
 801da7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801da80:	f042 0201 	orr.w	r2, r2, #1
 801da84:	645a      	str	r2, [r3, #68]	; 0x44
 801da86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da88:	f003 0301 	and.w	r3, r3, #1
 801da8c:	9301      	str	r3, [sp, #4]
 801da8e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801da90:	a902      	add	r1, sp, #8
 801da92:	a803      	add	r0, sp, #12
 801da94:	f7f4 f9fe 	bl	8011e94 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 801da98:	f7f4 f9ec 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 801da9c:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801da9e:	480d      	ldr	r0, [pc, #52]	; (801dad4 <HAL_InitTick+0x70>)
 801daa0:	fba0 2303 	umull	r2, r3, r0, r3
 801daa4:	0c9b      	lsrs	r3, r3, #18
 801daa6:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 801daa8:	480b      	ldr	r0, [pc, #44]	; (801dad8 <HAL_InitTick+0x74>)
 801daaa:	4a0c      	ldr	r2, [pc, #48]	; (801dadc <HAL_InitTick+0x78>)
 801daac:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 801daae:	f240 32e7 	movw	r2, #999	; 0x3e7
 801dab2:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801dab4:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 801dab6:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801dab8:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 801daba:	f7f4 fc39 	bl	8012330 <HAL_TIM_Base_Init>
 801dabe:	b110      	cbz	r0, 801dac6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 801dac0:	2001      	movs	r0, #1
}
 801dac2:	b008      	add	sp, #32
 801dac4:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 801dac6:	4804      	ldr	r0, [pc, #16]	; (801dad8 <HAL_InitTick+0x74>)
 801dac8:	f7f4 fa3d 	bl	8011f46 <HAL_TIM_Base_Start_IT>
 801dacc:	e7f9      	b.n	801dac2 <HAL_InitTick+0x5e>
 801dace:	bf00      	nop
 801dad0:	40023800 	.word	0x40023800
 801dad4:	431bde83 	.word	0x431bde83
 801dad8:	2000bc68 	.word	0x2000bc68
 801dadc:	40010000 	.word	0x40010000

0801dae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801dae0:	4770      	bx	lr

0801dae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801dae2:	e7fe      	b.n	801dae2 <HardFault_Handler>

0801dae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801dae4:	e7fe      	b.n	801dae4 <MemManage_Handler>

0801dae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801dae6:	e7fe      	b.n	801dae6 <BusFault_Handler>

0801dae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801dae8:	e7fe      	b.n	801dae8 <UsageFault_Handler>

0801daea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801daea:	4770      	bx	lr

0801daec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 801daec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801daee:	4802      	ldr	r0, [pc, #8]	; (801daf8 <TIM1_UP_TIM10_IRQHandler+0xc>)
 801daf0:	f7f4 fad3 	bl	801209a <HAL_TIM_IRQHandler>
 801daf4:	bd08      	pop	{r3, pc}
 801daf6:	bf00      	nop
 801daf8:	2000bc68 	.word	0x2000bc68

0801dafc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 801dafc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801dafe:	4802      	ldr	r0, [pc, #8]	; (801db08 <USART1_IRQHandler+0xc>)
 801db00:	f7f4 ff9e 	bl	8012a40 <HAL_UART_IRQHandler>
 801db04:	bd08      	pop	{r3, pc}
 801db06:	bf00      	nop
 801db08:	2000bdbc 	.word	0x2000bdbc

0801db0c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 801db0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801db0e:	4802      	ldr	r0, [pc, #8]	; (801db18 <TIM8_UP_TIM13_IRQHandler+0xc>)
 801db10:	f7f4 fac3 	bl	801209a <HAL_TIM_IRQHandler>
 801db14:	bd08      	pop	{r3, pc}
 801db16:	bf00      	nop
 801db18:	2000bca4 	.word	0x2000bca4

0801db1c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 801db1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 801db1e:	4802      	ldr	r0, [pc, #8]	; (801db28 <UART5_IRQHandler+0xc>)
 801db20:	f7f4 ff8e 	bl	8012a40 <HAL_UART_IRQHandler>
 801db24:	bd08      	pop	{r3, pc}
 801db26:	bf00      	nop
 801db28:	2000bd7c 	.word	0x2000bd7c

0801db2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 801db2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801db2e:	4802      	ldr	r0, [pc, #8]	; (801db38 <TIM7_IRQHandler+0xc>)
 801db30:	f7f4 fab3 	bl	801209a <HAL_TIM_IRQHandler>
 801db34:	bd08      	pop	{r3, pc}
 801db36:	bf00      	nop
 801db38:	2000bce0 	.word	0x2000bce0

0801db3c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 801db3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 801db3e:	4802      	ldr	r0, [pc, #8]	; (801db48 <ETH_IRQHandler+0xc>)
 801db40:	f7f3 f95e 	bl	8010e00 <HAL_ETH_IRQHandler>
 801db44:	bd08      	pop	{r3, pc}
 801db46:	bf00      	nop
 801db48:	2000a3dc 	.word	0x2000a3dc

0801db4c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 801db4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 801db4e:	4802      	ldr	r0, [pc, #8]	; (801db58 <DMA2_Stream7_IRQHandler+0xc>)
 801db50:	f7f2 fe0c 	bl	801076c <HAL_DMA_IRQHandler>
 801db54:	bd08      	pop	{r3, pc}
 801db56:	bf00      	nop
 801db58:	2000bd1c 	.word	0x2000bd1c

0801db5c <_write>:
	}

	return len;
}

int _write(int file, char *ptr, int len) {
 801db5c:	b430      	push	{r4, r5}
	int i = 0;
	for (i = 0; i < len; i++)
 801db5e:	2400      	movs	r4, #0
 801db60:	e00a      	b.n	801db78 <_write+0x1c>
  __ASM volatile ("nop");
 801db62:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 801db64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	d0f9      	beq.n	801db62 <_write+0x6>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 801db6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801db72:	7019      	strb	r1, [r3, #0]
 801db74:	3401      	adds	r4, #1
		ITM_SendChar((*ptr++));
 801db76:	4629      	mov	r1, r5
	for (i = 0; i < len; i++)
 801db78:	4294      	cmp	r4, r2
 801db7a:	da10      	bge.n	801db9e <_write+0x42>
		ITM_SendChar((*ptr++));
 801db7c:	1c4d      	adds	r5, r1, #1
 801db7e:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801db80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801db84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 801db88:	f013 0f01 	tst.w	r3, #1
 801db8c:	d0f2      	beq.n	801db74 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801db8e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801db92:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801db96:	f013 0f01 	tst.w	r3, #1
 801db9a:	d1e3      	bne.n	801db64 <_write+0x8>
 801db9c:	e7ea      	b.n	801db74 <_write+0x18>
	return len;
}
 801db9e:	4610      	mov	r0, r2
 801dba0:	bc30      	pop	{r4, r5}
 801dba2:	4770      	bx	lr

0801dba4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801dba4:	490f      	ldr	r1, [pc, #60]	; (801dbe4 <SystemInit+0x40>)
 801dba6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801dbaa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801dbae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801dbb2:	4b0d      	ldr	r3, [pc, #52]	; (801dbe8 <SystemInit+0x44>)
 801dbb4:	681a      	ldr	r2, [r3, #0]
 801dbb6:	f042 0201 	orr.w	r2, r2, #1
 801dbba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801dbbc:	2000      	movs	r0, #0
 801dbbe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801dbc0:	681a      	ldr	r2, [r3, #0]
 801dbc2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801dbc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801dbca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801dbcc:	4a07      	ldr	r2, [pc, #28]	; (801dbec <SystemInit+0x48>)
 801dbce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801dbd0:	681a      	ldr	r2, [r3, #0]
 801dbd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801dbd6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801dbd8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801dbda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801dbde:	608b      	str	r3, [r1, #8]
 801dbe0:	4770      	bx	lr
 801dbe2:	bf00      	nop
 801dbe4:	e000ed00 	.word	0xe000ed00
 801dbe8:	40023800 	.word	0x40023800
 801dbec:	24003010 	.word	0x24003010

0801dbf0 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 801dbf0:	b500      	push	{lr}
 801dbf2:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801dbf4:	2300      	movs	r3, #0
 801dbf6:	9300      	str	r3, [sp, #0]
 801dbf8:	9301      	str	r3, [sp, #4]

  htim7.Instance = TIM7;
 801dbfa:	480e      	ldr	r0, [pc, #56]	; (801dc34 <MX_TIM7_Init+0x44>)
 801dbfc:	4a0e      	ldr	r2, [pc, #56]	; (801dc38 <MX_TIM7_Init+0x48>)
 801dbfe:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 801dc00:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801dc02:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 840;
 801dc04:	f44f 7352 	mov.w	r3, #840	; 0x348
 801dc08:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801dc0a:	f7f4 fb91 	bl	8012330 <HAL_TIM_Base_Init>
 801dc0e:	b950      	cbnz	r0, 801dc26 <MX_TIM7_Init+0x36>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801dc10:	2300      	movs	r3, #0
 801dc12:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801dc14:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801dc16:	4669      	mov	r1, sp
 801dc18:	4806      	ldr	r0, [pc, #24]	; (801dc34 <MX_TIM7_Init+0x44>)
 801dc1a:	f7f4 fba2 	bl	8012362 <HAL_TIMEx_MasterConfigSynchronization>
 801dc1e:	b928      	cbnz	r0, 801dc2c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }

}
 801dc20:	b003      	add	sp, #12
 801dc22:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801dc26:	f7ff fe77 	bl	801d918 <Error_Handler>
 801dc2a:	e7f1      	b.n	801dc10 <MX_TIM7_Init+0x20>
    Error_Handler();
 801dc2c:	f7ff fe74 	bl	801d918 <Error_Handler>
}
 801dc30:	e7f6      	b.n	801dc20 <MX_TIM7_Init+0x30>
 801dc32:	bf00      	nop
 801dc34:	2000bce0 	.word	0x2000bce0
 801dc38:	40001400 	.word	0x40001400

0801dc3c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 801dc3c:	b500      	push	{lr}
 801dc3e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801dc40:	2300      	movs	r3, #0
 801dc42:	9302      	str	r3, [sp, #8]
 801dc44:	9303      	str	r3, [sp, #12]
 801dc46:	9304      	str	r3, [sp, #16]
 801dc48:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801dc4a:	9300      	str	r3, [sp, #0]
 801dc4c:	9301      	str	r3, [sp, #4]

  htim8.Instance = TIM8;
 801dc4e:	4815      	ldr	r0, [pc, #84]	; (801dca4 <MX_TIM8_Init+0x68>)
 801dc50:	4a15      	ldr	r2, [pc, #84]	; (801dca8 <MX_TIM8_Init+0x6c>)
 801dc52:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 0;
 801dc54:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801dc56:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 27720;
 801dc58:	f646 4248 	movw	r2, #27720	; 0x6c48
 801dc5c:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801dc5e:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 801dc60:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801dc62:	f7f4 fb65 	bl	8012330 <HAL_TIM_Base_Init>
 801dc66:	b998      	cbnz	r0, 801dc90 <MX_TIM8_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801dc68:	a906      	add	r1, sp, #24
 801dc6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801dc6e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801dc72:	480c      	ldr	r0, [pc, #48]	; (801dca4 <MX_TIM8_Init+0x68>)
 801dc74:	f7f4 f989 	bl	8011f8a <HAL_TIM_ConfigClockSource>
 801dc78:	b968      	cbnz	r0, 801dc96 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801dc7a:	2300      	movs	r3, #0
 801dc7c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801dc7e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801dc80:	4669      	mov	r1, sp
 801dc82:	4808      	ldr	r0, [pc, #32]	; (801dca4 <MX_TIM8_Init+0x68>)
 801dc84:	f7f4 fb6d 	bl	8012362 <HAL_TIMEx_MasterConfigSynchronization>
 801dc88:	b940      	cbnz	r0, 801dc9c <MX_TIM8_Init+0x60>
  {
    Error_Handler();
  }

}
 801dc8a:	b007      	add	sp, #28
 801dc8c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801dc90:	f7ff fe42 	bl	801d918 <Error_Handler>
 801dc94:	e7e8      	b.n	801dc68 <MX_TIM8_Init+0x2c>
    Error_Handler();
 801dc96:	f7ff fe3f 	bl	801d918 <Error_Handler>
 801dc9a:	e7ee      	b.n	801dc7a <MX_TIM8_Init+0x3e>
    Error_Handler();
 801dc9c:	f7ff fe3c 	bl	801d918 <Error_Handler>
}
 801dca0:	e7f3      	b.n	801dc8a <MX_TIM8_Init+0x4e>
 801dca2:	bf00      	nop
 801dca4:	2000bca4 	.word	0x2000bca4
 801dca8:	40010400 	.word	0x40010400

0801dcac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801dcac:	b500      	push	{lr}
 801dcae:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM7)
 801dcb0:	6803      	ldr	r3, [r0, #0]
 801dcb2:	4a18      	ldr	r2, [pc, #96]	; (801dd14 <HAL_TIM_Base_MspInit+0x68>)
 801dcb4:	4293      	cmp	r3, r2
 801dcb6:	d005      	beq.n	801dcc4 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 801dcb8:	4a17      	ldr	r2, [pc, #92]	; (801dd18 <HAL_TIM_Base_MspInit+0x6c>)
 801dcba:	4293      	cmp	r3, r2
 801dcbc:	d016      	beq.n	801dcec <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 801dcbe:	b003      	add	sp, #12
 801dcc0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 801dcc4:	2200      	movs	r2, #0
 801dcc6:	9200      	str	r2, [sp, #0]
 801dcc8:	4b14      	ldr	r3, [pc, #80]	; (801dd1c <HAL_TIM_Base_MspInit+0x70>)
 801dcca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801dccc:	f041 0120 	orr.w	r1, r1, #32
 801dcd0:	6419      	str	r1, [r3, #64]	; 0x40
 801dcd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dcd4:	f003 0320 	and.w	r3, r3, #32
 801dcd8:	9300      	str	r3, [sp, #0]
 801dcda:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 801dcdc:	2105      	movs	r1, #5
 801dcde:	2037      	movs	r0, #55	; 0x37
 801dce0:	f7f2 fb9a 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801dce4:	2037      	movs	r0, #55	; 0x37
 801dce6:	f7f2 fbc9 	bl	801047c <HAL_NVIC_EnableIRQ>
 801dcea:	e7e8      	b.n	801dcbe <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801dcec:	2200      	movs	r2, #0
 801dcee:	9201      	str	r2, [sp, #4]
 801dcf0:	4b0a      	ldr	r3, [pc, #40]	; (801dd1c <HAL_TIM_Base_MspInit+0x70>)
 801dcf2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801dcf4:	f041 0102 	orr.w	r1, r1, #2
 801dcf8:	6459      	str	r1, [r3, #68]	; 0x44
 801dcfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dcfc:	f003 0302 	and.w	r3, r3, #2
 801dd00:	9301      	str	r3, [sp, #4]
 801dd02:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 801dd04:	2105      	movs	r1, #5
 801dd06:	202c      	movs	r0, #44	; 0x2c
 801dd08:	f7f2 fb86 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801dd0c:	202c      	movs	r0, #44	; 0x2c
 801dd0e:	f7f2 fbb5 	bl	801047c <HAL_NVIC_EnableIRQ>
}
 801dd12:	e7d4      	b.n	801dcbe <HAL_TIM_Base_MspInit+0x12>
 801dd14:	40001400 	.word	0x40001400
 801dd18:	40010400 	.word	0x40010400
 801dd1c:	40023800 	.word	0x40023800

0801dd20 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 801dd20:	b470      	push	{r4, r5, r6}
	int div = 1;
 801dd22:	2301      	movs	r3, #1
	while (d/div >= base)
 801dd24:	e001      	b.n	801dd2a <ts_itoa+0xa>
		div *= base;
 801dd26:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 801dd2a:	fbb1 f4f3 	udiv	r4, r1, r3
 801dd2e:	4294      	cmp	r4, r2
 801dd30:	d2f9      	bcs.n	801dd26 <ts_itoa+0x6>
 801dd32:	e004      	b.n	801dd3e <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 801dd34:	6805      	ldr	r5, [r0, #0]
 801dd36:	1c6e      	adds	r6, r5, #1
 801dd38:	6006      	str	r6, [r0, #0]
 801dd3a:	3430      	adds	r4, #48	; 0x30
 801dd3c:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 801dd3e:	b16b      	cbz	r3, 801dd5c <ts_itoa+0x3c>
		int num = d/div;
 801dd40:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 801dd44:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 801dd48:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 801dd4c:	2c09      	cmp	r4, #9
 801dd4e:	ddf1      	ble.n	801dd34 <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 801dd50:	6805      	ldr	r5, [r0, #0]
 801dd52:	1c6e      	adds	r6, r5, #1
 801dd54:	6006      	str	r6, [r0, #0]
 801dd56:	3437      	adds	r4, #55	; 0x37
 801dd58:	702c      	strb	r4, [r5, #0]
 801dd5a:	e7f0      	b.n	801dd3e <ts_itoa+0x1e>
	}
}
 801dd5c:	bc70      	pop	{r4, r5, r6}
 801dd5e:	4770      	bx	lr

0801dd60 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 801dd60:	b530      	push	{r4, r5, lr}
 801dd62:	b083      	sub	sp, #12
 801dd64:	9001      	str	r0, [sp, #4]
 801dd66:	460c      	mov	r4, r1
 801dd68:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 801dd6a:	4605      	mov	r5, r0
	while(*fmt)
 801dd6c:	e03e      	b.n	801ddec <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 801dd6e:	7863      	ldrb	r3, [r4, #1]
 801dd70:	2b64      	cmp	r3, #100	; 0x64
 801dd72:	d01c      	beq.n	801ddae <ts_formatstring+0x4e>
 801dd74:	d90d      	bls.n	801dd92 <ts_formatstring+0x32>
 801dd76:	2b73      	cmp	r3, #115	; 0x73
 801dd78:	d04a      	beq.n	801de10 <ts_formatstring+0xb0>
 801dd7a:	d916      	bls.n	801ddaa <ts_formatstring+0x4a>
 801dd7c:	2b75      	cmp	r3, #117	; 0x75
 801dd7e:	d121      	bne.n	801ddc4 <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 801dd80:	9b00      	ldr	r3, [sp, #0]
 801dd82:	1d1a      	adds	r2, r3, #4
 801dd84:	9200      	str	r2, [sp, #0]
 801dd86:	220a      	movs	r2, #10
 801dd88:	6819      	ldr	r1, [r3, #0]
 801dd8a:	a801      	add	r0, sp, #4
 801dd8c:	f7ff ffc8 	bl	801dd20 <ts_itoa>
				break;
 801dd90:	e02b      	b.n	801ddea <ts_formatstring+0x8a>
			switch (*(++fmt))
 801dd92:	2b58      	cmp	r3, #88	; 0x58
 801dd94:	d018      	beq.n	801ddc8 <ts_formatstring+0x68>
 801dd96:	2b63      	cmp	r3, #99	; 0x63
 801dd98:	d01f      	beq.n	801ddda <ts_formatstring+0x7a>
 801dd9a:	2b25      	cmp	r3, #37	; 0x25
 801dd9c:	d125      	bne.n	801ddea <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 801dd9e:	9b01      	ldr	r3, [sp, #4]
 801dda0:	1c5a      	adds	r2, r3, #1
 801dda2:	9201      	str	r2, [sp, #4]
 801dda4:	2225      	movs	r2, #37	; 0x25
 801dda6:	701a      	strb	r2, [r3, #0]
				  break;
 801dda8:	e01f      	b.n	801ddea <ts_formatstring+0x8a>
			switch (*(++fmt))
 801ddaa:	2b69      	cmp	r3, #105	; 0x69
 801ddac:	d11d      	bne.n	801ddea <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 801ddae:	9b00      	ldr	r3, [sp, #0]
 801ddb0:	1d1a      	adds	r2, r3, #4
 801ddb2:	9200      	str	r2, [sp, #0]
 801ddb4:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 801ddb6:	2900      	cmp	r1, #0
 801ddb8:	db23      	blt.n	801de02 <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 801ddba:	220a      	movs	r2, #10
 801ddbc:	a801      	add	r0, sp, #4
 801ddbe:	f7ff ffaf 	bl	801dd20 <ts_itoa>
				break;
 801ddc2:	e012      	b.n	801ddea <ts_formatstring+0x8a>
			switch (*(++fmt))
 801ddc4:	2b78      	cmp	r3, #120	; 0x78
 801ddc6:	d110      	bne.n	801ddea <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 801ddc8:	9b00      	ldr	r3, [sp, #0]
 801ddca:	1d1a      	adds	r2, r3, #4
 801ddcc:	9200      	str	r2, [sp, #0]
 801ddce:	2210      	movs	r2, #16
 801ddd0:	6819      	ldr	r1, [r3, #0]
 801ddd2:	a801      	add	r0, sp, #4
 801ddd4:	f7ff ffa4 	bl	801dd20 <ts_itoa>
				break;
 801ddd8:	e007      	b.n	801ddea <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 801ddda:	9b01      	ldr	r3, [sp, #4]
 801dddc:	1c5a      	adds	r2, r3, #1
 801ddde:	9201      	str	r2, [sp, #4]
 801dde0:	9a00      	ldr	r2, [sp, #0]
 801dde2:	1d11      	adds	r1, r2, #4
 801dde4:	9100      	str	r1, [sp, #0]
 801dde6:	6812      	ldr	r2, [r2, #0]
 801dde8:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 801ddea:	3402      	adds	r4, #2
	while(*fmt)
 801ddec:	7823      	ldrb	r3, [r4, #0]
 801ddee:	b1f3      	cbz	r3, 801de2e <ts_formatstring+0xce>
		if (*fmt == '%')
 801ddf0:	2b25      	cmp	r3, #37	; 0x25
 801ddf2:	d0bc      	beq.n	801dd6e <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 801ddf4:	9b01      	ldr	r3, [sp, #4]
 801ddf6:	1c5a      	adds	r2, r3, #1
 801ddf8:	9201      	str	r2, [sp, #4]
 801ddfa:	7822      	ldrb	r2, [r4, #0]
 801ddfc:	701a      	strb	r2, [r3, #0]
 801ddfe:	3401      	adds	r4, #1
 801de00:	e7f4      	b.n	801ddec <ts_formatstring+0x8c>
						val *= -1;
 801de02:	4249      	negs	r1, r1
						*buf++ = '-';
 801de04:	9b01      	ldr	r3, [sp, #4]
 801de06:	1c5a      	adds	r2, r3, #1
 801de08:	9201      	str	r2, [sp, #4]
 801de0a:	222d      	movs	r2, #45	; 0x2d
 801de0c:	701a      	strb	r2, [r3, #0]
 801de0e:	e7d4      	b.n	801ddba <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 801de10:	9b00      	ldr	r3, [sp, #0]
 801de12:	1d1a      	adds	r2, r3, #4
 801de14:	9200      	str	r2, [sp, #0]
 801de16:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 801de18:	e005      	b.n	801de26 <ts_formatstring+0xc6>
						*buf++ = *arg++;
 801de1a:	9a01      	ldr	r2, [sp, #4]
 801de1c:	1c51      	adds	r1, r2, #1
 801de1e:	9101      	str	r1, [sp, #4]
 801de20:	7819      	ldrb	r1, [r3, #0]
 801de22:	7011      	strb	r1, [r2, #0]
 801de24:	3301      	adds	r3, #1
					while (*arg)
 801de26:	781a      	ldrb	r2, [r3, #0]
 801de28:	2a00      	cmp	r2, #0
 801de2a:	d1f6      	bne.n	801de1a <ts_formatstring+0xba>
 801de2c:	e7dd      	b.n	801ddea <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 801de2e:	2200      	movs	r2, #0
 801de30:	9b01      	ldr	r3, [sp, #4]
 801de32:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 801de34:	9801      	ldr	r0, [sp, #4]
 801de36:	1b40      	subs	r0, r0, r5
 801de38:	b003      	add	sp, #12
 801de3a:	bd30      	pop	{r4, r5, pc}

0801de3c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 801de3c:	b082      	sub	sp, #8
 801de3e:	4603      	mov	r3, r0
 801de40:	9101      	str	r1, [sp, #4]
	int length = 0;
 801de42:	2000      	movs	r0, #0
	while (*fmt)
 801de44:	e01d      	b.n	801de82 <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 801de46:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 801de48:	785b      	ldrb	r3, [r3, #1]
 801de4a:	3b58      	subs	r3, #88	; 0x58
 801de4c:	2b20      	cmp	r3, #32
 801de4e:	d837      	bhi.n	801dec0 <ts_formatlength+0x84>
 801de50:	e8df f003 	tbb	[pc, r3]
 801de54:	36363630 	.word	0x36363630
 801de58:	36363636 	.word	0x36363636
 801de5c:	11363636 	.word	0x11363636
 801de60:	3636361d 	.word	0x3636361d
 801de64:	36361d36 	.word	0x36361d36
 801de68:	36363636 	.word	0x36363636
 801de6c:	23363636 	.word	0x23363636
 801de70:	36361d36 	.word	0x36361d36
 801de74:	30          	.byte	0x30
 801de75:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 801de76:	9b01      	ldr	r3, [sp, #4]
 801de78:	3304      	adds	r3, #4
 801de7a:	9301      	str	r3, [sp, #4]
				  ++length;
 801de7c:	3001      	adds	r0, #1
			++fmt;
 801de7e:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 801de80:	3301      	adds	r3, #1
	while (*fmt)
 801de82:	781a      	ldrb	r2, [r3, #0]
 801de84:	b1fa      	cbz	r2, 801dec6 <ts_formatlength+0x8a>
		if (*fmt == '%')
 801de86:	2a25      	cmp	r2, #37	; 0x25
 801de88:	d0dd      	beq.n	801de46 <ts_formatlength+0xa>
			++length;
 801de8a:	3001      	adds	r0, #1
 801de8c:	e7f8      	b.n	801de80 <ts_formatlength+0x44>
				  length += 11;
 801de8e:	300b      	adds	r0, #11
				  va_arg(va, int);
 801de90:	9b01      	ldr	r3, [sp, #4]
 801de92:	3304      	adds	r3, #4
 801de94:	9301      	str	r3, [sp, #4]
			++fmt;
 801de96:	460b      	mov	r3, r1
 801de98:	e7f2      	b.n	801de80 <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 801de9a:	9b01      	ldr	r3, [sp, #4]
 801de9c:	1d1a      	adds	r2, r3, #4
 801de9e:	9201      	str	r2, [sp, #4]
 801dea0:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 801dea2:	e001      	b.n	801dea8 <ts_formatlength+0x6c>
			  			  ++length;
 801dea4:	3001      	adds	r0, #1
			  		  while (*str++)
 801dea6:	4613      	mov	r3, r2
 801dea8:	1c5a      	adds	r2, r3, #1
 801deaa:	781b      	ldrb	r3, [r3, #0]
 801deac:	2b00      	cmp	r3, #0
 801deae:	d1f9      	bne.n	801dea4 <ts_formatlength+0x68>
			++fmt;
 801deb0:	460b      	mov	r3, r1
 801deb2:	e7e5      	b.n	801de80 <ts_formatlength+0x44>
				  length += 8;
 801deb4:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 801deb6:	9b01      	ldr	r3, [sp, #4]
 801deb8:	3304      	adds	r3, #4
 801deba:	9301      	str	r3, [sp, #4]
			++fmt;
 801debc:	460b      	mov	r3, r1
 801debe:	e7df      	b.n	801de80 <ts_formatlength+0x44>
				  ++length;
 801dec0:	3001      	adds	r0, #1
			++fmt;
 801dec2:	460b      	mov	r3, r1
				  break;
 801dec4:	e7dc      	b.n	801de80 <ts_formatlength+0x44>
	}
	return length;
}
 801dec6:	b002      	add	sp, #8
 801dec8:	4770      	bx	lr

0801deca <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 801deca:	b40e      	push	{r1, r2, r3}
 801decc:	b500      	push	{lr}
 801dece:	b082      	sub	sp, #8
 801ded0:	aa03      	add	r2, sp, #12
 801ded2:	f852 1b04 	ldr.w	r1, [r2], #4
	int length;
	va_list va;
	va_start(va, fmt);
 801ded6:	9201      	str	r2, [sp, #4]
	length = ts_formatstring(buf, fmt, va);
 801ded8:	f7ff ff42 	bl	801dd60 <ts_formatstring>
	va_end(va);
	return length;
}
 801dedc:	b002      	add	sp, #8
 801dede:	f85d eb04 	ldr.w	lr, [sp], #4
 801dee2:	b003      	add	sp, #12
 801dee4:	4770      	bx	lr

0801dee6 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 801dee6:	b40f      	push	{r0, r1, r2, r3}
 801dee8:	b5b0      	push	{r4, r5, r7, lr}
 801deea:	b082      	sub	sp, #8
 801deec:	af00      	add	r7, sp, #0
 801deee:	f107 0418 	add.w	r4, r7, #24
 801def2:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 801def6:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 801def8:	4621      	mov	r1, r4
 801defa:	4628      	mov	r0, r5
 801defc:	f7ff ff9e 	bl	801de3c <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 801df00:	3007      	adds	r0, #7
 801df02:	f020 0007 	bic.w	r0, r0, #7
 801df06:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 801df0a:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 801df0c:	4622      	mov	r2, r4
 801df0e:	4629      	mov	r1, r5
 801df10:	4668      	mov	r0, sp
 801df12:	f7ff ff25 	bl	801dd60 <ts_formatstring>
		length = _write(1, buf, length);
 801df16:	4602      	mov	r2, r0
 801df18:	4669      	mov	r1, sp
 801df1a:	2001      	movs	r0, #1
 801df1c:	f7ff fe1e 	bl	801db5c <_write>
		va_end(va);
	}
	return length;
}
 801df20:	3708      	adds	r7, #8
 801df22:	46bd      	mov	sp, r7
 801df24:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801df28:	b004      	add	sp, #16
 801df2a:	4770      	bx	lr

0801df2c <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 801df2c:	b538      	push	{r3, r4, r5, lr}
 801df2e:	4605      	mov	r5, r0
	int length = strlen(s);
 801df30:	f7f2 f890 	bl	8010054 <strlen>
 801df34:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 801df36:	4602      	mov	r2, r0
 801df38:	4629      	mov	r1, r5
 801df3a:	2001      	movs	r0, #1
 801df3c:	f7ff fe0e 	bl	801db5c <_write>
 801df40:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 801df42:	2201      	movs	r2, #1
 801df44:	4906      	ldr	r1, [pc, #24]	; (801df60 <puts+0x34>)
 801df46:	4610      	mov	r0, r2
 801df48:	f7ff fe08 	bl	801db5c <_write>
 801df4c:	4428      	add	r0, r5

	if (numbytes == (length+1))
 801df4e:	3401      	adds	r4, #1
 801df50:	42a0      	cmp	r0, r4
 801df52:	d101      	bne.n	801df58 <puts+0x2c>
	{
		res = 0;
 801df54:	2000      	movs	r0, #0
 801df56:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		res = EOF;
 801df58:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return res;
}
 801df5c:	bd38      	pop	{r3, r4, r5, pc}
 801df5e:	bf00      	nop
 801df60:	080221d8 	.word	0x080221d8

0801df64 <MX_UART5_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 801df64:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 801df66:	480c      	ldr	r0, [pc, #48]	; (801df98 <MX_UART5_Init+0x34>)
 801df68:	4b0c      	ldr	r3, [pc, #48]	; (801df9c <MX_UART5_Init+0x38>)
 801df6a:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 187500;
 801df6c:	4b0c      	ldr	r3, [pc, #48]	; (801dfa0 <MX_UART5_Init+0x3c>)
 801df6e:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 801df70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801df74:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 801df76:	2300      	movs	r3, #0
 801df78:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 801df7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801df7e:	6102      	str	r2, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 801df80:	220c      	movs	r2, #12
 801df82:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801df84:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 801df86:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 801df88:	f7f4 fc04 	bl	8012794 <HAL_UART_Init>
 801df8c:	b900      	cbnz	r0, 801df90 <MX_UART5_Init+0x2c>
 801df8e:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 801df90:	f7ff fcc2 	bl	801d918 <Error_Handler>
  }

}
 801df94:	e7fb      	b.n	801df8e <MX_UART5_Init+0x2a>
 801df96:	bf00      	nop
 801df98:	2000bd7c 	.word	0x2000bd7c
 801df9c:	40005000 	.word	0x40005000
 801dfa0:	0002dc6c 	.word	0x0002dc6c

0801dfa4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801dfa4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 801dfa6:	480a      	ldr	r0, [pc, #40]	; (801dfd0 <MX_USART1_UART_Init+0x2c>)
 801dfa8:	4b0a      	ldr	r3, [pc, #40]	; (801dfd4 <MX_USART1_UART_Init+0x30>)
 801dfaa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 460800;
 801dfac:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 801dfb0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801dfb2:	2300      	movs	r3, #0
 801dfb4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801dfb6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801dfb8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 801dfba:	2208      	movs	r2, #8
 801dfbc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801dfbe:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801dfc0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801dfc2:	f7f4 fbe7 	bl	8012794 <HAL_UART_Init>
 801dfc6:	b900      	cbnz	r0, 801dfca <MX_USART1_UART_Init+0x26>
 801dfc8:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 801dfca:	f7ff fca5 	bl	801d918 <Error_Handler>
  }

}
 801dfce:	e7fb      	b.n	801dfc8 <MX_USART1_UART_Init+0x24>
 801dfd0:	2000bdbc 	.word	0x2000bdbc
 801dfd4:	40011000 	.word	0x40011000

0801dfd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801dfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfdc:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dfde:	2300      	movs	r3, #0
 801dfe0:	9305      	str	r3, [sp, #20]
 801dfe2:	9306      	str	r3, [sp, #24]
 801dfe4:	9307      	str	r3, [sp, #28]
 801dfe6:	9308      	str	r3, [sp, #32]
 801dfe8:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==UART5)
 801dfea:	6803      	ldr	r3, [r0, #0]
 801dfec:	4a4c      	ldr	r2, [pc, #304]	; (801e120 <HAL_UART_MspInit+0x148>)
 801dfee:	4293      	cmp	r3, r2
 801dff0:	d006      	beq.n	801e000 <HAL_UART_MspInit+0x28>
 801dff2:	4604      	mov	r4, r0
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 801dff4:	4a4b      	ldr	r2, [pc, #300]	; (801e124 <HAL_UART_MspInit+0x14c>)
 801dff6:	4293      	cmp	r3, r2
 801dff8:	d047      	beq.n	801e08a <HAL_UART_MspInit+0xb2>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 801dffa:	b00a      	add	sp, #40	; 0x28
 801dffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 801e000:	2400      	movs	r4, #0
 801e002:	9400      	str	r4, [sp, #0]
 801e004:	4b48      	ldr	r3, [pc, #288]	; (801e128 <HAL_UART_MspInit+0x150>)
 801e006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e008:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801e00c:	641a      	str	r2, [r3, #64]	; 0x40
 801e00e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e010:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801e014:	9200      	str	r2, [sp, #0]
 801e016:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801e018:	9401      	str	r4, [sp, #4]
 801e01a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e01c:	f042 0204 	orr.w	r2, r2, #4
 801e020:	631a      	str	r2, [r3, #48]	; 0x30
 801e022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e024:	f002 0204 	and.w	r2, r2, #4
 801e028:	9201      	str	r2, [sp, #4]
 801e02a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801e02c:	9402      	str	r4, [sp, #8]
 801e02e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e030:	f042 0208 	orr.w	r2, r2, #8
 801e034:	631a      	str	r2, [r3, #48]	; 0x30
 801e036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e038:	f003 0308 	and.w	r3, r3, #8
 801e03c:	9302      	str	r3, [sp, #8]
 801e03e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801e040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801e044:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e046:	f04f 0802 	mov.w	r8, #2
 801e04a:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801e04e:	2701      	movs	r7, #1
 801e050:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e052:	2603      	movs	r6, #3
 801e054:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801e056:	2508      	movs	r5, #8
 801e058:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e05a:	a905      	add	r1, sp, #20
 801e05c:	4833      	ldr	r0, [pc, #204]	; (801e12c <HAL_UART_MspInit+0x154>)
 801e05e:	f7f3 faa9 	bl	80115b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e062:	2304      	movs	r3, #4
 801e064:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e066:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801e06a:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e06c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801e06e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801e070:	a905      	add	r1, sp, #20
 801e072:	482f      	ldr	r0, [pc, #188]	; (801e130 <HAL_UART_MspInit+0x158>)
 801e074:	f7f3 fa9e 	bl	80115b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 801e078:	4622      	mov	r2, r4
 801e07a:	2105      	movs	r1, #5
 801e07c:	2035      	movs	r0, #53	; 0x35
 801e07e:	f7f2 f9cb 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 801e082:	2035      	movs	r0, #53	; 0x35
 801e084:	f7f2 f9fa 	bl	801047c <HAL_NVIC_EnableIRQ>
 801e088:	e7b7      	b.n	801dffa <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART1_CLK_ENABLE();
 801e08a:	2500      	movs	r5, #0
 801e08c:	9503      	str	r5, [sp, #12]
 801e08e:	4b26      	ldr	r3, [pc, #152]	; (801e128 <HAL_UART_MspInit+0x150>)
 801e090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e092:	f042 0210 	orr.w	r2, r2, #16
 801e096:	645a      	str	r2, [r3, #68]	; 0x44
 801e098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e09a:	f002 0210 	and.w	r2, r2, #16
 801e09e:	9203      	str	r2, [sp, #12]
 801e0a0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801e0a2:	9504      	str	r5, [sp, #16]
 801e0a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e0a6:	f042 0201 	orr.w	r2, r2, #1
 801e0aa:	631a      	str	r2, [r3, #48]	; 0x30
 801e0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0ae:	f003 0301 	and.w	r3, r3, #1
 801e0b2:	9304      	str	r3, [sp, #16]
 801e0b4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801e0b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801e0ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e0bc:	2302      	movs	r3, #2
 801e0be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801e0c0:	2301      	movs	r3, #1
 801e0c2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801e0c4:	2303      	movs	r3, #3
 801e0c6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801e0c8:	2307      	movs	r3, #7
 801e0ca:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e0cc:	a905      	add	r1, sp, #20
 801e0ce:	4819      	ldr	r0, [pc, #100]	; (801e134 <HAL_UART_MspInit+0x15c>)
 801e0d0:	f7f3 fa70 	bl	80115b4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 801e0d4:	4818      	ldr	r0, [pc, #96]	; (801e138 <HAL_UART_MspInit+0x160>)
 801e0d6:	4b19      	ldr	r3, [pc, #100]	; (801e13c <HAL_UART_MspInit+0x164>)
 801e0d8:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 801e0da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e0de:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801e0e0:	2340      	movs	r3, #64	; 0x40
 801e0e2:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801e0e4:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 801e0e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e0ea:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801e0ec:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801e0ee:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 801e0f0:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 801e0f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e0f6:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801e0f8:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 801e0fa:	f7f2 fa55 	bl	80105a8 <HAL_DMA_Init>
 801e0fe:	b958      	cbnz	r0, 801e118 <HAL_UART_MspInit+0x140>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 801e100:	4b0d      	ldr	r3, [pc, #52]	; (801e138 <HAL_UART_MspInit+0x160>)
 801e102:	6323      	str	r3, [r4, #48]	; 0x30
 801e104:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 801e106:	2200      	movs	r2, #0
 801e108:	2105      	movs	r1, #5
 801e10a:	2025      	movs	r0, #37	; 0x25
 801e10c:	f7f2 f984 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801e110:	2025      	movs	r0, #37	; 0x25
 801e112:	f7f2 f9b3 	bl	801047c <HAL_NVIC_EnableIRQ>
}
 801e116:	e770      	b.n	801dffa <HAL_UART_MspInit+0x22>
      Error_Handler();
 801e118:	f7ff fbfe 	bl	801d918 <Error_Handler>
 801e11c:	e7f0      	b.n	801e100 <HAL_UART_MspInit+0x128>
 801e11e:	bf00      	nop
 801e120:	40005000 	.word	0x40005000
 801e124:	40011000 	.word	0x40011000
 801e128:	40023800 	.word	0x40023800
 801e12c:	40020800 	.word	0x40020800
 801e130:	40020c00 	.word	0x40020c00
 801e134:	40020000 	.word	0x40020000
 801e138:	2000bd1c 	.word	0x2000bd1c
 801e13c:	400264b8 	.word	0x400264b8

0801e140 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 801e140:	b510      	push	{r4, lr}

  if(uartHandle->Instance==UART5)
 801e142:	6803      	ldr	r3, [r0, #0]
 801e144:	4a16      	ldr	r2, [pc, #88]	; (801e1a0 <HAL_UART_MspDeInit+0x60>)
 801e146:	4293      	cmp	r3, r2
 801e148:	d004      	beq.n	801e154 <HAL_UART_MspDeInit+0x14>
 801e14a:	4604      	mov	r4, r0
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 801e14c:	4a15      	ldr	r2, [pc, #84]	; (801e1a4 <HAL_UART_MspDeInit+0x64>)
 801e14e:	4293      	cmp	r3, r2
 801e150:	d013      	beq.n	801e17a <HAL_UART_MspDeInit+0x3a>
 801e152:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART5_CLK_DISABLE();
 801e154:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 801e158:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801e15a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801e15e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 801e160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801e164:	4810      	ldr	r0, [pc, #64]	; (801e1a8 <HAL_UART_MspDeInit+0x68>)
 801e166:	f7f3 fb0b 	bl	8011780 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 801e16a:	2104      	movs	r1, #4
 801e16c:	480f      	ldr	r0, [pc, #60]	; (801e1ac <HAL_UART_MspDeInit+0x6c>)
 801e16e:	f7f3 fb07 	bl	8011780 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 801e172:	2035      	movs	r0, #53	; 0x35
 801e174:	f7f2 f98e 	bl	8010494 <HAL_NVIC_DisableIRQ>
 801e178:	bd10      	pop	{r4, pc}
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 801e17a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 801e17e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801e180:	f023 0310 	bic.w	r3, r3, #16
 801e184:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 801e186:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e18a:	4809      	ldr	r0, [pc, #36]	; (801e1b0 <HAL_UART_MspDeInit+0x70>)
 801e18c:	f7f3 faf8 	bl	8011780 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 801e190:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e192:	f7f2 fa71 	bl	8010678 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 801e196:	2025      	movs	r0, #37	; 0x25
 801e198:	f7f2 f97c 	bl	8010494 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 801e19c:	e7d9      	b.n	801e152 <HAL_UART_MspDeInit+0x12>
 801e19e:	bf00      	nop
 801e1a0:	40005000 	.word	0x40005000
 801e1a4:	40011000 	.word	0x40011000
 801e1a8:	40020800 	.word	0x40020800
 801e1ac:	40020c00 	.word	0x40020c00
 801e1b0:	40020000 	.word	0x40020000

0801e1b4 <read_param>:
extern UART_HandleTypeDef huart5;

static void form_data_parser(char * in_buf);
static uint read_param(char * out_buf, const char * const in_buf, const uint max_len);

static uint read_param(char * out_buf, const char * const  in_buf, const uint max_len){
 801e1b4:	b410      	push	{r4}
 801e1b6:	4604      	mov	r4, r0
	const char* tmp_p =  in_buf;
	uint len = 0;
 801e1b8:	2000      	movs	r0, #0
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 801e1ba:	e003      	b.n	801e1c4 <read_param+0x10>
		*out_buf++ = *tmp_p;
 801e1bc:	7023      	strb	r3, [r4, #0]
		len++;
 801e1be:	3001      	adds	r0, #1
		tmp_p++;
 801e1c0:	3101      	adds	r1, #1
		*out_buf++ = *tmp_p;
 801e1c2:	3401      	adds	r4, #1
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 801e1c4:	780b      	ldrb	r3, [r1, #0]
 801e1c6:	2b20      	cmp	r3, #32
 801e1c8:	d003      	beq.n	801e1d2 <read_param+0x1e>
 801e1ca:	2b26      	cmp	r3, #38	; 0x26
 801e1cc:	d001      	beq.n	801e1d2 <read_param+0x1e>
 801e1ce:	4290      	cmp	r0, r2
 801e1d0:	d9f4      	bls.n	801e1bc <read_param+0x8>
	}
	return len;
}
 801e1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e1d6:	4770      	bx	lr

0801e1d8 <form_data_parser>:



static void form_data_parser(char * in_buf) {
 801e1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1da:	b087      	sub	sp, #28
 801e1dc:	4604      	mov	r4, r0
	char par_str[16];
	uint par_len;
	uint baudrate = 0;
	while (*in_buf != ' ') {
 801e1de:	e021      	b.n	801e224 <form_data_parser+0x4c>
		if (*in_buf == '&') {
			in_buf++;
 801e1e0:	3401      	adds	r4, #1
 801e1e2:	e024      	b.n	801e22e <form_data_parser+0x56>
		}
		int param_num = atoi(in_buf);
		if (param_num < 9){
			in_buf += 2;
		} else {
			in_buf += 3;
 801e1e4:	3403      	adds	r4, #3
 801e1e6:	e028      	b.n	801e23a <form_data_parser+0x62>
		}
		switch(param_num){
		case 1:                                        //IP-address
			par_len = read_param(par_str,in_buf,15);
 801e1e8:	220f      	movs	r2, #15
 801e1ea:	4621      	mov	r1, r4
 801e1ec:	a802      	add	r0, sp, #8
 801e1ee:	f7ff ffe1 	bl	801e1b4 <read_param>
 801e1f2:	4605      	mov	r5, r0
			par_str[par_len] = '\0';
 801e1f4:	ab06      	add	r3, sp, #24
 801e1f6:	4403      	add	r3, r0
 801e1f8:	2200      	movs	r2, #0
 801e1fa:	f803 2c10 	strb.w	r2, [r3, #-16]
			ip4_addr_t new_ip;
			ipaddr_aton(par_str,&new_ip);
 801e1fe:	a901      	add	r1, sp, #4
 801e200:	a802      	add	r0, sp, #8
 801e202:	f7f8 fef5 	bl	8016ff0 <ip4addr_aton>
			EE_WriteVariable(IP_02_01_ADDR,(uint16_t)(new_ip.addr & 0x0000FFFF));
 801e206:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801e20a:	2001      	movs	r0, #1
 801e20c:	f7fe ff18 	bl	801d040 <EE_WriteVariable>
			EE_WriteVariable(IP_04_03_ADDR,(uint16_t)((new_ip.addr >> 16) & 0x0000FFFF));
 801e210:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801e214:	2002      	movs	r0, #2
 801e216:	f7fe ff13 	bl	801d040 <EE_WriteVariable>
			netif_set_ipaddr(&gnetif,&new_ip);
 801e21a:	a901      	add	r1, sp, #4
 801e21c:	481c      	ldr	r0, [pc, #112]	; (801e290 <form_data_parser+0xb8>)
 801e21e:	f7f9 feeb 	bl	8017ff8 <netif_set_ipaddr>
			in_buf += par_len;
 801e222:	442c      	add	r4, r5
	while (*in_buf != ' ') {
 801e224:	7823      	ldrb	r3, [r4, #0]
 801e226:	2b20      	cmp	r3, #32
 801e228:	d030      	beq.n	801e28c <form_data_parser+0xb4>
		if (*in_buf == '&') {
 801e22a:	2b26      	cmp	r3, #38	; 0x26
 801e22c:	d0d8      	beq.n	801e1e0 <form_data_parser+0x8>
		int param_num = atoi(in_buf);
 801e22e:	4620      	mov	r0, r4
 801e230:	f000 f98f 	bl	801e552 <atoi>
		if (param_num < 9){
 801e234:	2808      	cmp	r0, #8
 801e236:	dcd5      	bgt.n	801e1e4 <form_data_parser+0xc>
			in_buf += 2;
 801e238:	3402      	adds	r4, #2
		switch(param_num){
 801e23a:	2801      	cmp	r0, #1
 801e23c:	d0d4      	beq.n	801e1e8 <form_data_parser+0x10>
 801e23e:	2802      	cmp	r0, #2
 801e240:	d1f0      	bne.n	801e224 <form_data_parser+0x4c>
			break;
		case 2:                                       //Baudrate
			par_len = read_param(par_str,in_buf,15);
 801e242:	220f      	movs	r2, #15
 801e244:	4621      	mov	r1, r4
 801e246:	a802      	add	r0, sp, #8
 801e248:	f7ff ffb4 	bl	801e1b4 <read_param>
 801e24c:	4607      	mov	r7, r0
			par_str[par_len] = '\0';
 801e24e:	ab06      	add	r3, sp, #24
 801e250:	4403      	add	r3, r0
 801e252:	2200      	movs	r2, #0
 801e254:	f803 2c10 	strb.w	r2, [r3, #-16]
			baudrate = atoi(par_str);
 801e258:	a802      	add	r0, sp, #8
 801e25a:	f000 f97a 	bl	801e552 <atoi>
 801e25e:	4606      	mov	r6, r0
			HAL_UART_DeInit(&huart5);
 801e260:	4d0c      	ldr	r5, [pc, #48]	; (801e294 <form_data_parser+0xbc>)
 801e262:	4628      	mov	r0, r5
 801e264:	f7f4 fac5 	bl	80127f2 <HAL_UART_DeInit>
			huart5.Init.BaudRate = baudrate;
 801e268:	606e      	str	r6, [r5, #4]
			EE_WriteVariable(BR_LS_ADDR,(uint16_t)(baudrate & 0x0000FFFF));
 801e26a:	b2b1      	uxth	r1, r6
 801e26c:	2004      	movs	r0, #4
 801e26e:	f7fe fee7 	bl	801d040 <EE_WriteVariable>
			EE_WriteVariable(BR_MS_ADDR,(uint16_t)((baudrate >> 16) & 0x0000FFFF));
 801e272:	0c31      	lsrs	r1, r6, #16
 801e274:	2003      	movs	r0, #3
 801e276:	f7fe fee3 	bl	801d040 <EE_WriteVariable>
			if (HAL_UART_Init(&huart5) != HAL_OK)
 801e27a:	4628      	mov	r0, r5
 801e27c:	f7f4 fa8a 	bl	8012794 <HAL_UART_Init>
 801e280:	b908      	cbnz	r0, 801e286 <form_data_parser+0xae>
			{
			   Error_Handler();
			}
			in_buf += par_len;
 801e282:	443c      	add	r4, r7
			break;
 801e284:	e7ce      	b.n	801e224 <form_data_parser+0x4c>
			   Error_Handler();
 801e286:	f7ff fb47 	bl	801d918 <Error_Handler>
 801e28a:	e7fa      	b.n	801e282 <form_data_parser+0xaa>
		}
	}
}
 801e28c:	b007      	add	sp, #28
 801e28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e290:	2000bc10 	.word	0x2000bc10
 801e294:	2000bd7c 	.word	0x2000bd7c

0801e298 <web_server_thread>:

void web_server_thread(void *arg) {
 801e298:	b570      	push	{r4, r5, r6, lr}
 801e29a:	b08c      	sub	sp, #48	; 0x30
 801e29c:	4604      	mov	r4, r0
	arg_conn = (struct netconn *) arg;
	u16_t buflen;
	char* buf;
	struct fs_file file;

	printf("Net task created.\n");
 801e29e:	4882      	ldr	r0, [pc, #520]	; (801e4a8 <web_server_thread+0x210>)
 801e2a0:	f7ff fe44 	bl	801df2c <puts>
	osDelay(1);
 801e2a4:	2001      	movs	r0, #1
 801e2a6:	f7f4 fc98 	bl	8012bda <osDelay>
 801e2aa:	e016      	b.n	801e2da <web_server_thread+0x42>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
						buf += 5;
						if ((strncmp((char const *) buf, " ", 1) == 0)
								|| (strncmp((char const *) buf, "index.shtml",
										11) == 0)) {
							fs_open(&file, "/index.shtml");
 801e2ac:	497f      	ldr	r1, [pc, #508]	; (801e4ac <web_server_thread+0x214>)
 801e2ae:	a803      	add	r0, sp, #12
 801e2b0:	f7f7 fef4 	bl	801609c <fs_open>
							netconn_write(newconn,
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	9300      	str	r3, [sp, #0]
 801e2b8:	9a04      	ldr	r2, [sp, #16]
 801e2ba:	9903      	ldr	r1, [sp, #12]
 801e2bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e2be:	f7f6 fcad 	bl	8014c1c <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 801e2c2:	a803      	add	r0, sp, #12
 801e2c4:	f7f7 ff0e 	bl	80160e4 <fs_close>
							osDelay(1);
						}
					}
				}
			}
			netconn_close(newconn);
 801e2c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e2ca:	f7f6 fcfb 	bl	8014cc4 <netconn_close>
			netbuf_delete(inbuf);
 801e2ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e2d0:	f7f7 fd7a 	bl	8015dc8 <netbuf_delete>
			netconn_delete(newconn);
 801e2d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e2d6:	f7f6 fb8d 	bl	80149f4 <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 801e2da:	a90a      	add	r1, sp, #40	; 0x28
 801e2dc:	4620      	mov	r0, r4
 801e2de:	f7f6 fbe7 	bl	8014ab0 <netconn_accept>
		if (err == ERR_OK) {
 801e2e2:	2800      	cmp	r0, #0
 801e2e4:	d1f9      	bne.n	801e2da <web_server_thread+0x42>
			printf("Accept.\n");
 801e2e6:	4872      	ldr	r0, [pc, #456]	; (801e4b0 <web_server_thread+0x218>)
 801e2e8:	f7ff fe20 	bl	801df2c <puts>
			recv_err = netconn_recv(newconn, &inbuf);
 801e2ec:	a90b      	add	r1, sp, #44	; 0x2c
 801e2ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e2f0:	f7f6 fc3a 	bl	8014b68 <netconn_recv>
			if (recv_err == ERR_OK) {
 801e2f4:	2800      	cmp	r0, #0
 801e2f6:	d1e7      	bne.n	801e2c8 <web_server_thread+0x30>
				if (netconn_err(newconn) == ERR_OK) {
 801e2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d1e2      	bne.n	801e2c8 <web_server_thread+0x30>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 801e302:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 801e306:	a908      	add	r1, sp, #32
 801e308:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e30a:	f7f7 fd6d 	bl	8015de8 <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 801e30e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801e312:	2b04      	cmp	r3, #4
 801e314:	d9d8      	bls.n	801e2c8 <web_server_thread+0x30>
 801e316:	9e08      	ldr	r6, [sp, #32]
 801e318:	2205      	movs	r2, #5
 801e31a:	4966      	ldr	r1, [pc, #408]	; (801e4b4 <web_server_thread+0x21c>)
 801e31c:	4630      	mov	r0, r6
 801e31e:	f000 f985 	bl	801e62c <strncmp>
 801e322:	2800      	cmp	r0, #0
 801e324:	d1d0      	bne.n	801e2c8 <web_server_thread+0x30>
						buf += 5;
 801e326:	1d75      	adds	r5, r6, #5
 801e328:	9508      	str	r5, [sp, #32]
						if ((strncmp((char const *) buf, " ", 1) == 0)
 801e32a:	7976      	ldrb	r6, [r6, #5]
 801e32c:	2e20      	cmp	r6, #32
 801e32e:	d0bd      	beq.n	801e2ac <web_server_thread+0x14>
								|| (strncmp((char const *) buf, "index.shtml",
 801e330:	220b      	movs	r2, #11
 801e332:	4961      	ldr	r1, [pc, #388]	; (801e4b8 <web_server_thread+0x220>)
 801e334:	4628      	mov	r0, r5
 801e336:	f000 f979 	bl	801e62c <strncmp>
 801e33a:	2800      	cmp	r0, #0
 801e33c:	d0b6      	beq.n	801e2ac <web_server_thread+0x14>
						} else if (strncmp((char const *) buf, "img/logo.png",
 801e33e:	220c      	movs	r2, #12
 801e340:	495e      	ldr	r1, [pc, #376]	; (801e4bc <web_server_thread+0x224>)
 801e342:	4628      	mov	r0, r5
 801e344:	f000 f972 	bl	801e62c <strncmp>
 801e348:	2800      	cmp	r0, #0
 801e34a:	d037      	beq.n	801e3bc <web_server_thread+0x124>
						} else if (strncmp((char const *) buf, "img/icon.png",
 801e34c:	220c      	movs	r2, #12
 801e34e:	495c      	ldr	r1, [pc, #368]	; (801e4c0 <web_server_thread+0x228>)
 801e350:	4628      	mov	r0, r5
 801e352:	f000 f96b 	bl	801e62c <strncmp>
 801e356:	2800      	cmp	r0, #0
 801e358:	d03f      	beq.n	801e3da <web_server_thread+0x142>
						} else if (strncmp((char const *) buf, "style.css", 9)
 801e35a:	2209      	movs	r2, #9
 801e35c:	4959      	ldr	r1, [pc, #356]	; (801e4c4 <web_server_thread+0x22c>)
 801e35e:	4628      	mov	r0, r5
 801e360:	f000 f964 	bl	801e62c <strncmp>
 801e364:	2800      	cmp	r0, #0
 801e366:	d047      	beq.n	801e3f8 <web_server_thread+0x160>
						} else if (strncmp((char const *) buf, "AI.shtml?led=1",
 801e368:	220e      	movs	r2, #14
 801e36a:	4957      	ldr	r1, [pc, #348]	; (801e4c8 <web_server_thread+0x230>)
 801e36c:	4628      	mov	r0, r5
 801e36e:	f000 f95d 	bl	801e62c <strncmp>
 801e372:	2800      	cmp	r0, #0
 801e374:	d04f      	beq.n	801e416 <web_server_thread+0x17e>
						} else if (strncmp((char const *) buf, "AI.shtml?IP=",
 801e376:	220c      	movs	r2, #12
 801e378:	4954      	ldr	r1, [pc, #336]	; (801e4cc <web_server_thread+0x234>)
 801e37a:	4628      	mov	r0, r5
 801e37c:	f000 f956 	bl	801e62c <strncmp>
 801e380:	2800      	cmp	r0, #0
 801e382:	d051      	beq.n	801e428 <web_server_thread+0x190>
						} else if (strncmp((char const *) buf, "AI.shtml?BR=",
 801e384:	220c      	movs	r2, #12
 801e386:	4952      	ldr	r1, [pc, #328]	; (801e4d0 <web_server_thread+0x238>)
 801e388:	4628      	mov	r0, r5
 801e38a:	f000 f94f 	bl	801e62c <strncmp>
 801e38e:	2800      	cmp	r0, #0
 801e390:	d060      	beq.n	801e454 <web_server_thread+0x1bc>
						} else if (*buf == '?') {
 801e392:	2e3f      	cmp	r6, #63	; 0x3f
 801e394:	d172      	bne.n	801e47c <web_server_thread+0x1e4>
							form_data_parser(++buf);
 801e396:	1c68      	adds	r0, r5, #1
 801e398:	9008      	str	r0, [sp, #32]
 801e39a:	f7ff ff1d 	bl	801e1d8 <form_data_parser>
							fs_open(&file, "/index.shtml");
 801e39e:	4943      	ldr	r1, [pc, #268]	; (801e4ac <web_server_thread+0x214>)
 801e3a0:	a803      	add	r0, sp, #12
 801e3a2:	f7f7 fe7b 	bl	801609c <fs_open>
							netconn_write(newconn,
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	9300      	str	r3, [sp, #0]
 801e3aa:	9a04      	ldr	r2, [sp, #16]
 801e3ac:	9903      	ldr	r1, [sp, #12]
 801e3ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e3b0:	f7f6 fc34 	bl	8014c1c <netconn_write_partly>
							fs_close(&file);
 801e3b4:	a803      	add	r0, sp, #12
 801e3b6:	f7f7 fe95 	bl	80160e4 <fs_close>
 801e3ba:	e785      	b.n	801e2c8 <web_server_thread+0x30>
							fs_open(&file, "/img/logo.png");
 801e3bc:	4945      	ldr	r1, [pc, #276]	; (801e4d4 <web_server_thread+0x23c>)
 801e3be:	a803      	add	r0, sp, #12
 801e3c0:	f7f7 fe6c 	bl	801609c <fs_open>
							netconn_write(newconn,
 801e3c4:	2300      	movs	r3, #0
 801e3c6:	9300      	str	r3, [sp, #0]
 801e3c8:	9a04      	ldr	r2, [sp, #16]
 801e3ca:	9903      	ldr	r1, [sp, #12]
 801e3cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e3ce:	f7f6 fc25 	bl	8014c1c <netconn_write_partly>
							fs_close(&file);
 801e3d2:	a803      	add	r0, sp, #12
 801e3d4:	f7f7 fe86 	bl	80160e4 <fs_close>
 801e3d8:	e776      	b.n	801e2c8 <web_server_thread+0x30>
							fs_open(&file, "/img/icon.png");
 801e3da:	493f      	ldr	r1, [pc, #252]	; (801e4d8 <web_server_thread+0x240>)
 801e3dc:	a803      	add	r0, sp, #12
 801e3de:	f7f7 fe5d 	bl	801609c <fs_open>
							netconn_write(newconn,
 801e3e2:	2300      	movs	r3, #0
 801e3e4:	9300      	str	r3, [sp, #0]
 801e3e6:	9a04      	ldr	r2, [sp, #16]
 801e3e8:	9903      	ldr	r1, [sp, #12]
 801e3ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e3ec:	f7f6 fc16 	bl	8014c1c <netconn_write_partly>
							fs_close(&file);
 801e3f0:	a803      	add	r0, sp, #12
 801e3f2:	f7f7 fe77 	bl	80160e4 <fs_close>
 801e3f6:	e767      	b.n	801e2c8 <web_server_thread+0x30>
							fs_open(&file, "/style.css");
 801e3f8:	4938      	ldr	r1, [pc, #224]	; (801e4dc <web_server_thread+0x244>)
 801e3fa:	a803      	add	r0, sp, #12
 801e3fc:	f7f7 fe4e 	bl	801609c <fs_open>
							netconn_write(newconn,
 801e400:	2300      	movs	r3, #0
 801e402:	9300      	str	r3, [sp, #0]
 801e404:	9a04      	ldr	r2, [sp, #16]
 801e406:	9903      	ldr	r1, [sp, #12]
 801e408:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e40a:	f7f6 fc07 	bl	8014c1c <netconn_write_partly>
							fs_close(&file);
 801e40e:	a803      	add	r0, sp, #12
 801e410:	f7f7 fe68 	bl	80160e4 <fs_close>
 801e414:	e758      	b.n	801e2c8 <web_server_thread+0x30>
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 801e416:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e41a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 801e41e:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 801e422:	f7f3 fa43 	bl	80118ac <HAL_GPIO_TogglePin>
 801e426:	e74f      	b.n	801e2c8 <web_server_thread+0x30>
							sprintf(PAGE_BODY, "%s%s", PAGE_HEADER,
 801e428:	482d      	ldr	r0, [pc, #180]	; (801e4e0 <web_server_thread+0x248>)
 801e42a:	f7f8 fef1 	bl	8017210 <ip4addr_ntoa>
 801e42e:	4d2d      	ldr	r5, [pc, #180]	; (801e4e4 <web_server_thread+0x24c>)
 801e430:	4603      	mov	r3, r0
 801e432:	4a2d      	ldr	r2, [pc, #180]	; (801e4e8 <web_server_thread+0x250>)
 801e434:	492d      	ldr	r1, [pc, #180]	; (801e4ec <web_server_thread+0x254>)
 801e436:	4628      	mov	r0, r5
 801e438:	f7ff fd47 	bl	801deca <siprintf>
							netconn_write(newconn, PAGE_BODY,
 801e43c:	4628      	mov	r0, r5
 801e43e:	f7f1 fe09 	bl	8010054 <strlen>
 801e442:	2300      	movs	r3, #0
 801e444:	9300      	str	r3, [sp, #0]
 801e446:	2301      	movs	r3, #1
 801e448:	4602      	mov	r2, r0
 801e44a:	4629      	mov	r1, r5
 801e44c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e44e:	f7f6 fbe5 	bl	8014c1c <netconn_write_partly>
 801e452:	e739      	b.n	801e2c8 <web_server_thread+0x30>
							sprintf(PAGE_BODY, "%s%u", PAGE_HEADER,(uint)huart5.Init.BaudRate);
 801e454:	4d23      	ldr	r5, [pc, #140]	; (801e4e4 <web_server_thread+0x24c>)
 801e456:	4b26      	ldr	r3, [pc, #152]	; (801e4f0 <web_server_thread+0x258>)
 801e458:	685b      	ldr	r3, [r3, #4]
 801e45a:	4a23      	ldr	r2, [pc, #140]	; (801e4e8 <web_server_thread+0x250>)
 801e45c:	4925      	ldr	r1, [pc, #148]	; (801e4f4 <web_server_thread+0x25c>)
 801e45e:	4628      	mov	r0, r5
 801e460:	f7ff fd33 	bl	801deca <siprintf>
							netconn_write(newconn, PAGE_BODY,
 801e464:	4628      	mov	r0, r5
 801e466:	f7f1 fdf5 	bl	8010054 <strlen>
 801e46a:	2300      	movs	r3, #0
 801e46c:	9300      	str	r3, [sp, #0]
 801e46e:	2301      	movs	r3, #1
 801e470:	4602      	mov	r2, r0
 801e472:	4629      	mov	r1, r5
 801e474:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e476:	f7f6 fbd1 	bl	8014c1c <netconn_write_partly>
 801e47a:	e725      	b.n	801e2c8 <web_server_thread+0x30>
							fs_open(&file, "/404.html");
 801e47c:	491e      	ldr	r1, [pc, #120]	; (801e4f8 <web_server_thread+0x260>)
 801e47e:	a803      	add	r0, sp, #12
 801e480:	f7f7 fe0c 	bl	801609c <fs_open>
							netconn_write(newconn,
 801e484:	2300      	movs	r3, #0
 801e486:	9300      	str	r3, [sp, #0]
 801e488:	9a04      	ldr	r2, [sp, #16]
 801e48a:	9903      	ldr	r1, [sp, #12]
 801e48c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e48e:	f7f6 fbc5 	bl	8014c1c <netconn_write_partly>
							fs_close(&file);
 801e492:	a803      	add	r0, sp, #12
 801e494:	f7f7 fe26 	bl	80160e4 <fs_close>
							printf("File not found\n");
 801e498:	4818      	ldr	r0, [pc, #96]	; (801e4fc <web_server_thread+0x264>)
 801e49a:	f7ff fd47 	bl	801df2c <puts>
							osDelay(1);
 801e49e:	2001      	movs	r0, #1
 801e4a0:	f7f4 fb9b 	bl	8012bda <osDelay>
 801e4a4:	e710      	b.n	801e2c8 <web_server_thread+0x30>
 801e4a6:	bf00      	nop
 801e4a8:	08022db4 	.word	0x08022db4
 801e4ac:	08022de4 	.word	0x08022de4
 801e4b0:	08022dc8 	.word	0x08022dc8
 801e4b4:	08022dd0 	.word	0x08022dd0
 801e4b8:	08022dd8 	.word	0x08022dd8
 801e4bc:	08022df4 	.word	0x08022df4
 801e4c0:	08022e14 	.word	0x08022e14
 801e4c4:	08022e34 	.word	0x08022e34
 801e4c8:	08022e4c 	.word	0x08022e4c
 801e4cc:	08022e5c 	.word	0x08022e5c
 801e4d0:	08022e74 	.word	0x08022e74
 801e4d4:	08022e04 	.word	0x08022e04
 801e4d8:	08022e24 	.word	0x08022e24
 801e4dc:	08022e40 	.word	0x08022e40
 801e4e0:	2000bc14 	.word	0x2000bc14
 801e4e4:	20004114 	.word	0x20004114
 801e4e8:	08022d48 	.word	0x08022d48
 801e4ec:	08022e6c 	.word	0x08022e6c
 801e4f0:	2000bd7c 	.word	0x2000bd7c
 801e4f4:	08022e84 	.word	0x08022e84
 801e4f8:	08022e8c 	.word	0x08022e8c
 801e4fc:	08022e98 	.word	0x08022e98

0801e500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 801e500:	f8df d034 	ldr.w	sp, [pc, #52]	; 801e538 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801e504:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801e506:	e003      	b.n	801e510 <LoopCopyDataInit>

0801e508 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801e508:	4b0c      	ldr	r3, [pc, #48]	; (801e53c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801e50a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801e50c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801e50e:	3104      	adds	r1, #4

0801e510 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801e510:	480b      	ldr	r0, [pc, #44]	; (801e540 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801e512:	4b0c      	ldr	r3, [pc, #48]	; (801e544 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801e514:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801e516:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801e518:	d3f6      	bcc.n	801e508 <CopyDataInit>
  ldr  r2, =_sbss
 801e51a:	4a0b      	ldr	r2, [pc, #44]	; (801e548 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801e51c:	e002      	b.n	801e524 <LoopFillZerobss>

0801e51e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801e51e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801e520:	f842 3b04 	str.w	r3, [r2], #4

0801e524 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801e524:	4b09      	ldr	r3, [pc, #36]	; (801e54c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801e526:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801e528:	d3f9      	bcc.n	801e51e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801e52a:	f7ff fb3b 	bl	801dba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801e52e:	f000 f815 	bl	801e55c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801e532:	f7ff f9ad 	bl	801d890 <main>
  bx  lr    
 801e536:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801e538:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801e53c:	08022fe8 	.word	0x08022fe8
  ldr  r0, =_sdata
 801e540:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801e544:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 801e548:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 801e54c:	2000bdfc 	.word	0x2000bdfc

0801e550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801e550:	e7fe      	b.n	801e550 <ADC_IRQHandler>

0801e552 <atoi>:
 801e552:	220a      	movs	r2, #10
 801e554:	2100      	movs	r1, #0
 801e556:	f000 b8fb 	b.w	801e750 <strtol>
	...

0801e55c <__libc_init_array>:
 801e55c:	b570      	push	{r4, r5, r6, lr}
 801e55e:	4e0d      	ldr	r6, [pc, #52]	; (801e594 <__libc_init_array+0x38>)
 801e560:	4c0d      	ldr	r4, [pc, #52]	; (801e598 <__libc_init_array+0x3c>)
 801e562:	1ba4      	subs	r4, r4, r6
 801e564:	10a4      	asrs	r4, r4, #2
 801e566:	2500      	movs	r5, #0
 801e568:	42a5      	cmp	r5, r4
 801e56a:	d109      	bne.n	801e580 <__libc_init_array+0x24>
 801e56c:	4e0b      	ldr	r6, [pc, #44]	; (801e59c <__libc_init_array+0x40>)
 801e56e:	4c0c      	ldr	r4, [pc, #48]	; (801e5a0 <__libc_init_array+0x44>)
 801e570:	f000 f966 	bl	801e840 <_init>
 801e574:	1ba4      	subs	r4, r4, r6
 801e576:	10a4      	asrs	r4, r4, #2
 801e578:	2500      	movs	r5, #0
 801e57a:	42a5      	cmp	r5, r4
 801e57c:	d105      	bne.n	801e58a <__libc_init_array+0x2e>
 801e57e:	bd70      	pop	{r4, r5, r6, pc}
 801e580:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e584:	4798      	blx	r3
 801e586:	3501      	adds	r5, #1
 801e588:	e7ee      	b.n	801e568 <__libc_init_array+0xc>
 801e58a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e58e:	4798      	blx	r3
 801e590:	3501      	adds	r5, #1
 801e592:	e7f2      	b.n	801e57a <__libc_init_array+0x1e>
 801e594:	08022fe0 	.word	0x08022fe0
 801e598:	08022fe0 	.word	0x08022fe0
 801e59c:	08022fe0 	.word	0x08022fe0
 801e5a0:	08022fe4 	.word	0x08022fe4

0801e5a4 <__itoa>:
 801e5a4:	1e93      	subs	r3, r2, #2
 801e5a6:	2b22      	cmp	r3, #34	; 0x22
 801e5a8:	b510      	push	{r4, lr}
 801e5aa:	460c      	mov	r4, r1
 801e5ac:	d904      	bls.n	801e5b8 <__itoa+0x14>
 801e5ae:	2300      	movs	r3, #0
 801e5b0:	700b      	strb	r3, [r1, #0]
 801e5b2:	461c      	mov	r4, r3
 801e5b4:	4620      	mov	r0, r4
 801e5b6:	bd10      	pop	{r4, pc}
 801e5b8:	2a0a      	cmp	r2, #10
 801e5ba:	d109      	bne.n	801e5d0 <__itoa+0x2c>
 801e5bc:	2800      	cmp	r0, #0
 801e5be:	da07      	bge.n	801e5d0 <__itoa+0x2c>
 801e5c0:	232d      	movs	r3, #45	; 0x2d
 801e5c2:	700b      	strb	r3, [r1, #0]
 801e5c4:	4240      	negs	r0, r0
 801e5c6:	2101      	movs	r1, #1
 801e5c8:	4421      	add	r1, r4
 801e5ca:	f000 f8d7 	bl	801e77c <__utoa>
 801e5ce:	e7f1      	b.n	801e5b4 <__itoa+0x10>
 801e5d0:	2100      	movs	r1, #0
 801e5d2:	e7f9      	b.n	801e5c8 <__itoa+0x24>

0801e5d4 <itoa>:
 801e5d4:	f7ff bfe6 	b.w	801e5a4 <__itoa>

0801e5d8 <memcmp>:
 801e5d8:	b510      	push	{r4, lr}
 801e5da:	3901      	subs	r1, #1
 801e5dc:	4402      	add	r2, r0
 801e5de:	4290      	cmp	r0, r2
 801e5e0:	d101      	bne.n	801e5e6 <memcmp+0xe>
 801e5e2:	2000      	movs	r0, #0
 801e5e4:	bd10      	pop	{r4, pc}
 801e5e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e5ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e5ee:	42a3      	cmp	r3, r4
 801e5f0:	d0f5      	beq.n	801e5de <memcmp+0x6>
 801e5f2:	1b18      	subs	r0, r3, r4
 801e5f4:	bd10      	pop	{r4, pc}

0801e5f6 <memcpy>:
 801e5f6:	b510      	push	{r4, lr}
 801e5f8:	1e43      	subs	r3, r0, #1
 801e5fa:	440a      	add	r2, r1
 801e5fc:	4291      	cmp	r1, r2
 801e5fe:	d100      	bne.n	801e602 <memcpy+0xc>
 801e600:	bd10      	pop	{r4, pc}
 801e602:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e606:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e60a:	e7f7      	b.n	801e5fc <memcpy+0x6>

0801e60c <memset>:
 801e60c:	4402      	add	r2, r0
 801e60e:	4603      	mov	r3, r0
 801e610:	4293      	cmp	r3, r2
 801e612:	d100      	bne.n	801e616 <memset+0xa>
 801e614:	4770      	bx	lr
 801e616:	f803 1b01 	strb.w	r1, [r3], #1
 801e61a:	e7f9      	b.n	801e610 <memset+0x4>

0801e61c <strcpy>:
 801e61c:	4603      	mov	r3, r0
 801e61e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e622:	f803 2b01 	strb.w	r2, [r3], #1
 801e626:	2a00      	cmp	r2, #0
 801e628:	d1f9      	bne.n	801e61e <strcpy+0x2>
 801e62a:	4770      	bx	lr

0801e62c <strncmp>:
 801e62c:	b510      	push	{r4, lr}
 801e62e:	b16a      	cbz	r2, 801e64c <strncmp+0x20>
 801e630:	3901      	subs	r1, #1
 801e632:	1884      	adds	r4, r0, r2
 801e634:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e638:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e63c:	4293      	cmp	r3, r2
 801e63e:	d103      	bne.n	801e648 <strncmp+0x1c>
 801e640:	42a0      	cmp	r0, r4
 801e642:	d001      	beq.n	801e648 <strncmp+0x1c>
 801e644:	2b00      	cmp	r3, #0
 801e646:	d1f5      	bne.n	801e634 <strncmp+0x8>
 801e648:	1a98      	subs	r0, r3, r2
 801e64a:	bd10      	pop	{r4, pc}
 801e64c:	4610      	mov	r0, r2
 801e64e:	bd10      	pop	{r4, pc}

0801e650 <_strtol_l.isra.0>:
 801e650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e654:	4680      	mov	r8, r0
 801e656:	4689      	mov	r9, r1
 801e658:	4692      	mov	sl, r2
 801e65a:	461f      	mov	r7, r3
 801e65c:	468b      	mov	fp, r1
 801e65e:	465d      	mov	r5, fp
 801e660:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e662:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e666:	f000 f8c9 	bl	801e7fc <__locale_ctype_ptr_l>
 801e66a:	4420      	add	r0, r4
 801e66c:	7846      	ldrb	r6, [r0, #1]
 801e66e:	f016 0608 	ands.w	r6, r6, #8
 801e672:	d10b      	bne.n	801e68c <_strtol_l.isra.0+0x3c>
 801e674:	2c2d      	cmp	r4, #45	; 0x2d
 801e676:	d10b      	bne.n	801e690 <_strtol_l.isra.0+0x40>
 801e678:	782c      	ldrb	r4, [r5, #0]
 801e67a:	2601      	movs	r6, #1
 801e67c:	f10b 0502 	add.w	r5, fp, #2
 801e680:	b167      	cbz	r7, 801e69c <_strtol_l.isra.0+0x4c>
 801e682:	2f10      	cmp	r7, #16
 801e684:	d114      	bne.n	801e6b0 <_strtol_l.isra.0+0x60>
 801e686:	2c30      	cmp	r4, #48	; 0x30
 801e688:	d00a      	beq.n	801e6a0 <_strtol_l.isra.0+0x50>
 801e68a:	e011      	b.n	801e6b0 <_strtol_l.isra.0+0x60>
 801e68c:	46ab      	mov	fp, r5
 801e68e:	e7e6      	b.n	801e65e <_strtol_l.isra.0+0xe>
 801e690:	2c2b      	cmp	r4, #43	; 0x2b
 801e692:	bf04      	itt	eq
 801e694:	782c      	ldrbeq	r4, [r5, #0]
 801e696:	f10b 0502 	addeq.w	r5, fp, #2
 801e69a:	e7f1      	b.n	801e680 <_strtol_l.isra.0+0x30>
 801e69c:	2c30      	cmp	r4, #48	; 0x30
 801e69e:	d127      	bne.n	801e6f0 <_strtol_l.isra.0+0xa0>
 801e6a0:	782b      	ldrb	r3, [r5, #0]
 801e6a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e6a6:	2b58      	cmp	r3, #88	; 0x58
 801e6a8:	d14b      	bne.n	801e742 <_strtol_l.isra.0+0xf2>
 801e6aa:	786c      	ldrb	r4, [r5, #1]
 801e6ac:	2710      	movs	r7, #16
 801e6ae:	3502      	adds	r5, #2
 801e6b0:	2e00      	cmp	r6, #0
 801e6b2:	bf0c      	ite	eq
 801e6b4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801e6b8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801e6bc:	2200      	movs	r2, #0
 801e6be:	fbb1 fef7 	udiv	lr, r1, r7
 801e6c2:	4610      	mov	r0, r2
 801e6c4:	fb07 1c1e 	mls	ip, r7, lr, r1
 801e6c8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801e6cc:	2b09      	cmp	r3, #9
 801e6ce:	d811      	bhi.n	801e6f4 <_strtol_l.isra.0+0xa4>
 801e6d0:	461c      	mov	r4, r3
 801e6d2:	42a7      	cmp	r7, r4
 801e6d4:	dd1d      	ble.n	801e712 <_strtol_l.isra.0+0xc2>
 801e6d6:	1c53      	adds	r3, r2, #1
 801e6d8:	d007      	beq.n	801e6ea <_strtol_l.isra.0+0x9a>
 801e6da:	4586      	cmp	lr, r0
 801e6dc:	d316      	bcc.n	801e70c <_strtol_l.isra.0+0xbc>
 801e6de:	d101      	bne.n	801e6e4 <_strtol_l.isra.0+0x94>
 801e6e0:	45a4      	cmp	ip, r4
 801e6e2:	db13      	blt.n	801e70c <_strtol_l.isra.0+0xbc>
 801e6e4:	fb00 4007 	mla	r0, r0, r7, r4
 801e6e8:	2201      	movs	r2, #1
 801e6ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e6ee:	e7eb      	b.n	801e6c8 <_strtol_l.isra.0+0x78>
 801e6f0:	270a      	movs	r7, #10
 801e6f2:	e7dd      	b.n	801e6b0 <_strtol_l.isra.0+0x60>
 801e6f4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801e6f8:	2b19      	cmp	r3, #25
 801e6fa:	d801      	bhi.n	801e700 <_strtol_l.isra.0+0xb0>
 801e6fc:	3c37      	subs	r4, #55	; 0x37
 801e6fe:	e7e8      	b.n	801e6d2 <_strtol_l.isra.0+0x82>
 801e700:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801e704:	2b19      	cmp	r3, #25
 801e706:	d804      	bhi.n	801e712 <_strtol_l.isra.0+0xc2>
 801e708:	3c57      	subs	r4, #87	; 0x57
 801e70a:	e7e2      	b.n	801e6d2 <_strtol_l.isra.0+0x82>
 801e70c:	f04f 32ff 	mov.w	r2, #4294967295
 801e710:	e7eb      	b.n	801e6ea <_strtol_l.isra.0+0x9a>
 801e712:	1c53      	adds	r3, r2, #1
 801e714:	d108      	bne.n	801e728 <_strtol_l.isra.0+0xd8>
 801e716:	2322      	movs	r3, #34	; 0x22
 801e718:	f8c8 3000 	str.w	r3, [r8]
 801e71c:	4608      	mov	r0, r1
 801e71e:	f1ba 0f00 	cmp.w	sl, #0
 801e722:	d107      	bne.n	801e734 <_strtol_l.isra.0+0xe4>
 801e724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e728:	b106      	cbz	r6, 801e72c <_strtol_l.isra.0+0xdc>
 801e72a:	4240      	negs	r0, r0
 801e72c:	f1ba 0f00 	cmp.w	sl, #0
 801e730:	d00c      	beq.n	801e74c <_strtol_l.isra.0+0xfc>
 801e732:	b122      	cbz	r2, 801e73e <_strtol_l.isra.0+0xee>
 801e734:	3d01      	subs	r5, #1
 801e736:	f8ca 5000 	str.w	r5, [sl]
 801e73a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e73e:	464d      	mov	r5, r9
 801e740:	e7f9      	b.n	801e736 <_strtol_l.isra.0+0xe6>
 801e742:	2430      	movs	r4, #48	; 0x30
 801e744:	2f00      	cmp	r7, #0
 801e746:	d1b3      	bne.n	801e6b0 <_strtol_l.isra.0+0x60>
 801e748:	2708      	movs	r7, #8
 801e74a:	e7b1      	b.n	801e6b0 <_strtol_l.isra.0+0x60>
 801e74c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e750 <strtol>:
 801e750:	4b08      	ldr	r3, [pc, #32]	; (801e774 <strtol+0x24>)
 801e752:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e754:	681c      	ldr	r4, [r3, #0]
 801e756:	4d08      	ldr	r5, [pc, #32]	; (801e778 <strtol+0x28>)
 801e758:	6a23      	ldr	r3, [r4, #32]
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	bf08      	it	eq
 801e75e:	462b      	moveq	r3, r5
 801e760:	9300      	str	r3, [sp, #0]
 801e762:	4613      	mov	r3, r2
 801e764:	460a      	mov	r2, r1
 801e766:	4601      	mov	r1, r0
 801e768:	4620      	mov	r0, r4
 801e76a:	f7ff ff71 	bl	801e650 <_strtol_l.isra.0>
 801e76e:	b003      	add	sp, #12
 801e770:	bd30      	pop	{r4, r5, pc}
 801e772:	bf00      	nop
 801e774:	20000028 	.word	0x20000028
 801e778:	2000008c 	.word	0x2000008c

0801e77c <__utoa>:
 801e77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e77e:	4c1e      	ldr	r4, [pc, #120]	; (801e7f8 <__utoa+0x7c>)
 801e780:	b08b      	sub	sp, #44	; 0x2c
 801e782:	4603      	mov	r3, r0
 801e784:	460f      	mov	r7, r1
 801e786:	466d      	mov	r5, sp
 801e788:	f104 0e20 	add.w	lr, r4, #32
 801e78c:	6820      	ldr	r0, [r4, #0]
 801e78e:	6861      	ldr	r1, [r4, #4]
 801e790:	462e      	mov	r6, r5
 801e792:	c603      	stmia	r6!, {r0, r1}
 801e794:	3408      	adds	r4, #8
 801e796:	4574      	cmp	r4, lr
 801e798:	4635      	mov	r5, r6
 801e79a:	d1f7      	bne.n	801e78c <__utoa+0x10>
 801e79c:	7921      	ldrb	r1, [r4, #4]
 801e79e:	7131      	strb	r1, [r6, #4]
 801e7a0:	1e91      	subs	r1, r2, #2
 801e7a2:	6820      	ldr	r0, [r4, #0]
 801e7a4:	6030      	str	r0, [r6, #0]
 801e7a6:	2922      	cmp	r1, #34	; 0x22
 801e7a8:	f04f 0100 	mov.w	r1, #0
 801e7ac:	d904      	bls.n	801e7b8 <__utoa+0x3c>
 801e7ae:	7039      	strb	r1, [r7, #0]
 801e7b0:	460f      	mov	r7, r1
 801e7b2:	4638      	mov	r0, r7
 801e7b4:	b00b      	add	sp, #44	; 0x2c
 801e7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e7b8:	1e78      	subs	r0, r7, #1
 801e7ba:	4606      	mov	r6, r0
 801e7bc:	fbb3 f5f2 	udiv	r5, r3, r2
 801e7c0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801e7c4:	fb02 3315 	mls	r3, r2, r5, r3
 801e7c8:	4473      	add	r3, lr
 801e7ca:	1c4c      	adds	r4, r1, #1
 801e7cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801e7d0:	f806 3f01 	strb.w	r3, [r6, #1]!
 801e7d4:	462b      	mov	r3, r5
 801e7d6:	b965      	cbnz	r5, 801e7f2 <__utoa+0x76>
 801e7d8:	553d      	strb	r5, [r7, r4]
 801e7da:	187a      	adds	r2, r7, r1
 801e7dc:	1acc      	subs	r4, r1, r3
 801e7de:	42a3      	cmp	r3, r4
 801e7e0:	dae7      	bge.n	801e7b2 <__utoa+0x36>
 801e7e2:	7844      	ldrb	r4, [r0, #1]
 801e7e4:	7815      	ldrb	r5, [r2, #0]
 801e7e6:	f800 5f01 	strb.w	r5, [r0, #1]!
 801e7ea:	3301      	adds	r3, #1
 801e7ec:	f802 4901 	strb.w	r4, [r2], #-1
 801e7f0:	e7f4      	b.n	801e7dc <__utoa+0x60>
 801e7f2:	4621      	mov	r1, r4
 801e7f4:	e7e2      	b.n	801e7bc <__utoa+0x40>
 801e7f6:	bf00      	nop
 801e7f8:	08022ea8 	.word	0x08022ea8

0801e7fc <__locale_ctype_ptr_l>:
 801e7fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801e800:	4770      	bx	lr

0801e802 <__ascii_mbtowc>:
 801e802:	b082      	sub	sp, #8
 801e804:	b901      	cbnz	r1, 801e808 <__ascii_mbtowc+0x6>
 801e806:	a901      	add	r1, sp, #4
 801e808:	b142      	cbz	r2, 801e81c <__ascii_mbtowc+0x1a>
 801e80a:	b14b      	cbz	r3, 801e820 <__ascii_mbtowc+0x1e>
 801e80c:	7813      	ldrb	r3, [r2, #0]
 801e80e:	600b      	str	r3, [r1, #0]
 801e810:	7812      	ldrb	r2, [r2, #0]
 801e812:	1c10      	adds	r0, r2, #0
 801e814:	bf18      	it	ne
 801e816:	2001      	movne	r0, #1
 801e818:	b002      	add	sp, #8
 801e81a:	4770      	bx	lr
 801e81c:	4610      	mov	r0, r2
 801e81e:	e7fb      	b.n	801e818 <__ascii_mbtowc+0x16>
 801e820:	f06f 0001 	mvn.w	r0, #1
 801e824:	e7f8      	b.n	801e818 <__ascii_mbtowc+0x16>

0801e826 <__ascii_wctomb>:
 801e826:	b149      	cbz	r1, 801e83c <__ascii_wctomb+0x16>
 801e828:	2aff      	cmp	r2, #255	; 0xff
 801e82a:	bf85      	ittet	hi
 801e82c:	238a      	movhi	r3, #138	; 0x8a
 801e82e:	6003      	strhi	r3, [r0, #0]
 801e830:	700a      	strbls	r2, [r1, #0]
 801e832:	f04f 30ff 	movhi.w	r0, #4294967295
 801e836:	bf98      	it	ls
 801e838:	2001      	movls	r0, #1
 801e83a:	4770      	bx	lr
 801e83c:	4608      	mov	r0, r1
 801e83e:	4770      	bx	lr

0801e840 <_init>:
 801e840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e842:	bf00      	nop
 801e844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e846:	bc08      	pop	{r3}
 801e848:	469e      	mov	lr, r3
 801e84a:	4770      	bx	lr

0801e84c <_fini>:
 801e84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e84e:	bf00      	nop
 801e850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e852:	bc08      	pop	{r3}
 801e854:	469e      	mov	lr, r3
 801e856:	4770      	bx	lr
