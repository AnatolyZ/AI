
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .eeprom_emul  00000000  08008000  08008000  00040210  2**0
                  CONTENTS
  2 .text         00010a30  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000052d4  08020a30  08020a30  00030a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08025d04  08025d04  00035d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08025d0c  08025d0c  00035d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08025d10  08025d10  00035d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000210  20000000  08025d14  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00040210  2**0
                  CONTENTS
  9 .bss          00011f50  20000210  20000210  00040210  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20012160  20012160  00040210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006fd18  00000000  00000000  00040240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000bc1b  00000000  00000000  000aff58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001ec83  00000000  00000000  000bbb73  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000024a0  00000000  00000000  000da7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002c40  00000000  00000000  000dcc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ab2a  00000000  00000000  000df8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b7e1  00000000  00000000  000fa402  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00105be3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d2c  00000000  00000000  00105c60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000210 	.word	0x20000210
 801001c:	00000000 	.word	0x00000000
 8010020:	08020a18 	.word	0x08020a18

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000214 	.word	0x20000214
 801003c:	08020a18 	.word	0x08020a18

08010040 <setjmp>:
 8010040:	46ec      	mov	ip, sp
 8010042:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8010046:	f04f 0000 	mov.w	r0, #0
 801004a:	4770      	bx	lr

0801004c <longjmp>:
 801004c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8010050:	46e5      	mov	sp, ip
 8010052:	0008      	movs	r0, r1
 8010054:	bf08      	it	eq
 8010056:	2001      	moveq	r0, #1
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop

0801005c <strcmp>:
 801005c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010064:	2a01      	cmp	r2, #1
 8010066:	bf28      	it	cs
 8010068:	429a      	cmpcs	r2, r3
 801006a:	d0f7      	beq.n	801005c <strcmp>
 801006c:	1ad0      	subs	r0, r2, r3
 801006e:	4770      	bx	lr

08010070 <strlen>:
 8010070:	4603      	mov	r3, r0
 8010072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010076:	2a00      	cmp	r2, #0
 8010078:	d1fb      	bne.n	8010072 <strlen+0x2>
 801007a:	1a18      	subs	r0, r3, r0
 801007c:	3801      	subs	r0, #1
 801007e:	4770      	bx	lr

08010080 <__aeabi_uldivmod>:
 8010080:	b953      	cbnz	r3, 8010098 <__aeabi_uldivmod+0x18>
 8010082:	b94a      	cbnz	r2, 8010098 <__aeabi_uldivmod+0x18>
 8010084:	2900      	cmp	r1, #0
 8010086:	bf08      	it	eq
 8010088:	2800      	cmpeq	r0, #0
 801008a:	bf1c      	itt	ne
 801008c:	f04f 31ff 	movne.w	r1, #4294967295
 8010090:	f04f 30ff 	movne.w	r0, #4294967295
 8010094:	f000 b97a 	b.w	801038c <__aeabi_idiv0>
 8010098:	f1ad 0c08 	sub.w	ip, sp, #8
 801009c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80100a0:	f000 f806 	bl	80100b0 <__udivmoddi4>
 80100a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80100a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100ac:	b004      	add	sp, #16
 80100ae:	4770      	bx	lr

080100b0 <__udivmoddi4>:
 80100b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100b4:	468c      	mov	ip, r1
 80100b6:	460d      	mov	r5, r1
 80100b8:	4604      	mov	r4, r0
 80100ba:	9e08      	ldr	r6, [sp, #32]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d151      	bne.n	8010164 <__udivmoddi4+0xb4>
 80100c0:	428a      	cmp	r2, r1
 80100c2:	4617      	mov	r7, r2
 80100c4:	d96d      	bls.n	80101a2 <__udivmoddi4+0xf2>
 80100c6:	fab2 fe82 	clz	lr, r2
 80100ca:	f1be 0f00 	cmp.w	lr, #0
 80100ce:	d00b      	beq.n	80100e8 <__udivmoddi4+0x38>
 80100d0:	f1ce 0c20 	rsb	ip, lr, #32
 80100d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80100d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80100dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80100e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80100e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80100e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80100ec:	0c25      	lsrs	r5, r4, #16
 80100ee:	fbbc f8fa 	udiv	r8, ip, sl
 80100f2:	fa1f f987 	uxth.w	r9, r7
 80100f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80100fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80100fe:	fb08 f309 	mul.w	r3, r8, r9
 8010102:	42ab      	cmp	r3, r5
 8010104:	d90a      	bls.n	801011c <__udivmoddi4+0x6c>
 8010106:	19ed      	adds	r5, r5, r7
 8010108:	f108 32ff 	add.w	r2, r8, #4294967295
 801010c:	f080 8123 	bcs.w	8010356 <__udivmoddi4+0x2a6>
 8010110:	42ab      	cmp	r3, r5
 8010112:	f240 8120 	bls.w	8010356 <__udivmoddi4+0x2a6>
 8010116:	f1a8 0802 	sub.w	r8, r8, #2
 801011a:	443d      	add	r5, r7
 801011c:	1aed      	subs	r5, r5, r3
 801011e:	b2a4      	uxth	r4, r4
 8010120:	fbb5 f0fa 	udiv	r0, r5, sl
 8010124:	fb0a 5510 	mls	r5, sl, r0, r5
 8010128:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801012c:	fb00 f909 	mul.w	r9, r0, r9
 8010130:	45a1      	cmp	r9, r4
 8010132:	d909      	bls.n	8010148 <__udivmoddi4+0x98>
 8010134:	19e4      	adds	r4, r4, r7
 8010136:	f100 33ff 	add.w	r3, r0, #4294967295
 801013a:	f080 810a 	bcs.w	8010352 <__udivmoddi4+0x2a2>
 801013e:	45a1      	cmp	r9, r4
 8010140:	f240 8107 	bls.w	8010352 <__udivmoddi4+0x2a2>
 8010144:	3802      	subs	r0, #2
 8010146:	443c      	add	r4, r7
 8010148:	eba4 0409 	sub.w	r4, r4, r9
 801014c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010150:	2100      	movs	r1, #0
 8010152:	2e00      	cmp	r6, #0
 8010154:	d061      	beq.n	801021a <__udivmoddi4+0x16a>
 8010156:	fa24 f40e 	lsr.w	r4, r4, lr
 801015a:	2300      	movs	r3, #0
 801015c:	6034      	str	r4, [r6, #0]
 801015e:	6073      	str	r3, [r6, #4]
 8010160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010164:	428b      	cmp	r3, r1
 8010166:	d907      	bls.n	8010178 <__udivmoddi4+0xc8>
 8010168:	2e00      	cmp	r6, #0
 801016a:	d054      	beq.n	8010216 <__udivmoddi4+0x166>
 801016c:	2100      	movs	r1, #0
 801016e:	e886 0021 	stmia.w	r6, {r0, r5}
 8010172:	4608      	mov	r0, r1
 8010174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010178:	fab3 f183 	clz	r1, r3
 801017c:	2900      	cmp	r1, #0
 801017e:	f040 808e 	bne.w	801029e <__udivmoddi4+0x1ee>
 8010182:	42ab      	cmp	r3, r5
 8010184:	d302      	bcc.n	801018c <__udivmoddi4+0xdc>
 8010186:	4282      	cmp	r2, r0
 8010188:	f200 80fa 	bhi.w	8010380 <__udivmoddi4+0x2d0>
 801018c:	1a84      	subs	r4, r0, r2
 801018e:	eb65 0503 	sbc.w	r5, r5, r3
 8010192:	2001      	movs	r0, #1
 8010194:	46ac      	mov	ip, r5
 8010196:	2e00      	cmp	r6, #0
 8010198:	d03f      	beq.n	801021a <__udivmoddi4+0x16a>
 801019a:	e886 1010 	stmia.w	r6, {r4, ip}
 801019e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101a2:	b912      	cbnz	r2, 80101aa <__udivmoddi4+0xfa>
 80101a4:	2701      	movs	r7, #1
 80101a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80101aa:	fab7 fe87 	clz	lr, r7
 80101ae:	f1be 0f00 	cmp.w	lr, #0
 80101b2:	d134      	bne.n	801021e <__udivmoddi4+0x16e>
 80101b4:	1beb      	subs	r3, r5, r7
 80101b6:	0c3a      	lsrs	r2, r7, #16
 80101b8:	fa1f fc87 	uxth.w	ip, r7
 80101bc:	2101      	movs	r1, #1
 80101be:	fbb3 f8f2 	udiv	r8, r3, r2
 80101c2:	0c25      	lsrs	r5, r4, #16
 80101c4:	fb02 3318 	mls	r3, r2, r8, r3
 80101c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80101cc:	fb0c f308 	mul.w	r3, ip, r8
 80101d0:	42ab      	cmp	r3, r5
 80101d2:	d907      	bls.n	80101e4 <__udivmoddi4+0x134>
 80101d4:	19ed      	adds	r5, r5, r7
 80101d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80101da:	d202      	bcs.n	80101e2 <__udivmoddi4+0x132>
 80101dc:	42ab      	cmp	r3, r5
 80101de:	f200 80d1 	bhi.w	8010384 <__udivmoddi4+0x2d4>
 80101e2:	4680      	mov	r8, r0
 80101e4:	1aed      	subs	r5, r5, r3
 80101e6:	b2a3      	uxth	r3, r4
 80101e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80101ec:	fb02 5510 	mls	r5, r2, r0, r5
 80101f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80101f4:	fb0c fc00 	mul.w	ip, ip, r0
 80101f8:	45a4      	cmp	ip, r4
 80101fa:	d907      	bls.n	801020c <__udivmoddi4+0x15c>
 80101fc:	19e4      	adds	r4, r4, r7
 80101fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8010202:	d202      	bcs.n	801020a <__udivmoddi4+0x15a>
 8010204:	45a4      	cmp	ip, r4
 8010206:	f200 80b8 	bhi.w	801037a <__udivmoddi4+0x2ca>
 801020a:	4618      	mov	r0, r3
 801020c:	eba4 040c 	sub.w	r4, r4, ip
 8010210:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010214:	e79d      	b.n	8010152 <__udivmoddi4+0xa2>
 8010216:	4631      	mov	r1, r6
 8010218:	4630      	mov	r0, r6
 801021a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021e:	f1ce 0420 	rsb	r4, lr, #32
 8010222:	fa05 f30e 	lsl.w	r3, r5, lr
 8010226:	fa07 f70e 	lsl.w	r7, r7, lr
 801022a:	fa20 f804 	lsr.w	r8, r0, r4
 801022e:	0c3a      	lsrs	r2, r7, #16
 8010230:	fa25 f404 	lsr.w	r4, r5, r4
 8010234:	ea48 0803 	orr.w	r8, r8, r3
 8010238:	fbb4 f1f2 	udiv	r1, r4, r2
 801023c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8010240:	fb02 4411 	mls	r4, r2, r1, r4
 8010244:	fa1f fc87 	uxth.w	ip, r7
 8010248:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 801024c:	fb01 f30c 	mul.w	r3, r1, ip
 8010250:	42ab      	cmp	r3, r5
 8010252:	fa00 f40e 	lsl.w	r4, r0, lr
 8010256:	d909      	bls.n	801026c <__udivmoddi4+0x1bc>
 8010258:	19ed      	adds	r5, r5, r7
 801025a:	f101 30ff 	add.w	r0, r1, #4294967295
 801025e:	f080 808a 	bcs.w	8010376 <__udivmoddi4+0x2c6>
 8010262:	42ab      	cmp	r3, r5
 8010264:	f240 8087 	bls.w	8010376 <__udivmoddi4+0x2c6>
 8010268:	3902      	subs	r1, #2
 801026a:	443d      	add	r5, r7
 801026c:	1aeb      	subs	r3, r5, r3
 801026e:	fa1f f588 	uxth.w	r5, r8
 8010272:	fbb3 f0f2 	udiv	r0, r3, r2
 8010276:	fb02 3310 	mls	r3, r2, r0, r3
 801027a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 801027e:	fb00 f30c 	mul.w	r3, r0, ip
 8010282:	42ab      	cmp	r3, r5
 8010284:	d907      	bls.n	8010296 <__udivmoddi4+0x1e6>
 8010286:	19ed      	adds	r5, r5, r7
 8010288:	f100 38ff 	add.w	r8, r0, #4294967295
 801028c:	d26f      	bcs.n	801036e <__udivmoddi4+0x2be>
 801028e:	42ab      	cmp	r3, r5
 8010290:	d96d      	bls.n	801036e <__udivmoddi4+0x2be>
 8010292:	3802      	subs	r0, #2
 8010294:	443d      	add	r5, r7
 8010296:	1aeb      	subs	r3, r5, r3
 8010298:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801029c:	e78f      	b.n	80101be <__udivmoddi4+0x10e>
 801029e:	f1c1 0720 	rsb	r7, r1, #32
 80102a2:	fa22 f807 	lsr.w	r8, r2, r7
 80102a6:	408b      	lsls	r3, r1
 80102a8:	fa05 f401 	lsl.w	r4, r5, r1
 80102ac:	ea48 0303 	orr.w	r3, r8, r3
 80102b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80102b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80102b8:	40fd      	lsrs	r5, r7
 80102ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80102be:	fbb5 f9fc 	udiv	r9, r5, ip
 80102c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80102c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80102ca:	fa1f f883 	uxth.w	r8, r3
 80102ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80102d2:	fb09 f408 	mul.w	r4, r9, r8
 80102d6:	42ac      	cmp	r4, r5
 80102d8:	fa02 f201 	lsl.w	r2, r2, r1
 80102dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80102e0:	d908      	bls.n	80102f4 <__udivmoddi4+0x244>
 80102e2:	18ed      	adds	r5, r5, r3
 80102e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80102e8:	d243      	bcs.n	8010372 <__udivmoddi4+0x2c2>
 80102ea:	42ac      	cmp	r4, r5
 80102ec:	d941      	bls.n	8010372 <__udivmoddi4+0x2c2>
 80102ee:	f1a9 0902 	sub.w	r9, r9, #2
 80102f2:	441d      	add	r5, r3
 80102f4:	1b2d      	subs	r5, r5, r4
 80102f6:	fa1f fe8e 	uxth.w	lr, lr
 80102fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80102fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8010302:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8010306:	fb00 f808 	mul.w	r8, r0, r8
 801030a:	45a0      	cmp	r8, r4
 801030c:	d907      	bls.n	801031e <__udivmoddi4+0x26e>
 801030e:	18e4      	adds	r4, r4, r3
 8010310:	f100 35ff 	add.w	r5, r0, #4294967295
 8010314:	d229      	bcs.n	801036a <__udivmoddi4+0x2ba>
 8010316:	45a0      	cmp	r8, r4
 8010318:	d927      	bls.n	801036a <__udivmoddi4+0x2ba>
 801031a:	3802      	subs	r0, #2
 801031c:	441c      	add	r4, r3
 801031e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010322:	eba4 0408 	sub.w	r4, r4, r8
 8010326:	fba0 8902 	umull	r8, r9, r0, r2
 801032a:	454c      	cmp	r4, r9
 801032c:	46c6      	mov	lr, r8
 801032e:	464d      	mov	r5, r9
 8010330:	d315      	bcc.n	801035e <__udivmoddi4+0x2ae>
 8010332:	d012      	beq.n	801035a <__udivmoddi4+0x2aa>
 8010334:	b156      	cbz	r6, 801034c <__udivmoddi4+0x29c>
 8010336:	ebba 030e 	subs.w	r3, sl, lr
 801033a:	eb64 0405 	sbc.w	r4, r4, r5
 801033e:	fa04 f707 	lsl.w	r7, r4, r7
 8010342:	40cb      	lsrs	r3, r1
 8010344:	431f      	orrs	r7, r3
 8010346:	40cc      	lsrs	r4, r1
 8010348:	6037      	str	r7, [r6, #0]
 801034a:	6074      	str	r4, [r6, #4]
 801034c:	2100      	movs	r1, #0
 801034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010352:	4618      	mov	r0, r3
 8010354:	e6f8      	b.n	8010148 <__udivmoddi4+0x98>
 8010356:	4690      	mov	r8, r2
 8010358:	e6e0      	b.n	801011c <__udivmoddi4+0x6c>
 801035a:	45c2      	cmp	sl, r8
 801035c:	d2ea      	bcs.n	8010334 <__udivmoddi4+0x284>
 801035e:	ebb8 0e02 	subs.w	lr, r8, r2
 8010362:	eb69 0503 	sbc.w	r5, r9, r3
 8010366:	3801      	subs	r0, #1
 8010368:	e7e4      	b.n	8010334 <__udivmoddi4+0x284>
 801036a:	4628      	mov	r0, r5
 801036c:	e7d7      	b.n	801031e <__udivmoddi4+0x26e>
 801036e:	4640      	mov	r0, r8
 8010370:	e791      	b.n	8010296 <__udivmoddi4+0x1e6>
 8010372:	4681      	mov	r9, r0
 8010374:	e7be      	b.n	80102f4 <__udivmoddi4+0x244>
 8010376:	4601      	mov	r1, r0
 8010378:	e778      	b.n	801026c <__udivmoddi4+0x1bc>
 801037a:	3802      	subs	r0, #2
 801037c:	443c      	add	r4, r7
 801037e:	e745      	b.n	801020c <__udivmoddi4+0x15c>
 8010380:	4608      	mov	r0, r1
 8010382:	e708      	b.n	8010196 <__udivmoddi4+0xe6>
 8010384:	f1a8 0802 	sub.w	r8, r8, #2
 8010388:	443d      	add	r5, r7
 801038a:	e72b      	b.n	80101e4 <__udivmoddi4+0x134>

0801038c <__aeabi_idiv0>:
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop

08010390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010390:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010392:	4b0b      	ldr	r3, [pc, #44]	; (80103c0 <HAL_Init+0x30>)
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801039a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80103a2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80103aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80103ac:	2003      	movs	r0, #3
 80103ae:	f000 f82f 	bl	8010410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80103b2:	2000      	movs	r0, #0
 80103b4:	f00e fc78 	bl	801eca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80103b8:	f00e fc54 	bl	801ec64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80103bc:	2000      	movs	r0, #0
 80103be:	bd08      	pop	{r3, pc}
 80103c0:	40023c00 	.word	0x40023c00

080103c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80103c4:	4a03      	ldr	r2, [pc, #12]	; (80103d4 <HAL_IncTick+0x10>)
 80103c6:	6811      	ldr	r1, [r2, #0]
 80103c8:	4b03      	ldr	r3, [pc, #12]	; (80103d8 <HAL_IncTick+0x14>)
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	440b      	add	r3, r1
 80103ce:	6013      	str	r3, [r2, #0]
 80103d0:	4770      	bx	lr
 80103d2:	bf00      	nop
 80103d4:	2000a1a4 	.word	0x2000a1a4
 80103d8:	20000000 	.word	0x20000000

080103dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80103dc:	4b01      	ldr	r3, [pc, #4]	; (80103e4 <HAL_GetTick+0x8>)
 80103de:	6818      	ldr	r0, [r3, #0]
}
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	2000a1a4 	.word	0x2000a1a4

080103e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80103ec:	f7ff fff6 	bl	80103dc <HAL_GetTick>
 80103f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80103f2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80103f6:	d002      	beq.n	80103fe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80103f8:	4b04      	ldr	r3, [pc, #16]	; (801040c <HAL_Delay+0x24>)
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80103fe:	f7ff ffed 	bl	80103dc <HAL_GetTick>
 8010402:	1b40      	subs	r0, r0, r5
 8010404:	4284      	cmp	r4, r0
 8010406:	d8fa      	bhi.n	80103fe <HAL_Delay+0x16>
  {
  }
}
 8010408:	bd38      	pop	{r3, r4, r5, pc}
 801040a:	bf00      	nop
 801040c:	20000000 	.word	0x20000000

08010410 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010410:	4a07      	ldr	r2, [pc, #28]	; (8010430 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8010412:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010414:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010418:	041b      	lsls	r3, r3, #16
 801041a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 801041c:	0200      	lsls	r0, r0, #8
 801041e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010422:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8010424:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8010428:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 801042c:	60d0      	str	r0, [r2, #12]
 801042e:	4770      	bx	lr
 8010430:	e000ed00 	.word	0xe000ed00

08010434 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010434:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010436:	4b16      	ldr	r3, [pc, #88]	; (8010490 <HAL_NVIC_SetPriority+0x5c>)
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801043e:	f1c3 0407 	rsb	r4, r3, #7
 8010442:	2c04      	cmp	r4, #4
 8010444:	bf28      	it	cs
 8010446:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010448:	1d1d      	adds	r5, r3, #4
 801044a:	2d06      	cmp	r5, #6
 801044c:	d917      	bls.n	801047e <HAL_NVIC_SetPriority+0x4a>
 801044e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010450:	2501      	movs	r5, #1
 8010452:	fa05 f404 	lsl.w	r4, r5, r4
 8010456:	3c01      	subs	r4, #1
 8010458:	4021      	ands	r1, r4
 801045a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801045c:	fa05 f303 	lsl.w	r3, r5, r3
 8010460:	3b01      	subs	r3, #1
 8010462:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010464:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8010466:	2800      	cmp	r0, #0
 8010468:	db0b      	blt.n	8010482 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801046a:	0109      	lsls	r1, r1, #4
 801046c:	b2c9      	uxtb	r1, r1
 801046e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8010472:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8010476:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 801047a:	bc30      	pop	{r4, r5}
 801047c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801047e:	2300      	movs	r3, #0
 8010480:	e7e6      	b.n	8010450 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010482:	f000 000f 	and.w	r0, r0, #15
 8010486:	0109      	lsls	r1, r1, #4
 8010488:	b2c9      	uxtb	r1, r1
 801048a:	4b02      	ldr	r3, [pc, #8]	; (8010494 <HAL_NVIC_SetPriority+0x60>)
 801048c:	5419      	strb	r1, [r3, r0]
 801048e:	e7f4      	b.n	801047a <HAL_NVIC_SetPriority+0x46>
 8010490:	e000ed00 	.word	0xe000ed00
 8010494:	e000ed14 	.word	0xe000ed14

08010498 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010498:	0942      	lsrs	r2, r0, #5
 801049a:	f000 001f 	and.w	r0, r0, #31
 801049e:	2301      	movs	r3, #1
 80104a0:	fa03 f000 	lsl.w	r0, r3, r0
 80104a4:	4b01      	ldr	r3, [pc, #4]	; (80104ac <HAL_NVIC_EnableIRQ+0x14>)
 80104a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80104aa:	4770      	bx	lr
 80104ac:	e000e100 	.word	0xe000e100

080104b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80104b0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80104b2:	6805      	ldr	r5, [r0, #0]
 80104b4:	682c      	ldr	r4, [r5, #0]
 80104b6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80104ba:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80104bc:	6804      	ldr	r4, [r0, #0]
 80104be:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80104c0:	6883      	ldr	r3, [r0, #8]
 80104c2:	2b40      	cmp	r3, #64	; 0x40
 80104c4:	d005      	beq.n	80104d2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80104c6:	6803      	ldr	r3, [r0, #0]
 80104c8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	60da      	str	r2, [r3, #12]
  }
}
 80104ce:	bc30      	pop	{r4, r5}
 80104d0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80104d2:	6803      	ldr	r3, [r0, #0]
 80104d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80104d6:	6803      	ldr	r3, [r0, #0]
 80104d8:	60d9      	str	r1, [r3, #12]
 80104da:	e7f8      	b.n	80104ce <DMA_SetConfig+0x1e>

080104dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80104dc:	6802      	ldr	r2, [r0, #0]
 80104de:	b2d3      	uxtb	r3, r2
 80104e0:	3b10      	subs	r3, #16
 80104e2:	490b      	ldr	r1, [pc, #44]	; (8010510 <DMA_CalcBaseAndBitshift+0x34>)
 80104e4:	fba1 1303 	umull	r1, r3, r1, r3
 80104e8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80104ea:	490a      	ldr	r1, [pc, #40]	; (8010514 <DMA_CalcBaseAndBitshift+0x38>)
 80104ec:	5cc9      	ldrb	r1, [r1, r3]
 80104ee:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80104f0:	2b03      	cmp	r3, #3
 80104f2:	d806      	bhi.n	8010502 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80104f4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80104f8:	f022 0203 	bic.w	r2, r2, #3
 80104fc:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80104fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8010500:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010502:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8010506:	f022 0203 	bic.w	r2, r2, #3
 801050a:	3204      	adds	r2, #4
 801050c:	6582      	str	r2, [r0, #88]	; 0x58
 801050e:	e7f6      	b.n	80104fe <DMA_CalcBaseAndBitshift+0x22>
 8010510:	aaaaaaab 	.word	0xaaaaaaab
 8010514:	08020ad4 	.word	0x08020ad4

08010518 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010518:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801051a:	6982      	ldr	r2, [r0, #24]
 801051c:	b992      	cbnz	r2, 8010544 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 801051e:	2b01      	cmp	r3, #1
 8010520:	d00a      	beq.n	8010538 <DMA_CheckFifoParam+0x20>
 8010522:	b11b      	cbz	r3, 801052c <DMA_CheckFifoParam+0x14>
 8010524:	2b02      	cmp	r3, #2
 8010526:	d001      	beq.n	801052c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8010528:	2000      	movs	r0, #0
 801052a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801052c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801052e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8010532:	d12c      	bne.n	801058e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8010534:	2000      	movs	r0, #0
 8010536:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010538:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801053a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801053e:	d028      	beq.n	8010592 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8010540:	2000      	movs	r0, #0
 8010542:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010544:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8010548:	d005      	beq.n	8010556 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801054a:	2b02      	cmp	r3, #2
 801054c:	d929      	bls.n	80105a2 <DMA_CheckFifoParam+0x8a>
 801054e:	2b03      	cmp	r3, #3
 8010550:	d015      	beq.n	801057e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8010552:	2000      	movs	r0, #0
 8010554:	4770      	bx	lr
    switch (tmp)
 8010556:	2b03      	cmp	r3, #3
 8010558:	d803      	bhi.n	8010562 <DMA_CheckFifoParam+0x4a>
 801055a:	e8df f003 	tbb	[pc, r3]
 801055e:	041c      	.short	0x041c
 8010560:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8010562:	2000      	movs	r0, #0
 8010564:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010566:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010568:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 801056c:	d115      	bne.n	801059a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 801056e:	2000      	movs	r0, #0
 8010570:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010572:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010578:	d011      	beq.n	801059e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 801057a:	2000      	movs	r0, #0
 801057c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801057e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010580:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8010584:	d001      	beq.n	801058a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8010586:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8010588:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 801058a:	2000      	movs	r0, #0
 801058c:	4770      	bx	lr
        status = HAL_ERROR;
 801058e:	2001      	movs	r0, #1
 8010590:	4770      	bx	lr
        status = HAL_ERROR;
 8010592:	2001      	movs	r0, #1
 8010594:	4770      	bx	lr
      status = HAL_ERROR;
 8010596:	2001      	movs	r0, #1
 8010598:	4770      	bx	lr
        status = HAL_ERROR;
 801059a:	2001      	movs	r0, #1
 801059c:	4770      	bx	lr
        status = HAL_ERROR;
 801059e:	2001      	movs	r0, #1
 80105a0:	4770      	bx	lr
      status = HAL_ERROR;
 80105a2:	2001      	movs	r0, #1
 80105a4:	4770      	bx	lr
	...

080105a8 <HAL_DMA_Init>:
{
 80105a8:	b570      	push	{r4, r5, r6, lr}
 80105aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80105ac:	f7ff ff16 	bl	80103dc <HAL_GetTick>
  if(hdma == NULL)
 80105b0:	2c00      	cmp	r4, #0
 80105b2:	d05d      	beq.n	8010670 <HAL_DMA_Init+0xc8>
 80105b4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80105b6:	2300      	movs	r3, #0
 80105b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80105bc:	2302      	movs	r3, #2
 80105be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80105c2:	6822      	ldr	r2, [r4, #0]
 80105c4:	6813      	ldr	r3, [r2, #0]
 80105c6:	f023 0301 	bic.w	r3, r3, #1
 80105ca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80105cc:	6823      	ldr	r3, [r4, #0]
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	f012 0f01 	tst.w	r2, #1
 80105d4:	d00a      	beq.n	80105ec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80105d6:	f7ff ff01 	bl	80103dc <HAL_GetTick>
 80105da:	1b40      	subs	r0, r0, r5
 80105dc:	2805      	cmp	r0, #5
 80105de:	d9f5      	bls.n	80105cc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80105e0:	2320      	movs	r3, #32
 80105e2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80105e4:	2003      	movs	r0, #3
 80105e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80105ea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80105ec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80105ee:	4921      	ldr	r1, [pc, #132]	; (8010674 <HAL_DMA_Init+0xcc>)
 80105f0:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80105f2:	6862      	ldr	r2, [r4, #4]
 80105f4:	68a0      	ldr	r0, [r4, #8]
 80105f6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80105f8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80105fa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80105fc:	6920      	ldr	r0, [r4, #16]
 80105fe:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010600:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010602:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010604:	69a0      	ldr	r0, [r4, #24]
 8010606:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8010608:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801060a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 801060c:	6a20      	ldr	r0, [r4, #32]
 801060e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010610:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010612:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010614:	2904      	cmp	r1, #4
 8010616:	d016      	beq.n	8010646 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8010618:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 801061a:	6826      	ldr	r6, [r4, #0]
 801061c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801061e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8010622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010624:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010626:	2b04      	cmp	r3, #4
 8010628:	d012      	beq.n	8010650 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 801062a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801062c:	4620      	mov	r0, r4
 801062e:	f7ff ff55 	bl	80104dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010632:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010634:	233f      	movs	r3, #63	; 0x3f
 8010636:	4093      	lsls	r3, r2
 8010638:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801063a:	2000      	movs	r0, #0
 801063c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 801063e:	2301      	movs	r3, #1
 8010640:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8010644:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010646:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010648:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801064a:	4301      	orrs	r1, r0
 801064c:	430a      	orrs	r2, r1
 801064e:	e7e3      	b.n	8010618 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 8010650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010652:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010656:	2b00      	cmp	r3, #0
 8010658:	d0e7      	beq.n	801062a <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801065a:	4620      	mov	r0, r4
 801065c:	f7ff ff5c 	bl	8010518 <DMA_CheckFifoParam>
 8010660:	2800      	cmp	r0, #0
 8010662:	d0e2      	beq.n	801062a <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010664:	2340      	movs	r3, #64	; 0x40
 8010666:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8010668:	2001      	movs	r0, #1
 801066a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 801066e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010670:	2001      	movs	r0, #1
}
 8010672:	bd70      	pop	{r4, r5, r6, pc}
 8010674:	f010803f 	.word	0xf010803f

08010678 <HAL_DMA_Start_IT>:
{
 8010678:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801067a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 801067c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8010680:	2c01      	cmp	r4, #1
 8010682:	d031      	beq.n	80106e8 <HAL_DMA_Start_IT+0x70>
 8010684:	2401      	movs	r4, #1
 8010686:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 801068a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 801068e:	b2e4      	uxtb	r4, r4
 8010690:	2c01      	cmp	r4, #1
 8010692:	d004      	beq.n	801069e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8010694:	2300      	movs	r3, #0
 8010696:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 801069a:	2002      	movs	r0, #2
 801069c:	bd38      	pop	{r3, r4, r5, pc}
 801069e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80106a0:	2002      	movs	r0, #2
 80106a2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80106a6:	2000      	movs	r0, #0
 80106a8:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80106aa:	4620      	mov	r0, r4
 80106ac:	f7ff ff00 	bl	80104b0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80106b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80106b2:	233f      	movs	r3, #63	; 0x3f
 80106b4:	4093      	lsls	r3, r2
 80106b6:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80106b8:	6822      	ldr	r2, [r4, #0]
 80106ba:	6813      	ldr	r3, [r2, #0]
 80106bc:	f043 0316 	orr.w	r3, r3, #22
 80106c0:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80106c2:	6822      	ldr	r2, [r4, #0]
 80106c4:	6953      	ldr	r3, [r2, #20]
 80106c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106ca:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80106cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80106ce:	b123      	cbz	r3, 80106da <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 80106d0:	6822      	ldr	r2, [r4, #0]
 80106d2:	6813      	ldr	r3, [r2, #0]
 80106d4:	f043 0308 	orr.w	r3, r3, #8
 80106d8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80106da:	6822      	ldr	r2, [r4, #0]
 80106dc:	6813      	ldr	r3, [r2, #0]
 80106de:	f043 0301 	orr.w	r3, r3, #1
 80106e2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80106e4:	2000      	movs	r0, #0
 80106e6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 80106e8:	2002      	movs	r0, #2
}
 80106ea:	bd38      	pop	{r3, r4, r5, pc}

080106ec <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80106ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b02      	cmp	r3, #2
 80106f4:	d003      	beq.n	80106fe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80106f6:	2380      	movs	r3, #128	; 0x80
 80106f8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80106fa:	2001      	movs	r0, #1
 80106fc:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80106fe:	2305      	movs	r3, #5
 8010700:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8010704:	6802      	ldr	r2, [r0, #0]
 8010706:	6813      	ldr	r3, [r2, #0]
 8010708:	f023 0301 	bic.w	r3, r3, #1
 801070c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 801070e:	2000      	movs	r0, #0
}
 8010710:	4770      	bx	lr
	...

08010714 <HAL_DMA_IRQHandler>:
{
 8010714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010716:	b083      	sub	sp, #12
 8010718:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 801071a:	2300      	movs	r3, #0
 801071c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 801071e:	4b72      	ldr	r3, [pc, #456]	; (80108e8 <HAL_DMA_IRQHandler+0x1d4>)
 8010720:	681d      	ldr	r5, [r3, #0]
 8010722:	4b72      	ldr	r3, [pc, #456]	; (80108ec <HAL_DMA_IRQHandler+0x1d8>)
 8010724:	fba3 3505 	umull	r3, r5, r3, r5
 8010728:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801072a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 801072c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801072e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8010730:	2308      	movs	r3, #8
 8010732:	4093      	lsls	r3, r2
 8010734:	421e      	tst	r6, r3
 8010736:	d010      	beq.n	801075a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010738:	6803      	ldr	r3, [r0, #0]
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	f012 0f04 	tst.w	r2, #4
 8010740:	d00b      	beq.n	801075a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	f022 0204 	bic.w	r2, r2, #4
 8010748:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801074a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 801074c:	2308      	movs	r3, #8
 801074e:	4093      	lsls	r3, r2
 8010750:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8010752:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8010754:	f043 0301 	orr.w	r3, r3, #1
 8010758:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801075a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801075c:	2301      	movs	r3, #1
 801075e:	4093      	lsls	r3, r2
 8010760:	421e      	tst	r6, r3
 8010762:	d009      	beq.n	8010778 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8010764:	6822      	ldr	r2, [r4, #0]
 8010766:	6952      	ldr	r2, [r2, #20]
 8010768:	f012 0f80 	tst.w	r2, #128	; 0x80
 801076c:	d004      	beq.n	8010778 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801076e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8010770:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010772:	f043 0302 	orr.w	r3, r3, #2
 8010776:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010778:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801077a:	2304      	movs	r3, #4
 801077c:	4093      	lsls	r3, r2
 801077e:	421e      	tst	r6, r3
 8010780:	d009      	beq.n	8010796 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010782:	6822      	ldr	r2, [r4, #0]
 8010784:	6812      	ldr	r2, [r2, #0]
 8010786:	f012 0f02 	tst.w	r2, #2
 801078a:	d004      	beq.n	8010796 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801078c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801078e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010790:	f043 0304 	orr.w	r3, r3, #4
 8010794:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010796:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010798:	2310      	movs	r3, #16
 801079a:	4093      	lsls	r3, r2
 801079c:	421e      	tst	r6, r3
 801079e:	d024      	beq.n	80107ea <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80107a0:	6822      	ldr	r2, [r4, #0]
 80107a2:	6812      	ldr	r2, [r2, #0]
 80107a4:	f012 0f08 	tst.w	r2, #8
 80107a8:	d01f      	beq.n	80107ea <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80107aa:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80107ac:	6823      	ldr	r3, [r4, #0]
 80107ae:	681a      	ldr	r2, [r3, #0]
 80107b0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80107b4:	d00d      	beq.n	80107d2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80107bc:	d104      	bne.n	80107c8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80107be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107c0:	b19b      	cbz	r3, 80107ea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80107c2:	4620      	mov	r0, r4
 80107c4:	4798      	blx	r3
 80107c6:	e010      	b.n	80107ea <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80107c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80107ca:	b173      	cbz	r3, 80107ea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80107cc:	4620      	mov	r0, r4
 80107ce:	4798      	blx	r3
 80107d0:	e00b      	b.n	80107ea <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80107d8:	d103      	bne.n	80107e2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	f022 0208 	bic.w	r2, r2, #8
 80107e0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80107e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107e4:	b10b      	cbz	r3, 80107ea <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80107e6:	4620      	mov	r0, r4
 80107e8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80107ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80107ec:	2320      	movs	r3, #32
 80107ee:	4093      	lsls	r3, r2
 80107f0:	421e      	tst	r6, r3
 80107f2:	d055      	beq.n	80108a0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80107f4:	6822      	ldr	r2, [r4, #0]
 80107f6:	6812      	ldr	r2, [r2, #0]
 80107f8:	f012 0f10 	tst.w	r2, #16
 80107fc:	d050      	beq.n	80108a0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80107fe:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010800:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8010804:	b2db      	uxtb	r3, r3
 8010806:	2b05      	cmp	r3, #5
 8010808:	d00e      	beq.n	8010828 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8010812:	d033      	beq.n	801087c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 801081a:	d12a      	bne.n	8010872 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 801081c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801081e:	2b00      	cmp	r3, #0
 8010820:	d03e      	beq.n	80108a0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8010822:	4620      	mov	r0, r4
 8010824:	4798      	blx	r3
 8010826:	e03b      	b.n	80108a0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010828:	6822      	ldr	r2, [r4, #0]
 801082a:	6813      	ldr	r3, [r2, #0]
 801082c:	f023 0316 	bic.w	r3, r3, #22
 8010830:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010832:	6822      	ldr	r2, [r4, #0]
 8010834:	6953      	ldr	r3, [r2, #20]
 8010836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801083a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801083c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801083e:	b1a3      	cbz	r3, 801086a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010840:	6822      	ldr	r2, [r4, #0]
 8010842:	6813      	ldr	r3, [r2, #0]
 8010844:	f023 0308 	bic.w	r3, r3, #8
 8010848:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801084a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801084c:	233f      	movs	r3, #63	; 0x3f
 801084e:	4093      	lsls	r3, r2
 8010850:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8010852:	2300      	movs	r3, #0
 8010854:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8010858:	2301      	movs	r3, #1
 801085a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 801085e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010860:	2b00      	cmp	r3, #0
 8010862:	d03f      	beq.n	80108e4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8010864:	4620      	mov	r0, r4
 8010866:	4798      	blx	r3
 8010868:	e03c      	b.n	80108e4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801086a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801086c:	2b00      	cmp	r3, #0
 801086e:	d1e7      	bne.n	8010840 <HAL_DMA_IRQHandler+0x12c>
 8010870:	e7eb      	b.n	801084a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8010872:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010874:	b1a3      	cbz	r3, 80108a0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8010876:	4620      	mov	r0, r4
 8010878:	4798      	blx	r3
 801087a:	e011      	b.n	80108a0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8010882:	d109      	bne.n	8010898 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	f022 0210 	bic.w	r2, r2, #16
 801088a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 801088c:	2300      	movs	r3, #0
 801088e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8010892:	2301      	movs	r3, #1
 8010894:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8010898:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801089a:	b10b      	cbz	r3, 80108a0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 801089c:	4620      	mov	r0, r4
 801089e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80108a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80108a2:	b1fb      	cbz	r3, 80108e4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80108a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80108a6:	f013 0f01 	tst.w	r3, #1
 80108aa:	d017      	beq.n	80108dc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80108ac:	2305      	movs	r3, #5
 80108ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80108b2:	6822      	ldr	r2, [r4, #0]
 80108b4:	6813      	ldr	r3, [r2, #0]
 80108b6:	f023 0301 	bic.w	r3, r3, #1
 80108ba:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80108bc:	9b01      	ldr	r3, [sp, #4]
 80108be:	3301      	adds	r3, #1
 80108c0:	9301      	str	r3, [sp, #4]
 80108c2:	429d      	cmp	r5, r3
 80108c4:	d304      	bcc.n	80108d0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80108c6:	6823      	ldr	r3, [r4, #0]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f013 0f01 	tst.w	r3, #1
 80108ce:	d1f5      	bne.n	80108bc <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80108d0:	2300      	movs	r3, #0
 80108d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80108d6:	2301      	movs	r3, #1
 80108d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80108dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80108de:	b10b      	cbz	r3, 80108e4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80108e0:	4620      	mov	r0, r4
 80108e2:	4798      	blx	r3
}
 80108e4:	b003      	add	sp, #12
 80108e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108e8:	2000003c 	.word	0x2000003c
 80108ec:	1b4e81b5 	.word	0x1b4e81b5

080108f0 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80108f0:	7950      	ldrb	r0, [r2, #5]
 80108f2:	7913      	ldrb	r3, [r2, #4]
 80108f4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80108f8:	4807      	ldr	r0, [pc, #28]	; (8010918 <ETH_MACAddressConfig+0x28>)
 80108fa:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80108fc:	78d0      	ldrb	r0, [r2, #3]
 80108fe:	7893      	ldrb	r3, [r2, #2]
 8010900:	041b      	lsls	r3, r3, #16
 8010902:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8010906:	7850      	ldrb	r0, [r2, #1]
 8010908:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801090c:	7812      	ldrb	r2, [r2, #0]
 801090e:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8010910:	4a02      	ldr	r2, [pc, #8]	; (801091c <ETH_MACAddressConfig+0x2c>)
 8010912:	508b      	str	r3, [r1, r2]
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop
 8010918:	40028040 	.word	0x40028040
 801091c:	40028044 	.word	0x40028044

08010920 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8010920:	6801      	ldr	r1, [r0, #0]
 8010922:	f241 0218 	movw	r2, #4120	; 0x1018
 8010926:	588b      	ldr	r3, [r1, r2]
 8010928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801092c:	508b      	str	r3, [r1, r2]
 801092e:	4770      	bx	lr

08010930 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8010930:	6801      	ldr	r1, [r0, #0]
 8010932:	f241 0218 	movw	r2, #4120	; 0x1018
 8010936:	588b      	ldr	r3, [r1, r2]
 8010938:	f043 0302 	orr.w	r3, r3, #2
 801093c:	508b      	str	r3, [r1, r2]
 801093e:	4770      	bx	lr

08010940 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8010940:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8010942:	4b08      	ldr	r3, [pc, #32]	; (8010964 <ETH_Delay+0x24>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	4a08      	ldr	r2, [pc, #32]	; (8010968 <ETH_Delay+0x28>)
 8010948:	fba2 2303 	umull	r2, r3, r2, r3
 801094c:	0a5b      	lsrs	r3, r3, #9
 801094e:	fb00 f003 	mul.w	r0, r0, r3
 8010952:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8010954:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8010956:	9b01      	ldr	r3, [sp, #4]
 8010958:	1e5a      	subs	r2, r3, #1
 801095a:	9201      	str	r2, [sp, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d1f9      	bne.n	8010954 <ETH_Delay+0x14>
}
 8010960:	b002      	add	sp, #8
 8010962:	4770      	bx	lr
 8010964:	2000003c 	.word	0x2000003c
 8010968:	10624dd3 	.word	0x10624dd3

0801096c <ETH_MACTransmissionEnable>:
{ 
 801096c:	b510      	push	{r4, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8010972:	2300      	movs	r3, #0
 8010974:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8010976:	6802      	ldr	r2, [r0, #0]
 8010978:	6813      	ldr	r3, [r2, #0]
 801097a:	f043 0308 	orr.w	r3, r3, #8
 801097e:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010980:	6803      	ldr	r3, [r0, #0]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010986:	2001      	movs	r0, #1
 8010988:	f7ff ffda 	bl	8010940 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 801098c:	6823      	ldr	r3, [r4, #0]
 801098e:	9a01      	ldr	r2, [sp, #4]
 8010990:	601a      	str	r2, [r3, #0]
}
 8010992:	b002      	add	sp, #8
 8010994:	bd10      	pop	{r4, pc}

08010996 <ETH_MACReceptionEnable>:
{ 
 8010996:	b510      	push	{r4, lr}
 8010998:	b082      	sub	sp, #8
 801099a:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 801099c:	2300      	movs	r3, #0
 801099e:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80109a0:	6802      	ldr	r2, [r0, #0]
 80109a2:	6813      	ldr	r3, [r2, #0]
 80109a4:	f043 0304 	orr.w	r3, r3, #4
 80109a8:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80109aa:	6803      	ldr	r3, [r0, #0]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80109b0:	2001      	movs	r0, #1
 80109b2:	f7ff ffc5 	bl	8010940 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80109b6:	6823      	ldr	r3, [r4, #0]
 80109b8:	9a01      	ldr	r2, [sp, #4]
 80109ba:	601a      	str	r2, [r3, #0]
}
 80109bc:	b002      	add	sp, #8
 80109be:	bd10      	pop	{r4, pc}

080109c0 <ETH_FlushTransmitFIFO>:
{
 80109c0:	b530      	push	{r4, r5, lr}
 80109c2:	b083      	sub	sp, #12
 80109c4:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 80109c6:	2300      	movs	r3, #0
 80109c8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80109ca:	6802      	ldr	r2, [r0, #0]
 80109cc:	f241 0418 	movw	r4, #4120	; 0x1018
 80109d0:	5913      	ldr	r3, [r2, r4]
 80109d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109d6:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80109d8:	6803      	ldr	r3, [r0, #0]
 80109da:	591b      	ldr	r3, [r3, r4]
 80109dc:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80109de:	2001      	movs	r0, #1
 80109e0:	f7ff ffae 	bl	8010940 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80109e4:	682b      	ldr	r3, [r5, #0]
 80109e6:	9a01      	ldr	r2, [sp, #4]
 80109e8:	511a      	str	r2, [r3, r4]
}
 80109ea:	b003      	add	sp, #12
 80109ec:	bd30      	pop	{r4, r5, pc}
	...

080109f0 <ETH_MACDMAConfig>:
{
 80109f0:	b570      	push	{r4, r5, r6, lr}
 80109f2:	b09e      	sub	sp, #120	; 0x78
 80109f4:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80109f6:	b129      	cbz	r1, 8010a04 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80109f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80109fc:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 80109fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010a02:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010a04:	69e3      	ldr	r3, [r4, #28]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d16a      	bne.n	8010ae0 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8010a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a0e:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8010a10:	6821      	ldr	r1, [r4, #0]
 8010a12:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8010a14:	4a39      	ldr	r2, [pc, #228]	; (8010afc <ETH_MACDMAConfig+0x10c>)
 8010a16:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8010a18:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8010a1a:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8010a1c:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8010a1e:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8010a20:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8010a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8010a26:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8010a28:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010a2a:	6823      	ldr	r3, [r4, #0]
 8010a2c:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a2e:	2001      	movs	r0, #1
 8010a30:	f7ff fcda 	bl	80103e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8010a34:	6823      	ldr	r3, [r4, #0]
 8010a36:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8010a38:	6823      	ldr	r3, [r4, #0]
 8010a3a:	2240      	movs	r2, #64	; 0x40
 8010a3c:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8010a3e:	6823      	ldr	r3, [r4, #0]
 8010a40:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a42:	2001      	movs	r0, #1
 8010a44:	f7ff fcd0 	bl	80103e8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8010a48:	6823      	ldr	r3, [r4, #0]
 8010a4a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8010a4c:	6823      	ldr	r3, [r4, #0]
 8010a4e:	2500      	movs	r5, #0
 8010a50:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8010a52:	6823      	ldr	r3, [r4, #0]
 8010a54:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010a56:	6822      	ldr	r2, [r4, #0]
 8010a58:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8010a5a:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8010a5e:	041b      	lsls	r3, r3, #16
 8010a60:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8010a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8010a66:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010a68:	6823      	ldr	r3, [r4, #0]
 8010a6a:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a6c:	2001      	movs	r0, #1
 8010a6e:	f7ff fcbb 	bl	80103e8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8010a72:	6823      	ldr	r3, [r4, #0]
 8010a74:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8010a7a:	6823      	ldr	r3, [r4, #0]
 8010a7c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a7e:	2001      	movs	r0, #1
 8010a80:	f7ff fcb2 	bl	80103e8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8010a84:	6823      	ldr	r3, [r4, #0]
 8010a86:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8010a88:	6822      	ldr	r2, [r4, #0]
 8010a8a:	f241 0518 	movw	r5, #4120	; 0x1018
 8010a8e:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8010a90:	4b1b      	ldr	r3, [pc, #108]	; (8010b00 <ETH_MACDMAConfig+0x110>)
 8010a92:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8010a94:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8010a98:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8010a9c:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8010a9e:	6823      	ldr	r3, [r4, #0]
 8010aa0:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8010aa2:	2001      	movs	r0, #1
 8010aa4:	f7ff fca0 	bl	80103e8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8010aa8:	6823      	ldr	r3, [r4, #0]
 8010aaa:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8010aac:	6823      	ldr	r3, [r4, #0]
 8010aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ab2:	4a14      	ldr	r2, [pc, #80]	; (8010b04 <ETH_MACDMAConfig+0x114>)
 8010ab4:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8010ab6:	6823      	ldr	r3, [r4, #0]
 8010ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010abc:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8010abe:	2001      	movs	r0, #1
 8010ac0:	f7ff fc92 	bl	80103e8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8010ac4:	6823      	ldr	r3, [r4, #0]
 8010ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010aca:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8010acc:	69a3      	ldr	r3, [r4, #24]
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d009      	beq.n	8010ae6 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8010ad2:	6962      	ldr	r2, [r4, #20]
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f7ff ff0a 	bl	80108f0 <ETH_MACAddressConfig>
}
 8010adc:	b01e      	add	sp, #120	; 0x78
 8010ade:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	9307      	str	r3, [sp, #28]
 8010ae4:	e794      	b.n	8010a10 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8010ae6:	6821      	ldr	r1, [r4, #0]
 8010ae8:	f241 021c 	movw	r2, #4124	; 0x101c
 8010aec:	588b      	ldr	r3, [r1, r2]
 8010aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010af6:	508b      	str	r3, [r1, r2]
 8010af8:	e7eb      	b.n	8010ad2 <ETH_MACDMAConfig+0xe2>
 8010afa:	bf00      	nop
 8010afc:	ff20810f 	.word	0xff20810f
 8010b00:	f8de3f23 	.word	0xf8de3f23
 8010b04:	02c12080 	.word	0x02c12080

08010b08 <HAL_ETH_DMATxDescListInit>:
{
 8010b08:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8010b0a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010b0e:	2c01      	cmp	r4, #1
 8010b10:	d031      	beq.n	8010b76 <HAL_ETH_DMATxDescListInit+0x6e>
 8010b12:	2401      	movs	r4, #1
 8010b14:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010b18:	2402      	movs	r4, #2
 8010b1a:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8010b1e:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8010b20:	2400      	movs	r4, #0
 8010b22:	e001      	b.n	8010b28 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8010b24:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 8010b26:	3401      	adds	r4, #1
 8010b28:	429c      	cmp	r4, r3
 8010b2a:	d217      	bcs.n	8010b5c <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8010b2c:	0165      	lsls	r5, r4, #5
 8010b2e:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8010b30:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8010b34:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8010b36:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8010b3a:	fb06 2604 	mla	r6, r6, r4, r2
 8010b3e:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010b40:	69c6      	ldr	r6, [r0, #28]
 8010b42:	b91e      	cbnz	r6, 8010b4c <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8010b44:	594e      	ldr	r6, [r1, r5]
 8010b46:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8010b4a:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 8010b4c:	1e5d      	subs	r5, r3, #1
 8010b4e:	42ac      	cmp	r4, r5
 8010b50:	d2e8      	bcs.n	8010b24 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8010b52:	1c65      	adds	r5, r4, #1
 8010b54:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8010b58:	60fd      	str	r5, [r7, #12]
 8010b5a:	e7e4      	b.n	8010b26 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8010b5c:	6802      	ldr	r2, [r0, #0]
 8010b5e:	f241 0310 	movw	r3, #4112	; 0x1010
 8010b62:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010b64:	2301      	movs	r3, #1
 8010b66:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010b70:	4618      	mov	r0, r3
}
 8010b72:	bcf0      	pop	{r4, r5, r6, r7}
 8010b74:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010b76:	2002      	movs	r0, #2
 8010b78:	e7fb      	b.n	8010b72 <HAL_ETH_DMATxDescListInit+0x6a>

08010b7a <HAL_ETH_DMARxDescListInit>:
{
 8010b7a:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8010b7c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010b80:	2c01      	cmp	r4, #1
 8010b82:	d02e      	beq.n	8010be2 <HAL_ETH_DMARxDescListInit+0x68>
 8010b84:	2401      	movs	r4, #1
 8010b86:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010b8a:	2402      	movs	r4, #2
 8010b8c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8010b90:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8010b92:	2400      	movs	r4, #0
 8010b94:	e001      	b.n	8010b9a <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8010b96:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 8010b98:	3401      	adds	r4, #1
 8010b9a:	429c      	cmp	r4, r3
 8010b9c:	d214      	bcs.n	8010bc8 <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 8010b9e:	0166      	lsls	r6, r4, #5
 8010ba0:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8010ba2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8010ba6:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8010ba8:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8010bac:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8010bae:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8010bb2:	fb06 2604 	mla	r6, r6, r4, r2
 8010bb6:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8010bb8:	1e5e      	subs	r6, r3, #1
 8010bba:	42b4      	cmp	r4, r6
 8010bbc:	d2eb      	bcs.n	8010b96 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8010bbe:	1c66      	adds	r6, r4, #1
 8010bc0:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8010bc4:	60ee      	str	r6, [r5, #12]
 8010bc6:	e7e7      	b.n	8010b98 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8010bc8:	6802      	ldr	r2, [r0, #0]
 8010bca:	f241 030c 	movw	r3, #4108	; 0x100c
 8010bce:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010bdc:	4618      	mov	r0, r3
}
 8010bde:	bcf0      	pop	{r4, r5, r6, r7}
 8010be0:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010be2:	2002      	movs	r0, #2
 8010be4:	e7fb      	b.n	8010bde <HAL_ETH_DMARxDescListInit+0x64>
	...

08010be8 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8010be8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	f000 8087 	beq.w	8010d00 <HAL_ETH_TransmitFrame+0x118>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010bf8:	2302      	movs	r3, #2
 8010bfa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8010bfe:	b199      	cbz	r1, 8010c28 <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8010c00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	2a00      	cmp	r2, #0
 8010c06:	db17      	blt.n	8010c38 <HAL_ETH_TransmitFrame+0x50>
{
 8010c08:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8010c0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010c0e:	4291      	cmp	r1, r2
 8010c10:	d91a      	bls.n	8010c48 <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8010c12:	4c3c      	ldr	r4, [pc, #240]	; (8010d04 <HAL_ETH_TransmitFrame+0x11c>)
 8010c14:	fba4 2401 	umull	r2, r4, r4, r1
 8010c18:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8010c1a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010c1e:	fb02 1214 	mls	r2, r2, r4, r1
 8010c22:	b192      	cbz	r2, 8010c4a <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8010c24:	3401      	adds	r4, #1
 8010c26:	e010      	b.n	8010c4a <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010c2e:	2200      	movs	r2, #0
 8010c30:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8010c34:	4618      	mov	r0, r3
 8010c36:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8010c38:	2312      	movs	r3, #18
 8010c3a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 8010c44:	2001      	movs	r0, #1
 8010c46:	4770      	bx	lr
    bufcount = 1U;
 8010c48:	2401      	movs	r4, #1
  if (bufcount == 1U)
 8010c4a:	2c01      	cmp	r4, #1
 8010c4c:	d001      	beq.n	8010c52 <HAL_ETH_TransmitFrame+0x6a>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	e037      	b.n	8010cc2 <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8010c58:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8010c5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010c5c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8010c60:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8010c62:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010c64:	6813      	ldr	r3, [r2, #0]
 8010c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010c6a:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8010c6c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8010c72:	6803      	ldr	r3, [r0, #0]
 8010c74:	f241 0214 	movw	r2, #4116	; 0x1014
 8010c78:	589a      	ldr	r2, [r3, r2]
 8010c7a:	f012 0f04 	tst.w	r2, #4
 8010c7e:	d008      	beq.n	8010c92 <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8010c80:	2104      	movs	r1, #4
 8010c82:	f241 0214 	movw	r2, #4116	; 0x1014
 8010c86:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8010c88:	6802      	ldr	r2, [r0, #0]
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	f241 0304 	movw	r3, #4100	; 0x1004
 8010c90:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8010c92:	2301      	movs	r3, #1
 8010c94:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010c98:	2300      	movs	r3, #0
 8010c9a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010c9e:	4618      	mov	r0, r3
}
 8010ca0:	bc30      	pop	{r4, r5}
 8010ca2:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8010ca4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010ca6:	682a      	ldr	r2, [r5, #0]
 8010ca8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010cac:	602a      	str	r2, [r5, #0]
 8010cae:	e011      	b.n	8010cd4 <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8010cb0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010cb2:	682a      	ldr	r2, [r5, #0]
 8010cb4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8010cb8:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8010cba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010cbc:	68d2      	ldr	r2, [r2, #12]
 8010cbe:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	429c      	cmp	r4, r3
 8010cc4:	d9d5      	bls.n	8010c72 <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8010cc6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010cc8:	682a      	ldr	r2, [r5, #0]
 8010cca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010cce:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d0e7      	beq.n	8010ca4 <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8010cd4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010cd6:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8010cda:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8010cdc:	1e62      	subs	r2, r4, #1
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d1e6      	bne.n	8010cb0 <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8010ce2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010ce4:	682a      	ldr	r2, [r5, #0]
 8010ce6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8010cea:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8010cec:	4a06      	ldr	r2, [pc, #24]	; (8010d08 <HAL_ETH_TransmitFrame+0x120>)
 8010cee:	fb02 1204 	mla	r2, r2, r4, r1
 8010cf2:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8010cf6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010cf8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010cfc:	606a      	str	r2, [r5, #4]
 8010cfe:	e7d7      	b.n	8010cb0 <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8010d00:	2002      	movs	r0, #2
 8010d02:	4770      	bx	lr
 8010d04:	ac02b00b 	.word	0xac02b00b
 8010d08:	fffffa0c 	.word	0xfffffa0c

08010d0c <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8010d0c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8010d10:	2b01      	cmp	r3, #1
 8010d12:	d045      	beq.n	8010da0 <HAL_ETH_GetReceivedFrame_IT+0x94>
 8010d14:	2301      	movs	r3, #1
 8010d16:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010d1a:	2302      	movs	r3, #2
 8010d1c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0U;
 8010d20:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8010d22:	e00a      	b.n	8010d3a <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8010d24:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8010d26:	2201      	movs	r2, #1
 8010d28:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	6283      	str	r3, [r0, #40]	; 0x28
 8010d2e:	e004      	b.n	8010d3a <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8010d30:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8010d32:	3201      	adds	r2, #1
 8010d34:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8010d3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	2a00      	cmp	r2, #0
 8010d40:	db26      	blt.n	8010d90 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8010d42:	2903      	cmp	r1, #3
 8010d44:	d824      	bhi.n	8010d90 <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8010d46:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8010d4e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8010d52:	d0e7      	beq.n	8010d24 <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	f412 7f40 	tst.w	r2, #768	; 0x300
 8010d5a:	d0e9      	beq.n	8010d30 <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8010d5c:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8010d5e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8010d60:	3201      	adds	r2, #1
 8010d62:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8010d64:	2a01      	cmp	r2, #1
 8010d66:	d011      	beq.n	8010d8c <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8010d6e:	3a04      	subs	r2, #4
 8010d70:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8010d72:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8010d74:	6892      	ldr	r2, [r2, #8]
 8010d76:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8010d78:	68db      	ldr	r3, [r3, #12]
 8010d7a:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010d82:	2300      	movs	r3, #0
 8010d84:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8010d88:	4618      	mov	r0, r3
 8010d8a:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8010d8c:	6303      	str	r3, [r0, #48]	; 0x30
 8010d8e:	e7eb      	b.n	8010d68 <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8010d90:	2301      	movs	r3, #1
 8010d92:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010d96:	2200      	movs	r2, #0
 8010d98:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010da0:	2002      	movs	r0, #2
}
 8010da2:	4770      	bx	lr

08010da4 <HAL_ETH_TxCpltCallback>:
{
 8010da4:	4770      	bx	lr

08010da6 <HAL_ETH_ErrorCallback>:
{
 8010da6:	4770      	bx	lr

08010da8 <HAL_ETH_IRQHandler>:
{
 8010da8:	b510      	push	{r4, lr}
 8010daa:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8010dac:	6803      	ldr	r3, [r0, #0]
 8010dae:	f241 0214 	movw	r2, #4116	; 0x1014
 8010db2:	589a      	ldr	r2, [r3, r2]
 8010db4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8010db8:	d111      	bne.n	8010dde <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8010dba:	f241 0214 	movw	r2, #4116	; 0x1014
 8010dbe:	589b      	ldr	r3, [r3, r2]
 8010dc0:	f013 0f01 	tst.w	r3, #1
 8010dc4:	d119      	bne.n	8010dfa <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8010dc6:	6822      	ldr	r2, [r4, #0]
 8010dc8:	f241 0314 	movw	r3, #4116	; 0x1014
 8010dcc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8010dd0:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8010dd2:	6822      	ldr	r2, [r4, #0]
 8010dd4:	58d3      	ldr	r3, [r2, r3]
 8010dd6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8010dda:	d11b      	bne.n	8010e14 <HAL_ETH_IRQHandler+0x6c>
 8010ddc:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8010dde:	f00c fa35 	bl	801d24c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8010de2:	6822      	ldr	r2, [r4, #0]
 8010de4:	2140      	movs	r1, #64	; 0x40
 8010de6:	f241 0314 	movw	r3, #4116	; 0x1014
 8010dea:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8010dec:	2301      	movs	r3, #1
 8010dee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010df2:	2300      	movs	r3, #0
 8010df4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010df8:	e7e5      	b.n	8010dc6 <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8010dfa:	f7ff ffd3 	bl	8010da4 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8010dfe:	6821      	ldr	r1, [r4, #0]
 8010e00:	2301      	movs	r3, #1
 8010e02:	f241 0214 	movw	r2, #4116	; 0x1014
 8010e06:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8010e08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e12:	e7d8      	b.n	8010dc6 <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8010e14:	4620      	mov	r0, r4
 8010e16:	f7ff ffc6 	bl	8010da6 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8010e1a:	6822      	ldr	r2, [r4, #0]
 8010e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010e20:	f241 0314 	movw	r3, #4116	; 0x1014
 8010e24:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8010e26:	2301      	movs	r3, #1
 8010e28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010e32:	e7d3      	b.n	8010ddc <HAL_ETH_IRQHandler+0x34>

08010e34 <HAL_ETH_ReadPHYRegister>:
{
 8010e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8010e36:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	2b82      	cmp	r3, #130	; 0x82
 8010e3e:	d101      	bne.n	8010e44 <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8010e40:	2002      	movs	r0, #2
}
 8010e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e44:	4616      	mov	r6, r2
 8010e46:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8010e48:	2382      	movs	r3, #130	; 0x82
 8010e4a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8010e4e:	6802      	ldr	r2, [r0, #0]
 8010e50:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8010e52:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8010e56:	8a03      	ldrh	r3, [r0, #16]
 8010e58:	02db      	lsls	r3, r3, #11
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8010e5e:	0189      	lsls	r1, r1, #6
 8010e60:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8010e64:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8010e66:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8010e6a:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8010e6c:	f7ff fab6 	bl	80103dc <HAL_GetTick>
 8010e70:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8010e72:	f014 0f01 	tst.w	r4, #1
 8010e76:	d010      	beq.n	8010e9a <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8010e78:	f7ff fab0 	bl	80103dc <HAL_GetTick>
 8010e7c:	1bc0      	subs	r0, r0, r7
 8010e7e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010e82:	d202      	bcs.n	8010e8a <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8010e84:	682b      	ldr	r3, [r5, #0]
 8010e86:	691c      	ldr	r4, [r3, #16]
 8010e88:	e7f3      	b.n	8010e72 <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010e90:	2300      	movs	r3, #0
 8010e92:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8010e96:	2003      	movs	r0, #3
 8010e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8010e9a:	682b      	ldr	r3, [r5, #0]
 8010e9c:	695b      	ldr	r3, [r3, #20]
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010eac <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8010eac:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	2b42      	cmp	r3, #66	; 0x42
 8010eb4:	d101      	bne.n	8010eba <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8010eb6:	2002      	movs	r0, #2
 8010eb8:	4770      	bx	lr
{
 8010eba:	b570      	push	{r4, r5, r6, lr}
 8010ebc:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8010ebe:	2342      	movs	r3, #66	; 0x42
 8010ec0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8010ec4:	6800      	ldr	r0, [r0, #0]
 8010ec6:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8010ec8:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8010ecc:	8a2b      	ldrh	r3, [r5, #16]
 8010ece:	02db      	lsls	r3, r3, #11
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8010ed4:	0189      	lsls	r1, r1, #6
 8010ed6:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8010eda:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8010edc:	f044 0403 	orr.w	r4, r4, #3
 8010ee0:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8010ee2:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8010ee4:	682b      	ldr	r3, [r5, #0]
 8010ee6:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8010ee8:	f7ff fa78 	bl	80103dc <HAL_GetTick>
 8010eec:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8010eee:	f014 0f01 	tst.w	r4, #1
 8010ef2:	d010      	beq.n	8010f16 <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8010ef4:	f7ff fa72 	bl	80103dc <HAL_GetTick>
 8010ef8:	1b80      	subs	r0, r0, r6
 8010efa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010efe:	d202      	bcs.n	8010f06 <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8010f00:	682b      	ldr	r3, [r5, #0]
 8010f02:	691c      	ldr	r4, [r3, #16]
 8010f04:	e7f3      	b.n	8010eee <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8010f06:	2301      	movs	r3, #1
 8010f08:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8010f12:	2003      	movs	r0, #3
 8010f14:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8010f16:	2301      	movs	r3, #1
 8010f18:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	bd70      	pop	{r4, r5, r6, pc}

08010f20 <HAL_ETH_Init>:
{
 8010f20:	b570      	push	{r4, r5, r6, lr}
 8010f22:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8010f24:	2300      	movs	r3, #0
 8010f26:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	f000 810e 	beq.w	801114a <HAL_ETH_Init+0x22a>
 8010f2e:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8010f30:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d034      	beq.n	8010fa2 <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f38:	2300      	movs	r3, #0
 8010f3a:	9300      	str	r3, [sp, #0]
 8010f3c:	4b84      	ldr	r3, [pc, #528]	; (8011150 <HAL_ETH_Init+0x230>)
 8010f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010f44:	645a      	str	r2, [r3, #68]	; 0x44
 8010f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8010f50:	4b80      	ldr	r3, [pc, #512]	; (8011154 <HAL_ETH_Init+0x234>)
 8010f52:	685a      	ldr	r2, [r3, #4]
 8010f54:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010f58:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8010f5a:	685a      	ldr	r2, [r3, #4]
 8010f5c:	6a21      	ldr	r1, [r4, #32]
 8010f5e:	430a      	orrs	r2, r1
 8010f60:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8010f62:	6823      	ldr	r3, [r4, #0]
 8010f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	f042 0201 	orr.w	r2, r2, #1
 8010f6e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010f70:	f7ff fa34 	bl	80103dc <HAL_GetTick>
 8010f74:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8010f7c:	6812      	ldr	r2, [r2, #0]
 8010f7e:	f012 0f01 	tst.w	r2, #1
 8010f82:	d013      	beq.n	8010fac <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8010f84:	f7ff fa2a 	bl	80103dc <HAL_GetTick>
 8010f88:	1b40      	subs	r0, r0, r5
 8010f8a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8010f8e:	d9f2      	bls.n	8010f76 <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8010f90:	2503      	movs	r5, #3
 8010f92:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010f96:	2300      	movs	r3, #0
 8010f98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	b002      	add	sp, #8
 8010fa0:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8010fa2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8010fa6:	f00c f8f5 	bl	801d194 <HAL_ETH_MspInit>
 8010faa:	e7c5      	b.n	8010f38 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8010fac:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8010fae:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8010fb2:	f000 feb9 	bl	8011d28 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8010fb6:	4b68      	ldr	r3, [pc, #416]	; (8011158 <HAL_ETH_Init+0x238>)
 8010fb8:	4403      	add	r3, r0
 8010fba:	4a68      	ldr	r2, [pc, #416]	; (801115c <HAL_ETH_Init+0x23c>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d855      	bhi.n	801106c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8010fc0:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8010fc4:	6823      	ldr	r3, [r4, #0]
 8010fc6:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8010fc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010fcc:	2100      	movs	r1, #0
 8010fce:	4620      	mov	r0, r4
 8010fd0:	f7ff ff6c 	bl	8010eac <HAL_ETH_WritePHYRegister>
 8010fd4:	4605      	mov	r5, r0
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d160      	bne.n	801109c <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8010fda:	20ff      	movs	r0, #255	; 0xff
 8010fdc:	f7ff fa04 	bl	80103e8 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010fe0:	6863      	ldr	r3, [r4, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f000 8091 	beq.w	801110a <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8010fe8:	f7ff f9f8 	bl	80103dc <HAL_GetTick>
 8010fec:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8010fee:	aa01      	add	r2, sp, #4
 8010ff0:	2101      	movs	r1, #1
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f7ff ff1e 	bl	8010e34 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8010ff8:	f7ff f9f0 	bl	80103dc <HAL_GetTick>
 8010ffc:	1b80      	subs	r0, r0, r6
 8010ffe:	f241 3388 	movw	r3, #5000	; 0x1388
 8011002:	4298      	cmp	r0, r3
 8011004:	d852      	bhi.n	80110ac <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8011006:	9b01      	ldr	r3, [sp, #4]
 8011008:	f013 0f04 	tst.w	r3, #4
 801100c:	d0ef      	beq.n	8010fee <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 801100e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011012:	2100      	movs	r1, #0
 8011014:	4620      	mov	r0, r4
 8011016:	f7ff ff49 	bl	8010eac <HAL_ETH_WritePHYRegister>
 801101a:	2800      	cmp	r0, #0
 801101c:	d152      	bne.n	80110c4 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 801101e:	f7ff f9dd 	bl	80103dc <HAL_GetTick>
 8011022:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8011024:	aa01      	add	r2, sp, #4
 8011026:	2101      	movs	r1, #1
 8011028:	4620      	mov	r0, r4
 801102a:	f7ff ff03 	bl	8010e34 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 801102e:	f7ff f9d5 	bl	80103dc <HAL_GetTick>
 8011032:	1b80      	subs	r0, r0, r6
 8011034:	f241 3388 	movw	r3, #5000	; 0x1388
 8011038:	4298      	cmp	r0, r3
 801103a:	d84b      	bhi.n	80110d4 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801103c:	9b01      	ldr	r3, [sp, #4]
 801103e:	f013 0f20 	tst.w	r3, #32
 8011042:	d0ef      	beq.n	8011024 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8011044:	aa01      	add	r2, sp, #4
 8011046:	2110      	movs	r1, #16
 8011048:	4620      	mov	r0, r4
 801104a:	f7ff fef3 	bl	8010e34 <HAL_ETH_ReadPHYRegister>
 801104e:	2800      	cmp	r0, #0
 8011050:	d14c      	bne.n	80110ec <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011052:	9b01      	ldr	r3, [sp, #4]
 8011054:	f013 0f04 	tst.w	r3, #4
 8011058:	d050      	beq.n	80110fc <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 801105a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801105e:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8011060:	f013 0f02 	tst.w	r3, #2
 8011064:	d04d      	beq.n	8011102 <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8011066:	2300      	movs	r3, #0
 8011068:	60a3      	str	r3, [r4, #8]
 801106a:	e05e      	b.n	801112a <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 801106c:	4b3c      	ldr	r3, [pc, #240]	; (8011160 <HAL_ETH_Init+0x240>)
 801106e:	4403      	add	r3, r0
 8011070:	4a3c      	ldr	r2, [pc, #240]	; (8011164 <HAL_ETH_Init+0x244>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d802      	bhi.n	801107c <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8011076:	f045 050c 	orr.w	r5, r5, #12
 801107a:	e7a3      	b.n	8010fc4 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 801107c:	4b3a      	ldr	r3, [pc, #232]	; (8011168 <HAL_ETH_Init+0x248>)
 801107e:	4403      	add	r3, r0
 8011080:	4a3a      	ldr	r2, [pc, #232]	; (801116c <HAL_ETH_Init+0x24c>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d99e      	bls.n	8010fc4 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8011086:	4b3a      	ldr	r3, [pc, #232]	; (8011170 <HAL_ETH_Init+0x250>)
 8011088:	4403      	add	r3, r0
 801108a:	4a3a      	ldr	r2, [pc, #232]	; (8011174 <HAL_ETH_Init+0x254>)
 801108c:	4293      	cmp	r3, r2
 801108e:	d802      	bhi.n	8011096 <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8011090:	f045 0504 	orr.w	r5, r5, #4
 8011094:	e796      	b.n	8010fc4 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8011096:	f045 0510 	orr.w	r5, r5, #16
 801109a:	e793      	b.n	8010fc4 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 801109c:	2101      	movs	r1, #1
 801109e:	4620      	mov	r0, r4
 80110a0:	f7ff fca6 	bl	80109f0 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80110a4:	2501      	movs	r5, #1
 80110a6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 80110aa:	e777      	b.n	8010f9c <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 80110ac:	2101      	movs	r1, #1
 80110ae:	4620      	mov	r0, r4
 80110b0:	f7ff fc9e 	bl	80109f0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80110b4:	2301      	movs	r3, #1
 80110b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80110ba:	2300      	movs	r3, #0
 80110bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80110c0:	2503      	movs	r5, #3
 80110c2:	e76b      	b.n	8010f9c <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 80110c4:	2101      	movs	r1, #1
 80110c6:	4620      	mov	r0, r4
 80110c8:	f7ff fc92 	bl	80109f0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80110cc:	2501      	movs	r5, #1
 80110ce:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80110d2:	e763      	b.n	8010f9c <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 80110d4:	2101      	movs	r1, #1
 80110d6:	4620      	mov	r0, r4
 80110d8:	f7ff fc8a 	bl	80109f0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80110dc:	2301      	movs	r3, #1
 80110de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80110e2:	2300      	movs	r3, #0
 80110e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80110e8:	2503      	movs	r5, #3
 80110ea:	e757      	b.n	8010f9c <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 80110ec:	2101      	movs	r1, #1
 80110ee:	4620      	mov	r0, r4
 80110f0:	f7ff fc7e 	bl	80109f0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80110f4:	2501      	movs	r5, #1
 80110f6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80110fa:	e74f      	b.n	8010f9c <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80110fc:	2200      	movs	r2, #0
 80110fe:	60e2      	str	r2, [r4, #12]
 8011100:	e7ae      	b.n	8011060 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8011102:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011106:	60a3      	str	r3, [r4, #8]
 8011108:	e00f      	b.n	801112a <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 801110a:	68e3      	ldr	r3, [r4, #12]
 801110c:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8011110:	68a3      	ldr	r3, [r4, #8]
 8011112:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8011116:	431a      	orrs	r2, r3
 8011118:	2100      	movs	r1, #0
 801111a:	4620      	mov	r0, r4
 801111c:	f7ff fec6 	bl	8010eac <HAL_ETH_WritePHYRegister>
 8011120:	b958      	cbnz	r0, 801113a <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8011122:	f640 70ff 	movw	r0, #4095	; 0xfff
 8011126:	f7ff f95f 	bl	80103e8 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 801112a:	2100      	movs	r1, #0
 801112c:	4620      	mov	r0, r4
 801112e:	f7ff fc5f 	bl	80109f0 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8011132:	2301      	movs	r3, #1
 8011134:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8011138:	e730      	b.n	8010f9c <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 801113a:	2101      	movs	r1, #1
 801113c:	4620      	mov	r0, r4
 801113e:	f7ff fc57 	bl	80109f0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8011142:	2501      	movs	r5, #1
 8011144:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8011148:	e728      	b.n	8010f9c <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 801114a:	2501      	movs	r5, #1
 801114c:	e726      	b.n	8010f9c <HAL_ETH_Init+0x7c>
 801114e:	bf00      	nop
 8011150:	40023800 	.word	0x40023800
 8011154:	40013800 	.word	0x40013800
 8011158:	feced300 	.word	0xfeced300
 801115c:	00e4e1bf 	.word	0x00e4e1bf
 8011160:	fde9f140 	.word	0xfde9f140
 8011164:	017d783f 	.word	0x017d783f
 8011168:	fc6c7900 	.word	0xfc6c7900
 801116c:	026259ff 	.word	0x026259ff
 8011170:	fa0a1f00 	.word	0xfa0a1f00
 8011174:	02faf07f 	.word	0x02faf07f

08011178 <HAL_ETH_Start>:
{  
 8011178:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 801117a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 801117e:	2b01      	cmp	r3, #1
 8011180:	d101      	bne.n	8011186 <HAL_ETH_Start+0xe>
 8011182:	2002      	movs	r0, #2
}
 8011184:	bd38      	pop	{r3, r4, r5, pc}
 8011186:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8011188:	2501      	movs	r5, #1
 801118a:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 801118e:	2302      	movs	r3, #2
 8011190:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8011194:	f7ff fbea 	bl	801096c <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8011198:	4620      	mov	r0, r4
 801119a:	f7ff fbfc 	bl	8010996 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 801119e:	4620      	mov	r0, r4
 80111a0:	f7ff fc0e 	bl	80109c0 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 80111a4:	4620      	mov	r0, r4
 80111a6:	f7ff fbbb 	bl	8010920 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 80111aa:	4620      	mov	r0, r4
 80111ac:	f7ff fbc0 	bl	8010930 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 80111b0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80111b4:	2000      	movs	r0, #0
 80111b6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 80111ba:	bd38      	pop	{r3, r4, r5, pc}

080111bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80111bc:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80111be:	4909      	ldr	r1, [pc, #36]	; (80111e4 <FLASH_Program_DoubleWord+0x28>)
 80111c0:	690c      	ldr	r4, [r1, #16]
 80111c2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80111c6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80111c8:	690c      	ldr	r4, [r1, #16]
 80111ca:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80111ce:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80111d0:	690c      	ldr	r4, [r1, #16]
 80111d2:	f044 0401 	orr.w	r4, r4, #1
 80111d6:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80111d8:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80111da:	6043      	str	r3, [r0, #4]
}
 80111dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	40023c00 	.word	0x40023c00

080111e8 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80111e8:	4b07      	ldr	r3, [pc, #28]	; (8011208 <FLASH_Program_Word+0x20>)
 80111ea:	691a      	ldr	r2, [r3, #16]
 80111ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80111f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80111f2:	691a      	ldr	r2, [r3, #16]
 80111f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80111f8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80111fa:	691a      	ldr	r2, [r3, #16]
 80111fc:	f042 0201 	orr.w	r2, r2, #1
 8011200:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8011202:	6001      	str	r1, [r0, #0]
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	40023c00 	.word	0x40023c00

0801120c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801120c:	4b07      	ldr	r3, [pc, #28]	; (801122c <FLASH_Program_HalfWord+0x20>)
 801120e:	691a      	ldr	r2, [r3, #16]
 8011210:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011214:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8011216:	691a      	ldr	r2, [r3, #16]
 8011218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801121c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 801121e:	691a      	ldr	r2, [r3, #16]
 8011220:	f042 0201 	orr.w	r2, r2, #1
 8011224:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8011226:	8001      	strh	r1, [r0, #0]
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	40023c00 	.word	0x40023c00

08011230 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011230:	4b06      	ldr	r3, [pc, #24]	; (801124c <FLASH_Program_Byte+0x1c>)
 8011232:	691a      	ldr	r2, [r3, #16]
 8011234:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011238:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 801123a:	691a      	ldr	r2, [r3, #16]
 801123c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 801123e:	691a      	ldr	r2, [r3, #16]
 8011240:	f042 0201 	orr.w	r2, r2, #1
 8011244:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8011246:	7001      	strb	r1, [r0, #0]
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop
 801124c:	40023c00 	.word	0x40023c00

08011250 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8011250:	4b20      	ldr	r3, [pc, #128]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 8011252:	68db      	ldr	r3, [r3, #12]
 8011254:	f013 0f10 	tst.w	r3, #16
 8011258:	d007      	beq.n	801126a <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801125a:	4a1f      	ldr	r2, [pc, #124]	; (80112d8 <FLASH_SetErrorCode+0x88>)
 801125c:	69d3      	ldr	r3, [r2, #28]
 801125e:	f043 0310 	orr.w	r3, r3, #16
 8011262:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8011264:	2210      	movs	r2, #16
 8011266:	4b1b      	ldr	r3, [pc, #108]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 8011268:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801126a:	4b1a      	ldr	r3, [pc, #104]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	f013 0f20 	tst.w	r3, #32
 8011272:	d007      	beq.n	8011284 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8011274:	4a18      	ldr	r2, [pc, #96]	; (80112d8 <FLASH_SetErrorCode+0x88>)
 8011276:	69d3      	ldr	r3, [r2, #28]
 8011278:	f043 0308 	orr.w	r3, r3, #8
 801127c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801127e:	2220      	movs	r2, #32
 8011280:	4b14      	ldr	r3, [pc, #80]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 8011282:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8011284:	4b13      	ldr	r3, [pc, #76]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	f013 0f40 	tst.w	r3, #64	; 0x40
 801128c:	d007      	beq.n	801129e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801128e:	4a12      	ldr	r2, [pc, #72]	; (80112d8 <FLASH_SetErrorCode+0x88>)
 8011290:	69d3      	ldr	r3, [r2, #28]
 8011292:	f043 0304 	orr.w	r3, r3, #4
 8011296:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8011298:	2240      	movs	r2, #64	; 0x40
 801129a:	4b0e      	ldr	r3, [pc, #56]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 801129c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801129e:	4b0d      	ldr	r3, [pc, #52]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80112a6:	d007      	beq.n	80112b8 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80112a8:	4a0b      	ldr	r2, [pc, #44]	; (80112d8 <FLASH_SetErrorCode+0x88>)
 80112aa:	69d3      	ldr	r3, [r2, #28]
 80112ac:	f043 0302 	orr.w	r3, r3, #2
 80112b0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80112b2:	2280      	movs	r2, #128	; 0x80
 80112b4:	4b07      	ldr	r3, [pc, #28]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 80112b6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80112b8:	4b06      	ldr	r3, [pc, #24]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	f013 0f02 	tst.w	r3, #2
 80112c0:	d007      	beq.n	80112d2 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80112c2:	4a05      	ldr	r2, [pc, #20]	; (80112d8 <FLASH_SetErrorCode+0x88>)
 80112c4:	69d3      	ldr	r3, [r2, #28]
 80112c6:	f043 0320 	orr.w	r3, r3, #32
 80112ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80112cc:	2202      	movs	r2, #2
 80112ce:	4b01      	ldr	r3, [pc, #4]	; (80112d4 <FLASH_SetErrorCode+0x84>)
 80112d0:	60da      	str	r2, [r3, #12]
 80112d2:	4770      	bx	lr
 80112d4:	40023c00 	.word	0x40023c00
 80112d8:	2000a1a8 	.word	0x2000a1a8

080112dc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80112dc:	4b09      	ldr	r3, [pc, #36]	; (8011304 <HAL_FLASH_Unlock+0x28>)
 80112de:	691b      	ldr	r3, [r3, #16]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	db01      	blt.n	80112e8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80112e4:	2000      	movs	r0, #0
 80112e6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80112e8:	4b06      	ldr	r3, [pc, #24]	; (8011304 <HAL_FLASH_Unlock+0x28>)
 80112ea:	4a07      	ldr	r2, [pc, #28]	; (8011308 <HAL_FLASH_Unlock+0x2c>)
 80112ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80112ee:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80112f2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80112f4:	691b      	ldr	r3, [r3, #16]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	db01      	blt.n	80112fe <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80112fa:	2000      	movs	r0, #0
 80112fc:	4770      	bx	lr
      status = HAL_ERROR;
 80112fe:	2001      	movs	r0, #1
}
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop
 8011304:	40023c00 	.word	0x40023c00
 8011308:	45670123 	.word	0x45670123

0801130c <FLASH_WaitForLastOperation>:
{ 
 801130c:	b538      	push	{r3, r4, r5, lr}
 801130e:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011310:	2200      	movs	r2, #0
 8011312:	4b15      	ldr	r3, [pc, #84]	; (8011368 <FLASH_WaitForLastOperation+0x5c>)
 8011314:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8011316:	f7ff f861 	bl	80103dc <HAL_GetTick>
 801131a:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801131c:	4b13      	ldr	r3, [pc, #76]	; (801136c <FLASH_WaitForLastOperation+0x60>)
 801131e:	68db      	ldr	r3, [r3, #12]
 8011320:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8011324:	d00a      	beq.n	801133c <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8011326:	f1b4 3fff 	cmp.w	r4, #4294967295
 801132a:	d0f7      	beq.n	801131c <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801132c:	b1cc      	cbz	r4, 8011362 <FLASH_WaitForLastOperation+0x56>
 801132e:	f7ff f855 	bl	80103dc <HAL_GetTick>
 8011332:	1b40      	subs	r0, r0, r5
 8011334:	4284      	cmp	r4, r0
 8011336:	d2f1      	bcs.n	801131c <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8011338:	2003      	movs	r0, #3
 801133a:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 801133c:	4b0b      	ldr	r3, [pc, #44]	; (801136c <FLASH_WaitForLastOperation+0x60>)
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	f013 0f01 	tst.w	r3, #1
 8011344:	d002      	beq.n	801134c <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011346:	2201      	movs	r2, #1
 8011348:	4b08      	ldr	r3, [pc, #32]	; (801136c <FLASH_WaitForLastOperation+0x60>)
 801134a:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801134c:	4b07      	ldr	r3, [pc, #28]	; (801136c <FLASH_WaitForLastOperation+0x60>)
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8011354:	d101      	bne.n	801135a <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8011356:	2000      	movs	r0, #0
}  
 8011358:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 801135a:	f7ff ff79 	bl	8011250 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801135e:	2001      	movs	r0, #1
 8011360:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8011362:	2003      	movs	r0, #3
 8011364:	bd38      	pop	{r3, r4, r5, pc}
 8011366:	bf00      	nop
 8011368:	2000a1a8 	.word	0x2000a1a8
 801136c:	40023c00 	.word	0x40023c00

08011370 <HAL_FLASH_Program>:
{
 8011370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8011374:	4c1d      	ldr	r4, [pc, #116]	; (80113ec <HAL_FLASH_Program+0x7c>)
 8011376:	7e24      	ldrb	r4, [r4, #24]
 8011378:	2c01      	cmp	r4, #1
 801137a:	d103      	bne.n	8011384 <HAL_FLASH_Program+0x14>
 801137c:	2402      	movs	r4, #2
}
 801137e:	4620      	mov	r0, r4
 8011380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011384:	4698      	mov	r8, r3
 8011386:	4617      	mov	r7, r2
 8011388:	460e      	mov	r6, r1
 801138a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 801138c:	2201      	movs	r2, #1
 801138e:	4b17      	ldr	r3, [pc, #92]	; (80113ec <HAL_FLASH_Program+0x7c>)
 8011390:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011392:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011396:	f7ff ffb9 	bl	801130c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801139a:	4604      	mov	r4, r0
 801139c:	b998      	cbnz	r0, 80113c6 <HAL_FLASH_Program+0x56>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801139e:	b1b5      	cbz	r5, 80113ce <HAL_FLASH_Program+0x5e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80113a0:	2d01      	cmp	r5, #1
 80113a2:	d019      	beq.n	80113d8 <HAL_FLASH_Program+0x68>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80113a4:	2d02      	cmp	r5, #2
 80113a6:	d01c      	beq.n	80113e2 <HAL_FLASH_Program+0x72>
      FLASH_Program_DoubleWord(Address, Data);
 80113a8:	463a      	mov	r2, r7
 80113aa:	4643      	mov	r3, r8
 80113ac:	4630      	mov	r0, r6
 80113ae:	f7ff ff05 	bl	80111bc <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80113b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80113b6:	f7ff ffa9 	bl	801130c <FLASH_WaitForLastOperation>
 80113ba:	4604      	mov	r4, r0
    FLASH->CR &= (~FLASH_CR_PG);  
 80113bc:	4a0c      	ldr	r2, [pc, #48]	; (80113f0 <HAL_FLASH_Program+0x80>)
 80113be:	6913      	ldr	r3, [r2, #16]
 80113c0:	f023 0301 	bic.w	r3, r3, #1
 80113c4:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80113c6:	2200      	movs	r2, #0
 80113c8:	4b08      	ldr	r3, [pc, #32]	; (80113ec <HAL_FLASH_Program+0x7c>)
 80113ca:	761a      	strb	r2, [r3, #24]
  return status;
 80113cc:	e7d7      	b.n	801137e <HAL_FLASH_Program+0xe>
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80113ce:	b2f9      	uxtb	r1, r7
 80113d0:	4630      	mov	r0, r6
 80113d2:	f7ff ff2d 	bl	8011230 <FLASH_Program_Byte>
 80113d6:	e7ec      	b.n	80113b2 <HAL_FLASH_Program+0x42>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80113d8:	b2b9      	uxth	r1, r7
 80113da:	4630      	mov	r0, r6
 80113dc:	f7ff ff16 	bl	801120c <FLASH_Program_HalfWord>
 80113e0:	e7e7      	b.n	80113b2 <HAL_FLASH_Program+0x42>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80113e2:	4639      	mov	r1, r7
 80113e4:	4630      	mov	r0, r6
 80113e6:	f7ff feff 	bl	80111e8 <FLASH_Program_Word>
 80113ea:	e7e2      	b.n	80113b2 <HAL_FLASH_Program+0x42>
 80113ec:	2000a1a8 	.word	0x2000a1a8
 80113f0:	40023c00 	.word	0x40023c00

080113f4 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80113f4:	4b07      	ldr	r3, [pc, #28]	; (8011414 <FLASH_MassErase+0x20>)
 80113f6:	691a      	ldr	r2, [r3, #16]
 80113f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80113fc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80113fe:	691a      	ldr	r2, [r3, #16]
 8011400:	f042 0204 	orr.w	r2, r2, #4
 8011404:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8011406:	691a      	ldr	r2, [r3, #16]
 8011408:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 801140c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8011410:	6118      	str	r0, [r3, #16]
 8011412:	4770      	bx	lr
 8011414:	40023c00 	.word	0x40023c00

08011418 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011418:	b1f9      	cbz	r1, 801145a <FLASH_Erase_Sector+0x42>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 801141a:	2901      	cmp	r1, #1
 801141c:	d01f      	beq.n	801145e <FLASH_Erase_Sector+0x46>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801141e:	2902      	cmp	r1, #2
 8011420:	d018      	beq.n	8011454 <FLASH_Erase_Sector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011422:	f44f 7140 	mov.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011426:	4b0f      	ldr	r3, [pc, #60]	; (8011464 <FLASH_Erase_Sector+0x4c>)
 8011428:	691a      	ldr	r2, [r3, #16]
 801142a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801142e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8011430:	691a      	ldr	r2, [r3, #16]
 8011432:	430a      	orrs	r2, r1
 8011434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8011436:	691a      	ldr	r2, [r3, #16]
 8011438:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 801143c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801143e:	691a      	ldr	r2, [r3, #16]
 8011440:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8011444:	f040 0002 	orr.w	r0, r0, #2
 8011448:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801144a:	691a      	ldr	r2, [r3, #16]
 801144c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011450:	611a      	str	r2, [r3, #16]
 8011452:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_WORD;
 8011454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011458:	e7e5      	b.n	8011426 <FLASH_Erase_Sector+0xe>
     tmp_psize = FLASH_PSIZE_BYTE;
 801145a:	2100      	movs	r1, #0
 801145c:	e7e3      	b.n	8011426 <FLASH_Erase_Sector+0xe>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801145e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011462:	e7e0      	b.n	8011426 <FLASH_Erase_Sector+0xe>
 8011464:	40023c00 	.word	0x40023c00

08011468 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8011468:	4b16      	ldr	r3, [pc, #88]	; (80114c4 <FLASH_FlushCaches+0x5c>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8011470:	d010      	beq.n	8011494 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8011472:	4b14      	ldr	r3, [pc, #80]	; (80114c4 <FLASH_FlushCaches+0x5c>)
 8011474:	681a      	ldr	r2, [r3, #0]
 8011476:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801147a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011482:	601a      	str	r2, [r3, #0]
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801148a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011492:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8011494:	4b0b      	ldr	r3, [pc, #44]	; (80114c4 <FLASH_FlushCaches+0x5c>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f413 6f80 	tst.w	r3, #1024	; 0x400
 801149c:	d010      	beq.n	80114c0 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801149e:	4b09      	ldr	r3, [pc, #36]	; (80114c4 <FLASH_FlushCaches+0x5c>)
 80114a0:	681a      	ldr	r2, [r3, #0]
 80114a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114a6:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80114ae:	601a      	str	r2, [r3, #0]
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80114b6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80114be:	601a      	str	r2, [r3, #0]
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	40023c00 	.word	0x40023c00

080114c8 <HAL_FLASHEx_Erase>:
{
 80114c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80114ca:	4b22      	ldr	r3, [pc, #136]	; (8011554 <HAL_FLASHEx_Erase+0x8c>)
 80114cc:	7e1b      	ldrb	r3, [r3, #24]
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d102      	bne.n	80114d8 <HAL_FLASHEx_Erase+0x10>
 80114d2:	2702      	movs	r7, #2
}
 80114d4:	4638      	mov	r0, r7
 80114d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114d8:	460e      	mov	r6, r1
 80114da:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80114dc:	2201      	movs	r2, #1
 80114de:	4b1d      	ldr	r3, [pc, #116]	; (8011554 <HAL_FLASHEx_Erase+0x8c>)
 80114e0:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80114e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80114e6:	f7ff ff11 	bl	801130c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80114ea:	4607      	mov	r7, r0
 80114ec:	bb70      	cbnz	r0, 801154c <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 80114ee:	f04f 33ff 	mov.w	r3, #4294967295
 80114f2:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80114f4:	6823      	ldr	r3, [r4, #0]
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d016      	beq.n	8011528 <HAL_FLASHEx_Erase+0x60>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80114fa:	68a5      	ldr	r5, [r4, #8]
 80114fc:	68e3      	ldr	r3, [r4, #12]
 80114fe:	68a2      	ldr	r2, [r4, #8]
 8011500:	4413      	add	r3, r2
 8011502:	429d      	cmp	r5, r3
 8011504:	d220      	bcs.n	8011548 <HAL_FLASHEx_Erase+0x80>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8011506:	7c21      	ldrb	r1, [r4, #16]
 8011508:	4628      	mov	r0, r5
 801150a:	f7ff ff85 	bl	8011418 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801150e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011512:	f7ff fefb 	bl	801130c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8011516:	4a10      	ldr	r2, [pc, #64]	; (8011558 <HAL_FLASHEx_Erase+0x90>)
 8011518:	6913      	ldr	r3, [r2, #16]
 801151a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801151e:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8011520:	4607      	mov	r7, r0
 8011522:	b980      	cbnz	r0, 8011546 <HAL_FLASHEx_Erase+0x7e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011524:	3501      	adds	r5, #1
 8011526:	e7e9      	b.n	80114fc <HAL_FLASHEx_Erase+0x34>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8011528:	6861      	ldr	r1, [r4, #4]
 801152a:	7c20      	ldrb	r0, [r4, #16]
 801152c:	f7ff ff62 	bl	80113f4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011530:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011534:	f7ff feea 	bl	801130c <FLASH_WaitForLastOperation>
 8011538:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 801153a:	4a07      	ldr	r2, [pc, #28]	; (8011558 <HAL_FLASHEx_Erase+0x90>)
 801153c:	6913      	ldr	r3, [r2, #16]
 801153e:	f023 0304 	bic.w	r3, r3, #4
 8011542:	6113      	str	r3, [r2, #16]
 8011544:	e000      	b.n	8011548 <HAL_FLASHEx_Erase+0x80>
          *SectorError = index;
 8011546:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 8011548:	f7ff ff8e 	bl	8011468 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 801154c:	2200      	movs	r2, #0
 801154e:	4b01      	ldr	r3, [pc, #4]	; (8011554 <HAL_FLASHEx_Erase+0x8c>)
 8011550:	761a      	strb	r2, [r3, #24]
  return status;
 8011552:	e7bf      	b.n	80114d4 <HAL_FLASHEx_Erase+0xc>
 8011554:	2000a1a8 	.word	0x2000a1a8
 8011558:	40023c00 	.word	0x40023c00

0801155c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801155e:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011560:	2400      	movs	r4, #0
 8011562:	e04b      	b.n	80115fc <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011564:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8011568:	f10e 0e08 	add.w	lr, lr, #8
 801156c:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011570:	f004 0607 	and.w	r6, r4, #7
 8011574:	00b6      	lsls	r6, r6, #2
 8011576:	270f      	movs	r7, #15
 8011578:	40b7      	lsls	r7, r6
 801157a:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801157e:	690f      	ldr	r7, [r1, #16]
 8011580:	fa07 f606 	lsl.w	r6, r7, r6
 8011584:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8011586:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 801158a:	e046      	b.n	801161a <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801158c:	2607      	movs	r6, #7
 801158e:	e000      	b.n	8011592 <HAL_GPIO_Init+0x36>
 8011590:	2600      	movs	r6, #0
 8011592:	fa06 f60e 	lsl.w	r6, r6, lr
 8011596:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011598:	3302      	adds	r3, #2
 801159a:	4e5e      	ldr	r6, [pc, #376]	; (8011714 <HAL_GPIO_Init+0x1b8>)
 801159c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80115a0:	4b5d      	ldr	r3, [pc, #372]	; (8011718 <HAL_GPIO_Init+0x1bc>)
 80115a2:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 80115a4:	43eb      	mvns	r3, r5
 80115a6:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80115aa:	684f      	ldr	r7, [r1, #4]
 80115ac:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80115b0:	d001      	beq.n	80115b6 <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 80115b2:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 80115b6:	4a58      	ldr	r2, [pc, #352]	; (8011718 <HAL_GPIO_Init+0x1bc>)
 80115b8:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80115ba:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80115bc:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80115c0:	684f      	ldr	r7, [r1, #4]
 80115c2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80115c6:	d001      	beq.n	80115cc <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80115c8:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 80115cc:	4a52      	ldr	r2, [pc, #328]	; (8011718 <HAL_GPIO_Init+0x1bc>)
 80115ce:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80115d0:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80115d2:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80115d6:	684f      	ldr	r7, [r1, #4]
 80115d8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80115dc:	d001      	beq.n	80115e2 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80115de:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 80115e2:	4a4d      	ldr	r2, [pc, #308]	; (8011718 <HAL_GPIO_Init+0x1bc>)
 80115e4:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80115e6:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80115e8:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80115ea:	684e      	ldr	r6, [r1, #4]
 80115ec:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80115f0:	d001      	beq.n	80115f6 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 80115f2:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 80115f6:	4a48      	ldr	r2, [pc, #288]	; (8011718 <HAL_GPIO_Init+0x1bc>)
 80115f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80115fa:	3401      	adds	r4, #1
 80115fc:	2c0f      	cmp	r4, #15
 80115fe:	f200 8086 	bhi.w	801170e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8011602:	2301      	movs	r3, #1
 8011604:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011606:	680a      	ldr	r2, [r1, #0]
 8011608:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 801160c:	42ab      	cmp	r3, r5
 801160e:	d1f4      	bne.n	80115fa <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011610:	684a      	ldr	r2, [r1, #4]
 8011612:	2a02      	cmp	r2, #2
 8011614:	d0a6      	beq.n	8011564 <HAL_GPIO_Init+0x8>
 8011616:	2a12      	cmp	r2, #18
 8011618:	d0a4      	beq.n	8011564 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 801161a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801161c:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8011620:	2203      	movs	r2, #3
 8011622:	fa02 f20e 	lsl.w	r2, r2, lr
 8011626:	43d2      	mvns	r2, r2
 8011628:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801162a:	684f      	ldr	r7, [r1, #4]
 801162c:	f007 0703 	and.w	r7, r7, #3
 8011630:	fa07 f70e 	lsl.w	r7, r7, lr
 8011634:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8011636:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011638:	684e      	ldr	r6, [r1, #4]
 801163a:	1e77      	subs	r7, r6, #1
 801163c:	2f01      	cmp	r7, #1
 801163e:	d903      	bls.n	8011648 <HAL_GPIO_Init+0xec>
 8011640:	2e11      	cmp	r6, #17
 8011642:	d001      	beq.n	8011648 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011644:	2e12      	cmp	r6, #18
 8011646:	d10f      	bne.n	8011668 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8011648:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801164a:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 801164c:	68cf      	ldr	r7, [r1, #12]
 801164e:	fa07 f70e 	lsl.w	r7, r7, lr
 8011652:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8011654:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8011656:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011658:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801165c:	684e      	ldr	r6, [r1, #4]
 801165e:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8011662:	40a6      	lsls	r6, r4
 8011664:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8011666:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8011668:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801166a:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801166c:	688b      	ldr	r3, [r1, #8]
 801166e:	fa03 f30e 	lsl.w	r3, r3, lr
 8011672:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8011674:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011676:	684b      	ldr	r3, [r1, #4]
 8011678:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 801167c:	d0bd      	beq.n	80115fa <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801167e:	2300      	movs	r3, #0
 8011680:	9301      	str	r3, [sp, #4]
 8011682:	4b26      	ldr	r3, [pc, #152]	; (801171c <HAL_GPIO_Init+0x1c0>)
 8011684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801168a:	645a      	str	r2, [r3, #68]	; 0x44
 801168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011692:	9301      	str	r3, [sp, #4]
 8011694:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8011696:	08a3      	lsrs	r3, r4, #2
 8011698:	1c9e      	adds	r6, r3, #2
 801169a:	4a1e      	ldr	r2, [pc, #120]	; (8011714 <HAL_GPIO_Init+0x1b8>)
 801169c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80116a0:	f004 0603 	and.w	r6, r4, #3
 80116a4:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80116a8:	260f      	movs	r6, #15
 80116aa:	fa06 f60e 	lsl.w	r6, r6, lr
 80116ae:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80116b2:	4f1b      	ldr	r7, [pc, #108]	; (8011720 <HAL_GPIO_Init+0x1c4>)
 80116b4:	42b8      	cmp	r0, r7
 80116b6:	f43f af6b 	beq.w	8011590 <HAL_GPIO_Init+0x34>
 80116ba:	4e1a      	ldr	r6, [pc, #104]	; (8011724 <HAL_GPIO_Init+0x1c8>)
 80116bc:	42b0      	cmp	r0, r6
 80116be:	d01a      	beq.n	80116f6 <HAL_GPIO_Init+0x19a>
 80116c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116c4:	42b0      	cmp	r0, r6
 80116c6:	d018      	beq.n	80116fa <HAL_GPIO_Init+0x19e>
 80116c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116cc:	42b0      	cmp	r0, r6
 80116ce:	d016      	beq.n	80116fe <HAL_GPIO_Init+0x1a2>
 80116d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116d4:	42b0      	cmp	r0, r6
 80116d6:	d014      	beq.n	8011702 <HAL_GPIO_Init+0x1a6>
 80116d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116dc:	42b0      	cmp	r0, r6
 80116de:	d012      	beq.n	8011706 <HAL_GPIO_Init+0x1aa>
 80116e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116e4:	42b0      	cmp	r0, r6
 80116e6:	d010      	beq.n	801170a <HAL_GPIO_Init+0x1ae>
 80116e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80116ec:	42b0      	cmp	r0, r6
 80116ee:	f43f af4d 	beq.w	801158c <HAL_GPIO_Init+0x30>
 80116f2:	2608      	movs	r6, #8
 80116f4:	e74d      	b.n	8011592 <HAL_GPIO_Init+0x36>
 80116f6:	2601      	movs	r6, #1
 80116f8:	e74b      	b.n	8011592 <HAL_GPIO_Init+0x36>
 80116fa:	2602      	movs	r6, #2
 80116fc:	e749      	b.n	8011592 <HAL_GPIO_Init+0x36>
 80116fe:	2603      	movs	r6, #3
 8011700:	e747      	b.n	8011592 <HAL_GPIO_Init+0x36>
 8011702:	2604      	movs	r6, #4
 8011704:	e745      	b.n	8011592 <HAL_GPIO_Init+0x36>
 8011706:	2605      	movs	r6, #5
 8011708:	e743      	b.n	8011592 <HAL_GPIO_Init+0x36>
 801170a:	2606      	movs	r6, #6
 801170c:	e741      	b.n	8011592 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 801170e:	b003      	add	sp, #12
 8011710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011712:	bf00      	nop
 8011714:	40013800 	.word	0x40013800
 8011718:	40013c00 	.word	0x40013c00
 801171c:	40023800 	.word	0x40023800
 8011720:	40020000 	.word	0x40020000
 8011724:	40020400 	.word	0x40020400

08011728 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011728:	b912      	cbnz	r2, 8011730 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801172a:	0409      	lsls	r1, r1, #16
 801172c:	6181      	str	r1, [r0, #24]
 801172e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8011730:	6181      	str	r1, [r0, #24]
 8011732:	4770      	bx	lr

08011734 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011734:	6943      	ldr	r3, [r0, #20]
 8011736:	4059      	eors	r1, r3
 8011738:	6141      	str	r1, [r0, #20]
 801173a:	4770      	bx	lr

0801173c <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 801173c:	b308      	cbz	r0, 8011782 <HAL_IWDG_Init+0x46>
{
 801173e:	b538      	push	{r3, r4, r5, lr}
 8011740:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8011742:	6803      	ldr	r3, [r0, #0]
 8011744:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8011748:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801174a:	6803      	ldr	r3, [r0, #0]
 801174c:	f245 5255 	movw	r2, #21845	; 0x5555
 8011750:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8011752:	6803      	ldr	r3, [r0, #0]
 8011754:	6842      	ldr	r2, [r0, #4]
 8011756:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8011758:	6803      	ldr	r3, [r0, #0]
 801175a:	6882      	ldr	r2, [r0, #8]
 801175c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801175e:	f7fe fe3d 	bl	80103dc <HAL_GetTick>
 8011762:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8011764:	6823      	ldr	r3, [r4, #0]
 8011766:	68da      	ldr	r2, [r3, #12]
 8011768:	b132      	cbz	r2, 8011778 <HAL_IWDG_Init+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 801176a:	f7fe fe37 	bl	80103dc <HAL_GetTick>
 801176e:	1b40      	subs	r0, r0, r5
 8011770:	2830      	cmp	r0, #48	; 0x30
 8011772:	d9f7      	bls.n	8011764 <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 8011774:	2003      	movs	r0, #3
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);

  /* Return function status */
  return HAL_OK;
}
 8011776:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8011778:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801177c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 801177e:	2000      	movs	r0, #0
 8011780:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8011782:	2001      	movs	r0, #1
 8011784:	4770      	bx	lr

08011786 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8011786:	6803      	ldr	r3, [r0, #0]
 8011788:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801178c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 801178e:	2000      	movs	r0, #0
 8011790:	4770      	bx	lr
	...

08011794 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011794:	2800      	cmp	r0, #0
 8011796:	f000 81bb 	beq.w	8011b10 <HAL_RCC_OscConfig+0x37c>
{
 801179a:	b570      	push	{r4, r5, r6, lr}
 801179c:	b082      	sub	sp, #8
 801179e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80117a0:	6803      	ldr	r3, [r0, #0]
 80117a2:	f013 0f01 	tst.w	r3, #1
 80117a6:	d03b      	beq.n	8011820 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80117a8:	4ba7      	ldr	r3, [pc, #668]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 80117aa:	689b      	ldr	r3, [r3, #8]
 80117ac:	f003 030c 	and.w	r3, r3, #12
 80117b0:	2b04      	cmp	r3, #4
 80117b2:	d02c      	beq.n	801180e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80117b4:	4ba4      	ldr	r3, [pc, #656]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 80117b6:	689b      	ldr	r3, [r3, #8]
 80117b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80117bc:	2b08      	cmp	r3, #8
 80117be:	d021      	beq.n	8011804 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80117c0:	6863      	ldr	r3, [r4, #4]
 80117c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117c6:	d04f      	beq.n	8011868 <HAL_RCC_OscConfig+0xd4>
 80117c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80117cc:	d052      	beq.n	8011874 <HAL_RCC_OscConfig+0xe0>
 80117ce:	4b9e      	ldr	r3, [pc, #632]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 80117d0:	681a      	ldr	r2, [r3, #0]
 80117d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80117d6:	601a      	str	r2, [r3, #0]
 80117d8:	681a      	ldr	r2, [r3, #0]
 80117da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80117de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80117e0:	6863      	ldr	r3, [r4, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d050      	beq.n	8011888 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80117e6:	f7fe fdf9 	bl	80103dc <HAL_GetTick>
 80117ea:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80117ec:	4b96      	ldr	r3, [pc, #600]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80117f4:	d114      	bne.n	8011820 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80117f6:	f7fe fdf1 	bl	80103dc <HAL_GetTick>
 80117fa:	1b40      	subs	r0, r0, r5
 80117fc:	2864      	cmp	r0, #100	; 0x64
 80117fe:	d9f5      	bls.n	80117ec <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8011800:	2003      	movs	r0, #3
 8011802:	e18a      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011804:	4b90      	ldr	r3, [pc, #576]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 801180c:	d0d8      	beq.n	80117c0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801180e:	4b8e      	ldr	r3, [pc, #568]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8011816:	d003      	beq.n	8011820 <HAL_RCC_OscConfig+0x8c>
 8011818:	6863      	ldr	r3, [r4, #4]
 801181a:	2b00      	cmp	r3, #0
 801181c:	f000 817a 	beq.w	8011b14 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011820:	6823      	ldr	r3, [r4, #0]
 8011822:	f013 0f02 	tst.w	r3, #2
 8011826:	d055      	beq.n	80118d4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011828:	4b87      	ldr	r3, [pc, #540]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 801182a:	689b      	ldr	r3, [r3, #8]
 801182c:	f013 0f0c 	tst.w	r3, #12
 8011830:	d03e      	beq.n	80118b0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011832:	4b85      	ldr	r3, [pc, #532]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011834:	689b      	ldr	r3, [r3, #8]
 8011836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801183a:	2b08      	cmp	r3, #8
 801183c:	d033      	beq.n	80118a6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801183e:	68e3      	ldr	r3, [r4, #12]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d068      	beq.n	8011916 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011844:	2201      	movs	r2, #1
 8011846:	4b81      	ldr	r3, [pc, #516]	; (8011a4c <HAL_RCC_OscConfig+0x2b8>)
 8011848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801184a:	f7fe fdc7 	bl	80103dc <HAL_GetTick>
 801184e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011850:	4b7d      	ldr	r3, [pc, #500]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	f013 0f02 	tst.w	r3, #2
 8011858:	d154      	bne.n	8011904 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801185a:	f7fe fdbf 	bl	80103dc <HAL_GetTick>
 801185e:	1b40      	subs	r0, r0, r5
 8011860:	2802      	cmp	r0, #2
 8011862:	d9f5      	bls.n	8011850 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8011864:	2003      	movs	r0, #3
 8011866:	e158      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011868:	4a77      	ldr	r2, [pc, #476]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 801186a:	6813      	ldr	r3, [r2, #0]
 801186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011870:	6013      	str	r3, [r2, #0]
 8011872:	e7b5      	b.n	80117e0 <HAL_RCC_OscConfig+0x4c>
 8011874:	4b74      	ldr	r3, [pc, #464]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011876:	681a      	ldr	r2, [r3, #0]
 8011878:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801187c:	601a      	str	r2, [r3, #0]
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011884:	601a      	str	r2, [r3, #0]
 8011886:	e7ab      	b.n	80117e0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8011888:	f7fe fda8 	bl	80103dc <HAL_GetTick>
 801188c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801188e:	4b6e      	ldr	r3, [pc, #440]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8011896:	d0c3      	beq.n	8011820 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011898:	f7fe fda0 	bl	80103dc <HAL_GetTick>
 801189c:	1b40      	subs	r0, r0, r5
 801189e:	2864      	cmp	r0, #100	; 0x64
 80118a0:	d9f5      	bls.n	801188e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80118a2:	2003      	movs	r0, #3
 80118a4:	e139      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80118a6:	4b68      	ldr	r3, [pc, #416]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80118ae:	d1c6      	bne.n	801183e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80118b0:	4b65      	ldr	r3, [pc, #404]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f013 0f02 	tst.w	r3, #2
 80118b8:	d004      	beq.n	80118c4 <HAL_RCC_OscConfig+0x130>
 80118ba:	68e3      	ldr	r3, [r4, #12]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d001      	beq.n	80118c4 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80118c0:	2001      	movs	r0, #1
 80118c2:	e12a      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80118c4:	4a60      	ldr	r2, [pc, #384]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 80118c6:	6813      	ldr	r3, [r2, #0]
 80118c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80118cc:	6921      	ldr	r1, [r4, #16]
 80118ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80118d2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80118d4:	6823      	ldr	r3, [r4, #0]
 80118d6:	f013 0f08 	tst.w	r3, #8
 80118da:	d040      	beq.n	801195e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80118dc:	6963      	ldr	r3, [r4, #20]
 80118de:	b363      	cbz	r3, 801193a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80118e0:	2201      	movs	r2, #1
 80118e2:	4b5b      	ldr	r3, [pc, #364]	; (8011a50 <HAL_RCC_OscConfig+0x2bc>)
 80118e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80118e6:	f7fe fd79 	bl	80103dc <HAL_GetTick>
 80118ea:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80118ec:	4b56      	ldr	r3, [pc, #344]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 80118ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118f0:	f013 0f02 	tst.w	r3, #2
 80118f4:	d133      	bne.n	801195e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80118f6:	f7fe fd71 	bl	80103dc <HAL_GetTick>
 80118fa:	1b40      	subs	r0, r0, r5
 80118fc:	2802      	cmp	r0, #2
 80118fe:	d9f5      	bls.n	80118ec <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8011900:	2003      	movs	r0, #3
 8011902:	e10a      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011904:	4a50      	ldr	r2, [pc, #320]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011906:	6813      	ldr	r3, [r2, #0]
 8011908:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801190c:	6921      	ldr	r1, [r4, #16]
 801190e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011912:	6013      	str	r3, [r2, #0]
 8011914:	e7de      	b.n	80118d4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8011916:	2200      	movs	r2, #0
 8011918:	4b4c      	ldr	r3, [pc, #304]	; (8011a4c <HAL_RCC_OscConfig+0x2b8>)
 801191a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801191c:	f7fe fd5e 	bl	80103dc <HAL_GetTick>
 8011920:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011922:	4b49      	ldr	r3, [pc, #292]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	f013 0f02 	tst.w	r3, #2
 801192a:	d0d3      	beq.n	80118d4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801192c:	f7fe fd56 	bl	80103dc <HAL_GetTick>
 8011930:	1b40      	subs	r0, r0, r5
 8011932:	2802      	cmp	r0, #2
 8011934:	d9f5      	bls.n	8011922 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8011936:	2003      	movs	r0, #3
 8011938:	e0ef      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801193a:	2200      	movs	r2, #0
 801193c:	4b44      	ldr	r3, [pc, #272]	; (8011a50 <HAL_RCC_OscConfig+0x2bc>)
 801193e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011940:	f7fe fd4c 	bl	80103dc <HAL_GetTick>
 8011944:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011946:	4b40      	ldr	r3, [pc, #256]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801194a:	f013 0f02 	tst.w	r3, #2
 801194e:	d006      	beq.n	801195e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011950:	f7fe fd44 	bl	80103dc <HAL_GetTick>
 8011954:	1b40      	subs	r0, r0, r5
 8011956:	2802      	cmp	r0, #2
 8011958:	d9f5      	bls.n	8011946 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 801195a:	2003      	movs	r0, #3
 801195c:	e0dd      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801195e:	6823      	ldr	r3, [r4, #0]
 8011960:	f013 0f04 	tst.w	r3, #4
 8011964:	d079      	beq.n	8011a5a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011966:	4b38      	ldr	r3, [pc, #224]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801196a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 801196e:	d133      	bne.n	80119d8 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011970:	2300      	movs	r3, #0
 8011972:	9301      	str	r3, [sp, #4]
 8011974:	4b34      	ldr	r3, [pc, #208]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011978:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801197c:	641a      	str	r2, [r3, #64]	; 0x40
 801197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011984:	9301      	str	r3, [sp, #4]
 8011986:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8011988:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801198a:	4b32      	ldr	r3, [pc, #200]	; (8011a54 <HAL_RCC_OscConfig+0x2c0>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011992:	d023      	beq.n	80119dc <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011994:	68a3      	ldr	r3, [r4, #8]
 8011996:	2b01      	cmp	r3, #1
 8011998:	d034      	beq.n	8011a04 <HAL_RCC_OscConfig+0x270>
 801199a:	2b05      	cmp	r3, #5
 801199c:	d038      	beq.n	8011a10 <HAL_RCC_OscConfig+0x27c>
 801199e:	4b2a      	ldr	r3, [pc, #168]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 80119a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80119a2:	f022 0201 	bic.w	r2, r2, #1
 80119a6:	671a      	str	r2, [r3, #112]	; 0x70
 80119a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80119aa:	f022 0204 	bic.w	r2, r2, #4
 80119ae:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80119b0:	68a3      	ldr	r3, [r4, #8]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d036      	beq.n	8011a24 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80119b6:	f7fe fd11 	bl	80103dc <HAL_GetTick>
 80119ba:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80119bc:	4b22      	ldr	r3, [pc, #136]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 80119be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119c0:	f013 0f02 	tst.w	r3, #2
 80119c4:	d148      	bne.n	8011a58 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80119c6:	f7fe fd09 	bl	80103dc <HAL_GetTick>
 80119ca:	1b80      	subs	r0, r0, r6
 80119cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80119d0:	4298      	cmp	r0, r3
 80119d2:	d9f3      	bls.n	80119bc <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80119d4:	2003      	movs	r0, #3
 80119d6:	e0a0      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 80119d8:	2500      	movs	r5, #0
 80119da:	e7d6      	b.n	801198a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80119dc:	4a1d      	ldr	r2, [pc, #116]	; (8011a54 <HAL_RCC_OscConfig+0x2c0>)
 80119de:	6813      	ldr	r3, [r2, #0]
 80119e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80119e6:	f7fe fcf9 	bl	80103dc <HAL_GetTick>
 80119ea:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80119ec:	4b19      	ldr	r3, [pc, #100]	; (8011a54 <HAL_RCC_OscConfig+0x2c0>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80119f4:	d1ce      	bne.n	8011994 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80119f6:	f7fe fcf1 	bl	80103dc <HAL_GetTick>
 80119fa:	1b80      	subs	r0, r0, r6
 80119fc:	2802      	cmp	r0, #2
 80119fe:	d9f5      	bls.n	80119ec <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8011a00:	2003      	movs	r0, #3
 8011a02:	e08a      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011a04:	4a10      	ldr	r2, [pc, #64]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011a06:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8011a08:	f043 0301 	orr.w	r3, r3, #1
 8011a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8011a0e:	e7cf      	b.n	80119b0 <HAL_RCC_OscConfig+0x21c>
 8011a10:	4b0d      	ldr	r3, [pc, #52]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011a12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011a14:	f042 0204 	orr.w	r2, r2, #4
 8011a18:	671a      	str	r2, [r3, #112]	; 0x70
 8011a1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011a1c:	f042 0201 	orr.w	r2, r2, #1
 8011a20:	671a      	str	r2, [r3, #112]	; 0x70
 8011a22:	e7c5      	b.n	80119b0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011a24:	f7fe fcda 	bl	80103dc <HAL_GetTick>
 8011a28:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011a2a:	4b07      	ldr	r3, [pc, #28]	; (8011a48 <HAL_RCC_OscConfig+0x2b4>)
 8011a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a2e:	f013 0f02 	tst.w	r3, #2
 8011a32:	d011      	beq.n	8011a58 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011a34:	f7fe fcd2 	bl	80103dc <HAL_GetTick>
 8011a38:	1b80      	subs	r0, r0, r6
 8011a3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8011a3e:	4298      	cmp	r0, r3
 8011a40:	d9f3      	bls.n	8011a2a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8011a42:	2003      	movs	r0, #3
 8011a44:	e069      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
 8011a46:	bf00      	nop
 8011a48:	40023800 	.word	0x40023800
 8011a4c:	42470000 	.word	0x42470000
 8011a50:	42470e80 	.word	0x42470e80
 8011a54:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011a58:	b9e5      	cbnz	r5, 8011a94 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011a5a:	69a3      	ldr	r3, [r4, #24]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d05b      	beq.n	8011b18 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011a60:	4a30      	ldr	r2, [pc, #192]	; (8011b24 <HAL_RCC_OscConfig+0x390>)
 8011a62:	6892      	ldr	r2, [r2, #8]
 8011a64:	f002 020c 	and.w	r2, r2, #12
 8011a68:	2a08      	cmp	r2, #8
 8011a6a:	d058      	beq.n	8011b1e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011a6c:	2b02      	cmp	r3, #2
 8011a6e:	d017      	beq.n	8011aa0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011a70:	2200      	movs	r2, #0
 8011a72:	4b2d      	ldr	r3, [pc, #180]	; (8011b28 <HAL_RCC_OscConfig+0x394>)
 8011a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011a76:	f7fe fcb1 	bl	80103dc <HAL_GetTick>
 8011a7a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011a7c:	4b29      	ldr	r3, [pc, #164]	; (8011b24 <HAL_RCC_OscConfig+0x390>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011a84:	d042      	beq.n	8011b0c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011a86:	f7fe fca9 	bl	80103dc <HAL_GetTick>
 8011a8a:	1b00      	subs	r0, r0, r4
 8011a8c:	2802      	cmp	r0, #2
 8011a8e:	d9f5      	bls.n	8011a7c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8011a90:	2003      	movs	r0, #3
 8011a92:	e042      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011a94:	4a23      	ldr	r2, [pc, #140]	; (8011b24 <HAL_RCC_OscConfig+0x390>)
 8011a96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8011a9e:	e7dc      	b.n	8011a5a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	4b21      	ldr	r3, [pc, #132]	; (8011b28 <HAL_RCC_OscConfig+0x394>)
 8011aa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011aa6:	f7fe fc99 	bl	80103dc <HAL_GetTick>
 8011aaa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011aac:	4b1d      	ldr	r3, [pc, #116]	; (8011b24 <HAL_RCC_OscConfig+0x390>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011ab4:	d006      	beq.n	8011ac4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011ab6:	f7fe fc91 	bl	80103dc <HAL_GetTick>
 8011aba:	1b40      	subs	r0, r0, r5
 8011abc:	2802      	cmp	r0, #2
 8011abe:	d9f5      	bls.n	8011aac <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8011ac0:	2003      	movs	r0, #3
 8011ac2:	e02a      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011ac4:	69e3      	ldr	r3, [r4, #28]
 8011ac6:	6a22      	ldr	r2, [r4, #32]
 8011ac8:	4313      	orrs	r3, r2
 8011aca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011acc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011ad0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011ad2:	0852      	lsrs	r2, r2, #1
 8011ad4:	3a01      	subs	r2, #1
 8011ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ada:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011adc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011ae0:	4a10      	ldr	r2, [pc, #64]	; (8011b24 <HAL_RCC_OscConfig+0x390>)
 8011ae2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	4b10      	ldr	r3, [pc, #64]	; (8011b28 <HAL_RCC_OscConfig+0x394>)
 8011ae8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011aea:	f7fe fc77 	bl	80103dc <HAL_GetTick>
 8011aee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011af0:	4b0c      	ldr	r3, [pc, #48]	; (8011b24 <HAL_RCC_OscConfig+0x390>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011af8:	d106      	bne.n	8011b08 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011afa:	f7fe fc6f 	bl	80103dc <HAL_GetTick>
 8011afe:	1b00      	subs	r0, r0, r4
 8011b00:	2802      	cmp	r0, #2
 8011b02:	d9f5      	bls.n	8011af0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8011b04:	2003      	movs	r0, #3
 8011b06:	e008      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8011b08:	2000      	movs	r0, #0
 8011b0a:	e006      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
 8011b0c:	2000      	movs	r0, #0
 8011b0e:	e004      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8011b10:	2001      	movs	r0, #1
 8011b12:	4770      	bx	lr
        return HAL_ERROR;
 8011b14:	2001      	movs	r0, #1
 8011b16:	e000      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8011b18:	2000      	movs	r0, #0
}
 8011b1a:	b002      	add	sp, #8
 8011b1c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8011b1e:	2001      	movs	r0, #1
 8011b20:	e7fb      	b.n	8011b1a <HAL_RCC_OscConfig+0x386>
 8011b22:	bf00      	nop
 8011b24:	40023800 	.word	0x40023800
 8011b28:	42470060 	.word	0x42470060

08011b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011b2e:	4b25      	ldr	r3, [pc, #148]	; (8011bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011b30:	689b      	ldr	r3, [r3, #8]
 8011b32:	f003 030c 	and.w	r3, r3, #12
 8011b36:	2b04      	cmp	r3, #4
 8011b38:	d041      	beq.n	8011bbe <HAL_RCC_GetSysClockFreq+0x92>
 8011b3a:	2b08      	cmp	r3, #8
 8011b3c:	d001      	beq.n	8011b42 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011b3e:	4822      	ldr	r0, [pc, #136]	; (8011bc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8011b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011b42:	4b20      	ldr	r3, [pc, #128]	; (8011bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011b44:	685a      	ldr	r2, [r3, #4]
 8011b46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011b4a:	685b      	ldr	r3, [r3, #4]
 8011b4c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8011b50:	d012      	beq.n	8011b78 <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011b52:	4b1c      	ldr	r3, [pc, #112]	; (8011bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011b54:	6859      	ldr	r1, [r3, #4]
 8011b56:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	481b      	ldr	r0, [pc, #108]	; (8011bcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8011b5e:	fba1 0100 	umull	r0, r1, r1, r0
 8011b62:	f7fe fa8d 	bl	8010080 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011b66:	4b17      	ldr	r3, [pc, #92]	; (8011bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8011b6e:	3301      	adds	r3, #1
 8011b70:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8011b72:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8011b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011b78:	4b12      	ldr	r3, [pc, #72]	; (8011bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8011b80:	461e      	mov	r6, r3
 8011b82:	2700      	movs	r7, #0
 8011b84:	015c      	lsls	r4, r3, #5
 8011b86:	2500      	movs	r5, #0
 8011b88:	1ae4      	subs	r4, r4, r3
 8011b8a:	eb65 0507 	sbc.w	r5, r5, r7
 8011b8e:	01a9      	lsls	r1, r5, #6
 8011b90:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8011b94:	01a0      	lsls	r0, r4, #6
 8011b96:	1b00      	subs	r0, r0, r4
 8011b98:	eb61 0105 	sbc.w	r1, r1, r5
 8011b9c:	00cb      	lsls	r3, r1, #3
 8011b9e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8011ba2:	00c4      	lsls	r4, r0, #3
 8011ba4:	19a0      	adds	r0, r4, r6
 8011ba6:	eb43 0107 	adc.w	r1, r3, r7
 8011baa:	028b      	lsls	r3, r1, #10
 8011bac:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8011bb0:	0284      	lsls	r4, r0, #10
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	f7fe fa62 	bl	8010080 <__aeabi_uldivmod>
 8011bbc:	e7d3      	b.n	8011b66 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8011bbe:	4803      	ldr	r0, [pc, #12]	; (8011bcc <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	40023800 	.word	0x40023800
 8011bc8:	00f42400 	.word	0x00f42400
 8011bcc:	017d7840 	.word	0x017d7840

08011bd0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	f000 809d 	beq.w	8011d10 <HAL_RCC_ClockConfig+0x140>
{
 8011bd6:	b570      	push	{r4, r5, r6, lr}
 8011bd8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011bda:	4b4f      	ldr	r3, [pc, #316]	; (8011d18 <HAL_RCC_ClockConfig+0x148>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f003 030f 	and.w	r3, r3, #15
 8011be2:	428b      	cmp	r3, r1
 8011be4:	d209      	bcs.n	8011bfa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011be6:	b2cb      	uxtb	r3, r1
 8011be8:	4a4b      	ldr	r2, [pc, #300]	; (8011d18 <HAL_RCC_ClockConfig+0x148>)
 8011bea:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011bec:	6813      	ldr	r3, [r2, #0]
 8011bee:	f003 030f 	and.w	r3, r3, #15
 8011bf2:	4299      	cmp	r1, r3
 8011bf4:	d001      	beq.n	8011bfa <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8011bf6:	2001      	movs	r0, #1
 8011bf8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011bfa:	6823      	ldr	r3, [r4, #0]
 8011bfc:	f013 0f02 	tst.w	r3, #2
 8011c00:	d017      	beq.n	8011c32 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011c02:	f013 0f04 	tst.w	r3, #4
 8011c06:	d004      	beq.n	8011c12 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011c08:	4a44      	ldr	r2, [pc, #272]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011c0a:	6893      	ldr	r3, [r2, #8]
 8011c0c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011c10:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011c12:	6823      	ldr	r3, [r4, #0]
 8011c14:	f013 0f08 	tst.w	r3, #8
 8011c18:	d004      	beq.n	8011c24 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011c1a:	4a40      	ldr	r2, [pc, #256]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011c1c:	6893      	ldr	r3, [r2, #8]
 8011c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011c22:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011c24:	4a3d      	ldr	r2, [pc, #244]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011c26:	6893      	ldr	r3, [r2, #8]
 8011c28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011c2c:	68a0      	ldr	r0, [r4, #8]
 8011c2e:	4303      	orrs	r3, r0
 8011c30:	6093      	str	r3, [r2, #8]
 8011c32:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011c34:	6823      	ldr	r3, [r4, #0]
 8011c36:	f013 0f01 	tst.w	r3, #1
 8011c3a:	d032      	beq.n	8011ca2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c3c:	6863      	ldr	r3, [r4, #4]
 8011c3e:	2b01      	cmp	r3, #1
 8011c40:	d021      	beq.n	8011c86 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011c42:	1e9a      	subs	r2, r3, #2
 8011c44:	2a01      	cmp	r2, #1
 8011c46:	d925      	bls.n	8011c94 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c48:	4a34      	ldr	r2, [pc, #208]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011c4a:	6812      	ldr	r2, [r2, #0]
 8011c4c:	f012 0f02 	tst.w	r2, #2
 8011c50:	d060      	beq.n	8011d14 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011c52:	4932      	ldr	r1, [pc, #200]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011c54:	688a      	ldr	r2, [r1, #8]
 8011c56:	f022 0203 	bic.w	r2, r2, #3
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8011c5e:	f7fe fbbd 	bl	80103dc <HAL_GetTick>
 8011c62:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011c64:	4b2d      	ldr	r3, [pc, #180]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011c66:	689b      	ldr	r3, [r3, #8]
 8011c68:	f003 030c 	and.w	r3, r3, #12
 8011c6c:	6862      	ldr	r2, [r4, #4]
 8011c6e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8011c72:	d016      	beq.n	8011ca2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011c74:	f7fe fbb2 	bl	80103dc <HAL_GetTick>
 8011c78:	1b80      	subs	r0, r0, r6
 8011c7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8011c7e:	4298      	cmp	r0, r3
 8011c80:	d9f0      	bls.n	8011c64 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8011c82:	2003      	movs	r0, #3
 8011c84:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c86:	4a25      	ldr	r2, [pc, #148]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011c88:	6812      	ldr	r2, [r2, #0]
 8011c8a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8011c8e:	d1e0      	bne.n	8011c52 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8011c90:	2001      	movs	r0, #1
 8011c92:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c94:	4a21      	ldr	r2, [pc, #132]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011c96:	6812      	ldr	r2, [r2, #0]
 8011c98:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8011c9c:	d1d9      	bne.n	8011c52 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8011c9e:	2001      	movs	r0, #1
 8011ca0:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011ca2:	4b1d      	ldr	r3, [pc, #116]	; (8011d18 <HAL_RCC_ClockConfig+0x148>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f003 030f 	and.w	r3, r3, #15
 8011caa:	429d      	cmp	r5, r3
 8011cac:	d209      	bcs.n	8011cc2 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011cae:	b2ea      	uxtb	r2, r5
 8011cb0:	4b19      	ldr	r3, [pc, #100]	; (8011d18 <HAL_RCC_ClockConfig+0x148>)
 8011cb2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f003 030f 	and.w	r3, r3, #15
 8011cba:	429d      	cmp	r5, r3
 8011cbc:	d001      	beq.n	8011cc2 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8011cbe:	2001      	movs	r0, #1
}
 8011cc0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011cc2:	6823      	ldr	r3, [r4, #0]
 8011cc4:	f013 0f04 	tst.w	r3, #4
 8011cc8:	d006      	beq.n	8011cd8 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011cca:	4a14      	ldr	r2, [pc, #80]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011ccc:	6893      	ldr	r3, [r2, #8]
 8011cce:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8011cd2:	68e1      	ldr	r1, [r4, #12]
 8011cd4:	430b      	orrs	r3, r1
 8011cd6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011cd8:	6823      	ldr	r3, [r4, #0]
 8011cda:	f013 0f08 	tst.w	r3, #8
 8011cde:	d007      	beq.n	8011cf0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011ce0:	4a0e      	ldr	r2, [pc, #56]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011ce2:	6893      	ldr	r3, [r2, #8]
 8011ce4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8011ce8:	6921      	ldr	r1, [r4, #16]
 8011cea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011cee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011cf0:	f7ff ff1c 	bl	8011b2c <HAL_RCC_GetSysClockFreq>
 8011cf4:	4b09      	ldr	r3, [pc, #36]	; (8011d1c <HAL_RCC_ClockConfig+0x14c>)
 8011cf6:	689b      	ldr	r3, [r3, #8]
 8011cf8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8011cfc:	4a08      	ldr	r2, [pc, #32]	; (8011d20 <HAL_RCC_ClockConfig+0x150>)
 8011cfe:	5cd3      	ldrb	r3, [r2, r3]
 8011d00:	40d8      	lsrs	r0, r3
 8011d02:	4b08      	ldr	r3, [pc, #32]	; (8011d24 <HAL_RCC_ClockConfig+0x154>)
 8011d04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8011d06:	2000      	movs	r0, #0
 8011d08:	f00c ffce 	bl	801eca8 <HAL_InitTick>
  return HAL_OK;
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8011d10:	2001      	movs	r0, #1
 8011d12:	4770      	bx	lr
        return HAL_ERROR;
 8011d14:	2001      	movs	r0, #1
 8011d16:	bd70      	pop	{r4, r5, r6, pc}
 8011d18:	40023c00 	.word	0x40023c00
 8011d1c:	40023800 	.word	0x40023800
 8011d20:	08025984 	.word	0x08025984
 8011d24:	2000003c 	.word	0x2000003c

08011d28 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8011d28:	4b01      	ldr	r3, [pc, #4]	; (8011d30 <HAL_RCC_GetHCLKFreq+0x8>)
 8011d2a:	6818      	ldr	r0, [r3, #0]
 8011d2c:	4770      	bx	lr
 8011d2e:	bf00      	nop
 8011d30:	2000003c 	.word	0x2000003c

08011d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011d34:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011d36:	f7ff fff7 	bl	8011d28 <HAL_RCC_GetHCLKFreq>
 8011d3a:	4b04      	ldr	r3, [pc, #16]	; (8011d4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8011d3c:	689b      	ldr	r3, [r3, #8]
 8011d3e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8011d42:	4a03      	ldr	r2, [pc, #12]	; (8011d50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011d44:	5cd3      	ldrb	r3, [r2, r3]
}
 8011d46:	40d8      	lsrs	r0, r3
 8011d48:	bd08      	pop	{r3, pc}
 8011d4a:	bf00      	nop
 8011d4c:	40023800 	.word	0x40023800
 8011d50:	08025994 	.word	0x08025994

08011d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011d54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011d56:	f7ff ffe7 	bl	8011d28 <HAL_RCC_GetHCLKFreq>
 8011d5a:	4b04      	ldr	r3, [pc, #16]	; (8011d6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8011d5c:	689b      	ldr	r3, [r3, #8]
 8011d5e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8011d62:	4a03      	ldr	r2, [pc, #12]	; (8011d70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8011d64:	5cd3      	ldrb	r3, [r2, r3]
}
 8011d66:	40d8      	lsrs	r0, r3
 8011d68:	bd08      	pop	{r3, pc}
 8011d6a:	bf00      	nop
 8011d6c:	40023800 	.word	0x40023800
 8011d70:	08025994 	.word	0x08025994

08011d74 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011d74:	230f      	movs	r3, #15
 8011d76:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011d78:	4b0b      	ldr	r3, [pc, #44]	; (8011da8 <HAL_RCC_GetClockConfig+0x34>)
 8011d7a:	689a      	ldr	r2, [r3, #8]
 8011d7c:	f002 0203 	and.w	r2, r2, #3
 8011d80:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8011d82:	689a      	ldr	r2, [r3, #8]
 8011d84:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8011d88:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011d8a:	689a      	ldr	r2, [r3, #8]
 8011d8c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8011d90:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8011d92:	689b      	ldr	r3, [r3, #8]
 8011d94:	08db      	lsrs	r3, r3, #3
 8011d96:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8011d9a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011d9c:	4b03      	ldr	r3, [pc, #12]	; (8011dac <HAL_RCC_GetClockConfig+0x38>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f003 030f 	and.w	r3, r3, #15
 8011da4:	600b      	str	r3, [r1, #0]
 8011da6:	4770      	bx	lr
 8011da8:	40023800 	.word	0x40023800
 8011dac:	40023c00 	.word	0x40023c00

08011db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011db0:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011db2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011db4:	6a04      	ldr	r4, [r0, #32]
 8011db6:	f024 0401 	bic.w	r4, r4, #1
 8011dba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8011dbc:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011dbe:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011dc2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011dc6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8011dca:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011dcc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8011dce:	6203      	str	r3, [r0, #32]
}
 8011dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dd4:	4770      	bx	lr

08011dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011dd6:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011dd8:	6a03      	ldr	r3, [r0, #32]
 8011dda:	f023 0310 	bic.w	r3, r3, #16
 8011dde:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011de0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8011de2:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011de4:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011de8:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011dec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8011df0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011df4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8011df6:	6203      	str	r3, [r0, #32]
}
 8011df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dfc:	4770      	bx	lr

08011dfe <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8011dfe:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8011e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8011e04:	f041 0107 	orr.w	r1, r1, #7
 8011e08:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8011e0a:	6083      	str	r3, [r0, #8]
 8011e0c:	4770      	bx	lr

08011e0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011e0e:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8011e10:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011e12:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011e16:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8011e1a:	4319      	orrs	r1, r3
 8011e1c:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011e1e:	6084      	str	r4, [r0, #8]
} 
 8011e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e24:	4770      	bx	lr

08011e26 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011e26:	6802      	ldr	r2, [r0, #0]
 8011e28:	68d3      	ldr	r3, [r2, #12]
 8011e2a:	f043 0301 	orr.w	r3, r3, #1
 8011e2e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8011e30:	6802      	ldr	r2, [r0, #0]
 8011e32:	6813      	ldr	r3, [r2, #0]
 8011e34:	f043 0301 	orr.w	r3, r3, #1
 8011e38:	6013      	str	r3, [r2, #0]
}
 8011e3a:	2000      	movs	r0, #0
 8011e3c:	4770      	bx	lr

08011e3e <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011e3e:	6802      	ldr	r2, [r0, #0]
 8011e40:	68d3      	ldr	r3, [r2, #12]
 8011e42:	f023 0301 	bic.w	r3, r3, #1
 8011e46:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8011e48:	6803      	ldr	r3, [r0, #0]
 8011e4a:	6a19      	ldr	r1, [r3, #32]
 8011e4c:	f241 1211 	movw	r2, #4369	; 0x1111
 8011e50:	4211      	tst	r1, r2
 8011e52:	d108      	bne.n	8011e66 <HAL_TIM_Base_Stop_IT+0x28>
 8011e54:	6a19      	ldr	r1, [r3, #32]
 8011e56:	f240 4244 	movw	r2, #1092	; 0x444
 8011e5a:	4211      	tst	r1, r2
 8011e5c:	d103      	bne.n	8011e66 <HAL_TIM_Base_Stop_IT+0x28>
 8011e5e:	681a      	ldr	r2, [r3, #0]
 8011e60:	f022 0201 	bic.w	r2, r2, #1
 8011e64:	601a      	str	r2, [r3, #0]
}
 8011e66:	2000      	movs	r0, #0
 8011e68:	4770      	bx	lr

08011e6a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8011e6a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d07d      	beq.n	8011f6e <HAL_TIM_ConfigClockSource+0x104>
{
 8011e72:	b510      	push	{r4, lr}
 8011e74:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8011e76:	2301      	movs	r3, #1
 8011e78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8011e7c:	2302      	movs	r3, #2
 8011e7e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8011e82:	6802      	ldr	r2, [r0, #0]
 8011e84:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8011e8e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8011e90:	680b      	ldr	r3, [r1, #0]
 8011e92:	2b40      	cmp	r3, #64	; 0x40
 8011e94:	d057      	beq.n	8011f46 <HAL_TIM_ConfigClockSource+0xdc>
 8011e96:	d910      	bls.n	8011eba <HAL_TIM_ConfigClockSource+0x50>
 8011e98:	2b70      	cmp	r3, #112	; 0x70
 8011e9a:	d03e      	beq.n	8011f1a <HAL_TIM_ConfigClockSource+0xb0>
 8011e9c:	d81f      	bhi.n	8011ede <HAL_TIM_ConfigClockSource+0x74>
 8011e9e:	2b50      	cmp	r3, #80	; 0x50
 8011ea0:	d047      	beq.n	8011f32 <HAL_TIM_ConfigClockSource+0xc8>
 8011ea2:	2b60      	cmp	r3, #96	; 0x60
 8011ea4:	d132      	bne.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8011ea6:	68ca      	ldr	r2, [r1, #12]
 8011ea8:	6849      	ldr	r1, [r1, #4]
 8011eaa:	6800      	ldr	r0, [r0, #0]
 8011eac:	f7ff ff93 	bl	8011dd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011eb0:	2160      	movs	r1, #96	; 0x60
 8011eb2:	6820      	ldr	r0, [r4, #0]
 8011eb4:	f7ff ffa3 	bl	8011dfe <TIM_ITRx_SetConfig>
    break;
 8011eb8:	e028      	b.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011eba:	2b10      	cmp	r3, #16
 8011ebc:	d04d      	beq.n	8011f5a <HAL_TIM_ConfigClockSource+0xf0>
 8011ebe:	d908      	bls.n	8011ed2 <HAL_TIM_ConfigClockSource+0x68>
 8011ec0:	2b20      	cmp	r3, #32
 8011ec2:	d04f      	beq.n	8011f64 <HAL_TIM_ConfigClockSource+0xfa>
 8011ec4:	2b30      	cmp	r3, #48	; 0x30
 8011ec6:	d121      	bne.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8011ec8:	2130      	movs	r1, #48	; 0x30
 8011eca:	6800      	ldr	r0, [r0, #0]
 8011ecc:	f7ff ff97 	bl	8011dfe <TIM_ITRx_SetConfig>
    break;
 8011ed0:	e01c      	b.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011ed2:	b9db      	cbnz	r3, 8011f0c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8011ed4:	2100      	movs	r1, #0
 8011ed6:	6800      	ldr	r0, [r0, #0]
 8011ed8:	f7ff ff91 	bl	8011dfe <TIM_ITRx_SetConfig>
    break;
 8011edc:	e016      	b.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ee2:	d00e      	beq.n	8011f02 <HAL_TIM_ConfigClockSource+0x98>
 8011ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ee8:	d110      	bne.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance, 
 8011eea:	68cb      	ldr	r3, [r1, #12]
 8011eec:	684a      	ldr	r2, [r1, #4]
 8011eee:	6889      	ldr	r1, [r1, #8]
 8011ef0:	6800      	ldr	r0, [r0, #0]
 8011ef2:	f7ff ff8c 	bl	8011e0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011ef6:	6822      	ldr	r2, [r4, #0]
 8011ef8:	6893      	ldr	r3, [r2, #8]
 8011efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011efe:	6093      	str	r3, [r2, #8]
    break;
 8011f00:	e004      	b.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8011f02:	6802      	ldr	r2, [r0, #0]
 8011f04:	6893      	ldr	r3, [r2, #8]
 8011f06:	f023 0307 	bic.w	r3, r3, #7
 8011f0a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8011f12:	2000      	movs	r0, #0
 8011f14:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8011f18:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8011f1a:	68cb      	ldr	r3, [r1, #12]
 8011f1c:	684a      	ldr	r2, [r1, #4]
 8011f1e:	6889      	ldr	r1, [r1, #8]
 8011f20:	6800      	ldr	r0, [r0, #0]
 8011f22:	f7ff ff74 	bl	8011e0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8011f26:	6822      	ldr	r2, [r4, #0]
 8011f28:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011f2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8011f2e:	6093      	str	r3, [r2, #8]
    break;
 8011f30:	e7ec      	b.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8011f32:	68ca      	ldr	r2, [r1, #12]
 8011f34:	6849      	ldr	r1, [r1, #4]
 8011f36:	6800      	ldr	r0, [r0, #0]
 8011f38:	f7ff ff3a 	bl	8011db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011f3c:	2150      	movs	r1, #80	; 0x50
 8011f3e:	6820      	ldr	r0, [r4, #0]
 8011f40:	f7ff ff5d 	bl	8011dfe <TIM_ITRx_SetConfig>
    break;
 8011f44:	e7e2      	b.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8011f46:	68ca      	ldr	r2, [r1, #12]
 8011f48:	6849      	ldr	r1, [r1, #4]
 8011f4a:	6800      	ldr	r0, [r0, #0]
 8011f4c:	f7ff ff30 	bl	8011db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011f50:	2140      	movs	r1, #64	; 0x40
 8011f52:	6820      	ldr	r0, [r4, #0]
 8011f54:	f7ff ff53 	bl	8011dfe <TIM_ITRx_SetConfig>
    break;
 8011f58:	e7d8      	b.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8011f5a:	2110      	movs	r1, #16
 8011f5c:	6800      	ldr	r0, [r0, #0]
 8011f5e:	f7ff ff4e 	bl	8011dfe <TIM_ITRx_SetConfig>
    break;
 8011f62:	e7d3      	b.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8011f64:	2120      	movs	r1, #32
 8011f66:	6800      	ldr	r0, [r0, #0]
 8011f68:	f7ff ff49 	bl	8011dfe <TIM_ITRx_SetConfig>
    break;
 8011f6c:	e7ce      	b.n	8011f0c <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8011f6e:	2002      	movs	r0, #2
 8011f70:	4770      	bx	lr

08011f72 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8011f72:	4770      	bx	lr

08011f74 <HAL_TIM_IC_CaptureCallback>:
{
 8011f74:	4770      	bx	lr

08011f76 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8011f76:	4770      	bx	lr

08011f78 <HAL_TIM_TriggerCallback>:
{
 8011f78:	4770      	bx	lr

08011f7a <HAL_TIM_IRQHandler>:
{
 8011f7a:	b510      	push	{r4, lr}
 8011f7c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011f7e:	6803      	ldr	r3, [r0, #0]
 8011f80:	691a      	ldr	r2, [r3, #16]
 8011f82:	f012 0f02 	tst.w	r2, #2
 8011f86:	d011      	beq.n	8011fac <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8011f88:	68da      	ldr	r2, [r3, #12]
 8011f8a:	f012 0f02 	tst.w	r2, #2
 8011f8e:	d00d      	beq.n	8011fac <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011f90:	f06f 0202 	mvn.w	r2, #2
 8011f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011f96:	2301      	movs	r3, #1
 8011f98:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011f9a:	6803      	ldr	r3, [r0, #0]
 8011f9c:	699b      	ldr	r3, [r3, #24]
 8011f9e:	f013 0f03 	tst.w	r3, #3
 8011fa2:	d070      	beq.n	8012086 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8011fa4:	f7ff ffe6 	bl	8011f74 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011fac:	6823      	ldr	r3, [r4, #0]
 8011fae:	691a      	ldr	r2, [r3, #16]
 8011fb0:	f012 0f04 	tst.w	r2, #4
 8011fb4:	d012      	beq.n	8011fdc <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8011fb6:	68da      	ldr	r2, [r3, #12]
 8011fb8:	f012 0f04 	tst.w	r2, #4
 8011fbc:	d00e      	beq.n	8011fdc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011fbe:	f06f 0204 	mvn.w	r2, #4
 8011fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011fc4:	2302      	movs	r3, #2
 8011fc6:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011fc8:	6823      	ldr	r3, [r4, #0]
 8011fca:	699b      	ldr	r3, [r3, #24]
 8011fcc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8011fd0:	d05f      	beq.n	8012092 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f7ff ffce 	bl	8011f74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011fdc:	6823      	ldr	r3, [r4, #0]
 8011fde:	691a      	ldr	r2, [r3, #16]
 8011fe0:	f012 0f08 	tst.w	r2, #8
 8011fe4:	d012      	beq.n	801200c <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8011fe6:	68da      	ldr	r2, [r3, #12]
 8011fe8:	f012 0f08 	tst.w	r2, #8
 8011fec:	d00e      	beq.n	801200c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011fee:	f06f 0208 	mvn.w	r2, #8
 8011ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011ff4:	2304      	movs	r3, #4
 8011ff6:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011ff8:	6823      	ldr	r3, [r4, #0]
 8011ffa:	69db      	ldr	r3, [r3, #28]
 8011ffc:	f013 0f03 	tst.w	r3, #3
 8012000:	d04e      	beq.n	80120a0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8012002:	4620      	mov	r0, r4
 8012004:	f7ff ffb6 	bl	8011f74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012008:	2300      	movs	r3, #0
 801200a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801200c:	6823      	ldr	r3, [r4, #0]
 801200e:	691a      	ldr	r2, [r3, #16]
 8012010:	f012 0f10 	tst.w	r2, #16
 8012014:	d012      	beq.n	801203c <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8012016:	68da      	ldr	r2, [r3, #12]
 8012018:	f012 0f10 	tst.w	r2, #16
 801201c:	d00e      	beq.n	801203c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801201e:	f06f 0210 	mvn.w	r2, #16
 8012022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012024:	2308      	movs	r3, #8
 8012026:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012028:	6823      	ldr	r3, [r4, #0]
 801202a:	69db      	ldr	r3, [r3, #28]
 801202c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8012030:	d03d      	beq.n	80120ae <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8012032:	4620      	mov	r0, r4
 8012034:	f7ff ff9e 	bl	8011f74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012038:	2300      	movs	r3, #0
 801203a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	691a      	ldr	r2, [r3, #16]
 8012040:	f012 0f01 	tst.w	r2, #1
 8012044:	d003      	beq.n	801204e <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8012046:	68da      	ldr	r2, [r3, #12]
 8012048:	f012 0f01 	tst.w	r2, #1
 801204c:	d136      	bne.n	80120bc <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801204e:	6823      	ldr	r3, [r4, #0]
 8012050:	691a      	ldr	r2, [r3, #16]
 8012052:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012056:	d003      	beq.n	8012060 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8012058:	68da      	ldr	r2, [r3, #12]
 801205a:	f012 0f80 	tst.w	r2, #128	; 0x80
 801205e:	d134      	bne.n	80120ca <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012060:	6823      	ldr	r3, [r4, #0]
 8012062:	691a      	ldr	r2, [r3, #16]
 8012064:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012068:	d003      	beq.n	8012072 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 801206a:	68da      	ldr	r2, [r3, #12]
 801206c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012070:	d132      	bne.n	80120d8 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012072:	6823      	ldr	r3, [r4, #0]
 8012074:	691a      	ldr	r2, [r3, #16]
 8012076:	f012 0f20 	tst.w	r2, #32
 801207a:	d003      	beq.n	8012084 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 801207c:	68da      	ldr	r2, [r3, #12]
 801207e:	f012 0f20 	tst.w	r2, #32
 8012082:	d130      	bne.n	80120e6 <HAL_TIM_IRQHandler+0x16c>
 8012084:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012086:	f7ff ff74 	bl	8011f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801208a:	4620      	mov	r0, r4
 801208c:	f7ff ff73 	bl	8011f76 <HAL_TIM_PWM_PulseFinishedCallback>
 8012090:	e78a      	b.n	8011fa8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012092:	4620      	mov	r0, r4
 8012094:	f7ff ff6d 	bl	8011f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012098:	4620      	mov	r0, r4
 801209a:	f7ff ff6c 	bl	8011f76 <HAL_TIM_PWM_PulseFinishedCallback>
 801209e:	e79b      	b.n	8011fd8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80120a0:	4620      	mov	r0, r4
 80120a2:	f7ff ff66 	bl	8011f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80120a6:	4620      	mov	r0, r4
 80120a8:	f7ff ff65 	bl	8011f76 <HAL_TIM_PWM_PulseFinishedCallback>
 80120ac:	e7ac      	b.n	8012008 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80120ae:	4620      	mov	r0, r4
 80120b0:	f7ff ff5f 	bl	8011f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80120b4:	4620      	mov	r0, r4
 80120b6:	f7ff ff5e 	bl	8011f76 <HAL_TIM_PWM_PulseFinishedCallback>
 80120ba:	e7bd      	b.n	8012038 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80120bc:	f06f 0201 	mvn.w	r2, #1
 80120c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80120c2:	4620      	mov	r0, r4
 80120c4:	f00c f898 	bl	801e1f8 <HAL_TIM_PeriodElapsedCallback>
 80120c8:	e7c1      	b.n	801204e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80120ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80120ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80120d0:	4620      	mov	r0, r4
 80120d2:	f000 f8e0 	bl	8012296 <HAL_TIMEx_BreakCallback>
 80120d6:	e7c3      	b.n	8012060 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80120d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80120dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80120de:	4620      	mov	r0, r4
 80120e0:	f7ff ff4a 	bl	8011f78 <HAL_TIM_TriggerCallback>
 80120e4:	e7c5      	b.n	8012072 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80120e6:	f06f 0220 	mvn.w	r2, #32
 80120ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80120ec:	4620      	mov	r0, r4
 80120ee:	f000 f8d1 	bl	8012294 <HAL_TIMEx_CommutationCallback>
}
 80120f2:	e7c7      	b.n	8012084 <HAL_TIM_IRQHandler+0x10a>

080120f4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80120f4:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80120f6:	4a45      	ldr	r2, [pc, #276]	; (801220c <TIM_Base_SetConfig+0x118>)
 80120f8:	4290      	cmp	r0, r2
 80120fa:	d04a      	beq.n	8012192 <TIM_Base_SetConfig+0x9e>
 80120fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012100:	d049      	beq.n	8012196 <TIM_Base_SetConfig+0xa2>
 8012102:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8012106:	4290      	cmp	r0, r2
 8012108:	d047      	beq.n	801219a <TIM_Base_SetConfig+0xa6>
 801210a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801210e:	4290      	cmp	r0, r2
 8012110:	d045      	beq.n	801219e <TIM_Base_SetConfig+0xaa>
 8012112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012116:	4290      	cmp	r0, r2
 8012118:	d043      	beq.n	80121a2 <TIM_Base_SetConfig+0xae>
 801211a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801211e:	4290      	cmp	r0, r2
 8012120:	d035      	beq.n	801218e <TIM_Base_SetConfig+0x9a>
 8012122:	2200      	movs	r2, #0
 8012124:	b11a      	cbz	r2, 801212e <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801212a:	684a      	ldr	r2, [r1, #4]
 801212c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 801212e:	4a37      	ldr	r2, [pc, #220]	; (801220c <TIM_Base_SetConfig+0x118>)
 8012130:	4290      	cmp	r0, r2
 8012132:	d03a      	beq.n	80121aa <TIM_Base_SetConfig+0xb6>
 8012134:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012138:	d050      	beq.n	80121dc <TIM_Base_SetConfig+0xe8>
 801213a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 801213e:	4290      	cmp	r0, r2
 8012140:	d04e      	beq.n	80121e0 <TIM_Base_SetConfig+0xec>
 8012142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012146:	4290      	cmp	r0, r2
 8012148:	d04c      	beq.n	80121e4 <TIM_Base_SetConfig+0xf0>
 801214a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801214e:	4290      	cmp	r0, r2
 8012150:	d04a      	beq.n	80121e8 <TIM_Base_SetConfig+0xf4>
 8012152:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8012156:	4290      	cmp	r0, r2
 8012158:	d048      	beq.n	80121ec <TIM_Base_SetConfig+0xf8>
 801215a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 801215e:	4290      	cmp	r0, r2
 8012160:	d046      	beq.n	80121f0 <TIM_Base_SetConfig+0xfc>
 8012162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012166:	4290      	cmp	r0, r2
 8012168:	d044      	beq.n	80121f4 <TIM_Base_SetConfig+0x100>
 801216a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801216e:	4290      	cmp	r0, r2
 8012170:	d042      	beq.n	80121f8 <TIM_Base_SetConfig+0x104>
 8012172:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8012176:	4290      	cmp	r0, r2
 8012178:	d040      	beq.n	80121fc <TIM_Base_SetConfig+0x108>
 801217a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801217e:	4290      	cmp	r0, r2
 8012180:	d03e      	beq.n	8012200 <TIM_Base_SetConfig+0x10c>
 8012182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012186:	4290      	cmp	r0, r2
 8012188:	d00d      	beq.n	80121a6 <TIM_Base_SetConfig+0xb2>
 801218a:	2200      	movs	r2, #0
 801218c:	e00e      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 801218e:	2201      	movs	r2, #1
 8012190:	e7c8      	b.n	8012124 <TIM_Base_SetConfig+0x30>
 8012192:	2201      	movs	r2, #1
 8012194:	e7c6      	b.n	8012124 <TIM_Base_SetConfig+0x30>
 8012196:	2201      	movs	r2, #1
 8012198:	e7c4      	b.n	8012124 <TIM_Base_SetConfig+0x30>
 801219a:	2201      	movs	r2, #1
 801219c:	e7c2      	b.n	8012124 <TIM_Base_SetConfig+0x30>
 801219e:	2201      	movs	r2, #1
 80121a0:	e7c0      	b.n	8012124 <TIM_Base_SetConfig+0x30>
 80121a2:	2201      	movs	r2, #1
 80121a4:	e7be      	b.n	8012124 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80121a6:	2201      	movs	r2, #1
 80121a8:	e000      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
 80121aa:	2201      	movs	r2, #1
 80121ac:	b11a      	cbz	r2, 80121b6 <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 80121ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80121b2:	68ca      	ldr	r2, [r1, #12]
 80121b4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80121b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80121b8:	688b      	ldr	r3, [r1, #8]
 80121ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80121bc:	680b      	ldr	r3, [r1, #0]
 80121be:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80121c0:	4b12      	ldr	r3, [pc, #72]	; (801220c <TIM_Base_SetConfig+0x118>)
 80121c2:	4298      	cmp	r0, r3
 80121c4:	d020      	beq.n	8012208 <TIM_Base_SetConfig+0x114>
 80121c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80121ca:	4298      	cmp	r0, r3
 80121cc:	d01a      	beq.n	8012204 <TIM_Base_SetConfig+0x110>
 80121ce:	2300      	movs	r3, #0
 80121d0:	b10b      	cbz	r3, 80121d6 <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 80121d2:	690b      	ldr	r3, [r1, #16]
 80121d4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80121d6:	2301      	movs	r3, #1
 80121d8:	6143      	str	r3, [r0, #20]
 80121da:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80121dc:	2201      	movs	r2, #1
 80121de:	e7e5      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
 80121e0:	2201      	movs	r2, #1
 80121e2:	e7e3      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
 80121e4:	2201      	movs	r2, #1
 80121e6:	e7e1      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
 80121e8:	2201      	movs	r2, #1
 80121ea:	e7df      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
 80121ec:	2201      	movs	r2, #1
 80121ee:	e7dd      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
 80121f0:	2201      	movs	r2, #1
 80121f2:	e7db      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
 80121f4:	2201      	movs	r2, #1
 80121f6:	e7d9      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
 80121f8:	2201      	movs	r2, #1
 80121fa:	e7d7      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
 80121fc:	2201      	movs	r2, #1
 80121fe:	e7d5      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
 8012200:	2201      	movs	r2, #1
 8012202:	e7d3      	b.n	80121ac <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8012204:	2301      	movs	r3, #1
 8012206:	e7e3      	b.n	80121d0 <TIM_Base_SetConfig+0xdc>
 8012208:	2301      	movs	r3, #1
 801220a:	e7e1      	b.n	80121d0 <TIM_Base_SetConfig+0xdc>
 801220c:	40010000 	.word	0x40010000

08012210 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8012210:	b1a8      	cbz	r0, 801223e <HAL_TIM_Base_Init+0x2e>
{ 
 8012212:	b510      	push	{r4, lr}
 8012214:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8012216:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801221a:	b15b      	cbz	r3, 8012234 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 801221c:	2302      	movs	r3, #2
 801221e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8012222:	1d21      	adds	r1, r4, #4
 8012224:	6820      	ldr	r0, [r4, #0]
 8012226:	f7ff ff65 	bl	80120f4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 801222a:	2301      	movs	r3, #1
 801222c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8012230:	2000      	movs	r0, #0
 8012232:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8012234:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8012238:	f00c ff5e 	bl	801f0f8 <HAL_TIM_Base_MspInit>
 801223c:	e7ee      	b.n	801221c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 801223e:	2001      	movs	r0, #1
 8012240:	4770      	bx	lr

08012242 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8012242:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8012246:	2b01      	cmp	r3, #1
 8012248:	d022      	beq.n	8012290 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 801224a:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 801224c:	2201      	movs	r2, #1
 801224e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8012252:	2302      	movs	r3, #2
 8012254:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012258:	6804      	ldr	r4, [r0, #0]
 801225a:	6863      	ldr	r3, [r4, #4]
 801225c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012260:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8012262:	6804      	ldr	r4, [r0, #0]
 8012264:	6863      	ldr	r3, [r4, #4]
 8012266:	680d      	ldr	r5, [r1, #0]
 8012268:	432b      	orrs	r3, r5
 801226a:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801226c:	6804      	ldr	r4, [r0, #0]
 801226e:	68a3      	ldr	r3, [r4, #8]
 8012270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012274:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012276:	6804      	ldr	r4, [r0, #0]
 8012278:	68a3      	ldr	r3, [r4, #8]
 801227a:	6849      	ldr	r1, [r1, #4]
 801227c:	430b      	orrs	r3, r1
 801227e:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8012280:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8012284:	2300      	movs	r3, #0
 8012286:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 801228a:	4618      	mov	r0, r3
} 
 801228c:	bc30      	pop	{r4, r5}
 801228e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8012290:	2002      	movs	r0, #2
 8012292:	4770      	bx	lr

08012294 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8012294:	4770      	bx	lr

08012296 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012296:	4770      	bx	lr

08012298 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012298:	6802      	ldr	r2, [r0, #0]
 801229a:	68d3      	ldr	r3, [r2, #12]
 801229c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80122a0:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80122a2:	2320      	movs	r3, #32
 80122a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 80122a8:	4770      	bx	lr

080122aa <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80122aa:	6802      	ldr	r2, [r0, #0]
 80122ac:	68d3      	ldr	r3, [r2, #12]
 80122ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80122b2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122b4:	6802      	ldr	r2, [r0, #0]
 80122b6:	6953      	ldr	r3, [r2, #20]
 80122b8:	f023 0301 	bic.w	r3, r3, #1
 80122bc:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80122be:	2320      	movs	r3, #32
 80122c0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80122c4:	4770      	bx	lr

080122c6 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80122c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	2b21      	cmp	r3, #33	; 0x21
 80122ce:	d001      	beq.n	80122d4 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80122d0:	2002      	movs	r0, #2
 80122d2:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80122d4:	6883      	ldr	r3, [r0, #8]
 80122d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80122da:	d017      	beq.n	801230c <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80122dc:	6802      	ldr	r2, [r0, #0]
 80122de:	6a03      	ldr	r3, [r0, #32]
 80122e0:	1c59      	adds	r1, r3, #1
 80122e2:	6201      	str	r1, [r0, #32]
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 80122e8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	3b01      	subs	r3, #1
 80122ee:	b29b      	uxth	r3, r3
 80122f0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80122f2:	b9db      	cbnz	r3, 801232c <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80122f4:	6802      	ldr	r2, [r0, #0]
 80122f6:	68d3      	ldr	r3, [r2, #12]
 80122f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80122fc:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122fe:	6802      	ldr	r2, [r0, #0]
 8012300:	68d3      	ldr	r3, [r2, #12]
 8012302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012306:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8012308:	2000      	movs	r0, #0
 801230a:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 801230c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801230e:	6802      	ldr	r2, [r0, #0]
 8012310:	881b      	ldrh	r3, [r3, #0]
 8012312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012316:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8012318:	6903      	ldr	r3, [r0, #16]
 801231a:	b91b      	cbnz	r3, 8012324 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 801231c:	6a03      	ldr	r3, [r0, #32]
 801231e:	3302      	adds	r3, #2
 8012320:	6203      	str	r3, [r0, #32]
 8012322:	e7e1      	b.n	80122e8 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8012324:	6a03      	ldr	r3, [r0, #32]
 8012326:	3301      	adds	r3, #1
 8012328:	6203      	str	r3, [r0, #32]
 801232a:	e7dd      	b.n	80122e8 <UART_Transmit_IT+0x22>
    return HAL_OK;
 801232c:	2000      	movs	r0, #0
  }
}
 801232e:	4770      	bx	lr

08012330 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012334:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8012336:	6802      	ldr	r2, [r0, #0]
 8012338:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 801233a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 801233e:	68c1      	ldr	r1, [r0, #12]
 8012340:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8012342:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8012344:	6801      	ldr	r1, [r0, #0]
 8012346:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8012348:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801234c:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012350:	6882      	ldr	r2, [r0, #8]
 8012352:	6900      	ldr	r0, [r0, #16]
 8012354:	4302      	orrs	r2, r0
 8012356:	6960      	ldr	r0, [r4, #20]
 8012358:	4302      	orrs	r2, r0
 801235a:	69e0      	ldr	r0, [r4, #28]
 801235c:	4302      	orrs	r2, r0
 801235e:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8012360:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8012362:	6822      	ldr	r2, [r4, #0]
 8012364:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8012366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 801236a:	69a1      	ldr	r1, [r4, #24]
 801236c:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 801236e:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012370:	69e3      	ldr	r3, [r4, #28]
 8012372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012376:	d062      	beq.n	801243e <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8012378:	f8d4 8000 	ldr.w	r8, [r4]
 801237c:	4bbb      	ldr	r3, [pc, #748]	; (801266c <UART_SetConfig+0x33c>)
 801237e:	4598      	cmp	r8, r3
 8012380:	f000 811b 	beq.w	80125ba <UART_SetConfig+0x28a>
 8012384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012388:	4598      	cmp	r8, r3
 801238a:	f000 8116 	beq.w	80125ba <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 801238e:	f7ff fcd1 	bl	8011d34 <HAL_RCC_GetPCLK1Freq>
 8012392:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012396:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801239a:	6865      	ldr	r5, [r4, #4]
 801239c:	00ad      	lsls	r5, r5, #2
 801239e:	fbb0 f5f5 	udiv	r5, r0, r5
 80123a2:	4fb3      	ldr	r7, [pc, #716]	; (8012670 <UART_SetConfig+0x340>)
 80123a4:	fba7 3505 	umull	r3, r5, r7, r5
 80123a8:	096d      	lsrs	r5, r5, #5
 80123aa:	012e      	lsls	r6, r5, #4
 80123ac:	f7ff fcc2 	bl	8011d34 <HAL_RCC_GetPCLK1Freq>
 80123b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123b8:	6865      	ldr	r5, [r4, #4]
 80123ba:	00ad      	lsls	r5, r5, #2
 80123bc:	fbb0 faf5 	udiv	sl, r0, r5
 80123c0:	f7ff fcb8 	bl	8011d34 <HAL_RCC_GetPCLK1Freq>
 80123c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123cc:	6865      	ldr	r5, [r4, #4]
 80123ce:	00ad      	lsls	r5, r5, #2
 80123d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80123d4:	fba7 3505 	umull	r3, r5, r7, r5
 80123d8:	096d      	lsrs	r5, r5, #5
 80123da:	f04f 0964 	mov.w	r9, #100	; 0x64
 80123de:	fb09 a515 	mls	r5, r9, r5, sl
 80123e2:	012d      	lsls	r5, r5, #4
 80123e4:	3532      	adds	r5, #50	; 0x32
 80123e6:	fba7 3505 	umull	r3, r5, r7, r5
 80123ea:	096d      	lsrs	r5, r5, #5
 80123ec:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80123f0:	4435      	add	r5, r6
 80123f2:	f7ff fc9f 	bl	8011d34 <HAL_RCC_GetPCLK1Freq>
 80123f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80123fe:	6866      	ldr	r6, [r4, #4]
 8012400:	00b6      	lsls	r6, r6, #2
 8012402:	fbb0 f6f6 	udiv	r6, r0, r6
 8012406:	f7ff fc95 	bl	8011d34 <HAL_RCC_GetPCLK1Freq>
 801240a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801240e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012412:	6863      	ldr	r3, [r4, #4]
 8012414:	009b      	lsls	r3, r3, #2
 8012416:	fbb0 f0f3 	udiv	r0, r0, r3
 801241a:	fba7 3000 	umull	r3, r0, r7, r0
 801241e:	0940      	lsrs	r0, r0, #5
 8012420:	fb09 6910 	mls	r9, r9, r0, r6
 8012424:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8012428:	f109 0932 	add.w	r9, r9, #50	; 0x32
 801242c:	fba7 3709 	umull	r3, r7, r7, r9
 8012430:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8012434:	442f      	add	r7, r5
 8012436:	f8c8 7008 	str.w	r7, [r8, #8]
 801243a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 801243e:	f8d4 8000 	ldr.w	r8, [r4]
 8012442:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012446:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 801244a:	4598      	cmp	r8, r3
 801244c:	d05c      	beq.n	8012508 <UART_SetConfig+0x1d8>
 801244e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012452:	4598      	cmp	r8, r3
 8012454:	d058      	beq.n	8012508 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8012456:	f7ff fc6d 	bl	8011d34 <HAL_RCC_GetPCLK1Freq>
 801245a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801245e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012462:	6865      	ldr	r5, [r4, #4]
 8012464:	006d      	lsls	r5, r5, #1
 8012466:	fbb0 f5f5 	udiv	r5, r0, r5
 801246a:	4f81      	ldr	r7, [pc, #516]	; (8012670 <UART_SetConfig+0x340>)
 801246c:	fba7 3505 	umull	r3, r5, r7, r5
 8012470:	096d      	lsrs	r5, r5, #5
 8012472:	012e      	lsls	r6, r5, #4
 8012474:	f7ff fc5e 	bl	8011d34 <HAL_RCC_GetPCLK1Freq>
 8012478:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801247c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012480:	6865      	ldr	r5, [r4, #4]
 8012482:	006d      	lsls	r5, r5, #1
 8012484:	fbb0 faf5 	udiv	sl, r0, r5
 8012488:	f7ff fc54 	bl	8011d34 <HAL_RCC_GetPCLK1Freq>
 801248c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012490:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012494:	6865      	ldr	r5, [r4, #4]
 8012496:	006d      	lsls	r5, r5, #1
 8012498:	fbb0 f5f5 	udiv	r5, r0, r5
 801249c:	fba7 3505 	umull	r3, r5, r7, r5
 80124a0:	096d      	lsrs	r5, r5, #5
 80124a2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80124a6:	fb09 a515 	mls	r5, r9, r5, sl
 80124aa:	00ed      	lsls	r5, r5, #3
 80124ac:	3532      	adds	r5, #50	; 0x32
 80124ae:	fba7 3505 	umull	r3, r5, r7, r5
 80124b2:	096d      	lsrs	r5, r5, #5
 80124b4:	006d      	lsls	r5, r5, #1
 80124b6:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80124ba:	4435      	add	r5, r6
 80124bc:	f7ff fc3a 	bl	8011d34 <HAL_RCC_GetPCLK1Freq>
 80124c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124c8:	6866      	ldr	r6, [r4, #4]
 80124ca:	0076      	lsls	r6, r6, #1
 80124cc:	fbb0 f6f6 	udiv	r6, r0, r6
 80124d0:	f7ff fc30 	bl	8011d34 <HAL_RCC_GetPCLK1Freq>
 80124d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124dc:	6863      	ldr	r3, [r4, #4]
 80124de:	005b      	lsls	r3, r3, #1
 80124e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80124e4:	fba7 2303 	umull	r2, r3, r7, r3
 80124e8:	095b      	lsrs	r3, r3, #5
 80124ea:	fb09 6913 	mls	r9, r9, r3, r6
 80124ee:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80124f2:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80124f6:	fba7 3709 	umull	r3, r7, r7, r9
 80124fa:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80124fe:	442f      	add	r7, r5
 8012500:	f8c8 7008 	str.w	r7, [r8, #8]
 8012504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8012508:	f7ff fc24 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 801250c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012510:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012514:	6865      	ldr	r5, [r4, #4]
 8012516:	006d      	lsls	r5, r5, #1
 8012518:	fbb0 f5f5 	udiv	r5, r0, r5
 801251c:	4f54      	ldr	r7, [pc, #336]	; (8012670 <UART_SetConfig+0x340>)
 801251e:	fba7 3505 	umull	r3, r5, r7, r5
 8012522:	096d      	lsrs	r5, r5, #5
 8012524:	012e      	lsls	r6, r5, #4
 8012526:	f7ff fc15 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 801252a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801252e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012532:	6865      	ldr	r5, [r4, #4]
 8012534:	006d      	lsls	r5, r5, #1
 8012536:	fbb0 faf5 	udiv	sl, r0, r5
 801253a:	f7ff fc0b 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 801253e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012542:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012546:	6865      	ldr	r5, [r4, #4]
 8012548:	006d      	lsls	r5, r5, #1
 801254a:	fbb0 f5f5 	udiv	r5, r0, r5
 801254e:	fba7 3505 	umull	r3, r5, r7, r5
 8012552:	096d      	lsrs	r5, r5, #5
 8012554:	f04f 0964 	mov.w	r9, #100	; 0x64
 8012558:	fb09 a515 	mls	r5, r9, r5, sl
 801255c:	00ed      	lsls	r5, r5, #3
 801255e:	3532      	adds	r5, #50	; 0x32
 8012560:	fba7 3505 	umull	r3, r5, r7, r5
 8012564:	096d      	lsrs	r5, r5, #5
 8012566:	006d      	lsls	r5, r5, #1
 8012568:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 801256c:	4435      	add	r5, r6
 801256e:	f7ff fbf1 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 8012572:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012576:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801257a:	6866      	ldr	r6, [r4, #4]
 801257c:	0076      	lsls	r6, r6, #1
 801257e:	fbb0 f6f6 	udiv	r6, r0, r6
 8012582:	f7ff fbe7 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 8012586:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801258a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801258e:	6863      	ldr	r3, [r4, #4]
 8012590:	005b      	lsls	r3, r3, #1
 8012592:	fbb0 f3f3 	udiv	r3, r0, r3
 8012596:	fba7 2303 	umull	r2, r3, r7, r3
 801259a:	095b      	lsrs	r3, r3, #5
 801259c:	fb09 6913 	mls	r9, r9, r3, r6
 80125a0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80125a4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80125a8:	fba7 3709 	umull	r3, r7, r7, r9
 80125ac:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80125b0:	442f      	add	r7, r5
 80125b2:	f8c8 7008 	str.w	r7, [r8, #8]
 80125b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80125ba:	f7ff fbcb 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 80125be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125c6:	6865      	ldr	r5, [r4, #4]
 80125c8:	00ad      	lsls	r5, r5, #2
 80125ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80125ce:	4f28      	ldr	r7, [pc, #160]	; (8012670 <UART_SetConfig+0x340>)
 80125d0:	fba7 3505 	umull	r3, r5, r7, r5
 80125d4:	096d      	lsrs	r5, r5, #5
 80125d6:	012e      	lsls	r6, r5, #4
 80125d8:	f7ff fbbc 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 80125dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125e4:	6865      	ldr	r5, [r4, #4]
 80125e6:	00ad      	lsls	r5, r5, #2
 80125e8:	fbb0 faf5 	udiv	sl, r0, r5
 80125ec:	f7ff fbb2 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 80125f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125f8:	6865      	ldr	r5, [r4, #4]
 80125fa:	00ad      	lsls	r5, r5, #2
 80125fc:	fbb0 f5f5 	udiv	r5, r0, r5
 8012600:	fba7 3505 	umull	r3, r5, r7, r5
 8012604:	096d      	lsrs	r5, r5, #5
 8012606:	f04f 0964 	mov.w	r9, #100	; 0x64
 801260a:	fb09 a515 	mls	r5, r9, r5, sl
 801260e:	012d      	lsls	r5, r5, #4
 8012610:	3532      	adds	r5, #50	; 0x32
 8012612:	fba7 3505 	umull	r3, r5, r7, r5
 8012616:	096d      	lsrs	r5, r5, #5
 8012618:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 801261c:	4435      	add	r5, r6
 801261e:	f7ff fb99 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 8012622:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012626:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801262a:	6866      	ldr	r6, [r4, #4]
 801262c:	00b6      	lsls	r6, r6, #2
 801262e:	fbb0 f6f6 	udiv	r6, r0, r6
 8012632:	f7ff fb8f 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 8012636:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801263a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801263e:	6863      	ldr	r3, [r4, #4]
 8012640:	009b      	lsls	r3, r3, #2
 8012642:	fbb0 f3f3 	udiv	r3, r0, r3
 8012646:	fba7 2303 	umull	r2, r3, r7, r3
 801264a:	095b      	lsrs	r3, r3, #5
 801264c:	fb09 6913 	mls	r9, r9, r3, r6
 8012650:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8012654:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8012658:	fba7 3709 	umull	r3, r7, r7, r9
 801265c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8012660:	442f      	add	r7, r5
 8012662:	f8c8 7008 	str.w	r7, [r8, #8]
 8012666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801266a:	bf00      	nop
 801266c:	40011000 	.word	0x40011000
 8012670:	51eb851f 	.word	0x51eb851f

08012674 <HAL_UART_Init>:
  if(huart == NULL)
 8012674:	b358      	cbz	r0, 80126ce <HAL_UART_Init+0x5a>
{
 8012676:	b510      	push	{r4, lr}
 8012678:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 801267a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801267e:	b30b      	cbz	r3, 80126c4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8012680:	2324      	movs	r3, #36	; 0x24
 8012682:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8012686:	6822      	ldr	r2, [r4, #0]
 8012688:	68d3      	ldr	r3, [r2, #12]
 801268a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801268e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8012690:	4620      	mov	r0, r4
 8012692:	f7ff fe4d 	bl	8012330 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012696:	6822      	ldr	r2, [r4, #0]
 8012698:	6913      	ldr	r3, [r2, #16]
 801269a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 801269e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80126a0:	6822      	ldr	r2, [r4, #0]
 80126a2:	6953      	ldr	r3, [r2, #20]
 80126a4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80126a8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80126aa:	6822      	ldr	r2, [r4, #0]
 80126ac:	68d3      	ldr	r3, [r2, #12]
 80126ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80126b2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126b4:	2000      	movs	r0, #0
 80126b6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80126b8:	2320      	movs	r3, #32
 80126ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80126be:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80126c2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80126c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80126c8:	f00d f9c4 	bl	801fa54 <HAL_UART_MspInit>
 80126cc:	e7d8      	b.n	8012680 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80126ce:	2001      	movs	r0, #1
 80126d0:	4770      	bx	lr

080126d2 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80126d2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80126d6:	b2db      	uxtb	r3, r3
 80126d8:	2b20      	cmp	r3, #32
 80126da:	d001      	beq.n	80126e0 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY; 
 80126dc:	2002      	movs	r0, #2
 80126de:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0)) 
 80126e0:	b1d1      	cbz	r1, 8012718 <HAL_UART_Receive_IT+0x46>
 80126e2:	b1da      	cbz	r2, 801271c <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 80126e4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	d019      	beq.n	8012720 <HAL_UART_Receive_IT+0x4e>
    huart->pRxBuffPtr = pData;
 80126ec:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80126ee:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 80126f0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126f2:	2300      	movs	r3, #0
 80126f4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80126f6:	2222      	movs	r2, #34	; 0x22
 80126f8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 80126fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012700:	6801      	ldr	r1, [r0, #0]
 8012702:	694a      	ldr	r2, [r1, #20]
 8012704:	f042 0201 	orr.w	r2, r2, #1
 8012708:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801270a:	6801      	ldr	r1, [r0, #0]
 801270c:	68ca      	ldr	r2, [r1, #12]
 801270e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8012712:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8012714:	4618      	mov	r0, r3
 8012716:	4770      	bx	lr
      return HAL_ERROR;
 8012718:	2001      	movs	r0, #1
 801271a:	4770      	bx	lr
 801271c:	2001      	movs	r0, #1
 801271e:	4770      	bx	lr
    __HAL_LOCK(huart);
 8012720:	2002      	movs	r0, #2
}
 8012722:	4770      	bx	lr

08012724 <HAL_UART_Transmit_DMA>:
{
 8012724:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8012726:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 801272a:	b2e4      	uxtb	r4, r4
 801272c:	2c20      	cmp	r4, #32
 801272e:	d001      	beq.n	8012734 <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 8012730:	2002      	movs	r0, #2
 8012732:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL ) || (Size == 0))
 8012734:	2900      	cmp	r1, #0
 8012736:	d031      	beq.n	801279c <HAL_UART_Transmit_DMA+0x78>
 8012738:	2a00      	cmp	r2, #0
 801273a:	d031      	beq.n	80127a0 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 801273c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8012740:	2b01      	cmp	r3, #1
 8012742:	d101      	bne.n	8012748 <HAL_UART_Transmit_DMA+0x24>
 8012744:	2002      	movs	r0, #2
}
 8012746:	bd38      	pop	{r3, r4, r5, pc}
 8012748:	4613      	mov	r3, r2
 801274a:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 801274c:	2201      	movs	r2, #1
 801274e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 8012752:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8012754:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8012756:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012758:	2500      	movs	r5, #0
 801275a:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801275c:	2221      	movs	r2, #33	; 0x21
 801275e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012762:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8012764:	480f      	ldr	r0, [pc, #60]	; (80127a4 <HAL_UART_Transmit_DMA+0x80>)
 8012766:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012768:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801276a:	480f      	ldr	r0, [pc, #60]	; (80127a8 <HAL_UART_Transmit_DMA+0x84>)
 801276c:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 801276e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012770:	480e      	ldr	r0, [pc, #56]	; (80127ac <HAL_UART_Transmit_DMA+0x88>)
 8012772:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8012774:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012776:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8012778:	6822      	ldr	r2, [r4, #0]
 801277a:	3204      	adds	r2, #4
 801277c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801277e:	f7fd ff7b 	bl	8010678 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8012782:	6823      	ldr	r3, [r4, #0]
 8012784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012788:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 801278a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801278e:	6822      	ldr	r2, [r4, #0]
 8012790:	6953      	ldr	r3, [r2, #20]
 8012792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012796:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8012798:	4628      	mov	r0, r5
 801279a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 801279c:	2001      	movs	r0, #1
 801279e:	bd38      	pop	{r3, r4, r5, pc}
 80127a0:	2001      	movs	r0, #1
 80127a2:	bd38      	pop	{r3, r4, r5, pc}
 80127a4:	080127b1 	.word	0x080127b1
 80127a8:	080127fd 	.word	0x080127fd
 80127ac:	0801289d 	.word	0x0801289d

080127b0 <UART_DMATransmitCplt>:
{
 80127b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80127b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80127b4:	6802      	ldr	r2, [r0, #0]
 80127b6:	6812      	ldr	r2, [r2, #0]
 80127b8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80127bc:	d10c      	bne.n	80127d8 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0U;
 80127be:	2200      	movs	r2, #0
 80127c0:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80127c2:	6819      	ldr	r1, [r3, #0]
 80127c4:	694a      	ldr	r2, [r1, #20]
 80127c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80127ca:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80127cc:	681a      	ldr	r2, [r3, #0]
 80127ce:	68d3      	ldr	r3, [r2, #12]
 80127d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127d4:	60d3      	str	r3, [r2, #12]
 80127d6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80127d8:	4618      	mov	r0, r3
 80127da:	f00b ffc9 	bl	801e770 <HAL_UART_TxCpltCallback>
 80127de:	bd08      	pop	{r3, pc}

080127e0 <UART_EndTransmit_IT>:
{
 80127e0:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80127e2:	6801      	ldr	r1, [r0, #0]
 80127e4:	68cb      	ldr	r3, [r1, #12]
 80127e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127ea:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80127ec:	2320      	movs	r3, #32
 80127ee:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80127f2:	f00b ffbd 	bl	801e770 <HAL_UART_TxCpltCallback>
}
 80127f6:	2000      	movs	r0, #0
 80127f8:	bd08      	pop	{r3, pc}

080127fa <HAL_UART_TxHalfCpltCallback>:
{
 80127fa:	4770      	bx	lr

080127fc <UART_DMATxHalfCplt>:
{
 80127fc:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80127fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012800:	f7ff fffb 	bl	80127fa <HAL_UART_TxHalfCpltCallback>
 8012804:	bd08      	pop	{r3, pc}

08012806 <UART_Receive_IT>:
{
 8012806:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8012808:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 801280c:	b2db      	uxtb	r3, r3
 801280e:	2b22      	cmp	r3, #34	; 0x22
 8012810:	d001      	beq.n	8012816 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 8012812:	2002      	movs	r0, #2
 8012814:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012816:	6883      	ldr	r3, [r0, #8]
 8012818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801281c:	d00f      	beq.n	801283e <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 801281e:	6903      	ldr	r3, [r0, #16]
 8012820:	bb0b      	cbnz	r3, 8012866 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012822:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012824:	1c5a      	adds	r2, r3, #1
 8012826:	6282      	str	r2, [r0, #40]	; 0x28
 8012828:	6802      	ldr	r2, [r0, #0]
 801282a:	6852      	ldr	r2, [r2, #4]
 801282c:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 801282e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8012830:	b29b      	uxth	r3, r3
 8012832:	3b01      	subs	r3, #1
 8012834:	b29b      	uxth	r3, r3
 8012836:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8012838:	b1f3      	cbz	r3, 8012878 <UART_Receive_IT+0x72>
    return HAL_OK;
 801283a:	2000      	movs	r0, #0
}
 801283c:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 801283e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8012840:	6903      	ldr	r3, [r0, #16]
 8012842:	b943      	cbnz	r3, 8012856 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012844:	6803      	ldr	r3, [r0, #0]
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801284c:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 801284e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012850:	3302      	adds	r3, #2
 8012852:	6283      	str	r3, [r0, #40]	; 0x28
 8012854:	e7eb      	b.n	801282e <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8012856:	6803      	ldr	r3, [r0, #0]
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	b2db      	uxtb	r3, r3
 801285c:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 801285e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012860:	3301      	adds	r3, #1
 8012862:	6283      	str	r3, [r0, #40]	; 0x28
 8012864:	e7e3      	b.n	801282e <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8012866:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8012868:	1c53      	adds	r3, r2, #1
 801286a:	6283      	str	r3, [r0, #40]	; 0x28
 801286c:	6803      	ldr	r3, [r0, #0]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012874:	7013      	strb	r3, [r2, #0]
 8012876:	e7da      	b.n	801282e <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012878:	6802      	ldr	r2, [r0, #0]
 801287a:	68d3      	ldr	r3, [r2, #12]
 801287c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012880:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012882:	6802      	ldr	r2, [r0, #0]
 8012884:	6953      	ldr	r3, [r2, #20]
 8012886:	f023 0301 	bic.w	r3, r3, #1
 801288a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 801288c:	2320      	movs	r3, #32
 801288e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8012892:	f00b ff4f 	bl	801e734 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8012896:	2000      	movs	r0, #0
 8012898:	bd08      	pop	{r3, pc}

0801289a <HAL_UART_ErrorCallback>:
{
 801289a:	4770      	bx	lr

0801289c <UART_DMAError>:
{
 801289c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801289e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80128a0:	6823      	ldr	r3, [r4, #0]
 80128a2:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80128a4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	2b21      	cmp	r3, #33	; 0x21
 80128ac:	d010      	beq.n	80128d0 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80128ae:	6823      	ldr	r3, [r4, #0]
 80128b0:	695a      	ldr	r2, [r3, #20]
 80128b2:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80128b6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80128ba:	b2db      	uxtb	r3, r3
 80128bc:	2b22      	cmp	r3, #34	; 0x22
 80128be:	d011      	beq.n	80128e4 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80128c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80128c2:	f043 0310 	orr.w	r3, r3, #16
 80128c6:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80128c8:	4620      	mov	r0, r4
 80128ca:	f7ff ffe6 	bl	801289a <HAL_UART_ErrorCallback>
 80128ce:	bd10      	pop	{r4, pc}
 80128d0:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80128d4:	2a00      	cmp	r2, #0
 80128d6:	d0ea      	beq.n	80128ae <UART_DMAError+0x12>
    huart->TxXferCount = 0U;
 80128d8:	2300      	movs	r3, #0
 80128da:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80128dc:	4620      	mov	r0, r4
 80128de:	f7ff fcdb 	bl	8012298 <UART_EndTxTransfer>
 80128e2:	e7e4      	b.n	80128ae <UART_DMAError+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80128e4:	2a00      	cmp	r2, #0
 80128e6:	d0eb      	beq.n	80128c0 <UART_DMAError+0x24>
    huart->RxXferCount = 0U;
 80128e8:	2300      	movs	r3, #0
 80128ea:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80128ec:	4620      	mov	r0, r4
 80128ee:	f7ff fcdc 	bl	80122aa <UART_EndRxTransfer>
 80128f2:	e7e5      	b.n	80128c0 <UART_DMAError+0x24>

080128f4 <HAL_UART_IRQHandler>:
{
 80128f4:	b510      	push	{r4, lr}
 80128f6:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80128f8:	6802      	ldr	r2, [r0, #0]
 80128fa:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80128fc:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80128fe:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8012900:	f013 000f 	ands.w	r0, r3, #15
 8012904:	d105      	bne.n	8012912 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012906:	f013 0f20 	tst.w	r3, #32
 801290a:	d002      	beq.n	8012912 <HAL_UART_IRQHandler+0x1e>
 801290c:	f011 0f20 	tst.w	r1, #32
 8012910:	d153      	bne.n	80129ba <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012912:	2800      	cmp	r0, #0
 8012914:	d067      	beq.n	80129e6 <HAL_UART_IRQHandler+0xf2>
 8012916:	f012 0201 	ands.w	r2, r2, #1
 801291a:	d102      	bne.n	8012922 <HAL_UART_IRQHandler+0x2e>
 801291c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8012920:	d061      	beq.n	80129e6 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012922:	f013 0f01 	tst.w	r3, #1
 8012926:	d006      	beq.n	8012936 <HAL_UART_IRQHandler+0x42>
 8012928:	f411 7f80 	tst.w	r1, #256	; 0x100
 801292c:	d003      	beq.n	8012936 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801292e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012930:	f040 0001 	orr.w	r0, r0, #1
 8012934:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012936:	f013 0f04 	tst.w	r3, #4
 801293a:	d004      	beq.n	8012946 <HAL_UART_IRQHandler+0x52>
 801293c:	b11a      	cbz	r2, 8012946 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801293e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012940:	f040 0002 	orr.w	r0, r0, #2
 8012944:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012946:	f013 0f02 	tst.w	r3, #2
 801294a:	d004      	beq.n	8012956 <HAL_UART_IRQHandler+0x62>
 801294c:	b11a      	cbz	r2, 8012956 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801294e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012950:	f040 0004 	orr.w	r0, r0, #4
 8012954:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012956:	f013 0f08 	tst.w	r3, #8
 801295a:	d004      	beq.n	8012966 <HAL_UART_IRQHandler+0x72>
 801295c:	b11a      	cbz	r2, 8012966 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801295e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012960:	f042 0208 	orr.w	r2, r2, #8
 8012964:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012966:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012968:	2a00      	cmp	r2, #0
 801296a:	d048      	beq.n	80129fe <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801296c:	f013 0f20 	tst.w	r3, #32
 8012970:	d002      	beq.n	8012978 <HAL_UART_IRQHandler+0x84>
 8012972:	f011 0f20 	tst.w	r1, #32
 8012976:	d124      	bne.n	80129c2 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012978:	6823      	ldr	r3, [r4, #0]
 801297a:	695b      	ldr	r3, [r3, #20]
 801297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012980:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012982:	f012 0f08 	tst.w	r2, #8
 8012986:	d100      	bne.n	801298a <HAL_UART_IRQHandler+0x96>
 8012988:	b33b      	cbz	r3, 80129da <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 801298a:	4620      	mov	r0, r4
 801298c:	f7ff fc8d 	bl	80122aa <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012990:	6823      	ldr	r3, [r4, #0]
 8012992:	695a      	ldr	r2, [r3, #20]
 8012994:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012998:	d01b      	beq.n	80129d2 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801299a:	695a      	ldr	r2, [r3, #20]
 801299c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80129a0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80129a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129a4:	b18b      	cbz	r3, 80129ca <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80129a6:	4a1a      	ldr	r2, [pc, #104]	; (8012a10 <HAL_UART_IRQHandler+0x11c>)
 80129a8:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80129aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80129ac:	f7fd fe9e 	bl	80106ec <HAL_DMA_Abort_IT>
 80129b0:	b328      	cbz	r0, 80129fe <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80129b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80129b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80129b6:	4798      	blx	r3
 80129b8:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 80129ba:	4620      	mov	r0, r4
 80129bc:	f7ff ff23 	bl	8012806 <UART_Receive_IT>
      return;
 80129c0:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 80129c2:	4620      	mov	r0, r4
 80129c4:	f7ff ff1f 	bl	8012806 <UART_Receive_IT>
 80129c8:	e7d6      	b.n	8012978 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 80129ca:	4620      	mov	r0, r4
 80129cc:	f7ff ff65 	bl	801289a <HAL_UART_ErrorCallback>
 80129d0:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 80129d2:	4620      	mov	r0, r4
 80129d4:	f7ff ff61 	bl	801289a <HAL_UART_ErrorCallback>
 80129d8:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 80129da:	4620      	mov	r0, r4
 80129dc:	f7ff ff5d 	bl	801289a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129e0:	2300      	movs	r3, #0
 80129e2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80129e4:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80129e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80129ea:	d002      	beq.n	80129f2 <HAL_UART_IRQHandler+0xfe>
 80129ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80129f0:	d106      	bne.n	8012a00 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80129f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80129f6:	d002      	beq.n	80129fe <HAL_UART_IRQHandler+0x10a>
 80129f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80129fc:	d104      	bne.n	8012a08 <HAL_UART_IRQHandler+0x114>
 80129fe:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8012a00:	4620      	mov	r0, r4
 8012a02:	f7ff fc60 	bl	80122c6 <UART_Transmit_IT>
    return;
 8012a06:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f7ff fee9 	bl	80127e0 <UART_EndTransmit_IT>
    return;
 8012a0e:	e7f6      	b.n	80129fe <HAL_UART_IRQHandler+0x10a>
 8012a10:	08012a15 	.word	0x08012a15

08012a14 <UART_DMAAbortOnError>:
{
 8012a14:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012a16:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8012a1c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8012a1e:	f7ff ff3c 	bl	801289a <HAL_UART_ErrorCallback>
 8012a22:	bd08      	pop	{r3, pc}

08012a24 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8012a24:	2884      	cmp	r0, #132	; 0x84
 8012a26:	d001      	beq.n	8012a2c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8012a28:	3003      	adds	r0, #3
 8012a2a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012a2c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8012a2e:	4770      	bx	lr

08012a30 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a30:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8012a34:	3000      	adds	r0, #0
 8012a36:	bf18      	it	ne
 8012a38:	2001      	movne	r0, #1
 8012a3a:	4770      	bx	lr

08012a3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012a3c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8012a3e:	f001 fb79 	bl	8014134 <vTaskStartScheduler>
  
  return osOK;
}
 8012a42:	2000      	movs	r0, #0
 8012a44:	bd08      	pop	{r3, pc}

08012a46 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012a46:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8012a48:	f7ff fff2 	bl	8012a30 <inHandlerMode>
 8012a4c:	b910      	cbnz	r0, 8012a54 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8012a4e:	f001 fbb7 	bl	80141c0 <xTaskGetTickCount>
  }
}
 8012a52:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 8012a54:	f001 fbba 	bl	80141cc <xTaskGetTickCountFromISR>
 8012a58:	bd08      	pop	{r3, pc}

08012a5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012a5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a5e:	b087      	sub	sp, #28
 8012a60:	4604      	mov	r4, r0
 8012a62:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012a64:	6945      	ldr	r5, [r0, #20]
 8012a66:	b1bd      	cbz	r5, 8012a98 <osThreadCreate+0x3e>
 8012a68:	6986      	ldr	r6, [r0, #24]
 8012a6a:	b1ae      	cbz	r6, 8012a98 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a6c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012a70:	f8d0 9000 	ldr.w	r9, [r0]
 8012a74:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8012a78:	f7ff ffd4 	bl	8012a24 <makeFreeRtosPriority>
 8012a7c:	6922      	ldr	r2, [r4, #16]
 8012a7e:	9602      	str	r6, [sp, #8]
 8012a80:	9501      	str	r5, [sp, #4]
 8012a82:	9000      	str	r0, [sp, #0]
 8012a84:	463b      	mov	r3, r7
 8012a86:	4649      	mov	r1, r9
 8012a88:	4640      	mov	r0, r8
 8012a8a:	f001 faf5 	bl	8014078 <xTaskCreateStatic>
 8012a8e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012a90:	9805      	ldr	r0, [sp, #20]
}
 8012a92:	b007      	add	sp, #28
 8012a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a98:	6865      	ldr	r5, [r4, #4]
 8012a9a:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012a9c:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012aa0:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8012aa4:	f7ff ffbe 	bl	8012a24 <makeFreeRtosPriority>
 8012aa8:	ab05      	add	r3, sp, #20
 8012aaa:	9301      	str	r3, [sp, #4]
 8012aac:	9000      	str	r0, [sp, #0]
 8012aae:	463b      	mov	r3, r7
 8012ab0:	fa1f f288 	uxth.w	r2, r8
 8012ab4:	4631      	mov	r1, r6
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	f001 fb09 	bl	80140ce <xTaskCreate>
 8012abc:	2801      	cmp	r0, #1
 8012abe:	d0e7      	beq.n	8012a90 <osThreadCreate+0x36>
      return NULL;
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	e7e6      	b.n	8012a92 <osThreadCreate+0x38>

08012ac4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012ac4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	b900      	cbnz	r0, 8012acc <osDelay+0x8>
 8012aca:	2301      	movs	r3, #1
 8012acc:	4618      	mov	r0, r3
 8012ace:	f001 fc93 	bl	80143f8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012ad2:	2000      	movs	r0, #0
 8012ad4:	bd08      	pop	{r3, pc}

08012ad6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012ad6:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012ad8:	6841      	ldr	r1, [r0, #4]
 8012ada:	b119      	cbz	r1, 8012ae4 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012adc:	2001      	movs	r0, #1
 8012ade:	f000 ff04 	bl	80138ea <xQueueCreateMutexStatic>
 8012ae2:	bd08      	pop	{r3, pc}
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012ae4:	2001      	movs	r0, #1
 8012ae6:	f000 fef5 	bl	80138d4 <xQueueCreateMutex>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012aea:	bd08      	pop	{r3, pc}

08012aec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8012aec:	b530      	push	{r4, r5, lr}
 8012aee:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012af0:	2300      	movs	r3, #0
 8012af2:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8012af4:	b360      	cbz	r0, 8012b50 <osMutexWait+0x64>
 8012af6:	460c      	mov	r4, r1
 8012af8:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012afa:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012afe:	d00d      	beq.n	8012b1c <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012b00:	b901      	cbnz	r1, 8012b04 <osMutexWait+0x18>
  ticks = 0;
 8012b02:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012b04:	f7ff ff94 	bl	8012a30 <inHandlerMode>
 8012b08:	b1b8      	cbz	r0, 8012b3a <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012b0a:	aa01      	add	r2, sp, #4
 8012b0c:	2100      	movs	r1, #0
 8012b0e:	4628      	mov	r0, r5
 8012b10:	f001 f8a0 	bl	8013c54 <xQueueReceiveFromISR>
 8012b14:	2801      	cmp	r0, #1
 8012b16:	d004      	beq.n	8012b22 <osMutexWait+0x36>
      return osErrorOS;
 8012b18:	20ff      	movs	r0, #255	; 0xff
 8012b1a:	e017      	b.n	8012b4c <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 8012b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8012b20:	e7f0      	b.n	8012b04 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012b22:	9b01      	ldr	r3, [sp, #4]
 8012b24:	b1b3      	cbz	r3, 8012b54 <osMutexWait+0x68>
 8012b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b2a:	4b0c      	ldr	r3, [pc, #48]	; (8012b5c <osMutexWait+0x70>)
 8012b2c:	601a      	str	r2, [r3, #0]
 8012b2e:	f3bf 8f4f 	dsb	sy
 8012b32:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8012b36:	2000      	movs	r0, #0
 8012b38:	e008      	b.n	8012b4c <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	4622      	mov	r2, r4
 8012b3e:	4619      	mov	r1, r3
 8012b40:	4628      	mov	r0, r5
 8012b42:	f000 ffaf 	bl	8013aa4 <xQueueGenericReceive>
 8012b46:	2801      	cmp	r0, #1
 8012b48:	d006      	beq.n	8012b58 <osMutexWait+0x6c>
    return osErrorOS;
 8012b4a:	20ff      	movs	r0, #255	; 0xff
}
 8012b4c:	b003      	add	sp, #12
 8012b4e:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8012b50:	2080      	movs	r0, #128	; 0x80
 8012b52:	e7fb      	b.n	8012b4c <osMutexWait+0x60>
  return osOK;
 8012b54:	2000      	movs	r0, #0
 8012b56:	e7f9      	b.n	8012b4c <osMutexWait+0x60>
 8012b58:	2000      	movs	r0, #0
 8012b5a:	e7f7      	b.n	8012b4c <osMutexWait+0x60>
 8012b5c:	e000ed04 	.word	0xe000ed04

08012b60 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8012b60:	b510      	push	{r4, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8012b66:	2300      	movs	r3, #0
 8012b68:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8012b6a:	f7ff ff61 	bl	8012a30 <inHandlerMode>
 8012b6e:	b1a0      	cbz	r0, 8012b9a <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012b70:	a901      	add	r1, sp, #4
 8012b72:	4620      	mov	r0, r4
 8012b74:	f000 ff37 	bl	80139e6 <xQueueGiveFromISR>
 8012b78:	2801      	cmp	r0, #1
 8012b7a:	d002      	beq.n	8012b82 <osMutexRelease+0x22>
      return osErrorOS;
 8012b7c:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8012b7e:	b002      	add	sp, #8
 8012b80:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012b82:	9b01      	ldr	r3, [sp, #4]
 8012b84:	b1ab      	cbz	r3, 8012bb2 <osMutexRelease+0x52>
 8012b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b8a:	4b0b      	ldr	r3, [pc, #44]	; (8012bb8 <osMutexRelease+0x58>)
 8012b8c:	601a      	str	r2, [r3, #0]
 8012b8e:	f3bf 8f4f 	dsb	sy
 8012b92:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8012b96:	2000      	movs	r0, #0
 8012b98:	e7f1      	b.n	8012b7e <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	4619      	mov	r1, r3
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f000 fdc7 	bl	8013734 <xQueueGenericSend>
 8012ba6:	2801      	cmp	r0, #1
 8012ba8:	d001      	beq.n	8012bae <osMutexRelease+0x4e>
    result = osErrorOS;
 8012baa:	20ff      	movs	r0, #255	; 0xff
 8012bac:	e7e7      	b.n	8012b7e <osMutexRelease+0x1e>
  osStatus result = osOK;
 8012bae:	2000      	movs	r0, #0
 8012bb0:	e7e5      	b.n	8012b7e <osMutexRelease+0x1e>
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	e7e3      	b.n	8012b7e <osMutexRelease+0x1e>
 8012bb6:	bf00      	nop
 8012bb8:	e000ed04 	.word	0xe000ed04

08012bbc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012bbc:	b510      	push	{r4, lr}
 8012bbe:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012bc0:	6843      	ldr	r3, [r0, #4]
 8012bc2:	b163      	cbz	r3, 8012bde <osSemaphoreCreate+0x22>
    if (count == 1) {
 8012bc4:	2901      	cmp	r1, #1
 8012bc6:	d11a      	bne.n	8012bfe <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012bc8:	2203      	movs	r2, #3
 8012bca:	9200      	str	r2, [sp, #0]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	4611      	mov	r1, r2
 8012bd0:	2001      	movs	r0, #1
 8012bd2:	f000 fd38 	bl	8013646 <xQueueGenericCreateStatic>
 8012bd6:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8012bd8:	4620      	mov	r0, r4
 8012bda:	b002      	add	sp, #8
 8012bdc:	bd10      	pop	{r4, pc}
    if (count == 1) {
 8012bde:	2901      	cmp	r1, #1
 8012be0:	d10f      	bne.n	8012c02 <osSemaphoreCreate+0x46>
      vSemaphoreCreateBinary(sema);
 8012be2:	2203      	movs	r2, #3
 8012be4:	2100      	movs	r1, #0
 8012be6:	2001      	movs	r0, #1
 8012be8:	f000 fd7d 	bl	80136e6 <xQueueGenericCreate>
 8012bec:	4604      	mov	r4, r0
 8012bee:	2800      	cmp	r0, #0
 8012bf0:	d0f2      	beq.n	8012bd8 <osSemaphoreCreate+0x1c>
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	f000 fd9c 	bl	8013734 <xQueueGenericSend>
 8012bfc:	e7ec      	b.n	8012bd8 <osSemaphoreCreate+0x1c>
      return NULL;
 8012bfe:	2400      	movs	r4, #0
 8012c00:	e7ea      	b.n	8012bd8 <osSemaphoreCreate+0x1c>
      return NULL;
 8012c02:	2400      	movs	r4, #0
 8012c04:	e7e8      	b.n	8012bd8 <osSemaphoreCreate+0x1c>
	...

08012c08 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012c08:	b530      	push	{r4, r5, lr}
 8012c0a:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8012c10:	b360      	cbz	r0, 8012c6c <osSemaphoreWait+0x64>
 8012c12:	460c      	mov	r4, r1
 8012c14:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012c16:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012c1a:	d00d      	beq.n	8012c38 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012c1c:	b901      	cbnz	r1, 8012c20 <osSemaphoreWait+0x18>
  ticks = 0;
 8012c1e:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012c20:	f7ff ff06 	bl	8012a30 <inHandlerMode>
 8012c24:	b1b8      	cbz	r0, 8012c56 <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012c26:	aa01      	add	r2, sp, #4
 8012c28:	2100      	movs	r1, #0
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	f001 f812 	bl	8013c54 <xQueueReceiveFromISR>
 8012c30:	2801      	cmp	r0, #1
 8012c32:	d004      	beq.n	8012c3e <osSemaphoreWait+0x36>
      return osErrorOS;
 8012c34:	20ff      	movs	r0, #255	; 0xff
 8012c36:	e017      	b.n	8012c68 <osSemaphoreWait+0x60>
    ticks = portMAX_DELAY;
 8012c38:	f04f 34ff 	mov.w	r4, #4294967295
 8012c3c:	e7f0      	b.n	8012c20 <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012c3e:	9b01      	ldr	r3, [sp, #4]
 8012c40:	b1b3      	cbz	r3, 8012c70 <osSemaphoreWait+0x68>
 8012c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c46:	4b0c      	ldr	r3, [pc, #48]	; (8012c78 <osSemaphoreWait+0x70>)
 8012c48:	601a      	str	r2, [r3, #0]
 8012c4a:	f3bf 8f4f 	dsb	sy
 8012c4e:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8012c52:	2000      	movs	r0, #0
 8012c54:	e008      	b.n	8012c68 <osSemaphoreWait+0x60>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012c56:	2300      	movs	r3, #0
 8012c58:	4622      	mov	r2, r4
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	f000 ff21 	bl	8013aa4 <xQueueGenericReceive>
 8012c62:	2801      	cmp	r0, #1
 8012c64:	d006      	beq.n	8012c74 <osSemaphoreWait+0x6c>
    return osErrorOS;
 8012c66:	20ff      	movs	r0, #255	; 0xff
}
 8012c68:	b003      	add	sp, #12
 8012c6a:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8012c6c:	2080      	movs	r0, #128	; 0x80
 8012c6e:	e7fb      	b.n	8012c68 <osSemaphoreWait+0x60>
  return osOK;
 8012c70:	2000      	movs	r0, #0
 8012c72:	e7f9      	b.n	8012c68 <osSemaphoreWait+0x60>
 8012c74:	2000      	movs	r0, #0
 8012c76:	e7f7      	b.n	8012c68 <osSemaphoreWait+0x60>
 8012c78:	e000ed04 	.word	0xe000ed04

08012c7c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012c7c:	b510      	push	{r4, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8012c82:	2300      	movs	r3, #0
 8012c84:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8012c86:	f7ff fed3 	bl	8012a30 <inHandlerMode>
 8012c8a:	b1a0      	cbz	r0, 8012cb6 <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012c8c:	a901      	add	r1, sp, #4
 8012c8e:	4620      	mov	r0, r4
 8012c90:	f000 fea9 	bl	80139e6 <xQueueGiveFromISR>
 8012c94:	2801      	cmp	r0, #1
 8012c96:	d002      	beq.n	8012c9e <osSemaphoreRelease+0x22>
      return osErrorOS;
 8012c98:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8012c9a:	b002      	add	sp, #8
 8012c9c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012c9e:	9b01      	ldr	r3, [sp, #4]
 8012ca0:	b1ab      	cbz	r3, 8012cce <osSemaphoreRelease+0x52>
 8012ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ca6:	4b0b      	ldr	r3, [pc, #44]	; (8012cd4 <osSemaphoreRelease+0x58>)
 8012ca8:	601a      	str	r2, [r3, #0]
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8012cb2:	2000      	movs	r0, #0
 8012cb4:	e7f1      	b.n	8012c9a <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	461a      	mov	r2, r3
 8012cba:	4619      	mov	r1, r3
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	f000 fd39 	bl	8013734 <xQueueGenericSend>
 8012cc2:	2801      	cmp	r0, #1
 8012cc4:	d001      	beq.n	8012cca <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8012cc6:	20ff      	movs	r0, #255	; 0xff
 8012cc8:	e7e7      	b.n	8012c9a <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8012cca:	2000      	movs	r0, #0
 8012ccc:	e7e5      	b.n	8012c9a <osSemaphoreRelease+0x1e>
 8012cce:	2000      	movs	r0, #0
 8012cd0:	e7e3      	b.n	8012c9a <osSemaphoreRelease+0x1e>
 8012cd2:	bf00      	nop
 8012cd4:	e000ed04 	.word	0xe000ed04

08012cd8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012cd8:	b510      	push	{r4, lr}
 8012cda:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012cdc:	f7ff fea8 	bl	8012a30 <inHandlerMode>
 8012ce0:	b108      	cbz	r0, 8012ce6 <osSemaphoreDelete+0xe>
    return osErrorISR;
 8012ce2:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 8012ce4:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f001 f858 	bl	8013d9c <vQueueDelete>
  return osOK; 
 8012cec:	2000      	movs	r0, #0
 8012cee:	bd10      	pop	{r4, pc}

08012cf0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012cf0:	b510      	push	{r4, lr}
 8012cf2:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012cf4:	6882      	ldr	r2, [r0, #8]
 8012cf6:	b14a      	cbz	r2, 8012d0c <osMessageCreate+0x1c>
 8012cf8:	68c3      	ldr	r3, [r0, #12]
 8012cfa:	b13b      	cbz	r3, 8012d0c <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012cfc:	6841      	ldr	r1, [r0, #4]
 8012cfe:	6800      	ldr	r0, [r0, #0]
 8012d00:	2400      	movs	r4, #0
 8012d02:	9400      	str	r4, [sp, #0]
 8012d04:	f000 fc9f 	bl	8013646 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012d08:	b002      	add	sp, #8
 8012d0a:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	6841      	ldr	r1, [r0, #4]
 8012d10:	6800      	ldr	r0, [r0, #0]
 8012d12:	f000 fce8 	bl	80136e6 <xQueueGenericCreate>
 8012d16:	e7f7      	b.n	8012d08 <osMessageCreate+0x18>

08012d18 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012d18:	b530      	push	{r4, r5, lr}
 8012d1a:	b085      	sub	sp, #20
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012d20:	2300      	movs	r3, #0
 8012d22:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8012d24:	4615      	mov	r5, r2
 8012d26:	b902      	cbnz	r2, 8012d2a <osMessagePut+0x12>
    ticks = 1;
 8012d28:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8012d2a:	f7ff fe81 	bl	8012a30 <inHandlerMode>
 8012d2e:	b1a8      	cbz	r0, 8012d5c <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012d30:	2300      	movs	r3, #0
 8012d32:	aa03      	add	r2, sp, #12
 8012d34:	a901      	add	r1, sp, #4
 8012d36:	4620      	mov	r0, r4
 8012d38:	f000 fde6 	bl	8013908 <xQueueGenericSendFromISR>
 8012d3c:	2801      	cmp	r0, #1
 8012d3e:	d001      	beq.n	8012d44 <osMessagePut+0x2c>
      return osErrorOS;
 8012d40:	20ff      	movs	r0, #255	; 0xff
 8012d42:	e014      	b.n	8012d6e <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012d44:	9b03      	ldr	r3, [sp, #12]
 8012d46:	b1a3      	cbz	r3, 8012d72 <osMessagePut+0x5a>
 8012d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d4c:	4b0b      	ldr	r3, [pc, #44]	; (8012d7c <osMessagePut+0x64>)
 8012d4e:	601a      	str	r2, [r3, #0]
 8012d50:	f3bf 8f4f 	dsb	sy
 8012d54:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8012d58:	2000      	movs	r0, #0
 8012d5a:	e008      	b.n	8012d6e <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	462a      	mov	r2, r5
 8012d60:	a901      	add	r1, sp, #4
 8012d62:	4620      	mov	r0, r4
 8012d64:	f000 fce6 	bl	8013734 <xQueueGenericSend>
 8012d68:	2801      	cmp	r0, #1
 8012d6a:	d004      	beq.n	8012d76 <osMessagePut+0x5e>
      return osErrorOS;
 8012d6c:	20ff      	movs	r0, #255	; 0xff
}
 8012d6e:	b005      	add	sp, #20
 8012d70:	bd30      	pop	{r4, r5, pc}
  return osOK;
 8012d72:	2000      	movs	r0, #0
 8012d74:	e7fb      	b.n	8012d6e <osMessagePut+0x56>
 8012d76:	2000      	movs	r0, #0
 8012d78:	e7f9      	b.n	8012d6e <osMessagePut+0x56>
 8012d7a:	bf00      	nop
 8012d7c:	e000ed04 	.word	0xe000ed04

08012d80 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012d80:	b570      	push	{r4, r5, r6, lr}
 8012d82:	b084      	sub	sp, #16
 8012d84:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012d86:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8012d8c:	b1f9      	cbz	r1, 8012dce <osMessageGet+0x4e>
 8012d8e:	460d      	mov	r5, r1
 8012d90:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8012d92:	2300      	movs	r3, #0
 8012d94:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012d96:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012d9a:	d021      	beq.n	8012de0 <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012d9c:	b902      	cbnz	r2, 8012da0 <osMessageGet+0x20>
  ticks = 0;
 8012d9e:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012da0:	f7ff fe46 	bl	8012a30 <inHandlerMode>
 8012da4:	b310      	cbz	r0, 8012dec <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012da6:	aa03      	add	r2, sp, #12
 8012da8:	a901      	add	r1, sp, #4
 8012daa:	4628      	mov	r0, r5
 8012dac:	f000 ff52 	bl	8013c54 <xQueueReceiveFromISR>
 8012db0:	2801      	cmp	r0, #1
 8012db2:	d018      	beq.n	8012de6 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8012db4:	2300      	movs	r3, #0
 8012db6:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012db8:	9b03      	ldr	r3, [sp, #12]
 8012dba:	b313      	cbz	r3, 8012e02 <osMessageGet+0x82>
 8012dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dc0:	4b16      	ldr	r3, [pc, #88]	; (8012e1c <osMessageGet+0x9c>)
 8012dc2:	601a      	str	r2, [r3, #0]
 8012dc4:	f3bf 8f4f 	dsb	sy
 8012dc8:	f3bf 8f6f 	isb	sy
 8012dcc:	e019      	b.n	8012e02 <osMessageGet+0x82>
    event.status = osErrorParameter;
 8012dce:	ab04      	add	r3, sp, #16
 8012dd0:	2280      	movs	r2, #128	; 0x80
 8012dd2:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8012dd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012dde:	e014      	b.n	8012e0a <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 8012de0:	f04f 36ff 	mov.w	r6, #4294967295
 8012de4:	e7dc      	b.n	8012da0 <osMessageGet+0x20>
      event.status = osEventMessage;
 8012de6:	2310      	movs	r3, #16
 8012de8:	9300      	str	r3, [sp, #0]
 8012dea:	e7e5      	b.n	8012db8 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012dec:	2300      	movs	r3, #0
 8012dee:	4632      	mov	r2, r6
 8012df0:	a901      	add	r1, sp, #4
 8012df2:	4628      	mov	r0, r5
 8012df4:	f000 fe56 	bl	8013aa4 <xQueueGenericReceive>
 8012df8:	2801      	cmp	r0, #1
 8012dfa:	d009      	beq.n	8012e10 <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012dfc:	b95e      	cbnz	r6, 8012e16 <osMessageGet+0x96>
 8012dfe:	2300      	movs	r3, #0
 8012e00:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8012e02:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 8012e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	b004      	add	sp, #16
 8012e0e:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8012e10:	2310      	movs	r3, #16
 8012e12:	9300      	str	r3, [sp, #0]
 8012e14:	e7f5      	b.n	8012e02 <osMessageGet+0x82>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012e16:	2340      	movs	r3, #64	; 0x40
 8012e18:	e7f2      	b.n	8012e00 <osMessageGet+0x80>
 8012e1a:	bf00      	nop
 8012e1c:	e000ed04 	.word	0xe000ed04

08012e20 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8012e20:	b510      	push	{r4, lr}
 8012e22:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012e24:	f7ff fe04 	bl	8012a30 <inHandlerMode>
 8012e28:	b918      	cbnz	r0, 8012e32 <osMessageWaiting+0x12>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f000 ff6d 	bl	8013d0a <uxQueueMessagesWaiting>
  }
}
 8012e30:	bd10      	pop	{r4, pc}
    return uxQueueMessagesWaitingFromISR(queue_id);
 8012e32:	4620      	mov	r0, r4
 8012e34:	f000 ff7c 	bl	8013d30 <uxQueueMessagesWaitingFromISR>
 8012e38:	bd10      	pop	{r4, pc}

08012e3a <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8012e3a:	b510      	push	{r4, lr}
 8012e3c:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012e3e:	f7ff fdf7 	bl	8012a30 <inHandlerMode>
 8012e42:	b108      	cbz	r0, 8012e48 <osMessageDelete+0xe>
    return osErrorISR;
 8012e44:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 8012e46:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f000 ffa7 	bl	8013d9c <vQueueDelete>
  return osOK; 
 8012e4e:	2000      	movs	r0, #0
 8012e50:	bd10      	pop	{r4, pc}

08012e52 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e52:	f100 0308 	add.w	r3, r0, #8
 8012e56:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012e58:	f04f 32ff 	mov.w	r2, #4294967295
 8012e5c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e5e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e60:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012e62:	2300      	movs	r3, #0
 8012e64:	6003      	str	r3, [r0, #0]
 8012e66:	4770      	bx	lr

08012e68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	6103      	str	r3, [r0, #16]
 8012e6c:	4770      	bx	lr

08012e6e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8012e6e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012e70:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012e72:	689a      	ldr	r2, [r3, #8]
 8012e74:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012e76:	689a      	ldr	r2, [r3, #8]
 8012e78:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012e7a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012e7c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8012e7e:	6803      	ldr	r3, [r0, #0]
 8012e80:	3301      	adds	r3, #1
 8012e82:	6003      	str	r3, [r0, #0]
 8012e84:	4770      	bx	lr

08012e86 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012e86:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012e88:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012e8a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012e8e:	d002      	beq.n	8012e96 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e90:	f100 0208 	add.w	r2, r0, #8
 8012e94:	e002      	b.n	8012e9c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8012e96:	6902      	ldr	r2, [r0, #16]
 8012e98:	e004      	b.n	8012ea4 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	6853      	ldr	r3, [r2, #4]
 8012e9e:	681c      	ldr	r4, [r3, #0]
 8012ea0:	42a5      	cmp	r5, r4
 8012ea2:	d2fa      	bcs.n	8012e9a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012ea4:	6853      	ldr	r3, [r2, #4]
 8012ea6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012ea8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012eaa:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8012eac:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012eae:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8012eb0:	6803      	ldr	r3, [r0, #0]
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	6003      	str	r3, [r0, #0]
}
 8012eb6:	bc30      	pop	{r4, r5}
 8012eb8:	4770      	bx	lr

08012eba <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8012eba:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012ebc:	6842      	ldr	r2, [r0, #4]
 8012ebe:	6881      	ldr	r1, [r0, #8]
 8012ec0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012ec2:	6882      	ldr	r2, [r0, #8]
 8012ec4:	6841      	ldr	r1, [r0, #4]
 8012ec6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012ec8:	685a      	ldr	r2, [r3, #4]
 8012eca:	4290      	cmp	r0, r2
 8012ecc:	d005      	beq.n	8012eda <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8012ece:	2200      	movs	r2, #0
 8012ed0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8012ed2:	6818      	ldr	r0, [r3, #0]
 8012ed4:	3801      	subs	r0, #1
 8012ed6:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8012ed8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012eda:	6882      	ldr	r2, [r0, #8]
 8012edc:	605a      	str	r2, [r3, #4]
 8012ede:	e7f6      	b.n	8012ece <uxListRemove+0x14>

08012ee0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012ee0:	4b0b      	ldr	r3, [pc, #44]	; (8012f10 <prvTaskExitError+0x30>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee8:	d008      	beq.n	8012efc <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eee:	f383 8811 	msr	BASEPRI, r3
 8012ef2:	f3bf 8f6f 	isb	sy
 8012ef6:	f3bf 8f4f 	dsb	sy
 8012efa:	e7fe      	b.n	8012efa <prvTaskExitError+0x1a>
 8012efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f00:	f383 8811 	msr	BASEPRI, r3
 8012f04:	f3bf 8f6f 	isb	sy
 8012f08:	f3bf 8f4f 	dsb	sy
 8012f0c:	e7fe      	b.n	8012f0c <prvTaskExitError+0x2c>
 8012f0e:	bf00      	nop
 8012f10:	20000004 	.word	0x20000004

08012f14 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8012f14:	4806      	ldr	r0, [pc, #24]	; (8012f30 <prvPortStartFirstTask+0x1c>)
 8012f16:	6800      	ldr	r0, [r0, #0]
 8012f18:	6800      	ldr	r0, [r0, #0]
 8012f1a:	f380 8808 	msr	MSP, r0
 8012f1e:	b662      	cpsie	i
 8012f20:	b661      	cpsie	f
 8012f22:	f3bf 8f4f 	dsb	sy
 8012f26:	f3bf 8f6f 	isb	sy
 8012f2a:	df00      	svc	0
 8012f2c:	bf00      	nop
 8012f2e:	0000      	.short	0x0000
 8012f30:	e000ed08 	.word	0xe000ed08

08012f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012f44 <vPortEnableVFP+0x10>
 8012f38:	6801      	ldr	r1, [r0, #0]
 8012f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012f3e:	6001      	str	r1, [r0, #0]
 8012f40:	4770      	bx	lr
 8012f42:	0000      	.short	0x0000
 8012f44:	e000ed88 	.word	0xe000ed88

08012f48 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012f4c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012f50:	f021 0101 	bic.w	r1, r1, #1
 8012f54:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012f58:	4b05      	ldr	r3, [pc, #20]	; (8012f70 <pxPortInitialiseStack+0x28>)
 8012f5a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012f5e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8012f62:	f06f 0302 	mvn.w	r3, #2
 8012f66:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8012f6a:	3844      	subs	r0, #68	; 0x44
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	08012ee1 	.word	0x08012ee1
	...

08012f80 <SVC_Handler>:
	__asm volatile (
 8012f80:	4b07      	ldr	r3, [pc, #28]	; (8012fa0 <pxCurrentTCBConst2>)
 8012f82:	6819      	ldr	r1, [r3, #0]
 8012f84:	6808      	ldr	r0, [r1, #0]
 8012f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f8a:	f380 8809 	msr	PSP, r0
 8012f8e:	f3bf 8f6f 	isb	sy
 8012f92:	f04f 0000 	mov.w	r0, #0
 8012f96:	f380 8811 	msr	BASEPRI, r0
 8012f9a:	4770      	bx	lr
 8012f9c:	f3af 8000 	nop.w

08012fa0 <pxCurrentTCBConst2>:
 8012fa0:	2000924c 	.word	0x2000924c

08012fa4 <vPortEnterCritical>:
 8012fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa8:	f383 8811 	msr	BASEPRI, r3
 8012fac:	f3bf 8f6f 	isb	sy
 8012fb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8012fb4:	4a0a      	ldr	r2, [pc, #40]	; (8012fe0 <vPortEnterCritical+0x3c>)
 8012fb6:	6813      	ldr	r3, [r2, #0]
 8012fb8:	3301      	adds	r3, #1
 8012fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d10d      	bne.n	8012fdc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012fc0:	4b08      	ldr	r3, [pc, #32]	; (8012fe4 <vPortEnterCritical+0x40>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012fc8:	d008      	beq.n	8012fdc <vPortEnterCritical+0x38>
 8012fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fce:	f383 8811 	msr	BASEPRI, r3
 8012fd2:	f3bf 8f6f 	isb	sy
 8012fd6:	f3bf 8f4f 	dsb	sy
 8012fda:	e7fe      	b.n	8012fda <vPortEnterCritical+0x36>
 8012fdc:	4770      	bx	lr
 8012fde:	bf00      	nop
 8012fe0:	20000004 	.word	0x20000004
 8012fe4:	e000ed04 	.word	0xe000ed04

08012fe8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8012fe8:	4b09      	ldr	r3, [pc, #36]	; (8013010 <vPortExitCritical+0x28>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	b943      	cbnz	r3, 8013000 <vPortExitCritical+0x18>
 8012fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff2:	f383 8811 	msr	BASEPRI, r3
 8012ff6:	f3bf 8f6f 	isb	sy
 8012ffa:	f3bf 8f4f 	dsb	sy
 8012ffe:	e7fe      	b.n	8012ffe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8013000:	3b01      	subs	r3, #1
 8013002:	4a03      	ldr	r2, [pc, #12]	; (8013010 <vPortExitCritical+0x28>)
 8013004:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013006:	b90b      	cbnz	r3, 801300c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013008:	f383 8811 	msr	BASEPRI, r3
 801300c:	4770      	bx	lr
 801300e:	bf00      	nop
 8013010:	20000004 	.word	0x20000004
	...

08013020 <PendSV_Handler>:
	__asm volatile
 8013020:	f3ef 8009 	mrs	r0, PSP
 8013024:	f3bf 8f6f 	isb	sy
 8013028:	4b15      	ldr	r3, [pc, #84]	; (8013080 <pxCurrentTCBConst>)
 801302a:	681a      	ldr	r2, [r3, #0]
 801302c:	f01e 0f10 	tst.w	lr, #16
 8013030:	bf08      	it	eq
 8013032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801303a:	6010      	str	r0, [r2, #0]
 801303c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8013040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013044:	f380 8811 	msr	BASEPRI, r0
 8013048:	f3bf 8f4f 	dsb	sy
 801304c:	f3bf 8f6f 	isb	sy
 8013050:	f001 fa3c 	bl	80144cc <vTaskSwitchContext>
 8013054:	f04f 0000 	mov.w	r0, #0
 8013058:	f380 8811 	msr	BASEPRI, r0
 801305c:	bc08      	pop	{r3}
 801305e:	6819      	ldr	r1, [r3, #0]
 8013060:	6808      	ldr	r0, [r1, #0]
 8013062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013066:	f01e 0f10 	tst.w	lr, #16
 801306a:	bf08      	it	eq
 801306c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013070:	f380 8809 	msr	PSP, r0
 8013074:	f3bf 8f6f 	isb	sy
 8013078:	4770      	bx	lr
 801307a:	bf00      	nop
 801307c:	f3af 8000 	nop.w

08013080 <pxCurrentTCBConst>:
 8013080:	2000924c 	.word	0x2000924c

08013084 <SysTick_Handler>:
{
 8013084:	b508      	push	{r3, lr}
	__asm volatile
 8013086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801308a:	f383 8811 	msr	BASEPRI, r3
 801308e:	f3bf 8f6f 	isb	sy
 8013092:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8013096:	f001 f8a1 	bl	80141dc <xTaskIncrementTick>
 801309a:	b118      	cbz	r0, 80130a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801309c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130a0:	4b02      	ldr	r3, [pc, #8]	; (80130ac <SysTick_Handler+0x28>)
 80130a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80130a4:	2300      	movs	r3, #0
 80130a6:	f383 8811 	msr	BASEPRI, r3
 80130aa:	bd08      	pop	{r3, pc}
 80130ac:	e000ed04 	.word	0xe000ed04

080130b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80130b0:	4b06      	ldr	r3, [pc, #24]	; (80130cc <vPortSetupTimerInterrupt+0x1c>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	4a06      	ldr	r2, [pc, #24]	; (80130d0 <vPortSetupTimerInterrupt+0x20>)
 80130b6:	fba2 2303 	umull	r2, r3, r2, r3
 80130ba:	099b      	lsrs	r3, r3, #6
 80130bc:	3b01      	subs	r3, #1
 80130be:	4a05      	ldr	r2, [pc, #20]	; (80130d4 <vPortSetupTimerInterrupt+0x24>)
 80130c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80130c2:	2207      	movs	r2, #7
 80130c4:	4b04      	ldr	r3, [pc, #16]	; (80130d8 <vPortSetupTimerInterrupt+0x28>)
 80130c6:	601a      	str	r2, [r3, #0]
 80130c8:	4770      	bx	lr
 80130ca:	bf00      	nop
 80130cc:	2000003c 	.word	0x2000003c
 80130d0:	10624dd3 	.word	0x10624dd3
 80130d4:	e000e014 	.word	0xe000e014
 80130d8:	e000e010 	.word	0xe000e010

080130dc <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80130dc:	4b31      	ldr	r3, [pc, #196]	; (80131a4 <xPortStartScheduler+0xc8>)
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	4b31      	ldr	r3, [pc, #196]	; (80131a8 <xPortStartScheduler+0xcc>)
 80130e2:	429a      	cmp	r2, r3
 80130e4:	d01a      	beq.n	801311c <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80130e6:	4b2f      	ldr	r3, [pc, #188]	; (80131a4 <xPortStartScheduler+0xc8>)
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	4b30      	ldr	r3, [pc, #192]	; (80131ac <xPortStartScheduler+0xd0>)
 80130ec:	429a      	cmp	r2, r3
 80130ee:	d01e      	beq.n	801312e <xPortStartScheduler+0x52>
{
 80130f0:	b500      	push	{lr}
 80130f2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80130f4:	4b2e      	ldr	r3, [pc, #184]	; (80131b0 <xPortStartScheduler+0xd4>)
 80130f6:	781a      	ldrb	r2, [r3, #0]
 80130f8:	b2d2      	uxtb	r2, r2
 80130fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80130fc:	22ff      	movs	r2, #255	; 0xff
 80130fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013100:	781b      	ldrb	r3, [r3, #0]
 8013102:	b2db      	uxtb	r3, r3
 8013104:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013108:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801310c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013110:	4a28      	ldr	r2, [pc, #160]	; (80131b4 <xPortStartScheduler+0xd8>)
 8013112:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013114:	2207      	movs	r2, #7
 8013116:	4b28      	ldr	r3, [pc, #160]	; (80131b8 <xPortStartScheduler+0xdc>)
 8013118:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801311a:	e01b      	b.n	8013154 <xPortStartScheduler+0x78>
	__asm volatile
 801311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013120:	f383 8811 	msr	BASEPRI, r3
 8013124:	f3bf 8f6f 	isb	sy
 8013128:	f3bf 8f4f 	dsb	sy
 801312c:	e7fe      	b.n	801312c <xPortStartScheduler+0x50>
 801312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013132:	f383 8811 	msr	BASEPRI, r3
 8013136:	f3bf 8f6f 	isb	sy
 801313a:	f3bf 8f4f 	dsb	sy
 801313e:	e7fe      	b.n	801313e <xPortStartScheduler+0x62>
			ulMaxPRIGROUPValue--;
 8013140:	4a1d      	ldr	r2, [pc, #116]	; (80131b8 <xPortStartScheduler+0xdc>)
 8013142:	6813      	ldr	r3, [r2, #0]
 8013144:	3b01      	subs	r3, #1
 8013146:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013148:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801314c:	005b      	lsls	r3, r3, #1
 801314e:	b2db      	uxtb	r3, r3
 8013150:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013154:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013158:	f013 0f80 	tst.w	r3, #128	; 0x80
 801315c:	d1f0      	bne.n	8013140 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801315e:	4a16      	ldr	r2, [pc, #88]	; (80131b8 <xPortStartScheduler+0xdc>)
 8013160:	6813      	ldr	r3, [r2, #0]
 8013162:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013164:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013168:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801316a:	9b01      	ldr	r3, [sp, #4]
 801316c:	b2db      	uxtb	r3, r3
 801316e:	4a10      	ldr	r2, [pc, #64]	; (80131b0 <xPortStartScheduler+0xd4>)
 8013170:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013172:	4b12      	ldr	r3, [pc, #72]	; (80131bc <xPortStartScheduler+0xe0>)
 8013174:	681a      	ldr	r2, [r3, #0]
 8013176:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 801317a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801317c:	681a      	ldr	r2, [r3, #0]
 801317e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8013182:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8013184:	f7ff ff94 	bl	80130b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8013188:	2200      	movs	r2, #0
 801318a:	4b0d      	ldr	r3, [pc, #52]	; (80131c0 <xPortStartScheduler+0xe4>)
 801318c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 801318e:	f7ff fed1 	bl	8012f34 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013192:	4a0c      	ldr	r2, [pc, #48]	; (80131c4 <xPortStartScheduler+0xe8>)
 8013194:	6813      	ldr	r3, [r2, #0]
 8013196:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801319a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 801319c:	f7ff feba 	bl	8012f14 <prvPortStartFirstTask>
	prvTaskExitError();
 80131a0:	f7ff fe9e 	bl	8012ee0 <prvTaskExitError>
 80131a4:	e000ed00 	.word	0xe000ed00
 80131a8:	410fc271 	.word	0x410fc271
 80131ac:	410fc270 	.word	0x410fc270
 80131b0:	e000e400 	.word	0xe000e400
 80131b4:	2000022c 	.word	0x2000022c
 80131b8:	20000230 	.word	0x20000230
 80131bc:	e000ed20 	.word	0xe000ed20
 80131c0:	20000004 	.word	0x20000004
 80131c4:	e000ef34 	.word	0xe000ef34

080131c8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80131c8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80131cc:	2b0f      	cmp	r3, #15
 80131ce:	d90f      	bls.n	80131f0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80131d0:	4a10      	ldr	r2, [pc, #64]	; (8013214 <vPortValidateInterruptPriority+0x4c>)
 80131d2:	5c9b      	ldrb	r3, [r3, r2]
 80131d4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80131d6:	4a10      	ldr	r2, [pc, #64]	; (8013218 <vPortValidateInterruptPriority+0x50>)
 80131d8:	7812      	ldrb	r2, [r2, #0]
 80131da:	4293      	cmp	r3, r2
 80131dc:	d208      	bcs.n	80131f0 <vPortValidateInterruptPriority+0x28>
 80131de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e2:	f383 8811 	msr	BASEPRI, r3
 80131e6:	f3bf 8f6f 	isb	sy
 80131ea:	f3bf 8f4f 	dsb	sy
 80131ee:	e7fe      	b.n	80131ee <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80131f0:	4b0a      	ldr	r3, [pc, #40]	; (801321c <vPortValidateInterruptPriority+0x54>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80131f8:	4a09      	ldr	r2, [pc, #36]	; (8013220 <vPortValidateInterruptPriority+0x58>)
 80131fa:	6812      	ldr	r2, [r2, #0]
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d908      	bls.n	8013212 <vPortValidateInterruptPriority+0x4a>
 8013200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013204:	f383 8811 	msr	BASEPRI, r3
 8013208:	f3bf 8f6f 	isb	sy
 801320c:	f3bf 8f4f 	dsb	sy
 8013210:	e7fe      	b.n	8013210 <vPortValidateInterruptPriority+0x48>
 8013212:	4770      	bx	lr
 8013214:	e000e3f0 	.word	0xe000e3f0
 8013218:	2000022c 	.word	0x2000022c
 801321c:	e000ed0c 	.word	0xe000ed0c
 8013220:	20000230 	.word	0x20000230

08013224 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013224:	4a12      	ldr	r2, [pc, #72]	; (8013270 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013226:	f012 0f07 	tst.w	r2, #7
 801322a:	d01e      	beq.n	801326a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801322c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801322e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013232:	f5c1 4310 	rsb	r3, r1, #36864	; 0x9000
 8013236:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013238:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801323a:	480e      	ldr	r0, [pc, #56]	; (8013274 <prvHeapInit+0x50>)
 801323c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801323e:	2100      	movs	r1, #0
 8013240:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013242:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8013244:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013246:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801324a:	480b      	ldr	r0, [pc, #44]	; (8013278 <prvHeapInit+0x54>)
 801324c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801324e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013250:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013252:	1a99      	subs	r1, r3, r2
 8013254:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013256:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013258:	4b08      	ldr	r3, [pc, #32]	; (801327c <prvHeapInit+0x58>)
 801325a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801325c:	4b08      	ldr	r3, [pc, #32]	; (8013280 <prvHeapInit+0x5c>)
 801325e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013260:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013264:	4b07      	ldr	r3, [pc, #28]	; (8013284 <prvHeapInit+0x60>)
 8013266:	601a      	str	r2, [r3, #0]
 8013268:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801326a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 801326e:	e7e4      	b.n	801323a <prvHeapInit+0x16>
 8013270:	20000238 	.word	0x20000238
 8013274:	20009244 	.word	0x20009244
 8013278:	20000234 	.word	0x20000234
 801327c:	20009240 	.word	0x20009240
 8013280:	2000923c 	.word	0x2000923c
 8013284:	20009238 	.word	0x20009238

08013288 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013288:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801328a:	4b13      	ldr	r3, [pc, #76]	; (80132d8 <prvInsertBlockIntoFreeList+0x50>)
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	4282      	cmp	r2, r0
 8013290:	d31b      	bcc.n	80132ca <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013292:	6859      	ldr	r1, [r3, #4]
 8013294:	185c      	adds	r4, r3, r1
 8013296:	42a0      	cmp	r0, r4
 8013298:	d103      	bne.n	80132a2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801329a:	6840      	ldr	r0, [r0, #4]
 801329c:	4401      	add	r1, r0
 801329e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80132a0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80132a2:	6841      	ldr	r1, [r0, #4]
 80132a4:	1844      	adds	r4, r0, r1
 80132a6:	42a2      	cmp	r2, r4
 80132a8:	d113      	bne.n	80132d2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80132aa:	4c0c      	ldr	r4, [pc, #48]	; (80132dc <prvInsertBlockIntoFreeList+0x54>)
 80132ac:	6824      	ldr	r4, [r4, #0]
 80132ae:	42a2      	cmp	r2, r4
 80132b0:	d00d      	beq.n	80132ce <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80132b2:	6852      	ldr	r2, [r2, #4]
 80132b4:	4411      	add	r1, r2
 80132b6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80132b8:	681a      	ldr	r2, [r3, #0]
 80132ba:	6812      	ldr	r2, [r2, #0]
 80132bc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80132be:	4298      	cmp	r0, r3
 80132c0:	d000      	beq.n	80132c4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80132c2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80132c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132c8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80132ca:	4613      	mov	r3, r2
 80132cc:	e7de      	b.n	801328c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80132ce:	6004      	str	r4, [r0, #0]
 80132d0:	e7f5      	b.n	80132be <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80132d2:	6002      	str	r2, [r0, #0]
 80132d4:	e7f3      	b.n	80132be <prvInsertBlockIntoFreeList+0x36>
 80132d6:	bf00      	nop
 80132d8:	20009244 	.word	0x20009244
 80132dc:	20000234 	.word	0x20000234

080132e0 <pvPortMalloc>:
{
 80132e0:	b570      	push	{r4, r5, r6, lr}
 80132e2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80132e4:	f000 ff64 	bl	80141b0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80132e8:	4b3a      	ldr	r3, [pc, #232]	; (80133d4 <pvPortMalloc+0xf4>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	b1bb      	cbz	r3, 801331e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80132ee:	4b3a      	ldr	r3, [pc, #232]	; (80133d8 <pvPortMalloc+0xf8>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	421c      	tst	r4, r3
 80132f4:	d163      	bne.n	80133be <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 80132f6:	b1ac      	cbz	r4, 8013324 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 80132f8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80132fa:	f014 0f07 	tst.w	r4, #7
 80132fe:	d011      	beq.n	8013324 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013300:	f024 0407 	bic.w	r4, r4, #7
 8013304:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013306:	f004 0307 	and.w	r3, r4, #7
 801330a:	b15b      	cbz	r3, 8013324 <pvPortMalloc+0x44>
 801330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013310:	f383 8811 	msr	BASEPRI, r3
 8013314:	f3bf 8f6f 	isb	sy
 8013318:	f3bf 8f4f 	dsb	sy
 801331c:	e7fe      	b.n	801331c <pvPortMalloc+0x3c>
			prvHeapInit();
 801331e:	f7ff ff81 	bl	8013224 <prvHeapInit>
 8013322:	e7e4      	b.n	80132ee <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013324:	2c00      	cmp	r4, #0
 8013326:	d04c      	beq.n	80133c2 <pvPortMalloc+0xe2>
 8013328:	4b2c      	ldr	r3, [pc, #176]	; (80133dc <pvPortMalloc+0xfc>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	429c      	cmp	r4, r3
 801332e:	d84a      	bhi.n	80133c6 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8013330:	4b2b      	ldr	r3, [pc, #172]	; (80133e0 <pvPortMalloc+0x100>)
 8013332:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013334:	e001      	b.n	801333a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8013336:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8013338:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801333a:	686a      	ldr	r2, [r5, #4]
 801333c:	4294      	cmp	r4, r2
 801333e:	d902      	bls.n	8013346 <pvPortMalloc+0x66>
 8013340:	682a      	ldr	r2, [r5, #0]
 8013342:	2a00      	cmp	r2, #0
 8013344:	d1f7      	bne.n	8013336 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8013346:	4a23      	ldr	r2, [pc, #140]	; (80133d4 <pvPortMalloc+0xf4>)
 8013348:	6812      	ldr	r2, [r2, #0]
 801334a:	4295      	cmp	r5, r2
 801334c:	d03d      	beq.n	80133ca <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801334e:	681e      	ldr	r6, [r3, #0]
 8013350:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013352:	682a      	ldr	r2, [r5, #0]
 8013354:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013356:	686b      	ldr	r3, [r5, #4]
 8013358:	1b1b      	subs	r3, r3, r4
 801335a:	2b10      	cmp	r3, #16
 801335c:	d910      	bls.n	8013380 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801335e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013360:	f010 0f07 	tst.w	r0, #7
 8013364:	d008      	beq.n	8013378 <pvPortMalloc+0x98>
 8013366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801336a:	f383 8811 	msr	BASEPRI, r3
 801336e:	f3bf 8f6f 	isb	sy
 8013372:	f3bf 8f4f 	dsb	sy
 8013376:	e7fe      	b.n	8013376 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013378:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801337a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801337c:	f7ff ff84 	bl	8013288 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013380:	686a      	ldr	r2, [r5, #4]
 8013382:	4916      	ldr	r1, [pc, #88]	; (80133dc <pvPortMalloc+0xfc>)
 8013384:	680b      	ldr	r3, [r1, #0]
 8013386:	1a9b      	subs	r3, r3, r2
 8013388:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801338a:	4916      	ldr	r1, [pc, #88]	; (80133e4 <pvPortMalloc+0x104>)
 801338c:	6809      	ldr	r1, [r1, #0]
 801338e:	428b      	cmp	r3, r1
 8013390:	d201      	bcs.n	8013396 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013392:	4914      	ldr	r1, [pc, #80]	; (80133e4 <pvPortMalloc+0x104>)
 8013394:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013396:	4b10      	ldr	r3, [pc, #64]	; (80133d8 <pvPortMalloc+0xf8>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	4313      	orrs	r3, r2
 801339c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801339e:	2300      	movs	r3, #0
 80133a0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80133a2:	f000 ffab 	bl	80142fc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80133a6:	f016 0f07 	tst.w	r6, #7
 80133aa:	d010      	beq.n	80133ce <pvPortMalloc+0xee>
 80133ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b0:	f383 8811 	msr	BASEPRI, r3
 80133b4:	f3bf 8f6f 	isb	sy
 80133b8:	f3bf 8f4f 	dsb	sy
 80133bc:	e7fe      	b.n	80133bc <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 80133be:	2600      	movs	r6, #0
 80133c0:	e7ef      	b.n	80133a2 <pvPortMalloc+0xc2>
 80133c2:	2600      	movs	r6, #0
 80133c4:	e7ed      	b.n	80133a2 <pvPortMalloc+0xc2>
 80133c6:	2600      	movs	r6, #0
 80133c8:	e7eb      	b.n	80133a2 <pvPortMalloc+0xc2>
 80133ca:	2600      	movs	r6, #0
 80133cc:	e7e9      	b.n	80133a2 <pvPortMalloc+0xc2>
}
 80133ce:	4630      	mov	r0, r6
 80133d0:	bd70      	pop	{r4, r5, r6, pc}
 80133d2:	bf00      	nop
 80133d4:	20000234 	.word	0x20000234
 80133d8:	20009238 	.word	0x20009238
 80133dc:	2000923c 	.word	0x2000923c
 80133e0:	20009244 	.word	0x20009244
 80133e4:	20009240 	.word	0x20009240

080133e8 <vPortFree>:
	if( pv != NULL )
 80133e8:	b380      	cbz	r0, 801344c <vPortFree+0x64>
{
 80133ea:	b538      	push	{r3, r4, r5, lr}
 80133ec:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80133ee:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80133f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80133f6:	4916      	ldr	r1, [pc, #88]	; (8013450 <vPortFree+0x68>)
 80133f8:	6809      	ldr	r1, [r1, #0]
 80133fa:	420a      	tst	r2, r1
 80133fc:	d108      	bne.n	8013410 <vPortFree+0x28>
 80133fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013402:	f383 8811 	msr	BASEPRI, r3
 8013406:	f3bf 8f6f 	isb	sy
 801340a:	f3bf 8f4f 	dsb	sy
 801340e:	e7fe      	b.n	801340e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013410:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8013414:	b140      	cbz	r0, 8013428 <vPortFree+0x40>
 8013416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801341a:	f383 8811 	msr	BASEPRI, r3
 801341e:	f3bf 8f6f 	isb	sy
 8013422:	f3bf 8f4f 	dsb	sy
 8013426:	e7fe      	b.n	8013426 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013428:	ea22 0201 	bic.w	r2, r2, r1
 801342c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8013430:	f000 febe 	bl	80141b0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013434:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8013438:	4a06      	ldr	r2, [pc, #24]	; (8013454 <vPortFree+0x6c>)
 801343a:	6813      	ldr	r3, [r2, #0]
 801343c:	440b      	add	r3, r1
 801343e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013440:	4628      	mov	r0, r5
 8013442:	f7ff ff21 	bl	8013288 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8013446:	f000 ff59 	bl	80142fc <xTaskResumeAll>
 801344a:	bd38      	pop	{r3, r4, r5, pc}
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	20009238 	.word	0x20009238
 8013454:	2000923c 	.word	0x2000923c

08013458 <xPortGetMinimumEverFreeHeapSize>:
}
 8013458:	4b01      	ldr	r3, [pc, #4]	; (8013460 <xPortGetMinimumEverFreeHeapSize+0x8>)
 801345a:	6818      	ldr	r0, [r3, #0]
 801345c:	4770      	bx	lr
 801345e:	bf00      	nop
 8013460:	20009240 	.word	0x20009240

08013464 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013464:	b510      	push	{r4, lr}
 8013466:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013468:	f7ff fd9c 	bl	8012fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801346c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801346e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013470:	429a      	cmp	r2, r3
 8013472:	d004      	beq.n	801347e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8013474:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8013476:	f7ff fdb7 	bl	8012fe8 <vPortExitCritical>

	return xReturn;
}
 801347a:	4620      	mov	r0, r4
 801347c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 801347e:	2401      	movs	r4, #1
 8013480:	e7f9      	b.n	8013476 <prvIsQueueFull+0x12>

08013482 <prvIsQueueEmpty>:
{
 8013482:	b510      	push	{r4, lr}
 8013484:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8013486:	f7ff fd8d 	bl	8012fa4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801348a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801348c:	b123      	cbz	r3, 8013498 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 801348e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8013490:	f7ff fdaa 	bl	8012fe8 <vPortExitCritical>
}
 8013494:	4620      	mov	r0, r4
 8013496:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8013498:	2401      	movs	r4, #1
 801349a:	e7f9      	b.n	8013490 <prvIsQueueEmpty+0xe>

0801349c <prvCopyDataToQueue>:
{
 801349c:	b570      	push	{r4, r5, r6, lr}
 801349e:	4604      	mov	r4, r0
 80134a0:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134a2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80134a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80134a6:	b94a      	cbnz	r2, 80134bc <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134a8:	6803      	ldr	r3, [r0, #0]
 80134aa:	bb53      	cbnz	r3, 8013502 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80134ac:	6840      	ldr	r0, [r0, #4]
 80134ae:	f001 f985 	bl	80147bc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80134b2:	2300      	movs	r3, #0
 80134b4:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80134b6:	3501      	adds	r5, #1
 80134b8:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80134ba:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80134bc:	b96e      	cbnz	r6, 80134da <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80134be:	6880      	ldr	r0, [r0, #8]
 80134c0:	f00c fd7b 	bl	801ffba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80134c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80134c6:	68a3      	ldr	r3, [r4, #8]
 80134c8:	4413      	add	r3, r2
 80134ca:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80134cc:	6862      	ldr	r2, [r4, #4]
 80134ce:	4293      	cmp	r3, r2
 80134d0:	d319      	bcc.n	8013506 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80134d2:	6823      	ldr	r3, [r4, #0]
 80134d4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80134d6:	2000      	movs	r0, #0
 80134d8:	e7ed      	b.n	80134b6 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134da:	68c0      	ldr	r0, [r0, #12]
 80134dc:	f00c fd6d 	bl	801ffba <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80134e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80134e2:	425b      	negs	r3, r3
 80134e4:	68e2      	ldr	r2, [r4, #12]
 80134e6:	441a      	add	r2, r3
 80134e8:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80134ea:	6821      	ldr	r1, [r4, #0]
 80134ec:	428a      	cmp	r2, r1
 80134ee:	d202      	bcs.n	80134f6 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80134f0:	6862      	ldr	r2, [r4, #4]
 80134f2:	4413      	add	r3, r2
 80134f4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80134f6:	2e02      	cmp	r6, #2
 80134f8:	d107      	bne.n	801350a <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80134fa:	b145      	cbz	r5, 801350e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80134fc:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80134fe:	2000      	movs	r0, #0
 8013500:	e7d9      	b.n	80134b6 <prvCopyDataToQueue+0x1a>
 8013502:	2000      	movs	r0, #0
 8013504:	e7d7      	b.n	80134b6 <prvCopyDataToQueue+0x1a>
 8013506:	2000      	movs	r0, #0
 8013508:	e7d5      	b.n	80134b6 <prvCopyDataToQueue+0x1a>
 801350a:	2000      	movs	r0, #0
 801350c:	e7d3      	b.n	80134b6 <prvCopyDataToQueue+0x1a>
 801350e:	2000      	movs	r0, #0
 8013510:	e7d1      	b.n	80134b6 <prvCopyDataToQueue+0x1a>

08013512 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013512:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013514:	b172      	cbz	r2, 8013534 <prvCopyDataFromQueue+0x22>
{
 8013516:	b510      	push	{r4, lr}
 8013518:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801351a:	68c4      	ldr	r4, [r0, #12]
 801351c:	4414      	add	r4, r2
 801351e:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013520:	6840      	ldr	r0, [r0, #4]
 8013522:	4284      	cmp	r4, r0
 8013524:	d301      	bcc.n	801352a <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8013526:	6818      	ldr	r0, [r3, #0]
 8013528:	60d8      	str	r0, [r3, #12]
 801352a:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801352c:	68d9      	ldr	r1, [r3, #12]
 801352e:	f00c fd44 	bl	801ffba <memcpy>
 8013532:	bd10      	pop	{r4, pc}
 8013534:	4770      	bx	lr

08013536 <prvUnlockQueue>:
{
 8013536:	b538      	push	{r3, r4, r5, lr}
 8013538:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 801353a:	f7ff fd33 	bl	8012fa4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801353e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8013542:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013544:	e001      	b.n	801354a <prvUnlockQueue+0x14>
			--cTxLock;
 8013546:	3c01      	subs	r4, #1
 8013548:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801354a:	2c00      	cmp	r4, #0
 801354c:	dd0a      	ble.n	8013564 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801354e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013550:	b143      	cbz	r3, 8013564 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013552:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8013556:	f001 f82d 	bl	80145b4 <xTaskRemoveFromEventList>
 801355a:	2800      	cmp	r0, #0
 801355c:	d0f3      	beq.n	8013546 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 801355e:	f001 f8c5 	bl	80146ec <vTaskMissedYield>
 8013562:	e7f0      	b.n	8013546 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8013564:	23ff      	movs	r3, #255	; 0xff
 8013566:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 801356a:	f7ff fd3d 	bl	8012fe8 <vPortExitCritical>
	taskENTER_CRITICAL();
 801356e:	f7ff fd19 	bl	8012fa4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8013572:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8013576:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013578:	e001      	b.n	801357e <prvUnlockQueue+0x48>
				--cRxLock;
 801357a:	3c01      	subs	r4, #1
 801357c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801357e:	2c00      	cmp	r4, #0
 8013580:	dd0a      	ble.n	8013598 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013582:	692b      	ldr	r3, [r5, #16]
 8013584:	b143      	cbz	r3, 8013598 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013586:	f105 0010 	add.w	r0, r5, #16
 801358a:	f001 f813 	bl	80145b4 <xTaskRemoveFromEventList>
 801358e:	2800      	cmp	r0, #0
 8013590:	d0f3      	beq.n	801357a <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8013592:	f001 f8ab 	bl	80146ec <vTaskMissedYield>
 8013596:	e7f0      	b.n	801357a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8013598:	23ff      	movs	r3, #255	; 0xff
 801359a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 801359e:	f7ff fd23 	bl	8012fe8 <vPortExitCritical>
 80135a2:	bd38      	pop	{r3, r4, r5, pc}

080135a4 <xQueueGenericReset>:
{
 80135a4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80135a6:	b330      	cbz	r0, 80135f6 <xQueueGenericReset+0x52>
 80135a8:	4604      	mov	r4, r0
 80135aa:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80135ac:	f7ff fcfa 	bl	8012fa4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80135b0:	6821      	ldr	r1, [r4, #0]
 80135b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80135b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80135b6:	fb03 1002 	mla	r0, r3, r2, r1
 80135ba:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80135bc:	2000      	movs	r0, #0
 80135be:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80135c0:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80135c2:	3a01      	subs	r2, #1
 80135c4:	fb02 1303 	mla	r3, r2, r3, r1
 80135c8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80135ca:	23ff      	movs	r3, #255	; 0xff
 80135cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80135d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80135d4:	b9c5      	cbnz	r5, 8013608 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135d6:	6923      	ldr	r3, [r4, #16]
 80135d8:	b1f3      	cbz	r3, 8013618 <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135da:	f104 0010 	add.w	r0, r4, #16
 80135de:	f000 ffe9 	bl	80145b4 <xTaskRemoveFromEventList>
 80135e2:	b1c8      	cbz	r0, 8013618 <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 80135e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135e8:	4b0d      	ldr	r3, [pc, #52]	; (8013620 <xQueueGenericReset+0x7c>)
 80135ea:	601a      	str	r2, [r3, #0]
 80135ec:	f3bf 8f4f 	dsb	sy
 80135f0:	f3bf 8f6f 	isb	sy
 80135f4:	e010      	b.n	8013618 <xQueueGenericReset+0x74>
 80135f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135fa:	f383 8811 	msr	BASEPRI, r3
 80135fe:	f3bf 8f6f 	isb	sy
 8013602:	f3bf 8f4f 	dsb	sy
 8013606:	e7fe      	b.n	8013606 <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013608:	f104 0010 	add.w	r0, r4, #16
 801360c:	f7ff fc21 	bl	8012e52 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013610:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013614:	f7ff fc1d 	bl	8012e52 <vListInitialise>
	taskEXIT_CRITICAL();
 8013618:	f7ff fce6 	bl	8012fe8 <vPortExitCritical>
}
 801361c:	2001      	movs	r0, #1
 801361e:	bd38      	pop	{r3, r4, r5, pc}
 8013620:	e000ed04 	.word	0xe000ed04

08013624 <prvInitialiseNewQueue>:
{
 8013624:	b538      	push	{r3, r4, r5, lr}
 8013626:	461d      	mov	r5, r3
 8013628:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 801362a:	460b      	mov	r3, r1
 801362c:	b149      	cbz	r1, 8013642 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801362e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8013630:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013632:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013634:	2101      	movs	r1, #1
 8013636:	4620      	mov	r0, r4
 8013638:	f7ff ffb4 	bl	80135a4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801363c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8013640:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013642:	6024      	str	r4, [r4, #0]
 8013644:	e7f4      	b.n	8013630 <prvInitialiseNewQueue+0xc>

08013646 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013646:	b940      	cbnz	r0, 801365a <xQueueGenericCreateStatic+0x14>
 8013648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801364c:	f383 8811 	msr	BASEPRI, r3
 8013650:	f3bf 8f6f 	isb	sy
 8013654:	f3bf 8f4f 	dsb	sy
 8013658:	e7fe      	b.n	8013658 <xQueueGenericCreateStatic+0x12>
	{
 801365a:	b510      	push	{r4, lr}
 801365c:	b084      	sub	sp, #16
 801365e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8013660:	b163      	cbz	r3, 801367c <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013662:	b1a2      	cbz	r2, 801368e <xQueueGenericCreateStatic+0x48>
 8013664:	b1a9      	cbz	r1, 8013692 <xQueueGenericCreateStatic+0x4c>
 8013666:	2001      	movs	r0, #1
 8013668:	b9a8      	cbnz	r0, 8013696 <xQueueGenericCreateStatic+0x50>
 801366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366e:	f383 8811 	msr	BASEPRI, r3
 8013672:	f3bf 8f6f 	isb	sy
 8013676:	f3bf 8f4f 	dsb	sy
 801367a:	e7fe      	b.n	801367a <xQueueGenericCreateStatic+0x34>
 801367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013680:	f383 8811 	msr	BASEPRI, r3
 8013684:	f3bf 8f6f 	isb	sy
 8013688:	f3bf 8f4f 	dsb	sy
 801368c:	e7fe      	b.n	801368c <xQueueGenericCreateStatic+0x46>
 801368e:	2001      	movs	r0, #1
 8013690:	e7ea      	b.n	8013668 <xQueueGenericCreateStatic+0x22>
 8013692:	2000      	movs	r0, #0
 8013694:	e7e8      	b.n	8013668 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013696:	b90a      	cbnz	r2, 801369c <xQueueGenericCreateStatic+0x56>
 8013698:	b101      	cbz	r1, 801369c <xQueueGenericCreateStatic+0x56>
 801369a:	2000      	movs	r0, #0
 801369c:	b940      	cbnz	r0, 80136b0 <xQueueGenericCreateStatic+0x6a>
 801369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a2:	f383 8811 	msr	BASEPRI, r3
 80136a6:	f3bf 8f6f 	isb	sy
 80136aa:	f3bf 8f4f 	dsb	sy
 80136ae:	e7fe      	b.n	80136ae <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80136b0:	2050      	movs	r0, #80	; 0x50
 80136b2:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80136b4:	9803      	ldr	r0, [sp, #12]
 80136b6:	2850      	cmp	r0, #80	; 0x50
 80136b8:	d008      	beq.n	80136cc <xQueueGenericCreateStatic+0x86>
 80136ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136be:	f383 8811 	msr	BASEPRI, r3
 80136c2:	f3bf 8f6f 	isb	sy
 80136c6:	f3bf 8f4f 	dsb	sy
 80136ca:	e7fe      	b.n	80136ca <xQueueGenericCreateStatic+0x84>
 80136cc:	4620      	mov	r0, r4
 80136ce:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80136d0:	2301      	movs	r3, #1
 80136d2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80136d6:	9400      	str	r4, [sp, #0]
 80136d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80136dc:	f7ff ffa2 	bl	8013624 <prvInitialiseNewQueue>
	}
 80136e0:	4620      	mov	r0, r4
 80136e2:	b004      	add	sp, #16
 80136e4:	bd10      	pop	{r4, pc}

080136e6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80136e6:	b940      	cbnz	r0, 80136fa <xQueueGenericCreate+0x14>
 80136e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ec:	f383 8811 	msr	BASEPRI, r3
 80136f0:	f3bf 8f6f 	isb	sy
 80136f4:	f3bf 8f4f 	dsb	sy
 80136f8:	e7fe      	b.n	80136f8 <xQueueGenericCreate+0x12>
	{
 80136fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136fc:	b083      	sub	sp, #12
 80136fe:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8013700:	b111      	cbz	r1, 8013708 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013702:	fb01 f000 	mul.w	r0, r1, r0
 8013706:	e000      	b.n	801370a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8013708:	2000      	movs	r0, #0
 801370a:	4617      	mov	r7, r2
 801370c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801370e:	3050      	adds	r0, #80	; 0x50
 8013710:	f7ff fde6 	bl	80132e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8013714:	4605      	mov	r5, r0
 8013716:	b150      	cbz	r0, 801372e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013718:	2300      	movs	r3, #0
 801371a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801371e:	9000      	str	r0, [sp, #0]
 8013720:	463b      	mov	r3, r7
 8013722:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8013726:	4621      	mov	r1, r4
 8013728:	4630      	mov	r0, r6
 801372a:	f7ff ff7b 	bl	8013624 <prvInitialiseNewQueue>
	}
 801372e:	4628      	mov	r0, r5
 8013730:	b003      	add	sp, #12
 8013732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013734 <xQueueGenericSend>:
{
 8013734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013736:	b085      	sub	sp, #20
 8013738:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801373a:	b160      	cbz	r0, 8013756 <xQueueGenericSend+0x22>
 801373c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801373e:	b199      	cbz	r1, 8013768 <xQueueGenericSend+0x34>
 8013740:	2501      	movs	r5, #1
 8013742:	b9bd      	cbnz	r5, 8013774 <xQueueGenericSend+0x40>
 8013744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013748:	f383 8811 	msr	BASEPRI, r3
 801374c:	f3bf 8f6f 	isb	sy
 8013750:	f3bf 8f4f 	dsb	sy
 8013754:	e7fe      	b.n	8013754 <xQueueGenericSend+0x20>
 8013756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801375a:	f383 8811 	msr	BASEPRI, r3
 801375e:	f3bf 8f6f 	isb	sy
 8013762:	f3bf 8f4f 	dsb	sy
 8013766:	e7fe      	b.n	8013766 <xQueueGenericSend+0x32>
 8013768:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801376a:	b90a      	cbnz	r2, 8013770 <xQueueGenericSend+0x3c>
 801376c:	2501      	movs	r5, #1
 801376e:	e7e8      	b.n	8013742 <xQueueGenericSend+0xe>
 8013770:	2500      	movs	r5, #0
 8013772:	e7e6      	b.n	8013742 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013774:	2b02      	cmp	r3, #2
 8013776:	d009      	beq.n	801378c <xQueueGenericSend+0x58>
 8013778:	b96d      	cbnz	r5, 8013796 <xQueueGenericSend+0x62>
 801377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377e:	f383 8811 	msr	BASEPRI, r3
 8013782:	f3bf 8f6f 	isb	sy
 8013786:	f3bf 8f4f 	dsb	sy
 801378a:	e7fe      	b.n	801378a <xQueueGenericSend+0x56>
 801378c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801378e:	2a01      	cmp	r2, #1
 8013790:	d0f2      	beq.n	8013778 <xQueueGenericSend+0x44>
 8013792:	2500      	movs	r5, #0
 8013794:	e7f0      	b.n	8013778 <xQueueGenericSend+0x44>
 8013796:	461e      	mov	r6, r3
 8013798:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801379a:	f000 ffad 	bl	80146f8 <xTaskGetSchedulerState>
 801379e:	b910      	cbnz	r0, 80137a6 <xQueueGenericSend+0x72>
 80137a0:	9b01      	ldr	r3, [sp, #4]
 80137a2:	b103      	cbz	r3, 80137a6 <xQueueGenericSend+0x72>
 80137a4:	2500      	movs	r5, #0
 80137a6:	b945      	cbnz	r5, 80137ba <xQueueGenericSend+0x86>
 80137a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ac:	f383 8811 	msr	BASEPRI, r3
 80137b0:	f3bf 8f6f 	isb	sy
 80137b4:	f3bf 8f4f 	dsb	sy
 80137b8:	e7fe      	b.n	80137b8 <xQueueGenericSend+0x84>
 80137ba:	2500      	movs	r5, #0
 80137bc:	e02c      	b.n	8013818 <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80137be:	4632      	mov	r2, r6
 80137c0:	4639      	mov	r1, r7
 80137c2:	4620      	mov	r0, r4
 80137c4:	f7ff fe6a 	bl	801349c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137ca:	b18b      	cbz	r3, 80137f0 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80137d0:	f000 fef0 	bl	80145b4 <xTaskRemoveFromEventList>
 80137d4:	b138      	cbz	r0, 80137e6 <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 80137d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137da:	4b37      	ldr	r3, [pc, #220]	; (80138b8 <xQueueGenericSend+0x184>)
 80137dc:	601a      	str	r2, [r3, #0]
 80137de:	f3bf 8f4f 	dsb	sy
 80137e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80137e6:	f7ff fbff 	bl	8012fe8 <vPortExitCritical>
				return pdPASS;
 80137ea:	2001      	movs	r0, #1
}
 80137ec:	b005      	add	sp, #20
 80137ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 80137f0:	2800      	cmp	r0, #0
 80137f2:	d0f8      	beq.n	80137e6 <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 80137f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137f8:	4b2f      	ldr	r3, [pc, #188]	; (80138b8 <xQueueGenericSend+0x184>)
 80137fa:	601a      	str	r2, [r3, #0]
 80137fc:	f3bf 8f4f 	dsb	sy
 8013800:	f3bf 8f6f 	isb	sy
 8013804:	e7ef      	b.n	80137e6 <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 8013806:	f7ff fbef 	bl	8012fe8 <vPortExitCritical>
					return errQUEUE_FULL;
 801380a:	2000      	movs	r0, #0
 801380c:	e7ee      	b.n	80137ec <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
 801380e:	4620      	mov	r0, r4
 8013810:	f7ff fe91 	bl	8013536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013814:	f000 fd72 	bl	80142fc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8013818:	f7ff fbc4 	bl	8012fa4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801381c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801381e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013820:	429a      	cmp	r2, r3
 8013822:	d3cc      	bcc.n	80137be <xQueueGenericSend+0x8a>
 8013824:	2e02      	cmp	r6, #2
 8013826:	d0ca      	beq.n	80137be <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013828:	9b01      	ldr	r3, [sp, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d0eb      	beq.n	8013806 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
 801382e:	b91d      	cbnz	r5, 8013838 <xQueueGenericSend+0x104>
					vTaskSetTimeOutState( &xTimeOut );
 8013830:	a802      	add	r0, sp, #8
 8013832:	f000 ff05 	bl	8014640 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013836:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8013838:	f7ff fbd6 	bl	8012fe8 <vPortExitCritical>
		vTaskSuspendAll();
 801383c:	f000 fcb8 	bl	80141b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013840:	f7ff fbb0 	bl	8012fa4 <vPortEnterCritical>
 8013844:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013848:	b25b      	sxtb	r3, r3
 801384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801384e:	d102      	bne.n	8013856 <xQueueGenericSend+0x122>
 8013850:	2300      	movs	r3, #0
 8013852:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013856:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801385a:	b25b      	sxtb	r3, r3
 801385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013860:	d102      	bne.n	8013868 <xQueueGenericSend+0x134>
 8013862:	2300      	movs	r3, #0
 8013864:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013868:	f7ff fbbe 	bl	8012fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801386c:	a901      	add	r1, sp, #4
 801386e:	a802      	add	r0, sp, #8
 8013870:	f000 fefc 	bl	801466c <xTaskCheckForTimeOut>
 8013874:	b9c8      	cbnz	r0, 80138aa <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013876:	4620      	mov	r0, r4
 8013878:	f7ff fdf4 	bl	8013464 <prvIsQueueFull>
 801387c:	2800      	cmp	r0, #0
 801387e:	d0c6      	beq.n	801380e <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013880:	9901      	ldr	r1, [sp, #4]
 8013882:	f104 0010 	add.w	r0, r4, #16
 8013886:	f000 fe7d 	bl	8014584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801388a:	4620      	mov	r0, r4
 801388c:	f7ff fe53 	bl	8013536 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013890:	f000 fd34 	bl	80142fc <xTaskResumeAll>
 8013894:	2800      	cmp	r0, #0
 8013896:	d1bf      	bne.n	8013818 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8013898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801389c:	4b06      	ldr	r3, [pc, #24]	; (80138b8 <xQueueGenericSend+0x184>)
 801389e:	601a      	str	r2, [r3, #0]
 80138a0:	f3bf 8f4f 	dsb	sy
 80138a4:	f3bf 8f6f 	isb	sy
 80138a8:	e7b6      	b.n	8013818 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 80138aa:	4620      	mov	r0, r4
 80138ac:	f7ff fe43 	bl	8013536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80138b0:	f000 fd24 	bl	80142fc <xTaskResumeAll>
			return errQUEUE_FULL;
 80138b4:	2000      	movs	r0, #0
 80138b6:	e799      	b.n	80137ec <xQueueGenericSend+0xb8>
 80138b8:	e000ed04 	.word	0xe000ed04

080138bc <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80138bc:	b148      	cbz	r0, 80138d2 <prvInitialiseMutex+0x16>
	{
 80138be:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80138c0:	2100      	movs	r1, #0
 80138c2:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80138c4:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80138c6:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80138c8:	460b      	mov	r3, r1
 80138ca:	460a      	mov	r2, r1
 80138cc:	f7ff ff32 	bl	8013734 <xQueueGenericSend>
 80138d0:	bd08      	pop	{r3, pc}
 80138d2:	4770      	bx	lr

080138d4 <xQueueCreateMutex>:
	{
 80138d4:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80138d6:	4602      	mov	r2, r0
 80138d8:	2100      	movs	r1, #0
 80138da:	2001      	movs	r0, #1
 80138dc:	f7ff ff03 	bl	80136e6 <xQueueGenericCreate>
 80138e0:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80138e2:	f7ff ffeb 	bl	80138bc <prvInitialiseMutex>
	}
 80138e6:	4620      	mov	r0, r4
 80138e8:	bd10      	pop	{r4, pc}

080138ea <xQueueCreateMutexStatic>:
	{
 80138ea:	b510      	push	{r4, lr}
 80138ec:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80138ee:	9000      	str	r0, [sp, #0]
 80138f0:	460b      	mov	r3, r1
 80138f2:	2200      	movs	r2, #0
 80138f4:	4611      	mov	r1, r2
 80138f6:	2001      	movs	r0, #1
 80138f8:	f7ff fea5 	bl	8013646 <xQueueGenericCreateStatic>
 80138fc:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80138fe:	f7ff ffdd 	bl	80138bc <prvInitialiseMutex>
	}
 8013902:	4620      	mov	r0, r4
 8013904:	b002      	add	sp, #8
 8013906:	bd10      	pop	{r4, pc}

08013908 <xQueueGenericSendFromISR>:
{
 8013908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801390c:	b160      	cbz	r0, 8013928 <xQueueGenericSendFromISR+0x20>
 801390e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013910:	b199      	cbz	r1, 801393a <xQueueGenericSendFromISR+0x32>
 8013912:	2001      	movs	r0, #1
 8013914:	b9b8      	cbnz	r0, 8013946 <xQueueGenericSendFromISR+0x3e>
 8013916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801391a:	f383 8811 	msr	BASEPRI, r3
 801391e:	f3bf 8f6f 	isb	sy
 8013922:	f3bf 8f4f 	dsb	sy
 8013926:	e7fe      	b.n	8013926 <xQueueGenericSendFromISR+0x1e>
 8013928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801392c:	f383 8811 	msr	BASEPRI, r3
 8013930:	f3bf 8f6f 	isb	sy
 8013934:	f3bf 8f4f 	dsb	sy
 8013938:	e7fe      	b.n	8013938 <xQueueGenericSendFromISR+0x30>
 801393a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801393c:	b908      	cbnz	r0, 8013942 <xQueueGenericSendFromISR+0x3a>
 801393e:	2001      	movs	r0, #1
 8013940:	e7e8      	b.n	8013914 <xQueueGenericSendFromISR+0xc>
 8013942:	2000      	movs	r0, #0
 8013944:	e7e6      	b.n	8013914 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013946:	2b02      	cmp	r3, #2
 8013948:	d009      	beq.n	801395e <xQueueGenericSendFromISR+0x56>
 801394a:	b968      	cbnz	r0, 8013968 <xQueueGenericSendFromISR+0x60>
 801394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013950:	f383 8811 	msr	BASEPRI, r3
 8013954:	f3bf 8f6f 	isb	sy
 8013958:	f3bf 8f4f 	dsb	sy
 801395c:	e7fe      	b.n	801395c <xQueueGenericSendFromISR+0x54>
 801395e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8013960:	2d01      	cmp	r5, #1
 8013962:	d0f2      	beq.n	801394a <xQueueGenericSendFromISR+0x42>
 8013964:	2000      	movs	r0, #0
 8013966:	e7f0      	b.n	801394a <xQueueGenericSendFromISR+0x42>
 8013968:	461f      	mov	r7, r3
 801396a:	4690      	mov	r8, r2
 801396c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801396e:	f7ff fc2b 	bl	80131c8 <vPortValidateInterruptPriority>
	__asm volatile
 8013972:	f3ef 8611 	mrs	r6, BASEPRI
 8013976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801397a:	f383 8811 	msr	BASEPRI, r3
 801397e:	f3bf 8f6f 	isb	sy
 8013982:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013986:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013988:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801398a:	429a      	cmp	r2, r3
 801398c:	d301      	bcc.n	8013992 <xQueueGenericSendFromISR+0x8a>
 801398e:	2f02      	cmp	r7, #2
 8013990:	d121      	bne.n	80139d6 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013992:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8013996:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013998:	463a      	mov	r2, r7
 801399a:	4649      	mov	r1, r9
 801399c:	4620      	mov	r0, r4
 801399e:	f7ff fd7d 	bl	801349c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80139a2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80139a6:	d110      	bne.n	80139ca <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139aa:	b1b3      	cbz	r3, 80139da <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80139b0:	f000 fe00 	bl	80145b4 <xTaskRemoveFromEventList>
 80139b4:	b198      	cbz	r0, 80139de <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 80139b6:	f1b8 0f00 	cmp.w	r8, #0
 80139ba:	d012      	beq.n	80139e2 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80139bc:	2001      	movs	r0, #1
 80139be:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80139c2:	f386 8811 	msr	BASEPRI, r6
}
 80139c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80139ca:	1c6b      	adds	r3, r5, #1
 80139cc:	b25b      	sxtb	r3, r3
 80139ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80139d2:	2001      	movs	r0, #1
 80139d4:	e7f5      	b.n	80139c2 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 80139d6:	2000      	movs	r0, #0
 80139d8:	e7f3      	b.n	80139c2 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 80139da:	2001      	movs	r0, #1
 80139dc:	e7f1      	b.n	80139c2 <xQueueGenericSendFromISR+0xba>
 80139de:	2001      	movs	r0, #1
 80139e0:	e7ef      	b.n	80139c2 <xQueueGenericSendFromISR+0xba>
 80139e2:	2001      	movs	r0, #1
 80139e4:	e7ed      	b.n	80139c2 <xQueueGenericSendFromISR+0xba>

080139e6 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80139e6:	b160      	cbz	r0, 8013a02 <xQueueGiveFromISR+0x1c>
{
 80139e8:	b570      	push	{r4, r5, r6, lr}
 80139ea:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80139ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80139ee:	b18b      	cbz	r3, 8013a14 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80139f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f4:	f383 8811 	msr	BASEPRI, r3
 80139f8:	f3bf 8f6f 	isb	sy
 80139fc:	f3bf 8f4f 	dsb	sy
 8013a00:	e7fe      	b.n	8013a00 <xQueueGiveFromISR+0x1a>
 8013a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a06:	f383 8811 	msr	BASEPRI, r3
 8013a0a:	f3bf 8f6f 	isb	sy
 8013a0e:	f3bf 8f4f 	dsb	sy
 8013a12:	e7fe      	b.n	8013a12 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8013a14:	6803      	ldr	r3, [r0, #0]
 8013a16:	b153      	cbz	r3, 8013a2e <xQueueGiveFromISR+0x48>
 8013a18:	2301      	movs	r3, #1
 8013a1a:	b973      	cbnz	r3, 8013a3a <xQueueGiveFromISR+0x54>
 8013a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a20:	f383 8811 	msr	BASEPRI, r3
 8013a24:	f3bf 8f6f 	isb	sy
 8013a28:	f3bf 8f4f 	dsb	sy
 8013a2c:	e7fe      	b.n	8013a2c <xQueueGiveFromISR+0x46>
 8013a2e:	6843      	ldr	r3, [r0, #4]
 8013a30:	b90b      	cbnz	r3, 8013a36 <xQueueGiveFromISR+0x50>
 8013a32:	2301      	movs	r3, #1
 8013a34:	e7f1      	b.n	8013a1a <xQueueGiveFromISR+0x34>
 8013a36:	2300      	movs	r3, #0
 8013a38:	e7ef      	b.n	8013a1a <xQueueGiveFromISR+0x34>
 8013a3a:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a3c:	f7ff fbc4 	bl	80131c8 <vPortValidateInterruptPriority>
	__asm volatile
 8013a40:	f3ef 8511 	mrs	r5, BASEPRI
 8013a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a48:	f383 8811 	msr	BASEPRI, r3
 8013a4c:	f3bf 8f6f 	isb	sy
 8013a50:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013a56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d21a      	bcs.n	8013a92 <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013a5c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013a60:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8013a62:	3201      	adds	r2, #1
 8013a64:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8013a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a6a:	d10c      	bne.n	8013a86 <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a6e:	b193      	cbz	r3, 8013a96 <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013a74:	f000 fd9e 	bl	80145b4 <xTaskRemoveFromEventList>
 8013a78:	b178      	cbz	r0, 8013a9a <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 8013a7a:	b186      	cbz	r6, 8013a9e <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013a7c:	2001      	movs	r0, #1
 8013a7e:	6030      	str	r0, [r6, #0]
	__asm volatile
 8013a80:	f385 8811 	msr	BASEPRI, r5
}
 8013a84:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013a86:	3301      	adds	r3, #1
 8013a88:	b25b      	sxtb	r3, r3
 8013a8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8013a8e:	2001      	movs	r0, #1
 8013a90:	e7f6      	b.n	8013a80 <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 8013a92:	2000      	movs	r0, #0
 8013a94:	e7f4      	b.n	8013a80 <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 8013a96:	2001      	movs	r0, #1
 8013a98:	e7f2      	b.n	8013a80 <xQueueGiveFromISR+0x9a>
 8013a9a:	2001      	movs	r0, #1
 8013a9c:	e7f0      	b.n	8013a80 <xQueueGiveFromISR+0x9a>
 8013a9e:	2001      	movs	r0, #1
 8013aa0:	e7ee      	b.n	8013a80 <xQueueGiveFromISR+0x9a>
	...

08013aa4 <xQueueGenericReceive>:
{
 8013aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa8:	b084      	sub	sp, #16
 8013aaa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8013aac:	b160      	cbz	r0, 8013ac8 <xQueueGenericReceive+0x24>
 8013aae:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ab0:	b199      	cbz	r1, 8013ada <xQueueGenericReceive+0x36>
 8013ab2:	2501      	movs	r5, #1
 8013ab4:	b9bd      	cbnz	r5, 8013ae6 <xQueueGenericReceive+0x42>
	__asm volatile
 8013ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aba:	f383 8811 	msr	BASEPRI, r3
 8013abe:	f3bf 8f6f 	isb	sy
 8013ac2:	f3bf 8f4f 	dsb	sy
 8013ac6:	e7fe      	b.n	8013ac6 <xQueueGenericReceive+0x22>
 8013ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013acc:	f383 8811 	msr	BASEPRI, r3
 8013ad0:	f3bf 8f6f 	isb	sy
 8013ad4:	f3bf 8f4f 	dsb	sy
 8013ad8:	e7fe      	b.n	8013ad8 <xQueueGenericReceive+0x34>
 8013ada:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013adc:	b90a      	cbnz	r2, 8013ae2 <xQueueGenericReceive+0x3e>
 8013ade:	2501      	movs	r5, #1
 8013ae0:	e7e8      	b.n	8013ab4 <xQueueGenericReceive+0x10>
 8013ae2:	2500      	movs	r5, #0
 8013ae4:	e7e6      	b.n	8013ab4 <xQueueGenericReceive+0x10>
 8013ae6:	461f      	mov	r7, r3
 8013ae8:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013aea:	f000 fe05 	bl	80146f8 <xTaskGetSchedulerState>
 8013aee:	b910      	cbnz	r0, 8013af6 <xQueueGenericReceive+0x52>
 8013af0:	9b01      	ldr	r3, [sp, #4]
 8013af2:	b103      	cbz	r3, 8013af6 <xQueueGenericReceive+0x52>
 8013af4:	2500      	movs	r5, #0
 8013af6:	b945      	cbnz	r5, 8013b0a <xQueueGenericReceive+0x66>
 8013af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013afc:	f383 8811 	msr	BASEPRI, r3
 8013b00:	f3bf 8f6f 	isb	sy
 8013b04:	f3bf 8f4f 	dsb	sy
 8013b08:	e7fe      	b.n	8013b08 <xQueueGenericReceive+0x64>
 8013b0a:	2600      	movs	r6, #0
 8013b0c:	e05d      	b.n	8013bca <xQueueGenericReceive+0x126>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8013b0e:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013b10:	4641      	mov	r1, r8
 8013b12:	4620      	mov	r0, r4
 8013b14:	f7ff fcfd 	bl	8013512 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8013b18:	b9df      	cbnz	r7, 8013b52 <xQueueGenericReceive+0xae>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8013b1a:	3d01      	subs	r5, #1
 8013b1c:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b1e:	6823      	ldr	r3, [r4, #0]
 8013b20:	b913      	cbnz	r3, 8013b28 <xQueueGenericReceive+0x84>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8013b22:	f000 fea5 	bl	8014870 <pvTaskIncrementMutexHeldCount>
 8013b26:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b28:	6923      	ldr	r3, [r4, #16]
 8013b2a:	b163      	cbz	r3, 8013b46 <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b2c:	f104 0010 	add.w	r0, r4, #16
 8013b30:	f000 fd40 	bl	80145b4 <xTaskRemoveFromEventList>
 8013b34:	b138      	cbz	r0, 8013b46 <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8013b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b3a:	4b45      	ldr	r3, [pc, #276]	; (8013c50 <xQueueGenericReceive+0x1ac>)
 8013b3c:	601a      	str	r2, [r3, #0]
 8013b3e:	f3bf 8f4f 	dsb	sy
 8013b42:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8013b46:	f7ff fa4f 	bl	8012fe8 <vPortExitCritical>
				return pdPASS;
 8013b4a:	2001      	movs	r0, #1
}
 8013b4c:	b004      	add	sp, #16
 8013b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8013b52:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d0f5      	beq.n	8013b46 <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013b5e:	f000 fd29 	bl	80145b4 <xTaskRemoveFromEventList>
 8013b62:	2800      	cmp	r0, #0
 8013b64:	d0ef      	beq.n	8013b46 <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8013b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b6a:	4b39      	ldr	r3, [pc, #228]	; (8013c50 <xQueueGenericReceive+0x1ac>)
 8013b6c:	601a      	str	r2, [r3, #0]
 8013b6e:	f3bf 8f4f 	dsb	sy
 8013b72:	f3bf 8f6f 	isb	sy
 8013b76:	e7e6      	b.n	8013b46 <xQueueGenericReceive+0xa2>
					taskEXIT_CRITICAL();
 8013b78:	f7ff fa36 	bl	8012fe8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8013b7c:	2000      	movs	r0, #0
 8013b7e:	e7e5      	b.n	8013b4c <xQueueGenericReceive+0xa8>
					vTaskSetTimeOutState( &xTimeOut );
 8013b80:	a802      	add	r0, sp, #8
 8013b82:	f000 fd5d 	bl	8014640 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013b86:	2601      	movs	r6, #1
 8013b88:	e029      	b.n	8013bde <xQueueGenericReceive+0x13a>
		prvLockQueue( pxQueue );
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013b90:	e031      	b.n	8013bf6 <xQueueGenericReceive+0x152>
 8013b92:	2300      	movs	r3, #0
 8013b94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b98:	e033      	b.n	8013c02 <xQueueGenericReceive+0x15e>
						taskENTER_CRITICAL();
 8013b9a:	f7ff fa03 	bl	8012fa4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8013b9e:	6860      	ldr	r0, [r4, #4]
 8013ba0:	f000 fdba 	bl	8014718 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8013ba4:	f7ff fa20 	bl	8012fe8 <vPortExitCritical>
 8013ba8:	e03b      	b.n	8013c22 <xQueueGenericReceive+0x17e>
				prvUnlockQueue( pxQueue );
 8013baa:	4620      	mov	r0, r4
 8013bac:	f7ff fcc3 	bl	8013536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013bb0:	f000 fba4 	bl	80142fc <xTaskResumeAll>
 8013bb4:	e009      	b.n	8013bca <xQueueGenericReceive+0x126>
			prvUnlockQueue( pxQueue );
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	f7ff fcbd 	bl	8013536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013bbc:	f000 fb9e 	bl	80142fc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013bc0:	4620      	mov	r0, r4
 8013bc2:	f7ff fc5e 	bl	8013482 <prvIsQueueEmpty>
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	d140      	bne.n	8013c4c <xQueueGenericReceive+0x1a8>
		taskENTER_CRITICAL();
 8013bca:	f7ff f9eb 	bl	8012fa4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013bd0:	2d00      	cmp	r5, #0
 8013bd2:	d19c      	bne.n	8013b0e <xQueueGenericReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013bd4:	9b01      	ldr	r3, [sp, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d0ce      	beq.n	8013b78 <xQueueGenericReceive+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8013bda:	2e00      	cmp	r6, #0
 8013bdc:	d0d0      	beq.n	8013b80 <xQueueGenericReceive+0xdc>
		taskEXIT_CRITICAL();
 8013bde:	f7ff fa03 	bl	8012fe8 <vPortExitCritical>
		vTaskSuspendAll();
 8013be2:	f000 fae5 	bl	80141b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013be6:	f7ff f9dd 	bl	8012fa4 <vPortEnterCritical>
 8013bea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013bee:	b25b      	sxtb	r3, r3
 8013bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bf4:	d0c9      	beq.n	8013b8a <xQueueGenericReceive+0xe6>
 8013bf6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013bfa:	b25b      	sxtb	r3, r3
 8013bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c00:	d0c7      	beq.n	8013b92 <xQueueGenericReceive+0xee>
 8013c02:	f7ff f9f1 	bl	8012fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c06:	a901      	add	r1, sp, #4
 8013c08:	a802      	add	r0, sp, #8
 8013c0a:	f000 fd2f 	bl	801466c <xTaskCheckForTimeOut>
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	d1d1      	bne.n	8013bb6 <xQueueGenericReceive+0x112>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c12:	4620      	mov	r0, r4
 8013c14:	f7ff fc35 	bl	8013482 <prvIsQueueEmpty>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d0c6      	beq.n	8013baa <xQueueGenericReceive+0x106>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c1c:	6823      	ldr	r3, [r4, #0]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d0bb      	beq.n	8013b9a <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013c22:	9901      	ldr	r1, [sp, #4]
 8013c24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013c28:	f000 fcac 	bl	8014584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	f7ff fc82 	bl	8013536 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013c32:	f000 fb63 	bl	80142fc <xTaskResumeAll>
 8013c36:	2800      	cmp	r0, #0
 8013c38:	d1c7      	bne.n	8013bca <xQueueGenericReceive+0x126>
					portYIELD_WITHIN_API();
 8013c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c3e:	4b04      	ldr	r3, [pc, #16]	; (8013c50 <xQueueGenericReceive+0x1ac>)
 8013c40:	601a      	str	r2, [r3, #0]
 8013c42:	f3bf 8f4f 	dsb	sy
 8013c46:	f3bf 8f6f 	isb	sy
 8013c4a:	e7be      	b.n	8013bca <xQueueGenericReceive+0x126>
				return errQUEUE_EMPTY;
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	e77d      	b.n	8013b4c <xQueueGenericReceive+0xa8>
 8013c50:	e000ed04 	.word	0xe000ed04

08013c54 <xQueueReceiveFromISR>:
{
 8013c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013c58:	b160      	cbz	r0, 8013c74 <xQueueReceiveFromISR+0x20>
 8013c5a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c5c:	b199      	cbz	r1, 8013c86 <xQueueReceiveFromISR+0x32>
 8013c5e:	2301      	movs	r3, #1
 8013c60:	b9bb      	cbnz	r3, 8013c92 <xQueueReceiveFromISR+0x3e>
 8013c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c66:	f383 8811 	msr	BASEPRI, r3
 8013c6a:	f3bf 8f6f 	isb	sy
 8013c6e:	f3bf 8f4f 	dsb	sy
 8013c72:	e7fe      	b.n	8013c72 <xQueueReceiveFromISR+0x1e>
 8013c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c78:	f383 8811 	msr	BASEPRI, r3
 8013c7c:	f3bf 8f6f 	isb	sy
 8013c80:	f3bf 8f4f 	dsb	sy
 8013c84:	e7fe      	b.n	8013c84 <xQueueReceiveFromISR+0x30>
 8013c86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013c88:	b90b      	cbnz	r3, 8013c8e <xQueueReceiveFromISR+0x3a>
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	e7e8      	b.n	8013c60 <xQueueReceiveFromISR+0xc>
 8013c8e:	2300      	movs	r3, #0
 8013c90:	e7e6      	b.n	8013c60 <xQueueReceiveFromISR+0xc>
 8013c92:	4617      	mov	r7, r2
 8013c94:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c96:	f7ff fa97 	bl	80131c8 <vPortValidateInterruptPriority>
	__asm volatile
 8013c9a:	f3ef 8611 	mrs	r6, BASEPRI
 8013c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca2:	f383 8811 	msr	BASEPRI, r3
 8013ca6:	f3bf 8f6f 	isb	sy
 8013caa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013cae:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013cb2:	f1b8 0f00 	cmp.w	r8, #0
 8013cb6:	d020      	beq.n	8013cfa <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8013cb8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8013cbc:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013cbe:	4649      	mov	r1, r9
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	f7ff fc26 	bl	8013512 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8013cc6:	f108 33ff 	add.w	r3, r8, #4294967295
 8013cca:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8013ccc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013cd0:	d10d      	bne.n	8013cee <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013cd2:	6923      	ldr	r3, [r4, #16]
 8013cd4:	b19b      	cbz	r3, 8013cfe <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013cd6:	f104 0010 	add.w	r0, r4, #16
 8013cda:	f000 fc6b 	bl	80145b4 <xTaskRemoveFromEventList>
 8013cde:	b180      	cbz	r0, 8013d02 <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 8013ce0:	b18f      	cbz	r7, 8013d06 <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013ce2:	2001      	movs	r0, #1
 8013ce4:	6038      	str	r0, [r7, #0]
	__asm volatile
 8013ce6:	f386 8811 	msr	BASEPRI, r6
}
 8013cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013cee:	1c6b      	adds	r3, r5, #1
 8013cf0:	b25b      	sxtb	r3, r3
 8013cf2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8013cf6:	2001      	movs	r0, #1
 8013cf8:	e7f5      	b.n	8013ce6 <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 8013cfa:	2000      	movs	r0, #0
 8013cfc:	e7f3      	b.n	8013ce6 <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 8013cfe:	2001      	movs	r0, #1
 8013d00:	e7f1      	b.n	8013ce6 <xQueueReceiveFromISR+0x92>
 8013d02:	2001      	movs	r0, #1
 8013d04:	e7ef      	b.n	8013ce6 <xQueueReceiveFromISR+0x92>
 8013d06:	2001      	movs	r0, #1
 8013d08:	e7ed      	b.n	8013ce6 <xQueueReceiveFromISR+0x92>

08013d0a <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8013d0a:	b940      	cbnz	r0, 8013d1e <uxQueueMessagesWaiting+0x14>
	__asm volatile
 8013d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d10:	f383 8811 	msr	BASEPRI, r3
 8013d14:	f3bf 8f6f 	isb	sy
 8013d18:	f3bf 8f4f 	dsb	sy
 8013d1c:	e7fe      	b.n	8013d1c <uxQueueMessagesWaiting+0x12>
{
 8013d1e:	b510      	push	{r4, lr}
 8013d20:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8013d22:	f7ff f93f 	bl	8012fa4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013d26:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8013d28:	f7ff f95e 	bl	8012fe8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	bd10      	pop	{r4, pc}

08013d30 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8013d30:	b108      	cbz	r0, 8013d36 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013d32:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013d34:	4770      	bx	lr
 8013d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d3a:	f383 8811 	msr	BASEPRI, r3
 8013d3e:	f3bf 8f6f 	isb	sy
 8013d42:	f3bf 8f4f 	dsb	sy
 8013d46:	e7fe      	b.n	8013d46 <uxQueueMessagesWaitingFromISR+0x16>

08013d48 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d48:	2300      	movs	r3, #0
 8013d4a:	2b0f      	cmp	r3, #15
 8013d4c:	d80c      	bhi.n	8013d68 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013d4e:	4a07      	ldr	r2, [pc, #28]	; (8013d6c <vQueueAddToRegistry+0x24>)
 8013d50:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013d54:	b10a      	cbz	r2, 8013d5a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d56:	3301      	adds	r3, #1
 8013d58:	e7f7      	b.n	8013d4a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013d5a:	4a04      	ldr	r2, [pc, #16]	; (8013d6c <vQueueAddToRegistry+0x24>)
 8013d5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013d60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013d64:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013d66:	4770      	bx	lr
 8013d68:	4770      	bx	lr
 8013d6a:	bf00      	nop
 8013d6c:	2000a1c8 	.word	0x2000a1c8

08013d70 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d70:	2300      	movs	r3, #0
 8013d72:	2b0f      	cmp	r3, #15
 8013d74:	d80f      	bhi.n	8013d96 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013d76:	4a08      	ldr	r2, [pc, #32]	; (8013d98 <vQueueUnregisterQueue+0x28>)
 8013d78:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013d7c:	6852      	ldr	r2, [r2, #4]
 8013d7e:	4282      	cmp	r2, r0
 8013d80:	d001      	beq.n	8013d86 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d82:	3301      	adds	r3, #1
 8013d84:	e7f5      	b.n	8013d72 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013d86:	4a04      	ldr	r2, [pc, #16]	; (8013d98 <vQueueUnregisterQueue+0x28>)
 8013d88:	2100      	movs	r1, #0
 8013d8a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013d8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013d92:	6059      	str	r1, [r3, #4]
				break;
 8013d94:	4770      	bx	lr
 8013d96:	4770      	bx	lr
 8013d98:	2000a1c8 	.word	0x2000a1c8

08013d9c <vQueueDelete>:
	configASSERT( pxQueue );
 8013d9c:	b150      	cbz	r0, 8013db4 <vQueueDelete+0x18>
{
 8013d9e:	b510      	push	{r4, lr}
 8013da0:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8013da2:	f7ff ffe5 	bl	8013d70 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013da6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013daa:	b913      	cbnz	r3, 8013db2 <vQueueDelete+0x16>
			vPortFree( pxQueue );
 8013dac:	4620      	mov	r0, r4
 8013dae:	f7ff fb1b 	bl	80133e8 <vPortFree>
 8013db2:	bd10      	pop	{r4, pc}
 8013db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db8:	f383 8811 	msr	BASEPRI, r3
 8013dbc:	f3bf 8f6f 	isb	sy
 8013dc0:	f3bf 8f4f 	dsb	sy
 8013dc4:	e7fe      	b.n	8013dc4 <vQueueDelete+0x28>
	...

08013dc8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dc8:	4b0a      	ldr	r3, [pc, #40]	; (8013df4 <prvResetNextTaskUnblockTime+0x2c>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	b94b      	cbnz	r3, 8013de4 <prvResetNextTaskUnblockTime+0x1c>
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	b94b      	cbnz	r3, 8013de8 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013dd4:	4b07      	ldr	r3, [pc, #28]	; (8013df4 <prvResetNextTaskUnblockTime+0x2c>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013ddc:	685a      	ldr	r2, [r3, #4]
 8013dde:	4b06      	ldr	r3, [pc, #24]	; (8013df8 <prvResetNextTaskUnblockTime+0x30>)
 8013de0:	601a      	str	r2, [r3, #0]
 8013de2:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013de4:	2300      	movs	r3, #0
 8013de6:	e7f4      	b.n	8013dd2 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8013de8:	f04f 32ff 	mov.w	r2, #4294967295
 8013dec:	4b02      	ldr	r3, [pc, #8]	; (8013df8 <prvResetNextTaskUnblockTime+0x30>)
 8013dee:	601a      	str	r2, [r3, #0]
 8013df0:	4770      	bx	lr
 8013df2:	bf00      	nop
 8013df4:	20009250 	.word	0x20009250
 8013df8:	20009328 	.word	0x20009328

08013dfc <prvInitialiseNewTask>:
{
 8013dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e00:	4681      	mov	r9, r0
 8013e02:	460d      	mov	r5, r1
 8013e04:	4617      	mov	r7, r2
 8013e06:	469a      	mov	sl, r3
 8013e08:	9e08      	ldr	r6, [sp, #32]
 8013e0a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8013e0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013e10:	0092      	lsls	r2, r2, #2
 8013e12:	21a5      	movs	r1, #165	; 0xa5
 8013e14:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013e16:	f00c f8db 	bl	801ffd0 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013e1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013e1c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8013e20:	3a01      	subs	r2, #1
 8013e22:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013e26:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	2b0f      	cmp	r3, #15
 8013e2e:	d807      	bhi.n	8013e40 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013e30:	5ce9      	ldrb	r1, [r5, r3]
 8013e32:	18e2      	adds	r2, r4, r3
 8013e34:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8013e38:	5cea      	ldrb	r2, [r5, r3]
 8013e3a:	b10a      	cbz	r2, 8013e40 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013e3c:	3301      	adds	r3, #1
 8013e3e:	e7f5      	b.n	8013e2c <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013e40:	2300      	movs	r3, #0
 8013e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013e46:	2e06      	cmp	r6, #6
 8013e48:	d900      	bls.n	8013e4c <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013e4a:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8013e4c:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8013e4e:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013e50:	2500      	movs	r5, #0
 8013e52:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013e54:	1d20      	adds	r0, r4, #4
 8013e56:	f7ff f807 	bl	8012e68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013e5a:	f104 0018 	add.w	r0, r4, #24
 8013e5e:	f7ff f803 	bl	8012e68 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013e62:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e64:	f1c6 0607 	rsb	r6, r6, #7
 8013e68:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013e6a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013e6c:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8013e6e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013e70:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013e74:	4652      	mov	r2, sl
 8013e76:	4649      	mov	r1, r9
 8013e78:	4638      	mov	r0, r7
 8013e7a:	f7ff f865 	bl	8012f48 <pxPortInitialiseStack>
 8013e7e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8013e80:	f1b8 0f00 	cmp.w	r8, #0
 8013e84:	d001      	beq.n	8013e8a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013e86:	f8c8 4000 	str.w	r4, [r8]
 8013e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08013e90 <prvInitialiseTaskLists>:
{
 8013e90:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013e92:	2400      	movs	r4, #0
 8013e94:	e007      	b.n	8013ea6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013e96:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8013e9a:	0093      	lsls	r3, r2, #2
 8013e9c:	480e      	ldr	r0, [pc, #56]	; (8013ed8 <prvInitialiseTaskLists+0x48>)
 8013e9e:	4418      	add	r0, r3
 8013ea0:	f7fe ffd7 	bl	8012e52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013ea4:	3401      	adds	r4, #1
 8013ea6:	2c06      	cmp	r4, #6
 8013ea8:	d9f5      	bls.n	8013e96 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8013eaa:	4d0c      	ldr	r5, [pc, #48]	; (8013edc <prvInitialiseTaskLists+0x4c>)
 8013eac:	4628      	mov	r0, r5
 8013eae:	f7fe ffd0 	bl	8012e52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013eb2:	4c0b      	ldr	r4, [pc, #44]	; (8013ee0 <prvInitialiseTaskLists+0x50>)
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	f7fe ffcc 	bl	8012e52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013eba:	480a      	ldr	r0, [pc, #40]	; (8013ee4 <prvInitialiseTaskLists+0x54>)
 8013ebc:	f7fe ffc9 	bl	8012e52 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8013ec0:	4809      	ldr	r0, [pc, #36]	; (8013ee8 <prvInitialiseTaskLists+0x58>)
 8013ec2:	f7fe ffc6 	bl	8012e52 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8013ec6:	4809      	ldr	r0, [pc, #36]	; (8013eec <prvInitialiseTaskLists+0x5c>)
 8013ec8:	f7fe ffc3 	bl	8012e52 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8013ecc:	4b08      	ldr	r3, [pc, #32]	; (8013ef0 <prvInitialiseTaskLists+0x60>)
 8013ece:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013ed0:	4b08      	ldr	r3, [pc, #32]	; (8013ef4 <prvInitialiseTaskLists+0x64>)
 8013ed2:	601c      	str	r4, [r3, #0]
 8013ed4:	bd38      	pop	{r3, r4, r5, pc}
 8013ed6:	bf00      	nop
 8013ed8:	20009258 	.word	0x20009258
 8013edc:	20009300 	.word	0x20009300
 8013ee0:	20009314 	.word	0x20009314
 8013ee4:	20009330 	.word	0x20009330
 8013ee8:	2000935c 	.word	0x2000935c
 8013eec:	20009348 	.word	0x20009348
 8013ef0:	20009250 	.word	0x20009250
 8013ef4:	20009254 	.word	0x20009254

08013ef8 <prvAddNewTaskToReadyList>:
{
 8013ef8:	b510      	push	{r4, lr}
 8013efa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8013efc:	f7ff f852 	bl	8012fa4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8013f00:	4a21      	ldr	r2, [pc, #132]	; (8013f88 <prvAddNewTaskToReadyList+0x90>)
 8013f02:	6813      	ldr	r3, [r2, #0]
 8013f04:	3301      	adds	r3, #1
 8013f06:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013f08:	4b20      	ldr	r3, [pc, #128]	; (8013f8c <prvAddNewTaskToReadyList+0x94>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d032      	beq.n	8013f76 <prvAddNewTaskToReadyList+0x7e>
			if( xSchedulerRunning == pdFALSE )
 8013f10:	4b1f      	ldr	r3, [pc, #124]	; (8013f90 <prvAddNewTaskToReadyList+0x98>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	b93b      	cbnz	r3, 8013f26 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013f16:	4b1d      	ldr	r3, [pc, #116]	; (8013f8c <prvAddNewTaskToReadyList+0x94>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d801      	bhi.n	8013f26 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 8013f22:	4b1a      	ldr	r3, [pc, #104]	; (8013f8c <prvAddNewTaskToReadyList+0x94>)
 8013f24:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8013f26:	4a1b      	ldr	r2, [pc, #108]	; (8013f94 <prvAddNewTaskToReadyList+0x9c>)
 8013f28:	6813      	ldr	r3, [r2, #0]
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013f2e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8013f30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013f32:	2201      	movs	r2, #1
 8013f34:	409a      	lsls	r2, r3
 8013f36:	4918      	ldr	r1, [pc, #96]	; (8013f98 <prvAddNewTaskToReadyList+0xa0>)
 8013f38:	6808      	ldr	r0, [r1, #0]
 8013f3a:	4302      	orrs	r2, r0
 8013f3c:	600a      	str	r2, [r1, #0]
 8013f3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013f42:	009a      	lsls	r2, r3, #2
 8013f44:	1d21      	adds	r1, r4, #4
 8013f46:	4815      	ldr	r0, [pc, #84]	; (8013f9c <prvAddNewTaskToReadyList+0xa4>)
 8013f48:	4410      	add	r0, r2
 8013f4a:	f7fe ff90 	bl	8012e6e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8013f4e:	f7ff f84b 	bl	8012fe8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8013f52:	4b0f      	ldr	r3, [pc, #60]	; (8013f90 <prvAddNewTaskToReadyList+0x98>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	b16b      	cbz	r3, 8013f74 <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013f58:	4b0c      	ldr	r3, [pc, #48]	; (8013f8c <prvAddNewTaskToReadyList+0x94>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d207      	bcs.n	8013f74 <prvAddNewTaskToReadyList+0x7c>
			taskYIELD_IF_USING_PREEMPTION();
 8013f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f68:	4b0d      	ldr	r3, [pc, #52]	; (8013fa0 <prvAddNewTaskToReadyList+0xa8>)
 8013f6a:	601a      	str	r2, [r3, #0]
 8013f6c:	f3bf 8f4f 	dsb	sy
 8013f70:	f3bf 8f6f 	isb	sy
 8013f74:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8013f76:	4b05      	ldr	r3, [pc, #20]	; (8013f8c <prvAddNewTaskToReadyList+0x94>)
 8013f78:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013f7a:	6813      	ldr	r3, [r2, #0]
 8013f7c:	2b01      	cmp	r3, #1
 8013f7e:	d1d2      	bne.n	8013f26 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 8013f80:	f7ff ff86 	bl	8013e90 <prvInitialiseTaskLists>
 8013f84:	e7cf      	b.n	8013f26 <prvAddNewTaskToReadyList+0x2e>
 8013f86:	bf00      	nop
 8013f88:	200092e8 	.word	0x200092e8
 8013f8c:	2000924c 	.word	0x2000924c
 8013f90:	20009344 	.word	0x20009344
 8013f94:	200092f8 	.word	0x200092f8
 8013f98:	200092fc 	.word	0x200092fc
 8013f9c:	20009258 	.word	0x20009258
 8013fa0:	e000ed04 	.word	0xe000ed04

08013fa4 <prvDeleteTCB>:
	{
 8013fa4:	b510      	push	{r4, lr}
 8013fa6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013fa8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8013fac:	b163      	cbz	r3, 8013fc8 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013fae:	2b01      	cmp	r3, #1
 8013fb0:	d011      	beq.n	8013fd6 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 8013fb2:	2b02      	cmp	r3, #2
 8013fb4:	d012      	beq.n	8013fdc <prvDeleteTCB+0x38>
 8013fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fba:	f383 8811 	msr	BASEPRI, r3
 8013fbe:	f3bf 8f6f 	isb	sy
 8013fc2:	f3bf 8f4f 	dsb	sy
 8013fc6:	e7fe      	b.n	8013fc6 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8013fc8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8013fca:	f7ff fa0d 	bl	80133e8 <vPortFree>
				vPortFree( pxTCB );
 8013fce:	4620      	mov	r0, r4
 8013fd0:	f7ff fa0a 	bl	80133e8 <vPortFree>
 8013fd4:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8013fd6:	f7ff fa07 	bl	80133e8 <vPortFree>
 8013fda:	bd10      	pop	{r4, pc}
 8013fdc:	bd10      	pop	{r4, pc}
	...

08013fe0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013fe0:	b570      	push	{r4, r5, r6, lr}
 8013fe2:	4604      	mov	r4, r0
 8013fe4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013fe6:	4b1d      	ldr	r3, [pc, #116]	; (801405c <prvAddCurrentTaskToDelayedList+0x7c>)
 8013fe8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013fea:	4b1d      	ldr	r3, [pc, #116]	; (8014060 <prvAddCurrentTaskToDelayedList+0x80>)
 8013fec:	6818      	ldr	r0, [r3, #0]
 8013fee:	3004      	adds	r0, #4
 8013ff0:	f7fe ff63 	bl	8012eba <uxListRemove>
 8013ff4:	b950      	cbnz	r0, 801400c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8013ff6:	4b1a      	ldr	r3, [pc, #104]	; (8014060 <prvAddCurrentTaskToDelayedList+0x80>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	fa03 f202 	lsl.w	r2, r3, r2
 8014002:	4918      	ldr	r1, [pc, #96]	; (8014064 <prvAddCurrentTaskToDelayedList+0x84>)
 8014004:	680b      	ldr	r3, [r1, #0]
 8014006:	ea23 0302 	bic.w	r3, r3, r2
 801400a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801400c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014010:	d013      	beq.n	801403a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014012:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014014:	4b12      	ldr	r3, [pc, #72]	; (8014060 <prvAddCurrentTaskToDelayedList+0x80>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801401a:	42a5      	cmp	r5, r4
 801401c:	d816      	bhi.n	801404c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801401e:	4b12      	ldr	r3, [pc, #72]	; (8014068 <prvAddCurrentTaskToDelayedList+0x88>)
 8014020:	6818      	ldr	r0, [r3, #0]
 8014022:	4b0f      	ldr	r3, [pc, #60]	; (8014060 <prvAddCurrentTaskToDelayedList+0x80>)
 8014024:	6819      	ldr	r1, [r3, #0]
 8014026:	3104      	adds	r1, #4
 8014028:	f7fe ff2d 	bl	8012e86 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 801402c:	4b0f      	ldr	r3, [pc, #60]	; (801406c <prvAddCurrentTaskToDelayedList+0x8c>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	429c      	cmp	r4, r3
 8014032:	d201      	bcs.n	8014038 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8014034:	4b0d      	ldr	r3, [pc, #52]	; (801406c <prvAddCurrentTaskToDelayedList+0x8c>)
 8014036:	601c      	str	r4, [r3, #0]
 8014038:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801403a:	2e00      	cmp	r6, #0
 801403c:	d0e9      	beq.n	8014012 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801403e:	4b08      	ldr	r3, [pc, #32]	; (8014060 <prvAddCurrentTaskToDelayedList+0x80>)
 8014040:	6819      	ldr	r1, [r3, #0]
 8014042:	3104      	adds	r1, #4
 8014044:	480a      	ldr	r0, [pc, #40]	; (8014070 <prvAddCurrentTaskToDelayedList+0x90>)
 8014046:	f7fe ff12 	bl	8012e6e <vListInsertEnd>
 801404a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801404c:	4b09      	ldr	r3, [pc, #36]	; (8014074 <prvAddCurrentTaskToDelayedList+0x94>)
 801404e:	6818      	ldr	r0, [r3, #0]
 8014050:	4b03      	ldr	r3, [pc, #12]	; (8014060 <prvAddCurrentTaskToDelayedList+0x80>)
 8014052:	6819      	ldr	r1, [r3, #0]
 8014054:	3104      	adds	r1, #4
 8014056:	f7fe ff16 	bl	8012e86 <vListInsert>
 801405a:	bd70      	pop	{r4, r5, r6, pc}
 801405c:	20009370 	.word	0x20009370
 8014060:	2000924c 	.word	0x2000924c
 8014064:	200092fc 	.word	0x200092fc
 8014068:	20009250 	.word	0x20009250
 801406c:	20009328 	.word	0x20009328
 8014070:	20009348 	.word	0x20009348
 8014074:	20009254 	.word	0x20009254

08014078 <xTaskCreateStatic>:
	{
 8014078:	b530      	push	{r4, r5, lr}
 801407a:	b087      	sub	sp, #28
 801407c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801407e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8014080:	b14d      	cbz	r5, 8014096 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8014082:	b98c      	cbnz	r4, 80140a8 <xTaskCreateStatic+0x30>
 8014084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014088:	f383 8811 	msr	BASEPRI, r3
 801408c:	f3bf 8f6f 	isb	sy
 8014090:	f3bf 8f4f 	dsb	sy
 8014094:	e7fe      	b.n	8014094 <xTaskCreateStatic+0x1c>
 8014096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801409a:	f383 8811 	msr	BASEPRI, r3
 801409e:	f3bf 8f6f 	isb	sy
 80140a2:	f3bf 8f4f 	dsb	sy
 80140a6:	e7fe      	b.n	80140a6 <xTaskCreateStatic+0x2e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80140a8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80140aa:	2502      	movs	r5, #2
 80140ac:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80140b0:	2500      	movs	r5, #0
 80140b2:	9503      	str	r5, [sp, #12]
 80140b4:	9402      	str	r4, [sp, #8]
 80140b6:	ad05      	add	r5, sp, #20
 80140b8:	9501      	str	r5, [sp, #4]
 80140ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80140bc:	9500      	str	r5, [sp, #0]
 80140be:	f7ff fe9d 	bl	8013dfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80140c2:	4620      	mov	r0, r4
 80140c4:	f7ff ff18 	bl	8013ef8 <prvAddNewTaskToReadyList>
	}
 80140c8:	9805      	ldr	r0, [sp, #20]
 80140ca:	b007      	add	sp, #28
 80140cc:	bd30      	pop	{r4, r5, pc}

080140ce <xTaskCreate>:
	{
 80140ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140d2:	b085      	sub	sp, #20
 80140d4:	4606      	mov	r6, r0
 80140d6:	460f      	mov	r7, r1
 80140d8:	4615      	mov	r5, r2
 80140da:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140dc:	0090      	lsls	r0, r2, #2
 80140de:	f7ff f8ff 	bl	80132e0 <pvPortMalloc>
			if( pxStack != NULL )
 80140e2:	b310      	cbz	r0, 801412a <xTaskCreate+0x5c>
 80140e4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80140e6:	2060      	movs	r0, #96	; 0x60
 80140e8:	f7ff f8fa 	bl	80132e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80140ec:	4604      	mov	r4, r0
 80140ee:	b1c0      	cbz	r0, 8014122 <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 80140f0:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80140f4:	b1dc      	cbz	r4, 801412e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80140f6:	2300      	movs	r3, #0
 80140f8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80140fc:	9303      	str	r3, [sp, #12]
 80140fe:	9402      	str	r4, [sp, #8]
 8014100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014102:	9301      	str	r3, [sp, #4]
 8014104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014106:	9300      	str	r3, [sp, #0]
 8014108:	4643      	mov	r3, r8
 801410a:	462a      	mov	r2, r5
 801410c:	4639      	mov	r1, r7
 801410e:	4630      	mov	r0, r6
 8014110:	f7ff fe74 	bl	8013dfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014114:	4620      	mov	r0, r4
 8014116:	f7ff feef 	bl	8013ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801411a:	2001      	movs	r0, #1
	}
 801411c:	b005      	add	sp, #20
 801411e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8014122:	4648      	mov	r0, r9
 8014124:	f7ff f960 	bl	80133e8 <vPortFree>
 8014128:	e7e4      	b.n	80140f4 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 801412a:	2400      	movs	r4, #0
 801412c:	e7e2      	b.n	80140f4 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801412e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8014132:	e7f3      	b.n	801411c <xTaskCreate+0x4e>

08014134 <vTaskStartScheduler>:
{
 8014134:	b510      	push	{r4, lr}
 8014136:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014138:	2400      	movs	r4, #0
 801413a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801413c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801413e:	aa07      	add	r2, sp, #28
 8014140:	a906      	add	r1, sp, #24
 8014142:	a805      	add	r0, sp, #20
 8014144:	f009 f972 	bl	801d42c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014148:	9b05      	ldr	r3, [sp, #20]
 801414a:	9302      	str	r3, [sp, #8]
 801414c:	9b06      	ldr	r3, [sp, #24]
 801414e:	9301      	str	r3, [sp, #4]
 8014150:	9400      	str	r4, [sp, #0]
 8014152:	4623      	mov	r3, r4
 8014154:	9a07      	ldr	r2, [sp, #28]
 8014156:	4911      	ldr	r1, [pc, #68]	; (801419c <vTaskStartScheduler+0x68>)
 8014158:	4811      	ldr	r0, [pc, #68]	; (80141a0 <vTaskStartScheduler+0x6c>)
 801415a:	f7ff ff8d 	bl	8014078 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801415e:	b118      	cbz	r0, 8014168 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 8014160:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 8014162:	b91b      	cbnz	r3, 801416c <vTaskStartScheduler+0x38>
}
 8014164:	b008      	add	sp, #32
 8014166:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8014168:	2300      	movs	r3, #0
 801416a:	e7fa      	b.n	8014162 <vTaskStartScheduler+0x2e>
 801416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014170:	f383 8811 	msr	BASEPRI, r3
 8014174:	f3bf 8f6f 	isb	sy
 8014178:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 801417c:	f04f 32ff 	mov.w	r2, #4294967295
 8014180:	4b08      	ldr	r3, [pc, #32]	; (80141a4 <vTaskStartScheduler+0x70>)
 8014182:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014184:	2201      	movs	r2, #1
 8014186:	4b08      	ldr	r3, [pc, #32]	; (80141a8 <vTaskStartScheduler+0x74>)
 8014188:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801418a:	2200      	movs	r2, #0
 801418c:	4b07      	ldr	r3, [pc, #28]	; (80141ac <vTaskStartScheduler+0x78>)
 801418e:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8014190:	f009 f934 	bl	801d3fc <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8014194:	f7fe ffa2 	bl	80130dc <xPortStartScheduler>
 8014198:	e7e4      	b.n	8014164 <vTaskStartScheduler+0x30>
 801419a:	bf00      	nop
 801419c:	08020adc 	.word	0x08020adc
 80141a0:	080144a5 	.word	0x080144a5
 80141a4:	20009328 	.word	0x20009328
 80141a8:	20009344 	.word	0x20009344
 80141ac:	20009370 	.word	0x20009370

080141b0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80141b0:	4a02      	ldr	r2, [pc, #8]	; (80141bc <vTaskSuspendAll+0xc>)
 80141b2:	6813      	ldr	r3, [r2, #0]
 80141b4:	3301      	adds	r3, #1
 80141b6:	6013      	str	r3, [r2, #0]
 80141b8:	4770      	bx	lr
 80141ba:	bf00      	nop
 80141bc:	200092f4 	.word	0x200092f4

080141c0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80141c0:	4b01      	ldr	r3, [pc, #4]	; (80141c8 <xTaskGetTickCount+0x8>)
 80141c2:	6818      	ldr	r0, [r3, #0]
}
 80141c4:	4770      	bx	lr
 80141c6:	bf00      	nop
 80141c8:	20009370 	.word	0x20009370

080141cc <xTaskGetTickCountFromISR>:
{
 80141cc:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80141ce:	f7fe fffb 	bl	80131c8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80141d2:	4b01      	ldr	r3, [pc, #4]	; (80141d8 <xTaskGetTickCountFromISR+0xc>)
 80141d4:	6818      	ldr	r0, [r3, #0]
}
 80141d6:	bd08      	pop	{r3, pc}
 80141d8:	20009370 	.word	0x20009370

080141dc <xTaskIncrementTick>:
{
 80141dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80141de:	4b3c      	ldr	r3, [pc, #240]	; (80142d0 <xTaskIncrementTick+0xf4>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d168      	bne.n	80142b8 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + 1;
 80141e6:	4b3b      	ldr	r3, [pc, #236]	; (80142d4 <xTaskIncrementTick+0xf8>)
 80141e8:	681d      	ldr	r5, [r3, #0]
 80141ea:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80141ec:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80141ee:	b9c5      	cbnz	r5, 8014222 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80141f0:	4b39      	ldr	r3, [pc, #228]	; (80142d8 <xTaskIncrementTick+0xfc>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	b143      	cbz	r3, 801420a <xTaskIncrementTick+0x2e>
 80141f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fc:	f383 8811 	msr	BASEPRI, r3
 8014200:	f3bf 8f6f 	isb	sy
 8014204:	f3bf 8f4f 	dsb	sy
 8014208:	e7fe      	b.n	8014208 <xTaskIncrementTick+0x2c>
 801420a:	4a33      	ldr	r2, [pc, #204]	; (80142d8 <xTaskIncrementTick+0xfc>)
 801420c:	6811      	ldr	r1, [r2, #0]
 801420e:	4b33      	ldr	r3, [pc, #204]	; (80142dc <xTaskIncrementTick+0x100>)
 8014210:	6818      	ldr	r0, [r3, #0]
 8014212:	6010      	str	r0, [r2, #0]
 8014214:	6019      	str	r1, [r3, #0]
 8014216:	4a32      	ldr	r2, [pc, #200]	; (80142e0 <xTaskIncrementTick+0x104>)
 8014218:	6813      	ldr	r3, [r2, #0]
 801421a:	3301      	adds	r3, #1
 801421c:	6013      	str	r3, [r2, #0]
 801421e:	f7ff fdd3 	bl	8013dc8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014222:	4b30      	ldr	r3, [pc, #192]	; (80142e4 <xTaskIncrementTick+0x108>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	429d      	cmp	r5, r3
 8014228:	d23a      	bcs.n	80142a0 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 801422a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801422c:	4b2e      	ldr	r3, [pc, #184]	; (80142e8 <xTaskIncrementTick+0x10c>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014232:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014236:	009a      	lsls	r2, r3, #2
 8014238:	4b2c      	ldr	r3, [pc, #176]	; (80142ec <xTaskIncrementTick+0x110>)
 801423a:	589b      	ldr	r3, [r3, r2]
 801423c:	2b01      	cmp	r3, #1
 801423e:	d940      	bls.n	80142c2 <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8014240:	2401      	movs	r4, #1
 8014242:	e03e      	b.n	80142c2 <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 8014244:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014246:	4b24      	ldr	r3, [pc, #144]	; (80142d8 <xTaskIncrementTick+0xfc>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	b353      	cbz	r3, 80142a4 <xTaskIncrementTick+0xc8>
 801424e:	2300      	movs	r3, #0
 8014250:	bb53      	cbnz	r3, 80142a8 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014252:	4b21      	ldr	r3, [pc, #132]	; (80142d8 <xTaskIncrementTick+0xfc>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	68db      	ldr	r3, [r3, #12]
 8014258:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801425a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 801425c:	429d      	cmp	r5, r3
 801425e:	d328      	bcc.n	80142b2 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014260:	1d37      	adds	r7, r6, #4
 8014262:	4638      	mov	r0, r7
 8014264:	f7fe fe29 	bl	8012eba <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014268:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 801426a:	b11b      	cbz	r3, 8014274 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801426c:	f106 0018 	add.w	r0, r6, #24
 8014270:	f7fe fe23 	bl	8012eba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014274:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8014276:	2201      	movs	r2, #1
 8014278:	409a      	lsls	r2, r3
 801427a:	491d      	ldr	r1, [pc, #116]	; (80142f0 <xTaskIncrementTick+0x114>)
 801427c:	6808      	ldr	r0, [r1, #0]
 801427e:	4302      	orrs	r2, r0
 8014280:	600a      	str	r2, [r1, #0]
 8014282:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014286:	009a      	lsls	r2, r3, #2
 8014288:	4639      	mov	r1, r7
 801428a:	4818      	ldr	r0, [pc, #96]	; (80142ec <xTaskIncrementTick+0x110>)
 801428c:	4410      	add	r0, r2
 801428e:	f7fe fdee 	bl	8012e6e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014292:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8014294:	4b14      	ldr	r3, [pc, #80]	; (80142e8 <xTaskIncrementTick+0x10c>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801429a:	429a      	cmp	r2, r3
 801429c:	d2d2      	bcs.n	8014244 <xTaskIncrementTick+0x68>
 801429e:	e7d2      	b.n	8014246 <xTaskIncrementTick+0x6a>
 80142a0:	2400      	movs	r4, #0
 80142a2:	e7d0      	b.n	8014246 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80142a4:	2301      	movs	r3, #1
 80142a6:	e7d3      	b.n	8014250 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80142a8:	f04f 32ff 	mov.w	r2, #4294967295
 80142ac:	4b0d      	ldr	r3, [pc, #52]	; (80142e4 <xTaskIncrementTick+0x108>)
 80142ae:	601a      	str	r2, [r3, #0]
					break;
 80142b0:	e7bc      	b.n	801422c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80142b2:	4a0c      	ldr	r2, [pc, #48]	; (80142e4 <xTaskIncrementTick+0x108>)
 80142b4:	6013      	str	r3, [r2, #0]
						break;
 80142b6:	e7b9      	b.n	801422c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80142b8:	4a0e      	ldr	r2, [pc, #56]	; (80142f4 <xTaskIncrementTick+0x118>)
 80142ba:	6813      	ldr	r3, [r2, #0]
 80142bc:	3301      	adds	r3, #1
 80142be:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80142c0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80142c2:	4b0d      	ldr	r3, [pc, #52]	; (80142f8 <xTaskIncrementTick+0x11c>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	b103      	cbz	r3, 80142ca <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 80142c8:	2401      	movs	r4, #1
}
 80142ca:	4620      	mov	r0, r4
 80142cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142ce:	bf00      	nop
 80142d0:	200092f4 	.word	0x200092f4
 80142d4:	20009370 	.word	0x20009370
 80142d8:	20009250 	.word	0x20009250
 80142dc:	20009254 	.word	0x20009254
 80142e0:	2000932c 	.word	0x2000932c
 80142e4:	20009328 	.word	0x20009328
 80142e8:	2000924c 	.word	0x2000924c
 80142ec:	20009258 	.word	0x20009258
 80142f0:	200092fc 	.word	0x200092fc
 80142f4:	200092f0 	.word	0x200092f0
 80142f8:	20009374 	.word	0x20009374

080142fc <xTaskResumeAll>:
{
 80142fc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80142fe:	4b35      	ldr	r3, [pc, #212]	; (80143d4 <xTaskResumeAll+0xd8>)
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	b943      	cbnz	r3, 8014316 <xTaskResumeAll+0x1a>
 8014304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014308:	f383 8811 	msr	BASEPRI, r3
 801430c:	f3bf 8f6f 	isb	sy
 8014310:	f3bf 8f4f 	dsb	sy
 8014314:	e7fe      	b.n	8014314 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8014316:	f7fe fe45 	bl	8012fa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801431a:	4b2e      	ldr	r3, [pc, #184]	; (80143d4 <xTaskResumeAll+0xd8>)
 801431c:	681a      	ldr	r2, [r3, #0]
 801431e:	3a01      	subs	r2, #1
 8014320:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d150      	bne.n	80143ca <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014328:	4b2b      	ldr	r3, [pc, #172]	; (80143d8 <xTaskResumeAll+0xdc>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	b923      	cbnz	r3, 8014338 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 801432e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8014330:	f7fe fe5a 	bl	8012fe8 <vPortExitCritical>
}
 8014334:	4620      	mov	r0, r4
 8014336:	bd38      	pop	{r3, r4, r5, pc}
 8014338:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801433a:	4b28      	ldr	r3, [pc, #160]	; (80143dc <xTaskResumeAll+0xe0>)
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	b31b      	cbz	r3, 8014388 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8014340:	4b26      	ldr	r3, [pc, #152]	; (80143dc <xTaskResumeAll+0xe0>)
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014346:	f104 0018 	add.w	r0, r4, #24
 801434a:	f7fe fdb6 	bl	8012eba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801434e:	1d25      	adds	r5, r4, #4
 8014350:	4628      	mov	r0, r5
 8014352:	f7fe fdb2 	bl	8012eba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014356:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014358:	2201      	movs	r2, #1
 801435a:	409a      	lsls	r2, r3
 801435c:	4920      	ldr	r1, [pc, #128]	; (80143e0 <xTaskResumeAll+0xe4>)
 801435e:	6808      	ldr	r0, [r1, #0]
 8014360:	4302      	orrs	r2, r0
 8014362:	600a      	str	r2, [r1, #0]
 8014364:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014368:	009a      	lsls	r2, r3, #2
 801436a:	4629      	mov	r1, r5
 801436c:	481d      	ldr	r0, [pc, #116]	; (80143e4 <xTaskResumeAll+0xe8>)
 801436e:	4410      	add	r0, r2
 8014370:	f7fe fd7d 	bl	8012e6e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014374:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014376:	4b1c      	ldr	r3, [pc, #112]	; (80143e8 <xTaskResumeAll+0xec>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801437c:	429a      	cmp	r2, r3
 801437e:	d3dc      	bcc.n	801433a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8014380:	2201      	movs	r2, #1
 8014382:	4b1a      	ldr	r3, [pc, #104]	; (80143ec <xTaskResumeAll+0xf0>)
 8014384:	601a      	str	r2, [r3, #0]
 8014386:	e7d8      	b.n	801433a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8014388:	b10c      	cbz	r4, 801438e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 801438a:	f7ff fd1d 	bl	8013dc8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801438e:	4b18      	ldr	r3, [pc, #96]	; (80143f0 <xTaskResumeAll+0xf4>)
 8014390:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014392:	b974      	cbnz	r4, 80143b2 <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 8014394:	4b15      	ldr	r3, [pc, #84]	; (80143ec <xTaskResumeAll+0xf0>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	b1cb      	cbz	r3, 80143ce <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 801439a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801439e:	4b15      	ldr	r3, [pc, #84]	; (80143f4 <xTaskResumeAll+0xf8>)
 80143a0:	601a      	str	r2, [r3, #0]
 80143a2:	f3bf 8f4f 	dsb	sy
 80143a6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80143aa:	2401      	movs	r4, #1
 80143ac:	e7c0      	b.n	8014330 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80143ae:	3c01      	subs	r4, #1
 80143b0:	d007      	beq.n	80143c2 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 80143b2:	f7ff ff13 	bl	80141dc <xTaskIncrementTick>
 80143b6:	2800      	cmp	r0, #0
 80143b8:	d0f9      	beq.n	80143ae <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 80143ba:	2201      	movs	r2, #1
 80143bc:	4b0b      	ldr	r3, [pc, #44]	; (80143ec <xTaskResumeAll+0xf0>)
 80143be:	601a      	str	r2, [r3, #0]
 80143c0:	e7f5      	b.n	80143ae <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 80143c2:	2200      	movs	r2, #0
 80143c4:	4b0a      	ldr	r3, [pc, #40]	; (80143f0 <xTaskResumeAll+0xf4>)
 80143c6:	601a      	str	r2, [r3, #0]
 80143c8:	e7e4      	b.n	8014394 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 80143ca:	2400      	movs	r4, #0
 80143cc:	e7b0      	b.n	8014330 <xTaskResumeAll+0x34>
 80143ce:	2400      	movs	r4, #0
 80143d0:	e7ae      	b.n	8014330 <xTaskResumeAll+0x34>
 80143d2:	bf00      	nop
 80143d4:	200092f4 	.word	0x200092f4
 80143d8:	200092e8 	.word	0x200092e8
 80143dc:	20009330 	.word	0x20009330
 80143e0:	200092fc 	.word	0x200092fc
 80143e4:	20009258 	.word	0x20009258
 80143e8:	2000924c 	.word	0x2000924c
 80143ec:	20009374 	.word	0x20009374
 80143f0:	200092f0 	.word	0x200092f0
 80143f4:	e000ed04 	.word	0xe000ed04

080143f8 <vTaskDelay>:
	{
 80143f8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80143fa:	b1a8      	cbz	r0, 8014428 <vTaskDelay+0x30>
 80143fc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80143fe:	4b10      	ldr	r3, [pc, #64]	; (8014440 <vTaskDelay+0x48>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	b143      	cbz	r3, 8014416 <vTaskDelay+0x1e>
 8014404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014408:	f383 8811 	msr	BASEPRI, r3
 801440c:	f3bf 8f6f 	isb	sy
 8014410:	f3bf 8f4f 	dsb	sy
 8014414:	e7fe      	b.n	8014414 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8014416:	f7ff fecb 	bl	80141b0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801441a:	2100      	movs	r1, #0
 801441c:	4620      	mov	r0, r4
 801441e:	f7ff fddf 	bl	8013fe0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8014422:	f7ff ff6b 	bl	80142fc <xTaskResumeAll>
 8014426:	e000      	b.n	801442a <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8014428:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 801442a:	b938      	cbnz	r0, 801443c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 801442c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014430:	4b04      	ldr	r3, [pc, #16]	; (8014444 <vTaskDelay+0x4c>)
 8014432:	601a      	str	r2, [r3, #0]
 8014434:	f3bf 8f4f 	dsb	sy
 8014438:	f3bf 8f6f 	isb	sy
 801443c:	bd10      	pop	{r4, pc}
 801443e:	bf00      	nop
 8014440:	200092f4 	.word	0x200092f4
 8014444:	e000ed04 	.word	0xe000ed04

08014448 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014448:	4b13      	ldr	r3, [pc, #76]	; (8014498 <prvCheckTasksWaitingTermination+0x50>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	b313      	cbz	r3, 8014494 <prvCheckTasksWaitingTermination+0x4c>
{
 801444e:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8014450:	f7ff feae 	bl	80141b0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8014454:	4b11      	ldr	r3, [pc, #68]	; (801449c <prvCheckTasksWaitingTermination+0x54>)
 8014456:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8014458:	f7ff ff50 	bl	80142fc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 801445c:	b924      	cbnz	r4, 8014468 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801445e:	4b0e      	ldr	r3, [pc, #56]	; (8014498 <prvCheckTasksWaitingTermination+0x50>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d1f4      	bne.n	8014450 <prvCheckTasksWaitingTermination+0x8>
}
 8014466:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 8014468:	f7fe fd9c 	bl	8012fa4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801446c:	4b0b      	ldr	r3, [pc, #44]	; (801449c <prvCheckTasksWaitingTermination+0x54>)
 801446e:	68db      	ldr	r3, [r3, #12]
 8014470:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014472:	1d20      	adds	r0, r4, #4
 8014474:	f7fe fd21 	bl	8012eba <uxListRemove>
					--uxCurrentNumberOfTasks;
 8014478:	4a09      	ldr	r2, [pc, #36]	; (80144a0 <prvCheckTasksWaitingTermination+0x58>)
 801447a:	6813      	ldr	r3, [r2, #0]
 801447c:	3b01      	subs	r3, #1
 801447e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8014480:	4a05      	ldr	r2, [pc, #20]	; (8014498 <prvCheckTasksWaitingTermination+0x50>)
 8014482:	6813      	ldr	r3, [r2, #0]
 8014484:	3b01      	subs	r3, #1
 8014486:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8014488:	f7fe fdae 	bl	8012fe8 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 801448c:	4620      	mov	r0, r4
 801448e:	f7ff fd89 	bl	8013fa4 <prvDeleteTCB>
 8014492:	e7e4      	b.n	801445e <prvCheckTasksWaitingTermination+0x16>
 8014494:	4770      	bx	lr
 8014496:	bf00      	nop
 8014498:	200092ec 	.word	0x200092ec
 801449c:	2000935c 	.word	0x2000935c
 80144a0:	200092e8 	.word	0x200092e8

080144a4 <prvIdleTask>:
{
 80144a4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80144a6:	f7ff ffcf 	bl	8014448 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80144aa:	4b06      	ldr	r3, [pc, #24]	; (80144c4 <prvIdleTask+0x20>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2b01      	cmp	r3, #1
 80144b0:	d9f9      	bls.n	80144a6 <prvIdleTask+0x2>
				taskYIELD();
 80144b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144b6:	4b04      	ldr	r3, [pc, #16]	; (80144c8 <prvIdleTask+0x24>)
 80144b8:	601a      	str	r2, [r3, #0]
 80144ba:	f3bf 8f4f 	dsb	sy
 80144be:	f3bf 8f6f 	isb	sy
 80144c2:	e7f0      	b.n	80144a6 <prvIdleTask+0x2>
 80144c4:	20009258 	.word	0x20009258
 80144c8:	e000ed04 	.word	0xe000ed04

080144cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80144cc:	4b27      	ldr	r3, [pc, #156]	; (801456c <vTaskSwitchContext+0xa0>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	b11b      	cbz	r3, 80144da <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80144d2:	2201      	movs	r2, #1
 80144d4:	4b26      	ldr	r3, [pc, #152]	; (8014570 <vTaskSwitchContext+0xa4>)
 80144d6:	601a      	str	r2, [r3, #0]
 80144d8:	4770      	bx	lr
{
 80144da:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 80144dc:	2200      	movs	r2, #0
 80144de:	4b24      	ldr	r3, [pc, #144]	; (8014570 <vTaskSwitchContext+0xa4>)
 80144e0:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80144e2:	f008 ff9d 	bl	801d420 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80144e6:	4b23      	ldr	r3, [pc, #140]	; (8014574 <vTaskSwitchContext+0xa8>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4298      	cmp	r0, r3
 80144ec:	d905      	bls.n	80144fa <vTaskSwitchContext+0x2e>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80144ee:	4a22      	ldr	r2, [pc, #136]	; (8014578 <vTaskSwitchContext+0xac>)
 80144f0:	6811      	ldr	r1, [r2, #0]
 80144f2:	1ac3      	subs	r3, r0, r3
 80144f4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80144f6:	4413      	add	r3, r2
 80144f8:	654b      	str	r3, [r1, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 80144fa:	4b1e      	ldr	r3, [pc, #120]	; (8014574 <vTaskSwitchContext+0xa8>)
 80144fc:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80144fe:	4b1f      	ldr	r3, [pc, #124]	; (801457c <vTaskSwitchContext+0xb0>)
 8014500:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8014502:	fab3 f383 	clz	r3, r3
 8014506:	b2db      	uxtb	r3, r3
 8014508:	f1c3 031f 	rsb	r3, r3, #31
 801450c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8014510:	008a      	lsls	r2, r1, #2
 8014512:	491b      	ldr	r1, [pc, #108]	; (8014580 <vTaskSwitchContext+0xb4>)
 8014514:	588a      	ldr	r2, [r1, r2]
 8014516:	b942      	cbnz	r2, 801452a <vTaskSwitchContext+0x5e>
	__asm volatile
 8014518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801451c:	f383 8811 	msr	BASEPRI, r3
 8014520:	f3bf 8f6f 	isb	sy
 8014524:	f3bf 8f4f 	dsb	sy
 8014528:	e7fe      	b.n	8014528 <vTaskSwitchContext+0x5c>
 801452a:	4815      	ldr	r0, [pc, #84]	; (8014580 <vTaskSwitchContext+0xb4>)
 801452c:	009a      	lsls	r2, r3, #2
 801452e:	18d4      	adds	r4, r2, r3
 8014530:	00a1      	lsls	r1, r4, #2
 8014532:	4401      	add	r1, r0
 8014534:	684c      	ldr	r4, [r1, #4]
 8014536:	6864      	ldr	r4, [r4, #4]
 8014538:	604c      	str	r4, [r1, #4]
 801453a:	441a      	add	r2, r3
 801453c:	0091      	lsls	r1, r2, #2
 801453e:	3108      	adds	r1, #8
 8014540:	4408      	add	r0, r1
 8014542:	4284      	cmp	r4, r0
 8014544:	d009      	beq.n	801455a <vTaskSwitchContext+0x8e>
 8014546:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801454a:	009a      	lsls	r2, r3, #2
 801454c:	4b0c      	ldr	r3, [pc, #48]	; (8014580 <vTaskSwitchContext+0xb4>)
 801454e:	4413      	add	r3, r2
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	68da      	ldr	r2, [r3, #12]
 8014554:	4b08      	ldr	r3, [pc, #32]	; (8014578 <vTaskSwitchContext+0xac>)
 8014556:	601a      	str	r2, [r3, #0]
 8014558:	bd10      	pop	{r4, pc}
 801455a:	6860      	ldr	r0, [r4, #4]
 801455c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014560:	0091      	lsls	r1, r2, #2
 8014562:	4a07      	ldr	r2, [pc, #28]	; (8014580 <vTaskSwitchContext+0xb4>)
 8014564:	440a      	add	r2, r1
 8014566:	6050      	str	r0, [r2, #4]
 8014568:	e7ed      	b.n	8014546 <vTaskSwitchContext+0x7a>
 801456a:	bf00      	nop
 801456c:	200092f4 	.word	0x200092f4
 8014570:	20009374 	.word	0x20009374
 8014574:	200092e4 	.word	0x200092e4
 8014578:	2000924c 	.word	0x2000924c
 801457c:	200092fc 	.word	0x200092fc
 8014580:	20009258 	.word	0x20009258

08014584 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8014584:	b940      	cbnz	r0, 8014598 <vTaskPlaceOnEventList+0x14>
 8014586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801458a:	f383 8811 	msr	BASEPRI, r3
 801458e:	f3bf 8f6f 	isb	sy
 8014592:	f3bf 8f4f 	dsb	sy
 8014596:	e7fe      	b.n	8014596 <vTaskPlaceOnEventList+0x12>
{
 8014598:	b510      	push	{r4, lr}
 801459a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801459c:	4b04      	ldr	r3, [pc, #16]	; (80145b0 <vTaskPlaceOnEventList+0x2c>)
 801459e:	6819      	ldr	r1, [r3, #0]
 80145a0:	3118      	adds	r1, #24
 80145a2:	f7fe fc70 	bl	8012e86 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80145a6:	2101      	movs	r1, #1
 80145a8:	4620      	mov	r0, r4
 80145aa:	f7ff fd19 	bl	8013fe0 <prvAddCurrentTaskToDelayedList>
 80145ae:	bd10      	pop	{r4, pc}
 80145b0:	2000924c 	.word	0x2000924c

080145b4 <xTaskRemoveFromEventList>:
{
 80145b4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80145b6:	68c3      	ldr	r3, [r0, #12]
 80145b8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80145ba:	b324      	cbz	r4, 8014606 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80145bc:	f104 0518 	add.w	r5, r4, #24
 80145c0:	4628      	mov	r0, r5
 80145c2:	f7fe fc7a 	bl	8012eba <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145c6:	4b18      	ldr	r3, [pc, #96]	; (8014628 <xTaskRemoveFromEventList+0x74>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	bb2b      	cbnz	r3, 8014618 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80145cc:	1d25      	adds	r5, r4, #4
 80145ce:	4628      	mov	r0, r5
 80145d0:	f7fe fc73 	bl	8012eba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80145d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80145d6:	2201      	movs	r2, #1
 80145d8:	409a      	lsls	r2, r3
 80145da:	4914      	ldr	r1, [pc, #80]	; (801462c <xTaskRemoveFromEventList+0x78>)
 80145dc:	6808      	ldr	r0, [r1, #0]
 80145de:	4302      	orrs	r2, r0
 80145e0:	600a      	str	r2, [r1, #0]
 80145e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80145e6:	009a      	lsls	r2, r3, #2
 80145e8:	4629      	mov	r1, r5
 80145ea:	4811      	ldr	r0, [pc, #68]	; (8014630 <xTaskRemoveFromEventList+0x7c>)
 80145ec:	4410      	add	r0, r2
 80145ee:	f7fe fc3e 	bl	8012e6e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80145f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80145f4:	4b0f      	ldr	r3, [pc, #60]	; (8014634 <xTaskRemoveFromEventList+0x80>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d911      	bls.n	8014622 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80145fe:	2001      	movs	r0, #1
 8014600:	4b0d      	ldr	r3, [pc, #52]	; (8014638 <xTaskRemoveFromEventList+0x84>)
 8014602:	6018      	str	r0, [r3, #0]
 8014604:	bd38      	pop	{r3, r4, r5, pc}
 8014606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801460a:	f383 8811 	msr	BASEPRI, r3
 801460e:	f3bf 8f6f 	isb	sy
 8014612:	f3bf 8f4f 	dsb	sy
 8014616:	e7fe      	b.n	8014616 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014618:	4629      	mov	r1, r5
 801461a:	4808      	ldr	r0, [pc, #32]	; (801463c <xTaskRemoveFromEventList+0x88>)
 801461c:	f7fe fc27 	bl	8012e6e <vListInsertEnd>
 8014620:	e7e7      	b.n	80145f2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8014622:	2000      	movs	r0, #0
}
 8014624:	bd38      	pop	{r3, r4, r5, pc}
 8014626:	bf00      	nop
 8014628:	200092f4 	.word	0x200092f4
 801462c:	200092fc 	.word	0x200092fc
 8014630:	20009258 	.word	0x20009258
 8014634:	2000924c 	.word	0x2000924c
 8014638:	20009374 	.word	0x20009374
 801463c:	20009330 	.word	0x20009330

08014640 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8014640:	b130      	cbz	r0, 8014650 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014642:	4a08      	ldr	r2, [pc, #32]	; (8014664 <vTaskSetTimeOutState+0x24>)
 8014644:	6812      	ldr	r2, [r2, #0]
 8014646:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014648:	4a07      	ldr	r2, [pc, #28]	; (8014668 <vTaskSetTimeOutState+0x28>)
 801464a:	6812      	ldr	r2, [r2, #0]
 801464c:	6042      	str	r2, [r0, #4]
 801464e:	4770      	bx	lr
 8014650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014654:	f383 8811 	msr	BASEPRI, r3
 8014658:	f3bf 8f6f 	isb	sy
 801465c:	f3bf 8f4f 	dsb	sy
 8014660:	e7fe      	b.n	8014660 <vTaskSetTimeOutState+0x20>
 8014662:	bf00      	nop
 8014664:	2000932c 	.word	0x2000932c
 8014668:	20009370 	.word	0x20009370

0801466c <xTaskCheckForTimeOut>:
{
 801466c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 801466e:	b1c0      	cbz	r0, 80146a2 <xTaskCheckForTimeOut+0x36>
 8014670:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8014672:	b1f9      	cbz	r1, 80146b4 <xTaskCheckForTimeOut+0x48>
 8014674:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8014676:	f7fe fc95 	bl	8012fa4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801467a:	4b1a      	ldr	r3, [pc, #104]	; (80146e4 <xTaskCheckForTimeOut+0x78>)
 801467c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 801467e:	682b      	ldr	r3, [r5, #0]
 8014680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014684:	d02a      	beq.n	80146dc <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014686:	6820      	ldr	r0, [r4, #0]
 8014688:	4a17      	ldr	r2, [pc, #92]	; (80146e8 <xTaskCheckForTimeOut+0x7c>)
 801468a:	6812      	ldr	r2, [r2, #0]
 801468c:	4290      	cmp	r0, r2
 801468e:	d002      	beq.n	8014696 <xTaskCheckForTimeOut+0x2a>
 8014690:	6862      	ldr	r2, [r4, #4]
 8014692:	4291      	cmp	r1, r2
 8014694:	d224      	bcs.n	80146e0 <xTaskCheckForTimeOut+0x74>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014696:	6862      	ldr	r2, [r4, #4]
 8014698:	1a88      	subs	r0, r1, r2
 801469a:	4283      	cmp	r3, r0
 801469c:	d813      	bhi.n	80146c6 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 801469e:	2401      	movs	r4, #1
 80146a0:	e018      	b.n	80146d4 <xTaskCheckForTimeOut+0x68>
 80146a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a6:	f383 8811 	msr	BASEPRI, r3
 80146aa:	f3bf 8f6f 	isb	sy
 80146ae:	f3bf 8f4f 	dsb	sy
 80146b2:	e7fe      	b.n	80146b2 <xTaskCheckForTimeOut+0x46>
 80146b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b8:	f383 8811 	msr	BASEPRI, r3
 80146bc:	f3bf 8f6f 	isb	sy
 80146c0:	f3bf 8f4f 	dsb	sy
 80146c4:	e7fe      	b.n	80146c4 <xTaskCheckForTimeOut+0x58>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80146c6:	1a52      	subs	r2, r2, r1
 80146c8:	4413      	add	r3, r2
 80146ca:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80146cc:	4620      	mov	r0, r4
 80146ce:	f7ff ffb7 	bl	8014640 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80146d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80146d4:	f7fe fc88 	bl	8012fe8 <vPortExitCritical>
}
 80146d8:	4620      	mov	r0, r4
 80146da:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 80146dc:	2400      	movs	r4, #0
 80146de:	e7f9      	b.n	80146d4 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 80146e0:	2401      	movs	r4, #1
 80146e2:	e7f7      	b.n	80146d4 <xTaskCheckForTimeOut+0x68>
 80146e4:	20009370 	.word	0x20009370
 80146e8:	2000932c 	.word	0x2000932c

080146ec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80146ec:	2201      	movs	r2, #1
 80146ee:	4b01      	ldr	r3, [pc, #4]	; (80146f4 <vTaskMissedYield+0x8>)
 80146f0:	601a      	str	r2, [r3, #0]
 80146f2:	4770      	bx	lr
 80146f4:	20009374 	.word	0x20009374

080146f8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80146f8:	4b05      	ldr	r3, [pc, #20]	; (8014710 <xTaskGetSchedulerState+0x18>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	b123      	cbz	r3, 8014708 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80146fe:	4b05      	ldr	r3, [pc, #20]	; (8014714 <xTaskGetSchedulerState+0x1c>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	b91b      	cbnz	r3, 801470c <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8014704:	2002      	movs	r0, #2
 8014706:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014708:	2001      	movs	r0, #1
 801470a:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 801470c:	2000      	movs	r0, #0
	}
 801470e:	4770      	bx	lr
 8014710:	20009344 	.word	0x20009344
 8014714:	200092f4 	.word	0x200092f4

08014718 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8014718:	2800      	cmp	r0, #0
 801471a:	d047      	beq.n	80147ac <vTaskPriorityInherit+0x94>
	{
 801471c:	b538      	push	{r3, r4, r5, lr}
 801471e:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014720:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014722:	4923      	ldr	r1, [pc, #140]	; (80147b0 <vTaskPriorityInherit+0x98>)
 8014724:	6809      	ldr	r1, [r1, #0]
 8014726:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8014728:	428b      	cmp	r3, r1
 801472a:	d216      	bcs.n	801475a <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801472c:	6981      	ldr	r1, [r0, #24]
 801472e:	2900      	cmp	r1, #0
 8014730:	db05      	blt.n	801473e <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014732:	491f      	ldr	r1, [pc, #124]	; (80147b0 <vTaskPriorityInherit+0x98>)
 8014734:	6809      	ldr	r1, [r1, #0]
 8014736:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8014738:	f1c1 0107 	rsb	r1, r1, #7
 801473c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801473e:	6960      	ldr	r0, [r4, #20]
 8014740:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014744:	0099      	lsls	r1, r3, #2
 8014746:	4b1b      	ldr	r3, [pc, #108]	; (80147b4 <vTaskPriorityInherit+0x9c>)
 8014748:	440b      	add	r3, r1
 801474a:	4298      	cmp	r0, r3
 801474c:	d006      	beq.n	801475c <vTaskPriorityInherit+0x44>
 801474e:	2300      	movs	r3, #0
 8014750:	b933      	cbnz	r3, 8014760 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014752:	4b17      	ldr	r3, [pc, #92]	; (80147b0 <vTaskPriorityInherit+0x98>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014758:	62e3      	str	r3, [r4, #44]	; 0x2c
 801475a:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801475c:	2301      	movs	r3, #1
 801475e:	e7f7      	b.n	8014750 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014760:	1d25      	adds	r5, r4, #4
 8014762:	4628      	mov	r0, r5
 8014764:	f7fe fba9 	bl	8012eba <uxListRemove>
 8014768:	b968      	cbnz	r0, 8014786 <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801476a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801476c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8014770:	008a      	lsls	r2, r1, #2
 8014772:	4910      	ldr	r1, [pc, #64]	; (80147b4 <vTaskPriorityInherit+0x9c>)
 8014774:	588a      	ldr	r2, [r1, r2]
 8014776:	b932      	cbnz	r2, 8014786 <vTaskPriorityInherit+0x6e>
 8014778:	2201      	movs	r2, #1
 801477a:	409a      	lsls	r2, r3
 801477c:	490e      	ldr	r1, [pc, #56]	; (80147b8 <vTaskPriorityInherit+0xa0>)
 801477e:	680b      	ldr	r3, [r1, #0]
 8014780:	ea23 0302 	bic.w	r3, r3, r2
 8014784:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014786:	4b0a      	ldr	r3, [pc, #40]	; (80147b0 <vTaskPriorityInherit+0x98>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801478c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 801478e:	2201      	movs	r2, #1
 8014790:	409a      	lsls	r2, r3
 8014792:	4909      	ldr	r1, [pc, #36]	; (80147b8 <vTaskPriorityInherit+0xa0>)
 8014794:	6808      	ldr	r0, [r1, #0]
 8014796:	4302      	orrs	r2, r0
 8014798:	600a      	str	r2, [r1, #0]
 801479a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801479e:	009a      	lsls	r2, r3, #2
 80147a0:	4629      	mov	r1, r5
 80147a2:	4804      	ldr	r0, [pc, #16]	; (80147b4 <vTaskPriorityInherit+0x9c>)
 80147a4:	4410      	add	r0, r2
 80147a6:	f7fe fb62 	bl	8012e6e <vListInsertEnd>
 80147aa:	bd38      	pop	{r3, r4, r5, pc}
 80147ac:	4770      	bx	lr
 80147ae:	bf00      	nop
 80147b0:	2000924c 	.word	0x2000924c
 80147b4:	20009258 	.word	0x20009258
 80147b8:	200092fc 	.word	0x200092fc

080147bc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80147bc:	2800      	cmp	r0, #0
 80147be:	d04a      	beq.n	8014856 <xTaskPriorityDisinherit+0x9a>
	{
 80147c0:	b538      	push	{r3, r4, r5, lr}
 80147c2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80147c4:	4a27      	ldr	r2, [pc, #156]	; (8014864 <xTaskPriorityDisinherit+0xa8>)
 80147c6:	6812      	ldr	r2, [r2, #0]
 80147c8:	4290      	cmp	r0, r2
 80147ca:	d008      	beq.n	80147de <xTaskPriorityDisinherit+0x22>
 80147cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d0:	f383 8811 	msr	BASEPRI, r3
 80147d4:	f3bf 8f6f 	isb	sy
 80147d8:	f3bf 8f4f 	dsb	sy
 80147dc:	e7fe      	b.n	80147dc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80147de:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80147e0:	b942      	cbnz	r2, 80147f4 <xTaskPriorityDisinherit+0x38>
 80147e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e6:	f383 8811 	msr	BASEPRI, r3
 80147ea:	f3bf 8f6f 	isb	sy
 80147ee:	f3bf 8f4f 	dsb	sy
 80147f2:	e7fe      	b.n	80147f2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80147f4:	3a01      	subs	r2, #1
 80147f6:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80147f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80147fa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80147fc:	4288      	cmp	r0, r1
 80147fe:	d02c      	beq.n	801485a <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014800:	bb6a      	cbnz	r2, 801485e <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014802:	1d25      	adds	r5, r4, #4
 8014804:	4628      	mov	r0, r5
 8014806:	f7fe fb58 	bl	8012eba <uxListRemove>
 801480a:	b970      	cbnz	r0, 801482a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801480c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801480e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8014812:	008b      	lsls	r3, r1, #2
 8014814:	4914      	ldr	r1, [pc, #80]	; (8014868 <xTaskPriorityDisinherit+0xac>)
 8014816:	58cb      	ldr	r3, [r1, r3]
 8014818:	b93b      	cbnz	r3, 801482a <xTaskPriorityDisinherit+0x6e>
 801481a:	2301      	movs	r3, #1
 801481c:	fa03 f202 	lsl.w	r2, r3, r2
 8014820:	4912      	ldr	r1, [pc, #72]	; (801486c <xTaskPriorityDisinherit+0xb0>)
 8014822:	680b      	ldr	r3, [r1, #0]
 8014824:	ea23 0302 	bic.w	r3, r3, r2
 8014828:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801482a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801482c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801482e:	f1c3 0207 	rsb	r2, r3, #7
 8014832:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8014834:	2401      	movs	r4, #1
 8014836:	fa04 f203 	lsl.w	r2, r4, r3
 801483a:	490c      	ldr	r1, [pc, #48]	; (801486c <xTaskPriorityDisinherit+0xb0>)
 801483c:	6808      	ldr	r0, [r1, #0]
 801483e:	4302      	orrs	r2, r0
 8014840:	600a      	str	r2, [r1, #0]
 8014842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014846:	009a      	lsls	r2, r3, #2
 8014848:	4629      	mov	r1, r5
 801484a:	4807      	ldr	r0, [pc, #28]	; (8014868 <xTaskPriorityDisinherit+0xac>)
 801484c:	4410      	add	r0, r2
 801484e:	f7fe fb0e 	bl	8012e6e <vListInsertEnd>
					xReturn = pdTRUE;
 8014852:	4620      	mov	r0, r4
 8014854:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8014856:	2000      	movs	r0, #0
 8014858:	4770      	bx	lr
 801485a:	2000      	movs	r0, #0
 801485c:	bd38      	pop	{r3, r4, r5, pc}
 801485e:	2000      	movs	r0, #0
	}
 8014860:	bd38      	pop	{r3, r4, r5, pc}
 8014862:	bf00      	nop
 8014864:	2000924c 	.word	0x2000924c
 8014868:	20009258 	.word	0x20009258
 801486c:	200092fc 	.word	0x200092fc

08014870 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8014870:	4b05      	ldr	r3, [pc, #20]	; (8014888 <pvTaskIncrementMutexHeldCount+0x18>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	b123      	cbz	r3, 8014880 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8014876:	4b04      	ldr	r3, [pc, #16]	; (8014888 <pvTaskIncrementMutexHeldCount+0x18>)
 8014878:	681a      	ldr	r2, [r3, #0]
 801487a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801487c:	3301      	adds	r3, #1
 801487e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8014880:	4b01      	ldr	r3, [pc, #4]	; (8014888 <pvTaskIncrementMutexHeldCount+0x18>)
 8014882:	6818      	ldr	r0, [r3, #0]
	}
 8014884:	4770      	bx	lr
 8014886:	bf00      	nop
 8014888:	2000924c 	.word	0x2000924c

0801488c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 801488c:	b510      	push	{r4, lr}
 801488e:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8014890:	680a      	ldr	r2, [r1, #0]
 8014892:	320c      	adds	r2, #12
 8014894:	f001 fb8e 	bl	8015fb4 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8014898:	4603      	mov	r3, r0
 801489a:	b908      	cbnz	r0, 80148a0 <netconn_apimsg+0x14>
    return apimsg->err;
 801489c:	f994 3004 	ldrsb.w	r3, [r4, #4]
  }
  return err;
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	bd10      	pop	{r4, pc}

080148a4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80148a4:	b500      	push	{lr}
 80148a6:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80148a8:	b160      	cbz	r0, 80148c4 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80148aa:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80148ac:	f88d 100c 	strb.w	r1, [sp, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80148b0:	2329      	movs	r3, #41	; 0x29
 80148b2:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80148b6:	a901      	add	r1, sp, #4
 80148b8:	4807      	ldr	r0, [pc, #28]	; (80148d8 <netconn_close_shutdown+0x34>)
 80148ba:	f7ff ffe7 	bl	801488c <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 80148be:	b007      	add	sp, #28
 80148c0:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80148c4:	4b05      	ldr	r3, [pc, #20]	; (80148dc <netconn_close_shutdown+0x38>)
 80148c6:	f44f 724a 	mov.w	r2, #808	; 0x328
 80148ca:	4905      	ldr	r1, [pc, #20]	; (80148e0 <netconn_close_shutdown+0x3c>)
 80148cc:	4805      	ldr	r0, [pc, #20]	; (80148e4 <netconn_close_shutdown+0x40>)
 80148ce:	f00a fd30 	bl	801f332 <iprintf>
 80148d2:	f06f 000f 	mvn.w	r0, #15
 80148d6:	e7f2      	b.n	80148be <netconn_close_shutdown+0x1a>
 80148d8:	08015c59 	.word	0x08015c59
 80148dc:	08020b40 	.word	0x08020b40
 80148e0:	08020b74 	.word	0x08020b74
 80148e4:	08020b90 	.word	0x08020b90

080148e8 <netconn_recv_data>:
{
 80148e8:	b570      	push	{r4, r5, r6, lr}
 80148ea:	b086      	sub	sp, #24
  void *buf = NULL;
 80148ec:	2300      	movs	r3, #0
 80148ee:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80148f0:	b199      	cbz	r1, 801491a <netconn_recv_data+0x32>
 80148f2:	4604      	mov	r4, r0
 80148f4:	460e      	mov	r6, r1
  *new_buf = NULL;
 80148f6:	2300      	movs	r3, #0
 80148f8:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80148fa:	b1c0      	cbz	r0, 801492e <netconn_recv_data+0x46>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 80148fc:	f100 0510 	add.w	r5, r0, #16
 8014900:	4628      	mov	r0, r5
 8014902:	f007 fdef 	bl	801c4e4 <sys_mbox_valid>
 8014906:	b9e0      	cbnz	r0, 8014942 <netconn_recv_data+0x5a>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8014908:	f104 0014 	add.w	r0, r4, #20
 801490c:	f007 fdea 	bl	801c4e4 <sys_mbox_valid>
 8014910:	2800      	cmp	r0, #0
 8014912:	d05e      	beq.n	80149d2 <netconn_recv_data+0xea>
 8014914:	f06f 000a 	mvn.w	r0, #10
 8014918:	e01c      	b.n	8014954 <netconn_recv_data+0x6c>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801491a:	4b2f      	ldr	r3, [pc, #188]	; (80149d8 <netconn_recv_data+0xf0>)
 801491c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8014920:	492e      	ldr	r1, [pc, #184]	; (80149dc <netconn_recv_data+0xf4>)
 8014922:	482f      	ldr	r0, [pc, #188]	; (80149e0 <netconn_recv_data+0xf8>)
 8014924:	f00a fd05 	bl	801f332 <iprintf>
 8014928:	f06f 000f 	mvn.w	r0, #15
 801492c:	e012      	b.n	8014954 <netconn_recv_data+0x6c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801492e:	4b2a      	ldr	r3, [pc, #168]	; (80149d8 <netconn_recv_data+0xf0>)
 8014930:	f240 12e9 	movw	r2, #489	; 0x1e9
 8014934:	492b      	ldr	r1, [pc, #172]	; (80149e4 <netconn_recv_data+0xfc>)
 8014936:	482a      	ldr	r0, [pc, #168]	; (80149e0 <netconn_recv_data+0xf8>)
 8014938:	f00a fcfb 	bl	801f332 <iprintf>
 801493c:	f06f 000f 	mvn.w	r0, #15
 8014940:	e008      	b.n	8014954 <netconn_recv_data+0x6c>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8014942:	4628      	mov	r0, r5
 8014944:	f007 fdce 	bl	801c4e4 <sys_mbox_valid>
 8014948:	b130      	cbz	r0, 8014958 <netconn_recv_data+0x70>
  if (ERR_IS_FATAL(conn->last_err)) {
 801494a:	f994 0008 	ldrsb.w	r0, [r4, #8]
 801494e:	f110 0f0c 	cmn.w	r0, #12
 8014952:	da0b      	bge.n	801496c <netconn_recv_data+0x84>
}
 8014954:	b006      	add	sp, #24
 8014956:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8014958:	4b1f      	ldr	r3, [pc, #124]	; (80149d8 <netconn_recv_data+0xf0>)
 801495a:	f240 12f5 	movw	r2, #501	; 0x1f5
 801495e:	4922      	ldr	r1, [pc, #136]	; (80149e8 <netconn_recv_data+0x100>)
 8014960:	481f      	ldr	r0, [pc, #124]	; (80149e0 <netconn_recv_data+0xf8>)
 8014962:	f00a fce6 	bl	801f332 <iprintf>
 8014966:	f06f 000a 	mvn.w	r0, #10
 801496a:	e7f3      	b.n	8014954 <netconn_recv_data+0x6c>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801496c:	2200      	movs	r2, #0
 801496e:	a905      	add	r1, sp, #20
 8014970:	4628      	mov	r0, r5
 8014972:	f007 fd78 	bl	801c466 <sys_arch_mbox_fetch>
    API_MSG_VAR_REF(msg).conn = conn;
 8014976:	9400      	str	r4, [sp, #0]
    if (buf != NULL) {
 8014978:	9b05      	ldr	r3, [sp, #20]
 801497a:	b18b      	cbz	r3, 80149a0 <netconn_recv_data+0xb8>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 801497c:	891b      	ldrh	r3, [r3, #8]
 801497e:	9302      	str	r3, [sp, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8014980:	4669      	mov	r1, sp
 8014982:	481a      	ldr	r0, [pc, #104]	; (80149ec <netconn_recv_data+0x104>)
 8014984:	f7ff ff82 	bl	801488c <netconn_apimsg>
    if (buf == NULL) {
 8014988:	9b05      	ldr	r3, [sp, #20]
 801498a:	b163      	cbz	r3, 80149a6 <netconn_recv_data+0xbe>
    len = ((struct pbuf *)buf)->tot_len;
 801498c:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801498e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014990:	b113      	cbz	r3, 8014998 <netconn_recv_data+0xb0>
 8014992:	2101      	movs	r1, #1
 8014994:	4620      	mov	r0, r4
 8014996:	4798      	blx	r3
  *new_buf = buf;
 8014998:	9b05      	ldr	r3, [sp, #20]
 801499a:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 801499c:	2000      	movs	r0, #0
 801499e:	e7d9      	b.n	8014954 <netconn_recv_data+0x6c>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 80149a0:	2301      	movs	r3, #1
 80149a2:	9302      	str	r3, [sp, #8]
 80149a4:	e7ec      	b.n	8014980 <netconn_recv_data+0x98>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80149a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80149a8:	b11b      	cbz	r3, 80149b2 <netconn_recv_data+0xca>
 80149aa:	2200      	movs	r2, #0
 80149ac:	2101      	movs	r1, #1
 80149ae:	4620      	mov	r0, r4
 80149b0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80149b2:	6863      	ldr	r3, [r4, #4]
 80149b4:	b933      	cbnz	r3, 80149c4 <netconn_recv_data+0xdc>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 80149b6:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80149ba:	2800      	cmp	r0, #0
 80149bc:	d1ca      	bne.n	8014954 <netconn_recv_data+0x6c>
 80149be:	f06f 000d 	mvn.w	r0, #13
 80149c2:	e7c7      	b.n	8014954 <netconn_recv_data+0x6c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80149c4:	2101      	movs	r1, #1
 80149c6:	4620      	mov	r0, r4
 80149c8:	f7ff ff6c 	bl	80148a4 <netconn_close_shutdown>
      return ERR_CLSD;
 80149cc:	f06f 000e 	mvn.w	r0, #14
 80149d0:	e7c0      	b.n	8014954 <netconn_recv_data+0x6c>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 80149d2:	f06f 000e 	mvn.w	r0, #14
 80149d6:	e7bd      	b.n	8014954 <netconn_recv_data+0x6c>
 80149d8:	08020b40 	.word	0x08020b40
 80149dc:	08020c54 	.word	0x08020c54
 80149e0:	08020b90 	.word	0x08020b90
 80149e4:	08020c74 	.word	0x08020c74
 80149e8:	08020c90 	.word	0x08020c90
 80149ec:	08015b05 	.word	0x08015b05

080149f0 <netconn_new_with_proto_and_callback>:
{
 80149f0:	b570      	push	{r4, r5, r6, lr}
 80149f2:	b086      	sub	sp, #24
 80149f4:	460d      	mov	r5, r1
  conn = netconn_alloc(t, callback);
 80149f6:	4611      	mov	r1, r2
 80149f8:	f000 fde0 	bl	80155bc <netconn_alloc>
  if (conn != NULL) {
 80149fc:	4604      	mov	r4, r0
 80149fe:	b140      	cbz	r0, 8014a12 <netconn_new_with_proto_and_callback+0x22>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8014a00:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8014a04:	a906      	add	r1, sp, #24
 8014a06:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8014a0a:	4820      	ldr	r0, [pc, #128]	; (8014a8c <netconn_new_with_proto_and_callback+0x9c>)
 8014a0c:	f7ff ff3e 	bl	801488c <netconn_apimsg>
    if (err != ERR_OK) {
 8014a10:	b910      	cbnz	r0, 8014a18 <netconn_new_with_proto_and_callback+0x28>
}
 8014a12:	4620      	mov	r0, r4
 8014a14:	b006      	add	sp, #24
 8014a16:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8014a18:	6863      	ldr	r3, [r4, #4]
 8014a1a:	b12b      	cbz	r3, 8014a28 <netconn_new_with_proto_and_callback+0x38>
 8014a1c:	4b1c      	ldr	r3, [pc, #112]	; (8014a90 <netconn_new_with_proto_and_callback+0xa0>)
 8014a1e:	2289      	movs	r2, #137	; 0x89
 8014a20:	491c      	ldr	r1, [pc, #112]	; (8014a94 <netconn_new_with_proto_and_callback+0xa4>)
 8014a22:	481d      	ldr	r0, [pc, #116]	; (8014a98 <netconn_new_with_proto_and_callback+0xa8>)
 8014a24:	f00a fc85 	bl	801f332 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014a28:	f104 0510 	add.w	r5, r4, #16
 8014a2c:	4628      	mov	r0, r5
 8014a2e:	f007 fd59 	bl	801c4e4 <sys_mbox_valid>
 8014a32:	b1b0      	cbz	r0, 8014a62 <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014a34:	f104 0014 	add.w	r0, r4, #20
 8014a38:	f007 fd54 	bl	801c4e4 <sys_mbox_valid>
 8014a3c:	b9c0      	cbnz	r0, 8014a70 <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014a3e:	f104 060c 	add.w	r6, r4, #12
 8014a42:	4630      	mov	r0, r6
 8014a44:	f007 fd98 	bl	801c578 <sys_sem_valid>
 8014a48:	b1c8      	cbz	r0, 8014a7e <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 8014a4a:	4630      	mov	r0, r6
 8014a4c:	f007 fd8f 	bl	801c56e <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8014a50:	4628      	mov	r0, r5
 8014a52:	f007 fce9 	bl	801c428 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8014a56:	4621      	mov	r1, r4
 8014a58:	2006      	movs	r0, #6
 8014a5a:	f003 fa19 	bl	8017e90 <memp_free>
      return NULL;
 8014a5e:	2400      	movs	r4, #0
 8014a60:	e7d7      	b.n	8014a12 <netconn_new_with_proto_and_callback+0x22>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014a62:	4b0b      	ldr	r3, [pc, #44]	; (8014a90 <netconn_new_with_proto_and_callback+0xa0>)
 8014a64:	228a      	movs	r2, #138	; 0x8a
 8014a66:	490d      	ldr	r1, [pc, #52]	; (8014a9c <netconn_new_with_proto_and_callback+0xac>)
 8014a68:	480b      	ldr	r0, [pc, #44]	; (8014a98 <netconn_new_with_proto_and_callback+0xa8>)
 8014a6a:	f00a fc62 	bl	801f332 <iprintf>
 8014a6e:	e7e1      	b.n	8014a34 <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014a70:	4b07      	ldr	r3, [pc, #28]	; (8014a90 <netconn_new_with_proto_and_callback+0xa0>)
 8014a72:	228c      	movs	r2, #140	; 0x8c
 8014a74:	490a      	ldr	r1, [pc, #40]	; (8014aa0 <netconn_new_with_proto_and_callback+0xb0>)
 8014a76:	4808      	ldr	r0, [pc, #32]	; (8014a98 <netconn_new_with_proto_and_callback+0xa8>)
 8014a78:	f00a fc5b 	bl	801f332 <iprintf>
 8014a7c:	e7df      	b.n	8014a3e <netconn_new_with_proto_and_callback+0x4e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014a7e:	4b04      	ldr	r3, [pc, #16]	; (8014a90 <netconn_new_with_proto_and_callback+0xa0>)
 8014a80:	228f      	movs	r2, #143	; 0x8f
 8014a82:	4908      	ldr	r1, [pc, #32]	; (8014aa4 <netconn_new_with_proto_and_callback+0xb4>)
 8014a84:	4804      	ldr	r0, [pc, #16]	; (8014a98 <netconn_new_with_proto_and_callback+0xa8>)
 8014a86:	f00a fc54 	bl	801f332 <iprintf>
 8014a8a:	e7de      	b.n	8014a4a <netconn_new_with_proto_and_callback+0x5a>
 8014a8c:	08015589 	.word	0x08015589
 8014a90:	08020b40 	.word	0x08020b40
 8014a94:	08020bd8 	.word	0x08020bd8
 8014a98:	08020b90 	.word	0x08020b90
 8014a9c:	08020bfc 	.word	0x08020bfc
 8014aa0:	08020c14 	.word	0x08020c14
 8014aa4:	08020c38 	.word	0x08020c38

08014aa8 <netconn_delete>:
{
 8014aa8:	b530      	push	{r4, r5, lr}
 8014aaa:	b087      	sub	sp, #28
  if (conn == NULL) {
 8014aac:	b188      	cbz	r0, 8014ad2 <netconn_delete+0x2a>
 8014aae:	4604      	mov	r4, r0
  API_MSG_VAR_REF(msg).conn = conn;
 8014ab0:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8014ab2:	2329      	movs	r3, #41	; 0x29
 8014ab4:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8014ab8:	a901      	add	r1, sp, #4
 8014aba:	4807      	ldr	r0, [pc, #28]	; (8014ad8 <netconn_delete+0x30>)
 8014abc:	f7ff fee6 	bl	801488c <netconn_apimsg>
  if (err != ERR_OK) {
 8014ac0:	4605      	mov	r5, r0
 8014ac2:	b110      	cbz	r0, 8014aca <netconn_delete+0x22>
}
 8014ac4:	4628      	mov	r0, r5
 8014ac6:	b007      	add	sp, #28
 8014ac8:	bd30      	pop	{r4, r5, pc}
  netconn_free(conn);
 8014aca:	4620      	mov	r0, r4
 8014acc:	f000 fdba 	bl	8015644 <netconn_free>
  return ERR_OK;
 8014ad0:	e7f8      	b.n	8014ac4 <netconn_delete+0x1c>
    return ERR_OK;
 8014ad2:	2500      	movs	r5, #0
 8014ad4:	e7f6      	b.n	8014ac4 <netconn_delete+0x1c>
 8014ad6:	bf00      	nop
 8014ad8:	08015861 	.word	0x08015861

08014adc <netconn_bind>:
{
 8014adc:	b500      	push	{lr}
 8014ade:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014ae0:	b160      	cbz	r0, 8014afc <netconn_bind+0x20>
 8014ae2:	4603      	mov	r3, r0
  if (addr == NULL) {
 8014ae4:	b199      	cbz	r1, 8014b0e <netconn_bind+0x32>
  API_MSG_VAR_REF(msg).conn = conn;
 8014ae6:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014ae8:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014aea:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8014aee:	a901      	add	r1, sp, #4
 8014af0:	4808      	ldr	r0, [pc, #32]	; (8014b14 <netconn_bind+0x38>)
 8014af2:	f7ff fecb 	bl	801488c <netconn_apimsg>
}
 8014af6:	b007      	add	sp, #28
 8014af8:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014afc:	4b06      	ldr	r3, [pc, #24]	; (8014b18 <netconn_bind+0x3c>)
 8014afe:	22ff      	movs	r2, #255	; 0xff
 8014b00:	4906      	ldr	r1, [pc, #24]	; (8014b1c <netconn_bind+0x40>)
 8014b02:	4807      	ldr	r0, [pc, #28]	; (8014b20 <netconn_bind+0x44>)
 8014b04:	f00a fc15 	bl	801f332 <iprintf>
 8014b08:	f06f 000f 	mvn.w	r0, #15
 8014b0c:	e7f3      	b.n	8014af6 <netconn_bind+0x1a>
    addr = IP4_ADDR_ANY;
 8014b0e:	4905      	ldr	r1, [pc, #20]	; (8014b24 <netconn_bind+0x48>)
 8014b10:	e7e9      	b.n	8014ae6 <netconn_bind+0xa>
 8014b12:	bf00      	nop
 8014b14:	080159c1 	.word	0x080159c1
 8014b18:	08020b40 	.word	0x08020b40
 8014b1c:	08020b24 	.word	0x08020b24
 8014b20:	08020b90 	.word	0x08020b90
 8014b24:	08024220 	.word	0x08024220

08014b28 <netconn_listen_with_backlog>:
{
 8014b28:	b500      	push	{lr}
 8014b2a:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014b2c:	b140      	cbz	r0, 8014b40 <netconn_listen_with_backlog+0x18>
  API_MSG_VAR_REF(msg).conn = conn;
 8014b2e:	a906      	add	r1, sp, #24
 8014b30:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8014b34:	4807      	ldr	r0, [pc, #28]	; (8014b54 <netconn_listen_with_backlog+0x2c>)
 8014b36:	f7ff fea9 	bl	801488c <netconn_apimsg>
}
 8014b3a:	b007      	add	sp, #28
 8014b3c:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014b40:	4b05      	ldr	r3, [pc, #20]	; (8014b58 <netconn_listen_with_backlog+0x30>)
 8014b42:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014b46:	4905      	ldr	r1, [pc, #20]	; (8014b5c <netconn_listen_with_backlog+0x34>)
 8014b48:	4805      	ldr	r0, [pc, #20]	; (8014b60 <netconn_listen_with_backlog+0x38>)
 8014b4a:	f00a fbf2 	bl	801f332 <iprintf>
 8014b4e:	f06f 000f 	mvn.w	r0, #15
 8014b52:	e7f2      	b.n	8014b3a <netconn_listen_with_backlog+0x12>
 8014b54:	08015a15 	.word	0x08015a15
 8014b58:	08020b40 	.word	0x08020b40
 8014b5c:	08020bb8 	.word	0x08020bb8
 8014b60:	08020b90 	.word	0x08020b90

08014b64 <netconn_accept>:
{
 8014b64:	b570      	push	{r4, r5, r6, lr}
 8014b66:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014b68:	b159      	cbz	r1, 8014b82 <netconn_accept+0x1e>
 8014b6a:	4604      	mov	r4, r0
 8014b6c:	460d      	mov	r5, r1
  *new_conn = NULL;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014b72:	b180      	cbz	r0, 8014b96 <netconn_accept+0x32>
  if (ERR_IS_FATAL(conn->last_err)) {
 8014b74:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8014b78:	f110 0f0c 	cmn.w	r0, #12
 8014b7c:	da15      	bge.n	8014baa <netconn_accept+0x46>
}
 8014b7e:	b002      	add	sp, #8
 8014b80:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014b82:	4b21      	ldr	r3, [pc, #132]	; (8014c08 <netconn_accept+0xa4>)
 8014b84:	f240 128d 	movw	r2, #397	; 0x18d
 8014b88:	4920      	ldr	r1, [pc, #128]	; (8014c0c <netconn_accept+0xa8>)
 8014b8a:	4821      	ldr	r0, [pc, #132]	; (8014c10 <netconn_accept+0xac>)
 8014b8c:	f00a fbd1 	bl	801f332 <iprintf>
 8014b90:	f06f 000f 	mvn.w	r0, #15
 8014b94:	e7f3      	b.n	8014b7e <netconn_accept+0x1a>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014b96:	4b1c      	ldr	r3, [pc, #112]	; (8014c08 <netconn_accept+0xa4>)
 8014b98:	f240 128f 	movw	r2, #399	; 0x18f
 8014b9c:	491d      	ldr	r1, [pc, #116]	; (8014c14 <netconn_accept+0xb0>)
 8014b9e:	481c      	ldr	r0, [pc, #112]	; (8014c10 <netconn_accept+0xac>)
 8014ba0:	f00a fbc7 	bl	801f332 <iprintf>
 8014ba4:	f06f 000f 	mvn.w	r0, #15
 8014ba8:	e7e9      	b.n	8014b7e <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8014baa:	f104 0614 	add.w	r6, r4, #20
 8014bae:	4630      	mov	r0, r6
 8014bb0:	f007 fc98 	bl	801c4e4 <sys_mbox_valid>
 8014bb4:	b308      	cbz	r0, 8014bfa <netconn_accept+0x96>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	a901      	add	r1, sp, #4
 8014bba:	4630      	mov	r0, r6
 8014bbc:	f007 fc53 	bl	801c466 <sys_arch_mbox_fetch>
  newconn = (struct netconn *)accept_ptr;
 8014bc0:	9e01      	ldr	r6, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014bc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014bc4:	b11b      	cbz	r3, 8014bce <netconn_accept+0x6a>
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	2101      	movs	r1, #1
 8014bca:	4620      	mov	r0, r4
 8014bcc:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 8014bce:	4b12      	ldr	r3, [pc, #72]	; (8014c18 <netconn_accept+0xb4>)
 8014bd0:	9a01      	ldr	r2, [sp, #4]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d014      	beq.n	8014c00 <netconn_accept+0x9c>
  if (newconn == NULL) {
 8014bd6:	b116      	cbz	r6, 8014bde <netconn_accept+0x7a>
  *new_conn = newconn;
 8014bd8:	602e      	str	r6, [r5, #0]
  return ERR_OK;
 8014bda:	2000      	movs	r0, #0
 8014bdc:	e7cf      	b.n	8014b7e <netconn_accept+0x1a>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8014bde:	f007 fd13 	bl	801c608 <sys_arch_protect>
 8014be2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014be6:	f113 0f0c 	cmn.w	r3, #12
 8014bea:	db01      	blt.n	8014bf0 <netconn_accept+0x8c>
 8014bec:	23f1      	movs	r3, #241	; 0xf1
 8014bee:	7223      	strb	r3, [r4, #8]
 8014bf0:	f007 fd16 	bl	801c620 <sys_arch_unprotect>
    return ERR_CLSD;
 8014bf4:	f06f 000e 	mvn.w	r0, #14
 8014bf8:	e7c1      	b.n	8014b7e <netconn_accept+0x1a>
    return ERR_CLSD;
 8014bfa:	f06f 000e 	mvn.w	r0, #14
 8014bfe:	e7be      	b.n	8014b7e <netconn_accept+0x1a>
    return ERR_ABRT;
 8014c00:	f06f 000c 	mvn.w	r0, #12
 8014c04:	e7bb      	b.n	8014b7e <netconn_accept+0x1a>
 8014c06:	bf00      	nop
 8014c08:	08020b40 	.word	0x08020b40
 8014c0c:	08020ae4 	.word	0x08020ae4
 8014c10:	08020b90 	.word	0x08020b90
 8014c14:	08020b04 	.word	0x08020b04
 8014c18:	2000a248 	.word	0x2000a248

08014c1c <netconn_recv>:
{
 8014c1c:	b570      	push	{r4, r5, r6, lr}
 8014c1e:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014c20:	b1f9      	cbz	r1, 8014c62 <netconn_recv+0x46>
 8014c22:	4605      	mov	r5, r0
 8014c24:	460e      	mov	r6, r1
  *new_buf = NULL;
 8014c26:	2300      	movs	r3, #0
 8014c28:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014c2a:	b320      	cbz	r0, 8014c76 <netconn_recv+0x5a>
    struct pbuf *p = NULL;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8014c30:	2005      	movs	r0, #5
 8014c32:	f003 f913 	bl	8017e5c <memp_malloc>
    if (buf == NULL) {
 8014c36:	4604      	mov	r4, r0
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	d033      	beq.n	8014ca4 <netconn_recv+0x88>
    err = netconn_recv_data(conn, (void **)&p);
 8014c3c:	a901      	add	r1, sp, #4
 8014c3e:	4628      	mov	r0, r5
 8014c40:	f7ff fe52 	bl	80148e8 <netconn_recv_data>
    if (err != ERR_OK) {
 8014c44:	4605      	mov	r5, r0
 8014c46:	bb00      	cbnz	r0, 8014c8a <netconn_recv+0x6e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014c48:	9b01      	ldr	r3, [sp, #4]
 8014c4a:	b31b      	cbz	r3, 8014c94 <netconn_recv+0x78>
    buf->p = p;
 8014c4c:	9b01      	ldr	r3, [sp, #4]
 8014c4e:	6023      	str	r3, [r4, #0]
    buf->ptr = p;
 8014c50:	9b01      	ldr	r3, [sp, #4]
 8014c52:	6063      	str	r3, [r4, #4]
    buf->port = 0;
 8014c54:	2300      	movs	r3, #0
 8014c56:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8014c58:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 8014c5a:	6034      	str	r4, [r6, #0]
}
 8014c5c:	4628      	mov	r0, r5
 8014c5e:	b002      	add	sp, #8
 8014c60:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014c62:	4b12      	ldr	r3, [pc, #72]	; (8014cac <netconn_recv+0x90>)
 8014c64:	f44f 721d 	mov.w	r2, #628	; 0x274
 8014c68:	4911      	ldr	r1, [pc, #68]	; (8014cb0 <netconn_recv+0x94>)
 8014c6a:	4812      	ldr	r0, [pc, #72]	; (8014cb4 <netconn_recv+0x98>)
 8014c6c:	f00a fb61 	bl	801f332 <iprintf>
 8014c70:	f06f 050f 	mvn.w	r5, #15
 8014c74:	e7f2      	b.n	8014c5c <netconn_recv+0x40>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014c76:	4b0d      	ldr	r3, [pc, #52]	; (8014cac <netconn_recv+0x90>)
 8014c78:	f240 2276 	movw	r2, #630	; 0x276
 8014c7c:	490e      	ldr	r1, [pc, #56]	; (8014cb8 <netconn_recv+0x9c>)
 8014c7e:	480d      	ldr	r0, [pc, #52]	; (8014cb4 <netconn_recv+0x98>)
 8014c80:	f00a fb57 	bl	801f332 <iprintf>
 8014c84:	f06f 050f 	mvn.w	r5, #15
 8014c88:	e7e8      	b.n	8014c5c <netconn_recv+0x40>
      memp_free(MEMP_NETBUF, buf);
 8014c8a:	4621      	mov	r1, r4
 8014c8c:	2005      	movs	r0, #5
 8014c8e:	f003 f8ff 	bl	8017e90 <memp_free>
      return err;
 8014c92:	e7e3      	b.n	8014c5c <netconn_recv+0x40>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014c94:	4b05      	ldr	r3, [pc, #20]	; (8014cac <netconn_recv+0x90>)
 8014c96:	f240 228a 	movw	r2, #650	; 0x28a
 8014c9a:	4908      	ldr	r1, [pc, #32]	; (8014cbc <netconn_recv+0xa0>)
 8014c9c:	4805      	ldr	r0, [pc, #20]	; (8014cb4 <netconn_recv+0x98>)
 8014c9e:	f00a fb48 	bl	801f332 <iprintf>
 8014ca2:	e7d3      	b.n	8014c4c <netconn_recv+0x30>
      return ERR_MEM;
 8014ca4:	f04f 35ff 	mov.w	r5, #4294967295
 8014ca8:	e7d8      	b.n	8014c5c <netconn_recv+0x40>
 8014caa:	bf00      	nop
 8014cac:	08020b40 	.word	0x08020b40
 8014cb0:	08020c54 	.word	0x08020c54
 8014cb4:	08020b90 	.word	0x08020b90
 8014cb8:	08020c74 	.word	0x08020c74
 8014cbc:	08020e78 	.word	0x08020e78

08014cc0 <netconn_write_partly>:
{
 8014cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cc2:	b087      	sub	sp, #28
 8014cc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014cc6:	b188      	cbz	r0, 8014cec <netconn_write_partly+0x2c>
 8014cc8:	4616      	mov	r6, r2
 8014cca:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8014ccc:	7802      	ldrb	r2, [r0, #0]
 8014cce:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8014cd2:	2a10      	cmp	r2, #16
 8014cd4:	d114      	bne.n	8014d00 <netconn_write_partly+0x40>
  if (size == 0) {
 8014cd6:	2e00      	cmp	r6, #0
 8014cd8:	d035      	beq.n	8014d46 <netconn_write_partly+0x86>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014cda:	7f02      	ldrb	r2, [r0, #28]
 8014cdc:	f012 0f02 	tst.w	r2, #2
 8014ce0:	d118      	bne.n	8014d14 <netconn_write_partly+0x54>
 8014ce2:	f013 0f04 	tst.w	r3, #4
 8014ce6:	d029      	beq.n	8014d3c <netconn_write_partly+0x7c>
 8014ce8:	2201      	movs	r2, #1
 8014cea:	e014      	b.n	8014d16 <netconn_write_partly+0x56>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014cec:	4b19      	ldr	r3, [pc, #100]	; (8014d54 <netconn_write_partly+0x94>)
 8014cee:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014cf2:	4919      	ldr	r1, [pc, #100]	; (8014d58 <netconn_write_partly+0x98>)
 8014cf4:	4819      	ldr	r0, [pc, #100]	; (8014d5c <netconn_write_partly+0x9c>)
 8014cf6:	f00a fb1c 	bl	801f332 <iprintf>
 8014cfa:	f06f 030f 	mvn.w	r3, #15
 8014cfe:	e023      	b.n	8014d48 <netconn_write_partly+0x88>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8014d00:	4b14      	ldr	r3, [pc, #80]	; (8014d54 <netconn_write_partly+0x94>)
 8014d02:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014d06:	4916      	ldr	r1, [pc, #88]	; (8014d60 <netconn_write_partly+0xa0>)
 8014d08:	4814      	ldr	r0, [pc, #80]	; (8014d5c <netconn_write_partly+0x9c>)
 8014d0a:	f00a fb12 	bl	801f332 <iprintf>
 8014d0e:	f06f 0305 	mvn.w	r3, #5
 8014d12:	e019      	b.n	8014d48 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014d14:	2201      	movs	r2, #1
  if (dontblock && !bytes_written) {
 8014d16:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 8014d1a:	b102      	cbz	r2, 8014d1e <netconn_write_partly+0x5e>
 8014d1c:	b1bd      	cbz	r5, 8014d4e <netconn_write_partly+0x8e>
  API_MSG_VAR_REF(msg).conn = conn;
 8014d1e:	9401      	str	r4, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8014d20:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8014d22:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8014d26:	9604      	str	r6, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8014d28:	a901      	add	r1, sp, #4
 8014d2a:	480e      	ldr	r0, [pc, #56]	; (8014d64 <netconn_write_partly+0xa4>)
 8014d2c:	f7ff fdae 	bl	801488c <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8014d30:	4603      	mov	r3, r0
 8014d32:	b948      	cbnz	r0, 8014d48 <netconn_write_partly+0x88>
 8014d34:	b145      	cbz	r5, 8014d48 <netconn_write_partly+0x88>
    if (dontblock) {
 8014d36:	b91f      	cbnz	r7, 8014d40 <netconn_write_partly+0x80>
      *bytes_written = size;
 8014d38:	602e      	str	r6, [r5, #0]
 8014d3a:	e005      	b.n	8014d48 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	e7ea      	b.n	8014d16 <netconn_write_partly+0x56>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8014d40:	9a04      	ldr	r2, [sp, #16]
 8014d42:	602a      	str	r2, [r5, #0]
 8014d44:	e000      	b.n	8014d48 <netconn_write_partly+0x88>
    return ERR_OK;
 8014d46:	2300      	movs	r3, #0
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	b007      	add	sp, #28
 8014d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8014d4e:	f06f 0305 	mvn.w	r3, #5
 8014d52:	e7f9      	b.n	8014d48 <netconn_write_partly+0x88>
 8014d54:	08020b40 	.word	0x08020b40
 8014d58:	08020cb0 	.word	0x08020cb0
 8014d5c:	08020b90 	.word	0x08020b90
 8014d60:	08020ccc 	.word	0x08020ccc
 8014d64:	08015b5d 	.word	0x08015b5d

08014d68 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8014d68:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8014d6a:	2103      	movs	r1, #3
 8014d6c:	f7ff fd9a 	bl	80148a4 <netconn_close_shutdown>
}
 8014d70:	bd08      	pop	{r3, pc}
	...

08014d74 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8014d74:	b510      	push	{r4, lr}
 8014d76:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8014d78:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 8014d7a:	4620      	mov	r0, r4
 8014d7c:	f003 ff67 	bl	8018c4e <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8014d80:	4908      	ldr	r1, [pc, #32]	; (8014da4 <setup_tcp+0x30>)
 8014d82:	4620      	mov	r0, r4
 8014d84:	f003 ff66 	bl	8018c54 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8014d88:	4907      	ldr	r1, [pc, #28]	; (8014da8 <setup_tcp+0x34>)
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	f003 ff7c 	bl	8018c88 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8014d90:	2202      	movs	r2, #2
 8014d92:	4906      	ldr	r1, [pc, #24]	; (8014dac <setup_tcp+0x38>)
 8014d94:	4620      	mov	r0, r4
 8014d96:	f003 ffb1 	bl	8018cfc <tcp_poll>
  tcp_err(pcb, err_tcp);
 8014d9a:	4905      	ldr	r1, [pc, #20]	; (8014db0 <setup_tcp+0x3c>)
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	f003 ff8b 	bl	8018cb8 <tcp_err>
 8014da2:	bd10      	pop	{r4, pc}
 8014da4:	080154b9 	.word	0x080154b9
 8014da8:	08015445 	.word	0x08015445
 8014dac:	080153c1 	.word	0x080153c1
 8014db0:	08014e0d 	.word	0x08014e0d

08014db4 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8014db4:	b538      	push	{r3, r4, r5, lr}
 8014db6:	4604      	mov	r4, r0
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8014db8:	6803      	ldr	r3, [r0, #0]
 8014dba:	685b      	ldr	r3, [r3, #4]
 8014dbc:	b133      	cbz	r3, 8014dcc <pcb_new+0x18>
 8014dbe:	4b10      	ldr	r3, [pc, #64]	; (8014e00 <pcb_new+0x4c>)
 8014dc0:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8014dc4:	490f      	ldr	r1, [pc, #60]	; (8014e04 <pcb_new+0x50>)
 8014dc6:	4810      	ldr	r0, [pc, #64]	; (8014e08 <pcb_new+0x54>)
 8014dc8:	f00a fab3 	bl	801f332 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8014dcc:	6825      	ldr	r5, [r4, #0]
 8014dce:	782b      	ldrb	r3, [r5, #0]
 8014dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014dd4:	2b10      	cmp	r3, #16
 8014dd6:	d002      	beq.n	8014dde <pcb_new+0x2a>
    }
    break;
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8014dd8:	23fa      	movs	r3, #250	; 0xfa
 8014dda:	7123      	strb	r3, [r4, #4]
    return;
 8014ddc:	bd38      	pop	{r3, r4, r5, pc}
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8014dde:	2000      	movs	r0, #0
 8014de0:	f004 fd00 	bl	80197e4 <tcp_new_ip_type>
 8014de4:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8014de6:	6820      	ldr	r0, [r4, #0]
 8014de8:	6843      	ldr	r3, [r0, #4]
 8014dea:	b10b      	cbz	r3, 8014df0 <pcb_new+0x3c>
      setup_tcp(msg->conn);
 8014dec:	f7ff ffc2 	bl	8014d74 <setup_tcp>
  }
  if (msg->conn->pcb.ip == NULL) {
 8014df0:	6823      	ldr	r3, [r4, #0]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	b103      	cbz	r3, 8014df8 <pcb_new+0x44>
 8014df6:	bd38      	pop	{r3, r4, r5, pc}
    msg->err = ERR_MEM;
 8014df8:	23ff      	movs	r3, #255	; 0xff
 8014dfa:	7123      	strb	r3, [r4, #4]
 8014dfc:	e7fb      	b.n	8014df6 <pcb_new+0x42>
 8014dfe:	bf00      	nop
 8014e00:	08020fb4 	.word	0x08020fb4
 8014e04:	08020fe8 	.word	0x08020fe8
 8014e08:	08020b90 	.word	0x08020b90

08014e0c <err_tcp>:
{
 8014e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e0e:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014e10:	4604      	mov	r4, r0
 8014e12:	2800      	cmp	r0, #0
 8014e14:	d038      	beq.n	8014e88 <err_tcp+0x7c>
  conn->pcb.tcp = NULL;
 8014e16:	2300      	movs	r3, #0
 8014e18:	6063      	str	r3, [r4, #4]
  old_state = conn->state;
 8014e1a:	7865      	ldrb	r5, [r4, #1]
  conn->state = NETCONN_NONE;
 8014e1c:	7063      	strb	r3, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 8014e1e:	2d04      	cmp	r5, #4
 8014e20:	d03a      	beq.n	8014e98 <err_tcp+0x8c>
    SYS_ARCH_SET(conn->last_err, err);
 8014e22:	f007 fbf1 	bl	801c608 <sys_arch_protect>
 8014e26:	7226      	strb	r6, [r4, #8]
 8014e28:	f007 fbfa 	bl	801c620 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8014e2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014e2e:	b11b      	cbz	r3, 8014e38 <err_tcp+0x2c>
 8014e30:	2200      	movs	r2, #0
 8014e32:	2104      	movs	r1, #4
 8014e34:	4620      	mov	r0, r4
 8014e36:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014e38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014e3a:	b11b      	cbz	r3, 8014e44 <err_tcp+0x38>
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	4611      	mov	r1, r2
 8014e40:	4620      	mov	r0, r4
 8014e42:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014e44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014e46:	b11b      	cbz	r3, 8014e50 <err_tcp+0x44>
 8014e48:	2200      	movs	r2, #0
 8014e4a:	2102      	movs	r1, #2
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 8014e50:	f104 0710 	add.w	r7, r4, #16
 8014e54:	4638      	mov	r0, r7
 8014e56:	f007 fb45 	bl	801c4e4 <sys_mbox_valid>
 8014e5a:	bb68      	cbnz	r0, 8014eb8 <err_tcp+0xac>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8014e5c:	f104 0714 	add.w	r7, r4, #20
 8014e60:	4638      	mov	r0, r7
 8014e62:	f007 fb3f 	bl	801c4e4 <sys_mbox_valid>
 8014e66:	bb60      	cbnz	r0, 8014ec2 <err_tcp+0xb6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8014e68:	2d01      	cmp	r5, #1
 8014e6a:	d02f      	beq.n	8014ecc <err_tcp+0xc0>
 8014e6c:	2d04      	cmp	r5, #4
 8014e6e:	d02d      	beq.n	8014ecc <err_tcp+0xc0>
 8014e70:	2d03      	cmp	r5, #3
 8014e72:	d02b      	beq.n	8014ecc <err_tcp+0xc0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8014e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e76:	b133      	cbz	r3, 8014e86 <err_tcp+0x7a>
 8014e78:	4b2e      	ldr	r3, [pc, #184]	; (8014f34 <err_tcp+0x128>)
 8014e7a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8014e7e:	492e      	ldr	r1, [pc, #184]	; (8014f38 <err_tcp+0x12c>)
 8014e80:	482e      	ldr	r0, [pc, #184]	; (8014f3c <err_tcp+0x130>)
 8014e82:	f00a fa56 	bl	801f332 <iprintf>
 8014e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014e88:	4b2a      	ldr	r3, [pc, #168]	; (8014f34 <err_tcp+0x128>)
 8014e8a:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014e8e:	492c      	ldr	r1, [pc, #176]	; (8014f40 <err_tcp+0x134>)
 8014e90:	482a      	ldr	r0, [pc, #168]	; (8014f3c <err_tcp+0x130>)
 8014e92:	f00a fa4e 	bl	801f332 <iprintf>
 8014e96:	e7be      	b.n	8014e16 <err_tcp+0xa>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8014e98:	b164      	cbz	r4, 8014eb4 <err_tcp+0xa8>
 8014e9a:	f007 fbb5 	bl	801c608 <sys_arch_protect>
 8014e9e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014ea2:	f113 0f0c 	cmn.w	r3, #12
 8014ea6:	db01      	blt.n	8014eac <err_tcp+0xa0>
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	7223      	strb	r3, [r4, #8]
 8014eac:	f007 fbb8 	bl	801c620 <sys_arch_unprotect>
    err = ERR_OK;
 8014eb0:	2600      	movs	r6, #0
 8014eb2:	e7bb      	b.n	8014e2c <err_tcp+0x20>
 8014eb4:	2600      	movs	r6, #0
 8014eb6:	e7b9      	b.n	8014e2c <err_tcp+0x20>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8014eb8:	2100      	movs	r1, #0
 8014eba:	4638      	mov	r0, r7
 8014ebc:	f007 fac9 	bl	801c452 <sys_mbox_trypost>
 8014ec0:	e7cc      	b.n	8014e5c <err_tcp+0x50>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8014ec2:	2100      	movs	r1, #0
 8014ec4:	4638      	mov	r0, r7
 8014ec6:	f007 fac4 	bl	801c452 <sys_mbox_trypost>
 8014eca:	e7cd      	b.n	8014e68 <err_tcp+0x5c>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8014ecc:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8014ece:	f023 0204 	bic.w	r2, r3, #4
 8014ed2:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8014ed4:	f013 0f04 	tst.w	r3, #4
 8014ed8:	d1d5      	bne.n	8014e86 <err_tcp+0x7a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014edc:	b1cb      	cbz	r3, 8014f12 <err_tcp+0x106>
      conn->current_msg->err = err;
 8014ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ee0:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8014ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ee4:	681d      	ldr	r5, [r3, #0]
 8014ee6:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8014ee8:	4628      	mov	r0, r5
 8014eea:	f007 fb45 	bl	801c578 <sys_sem_valid>
 8014eee:	b1c0      	cbz	r0, 8014f22 <err_tcp+0x116>
      conn->current_msg = NULL;
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8014ef4:	b14c      	cbz	r4, 8014f0a <err_tcp+0xfe>
 8014ef6:	f007 fb87 	bl	801c608 <sys_arch_protect>
 8014efa:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014efe:	f113 0f0c 	cmn.w	r3, #12
 8014f02:	db00      	blt.n	8014f06 <err_tcp+0xfa>
 8014f04:	7226      	strb	r6, [r4, #8]
 8014f06:	f007 fb8b 	bl	801c620 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8014f0a:	4628      	mov	r0, r5
 8014f0c:	f007 fb2a 	bl	801c564 <sys_sem_signal>
 8014f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014f12:	4b08      	ldr	r3, [pc, #32]	; (8014f34 <err_tcp+0x128>)
 8014f14:	f240 12b3 	movw	r2, #435	; 0x1b3
 8014f18:	490a      	ldr	r1, [pc, #40]	; (8014f44 <err_tcp+0x138>)
 8014f1a:	4808      	ldr	r0, [pc, #32]	; (8014f3c <err_tcp+0x130>)
 8014f1c:	f00a fa09 	bl	801f332 <iprintf>
 8014f20:	e7dd      	b.n	8014ede <err_tcp+0xd2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8014f22:	4b04      	ldr	r3, [pc, #16]	; (8014f34 <err_tcp+0x128>)
 8014f24:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014f28:	4907      	ldr	r1, [pc, #28]	; (8014f48 <err_tcp+0x13c>)
 8014f2a:	4804      	ldr	r0, [pc, #16]	; (8014f3c <err_tcp+0x130>)
 8014f2c:	f00a fa01 	bl	801f332 <iprintf>
 8014f30:	e7de      	b.n	8014ef0 <err_tcp+0xe4>
 8014f32:	bf00      	nop
 8014f34:	08020fb4 	.word	0x08020fb4
 8014f38:	08020d38 	.word	0x08020d38
 8014f3c:	08020b90 	.word	0x08020b90
 8014f40:	08020cf0 	.word	0x08020cf0
 8014f44:	08020d00 	.word	0x08020d00
 8014f48:	08020d1c 	.word	0x08020d1c

08014f4c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8014f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f50:	4688      	mov	r8, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8014f52:	4604      	mov	r4, r0
 8014f54:	b1f0      	cbz	r0, 8014f94 <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8014f56:	7863      	ldrb	r3, [r4, #1]
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	d006      	beq.n	8014f6a <lwip_netconn_do_writemore+0x1e>
 8014f5c:	4b7b      	ldr	r3, [pc, #492]	; (801514c <lwip_netconn_do_writemore+0x200>)
 8014f5e:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8014f62:	497b      	ldr	r1, [pc, #492]	; (8015150 <lwip_netconn_do_writemore+0x204>)
 8014f64:	487b      	ldr	r0, [pc, #492]	; (8015154 <lwip_netconn_do_writemore+0x208>)
 8014f66:	f00a f9e4 	bl	801f332 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f6c:	b1d3      	cbz	r3, 8014fa4 <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8014f6e:	6863      	ldr	r3, [r4, #4]
 8014f70:	b303      	cbz	r3, 8014fb4 <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8014f72:	6a22      	ldr	r2, [r4, #32]
 8014f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f76:	68db      	ldr	r3, [r3, #12]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d223      	bcs.n	8014fc4 <lwip_netconn_do_writemore+0x78>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8014f7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014f7e:	f892 9010 	ldrb.w	r9, [r2, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014f82:	7f23      	ldrb	r3, [r4, #28]
 8014f84:	f013 0f02 	tst.w	r3, #2
 8014f88:	d124      	bne.n	8014fd4 <lwip_netconn_do_writemore+0x88>
 8014f8a:	f019 0f04 	tst.w	r9, #4
 8014f8e:	d039      	beq.n	8015004 <lwip_netconn_do_writemore+0xb8>
 8014f90:	2601      	movs	r6, #1
 8014f92:	e020      	b.n	8014fd6 <lwip_netconn_do_writemore+0x8a>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8014f94:	4b6d      	ldr	r3, [pc, #436]	; (801514c <lwip_netconn_do_writemore+0x200>)
 8014f96:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8014f9a:	496f      	ldr	r1, [pc, #444]	; (8015158 <lwip_netconn_do_writemore+0x20c>)
 8014f9c:	486d      	ldr	r0, [pc, #436]	; (8015154 <lwip_netconn_do_writemore+0x208>)
 8014f9e:	f00a f9c8 	bl	801f332 <iprintf>
 8014fa2:	e7d8      	b.n	8014f56 <lwip_netconn_do_writemore+0xa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014fa4:	4b69      	ldr	r3, [pc, #420]	; (801514c <lwip_netconn_do_writemore+0x200>)
 8014fa6:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8014faa:	496c      	ldr	r1, [pc, #432]	; (801515c <lwip_netconn_do_writemore+0x210>)
 8014fac:	4869      	ldr	r0, [pc, #420]	; (8015154 <lwip_netconn_do_writemore+0x208>)
 8014fae:	f00a f9c0 	bl	801f332 <iprintf>
 8014fb2:	e7dc      	b.n	8014f6e <lwip_netconn_do_writemore+0x22>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8014fb4:	4b65      	ldr	r3, [pc, #404]	; (801514c <lwip_netconn_do_writemore+0x200>)
 8014fb6:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8014fba:	4969      	ldr	r1, [pc, #420]	; (8015160 <lwip_netconn_do_writemore+0x214>)
 8014fbc:	4865      	ldr	r0, [pc, #404]	; (8015154 <lwip_netconn_do_writemore+0x208>)
 8014fbe:	f00a f9b8 	bl	801f332 <iprintf>
 8014fc2:	e7d6      	b.n	8014f72 <lwip_netconn_do_writemore+0x26>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8014fc4:	4b61      	ldr	r3, [pc, #388]	; (801514c <lwip_netconn_do_writemore+0x200>)
 8014fc6:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8014fca:	4966      	ldr	r1, [pc, #408]	; (8015164 <lwip_netconn_do_writemore+0x218>)
 8014fcc:	4861      	ldr	r0, [pc, #388]	; (8015154 <lwip_netconn_do_writemore+0x208>)
 8014fce:	f00a f9b0 	bl	801f332 <iprintf>
 8014fd2:	e7d3      	b.n	8014f7c <lwip_netconn_do_writemore+0x30>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014fd4:	2601      	movs	r6, #1
 8014fd6:	b2f6      	uxtb	r6, r6
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8014fd8:	6897      	ldr	r7, [r2, #8]
 8014fda:	6a23      	ldr	r3, [r4, #32]
 8014fdc:	441f      	add	r7, r3
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8014fde:	68d2      	ldr	r2, [r2, #12]
 8014fe0:	1ad5      	subs	r5, r2, r3
    if (diff > 0xffffUL) { /* max_u16_t */
 8014fe2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8014fe6:	d30f      	bcc.n	8015008 <lwip_netconn_do_writemore+0xbc>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 8014fe8:	f049 0902 	orr.w	r9, r9, #2
      len = 0xffff;
 8014fec:	f64f 75ff 	movw	r5, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8014ff0:	6861      	ldr	r1, [r4, #4]
 8014ff2:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
    if (available < len) {
 8014ff6:	428d      	cmp	r5, r1
 8014ff8:	d90b      	bls.n	8015012 <lwip_netconn_do_writemore+0xc6>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 8014ffa:	b13e      	cbz	r6, 801500c <lwip_netconn_do_writemore+0xc0>
        if (!len) {
 8014ffc:	2900      	cmp	r1, #0
 8014ffe:	d039      	beq.n	8015074 <lwip_netconn_do_writemore+0x128>
      len = available;
 8015000:	460d      	mov	r5, r1
 8015002:	e006      	b.n	8015012 <lwip_netconn_do_writemore+0xc6>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015004:	2600      	movs	r6, #0
 8015006:	e7e6      	b.n	8014fd6 <lwip_netconn_do_writemore+0x8a>
      len = (u16_t)diff;
 8015008:	b2ad      	uxth	r5, r5
 801500a:	e7f1      	b.n	8014ff0 <lwip_netconn_do_writemore+0xa4>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 801500c:	f049 0902 	orr.w	r9, r9, #2
      len = available;
 8015010:	460d      	mov	r5, r1
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8015012:	442b      	add	r3, r5
 8015014:	429a      	cmp	r2, r3
 8015016:	d325      	bcc.n	8015064 <lwip_netconn_do_writemore+0x118>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8015018:	464b      	mov	r3, r9
 801501a:	462a      	mov	r2, r5
 801501c:	4639      	mov	r1, r7
 801501e:	6860      	ldr	r0, [r4, #4]
 8015020:	f006 f9cc 	bl	801b3bc <tcp_write>
 8015024:	4607      	mov	r7, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8015026:	1c43      	adds	r3, r0, #1
 8015028:	b2db      	uxtb	r3, r3
 801502a:	2b01      	cmp	r3, #1
 801502c:	d925      	bls.n	801507a <lwip_netconn_do_writemore+0x12e>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 801502e:	2f00      	cmp	r7, #0
 8015030:	d146      	bne.n	80150c0 <lwip_netconn_do_writemore+0x174>
      err_t out_err;
      conn->write_offset += len;
 8015032:	6a23      	ldr	r3, [r4, #32]
 8015034:	441d      	add	r5, r3
 8015036:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8015038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801503a:	68da      	ldr	r2, [r3, #12]
 801503c:	4295      	cmp	r5, r2
 801503e:	d000      	beq.n	8015042 <lwip_netconn_do_writemore+0xf6>
 8015040:	b10e      	cbz	r6, 8015046 <lwip_netconn_do_writemore+0xfa>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8015042:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8015044:	2601      	movs	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8015046:	6860      	ldr	r0, [r4, #4]
 8015048:	f006 fd66 	bl	801bb18 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 801504c:	f110 0f0c 	cmn.w	r0, #12
 8015050:	db02      	blt.n	8015058 <lwip_netconn_do_writemore+0x10c>
 8015052:	f110 0f04 	cmn.w	r0, #4
 8015056:	d13a      	bne.n	80150ce <lwip_netconn_do_writemore+0x182>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 8015058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801505a:	2200      	movs	r2, #0
 801505c:	60da      	str	r2, [r3, #12]
        err = out_err;
 801505e:	4607      	mov	r7, r0
        write_finished = 1;
 8015060:	2601      	movs	r6, #1
 8015062:	e034      	b.n	80150ce <lwip_netconn_do_writemore+0x182>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8015064:	4b39      	ldr	r3, [pc, #228]	; (801514c <lwip_netconn_do_writemore+0x200>)
 8015066:	f240 6213 	movw	r2, #1555	; 0x613
 801506a:	493f      	ldr	r1, [pc, #252]	; (8015168 <lwip_netconn_do_writemore+0x21c>)
 801506c:	4839      	ldr	r0, [pc, #228]	; (8015154 <lwip_netconn_do_writemore+0x208>)
 801506e:	f00a f960 	bl	801f332 <iprintf>
 8015072:	e7d1      	b.n	8015018 <lwip_netconn_do_writemore+0xcc>
      len = available;
 8015074:	460d      	mov	r5, r1
          err = ERR_WOULDBLOCK;
 8015076:	f06f 0706 	mvn.w	r7, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 801507a:	b176      	cbz	r6, 801509a <lwip_netconn_do_writemore+0x14e>
 801507c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801507e:	68db      	ldr	r3, [r3, #12]
 8015080:	429d      	cmp	r5, r3
 8015082:	d20a      	bcs.n	801509a <lwip_netconn_do_writemore+0x14e>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8015084:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015086:	b11b      	cbz	r3, 8015090 <lwip_netconn_do_writemore+0x144>
 8015088:	462a      	mov	r2, r5
 801508a:	2103      	movs	r1, #3
 801508c:	4620      	mov	r0, r4
 801508e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8015090:	7f23      	ldrb	r3, [r4, #28]
 8015092:	f043 0310 	orr.w	r3, r3, #16
 8015096:	7723      	strb	r3, [r4, #28]
 8015098:	e7c9      	b.n	801502e <lwip_netconn_do_writemore+0xe2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801509a:	6863      	ldr	r3, [r4, #4]
 801509c:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 80150a0:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80150a4:	4291      	cmp	r1, r2
 80150a6:	d903      	bls.n	80150b0 <lwip_netconn_do_writemore+0x164>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80150a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80150ac:	2b04      	cmp	r3, #4
 80150ae:	d9be      	bls.n	801502e <lwip_netconn_do_writemore+0xe2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80150b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d0bb      	beq.n	801502e <lwip_netconn_do_writemore+0xe2>
 80150b6:	462a      	mov	r2, r5
 80150b8:	2103      	movs	r1, #3
 80150ba:	4620      	mov	r0, r4
 80150bc:	4798      	blx	r3
 80150be:	e7b6      	b.n	801502e <lwip_netconn_do_writemore+0xe2>
      }
    } else if (err == ERR_MEM) {
 80150c0:	f1b7 3fff 	cmp.w	r7, #4294967295
 80150c4:	d01f      	beq.n	8015106 <lwip_netconn_do_writemore+0x1ba>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 80150c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150c8:	2200      	movs	r2, #0
 80150ca:	60da      	str	r2, [r3, #12]
      write_finished = 1;
 80150cc:	2601      	movs	r6, #1
    }
  }
  if (write_finished) {
 80150ce:	2e00      	cmp	r6, #0
 80150d0:	d037      	beq.n	8015142 <lwip_netconn_do_writemore+0x1f6>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80150d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150d4:	6818      	ldr	r0, [r3, #0]
 80150d6:	f100 050c 	add.w	r5, r0, #12
    conn->current_msg->err = err;
 80150da:	711f      	strb	r7, [r3, #4]
    conn->current_msg = NULL;
 80150dc:	2300      	movs	r3, #0
 80150de:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 80150e0:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 80150e2:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80150e4:	b14c      	cbz	r4, 80150fa <lwip_netconn_do_writemore+0x1ae>
 80150e6:	f007 fa8f 	bl	801c608 <sys_arch_protect>
 80150ea:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80150ee:	f113 0f0c 	cmn.w	r3, #12
 80150f2:	db00      	blt.n	80150f6 <lwip_netconn_do_writemore+0x1aa>
 80150f4:	7227      	strb	r7, [r4, #8]
 80150f6:	f007 fa93 	bl	801c620 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80150fa:	f1b8 0f00 	cmp.w	r8, #0
 80150fe:	d11a      	bne.n	8015136 <lwip_netconn_do_writemore+0x1ea>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8015100:	2000      	movs	r0, #0
}
 8015102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      err_t out_err = tcp_output(conn->pcb.tcp);
 8015106:	6860      	ldr	r0, [r4, #4]
 8015108:	f006 fd06 	bl	801bb18 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 801510c:	f110 0f0c 	cmn.w	r0, #12
 8015110:	db0b      	blt.n	801512a <lwip_netconn_do_writemore+0x1de>
 8015112:	f110 0f04 	cmn.w	r0, #4
 8015116:	d008      	beq.n	801512a <lwip_netconn_do_writemore+0x1de>
      } else if (dontblock) {
 8015118:	2e00      	cmp	r6, #0
 801511a:	d0d8      	beq.n	80150ce <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 801511c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801511e:	2200      	movs	r2, #0
 8015120:	60da      	str	r2, [r3, #12]
        write_finished = 1;
 8015122:	2601      	movs	r6, #1
        err = ERR_WOULDBLOCK;
 8015124:	f06f 0706 	mvn.w	r7, #6
 8015128:	e7d1      	b.n	80150ce <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 801512a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801512c:	2200      	movs	r2, #0
 801512e:	60da      	str	r2, [r3, #12]
        err = out_err;
 8015130:	4607      	mov	r7, r0
        write_finished = 1;
 8015132:	2601      	movs	r6, #1
        conn->current_msg->msg.w.len = 0;
 8015134:	e7cb      	b.n	80150ce <lwip_netconn_do_writemore+0x182>
      sys_sem_signal(op_completed_sem);
 8015136:	4628      	mov	r0, r5
 8015138:	f007 fa14 	bl	801c564 <sys_sem_signal>
  return ERR_OK;
 801513c:	2000      	movs	r0, #0
 801513e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 8015142:	f04f 30ff 	mov.w	r0, #4294967295
 8015146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801514a:	bf00      	nop
 801514c:	08020fb4 	.word	0x08020fb4
 8015150:	08020e4c 	.word	0x08020e4c
 8015154:	08020b90 	.word	0x08020b90
 8015158:	08020cf0 	.word	0x08020cf0
 801515c:	08020d00 	.word	0x08020d00
 8015160:	08020e6c 	.word	0x08020e6c
 8015164:	08020e84 	.word	0x08020e84
 8015168:	08020eb8 	.word	0x08020eb8

0801516c <lwip_netconn_do_close_internal>:
{
 801516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015170:	4688      	mov	r8, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8015172:	4604      	mov	r4, r0
 8015174:	2800      	cmp	r0, #0
 8015176:	d035      	beq.n	80151e4 <lwip_netconn_do_close_internal+0x78>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8015178:	7823      	ldrb	r3, [r4, #0]
 801517a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801517e:	2b10      	cmp	r3, #16
 8015180:	d006      	beq.n	8015190 <lwip_netconn_do_close_internal+0x24>
 8015182:	4b83      	ldr	r3, [pc, #524]	; (8015390 <lwip_netconn_do_close_internal+0x224>)
 8015184:	f44f 7251 	mov.w	r2, #836	; 0x344
 8015188:	4982      	ldr	r1, [pc, #520]	; (8015394 <lwip_netconn_do_close_internal+0x228>)
 801518a:	4883      	ldr	r0, [pc, #524]	; (8015398 <lwip_netconn_do_close_internal+0x22c>)
 801518c:	f00a f8d1 	bl	801f332 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8015190:	7863      	ldrb	r3, [r4, #1]
 8015192:	2b04      	cmp	r3, #4
 8015194:	d006      	beq.n	80151a4 <lwip_netconn_do_close_internal+0x38>
 8015196:	4b7e      	ldr	r3, [pc, #504]	; (8015390 <lwip_netconn_do_close_internal+0x224>)
 8015198:	f240 3245 	movw	r2, #837	; 0x345
 801519c:	497f      	ldr	r1, [pc, #508]	; (801539c <lwip_netconn_do_close_internal+0x230>)
 801519e:	487e      	ldr	r0, [pc, #504]	; (8015398 <lwip_netconn_do_close_internal+0x22c>)
 80151a0:	f00a f8c7 	bl	801f332 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80151a4:	6863      	ldr	r3, [r4, #4]
 80151a6:	b32b      	cbz	r3, 80151f4 <lwip_netconn_do_close_internal+0x88>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80151a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151aa:	b35b      	cbz	r3, 8015204 <lwip_netconn_do_close_internal+0x98>
  tpcb = conn->pcb.tcp;
 80151ac:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80151ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151b0:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 80151b2:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80151b6:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80151ba:	2b03      	cmp	r3, #3
 80151bc:	d02a      	beq.n	8015214 <lwip_netconn_do_close_internal+0xa8>
  } else if (shut_rx &&
 80151be:	f1ba 0f00 	cmp.w	sl, #0
 80151c2:	d006      	beq.n	80151d2 <lwip_netconn_do_close_internal+0x66>
             ((tpcb->state == FIN_WAIT_1) ||
 80151c4:	7d2a      	ldrb	r2, [r5, #20]
 80151c6:	1f53      	subs	r3, r2, #5
 80151c8:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 80151ca:	2b01      	cmp	r3, #1
 80151cc:	d93a      	bls.n	8015244 <lwip_netconn_do_close_internal+0xd8>
              (tpcb->state == FIN_WAIT_2) ||
 80151ce:	2a08      	cmp	r2, #8
 80151d0:	d03a      	beq.n	8015248 <lwip_netconn_do_close_internal+0xdc>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80151d2:	f1b9 0f00 	cmp.w	r9, #0
 80151d6:	d039      	beq.n	801524c <lwip_netconn_do_close_internal+0xe0>
 80151d8:	7eab      	ldrb	r3, [r5, #26]
 80151da:	f013 0f10 	tst.w	r3, #16
 80151de:	d137      	bne.n	8015250 <lwip_netconn_do_close_internal+0xe4>
    close = 0;
 80151e0:	2700      	movs	r7, #0
 80151e2:	e018      	b.n	8015216 <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80151e4:	4b6a      	ldr	r3, [pc, #424]	; (8015390 <lwip_netconn_do_close_internal+0x224>)
 80151e6:	f240 3243 	movw	r2, #835	; 0x343
 80151ea:	496d      	ldr	r1, [pc, #436]	; (80153a0 <lwip_netconn_do_close_internal+0x234>)
 80151ec:	486a      	ldr	r0, [pc, #424]	; (8015398 <lwip_netconn_do_close_internal+0x22c>)
 80151ee:	f00a f8a0 	bl	801f332 <iprintf>
 80151f2:	e7c1      	b.n	8015178 <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80151f4:	4b66      	ldr	r3, [pc, #408]	; (8015390 <lwip_netconn_do_close_internal+0x224>)
 80151f6:	f240 3246 	movw	r2, #838	; 0x346
 80151fa:	496a      	ldr	r1, [pc, #424]	; (80153a4 <lwip_netconn_do_close_internal+0x238>)
 80151fc:	4866      	ldr	r0, [pc, #408]	; (8015398 <lwip_netconn_do_close_internal+0x22c>)
 80151fe:	f00a f898 	bl	801f332 <iprintf>
 8015202:	e7d1      	b.n	80151a8 <lwip_netconn_do_close_internal+0x3c>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015204:	4b62      	ldr	r3, [pc, #392]	; (8015390 <lwip_netconn_do_close_internal+0x224>)
 8015206:	f240 3247 	movw	r2, #839	; 0x347
 801520a:	4967      	ldr	r1, [pc, #412]	; (80153a8 <lwip_netconn_do_close_internal+0x23c>)
 801520c:	4862      	ldr	r0, [pc, #392]	; (8015398 <lwip_netconn_do_close_internal+0x22c>)
 801520e:	f00a f890 	bl	801f332 <iprintf>
 8015212:	e7cb      	b.n	80151ac <lwip_netconn_do_close_internal+0x40>
    close = 1;
 8015214:	2701      	movs	r7, #1
  if (close) {
 8015216:	b9ef      	cbnz	r7, 8015254 <lwip_netconn_do_close_internal+0xe8>
  if (tpcb->state == LISTEN) {
 8015218:	7d2b      	ldrb	r3, [r5, #20]
 801521a:	2b01      	cmp	r3, #1
 801521c:	d01f      	beq.n	801525e <lwip_netconn_do_close_internal+0xf2>
    if (shut_rx) {
 801521e:	f1ba 0f00 	cmp.w	sl, #0
 8015222:	d121      	bne.n	8015268 <lwip_netconn_do_close_internal+0xfc>
    if (shut_tx) {
 8015224:	f1b9 0f00 	cmp.w	r9, #0
 8015228:	d127      	bne.n	801527a <lwip_netconn_do_close_internal+0x10e>
    if (close) {
 801522a:	bb5f      	cbnz	r7, 8015284 <lwip_netconn_do_close_internal+0x118>
  if (close) {
 801522c:	b3a7      	cbz	r7, 8015298 <lwip_netconn_do_close_internal+0x12c>
      err = tcp_close(tpcb);
 801522e:	4628      	mov	r0, r5
 8015230:	f004 f8a0 	bl	8019374 <tcp_close>
 8015234:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8015236:	2e00      	cmp	r6, #0
 8015238:	d042      	beq.n	80152c0 <lwip_netconn_do_close_internal+0x154>
    if (err == ERR_MEM) {
 801523a:	f1b6 3fff 	cmp.w	r6, #4294967295
 801523e:	d032      	beq.n	80152a6 <lwip_netconn_do_close_internal+0x13a>
      close_finished = 1;
 8015240:	2301      	movs	r3, #1
 8015242:	e03e      	b.n	80152c2 <lwip_netconn_do_close_internal+0x156>
    close = 1;
 8015244:	2701      	movs	r7, #1
 8015246:	e7e6      	b.n	8015216 <lwip_netconn_do_close_internal+0xaa>
 8015248:	2701      	movs	r7, #1
 801524a:	e7e4      	b.n	8015216 <lwip_netconn_do_close_internal+0xaa>
    close = 0;
 801524c:	2700      	movs	r7, #0
 801524e:	e7e2      	b.n	8015216 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8015250:	2701      	movs	r7, #1
 8015252:	e7e0      	b.n	8015216 <lwip_netconn_do_close_internal+0xaa>
    tcp_arg(tpcb, NULL);
 8015254:	2100      	movs	r1, #0
 8015256:	4628      	mov	r0, r5
 8015258:	f003 fcf9 	bl	8018c4e <tcp_arg>
 801525c:	e7dc      	b.n	8015218 <lwip_netconn_do_close_internal+0xac>
    tcp_accept(tpcb, NULL);
 801525e:	2100      	movs	r1, #0
 8015260:	4628      	mov	r0, r5
 8015262:	f003 fd43 	bl	8018cec <tcp_accept>
 8015266:	e7e1      	b.n	801522c <lwip_netconn_do_close_internal+0xc0>
      tcp_recv(tpcb, NULL);
 8015268:	2100      	movs	r1, #0
 801526a:	4628      	mov	r0, r5
 801526c:	f003 fcf2 	bl	8018c54 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8015270:	2100      	movs	r1, #0
 8015272:	4628      	mov	r0, r5
 8015274:	f003 fd3a 	bl	8018cec <tcp_accept>
 8015278:	e7d4      	b.n	8015224 <lwip_netconn_do_close_internal+0xb8>
      tcp_sent(tpcb, NULL);
 801527a:	2100      	movs	r1, #0
 801527c:	4628      	mov	r0, r5
 801527e:	f003 fd03 	bl	8018c88 <tcp_sent>
 8015282:	e7d2      	b.n	801522a <lwip_netconn_do_close_internal+0xbe>
      tcp_poll(tpcb, NULL, 0);
 8015284:	2200      	movs	r2, #0
 8015286:	4611      	mov	r1, r2
 8015288:	4628      	mov	r0, r5
 801528a:	f003 fd37 	bl	8018cfc <tcp_poll>
      tcp_err(tpcb, NULL);
 801528e:	2100      	movs	r1, #0
 8015290:	4628      	mov	r0, r5
 8015292:	f003 fd11 	bl	8018cb8 <tcp_err>
 8015296:	e7c9      	b.n	801522c <lwip_netconn_do_close_internal+0xc0>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8015298:	464a      	mov	r2, r9
 801529a:	4651      	mov	r1, sl
 801529c:	4628      	mov	r0, r5
 801529e:	f004 f911 	bl	80194c4 <tcp_shutdown>
 80152a2:	4606      	mov	r6, r0
 80152a4:	e7c7      	b.n	8015236 <lwip_netconn_do_close_internal+0xca>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80152a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152a8:	7a5b      	ldrb	r3, [r3, #9]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d13f      	bne.n	801532e <lwip_netconn_do_close_internal+0x1c2>
        if (close) {
 80152ae:	b90f      	cbnz	r7, 80152b4 <lwip_netconn_do_close_internal+0x148>
        close_finished = 1;
 80152b0:	2301      	movs	r3, #1
 80152b2:	e006      	b.n	80152c2 <lwip_netconn_do_close_internal+0x156>
          tcp_abort(tpcb);
 80152b4:	4628      	mov	r0, r5
 80152b6:	f004 f9ad 	bl	8019614 <tcp_abort>
        close_finished = 1;
 80152ba:	463b      	mov	r3, r7
          err = ERR_OK;
 80152bc:	2600      	movs	r6, #0
 80152be:	e000      	b.n	80152c2 <lwip_netconn_do_close_internal+0x156>
    close_finished = 1;
 80152c0:	2301      	movs	r3, #1
  if (close_finished) {
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d03a      	beq.n	801533c <lwip_netconn_do_close_internal+0x1d0>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80152c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152c8:	681d      	ldr	r5, [r3, #0]
 80152ca:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 80152cc:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80152ce:	2300      	movs	r3, #0
 80152d0:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80152d2:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80152d4:	b9ce      	cbnz	r6, 801530a <lwip_netconn_do_close_internal+0x19e>
      if (close) {
 80152d6:	b137      	cbz	r7, 80152e6 <lwip_netconn_do_close_internal+0x17a>
        conn->pcb.tcp = NULL;
 80152d8:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80152da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80152dc:	b11b      	cbz	r3, 80152e6 <lwip_netconn_do_close_internal+0x17a>
 80152de:	2200      	movs	r2, #0
 80152e0:	2104      	movs	r1, #4
 80152e2:	4620      	mov	r0, r4
 80152e4:	4798      	blx	r3
      if (shut_rx) {
 80152e6:	f1ba 0f00 	cmp.w	sl, #0
 80152ea:	d005      	beq.n	80152f8 <lwip_netconn_do_close_internal+0x18c>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80152ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80152ee:	b11b      	cbz	r3, 80152f8 <lwip_netconn_do_close_internal+0x18c>
 80152f0:	2200      	movs	r2, #0
 80152f2:	4611      	mov	r1, r2
 80152f4:	4620      	mov	r0, r4
 80152f6:	4798      	blx	r3
      if (shut_tx) {
 80152f8:	f1b9 0f00 	cmp.w	r9, #0
 80152fc:	d005      	beq.n	801530a <lwip_netconn_do_close_internal+0x19e>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80152fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015300:	b11b      	cbz	r3, 801530a <lwip_netconn_do_close_internal+0x19e>
 8015302:	2200      	movs	r2, #0
 8015304:	2102      	movs	r1, #2
 8015306:	4620      	mov	r0, r4
 8015308:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 801530a:	b14c      	cbz	r4, 8015320 <lwip_netconn_do_close_internal+0x1b4>
 801530c:	f007 f97c 	bl	801c608 <sys_arch_protect>
 8015310:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8015314:	f113 0f0c 	cmn.w	r3, #12
 8015318:	db00      	blt.n	801531c <lwip_netconn_do_close_internal+0x1b0>
 801531a:	7226      	strb	r6, [r4, #8]
 801531c:	f007 f980 	bl	801c620 <sys_arch_unprotect>
    if (delayed)
 8015320:	f1b8 0f00 	cmp.w	r8, #0
 8015324:	d105      	bne.n	8015332 <lwip_netconn_do_close_internal+0x1c6>
    return ERR_OK;
 8015326:	2600      	movs	r6, #0
}
 8015328:	4630      	mov	r0, r6
 801532a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t close_finished = 0;
 801532e:	2300      	movs	r3, #0
 8015330:	e7c7      	b.n	80152c2 <lwip_netconn_do_close_internal+0x156>
      sys_sem_signal(op_completed_sem);
 8015332:	4628      	mov	r0, r5
 8015334:	f007 f916 	bl	801c564 <sys_sem_signal>
    return ERR_OK;
 8015338:	2600      	movs	r6, #0
 801533a:	e7f5      	b.n	8015328 <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801533c:	7d2b      	ldrb	r3, [r5, #20]
 801533e:	2b01      	cmp	r3, #1
 8015340:	d019      	beq.n	8015376 <lwip_netconn_do_close_internal+0x20a>
    if (shut_tx) {
 8015342:	f1b9 0f00 	cmp.w	r9, #0
 8015346:	d11e      	bne.n	8015386 <lwip_netconn_do_close_internal+0x21a>
    tcp_poll(tpcb, poll_tcp, 1);
 8015348:	2201      	movs	r2, #1
 801534a:	4918      	ldr	r1, [pc, #96]	; (80153ac <lwip_netconn_do_close_internal+0x240>)
 801534c:	4628      	mov	r0, r5
 801534e:	f003 fcd5 	bl	8018cfc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8015352:	4917      	ldr	r1, [pc, #92]	; (80153b0 <lwip_netconn_do_close_internal+0x244>)
 8015354:	4628      	mov	r0, r5
 8015356:	f003 fcaf 	bl	8018cb8 <tcp_err>
    tcp_arg(tpcb, conn);
 801535a:	4621      	mov	r1, r4
 801535c:	4628      	mov	r0, r5
 801535e:	f003 fc76 	bl	8018c4e <tcp_arg>
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8015362:	2e00      	cmp	r6, #0
 8015364:	d1e0      	bne.n	8015328 <lwip_netconn_do_close_internal+0x1bc>
 8015366:	4b0a      	ldr	r3, [pc, #40]	; (8015390 <lwip_netconn_do_close_internal+0x224>)
 8015368:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801536c:	4911      	ldr	r1, [pc, #68]	; (80153b4 <lwip_netconn_do_close_internal+0x248>)
 801536e:	480a      	ldr	r0, [pc, #40]	; (8015398 <lwip_netconn_do_close_internal+0x22c>)
 8015370:	f009 ffdf 	bl	801f332 <iprintf>
 8015374:	e7d8      	b.n	8015328 <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8015376:	4b06      	ldr	r3, [pc, #24]	; (8015390 <lwip_netconn_do_close_internal+0x224>)
 8015378:	f240 32e3 	movw	r2, #995	; 0x3e3
 801537c:	490e      	ldr	r1, [pc, #56]	; (80153b8 <lwip_netconn_do_close_internal+0x24c>)
 801537e:	4806      	ldr	r0, [pc, #24]	; (8015398 <lwip_netconn_do_close_internal+0x22c>)
 8015380:	f009 ffd7 	bl	801f332 <iprintf>
 8015384:	e7dd      	b.n	8015342 <lwip_netconn_do_close_internal+0x1d6>
      tcp_sent(tpcb, sent_tcp);
 8015386:	490d      	ldr	r1, [pc, #52]	; (80153bc <lwip_netconn_do_close_internal+0x250>)
 8015388:	4628      	mov	r0, r5
 801538a:	f003 fc7d 	bl	8018c88 <tcp_sent>
 801538e:	e7db      	b.n	8015348 <lwip_netconn_do_close_internal+0x1dc>
 8015390:	08020fb4 	.word	0x08020fb4
 8015394:	08020d54 	.word	0x08020d54
 8015398:	08020b90 	.word	0x08020b90
 801539c:	08020d74 	.word	0x08020d74
 80153a0:	08020bc8 	.word	0x08020bc8
 80153a4:	08020d98 	.word	0x08020d98
 80153a8:	08020d00 	.word	0x08020d00
 80153ac:	080153c1 	.word	0x080153c1
 80153b0:	08014e0d 	.word	0x08014e0d
 80153b4:	08020dd0 	.word	0x08020dd0
 80153b8:	08020dac 	.word	0x08020dac
 80153bc:	08015445 	.word	0x08015445

080153c0 <poll_tcp>:
{
 80153c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80153c2:	4604      	mov	r4, r0
 80153c4:	b1f8      	cbz	r0, 8015406 <poll_tcp+0x46>
  if (conn->state == NETCONN_WRITE) {
 80153c6:	7863      	ldrb	r3, [r4, #1]
 80153c8:	2b01      	cmp	r3, #1
 80153ca:	d024      	beq.n	8015416 <poll_tcp+0x56>
  } else if (conn->state == NETCONN_CLOSE) {
 80153cc:	2b04      	cmp	r3, #4
 80153ce:	d027      	beq.n	8015420 <poll_tcp+0x60>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80153d0:	7f23      	ldrb	r3, [r4, #28]
 80153d2:	f013 0f10 	tst.w	r3, #16
 80153d6:	d014      	beq.n	8015402 <poll_tcp+0x42>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80153d8:	6862      	ldr	r2, [r4, #4]
 80153da:	b192      	cbz	r2, 8015402 <poll_tcp+0x42>
 80153dc:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
 80153e0:	f240 51a1 	movw	r1, #1441	; 0x5a1
 80153e4:	4288      	cmp	r0, r1
 80153e6:	d90c      	bls.n	8015402 <poll_tcp+0x42>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80153e8:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80153ec:	2a04      	cmp	r2, #4
 80153ee:	d808      	bhi.n	8015402 <poll_tcp+0x42>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80153f0:	f023 0310 	bic.w	r3, r3, #16
 80153f4:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80153f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80153f8:	b11b      	cbz	r3, 8015402 <poll_tcp+0x42>
 80153fa:	2200      	movs	r2, #0
 80153fc:	2102      	movs	r1, #2
 80153fe:	4620      	mov	r0, r4
 8015400:	4798      	blx	r3
}
 8015402:	2000      	movs	r0, #0
 8015404:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015406:	4b0c      	ldr	r3, [pc, #48]	; (8015438 <poll_tcp+0x78>)
 8015408:	f44f 729c 	mov.w	r2, #312	; 0x138
 801540c:	490b      	ldr	r1, [pc, #44]	; (801543c <poll_tcp+0x7c>)
 801540e:	480c      	ldr	r0, [pc, #48]	; (8015440 <poll_tcp+0x80>)
 8015410:	f009 ff8f 	bl	801f332 <iprintf>
 8015414:	e7d7      	b.n	80153c6 <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015416:	2101      	movs	r1, #1
 8015418:	4620      	mov	r0, r4
 801541a:	f7ff fd97 	bl	8014f4c <lwip_netconn_do_writemore>
 801541e:	e7d7      	b.n	80153d0 <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8015420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015422:	b11b      	cbz	r3, 801542c <poll_tcp+0x6c>
 8015424:	7a5a      	ldrb	r2, [r3, #9]
 8015426:	b10a      	cbz	r2, 801542c <poll_tcp+0x6c>
      conn->current_msg->msg.sd.polls_left--;
 8015428:	3a01      	subs	r2, #1
 801542a:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801542c:	2101      	movs	r1, #1
 801542e:	4620      	mov	r0, r4
 8015430:	f7ff fe9c 	bl	801516c <lwip_netconn_do_close_internal>
 8015434:	e7cc      	b.n	80153d0 <poll_tcp+0x10>
 8015436:	bf00      	nop
 8015438:	08020fb4 	.word	0x08020fb4
 801543c:	08020cf0 	.word	0x08020cf0
 8015440:	08020b90 	.word	0x08020b90

08015444 <sent_tcp>:
{
 8015444:	b538      	push	{r3, r4, r5, lr}
 8015446:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015448:	4604      	mov	r4, r0
 801544a:	b1e8      	cbz	r0, 8015488 <sent_tcp+0x44>
  if (conn) {
 801544c:	b1d4      	cbz	r4, 8015484 <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 801544e:	7863      	ldrb	r3, [r4, #1]
 8015450:	2b01      	cmp	r3, #1
 8015452:	d021      	beq.n	8015498 <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 8015454:	2b04      	cmp	r3, #4
 8015456:	d024      	beq.n	80154a2 <sent_tcp+0x5e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015458:	6863      	ldr	r3, [r4, #4]
 801545a:	b19b      	cbz	r3, 8015484 <sent_tcp+0x40>
 801545c:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 8015460:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015464:	4291      	cmp	r1, r2
 8015466:	d90d      	bls.n	8015484 <sent_tcp+0x40>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8015468:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801546c:	2b04      	cmp	r3, #4
 801546e:	d809      	bhi.n	8015484 <sent_tcp+0x40>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8015470:	7f23      	ldrb	r3, [r4, #28]
 8015472:	f023 0310 	bic.w	r3, r3, #16
 8015476:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8015478:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801547a:	b11b      	cbz	r3, 8015484 <sent_tcp+0x40>
 801547c:	462a      	mov	r2, r5
 801547e:	2102      	movs	r1, #2
 8015480:	4620      	mov	r0, r4
 8015482:	4798      	blx	r3
}
 8015484:	2000      	movs	r0, #0
 8015486:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015488:	4b08      	ldr	r3, [pc, #32]	; (80154ac <sent_tcp+0x68>)
 801548a:	f240 1261 	movw	r2, #353	; 0x161
 801548e:	4908      	ldr	r1, [pc, #32]	; (80154b0 <sent_tcp+0x6c>)
 8015490:	4808      	ldr	r0, [pc, #32]	; (80154b4 <sent_tcp+0x70>)
 8015492:	f009 ff4e 	bl	801f332 <iprintf>
 8015496:	e7d9      	b.n	801544c <sent_tcp+0x8>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015498:	2101      	movs	r1, #1
 801549a:	4620      	mov	r0, r4
 801549c:	f7ff fd56 	bl	8014f4c <lwip_netconn_do_writemore>
 80154a0:	e7da      	b.n	8015458 <sent_tcp+0x14>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80154a2:	2101      	movs	r1, #1
 80154a4:	4620      	mov	r0, r4
 80154a6:	f7ff fe61 	bl	801516c <lwip_netconn_do_close_internal>
 80154aa:	e7d5      	b.n	8015458 <sent_tcp+0x14>
 80154ac:	08020fb4 	.word	0x08020fb4
 80154b0:	08020cf0 	.word	0x08020cf0
 80154b4:	08020b90 	.word	0x08020b90

080154b8 <recv_tcp>:
{
 80154b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154bc:	4604      	mov	r4, r0
 80154be:	4615      	mov	r5, r2
 80154c0:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80154c2:	460f      	mov	r7, r1
 80154c4:	b1e9      	cbz	r1, 8015502 <recv_tcp+0x4a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80154c6:	b31c      	cbz	r4, 8015510 <recv_tcp+0x58>
  if (conn == NULL) {
 80154c8:	2c00      	cmp	r4, #0
 80154ca:	d04a      	beq.n	8015562 <recv_tcp+0xaa>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80154cc:	6863      	ldr	r3, [r4, #4]
 80154ce:	429f      	cmp	r7, r3
 80154d0:	d006      	beq.n	80154e0 <recv_tcp+0x28>
 80154d2:	4b28      	ldr	r3, [pc, #160]	; (8015574 <recv_tcp+0xbc>)
 80154d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80154d8:	4927      	ldr	r1, [pc, #156]	; (8015578 <recv_tcp+0xc0>)
 80154da:	4828      	ldr	r0, [pc, #160]	; (801557c <recv_tcp+0xc4>)
 80154dc:	f009 ff29 	bl	801f332 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80154e0:	f104 0610 	add.w	r6, r4, #16
 80154e4:	4630      	mov	r0, r6
 80154e6:	f006 fffd 	bl	801c4e4 <sys_mbox_valid>
 80154ea:	b9c0      	cbnz	r0, 801551e <recv_tcp+0x66>
    if (p != NULL) {
 80154ec:	2d00      	cmp	r5, #0
 80154ee:	d03b      	beq.n	8015568 <recv_tcp+0xb0>
      tcp_recved(pcb, p->tot_len);
 80154f0:	8929      	ldrh	r1, [r5, #8]
 80154f2:	4638      	mov	r0, r7
 80154f4:	f003 fb3e 	bl	8018b74 <tcp_recved>
      pbuf_free(p);
 80154f8:	4628      	mov	r0, r5
 80154fa:	f002 fe99 	bl	8018230 <pbuf_free>
    return ERR_OK;
 80154fe:	2500      	movs	r5, #0
 8015500:	e01e      	b.n	8015540 <recv_tcp+0x88>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8015502:	4b1c      	ldr	r3, [pc, #112]	; (8015574 <recv_tcp+0xbc>)
 8015504:	22f9      	movs	r2, #249	; 0xf9
 8015506:	491e      	ldr	r1, [pc, #120]	; (8015580 <recv_tcp+0xc8>)
 8015508:	481c      	ldr	r0, [pc, #112]	; (801557c <recv_tcp+0xc4>)
 801550a:	f009 ff12 	bl	801f332 <iprintf>
 801550e:	e7da      	b.n	80154c6 <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8015510:	4b18      	ldr	r3, [pc, #96]	; (8015574 <recv_tcp+0xbc>)
 8015512:	22fa      	movs	r2, #250	; 0xfa
 8015514:	491b      	ldr	r1, [pc, #108]	; (8015584 <recv_tcp+0xcc>)
 8015516:	4819      	ldr	r0, [pc, #100]	; (801557c <recv_tcp+0xc4>)
 8015518:	f009 ff0b 	bl	801f332 <iprintf>
 801551c:	e7d4      	b.n	80154c8 <recv_tcp+0x10>
  if (err != ERR_OK) {
 801551e:	f1b8 0f00 	cmp.w	r8, #0
 8015522:	d110      	bne.n	8015546 <recv_tcp+0x8e>
  if (p != NULL) {
 8015524:	b1dd      	cbz	r5, 801555e <recv_tcp+0xa6>
    len = p->tot_len;
 8015526:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8015528:	4629      	mov	r1, r5
 801552a:	4630      	mov	r0, r6
 801552c:	f006 ff91 	bl	801c452 <sys_mbox_trypost>
 8015530:	4605      	mov	r5, r0
 8015532:	b9d8      	cbnz	r0, 801556c <recv_tcp+0xb4>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8015534:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015536:	b11b      	cbz	r3, 8015540 <recv_tcp+0x88>
 8015538:	463a      	mov	r2, r7
 801553a:	2100      	movs	r1, #0
 801553c:	4620      	mov	r0, r4
 801553e:	4798      	blx	r3
}
 8015540:	4628      	mov	r0, r5
 8015542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 8015546:	f007 f85f 	bl	801c608 <sys_arch_protect>
 801554a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801554e:	f113 0f0c 	cmn.w	r3, #12
 8015552:	db01      	blt.n	8015558 <recv_tcp+0xa0>
 8015554:	f884 8008 	strb.w	r8, [r4, #8]
 8015558:	f007 f862 	bl	801c620 <sys_arch_unprotect>
 801555c:	e7e2      	b.n	8015524 <recv_tcp+0x6c>
    len = 0;
 801555e:	2700      	movs	r7, #0
 8015560:	e7e2      	b.n	8015528 <recv_tcp+0x70>
    return ERR_VAL;
 8015562:	f06f 0505 	mvn.w	r5, #5
 8015566:	e7eb      	b.n	8015540 <recv_tcp+0x88>
    return ERR_OK;
 8015568:	2500      	movs	r5, #0
 801556a:	e7e9      	b.n	8015540 <recv_tcp+0x88>
    return ERR_MEM;
 801556c:	f04f 35ff 	mov.w	r5, #4294967295
 8015570:	e7e6      	b.n	8015540 <recv_tcp+0x88>
 8015572:	bf00      	nop
 8015574:	08020fb4 	.word	0x08020fb4
 8015578:	0802104c 	.word	0x0802104c
 801557c:	08020b90 	.word	0x08020b90
 8015580:	08021008 	.word	0x08021008
 8015584:	0802102c 	.word	0x0802102c

08015588 <lwip_netconn_do_newconn>:
{
 8015588:	b510      	push	{r4, lr}
 801558a:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 801558c:	2300      	movs	r3, #0
 801558e:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8015590:	6803      	ldr	r3, [r0, #0]
 8015592:	685b      	ldr	r3, [r3, #4]
 8015594:	b17b      	cbz	r3, 80155b6 <lwip_netconn_do_newconn+0x2e>
  TCPIP_APIMSG_ACK(msg);
 8015596:	6823      	ldr	r3, [r4, #0]
 8015598:	b163      	cbz	r3, 80155b4 <lwip_netconn_do_newconn+0x2c>
 801559a:	f007 f835 	bl	801c608 <sys_arch_protect>
 801559e:	6823      	ldr	r3, [r4, #0]
 80155a0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80155a4:	f112 0f0c 	cmn.w	r2, #12
 80155a8:	db02      	blt.n	80155b0 <lwip_netconn_do_newconn+0x28>
 80155aa:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80155ae:	721a      	strb	r2, [r3, #8]
 80155b0:	f007 f836 	bl	801c620 <sys_arch_unprotect>
 80155b4:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 80155b6:	f7ff fbfd 	bl	8014db4 <pcb_new>
 80155ba:	e7ec      	b.n	8015596 <lwip_netconn_do_newconn+0xe>

080155bc <netconn_alloc>:
{
 80155bc:	b570      	push	{r4, r5, r6, lr}
 80155be:	4605      	mov	r5, r0
 80155c0:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80155c2:	2006      	movs	r0, #6
 80155c4:	f002 fc4a 	bl	8017e5c <memp_malloc>
  if (conn == NULL) {
 80155c8:	4604      	mov	r4, r0
 80155ca:	b308      	cbz	r0, 8015610 <netconn_alloc+0x54>
  conn->last_err = ERR_OK;
 80155cc:	2300      	movs	r3, #0
 80155ce:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 80155d0:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 80155d2:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 80155d4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80155d8:	2d10      	cmp	r5, #16
 80155da:	d11b      	bne.n	8015614 <netconn_alloc+0x58>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80155dc:	f100 0510 	add.w	r5, r0, #16
 80155e0:	2106      	movs	r1, #6
 80155e2:	4628      	mov	r0, r5
 80155e4:	f006 ff0c 	bl	801c400 <sys_mbox_new>
 80155e8:	b9d8      	cbnz	r0, 8015622 <netconn_alloc+0x66>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80155ea:	2100      	movs	r1, #0
 80155ec:	f104 000c 	add.w	r0, r4, #12
 80155f0:	f006 ff81 	bl	801c4f6 <sys_sem_new>
 80155f4:	b9d8      	cbnz	r0, 801562e <netconn_alloc+0x72>
  sys_mbox_set_invalid(&conn->acceptmbox);
 80155f6:	f104 0014 	add.w	r0, r4, #20
 80155fa:	f006 ff79 	bl	801c4f0 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 80155fe:	2300      	movs	r3, #0
 8015600:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8015602:	f04f 32ff 	mov.w	r2, #4294967295
 8015606:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8015608:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 801560a:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 801560c:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 801560e:	7723      	strb	r3, [r4, #28]
}
 8015610:	4620      	mov	r0, r4
 8015612:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8015614:	4b08      	ldr	r3, [pc, #32]	; (8015638 <netconn_alloc+0x7c>)
 8015616:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801561a:	4908      	ldr	r1, [pc, #32]	; (801563c <netconn_alloc+0x80>)
 801561c:	4808      	ldr	r0, [pc, #32]	; (8015640 <netconn_alloc+0x84>)
 801561e:	f009 fe88 	bl	801f332 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8015622:	4621      	mov	r1, r4
 8015624:	2006      	movs	r0, #6
 8015626:	f002 fc33 	bl	8017e90 <memp_free>
  return NULL;
 801562a:	2400      	movs	r4, #0
 801562c:	e7f0      	b.n	8015610 <netconn_alloc+0x54>
    sys_mbox_free(&conn->recvmbox);
 801562e:	4628      	mov	r0, r5
 8015630:	f006 fefa 	bl	801c428 <sys_mbox_free>
    goto free_and_return;
 8015634:	e7f5      	b.n	8015622 <netconn_alloc+0x66>
 8015636:	bf00      	nop
 8015638:	08020fb4 	.word	0x08020fb4
 801563c:	08020ee4 	.word	0x08020ee4
 8015640:	08020b90 	.word	0x08020b90

08015644 <netconn_free>:
{
 8015644:	b538      	push	{r3, r4, r5, lr}
 8015646:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8015648:	6843      	ldr	r3, [r0, #4]
 801564a:	b133      	cbz	r3, 801565a <netconn_free+0x16>
 801564c:	4b16      	ldr	r3, [pc, #88]	; (80156a8 <netconn_free+0x64>)
 801564e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8015652:	4916      	ldr	r1, [pc, #88]	; (80156ac <netconn_free+0x68>)
 8015654:	4816      	ldr	r0, [pc, #88]	; (80156b0 <netconn_free+0x6c>)
 8015656:	f009 fe6c 	bl	801f332 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801565a:	f104 0010 	add.w	r0, r4, #16
 801565e:	f006 ff41 	bl	801c4e4 <sys_mbox_valid>
 8015662:	b988      	cbnz	r0, 8015688 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8015664:	f104 0014 	add.w	r0, r4, #20
 8015668:	f006 ff3c 	bl	801c4e4 <sys_mbox_valid>
 801566c:	b9a0      	cbnz	r0, 8015698 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 801566e:	f104 050c 	add.w	r5, r4, #12
 8015672:	4628      	mov	r0, r5
 8015674:	f006 ff7b 	bl	801c56e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8015678:	4628      	mov	r0, r5
 801567a:	f006 ff83 	bl	801c584 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 801567e:	4621      	mov	r1, r4
 8015680:	2006      	movs	r0, #6
 8015682:	f002 fc05 	bl	8017e90 <memp_free>
 8015686:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8015688:	4b07      	ldr	r3, [pc, #28]	; (80156a8 <netconn_free+0x64>)
 801568a:	f240 22e2 	movw	r2, #738	; 0x2e2
 801568e:	4909      	ldr	r1, [pc, #36]	; (80156b4 <netconn_free+0x70>)
 8015690:	4807      	ldr	r0, [pc, #28]	; (80156b0 <netconn_free+0x6c>)
 8015692:	f009 fe4e 	bl	801f332 <iprintf>
 8015696:	e7e5      	b.n	8015664 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8015698:	4b03      	ldr	r3, [pc, #12]	; (80156a8 <netconn_free+0x64>)
 801569a:	f240 22e5 	movw	r2, #741	; 0x2e5
 801569e:	4906      	ldr	r1, [pc, #24]	; (80156b8 <netconn_free+0x74>)
 80156a0:	4803      	ldr	r0, [pc, #12]	; (80156b0 <netconn_free+0x6c>)
 80156a2:	f009 fe46 	bl	801f332 <iprintf>
 80156a6:	e7e2      	b.n	801566e <netconn_free+0x2a>
 80156a8:	08020fb4 	.word	0x08020fb4
 80156ac:	08020f0c 	.word	0x08020f0c
 80156b0:	08020b90 	.word	0x08020b90
 80156b4:	08020f3c 	.word	0x08020f3c
 80156b8:	08020f78 	.word	0x08020f78

080156bc <netconn_drain>:
{
 80156bc:	b570      	push	{r4, r5, r6, lr}
 80156be:	b082      	sub	sp, #8
 80156c0:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 80156c2:	f100 0410 	add.w	r4, r0, #16
 80156c6:	4620      	mov	r0, r4
 80156c8:	f006 ff0c 	bl	801c4e4 <sys_mbox_valid>
 80156cc:	bb38      	cbnz	r0, 801571e <netconn_drain+0x62>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80156ce:	3514      	adds	r5, #20
 80156d0:	4628      	mov	r0, r5
 80156d2:	f006 ff07 	bl	801c4e4 <sys_mbox_valid>
 80156d6:	2800      	cmp	r0, #0
 80156d8:	d03e      	beq.n	8015758 <netconn_drain+0x9c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80156da:	a901      	add	r1, sp, #4
 80156dc:	4628      	mov	r0, r5
 80156de:	f006 feee 	bl	801c4be <sys_arch_mbox_tryfetch>
 80156e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80156e6:	d031      	beq.n	801574c <netconn_drain+0x90>
      if (mem != &netconn_aborted) {
 80156e8:	9c01      	ldr	r4, [sp, #4]
 80156ea:	4b1c      	ldr	r3, [pc, #112]	; (801575c <netconn_drain+0xa0>)
 80156ec:	429c      	cmp	r4, r3
 80156ee:	d0f4      	beq.n	80156da <netconn_drain+0x1e>
        netconn_drain(newconn);
 80156f0:	4620      	mov	r0, r4
 80156f2:	f7ff ffe3 	bl	80156bc <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80156f6:	6860      	ldr	r0, [r4, #4]
 80156f8:	b118      	cbz	r0, 8015702 <netconn_drain+0x46>
          tcp_abort(newconn->pcb.tcp);
 80156fa:	f003 ff8b 	bl	8019614 <tcp_abort>
          newconn->pcb.tcp = NULL;
 80156fe:	2300      	movs	r3, #0
 8015700:	6063      	str	r3, [r4, #4]
        netconn_free(newconn);
 8015702:	4620      	mov	r0, r4
 8015704:	f7ff ff9e 	bl	8015644 <netconn_free>
 8015708:	e7e7      	b.n	80156da <netconn_drain+0x1e>
        if (mem != NULL) {
 801570a:	9e01      	ldr	r6, [sp, #4]
 801570c:	b13e      	cbz	r6, 801571e <netconn_drain+0x62>
          if (conn->pcb.tcp != NULL) {
 801570e:	6868      	ldr	r0, [r5, #4]
 8015710:	b110      	cbz	r0, 8015718 <netconn_drain+0x5c>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8015712:	8931      	ldrh	r1, [r6, #8]
 8015714:	f003 fa2e 	bl	8018b74 <tcp_recved>
          pbuf_free(p);
 8015718:	4630      	mov	r0, r6
 801571a:	f002 fd89 	bl	8018230 <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801571e:	a901      	add	r1, sp, #4
 8015720:	4620      	mov	r0, r4
 8015722:	f006 fecc 	bl	801c4be <sys_arch_mbox_tryfetch>
 8015726:	f1b0 3fff 	cmp.w	r0, #4294967295
 801572a:	d008      	beq.n	801573e <netconn_drain+0x82>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801572c:	782b      	ldrb	r3, [r5, #0]
 801572e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015732:	2b10      	cmp	r3, #16
 8015734:	d0e9      	beq.n	801570a <netconn_drain+0x4e>
        netbuf_delete((struct netbuf *)mem);
 8015736:	9801      	ldr	r0, [sp, #4]
 8015738:	f000 fb06 	bl	8015d48 <netbuf_delete>
 801573c:	e7ef      	b.n	801571e <netconn_drain+0x62>
    sys_mbox_free(&conn->recvmbox);
 801573e:	4620      	mov	r0, r4
 8015740:	f006 fe72 	bl	801c428 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8015744:	4620      	mov	r0, r4
 8015746:	f006 fed3 	bl	801c4f0 <sys_mbox_set_invalid>
 801574a:	e7c0      	b.n	80156ce <netconn_drain+0x12>
    sys_mbox_free(&conn->acceptmbox);
 801574c:	4628      	mov	r0, r5
 801574e:	f006 fe6b 	bl	801c428 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8015752:	4628      	mov	r0, r5
 8015754:	f006 fecc 	bl	801c4f0 <sys_mbox_set_invalid>
}
 8015758:	b002      	add	sp, #8
 801575a:	bd70      	pop	{r4, r5, r6, pc}
 801575c:	2000a248 	.word	0x2000a248

08015760 <accept_function>:
{
 8015760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 8015764:	2800      	cmp	r0, #0
 8015766:	d067      	beq.n	8015838 <accept_function+0xd8>
 8015768:	4604      	mov	r4, r0
 801576a:	4616      	mov	r6, r2
 801576c:	460d      	mov	r5, r1
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 801576e:	f100 0814 	add.w	r8, r0, #20
 8015772:	4640      	mov	r0, r8
 8015774:	f006 feb6 	bl	801c4e4 <sys_mbox_valid>
 8015778:	2800      	cmp	r0, #0
 801577a:	d060      	beq.n	801583e <accept_function+0xde>
  if (newpcb == NULL) {
 801577c:	b1c5      	cbz	r5, 80157b0 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 801577e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015780:	7820      	ldrb	r0, [r4, #0]
 8015782:	f7ff ff1b 	bl	80155bc <netconn_alloc>
  if (newconn == NULL) {
 8015786:	4607      	mov	r7, r0
 8015788:	b310      	cbz	r0, 80157d0 <accept_function+0x70>
  newconn->pcb.tcp = newpcb;
 801578a:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 801578c:	f7ff faf2 	bl	8014d74 <setup_tcp>
  newconn->last_err = err;
 8015790:	723e      	strb	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8015792:	4639      	mov	r1, r7
 8015794:	4640      	mov	r0, r8
 8015796:	f006 fe5c 	bl	801c452 <sys_mbox_trypost>
 801579a:	4605      	mov	r5, r0
 801579c:	bb30      	cbnz	r0, 80157ec <accept_function+0x8c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801579e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80157a0:	b11b      	cbz	r3, 80157aa <accept_function+0x4a>
 80157a2:	2200      	movs	r2, #0
 80157a4:	4611      	mov	r1, r2
 80157a6:	4620      	mov	r0, r4
 80157a8:	4798      	blx	r3
}
 80157aa:	4628      	mov	r0, r5
 80157ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 80157b0:	492a      	ldr	r1, [pc, #168]	; (801585c <accept_function+0xfc>)
 80157b2:	4640      	mov	r0, r8
 80157b4:	f006 fe4d 	bl	801c452 <sys_mbox_trypost>
 80157b8:	2800      	cmp	r0, #0
 80157ba:	d143      	bne.n	8015844 <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80157bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d043      	beq.n	801584a <accept_function+0xea>
 80157c2:	2200      	movs	r2, #0
 80157c4:	4611      	mov	r1, r2
 80157c6:	4620      	mov	r0, r4
 80157c8:	4798      	blx	r3
    return ERR_VAL;
 80157ca:	f06f 0505 	mvn.w	r5, #5
 80157ce:	e7ec      	b.n	80157aa <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 80157d0:	4922      	ldr	r1, [pc, #136]	; (801585c <accept_function+0xfc>)
 80157d2:	4640      	mov	r0, r8
 80157d4:	f006 fe3d 	bl	801c452 <sys_mbox_trypost>
 80157d8:	bbd0      	cbnz	r0, 8015850 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80157da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80157dc:	b3db      	cbz	r3, 8015856 <accept_function+0xf6>
 80157de:	2200      	movs	r2, #0
 80157e0:	4611      	mov	r1, r2
 80157e2:	4620      	mov	r0, r4
 80157e4:	4798      	blx	r3
    return ERR_MEM;
 80157e6:	f04f 35ff 	mov.w	r5, #4294967295
 80157ea:	e7de      	b.n	80157aa <accept_function+0x4a>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80157ec:	687c      	ldr	r4, [r7, #4]
    tcp_arg(pcb, NULL);
 80157ee:	2100      	movs	r1, #0
 80157f0:	4620      	mov	r0, r4
 80157f2:	f003 fa2c 	bl	8018c4e <tcp_arg>
    tcp_recv(pcb, NULL);
 80157f6:	2100      	movs	r1, #0
 80157f8:	4620      	mov	r0, r4
 80157fa:	f003 fa2b 	bl	8018c54 <tcp_recv>
    tcp_sent(pcb, NULL);
 80157fe:	2100      	movs	r1, #0
 8015800:	4620      	mov	r0, r4
 8015802:	f003 fa41 	bl	8018c88 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8015806:	2200      	movs	r2, #0
 8015808:	4611      	mov	r1, r2
 801580a:	4620      	mov	r0, r4
 801580c:	f003 fa76 	bl	8018cfc <tcp_poll>
    tcp_err(pcb, NULL);
 8015810:	2100      	movs	r1, #0
 8015812:	4620      	mov	r0, r4
 8015814:	f003 fa50 	bl	8018cb8 <tcp_err>
    newconn->pcb.tcp = NULL;
 8015818:	2300      	movs	r3, #0
 801581a:	607b      	str	r3, [r7, #4]
    sys_mbox_free(&newconn->recvmbox);
 801581c:	f107 0410 	add.w	r4, r7, #16
 8015820:	4620      	mov	r0, r4
 8015822:	f006 fe01 	bl	801c428 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8015826:	4620      	mov	r0, r4
 8015828:	f006 fe62 	bl	801c4f0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 801582c:	4638      	mov	r0, r7
 801582e:	f7ff ff09 	bl	8015644 <netconn_free>
    return ERR_MEM;
 8015832:	f04f 35ff 	mov.w	r5, #4294967295
 8015836:	e7b8      	b.n	80157aa <accept_function+0x4a>
    return ERR_VAL;
 8015838:	f06f 0505 	mvn.w	r5, #5
 801583c:	e7b5      	b.n	80157aa <accept_function+0x4a>
    return ERR_VAL;
 801583e:	f06f 0505 	mvn.w	r5, #5
 8015842:	e7b2      	b.n	80157aa <accept_function+0x4a>
    return ERR_VAL;
 8015844:	f06f 0505 	mvn.w	r5, #5
 8015848:	e7af      	b.n	80157aa <accept_function+0x4a>
 801584a:	f06f 0505 	mvn.w	r5, #5
 801584e:	e7ac      	b.n	80157aa <accept_function+0x4a>
    return ERR_MEM;
 8015850:	f04f 35ff 	mov.w	r5, #4294967295
 8015854:	e7a9      	b.n	80157aa <accept_function+0x4a>
 8015856:	f04f 35ff 	mov.w	r5, #4294967295
 801585a:	e7a6      	b.n	80157aa <accept_function+0x4a>
 801585c:	2000a248 	.word	0x2000a248

08015860 <lwip_netconn_do_delconn>:
{
 8015860:	b538      	push	{r3, r4, r5, lr}
 8015862:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8015864:	6803      	ldr	r3, [r0, #0]
 8015866:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8015868:	b15d      	cbz	r5, 8015882 <lwip_netconn_do_delconn+0x22>
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015870:	2b10      	cmp	r3, #16
 8015872:	d006      	beq.n	8015882 <lwip_netconn_do_delconn+0x22>
 8015874:	4b4b      	ldr	r3, [pc, #300]	; (80159a4 <lwip_netconn_do_delconn+0x144>)
 8015876:	f240 4201 	movw	r2, #1025	; 0x401
 801587a:	494b      	ldr	r1, [pc, #300]	; (80159a8 <lwip_netconn_do_delconn+0x148>)
 801587c:	484b      	ldr	r0, [pc, #300]	; (80159ac <lwip_netconn_do_delconn+0x14c>)
 801587e:	f009 fd58 	bl	801f332 <iprintf>
  if (((state != NETCONN_NONE) &&
 8015882:	b1d5      	cbz	r5, 80158ba <lwip_netconn_do_delconn+0x5a>
 8015884:	2d02      	cmp	r5, #2
 8015886:	d018      	beq.n	80158ba <lwip_netconn_do_delconn+0x5a>
       (state != NETCONN_LISTEN) &&
 8015888:	2d03      	cmp	r5, #3
 801588a:	d016      	beq.n	80158ba <lwip_netconn_do_delconn+0x5a>
    msg->err = ERR_INPROGRESS;
 801588c:	23fb      	movs	r3, #251	; 0xfb
 801588e:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8015890:	6820      	ldr	r0, [r4, #0]
 8015892:	300c      	adds	r0, #12
 8015894:	f006 fe70 	bl	801c578 <sys_sem_valid>
 8015898:	b170      	cbz	r0, 80158b8 <lwip_netconn_do_delconn+0x58>
    TCPIP_APIMSG_ACK(msg);
 801589a:	6823      	ldr	r3, [r4, #0]
 801589c:	b163      	cbz	r3, 80158b8 <lwip_netconn_do_delconn+0x58>
 801589e:	f006 feb3 	bl	801c608 <sys_arch_protect>
 80158a2:	6823      	ldr	r3, [r4, #0]
 80158a4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80158a8:	f112 0f0c 	cmn.w	r2, #12
 80158ac:	db02      	blt.n	80158b4 <lwip_netconn_do_delconn+0x54>
 80158ae:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80158b2:	721a      	strb	r2, [r3, #8]
 80158b4:	f006 feb4 	bl	801c620 <sys_arch_unprotect>
 80158b8:	bd38      	pop	{r3, r4, r5, pc}
       (state != NETCONN_CONNECT)) ||
 80158ba:	2d03      	cmp	r5, #3
 80158bc:	d049      	beq.n	8015952 <lwip_netconn_do_delconn+0xf2>
    LWIP_ASSERT("blocking connect in progress",
 80158be:	2d03      	cmp	r5, #3
 80158c0:	d04d      	beq.n	801595e <lwip_netconn_do_delconn+0xfe>
    msg->err = ERR_OK;
 80158c2:	2300      	movs	r3, #0
 80158c4:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 80158c6:	6820      	ldr	r0, [r4, #0]
 80158c8:	f7ff fef8 	bl	80156bc <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 80158cc:	6823      	ldr	r3, [r4, #0]
 80158ce:	685a      	ldr	r2, [r3, #4]
 80158d0:	2a00      	cmp	r2, #0
 80158d2:	d057      	beq.n	8015984 <lwip_netconn_do_delconn+0x124>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80158d4:	781a      	ldrb	r2, [r3, #0]
 80158d6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80158da:	2a10      	cmp	r2, #16
 80158dc:	d150      	bne.n	8015980 <lwip_netconn_do_delconn+0x120>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80158de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80158e0:	2a00      	cmp	r2, #0
 80158e2:	d049      	beq.n	8015978 <lwip_netconn_do_delconn+0x118>
 80158e4:	4b2f      	ldr	r3, [pc, #188]	; (80159a4 <lwip_netconn_do_delconn+0x144>)
 80158e6:	f240 4235 	movw	r2, #1077	; 0x435
 80158ea:	4931      	ldr	r1, [pc, #196]	; (80159b0 <lwip_netconn_do_delconn+0x150>)
 80158ec:	482f      	ldr	r0, [pc, #188]	; (80159ac <lwip_netconn_do_delconn+0x14c>)
 80158ee:	f009 fd20 	bl	801f332 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80158f2:	6823      	ldr	r3, [r4, #0]
 80158f4:	2204      	movs	r2, #4
 80158f6:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80158f8:	2303      	movs	r3, #3
 80158fa:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 80158fc:	6823      	ldr	r3, [r4, #0]
 80158fe:	625c      	str	r4, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8015900:	2100      	movs	r1, #0
 8015902:	6820      	ldr	r0, [r4, #0]
 8015904:	f7ff fc32 	bl	801516c <lwip_netconn_do_close_internal>
 8015908:	2800      	cmp	r0, #0
 801590a:	d0d5      	beq.n	80158b8 <lwip_netconn_do_delconn+0x58>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801590c:	6823      	ldr	r3, [r4, #0]
 801590e:	785b      	ldrb	r3, [r3, #1]
 8015910:	2b04      	cmp	r3, #4
 8015912:	d006      	beq.n	8015922 <lwip_netconn_do_delconn+0xc2>
 8015914:	4b23      	ldr	r3, [pc, #140]	; (80159a4 <lwip_netconn_do_delconn+0x144>)
 8015916:	f240 423b 	movw	r2, #1083	; 0x43b
 801591a:	4926      	ldr	r1, [pc, #152]	; (80159b4 <lwip_netconn_do_delconn+0x154>)
 801591c:	4823      	ldr	r0, [pc, #140]	; (80159ac <lwip_netconn_do_delconn+0x14c>)
 801591e:	f009 fd08 	bl	801f332 <iprintf>
          UNLOCK_TCPIP_CORE();
 8015922:	4d25      	ldr	r5, [pc, #148]	; (80159b8 <lwip_netconn_do_delconn+0x158>)
 8015924:	4628      	mov	r0, r5
 8015926:	f006 fe55 	bl	801c5d4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801592a:	6820      	ldr	r0, [r4, #0]
 801592c:	2100      	movs	r1, #0
 801592e:	300c      	adds	r0, #12
 8015930:	f006 fdfa 	bl	801c528 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8015934:	4628      	mov	r0, r5
 8015936:	f006 fe46 	bl	801c5c6 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801593a:	6823      	ldr	r3, [r4, #0]
 801593c:	785b      	ldrb	r3, [r3, #1]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d0ba      	beq.n	80158b8 <lwip_netconn_do_delconn+0x58>
 8015942:	4b18      	ldr	r3, [pc, #96]	; (80159a4 <lwip_netconn_do_delconn+0x144>)
 8015944:	f240 423f 	movw	r2, #1087	; 0x43f
 8015948:	491a      	ldr	r1, [pc, #104]	; (80159b4 <lwip_netconn_do_delconn+0x154>)
 801594a:	4818      	ldr	r0, [pc, #96]	; (80159ac <lwip_netconn_do_delconn+0x14c>)
 801594c:	f009 fcf1 	bl	801f332 <iprintf>
 8015950:	bd38      	pop	{r3, r4, r5, pc}
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8015952:	6823      	ldr	r3, [r4, #0]
 8015954:	7f1b      	ldrb	r3, [r3, #28]
 8015956:	f013 0f04 	tst.w	r3, #4
 801595a:	d1b0      	bne.n	80158be <lwip_netconn_do_delconn+0x5e>
 801595c:	e796      	b.n	801588c <lwip_netconn_do_delconn+0x2c>
    LWIP_ASSERT("blocking connect in progress",
 801595e:	6823      	ldr	r3, [r4, #0]
 8015960:	7f1b      	ldrb	r3, [r3, #28]
 8015962:	f013 0f04 	tst.w	r3, #4
 8015966:	d1ac      	bne.n	80158c2 <lwip_netconn_do_delconn+0x62>
 8015968:	4b0e      	ldr	r3, [pc, #56]	; (80159a4 <lwip_netconn_do_delconn+0x144>)
 801596a:	f240 421f 	movw	r2, #1055	; 0x41f
 801596e:	4913      	ldr	r1, [pc, #76]	; (80159bc <lwip_netconn_do_delconn+0x15c>)
 8015970:	480e      	ldr	r0, [pc, #56]	; (80159ac <lwip_netconn_do_delconn+0x14c>)
 8015972:	f009 fcde 	bl	801f332 <iprintf>
 8015976:	e7a4      	b.n	80158c2 <lwip_netconn_do_delconn+0x62>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015978:	6a1b      	ldr	r3, [r3, #32]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d0b9      	beq.n	80158f2 <lwip_netconn_do_delconn+0x92>
 801597e:	e7b1      	b.n	80158e4 <lwip_netconn_do_delconn+0x84>
      msg->conn->pcb.tcp = NULL;
 8015980:	2200      	movs	r2, #0
 8015982:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8015984:	6820      	ldr	r0, [r4, #0]
 8015986:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015988:	b113      	cbz	r3, 8015990 <lwip_netconn_do_delconn+0x130>
 801598a:	2200      	movs	r2, #0
 801598c:	4611      	mov	r1, r2
 801598e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8015990:	6820      	ldr	r0, [r4, #0]
 8015992:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015994:	2b00      	cmp	r3, #0
 8015996:	f43f af7b 	beq.w	8015890 <lwip_netconn_do_delconn+0x30>
 801599a:	2200      	movs	r2, #0
 801599c:	2102      	movs	r1, #2
 801599e:	4798      	blx	r3
 80159a0:	e776      	b.n	8015890 <lwip_netconn_do_delconn+0x30>
 80159a2:	bf00      	nop
 80159a4:	08020fb4 	.word	0x08020fb4
 80159a8:	08020de0 	.word	0x08020de0
 80159ac:	08020b90 	.word	0x08020b90
 80159b0:	08020e14 	.word	0x08020e14
 80159b4:	08020e30 	.word	0x08020e30
 80159b8:	2000a24c 	.word	0x2000a24c
 80159bc:	08020df4 	.word	0x08020df4

080159c0 <lwip_netconn_do_bind>:
{
 80159c0:	b510      	push	{r4, lr}
 80159c2:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80159c4:	6803      	ldr	r3, [r0, #0]
 80159c6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80159ca:	f112 0f0c 	cmn.w	r2, #12
 80159ce:	da10      	bge.n	80159f2 <lwip_netconn_do_bind+0x32>
    msg->err = msg->conn->last_err;
 80159d0:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 80159d2:	6823      	ldr	r3, [r4, #0]
 80159d4:	b163      	cbz	r3, 80159f0 <lwip_netconn_do_bind+0x30>
 80159d6:	f006 fe17 	bl	801c608 <sys_arch_protect>
 80159da:	6823      	ldr	r3, [r4, #0]
 80159dc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80159e0:	f112 0f0c 	cmn.w	r2, #12
 80159e4:	db02      	blt.n	80159ec <lwip_netconn_do_bind+0x2c>
 80159e6:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80159ea:	721a      	strb	r2, [r3, #8]
 80159ec:	f006 fe18 	bl	801c620 <sys_arch_unprotect>
 80159f0:	bd10      	pop	{r4, pc}
    msg->err = ERR_VAL;
 80159f2:	22fa      	movs	r2, #250	; 0xfa
 80159f4:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80159f6:	6858      	ldr	r0, [r3, #4]
 80159f8:	2800      	cmp	r0, #0
 80159fa:	d0ea      	beq.n	80159d2 <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015a02:	2b10      	cmp	r3, #16
 8015a04:	d1e5      	bne.n	80159d2 <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8015a06:	89a2      	ldrh	r2, [r4, #12]
 8015a08:	68a1      	ldr	r1, [r4, #8]
 8015a0a:	f002 ffc5 	bl	8018998 <tcp_bind>
 8015a0e:	7120      	strb	r0, [r4, #4]
        break;
 8015a10:	e7df      	b.n	80159d2 <lwip_netconn_do_bind+0x12>
	...

08015a14 <lwip_netconn_do_listen>:
{
 8015a14:	b530      	push	{r4, r5, lr}
 8015a16:	b083      	sub	sp, #12
 8015a18:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015a1a:	6803      	ldr	r3, [r0, #0]
 8015a1c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015a20:	f112 0f0c 	cmn.w	r2, #12
 8015a24:	da11      	bge.n	8015a4a <lwip_netconn_do_listen+0x36>
    msg->err = msg->conn->last_err;
 8015a26:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8015a28:	6823      	ldr	r3, [r4, #0]
 8015a2a:	b163      	cbz	r3, 8015a46 <lwip_netconn_do_listen+0x32>
 8015a2c:	f006 fdec 	bl	801c608 <sys_arch_protect>
 8015a30:	6823      	ldr	r3, [r4, #0]
 8015a32:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015a36:	f112 0f0c 	cmn.w	r2, #12
 8015a3a:	db02      	blt.n	8015a42 <lwip_netconn_do_listen+0x2e>
 8015a3c:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015a40:	721a      	strb	r2, [r3, #8]
 8015a42:	f006 fded 	bl	801c620 <sys_arch_unprotect>
}
 8015a46:	b003      	add	sp, #12
 8015a48:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 8015a4a:	22f5      	movs	r2, #245	; 0xf5
 8015a4c:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8015a4e:	6858      	ldr	r0, [r3, #4]
 8015a50:	2800      	cmp	r0, #0
 8015a52:	d0e9      	beq.n	8015a28 <lwip_netconn_do_listen+0x14>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015a54:	781a      	ldrb	r2, [r3, #0]
 8015a56:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8015a5a:	2a10      	cmp	r2, #16
 8015a5c:	d002      	beq.n	8015a64 <lwip_netconn_do_listen+0x50>
        msg->err = ERR_ARG;
 8015a5e:	23f0      	movs	r3, #240	; 0xf0
 8015a60:	7123      	strb	r3, [r4, #4]
 8015a62:	e7e1      	b.n	8015a28 <lwip_netconn_do_listen+0x14>
        if (msg->conn->state == NETCONN_NONE) {
 8015a64:	785b      	ldrb	r3, [r3, #1]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d145      	bne.n	8015af6 <lwip_netconn_do_listen+0xe2>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8015a6a:	7d03      	ldrb	r3, [r0, #20]
 8015a6c:	b113      	cbz	r3, 8015a74 <lwip_netconn_do_listen+0x60>
            msg->err = ERR_VAL;
 8015a6e:	23fa      	movs	r3, #250	; 0xfa
 8015a70:	7123      	strb	r3, [r4, #4]
 8015a72:	e7d9      	b.n	8015a28 <lwip_netconn_do_listen+0x14>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8015a74:	f10d 0207 	add.w	r2, sp, #7
 8015a78:	21ff      	movs	r1, #255	; 0xff
 8015a7a:	f002 ffeb 	bl	8018a54 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8015a7e:	4605      	mov	r5, r0
 8015a80:	b1f0      	cbz	r0, 8015ac0 <lwip_netconn_do_listen+0xac>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8015a82:	6820      	ldr	r0, [r4, #0]
 8015a84:	3010      	adds	r0, #16
 8015a86:	f006 fd2d 	bl	801c4e4 <sys_mbox_valid>
 8015a8a:	b9e8      	cbnz	r0, 8015ac8 <lwip_netconn_do_listen+0xb4>
              msg->err = ERR_OK;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8015a90:	6820      	ldr	r0, [r4, #0]
 8015a92:	3014      	adds	r0, #20
 8015a94:	f006 fd26 	bl	801c4e4 <sys_mbox_valid>
 8015a98:	b1f8      	cbz	r0, 8015ada <lwip_netconn_do_listen+0xc6>
              if (msg->err == ERR_OK) {
 8015a9a:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8015a9e:	bb1b      	cbnz	r3, 8015ae8 <lwip_netconn_do_listen+0xd4>
                msg->conn->state = NETCONN_LISTEN;
 8015aa0:	6823      	ldr	r3, [r4, #0]
 8015aa2:	2202      	movs	r2, #2
 8015aa4:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8015aa6:	6823      	ldr	r3, [r4, #0]
 8015aa8:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8015aaa:	6823      	ldr	r3, [r4, #0]
 8015aac:	4619      	mov	r1, r3
 8015aae:	6858      	ldr	r0, [r3, #4]
 8015ab0:	f003 f8cd 	bl	8018c4e <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8015ab4:	6823      	ldr	r3, [r4, #0]
 8015ab6:	4912      	ldr	r1, [pc, #72]	; (8015b00 <lwip_netconn_do_listen+0xec>)
 8015ab8:	6858      	ldr	r0, [r3, #4]
 8015aba:	f003 f917 	bl	8018cec <tcp_accept>
 8015abe:	e7b3      	b.n	8015a28 <lwip_netconn_do_listen+0x14>
              msg->err = err;
 8015ac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015ac4:	7123      	strb	r3, [r4, #4]
 8015ac6:	e7af      	b.n	8015a28 <lwip_netconn_do_listen+0x14>
                sys_mbox_free(&msg->conn->recvmbox);
 8015ac8:	6820      	ldr	r0, [r4, #0]
 8015aca:	3010      	adds	r0, #16
 8015acc:	f006 fcac 	bl	801c428 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8015ad0:	6820      	ldr	r0, [r4, #0]
 8015ad2:	3010      	adds	r0, #16
 8015ad4:	f006 fd0c 	bl	801c4f0 <sys_mbox_set_invalid>
 8015ad8:	e7d8      	b.n	8015a8c <lwip_netconn_do_listen+0x78>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8015ada:	6820      	ldr	r0, [r4, #0]
 8015adc:	2106      	movs	r1, #6
 8015ade:	3014      	adds	r0, #20
 8015ae0:	f006 fc8e 	bl	801c400 <sys_mbox_new>
 8015ae4:	7120      	strb	r0, [r4, #4]
 8015ae6:	e7d8      	b.n	8015a9a <lwip_netconn_do_listen+0x86>
                tcp_close(lpcb);
 8015ae8:	4628      	mov	r0, r5
 8015aea:	f003 fc43 	bl	8019374 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8015aee:	6823      	ldr	r3, [r4, #0]
 8015af0:	2200      	movs	r2, #0
 8015af2:	605a      	str	r2, [r3, #4]
 8015af4:	e798      	b.n	8015a28 <lwip_netconn_do_listen+0x14>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8015af6:	2b02      	cmp	r3, #2
 8015af8:	d196      	bne.n	8015a28 <lwip_netconn_do_listen+0x14>
          msg->err = ERR_OK;
 8015afa:	2300      	movs	r3, #0
 8015afc:	7123      	strb	r3, [r4, #4]
 8015afe:	e793      	b.n	8015a28 <lwip_netconn_do_listen+0x14>
 8015b00:	08015761 	.word	0x08015761

08015b04 <lwip_netconn_do_recv>:
{
 8015b04:	b570      	push	{r4, r5, r6, lr}
 8015b06:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8015b0c:	6803      	ldr	r3, [r0, #0]
 8015b0e:	685a      	ldr	r2, [r3, #4]
 8015b10:	b122      	cbz	r2, 8015b1c <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015b12:	781b      	ldrb	r3, [r3, #0]
 8015b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b18:	2b10      	cmp	r3, #16
 8015b1a:	d00f      	beq.n	8015b3c <lwip_netconn_do_recv+0x38>
  TCPIP_APIMSG_ACK(msg);
 8015b1c:	6833      	ldr	r3, [r6, #0]
 8015b1e:	b163      	cbz	r3, 8015b3a <lwip_netconn_do_recv+0x36>
 8015b20:	f006 fd72 	bl	801c608 <sys_arch_protect>
 8015b24:	6833      	ldr	r3, [r6, #0]
 8015b26:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015b2a:	f112 0f0c 	cmn.w	r2, #12
 8015b2e:	db02      	blt.n	8015b36 <lwip_netconn_do_recv+0x32>
 8015b30:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8015b34:	721a      	strb	r2, [r3, #8]
 8015b36:	f006 fd73 	bl	801c620 <sys_arch_unprotect>
 8015b3a:	bd70      	pop	{r4, r5, r6, pc}
      u32_t remaining = msg->msg.r.len;
 8015b3c:	6884      	ldr	r4, [r0, #8]
 8015b3e:	e008      	b.n	8015b52 <lwip_netconn_do_recv+0x4e>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8015b40:	f64f 75ff 	movw	r5, #65535	; 0xffff
        tcp_recved(msg->conn->pcb.tcp, recved);
 8015b44:	6833      	ldr	r3, [r6, #0]
 8015b46:	4629      	mov	r1, r5
 8015b48:	6858      	ldr	r0, [r3, #4]
 8015b4a:	f003 f813 	bl	8018b74 <tcp_recved>
      } while (remaining != 0);
 8015b4e:	1b64      	subs	r4, r4, r5
 8015b50:	d0e4      	beq.n	8015b1c <lwip_netconn_do_recv+0x18>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8015b52:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8015b56:	d2f3      	bcs.n	8015b40 <lwip_netconn_do_recv+0x3c>
 8015b58:	b2a5      	uxth	r5, r4
 8015b5a:	e7f3      	b.n	8015b44 <lwip_netconn_do_recv+0x40>

08015b5c <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8015b5c:	b538      	push	{r3, r4, r5, lr}
 8015b5e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015b60:	6803      	ldr	r3, [r0, #0]
 8015b62:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015b66:	f112 0f0c 	cmn.w	r2, #12
 8015b6a:	da0f      	bge.n	8015b8c <lwip_netconn_do_write+0x30>
    msg->err = msg->conn->last_err;
 8015b6c:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8015b6e:	b163      	cbz	r3, 8015b8a <lwip_netconn_do_write+0x2e>
 8015b70:	f006 fd4a 	bl	801c608 <sys_arch_protect>
 8015b74:	6823      	ldr	r3, [r4, #0]
 8015b76:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015b7a:	f112 0f0c 	cmn.w	r2, #12
 8015b7e:	db02      	blt.n	8015b86 <lwip_netconn_do_write+0x2a>
 8015b80:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015b84:	721a      	strb	r2, [r3, #8]
 8015b86:	f006 fd4b 	bl	801c620 <sys_arch_unprotect>
 8015b8a:	bd38      	pop	{r3, r4, r5, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015b8c:	781a      	ldrb	r2, [r3, #0]
 8015b8e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8015b92:	2a10      	cmp	r2, #16
 8015b94:	d1eb      	bne.n	8015b6e <lwip_netconn_do_write+0x12>
      if (msg->conn->state != NETCONN_NONE) {
 8015b96:	785a      	ldrb	r2, [r3, #1]
 8015b98:	b112      	cbz	r2, 8015ba0 <lwip_netconn_do_write+0x44>
        msg->err = ERR_INPROGRESS;
 8015b9a:	22fb      	movs	r2, #251	; 0xfb
 8015b9c:	7102      	strb	r2, [r0, #4]
 8015b9e:	e7e6      	b.n	8015b6e <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 8015ba0:	685a      	ldr	r2, [r3, #4]
 8015ba2:	2a00      	cmp	r2, #0
 8015ba4:	d048      	beq.n	8015c38 <lwip_netconn_do_write+0xdc>
        msg->conn->state = NETCONN_WRITE;
 8015ba6:	2201      	movs	r2, #1
 8015ba8:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015baa:	6803      	ldr	r3, [r0, #0]
 8015bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bae:	2a00      	cmp	r2, #0
 8015bb0:	d036      	beq.n	8015c20 <lwip_netconn_do_write+0xc4>
 8015bb2:	4b23      	ldr	r3, [pc, #140]	; (8015c40 <lwip_netconn_do_write+0xe4>)
 8015bb4:	f240 6283 	movw	r2, #1667	; 0x683
 8015bb8:	4922      	ldr	r1, [pc, #136]	; (8015c44 <lwip_netconn_do_write+0xe8>)
 8015bba:	4823      	ldr	r0, [pc, #140]	; (8015c48 <lwip_netconn_do_write+0xec>)
 8015bbc:	f009 fbb9 	bl	801f332 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8015bc0:	68e3      	ldr	r3, [r4, #12]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d030      	beq.n	8015c28 <lwip_netconn_do_write+0xcc>
        msg->conn->current_msg = msg;
 8015bc6:	6823      	ldr	r3, [r4, #0]
 8015bc8:	625c      	str	r4, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8015bca:	6823      	ldr	r3, [r4, #0]
 8015bcc:	2100      	movs	r1, #0
 8015bce:	6219      	str	r1, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8015bd0:	6820      	ldr	r0, [r4, #0]
 8015bd2:	f7ff f9bb 	bl	8014f4c <lwip_netconn_do_writemore>
 8015bd6:	2800      	cmp	r0, #0
 8015bd8:	d0d7      	beq.n	8015b8a <lwip_netconn_do_write+0x2e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8015bda:	6823      	ldr	r3, [r4, #0]
 8015bdc:	785b      	ldrb	r3, [r3, #1]
 8015bde:	2b01      	cmp	r3, #1
 8015be0:	d006      	beq.n	8015bf0 <lwip_netconn_do_write+0x94>
 8015be2:	4b17      	ldr	r3, [pc, #92]	; (8015c40 <lwip_netconn_do_write+0xe4>)
 8015be4:	f240 6289 	movw	r2, #1673	; 0x689
 8015be8:	4918      	ldr	r1, [pc, #96]	; (8015c4c <lwip_netconn_do_write+0xf0>)
 8015bea:	4817      	ldr	r0, [pc, #92]	; (8015c48 <lwip_netconn_do_write+0xec>)
 8015bec:	f009 fba1 	bl	801f332 <iprintf>
          UNLOCK_TCPIP_CORE();
 8015bf0:	4d17      	ldr	r5, [pc, #92]	; (8015c50 <lwip_netconn_do_write+0xf4>)
 8015bf2:	4628      	mov	r0, r5
 8015bf4:	f006 fcee 	bl	801c5d4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015bf8:	6820      	ldr	r0, [r4, #0]
 8015bfa:	2100      	movs	r1, #0
 8015bfc:	300c      	adds	r0, #12
 8015bfe:	f006 fc93 	bl	801c528 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8015c02:	4628      	mov	r0, r5
 8015c04:	f006 fcdf 	bl	801c5c6 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8015c08:	6823      	ldr	r3, [r4, #0]
 8015c0a:	785b      	ldrb	r3, [r3, #1]
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	d1bc      	bne.n	8015b8a <lwip_netconn_do_write+0x2e>
 8015c10:	4b0b      	ldr	r3, [pc, #44]	; (8015c40 <lwip_netconn_do_write+0xe4>)
 8015c12:	f240 628d 	movw	r2, #1677	; 0x68d
 8015c16:	490d      	ldr	r1, [pc, #52]	; (8015c4c <lwip_netconn_do_write+0xf0>)
 8015c18:	480b      	ldr	r0, [pc, #44]	; (8015c48 <lwip_netconn_do_write+0xec>)
 8015c1a:	f009 fb8a 	bl	801f332 <iprintf>
 8015c1e:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015c20:	6a1b      	ldr	r3, [r3, #32]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d0cc      	beq.n	8015bc0 <lwip_netconn_do_write+0x64>
 8015c26:	e7c4      	b.n	8015bb2 <lwip_netconn_do_write+0x56>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8015c28:	4b05      	ldr	r3, [pc, #20]	; (8015c40 <lwip_netconn_do_write+0xe4>)
 8015c2a:	f240 6284 	movw	r2, #1668	; 0x684
 8015c2e:	4909      	ldr	r1, [pc, #36]	; (8015c54 <lwip_netconn_do_write+0xf8>)
 8015c30:	4805      	ldr	r0, [pc, #20]	; (8015c48 <lwip_netconn_do_write+0xec>)
 8015c32:	f009 fb7e 	bl	801f332 <iprintf>
 8015c36:	e7c6      	b.n	8015bc6 <lwip_netconn_do_write+0x6a>
        msg->err = ERR_CONN;
 8015c38:	22f5      	movs	r2, #245	; 0xf5
 8015c3a:	7102      	strb	r2, [r0, #4]
 8015c3c:	e797      	b.n	8015b6e <lwip_netconn_do_write+0x12>
 8015c3e:	bf00      	nop
 8015c40:	08020fb4 	.word	0x08020fb4
 8015c44:	08020e14 	.word	0x08020e14
 8015c48:	08020b90 	.word	0x08020b90
 8015c4c:	08020e30 	.word	0x08020e30
 8015c50:	2000a24c 	.word	0x2000a24c
 8015c54:	08020e38 	.word	0x08020e38

08015c58 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8015c58:	b538      	push	{r3, r4, r5, lr}
 8015c5a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8015c5c:	6800      	ldr	r0, [r0, #0]
 8015c5e:	7842      	ldrb	r2, [r0, #1]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8015c60:	6843      	ldr	r3, [r0, #4]
 8015c62:	b123      	cbz	r3, 8015c6e <lwip_netconn_do_close+0x16>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8015c64:	7803      	ldrb	r3, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 8015c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c6a:	2b10      	cmp	r3, #16
 8015c6c:	d010      	beq.n	8015c90 <lwip_netconn_do_close+0x38>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8015c6e:	23f5      	movs	r3, #245	; 0xf5
 8015c70:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8015c72:	b160      	cbz	r0, 8015c8e <lwip_netconn_do_close+0x36>
 8015c74:	f006 fcc8 	bl	801c608 <sys_arch_protect>
 8015c78:	6823      	ldr	r3, [r4, #0]
 8015c7a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015c7e:	f112 0f0c 	cmn.w	r2, #12
 8015c82:	db02      	blt.n	8015c8a <lwip_netconn_do_close+0x32>
 8015c84:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015c88:	721a      	strb	r2, [r3, #8]
 8015c8a:	f006 fcc9 	bl	801c620 <sys_arch_unprotect>
 8015c8e:	bd38      	pop	{r3, r4, r5, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8015c90:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8015c92:	2b03      	cmp	r3, #3
 8015c94:	d001      	beq.n	8015c9a <lwip_netconn_do_close+0x42>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8015c96:	2a02      	cmp	r2, #2
 8015c98:	d0e9      	beq.n	8015c6e <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 8015c9a:	2a03      	cmp	r2, #3
 8015c9c:	d03d      	beq.n	8015d1a <lwip_netconn_do_close+0xc2>
    } else if (state == NETCONN_WRITE) {
 8015c9e:	2a01      	cmp	r2, #1
 8015ca0:	d03e      	beq.n	8015d20 <lwip_netconn_do_close+0xc8>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8015ca2:	f013 0f01 	tst.w	r3, #1
 8015ca6:	d13e      	bne.n	8015d26 <lwip_netconn_do_close+0xce>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015ca8:	6823      	ldr	r3, [r4, #0]
 8015caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015cac:	2a00      	cmp	r2, #0
 8015cae:	d03d      	beq.n	8015d2c <lwip_netconn_do_close+0xd4>
 8015cb0:	4b20      	ldr	r3, [pc, #128]	; (8015d34 <lwip_netconn_do_close+0xdc>)
 8015cb2:	f240 721c 	movw	r2, #1820	; 0x71c
 8015cb6:	4920      	ldr	r1, [pc, #128]	; (8015d38 <lwip_netconn_do_close+0xe0>)
 8015cb8:	4820      	ldr	r0, [pc, #128]	; (8015d3c <lwip_netconn_do_close+0xe4>)
 8015cba:	f009 fb3a 	bl	801f332 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8015cbe:	6823      	ldr	r3, [r4, #0]
 8015cc0:	2204      	movs	r2, #4
 8015cc2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8015cc4:	6823      	ldr	r3, [r4, #0]
 8015cc6:	625c      	str	r4, [r3, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8015cc8:	2100      	movs	r1, #0
 8015cca:	6820      	ldr	r0, [r4, #0]
 8015ccc:	f7ff fa4e 	bl	801516c <lwip_netconn_do_close_internal>
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	d0dc      	beq.n	8015c8e <lwip_netconn_do_close+0x36>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8015cd4:	6823      	ldr	r3, [r4, #0]
 8015cd6:	785b      	ldrb	r3, [r3, #1]
 8015cd8:	2b04      	cmp	r3, #4
 8015cda:	d006      	beq.n	8015cea <lwip_netconn_do_close+0x92>
 8015cdc:	4b15      	ldr	r3, [pc, #84]	; (8015d34 <lwip_netconn_do_close+0xdc>)
 8015cde:	f240 7221 	movw	r2, #1825	; 0x721
 8015ce2:	4917      	ldr	r1, [pc, #92]	; (8015d40 <lwip_netconn_do_close+0xe8>)
 8015ce4:	4815      	ldr	r0, [pc, #84]	; (8015d3c <lwip_netconn_do_close+0xe4>)
 8015ce6:	f009 fb24 	bl	801f332 <iprintf>
        UNLOCK_TCPIP_CORE();
 8015cea:	4d16      	ldr	r5, [pc, #88]	; (8015d44 <lwip_netconn_do_close+0xec>)
 8015cec:	4628      	mov	r0, r5
 8015cee:	f006 fc71 	bl	801c5d4 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015cf2:	6820      	ldr	r0, [r4, #0]
 8015cf4:	2100      	movs	r1, #0
 8015cf6:	300c      	adds	r0, #12
 8015cf8:	f006 fc16 	bl	801c528 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8015cfc:	4628      	mov	r0, r5
 8015cfe:	f006 fc62 	bl	801c5c6 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015d02:	6823      	ldr	r3, [r4, #0]
 8015d04:	785b      	ldrb	r3, [r3, #1]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d0c1      	beq.n	8015c8e <lwip_netconn_do_close+0x36>
 8015d0a:	4b0a      	ldr	r3, [pc, #40]	; (8015d34 <lwip_netconn_do_close+0xdc>)
 8015d0c:	f240 7225 	movw	r2, #1829	; 0x725
 8015d10:	490b      	ldr	r1, [pc, #44]	; (8015d40 <lwip_netconn_do_close+0xe8>)
 8015d12:	480a      	ldr	r0, [pc, #40]	; (8015d3c <lwip_netconn_do_close+0xe4>)
 8015d14:	f009 fb0d 	bl	801f332 <iprintf>
 8015d18:	bd38      	pop	{r3, r4, r5, pc}
      msg->err = ERR_CONN;
 8015d1a:	23f5      	movs	r3, #245	; 0xf5
 8015d1c:	7123      	strb	r3, [r4, #4]
 8015d1e:	e7a8      	b.n	8015c72 <lwip_netconn_do_close+0x1a>
      msg->err = ERR_INPROGRESS;
 8015d20:	23fb      	movs	r3, #251	; 0xfb
 8015d22:	7123      	strb	r3, [r4, #4]
 8015d24:	e7a5      	b.n	8015c72 <lwip_netconn_do_close+0x1a>
        netconn_drain(msg->conn);
 8015d26:	f7ff fcc9 	bl	80156bc <netconn_drain>
 8015d2a:	e7bd      	b.n	8015ca8 <lwip_netconn_do_close+0x50>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015d2c:	6a1b      	ldr	r3, [r3, #32]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d0c5      	beq.n	8015cbe <lwip_netconn_do_close+0x66>
 8015d32:	e7bd      	b.n	8015cb0 <lwip_netconn_do_close+0x58>
 8015d34:	08020fb4 	.word	0x08020fb4
 8015d38:	08020e14 	.word	0x08020e14
 8015d3c:	08020b90 	.word	0x08020b90
 8015d40:	08020e30 	.word	0x08020e30
 8015d44:	2000a24c 	.word	0x2000a24c

08015d48 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8015d48:	b168      	cbz	r0, 8015d66 <netbuf_delete+0x1e>
{
 8015d4a:	b510      	push	{r4, lr}
 8015d4c:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 8015d4e:	6800      	ldr	r0, [r0, #0]
 8015d50:	b120      	cbz	r0, 8015d5c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8015d52:	f002 fa6d 	bl	8018230 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8015d56:	2300      	movs	r3, #0
 8015d58:	6063      	str	r3, [r4, #4]
 8015d5a:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8015d5c:	4621      	mov	r1, r4
 8015d5e:	2005      	movs	r0, #5
 8015d60:	f002 f896 	bl	8017e90 <memp_free>
 8015d64:	bd10      	pop	{r4, pc}
 8015d66:	4770      	bx	lr

08015d68 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8015d68:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8015d6a:	b158      	cbz	r0, 8015d84 <netbuf_data+0x1c>
 8015d6c:	4603      	mov	r3, r0
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8015d6e:	b191      	cbz	r1, 8015d96 <netbuf_data+0x2e>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8015d70:	b1d2      	cbz	r2, 8015da8 <netbuf_data+0x40>

  if (buf->ptr == NULL) {
 8015d72:	6840      	ldr	r0, [r0, #4]
 8015d74:	b308      	cbz	r0, 8015dba <netbuf_data+0x52>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 8015d76:	6840      	ldr	r0, [r0, #4]
 8015d78:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	895b      	ldrh	r3, [r3, #10]
 8015d7e:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8015d80:	2000      	movs	r0, #0
 8015d82:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8015d84:	4b0e      	ldr	r3, [pc, #56]	; (8015dc0 <netbuf_data+0x58>)
 8015d86:	22c2      	movs	r2, #194	; 0xc2
 8015d88:	490e      	ldr	r1, [pc, #56]	; (8015dc4 <netbuf_data+0x5c>)
 8015d8a:	480f      	ldr	r0, [pc, #60]	; (8015dc8 <netbuf_data+0x60>)
 8015d8c:	f009 fad1 	bl	801f332 <iprintf>
 8015d90:	f06f 000f 	mvn.w	r0, #15
 8015d94:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8015d96:	4b0a      	ldr	r3, [pc, #40]	; (8015dc0 <netbuf_data+0x58>)
 8015d98:	22c3      	movs	r2, #195	; 0xc3
 8015d9a:	490c      	ldr	r1, [pc, #48]	; (8015dcc <netbuf_data+0x64>)
 8015d9c:	480a      	ldr	r0, [pc, #40]	; (8015dc8 <netbuf_data+0x60>)
 8015d9e:	f009 fac8 	bl	801f332 <iprintf>
 8015da2:	f06f 000f 	mvn.w	r0, #15
 8015da6:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8015da8:	4b05      	ldr	r3, [pc, #20]	; (8015dc0 <netbuf_data+0x58>)
 8015daa:	22c4      	movs	r2, #196	; 0xc4
 8015dac:	4908      	ldr	r1, [pc, #32]	; (8015dd0 <netbuf_data+0x68>)
 8015dae:	4806      	ldr	r0, [pc, #24]	; (8015dc8 <netbuf_data+0x60>)
 8015db0:	f009 fabf 	bl	801f332 <iprintf>
 8015db4:	f06f 000f 	mvn.w	r0, #15
 8015db8:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 8015dba:	f06f 0001 	mvn.w	r0, #1
}
 8015dbe:	bd08      	pop	{r3, pc}
 8015dc0:	0802106c 	.word	0x0802106c
 8015dc4:	080210e0 	.word	0x080210e0
 8015dc8:	08020b90 	.word	0x08020b90
 8015dcc:	080210fc 	.word	0x080210fc
 8015dd0:	0802111c 	.word	0x0802111c

08015dd4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8015dd4:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8015dd6:	b138      	cbz	r0, 8015de8 <netbuf_next+0x14>
  if (buf->ptr->next == NULL) {
 8015dd8:	6843      	ldr	r3, [r0, #4]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	b17b      	cbz	r3, 8015dfe <netbuf_next+0x2a>
    return -1;
  }
  buf->ptr = buf->ptr->next;
 8015dde:	6043      	str	r3, [r0, #4]
  if (buf->ptr->next == NULL) {
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	b153      	cbz	r3, 8015dfa <netbuf_next+0x26>
    return 1;
  }
  return 0;
 8015de4:	2000      	movs	r0, #0
}
 8015de6:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8015de8:	4b06      	ldr	r3, [pc, #24]	; (8015e04 <netbuf_next+0x30>)
 8015dea:	22dc      	movs	r2, #220	; 0xdc
 8015dec:	4906      	ldr	r1, [pc, #24]	; (8015e08 <netbuf_next+0x34>)
 8015dee:	4807      	ldr	r0, [pc, #28]	; (8015e0c <netbuf_next+0x38>)
 8015df0:	f009 fa9f 	bl	801f332 <iprintf>
 8015df4:	f04f 30ff 	mov.w	r0, #4294967295
 8015df8:	bd08      	pop	{r3, pc}
    return 1;
 8015dfa:	2001      	movs	r0, #1
 8015dfc:	bd08      	pop	{r3, pc}
    return -1;
 8015dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8015e02:	bd08      	pop	{r3, pc}
 8015e04:	0802106c 	.word	0x0802106c
 8015e08:	08021138 	.word	0x08021138
 8015e0c:	08020b90 	.word	0x08020b90

08015e10 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8015e10:	b500      	push	{lr}
 8015e12:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8015e14:	4b20      	ldr	r3, [pc, #128]	; (8015e98 <tcpip_thread+0x88>)
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	b113      	cbz	r3, 8015e20 <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 8015e1a:	4a20      	ldr	r2, [pc, #128]	; (8015e9c <tcpip_thread+0x8c>)
 8015e1c:	6810      	ldr	r0, [r2, #0]
 8015e1e:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8015e20:	481f      	ldr	r0, [pc, #124]	; (8015ea0 <tcpip_thread+0x90>)
 8015e22:	f006 fbd0 	bl	801c5c6 <sys_mutex_lock>
 8015e26:	e00e      	b.n	8015e46 <tcpip_thread+0x36>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015e28:	4b1e      	ldr	r3, [pc, #120]	; (8015ea4 <tcpip_thread+0x94>)
 8015e2a:	2269      	movs	r2, #105	; 0x69
 8015e2c:	491e      	ldr	r1, [pc, #120]	; (8015ea8 <tcpip_thread+0x98>)
 8015e2e:	481f      	ldr	r0, [pc, #124]	; (8015eac <tcpip_thread+0x9c>)
 8015e30:	f009 fa7f 	bl	801f332 <iprintf>
      continue;
 8015e34:	e007      	b.n	8015e46 <tcpip_thread+0x36>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8015e36:	68da      	ldr	r2, [r3, #12]
 8015e38:	6899      	ldr	r1, [r3, #8]
 8015e3a:	6858      	ldr	r0, [r3, #4]
 8015e3c:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015e3e:	9901      	ldr	r1, [sp, #4]
 8015e40:	2008      	movs	r0, #8
 8015e42:	f002 f825 	bl	8017e90 <memp_free>
    UNLOCK_TCPIP_CORE();
 8015e46:	4c16      	ldr	r4, [pc, #88]	; (8015ea0 <tcpip_thread+0x90>)
 8015e48:	4620      	mov	r0, r4
 8015e4a:	f006 fbc3 	bl	801c5d4 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8015e4e:	a901      	add	r1, sp, #4
 8015e50:	4817      	ldr	r0, [pc, #92]	; (8015eb0 <tcpip_thread+0xa0>)
 8015e52:	f006 fa29 	bl	801c2a8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8015e56:	4620      	mov	r0, r4
 8015e58:	f006 fbb5 	bl	801c5c6 <sys_mutex_lock>
    if (msg == NULL) {
 8015e5c:	9b01      	ldr	r3, [sp, #4]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d0e2      	beq.n	8015e28 <tcpip_thread+0x18>
    switch (msg->type) {
 8015e62:	781a      	ldrb	r2, [r3, #0]
 8015e64:	2a03      	cmp	r2, #3
 8015e66:	d00a      	beq.n	8015e7e <tcpip_thread+0x6e>
 8015e68:	2a04      	cmp	r2, #4
 8015e6a:	d010      	beq.n	8015e8e <tcpip_thread+0x7e>
 8015e6c:	2a02      	cmp	r2, #2
 8015e6e:	d0e2      	beq.n	8015e36 <tcpip_thread+0x26>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015e70:	4b0c      	ldr	r3, [pc, #48]	; (8015ea4 <tcpip_thread+0x94>)
 8015e72:	229b      	movs	r2, #155	; 0x9b
 8015e74:	490c      	ldr	r1, [pc, #48]	; (8015ea8 <tcpip_thread+0x98>)
 8015e76:	480d      	ldr	r0, [pc, #52]	; (8015eac <tcpip_thread+0x9c>)
 8015e78:	f009 fa5b 	bl	801f332 <iprintf>
      break;
 8015e7c:	e7e3      	b.n	8015e46 <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015e7e:	685a      	ldr	r2, [r3, #4]
 8015e80:	6898      	ldr	r0, [r3, #8]
 8015e82:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015e84:	9901      	ldr	r1, [sp, #4]
 8015e86:	2007      	movs	r0, #7
 8015e88:	f002 f802 	bl	8017e90 <memp_free>
      break;
 8015e8c:	e7db      	b.n	8015e46 <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015e8e:	685a      	ldr	r2, [r3, #4]
 8015e90:	6898      	ldr	r0, [r3, #8]
 8015e92:	4790      	blx	r2
      break;
 8015e94:	e7d7      	b.n	8015e46 <tcpip_thread+0x36>
 8015e96:	bf00      	nop
 8015e98:	2000937c 	.word	0x2000937c
 8015e9c:	20009380 	.word	0x20009380
 8015ea0:	2000a24c 	.word	0x2000a24c
 8015ea4:	080211bc 	.word	0x080211bc
 8015ea8:	080211ec 	.word	0x080211ec
 8015eac:	08020b90 	.word	0x08020b90
 8015eb0:	20009378 	.word	0x20009378

08015eb4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8015eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eb6:	4607      	mov	r7, r0
 8015eb8:	460e      	mov	r6, r1
 8015eba:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8015ebc:	4813      	ldr	r0, [pc, #76]	; (8015f0c <tcpip_inpkt+0x58>)
 8015ebe:	f006 fb11 	bl	801c4e4 <sys_mbox_valid>
 8015ec2:	b188      	cbz	r0, 8015ee8 <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015ec4:	2008      	movs	r0, #8
 8015ec6:	f001 ffc9 	bl	8017e5c <memp_malloc>
  if (msg == NULL) {
 8015eca:	4604      	mov	r4, r0
 8015ecc:	b1d0      	cbz	r0, 8015f04 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8015ece:	2302      	movs	r3, #2
 8015ed0:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8015ed2:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8015ed4:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8015ed6:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8015ed8:	4601      	mov	r1, r0
 8015eda:	480c      	ldr	r0, [pc, #48]	; (8015f0c <tcpip_inpkt+0x58>)
 8015edc:	f006 fab9 	bl	801c452 <sys_mbox_trypost>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	b940      	cbnz	r0, 8015ef6 <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8015ee8:	4b09      	ldr	r3, [pc, #36]	; (8015f10 <tcpip_inpkt+0x5c>)
 8015eea:	22b5      	movs	r2, #181	; 0xb5
 8015eec:	4909      	ldr	r1, [pc, #36]	; (8015f14 <tcpip_inpkt+0x60>)
 8015eee:	480a      	ldr	r0, [pc, #40]	; (8015f18 <tcpip_inpkt+0x64>)
 8015ef0:	f009 fa1f 	bl	801f332 <iprintf>
 8015ef4:	e7e6      	b.n	8015ec4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015ef6:	4621      	mov	r1, r4
 8015ef8:	2008      	movs	r0, #8
 8015efa:	f001 ffc9 	bl	8017e90 <memp_free>
    return ERR_MEM;
 8015efe:	f04f 33ff 	mov.w	r3, #4294967295
 8015f02:	e7ef      	b.n	8015ee4 <tcpip_inpkt+0x30>
    return ERR_MEM;
 8015f04:	f04f 33ff 	mov.w	r3, #4294967295
 8015f08:	e7ec      	b.n	8015ee4 <tcpip_inpkt+0x30>
 8015f0a:	bf00      	nop
 8015f0c:	20009378 	.word	0x20009378
 8015f10:	080211bc 	.word	0x080211bc
 8015f14:	080211ac 	.word	0x080211ac
 8015f18:	08020b90 	.word	0x08020b90

08015f1c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8015f1c:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8015f1e:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8015f22:	f013 0f18 	tst.w	r3, #24
 8015f26:	d103      	bne.n	8015f30 <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8015f28:	4a03      	ldr	r2, [pc, #12]	; (8015f38 <tcpip_input+0x1c>)
 8015f2a:	f7ff ffc3 	bl	8015eb4 <tcpip_inpkt>
}
 8015f2e:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 8015f30:	4a02      	ldr	r2, [pc, #8]	; (8015f3c <tcpip_input+0x20>)
 8015f32:	f7ff ffbf 	bl	8015eb4 <tcpip_inpkt>
 8015f36:	bd08      	pop	{r3, pc}
 8015f38:	08016c91 	.word	0x08016c91
 8015f3c:	0801c2e9 	.word	0x0801c2e9

08015f40 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8015f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f42:	4607      	mov	r7, r0
 8015f44:	460e      	mov	r6, r1
 8015f46:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8015f48:	4816      	ldr	r0, [pc, #88]	; (8015fa4 <tcpip_callback_with_block+0x64>)
 8015f4a:	f006 facb 	bl	801c4e4 <sys_mbox_valid>
 8015f4e:	b188      	cbz	r0, 8015f74 <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8015f50:	2007      	movs	r0, #7
 8015f52:	f001 ff83 	bl	8017e5c <memp_malloc>
  if (msg == NULL) {
 8015f56:	4604      	mov	r4, r0
 8015f58:	b300      	cbz	r0, 8015f9c <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8015f5a:	2303      	movs	r3, #3
 8015f5c:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8015f5e:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8015f60:	6086      	str	r6, [r0, #8]
  if (block) {
 8015f62:	b975      	cbnz	r5, 8015f82 <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8015f64:	4601      	mov	r1, r0
 8015f66:	480f      	ldr	r0, [pc, #60]	; (8015fa4 <tcpip_callback_with_block+0x64>)
 8015f68:	f006 fa73 	bl	801c452 <sys_mbox_trypost>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	b970      	cbnz	r0, 8015f8e <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8015f74:	4b0c      	ldr	r3, [pc, #48]	; (8015fa8 <tcpip_callback_with_block+0x68>)
 8015f76:	22ee      	movs	r2, #238	; 0xee
 8015f78:	490c      	ldr	r1, [pc, #48]	; (8015fac <tcpip_callback_with_block+0x6c>)
 8015f7a:	480d      	ldr	r0, [pc, #52]	; (8015fb0 <tcpip_callback_with_block+0x70>)
 8015f7c:	f009 f9d9 	bl	801f332 <iprintf>
 8015f80:	e7e6      	b.n	8015f50 <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 8015f82:	4601      	mov	r1, r0
 8015f84:	4807      	ldr	r0, [pc, #28]	; (8015fa4 <tcpip_callback_with_block+0x64>)
 8015f86:	f006 fa58 	bl	801c43a <sys_mbox_post>
  return ERR_OK;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	e7f0      	b.n	8015f70 <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015f8e:	4621      	mov	r1, r4
 8015f90:	2007      	movs	r0, #7
 8015f92:	f001 ff7d 	bl	8017e90 <memp_free>
      return ERR_MEM;
 8015f96:	f04f 33ff 	mov.w	r3, #4294967295
 8015f9a:	e7e9      	b.n	8015f70 <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 8015f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015fa0:	e7e6      	b.n	8015f70 <tcpip_callback_with_block+0x30>
 8015fa2:	bf00      	nop
 8015fa4:	20009378 	.word	0x20009378
 8015fa8:	080211bc 	.word	0x080211bc
 8015fac:	080211ac 	.word	0x080211ac
 8015fb0:	08020b90 	.word	0x08020b90

08015fb4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8015fb4:	b570      	push	{r4, r5, r6, lr}
 8015fb6:	4605      	mov	r5, r0
 8015fb8:	460e      	mov	r6, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8015fba:	4c05      	ldr	r4, [pc, #20]	; (8015fd0 <tcpip_send_msg_wait_sem+0x1c>)
 8015fbc:	4620      	mov	r0, r4
 8015fbe:	f006 fb02 	bl	801c5c6 <sys_mutex_lock>
  fn(apimsg);
 8015fc2:	4630      	mov	r0, r6
 8015fc4:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	f006 fb04 	bl	801c5d4 <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8015fcc:	2000      	movs	r0, #0
 8015fce:	bd70      	pop	{r4, r5, r6, pc}
 8015fd0:	2000a24c 	.word	0x2000a24c

08015fd4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8015fd4:	b530      	push	{r4, r5, lr}
 8015fd6:	b083      	sub	sp, #12
 8015fd8:	4605      	mov	r5, r0
 8015fda:	460c      	mov	r4, r1
  lwip_init();
 8015fdc:	f000 f870 	bl	80160c0 <lwip_init>

  tcpip_init_done = initfunc;
 8015fe0:	4b13      	ldr	r3, [pc, #76]	; (8016030 <tcpip_init+0x5c>)
 8015fe2:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8015fe4:	4b13      	ldr	r3, [pc, #76]	; (8016034 <tcpip_init+0x60>)
 8015fe6:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015fe8:	2106      	movs	r1, #6
 8015fea:	4813      	ldr	r0, [pc, #76]	; (8016038 <tcpip_init+0x64>)
 8015fec:	f006 fa08 	bl	801c400 <sys_mbox_new>
 8015ff0:	b970      	cbnz	r0, 8016010 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8015ff2:	4812      	ldr	r0, [pc, #72]	; (801603c <tcpip_init+0x68>)
 8015ff4:	f006 fad6 	bl	801c5a4 <sys_mutex_new>
 8015ff8:	b990      	cbnz	r0, 8016020 <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8015ffa:	2302      	movs	r3, #2
 8015ffc:	9300      	str	r3, [sp, #0]
 8015ffe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016002:	2200      	movs	r2, #0
 8016004:	490e      	ldr	r1, [pc, #56]	; (8016040 <tcpip_init+0x6c>)
 8016006:	480f      	ldr	r0, [pc, #60]	; (8016044 <tcpip_init+0x70>)
 8016008:	f006 fae9 	bl	801c5de <sys_thread_new>
}
 801600c:	b003      	add	sp, #12
 801600e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016010:	4b0d      	ldr	r3, [pc, #52]	; (8016048 <tcpip_init+0x74>)
 8016012:	f240 12d5 	movw	r2, #469	; 0x1d5
 8016016:	490d      	ldr	r1, [pc, #52]	; (801604c <tcpip_init+0x78>)
 8016018:	480d      	ldr	r0, [pc, #52]	; (8016050 <tcpip_init+0x7c>)
 801601a:	f009 f98a 	bl	801f332 <iprintf>
 801601e:	e7e8      	b.n	8015ff2 <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8016020:	4b09      	ldr	r3, [pc, #36]	; (8016048 <tcpip_init+0x74>)
 8016022:	f240 12d9 	movw	r2, #473	; 0x1d9
 8016026:	490b      	ldr	r1, [pc, #44]	; (8016054 <tcpip_init+0x80>)
 8016028:	4809      	ldr	r0, [pc, #36]	; (8016050 <tcpip_init+0x7c>)
 801602a:	f009 f982 	bl	801f332 <iprintf>
 801602e:	e7e4      	b.n	8015ffa <tcpip_init+0x26>
 8016030:	2000937c 	.word	0x2000937c
 8016034:	20009380 	.word	0x20009380
 8016038:	20009378 	.word	0x20009378
 801603c:	2000a24c 	.word	0x2000a24c
 8016040:	08015e11 	.word	0x08015e11
 8016044:	0802119c 	.word	0x0802119c
 8016048:	080211bc 	.word	0x080211bc
 801604c:	08021154 	.word	0x08021154
 8016050:	08020b90 	.word	0x08020b90
 8016054:	08021178 	.word	0x08021178

08016058 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8016058:	b1c8      	cbz	r0, 801608e <fs_open+0x36>
{
 801605a:	b570      	push	{r4, r5, r6, lr}
 801605c:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 801605e:	b1c9      	cbz	r1, 8016094 <fs_open+0x3c>
 8016060:	460d      	mov	r5, r1
 8016062:	4c0e      	ldr	r4, [pc, #56]	; (801609c <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8016064:	b184      	cbz	r4, 8016088 <fs_open+0x30>
    if (!strcmp(name, (const char *)f->name)) {
 8016066:	6861      	ldr	r1, [r4, #4]
 8016068:	4628      	mov	r0, r5
 801606a:	f7f9 fff7 	bl	801005c <strcmp>
 801606e:	b108      	cbz	r0, 8016074 <fs_open+0x1c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8016070:	6824      	ldr	r4, [r4, #0]
 8016072:	e7f7      	b.n	8016064 <fs_open+0xc>
      file->data = (const char *)f->data;
 8016074:	68a3      	ldr	r3, [r4, #8]
 8016076:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 8016078:	68e3      	ldr	r3, [r4, #12]
 801607a:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 801607c:	68e3      	ldr	r3, [r4, #12]
 801607e:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 8016080:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 8016082:	7c23      	ldrb	r3, [r4, #16]
 8016084:	7433      	strb	r3, [r6, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8016086:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  /* file not found */
  return ERR_VAL;
 8016088:	f06f 0005 	mvn.w	r0, #5
 801608c:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 801608e:	f06f 000f 	mvn.w	r0, #15
 8016092:	4770      	bx	lr
 8016094:	f06f 000f 	mvn.w	r0, #15
}
 8016098:	bd70      	pop	{r4, r5, r6, pc}
 801609a:	bf00      	nop
 801609c:	08023ea8 	.word	0x08023ea8

080160a0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80160a0:	4770      	bx	lr

080160a2 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 80160a2:	ba40      	rev16	r0, r0
}
 80160a4:	b280      	uxth	r0, r0
 80160a6:	4770      	bx	lr

080160a8 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 80160a8:	0203      	lsls	r3, r0, #8
 80160aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80160ae:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80160b2:	0a02      	lsrs	r2, r0, #8
 80160b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80160b8:	4313      	orrs	r3, r2
}
 80160ba:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 80160be:	4770      	bx	lr

080160c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80160c0:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80160c2:	f006 fa63 	bl	801c58c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80160c6:	f001 fc8b 	bl	80179e0 <mem_init>
  memp_init();
 80160ca:	f001 feb7 	bl	8017e3c <memp_init>
  pbuf_init();
  netif_init();
 80160ce:	f001 ff0a 	bl	8017ee6 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80160d2:	f002 fc5f 	bl	8018994 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80160d6:	f006 f8c1 	bl	801c25c <sys_timeouts_init>
 80160da:	bd08      	pop	{r3, pc}

080160dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80160dc:	b510      	push	{r4, lr}
 80160de:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80160e0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80160e4:	00d3      	lsls	r3, r2, #3
 80160e6:	4a09      	ldr	r2, [pc, #36]	; (801610c <etharp_free_entry+0x30>)
 80160e8:	58d0      	ldr	r0, [r2, r3]
 80160ea:	b138      	cbz	r0, 80160fc <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80160ec:	f002 f8a0 	bl	8018230 <pbuf_free>
    arp_table[i].q = NULL;
 80160f0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80160f4:	00d3      	lsls	r3, r2, #3
 80160f6:	2100      	movs	r1, #0
 80160f8:	4a04      	ldr	r2, [pc, #16]	; (801610c <etharp_free_entry+0x30>)
 80160fa:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80160fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016100:	00e2      	lsls	r2, r4, #3
 8016102:	4b02      	ldr	r3, [pc, #8]	; (801610c <etharp_free_entry+0x30>)
 8016104:	4413      	add	r3, r2
 8016106:	2200      	movs	r2, #0
 8016108:	751a      	strb	r2, [r3, #20]
 801610a:	bd10      	pop	{r4, pc}
 801610c:	20009384 	.word	0x20009384

08016110 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8016110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016114:	f04f 0e00 	mov.w	lr, #0
 8016118:	46f3      	mov	fp, lr
 801611a:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 801611c:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016120:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 8016122:	4667      	mov	r7, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016124:	46e0      	mov	r8, ip
 8016126:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016128:	e003      	b.n	8016132 <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801612a:	b96c      	cbnz	r4, 8016148 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801612c:	b25f      	sxtb	r7, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801612e:	3301      	adds	r3, #1
 8016130:	b2db      	uxtb	r3, r3
 8016132:	2b09      	cmp	r3, #9
 8016134:	d845      	bhi.n	80161c2 <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 8016136:	461a      	mov	r2, r3
 8016138:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801613c:	00e5      	lsls	r5, r4, #3
 801613e:	4c59      	ldr	r4, [pc, #356]	; (80162a4 <etharp_find_entry+0x194>)
 8016140:	442c      	add	r4, r5
 8016142:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016144:	2f0a      	cmp	r7, #10
 8016146:	d0f0      	beq.n	801612a <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016148:	2c00      	cmp	r4, #0
 801614a:	d0f0      	beq.n	801612e <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801614c:	b140      	cbz	r0, 8016160 <etharp_find_entry+0x50>
 801614e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8016152:	00ee      	lsls	r6, r5, #3
 8016154:	4d53      	ldr	r5, [pc, #332]	; (80162a4 <etharp_find_entry+0x194>)
 8016156:	4435      	add	r5, r6
 8016158:	686d      	ldr	r5, [r5, #4]
 801615a:	6806      	ldr	r6, [r0, #0]
 801615c:	42ae      	cmp	r6, r5
 801615e:	d00f      	beq.n	8016180 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016160:	2c01      	cmp	r4, #1
 8016162:	d010      	beq.n	8016186 <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016164:	2c01      	cmp	r4, #1
 8016166:	d9e2      	bls.n	801612e <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016168:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801616c:	00d4      	lsls	r4, r2, #3
 801616e:	4a4d      	ldr	r2, [pc, #308]	; (80162a4 <etharp_find_entry+0x194>)
 8016170:	4422      	add	r2, r4
 8016172:	8a52      	ldrh	r2, [r2, #18]
 8016174:	4596      	cmp	lr, r2
 8016176:	d8da      	bhi.n	801612e <etharp_find_entry+0x1e>
            old_stable = i;
 8016178:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 801617c:	4696      	mov	lr, r2
 801617e:	e7d6      	b.n	801612e <etharp_find_entry+0x1e>
        return i;
 8016180:	b258      	sxtb	r0, r3
 8016182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 8016186:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801618a:	00ec      	lsls	r4, r5, #3
 801618c:	4d45      	ldr	r5, [pc, #276]	; (80162a4 <etharp_find_entry+0x194>)
 801618e:	592c      	ldr	r4, [r5, r4]
 8016190:	b15c      	cbz	r4, 80161aa <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 8016192:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016196:	00d4      	lsls	r4, r2, #3
 8016198:	462a      	mov	r2, r5
 801619a:	4422      	add	r2, r4
 801619c:	8a52      	ldrh	r2, [r2, #18]
 801619e:	4591      	cmp	r9, r2
 80161a0:	d8c5      	bhi.n	801612e <etharp_find_entry+0x1e>
            old_queue = i;
 80161a2:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 80161a6:	4691      	mov	r9, r2
 80161a8:	e7c1      	b.n	801612e <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 80161aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80161ae:	00d4      	lsls	r4, r2, #3
 80161b0:	4a3c      	ldr	r2, [pc, #240]	; (80162a4 <etharp_find_entry+0x194>)
 80161b2:	4422      	add	r2, r4
 80161b4:	8a52      	ldrh	r2, [r2, #18]
 80161b6:	4593      	cmp	fp, r2
 80161b8:	d8b9      	bhi.n	801612e <etharp_find_entry+0x1e>
            old_pending = i;
 80161ba:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 80161be:	4693      	mov	fp, r2
 80161c0:	e7b5      	b.n	801612e <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80161c2:	f011 0f02 	tst.w	r1, #2
 80161c6:	d165      	bne.n	8016294 <etharp_find_entry+0x184>
 80161c8:	2f0a      	cmp	r7, #10
 80161ca:	d020      	beq.n	801620e <etharp_find_entry+0xfe>
 80161cc:	4605      	mov	r5, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80161ce:	2f09      	cmp	r7, #9
 80161d0:	dc24      	bgt.n	801621c <etharp_find_entry+0x10c>
    i = empty;
 80161d2:	b2ff      	uxtb	r7, r7
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80161d4:	2f09      	cmp	r7, #9
 80161d6:	d84d      	bhi.n	8016274 <etharp_find_entry+0x164>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80161d8:	463c      	mov	r4, r7
 80161da:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80161de:	00da      	lsls	r2, r3, #3
 80161e0:	4b30      	ldr	r3, [pc, #192]	; (80162a4 <etharp_find_entry+0x194>)
 80161e2:	4413      	add	r3, r2
 80161e4:	7d1b      	ldrb	r3, [r3, #20]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d14c      	bne.n	8016284 <etharp_find_entry+0x174>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80161ea:	b135      	cbz	r5, 80161fa <etharp_find_entry+0xea>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80161ec:	6829      	ldr	r1, [r5, #0]
 80161ee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80161f2:	00da      	lsls	r2, r3, #3
 80161f4:	4b2b      	ldr	r3, [pc, #172]	; (80162a4 <etharp_find_entry+0x194>)
 80161f6:	4413      	add	r3, r2
 80161f8:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80161fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80161fe:	00e2      	lsls	r2, r4, #3
 8016200:	4b28      	ldr	r3, [pc, #160]	; (80162a4 <etharp_find_entry+0x194>)
 8016202:	4413      	add	r3, r2
 8016204:	2200      	movs	r2, #0
 8016206:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8016208:	b278      	sxtb	r0, r7
 801620a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801620e:	f011 0f01 	tst.w	r1, #1
 8016212:	d1db      	bne.n	80161cc <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 8016214:	f04f 30ff 	mov.w	r0, #4294967295
 8016218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 801621c:	f1b8 0f09 	cmp.w	r8, #9
 8016220:	dc14      	bgt.n	801624c <etharp_find_entry+0x13c>
      i = old_stable;
 8016222:	fa5f f788 	uxtb.w	r7, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016226:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 801622a:	00d3      	lsls	r3, r2, #3
 801622c:	4a1d      	ldr	r2, [pc, #116]	; (80162a4 <etharp_find_entry+0x194>)
 801622e:	58d3      	ldr	r3, [r2, r3]
 8016230:	b133      	cbz	r3, 8016240 <etharp_find_entry+0x130>
 8016232:	4b1d      	ldr	r3, [pc, #116]	; (80162a8 <etharp_find_entry+0x198>)
 8016234:	f240 126f 	movw	r2, #367	; 0x16f
 8016238:	491c      	ldr	r1, [pc, #112]	; (80162ac <etharp_find_entry+0x19c>)
 801623a:	481d      	ldr	r0, [pc, #116]	; (80162b0 <etharp_find_entry+0x1a0>)
 801623c:	f009 f879 	bl	801f332 <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016240:	2f09      	cmp	r7, #9
 8016242:	d80f      	bhi.n	8016264 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 8016244:	4638      	mov	r0, r7
 8016246:	f7ff ff49 	bl	80160dc <etharp_free_entry>
 801624a:	e7c3      	b.n	80161d4 <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801624c:	f1ba 0f09 	cmp.w	sl, #9
 8016250:	dc02      	bgt.n	8016258 <etharp_find_entry+0x148>
      i = old_pending;
 8016252:	fa5f f78a 	uxtb.w	r7, sl
 8016256:	e7f3      	b.n	8016240 <etharp_find_entry+0x130>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016258:	f1bc 0f09 	cmp.w	ip, #9
 801625c:	dc1e      	bgt.n	801629c <etharp_find_entry+0x18c>
      i = old_queue;
 801625e:	fa5f f78c 	uxtb.w	r7, ip
 8016262:	e7ed      	b.n	8016240 <etharp_find_entry+0x130>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016264:	4b10      	ldr	r3, [pc, #64]	; (80162a8 <etharp_find_entry+0x198>)
 8016266:	f240 1281 	movw	r2, #385	; 0x181
 801626a:	4912      	ldr	r1, [pc, #72]	; (80162b4 <etharp_find_entry+0x1a4>)
 801626c:	4810      	ldr	r0, [pc, #64]	; (80162b0 <etharp_find_entry+0x1a0>)
 801626e:	f009 f860 	bl	801f332 <iprintf>
 8016272:	e7e7      	b.n	8016244 <etharp_find_entry+0x134>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016274:	4b0c      	ldr	r3, [pc, #48]	; (80162a8 <etharp_find_entry+0x198>)
 8016276:	f240 1285 	movw	r2, #389	; 0x185
 801627a:	490e      	ldr	r1, [pc, #56]	; (80162b4 <etharp_find_entry+0x1a4>)
 801627c:	480c      	ldr	r0, [pc, #48]	; (80162b0 <etharp_find_entry+0x1a0>)
 801627e:	f009 f858 	bl	801f332 <iprintf>
 8016282:	e7a9      	b.n	80161d8 <etharp_find_entry+0xc8>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016284:	4b08      	ldr	r3, [pc, #32]	; (80162a8 <etharp_find_entry+0x198>)
 8016286:	f240 1287 	movw	r2, #391	; 0x187
 801628a:	490b      	ldr	r1, [pc, #44]	; (80162b8 <etharp_find_entry+0x1a8>)
 801628c:	4808      	ldr	r0, [pc, #32]	; (80162b0 <etharp_find_entry+0x1a0>)
 801628e:	f009 f850 	bl	801f332 <iprintf>
 8016292:	e7aa      	b.n	80161ea <etharp_find_entry+0xda>
    return (s8_t)ERR_MEM;
 8016294:	f04f 30ff 	mov.w	r0, #4294967295
 8016298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 801629c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80162a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a4:	20009384 	.word	0x20009384
 80162a8:	08023ebc 	.word	0x08023ebc
 80162ac:	08023ef4 	.word	0x08023ef4
 80162b0:	08020b90 	.word	0x08020b90
 80162b4:	08023f0c 	.word	0x08023f0c
 80162b8:	08023f20 	.word	0x08023f20

080162bc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80162bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162be:	b083      	sub	sp, #12
 80162c0:	4604      	mov	r4, r0
 80162c2:	460d      	mov	r5, r1
 80162c4:	4616      	mov	r6, r2
 80162c6:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80162c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80162cc:	2b06      	cmp	r3, #6
 80162ce:	d006      	beq.n	80162de <etharp_update_arp_entry+0x22>
 80162d0:	4b28      	ldr	r3, [pc, #160]	; (8016374 <etharp_update_arp_entry+0xb8>)
 80162d2:	f240 12ab 	movw	r2, #427	; 0x1ab
 80162d6:	4928      	ldr	r1, [pc, #160]	; (8016378 <etharp_update_arp_entry+0xbc>)
 80162d8:	4828      	ldr	r0, [pc, #160]	; (801637c <etharp_update_arp_entry+0xc0>)
 80162da:	f009 f82a 	bl	801f332 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80162de:	2d00      	cmp	r5, #0
 80162e0:	d039      	beq.n	8016356 <etharp_update_arp_entry+0x9a>
 80162e2:	6828      	ldr	r0, [r5, #0]
 80162e4:	2800      	cmp	r0, #0
 80162e6:	d039      	beq.n	801635c <etharp_update_arp_entry+0xa0>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80162e8:	4621      	mov	r1, r4
 80162ea:	f000 fe34 	bl	8016f56 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80162ee:	2800      	cmp	r0, #0
 80162f0:	d137      	bne.n	8016362 <etharp_update_arp_entry+0xa6>
      ip4_addr_ismulticast(ipaddr)) {
 80162f2:	682b      	ldr	r3, [r5, #0]
 80162f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80162f8:	2be0      	cmp	r3, #224	; 0xe0
 80162fa:	d035      	beq.n	8016368 <etharp_update_arp_entry+0xac>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80162fc:	4622      	mov	r2, r4
 80162fe:	4639      	mov	r1, r7
 8016300:	4628      	mov	r0, r5
 8016302:	f7ff ff05 	bl	8016110 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 8016306:	2800      	cmp	r0, #0
 8016308:	db23      	blt.n	8016352 <etharp_update_arp_entry+0x96>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801630a:	4d1d      	ldr	r5, [pc, #116]	; (8016380 <etharp_update_arp_entry+0xc4>)
 801630c:	0042      	lsls	r2, r0, #1
 801630e:	1813      	adds	r3, r2, r0
 8016310:	00d9      	lsls	r1, r3, #3
 8016312:	186f      	adds	r7, r5, r1
 8016314:	2302      	movs	r3, #2
 8016316:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016318:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801631a:	460b      	mov	r3, r1
 801631c:	3308      	adds	r3, #8
 801631e:	442b      	add	r3, r5
 8016320:	6832      	ldr	r2, [r6, #0]
 8016322:	605a      	str	r2, [r3, #4]
 8016324:	88b2      	ldrh	r2, [r6, #4]
 8016326:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016328:	2300      	movs	r3, #0
 801632a:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801632c:	586d      	ldr	r5, [r5, r1]
 801632e:	b1f5      	cbz	r5, 801636e <etharp_update_arp_entry+0xb2>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 8016330:	2700      	movs	r7, #0
 8016332:	4a13      	ldr	r2, [pc, #76]	; (8016380 <etharp_update_arp_entry+0xc4>)
 8016334:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801633a:	9300      	str	r3, [sp, #0]
 801633c:	4633      	mov	r3, r6
 801633e:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8016342:	4629      	mov	r1, r5
 8016344:	4620      	mov	r0, r4
 8016346:	f006 f823 	bl	801c390 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801634a:	4628      	mov	r0, r5
 801634c:	f001 ff70 	bl	8018230 <pbuf_free>
  }
  return ERR_OK;
 8016350:	4638      	mov	r0, r7
}
 8016352:	b003      	add	sp, #12
 8016354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 8016356:	f06f 000f 	mvn.w	r0, #15
 801635a:	e7fa      	b.n	8016352 <etharp_update_arp_entry+0x96>
 801635c:	f06f 000f 	mvn.w	r0, #15
 8016360:	e7f7      	b.n	8016352 <etharp_update_arp_entry+0x96>
 8016362:	f06f 000f 	mvn.w	r0, #15
 8016366:	e7f4      	b.n	8016352 <etharp_update_arp_entry+0x96>
 8016368:	f06f 000f 	mvn.w	r0, #15
 801636c:	e7f1      	b.n	8016352 <etharp_update_arp_entry+0x96>
  return ERR_OK;
 801636e:	2000      	movs	r0, #0
 8016370:	e7ef      	b.n	8016352 <etharp_update_arp_entry+0x96>
 8016372:	bf00      	nop
 8016374:	08023ebc 	.word	0x08023ebc
 8016378:	08024074 	.word	0x08024074
 801637c:	08020b90 	.word	0x08020b90
 8016380:	20009384 	.word	0x20009384

08016384 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016388:	b082      	sub	sp, #8
 801638a:	4689      	mov	r9, r1
 801638c:	4692      	mov	sl, r2
 801638e:	4698      	mov	r8, r3
 8016390:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016392:	4607      	mov	r7, r0
 8016394:	2800      	cmp	r0, #0
 8016396:	d048      	beq.n	801642a <etharp_raw+0xa6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016398:	2200      	movs	r2, #0
 801639a:	211c      	movs	r1, #28
 801639c:	2002      	movs	r0, #2
 801639e:	f001 ffb3 	bl	8018308 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80163a2:	4606      	mov	r6, r0
 80163a4:	2800      	cmp	r0, #0
 80163a6:	d050      	beq.n	801644a <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80163a8:	8943      	ldrh	r3, [r0, #10]
 80163aa:	2b1b      	cmp	r3, #27
 80163ac:	d945      	bls.n	801643a <etharp_raw+0xb6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80163ae:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80163b0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80163b4:	f7ff fe75 	bl	80160a2 <lwip_htons>
 80163b8:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80163ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80163be:	2b06      	cmp	r3, #6
 80163c0:	d006      	beq.n	80163d0 <etharp_raw+0x4c>
 80163c2:	4b23      	ldr	r3, [pc, #140]	; (8016450 <etharp_raw+0xcc>)
 80163c4:	f240 426b 	movw	r2, #1131	; 0x46b
 80163c8:	4922      	ldr	r1, [pc, #136]	; (8016454 <etharp_raw+0xd0>)
 80163ca:	4823      	ldr	r0, [pc, #140]	; (8016458 <etharp_raw+0xd4>)
 80163cc:	f008 ffb1 	bl	801f332 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80163d0:	f8d8 3000 	ldr.w	r3, [r8]
 80163d4:	60a3      	str	r3, [r4, #8]
 80163d6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80163da:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80163dc:	682b      	ldr	r3, [r5, #0]
 80163de:	f8c4 3012 	str.w	r3, [r4, #18]
 80163e2:	88ab      	ldrh	r3, [r5, #4]
 80163e4:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80163e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80163ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80163f4:	2500      	movs	r5, #0
 80163f6:	7025      	strb	r5, [r4, #0]
 80163f8:	2301      	movs	r3, #1
 80163fa:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80163fc:	2308      	movs	r3, #8
 80163fe:	70a3      	strb	r3, [r4, #2]
 8016400:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016402:	2306      	movs	r3, #6
 8016404:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016406:	2304      	movs	r3, #4
 8016408:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801640a:	f640 0306 	movw	r3, #2054	; 0x806
 801640e:	9300      	str	r3, [sp, #0]
 8016410:	4653      	mov	r3, sl
 8016412:	464a      	mov	r2, r9
 8016414:	4631      	mov	r1, r6
 8016416:	4638      	mov	r0, r7
 8016418:	f005 ffba 	bl	801c390 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801641c:	4630      	mov	r0, r6
 801641e:	f001 ff07 	bl	8018230 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8016422:	4628      	mov	r0, r5
}
 8016424:	b002      	add	sp, #8
 8016426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801642a:	4b09      	ldr	r3, [pc, #36]	; (8016450 <etharp_raw+0xcc>)
 801642c:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8016430:	490a      	ldr	r1, [pc, #40]	; (801645c <etharp_raw+0xd8>)
 8016432:	4809      	ldr	r0, [pc, #36]	; (8016458 <etharp_raw+0xd4>)
 8016434:	f008 ff7d 	bl	801f332 <iprintf>
 8016438:	e7ae      	b.n	8016398 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801643a:	4b05      	ldr	r3, [pc, #20]	; (8016450 <etharp_raw+0xcc>)
 801643c:	f240 4264 	movw	r2, #1124	; 0x464
 8016440:	4907      	ldr	r1, [pc, #28]	; (8016460 <etharp_raw+0xdc>)
 8016442:	4805      	ldr	r0, [pc, #20]	; (8016458 <etharp_raw+0xd4>)
 8016444:	f008 ff75 	bl	801f332 <iprintf>
 8016448:	e7b1      	b.n	80163ae <etharp_raw+0x2a>
    return ERR_MEM;
 801644a:	f04f 30ff 	mov.w	r0, #4294967295
 801644e:	e7e9      	b.n	8016424 <etharp_raw+0xa0>
 8016450:	08023ebc 	.word	0x08023ebc
 8016454:	08024030 	.word	0x08024030
 8016458:	08020b90 	.word	0x08020b90
 801645c:	08023fec 	.word	0x08023fec
 8016460:	08023ffc 	.word	0x08023ffc

08016464 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8016464:	b530      	push	{r4, r5, lr}
 8016466:	b085      	sub	sp, #20
 8016468:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801646a:	f100 0425 	add.w	r4, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801646e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016470:	2501      	movs	r5, #1
 8016472:	9503      	str	r5, [sp, #12]
 8016474:	9102      	str	r1, [sp, #8]
 8016476:	4904      	ldr	r1, [pc, #16]	; (8016488 <etharp_request_dst+0x24>)
 8016478:	9101      	str	r1, [sp, #4]
 801647a:	9300      	str	r3, [sp, #0]
 801647c:	4623      	mov	r3, r4
 801647e:	4621      	mov	r1, r4
 8016480:	f7ff ff80 	bl	8016384 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 8016484:	b005      	add	sp, #20
 8016486:	bd30      	pop	{r4, r5, pc}
 8016488:	08025778 	.word	0x08025778

0801648c <etharp_cleanup_netif>:
{
 801648c:	b538      	push	{r3, r4, r5, lr}
 801648e:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016490:	2400      	movs	r4, #0
 8016492:	e001      	b.n	8016498 <etharp_cleanup_netif+0xc>
 8016494:	3401      	adds	r4, #1
 8016496:	b2e4      	uxtb	r4, r4
 8016498:	2c09      	cmp	r4, #9
 801649a:	d810      	bhi.n	80164be <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 801649c:	4620      	mov	r0, r4
 801649e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80164a2:	00da      	lsls	r2, r3, #3
 80164a4:	4b06      	ldr	r3, [pc, #24]	; (80164c0 <etharp_cleanup_netif+0x34>)
 80164a6:	4413      	add	r3, r2
 80164a8:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d0f2      	beq.n	8016494 <etharp_cleanup_netif+0x8>
 80164ae:	4b04      	ldr	r3, [pc, #16]	; (80164c0 <etharp_cleanup_netif+0x34>)
 80164b0:	4413      	add	r3, r2
 80164b2:	689b      	ldr	r3, [r3, #8]
 80164b4:	42ab      	cmp	r3, r5
 80164b6:	d1ed      	bne.n	8016494 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 80164b8:	f7ff fe10 	bl	80160dc <etharp_free_entry>
 80164bc:	e7ea      	b.n	8016494 <etharp_cleanup_netif+0x8>
}
 80164be:	bd38      	pop	{r3, r4, r5, pc}
 80164c0:	20009384 	.word	0x20009384

080164c4 <etharp_input>:
{
 80164c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164c8:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80164ca:	b161      	cbz	r1, 80164e6 <etharp_input+0x22>
 80164cc:	4604      	mov	r4, r0
 80164ce:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 80164d0:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80164d2:	882b      	ldrh	r3, [r5, #0]
 80164d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164d8:	d00d      	beq.n	80164f6 <etharp_input+0x32>
    pbuf_free(p);
 80164da:	4620      	mov	r0, r4
 80164dc:	f001 fea8 	bl	8018230 <pbuf_free>
}
 80164e0:	b006      	add	sp, #24
 80164e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80164e6:	4b20      	ldr	r3, [pc, #128]	; (8016568 <etharp_input+0xa4>)
 80164e8:	f44f 7222 	mov.w	r2, #648	; 0x288
 80164ec:	491f      	ldr	r1, [pc, #124]	; (801656c <etharp_input+0xa8>)
 80164ee:	4820      	ldr	r0, [pc, #128]	; (8016570 <etharp_input+0xac>)
 80164f0:	f008 ff1f 	bl	801f332 <iprintf>
 80164f4:	e7f4      	b.n	80164e0 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80164f6:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80164f8:	2b06      	cmp	r3, #6
 80164fa:	d1ee      	bne.n	80164da <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80164fc:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80164fe:	2b04      	cmp	r3, #4
 8016500:	d1eb      	bne.n	80164da <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016502:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016504:	2b08      	cmp	r3, #8
 8016506:	d1e8      	bne.n	80164da <etharp_input+0x16>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8016508:	f8d5 300e 	ldr.w	r3, [r5, #14]
 801650c:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801650e:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016510:	684b      	ldr	r3, [r1, #4]
 8016512:	b1ab      	cbz	r3, 8016540 <etharp_input+0x7c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016514:	429f      	cmp	r7, r3
 8016516:	bf14      	ite	ne
 8016518:	2700      	movne	r7, #0
 801651a:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801651c:	f105 0808 	add.w	r8, r5, #8
 8016520:	b187      	cbz	r7, 8016544 <etharp_input+0x80>
 8016522:	2301      	movs	r3, #1
 8016524:	4642      	mov	r2, r8
 8016526:	a905      	add	r1, sp, #20
 8016528:	4630      	mov	r0, r6
 801652a:	f7ff fec7 	bl	80162bc <etharp_update_arp_entry>
  switch (hdr->opcode) {
 801652e:	88eb      	ldrh	r3, [r5, #6]
 8016530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016534:	d100      	bne.n	8016538 <etharp_input+0x74>
    if (for_us) {
 8016536:	b93f      	cbnz	r7, 8016548 <etharp_input+0x84>
  pbuf_free(p);
 8016538:	4620      	mov	r0, r4
 801653a:	f001 fe79 	bl	8018230 <pbuf_free>
 801653e:	e7cf      	b.n	80164e0 <etharp_input+0x1c>
    for_us = 0;
 8016540:	2700      	movs	r7, #0
 8016542:	e7eb      	b.n	801651c <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016544:	2302      	movs	r3, #2
 8016546:	e7ed      	b.n	8016524 <etharp_input+0x60>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016548:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801654c:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 801654e:	2202      	movs	r2, #2
 8016550:	9203      	str	r2, [sp, #12]
 8016552:	aa05      	add	r2, sp, #20
 8016554:	9202      	str	r2, [sp, #8]
 8016556:	f8cd 8004 	str.w	r8, [sp, #4]
 801655a:	9300      	str	r3, [sp, #0]
 801655c:	460b      	mov	r3, r1
 801655e:	4642      	mov	r2, r8
 8016560:	4630      	mov	r0, r6
 8016562:	f7ff ff0f 	bl	8016384 <etharp_raw>
 8016566:	e7e7      	b.n	8016538 <etharp_input+0x74>
 8016568:	08023ebc 	.word	0x08023ebc
 801656c:	08023fec 	.word	0x08023fec
 8016570:	08020b90 	.word	0x08020b90

08016574 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016574:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016576:	4a02      	ldr	r2, [pc, #8]	; (8016580 <etharp_request+0xc>)
 8016578:	f7ff ff74 	bl	8016464 <etharp_request_dst>
}
 801657c:	bd08      	pop	{r3, pc}
 801657e:	bf00      	nop
 8016580:	08025704 	.word	0x08025704

08016584 <etharp_tmr>:
{
 8016584:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016586:	2400      	movs	r4, #0
 8016588:	e005      	b.n	8016596 <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801658a:	2b04      	cmp	r3, #4
 801658c:	d91d      	bls.n	80165ca <etharp_tmr+0x46>
        etharp_free_entry(i);
 801658e:	f7ff fda5 	bl	80160dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016592:	3401      	adds	r4, #1
 8016594:	b2e4      	uxtb	r4, r4
 8016596:	2c09      	cmp	r4, #9
 8016598:	d838      	bhi.n	801660c <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 801659a:	4620      	mov	r0, r4
 801659c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80165a0:	00da      	lsls	r2, r3, #3
 80165a2:	4b1b      	ldr	r3, [pc, #108]	; (8016610 <etharp_tmr+0x8c>)
 80165a4:	4413      	add	r3, r2
 80165a6:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d0f2      	beq.n	8016592 <etharp_tmr+0xe>
      arp_table[i].ctime++;
 80165ac:	4611      	mov	r1, r2
 80165ae:	4a18      	ldr	r2, [pc, #96]	; (8016610 <etharp_tmr+0x8c>)
 80165b0:	440a      	add	r2, r1
 80165b2:	8a53      	ldrh	r3, [r2, #18]
 80165b4:	3301      	adds	r3, #1
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80165ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80165be:	d2e6      	bcs.n	801658e <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80165c0:	4a13      	ldr	r2, [pc, #76]	; (8016610 <etharp_tmr+0x8c>)
 80165c2:	440a      	add	r2, r1
 80165c4:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80165c6:	2a01      	cmp	r2, #1
 80165c8:	d0df      	beq.n	801658a <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80165ca:	2a03      	cmp	r2, #3
 80165cc:	d00e      	beq.n	80165ec <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80165ce:	2a04      	cmp	r2, #4
 80165d0:	d014      	beq.n	80165fc <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80165d2:	2a01      	cmp	r2, #1
 80165d4:	d1dd      	bne.n	8016592 <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80165d6:	4a0e      	ldr	r2, [pc, #56]	; (8016610 <etharp_tmr+0x8c>)
 80165d8:	0043      	lsls	r3, r0, #1
 80165da:	181d      	adds	r5, r3, r0
 80165dc:	00e9      	lsls	r1, r5, #3
 80165de:	4411      	add	r1, r2
 80165e0:	460a      	mov	r2, r1
 80165e2:	3104      	adds	r1, #4
 80165e4:	6890      	ldr	r0, [r2, #8]
 80165e6:	f7ff ffc5 	bl	8016574 <etharp_request>
 80165ea:	e7d2      	b.n	8016592 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80165ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80165f0:	00c2      	lsls	r2, r0, #3
 80165f2:	4b07      	ldr	r3, [pc, #28]	; (8016610 <etharp_tmr+0x8c>)
 80165f4:	4413      	add	r3, r2
 80165f6:	2204      	movs	r2, #4
 80165f8:	751a      	strb	r2, [r3, #20]
 80165fa:	e7ca      	b.n	8016592 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80165fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016600:	00c2      	lsls	r2, r0, #3
 8016602:	4b03      	ldr	r3, [pc, #12]	; (8016610 <etharp_tmr+0x8c>)
 8016604:	4413      	add	r3, r2
 8016606:	2202      	movs	r2, #2
 8016608:	751a      	strb	r2, [r3, #20]
 801660a:	e7c2      	b.n	8016592 <etharp_tmr+0xe>
}
 801660c:	bd38      	pop	{r3, r4, r5, pc}
 801660e:	bf00      	nop
 8016610:	20009384 	.word	0x20009384

08016614 <etharp_output_to_arp_index>:
{
 8016614:	b570      	push	{r4, r5, r6, lr}
 8016616:	b082      	sub	sp, #8
 8016618:	4605      	mov	r5, r0
 801661a:	460e      	mov	r6, r1
 801661c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801661e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016622:	00da      	lsls	r2, r3, #3
 8016624:	4b2c      	ldr	r3, [pc, #176]	; (80166d8 <etharp_output_to_arp_index+0xc4>)
 8016626:	4413      	add	r3, r2
 8016628:	7d1b      	ldrb	r3, [r3, #20]
 801662a:	2b01      	cmp	r3, #1
 801662c:	d919      	bls.n	8016662 <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801662e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8016632:	00da      	lsls	r2, r3, #3
 8016634:	4b28      	ldr	r3, [pc, #160]	; (80166d8 <etharp_output_to_arp_index+0xc4>)
 8016636:	4413      	add	r3, r2
 8016638:	7d1b      	ldrb	r3, [r3, #20]
 801663a:	2b02      	cmp	r3, #2
 801663c:	d019      	beq.n	8016672 <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801663e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016642:	00e3      	lsls	r3, r4, #3
 8016644:	3308      	adds	r3, #8
 8016646:	4a24      	ldr	r2, [pc, #144]	; (80166d8 <etharp_output_to_arp_index+0xc4>)
 8016648:	4413      	add	r3, r2
 801664a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801664e:	9200      	str	r2, [sp, #0]
 8016650:	3304      	adds	r3, #4
 8016652:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8016656:	4631      	mov	r1, r6
 8016658:	4628      	mov	r0, r5
 801665a:	f005 fe99 	bl	801c390 <ethernet_output>
}
 801665e:	b002      	add	sp, #8
 8016660:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016662:	4b1e      	ldr	r3, [pc, #120]	; (80166dc <etharp_output_to_arp_index+0xc8>)
 8016664:	f240 22ed 	movw	r2, #749	; 0x2ed
 8016668:	491d      	ldr	r1, [pc, #116]	; (80166e0 <etharp_output_to_arp_index+0xcc>)
 801666a:	481e      	ldr	r0, [pc, #120]	; (80166e4 <etharp_output_to_arp_index+0xd0>)
 801666c:	f008 fe61 	bl	801f332 <iprintf>
 8016670:	e7dd      	b.n	801662e <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016672:	4b19      	ldr	r3, [pc, #100]	; (80166d8 <etharp_output_to_arp_index+0xc4>)
 8016674:	4413      	add	r3, r2
 8016676:	8a5b      	ldrh	r3, [r3, #18]
 8016678:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801667c:	d819      	bhi.n	80166b2 <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801667e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016682:	d3dc      	bcc.n	801663e <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016684:	4a14      	ldr	r2, [pc, #80]	; (80166d8 <etharp_output_to_arp_index+0xc4>)
 8016686:	0063      	lsls	r3, r4, #1
 8016688:	1918      	adds	r0, r3, r4
 801668a:	00c1      	lsls	r1, r0, #3
 801668c:	4608      	mov	r0, r1
 801668e:	4411      	add	r1, r2
 8016690:	3008      	adds	r0, #8
 8016692:	4402      	add	r2, r0
 8016694:	3204      	adds	r2, #4
 8016696:	3104      	adds	r1, #4
 8016698:	4628      	mov	r0, r5
 801669a:	f7ff fee3 	bl	8016464 <etharp_request_dst>
 801669e:	2800      	cmp	r0, #0
 80166a0:	d1cd      	bne.n	801663e <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80166a2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80166a6:	00da      	lsls	r2, r3, #3
 80166a8:	4b0b      	ldr	r3, [pc, #44]	; (80166d8 <etharp_output_to_arp_index+0xc4>)
 80166aa:	4413      	add	r3, r2
 80166ac:	2203      	movs	r2, #3
 80166ae:	751a      	strb	r2, [r3, #20]
 80166b0:	e7c5      	b.n	801663e <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80166b2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80166b6:	00d3      	lsls	r3, r2, #3
 80166b8:	4907      	ldr	r1, [pc, #28]	; (80166d8 <etharp_output_to_arp_index+0xc4>)
 80166ba:	4419      	add	r1, r3
 80166bc:	3104      	adds	r1, #4
 80166be:	4628      	mov	r0, r5
 80166c0:	f7ff ff58 	bl	8016574 <etharp_request>
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d1ba      	bne.n	801663e <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80166c8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80166cc:	00da      	lsls	r2, r3, #3
 80166ce:	4b02      	ldr	r3, [pc, #8]	; (80166d8 <etharp_output_to_arp_index+0xc4>)
 80166d0:	4413      	add	r3, r2
 80166d2:	2203      	movs	r2, #3
 80166d4:	751a      	strb	r2, [r3, #20]
 80166d6:	e7b2      	b.n	801663e <etharp_output_to_arp_index+0x2a>
 80166d8:	20009384 	.word	0x20009384
 80166dc:	08023ebc 	.word	0x08023ebc
 80166e0:	08023f6c 	.word	0x08023f6c
 80166e4:	08020b90 	.word	0x08020b90

080166e8 <etharp_query>:
{
 80166e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166ec:	b083      	sub	sp, #12
 80166ee:	4606      	mov	r6, r0
 80166f0:	460c      	mov	r4, r1
 80166f2:	4617      	mov	r7, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80166f4:	f100 0825 	add.w	r8, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80166f8:	4601      	mov	r1, r0
 80166fa:	6820      	ldr	r0, [r4, #0]
 80166fc:	f000 fc2b 	bl	8016f56 <ip4_addr_isbroadcast_u32>
 8016700:	2800      	cmp	r0, #0
 8016702:	f040 80aa 	bne.w	801685a <etharp_query+0x172>
      ip4_addr_ismulticast(ipaddr) ||
 8016706:	6823      	ldr	r3, [r4, #0]
 8016708:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801670c:	2ae0      	cmp	r2, #224	; 0xe0
 801670e:	f000 80a7 	beq.w	8016860 <etharp_query+0x178>
      ip4_addr_ismulticast(ipaddr) ||
 8016712:	2c00      	cmp	r4, #0
 8016714:	f000 80a7 	beq.w	8016866 <etharp_query+0x17e>
      ip4_addr_isany(ipaddr)) {
 8016718:	2b00      	cmp	r3, #0
 801671a:	f000 80a7 	beq.w	801686c <etharp_query+0x184>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801671e:	4632      	mov	r2, r6
 8016720:	2101      	movs	r1, #1
 8016722:	4620      	mov	r0, r4
 8016724:	f7ff fcf4 	bl	8016110 <etharp_find_entry>
  if (i < 0) {
 8016728:	1e05      	subs	r5, r0, #0
 801672a:	f2c0 80a2 	blt.w	8016872 <etharp_query+0x18a>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801672e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8016732:	00da      	lsls	r2, r3, #3
 8016734:	4b51      	ldr	r3, [pc, #324]	; (801687c <etharp_query+0x194>)
 8016736:	4413      	add	r3, r2
 8016738:	7d1b      	ldrb	r3, [r3, #20]
 801673a:	bb1b      	cbnz	r3, 8016784 <etharp_query+0x9c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 801673c:	006a      	lsls	r2, r5, #1
 801673e:	442a      	add	r2, r5
 8016740:	00d1      	lsls	r1, r2, #3
 8016742:	4b4e      	ldr	r3, [pc, #312]	; (801687c <etharp_query+0x194>)
 8016744:	440b      	add	r3, r1
 8016746:	f04f 0901 	mov.w	r9, #1
 801674a:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 801674e:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016750:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8016754:	00da      	lsls	r2, r3, #3
 8016756:	4b49      	ldr	r3, [pc, #292]	; (801687c <etharp_query+0x194>)
 8016758:	4413      	add	r3, r2
 801675a:	7d1b      	ldrb	r3, [r3, #20]
 801675c:	b1ab      	cbz	r3, 801678a <etharp_query+0xa2>
  if (is_new_entry || (q == NULL)) {
 801675e:	f1b9 0f00 	cmp.w	r9, #0
 8016762:	d11a      	bne.n	801679a <etharp_query+0xb2>
 8016764:	b1cf      	cbz	r7, 801679a <etharp_query+0xb2>
  err_t result = ERR_MEM;
 8016766:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 801676a:	b1f7      	cbz	r7, 80167aa <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801676c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8016770:	00da      	lsls	r2, r3, #3
 8016772:	4b42      	ldr	r3, [pc, #264]	; (801687c <etharp_query+0x194>)
 8016774:	4413      	add	r3, r2
 8016776:	7d1b      	ldrb	r3, [r3, #20]
 8016778:	2b01      	cmp	r3, #1
 801677a:	d81e      	bhi.n	80167ba <etharp_query+0xd2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801677c:	2b01      	cmp	r3, #1
 801677e:	d12c      	bne.n	80167da <etharp_query+0xf2>
 8016780:	463c      	mov	r4, r7
 8016782:	e032      	b.n	80167ea <etharp_query+0x102>
  int is_new_entry = 0;
 8016784:	f04f 0900 	mov.w	r9, #0
 8016788:	e7e2      	b.n	8016750 <etharp_query+0x68>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801678a:	4b3d      	ldr	r3, [pc, #244]	; (8016880 <etharp_query+0x198>)
 801678c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016790:	493c      	ldr	r1, [pc, #240]	; (8016884 <etharp_query+0x19c>)
 8016792:	483d      	ldr	r0, [pc, #244]	; (8016888 <etharp_query+0x1a0>)
 8016794:	f008 fdcd 	bl	801f332 <iprintf>
 8016798:	e7e1      	b.n	801675e <etharp_query+0x76>
    result = etharp_request(netif, ipaddr);
 801679a:	4621      	mov	r1, r4
 801679c:	4630      	mov	r0, r6
 801679e:	f7ff fee9 	bl	8016574 <etharp_request>
 80167a2:	4604      	mov	r4, r0
    if (q == NULL) {
 80167a4:	2f00      	cmp	r7, #0
 80167a6:	d1e0      	bne.n	801676a <etharp_query+0x82>
 80167a8:	e017      	b.n	80167da <etharp_query+0xf2>
  LWIP_ASSERT("q != NULL", q != NULL);
 80167aa:	4b35      	ldr	r3, [pc, #212]	; (8016880 <etharp_query+0x198>)
 80167ac:	f240 32db 	movw	r2, #987	; 0x3db
 80167b0:	4936      	ldr	r1, [pc, #216]	; (801688c <etharp_query+0x1a4>)
 80167b2:	4835      	ldr	r0, [pc, #212]	; (8016888 <etharp_query+0x1a0>)
 80167b4:	f008 fdbd 	bl	801f332 <iprintf>
 80167b8:	e7d8      	b.n	801676c <etharp_query+0x84>
    ETHARP_SET_HINT(netif, i);
 80167ba:	4b35      	ldr	r3, [pc, #212]	; (8016890 <etharp_query+0x1a8>)
 80167bc:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80167be:	4613      	mov	r3, r2
 80167c0:	3308      	adds	r3, #8
 80167c2:	4a2e      	ldr	r2, [pc, #184]	; (801687c <etharp_query+0x194>)
 80167c4:	4413      	add	r3, r2
 80167c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80167ca:	9200      	str	r2, [sp, #0]
 80167cc:	3304      	adds	r3, #4
 80167ce:	4642      	mov	r2, r8
 80167d0:	4639      	mov	r1, r7
 80167d2:	4630      	mov	r0, r6
 80167d4:	f005 fddc 	bl	801c390 <ethernet_output>
 80167d8:	4604      	mov	r4, r0
}
 80167da:	4620      	mov	r0, r4
 80167dc:	b003      	add	sp, #12
 80167de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (p->type != PBUF_ROM) {
 80167e2:	7b23      	ldrb	r3, [r4, #12]
 80167e4:	2b01      	cmp	r3, #1
 80167e6:	d122      	bne.n	801682e <etharp_query+0x146>
      p = p->next;
 80167e8:	6824      	ldr	r4, [r4, #0]
    while (p) {
 80167ea:	b174      	cbz	r4, 801680a <etharp_query+0x122>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80167ec:	8962      	ldrh	r2, [r4, #10]
 80167ee:	8923      	ldrh	r3, [r4, #8]
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d1f6      	bne.n	80167e2 <etharp_query+0xfa>
 80167f4:	6823      	ldr	r3, [r4, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d0f3      	beq.n	80167e2 <etharp_query+0xfa>
 80167fa:	4b21      	ldr	r3, [pc, #132]	; (8016880 <etharp_query+0x198>)
 80167fc:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8016800:	4924      	ldr	r1, [pc, #144]	; (8016894 <etharp_query+0x1ac>)
 8016802:	4821      	ldr	r0, [pc, #132]	; (8016888 <etharp_query+0x1a0>)
 8016804:	f008 fd95 	bl	801f332 <iprintf>
 8016808:	e7eb      	b.n	80167e2 <etharp_query+0xfa>
    int copy_needed = 0;
 801680a:	2300      	movs	r3, #0
    if (copy_needed) {
 801680c:	b18b      	cbz	r3, 8016832 <etharp_query+0x14a>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801680e:	2200      	movs	r2, #0
 8016810:	8921      	ldrh	r1, [r4, #8]
 8016812:	2002      	movs	r0, #2
 8016814:	f001 fd78 	bl	8018308 <pbuf_alloc>
      if (p != NULL) {
 8016818:	4604      	mov	r4, r0
 801681a:	b170      	cbz	r0, 801683a <etharp_query+0x152>
        if (pbuf_copy(p, q) != ERR_OK) {
 801681c:	4639      	mov	r1, r7
 801681e:	f001 ff2d 	bl	801867c <pbuf_copy>
 8016822:	b150      	cbz	r0, 801683a <etharp_query+0x152>
          pbuf_free(p);
 8016824:	4620      	mov	r0, r4
 8016826:	f001 fd03 	bl	8018230 <pbuf_free>
          p = NULL;
 801682a:	2400      	movs	r4, #0
 801682c:	e005      	b.n	801683a <etharp_query+0x152>
        copy_needed = 1;
 801682e:	2301      	movs	r3, #1
 8016830:	e7ec      	b.n	801680c <etharp_query+0x124>
      pbuf_ref(p);
 8016832:	4638      	mov	r0, r7
 8016834:	f001 fecc 	bl	80185d0 <pbuf_ref>
      p = q;
 8016838:	463c      	mov	r4, r7
    if (p != NULL) {
 801683a:	b1e4      	cbz	r4, 8016876 <etharp_query+0x18e>
      if (arp_table[i].q != NULL) {
 801683c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016840:	00d3      	lsls	r3, r2, #3
 8016842:	4a0e      	ldr	r2, [pc, #56]	; (801687c <etharp_query+0x194>)
 8016844:	58d0      	ldr	r0, [r2, r3]
 8016846:	b108      	cbz	r0, 801684c <etharp_query+0x164>
        pbuf_free(arp_table[i].q);
 8016848:	f001 fcf2 	bl	8018230 <pbuf_free>
      arp_table[i].q = p;
 801684c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016850:	00eb      	lsls	r3, r5, #3
 8016852:	4a0a      	ldr	r2, [pc, #40]	; (801687c <etharp_query+0x194>)
 8016854:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 8016856:	2400      	movs	r4, #0
 8016858:	e7bf      	b.n	80167da <etharp_query+0xf2>
    return ERR_ARG;
 801685a:	f06f 040f 	mvn.w	r4, #15
 801685e:	e7bc      	b.n	80167da <etharp_query+0xf2>
 8016860:	f06f 040f 	mvn.w	r4, #15
 8016864:	e7b9      	b.n	80167da <etharp_query+0xf2>
 8016866:	f06f 040f 	mvn.w	r4, #15
 801686a:	e7b6      	b.n	80167da <etharp_query+0xf2>
 801686c:	f06f 040f 	mvn.w	r4, #15
 8016870:	e7b3      	b.n	80167da <etharp_query+0xf2>
    return (err_t)i;
 8016872:	462c      	mov	r4, r5
 8016874:	e7b1      	b.n	80167da <etharp_query+0xf2>
      result = ERR_MEM;
 8016876:	f04f 34ff 	mov.w	r4, #4294967295
 801687a:	e7ae      	b.n	80167da <etharp_query+0xf2>
 801687c:	20009384 	.word	0x20009384
 8016880:	08023ebc 	.word	0x08023ebc
 8016884:	08023f9c 	.word	0x08023f9c
 8016888:	08020b90 	.word	0x08020b90
 801688c:	08023fc4 	.word	0x08023fc4
 8016890:	20009474 	.word	0x20009474
 8016894:	08023fd0 	.word	0x08023fd0

08016898 <etharp_output>:
{
 8016898:	b570      	push	{r4, r5, r6, lr}
 801689a:	b084      	sub	sp, #16
 801689c:	460e      	mov	r6, r1
 801689e:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80168a0:	4605      	mov	r5, r0
 80168a2:	2800      	cmp	r0, #0
 80168a4:	d02f      	beq.n	8016906 <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 80168a6:	2e00      	cmp	r6, #0
 80168a8:	d035      	beq.n	8016916 <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80168aa:	2c00      	cmp	r4, #0
 80168ac:	d03b      	beq.n	8016926 <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80168ae:	4629      	mov	r1, r5
 80168b0:	6820      	ldr	r0, [r4, #0]
 80168b2:	f000 fb50 	bl	8016f56 <ip4_addr_isbroadcast_u32>
 80168b6:	2800      	cmp	r0, #0
 80168b8:	d17a      	bne.n	80169b0 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80168ba:	6823      	ldr	r3, [r4, #0]
 80168bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80168c0:	2ae0      	cmp	r2, #224	; 0xe0
 80168c2:	d038      	beq.n	8016936 <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80168c4:	686a      	ldr	r2, [r5, #4]
 80168c6:	68a9      	ldr	r1, [r5, #8]
 80168c8:	405a      	eors	r2, r3
 80168ca:	420a      	tst	r2, r1
 80168cc:	d009      	beq.n	80168e2 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 80168ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80168d0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80168d4:	4293      	cmp	r3, r2
 80168d6:	d004      	beq.n	80168e2 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80168d8:	68eb      	ldr	r3, [r5, #12]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d074      	beq.n	80169c8 <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 80168de:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80168e2:	4b3b      	ldr	r3, [pc, #236]	; (80169d0 <etharp_output+0x138>)
 80168e4:	781a      	ldrb	r2, [r3, #0]
 80168e6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80168ea:	00d9      	lsls	r1, r3, #3
 80168ec:	4b39      	ldr	r3, [pc, #228]	; (80169d4 <etharp_output+0x13c>)
 80168ee:	440b      	add	r3, r1
 80168f0:	7d1b      	ldrb	r3, [r3, #20]
 80168f2:	2b01      	cmp	r3, #1
 80168f4:	d954      	bls.n	80169a0 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80168f6:	6820      	ldr	r0, [r4, #0]
 80168f8:	4b36      	ldr	r3, [pc, #216]	; (80169d4 <etharp_output+0x13c>)
 80168fa:	440b      	add	r3, r1
 80168fc:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80168fe:	4298      	cmp	r0, r3
 8016900:	d02f      	beq.n	8016962 <etharp_output+0xca>
 8016902:	2200      	movs	r2, #0
 8016904:	e034      	b.n	8016970 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016906:	4b34      	ldr	r3, [pc, #208]	; (80169d8 <etharp_output+0x140>)
 8016908:	f240 321b 	movw	r2, #795	; 0x31b
 801690c:	4933      	ldr	r1, [pc, #204]	; (80169dc <etharp_output+0x144>)
 801690e:	4834      	ldr	r0, [pc, #208]	; (80169e0 <etharp_output+0x148>)
 8016910:	f008 fd0f 	bl	801f332 <iprintf>
 8016914:	e7c7      	b.n	80168a6 <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016916:	4b30      	ldr	r3, [pc, #192]	; (80169d8 <etharp_output+0x140>)
 8016918:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801691c:	4931      	ldr	r1, [pc, #196]	; (80169e4 <etharp_output+0x14c>)
 801691e:	4830      	ldr	r0, [pc, #192]	; (80169e0 <etharp_output+0x148>)
 8016920:	f008 fd07 	bl	801f332 <iprintf>
 8016924:	e7c1      	b.n	80168aa <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016926:	4b2c      	ldr	r3, [pc, #176]	; (80169d8 <etharp_output+0x140>)
 8016928:	f240 321d 	movw	r2, #797	; 0x31d
 801692c:	492e      	ldr	r1, [pc, #184]	; (80169e8 <etharp_output+0x150>)
 801692e:	482c      	ldr	r0, [pc, #176]	; (80169e0 <etharp_output+0x148>)
 8016930:	f008 fcff 	bl	801f332 <iprintf>
 8016934:	e7bb      	b.n	80168ae <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016936:	2301      	movs	r3, #1
 8016938:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801693c:	2300      	movs	r3, #0
 801693e:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016942:	235e      	movs	r3, #94	; 0x5e
 8016944:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016948:	7863      	ldrb	r3, [r4, #1]
 801694a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801694e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016952:	78a3      	ldrb	r3, [r4, #2]
 8016954:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016958:	78e3      	ldrb	r3, [r4, #3]
 801695a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 801695e:	ab02      	add	r3, sp, #8
 8016960:	e027      	b.n	80169b2 <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016962:	4631      	mov	r1, r6
 8016964:	4628      	mov	r0, r5
 8016966:	f7ff fe55 	bl	8016614 <etharp_output_to_arp_index>
 801696a:	e02b      	b.n	80169c4 <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801696c:	3201      	adds	r2, #1
 801696e:	b252      	sxtb	r2, r2
 8016970:	2a09      	cmp	r2, #9
 8016972:	dc17      	bgt.n	80169a4 <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016974:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016978:	00d9      	lsls	r1, r3, #3
 801697a:	4b16      	ldr	r3, [pc, #88]	; (80169d4 <etharp_output+0x13c>)
 801697c:	440b      	add	r3, r1
 801697e:	7d1b      	ldrb	r3, [r3, #20]
 8016980:	2b01      	cmp	r3, #1
 8016982:	d9f3      	bls.n	801696c <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016984:	6820      	ldr	r0, [r4, #0]
 8016986:	4b13      	ldr	r3, [pc, #76]	; (80169d4 <etharp_output+0x13c>)
 8016988:	440b      	add	r3, r1
 801698a:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801698c:	4298      	cmp	r0, r3
 801698e:	d1ed      	bne.n	801696c <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 8016990:	b2d2      	uxtb	r2, r2
 8016992:	4b0f      	ldr	r3, [pc, #60]	; (80169d0 <etharp_output+0x138>)
 8016994:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016996:	4631      	mov	r1, r6
 8016998:	4628      	mov	r0, r5
 801699a:	f7ff fe3b 	bl	8016614 <etharp_output_to_arp_index>
 801699e:	e011      	b.n	80169c4 <etharp_output+0x12c>
 80169a0:	2200      	movs	r2, #0
 80169a2:	e7e5      	b.n	8016970 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 80169a4:	4632      	mov	r2, r6
 80169a6:	4621      	mov	r1, r4
 80169a8:	4628      	mov	r0, r5
 80169aa:	f7ff fe9d 	bl	80166e8 <etharp_query>
 80169ae:	e009      	b.n	80169c4 <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 80169b0:	4b0e      	ldr	r3, [pc, #56]	; (80169ec <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80169b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80169b6:	9200      	str	r2, [sp, #0]
 80169b8:	f105 0225 	add.w	r2, r5, #37	; 0x25
 80169bc:	4631      	mov	r1, r6
 80169be:	4628      	mov	r0, r5
 80169c0:	f005 fce6 	bl	801c390 <ethernet_output>
}
 80169c4:	b004      	add	sp, #16
 80169c6:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 80169c8:	f06f 0003 	mvn.w	r0, #3
 80169cc:	e7fa      	b.n	80169c4 <etharp_output+0x12c>
 80169ce:	bf00      	nop
 80169d0:	20009474 	.word	0x20009474
 80169d4:	20009384 	.word	0x20009384
 80169d8:	08023ebc 	.word	0x08023ebc
 80169dc:	08023fec 	.word	0x08023fec
 80169e0:	08020b90 	.word	0x08020b90
 80169e4:	08023fc4 	.word	0x08023fc4
 80169e8:	08023f4c 	.word	0x08023f4c
 80169ec:	08025704 	.word	0x08025704

080169f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80169f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169f4:	b086      	sub	sp, #24
 80169f6:	4606      	mov	r6, r0
 80169f8:	4688      	mov	r8, r1
 80169fa:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80169fc:	2200      	movs	r2, #0
 80169fe:	2124      	movs	r1, #36	; 0x24
 8016a00:	2001      	movs	r0, #1
 8016a02:	f001 fc81 	bl	8018308 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8016a06:	2800      	cmp	r0, #0
 8016a08:	d037      	beq.n	8016a7a <icmp_send_response+0x8a>
 8016a0a:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016a0c:	8943      	ldrh	r3, [r0, #10]
 8016a0e:	2b23      	cmp	r3, #35	; 0x23
 8016a10:	d936      	bls.n	8016a80 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016a12:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016a16:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8016a18:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8016a1c:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	7123      	strb	r3, [r4, #4]
 8016a22:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8016a24:	71a3      	strb	r3, [r4, #6]
 8016a26:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016a28:	686f      	ldr	r7, [r5, #4]
 8016a2a:	6873      	ldr	r3, [r6, #4]
 8016a2c:	681e      	ldr	r6, [r3, #0]
 8016a2e:	6858      	ldr	r0, [r3, #4]
 8016a30:	6899      	ldr	r1, [r3, #8]
 8016a32:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8016a36:	60be      	str	r6, [r7, #8]
 8016a38:	60f8      	str	r0, [r7, #12]
 8016a3a:	6139      	str	r1, [r7, #16]
 8016a3c:	f8c7 c014 	str.w	ip, [r7, #20]
 8016a40:	691e      	ldr	r6, [r3, #16]
 8016a42:	6958      	ldr	r0, [r3, #20]
 8016a44:	6999      	ldr	r1, [r3, #24]
 8016a46:	61be      	str	r6, [r7, #24]
 8016a48:	61f8      	str	r0, [r7, #28]
 8016a4a:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016a4c:	f8de 300c 	ldr.w	r3, [lr, #12]
 8016a50:	a806      	add	r0, sp, #24
 8016a52:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016a56:	f000 f8cb 	bl	8016bf0 <ip4_route>
#endif
  if (netif != NULL) {
 8016a5a:	b158      	cbz	r0, 8016a74 <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016a5c:	2100      	movs	r1, #0
 8016a5e:	70a1      	strb	r1, [r4, #2]
 8016a60:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016a62:	9002      	str	r0, [sp, #8]
 8016a64:	2301      	movs	r3, #1
 8016a66:	9301      	str	r3, [sp, #4]
 8016a68:	9100      	str	r1, [sp, #0]
 8016a6a:	23ff      	movs	r3, #255	; 0xff
 8016a6c:	aa05      	add	r2, sp, #20
 8016a6e:	4628      	mov	r0, r5
 8016a70:	f000 fa5c 	bl	8016f2c <ip4_output_if>
  }
  pbuf_free(q);
 8016a74:	4628      	mov	r0, r5
 8016a76:	f001 fbdb 	bl	8018230 <pbuf_free>
}
 8016a7a:	b006      	add	sp, #24
 8016a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016a80:	4b03      	ldr	r3, [pc, #12]	; (8016a90 <icmp_send_response+0xa0>)
 8016a82:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8016a86:	4903      	ldr	r1, [pc, #12]	; (8016a94 <icmp_send_response+0xa4>)
 8016a88:	4803      	ldr	r0, [pc, #12]	; (8016a98 <icmp_send_response+0xa8>)
 8016a8a:	f008 fc52 	bl	801f332 <iprintf>
 8016a8e:	e7c0      	b.n	8016a12 <icmp_send_response+0x22>
 8016a90:	08024104 	.word	0x08024104
 8016a94:	0802413c 	.word	0x0802413c
 8016a98:	08020b90 	.word	0x08020b90

08016a9c <icmp_input>:
{
 8016a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aa0:	b084      	sub	sp, #16
 8016aa2:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8016aa4:	4b47      	ldr	r3, [pc, #284]	; (8016bc4 <icmp_input+0x128>)
 8016aa6:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8016aa8:	7834      	ldrb	r4, [r6, #0]
 8016aaa:	f004 040f 	and.w	r4, r4, #15
 8016aae:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8016ab0:	2c13      	cmp	r4, #19
 8016ab2:	d915      	bls.n	8016ae0 <icmp_input+0x44>
 8016ab4:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 8016ab6:	8943      	ldrh	r3, [r0, #10]
 8016ab8:	2b03      	cmp	r3, #3
 8016aba:	d911      	bls.n	8016ae0 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8016abc:	6843      	ldr	r3, [r0, #4]
 8016abe:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8016ac0:	2b08      	cmp	r3, #8
 8016ac2:	d15d      	bne.n	8016b80 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016ac4:	4b3f      	ldr	r3, [pc, #252]	; (8016bc4 <icmp_input+0x128>)
 8016ac6:	6958      	ldr	r0, [r3, #20]
 8016ac8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8016acc:	2be0      	cmp	r3, #224	; 0xe0
 8016ace:	d023      	beq.n	8016b18 <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016ad0:	4b3c      	ldr	r3, [pc, #240]	; (8016bc4 <icmp_input+0x128>)
 8016ad2:	6819      	ldr	r1, [r3, #0]
 8016ad4:	f000 fa3f 	bl	8016f56 <ip4_addr_isbroadcast_u32>
 8016ad8:	b9f0      	cbnz	r0, 8016b18 <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016ada:	892b      	ldrh	r3, [r5, #8]
 8016adc:	2b07      	cmp	r3, #7
 8016ade:	d805      	bhi.n	8016aec <icmp_input+0x50>
  pbuf_free(p);
 8016ae0:	4628      	mov	r0, r5
 8016ae2:	f001 fba5 	bl	8018230 <pbuf_free>
}
 8016ae6:	b004      	add	sp, #16
 8016ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016aec:	f104 010e 	add.w	r1, r4, #14
 8016af0:	4628      	mov	r0, r5
 8016af2:	f001 fb93 	bl	801821c <pbuf_header>
 8016af6:	b3a8      	cbz	r0, 8016b64 <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8016af8:	8929      	ldrh	r1, [r5, #8]
 8016afa:	4421      	add	r1, r4
 8016afc:	2200      	movs	r2, #0
 8016afe:	b289      	uxth	r1, r1
 8016b00:	2002      	movs	r0, #2
 8016b02:	f001 fc01 	bl	8018308 <pbuf_alloc>
      if (r == NULL) {
 8016b06:	4680      	mov	r8, r0
 8016b08:	b130      	cbz	r0, 8016b18 <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016b0a:	8942      	ldrh	r2, [r0, #10]
 8016b0c:	f104 0308 	add.w	r3, r4, #8
 8016b10:	429a      	cmp	r2, r3
 8016b12:	d205      	bcs.n	8016b20 <icmp_input+0x84>
        pbuf_free(r);
 8016b14:	f001 fb8c 	bl	8018230 <pbuf_free>
  pbuf_free(p);
 8016b18:	4628      	mov	r0, r5
 8016b1a:	f001 fb89 	bl	8018230 <pbuf_free>
  return;
 8016b1e:	e7e2      	b.n	8016ae6 <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 8016b20:	4622      	mov	r2, r4
 8016b22:	4631      	mov	r1, r6
 8016b24:	6840      	ldr	r0, [r0, #4]
 8016b26:	f009 fa48 	bl	801ffba <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8016b2a:	4261      	negs	r1, r4
 8016b2c:	4640      	mov	r0, r8
 8016b2e:	f001 fb75 	bl	801821c <pbuf_header>
 8016b32:	b148      	cbz	r0, 8016b48 <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016b34:	4b24      	ldr	r3, [pc, #144]	; (8016bc8 <icmp_input+0x12c>)
 8016b36:	22af      	movs	r2, #175	; 0xaf
 8016b38:	4924      	ldr	r1, [pc, #144]	; (8016bcc <icmp_input+0x130>)
 8016b3a:	4825      	ldr	r0, [pc, #148]	; (8016bd0 <icmp_input+0x134>)
 8016b3c:	f008 fbf9 	bl	801f332 <iprintf>
        pbuf_free(r);
 8016b40:	4640      	mov	r0, r8
 8016b42:	f001 fb75 	bl	8018230 <pbuf_free>
        goto icmperr;
 8016b46:	e7e7      	b.n	8016b18 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 8016b48:	4629      	mov	r1, r5
 8016b4a:	4640      	mov	r0, r8
 8016b4c:	f001 fd96 	bl	801867c <pbuf_copy>
 8016b50:	b118      	cbz	r0, 8016b5a <icmp_input+0xbe>
        pbuf_free(r);
 8016b52:	4640      	mov	r0, r8
 8016b54:	f001 fb6c 	bl	8018230 <pbuf_free>
        goto icmperr;
 8016b58:	e7de      	b.n	8016b18 <icmp_input+0x7c>
      pbuf_free(p);
 8016b5a:	4628      	mov	r0, r5
 8016b5c:	f001 fb68 	bl	8018230 <pbuf_free>
      p = r;
 8016b60:	4645      	mov	r5, r8
 8016b62:	e007      	b.n	8016b74 <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016b64:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 8016b68:	31f2      	adds	r1, #242	; 0xf2
 8016b6a:	b209      	sxth	r1, r1
 8016b6c:	4628      	mov	r0, r5
 8016b6e:	f001 fb55 	bl	801821c <pbuf_header>
 8016b72:	b948      	cbnz	r0, 8016b88 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 8016b74:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8016b76:	4621      	mov	r1, r4
 8016b78:	4628      	mov	r0, r5
 8016b7a:	f001 fb4f 	bl	801821c <pbuf_header>
 8016b7e:	b150      	cbz	r0, 8016b96 <icmp_input+0xfa>
  pbuf_free(p);
 8016b80:	4628      	mov	r0, r5
 8016b82:	f001 fb55 	bl	8018230 <pbuf_free>
  return;
 8016b86:	e7ae      	b.n	8016ae6 <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016b88:	4b0f      	ldr	r3, [pc, #60]	; (8016bc8 <icmp_input+0x12c>)
 8016b8a:	22c0      	movs	r2, #192	; 0xc0
 8016b8c:	4911      	ldr	r1, [pc, #68]	; (8016bd4 <icmp_input+0x138>)
 8016b8e:	4810      	ldr	r0, [pc, #64]	; (8016bd0 <icmp_input+0x134>)
 8016b90:	f008 fbcf 	bl	801f332 <iprintf>
        goto icmperr;
 8016b94:	e7c0      	b.n	8016b18 <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8016b96:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8016b98:	490a      	ldr	r1, [pc, #40]	; (8016bc4 <icmp_input+0x128>)
 8016b9a:	694b      	ldr	r3, [r1, #20]
 8016b9c:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016b9e:	690b      	ldr	r3, [r1, #16]
 8016ba0:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 8016ba6:	70b2      	strb	r2, [r6, #2]
 8016ba8:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8016baa:	23ff      	movs	r3, #255	; 0xff
 8016bac:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8016bae:	7282      	strb	r2, [r0, #10]
 8016bb0:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016bb2:	9702      	str	r7, [sp, #8]
 8016bb4:	2001      	movs	r0, #1
 8016bb6:	9001      	str	r0, [sp, #4]
 8016bb8:	9200      	str	r2, [sp, #0]
 8016bba:	3114      	adds	r1, #20
 8016bbc:	4628      	mov	r0, r5
 8016bbe:	f000 f9b5 	bl	8016f2c <ip4_output_if>
 8016bc2:	e7dd      	b.n	8016b80 <icmp_input+0xe4>
 8016bc4:	2000a250 	.word	0x2000a250
 8016bc8:	08024104 	.word	0x08024104
 8016bcc:	08024098 	.word	0x08024098
 8016bd0:	08020b90 	.word	0x08020b90
 8016bd4:	080240d0 	.word	0x080240d0

08016bd8 <icmp_dest_unreach>:
{
 8016bd8:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 8016bda:	460a      	mov	r2, r1
 8016bdc:	2103      	movs	r1, #3
 8016bde:	f7ff ff07 	bl	80169f0 <icmp_send_response>
 8016be2:	bd08      	pop	{r3, pc}

08016be4 <icmp_time_exceeded>:
{
 8016be4:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 8016be6:	460a      	mov	r2, r1
 8016be8:	210b      	movs	r1, #11
 8016bea:	f7ff ff01 	bl	80169f0 <icmp_send_response>
 8016bee:	bd08      	pop	{r3, pc}

08016bf0 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016bf0:	4b25      	ldr	r3, [pc, #148]	; (8016c88 <ip4_route+0x98>)
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	e02b      	b.n	8016c4e <ip4_route+0x5e>
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	b1ab      	cbz	r3, 8016c26 <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016bfa:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8016bfe:	f002 0105 	and.w	r1, r2, #5
 8016c02:	2905      	cmp	r1, #5
 8016c04:	d1f7      	bne.n	8016bf6 <ip4_route+0x6>
 8016c06:	6859      	ldr	r1, [r3, #4]
 8016c08:	2900      	cmp	r1, #0
 8016c0a:	d0f4      	beq.n	8016bf6 <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016c0c:	6804      	ldr	r4, [r0, #0]
 8016c0e:	689d      	ldr	r5, [r3, #8]
 8016c10:	4061      	eors	r1, r4
 8016c12:	4229      	tst	r1, r5
 8016c14:	d016      	beq.n	8016c44 <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016c16:	f012 0f02 	tst.w	r2, #2
 8016c1a:	d1ec      	bne.n	8016bf6 <ip4_route+0x6>
 8016c1c:	68da      	ldr	r2, [r3, #12]
 8016c1e:	4294      	cmp	r4, r2
 8016c20:	d1e9      	bne.n	8016bf6 <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 8016c22:	4618      	mov	r0, r3
 8016c24:	e00a      	b.n	8016c3c <ip4_route+0x4c>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c26:	4a19      	ldr	r2, [pc, #100]	; (8016c8c <ip4_route+0x9c>)
 8016c28:	6810      	ldr	r0, [r2, #0]
 8016c2a:	b138      	cbz	r0, 8016c3c <ip4_route+0x4c>
 8016c2c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8016c30:	f002 0205 	and.w	r2, r2, #5
 8016c34:	2a05      	cmp	r2, #5
 8016c36:	d107      	bne.n	8016c48 <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8016c38:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c3a:	b10a      	cbz	r2, 8016c40 <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8016c3c:	bc30      	pop	{r4, r5}
 8016c3e:	4770      	bx	lr
    return NULL;
 8016c40:	4618      	mov	r0, r3
 8016c42:	e7fb      	b.n	8016c3c <ip4_route+0x4c>
        return netif;
 8016c44:	4618      	mov	r0, r3
 8016c46:	e7f9      	b.n	8016c3c <ip4_route+0x4c>
    return NULL;
 8016c48:	4618      	mov	r0, r3
 8016c4a:	e7f7      	b.n	8016c3c <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	b153      	cbz	r3, 8016c66 <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016c50:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8016c54:	f002 0105 	and.w	r1, r2, #5
 8016c58:	2905      	cmp	r1, #5
 8016c5a:	d1f7      	bne.n	8016c4c <ip4_route+0x5c>
 8016c5c:	6859      	ldr	r1, [r3, #4]
 8016c5e:	2900      	cmp	r1, #0
 8016c60:	d0f4      	beq.n	8016c4c <ip4_route+0x5c>
{
 8016c62:	b430      	push	{r4, r5}
 8016c64:	e7d2      	b.n	8016c0c <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c66:	4a09      	ldr	r2, [pc, #36]	; (8016c8c <ip4_route+0x9c>)
 8016c68:	6810      	ldr	r0, [r2, #0]
 8016c6a:	2800      	cmp	r0, #0
 8016c6c:	d0e7      	beq.n	8016c3e <ip4_route+0x4e>
 8016c6e:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8016c72:	f002 0205 	and.w	r2, r2, #5
 8016c76:	2a05      	cmp	r2, #5
 8016c78:	d104      	bne.n	8016c84 <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8016c7a:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c7c:	2a00      	cmp	r2, #0
 8016c7e:	d1de      	bne.n	8016c3e <ip4_route+0x4e>
    return NULL;
 8016c80:	4618      	mov	r0, r3
 8016c82:	4770      	bx	lr
 8016c84:	4618      	mov	r0, r3
 8016c86:	4770      	bx	lr
 8016c88:	2000eca4 	.word	0x2000eca4
 8016c8c:	2000eca8 	.word	0x2000eca8

08016c90 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c94:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016c96:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8016c9a:	f898 3000 	ldrb.w	r3, [r8]
 8016c9e:	091a      	lsrs	r2, r3, #4
 8016ca0:	2a04      	cmp	r2, #4
 8016ca2:	d004      	beq.n	8016cae <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016ca4:	f001 fac4 	bl	8018230 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8016ca8:	2000      	movs	r0, #0
 8016caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cae:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
 8016cb0:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 8016cb4:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016cb6:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8016cba:	f7ff f9f2 	bl	80160a2 <lwip_htons>
 8016cbe:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8016cc0:	892b      	ldrh	r3, [r5, #8]
 8016cc2:	4298      	cmp	r0, r3
 8016cc4:	d316      	bcc.n	8016cf4 <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016cc6:	896b      	ldrh	r3, [r5, #10]
 8016cc8:	429e      	cmp	r6, r3
 8016cca:	d818      	bhi.n	8016cfe <ip4_input+0x6e>
 8016ccc:	892b      	ldrh	r3, [r5, #8]
 8016cce:	429c      	cmp	r4, r3
 8016cd0:	d815      	bhi.n	8016cfe <ip4_input+0x6e>
 8016cd2:	2e13      	cmp	r6, #19
 8016cd4:	d913      	bls.n	8016cfe <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016cd6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016cda:	4a55      	ldr	r2, [pc, #340]	; (8016e30 <ip4_input+0x1a0>)
 8016cdc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016cde:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8016ce2:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ce8:	2be0      	cmp	r3, #224	; 0xe0
 8016cea:	d00c      	beq.n	8016d06 <ip4_input+0x76>
 8016cec:	463c      	mov	r4, r7
 8016cee:	f04f 0901 	mov.w	r9, #1
 8016cf2:	e015      	b.n	8016d20 <ip4_input+0x90>
    pbuf_realloc(p, iphdr_len);
 8016cf4:	4601      	mov	r1, r0
 8016cf6:	4628      	mov	r0, r5
 8016cf8:	f001 fbee 	bl	80184d8 <pbuf_realloc>
 8016cfc:	e7e3      	b.n	8016cc6 <ip4_input+0x36>
    pbuf_free(p);
 8016cfe:	4628      	mov	r0, r5
 8016d00:	f001 fa96 	bl	8018230 <pbuf_free>
    return ERR_OK;
 8016d04:	e7d0      	b.n	8016ca8 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016d0a:	f013 0f01 	tst.w	r3, #1
 8016d0e:	d024      	beq.n	8016d5a <ip4_input+0xca>
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	bb23      	cbnz	r3, 8016d5e <ip4_input+0xce>
      netif = NULL;
 8016d14:	2400      	movs	r4, #0
 8016d16:	e025      	b.n	8016d64 <ip4_input+0xd4>
        netif = netif->next;
 8016d18:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 8016d1a:	42bc      	cmp	r4, r7
 8016d1c:	d01b      	beq.n	8016d56 <ip4_input+0xc6>
    } while (netif != NULL);
 8016d1e:	b30c      	cbz	r4, 8016d64 <ip4_input+0xd4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016d20:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8016d24:	f013 0f01 	tst.w	r3, #1
 8016d28:	d009      	beq.n	8016d3e <ip4_input+0xae>
 8016d2a:	6863      	ldr	r3, [r4, #4]
 8016d2c:	b13b      	cbz	r3, 8016d3e <ip4_input+0xae>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016d2e:	4a40      	ldr	r2, [pc, #256]	; (8016e30 <ip4_input+0x1a0>)
 8016d30:	6950      	ldr	r0, [r2, #20]
 8016d32:	4283      	cmp	r3, r0
 8016d34:	d016      	beq.n	8016d64 <ip4_input+0xd4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016d36:	4621      	mov	r1, r4
 8016d38:	f000 f90d 	bl	8016f56 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016d3c:	b990      	cbnz	r0, 8016d64 <ip4_input+0xd4>
      if (first) {
 8016d3e:	f1b9 0f00 	cmp.w	r9, #0
 8016d42:	d0e9      	beq.n	8016d18 <ip4_input+0x88>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8016d44:	4b3a      	ldr	r3, [pc, #232]	; (8016e30 <ip4_input+0x1a0>)
 8016d46:	7d1b      	ldrb	r3, [r3, #20]
 8016d48:	2b7f      	cmp	r3, #127	; 0x7f
 8016d4a:	d00a      	beq.n	8016d62 <ip4_input+0xd2>
        netif = netif_list;
 8016d4c:	4b39      	ldr	r3, [pc, #228]	; (8016e34 <ip4_input+0x1a4>)
 8016d4e:	681c      	ldr	r4, [r3, #0]
        first = 0;
 8016d50:	f04f 0900 	mov.w	r9, #0
 8016d54:	e7e1      	b.n	8016d1a <ip4_input+0x8a>
        netif = netif->next;
 8016d56:	6824      	ldr	r4, [r4, #0]
 8016d58:	e7e1      	b.n	8016d1e <ip4_input+0x8e>
      netif = NULL;
 8016d5a:	2400      	movs	r4, #0
 8016d5c:	e002      	b.n	8016d64 <ip4_input+0xd4>
      netif = inp;
 8016d5e:	463c      	mov	r4, r7
 8016d60:	e000      	b.n	8016d64 <ip4_input+0xd4>
          netif = NULL;
 8016d62:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d64:	4639      	mov	r1, r7
 8016d66:	4b32      	ldr	r3, [pc, #200]	; (8016e30 <ip4_input+0x1a0>)
 8016d68:	6918      	ldr	r0, [r3, #16]
 8016d6a:	f000 f8f4 	bl	8016f56 <ip4_addr_isbroadcast_u32>
 8016d6e:	2800      	cmp	r0, #0
 8016d70:	d137      	bne.n	8016de2 <ip4_input+0x152>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016d72:	4b2f      	ldr	r3, [pc, #188]	; (8016e30 <ip4_input+0x1a0>)
 8016d74:	691b      	ldr	r3, [r3, #16]
 8016d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d7a:	2be0      	cmp	r3, #224	; 0xe0
 8016d7c:	d031      	beq.n	8016de2 <ip4_input+0x152>
  if (netif == NULL) {
 8016d7e:	2c00      	cmp	r4, #0
 8016d80:	d033      	beq.n	8016dea <ip4_input+0x15a>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016d82:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8016d86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016d8a:	b29b      	uxth	r3, r3
 8016d8c:	b13b      	cbz	r3, 8016d9e <ip4_input+0x10e>
    p = ip4_reass(p);
 8016d8e:	4628      	mov	r0, r5
 8016d90:	f000 fbec 	bl	801756c <ip4_reass>
    if (p == NULL) {
 8016d94:	4605      	mov	r5, r0
 8016d96:	2800      	cmp	r0, #0
 8016d98:	d086      	beq.n	8016ca8 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 8016d9a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 8016d9e:	4a24      	ldr	r2, [pc, #144]	; (8016e30 <ip4_input+0x1a0>)
 8016da0:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 8016da2:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016da4:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8016da8:	f898 3000 	ldrb.w	r3, [r8]
 8016dac:	f003 030f 	and.w	r3, r3, #15
 8016db0:	009b      	lsls	r3, r3, #2
 8016db2:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8016db4:	4271      	negs	r1, r6
 8016db6:	4628      	mov	r0, r5
 8016db8:	f001 fa30 	bl	801821c <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8016dbc:	f898 3009 	ldrb.w	r3, [r8, #9]
 8016dc0:	2b01      	cmp	r3, #1
 8016dc2:	d016      	beq.n	8016df2 <ip4_input+0x162>
 8016dc4:	2b06      	cmp	r3, #6
 8016dc6:	d119      	bne.n	8016dfc <ip4_input+0x16c>
      tcp_input(p, inp);
 8016dc8:	4639      	mov	r1, r7
 8016dca:	4628      	mov	r0, r5
 8016dcc:	f003 feba 	bl	801ab44 <tcp_input>
  ip_data.current_netif = NULL;
 8016dd0:	4b17      	ldr	r3, [pc, #92]	; (8016e30 <ip4_input+0x1a0>)
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016dd6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016dd8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016dda:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016ddc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016dde:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 8016de0:	e762      	b.n	8016ca8 <ip4_input+0x18>
      pbuf_free(p);
 8016de2:	4628      	mov	r0, r5
 8016de4:	f001 fa24 	bl	8018230 <pbuf_free>
      return ERR_OK;
 8016de8:	e75e      	b.n	8016ca8 <ip4_input+0x18>
    pbuf_free(p);
 8016dea:	4628      	mov	r0, r5
 8016dec:	f001 fa20 	bl	8018230 <pbuf_free>
    return ERR_OK;
 8016df0:	e75a      	b.n	8016ca8 <ip4_input+0x18>
      icmp_input(p, inp);
 8016df2:	4639      	mov	r1, r7
 8016df4:	4628      	mov	r0, r5
 8016df6:	f7ff fe51 	bl	8016a9c <icmp_input>
      break;
 8016dfa:	e7e9      	b.n	8016dd0 <ip4_input+0x140>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016dfc:	4621      	mov	r1, r4
 8016dfe:	4b0c      	ldr	r3, [pc, #48]	; (8016e30 <ip4_input+0x1a0>)
 8016e00:	6958      	ldr	r0, [r3, #20]
 8016e02:	f000 f8a8 	bl	8016f56 <ip4_addr_isbroadcast_u32>
 8016e06:	b978      	cbnz	r0, 8016e28 <ip4_input+0x198>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016e08:	4b09      	ldr	r3, [pc, #36]	; (8016e30 <ip4_input+0x1a0>)
 8016e0a:	695b      	ldr	r3, [r3, #20]
 8016e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016e10:	2be0      	cmp	r3, #224	; 0xe0
 8016e12:	d009      	beq.n	8016e28 <ip4_input+0x198>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8016e14:	4631      	mov	r1, r6
 8016e16:	4628      	mov	r0, r5
 8016e18:	f001 fa05 	bl	8018226 <pbuf_header_force>
        p->payload = iphdr;
 8016e1c:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016e20:	2102      	movs	r1, #2
 8016e22:	4628      	mov	r0, r5
 8016e24:	f7ff fed8 	bl	8016bd8 <icmp_dest_unreach>
      pbuf_free(p);
 8016e28:	4628      	mov	r0, r5
 8016e2a:	f001 fa01 	bl	8018230 <pbuf_free>
 8016e2e:	e7cf      	b.n	8016dd0 <ip4_input+0x140>
 8016e30:	2000a250 	.word	0x2000a250
 8016e34:	2000eca4 	.word	0x2000eca4

08016e38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8016e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e3c:	b083      	sub	sp, #12
 8016e3e:	4605      	mov	r5, r0
 8016e40:	4689      	mov	r9, r1
 8016e42:	4616      	mov	r6, r2
 8016e44:	4698      	mov	r8, r3
 8016e46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016e48:	89c3      	ldrh	r3, [r0, #14]
 8016e4a:	2b01      	cmp	r3, #1
 8016e4c:	d006      	beq.n	8016e5c <ip4_output_if_src+0x24>
 8016e4e:	4b31      	ldr	r3, [pc, #196]	; (8016f14 <ip4_output_if_src+0xdc>)
 8016e50:	f240 3233 	movw	r2, #819	; 0x333
 8016e54:	4930      	ldr	r1, [pc, #192]	; (8016f18 <ip4_output_if_src+0xe0>)
 8016e56:	4831      	ldr	r0, [pc, #196]	; (8016f1c <ip4_output_if_src+0xe4>)
 8016e58:	f008 fa6b 	bl	801f332 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016e5c:	2e00      	cmp	r6, #0
 8016e5e:	d04a      	beq.n	8016ef6 <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8016e60:	2114      	movs	r1, #20
 8016e62:	4628      	mov	r0, r5
 8016e64:	f001 f9da 	bl	801821c <pbuf_header>
 8016e68:	2800      	cmp	r0, #0
 8016e6a:	d150      	bne.n	8016f0e <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016e6c:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016e6e:	896b      	ldrh	r3, [r5, #10]
 8016e70:	2b13      	cmp	r3, #19
 8016e72:	d934      	bls.n	8016ede <ip4_output_if_src+0xa6>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016e74:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016e78:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8016e7c:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016e7e:	6833      	ldr	r3, [r6, #0]
 8016e80:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016e82:	2345      	movs	r3, #69	; 0x45
 8016e84:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8016e86:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8016e8a:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016e8c:	8928      	ldrh	r0, [r5, #8]
 8016e8e:	f7ff f908 	bl	80160a2 <lwip_htons>
 8016e92:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016e94:	2300      	movs	r3, #0
 8016e96:	71a3      	strb	r3, [r4, #6]
 8016e98:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016e9a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8016f28 <ip4_output_if_src+0xf0>
 8016e9e:	f8b8 0000 	ldrh.w	r0, [r8]
 8016ea2:	f7ff f8fe 	bl	80160a2 <lwip_htons>
 8016ea6:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016ea8:	f8b8 3000 	ldrh.w	r3, [r8]
 8016eac:	3301      	adds	r3, #1
 8016eae:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 8016eb2:	f1b9 0f00 	cmp.w	r9, #0
 8016eb6:	d01a      	beq.n	8016eee <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016eb8:	f8d9 3000 	ldr.w	r3, [r9]
 8016ebc:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	72a3      	strb	r3, [r4, #10]
 8016ec2:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016ec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ec6:	b113      	cbz	r3, 8016ece <ip4_output_if_src+0x96>
 8016ec8:	892a      	ldrh	r2, [r5, #8]
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	d319      	bcc.n	8016f02 <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016ece:	697b      	ldr	r3, [r7, #20]
 8016ed0:	4632      	mov	r2, r6
 8016ed2:	4629      	mov	r1, r5
 8016ed4:	4638      	mov	r0, r7
 8016ed6:	4798      	blx	r3
}
 8016ed8:	b003      	add	sp, #12
 8016eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016ede:	4b0d      	ldr	r3, [pc, #52]	; (8016f14 <ip4_output_if_src+0xdc>)
 8016ee0:	f240 3261 	movw	r2, #865	; 0x361
 8016ee4:	490e      	ldr	r1, [pc, #56]	; (8016f20 <ip4_output_if_src+0xe8>)
 8016ee6:	480d      	ldr	r0, [pc, #52]	; (8016f1c <ip4_output_if_src+0xe4>)
 8016ee8:	f008 fa23 	bl	801f332 <iprintf>
 8016eec:	e7c2      	b.n	8016e74 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016eee:	4b0d      	ldr	r3, [pc, #52]	; (8016f24 <ip4_output_if_src+0xec>)
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	60e3      	str	r3, [r4, #12]
 8016ef4:	e7e3      	b.n	8016ebe <ip4_output_if_src+0x86>
    iphdr = (struct ip_hdr *)p->payload;
 8016ef6:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016ef8:	691b      	ldr	r3, [r3, #16]
 8016efa:	ae02      	add	r6, sp, #8
 8016efc:	f846 3d04 	str.w	r3, [r6, #-4]!
 8016f00:	e7e0      	b.n	8016ec4 <ip4_output_if_src+0x8c>
    return ip4_frag(p, netif, dest);
 8016f02:	4632      	mov	r2, r6
 8016f04:	4639      	mov	r1, r7
 8016f06:	4628      	mov	r0, r5
 8016f08:	f000 fc04 	bl	8017714 <ip4_frag>
 8016f0c:	e7e4      	b.n	8016ed8 <ip4_output_if_src+0xa0>
      return ERR_BUF;
 8016f0e:	f06f 0001 	mvn.w	r0, #1
 8016f12:	e7e1      	b.n	8016ed8 <ip4_output_if_src+0xa0>
 8016f14:	08024168 	.word	0x08024168
 8016f18:	0802419c 	.word	0x0802419c
 8016f1c:	08020b90 	.word	0x08020b90
 8016f20:	080241a8 	.word	0x080241a8
 8016f24:	08024220 	.word	0x08024220
 8016f28:	20009476 	.word	0x20009476

08016f2c <ip4_output_if>:
{
 8016f2c:	b530      	push	{r4, r5, lr}
 8016f2e:	b085      	sub	sp, #20
 8016f30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 8016f32:	4615      	mov	r5, r2
 8016f34:	b11a      	cbz	r2, 8016f3e <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 8016f36:	b109      	cbz	r1, 8016f3c <ip4_output_if+0x10>
 8016f38:	680a      	ldr	r2, [r1, #0]
 8016f3a:	b902      	cbnz	r2, 8016f3e <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 8016f3c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016f3e:	9402      	str	r4, [sp, #8]
 8016f40:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8016f44:	9201      	str	r2, [sp, #4]
 8016f46:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8016f4a:	9200      	str	r2, [sp, #0]
 8016f4c:	462a      	mov	r2, r5
 8016f4e:	f7ff ff73 	bl	8016e38 <ip4_output_if_src>
}
 8016f52:	b005      	add	sp, #20
 8016f54:	bd30      	pop	{r4, r5, pc}

08016f56 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016f56:	1e43      	subs	r3, r0, #1
 8016f58:	f113 0f03 	cmn.w	r3, #3
 8016f5c:	d811      	bhi.n	8016f82 <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016f5e:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8016f62:	f013 0f02 	tst.w	r3, #2
 8016f66:	d00e      	beq.n	8016f86 <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016f68:	684b      	ldr	r3, [r1, #4]
 8016f6a:	4298      	cmp	r0, r3
 8016f6c:	d00d      	beq.n	8016f8a <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016f6e:	688a      	ldr	r2, [r1, #8]
 8016f70:	4043      	eors	r3, r0
 8016f72:	4213      	tst	r3, r2
 8016f74:	d10b      	bne.n	8016f8e <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016f76:	43d2      	mvns	r2, r2
 8016f78:	ea32 0300 	bics.w	r3, r2, r0
 8016f7c:	d009      	beq.n	8016f92 <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8016f7e:	2000      	movs	r0, #0
 8016f80:	4770      	bx	lr
    return 1;
 8016f82:	2001      	movs	r0, #1
 8016f84:	4770      	bx	lr
    return 0;
 8016f86:	2000      	movs	r0, #0
 8016f88:	4770      	bx	lr
    return 0;
 8016f8a:	2000      	movs	r0, #0
 8016f8c:	4770      	bx	lr
    return 0;
 8016f8e:	2000      	movs	r0, #0
 8016f90:	4770      	bx	lr
    return 1;
 8016f92:	2001      	movs	r0, #1
  }
}
 8016f94:	4770      	bx	lr
	...

08016f98 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8016f98:	b570      	push	{r4, r5, r6, lr}
 8016f9a:	b084      	sub	sp, #16
 8016f9c:	460c      	mov	r4, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 8016f9e:	7803      	ldrb	r3, [r0, #0]
  u32_t *pp = parts;
 8016fa0:	466e      	mov	r6, sp
 8016fa2:	e03b      	b.n	801701c <ip4addr_aton+0x84>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
 8016fa4:	1c42      	adds	r2, r0, #1
 8016fa6:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8016fa8:	2b78      	cmp	r3, #120	; 0x78
 8016faa:	d004      	beq.n	8016fb6 <ip4addr_aton+0x1e>
 8016fac:	2b58      	cmp	r3, #88	; 0x58
 8016fae:	d002      	beq.n	8016fb6 <ip4addr_aton+0x1e>
      c = *++cp;
 8016fb0:	4610      	mov	r0, r2
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 8016fb2:	2108      	movs	r1, #8
 8016fb4:	e03a      	b.n	801702c <ip4addr_aton+0x94>
        c = *++cp;
 8016fb6:	7883      	ldrb	r3, [r0, #2]
 8016fb8:	3002      	adds	r0, #2
        base = 16;
 8016fba:	2110      	movs	r1, #16
        c = *++cp;
 8016fbc:	e036      	b.n	801702c <ip4addr_aton+0x94>
    }
    for (;;) {
      if (isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
        c = *++cp;
      } else if (base == 16 && isxdigit(c)) {
 8016fbe:	2910      	cmp	r1, #16
 8016fc0:	d123      	bne.n	801700a <ip4addr_aton+0x72>
 8016fc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016fc6:	b2d2      	uxtb	r2, r2
 8016fc8:	2a05      	cmp	r2, #5
 8016fca:	d904      	bls.n	8016fd6 <ip4addr_aton+0x3e>
 8016fcc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016fd0:	b2d2      	uxtb	r2, r2
 8016fd2:	2a05      	cmp	r2, #5
 8016fd4:	d819      	bhi.n	801700a <ip4addr_aton+0x72>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 8016fd6:	012d      	lsls	r5, r5, #4
 8016fd8:	f103 020a 	add.w	r2, r3, #10
 8016fdc:	3b61      	subs	r3, #97	; 0x61
 8016fde:	b2db      	uxtb	r3, r3
 8016fe0:	2b19      	cmp	r3, #25
 8016fe2:	d810      	bhi.n	8017006 <ip4addr_aton+0x6e>
 8016fe4:	2361      	movs	r3, #97	; 0x61
 8016fe6:	1ad2      	subs	r2, r2, r3
 8016fe8:	4315      	orrs	r5, r2
        c = *++cp;
 8016fea:	f810 3f01 	ldrb.w	r3, [r0, #1]!
      if (isdigit(c)) {
 8016fee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016ff2:	b2d2      	uxtb	r2, r2
 8016ff4:	2a09      	cmp	r2, #9
 8016ff6:	d8e2      	bhi.n	8016fbe <ip4addr_aton+0x26>
        val = (val * base) + (u32_t)(c - '0');
 8016ff8:	fb05 3201 	mla	r2, r5, r1, r3
 8016ffc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
        c = *++cp;
 8017000:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8017004:	e7f3      	b.n	8016fee <ip4addr_aton+0x56>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 8017006:	2341      	movs	r3, #65	; 0x41
 8017008:	e7ed      	b.n	8016fe6 <ip4addr_aton+0x4e>
      } else {
        break;
      }
    }
    if (c == '.') {
 801700a:	2b2e      	cmp	r3, #46	; 0x2e
 801700c:	d110      	bne.n	8017030 <ip4addr_aton+0x98>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801700e:	ab03      	add	r3, sp, #12
 8017010:	429e      	cmp	r6, r3
 8017012:	d260      	bcs.n	80170d6 <ip4addr_aton+0x13e>
        return 0;
      }
      *pp++ = val;
 8017014:	6035      	str	r5, [r6, #0]
      c = *++cp;
 8017016:	7843      	ldrb	r3, [r0, #1]
      *pp++ = val;
 8017018:	3604      	adds	r6, #4
      c = *++cp;
 801701a:	3001      	adds	r0, #1
    if (!isdigit(c)) {
 801701c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017020:	b2d2      	uxtb	r2, r2
 8017022:	2a09      	cmp	r2, #9
 8017024:	d855      	bhi.n	80170d2 <ip4addr_aton+0x13a>
    if (c == '0') {
 8017026:	2b30      	cmp	r3, #48	; 0x30
 8017028:	d0bc      	beq.n	8016fa4 <ip4addr_aton+0xc>
    base = 10;
 801702a:	210a      	movs	r1, #10
        base = 16;
 801702c:	2500      	movs	r5, #0
 801702e:	e7de      	b.n	8016fee <ip4addr_aton+0x56>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8017030:	b16b      	cbz	r3, 801704e <ip4addr_aton+0xb6>
 8017032:	2b20      	cmp	r3, #32
 8017034:	d00b      	beq.n	801704e <ip4addr_aton+0xb6>
 8017036:	2b0c      	cmp	r3, #12
 8017038:	d009      	beq.n	801704e <ip4addr_aton+0xb6>
 801703a:	2b0a      	cmp	r3, #10
 801703c:	d007      	beq.n	801704e <ip4addr_aton+0xb6>
 801703e:	2b0d      	cmp	r3, #13
 8017040:	d005      	beq.n	801704e <ip4addr_aton+0xb6>
 8017042:	2b09      	cmp	r3, #9
 8017044:	d003      	beq.n	801704e <ip4addr_aton+0xb6>
 8017046:	2b0b      	cmp	r3, #11
 8017048:	d001      	beq.n	801704e <ip4addr_aton+0xb6>
    return 0;
 801704a:	2000      	movs	r0, #0
 801704c:	e044      	b.n	80170d8 <ip4addr_aton+0x140>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801704e:	4668      	mov	r0, sp
 8017050:	1a30      	subs	r0, r6, r0
 8017052:	1080      	asrs	r0, r0, #2
 8017054:	3001      	adds	r0, #1
 8017056:	2804      	cmp	r0, #4
 8017058:	d82d      	bhi.n	80170b6 <ip4addr_aton+0x11e>
 801705a:	e8df f000 	tbb	[pc, r0]
 801705e:	333d      	.short	0x333d
 8017060:	0c03      	.short	0x0c03
 8017062:	1a          	.byte	0x1a
 8017063:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 8017064:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 8017068:	d238      	bcs.n	80170dc <ip4addr_aton+0x144>
      return 0;
    }
    if (parts[0] > 0xff) {
 801706a:	9b00      	ldr	r3, [sp, #0]
 801706c:	2bff      	cmp	r3, #255	; 0xff
 801706e:	d837      	bhi.n	80170e0 <ip4addr_aton+0x148>
      return 0;
    }
    val |= parts[0] << 24;
 8017070:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    break;
 8017074:	e026      	b.n	80170c4 <ip4addr_aton+0x12c>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 8017076:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801707a:	d233      	bcs.n	80170e4 <ip4addr_aton+0x14c>
      return 0;
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801707c:	9a00      	ldr	r2, [sp, #0]
 801707e:	2aff      	cmp	r2, #255	; 0xff
 8017080:	d832      	bhi.n	80170e8 <ip4addr_aton+0x150>
 8017082:	9b01      	ldr	r3, [sp, #4]
 8017084:	2bff      	cmp	r3, #255	; 0xff
 8017086:	d831      	bhi.n	80170ec <ip4addr_aton+0x154>
      return 0;
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 8017088:	041b      	lsls	r3, r3, #16
 801708a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801708e:	431d      	orrs	r5, r3
    break;
 8017090:	e018      	b.n	80170c4 <ip4addr_aton+0x12c>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 8017092:	2dff      	cmp	r5, #255	; 0xff
 8017094:	d82c      	bhi.n	80170f0 <ip4addr_aton+0x158>
      return 0;
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8017096:	9900      	ldr	r1, [sp, #0]
 8017098:	29ff      	cmp	r1, #255	; 0xff
 801709a:	d82b      	bhi.n	80170f4 <ip4addr_aton+0x15c>
 801709c:	9b01      	ldr	r3, [sp, #4]
 801709e:	2bff      	cmp	r3, #255	; 0xff
 80170a0:	d82a      	bhi.n	80170f8 <ip4addr_aton+0x160>
 80170a2:	9a02      	ldr	r2, [sp, #8]
 80170a4:	2aff      	cmp	r2, #255	; 0xff
 80170a6:	d829      	bhi.n	80170fc <ip4addr_aton+0x164>
      return 0;
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80170a8:	041b      	lsls	r3, r3, #16
 80170aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80170ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80170b2:	431d      	orrs	r5, r3
    break;
 80170b4:	e006      	b.n	80170c4 <ip4addr_aton+0x12c>
  default:
    LWIP_ASSERT("unhandled", 0);
 80170b6:	4b13      	ldr	r3, [pc, #76]	; (8017104 <ip4addr_aton+0x16c>)
 80170b8:	f240 1203 	movw	r2, #259	; 0x103
 80170bc:	4912      	ldr	r1, [pc, #72]	; (8017108 <ip4addr_aton+0x170>)
 80170be:	4813      	ldr	r0, [pc, #76]	; (801710c <ip4addr_aton+0x174>)
 80170c0:	f008 f937 	bl	801f332 <iprintf>
    break;
  }
  if (addr) {
 80170c4:	b1e4      	cbz	r4, 8017100 <ip4addr_aton+0x168>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80170c6:	4628      	mov	r0, r5
 80170c8:	f7fe ffee 	bl	80160a8 <lwip_htonl>
 80170cc:	6020      	str	r0, [r4, #0]
  }
  return 1;
 80170ce:	2001      	movs	r0, #1
 80170d0:	e002      	b.n	80170d8 <ip4addr_aton+0x140>
      return 0;
 80170d2:	2000      	movs	r0, #0
 80170d4:	e000      	b.n	80170d8 <ip4addr_aton+0x140>
        return 0;
 80170d6:	2000      	movs	r0, #0
}
 80170d8:	b004      	add	sp, #16
 80170da:	bd70      	pop	{r4, r5, r6, pc}
      return 0;
 80170dc:	2000      	movs	r0, #0
 80170de:	e7fb      	b.n	80170d8 <ip4addr_aton+0x140>
      return 0;
 80170e0:	2000      	movs	r0, #0
 80170e2:	e7f9      	b.n	80170d8 <ip4addr_aton+0x140>
      return 0;
 80170e4:	2000      	movs	r0, #0
 80170e6:	e7f7      	b.n	80170d8 <ip4addr_aton+0x140>
      return 0;
 80170e8:	2000      	movs	r0, #0
 80170ea:	e7f5      	b.n	80170d8 <ip4addr_aton+0x140>
 80170ec:	2000      	movs	r0, #0
 80170ee:	e7f3      	b.n	80170d8 <ip4addr_aton+0x140>
      return 0;
 80170f0:	2000      	movs	r0, #0
 80170f2:	e7f1      	b.n	80170d8 <ip4addr_aton+0x140>
      return 0;
 80170f4:	2000      	movs	r0, #0
 80170f6:	e7ef      	b.n	80170d8 <ip4addr_aton+0x140>
 80170f8:	2000      	movs	r0, #0
 80170fa:	e7ed      	b.n	80170d8 <ip4addr_aton+0x140>
 80170fc:	2000      	movs	r0, #0
 80170fe:	e7eb      	b.n	80170d8 <ip4addr_aton+0x140>
  return 1;
 8017100:	2001      	movs	r0, #1
 8017102:	e7e9      	b.n	80170d8 <ip4addr_aton+0x140>
 8017104:	080241d8 	.word	0x080241d8
 8017108:	08024214 	.word	0x08024214
 801710c:	08020b90 	.word	0x08020b90

08017110 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017110:	b538      	push	{r3, r4, r5, lr}
 8017112:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017114:	4b0c      	ldr	r3, [pc, #48]	; (8017148 <ip_reass_dequeue_datagram+0x38>)
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	4283      	cmp	r3, r0
 801711a:	d008      	beq.n	801712e <ip_reass_dequeue_datagram+0x1e>
 801711c:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801711e:	b151      	cbz	r1, 8017136 <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8017120:	6823      	ldr	r3, [r4, #0]
 8017122:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017124:	4621      	mov	r1, r4
 8017126:	2003      	movs	r0, #3
 8017128:	f000 feb2 	bl	8017e90 <memp_free>
 801712c:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 801712e:	6802      	ldr	r2, [r0, #0]
 8017130:	4b05      	ldr	r3, [pc, #20]	; (8017148 <ip_reass_dequeue_datagram+0x38>)
 8017132:	601a      	str	r2, [r3, #0]
 8017134:	e7f6      	b.n	8017124 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017136:	4b05      	ldr	r3, [pc, #20]	; (801714c <ip_reass_dequeue_datagram+0x3c>)
 8017138:	f240 1245 	movw	r2, #325	; 0x145
 801713c:	4904      	ldr	r1, [pc, #16]	; (8017150 <ip_reass_dequeue_datagram+0x40>)
 801713e:	4805      	ldr	r0, [pc, #20]	; (8017154 <ip_reass_dequeue_datagram+0x44>)
 8017140:	f008 f8f7 	bl	801f332 <iprintf>
 8017144:	e7ec      	b.n	8017120 <ip_reass_dequeue_datagram+0x10>
 8017146:	bf00      	nop
 8017148:	2000947c 	.word	0x2000947c
 801714c:	08024314 	.word	0x08024314
 8017150:	08024350 	.word	0x08024350
 8017154:	08020b90 	.word	0x08020b90

08017158 <ip_reass_free_complete_datagram>:
{
 8017158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801715c:	4680      	mov	r8, r0
 801715e:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017160:	4281      	cmp	r1, r0
 8017162:	d015      	beq.n	8017190 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 8017164:	f1b9 0f00 	cmp.w	r9, #0
 8017168:	d009      	beq.n	801717e <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801716a:	f8d9 3000 	ldr.w	r3, [r9]
 801716e:	4598      	cmp	r8, r3
 8017170:	d005      	beq.n	801717e <ip_reass_free_complete_datagram+0x26>
 8017172:	4b35      	ldr	r3, [pc, #212]	; (8017248 <ip_reass_free_complete_datagram+0xf0>)
 8017174:	22ad      	movs	r2, #173	; 0xad
 8017176:	4935      	ldr	r1, [pc, #212]	; (801724c <ip_reass_free_complete_datagram+0xf4>)
 8017178:	4835      	ldr	r0, [pc, #212]	; (8017250 <ip_reass_free_complete_datagram+0xf8>)
 801717a:	f008 f8da 	bl	801f332 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801717e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017182:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 8017184:	889a      	ldrh	r2, [r3, #4]
 8017186:	b152      	cbz	r2, 801719e <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 8017188:	2600      	movs	r6, #0
  p = ipr->p;
 801718a:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 801718e:	e032      	b.n	80171f6 <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017190:	4b2d      	ldr	r3, [pc, #180]	; (8017248 <ip_reass_free_complete_datagram+0xf0>)
 8017192:	22ab      	movs	r2, #171	; 0xab
 8017194:	492f      	ldr	r1, [pc, #188]	; (8017254 <ip_reass_free_complete_datagram+0xfc>)
 8017196:	482e      	ldr	r0, [pc, #184]	; (8017250 <ip_reass_free_complete_datagram+0xf8>)
 8017198:	f008 f8cb 	bl	801f332 <iprintf>
 801719c:	e7e2      	b.n	8017164 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80171a4:	4643      	mov	r3, r8
 80171a6:	6862      	ldr	r2, [r4, #4]
 80171a8:	f853 1f08 	ldr.w	r1, [r3, #8]!
 80171ac:	685e      	ldr	r6, [r3, #4]
 80171ae:	689d      	ldr	r5, [r3, #8]
 80171b0:	68d8      	ldr	r0, [r3, #12]
 80171b2:	6011      	str	r1, [r2, #0]
 80171b4:	6056      	str	r6, [r2, #4]
 80171b6:	6095      	str	r5, [r2, #8]
 80171b8:	60d0      	str	r0, [r2, #12]
 80171ba:	6919      	ldr	r1, [r3, #16]
 80171bc:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80171be:	2101      	movs	r1, #1
 80171c0:	4620      	mov	r0, r4
 80171c2:	f7ff fd0f 	bl	8016be4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80171c6:	4620      	mov	r0, r4
 80171c8:	f001 f9f8 	bl	80185bc <pbuf_clen>
 80171cc:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80171ce:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80171d2:	da03      	bge.n	80171dc <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 80171d4:	4620      	mov	r0, r4
 80171d6:	f001 f82b 	bl	8018230 <pbuf_free>
 80171da:	e7d6      	b.n	801718a <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80171dc:	4b1a      	ldr	r3, [pc, #104]	; (8017248 <ip_reass_free_complete_datagram+0xf0>)
 80171de:	22bc      	movs	r2, #188	; 0xbc
 80171e0:	491d      	ldr	r1, [pc, #116]	; (8017258 <ip_reass_free_complete_datagram+0x100>)
 80171e2:	481b      	ldr	r0, [pc, #108]	; (8017250 <ip_reass_free_complete_datagram+0xf8>)
 80171e4:	f008 f8a5 	bl	801f332 <iprintf>
 80171e8:	e7f4      	b.n	80171d4 <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed += clen;
 80171ea:	4435      	add	r5, r6
 80171ec:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 80171ee:	4620      	mov	r0, r4
 80171f0:	f001 f81e 	bl	8018230 <pbuf_free>
    p = iprh->next_pbuf;
 80171f4:	463c      	mov	r4, r7
  while (p != NULL) {
 80171f6:	b184      	cbz	r4, 801721a <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 80171f8:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 80171fa:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 80171fc:	4620      	mov	r0, r4
 80171fe:	f001 f9dd 	bl	80185bc <pbuf_clen>
 8017202:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017204:	1833      	adds	r3, r6, r0
 8017206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801720a:	dbee      	blt.n	80171ea <ip_reass_free_complete_datagram+0x92>
 801720c:	4b0e      	ldr	r3, [pc, #56]	; (8017248 <ip_reass_free_complete_datagram+0xf0>)
 801720e:	22cc      	movs	r2, #204	; 0xcc
 8017210:	4911      	ldr	r1, [pc, #68]	; (8017258 <ip_reass_free_complete_datagram+0x100>)
 8017212:	480f      	ldr	r0, [pc, #60]	; (8017250 <ip_reass_free_complete_datagram+0xf8>)
 8017214:	f008 f88d 	bl	801f332 <iprintf>
 8017218:	e7e7      	b.n	80171ea <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 801721a:	4649      	mov	r1, r9
 801721c:	4640      	mov	r0, r8
 801721e:	f7ff ff77 	bl	8017110 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8017222:	4b0e      	ldr	r3, [pc, #56]	; (801725c <ip_reass_free_complete_datagram+0x104>)
 8017224:	881b      	ldrh	r3, [r3, #0]
 8017226:	429e      	cmp	r6, r3
 8017228:	d806      	bhi.n	8017238 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount -= pbufs_freed;
 801722a:	4a0c      	ldr	r2, [pc, #48]	; (801725c <ip_reass_free_complete_datagram+0x104>)
 801722c:	8813      	ldrh	r3, [r2, #0]
 801722e:	1b9b      	subs	r3, r3, r6
 8017230:	8013      	strh	r3, [r2, #0]
}
 8017232:	4630      	mov	r0, r6
 8017234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8017238:	4b03      	ldr	r3, [pc, #12]	; (8017248 <ip_reass_free_complete_datagram+0xf0>)
 801723a:	22d2      	movs	r2, #210	; 0xd2
 801723c:	4908      	ldr	r1, [pc, #32]	; (8017260 <ip_reass_free_complete_datagram+0x108>)
 801723e:	4804      	ldr	r0, [pc, #16]	; (8017250 <ip_reass_free_complete_datagram+0xf8>)
 8017240:	f008 f877 	bl	801f332 <iprintf>
 8017244:	e7f1      	b.n	801722a <ip_reass_free_complete_datagram+0xd2>
 8017246:	bf00      	nop
 8017248:	08024314 	.word	0x08024314
 801724c:	08024378 	.word	0x08024378
 8017250:	08020b90 	.word	0x08020b90
 8017254:	0802436c 	.word	0x0802436c
 8017258:	0802438c 	.word	0x0802438c
 801725c:	20009478 	.word	0x20009478
 8017260:	080243ac 	.word	0x080243ac

08017264 <ip_reass_remove_oldest_datagram>:
{
 8017264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017268:	4605      	mov	r5, r0
 801726a:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801726c:	2600      	movs	r6, #0
 801726e:	e02a      	b.n	80172c6 <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017270:	699a      	ldr	r2, [r3, #24]
 8017272:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8017276:	4562      	cmp	r2, ip
 8017278:	d110      	bne.n	801729c <ip_reass_remove_oldest_datagram+0x38>
 801727a:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 801727e:	88aa      	ldrh	r2, [r5, #4]
 8017280:	4594      	cmp	ip, r2
 8017282:	d10b      	bne.n	801729c <ip_reass_remove_oldest_datagram+0x38>
 8017284:	e001      	b.n	801728a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 8017286:	4671      	mov	r1, lr
          oldest = r;
 8017288:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801728a:	681a      	ldr	r2, [r3, #0]
 801728c:	b18a      	cbz	r2, 80172b2 <ip_reass_remove_oldest_datagram+0x4e>
 801728e:	469e      	mov	lr, r3
 8017290:	4613      	mov	r3, r2
    while (r != NULL) {
 8017292:	b183      	cbz	r3, 80172b6 <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017294:	68ea      	ldr	r2, [r5, #12]
 8017296:	695f      	ldr	r7, [r3, #20]
 8017298:	4297      	cmp	r7, r2
 801729a:	d0e9      	beq.n	8017270 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 801729c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 801729e:	2800      	cmp	r0, #0
 80172a0:	d0f1      	beq.n	8017286 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 80172a2:	f893 c01f 	ldrb.w	ip, [r3, #31]
 80172a6:	7fc2      	ldrb	r2, [r0, #31]
 80172a8:	4594      	cmp	ip, r2
 80172aa:	d8ee      	bhi.n	801728a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 80172ac:	4671      	mov	r1, lr
          oldest = r;
 80172ae:	4618      	mov	r0, r3
 80172b0:	e7eb      	b.n	801728a <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 80172b2:	4673      	mov	r3, lr
 80172b4:	e7eb      	b.n	801728e <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 80172b6:	b110      	cbz	r0, 80172be <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80172b8:	f7ff ff4e 	bl	8017158 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80172bc:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80172be:	4546      	cmp	r6, r8
 80172c0:	da08      	bge.n	80172d4 <ip_reass_remove_oldest_datagram+0x70>
 80172c2:	2c01      	cmp	r4, #1
 80172c4:	dd06      	ble.n	80172d4 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 80172c6:	4b05      	ldr	r3, [pc, #20]	; (80172dc <ip_reass_remove_oldest_datagram+0x78>)
 80172c8:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 80172ca:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80172cc:	4621      	mov	r1, r4
    prev = NULL;
 80172ce:	46a6      	mov	lr, r4
    oldest = NULL;
 80172d0:	4620      	mov	r0, r4
    while (r != NULL) {
 80172d2:	e7de      	b.n	8017292 <ip_reass_remove_oldest_datagram+0x2e>
}
 80172d4:	4630      	mov	r0, r6
 80172d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172da:	bf00      	nop
 80172dc:	2000947c 	.word	0x2000947c

080172e0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80172e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80172e2:	4604      	mov	r4, r0
 80172e4:	b120      	cbz	r0, 80172f0 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80172e6:	4621      	mov	r1, r4
 80172e8:	2004      	movs	r0, #4
 80172ea:	f000 fdd1 	bl	8017e90 <memp_free>
 80172ee:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80172f0:	4b03      	ldr	r3, [pc, #12]	; (8017300 <ip_frag_free_pbuf_custom_ref+0x20>)
 80172f2:	f240 22ae 	movw	r2, #686	; 0x2ae
 80172f6:	4903      	ldr	r1, [pc, #12]	; (8017304 <ip_frag_free_pbuf_custom_ref+0x24>)
 80172f8:	4803      	ldr	r0, [pc, #12]	; (8017308 <ip_frag_free_pbuf_custom_ref+0x28>)
 80172fa:	f008 f81a 	bl	801f332 <iprintf>
 80172fe:	e7f2      	b.n	80172e6 <ip_frag_free_pbuf_custom_ref+0x6>
 8017300:	08024314 	.word	0x08024314
 8017304:	08020e78 	.word	0x08020e78
 8017308:	08020b90 	.word	0x08020b90

0801730c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801730c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801730e:	4604      	mov	r4, r0
 8017310:	b138      	cbz	r0, 8017322 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8017312:	6960      	ldr	r0, [r4, #20]
 8017314:	b108      	cbz	r0, 801731a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8017316:	f000 ff8b 	bl	8018230 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801731a:	4620      	mov	r0, r4
 801731c:	f7ff ffe0 	bl	80172e0 <ip_frag_free_pbuf_custom_ref>
 8017320:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017322:	4b04      	ldr	r3, [pc, #16]	; (8017334 <ipfrag_free_pbuf_custom+0x28>)
 8017324:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8017328:	4903      	ldr	r1, [pc, #12]	; (8017338 <ipfrag_free_pbuf_custom+0x2c>)
 801732a:	4804      	ldr	r0, [pc, #16]	; (801733c <ipfrag_free_pbuf_custom+0x30>)
 801732c:	f008 f801 	bl	801f332 <iprintf>
 8017330:	e7ef      	b.n	8017312 <ipfrag_free_pbuf_custom+0x6>
 8017332:	bf00      	nop
 8017334:	08024314 	.word	0x08024314
 8017338:	080243c8 	.word	0x080243c8
 801733c:	08020b90 	.word	0x08020b90

08017340 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 8017340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017344:	4680      	mov	r8, r0
 8017346:	460f      	mov	r7, r1
 8017348:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 801734a:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801734c:	8860      	ldrh	r0, [r4, #2]
 801734e:	f7fe fea8 	bl	80160a2 <lwip_htons>
 8017352:	7826      	ldrb	r6, [r4, #0]
 8017354:	f006 060f 	and.w	r6, r6, #15
 8017358:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 801735c:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801735e:	88e0      	ldrh	r0, [r4, #6]
 8017360:	f7fe fe9f 	bl	80160a2 <lwip_htons>
 8017364:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017368:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 801736a:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 801736c:	2400      	movs	r4, #0
 801736e:	702c      	strb	r4, [r5, #0]
 8017370:	706c      	strb	r4, [r5, #1]
 8017372:	70ac      	strb	r4, [r5, #2]
 8017374:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 8017376:	80a8      	strh	r0, [r5, #4]
  iprh->end = offset + len;
 8017378:	eb06 0e00 	add.w	lr, r6, r0
 801737c:	fa1f fe8e 	uxth.w	lr, lr
 8017380:	f8a5 e006 	strh.w	lr, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 8017384:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 8017388:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 801738a:	e033      	b.n	80173f4 <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 801738c:	6029      	str	r1, [r5, #0]
      if (iprh_prev != NULL) {
 801738e:	b34c      	cbz	r4, 80173e4 <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017390:	88e2      	ldrh	r2, [r4, #6]
 8017392:	4290      	cmp	r0, r2
 8017394:	d37e      	bcc.n	8017494 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
 8017396:	889b      	ldrh	r3, [r3, #4]
 8017398:	459e      	cmp	lr, r3
 801739a:	d87b      	bhi.n	8017494 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        iprh_prev->next_pbuf = new_p;
 801739c:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 801739e:	88ab      	ldrh	r3, [r5, #4]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d000      	beq.n	80173a6 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 80173a4:	2600      	movs	r6, #0
  if (q == NULL) {
 80173a6:	2900      	cmp	r1, #0
 80173a8:	d036      	beq.n	8017418 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80173aa:	f1b9 0f00 	cmp.w	r9, #0
 80173ae:	d104      	bne.n	80173ba <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 80173b0:	f898 301e 	ldrb.w	r3, [r8, #30]
 80173b4:	f013 0f01 	tst.w	r3, #1
 80173b8:	d07a      	beq.n	80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
    if (valid) {
 80173ba:	2e00      	cmp	r6, #0
 80173bc:	d067      	beq.n	801748e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80173be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d060      	beq.n	8017488 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 80173c6:	6858      	ldr	r0, [r3, #4]
 80173c8:	8883      	ldrh	r3, [r0, #4]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d15e      	bne.n	801748c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 80173ce:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 80173d0:	2a00      	cmp	r2, #0
 80173d2:	d044      	beq.n	801745e <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 80173d4:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 80173d6:	88e9      	ldrh	r1, [r5, #6]
 80173d8:	889a      	ldrh	r2, [r3, #4]
 80173da:	4291      	cmp	r1, r2
 80173dc:	d13d      	bne.n	801745a <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 80173de:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 80173e0:	461d      	mov	r5, r3
 80173e2:	e7f5      	b.n	80173d0 <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 80173e4:	889b      	ldrh	r3, [r3, #4]
 80173e6:	459e      	cmp	lr, r3
 80173e8:	d854      	bhi.n	8017494 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        ipr->p = new_p;
 80173ea:	f8c8 7004 	str.w	r7, [r8, #4]
 80173ee:	e7da      	b.n	80173a6 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 80173f0:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 80173f2:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 80173f4:	2900      	cmp	r1, #0
 80173f6:	d0d6      	beq.n	80173a6 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80173f8:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80173fa:	889a      	ldrh	r2, [r3, #4]
 80173fc:	4290      	cmp	r0, r2
 80173fe:	d3c5      	bcc.n	801738c <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 8017400:	4290      	cmp	r0, r2
 8017402:	d047      	beq.n	8017494 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start < iprh_tmp->end) {
 8017404:	88d9      	ldrh	r1, [r3, #6]
 8017406:	4288      	cmp	r0, r1
 8017408:	d344      	bcc.n	8017494 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      if (iprh_prev != NULL) {
 801740a:	2c00      	cmp	r4, #0
 801740c:	d0f0      	beq.n	80173f0 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 801740e:	88e1      	ldrh	r1, [r4, #6]
 8017410:	428a      	cmp	r2, r1
 8017412:	d0ed      	beq.n	80173f0 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 8017414:	2600      	movs	r6, #0
 8017416:	e7eb      	b.n	80173f0 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 8017418:	b194      	cbz	r4, 8017440 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801741a:	88e2      	ldrh	r2, [r4, #6]
 801741c:	88ab      	ldrh	r3, [r5, #4]
 801741e:	429a      	cmp	r2, r3
 8017420:	d806      	bhi.n	8017430 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 8017422:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 8017424:	88e2      	ldrh	r2, [r4, #6]
 8017426:	88ab      	ldrh	r3, [r5, #4]
 8017428:	429a      	cmp	r2, r3
 801742a:	d0be      	beq.n	80173aa <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 801742c:	2600      	movs	r6, #0
 801742e:	e7bc      	b.n	80173aa <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017430:	4b21      	ldr	r3, [pc, #132]	; (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8017432:	f240 12ab 	movw	r2, #427	; 0x1ab
 8017436:	4921      	ldr	r1, [pc, #132]	; (80174bc <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 8017438:	4821      	ldr	r0, [pc, #132]	; (80174c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 801743a:	f007 ff7a 	bl	801f332 <iprintf>
 801743e:	e7f0      	b.n	8017422 <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017440:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017444:	b133      	cbz	r3, 8017454 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 8017446:	4b1c      	ldr	r3, [pc, #112]	; (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8017448:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801744c:	491d      	ldr	r1, [pc, #116]	; (80174c4 <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 801744e:	481c      	ldr	r0, [pc, #112]	; (80174c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8017450:	f007 ff6f 	bl	801f332 <iprintf>
      ipr->p = new_p;
 8017454:	f8c8 7004 	str.w	r7, [r8, #4]
 8017458:	e7a7      	b.n	80173aa <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 801745a:	461d      	mov	r5, r3
            valid = 0;
 801745c:	2600      	movs	r6, #0
        if (valid) {
 801745e:	b1b6      	cbz	r6, 801748e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8017460:	4285      	cmp	r5, r0
 8017462:	d009      	beq.n	8017478 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017464:	682b      	ldr	r3, [r5, #0]
 8017466:	b193      	cbz	r3, 801748e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 8017468:	4b13      	ldr	r3, [pc, #76]	; (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 801746a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801746e:	4916      	ldr	r1, [pc, #88]	; (80174c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 8017470:	4813      	ldr	r0, [pc, #76]	; (80174c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8017472:	f007 ff5e 	bl	801f332 <iprintf>
 8017476:	e00a      	b.n	801748e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8017478:	4b0f      	ldr	r3, [pc, #60]	; (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 801747a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801747e:	4913      	ldr	r1, [pc, #76]	; (80174cc <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 8017480:	480f      	ldr	r0, [pc, #60]	; (80174c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8017482:	f007 ff56 	bl	801f332 <iprintf>
 8017486:	e7ed      	b.n	8017464 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 8017488:	2600      	movs	r6, #0
 801748a:	e000      	b.n	801748e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 801748c:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801748e:	4630      	mov	r0, r6
 8017490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8017494:	4638      	mov	r0, r7
 8017496:	f001 f891 	bl	80185bc <pbuf_clen>
 801749a:	4a0d      	ldr	r2, [pc, #52]	; (80174d0 <ip_reass_chain_frag_into_datagram_and_validate+0x190>)
 801749c:	8813      	ldrh	r3, [r2, #0]
 801749e:	1a18      	subs	r0, r3, r0
 80174a0:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 80174a2:	4638      	mov	r0, r7
 80174a4:	f000 fec4 	bl	8018230 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174a8:	f04f 30ff 	mov.w	r0, #4294967295
 80174ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80174b0:	4648      	mov	r0, r9
}
 80174b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174b6:	bf00      	nop
 80174b8:	08024314 	.word	0x08024314
 80174bc:	08024288 	.word	0x08024288
 80174c0:	08020b90 	.word	0x08020b90
 80174c4:	080242a8 	.word	0x080242a8
 80174c8:	080242f0 	.word	0x080242f0
 80174cc:	080242e0 	.word	0x080242e0
 80174d0:	20009478 	.word	0x20009478

080174d4 <ip_frag_alloc_pbuf_custom_ref>:
{
 80174d4:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80174d6:	2004      	movs	r0, #4
 80174d8:	f000 fcc0 	bl	8017e5c <memp_malloc>
}
 80174dc:	bd08      	pop	{r3, pc}
	...

080174e0 <ip_reass_enqueue_new_datagram>:
{
 80174e0:	b570      	push	{r4, r5, r6, lr}
 80174e2:	4605      	mov	r5, r0
 80174e4:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80174e6:	2003      	movs	r0, #3
 80174e8:	f000 fcb8 	bl	8017e5c <memp_malloc>
  if (ipr == NULL) {
 80174ec:	4604      	mov	r4, r0
 80174ee:	b1b0      	cbz	r0, 801751e <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80174f0:	2220      	movs	r2, #32
 80174f2:	2100      	movs	r1, #0
 80174f4:	4620      	mov	r0, r4
 80174f6:	f008 fd6b 	bl	801ffd0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80174fa:	2303      	movs	r3, #3
 80174fc:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80174fe:	4b0f      	ldr	r3, [pc, #60]	; (801753c <ip_reass_enqueue_new_datagram+0x5c>)
 8017500:	681a      	ldr	r2, [r3, #0]
 8017502:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 8017504:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017506:	682a      	ldr	r2, [r5, #0]
 8017508:	686e      	ldr	r6, [r5, #4]
 801750a:	68a8      	ldr	r0, [r5, #8]
 801750c:	68e9      	ldr	r1, [r5, #12]
 801750e:	60a2      	str	r2, [r4, #8]
 8017510:	60e6      	str	r6, [r4, #12]
 8017512:	6120      	str	r0, [r4, #16]
 8017514:	6161      	str	r1, [r4, #20]
 8017516:	692a      	ldr	r2, [r5, #16]
 8017518:	61a2      	str	r2, [r4, #24]
}
 801751a:	4620      	mov	r0, r4
 801751c:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801751e:	4631      	mov	r1, r6
 8017520:	4628      	mov	r0, r5
 8017522:	f7ff fe9f 	bl	8017264 <ip_reass_remove_oldest_datagram>
 8017526:	4286      	cmp	r6, r0
 8017528:	dd02      	ble.n	8017530 <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 801752a:	2c00      	cmp	r4, #0
 801752c:	d1e0      	bne.n	80174f0 <ip_reass_enqueue_new_datagram+0x10>
 801752e:	e7f4      	b.n	801751a <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017530:	2003      	movs	r0, #3
 8017532:	f000 fc93 	bl	8017e5c <memp_malloc>
 8017536:	4604      	mov	r4, r0
 8017538:	e7f7      	b.n	801752a <ip_reass_enqueue_new_datagram+0x4a>
 801753a:	bf00      	nop
 801753c:	2000947c 	.word	0x2000947c

08017540 <ip_reass_tmr>:
{
 8017540:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8017542:	4b09      	ldr	r3, [pc, #36]	; (8017568 <ip_reass_tmr+0x28>)
 8017544:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8017546:	2400      	movs	r4, #0
  while (r != NULL) {
 8017548:	e004      	b.n	8017554 <ip_reass_tmr+0x14>
      r = r->next;
 801754a:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 801754c:	4621      	mov	r1, r4
 801754e:	f7ff fe03 	bl	8017158 <ip_reass_free_complete_datagram>
      r = r->next;
 8017552:	4628      	mov	r0, r5
  while (r != NULL) {
 8017554:	b138      	cbz	r0, 8017566 <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 8017556:	7fc3      	ldrb	r3, [r0, #31]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d0f6      	beq.n	801754a <ip_reass_tmr+0xa>
      r->timer--;
 801755c:	3b01      	subs	r3, #1
 801755e:	77c3      	strb	r3, [r0, #31]
      prev = r;
 8017560:	4604      	mov	r4, r0
      r = r->next;
 8017562:	6800      	ldr	r0, [r0, #0]
 8017564:	e7f6      	b.n	8017554 <ip_reass_tmr+0x14>
}
 8017566:	bd38      	pop	{r3, r4, r5, pc}
 8017568:	2000947c 	.word	0x2000947c

0801756c <ip4_reass>:
{
 801756c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017570:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 8017572:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8017574:	782b      	ldrb	r3, [r5, #0]
 8017576:	f003 030f 	and.w	r3, r3, #15
 801757a:	2b05      	cmp	r3, #5
 801757c:	d124      	bne.n	80175c8 <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801757e:	88e8      	ldrh	r0, [r5, #6]
 8017580:	f7fe fd8f 	bl	80160a2 <lwip_htons>
 8017584:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017588:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801758a:	8868      	ldrh	r0, [r5, #2]
 801758c:	f7fe fd89 	bl	80160a2 <lwip_htons>
 8017590:	782e      	ldrb	r6, [r5, #0]
 8017592:	f006 060f 	and.w	r6, r6, #15
 8017596:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 801759a:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 801759c:	4648      	mov	r0, r9
 801759e:	f001 f80d 	bl	80185bc <pbuf_clen>
 80175a2:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80175a4:	4b59      	ldr	r3, [pc, #356]	; (801770c <ip4_reass+0x1a0>)
 80175a6:	881b      	ldrh	r3, [r3, #0]
 80175a8:	4403      	add	r3, r0
 80175aa:	2b0a      	cmp	r3, #10
 80175ac:	dc02      	bgt.n	80175b4 <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80175ae:	4b58      	ldr	r3, [pc, #352]	; (8017710 <ip4_reass+0x1a4>)
 80175b0:	681c      	ldr	r4, [r3, #0]
 80175b2:	e011      	b.n	80175d8 <ip4_reass+0x6c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80175b4:	4601      	mov	r1, r0
 80175b6:	4628      	mov	r0, r5
 80175b8:	f7ff fe54 	bl	8017264 <ip_reass_remove_oldest_datagram>
 80175bc:	b120      	cbz	r0, 80175c8 <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80175be:	4b53      	ldr	r3, [pc, #332]	; (801770c <ip4_reass+0x1a0>)
 80175c0:	881b      	ldrh	r3, [r3, #0]
 80175c2:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80175c4:	2b0a      	cmp	r3, #10
 80175c6:	ddf2      	ble.n	80175ae <ip4_reass+0x42>
  pbuf_free(p);
 80175c8:	4648      	mov	r0, r9
 80175ca:	f000 fe31 	bl	8018230 <pbuf_free>
  return NULL;
 80175ce:	2700      	movs	r7, #0
}
 80175d0:	4638      	mov	r0, r7
 80175d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80175d6:	6824      	ldr	r4, [r4, #0]
 80175d8:	b15c      	cbz	r4, 80175f2 <ip4_reass+0x86>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80175da:	6962      	ldr	r2, [r4, #20]
 80175dc:	68eb      	ldr	r3, [r5, #12]
 80175de:	429a      	cmp	r2, r3
 80175e0:	d1f9      	bne.n	80175d6 <ip4_reass+0x6a>
 80175e2:	69a2      	ldr	r2, [r4, #24]
 80175e4:	692b      	ldr	r3, [r5, #16]
 80175e6:	429a      	cmp	r2, r3
 80175e8:	d1f5      	bne.n	80175d6 <ip4_reass+0x6a>
 80175ea:	89a2      	ldrh	r2, [r4, #12]
 80175ec:	88ab      	ldrh	r3, [r5, #4]
 80175ee:	429a      	cmp	r2, r3
 80175f0:	d1f1      	bne.n	80175d6 <ip4_reass+0x6a>
  if (ipr == NULL) {
 80175f2:	2c00      	cmp	r4, #0
 80175f4:	d048      	beq.n	8017688 <ip4_reass+0x11c>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80175f6:	88e8      	ldrh	r0, [r5, #6]
 80175f8:	f7fe fd53 	bl	80160a2 <lwip_htons>
 80175fc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017600:	2800      	cmp	r0, #0
 8017602:	d049      	beq.n	8017698 <ip4_reass+0x12c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017604:	88ed      	ldrh	r5, [r5, #6]
 8017606:	f005 0520 	and.w	r5, r5, #32
 801760a:	2d00      	cmp	r5, #0
 801760c:	bf0c      	ite	eq
 801760e:	2201      	moveq	r2, #1
 8017610:	2200      	movne	r2, #0
  if (is_last) {
 8017612:	d107      	bne.n	8017624 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8017614:	19bb      	adds	r3, r7, r6
 8017616:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017618:	429f      	cmp	r7, r3
 801761a:	d8d5      	bhi.n	80175c8 <ip4_reass+0x5c>
 801761c:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 8017620:	428b      	cmp	r3, r1
 8017622:	d8d1      	bhi.n	80175c8 <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017624:	4649      	mov	r1, r9
 8017626:	4620      	mov	r0, r4
 8017628:	f7ff fe8a 	bl	8017340 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801762c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017630:	d0ca      	beq.n	80175c8 <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017632:	4b36      	ldr	r3, [pc, #216]	; (801770c <ip4_reass+0x1a0>)
 8017634:	881a      	ldrh	r2, [r3, #0]
 8017636:	4490      	add	r8, r2
 8017638:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 801763c:	b92d      	cbnz	r5, 801764a <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 801763e:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 8017640:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017642:	7fa3      	ldrb	r3, [r4, #30]
 8017644:	f043 0301 	orr.w	r3, r3, #1
 8017648:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801764a:	2801      	cmp	r0, #1
 801764c:	d15b      	bne.n	8017706 <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 801764e:	8ba3      	ldrh	r3, [r4, #28]
 8017650:	3314      	adds	r3, #20
 8017652:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8017654:	6863      	ldr	r3, [r4, #4]
 8017656:	685e      	ldr	r6, [r3, #4]
 8017658:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801765a:	4623      	mov	r3, r4
 801765c:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8017660:	685f      	ldr	r7, [r3, #4]
 8017662:	6898      	ldr	r0, [r3, #8]
 8017664:	68d9      	ldr	r1, [r3, #12]
 8017666:	6032      	str	r2, [r6, #0]
 8017668:	6077      	str	r7, [r6, #4]
 801766a:	60b0      	str	r0, [r6, #8]
 801766c:	60f1      	str	r1, [r6, #12]
 801766e:	691a      	ldr	r2, [r3, #16]
 8017670:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8017672:	8ba0      	ldrh	r0, [r4, #28]
 8017674:	f7fe fd15 	bl	80160a2 <lwip_htons>
 8017678:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801767a:	2300      	movs	r3, #0
 801767c:	71b3      	strb	r3, [r6, #6]
 801767e:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017680:	72b3      	strb	r3, [r6, #10]
 8017682:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8017684:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8017686:	e026      	b.n	80176d6 <ip4_reass+0x16a>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017688:	4641      	mov	r1, r8
 801768a:	4628      	mov	r0, r5
 801768c:	f7ff ff28 	bl	80174e0 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 8017690:	4604      	mov	r4, r0
 8017692:	2800      	cmp	r0, #0
 8017694:	d1b6      	bne.n	8017604 <ip4_reass+0x98>
 8017696:	e797      	b.n	80175c8 <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017698:	89e0      	ldrh	r0, [r4, #14]
 801769a:	f7fe fd02 	bl	80160a2 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801769e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80176a2:	2800      	cmp	r0, #0
 80176a4:	d0ae      	beq.n	8017604 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80176a6:	682a      	ldr	r2, [r5, #0]
 80176a8:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80176ac:	68a8      	ldr	r0, [r5, #8]
 80176ae:	68e9      	ldr	r1, [r5, #12]
 80176b0:	60a2      	str	r2, [r4, #8]
 80176b2:	f8c4 e00c 	str.w	lr, [r4, #12]
 80176b6:	6120      	str	r0, [r4, #16]
 80176b8:	6161      	str	r1, [r4, #20]
 80176ba:	692a      	ldr	r2, [r5, #16]
 80176bc:	61a2      	str	r2, [r4, #24]
 80176be:	e7a1      	b.n	8017604 <ip4_reass+0x98>
      iprh = (struct ip_reass_helper*)r->payload;
 80176c0:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 80176c2:	f06f 0113 	mvn.w	r1, #19
 80176c6:	4628      	mov	r0, r5
 80176c8:	f000 fda8 	bl	801821c <pbuf_header>
      pbuf_cat(p, r);
 80176cc:	4629      	mov	r1, r5
 80176ce:	4638      	mov	r0, r7
 80176d0:	f000 ff9a 	bl	8018608 <pbuf_cat>
      r = iprh->next_pbuf;
 80176d4:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 80176d6:	2d00      	cmp	r5, #0
 80176d8:	d1f2      	bne.n	80176c0 <ip4_reass+0x154>
    if (ipr == reassdatagrams) {
 80176da:	4b0d      	ldr	r3, [pc, #52]	; (8017710 <ip4_reass+0x1a4>)
 80176dc:	6819      	ldr	r1, [r3, #0]
 80176de:	428c      	cmp	r4, r1
 80176e0:	d005      	beq.n	80176ee <ip4_reass+0x182>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80176e2:	b129      	cbz	r1, 80176f0 <ip4_reass+0x184>
        if (ipr_prev->next == ipr) {
 80176e4:	680b      	ldr	r3, [r1, #0]
 80176e6:	429c      	cmp	r4, r3
 80176e8:	d002      	beq.n	80176f0 <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80176ea:	4619      	mov	r1, r3
 80176ec:	e7f9      	b.n	80176e2 <ip4_reass+0x176>
      ipr_prev = NULL;
 80176ee:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80176f0:	4620      	mov	r0, r4
 80176f2:	f7ff fd0d 	bl	8017110 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 80176f6:	4638      	mov	r0, r7
 80176f8:	f000 ff60 	bl	80185bc <pbuf_clen>
 80176fc:	4a03      	ldr	r2, [pc, #12]	; (801770c <ip4_reass+0x1a0>)
 80176fe:	8813      	ldrh	r3, [r2, #0]
 8017700:	1a18      	subs	r0, r3, r0
 8017702:	8010      	strh	r0, [r2, #0]
    return p;
 8017704:	e764      	b.n	80175d0 <ip4_reass+0x64>
  return NULL;
 8017706:	2700      	movs	r7, #0
 8017708:	e762      	b.n	80175d0 <ip4_reass+0x64>
 801770a:	bf00      	nop
 801770c:	20009478 	.word	0x20009478
 8017710:	2000947c 	.word	0x2000947c

08017714 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017718:	b08d      	sub	sp, #52	; 0x34
 801771a:	4605      	mov	r5, r0
 801771c:	9107      	str	r1, [sp, #28]
 801771e:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8017720:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8017722:	3b14      	subs	r3, #20
 8017724:	d420      	bmi.n	8017768 <ip4_frag+0x54>
 8017726:	10db      	asrs	r3, r3, #3
 8017728:	9309      	str	r3, [sp, #36]	; 0x24
 801772a:	b29b      	uxth	r3, r3
 801772c:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801772e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8017732:	f89a 3000 	ldrb.w	r3, [sl]
 8017736:	f003 030f 	and.w	r3, r3, #15
 801773a:	2b05      	cmp	r3, #5
 801773c:	d116      	bne.n	801776c <ip4_frag+0x58>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801773e:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8017742:	f7fe fcae 	bl	80160a2 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8017746:	f3c0 030c 	ubfx	r3, r0, #0, #13
 801774a:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801774c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8017750:	d116      	bne.n	8017780 <ip4_frag+0x6c>

  left = p->tot_len - IP_HLEN;
 8017752:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8017756:	f1a9 0914 	sub.w	r9, r9, #20
 801775a:	fa1f fb89 	uxth.w	fp, r9
  u16_t poff = IP_HLEN;
 801775e:	f04f 0814 	mov.w	r8, #20
  u16_t newpbuflen = 0;
 8017762:	2400      	movs	r4, #0
 8017764:	46d9      	mov	r9, fp

  while (left) {
 8017766:	e08c      	b.n	8017882 <ip4_frag+0x16e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8017768:	3307      	adds	r3, #7
 801776a:	e7dc      	b.n	8017726 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801776c:	4b5e      	ldr	r3, [pc, #376]	; (80178e8 <ip4_frag+0x1d4>)
 801776e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8017772:	495e      	ldr	r1, [pc, #376]	; (80178ec <ip4_frag+0x1d8>)
 8017774:	485e      	ldr	r0, [pc, #376]	; (80178f0 <ip4_frag+0x1dc>)
 8017776:	f007 fddc 	bl	801f332 <iprintf>
 801777a:	f06f 0005 	mvn.w	r0, #5
 801777e:	e043      	b.n	8017808 <ip4_frag+0xf4>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8017780:	4b59      	ldr	r3, [pc, #356]	; (80178e8 <ip4_frag+0x1d4>)
 8017782:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017786:	495b      	ldr	r1, [pc, #364]	; (80178f4 <ip4_frag+0x1e0>)
 8017788:	4859      	ldr	r0, [pc, #356]	; (80178f0 <ip4_frag+0x1dc>)
 801778a:	f007 fdd2 	bl	801f332 <iprintf>
 801778e:	f06f 0005 	mvn.w	r0, #5
 8017792:	e039      	b.n	8017808 <ip4_frag+0xf4>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017794:	4b54      	ldr	r3, [pc, #336]	; (80178e8 <ip4_frag+0x1d4>)
 8017796:	f240 3209 	movw	r2, #777	; 0x309
 801779a:	4957      	ldr	r1, [pc, #348]	; (80178f8 <ip4_frag+0x1e4>)
 801779c:	4854      	ldr	r0, [pc, #336]	; (80178f0 <ip4_frag+0x1dc>)
 801779e:	f007 fdc8 	bl	801f332 <iprintf>
 80177a2:	e086      	b.n	80178b2 <ip4_frag+0x19e>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80177a4:	f7ff fe96 	bl	80174d4 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 80177a8:	4607      	mov	r7, r0
 80177aa:	b340      	cbz	r0, 80177fe <ip4_frag+0xea>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 80177ac:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80177ae:	4443      	add	r3, r8
 80177b0:	9401      	str	r4, [sp, #4]
 80177b2:	9300      	str	r3, [sp, #0]
 80177b4:	4603      	mov	r3, r0
 80177b6:	2202      	movs	r2, #2
 80177b8:	4621      	mov	r1, r4
 80177ba:	2004      	movs	r0, #4
 80177bc:	f000 fcf2 	bl	80181a4 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80177c0:	9003      	str	r0, [sp, #12]
 80177c2:	b320      	cbz	r0, 801780e <ip4_frag+0xfa>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80177c4:	4628      	mov	r0, r5
 80177c6:	f000 ff03 	bl	80185d0 <pbuf_ref>
      pcr->original = p;
 80177ca:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80177cc:	4b4b      	ldr	r3, [pc, #300]	; (80178fc <ip4_frag+0x1e8>)
 80177ce:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80177d0:	9903      	ldr	r1, [sp, #12]
 80177d2:	9804      	ldr	r0, [sp, #16]
 80177d4:	f000 ff18 	bl	8018608 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80177d8:	1b36      	subs	r6, r6, r4
 80177da:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 80177dc:	b116      	cbz	r6, 80177e4 <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 80177de:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 80177e0:	f04f 0800 	mov.w	r8, #0
    while (left_to_copy) {
 80177e4:	b1e6      	cbz	r6, 8017820 <ip4_frag+0x10c>
      u16_t plen = p->len - poff;
 80177e6:	896c      	ldrh	r4, [r5, #10]
 80177e8:	eba4 0408 	sub.w	r4, r4, r8
 80177ec:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80177ee:	42b4      	cmp	r4, r6
 80177f0:	bf28      	it	cs
 80177f2:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 80177f4:	2c00      	cmp	r4, #0
 80177f6:	d1d5      	bne.n	80177a4 <ip4_frag+0x90>
        p = p->next;
 80177f8:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 80177fa:	46a0      	mov	r8, r4
        continue;
 80177fc:	e7f2      	b.n	80177e4 <ip4_frag+0xd0>
        pbuf_free(rambuf);
 80177fe:	9804      	ldr	r0, [sp, #16]
 8017800:	f000 fd16 	bl	8018230 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017804:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017808:	b00d      	add	sp, #52	; 0x34
 801780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 801780e:	4638      	mov	r0, r7
 8017810:	f7ff fd66 	bl	80172e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017814:	9804      	ldr	r0, [sp, #16]
 8017816:	f000 fd0b 	bl	8018230 <pbuf_free>
  return ERR_MEM;
 801781a:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 801781e:	e7f3      	b.n	8017808 <ip4_frag+0xf4>
    poff += newpbuflen;
 8017820:	44a0      	add	r8, r4
 8017822:	fa1f f888 	uxth.w	r8, r8
    last = (left <= netif->mtu - IP_HLEN);
 8017826:	9b07      	ldr	r3, [sp, #28]
 8017828:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801782a:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 801782c:	9a06      	ldr	r2, [sp, #24]
 801782e:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 8017832:	9a08      	ldr	r2, [sp, #32]
 8017834:	429a      	cmp	r2, r3
 8017836:	dd01      	ble.n	801783c <ip4_frag+0x128>
      tmp = tmp | IP_MF;
 8017838:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801783c:	f7fe fc31 	bl	80160a2 <lwip_htons>
 8017840:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8017844:	9e05      	ldr	r6, [sp, #20]
 8017846:	f106 0014 	add.w	r0, r6, #20
 801784a:	b280      	uxth	r0, r0
 801784c:	f7fe fc29 	bl	80160a2 <lwip_htons>
 8017850:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017854:	2300      	movs	r3, #0
 8017856:	f88b 300a 	strb.w	r3, [fp, #10]
 801785a:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 801785e:	9807      	ldr	r0, [sp, #28]
 8017860:	6943      	ldr	r3, [r0, #20]
 8017862:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017864:	9f04      	ldr	r7, [sp, #16]
 8017866:	4639      	mov	r1, r7
 8017868:	4798      	blx	r3
    pbuf_free(rambuf);
 801786a:	4638      	mov	r0, r7
 801786c:	f000 fce0 	bl	8018230 <pbuf_free>
    left -= fragsize;
 8017870:	eba9 0306 	sub.w	r3, r9, r6
 8017874:	fa1f f983 	uxth.w	r9, r3
    ofo += nfb;
 8017878:	9b06      	ldr	r3, [sp, #24]
 801787a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801787c:	4413      	add	r3, r2
 801787e:	b29b      	uxth	r3, r3
 8017880:	9306      	str	r3, [sp, #24]
  while (left) {
 8017882:	f1b9 0f00 	cmp.w	r9, #0
 8017886:	d029      	beq.n	80178dc <ip4_frag+0x1c8>
    fragsize = LWIP_MIN(left, nfb * 8);
 8017888:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801788c:	00db      	lsls	r3, r3, #3
 801788e:	f8cd 9020 	str.w	r9, [sp, #32]
 8017892:	454b      	cmp	r3, r9
 8017894:	bfa8      	it	ge
 8017896:	464b      	movge	r3, r9
 8017898:	b29b      	uxth	r3, r3
 801789a:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801789c:	2200      	movs	r2, #0
 801789e:	2114      	movs	r1, #20
 80178a0:	2002      	movs	r0, #2
 80178a2:	f000 fd31 	bl	8018308 <pbuf_alloc>
    if (rambuf == NULL) {
 80178a6:	9004      	str	r0, [sp, #16]
 80178a8:	b1d0      	cbz	r0, 80178e0 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80178aa:	896b      	ldrh	r3, [r5, #10]
 80178ac:	2b13      	cmp	r3, #19
 80178ae:	f67f af71 	bls.w	8017794 <ip4_frag+0x80>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80178b2:	9f04      	ldr	r7, [sp, #16]
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	f8da 2000 	ldr.w	r2, [sl]
 80178ba:	f8da 6004 	ldr.w	r6, [sl, #4]
 80178be:	f8da 0008 	ldr.w	r0, [sl, #8]
 80178c2:	f8da 100c 	ldr.w	r1, [sl, #12]
 80178c6:	601a      	str	r2, [r3, #0]
 80178c8:	605e      	str	r6, [r3, #4]
 80178ca:	6098      	str	r0, [r3, #8]
 80178cc:	60d9      	str	r1, [r3, #12]
 80178ce:	f8da 2010 	ldr.w	r2, [sl, #16]
 80178d2:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80178d4:	f8d7 b004 	ldr.w	fp, [r7, #4]
    left_to_copy = fragsize;
 80178d8:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 80178da:	e783      	b.n	80177e4 <ip4_frag+0xd0>
  return ERR_OK;
 80178dc:	2000      	movs	r0, #0
 80178de:	e793      	b.n	8017808 <ip4_frag+0xf4>
  return ERR_MEM;
 80178e0:	f04f 30ff 	mov.w	r0, #4294967295
 80178e4:	e790      	b.n	8017808 <ip4_frag+0xf4>
 80178e6:	bf00      	nop
 80178e8:	08024314 	.word	0x08024314
 80178ec:	08024224 	.word	0x08024224
 80178f0:	08020b90 	.word	0x08020b90
 80178f4:	0802424c 	.word	0x0802424c
 80178f8:	08024268 	.word	0x08024268
 80178fc:	0801730d 	.word	0x0801730d

08017900 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017900:	b510      	push	{r4, lr}
 8017902:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017904:	4b2d      	ldr	r3, [pc, #180]	; (80179bc <plug_holes+0xbc>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	4283      	cmp	r3, r0
 801790a:	d831      	bhi.n	8017970 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801790c:	4b2c      	ldr	r3, [pc, #176]	; (80179c0 <plug_holes+0xc0>)
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	429c      	cmp	r4, r3
 8017912:	d235      	bcs.n	8017980 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017914:	7923      	ldrb	r3, [r4, #4]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d13a      	bne.n	8017990 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801791a:	8823      	ldrh	r3, [r4, #0]
 801791c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017920:	d83e      	bhi.n	80179a0 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8017922:	4b26      	ldr	r3, [pc, #152]	; (80179bc <plug_holes+0xbc>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	8821      	ldrh	r1, [r4, #0]
 8017928:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801792a:	4294      	cmp	r4, r2
 801792c:	d00f      	beq.n	801794e <plug_holes+0x4e>
 801792e:	7910      	ldrb	r0, [r2, #4]
 8017930:	b968      	cbnz	r0, 801794e <plug_holes+0x4e>
 8017932:	4823      	ldr	r0, [pc, #140]	; (80179c0 <plug_holes+0xc0>)
 8017934:	6800      	ldr	r0, [r0, #0]
 8017936:	4282      	cmp	r2, r0
 8017938:	d009      	beq.n	801794e <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801793a:	4822      	ldr	r0, [pc, #136]	; (80179c4 <plug_holes+0xc4>)
 801793c:	6800      	ldr	r0, [r0, #0]
 801793e:	4282      	cmp	r2, r0
 8017940:	d036      	beq.n	80179b0 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 8017942:	5a5a      	ldrh	r2, [r3, r1]
 8017944:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8017946:	5a5a      	ldrh	r2, [r3, r1]
 8017948:	441a      	add	r2, r3
 801794a:	1ae1      	subs	r1, r4, r3
 801794c:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 801794e:	8861      	ldrh	r1, [r4, #2]
 8017950:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8017952:	4294      	cmp	r4, r2
 8017954:	d00b      	beq.n	801796e <plug_holes+0x6e>
 8017956:	7910      	ldrb	r0, [r2, #4]
 8017958:	b948      	cbnz	r0, 801796e <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801795a:	481a      	ldr	r0, [pc, #104]	; (80179c4 <plug_holes+0xc4>)
 801795c:	6800      	ldr	r0, [r0, #0]
 801795e:	4284      	cmp	r4, r0
 8017960:	d029      	beq.n	80179b6 <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 8017962:	8820      	ldrh	r0, [r4, #0]
 8017964:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8017966:	8821      	ldrh	r1, [r4, #0]
 8017968:	4419      	add	r1, r3
 801796a:	1ad3      	subs	r3, r2, r3
 801796c:	804b      	strh	r3, [r1, #2]
 801796e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017970:	4b15      	ldr	r3, [pc, #84]	; (80179c8 <plug_holes+0xc8>)
 8017972:	f240 125d 	movw	r2, #349	; 0x15d
 8017976:	4915      	ldr	r1, [pc, #84]	; (80179cc <plug_holes+0xcc>)
 8017978:	4815      	ldr	r0, [pc, #84]	; (80179d0 <plug_holes+0xd0>)
 801797a:	f007 fcda 	bl	801f332 <iprintf>
 801797e:	e7c5      	b.n	801790c <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017980:	4b11      	ldr	r3, [pc, #68]	; (80179c8 <plug_holes+0xc8>)
 8017982:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8017986:	4913      	ldr	r1, [pc, #76]	; (80179d4 <plug_holes+0xd4>)
 8017988:	4811      	ldr	r0, [pc, #68]	; (80179d0 <plug_holes+0xd0>)
 801798a:	f007 fcd2 	bl	801f332 <iprintf>
 801798e:	e7c1      	b.n	8017914 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017990:	4b0d      	ldr	r3, [pc, #52]	; (80179c8 <plug_holes+0xc8>)
 8017992:	f240 125f 	movw	r2, #351	; 0x15f
 8017996:	4910      	ldr	r1, [pc, #64]	; (80179d8 <plug_holes+0xd8>)
 8017998:	480d      	ldr	r0, [pc, #52]	; (80179d0 <plug_holes+0xd0>)
 801799a:	f007 fcca 	bl	801f332 <iprintf>
 801799e:	e7bc      	b.n	801791a <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80179a0:	4b09      	ldr	r3, [pc, #36]	; (80179c8 <plug_holes+0xc8>)
 80179a2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80179a6:	490d      	ldr	r1, [pc, #52]	; (80179dc <plug_holes+0xdc>)
 80179a8:	4809      	ldr	r0, [pc, #36]	; (80179d0 <plug_holes+0xd0>)
 80179aa:	f007 fcc2 	bl	801f332 <iprintf>
 80179ae:	e7b8      	b.n	8017922 <plug_holes+0x22>
      lfree = mem;
 80179b0:	4a04      	ldr	r2, [pc, #16]	; (80179c4 <plug_holes+0xc4>)
 80179b2:	6014      	str	r4, [r2, #0]
 80179b4:	e7c5      	b.n	8017942 <plug_holes+0x42>
      lfree = pmem;
 80179b6:	4803      	ldr	r0, [pc, #12]	; (80179c4 <plug_holes+0xc4>)
 80179b8:	6002      	str	r2, [r0, #0]
 80179ba:	e7d2      	b.n	8017962 <plug_holes+0x62>
 80179bc:	20009488 	.word	0x20009488
 80179c0:	2000948c 	.word	0x2000948c
 80179c4:	20009480 	.word	0x20009480
 80179c8:	08024518 	.word	0x08024518
 80179cc:	08024548 	.word	0x08024548
 80179d0:	08020b90 	.word	0x08020b90
 80179d4:	08024560 	.word	0x08024560
 80179d8:	0802457c 	.word	0x0802457c
 80179dc:	08024598 	.word	0x08024598

080179e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80179e0:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80179e2:	4b11      	ldr	r3, [pc, #68]	; (8017a28 <mem_init+0x48>)
 80179e4:	f023 0303 	bic.w	r3, r3, #3
 80179e8:	4a10      	ldr	r2, [pc, #64]	; (8017a2c <mem_init+0x4c>)
 80179ea:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 80179ec:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80179f0:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 80179f2:	2200      	movs	r2, #0
 80179f4:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80179f6:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80179f8:	185a      	adds	r2, r3, r1
 80179fa:	480d      	ldr	r0, [pc, #52]	; (8017a30 <mem_init+0x50>)
 80179fc:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 80179fe:	2001      	movs	r0, #1
 8017a00:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017a02:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8017a06:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8017a08:	4a0a      	ldr	r2, [pc, #40]	; (8017a34 <mem_init+0x54>)
 8017a0a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8017a0c:	480a      	ldr	r0, [pc, #40]	; (8017a38 <mem_init+0x58>)
 8017a0e:	f004 fdc9 	bl	801c5a4 <sys_mutex_new>
 8017a12:	b900      	cbnz	r0, 8017a16 <mem_init+0x36>
 8017a14:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8017a16:	4b09      	ldr	r3, [pc, #36]	; (8017a3c <mem_init+0x5c>)
 8017a18:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8017a1c:	4908      	ldr	r1, [pc, #32]	; (8017a40 <mem_init+0x60>)
 8017a1e:	4809      	ldr	r0, [pc, #36]	; (8017a44 <mem_init+0x64>)
 8017a20:	f007 fc87 	bl	801f332 <iprintf>
  }
}
 8017a24:	e7f6      	b.n	8017a14 <mem_init+0x34>
 8017a26:	bf00      	nop
 8017a28:	2000a26b 	.word	0x2000a26b
 8017a2c:	20009488 	.word	0x20009488
 8017a30:	2000948c 	.word	0x2000948c
 8017a34:	20009480 	.word	0x20009480
 8017a38:	20009484 	.word	0x20009484
 8017a3c:	08024518 	.word	0x08024518
 8017a40:	08024424 	.word	0x08024424
 8017a44:	08020b90 	.word	0x08020b90

08017a48 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017a48:	2800      	cmp	r0, #0
 8017a4a:	d048      	beq.n	8017ade <mem_free+0x96>
{
 8017a4c:	b538      	push	{r3, r4, r5, lr}
 8017a4e:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8017a50:	f010 0f03 	tst.w	r0, #3
 8017a54:	d11b      	bne.n	8017a8e <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017a56:	4b22      	ldr	r3, [pc, #136]	; (8017ae0 <mem_free+0x98>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	429c      	cmp	r4, r3
 8017a5c:	d303      	bcc.n	8017a66 <mem_free+0x1e>
 8017a5e:	4b21      	ldr	r3, [pc, #132]	; (8017ae4 <mem_free+0x9c>)
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	429c      	cmp	r4, r3
 8017a64:	d306      	bcc.n	8017a74 <mem_free+0x2c>
 8017a66:	4b20      	ldr	r3, [pc, #128]	; (8017ae8 <mem_free+0xa0>)
 8017a68:	f240 12af 	movw	r2, #431	; 0x1af
 8017a6c:	491f      	ldr	r1, [pc, #124]	; (8017aec <mem_free+0xa4>)
 8017a6e:	4820      	ldr	r0, [pc, #128]	; (8017af0 <mem_free+0xa8>)
 8017a70:	f007 fc5f 	bl	801f332 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017a74:	4b1a      	ldr	r3, [pc, #104]	; (8017ae0 <mem_free+0x98>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	429c      	cmp	r4, r3
 8017a7a:	d303      	bcc.n	8017a84 <mem_free+0x3c>
 8017a7c:	4b19      	ldr	r3, [pc, #100]	; (8017ae4 <mem_free+0x9c>)
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	429c      	cmp	r4, r3
 8017a82:	d30c      	bcc.n	8017a9e <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8017a84:	f004 fdc0 	bl	801c608 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8017a88:	f004 fdca 	bl	801c620 <sys_arch_unprotect>
    return;
 8017a8c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8017a8e:	4b16      	ldr	r3, [pc, #88]	; (8017ae8 <mem_free+0xa0>)
 8017a90:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8017a94:	4917      	ldr	r1, [pc, #92]	; (8017af4 <mem_free+0xac>)
 8017a96:	4816      	ldr	r0, [pc, #88]	; (8017af0 <mem_free+0xa8>)
 8017a98:	f007 fc4b 	bl	801f332 <iprintf>
 8017a9c:	e7db      	b.n	8017a56 <mem_free+0xe>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017a9e:	4816      	ldr	r0, [pc, #88]	; (8017af8 <mem_free+0xb0>)
 8017aa0:	f004 fd91 	bl	801c5c6 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8017aa4:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8017aa8:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8017aac:	b17b      	cbz	r3, 8017ace <mem_free+0x86>
  /* ... and is now unused. */
  mem->used = 0;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8017ab4:	4b11      	ldr	r3, [pc, #68]	; (8017afc <mem_free+0xb4>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	429d      	cmp	r5, r3
 8017aba:	d201      	bcs.n	8017ac0 <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8017abc:	4b0f      	ldr	r3, [pc, #60]	; (8017afc <mem_free+0xb4>)
 8017abe:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017ac0:	4628      	mov	r0, r5
 8017ac2:	f7ff ff1d 	bl	8017900 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017ac6:	480c      	ldr	r0, [pc, #48]	; (8017af8 <mem_free+0xb0>)
 8017ac8:	f004 fd84 	bl	801c5d4 <sys_mutex_unlock>
 8017acc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8017ace:	4b06      	ldr	r3, [pc, #24]	; (8017ae8 <mem_free+0xa0>)
 8017ad0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8017ad4:	490a      	ldr	r1, [pc, #40]	; (8017b00 <mem_free+0xb8>)
 8017ad6:	4806      	ldr	r0, [pc, #24]	; (8017af0 <mem_free+0xa8>)
 8017ad8:	f007 fc2b 	bl	801f332 <iprintf>
 8017adc:	e7e7      	b.n	8017aae <mem_free+0x66>
 8017ade:	4770      	bx	lr
 8017ae0:	20009488 	.word	0x20009488
 8017ae4:	2000948c 	.word	0x2000948c
 8017ae8:	08024518 	.word	0x08024518
 8017aec:	080243f8 	.word	0x080243f8
 8017af0:	08020b90 	.word	0x08020b90
 8017af4:	080243d4 	.word	0x080243d4
 8017af8:	20009484 	.word	0x20009484
 8017afc:	20009480 	.word	0x20009480
 8017b00:	08024410 	.word	0x08024410

08017b04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8017b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b06:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8017b08:	1ccc      	adds	r4, r1, #3
 8017b0a:	b2a4      	uxth	r4, r4
 8017b0c:	f024 0403 	bic.w	r4, r4, #3
 8017b10:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8017b12:	2c0b      	cmp	r4, #11
 8017b14:	d800      	bhi.n	8017b18 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8017b16:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8017b18:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8017b1c:	d879      	bhi.n	8017c12 <mem_trim+0x10e>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017b1e:	4b3f      	ldr	r3, [pc, #252]	; (8017c1c <mem_trim+0x118>)
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	42ab      	cmp	r3, r5
 8017b24:	d803      	bhi.n	8017b2e <mem_trim+0x2a>
 8017b26:	4b3e      	ldr	r3, [pc, #248]	; (8017c20 <mem_trim+0x11c>)
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	429d      	cmp	r5, r3
 8017b2c:	d306      	bcc.n	8017b3c <mem_trim+0x38>
 8017b2e:	4b3d      	ldr	r3, [pc, #244]	; (8017c24 <mem_trim+0x120>)
 8017b30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017b34:	493c      	ldr	r1, [pc, #240]	; (8017c28 <mem_trim+0x124>)
 8017b36:	483d      	ldr	r0, [pc, #244]	; (8017c2c <mem_trim+0x128>)
 8017b38:	f007 fbfb 	bl	801f332 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017b3c:	4b37      	ldr	r3, [pc, #220]	; (8017c1c <mem_trim+0x118>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	429d      	cmp	r5, r3
 8017b42:	d336      	bcc.n	8017bb2 <mem_trim+0xae>
 8017b44:	4a36      	ldr	r2, [pc, #216]	; (8017c20 <mem_trim+0x11c>)
 8017b46:	6812      	ldr	r2, [r2, #0]
 8017b48:	4295      	cmp	r5, r2
 8017b4a:	d232      	bcs.n	8017bb2 <mem_trim+0xae>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8017b4c:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8017b50:	1aff      	subs	r7, r7, r3
 8017b52:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8017b54:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8017b58:	1bf6      	subs	r6, r6, r7
 8017b5a:	b2b6      	uxth	r6, r6
 8017b5c:	3e08      	subs	r6, #8
 8017b5e:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017b60:	42b4      	cmp	r4, r6
 8017b62:	d82c      	bhi.n	8017bbe <mem_trim+0xba>
  if (newsize > size) {
 8017b64:	42b4      	cmp	r4, r6
 8017b66:	d856      	bhi.n	8017c16 <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8017b68:	d027      	beq.n	8017bba <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017b6a:	4831      	ldr	r0, [pc, #196]	; (8017c30 <mem_trim+0x12c>)
 8017b6c:	f004 fd2b 	bl	801c5c6 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8017b70:	4b2a      	ldr	r3, [pc, #168]	; (8017c1c <mem_trim+0x118>)
 8017b72:	681a      	ldr	r2, [r3, #0]
 8017b74:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8017b78:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8017b7a:	7908      	ldrb	r0, [r1, #4]
 8017b7c:	bb58      	cbnz	r0, 8017bd6 <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8017b7e:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8017b80:	19e3      	adds	r3, r4, r7
 8017b82:	b29b      	uxth	r3, r3
 8017b84:	3308      	adds	r3, #8
 8017b86:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8017b88:	4c2a      	ldr	r4, [pc, #168]	; (8017c34 <mem_trim+0x130>)
 8017b8a:	6824      	ldr	r4, [r4, #0]
 8017b8c:	42a1      	cmp	r1, r4
 8017b8e:	d01e      	beq.n	8017bce <mem_trim+0xca>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8017b90:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 8017b92:	2400      	movs	r4, #0
 8017b94:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017b96:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 8017b98:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017b9a:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017b9e:	5ad1      	ldrh	r1, [r2, r3]
 8017ba0:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8017ba4:	d001      	beq.n	8017baa <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017ba6:	440a      	add	r2, r1
 8017ba8:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017baa:	4821      	ldr	r0, [pc, #132]	; (8017c30 <mem_trim+0x12c>)
 8017bac:	f004 fd12 	bl	801c5d4 <sys_mutex_unlock>
  return rmem;
 8017bb0:	e003      	b.n	8017bba <mem_trim+0xb6>
    SYS_ARCH_PROTECT(lev);
 8017bb2:	f004 fd29 	bl	801c608 <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 8017bb6:	f004 fd33 	bl	801c620 <sys_arch_unprotect>
}
 8017bba:	4628      	mov	r0, r5
 8017bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017bbe:	4b19      	ldr	r3, [pc, #100]	; (8017c24 <mem_trim+0x120>)
 8017bc0:	f240 2206 	movw	r2, #518	; 0x206
 8017bc4:	491c      	ldr	r1, [pc, #112]	; (8017c38 <mem_trim+0x134>)
 8017bc6:	4819      	ldr	r0, [pc, #100]	; (8017c2c <mem_trim+0x128>)
 8017bc8:	f007 fbb3 	bl	801f332 <iprintf>
 8017bcc:	e7ca      	b.n	8017b64 <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8017bce:	18d1      	adds	r1, r2, r3
 8017bd0:	4c18      	ldr	r4, [pc, #96]	; (8017c34 <mem_trim+0x130>)
 8017bd2:	6021      	str	r1, [r4, #0]
 8017bd4:	e7dc      	b.n	8017b90 <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017bd6:	f104 0314 	add.w	r3, r4, #20
 8017bda:	42b3      	cmp	r3, r6
 8017bdc:	d8e5      	bhi.n	8017baa <mem_trim+0xa6>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8017bde:	19e3      	adds	r3, r4, r7
 8017be0:	b29b      	uxth	r3, r3
 8017be2:	3308      	adds	r3, #8
 8017be4:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8017be6:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8017be8:	4812      	ldr	r0, [pc, #72]	; (8017c34 <mem_trim+0x130>)
 8017bea:	6800      	ldr	r0, [r0, #0]
 8017bec:	4281      	cmp	r1, r0
 8017bee:	d201      	bcs.n	8017bf4 <mem_trim+0xf0>
      lfree = mem2;
 8017bf0:	4810      	ldr	r0, [pc, #64]	; (8017c34 <mem_trim+0x130>)
 8017bf2:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8017bf4:	2000      	movs	r0, #0
 8017bf6:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8017bf8:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8017bfc:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8017bfe:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8017c00:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017c04:	5ad1      	ldrh	r1, [r2, r3]
 8017c06:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8017c0a:	d0ce      	beq.n	8017baa <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017c0c:	440a      	add	r2, r1
 8017c0e:	8053      	strh	r3, [r2, #2]
 8017c10:	e7cb      	b.n	8017baa <mem_trim+0xa6>
    return NULL;
 8017c12:	2500      	movs	r5, #0
 8017c14:	e7d1      	b.n	8017bba <mem_trim+0xb6>
    return NULL;
 8017c16:	2500      	movs	r5, #0
 8017c18:	e7cf      	b.n	8017bba <mem_trim+0xb6>
 8017c1a:	bf00      	nop
 8017c1c:	20009488 	.word	0x20009488
 8017c20:	2000948c 	.word	0x2000948c
 8017c24:	08024518 	.word	0x08024518
 8017c28:	080244e0 	.word	0x080244e0
 8017c2c:	08020b90 	.word	0x08020b90
 8017c30:	20009484 	.word	0x20009484
 8017c34:	20009480 	.word	0x20009480
 8017c38:	080244f8 	.word	0x080244f8

08017c3c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	f000 808e 	beq.w	8017d5e <mem_malloc+0x122>
{
 8017c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c44:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8017c46:	3503      	adds	r5, #3
 8017c48:	b2ad      	uxth	r5, r5
 8017c4a:	f025 0503 	bic.w	r5, r5, #3
 8017c4e:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 8017c50:	2d0b      	cmp	r5, #11
 8017c52:	d800      	bhi.n	8017c56 <mem_malloc+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8017c54:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 8017c56:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8017c5a:	f200 8082 	bhi.w	8017d62 <mem_malloc+0x126>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017c5e:	4842      	ldr	r0, [pc, #264]	; (8017d68 <mem_malloc+0x12c>)
 8017c60:	f004 fcb1 	bl	801c5c6 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8017c64:	4b41      	ldr	r3, [pc, #260]	; (8017d6c <mem_malloc+0x130>)
 8017c66:	6818      	ldr	r0, [r3, #0]
 8017c68:	4b41      	ldr	r3, [pc, #260]	; (8017d70 <mem_malloc+0x134>)
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	1a1b      	subs	r3, r3, r0
 8017c6e:	b29b      	uxth	r3, r3
 8017c70:	e049      	b.n	8017d06 <mem_malloc+0xca>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017c72:	2301      	movs	r3, #1
 8017c74:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017c76:	4b3e      	ldr	r3, [pc, #248]	; (8017d70 <mem_malloc+0x134>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	429c      	cmp	r4, r3
 8017c7c:	d014      	beq.n	8017ca8 <mem_malloc+0x6c>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017c7e:	483a      	ldr	r0, [pc, #232]	; (8017d68 <mem_malloc+0x12c>)
 8017c80:	f004 fca8 	bl	801c5d4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017c84:	4426      	add	r6, r4
 8017c86:	3608      	adds	r6, #8
 8017c88:	4b3a      	ldr	r3, [pc, #232]	; (8017d74 <mem_malloc+0x138>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	429e      	cmp	r6, r3
 8017c8e:	d821      	bhi.n	8017cd4 <mem_malloc+0x98>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017c90:	f014 0503 	ands.w	r5, r4, #3
 8017c94:	d126      	bne.n	8017ce4 <mem_malloc+0xa8>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017c96:	2d00      	cmp	r5, #0
 8017c98:	d12c      	bne.n	8017cf4 <mem_malloc+0xb8>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8017c9a:	f104 0008 	add.w	r0, r4, #8
 8017c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 8017ca0:	4a32      	ldr	r2, [pc, #200]	; (8017d6c <mem_malloc+0x130>)
 8017ca2:	6812      	ldr	r2, [r2, #0]
 8017ca4:	881b      	ldrh	r3, [r3, #0]
 8017ca6:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 8017ca8:	791a      	ldrb	r2, [r3, #4]
 8017caa:	b11a      	cbz	r2, 8017cb4 <mem_malloc+0x78>
 8017cac:	4931      	ldr	r1, [pc, #196]	; (8017d74 <mem_malloc+0x138>)
 8017cae:	6809      	ldr	r1, [r1, #0]
 8017cb0:	428b      	cmp	r3, r1
 8017cb2:	d1f5      	bne.n	8017ca0 <mem_malloc+0x64>
          lfree = cur;
 8017cb4:	492e      	ldr	r1, [pc, #184]	; (8017d70 <mem_malloc+0x134>)
 8017cb6:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017cb8:	492e      	ldr	r1, [pc, #184]	; (8017d74 <mem_malloc+0x138>)
 8017cba:	6809      	ldr	r1, [r1, #0]
 8017cbc:	428b      	cmp	r3, r1
 8017cbe:	d0de      	beq.n	8017c7e <mem_malloc+0x42>
 8017cc0:	2a00      	cmp	r2, #0
 8017cc2:	d0dc      	beq.n	8017c7e <mem_malloc+0x42>
 8017cc4:	4b2c      	ldr	r3, [pc, #176]	; (8017d78 <mem_malloc+0x13c>)
 8017cc6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017cca:	492c      	ldr	r1, [pc, #176]	; (8017d7c <mem_malloc+0x140>)
 8017ccc:	482c      	ldr	r0, [pc, #176]	; (8017d80 <mem_malloc+0x144>)
 8017cce:	f007 fb30 	bl	801f332 <iprintf>
 8017cd2:	e7d4      	b.n	8017c7e <mem_malloc+0x42>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017cd4:	4b28      	ldr	r3, [pc, #160]	; (8017d78 <mem_malloc+0x13c>)
 8017cd6:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8017cda:	492a      	ldr	r1, [pc, #168]	; (8017d84 <mem_malloc+0x148>)
 8017cdc:	4828      	ldr	r0, [pc, #160]	; (8017d80 <mem_malloc+0x144>)
 8017cde:	f007 fb28 	bl	801f332 <iprintf>
 8017ce2:	e7d5      	b.n	8017c90 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017ce4:	4b24      	ldr	r3, [pc, #144]	; (8017d78 <mem_malloc+0x13c>)
 8017ce6:	f240 22d6 	movw	r2, #726	; 0x2d6
 8017cea:	4927      	ldr	r1, [pc, #156]	; (8017d88 <mem_malloc+0x14c>)
 8017cec:	4824      	ldr	r0, [pc, #144]	; (8017d80 <mem_malloc+0x144>)
 8017cee:	f007 fb20 	bl	801f332 <iprintf>
 8017cf2:	e7d0      	b.n	8017c96 <mem_malloc+0x5a>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017cf4:	4b20      	ldr	r3, [pc, #128]	; (8017d78 <mem_malloc+0x13c>)
 8017cf6:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8017cfa:	4924      	ldr	r1, [pc, #144]	; (8017d8c <mem_malloc+0x150>)
 8017cfc:	4820      	ldr	r0, [pc, #128]	; (8017d80 <mem_malloc+0x144>)
 8017cfe:	f007 fb18 	bl	801f332 <iprintf>
 8017d02:	e7ca      	b.n	8017c9a <mem_malloc+0x5e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8017d04:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8017d06:	461f      	mov	r7, r3
 8017d08:	462e      	mov	r6, r5
 8017d0a:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 8017d0e:	428b      	cmp	r3, r1
 8017d10:	d220      	bcs.n	8017d54 <mem_malloc+0x118>
      mem = (struct mem *)(void *)&ram[ptr];
 8017d12:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 8017d14:	7921      	ldrb	r1, [r4, #4]
 8017d16:	2900      	cmp	r1, #0
 8017d18:	d1f4      	bne.n	8017d04 <mem_malloc+0xc8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017d1a:	5ac2      	ldrh	r2, [r0, r3]
 8017d1c:	1bd2      	subs	r2, r2, r7
 8017d1e:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 8017d20:	4296      	cmp	r6, r2
 8017d22:	d8ef      	bhi.n	8017d04 <mem_malloc+0xc8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017d24:	f106 0114 	add.w	r1, r6, #20
 8017d28:	428a      	cmp	r2, r1
 8017d2a:	d3a2      	bcc.n	8017c72 <mem_malloc+0x36>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8017d2c:	18ea      	adds	r2, r5, r3
 8017d2e:	b292      	uxth	r2, r2
 8017d30:	3208      	adds	r2, #8
 8017d32:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8017d34:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 8017d36:	2500      	movs	r5, #0
 8017d38:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 8017d3a:	8825      	ldrh	r5, [r4, #0]
 8017d3c:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 8017d3e:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8017d40:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8017d42:	2301      	movs	r3, #1
 8017d44:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017d46:	5a83      	ldrh	r3, [r0, r2]
 8017d48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017d4c:	d093      	beq.n	8017c76 <mem_malloc+0x3a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017d4e:	4418      	add	r0, r3
 8017d50:	8042      	strh	r2, [r0, #2]
 8017d52:	e790      	b.n	8017c76 <mem_malloc+0x3a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017d54:	4804      	ldr	r0, [pc, #16]	; (8017d68 <mem_malloc+0x12c>)
 8017d56:	f004 fc3d 	bl	801c5d4 <sys_mutex_unlock>
  return NULL;
 8017d5a:	2000      	movs	r0, #0
 8017d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8017d5e:	2000      	movs	r0, #0
 8017d60:	4770      	bx	lr
    return NULL;
 8017d62:	2000      	movs	r0, #0
}
 8017d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d66:	bf00      	nop
 8017d68:	20009484 	.word	0x20009484
 8017d6c:	20009488 	.word	0x20009488
 8017d70:	20009480 	.word	0x20009480
 8017d74:	2000948c 	.word	0x2000948c
 8017d78:	08024518 	.word	0x08024518
 8017d7c:	08024440 	.word	0x08024440
 8017d80:	08020b90 	.word	0x08020b90
 8017d84:	0802445c 	.word	0x0802445c
 8017d88:	0802448c 	.word	0x0802448c
 8017d8c:	080244bc 	.word	0x080244bc

08017d90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8017d90:	b538      	push	{r3, r4, r5, lr}
 8017d92:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8017d94:	f004 fc38 	bl	801c608 <sys_arch_protect>
 8017d98:	4605      	mov	r5, r0

  memp = *desc->tab;
 8017d9a:	68a3      	ldr	r3, [r4, #8]
 8017d9c:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8017d9e:	b18c      	cbz	r4, 8017dc4 <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8017da0:	6822      	ldr	r2, [r4, #0]
 8017da2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017da4:	f014 0f03 	tst.w	r4, #3
 8017da8:	d104      	bne.n	8017db4 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017daa:	4628      	mov	r0, r5
 8017dac:	f004 fc38 	bl	801c620 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8017db0:	4620      	mov	r0, r4
 8017db2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017db4:	4b05      	ldr	r3, [pc, #20]	; (8017dcc <do_memp_malloc_pool+0x3c>)
 8017db6:	f240 1249 	movw	r2, #329	; 0x149
 8017dba:	4905      	ldr	r1, [pc, #20]	; (8017dd0 <do_memp_malloc_pool+0x40>)
 8017dbc:	4805      	ldr	r0, [pc, #20]	; (8017dd4 <do_memp_malloc_pool+0x44>)
 8017dbe:	f007 fab8 	bl	801f332 <iprintf>
 8017dc2:	e7f2      	b.n	8017daa <do_memp_malloc_pool+0x1a>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8017dc4:	f004 fc2c 	bl	801c620 <sys_arch_unprotect>
  return NULL;
 8017dc8:	2000      	movs	r0, #0
}
 8017dca:	bd38      	pop	{r3, r4, r5, pc}
 8017dcc:	080245e4 	.word	0x080245e4
 8017dd0:	08024614 	.word	0x08024614
 8017dd4:	08020b90 	.word	0x08020b90

08017dd8 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8017dd8:	b538      	push	{r3, r4, r5, lr}
 8017dda:	4605      	mov	r5, r0
 8017ddc:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8017dde:	f011 0f03 	tst.w	r1, #3
 8017de2:	d109      	bne.n	8017df8 <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8017de4:	f004 fc10 	bl	801c608 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8017de8:	68ab      	ldr	r3, [r5, #8]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8017dee:	68ab      	ldr	r3, [r5, #8]
 8017df0:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8017df2:	f004 fc15 	bl	801c620 <sys_arch_unprotect>
 8017df6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8017df8:	4b03      	ldr	r3, [pc, #12]	; (8017e08 <do_memp_free_pool+0x30>)
 8017dfa:	f240 129d 	movw	r2, #413	; 0x19d
 8017dfe:	4903      	ldr	r1, [pc, #12]	; (8017e0c <do_memp_free_pool+0x34>)
 8017e00:	4803      	ldr	r0, [pc, #12]	; (8017e10 <do_memp_free_pool+0x38>)
 8017e02:	f007 fa96 	bl	801f332 <iprintf>
 8017e06:	e7ed      	b.n	8017de4 <do_memp_free_pool+0xc>
 8017e08:	080245e4 	.word	0x080245e4
 8017e0c:	080245c4 	.word	0x080245c4
 8017e10:	08020b90 	.word	0x08020b90

08017e14 <memp_init_pool>:
  *desc->tab = NULL;
 8017e14:	6883      	ldr	r3, [r0, #8]
 8017e16:	2200      	movs	r2, #0
 8017e18:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8017e1a:	6843      	ldr	r3, [r0, #4]
 8017e1c:	3303      	adds	r3, #3
 8017e1e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8017e22:	e007      	b.n	8017e34 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8017e24:	6881      	ldr	r1, [r0, #8]
 8017e26:	6809      	ldr	r1, [r1, #0]
 8017e28:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8017e2a:	6881      	ldr	r1, [r0, #8]
 8017e2c:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8017e2e:	8801      	ldrh	r1, [r0, #0]
 8017e30:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8017e32:	3201      	adds	r2, #1
 8017e34:	8841      	ldrh	r1, [r0, #2]
 8017e36:	428a      	cmp	r2, r1
 8017e38:	dbf4      	blt.n	8017e24 <memp_init_pool+0x10>
}
 8017e3a:	4770      	bx	lr

08017e3c <memp_init>:
{
 8017e3c:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017e3e:	2400      	movs	r4, #0
 8017e40:	e006      	b.n	8017e50 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 8017e42:	4b05      	ldr	r3, [pc, #20]	; (8017e58 <memp_init+0x1c>)
 8017e44:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017e48:	f7ff ffe4 	bl	8017e14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017e4c:	3401      	adds	r4, #1
 8017e4e:	b2a4      	uxth	r4, r4
 8017e50:	2c0b      	cmp	r4, #11
 8017e52:	d9f6      	bls.n	8017e42 <memp_init+0x6>
}
 8017e54:	bd10      	pop	{r4, pc}
 8017e56:	bf00      	nop
 8017e58:	08024704 	.word	0x08024704

08017e5c <memp_malloc>:
{
 8017e5c:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017e5e:	280b      	cmp	r0, #11
 8017e60:	d805      	bhi.n	8017e6e <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8017e62:	4b07      	ldr	r3, [pc, #28]	; (8017e80 <memp_malloc+0x24>)
 8017e64:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017e68:	f7ff ff92 	bl	8017d90 <do_memp_malloc_pool>
}
 8017e6c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017e6e:	4b05      	ldr	r3, [pc, #20]	; (8017e84 <memp_malloc+0x28>)
 8017e70:	f240 1287 	movw	r2, #391	; 0x187
 8017e74:	4904      	ldr	r1, [pc, #16]	; (8017e88 <memp_malloc+0x2c>)
 8017e76:	4805      	ldr	r0, [pc, #20]	; (8017e8c <memp_malloc+0x30>)
 8017e78:	f007 fa5b 	bl	801f332 <iprintf>
 8017e7c:	2000      	movs	r0, #0
 8017e7e:	bd08      	pop	{r3, pc}
 8017e80:	08024704 	.word	0x08024704
 8017e84:	080245e4 	.word	0x080245e4
 8017e88:	080246e4 	.word	0x080246e4
 8017e8c:	08020b90 	.word	0x08020b90

08017e90 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8017e90:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017e92:	280b      	cmp	r0, #11
 8017e94:	d806      	bhi.n	8017ea4 <memp_free+0x14>

  if (mem == NULL) {
 8017e96:	b121      	cbz	r1, 8017ea2 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017e98:	4b06      	ldr	r3, [pc, #24]	; (8017eb4 <memp_free+0x24>)
 8017e9a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017e9e:	f7ff ff9b 	bl	8017dd8 <do_memp_free_pool>
 8017ea2:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017ea4:	4b04      	ldr	r3, [pc, #16]	; (8017eb8 <memp_free+0x28>)
 8017ea6:	f240 12db 	movw	r2, #475	; 0x1db
 8017eaa:	4904      	ldr	r1, [pc, #16]	; (8017ebc <memp_free+0x2c>)
 8017eac:	4804      	ldr	r0, [pc, #16]	; (8017ec0 <memp_free+0x30>)
 8017eae:	f007 fa40 	bl	801f332 <iprintf>
 8017eb2:	bd08      	pop	{r3, pc}
 8017eb4:	08024704 	.word	0x08024704
 8017eb8:	080245e4 	.word	0x080245e4
 8017ebc:	080246c8 	.word	0x080246c8
 8017ec0:	08020b90 	.word	0x08020b90

08017ec4 <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017ec4:	f011 0f01 	tst.w	r1, #1
 8017ec8:	d00c      	beq.n	8017ee4 <netif_issue_reports+0x20>
{
 8017eca:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017ecc:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017ece:	b123      	cbz	r3, 8017eda <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8017ed0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8017ed4:	f013 0f08 	tst.w	r3, #8
 8017ed8:	d100      	bne.n	8017edc <netif_issue_reports+0x18>
 8017eda:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 8017edc:	1d01      	adds	r1, r0, #4
 8017ede:	f7fe fb49 	bl	8016574 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8017ee2:	e7fa      	b.n	8017eda <netif_issue_reports+0x16>
 8017ee4:	4770      	bx	lr

08017ee6 <netif_init>:
{
 8017ee6:	4770      	bx	lr

08017ee8 <netif_set_ipaddr>:
{
 8017ee8:	b530      	push	{r4, r5, lr}
 8017eea:	b083      	sub	sp, #12
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8017eec:	460d      	mov	r5, r1
 8017eee:	b199      	cbz	r1, 8017f18 <netif_set_ipaddr+0x30>
 8017ef0:	680a      	ldr	r2, [r1, #0]
 8017ef2:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8017ef4:	6842      	ldr	r2, [r0, #4]
 8017ef6:	9901      	ldr	r1, [sp, #4]
 8017ef8:	4291      	cmp	r1, r2
 8017efa:	d00b      	beq.n	8017f14 <netif_set_ipaddr+0x2c>
 8017efc:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8017efe:	a901      	add	r1, sp, #4
 8017f00:	3004      	adds	r0, #4
 8017f02:	f001 fc93 	bl	801982c <tcp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8017f06:	b15d      	cbz	r5, 8017f20 <netif_set_ipaddr+0x38>
 8017f08:	682b      	ldr	r3, [r5, #0]
 8017f0a:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8017f0c:	2101      	movs	r1, #1
 8017f0e:	4620      	mov	r0, r4
 8017f10:	f7ff ffd8 	bl	8017ec4 <netif_issue_reports>
}
 8017f14:	b003      	add	sp, #12
 8017f16:	bd30      	pop	{r4, r5, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8017f18:	4a02      	ldr	r2, [pc, #8]	; (8017f24 <netif_set_ipaddr+0x3c>)
 8017f1a:	6812      	ldr	r2, [r2, #0]
 8017f1c:	9201      	str	r2, [sp, #4]
 8017f1e:	e7e9      	b.n	8017ef4 <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8017f20:	2300      	movs	r3, #0
 8017f22:	e7f2      	b.n	8017f0a <netif_set_ipaddr+0x22>
 8017f24:	08024220 	.word	0x08024220

08017f28 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8017f28:	b111      	cbz	r1, 8017f30 <netif_set_gw+0x8>
 8017f2a:	680b      	ldr	r3, [r1, #0]
 8017f2c:	60c3      	str	r3, [r0, #12]
 8017f2e:	4770      	bx	lr
 8017f30:	2300      	movs	r3, #0
 8017f32:	e7fb      	b.n	8017f2c <netif_set_gw+0x4>

08017f34 <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8017f34:	b111      	cbz	r1, 8017f3c <netif_set_netmask+0x8>
 8017f36:	680b      	ldr	r3, [r1, #0]
 8017f38:	6083      	str	r3, [r0, #8]
 8017f3a:	4770      	bx	lr
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	e7fb      	b.n	8017f38 <netif_set_netmask+0x4>

08017f40 <netif_set_addr>:
{
 8017f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f42:	4604      	mov	r4, r0
 8017f44:	4617      	mov	r7, r2
 8017f46:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 8017f48:	460d      	mov	r5, r1
 8017f4a:	b109      	cbz	r1, 8017f50 <netif_set_addr+0x10>
 8017f4c:	680b      	ldr	r3, [r1, #0]
 8017f4e:	b963      	cbnz	r3, 8017f6a <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 8017f50:	4629      	mov	r1, r5
 8017f52:	4620      	mov	r0, r4
 8017f54:	f7ff ffc8 	bl	8017ee8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8017f58:	4639      	mov	r1, r7
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	f7ff ffea 	bl	8017f34 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8017f60:	4631      	mov	r1, r6
 8017f62:	4620      	mov	r0, r4
 8017f64:	f7ff ffe0 	bl	8017f28 <netif_set_gw>
 8017f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 8017f6a:	4611      	mov	r1, r2
 8017f6c:	f7ff ffe2 	bl	8017f34 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8017f70:	4631      	mov	r1, r6
 8017f72:	4620      	mov	r0, r4
 8017f74:	f7ff ffd8 	bl	8017f28 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 8017f78:	4629      	mov	r1, r5
 8017f7a:	4620      	mov	r0, r4
 8017f7c:	f7ff ffb4 	bl	8017ee8 <netif_set_ipaddr>
 8017f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017f84 <netif_add>:
{
 8017f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f88:	4604      	mov	r4, r0
 8017f8a:	460e      	mov	r6, r1
 8017f8c:	4617      	mov	r7, r2
 8017f8e:	4698      	mov	r8, r3
 8017f90:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 8017f92:	b315      	cbz	r5, 8017fda <netif_add+0x56>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8017f94:	2300      	movs	r3, #0
 8017f96:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8017f98:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8017f9a:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 8017f9c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8017fa0:	2303      	movs	r3, #3
 8017fa2:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 8017fa6:	9b06      	ldr	r3, [sp, #24]
 8017fa8:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8017faa:	4a11      	ldr	r2, [pc, #68]	; (8017ff0 <netif_add+0x6c>)
 8017fac:	7813      	ldrb	r3, [r2, #0]
 8017fae:	1c59      	adds	r1, r3, #1
 8017fb0:	7011      	strb	r1, [r2, #0]
 8017fb2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 8017fb6:	9b08      	ldr	r3, [sp, #32]
 8017fb8:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8017fba:	4643      	mov	r3, r8
 8017fbc:	463a      	mov	r2, r7
 8017fbe:	4631      	mov	r1, r6
 8017fc0:	4620      	mov	r0, r4
 8017fc2:	f7ff ffbd 	bl	8017f40 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8017fc6:	4620      	mov	r0, r4
 8017fc8:	47a8      	blx	r5
 8017fca:	b968      	cbnz	r0, 8017fe8 <netif_add+0x64>
  netif->next = netif_list;
 8017fcc:	4b09      	ldr	r3, [pc, #36]	; (8017ff4 <netif_add+0x70>)
 8017fce:	681a      	ldr	r2, [r3, #0]
 8017fd0:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8017fd2:	601c      	str	r4, [r3, #0]
  return netif;
 8017fd4:	4620      	mov	r0, r4
 8017fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 8017fda:	4b07      	ldr	r3, [pc, #28]	; (8017ff8 <netif_add+0x74>)
 8017fdc:	22fb      	movs	r2, #251	; 0xfb
 8017fde:	4907      	ldr	r1, [pc, #28]	; (8017ffc <netif_add+0x78>)
 8017fe0:	4807      	ldr	r0, [pc, #28]	; (8018000 <netif_add+0x7c>)
 8017fe2:	f007 f9a6 	bl	801f332 <iprintf>
 8017fe6:	e7d5      	b.n	8017f94 <netif_add+0x10>
    return NULL;
 8017fe8:	2000      	movs	r0, #0
}
 8017fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fee:	bf00      	nop
 8017ff0:	200094c0 	.word	0x200094c0
 8017ff4:	2000eca4 	.word	0x2000eca4
 8017ff8:	08024734 	.word	0x08024734
 8017ffc:	08024768 	.word	0x08024768
 8018000:	08020b90 	.word	0x08020b90

08018004 <netif_set_default>:
  netif_default = netif;
 8018004:	4b01      	ldr	r3, [pc, #4]	; (801800c <netif_set_default+0x8>)
 8018006:	6018      	str	r0, [r3, #0]
 8018008:	4770      	bx	lr
 801800a:	bf00      	nop
 801800c:	2000eca8 	.word	0x2000eca8

08018010 <netif_set_up>:
{
 8018010:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8018012:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8018016:	f013 0f01 	tst.w	r3, #1
 801801a:	d106      	bne.n	801802a <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 801801c:	f043 0301 	orr.w	r3, r3, #1
 8018020:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8018024:	f013 0f04 	tst.w	r3, #4
 8018028:	d100      	bne.n	801802c <netif_set_up+0x1c>
 801802a:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801802c:	2103      	movs	r1, #3
 801802e:	f7ff ff49 	bl	8017ec4 <netif_issue_reports>
}
 8018032:	e7fa      	b.n	801802a <netif_set_up+0x1a>

08018034 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8018034:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8018036:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 801803a:	f013 0f01 	tst.w	r3, #1
 801803e:	d006      	beq.n	801804e <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 8018040:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8018044:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018048:	f013 0f08 	tst.w	r3, #8
 801804c:	d100      	bne.n	8018050 <netif_set_down+0x1c>
 801804e:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 8018050:	f7fe fa1c 	bl	801648c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8018054:	e7fb      	b.n	801804e <netif_set_down+0x1a>
	...

08018058 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8018058:	b570      	push	{r4, r5, r6, lr}
 801805a:	460c      	mov	r4, r1
 801805c:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801805e:	4605      	mov	r5, r0
 8018060:	b1c0      	cbz	r0, 8018094 <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 8018062:	2c00      	cmp	r4, #0
 8018064:	d04e      	beq.n	8018104 <pbuf_header_impl+0xac>
 8018066:	2d00      	cmp	r5, #0
 8018068:	d04e      	beq.n	8018108 <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 801806a:	2c00      	cmp	r4, #0
 801806c:	db1a      	blt.n	80180a4 <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 801806e:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8018070:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8018072:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8018074:	b32b      	cbz	r3, 80180c2 <pbuf_header_impl+0x6a>
 8018076:	2b03      	cmp	r3, #3
 8018078:	d023      	beq.n	80180c2 <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801807a:	3b01      	subs	r3, #1
 801807c:	b29b      	uxth	r3, r3
 801807e:	2b01      	cmp	r3, #1
 8018080:	d837      	bhi.n	80180f2 <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8018082:	2c00      	cmp	r4, #0
 8018084:	db2f      	blt.n	80180e6 <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 8018086:	2c00      	cmp	r4, #0
 8018088:	dd40      	ble.n	801810c <pbuf_header_impl+0xb4>
 801808a:	2e00      	cmp	r6, #0
 801808c:	d040      	beq.n	8018110 <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801808e:	1b09      	subs	r1, r1, r4
 8018090:	6069      	str	r1, [r5, #4]
 8018092:	e01c      	b.n	80180ce <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 8018094:	4b1f      	ldr	r3, [pc, #124]	; (8018114 <pbuf_header_impl+0xbc>)
 8018096:	f240 223f 	movw	r2, #575	; 0x23f
 801809a:	491f      	ldr	r1, [pc, #124]	; (8018118 <pbuf_header_impl+0xc0>)
 801809c:	481f      	ldr	r0, [pc, #124]	; (801811c <pbuf_header_impl+0xc4>)
 801809e:	f007 f948 	bl	801f332 <iprintf>
 80180a2:	e7de      	b.n	8018062 <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 80180a4:	b2a2      	uxth	r2, r4
 80180a6:	4252      	negs	r2, r2
 80180a8:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80180aa:	896b      	ldrh	r3, [r5, #10]
 80180ac:	429a      	cmp	r2, r3
 80180ae:	d9df      	bls.n	8018070 <pbuf_header_impl+0x18>
 80180b0:	4b18      	ldr	r3, [pc, #96]	; (8018114 <pbuf_header_impl+0xbc>)
 80180b2:	f240 2247 	movw	r2, #583	; 0x247
 80180b6:	491a      	ldr	r1, [pc, #104]	; (8018120 <pbuf_header_impl+0xc8>)
 80180b8:	4818      	ldr	r0, [pc, #96]	; (801811c <pbuf_header_impl+0xc4>)
 80180ba:	f007 f93a 	bl	801f332 <iprintf>
 80180be:	2001      	movs	r0, #1
 80180c0:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 80180c2:	1b0b      	subs	r3, r1, r4
 80180c4:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80180c6:	f105 0210 	add.w	r2, r5, #16
 80180ca:	4293      	cmp	r3, r2
 80180cc:	d308      	bcc.n	80180e0 <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80180ce:	b2a4      	uxth	r4, r4
 80180d0:	896b      	ldrh	r3, [r5, #10]
 80180d2:	4423      	add	r3, r4
 80180d4:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 80180d6:	892b      	ldrh	r3, [r5, #8]
 80180d8:	441c      	add	r4, r3
 80180da:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80180dc:	2000      	movs	r0, #0
 80180de:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 80180e0:	6069      	str	r1, [r5, #4]
      return 1;
 80180e2:	2001      	movs	r0, #1
 80180e4:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80180e6:	896b      	ldrh	r3, [r5, #10]
 80180e8:	429a      	cmp	r2, r3
 80180ea:	d8cc      	bhi.n	8018086 <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80180ec:	1b09      	subs	r1, r1, r4
 80180ee:	6069      	str	r1, [r5, #4]
 80180f0:	e7ed      	b.n	80180ce <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 80180f2:	4b08      	ldr	r3, [pc, #32]	; (8018114 <pbuf_header_impl+0xbc>)
 80180f4:	f240 2277 	movw	r2, #631	; 0x277
 80180f8:	490a      	ldr	r1, [pc, #40]	; (8018124 <pbuf_header_impl+0xcc>)
 80180fa:	4808      	ldr	r0, [pc, #32]	; (801811c <pbuf_header_impl+0xc4>)
 80180fc:	f007 f919 	bl	801f332 <iprintf>
    return 1;
 8018100:	2001      	movs	r0, #1
 8018102:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8018104:	2000      	movs	r0, #0
 8018106:	bd70      	pop	{r4, r5, r6, pc}
 8018108:	2000      	movs	r0, #0
 801810a:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 801810c:	2001      	movs	r0, #1
 801810e:	bd70      	pop	{r4, r5, r6, pc}
 8018110:	2001      	movs	r0, #1
}
 8018112:	bd70      	pop	{r4, r5, r6, pc}
 8018114:	08024a38 	.word	0x08024a38
 8018118:	08020e78 	.word	0x08020e78
 801811c:	08020b90 	.word	0x08020b90
 8018120:	08024a68 	.word	0x08024a68
 8018124:	08024a88 	.word	0x08024a88

08018128 <pbuf_pool_is_empty>:
{
 8018128:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 801812a:	f004 fa6d 	bl	801c608 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 801812e:	4b0c      	ldr	r3, [pc, #48]	; (8018160 <pbuf_pool_is_empty+0x38>)
 8018130:	781c      	ldrb	r4, [r3, #0]
 8018132:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8018134:	2201      	movs	r2, #1
 8018136:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018138:	f004 fa72 	bl	801c620 <sys_arch_unprotect>
  if (!queued) {
 801813c:	b104      	cbz	r4, 8018140 <pbuf_pool_is_empty+0x18>
 801813e:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018140:	2200      	movs	r2, #0
 8018142:	4611      	mov	r1, r2
 8018144:	4807      	ldr	r0, [pc, #28]	; (8018164 <pbuf_pool_is_empty+0x3c>)
 8018146:	f7fd fefb 	bl	8015f40 <tcpip_callback_with_block>
 801814a:	2800      	cmp	r0, #0
 801814c:	d0f7      	beq.n	801813e <pbuf_pool_is_empty+0x16>
 801814e:	f004 fa5b 	bl	801c608 <sys_arch_protect>
 8018152:	2200      	movs	r2, #0
 8018154:	4b02      	ldr	r3, [pc, #8]	; (8018160 <pbuf_pool_is_empty+0x38>)
 8018156:	701a      	strb	r2, [r3, #0]
 8018158:	f004 fa62 	bl	801c620 <sys_arch_unprotect>
}
 801815c:	e7ef      	b.n	801813e <pbuf_pool_is_empty+0x16>
 801815e:	bf00      	nop
 8018160:	2000ecac 	.word	0x2000ecac
 8018164:	0801819d 	.word	0x0801819d

08018168 <pbuf_free_ooseq>:
{
 8018168:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801816a:	f004 fa4d 	bl	801c608 <sys_arch_protect>
 801816e:	2200      	movs	r2, #0
 8018170:	4b08      	ldr	r3, [pc, #32]	; (8018194 <pbuf_free_ooseq+0x2c>)
 8018172:	701a      	strb	r2, [r3, #0]
 8018174:	f004 fa54 	bl	801c620 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018178:	4b07      	ldr	r3, [pc, #28]	; (8018198 <pbuf_free_ooseq+0x30>)
 801817a:	681c      	ldr	r4, [r3, #0]
 801817c:	b144      	cbz	r4, 8018190 <pbuf_free_ooseq+0x28>
    if (NULL != pcb->ooseq) {
 801817e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8018180:	b908      	cbnz	r0, 8018186 <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018182:	68e4      	ldr	r4, [r4, #12]
 8018184:	e7fa      	b.n	801817c <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 8018186:	f000 fd44 	bl	8018c12 <tcp_segs_free>
      pcb->ooseq = NULL;
 801818a:	2300      	movs	r3, #0
 801818c:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 801818e:	bd10      	pop	{r4, pc}
 8018190:	bd10      	pop	{r4, pc}
 8018192:	bf00      	nop
 8018194:	2000ecac 	.word	0x2000ecac
 8018198:	2000ecb4 	.word	0x2000ecb4

0801819c <pbuf_free_ooseq_callback>:
{
 801819c:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 801819e:	f7ff ffe3 	bl	8018168 <pbuf_free_ooseq>
 80181a2:	bd08      	pop	{r3, pc}

080181a4 <pbuf_alloced_custom>:
{
 80181a4:	b570      	push	{r4, r5, r6, lr}
 80181a6:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 80181a8:	2804      	cmp	r0, #4
 80181aa:	d80a      	bhi.n	80181c2 <pbuf_alloced_custom+0x1e>
 80181ac:	e8df f000 	tbb	[pc, r0]
 80181b0:	05031412 	.word	0x05031412
 80181b4:	07          	.byte	0x07
 80181b5:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80181b6:	200e      	movs	r0, #14
    break;
 80181b8:	e00f      	b.n	80181da <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80181ba:	2000      	movs	r0, #0
    break;
 80181bc:	e00d      	b.n	80181da <pbuf_alloced_custom+0x36>
    offset = 0;
 80181be:	2000      	movs	r0, #0
    break;
 80181c0:	e00b      	b.n	80181da <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80181c2:	4b13      	ldr	r3, [pc, #76]	; (8018210 <pbuf_alloced_custom+0x6c>)
 80181c4:	f240 12c5 	movw	r2, #453	; 0x1c5
 80181c8:	4912      	ldr	r1, [pc, #72]	; (8018214 <pbuf_alloced_custom+0x70>)
 80181ca:	4813      	ldr	r0, [pc, #76]	; (8018218 <pbuf_alloced_custom+0x74>)
 80181cc:	f007 f8b1 	bl	801f332 <iprintf>
    return NULL;
 80181d0:	2000      	movs	r0, #0
 80181d2:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80181d4:	2036      	movs	r0, #54	; 0x36
 80181d6:	e000      	b.n	80181da <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80181d8:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80181da:	3003      	adds	r0, #3
 80181dc:	f020 0003 	bic.w	r0, r0, #3
 80181e0:	180e      	adds	r6, r1, r0
 80181e2:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 80181e6:	42ae      	cmp	r6, r5
 80181e8:	d810      	bhi.n	801820c <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 80181ea:	2500      	movs	r5, #0
 80181ec:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 80181ee:	b154      	cbz	r4, 8018206 <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80181f0:	4420      	add	r0, r4
 80181f2:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80181f4:	2002      	movs	r0, #2
 80181f6:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80181f8:	8119      	strh	r1, [r3, #8]
 80181fa:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 80181fc:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80181fe:	2201      	movs	r2, #1
 8018200:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8018202:	4618      	mov	r0, r3
 8018204:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 8018206:	2000      	movs	r0, #0
 8018208:	6058      	str	r0, [r3, #4]
 801820a:	e7f3      	b.n	80181f4 <pbuf_alloced_custom+0x50>
    return NULL;
 801820c:	2000      	movs	r0, #0
}
 801820e:	bd70      	pop	{r4, r5, r6, pc}
 8018210:	08024a38 	.word	0x08024a38
 8018214:	08024864 	.word	0x08024864
 8018218:	08020b90 	.word	0x08020b90

0801821c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 801821c:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 801821e:	2200      	movs	r2, #0
 8018220:	f7ff ff1a 	bl	8018058 <pbuf_header_impl>
}
 8018224:	bd08      	pop	{r3, pc}

08018226 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8018226:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 8018228:	2201      	movs	r2, #1
 801822a:	f7ff ff15 	bl	8018058 <pbuf_header_impl>
}
 801822e:	bd08      	pop	{r3, pc}

08018230 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8018232:	b128      	cbz	r0, 8018240 <pbuf_free+0x10>
 8018234:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8018236:	7b03      	ldrb	r3, [r0, #12]
 8018238:	2b03      	cmp	r3, #3
 801823a:	d80b      	bhi.n	8018254 <pbuf_free+0x24>
{
 801823c:	2600      	movs	r6, #0
 801823e:	e01f      	b.n	8018280 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 8018240:	4b2b      	ldr	r3, [pc, #172]	; (80182f0 <pbuf_free+0xc0>)
 8018242:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018246:	492b      	ldr	r1, [pc, #172]	; (80182f4 <pbuf_free+0xc4>)
 8018248:	482b      	ldr	r0, [pc, #172]	; (80182f8 <pbuf_free+0xc8>)
 801824a:	f007 f872 	bl	801f332 <iprintf>
    return 0;
 801824e:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8018250:	4630      	mov	r0, r6
 8018252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8018254:	4b26      	ldr	r3, [pc, #152]	; (80182f0 <pbuf_free+0xc0>)
 8018256:	f240 22de 	movw	r2, #734	; 0x2de
 801825a:	4928      	ldr	r1, [pc, #160]	; (80182fc <pbuf_free+0xcc>)
 801825c:	4826      	ldr	r0, [pc, #152]	; (80182f8 <pbuf_free+0xc8>)
 801825e:	f007 f868 	bl	801f332 <iprintf>
 8018262:	e7eb      	b.n	801823c <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018264:	4b22      	ldr	r3, [pc, #136]	; (80182f0 <pbuf_free+0xc0>)
 8018266:	f240 22eb 	movw	r2, #747	; 0x2eb
 801826a:	4925      	ldr	r1, [pc, #148]	; (8018300 <pbuf_free+0xd0>)
 801826c:	4822      	ldr	r0, [pc, #136]	; (80182f8 <pbuf_free+0xc8>)
 801826e:	f007 f860 	bl	801f332 <iprintf>
 8018272:	e00d      	b.n	8018290 <pbuf_free+0x60>
        pc->custom_free_function(p);
 8018274:	6923      	ldr	r3, [r4, #16]
 8018276:	4620      	mov	r0, r4
 8018278:	4798      	blx	r3
      count++;
 801827a:	3601      	adds	r6, #1
 801827c:	b2f6      	uxtb	r6, r6
      p = q;
 801827e:	462c      	mov	r4, r5
  while (p != NULL) {
 8018280:	2c00      	cmp	r4, #0
 8018282:	d0e5      	beq.n	8018250 <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 8018284:	f004 f9c0 	bl	801c608 <sys_arch_protect>
 8018288:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801828a:	89e3      	ldrh	r3, [r4, #14]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d0e9      	beq.n	8018264 <pbuf_free+0x34>
    ref = --(p->ref);
 8018290:	89e5      	ldrh	r5, [r4, #14]
 8018292:	3d01      	subs	r5, #1
 8018294:	b2ad      	uxth	r5, r5
 8018296:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8018298:	4638      	mov	r0, r7
 801829a:	f004 f9c1 	bl	801c620 <sys_arch_unprotect>
    if (ref == 0) {
 801829e:	bb25      	cbnz	r5, 80182ea <pbuf_free+0xba>
      q = p->next;
 80182a0:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 80182a2:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80182a4:	7b62      	ldrb	r2, [r4, #13]
 80182a6:	f012 0f02 	tst.w	r2, #2
 80182aa:	d00a      	beq.n	80182c2 <pbuf_free+0x92>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80182ac:	6923      	ldr	r3, [r4, #16]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d1e0      	bne.n	8018274 <pbuf_free+0x44>
 80182b2:	4b0f      	ldr	r3, [pc, #60]	; (80182f0 <pbuf_free+0xc0>)
 80182b4:	f240 22f9 	movw	r2, #761	; 0x2f9
 80182b8:	4912      	ldr	r1, [pc, #72]	; (8018304 <pbuf_free+0xd4>)
 80182ba:	480f      	ldr	r0, [pc, #60]	; (80182f8 <pbuf_free+0xc8>)
 80182bc:	f007 f839 	bl	801f332 <iprintf>
 80182c0:	e7d8      	b.n	8018274 <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 80182c2:	2b03      	cmp	r3, #3
 80182c4:	d007      	beq.n	80182d6 <pbuf_free+0xa6>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80182c6:	3b01      	subs	r3, #1
 80182c8:	b29b      	uxth	r3, r3
 80182ca:	2b01      	cmp	r3, #1
 80182cc:	d908      	bls.n	80182e0 <pbuf_free+0xb0>
          mem_free(p);
 80182ce:	4620      	mov	r0, r4
 80182d0:	f7ff fbba 	bl	8017a48 <mem_free>
 80182d4:	e7d1      	b.n	801827a <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 80182d6:	4621      	mov	r1, r4
 80182d8:	200b      	movs	r0, #11
 80182da:	f7ff fdd9 	bl	8017e90 <memp_free>
 80182de:	e7cc      	b.n	801827a <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 80182e0:	4621      	mov	r1, r4
 80182e2:	200a      	movs	r0, #10
 80182e4:	f7ff fdd4 	bl	8017e90 <memp_free>
 80182e8:	e7c7      	b.n	801827a <pbuf_free+0x4a>
      p = NULL;
 80182ea:	2400      	movs	r4, #0
 80182ec:	e7c8      	b.n	8018280 <pbuf_free+0x50>
 80182ee:	bf00      	nop
 80182f0:	08024a38 	.word	0x08024a38
 80182f4:	08020e78 	.word	0x08020e78
 80182f8:	08020b90 	.word	0x08020b90
 80182fc:	080249e4 	.word	0x080249e4
 8018300:	080249fc 	.word	0x080249fc
 8018304:	08024a14 	.word	0x08024a14

08018308 <pbuf_alloc>:
{
 8018308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801830c:	460d      	mov	r5, r1
 801830e:	4617      	mov	r7, r2
  switch (layer) {
 8018310:	2804      	cmp	r0, #4
 8018312:	d80a      	bhi.n	801832a <pbuf_alloc+0x22>
 8018314:	e8df f000 	tbb	[pc, r0]
 8018318:	05031412 	.word	0x05031412
 801831c:	07          	.byte	0x07
 801831d:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801831e:	240e      	movs	r4, #14
    break;
 8018320:	e00f      	b.n	8018342 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8018322:	2400      	movs	r4, #0
    break;
 8018324:	e00d      	b.n	8018342 <pbuf_alloc+0x3a>
    offset = 0;
 8018326:	2400      	movs	r4, #0
    break;
 8018328:	e00b      	b.n	8018342 <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 801832a:	4b64      	ldr	r3, [pc, #400]	; (80184bc <pbuf_alloc+0x1b4>)
 801832c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8018330:	4963      	ldr	r1, [pc, #396]	; (80184c0 <pbuf_alloc+0x1b8>)
 8018332:	4864      	ldr	r0, [pc, #400]	; (80184c4 <pbuf_alloc+0x1bc>)
 8018334:	f006 fffd 	bl	801f332 <iprintf>
    return NULL;
 8018338:	2600      	movs	r6, #0
 801833a:	e0b1      	b.n	80184a0 <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801833c:	2436      	movs	r4, #54	; 0x36
 801833e:	e000      	b.n	8018342 <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8018340:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 8018342:	2f03      	cmp	r7, #3
 8018344:	f200 80af 	bhi.w	80184a6 <pbuf_alloc+0x19e>
 8018348:	e8df f007 	tbb	[pc, r7]
 801834c:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8018350:	200b      	movs	r0, #11
 8018352:	f7ff fd83 	bl	8017e5c <memp_malloc>
    if (p == NULL) {
 8018356:	4606      	mov	r6, r0
 8018358:	b1f8      	cbz	r0, 801839a <pbuf_alloc+0x92>
    p->type = type;
 801835a:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 801835c:	2300      	movs	r3, #0
 801835e:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8018360:	f104 0310 	add.w	r3, r4, #16
 8018364:	4403      	add	r3, r0
 8018366:	3303      	adds	r3, #3
 8018368:	f023 0303 	bic.w	r3, r3, #3
 801836c:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 801836e:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8018370:	1ce2      	adds	r2, r4, #3
 8018372:	f022 0203 	bic.w	r2, r2, #3
 8018376:	f5c2 7242 	rsb	r2, r2, #776	; 0x308
 801837a:	42aa      	cmp	r2, r5
 801837c:	bf28      	it	cs
 801837e:	462a      	movcs	r2, r5
 8018380:	b292      	uxth	r2, r2
 8018382:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8018384:	4413      	add	r3, r2
 8018386:	f500 7846 	add.w	r8, r0, #792	; 0x318
 801838a:	4543      	cmp	r3, r8
 801838c:	d808      	bhi.n	80183a0 <pbuf_alloc+0x98>
    p->ref = 1;
 801838e:	2301      	movs	r3, #1
 8018390:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 8018392:	8973      	ldrh	r3, [r6, #10]
 8018394:	1aed      	subs	r5, r5, r3
    r = p;
 8018396:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 8018398:	e026      	b.n	80183e8 <pbuf_alloc+0xe0>
      PBUF_POOL_IS_EMPTY();
 801839a:	f7ff fec5 	bl	8018128 <pbuf_pool_is_empty>
      return NULL;
 801839e:	e07f      	b.n	80184a0 <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80183a0:	4b46      	ldr	r3, [pc, #280]	; (80184bc <pbuf_alloc+0x1b4>)
 80183a2:	f44f 7298 	mov.w	r2, #304	; 0x130
 80183a6:	4948      	ldr	r1, [pc, #288]	; (80184c8 <pbuf_alloc+0x1c0>)
 80183a8:	4846      	ldr	r0, [pc, #280]	; (80184c4 <pbuf_alloc+0x1bc>)
 80183aa:	f006 ffc2 	bl	801f332 <iprintf>
 80183ae:	e7ee      	b.n	801838e <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 80183b0:	f7ff feba 	bl	8018128 <pbuf_pool_is_empty>
        pbuf_free(p);
 80183b4:	4630      	mov	r0, r6
 80183b6:	f7ff ff3b 	bl	8018230 <pbuf_free>
        return NULL;
 80183ba:	4626      	mov	r6, r4
 80183bc:	e070      	b.n	80184a0 <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80183be:	4b3f      	ldr	r3, [pc, #252]	; (80184bc <pbuf_alloc+0x1b4>)
 80183c0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80183c4:	4941      	ldr	r1, [pc, #260]	; (80184cc <pbuf_alloc+0x1c4>)
 80183c6:	483f      	ldr	r0, [pc, #252]	; (80184c4 <pbuf_alloc+0x1bc>)
 80183c8:	f006 ffb3 	bl	801f332 <iprintf>
 80183cc:	e01e      	b.n	801840c <pbuf_alloc+0x104>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80183ce:	4b3b      	ldr	r3, [pc, #236]	; (80184bc <pbuf_alloc+0x1b4>)
 80183d0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80183d4:	493e      	ldr	r1, [pc, #248]	; (80184d0 <pbuf_alloc+0x1c8>)
 80183d6:	483b      	ldr	r0, [pc, #236]	; (80184c4 <pbuf_alloc+0x1bc>)
 80183d8:	f006 ffab 	bl	801f332 <iprintf>
 80183dc:	e024      	b.n	8018428 <pbuf_alloc+0x120>
      q->ref = 1;
 80183de:	2301      	movs	r3, #1
 80183e0:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 80183e2:	8963      	ldrh	r3, [r4, #10]
 80183e4:	1aed      	subs	r5, r5, r3
      r = q;
 80183e6:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 80183e8:	2d00      	cmp	r5, #0
 80183ea:	dd55      	ble.n	8018498 <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80183ec:	200b      	movs	r0, #11
 80183ee:	f7ff fd35 	bl	8017e5c <memp_malloc>
      if (q == NULL) {
 80183f2:	4604      	mov	r4, r0
 80183f4:	2800      	cmp	r0, #0
 80183f6:	d0db      	beq.n	80183b0 <pbuf_alloc+0xa8>
      q->type = type;
 80183f8:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 80183fa:	2300      	movs	r3, #0
 80183fc:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 80183fe:	6003      	str	r3, [r0, #0]
      r->next = q;
 8018400:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8018404:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018408:	429d      	cmp	r5, r3
 801840a:	dcd8      	bgt.n	80183be <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 801840c:	b2ab      	uxth	r3, r5
 801840e:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8018410:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 8018414:	bf28      	it	cs
 8018416:	f44f 7342 	movcs.w	r3, #776	; 0x308
 801841a:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 801841c:	f104 0310 	add.w	r3, r4, #16
 8018420:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8018422:	f013 0f03 	tst.w	r3, #3
 8018426:	d1d2      	bne.n	80183ce <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8018428:	6873      	ldr	r3, [r6, #4]
 801842a:	8972      	ldrh	r2, [r6, #10]
 801842c:	4413      	add	r3, r2
 801842e:	4598      	cmp	r8, r3
 8018430:	d2d5      	bcs.n	80183de <pbuf_alloc+0xd6>
 8018432:	4b22      	ldr	r3, [pc, #136]	; (80184bc <pbuf_alloc+0x1b4>)
 8018434:	f240 1255 	movw	r2, #341	; 0x155
 8018438:	4923      	ldr	r1, [pc, #140]	; (80184c8 <pbuf_alloc+0x1c0>)
 801843a:	4822      	ldr	r0, [pc, #136]	; (80184c4 <pbuf_alloc+0x1bc>)
 801843c:	f006 ff79 	bl	801f332 <iprintf>
 8018440:	e7cd      	b.n	80183de <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8018442:	f104 0013 	add.w	r0, r4, #19
 8018446:	f020 0003 	bic.w	r0, r0, #3
 801844a:	b283      	uxth	r3, r0
 801844c:	1cea      	adds	r2, r5, #3
 801844e:	b290      	uxth	r0, r2
 8018450:	f020 0003 	bic.w	r0, r0, #3
 8018454:	4418      	add	r0, r3
 8018456:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8018458:	f022 0203 	bic.w	r2, r2, #3
 801845c:	4290      	cmp	r0, r2
 801845e:	d32b      	bcc.n	80184b8 <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8018460:	f7ff fbec 	bl	8017c3c <mem_malloc>
    if (p == NULL) {
 8018464:	4606      	mov	r6, r0
 8018466:	b1d8      	cbz	r0, 80184a0 <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8018468:	f104 0310 	add.w	r3, r4, #16
 801846c:	4403      	add	r3, r0
 801846e:	3303      	adds	r3, #3
 8018470:	f023 0303 	bic.w	r3, r3, #3
 8018474:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8018476:	8105      	strh	r5, [r0, #8]
 8018478:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 801847a:	2300      	movs	r3, #0
 801847c:	6003      	str	r3, [r0, #0]
    p->type = type;
 801847e:	7307      	strb	r7, [r0, #12]
 8018480:	e00a      	b.n	8018498 <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8018482:	200a      	movs	r0, #10
 8018484:	f7ff fcea 	bl	8017e5c <memp_malloc>
    if (p == NULL) {
 8018488:	4606      	mov	r6, r0
 801848a:	b148      	cbz	r0, 80184a0 <pbuf_alloc+0x198>
    p->payload = NULL;
 801848c:	2300      	movs	r3, #0
 801848e:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8018490:	8105      	strh	r5, [r0, #8]
 8018492:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8018494:	6003      	str	r3, [r0, #0]
    p->type = type;
 8018496:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 8018498:	2301      	movs	r3, #1
 801849a:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 801849c:	2300      	movs	r3, #0
 801849e:	7373      	strb	r3, [r6, #13]
}
 80184a0:	4630      	mov	r0, r6
 80184a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80184a6:	4b05      	ldr	r3, [pc, #20]	; (80184bc <pbuf_alloc+0x1b4>)
 80184a8:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80184ac:	4909      	ldr	r1, [pc, #36]	; (80184d4 <pbuf_alloc+0x1cc>)
 80184ae:	4805      	ldr	r0, [pc, #20]	; (80184c4 <pbuf_alloc+0x1bc>)
 80184b0:	f006 ff3f 	bl	801f332 <iprintf>
    return NULL;
 80184b4:	2600      	movs	r6, #0
 80184b6:	e7f3      	b.n	80184a0 <pbuf_alloc+0x198>
        return NULL;
 80184b8:	2600      	movs	r6, #0
 80184ba:	e7f1      	b.n	80184a0 <pbuf_alloc+0x198>
 80184bc:	08024a38 	.word	0x08024a38
 80184c0:	08024780 	.word	0x08024780
 80184c4:	08020b90 	.word	0x08020b90
 80184c8:	0802479c 	.word	0x0802479c
 80184cc:	08024804 	.word	0x08024804
 80184d0:	08024818 	.word	0x08024818
 80184d4:	08024848 	.word	0x08024848

080184d8 <pbuf_realloc>:
{
 80184d8:	b570      	push	{r4, r5, r6, lr}
 80184da:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80184dc:	4604      	mov	r4, r0
 80184de:	b198      	cbz	r0, 8018508 <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80184e0:	7b23      	ldrb	r3, [r4, #12]
 80184e2:	2b03      	cmp	r3, #3
 80184e4:	d00b      	beq.n	80184fe <pbuf_realloc+0x26>
 80184e6:	2b01      	cmp	r3, #1
 80184e8:	d009      	beq.n	80184fe <pbuf_realloc+0x26>
 80184ea:	b143      	cbz	r3, 80184fe <pbuf_realloc+0x26>
 80184ec:	2b02      	cmp	r3, #2
 80184ee:	d006      	beq.n	80184fe <pbuf_realloc+0x26>
 80184f0:	4b2b      	ldr	r3, [pc, #172]	; (80185a0 <pbuf_realloc+0xc8>)
 80184f2:	f240 12f7 	movw	r2, #503	; 0x1f7
 80184f6:	492b      	ldr	r1, [pc, #172]	; (80185a4 <pbuf_realloc+0xcc>)
 80184f8:	482b      	ldr	r0, [pc, #172]	; (80185a8 <pbuf_realloc+0xd0>)
 80184fa:	f006 ff1a 	bl	801f332 <iprintf>
  if (new_len >= p->tot_len) {
 80184fe:	8926      	ldrh	r6, [r4, #8]
 8018500:	42ae      	cmp	r6, r5
 8018502:	d938      	bls.n	8018576 <pbuf_realloc+0x9e>
  grow = new_len - p->tot_len;
 8018504:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8018506:	e00d      	b.n	8018524 <pbuf_realloc+0x4c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018508:	4b25      	ldr	r3, [pc, #148]	; (80185a0 <pbuf_realloc+0xc8>)
 801850a:	f240 12f3 	movw	r2, #499	; 0x1f3
 801850e:	4927      	ldr	r1, [pc, #156]	; (80185ac <pbuf_realloc+0xd4>)
 8018510:	4825      	ldr	r0, [pc, #148]	; (80185a8 <pbuf_realloc+0xd0>)
 8018512:	f006 ff0e 	bl	801f332 <iprintf>
 8018516:	e7e3      	b.n	80184e0 <pbuf_realloc+0x8>
    q->tot_len += (u16_t)grow;
 8018518:	8923      	ldrh	r3, [r4, #8]
 801851a:	fa13 f386 	uxtah	r3, r3, r6
 801851e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8018520:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018522:	b184      	cbz	r4, 8018546 <pbuf_realloc+0x6e>
  while (rem_len > q->len) {
 8018524:	8961      	ldrh	r1, [r4, #10]
 8018526:	428d      	cmp	r5, r1
 8018528:	d915      	bls.n	8018556 <pbuf_realloc+0x7e>
    rem_len -= q->len;
 801852a:	1a69      	subs	r1, r5, r1
 801852c:	b28d      	uxth	r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 801852e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018532:	429e      	cmp	r6, r3
 8018534:	ddf0      	ble.n	8018518 <pbuf_realloc+0x40>
 8018536:	4b1a      	ldr	r3, [pc, #104]	; (80185a0 <pbuf_realloc+0xc8>)
 8018538:	f240 220b 	movw	r2, #523	; 0x20b
 801853c:	491c      	ldr	r1, [pc, #112]	; (80185b0 <pbuf_realloc+0xd8>)
 801853e:	481a      	ldr	r0, [pc, #104]	; (80185a8 <pbuf_realloc+0xd0>)
 8018540:	f006 fef7 	bl	801f332 <iprintf>
 8018544:	e7e8      	b.n	8018518 <pbuf_realloc+0x40>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018546:	4b16      	ldr	r3, [pc, #88]	; (80185a0 <pbuf_realloc+0xc8>)
 8018548:	f240 220f 	movw	r2, #527	; 0x20f
 801854c:	4919      	ldr	r1, [pc, #100]	; (80185b4 <pbuf_realloc+0xdc>)
 801854e:	4816      	ldr	r0, [pc, #88]	; (80185a8 <pbuf_realloc+0xd0>)
 8018550:	f006 feef 	bl	801f332 <iprintf>
 8018554:	e7e6      	b.n	8018524 <pbuf_realloc+0x4c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8018556:	7b23      	ldrb	r3, [r4, #12]
 8018558:	b92b      	cbnz	r3, 8018566 <pbuf_realloc+0x8e>
 801855a:	428d      	cmp	r5, r1
 801855c:	d003      	beq.n	8018566 <pbuf_realloc+0x8e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801855e:	7b63      	ldrb	r3, [r4, #13]
 8018560:	f013 0f02 	tst.w	r3, #2
 8018564:	d008      	beq.n	8018578 <pbuf_realloc+0xa0>
  q->len = rem_len;
 8018566:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8018568:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801856a:	6820      	ldr	r0, [r4, #0]
 801856c:	b108      	cbz	r0, 8018572 <pbuf_realloc+0x9a>
    pbuf_free(q->next);
 801856e:	f7ff fe5f 	bl	8018230 <pbuf_free>
  q->next = NULL;
 8018572:	2300      	movs	r3, #0
 8018574:	6023      	str	r3, [r4, #0]
 8018576:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8018578:	6863      	ldr	r3, [r4, #4]
 801857a:	1b1b      	subs	r3, r3, r4
 801857c:	fa15 f183 	uxtah	r1, r5, r3
 8018580:	b289      	uxth	r1, r1
 8018582:	4620      	mov	r0, r4
 8018584:	f7ff fabe 	bl	8017b04 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8018588:	4604      	mov	r4, r0
 801858a:	2800      	cmp	r0, #0
 801858c:	d1eb      	bne.n	8018566 <pbuf_realloc+0x8e>
 801858e:	4b04      	ldr	r3, [pc, #16]	; (80185a0 <pbuf_realloc+0xc8>)
 8018590:	f240 221d 	movw	r2, #541	; 0x21d
 8018594:	4908      	ldr	r1, [pc, #32]	; (80185b8 <pbuf_realloc+0xe0>)
 8018596:	4804      	ldr	r0, [pc, #16]	; (80185a8 <pbuf_realloc+0xd0>)
 8018598:	f006 fecb 	bl	801f332 <iprintf>
 801859c:	e7e3      	b.n	8018566 <pbuf_realloc+0x8e>
 801859e:	bf00      	nop
 80185a0:	08024a38 	.word	0x08024a38
 80185a4:	08024ab0 	.word	0x08024ab0
 80185a8:	08020b90 	.word	0x08020b90
 80185ac:	08024a98 	.word	0x08024a98
 80185b0:	08024acc 	.word	0x08024acc
 80185b4:	08024ae0 	.word	0x08024ae0
 80185b8:	08024af8 	.word	0x08024af8

080185bc <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 80185bc:	2300      	movs	r3, #0
  while (p != NULL) {
 80185be:	e002      	b.n	80185c6 <pbuf_clen+0xa>
    ++len;
 80185c0:	3301      	adds	r3, #1
 80185c2:	b29b      	uxth	r3, r3
    p = p->next;
 80185c4:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 80185c6:	2800      	cmp	r0, #0
 80185c8:	d1fa      	bne.n	80185c0 <pbuf_clen+0x4>
  }
  return len;
}
 80185ca:	4618      	mov	r0, r3
 80185cc:	4770      	bx	lr
	...

080185d0 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 80185d0:	b198      	cbz	r0, 80185fa <pbuf_ref+0x2a>
{
 80185d2:	b510      	push	{r4, lr}
 80185d4:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 80185d6:	f004 f817 	bl	801c608 <sys_arch_protect>
 80185da:	89e3      	ldrh	r3, [r4, #14]
 80185dc:	3301      	adds	r3, #1
 80185de:	81e3      	strh	r3, [r4, #14]
 80185e0:	f004 f81e 	bl	801c620 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80185e4:	89e3      	ldrh	r3, [r4, #14]
 80185e6:	b103      	cbz	r3, 80185ea <pbuf_ref+0x1a>
 80185e8:	bd10      	pop	{r4, pc}
 80185ea:	4b04      	ldr	r3, [pc, #16]	; (80185fc <pbuf_ref+0x2c>)
 80185ec:	f240 3239 	movw	r2, #825	; 0x339
 80185f0:	4903      	ldr	r1, [pc, #12]	; (8018600 <pbuf_ref+0x30>)
 80185f2:	4804      	ldr	r0, [pc, #16]	; (8018604 <pbuf_ref+0x34>)
 80185f4:	f006 fe9d 	bl	801f332 <iprintf>
  }
}
 80185f8:	e7f6      	b.n	80185e8 <pbuf_ref+0x18>
 80185fa:	4770      	bx	lr
 80185fc:	08024a38 	.word	0x08024a38
 8018600:	08024b14 	.word	0x08024b14
 8018604:	08020b90 	.word	0x08020b90

08018608 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018608:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801860a:	b110      	cbz	r0, 8018612 <pbuf_cat+0xa>
 801860c:	460d      	mov	r5, r1
 801860e:	4604      	mov	r4, r0
 8018610:	b961      	cbnz	r1, 801862c <pbuf_cat+0x24>
 8018612:	4b15      	ldr	r3, [pc, #84]	; (8018668 <pbuf_cat+0x60>)
 8018614:	f240 324d 	movw	r2, #845	; 0x34d
 8018618:	4914      	ldr	r1, [pc, #80]	; (801866c <pbuf_cat+0x64>)
 801861a:	4815      	ldr	r0, [pc, #84]	; (8018670 <pbuf_cat+0x68>)
 801861c:	f006 fe89 	bl	801f332 <iprintf>
 8018620:	bd38      	pop	{r3, r4, r5, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8018622:	892b      	ldrh	r3, [r5, #8]
 8018624:	8921      	ldrh	r1, [r4, #8]
 8018626:	440b      	add	r3, r1
 8018628:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801862a:	4614      	mov	r4, r2
 801862c:	6822      	ldr	r2, [r4, #0]
 801862e:	2a00      	cmp	r2, #0
 8018630:	d1f7      	bne.n	8018622 <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8018632:	8922      	ldrh	r2, [r4, #8]
 8018634:	8963      	ldrh	r3, [r4, #10]
 8018636:	429a      	cmp	r2, r3
 8018638:	d006      	beq.n	8018648 <pbuf_cat+0x40>
 801863a:	4b0b      	ldr	r3, [pc, #44]	; (8018668 <pbuf_cat+0x60>)
 801863c:	f240 3255 	movw	r2, #853	; 0x355
 8018640:	490c      	ldr	r1, [pc, #48]	; (8018674 <pbuf_cat+0x6c>)
 8018642:	480b      	ldr	r0, [pc, #44]	; (8018670 <pbuf_cat+0x68>)
 8018644:	f006 fe75 	bl	801f332 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8018648:	6823      	ldr	r3, [r4, #0]
 801864a:	b133      	cbz	r3, 801865a <pbuf_cat+0x52>
 801864c:	4b06      	ldr	r3, [pc, #24]	; (8018668 <pbuf_cat+0x60>)
 801864e:	f240 3256 	movw	r2, #854	; 0x356
 8018652:	4909      	ldr	r1, [pc, #36]	; (8018678 <pbuf_cat+0x70>)
 8018654:	4806      	ldr	r0, [pc, #24]	; (8018670 <pbuf_cat+0x68>)
 8018656:	f006 fe6c 	bl	801f332 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 801865a:	892b      	ldrh	r3, [r5, #8]
 801865c:	8922      	ldrh	r2, [r4, #8]
 801865e:	4413      	add	r3, r2
 8018660:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8018662:	6025      	str	r5, [r4, #0]
 8018664:	bd38      	pop	{r3, r4, r5, pc}
 8018666:	bf00      	nop
 8018668:	08024a38 	.word	0x08024a38
 801866c:	08024888 	.word	0x08024888
 8018670:	08020b90 	.word	0x08020b90
 8018674:	080248c0 	.word	0x080248c0
 8018678:	080248f0 	.word	0x080248f0

0801867c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8018680:	b150      	cbz	r0, 8018698 <pbuf_copy+0x1c>
 8018682:	460d      	mov	r5, r1
 8018684:	4607      	mov	r7, r0
 8018686:	b139      	cbz	r1, 8018698 <pbuf_copy+0x1c>
 8018688:	8902      	ldrh	r2, [r0, #8]
 801868a:	890b      	ldrh	r3, [r1, #8]
 801868c:	429a      	cmp	r2, r3
 801868e:	d303      	bcc.n	8018698 <pbuf_copy+0x1c>
 8018690:	f04f 0800 	mov.w	r8, #0
 8018694:	4646      	mov	r6, r8
 8018696:	e02c      	b.n	80186f2 <pbuf_copy+0x76>
 8018698:	4b3f      	ldr	r3, [pc, #252]	; (8018798 <pbuf_copy+0x11c>)
 801869a:	f240 32bd 	movw	r2, #957	; 0x3bd
 801869e:	493f      	ldr	r1, [pc, #252]	; (801879c <pbuf_copy+0x120>)
 80186a0:	483f      	ldr	r0, [pc, #252]	; (80187a0 <pbuf_copy+0x124>)
 80186a2:	f006 fe46 	bl	801f332 <iprintf>
 80186a6:	f06f 000f 	mvn.w	r0, #15
 80186aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80186ae:	1b9b      	subs	r3, r3, r6
 80186b0:	b29c      	uxth	r4, r3
 80186b2:	e026      	b.n	8018702 <pbuf_copy+0x86>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80186b4:	4b38      	ldr	r3, [pc, #224]	; (8018798 <pbuf_copy+0x11c>)
 80186b6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80186ba:	493a      	ldr	r1, [pc, #232]	; (80187a4 <pbuf_copy+0x128>)
 80186bc:	4838      	ldr	r0, [pc, #224]	; (80187a0 <pbuf_copy+0x124>)
 80186be:	f006 fe38 	bl	801f332 <iprintf>
 80186c2:	e02d      	b.n	8018720 <pbuf_copy+0xa4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80186c4:	4b34      	ldr	r3, [pc, #208]	; (8018798 <pbuf_copy+0x11c>)
 80186c6:	f240 32ce 	movw	r2, #974	; 0x3ce
 80186ca:	4937      	ldr	r1, [pc, #220]	; (80187a8 <pbuf_copy+0x12c>)
 80186cc:	4834      	ldr	r0, [pc, #208]	; (80187a0 <pbuf_copy+0x124>)
 80186ce:	f006 fe30 	bl	801f332 <iprintf>
 80186d2:	e028      	b.n	8018726 <pbuf_copy+0xaa>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80186d4:	897b      	ldrh	r3, [r7, #10]
 80186d6:	429e      	cmp	r6, r3
 80186d8:	d02c      	beq.n	8018734 <pbuf_copy+0xb8>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80186da:	b11d      	cbz	r5, 80186e4 <pbuf_copy+0x68>
 80186dc:	896a      	ldrh	r2, [r5, #10]
 80186de:	892b      	ldrh	r3, [r5, #8]
 80186e0:	429a      	cmp	r2, r3
 80186e2:	d039      	beq.n	8018758 <pbuf_copy+0xdc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80186e4:	b11f      	cbz	r7, 80186ee <pbuf_copy+0x72>
 80186e6:	897a      	ldrh	r2, [r7, #10]
 80186e8:	893b      	ldrh	r3, [r7, #8]
 80186ea:	429a      	cmp	r2, r3
 80186ec:	d042      	beq.n	8018774 <pbuf_copy+0xf8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80186ee:	2d00      	cmp	r5, #0
 80186f0:	d04e      	beq.n	8018790 <pbuf_copy+0x114>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80186f2:	897b      	ldrh	r3, [r7, #10]
 80186f4:	1b99      	subs	r1, r3, r6
 80186f6:	896c      	ldrh	r4, [r5, #10]
 80186f8:	eba4 0208 	sub.w	r2, r4, r8
 80186fc:	4291      	cmp	r1, r2
 80186fe:	dbd6      	blt.n	80186ae <pbuf_copy+0x32>
      len = p_from->len - offset_from;
 8018700:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8018702:	6878      	ldr	r0, [r7, #4]
 8018704:	6869      	ldr	r1, [r5, #4]
 8018706:	4622      	mov	r2, r4
 8018708:	4441      	add	r1, r8
 801870a:	4430      	add	r0, r6
 801870c:	f007 fc55 	bl	801ffba <memcpy>
    offset_to += len;
 8018710:	4426      	add	r6, r4
 8018712:	b2b6      	uxth	r6, r6
    offset_from += len;
 8018714:	4444      	add	r4, r8
 8018716:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801871a:	897b      	ldrh	r3, [r7, #10]
 801871c:	429e      	cmp	r6, r3
 801871e:	d8c9      	bhi.n	80186b4 <pbuf_copy+0x38>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8018720:	896b      	ldrh	r3, [r5, #10]
 8018722:	4598      	cmp	r8, r3
 8018724:	d8ce      	bhi.n	80186c4 <pbuf_copy+0x48>
    if (offset_from >= p_from->len) {
 8018726:	896b      	ldrh	r3, [r5, #10]
 8018728:	4598      	cmp	r8, r3
 801872a:	d3d3      	bcc.n	80186d4 <pbuf_copy+0x58>
      p_from = p_from->next;
 801872c:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 801872e:	f04f 0800 	mov.w	r8, #0
 8018732:	e7cf      	b.n	80186d4 <pbuf_copy+0x58>
      p_to = p_to->next;
 8018734:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8018736:	b10f      	cbz	r7, 801873c <pbuf_copy+0xc0>
      offset_to = 0;
 8018738:	2600      	movs	r6, #0
 801873a:	e7ce      	b.n	80186da <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 801873c:	b90d      	cbnz	r5, 8018742 <pbuf_copy+0xc6>
      offset_to = 0;
 801873e:	2600      	movs	r6, #0
 8018740:	e7cb      	b.n	80186da <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8018742:	4b15      	ldr	r3, [pc, #84]	; (8018798 <pbuf_copy+0x11c>)
 8018744:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8018748:	4918      	ldr	r1, [pc, #96]	; (80187ac <pbuf_copy+0x130>)
 801874a:	4815      	ldr	r0, [pc, #84]	; (80187a0 <pbuf_copy+0x124>)
 801874c:	f006 fdf1 	bl	801f332 <iprintf>
 8018750:	f06f 000f 	mvn.w	r0, #15
 8018754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018758:	682b      	ldr	r3, [r5, #0]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d0c2      	beq.n	80186e4 <pbuf_copy+0x68>
 801875e:	4b0e      	ldr	r3, [pc, #56]	; (8018798 <pbuf_copy+0x11c>)
 8018760:	f240 32de 	movw	r2, #990	; 0x3de
 8018764:	4912      	ldr	r1, [pc, #72]	; (80187b0 <pbuf_copy+0x134>)
 8018766:	480e      	ldr	r0, [pc, #56]	; (80187a0 <pbuf_copy+0x124>)
 8018768:	f006 fde3 	bl	801f332 <iprintf>
 801876c:	f06f 0005 	mvn.w	r0, #5
 8018770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018774:	683b      	ldr	r3, [r7, #0]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d0b9      	beq.n	80186ee <pbuf_copy+0x72>
 801877a:	4b07      	ldr	r3, [pc, #28]	; (8018798 <pbuf_copy+0x11c>)
 801877c:	f240 32e3 	movw	r2, #995	; 0x3e3
 8018780:	490b      	ldr	r1, [pc, #44]	; (80187b0 <pbuf_copy+0x134>)
 8018782:	4807      	ldr	r0, [pc, #28]	; (80187a0 <pbuf_copy+0x124>)
 8018784:	f006 fdd5 	bl	801f332 <iprintf>
 8018788:	f06f 0005 	mvn.w	r0, #5
 801878c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8018790:	2000      	movs	r0, #0
}
 8018792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018796:	bf00      	nop
 8018798:	08024a38 	.word	0x08024a38
 801879c:	08024900 	.word	0x08024900
 80187a0:	08020b90 	.word	0x08020b90
 80187a4:	08024930 	.word	0x08024930
 80187a8:	08024948 	.word	0x08024948
 80187ac:	08024964 	.word	0x08024964
 80187b0:	08024974 	.word	0x08024974

080187b4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80187b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80187b8:	b128      	cbz	r0, 80187c6 <pbuf_copy_partial+0x12>
 80187ba:	460f      	mov	r7, r1
 80187bc:	4690      	mov	r8, r2
 80187be:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80187c0:	b161      	cbz	r1, 80187dc <pbuf_copy_partial+0x28>
 80187c2:	2600      	movs	r6, #0
 80187c4:	e027      	b.n	8018816 <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80187c6:	4b1a      	ldr	r3, [pc, #104]	; (8018830 <pbuf_copy_partial+0x7c>)
 80187c8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80187cc:	4919      	ldr	r1, [pc, #100]	; (8018834 <pbuf_copy_partial+0x80>)
 80187ce:	481a      	ldr	r0, [pc, #104]	; (8018838 <pbuf_copy_partial+0x84>)
 80187d0:	f006 fdaf 	bl	801f332 <iprintf>
 80187d4:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 80187d6:	4630      	mov	r0, r6
 80187d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80187dc:	4b14      	ldr	r3, [pc, #80]	; (8018830 <pbuf_copy_partial+0x7c>)
 80187de:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80187e2:	4916      	ldr	r1, [pc, #88]	; (801883c <pbuf_copy_partial+0x88>)
 80187e4:	4814      	ldr	r0, [pc, #80]	; (8018838 <pbuf_copy_partial+0x84>)
 80187e6:	f006 fda4 	bl	801f332 <iprintf>
 80187ea:	2600      	movs	r6, #0
 80187ec:	e7f3      	b.n	80187d6 <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 80187ee:	896a      	ldrh	r2, [r5, #10]
 80187f0:	1ad2      	subs	r2, r2, r3
 80187f2:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 80187f4:	45a0      	cmp	r8, r4
 80187f6:	d200      	bcs.n	80187fa <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 80187f8:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80187fa:	6869      	ldr	r1, [r5, #4]
 80187fc:	4622      	mov	r2, r4
 80187fe:	4419      	add	r1, r3
 8018800:	19b8      	adds	r0, r7, r6
 8018802:	f007 fbda 	bl	801ffba <memcpy>
      copied_total += buf_copy_len;
 8018806:	4426      	add	r6, r4
 8018808:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 801880a:	eba8 0404 	sub.w	r4, r8, r4
 801880e:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8018812:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018814:	682d      	ldr	r5, [r5, #0]
 8018816:	f1b8 0f00 	cmp.w	r8, #0
 801881a:	d0dc      	beq.n	80187d6 <pbuf_copy_partial+0x22>
 801881c:	2d00      	cmp	r5, #0
 801881e:	d0da      	beq.n	80187d6 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 8018820:	2b00      	cmp	r3, #0
 8018822:	d0e4      	beq.n	80187ee <pbuf_copy_partial+0x3a>
 8018824:	8969      	ldrh	r1, [r5, #10]
 8018826:	428b      	cmp	r3, r1
 8018828:	d3e1      	bcc.n	80187ee <pbuf_copy_partial+0x3a>
      offset -= p->len;
 801882a:	1a5b      	subs	r3, r3, r1
 801882c:	b29b      	uxth	r3, r3
 801882e:	e7f1      	b.n	8018814 <pbuf_copy_partial+0x60>
 8018830:	08024a38 	.word	0x08024a38
 8018834:	080249a0 	.word	0x080249a0
 8018838:	08020b90 	.word	0x08020b90
 801883c:	080249c0 	.word	0x080249c0

08018840 <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018840:	e000      	b.n	8018844 <tcp_remove_listener+0x4>
 8018842:	68c0      	ldr	r0, [r0, #12]
 8018844:	b128      	cbz	r0, 8018852 <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 8018846:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8018848:	428b      	cmp	r3, r1
 801884a:	d1fa      	bne.n	8018842 <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 801884c:	2300      	movs	r3, #0
 801884e:	6783      	str	r3, [r0, #120]	; 0x78
 8018850:	e7f7      	b.n	8018842 <tcp_remove_listener+0x2>
      }
   }
}
 8018852:	4770      	bx	lr

08018854 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8018854:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 8018856:	2400      	movs	r4, #0
 8018858:	e009      	b.n	801886e <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801885a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801885e:	4b14      	ldr	r3, [pc, #80]	; (80188b0 <tcp_new_port+0x5c>)
 8018860:	801a      	strh	r2, [r3, #0]
 8018862:	e00c      	b.n	801887e <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018864:	3401      	adds	r4, #1
 8018866:	b2a4      	uxth	r4, r4
 8018868:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 801886c:	d21e      	bcs.n	80188ac <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801886e:	4a10      	ldr	r2, [pc, #64]	; (80188b0 <tcp_new_port+0x5c>)
 8018870:	8813      	ldrh	r3, [r2, #0]
 8018872:	1c59      	adds	r1, r3, #1
 8018874:	8011      	strh	r1, [r2, #0]
 8018876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801887a:	4293      	cmp	r3, r2
 801887c:	d0ed      	beq.n	801885a <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801887e:	2000      	movs	r0, #0
 8018880:	2803      	cmp	r0, #3
 8018882:	d80e      	bhi.n	80188a2 <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018884:	4b0b      	ldr	r3, [pc, #44]	; (80188b4 <tcp_new_port+0x60>)
 8018886:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	b133      	cbz	r3, 801889c <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 801888e:	8ad9      	ldrh	r1, [r3, #22]
 8018890:	4a07      	ldr	r2, [pc, #28]	; (80188b0 <tcp_new_port+0x5c>)
 8018892:	8812      	ldrh	r2, [r2, #0]
 8018894:	4291      	cmp	r1, r2
 8018896:	d0e5      	beq.n	8018864 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018898:	68db      	ldr	r3, [r3, #12]
 801889a:	e7f7      	b.n	801888c <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801889c:	3001      	adds	r0, #1
 801889e:	b2c0      	uxtb	r0, r0
 80188a0:	e7ee      	b.n	8018880 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80188a2:	4b03      	ldr	r3, [pc, #12]	; (80188b0 <tcp_new_port+0x5c>)
 80188a4:	8818      	ldrh	r0, [r3, #0]
}
 80188a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188aa:	4770      	bx	lr
          return 0;
 80188ac:	2000      	movs	r0, #0
 80188ae:	e7fa      	b.n	80188a6 <tcp_new_port+0x52>
 80188b0:	2000000c 	.word	0x2000000c
 80188b4:	08024c60 	.word	0x08024c60

080188b8 <tcp_listen_closed>:
{
 80188b8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80188ba:	4605      	mov	r5, r0
 80188bc:	b150      	cbz	r0, 80188d4 <tcp_listen_closed+0x1c>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80188be:	7d2b      	ldrb	r3, [r5, #20]
 80188c0:	2b01      	cmp	r3, #1
 80188c2:	d005      	beq.n	80188d0 <tcp_listen_closed+0x18>
 80188c4:	4b0c      	ldr	r3, [pc, #48]	; (80188f8 <tcp_listen_closed+0x40>)
 80188c6:	22c1      	movs	r2, #193	; 0xc1
 80188c8:	490c      	ldr	r1, [pc, #48]	; (80188fc <tcp_listen_closed+0x44>)
 80188ca:	480d      	ldr	r0, [pc, #52]	; (8018900 <tcp_listen_closed+0x48>)
 80188cc:	f006 fd31 	bl	801f332 <iprintf>
{
 80188d0:	2401      	movs	r4, #1
 80188d2:	e00e      	b.n	80188f2 <tcp_listen_closed+0x3a>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80188d4:	4b08      	ldr	r3, [pc, #32]	; (80188f8 <tcp_listen_closed+0x40>)
 80188d6:	22c0      	movs	r2, #192	; 0xc0
 80188d8:	490a      	ldr	r1, [pc, #40]	; (8018904 <tcp_listen_closed+0x4c>)
 80188da:	4809      	ldr	r0, [pc, #36]	; (8018900 <tcp_listen_closed+0x48>)
 80188dc:	f006 fd29 	bl	801f332 <iprintf>
 80188e0:	e7ed      	b.n	80188be <tcp_listen_closed+0x6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80188e2:	4b09      	ldr	r3, [pc, #36]	; (8018908 <tcp_listen_closed+0x50>)
 80188e4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80188e8:	4629      	mov	r1, r5
 80188ea:	6818      	ldr	r0, [r3, #0]
 80188ec:	f7ff ffa8 	bl	8018840 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80188f0:	3401      	adds	r4, #1
 80188f2:	2c03      	cmp	r4, #3
 80188f4:	d9f5      	bls.n	80188e2 <tcp_listen_closed+0x2a>
}
 80188f6:	bd38      	pop	{r3, r4, r5, pc}
 80188f8:	08024be8 	.word	0x08024be8
 80188fc:	08024c24 	.word	0x08024c24
 8018900:	08020b90 	.word	0x08020b90
 8018904:	08024c18 	.word	0x08024c18
 8018908:	08024c60 	.word	0x08024c60

0801890c <tcp_close_shutdown_fin>:
{
 801890c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801890e:	4604      	mov	r4, r0
 8018910:	b140      	cbz	r0, 8018924 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8018912:	7d23      	ldrb	r3, [r4, #20]
 8018914:	2b04      	cmp	r3, #4
 8018916:	d01a      	beq.n	801894e <tcp_close_shutdown_fin+0x42>
 8018918:	2b07      	cmp	r3, #7
 801891a:	d021      	beq.n	8018960 <tcp_close_shutdown_fin+0x54>
 801891c:	2b03      	cmp	r3, #3
 801891e:	d009      	beq.n	8018934 <tcp_close_shutdown_fin+0x28>
    return ERR_OK;
 8018920:	2500      	movs	r5, #0
 8018922:	e012      	b.n	801894a <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018924:	4b18      	ldr	r3, [pc, #96]	; (8018988 <tcp_close_shutdown_fin+0x7c>)
 8018926:	f240 124d 	movw	r2, #333	; 0x14d
 801892a:	4918      	ldr	r1, [pc, #96]	; (801898c <tcp_close_shutdown_fin+0x80>)
 801892c:	4818      	ldr	r0, [pc, #96]	; (8018990 <tcp_close_shutdown_fin+0x84>)
 801892e:	f006 fd00 	bl	801f332 <iprintf>
 8018932:	e7ee      	b.n	8018912 <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 8018934:	4620      	mov	r0, r4
 8018936:	f003 f893 	bl	801ba60 <tcp_send_fin>
    if (err == ERR_OK) {
 801893a:	4605      	mov	r5, r0
 801893c:	b908      	cbnz	r0, 8018942 <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 801893e:	2305      	movs	r3, #5
 8018940:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8018942:	b1b5      	cbz	r5, 8018972 <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 8018944:	f1b5 3fff 	cmp.w	r5, #4294967295
 8018948:	d017      	beq.n	801897a <tcp_close_shutdown_fin+0x6e>
}
 801894a:	4628      	mov	r0, r5
 801894c:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 801894e:	4620      	mov	r0, r4
 8018950:	f003 f886 	bl	801ba60 <tcp_send_fin>
    if (err == ERR_OK) {
 8018954:	4605      	mov	r5, r0
 8018956:	2800      	cmp	r0, #0
 8018958:	d1f3      	bne.n	8018942 <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 801895a:	2305      	movs	r3, #5
 801895c:	7523      	strb	r3, [r4, #20]
 801895e:	e7f0      	b.n	8018942 <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 8018960:	4620      	mov	r0, r4
 8018962:	f003 f87d 	bl	801ba60 <tcp_send_fin>
    if (err == ERR_OK) {
 8018966:	4605      	mov	r5, r0
 8018968:	2800      	cmp	r0, #0
 801896a:	d1ea      	bne.n	8018942 <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 801896c:	2309      	movs	r3, #9
 801896e:	7523      	strb	r3, [r4, #20]
 8018970:	e7e7      	b.n	8018942 <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 8018972:	4620      	mov	r0, r4
 8018974:	f003 f8d0 	bl	801bb18 <tcp_output>
 8018978:	e7e7      	b.n	801894a <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 801897a:	7ea3      	ldrb	r3, [r4, #26]
 801897c:	f043 0308 	orr.w	r3, r3, #8
 8018980:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8018982:	2500      	movs	r5, #0
 8018984:	e7e1      	b.n	801894a <tcp_close_shutdown_fin+0x3e>
 8018986:	bf00      	nop
 8018988:	08024be8 	.word	0x08024be8
 801898c:	08024c18 	.word	0x08024c18
 8018990:	08020b90 	.word	0x08020b90

08018994 <tcp_init>:
{
 8018994:	4770      	bx	lr
	...

08018998 <tcp_bind>:
{
 8018998:	b570      	push	{r4, r5, r6, lr}
 801899a:	4605      	mov	r5, r0
  if (ipaddr == NULL) {
 801899c:	460c      	mov	r4, r1
 801899e:	b171      	cbz	r1, 80189be <tcp_bind+0x26>
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80189a0:	2d00      	cmp	r5, #0
 80189a2:	d039      	beq.n	8018a18 <tcp_bind+0x80>
 80189a4:	2c00      	cmp	r4, #0
 80189a6:	d03a      	beq.n	8018a1e <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80189a8:	7d2b      	ldrb	r3, [r5, #20]
 80189aa:	b953      	cbnz	r3, 80189c2 <tcp_bind+0x2a>
  if (port == 0) {
 80189ac:	b19a      	cbz	r2, 80189d6 <tcp_bind+0x3e>
 80189ae:	2600      	movs	r6, #0
    for (i = 0; i < max_pcb_list; i++) {
 80189b0:	2e03      	cmp	r6, #3
 80189b2:	dc14      	bgt.n	80189de <tcp_bind+0x46>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80189b4:	4b21      	ldr	r3, [pc, #132]	; (8018a3c <tcp_bind+0xa4>)
 80189b6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	e01c      	b.n	80189f8 <tcp_bind+0x60>
    ipaddr = IP4_ADDR_ANY;
 80189be:	4c20      	ldr	r4, [pc, #128]	; (8018a40 <tcp_bind+0xa8>)
 80189c0:	e7ee      	b.n	80189a0 <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80189c2:	4b20      	ldr	r3, [pc, #128]	; (8018a44 <tcp_bind+0xac>)
 80189c4:	f44f 7211 	mov.w	r2, #580	; 0x244
 80189c8:	491f      	ldr	r1, [pc, #124]	; (8018a48 <tcp_bind+0xb0>)
 80189ca:	4820      	ldr	r0, [pc, #128]	; (8018a4c <tcp_bind+0xb4>)
 80189cc:	f006 fcb1 	bl	801f332 <iprintf>
 80189d0:	f06f 0005 	mvn.w	r0, #5
 80189d4:	bd70      	pop	{r4, r5, r6, pc}
    port = tcp_new_port();
 80189d6:	f7ff ff3d 	bl	8018854 <tcp_new_port>
    if (port == 0) {
 80189da:	4602      	mov	r2, r0
 80189dc:	b310      	cbz	r0, 8018a24 <tcp_bind+0x8c>
  if (!ip_addr_isany(ipaddr)) {
 80189de:	6823      	ldr	r3, [r4, #0]
 80189e0:	b103      	cbz	r3, 80189e4 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80189e2:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 80189e4:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80189e6:	4b1a      	ldr	r3, [pc, #104]	; (8018a50 <tcp_bind+0xb8>)
 80189e8:	681a      	ldr	r2, [r3, #0]
 80189ea:	60ea      	str	r2, [r5, #12]
 80189ec:	601d      	str	r5, [r3, #0]
 80189ee:	f003 fbfb 	bl	801c1e8 <tcp_timer_needed>
  return ERR_OK;
 80189f2:	2000      	movs	r0, #0
 80189f4:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80189f6:	68db      	ldr	r3, [r3, #12]
 80189f8:	b163      	cbz	r3, 8018a14 <tcp_bind+0x7c>
        if (cpcb->local_port == port) {
 80189fa:	8ad9      	ldrh	r1, [r3, #22]
 80189fc:	428a      	cmp	r2, r1
 80189fe:	d1fa      	bne.n	80189f6 <tcp_bind+0x5e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018a00:	b19b      	cbz	r3, 8018a2a <tcp_bind+0x92>
                (ip_addr_isany(&cpcb->local_ip) ||
 8018a02:	6819      	ldr	r1, [r3, #0]
 8018a04:	b1a1      	cbz	r1, 8018a30 <tcp_bind+0x98>
                ip_addr_isany(ipaddr) ||
 8018a06:	6820      	ldr	r0, [r4, #0]
 8018a08:	b1a8      	cbz	r0, 8018a36 <tcp_bind+0x9e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018a0a:	4281      	cmp	r1, r0
 8018a0c:	d1f3      	bne.n	80189f6 <tcp_bind+0x5e>
              return ERR_USE;
 8018a0e:	f06f 0007 	mvn.w	r0, #7
}
 8018a12:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8018a14:	3601      	adds	r6, #1
 8018a16:	e7cb      	b.n	80189b0 <tcp_bind+0x18>
    return ERR_VAL;
 8018a18:	f06f 0005 	mvn.w	r0, #5
 8018a1c:	bd70      	pop	{r4, r5, r6, pc}
 8018a1e:	f06f 0005 	mvn.w	r0, #5
 8018a22:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_BUF;
 8018a24:	f06f 0001 	mvn.w	r0, #1
 8018a28:	bd70      	pop	{r4, r5, r6, pc}
              return ERR_USE;
 8018a2a:	f06f 0007 	mvn.w	r0, #7
 8018a2e:	bd70      	pop	{r4, r5, r6, pc}
 8018a30:	f06f 0007 	mvn.w	r0, #7
 8018a34:	bd70      	pop	{r4, r5, r6, pc}
 8018a36:	f06f 0007 	mvn.w	r0, #7
 8018a3a:	bd70      	pop	{r4, r5, r6, pc}
 8018a3c:	08024c60 	.word	0x08024c60
 8018a40:	08024220 	.word	0x08024220
 8018a44:	08024be8 	.word	0x08024be8
 8018a48:	08024b6c 	.word	0x08024b6c
 8018a4c:	08020b90 	.word	0x08020b90
 8018a50:	2000ecc0 	.word	0x2000ecc0

08018a54 <tcp_listen_with_backlog_and_err>:
{
 8018a54:	b570      	push	{r4, r5, r6, lr}
 8018a56:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018a58:	7d03      	ldrb	r3, [r0, #20]
 8018a5a:	bb23      	cbnz	r3, 8018aa6 <tcp_listen_with_backlog_and_err+0x52>
 8018a5c:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 8018a5e:	2b01      	cmp	r3, #1
 8018a60:	d042      	beq.n	8018ae8 <tcp_listen_with_backlog_and_err+0x94>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018a62:	2001      	movs	r0, #1
 8018a64:	f7ff f9fa 	bl	8017e5c <memp_malloc>
  if (lpcb == NULL) {
 8018a68:	4605      	mov	r5, r0
 8018a6a:	2800      	cmp	r0, #0
 8018a6c:	d043      	beq.n	8018af6 <tcp_listen_with_backlog_and_err+0xa2>
  lpcb->callback_arg = pcb->callback_arg;
 8018a6e:	6923      	ldr	r3, [r4, #16]
 8018a70:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8018a72:	8ae3      	ldrh	r3, [r4, #22]
 8018a74:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8018a76:	2301      	movs	r3, #1
 8018a78:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8018a7a:	7d63      	ldrb	r3, [r4, #21]
 8018a7c:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8018a7e:	7a23      	ldrb	r3, [r4, #8]
 8018a80:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8018a82:	7aa3      	ldrb	r3, [r4, #10]
 8018a84:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 8018a86:	7a63      	ldrb	r3, [r4, #9]
 8018a88:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018a8a:	6823      	ldr	r3, [r4, #0]
 8018a8c:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8018a8e:	8ae3      	ldrh	r3, [r4, #22]
 8018a90:	b1e3      	cbz	r3, 8018acc <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018a92:	4b1a      	ldr	r3, [pc, #104]	; (8018afc <tcp_listen_with_backlog_and_err+0xa8>)
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	429c      	cmp	r4, r3
 8018a98:	d010      	beq.n	8018abc <tcp_listen_with_backlog_and_err+0x68>
 8018a9a:	b1ab      	cbz	r3, 8018ac8 <tcp_listen_with_backlog_and_err+0x74>
 8018a9c:	68da      	ldr	r2, [r3, #12]
 8018a9e:	4294      	cmp	r4, r2
 8018aa0:	d010      	beq.n	8018ac4 <tcp_listen_with_backlog_and_err+0x70>
 8018aa2:	4613      	mov	r3, r2
 8018aa4:	e7f9      	b.n	8018a9a <tcp_listen_with_backlog_and_err+0x46>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018aa6:	4b16      	ldr	r3, [pc, #88]	; (8018b00 <tcp_listen_with_backlog_and_err+0xac>)
 8018aa8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8018aac:	4915      	ldr	r1, [pc, #84]	; (8018b04 <tcp_listen_with_backlog_and_err+0xb0>)
 8018aae:	4816      	ldr	r0, [pc, #88]	; (8018b08 <tcp_listen_with_backlog_and_err+0xb4>)
 8018ab0:	f006 fc3f 	bl	801f332 <iprintf>
 8018ab4:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8018ab8:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018aba:	e018      	b.n	8018aee <tcp_listen_with_backlog_and_err+0x9a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018abc:	68da      	ldr	r2, [r3, #12]
 8018abe:	4b0f      	ldr	r3, [pc, #60]	; (8018afc <tcp_listen_with_backlog_and_err+0xa8>)
 8018ac0:	601a      	str	r2, [r3, #0]
 8018ac2:	e001      	b.n	8018ac8 <tcp_listen_with_backlog_and_err+0x74>
 8018ac4:	68e2      	ldr	r2, [r4, #12]
 8018ac6:	60da      	str	r2, [r3, #12]
 8018ac8:	2300      	movs	r3, #0
 8018aca:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8018acc:	4621      	mov	r1, r4
 8018ace:	2000      	movs	r0, #0
 8018ad0:	f7ff f9de 	bl	8017e90 <memp_free>
  lpcb->accept = tcp_accept_null;
 8018ad4:	4b0d      	ldr	r3, [pc, #52]	; (8018b0c <tcp_listen_with_backlog_and_err+0xb8>)
 8018ad6:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018ad8:	4b0d      	ldr	r3, [pc, #52]	; (8018b10 <tcp_listen_with_backlog_and_err+0xbc>)
 8018ada:	681a      	ldr	r2, [r3, #0]
 8018adc:	60ea      	str	r2, [r5, #12]
 8018ade:	601d      	str	r5, [r3, #0]
 8018ae0:	f003 fb82 	bl	801c1e8 <tcp_timer_needed>
  res = ERR_OK;
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	e002      	b.n	8018aee <tcp_listen_with_backlog_and_err+0x9a>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8018ae8:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 8018aea:	f06f 0308 	mvn.w	r3, #8
  if (err != NULL) {
 8018aee:	b106      	cbz	r6, 8018af2 <tcp_listen_with_backlog_and_err+0x9e>
    *err = res;
 8018af0:	7033      	strb	r3, [r6, #0]
}
 8018af2:	4628      	mov	r0, r5
 8018af4:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8018af6:	f04f 33ff 	mov.w	r3, #4294967295
 8018afa:	e7f8      	b.n	8018aee <tcp_listen_with_backlog_and_err+0x9a>
 8018afc:	2000ecc0 	.word	0x2000ecc0
 8018b00:	08024be8 	.word	0x08024be8
 8018b04:	08024c3c 	.word	0x08024c3c
 8018b08:	08020b90 	.word	0x08020b90
 8018b0c:	0801961f 	.word	0x0801961f
 8018b10:	2000ecbc 	.word	0x2000ecbc

08018b14 <tcp_update_rcv_ann_wnd>:
{
 8018b14:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018b16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018b18:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8018b1a:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018b1c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8018b1e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8018b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018b24:	d901      	bls.n	8018b2a <tcp_update_rcv_ann_wnd+0x16>
 8018b26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018b2a:	440b      	add	r3, r1
 8018b2c:	1ad3      	subs	r3, r2, r3
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	db02      	blt.n	8018b38 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018b32:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8018b34:	1a50      	subs	r0, r2, r1
 8018b36:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018b38:	1a6b      	subs	r3, r5, r1
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	dd03      	ble.n	8018b46 <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 8018b3e:	2200      	movs	r2, #0
 8018b40:	8542      	strh	r2, [r0, #42]	; 0x2a
    return 0;
 8018b42:	4610      	mov	r0, r2
 8018b44:	bd38      	pop	{r3, r4, r5, pc}
 8018b46:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8018b48:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018b4a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8018b4e:	d202      	bcs.n	8018b56 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8018b50:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8018b52:	2000      	movs	r0, #0
}
 8018b54:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018b56:	4b04      	ldr	r3, [pc, #16]	; (8018b68 <tcp_update_rcv_ann_wnd+0x54>)
 8018b58:	f44f 7242 	mov.w	r2, #776	; 0x308
 8018b5c:	4903      	ldr	r1, [pc, #12]	; (8018b6c <tcp_update_rcv_ann_wnd+0x58>)
 8018b5e:	4804      	ldr	r0, [pc, #16]	; (8018b70 <tcp_update_rcv_ann_wnd+0x5c>)
 8018b60:	f006 fbe7 	bl	801f332 <iprintf>
 8018b64:	e7f4      	b.n	8018b50 <tcp_update_rcv_ann_wnd+0x3c>
 8018b66:	bf00      	nop
 8018b68:	08024be8 	.word	0x08024be8
 8018b6c:	08024ee0 	.word	0x08024ee0
 8018b70:	08020b90 	.word	0x08020b90

08018b74 <tcp_recved>:
{
 8018b74:	b538      	push	{r3, r4, r5, lr}
 8018b76:	4605      	mov	r5, r0
 8018b78:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018b7a:	7d03      	ldrb	r3, [r0, #20]
 8018b7c:	2b01      	cmp	r3, #1
 8018b7e:	d010      	beq.n	8018ba2 <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 8018b80:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8018b82:	4421      	add	r1, r4
 8018b84:	b289      	uxth	r1, r1
 8018b86:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8018b88:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8018b8c:	d911      	bls.n	8018bb2 <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018b92:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8018b94:	4628      	mov	r0, r5
 8018b96:	f7ff ffbd 	bl	8018b14 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8018b9a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018b9e:	da1b      	bge.n	8018bd8 <tcp_recved+0x64>
 8018ba0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018ba2:	4b11      	ldr	r3, [pc, #68]	; (8018be8 <tcp_recved+0x74>)
 8018ba4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018ba8:	4910      	ldr	r1, [pc, #64]	; (8018bec <tcp_recved+0x78>)
 8018baa:	4811      	ldr	r0, [pc, #68]	; (8018bf0 <tcp_recved+0x7c>)
 8018bac:	f006 fbc1 	bl	801f332 <iprintf>
 8018bb0:	e7e6      	b.n	8018b80 <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 8018bb2:	2900      	cmp	r1, #0
 8018bb4:	d1ee      	bne.n	8018b94 <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8018bb6:	7d2b      	ldrb	r3, [r5, #20]
 8018bb8:	2b07      	cmp	r3, #7
 8018bba:	d009      	beq.n	8018bd0 <tcp_recved+0x5c>
 8018bbc:	2b09      	cmp	r3, #9
 8018bbe:	d007      	beq.n	8018bd0 <tcp_recved+0x5c>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8018bc0:	4b09      	ldr	r3, [pc, #36]	; (8018be8 <tcp_recved+0x74>)
 8018bc2:	f240 322d 	movw	r2, #813	; 0x32d
 8018bc6:	490b      	ldr	r1, [pc, #44]	; (8018bf4 <tcp_recved+0x80>)
 8018bc8:	4809      	ldr	r0, [pc, #36]	; (8018bf0 <tcp_recved+0x7c>)
 8018bca:	f006 fbb2 	bl	801f332 <iprintf>
 8018bce:	e7e1      	b.n	8018b94 <tcp_recved+0x20>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018bd4:	852b      	strh	r3, [r5, #40]	; 0x28
 8018bd6:	e7dd      	b.n	8018b94 <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8018bd8:	7eab      	ldrb	r3, [r5, #26]
 8018bda:	f043 0302 	orr.w	r3, r3, #2
 8018bde:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 8018be0:	4628      	mov	r0, r5
 8018be2:	f002 ff99 	bl	801bb18 <tcp_output>
}
 8018be6:	e7db      	b.n	8018ba0 <tcp_recved+0x2c>
 8018be8:	08024be8 	.word	0x08024be8
 8018bec:	08024d0c 	.word	0x08024d0c
 8018bf0:	08020b90 	.word	0x08020b90
 8018bf4:	08024d34 	.word	0x08024d34

08018bf8 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8018bf8:	b150      	cbz	r0, 8018c10 <tcp_seg_free+0x18>
{
 8018bfa:	b510      	push	{r4, lr}
 8018bfc:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8018bfe:	6840      	ldr	r0, [r0, #4]
 8018c00:	b108      	cbz	r0, 8018c06 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8018c02:	f7ff fb15 	bl	8018230 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018c06:	4621      	mov	r1, r4
 8018c08:	2002      	movs	r0, #2
 8018c0a:	f7ff f941 	bl	8017e90 <memp_free>
 8018c0e:	bd10      	pop	{r4, pc}
 8018c10:	4770      	bx	lr

08018c12 <tcp_segs_free>:
  while (seg != NULL) {
 8018c12:	b138      	cbz	r0, 8018c24 <tcp_segs_free+0x12>
{
 8018c14:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8018c16:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8018c18:	f7ff ffee 	bl	8018bf8 <tcp_seg_free>
    seg = next;
 8018c1c:	4620      	mov	r0, r4
  while (seg != NULL) {
 8018c1e:	2c00      	cmp	r4, #0
 8018c20:	d1f9      	bne.n	8018c16 <tcp_segs_free+0x4>
}
 8018c22:	bd10      	pop	{r4, pc}
 8018c24:	4770      	bx	lr

08018c26 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018c26:	b538      	push	{r3, r4, r5, lr}
 8018c28:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018c2a:	2002      	movs	r0, #2
 8018c2c:	f7ff f916 	bl	8017e5c <memp_malloc>
  if (cseg == NULL) {
 8018c30:	4604      	mov	r4, r0
 8018c32:	b150      	cbz	r0, 8018c4a <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8018c34:	6828      	ldr	r0, [r5, #0]
 8018c36:	6869      	ldr	r1, [r5, #4]
 8018c38:	68aa      	ldr	r2, [r5, #8]
 8018c3a:	68eb      	ldr	r3, [r5, #12]
 8018c3c:	6020      	str	r0, [r4, #0]
 8018c3e:	6061      	str	r1, [r4, #4]
 8018c40:	60a2      	str	r2, [r4, #8]
 8018c42:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8018c44:	6860      	ldr	r0, [r4, #4]
 8018c46:	f7ff fcc3 	bl	80185d0 <pbuf_ref>
  return cseg;
}
 8018c4a:	4620      	mov	r0, r4
 8018c4c:	bd38      	pop	{r3, r4, r5, pc}

08018c4e <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8018c4e:	b100      	cbz	r0, 8018c52 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8018c50:	6101      	str	r1, [r0, #16]
 8018c52:	4770      	bx	lr

08018c54 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 8018c54:	b180      	cbz	r0, 8018c78 <tcp_recv+0x24>
{
 8018c56:	b538      	push	{r3, r4, r5, lr}
 8018c58:	4604      	mov	r4, r0
 8018c5a:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018c5c:	7d03      	ldrb	r3, [r0, #20]
 8018c5e:	2b01      	cmp	r3, #1
 8018c60:	d002      	beq.n	8018c68 <tcp_recv+0x14>
    pcb->recv = recv;
 8018c62:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8018c66:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018c68:	4b04      	ldr	r3, [pc, #16]	; (8018c7c <tcp_recv+0x28>)
 8018c6a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8018c6e:	4904      	ldr	r1, [pc, #16]	; (8018c80 <tcp_recv+0x2c>)
 8018c70:	4804      	ldr	r0, [pc, #16]	; (8018c84 <tcp_recv+0x30>)
 8018c72:	f006 fb5e 	bl	801f332 <iprintf>
 8018c76:	e7f4      	b.n	8018c62 <tcp_recv+0xe>
 8018c78:	4770      	bx	lr
 8018c7a:	bf00      	nop
 8018c7c:	08024be8 	.word	0x08024be8
 8018c80:	08024ce4 	.word	0x08024ce4
 8018c84:	08020b90 	.word	0x08020b90

08018c88 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 8018c88:	b178      	cbz	r0, 8018caa <tcp_sent+0x22>
{
 8018c8a:	b538      	push	{r3, r4, r5, lr}
 8018c8c:	4604      	mov	r4, r0
 8018c8e:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018c90:	7d03      	ldrb	r3, [r0, #20]
 8018c92:	2b01      	cmp	r3, #1
 8018c94:	d001      	beq.n	8018c9a <tcp_sent+0x12>
    pcb->sent = sent;
 8018c96:	67e5      	str	r5, [r4, #124]	; 0x7c
 8018c98:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018c9a:	4b04      	ldr	r3, [pc, #16]	; (8018cac <tcp_sent+0x24>)
 8018c9c:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8018ca0:	4903      	ldr	r1, [pc, #12]	; (8018cb0 <tcp_sent+0x28>)
 8018ca2:	4804      	ldr	r0, [pc, #16]	; (8018cb4 <tcp_sent+0x2c>)
 8018ca4:	f006 fb45 	bl	801f332 <iprintf>
 8018ca8:	e7f5      	b.n	8018c96 <tcp_sent+0xe>
 8018caa:	4770      	bx	lr
 8018cac:	08024be8 	.word	0x08024be8
 8018cb0:	08024d58 	.word	0x08024d58
 8018cb4:	08020b90 	.word	0x08020b90

08018cb8 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 8018cb8:	b180      	cbz	r0, 8018cdc <tcp_err+0x24>
{
 8018cba:	b538      	push	{r3, r4, r5, lr}
 8018cbc:	4604      	mov	r4, r0
 8018cbe:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018cc0:	7d03      	ldrb	r3, [r0, #20]
 8018cc2:	2b01      	cmp	r3, #1
 8018cc4:	d002      	beq.n	8018ccc <tcp_err+0x14>
    pcb->errf = err;
 8018cc6:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8018cca:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018ccc:	4b04      	ldr	r3, [pc, #16]	; (8018ce0 <tcp_err+0x28>)
 8018cce:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8018cd2:	4904      	ldr	r1, [pc, #16]	; (8018ce4 <tcp_err+0x2c>)
 8018cd4:	4804      	ldr	r0, [pc, #16]	; (8018ce8 <tcp_err+0x30>)
 8018cd6:	f006 fb2c 	bl	801f332 <iprintf>
 8018cda:	e7f4      	b.n	8018cc6 <tcp_err+0xe>
 8018cdc:	4770      	bx	lr
 8018cde:	bf00      	nop
 8018ce0:	08024be8 	.word	0x08024be8
 8018ce4:	08024bb0 	.word	0x08024bb0
 8018ce8:	08020b90 	.word	0x08020b90

08018cec <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8018cec:	b110      	cbz	r0, 8018cf4 <tcp_accept+0x8>
 8018cee:	7d02      	ldrb	r2, [r0, #20]
 8018cf0:	2a01      	cmp	r2, #1
 8018cf2:	d000      	beq.n	8018cf6 <tcp_accept+0xa>
 8018cf4:	4770      	bx	lr
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8018cf6:	6181      	str	r1, [r0, #24]
  }
}
 8018cf8:	e7fc      	b.n	8018cf4 <tcp_accept+0x8>
	...

08018cfc <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8018cfc:	b570      	push	{r4, r5, r6, lr}
 8018cfe:	4604      	mov	r4, r0
 8018d00:	460e      	mov	r6, r1
 8018d02:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018d04:	7d03      	ldrb	r3, [r0, #20]
 8018d06:	2b01      	cmp	r3, #1
 8018d08:	d003      	beq.n	8018d12 <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8018d0a:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8018d0e:	7725      	strb	r5, [r4, #28]
 8018d10:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018d12:	4b04      	ldr	r3, [pc, #16]	; (8018d24 <tcp_poll+0x28>)
 8018d14:	f240 7203 	movw	r2, #1795	; 0x703
 8018d18:	4903      	ldr	r1, [pc, #12]	; (8018d28 <tcp_poll+0x2c>)
 8018d1a:	4804      	ldr	r0, [pc, #16]	; (8018d2c <tcp_poll+0x30>)
 8018d1c:	f006 fb09 	bl	801f332 <iprintf>
 8018d20:	e7f3      	b.n	8018d0a <tcp_poll+0xe>
 8018d22:	bf00      	nop
 8018d24:	08024be8 	.word	0x08024be8
 8018d28:	08024cc4 	.word	0x08024cc4
 8018d2c:	08020b90 	.word	0x08020b90

08018d30 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8018d30:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8018d32:	7d03      	ldrb	r3, [r0, #20]
 8018d34:	b1e3      	cbz	r3, 8018d70 <tcp_pcb_purge+0x40>
 8018d36:	2b0a      	cmp	r3, #10
 8018d38:	d01a      	beq.n	8018d70 <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 8018d3a:	2b01      	cmp	r3, #1
 8018d3c:	d018      	beq.n	8018d70 <tcp_pcb_purge+0x40>
 8018d3e:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8018d40:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8018d42:	b118      	cbz	r0, 8018d4c <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8018d44:	f7ff fa74 	bl	8018230 <pbuf_free>
      pcb->refused_data = NULL;
 8018d48:	2300      	movs	r3, #0
 8018d4a:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8018d4c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8018d4e:	f7ff ff60 	bl	8018c12 <tcp_segs_free>
    pcb->ooseq = NULL;
 8018d52:	2500      	movs	r5, #0
 8018d54:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8018d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d5a:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8018d5c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8018d5e:	f7ff ff58 	bl	8018c12 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8018d62:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8018d64:	f7ff ff55 	bl	8018c12 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8018d68:	66a5      	str	r5, [r4, #104]	; 0x68
 8018d6a:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8018d6c:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8018d70:	bd38      	pop	{r3, r4, r5, pc}
	...

08018d74 <tcp_slowtmr>:
{
 8018d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d78:	b082      	sub	sp, #8
  ++tcp_ticks;
 8018d7a:	4aae      	ldr	r2, [pc, #696]	; (8019034 <tcp_slowtmr+0x2c0>)
 8018d7c:	6813      	ldr	r3, [r2, #0]
 8018d7e:	3301      	adds	r3, #1
 8018d80:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8018d82:	4aad      	ldr	r2, [pc, #692]	; (8019038 <tcp_slowtmr+0x2c4>)
 8018d84:	7813      	ldrb	r3, [r2, #0]
 8018d86:	3301      	adds	r3, #1
 8018d88:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8018d8a:	4bac      	ldr	r3, [pc, #688]	; (801903c <tcp_slowtmr+0x2c8>)
 8018d8c:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8018d8e:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8018d90:	e018      	b.n	8018dc4 <tcp_slowtmr+0x50>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018d92:	4bab      	ldr	r3, [pc, #684]	; (8019040 <tcp_slowtmr+0x2cc>)
 8018d94:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8018d98:	49aa      	ldr	r1, [pc, #680]	; (8019044 <tcp_slowtmr+0x2d0>)
 8018d9a:	48ab      	ldr	r0, [pc, #684]	; (8019048 <tcp_slowtmr+0x2d4>)
 8018d9c:	f006 fac9 	bl	801f332 <iprintf>
 8018da0:	e016      	b.n	8018dd0 <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018da2:	4ba7      	ldr	r3, [pc, #668]	; (8019040 <tcp_slowtmr+0x2cc>)
 8018da4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018da8:	49a8      	ldr	r1, [pc, #672]	; (801904c <tcp_slowtmr+0x2d8>)
 8018daa:	48a7      	ldr	r0, [pc, #668]	; (8019048 <tcp_slowtmr+0x2d4>)
 8018dac:	f006 fac1 	bl	801f332 <iprintf>
 8018db0:	e011      	b.n	8018dd6 <tcp_slowtmr+0x62>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8018db2:	4ba3      	ldr	r3, [pc, #652]	; (8019040 <tcp_slowtmr+0x2cc>)
 8018db4:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8018db8:	49a5      	ldr	r1, [pc, #660]	; (8019050 <tcp_slowtmr+0x2dc>)
 8018dba:	48a3      	ldr	r0, [pc, #652]	; (8019048 <tcp_slowtmr+0x2d4>)
 8018dbc:	f006 fab9 	bl	801f332 <iprintf>
 8018dc0:	e00c      	b.n	8018ddc <tcp_slowtmr+0x68>
      pcb = pcb->next;
 8018dc2:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8018dc4:	2c00      	cmp	r4, #0
 8018dc6:	f000 817c 	beq.w	80190c2 <tcp_slowtmr+0x34e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018dca:	7d23      	ldrb	r3, [r4, #20]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d0e0      	beq.n	8018d92 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018dd0:	7d23      	ldrb	r3, [r4, #20]
 8018dd2:	2b01      	cmp	r3, #1
 8018dd4:	d0e5      	beq.n	8018da2 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8018dd6:	7d23      	ldrb	r3, [r4, #20]
 8018dd8:	2b0a      	cmp	r3, #10
 8018dda:	d0ea      	beq.n	8018db2 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8018ddc:	7f62      	ldrb	r2, [r4, #29]
 8018dde:	4b96      	ldr	r3, [pc, #600]	; (8019038 <tcp_slowtmr+0x2c4>)
 8018de0:	781b      	ldrb	r3, [r3, #0]
 8018de2:	429a      	cmp	r2, r3
 8018de4:	d0ed      	beq.n	8018dc2 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8018de6:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8018de8:	7d23      	ldrb	r3, [r4, #20]
 8018dea:	2b02      	cmp	r3, #2
 8018dec:	d016      	beq.n	8018e1c <tcp_slowtmr+0xa8>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8018dee:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8018df2:	2a0b      	cmp	r2, #11
 8018df4:	d860      	bhi.n	8018eb8 <tcp_slowtmr+0x144>
      if (pcb->persist_backoff > 0) {
 8018df6:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 8018dfa:	b335      	cbz	r5, 8018e4a <tcp_slowtmr+0xd6>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8018dfc:	3d01      	subs	r5, #1
 8018dfe:	4b95      	ldr	r3, [pc, #596]	; (8019054 <tcp_slowtmr+0x2e0>)
 8018e00:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 8018e02:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8018e06:	429a      	cmp	r2, r3
 8018e08:	d902      	bls.n	8018e10 <tcp_slowtmr+0x9c>
          pcb->persist_cnt++;
 8018e0a:	3301      	adds	r3, #1
 8018e0c:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8018e10:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d907      	bls.n	8018e28 <tcp_slowtmr+0xb4>
    pcb_remove = 0;
 8018e18:	2500      	movs	r5, #0
 8018e1a:	e04e      	b.n	8018eba <tcp_slowtmr+0x146>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8018e1c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8018e20:	2a05      	cmp	r2, #5
 8018e22:	d9e4      	bls.n	8018dee <tcp_slowtmr+0x7a>
      ++pcb_remove;
 8018e24:	2501      	movs	r5, #1
 8018e26:	e048      	b.n	8018eba <tcp_slowtmr+0x146>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8018e28:	4620      	mov	r0, r4
 8018e2a:	f003 f8c2 	bl	801bfb2 <tcp_zero_window_probe>
 8018e2e:	2800      	cmp	r0, #0
 8018e30:	d150      	bne.n	8018ed4 <tcp_slowtmr+0x160>
            pcb->persist_cnt = 0;
 8018e32:	2300      	movs	r3, #0
 8018e34:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8018e38:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8018e3c:	2b06      	cmp	r3, #6
 8018e3e:	d84b      	bhi.n	8018ed8 <tcp_slowtmr+0x164>
              pcb->persist_backoff++;
 8018e40:	3301      	adds	r3, #1
 8018e42:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 8018e46:	2500      	movs	r5, #0
 8018e48:	e037      	b.n	8018eba <tcp_slowtmr+0x146>
        if (pcb->rtime >= 0) {
 8018e4a:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8018e4e:	2900      	cmp	r1, #0
 8018e50:	db01      	blt.n	8018e56 <tcp_slowtmr+0xe2>
          ++pcb->rtime;
 8018e52:	3101      	adds	r1, #1
 8018e54:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8018e56:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8018e58:	b379      	cbz	r1, 8018eba <tcp_slowtmr+0x146>
 8018e5a:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8018e5e:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8018e62:	4288      	cmp	r0, r1
 8018e64:	db29      	blt.n	8018eba <tcp_slowtmr+0x146>
          if (pcb->state != SYN_SENT) {
 8018e66:	2b02      	cmp	r3, #2
 8018e68:	d00d      	beq.n	8018e86 <tcp_slowtmr+0x112>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8018e6a:	2a0c      	cmp	r2, #12
 8018e6c:	bf28      	it	cs
 8018e6e:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8018e70:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8018e74:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8018e78:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8018e7c:	4976      	ldr	r1, [pc, #472]	; (8019058 <tcp_slowtmr+0x2e4>)
 8018e7e:	5c8a      	ldrb	r2, [r1, r2]
 8018e80:	4093      	lsls	r3, r2
 8018e82:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8018e86:	2300      	movs	r3, #0
 8018e88:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8018e8a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8018e8e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8018e92:	4293      	cmp	r3, r2
 8018e94:	bf28      	it	cs
 8018e96:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8018e98:	085b      	lsrs	r3, r3, #1
 8018e9a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8018e9e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8018ea0:	004a      	lsls	r2, r1, #1
 8018ea2:	b292      	uxth	r2, r2
 8018ea4:	4293      	cmp	r3, r2
 8018ea6:	d201      	bcs.n	8018eac <tcp_slowtmr+0x138>
            pcb->ssthresh = (pcb->mss << 1);
 8018ea8:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 8018eac:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 8018eb0:	4620      	mov	r0, r4
 8018eb2:	f002 ffe1 	bl	801be78 <tcp_rexmit_rto>
 8018eb6:	e000      	b.n	8018eba <tcp_slowtmr+0x146>
      ++pcb_remove;
 8018eb8:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8018eba:	7d23      	ldrb	r3, [r4, #20]
 8018ebc:	2b06      	cmp	r3, #6
 8018ebe:	d00d      	beq.n	8018edc <tcp_slowtmr+0x168>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8018ec0:	7a22      	ldrb	r2, [r4, #8]
 8018ec2:	f012 0f08 	tst.w	r2, #8
 8018ec6:	d043      	beq.n	8018f50 <tcp_slowtmr+0x1dc>
 8018ec8:	2b04      	cmp	r3, #4
 8018eca:	d014      	beq.n	8018ef6 <tcp_slowtmr+0x182>
       ((pcb->state == ESTABLISHED) ||
 8018ecc:	2b07      	cmp	r3, #7
 8018ece:	d012      	beq.n	8018ef6 <tcp_slowtmr+0x182>
    pcb_reset = 0;
 8018ed0:	2700      	movs	r7, #0
 8018ed2:	e03e      	b.n	8018f52 <tcp_slowtmr+0x1de>
    pcb_remove = 0;
 8018ed4:	2500      	movs	r5, #0
 8018ed6:	e7f0      	b.n	8018eba <tcp_slowtmr+0x146>
 8018ed8:	2500      	movs	r5, #0
 8018eda:	e7ee      	b.n	8018eba <tcp_slowtmr+0x146>
      if (pcb->flags & TF_RXCLOSED) {
 8018edc:	7ea2      	ldrb	r2, [r4, #26]
 8018ede:	f012 0f10 	tst.w	r2, #16
 8018ee2:	d0ed      	beq.n	8018ec0 <tcp_slowtmr+0x14c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018ee4:	6a21      	ldr	r1, [r4, #32]
 8018ee6:	4a53      	ldr	r2, [pc, #332]	; (8019034 <tcp_slowtmr+0x2c0>)
 8018ee8:	6812      	ldr	r2, [r2, #0]
 8018eea:	1a52      	subs	r2, r2, r1
 8018eec:	2a28      	cmp	r2, #40	; 0x28
 8018eee:	d9e7      	bls.n	8018ec0 <tcp_slowtmr+0x14c>
          ++pcb_remove;
 8018ef0:	3501      	adds	r5, #1
 8018ef2:	b2ed      	uxtb	r5, r5
 8018ef4:	e7e4      	b.n	8018ec0 <tcp_slowtmr+0x14c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018ef6:	4b4f      	ldr	r3, [pc, #316]	; (8019034 <tcp_slowtmr+0x2c0>)
 8018ef8:	681a      	ldr	r2, [r3, #0]
 8018efa:	6a23      	ldr	r3, [r4, #32]
 8018efc:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8018efe:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8018f02:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8018f06:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8018f0a:	4854      	ldr	r0, [pc, #336]	; (801905c <tcp_slowtmr+0x2e8>)
 8018f0c:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018f10:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8018f14:	d903      	bls.n	8018f1e <tcp_slowtmr+0x1aa>
        ++pcb_remove;
 8018f16:	3501      	adds	r5, #1
 8018f18:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8018f1a:	2701      	movs	r7, #1
 8018f1c:	e019      	b.n	8018f52 <tcp_slowtmr+0x1de>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8018f1e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8018f22:	484f      	ldr	r0, [pc, #316]	; (8019060 <tcp_slowtmr+0x2ec>)
 8018f24:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 8018f28:	494c      	ldr	r1, [pc, #304]	; (801905c <tcp_slowtmr+0x2e8>)
 8018f2a:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018f2e:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8018f32:	d801      	bhi.n	8018f38 <tcp_slowtmr+0x1c4>
    pcb_reset = 0;
 8018f34:	2700      	movs	r7, #0
 8018f36:	e00c      	b.n	8018f52 <tcp_slowtmr+0x1de>
        err = tcp_keepalive(pcb);
 8018f38:	4620      	mov	r0, r4
 8018f3a:	f003 f80e 	bl	801bf5a <tcp_keepalive>
        if (err == ERR_OK) {
 8018f3e:	2800      	cmp	r0, #0
 8018f40:	d13a      	bne.n	8018fb8 <tcp_slowtmr+0x244>
          pcb->keep_cnt_sent++;
 8018f42:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8018f46:	3301      	adds	r3, #1
 8018f48:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8018f4c:	2700      	movs	r7, #0
 8018f4e:	e000      	b.n	8018f52 <tcp_slowtmr+0x1de>
 8018f50:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8018f52:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8018f54:	b150      	cbz	r0, 8018f6c <tcp_slowtmr+0x1f8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8018f56:	4b37      	ldr	r3, [pc, #220]	; (8019034 <tcp_slowtmr+0x2c0>)
 8018f58:	681a      	ldr	r2, [r3, #0]
 8018f5a:	6a23      	ldr	r3, [r4, #32]
 8018f5c:	1ad2      	subs	r2, r2, r3
 8018f5e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8018f62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f66:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 8018f68:	428a      	cmp	r2, r1
 8018f6a:	d227      	bcs.n	8018fbc <tcp_slowtmr+0x248>
    if (pcb->state == SYN_RCVD) {
 8018f6c:	7d23      	ldrb	r3, [r4, #20]
 8018f6e:	2b03      	cmp	r3, #3
 8018f70:	d029      	beq.n	8018fc6 <tcp_slowtmr+0x252>
    if (pcb->state == LAST_ACK) {
 8018f72:	2b09      	cmp	r3, #9
 8018f74:	d030      	beq.n	8018fd8 <tcp_slowtmr+0x264>
    if (pcb_remove) {
 8018f76:	2d00      	cmp	r5, #0
 8018f78:	d137      	bne.n	8018fea <tcp_slowtmr+0x276>
      pcb = pcb->next;
 8018f7a:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8018f7c:	7ee3      	ldrb	r3, [r4, #27]
 8018f7e:	3301      	adds	r3, #1
 8018f80:	b2db      	uxtb	r3, r3
 8018f82:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8018f84:	7f22      	ldrb	r2, [r4, #28]
 8018f86:	4293      	cmp	r3, r2
 8018f88:	f0c0 8098 	bcc.w	80190bc <tcp_slowtmr+0x348>
        prev->polltmr = 0;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8018f90:	4a34      	ldr	r2, [pc, #208]	; (8019064 <tcp_slowtmr+0x2f0>)
 8018f92:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8018f94:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f000 8087 	beq.w	80190ac <tcp_slowtmr+0x338>
 8018f9e:	4621      	mov	r1, r4
 8018fa0:	6920      	ldr	r0, [r4, #16]
 8018fa2:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8018fa4:	4b2f      	ldr	r3, [pc, #188]	; (8019064 <tcp_slowtmr+0x2f0>)
 8018fa6:	781b      	ldrb	r3, [r3, #0]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	f47f aeee 	bne.w	8018d8a <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 8018fae:	2800      	cmp	r0, #0
 8018fb0:	d07e      	beq.n	80190b0 <tcp_slowtmr+0x33c>
      prev = pcb;
 8018fb2:	4626      	mov	r6, r4
      pcb = pcb->next;
 8018fb4:	462c      	mov	r4, r5
 8018fb6:	e705      	b.n	8018dc4 <tcp_slowtmr+0x50>
    pcb_reset = 0;
 8018fb8:	2700      	movs	r7, #0
 8018fba:	e7ca      	b.n	8018f52 <tcp_slowtmr+0x1de>
      tcp_segs_free(pcb->ooseq);
 8018fbc:	f7ff fe29 	bl	8018c12 <tcp_segs_free>
      pcb->ooseq = NULL;
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	6723      	str	r3, [r4, #112]	; 0x70
 8018fc4:	e7d2      	b.n	8018f6c <tcp_slowtmr+0x1f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018fc6:	6a21      	ldr	r1, [r4, #32]
 8018fc8:	4a1a      	ldr	r2, [pc, #104]	; (8019034 <tcp_slowtmr+0x2c0>)
 8018fca:	6812      	ldr	r2, [r2, #0]
 8018fcc:	1a52      	subs	r2, r2, r1
 8018fce:	2a28      	cmp	r2, #40	; 0x28
 8018fd0:	d9cf      	bls.n	8018f72 <tcp_slowtmr+0x1fe>
        ++pcb_remove;
 8018fd2:	3501      	adds	r5, #1
 8018fd4:	b2ed      	uxtb	r5, r5
 8018fd6:	e7cc      	b.n	8018f72 <tcp_slowtmr+0x1fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018fd8:	6a22      	ldr	r2, [r4, #32]
 8018fda:	4b16      	ldr	r3, [pc, #88]	; (8019034 <tcp_slowtmr+0x2c0>)
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	1a9b      	subs	r3, r3, r2
 8018fe0:	2bf0      	cmp	r3, #240	; 0xf0
 8018fe2:	d9c8      	bls.n	8018f76 <tcp_slowtmr+0x202>
        ++pcb_remove;
 8018fe4:	3501      	adds	r5, #1
 8018fe6:	b2ed      	uxtb	r5, r5
 8018fe8:	e7c5      	b.n	8018f76 <tcp_slowtmr+0x202>
      tcp_err_fn err_fn = pcb->errf;
 8018fea:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8018fee:	4620      	mov	r0, r4
 8018ff0:	f7ff fe9e 	bl	8018d30 <tcp_pcb_purge>
      if (prev != NULL) {
 8018ff4:	2e00      	cmp	r6, #0
 8018ff6:	d03f      	beq.n	8019078 <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8018ff8:	4b10      	ldr	r3, [pc, #64]	; (801903c <tcp_slowtmr+0x2c8>)
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	429c      	cmp	r4, r3
 8018ffe:	d033      	beq.n	8019068 <tcp_slowtmr+0x2f4>
        prev->next = pcb->next;
 8019000:	68e3      	ldr	r3, [r4, #12]
 8019002:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 8019004:	2f00      	cmp	r7, #0
 8019006:	d146      	bne.n	8019096 <tcp_slowtmr+0x322>
      err_arg = pcb->callback_arg;
 8019008:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 801900c:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 801900e:	4621      	mov	r1, r4
 8019010:	2000      	movs	r0, #0
 8019012:	f7fe ff3d 	bl	8017e90 <memp_free>
      tcp_active_pcbs_changed = 0;
 8019016:	2200      	movs	r2, #0
 8019018:	4b12      	ldr	r3, [pc, #72]	; (8019064 <tcp_slowtmr+0x2f0>)
 801901a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801901c:	b11d      	cbz	r5, 8019026 <tcp_slowtmr+0x2b2>
 801901e:	f06f 010c 	mvn.w	r1, #12
 8019022:	4640      	mov	r0, r8
 8019024:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8019026:	4b0f      	ldr	r3, [pc, #60]	; (8019064 <tcp_slowtmr+0x2f0>)
 8019028:	781b      	ldrb	r3, [r3, #0]
 801902a:	2b00      	cmp	r3, #0
 801902c:	f47f aead 	bne.w	8018d8a <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8019030:	463c      	mov	r4, r7
 8019032:	e6c7      	b.n	8018dc4 <tcp_slowtmr+0x50>
 8019034:	2000ecb8 	.word	0x2000ecb8
 8019038:	200094c2 	.word	0x200094c2
 801903c:	2000ecb4 	.word	0x2000ecb4
 8019040:	08024be8 	.word	0x08024be8
 8019044:	08024d80 	.word	0x08024d80
 8019048:	08020b90 	.word	0x08020b90
 801904c:	08024dac 	.word	0x08024dac
 8019050:	08024dd8 	.word	0x08024dd8
 8019054:	08024cbc 	.word	0x08024cbc
 8019058:	08024b5c 	.word	0x08024b5c
 801905c:	10624dd3 	.word	0x10624dd3
 8019060:	000124f8 	.word	0x000124f8
 8019064:	2000ecb0 	.word	0x2000ecb0
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019068:	4b39      	ldr	r3, [pc, #228]	; (8019150 <tcp_slowtmr+0x3dc>)
 801906a:	f240 4289 	movw	r2, #1161	; 0x489
 801906e:	4939      	ldr	r1, [pc, #228]	; (8019154 <tcp_slowtmr+0x3e0>)
 8019070:	4839      	ldr	r0, [pc, #228]	; (8019158 <tcp_slowtmr+0x3e4>)
 8019072:	f006 f95e 	bl	801f332 <iprintf>
 8019076:	e7c3      	b.n	8019000 <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8019078:	4b38      	ldr	r3, [pc, #224]	; (801915c <tcp_slowtmr+0x3e8>)
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	429c      	cmp	r4, r3
 801907e:	d006      	beq.n	801908e <tcp_slowtmr+0x31a>
 8019080:	4b33      	ldr	r3, [pc, #204]	; (8019150 <tcp_slowtmr+0x3dc>)
 8019082:	f240 428d 	movw	r2, #1165	; 0x48d
 8019086:	4936      	ldr	r1, [pc, #216]	; (8019160 <tcp_slowtmr+0x3ec>)
 8019088:	4833      	ldr	r0, [pc, #204]	; (8019158 <tcp_slowtmr+0x3e4>)
 801908a:	f006 f952 	bl	801f332 <iprintf>
        tcp_active_pcbs = pcb->next;
 801908e:	68e2      	ldr	r2, [r4, #12]
 8019090:	4b32      	ldr	r3, [pc, #200]	; (801915c <tcp_slowtmr+0x3e8>)
 8019092:	601a      	str	r2, [r3, #0]
 8019094:	e7b6      	b.n	8019004 <tcp_slowtmr+0x290>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019096:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019098:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801909a:	8b23      	ldrh	r3, [r4, #24]
 801909c:	9301      	str	r3, [sp, #4]
 801909e:	8ae3      	ldrh	r3, [r4, #22]
 80190a0:	9300      	str	r3, [sp, #0]
 80190a2:	1d23      	adds	r3, r4, #4
 80190a4:	4622      	mov	r2, r4
 80190a6:	f002 fe93 	bl	801bdd0 <tcp_rst>
 80190aa:	e7ad      	b.n	8019008 <tcp_slowtmr+0x294>
        TCP_EVENT_POLL(prev, err);
 80190ac:	2000      	movs	r0, #0
 80190ae:	e779      	b.n	8018fa4 <tcp_slowtmr+0x230>
          tcp_output(prev);
 80190b0:	4620      	mov	r0, r4
 80190b2:	f002 fd31 	bl	801bb18 <tcp_output>
      prev = pcb;
 80190b6:	4626      	mov	r6, r4
      pcb = pcb->next;
 80190b8:	462c      	mov	r4, r5
 80190ba:	e683      	b.n	8018dc4 <tcp_slowtmr+0x50>
      prev = pcb;
 80190bc:	4626      	mov	r6, r4
      pcb = pcb->next;
 80190be:	462c      	mov	r4, r5
 80190c0:	e680      	b.n	8018dc4 <tcp_slowtmr+0x50>
  pcb = tcp_tw_pcbs;
 80190c2:	4b28      	ldr	r3, [pc, #160]	; (8019164 <tcp_slowtmr+0x3f0>)
 80190c4:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 80190c6:	e003      	b.n	80190d0 <tcp_slowtmr+0x35c>
      ++pcb_remove;
 80190c8:	2301      	movs	r3, #1
    if (pcb_remove) {
 80190ca:	b9ab      	cbnz	r3, 80190f8 <tcp_slowtmr+0x384>
      prev = pcb;
 80190cc:	462c      	mov	r4, r5
      pcb = pcb->next;
 80190ce:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 80190d0:	2d00      	cmp	r5, #0
 80190d2:	d039      	beq.n	8019148 <tcp_slowtmr+0x3d4>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80190d4:	7d2b      	ldrb	r3, [r5, #20]
 80190d6:	2b0a      	cmp	r3, #10
 80190d8:	d006      	beq.n	80190e8 <tcp_slowtmr+0x374>
 80190da:	4b1d      	ldr	r3, [pc, #116]	; (8019150 <tcp_slowtmr+0x3dc>)
 80190dc:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80190e0:	4921      	ldr	r1, [pc, #132]	; (8019168 <tcp_slowtmr+0x3f4>)
 80190e2:	481d      	ldr	r0, [pc, #116]	; (8019158 <tcp_slowtmr+0x3e4>)
 80190e4:	f006 f925 	bl	801f332 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80190e8:	6a2a      	ldr	r2, [r5, #32]
 80190ea:	4b20      	ldr	r3, [pc, #128]	; (801916c <tcp_slowtmr+0x3f8>)
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	1a9b      	subs	r3, r3, r2
 80190f0:	2bf0      	cmp	r3, #240	; 0xf0
 80190f2:	d8e9      	bhi.n	80190c8 <tcp_slowtmr+0x354>
    pcb_remove = 0;
 80190f4:	2300      	movs	r3, #0
 80190f6:	e7e8      	b.n	80190ca <tcp_slowtmr+0x356>
      tcp_pcb_purge(pcb);
 80190f8:	4628      	mov	r0, r5
 80190fa:	f7ff fe19 	bl	8018d30 <tcp_pcb_purge>
      if (prev != NULL) {
 80190fe:	b1a4      	cbz	r4, 801912a <tcp_slowtmr+0x3b6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8019100:	4b18      	ldr	r3, [pc, #96]	; (8019164 <tcp_slowtmr+0x3f0>)
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	429d      	cmp	r5, r3
 8019106:	d008      	beq.n	801911a <tcp_slowtmr+0x3a6>
        prev->next = pcb->next;
 8019108:	68eb      	ldr	r3, [r5, #12]
 801910a:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 801910c:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 801910e:	4629      	mov	r1, r5
 8019110:	2000      	movs	r0, #0
 8019112:	f7fe febd 	bl	8017e90 <memp_free>
      pcb = pcb->next;
 8019116:	4635      	mov	r5, r6
 8019118:	e7da      	b.n	80190d0 <tcp_slowtmr+0x35c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801911a:	4b0d      	ldr	r3, [pc, #52]	; (8019150 <tcp_slowtmr+0x3dc>)
 801911c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8019120:	4913      	ldr	r1, [pc, #76]	; (8019170 <tcp_slowtmr+0x3fc>)
 8019122:	480d      	ldr	r0, [pc, #52]	; (8019158 <tcp_slowtmr+0x3e4>)
 8019124:	f006 f905 	bl	801f332 <iprintf>
 8019128:	e7ee      	b.n	8019108 <tcp_slowtmr+0x394>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801912a:	4b0e      	ldr	r3, [pc, #56]	; (8019164 <tcp_slowtmr+0x3f0>)
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	429d      	cmp	r5, r3
 8019130:	d006      	beq.n	8019140 <tcp_slowtmr+0x3cc>
 8019132:	4b07      	ldr	r3, [pc, #28]	; (8019150 <tcp_slowtmr+0x3dc>)
 8019134:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8019138:	490e      	ldr	r1, [pc, #56]	; (8019174 <tcp_slowtmr+0x400>)
 801913a:	4807      	ldr	r0, [pc, #28]	; (8019158 <tcp_slowtmr+0x3e4>)
 801913c:	f006 f8f9 	bl	801f332 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8019140:	68ea      	ldr	r2, [r5, #12]
 8019142:	4b08      	ldr	r3, [pc, #32]	; (8019164 <tcp_slowtmr+0x3f0>)
 8019144:	601a      	str	r2, [r3, #0]
 8019146:	e7e1      	b.n	801910c <tcp_slowtmr+0x398>
}
 8019148:	b002      	add	sp, #8
 801914a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801914e:	bf00      	nop
 8019150:	08024be8 	.word	0x08024be8
 8019154:	08024e08 	.word	0x08024e08
 8019158:	08020b90 	.word	0x08020b90
 801915c:	2000ecb4 	.word	0x2000ecb4
 8019160:	08024e34 	.word	0x08024e34
 8019164:	2000ecc4 	.word	0x2000ecc4
 8019168:	08024e60 	.word	0x08024e60
 801916c:	2000ecb8 	.word	0x2000ecb8
 8019170:	08024e90 	.word	0x08024e90
 8019174:	08024eb8 	.word	0x08024eb8

08019178 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8019178:	b510      	push	{r4, lr}
 801917a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 801917c:	6803      	ldr	r3, [r0, #0]
 801917e:	428b      	cmp	r3, r1
 8019180:	d005      	beq.n	801918e <tcp_pcb_remove+0x16>
 8019182:	b14b      	cbz	r3, 8019198 <tcp_pcb_remove+0x20>
 8019184:	68da      	ldr	r2, [r3, #12]
 8019186:	4294      	cmp	r4, r2
 8019188:	d004      	beq.n	8019194 <tcp_pcb_remove+0x1c>
 801918a:	4613      	mov	r3, r2
 801918c:	e7f9      	b.n	8019182 <tcp_pcb_remove+0xa>
 801918e:	68db      	ldr	r3, [r3, #12]
 8019190:	6003      	str	r3, [r0, #0]
 8019192:	e001      	b.n	8019198 <tcp_pcb_remove+0x20>
 8019194:	68e2      	ldr	r2, [r4, #12]
 8019196:	60da      	str	r2, [r3, #12]
 8019198:	2300      	movs	r3, #0
 801919a:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 801919c:	4620      	mov	r0, r4
 801919e:	f7ff fdc7 	bl	8018d30 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80191a2:	7d23      	ldrb	r3, [r4, #20]
 80191a4:	2b0a      	cmp	r3, #10
 80191a6:	d005      	beq.n	80191b4 <tcp_pcb_remove+0x3c>
 80191a8:	2b01      	cmp	r3, #1
 80191aa:	d003      	beq.n	80191b4 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80191ac:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80191ae:	f013 0f01 	tst.w	r3, #1
 80191b2:	d121      	bne.n	80191f8 <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 80191b4:	7d23      	ldrb	r3, [r4, #20]
 80191b6:	2b01      	cmp	r3, #1
 80191b8:	d01a      	beq.n	80191f0 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80191ba:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80191bc:	b133      	cbz	r3, 80191cc <tcp_pcb_remove+0x54>
 80191be:	4b12      	ldr	r3, [pc, #72]	; (8019208 <tcp_pcb_remove+0x90>)
 80191c0:	f240 7253 	movw	r2, #1875	; 0x753
 80191c4:	4911      	ldr	r1, [pc, #68]	; (801920c <tcp_pcb_remove+0x94>)
 80191c6:	4812      	ldr	r0, [pc, #72]	; (8019210 <tcp_pcb_remove+0x98>)
 80191c8:	f006 f8b3 	bl	801f332 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80191cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80191ce:	b133      	cbz	r3, 80191de <tcp_pcb_remove+0x66>
 80191d0:	4b0d      	ldr	r3, [pc, #52]	; (8019208 <tcp_pcb_remove+0x90>)
 80191d2:	f240 7254 	movw	r2, #1876	; 0x754
 80191d6:	490f      	ldr	r1, [pc, #60]	; (8019214 <tcp_pcb_remove+0x9c>)
 80191d8:	480d      	ldr	r0, [pc, #52]	; (8019210 <tcp_pcb_remove+0x98>)
 80191da:	f006 f8aa 	bl	801f332 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80191de:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80191e0:	b133      	cbz	r3, 80191f0 <tcp_pcb_remove+0x78>
 80191e2:	4b09      	ldr	r3, [pc, #36]	; (8019208 <tcp_pcb_remove+0x90>)
 80191e4:	f240 7256 	movw	r2, #1878	; 0x756
 80191e8:	490b      	ldr	r1, [pc, #44]	; (8019218 <tcp_pcb_remove+0xa0>)
 80191ea:	4809      	ldr	r0, [pc, #36]	; (8019210 <tcp_pcb_remove+0x98>)
 80191ec:	f006 f8a1 	bl	801f332 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80191f0:	2300      	movs	r3, #0
 80191f2:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80191f4:	82e3      	strh	r3, [r4, #22]
 80191f6:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 80191f8:	f043 0302 	orr.w	r3, r3, #2
 80191fc:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80191fe:	4620      	mov	r0, r4
 8019200:	f002 fc8a 	bl	801bb18 <tcp_output>
 8019204:	e7d6      	b.n	80191b4 <tcp_pcb_remove+0x3c>
 8019206:	bf00      	nop
 8019208:	08024be8 	.word	0x08024be8
 801920c:	08024c70 	.word	0x08024c70
 8019210:	08020b90 	.word	0x08020b90
 8019214:	08024c88 	.word	0x08024c88
 8019218:	08024ca4 	.word	0x08024ca4

0801921c <tcp_close_shutdown>:
{
 801921c:	b510      	push	{r4, lr}
 801921e:	b082      	sub	sp, #8
 8019220:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8019222:	b121      	cbz	r1, 801922e <tcp_close_shutdown+0x12>
 8019224:	7d03      	ldrb	r3, [r0, #20]
 8019226:	2b04      	cmp	r3, #4
 8019228:	d00c      	beq.n	8019244 <tcp_close_shutdown+0x28>
 801922a:	2b07      	cmp	r3, #7
 801922c:	d00a      	beq.n	8019244 <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 801922e:	7d23      	ldrb	r3, [r4, #20]
 8019230:	2b01      	cmp	r3, #1
 8019232:	d072      	beq.n	801931a <tcp_close_shutdown+0xfe>
 8019234:	2b00      	cmp	r3, #0
 8019236:	d055      	beq.n	80192e4 <tcp_close_shutdown+0xc8>
 8019238:	2b02      	cmp	r3, #2
 801923a:	d07b      	beq.n	8019334 <tcp_close_shutdown+0x118>
    return tcp_close_shutdown_fin(pcb);
 801923c:	4620      	mov	r0, r4
 801923e:	f7ff fb65 	bl	801890c <tcp_close_shutdown_fin>
 8019242:	e068      	b.n	8019316 <tcp_close_shutdown+0xfa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019244:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8019246:	b1d3      	cbz	r3, 801927e <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019248:	7ea3      	ldrb	r3, [r4, #26]
 801924a:	f013 0f10 	tst.w	r3, #16
 801924e:	d01b      	beq.n	8019288 <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019250:	8b23      	ldrh	r3, [r4, #24]
 8019252:	9301      	str	r3, [sp, #4]
 8019254:	8ae3      	ldrh	r3, [r4, #22]
 8019256:	9300      	str	r3, [sp, #0]
 8019258:	1d23      	adds	r3, r4, #4
 801925a:	4622      	mov	r2, r4
 801925c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801925e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019260:	f002 fdb6 	bl	801bdd0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8019264:	4620      	mov	r0, r4
 8019266:	f7ff fd63 	bl	8018d30 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801926a:	4b39      	ldr	r3, [pc, #228]	; (8019350 <tcp_close_shutdown+0x134>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	429c      	cmp	r4, r3
 8019270:	d012      	beq.n	8019298 <tcp_close_shutdown+0x7c>
 8019272:	b1bb      	cbz	r3, 80192a4 <tcp_close_shutdown+0x88>
 8019274:	68da      	ldr	r2, [r3, #12]
 8019276:	4294      	cmp	r4, r2
 8019278:	d012      	beq.n	80192a0 <tcp_close_shutdown+0x84>
 801927a:	4613      	mov	r3, r2
 801927c:	e7f9      	b.n	8019272 <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801927e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8019280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019284:	d1e0      	bne.n	8019248 <tcp_close_shutdown+0x2c>
 8019286:	e7d2      	b.n	801922e <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019288:	4b32      	ldr	r3, [pc, #200]	; (8019354 <tcp_close_shutdown+0x138>)
 801928a:	f240 120f 	movw	r2, #271	; 0x10f
 801928e:	4932      	ldr	r1, [pc, #200]	; (8019358 <tcp_close_shutdown+0x13c>)
 8019290:	4832      	ldr	r0, [pc, #200]	; (801935c <tcp_close_shutdown+0x140>)
 8019292:	f006 f84e 	bl	801f332 <iprintf>
 8019296:	e7db      	b.n	8019250 <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 8019298:	68da      	ldr	r2, [r3, #12]
 801929a:	4b2d      	ldr	r3, [pc, #180]	; (8019350 <tcp_close_shutdown+0x134>)
 801929c:	601a      	str	r2, [r3, #0]
 801929e:	e001      	b.n	80192a4 <tcp_close_shutdown+0x88>
 80192a0:	68e2      	ldr	r2, [r4, #12]
 80192a2:	60da      	str	r2, [r3, #12]
 80192a4:	2300      	movs	r3, #0
 80192a6:	60e3      	str	r3, [r4, #12]
 80192a8:	2201      	movs	r2, #1
 80192aa:	4b2d      	ldr	r3, [pc, #180]	; (8019360 <tcp_close_shutdown+0x144>)
 80192ac:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80192ae:	7d23      	ldrb	r3, [r4, #20]
 80192b0:	2b04      	cmp	r3, #4
 80192b2:	d009      	beq.n	80192c8 <tcp_close_shutdown+0xac>
        if (tcp_input_pcb == pcb) {
 80192b4:	4b2b      	ldr	r3, [pc, #172]	; (8019364 <tcp_close_shutdown+0x148>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	429c      	cmp	r4, r3
 80192ba:	d00f      	beq.n	80192dc <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 80192bc:	4621      	mov	r1, r4
 80192be:	2000      	movs	r0, #0
 80192c0:	f7fe fde6 	bl	8017e90 <memp_free>
      return ERR_OK;
 80192c4:	2000      	movs	r0, #0
 80192c6:	e026      	b.n	8019316 <tcp_close_shutdown+0xfa>
        pcb->state = TIME_WAIT;
 80192c8:	230a      	movs	r3, #10
 80192ca:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80192cc:	4b26      	ldr	r3, [pc, #152]	; (8019368 <tcp_close_shutdown+0x14c>)
 80192ce:	681a      	ldr	r2, [r3, #0]
 80192d0:	60e2      	str	r2, [r4, #12]
 80192d2:	601c      	str	r4, [r3, #0]
 80192d4:	f002 ff88 	bl	801c1e8 <tcp_timer_needed>
      return ERR_OK;
 80192d8:	2000      	movs	r0, #0
 80192da:	e01c      	b.n	8019316 <tcp_close_shutdown+0xfa>
          tcp_trigger_input_pcb_close();
 80192dc:	f001 fecc 	bl	801b078 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 80192e0:	2000      	movs	r0, #0
 80192e2:	e018      	b.n	8019316 <tcp_close_shutdown+0xfa>
    if (pcb->local_port != 0) {
 80192e4:	8ae3      	ldrh	r3, [r4, #22]
 80192e6:	b18b      	cbz	r3, 801930c <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80192e8:	4b20      	ldr	r3, [pc, #128]	; (801936c <tcp_close_shutdown+0x150>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	429c      	cmp	r4, r3
 80192ee:	d005      	beq.n	80192fc <tcp_close_shutdown+0xe0>
 80192f0:	b153      	cbz	r3, 8019308 <tcp_close_shutdown+0xec>
 80192f2:	68da      	ldr	r2, [r3, #12]
 80192f4:	4294      	cmp	r4, r2
 80192f6:	d005      	beq.n	8019304 <tcp_close_shutdown+0xe8>
 80192f8:	4613      	mov	r3, r2
 80192fa:	e7f9      	b.n	80192f0 <tcp_close_shutdown+0xd4>
 80192fc:	68da      	ldr	r2, [r3, #12]
 80192fe:	4b1b      	ldr	r3, [pc, #108]	; (801936c <tcp_close_shutdown+0x150>)
 8019300:	601a      	str	r2, [r3, #0]
 8019302:	e001      	b.n	8019308 <tcp_close_shutdown+0xec>
 8019304:	68e2      	ldr	r2, [r4, #12]
 8019306:	60da      	str	r2, [r3, #12]
 8019308:	2300      	movs	r3, #0
 801930a:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 801930c:	4621      	mov	r1, r4
 801930e:	2000      	movs	r0, #0
 8019310:	f7fe fdbe 	bl	8017e90 <memp_free>
  return ERR_OK;
 8019314:	2000      	movs	r0, #0
}
 8019316:	b002      	add	sp, #8
 8019318:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 801931a:	4620      	mov	r0, r4
 801931c:	f7ff facc 	bl	80188b8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019320:	4621      	mov	r1, r4
 8019322:	4813      	ldr	r0, [pc, #76]	; (8019370 <tcp_close_shutdown+0x154>)
 8019324:	f7ff ff28 	bl	8019178 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8019328:	4621      	mov	r1, r4
 801932a:	2001      	movs	r0, #1
 801932c:	f7fe fdb0 	bl	8017e90 <memp_free>
  return ERR_OK;
 8019330:	2000      	movs	r0, #0
    break;
 8019332:	e7f0      	b.n	8019316 <tcp_close_shutdown+0xfa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8019334:	4621      	mov	r1, r4
 8019336:	4806      	ldr	r0, [pc, #24]	; (8019350 <tcp_close_shutdown+0x134>)
 8019338:	f7ff ff1e 	bl	8019178 <tcp_pcb_remove>
 801933c:	2201      	movs	r2, #1
 801933e:	4b08      	ldr	r3, [pc, #32]	; (8019360 <tcp_close_shutdown+0x144>)
 8019340:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8019342:	4621      	mov	r1, r4
 8019344:	2000      	movs	r0, #0
 8019346:	f7fe fda3 	bl	8017e90 <memp_free>
  return ERR_OK;
 801934a:	2000      	movs	r0, #0
    break;
 801934c:	e7e3      	b.n	8019316 <tcp_close_shutdown+0xfa>
 801934e:	bf00      	nop
 8019350:	2000ecb4 	.word	0x2000ecb4
 8019354:	08024be8 	.word	0x08024be8
 8019358:	08024b94 	.word	0x08024b94
 801935c:	08020b90 	.word	0x08020b90
 8019360:	2000ecb0 	.word	0x2000ecb0
 8019364:	2000ecc8 	.word	0x2000ecc8
 8019368:	2000ecc4 	.word	0x2000ecc4
 801936c:	2000ecc0 	.word	0x2000ecc0
 8019370:	2000ecbc 	.word	0x2000ecbc

08019374 <tcp_close>:
{
 8019374:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 8019376:	7d03      	ldrb	r3, [r0, #20]
 8019378:	2b01      	cmp	r3, #1
 801937a:	d003      	beq.n	8019384 <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 801937c:	7e83      	ldrb	r3, [r0, #26]
 801937e:	f043 0310 	orr.w	r3, r3, #16
 8019382:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8019384:	2101      	movs	r1, #1
 8019386:	f7ff ff49 	bl	801921c <tcp_close_shutdown>
}
 801938a:	bd08      	pop	{r3, pc}

0801938c <tcp_recv_null>:
{
 801938c:	b510      	push	{r4, lr}
 801938e:	4608      	mov	r0, r1
  if (p != NULL) {
 8019390:	b142      	cbz	r2, 80193a4 <tcp_recv_null+0x18>
 8019392:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 8019394:	8911      	ldrh	r1, [r2, #8]
 8019396:	f7ff fbed 	bl	8018b74 <tcp_recved>
    pbuf_free(p);
 801939a:	4620      	mov	r0, r4
 801939c:	f7fe ff48 	bl	8018230 <pbuf_free>
  return ERR_OK;
 80193a0:	2000      	movs	r0, #0
 80193a2:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80193a4:	b10b      	cbz	r3, 80193aa <tcp_recv_null+0x1e>
  return ERR_OK;
 80193a6:	2000      	movs	r0, #0
}
 80193a8:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 80193aa:	f7ff ffe3 	bl	8019374 <tcp_close>
 80193ae:	bd10      	pop	{r4, pc}

080193b0 <tcp_process_refused_data>:
{
 80193b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193b2:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80193b4:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80193b6:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80193b8:	2300      	movs	r3, #0
 80193ba:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80193bc:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80193c0:	b1dd      	cbz	r5, 80193fa <tcp_process_refused_data+0x4a>
 80193c2:	4632      	mov	r2, r6
 80193c4:	4601      	mov	r1, r0
 80193c6:	6900      	ldr	r0, [r0, #16]
 80193c8:	47a8      	blx	r5
 80193ca:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80193cc:	b9fd      	cbnz	r5, 801940e <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80193ce:	f017 0f20 	tst.w	r7, #32
 80193d2:	d022      	beq.n	801941a <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80193d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80193d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80193da:	d001      	beq.n	80193e0 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 80193dc:	3301      	adds	r3, #1
 80193de:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80193e0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80193e4:	b18e      	cbz	r6, 801940a <tcp_process_refused_data+0x5a>
 80193e6:	2300      	movs	r3, #0
 80193e8:	461a      	mov	r2, r3
 80193ea:	4621      	mov	r1, r4
 80193ec:	6920      	ldr	r0, [r4, #16]
 80193ee:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80193f0:	f110 0f0d 	cmn.w	r0, #13
 80193f4:	d111      	bne.n	801941a <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 80193f6:	4605      	mov	r5, r0
 80193f8:	e00f      	b.n	801941a <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80193fa:	2300      	movs	r3, #0
 80193fc:	4632      	mov	r2, r6
 80193fe:	4601      	mov	r1, r0
 8019400:	4618      	mov	r0, r3
 8019402:	f7ff ffc3 	bl	801938c <tcp_recv_null>
 8019406:	4605      	mov	r5, r0
 8019408:	e7e0      	b.n	80193cc <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 801940a:	4628      	mov	r0, r5
 801940c:	e7f0      	b.n	80193f0 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 801940e:	f115 0f0d 	cmn.w	r5, #13
 8019412:	d002      	beq.n	801941a <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 8019414:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8019416:	f06f 0504 	mvn.w	r5, #4
}
 801941a:	4628      	mov	r0, r5
 801941c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019420 <tcp_fasttmr>:
{
 8019420:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8019422:	4a1c      	ldr	r2, [pc, #112]	; (8019494 <tcp_fasttmr+0x74>)
 8019424:	7813      	ldrb	r3, [r2, #0]
 8019426:	3301      	adds	r3, #1
 8019428:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 801942a:	4b1b      	ldr	r3, [pc, #108]	; (8019498 <tcp_fasttmr+0x78>)
 801942c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801942e:	e013      	b.n	8019458 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8019430:	f043 0302 	orr.w	r3, r3, #2
 8019434:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8019436:	4620      	mov	r0, r4
 8019438:	f002 fb6e 	bl	801bb18 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801943c:	7ea3      	ldrb	r3, [r4, #26]
 801943e:	f023 0303 	bic.w	r3, r3, #3
 8019442:	76a3      	strb	r3, [r4, #26]
 8019444:	e013      	b.n	801946e <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 8019446:	f023 0308 	bic.w	r3, r3, #8
 801944a:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801944c:	4620      	mov	r0, r4
 801944e:	f7ff fa5d 	bl	801890c <tcp_close_shutdown_fin>
 8019452:	e010      	b.n	8019476 <tcp_fasttmr+0x56>
      pcb = pcb->next;
 8019454:	68e5      	ldr	r5, [r4, #12]
{
 8019456:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8019458:	b1dc      	cbz	r4, 8019492 <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 801945a:	7f62      	ldrb	r2, [r4, #29]
 801945c:	4b0d      	ldr	r3, [pc, #52]	; (8019494 <tcp_fasttmr+0x74>)
 801945e:	781b      	ldrb	r3, [r3, #0]
 8019460:	429a      	cmp	r2, r3
 8019462:	d0f7      	beq.n	8019454 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 8019464:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8019466:	7ea3      	ldrb	r3, [r4, #26]
 8019468:	f013 0f01 	tst.w	r3, #1
 801946c:	d1e0      	bne.n	8019430 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 801946e:	7ea3      	ldrb	r3, [r4, #26]
 8019470:	f013 0f08 	tst.w	r3, #8
 8019474:	d1e7      	bne.n	8019446 <tcp_fasttmr+0x26>
      next = pcb->next;
 8019476:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8019478:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801947a:	2b00      	cmp	r3, #0
 801947c:	d0eb      	beq.n	8019456 <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 801947e:	4e07      	ldr	r6, [pc, #28]	; (801949c <tcp_fasttmr+0x7c>)
 8019480:	2300      	movs	r3, #0
 8019482:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8019484:	4620      	mov	r0, r4
 8019486:	f7ff ff93 	bl	80193b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801948a:	7833      	ldrb	r3, [r6, #0]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d0e2      	beq.n	8019456 <tcp_fasttmr+0x36>
 8019490:	e7cb      	b.n	801942a <tcp_fasttmr+0xa>
}
 8019492:	bd70      	pop	{r4, r5, r6, pc}
 8019494:	200094c2 	.word	0x200094c2
 8019498:	2000ecb4 	.word	0x2000ecb4
 801949c:	2000ecb0 	.word	0x2000ecb0

080194a0 <tcp_tmr>:
{
 80194a0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80194a2:	f7ff ffbd 	bl	8019420 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80194a6:	4a06      	ldr	r2, [pc, #24]	; (80194c0 <tcp_tmr+0x20>)
 80194a8:	7813      	ldrb	r3, [r2, #0]
 80194aa:	3301      	adds	r3, #1
 80194ac:	b2db      	uxtb	r3, r3
 80194ae:	7013      	strb	r3, [r2, #0]
 80194b0:	f013 0f01 	tst.w	r3, #1
 80194b4:	d100      	bne.n	80194b8 <tcp_tmr+0x18>
 80194b6:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80194b8:	f7ff fc5c 	bl	8018d74 <tcp_slowtmr>
}
 80194bc:	e7fb      	b.n	80194b6 <tcp_tmr+0x16>
 80194be:	bf00      	nop
 80194c0:	200094c1 	.word	0x200094c1

080194c4 <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 80194c4:	7d03      	ldrb	r3, [r0, #20]
 80194c6:	2b01      	cmp	r3, #1
 80194c8:	d020      	beq.n	801950c <tcp_shutdown+0x48>
{
 80194ca:	b570      	push	{r4, r5, r6, lr}
 80194cc:	4616      	mov	r6, r2
 80194ce:	460d      	mov	r5, r1
 80194d0:	4604      	mov	r4, r0
  if (shut_rx) {
 80194d2:	b151      	cbz	r1, 80194ea <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 80194d4:	7e83      	ldrb	r3, [r0, #26]
 80194d6:	f043 0310 	orr.w	r3, r3, #16
 80194da:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 80194dc:	b992      	cbnz	r2, 8019504 <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 80194de:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80194e0:	b118      	cbz	r0, 80194ea <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 80194e2:	f7fe fea5 	bl	8018230 <pbuf_free>
      pcb->refused_data = NULL;
 80194e6:	2300      	movs	r3, #0
 80194e8:	6763      	str	r3, [r4, #116]	; 0x74
  if (shut_tx) {
 80194ea:	b196      	cbz	r6, 8019512 <tcp_shutdown+0x4e>
    switch (pcb->state) {
 80194ec:	7d23      	ldrb	r3, [r4, #20]
 80194ee:	2b03      	cmp	r3, #3
 80194f0:	d311      	bcc.n	8019516 <tcp_shutdown+0x52>
 80194f2:	2b04      	cmp	r3, #4
 80194f4:	d901      	bls.n	80194fa <tcp_shutdown+0x36>
 80194f6:	2b07      	cmp	r3, #7
 80194f8:	d10d      	bne.n	8019516 <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80194fa:	b2e9      	uxtb	r1, r5
 80194fc:	4620      	mov	r0, r4
 80194fe:	f7ff fe8d 	bl	801921c <tcp_close_shutdown>
 8019502:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 8019504:	2101      	movs	r1, #1
 8019506:	f7ff fe89 	bl	801921c <tcp_close_shutdown>
 801950a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 801950c:	f06f 000a 	mvn.w	r0, #10
 8019510:	4770      	bx	lr
  return ERR_OK;
 8019512:	2000      	movs	r0, #0
 8019514:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_CONN;
 8019516:	f06f 000a 	mvn.w	r0, #10
}
 801951a:	bd70      	pop	{r4, r5, r6, pc}

0801951c <tcp_abandon>:
{
 801951c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019520:	b082      	sub	sp, #8
 8019522:	4604      	mov	r4, r0
 8019524:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019526:	7d03      	ldrb	r3, [r0, #20]
 8019528:	2b01      	cmp	r3, #1
 801952a:	d01a      	beq.n	8019562 <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 801952c:	7d23      	ldrb	r3, [r4, #20]
 801952e:	2b0a      	cmp	r3, #10
 8019530:	d01f      	beq.n	8019572 <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 8019532:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8019536:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 801953a:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 801953e:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8019540:	2b00      	cmp	r3, #0
 8019542:	d141      	bne.n	80195c8 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 8019544:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8019548:	f1ba 0f00 	cmp.w	sl, #0
 801954c:	d046      	beq.n	80195dc <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801954e:	4b2a      	ldr	r3, [pc, #168]	; (80195f8 <tcp_abandon+0xdc>)
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	429c      	cmp	r4, r3
 8019554:	d016      	beq.n	8019584 <tcp_abandon+0x68>
 8019556:	b1db      	cbz	r3, 8019590 <tcp_abandon+0x74>
 8019558:	68da      	ldr	r2, [r3, #12]
 801955a:	4294      	cmp	r4, r2
 801955c:	d016      	beq.n	801958c <tcp_abandon+0x70>
 801955e:	4613      	mov	r3, r2
 8019560:	e7f9      	b.n	8019556 <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019562:	4b26      	ldr	r3, [pc, #152]	; (80195fc <tcp_abandon+0xe0>)
 8019564:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019568:	4925      	ldr	r1, [pc, #148]	; (8019600 <tcp_abandon+0xe4>)
 801956a:	4826      	ldr	r0, [pc, #152]	; (8019604 <tcp_abandon+0xe8>)
 801956c:	f005 fee1 	bl	801f332 <iprintf>
 8019570:	e7dc      	b.n	801952c <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019572:	4621      	mov	r1, r4
 8019574:	4824      	ldr	r0, [pc, #144]	; (8019608 <tcp_abandon+0xec>)
 8019576:	f7ff fdff 	bl	8019178 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801957a:	4621      	mov	r1, r4
 801957c:	2000      	movs	r0, #0
 801957e:	f7fe fc87 	bl	8017e90 <memp_free>
 8019582:	e01e      	b.n	80195c2 <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019584:	68da      	ldr	r2, [r3, #12]
 8019586:	4b1c      	ldr	r3, [pc, #112]	; (80195f8 <tcp_abandon+0xdc>)
 8019588:	601a      	str	r2, [r3, #0]
 801958a:	e001      	b.n	8019590 <tcp_abandon+0x74>
 801958c:	68e2      	ldr	r2, [r4, #12]
 801958e:	60da      	str	r2, [r3, #12]
 8019590:	2500      	movs	r5, #0
 8019592:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 8019594:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8019596:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8019598:	b108      	cbz	r0, 801959e <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 801959a:	f7ff fb3a 	bl	8018c12 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 801959e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80195a0:	b108      	cbz	r0, 80195a6 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 80195a2:	f7ff fb36 	bl	8018c12 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80195a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80195a8:	b108      	cbz	r0, 80195ae <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 80195aa:	f7ff fb32 	bl	8018c12 <tcp_segs_free>
    if (send_rst) {
 80195ae:	b9bd      	cbnz	r5, 80195e0 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 80195b0:	4621      	mov	r1, r4
 80195b2:	2000      	movs	r0, #0
 80195b4:	f7fe fc6c 	bl	8017e90 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80195b8:	b11e      	cbz	r6, 80195c2 <tcp_abandon+0xa6>
 80195ba:	f06f 010c 	mvn.w	r1, #12
 80195be:	4638      	mov	r0, r7
 80195c0:	47b0      	blx	r6
}
 80195c2:	b002      	add	sp, #8
 80195c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 80195c8:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80195cc:	4621      	mov	r1, r4
 80195ce:	480f      	ldr	r0, [pc, #60]	; (801960c <tcp_abandon+0xf0>)
 80195d0:	f7ff fdd2 	bl	8019178 <tcp_pcb_remove>
 80195d4:	2201      	movs	r2, #1
 80195d6:	4b0e      	ldr	r3, [pc, #56]	; (8019610 <tcp_abandon+0xf4>)
 80195d8:	701a      	strb	r2, [r3, #0]
 80195da:	e7dc      	b.n	8019596 <tcp_abandon+0x7a>
    int send_rst = 0;
 80195dc:	2500      	movs	r5, #0
 80195de:	e7da      	b.n	8019596 <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80195e0:	8b23      	ldrh	r3, [r4, #24]
 80195e2:	9301      	str	r3, [sp, #4]
 80195e4:	f8cd a000 	str.w	sl, [sp]
 80195e8:	1d23      	adds	r3, r4, #4
 80195ea:	4622      	mov	r2, r4
 80195ec:	4649      	mov	r1, r9
 80195ee:	4640      	mov	r0, r8
 80195f0:	f002 fbee 	bl	801bdd0 <tcp_rst>
 80195f4:	e7dc      	b.n	80195b0 <tcp_abandon+0x94>
 80195f6:	bf00      	nop
 80195f8:	2000ecc0 	.word	0x2000ecc0
 80195fc:	08024be8 	.word	0x08024be8
 8019600:	08024b28 	.word	0x08024b28
 8019604:	08020b90 	.word	0x08020b90
 8019608:	2000ecc4 	.word	0x2000ecc4
 801960c:	2000ecb4 	.word	0x2000ecb4
 8019610:	2000ecb0 	.word	0x2000ecb0

08019614 <tcp_abort>:
{
 8019614:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8019616:	2101      	movs	r1, #1
 8019618:	f7ff ff80 	bl	801951c <tcp_abandon>
 801961c:	bd08      	pop	{r3, pc}

0801961e <tcp_accept_null>:
{
 801961e:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8019620:	4608      	mov	r0, r1
 8019622:	f7ff fff7 	bl	8019614 <tcp_abort>
}
 8019626:	f06f 000c 	mvn.w	r0, #12
 801962a:	bd08      	pop	{r3, pc}

0801962c <tcp_kill_timewait>:
{
 801962c:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801962e:	4b0a      	ldr	r3, [pc, #40]	; (8019658 <tcp_kill_timewait+0x2c>)
 8019630:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8019632:	2400      	movs	r4, #0
  inactive = NULL;
 8019634:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019636:	e000      	b.n	801963a <tcp_kill_timewait+0xe>
 8019638:	68db      	ldr	r3, [r3, #12]
 801963a:	b143      	cbz	r3, 801964e <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801963c:	6a19      	ldr	r1, [r3, #32]
 801963e:	4a07      	ldr	r2, [pc, #28]	; (801965c <tcp_kill_timewait+0x30>)
 8019640:	6812      	ldr	r2, [r2, #0]
 8019642:	1a52      	subs	r2, r2, r1
 8019644:	4294      	cmp	r4, r2
 8019646:	d8f7      	bhi.n	8019638 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8019648:	4614      	mov	r4, r2
      inactive = pcb;
 801964a:	4618      	mov	r0, r3
 801964c:	e7f4      	b.n	8019638 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 801964e:	b108      	cbz	r0, 8019654 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8019650:	f7ff ffe0 	bl	8019614 <tcp_abort>
 8019654:	bd10      	pop	{r4, pc}
 8019656:	bf00      	nop
 8019658:	2000ecc4 	.word	0x2000ecc4
 801965c:	2000ecb8 	.word	0x2000ecb8

08019660 <tcp_kill_prio>:
{
 8019660:	b570      	push	{r4, r5, r6, lr}
 8019662:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8019664:	f010 0f80 	tst.w	r0, #128	; 0x80
 8019668:	d000      	beq.n	801966c <tcp_kill_prio+0xc>
 801966a:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801966c:	4b0b      	ldr	r3, [pc, #44]	; (801969c <tcp_kill_prio+0x3c>)
 801966e:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8019670:	2400      	movs	r4, #0
  inactive = NULL;
 8019672:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019674:	b91b      	cbnz	r3, 801967e <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 8019676:	b108      	cbz	r0, 801967c <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 8019678:	f7ff ffcc 	bl	8019614 <tcp_abort>
 801967c:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 801967e:	7d5d      	ldrb	r5, [r3, #21]
 8019680:	42aa      	cmp	r2, r5
 8019682:	d308      	bcc.n	8019696 <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019684:	6a1e      	ldr	r6, [r3, #32]
 8019686:	4906      	ldr	r1, [pc, #24]	; (80196a0 <tcp_kill_prio+0x40>)
 8019688:	6809      	ldr	r1, [r1, #0]
 801968a:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 801968c:	428c      	cmp	r4, r1
 801968e:	d802      	bhi.n	8019696 <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 8019690:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 8019692:	460c      	mov	r4, r1
      inactive = pcb;
 8019694:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019696:	68db      	ldr	r3, [r3, #12]
 8019698:	e7ec      	b.n	8019674 <tcp_kill_prio+0x14>
 801969a:	bf00      	nop
 801969c:	2000ecb4 	.word	0x2000ecb4
 80196a0:	2000ecb8 	.word	0x2000ecb8

080196a4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80196a4:	b538      	push	{r3, r4, r5, lr}
 80196a6:	4604      	mov	r4, r0
 80196a8:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 80196aa:	e003      	b.n	80196b4 <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80196ac:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80196ae:	f7ff ffb1 	bl	8019614 <tcp_abort>
      pcb = next;
 80196b2:	4628      	mov	r0, r5
  while (pcb != NULL) {
 80196b4:	b128      	cbz	r0, 80196c2 <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80196b6:	6802      	ldr	r2, [r0, #0]
 80196b8:	6823      	ldr	r3, [r4, #0]
 80196ba:	429a      	cmp	r2, r3
 80196bc:	d0f6      	beq.n	80196ac <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 80196be:	68c0      	ldr	r0, [r0, #12]
 80196c0:	e7f8      	b.n	80196b4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80196c2:	bd38      	pop	{r3, r4, r5, pc}

080196c4 <tcp_kill_state>:
{
 80196c4:	b538      	push	{r3, r4, r5, lr}
 80196c6:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80196c8:	f1a0 0308 	sub.w	r3, r0, #8
 80196cc:	b2db      	uxtb	r3, r3
 80196ce:	2b01      	cmp	r3, #1
 80196d0:	d906      	bls.n	80196e0 <tcp_kill_state+0x1c>
 80196d2:	4b0f      	ldr	r3, [pc, #60]	; (8019710 <tcp_kill_state+0x4c>)
 80196d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80196d8:	490e      	ldr	r1, [pc, #56]	; (8019714 <tcp_kill_state+0x50>)
 80196da:	480f      	ldr	r0, [pc, #60]	; (8019718 <tcp_kill_state+0x54>)
 80196dc:	f005 fe29 	bl	801f332 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80196e0:	4b0e      	ldr	r3, [pc, #56]	; (801971c <tcp_kill_state+0x58>)
 80196e2:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80196e4:	2100      	movs	r1, #0
  inactive = NULL;
 80196e6:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80196e8:	e000      	b.n	80196ec <tcp_kill_state+0x28>
 80196ea:	68db      	ldr	r3, [r3, #12]
 80196ec:	b15b      	cbz	r3, 8019706 <tcp_kill_state+0x42>
    if (pcb->state == state) {
 80196ee:	7d1a      	ldrb	r2, [r3, #20]
 80196f0:	4294      	cmp	r4, r2
 80196f2:	d1fa      	bne.n	80196ea <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80196f4:	6a1d      	ldr	r5, [r3, #32]
 80196f6:	4a0a      	ldr	r2, [pc, #40]	; (8019720 <tcp_kill_state+0x5c>)
 80196f8:	6812      	ldr	r2, [r2, #0]
 80196fa:	1b52      	subs	r2, r2, r5
 80196fc:	4291      	cmp	r1, r2
 80196fe:	d8f4      	bhi.n	80196ea <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 8019700:	4611      	mov	r1, r2
        inactive = pcb;
 8019702:	4618      	mov	r0, r3
 8019704:	e7f1      	b.n	80196ea <tcp_kill_state+0x26>
  if (inactive != NULL) {
 8019706:	b110      	cbz	r0, 801970e <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 8019708:	2100      	movs	r1, #0
 801970a:	f7ff ff07 	bl	801951c <tcp_abandon>
 801970e:	bd38      	pop	{r3, r4, r5, pc}
 8019710:	08024be8 	.word	0x08024be8
 8019714:	08024bd8 	.word	0x08024bd8
 8019718:	08020b90 	.word	0x08020b90
 801971c:	2000ecb4 	.word	0x2000ecb4
 8019720:	2000ecb8 	.word	0x2000ecb8

08019724 <tcp_alloc>:
{
 8019724:	b538      	push	{r3, r4, r5, lr}
 8019726:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019728:	2000      	movs	r0, #0
 801972a:	f7fe fb97 	bl	8017e5c <memp_malloc>
  if (pcb == NULL) {
 801972e:	4604      	mov	r4, r0
 8019730:	b368      	cbz	r0, 801978e <tcp_alloc+0x6a>
  if (pcb != NULL) {
 8019732:	b354      	cbz	r4, 801978a <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8019734:	2298      	movs	r2, #152	; 0x98
 8019736:	2100      	movs	r1, #0
 8019738:	4620      	mov	r0, r4
 801973a:	f006 fc49 	bl	801ffd0 <memset>
    pcb->prio = prio;
 801973e:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8019740:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8019744:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801974c:	8562      	strh	r2, [r4, #42]	; 0x2a
 801974e:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8019750:	22ff      	movs	r2, #255	; 0xff
 8019752:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8019754:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019758:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801975a:	2206      	movs	r2, #6
 801975c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8019760:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8019762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019766:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8019768:	2201      	movs	r2, #1
 801976a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801976e:	4a19      	ldr	r2, [pc, #100]	; (80197d4 <tcp_alloc+0xb0>)
 8019770:	6812      	ldr	r2, [r2, #0]
 8019772:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8019774:	4a18      	ldr	r2, [pc, #96]	; (80197d8 <tcp_alloc+0xb4>)
 8019776:	7812      	ldrb	r2, [r2, #0]
 8019778:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 801977a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 801977e:	4b17      	ldr	r3, [pc, #92]	; (80197dc <tcp_alloc+0xb8>)
 8019780:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8019784:	4b16      	ldr	r3, [pc, #88]	; (80197e0 <tcp_alloc+0xbc>)
 8019786:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 801978a:	4620      	mov	r0, r4
 801978c:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 801978e:	f7ff ff4d 	bl	801962c <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019792:	2000      	movs	r0, #0
 8019794:	f7fe fb62 	bl	8017e5c <memp_malloc>
    if (pcb == NULL) {
 8019798:	4604      	mov	r4, r0
 801979a:	2800      	cmp	r0, #0
 801979c:	d1c9      	bne.n	8019732 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 801979e:	2009      	movs	r0, #9
 80197a0:	f7ff ff90 	bl	80196c4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80197a4:	2000      	movs	r0, #0
 80197a6:	f7fe fb59 	bl	8017e5c <memp_malloc>
      if (pcb == NULL) {
 80197aa:	4604      	mov	r4, r0
 80197ac:	2800      	cmp	r0, #0
 80197ae:	d1c0      	bne.n	8019732 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 80197b0:	2008      	movs	r0, #8
 80197b2:	f7ff ff87 	bl	80196c4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80197b6:	2000      	movs	r0, #0
 80197b8:	f7fe fb50 	bl	8017e5c <memp_malloc>
        if (pcb == NULL) {
 80197bc:	4604      	mov	r4, r0
 80197be:	2800      	cmp	r0, #0
 80197c0:	d1b7      	bne.n	8019732 <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 80197c2:	4628      	mov	r0, r5
 80197c4:	f7ff ff4c 	bl	8019660 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80197c8:	2000      	movs	r0, #0
 80197ca:	f7fe fb47 	bl	8017e5c <memp_malloc>
 80197ce:	4604      	mov	r4, r0
 80197d0:	e7af      	b.n	8019732 <tcp_alloc+0xe>
 80197d2:	bf00      	nop
 80197d4:	2000ecb8 	.word	0x2000ecb8
 80197d8:	200094c2 	.word	0x200094c2
 80197dc:	0801938d 	.word	0x0801938d
 80197e0:	006ddd00 	.word	0x006ddd00

080197e4 <tcp_new_ip_type>:
{
 80197e4:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80197e6:	2040      	movs	r0, #64	; 0x40
 80197e8:	f7ff ff9c 	bl	8019724 <tcp_alloc>
}
 80197ec:	bd08      	pop	{r3, pc}
	...

080197f0 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 80197f0:	4b03      	ldr	r3, [pc, #12]	; (8019800 <tcp_next_iss+0x10>)
 80197f2:	6818      	ldr	r0, [r3, #0]
 80197f4:	4a03      	ldr	r2, [pc, #12]	; (8019804 <tcp_next_iss+0x14>)
 80197f6:	6812      	ldr	r2, [r2, #0]
 80197f8:	4410      	add	r0, r2
 80197fa:	6018      	str	r0, [r3, #0]
}
 80197fc:	4770      	bx	lr
 80197fe:	bf00      	nop
 8019800:	20000008 	.word	0x20000008
 8019804:	2000ecb8 	.word	0x2000ecb8

08019808 <tcp_eff_send_mss_impl>:
{
 8019808:	b510      	push	{r4, lr}
 801980a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 801980c:	4608      	mov	r0, r1
 801980e:	f7fd f9ef 	bl	8016bf0 <ip4_route>
    if (outif == NULL) {
 8019812:	b138      	cbz	r0, 8019824 <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 8019814:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8019816:	b13b      	cbz	r3, 8019828 <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8019818:	3b28      	subs	r3, #40	; 0x28
 801981a:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 801981c:	42a0      	cmp	r0, r4
 801981e:	bf28      	it	cs
 8019820:	4620      	movcs	r0, r4
 8019822:	bd10      	pop	{r4, pc}
      return sendmss;
 8019824:	4620      	mov	r0, r4
 8019826:	bd10      	pop	{r4, pc}
 8019828:	4620      	mov	r0, r4
}
 801982a:	bd10      	pop	{r4, pc}

0801982c <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 801982c:	b308      	cbz	r0, 8019872 <tcp_netif_ip_addr_changed+0x46>
{
 801982e:	b570      	push	{r4, r5, r6, lr}
 8019830:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8019832:	6803      	ldr	r3, [r0, #0]
 8019834:	b903      	cbnz	r3, 8019838 <tcp_netif_ip_addr_changed+0xc>
 8019836:	bd70      	pop	{r4, r5, r6, pc}
 8019838:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801983a:	4b0e      	ldr	r3, [pc, #56]	; (8019874 <tcp_netif_ip_addr_changed+0x48>)
 801983c:	6819      	ldr	r1, [r3, #0]
 801983e:	f7ff ff31 	bl	80196a4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8019842:	4b0d      	ldr	r3, [pc, #52]	; (8019878 <tcp_netif_ip_addr_changed+0x4c>)
 8019844:	6819      	ldr	r1, [r3, #0]
 8019846:	4620      	mov	r0, r4
 8019848:	f7ff ff2c 	bl	80196a4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801984c:	2e00      	cmp	r6, #0
 801984e:	d0f2      	beq.n	8019836 <tcp_netif_ip_addr_changed+0xa>
 8019850:	6833      	ldr	r3, [r6, #0]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d0ef      	beq.n	8019836 <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8019856:	4b09      	ldr	r3, [pc, #36]	; (801987c <tcp_netif_ip_addr_changed+0x50>)
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	e000      	b.n	801985e <tcp_netif_ip_addr_changed+0x32>
{
 801985c:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801985e:	2b00      	cmp	r3, #0
 8019860:	d0e9      	beq.n	8019836 <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 8019862:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8019864:	681d      	ldr	r5, [r3, #0]
 8019866:	6820      	ldr	r0, [r4, #0]
 8019868:	4285      	cmp	r5, r0
 801986a:	d1f7      	bne.n	801985c <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801986c:	6831      	ldr	r1, [r6, #0]
 801986e:	6019      	str	r1, [r3, #0]
 8019870:	e7f4      	b.n	801985c <tcp_netif_ip_addr_changed+0x30>
 8019872:	4770      	bx	lr
 8019874:	2000ecb4 	.word	0x2000ecb4
 8019878:	2000ecc0 	.word	0x2000ecc0
 801987c:	2000ecbc 	.word	0x2000ecbc

08019880 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8019880:	4b0e      	ldr	r3, [pc, #56]	; (80198bc <tcp_getoptbyte+0x3c>)
 8019882:	6819      	ldr	r1, [r3, #0]
 8019884:	b189      	cbz	r1, 80198aa <tcp_getoptbyte+0x2a>
 8019886:	4b0e      	ldr	r3, [pc, #56]	; (80198c0 <tcp_getoptbyte+0x40>)
 8019888:	881b      	ldrh	r3, [r3, #0]
 801988a:	4a0e      	ldr	r2, [pc, #56]	; (80198c4 <tcp_getoptbyte+0x44>)
 801988c:	8812      	ldrh	r2, [r2, #0]
 801988e:	4293      	cmp	r3, r2
 8019890:	d30b      	bcc.n	80198aa <tcp_getoptbyte+0x2a>
{
 8019892:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8019894:	1c5c      	adds	r4, r3, #1
 8019896:	480a      	ldr	r0, [pc, #40]	; (80198c0 <tcp_getoptbyte+0x40>)
 8019898:	8004      	strh	r4, [r0, #0]
 801989a:	b2db      	uxtb	r3, r3
 801989c:	b2d2      	uxtb	r2, r2
 801989e:	1a9b      	subs	r3, r3, r2
 80198a0:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 80198a2:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 80198a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198a8:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80198aa:	4b07      	ldr	r3, [pc, #28]	; (80198c8 <tcp_getoptbyte+0x48>)
 80198ac:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 80198ae:	4904      	ldr	r1, [pc, #16]	; (80198c0 <tcp_getoptbyte+0x40>)
 80198b0:	880a      	ldrh	r2, [r1, #0]
 80198b2:	1c50      	adds	r0, r2, #1
 80198b4:	8008      	strh	r0, [r1, #0]
 80198b6:	4413      	add	r3, r2
 80198b8:	7d18      	ldrb	r0, [r3, #20]
 80198ba:	4770      	bx	lr
 80198bc:	200094f8 	.word	0x200094f8
 80198c0:	200094ec 	.word	0x200094ec
 80198c4:	200094f4 	.word	0x200094f4
 80198c8:	200094f0 	.word	0x200094f0

080198cc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80198cc:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80198ce:	4b1f      	ldr	r3, [pc, #124]	; (801994c <tcp_parseopt+0x80>)
 80198d0:	881b      	ldrh	r3, [r3, #0]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d038      	beq.n	8019948 <tcp_parseopt+0x7c>
 80198d6:	4605      	mov	r5, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80198d8:	2200      	movs	r2, #0
 80198da:	4b1d      	ldr	r3, [pc, #116]	; (8019950 <tcp_parseopt+0x84>)
 80198dc:	801a      	strh	r2, [r3, #0]
 80198de:	4b1c      	ldr	r3, [pc, #112]	; (8019950 <tcp_parseopt+0x84>)
 80198e0:	881a      	ldrh	r2, [r3, #0]
 80198e2:	4b1a      	ldr	r3, [pc, #104]	; (801994c <tcp_parseopt+0x80>)
 80198e4:	881b      	ldrh	r3, [r3, #0]
 80198e6:	429a      	cmp	r2, r3
 80198e8:	d22e      	bcs.n	8019948 <tcp_parseopt+0x7c>
      u8_t opt = tcp_getoptbyte();
 80198ea:	f7ff ffc9 	bl	8019880 <tcp_getoptbyte>
      switch (opt) {
 80198ee:	2801      	cmp	r0, #1
 80198f0:	d0f5      	beq.n	80198de <tcp_parseopt+0x12>
 80198f2:	b348      	cbz	r0, 8019948 <tcp_parseopt+0x7c>
 80198f4:	2802      	cmp	r0, #2
 80198f6:	d11d      	bne.n	8019934 <tcp_parseopt+0x68>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80198f8:	f7ff ffc2 	bl	8019880 <tcp_getoptbyte>
 80198fc:	2804      	cmp	r0, #4
 80198fe:	d123      	bne.n	8019948 <tcp_parseopt+0x7c>
 8019900:	4b13      	ldr	r3, [pc, #76]	; (8019950 <tcp_parseopt+0x84>)
 8019902:	881b      	ldrh	r3, [r3, #0]
 8019904:	3302      	adds	r3, #2
 8019906:	4a11      	ldr	r2, [pc, #68]	; (801994c <tcp_parseopt+0x80>)
 8019908:	8812      	ldrh	r2, [r2, #0]
 801990a:	4293      	cmp	r3, r2
 801990c:	dc1c      	bgt.n	8019948 <tcp_parseopt+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 801990e:	f7ff ffb7 	bl	8019880 <tcp_getoptbyte>
 8019912:	b283      	uxth	r3, r0
 8019914:	021b      	lsls	r3, r3, #8
 8019916:	b29c      	uxth	r4, r3
        mss |= tcp_getoptbyte();
 8019918:	f7ff ffb2 	bl	8019880 <tcp_getoptbyte>
 801991c:	b280      	uxth	r0, r0
 801991e:	ea44 0300 	orr.w	r3, r4, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019922:	1e5a      	subs	r2, r3, #1
 8019924:	b292      	uxth	r2, r2
 8019926:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 801992a:	d301      	bcc.n	8019930 <tcp_parseopt+0x64>
 801992c:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8019930:	866b      	strh	r3, [r5, #50]	; 0x32
        break;
 8019932:	e7d4      	b.n	80198de <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8019934:	f7ff ffa4 	bl	8019880 <tcp_getoptbyte>
        if (data < 2) {
 8019938:	2801      	cmp	r0, #1
 801993a:	d905      	bls.n	8019948 <tcp_parseopt+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 801993c:	4b04      	ldr	r3, [pc, #16]	; (8019950 <tcp_parseopt+0x84>)
 801993e:	881a      	ldrh	r2, [r3, #0]
 8019940:	4410      	add	r0, r2
 8019942:	3802      	subs	r0, #2
 8019944:	8018      	strh	r0, [r3, #0]
 8019946:	e7ca      	b.n	80198de <tcp_parseopt+0x12>
 8019948:	bd38      	pop	{r3, r4, r5, pc}
 801994a:	bf00      	nop
 801994c:	200094fc 	.word	0x200094fc
 8019950:	200094ec 	.word	0x200094ec

08019954 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8019954:	4b0e      	ldr	r3, [pc, #56]	; (8019990 <tcp_input_delayed_close+0x3c>)
 8019956:	781b      	ldrb	r3, [r3, #0]
 8019958:	f013 0f10 	tst.w	r3, #16
 801995c:	d016      	beq.n	801998c <tcp_input_delayed_close+0x38>
{
 801995e:	b510      	push	{r4, lr}
 8019960:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 8019962:	7e83      	ldrb	r3, [r0, #26]
 8019964:	f013 0f10 	tst.w	r3, #16
 8019968:	d106      	bne.n	8019978 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801996a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 801996e:	b11b      	cbz	r3, 8019978 <tcp_input_delayed_close+0x24>
 8019970:	f06f 010e 	mvn.w	r1, #14
 8019974:	6900      	ldr	r0, [r0, #16]
 8019976:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019978:	4621      	mov	r1, r4
 801997a:	4806      	ldr	r0, [pc, #24]	; (8019994 <tcp_input_delayed_close+0x40>)
 801997c:	f7ff fbfc 	bl	8019178 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8019980:	4621      	mov	r1, r4
 8019982:	2000      	movs	r0, #0
 8019984:	f7fe fa84 	bl	8017e90 <memp_free>
    return 1;
 8019988:	2001      	movs	r0, #1
 801998a:	bd10      	pop	{r4, pc}
  return 0;
 801998c:	2000      	movs	r0, #0
 801998e:	4770      	bx	lr
 8019990:	200094e4 	.word	0x200094e4
 8019994:	2000ecb4 	.word	0x2000ecb4

08019998 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8019998:	4b1c      	ldr	r3, [pc, #112]	; (8019a0c <tcp_timewait_input+0x74>)
 801999a:	781b      	ldrb	r3, [r3, #0]
 801999c:	f013 0f04 	tst.w	r3, #4
 80199a0:	d132      	bne.n	8019a08 <tcp_timewait_input+0x70>
{
 80199a2:	b510      	push	{r4, lr}
 80199a4:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 80199a6:	f013 0f02 	tst.w	r3, #2
 80199aa:	d01c      	beq.n	80199e6 <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80199ac:	4b18      	ldr	r3, [pc, #96]	; (8019a10 <tcp_timewait_input+0x78>)
 80199ae:	6819      	ldr	r1, [r3, #0]
 80199b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80199b2:	1aca      	subs	r2, r1, r3
 80199b4:	2a00      	cmp	r2, #0
 80199b6:	db1c      	blt.n	80199f2 <tcp_timewait_input+0x5a>
 80199b8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 80199ba:	4413      	add	r3, r2
 80199bc:	1acb      	subs	r3, r1, r3
 80199be:	2b00      	cmp	r3, #0
 80199c0:	dc17      	bgt.n	80199f2 <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80199c2:	4b14      	ldr	r3, [pc, #80]	; (8019a14 <tcp_timewait_input+0x7c>)
 80199c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80199c6:	4a14      	ldr	r2, [pc, #80]	; (8019a18 <tcp_timewait_input+0x80>)
 80199c8:	4814      	ldr	r0, [pc, #80]	; (8019a1c <tcp_timewait_input+0x84>)
 80199ca:	8800      	ldrh	r0, [r0, #0]
 80199cc:	881c      	ldrh	r4, [r3, #0]
 80199ce:	9401      	str	r4, [sp, #4]
 80199d0:	885b      	ldrh	r3, [r3, #2]
 80199d2:	9300      	str	r3, [sp, #0]
 80199d4:	4613      	mov	r3, r2
 80199d6:	3204      	adds	r2, #4
 80199d8:	4401      	add	r1, r0
 80199da:	4811      	ldr	r0, [pc, #68]	; (8019a20 <tcp_timewait_input+0x88>)
 80199dc:	6800      	ldr	r0, [r0, #0]
 80199de:	f002 f9f7 	bl	801bdd0 <tcp_rst>
}
 80199e2:	b002      	add	sp, #8
 80199e4:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 80199e6:	f013 0f01 	tst.w	r3, #1
 80199ea:	d002      	beq.n	80199f2 <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 80199ec:	4b0d      	ldr	r3, [pc, #52]	; (8019a24 <tcp_timewait_input+0x8c>)
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 80199f2:	4b0a      	ldr	r3, [pc, #40]	; (8019a1c <tcp_timewait_input+0x84>)
 80199f4:	881b      	ldrh	r3, [r3, #0]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d0f3      	beq.n	80199e2 <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 80199fa:	7e83      	ldrb	r3, [r0, #26]
 80199fc:	f043 0302 	orr.w	r3, r3, #2
 8019a00:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 8019a02:	f002 f889 	bl	801bb18 <tcp_output>
 8019a06:	e7ec      	b.n	80199e2 <tcp_timewait_input+0x4a>
 8019a08:	4770      	bx	lr
 8019a0a:	bf00      	nop
 8019a0c:	200094c8 	.word	0x200094c8
 8019a10:	200094e8 	.word	0x200094e8
 8019a14:	200094f0 	.word	0x200094f0
 8019a18:	2000a260 	.word	0x2000a260
 8019a1c:	200094fe 	.word	0x200094fe
 8019a20:	200094c4 	.word	0x200094c4
 8019a24:	2000ecb8 	.word	0x2000ecb8

08019a28 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8019a28:	4b3c      	ldr	r3, [pc, #240]	; (8019b1c <tcp_listen_input+0xf4>)
 8019a2a:	781b      	ldrb	r3, [r3, #0]
 8019a2c:	f013 0f04 	tst.w	r3, #4
 8019a30:	d173      	bne.n	8019b1a <tcp_listen_input+0xf2>
{
 8019a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a34:	b083      	sub	sp, #12
 8019a36:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 8019a38:	f013 0f10 	tst.w	r3, #16
 8019a3c:	d104      	bne.n	8019a48 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 8019a3e:	f013 0f02 	tst.w	r3, #2
 8019a42:	d114      	bne.n	8019a6e <tcp_listen_input+0x46>
}
 8019a44:	b003      	add	sp, #12
 8019a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019a48:	4b35      	ldr	r3, [pc, #212]	; (8019b20 <tcp_listen_input+0xf8>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019a4c:	4a35      	ldr	r2, [pc, #212]	; (8019b24 <tcp_listen_input+0xfc>)
 8019a4e:	4936      	ldr	r1, [pc, #216]	; (8019b28 <tcp_listen_input+0x100>)
 8019a50:	880c      	ldrh	r4, [r1, #0]
 8019a52:	4936      	ldr	r1, [pc, #216]	; (8019b2c <tcp_listen_input+0x104>)
 8019a54:	6809      	ldr	r1, [r1, #0]
 8019a56:	4836      	ldr	r0, [pc, #216]	; (8019b30 <tcp_listen_input+0x108>)
 8019a58:	6800      	ldr	r0, [r0, #0]
 8019a5a:	881d      	ldrh	r5, [r3, #0]
 8019a5c:	9501      	str	r5, [sp, #4]
 8019a5e:	885b      	ldrh	r3, [r3, #2]
 8019a60:	9300      	str	r3, [sp, #0]
 8019a62:	4613      	mov	r3, r2
 8019a64:	3204      	adds	r2, #4
 8019a66:	4421      	add	r1, r4
 8019a68:	f002 f9b2 	bl	801bdd0 <tcp_rst>
 8019a6c:	e7ea      	b.n	8019a44 <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 8019a6e:	7d40      	ldrb	r0, [r0, #21]
 8019a70:	f7ff fe58 	bl	8019724 <tcp_alloc>
    if (npcb == NULL) {
 8019a74:	4604      	mov	r4, r0
 8019a76:	2800      	cmp	r0, #0
 8019a78:	d041      	beq.n	8019afe <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8019a7a:	4b2e      	ldr	r3, [pc, #184]	; (8019b34 <tcp_listen_input+0x10c>)
 8019a7c:	695a      	ldr	r2, [r3, #20]
 8019a7e:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8019a80:	691b      	ldr	r3, [r3, #16]
 8019a82:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8019a84:	8aeb      	ldrh	r3, [r5, #22]
 8019a86:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8019a88:	4e25      	ldr	r6, [pc, #148]	; (8019b20 <tcp_listen_input+0xf8>)
 8019a8a:	6833      	ldr	r3, [r6, #0]
 8019a8c:	881b      	ldrh	r3, [r3, #0]
 8019a8e:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8019a90:	2303      	movs	r3, #3
 8019a92:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8019a94:	4f25      	ldr	r7, [pc, #148]	; (8019b2c <tcp_listen_input+0x104>)
 8019a96:	683b      	ldr	r3, [r7, #0]
 8019a98:	3301      	adds	r3, #1
 8019a9a:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8019a9c:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8019a9e:	f7ff fea7 	bl	80197f0 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8019aa2:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 8019aa4:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8019aa6:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8019aa8:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	3b01      	subs	r3, #1
 8019aae:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8019ab0:	692b      	ldr	r3, [r5, #16]
 8019ab2:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8019ab4:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019ab6:	7a2b      	ldrb	r3, [r5, #8]
 8019ab8:	f003 030c 	and.w	r3, r3, #12
 8019abc:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8019abe:	4b1e      	ldr	r3, [pc, #120]	; (8019b38 <tcp_listen_input+0x110>)
 8019ac0:	681a      	ldr	r2, [r3, #0]
 8019ac2:	60e2      	str	r2, [r4, #12]
 8019ac4:	601c      	str	r4, [r3, #0]
 8019ac6:	f002 fb8f 	bl	801c1e8 <tcp_timer_needed>
 8019aca:	2201      	movs	r2, #1
 8019acc:	4b1b      	ldr	r3, [pc, #108]	; (8019b3c <tcp_listen_input+0x114>)
 8019ace:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019ad0:	4620      	mov	r0, r4
 8019ad2:	f7ff fefb 	bl	80198cc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019ad6:	6833      	ldr	r3, [r6, #0]
 8019ad8:	89db      	ldrh	r3, [r3, #14]
 8019ada:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019ade:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019ae2:	1d21      	adds	r1, r4, #4
 8019ae4:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8019ae6:	f7ff fe8f 	bl	8019808 <tcp_eff_send_mss_impl>
 8019aea:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019aec:	2112      	movs	r1, #18
 8019aee:	4620      	mov	r0, r4
 8019af0:	f001 ff02 	bl	801b8f8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8019af4:	b960      	cbnz	r0, 8019b10 <tcp_listen_input+0xe8>
    tcp_output(npcb);
 8019af6:	4620      	mov	r0, r4
 8019af8:	f002 f80e 	bl	801bb18 <tcp_output>
 8019afc:	e7a2      	b.n	8019a44 <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019afe:	69ab      	ldr	r3, [r5, #24]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d09f      	beq.n	8019a44 <tcp_listen_input+0x1c>
 8019b04:	f04f 32ff 	mov.w	r2, #4294967295
 8019b08:	2100      	movs	r1, #0
 8019b0a:	6928      	ldr	r0, [r5, #16]
 8019b0c:	4798      	blx	r3
 8019b0e:	e799      	b.n	8019a44 <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 8019b10:	2100      	movs	r1, #0
 8019b12:	4620      	mov	r0, r4
 8019b14:	f7ff fd02 	bl	801951c <tcp_abandon>
      return;
 8019b18:	e794      	b.n	8019a44 <tcp_listen_input+0x1c>
 8019b1a:	4770      	bx	lr
 8019b1c:	200094c8 	.word	0x200094c8
 8019b20:	200094f0 	.word	0x200094f0
 8019b24:	2000a260 	.word	0x2000a260
 8019b28:	200094fe 	.word	0x200094fe
 8019b2c:	200094e8 	.word	0x200094e8
 8019b30:	200094c4 	.word	0x200094c4
 8019b34:	2000a250 	.word	0x2000a250
 8019b38:	2000ecb4 	.word	0x2000ecb4
 8019b3c:	2000ecb0 	.word	0x2000ecb0

08019b40 <tcp_oos_insert_segment>:
{
 8019b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b42:	4605      	mov	r5, r0
 8019b44:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019b46:	68c3      	ldr	r3, [r0, #12]
 8019b48:	8998      	ldrh	r0, [r3, #12]
 8019b4a:	f7fc faaa 	bl	80160a2 <lwip_htons>
 8019b4e:	f010 0f01 	tst.w	r0, #1
 8019b52:	d009      	beq.n	8019b68 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 8019b54:	4620      	mov	r0, r4
 8019b56:	f7ff f85c 	bl	8018c12 <tcp_segs_free>
    next = NULL;
 8019b5a:	2400      	movs	r4, #0
 8019b5c:	e02e      	b.n	8019bbc <tcp_oos_insert_segment+0x7c>
      next = next->next;
 8019b5e:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 8019b60:	4620      	mov	r0, r4
 8019b62:	f7ff f849 	bl	8018bf8 <tcp_seg_free>
      next = next->next;
 8019b66:	4634      	mov	r4, r6
    while (next &&
 8019b68:	b1c4      	cbz	r4, 8019b9c <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019b6a:	892b      	ldrh	r3, [r5, #8]
 8019b6c:	4a14      	ldr	r2, [pc, #80]	; (8019bc0 <tcp_oos_insert_segment+0x80>)
 8019b6e:	6812      	ldr	r2, [r2, #0]
 8019b70:	4413      	add	r3, r2
 8019b72:	68e1      	ldr	r1, [r4, #12]
 8019b74:	684a      	ldr	r2, [r1, #4]
 8019b76:	8920      	ldrh	r0, [r4, #8]
 8019b78:	4402      	add	r2, r0
 8019b7a:	1a9b      	subs	r3, r3, r2
    while (next &&
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	db0d      	blt.n	8019b9c <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019b80:	8988      	ldrh	r0, [r1, #12]
 8019b82:	f7fc fa8e 	bl	80160a2 <lwip_htons>
 8019b86:	f010 0f01 	tst.w	r0, #1
 8019b8a:	d0e8      	beq.n	8019b5e <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019b8c:	68ef      	ldr	r7, [r5, #12]
 8019b8e:	89be      	ldrh	r6, [r7, #12]
 8019b90:	2001      	movs	r0, #1
 8019b92:	f7fc fa86 	bl	80160a2 <lwip_htons>
 8019b96:	4330      	orrs	r0, r6
 8019b98:	81b8      	strh	r0, [r7, #12]
 8019b9a:	e7e0      	b.n	8019b5e <tcp_oos_insert_segment+0x1e>
    if (next &&
 8019b9c:	b174      	cbz	r4, 8019bbc <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019b9e:	892b      	ldrh	r3, [r5, #8]
 8019ba0:	4a07      	ldr	r2, [pc, #28]	; (8019bc0 <tcp_oos_insert_segment+0x80>)
 8019ba2:	6811      	ldr	r1, [r2, #0]
 8019ba4:	440b      	add	r3, r1
 8019ba6:	68e2      	ldr	r2, [r4, #12]
 8019ba8:	6852      	ldr	r2, [r2, #4]
 8019baa:	1a9b      	subs	r3, r3, r2
    if (next &&
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	dd05      	ble.n	8019bbc <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019bb0:	1a52      	subs	r2, r2, r1
 8019bb2:	b291      	uxth	r1, r2
 8019bb4:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019bb6:	6868      	ldr	r0, [r5, #4]
 8019bb8:	f7fe fc8e 	bl	80184d8 <pbuf_realloc>
  cseg->next = next;
 8019bbc:	602c      	str	r4, [r5, #0]
 8019bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bc0:	200094e8 	.word	0x200094e8

08019bc4 <tcp_receive>:
{
 8019bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bc8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019bca:	7d03      	ldrb	r3, [r0, #20]
 8019bcc:	2b03      	cmp	r3, #3
 8019bce:	d979      	bls.n	8019cc4 <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 8019bd0:	4bae      	ldr	r3, [pc, #696]	; (8019e8c <tcp_receive+0x2c8>)
 8019bd2:	781b      	ldrb	r3, [r3, #0]
 8019bd4:	f013 0f10 	tst.w	r3, #16
 8019bd8:	f000 81aa 	beq.w	8019f30 <tcp_receive+0x36c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019bdc:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8019be0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8019be2:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019be4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8019be6:	4baa      	ldr	r3, [pc, #680]	; (8019e90 <tcp_receive+0x2cc>)
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	1acd      	subs	r5, r1, r3
 8019bec:	2d00      	cmp	r5, #0
 8019bee:	db7c      	blt.n	8019cea <tcp_receive+0x126>
 8019bf0:	4299      	cmp	r1, r3
 8019bf2:	d06f      	beq.n	8019cd4 <tcp_receive+0x110>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019bf4:	49a7      	ldr	r1, [pc, #668]	; (8019e94 <tcp_receive+0x2d0>)
 8019bf6:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019bf8:	428a      	cmp	r2, r1
 8019bfa:	d071      	beq.n	8019ce0 <tcp_receive+0x11c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019bfc:	4ba5      	ldr	r3, [pc, #660]	; (8019e94 <tcp_receive+0x2d0>)
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019c02:	1a5a      	subs	r2, r3, r1
 8019c04:	2a00      	cmp	r2, #0
 8019c06:	f340 8095 	ble.w	8019d34 <tcp_receive+0x170>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8019c0a:	2a01      	cmp	r2, #1
 8019c0c:	d404      	bmi.n	8019c18 <tcp_receive+0x54>
 8019c0e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019c10:	1a9a      	subs	r2, r3, r2
 8019c12:	2a00      	cmp	r2, #0
 8019c14:	f340 80cc 	ble.w	8019db0 <tcp_receive+0x1ec>
      tcp_send_empty_ack(pcb);
 8019c18:	4620      	mov	r0, r4
 8019c1a:	f001 ff43 	bl	801baa4 <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 8019c1e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	f000 8176 	beq.w	8019f12 <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019c26:	4a9b      	ldr	r2, [pc, #620]	; (8019e94 <tcp_receive+0x2d0>)
 8019c28:	6815      	ldr	r5, [r2, #0]
 8019c2a:	68db      	ldr	r3, [r3, #12]
 8019c2c:	6858      	ldr	r0, [r3, #4]
 8019c2e:	f7fc fa3b 	bl	80160a8 <lwip_htonl>
 8019c32:	4606      	mov	r6, r0
 8019c34:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019c36:	891f      	ldrh	r7, [r3, #8]
 8019c38:	68db      	ldr	r3, [r3, #12]
 8019c3a:	8998      	ldrh	r0, [r3, #12]
 8019c3c:	f7fc fa31 	bl	80160a2 <lwip_htons>
 8019c40:	f010 0f03 	tst.w	r0, #3
 8019c44:	f000 8163 	beq.w	8019f0e <tcp_receive+0x34a>
 8019c48:	2301      	movs	r3, #1
 8019c4a:	443b      	add	r3, r7
 8019c4c:	441e      	add	r6, r3
 8019c4e:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 8019c50:	2d00      	cmp	r5, #0
 8019c52:	f2c0 815e 	blt.w	8019f12 <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019c56:	4b8f      	ldr	r3, [pc, #572]	; (8019e94 <tcp_receive+0x2d0>)
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019c5c:	1a9b      	subs	r3, r3, r2
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	f300 8157 	bgt.w	8019f12 <tcp_receive+0x34e>
      next = pcb->unsent;
 8019c64:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8019c66:	682b      	ldr	r3, [r5, #0]
 8019c68:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	f000 8144 	beq.w	8019ef8 <tcp_receive+0x334>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019c70:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8019c74:	6868      	ldr	r0, [r5, #4]
 8019c76:	f7fe fca1 	bl	80185bc <pbuf_clen>
 8019c7a:	4286      	cmp	r6, r0
 8019c7c:	f0c0 813f 	bcc.w	8019efe <tcp_receive+0x33a>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8019c80:	6868      	ldr	r0, [r5, #4]
 8019c82:	f7fe fc9b 	bl	80185bc <pbuf_clen>
 8019c86:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019c8a:	1a18      	subs	r0, r3, r0
 8019c8c:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8019c90:	892b      	ldrh	r3, [r5, #8]
 8019c92:	4a81      	ldr	r2, [pc, #516]	; (8019e98 <tcp_receive+0x2d4>)
 8019c94:	8811      	ldrh	r1, [r2, #0]
 8019c96:	440b      	add	r3, r1
 8019c98:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 8019c9a:	4628      	mov	r0, r5
 8019c9c:	f7fe ffac 	bl	8018bf8 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 8019ca0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d0ba      	beq.n	8019c1e <tcp_receive+0x5a>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8019ca8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d1b7      	bne.n	8019c1e <tcp_receive+0x5a>
 8019cae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d1b4      	bne.n	8019c1e <tcp_receive+0x5a>
 8019cb4:	4b79      	ldr	r3, [pc, #484]	; (8019e9c <tcp_receive+0x2d8>)
 8019cb6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8019cba:	4979      	ldr	r1, [pc, #484]	; (8019ea0 <tcp_receive+0x2dc>)
 8019cbc:	4879      	ldr	r0, [pc, #484]	; (8019ea4 <tcp_receive+0x2e0>)
 8019cbe:	f005 fb38 	bl	801f332 <iprintf>
 8019cc2:	e7ac      	b.n	8019c1e <tcp_receive+0x5a>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019cc4:	4b75      	ldr	r3, [pc, #468]	; (8019e9c <tcp_receive+0x2d8>)
 8019cc6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8019cca:	4977      	ldr	r1, [pc, #476]	; (8019ea8 <tcp_receive+0x2e4>)
 8019ccc:	4875      	ldr	r0, [pc, #468]	; (8019ea4 <tcp_receive+0x2e0>)
 8019cce:	f005 fb30 	bl	801f332 <iprintf>
 8019cd2:	e77d      	b.n	8019bd0 <tcp_receive+0xc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019cd4:	496f      	ldr	r1, [pc, #444]	; (8019e94 <tcp_receive+0x2d0>)
 8019cd6:	6809      	ldr	r1, [r1, #0]
 8019cd8:	1a51      	subs	r1, r2, r1
 8019cda:	2900      	cmp	r1, #0
 8019cdc:	da8a      	bge.n	8019bf4 <tcp_receive+0x30>
 8019cde:	e004      	b.n	8019cea <tcp_receive+0x126>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019ce0:	4a72      	ldr	r2, [pc, #456]	; (8019eac <tcp_receive+0x2e8>)
 8019ce2:	6812      	ldr	r2, [r2, #0]
 8019ce4:	89d2      	ldrh	r2, [r2, #14]
 8019ce6:	4290      	cmp	r0, r2
 8019ce8:	d288      	bcs.n	8019bfc <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019cea:	4a70      	ldr	r2, [pc, #448]	; (8019eac <tcp_receive+0x2e8>)
 8019cec:	6812      	ldr	r2, [r2, #0]
 8019cee:	89d2      	ldrh	r2, [r2, #14]
 8019cf0:	b291      	uxth	r1, r2
 8019cf2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019cf6:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 8019cfa:	4281      	cmp	r1, r0
 8019cfc:	d901      	bls.n	8019d02 <tcp_receive+0x13e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019cfe:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 8019d02:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8019d04:	4b63      	ldr	r3, [pc, #396]	; (8019e94 <tcp_receive+0x2d0>)
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8019d0a:	b951      	cbnz	r1, 8019d22 <tcp_receive+0x15e>
        if (pcb->persist_backoff == 0) {
 8019d0c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	f47f af73 	bne.w	8019bfc <tcp_receive+0x38>
          pcb->persist_cnt = 0;
 8019d16:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8019d1a:	2301      	movs	r3, #1
 8019d1c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8019d20:	e76c      	b.n	8019bfc <tcp_receive+0x38>
      } else if (pcb->persist_backoff > 0) {
 8019d22:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	f43f af68 	beq.w	8019bfc <tcp_receive+0x38>
          pcb->persist_backoff = 0;
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8019d32:	e763      	b.n	8019bfc <tcp_receive+0x38>
      if (tcplen == 0) {
 8019d34:	4a5e      	ldr	r2, [pc, #376]	; (8019eb0 <tcp_receive+0x2ec>)
 8019d36:	8812      	ldrh	r2, [r2, #0]
 8019d38:	bb7a      	cbnz	r2, 8019d9a <tcp_receive+0x1d6>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019d3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8019d3c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8019d40:	4402      	add	r2, r0
 8019d42:	4296      	cmp	r6, r2
 8019d44:	d001      	beq.n	8019d4a <tcp_receive+0x186>
  int found_dupack = 0;
 8019d46:	2300      	movs	r3, #0
 8019d48:	e028      	b.n	8019d9c <tcp_receive+0x1d8>
          if (pcb->rtime >= 0) {
 8019d4a:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8019d4e:	2a00      	cmp	r2, #0
 8019d50:	db2a      	blt.n	8019da8 <tcp_receive+0x1e4>
            if (pcb->lastack == ackno) {
 8019d52:	428b      	cmp	r3, r1
 8019d54:	d001      	beq.n	8019d5a <tcp_receive+0x196>
  int found_dupack = 0;
 8019d56:	2300      	movs	r3, #0
 8019d58:	e020      	b.n	8019d9c <tcp_receive+0x1d8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8019d5a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019d5e:	1c53      	adds	r3, r2, #1
 8019d60:	b2db      	uxtb	r3, r3
 8019d62:	429a      	cmp	r2, r3
 8019d64:	d201      	bcs.n	8019d6a <tcp_receive+0x1a6>
                ++pcb->dupacks;
 8019d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8019d6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019d6e:	2b03      	cmp	r3, #3
 8019d70:	d90a      	bls.n	8019d88 <tcp_receive+0x1c4>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8019d72:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8019d76:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019d78:	4413      	add	r3, r2
 8019d7a:	b29b      	uxth	r3, r3
 8019d7c:	429a      	cmp	r2, r3
 8019d7e:	d215      	bcs.n	8019dac <tcp_receive+0x1e8>
                  pcb->cwnd += pcb->mss;
 8019d80:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
              found_dupack = 1;
 8019d84:	2301      	movs	r3, #1
 8019d86:	e009      	b.n	8019d9c <tcp_receive+0x1d8>
              } else if (pcb->dupacks == 3) {
 8019d88:	2b03      	cmp	r3, #3
 8019d8a:	d001      	beq.n	8019d90 <tcp_receive+0x1cc>
              found_dupack = 1;
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	e005      	b.n	8019d9c <tcp_receive+0x1d8>
                tcp_rexmit_fast(pcb);
 8019d90:	4620      	mov	r0, r4
 8019d92:	f002 f8b6 	bl	801bf02 <tcp_rexmit_fast>
              found_dupack = 1;
 8019d96:	2301      	movs	r3, #1
 8019d98:	e000      	b.n	8019d9c <tcp_receive+0x1d8>
  int found_dupack = 0;
 8019d9a:	2300      	movs	r3, #0
      if (!found_dupack) {
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	f47f af3e 	bne.w	8019c1e <tcp_receive+0x5a>
        pcb->dupacks = 0;
 8019da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019da6:	e73a      	b.n	8019c1e <tcp_receive+0x5a>
  int found_dupack = 0;
 8019da8:	2300      	movs	r3, #0
 8019daa:	e7f7      	b.n	8019d9c <tcp_receive+0x1d8>
              found_dupack = 1;
 8019dac:	2301      	movs	r3, #1
 8019dae:	e7f5      	b.n	8019d9c <tcp_receive+0x1d8>
      if (pcb->flags & TF_INFR) {
 8019db0:	7ea2      	ldrb	r2, [r4, #26]
 8019db2:	f012 0f04 	tst.w	r2, #4
 8019db6:	d006      	beq.n	8019dc6 <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 8019db8:	f022 0204 	bic.w	r2, r2, #4
 8019dbc:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8019dbe:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8019dc2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 8019dc6:	2100      	movs	r1, #0
 8019dc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8019dcc:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8019dd0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019dd2:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8019dd6:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8019dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8019dde:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8019de0:	7d23      	ldrb	r3, [r4, #20]
 8019de2:	2b03      	cmp	r3, #3
 8019de4:	d90c      	bls.n	8019e00 <tcp_receive+0x23c>
        if (pcb->cwnd < pcb->ssthresh) {
 8019de6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8019dea:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8019dee:	429a      	cmp	r2, r3
 8019df0:	d260      	bcs.n	8019eb4 <tcp_receive+0x2f0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8019df2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019df4:	4413      	add	r3, r2
 8019df6:	b29b      	uxth	r3, r3
 8019df8:	429a      	cmp	r2, r3
 8019dfa:	d201      	bcs.n	8019e00 <tcp_receive+0x23c>
            pcb->cwnd += pcb->mss;
 8019dfc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 8019e00:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d06d      	beq.n	8019ee2 <tcp_receive+0x31e>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8019e06:	68db      	ldr	r3, [r3, #12]
 8019e08:	6858      	ldr	r0, [r3, #4]
 8019e0a:	f7fc f94d 	bl	80160a8 <lwip_htonl>
 8019e0e:	4605      	mov	r5, r0
 8019e10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019e12:	891e      	ldrh	r6, [r3, #8]
 8019e14:	68db      	ldr	r3, [r3, #12]
 8019e16:	8998      	ldrh	r0, [r3, #12]
 8019e18:	f7fc f943 	bl	80160a2 <lwip_htons>
 8019e1c:	f010 0f03 	tst.w	r0, #3
 8019e20:	d05d      	beq.n	8019ede <tcp_receive+0x31a>
 8019e22:	2301      	movs	r3, #1
 8019e24:	4433      	add	r3, r6
 8019e26:	441d      	add	r5, r3
 8019e28:	4b1a      	ldr	r3, [pc, #104]	; (8019e94 <tcp_receive+0x2d0>)
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 8019e2e:	2d00      	cmp	r5, #0
 8019e30:	dc57      	bgt.n	8019ee2 <tcp_receive+0x31e>
        next = pcb->unacked;
 8019e32:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 8019e34:	682b      	ldr	r3, [r5, #0]
 8019e36:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019e38:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8019e3c:	6868      	ldr	r0, [r5, #4]
 8019e3e:	f7fe fbbd 	bl	80185bc <pbuf_clen>
 8019e42:	4286      	cmp	r6, r0
 8019e44:	d343      	bcc.n	8019ece <tcp_receive+0x30a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8019e46:	6868      	ldr	r0, [r5, #4]
 8019e48:	f7fe fbb8 	bl	80185bc <pbuf_clen>
 8019e4c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019e50:	1a18      	subs	r0, r3, r0
 8019e52:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8019e56:	892b      	ldrh	r3, [r5, #8]
 8019e58:	4a0f      	ldr	r2, [pc, #60]	; (8019e98 <tcp_receive+0x2d4>)
 8019e5a:	8811      	ldrh	r1, [r2, #0]
 8019e5c:	440b      	add	r3, r1
 8019e5e:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 8019e60:	4628      	mov	r0, r5
 8019e62:	f7fe fec9 	bl	8018bf8 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8019e66:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d0c8      	beq.n	8019e00 <tcp_receive+0x23c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8019e6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d1c5      	bne.n	8019e00 <tcp_receive+0x23c>
 8019e74:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d1c2      	bne.n	8019e00 <tcp_receive+0x23c>
 8019e7a:	4b08      	ldr	r3, [pc, #32]	; (8019e9c <tcp_receive+0x2d8>)
 8019e7c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8019e80:	4907      	ldr	r1, [pc, #28]	; (8019ea0 <tcp_receive+0x2dc>)
 8019e82:	4808      	ldr	r0, [pc, #32]	; (8019ea4 <tcp_receive+0x2e0>)
 8019e84:	f005 fa55 	bl	801f332 <iprintf>
 8019e88:	e7ba      	b.n	8019e00 <tcp_receive+0x23c>
 8019e8a:	bf00      	nop
 8019e8c:	200094c8 	.word	0x200094c8
 8019e90:	200094e8 	.word	0x200094e8
 8019e94:	200094c4 	.word	0x200094c4
 8019e98:	200094dc 	.word	0x200094dc
 8019e9c:	080250c4 	.word	0x080250c4
 8019ea0:	0802513c 	.word	0x0802513c
 8019ea4:	08020b90 	.word	0x08020b90
 8019ea8:	080250f8 	.word	0x080250f8
 8019eac:	200094f0 	.word	0x200094f0
 8019eb0:	200094fe 	.word	0x200094fe
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8019eb4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019eb6:	fb03 f303 	mul.w	r3, r3, r3
 8019eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8019ebe:	fa12 f383 	uxtah	r3, r2, r3
 8019ec2:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8019ec4:	429a      	cmp	r2, r3
 8019ec6:	d29b      	bcs.n	8019e00 <tcp_receive+0x23c>
            pcb->cwnd = new_cwnd;
 8019ec8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8019ecc:	e798      	b.n	8019e00 <tcp_receive+0x23c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019ece:	4ba2      	ldr	r3, [pc, #648]	; (801a158 <tcp_receive+0x594>)
 8019ed0:	f240 429e 	movw	r2, #1182	; 0x49e
 8019ed4:	49a1      	ldr	r1, [pc, #644]	; (801a15c <tcp_receive+0x598>)
 8019ed6:	48a2      	ldr	r0, [pc, #648]	; (801a160 <tcp_receive+0x59c>)
 8019ed8:	f005 fa2b 	bl	801f332 <iprintf>
 8019edc:	e7b3      	b.n	8019e46 <tcp_receive+0x282>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8019ede:	2300      	movs	r3, #0
 8019ee0:	e7a0      	b.n	8019e24 <tcp_receive+0x260>
      if (pcb->unacked == NULL) {
 8019ee2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019ee4:	b123      	cbz	r3, 8019ef0 <tcp_receive+0x32c>
        pcb->rtime = 0;
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8019eea:	2300      	movs	r3, #0
 8019eec:	76e3      	strb	r3, [r4, #27]
 8019eee:	e696      	b.n	8019c1e <tcp_receive+0x5a>
        pcb->rtime = -1;
 8019ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ef4:	8623      	strh	r3, [r4, #48]	; 0x30
 8019ef6:	e7f8      	b.n	8019eea <tcp_receive+0x326>
        pcb->unsent_oversize = 0;
 8019ef8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8019efc:	e6b8      	b.n	8019c70 <tcp_receive+0xac>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019efe:	4b96      	ldr	r3, [pc, #600]	; (801a158 <tcp_receive+0x594>)
 8019f00:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8019f04:	4995      	ldr	r1, [pc, #596]	; (801a15c <tcp_receive+0x598>)
 8019f06:	4896      	ldr	r0, [pc, #600]	; (801a160 <tcp_receive+0x59c>)
 8019f08:	f005 fa13 	bl	801f332 <iprintf>
 8019f0c:	e6b8      	b.n	8019c80 <tcp_receive+0xbc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019f0e:	2300      	movs	r3, #0
 8019f10:	e69b      	b.n	8019c4a <tcp_receive+0x86>
    pcb->snd_buf += recv_acked;
 8019f12:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8019f16:	4a93      	ldr	r2, [pc, #588]	; (801a164 <tcp_receive+0x5a0>)
 8019f18:	8812      	ldrh	r2, [r2, #0]
 8019f1a:	4413      	add	r3, r2
 8019f1c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019f20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019f22:	b12b      	cbz	r3, 8019f30 <tcp_receive+0x36c>
 8019f24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019f26:	4990      	ldr	r1, [pc, #576]	; (801a168 <tcp_receive+0x5a4>)
 8019f28:	6809      	ldr	r1, [r1, #0]
 8019f2a:	1a52      	subs	r2, r2, r1
 8019f2c:	2a00      	cmp	r2, #0
 8019f2e:	db29      	blt.n	8019f84 <tcp_receive+0x3c0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019f30:	4b8e      	ldr	r3, [pc, #568]	; (801a16c <tcp_receive+0x5a8>)
 8019f32:	881b      	ldrh	r3, [r3, #0]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	f000 834b 	beq.w	801a5d0 <tcp_receive+0xa0c>
 8019f3a:	7d22      	ldrb	r2, [r4, #20]
 8019f3c:	2a06      	cmp	r2, #6
 8019f3e:	f200 8347 	bhi.w	801a5d0 <tcp_receive+0xa0c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019f42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019f44:	4a8a      	ldr	r2, [pc, #552]	; (801a170 <tcp_receive+0x5ac>)
 8019f46:	6812      	ldr	r2, [r2, #0]
 8019f48:	1a8e      	subs	r6, r1, r2
 8019f4a:	2e01      	cmp	r6, #1
 8019f4c:	d404      	bmi.n	8019f58 <tcp_receive+0x394>
 8019f4e:	4413      	add	r3, r2
 8019f50:	1acb      	subs	r3, r1, r3
 8019f52:	3301      	adds	r3, #1
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	dd36      	ble.n	8019fc6 <tcp_receive+0x402>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019f58:	1a52      	subs	r2, r2, r1
 8019f5a:	2a00      	cmp	r2, #0
 8019f5c:	f2c0 8093 	blt.w	801a086 <tcp_receive+0x4c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019f60:	4b83      	ldr	r3, [pc, #524]	; (801a170 <tcp_receive+0x5ac>)
 8019f62:	6819      	ldr	r1, [r3, #0]
 8019f64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8019f66:	1a8b      	subs	r3, r1, r2
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	db06      	blt.n	8019f7a <tcp_receive+0x3b6>
 8019f6c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8019f6e:	4413      	add	r3, r2
 8019f70:	1acb      	subs	r3, r1, r3
 8019f72:	3301      	adds	r3, #1
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	f340 808b 	ble.w	801a090 <tcp_receive+0x4cc>
      tcp_send_empty_ack(pcb);
 8019f7a:	4620      	mov	r0, r4
 8019f7c:	f001 fd92 	bl	801baa4 <tcp_send_empty_ack>
 8019f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019f84:	4a7b      	ldr	r2, [pc, #492]	; (801a174 <tcp_receive+0x5b0>)
 8019f86:	6812      	ldr	r2, [r2, #0]
 8019f88:	1ad2      	subs	r2, r2, r3
 8019f8a:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 8019f8c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8019f90:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 8019f94:	b292      	uxth	r2, r2
 8019f96:	b213      	sxth	r3, r2
      pcb->sa += m;
 8019f98:	4411      	add	r1, r2
 8019f9a:	b209      	sxth	r1, r1
 8019f9c:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	db0e      	blt.n	8019fc0 <tcp_receive+0x3fc>
      m = m - (pcb->sv >> 2);
 8019fa2:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 8019fa6:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 8019faa:	fa12 f383 	uxtah	r3, r2, r3
 8019fae:	b29b      	uxth	r3, r3
 8019fb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8019fb2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8019fb6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8019fba:	2300      	movs	r3, #0
 8019fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8019fbe:	e7b7      	b.n	8019f30 <tcp_receive+0x36c>
        m = -m;
 8019fc0:	4253      	negs	r3, r2
 8019fc2:	b21b      	sxth	r3, r3
 8019fc4:	e7ed      	b.n	8019fa2 <tcp_receive+0x3de>
      struct pbuf *p = inseg.p;
 8019fc6:	4b6c      	ldr	r3, [pc, #432]	; (801a178 <tcp_receive+0x5b4>)
 8019fc8:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 8019fca:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019fcc:	b195      	cbz	r5, 8019ff4 <tcp_receive+0x430>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8019fce:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8019fd2:	429e      	cmp	r6, r3
 8019fd4:	dc16      	bgt.n	801a004 <tcp_receive+0x440>
      if (inseg.p->len < off) {
 8019fd6:	4b68      	ldr	r3, [pc, #416]	; (801a178 <tcp_receive+0x5b4>)
 8019fd8:	6858      	ldr	r0, [r3, #4]
 8019fda:	8943      	ldrh	r3, [r0, #10]
 8019fdc:	429e      	cmp	r6, r3
 8019fde:	dd44      	ble.n	801a06a <tcp_receive+0x4a6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019fe0:	8903      	ldrh	r3, [r0, #8]
 8019fe2:	429e      	cmp	r6, r3
 8019fe4:	dc16      	bgt.n	801a014 <tcp_receive+0x450>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019fe6:	4b64      	ldr	r3, [pc, #400]	; (801a178 <tcp_receive+0x5b4>)
 8019fe8:	685b      	ldr	r3, [r3, #4]
 8019fea:	891a      	ldrh	r2, [r3, #8]
 8019fec:	b2b6      	uxth	r6, r6
 8019fee:	1b92      	subs	r2, r2, r6
 8019ff0:	b292      	uxth	r2, r2
        while (p->len < off) {
 8019ff2:	e01c      	b.n	801a02e <tcp_receive+0x46a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019ff4:	4b58      	ldr	r3, [pc, #352]	; (801a158 <tcp_receive+0x594>)
 8019ff6:	f240 523c 	movw	r2, #1340	; 0x53c
 8019ffa:	4960      	ldr	r1, [pc, #384]	; (801a17c <tcp_receive+0x5b8>)
 8019ffc:	4858      	ldr	r0, [pc, #352]	; (801a160 <tcp_receive+0x59c>)
 8019ffe:	f005 f998 	bl	801f332 <iprintf>
 801a002:	e7e4      	b.n	8019fce <tcp_receive+0x40a>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801a004:	4b54      	ldr	r3, [pc, #336]	; (801a158 <tcp_receive+0x594>)
 801a006:	f240 523d 	movw	r2, #1341	; 0x53d
 801a00a:	495d      	ldr	r1, [pc, #372]	; (801a180 <tcp_receive+0x5bc>)
 801a00c:	4854      	ldr	r0, [pc, #336]	; (801a160 <tcp_receive+0x59c>)
 801a00e:	f005 f990 	bl	801f332 <iprintf>
 801a012:	e7e0      	b.n	8019fd6 <tcp_receive+0x412>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a014:	4b50      	ldr	r3, [pc, #320]	; (801a158 <tcp_receive+0x594>)
 801a016:	f240 523f 	movw	r2, #1343	; 0x53f
 801a01a:	495a      	ldr	r1, [pc, #360]	; (801a184 <tcp_receive+0x5c0>)
 801a01c:	4850      	ldr	r0, [pc, #320]	; (801a160 <tcp_receive+0x59c>)
 801a01e:	f005 f988 	bl	801f332 <iprintf>
 801a022:	e7e0      	b.n	8019fe6 <tcp_receive+0x422>
          off -= p->len;
 801a024:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 801a026:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 801a028:	2300      	movs	r3, #0
 801a02a:	816b      	strh	r3, [r5, #10]
          p = p->next;
 801a02c:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 801a02e:	896b      	ldrh	r3, [r5, #10]
 801a030:	429f      	cmp	r7, r3
 801a032:	dcf7      	bgt.n	801a024 <tcp_receive+0x460>
        if (pbuf_header(p, (s16_t)-off)) {
 801a034:	4279      	negs	r1, r7
 801a036:	b209      	sxth	r1, r1
 801a038:	4628      	mov	r0, r5
 801a03a:	f7fe f8ef 	bl	801821c <pbuf_header>
 801a03e:	b960      	cbnz	r0, 801a05a <tcp_receive+0x496>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 801a040:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a042:	484b      	ldr	r0, [pc, #300]	; (801a170 <tcp_receive+0x5ac>)
 801a044:	6803      	ldr	r3, [r0, #0]
 801a046:	1a9b      	subs	r3, r3, r2
 801a048:	494b      	ldr	r1, [pc, #300]	; (801a178 <tcp_receive+0x5b4>)
 801a04a:	890d      	ldrh	r5, [r1, #8]
 801a04c:	fa15 f383 	uxtah	r3, r5, r3
 801a050:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a052:	68cb      	ldr	r3, [r1, #12]
 801a054:	6002      	str	r2, [r0, #0]
 801a056:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a058:	e782      	b.n	8019f60 <tcp_receive+0x39c>
          LWIP_ASSERT("pbuf_header failed", 0);
 801a05a:	4b3f      	ldr	r3, [pc, #252]	; (801a158 <tcp_receive+0x594>)
 801a05c:	f240 524c 	movw	r2, #1356	; 0x54c
 801a060:	4949      	ldr	r1, [pc, #292]	; (801a188 <tcp_receive+0x5c4>)
 801a062:	483f      	ldr	r0, [pc, #252]	; (801a160 <tcp_receive+0x59c>)
 801a064:	f005 f965 	bl	801f332 <iprintf>
 801a068:	e7ea      	b.n	801a040 <tcp_receive+0x47c>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 801a06a:	4271      	negs	r1, r6
 801a06c:	b209      	sxth	r1, r1
 801a06e:	f7fe f8d5 	bl	801821c <pbuf_header>
 801a072:	2800      	cmp	r0, #0
 801a074:	d0e4      	beq.n	801a040 <tcp_receive+0x47c>
          LWIP_ASSERT("pbuf_header failed", 0);
 801a076:	4b38      	ldr	r3, [pc, #224]	; (801a158 <tcp_receive+0x594>)
 801a078:	f240 5251 	movw	r2, #1361	; 0x551
 801a07c:	4942      	ldr	r1, [pc, #264]	; (801a188 <tcp_receive+0x5c4>)
 801a07e:	4838      	ldr	r0, [pc, #224]	; (801a160 <tcp_receive+0x59c>)
 801a080:	f005 f957 	bl	801f332 <iprintf>
 801a084:	e7dc      	b.n	801a040 <tcp_receive+0x47c>
        tcp_ack_now(pcb);
 801a086:	7ea3      	ldrb	r3, [r4, #26]
 801a088:	f043 0302 	orr.w	r3, r3, #2
 801a08c:	76a3      	strb	r3, [r4, #26]
 801a08e:	e767      	b.n	8019f60 <tcp_receive+0x39c>
      if (pcb->rcv_nxt == seqno) {
 801a090:	4291      	cmp	r1, r2
 801a092:	d008      	beq.n	801a0a6 <tcp_receive+0x4e2>
        tcp_send_empty_ack(pcb);
 801a094:	4620      	mov	r0, r4
 801a096:	f001 fd05 	bl	801baa4 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 801a09a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801a09c:	2d00      	cmp	r5, #0
 801a09e:	f000 81ad 	beq.w	801a3fc <tcp_receive+0x838>
 801a0a2:	2600      	movs	r6, #0
 801a0a4:	e1e4      	b.n	801a470 <tcp_receive+0x8ac>
        tcplen = TCP_TCPLEN(&inseg);
 801a0a6:	4b34      	ldr	r3, [pc, #208]	; (801a178 <tcp_receive+0x5b4>)
 801a0a8:	891d      	ldrh	r5, [r3, #8]
 801a0aa:	68db      	ldr	r3, [r3, #12]
 801a0ac:	8998      	ldrh	r0, [r3, #12]
 801a0ae:	f7fb fff8 	bl	80160a2 <lwip_htons>
 801a0b2:	f010 0f03 	tst.w	r0, #3
 801a0b6:	d015      	beq.n	801a0e4 <tcp_receive+0x520>
 801a0b8:	2301      	movs	r3, #1
 801a0ba:	442b      	add	r3, r5
 801a0bc:	b29b      	uxth	r3, r3
 801a0be:	4a2b      	ldr	r2, [pc, #172]	; (801a16c <tcp_receive+0x5a8>)
 801a0c0:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 801a0c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a0c4:	4293      	cmp	r3, r2
 801a0c6:	d80f      	bhi.n	801a0e8 <tcp_receive+0x524>
        if (pcb->ooseq != NULL) {
 801a0c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	f000 80ed 	beq.w	801a2aa <tcp_receive+0x6e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a0d0:	4b29      	ldr	r3, [pc, #164]	; (801a178 <tcp_receive+0x5b4>)
 801a0d2:	68db      	ldr	r3, [r3, #12]
 801a0d4:	8998      	ldrh	r0, [r3, #12]
 801a0d6:	f7fb ffe4 	bl	80160a2 <lwip_htons>
 801a0da:	f010 0f01 	tst.w	r0, #1
 801a0de:	d168      	bne.n	801a1b2 <tcp_receive+0x5ee>
            next = pcb->ooseq;
 801a0e0:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 801a0e2:	e077      	b.n	801a1d4 <tcp_receive+0x610>
        tcplen = TCP_TCPLEN(&inseg);
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	e7e8      	b.n	801a0ba <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a0e8:	4b23      	ldr	r3, [pc, #140]	; (801a178 <tcp_receive+0x5b4>)
 801a0ea:	68db      	ldr	r3, [r3, #12]
 801a0ec:	8998      	ldrh	r0, [r3, #12]
 801a0ee:	f7fb ffd8 	bl	80160a2 <lwip_htons>
 801a0f2:	f010 0f01 	tst.w	r0, #1
 801a0f6:	d14b      	bne.n	801a190 <tcp_receive+0x5cc>
          inseg.len = (u16_t)pcb->rcv_wnd;
 801a0f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a0fa:	4b1f      	ldr	r3, [pc, #124]	; (801a178 <tcp_receive+0x5b4>)
 801a0fc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a0fe:	68db      	ldr	r3, [r3, #12]
 801a100:	8998      	ldrh	r0, [r3, #12]
 801a102:	f7fb ffce 	bl	80160a2 <lwip_htons>
 801a106:	f010 0f02 	tst.w	r0, #2
 801a10a:	d003      	beq.n	801a114 <tcp_receive+0x550>
            inseg.len -= 1;
 801a10c:	4a1a      	ldr	r2, [pc, #104]	; (801a178 <tcp_receive+0x5b4>)
 801a10e:	8913      	ldrh	r3, [r2, #8]
 801a110:	3b01      	subs	r3, #1
 801a112:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801a114:	4d18      	ldr	r5, [pc, #96]	; (801a178 <tcp_receive+0x5b4>)
 801a116:	8929      	ldrh	r1, [r5, #8]
 801a118:	6868      	ldr	r0, [r5, #4]
 801a11a:	f7fe f9dd 	bl	80184d8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801a11e:	892e      	ldrh	r6, [r5, #8]
 801a120:	68eb      	ldr	r3, [r5, #12]
 801a122:	8998      	ldrh	r0, [r3, #12]
 801a124:	f7fb ffbd 	bl	80160a2 <lwip_htons>
 801a128:	f010 0f03 	tst.w	r0, #3
 801a12c:	d03f      	beq.n	801a1ae <tcp_receive+0x5ea>
 801a12e:	2301      	movs	r3, #1
 801a130:	4433      	add	r3, r6
 801a132:	b29b      	uxth	r3, r3
 801a134:	4a0d      	ldr	r2, [pc, #52]	; (801a16c <tcp_receive+0x5a8>)
 801a136:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a138:	4a0d      	ldr	r2, [pc, #52]	; (801a170 <tcp_receive+0x5ac>)
 801a13a:	6812      	ldr	r2, [r2, #0]
 801a13c:	4413      	add	r3, r2
 801a13e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a140:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a142:	440a      	add	r2, r1
 801a144:	4293      	cmp	r3, r2
 801a146:	d0bf      	beq.n	801a0c8 <tcp_receive+0x504>
 801a148:	4b03      	ldr	r3, [pc, #12]	; (801a158 <tcp_receive+0x594>)
 801a14a:	f240 527f 	movw	r2, #1407	; 0x57f
 801a14e:	490f      	ldr	r1, [pc, #60]	; (801a18c <tcp_receive+0x5c8>)
 801a150:	4803      	ldr	r0, [pc, #12]	; (801a160 <tcp_receive+0x59c>)
 801a152:	f005 f8ee 	bl	801f332 <iprintf>
 801a156:	e7b7      	b.n	801a0c8 <tcp_receive+0x504>
 801a158:	080250c4 	.word	0x080250c4
 801a15c:	08025114 	.word	0x08025114
 801a160:	08020b90 	.word	0x08020b90
 801a164:	200094dc 	.word	0x200094dc
 801a168:	200094c4 	.word	0x200094c4
 801a16c:	200094fe 	.word	0x200094fe
 801a170:	200094e8 	.word	0x200094e8
 801a174:	2000ecb8 	.word	0x2000ecb8
 801a178:	200094cc 	.word	0x200094cc
 801a17c:	0802515c 	.word	0x0802515c
 801a180:	0802516c 	.word	0x0802516c
 801a184:	0802517c 	.word	0x0802517c
 801a188:	0802518c 	.word	0x0802518c
 801a18c:	080251a0 	.word	0x080251a0
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801a190:	4ba9      	ldr	r3, [pc, #676]	; (801a438 <tcp_receive+0x874>)
 801a192:	68de      	ldr	r6, [r3, #12]
 801a194:	89b0      	ldrh	r0, [r6, #12]
 801a196:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 801a19a:	b2ad      	uxth	r5, r5
 801a19c:	f7fb ff81 	bl	80160a2 <lwip_htons>
 801a1a0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801a1a4:	f7fb ff7d 	bl	80160a2 <lwip_htons>
 801a1a8:	4328      	orrs	r0, r5
 801a1aa:	81b0      	strh	r0, [r6, #12]
 801a1ac:	e7a4      	b.n	801a0f8 <tcp_receive+0x534>
          tcplen = TCP_TCPLEN(&inseg);
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	e7be      	b.n	801a130 <tcp_receive+0x56c>
            while (pcb->ooseq != NULL) {
 801a1b2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801a1b4:	2800      	cmp	r0, #0
 801a1b6:	d078      	beq.n	801a2aa <tcp_receive+0x6e6>
              pcb->ooseq = pcb->ooseq->next;
 801a1b8:	6803      	ldr	r3, [r0, #0]
 801a1ba:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 801a1bc:	f7fe fd1c 	bl	8018bf8 <tcp_seg_free>
 801a1c0:	e7f7      	b.n	801a1b2 <tcp_receive+0x5ee>
                tcplen = TCP_TCPLEN(&inseg);
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	443b      	add	r3, r7
 801a1c6:	4a9d      	ldr	r2, [pc, #628]	; (801a43c <tcp_receive+0x878>)
 801a1c8:	8013      	strh	r3, [r2, #0]
              next = next->next;
 801a1ca:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 801a1cc:	4628      	mov	r0, r5
 801a1ce:	f7fe fd13 	bl	8018bf8 <tcp_seg_free>
              next = next->next;
 801a1d2:	4635      	mov	r5, r6
            while (next &&
 801a1d4:	b375      	cbz	r5, 801a234 <tcp_receive+0x670>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a1d6:	4b99      	ldr	r3, [pc, #612]	; (801a43c <tcp_receive+0x878>)
 801a1d8:	881b      	ldrh	r3, [r3, #0]
 801a1da:	4a99      	ldr	r2, [pc, #612]	; (801a440 <tcp_receive+0x87c>)
 801a1dc:	6812      	ldr	r2, [r2, #0]
 801a1de:	4413      	add	r3, r2
 801a1e0:	68e9      	ldr	r1, [r5, #12]
 801a1e2:	684a      	ldr	r2, [r1, #4]
 801a1e4:	8928      	ldrh	r0, [r5, #8]
 801a1e6:	4402      	add	r2, r0
 801a1e8:	1a9b      	subs	r3, r3, r2
            while (next &&
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	db22      	blt.n	801a234 <tcp_receive+0x670>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a1ee:	8988      	ldrh	r0, [r1, #12]
 801a1f0:	f7fb ff57 	bl	80160a2 <lwip_htons>
 801a1f4:	f010 0f01 	tst.w	r0, #1
 801a1f8:	d0e7      	beq.n	801a1ca <tcp_receive+0x606>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801a1fa:	4b8f      	ldr	r3, [pc, #572]	; (801a438 <tcp_receive+0x874>)
 801a1fc:	68db      	ldr	r3, [r3, #12]
 801a1fe:	8998      	ldrh	r0, [r3, #12]
 801a200:	f7fb ff4f 	bl	80160a2 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a204:	f010 0f02 	tst.w	r0, #2
 801a208:	d1df      	bne.n	801a1ca <tcp_receive+0x606>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801a20a:	4e8b      	ldr	r6, [pc, #556]	; (801a438 <tcp_receive+0x874>)
 801a20c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801a210:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 801a214:	2001      	movs	r0, #1
 801a216:	f7fb ff44 	bl	80160a2 <lwip_htons>
 801a21a:	4338      	orrs	r0, r7
 801a21c:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801a220:	8937      	ldrh	r7, [r6, #8]
 801a222:	68f3      	ldr	r3, [r6, #12]
 801a224:	8998      	ldrh	r0, [r3, #12]
 801a226:	f7fb ff3c 	bl	80160a2 <lwip_htons>
 801a22a:	f010 0f03 	tst.w	r0, #3
 801a22e:	d0c8      	beq.n	801a1c2 <tcp_receive+0x5fe>
 801a230:	2301      	movs	r3, #1
 801a232:	e7c7      	b.n	801a1c4 <tcp_receive+0x600>
            if (next &&
 801a234:	2d00      	cmp	r5, #0
 801a236:	d037      	beq.n	801a2a8 <tcp_receive+0x6e4>
                TCP_SEQ_GT(seqno + tcplen,
 801a238:	4b81      	ldr	r3, [pc, #516]	; (801a440 <tcp_receive+0x87c>)
 801a23a:	6819      	ldr	r1, [r3, #0]
 801a23c:	4b7f      	ldr	r3, [pc, #508]	; (801a43c <tcp_receive+0x878>)
 801a23e:	881b      	ldrh	r3, [r3, #0]
 801a240:	440b      	add	r3, r1
 801a242:	68ea      	ldr	r2, [r5, #12]
 801a244:	6852      	ldr	r2, [r2, #4]
 801a246:	1a9b      	subs	r3, r3, r2
            if (next &&
 801a248:	2b00      	cmp	r3, #0
 801a24a:	dd2d      	ble.n	801a2a8 <tcp_receive+0x6e4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a24c:	1a52      	subs	r2, r2, r1
 801a24e:	4b7a      	ldr	r3, [pc, #488]	; (801a438 <tcp_receive+0x874>)
 801a250:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a252:	68db      	ldr	r3, [r3, #12]
 801a254:	8998      	ldrh	r0, [r3, #12]
 801a256:	f7fb ff24 	bl	80160a2 <lwip_htons>
 801a25a:	f010 0f02 	tst.w	r0, #2
 801a25e:	d003      	beq.n	801a268 <tcp_receive+0x6a4>
                inseg.len -= 1;
 801a260:	4a75      	ldr	r2, [pc, #468]	; (801a438 <tcp_receive+0x874>)
 801a262:	8913      	ldrh	r3, [r2, #8]
 801a264:	3b01      	subs	r3, #1
 801a266:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801a268:	4e73      	ldr	r6, [pc, #460]	; (801a438 <tcp_receive+0x874>)
 801a26a:	8931      	ldrh	r1, [r6, #8]
 801a26c:	6870      	ldr	r0, [r6, #4]
 801a26e:	f7fe f933 	bl	80184d8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a272:	8937      	ldrh	r7, [r6, #8]
 801a274:	68f3      	ldr	r3, [r6, #12]
 801a276:	8998      	ldrh	r0, [r3, #12]
 801a278:	f7fb ff13 	bl	80160a2 <lwip_htons>
 801a27c:	f010 0f03 	tst.w	r0, #3
 801a280:	d03b      	beq.n	801a2fa <tcp_receive+0x736>
 801a282:	2301      	movs	r3, #1
 801a284:	443b      	add	r3, r7
 801a286:	b29b      	uxth	r3, r3
 801a288:	4a6c      	ldr	r2, [pc, #432]	; (801a43c <tcp_receive+0x878>)
 801a28a:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a28c:	4a6c      	ldr	r2, [pc, #432]	; (801a440 <tcp_receive+0x87c>)
 801a28e:	6812      	ldr	r2, [r2, #0]
 801a290:	4413      	add	r3, r2
 801a292:	68ea      	ldr	r2, [r5, #12]
 801a294:	6852      	ldr	r2, [r2, #4]
 801a296:	4293      	cmp	r3, r2
 801a298:	d006      	beq.n	801a2a8 <tcp_receive+0x6e4>
 801a29a:	4b6a      	ldr	r3, [pc, #424]	; (801a444 <tcp_receive+0x880>)
 801a29c:	f240 52af 	movw	r2, #1455	; 0x5af
 801a2a0:	4969      	ldr	r1, [pc, #420]	; (801a448 <tcp_receive+0x884>)
 801a2a2:	486a      	ldr	r0, [pc, #424]	; (801a44c <tcp_receive+0x888>)
 801a2a4:	f005 f845 	bl	801f332 <iprintf>
            pcb->ooseq = next;
 801a2a8:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
 801a2aa:	4b64      	ldr	r3, [pc, #400]	; (801a43c <tcp_receive+0x878>)
 801a2ac:	881a      	ldrh	r2, [r3, #0]
 801a2ae:	4b64      	ldr	r3, [pc, #400]	; (801a440 <tcp_receive+0x87c>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	4413      	add	r3, r2
 801a2b4:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a2b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a2b8:	429a      	cmp	r2, r3
 801a2ba:	d820      	bhi.n	801a2fe <tcp_receive+0x73a>
        pcb->rcv_wnd -= tcplen;
 801a2bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a2be:	4a5f      	ldr	r2, [pc, #380]	; (801a43c <tcp_receive+0x878>)
 801a2c0:	8812      	ldrh	r2, [r2, #0]
 801a2c2:	1a9b      	subs	r3, r3, r2
 801a2c4:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801a2c6:	4620      	mov	r0, r4
 801a2c8:	f7fe fc24 	bl	8018b14 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801a2cc:	4b5a      	ldr	r3, [pc, #360]	; (801a438 <tcp_receive+0x874>)
 801a2ce:	685b      	ldr	r3, [r3, #4]
 801a2d0:	891a      	ldrh	r2, [r3, #8]
 801a2d2:	b122      	cbz	r2, 801a2de <tcp_receive+0x71a>
          recv_data = inseg.p;
 801a2d4:	4a5e      	ldr	r2, [pc, #376]	; (801a450 <tcp_receive+0x88c>)
 801a2d6:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801a2d8:	2200      	movs	r2, #0
 801a2da:	4b57      	ldr	r3, [pc, #348]	; (801a438 <tcp_receive+0x874>)
 801a2dc:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a2de:	4b56      	ldr	r3, [pc, #344]	; (801a438 <tcp_receive+0x874>)
 801a2e0:	68db      	ldr	r3, [r3, #12]
 801a2e2:	8998      	ldrh	r0, [r3, #12]
 801a2e4:	f7fb fedd 	bl	80160a2 <lwip_htons>
 801a2e8:	f010 0f01 	tst.w	r0, #1
 801a2ec:	d035      	beq.n	801a35a <tcp_receive+0x796>
          recv_flags |= TF_GOT_FIN;
 801a2ee:	4a59      	ldr	r2, [pc, #356]	; (801a454 <tcp_receive+0x890>)
 801a2f0:	7813      	ldrb	r3, [r2, #0]
 801a2f2:	f043 0320 	orr.w	r3, r3, #32
 801a2f6:	7013      	strb	r3, [r2, #0]
 801a2f8:	e02f      	b.n	801a35a <tcp_receive+0x796>
              tcplen = TCP_TCPLEN(&inseg);
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	e7c2      	b.n	801a284 <tcp_receive+0x6c0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a2fe:	4b51      	ldr	r3, [pc, #324]	; (801a444 <tcp_receive+0x880>)
 801a300:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a304:	4954      	ldr	r1, [pc, #336]	; (801a458 <tcp_receive+0x894>)
 801a306:	4851      	ldr	r0, [pc, #324]	; (801a44c <tcp_receive+0x888>)
 801a308:	f005 f813 	bl	801f332 <iprintf>
 801a30c:	e7d6      	b.n	801a2bc <tcp_receive+0x6f8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a30e:	2300      	movs	r3, #0
 801a310:	e035      	b.n	801a37e <tcp_receive+0x7ba>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a312:	2300      	movs	r3, #0
 801a314:	e041      	b.n	801a39a <tcp_receive+0x7d6>
 801a316:	4b4b      	ldr	r3, [pc, #300]	; (801a444 <tcp_receive+0x880>)
 801a318:	f240 52de 	movw	r2, #1502	; 0x5de
 801a31c:	494f      	ldr	r1, [pc, #316]	; (801a45c <tcp_receive+0x898>)
 801a31e:	484b      	ldr	r0, [pc, #300]	; (801a44c <tcp_receive+0x888>)
 801a320:	f005 f807 	bl	801f332 <iprintf>
 801a324:	e03c      	b.n	801a3a0 <tcp_receive+0x7dc>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a326:	2300      	movs	r3, #0
 801a328:	e043      	b.n	801a3b2 <tcp_receive+0x7ee>
              recv_data = cseg->p;
 801a32a:	4b49      	ldr	r3, [pc, #292]	; (801a450 <tcp_receive+0x88c>)
 801a32c:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 801a32e:	2300      	movs	r3, #0
 801a330:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a332:	68eb      	ldr	r3, [r5, #12]
 801a334:	8998      	ldrh	r0, [r3, #12]
 801a336:	f7fb feb4 	bl	80160a2 <lwip_htons>
 801a33a:	f010 0f01 	tst.w	r0, #1
 801a33e:	d007      	beq.n	801a350 <tcp_receive+0x78c>
            recv_flags |= TF_GOT_FIN;
 801a340:	4a44      	ldr	r2, [pc, #272]	; (801a454 <tcp_receive+0x890>)
 801a342:	7813      	ldrb	r3, [r2, #0]
 801a344:	f043 0320 	orr.w	r3, r3, #32
 801a348:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a34a:	7d23      	ldrb	r3, [r4, #20]
 801a34c:	2b04      	cmp	r3, #4
 801a34e:	d042      	beq.n	801a3d6 <tcp_receive+0x812>
          pcb->ooseq = cseg->next;
 801a350:	682b      	ldr	r3, [r5, #0]
 801a352:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 801a354:	4628      	mov	r0, r5
 801a356:	f7fe fc4f 	bl	8018bf8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a35a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801a35c:	2d00      	cmp	r5, #0
 801a35e:	d03d      	beq.n	801a3dc <tcp_receive+0x818>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a360:	68ea      	ldr	r2, [r5, #12]
 801a362:	6853      	ldr	r3, [r2, #4]
 801a364:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a366:	428b      	cmp	r3, r1
 801a368:	d138      	bne.n	801a3dc <tcp_receive+0x818>
          seqno = pcb->ooseq->tcphdr->seqno;
 801a36a:	4935      	ldr	r1, [pc, #212]	; (801a440 <tcp_receive+0x87c>)
 801a36c:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a36e:	892e      	ldrh	r6, [r5, #8]
 801a370:	8990      	ldrh	r0, [r2, #12]
 801a372:	f7fb fe96 	bl	80160a2 <lwip_htons>
 801a376:	f010 0f03 	tst.w	r0, #3
 801a37a:	d0c8      	beq.n	801a30e <tcp_receive+0x74a>
 801a37c:	2301      	movs	r3, #1
 801a37e:	199a      	adds	r2, r3, r6
 801a380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a382:	4413      	add	r3, r2
 801a384:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a386:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 801a388:	892f      	ldrh	r7, [r5, #8]
 801a38a:	68eb      	ldr	r3, [r5, #12]
 801a38c:	8998      	ldrh	r0, [r3, #12]
 801a38e:	f7fb fe88 	bl	80160a2 <lwip_htons>
 801a392:	f010 0f03 	tst.w	r0, #3
 801a396:	d0bc      	beq.n	801a312 <tcp_receive+0x74e>
 801a398:	2301      	movs	r3, #1
 801a39a:	443b      	add	r3, r7
 801a39c:	429e      	cmp	r6, r3
 801a39e:	d3ba      	bcc.n	801a316 <tcp_receive+0x752>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a3a0:	892e      	ldrh	r6, [r5, #8]
 801a3a2:	68eb      	ldr	r3, [r5, #12]
 801a3a4:	8998      	ldrh	r0, [r3, #12]
 801a3a6:	f7fb fe7c 	bl	80160a2 <lwip_htons>
 801a3aa:	f010 0f03 	tst.w	r0, #3
 801a3ae:	d0ba      	beq.n	801a326 <tcp_receive+0x762>
 801a3b0:	2301      	movs	r3, #1
 801a3b2:	199a      	adds	r2, r3, r6
 801a3b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a3b6:	1a9b      	subs	r3, r3, r2
 801a3b8:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801a3ba:	4620      	mov	r0, r4
 801a3bc:	f7fe fbaa 	bl	8018b14 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801a3c0:	6869      	ldr	r1, [r5, #4]
 801a3c2:	890b      	ldrh	r3, [r1, #8]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d0b4      	beq.n	801a332 <tcp_receive+0x76e>
            if (recv_data) {
 801a3c8:	4b21      	ldr	r3, [pc, #132]	; (801a450 <tcp_receive+0x88c>)
 801a3ca:	6818      	ldr	r0, [r3, #0]
 801a3cc:	2800      	cmp	r0, #0
 801a3ce:	d0ac      	beq.n	801a32a <tcp_receive+0x766>
              pbuf_cat(recv_data, cseg->p);
 801a3d0:	f7fe f91a 	bl	8018608 <pbuf_cat>
 801a3d4:	e7ab      	b.n	801a32e <tcp_receive+0x76a>
              pcb->state = CLOSE_WAIT;
 801a3d6:	2307      	movs	r3, #7
 801a3d8:	7523      	strb	r3, [r4, #20]
 801a3da:	e7b9      	b.n	801a350 <tcp_receive+0x78c>
        tcp_ack(pcb);
 801a3dc:	7ea3      	ldrb	r3, [r4, #26]
 801a3de:	f013 0f01 	tst.w	r3, #1
 801a3e2:	d006      	beq.n	801a3f2 <tcp_receive+0x82e>
 801a3e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801a3e8:	f043 0302 	orr.w	r3, r3, #2
 801a3ec:	76a3      	strb	r3, [r4, #26]
 801a3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3f2:	f043 0301 	orr.w	r3, r3, #1
 801a3f6:	76a3      	strb	r3, [r4, #26]
 801a3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a3fc:	480e      	ldr	r0, [pc, #56]	; (801a438 <tcp_receive+0x874>)
 801a3fe:	f7fe fc12 	bl	8018c26 <tcp_seg_copy>
 801a402:	6720      	str	r0, [r4, #112]	; 0x70
 801a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 801a408:	4b0b      	ldr	r3, [pc, #44]	; (801a438 <tcp_receive+0x874>)
 801a40a:	891a      	ldrh	r2, [r3, #8]
 801a40c:	892b      	ldrh	r3, [r5, #8]
 801a40e:	429a      	cmp	r2, r3
 801a410:	f240 80ee 	bls.w	801a5f0 <tcp_receive+0xa2c>
                cseg = tcp_seg_copy(&inseg);
 801a414:	4808      	ldr	r0, [pc, #32]	; (801a438 <tcp_receive+0x874>)
 801a416:	f7fe fc06 	bl	8018c26 <tcp_seg_copy>
                if (cseg != NULL) {
 801a41a:	4603      	mov	r3, r0
 801a41c:	2800      	cmp	r0, #0
 801a41e:	f000 80e7 	beq.w	801a5f0 <tcp_receive+0xa2c>
                  if (prev != NULL) {
 801a422:	b136      	cbz	r6, 801a432 <tcp_receive+0x86e>
                    prev->next = cseg;
 801a424:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 801a426:	4629      	mov	r1, r5
 801a428:	4618      	mov	r0, r3
 801a42a:	f7ff fb89 	bl	8019b40 <tcp_oos_insert_segment>
 801a42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 801a432:	6720      	str	r0, [r4, #112]	; 0x70
 801a434:	e7f7      	b.n	801a426 <tcp_receive+0x862>
 801a436:	bf00      	nop
 801a438:	200094cc 	.word	0x200094cc
 801a43c:	200094fe 	.word	0x200094fe
 801a440:	200094e8 	.word	0x200094e8
 801a444:	080250c4 	.word	0x080250c4
 801a448:	080251d8 	.word	0x080251d8
 801a44c:	08020b90 	.word	0x08020b90
 801a450:	200094e0 	.word	0x200094e0
 801a454:	200094e4 	.word	0x200094e4
 801a458:	08025214 	.word	0x08025214
 801a45c:	08025234 	.word	0x08025234
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a460:	1a5a      	subs	r2, r3, r1
 801a462:	2a00      	cmp	r2, #0
 801a464:	db35      	blt.n	801a4d2 <tcp_receive+0x90e>
              if (next->next == NULL &&
 801a466:	682a      	ldr	r2, [r5, #0]
 801a468:	462e      	mov	r6, r5
 801a46a:	2a00      	cmp	r2, #0
 801a46c:	d03d      	beq.n	801a4ea <tcp_receive+0x926>
 801a46e:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a470:	2d00      	cmp	r5, #0
 801a472:	f000 80ab 	beq.w	801a5cc <tcp_receive+0xa08>
            if (seqno == next->tcphdr->seqno) {
 801a476:	68e8      	ldr	r0, [r5, #12]
 801a478:	6841      	ldr	r1, [r0, #4]
 801a47a:	4b5e      	ldr	r3, [pc, #376]	; (801a5f4 <tcp_receive+0xa30>)
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	4299      	cmp	r1, r3
 801a480:	d0c2      	beq.n	801a408 <tcp_receive+0x844>
              if (prev == NULL) {
 801a482:	2e00      	cmp	r6, #0
 801a484:	d0ec      	beq.n	801a460 <tcp_receive+0x89c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 801a486:	68f2      	ldr	r2, [r6, #12]
 801a488:	6852      	ldr	r2, [r2, #4]
 801a48a:	1a9a      	subs	r2, r3, r2
 801a48c:	2a01      	cmp	r2, #1
 801a48e:	d4ea      	bmi.n	801a466 <tcp_receive+0x8a2>
 801a490:	1a5a      	subs	r2, r3, r1
 801a492:	3201      	adds	r2, #1
 801a494:	2a00      	cmp	r2, #0
 801a496:	dce6      	bgt.n	801a466 <tcp_receive+0x8a2>
                  cseg = tcp_seg_copy(&inseg);
 801a498:	4857      	ldr	r0, [pc, #348]	; (801a5f8 <tcp_receive+0xa34>)
 801a49a:	f7fe fbc4 	bl	8018c26 <tcp_seg_copy>
                  if (cseg != NULL) {
 801a49e:	4604      	mov	r4, r0
 801a4a0:	2800      	cmp	r0, #0
 801a4a2:	f000 80a5 	beq.w	801a5f0 <tcp_receive+0xa2c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a4a6:	68f3      	ldr	r3, [r6, #12]
 801a4a8:	6859      	ldr	r1, [r3, #4]
 801a4aa:	8932      	ldrh	r2, [r6, #8]
 801a4ac:	440a      	add	r2, r1
 801a4ae:	4b51      	ldr	r3, [pc, #324]	; (801a5f4 <tcp_receive+0xa30>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	1ad2      	subs	r2, r2, r3
 801a4b4:	2a00      	cmp	r2, #0
 801a4b6:	dd05      	ble.n	801a4c4 <tcp_receive+0x900>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a4b8:	1a5b      	subs	r3, r3, r1
 801a4ba:	b299      	uxth	r1, r3
 801a4bc:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a4be:	6870      	ldr	r0, [r6, #4]
 801a4c0:	f7fe f80a 	bl	80184d8 <pbuf_realloc>
                    prev->next = cseg;
 801a4c4:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a4c6:	4629      	mov	r1, r5
 801a4c8:	4620      	mov	r0, r4
 801a4ca:	f7ff fb39 	bl	8019b40 <tcp_oos_insert_segment>
 801a4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 801a4d2:	4849      	ldr	r0, [pc, #292]	; (801a5f8 <tcp_receive+0xa34>)
 801a4d4:	f7fe fba7 	bl	8018c26 <tcp_seg_copy>
                  if (cseg != NULL) {
 801a4d8:	2800      	cmp	r0, #0
 801a4da:	f000 8089 	beq.w	801a5f0 <tcp_receive+0xa2c>
                    pcb->ooseq = cseg;
 801a4de:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801a4e0:	4629      	mov	r1, r5
 801a4e2:	f7ff fb2d 	bl	8019b40 <tcp_oos_insert_segment>
 801a4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a4ea:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	dc01      	bgt.n	801a4f4 <tcp_receive+0x930>
 801a4f0:	4615      	mov	r5, r2
 801a4f2:	e7bd      	b.n	801a470 <tcp_receive+0x8ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a4f4:	8980      	ldrh	r0, [r0, #12]
 801a4f6:	f7fb fdd4 	bl	80160a2 <lwip_htons>
 801a4fa:	f010 0f01 	tst.w	r0, #1
 801a4fe:	d177      	bne.n	801a5f0 <tcp_receive+0xa2c>
                next->next = tcp_seg_copy(&inseg);
 801a500:	483d      	ldr	r0, [pc, #244]	; (801a5f8 <tcp_receive+0xa34>)
 801a502:	f7fe fb90 	bl	8018c26 <tcp_seg_copy>
 801a506:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801a508:	2800      	cmp	r0, #0
 801a50a:	d071      	beq.n	801a5f0 <tcp_receive+0xa2c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a50c:	68eb      	ldr	r3, [r5, #12]
 801a50e:	6859      	ldr	r1, [r3, #4]
 801a510:	892a      	ldrh	r2, [r5, #8]
 801a512:	440a      	add	r2, r1
 801a514:	4b37      	ldr	r3, [pc, #220]	; (801a5f4 <tcp_receive+0xa30>)
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	1ad2      	subs	r2, r2, r3
 801a51a:	2a00      	cmp	r2, #0
 801a51c:	dd05      	ble.n	801a52a <tcp_receive+0x966>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a51e:	1a5b      	subs	r3, r3, r1
 801a520:	b299      	uxth	r1, r3
 801a522:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801a524:	6868      	ldr	r0, [r5, #4]
 801a526:	f7fd ffd7 	bl	80184d8 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a52a:	4b34      	ldr	r3, [pc, #208]	; (801a5fc <tcp_receive+0xa38>)
 801a52c:	881b      	ldrh	r3, [r3, #0]
 801a52e:	4a31      	ldr	r2, [pc, #196]	; (801a5f4 <tcp_receive+0xa30>)
 801a530:	6812      	ldr	r2, [r2, #0]
 801a532:	4413      	add	r3, r2
 801a534:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a536:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a538:	440a      	add	r2, r1
 801a53a:	1a9b      	subs	r3, r3, r2
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	dd57      	ble.n	801a5f0 <tcp_receive+0xa2c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a540:	682b      	ldr	r3, [r5, #0]
 801a542:	68db      	ldr	r3, [r3, #12]
 801a544:	8998      	ldrh	r0, [r3, #12]
 801a546:	f7fb fdac 	bl	80160a2 <lwip_htons>
 801a54a:	f010 0f01 	tst.w	r0, #1
 801a54e:	d12c      	bne.n	801a5aa <tcp_receive+0x9e6>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a550:	682a      	ldr	r2, [r5, #0]
 801a552:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a554:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a556:	440b      	add	r3, r1
 801a558:	b29b      	uxth	r3, r3
 801a55a:	4926      	ldr	r1, [pc, #152]	; (801a5f4 <tcp_receive+0xa30>)
 801a55c:	6809      	ldr	r1, [r1, #0]
 801a55e:	1a5b      	subs	r3, r3, r1
 801a560:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a562:	682b      	ldr	r3, [r5, #0]
 801a564:	8919      	ldrh	r1, [r3, #8]
 801a566:	6858      	ldr	r0, [r3, #4]
 801a568:	f7fd ffb6 	bl	80184d8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a56c:	682b      	ldr	r3, [r5, #0]
 801a56e:	891d      	ldrh	r5, [r3, #8]
 801a570:	68db      	ldr	r3, [r3, #12]
 801a572:	8998      	ldrh	r0, [r3, #12]
 801a574:	f7fb fd95 	bl	80160a2 <lwip_htons>
 801a578:	f010 0f03 	tst.w	r0, #3
 801a57c:	d024      	beq.n	801a5c8 <tcp_receive+0xa04>
 801a57e:	2301      	movs	r3, #1
 801a580:	442b      	add	r3, r5
 801a582:	b29b      	uxth	r3, r3
 801a584:	4a1d      	ldr	r2, [pc, #116]	; (801a5fc <tcp_receive+0xa38>)
 801a586:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a588:	4a1a      	ldr	r2, [pc, #104]	; (801a5f4 <tcp_receive+0xa30>)
 801a58a:	6812      	ldr	r2, [r2, #0]
 801a58c:	4413      	add	r3, r2
 801a58e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a590:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a592:	440a      	add	r2, r1
 801a594:	4293      	cmp	r3, r2
 801a596:	d02b      	beq.n	801a5f0 <tcp_receive+0xa2c>
 801a598:	4b19      	ldr	r3, [pc, #100]	; (801a600 <tcp_receive+0xa3c>)
 801a59a:	f240 627b 	movw	r2, #1659	; 0x67b
 801a59e:	4919      	ldr	r1, [pc, #100]	; (801a604 <tcp_receive+0xa40>)
 801a5a0:	4819      	ldr	r0, [pc, #100]	; (801a608 <tcp_receive+0xa44>)
 801a5a2:	f004 fec6 	bl	801f332 <iprintf>
 801a5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a5aa:	682b      	ldr	r3, [r5, #0]
 801a5ac:	68df      	ldr	r7, [r3, #12]
 801a5ae:	89b8      	ldrh	r0, [r7, #12]
 801a5b0:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 801a5b4:	b2b6      	uxth	r6, r6
 801a5b6:	f7fb fd74 	bl	80160a2 <lwip_htons>
 801a5ba:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801a5be:	f7fb fd70 	bl	80160a2 <lwip_htons>
 801a5c2:	4330      	orrs	r0, r6
 801a5c4:	81b8      	strh	r0, [r7, #12]
 801a5c6:	e7c3      	b.n	801a550 <tcp_receive+0x98c>
                    tcplen = TCP_TCPLEN(next->next);
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	e7d9      	b.n	801a580 <tcp_receive+0x9bc>
 801a5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a5d0:	4b08      	ldr	r3, [pc, #32]	; (801a5f4 <tcp_receive+0xa30>)
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a5d6:	1a99      	subs	r1, r3, r2
 801a5d8:	2900      	cmp	r1, #0
 801a5da:	db05      	blt.n	801a5e8 <tcp_receive+0xa24>
 801a5dc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a5de:	440a      	add	r2, r1
 801a5e0:	1a9b      	subs	r3, r3, r2
 801a5e2:	3301      	adds	r3, #1
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	dd03      	ble.n	801a5f0 <tcp_receive+0xa2c>
      tcp_ack_now(pcb);
 801a5e8:	7ea3      	ldrb	r3, [r4, #26]
 801a5ea:	f043 0302 	orr.w	r3, r3, #2
 801a5ee:	76a3      	strb	r3, [r4, #26]
 801a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5f4:	200094e8 	.word	0x200094e8
 801a5f8:	200094cc 	.word	0x200094cc
 801a5fc:	200094fe 	.word	0x200094fe
 801a600:	080250c4 	.word	0x080250c4
 801a604:	080251a0 	.word	0x080251a0
 801a608:	08020b90 	.word	0x08020b90

0801a60c <tcp_process>:
{
 801a60c:	b570      	push	{r4, r5, r6, lr}
 801a60e:	b082      	sub	sp, #8
 801a610:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 801a612:	4ba3      	ldr	r3, [pc, #652]	; (801a8a0 <tcp_process+0x294>)
 801a614:	781b      	ldrb	r3, [r3, #0]
 801a616:	f013 0f04 	tst.w	r3, #4
 801a61a:	d03d      	beq.n	801a698 <tcp_process+0x8c>
    if (pcb->state == SYN_SENT) {
 801a61c:	7d01      	ldrb	r1, [r0, #20]
 801a61e:	2902      	cmp	r1, #2
 801a620:	d012      	beq.n	801a648 <tcp_process+0x3c>
      if (seqno == pcb->rcv_nxt) {
 801a622:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801a624:	4b9f      	ldr	r3, [pc, #636]	; (801a8a4 <tcp_process+0x298>)
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	429a      	cmp	r2, r3
 801a62a:	d01c      	beq.n	801a666 <tcp_process+0x5a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a62c:	1a98      	subs	r0, r3, r2
 801a62e:	2800      	cmp	r0, #0
 801a630:	db1b      	blt.n	801a66a <tcp_process+0x5e>
 801a632:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801a634:	4402      	add	r2, r0
 801a636:	1a9b      	subs	r3, r3, r2
 801a638:	2b00      	cmp	r3, #0
 801a63a:	dd0c      	ble.n	801a656 <tcp_process+0x4a>
  u8_t acceptable = 0;
 801a63c:	2300      	movs	r3, #0
    if (acceptable) {
 801a63e:	b9b3      	cbnz	r3, 801a66e <tcp_process+0x62>
      return ERR_OK;
 801a640:	2500      	movs	r5, #0
}
 801a642:	4628      	mov	r0, r5
 801a644:	b002      	add	sp, #8
 801a646:	bd70      	pop	{r4, r5, r6, pc}
      if (ackno == pcb->snd_nxt) {
 801a648:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801a64a:	4b97      	ldr	r3, [pc, #604]	; (801a8a8 <tcp_process+0x29c>)
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	429a      	cmp	r2, r3
 801a650:	d007      	beq.n	801a662 <tcp_process+0x56>
  u8_t acceptable = 0;
 801a652:	2300      	movs	r3, #0
 801a654:	e7f3      	b.n	801a63e <tcp_process+0x32>
        tcp_ack_now(pcb);
 801a656:	7ea3      	ldrb	r3, [r4, #26]
 801a658:	f043 0302 	orr.w	r3, r3, #2
 801a65c:	76a3      	strb	r3, [r4, #26]
  u8_t acceptable = 0;
 801a65e:	2300      	movs	r3, #0
 801a660:	e7ed      	b.n	801a63e <tcp_process+0x32>
        acceptable = 1;
 801a662:	2301      	movs	r3, #1
 801a664:	e7eb      	b.n	801a63e <tcp_process+0x32>
        acceptable = 1;
 801a666:	2301      	movs	r3, #1
 801a668:	e7e9      	b.n	801a63e <tcp_process+0x32>
  u8_t acceptable = 0;
 801a66a:	2300      	movs	r3, #0
 801a66c:	e7e7      	b.n	801a63e <tcp_process+0x32>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a66e:	b159      	cbz	r1, 801a688 <tcp_process+0x7c>
      recv_flags |= TF_RESET;
 801a670:	4a8e      	ldr	r2, [pc, #568]	; (801a8ac <tcp_process+0x2a0>)
 801a672:	7813      	ldrb	r3, [r2, #0]
 801a674:	f043 0308 	orr.w	r3, r3, #8
 801a678:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801a67a:	7ea3      	ldrb	r3, [r4, #26]
 801a67c:	f023 0301 	bic.w	r3, r3, #1
 801a680:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 801a682:	f06f 050d 	mvn.w	r5, #13
 801a686:	e7dc      	b.n	801a642 <tcp_process+0x36>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a688:	4b89      	ldr	r3, [pc, #548]	; (801a8b0 <tcp_process+0x2a4>)
 801a68a:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a68e:	4989      	ldr	r1, [pc, #548]	; (801a8b4 <tcp_process+0x2a8>)
 801a690:	4889      	ldr	r0, [pc, #548]	; (801a8b8 <tcp_process+0x2ac>)
 801a692:	f004 fe4e 	bl	801f332 <iprintf>
 801a696:	e7eb      	b.n	801a670 <tcp_process+0x64>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801a698:	f013 0f02 	tst.w	r3, #2
 801a69c:	d00a      	beq.n	801a6b4 <tcp_process+0xa8>
 801a69e:	7d03      	ldrb	r3, [r0, #20]
 801a6a0:	3b02      	subs	r3, #2
 801a6a2:	b2db      	uxtb	r3, r3
 801a6a4:	2b01      	cmp	r3, #1
 801a6a6:	d905      	bls.n	801a6b4 <tcp_process+0xa8>
    tcp_ack_now(pcb);
 801a6a8:	7e83      	ldrb	r3, [r0, #26]
 801a6aa:	f043 0302 	orr.w	r3, r3, #2
 801a6ae:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 801a6b0:	2500      	movs	r5, #0
 801a6b2:	e7c6      	b.n	801a642 <tcp_process+0x36>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801a6b4:	7ea3      	ldrb	r3, [r4, #26]
 801a6b6:	f013 0f10 	tst.w	r3, #16
 801a6ba:	d102      	bne.n	801a6c2 <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 801a6bc:	4b7f      	ldr	r3, [pc, #508]	; (801a8bc <tcp_process+0x2b0>)
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 801a6c8:	4620      	mov	r0, r4
 801a6ca:	f7ff f8ff 	bl	80198cc <tcp_parseopt>
  switch (pcb->state) {
 801a6ce:	7d23      	ldrb	r3, [r4, #20]
 801a6d0:	3b02      	subs	r3, #2
 801a6d2:	2b07      	cmp	r3, #7
 801a6d4:	f200 8219 	bhi.w	801ab0a <tcp_process+0x4fe>
 801a6d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a6dc:	009b0008 	.word	0x009b0008
 801a6e0:	01460135 	.word	0x01460135
 801a6e4:	0135019c 	.word	0x0135019c
 801a6e8:	01fd01ca 	.word	0x01fd01ca
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801a6ec:	4b6c      	ldr	r3, [pc, #432]	; (801a8a0 <tcp_process+0x294>)
 801a6ee:	781b      	ldrb	r3, [r3, #0]
 801a6f0:	f003 0212 	and.w	r2, r3, #18
 801a6f4:	2a12      	cmp	r2, #18
 801a6f6:	d004      	beq.n	801a702 <tcp_process+0xf6>
    else if (flags & TCP_ACK) {
 801a6f8:	f013 0f10 	tst.w	r3, #16
 801a6fc:	d16b      	bne.n	801a7d6 <tcp_process+0x1ca>
  return ERR_OK;
 801a6fe:	2500      	movs	r5, #0
 801a700:	e79f      	b.n	801a642 <tcp_process+0x36>
        && (ackno == pcb->lastack + 1)) {
 801a702:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801a704:	3201      	adds	r2, #1
 801a706:	4968      	ldr	r1, [pc, #416]	; (801a8a8 <tcp_process+0x29c>)
 801a708:	6809      	ldr	r1, [r1, #0]
 801a70a:	428a      	cmp	r2, r1
 801a70c:	d1f4      	bne.n	801a6f8 <tcp_process+0xec>
      pcb->rcv_nxt = seqno + 1;
 801a70e:	4b65      	ldr	r3, [pc, #404]	; (801a8a4 <tcp_process+0x298>)
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	1c5a      	adds	r2, r3, #1
 801a714:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a716:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 801a718:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801a71a:	4a69      	ldr	r2, [pc, #420]	; (801a8c0 <tcp_process+0x2b4>)
 801a71c:	6812      	ldr	r2, [r2, #0]
 801a71e:	89d2      	ldrh	r2, [r2, #14]
 801a720:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801a724:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801a728:	3b01      	subs	r3, #1
 801a72a:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801a72c:	2304      	movs	r3, #4
 801a72e:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a730:	18e1      	adds	r1, r4, r3
 801a732:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801a734:	f7ff f868 	bl	8019808 <tcp_eff_send_mss_impl>
 801a738:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a73a:	0043      	lsls	r3, r0, #1
 801a73c:	f241 121c 	movw	r2, #4380	; 0x111c
 801a740:	4293      	cmp	r3, r2
 801a742:	bf38      	it	cc
 801a744:	4613      	movcc	r3, r2
 801a746:	0080      	lsls	r0, r0, #2
 801a748:	4283      	cmp	r3, r0
 801a74a:	bf28      	it	cs
 801a74c:	4603      	movcs	r3, r0
 801a74e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a752:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a756:	b31b      	cbz	r3, 801a7a0 <tcp_process+0x194>
      --pcb->snd_queuelen;
 801a758:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a75c:	3b01      	subs	r3, #1
 801a75e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 801a762:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 801a764:	b325      	cbz	r5, 801a7b0 <tcp_process+0x1a4>
        pcb->unacked = rseg->next;
 801a766:	682b      	ldr	r3, [r5, #0]
 801a768:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 801a76a:	4628      	mov	r0, r5
 801a76c:	f7fe fa44 	bl	8018bf8 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 801a770:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a772:	b353      	cbz	r3, 801a7ca <tcp_process+0x1be>
        pcb->rtime = 0;
 801a774:	2300      	movs	r3, #0
 801a776:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 801a778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a77c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801a780:	b33b      	cbz	r3, 801a7d2 <tcp_process+0x1c6>
 801a782:	2200      	movs	r2, #0
 801a784:	4621      	mov	r1, r4
 801a786:	6920      	ldr	r0, [r4, #16]
 801a788:	4798      	blx	r3
 801a78a:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 801a78c:	f115 0f0d 	cmn.w	r5, #13
 801a790:	f43f af57 	beq.w	801a642 <tcp_process+0x36>
      tcp_ack_now(pcb);
 801a794:	7ea3      	ldrb	r3, [r4, #26]
 801a796:	f043 0302 	orr.w	r3, r3, #2
 801a79a:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 801a79c:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 801a79e:	e750      	b.n	801a642 <tcp_process+0x36>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a7a0:	4b43      	ldr	r3, [pc, #268]	; (801a8b0 <tcp_process+0x2a4>)
 801a7a2:	f240 321a 	movw	r2, #794	; 0x31a
 801a7a6:	4947      	ldr	r1, [pc, #284]	; (801a8c4 <tcp_process+0x2b8>)
 801a7a8:	4843      	ldr	r0, [pc, #268]	; (801a8b8 <tcp_process+0x2ac>)
 801a7aa:	f004 fdc2 	bl	801f332 <iprintf>
 801a7ae:	e7d3      	b.n	801a758 <tcp_process+0x14c>
        rseg = pcb->unsent;
 801a7b0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801a7b2:	b115      	cbz	r5, 801a7ba <tcp_process+0x1ae>
        pcb->unsent = rseg->next;
 801a7b4:	682b      	ldr	r3, [r5, #0]
 801a7b6:	66a3      	str	r3, [r4, #104]	; 0x68
 801a7b8:	e7d7      	b.n	801a76a <tcp_process+0x15e>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801a7ba:	4b3d      	ldr	r3, [pc, #244]	; (801a8b0 <tcp_process+0x2a4>)
 801a7bc:	f240 3222 	movw	r2, #802	; 0x322
 801a7c0:	4941      	ldr	r1, [pc, #260]	; (801a8c8 <tcp_process+0x2bc>)
 801a7c2:	483d      	ldr	r0, [pc, #244]	; (801a8b8 <tcp_process+0x2ac>)
 801a7c4:	f004 fdb5 	bl	801f332 <iprintf>
 801a7c8:	e7f4      	b.n	801a7b4 <tcp_process+0x1a8>
        pcb->rtime = -1;
 801a7ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a7ce:	8623      	strh	r3, [r4, #48]	; 0x30
 801a7d0:	e7d4      	b.n	801a77c <tcp_process+0x170>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a7d2:	2500      	movs	r5, #0
 801a7d4:	e7da      	b.n	801a78c <tcp_process+0x180>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a7d6:	4b3a      	ldr	r3, [pc, #232]	; (801a8c0 <tcp_process+0x2b4>)
 801a7d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801a7da:	4a3c      	ldr	r2, [pc, #240]	; (801a8cc <tcp_process+0x2c0>)
 801a7dc:	493c      	ldr	r1, [pc, #240]	; (801a8d0 <tcp_process+0x2c4>)
 801a7de:	880d      	ldrh	r5, [r1, #0]
 801a7e0:	4930      	ldr	r1, [pc, #192]	; (801a8a4 <tcp_process+0x298>)
 801a7e2:	6809      	ldr	r1, [r1, #0]
 801a7e4:	4830      	ldr	r0, [pc, #192]	; (801a8a8 <tcp_process+0x29c>)
 801a7e6:	6800      	ldr	r0, [r0, #0]
 801a7e8:	881e      	ldrh	r6, [r3, #0]
 801a7ea:	9601      	str	r6, [sp, #4]
 801a7ec:	885b      	ldrh	r3, [r3, #2]
 801a7ee:	9300      	str	r3, [sp, #0]
 801a7f0:	4613      	mov	r3, r2
 801a7f2:	3204      	adds	r2, #4
 801a7f4:	4429      	add	r1, r5
 801a7f6:	f001 faeb 	bl	801bdd0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801a7fa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801a7fe:	2b05      	cmp	r3, #5
 801a800:	d901      	bls.n	801a806 <tcp_process+0x1fa>
  return ERR_OK;
 801a802:	2500      	movs	r5, #0
 801a804:	e71d      	b.n	801a642 <tcp_process+0x36>
        pcb->rtime = 0;
 801a806:	2500      	movs	r5, #0
 801a808:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 801a80a:	4620      	mov	r0, r4
 801a80c:	f001 fb34 	bl	801be78 <tcp_rexmit_rto>
 801a810:	e717      	b.n	801a642 <tcp_process+0x36>
    if (flags & TCP_ACK) {
 801a812:	4b23      	ldr	r3, [pc, #140]	; (801a8a0 <tcp_process+0x294>)
 801a814:	781b      	ldrb	r3, [r3, #0]
 801a816:	f013 0f10 	tst.w	r3, #16
 801a81a:	f000 8083 	beq.w	801a924 <tcp_process+0x318>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801a81e:	4b22      	ldr	r3, [pc, #136]	; (801a8a8 <tcp_process+0x29c>)
 801a820:	6818      	ldr	r0, [r3, #0]
 801a822:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a824:	1ac3      	subs	r3, r0, r3
 801a826:	2b01      	cmp	r3, #1
 801a828:	d403      	bmi.n	801a832 <tcp_process+0x226>
 801a82a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a82c:	1ac3      	subs	r3, r0, r3
 801a82e:	2b00      	cmp	r3, #0
 801a830:	dd11      	ble.n	801a856 <tcp_process+0x24a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a832:	4b23      	ldr	r3, [pc, #140]	; (801a8c0 <tcp_process+0x2b4>)
 801a834:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801a836:	4a25      	ldr	r2, [pc, #148]	; (801a8cc <tcp_process+0x2c0>)
 801a838:	4925      	ldr	r1, [pc, #148]	; (801a8d0 <tcp_process+0x2c4>)
 801a83a:	880c      	ldrh	r4, [r1, #0]
 801a83c:	4919      	ldr	r1, [pc, #100]	; (801a8a4 <tcp_process+0x298>)
 801a83e:	6809      	ldr	r1, [r1, #0]
 801a840:	881d      	ldrh	r5, [r3, #0]
 801a842:	9501      	str	r5, [sp, #4]
 801a844:	885b      	ldrh	r3, [r3, #2]
 801a846:	9300      	str	r3, [sp, #0]
 801a848:	4613      	mov	r3, r2
 801a84a:	3204      	adds	r2, #4
 801a84c:	4421      	add	r1, r4
 801a84e:	f001 fabf 	bl	801bdd0 <tcp_rst>
  return ERR_OK;
 801a852:	2500      	movs	r5, #0
 801a854:	e6f5      	b.n	801a642 <tcp_process+0x36>
        pcb->state = ESTABLISHED;
 801a856:	2304      	movs	r3, #4
 801a858:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801a85a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801a85c:	b10b      	cbz	r3, 801a862 <tcp_process+0x256>
 801a85e:	699b      	ldr	r3, [r3, #24]
 801a860:	b19b      	cbz	r3, 801a88a <tcp_process+0x27e>
        if (pcb->listener == NULL) {
 801a862:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801a864:	b1cb      	cbz	r3, 801a89a <tcp_process+0x28e>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801a866:	699b      	ldr	r3, [r3, #24]
 801a868:	b3b3      	cbz	r3, 801a8d8 <tcp_process+0x2cc>
 801a86a:	2200      	movs	r2, #0
 801a86c:	4621      	mov	r1, r4
 801a86e:	6920      	ldr	r0, [r4, #16]
 801a870:	4798      	blx	r3
 801a872:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 801a874:	b39d      	cbz	r5, 801a8de <tcp_process+0x2d2>
          if (err != ERR_ABRT) {
 801a876:	f115 0f0d 	cmn.w	r5, #13
 801a87a:	f43f aee2 	beq.w	801a642 <tcp_process+0x36>
            tcp_abort(pcb);
 801a87e:	4620      	mov	r0, r4
 801a880:	f7fe fec8 	bl	8019614 <tcp_abort>
          return ERR_ABRT;
 801a884:	f06f 050c 	mvn.w	r5, #12
 801a888:	e6db      	b.n	801a642 <tcp_process+0x36>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801a88a:	4b09      	ldr	r3, [pc, #36]	; (801a8b0 <tcp_process+0x2a4>)
 801a88c:	f240 3251 	movw	r2, #849	; 0x351
 801a890:	4910      	ldr	r1, [pc, #64]	; (801a8d4 <tcp_process+0x2c8>)
 801a892:	4809      	ldr	r0, [pc, #36]	; (801a8b8 <tcp_process+0x2ac>)
 801a894:	f004 fd4d 	bl	801f332 <iprintf>
 801a898:	e7e3      	b.n	801a862 <tcp_process+0x256>
          err = ERR_VAL;
 801a89a:	f06f 0505 	mvn.w	r5, #5
 801a89e:	e7e9      	b.n	801a874 <tcp_process+0x268>
 801a8a0:	200094c8 	.word	0x200094c8
 801a8a4:	200094e8 	.word	0x200094e8
 801a8a8:	200094c4 	.word	0x200094c4
 801a8ac:	200094e4 	.word	0x200094e4
 801a8b0:	080250c4 	.word	0x080250c4
 801a8b4:	08025058 	.word	0x08025058
 801a8b8:	08020b90 	.word	0x08020b90
 801a8bc:	2000ecb8 	.word	0x2000ecb8
 801a8c0:	200094f0 	.word	0x200094f0
 801a8c4:	08025078 	.word	0x08025078
 801a8c8:	08025090 	.word	0x08025090
 801a8cc:	2000a260 	.word	0x2000a260
 801a8d0:	200094fe 	.word	0x200094fe
 801a8d4:	080250a4 	.word	0x080250a4
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801a8d8:	f06f 050f 	mvn.w	r5, #15
 801a8dc:	e7ca      	b.n	801a874 <tcp_process+0x268>
        tcp_receive(pcb);
 801a8de:	4620      	mov	r0, r4
 801a8e0:	f7ff f970 	bl	8019bc4 <tcp_receive>
        if (recv_acked != 0) {
 801a8e4:	4b8f      	ldr	r3, [pc, #572]	; (801ab24 <tcp_process+0x518>)
 801a8e6:	881b      	ldrh	r3, [r3, #0]
 801a8e8:	b113      	cbz	r3, 801a8f0 <tcp_process+0x2e4>
          recv_acked--;
 801a8ea:	3b01      	subs	r3, #1
 801a8ec:	4a8d      	ldr	r2, [pc, #564]	; (801ab24 <tcp_process+0x518>)
 801a8ee:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a8f0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801a8f2:	0053      	lsls	r3, r2, #1
 801a8f4:	f241 111c 	movw	r1, #4380	; 0x111c
 801a8f8:	428b      	cmp	r3, r1
 801a8fa:	bf38      	it	cc
 801a8fc:	460b      	movcc	r3, r1
 801a8fe:	0092      	lsls	r2, r2, #2
 801a900:	4293      	cmp	r3, r2
 801a902:	bf28      	it	cs
 801a904:	4613      	movcs	r3, r2
 801a906:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 801a90a:	4b87      	ldr	r3, [pc, #540]	; (801ab28 <tcp_process+0x51c>)
 801a90c:	781b      	ldrb	r3, [r3, #0]
 801a90e:	f013 0f20 	tst.w	r3, #32
 801a912:	f43f ae96 	beq.w	801a642 <tcp_process+0x36>
          tcp_ack_now(pcb);
 801a916:	7ea3      	ldrb	r3, [r4, #26]
 801a918:	f043 0302 	orr.w	r3, r3, #2
 801a91c:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 801a91e:	2307      	movs	r3, #7
 801a920:	7523      	strb	r3, [r4, #20]
 801a922:	e68e      	b.n	801a642 <tcp_process+0x36>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801a924:	f013 0f02 	tst.w	r3, #2
 801a928:	f000 80f1 	beq.w	801ab0e <tcp_process+0x502>
 801a92c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a92e:	3b01      	subs	r3, #1
 801a930:	4a7e      	ldr	r2, [pc, #504]	; (801ab2c <tcp_process+0x520>)
 801a932:	6812      	ldr	r2, [r2, #0]
 801a934:	4293      	cmp	r3, r2
 801a936:	d001      	beq.n	801a93c <tcp_process+0x330>
  return ERR_OK;
 801a938:	2500      	movs	r5, #0
 801a93a:	e682      	b.n	801a642 <tcp_process+0x36>
      tcp_rexmit(pcb);
 801a93c:	4620      	mov	r0, r4
 801a93e:	f001 fab6 	bl	801beae <tcp_rexmit>
  return ERR_OK;
 801a942:	2500      	movs	r5, #0
 801a944:	e67d      	b.n	801a642 <tcp_process+0x36>
    tcp_receive(pcb);
 801a946:	4620      	mov	r0, r4
 801a948:	f7ff f93c 	bl	8019bc4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801a94c:	4b76      	ldr	r3, [pc, #472]	; (801ab28 <tcp_process+0x51c>)
 801a94e:	781b      	ldrb	r3, [r3, #0]
 801a950:	f013 0f20 	tst.w	r3, #32
 801a954:	f000 80dd 	beq.w	801ab12 <tcp_process+0x506>
      tcp_ack_now(pcb);
 801a958:	7ea3      	ldrb	r3, [r4, #26]
 801a95a:	f043 0302 	orr.w	r3, r3, #2
 801a95e:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 801a960:	2307      	movs	r3, #7
 801a962:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801a964:	2500      	movs	r5, #0
 801a966:	e66c      	b.n	801a642 <tcp_process+0x36>
    tcp_receive(pcb);
 801a968:	4620      	mov	r0, r4
 801a96a:	f7ff f92b 	bl	8019bc4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801a96e:	4b6e      	ldr	r3, [pc, #440]	; (801ab28 <tcp_process+0x51c>)
 801a970:	781b      	ldrb	r3, [r3, #0]
 801a972:	f013 0f20 	tst.w	r3, #32
 801a976:	d038      	beq.n	801a9ea <tcp_process+0x3de>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a978:	4b6d      	ldr	r3, [pc, #436]	; (801ab30 <tcp_process+0x524>)
 801a97a:	781b      	ldrb	r3, [r3, #0]
 801a97c:	f013 0f10 	tst.w	r3, #16
 801a980:	d004      	beq.n	801a98c <tcp_process+0x380>
 801a982:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801a984:	4b6b      	ldr	r3, [pc, #428]	; (801ab34 <tcp_process+0x528>)
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	429a      	cmp	r2, r3
 801a98a:	d007      	beq.n	801a99c <tcp_process+0x390>
        tcp_ack_now(pcb);
 801a98c:	7ea3      	ldrb	r3, [r4, #26]
 801a98e:	f043 0302 	orr.w	r3, r3, #2
 801a992:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 801a994:	2308      	movs	r3, #8
 801a996:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801a998:	2500      	movs	r5, #0
 801a99a:	e652      	b.n	801a642 <tcp_process+0x36>
          pcb->unsent == NULL) {
 801a99c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d1f4      	bne.n	801a98c <tcp_process+0x380>
        tcp_ack_now(pcb);
 801a9a2:	7ea3      	ldrb	r3, [r4, #26]
 801a9a4:	f043 0302 	orr.w	r3, r3, #2
 801a9a8:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 801a9aa:	4620      	mov	r0, r4
 801a9ac:	f7fe f9c0 	bl	8018d30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801a9b0:	4b61      	ldr	r3, [pc, #388]	; (801ab38 <tcp_process+0x52c>)
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	429c      	cmp	r4, r3
 801a9b6:	d005      	beq.n	801a9c4 <tcp_process+0x3b8>
 801a9b8:	b153      	cbz	r3, 801a9d0 <tcp_process+0x3c4>
 801a9ba:	68da      	ldr	r2, [r3, #12]
 801a9bc:	4294      	cmp	r4, r2
 801a9be:	d005      	beq.n	801a9cc <tcp_process+0x3c0>
 801a9c0:	4613      	mov	r3, r2
 801a9c2:	e7f9      	b.n	801a9b8 <tcp_process+0x3ac>
 801a9c4:	68da      	ldr	r2, [r3, #12]
 801a9c6:	4b5c      	ldr	r3, [pc, #368]	; (801ab38 <tcp_process+0x52c>)
 801a9c8:	601a      	str	r2, [r3, #0]
 801a9ca:	e001      	b.n	801a9d0 <tcp_process+0x3c4>
 801a9cc:	68e2      	ldr	r2, [r4, #12]
 801a9ce:	60da      	str	r2, [r3, #12]
 801a9d0:	2201      	movs	r2, #1
 801a9d2:	4b5a      	ldr	r3, [pc, #360]	; (801ab3c <tcp_process+0x530>)
 801a9d4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801a9d6:	230a      	movs	r3, #10
 801a9d8:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a9da:	4b59      	ldr	r3, [pc, #356]	; (801ab40 <tcp_process+0x534>)
 801a9dc:	681a      	ldr	r2, [r3, #0]
 801a9de:	60e2      	str	r2, [r4, #12]
 801a9e0:	601c      	str	r4, [r3, #0]
 801a9e2:	f001 fc01 	bl	801c1e8 <tcp_timer_needed>
  return ERR_OK;
 801a9e6:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a9e8:	e62b      	b.n	801a642 <tcp_process+0x36>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a9ea:	4b51      	ldr	r3, [pc, #324]	; (801ab30 <tcp_process+0x524>)
 801a9ec:	781b      	ldrb	r3, [r3, #0]
 801a9ee:	f013 0f10 	tst.w	r3, #16
 801a9f2:	f000 8090 	beq.w	801ab16 <tcp_process+0x50a>
 801a9f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801a9f8:	4b4e      	ldr	r3, [pc, #312]	; (801ab34 <tcp_process+0x528>)
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	429a      	cmp	r2, r3
 801a9fe:	d001      	beq.n	801aa04 <tcp_process+0x3f8>
  return ERR_OK;
 801aa00:	2500      	movs	r5, #0
 801aa02:	e61e      	b.n	801a642 <tcp_process+0x36>
               pcb->unsent == NULL) {
 801aa04:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801aa06:	b10b      	cbz	r3, 801aa0c <tcp_process+0x400>
  return ERR_OK;
 801aa08:	2500      	movs	r5, #0
 801aa0a:	e61a      	b.n	801a642 <tcp_process+0x36>
      pcb->state = FIN_WAIT_2;
 801aa0c:	2306      	movs	r3, #6
 801aa0e:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801aa10:	2500      	movs	r5, #0
 801aa12:	e616      	b.n	801a642 <tcp_process+0x36>
    tcp_receive(pcb);
 801aa14:	4620      	mov	r0, r4
 801aa16:	f7ff f8d5 	bl	8019bc4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801aa1a:	4b43      	ldr	r3, [pc, #268]	; (801ab28 <tcp_process+0x51c>)
 801aa1c:	781b      	ldrb	r3, [r3, #0]
 801aa1e:	f013 0f20 	tst.w	r3, #32
 801aa22:	d101      	bne.n	801aa28 <tcp_process+0x41c>
  return ERR_OK;
 801aa24:	2500      	movs	r5, #0
 801aa26:	e60c      	b.n	801a642 <tcp_process+0x36>
      tcp_ack_now(pcb);
 801aa28:	7ea3      	ldrb	r3, [r4, #26]
 801aa2a:	f043 0302 	orr.w	r3, r3, #2
 801aa2e:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 801aa30:	4620      	mov	r0, r4
 801aa32:	f7fe f97d 	bl	8018d30 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801aa36:	4b40      	ldr	r3, [pc, #256]	; (801ab38 <tcp_process+0x52c>)
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	429c      	cmp	r4, r3
 801aa3c:	d005      	beq.n	801aa4a <tcp_process+0x43e>
 801aa3e:	b153      	cbz	r3, 801aa56 <tcp_process+0x44a>
 801aa40:	68da      	ldr	r2, [r3, #12]
 801aa42:	4294      	cmp	r4, r2
 801aa44:	d005      	beq.n	801aa52 <tcp_process+0x446>
 801aa46:	4613      	mov	r3, r2
 801aa48:	e7f9      	b.n	801aa3e <tcp_process+0x432>
 801aa4a:	68da      	ldr	r2, [r3, #12]
 801aa4c:	4b3a      	ldr	r3, [pc, #232]	; (801ab38 <tcp_process+0x52c>)
 801aa4e:	601a      	str	r2, [r3, #0]
 801aa50:	e001      	b.n	801aa56 <tcp_process+0x44a>
 801aa52:	68e2      	ldr	r2, [r4, #12]
 801aa54:	60da      	str	r2, [r3, #12]
 801aa56:	2201      	movs	r2, #1
 801aa58:	4b38      	ldr	r3, [pc, #224]	; (801ab3c <tcp_process+0x530>)
 801aa5a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801aa5c:	230a      	movs	r3, #10
 801aa5e:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801aa60:	4b37      	ldr	r3, [pc, #220]	; (801ab40 <tcp_process+0x534>)
 801aa62:	681a      	ldr	r2, [r3, #0]
 801aa64:	60e2      	str	r2, [r4, #12]
 801aa66:	601c      	str	r4, [r3, #0]
 801aa68:	f001 fbbe 	bl	801c1e8 <tcp_timer_needed>
  return ERR_OK;
 801aa6c:	2500      	movs	r5, #0
 801aa6e:	e5e8      	b.n	801a642 <tcp_process+0x36>
    tcp_receive(pcb);
 801aa70:	4620      	mov	r0, r4
 801aa72:	f7ff f8a7 	bl	8019bc4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801aa76:	4b2e      	ldr	r3, [pc, #184]	; (801ab30 <tcp_process+0x524>)
 801aa78:	781b      	ldrb	r3, [r3, #0]
 801aa7a:	f013 0f10 	tst.w	r3, #16
 801aa7e:	d04c      	beq.n	801ab1a <tcp_process+0x50e>
 801aa80:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801aa82:	4b2c      	ldr	r3, [pc, #176]	; (801ab34 <tcp_process+0x528>)
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	429a      	cmp	r2, r3
 801aa88:	d001      	beq.n	801aa8e <tcp_process+0x482>
  return ERR_OK;
 801aa8a:	2500      	movs	r5, #0
 801aa8c:	e5d9      	b.n	801a642 <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801aa8e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801aa90:	b10b      	cbz	r3, 801aa96 <tcp_process+0x48a>
  return ERR_OK;
 801aa92:	2500      	movs	r5, #0
 801aa94:	e5d5      	b.n	801a642 <tcp_process+0x36>
      tcp_pcb_purge(pcb);
 801aa96:	4620      	mov	r0, r4
 801aa98:	f7fe f94a 	bl	8018d30 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801aa9c:	4b26      	ldr	r3, [pc, #152]	; (801ab38 <tcp_process+0x52c>)
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	429c      	cmp	r4, r3
 801aaa2:	d005      	beq.n	801aab0 <tcp_process+0x4a4>
 801aaa4:	b153      	cbz	r3, 801aabc <tcp_process+0x4b0>
 801aaa6:	68da      	ldr	r2, [r3, #12]
 801aaa8:	4294      	cmp	r4, r2
 801aaaa:	d005      	beq.n	801aab8 <tcp_process+0x4ac>
 801aaac:	4613      	mov	r3, r2
 801aaae:	e7f9      	b.n	801aaa4 <tcp_process+0x498>
 801aab0:	68da      	ldr	r2, [r3, #12]
 801aab2:	4b21      	ldr	r3, [pc, #132]	; (801ab38 <tcp_process+0x52c>)
 801aab4:	601a      	str	r2, [r3, #0]
 801aab6:	e001      	b.n	801aabc <tcp_process+0x4b0>
 801aab8:	68e2      	ldr	r2, [r4, #12]
 801aaba:	60da      	str	r2, [r3, #12]
 801aabc:	2201      	movs	r2, #1
 801aabe:	4b1f      	ldr	r3, [pc, #124]	; (801ab3c <tcp_process+0x530>)
 801aac0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801aac2:	230a      	movs	r3, #10
 801aac4:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801aac6:	4b1e      	ldr	r3, [pc, #120]	; (801ab40 <tcp_process+0x534>)
 801aac8:	681a      	ldr	r2, [r3, #0]
 801aaca:	60e2      	str	r2, [r4, #12]
 801aacc:	601c      	str	r4, [r3, #0]
 801aace:	f001 fb8b 	bl	801c1e8 <tcp_timer_needed>
  return ERR_OK;
 801aad2:	2500      	movs	r5, #0
 801aad4:	e5b5      	b.n	801a642 <tcp_process+0x36>
    tcp_receive(pcb);
 801aad6:	4620      	mov	r0, r4
 801aad8:	f7ff f874 	bl	8019bc4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801aadc:	4b14      	ldr	r3, [pc, #80]	; (801ab30 <tcp_process+0x524>)
 801aade:	781b      	ldrb	r3, [r3, #0]
 801aae0:	f013 0f10 	tst.w	r3, #16
 801aae4:	d01b      	beq.n	801ab1e <tcp_process+0x512>
 801aae6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801aae8:	4b12      	ldr	r3, [pc, #72]	; (801ab34 <tcp_process+0x528>)
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	429a      	cmp	r2, r3
 801aaee:	d001      	beq.n	801aaf4 <tcp_process+0x4e8>
  return ERR_OK;
 801aaf0:	2500      	movs	r5, #0
 801aaf2:	e5a6      	b.n	801a642 <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801aaf4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801aaf6:	b10b      	cbz	r3, 801aafc <tcp_process+0x4f0>
  return ERR_OK;
 801aaf8:	2500      	movs	r5, #0
 801aafa:	e5a2      	b.n	801a642 <tcp_process+0x36>
      recv_flags |= TF_CLOSED;
 801aafc:	4a0a      	ldr	r2, [pc, #40]	; (801ab28 <tcp_process+0x51c>)
 801aafe:	7813      	ldrb	r3, [r2, #0]
 801ab00:	f043 0310 	orr.w	r3, r3, #16
 801ab04:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 801ab06:	2500      	movs	r5, #0
 801ab08:	e59b      	b.n	801a642 <tcp_process+0x36>
 801ab0a:	2500      	movs	r5, #0
 801ab0c:	e599      	b.n	801a642 <tcp_process+0x36>
 801ab0e:	2500      	movs	r5, #0
 801ab10:	e597      	b.n	801a642 <tcp_process+0x36>
 801ab12:	2500      	movs	r5, #0
 801ab14:	e595      	b.n	801a642 <tcp_process+0x36>
 801ab16:	2500      	movs	r5, #0
 801ab18:	e593      	b.n	801a642 <tcp_process+0x36>
 801ab1a:	2500      	movs	r5, #0
 801ab1c:	e591      	b.n	801a642 <tcp_process+0x36>
 801ab1e:	2500      	movs	r5, #0
 801ab20:	e58f      	b.n	801a642 <tcp_process+0x36>
 801ab22:	bf00      	nop
 801ab24:	200094dc 	.word	0x200094dc
 801ab28:	200094e4 	.word	0x200094e4
 801ab2c:	200094e8 	.word	0x200094e8
 801ab30:	200094c8 	.word	0x200094c8
 801ab34:	200094c4 	.word	0x200094c4
 801ab38:	2000ecb4 	.word	0x2000ecb4
 801ab3c:	2000ecb0 	.word	0x2000ecb0
 801ab40:	2000ecc4 	.word	0x2000ecc4

0801ab44 <tcp_input>:
{
 801ab44:	b570      	push	{r4, r5, r6, lr}
 801ab46:	b082      	sub	sp, #8
 801ab48:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 801ab4a:	6842      	ldr	r2, [r0, #4]
 801ab4c:	4b9f      	ldr	r3, [pc, #636]	; (801adcc <tcp_input+0x288>)
 801ab4e:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 801ab50:	8943      	ldrh	r3, [r0, #10]
 801ab52:	2b13      	cmp	r3, #19
 801ab54:	d93e      	bls.n	801abd4 <tcp_input+0x90>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ab56:	4b9e      	ldr	r3, [pc, #632]	; (801add0 <tcp_input+0x28c>)
 801ab58:	6819      	ldr	r1, [r3, #0]
 801ab5a:	6958      	ldr	r0, [r3, #20]
 801ab5c:	f7fc f9fb 	bl	8016f56 <ip4_addr_isbroadcast_u32>
 801ab60:	2800      	cmp	r0, #0
 801ab62:	d137      	bne.n	801abd4 <tcp_input+0x90>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ab64:	4b9a      	ldr	r3, [pc, #616]	; (801add0 <tcp_input+0x28c>)
 801ab66:	695b      	ldr	r3, [r3, #20]
 801ab68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ab6c:	2be0      	cmp	r3, #224	; 0xe0
 801ab6e:	d031      	beq.n	801abd4 <tcp_input+0x90>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801ab70:	4b96      	ldr	r3, [pc, #600]	; (801adcc <tcp_input+0x288>)
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	8998      	ldrh	r0, [r3, #12]
 801ab76:	f7fb fa94 	bl	80160a2 <lwip_htons>
 801ab7a:	f3c0 310f 	ubfx	r1, r0, #12, #16
 801ab7e:	0089      	lsls	r1, r1, #2
 801ab80:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ab82:	2913      	cmp	r1, #19
 801ab84:	d926      	bls.n	801abd4 <tcp_input+0x90>
 801ab86:	b289      	uxth	r1, r1
 801ab88:	8923      	ldrh	r3, [r4, #8]
 801ab8a:	4299      	cmp	r1, r3
 801ab8c:	d822      	bhi.n	801abd4 <tcp_input+0x90>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801ab8e:	f1a1 0314 	sub.w	r3, r1, #20
 801ab92:	b29b      	uxth	r3, r3
 801ab94:	4a8f      	ldr	r2, [pc, #572]	; (801add4 <tcp_input+0x290>)
 801ab96:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 801ab98:	2000      	movs	r0, #0
 801ab9a:	4a8f      	ldr	r2, [pc, #572]	; (801add8 <tcp_input+0x294>)
 801ab9c:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 801ab9e:	8962      	ldrh	r2, [r4, #10]
 801aba0:	4291      	cmp	r1, r2
 801aba2:	d91c      	bls.n	801abde <tcp_input+0x9a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801aba4:	6823      	ldr	r3, [r4, #0]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d051      	beq.n	801ac4e <tcp_input+0x10a>
    pbuf_header(p, -TCP_HLEN);
 801abaa:	f06f 0113 	mvn.w	r1, #19
 801abae:	4620      	mov	r0, r4
 801abb0:	f7fd fb34 	bl	801821c <pbuf_header>
    tcphdr_opt1len = p->len;
 801abb4:	8961      	ldrh	r1, [r4, #10]
 801abb6:	4b89      	ldr	r3, [pc, #548]	; (801addc <tcp_input+0x298>)
 801abb8:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801abba:	4b86      	ldr	r3, [pc, #536]	; (801add4 <tcp_input+0x290>)
 801abbc:	881d      	ldrh	r5, [r3, #0]
 801abbe:	1a6d      	subs	r5, r5, r1
 801abc0:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801abc2:	4249      	negs	r1, r1
 801abc4:	b209      	sxth	r1, r1
 801abc6:	4620      	mov	r0, r4
 801abc8:	f7fd fb28 	bl	801821c <pbuf_header>
    if (opt2len > p->next->len) {
 801abcc:	6820      	ldr	r0, [r4, #0]
 801abce:	8943      	ldrh	r3, [r0, #10]
 801abd0:	429d      	cmp	r5, r3
 801abd2:	d943      	bls.n	801ac5c <tcp_input+0x118>
  pbuf_free(p);
 801abd4:	4620      	mov	r0, r4
 801abd6:	f7fd fb2b 	bl	8018230 <pbuf_free>
}
 801abda:	b002      	add	sp, #8
 801abdc:	bd70      	pop	{r4, r5, r6, pc}
    tcphdr_opt1len = tcphdr_optlen;
 801abde:	4a7f      	ldr	r2, [pc, #508]	; (801addc <tcp_input+0x298>)
 801abe0:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801abe2:	4249      	negs	r1, r1
 801abe4:	4620      	mov	r0, r4
 801abe6:	f7fd fb19 	bl	801821c <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801abea:	4d78      	ldr	r5, [pc, #480]	; (801adcc <tcp_input+0x288>)
 801abec:	682e      	ldr	r6, [r5, #0]
 801abee:	8830      	ldrh	r0, [r6, #0]
 801abf0:	f7fb fa57 	bl	80160a2 <lwip_htons>
 801abf4:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801abf6:	682e      	ldr	r6, [r5, #0]
 801abf8:	8870      	ldrh	r0, [r6, #2]
 801abfa:	f7fb fa52 	bl	80160a2 <lwip_htons>
 801abfe:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ac00:	682e      	ldr	r6, [r5, #0]
 801ac02:	6870      	ldr	r0, [r6, #4]
 801ac04:	f7fb fa50 	bl	80160a8 <lwip_htonl>
 801ac08:	6070      	str	r0, [r6, #4]
 801ac0a:	4b75      	ldr	r3, [pc, #468]	; (801ade0 <tcp_input+0x29c>)
 801ac0c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ac0e:	682e      	ldr	r6, [r5, #0]
 801ac10:	68b0      	ldr	r0, [r6, #8]
 801ac12:	f7fb fa49 	bl	80160a8 <lwip_htonl>
 801ac16:	60b0      	str	r0, [r6, #8]
 801ac18:	4b72      	ldr	r3, [pc, #456]	; (801ade4 <tcp_input+0x2a0>)
 801ac1a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ac1c:	682e      	ldr	r6, [r5, #0]
 801ac1e:	89f0      	ldrh	r0, [r6, #14]
 801ac20:	f7fb fa3f 	bl	80160a2 <lwip_htons>
 801ac24:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 801ac26:	682b      	ldr	r3, [r5, #0]
 801ac28:	8998      	ldrh	r0, [r3, #12]
 801ac2a:	f7fb fa3a 	bl	80160a2 <lwip_htons>
 801ac2e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 801ac32:	4a6d      	ldr	r2, [pc, #436]	; (801ade8 <tcp_input+0x2a4>)
 801ac34:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801ac36:	8922      	ldrh	r2, [r4, #8]
 801ac38:	f013 0303 	ands.w	r3, r3, #3
 801ac3c:	bf18      	it	ne
 801ac3e:	2301      	movne	r3, #1
 801ac40:	4413      	add	r3, r2
 801ac42:	4a6a      	ldr	r2, [pc, #424]	; (801adec <tcp_input+0x2a8>)
 801ac44:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ac46:	4b6a      	ldr	r3, [pc, #424]	; (801adf0 <tcp_input+0x2ac>)
 801ac48:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 801ac4a:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ac4c:	e033      	b.n	801acb6 <tcp_input+0x172>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ac4e:	4b69      	ldr	r3, [pc, #420]	; (801adf4 <tcp_input+0x2b0>)
 801ac50:	22b2      	movs	r2, #178	; 0xb2
 801ac52:	4969      	ldr	r1, [pc, #420]	; (801adf8 <tcp_input+0x2b4>)
 801ac54:	4869      	ldr	r0, [pc, #420]	; (801adfc <tcp_input+0x2b8>)
 801ac56:	f004 fb6c 	bl	801f332 <iprintf>
 801ac5a:	e7a6      	b.n	801abaa <tcp_input+0x66>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801ac5c:	6842      	ldr	r2, [r0, #4]
 801ac5e:	4b5e      	ldr	r3, [pc, #376]	; (801add8 <tcp_input+0x294>)
 801ac60:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 801ac62:	4269      	negs	r1, r5
 801ac64:	b209      	sxth	r1, r1
 801ac66:	f7fd fad9 	bl	801821c <pbuf_header>
    p->tot_len -= opt2len;
 801ac6a:	8923      	ldrh	r3, [r4, #8]
 801ac6c:	1b5d      	subs	r5, r3, r5
 801ac6e:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ac70:	8963      	ldrh	r3, [r4, #10]
 801ac72:	b95b      	cbnz	r3, 801ac8c <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801ac74:	8922      	ldrh	r2, [r4, #8]
 801ac76:	6823      	ldr	r3, [r4, #0]
 801ac78:	891b      	ldrh	r3, [r3, #8]
 801ac7a:	429a      	cmp	r2, r3
 801ac7c:	d0b5      	beq.n	801abea <tcp_input+0xa6>
 801ac7e:	4b5d      	ldr	r3, [pc, #372]	; (801adf4 <tcp_input+0x2b0>)
 801ac80:	22d0      	movs	r2, #208	; 0xd0
 801ac82:	495f      	ldr	r1, [pc, #380]	; (801ae00 <tcp_input+0x2bc>)
 801ac84:	485d      	ldr	r0, [pc, #372]	; (801adfc <tcp_input+0x2b8>)
 801ac86:	f004 fb54 	bl	801f332 <iprintf>
 801ac8a:	e7ae      	b.n	801abea <tcp_input+0xa6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ac8c:	4b59      	ldr	r3, [pc, #356]	; (801adf4 <tcp_input+0x2b0>)
 801ac8e:	22cf      	movs	r2, #207	; 0xcf
 801ac90:	495c      	ldr	r1, [pc, #368]	; (801ae04 <tcp_input+0x2c0>)
 801ac92:	485a      	ldr	r0, [pc, #360]	; (801adfc <tcp_input+0x2b8>)
 801ac94:	f004 fb4d 	bl	801f332 <iprintf>
 801ac98:	e7ec      	b.n	801ac74 <tcp_input+0x130>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ac9a:	7d2b      	ldrb	r3, [r5, #20]
 801ac9c:	2b0a      	cmp	r3, #10
 801ac9e:	d016      	beq.n	801acce <tcp_input+0x18a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801aca0:	7d2b      	ldrb	r3, [r5, #20]
 801aca2:	2b01      	cmp	r3, #1
 801aca4:	d01a      	beq.n	801acdc <tcp_input+0x198>
    if (pcb->remote_port == tcphdr->src &&
 801aca6:	8b29      	ldrh	r1, [r5, #24]
 801aca8:	4b48      	ldr	r3, [pc, #288]	; (801adcc <tcp_input+0x288>)
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	881a      	ldrh	r2, [r3, #0]
 801acae:	4291      	cmp	r1, r2
 801acb0:	d01b      	beq.n	801acea <tcp_input+0x1a6>
    prev = pcb;
 801acb2:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801acb4:	68ed      	ldr	r5, [r5, #12]
 801acb6:	2d00      	cmp	r5, #0
 801acb8:	d032      	beq.n	801ad20 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801acba:	7d2b      	ldrb	r3, [r5, #20]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d1ec      	bne.n	801ac9a <tcp_input+0x156>
 801acc0:	4b4c      	ldr	r3, [pc, #304]	; (801adf4 <tcp_input+0x2b0>)
 801acc2:	22e2      	movs	r2, #226	; 0xe2
 801acc4:	4950      	ldr	r1, [pc, #320]	; (801ae08 <tcp_input+0x2c4>)
 801acc6:	484d      	ldr	r0, [pc, #308]	; (801adfc <tcp_input+0x2b8>)
 801acc8:	f004 fb33 	bl	801f332 <iprintf>
 801accc:	e7e5      	b.n	801ac9a <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801acce:	4b49      	ldr	r3, [pc, #292]	; (801adf4 <tcp_input+0x2b0>)
 801acd0:	22e3      	movs	r2, #227	; 0xe3
 801acd2:	494e      	ldr	r1, [pc, #312]	; (801ae0c <tcp_input+0x2c8>)
 801acd4:	4849      	ldr	r0, [pc, #292]	; (801adfc <tcp_input+0x2b8>)
 801acd6:	f004 fb2c 	bl	801f332 <iprintf>
 801acda:	e7e1      	b.n	801aca0 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801acdc:	4b45      	ldr	r3, [pc, #276]	; (801adf4 <tcp_input+0x2b0>)
 801acde:	22e4      	movs	r2, #228	; 0xe4
 801ace0:	494b      	ldr	r1, [pc, #300]	; (801ae10 <tcp_input+0x2cc>)
 801ace2:	4846      	ldr	r0, [pc, #280]	; (801adfc <tcp_input+0x2b8>)
 801ace4:	f004 fb25 	bl	801f332 <iprintf>
 801ace8:	e7dd      	b.n	801aca6 <tcp_input+0x162>
        pcb->local_port == tcphdr->dest &&
 801acea:	8aea      	ldrh	r2, [r5, #22]
 801acec:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 801acee:	429a      	cmp	r2, r3
 801acf0:	d1df      	bne.n	801acb2 <tcp_input+0x16e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801acf2:	686a      	ldr	r2, [r5, #4]
 801acf4:	4b36      	ldr	r3, [pc, #216]	; (801add0 <tcp_input+0x28c>)
 801acf6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801acf8:	429a      	cmp	r2, r3
 801acfa:	d1da      	bne.n	801acb2 <tcp_input+0x16e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801acfc:	682a      	ldr	r2, [r5, #0]
 801acfe:	4b34      	ldr	r3, [pc, #208]	; (801add0 <tcp_input+0x28c>)
 801ad00:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ad02:	429a      	cmp	r2, r3
 801ad04:	d1d5      	bne.n	801acb2 <tcp_input+0x16e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ad06:	68eb      	ldr	r3, [r5, #12]
 801ad08:	429d      	cmp	r5, r3
 801ad0a:	d04d      	beq.n	801ada8 <tcp_input+0x264>
      if (prev != NULL) {
 801ad0c:	b12e      	cbz	r6, 801ad1a <tcp_input+0x1d6>
        prev->next = pcb->next;
 801ad0e:	68eb      	ldr	r3, [r5, #12]
 801ad10:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 801ad12:	4b37      	ldr	r3, [pc, #220]	; (801adf0 <tcp_input+0x2ac>)
 801ad14:	681a      	ldr	r2, [r3, #0]
 801ad16:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 801ad18:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ad1a:	68eb      	ldr	r3, [r5, #12]
 801ad1c:	429d      	cmp	r5, r3
 801ad1e:	d04a      	beq.n	801adb6 <tcp_input+0x272>
  if (pcb == NULL) {
 801ad20:	2d00      	cmp	r5, #0
 801ad22:	d04f      	beq.n	801adc4 <tcp_input+0x280>
  if (pcb != NULL) {
 801ad24:	2d00      	cmp	r5, #0
 801ad26:	f000 8168 	beq.w	801affa <tcp_input+0x4b6>
    inseg.next = NULL;
 801ad2a:	4a3a      	ldr	r2, [pc, #232]	; (801ae14 <tcp_input+0x2d0>)
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 801ad30:	8921      	ldrh	r1, [r4, #8]
 801ad32:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 801ad34:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 801ad36:	4925      	ldr	r1, [pc, #148]	; (801adcc <tcp_input+0x288>)
 801ad38:	6809      	ldr	r1, [r1, #0]
 801ad3a:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 801ad3c:	4a36      	ldr	r2, [pc, #216]	; (801ae18 <tcp_input+0x2d4>)
 801ad3e:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 801ad40:	4a36      	ldr	r2, [pc, #216]	; (801ae1c <tcp_input+0x2d8>)
 801ad42:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 801ad44:	4a36      	ldr	r2, [pc, #216]	; (801ae20 <tcp_input+0x2dc>)
 801ad46:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 801ad48:	4b27      	ldr	r3, [pc, #156]	; (801ade8 <tcp_input+0x2a4>)
 801ad4a:	781b      	ldrb	r3, [r3, #0]
 801ad4c:	f013 0f08 	tst.w	r3, #8
 801ad50:	d003      	beq.n	801ad5a <tcp_input+0x216>
      p->flags |= PBUF_FLAG_PUSH;
 801ad52:	7b63      	ldrb	r3, [r4, #13]
 801ad54:	f043 0301 	orr.w	r3, r3, #1
 801ad58:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 801ad5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	f000 80b9 	beq.w	801aed4 <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ad62:	4628      	mov	r0, r5
 801ad64:	f7fe fb24 	bl	80193b0 <tcp_process_refused_data>
 801ad68:	f110 0f0d 	cmn.w	r0, #13
 801ad6c:	d008      	beq.n	801ad80 <tcp_input+0x23c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ad6e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	f000 80af 	beq.w	801aed4 <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ad76:	4b1d      	ldr	r3, [pc, #116]	; (801adec <tcp_input+0x2a8>)
 801ad78:	881b      	ldrh	r3, [r3, #0]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	f000 80aa 	beq.w	801aed4 <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 801ad80:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	f000 80a2 	beq.w	801aecc <tcp_input+0x388>
    tcp_input_pcb = NULL;
 801ad88:	2300      	movs	r3, #0
 801ad8a:	4a26      	ldr	r2, [pc, #152]	; (801ae24 <tcp_input+0x2e0>)
 801ad8c:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 801ad8e:	4a22      	ldr	r2, [pc, #136]	; (801ae18 <tcp_input+0x2d4>)
 801ad90:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 801ad92:	4b20      	ldr	r3, [pc, #128]	; (801ae14 <tcp_input+0x2d0>)
 801ad94:	6858      	ldr	r0, [r3, #4]
 801ad96:	2800      	cmp	r0, #0
 801ad98:	f43f af1f 	beq.w	801abda <tcp_input+0x96>
      pbuf_free(inseg.p);
 801ad9c:	f7fd fa48 	bl	8018230 <pbuf_free>
      inseg.p = NULL;
 801ada0:	2200      	movs	r2, #0
 801ada2:	4b1c      	ldr	r3, [pc, #112]	; (801ae14 <tcp_input+0x2d0>)
 801ada4:	605a      	str	r2, [r3, #4]
 801ada6:	e718      	b.n	801abda <tcp_input+0x96>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ada8:	4b12      	ldr	r3, [pc, #72]	; (801adf4 <tcp_input+0x2b0>)
 801adaa:	22ec      	movs	r2, #236	; 0xec
 801adac:	491e      	ldr	r1, [pc, #120]	; (801ae28 <tcp_input+0x2e4>)
 801adae:	4813      	ldr	r0, [pc, #76]	; (801adfc <tcp_input+0x2b8>)
 801adb0:	f004 fabf 	bl	801f332 <iprintf>
 801adb4:	e7aa      	b.n	801ad0c <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801adb6:	4b0f      	ldr	r3, [pc, #60]	; (801adf4 <tcp_input+0x2b0>)
 801adb8:	22f4      	movs	r2, #244	; 0xf4
 801adba:	491c      	ldr	r1, [pc, #112]	; (801ae2c <tcp_input+0x2e8>)
 801adbc:	480f      	ldr	r0, [pc, #60]	; (801adfc <tcp_input+0x2b8>)
 801adbe:	f004 fab8 	bl	801f332 <iprintf>
 801adc2:	e7ad      	b.n	801ad20 <tcp_input+0x1dc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801adc4:	4b1a      	ldr	r3, [pc, #104]	; (801ae30 <tcp_input+0x2ec>)
 801adc6:	681d      	ldr	r5, [r3, #0]
 801adc8:	e03b      	b.n	801ae42 <tcp_input+0x2fe>
 801adca:	bf00      	nop
 801adcc:	200094f0 	.word	0x200094f0
 801add0:	2000a250 	.word	0x2000a250
 801add4:	200094fc 	.word	0x200094fc
 801add8:	200094f8 	.word	0x200094f8
 801addc:	200094f4 	.word	0x200094f4
 801ade0:	200094e8 	.word	0x200094e8
 801ade4:	200094c4 	.word	0x200094c4
 801ade8:	200094c8 	.word	0x200094c8
 801adec:	200094fe 	.word	0x200094fe
 801adf0:	2000ecb4 	.word	0x2000ecb4
 801adf4:	080250c4 	.word	0x080250c4
 801adf8:	08024efc 	.word	0x08024efc
 801adfc:	08020b90 	.word	0x08020b90
 801ae00:	08024f18 	.word	0x08024f18
 801ae04:	08024f0c 	.word	0x08024f0c
 801ae08:	08024f38 	.word	0x08024f38
 801ae0c:	08024f60 	.word	0x08024f60
 801ae10:	08024f8c 	.word	0x08024f8c
 801ae14:	200094cc 	.word	0x200094cc
 801ae18:	200094e0 	.word	0x200094e0
 801ae1c:	200094e4 	.word	0x200094e4
 801ae20:	200094dc 	.word	0x200094dc
 801ae24:	2000ecc8 	.word	0x2000ecc8
 801ae28:	08024fb4 	.word	0x08024fb4
 801ae2c:	08024fe0 	.word	0x08024fe0
 801ae30:	2000ecc4 	.word	0x2000ecc4
      if (pcb->remote_port == tcphdr->src &&
 801ae34:	8b29      	ldrh	r1, [r5, #24]
 801ae36:	4b80      	ldr	r3, [pc, #512]	; (801b038 <tcp_input+0x4f4>)
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	881a      	ldrh	r2, [r3, #0]
 801ae3c:	4291      	cmp	r1, r2
 801ae3e:	d00b      	beq.n	801ae58 <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae40:	68ed      	ldr	r5, [r5, #12]
 801ae42:	b1f5      	cbz	r5, 801ae82 <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ae44:	7d2b      	ldrb	r3, [r5, #20]
 801ae46:	2b0a      	cmp	r3, #10
 801ae48:	d0f4      	beq.n	801ae34 <tcp_input+0x2f0>
 801ae4a:	4b7c      	ldr	r3, [pc, #496]	; (801b03c <tcp_input+0x4f8>)
 801ae4c:	22fe      	movs	r2, #254	; 0xfe
 801ae4e:	497c      	ldr	r1, [pc, #496]	; (801b040 <tcp_input+0x4fc>)
 801ae50:	487c      	ldr	r0, [pc, #496]	; (801b044 <tcp_input+0x500>)
 801ae52:	f004 fa6e 	bl	801f332 <iprintf>
 801ae56:	e7ed      	b.n	801ae34 <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 801ae58:	8aea      	ldrh	r2, [r5, #22]
 801ae5a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 801ae5c:	429a      	cmp	r2, r3
 801ae5e:	d1ef      	bne.n	801ae40 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ae60:	686a      	ldr	r2, [r5, #4]
 801ae62:	4b79      	ldr	r3, [pc, #484]	; (801b048 <tcp_input+0x504>)
 801ae64:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801ae66:	429a      	cmp	r2, r3
 801ae68:	d1ea      	bne.n	801ae40 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ae6a:	682a      	ldr	r2, [r5, #0]
 801ae6c:	4b76      	ldr	r3, [pc, #472]	; (801b048 <tcp_input+0x504>)
 801ae6e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ae70:	429a      	cmp	r2, r3
 801ae72:	d1e5      	bne.n	801ae40 <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 801ae74:	4628      	mov	r0, r5
 801ae76:	f7fe fd8f 	bl	8019998 <tcp_timewait_input>
        pbuf_free(p);
 801ae7a:	4620      	mov	r0, r4
 801ae7c:	f7fd f9d8 	bl	8018230 <pbuf_free>
        return;
 801ae80:	e6ab      	b.n	801abda <tcp_input+0x96>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ae82:	4b72      	ldr	r3, [pc, #456]	; (801b04c <tcp_input+0x508>)
 801ae84:	681e      	ldr	r6, [r3, #0]
 801ae86:	4630      	mov	r0, r6
    prev = NULL;
 801ae88:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ae8a:	e001      	b.n	801ae90 <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 801ae8c:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ae8e:	68c0      	ldr	r0, [r0, #12]
 801ae90:	b168      	cbz	r0, 801aeae <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 801ae92:	8ac2      	ldrh	r2, [r0, #22]
 801ae94:	4b68      	ldr	r3, [pc, #416]	; (801b038 <tcp_input+0x4f4>)
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	885b      	ldrh	r3, [r3, #2]
 801ae9a:	429a      	cmp	r2, r3
 801ae9c:	d1f6      	bne.n	801ae8c <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801ae9e:	6803      	ldr	r3, [r0, #0]
 801aea0:	4a69      	ldr	r2, [pc, #420]	; (801b048 <tcp_input+0x504>)
 801aea2:	6952      	ldr	r2, [r2, #20]
 801aea4:	4293      	cmp	r3, r2
 801aea6:	d002      	beq.n	801aeae <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801aea8:	b108      	cbz	r0, 801aeae <tcp_input+0x36a>
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d1ee      	bne.n	801ae8c <tcp_input+0x348>
    if (lpcb != NULL) {
 801aeae:	2800      	cmp	r0, #0
 801aeb0:	f43f af38 	beq.w	801ad24 <tcp_input+0x1e0>
      if (prev != NULL) {
 801aeb4:	b121      	cbz	r1, 801aec0 <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801aeb6:	68c3      	ldr	r3, [r0, #12]
 801aeb8:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801aeba:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801aebc:	4b63      	ldr	r3, [pc, #396]	; (801b04c <tcp_input+0x508>)
 801aebe:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 801aec0:	f7fe fdb2 	bl	8019a28 <tcp_listen_input>
      pbuf_free(p);
 801aec4:	4620      	mov	r0, r4
 801aec6:	f7fd f9b3 	bl	8018230 <pbuf_free>
      return;
 801aeca:	e686      	b.n	801abda <tcp_input+0x96>
          tcp_send_empty_ack(pcb);
 801aecc:	4628      	mov	r0, r5
 801aece:	f000 fde9 	bl	801baa4 <tcp_send_empty_ack>
 801aed2:	e759      	b.n	801ad88 <tcp_input+0x244>
    tcp_input_pcb = pcb;
 801aed4:	4b5e      	ldr	r3, [pc, #376]	; (801b050 <tcp_input+0x50c>)
 801aed6:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 801aed8:	4628      	mov	r0, r5
 801aeda:	f7ff fb97 	bl	801a60c <tcp_process>
    if (err != ERR_ABRT) {
 801aede:	f110 0f0d 	cmn.w	r0, #13
 801aee2:	f43f af51 	beq.w	801ad88 <tcp_input+0x244>
      if (recv_flags & TF_RESET) {
 801aee6:	4b5b      	ldr	r3, [pc, #364]	; (801b054 <tcp_input+0x510>)
 801aee8:	781b      	ldrb	r3, [r3, #0]
 801aeea:	f013 0f08 	tst.w	r3, #8
 801aeee:	d00f      	beq.n	801af10 <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801aef0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 801aef4:	b11b      	cbz	r3, 801aefe <tcp_input+0x3ba>
 801aef6:	f06f 010d 	mvn.w	r1, #13
 801aefa:	6928      	ldr	r0, [r5, #16]
 801aefc:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801aefe:	4629      	mov	r1, r5
 801af00:	4855      	ldr	r0, [pc, #340]	; (801b058 <tcp_input+0x514>)
 801af02:	f7fe f939 	bl	8019178 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 801af06:	4629      	mov	r1, r5
 801af08:	2000      	movs	r0, #0
 801af0a:	f7fc ffc1 	bl	8017e90 <memp_free>
 801af0e:	e73b      	b.n	801ad88 <tcp_input+0x244>
        if (recv_acked > 0) {
 801af10:	4b52      	ldr	r3, [pc, #328]	; (801b05c <tcp_input+0x518>)
 801af12:	881a      	ldrh	r2, [r3, #0]
 801af14:	b162      	cbz	r2, 801af30 <tcp_input+0x3ec>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801af16:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d048      	beq.n	801afae <tcp_input+0x46a>
 801af1c:	4629      	mov	r1, r5
 801af1e:	6928      	ldr	r0, [r5, #16]
 801af20:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801af22:	f110 0f0d 	cmn.w	r0, #13
 801af26:	f43f af2f 	beq.w	801ad88 <tcp_input+0x244>
          recv_acked = 0;
 801af2a:	2200      	movs	r2, #0
 801af2c:	4b4b      	ldr	r3, [pc, #300]	; (801b05c <tcp_input+0x518>)
 801af2e:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801af30:	4628      	mov	r0, r5
 801af32:	f7fe fd0f 	bl	8019954 <tcp_input_delayed_close>
 801af36:	2800      	cmp	r0, #0
 801af38:	f47f af26 	bne.w	801ad88 <tcp_input+0x244>
        if (recv_data != NULL) {
 801af3c:	4b48      	ldr	r3, [pc, #288]	; (801b060 <tcp_input+0x51c>)
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	b1eb      	cbz	r3, 801af7e <tcp_input+0x43a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801af42:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801af44:	b133      	cbz	r3, 801af54 <tcp_input+0x410>
 801af46:	4b3d      	ldr	r3, [pc, #244]	; (801b03c <tcp_input+0x4f8>)
 801af48:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 801af4c:	4945      	ldr	r1, [pc, #276]	; (801b064 <tcp_input+0x520>)
 801af4e:	483d      	ldr	r0, [pc, #244]	; (801b044 <tcp_input+0x500>)
 801af50:	f004 f9ef 	bl	801f332 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801af54:	7eab      	ldrb	r3, [r5, #26]
 801af56:	f013 0f10 	tst.w	r3, #16
 801af5a:	d12a      	bne.n	801afb2 <tcp_input+0x46e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801af5c:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 801af60:	b37c      	cbz	r4, 801afc2 <tcp_input+0x47e>
 801af62:	2300      	movs	r3, #0
 801af64:	4a3e      	ldr	r2, [pc, #248]	; (801b060 <tcp_input+0x51c>)
 801af66:	6812      	ldr	r2, [r2, #0]
 801af68:	4629      	mov	r1, r5
 801af6a:	6928      	ldr	r0, [r5, #16]
 801af6c:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 801af6e:	f110 0f0d 	cmn.w	r0, #13
 801af72:	f43f af09 	beq.w	801ad88 <tcp_input+0x244>
          if (err != ERR_OK) {
 801af76:	b110      	cbz	r0, 801af7e <tcp_input+0x43a>
            pcb->refused_data = recv_data;
 801af78:	4b39      	ldr	r3, [pc, #228]	; (801b060 <tcp_input+0x51c>)
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 801af7e:	4b35      	ldr	r3, [pc, #212]	; (801b054 <tcp_input+0x510>)
 801af80:	781b      	ldrb	r3, [r3, #0]
 801af82:	f013 0f20 	tst.w	r3, #32
 801af86:	d005      	beq.n	801af94 <tcp_input+0x450>
          if (pcb->refused_data != NULL) {
 801af88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801af8a:	b313      	cbz	r3, 801afd2 <tcp_input+0x48e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801af8c:	7b5a      	ldrb	r2, [r3, #13]
 801af8e:	f042 0220 	orr.w	r2, r2, #32
 801af92:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801af94:	2200      	movs	r2, #0
 801af96:	4b2e      	ldr	r3, [pc, #184]	; (801b050 <tcp_input+0x50c>)
 801af98:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801af9a:	4628      	mov	r0, r5
 801af9c:	f7fe fcda 	bl	8019954 <tcp_input_delayed_close>
 801afa0:	2800      	cmp	r0, #0
 801afa2:	f47f aef1 	bne.w	801ad88 <tcp_input+0x244>
        tcp_output(pcb);
 801afa6:	4628      	mov	r0, r5
 801afa8:	f000 fdb6 	bl	801bb18 <tcp_output>
 801afac:	e6ec      	b.n	801ad88 <tcp_input+0x244>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801afae:	2000      	movs	r0, #0
 801afb0:	e7b7      	b.n	801af22 <tcp_input+0x3de>
            pbuf_free(recv_data);
 801afb2:	4b2b      	ldr	r3, [pc, #172]	; (801b060 <tcp_input+0x51c>)
 801afb4:	6818      	ldr	r0, [r3, #0]
 801afb6:	f7fd f93b 	bl	8018230 <pbuf_free>
            tcp_abort(pcb);
 801afba:	4628      	mov	r0, r5
 801afbc:	f7fe fb2a 	bl	8019614 <tcp_abort>
            goto aborted;
 801afc0:	e6e2      	b.n	801ad88 <tcp_input+0x244>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801afc2:	2300      	movs	r3, #0
 801afc4:	4a26      	ldr	r2, [pc, #152]	; (801b060 <tcp_input+0x51c>)
 801afc6:	6812      	ldr	r2, [r2, #0]
 801afc8:	4629      	mov	r1, r5
 801afca:	4618      	mov	r0, r3
 801afcc:	f7fe f9de 	bl	801938c <tcp_recv_null>
 801afd0:	e7cd      	b.n	801af6e <tcp_input+0x42a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801afd2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801afd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801afd8:	d001      	beq.n	801afde <tcp_input+0x49a>
              pcb->rcv_wnd++;
 801afda:	3301      	adds	r3, #1
 801afdc:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801afde:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 801afe2:	b144      	cbz	r4, 801aff6 <tcp_input+0x4b2>
 801afe4:	2300      	movs	r3, #0
 801afe6:	461a      	mov	r2, r3
 801afe8:	4629      	mov	r1, r5
 801afea:	6928      	ldr	r0, [r5, #16]
 801afec:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 801afee:	f110 0f0d 	cmn.w	r0, #13
 801aff2:	d1cf      	bne.n	801af94 <tcp_input+0x450>
 801aff4:	e6c8      	b.n	801ad88 <tcp_input+0x244>
            TCP_EVENT_CLOSED(pcb, err);
 801aff6:	2000      	movs	r0, #0
 801aff8:	e7f9      	b.n	801afee <tcp_input+0x4aa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801affa:	4b0f      	ldr	r3, [pc, #60]	; (801b038 <tcp_input+0x4f4>)
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	8998      	ldrh	r0, [r3, #12]
 801b000:	f7fb f84f 	bl	80160a2 <lwip_htons>
 801b004:	f010 0f04 	tst.w	r0, #4
 801b008:	d003      	beq.n	801b012 <tcp_input+0x4ce>
    pbuf_free(p);
 801b00a:	4620      	mov	r0, r4
 801b00c:	f7fd f910 	bl	8018230 <pbuf_free>
 801b010:	e5e3      	b.n	801abda <tcp_input+0x96>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b012:	4b09      	ldr	r3, [pc, #36]	; (801b038 <tcp_input+0x4f4>)
 801b014:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801b016:	4a14      	ldr	r2, [pc, #80]	; (801b068 <tcp_input+0x524>)
 801b018:	4914      	ldr	r1, [pc, #80]	; (801b06c <tcp_input+0x528>)
 801b01a:	8808      	ldrh	r0, [r1, #0]
 801b01c:	4914      	ldr	r1, [pc, #80]	; (801b070 <tcp_input+0x52c>)
 801b01e:	6809      	ldr	r1, [r1, #0]
 801b020:	881d      	ldrh	r5, [r3, #0]
 801b022:	9501      	str	r5, [sp, #4]
 801b024:	885b      	ldrh	r3, [r3, #2]
 801b026:	9300      	str	r3, [sp, #0]
 801b028:	4613      	mov	r3, r2
 801b02a:	3204      	adds	r2, #4
 801b02c:	4401      	add	r1, r0
 801b02e:	4811      	ldr	r0, [pc, #68]	; (801b074 <tcp_input+0x530>)
 801b030:	6800      	ldr	r0, [r0, #0]
 801b032:	f000 fecd 	bl	801bdd0 <tcp_rst>
 801b036:	e7e8      	b.n	801b00a <tcp_input+0x4c6>
 801b038:	200094f0 	.word	0x200094f0
 801b03c:	080250c4 	.word	0x080250c4
 801b040:	0802500c 	.word	0x0802500c
 801b044:	08020b90 	.word	0x08020b90
 801b048:	2000a250 	.word	0x2000a250
 801b04c:	2000ecbc 	.word	0x2000ecbc
 801b050:	2000ecc8 	.word	0x2000ecc8
 801b054:	200094e4 	.word	0x200094e4
 801b058:	2000ecb4 	.word	0x2000ecb4
 801b05c:	200094dc 	.word	0x200094dc
 801b060:	200094e0 	.word	0x200094e0
 801b064:	0802503c 	.word	0x0802503c
 801b068:	2000a260 	.word	0x2000a260
 801b06c:	200094fe 	.word	0x200094fe
 801b070:	200094e8 	.word	0x200094e8
 801b074:	200094c4 	.word	0x200094c4

0801b078 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801b078:	4a02      	ldr	r2, [pc, #8]	; (801b084 <tcp_trigger_input_pcb_close+0xc>)
 801b07a:	7813      	ldrb	r3, [r2, #0]
 801b07c:	f043 0310 	orr.w	r3, r3, #16
 801b080:	7013      	strb	r3, [r2, #0]
 801b082:	4770      	bx	lr
 801b084:	200094e4 	.word	0x200094e4

0801b088 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801b088:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801b08a:	7d03      	ldrb	r3, [r0, #20]
 801b08c:	2b04      	cmp	r3, #4
 801b08e:	d005      	beq.n	801b09c <tcp_write_checks+0x14>
 801b090:	2b07      	cmp	r3, #7
 801b092:	d003      	beq.n	801b09c <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 801b094:	2b02      	cmp	r3, #2
 801b096:	d001      	beq.n	801b09c <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 801b098:	2b03      	cmp	r3, #3
 801b09a:	d139      	bne.n	801b110 <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 801b09c:	2900      	cmp	r1, #0
 801b09e:	d03a      	beq.n	801b116 <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801b0a0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801b0a4:	4299      	cmp	r1, r3
 801b0a6:	d808      	bhi.n	801b0ba <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801b0a8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801b0ac:	2b0a      	cmp	r3, #10
 801b0ae:	d80b      	bhi.n	801b0c8 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 801b0b0:	b1f3      	cbz	r3, 801b0f0 <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b0b2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801b0b4:	b17b      	cbz	r3, 801b0d6 <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801b0b6:	2000      	movs	r0, #0
 801b0b8:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 801b0ba:	7e83      	ldrb	r3, [r0, #26]
 801b0bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b0c0:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 801b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 801b0c6:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 801b0c8:	7e83      	ldrb	r3, [r0, #26]
 801b0ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b0ce:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 801b0d0:	f04f 30ff 	mov.w	r0, #4294967295
 801b0d4:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b0d6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801b0d8:	b10b      	cbz	r3, 801b0de <tcp_write_checks+0x56>
  return ERR_OK;
 801b0da:	2000      	movs	r0, #0
 801b0dc:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b0de:	4b0f      	ldr	r3, [pc, #60]	; (801b11c <tcp_write_checks+0x94>)
 801b0e0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801b0e4:	490e      	ldr	r1, [pc, #56]	; (801b120 <tcp_write_checks+0x98>)
 801b0e6:	480f      	ldr	r0, [pc, #60]	; (801b124 <tcp_write_checks+0x9c>)
 801b0e8:	f004 f923 	bl	801f332 <iprintf>
  return ERR_OK;
 801b0ec:	2000      	movs	r0, #0
 801b0ee:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b0f0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801b0f2:	b143      	cbz	r3, 801b106 <tcp_write_checks+0x7e>
 801b0f4:	4b09      	ldr	r3, [pc, #36]	; (801b11c <tcp_write_checks+0x94>)
 801b0f6:	f240 1259 	movw	r2, #345	; 0x159
 801b0fa:	490b      	ldr	r1, [pc, #44]	; (801b128 <tcp_write_checks+0xa0>)
 801b0fc:	4809      	ldr	r0, [pc, #36]	; (801b124 <tcp_write_checks+0x9c>)
 801b0fe:	f004 f918 	bl	801f332 <iprintf>
  return ERR_OK;
 801b102:	2000      	movs	r0, #0
 801b104:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b106:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d1f3      	bne.n	801b0f4 <tcp_write_checks+0x6c>
  return ERR_OK;
 801b10c:	2000      	movs	r0, #0
}
 801b10e:	bd08      	pop	{r3, pc}
    return ERR_CONN;
 801b110:	f06f 000a 	mvn.w	r0, #10
 801b114:	bd08      	pop	{r3, pc}
    return ERR_OK;
 801b116:	2000      	movs	r0, #0
 801b118:	bd08      	pop	{r3, pc}
 801b11a:	bf00      	nop
 801b11c:	080255d4 	.word	0x080255d4
 801b120:	08025608 	.word	0x08025608
 801b124:	08020b90 	.word	0x08020b90
 801b128:	08025644 	.word	0x08025644

0801b12c <tcp_pbuf_prealloc>:
{
 801b12c:	b570      	push	{r4, r5, r6, lr}
 801b12e:	460c      	mov	r4, r1
 801b130:	461e      	mov	r6, r3
 801b132:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 801b136:	4291      	cmp	r1, r2
 801b138:	d215      	bcs.n	801b166 <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b13a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801b13e:	f011 0f02 	tst.w	r1, #2
 801b142:	d108      	bne.n	801b156 <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 801b144:	9904      	ldr	r1, [sp, #16]
 801b146:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b148:	f011 0f40 	tst.w	r1, #64	; 0x40
 801b14c:	d126      	bne.n	801b19c <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 801b14e:	b113      	cbz	r3, 801b156 <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 801b150:	9b04      	ldr	r3, [sp, #16]
 801b152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 801b154:	b1e3      	cbz	r3, 801b190 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801b156:	f204 21d3 	addw	r1, r4, #723	; 0x2d3
 801b15a:	f021 0103 	bic.w	r1, r1, #3
 801b15e:	428a      	cmp	r2, r1
 801b160:	bf28      	it	cs
 801b162:	460a      	movcs	r2, r1
 801b164:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801b166:	2200      	movs	r2, #0
 801b168:	f7fd f8ce 	bl	8018308 <pbuf_alloc>
  if (p == NULL) {
 801b16c:	4605      	mov	r5, r0
 801b16e:	b168      	cbz	r0, 801b18c <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801b170:	6803      	ldr	r3, [r0, #0]
 801b172:	b133      	cbz	r3, 801b182 <tcp_pbuf_prealloc+0x56>
 801b174:	4b0a      	ldr	r3, [pc, #40]	; (801b1a0 <tcp_pbuf_prealloc+0x74>)
 801b176:	f44f 7288 	mov.w	r2, #272	; 0x110
 801b17a:	490a      	ldr	r1, [pc, #40]	; (801b1a4 <tcp_pbuf_prealloc+0x78>)
 801b17c:	480a      	ldr	r0, [pc, #40]	; (801b1a8 <tcp_pbuf_prealloc+0x7c>)
 801b17e:	f004 f8d8 	bl	801f332 <iprintf>
  *oversize = p->len - length;
 801b182:	896b      	ldrh	r3, [r5, #10]
 801b184:	1b1b      	subs	r3, r3, r4
 801b186:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 801b188:	812c      	strh	r4, [r5, #8]
 801b18a:	816c      	strh	r4, [r5, #10]
}
 801b18c:	4628      	mov	r0, r5
 801b18e:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 801b190:	9b04      	ldr	r3, [sp, #16]
 801b192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 801b194:	2b00      	cmp	r3, #0
 801b196:	d1de      	bne.n	801b156 <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 801b198:	4621      	mov	r1, r4
 801b19a:	e7e4      	b.n	801b166 <tcp_pbuf_prealloc+0x3a>
 801b19c:	4621      	mov	r1, r4
 801b19e:	e7e2      	b.n	801b166 <tcp_pbuf_prealloc+0x3a>
 801b1a0:	080255d4 	.word	0x080255d4
 801b1a4:	080253e4 	.word	0x080253e4
 801b1a8:	08020b90 	.word	0x08020b90

0801b1ac <tcp_create_segment>:
{
 801b1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1b0:	4680      	mov	r8, r0
 801b1b2:	460e      	mov	r6, r1
 801b1b4:	4617      	mov	r7, r2
 801b1b6:	4699      	mov	r9, r3
 801b1b8:	f89d a020 	ldrb.w	sl, [sp, #32]
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b1bc:	f01a 0f01 	tst.w	sl, #1
 801b1c0:	d03c      	beq.n	801b23c <tcp_create_segment+0x90>
 801b1c2:	2504      	movs	r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801b1c4:	2002      	movs	r0, #2
 801b1c6:	f7fc fe49 	bl	8017e5c <memp_malloc>
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	2800      	cmp	r0, #0
 801b1ce:	d037      	beq.n	801b240 <tcp_create_segment+0x94>
  seg->flags = optflags;
 801b1d0:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801b1d4:	2300      	movs	r3, #0
 801b1d6:	6003      	str	r3, [r0, #0]
  seg->p = p;
 801b1d8:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b1da:	8933      	ldrh	r3, [r6, #8]
 801b1dc:	fa1f fa85 	uxth.w	sl, r5
 801b1e0:	4553      	cmp	r3, sl
 801b1e2:	d331      	bcc.n	801b248 <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 801b1e4:	8933      	ldrh	r3, [r6, #8]
 801b1e6:	eba3 030a 	sub.w	r3, r3, sl
 801b1ea:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 801b1ec:	2114      	movs	r1, #20
 801b1ee:	4630      	mov	r0, r6
 801b1f0:	f7fd f814 	bl	801821c <pbuf_header>
 801b1f4:	bb78      	cbnz	r0, 801b256 <tcp_create_segment+0xaa>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801b1f6:	6863      	ldr	r3, [r4, #4]
 801b1f8:	685e      	ldr	r6, [r3, #4]
 801b1fa:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801b1fc:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 801b200:	f7fa ff4f 	bl	80160a2 <lwip_htons>
 801b204:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801b206:	68e6      	ldr	r6, [r4, #12]
 801b208:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 801b20c:	f7fa ff49 	bl	80160a2 <lwip_htons>
 801b210:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801b212:	68e6      	ldr	r6, [r4, #12]
 801b214:	4648      	mov	r0, r9
 801b216:	f7fa ff47 	bl	80160a8 <lwip_htonl>
 801b21a:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801b21c:	68e6      	ldr	r6, [r4, #12]
 801b21e:	08a8      	lsrs	r0, r5, #2
 801b220:	3005      	adds	r0, #5
 801b222:	0300      	lsls	r0, r0, #12
 801b224:	b280      	uxth	r0, r0
 801b226:	4338      	orrs	r0, r7
 801b228:	f7fa ff3b 	bl	80160a2 <lwip_htons>
 801b22c:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 801b22e:	68e3      	ldr	r3, [r4, #12]
 801b230:	2200      	movs	r2, #0
 801b232:	749a      	strb	r2, [r3, #18]
 801b234:	74da      	strb	r2, [r3, #19]
}
 801b236:	4620      	mov	r0, r4
 801b238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b23c:	2500      	movs	r5, #0
 801b23e:	e7c1      	b.n	801b1c4 <tcp_create_segment+0x18>
    pbuf_free(p);
 801b240:	4630      	mov	r0, r6
 801b242:	f7fc fff5 	bl	8018230 <pbuf_free>
    return NULL;
 801b246:	e7f6      	b.n	801b236 <tcp_create_segment+0x8a>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b248:	4b05      	ldr	r3, [pc, #20]	; (801b260 <tcp_create_segment+0xb4>)
 801b24a:	22ba      	movs	r2, #186	; 0xba
 801b24c:	4905      	ldr	r1, [pc, #20]	; (801b264 <tcp_create_segment+0xb8>)
 801b24e:	4806      	ldr	r0, [pc, #24]	; (801b268 <tcp_create_segment+0xbc>)
 801b250:	f004 f86f 	bl	801f332 <iprintf>
 801b254:	e7c6      	b.n	801b1e4 <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 801b256:	4620      	mov	r0, r4
 801b258:	f7fd fcce 	bl	8018bf8 <tcp_seg_free>
    return NULL;
 801b25c:	2400      	movs	r4, #0
 801b25e:	e7ea      	b.n	801b236 <tcp_create_segment+0x8a>
 801b260:	080255d4 	.word	0x080255d4
 801b264:	0802525c 	.word	0x0802525c
 801b268:	08020b90 	.word	0x08020b90

0801b26c <tcp_output_alloc_header>:
{
 801b26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b270:	4606      	mov	r6, r0
 801b272:	460c      	mov	r4, r1
 801b274:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b276:	4411      	add	r1, r2
 801b278:	b289      	uxth	r1, r1
 801b27a:	3114      	adds	r1, #20
 801b27c:	2200      	movs	r2, #0
 801b27e:	b289      	uxth	r1, r1
 801b280:	2001      	movs	r0, #1
 801b282:	f7fd f841 	bl	8018308 <pbuf_alloc>
  if (p != NULL) {
 801b286:	4607      	mov	r7, r0
 801b288:	b348      	cbz	r0, 801b2de <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b28a:	8942      	ldrh	r2, [r0, #10]
 801b28c:	f104 0314 	add.w	r3, r4, #20
 801b290:	429a      	cmp	r2, r3
 801b292:	db27      	blt.n	801b2e4 <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 801b294:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 801b296:	8af0      	ldrh	r0, [r6, #22]
 801b298:	f7fa ff03 	bl	80160a2 <lwip_htons>
 801b29c:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801b29e:	8b30      	ldrh	r0, [r6, #24]
 801b2a0:	f7fa feff 	bl	80160a2 <lwip_htons>
 801b2a4:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 801b2a6:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b2aa:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801b2ac:	f7fa fefc 	bl	80160a8 <lwip_htonl>
 801b2b0:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801b2b2:	08a0      	lsrs	r0, r4, #2
 801b2b4:	3005      	adds	r0, #5
 801b2b6:	0300      	lsls	r0, r0, #12
 801b2b8:	b280      	uxth	r0, r0
 801b2ba:	f040 0010 	orr.w	r0, r0, #16
 801b2be:	f7fa fef0 	bl	80160a2 <lwip_htons>
 801b2c2:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b2c4:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 801b2c6:	f7fa feec 	bl	80160a2 <lwip_htons>
 801b2ca:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	742b      	strb	r3, [r5, #16]
 801b2d0:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 801b2d2:	74ab      	strb	r3, [r5, #18]
 801b2d4:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b2d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b2d8:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 801b2da:	4413      	add	r3, r2
 801b2dc:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 801b2de:	4638      	mov	r0, r7
 801b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b2e4:	4b03      	ldr	r3, [pc, #12]	; (801b2f4 <tcp_output_alloc_header+0x88>)
 801b2e6:	2273      	movs	r2, #115	; 0x73
 801b2e8:	4903      	ldr	r1, [pc, #12]	; (801b2f8 <tcp_output_alloc_header+0x8c>)
 801b2ea:	4804      	ldr	r0, [pc, #16]	; (801b2fc <tcp_output_alloc_header+0x90>)
 801b2ec:	f004 f821 	bl	801f332 <iprintf>
 801b2f0:	e7d0      	b.n	801b294 <tcp_output_alloc_header+0x28>
 801b2f2:	bf00      	nop
 801b2f4:	080255d4 	.word	0x080255d4
 801b2f8:	080253b4 	.word	0x080253b4
 801b2fc:	08020b90 	.word	0x08020b90

0801b300 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801b300:	6843      	ldr	r3, [r0, #4]
 801b302:	89db      	ldrh	r3, [r3, #14]
 801b304:	2b01      	cmp	r3, #1
 801b306:	d001      	beq.n	801b30c <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801b308:	2000      	movs	r0, #0
 801b30a:	4770      	bx	lr
{
 801b30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b30e:	b085      	sub	sp, #20
 801b310:	4616      	mov	r6, r2
 801b312:	460d      	mov	r5, r1
 801b314:	4604      	mov	r4, r0
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b316:	68c7      	ldr	r7, [r0, #12]
 801b318:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801b31a:	f7fa fec5 	bl	80160a8 <lwip_htonl>
 801b31e:	60b8      	str	r0, [r7, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b320:	68e7      	ldr	r7, [r4, #12]
 801b322:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 801b324:	f7fa febd 	bl	80160a2 <lwip_htons>
 801b328:	81f8      	strh	r0, [r7, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b32a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b32c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 801b32e:	4413      	add	r3, r2
 801b330:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b332:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b334:	7aa3      	ldrb	r3, [r4, #10]
 801b336:	f013 0f01 	tst.w	r3, #1
 801b33a:	d126      	bne.n	801b38a <tcp_output_segment+0x8a>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b33c:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 801b340:	2b00      	cmp	r3, #0
 801b342:	db2d      	blt.n	801b3a0 <tcp_output_segment+0xa0>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
 801b344:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b346:	2b00      	cmp	r3, #0
 801b348:	d02d      	beq.n	801b3a6 <tcp_output_segment+0xa6>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b34a:	68e3      	ldr	r3, [r4, #12]
 801b34c:	6862      	ldr	r2, [r4, #4]
 801b34e:	6851      	ldr	r1, [r2, #4]
 801b350:	1a5b      	subs	r3, r3, r1
 801b352:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b354:	8951      	ldrh	r1, [r2, #10]
 801b356:	1ac9      	subs	r1, r1, r3
 801b358:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 801b35a:	6861      	ldr	r1, [r4, #4]
 801b35c:	890a      	ldrh	r2, [r1, #8]
 801b35e:	1ad3      	subs	r3, r2, r3
 801b360:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 801b362:	6863      	ldr	r3, [r4, #4]
 801b364:	68e2      	ldr	r2, [r4, #12]
 801b366:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b368:	68e3      	ldr	r3, [r4, #12]
 801b36a:	2200      	movs	r2, #0
 801b36c:	741a      	strb	r2, [r3, #16]
 801b36e:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b370:	6860      	ldr	r0, [r4, #4]
 801b372:	7aab      	ldrb	r3, [r5, #10]
 801b374:	7a6a      	ldrb	r2, [r5, #9]
 801b376:	9602      	str	r6, [sp, #8]
 801b378:	2106      	movs	r1, #6
 801b37a:	9101      	str	r1, [sp, #4]
 801b37c:	9200      	str	r2, [sp, #0]
 801b37e:	1d2a      	adds	r2, r5, #4
 801b380:	4629      	mov	r1, r5
 801b382:	f7fb fdd3 	bl	8016f2c <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 801b386:	b005      	add	sp, #20
 801b388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801b38a:	1d29      	adds	r1, r5, #4
 801b38c:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 801b390:	f7fe fa3a 	bl	8019808 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b394:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801b398:	f7fa fe86 	bl	80160a8 <lwip_htonl>
 801b39c:	6178      	str	r0, [r7, #20]
 801b39e:	e7cd      	b.n	801b33c <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	862b      	strh	r3, [r5, #48]	; 0x30
 801b3a4:	e7ce      	b.n	801b344 <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 801b3a6:	4b04      	ldr	r3, [pc, #16]	; (801b3b8 <tcp_output_segment+0xb8>)
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b3ac:	68e3      	ldr	r3, [r4, #12]
 801b3ae:	6858      	ldr	r0, [r3, #4]
 801b3b0:	f7fa fe7a 	bl	80160a8 <lwip_htonl>
 801b3b4:	63a8      	str	r0, [r5, #56]	; 0x38
 801b3b6:	e7c8      	b.n	801b34a <tcp_output_segment+0x4a>
 801b3b8:	2000ecb8 	.word	0x2000ecb8

0801b3bc <tcp_write>:
{
 801b3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3c0:	b091      	sub	sp, #68	; 0x44
 801b3c2:	4681      	mov	r9, r0
 801b3c4:	9108      	str	r1, [sp, #32]
 801b3c6:	4692      	mov	sl, r2
 801b3c8:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801b3d0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 801b3d4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801b3d6:	9205      	str	r2, [sp, #20]
 801b3d8:	085b      	lsrs	r3, r3, #1
 801b3da:	4293      	cmp	r3, r2
 801b3dc:	bf28      	it	cs
 801b3de:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 801b3e0:	b103      	cbz	r3, 801b3e4 <tcp_write+0x28>
 801b3e2:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b3e4:	9b08      	ldr	r3, [sp, #32]
 801b3e6:	b1cb      	cbz	r3, 801b41c <tcp_write+0x60>
  err = tcp_write_checks(pcb, len);
 801b3e8:	4651      	mov	r1, sl
 801b3ea:	4648      	mov	r0, r9
 801b3ec:	f7ff fe4c 	bl	801b088 <tcp_write_checks>
  if (err != ERR_OK) {
 801b3f0:	9009      	str	r0, [sp, #36]	; 0x24
 801b3f2:	2800      	cmp	r0, #0
 801b3f4:	f040 81b2 	bne.w	801b75c <tcp_write+0x3a0>
  queuelen = pcb->snd_queuelen;
 801b3f8:	f8b9 6062 	ldrh.w	r6, [r9, #98]	; 0x62
  if (pcb->unsent != NULL) {
 801b3fc:	f8d9 b068 	ldr.w	fp, [r9, #104]	; 0x68
 801b400:	f1bb 0f00 	cmp.w	fp, #0
 801b404:	d116      	bne.n	801b434 <tcp_write+0x78>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b406:	f8b9 4064 	ldrh.w	r4, [r9, #100]	; 0x64
 801b40a:	2c00      	cmp	r4, #0
 801b40c:	f040 80d8 	bne.w	801b5c0 <tcp_write+0x204>
  u16_t extendlen = 0;
 801b410:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 801b412:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b414:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 801b416:	2300      	movs	r3, #0
 801b418:	930c      	str	r3, [sp, #48]	; 0x30
 801b41a:	e0e3      	b.n	801b5e4 <tcp_write+0x228>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b41c:	4bb1      	ldr	r3, [pc, #708]	; (801b6e4 <tcp_write+0x328>)
 801b41e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801b422:	49b1      	ldr	r1, [pc, #708]	; (801b6e8 <tcp_write+0x32c>)
 801b424:	48b1      	ldr	r0, [pc, #708]	; (801b6ec <tcp_write+0x330>)
 801b426:	f003 ff84 	bl	801f332 <iprintf>
 801b42a:	f06f 030f 	mvn.w	r3, #15
 801b42e:	9309      	str	r3, [sp, #36]	; 0x24
 801b430:	e194      	b.n	801b75c <tcp_write+0x3a0>
         last_unsent = last_unsent->next);
 801b432:	46bb      	mov	fp, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b434:	f8db 7000 	ldr.w	r7, [fp]
 801b438:	2f00      	cmp	r7, #0
 801b43a:	d1fa      	bne.n	801b432 <tcp_write+0x76>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801b43c:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b440:	f013 0f01 	tst.w	r3, #1
 801b444:	d051      	beq.n	801b4ea <tcp_write+0x12e>
 801b446:	2404      	movs	r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b448:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b44c:	4423      	add	r3, r4
 801b44e:	9a05      	ldr	r2, [sp, #20]
 801b450:	429a      	cmp	r2, r3
 801b452:	db4c      	blt.n	801b4ee <tcp_write+0x132>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b454:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b458:	441c      	add	r4, r3
 801b45a:	b2a4      	uxth	r4, r4
 801b45c:	9b05      	ldr	r3, [sp, #20]
 801b45e:	1b1c      	subs	r4, r3, r4
 801b460:	b2a3      	uxth	r3, r4
 801b462:	461a      	mov	r2, r3
 801b464:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 801b466:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801b46a:	930a      	str	r3, [sp, #40]	; 0x28
 801b46c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801b470:	2b00      	cmp	r3, #0
 801b472:	d04e      	beq.n	801b512 <tcp_write+0x156>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b474:	429a      	cmp	r2, r3
 801b476:	d342      	bcc.n	801b4fe <tcp_write+0x142>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b478:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b47c:	459a      	cmp	sl, r3
 801b47e:	d946      	bls.n	801b50e <tcp_write+0x152>
 801b480:	461a      	mov	r2, r3
 801b482:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b484:	4282      	cmp	r2, r0
 801b486:	bfa8      	it	ge
 801b488:	4602      	movge	r2, r0
 801b48a:	b292      	uxth	r2, r2
 801b48c:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801b48e:	1a9b      	subs	r3, r3, r2
 801b490:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 801b494:	1a83      	subs	r3, r0, r2
 801b496:	b29b      	uxth	r3, r3
 801b498:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 801b49a:	46d8      	mov	r8, fp
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801b49c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b4a0:	b14b      	cbz	r3, 801b4b6 <tcp_write+0xfa>
 801b4a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4a4:	4553      	cmp	r3, sl
 801b4a6:	d006      	beq.n	801b4b6 <tcp_write+0xfa>
 801b4a8:	4b8e      	ldr	r3, [pc, #568]	; (801b6e4 <tcp_write+0x328>)
 801b4aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 801b4ae:	4990      	ldr	r1, [pc, #576]	; (801b6f0 <tcp_write+0x334>)
 801b4b0:	488e      	ldr	r0, [pc, #568]	; (801b6ec <tcp_write+0x330>)
 801b4b2:	f003 ff3e 	bl	801f332 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b4b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b4b8:	4552      	cmp	r2, sl
 801b4ba:	f080 808f 	bcs.w	801b5dc <tcp_write+0x220>
 801b4be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b4c0:	2900      	cmp	r1, #0
 801b4c2:	f000 8094 	beq.w	801b5ee <tcp_write+0x232>
 801b4c6:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	f000 8093 	beq.w	801b5f6 <tcp_write+0x23a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b4d0:	ebaa 0502 	sub.w	r5, sl, r2
 801b4d4:	428d      	cmp	r5, r1
 801b4d6:	bfa8      	it	ge
 801b4d8:	460d      	movge	r5, r1
 801b4da:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b4dc:	9b06      	ldr	r3, [sp, #24]
 801b4de:	f013 0f01 	tst.w	r3, #1
 801b4e2:	d118      	bne.n	801b516 <tcp_write+0x15a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b4e4:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b4e8:	e038      	b.n	801b55c <tcp_write+0x1a0>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801b4ea:	2400      	movs	r4, #0
 801b4ec:	e7ac      	b.n	801b448 <tcp_write+0x8c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b4ee:	4b7d      	ldr	r3, [pc, #500]	; (801b6e4 <tcp_write+0x328>)
 801b4f0:	f240 12c7 	movw	r2, #455	; 0x1c7
 801b4f4:	497f      	ldr	r1, [pc, #508]	; (801b6f4 <tcp_write+0x338>)
 801b4f6:	487d      	ldr	r0, [pc, #500]	; (801b6ec <tcp_write+0x330>)
 801b4f8:	f003 ff1b 	bl	801f332 <iprintf>
 801b4fc:	e7aa      	b.n	801b454 <tcp_write+0x98>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b4fe:	4b79      	ldr	r3, [pc, #484]	; (801b6e4 <tcp_write+0x328>)
 801b500:	f240 12d9 	movw	r2, #473	; 0x1d9
 801b504:	497c      	ldr	r1, [pc, #496]	; (801b6f8 <tcp_write+0x33c>)
 801b506:	4879      	ldr	r0, [pc, #484]	; (801b6ec <tcp_write+0x330>)
 801b508:	f003 ff13 	bl	801f332 <iprintf>
 801b50c:	e7b4      	b.n	801b478 <tcp_write+0xbc>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b50e:	4652      	mov	r2, sl
 801b510:	e7b7      	b.n	801b482 <tcp_write+0xc6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b512:	46b8      	mov	r8, r7
 801b514:	e7c2      	b.n	801b49c <tcp_write+0xe0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801b516:	2301      	movs	r3, #1
 801b518:	9302      	str	r3, [sp, #8]
 801b51a:	9b06      	ldr	r3, [sp, #24]
 801b51c:	9301      	str	r3, [sp, #4]
 801b51e:	f8cd 9000 	str.w	r9, [sp]
 801b522:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801b526:	460a      	mov	r2, r1
 801b528:	4621      	mov	r1, r4
 801b52a:	2004      	movs	r0, #4
 801b52c:	f7ff fdfe 	bl	801b12c <tcp_pbuf_prealloc>
 801b530:	4603      	mov	r3, r0
 801b532:	900c      	str	r0, [sp, #48]	; 0x30
 801b534:	2800      	cmp	r0, #0
 801b536:	f000 80f0 	beq.w	801b71a <tcp_write+0x35e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801b53a:	4622      	mov	r2, r4
 801b53c:	9908      	ldr	r1, [sp, #32]
 801b53e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b540:	4401      	add	r1, r0
 801b542:	461d      	mov	r5, r3
 801b544:	6858      	ldr	r0, [r3, #4]
 801b546:	f004 fd38 	bl	801ffba <memcpy>
        queuelen += pbuf_clen(concat_p);
 801b54a:	4628      	mov	r0, r5
 801b54c:	f7fd f836 	bl	80185bc <pbuf_clen>
 801b550:	4406      	add	r6, r0
 801b552:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801b554:	2300      	movs	r3, #0
 801b556:	930b      	str	r3, [sp, #44]	; 0x2c
 801b558:	e01a      	b.n	801b590 <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b55a:	4613      	mov	r3, r2
 801b55c:	681a      	ldr	r2, [r3, #0]
 801b55e:	2a00      	cmp	r2, #0
 801b560:	d1fb      	bne.n	801b55a <tcp_write+0x19e>
 801b562:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b564:	7b1a      	ldrb	r2, [r3, #12]
 801b566:	2a01      	cmp	r2, #1
 801b568:	d017      	beq.n	801b59a <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801b56a:	2201      	movs	r2, #1
 801b56c:	4621      	mov	r1, r4
 801b56e:	2004      	movs	r0, #4
 801b570:	f7fc feca 	bl	8018308 <pbuf_alloc>
 801b574:	900c      	str	r0, [sp, #48]	; 0x30
 801b576:	2800      	cmp	r0, #0
 801b578:	f000 80cf 	beq.w	801b71a <tcp_write+0x35e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801b57c:	9b08      	ldr	r3, [sp, #32]
 801b57e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b580:	440b      	add	r3, r1
 801b582:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801b584:	f7fd f81a 	bl	80185bc <pbuf_clen>
 801b588:	4406      	add	r6, r0
 801b58a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801b58c:	2300      	movs	r3, #0
 801b58e:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 801b590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b592:	441c      	add	r4, r3
 801b594:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 801b596:	46d8      	mov	r8, fp
 801b598:	e024      	b.n	801b5e4 <tcp_write+0x228>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b59a:	685a      	ldr	r2, [r3, #4]
 801b59c:	895b      	ldrh	r3, [r3, #10]
 801b59e:	4413      	add	r3, r2
 801b5a0:	9a08      	ldr	r2, [sp, #32]
 801b5a2:	429a      	cmp	r2, r3
 801b5a4:	d1e1      	bne.n	801b56a <tcp_write+0x1ae>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b5a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5a8:	b90b      	cbnz	r3, 801b5ae <tcp_write+0x1f2>
          extendlen = seglen;
 801b5aa:	940b      	str	r4, [sp, #44]	; 0x2c
 801b5ac:	e7f0      	b.n	801b590 <tcp_write+0x1d4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b5ae:	4b4d      	ldr	r3, [pc, #308]	; (801b6e4 <tcp_write+0x328>)
 801b5b0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801b5b4:	4951      	ldr	r1, [pc, #324]	; (801b6fc <tcp_write+0x340>)
 801b5b6:	484d      	ldr	r0, [pc, #308]	; (801b6ec <tcp_write+0x330>)
 801b5b8:	f003 febb 	bl	801f332 <iprintf>
          extendlen = seglen;
 801b5bc:	940b      	str	r4, [sp, #44]	; 0x2c
 801b5be:	e7e7      	b.n	801b590 <tcp_write+0x1d4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b5c0:	4b48      	ldr	r3, [pc, #288]	; (801b6e4 <tcp_write+0x328>)
 801b5c2:	f240 2225 	movw	r2, #549	; 0x225
 801b5c6:	494e      	ldr	r1, [pc, #312]	; (801b700 <tcp_write+0x344>)
 801b5c8:	4848      	ldr	r0, [pc, #288]	; (801b6ec <tcp_write+0x330>)
 801b5ca:	f003 feb2 	bl	801f332 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b5ce:	46d8      	mov	r8, fp
  u16_t extendlen = 0;
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 801b5d4:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 801b5d6:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 801b5d8:	930c      	str	r3, [sp, #48]	; 0x30
 801b5da:	e003      	b.n	801b5e4 <tcp_write+0x228>
 801b5dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 801b5de:	2300      	movs	r3, #0
 801b5e0:	930b      	str	r3, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 801b5e2:	930c      	str	r3, [sp, #48]	; 0x30
      queue = seg;
 801b5e4:	2700      	movs	r7, #0
 801b5e6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801b5ea:	46bb      	mov	fp, r7
 801b5ec:	e060      	b.n	801b6b0 <tcp_write+0x2f4>
 801b5ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	930c      	str	r3, [sp, #48]	; 0x30
 801b5f4:	e7f6      	b.n	801b5e4 <tcp_write+0x228>
  u16_t extendlen = 0;
 801b5f6:	930b      	str	r3, [sp, #44]	; 0x2c
 801b5f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 801b5fa:	2300      	movs	r3, #0
 801b5fc:	930c      	str	r3, [sp, #48]	; 0x30
 801b5fe:	e7f1      	b.n	801b5e4 <tcp_write+0x228>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801b600:	fab7 f387 	clz	r3, r7
 801b604:	095b      	lsrs	r3, r3, #5
 801b606:	9302      	str	r3, [sp, #8]
 801b608:	9b06      	ldr	r3, [sp, #24]
 801b60a:	9301      	str	r3, [sp, #4]
 801b60c:	f8cd 9000 	str.w	r9, [sp]
 801b610:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801b614:	9a05      	ldr	r2, [sp, #20]
 801b616:	4629      	mov	r1, r5
 801b618:	2000      	movs	r0, #0
 801b61a:	f7ff fd87 	bl	801b12c <tcp_pbuf_prealloc>
 801b61e:	4680      	mov	r8, r0
 801b620:	2800      	cmp	r0, #0
 801b622:	d07a      	beq.n	801b71a <tcp_write+0x35e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b624:	8943      	ldrh	r3, [r0, #10]
 801b626:	429d      	cmp	r5, r3
 801b628:	d807      	bhi.n	801b63a <tcp_write+0x27e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 801b62a:	462a      	mov	r2, r5
 801b62c:	9b08      	ldr	r3, [sp, #32]
 801b62e:	1919      	adds	r1, r3, r4
 801b630:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b634:	f004 fcc1 	bl	801ffba <memcpy>
 801b638:	e01d      	b.n	801b676 <tcp_write+0x2ba>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b63a:	4b2a      	ldr	r3, [pc, #168]	; (801b6e4 <tcp_write+0x328>)
 801b63c:	f240 2241 	movw	r2, #577	; 0x241
 801b640:	4930      	ldr	r1, [pc, #192]	; (801b704 <tcp_write+0x348>)
 801b642:	482a      	ldr	r0, [pc, #168]	; (801b6ec <tcp_write+0x330>)
 801b644:	f003 fe75 	bl	801f332 <iprintf>
 801b648:	e7ef      	b.n	801b62a <tcp_write+0x26e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801b64a:	2201      	movs	r2, #1
 801b64c:	4629      	mov	r1, r5
 801b64e:	2000      	movs	r0, #0
 801b650:	f7fc fe5a 	bl	8018308 <pbuf_alloc>
 801b654:	9007      	str	r0, [sp, #28]
 801b656:	2800      	cmp	r0, #0
 801b658:	d05f      	beq.n	801b71a <tcp_write+0x35e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801b65a:	9b08      	ldr	r3, [sp, #32]
 801b65c:	4423      	add	r3, r4
 801b65e:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b660:	2200      	movs	r2, #0
 801b662:	4611      	mov	r1, r2
 801b664:	4610      	mov	r0, r2
 801b666:	f7fc fe4f 	bl	8018308 <pbuf_alloc>
 801b66a:	4680      	mov	r8, r0
 801b66c:	2800      	cmp	r0, #0
 801b66e:	d04d      	beq.n	801b70c <tcp_write+0x350>
      pbuf_cat(p/*header*/, p2/*data*/);
 801b670:	9907      	ldr	r1, [sp, #28]
 801b672:	f7fc ffc9 	bl	8018608 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801b676:	4640      	mov	r0, r8
 801b678:	f7fc ffa0 	bl	80185bc <pbuf_clen>
 801b67c:	4406      	add	r6, r0
 801b67e:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801b680:	2e0b      	cmp	r6, #11
 801b682:	d847      	bhi.n	801b714 <tcp_write+0x358>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801b684:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 801b688:	2200      	movs	r2, #0
 801b68a:	9200      	str	r2, [sp, #0]
 801b68c:	4423      	add	r3, r4
 801b68e:	4641      	mov	r1, r8
 801b690:	4648      	mov	r0, r9
 801b692:	f7ff fd8b 	bl	801b1ac <tcp_create_segment>
 801b696:	4680      	mov	r8, r0
 801b698:	2800      	cmp	r0, #0
 801b69a:	d03e      	beq.n	801b71a <tcp_write+0x35e>
    if (queue == NULL) {
 801b69c:	2f00      	cmp	r7, #0
 801b69e:	d069      	beq.n	801b774 <tcp_write+0x3b8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b6a0:	f1bb 0f00 	cmp.w	fp, #0
 801b6a4:	d05e      	beq.n	801b764 <tcp_write+0x3a8>
      prev_seg->next = seg;
 801b6a6:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 801b6aa:	442c      	add	r4, r5
 801b6ac:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 801b6ae:	46c3      	mov	fp, r8
  while (pos < len) {
 801b6b0:	4554      	cmp	r4, sl
 801b6b2:	d261      	bcs.n	801b778 <tcp_write+0x3bc>
    u16_t left = len - pos;
 801b6b4:	ebaa 0504 	sub.w	r5, sl, r4
 801b6b8:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 801b6ba:	9b05      	ldr	r3, [sp, #20]
 801b6bc:	429d      	cmp	r5, r3
 801b6be:	bf28      	it	cs
 801b6c0:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b6c2:	9b06      	ldr	r3, [sp, #24]
 801b6c4:	f013 0f01 	tst.w	r3, #1
 801b6c8:	d19a      	bne.n	801b600 <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801b6ca:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d0bb      	beq.n	801b64a <tcp_write+0x28e>
 801b6d2:	4b04      	ldr	r3, [pc, #16]	; (801b6e4 <tcp_write+0x328>)
 801b6d4:	f240 224b 	movw	r2, #587	; 0x24b
 801b6d8:	490b      	ldr	r1, [pc, #44]	; (801b708 <tcp_write+0x34c>)
 801b6da:	4804      	ldr	r0, [pc, #16]	; (801b6ec <tcp_write+0x330>)
 801b6dc:	f003 fe29 	bl	801f332 <iprintf>
 801b6e0:	e7b3      	b.n	801b64a <tcp_write+0x28e>
 801b6e2:	bf00      	nop
 801b6e4:	080255d4 	.word	0x080255d4
 801b6e8:	080253f8 	.word	0x080253f8
 801b6ec:	08020b90 	.word	0x08020b90
 801b6f0:	08025464 	.word	0x08025464
 801b6f4:	0802542c 	.word	0x0802542c
 801b6f8:	08025444 	.word	0x08025444
 801b6fc:	08025484 	.word	0x08025484
 801b700:	080254b0 	.word	0x080254b0
 801b704:	080254e0 	.word	0x080254e0
 801b708:	08025520 	.word	0x08025520
        pbuf_free(p2);
 801b70c:	9807      	ldr	r0, [sp, #28]
 801b70e:	f7fc fd8f 	bl	8018230 <pbuf_free>
        goto memerr;
 801b712:	e002      	b.n	801b71a <tcp_write+0x35e>
      pbuf_free(p);
 801b714:	4640      	mov	r0, r8
 801b716:	f7fc fd8b 	bl	8018230 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 801b71a:	f899 301a 	ldrb.w	r3, [r9, #26]
 801b71e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b722:	f889 301a 	strb.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801b726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b728:	b113      	cbz	r3, 801b730 <tcp_write+0x374>
    pbuf_free(concat_p);
 801b72a:	4618      	mov	r0, r3
 801b72c:	f7fc fd80 	bl	8018230 <pbuf_free>
  if (queue != NULL) {
 801b730:	b117      	cbz	r7, 801b738 <tcp_write+0x37c>
    tcp_segs_free(queue);
 801b732:	4638      	mov	r0, r7
 801b734:	f7fd fa6d 	bl	8018c12 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801b738:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	f000 80c6 	beq.w	801b8ce <tcp_write+0x512>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b742:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801b746:	2b00      	cmp	r3, #0
 801b748:	f040 80c5 	bne.w	801b8d6 <tcp_write+0x51a>
 801b74c:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 801b750:	2b00      	cmp	r3, #0
 801b752:	f000 80b1 	beq.w	801b8b8 <tcp_write+0x4fc>
  return ERR_MEM;
 801b756:	f04f 33ff 	mov.w	r3, #4294967295
 801b75a:	9309      	str	r3, [sp, #36]	; 0x24
}
 801b75c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b75e:	b011      	add	sp, #68	; 0x44
 801b760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b764:	4b5e      	ldr	r3, [pc, #376]	; (801b8e0 <tcp_write+0x524>)
 801b766:	f240 2285 	movw	r2, #645	; 0x285
 801b76a:	495e      	ldr	r1, [pc, #376]	; (801b8e4 <tcp_write+0x528>)
 801b76c:	485e      	ldr	r0, [pc, #376]	; (801b8e8 <tcp_write+0x52c>)
 801b76e:	f003 fde0 	bl	801f332 <iprintf>
 801b772:	e798      	b.n	801b6a6 <tcp_write+0x2ea>
      queue = seg;
 801b774:	4607      	mov	r7, r0
 801b776:	e798      	b.n	801b6aa <tcp_write+0x2ee>
 801b778:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 801b77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b77e:	b1e3      	cbz	r3, 801b7ba <tcp_write+0x3fe>
    for (p = last_unsent->p; p; p = p->next) {
 801b780:	f8db 4004 	ldr.w	r4, [fp, #4]
 801b784:	461d      	mov	r5, r3
 801b786:	e000      	b.n	801b78a <tcp_write+0x3ce>
 801b788:	6824      	ldr	r4, [r4, #0]
 801b78a:	b184      	cbz	r4, 801b7ae <tcp_write+0x3f2>
      p->tot_len += oversize_used;
 801b78c:	8923      	ldrh	r3, [r4, #8]
 801b78e:	442b      	add	r3, r5
 801b790:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801b792:	6823      	ldr	r3, [r4, #0]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d1f7      	bne.n	801b788 <tcp_write+0x3cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801b798:	6860      	ldr	r0, [r4, #4]
 801b79a:	8963      	ldrh	r3, [r4, #10]
 801b79c:	462a      	mov	r2, r5
 801b79e:	9908      	ldr	r1, [sp, #32]
 801b7a0:	4418      	add	r0, r3
 801b7a2:	f004 fc0a 	bl	801ffba <memcpy>
        p->len += oversize_used;
 801b7a6:	8963      	ldrh	r3, [r4, #10]
 801b7a8:	442b      	add	r3, r5
 801b7aa:	8163      	strh	r3, [r4, #10]
 801b7ac:	e7ec      	b.n	801b788 <tcp_write+0x3cc>
    last_unsent->len += oversize_used;
 801b7ae:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b7b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b7b4:	441a      	add	r2, r3
 801b7b6:	f8ab 2008 	strh.w	r2, [fp, #8]
  pcb->unsent_oversize = oversize;
 801b7ba:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b7be:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 801b7c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d03f      	beq.n	801b848 <tcp_write+0x48c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b7c8:	f1bb 0f00 	cmp.w	fp, #0
 801b7cc:	d034      	beq.n	801b838 <tcp_write+0x47c>
    pbuf_cat(last_unsent->p, concat_p);
 801b7ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b7d0:	4621      	mov	r1, r4
 801b7d2:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b7d6:	f7fc ff17 	bl	8018608 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b7da:	8923      	ldrh	r3, [r4, #8]
 801b7dc:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 801b7e0:	4413      	add	r3, r2
 801b7e2:	f8ab 3008 	strh.w	r3, [fp, #8]
  if (last_unsent == NULL) {
 801b7e6:	f1bb 0f00 	cmp.w	fp, #0
 801b7ea:	d056      	beq.n	801b89a <tcp_write+0x4de>
    last_unsent->next = queue;
 801b7ec:	f8cb 7000 	str.w	r7, [fp]
  pcb->snd_lbb += len;
 801b7f0:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 801b7f4:	4453      	add	r3, sl
 801b7f6:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 801b7fa:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
 801b7fe:	eba3 0a0a 	sub.w	sl, r3, sl
 801b802:	f8a9 a060 	strh.w	sl, [r9, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 801b806:	f8a9 6062 	strh.w	r6, [r9, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 801b80a:	b11e      	cbz	r6, 801b814 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b80c:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801b810:	2b00      	cmp	r3, #0
 801b812:	d045      	beq.n	801b8a0 <tcp_write+0x4e4>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801b814:	f1b8 0f00 	cmp.w	r8, #0
 801b818:	d0a0      	beq.n	801b75c <tcp_write+0x3a0>
 801b81a:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801b81e:	2c00      	cmp	r4, #0
 801b820:	d09c      	beq.n	801b75c <tcp_write+0x3a0>
 801b822:	9b06      	ldr	r3, [sp, #24]
 801b824:	f013 0f02 	tst.w	r3, #2
 801b828:	d198      	bne.n	801b75c <tcp_write+0x3a0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b82a:	89a5      	ldrh	r5, [r4, #12]
 801b82c:	2008      	movs	r0, #8
 801b82e:	f7fa fc38 	bl	80160a2 <lwip_htons>
 801b832:	4328      	orrs	r0, r5
 801b834:	81a0      	strh	r0, [r4, #12]
 801b836:	e791      	b.n	801b75c <tcp_write+0x3a0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b838:	4b29      	ldr	r3, [pc, #164]	; (801b8e0 <tcp_write+0x524>)
 801b83a:	f240 22bb 	movw	r2, #699	; 0x2bb
 801b83e:	492b      	ldr	r1, [pc, #172]	; (801b8ec <tcp_write+0x530>)
 801b840:	4829      	ldr	r0, [pc, #164]	; (801b8e8 <tcp_write+0x52c>)
 801b842:	f003 fd76 	bl	801f332 <iprintf>
 801b846:	e7c2      	b.n	801b7ce <tcp_write+0x412>
  } else if (extendlen > 0) {
 801b848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d0cb      	beq.n	801b7e6 <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b84e:	f1bb 0f00 	cmp.w	fp, #0
 801b852:	d006      	beq.n	801b862 <tcp_write+0x4a6>
 801b854:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b858:	b11b      	cbz	r3, 801b862 <tcp_write+0x4a6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b85a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b85e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b860:	e00b      	b.n	801b87a <tcp_write+0x4be>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b862:	4b1f      	ldr	r3, [pc, #124]	; (801b8e0 <tcp_write+0x524>)
 801b864:	f240 22c1 	movw	r2, #705	; 0x2c1
 801b868:	4921      	ldr	r1, [pc, #132]	; (801b8f0 <tcp_write+0x534>)
 801b86a:	481f      	ldr	r0, [pc, #124]	; (801b8e8 <tcp_write+0x52c>)
 801b86c:	f003 fd61 	bl	801f332 <iprintf>
 801b870:	e7f3      	b.n	801b85a <tcp_write+0x49e>
      p->tot_len += extendlen;
 801b872:	891a      	ldrh	r2, [r3, #8]
 801b874:	4402      	add	r2, r0
 801b876:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b878:	460b      	mov	r3, r1
 801b87a:	6819      	ldr	r1, [r3, #0]
 801b87c:	2900      	cmp	r1, #0
 801b87e:	d1f8      	bne.n	801b872 <tcp_write+0x4b6>
    p->tot_len += extendlen;
 801b880:	891a      	ldrh	r2, [r3, #8]
 801b882:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b884:	4402      	add	r2, r0
 801b886:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801b888:	895a      	ldrh	r2, [r3, #10]
 801b88a:	4402      	add	r2, r0
 801b88c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801b88e:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b892:	4403      	add	r3, r0
 801b894:	f8ab 3008 	strh.w	r3, [fp, #8]
 801b898:	e7a5      	b.n	801b7e6 <tcp_write+0x42a>
    pcb->unsent = queue;
 801b89a:	f8c9 7068 	str.w	r7, [r9, #104]	; 0x68
 801b89e:	e7a7      	b.n	801b7f0 <tcp_write+0x434>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b8a0:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d1b5      	bne.n	801b814 <tcp_write+0x458>
 801b8a8:	4b0d      	ldr	r3, [pc, #52]	; (801b8e0 <tcp_write+0x524>)
 801b8aa:	f240 22ed 	movw	r2, #749	; 0x2ed
 801b8ae:	4911      	ldr	r1, [pc, #68]	; (801b8f4 <tcp_write+0x538>)
 801b8b0:	480d      	ldr	r0, [pc, #52]	; (801b8e8 <tcp_write+0x52c>)
 801b8b2:	f003 fd3e 	bl	801f332 <iprintf>
 801b8b6:	e7ad      	b.n	801b814 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b8b8:	4b09      	ldr	r3, [pc, #36]	; (801b8e0 <tcp_write+0x524>)
 801b8ba:	f240 3202 	movw	r2, #770	; 0x302
 801b8be:	490d      	ldr	r1, [pc, #52]	; (801b8f4 <tcp_write+0x538>)
 801b8c0:	4809      	ldr	r0, [pc, #36]	; (801b8e8 <tcp_write+0x52c>)
 801b8c2:	f003 fd36 	bl	801f332 <iprintf>
  return ERR_MEM;
 801b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b8ca:	9309      	str	r3, [sp, #36]	; 0x24
 801b8cc:	e746      	b.n	801b75c <tcp_write+0x3a0>
 801b8ce:	f04f 33ff 	mov.w	r3, #4294967295
 801b8d2:	9309      	str	r3, [sp, #36]	; 0x24
 801b8d4:	e742      	b.n	801b75c <tcp_write+0x3a0>
 801b8d6:	f04f 33ff 	mov.w	r3, #4294967295
 801b8da:	9309      	str	r3, [sp, #36]	; 0x24
 801b8dc:	e73e      	b.n	801b75c <tcp_write+0x3a0>
 801b8de:	bf00      	nop
 801b8e0:	080255d4 	.word	0x080255d4
 801b8e4:	08025530 	.word	0x08025530
 801b8e8:	08020b90 	.word	0x08020b90
 801b8ec:	08025544 	.word	0x08025544
 801b8f0:	0802557c 	.word	0x0802557c
 801b8f4:	080255b4 	.word	0x080255b4

0801b8f8 <tcp_enqueue_flags>:
{
 801b8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8fc:	b083      	sub	sp, #12
 801b8fe:	4604      	mov	r4, r0
 801b900:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b902:	f011 0703 	ands.w	r7, r1, #3
 801b906:	d030      	beq.n	801b96a <tcp_enqueue_flags+0x72>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801b908:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801b90c:	2b0a      	cmp	r3, #10
 801b90e:	d902      	bls.n	801b916 <tcp_enqueue_flags+0x1e>
 801b910:	f015 0f01 	tst.w	r5, #1
 801b914:	d031      	beq.n	801b97a <tcp_enqueue_flags+0x82>
  if (flags & TCP_SYN) {
 801b916:	f015 0f02 	tst.w	r5, #2
 801b91a:	d135      	bne.n	801b988 <tcp_enqueue_flags+0x90>
  u8_t optflags = 0;
 801b91c:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b920:	f1b9 0f00 	cmp.w	r9, #0
 801b924:	d033      	beq.n	801b98e <tcp_enqueue_flags+0x96>
 801b926:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b928:	b2b6      	uxth	r6, r6
 801b92a:	2200      	movs	r2, #0
 801b92c:	4631      	mov	r1, r6
 801b92e:	4610      	mov	r0, r2
 801b930:	f7fc fcea 	bl	8018308 <pbuf_alloc>
 801b934:	4680      	mov	r8, r0
 801b936:	b360      	cbz	r0, 801b992 <tcp_enqueue_flags+0x9a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b938:	8943      	ldrh	r3, [r0, #10]
 801b93a:	429e      	cmp	r6, r3
 801b93c:	d830      	bhi.n	801b9a0 <tcp_enqueue_flags+0xa8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b93e:	f8cd 9000 	str.w	r9, [sp]
 801b942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b944:	462a      	mov	r2, r5
 801b946:	4641      	mov	r1, r8
 801b948:	4620      	mov	r0, r4
 801b94a:	f7ff fc2f 	bl	801b1ac <tcp_create_segment>
 801b94e:	4606      	mov	r6, r0
 801b950:	b370      	cbz	r0, 801b9b0 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b952:	68c3      	ldr	r3, [r0, #12]
 801b954:	f013 0f03 	tst.w	r3, #3
 801b958:	d131      	bne.n	801b9be <tcp_enqueue_flags+0xc6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b95a:	8933      	ldrh	r3, [r6, #8]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d136      	bne.n	801b9ce <tcp_enqueue_flags+0xd6>
  if (pcb->unsent == NULL) {
 801b960:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801b962:	2a00      	cmp	r2, #0
 801b964:	d13c      	bne.n	801b9e0 <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 801b966:	66a6      	str	r6, [r4, #104]	; 0x68
 801b968:	e03e      	b.n	801b9e8 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b96a:	4b36      	ldr	r3, [pc, #216]	; (801ba44 <tcp_enqueue_flags+0x14c>)
 801b96c:	f240 321b 	movw	r2, #795	; 0x31b
 801b970:	4935      	ldr	r1, [pc, #212]	; (801ba48 <tcp_enqueue_flags+0x150>)
 801b972:	4836      	ldr	r0, [pc, #216]	; (801ba4c <tcp_enqueue_flags+0x154>)
 801b974:	f003 fcdd 	bl	801f332 <iprintf>
 801b978:	e7c6      	b.n	801b908 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 801b97a:	7ea3      	ldrb	r3, [r4, #26]
 801b97c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b980:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801b982:	f04f 30ff 	mov.w	r0, #4294967295
 801b986:	e04a      	b.n	801ba1e <tcp_enqueue_flags+0x126>
    optflags = TF_SEG_OPTS_MSS;
 801b988:	f04f 0901 	mov.w	r9, #1
 801b98c:	e7c8      	b.n	801b920 <tcp_enqueue_flags+0x28>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b98e:	2600      	movs	r6, #0
 801b990:	e7ca      	b.n	801b928 <tcp_enqueue_flags+0x30>
    pcb->flags |= TF_NAGLEMEMERR;
 801b992:	7ea3      	ldrb	r3, [r4, #26]
 801b994:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b998:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801b99a:	f04f 30ff 	mov.w	r0, #4294967295
 801b99e:	e03e      	b.n	801ba1e <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b9a0:	4b28      	ldr	r3, [pc, #160]	; (801ba44 <tcp_enqueue_flags+0x14c>)
 801b9a2:	f240 3241 	movw	r2, #833	; 0x341
 801b9a6:	492a      	ldr	r1, [pc, #168]	; (801ba50 <tcp_enqueue_flags+0x158>)
 801b9a8:	4828      	ldr	r0, [pc, #160]	; (801ba4c <tcp_enqueue_flags+0x154>)
 801b9aa:	f003 fcc2 	bl	801f332 <iprintf>
 801b9ae:	e7c6      	b.n	801b93e <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 801b9b0:	7ea3      	ldrb	r3, [r4, #26]
 801b9b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b9b6:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801b9b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b9bc:	e02f      	b.n	801ba1e <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b9be:	4b21      	ldr	r3, [pc, #132]	; (801ba44 <tcp_enqueue_flags+0x14c>)
 801b9c0:	f240 3249 	movw	r2, #841	; 0x349
 801b9c4:	4923      	ldr	r1, [pc, #140]	; (801ba54 <tcp_enqueue_flags+0x15c>)
 801b9c6:	4821      	ldr	r0, [pc, #132]	; (801ba4c <tcp_enqueue_flags+0x154>)
 801b9c8:	f003 fcb3 	bl	801f332 <iprintf>
 801b9cc:	e7c5      	b.n	801b95a <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b9ce:	4b1d      	ldr	r3, [pc, #116]	; (801ba44 <tcp_enqueue_flags+0x14c>)
 801b9d0:	f240 324a 	movw	r2, #842	; 0x34a
 801b9d4:	4920      	ldr	r1, [pc, #128]	; (801ba58 <tcp_enqueue_flags+0x160>)
 801b9d6:	481d      	ldr	r0, [pc, #116]	; (801ba4c <tcp_enqueue_flags+0x154>)
 801b9d8:	f003 fcab 	bl	801f332 <iprintf>
 801b9dc:	e7c0      	b.n	801b960 <tcp_enqueue_flags+0x68>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b9de:	461a      	mov	r2, r3
 801b9e0:	6813      	ldr	r3, [r2, #0]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d1fb      	bne.n	801b9de <tcp_enqueue_flags+0xe6>
    useg->next = seg;
 801b9e6:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b9ee:	b117      	cbz	r7, 801b9f6 <tcp_enqueue_flags+0xfe>
    pcb->snd_lbb++;
 801b9f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b9f2:	3301      	adds	r3, #1
 801b9f4:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 801b9f6:	f015 0f01 	tst.w	r5, #1
 801b9fa:	d003      	beq.n	801ba04 <tcp_enqueue_flags+0x10c>
    pcb->flags |= TF_FIN;
 801b9fc:	7ea3      	ldrb	r3, [r4, #26]
 801b9fe:	f043 0320 	orr.w	r3, r3, #32
 801ba02:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ba04:	6870      	ldr	r0, [r6, #4]
 801ba06:	f7fc fdd9 	bl	80185bc <pbuf_clen>
 801ba0a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801ba0e:	4418      	add	r0, r3
 801ba10:	b280      	uxth	r0, r0
 801ba12:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 801ba16:	b190      	cbz	r0, 801ba3e <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ba18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801ba1a:	b11b      	cbz	r3, 801ba24 <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 801ba1c:	2000      	movs	r0, #0
}
 801ba1e:	b003      	add	sp, #12
 801ba20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ba24:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801ba26:	b10b      	cbz	r3, 801ba2c <tcp_enqueue_flags+0x134>
  return ERR_OK;
 801ba28:	2000      	movs	r0, #0
 801ba2a:	e7f8      	b.n	801ba1e <tcp_enqueue_flags+0x126>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ba2c:	4b05      	ldr	r3, [pc, #20]	; (801ba44 <tcp_enqueue_flags+0x14c>)
 801ba2e:	f240 326d 	movw	r2, #877	; 0x36d
 801ba32:	490a      	ldr	r1, [pc, #40]	; (801ba5c <tcp_enqueue_flags+0x164>)
 801ba34:	4805      	ldr	r0, [pc, #20]	; (801ba4c <tcp_enqueue_flags+0x154>)
 801ba36:	f003 fc7c 	bl	801f332 <iprintf>
  return ERR_OK;
 801ba3a:	2000      	movs	r0, #0
 801ba3c:	e7ef      	b.n	801ba1e <tcp_enqueue_flags+0x126>
 801ba3e:	2000      	movs	r0, #0
 801ba40:	e7ed      	b.n	801ba1e <tcp_enqueue_flags+0x126>
 801ba42:	bf00      	nop
 801ba44:	080255d4 	.word	0x080255d4
 801ba48:	08025274 	.word	0x08025274
 801ba4c:	08020b90 	.word	0x08020b90
 801ba50:	080252cc 	.word	0x080252cc
 801ba54:	08025308 	.word	0x08025308
 801ba58:	08025320 	.word	0x08025320
 801ba5c:	0802534c 	.word	0x0802534c

0801ba60 <tcp_send_fin>:
{
 801ba60:	b570      	push	{r4, r5, r6, lr}
 801ba62:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 801ba64:	6e84      	ldr	r4, [r0, #104]	; 0x68
 801ba66:	b90c      	cbnz	r4, 801ba6c <tcp_send_fin+0xc>
 801ba68:	e00a      	b.n	801ba80 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 801ba6a:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ba6c:	6823      	ldr	r3, [r4, #0]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d1fb      	bne.n	801ba6a <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801ba72:	68e3      	ldr	r3, [r4, #12]
 801ba74:	8998      	ldrh	r0, [r3, #12]
 801ba76:	f7fa fb14 	bl	80160a2 <lwip_htons>
 801ba7a:	f010 0f07 	tst.w	r0, #7
 801ba7e:	d004      	beq.n	801ba8a <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ba80:	2101      	movs	r1, #1
 801ba82:	4628      	mov	r0, r5
 801ba84:	f7ff ff38 	bl	801b8f8 <tcp_enqueue_flags>
}
 801ba88:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ba8a:	68e6      	ldr	r6, [r4, #12]
 801ba8c:	89b4      	ldrh	r4, [r6, #12]
 801ba8e:	2001      	movs	r0, #1
 801ba90:	f7fa fb07 	bl	80160a2 <lwip_htons>
 801ba94:	4320      	orrs	r0, r4
 801ba96:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 801ba98:	7eab      	ldrb	r3, [r5, #26]
 801ba9a:	f043 0320 	orr.w	r3, r3, #32
 801ba9e:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 801baa0:	2000      	movs	r0, #0
 801baa2:	bd70      	pop	{r4, r5, r6, pc}

0801baa4 <tcp_send_empty_ack>:
{
 801baa4:	b570      	push	{r4, r5, r6, lr}
 801baa6:	b084      	sub	sp, #16
 801baa8:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801baaa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801baac:	f7fa fafc 	bl	80160a8 <lwip_htonl>
 801bab0:	4603      	mov	r3, r0
 801bab2:	2200      	movs	r2, #0
 801bab4:	4611      	mov	r1, r2
 801bab6:	4620      	mov	r0, r4
 801bab8:	f7ff fbd8 	bl	801b26c <tcp_output_alloc_header>
  if (p == NULL) {
 801babc:	b1e0      	cbz	r0, 801baf8 <tcp_send_empty_ack+0x54>
 801babe:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bac0:	1d25      	adds	r5, r4, #4
 801bac2:	4628      	mov	r0, r5
 801bac4:	f7fb f894 	bl	8016bf0 <ip4_route>
  if (netif == NULL) {
 801bac8:	b1e8      	cbz	r0, 801bb06 <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801baca:	7aa3      	ldrb	r3, [r4, #10]
 801bacc:	7a61      	ldrb	r1, [r4, #9]
 801bace:	9002      	str	r0, [sp, #8]
 801bad0:	2206      	movs	r2, #6
 801bad2:	9201      	str	r2, [sp, #4]
 801bad4:	9100      	str	r1, [sp, #0]
 801bad6:	462a      	mov	r2, r5
 801bad8:	4621      	mov	r1, r4
 801bada:	4630      	mov	r0, r6
 801badc:	f7fb fa26 	bl	8016f2c <ip4_output_if>
 801bae0:	4605      	mov	r5, r0
  pbuf_free(p);
 801bae2:	4630      	mov	r0, r6
 801bae4:	f7fc fba4 	bl	8018230 <pbuf_free>
  if (err != ERR_OK) {
 801bae8:	b985      	cbnz	r5, 801bb0c <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801baea:	7ea3      	ldrb	r3, [r4, #26]
 801baec:	f023 0303 	bic.w	r3, r3, #3
 801baf0:	76a3      	strb	r3, [r4, #26]
}
 801baf2:	4628      	mov	r0, r5
 801baf4:	b004      	add	sp, #16
 801baf6:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801baf8:	7ea3      	ldrb	r3, [r4, #26]
 801bafa:	f043 0303 	orr.w	r3, r3, #3
 801bafe:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 801bb00:	f06f 0501 	mvn.w	r5, #1
 801bb04:	e7f5      	b.n	801baf2 <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 801bb06:	f06f 0503 	mvn.w	r5, #3
 801bb0a:	e7ea      	b.n	801bae2 <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801bb0c:	7ea3      	ldrb	r3, [r4, #26]
 801bb0e:	f043 0303 	orr.w	r3, r3, #3
 801bb12:	76a3      	strb	r3, [r4, #26]
 801bb14:	e7ed      	b.n	801baf2 <tcp_send_empty_ack+0x4e>
	...

0801bb18 <tcp_output>:
{
 801bb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb1c:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801bb1e:	7d03      	ldrb	r3, [r0, #20]
 801bb20:	2b01      	cmp	r3, #1
 801bb22:	d01e      	beq.n	801bb62 <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 801bb24:	4ba5      	ldr	r3, [pc, #660]	; (801bdbc <tcp_output+0x2a4>)
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	429d      	cmp	r5, r3
 801bb2a:	f000 813e 	beq.w	801bdaa <tcp_output+0x292>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801bb2e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 801bb32:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 801bb36:	42bb      	cmp	r3, r7
 801bb38:	d200      	bcs.n	801bb3c <tcp_output+0x24>
 801bb3a:	461f      	mov	r7, r3
  seg = pcb->unsent;
 801bb3c:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 801bb3e:	7eab      	ldrb	r3, [r5, #26]
 801bb40:	f013 0f02 	tst.w	r3, #2
 801bb44:	d00a      	beq.n	801bb5c <tcp_output+0x44>
 801bb46:	b1a4      	cbz	r4, 801bb72 <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801bb48:	68e3      	ldr	r3, [r4, #12]
 801bb4a:	6858      	ldr	r0, [r3, #4]
 801bb4c:	f7fa faac 	bl	80160a8 <lwip_htonl>
 801bb50:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801bb52:	1ac3      	subs	r3, r0, r3
 801bb54:	8920      	ldrh	r0, [r4, #8]
 801bb56:	4403      	add	r3, r0
     (seg == NULL ||
 801bb58:	429f      	cmp	r7, r3
 801bb5a:	d30a      	bcc.n	801bb72 <tcp_output+0x5a>
  useg = pcb->unacked;
 801bb5c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 801bb5e:	b976      	cbnz	r6, 801bb7e <tcp_output+0x66>
 801bb60:	e010      	b.n	801bb84 <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801bb62:	4b97      	ldr	r3, [pc, #604]	; (801bdc0 <tcp_output+0x2a8>)
 801bb64:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801bb68:	4996      	ldr	r1, [pc, #600]	; (801bdc4 <tcp_output+0x2ac>)
 801bb6a:	4897      	ldr	r0, [pc, #604]	; (801bdc8 <tcp_output+0x2b0>)
 801bb6c:	f003 fbe1 	bl	801f332 <iprintf>
 801bb70:	e7d8      	b.n	801bb24 <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 801bb72:	4628      	mov	r0, r5
 801bb74:	f7ff ff96 	bl	801baa4 <tcp_send_empty_ack>
 801bb78:	4603      	mov	r3, r0
 801bb7a:	e03f      	b.n	801bbfc <tcp_output+0xe4>
    for (; useg->next != NULL; useg = useg->next);
 801bb7c:	461e      	mov	r6, r3
 801bb7e:	6833      	ldr	r3, [r6, #0]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d1fb      	bne.n	801bb7c <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bb84:	1d28      	adds	r0, r5, #4
 801bb86:	f7fb f833 	bl	8016bf0 <ip4_route>
  if (netif == NULL) {
 801bb8a:	4680      	mov	r8, r0
 801bb8c:	2800      	cmp	r0, #0
 801bb8e:	f000 810e 	beq.w	801bdae <tcp_output+0x296>
  if (ip_addr_isany(&pcb->local_ip)) {
 801bb92:	b10d      	cbz	r5, 801bb98 <tcp_output+0x80>
 801bb94:	682b      	ldr	r3, [r5, #0]
 801bb96:	b933      	cbnz	r3, 801bba6 <tcp_output+0x8e>
    if (local_ip == NULL) {
 801bb98:	f118 0f04 	cmn.w	r8, #4
 801bb9c:	f000 810a 	beq.w	801bdb4 <tcp_output+0x29c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801bba0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bba4:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 801bba6:	2c00      	cmp	r4, #0
 801bba8:	f000 80a2 	beq.w	801bcf0 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801bbac:	68e3      	ldr	r3, [r4, #12]
 801bbae:	6858      	ldr	r0, [r3, #4]
 801bbb0:	f7fa fa7a 	bl	80160a8 <lwip_htonl>
 801bbb4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801bbb6:	1ac3      	subs	r3, r0, r3
 801bbb8:	8920      	ldrh	r0, [r4, #8]
 801bbba:	4403      	add	r3, r0
  if (seg != NULL &&
 801bbbc:	429f      	cmp	r7, r3
 801bbbe:	f080 8097 	bcs.w	801bcf0 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801bbc2:	2f00      	cmp	r7, #0
 801bbc4:	f000 8094 	beq.w	801bcf0 <tcp_output+0x1d8>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801bbc8:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 801bbcc:	429f      	cmp	r7, r3
 801bbce:	f040 808f 	bne.w	801bcf0 <tcp_output+0x1d8>
 801bbd2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	f040 808b 	bne.w	801bcf0 <tcp_output+0x1d8>
    if (pcb->persist_backoff == 0) {
 801bbda:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 801bbde:	b923      	cbnz	r3, 801bbea <tcp_output+0xd2>
      pcb->persist_cnt = 0;
 801bbe0:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 801bbe4:	2301      	movs	r3, #1
 801bbe6:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  if (pcb->unsent == NULL) {
 801bbea:	6eab      	ldr	r3, [r5, #104]	; 0x68
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	f000 80d9 	beq.w	801bda4 <tcp_output+0x28c>
  pcb->flags &= ~TF_NAGLEMEMERR;
 801bbf2:	7eab      	ldrb	r3, [r5, #26]
 801bbf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bbf8:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 801bbfa:	2300      	movs	r3, #0
}
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("RST not expected here!",
 801bc02:	4b6f      	ldr	r3, [pc, #444]	; (801bdc0 <tcp_output+0x2a8>)
 801bc04:	f240 4246 	movw	r2, #1094	; 0x446
 801bc08:	4970      	ldr	r1, [pc, #448]	; (801bdcc <tcp_output+0x2b4>)
 801bc0a:	486f      	ldr	r0, [pc, #444]	; (801bdc8 <tcp_output+0x2b0>)
 801bc0c:	f003 fb91 	bl	801f332 <iprintf>
 801bc10:	e084      	b.n	801bd1c <tcp_output+0x204>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801bc12:	891a      	ldrh	r2, [r3, #8]
 801bc14:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801bc16:	429a      	cmp	r2, r3
 801bc18:	f080 8091 	bcs.w	801bd3e <tcp_output+0x226>
 801bc1c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	f000 808e 	beq.w	801bd42 <tcp_output+0x22a>
 801bc26:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 801bc2a:	2b0a      	cmp	r3, #10
 801bc2c:	f240 808b 	bls.w	801bd46 <tcp_output+0x22e>
 801bc30:	2301      	movs	r3, #1
 801bc32:	e002      	b.n	801bc3a <tcp_output+0x122>
 801bc34:	2301      	movs	r3, #1
 801bc36:	e000      	b.n	801bc3a <tcp_output+0x122>
 801bc38:	2301      	movs	r3, #1
 801bc3a:	b91b      	cbnz	r3, 801bc44 <tcp_output+0x12c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801bc3c:	7eab      	ldrb	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801bc3e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801bc42:	d0d2      	beq.n	801bbea <tcp_output+0xd2>
    if (pcb->state != SYN_SENT) {
 801bc44:	7d2b      	ldrb	r3, [r5, #20]
 801bc46:	2b02      	cmp	r3, #2
 801bc48:	d00a      	beq.n	801bc60 <tcp_output+0x148>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801bc4a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 801bc4e:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 801bc52:	2010      	movs	r0, #16
 801bc54:	f7fa fa25 	bl	80160a2 <lwip_htons>
 801bc58:	ea49 0000 	orr.w	r0, r9, r0
 801bc5c:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 801bc60:	4642      	mov	r2, r8
 801bc62:	4629      	mov	r1, r5
 801bc64:	4620      	mov	r0, r4
 801bc66:	f7ff fb4b 	bl	801b300 <tcp_output_segment>
    if (err != ERR_OK) {
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	2800      	cmp	r0, #0
 801bc6e:	d16c      	bne.n	801bd4a <tcp_output+0x232>
    pcb->unsent = seg->next;
 801bc70:	6823      	ldr	r3, [r4, #0]
 801bc72:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 801bc74:	7d2b      	ldrb	r3, [r5, #20]
 801bc76:	2b02      	cmp	r3, #2
 801bc78:	d003      	beq.n	801bc82 <tcp_output+0x16a>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801bc7a:	7eab      	ldrb	r3, [r5, #26]
 801bc7c:	f023 0303 	bic.w	r3, r3, #3
 801bc80:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bc82:	68e3      	ldr	r3, [r4, #12]
 801bc84:	6858      	ldr	r0, [r3, #4]
 801bc86:	f7fa fa0f 	bl	80160a8 <lwip_htonl>
 801bc8a:	4681      	mov	r9, r0
 801bc8c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 801bc90:	68e3      	ldr	r3, [r4, #12]
 801bc92:	8998      	ldrh	r0, [r3, #12]
 801bc94:	f7fa fa05 	bl	80160a2 <lwip_htons>
 801bc98:	f010 0f03 	tst.w	r0, #3
 801bc9c:	d05a      	beq.n	801bd54 <tcp_output+0x23c>
 801bc9e:	2001      	movs	r0, #1
 801bca0:	4450      	add	r0, sl
 801bca2:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bca4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801bca6:	1a1b      	subs	r3, r3, r0
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	db55      	blt.n	801bd58 <tcp_output+0x240>
    if (TCP_TCPLEN(seg) > 0) {
 801bcac:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 801bcb0:	68e3      	ldr	r3, [r4, #12]
 801bcb2:	8998      	ldrh	r0, [r3, #12]
 801bcb4:	f7fa f9f5 	bl	80160a2 <lwip_htons>
 801bcb8:	f010 0f03 	tst.w	r0, #3
 801bcbc:	d04e      	beq.n	801bd5c <tcp_output+0x244>
 801bcbe:	2301      	movs	r3, #1
 801bcc0:	eb13 0f09 	cmn.w	r3, r9
 801bcc4:	d06a      	beq.n	801bd9c <tcp_output+0x284>
      seg->next = NULL;
 801bcc6:	2300      	movs	r3, #0
 801bcc8:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 801bcca:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d047      	beq.n	801bd60 <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801bcd0:	68e3      	ldr	r3, [r4, #12]
 801bcd2:	6858      	ldr	r0, [r3, #4]
 801bcd4:	f7fa f9e8 	bl	80160a8 <lwip_htonl>
 801bcd8:	4681      	mov	r9, r0
 801bcda:	68f3      	ldr	r3, [r6, #12]
 801bcdc:	6858      	ldr	r0, [r3, #4]
 801bcde:	f7fa f9e3 	bl	80160a8 <lwip_htonl>
 801bce2:	eba9 0000 	sub.w	r0, r9, r0
 801bce6:	2800      	cmp	r0, #0
 801bce8:	db3d      	blt.n	801bd66 <tcp_output+0x24e>
          useg->next = seg;
 801bcea:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 801bcec:	4626      	mov	r6, r4
    seg = pcb->unsent;
 801bcee:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 801bcf0:	2c00      	cmp	r4, #0
 801bcf2:	f43f af7a 	beq.w	801bbea <tcp_output+0xd2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801bcf6:	68e3      	ldr	r3, [r4, #12]
 801bcf8:	6858      	ldr	r0, [r3, #4]
 801bcfa:	f7fa f9d5 	bl	80160a8 <lwip_htonl>
 801bcfe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801bd00:	1ac0      	subs	r0, r0, r3
 801bd02:	8923      	ldrh	r3, [r4, #8]
 801bd04:	4418      	add	r0, r3
  while (seg != NULL &&
 801bd06:	4287      	cmp	r7, r0
 801bd08:	f4ff af6f 	bcc.w	801bbea <tcp_output+0xd2>
    LWIP_ASSERT("RST not expected here!",
 801bd0c:	68e3      	ldr	r3, [r4, #12]
 801bd0e:	8998      	ldrh	r0, [r3, #12]
 801bd10:	f7fa f9c7 	bl	80160a2 <lwip_htons>
 801bd14:	f010 0f04 	tst.w	r0, #4
 801bd18:	f47f af73 	bne.w	801bc02 <tcp_output+0xea>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801bd1c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d088      	beq.n	801bc34 <tcp_output+0x11c>
 801bd22:	7eab      	ldrb	r3, [r5, #26]
 801bd24:	f013 0f44 	tst.w	r3, #68	; 0x44
 801bd28:	d186      	bne.n	801bc38 <tcp_output+0x120>
 801bd2a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	f43f af75 	beq.w	801bc1c <tcp_output+0x104>
 801bd32:	681a      	ldr	r2, [r3, #0]
 801bd34:	2a00      	cmp	r2, #0
 801bd36:	f43f af6c 	beq.w	801bc12 <tcp_output+0xfa>
 801bd3a:	2301      	movs	r3, #1
 801bd3c:	e77d      	b.n	801bc3a <tcp_output+0x122>
 801bd3e:	2301      	movs	r3, #1
 801bd40:	e77b      	b.n	801bc3a <tcp_output+0x122>
 801bd42:	2301      	movs	r3, #1
 801bd44:	e779      	b.n	801bc3a <tcp_output+0x122>
 801bd46:	2300      	movs	r3, #0
 801bd48:	e777      	b.n	801bc3a <tcp_output+0x122>
      pcb->flags |= TF_NAGLEMEMERR;
 801bd4a:	7eaa      	ldrb	r2, [r5, #26]
 801bd4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801bd50:	76aa      	strb	r2, [r5, #26]
      return err;
 801bd52:	e753      	b.n	801bbfc <tcp_output+0xe4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bd54:	2000      	movs	r0, #0
 801bd56:	e7a3      	b.n	801bca0 <tcp_output+0x188>
      pcb->snd_nxt = snd_nxt;
 801bd58:	64e8      	str	r0, [r5, #76]	; 0x4c
 801bd5a:	e7a7      	b.n	801bcac <tcp_output+0x194>
    if (TCP_TCPLEN(seg) > 0) {
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	e7af      	b.n	801bcc0 <tcp_output+0x1a8>
        pcb->unacked = seg;
 801bd60:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 801bd62:	4626      	mov	r6, r4
 801bd64:	e7c3      	b.n	801bcee <tcp_output+0x1d6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801bd66:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 801bd6a:	e001      	b.n	801bd70 <tcp_output+0x258>
              cur_seg = &((*cur_seg)->next );
 801bd6c:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 801bd70:	f8da 3000 	ldr.w	r3, [sl]
 801bd74:	b163      	cbz	r3, 801bd90 <tcp_output+0x278>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bd76:	68db      	ldr	r3, [r3, #12]
 801bd78:	6858      	ldr	r0, [r3, #4]
 801bd7a:	f7fa f995 	bl	80160a8 <lwip_htonl>
 801bd7e:	4681      	mov	r9, r0
 801bd80:	68e3      	ldr	r3, [r4, #12]
 801bd82:	6858      	ldr	r0, [r3, #4]
 801bd84:	f7fa f990 	bl	80160a8 <lwip_htonl>
 801bd88:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801bd8c:	2800      	cmp	r0, #0
 801bd8e:	dbed      	blt.n	801bd6c <tcp_output+0x254>
          seg->next = (*cur_seg);
 801bd90:	f8da 3000 	ldr.w	r3, [sl]
 801bd94:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 801bd96:	f8ca 4000 	str.w	r4, [sl]
 801bd9a:	e7a8      	b.n	801bcee <tcp_output+0x1d6>
      tcp_seg_free(seg);
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	f7fc ff2b 	bl	8018bf8 <tcp_seg_free>
 801bda2:	e7a4      	b.n	801bcee <tcp_output+0x1d6>
    pcb->unsent_oversize = 0;
 801bda4:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 801bda8:	e723      	b.n	801bbf2 <tcp_output+0xda>
    return ERR_OK;
 801bdaa:	2300      	movs	r3, #0
 801bdac:	e726      	b.n	801bbfc <tcp_output+0xe4>
    return ERR_RTE;
 801bdae:	f06f 0303 	mvn.w	r3, #3
 801bdb2:	e723      	b.n	801bbfc <tcp_output+0xe4>
      return ERR_RTE;
 801bdb4:	f06f 0303 	mvn.w	r3, #3
 801bdb8:	e720      	b.n	801bbfc <tcp_output+0xe4>
 801bdba:	bf00      	nop
 801bdbc:	2000ecc8 	.word	0x2000ecc8
 801bdc0:	080255d4 	.word	0x080255d4
 801bdc4:	08025374 	.word	0x08025374
 801bdc8:	08020b90 	.word	0x08020b90
 801bdcc:	0802539c 	.word	0x0802539c

0801bdd0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801bdd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bdd4:	b085      	sub	sp, #20
 801bdd6:	4680      	mov	r8, r0
 801bdd8:	460f      	mov	r7, r1
 801bdda:	4691      	mov	r9, r2
 801bddc:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801bdde:	2200      	movs	r2, #0
 801bde0:	2114      	movs	r1, #20
 801bde2:	2001      	movs	r0, #1
 801bde4:	f7fc fa90 	bl	8018308 <pbuf_alloc>
  if (p == NULL) {
 801bde8:	b3a8      	cbz	r0, 801be56 <tcp_rst+0x86>
 801bdea:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bdec:	8943      	ldrh	r3, [r0, #10]
 801bdee:	2b13      	cmp	r3, #19
 801bdf0:	d934      	bls.n	801be5c <tcp_rst+0x8c>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801bdf2:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 801bdf4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801bdf8:	f7fa f953 	bl	80160a2 <lwip_htons>
 801bdfc:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801bdfe:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801be02:	f7fa f94e 	bl	80160a2 <lwip_htons>
 801be06:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801be08:	4640      	mov	r0, r8
 801be0a:	f7fa f94d 	bl	80160a8 <lwip_htonl>
 801be0e:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801be10:	4638      	mov	r0, r7
 801be12:	f7fa f949 	bl	80160a8 <lwip_htonl>
 801be16:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801be18:	f245 0014 	movw	r0, #20500	; 0x5014
 801be1c:	f7fa f941 	bl	80160a2 <lwip_htons>
 801be20:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801be22:	2300      	movs	r3, #0
 801be24:	2210      	movs	r2, #16
 801be26:	73a2      	strb	r2, [r4, #14]
 801be28:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 801be2a:	7423      	strb	r3, [r4, #16]
 801be2c:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 801be2e:	74a3      	strb	r3, [r4, #18]
 801be30:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801be32:	4630      	mov	r0, r6
 801be34:	f7fa fedc 	bl	8016bf0 <ip4_route>
  if (netif != NULL) {
 801be38:	b150      	cbz	r0, 801be50 <tcp_rst+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801be3a:	9002      	str	r0, [sp, #8]
 801be3c:	2306      	movs	r3, #6
 801be3e:	9301      	str	r3, [sp, #4]
 801be40:	2300      	movs	r3, #0
 801be42:	9300      	str	r3, [sp, #0]
 801be44:	23ff      	movs	r3, #255	; 0xff
 801be46:	4632      	mov	r2, r6
 801be48:	4649      	mov	r1, r9
 801be4a:	4628      	mov	r0, r5
 801be4c:	f7fb f86e 	bl	8016f2c <ip4_output_if>
  }
  pbuf_free(p);
 801be50:	4628      	mov	r0, r5
 801be52:	f7fc f9ed 	bl	8018230 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801be56:	b005      	add	sp, #20
 801be58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801be5c:	4b03      	ldr	r3, [pc, #12]	; (801be6c <tcp_rst+0x9c>)
 801be5e:	f240 524d 	movw	r2, #1357	; 0x54d
 801be62:	4903      	ldr	r1, [pc, #12]	; (801be70 <tcp_rst+0xa0>)
 801be64:	4803      	ldr	r0, [pc, #12]	; (801be74 <tcp_rst+0xa4>)
 801be66:	f003 fa64 	bl	801f332 <iprintf>
 801be6a:	e7c2      	b.n	801bdf2 <tcp_rst+0x22>
 801be6c:	080255d4 	.word	0x080255d4
 801be70:	080253b4 	.word	0x080253b4
 801be74:	08020b90 	.word	0x08020b90

0801be78 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801be78:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 801be7a:	b10a      	cbz	r2, 801be80 <tcp_rexmit_rto+0x8>
{
 801be7c:	b508      	push	{r3, lr}
 801be7e:	e001      	b.n	801be84 <tcp_rexmit_rto+0xc>
 801be80:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801be82:	461a      	mov	r2, r3
 801be84:	6813      	ldr	r3, [r2, #0]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d1fb      	bne.n	801be82 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801be8a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801be8c:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801be8e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801be90:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801be92:	2300      	movs	r3, #0
 801be94:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801be96:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801be9a:	2bff      	cmp	r3, #255	; 0xff
 801be9c:	d002      	beq.n	801bea4 <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 801be9e:	3301      	adds	r3, #1
 801bea0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bea4:	2300      	movs	r3, #0
 801bea6:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801bea8:	f7ff fe36 	bl	801bb18 <tcp_output>
 801beac:	bd08      	pop	{r3, pc}

0801beae <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801beae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801beb0:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 801beb2:	b316      	cbz	r6, 801befa <tcp_rexmit+0x4c>
 801beb4:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 801beb6:	6833      	ldr	r3, [r6, #0]
 801beb8:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801beba:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 801bebe:	e000      	b.n	801bec2 <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801bec0:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801bec2:	682b      	ldr	r3, [r5, #0]
 801bec4:	b15b      	cbz	r3, 801bede <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bec6:	68db      	ldr	r3, [r3, #12]
 801bec8:	6858      	ldr	r0, [r3, #4]
 801beca:	f7fa f8ed 	bl	80160a8 <lwip_htonl>
 801bece:	4604      	mov	r4, r0
 801bed0:	68f3      	ldr	r3, [r6, #12]
 801bed2:	6858      	ldr	r0, [r3, #4]
 801bed4:	f7fa f8e8 	bl	80160a8 <lwip_htonl>
 801bed8:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 801beda:	2800      	cmp	r0, #0
 801bedc:	dbf0      	blt.n	801bec0 <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 801bede:	682b      	ldr	r3, [r5, #0]
 801bee0:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801bee2:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bee4:	6833      	ldr	r3, [r6, #0]
 801bee6:	b14b      	cbz	r3, 801befc <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bee8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801beec:	2bff      	cmp	r3, #255	; 0xff
 801beee:	d002      	beq.n	801bef6 <tcp_rexmit+0x48>
    ++pcb->nrtx;
 801bef0:	3301      	adds	r3, #1
 801bef2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801bef6:	2300      	movs	r3, #0
 801bef8:	637b      	str	r3, [r7, #52]	; 0x34
 801befa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801befc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801bf00:	e7f2      	b.n	801bee8 <tcp_rexmit+0x3a>

0801bf02 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bf02:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801bf04:	b11b      	cbz	r3, 801bf0e <tcp_rexmit_fast+0xc>
 801bf06:	7e83      	ldrb	r3, [r0, #26]
 801bf08:	f013 0f04 	tst.w	r3, #4
 801bf0c:	d000      	beq.n	801bf10 <tcp_rexmit_fast+0xe>
 801bf0e:	4770      	bx	lr
{
 801bf10:	b510      	push	{r4, lr}
 801bf12:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801bf14:	f7ff ffcb 	bl	801beae <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bf18:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801bf1c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 801bf20:	4293      	cmp	r3, r2
 801bf22:	d218      	bcs.n	801bf56 <tcp_rexmit_fast+0x54>
 801bf24:	085a      	lsrs	r2, r3, #1
 801bf26:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801bf2a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801bf2c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801bf30:	d202      	bcs.n	801bf38 <tcp_rexmit_fast+0x36>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801bf32:	005a      	lsls	r2, r3, #1
 801bf34:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bf38:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801bf3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf40:	fa12 f383 	uxtah	r3, r2, r3
 801bf44:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801bf48:	7ea3      	ldrb	r3, [r4, #26]
 801bf4a:	f043 0304 	orr.w	r3, r3, #4
 801bf4e:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801bf50:	2300      	movs	r3, #0
 801bf52:	8623      	strh	r3, [r4, #48]	; 0x30
 801bf54:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bf56:	0852      	lsrs	r2, r2, #1
 801bf58:	e7e5      	b.n	801bf26 <tcp_rexmit_fast+0x24>

0801bf5a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801bf5a:	b570      	push	{r4, r5, r6, lr}
 801bf5c:	b084      	sub	sp, #16
 801bf5e:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801bf60:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801bf62:	3801      	subs	r0, #1
 801bf64:	f7fa f8a0 	bl	80160a8 <lwip_htonl>
 801bf68:	4603      	mov	r3, r0
 801bf6a:	2200      	movs	r2, #0
 801bf6c:	4611      	mov	r1, r2
 801bf6e:	4620      	mov	r0, r4
 801bf70:	f7ff f97c 	bl	801b26c <tcp_output_alloc_header>
  if (p == NULL) {
 801bf74:	b1d0      	cbz	r0, 801bfac <tcp_keepalive+0x52>
 801bf76:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bf78:	1d26      	adds	r6, r4, #4
 801bf7a:	4630      	mov	r0, r6
 801bf7c:	f7fa fe38 	bl	8016bf0 <ip4_route>
  if (netif == NULL) {
 801bf80:	b188      	cbz	r0, 801bfa6 <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801bf82:	7aa3      	ldrb	r3, [r4, #10]
 801bf84:	9002      	str	r0, [sp, #8]
 801bf86:	2206      	movs	r2, #6
 801bf88:	9201      	str	r2, [sp, #4]
 801bf8a:	2200      	movs	r2, #0
 801bf8c:	9200      	str	r2, [sp, #0]
 801bf8e:	4632      	mov	r2, r6
 801bf90:	4621      	mov	r1, r4
 801bf92:	4628      	mov	r0, r5
 801bf94:	f7fa ffca 	bl	8016f2c <ip4_output_if>
 801bf98:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801bf9a:	4628      	mov	r0, r5
 801bf9c:	f7fc f948 	bl	8018230 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801bfa0:	4620      	mov	r0, r4
 801bfa2:	b004      	add	sp, #16
 801bfa4:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 801bfa6:	f06f 0403 	mvn.w	r4, #3
 801bfaa:	e7f6      	b.n	801bf9a <tcp_keepalive+0x40>
    return ERR_MEM;
 801bfac:	f04f 34ff 	mov.w	r4, #4294967295
 801bfb0:	e7f6      	b.n	801bfa0 <tcp_keepalive+0x46>

0801bfb2 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801bfb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfb6:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801bfb8:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 801bfba:	b175      	cbz	r5, 801bfda <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 801bfbc:	2d00      	cmp	r5, #0
 801bfbe:	d05d      	beq.n	801c07c <tcp_zero_window_probe+0xca>
 801bfc0:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801bfc2:	68eb      	ldr	r3, [r5, #12]
 801bfc4:	8998      	ldrh	r0, [r3, #12]
 801bfc6:	f7fa f86c 	bl	80160a2 <lwip_htons>
 801bfca:	f010 0f01 	tst.w	r0, #1
 801bfce:	d006      	beq.n	801bfde <tcp_zero_window_probe+0x2c>
 801bfd0:	892b      	ldrh	r3, [r5, #8]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d040      	beq.n	801c058 <tcp_zero_window_probe+0xa6>
 801bfd6:	2200      	movs	r2, #0
 801bfd8:	e002      	b.n	801bfe0 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 801bfda:	6e85      	ldr	r5, [r0, #104]	; 0x68
 801bfdc:	e7ee      	b.n	801bfbc <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801bfde:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801bfe0:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801bfe4:	68eb      	ldr	r3, [r5, #12]
 801bfe6:	685b      	ldr	r3, [r3, #4]
 801bfe8:	f082 0201 	eor.w	r2, r2, #1
 801bfec:	2100      	movs	r1, #0
 801bfee:	4620      	mov	r0, r4
 801bff0:	f7ff f93c 	bl	801b26c <tcp_output_alloc_header>
  if (p == NULL) {
 801bff4:	4607      	mov	r7, r0
 801bff6:	2800      	cmp	r0, #0
 801bff8:	d042      	beq.n	801c080 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801bffa:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 801bffe:	b36e      	cbz	r6, 801c05c <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c000:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 801c004:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 801c008:	b2b6      	uxth	r6, r6
 801c00a:	2011      	movs	r0, #17
 801c00c:	f7fa f849 	bl	80160a2 <lwip_htons>
 801c010:	4330      	orrs	r0, r6
 801c012:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c016:	68eb      	ldr	r3, [r5, #12]
 801c018:	6858      	ldr	r0, [r3, #4]
 801c01a:	f7fa f845 	bl	80160a8 <lwip_htonl>
 801c01e:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c020:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c022:	1a1b      	subs	r3, r3, r0
 801c024:	2b00      	cmp	r3, #0
 801c026:	db24      	blt.n	801c072 <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801c028:	1d25      	adds	r5, r4, #4
 801c02a:	4628      	mov	r0, r5
 801c02c:	f7fa fde0 	bl	8016bf0 <ip4_route>
  if (netif == NULL) {
 801c030:	b308      	cbz	r0, 801c076 <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801c032:	7aa3      	ldrb	r3, [r4, #10]
 801c034:	9002      	str	r0, [sp, #8]
 801c036:	2206      	movs	r2, #6
 801c038:	9201      	str	r2, [sp, #4]
 801c03a:	2200      	movs	r2, #0
 801c03c:	9200      	str	r2, [sp, #0]
 801c03e:	462a      	mov	r2, r5
 801c040:	4621      	mov	r1, r4
 801c042:	4638      	mov	r0, r7
 801c044:	f7fa ff72 	bl	8016f2c <ip4_output_if>
 801c048:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801c04a:	4638      	mov	r0, r7
 801c04c:	f7fc f8f0 	bl	8018230 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801c050:	4620      	mov	r0, r4
 801c052:	b004      	add	sp, #16
 801c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c058:	2201      	movs	r2, #1
 801c05a:	e7c1      	b.n	801bfe0 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c05c:	6868      	ldr	r0, [r5, #4]
 801c05e:	8903      	ldrh	r3, [r0, #8]
 801c060:	892a      	ldrh	r2, [r5, #8]
 801c062:	1a9b      	subs	r3, r3, r2
 801c064:	b29b      	uxth	r3, r3
 801c066:	2201      	movs	r2, #1
 801c068:	f108 0114 	add.w	r1, r8, #20
 801c06c:	f7fc fba2 	bl	80187b4 <pbuf_copy_partial>
 801c070:	e7d1      	b.n	801c016 <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 801c072:	64e0      	str	r0, [r4, #76]	; 0x4c
 801c074:	e7d8      	b.n	801c028 <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 801c076:	f06f 0403 	mvn.w	r4, #3
 801c07a:	e7e6      	b.n	801c04a <tcp_zero_window_probe+0x98>
    return ERR_OK;
 801c07c:	2400      	movs	r4, #0
 801c07e:	e7e7      	b.n	801c050 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 801c080:	f04f 34ff 	mov.w	r4, #4294967295
 801c084:	e7e4      	b.n	801c050 <tcp_zero_window_probe+0x9e>
	...

0801c088 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 801c088:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 801c08a:	4b0a      	ldr	r3, [pc, #40]	; (801c0b4 <sys_timeouts_sleeptime+0x2c>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	b15b      	cbz	r3, 801c0a8 <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 801c090:	f001 f908 	bl	801d2a4 <sys_now>
 801c094:	4b08      	ldr	r3, [pc, #32]	; (801c0b8 <sys_timeouts_sleeptime+0x30>)
 801c096:	681b      	ldr	r3, [r3, #0]
 801c098:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 801c09a:	4b06      	ldr	r3, [pc, #24]	; (801c0b4 <sys_timeouts_sleeptime+0x2c>)
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	685b      	ldr	r3, [r3, #4]
 801c0a0:	4298      	cmp	r0, r3
 801c0a2:	d804      	bhi.n	801c0ae <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 801c0a4:	1a18      	subs	r0, r3, r0
 801c0a6:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 801c0a8:	f04f 30ff 	mov.w	r0, #4294967295
 801c0ac:	bd08      	pop	{r3, pc}
    return 0;
 801c0ae:	2000      	movs	r0, #0
  }
}
 801c0b0:	bd08      	pop	{r3, pc}
 801c0b2:	bf00      	nop
 801c0b4:	20009500 	.word	0x20009500
 801c0b8:	20009508 	.word	0x20009508

0801c0bc <sys_check_timeouts>:
{
 801c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (next_timeout) {
 801c0be:	4b18      	ldr	r3, [pc, #96]	; (801c120 <sys_check_timeouts+0x64>)
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	b363      	cbz	r3, 801c11e <sys_check_timeouts+0x62>
    now = sys_now();
 801c0c4:	f001 f8ee 	bl	801d2a4 <sys_now>
    diff = now - timeouts_last_time;
 801c0c8:	4b16      	ldr	r3, [pc, #88]	; (801c124 <sys_check_timeouts+0x68>)
 801c0ca:	681c      	ldr	r4, [r3, #0]
 801c0cc:	1b04      	subs	r4, r0, r4
 801c0ce:	e005      	b.n	801c0dc <sys_check_timeouts+0x20>
      had_one = 0;
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	e002      	b.n	801c0da <sys_check_timeouts+0x1e>
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	e000      	b.n	801c0da <sys_check_timeouts+0x1e>
        had_one = 1;
 801c0d8:	2301      	movs	r3, #1
    } while (had_one);
 801c0da:	b303      	cbz	r3, 801c11e <sys_check_timeouts+0x62>
      tmptimeout = next_timeout;
 801c0dc:	4b10      	ldr	r3, [pc, #64]	; (801c120 <sys_check_timeouts+0x64>)
 801c0de:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801c0e0:	2900      	cmp	r1, #0
 801c0e2:	d0f5      	beq.n	801c0d0 <sys_check_timeouts+0x14>
 801c0e4:	684b      	ldr	r3, [r1, #4]
 801c0e6:	429c      	cmp	r4, r3
 801c0e8:	d3f4      	bcc.n	801c0d4 <sys_check_timeouts+0x18>
        timeouts_last_time += tmptimeout->time;
 801c0ea:	480e      	ldr	r0, [pc, #56]	; (801c124 <sys_check_timeouts+0x68>)
 801c0ec:	6802      	ldr	r2, [r0, #0]
 801c0ee:	441a      	add	r2, r3
 801c0f0:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 801c0f2:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 801c0f4:	680a      	ldr	r2, [r1, #0]
 801c0f6:	4b0a      	ldr	r3, [pc, #40]	; (801c120 <sys_check_timeouts+0x64>)
 801c0f8:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 801c0fa:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 801c0fc:	68cf      	ldr	r7, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c0fe:	2009      	movs	r0, #9
 801c100:	f7fb fec6 	bl	8017e90 <memp_free>
        if (handler != NULL) {
 801c104:	2d00      	cmp	r5, #0
 801c106:	d0e7      	beq.n	801c0d8 <sys_check_timeouts+0x1c>
          LOCK_TCPIP_CORE();
 801c108:	4e07      	ldr	r6, [pc, #28]	; (801c128 <sys_check_timeouts+0x6c>)
 801c10a:	4630      	mov	r0, r6
 801c10c:	f000 fa5b 	bl	801c5c6 <sys_mutex_lock>
          handler(arg);
 801c110:	4638      	mov	r0, r7
 801c112:	47a8      	blx	r5
          UNLOCK_TCPIP_CORE();
 801c114:	4630      	mov	r0, r6
 801c116:	f000 fa5d 	bl	801c5d4 <sys_mutex_unlock>
        had_one = 1;
 801c11a:	2301      	movs	r3, #1
 801c11c:	e7dd      	b.n	801c0da <sys_check_timeouts+0x1e>
 801c11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c120:	20009500 	.word	0x20009500
 801c124:	20009508 	.word	0x20009508
 801c128:	2000a24c 	.word	0x2000a24c

0801c12c <sys_timeout>:
{
 801c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c130:	4605      	mov	r5, r0
 801c132:	4688      	mov	r8, r1
 801c134:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c136:	2009      	movs	r0, #9
 801c138:	f7fb fe90 	bl	8017e5c <memp_malloc>
  if (timeout == NULL) {
 801c13c:	b308      	cbz	r0, 801c182 <sys_timeout+0x56>
 801c13e:	4604      	mov	r4, r0
  now = sys_now();
 801c140:	f001 f8b0 	bl	801d2a4 <sys_now>
  if (next_timeout == NULL) {
 801c144:	4b23      	ldr	r3, [pc, #140]	; (801c1d4 <sys_timeout+0xa8>)
 801c146:	681e      	ldr	r6, [r3, #0]
 801c148:	b31e      	cbz	r6, 801c192 <sys_timeout+0x66>
    diff = now - timeouts_last_time;
 801c14a:	4b23      	ldr	r3, [pc, #140]	; (801c1d8 <sys_timeout+0xac>)
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 801c150:	2300      	movs	r3, #0
 801c152:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 801c154:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 801c158:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 801c15a:	4428      	add	r0, r5
 801c15c:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 801c15e:	b1e6      	cbz	r6, 801c19a <sys_timeout+0x6e>
  if (next_timeout->time > msecs) {
 801c160:	6873      	ldr	r3, [r6, #4]
 801c162:	429d      	cmp	r5, r3
 801c164:	d31d      	bcc.n	801c1a2 <sys_timeout+0x76>
 801c166:	4632      	mov	r2, r6
    for (t = next_timeout; t != NULL; t = t->next) {
 801c168:	2a00      	cmp	r2, #0
 801c16a:	d030      	beq.n	801c1ce <sys_timeout+0xa2>
      timeout->time -= t->time;
 801c16c:	6851      	ldr	r1, [r2, #4]
 801c16e:	6863      	ldr	r3, [r4, #4]
 801c170:	1a5b      	subs	r3, r3, r1
 801c172:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801c174:	6811      	ldr	r1, [r2, #0]
 801c176:	b1d9      	cbz	r1, 801c1b0 <sys_timeout+0x84>
 801c178:	6848      	ldr	r0, [r1, #4]
 801c17a:	4283      	cmp	r3, r0
 801c17c:	d318      	bcc.n	801c1b0 <sys_timeout+0x84>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c17e:	460a      	mov	r2, r1
 801c180:	e7f2      	b.n	801c168 <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c182:	4b16      	ldr	r3, [pc, #88]	; (801c1dc <sys_timeout+0xb0>)
 801c184:	22d4      	movs	r2, #212	; 0xd4
 801c186:	4916      	ldr	r1, [pc, #88]	; (801c1e0 <sys_timeout+0xb4>)
 801c188:	4816      	ldr	r0, [pc, #88]	; (801c1e4 <sys_timeout+0xb8>)
 801c18a:	f003 f8d2 	bl	801f332 <iprintf>
 801c18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 801c192:	4b11      	ldr	r3, [pc, #68]	; (801c1d8 <sys_timeout+0xac>)
 801c194:	6018      	str	r0, [r3, #0]
    diff = 0;
 801c196:	2000      	movs	r0, #0
 801c198:	e7da      	b.n	801c150 <sys_timeout+0x24>
    next_timeout = timeout;
 801c19a:	4b0e      	ldr	r3, [pc, #56]	; (801c1d4 <sys_timeout+0xa8>)
 801c19c:	601c      	str	r4, [r3, #0]
    return;
 801c19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 801c1a2:	1b5d      	subs	r5, r3, r5
 801c1a4:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 801c1a6:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 801c1a8:	4b0a      	ldr	r3, [pc, #40]	; (801c1d4 <sys_timeout+0xa8>)
 801c1aa:	601c      	str	r4, [r3, #0]
 801c1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (t->next != NULL) {
 801c1b0:	b139      	cbz	r1, 801c1c2 <sys_timeout+0x96>
          t->next->time -= timeout->time;
 801c1b2:	6848      	ldr	r0, [r1, #4]
 801c1b4:	1ac3      	subs	r3, r0, r3
 801c1b6:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 801c1b8:	6813      	ldr	r3, [r2, #0]
 801c1ba:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 801c1bc:	6014      	str	r4, [r2, #0]
        break;
 801c1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if (timeout->time > msecs) {
 801c1c2:	429d      	cmp	r5, r3
 801c1c4:	d2f8      	bcs.n	801c1b8 <sys_timeout+0x8c>
          timeout->time = msecs + next_timeout->time;
 801c1c6:	6873      	ldr	r3, [r6, #4]
 801c1c8:	441d      	add	r5, r3
 801c1ca:	6065      	str	r5, [r4, #4]
 801c1cc:	e7f4      	b.n	801c1b8 <sys_timeout+0x8c>
 801c1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1d2:	bf00      	nop
 801c1d4:	20009500 	.word	0x20009500
 801c1d8:	20009508 	.word	0x20009508
 801c1dc:	08025690 	.word	0x08025690
 801c1e0:	080256c4 	.word	0x080256c4
 801c1e4:	08020b90 	.word	0x08020b90

0801c1e8 <tcp_timer_needed>:
{
 801c1e8:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c1ea:	4b0a      	ldr	r3, [pc, #40]	; (801c214 <tcp_timer_needed+0x2c>)
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	b953      	cbnz	r3, 801c206 <tcp_timer_needed+0x1e>
 801c1f0:	4b09      	ldr	r3, [pc, #36]	; (801c218 <tcp_timer_needed+0x30>)
 801c1f2:	681b      	ldr	r3, [r3, #0]
 801c1f4:	b143      	cbz	r3, 801c208 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 801c1f6:	2201      	movs	r2, #1
 801c1f8:	4b06      	ldr	r3, [pc, #24]	; (801c214 <tcp_timer_needed+0x2c>)
 801c1fa:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c1fc:	2200      	movs	r2, #0
 801c1fe:	4907      	ldr	r1, [pc, #28]	; (801c21c <tcp_timer_needed+0x34>)
 801c200:	20fa      	movs	r0, #250	; 0xfa
 801c202:	f7ff ff93 	bl	801c12c <sys_timeout>
 801c206:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c208:	4b05      	ldr	r3, [pc, #20]	; (801c220 <tcp_timer_needed+0x38>)
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d1f2      	bne.n	801c1f6 <tcp_timer_needed+0xe>
 801c210:	e7f9      	b.n	801c206 <tcp_timer_needed+0x1e>
 801c212:	bf00      	nop
 801c214:	20009504 	.word	0x20009504
 801c218:	2000ecb4 	.word	0x2000ecb4
 801c21c:	0801c225 	.word	0x0801c225
 801c220:	2000ecc4 	.word	0x2000ecc4

0801c224 <tcpip_tcp_timer>:
{
 801c224:	b508      	push	{r3, lr}
  tcp_tmr();
 801c226:	f7fd f93b 	bl	80194a0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c22a:	4b08      	ldr	r3, [pc, #32]	; (801c24c <tcpip_tcp_timer+0x28>)
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	b12b      	cbz	r3, 801c23c <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c230:	2200      	movs	r2, #0
 801c232:	4907      	ldr	r1, [pc, #28]	; (801c250 <tcpip_tcp_timer+0x2c>)
 801c234:	20fa      	movs	r0, #250	; 0xfa
 801c236:	f7ff ff79 	bl	801c12c <sys_timeout>
 801c23a:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c23c:	4b05      	ldr	r3, [pc, #20]	; (801c254 <tcpip_tcp_timer+0x30>)
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d1f5      	bne.n	801c230 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801c244:	2200      	movs	r2, #0
 801c246:	4b04      	ldr	r3, [pc, #16]	; (801c258 <tcpip_tcp_timer+0x34>)
 801c248:	601a      	str	r2, [r3, #0]
 801c24a:	bd08      	pop	{r3, pc}
 801c24c:	2000ecb4 	.word	0x2000ecb4
 801c250:	0801c225 	.word	0x0801c225
 801c254:	2000ecc4 	.word	0x2000ecc4
 801c258:	20009504 	.word	0x20009504

0801c25c <sys_timeouts_init>:
{
 801c25c:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c25e:	2401      	movs	r4, #1
 801c260:	e008      	b.n	801c274 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801c262:	4b08      	ldr	r3, [pc, #32]	; (801c284 <sys_timeouts_init+0x28>)
 801c264:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 801c268:	4907      	ldr	r1, [pc, #28]	; (801c288 <sys_timeouts_init+0x2c>)
 801c26a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 801c26e:	f7ff ff5d 	bl	801c12c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c272:	3401      	adds	r4, #1
 801c274:	2c02      	cmp	r4, #2
 801c276:	d9f4      	bls.n	801c262 <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 801c278:	f001 f814 	bl	801d2a4 <sys_now>
 801c27c:	4b03      	ldr	r3, [pc, #12]	; (801c28c <sys_timeouts_init+0x30>)
 801c27e:	6018      	str	r0, [r3, #0]
 801c280:	bd10      	pop	{r4, pc}
 801c282:	bf00      	nop
 801c284:	08025678 	.word	0x08025678
 801c288:	0801c291 	.word	0x0801c291
 801c28c:	20009508 	.word	0x20009508

0801c290 <cyclic_timer>:
{
 801c290:	b510      	push	{r4, lr}
 801c292:	4604      	mov	r4, r0
  cyclic->handler();
 801c294:	6843      	ldr	r3, [r0, #4]
 801c296:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801c298:	4622      	mov	r2, r4
 801c29a:	4902      	ldr	r1, [pc, #8]	; (801c2a4 <cyclic_timer+0x14>)
 801c29c:	6820      	ldr	r0, [r4, #0]
 801c29e:	f7ff ff45 	bl	801c12c <sys_timeout>
 801c2a2:	bd10      	pop	{r4, pc}
 801c2a4:	0801c291 	.word	0x0801c291

0801c2a8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801c2a8:	b538      	push	{r3, r4, r5, lr}
 801c2aa:	4604      	mov	r4, r0
 801c2ac:	460d      	mov	r5, r1
 801c2ae:	e007      	b.n	801c2c0 <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 801c2b0:	2200      	movs	r2, #0
 801c2b2:	4629      	mov	r1, r5
 801c2b4:	4620      	mov	r0, r4
 801c2b6:	f000 f8d6 	bl	801c466 <sys_arch_mbox_fetch>
    return;
 801c2ba:	bd38      	pop	{r3, r4, r5, pc}

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801c2bc:	f7ff fefe 	bl	801c0bc <sys_check_timeouts>
  if (!next_timeout) {
 801c2c0:	4b08      	ldr	r3, [pc, #32]	; (801c2e4 <sys_timeouts_mbox_fetch+0x3c>)
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d0f3      	beq.n	801c2b0 <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 801c2c8:	f7ff fede 	bl	801c088 <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801c2cc:	4602      	mov	r2, r0
 801c2ce:	2800      	cmp	r0, #0
 801c2d0:	d0f4      	beq.n	801c2bc <sys_timeouts_mbox_fetch+0x14>
 801c2d2:	4629      	mov	r1, r5
 801c2d4:	4620      	mov	r0, r4
 801c2d6:	f000 f8c6 	bl	801c466 <sys_arch_mbox_fetch>
 801c2da:	f1b0 3fff 	cmp.w	r0, #4294967295
 801c2de:	d0ed      	beq.n	801c2bc <sys_timeouts_mbox_fetch+0x14>
 801c2e0:	bd38      	pop	{r3, r4, r5, pc}
 801c2e2:	bf00      	nop
 801c2e4:	20009500 	.word	0x20009500

0801c2e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2ea:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801c2ec:	8945      	ldrh	r5, [r0, #10]
 801c2ee:	2d0e      	cmp	r5, #14
 801c2f0:	d916      	bls.n	801c320 <ethernet_input+0x38>
 801c2f2:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c2f4:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c2f6:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c2f8:	7803      	ldrb	r3, [r0, #0]
 801c2fa:	f013 0f01 	tst.w	r3, #1
 801c2fe:	d00a      	beq.n	801c316 <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c300:	2b01      	cmp	r3, #1
 801c302:	d012      	beq.n	801c32a <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c304:	2206      	movs	r2, #6
 801c306:	4921      	ldr	r1, [pc, #132]	; (801c38c <ethernet_input+0xa4>)
 801c308:	f003 fe48 	bl	801ff9c <memcmp>
 801c30c:	b918      	cbnz	r0, 801c316 <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c30e:	7b63      	ldrb	r3, [r4, #13]
 801c310:	f043 0308 	orr.w	r3, r3, #8
 801c314:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801c316:	2e08      	cmp	r6, #8
 801c318:	d012      	beq.n	801c340 <ethernet_input+0x58>
 801c31a:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801c31e:	d022      	beq.n	801c366 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801c320:	4620      	mov	r0, r4
 801c322:	f7fb ff85 	bl	8018230 <pbuf_free>
  return ERR_OK;
}
 801c326:	2000      	movs	r0, #0
 801c328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c32a:	7843      	ldrb	r3, [r0, #1]
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d1f2      	bne.n	801c316 <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c330:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c332:	2b5e      	cmp	r3, #94	; 0x5e
 801c334:	d1ef      	bne.n	801c316 <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 801c336:	7b63      	ldrb	r3, [r4, #13]
 801c338:	f043 0310 	orr.w	r3, r3, #16
 801c33c:	7363      	strb	r3, [r4, #13]
 801c33e:	e7ea      	b.n	801c316 <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c340:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c344:	f013 0f08 	tst.w	r3, #8
 801c348:	d0ea      	beq.n	801c320 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801c34a:	2d0d      	cmp	r5, #13
 801c34c:	dde8      	ble.n	801c320 <ethernet_input+0x38>
 801c34e:	f06f 010d 	mvn.w	r1, #13
 801c352:	4620      	mov	r0, r4
 801c354:	f7fb ff62 	bl	801821c <pbuf_header>
 801c358:	2800      	cmp	r0, #0
 801c35a:	d1e1      	bne.n	801c320 <ethernet_input+0x38>
        ip4_input(p, netif);
 801c35c:	4639      	mov	r1, r7
 801c35e:	4620      	mov	r0, r4
 801c360:	f7fa fc96 	bl	8016c90 <ip4_input>
      break;
 801c364:	e7df      	b.n	801c326 <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c36a:	f013 0f08 	tst.w	r3, #8
 801c36e:	d0d7      	beq.n	801c320 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801c370:	2d0d      	cmp	r5, #13
 801c372:	ddd5      	ble.n	801c320 <ethernet_input+0x38>
 801c374:	f06f 010d 	mvn.w	r1, #13
 801c378:	4620      	mov	r0, r4
 801c37a:	f7fb ff4f 	bl	801821c <pbuf_header>
 801c37e:	2800      	cmp	r0, #0
 801c380:	d1ce      	bne.n	801c320 <ethernet_input+0x38>
        etharp_input(p, netif);
 801c382:	4639      	mov	r1, r7
 801c384:	4620      	mov	r0, r4
 801c386:	f7fa f89d 	bl	80164c4 <etharp_input>
      break;
 801c38a:	e7cc      	b.n	801c326 <ethernet_input+0x3e>
 801c38c:	08025704 	.word	0x08025704

0801c390 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801c390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c394:	4605      	mov	r5, r0
 801c396:	460c      	mov	r4, r1
 801c398:	4616      	mov	r6, r2
 801c39a:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c39c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801c3a0:	f7f9 fe7f 	bl	80160a2 <lwip_htons>
 801c3a4:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801c3a6:	210e      	movs	r1, #14
 801c3a8:	4620      	mov	r0, r4
 801c3aa:	f7fb ff37 	bl	801821c <pbuf_header>
 801c3ae:	b9e0      	cbnz	r0, 801c3ea <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801c3b0:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 801c3b2:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801c3b6:	683a      	ldr	r2, [r7, #0]
 801c3b8:	601a      	str	r2, [r3, #0]
 801c3ba:	88ba      	ldrh	r2, [r7, #4]
 801c3bc:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 801c3be:	6832      	ldr	r2, [r6, #0]
 801c3c0:	f8c3 2006 	str.w	r2, [r3, #6]
 801c3c4:	88b2      	ldrh	r2, [r6, #4]
 801c3c6:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c3c8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801c3cc:	2b06      	cmp	r3, #6
 801c3ce:	d006      	beq.n	801c3de <ethernet_output+0x4e>
 801c3d0:	4b08      	ldr	r3, [pc, #32]	; (801c3f4 <ethernet_output+0x64>)
 801c3d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801c3d6:	4908      	ldr	r1, [pc, #32]	; (801c3f8 <ethernet_output+0x68>)
 801c3d8:	4808      	ldr	r0, [pc, #32]	; (801c3fc <ethernet_output+0x6c>)
 801c3da:	f002 ffaa 	bl	801f332 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c3de:	69ab      	ldr	r3, [r5, #24]
 801c3e0:	4621      	mov	r1, r4
 801c3e2:	4628      	mov	r0, r5
 801c3e4:	4798      	blx	r3
 801c3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c3ea:	f06f 0001 	mvn.w	r0, #1
}
 801c3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3f2:	bf00      	nop
 801c3f4:	0802570c 	.word	0x0802570c
 801c3f8:	08025744 	.word	0x08025744
 801c3fc:	08020b90 	.word	0x08020b90

0801c400 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c400:	b510      	push	{r4, lr}
 801c402:	b084      	sub	sp, #16
 801c404:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 801c406:	9100      	str	r1, [sp, #0]
 801c408:	2304      	movs	r3, #4
 801c40a:	9301      	str	r3, [sp, #4]
 801c40c:	2100      	movs	r1, #0
 801c40e:	9102      	str	r1, [sp, #8]
 801c410:	9103      	str	r1, [sp, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c412:	4668      	mov	r0, sp
 801c414:	f7f6 fc6c 	bl	8012cf0 <osMessageCreate>
 801c418:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801c41a:	b110      	cbz	r0, 801c422 <sys_mbox_new+0x22>
  return ERR_MEM;
 
 return ERR_OK;
 801c41c:	2000      	movs	r0, #0
}
 801c41e:	b004      	add	sp, #16
 801c420:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 801c422:	f04f 30ff 	mov.w	r0, #4294967295
 801c426:	e7fa      	b.n	801c41e <sys_mbox_new+0x1e>

0801c428 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c428:	b510      	push	{r4, lr}
 801c42a:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 801c42c:	6800      	ldr	r0, [r0, #0]
 801c42e:	f7f6 fcf7 	bl	8012e20 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 801c432:	6820      	ldr	r0, [r4, #0]
 801c434:	f7f6 fd01 	bl	8012e3a <osMessageDelete>
 801c438:	bd10      	pop	{r4, pc}

0801c43a <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801c43a:	b538      	push	{r3, r4, r5, lr}
 801c43c:	4605      	mov	r5, r0
 801c43e:	460c      	mov	r4, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801c440:	f04f 32ff 	mov.w	r2, #4294967295
 801c444:	4621      	mov	r1, r4
 801c446:	6828      	ldr	r0, [r5, #0]
 801c448:	f7f6 fc66 	bl	8012d18 <osMessagePut>
 801c44c:	2800      	cmp	r0, #0
 801c44e:	d1f7      	bne.n	801c440 <sys_mbox_post+0x6>
}
 801c450:	bd38      	pop	{r3, r4, r5, pc}

0801c452 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c452:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c454:	2200      	movs	r2, #0
 801c456:	6800      	ldr	r0, [r0, #0]
 801c458:	f7f6 fc5e 	bl	8012d18 <osMessagePut>
 801c45c:	b900      	cbnz	r0, 801c460 <sys_mbox_trypost+0xe>
#endif /* SYS_STATS */
			
   }

   return result;
}
 801c45e:	bd08      	pop	{r3, pc}
      result = ERR_MEM;
 801c460:	f04f 30ff 	mov.w	r0, #4294967295
 801c464:	e7fb      	b.n	801c45e <sys_mbox_trypost+0xc>

0801c466 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c466:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c468:	b089      	sub	sp, #36	; 0x24
 801c46a:	4606      	mov	r6, r0
 801c46c:	460f      	mov	r7, r1
 801c46e:	4615      	mov	r5, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801c470:	f7f6 fae9 	bl	8012a46 <osKernelSysTick>
 801c474:	4604      	mov	r4, r0
  
  if(timeout != 0)
 801c476:	b185      	cbz	r5, 801c49a <sys_arch_mbox_fetch+0x34>
  { 
    event = osMessageGet (*mbox, timeout);
 801c478:	462a      	mov	r2, r5
 801c47a:	6831      	ldr	r1, [r6, #0]
 801c47c:	a805      	add	r0, sp, #20
 801c47e:	f7f6 fc7f 	bl	8012d80 <osMessageGet>
    
    if(event.status == osEventMessage)
 801c482:	9b05      	ldr	r3, [sp, #20]
 801c484:	2b10      	cmp	r3, #16
 801c486:	d002      	beq.n	801c48e <sys_arch_mbox_fetch+0x28>
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c488:	f04f 30ff 	mov.w	r0, #4294967295
 801c48c:	e015      	b.n	801c4ba <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 801c48e:	9b06      	ldr	r3, [sp, #24]
 801c490:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 801c492:	f7f6 fad8 	bl	8012a46 <osKernelSysTick>
 801c496:	1b00      	subs	r0, r0, r4
 801c498:	e00f      	b.n	801c4ba <sys_arch_mbox_fetch+0x54>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801c49a:	f04f 32ff 	mov.w	r2, #4294967295
 801c49e:	6831      	ldr	r1, [r6, #0]
 801c4a0:	4668      	mov	r0, sp
 801c4a2:	f7f6 fc6d 	bl	8012d80 <osMessageGet>
 801c4a6:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 801c4aa:	ab08      	add	r3, sp, #32
 801c4ac:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c4b0:	9b06      	ldr	r3, [sp, #24]
 801c4b2:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 801c4b4:	f7f6 fac7 	bl	8012a46 <osKernelSysTick>
 801c4b8:	1b00      	subs	r0, r0, r4
  }
}
 801c4ba:	b009      	add	sp, #36	; 0x24
 801c4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c4be <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c4be:	b510      	push	{r4, lr}
 801c4c0:	b084      	sub	sp, #16
 801c4c2:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 801c4c4:	2200      	movs	r2, #0
 801c4c6:	6801      	ldr	r1, [r0, #0]
 801c4c8:	a801      	add	r0, sp, #4
 801c4ca:	f7f6 fc59 	bl	8012d80 <osMessageGet>
  
  if(event.status == osEventMessage)
 801c4ce:	9b01      	ldr	r3, [sp, #4]
 801c4d0:	2b10      	cmp	r3, #16
 801c4d2:	d003      	beq.n	801c4dc <sys_arch_mbox_tryfetch+0x1e>
    *msg = (void *)event.value.v;
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c4d4:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 801c4d8:	b004      	add	sp, #16
 801c4da:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 801c4dc:	9b02      	ldr	r3, [sp, #8]
 801c4de:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 801c4e0:	2000      	movs	r0, #0
 801c4e2:	e7f9      	b.n	801c4d8 <sys_arch_mbox_tryfetch+0x1a>

0801c4e4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
  if (*mbox == SYS_MBOX_NULL) 
 801c4e4:	6803      	ldr	r3, [r0, #0]
 801c4e6:	b10b      	cbz	r3, 801c4ec <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 801c4e8:	2001      	movs	r0, #1
}                                             
 801c4ea:	4770      	bx	lr
    return 0;
 801c4ec:	2000      	movs	r0, #0
 801c4ee:	4770      	bx	lr

0801c4f0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
  *mbox = SYS_MBOX_NULL;                      
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	6003      	str	r3, [r0, #0]
 801c4f4:	4770      	bx	lr

0801c4f6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c4f6:	b530      	push	{r4, r5, lr}
 801c4f8:	b083      	sub	sp, #12
 801c4fa:	4604      	mov	r4, r0
 801c4fc:	460d      	mov	r5, r1
  osSemaphoreDef(SEM);
 801c4fe:	2300      	movs	r3, #0
 801c500:	9300      	str	r3, [sp, #0]
 801c502:	9301      	str	r3, [sp, #4]

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c504:	2101      	movs	r1, #1
 801c506:	4668      	mov	r0, sp
 801c508:	f7f6 fb58 	bl	8012bbc <osSemaphoreCreate>
 801c50c:	6020      	str	r0, [r4, #0]
	
  if(*sem == NULL)
 801c50e:	b140      	cbz	r0, 801c522 <sys_sem_new+0x2c>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 801c510:	b115      	cbz	r5, 801c518 <sys_sem_new+0x22>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 801c512:	2000      	movs	r0, #0
}
 801c514:	b003      	add	sp, #12
 801c516:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem,0);
 801c518:	2100      	movs	r1, #0
 801c51a:	f7f6 fb75 	bl	8012c08 <osSemaphoreWait>
	return ERR_OK;
 801c51e:	2000      	movs	r0, #0
 801c520:	e7f8      	b.n	801c514 <sys_sem_new+0x1e>
		return ERR_MEM;
 801c522:	f04f 30ff 	mov.w	r0, #4294967295
 801c526:	e7f5      	b.n	801c514 <sys_sem_new+0x1e>

0801c528 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c528:	b570      	push	{r4, r5, r6, lr}
 801c52a:	4604      	mov	r4, r0
 801c52c:	460e      	mov	r6, r1
  uint32_t starttime = osKernelSysTick();
 801c52e:	f7f6 fa8a 	bl	8012a46 <osKernelSysTick>
 801c532:	4605      	mov	r5, r0
  
  if(timeout != 0)
 801c534:	b956      	cbnz	r6, 801c54c <sys_arch_sem_wait+0x24>
      return SYS_ARCH_TIMEOUT;
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c536:	f04f 31ff 	mov.w	r1, #4294967295
 801c53a:	6820      	ldr	r0, [r4, #0]
 801c53c:	f7f6 fb64 	bl	8012c08 <osSemaphoreWait>
 801c540:	2800      	cmp	r0, #0
 801c542:	d1f8      	bne.n	801c536 <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 801c544:	f7f6 fa7f 	bl	8012a46 <osKernelSysTick>
 801c548:	1b40      	subs	r0, r0, r5
 801c54a:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c54c:	4631      	mov	r1, r6
 801c54e:	6820      	ldr	r0, [r4, #0]
 801c550:	f7f6 fb5a 	bl	8012c08 <osSemaphoreWait>
 801c554:	b110      	cbz	r0, 801c55c <sys_arch_sem_wait+0x34>
      return SYS_ARCH_TIMEOUT;
 801c556:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 801c55a:	bd70      	pop	{r4, r5, r6, pc}
      return (osKernelSysTick() - starttime);
 801c55c:	f7f6 fa73 	bl	8012a46 <osKernelSysTick>
 801c560:	1b40      	subs	r0, r0, r5
 801c562:	bd70      	pop	{r4, r5, r6, pc}

0801c564 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c564:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 801c566:	6800      	ldr	r0, [r0, #0]
 801c568:	f7f6 fb88 	bl	8012c7c <osSemaphoreRelease>
 801c56c:	bd08      	pop	{r3, pc}

0801c56e <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c56e:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 801c570:	6800      	ldr	r0, [r0, #0]
 801c572:	f7f6 fbb1 	bl	8012cd8 <osSemaphoreDelete>
 801c576:	bd08      	pop	{r3, pc}

0801c578 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 801c578:	6803      	ldr	r3, [r0, #0]
 801c57a:	b10b      	cbz	r3, 801c580 <sys_sem_valid+0x8>
    return 0;
  else
    return 1;                                       
 801c57c:	2001      	movs	r0, #1
}
 801c57e:	4770      	bx	lr
    return 0;
 801c580:	2000      	movs	r0, #0
 801c582:	4770      	bx	lr

0801c584 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 801c584:	2300      	movs	r3, #0
 801c586:	6003      	str	r3, [r0, #0]
 801c588:	4770      	bx	lr
	...

0801c58c <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801c58c:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c58e:	4803      	ldr	r0, [pc, #12]	; (801c59c <sys_init+0x10>)
 801c590:	f7f6 faa1 	bl	8012ad6 <osMutexCreate>
 801c594:	4b02      	ldr	r3, [pc, #8]	; (801c5a0 <sys_init+0x14>)
 801c596:	6018      	str	r0, [r3, #0]
 801c598:	bd08      	pop	{r3, pc}
 801c59a:	bf00      	nop
 801c59c:	08025780 	.word	0x08025780
 801c5a0:	2000ecd0 	.word	0x2000ecd0

0801c5a4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c5a4:	b510      	push	{r4, lr}
 801c5a6:	b082      	sub	sp, #8
 801c5a8:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	9300      	str	r3, [sp, #0]
 801c5ae:	9301      	str	r3, [sp, #4]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c5b0:	4668      	mov	r0, sp
 801c5b2:	f7f6 fa90 	bl	8012ad6 <osMutexCreate>
 801c5b6:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801c5b8:	b110      	cbz	r0, 801c5c0 <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c5ba:	2000      	movs	r0, #0
}
 801c5bc:	b002      	add	sp, #8
 801c5be:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 801c5c0:	f04f 30ff 	mov.w	r0, #4294967295
 801c5c4:	e7fa      	b.n	801c5bc <sys_mutex_new+0x18>

0801c5c6 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c5c6:	b508      	push	{r3, lr}
  osMutexWait (*mutex, osWaitForever);
 801c5c8:	f04f 31ff 	mov.w	r1, #4294967295
 801c5cc:	6800      	ldr	r0, [r0, #0]
 801c5ce:	f7f6 fa8d 	bl	8012aec <osMutexWait>
 801c5d2:	bd08      	pop	{r3, pc}

0801c5d4 <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c5d4:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 801c5d6:	6800      	ldr	r0, [r0, #0]
 801c5d8:	f7f6 fac2 	bl	8012b60 <osMutexRelease>
 801c5dc:	bd08      	pop	{r3, pc}

0801c5de <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c5de:	b510      	push	{r4, lr}
 801c5e0:	b088      	sub	sp, #32
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c5e2:	2400      	movs	r4, #0
 801c5e4:	9403      	str	r4, [sp, #12]
 801c5e6:	9404      	str	r4, [sp, #16]
 801c5e8:	9406      	str	r4, [sp, #24]
 801c5ea:	9407      	str	r4, [sp, #28]
 801c5ec:	9001      	str	r0, [sp, #4]
 801c5ee:	9102      	str	r1, [sp, #8]
 801c5f0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c5f4:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c5f8:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 801c5fa:	4611      	mov	r1, r2
 801c5fc:	a801      	add	r0, sp, #4
 801c5fe:	f7f6 fa2c 	bl	8012a5a <osThreadCreate>
}
 801c602:	b008      	add	sp, #32
 801c604:	bd10      	pop	{r4, pc}
	...

0801c608 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c608:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c60a:	f04f 31ff 	mov.w	r1, #4294967295
 801c60e:	4b03      	ldr	r3, [pc, #12]	; (801c61c <sys_arch_protect+0x14>)
 801c610:	6818      	ldr	r0, [r3, #0]
 801c612:	f7f6 fa6b 	bl	8012aec <osMutexWait>
  return (sys_prot_t)1;
}
 801c616:	2001      	movs	r0, #1
 801c618:	bd08      	pop	{r3, pc}
 801c61a:	bf00      	nop
 801c61c:	2000ecd0 	.word	0x2000ecd0

0801c620 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c620:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c622:	4b02      	ldr	r3, [pc, #8]	; (801c62c <sys_arch_unprotect+0xc>)
 801c624:	6818      	ldr	r0, [r3, #0]
 801c626:	f7f6 fa9b 	bl	8012b60 <osMutexRelease>
 801c62a:	bd08      	pop	{r3, pc}
 801c62c:	2000ecd0 	.word	0x2000ecd0

0801c630 <is_exp_of_2>:

/*Checks if argument is power of 2 --------------------------------------- */

static uint8_t is_exp_of_2(uint32_t n)
{
    return ( n & (n - 1) ) == 0;
 801c630:	1e43      	subs	r3, r0, #1
 801c632:	4218      	tst	r0, r3
}
 801c634:	bf0c      	ite	eq
 801c636:	2001      	moveq	r0, #1
 801c638:	2000      	movne	r0, #0
 801c63a:	4770      	bx	lr

0801c63c <CB_Init>:

/* Circular buffer initiation function ----------------------------------- */

error_t CB_Init(circbuff *cb, uint32_t buf_size) {
 801c63c:	b538      	push	{r3, r4, r5, lr}
 801c63e:	4605      	mov	r5, r0
 801c640:	460c      	mov	r4, r1
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 801c642:	4608      	mov	r0, r1
 801c644:	f7ff fff4 	bl	801c630 <is_exp_of_2>
 801c648:	b908      	cbnz	r0, 801c64e <CB_Init+0x12>
 801c64a:	2004      	movs	r0, #4
 801c64c:	bd38      	pop	{r3, r4, r5, pc}
						/* return error if buffer size is not power of 2 */
	cb->size = buf_size;
 801c64e:	606c      	str	r4, [r5, #4]
	cb->read_pos = 0;
 801c650:	2300      	movs	r3, #0
 801c652:	60ab      	str	r3, [r5, #8]
	cb->write_pos = 0;
 801c654:	60eb      	str	r3, [r5, #12]
	cb->buf = (uint8_t*) pvPortMalloc(buf_size * sizeof(uint8_t));
 801c656:	4620      	mov	r0, r4
 801c658:	f7f6 fe42 	bl	80132e0 <pvPortMalloc>
 801c65c:	6028      	str	r0, [r5, #0]
	if (cb->buf == NULL) {
 801c65e:	b108      	cbz	r0, 801c664 <CB_Init+0x28>
		return MEM_ERR;
	}
	return NO_ERR;
 801c660:	2000      	movs	r0, #0
}
 801c662:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ERR;
 801c664:	2001      	movs	r0, #1
 801c666:	bd38      	pop	{r3, r4, r5, pc}

0801c668 <CB_Data_Length>:

/* Returns length of data in buffer ---------------------------------------*/

uint32_t CB_Data_Length(circbuff *cb) {
	return ((cb->write_pos - cb->read_pos) & (cb->size - 1));
 801c668:	68c3      	ldr	r3, [r0, #12]
 801c66a:	6882      	ldr	r2, [r0, #8]
 801c66c:	1a9a      	subs	r2, r3, r2
 801c66e:	6843      	ldr	r3, [r0, #4]
 801c670:	3b01      	subs	r3, #1
}
 801c672:	ea02 0003 	and.w	r0, r2, r3
 801c676:	4770      	bx	lr

0801c678 <CB_Write>:

/* Write new element to buffer --------------------------------------------*/

error_t CB_Write(circbuff *cb, uint8_t item){
 801c678:	b538      	push	{r3, r4, r5, lr}
 801c67a:	4604      	mov	r4, r0
 801c67c:	460d      	mov	r5, r1
	if (CB_Data_Length(cb) >= (cb->size - 1)){
 801c67e:	f7ff fff3 	bl	801c668 <CB_Data_Length>
 801c682:	6863      	ldr	r3, [r4, #4]
 801c684:	3b01      	subs	r3, #1
 801c686:	4298      	cmp	r0, r3
 801c688:	d301      	bcc.n	801c68e <CB_Write+0x16>
		return FULL_ERR;
 801c68a:	2003      	movs	r0, #3
	}
	cb->buf[cb->write_pos] = item;
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
	return NO_ERR;
}
 801c68c:	bd38      	pop	{r3, r4, r5, pc}
	cb->buf[cb->write_pos] = item;
 801c68e:	6822      	ldr	r2, [r4, #0]
 801c690:	68e3      	ldr	r3, [r4, #12]
 801c692:	54d5      	strb	r5, [r2, r3]
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
 801c694:	68e3      	ldr	r3, [r4, #12]
 801c696:	3301      	adds	r3, #1
 801c698:	6862      	ldr	r2, [r4, #4]
 801c69a:	3a01      	subs	r2, #1
 801c69c:	4013      	ands	r3, r2
 801c69e:	60e3      	str	r3, [r4, #12]
	return NO_ERR;
 801c6a0:	2000      	movs	r0, #0
 801c6a2:	bd38      	pop	{r3, r4, r5, pc}

0801c6a4 <CB_Read>:

/* Read element from buffer -----------------------------------------------*/

error_t CB_Read(circbuff *cb, uint8_t * item){
 801c6a4:	b538      	push	{r3, r4, r5, lr}
 801c6a6:	4604      	mov	r4, r0
 801c6a8:	460d      	mov	r5, r1
	if (CB_Data_Length(cb) == 0){
 801c6aa:	f7ff ffdd 	bl	801c668 <CB_Data_Length>
 801c6ae:	b908      	cbnz	r0, 801c6b4 <CB_Read+0x10>
		return EMPTY_ERR;
 801c6b0:	2002      	movs	r0, #2
	}
	*item = cb->buf[cb->read_pos];
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
	return NO_ERR;
}
 801c6b2:	bd38      	pop	{r3, r4, r5, pc}
	*item = cb->buf[cb->read_pos];
 801c6b4:	6822      	ldr	r2, [r4, #0]
 801c6b6:	68a3      	ldr	r3, [r4, #8]
 801c6b8:	5cd3      	ldrb	r3, [r2, r3]
 801c6ba:	702b      	strb	r3, [r5, #0]
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
 801c6bc:	68a3      	ldr	r3, [r4, #8]
 801c6be:	3301      	adds	r3, #1
 801c6c0:	6862      	ldr	r2, [r4, #4]
 801c6c2:	3a01      	subs	r2, #1
 801c6c4:	4013      	ands	r3, r2
 801c6c6:	60a3      	str	r3, [r4, #8]
	return NO_ERR;
 801c6c8:	2000      	movs	r0, #0
 801c6ca:	bd38      	pop	{r3, r4, r5, pc}

0801c6cc <FlashInit>:
SN_LS_ADDR,
MAC_02_01_ADDR,
MAC_04_03_ADDR,
MAC_06_05_ADDR };

void FlashInit() {
 801c6cc:	b510      	push	{r4, lr}
 801c6ce:	b082      	sub	sp, #8

	uint16_t mem_key;
	EE_ReadVariable(MEM_KEY_ADDR, &mem_key); /* Memory key reading */
 801c6d0:	f10d 0106 	add.w	r1, sp, #6
 801c6d4:	2000      	movs	r0, #0
 801c6d6:	f000 fa1f 	bl	801cb18 <EE_ReadVariable>
	if (mem_key != MEMORY_KEY) { /* First launching of device */
 801c6da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801c6de:	f64b 63af 	movw	r3, #48815	; 0xbeaf
 801c6e2:	429a      	cmp	r2, r3
 801c6e4:	d048      	beq.n	801c778 <FlashInit+0xac>
		/* Default FLASH initialization --------------------- */
		EE_WriteVariable(MEM_KEY_ADDR, MEMORY_KEY);
 801c6e6:	4619      	mov	r1, r3
 801c6e8:	2000      	movs	r0, #0
 801c6ea:	f000 fbd1 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 801c6ee:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 801c6f2:	2001      	movs	r0, #1
 801c6f4:	f000 fbcc 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 801c6f8:	f64f 5104 	movw	r1, #64772	; 0xfd04
 801c6fc:	2002      	movs	r0, #2
 801c6fe:	f000 fbc7 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(BR_MS_ADDR, DEFAULT_BR_MS);
 801c702:	2102      	movs	r1, #2
 801c704:	2003      	movs	r0, #3
 801c706:	f000 fbc3 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(BR_LS_ADDR, DEFAULT_BR_LS);
 801c70a:	f64d 416c 	movw	r1, #56428	; 0xdc6c
 801c70e:	2004      	movs	r0, #4
 801c710:	f000 fbbe 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(MPI_ADRR_ADDR, DEFAULT_MPI_ADDR);
 801c714:	2100      	movs	r1, #0
 801c716:	2005      	movs	r0, #5
 801c718:	f000 fbba 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(PORT_ADRR, DEFAULT_PORT);
 801c71c:	2166      	movs	r1, #102	; 0x66
 801c71e:	2006      	movs	r0, #6
 801c720:	f000 fbb6 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(MASK_02_01_ADDR, DEFAULT_MASK_02_01);
 801c724:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c728:	2007      	movs	r0, #7
 801c72a:	f000 fbb1 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(MASK_04_03_ADDR, DEFAULT_MASK_04_03);
 801c72e:	21ff      	movs	r1, #255	; 0xff
 801c730:	2008      	movs	r0, #8
 801c732:	f000 fbad 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(GATE_02_01_ADDR, DEFAULT_GATE_02_01);
 801c736:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 801c73a:	2009      	movs	r0, #9
 801c73c:	f000 fba8 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(GATE_04_03_ADDR, DEFAULT_GATE_04_03);
 801c740:	f44f 7182 	mov.w	r1, #260	; 0x104
 801c744:	200a      	movs	r0, #10
 801c746:	f000 fba3 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(SN_MS_ADDR, DEFAULT_SN_MS);
 801c74a:	2100      	movs	r1, #0
 801c74c:	200b      	movs	r0, #11
 801c74e:	f000 fb9f 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(SN_LS_ADDR, DEFAULT_SN_LS);
 801c752:	2100      	movs	r1, #0
 801c754:	200c      	movs	r0, #12
 801c756:	f000 fb9b 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(MAC_02_01_ADDR, DEFAULT_MAC_02_01);
 801c75a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c75e:	2010      	movs	r0, #16
 801c760:	f000 fb96 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(MAC_04_03_ADDR, DEFAULT_MAC_04_03);
 801c764:	f244 21a2 	movw	r1, #17058	; 0x42a2
 801c768:	2011      	movs	r0, #17
 801c76a:	f000 fb91 	bl	801ce90 <EE_WriteVariable>
		EE_WriteVariable(MAC_06_05_ADDR, DEFAULT_MAC_06_05);
 801c76e:	f24e 4150 	movw	r1, #58448	; 0xe450
 801c772:	2012      	movs	r0, #18
 801c774:	f000 fb8c 	bl	801ce90 <EE_WriteVariable>
		uint16_t ui16[2];
		uint8_t ui8[4];
	} tmp_u;

	/*baud rate */
	EE_ReadVariable(BR_MS_ADDR, &tmp_u.ui16[1]);
 801c778:	f10d 0102 	add.w	r1, sp, #2
 801c77c:	2003      	movs	r0, #3
 801c77e:	f000 f9cb 	bl	801cb18 <EE_ReadVariable>
	EE_ReadVariable(BR_LS_ADDR, &tmp_u.ui16[0]);
 801c782:	4669      	mov	r1, sp
 801c784:	2004      	movs	r0, #4
 801c786:	f000 f9c7 	bl	801cb18 <EE_ReadVariable>
	hflash.speed = tmp_u.ui32;
 801c78a:	4c40      	ldr	r4, [pc, #256]	; (801c88c <FlashInit+0x1c0>)
 801c78c:	9b00      	ldr	r3, [sp, #0]
 801c78e:	6023      	str	r3, [r4, #0]
	/* IP-address */
	EE_ReadVariable(IP_02_01_ADDR, &tmp_u.ui16[0]);
 801c790:	4669      	mov	r1, sp
 801c792:	2001      	movs	r0, #1
 801c794:	f000 f9c0 	bl	801cb18 <EE_ReadVariable>
	EE_ReadVariable(IP_04_03_ADDR, &tmp_u.ui16[1]);
 801c798:	f10d 0102 	add.w	r1, sp, #2
 801c79c:	2002      	movs	r0, #2
 801c79e:	f000 f9bb 	bl	801cb18 <EE_ReadVariable>
	hflash.IP_addr[0] = tmp_u.ui8[0];
 801c7a2:	f89d 3000 	ldrb.w	r3, [sp]
 801c7a6:	71a3      	strb	r3, [r4, #6]
	hflash.IP_addr[1] = tmp_u.ui8[1];
 801c7a8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801c7ac:	71e3      	strb	r3, [r4, #7]
	hflash.IP_addr[2] = tmp_u.ui8[2];
 801c7ae:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801c7b2:	7223      	strb	r3, [r4, #8]
	hflash.IP_addr[3] = tmp_u.ui8[3];
 801c7b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801c7b8:	7263      	strb	r3, [r4, #9]
	/* MPI/Profibus address */
	EE_ReadVariable(MPI_ADRR_ADDR, &hflash.own_addr);
 801c7ba:	1d21      	adds	r1, r4, #4
 801c7bc:	2005      	movs	r0, #5
 801c7be:	f000 f9ab 	bl	801cb18 <EE_ReadVariable>
	/* Subnet mask */
	EE_ReadVariable(MASK_02_01_ADDR, &tmp_u.ui16[0]);
 801c7c2:	4669      	mov	r1, sp
 801c7c4:	2007      	movs	r0, #7
 801c7c6:	f000 f9a7 	bl	801cb18 <EE_ReadVariable>
	EE_ReadVariable(MASK_04_03_ADDR, &tmp_u.ui16[1]);
 801c7ca:	f10d 0102 	add.w	r1, sp, #2
 801c7ce:	2008      	movs	r0, #8
 801c7d0:	f000 f9a2 	bl	801cb18 <EE_ReadVariable>
	hflash.mask[0] = tmp_u.ui8[0];
 801c7d4:	f89d 3000 	ldrb.w	r3, [sp]
 801c7d8:	72a3      	strb	r3, [r4, #10]
	hflash.mask[1] = tmp_u.ui8[1];
 801c7da:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801c7de:	72e3      	strb	r3, [r4, #11]
	hflash.mask[2] = tmp_u.ui8[2];
 801c7e0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801c7e4:	7323      	strb	r3, [r4, #12]
	hflash.mask[3] = tmp_u.ui8[3];
 801c7e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801c7ea:	7363      	strb	r3, [r4, #13]
	/* Gateway */
	EE_ReadVariable(GATE_02_01_ADDR, &tmp_u.ui16[0]);
 801c7ec:	4669      	mov	r1, sp
 801c7ee:	2009      	movs	r0, #9
 801c7f0:	f000 f992 	bl	801cb18 <EE_ReadVariable>
	EE_ReadVariable(GATE_04_03_ADDR, &tmp_u.ui16[1]);
 801c7f4:	f10d 0102 	add.w	r1, sp, #2
 801c7f8:	200a      	movs	r0, #10
 801c7fa:	f000 f98d 	bl	801cb18 <EE_ReadVariable>
	hflash.gate[0] = tmp_u.ui8[0];
 801c7fe:	f89d 3000 	ldrb.w	r3, [sp]
 801c802:	73a3      	strb	r3, [r4, #14]
	hflash.gate[1] = tmp_u.ui8[1];
 801c804:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801c808:	73e3      	strb	r3, [r4, #15]
	hflash.gate[2] = tmp_u.ui8[2];
 801c80a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801c80e:	7423      	strb	r3, [r4, #16]
	hflash.gate[3] = tmp_u.ui8[3];
 801c810:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801c814:	7463      	strb	r3, [r4, #17]
	/* Port number */
	EE_ReadVariable(PORT_ADRR, &hflash.port);
 801c816:	f104 0112 	add.w	r1, r4, #18
 801c81a:	2006      	movs	r0, #6
 801c81c:	f000 f97c 	bl	801cb18 <EE_ReadVariable>
	/* Serial number */
	EE_ReadVariable(SN_MS_ADDR, &tmp_u.ui16[1]);
 801c820:	f10d 0102 	add.w	r1, sp, #2
 801c824:	200b      	movs	r0, #11
 801c826:	f000 f977 	bl	801cb18 <EE_ReadVariable>
	EE_ReadVariable(SN_LS_ADDR, &tmp_u.ui16[0]);
 801c82a:	4669      	mov	r1, sp
 801c82c:	200c      	movs	r0, #12
 801c82e:	f000 f973 	bl	801cb18 <EE_ReadVariable>
	hflash.serial_num = tmp_u.ui32;
 801c832:	9b00      	ldr	r3, [sp, #0]
 801c834:	6163      	str	r3, [r4, #20]
	/* MAC address */
	EE_ReadVariable(MAC_02_01_ADDR, &tmp_u.ui16[0]);
 801c836:	4669      	mov	r1, sp
 801c838:	2010      	movs	r0, #16
 801c83a:	f000 f96d 	bl	801cb18 <EE_ReadVariable>
	EE_ReadVariable(MAC_04_03_ADDR, &tmp_u.ui16[1]);
 801c83e:	f10d 0102 	add.w	r1, sp, #2
 801c842:	2011      	movs	r0, #17
 801c844:	f000 f968 	bl	801cb18 <EE_ReadVariable>
	hflash.mac_addr[0] = tmp_u.ui8[0];
 801c848:	f89d 3000 	ldrb.w	r3, [sp]
 801c84c:	77a3      	strb	r3, [r4, #30]
	hflash.mac_addr[1] = tmp_u.ui8[1];
 801c84e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801c852:	77e3      	strb	r3, [r4, #31]
	hflash.mac_addr[2] = tmp_u.ui8[2];
 801c854:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801c858:	f884 3020 	strb.w	r3, [r4, #32]
	hflash.mac_addr[3] = tmp_u.ui8[3];
 801c85c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801c860:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	EE_ReadVariable(MAC_06_05_ADDR, &tmp_u.ui16[0]);
 801c864:	4669      	mov	r1, sp
 801c866:	2012      	movs	r0, #18
 801c868:	f000 f956 	bl	801cb18 <EE_ReadVariable>
	hflash.mac_addr[4] = tmp_u.ui8[0];
 801c86c:	f89d 3000 	ldrb.w	r3, [sp]
 801c870:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	hflash.mac_addr[5] = tmp_u.ui8[1];
 801c874:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801c878:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

	hflash.ver[0] = VER1;
 801c87c:	2300      	movs	r3, #0
 801c87e:	8323      	strh	r3, [r4, #24]
	hflash.ver[1] = VER2;
 801c880:	2204      	movs	r2, #4
 801c882:	8362      	strh	r2, [r4, #26]
	hflash.ver[2] = VER3;
 801c884:	83a3      	strh	r3, [r4, #28]
	/* ------------------------------------------------------- */
}
 801c886:	b002      	add	sp, #8
 801c888:	bd10      	pop	{r4, pc}
 801c88a:	bf00      	nop
 801c88c:	2000ecd4 	.word	0x2000ecd4

0801c890 <SaveFash>:

void SaveFash(void) {
 801c890:	b570      	push	{r4, r5, r6, lr}
		uint8_t ui8[4];
	} tmp_u;

	/*baud rate */

	tmp_u.ui32 = hflash.speed ;
 801c892:	4d3e      	ldr	r5, [pc, #248]	; (801c98c <SaveFash+0xfc>)
 801c894:	682e      	ldr	r6, [r5, #0]
 801c896:	4634      	mov	r4, r6
	EE_WriteVariable(BR_MS_ADDR, tmp_u.ui16[1]);
 801c898:	0c31      	lsrs	r1, r6, #16
 801c89a:	2003      	movs	r0, #3
 801c89c:	f000 faf8 	bl	801ce90 <EE_WriteVariable>
	EE_WriteVariable(BR_LS_ADDR, tmp_u.ui16[0]);
 801c8a0:	b2b1      	uxth	r1, r6
 801c8a2:	2004      	movs	r0, #4
 801c8a4:	f000 faf4 	bl	801ce90 <EE_WriteVariable>
	/* IP-address */
	tmp_u.ui8[0] = hflash.IP_addr[0];
 801c8a8:	79ab      	ldrb	r3, [r5, #6]
 801c8aa:	f363 0407 	bfi	r4, r3, #0, #8
	tmp_u.ui8[1] = hflash.IP_addr[1];
 801c8ae:	79eb      	ldrb	r3, [r5, #7]
 801c8b0:	f363 240f 	bfi	r4, r3, #8, #8
	tmp_u.ui8[2] = hflash.IP_addr[2];
 801c8b4:	7a2b      	ldrb	r3, [r5, #8]
 801c8b6:	f363 4417 	bfi	r4, r3, #16, #8
	tmp_u.ui8[3] = hflash.IP_addr[3];
 801c8ba:	7a6b      	ldrb	r3, [r5, #9]
 801c8bc:	f363 641f 	bfi	r4, r3, #24, #8
	EE_WriteVariable(IP_02_01_ADDR, tmp_u.ui16[0]);
 801c8c0:	b2a1      	uxth	r1, r4
 801c8c2:	2001      	movs	r0, #1
 801c8c4:	f000 fae4 	bl	801ce90 <EE_WriteVariable>
	EE_WriteVariable(IP_04_03_ADDR, tmp_u.ui16[1]);
 801c8c8:	0c21      	lsrs	r1, r4, #16
 801c8ca:	2002      	movs	r0, #2
 801c8cc:	f000 fae0 	bl	801ce90 <EE_WriteVariable>
	/* MPI/Profibus address */
	EE_WriteVariable(MPI_ADRR_ADDR, hflash.own_addr);
 801c8d0:	88a9      	ldrh	r1, [r5, #4]
 801c8d2:	2005      	movs	r0, #5
 801c8d4:	f000 fadc 	bl	801ce90 <EE_WriteVariable>
	/* Subnet mask */
	tmp_u.ui8[0] = hflash.mask[0];
 801c8d8:	7aab      	ldrb	r3, [r5, #10]
 801c8da:	f363 0407 	bfi	r4, r3, #0, #8
	tmp_u.ui8[1] = hflash.mask[1];
 801c8de:	7aeb      	ldrb	r3, [r5, #11]
 801c8e0:	f363 240f 	bfi	r4, r3, #8, #8
	tmp_u.ui8[2] = hflash.mask[2];
 801c8e4:	7b2b      	ldrb	r3, [r5, #12]
 801c8e6:	f363 4417 	bfi	r4, r3, #16, #8
	tmp_u.ui8[3] = hflash.mask[3];
 801c8ea:	7b6b      	ldrb	r3, [r5, #13]
 801c8ec:	f363 641f 	bfi	r4, r3, #24, #8
	EE_WriteVariable(MASK_02_01_ADDR, tmp_u.ui16[0]);
 801c8f0:	b2a1      	uxth	r1, r4
 801c8f2:	2007      	movs	r0, #7
 801c8f4:	f000 facc 	bl	801ce90 <EE_WriteVariable>
	EE_WriteVariable(MASK_04_03_ADDR, tmp_u.ui16[1]);
 801c8f8:	0c21      	lsrs	r1, r4, #16
 801c8fa:	2008      	movs	r0, #8
 801c8fc:	f000 fac8 	bl	801ce90 <EE_WriteVariable>
	/* Gateway */
	tmp_u.ui8[0] = hflash.gate[0];
 801c900:	7bab      	ldrb	r3, [r5, #14]
 801c902:	f363 0407 	bfi	r4, r3, #0, #8
	tmp_u.ui8[1] = hflash.gate[1];
 801c906:	7beb      	ldrb	r3, [r5, #15]
 801c908:	f363 240f 	bfi	r4, r3, #8, #8
	tmp_u.ui8[2] = hflash.gate[2];
 801c90c:	7c2b      	ldrb	r3, [r5, #16]
 801c90e:	f363 4417 	bfi	r4, r3, #16, #8
	tmp_u.ui8[3] = hflash.gate[3];
 801c912:	7c6b      	ldrb	r3, [r5, #17]
 801c914:	f363 641f 	bfi	r4, r3, #24, #8
	EE_WriteVariable(GATE_02_01_ADDR, tmp_u.ui16[0]);
 801c918:	b2a1      	uxth	r1, r4
 801c91a:	2009      	movs	r0, #9
 801c91c:	f000 fab8 	bl	801ce90 <EE_WriteVariable>
	EE_WriteVariable(GATE_04_03_ADDR, tmp_u.ui16[1]);
 801c920:	0c21      	lsrs	r1, r4, #16
 801c922:	200a      	movs	r0, #10
 801c924:	f000 fab4 	bl	801ce90 <EE_WriteVariable>
	/* Port number */
	EE_WriteVariable(PORT_ADRR, hflash.port);
 801c928:	8a69      	ldrh	r1, [r5, #18]
 801c92a:	2006      	movs	r0, #6
 801c92c:	f000 fab0 	bl	801ce90 <EE_WriteVariable>
	/* Serial number */
	tmp_u.ui32 = hflash.serial_num;
 801c930:	696e      	ldr	r6, [r5, #20]
 801c932:	4634      	mov	r4, r6
	EE_WriteVariable(SN_MS_ADDR, tmp_u.ui16[1]);
 801c934:	0c31      	lsrs	r1, r6, #16
 801c936:	200b      	movs	r0, #11
 801c938:	f000 faaa 	bl	801ce90 <EE_WriteVariable>
	EE_WriteVariable(SN_LS_ADDR, tmp_u.ui16[0]);
 801c93c:	b2b1      	uxth	r1, r6
 801c93e:	200c      	movs	r0, #12
 801c940:	f000 faa6 	bl	801ce90 <EE_WriteVariable>
	/* MAC address */
	tmp_u.ui8[0] = hflash.mac_addr[0];
 801c944:	7fab      	ldrb	r3, [r5, #30]
 801c946:	f363 0407 	bfi	r4, r3, #0, #8
	tmp_u.ui8[1] = hflash.mac_addr[1];
 801c94a:	7feb      	ldrb	r3, [r5, #31]
 801c94c:	f363 240f 	bfi	r4, r3, #8, #8
	tmp_u.ui8[2] = hflash.mac_addr[2];
 801c950:	f895 3020 	ldrb.w	r3, [r5, #32]
 801c954:	f363 4417 	bfi	r4, r3, #16, #8
	tmp_u.ui8[3] = hflash.mac_addr[3];
 801c958:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 801c95c:	f363 641f 	bfi	r4, r3, #24, #8
	EE_WriteVariable(MAC_02_01_ADDR, tmp_u.ui16[0]);
 801c960:	b2a1      	uxth	r1, r4
 801c962:	2010      	movs	r0, #16
 801c964:	f000 fa94 	bl	801ce90 <EE_WriteVariable>
	EE_WriteVariable(MAC_04_03_ADDR, tmp_u.ui16[1]);
 801c968:	0c21      	lsrs	r1, r4, #16
 801c96a:	2011      	movs	r0, #17
 801c96c:	f000 fa90 	bl	801ce90 <EE_WriteVariable>
	tmp_u.ui8[0] = hflash.mac_addr[4];
 801c970:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 801c974:	f363 0407 	bfi	r4, r3, #0, #8
	tmp_u.ui8[1] = hflash.mac_addr[5];
 801c978:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801c97c:	f363 240f 	bfi	r4, r3, #8, #8
	EE_WriteVariable(MAC_06_05_ADDR, tmp_u.ui16[0]);
 801c980:	b2a1      	uxth	r1, r4
 801c982:	2012      	movs	r0, #18
 801c984:	f000 fa84 	bl	801ce90 <EE_WriteVariable>
 801c988:	bd70      	pop	{r4, r5, r6, pc}
 801c98a:	bf00      	nop
 801c98c:	2000ecd4 	.word	0x2000ecd4

0801c990 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 801c990:	b510      	push	{r4, lr}
 801c992:	b082      	sub	sp, #8
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801c994:	2400      	movs	r4, #0
 801c996:	9400      	str	r4, [sp, #0]
 801c998:	4b12      	ldr	r3, [pc, #72]	; (801c9e4 <MX_DMA_Init+0x54>)
 801c99a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c99c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801c9a0:	631a      	str	r2, [r3, #48]	; 0x30
 801c9a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c9a4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 801c9a8:	9200      	str	r2, [sp, #0]
 801c9aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 801c9ac:	9401      	str	r4, [sp, #4]
 801c9ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c9b0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801c9b4:	631a      	str	r2, [r3, #48]	; 0x30
 801c9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c9b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c9bc:	9301      	str	r3, [sp, #4]
 801c9be:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 801c9c0:	4622      	mov	r2, r4
 801c9c2:	2105      	movs	r1, #5
 801c9c4:	202f      	movs	r0, #47	; 0x2f
 801c9c6:	f7f3 fd35 	bl	8010434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 801c9ca:	202f      	movs	r0, #47	; 0x2f
 801c9cc:	f7f3 fd64 	bl	8010498 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 801c9d0:	4622      	mov	r2, r4
 801c9d2:	2105      	movs	r1, #5
 801c9d4:	2046      	movs	r0, #70	; 0x46
 801c9d6:	f7f3 fd2d 	bl	8010434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 801c9da:	2046      	movs	r0, #70	; 0x46
 801c9dc:	f7f3 fd5c 	bl	8010498 <HAL_NVIC_EnableIRQ>

}
 801c9e0:	b002      	add	sp, #8
 801c9e2:	bd10      	pop	{r4, pc}
 801c9e4:	40023800 	.word	0x40023800

0801c9e8 <EE_VerifyPageFullyErased>:
{
  uint32_t ReadStatus = 1;
  uint16_t AddressValue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 801c9e8:	4b07      	ldr	r3, [pc, #28]	; (801ca08 <EE_VerifyPageFullyErased+0x20>)
 801c9ea:	4298      	cmp	r0, r3
 801c9ec:	d807      	bhi.n	801c9fe <EE_VerifyPageFullyErased+0x16>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 801c9ee:	8803      	ldrh	r3, [r0, #0]
 801c9f0:	b29b      	uxth	r3, r3

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 801c9f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c9f6:	4293      	cmp	r3, r2
 801c9f8:	d103      	bne.n	801ca02 <EE_VerifyPageFullyErased+0x1a>
      ReadStatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 801c9fa:	3004      	adds	r0, #4
 801c9fc:	e7f4      	b.n	801c9e8 <EE_VerifyPageFullyErased>
  uint32_t ReadStatus = 1;
 801c9fe:	2001      	movs	r0, #1
 801ca00:	4770      	bx	lr
      ReadStatus = 0;
 801ca02:	2000      	movs	r0, #0
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
}
 801ca04:	4770      	bx	lr
 801ca06:	bf00      	nop
 801ca08:	0800bfff 	.word	0x0800bfff

0801ca0c <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801ca0c:	4b11      	ldr	r3, [pc, #68]	; (801ca54 <EE_FindValidPage+0x48>)
 801ca0e:	881b      	ldrh	r3, [r3, #0]
 801ca10:	b29b      	uxth	r3, r3

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801ca12:	4a11      	ldr	r2, [pc, #68]	; (801ca58 <EE_FindValidPage+0x4c>)
 801ca14:	8812      	ldrh	r2, [r2, #0]
 801ca16:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 801ca18:	b198      	cbz	r0, 801ca42 <EE_FindValidPage+0x36>
 801ca1a:	2801      	cmp	r0, #1
 801ca1c:	d117      	bne.n	801ca4e <EE_FindValidPage+0x42>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 801ca1e:	b93a      	cbnz	r2, 801ca30 <EE_FindValidPage+0x24>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 801ca20:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 801ca24:	428b      	cmp	r3, r1
 801ca26:	d001      	beq.n	801ca2c <EE_FindValidPage+0x20>
        {
          return PAGE0;         /* Page0 valid */
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 801ca28:	2301      	movs	r3, #1
 801ca2a:	e011      	b.n	801ca50 <EE_FindValidPage+0x44>
          return PAGE0;         /* Page0 valid */
 801ca2c:	4613      	mov	r3, r2
 801ca2e:	e00f      	b.n	801ca50 <EE_FindValidPage+0x44>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 801ca30:	b10b      	cbz	r3, 801ca36 <EE_FindValidPage+0x2a>
          return PAGE0;         /* Page0 valid */
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 801ca32:	23ab      	movs	r3, #171	; 0xab
 801ca34:	e00c      	b.n	801ca50 <EE_FindValidPage+0x44>
        if (PageStatus1 == RECEIVE_DATA)
 801ca36:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 801ca3a:	428a      	cmp	r2, r1
 801ca3c:	d108      	bne.n	801ca50 <EE_FindValidPage+0x44>
          return PAGE1;         /* Page1 valid */
 801ca3e:	2301      	movs	r3, #1
 801ca40:	e006      	b.n	801ca50 <EE_FindValidPage+0x44>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 801ca42:	b12b      	cbz	r3, 801ca50 <EE_FindValidPage+0x44>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (PageStatus1 == VALID_PAGE)
 801ca44:	b10a      	cbz	r2, 801ca4a <EE_FindValidPage+0x3e>
      {
        return PAGE1;           /* Page1 valid */
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 801ca46:	23ab      	movs	r3, #171	; 0xab
 801ca48:	e002      	b.n	801ca50 <EE_FindValidPage+0x44>
        return PAGE1;           /* Page1 valid */
 801ca4a:	2301      	movs	r3, #1
 801ca4c:	e000      	b.n	801ca50 <EE_FindValidPage+0x44>
      }

    default:
      return PAGE0;             /* Page0 valid */
 801ca4e:	2300      	movs	r3, #0
  }
}
 801ca50:	4618      	mov	r0, r3
 801ca52:	4770      	bx	lr
 801ca54:	08008000 	.word	0x08008000
 801ca58:	0800c000 	.word	0x0800c000

0801ca5c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 801ca5c:	b570      	push	{r4, r5, r6, lr}
 801ca5e:	4605      	mov	r5, r0
 801ca60:	460e      	mov	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGE0;
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 801ca62:	2001      	movs	r0, #1
 801ca64:	f7ff ffd2 	bl	801ca0c <EE_FindValidPage>
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 801ca68:	28ab      	cmp	r0, #171	; 0xab
 801ca6a:	d021      	beq.n	801cab0 <EE_VerifyPageFullWriteVariable+0x54>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801ca6c:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
 801ca70:	3402      	adds	r4, #2
 801ca72:	03a4      	lsls	r4, r4, #14

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 801ca74:	1c43      	adds	r3, r0, #1
 801ca76:	480f      	ldr	r0, [pc, #60]	; (801cab4 <EE_VerifyPageFullWriteVariable+0x58>)
 801ca78:	eb00 3083 	add.w	r0, r0, r3, lsl #14

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 801ca7c:	4284      	cmp	r4, r0
 801ca7e:	d216      	bcs.n	801caae <EE_VerifyPageFullWriteVariable+0x52>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 801ca80:	6823      	ldr	r3, [r4, #0]
 801ca82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca86:	d001      	beq.n	801ca8c <EE_VerifyPageFullWriteVariable+0x30>
      return FlashStatus;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 801ca88:	3404      	adds	r4, #4
 801ca8a:	e7f7      	b.n	801ca7c <EE_VerifyPageFullWriteVariable+0x20>
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 801ca8c:	b2b2      	uxth	r2, r6
 801ca8e:	2300      	movs	r3, #0
 801ca90:	4621      	mov	r1, r4
 801ca92:	2001      	movs	r0, #1
 801ca94:	f7f4 fc6c 	bl	8011370 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 801ca98:	b108      	cbz	r0, 801ca9e <EE_VerifyPageFullWriteVariable+0x42>
        return FlashStatus;
 801ca9a:	b280      	uxth	r0, r0
 801ca9c:	bd70      	pop	{r4, r5, r6, pc}
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 801ca9e:	b2aa      	uxth	r2, r5
 801caa0:	2300      	movs	r3, #0
 801caa2:	1ca1      	adds	r1, r4, #2
 801caa4:	2001      	movs	r0, #1
 801caa6:	f7f4 fc63 	bl	8011370 <HAL_FLASH_Program>
      return FlashStatus;
 801caaa:	b280      	uxth	r0, r0
 801caac:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 801caae:	2080      	movs	r0, #128	; 0x80
}
 801cab0:	bd70      	pop	{r4, r5, r6, pc}
 801cab2:	bf00      	nop
 801cab4:	08007fff 	.word	0x08007fff

0801cab8 <EE_Format>:
{
 801cab8:	b510      	push	{r4, lr}
 801caba:	b086      	sub	sp, #24
  uint32_t SectorError = 0;
 801cabc:	2300      	movs	r3, #0
 801cabe:	9305      	str	r3, [sp, #20]
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 801cac0:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = PAGE0_ID;
 801cac2:	2302      	movs	r3, #2
 801cac4:	9302      	str	r3, [sp, #8]
  pEraseInit.NbSectors = 1;
 801cac6:	2201      	movs	r2, #1
 801cac8:	9203      	str	r2, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801caca:	9304      	str	r3, [sp, #16]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cacc:	4810      	ldr	r0, [pc, #64]	; (801cb10 <EE_Format+0x58>)
 801cace:	f7ff ff8b 	bl	801c9e8 <EE_VerifyPageFullyErased>
 801cad2:	b928      	cbnz	r0, 801cae0 <EE_Format+0x28>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801cad4:	a905      	add	r1, sp, #20
 801cad6:	4668      	mov	r0, sp
 801cad8:	f7f4 fcf6 	bl	80114c8 <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 801cadc:	4604      	mov	r4, r0
 801cade:	b938      	cbnz	r0, 801caf0 <EE_Format+0x38>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 801cae0:	2200      	movs	r2, #0
 801cae2:	2300      	movs	r3, #0
 801cae4:	490a      	ldr	r1, [pc, #40]	; (801cb10 <EE_Format+0x58>)
 801cae6:	2001      	movs	r0, #1
 801cae8:	f7f4 fc42 	bl	8011370 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801caec:	4604      	mov	r4, r0
 801caee:	b110      	cbz	r0, 801caf6 <EE_Format+0x3e>
}
 801caf0:	4620      	mov	r0, r4
 801caf2:	b006      	add	sp, #24
 801caf4:	bd10      	pop	{r4, pc}
  pEraseInit.Sector = PAGE1_ID;
 801caf6:	2303      	movs	r3, #3
 801caf8:	9302      	str	r3, [sp, #8]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801cafa:	4806      	ldr	r0, [pc, #24]	; (801cb14 <EE_Format+0x5c>)
 801cafc:	f7ff ff74 	bl	801c9e8 <EE_VerifyPageFullyErased>
 801cb00:	2800      	cmp	r0, #0
 801cb02:	d1f5      	bne.n	801caf0 <EE_Format+0x38>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801cb04:	a905      	add	r1, sp, #20
 801cb06:	4668      	mov	r0, sp
 801cb08:	f7f4 fcde 	bl	80114c8 <HAL_FLASHEx_Erase>
 801cb0c:	4604      	mov	r4, r0
 801cb0e:	e7ef      	b.n	801caf0 <EE_Format+0x38>
 801cb10:	08008000 	.word	0x08008000
 801cb14:	0800c000 	.word	0x0800c000

0801cb18 <EE_ReadVariable>:
{
 801cb18:	b538      	push	{r3, r4, r5, lr}
 801cb1a:	4604      	mov	r4, r0
 801cb1c:	460d      	mov	r5, r1
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801cb1e:	2000      	movs	r0, #0
 801cb20:	f7ff ff74 	bl	801ca0c <EE_FindValidPage>
  if (ValidPage == NO_VALID_PAGE)
 801cb24:	28ab      	cmp	r0, #171	; 0xab
 801cb26:	d016      	beq.n	801cb56 <EE_ReadVariable+0x3e>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801cb28:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 801cb2c:	3202      	adds	r2, #2
 801cb2e:	0392      	lsls	r2, r2, #14
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801cb30:	1c43      	adds	r3, r0, #1
 801cb32:	4809      	ldr	r0, [pc, #36]	; (801cb58 <EE_ReadVariable+0x40>)
 801cb34:	eb00 3083 	add.w	r0, r0, r3, lsl #14
  while (Address > (PageStartAddress + 2))
 801cb38:	1c93      	adds	r3, r2, #2
 801cb3a:	4298      	cmp	r0, r3
 801cb3c:	d90a      	bls.n	801cb54 <EE_ReadVariable+0x3c>
    AddressValue = (*(__IO uint16_t*)Address);
 801cb3e:	8803      	ldrh	r3, [r0, #0]
 801cb40:	b29b      	uxth	r3, r3
    if (AddressValue == VirtAddress)
 801cb42:	42a3      	cmp	r3, r4
 801cb44:	d001      	beq.n	801cb4a <EE_ReadVariable+0x32>
      Address = Address - 4;
 801cb46:	3804      	subs	r0, #4
 801cb48:	e7f6      	b.n	801cb38 <EE_ReadVariable+0x20>
      *Data = (*(__IO uint16_t*)(Address - 2));
 801cb4a:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 801cb4e:	802b      	strh	r3, [r5, #0]
      ReadStatus = 0;
 801cb50:	2000      	movs	r0, #0
      break;
 801cb52:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 801cb54:	2001      	movs	r0, #1
}
 801cb56:	bd38      	pop	{r3, r4, r5, pc}
 801cb58:	08007ffe 	.word	0x08007ffe

0801cb5c <EE_Init>:
{
 801cb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb5e:	b087      	sub	sp, #28
  uint32_t SectorError = 0;
 801cb60:	2300      	movs	r3, #0
 801cb62:	9305      	str	r3, [sp, #20]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801cb64:	4a92      	ldr	r2, [pc, #584]	; (801cdb0 <EE_Init+0x254>)
 801cb66:	8816      	ldrh	r6, [r2, #0]
 801cb68:	b2b6      	uxth	r6, r6
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801cb6a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 801cb6e:	8815      	ldrh	r5, [r2, #0]
 801cb70:	b2ad      	uxth	r5, r5
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801cb72:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = PAGE0_ID;
 801cb74:	2302      	movs	r3, #2
 801cb76:	9302      	str	r3, [sp, #8]
  pEraseInit.NbSectors = 1;
 801cb78:	2201      	movs	r2, #1
 801cb7a:	9203      	str	r2, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cb7c:	9304      	str	r3, [sp, #16]
  switch (PageStatus0)
 801cb7e:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 801cb82:	429e      	cmp	r6, r3
 801cb84:	d040      	beq.n	801cc08 <EE_Init+0xac>
 801cb86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cb8a:	429e      	cmp	r6, r3
 801cb8c:	d00b      	beq.n	801cba6 <EE_Init+0x4a>
 801cb8e:	2e00      	cmp	r6, #0
 801cb90:	f000 809f 	beq.w	801ccd2 <EE_Init+0x176>
      FlashStatus = EE_Format();
 801cb94:	f7ff ff90 	bl	801cab8 <EE_Format>
      if (FlashStatus != HAL_OK)
 801cb98:	2800      	cmp	r0, #0
 801cb9a:	f000 8107 	beq.w	801cdac <EE_Init+0x250>
        return FlashStatus;
 801cb9e:	b285      	uxth	r5, r0
}
 801cba0:	4628      	mov	r0, r5
 801cba2:	b007      	add	sp, #28
 801cba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 801cba6:	b155      	cbz	r5, 801cbbe <EE_Init+0x62>
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 801cba8:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 801cbac:	429d      	cmp	r5, r3
 801cbae:	d015      	beq.n	801cbdc <EE_Init+0x80>
        FlashStatus = EE_Format();
 801cbb0:	f7ff ff82 	bl	801cab8 <EE_Format>
        if (FlashStatus != HAL_OK)
 801cbb4:	2800      	cmp	r0, #0
 801cbb6:	f000 80f1 	beq.w	801cd9c <EE_Init+0x240>
          return FlashStatus;
 801cbba:	b285      	uxth	r5, r0
 801cbbc:	e7f0      	b.n	801cba0 <EE_Init+0x44>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cbbe:	487c      	ldr	r0, [pc, #496]	; (801cdb0 <EE_Init+0x254>)
 801cbc0:	f7ff ff12 	bl	801c9e8 <EE_VerifyPageFullyErased>
 801cbc4:	4604      	mov	r4, r0
 801cbc6:	2800      	cmp	r0, #0
 801cbc8:	d1ea      	bne.n	801cba0 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cbca:	a905      	add	r1, sp, #20
 801cbcc:	4668      	mov	r0, sp
 801cbce:	f7f4 fc7b 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cbd2:	2800      	cmp	r0, #0
 801cbd4:	f000 80de 	beq.w	801cd94 <EE_Init+0x238>
            return FlashStatus;
 801cbd8:	b285      	uxth	r5, r0
 801cbda:	e7e1      	b.n	801cba0 <EE_Init+0x44>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cbdc:	4874      	ldr	r0, [pc, #464]	; (801cdb0 <EE_Init+0x254>)
 801cbde:	f7ff ff03 	bl	801c9e8 <EE_VerifyPageFullyErased>
 801cbe2:	b920      	cbnz	r0, 801cbee <EE_Init+0x92>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cbe4:	a905      	add	r1, sp, #20
 801cbe6:	4668      	mov	r0, sp
 801cbe8:	f7f4 fc6e 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cbec:	b950      	cbnz	r0, 801cc04 <EE_Init+0xa8>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 801cbee:	2200      	movs	r2, #0
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	4970      	ldr	r1, [pc, #448]	; (801cdb4 <EE_Init+0x258>)
 801cbf4:	2001      	movs	r0, #1
 801cbf6:	f7f4 fbbb 	bl	8011370 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cbfa:	2800      	cmp	r0, #0
 801cbfc:	f000 80cc 	beq.w	801cd98 <EE_Init+0x23c>
          return FlashStatus;
 801cc00:	b285      	uxth	r5, r0
 801cc02:	e7cd      	b.n	801cba0 <EE_Init+0x44>
            return FlashStatus;
 801cc04:	b285      	uxth	r5, r0
 801cc06:	e7cb      	b.n	801cba0 <EE_Init+0x44>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 801cc08:	b35d      	cbz	r5, 801cc62 <EE_Init+0x106>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 801cc0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc0e:	429d      	cmp	r5, r3
 801cc10:	d048      	beq.n	801cca4 <EE_Init+0x148>
        FlashStatus = EE_Format();
 801cc12:	f7ff ff51 	bl	801cab8 <EE_Format>
        if (FlashStatus != HAL_OK)
 801cc16:	2800      	cmp	r0, #0
 801cc18:	f000 80c6 	beq.w	801cda8 <EE_Init+0x24c>
          return FlashStatus;
 801cc1c:	b285      	uxth	r5, r0
 801cc1e:	e7bf      	b.n	801cba0 <EE_Init+0x44>
            x = VarIdx;
 801cc20:	b227      	sxth	r7, r4
 801cc22:	e00c      	b.n	801cc3e <EE_Init+0xe2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801cc24:	3401      	adds	r4, #1
 801cc26:	b2a4      	uxth	r4, r4
 801cc28:	2c12      	cmp	r4, #18
 801cc2a:	d81e      	bhi.n	801cc6a <EE_Init+0x10e>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801cc2c:	4b62      	ldr	r3, [pc, #392]	; (801cdb8 <EE_Init+0x25c>)
 801cc2e:	881b      	ldrh	r3, [r3, #0]
 801cc30:	b29b      	uxth	r3, r3
 801cc32:	4626      	mov	r6, r4
 801cc34:	4a61      	ldr	r2, [pc, #388]	; (801cdbc <EE_Init+0x260>)
 801cc36:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801cc3a:	4283      	cmp	r3, r0
 801cc3c:	d0f0      	beq.n	801cc20 <EE_Init+0xc4>
          if (VarIdx != x)
 801cc3e:	42be      	cmp	r6, r7
 801cc40:	d0f0      	beq.n	801cc24 <EE_Init+0xc8>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801cc42:	495f      	ldr	r1, [pc, #380]	; (801cdc0 <EE_Init+0x264>)
 801cc44:	f7ff ff68 	bl	801cb18 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 801cc48:	2801      	cmp	r0, #1
 801cc4a:	d0eb      	beq.n	801cc24 <EE_Init+0xc8>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801cc4c:	4b5c      	ldr	r3, [pc, #368]	; (801cdc0 <EE_Init+0x264>)
 801cc4e:	8819      	ldrh	r1, [r3, #0]
 801cc50:	4b5a      	ldr	r3, [pc, #360]	; (801cdbc <EE_Init+0x260>)
 801cc52:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 801cc56:	f7ff ff01 	bl	801ca5c <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 801cc5a:	2800      	cmp	r0, #0
 801cc5c:	d0e2      	beq.n	801cc24 <EE_Init+0xc8>
                return EepromStatus;
 801cc5e:	4605      	mov	r5, r0
 801cc60:	e79e      	b.n	801cba0 <EE_Init+0x44>
 801cc62:	462c      	mov	r4, r5
 801cc64:	f04f 37ff 	mov.w	r7, #4294967295
 801cc68:	e7de      	b.n	801cc28 <EE_Init+0xcc>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	2300      	movs	r3, #0
 801cc6e:	4950      	ldr	r1, [pc, #320]	; (801cdb0 <EE_Init+0x254>)
 801cc70:	2001      	movs	r0, #1
 801cc72:	f7f4 fb7d 	bl	8011370 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cc76:	b108      	cbz	r0, 801cc7c <EE_Init+0x120>
          return FlashStatus;
 801cc78:	b285      	uxth	r5, r0
 801cc7a:	e791      	b.n	801cba0 <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801cc7c:	2303      	movs	r3, #3
 801cc7e:	9302      	str	r3, [sp, #8]
        pEraseInit.NbSectors = 1;
 801cc80:	2301      	movs	r3, #1
 801cc82:	9303      	str	r3, [sp, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cc84:	2302      	movs	r3, #2
 801cc86:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801cc88:	484a      	ldr	r0, [pc, #296]	; (801cdb4 <EE_Init+0x258>)
 801cc8a:	f7ff fead 	bl	801c9e8 <EE_VerifyPageFullyErased>
 801cc8e:	4604      	mov	r4, r0
 801cc90:	2800      	cmp	r0, #0
 801cc92:	d185      	bne.n	801cba0 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cc94:	a905      	add	r1, sp, #20
 801cc96:	4668      	mov	r0, sp
 801cc98:	f7f4 fc16 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cc9c:	2800      	cmp	r0, #0
 801cc9e:	d07f      	beq.n	801cda0 <EE_Init+0x244>
            return FlashStatus;
 801cca0:	b285      	uxth	r5, r0
 801cca2:	e77d      	b.n	801cba0 <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801cca4:	2303      	movs	r3, #3
 801cca6:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801cca8:	4842      	ldr	r0, [pc, #264]	; (801cdb4 <EE_Init+0x258>)
 801ccaa:	f7ff fe9d 	bl	801c9e8 <EE_VerifyPageFullyErased>
 801ccae:	b920      	cbnz	r0, 801ccba <EE_Init+0x15e>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801ccb0:	a905      	add	r1, sp, #20
 801ccb2:	4668      	mov	r0, sp
 801ccb4:	f7f4 fc08 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801ccb8:	b948      	cbnz	r0, 801ccce <EE_Init+0x172>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801ccba:	2200      	movs	r2, #0
 801ccbc:	2300      	movs	r3, #0
 801ccbe:	493c      	ldr	r1, [pc, #240]	; (801cdb0 <EE_Init+0x254>)
 801ccc0:	2001      	movs	r0, #1
 801ccc2:	f7f4 fb55 	bl	8011370 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801ccc6:	2800      	cmp	r0, #0
 801ccc8:	d06c      	beq.n	801cda4 <EE_Init+0x248>
          return FlashStatus;
 801ccca:	b285      	uxth	r5, r0
 801cccc:	e768      	b.n	801cba0 <EE_Init+0x44>
            return FlashStatus;
 801ccce:	b285      	uxth	r5, r0
 801ccd0:	e766      	b.n	801cba0 <EE_Init+0x44>
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801ccd2:	b13d      	cbz	r5, 801cce4 <EE_Init+0x188>
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 801ccd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ccd8:	429d      	cmp	r5, r3
 801ccda:	d00a      	beq.n	801ccf2 <EE_Init+0x196>
 801ccdc:	4634      	mov	r4, r6
 801ccde:	f04f 37ff 	mov.w	r7, #4294967295
 801cce2:	e01c      	b.n	801cd1e <EE_Init+0x1c2>
        FlashStatus = EE_Format();
 801cce4:	f7ff fee8 	bl	801cab8 <EE_Format>
        if (FlashStatus != HAL_OK)
 801cce8:	2800      	cmp	r0, #0
 801ccea:	f43f af59 	beq.w	801cba0 <EE_Init+0x44>
          return FlashStatus;
 801ccee:	b285      	uxth	r5, r0
 801ccf0:	e756      	b.n	801cba0 <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801ccf2:	2303      	movs	r3, #3
 801ccf4:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801ccf6:	482f      	ldr	r0, [pc, #188]	; (801cdb4 <EE_Init+0x258>)
 801ccf8:	f7ff fe76 	bl	801c9e8 <EE_VerifyPageFullyErased>
 801ccfc:	4605      	mov	r5, r0
 801ccfe:	b108      	cbz	r0, 801cd04 <EE_Init+0x1a8>
  return HAL_OK;
 801cd00:	4635      	mov	r5, r6
 801cd02:	e74d      	b.n	801cba0 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cd04:	a905      	add	r1, sp, #20
 801cd06:	4668      	mov	r0, sp
 801cd08:	f7f4 fbde 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cd0c:	2800      	cmp	r0, #0
 801cd0e:	f43f af47 	beq.w	801cba0 <EE_Init+0x44>
            return FlashStatus;
 801cd12:	b285      	uxth	r5, r0
 801cd14:	e744      	b.n	801cba0 <EE_Init+0x44>
            x = VarIdx;
 801cd16:	b227      	sxth	r7, r4
 801cd18:	e00c      	b.n	801cd34 <EE_Init+0x1d8>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801cd1a:	3401      	adds	r4, #1
 801cd1c:	b2a4      	uxth	r4, r4
 801cd1e:	2c12      	cmp	r4, #18
 801cd20:	d81a      	bhi.n	801cd58 <EE_Init+0x1fc>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801cd22:	4b28      	ldr	r3, [pc, #160]	; (801cdc4 <EE_Init+0x268>)
 801cd24:	881b      	ldrh	r3, [r3, #0]
 801cd26:	b29b      	uxth	r3, r3
 801cd28:	4625      	mov	r5, r4
 801cd2a:	4a24      	ldr	r2, [pc, #144]	; (801cdbc <EE_Init+0x260>)
 801cd2c:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801cd30:	4283      	cmp	r3, r0
 801cd32:	d0f0      	beq.n	801cd16 <EE_Init+0x1ba>
          if (VarIdx != x)
 801cd34:	42bd      	cmp	r5, r7
 801cd36:	d0f0      	beq.n	801cd1a <EE_Init+0x1be>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801cd38:	4921      	ldr	r1, [pc, #132]	; (801cdc0 <EE_Init+0x264>)
 801cd3a:	f7ff feed 	bl	801cb18 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 801cd3e:	2801      	cmp	r0, #1
 801cd40:	d0eb      	beq.n	801cd1a <EE_Init+0x1be>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801cd42:	4b1f      	ldr	r3, [pc, #124]	; (801cdc0 <EE_Init+0x264>)
 801cd44:	8819      	ldrh	r1, [r3, #0]
 801cd46:	4b1d      	ldr	r3, [pc, #116]	; (801cdbc <EE_Init+0x260>)
 801cd48:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 801cd4c:	f7ff fe86 	bl	801ca5c <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 801cd50:	4605      	mov	r5, r0
 801cd52:	2800      	cmp	r0, #0
 801cd54:	d0e1      	beq.n	801cd1a <EE_Init+0x1be>
 801cd56:	e723      	b.n	801cba0 <EE_Init+0x44>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 801cd58:	2200      	movs	r2, #0
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	4915      	ldr	r1, [pc, #84]	; (801cdb4 <EE_Init+0x258>)
 801cd5e:	2001      	movs	r0, #1
 801cd60:	f7f4 fb06 	bl	8011370 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cd64:	b108      	cbz	r0, 801cd6a <EE_Init+0x20e>
          return FlashStatus;
 801cd66:	b285      	uxth	r5, r0
 801cd68:	e71a      	b.n	801cba0 <EE_Init+0x44>
        pEraseInit.Sector = PAGE0_ID;
 801cd6a:	2302      	movs	r3, #2
 801cd6c:	9302      	str	r3, [sp, #8]
        pEraseInit.NbSectors = 1;
 801cd6e:	2201      	movs	r2, #1
 801cd70:	9203      	str	r2, [sp, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cd72:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cd74:	480e      	ldr	r0, [pc, #56]	; (801cdb0 <EE_Init+0x254>)
 801cd76:	f7ff fe37 	bl	801c9e8 <EE_VerifyPageFullyErased>
 801cd7a:	4605      	mov	r5, r0
 801cd7c:	b108      	cbz	r0, 801cd82 <EE_Init+0x226>
  return HAL_OK;
 801cd7e:	4635      	mov	r5, r6
 801cd80:	e70e      	b.n	801cba0 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cd82:	a905      	add	r1, sp, #20
 801cd84:	4668      	mov	r0, sp
 801cd86:	f7f4 fb9f 	bl	80114c8 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cd8a:	2800      	cmp	r0, #0
 801cd8c:	f43f af08 	beq.w	801cba0 <EE_Init+0x44>
            return FlashStatus;
 801cd90:	b285      	uxth	r5, r0
 801cd92:	e705      	b.n	801cba0 <EE_Init+0x44>
  return HAL_OK;
 801cd94:	4625      	mov	r5, r4
 801cd96:	e703      	b.n	801cba0 <EE_Init+0x44>
 801cd98:	2500      	movs	r5, #0
 801cd9a:	e701      	b.n	801cba0 <EE_Init+0x44>
 801cd9c:	2500      	movs	r5, #0
 801cd9e:	e6ff      	b.n	801cba0 <EE_Init+0x44>
 801cda0:	4625      	mov	r5, r4
 801cda2:	e6fd      	b.n	801cba0 <EE_Init+0x44>
 801cda4:	2500      	movs	r5, #0
 801cda6:	e6fb      	b.n	801cba0 <EE_Init+0x44>
 801cda8:	2500      	movs	r5, #0
 801cdaa:	e6f9      	b.n	801cba0 <EE_Init+0x44>
 801cdac:	2500      	movs	r5, #0
 801cdae:	e6f7      	b.n	801cba0 <EE_Init+0x44>
 801cdb0:	08008000 	.word	0x08008000
 801cdb4:	0800c000 	.word	0x0800c000
 801cdb8:	08008006 	.word	0x08008006
 801cdbc:	20000010 	.word	0x20000010
 801cdc0:	2000950c 	.word	0x2000950c
 801cdc4:	0800c006 	.word	0x0800c006

0801cdc8 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 801cdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdcc:	b086      	sub	sp, #24
 801cdce:	4605      	mov	r5, r0
 801cdd0:	460e      	mov	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
  uint16_t OldPageId=0;
  uint16_t ValidPage = PAGE0, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
  uint32_t SectorError = 0;
 801cdd2:	2000      	movs	r0, #0
 801cdd4:	9005      	str	r0, [sp, #20]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801cdd6:	f7ff fe19 	bl	801ca0c <EE_FindValidPage>

  if (ValidPage == PAGE1)       /* Page1 valid */
 801cdda:	2801      	cmp	r0, #1
 801cddc:	d012      	beq.n	801ce04 <EE_PageTransfer+0x3c>
    NewPageAddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 801cdde:	b120      	cbz	r0, 801cdea <EE_PageTransfer+0x22>
    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 801cde0:	24ab      	movs	r4, #171	; 0xab
    return FlashStatus;
  }

  /* Return last operation flash status */
  return FlashStatus;
}
 801cde2:	4620      	mov	r0, r4
 801cde4:	b006      	add	sp, #24
 801cde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    OldPageId = PAGE0_ID;
 801cdea:	f04f 0802 	mov.w	r8, #2
    NewPageAddress = PAGE1_BASE_ADDRESS;
 801cdee:	4f24      	ldr	r7, [pc, #144]	; (801ce80 <EE_PageTransfer+0xb8>)
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 801cdf0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801cdf4:	2300      	movs	r3, #0
 801cdf6:	4639      	mov	r1, r7
 801cdf8:	2001      	movs	r0, #1
 801cdfa:	f7f4 fab9 	bl	8011370 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801cdfe:	b128      	cbz	r0, 801ce0c <EE_PageTransfer+0x44>
    return FlashStatus;
 801ce00:	b284      	uxth	r4, r0
 801ce02:	e7ee      	b.n	801cde2 <EE_PageTransfer+0x1a>
    OldPageId = PAGE1_ID;
 801ce04:	f04f 0803 	mov.w	r8, #3
    NewPageAddress = PAGE0_BASE_ADDRESS;
 801ce08:	4f1e      	ldr	r7, [pc, #120]	; (801ce84 <EE_PageTransfer+0xbc>)
 801ce0a:	e7f1      	b.n	801cdf0 <EE_PageTransfer+0x28>
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801ce0c:	4631      	mov	r1, r6
 801ce0e:	4628      	mov	r0, r5
 801ce10:	f7ff fe24 	bl	801ca5c <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 801ce14:	4604      	mov	r4, r0
 801ce16:	b110      	cbz	r0, 801ce1e <EE_PageTransfer+0x56>
 801ce18:	e7e3      	b.n	801cde2 <EE_PageTransfer+0x1a>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801ce1a:	3401      	adds	r4, #1
 801ce1c:	b2a4      	uxth	r4, r4
 801ce1e:	2c12      	cmp	r4, #18
 801ce20:	d814      	bhi.n	801ce4c <EE_PageTransfer+0x84>
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 801ce22:	4b19      	ldr	r3, [pc, #100]	; (801ce88 <EE_PageTransfer+0xc0>)
 801ce24:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 801ce28:	4285      	cmp	r5, r0
 801ce2a:	d0f6      	beq.n	801ce1a <EE_PageTransfer+0x52>
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801ce2c:	4917      	ldr	r1, [pc, #92]	; (801ce8c <EE_PageTransfer+0xc4>)
 801ce2e:	f7ff fe73 	bl	801cb18 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 801ce32:	2801      	cmp	r0, #1
 801ce34:	d0f1      	beq.n	801ce1a <EE_PageTransfer+0x52>
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801ce36:	4b15      	ldr	r3, [pc, #84]	; (801ce8c <EE_PageTransfer+0xc4>)
 801ce38:	8819      	ldrh	r1, [r3, #0]
 801ce3a:	4b13      	ldr	r3, [pc, #76]	; (801ce88 <EE_PageTransfer+0xc0>)
 801ce3c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 801ce40:	f7ff fe0c 	bl	801ca5c <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 801ce44:	2800      	cmp	r0, #0
 801ce46:	d0e8      	beq.n	801ce1a <EE_PageTransfer+0x52>
          return EepromStatus;
 801ce48:	4604      	mov	r4, r0
 801ce4a:	e7ca      	b.n	801cde2 <EE_PageTransfer+0x1a>
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801ce4c:	2300      	movs	r3, #0
 801ce4e:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = OldPageId;
 801ce50:	f8cd 8008 	str.w	r8, [sp, #8]
  pEraseInit.NbSectors = 1;
 801ce54:	2301      	movs	r3, #1
 801ce56:	9303      	str	r3, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801ce58:	2302      	movs	r3, #2
 801ce5a:	9304      	str	r3, [sp, #16]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 801ce5c:	a905      	add	r1, sp, #20
 801ce5e:	4668      	mov	r0, sp
 801ce60:	f7f4 fb32 	bl	80114c8 <HAL_FLASHEx_Erase>
  if (FlashStatus != HAL_OK)
 801ce64:	b108      	cbz	r0, 801ce6a <EE_PageTransfer+0xa2>
    return FlashStatus;
 801ce66:	b284      	uxth	r4, r0
 801ce68:	e7bb      	b.n	801cde2 <EE_PageTransfer+0x1a>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 801ce6a:	2200      	movs	r2, #0
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	4639      	mov	r1, r7
 801ce70:	2001      	movs	r0, #1
 801ce72:	f7f4 fa7d 	bl	8011370 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801ce76:	b908      	cbnz	r0, 801ce7c <EE_PageTransfer+0xb4>
  return FlashStatus;
 801ce78:	b284      	uxth	r4, r0
 801ce7a:	e7b2      	b.n	801cde2 <EE_PageTransfer+0x1a>
    return FlashStatus;
 801ce7c:	b284      	uxth	r4, r0
 801ce7e:	e7b0      	b.n	801cde2 <EE_PageTransfer+0x1a>
 801ce80:	0800c000 	.word	0x0800c000
 801ce84:	08008000 	.word	0x08008000
 801ce88:	20000010 	.word	0x20000010
 801ce8c:	2000950c 	.word	0x2000950c

0801ce90 <EE_WriteVariable>:
{
 801ce90:	b538      	push	{r3, r4, r5, lr}
 801ce92:	4604      	mov	r4, r0
 801ce94:	460d      	mov	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801ce96:	f7ff fde1 	bl	801ca5c <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 801ce9a:	2880      	cmp	r0, #128	; 0x80
 801ce9c:	d000      	beq.n	801cea0 <EE_WriteVariable+0x10>
}
 801ce9e:	bd38      	pop	{r3, r4, r5, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 801cea0:	4629      	mov	r1, r5
 801cea2:	4620      	mov	r0, r4
 801cea4:	f7ff ff90 	bl	801cdc8 <EE_PageTransfer>
 801cea8:	e7f9      	b.n	801ce9e <EE_WriteVariable+0xe>
	...

0801ceac <low_level_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(struct netif *netif) {
 801ceac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t payloadoffset = 0;
	uint32_t byteslefttocopy = 0;
	uint32_t i = 0;

	/* get received frame */
	if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801ceb0:	4834      	ldr	r0, [pc, #208]	; (801cf84 <low_level_input+0xd8>)
 801ceb2:	f7f3 ff2b 	bl	8010d0c <HAL_ETH_GetReceivedFrame_IT>
 801ceb6:	2800      	cmp	r0, #0
 801ceb8:	d160      	bne.n	801cf7c <low_level_input+0xd0>
		return NULL;

	/* Obtain the size of the packet and put it into the "len" variable. */
	len = heth.RxFrameInfos.length;
 801ceba:	4b32      	ldr	r3, [pc, #200]	; (801cf84 <low_level_input+0xd8>)
 801cebc:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
	buffer = (uint8_t *) heth.RxFrameInfos.buffer;
 801cebe:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40

	if (len > 0) {
 801cec2:	b949      	cbnz	r1, 801ced8 <low_level_input+0x2c>
	struct pbuf *p = NULL;
 801cec4:	f04f 0a00 	mov.w	sl, #0
		/* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
		p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
	}

	if (p != NULL) {
 801cec8:	f1ba 0f00 	cmp.w	sl, #0
 801cecc:	d033      	beq.n	801cf36 <low_level_input+0x8a>
		dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801cece:	4b2d      	ldr	r3, [pc, #180]	; (801cf84 <low_level_input+0xd8>)
 801ced0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
		bufferoffset = 0;
		for (q = p; q != NULL; q = q->next) {
 801ced2:	46d1      	mov	r9, sl
		bufferoffset = 0;
 801ced4:	2400      	movs	r4, #0
		for (q = p; q != NULL; q = q->next) {
 801ced6:	e027      	b.n	801cf28 <low_level_input+0x7c>
		p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801ced8:	2203      	movs	r2, #3
 801ceda:	2004      	movs	r0, #4
 801cedc:	f7fb fa14 	bl	8018308 <pbuf_alloc>
 801cee0:	4682      	mov	sl, r0
 801cee2:	e7f1      	b.n	801cec8 <low_level_input+0x1c>
			payloadoffset = 0;

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 801cee4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801cee8:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 801ceec:	3204      	adds	r2, #4
 801ceee:	eb08 0104 	add.w	r1, r8, r4
 801cef2:	4430      	add	r0, r6
 801cef4:	f003 f861 	bl	801ffba <memcpy>
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
						(ETH_RX_BUF_SIZE - bufferoffset));

				/* Point to next descriptor */
				dmarxdesc =
						(ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
 801cef8:	68ff      	ldr	r7, [r7, #12]
				buffer = (uint8_t *) (dmarxdesc->Buffer1Addr);
 801cefa:	f8d7 8008 	ldr.w	r8, [r7, #8]

				byteslefttocopy = byteslefttocopy
 801cefe:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
						- (ETH_RX_BUF_SIZE - bufferoffset);
				payloadoffset = payloadoffset
						+ (ETH_RX_BUF_SIZE - bufferoffset);
 801cf02:	1b36      	subs	r6, r6, r4
				payloadoffset = payloadoffset
 801cf04:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
				bufferoffset = 0;
 801cf08:	2400      	movs	r4, #0
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
 801cf0a:	18a5      	adds	r5, r4, r2
 801cf0c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801cf10:	429d      	cmp	r5, r3
 801cf12:	d8e7      	bhi.n	801cee4 <low_level_input+0x38>
			}
			/* Copy remaining data in pbuf */
			memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 801cf14:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801cf18:	eb08 0104 	add.w	r1, r8, r4
 801cf1c:	4430      	add	r0, r6
 801cf1e:	f003 f84c 	bl	801ffba <memcpy>
		for (q = p; q != NULL; q = q->next) {
 801cf22:	f8d9 9000 	ldr.w	r9, [r9]
					(uint8_t*) ((uint8_t*) buffer + bufferoffset),
					byteslefttocopy);
			bufferoffset = bufferoffset + byteslefttocopy;
 801cf26:	462c      	mov	r4, r5
		for (q = p; q != NULL; q = q->next) {
 801cf28:	f1b9 0f00 	cmp.w	r9, #0
 801cf2c:	d003      	beq.n	801cf36 <low_level_input+0x8a>
			byteslefttocopy = q->len;
 801cf2e:	f8b9 200a 	ldrh.w	r2, [r9, #10]
			payloadoffset = 0;
 801cf32:	2600      	movs	r6, #0
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
 801cf34:	e7e9      	b.n	801cf0a <low_level_input+0x5e>
		}
	}

	/* Release descriptors to DMA */
	/* Point to first descriptor */
	dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801cf36:	4b13      	ldr	r3, [pc, #76]	; (801cf84 <low_level_input+0xd8>)
 801cf38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	/* Set Own bit in Rx descriptors: gives the buffers back to DMA */
	for (i = 0; i < heth.RxFrameInfos.SegCount; i++) {
 801cf3a:	2100      	movs	r1, #0
 801cf3c:	e005      	b.n	801cf4a <low_level_input+0x9e>
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801cf3e:	681a      	ldr	r2, [r3, #0]
 801cf40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801cf44:	601a      	str	r2, [r3, #0]
		dmarxdesc = (ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
 801cf46:	68db      	ldr	r3, [r3, #12]
	for (i = 0; i < heth.RxFrameInfos.SegCount; i++) {
 801cf48:	3101      	adds	r1, #1
 801cf4a:	4a0e      	ldr	r2, [pc, #56]	; (801cf84 <low_level_input+0xd8>)
 801cf4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801cf4e:	4291      	cmp	r1, r2
 801cf50:	d3f5      	bcc.n	801cf3e <low_level_input+0x92>
	}

	/* Clear Segment_Count */
	heth.RxFrameInfos.SegCount = 0;
 801cf52:	4b0c      	ldr	r3, [pc, #48]	; (801cf84 <low_level_input+0xd8>)
 801cf54:	2200      	movs	r2, #0
 801cf56:	639a      	str	r2, [r3, #56]	; 0x38

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	f241 0214 	movw	r2, #4116	; 0x1014
 801cf5e:	589a      	ldr	r2, [r3, r2]
 801cf60:	f012 0f80 	tst.w	r2, #128	; 0x80
 801cf64:	d007      	beq.n	801cf76 <low_level_input+0xca>
		/* Clear RBUS ETHERNET DMA flag */
		heth.Instance->DMASR = ETH_DMASR_RBUS;
 801cf66:	2180      	movs	r1, #128	; 0x80
 801cf68:	f241 0214 	movw	r2, #4116	; 0x1014
 801cf6c:	5099      	str	r1, [r3, r2]
		/* Resume DMA reception */
		heth.Instance->DMARPDR = 0;
 801cf6e:	2100      	movs	r1, #0
 801cf70:	f241 0208 	movw	r2, #4104	; 0x1008
 801cf74:	5099      	str	r1, [r3, r2]
	}
	return p;
}
 801cf76:	4650      	mov	r0, sl
 801cf78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
 801cf7c:	f04f 0a00 	mov.w	sl, #0
 801cf80:	e7f9      	b.n	801cf76 <low_level_input+0xca>
 801cf82:	bf00      	nop
 801cf84:	200105c8 	.word	0x200105c8

0801cf88 <ethernetif_input>:
 * interface. Then the type of the received packet is determined and
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument) {
 801cf88:	b538      	push	{r3, r4, r5, lr}
 801cf8a:	4605      	mov	r5, r0
	struct pbuf *p;
	struct netif *netif = (struct netif *) argument;

	for (;;) {
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK) {
 801cf8c:	f04f 31ff 	mov.w	r1, #4294967295
 801cf90:	4b0b      	ldr	r3, [pc, #44]	; (801cfc0 <ethernetif_input+0x38>)
 801cf92:	6818      	ldr	r0, [r3, #0]
 801cf94:	f7f5 fe38 	bl	8012c08 <osSemaphoreWait>
 801cf98:	2800      	cmp	r0, #0
 801cf9a:	d1f7      	bne.n	801cf8c <ethernetif_input+0x4>
 801cf9c:	e001      	b.n	801cfa2 <ethernetif_input+0x1a>
				if (p != NULL) {
					if (netif->input(p, netif) != ERR_OK) {
						pbuf_free(p);
					}
				}
			} while (p != NULL);
 801cf9e:	2c00      	cmp	r4, #0
 801cfa0:	d0f4      	beq.n	801cf8c <ethernetif_input+0x4>
				p = low_level_input(netif);
 801cfa2:	4628      	mov	r0, r5
 801cfa4:	f7ff ff82 	bl	801ceac <low_level_input>
				if (p != NULL) {
 801cfa8:	4604      	mov	r4, r0
 801cfaa:	2800      	cmp	r0, #0
 801cfac:	d0f7      	beq.n	801cf9e <ethernetif_input+0x16>
					if (netif->input(p, netif) != ERR_OK) {
 801cfae:	692b      	ldr	r3, [r5, #16]
 801cfb0:	4629      	mov	r1, r5
 801cfb2:	4798      	blx	r3
 801cfb4:	2800      	cmp	r0, #0
 801cfb6:	d0f2      	beq.n	801cf9e <ethernetif_input+0x16>
						pbuf_free(p);
 801cfb8:	4620      	mov	r0, r4
 801cfba:	f7fb f939 	bl	8018230 <pbuf_free>
 801cfbe:	e7ee      	b.n	801cf9e <ethernetif_input+0x16>
 801cfc0:	20009510 	.word	0x20009510

0801cfc4 <low_level_output>:
static err_t low_level_output(struct netif *netif, struct pbuf *p) {
 801cfc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc8:	468b      	mov	fp, r1
	uint8_t *buffer = (uint8_t *) (heth.TxDesc->Buffer1Addr);
 801cfca:	4b2c      	ldr	r3, [pc, #176]	; (801d07c <low_level_output+0xb8>)
 801cfcc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801cfce:	f8d6 a008 	ldr.w	sl, [r6, #8]
	bufferoffset = 0;
 801cfd2:	2400      	movs	r4, #0
	uint32_t framelength = 0;
 801cfd4:	4627      	mov	r7, r4
	for (q = p; q != NULL; q = q->next) {
 801cfd6:	f1bb 0f00 	cmp.w	fp, #0
 801cfda:	d032      	beq.n	801d042 <low_level_output+0x7e>
		if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
 801cfdc:	6833      	ldr	r3, [r6, #0]
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	db35      	blt.n	801d04e <low_level_output+0x8a>
		byteslefttocopy = q->len;
 801cfe2:	f8bb 900a 	ldrh.w	r9, [fp, #10]
		payloadoffset = 0;
 801cfe6:	2500      	movs	r5, #0
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
 801cfe8:	eb04 0809 	add.w	r8, r4, r9
 801cfec:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801cff0:	4598      	cmp	r8, r3
 801cff2:	d919      	bls.n	801d028 <low_level_output+0x64>
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 801cff4:	f8db 1004 	ldr.w	r1, [fp, #4]
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 801cff8:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 801cffc:	3204      	adds	r2, #4
 801cffe:	4429      	add	r1, r5
 801d000:	eb0a 0004 	add.w	r0, sl, r4
 801d004:	f002 ffd9 	bl	801ffba <memcpy>
			DmaTxDesc = (ETH_DMADescTypeDef *) (DmaTxDesc->Buffer2NextDescAddr);
 801d008:	68f6      	ldr	r6, [r6, #12]
			if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
 801d00a:	6833      	ldr	r3, [r6, #0]
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	db21      	blt.n	801d054 <low_level_output+0x90>
			buffer = (uint8_t *) (DmaTxDesc->Buffer1Addr);
 801d010:	f8d6 a008 	ldr.w	sl, [r6, #8]
			byteslefttocopy = byteslefttocopy
 801d014:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801d018:	1b2d      	subs	r5, r5, r4
 801d01a:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801d01e:	1b3f      	subs	r7, r7, r4
 801d020:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
			bufferoffset = 0;
 801d024:	2400      	movs	r4, #0
 801d026:	e7df      	b.n	801cfe8 <low_level_output+0x24>
				(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 801d028:	f8db 1004 	ldr.w	r1, [fp, #4]
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 801d02c:	464a      	mov	r2, r9
 801d02e:	4429      	add	r1, r5
 801d030:	eb0a 0004 	add.w	r0, sl, r4
 801d034:	f002 ffc1 	bl	801ffba <memcpy>
		framelength = framelength + byteslefttocopy;
 801d038:	444f      	add	r7, r9
	for (q = p; q != NULL; q = q->next) {
 801d03a:	f8db b000 	ldr.w	fp, [fp]
		bufferoffset = bufferoffset + byteslefttocopy;
 801d03e:	4644      	mov	r4, r8
 801d040:	e7c9      	b.n	801cfd6 <low_level_output+0x12>
	HAL_ETH_TransmitFrame(&heth, framelength);
 801d042:	4639      	mov	r1, r7
 801d044:	480d      	ldr	r0, [pc, #52]	; (801d07c <low_level_output+0xb8>)
 801d046:	f7f3 fdcf 	bl	8010be8 <HAL_ETH_TransmitFrame>
	errval = ERR_OK;
 801d04a:	2000      	movs	r0, #0
 801d04c:	e004      	b.n	801d058 <low_level_output+0x94>
			errval = ERR_USE;
 801d04e:	f06f 0007 	mvn.w	r0, #7
 801d052:	e001      	b.n	801d058 <low_level_output+0x94>
				errval = ERR_USE;
 801d054:	f06f 0007 	mvn.w	r0, #7
	if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t) RESET) {
 801d058:	4b08      	ldr	r3, [pc, #32]	; (801d07c <low_level_output+0xb8>)
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	f241 0214 	movw	r2, #4116	; 0x1014
 801d060:	589a      	ldr	r2, [r3, r2]
 801d062:	f012 0f20 	tst.w	r2, #32
 801d066:	d007      	beq.n	801d078 <low_level_output+0xb4>
		heth.Instance->DMASR = ETH_DMASR_TUS;
 801d068:	2120      	movs	r1, #32
 801d06a:	f241 0214 	movw	r2, #4116	; 0x1014
 801d06e:	5099      	str	r1, [r3, r2]
		heth.Instance->DMATPDR = 0;
 801d070:	2100      	movs	r1, #0
 801d072:	f241 0204 	movw	r2, #4100	; 0x1004
 801d076:	5099      	str	r1, [r3, r2]
}
 801d078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d07c:	200105c8 	.word	0x200105c8

0801d080 <low_level_init>:
static void low_level_init(struct netif *netif) {
 801d080:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d082:	b08d      	sub	sp, #52	; 0x34
 801d084:	4604      	mov	r4, r0
	heth.Instance = ETH;
 801d086:	483a      	ldr	r0, [pc, #232]	; (801d170 <low_level_init+0xf0>)
 801d088:	4b3a      	ldr	r3, [pc, #232]	; (801d174 <low_level_init+0xf4>)
 801d08a:	6003      	str	r3, [r0, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801d08c:	2201      	movs	r2, #1
 801d08e:	6042      	str	r2, [r0, #4]
	heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 801d090:	8202      	strh	r2, [r0, #16]
	MACAddr[0] = hflash.mac_addr[0];
 801d092:	4b39      	ldr	r3, [pc, #228]	; (801d178 <low_level_init+0xf8>)
 801d094:	7f99      	ldrb	r1, [r3, #30]
 801d096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
	MACAddr[1] = hflash.mac_addr[1];
 801d09a:	7fd9      	ldrb	r1, [r3, #31]
 801d09c:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
	MACAddr[2] = hflash.mac_addr[2];
 801d0a0:	f893 1020 	ldrb.w	r1, [r3, #32]
 801d0a4:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
	MACAddr[3] = hflash.mac_addr[3];
 801d0a8:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 801d0ac:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
	MACAddr[4] = hflash.mac_addr[4];
 801d0b0:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 801d0b4:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
	MACAddr[5] = hflash.mac_addr[5];
 801d0b8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d0bc:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	heth.Init.MACAddr = &MACAddr[0];
 801d0c0:	ab0a      	add	r3, sp, #40	; 0x28
 801d0c2:	6143      	str	r3, [r0, #20]
	heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 801d0c4:	6182      	str	r2, [r0, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801d0c6:	2300      	movs	r3, #0
 801d0c8:	61c3      	str	r3, [r0, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801d0ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801d0ce:	6203      	str	r3, [r0, #32]
	hal_eth_init_status = HAL_ETH_Init(&heth);
 801d0d0:	f7f3 ff26 	bl	8010f20 <HAL_ETH_Init>
	if (hal_eth_init_status == HAL_OK) {
 801d0d4:	b928      	cbnz	r0, 801d0e2 <low_level_init+0x62>
		netif->flags |= NETIF_FLAG_LINK_UP;
 801d0d6:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801d0da:	f043 0304 	orr.w	r3, r3, #4
 801d0de:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801d0e2:	4f23      	ldr	r7, [pc, #140]	; (801d170 <low_level_init+0xf0>)
 801d0e4:	2304      	movs	r3, #4
 801d0e6:	4a25      	ldr	r2, [pc, #148]	; (801d17c <low_level_init+0xfc>)
 801d0e8:	4925      	ldr	r1, [pc, #148]	; (801d180 <low_level_init+0x100>)
 801d0ea:	4638      	mov	r0, r7
 801d0ec:	f7f3 fd0c 	bl	8010b08 <HAL_ETH_DMATxDescListInit>
	HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801d0f0:	2304      	movs	r3, #4
 801d0f2:	4a24      	ldr	r2, [pc, #144]	; (801d184 <low_level_init+0x104>)
 801d0f4:	4924      	ldr	r1, [pc, #144]	; (801d188 <low_level_init+0x108>)
 801d0f6:	4638      	mov	r0, r7
 801d0f8:	f7f3 fd3f 	bl	8010b7a <HAL_ETH_DMARxDescListInit>
	netif->hwaddr_len = ETH_HWADDR_LEN;
 801d0fc:	2306      	movs	r3, #6
 801d0fe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	netif->hwaddr[0] = heth.Init.MACAddr[0];
 801d102:	697b      	ldr	r3, [r7, #20]
 801d104:	781a      	ldrb	r2, [r3, #0]
 801d106:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	netif->hwaddr[1] = heth.Init.MACAddr[1];
 801d10a:	785a      	ldrb	r2, [r3, #1]
 801d10c:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	netif->hwaddr[2] = heth.Init.MACAddr[2];
 801d110:	789a      	ldrb	r2, [r3, #2]
 801d112:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
	netif->hwaddr[3] = heth.Init.MACAddr[3];
 801d116:	78da      	ldrb	r2, [r3, #3]
 801d118:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	netif->hwaddr[4] = heth.Init.MACAddr[4];
 801d11c:	791a      	ldrb	r2, [r3, #4]
 801d11e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
	netif->hwaddr[5] = heth.Init.MACAddr[5];
 801d122:	795b      	ldrb	r3, [r3, #5]
 801d124:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	netif->mtu = 1500;
 801d128:	f240 53dc 	movw	r3, #1500	; 0x5dc
 801d12c:	8463      	strh	r3, [r4, #34]	; 0x22
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801d12e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801d132:	f043 030a 	orr.w	r3, r3, #10
 801d136:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	osSemaphoreDef(SEM);
 801d13a:	2300      	movs	r3, #0
 801d13c:	9308      	str	r3, [sp, #32]
 801d13e:	9309      	str	r3, [sp, #36]	; 0x24
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801d140:	2101      	movs	r1, #1
 801d142:	a808      	add	r0, sp, #32
 801d144:	f7f5 fd3a 	bl	8012bbc <osSemaphoreCreate>
 801d148:	4b10      	ldr	r3, [pc, #64]	; (801d18c <low_level_init+0x10c>)
 801d14a:	6018      	str	r0, [r3, #0]
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 801d14c:	ad01      	add	r5, sp, #4
 801d14e:	4e10      	ldr	r6, [pc, #64]	; (801d190 <low_level_init+0x110>)
 801d150:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d154:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d158:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	osThreadCreate(osThread(EthIf), netif);
 801d15c:	4621      	mov	r1, r4
 801d15e:	a801      	add	r0, sp, #4
 801d160:	f7f5 fc7b 	bl	8012a5a <osThreadCreate>
	HAL_ETH_Start(&heth);
 801d164:	4638      	mov	r0, r7
 801d166:	f7f4 f807 	bl	8011178 <HAL_ETH_Start>
}
 801d16a:	b00d      	add	sp, #52	; 0x34
 801d16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d16e:	bf00      	nop
 801d170:	200105c8 	.word	0x200105c8
 801d174:	40028000 	.word	0x40028000
 801d178:	2000ecd4 	.word	0x2000ecd4
 801d17c:	20010610 	.word	0x20010610
 801d180:	2000ecf8 	.word	0x2000ecf8
 801d184:	2000ed78 	.word	0x2000ed78
 801d188:	20010548 	.word	0x20010548
 801d18c:	20009510 	.word	0x20009510
 801d190:	08020a30 	.word	0x08020a30

0801d194 <HAL_ETH_MspInit>:
	if (ethHandle->Instance == ETH) {
 801d194:	6802      	ldr	r2, [r0, #0]
 801d196:	4b29      	ldr	r3, [pc, #164]	; (801d23c <HAL_ETH_MspInit+0xa8>)
 801d198:	429a      	cmp	r2, r3
 801d19a:	d000      	beq.n	801d19e <HAL_ETH_MspInit+0xa>
 801d19c:	4770      	bx	lr
void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle) {
 801d19e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1a0:	b089      	sub	sp, #36	; 0x24
		__HAL_RCC_ETH_CLK_ENABLE()
 801d1a2:	2400      	movs	r4, #0
 801d1a4:	9400      	str	r4, [sp, #0]
 801d1a6:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 801d1aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d1ac:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 801d1b0:	631a      	str	r2, [r3, #48]	; 0x30
 801d1b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d1b4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 801d1b8:	9200      	str	r2, [sp, #0]
 801d1ba:	9a00      	ldr	r2, [sp, #0]
 801d1bc:	9401      	str	r4, [sp, #4]
 801d1be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d1c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801d1c4:	631a      	str	r2, [r3, #48]	; 0x30
 801d1c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d1c8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801d1cc:	9201      	str	r2, [sp, #4]
 801d1ce:	9a01      	ldr	r2, [sp, #4]
 801d1d0:	9402      	str	r4, [sp, #8]
 801d1d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d1d4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801d1d8:	631a      	str	r2, [r3, #48]	; 0x30
 801d1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d1dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d1e0:	9302      	str	r3, [sp, #8]
 801d1e2:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 801d1e4:	2332      	movs	r3, #50	; 0x32
 801d1e6:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d1e8:	2702      	movs	r7, #2
 801d1ea:	9704      	str	r7, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d1ec:	9405      	str	r4, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d1ee:	2603      	movs	r6, #3
 801d1f0:	9606      	str	r6, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d1f2:	250b      	movs	r5, #11
 801d1f4:	9507      	str	r5, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d1f6:	a903      	add	r1, sp, #12
 801d1f8:	4811      	ldr	r0, [pc, #68]	; (801d240 <HAL_ETH_MspInit+0xac>)
 801d1fa:	f7f4 f9af 	bl	801155c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 801d1fe:	2386      	movs	r3, #134	; 0x86
 801d200:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d202:	9704      	str	r7, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d204:	9405      	str	r4, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d206:	9606      	str	r6, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d208:	9507      	str	r5, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d20a:	a903      	add	r1, sp, #12
 801d20c:	480d      	ldr	r0, [pc, #52]	; (801d244 <HAL_ETH_MspInit+0xb0>)
 801d20e:	f7f4 f9a5 	bl	801155c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 801d212:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801d216:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d218:	9704      	str	r7, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d21a:	9405      	str	r4, [sp, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d21c:	9606      	str	r6, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d21e:	9507      	str	r5, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801d220:	a903      	add	r1, sp, #12
 801d222:	4809      	ldr	r0, [pc, #36]	; (801d248 <HAL_ETH_MspInit+0xb4>)
 801d224:	f7f4 f99a 	bl	801155c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 801d228:	4622      	mov	r2, r4
 801d22a:	2105      	movs	r1, #5
 801d22c:	203d      	movs	r0, #61	; 0x3d
 801d22e:	f7f3 f901 	bl	8010434 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ETH_IRQn);
 801d232:	203d      	movs	r0, #61	; 0x3d
 801d234:	f7f3 f930 	bl	8010498 <HAL_NVIC_EnableIRQ>
}
 801d238:	b009      	add	sp, #36	; 0x24
 801d23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d23c:	40028000 	.word	0x40028000
 801d240:	40020800 	.word	0x40020800
 801d244:	40020000 	.word	0x40020000
 801d248:	40020400 	.word	0x40020400

0801d24c <HAL_ETH_RxCpltCallback>:
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth) {
 801d24c:	b508      	push	{r3, lr}
	osSemaphoreRelease(s_xSemaphore);
 801d24e:	4b02      	ldr	r3, [pc, #8]	; (801d258 <HAL_ETH_RxCpltCallback+0xc>)
 801d250:	6818      	ldr	r0, [r3, #0]
 801d252:	f7f5 fd13 	bl	8012c7c <osSemaphoreRelease>
 801d256:	bd08      	pop	{r3, pc}
 801d258:	20009510 	.word	0x20009510

0801d25c <ethernetif_init>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif) {
 801d25c:	b510      	push	{r4, lr}
	LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d25e:	4604      	mov	r4, r0
 801d260:	b170      	cbz	r0, 801d280 <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
 801d262:	2373      	movs	r3, #115	; 0x73
 801d264:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	netif->name[1] = IFNAME1;
 801d268:	2374      	movs	r3, #116	; 0x74
 801d26a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	 * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
	netif->output = etharp_output;
 801d26e:	4b08      	ldr	r3, [pc, #32]	; (801d290 <ethernetif_init+0x34>)
 801d270:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
	netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

	netif->linkoutput = low_level_output;
 801d272:	4b08      	ldr	r3, [pc, #32]	; (801d294 <ethernetif_init+0x38>)
 801d274:	61a3      	str	r3, [r4, #24]

	/* initialize the hardware */
	low_level_init(netif);
 801d276:	4620      	mov	r0, r4
 801d278:	f7ff ff02 	bl	801d080 <low_level_init>

	return ERR_OK;
}
 801d27c:	2000      	movs	r0, #0
 801d27e:	bd10      	pop	{r4, pc}
	LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d280:	4b05      	ldr	r3, [pc, #20]	; (801d298 <ethernetif_init+0x3c>)
 801d282:	f240 2229 	movw	r2, #553	; 0x229
 801d286:	4905      	ldr	r1, [pc, #20]	; (801d29c <ethernetif_init+0x40>)
 801d288:	4805      	ldr	r0, [pc, #20]	; (801d2a0 <ethernetif_init+0x44>)
 801d28a:	f002 f852 	bl	801f332 <iprintf>
 801d28e:	e7e8      	b.n	801d262 <ethernetif_init+0x6>
 801d290:	08016899 	.word	0x08016899
 801d294:	0801cfc5 	.word	0x0801cfc5
 801d298:	08025788 	.word	0x08025788
 801d29c:	08023fec 	.word	0x08023fec
 801d2a0:	08020b90 	.word	0x08020b90

0801d2a4 <sys_now>:
 * @brief  Returns the current time in milliseconds
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void) {
 801d2a4:	b508      	push	{r3, lr}
	return HAL_GetTick();
 801d2a6:	f7f3 f899 	bl	80103dc <HAL_GetTick>
}
 801d2aa:	bd08      	pop	{r3, pc}

0801d2ac <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 801d2ac:	b510      	push	{r4, lr}
 801d2ae:	b086      	sub	sp, #24
	/* init code for LWIP */
	MX_LWIP_Init();
 801d2b0:	f000 ff0c 	bl	801e0cc <MX_LWIP_Init>

	/* USER CODE BEGIN StartDefaultTask */

	struct netconn *conn_port80;
	err_t err;
	conn_port80 = netconn_new(NETCONN_TCP);
 801d2b4:	2200      	movs	r2, #0
 801d2b6:	4611      	mov	r1, r2
 801d2b8:	2010      	movs	r0, #16
 801d2ba:	f7f7 fb99 	bl	80149f0 <netconn_new_with_proto_and_callback>
	if (conn_port80 != NULL) {
 801d2be:	b198      	cbz	r0, 801d2e8 <StartDefaultTask+0x3c>
 801d2c0:	4604      	mov	r4, r0
		err = netconn_bind(conn_port80, IP_ADDR_ANY, 80);
 801d2c2:	2250      	movs	r2, #80	; 0x50
 801d2c4:	4937      	ldr	r1, [pc, #220]	; (801d3a4 <StartDefaultTask+0xf8>)
 801d2c6:	f7f7 fc09 	bl	8014adc <netconn_bind>
		if (err == ERR_OK) {
 801d2ca:	2800      	cmp	r0, #0
 801d2cc:	d161      	bne.n	801d392 <StartDefaultTask+0xe6>
			netconn_listen(conn_port80);
 801d2ce:	21ff      	movs	r1, #255	; 0xff
 801d2d0:	4620      	mov	r0, r4
 801d2d2:	f7f7 fc29 	bl	8014b28 <netconn_listen_with_backlog>
			sys_thread_new("web_thread", Web_thread, (void*) conn_port80,
 801d2d6:	2300      	movs	r3, #0
 801d2d8:	9300      	str	r3, [sp, #0]
 801d2da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d2de:	4622      	mov	r2, r4
 801d2e0:	4931      	ldr	r1, [pc, #196]	; (801d3a8 <StartDefaultTask+0xfc>)
 801d2e2:	4832      	ldr	r0, [pc, #200]	; (801d3ac <StartDefaultTask+0x100>)
 801d2e4:	f7ff f97b 	bl	801c5de <sys_thread_new>
			netconn_delete(conn_port80);
		}
	}

	struct netconn *conn_port102;
	conn_port102 = netconn_new(NETCONN_TCP);
 801d2e8:	2200      	movs	r2, #0
 801d2ea:	4611      	mov	r1, r2
 801d2ec:	2010      	movs	r0, #16
 801d2ee:	f7f7 fb7f 	bl	80149f0 <netconn_new_with_proto_and_callback>
	if (conn_port102 != NULL) {
 801d2f2:	4604      	mov	r4, r0
 801d2f4:	b198      	cbz	r0, 801d31e <StartDefaultTask+0x72>
		err = netconn_bind(conn_port102, IP_ADDR_ANY, hflash.port);
 801d2f6:	4b2e      	ldr	r3, [pc, #184]	; (801d3b0 <StartDefaultTask+0x104>)
 801d2f8:	8a5a      	ldrh	r2, [r3, #18]
 801d2fa:	492a      	ldr	r1, [pc, #168]	; (801d3a4 <StartDefaultTask+0xf8>)
 801d2fc:	f7f7 fbee 	bl	8014adc <netconn_bind>
		if (err == ERR_OK) {
 801d300:	2800      	cmp	r0, #0
 801d302:	d14a      	bne.n	801d39a <StartDefaultTask+0xee>
			netconn_listen(conn_port102);
 801d304:	21ff      	movs	r1, #255	; 0xff
 801d306:	4620      	mov	r0, r4
 801d308:	f7f7 fc0e 	bl	8014b28 <netconn_listen_with_backlog>
			sys_thread_new("tcp_serv_thread", Client_thread,
 801d30c:	2301      	movs	r3, #1
 801d30e:	9300      	str	r3, [sp, #0]
 801d310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d314:	4622      	mov	r2, r4
 801d316:	4927      	ldr	r1, [pc, #156]	; (801d3b4 <StartDefaultTask+0x108>)
 801d318:	4827      	ldr	r0, [pc, #156]	; (801d3b8 <StartDefaultTask+0x10c>)
 801d31a:	f7ff f960 	bl	801c5de <sys_thread_new>
		} else {
			netconn_delete(conn_port102);
		}
	}

	uint8_t data_conn1[] = { 0x80, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01,
 801d31e:	4a27      	ldr	r2, [pc, #156]	; (801d3bc <StartDefaultTask+0x110>)
 801d320:	ab03      	add	r3, sp, #12
 801d322:	ca07      	ldmia	r2, {r0, r1, r2}
 801d324:	c303      	stmia	r3!, {r0, r1}
 801d326:	701a      	strb	r2, [r3, #0]
			0x00 };
	uint8_t * request_data;
	request_data = (uint8_t*) pvPortMalloc(sizeof(data_conn1));
 801d328:	2009      	movs	r0, #9
 801d32a:	f7f5 ffd9 	bl	80132e0 <pvPortMalloc>
 801d32e:	4602      	mov	r2, r0
	memcpy(request_data, data_conn1, sizeof(data_conn1));
 801d330:	ab03      	add	r3, sp, #12
 801d332:	cb03      	ldmia	r3!, {r0, r1}
 801d334:	6010      	str	r0, [r2, #0]
 801d336:	6051      	str	r1, [r2, #4]
 801d338:	781b      	ldrb	r3, [r3, #0]
 801d33a:	7213      	strb	r3, [r2, #8]
	hprot.data_len = sizeof(data_conn1);
 801d33c:	4b20      	ldr	r3, [pc, #128]	; (801d3c0 <StartDefaultTask+0x114>)
 801d33e:	2109      	movs	r1, #9
 801d340:	7419      	strb	r1, [r3, #16]
	hprot.data_ptr = request_data;
 801d342:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 801d344:	4c1f      	ldr	r4, [pc, #124]	; (801d3c4 <StartDefaultTask+0x118>)
 801d346:	2201      	movs	r2, #1
 801d348:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d34c:	4620      	mov	r0, r4
 801d34e:	f7f4 f9eb 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 801d352:	2200      	movs	r2, #0
 801d354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d358:	4620      	mov	r0, r4
 801d35a:	f7f4 f9e5 	bl	8011728 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for (;;) {

#ifdef DEBUG_ON
		printf("Free heap: %d\r\n", xPortGetMinimumEverFreeHeapSize());
 801d35e:	f7f6 f87b 	bl	8013458 <xPortGetMinimumEverFreeHeapSize>
 801d362:	4601      	mov	r1, r0
 801d364:	4818      	ldr	r0, [pc, #96]	; (801d3c8 <StartDefaultTask+0x11c>)
 801d366:	f001 ffe4 	bl	801f332 <iprintf>
#endif /* #ifdef DEBUG_ON */
		osDelay(500);
 801d36a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801d36e:	f7f5 fba9 	bl	8012ac4 <osDelay>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 801d372:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d376:	4813      	ldr	r0, [pc, #76]	; (801d3c4 <StartDefaultTask+0x118>)
 801d378:	f7f4 f9dc 	bl	8011734 <HAL_GPIO_TogglePin>
		if (reboot_flag) {
 801d37c:	4b13      	ldr	r3, [pc, #76]	; (801d3cc <StartDefaultTask+0x120>)
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	2b00      	cmp	r3, #0
 801d382:	d0ec      	beq.n	801d35e <StartDefaultTask+0xb2>
			osDelay(30);
 801d384:	201e      	movs	r0, #30
 801d386:	f7f5 fb9d 	bl	8012ac4 <osDelay>
			SCB->AIRCR = 0x05FA0004; /* Software reset */
 801d38a:	4a11      	ldr	r2, [pc, #68]	; (801d3d0 <StartDefaultTask+0x124>)
 801d38c:	4b11      	ldr	r3, [pc, #68]	; (801d3d4 <StartDefaultTask+0x128>)
 801d38e:	60da      	str	r2, [r3, #12]
 801d390:	e7e5      	b.n	801d35e <StartDefaultTask+0xb2>
			netconn_delete(conn_port80);
 801d392:	4620      	mov	r0, r4
 801d394:	f7f7 fb88 	bl	8014aa8 <netconn_delete>
 801d398:	e7a6      	b.n	801d2e8 <StartDefaultTask+0x3c>
			netconn_delete(conn_port102);
 801d39a:	4620      	mov	r0, r4
 801d39c:	f7f7 fb84 	bl	8014aa8 <netconn_delete>
 801d3a0:	e7bd      	b.n	801d31e <StartDefaultTask+0x72>
 801d3a2:	bf00      	nop
 801d3a4:	08024220 	.word	0x08024220
 801d3a8:	0801fbfd 	.word	0x0801fbfd
 801d3ac:	080257e8 	.word	0x080257e8
 801d3b0:	2000ecd4 	.word	0x2000ecd4
 801d3b4:	0801eeb9 	.word	0x0801eeb9
 801d3b8:	080257f4 	.word	0x080257f4
 801d3bc:	08020a4c 	.word	0x08020a4c
 801d3c0:	20011ecc 	.word	0x20011ecc
 801d3c4:	40021000 	.word	0x40021000
 801d3c8:	08025804 	.word	0x08025804
 801d3cc:	2000a198 	.word	0x2000a198
 801d3d0:	05fa0004 	.word	0x05fa0004
 801d3d4:	e000ed00 	.word	0xe000ed00

0801d3d8 <StartHeapCleanerTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
//---------------------------------------------------------------
void StartHeapCleanerTask(void const * argument) {
 801d3d8:	b500      	push	{lr}
 801d3da:	b083      	sub	sp, #12
	uint8_t * heap_ptr;
	for (;;) {
		xQueueReceive(cleaner_queue, &heap_ptr, portMAX_DELAY);
 801d3dc:	2300      	movs	r3, #0
 801d3de:	f04f 32ff 	mov.w	r2, #4294967295
 801d3e2:	a901      	add	r1, sp, #4
 801d3e4:	4804      	ldr	r0, [pc, #16]	; (801d3f8 <StartHeapCleanerTask+0x20>)
 801d3e6:	6800      	ldr	r0, [r0, #0]
 801d3e8:	f7f6 fb5c 	bl	8013aa4 <xQueueGenericReceive>
		vPortFree((uint8_t *) heap_ptr);
 801d3ec:	9801      	ldr	r0, [sp, #4]
 801d3ee:	f7f5 fffb 	bl	80133e8 <vPortFree>
		heap_ptr = NULL;
 801d3f2:	2300      	movs	r3, #0
 801d3f4:	9301      	str	r3, [sp, #4]
 801d3f6:	e7f1      	b.n	801d3dc <StartHeapCleanerTask+0x4>
 801d3f8:	20011df4 	.word	0x20011df4

0801d3fc <configureTimerForRunTimeStats>:
__weak void configureTimerForRunTimeStats(void) {
 801d3fc:	b508      	push	{r3, lr}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801d3fe:	4b06      	ldr	r3, [pc, #24]	; (801d418 <configureTimerForRunTimeStats+0x1c>)
 801d400:	2200      	movs	r2, #0
 801d402:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801d406:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801d40a:	605a      	str	r2, [r3, #4]
	MX_TIM7_Init();
 801d40c:	f001 fe16 	bl	801f03c <MX_TIM7_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 801d410:	4802      	ldr	r0, [pc, #8]	; (801d41c <configureTimerForRunTimeStats+0x20>)
 801d412:	f7f4 fd08 	bl	8011e26 <HAL_TIM_Base_Start_IT>
 801d416:	bd08      	pop	{r3, pc}
 801d418:	e000e100 	.word	0xe000e100
 801d41c:	20011f60 	.word	0x20011f60

0801d420 <getRunTimeCounterValue>:
	return ulHighFrequencyTimerTicks;
 801d420:	4b01      	ldr	r3, [pc, #4]	; (801d428 <getRunTimeCounterValue+0x8>)
 801d422:	6818      	ldr	r0, [r3, #0]
}
 801d424:	4770      	bx	lr
 801d426:	bf00      	nop
 801d428:	20009514 	.word	0x20009514

0801d42c <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 801d42c:	4b03      	ldr	r3, [pc, #12]	; (801d43c <vApplicationGetIdleTaskMemory+0x10>)
 801d42e:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 801d430:	4b03      	ldr	r3, [pc, #12]	; (801d440 <vApplicationGetIdleTaskMemory+0x14>)
 801d432:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 801d434:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d438:	6013      	str	r3, [r2, #0]
 801d43a:	4770      	bx	lr
 801d43c:	20009d18 	.word	0x20009d18
 801d440:	20009518 	.word	0x20009518

0801d444 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 801d444:	b570      	push	{r4, r5, r6, lr}
 801d446:	b096      	sub	sp, #88	; 0x58
	osThreadDef(processTask, StartProcessTask, osPriorityRealtime, 0, 1024);
 801d448:	4c2b      	ldr	r4, [pc, #172]	; (801d4f8 <MX_FREERTOS_Init+0xb4>)
 801d44a:	ad0f      	add	r5, sp, #60	; 0x3c
 801d44c:	f104 060c 	add.w	r6, r4, #12
 801d450:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d454:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d458:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	processTaskHandle = osThreadCreate(osThread(processTask), NULL);
 801d45c:	2100      	movs	r1, #0
 801d45e:	a80f      	add	r0, sp, #60	; 0x3c
 801d460:	f7f5 fafb 	bl	8012a5a <osThreadCreate>
 801d464:	4b25      	ldr	r3, [pc, #148]	; (801d4fc <MX_FREERTOS_Init+0xb8>)
 801d466:	6018      	str	r0, [r3, #0]
	osThreadDef(cleanerTask, StartHeapCleanerTask, osPriorityAboveNormal, 0,
 801d468:	ad08      	add	r5, sp, #32
 801d46a:	f104 0628 	add.w	r6, r4, #40	; 0x28
 801d46e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d472:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d476:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	heapCleanerHandle = osThreadCreate(osThread(cleanerTask), NULL);
 801d47a:	2100      	movs	r1, #0
 801d47c:	a808      	add	r0, sp, #32
 801d47e:	f7f5 faec 	bl	8012a5a <osThreadCreate>
 801d482:	4b1f      	ldr	r3, [pc, #124]	; (801d500 <MX_FREERTOS_Init+0xbc>)
 801d484:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 801d486:	ad01      	add	r5, sp, #4
 801d488:	3444      	adds	r4, #68	; 0x44
 801d48a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d48c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d48e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d492:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801d496:	2100      	movs	r1, #0
 801d498:	a801      	add	r0, sp, #4
 801d49a:	f7f5 fade 	bl	8012a5a <osThreadCreate>
 801d49e:	4b19      	ldr	r3, [pc, #100]	; (801d504 <MX_FREERTOS_Init+0xc0>)
 801d4a0:	6018      	str	r0, [r3, #0]
	frames_queue = xQueueCreate(16, sizeof(uint16_t));
 801d4a2:	2200      	movs	r2, #0
 801d4a4:	2102      	movs	r1, #2
 801d4a6:	2010      	movs	r0, #16
 801d4a8:	f7f6 f91d 	bl	80136e6 <xQueueGenericCreate>
 801d4ac:	4b16      	ldr	r3, [pc, #88]	; (801d508 <MX_FREERTOS_Init+0xc4>)
 801d4ae:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(frames_queue, "frames_queue");
 801d4b0:	4916      	ldr	r1, [pc, #88]	; (801d50c <MX_FREERTOS_Init+0xc8>)
 801d4b2:	f7f6 fc49 	bl	8013d48 <vQueueAddToRegistry>
	cleaner_queue = xQueueCreate(16, sizeof(uint8_t*));
 801d4b6:	2200      	movs	r2, #0
 801d4b8:	2104      	movs	r1, #4
 801d4ba:	2010      	movs	r0, #16
 801d4bc:	f7f6 f913 	bl	80136e6 <xQueueGenericCreate>
 801d4c0:	4b13      	ldr	r3, [pc, #76]	; (801d510 <MX_FREERTOS_Init+0xcc>)
 801d4c2:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(cleaner_queue, "cleaner_queue");
 801d4c4:	4913      	ldr	r1, [pc, #76]	; (801d514 <MX_FREERTOS_Init+0xd0>)
 801d4c6:	f7f6 fc3f 	bl	8013d48 <vQueueAddToRegistry>
	tcp_client_queue = xQueueCreate(8, sizeof(parcel_t));
 801d4ca:	2200      	movs	r2, #0
 801d4cc:	2108      	movs	r1, #8
 801d4ce:	4608      	mov	r0, r1
 801d4d0:	f7f6 f909 	bl	80136e6 <xQueueGenericCreate>
 801d4d4:	4b10      	ldr	r3, [pc, #64]	; (801d518 <MX_FREERTOS_Init+0xd4>)
 801d4d6:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(tcp_client_queue, "tcp_client_queue");
 801d4d8:	4910      	ldr	r1, [pc, #64]	; (801d51c <MX_FREERTOS_Init+0xd8>)
 801d4da:	f7f6 fc35 	bl	8013d48 <vQueueAddToRegistry>
	protocol_queue = xQueueCreate(8, sizeof(parcel_t));
 801d4de:	2200      	movs	r2, #0
 801d4e0:	2108      	movs	r1, #8
 801d4e2:	4608      	mov	r0, r1
 801d4e4:	f7f6 f8ff 	bl	80136e6 <xQueueGenericCreate>
 801d4e8:	4b0d      	ldr	r3, [pc, #52]	; (801d520 <MX_FREERTOS_Init+0xdc>)
 801d4ea:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(protocol_queue, "protocol_queue");
 801d4ec:	490d      	ldr	r1, [pc, #52]	; (801d524 <MX_FREERTOS_Init+0xe0>)
 801d4ee:	f7f6 fc2b 	bl	8013d48 <vQueueAddToRegistry>
}
 801d4f2:	b016      	add	sp, #88	; 0x58
 801d4f4:	bd70      	pop	{r4, r5, r6, pc}
 801d4f6:	bf00      	nop
 801d4f8:	08020a4c 	.word	0x08020a4c
 801d4fc:	20011df0 	.word	0x20011df0
 801d500:	20011de8 	.word	0x20011de8
 801d504:	20011de0 	.word	0x20011de0
 801d508:	20011de4 	.word	0x20011de4
 801d50c:	080257a4 	.word	0x080257a4
 801d510:	20011df4 	.word	0x20011df4
 801d514:	080257b4 	.word	0x080257b4
 801d518:	20011f20 	.word	0x20011f20
 801d51c:	080257c4 	.word	0x080257c4
 801d520:	20011ee0 	.word	0x20011ee0
 801d524:	080257d8 	.word	0x080257d8

0801d528 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801d528:	b530      	push	{r4, r5, lr}
 801d52a:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d52c:	2400      	movs	r4, #0
 801d52e:	9407      	str	r4, [sp, #28]
 801d530:	9408      	str	r4, [sp, #32]
 801d532:	9409      	str	r4, [sp, #36]	; 0x24
 801d534:	940a      	str	r4, [sp, #40]	; 0x28
 801d536:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801d538:	9401      	str	r4, [sp, #4]
 801d53a:	4b28      	ldr	r3, [pc, #160]	; (801d5dc <MX_GPIO_Init+0xb4>)
 801d53c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d53e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801d542:	631a      	str	r2, [r3, #48]	; 0x30
 801d544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d546:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801d54a:	9201      	str	r2, [sp, #4]
 801d54c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801d54e:	9402      	str	r4, [sp, #8]
 801d550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d552:	f042 0204 	orr.w	r2, r2, #4
 801d556:	631a      	str	r2, [r3, #48]	; 0x30
 801d558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d55a:	f002 0204 	and.w	r2, r2, #4
 801d55e:	9202      	str	r2, [sp, #8]
 801d560:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801d562:	9403      	str	r4, [sp, #12]
 801d564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d566:	f042 0201 	orr.w	r2, r2, #1
 801d56a:	631a      	str	r2, [r3, #48]	; 0x30
 801d56c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d56e:	f002 0201 	and.w	r2, r2, #1
 801d572:	9203      	str	r2, [sp, #12]
 801d574:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801d576:	9404      	str	r4, [sp, #16]
 801d578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d57a:	f042 0210 	orr.w	r2, r2, #16
 801d57e:	631a      	str	r2, [r3, #48]	; 0x30
 801d580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d582:	f002 0210 	and.w	r2, r2, #16
 801d586:	9204      	str	r2, [sp, #16]
 801d588:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801d58a:	9405      	str	r4, [sp, #20]
 801d58c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d58e:	f042 0202 	orr.w	r2, r2, #2
 801d592:	631a      	str	r2, [r3, #48]	; 0x30
 801d594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d596:	f002 0202 	and.w	r2, r2, #2
 801d59a:	9205      	str	r2, [sp, #20]
 801d59c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801d59e:	9406      	str	r4, [sp, #24]
 801d5a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d5a2:	f042 0208 	orr.w	r2, r2, #8
 801d5a6:	631a      	str	r2, [r3, #48]	; 0x30
 801d5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d5aa:	f003 0308 	and.w	r3, r3, #8
 801d5ae:	9306      	str	r3, [sp, #24]
 801d5b0:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 801d5b2:	4d0b      	ldr	r5, [pc, #44]	; (801d5e0 <MX_GPIO_Init+0xb8>)
 801d5b4:	4622      	mov	r2, r4
 801d5b6:	f240 6101 	movw	r1, #1537	; 0x601
 801d5ba:	4628      	mov	r0, r5
 801d5bc:	f7f4 f8b4 	bl	8011728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin;
 801d5c0:	f240 6301 	movw	r3, #1537	; 0x601
 801d5c4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d5c6:	2301      	movs	r3, #1
 801d5c8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d5ca:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d5cc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801d5ce:	a907      	add	r1, sp, #28
 801d5d0:	4628      	mov	r0, r5
 801d5d2:	f7f3 ffc3 	bl	801155c <HAL_GPIO_Init>

}
 801d5d6:	b00d      	add	sp, #52	; 0x34
 801d5d8:	bd30      	pop	{r4, r5, pc}
 801d5da:	bf00      	nop
 801d5dc:	40023800 	.word	0x40023800
 801d5e0:	40021000 	.word	0x40021000

0801d5e4 <MX_IWDG_Init>:
IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
  hiwdg.Instance = IWDG;
 801d5e4:	4b04      	ldr	r3, [pc, #16]	; (801d5f8 <MX_IWDG_Init+0x14>)
 801d5e6:	4a05      	ldr	r2, [pc, #20]	; (801d5fc <MX_IWDG_Init+0x18>)
 801d5e8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 400;
 801d5ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801d5f2:	609a      	str	r2, [r3, #8]
 801d5f4:	4770      	bx	lr
 801d5f6:	bf00      	nop
 801d5f8:	20011df8 	.word	0x20011df8
 801d5fc:	40003000 	.word	0x40003000

0801d600 <jsmn_alloc_token>:
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 801d600:	6843      	ldr	r3, [r0, #4]
 801d602:	4293      	cmp	r3, r2
 801d604:	d20a      	bcs.n	801d61c <jsmn_alloc_token+0x1c>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 801d606:	1c5a      	adds	r2, r3, #1
 801d608:	6042      	str	r2, [r0, #4]
 801d60a:	eb01 1003 	add.w	r0, r1, r3, lsl #4
	tok->start = tok->end = -1;
 801d60e:	f04f 33ff 	mov.w	r3, #4294967295
 801d612:	6083      	str	r3, [r0, #8]
 801d614:	6043      	str	r3, [r0, #4]
	tok->size = 0;
 801d616:	2300      	movs	r3, #0
 801d618:	60c3      	str	r3, [r0, #12]
#ifdef JSMN_PARENT_LINKS
	tok->parent = -1;
#endif
	return tok;
 801d61a:	4770      	bx	lr
		return NULL;
 801d61c:	2000      	movs	r0, #0
}
 801d61e:	4770      	bx	lr

0801d620 <jsmn_fill_token>:
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 801d620:	7001      	strb	r1, [r0, #0]
	token->start = start;
 801d622:	6042      	str	r2, [r0, #4]
	token->end = end;
 801d624:	6083      	str	r3, [r0, #8]
	token->size = 0;
 801d626:	2300      	movs	r3, #0
 801d628:	60c3      	str	r3, [r0, #12]
 801d62a:	4770      	bx	lr

0801d62c <jsmn_parse_primitive>:

/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
 801d62c:	b570      	push	{r4, r5, r6, lr}
	jsmntok_t *token;
	int start;

	start = parser->pos;
 801d62e:	6806      	ldr	r6, [r0, #0]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d630:	e00b      	b.n	801d64a <jsmn_parse_primitive+0x1e>
		switch (js[parser->pos]) {
 801d632:	2c09      	cmp	r4, #9
 801d634:	d303      	bcc.n	801d63e <jsmn_parse_primitive+0x12>
 801d636:	2c0a      	cmp	r4, #10
 801d638:	d919      	bls.n	801d66e <jsmn_parse_primitive+0x42>
 801d63a:	2c0d      	cmp	r4, #13
 801d63c:	d017      	beq.n	801d66e <jsmn_parse_primitive+0x42>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 801d63e:	3c20      	subs	r4, #32
 801d640:	b2e4      	uxtb	r4, r4
 801d642:	2c5e      	cmp	r4, #94	; 0x5e
 801d644:	d824      	bhi.n	801d690 <jsmn_parse_primitive+0x64>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d646:	3501      	adds	r5, #1
 801d648:	6005      	str	r5, [r0, #0]
 801d64a:	6805      	ldr	r5, [r0, #0]
 801d64c:	4295      	cmp	r5, r2
 801d64e:	d20e      	bcs.n	801d66e <jsmn_parse_primitive+0x42>
 801d650:	5d4c      	ldrb	r4, [r1, r5]
 801d652:	b164      	cbz	r4, 801d66e <jsmn_parse_primitive+0x42>
		switch (js[parser->pos]) {
 801d654:	2c20      	cmp	r4, #32
 801d656:	d00a      	beq.n	801d66e <jsmn_parse_primitive+0x42>
 801d658:	d9eb      	bls.n	801d632 <jsmn_parse_primitive+0x6>
 801d65a:	2c3a      	cmp	r4, #58	; 0x3a
 801d65c:	d007      	beq.n	801d66e <jsmn_parse_primitive+0x42>
 801d65e:	d904      	bls.n	801d66a <jsmn_parse_primitive+0x3e>
 801d660:	2c5d      	cmp	r4, #93	; 0x5d
 801d662:	d004      	beq.n	801d66e <jsmn_parse_primitive+0x42>
 801d664:	2c7d      	cmp	r4, #125	; 0x7d
 801d666:	d1ea      	bne.n	801d63e <jsmn_parse_primitive+0x12>
 801d668:	e001      	b.n	801d66e <jsmn_parse_primitive+0x42>
 801d66a:	2c2c      	cmp	r4, #44	; 0x2c
 801d66c:	d1e7      	bne.n	801d63e <jsmn_parse_primitive+0x12>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
 801d66e:	b19b      	cbz	r3, 801d698 <jsmn_parse_primitive+0x6c>
 801d670:	4619      	mov	r1, r3
 801d672:	4604      	mov	r4, r0
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
 801d674:	9a04      	ldr	r2, [sp, #16]
 801d676:	f7ff ffc3 	bl	801d600 <jsmn_alloc_token>
	if (token == NULL) {
 801d67a:	b188      	cbz	r0, 801d6a0 <jsmn_parse_primitive+0x74>
		parser->pos = start;
		return JSMN_ERROR_NOMEM;
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 801d67c:	6823      	ldr	r3, [r4, #0]
 801d67e:	4632      	mov	r2, r6
 801d680:	2104      	movs	r1, #4
 801d682:	f7ff ffcd 	bl	801d620 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
 801d686:	6823      	ldr	r3, [r4, #0]
 801d688:	3b01      	subs	r3, #1
 801d68a:	6023      	str	r3, [r4, #0]
	return 0;
 801d68c:	2000      	movs	r0, #0
}
 801d68e:	bd70      	pop	{r4, r5, r6, pc}
			parser->pos = start;
 801d690:	6006      	str	r6, [r0, #0]
			return JSMN_ERROR_INVAL;
 801d692:	f06f 0001 	mvn.w	r0, #1
 801d696:	bd70      	pop	{r4, r5, r6, pc}
		parser->pos--;
 801d698:	3d01      	subs	r5, #1
 801d69a:	6005      	str	r5, [r0, #0]
		return 0;
 801d69c:	2000      	movs	r0, #0
 801d69e:	bd70      	pop	{r4, r5, r6, pc}
		parser->pos = start;
 801d6a0:	6026      	str	r6, [r4, #0]
		return JSMN_ERROR_NOMEM;
 801d6a2:	f04f 30ff 	mov.w	r0, #4294967295
 801d6a6:	bd70      	pop	{r4, r5, r6, pc}

0801d6a8 <jsmn_parse_string>:

/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
 801d6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	jsmntok_t *token;

	int start = parser->pos;
 801d6aa:	6806      	ldr	r6, [r0, #0]

	parser->pos++;
 801d6ac:	1c74      	adds	r4, r6, #1
 801d6ae:	6004      	str	r4, [r0, #0]

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d6b0:	e03c      	b.n	801d72c <jsmn_parse_string+0x84>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	f000 8102 	beq.w	801d8bc <jsmn_parse_string+0x214>
 801d6b8:	4619      	mov	r1, r3
 801d6ba:	4604      	mov	r4, r0
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
 801d6bc:	9a06      	ldr	r2, [sp, #24]
 801d6be:	f7ff ff9f 	bl	801d600 <jsmn_alloc_token>
			if (token == NULL) {
 801d6c2:	b130      	cbz	r0, 801d6d2 <jsmn_parse_string+0x2a>
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 801d6c4:	6823      	ldr	r3, [r4, #0]
 801d6c6:	1c72      	adds	r2, r6, #1
 801d6c8:	2103      	movs	r1, #3
 801d6ca:	f7ff ffa9 	bl	801d620 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
			token->parent = parser->toksuper;
#endif
			return 0;
 801d6ce:	2000      	movs	r0, #0
 801d6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				parser->pos = start;
 801d6d2:	6026      	str	r6, [r4, #0]
				return JSMN_ERROR_NOMEM;
 801d6d4:	f04f 30ff 	mov.w	r0, #4294967295
 801d6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
 801d6da:	3401      	adds	r4, #1
 801d6dc:	6004      	str	r4, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 801d6de:	f04f 0e00 	mov.w	lr, #0
 801d6e2:	e003      	b.n	801d6ec <jsmn_parse_string+0x44>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
 801d6e4:	3401      	adds	r4, #1
 801d6e6:	6004      	str	r4, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 801d6e8:	f10e 0e01 	add.w	lr, lr, #1
 801d6ec:	f1be 0f03 	cmp.w	lr, #3
 801d6f0:	dc16      	bgt.n	801d720 <jsmn_parse_string+0x78>
 801d6f2:	6804      	ldr	r4, [r0, #0]
 801d6f4:	42a2      	cmp	r2, r4
 801d6f6:	d913      	bls.n	801d720 <jsmn_parse_string+0x78>
 801d6f8:	5d0d      	ldrb	r5, [r1, r4]
 801d6fa:	b18d      	cbz	r5, 801d720 <jsmn_parse_string+0x78>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 801d6fc:	f1a5 0730 	sub.w	r7, r5, #48	; 0x30
 801d700:	b2ff      	uxtb	r7, r7
 801d702:	2f09      	cmp	r7, #9
 801d704:	d9ee      	bls.n	801d6e4 <jsmn_parse_string+0x3c>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
 801d706:	f1a5 0741 	sub.w	r7, r5, #65	; 0x41
 801d70a:	b2ff      	uxtb	r7, r7
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 801d70c:	2f05      	cmp	r7, #5
 801d70e:	d9e9      	bls.n	801d6e4 <jsmn_parse_string+0x3c>
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 801d710:	3d61      	subs	r5, #97	; 0x61
 801d712:	b2ed      	uxtb	r5, r5
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 801d714:	2d05      	cmp	r5, #5
 801d716:	d9e5      	bls.n	801d6e4 <jsmn_parse_string+0x3c>
							parser->pos = start;
 801d718:	6006      	str	r6, [r0, #0]
							return JSMN_ERROR_INVAL;
 801d71a:	f06f 0001 	mvn.w	r0, #1
 801d71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					}
					parser->pos--;
 801d720:	6804      	ldr	r4, [r0, #0]
 801d722:	3c01      	subs	r4, #1
 801d724:	6004      	str	r4, [r0, #0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d726:	6804      	ldr	r4, [r0, #0]
 801d728:	3401      	adds	r4, #1
 801d72a:	6004      	str	r4, [r0, #0]
 801d72c:	6804      	ldr	r4, [r0, #0]
 801d72e:	4294      	cmp	r4, r2
 801d730:	f080 80c0 	bcs.w	801d8b4 <jsmn_parse_string+0x20c>
 801d734:	5d0d      	ldrb	r5, [r1, r4]
 801d736:	2d00      	cmp	r5, #0
 801d738:	f000 80bc 	beq.w	801d8b4 <jsmn_parse_string+0x20c>
		if (c == '\"') {
 801d73c:	2d22      	cmp	r5, #34	; 0x22
 801d73e:	d0b8      	beq.n	801d6b2 <jsmn_parse_string+0xa>
		if (c == '\\' && parser->pos + 1 < len) {
 801d740:	2d5c      	cmp	r5, #92	; 0x5c
 801d742:	d1f0      	bne.n	801d726 <jsmn_parse_string+0x7e>
 801d744:	3401      	adds	r4, #1
 801d746:	42a2      	cmp	r2, r4
 801d748:	d9ed      	bls.n	801d726 <jsmn_parse_string+0x7e>
			parser->pos++;
 801d74a:	6004      	str	r4, [r0, #0]
			switch (js[parser->pos]) {
 801d74c:	5d0d      	ldrb	r5, [r1, r4]
 801d74e:	3d22      	subs	r5, #34	; 0x22
 801d750:	2d53      	cmp	r5, #83	; 0x53
 801d752:	f200 80ab 	bhi.w	801d8ac <jsmn_parse_string+0x204>
 801d756:	a701      	add	r7, pc, #4	; (adr r7, 801d75c <jsmn_parse_string+0xb4>)
 801d758:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
 801d75c:	0801d727 	.word	0x0801d727
 801d760:	0801d8ad 	.word	0x0801d8ad
 801d764:	0801d8ad 	.word	0x0801d8ad
 801d768:	0801d8ad 	.word	0x0801d8ad
 801d76c:	0801d8ad 	.word	0x0801d8ad
 801d770:	0801d8ad 	.word	0x0801d8ad
 801d774:	0801d8ad 	.word	0x0801d8ad
 801d778:	0801d8ad 	.word	0x0801d8ad
 801d77c:	0801d8ad 	.word	0x0801d8ad
 801d780:	0801d8ad 	.word	0x0801d8ad
 801d784:	0801d8ad 	.word	0x0801d8ad
 801d788:	0801d8ad 	.word	0x0801d8ad
 801d78c:	0801d8ad 	.word	0x0801d8ad
 801d790:	0801d727 	.word	0x0801d727
 801d794:	0801d8ad 	.word	0x0801d8ad
 801d798:	0801d8ad 	.word	0x0801d8ad
 801d79c:	0801d8ad 	.word	0x0801d8ad
 801d7a0:	0801d8ad 	.word	0x0801d8ad
 801d7a4:	0801d8ad 	.word	0x0801d8ad
 801d7a8:	0801d8ad 	.word	0x0801d8ad
 801d7ac:	0801d8ad 	.word	0x0801d8ad
 801d7b0:	0801d8ad 	.word	0x0801d8ad
 801d7b4:	0801d8ad 	.word	0x0801d8ad
 801d7b8:	0801d8ad 	.word	0x0801d8ad
 801d7bc:	0801d8ad 	.word	0x0801d8ad
 801d7c0:	0801d8ad 	.word	0x0801d8ad
 801d7c4:	0801d8ad 	.word	0x0801d8ad
 801d7c8:	0801d8ad 	.word	0x0801d8ad
 801d7cc:	0801d8ad 	.word	0x0801d8ad
 801d7d0:	0801d8ad 	.word	0x0801d8ad
 801d7d4:	0801d8ad 	.word	0x0801d8ad
 801d7d8:	0801d8ad 	.word	0x0801d8ad
 801d7dc:	0801d8ad 	.word	0x0801d8ad
 801d7e0:	0801d8ad 	.word	0x0801d8ad
 801d7e4:	0801d8ad 	.word	0x0801d8ad
 801d7e8:	0801d8ad 	.word	0x0801d8ad
 801d7ec:	0801d8ad 	.word	0x0801d8ad
 801d7f0:	0801d8ad 	.word	0x0801d8ad
 801d7f4:	0801d8ad 	.word	0x0801d8ad
 801d7f8:	0801d8ad 	.word	0x0801d8ad
 801d7fc:	0801d8ad 	.word	0x0801d8ad
 801d800:	0801d8ad 	.word	0x0801d8ad
 801d804:	0801d8ad 	.word	0x0801d8ad
 801d808:	0801d8ad 	.word	0x0801d8ad
 801d80c:	0801d8ad 	.word	0x0801d8ad
 801d810:	0801d8ad 	.word	0x0801d8ad
 801d814:	0801d8ad 	.word	0x0801d8ad
 801d818:	0801d8ad 	.word	0x0801d8ad
 801d81c:	0801d8ad 	.word	0x0801d8ad
 801d820:	0801d8ad 	.word	0x0801d8ad
 801d824:	0801d8ad 	.word	0x0801d8ad
 801d828:	0801d8ad 	.word	0x0801d8ad
 801d82c:	0801d8ad 	.word	0x0801d8ad
 801d830:	0801d8ad 	.word	0x0801d8ad
 801d834:	0801d8ad 	.word	0x0801d8ad
 801d838:	0801d8ad 	.word	0x0801d8ad
 801d83c:	0801d8ad 	.word	0x0801d8ad
 801d840:	0801d8ad 	.word	0x0801d8ad
 801d844:	0801d727 	.word	0x0801d727
 801d848:	0801d8ad 	.word	0x0801d8ad
 801d84c:	0801d8ad 	.word	0x0801d8ad
 801d850:	0801d8ad 	.word	0x0801d8ad
 801d854:	0801d8ad 	.word	0x0801d8ad
 801d858:	0801d8ad 	.word	0x0801d8ad
 801d85c:	0801d727 	.word	0x0801d727
 801d860:	0801d8ad 	.word	0x0801d8ad
 801d864:	0801d8ad 	.word	0x0801d8ad
 801d868:	0801d8ad 	.word	0x0801d8ad
 801d86c:	0801d727 	.word	0x0801d727
 801d870:	0801d8ad 	.word	0x0801d8ad
 801d874:	0801d8ad 	.word	0x0801d8ad
 801d878:	0801d8ad 	.word	0x0801d8ad
 801d87c:	0801d8ad 	.word	0x0801d8ad
 801d880:	0801d8ad 	.word	0x0801d8ad
 801d884:	0801d8ad 	.word	0x0801d8ad
 801d888:	0801d8ad 	.word	0x0801d8ad
 801d88c:	0801d727 	.word	0x0801d727
 801d890:	0801d8ad 	.word	0x0801d8ad
 801d894:	0801d8ad 	.word	0x0801d8ad
 801d898:	0801d8ad 	.word	0x0801d8ad
 801d89c:	0801d727 	.word	0x0801d727
 801d8a0:	0801d8ad 	.word	0x0801d8ad
 801d8a4:	0801d727 	.word	0x0801d727
 801d8a8:	0801d6db 	.word	0x0801d6db
					break;
				/* Unexpected symbol */
				default:
					parser->pos = start;
 801d8ac:	6006      	str	r6, [r0, #0]
					return JSMN_ERROR_INVAL;
 801d8ae:	f06f 0001 	mvn.w	r0, #1
 801d8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
	}
	parser->pos = start;
 801d8b4:	6006      	str	r6, [r0, #0]
	return JSMN_ERROR_PART;
 801d8b6:	f06f 0002 	mvn.w	r0, #2
 801d8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return 0;
 801d8bc:	2000      	movs	r0, #0
}
 801d8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d8c0 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 801d8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8c4:	b082      	sub	sp, #8
 801d8c6:	4606      	mov	r6, r0
 801d8c8:	4688      	mov	r8, r1
 801d8ca:	4617      	mov	r7, r2
 801d8cc:	461d      	mov	r5, r3
 801d8ce:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 801d8d2:	f8d0 9004 	ldr.w	r9, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d8d6:	e05d      	b.n	801d994 <jsmn_parse+0xd4>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 801d8d8:	2c0d      	cmp	r4, #13
 801d8da:	d058      	beq.n	801d98e <jsmn_parse+0xce>
 801d8dc:	d91c      	bls.n	801d918 <jsmn_parse+0x58>
 801d8de:	2c20      	cmp	r4, #32
 801d8e0:	d055      	beq.n	801d98e <jsmn_parse+0xce>
 801d8e2:	2c22      	cmp	r4, #34	; 0x22
 801d8e4:	d11b      	bne.n	801d91e <jsmn_parse+0x5e>
					}
				}
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 801d8e6:	f8cd a000 	str.w	sl, [sp]
 801d8ea:	462b      	mov	r3, r5
 801d8ec:	463a      	mov	r2, r7
 801d8ee:	4641      	mov	r1, r8
 801d8f0:	4630      	mov	r0, r6
 801d8f2:	f7ff fed9 	bl	801d6a8 <jsmn_parse_string>
				if (r < 0) return r;
 801d8f6:	2800      	cmp	r0, #0
 801d8f8:	f2c0 80d9 	blt.w	801daae <jsmn_parse+0x1ee>
				count++;
 801d8fc:	f109 0901 	add.w	r9, r9, #1
				if (parser->toksuper != -1 && tokens != NULL)
 801d900:	68b3      	ldr	r3, [r6, #8]
 801d902:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d906:	d042      	beq.n	801d98e <jsmn_parse+0xce>
 801d908:	2d00      	cmp	r5, #0
 801d90a:	d040      	beq.n	801d98e <jsmn_parse+0xce>
					tokens[parser->toksuper].size++;
 801d90c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801d910:	68da      	ldr	r2, [r3, #12]
 801d912:	3201      	adds	r2, #1
 801d914:	60da      	str	r2, [r3, #12]
 801d916:	e03a      	b.n	801d98e <jsmn_parse+0xce>
		switch (c) {
 801d918:	3c09      	subs	r4, #9
 801d91a:	2c01      	cmp	r4, #1
 801d91c:	d937      	bls.n	801d98e <jsmn_parse+0xce>
				}
#else
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 801d91e:	f8cd a000 	str.w	sl, [sp]
 801d922:	462b      	mov	r3, r5
 801d924:	463a      	mov	r2, r7
 801d926:	4641      	mov	r1, r8
 801d928:	4630      	mov	r0, r6
 801d92a:	f7ff fe7f 	bl	801d62c <jsmn_parse_primitive>
				if (r < 0) return r;
 801d92e:	2800      	cmp	r0, #0
 801d930:	f2c0 80bf 	blt.w	801dab2 <jsmn_parse+0x1f2>
				count++;
 801d934:	f109 0901 	add.w	r9, r9, #1
				if (parser->toksuper != -1 && tokens != NULL)
 801d938:	68b3      	ldr	r3, [r6, #8]
 801d93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d93e:	d026      	beq.n	801d98e <jsmn_parse+0xce>
 801d940:	b32d      	cbz	r5, 801d98e <jsmn_parse+0xce>
					tokens[parser->toksuper].size++;
 801d942:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801d946:	68da      	ldr	r2, [r3, #12]
 801d948:	3201      	adds	r2, #1
 801d94a:	60da      	str	r2, [r3, #12]
 801d94c:	e01f      	b.n	801d98e <jsmn_parse+0xce>
		switch (c) {
 801d94e:	2c5b      	cmp	r4, #91	; 0x5b
 801d950:	d1e5      	bne.n	801d91e <jsmn_parse+0x5e>
				count++;
 801d952:	f109 0901 	add.w	r9, r9, #1
				if (tokens == NULL) {
 801d956:	b1d5      	cbz	r5, 801d98e <jsmn_parse+0xce>
				token = jsmn_alloc_token(parser, tokens, num_tokens);
 801d958:	4652      	mov	r2, sl
 801d95a:	4629      	mov	r1, r5
 801d95c:	4630      	mov	r0, r6
 801d95e:	f7ff fe4f 	bl	801d600 <jsmn_alloc_token>
				if (token == NULL)
 801d962:	4601      	mov	r1, r0
 801d964:	2800      	cmp	r0, #0
 801d966:	f000 809c 	beq.w	801daa2 <jsmn_parse+0x1e2>
				if (parser->toksuper != -1) {
 801d96a:	68b3      	ldr	r3, [r6, #8]
 801d96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d970:	d004      	beq.n	801d97c <jsmn_parse+0xbc>
					tokens[parser->toksuper].size++;
 801d972:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801d976:	68da      	ldr	r2, [r3, #12]
 801d978:	3201      	adds	r2, #1
 801d97a:	60da      	str	r2, [r3, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 801d97c:	2c7b      	cmp	r4, #123	; 0x7b
 801d97e:	d028      	beq.n	801d9d2 <jsmn_parse+0x112>
 801d980:	2302      	movs	r3, #2
 801d982:	700b      	strb	r3, [r1, #0]
				token->start = parser->pos;
 801d984:	6833      	ldr	r3, [r6, #0]
 801d986:	604b      	str	r3, [r1, #4]
				parser->toksuper = parser->toknext - 1;
 801d988:	6873      	ldr	r3, [r6, #4]
 801d98a:	3b01      	subs	r3, #1
 801d98c:	60b3      	str	r3, [r6, #8]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d98e:	6833      	ldr	r3, [r6, #0]
 801d990:	3301      	adds	r3, #1
 801d992:	6033      	str	r3, [r6, #0]
 801d994:	6831      	ldr	r1, [r6, #0]
 801d996:	42b9      	cmp	r1, r7
 801d998:	d26c      	bcs.n	801da74 <jsmn_parse+0x1b4>
 801d99a:	f818 4001 	ldrb.w	r4, [r8, r1]
 801d99e:	2c00      	cmp	r4, #0
 801d9a0:	d068      	beq.n	801da74 <jsmn_parse+0x1b4>
		switch (c) {
 801d9a2:	2c2c      	cmp	r4, #44	; 0x2c
 801d9a4:	d043      	beq.n	801da2e <jsmn_parse+0x16e>
 801d9a6:	d997      	bls.n	801d8d8 <jsmn_parse+0x18>
 801d9a8:	2c5d      	cmp	r4, #93	; 0x5d
 801d9aa:	d00a      	beq.n	801d9c2 <jsmn_parse+0x102>
 801d9ac:	d805      	bhi.n	801d9ba <jsmn_parse+0xfa>
 801d9ae:	2c3a      	cmp	r4, #58	; 0x3a
 801d9b0:	d1cd      	bne.n	801d94e <jsmn_parse+0x8e>
				parser->toksuper = parser->toknext - 1;
 801d9b2:	6873      	ldr	r3, [r6, #4]
 801d9b4:	3b01      	subs	r3, #1
 801d9b6:	60b3      	str	r3, [r6, #8]
				break;
 801d9b8:	e7e9      	b.n	801d98e <jsmn_parse+0xce>
		switch (c) {
 801d9ba:	2c7b      	cmp	r4, #123	; 0x7b
 801d9bc:	d0c9      	beq.n	801d952 <jsmn_parse+0x92>
 801d9be:	2c7d      	cmp	r4, #125	; 0x7d
 801d9c0:	d1ad      	bne.n	801d91e <jsmn_parse+0x5e>
				if (tokens == NULL)
 801d9c2:	2d00      	cmp	r5, #0
 801d9c4:	d0e3      	beq.n	801d98e <jsmn_parse+0xce>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 801d9c6:	2c7d      	cmp	r4, #125	; 0x7d
 801d9c8:	d005      	beq.n	801d9d6 <jsmn_parse+0x116>
 801d9ca:	2402      	movs	r4, #2
				for (i = parser->toknext - 1; i >= 0; i--) {
 801d9cc:	6873      	ldr	r3, [r6, #4]
 801d9ce:	3b01      	subs	r3, #1
 801d9d0:	e004      	b.n	801d9dc <jsmn_parse+0x11c>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 801d9d2:	2301      	movs	r3, #1
 801d9d4:	e7d5      	b.n	801d982 <jsmn_parse+0xc2>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 801d9d6:	2401      	movs	r4, #1
 801d9d8:	e7f8      	b.n	801d9cc <jsmn_parse+0x10c>
				for (i = parser->toknext - 1; i >= 0; i--) {
 801d9da:	3b01      	subs	r3, #1
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	db11      	blt.n	801da04 <jsmn_parse+0x144>
					token = &tokens[i];
 801d9e0:	eb05 1203 	add.w	r2, r5, r3, lsl #4
					if (token->start != -1 && token->end == -1) {
 801d9e4:	6850      	ldr	r0, [r2, #4]
 801d9e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d9ea:	d0f6      	beq.n	801d9da <jsmn_parse+0x11a>
 801d9ec:	6890      	ldr	r0, [r2, #8]
 801d9ee:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d9f2:	d1f2      	bne.n	801d9da <jsmn_parse+0x11a>
						if (token->type != type) {
 801d9f4:	7810      	ldrb	r0, [r2, #0]
 801d9f6:	4284      	cmp	r4, r0
 801d9f8:	d156      	bne.n	801daa8 <jsmn_parse+0x1e8>
						parser->toksuper = -1;
 801d9fa:	f04f 30ff 	mov.w	r0, #4294967295
 801d9fe:	60b0      	str	r0, [r6, #8]
						token->end = parser->pos + 1;
 801da00:	3101      	adds	r1, #1
 801da02:	6091      	str	r1, [r2, #8]
				if (i == -1) return JSMN_ERROR_INVAL;
 801da04:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da08:	d103      	bne.n	801da12 <jsmn_parse+0x152>
 801da0a:	f06f 0901 	mvn.w	r9, #1
 801da0e:	e044      	b.n	801da9a <jsmn_parse+0x1da>
				for (; i >= 0; i--) {
 801da10:	3b01      	subs	r3, #1
 801da12:	2b00      	cmp	r3, #0
 801da14:	dbbb      	blt.n	801d98e <jsmn_parse+0xce>
					token = &tokens[i];
 801da16:	eb05 1203 	add.w	r2, r5, r3, lsl #4
					if (token->start != -1 && token->end == -1) {
 801da1a:	6851      	ldr	r1, [r2, #4]
 801da1c:	f1b1 3fff 	cmp.w	r1, #4294967295
 801da20:	d0f6      	beq.n	801da10 <jsmn_parse+0x150>
 801da22:	6892      	ldr	r2, [r2, #8]
 801da24:	f1b2 3fff 	cmp.w	r2, #4294967295
 801da28:	d1f2      	bne.n	801da10 <jsmn_parse+0x150>
						parser->toksuper = i;
 801da2a:	60b3      	str	r3, [r6, #8]
						break;
 801da2c:	e7af      	b.n	801d98e <jsmn_parse+0xce>
				if (tokens != NULL && parser->toksuper != -1 &&
 801da2e:	2d00      	cmp	r5, #0
 801da30:	d0ad      	beq.n	801d98e <jsmn_parse+0xce>
 801da32:	68b3      	ldr	r3, [r6, #8]
 801da34:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da38:	d0a9      	beq.n	801d98e <jsmn_parse+0xce>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 801da3a:	011b      	lsls	r3, r3, #4
 801da3c:	5ceb      	ldrb	r3, [r5, r3]
				if (tokens != NULL && parser->toksuper != -1 &&
 801da3e:	2b02      	cmp	r3, #2
 801da40:	d0a5      	beq.n	801d98e <jsmn_parse+0xce>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 801da42:	2b01      	cmp	r3, #1
 801da44:	d0a3      	beq.n	801d98e <jsmn_parse+0xce>
					for (i = parser->toknext - 1; i >= 0; i--) {
 801da46:	6872      	ldr	r2, [r6, #4]
 801da48:	3a01      	subs	r2, #1
 801da4a:	e000      	b.n	801da4e <jsmn_parse+0x18e>
 801da4c:	3a01      	subs	r2, #1
 801da4e:	2a00      	cmp	r2, #0
 801da50:	db9d      	blt.n	801d98e <jsmn_parse+0xce>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 801da52:	0113      	lsls	r3, r2, #4
 801da54:	18e9      	adds	r1, r5, r3
 801da56:	5ceb      	ldrb	r3, [r5, r3]
 801da58:	3b01      	subs	r3, #1
 801da5a:	b2db      	uxtb	r3, r3
 801da5c:	2b01      	cmp	r3, #1
 801da5e:	d8f5      	bhi.n	801da4c <jsmn_parse+0x18c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 801da60:	684b      	ldr	r3, [r1, #4]
 801da62:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da66:	d0f1      	beq.n	801da4c <jsmn_parse+0x18c>
 801da68:	688b      	ldr	r3, [r1, #8]
 801da6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da6e:	d1ed      	bne.n	801da4c <jsmn_parse+0x18c>
								parser->toksuper = i;
 801da70:	60b2      	str	r2, [r6, #8]
								break;
 801da72:	e78c      	b.n	801d98e <jsmn_parse+0xce>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
 801da74:	b18d      	cbz	r5, 801da9a <jsmn_parse+0x1da>
		for (i = parser->toknext - 1; i >= 0; i--) {
 801da76:	6873      	ldr	r3, [r6, #4]
 801da78:	3b01      	subs	r3, #1
 801da7a:	e000      	b.n	801da7e <jsmn_parse+0x1be>
 801da7c:	3b01      	subs	r3, #1
 801da7e:	2b00      	cmp	r3, #0
 801da80:	db0b      	blt.n	801da9a <jsmn_parse+0x1da>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 801da82:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 801da86:	6851      	ldr	r1, [r2, #4]
 801da88:	f1b1 3fff 	cmp.w	r1, #4294967295
 801da8c:	d0f6      	beq.n	801da7c <jsmn_parse+0x1bc>
 801da8e:	6892      	ldr	r2, [r2, #8]
 801da90:	f1b2 3fff 	cmp.w	r2, #4294967295
 801da94:	d1f2      	bne.n	801da7c <jsmn_parse+0x1bc>
				return JSMN_ERROR_PART;
 801da96:	f06f 0902 	mvn.w	r9, #2
			}
		}
	}

	return count;
}
 801da9a:	4648      	mov	r0, r9
 801da9c:	b002      	add	sp, #8
 801da9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					return JSMN_ERROR_NOMEM;
 801daa2:	f04f 39ff 	mov.w	r9, #4294967295
 801daa6:	e7f8      	b.n	801da9a <jsmn_parse+0x1da>
							return JSMN_ERROR_INVAL;
 801daa8:	f06f 0901 	mvn.w	r9, #1
 801daac:	e7f5      	b.n	801da9a <jsmn_parse+0x1da>
				if (r < 0) return r;
 801daae:	4681      	mov	r9, r0
 801dab0:	e7f3      	b.n	801da9a <jsmn_parse+0x1da>
				if (r < 0) return r;
 801dab2:	4681      	mov	r9, r0
 801dab4:	e7f1      	b.n	801da9a <jsmn_parse+0x1da>

0801dab6 <jsmn_init>:
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 801dab6:	2300      	movs	r3, #0
 801dab8:	6003      	str	r3, [r0, #0]
	parser->toknext = 0;
 801daba:	6043      	str	r3, [r0, #4]
	parser->toksuper = -1;
 801dabc:	f04f 33ff 	mov.w	r3, #4294967295
 801dac0:	6083      	str	r3, [r0, #8]
 801dac2:	4770      	bx	lr

0801dac4 <GetJSONData>:
/* ------------------- */

/* ---------- FUNCTIONS ------------ */
/* -------||--||--||--||--||-------- */
/* -------\/--\/--\/--\/--\/-------- */
uint GetJSONData(uint8_t *pstr) {
 801dac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dac8:	4605      	mov	r5, r0
	uint size = 0;
	memcpy(pstr, "{\"addr_IP\":\"", 12);
 801daca:	4b5c      	ldr	r3, [pc, #368]	; (801dc3c <GetJSONData+0x178>)
 801dacc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801dace:	6028      	str	r0, [r5, #0]
 801dad0:	6069      	str	r1, [r5, #4]
 801dad2:	60aa      	str	r2, [r5, #8]
	size += 12;
	uint8_t tmp = strlen((const char *) hjsondata.ip_addr);
 801dad4:	4e5a      	ldr	r6, [pc, #360]	; (801dc40 <GetJSONData+0x17c>)
 801dad6:	4630      	mov	r0, r6
 801dad8:	f7f2 faca 	bl	8010070 <strlen>
 801dadc:	b2c4      	uxtb	r4, r0
	memcpy(pstr + size, hjsondata.ip_addr, tmp);
 801dade:	4622      	mov	r2, r4
 801dae0:	4631      	mov	r1, r6
 801dae2:	f105 000c 	add.w	r0, r5, #12
 801dae6:	f002 fa68 	bl	801ffba <memcpy>
	size += tmp;
 801daea:	f104 070c 	add.w	r7, r4, #12
	memcpy(pstr + size, "\",\"mask\":\"", 10);
 801daee:	19ea      	adds	r2, r5, r7
 801daf0:	4b54      	ldr	r3, [pc, #336]	; (801dc44 <GetJSONData+0x180>)
 801daf2:	cb03      	ldmia	r3!, {r0, r1}
 801daf4:	51e8      	str	r0, [r5, r7]
 801daf6:	6051      	str	r1, [r2, #4]
 801daf8:	881b      	ldrh	r3, [r3, #0]
 801dafa:	8113      	strh	r3, [r2, #8]
	size += 10;
 801dafc:	3416      	adds	r4, #22
	tmp = strlen((const char *) hjsondata.mask);
 801dafe:	f106 0810 	add.w	r8, r6, #16
 801db02:	4640      	mov	r0, r8
 801db04:	f7f2 fab4 	bl	8010070 <strlen>
 801db08:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, hjsondata.mask, tmp);
 801db0a:	463a      	mov	r2, r7
 801db0c:	4641      	mov	r1, r8
 801db0e:	1928      	adds	r0, r5, r4
 801db10:	f002 fa53 	bl	801ffba <memcpy>
	size += tmp;
 801db14:	19e3      	adds	r3, r4, r7
	memcpy(pstr + size, "\",\"gate\":\"", 10);
 801db16:	18ec      	adds	r4, r5, r3
 801db18:	4a4b      	ldr	r2, [pc, #300]	; (801dc48 <GetJSONData+0x184>)
 801db1a:	ca03      	ldmia	r2!, {r0, r1}
 801db1c:	50e8      	str	r0, [r5, r3]
 801db1e:	6061      	str	r1, [r4, #4]
 801db20:	8812      	ldrh	r2, [r2, #0]
 801db22:	8122      	strh	r2, [r4, #8]
	size += 10;
 801db24:	f103 040a 	add.w	r4, r3, #10
	tmp = strlen((const char *) hjsondata.gate);
 801db28:	f106 0820 	add.w	r8, r6, #32
 801db2c:	4640      	mov	r0, r8
 801db2e:	f7f2 fa9f 	bl	8010070 <strlen>
 801db32:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, hjsondata.gate, tmp);
 801db34:	463a      	mov	r2, r7
 801db36:	4641      	mov	r1, r8
 801db38:	1928      	adds	r0, r5, r4
 801db3a:	f002 fa3e 	bl	801ffba <memcpy>
	size += tmp;
 801db3e:	19e3      	adds	r3, r4, r7
	memcpy(pstr + size, "\",\"port\":", 9);
 801db40:	18ec      	adds	r4, r5, r3
 801db42:	4a42      	ldr	r2, [pc, #264]	; (801dc4c <GetJSONData+0x188>)
 801db44:	ca03      	ldmia	r2!, {r0, r1}
 801db46:	50e8      	str	r0, [r5, r3]
 801db48:	6061      	str	r1, [r4, #4]
 801db4a:	7812      	ldrb	r2, [r2, #0]
 801db4c:	7222      	strb	r2, [r4, #8]
	size += 9;
 801db4e:	f103 0409 	add.w	r4, r3, #9
	itoa(hjsondata.port, (char *) pstr + size, 10);
 801db52:	192f      	adds	r7, r5, r4
 801db54:	220a      	movs	r2, #10
 801db56:	4639      	mov	r1, r7
 801db58:	8e30      	ldrh	r0, [r6, #48]	; 0x30
 801db5a:	f002 fa1d 	bl	801ff98 <itoa>
	size += strlen((const char *) pstr + size);
 801db5e:	4638      	mov	r0, r7
 801db60:	f7f2 fa86 	bl	8010070 <strlen>
 801db64:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"speed\":", 9);
 801db66:	18ec      	adds	r4, r5, r3
 801db68:	4a39      	ldr	r2, [pc, #228]	; (801dc50 <GetJSONData+0x18c>)
 801db6a:	ca03      	ldmia	r2!, {r0, r1}
 801db6c:	50e8      	str	r0, [r5, r3]
 801db6e:	6061      	str	r1, [r4, #4]
 801db70:	7812      	ldrb	r2, [r2, #0]
 801db72:	7222      	strb	r2, [r4, #8]
	size += 9;
 801db74:	f103 0409 	add.w	r4, r3, #9
	itoa(hjsondata.speed, ((char *) pstr + size), 10);
 801db78:	192f      	adds	r7, r5, r4
 801db7a:	220a      	movs	r2, #10
 801db7c:	4639      	mov	r1, r7
 801db7e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 801db80:	f002 fa0a 	bl	801ff98 <itoa>
	size += strlen((const char *) pstr + size);
 801db84:	4638      	mov	r0, r7
 801db86:	f7f2 fa73 	bl	8010070 <strlen>
 801db8a:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"addr_own\":", 12);
 801db8c:	18ef      	adds	r7, r5, r3
 801db8e:	4c31      	ldr	r4, [pc, #196]	; (801dc54 <GetJSONData+0x190>)
 801db90:	cc07      	ldmia	r4!, {r0, r1, r2}
 801db92:	50e8      	str	r0, [r5, r3]
 801db94:	6079      	str	r1, [r7, #4]
 801db96:	60ba      	str	r2, [r7, #8]
	size += 12;
 801db98:	f103 040c 	add.w	r4, r3, #12
	itoa(hjsondata.own_addr, (char *) pstr + size, 10);
 801db9c:	192f      	adds	r7, r5, r4
 801db9e:	220a      	movs	r2, #10
 801dba0:	4639      	mov	r1, r7
 801dba2:	f896 0038 	ldrb.w	r0, [r6, #56]	; 0x38
 801dba6:	f002 f9f7 	bl	801ff98 <itoa>
	size += strlen((const char *) pstr + size);
 801dbaa:	4638      	mov	r0, r7
 801dbac:	f7f2 fa60 	bl	8010070 <strlen>
 801dbb0:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"ver\":\"", 8);
 801dbb2:	18ec      	adds	r4, r5, r3
 801dbb4:	4a28      	ldr	r2, [pc, #160]	; (801dc58 <GetJSONData+0x194>)
 801dbb6:	ca03      	ldmia	r2!, {r0, r1}
 801dbb8:	50e8      	str	r0, [r5, r3]
 801dbba:	6061      	str	r1, [r4, #4]
	size += 8;
 801dbbc:	f103 0408 	add.w	r4, r3, #8
	tmp = strlen((const char *) hjsondata.ver);
 801dbc0:	f106 0839 	add.w	r8, r6, #57	; 0x39
 801dbc4:	4640      	mov	r0, r8
 801dbc6:	f7f2 fa53 	bl	8010070 <strlen>
 801dbca:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, (const char *) hjsondata.ver, tmp);
 801dbcc:	463a      	mov	r2, r7
 801dbce:	4641      	mov	r1, r8
 801dbd0:	1928      	adds	r0, r5, r4
 801dbd2:	f002 f9f2 	bl	801ffba <memcpy>
	size += tmp;
 801dbd6:	19e3      	adds	r3, r4, r7
	memcpy(pstr + size, "\",\"sn\":", 7);
 801dbd8:	18e9      	adds	r1, r5, r3
 801dbda:	4a20      	ldr	r2, [pc, #128]	; (801dc5c <GetJSONData+0x198>)
 801dbdc:	6810      	ldr	r0, [r2, #0]
 801dbde:	50e8      	str	r0, [r5, r3]
 801dbe0:	8890      	ldrh	r0, [r2, #4]
 801dbe2:	7992      	ldrb	r2, [r2, #6]
 801dbe4:	8088      	strh	r0, [r1, #4]
 801dbe6:	718a      	strb	r2, [r1, #6]
	size += 7;
 801dbe8:	1ddc      	adds	r4, r3, #7
	itoa(hjsondata.serial_num, (char *) (pstr + size), 10);
 801dbea:	192f      	adds	r7, r5, r4
 801dbec:	220a      	movs	r2, #10
 801dbee:	4639      	mov	r1, r7
 801dbf0:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 801dbf2:	f002 f9d1 	bl	801ff98 <itoa>
	size += strlen((const char *) pstr + size);
 801dbf6:	4638      	mov	r0, r7
 801dbf8:	f7f2 fa3a 	bl	8010070 <strlen>
 801dbfc:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"addr_MAC\":\"", 13);
 801dbfe:	18ef      	adds	r7, r5, r3
 801dc00:	4c17      	ldr	r4, [pc, #92]	; (801dc60 <GetJSONData+0x19c>)
 801dc02:	cc07      	ldmia	r4!, {r0, r1, r2}
 801dc04:	50e8      	str	r0, [r5, r3]
 801dc06:	6079      	str	r1, [r7, #4]
 801dc08:	60ba      	str	r2, [r7, #8]
 801dc0a:	7822      	ldrb	r2, [r4, #0]
 801dc0c:	733a      	strb	r2, [r7, #12]
	size += 13;
 801dc0e:	f103 040d 	add.w	r4, r3, #13
	tmp = strlen((const char *) hjsondata.mac_addr);
 801dc12:	364c      	adds	r6, #76	; 0x4c
 801dc14:	4630      	mov	r0, r6
 801dc16:	f7f2 fa2b 	bl	8010070 <strlen>
 801dc1a:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, hjsondata.mac_addr, tmp);
 801dc1c:	463a      	mov	r2, r7
 801dc1e:	4631      	mov	r1, r6
 801dc20:	1928      	adds	r0, r5, r4
 801dc22:	f002 f9ca 	bl	801ffba <memcpy>
	size += tmp;
 801dc26:	19e0      	adds	r0, r4, r7
	memcpy(pstr + size, "\"}\0", 3);
 801dc28:	182a      	adds	r2, r5, r0
 801dc2a:	4b0e      	ldr	r3, [pc, #56]	; (801dc64 <GetJSONData+0x1a0>)
 801dc2c:	8819      	ldrh	r1, [r3, #0]
 801dc2e:	789b      	ldrb	r3, [r3, #2]
 801dc30:	5229      	strh	r1, [r5, r0]
 801dc32:	7093      	strb	r3, [r2, #2]
	size += 3;
	return size;
}
 801dc34:	3003      	adds	r0, #3
 801dc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc3a:	bf00      	nop
 801dc3c:	08025838 	.word	0x08025838
 801dc40:	20011e04 	.word	0x20011e04
 801dc44:	08025848 	.word	0x08025848
 801dc48:	08025854 	.word	0x08025854
 801dc4c:	08025860 	.word	0x08025860
 801dc50:	0802586c 	.word	0x0802586c
 801dc54:	08025878 	.word	0x08025878
 801dc58:	08025888 	.word	0x08025888
 801dc5c:	08025894 	.word	0x08025894
 801dc60:	0802589c 	.word	0x0802589c
 801dc64:	08020aac 	.word	0x08020aac

0801dc68 <FlashToJSON>:

void FlashToJSON(json_data_t *js, flash_data_t *fs) {
 801dc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc6c:	4604      	mov	r4, r0
 801dc6e:	460f      	mov	r7, r1

	js->speed = fs->speed;
 801dc70:	680b      	ldr	r3, [r1, #0]
 801dc72:	6343      	str	r3, [r0, #52]	; 0x34
	js->port = fs->port;
 801dc74:	8a4b      	ldrh	r3, [r1, #18]
 801dc76:	8603      	strh	r3, [r0, #48]	; 0x30
	js->own_addr = fs->own_addr;
 801dc78:	888b      	ldrh	r3, [r1, #4]
 801dc7a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	js->serial_num = fs->serial_num;
 801dc7e:	694b      	ldr	r3, [r1, #20]
 801dc80:	6483      	str	r3, [r0, #72]	; 0x48
	uint len = 0;

	for (int i = 0; i < 4; i++) {
 801dc82:	2600      	movs	r6, #0
	uint len = 0;
 801dc84:	4635      	mov	r5, r6
	for (int i = 0; i < 4; i++) {
 801dc86:	e00f      	b.n	801dca8 <FlashToJSON+0x40>
		itoa(fs->IP_addr[i], (char*) &js->ip_addr[len], 10);
 801dc88:	19bb      	adds	r3, r7, r6
 801dc8a:	eb04 0805 	add.w	r8, r4, r5
 801dc8e:	220a      	movs	r2, #10
 801dc90:	4641      	mov	r1, r8
 801dc92:	7998      	ldrb	r0, [r3, #6]
 801dc94:	f002 f980 	bl	801ff98 <itoa>
		len += strlen((char*) &js->ip_addr[len]);
 801dc98:	4640      	mov	r0, r8
 801dc9a:	f7f2 f9e9 	bl	8010070 <strlen>
 801dc9e:	4405      	add	r5, r0
		js->ip_addr[len] = '.';
 801dca0:	232e      	movs	r3, #46	; 0x2e
 801dca2:	5563      	strb	r3, [r4, r5]
		len++;
 801dca4:	3501      	adds	r5, #1
	for (int i = 0; i < 4; i++) {
 801dca6:	3601      	adds	r6, #1
 801dca8:	2e03      	cmp	r6, #3
 801dcaa:	dded      	ble.n	801dc88 <FlashToJSON+0x20>
	}
	js->ip_addr[--len] = '\0';
 801dcac:	1960      	adds	r0, r4, r5
 801dcae:	2500      	movs	r5, #0
 801dcb0:	f800 5c01 	strb.w	r5, [r0, #-1]

	len = 0;
	for (int i = 0; i < 4; i++) {
 801dcb4:	46a8      	mov	r8, r5
 801dcb6:	e014      	b.n	801dce2 <FlashToJSON+0x7a>
		itoa(fs->gate[i], (char*) &js->gate[len], 10);
 801dcb8:	eb07 0308 	add.w	r3, r7, r8
 801dcbc:	f105 0620 	add.w	r6, r5, #32
 801dcc0:	4426      	add	r6, r4
 801dcc2:	220a      	movs	r2, #10
 801dcc4:	4631      	mov	r1, r6
 801dcc6:	7b98      	ldrb	r0, [r3, #14]
 801dcc8:	f002 f966 	bl	801ff98 <itoa>
		len += strlen((char*) &js->gate[len]);
 801dccc:	4630      	mov	r0, r6
 801dcce:	f7f2 f9cf 	bl	8010070 <strlen>
 801dcd2:	4405      	add	r5, r0
		js->gate[len] = '.';
 801dcd4:	1963      	adds	r3, r4, r5
 801dcd6:	222e      	movs	r2, #46	; 0x2e
 801dcd8:	f883 2020 	strb.w	r2, [r3, #32]
		len++;
 801dcdc:	3501      	adds	r5, #1
	for (int i = 0; i < 4; i++) {
 801dcde:	f108 0801 	add.w	r8, r8, #1
 801dce2:	f1b8 0f03 	cmp.w	r8, #3
 801dce6:	dde7      	ble.n	801dcb8 <FlashToJSON+0x50>
	}
	js->gate[--len] = '\0';
 801dce8:	1960      	adds	r0, r4, r5
 801dcea:	2500      	movs	r5, #0
 801dcec:	77c5      	strb	r5, [r0, #31]

	len = 0;
	for (int i = 0; i < 4; i++) {
 801dcee:	46a8      	mov	r8, r5
 801dcf0:	e013      	b.n	801dd1a <FlashToJSON+0xb2>
		itoa(fs->mask[i], (char*) &js->mask[len], 10);
 801dcf2:	eb07 0308 	add.w	r3, r7, r8
 801dcf6:	f105 0610 	add.w	r6, r5, #16
 801dcfa:	4426      	add	r6, r4
 801dcfc:	220a      	movs	r2, #10
 801dcfe:	4631      	mov	r1, r6
 801dd00:	7a98      	ldrb	r0, [r3, #10]
 801dd02:	f002 f949 	bl	801ff98 <itoa>
		len += strlen((char*) &js->mask[len]);
 801dd06:	4630      	mov	r0, r6
 801dd08:	f7f2 f9b2 	bl	8010070 <strlen>
 801dd0c:	4405      	add	r5, r0
		js->mask[len] = '.';
 801dd0e:	1963      	adds	r3, r4, r5
 801dd10:	222e      	movs	r2, #46	; 0x2e
 801dd12:	741a      	strb	r2, [r3, #16]
		len++;
 801dd14:	3501      	adds	r5, #1
	for (int i = 0; i < 4; i++) {
 801dd16:	f108 0801 	add.w	r8, r8, #1
 801dd1a:	f1b8 0f03 	cmp.w	r8, #3
 801dd1e:	dde8      	ble.n	801dcf2 <FlashToJSON+0x8a>
	}
	js->mask[--len] = '\0';
 801dd20:	1960      	adds	r0, r4, r5
 801dd22:	2500      	movs	r5, #0
 801dd24:	73c5      	strb	r5, [r0, #15]

	len = 0;
	for (int i = 0; i < 6; i++) {
 801dd26:	46a8      	mov	r8, r5
 801dd28:	e015      	b.n	801dd56 <FlashToJSON+0xee>
		itoa(fs->mac_addr[i], (char*) &js->mac_addr[len], 16);
 801dd2a:	eb07 0308 	add.w	r3, r7, r8
 801dd2e:	f105 0648 	add.w	r6, r5, #72	; 0x48
 801dd32:	4426      	add	r6, r4
 801dd34:	3604      	adds	r6, #4
 801dd36:	2210      	movs	r2, #16
 801dd38:	4631      	mov	r1, r6
 801dd3a:	7f98      	ldrb	r0, [r3, #30]
 801dd3c:	f002 f92c 	bl	801ff98 <itoa>
		len += strlen((char*) &js->mac_addr[len]);
 801dd40:	4630      	mov	r0, r6
 801dd42:	f7f2 f995 	bl	8010070 <strlen>
 801dd46:	4405      	add	r5, r0
		js->mac_addr[len] = '-';
 801dd48:	1963      	adds	r3, r4, r5
 801dd4a:	222d      	movs	r2, #45	; 0x2d
 801dd4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		len++;
 801dd50:	3501      	adds	r5, #1
	for (int i = 0; i < 6; i++) {
 801dd52:	f108 0801 	add.w	r8, r8, #1
 801dd56:	f1b8 0f05 	cmp.w	r8, #5
 801dd5a:	dde6      	ble.n	801dd2a <FlashToJSON+0xc2>
	}
	js->mac_addr[--len] = '\0';
 801dd5c:	4425      	add	r5, r4
 801dd5e:	2000      	movs	r0, #0
 801dd60:	f885 004b 	strb.w	r0, [r5, #75]	; 0x4b

	len = 0;
	for (int i = 0; i < 3; i++) {
 801dd64:	4680      	mov	r8, r0
	len = 0;
 801dd66:	4605      	mov	r5, r0
	for (int i = 0; i < 3; i++) {
 801dd68:	e016      	b.n	801dd98 <FlashToJSON+0x130>
		itoa(fs->ver[i], (char*) &js->ver[len], 10);
 801dd6a:	f108 030c 	add.w	r3, r8, #12
 801dd6e:	f105 0638 	add.w	r6, r5, #56	; 0x38
 801dd72:	4426      	add	r6, r4
 801dd74:	3601      	adds	r6, #1
 801dd76:	220a      	movs	r2, #10
 801dd78:	4631      	mov	r1, r6
 801dd7a:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 801dd7e:	f002 f90b 	bl	801ff98 <itoa>
		len += strlen((char*) &js->ver[len]);
 801dd82:	4630      	mov	r0, r6
 801dd84:	f7f2 f974 	bl	8010070 <strlen>
 801dd88:	4405      	add	r5, r0
		js->ver[len] = '.';
 801dd8a:	1963      	adds	r3, r4, r5
 801dd8c:	222e      	movs	r2, #46	; 0x2e
 801dd8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		len++;
 801dd92:	3501      	adds	r5, #1
	for (int i = 0; i < 3; i++) {
 801dd94:	f108 0801 	add.w	r8, r8, #1
 801dd98:	f1b8 0f02 	cmp.w	r8, #2
 801dd9c:	dde5      	ble.n	801dd6a <FlashToJSON+0x102>
	}
	js->ver[--len] = '\0';
 801dd9e:	442c      	add	r4, r5
 801dda0:	2300      	movs	r3, #0
 801dda2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801dda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ddaa <DecodeURL>:
}

void DecodeURL(uint8_t *buf, uint8_t *result) {
	while (*buf != '\r') {
 801ddaa:	e00a      	b.n	801ddc2 <DecodeURL+0x18>
		if (*buf == '%') {
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'B')) {
 801ddac:	7843      	ldrb	r3, [r0, #1]
 801ddae:	2b37      	cmp	r3, #55	; 0x37
 801ddb0:	d00e      	beq.n	801ddd0 <DecodeURL+0x26>
				*result = '{';
				buf += 2;
			}
			if ((*(buf + 1) == '2') && (*(buf + 2) == '2')) {
 801ddb2:	7843      	ldrb	r3, [r0, #1]
 801ddb4:	2b32      	cmp	r3, #50	; 0x32
 801ddb6:	d012      	beq.n	801ddde <DecodeURL+0x34>
				*result = '\"';
				buf += 2;
			}
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'D')) {
 801ddb8:	7843      	ldrb	r3, [r0, #1]
 801ddba:	2b37      	cmp	r3, #55	; 0x37
 801ddbc:	d016      	beq.n	801ddec <DecodeURL+0x42>
				break;
			}
		} else {
			*result = *buf;
		}
		buf++;
 801ddbe:	3001      	adds	r0, #1
		result++;
 801ddc0:	3101      	adds	r1, #1
	while (*buf != '\r') {
 801ddc2:	7803      	ldrb	r3, [r0, #0]
 801ddc4:	2b0d      	cmp	r3, #13
 801ddc6:	d019      	beq.n	801ddfc <DecodeURL+0x52>
		if (*buf == '%') {
 801ddc8:	2b25      	cmp	r3, #37	; 0x25
 801ddca:	d0ef      	beq.n	801ddac <DecodeURL+0x2>
			*result = *buf;
 801ddcc:	700b      	strb	r3, [r1, #0]
 801ddce:	e7f6      	b.n	801ddbe <DecodeURL+0x14>
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'B')) {
 801ddd0:	7883      	ldrb	r3, [r0, #2]
 801ddd2:	2b42      	cmp	r3, #66	; 0x42
 801ddd4:	d1ed      	bne.n	801ddb2 <DecodeURL+0x8>
				*result = '{';
 801ddd6:	237b      	movs	r3, #123	; 0x7b
 801ddd8:	700b      	strb	r3, [r1, #0]
				buf += 2;
 801ddda:	3002      	adds	r0, #2
 801dddc:	e7e9      	b.n	801ddb2 <DecodeURL+0x8>
			if ((*(buf + 1) == '2') && (*(buf + 2) == '2')) {
 801ddde:	7883      	ldrb	r3, [r0, #2]
 801dde0:	2b32      	cmp	r3, #50	; 0x32
 801dde2:	d1e9      	bne.n	801ddb8 <DecodeURL+0xe>
				*result = '\"';
 801dde4:	2322      	movs	r3, #34	; 0x22
 801dde6:	700b      	strb	r3, [r1, #0]
				buf += 2;
 801dde8:	3002      	adds	r0, #2
 801ddea:	e7e5      	b.n	801ddb8 <DecodeURL+0xe>
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'D')) {
 801ddec:	7883      	ldrb	r3, [r0, #2]
 801ddee:	2b44      	cmp	r3, #68	; 0x44
 801ddf0:	d1e5      	bne.n	801ddbe <DecodeURL+0x14>
				*result = '}';
 801ddf2:	237d      	movs	r3, #125	; 0x7d
 801ddf4:	700b      	strb	r3, [r1, #0]
				*(result + 1) = '\0';
 801ddf6:	2300      	movs	r3, #0
 801ddf8:	704b      	strb	r3, [r1, #1]
				break;
 801ddfa:	4770      	bx	lr
 801ddfc:	4770      	bx	lr
	...

0801de00 <ParseJSON>:
	}
}

void ParseJSON(json_data_t *js, uint8_t *json_str) {
 801de00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801de04:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801de08:	4680      	mov	r8, r0
 801de0a:	460f      	mov	r7, r1
	int resultCode;
	jsmn_parser p;
	jsmntok_t tokens[MAXNUMBER_OF_TOKENS];
	jsmn_init(&p);
 801de0c:	a895      	add	r0, sp, #596	; 0x254
 801de0e:	f7ff fe52 	bl	801dab6 <jsmn_init>
	resultCode = jsmn_parse(&p, (char*) json_str, strlen((char*) json_str),
 801de12:	4638      	mov	r0, r7
 801de14:	f7f2 f92c 	bl	8010070 <strlen>
 801de18:	2320      	movs	r3, #32
 801de1a:	9300      	str	r3, [sp, #0]
 801de1c:	ab15      	add	r3, sp, #84	; 0x54
 801de1e:	4602      	mov	r2, r0
 801de20:	4639      	mov	r1, r7
 801de22:	a895      	add	r0, sp, #596	; 0x254
 801de24:	f7ff fd4c 	bl	801d8c0 <jsmn_parse>
			tokens, sizeof(tokens) / sizeof(tokens[0]));

	if (resultCode > 0) {
 801de28:	1e06      	subs	r6, r0, #0
 801de2a:	dd7d      	ble.n	801df28 <ParseJSON+0x128>
 801de2c:	2501      	movs	r5, #1
 801de2e:	e008      	b.n	801de42 <ParseJSON+0x42>
				/*
				 {\"addr_IP\":\"192.168.4.255\",\"mask\":\"255.255.255.000\",\"gate\":\"192.168.4.1\",\"port\":102,\"speed\":187500,
				 \"addr_own\":1,\"ver\":\"0.0.0\",\"sn\":0,\"addr_MAC\":\"AA-BB-CC-DD-EE-FF\"}
				 */
				if (strcmp((char*) Prev_keyString, "addr_IP") == 0) {
					strcpy((char*) js->ip_addr, (char*) keyString);
 801de30:	a907      	add	r1, sp, #28
 801de32:	4640      	mov	r0, r8
 801de34:	f002 f8d4 	bl	801ffe0 <strcpy>
						js->serial_num = (uint8_t) atoi((char*) keyString);
					}
				} else if (strcmp((char*) Prev_keyString, "addr_MAC") == 0) {
					strcpy((char*) js->mac_addr, (char*) keyString);
				}
				strcpy((char*) Prev_keyString, (char*) keyString);
 801de38:	a907      	add	r1, sp, #28
 801de3a:	a80e      	add	r0, sp, #56	; 0x38
 801de3c:	f002 f8d0 	bl	801ffe0 <strcpy>
		for (int i = 1; i <= resultCode - 1; i++) // resultCode == 0 => whole json string
 801de40:	3501      	adds	r5, #1
 801de42:	1e73      	subs	r3, r6, #1
 801de44:	429d      	cmp	r5, r3
 801de46:	dc6f      	bgt.n	801df28 <ParseJSON+0x128>
			jsmntok_t key = tokens[i];
 801de48:	ac03      	add	r4, sp, #12
 801de4a:	ab15      	add	r3, sp, #84	; 0x54
 801de4c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 801de50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801de52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			uint16_t length = key.end - key.start;
 801de56:	b292      	uxth	r2, r2
 801de58:	b28c      	uxth	r4, r1
 801de5a:	1b12      	subs	r2, r2, r4
 801de5c:	b294      	uxth	r4, r2
			if (length < MAX_TOKEN_LENGTH) {
 801de5e:	2c18      	cmp	r4, #24
 801de60:	d8ee      	bhi.n	801de40 <ParseJSON+0x40>
				memcpy(keyString, &json_str[key.start], length);
 801de62:	f10d 091c 	add.w	r9, sp, #28
 801de66:	4622      	mov	r2, r4
 801de68:	4439      	add	r1, r7
 801de6a:	4648      	mov	r0, r9
 801de6c:	f002 f8a5 	bl	801ffba <memcpy>
				keyString[length] = '\0';
 801de70:	2300      	movs	r3, #0
 801de72:	f809 3004 	strb.w	r3, [r9, r4]
				if (strcmp((char*) Prev_keyString, "addr_IP") == 0) {
 801de76:	492e      	ldr	r1, [pc, #184]	; (801df30 <ParseJSON+0x130>)
 801de78:	a80e      	add	r0, sp, #56	; 0x38
 801de7a:	f7f2 f8ef 	bl	801005c <strcmp>
 801de7e:	2800      	cmp	r0, #0
 801de80:	d0d6      	beq.n	801de30 <ParseJSON+0x30>
				} else if (strcmp((char*) Prev_keyString, "mask") == 0) {
 801de82:	492c      	ldr	r1, [pc, #176]	; (801df34 <ParseJSON+0x134>)
 801de84:	a80e      	add	r0, sp, #56	; 0x38
 801de86:	f7f2 f8e9 	bl	801005c <strcmp>
 801de8a:	b318      	cbz	r0, 801ded4 <ParseJSON+0xd4>
				} else if (strcmp((char*) Prev_keyString, "gate") == 0) {
 801de8c:	492a      	ldr	r1, [pc, #168]	; (801df38 <ParseJSON+0x138>)
 801de8e:	a80e      	add	r0, sp, #56	; 0x38
 801de90:	f7f2 f8e4 	bl	801005c <strcmp>
 801de94:	b320      	cbz	r0, 801dee0 <ParseJSON+0xe0>
				} else if (strcmp((char*) Prev_keyString, "port") == 0) {
 801de96:	4929      	ldr	r1, [pc, #164]	; (801df3c <ParseJSON+0x13c>)
 801de98:	a80e      	add	r0, sp, #56	; 0x38
 801de9a:	f7f2 f8df 	bl	801005c <strcmp>
 801de9e:	b328      	cbz	r0, 801deec <ParseJSON+0xec>
				} else if (strcmp((char*) Prev_keyString, "speed") == 0) {
 801dea0:	4927      	ldr	r1, [pc, #156]	; (801df40 <ParseJSON+0x140>)
 801dea2:	a80e      	add	r0, sp, #56	; 0x38
 801dea4:	f7f2 f8da 	bl	801005c <strcmp>
 801dea8:	b330      	cbz	r0, 801def8 <ParseJSON+0xf8>
				} else if (strcmp((char*) Prev_keyString, "addr_own") == 0) {
 801deaa:	4926      	ldr	r1, [pc, #152]	; (801df44 <ParseJSON+0x144>)
 801deac:	a80e      	add	r0, sp, #56	; 0x38
 801deae:	f7f2 f8d5 	bl	801005c <strcmp>
 801deb2:	b338      	cbz	r0, 801df04 <ParseJSON+0x104>
				} else if (strcmp((char*) Prev_keyString, "sn") == 0) {
 801deb4:	4924      	ldr	r1, [pc, #144]	; (801df48 <ParseJSON+0x148>)
 801deb6:	a80e      	add	r0, sp, #56	; 0x38
 801deb8:	f7f2 f8d0 	bl	801005c <strcmp>
 801debc:	bb40      	cbnz	r0, 801df10 <ParseJSON+0x110>
					if (js->serial_num
 801debe:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	d1b8      	bne.n	801de38 <ParseJSON+0x38>
						js->serial_num = (uint8_t) atoi((char*) keyString);
 801dec6:	a807      	add	r0, sp, #28
 801dec8:	f002 f826 	bl	801ff18 <atoi>
 801decc:	b2c0      	uxtb	r0, r0
 801dece:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
 801ded2:	e7b1      	b.n	801de38 <ParseJSON+0x38>
					strcpy((char*) js->mask, (char*) keyString);
 801ded4:	a907      	add	r1, sp, #28
 801ded6:	f108 0010 	add.w	r0, r8, #16
 801deda:	f002 f881 	bl	801ffe0 <strcpy>
 801dede:	e7ab      	b.n	801de38 <ParseJSON+0x38>
					strcpy((char*) js->gate, (char*) keyString);
 801dee0:	a907      	add	r1, sp, #28
 801dee2:	f108 0020 	add.w	r0, r8, #32
 801dee6:	f002 f87b 	bl	801ffe0 <strcpy>
 801deea:	e7a5      	b.n	801de38 <ParseJSON+0x38>
					js->port = (uint16_t) atoi((char*) keyString);
 801deec:	a807      	add	r0, sp, #28
 801deee:	f002 f813 	bl	801ff18 <atoi>
 801def2:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
 801def6:	e79f      	b.n	801de38 <ParseJSON+0x38>
					js->speed = (uint32_t) atoi((char*) keyString);
 801def8:	a807      	add	r0, sp, #28
 801defa:	f002 f80d 	bl	801ff18 <atoi>
 801defe:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 801df02:	e799      	b.n	801de38 <ParseJSON+0x38>
					js->own_addr = (uint8_t) atoi((char*) keyString);
 801df04:	a807      	add	r0, sp, #28
 801df06:	f002 f807 	bl	801ff18 <atoi>
 801df0a:	f888 0038 	strb.w	r0, [r8, #56]	; 0x38
 801df0e:	e793      	b.n	801de38 <ParseJSON+0x38>
				} else if (strcmp((char*) Prev_keyString, "addr_MAC") == 0) {
 801df10:	490e      	ldr	r1, [pc, #56]	; (801df4c <ParseJSON+0x14c>)
 801df12:	a80e      	add	r0, sp, #56	; 0x38
 801df14:	f7f2 f8a2 	bl	801005c <strcmp>
 801df18:	2800      	cmp	r0, #0
 801df1a:	d18d      	bne.n	801de38 <ParseJSON+0x38>
					strcpy((char*) js->mac_addr, (char*) keyString);
 801df1c:	a907      	add	r1, sp, #28
 801df1e:	f108 004c 	add.w	r0, r8, #76	; 0x4c
 801df22:	f002 f85d 	bl	801ffe0 <strcpy>
 801df26:	e787      	b.n	801de38 <ParseJSON+0x38>
			}
		}
	}

}
 801df28:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801df2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801df30:	080258ac 	.word	0x080258ac
 801df34:	080258b4 	.word	0x080258b4
 801df38:	080258bc 	.word	0x080258bc
 801df3c:	080258c4 	.word	0x080258c4
 801df40:	080258cc 	.word	0x080258cc
 801df44:	080258d4 	.word	0x080258d4
 801df48:	080258e0 	.word	0x080258e0
 801df4c:	080258e4 	.word	0x080258e4

0801df50 <JSONToFlash>:

void JSONToFlash(json_data_t *js, flash_data_t *fs) {
 801df50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df52:	b083      	sub	sp, #12
 801df54:	4607      	mov	r7, r0
 801df56:	460e      	mov	r6, r1
	union {
		uint32_t ui32;
		uint8_t ui8[4];
	} tmp_u;

	ipaddr_aton((char*)js->ip_addr, &new_ip);
 801df58:	a901      	add	r1, sp, #4
 801df5a:	f7f9 f81d 	bl	8016f98 <ip4addr_aton>
	tmp_u.ui32 = new_ip.addr;
 801df5e:	9b01      	ldr	r3, [sp, #4]
	fs->IP_addr[0] = tmp_u.ui8[0];
 801df60:	71b3      	strb	r3, [r6, #6]
	fs->IP_addr[1] = tmp_u.ui8[1];
 801df62:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801df66:	71f2      	strb	r2, [r6, #7]
	fs->IP_addr[2] = tmp_u.ui8[2];
 801df68:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801df6c:	7232      	strb	r2, [r6, #8]
	fs->IP_addr[3] = tmp_u.ui8[3];
 801df6e:	f3c3 6307 	ubfx	r3, r3, #24, #8
 801df72:	7273      	strb	r3, [r6, #9]

	ipaddr_aton((char*)js->gate, &new_ip);
 801df74:	a901      	add	r1, sp, #4
 801df76:	f107 0020 	add.w	r0, r7, #32
 801df7a:	f7f9 f80d 	bl	8016f98 <ip4addr_aton>
	tmp_u.ui32 = new_ip.addr;
 801df7e:	9b01      	ldr	r3, [sp, #4]
	fs->gate[0] = tmp_u.ui8[0];
 801df80:	73b3      	strb	r3, [r6, #14]
	fs->gate[1] = tmp_u.ui8[1];
 801df82:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801df86:	73f2      	strb	r2, [r6, #15]
	fs->gate[2] = tmp_u.ui8[2];
 801df88:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801df8c:	7432      	strb	r2, [r6, #16]
	fs->gate[3] = tmp_u.ui8[3];
 801df8e:	f3c3 6307 	ubfx	r3, r3, #24, #8
 801df92:	7473      	strb	r3, [r6, #17]

	ipaddr_aton((char*)js->mask, &new_ip);
 801df94:	a901      	add	r1, sp, #4
 801df96:	f107 0010 	add.w	r0, r7, #16
 801df9a:	f7f8 fffd 	bl	8016f98 <ip4addr_aton>
	tmp_u.ui32 = new_ip.addr;
 801df9e:	9b01      	ldr	r3, [sp, #4]
	fs->mask[0] = tmp_u.ui8[0];
 801dfa0:	72b3      	strb	r3, [r6, #10]
	fs->mask[1] = tmp_u.ui8[1];
 801dfa2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801dfa6:	72f2      	strb	r2, [r6, #11]
	fs->mask[2] = tmp_u.ui8[2];
 801dfa8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801dfac:	7332      	strb	r2, [r6, #12]
	fs->mask[3] = tmp_u.ui8[3];
 801dfae:	f3c3 6307 	ubfx	r3, r3, #24, #8
 801dfb2:	7373      	strb	r3, [r6, #13]
	uint8_t *ptr = js->mac_addr;
 801dfb4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
	for (int i = 0; i < 6; i++) {
 801dfb8:	2500      	movs	r5, #0
 801dfba:	e017      	b.n	801dfec <JSONToFlash+0x9c>
		uint8_t tok[3];
		int j = 0;
		while (j < 2 && *ptr != '-') {
			tok[j++] = *ptr++;
 801dfbc:	3401      	adds	r4, #1
 801dfbe:	a902      	add	r1, sp, #8
 801dfc0:	4419      	add	r1, r3
 801dfc2:	f801 2c08 	strb.w	r2, [r1, #-8]
 801dfc6:	3301      	adds	r3, #1
		while (j < 2 && *ptr != '-') {
 801dfc8:	2b01      	cmp	r3, #1
 801dfca:	dc02      	bgt.n	801dfd2 <JSONToFlash+0x82>
 801dfcc:	7822      	ldrb	r2, [r4, #0]
 801dfce:	2a2d      	cmp	r2, #45	; 0x2d
 801dfd0:	d1f4      	bne.n	801dfbc <JSONToFlash+0x6c>
		}
		ptr++;
 801dfd2:	3401      	adds	r4, #1
		tok[j] = '\0';
 801dfd4:	aa02      	add	r2, sp, #8
 801dfd6:	4413      	add	r3, r2
 801dfd8:	2100      	movs	r1, #0
 801dfda:	f803 1c08 	strb.w	r1, [r3, #-8]
		fs->mac_addr[i] = strtol((char*)tok, NULL, 16);
 801dfde:	2210      	movs	r2, #16
 801dfe0:	4668      	mov	r0, sp
 801dfe2:	f002 f897 	bl	8020114 <strtol>
 801dfe6:	1973      	adds	r3, r6, r5
 801dfe8:	7798      	strb	r0, [r3, #30]
	for (int i = 0; i < 6; i++) {
 801dfea:	3501      	adds	r5, #1
 801dfec:	2d05      	cmp	r5, #5
 801dfee:	dc01      	bgt.n	801dff4 <JSONToFlash+0xa4>
 801dff0:	2300      	movs	r3, #0
 801dff2:	e7e9      	b.n	801dfc8 <JSONToFlash+0x78>
	}
	fs->own_addr = js->own_addr;
 801dff4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801dff8:	80b3      	strh	r3, [r6, #4]
	fs->port = js->port;
 801dffa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801dffc:	8273      	strh	r3, [r6, #18]
	fs->serial_num = js->serial_num;
 801dffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e000:	6173      	str	r3, [r6, #20]
	fs->speed = js->speed;
 801e002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e004:	6033      	str	r3, [r6, #0]
}
 801e006:	b003      	add	sp, #12
 801e008:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801e00c <LogInit>:
static char* txt_lev[NUM_LOG_LEV - 1] = { "OFF", "ERR", "WAR", "INF", };

static char* txt_sys[NUM_OF_SUB_SYS] = { "MEM", "WEB", "458", "TCP", "LOG" };

void LogInit(UART_HandleTypeDef * log_if) {
	hlog.interface = log_if;
 801e00c:	4b05      	ldr	r3, [pc, #20]	; (801e024 <LogInit+0x18>)
 801e00e:	6018      	str	r0, [r3, #0]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 801e010:	2300      	movs	r3, #0
 801e012:	e004      	b.n	801e01e <LogInit+0x12>
		hlog.levels[i] = LOG_LEV_ALL;
 801e014:	4a03      	ldr	r2, [pc, #12]	; (801e024 <LogInit+0x18>)
 801e016:	441a      	add	r2, r3
 801e018:	2104      	movs	r1, #4
 801e01a:	7111      	strb	r1, [r2, #4]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 801e01c:	3301      	adds	r3, #1
 801e01e:	2b04      	cmp	r3, #4
 801e020:	ddf8      	ble.n	801e014 <LogInit+0x8>
	}
}
 801e022:	4770      	bx	lr
 801e024:	20011e64 	.word	0x20011e64

0801e028 <LogText__>:

void LogText__(log_sub_sys sys, log_level level, char *msg) {
 801e028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e02c:	4606      	mov	r6, r0
 801e02e:	460d      	mov	r5, r1
 801e030:	4617      	mov	r7, r2
	if (level <= hlog.levels[sys]) {
 801e032:	4b21      	ldr	r3, [pc, #132]	; (801e0b8 <LogText__+0x90>)
 801e034:	4403      	add	r3, r0
 801e036:	791b      	ldrb	r3, [r3, #4]
 801e038:	428b      	cmp	r3, r1
 801e03a:	d204      	bcs.n	801e046 <LogText__+0x1e>
 801e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		while (hlog.interface->gState != HAL_UART_STATE_READY) {
			osDelay(1);
 801e040:	2001      	movs	r0, #1
 801e042:	f7f4 fd3f 	bl	8012ac4 <osDelay>
		while (hlog.interface->gState != HAL_UART_STATE_READY) {
 801e046:	4b1c      	ldr	r3, [pc, #112]	; (801e0b8 <LogText__+0x90>)
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801e04e:	b2db      	uxtb	r3, r3
 801e050:	2b20      	cmp	r3, #32
 801e052:	d1f5      	bne.n	801e040 <LogText__+0x18>
 801e054:	463b      	mov	r3, r7
 801e056:	2400      	movs	r4, #0
 801e058:	e001      	b.n	801e05e <LogText__+0x36>
		}
		uint len = 0;
		char * ptr = msg;
		while (*ptr++) {
			len++;
 801e05a:	3401      	adds	r4, #1
		while (*ptr++) {
 801e05c:	4613      	mov	r3, r2
 801e05e:	1c5a      	adds	r2, r3, #1
 801e060:	781b      	ldrb	r3, [r3, #0]
 801e062:	2b00      	cmp	r3, #0
 801e064:	d1f9      	bne.n	801e05a <LogText__+0x32>
		}
		ptr = (char*) pvPortMalloc((size_t) (len + 10));
 801e066:	f104 000a 	add.w	r0, r4, #10
 801e06a:	f7f5 f939 	bl	80132e0 <pvPortMalloc>
		if (ptr != NULL) {
 801e06e:	4680      	mov	r8, r0
 801e070:	b300      	cbz	r0, 801e0b4 <LogText__+0x8c>
			strcpy(ptr, txt_sys[sys]);
 801e072:	4b12      	ldr	r3, [pc, #72]	; (801e0bc <LogText__+0x94>)
 801e074:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 801e078:	f001 ffb2 	bl	801ffe0 <strcpy>
			strcpy(ptr + 3, "_");
 801e07c:	4b10      	ldr	r3, [pc, #64]	; (801e0c0 <LogText__+0x98>)
 801e07e:	881b      	ldrh	r3, [r3, #0]
 801e080:	f8a8 3003 	strh.w	r3, [r8, #3]
			strcpy(ptr + 4, txt_lev[level]);
 801e084:	4b0f      	ldr	r3, [pc, #60]	; (801e0c4 <LogText__+0x9c>)
 801e086:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801e08a:	f108 0004 	add.w	r0, r8, #4
 801e08e:	f001 ffa7 	bl	801ffe0 <strcpy>
			strcpy(ptr + 7, ":");
 801e092:	4b0d      	ldr	r3, [pc, #52]	; (801e0c8 <LogText__+0xa0>)
 801e094:	881b      	ldrh	r3, [r3, #0]
 801e096:	f8a8 3007 	strh.w	r3, [r8, #7]
			strcpy(ptr + 8, msg);
 801e09a:	4639      	mov	r1, r7
 801e09c:	f108 0008 	add.w	r0, r8, #8
 801e0a0:	f001 ff9e 	bl	801ffe0 <strcpy>
			HAL_UART_Transmit_DMA(hlog.interface, (uint8_t*) ptr, len + 8);
 801e0a4:	f104 0208 	add.w	r2, r4, #8
 801e0a8:	b292      	uxth	r2, r2
 801e0aa:	4641      	mov	r1, r8
 801e0ac:	4b02      	ldr	r3, [pc, #8]	; (801e0b8 <LogText__+0x90>)
 801e0ae:	6818      	ldr	r0, [r3, #0]
 801e0b0:	f7f4 fb38 	bl	8012724 <HAL_UART_Transmit_DMA>
 801e0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0b8:	20011e64 	.word	0x20011e64
 801e0bc:	08025928 	.word	0x08025928
 801e0c0:	080258f0 	.word	0x080258f0
 801e0c4:	08025918 	.word	0x08025918
 801e0c8:	08025874 	.word	0x08025874

0801e0cc <MX_LWIP_Init>:
/* USER CODE END 2 */

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void) {
 801e0cc:	b570      	push	{r4, r5, r6, lr}
 801e0ce:	b084      	sub	sp, #16
	/* IP addresses initialization */
	IP_ADDRESS[0] = hflash.IP_addr[0];
 801e0d0:	4b3f      	ldr	r3, [pc, #252]	; (801e1d0 <MX_LWIP_Init+0x104>)
 801e0d2:	799a      	ldrb	r2, [r3, #6]
 801e0d4:	4e3f      	ldr	r6, [pc, #252]	; (801e1d4 <MX_LWIP_Init+0x108>)
 801e0d6:	7032      	strb	r2, [r6, #0]
	IP_ADDRESS[1] = hflash.IP_addr[1];
 801e0d8:	79da      	ldrb	r2, [r3, #7]
 801e0da:	7072      	strb	r2, [r6, #1]
	IP_ADDRESS[2] = hflash.IP_addr[2];
 801e0dc:	7a1a      	ldrb	r2, [r3, #8]
 801e0de:	70b2      	strb	r2, [r6, #2]
	IP_ADDRESS[3] = hflash.IP_addr[3];
 801e0e0:	7a5a      	ldrb	r2, [r3, #9]
 801e0e2:	70f2      	strb	r2, [r6, #3]
	NETMASK_ADDRESS[0] = hflash.mask[0];
 801e0e4:	7a9a      	ldrb	r2, [r3, #10]
 801e0e6:	4d3c      	ldr	r5, [pc, #240]	; (801e1d8 <MX_LWIP_Init+0x10c>)
 801e0e8:	702a      	strb	r2, [r5, #0]
	NETMASK_ADDRESS[1] = hflash.mask[1];
 801e0ea:	7ada      	ldrb	r2, [r3, #11]
 801e0ec:	706a      	strb	r2, [r5, #1]
	NETMASK_ADDRESS[2] = hflash.mask[2];
 801e0ee:	7b1a      	ldrb	r2, [r3, #12]
 801e0f0:	70aa      	strb	r2, [r5, #2]
	NETMASK_ADDRESS[3] = hflash.mask[3];
 801e0f2:	7b5a      	ldrb	r2, [r3, #13]
 801e0f4:	70ea      	strb	r2, [r5, #3]
	GATEWAY_ADDRESS[0] = hflash.gate[0];
 801e0f6:	7b9a      	ldrb	r2, [r3, #14]
 801e0f8:	4c38      	ldr	r4, [pc, #224]	; (801e1dc <MX_LWIP_Init+0x110>)
 801e0fa:	7022      	strb	r2, [r4, #0]
	GATEWAY_ADDRESS[1] = hflash.gate[1];
 801e0fc:	7bda      	ldrb	r2, [r3, #15]
 801e0fe:	7062      	strb	r2, [r4, #1]
	GATEWAY_ADDRESS[2] = hflash.gate[2];
 801e100:	7c1a      	ldrb	r2, [r3, #16]
 801e102:	70a2      	strb	r2, [r4, #2]
	GATEWAY_ADDRESS[3] = hflash.gate[3];
 801e104:	7c5b      	ldrb	r3, [r3, #17]
 801e106:	70e3      	strb	r3, [r4, #3]

	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);
 801e108:	2100      	movs	r1, #0
 801e10a:	4608      	mov	r0, r1
 801e10c:	f7f7 ff62 	bl	8015fd4 <tcpip_init>

	/* IP addresses initialization without DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2],
 801e110:	7832      	ldrb	r2, [r6, #0]
 801e112:	7873      	ldrb	r3, [r6, #1]
 801e114:	041b      	lsls	r3, r3, #16
 801e116:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801e11a:	78b2      	ldrb	r2, [r6, #2]
 801e11c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e120:	78f2      	ldrb	r2, [r6, #3]
 801e122:	4313      	orrs	r3, r2
 801e124:	021a      	lsls	r2, r3, #8
 801e126:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801e12a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801e12e:	0a19      	lsrs	r1, r3, #8
 801e130:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e134:	430a      	orrs	r2, r1
 801e136:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 801e13a:	4929      	ldr	r1, [pc, #164]	; (801e1e0 <MX_LWIP_Init+0x114>)
 801e13c:	600b      	str	r3, [r1, #0]
			IP_ADDRESS[3]);
	IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1],
 801e13e:	782a      	ldrb	r2, [r5, #0]
 801e140:	786b      	ldrb	r3, [r5, #1]
 801e142:	041b      	lsls	r3, r3, #16
 801e144:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801e148:	78aa      	ldrb	r2, [r5, #2]
 801e14a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e14e:	78ea      	ldrb	r2, [r5, #3]
 801e150:	4313      	orrs	r3, r2
 801e152:	021a      	lsls	r2, r3, #8
 801e154:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801e158:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801e15c:	0a18      	lsrs	r0, r3, #8
 801e15e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e162:	4302      	orrs	r2, r0
 801e164:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 801e168:	4a1e      	ldr	r2, [pc, #120]	; (801e1e4 <MX_LWIP_Init+0x118>)
 801e16a:	6013      	str	r3, [r2, #0]
			NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
	IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2],
 801e16c:	7820      	ldrb	r0, [r4, #0]
 801e16e:	7863      	ldrb	r3, [r4, #1]
 801e170:	041b      	lsls	r3, r3, #16
 801e172:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801e176:	78a0      	ldrb	r0, [r4, #2]
 801e178:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801e17c:	78e0      	ldrb	r0, [r4, #3]
 801e17e:	4303      	orrs	r3, r0
 801e180:	0218      	lsls	r0, r3, #8
 801e182:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 801e186:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801e18a:	0a1c      	lsrs	r4, r3, #8
 801e18c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e190:	4320      	orrs	r0, r4
 801e192:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 801e196:	4b14      	ldr	r3, [pc, #80]	; (801e1e8 <MX_LWIP_Init+0x11c>)
 801e198:	6018      	str	r0, [r3, #0]
			GATEWAY_ADDRESS[3]);

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 801e19a:	4c14      	ldr	r4, [pc, #80]	; (801e1ec <MX_LWIP_Init+0x120>)
 801e19c:	4814      	ldr	r0, [pc, #80]	; (801e1f0 <MX_LWIP_Init+0x124>)
 801e19e:	9002      	str	r0, [sp, #8]
 801e1a0:	4814      	ldr	r0, [pc, #80]	; (801e1f4 <MX_LWIP_Init+0x128>)
 801e1a2:	9001      	str	r0, [sp, #4]
 801e1a4:	2000      	movs	r0, #0
 801e1a6:	9000      	str	r0, [sp, #0]
 801e1a8:	4620      	mov	r0, r4
 801e1aa:	f7f9 feeb 	bl	8017f84 <netif_add>
			&tcpip_input);

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 801e1ae:	4620      	mov	r0, r4
 801e1b0:	f7f9 ff28 	bl	8018004 <netif_set_default>

	if (netif_is_link_up(&gnetif)) {
 801e1b4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801e1b8:	f013 0f04 	tst.w	r3, #4
 801e1bc:	d104      	bne.n	801e1c8 <MX_LWIP_Init+0xfc>
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
	} else {
		/* When the netif link is down this function must be called */
		netif_set_down(&gnetif);
 801e1be:	480b      	ldr	r0, [pc, #44]	; (801e1ec <MX_LWIP_Init+0x120>)
 801e1c0:	f7f9 ff38 	bl	8018034 <netif_set_down>
	}

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 801e1c4:	b004      	add	sp, #16
 801e1c6:	bd70      	pop	{r4, r5, r6, pc}
		netif_set_up(&gnetif);
 801e1c8:	4620      	mov	r0, r4
 801e1ca:	f7f9 ff21 	bl	8018010 <netif_set_up>
 801e1ce:	e7f9      	b.n	801e1c4 <MX_LWIP_Init+0xf8>
 801e1d0:	2000ecd4 	.word	0x2000ecd4
 801e1d4:	20011eac 	.word	0x20011eac
 801e1d8:	20011ea8 	.word	0x20011ea8
 801e1dc:	20011e70 	.word	0x20011e70
 801e1e0:	20011ea4 	.word	0x20011ea4
 801e1e4:	20011eb0 	.word	0x20011eb0
 801e1e8:	20011eb4 	.word	0x20011eb4
 801e1ec:	20011e74 	.word	0x20011e74
 801e1f0:	08015f1d 	.word	0x08015f1d
 801e1f4:	0801d25d 	.word	0x0801d25d

0801e1f8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 801e1f8:	b510      	push	{r4, lr}
 801e1fa:	4604      	mov	r4, r0
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 801e1fc:	6802      	ldr	r2, [r0, #0]
 801e1fe:	4b0e      	ldr	r3, [pc, #56]	; (801e238 <HAL_TIM_PeriodElapsedCallback+0x40>)
 801e200:	429a      	cmp	r2, r3
 801e202:	d008      	beq.n	801e216 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM8) {
 801e204:	6822      	ldr	r2, [r4, #0]
 801e206:	4b0d      	ldr	r3, [pc, #52]	; (801e23c <HAL_TIM_PeriodElapsedCallback+0x44>)
 801e208:	429a      	cmp	r2, r3
 801e20a:	d007      	beq.n	801e21c <HAL_TIM_PeriodElapsedCallback+0x24>
		CommandProcess();
	}
	if (htim->Instance == TIM7) {
 801e20c:	6822      	ldr	r2, [r4, #0]
 801e20e:	4b0c      	ldr	r3, [pc, #48]	; (801e240 <HAL_TIM_PeriodElapsedCallback+0x48>)
 801e210:	429a      	cmp	r2, r3
 801e212:	d006      	beq.n	801e222 <HAL_TIM_PeriodElapsedCallback+0x2a>
 801e214:	bd10      	pop	{r4, pc}
		HAL_IncTick();
 801e216:	f7f2 f8d5 	bl	80103c4 <HAL_IncTick>
 801e21a:	e7f3      	b.n	801e204 <HAL_TIM_PeriodElapsedCallback+0xc>
		CommandProcess();
 801e21c:	f000 f89a 	bl	801e354 <CommandProcess>
 801e220:	e7f4      	b.n	801e20c <HAL_TIM_PeriodElapsedCallback+0x14>
		__HAL_TIM_SET_COUNTER(&htim7, 0x00U);
 801e222:	4808      	ldr	r0, [pc, #32]	; (801e244 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 801e224:	6803      	ldr	r3, [r0, #0]
 801e226:	2200      	movs	r2, #0
 801e228:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim7);
 801e22a:	f7f3 fdfc 	bl	8011e26 <HAL_TIM_Base_Start_IT>
		ulHighFrequencyTimerTicks++;
 801e22e:	4a06      	ldr	r2, [pc, #24]	; (801e248 <HAL_TIM_PeriodElapsedCallback+0x50>)
 801e230:	6813      	ldr	r3, [r2, #0]
 801e232:	3301      	adds	r3, #1
 801e234:	6013      	str	r3, [r2, #0]
	}
	/* USER CODE END Callback 1 */
}
 801e236:	e7ed      	b.n	801e214 <HAL_TIM_PeriodElapsedCallback+0x1c>
 801e238:	40010000 	.word	0x40010000
 801e23c:	40010400 	.word	0x40010400
 801e240:	40001400 	.word	0x40001400
 801e244:	20011f60 	.word	0x20011f60
 801e248:	20009514 	.word	0x20009514

0801e24c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 801e24c:	e7fe      	b.n	801e24c <Error_Handler>
	...

0801e250 <SystemClock_Config>:
void SystemClock_Config(void) {
 801e250:	b500      	push	{lr}
 801e252:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 801e254:	2230      	movs	r2, #48	; 0x30
 801e256:	2100      	movs	r1, #0
 801e258:	a808      	add	r0, sp, #32
 801e25a:	f001 feb9 	bl	801ffd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 801e25e:	2300      	movs	r3, #0
 801e260:	9303      	str	r3, [sp, #12]
 801e262:	9304      	str	r3, [sp, #16]
 801e264:	9305      	str	r3, [sp, #20]
 801e266:	9306      	str	r3, [sp, #24]
 801e268:	9307      	str	r3, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE()
 801e26a:	9301      	str	r3, [sp, #4]
 801e26c:	4a22      	ldr	r2, [pc, #136]	; (801e2f8 <SystemClock_Config+0xa8>)
 801e26e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801e270:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801e274:	6411      	str	r1, [r2, #64]	; 0x40
 801e276:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801e278:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 801e27c:	9201      	str	r2, [sp, #4]
 801e27e:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801e280:	9302      	str	r3, [sp, #8]
 801e282:	4b1e      	ldr	r3, [pc, #120]	; (801e2fc <SystemClock_Config+0xac>)
 801e284:	681a      	ldr	r2, [r3, #0]
 801e286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801e28a:	601a      	str	r2, [r3, #0]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e292:	9302      	str	r3, [sp, #8]
 801e294:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 801e296:	2309      	movs	r3, #9
 801e298:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801e29a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e29e:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801e2a0:	2301      	movs	r3, #1
 801e2a2:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801e2a4:	2302      	movs	r3, #2
 801e2a6:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801e2a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 801e2ac:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 801e2ae:	2219      	movs	r2, #25
 801e2b0:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 801e2b2:	f44f 72a8 	mov.w	r2, #336	; 0x150
 801e2b6:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801e2b8:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 801e2ba:	2305      	movs	r3, #5
 801e2bc:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 801e2be:	a808      	add	r0, sp, #32
 801e2c0:	f7f3 fa68 	bl	8011794 <HAL_RCC_OscConfig>
 801e2c4:	b998      	cbnz	r0, 801e2ee <SystemClock_Config+0x9e>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 801e2c6:	230f      	movs	r3, #15
 801e2c8:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801e2ca:	2302      	movs	r3, #2
 801e2cc:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801e2ce:	2300      	movs	r3, #0
 801e2d0:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801e2d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e2d6:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801e2d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801e2dc:	9307      	str	r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 801e2de:	2105      	movs	r1, #5
 801e2e0:	a803      	add	r0, sp, #12
 801e2e2:	f7f3 fc75 	bl	8011bd0 <HAL_RCC_ClockConfig>
 801e2e6:	b920      	cbnz	r0, 801e2f2 <SystemClock_Config+0xa2>
}
 801e2e8:	b015      	add	sp, #84	; 0x54
 801e2ea:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 801e2ee:	f7ff ffad 	bl	801e24c <Error_Handler>
		Error_Handler();
 801e2f2:	f7ff ffab 	bl	801e24c <Error_Handler>
 801e2f6:	bf00      	nop
 801e2f8:	40023800 	.word	0x40023800
 801e2fc:	40007000 	.word	0x40007000

0801e300 <main>:
int main(void) {
 801e300:	b508      	push	{r3, lr}
	HAL_Init();
 801e302:	f7f2 f845 	bl	8010390 <HAL_Init>
	SystemClock_Config();
 801e306:	f7ff ffa3 	bl	801e250 <SystemClock_Config>
	HAL_FLASH_Unlock();
 801e30a:	f7f2 ffe7 	bl	80112dc <HAL_FLASH_Unlock>
	EE_Init();
 801e30e:	f7fe fc25 	bl	801cb5c <EE_Init>
	FlashInit();
 801e312:	f7fe f9db 	bl	801c6cc <FlashInit>
	ProtocolSettingsInit(&hprot);
 801e316:	480d      	ldr	r0, [pc, #52]	; (801e34c <main+0x4c>)
 801e318:	f000 faba 	bl	801e890 <ProtocolSettingsInit>
	MX_GPIO_Init();
 801e31c:	f7ff f904 	bl	801d528 <MX_GPIO_Init>
	MX_DMA_Init();
 801e320:	f7fe fb36 	bl	801c990 <MX_DMA_Init>
	MX_UART5_Init();
 801e324:	f001 fb5c 	bl	801f9e0 <MX_UART5_Init>
	MX_TIM8_Init();
 801e328:	f000 feae 	bl	801f088 <MX_TIM8_Init>
	MX_TIM7_Init();
 801e32c:	f000 fe86 	bl	801f03c <MX_TIM7_Init>
	MX_USART1_UART_Init();
 801e330:	f001 fb76 	bl	801fa20 <MX_USART1_UART_Init>
	MX_IWDG_Init();
 801e334:	f7ff f956 	bl	801d5e4 <MX_IWDG_Init>
	LogInit(&huart1);
 801e338:	4805      	ldr	r0, [pc, #20]	; (801e350 <main+0x50>)
 801e33a:	f7ff fe67 	bl	801e00c <LogInit>
	RunAllTests();
 801e33e:	f001 fdd9 	bl	801fef4 <RunAllTests>
	MX_FREERTOS_Init();
 801e342:	f7ff f87f 	bl	801d444 <MX_FREERTOS_Init>
	osKernelStart();
 801e346:	f7f4 fb79 	bl	8012a3c <osKernelStart>
 801e34a:	e7fe      	b.n	801e34a <main+0x4a>
 801e34c:	20011ecc 	.word	0x20011ecc
 801e350:	200120c0 	.word	0x200120c0

0801e354 <CommandProcess>:
extern xQueueHandle frames_queue;
extern xQueueHandle cleaner_queue;

profibus_MPI_t hprot;

inline void CommandProcess() {
 801e354:	b530      	push	{r4, r5, lr}
 801e356:	b083      	sub	sp, #12
	static portBASE_TYPE xHigherPriorityTaskWoken;
	uint32_t len;
	xHigherPriorityTaskWoken = pdFALSE;
 801e358:	4c10      	ldr	r4, [pc, #64]	; (801e39c <CommandProcess+0x48>)
 801e35a:	2500      	movs	r5, #0
 801e35c:	6025      	str	r5, [r4, #0]
	HAL_TIM_Base_Stop_IT(&htim8);
 801e35e:	4810      	ldr	r0, [pc, #64]	; (801e3a0 <CommandProcess+0x4c>)
 801e360:	f7f3 fd6d 	bl	8011e3e <HAL_TIM_Base_Stop_IT>
	len = CB_Data_Length(&inbuf_UART);
 801e364:	480f      	ldr	r0, [pc, #60]	; (801e3a4 <CommandProcess+0x50>)
 801e366:	f7fe f97f 	bl	801c668 <CB_Data_Length>
 801e36a:	a902      	add	r1, sp, #8
 801e36c:	f841 0d04 	str.w	r0, [r1, #-4]!
	xQueueSendFromISR(frames_queue, &len, &xHigherPriorityTaskWoken);
 801e370:	462b      	mov	r3, r5
 801e372:	4622      	mov	r2, r4
 801e374:	480c      	ldr	r0, [pc, #48]	; (801e3a8 <CommandProcess+0x54>)
 801e376:	6800      	ldr	r0, [r0, #0]
 801e378:	f7f5 fac6 	bl	8013908 <xQueueGenericSendFromISR>
	if (xHigherPriorityTaskWoken == pdTRUE) {
 801e37c:	6823      	ldr	r3, [r4, #0]
 801e37e:	2b01      	cmp	r3, #1
 801e380:	d001      	beq.n	801e386 <CommandProcess+0x32>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 801e382:	b003      	add	sp, #12
 801e384:	bd30      	pop	{r4, r5, pc}
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801e386:	2b00      	cmp	r3, #0
 801e388:	d0fb      	beq.n	801e382 <CommandProcess+0x2e>
 801e38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e38e:	4b07      	ldr	r3, [pc, #28]	; (801e3ac <CommandProcess+0x58>)
 801e390:	601a      	str	r2, [r3, #0]
 801e392:	f3bf 8f4f 	dsb	sy
 801e396:	f3bf 8f6f 	isb	sy
}
 801e39a:	e7f2      	b.n	801e382 <CommandProcess+0x2e>
 801e39c:	20009e78 	.word	0x20009e78
 801e3a0:	20011f24 	.word	0x20011f24
 801e3a4:	20011ebc 	.word	0x20011ebc
 801e3a8:	20011de4 	.word	0x20011de4
 801e3ac:	e000ed04 	.word	0xe000ed04

0801e3b0 <SendAckMsg>:

void SendAckMsg(void) {
 801e3b0:	b510      	push	{r4, lr}
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(1);
 801e3b2:	2001      	movs	r0, #1
 801e3b4:	f7f4 ff94 	bl	80132e0 <pvPortMalloc>
 801e3b8:	4604      	mov	r4, r0
	*temp = 0xE5;
 801e3ba:	23e5      	movs	r3, #229	; 0xe5
 801e3bc:	7003      	strb	r3, [r0, #0]
	TRANS_ON();
 801e3be:	2201      	movs	r2, #1
 801e3c0:	4611      	mov	r1, r2
 801e3c2:	4804      	ldr	r0, [pc, #16]	; (801e3d4 <SendAckMsg+0x24>)
 801e3c4:	f7f3 f9b0 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 1);
 801e3c8:	2201      	movs	r2, #1
 801e3ca:	4621      	mov	r1, r4
 801e3cc:	4802      	ldr	r0, [pc, #8]	; (801e3d8 <SendAckMsg+0x28>)
 801e3ce:	f7f4 f9a9 	bl	8012724 <HAL_UART_Transmit_DMA>
 801e3d2:	bd10      	pop	{r4, pc}
 801e3d4:	40021000 	.word	0x40021000
 801e3d8:	20012080 	.word	0x20012080

0801e3dc <SendClosemMsg>:
}

void SendClosemMsg(uint8_t to, uint8_t from) {
 801e3dc:	b570      	push	{r4, r5, r6, lr}
 801e3de:	4606      	mov	r6, r0
 801e3e0:	460d      	mov	r5, r1
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = 12;
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801e3e2:	200c      	movs	r0, #12
 801e3e4:	f7f4 ff7c 	bl	80132e0 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801e3e8:	4604      	mov	r4, r0
 801e3ea:	b338      	cbz	r0, 801e43c <SendClosemMsg+0x60>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801e3ec:	2368      	movs	r3, #104	; 0x68
 801e3ee:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = 0x06;
 801e3f0:	2106      	movs	r1, #6
 801e3f2:	7061      	strb	r1, [r4, #1]
	*tmp_ptr++ = 0x06;
 801e3f4:	70a1      	strb	r1, [r4, #2]
	*tmp_ptr++ = 0x68;
 801e3f6:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801e3f8:	f066 067f 	orn	r6, r6, #127	; 0x7f
 801e3fc:	7126      	strb	r6, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801e3fe:	f065 057f 	orn	r5, r5, #127	; 0x7f
 801e402:	7165      	strb	r5, [r4, #5]
	*tmp_ptr++ = 0x5C;
 801e404:	235c      	movs	r3, #92	; 0x5c
 801e406:	71a3      	strb	r3, [r4, #6]
	*tmp_ptr++ = hprot.master_SAP;
 801e408:	4d10      	ldr	r5, [pc, #64]	; (801e44c <SendClosemMsg+0x70>)
 801e40a:	7cab      	ldrb	r3, [r5, #18]
 801e40c:	71e3      	strb	r3, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801e40e:	231f      	movs	r3, #31
 801e410:	7223      	strb	r3, [r4, #8]
	*tmp_ptr++ = 0x80;
 801e412:	2380      	movs	r3, #128	; 0x80
 801e414:	7263      	strb	r3, [r4, #9]
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, 6);
 801e416:	1d20      	adds	r0, r4, #4
 801e418:	f000 fa4a 	bl	801e8b0 <CalculateFCS>
 801e41c:	72a0      	strb	r0, [r4, #10]
	*tmp_ptr = 0x16;
 801e41e:	2316      	movs	r3, #22
 801e420:	72e3      	strb	r3, [r4, #11]
	TRANS_ON();
 801e422:	2201      	movs	r2, #1
 801e424:	4611      	mov	r1, r2
 801e426:	480a      	ldr	r0, [pc, #40]	; (801e450 <SendClosemMsg+0x74>)
 801e428:	f7f3 f97e 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801e42c:	220c      	movs	r2, #12
 801e42e:	4621      	mov	r1, r4
 801e430:	4808      	ldr	r0, [pc, #32]	; (801e454 <SendClosemMsg+0x78>)
 801e432:	f7f4 f977 	bl	8012724 <HAL_UART_Transmit_DMA>
	hprot.conn_stat = CONN_CLOSED;
 801e436:	2305      	movs	r3, #5
 801e438:	70eb      	strb	r3, [r5, #3]
 801e43a:	bd70      	pop	{r4, r5, r6, pc}
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e43c:	4a06      	ldr	r2, [pc, #24]	; (801e458 <SendClosemMsg+0x7c>)
 801e43e:	2101      	movs	r1, #1
 801e440:	f7ff fdf2 	bl	801e028 <LogText__>
		Error_Handler();
 801e444:	f7ff ff02 	bl	801e24c <Error_Handler>
 801e448:	e7d0      	b.n	801e3ec <SendClosemMsg+0x10>
 801e44a:	bf00      	nop
 801e44c:	20011ecc 	.word	0x20011ecc
 801e450:	40021000 	.word	0x40021000
 801e454:	20012080 	.word	0x20012080
 801e458:	0802593c 	.word	0x0802593c

0801e45c <SendConfirmMsg>:
}

void SendConfirmMsg(uint8_t to, uint8_t from, uint8_t size, uint8_t func) {
 801e45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e460:	4680      	mov	r8, r0
 801e462:	460f      	mov	r7, r1
 801e464:	4615      	mov	r5, r2
 801e466:	4699      	mov	r9, r3
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = size + 6;
 801e468:	1d96      	adds	r6, r2, #6
 801e46a:	b2f6      	uxtb	r6, r6
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801e46c:	4630      	mov	r0, r6
 801e46e:	f7f4 ff37 	bl	80132e0 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801e472:	4604      	mov	r4, r0
 801e474:	2800      	cmp	r0, #0
 801e476:	d03a      	beq.n	801e4ee <SendConfirmMsg+0x92>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801e478:	2368      	movs	r3, #104	; 0x68
 801e47a:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = size;
 801e47c:	7065      	strb	r5, [r4, #1]
	*tmp_ptr++ = size;
 801e47e:	70a5      	strb	r5, [r4, #2]
	*tmp_ptr++ = 0x68;
 801e480:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801e482:	f068 087f 	orn	r8, r8, #127	; 0x7f
 801e486:	f884 8004 	strb.w	r8, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801e48a:	f067 077f 	orn	r7, r7, #127	; 0x7f
 801e48e:	7167      	strb	r7, [r4, #5]
	*tmp_ptr++ = func;
 801e490:	f884 9006 	strb.w	r9, [r4, #6]
	*tmp_ptr++ = hprot.master_SAP;
 801e494:	4b1d      	ldr	r3, [pc, #116]	; (801e50c <SendConfirmMsg+0xb0>)
 801e496:	7c9b      	ldrb	r3, [r3, #18]
 801e498:	71e3      	strb	r3, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801e49a:	231f      	movs	r3, #31
 801e49c:	7223      	strb	r3, [r4, #8]
	if (size == 0x07) {
 801e49e:	2d07      	cmp	r5, #7
 801e4a0:	d02c      	beq.n	801e4fc <SendConfirmMsg+0xa0>
		*tmp_ptr++ = 0x05;
		*tmp_ptr++ = 0x07;
	} else {
		*tmp_ptr++ = 0xB0;
 801e4a2:	23b0      	movs	r3, #176	; 0xb0
 801e4a4:	7263      	strb	r3, [r4, #9]
		*tmp_ptr++ = 0x07;
 801e4a6:	2307      	movs	r3, #7
 801e4a8:	72a3      	strb	r3, [r4, #10]
		*tmp_ptr++ = hprot.req_num++;
 801e4aa:	f104 070c 	add.w	r7, r4, #12
 801e4ae:	4b17      	ldr	r3, [pc, #92]	; (801e50c <SendConfirmMsg+0xb0>)
 801e4b0:	7cda      	ldrb	r2, [r3, #19]
 801e4b2:	1c51      	adds	r1, r2, #1
 801e4b4:	74d9      	strb	r1, [r3, #19]
 801e4b6:	72e2      	strb	r2, [r4, #11]
		if (hprot.req_num == 0) {
 801e4b8:	7cdb      	ldrb	r3, [r3, #19]
 801e4ba:	b913      	cbnz	r3, 801e4c2 <SendConfirmMsg+0x66>
			hprot.req_num++;
 801e4bc:	3301      	adds	r3, #1
 801e4be:	4a13      	ldr	r2, [pc, #76]	; (801e50c <SendConfirmMsg+0xb0>)
 801e4c0:	74d3      	strb	r3, [r2, #19]
		}
	}
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, size);
 801e4c2:	4629      	mov	r1, r5
 801e4c4:	1d20      	adds	r0, r4, #4
 801e4c6:	f000 f9f3 	bl	801e8b0 <CalculateFCS>
 801e4ca:	7038      	strb	r0, [r7, #0]
	*tmp_ptr = 0x16;
 801e4cc:	2316      	movs	r3, #22
 801e4ce:	707b      	strb	r3, [r7, #1]
	hprot.confirm_status = CONF_SENT;
 801e4d0:	2202      	movs	r2, #2
 801e4d2:	4b0e      	ldr	r3, [pc, #56]	; (801e50c <SendConfirmMsg+0xb0>)
 801e4d4:	709a      	strb	r2, [r3, #2]
	TRANS_ON();
 801e4d6:	2201      	movs	r2, #1
 801e4d8:	4611      	mov	r1, r2
 801e4da:	480d      	ldr	r0, [pc, #52]	; (801e510 <SendConfirmMsg+0xb4>)
 801e4dc:	f7f3 f924 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801e4e0:	4632      	mov	r2, r6
 801e4e2:	4621      	mov	r1, r4
 801e4e4:	480b      	ldr	r0, [pc, #44]	; (801e514 <SendConfirmMsg+0xb8>)
 801e4e6:	f7f4 f91d 	bl	8012724 <HAL_UART_Transmit_DMA>
 801e4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e4ee:	4a0a      	ldr	r2, [pc, #40]	; (801e518 <SendConfirmMsg+0xbc>)
 801e4f0:	2101      	movs	r1, #1
 801e4f2:	f7ff fd99 	bl	801e028 <LogText__>
		Error_Handler();
 801e4f6:	f7ff fea9 	bl	801e24c <Error_Handler>
 801e4fa:	e7bd      	b.n	801e478 <SendConfirmMsg+0x1c>
		*tmp_ptr++ = 0x05;
 801e4fc:	2305      	movs	r3, #5
 801e4fe:	7263      	strb	r3, [r4, #9]
		*tmp_ptr++ = 0x07;
 801e500:	f104 070b 	add.w	r7, r4, #11
 801e504:	2307      	movs	r3, #7
 801e506:	72a3      	strb	r3, [r4, #10]
 801e508:	e7db      	b.n	801e4c2 <SendConfirmMsg+0x66>
 801e50a:	bf00      	nop
 801e50c:	20011ecc 	.word	0x20011ecc
 801e510:	40021000 	.word	0x40021000
 801e514:	20012080 	.word	0x20012080
 801e518:	0802593c 	.word	0x0802593c

0801e51c <SendTokenMsg>:
}

void SendTokenMsg(uint8_t to, uint8_t from) {
 801e51c:	b570      	push	{r4, r5, r6, lr}
 801e51e:	4606      	mov	r6, r0
 801e520:	460d      	mov	r5, r1
	uint8_t * temp;
	static int cnt = 100;
	temp = (uint8_t*) pvPortMalloc(3);
 801e522:	2003      	movs	r0, #3
 801e524:	f7f4 fedc 	bl	80132e0 <pvPortMalloc>
	if (temp == NULL) {
 801e528:	4604      	mov	r4, r0
 801e52a:	b1c0      	cbz	r0, 801e55e <SendTokenMsg+0x42>
		Error_Handler();
	}
	temp[0] = 0xDC;
 801e52c:	23dc      	movs	r3, #220	; 0xdc
 801e52e:	7023      	strb	r3, [r4, #0]
	temp[1] = to;
 801e530:	7066      	strb	r6, [r4, #1]
	temp[2] = from;
 801e532:	70a5      	strb	r5, [r4, #2]
	cnt--;
 801e534:	4a14      	ldr	r2, [pc, #80]	; (801e588 <SendTokenMsg+0x6c>)
 801e536:	6813      	ldr	r3, [r2, #0]
 801e538:	3b01      	subs	r3, #1
 801e53a:	6013      	str	r3, [r2, #0]
	if (cnt == 0) {
 801e53c:	b193      	cbz	r3, 801e564 <SendTokenMsg+0x48>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		cnt = 100;
	}
	TRANS_ON();
 801e53e:	2201      	movs	r2, #1
 801e540:	4611      	mov	r1, r2
 801e542:	4812      	ldr	r0, [pc, #72]	; (801e58c <SendTokenMsg+0x70>)
 801e544:	f7f3 f8f0 	bl	8011728 <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit_DMA(&huart5, temp, 3) == HAL_BUSY) {
 801e548:	2203      	movs	r2, #3
 801e54a:	4621      	mov	r1, r4
 801e54c:	4810      	ldr	r0, [pc, #64]	; (801e590 <SendTokenMsg+0x74>)
 801e54e:	f7f4 f8e9 	bl	8012724 <HAL_UART_Transmit_DMA>
 801e552:	2802      	cmp	r0, #2
 801e554:	d00f      	beq.n	801e576 <SendTokenMsg+0x5a>
		TRANS_OFF();
		vPortFree(temp);
	}
	HAL_IWDG_Refresh(&hiwdg);
 801e556:	480f      	ldr	r0, [pc, #60]	; (801e594 <SendTokenMsg+0x78>)
 801e558:	f7f3 f915 	bl	8011786 <HAL_IWDG_Refresh>
 801e55c:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 801e55e:	f7ff fe75 	bl	801e24c <Error_Handler>
 801e562:	e7e3      	b.n	801e52c <SendTokenMsg+0x10>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 801e564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e568:	4808      	ldr	r0, [pc, #32]	; (801e58c <SendTokenMsg+0x70>)
 801e56a:	f7f3 f8e3 	bl	8011734 <HAL_GPIO_TogglePin>
		cnt = 100;
 801e56e:	2264      	movs	r2, #100	; 0x64
 801e570:	4b05      	ldr	r3, [pc, #20]	; (801e588 <SendTokenMsg+0x6c>)
 801e572:	601a      	str	r2, [r3, #0]
 801e574:	e7e3      	b.n	801e53e <SendTokenMsg+0x22>
		TRANS_OFF();
 801e576:	2200      	movs	r2, #0
 801e578:	2101      	movs	r1, #1
 801e57a:	4804      	ldr	r0, [pc, #16]	; (801e58c <SendTokenMsg+0x70>)
 801e57c:	f7f3 f8d4 	bl	8011728 <HAL_GPIO_WritePin>
		vPortFree(temp);
 801e580:	4620      	mov	r0, r4
 801e582:	f7f4 ff31 	bl	80133e8 <vPortFree>
 801e586:	e7e6      	b.n	801e556 <SendTokenMsg+0x3a>
 801e588:	20000038 	.word	0x20000038
 801e58c:	40021000 	.word	0x40021000
 801e590:	20012080 	.word	0x20012080
 801e594:	20011df8 	.word	0x20011df8

0801e598 <SendNoDataMsg>:
}

void SendNoDataMsg(uint8_t to, uint8_t from, uint8_t fc) {
 801e598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e59a:	4605      	mov	r5, r0
 801e59c:	460f      	mov	r7, r1
 801e59e:	4616      	mov	r6, r2
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(6);
 801e5a0:	2006      	movs	r0, #6
 801e5a2:	f7f4 fe9d 	bl	80132e0 <pvPortMalloc>
	if (temp == NULL) {
 801e5a6:	4604      	mov	r4, r0
 801e5a8:	b1a8      	cbz	r0, 801e5d6 <SendNoDataMsg+0x3e>
		Error_Handler();
	}
	temp[0] = 0x10;
 801e5aa:	2310      	movs	r3, #16
 801e5ac:	7023      	strb	r3, [r4, #0]
	temp[1] = to;
 801e5ae:	7065      	strb	r5, [r4, #1]
	temp[2] = from;
 801e5b0:	70a7      	strb	r7, [r4, #2]
	temp[3] = fc;
 801e5b2:	70e6      	strb	r6, [r4, #3]
	temp[4] = to + from + fc;
 801e5b4:	443d      	add	r5, r7
 801e5b6:	fa56 f585 	uxtab	r5, r6, r5
 801e5ba:	7125      	strb	r5, [r4, #4]
	temp[5] = 0x16;
 801e5bc:	2316      	movs	r3, #22
 801e5be:	7163      	strb	r3, [r4, #5]
	TRANS_ON();
 801e5c0:	2201      	movs	r2, #1
 801e5c2:	4611      	mov	r1, r2
 801e5c4:	4805      	ldr	r0, [pc, #20]	; (801e5dc <SendNoDataMsg+0x44>)
 801e5c6:	f7f3 f8af 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 6);
 801e5ca:	2206      	movs	r2, #6
 801e5cc:	4621      	mov	r1, r4
 801e5ce:	4804      	ldr	r0, [pc, #16]	; (801e5e0 <SendNoDataMsg+0x48>)
 801e5d0:	f7f4 f8a8 	bl	8012724 <HAL_UART_Transmit_DMA>
 801e5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Error_Handler();
 801e5d6:	f7ff fe39 	bl	801e24c <Error_Handler>
 801e5da:	e7e6      	b.n	801e5aa <SendNoDataMsg+0x12>
 801e5dc:	40021000 	.word	0x40021000
 801e5e0:	20012080 	.word	0x20012080

0801e5e4 <SendRequestMsg>:
}

void SendRequestMsg(uint8_t to, uint8_t from, uint8_t* data, uint8_t data_len) {
 801e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5e8:	4682      	mov	sl, r0
 801e5ea:	4688      	mov	r8, r1
 801e5ec:	4691      	mov	r9, r2
 801e5ee:	461d      	mov	r5, r3
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 13;
 801e5f0:	f103 070d 	add.w	r7, r3, #13
 801e5f4:	b2ff      	uxtb	r7, r7
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801e5f6:	4638      	mov	r0, r7
 801e5f8:	f7f4 fe72 	bl	80132e0 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801e5fc:	4604      	mov	r4, r0
 801e5fe:	b3b8      	cbz	r0, 801e670 <SendRequestMsg+0x8c>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801e600:	2368      	movs	r3, #104	; 0x68
 801e602:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = data_len + 7;
 801e604:	1dee      	adds	r6, r5, #7
 801e606:	b2f6      	uxtb	r6, r6
 801e608:	7066      	strb	r6, [r4, #1]
	*tmp_ptr++ = data_len + 7;
 801e60a:	70a6      	strb	r6, [r4, #2]
	*tmp_ptr++ = 0x68;
 801e60c:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801e60e:	f06a 0a7f 	orn	sl, sl, #127	; 0x7f
 801e612:	f884 a004 	strb.w	sl, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801e616:	f068 087f 	orn	r8, r8, #127	; 0x7f
 801e61a:	f884 8005 	strb.w	r8, [r4, #5]
	*tmp_ptr++ = 0x7C;
 801e61e:	237c      	movs	r3, #124	; 0x7c
 801e620:	71a3      	strb	r3, [r4, #6]
	*tmp_ptr++ = hprot.master_SAP;
 801e622:	4b17      	ldr	r3, [pc, #92]	; (801e680 <SendRequestMsg+0x9c>)
 801e624:	7c9a      	ldrb	r2, [r3, #18]
 801e626:	71e2      	strb	r2, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801e628:	221f      	movs	r2, #31
 801e62a:	7222      	strb	r2, [r4, #8]
	*tmp_ptr++ = 0xF1;
 801e62c:	22f1      	movs	r2, #241	; 0xf1
 801e62e:	7262      	strb	r2, [r4, #9]
	*tmp_ptr++ = hprot.req_num;
 801e630:	f104 080b 	add.w	r8, r4, #11
 801e634:	7cdb      	ldrb	r3, [r3, #19]
 801e636:	72a3      	strb	r3, [r4, #10]
	memcpy(tmp_ptr, data, data_len);
 801e638:	462a      	mov	r2, r5
 801e63a:	4649      	mov	r1, r9
 801e63c:	4640      	mov	r0, r8
 801e63e:	f001 fcbc 	bl	801ffba <memcpy>
	tmp_ptr += data_len;
 801e642:	eb08 0905 	add.w	r9, r8, r5
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 7);
 801e646:	4631      	mov	r1, r6
 801e648:	1d20      	adds	r0, r4, #4
 801e64a:	f000 f931 	bl	801e8b0 <CalculateFCS>
 801e64e:	f808 0005 	strb.w	r0, [r8, r5]
	*tmp_ptr = 0x16;
 801e652:	2316      	movs	r3, #22
 801e654:	f889 3001 	strb.w	r3, [r9, #1]
	TRANS_ON();
 801e658:	2201      	movs	r2, #1
 801e65a:	4611      	mov	r1, r2
 801e65c:	4809      	ldr	r0, [pc, #36]	; (801e684 <SendRequestMsg+0xa0>)
 801e65e:	f7f3 f863 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801e662:	463a      	mov	r2, r7
 801e664:	4621      	mov	r1, r4
 801e666:	4808      	ldr	r0, [pc, #32]	; (801e688 <SendRequestMsg+0xa4>)
 801e668:	f7f4 f85c 	bl	8012724 <HAL_UART_Transmit_DMA>
 801e66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e670:	4a06      	ldr	r2, [pc, #24]	; (801e68c <SendRequestMsg+0xa8>)
 801e672:	2101      	movs	r1, #1
 801e674:	f7ff fcd8 	bl	801e028 <LogText__>
		Error_Handler();
 801e678:	f7ff fde8 	bl	801e24c <Error_Handler>
 801e67c:	e7c0      	b.n	801e600 <SendRequestMsg+0x1c>
 801e67e:	bf00      	nop
 801e680:	20011ecc 	.word	0x20011ecc
 801e684:	40021000 	.word	0x40021000
 801e688:	20012080 	.word	0x20012080
 801e68c:	0802593c 	.word	0x0802593c

0801e690 <SendConnectMsg>:
}

void SendConnectMsg(uint8_t to, uint8_t from, uint8_t fc) {
 801e690:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e692:	b085      	sub	sp, #20
 801e694:	4606      	mov	r6, r0
 801e696:	460d      	mov	r5, r1
 801e698:	4617      	mov	r7, r2
	uint8_t data[] = { 0x80, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00 };
 801e69a:	4a21      	ldr	r2, [pc, #132]	; (801e720 <SendConnectMsg+0x90>)
 801e69c:	ab01      	add	r3, sp, #4
 801e69e:	ca07      	ldmia	r2, {r0, r1, r2}
 801e6a0:	c303      	stmia	r3!, {r0, r1}
 801e6a2:	701a      	strb	r2, [r3, #0]
	uint8_t data_len = sizeof(data);
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 14;
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801e6a4:	2017      	movs	r0, #23
 801e6a6:	f7f4 fe1b 	bl	80132e0 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801e6aa:	4604      	mov	r4, r0
 801e6ac:	b388      	cbz	r0, 801e712 <SendConnectMsg+0x82>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801e6ae:	2368      	movs	r3, #104	; 0x68
 801e6b0:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = data_len + 8;
 801e6b2:	2211      	movs	r2, #17
 801e6b4:	7062      	strb	r2, [r4, #1]
	*tmp_ptr++ = data_len + 8;
 801e6b6:	70a2      	strb	r2, [r4, #2]
	*tmp_ptr++ = 0x68;
 801e6b8:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801e6ba:	f066 067f 	orn	r6, r6, #127	; 0x7f
 801e6be:	7126      	strb	r6, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801e6c0:	f065 057f 	orn	r5, r5, #127	; 0x7f
 801e6c4:	7165      	strb	r5, [r4, #5]
	*tmp_ptr++ = fc;
 801e6c6:	71a7      	strb	r7, [r4, #6]
	*tmp_ptr++ = 0x00;
 801e6c8:	2300      	movs	r3, #0
 801e6ca:	71e3      	strb	r3, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801e6cc:	231f      	movs	r3, #31
 801e6ce:	7223      	strb	r3, [r4, #8]
	*tmp_ptr++ = 0xE0;
 801e6d0:	23e0      	movs	r3, #224	; 0xe0
 801e6d2:	7263      	strb	r3, [r4, #9]
	*tmp_ptr++ = 0x04;
 801e6d4:	2304      	movs	r3, #4
 801e6d6:	72a3      	strb	r3, [r4, #10]
	*tmp_ptr++ = hprot.req_num;
 801e6d8:	4d12      	ldr	r5, [pc, #72]	; (801e724 <SendConnectMsg+0x94>)
 801e6da:	7ceb      	ldrb	r3, [r5, #19]
 801e6dc:	72e3      	strb	r3, [r4, #11]
	memcpy(tmp_ptr, data, data_len);
 801e6de:	ab01      	add	r3, sp, #4
 801e6e0:	cb03      	ldmia	r3!, {r0, r1}
 801e6e2:	60e0      	str	r0, [r4, #12]
 801e6e4:	6121      	str	r1, [r4, #16]
 801e6e6:	781b      	ldrb	r3, [r3, #0]
 801e6e8:	7523      	strb	r3, [r4, #20]
	tmp_ptr += data_len;
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 8);
 801e6ea:	4611      	mov	r1, r2
 801e6ec:	1d20      	adds	r0, r4, #4
 801e6ee:	f000 f8df 	bl	801e8b0 <CalculateFCS>
 801e6f2:	7560      	strb	r0, [r4, #21]
	*tmp_ptr = 0x16;
 801e6f4:	2316      	movs	r3, #22
 801e6f6:	75a3      	strb	r3, [r4, #22]
	hprot.conn_stat = CONN_REQ_SENT;
 801e6f8:	2101      	movs	r1, #1
 801e6fa:	70e9      	strb	r1, [r5, #3]
	TRANS_ON();
 801e6fc:	460a      	mov	r2, r1
 801e6fe:	480a      	ldr	r0, [pc, #40]	; (801e728 <SendConnectMsg+0x98>)
 801e700:	f7f3 f812 	bl	8011728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801e704:	2217      	movs	r2, #23
 801e706:	4621      	mov	r1, r4
 801e708:	4808      	ldr	r0, [pc, #32]	; (801e72c <SendConnectMsg+0x9c>)
 801e70a:	f7f4 f80b 	bl	8012724 <HAL_UART_Transmit_DMA>
}
 801e70e:	b005      	add	sp, #20
 801e710:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e712:	4a07      	ldr	r2, [pc, #28]	; (801e730 <SendConnectMsg+0xa0>)
 801e714:	2101      	movs	r1, #1
 801e716:	f7ff fc87 	bl	801e028 <LogText__>
		Error_Handler();
 801e71a:	f7ff fd97 	bl	801e24c <Error_Handler>
 801e71e:	e7c6      	b.n	801e6ae <SendConnectMsg+0x1e>
 801e720:	08020ab0 	.word	0x08020ab0
 801e724:	20011ecc 	.word	0x20011ecc
 801e728:	40021000 	.word	0x40021000
 801e72c:	20012080 	.word	0x20012080
 801e730:	0802593c 	.word	0x0802593c

0801e734 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == &huart5) {
 801e734:	4b0a      	ldr	r3, [pc, #40]	; (801e760 <HAL_UART_RxCpltCallback+0x2c>)
 801e736:	4283      	cmp	r3, r0
 801e738:	d000      	beq.n	801e73c <HAL_UART_RxCpltCallback+0x8>
 801e73a:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801e73c:	b510      	push	{r4, lr}
		HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801e73e:	4c09      	ldr	r4, [pc, #36]	; (801e764 <HAL_UART_RxCpltCallback+0x30>)
 801e740:	2201      	movs	r2, #1
 801e742:	4621      	mov	r1, r4
 801e744:	4618      	mov	r0, r3
 801e746:	f7f3 ffc4 	bl	80126d2 <HAL_UART_Receive_IT>
		CB_Write(&inbuf_UART, received_byte);
 801e74a:	7821      	ldrb	r1, [r4, #0]
 801e74c:	4806      	ldr	r0, [pc, #24]	; (801e768 <HAL_UART_RxCpltCallback+0x34>)
 801e74e:	f7fd ff93 	bl	801c678 <CB_Write>
		__HAL_TIM_SET_COUNTER(&htim8, 0x00U);
 801e752:	4806      	ldr	r0, [pc, #24]	; (801e76c <HAL_UART_RxCpltCallback+0x38>)
 801e754:	6803      	ldr	r3, [r0, #0]
 801e756:	2200      	movs	r2, #0
 801e758:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim8);
 801e75a:	f7f3 fb64 	bl	8011e26 <HAL_TIM_Base_Start_IT>
 801e75e:	bd10      	pop	{r4, pc}
 801e760:	20012080 	.word	0x20012080
 801e764:	20011eb8 	.word	0x20011eb8
 801e768:	20011ebc 	.word	0x20011ebc
 801e76c:	20011f24 	.word	0x20011f24

0801e770 <HAL_UART_TxCpltCallback>:
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 801e770:	b510      	push	{r4, lr}
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 801e772:	2200      	movs	r2, #0
 801e774:	4b1c      	ldr	r3, [pc, #112]	; (801e7e8 <HAL_UART_TxCpltCallback+0x78>)
 801e776:	601a      	str	r2, [r3, #0]
	if (huart == &huart5) {
 801e778:	4b1c      	ldr	r3, [pc, #112]	; (801e7ec <HAL_UART_TxCpltCallback+0x7c>)
 801e77a:	4298      	cmp	r0, r3
 801e77c:	d004      	beq.n	801e788 <HAL_UART_TxCpltCallback+0x18>
		xQueueSendFromISR(cleaner_queue, &(huart5.pTxBuffPtr),
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
		}
	} else if (huart == hlog.interface) {
 801e77e:	4b1c      	ldr	r3, [pc, #112]	; (801e7f0 <HAL_UART_TxCpltCallback+0x80>)
 801e780:	6819      	ldr	r1, [r3, #0]
 801e782:	4288      	cmp	r0, r1
 801e784:	d01a      	beq.n	801e7bc <HAL_UART_TxCpltCallback+0x4c>
 801e786:	bd10      	pop	{r4, pc}
		TRANS_OFF();
 801e788:	2101      	movs	r1, #1
 801e78a:	481a      	ldr	r0, [pc, #104]	; (801e7f4 <HAL_UART_TxCpltCallback+0x84>)
 801e78c:	f7f2 ffcc 	bl	8011728 <HAL_GPIO_WritePin>
		xQueueSendFromISR(cleaner_queue, &(huart5.pTxBuffPtr),
 801e790:	4c15      	ldr	r4, [pc, #84]	; (801e7e8 <HAL_UART_TxCpltCallback+0x78>)
 801e792:	2300      	movs	r3, #0
 801e794:	4622      	mov	r2, r4
 801e796:	4918      	ldr	r1, [pc, #96]	; (801e7f8 <HAL_UART_TxCpltCallback+0x88>)
 801e798:	4818      	ldr	r0, [pc, #96]	; (801e7fc <HAL_UART_TxCpltCallback+0x8c>)
 801e79a:	6800      	ldr	r0, [r0, #0]
 801e79c:	f7f5 f8b4 	bl	8013908 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken == pdTRUE) {
 801e7a0:	6823      	ldr	r3, [r4, #0]
 801e7a2:	2b01      	cmp	r3, #1
 801e7a4:	d1ef      	bne.n	801e786 <HAL_UART_TxCpltCallback+0x16>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d0ed      	beq.n	801e786 <HAL_UART_TxCpltCallback+0x16>
 801e7aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e7ae:	4b14      	ldr	r3, [pc, #80]	; (801e800 <HAL_UART_TxCpltCallback+0x90>)
 801e7b0:	601a      	str	r2, [r3, #0]
 801e7b2:	f3bf 8f4f 	dsb	sy
 801e7b6:	f3bf 8f6f 	isb	sy
 801e7ba:	bd10      	pop	{r4, pc}
		xQueueSendFromISR(cleaner_queue, &(hlog.interface->pTxBuffPtr),
 801e7bc:	4c0a      	ldr	r4, [pc, #40]	; (801e7e8 <HAL_UART_TxCpltCallback+0x78>)
 801e7be:	2300      	movs	r3, #0
 801e7c0:	4622      	mov	r2, r4
 801e7c2:	3120      	adds	r1, #32
 801e7c4:	480d      	ldr	r0, [pc, #52]	; (801e7fc <HAL_UART_TxCpltCallback+0x8c>)
 801e7c6:	6800      	ldr	r0, [r0, #0]
 801e7c8:	f7f5 f89e 	bl	8013908 <xQueueGenericSendFromISR>
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
 801e7cc:	6823      	ldr	r3, [r4, #0]
 801e7ce:	2b01      	cmp	r3, #1
 801e7d0:	d1d9      	bne.n	801e786 <HAL_UART_TxCpltCallback+0x16>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	d0d7      	beq.n	801e786 <HAL_UART_TxCpltCallback+0x16>
 801e7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e7da:	4b09      	ldr	r3, [pc, #36]	; (801e800 <HAL_UART_TxCpltCallback+0x90>)
 801e7dc:	601a      	str	r2, [r3, #0]
 801e7de:	f3bf 8f4f 	dsb	sy
 801e7e2:	f3bf 8f6f 	isb	sy
		}
	}
}
 801e7e6:	e7ce      	b.n	801e786 <HAL_UART_TxCpltCallback+0x16>
 801e7e8:	20009e7c 	.word	0x20009e7c
 801e7ec:	20012080 	.word	0x20012080
 801e7f0:	20011e64 	.word	0x20011e64
 801e7f4:	40021000 	.word	0x40021000
 801e7f8:	200120a0 	.word	0x200120a0
 801e7fc:	20011df4 	.word	0x20011df4
 801e800:	e000ed04 	.word	0xe000ed04

0801e804 <StartProcessTask>:

void StartProcessTask(void const * argument) {
 801e804:	b510      	push	{r4, lr}
 801e806:	b082      	sub	sp, #8
	uint8_t len;
	static uint8_t cmd_data_buf[SIZE_OF_CMD_BUF];

	error_t err = NO_ERR;
	err = CB_Init(&inbuf_UART, UART_BUFF_SIZE);
 801e808:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e80c:	481a      	ldr	r0, [pc, #104]	; (801e878 <StartProcessTask+0x74>)
 801e80e:	f7fd ff15 	bl	801c63c <CB_Init>
	if (err != NO_ERR) {
 801e812:	b120      	cbz	r0, 801e81e <StartProcessTask+0x1a>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e814:	4a19      	ldr	r2, [pc, #100]	; (801e87c <StartProcessTask+0x78>)
 801e816:	2101      	movs	r1, #1
 801e818:	2000      	movs	r0, #0
 801e81a:	f7ff fc05 	bl	801e028 <LogText__>
				"Circular buffer allocation error.\r\n");
	}
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801e81e:	2201      	movs	r2, #1
 801e820:	4917      	ldr	r1, [pc, #92]	; (801e880 <StartProcessTask+0x7c>)
 801e822:	4818      	ldr	r0, [pc, #96]	; (801e884 <StartProcessTask+0x80>)
 801e824:	f7f3 ff55 	bl	80126d2 <HAL_UART_Receive_IT>
 801e828:	e015      	b.n	801e856 <StartProcessTask+0x52>
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
		cmd_data_buf[SIZE_OF_CMD_BUF - 1] = len;
		uint pos = 0;
		while (len) {
			uint8_t ch;
			CB_Read(&inbuf_UART, &ch);
 801e82a:	f10d 0106 	add.w	r1, sp, #6
 801e82e:	4812      	ldr	r0, [pc, #72]	; (801e878 <StartProcessTask+0x74>)
 801e830:	f7fd ff38 	bl	801c6a4 <CB_Read>
			--len;
 801e834:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e838:	3b01      	subs	r3, #1
 801e83a:	f88d 3007 	strb.w	r3, [sp, #7]
			cmd_data_buf[pos++] = ch;
 801e83e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801e842:	4b11      	ldr	r3, [pc, #68]	; (801e888 <StartProcessTask+0x84>)
 801e844:	551a      	strb	r2, [r3, r4]
 801e846:	3401      	adds	r4, #1
		while (len) {
 801e848:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d1ec      	bne.n	801e82a <StartProcessTask+0x26>
		}
		CommandParser(cmd_data_buf);
 801e850:	480d      	ldr	r0, [pc, #52]	; (801e888 <StartProcessTask+0x84>)
 801e852:	f000 f83b 	bl	801e8cc <CommandParser>
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
 801e856:	2300      	movs	r3, #0
 801e858:	f04f 32ff 	mov.w	r2, #4294967295
 801e85c:	f10d 0107 	add.w	r1, sp, #7
 801e860:	480a      	ldr	r0, [pc, #40]	; (801e88c <StartProcessTask+0x88>)
 801e862:	6800      	ldr	r0, [r0, #0]
 801e864:	f7f5 f91e 	bl	8013aa4 <xQueueGenericReceive>
		cmd_data_buf[SIZE_OF_CMD_BUF - 1] = len;
 801e868:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801e86c:	4b06      	ldr	r3, [pc, #24]	; (801e888 <StartProcessTask+0x84>)
 801e86e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		uint pos = 0;
 801e872:	2400      	movs	r4, #0
		while (len) {
 801e874:	e7e8      	b.n	801e848 <StartProcessTask+0x44>
 801e876:	bf00      	nop
 801e878:	20011ebc 	.word	0x20011ebc
 801e87c:	08025960 	.word	0x08025960
 801e880:	20011eb8 	.word	0x20011eb8
 801e884:	20012080 	.word	0x20012080
 801e888:	20009d78 	.word	0x20009d78
 801e88c:	20011de4 	.word	0x20011de4

0801e890 <ProtocolSettingsInit>:
/* ---------- FUNCTIONS ------------ */
/* -------||--||--||--||--||-------- */
/* -------\/--\/--\/--\/--\/-------- */

void ProtocolSettingsInit(profibus_MPI_t* hp) {
	hp->own_address = hflash.own_addr;
 801e890:	4b06      	ldr	r3, [pc, #24]	; (801e8ac <ProtocolSettingsInit+0x1c>)
 801e892:	889a      	ldrh	r2, [r3, #4]
 801e894:	7002      	strb	r2, [r0, #0]
	hp->speed = hflash.speed;
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	6083      	str	r3, [r0, #8]
	hp->token_possession = 0U;
 801e89a:	2300      	movs	r3, #0
 801e89c:	7043      	strb	r3, [r0, #1]
	hp->confirm_status = CONF_OK;
 801e89e:	2203      	movs	r2, #3
 801e8a0:	7082      	strb	r2, [r0, #2]
	hp->conn_stat = CONN_NO;
 801e8a2:	70c3      	strb	r3, [r0, #3]
	hp->wait_for_answer = 0U;
 801e8a4:	7103      	strb	r3, [r0, #4]
	hp->data_ptr = NULL;
 801e8a6:	60c3      	str	r3, [r0, #12]
	hp->data_len = 0U;
 801e8a8:	7403      	strb	r3, [r0, #16]
 801e8aa:	4770      	bx	lr
 801e8ac:	2000ecd4 	.word	0x2000ecd4

0801e8b0 <CalculateFCS>:
}

uint8_t CalculateFCS(uint8_t * buf, uint8_t len) {
	uint8_t result = 0;
 801e8b0:	2200      	movs	r2, #0
	while (len--) {
 801e8b2:	e004      	b.n	801e8be <CalculateFCS+0xe>
		result += *buf++;
 801e8b4:	7801      	ldrb	r1, [r0, #0]
 801e8b6:	440a      	add	r2, r1
 801e8b8:	b2d2      	uxtb	r2, r2
	while (len--) {
 801e8ba:	4619      	mov	r1, r3
		result += *buf++;
 801e8bc:	3001      	adds	r0, #1
	while (len--) {
 801e8be:	1e4b      	subs	r3, r1, #1
 801e8c0:	b2db      	uxtb	r3, r3
 801e8c2:	2900      	cmp	r1, #0
 801e8c4:	d1f6      	bne.n	801e8b4 <CalculateFCS+0x4>
	}
	return result;
}
 801e8c6:	4610      	mov	r0, r2
 801e8c8:	4770      	bx	lr
	...

0801e8cc <CommandParser>:
	return NO_ERR;
}

error_t CommandParser(uint8_t *buf) {
	static telegram_t htel;
	htel.SD = *buf++;
 801e8cc:	7803      	ldrb	r3, [r0, #0]
 801e8ce:	4aa4      	ldr	r2, [pc, #656]	; (801eb60 <CommandParser+0x294>)
 801e8d0:	7013      	strb	r3, [r2, #0]
	switch (htel.SD) {
 801e8d2:	2ba2      	cmp	r3, #162	; 0xa2
 801e8d4:	f000 81be 	beq.w	801ec54 <CommandParser+0x388>
error_t CommandParser(uint8_t *buf) {
 801e8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8da:	b083      	sub	sp, #12
 801e8dc:	f100 0501 	add.w	r5, r0, #1
 801e8e0:	4604      	mov	r4, r0
	switch (htel.SD) {
 801e8e2:	d80f      	bhi.n	801e904 <CommandParser+0x38>
 801e8e4:	2b10      	cmp	r3, #16
 801e8e6:	f000 80b6 	beq.w	801ea56 <CommandParser+0x18a>
 801e8ea:	2b68      	cmp	r3, #104	; 0x68
 801e8ec:	d117      	bne.n	801e91e <CommandParser+0x52>
		break;
	case 0x68:
		/* Variable length data */
		/* Format by wiki: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|PDU|FCS|ED| */
		/* Real MPI frame: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|F1/[B0|0x]|RN|PDU|FCS|ED| */
		htel.LE = *buf++;
 801e8ee:	7845      	ldrb	r5, [r0, #1]
 801e8f0:	4a9b      	ldr	r2, [pc, #620]	; (801eb60 <CommandParser+0x294>)
 801e8f2:	7055      	strb	r5, [r2, #1]
		htel.LEr = *buf++;
 801e8f4:	7883      	ldrb	r3, [r0, #2]
 801e8f6:	7093      	strb	r3, [r2, #2]
		buf++;
 801e8f8:	1d06      	adds	r6, r0, #4
		if (htel.LE != htel.LEr) {
 801e8fa:	429d      	cmp	r5, r3
 801e8fc:	f000 80dc 	beq.w	801eab8 <CommandParser+0x1ec>
			return FRAME_ERR;
 801e900:	2006      	movs	r0, #6
 801e902:	e00d      	b.n	801e920 <CommandParser+0x54>
	switch (htel.SD) {
 801e904:	2bdc      	cmp	r3, #220	; 0xdc
 801e906:	d00d      	beq.n	801e924 <CommandParser+0x58>
 801e908:	2be5      	cmp	r3, #229	; 0xe5
 801e90a:	d108      	bne.n	801e91e <CommandParser+0x52>
	case 0xA2:
		/* Fixed length data */
		break;
	case 0xE5:
		/* Acknowledgment */
		SendTokenMsg(htel.SA, hprot.own_address);
 801e90c:	4c95      	ldr	r4, [pc, #596]	; (801eb64 <CommandParser+0x298>)
 801e90e:	7821      	ldrb	r1, [r4, #0]
 801e910:	4b93      	ldr	r3, [pc, #588]	; (801eb60 <CommandParser+0x294>)
 801e912:	7918      	ldrb	r0, [r3, #4]
 801e914:	f7ff fe02 	bl	801e51c <SendTokenMsg>
		hprot.token_possession = 0U;
 801e918:	2000      	movs	r0, #0
 801e91a:	7060      	strb	r0, [r4, #1]
		return NO_ERR;
 801e91c:	e000      	b.n	801e920 <CommandParser+0x54>
		break;
	default:
		return UNKNOWN_SD_ERR;
 801e91e:	2005      	movs	r0, #5
	}
	return NO_ERR;
}
 801e920:	b003      	add	sp, #12
 801e922:	bdf0      	pop	{r4, r5, r6, r7, pc}
		htel.DA = *buf++;
 801e924:	7843      	ldrb	r3, [r0, #1]
 801e926:	4a8e      	ldr	r2, [pc, #568]	; (801eb60 <CommandParser+0x294>)
 801e928:	70d3      	strb	r3, [r2, #3]
		if (htel.DA != hprot.own_address) {
 801e92a:	4a8e      	ldr	r2, [pc, #568]	; (801eb64 <CommandParser+0x298>)
 801e92c:	7812      	ldrb	r2, [r2, #0]
 801e92e:	4293      	cmp	r3, r2
 801e930:	d001      	beq.n	801e936 <CommandParser+0x6a>
			return NO_ERR;
 801e932:	2000      	movs	r0, #0
 801e934:	e7f4      	b.n	801e920 <CommandParser+0x54>
		htel.SA = *buf;
 801e936:	7882      	ldrb	r2, [r0, #2]
 801e938:	4b89      	ldr	r3, [pc, #548]	; (801eb60 <CommandParser+0x294>)
 801e93a:	711a      	strb	r2, [r3, #4]
	if ((hprot.conn_stat == CONN_CLOSE) && (hprot.confirm_status != CONF_NEED08)) {
 801e93c:	4b89      	ldr	r3, [pc, #548]	; (801eb64 <CommandParser+0x298>)
 801e93e:	78db      	ldrb	r3, [r3, #3]
 801e940:	b2db      	uxtb	r3, r3
 801e942:	2b04      	cmp	r3, #4
 801e944:	d02f      	beq.n	801e9a6 <CommandParser+0xda>
	} else if (hprot.confirm_status == CONF_NEED07) {
 801e946:	4b87      	ldr	r3, [pc, #540]	; (801eb64 <CommandParser+0x298>)
 801e948:	789b      	ldrb	r3, [r3, #2]
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	d036      	beq.n	801e9bc <CommandParser+0xf0>
	} else if (hprot.confirm_status == CONF_NEED08) {
 801e94e:	4b85      	ldr	r3, [pc, #532]	; (801eb64 <CommandParser+0x298>)
 801e950:	789b      	ldrb	r3, [r3, #2]
 801e952:	b2db      	uxtb	r3, r3
 801e954:	2b01      	cmp	r3, #1
 801e956:	d03a      	beq.n	801e9ce <CommandParser+0x102>
	} else if (hprot.confirm_status == CONF_NEED07_AGAIN) {
 801e958:	4b82      	ldr	r3, [pc, #520]	; (801eb64 <CommandParser+0x298>)
 801e95a:	789b      	ldrb	r3, [r3, #2]
 801e95c:	b2db      	uxtb	r3, r3
 801e95e:	2b04      	cmp	r3, #4
 801e960:	d03e      	beq.n	801e9e0 <CommandParser+0x114>
		if (xQueuePeek(tcp_client_queue,&parc,0) != pdPASS) {
 801e962:	2301      	movs	r3, #1
 801e964:	2200      	movs	r2, #0
 801e966:	4669      	mov	r1, sp
 801e968:	487f      	ldr	r0, [pc, #508]	; (801eb68 <CommandParser+0x29c>)
 801e96a:	6800      	ldr	r0, [r0, #0]
 801e96c:	f7f5 f89a 	bl	8013aa4 <xQueueGenericReceive>
 801e970:	2801      	cmp	r0, #1
 801e972:	d13e      	bne.n	801e9f2 <CommandParser+0x126>
			hprot.token_possession = 1U;
 801e974:	4b7b      	ldr	r3, [pc, #492]	; (801eb64 <CommandParser+0x298>)
 801e976:	2201      	movs	r2, #1
 801e978:	705a      	strb	r2, [r3, #1]
			if (hprot.conn_stat == CONN_OK) {
 801e97a:	78db      	ldrb	r3, [r3, #3]
 801e97c:	b2db      	uxtb	r3, r3
 801e97e:	2b02      	cmp	r3, #2
 801e980:	d041      	beq.n	801ea06 <CommandParser+0x13a>
			} else if (hprot.conn_stat == CONN_NO) {
 801e982:	4b78      	ldr	r3, [pc, #480]	; (801eb64 <CommandParser+0x298>)
 801e984:	78db      	ldrb	r3, [r3, #3]
 801e986:	2b00      	cmp	r3, #0
 801e988:	d055      	beq.n	801ea36 <CommandParser+0x16a>
			} else if (hprot.conn_stat == CONN_AGAIN) {
 801e98a:	4b76      	ldr	r3, [pc, #472]	; (801eb64 <CommandParser+0x298>)
 801e98c:	78db      	ldrb	r3, [r3, #3]
 801e98e:	b2db      	uxtb	r3, r3
 801e990:	2b03      	cmp	r3, #3
 801e992:	d058      	beq.n	801ea46 <CommandParser+0x17a>
				SendTokenMsg(tel->SA, hprot.own_address);
 801e994:	4c73      	ldr	r4, [pc, #460]	; (801eb64 <CommandParser+0x298>)
 801e996:	7821      	ldrb	r1, [r4, #0]
 801e998:	4b71      	ldr	r3, [pc, #452]	; (801eb60 <CommandParser+0x294>)
 801e99a:	7918      	ldrb	r0, [r3, #4]
 801e99c:	f7ff fdbe 	bl	801e51c <SendTokenMsg>
				hprot.token_possession = 0U;
 801e9a0:	2300      	movs	r3, #0
 801e9a2:	7063      	strb	r3, [r4, #1]
 801e9a4:	e02d      	b.n	801ea02 <CommandParser+0x136>
	if ((hprot.conn_stat == CONN_CLOSE) && (hprot.confirm_status != CONF_NEED08)) {
 801e9a6:	4b6f      	ldr	r3, [pc, #444]	; (801eb64 <CommandParser+0x298>)
 801e9a8:	789b      	ldrb	r3, [r3, #2]
 801e9aa:	b2db      	uxtb	r3, r3
 801e9ac:	2b01      	cmp	r3, #1
 801e9ae:	d0ca      	beq.n	801e946 <CommandParser+0x7a>
		SendClosemMsg(tel->SA, hprot.own_address);
 801e9b0:	4b6c      	ldr	r3, [pc, #432]	; (801eb64 <CommandParser+0x298>)
 801e9b2:	7819      	ldrb	r1, [r3, #0]
 801e9b4:	b2d0      	uxtb	r0, r2
 801e9b6:	f7ff fd11 	bl	801e3dc <SendClosemMsg>
 801e9ba:	e022      	b.n	801ea02 <CommandParser+0x136>
		SendConfirmMsg(tel->SA, hprot.own_address, 0x07, 0x5C);
 801e9bc:	235c      	movs	r3, #92	; 0x5c
 801e9be:	2207      	movs	r2, #7
 801e9c0:	4968      	ldr	r1, [pc, #416]	; (801eb64 <CommandParser+0x298>)
 801e9c2:	7809      	ldrb	r1, [r1, #0]
 801e9c4:	4866      	ldr	r0, [pc, #408]	; (801eb60 <CommandParser+0x294>)
 801e9c6:	7900      	ldrb	r0, [r0, #4]
 801e9c8:	f7ff fd48 	bl	801e45c <SendConfirmMsg>
 801e9cc:	e019      	b.n	801ea02 <CommandParser+0x136>
		SendConfirmMsg(tel->SA, hprot.own_address, 0x08, 0x5C);
 801e9ce:	235c      	movs	r3, #92	; 0x5c
 801e9d0:	2208      	movs	r2, #8
 801e9d2:	4964      	ldr	r1, [pc, #400]	; (801eb64 <CommandParser+0x298>)
 801e9d4:	7809      	ldrb	r1, [r1, #0]
 801e9d6:	4862      	ldr	r0, [pc, #392]	; (801eb60 <CommandParser+0x294>)
 801e9d8:	7900      	ldrb	r0, [r0, #4]
 801e9da:	f7ff fd3f 	bl	801e45c <SendConfirmMsg>
 801e9de:	e010      	b.n	801ea02 <CommandParser+0x136>
		SendConfirmMsg(tel->SA, hprot.own_address, 0x07, 0x7C);
 801e9e0:	237c      	movs	r3, #124	; 0x7c
 801e9e2:	2207      	movs	r2, #7
 801e9e4:	495f      	ldr	r1, [pc, #380]	; (801eb64 <CommandParser+0x298>)
 801e9e6:	7809      	ldrb	r1, [r1, #0]
 801e9e8:	485d      	ldr	r0, [pc, #372]	; (801eb60 <CommandParser+0x294>)
 801e9ea:	7900      	ldrb	r0, [r0, #4]
 801e9ec:	f7ff fd36 	bl	801e45c <SendConfirmMsg>
 801e9f0:	e007      	b.n	801ea02 <CommandParser+0x136>
			SendTokenMsg(tel->SA, hprot.own_address);
 801e9f2:	4c5c      	ldr	r4, [pc, #368]	; (801eb64 <CommandParser+0x298>)
 801e9f4:	7821      	ldrb	r1, [r4, #0]
 801e9f6:	4b5a      	ldr	r3, [pc, #360]	; (801eb60 <CommandParser+0x294>)
 801e9f8:	7918      	ldrb	r0, [r3, #4]
 801e9fa:	f7ff fd8f 	bl	801e51c <SendTokenMsg>
			hprot.token_possession = 0U;
 801e9fe:	2300      	movs	r3, #0
 801ea00:	7063      	strb	r3, [r4, #1]
		return TokenCmdProcessing(&htel);
 801ea02:	2000      	movs	r0, #0
 801ea04:	e78c      	b.n	801e920 <CommandParser+0x54>
				parc.data = NULL;
 801ea06:	2200      	movs	r2, #0
 801ea08:	a902      	add	r1, sp, #8
 801ea0a:	f841 2d08 	str.w	r2, [r1, #-8]!
				xQueueReceive(tcp_client_queue, &parc, 0);
 801ea0e:	4613      	mov	r3, r2
 801ea10:	4855      	ldr	r0, [pc, #340]	; (801eb68 <CommandParser+0x29c>)
 801ea12:	6800      	ldr	r0, [r0, #0]
 801ea14:	f7f5 f846 	bl	8013aa4 <xQueueGenericReceive>
				SendRequestMsg(tel->SA, hprot.own_address, parc.data, parc.len);
 801ea18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801ea1c:	9a00      	ldr	r2, [sp, #0]
 801ea1e:	4951      	ldr	r1, [pc, #324]	; (801eb64 <CommandParser+0x298>)
 801ea20:	7809      	ldrb	r1, [r1, #0]
 801ea22:	484f      	ldr	r0, [pc, #316]	; (801eb60 <CommandParser+0x294>)
 801ea24:	7900      	ldrb	r0, [r0, #4]
 801ea26:	f7ff fddd 	bl	801e5e4 <SendRequestMsg>
				if (parc.data != NULL) {
 801ea2a:	9800      	ldr	r0, [sp, #0]
 801ea2c:	2800      	cmp	r0, #0
 801ea2e:	d0e8      	beq.n	801ea02 <CommandParser+0x136>
					vPortFree(parc.data);
 801ea30:	f7f4 fcda 	bl	80133e8 <vPortFree>
 801ea34:	e7e5      	b.n	801ea02 <CommandParser+0x136>
				SendConnectMsg(tel->SA, hprot.own_address, 0x6D);
 801ea36:	226d      	movs	r2, #109	; 0x6d
 801ea38:	4b4a      	ldr	r3, [pc, #296]	; (801eb64 <CommandParser+0x298>)
 801ea3a:	7819      	ldrb	r1, [r3, #0]
 801ea3c:	4b48      	ldr	r3, [pc, #288]	; (801eb60 <CommandParser+0x294>)
 801ea3e:	7918      	ldrb	r0, [r3, #4]
 801ea40:	f7ff fe26 	bl	801e690 <SendConnectMsg>
 801ea44:	e7dd      	b.n	801ea02 <CommandParser+0x136>
				SendConnectMsg(tel->SA, hprot.own_address, 0x5D);
 801ea46:	225d      	movs	r2, #93	; 0x5d
 801ea48:	4b46      	ldr	r3, [pc, #280]	; (801eb64 <CommandParser+0x298>)
 801ea4a:	7819      	ldrb	r1, [r3, #0]
 801ea4c:	4b44      	ldr	r3, [pc, #272]	; (801eb60 <CommandParser+0x294>)
 801ea4e:	7918      	ldrb	r0, [r3, #4]
 801ea50:	f7ff fe1e 	bl	801e690 <SendConnectMsg>
 801ea54:	e7d5      	b.n	801ea02 <CommandParser+0x136>
		if (CalculateFCS(buf, 3) != *(buf + 3)) {
 801ea56:	2103      	movs	r1, #3
 801ea58:	4628      	mov	r0, r5
 801ea5a:	f7ff ff29 	bl	801e8b0 <CalculateFCS>
 801ea5e:	7923      	ldrb	r3, [r4, #4]
 801ea60:	4298      	cmp	r0, r3
 801ea62:	d001      	beq.n	801ea68 <CommandParser+0x19c>
			return FCS_ERR;
 801ea64:	2007      	movs	r0, #7
 801ea66:	e75b      	b.n	801e920 <CommandParser+0x54>
		htel.DA = *buf++;
 801ea68:	7863      	ldrb	r3, [r4, #1]
 801ea6a:	4a3d      	ldr	r2, [pc, #244]	; (801eb60 <CommandParser+0x294>)
 801ea6c:	70d3      	strb	r3, [r2, #3]
		if (htel.DA != hprot.own_address) {
 801ea6e:	4a3d      	ldr	r2, [pc, #244]	; (801eb64 <CommandParser+0x298>)
 801ea70:	7812      	ldrb	r2, [r2, #0]
 801ea72:	4293      	cmp	r3, r2
 801ea74:	d001      	beq.n	801ea7a <CommandParser+0x1ae>
			return NO_ERR;
 801ea76:	2000      	movs	r0, #0
 801ea78:	e752      	b.n	801e920 <CommandParser+0x54>
		htel.SA = *buf++;
 801ea7a:	78a2      	ldrb	r2, [r4, #2]
 801ea7c:	4b38      	ldr	r3, [pc, #224]	; (801eb60 <CommandParser+0x294>)
 801ea7e:	711a      	strb	r2, [r3, #4]
		htel.FC = *buf++;
 801ea80:	78e2      	ldrb	r2, [r4, #3]
 801ea82:	715a      	strb	r2, [r3, #5]
		htel.FCS = *buf++;
 801ea84:	7922      	ldrb	r2, [r4, #4]
 801ea86:	741a      	strb	r2, [r3, #16]
		htel.ED = *buf;
 801ea88:	7962      	ldrb	r2, [r4, #5]
 801ea8a:	745a      	strb	r2, [r3, #17]
	if (tel->FC == 0x49) {
 801ea8c:	795b      	ldrb	r3, [r3, #5]
 801ea8e:	2b49      	cmp	r3, #73	; 0x49
 801ea90:	d001      	beq.n	801ea96 <CommandParser+0x1ca>
		return NoDataCmdProcessing(&htel);
 801ea92:	2000      	movs	r0, #0
 801ea94:	e744      	b.n	801e920 <CommandParser+0x54>
		SendNoDataMsg(tel->SA, tel->DA, 0x20);
 801ea96:	4c32      	ldr	r4, [pc, #200]	; (801eb60 <CommandParser+0x294>)
 801ea98:	2220      	movs	r2, #32
 801ea9a:	78e1      	ldrb	r1, [r4, #3]
 801ea9c:	7920      	ldrb	r0, [r4, #4]
 801ea9e:	f7ff fd7b 	bl	801e598 <SendNoDataMsg>
		hprot.master_address = tel->SA;
 801eaa2:	7922      	ldrb	r2, [r4, #4]
 801eaa4:	4b2f      	ldr	r3, [pc, #188]	; (801eb64 <CommandParser+0x298>)
 801eaa6:	745a      	strb	r2, [r3, #17]
		if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 801eaa8:	4830      	ldr	r0, [pc, #192]	; (801eb6c <CommandParser+0x2a0>)
 801eaaa:	f7f2 fe47 	bl	801173c <HAL_IWDG_Init>
 801eaae:	2800      	cmp	r0, #0
 801eab0:	d0ef      	beq.n	801ea92 <CommandParser+0x1c6>
		    Error_Handler();
 801eab2:	f7ff fbcb 	bl	801e24c <Error_Handler>
 801eab6:	e7ec      	b.n	801ea92 <CommandParser+0x1c6>
		if (CalculateFCS(buf, htel.LE) != *(buf + htel.LE)) {
 801eab8:	4629      	mov	r1, r5
 801eaba:	4630      	mov	r0, r6
 801eabc:	f7ff fef8 	bl	801e8b0 <CalculateFCS>
 801eac0:	5d73      	ldrb	r3, [r6, r5]
 801eac2:	4298      	cmp	r0, r3
 801eac4:	d001      	beq.n	801eaca <CommandParser+0x1fe>
			return FCS_ERR;
 801eac6:	2007      	movs	r0, #7
 801eac8:	e72a      	b.n	801e920 <CommandParser+0x54>
		htel.DA = *buf++;
 801eaca:	7923      	ldrb	r3, [r4, #4]
 801eacc:	4a24      	ldr	r2, [pc, #144]	; (801eb60 <CommandParser+0x294>)
 801eace:	70d3      	strb	r3, [r2, #3]
		if ((htel.DA & 0x7F) != hprot.own_address) { /* Broadcast message */
 801ead0:	4a24      	ldr	r2, [pc, #144]	; (801eb64 <CommandParser+0x298>)
 801ead2:	7812      	ldrb	r2, [r2, #0]
 801ead4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ead8:	4293      	cmp	r3, r2
 801eada:	d001      	beq.n	801eae0 <CommandParser+0x214>
			return NO_ERR;
 801eadc:	2000      	movs	r0, #0
 801eade:	e71f      	b.n	801e920 <CommandParser+0x54>
		htel.SA = *buf++;
 801eae0:	7963      	ldrb	r3, [r4, #5]
 801eae2:	4a1f      	ldr	r2, [pc, #124]	; (801eb60 <CommandParser+0x294>)
 801eae4:	7113      	strb	r3, [r2, #4]
		htel.FC = *buf++;
 801eae6:	79a3      	ldrb	r3, [r4, #6]
 801eae8:	7153      	strb	r3, [r2, #5]
		htel.DSAP = *buf++;
 801eaea:	79e3      	ldrb	r3, [r4, #7]
 801eaec:	7193      	strb	r3, [r2, #6]
		htel.SSAP = *buf++;
 801eaee:	7a23      	ldrb	r3, [r4, #8]
 801eaf0:	71d3      	strb	r3, [r2, #7]
		htel.UK1 = *buf++;
 801eaf2:	7a63      	ldrb	r3, [r4, #9]
 801eaf4:	7213      	strb	r3, [r2, #8]
		if (htel.UK1 == 0xC0) {
 801eaf6:	2bc0      	cmp	r3, #192	; 0xc0
 801eaf8:	d019      	beq.n	801eb2e <CommandParser+0x262>
		} else if (htel.UK1 == 0xB0) {
 801eafa:	2bb0      	cmp	r3, #176	; 0xb0
 801eafc:	d038      	beq.n	801eb70 <CommandParser+0x2a4>
		} else if (htel.UK1 == 0xD0) {
 801eafe:	2bd0      	cmp	r3, #208	; 0xd0
 801eb00:	d040      	beq.n	801eb84 <CommandParser+0x2b8>
		} else if (htel.UK1 == 0x05) {
 801eb02:	2b05      	cmp	r3, #5
 801eb04:	d054      	beq.n	801ebb0 <CommandParser+0x2e4>
			htel.RN = *buf++;
 801eb06:	f104 060b 	add.w	r6, r4, #11
 801eb0a:	7aa3      	ldrb	r3, [r4, #10]
 801eb0c:	4c14      	ldr	r4, [pc, #80]	; (801eb60 <CommandParser+0x294>)
 801eb0e:	72a3      	strb	r3, [r4, #10]
			uint pdu_size = htel.LE - 7;
 801eb10:	3d07      	subs	r5, #7
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 801eb12:	4628      	mov	r0, r5
 801eb14:	f7f4 fbe4 	bl	80132e0 <pvPortMalloc>
 801eb18:	60e0      	str	r0, [r4, #12]
			memcpy(htel.PDU, buf, pdu_size);
 801eb1a:	462a      	mov	r2, r5
 801eb1c:	4631      	mov	r1, r6
 801eb1e:	f001 fa4c 	bl	801ffba <memcpy>
			buf += pdu_size;
 801eb22:	1973      	adds	r3, r6, r5
			htel.FCS = *buf++;
 801eb24:	5d72      	ldrb	r2, [r6, r5]
 801eb26:	7422      	strb	r2, [r4, #16]
			htel.ED = *buf;
 801eb28:	785b      	ldrb	r3, [r3, #1]
 801eb2a:	7463      	strb	r3, [r4, #17]
 801eb2c:	e004      	b.n	801eb38 <CommandParser+0x26c>
			htel.FCS = *buf++;
 801eb2e:	7aa2      	ldrb	r2, [r4, #10]
 801eb30:	4b0b      	ldr	r3, [pc, #44]	; (801eb60 <CommandParser+0x294>)
 801eb32:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 801eb34:	7ae2      	ldrb	r2, [r4, #11]
 801eb36:	745a      	strb	r2, [r3, #17]
	if (tel->UK1 == 0xD0) {
 801eb38:	4b09      	ldr	r3, [pc, #36]	; (801eb60 <CommandParser+0x294>)
 801eb3a:	7a1b      	ldrb	r3, [r3, #8]
 801eb3c:	2bd0      	cmp	r3, #208	; 0xd0
 801eb3e:	d03f      	beq.n	801ebc0 <CommandParser+0x2f4>
	} else if (tel->UK1 == 0x05) {
 801eb40:	2b05      	cmp	r3, #5
 801eb42:	d061      	beq.n	801ec08 <CommandParser+0x33c>
	} else if (tel->UK1 == 0xB0) {
 801eb44:	2bb0      	cmp	r3, #176	; 0xb0
 801eb46:	d067      	beq.n	801ec18 <CommandParser+0x34c>
	} else if (tel->UK1 == 0xC0){
 801eb48:	2bc0      	cmp	r3, #192	; 0xc0
 801eb4a:	d041      	beq.n	801ebd0 <CommandParser+0x304>
	else if ((tel->FC == 0x7C) || (tel->FC == 0x5C)) {
 801eb4c:	4b04      	ldr	r3, [pc, #16]	; (801eb60 <CommandParser+0x294>)
 801eb4e:	795b      	ldrb	r3, [r3, #5]
 801eb50:	2b7c      	cmp	r3, #124	; 0x7c
 801eb52:	d064      	beq.n	801ec1e <CommandParser+0x352>
 801eb54:	2b5c      	cmp	r3, #92	; 0x5c
 801eb56:	d062      	beq.n	801ec1e <CommandParser+0x352>
		SendAckMsg();
 801eb58:	f7ff fc2a 	bl	801e3b0 <SendAckMsg>
 801eb5c:	e038      	b.n	801ebd0 <CommandParser+0x304>
 801eb5e:	bf00      	nop
 801eb60:	20009e80 	.word	0x20009e80
 801eb64:	20011ecc 	.word	0x20011ecc
 801eb68:	20011f20 	.word	0x20011f20
 801eb6c:	20011df8 	.word	0x20011df8
			htel.UK2 = *buf++;
 801eb70:	7aa2      	ldrb	r2, [r4, #10]
 801eb72:	4b39      	ldr	r3, [pc, #228]	; (801ec58 <CommandParser+0x38c>)
 801eb74:	725a      	strb	r2, [r3, #9]
			htel.RN = *buf++;
 801eb76:	7ae2      	ldrb	r2, [r4, #11]
 801eb78:	729a      	strb	r2, [r3, #10]
			htel.FCS = *buf++;
 801eb7a:	7b22      	ldrb	r2, [r4, #12]
 801eb7c:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 801eb7e:	7b62      	ldrb	r2, [r4, #13]
 801eb80:	745a      	strb	r2, [r3, #17]
 801eb82:	e7d9      	b.n	801eb38 <CommandParser+0x26c>
			htel.UK2 = *buf++;
 801eb84:	7aa3      	ldrb	r3, [r4, #10]
 801eb86:	4e34      	ldr	r6, [pc, #208]	; (801ec58 <CommandParser+0x38c>)
 801eb88:	7273      	strb	r3, [r6, #9]
			htel.RN = *buf++;
 801eb8a:	f104 070c 	add.w	r7, r4, #12
 801eb8e:	7ae3      	ldrb	r3, [r4, #11]
 801eb90:	72b3      	strb	r3, [r6, #10]
			uint pdu_size = htel.LE - 8;
 801eb92:	3d08      	subs	r5, #8
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 801eb94:	4628      	mov	r0, r5
 801eb96:	f7f4 fba3 	bl	80132e0 <pvPortMalloc>
 801eb9a:	60f0      	str	r0, [r6, #12]
			memcpy(htel.PDU, buf, pdu_size);
 801eb9c:	462a      	mov	r2, r5
 801eb9e:	4639      	mov	r1, r7
 801eba0:	f001 fa0b 	bl	801ffba <memcpy>
			buf += pdu_size;
 801eba4:	197b      	adds	r3, r7, r5
			htel.FCS = *buf++;
 801eba6:	5d7a      	ldrb	r2, [r7, r5]
 801eba8:	7432      	strb	r2, [r6, #16]
			htel.ED = *buf;
 801ebaa:	785b      	ldrb	r3, [r3, #1]
 801ebac:	7473      	strb	r3, [r6, #17]
 801ebae:	e7c3      	b.n	801eb38 <CommandParser+0x26c>
			htel.UK2 = *buf++;
 801ebb0:	7aa2      	ldrb	r2, [r4, #10]
 801ebb2:	4b29      	ldr	r3, [pc, #164]	; (801ec58 <CommandParser+0x38c>)
 801ebb4:	725a      	strb	r2, [r3, #9]
			htel.FCS = *buf++;
 801ebb6:	7ae2      	ldrb	r2, [r4, #11]
 801ebb8:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 801ebba:	7b22      	ldrb	r2, [r4, #12]
 801ebbc:	745a      	strb	r2, [r3, #17]
 801ebbe:	e7bb      	b.n	801eb38 <CommandParser+0x26c>
		if (tel->FC == 0x6C) {
 801ebc0:	4b25      	ldr	r3, [pc, #148]	; (801ec58 <CommandParser+0x38c>)
 801ebc2:	795b      	ldrb	r3, [r3, #5]
 801ebc4:	2b6c      	cmp	r3, #108	; 0x6c
 801ebc6:	d00d      	beq.n	801ebe4 <CommandParser+0x318>
		if (tel->FC == 0x5C) {
 801ebc8:	4b23      	ldr	r3, [pc, #140]	; (801ec58 <CommandParser+0x38c>)
 801ebca:	795b      	ldrb	r3, [r3, #5]
 801ebcc:	2b5c      	cmp	r3, #92	; 0x5c
 801ebce:	d012      	beq.n	801ebf6 <CommandParser+0x32a>
	if (tel->PDU != NULL) {
 801ebd0:	4b21      	ldr	r3, [pc, #132]	; (801ec58 <CommandParser+0x38c>)
 801ebd2:	68d8      	ldr	r0, [r3, #12]
 801ebd4:	b120      	cbz	r0, 801ebe0 <CommandParser+0x314>
		vPortFree(tel->PDU);
 801ebd6:	f7f4 fc07 	bl	80133e8 <vPortFree>
		tel->PDU = NULL;
 801ebda:	2200      	movs	r2, #0
 801ebdc:	4b1e      	ldr	r3, [pc, #120]	; (801ec58 <CommandParser+0x38c>)
 801ebde:	60da      	str	r2, [r3, #12]
		return VarDataCmdProcessing(&htel);
 801ebe0:	2000      	movs	r0, #0
 801ebe2:	e69d      	b.n	801e920 <CommandParser+0x54>
			hprot.confirm_status = CONF_NEED07;
 801ebe4:	4b1d      	ldr	r3, [pc, #116]	; (801ec5c <CommandParser+0x390>)
 801ebe6:	2200      	movs	r2, #0
 801ebe8:	709a      	strb	r2, [r3, #2]
			hprot.master_SAP = tel->SSAP;
 801ebea:	4a1b      	ldr	r2, [pc, #108]	; (801ec58 <CommandParser+0x38c>)
 801ebec:	79d2      	ldrb	r2, [r2, #7]
 801ebee:	749a      	strb	r2, [r3, #18]
			SendAckMsg();
 801ebf0:	f7ff fbde 	bl	801e3b0 <SendAckMsg>
 801ebf4:	e7e8      	b.n	801ebc8 <CommandParser+0x2fc>
			hprot.confirm_status = CONF_NEED07_AGAIN;
 801ebf6:	4b19      	ldr	r3, [pc, #100]	; (801ec5c <CommandParser+0x390>)
 801ebf8:	2204      	movs	r2, #4
 801ebfa:	709a      	strb	r2, [r3, #2]
			hprot.master_SAP = tel->SSAP;
 801ebfc:	4a16      	ldr	r2, [pc, #88]	; (801ec58 <CommandParser+0x38c>)
 801ebfe:	79d2      	ldrb	r2, [r2, #7]
 801ec00:	749a      	strb	r2, [r3, #18]
			SendAckMsg();
 801ec02:	f7ff fbd5 	bl	801e3b0 <SendAckMsg>
 801ec06:	e7e3      	b.n	801ebd0 <CommandParser+0x304>
		hprot.confirm_status = CONF_OK;
 801ec08:	4b14      	ldr	r3, [pc, #80]	; (801ec5c <CommandParser+0x390>)
 801ec0a:	2203      	movs	r2, #3
 801ec0c:	709a      	strb	r2, [r3, #2]
		hprot.conn_stat = CONN_OK;
 801ec0e:	2202      	movs	r2, #2
 801ec10:	70da      	strb	r2, [r3, #3]
		SendAckMsg();
 801ec12:	f7ff fbcd 	bl	801e3b0 <SendAckMsg>
 801ec16:	e7db      	b.n	801ebd0 <CommandParser+0x304>
		SendAckMsg();
 801ec18:	f7ff fbca 	bl	801e3b0 <SendAckMsg>
 801ec1c:	e7d8      	b.n	801ebd0 <CommandParser+0x304>
		parc.len = tel->LE - 7;
 801ec1e:	4c0e      	ldr	r4, [pc, #56]	; (801ec58 <CommandParser+0x38c>)
 801ec20:	7860      	ldrb	r0, [r4, #1]
 801ec22:	3807      	subs	r0, #7
 801ec24:	b280      	uxth	r0, r0
 801ec26:	f8ad 0004 	strh.w	r0, [sp, #4]
		parc.data = pvPortMalloc(parc.len);
 801ec2a:	f7f4 fb59 	bl	80132e0 <pvPortMalloc>
 801ec2e:	9000      	str	r0, [sp, #0]
		memcpy(parc.data, tel->PDU, parc.len);
 801ec30:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ec34:	68e1      	ldr	r1, [r4, #12]
 801ec36:	f001 f9c0 	bl	801ffba <memcpy>
		xQueueSend(protocol_queue, &parc, 0);
 801ec3a:	2300      	movs	r3, #0
 801ec3c:	461a      	mov	r2, r3
 801ec3e:	4669      	mov	r1, sp
 801ec40:	4807      	ldr	r0, [pc, #28]	; (801ec60 <CommandParser+0x394>)
 801ec42:	6800      	ldr	r0, [r0, #0]
 801ec44:	f7f4 fd76 	bl	8013734 <xQueueGenericSend>
		hprot.confirm_status = CONF_NEED08;
 801ec48:	2201      	movs	r2, #1
 801ec4a:	4b04      	ldr	r3, [pc, #16]	; (801ec5c <CommandParser+0x390>)
 801ec4c:	709a      	strb	r2, [r3, #2]
		SendAckMsg();
 801ec4e:	f7ff fbaf 	bl	801e3b0 <SendAckMsg>
 801ec52:	e7bd      	b.n	801ebd0 <CommandParser+0x304>
	return NO_ERR;
 801ec54:	2000      	movs	r0, #0
 801ec56:	4770      	bx	lr
 801ec58:	20009e80 	.word	0x20009e80
 801ec5c:	20011ecc 	.word	0x20011ecc
 801ec60:	20011ee0 	.word	0x20011ee0

0801ec64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801ec64:	b500      	push	{lr}
 801ec66:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ec68:	2200      	movs	r2, #0
 801ec6a:	9200      	str	r2, [sp, #0]
 801ec6c:	4b0d      	ldr	r3, [pc, #52]	; (801eca4 <HAL_MspInit+0x40>)
 801ec6e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801ec70:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 801ec74:	6459      	str	r1, [r3, #68]	; 0x44
 801ec76:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801ec78:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 801ec7c:	9100      	str	r1, [sp, #0]
 801ec7e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801ec80:	9201      	str	r2, [sp, #4]
 801ec82:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801ec84:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801ec88:	6419      	str	r1, [r3, #64]	; 0x40
 801ec8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ec90:	9301      	str	r3, [sp, #4]
 801ec92:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801ec94:	210f      	movs	r1, #15
 801ec96:	f06f 0001 	mvn.w	r0, #1
 801ec9a:	f7f1 fbcb 	bl	8010434 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801ec9e:	b003      	add	sp, #12
 801eca0:	f85d fb04 	ldr.w	pc, [sp], #4
 801eca4:	40023800 	.word	0x40023800

0801eca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801eca8:	b510      	push	{r4, lr}
 801ecaa:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 801ecac:	2200      	movs	r2, #0
 801ecae:	4601      	mov	r1, r0
 801ecb0:	2019      	movs	r0, #25
 801ecb2:	f7f1 fbbf 	bl	8010434 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 801ecb6:	2019      	movs	r0, #25
 801ecb8:	f7f1 fbee 	bl	8010498 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 801ecbc:	2400      	movs	r4, #0
 801ecbe:	9401      	str	r4, [sp, #4]
 801ecc0:	4b14      	ldr	r3, [pc, #80]	; (801ed14 <HAL_InitTick+0x6c>)
 801ecc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ecc4:	f042 0201 	orr.w	r2, r2, #1
 801ecc8:	645a      	str	r2, [r3, #68]	; 0x44
 801ecca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eccc:	f003 0301 	and.w	r3, r3, #1
 801ecd0:	9301      	str	r3, [sp, #4]
 801ecd2:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801ecd4:	a902      	add	r1, sp, #8
 801ecd6:	a803      	add	r0, sp, #12
 801ecd8:	f7f3 f84c 	bl	8011d74 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 801ecdc:	f7f3 f83a 	bl	8011d54 <HAL_RCC_GetPCLK2Freq>
 801ece0:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801ece2:	480d      	ldr	r0, [pc, #52]	; (801ed18 <HAL_InitTick+0x70>)
 801ece4:	fba0 2303 	umull	r2, r3, r0, r3
 801ece8:	0c9b      	lsrs	r3, r3, #18
 801ecea:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 801ecec:	480b      	ldr	r0, [pc, #44]	; (801ed1c <HAL_InitTick+0x74>)
 801ecee:	4a0c      	ldr	r2, [pc, #48]	; (801ed20 <HAL_InitTick+0x78>)
 801ecf0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 801ecf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 801ecf6:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801ecf8:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 801ecfa:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ecfc:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 801ecfe:	f7f3 fa87 	bl	8012210 <HAL_TIM_Base_Init>
 801ed02:	b110      	cbz	r0, 801ed0a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 801ed04:	2001      	movs	r0, #1
}
 801ed06:	b008      	add	sp, #32
 801ed08:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 801ed0a:	4804      	ldr	r0, [pc, #16]	; (801ed1c <HAL_InitTick+0x74>)
 801ed0c:	f7f3 f88b 	bl	8011e26 <HAL_TIM_Base_Start_IT>
 801ed10:	e7f9      	b.n	801ed06 <HAL_InitTick+0x5e>
 801ed12:	bf00      	nop
 801ed14:	40023800 	.word	0x40023800
 801ed18:	431bde83 	.word	0x431bde83
 801ed1c:	20011ee4 	.word	0x20011ee4
 801ed20:	40010000 	.word	0x40010000

0801ed24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801ed24:	4770      	bx	lr

0801ed26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801ed26:	e7fe      	b.n	801ed26 <HardFault_Handler>

0801ed28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801ed28:	e7fe      	b.n	801ed28 <MemManage_Handler>

0801ed2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801ed2a:	e7fe      	b.n	801ed2a <BusFault_Handler>

0801ed2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801ed2c:	e7fe      	b.n	801ed2c <UsageFault_Handler>

0801ed2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801ed2e:	4770      	bx	lr

0801ed30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 801ed30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801ed32:	4802      	ldr	r0, [pc, #8]	; (801ed3c <TIM1_UP_TIM10_IRQHandler+0xc>)
 801ed34:	f7f3 f921 	bl	8011f7a <HAL_TIM_IRQHandler>
 801ed38:	bd08      	pop	{r3, pc}
 801ed3a:	bf00      	nop
 801ed3c:	20011ee4 	.word	0x20011ee4

0801ed40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 801ed40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801ed42:	4802      	ldr	r0, [pc, #8]	; (801ed4c <USART1_IRQHandler+0xc>)
 801ed44:	f7f3 fdd6 	bl	80128f4 <HAL_UART_IRQHandler>
 801ed48:	bd08      	pop	{r3, pc}
 801ed4a:	bf00      	nop
 801ed4c:	200120c0 	.word	0x200120c0

0801ed50 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 801ed50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801ed52:	4802      	ldr	r0, [pc, #8]	; (801ed5c <TIM8_UP_TIM13_IRQHandler+0xc>)
 801ed54:	f7f3 f911 	bl	8011f7a <HAL_TIM_IRQHandler>
 801ed58:	bd08      	pop	{r3, pc}
 801ed5a:	bf00      	nop
 801ed5c:	20011f24 	.word	0x20011f24

0801ed60 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 801ed60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 801ed62:	4802      	ldr	r0, [pc, #8]	; (801ed6c <DMA1_Stream7_IRQHandler+0xc>)
 801ed64:	f7f1 fcd6 	bl	8010714 <HAL_DMA_IRQHandler>
 801ed68:	bd08      	pop	{r3, pc}
 801ed6a:	bf00      	nop
 801ed6c:	20012100 	.word	0x20012100

0801ed70 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 801ed70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 801ed72:	4802      	ldr	r0, [pc, #8]	; (801ed7c <UART5_IRQHandler+0xc>)
 801ed74:	f7f3 fdbe 	bl	80128f4 <HAL_UART_IRQHandler>
 801ed78:	bd08      	pop	{r3, pc}
 801ed7a:	bf00      	nop
 801ed7c:	20012080 	.word	0x20012080

0801ed80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 801ed80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801ed82:	4802      	ldr	r0, [pc, #8]	; (801ed8c <TIM7_IRQHandler+0xc>)
 801ed84:	f7f3 f8f9 	bl	8011f7a <HAL_TIM_IRQHandler>
 801ed88:	bd08      	pop	{r3, pc}
 801ed8a:	bf00      	nop
 801ed8c:	20011f60 	.word	0x20011f60

0801ed90 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 801ed90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 801ed92:	4802      	ldr	r0, [pc, #8]	; (801ed9c <ETH_IRQHandler+0xc>)
 801ed94:	f7f2 f808 	bl	8010da8 <HAL_ETH_IRQHandler>
 801ed98:	bd08      	pop	{r3, pc}
 801ed9a:	bf00      	nop
 801ed9c:	200105c8 	.word	0x200105c8

0801eda0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 801eda0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 801eda2:	4802      	ldr	r0, [pc, #8]	; (801edac <DMA2_Stream7_IRQHandler+0xc>)
 801eda4:	f7f1 fcb6 	bl	8010714 <HAL_DMA_IRQHandler>
 801eda8:	bd08      	pop	{r3, pc}
 801edaa:	bf00      	nop
 801edac:	20012020 	.word	0x20012020

0801edb0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

int _read(int file, char *ptr, int len) {
 801edb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edb2:	460d      	mov	r5, r1
 801edb4:	4617      	mov	r7, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801edb6:	2400      	movs	r4, #0
 801edb8:	e005      	b.n	801edc6 <_read+0x16>
		*ptr++ = __io_getchar();
 801edba:	1c6e      	adds	r6, r5, #1
 801edbc:	f3af 8000 	nop.w
 801edc0:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801edc2:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 801edc4:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 801edc6:	42bc      	cmp	r4, r7
 801edc8:	dbf7      	blt.n	801edba <_read+0xa>
	}

	return len;
}
 801edca:	4638      	mov	r0, r7
 801edcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801edce <_write>:

int _write(int file, char *ptr, int len) {
 801edce:	b430      	push	{r4, r5}
	int i = 0;
	for (i = 0; i < len; i++)
 801edd0:	2400      	movs	r4, #0
 801edd2:	e00a      	b.n	801edea <_write+0x1c>
  __ASM volatile ("nop");
 801edd4:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 801edd6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d0f9      	beq.n	801edd4 <_write+0x6>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 801ede0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801ede4:	7019      	strb	r1, [r3, #0]
 801ede6:	3401      	adds	r4, #1
		ITM_SendChar((*ptr++));
 801ede8:	4629      	mov	r1, r5
	for (i = 0; i < len; i++)
 801edea:	4294      	cmp	r4, r2
 801edec:	da10      	bge.n	801ee10 <_write+0x42>
		ITM_SendChar((*ptr++));
 801edee:	1c4d      	adds	r5, r1, #1
 801edf0:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801edf2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801edf6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 801edfa:	f013 0f01 	tst.w	r3, #1
 801edfe:	d0f2      	beq.n	801ede6 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801ee00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801ee04:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801ee08:	f013 0f01 	tst.w	r3, #1
 801ee0c:	d1e3      	bne.n	801edd6 <_write+0x8>
 801ee0e:	e7ea      	b.n	801ede6 <_write+0x18>
	return len;
}
 801ee10:	4610      	mov	r0, r2
 801ee12:	bc30      	pop	{r4, r5}
 801ee14:	4770      	bx	lr
	...

0801ee18 <_sbrk>:

caddr_t _sbrk(int incr) {
 801ee18:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801ee1a:	4a0b      	ldr	r2, [pc, #44]	; (801ee48 <_sbrk+0x30>)
 801ee1c:	6812      	ldr	r2, [r2, #0]
 801ee1e:	b142      	cbz	r2, 801ee32 <_sbrk+0x1a>
		heap_end = &end;

	prev_heap_end = heap_end;
 801ee20:	4a09      	ldr	r2, [pc, #36]	; (801ee48 <_sbrk+0x30>)
 801ee22:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr) {
 801ee24:	4403      	add	r3, r0
 801ee26:	466a      	mov	r2, sp
 801ee28:	4293      	cmp	r3, r2
 801ee2a:	d806      	bhi.n	801ee3a <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 801ee2c:	4a06      	ldr	r2, [pc, #24]	; (801ee48 <_sbrk+0x30>)
 801ee2e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 801ee30:	4770      	bx	lr
		heap_end = &end;
 801ee32:	4906      	ldr	r1, [pc, #24]	; (801ee4c <_sbrk+0x34>)
 801ee34:	4a04      	ldr	r2, [pc, #16]	; (801ee48 <_sbrk+0x30>)
 801ee36:	6011      	str	r1, [r2, #0]
 801ee38:	e7f2      	b.n	801ee20 <_sbrk+0x8>
		errno = ENOMEM;
 801ee3a:	220c      	movs	r2, #12
 801ee3c:	4b04      	ldr	r3, [pc, #16]	; (801ee50 <_sbrk+0x38>)
 801ee3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801ee40:	f04f 30ff 	mov.w	r0, #4294967295
 801ee44:	4770      	bx	lr
 801ee46:	bf00      	nop
 801ee48:	20009e94 	.word	0x20009e94
 801ee4c:	20012160 	.word	0x20012160
 801ee50:	2000eccc 	.word	0x2000eccc

0801ee54 <_close>:

int _close(int file) {
	return -1;
}
 801ee54:	f04f 30ff 	mov.w	r0, #4294967295
 801ee58:	4770      	bx	lr

0801ee5a <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 801ee5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801ee5e:	604b      	str	r3, [r1, #4]
	return 0;
}
 801ee60:	2000      	movs	r0, #0
 801ee62:	4770      	bx	lr

0801ee64 <_isatty>:

int _isatty(int file) {
	return 1;
}
 801ee64:	2001      	movs	r0, #1
 801ee66:	4770      	bx	lr

0801ee68 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 801ee68:	2000      	movs	r0, #0
 801ee6a:	4770      	bx	lr

0801ee6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801ee6c:	490f      	ldr	r1, [pc, #60]	; (801eeac <SystemInit+0x40>)
 801ee6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801ee72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801ee76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801ee7a:	4b0d      	ldr	r3, [pc, #52]	; (801eeb0 <SystemInit+0x44>)
 801ee7c:	681a      	ldr	r2, [r3, #0]
 801ee7e:	f042 0201 	orr.w	r2, r2, #1
 801ee82:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801ee84:	2000      	movs	r0, #0
 801ee86:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801ee88:	681a      	ldr	r2, [r3, #0]
 801ee8a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801ee8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801ee92:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801ee94:	4a07      	ldr	r2, [pc, #28]	; (801eeb4 <SystemInit+0x48>)
 801ee96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801ee98:	681a      	ldr	r2, [r3, #0]
 801ee9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801ee9e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801eea0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801eea2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801eea6:	608b      	str	r3, [r1, #8]
 801eea8:	4770      	bx	lr
 801eeaa:	bf00      	nop
 801eeac:	e000ed00 	.word	0xe000ed00
 801eeb0:	40023800 	.word	0x40023800
 801eeb4:	24003010 	.word	0x24003010

0801eeb8 <Client_thread>:

#include "tcp_client.h"

xQueueHandle tcp_client_queue;

void Client_thread(void *arg) {
 801eeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eeba:	b08f      	sub	sp, #60	; 0x3c
 801eebc:	4605      	mov	r5, r0
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
	u16_t buflen;
	char *buf;

	uint8_t data_COTP[] = { 0x03, 0x00, 0x00, 0x16, 0x11, 0xD0, 0x00, 0x01,
 801eebe:	ac04      	add	r4, sp, #16
 801eec0:	4e5a      	ldr	r6, [pc, #360]	; (801f02c <Client_thread+0x174>)
 801eec2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801eec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801eec6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801eeca:	f844 0b04 	str.w	r0, [r4], #4
 801eece:	8021      	strh	r1, [r4, #0]
			0x00, 0x01, 0x00, 0xC1, 0x02, 0x01, 0x00, 0xC2, 0x02, 0x01, 0x02,
			0xC0, 0x01, 0x0A };

	osDelay(1);
 801eed0:	2001      	movs	r0, #1
 801eed2:	f7f3 fdf7 	bl	8012ac4 <osDelay>
 801eed6:	e094      	b.n	801f002 <Client_thread+0x14a>
						data_COTP[18] = hprot.master_address;
						netconn_write(newconn,
								(const unsigned char* )(data_COTP),
								sizeof(data_COTP), NETCONN_COPY);
						if (hprot.conn_stat == CONN_CLOSED) {
							hprot.conn_stat = CONN_AGAIN;
 801eed8:	2203      	movs	r2, #3
 801eeda:	70e2      	strb	r2, [r4, #3]
 801eedc:	e030      	b.n	801ef40 <Client_thread+0x88>
						}
						hprot.req_num = 0;
					} else if (buf[7] == 0x32) {
 801eede:	79db      	ldrb	r3, [r3, #7]
 801eee0:	2b32      	cmp	r3, #50	; 0x32
 801eee2:	d031      	beq.n	801ef48 <Client_thread+0x90>
						vPortFree(parc.data);
						netconn_write(newconn, (const unsigned char* )(answer),
								parc.len + 7, NETCONN_COPY);
						vPortFree(answer);
					}
				} while (netbuf_next(inbuf) >= 0);
 801eee4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801eee6:	f7f6 ff75 	bl	8015dd4 <netbuf_next>
 801eeea:	2800      	cmp	r0, #0
 801eeec:	db76      	blt.n	801efdc <Client_thread+0x124>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 801eeee:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 801eef2:	a90a      	add	r1, sp, #40	; 0x28
 801eef4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801eef6:	f7f6 ff37 	bl	8015d68 <netbuf_data>
					if ((buf[0] == 0x03) && (buf[1] == 0x00) && (buf[2] == 0x00)
 801eefa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eefc:	781a      	ldrb	r2, [r3, #0]
 801eefe:	2a03      	cmp	r2, #3
 801ef00:	d1ed      	bne.n	801eede <Client_thread+0x26>
 801ef02:	785a      	ldrb	r2, [r3, #1]
 801ef04:	2a00      	cmp	r2, #0
 801ef06:	d1ea      	bne.n	801eede <Client_thread+0x26>
 801ef08:	789a      	ldrb	r2, [r3, #2]
 801ef0a:	2a00      	cmp	r2, #0
 801ef0c:	d1e7      	bne.n	801eede <Client_thread+0x26>
							&& (buf[3] == 0x16) && (buf[21] == hprot.master_address)) {
 801ef0e:	78da      	ldrb	r2, [r3, #3]
 801ef10:	2a16      	cmp	r2, #22
 801ef12:	d1e4      	bne.n	801eede <Client_thread+0x26>
 801ef14:	7d59      	ldrb	r1, [r3, #21]
 801ef16:	4a46      	ldr	r2, [pc, #280]	; (801f030 <Client_thread+0x178>)
 801ef18:	7c52      	ldrb	r2, [r2, #17]
 801ef1a:	b2d2      	uxtb	r2, r2
 801ef1c:	4291      	cmp	r1, r2
 801ef1e:	d1de      	bne.n	801eede <Client_thread+0x26>
						data_COTP[18] = hprot.master_address;
 801ef20:	4c43      	ldr	r4, [pc, #268]	; (801f030 <Client_thread+0x178>)
 801ef22:	7c63      	ldrb	r3, [r4, #17]
 801ef24:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
						netconn_write(newconn,
 801ef28:	2300      	movs	r3, #0
 801ef2a:	9300      	str	r3, [sp, #0]
 801ef2c:	2301      	movs	r3, #1
 801ef2e:	2216      	movs	r2, #22
 801ef30:	a904      	add	r1, sp, #16
 801ef32:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ef34:	f7f5 fec4 	bl	8014cc0 <netconn_write_partly>
						if (hprot.conn_stat == CONN_CLOSED) {
 801ef38:	78e3      	ldrb	r3, [r4, #3]
 801ef3a:	b2db      	uxtb	r3, r3
 801ef3c:	2b05      	cmp	r3, #5
 801ef3e:	d0cb      	beq.n	801eed8 <Client_thread+0x20>
						hprot.req_num = 0;
 801ef40:	2200      	movs	r2, #0
 801ef42:	4b3b      	ldr	r3, [pc, #236]	; (801f030 <Client_thread+0x178>)
 801ef44:	74da      	strb	r2, [r3, #19]
 801ef46:	e7cd      	b.n	801eee4 <Client_thread+0x2c>
						parc.len = buflen - 7;
 801ef48:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801ef4c:	3807      	subs	r0, #7
 801ef4e:	b280      	uxth	r0, r0
 801ef50:	f8ad 000c 	strh.w	r0, [sp, #12]
						parc.data = pvPortMalloc(parc.len);
 801ef54:	f7f4 f9c4 	bl	80132e0 <pvPortMalloc>
 801ef58:	9002      	str	r0, [sp, #8]
						memcpy(parc.data, buf + 7, parc.len);
 801ef5a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801ef5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ef60:	3107      	adds	r1, #7
 801ef62:	f001 f82a 	bl	801ffba <memcpy>
						xQueueSend(tcp_client_queue, &parc, 0);
 801ef66:	2300      	movs	r3, #0
 801ef68:	461a      	mov	r2, r3
 801ef6a:	a902      	add	r1, sp, #8
 801ef6c:	4831      	ldr	r0, [pc, #196]	; (801f034 <Client_thread+0x17c>)
 801ef6e:	6800      	ldr	r0, [r0, #0]
 801ef70:	f7f4 fbe0 	bl	8013734 <xQueueGenericSend>
						xQueueReceive(protocol_queue, &parc, portMAX_DELAY);
 801ef74:	2300      	movs	r3, #0
 801ef76:	f04f 32ff 	mov.w	r2, #4294967295
 801ef7a:	a902      	add	r1, sp, #8
 801ef7c:	482e      	ldr	r0, [pc, #184]	; (801f038 <Client_thread+0x180>)
 801ef7e:	6800      	ldr	r0, [r0, #0]
 801ef80:	f7f4 fd90 	bl	8013aa4 <xQueueGenericReceive>
						answer = (uint8_t*) pvPortMalloc(parc.len + 7);
 801ef84:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 801ef88:	3007      	adds	r0, #7
 801ef8a:	f7f4 f9a9 	bl	80132e0 <pvPortMalloc>
 801ef8e:	4604      	mov	r4, r0
						answer[0] = 0x03;
 801ef90:	2303      	movs	r3, #3
 801ef92:	7003      	strb	r3, [r0, #0]
						answer[1] = 0x00;
 801ef94:	2600      	movs	r6, #0
 801ef96:	7046      	strb	r6, [r0, #1]
						answer[2] = 0x00;
 801ef98:	7086      	strb	r6, [r0, #2]
						answer[3] = parc.len + 7;
 801ef9a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ef9e:	3307      	adds	r3, #7
 801efa0:	70c3      	strb	r3, [r0, #3]
						answer[4] = 0x02;
 801efa2:	2302      	movs	r3, #2
 801efa4:	7103      	strb	r3, [r0, #4]
						answer[5] = 0xF0;
 801efa6:	23f0      	movs	r3, #240	; 0xf0
 801efa8:	7143      	strb	r3, [r0, #5]
						answer[6] = 0x80;
 801efaa:	2380      	movs	r3, #128	; 0x80
 801efac:	7183      	strb	r3, [r0, #6]
						memcpy(answer + 7, parc.data, parc.len);
 801efae:	9f02      	ldr	r7, [sp, #8]
 801efb0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801efb4:	4639      	mov	r1, r7
 801efb6:	3007      	adds	r0, #7
 801efb8:	f000 ffff 	bl	801ffba <memcpy>
						vPortFree(parc.data);
 801efbc:	4638      	mov	r0, r7
 801efbe:	f7f4 fa13 	bl	80133e8 <vPortFree>
						netconn_write(newconn, (const unsigned char* )(answer),
 801efc2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801efc6:	9600      	str	r6, [sp, #0]
 801efc8:	2301      	movs	r3, #1
 801efca:	3207      	adds	r2, #7
 801efcc:	4621      	mov	r1, r4
 801efce:	980c      	ldr	r0, [sp, #48]	; 0x30
 801efd0:	f7f5 fe76 	bl	8014cc0 <netconn_write_partly>
						vPortFree(answer);
 801efd4:	4620      	mov	r0, r4
 801efd6:	f7f4 fa07 	bl	80133e8 <vPortFree>
 801efda:	e783      	b.n	801eee4 <Client_thread+0x2c>
				netbuf_delete(inbuf);
 801efdc:	980d      	ldr	r0, [sp, #52]	; 0x34
 801efde:	f7f6 feb3 	bl	8015d48 <netbuf_delete>
				err = netconn_recv(newconn, &inbuf);
 801efe2:	a90d      	add	r1, sp, #52	; 0x34
 801efe4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801efe6:	f7f5 fe19 	bl	8014c1c <netconn_recv>
			while (err == ERR_OK) {
 801efea:	2800      	cmp	r0, #0
 801efec:	f43f af7f 	beq.w	801eeee <Client_thread+0x36>
			} /* while (err == ERR_OK) */
			if (err == ERR_CLSD) {
 801eff0:	f110 0f0f 	cmn.w	r0, #15
 801eff4:	d010      	beq.n	801f018 <Client_thread+0x160>
				if (hprot.conn_stat == CONN_OK) {
					hprot.conn_stat = CONN_CLOSE;
				}
			}
		}
		netconn_close(newconn);
 801eff6:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eff8:	f7f5 feb6 	bl	8014d68 <netconn_close>
		netconn_delete(newconn);
 801effc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801effe:	f7f5 fd53 	bl	8014aa8 <netconn_delete>
		accept_err = netconn_accept(arg_conn, &newconn);
 801f002:	a90c      	add	r1, sp, #48	; 0x30
 801f004:	4628      	mov	r0, r5
 801f006:	f7f5 fdad 	bl	8014b64 <netconn_accept>
		if (accept_err == ERR_OK) {
 801f00a:	2800      	cmp	r0, #0
 801f00c:	d1f3      	bne.n	801eff6 <Client_thread+0x13e>
			err = netconn_recv(newconn, &inbuf);
 801f00e:	a90d      	add	r1, sp, #52	; 0x34
 801f010:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f012:	f7f5 fe03 	bl	8014c1c <netconn_recv>
			while (err == ERR_OK) {
 801f016:	e7e8      	b.n	801efea <Client_thread+0x132>
				if (hprot.conn_stat == CONN_OK) {
 801f018:	4b05      	ldr	r3, [pc, #20]	; (801f030 <Client_thread+0x178>)
 801f01a:	78db      	ldrb	r3, [r3, #3]
 801f01c:	b2db      	uxtb	r3, r3
 801f01e:	2b02      	cmp	r3, #2
 801f020:	d1e9      	bne.n	801eff6 <Client_thread+0x13e>
					hprot.conn_stat = CONN_CLOSE;
 801f022:	2204      	movs	r2, #4
 801f024:	4b02      	ldr	r3, [pc, #8]	; (801f030 <Client_thread+0x178>)
 801f026:	70da      	strb	r2, [r3, #3]
 801f028:	e7e5      	b.n	801eff6 <Client_thread+0x13e>
 801f02a:	bf00      	nop
 801f02c:	08020abc 	.word	0x08020abc
 801f030:	20011ecc 	.word	0x20011ecc
 801f034:	20011f20 	.word	0x20011f20
 801f038:	20011ee0 	.word	0x20011ee0

0801f03c <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 801f03c:	b500      	push	{lr}
 801f03e:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801f040:	2300      	movs	r3, #0
 801f042:	9300      	str	r3, [sp, #0]
 801f044:	9301      	str	r3, [sp, #4]

  htim7.Instance = TIM7;
 801f046:	480e      	ldr	r0, [pc, #56]	; (801f080 <MX_TIM7_Init+0x44>)
 801f048:	4a0e      	ldr	r2, [pc, #56]	; (801f084 <MX_TIM7_Init+0x48>)
 801f04a:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 801f04c:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801f04e:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 840;
 801f050:	f44f 7352 	mov.w	r3, #840	; 0x348
 801f054:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801f056:	f7f3 f8db 	bl	8012210 <HAL_TIM_Base_Init>
 801f05a:	b950      	cbnz	r0, 801f072 <MX_TIM7_Init+0x36>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801f05c:	2300      	movs	r3, #0
 801f05e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801f060:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801f062:	4669      	mov	r1, sp
 801f064:	4806      	ldr	r0, [pc, #24]	; (801f080 <MX_TIM7_Init+0x44>)
 801f066:	f7f3 f8ec 	bl	8012242 <HAL_TIMEx_MasterConfigSynchronization>
 801f06a:	b928      	cbnz	r0, 801f078 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }

}
 801f06c:	b003      	add	sp, #12
 801f06e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801f072:	f7ff f8eb 	bl	801e24c <Error_Handler>
 801f076:	e7f1      	b.n	801f05c <MX_TIM7_Init+0x20>
    Error_Handler();
 801f078:	f7ff f8e8 	bl	801e24c <Error_Handler>
}
 801f07c:	e7f6      	b.n	801f06c <MX_TIM7_Init+0x30>
 801f07e:	bf00      	nop
 801f080:	20011f60 	.word	0x20011f60
 801f084:	40001400 	.word	0x40001400

0801f088 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 801f088:	b500      	push	{lr}
 801f08a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801f08c:	2300      	movs	r3, #0
 801f08e:	9302      	str	r3, [sp, #8]
 801f090:	9303      	str	r3, [sp, #12]
 801f092:	9304      	str	r3, [sp, #16]
 801f094:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801f096:	9300      	str	r3, [sp, #0]
 801f098:	9301      	str	r3, [sp, #4]

  htim8.Instance = TIM8;
 801f09a:	4815      	ldr	r0, [pc, #84]	; (801f0f0 <MX_TIM8_Init+0x68>)
 801f09c:	4a15      	ldr	r2, [pc, #84]	; (801f0f4 <MX_TIM8_Init+0x6c>)
 801f09e:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 0;
 801f0a0:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801f0a2:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 27720;
 801f0a4:	f646 4248 	movw	r2, #27720	; 0x6c48
 801f0a8:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801f0aa:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 801f0ac:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801f0ae:	f7f3 f8af 	bl	8012210 <HAL_TIM_Base_Init>
 801f0b2:	b998      	cbnz	r0, 801f0dc <MX_TIM8_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801f0b4:	a906      	add	r1, sp, #24
 801f0b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801f0ba:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801f0be:	480c      	ldr	r0, [pc, #48]	; (801f0f0 <MX_TIM8_Init+0x68>)
 801f0c0:	f7f2 fed3 	bl	8011e6a <HAL_TIM_ConfigClockSource>
 801f0c4:	b968      	cbnz	r0, 801f0e2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801f0c6:	2300      	movs	r3, #0
 801f0c8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801f0ca:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801f0cc:	4669      	mov	r1, sp
 801f0ce:	4808      	ldr	r0, [pc, #32]	; (801f0f0 <MX_TIM8_Init+0x68>)
 801f0d0:	f7f3 f8b7 	bl	8012242 <HAL_TIMEx_MasterConfigSynchronization>
 801f0d4:	b940      	cbnz	r0, 801f0e8 <MX_TIM8_Init+0x60>
  {
    Error_Handler();
  }

}
 801f0d6:	b007      	add	sp, #28
 801f0d8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801f0dc:	f7ff f8b6 	bl	801e24c <Error_Handler>
 801f0e0:	e7e8      	b.n	801f0b4 <MX_TIM8_Init+0x2c>
    Error_Handler();
 801f0e2:	f7ff f8b3 	bl	801e24c <Error_Handler>
 801f0e6:	e7ee      	b.n	801f0c6 <MX_TIM8_Init+0x3e>
    Error_Handler();
 801f0e8:	f7ff f8b0 	bl	801e24c <Error_Handler>
}
 801f0ec:	e7f3      	b.n	801f0d6 <MX_TIM8_Init+0x4e>
 801f0ee:	bf00      	nop
 801f0f0:	20011f24 	.word	0x20011f24
 801f0f4:	40010400 	.word	0x40010400

0801f0f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801f0f8:	b500      	push	{lr}
 801f0fa:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM7)
 801f0fc:	6803      	ldr	r3, [r0, #0]
 801f0fe:	4a18      	ldr	r2, [pc, #96]	; (801f160 <HAL_TIM_Base_MspInit+0x68>)
 801f100:	4293      	cmp	r3, r2
 801f102:	d005      	beq.n	801f110 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 801f104:	4a17      	ldr	r2, [pc, #92]	; (801f164 <HAL_TIM_Base_MspInit+0x6c>)
 801f106:	4293      	cmp	r3, r2
 801f108:	d016      	beq.n	801f138 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 801f10a:	b003      	add	sp, #12
 801f10c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 801f110:	2200      	movs	r2, #0
 801f112:	9200      	str	r2, [sp, #0]
 801f114:	4b14      	ldr	r3, [pc, #80]	; (801f168 <HAL_TIM_Base_MspInit+0x70>)
 801f116:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801f118:	f041 0120 	orr.w	r1, r1, #32
 801f11c:	6419      	str	r1, [r3, #64]	; 0x40
 801f11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f120:	f003 0320 	and.w	r3, r3, #32
 801f124:	9300      	str	r3, [sp, #0]
 801f126:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 801f128:	2105      	movs	r1, #5
 801f12a:	2037      	movs	r0, #55	; 0x37
 801f12c:	f7f1 f982 	bl	8010434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801f130:	2037      	movs	r0, #55	; 0x37
 801f132:	f7f1 f9b1 	bl	8010498 <HAL_NVIC_EnableIRQ>
 801f136:	e7e8      	b.n	801f10a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801f138:	2200      	movs	r2, #0
 801f13a:	9201      	str	r2, [sp, #4]
 801f13c:	4b0a      	ldr	r3, [pc, #40]	; (801f168 <HAL_TIM_Base_MspInit+0x70>)
 801f13e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801f140:	f041 0102 	orr.w	r1, r1, #2
 801f144:	6459      	str	r1, [r3, #68]	; 0x44
 801f146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f148:	f003 0302 	and.w	r3, r3, #2
 801f14c:	9301      	str	r3, [sp, #4]
 801f14e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 801f150:	2105      	movs	r1, #5
 801f152:	202c      	movs	r0, #44	; 0x2c
 801f154:	f7f1 f96e 	bl	8010434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801f158:	202c      	movs	r0, #44	; 0x2c
 801f15a:	f7f1 f99d 	bl	8010498 <HAL_NVIC_EnableIRQ>
}
 801f15e:	e7d4      	b.n	801f10a <HAL_TIM_Base_MspInit+0x12>
 801f160:	40001400 	.word	0x40001400
 801f164:	40010400 	.word	0x40010400
 801f168:	40023800 	.word	0x40023800

0801f16c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 801f16c:	b470      	push	{r4, r5, r6}
	int div = 1;
 801f16e:	2301      	movs	r3, #1
	while (d/div >= base)
 801f170:	e001      	b.n	801f176 <ts_itoa+0xa>
		div *= base;
 801f172:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 801f176:	fbb1 f4f3 	udiv	r4, r1, r3
 801f17a:	4294      	cmp	r4, r2
 801f17c:	d2f9      	bcs.n	801f172 <ts_itoa+0x6>
 801f17e:	e004      	b.n	801f18a <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 801f180:	6805      	ldr	r5, [r0, #0]
 801f182:	1c6e      	adds	r6, r5, #1
 801f184:	6006      	str	r6, [r0, #0]
 801f186:	3430      	adds	r4, #48	; 0x30
 801f188:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 801f18a:	b16b      	cbz	r3, 801f1a8 <ts_itoa+0x3c>
		int num = d/div;
 801f18c:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 801f190:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 801f194:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 801f198:	2c09      	cmp	r4, #9
 801f19a:	ddf1      	ble.n	801f180 <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 801f19c:	6805      	ldr	r5, [r0, #0]
 801f19e:	1c6e      	adds	r6, r5, #1
 801f1a0:	6006      	str	r6, [r0, #0]
 801f1a2:	3437      	adds	r4, #55	; 0x37
 801f1a4:	702c      	strb	r4, [r5, #0]
 801f1a6:	e7f0      	b.n	801f18a <ts_itoa+0x1e>
	}
}
 801f1a8:	bc70      	pop	{r4, r5, r6}
 801f1aa:	4770      	bx	lr

0801f1ac <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 801f1ac:	b530      	push	{r4, r5, lr}
 801f1ae:	b083      	sub	sp, #12
 801f1b0:	9001      	str	r0, [sp, #4]
 801f1b2:	460c      	mov	r4, r1
 801f1b4:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 801f1b6:	4605      	mov	r5, r0
	while(*fmt)
 801f1b8:	e03e      	b.n	801f238 <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 801f1ba:	7863      	ldrb	r3, [r4, #1]
 801f1bc:	2b64      	cmp	r3, #100	; 0x64
 801f1be:	d01c      	beq.n	801f1fa <ts_formatstring+0x4e>
 801f1c0:	d90d      	bls.n	801f1de <ts_formatstring+0x32>
 801f1c2:	2b73      	cmp	r3, #115	; 0x73
 801f1c4:	d04a      	beq.n	801f25c <ts_formatstring+0xb0>
 801f1c6:	d916      	bls.n	801f1f6 <ts_formatstring+0x4a>
 801f1c8:	2b75      	cmp	r3, #117	; 0x75
 801f1ca:	d121      	bne.n	801f210 <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 801f1cc:	9b00      	ldr	r3, [sp, #0]
 801f1ce:	1d1a      	adds	r2, r3, #4
 801f1d0:	9200      	str	r2, [sp, #0]
 801f1d2:	220a      	movs	r2, #10
 801f1d4:	6819      	ldr	r1, [r3, #0]
 801f1d6:	a801      	add	r0, sp, #4
 801f1d8:	f7ff ffc8 	bl	801f16c <ts_itoa>
				break;
 801f1dc:	e02b      	b.n	801f236 <ts_formatstring+0x8a>
			switch (*(++fmt))
 801f1de:	2b58      	cmp	r3, #88	; 0x58
 801f1e0:	d018      	beq.n	801f214 <ts_formatstring+0x68>
 801f1e2:	2b63      	cmp	r3, #99	; 0x63
 801f1e4:	d01f      	beq.n	801f226 <ts_formatstring+0x7a>
 801f1e6:	2b25      	cmp	r3, #37	; 0x25
 801f1e8:	d125      	bne.n	801f236 <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 801f1ea:	9b01      	ldr	r3, [sp, #4]
 801f1ec:	1c5a      	adds	r2, r3, #1
 801f1ee:	9201      	str	r2, [sp, #4]
 801f1f0:	2225      	movs	r2, #37	; 0x25
 801f1f2:	701a      	strb	r2, [r3, #0]
				  break;
 801f1f4:	e01f      	b.n	801f236 <ts_formatstring+0x8a>
			switch (*(++fmt))
 801f1f6:	2b69      	cmp	r3, #105	; 0x69
 801f1f8:	d11d      	bne.n	801f236 <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 801f1fa:	9b00      	ldr	r3, [sp, #0]
 801f1fc:	1d1a      	adds	r2, r3, #4
 801f1fe:	9200      	str	r2, [sp, #0]
 801f200:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 801f202:	2900      	cmp	r1, #0
 801f204:	db23      	blt.n	801f24e <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 801f206:	220a      	movs	r2, #10
 801f208:	a801      	add	r0, sp, #4
 801f20a:	f7ff ffaf 	bl	801f16c <ts_itoa>
				break;
 801f20e:	e012      	b.n	801f236 <ts_formatstring+0x8a>
			switch (*(++fmt))
 801f210:	2b78      	cmp	r3, #120	; 0x78
 801f212:	d110      	bne.n	801f236 <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 801f214:	9b00      	ldr	r3, [sp, #0]
 801f216:	1d1a      	adds	r2, r3, #4
 801f218:	9200      	str	r2, [sp, #0]
 801f21a:	2210      	movs	r2, #16
 801f21c:	6819      	ldr	r1, [r3, #0]
 801f21e:	a801      	add	r0, sp, #4
 801f220:	f7ff ffa4 	bl	801f16c <ts_itoa>
				break;
 801f224:	e007      	b.n	801f236 <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 801f226:	9b01      	ldr	r3, [sp, #4]
 801f228:	1c5a      	adds	r2, r3, #1
 801f22a:	9201      	str	r2, [sp, #4]
 801f22c:	9a00      	ldr	r2, [sp, #0]
 801f22e:	1d11      	adds	r1, r2, #4
 801f230:	9100      	str	r1, [sp, #0]
 801f232:	6812      	ldr	r2, [r2, #0]
 801f234:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 801f236:	3402      	adds	r4, #2
	while(*fmt)
 801f238:	7823      	ldrb	r3, [r4, #0]
 801f23a:	b1f3      	cbz	r3, 801f27a <ts_formatstring+0xce>
		if (*fmt == '%')
 801f23c:	2b25      	cmp	r3, #37	; 0x25
 801f23e:	d0bc      	beq.n	801f1ba <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 801f240:	9b01      	ldr	r3, [sp, #4]
 801f242:	1c5a      	adds	r2, r3, #1
 801f244:	9201      	str	r2, [sp, #4]
 801f246:	7822      	ldrb	r2, [r4, #0]
 801f248:	701a      	strb	r2, [r3, #0]
 801f24a:	3401      	adds	r4, #1
 801f24c:	e7f4      	b.n	801f238 <ts_formatstring+0x8c>
						val *= -1;
 801f24e:	4249      	negs	r1, r1
						*buf++ = '-';
 801f250:	9b01      	ldr	r3, [sp, #4]
 801f252:	1c5a      	adds	r2, r3, #1
 801f254:	9201      	str	r2, [sp, #4]
 801f256:	222d      	movs	r2, #45	; 0x2d
 801f258:	701a      	strb	r2, [r3, #0]
 801f25a:	e7d4      	b.n	801f206 <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 801f25c:	9b00      	ldr	r3, [sp, #0]
 801f25e:	1d1a      	adds	r2, r3, #4
 801f260:	9200      	str	r2, [sp, #0]
 801f262:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 801f264:	e005      	b.n	801f272 <ts_formatstring+0xc6>
						*buf++ = *arg++;
 801f266:	9a01      	ldr	r2, [sp, #4]
 801f268:	1c51      	adds	r1, r2, #1
 801f26a:	9101      	str	r1, [sp, #4]
 801f26c:	7819      	ldrb	r1, [r3, #0]
 801f26e:	7011      	strb	r1, [r2, #0]
 801f270:	3301      	adds	r3, #1
					while (*arg)
 801f272:	781a      	ldrb	r2, [r3, #0]
 801f274:	2a00      	cmp	r2, #0
 801f276:	d1f6      	bne.n	801f266 <ts_formatstring+0xba>
 801f278:	e7dd      	b.n	801f236 <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 801f27a:	2200      	movs	r2, #0
 801f27c:	9b01      	ldr	r3, [sp, #4]
 801f27e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 801f280:	9801      	ldr	r0, [sp, #4]
 801f282:	1b40      	subs	r0, r0, r5
 801f284:	b003      	add	sp, #12
 801f286:	bd30      	pop	{r4, r5, pc}

0801f288 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 801f288:	b082      	sub	sp, #8
 801f28a:	4603      	mov	r3, r0
 801f28c:	9101      	str	r1, [sp, #4]
	int length = 0;
 801f28e:	2000      	movs	r0, #0
	while (*fmt)
 801f290:	e01d      	b.n	801f2ce <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 801f292:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 801f294:	785b      	ldrb	r3, [r3, #1]
 801f296:	3b58      	subs	r3, #88	; 0x58
 801f298:	2b20      	cmp	r3, #32
 801f29a:	d837      	bhi.n	801f30c <ts_formatlength+0x84>
 801f29c:	e8df f003 	tbb	[pc, r3]
 801f2a0:	36363630 	.word	0x36363630
 801f2a4:	36363636 	.word	0x36363636
 801f2a8:	11363636 	.word	0x11363636
 801f2ac:	3636361d 	.word	0x3636361d
 801f2b0:	36361d36 	.word	0x36361d36
 801f2b4:	36363636 	.word	0x36363636
 801f2b8:	23363636 	.word	0x23363636
 801f2bc:	36361d36 	.word	0x36361d36
 801f2c0:	30          	.byte	0x30
 801f2c1:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 801f2c2:	9b01      	ldr	r3, [sp, #4]
 801f2c4:	3304      	adds	r3, #4
 801f2c6:	9301      	str	r3, [sp, #4]
				  ++length;
 801f2c8:	3001      	adds	r0, #1
			++fmt;
 801f2ca:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 801f2cc:	3301      	adds	r3, #1
	while (*fmt)
 801f2ce:	781a      	ldrb	r2, [r3, #0]
 801f2d0:	b1fa      	cbz	r2, 801f312 <ts_formatlength+0x8a>
		if (*fmt == '%')
 801f2d2:	2a25      	cmp	r2, #37	; 0x25
 801f2d4:	d0dd      	beq.n	801f292 <ts_formatlength+0xa>
			++length;
 801f2d6:	3001      	adds	r0, #1
 801f2d8:	e7f8      	b.n	801f2cc <ts_formatlength+0x44>
				  length += 11;
 801f2da:	300b      	adds	r0, #11
				  va_arg(va, int);
 801f2dc:	9b01      	ldr	r3, [sp, #4]
 801f2de:	3304      	adds	r3, #4
 801f2e0:	9301      	str	r3, [sp, #4]
			++fmt;
 801f2e2:	460b      	mov	r3, r1
 801f2e4:	e7f2      	b.n	801f2cc <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 801f2e6:	9b01      	ldr	r3, [sp, #4]
 801f2e8:	1d1a      	adds	r2, r3, #4
 801f2ea:	9201      	str	r2, [sp, #4]
 801f2ec:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 801f2ee:	e001      	b.n	801f2f4 <ts_formatlength+0x6c>
			  			  ++length;
 801f2f0:	3001      	adds	r0, #1
			  		  while (*str++)
 801f2f2:	4613      	mov	r3, r2
 801f2f4:	1c5a      	adds	r2, r3, #1
 801f2f6:	781b      	ldrb	r3, [r3, #0]
 801f2f8:	2b00      	cmp	r3, #0
 801f2fa:	d1f9      	bne.n	801f2f0 <ts_formatlength+0x68>
			++fmt;
 801f2fc:	460b      	mov	r3, r1
 801f2fe:	e7e5      	b.n	801f2cc <ts_formatlength+0x44>
				  length += 8;
 801f300:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 801f302:	9b01      	ldr	r3, [sp, #4]
 801f304:	3304      	adds	r3, #4
 801f306:	9301      	str	r3, [sp, #4]
			++fmt;
 801f308:	460b      	mov	r3, r1
 801f30a:	e7df      	b.n	801f2cc <ts_formatlength+0x44>
				  ++length;
 801f30c:	3001      	adds	r0, #1
			++fmt;
 801f30e:	460b      	mov	r3, r1
				  break;
 801f310:	e7dc      	b.n	801f2cc <ts_formatlength+0x44>
	}
	return length;
}
 801f312:	b002      	add	sp, #8
 801f314:	4770      	bx	lr

0801f316 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 801f316:	b40e      	push	{r1, r2, r3}
 801f318:	b500      	push	{lr}
 801f31a:	b082      	sub	sp, #8
 801f31c:	aa03      	add	r2, sp, #12
 801f31e:	f852 1b04 	ldr.w	r1, [r2], #4
	int length;
	va_list va;
	va_start(va, fmt);
 801f322:	9201      	str	r2, [sp, #4]
	length = ts_formatstring(buf, fmt, va);
 801f324:	f7ff ff42 	bl	801f1ac <ts_formatstring>
	va_end(va);
	return length;
}
 801f328:	b002      	add	sp, #8
 801f32a:	f85d eb04 	ldr.w	lr, [sp], #4
 801f32e:	b003      	add	sp, #12
 801f330:	4770      	bx	lr

0801f332 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 801f332:	b40f      	push	{r0, r1, r2, r3}
 801f334:	b5b0      	push	{r4, r5, r7, lr}
 801f336:	b082      	sub	sp, #8
 801f338:	af00      	add	r7, sp, #0
 801f33a:	f107 0418 	add.w	r4, r7, #24
 801f33e:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 801f342:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 801f344:	4621      	mov	r1, r4
 801f346:	4628      	mov	r0, r5
 801f348:	f7ff ff9e 	bl	801f288 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 801f34c:	3007      	adds	r0, #7
 801f34e:	f020 0007 	bic.w	r0, r0, #7
 801f352:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 801f356:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 801f358:	4622      	mov	r2, r4
 801f35a:	4629      	mov	r1, r5
 801f35c:	4668      	mov	r0, sp
 801f35e:	f7ff ff25 	bl	801f1ac <ts_formatstring>
		length = _write(1, buf, length);
 801f362:	4602      	mov	r2, r0
 801f364:	4669      	mov	r1, sp
 801f366:	2001      	movs	r0, #1
 801f368:	f7ff fd31 	bl	801edce <_write>
		va_end(va);
	}
	return length;
}
 801f36c:	3708      	adds	r7, #8
 801f36e:	46bd      	mov	sp, r7
 801f370:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801f374:	b004      	add	sp, #16
 801f376:	4770      	bx	lr

0801f378 <setUp>:
 * some platforms (MinGW for example), weak function implementations need
 * to be in the same translation unit they are called from.  This can be
 * achieved by defining UNITY_INCLUDE_SETUP_STUBS before including unity.h. */
#ifdef UNITY_INCLUDE_SETUP_STUBS
  #ifdef UNITY_WEAK_ATTRIBUTE
    UNITY_WEAK_ATTRIBUTE void setUp(void) { }
 801f378:	4770      	bx	lr

0801f37a <tearDown>:
    UNITY_WEAK_ATTRIBUTE void tearDown(void) { }
 801f37a:	4770      	bx	lr

0801f37c <UnityPrintNumberUnsigned>:
}

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 801f37c:	b570      	push	{r4, r5, r6, lr}
 801f37e:	4605      	mov	r5, r0
    UNITY_UINT divisor = 1;
 801f380:	2401      	movs	r4, #1

    /* figure out initial divisor */
    while (number / divisor > 9)
 801f382:	e002      	b.n	801f38a <UnityPrintNumberUnsigned+0xe>
    {
        divisor *= 10;
 801f384:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801f388:	005c      	lsls	r4, r3, #1
    while (number / divisor > 9)
 801f38a:	fbb5 f3f4 	udiv	r3, r5, r4
 801f38e:	2b09      	cmp	r3, #9
 801f390:	d8f8      	bhi.n	801f384 <UnityPrintNumberUnsigned+0x8>
 801f392:	e008      	b.n	801f3a6 <UnityPrintNumberUnsigned+0x2a>
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
		return (*_p->_p++ = _c);
 801f394:	6813      	ldr	r3, [r2, #0]
 801f396:	1c58      	adds	r0, r3, #1
 801f398:	6010      	str	r0, [r2, #0]
 801f39a:	7019      	strb	r1, [r3, #0]

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
        divisor /= 10;
 801f39c:	4b10      	ldr	r3, [pc, #64]	; (801f3e0 <UnityPrintNumberUnsigned+0x64>)
 801f39e:	fba3 3404 	umull	r3, r4, r3, r4
    } while (divisor > 0);
 801f3a2:	08e4      	lsrs	r4, r4, #3
 801f3a4:	d01b      	beq.n	801f3de <UnityPrintNumberUnsigned+0x62>
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 801f3a6:	4b0f      	ldr	r3, [pc, #60]	; (801f3e4 <UnityPrintNumberUnsigned+0x68>)
 801f3a8:	6818      	ldr	r0, [r3, #0]
 801f3aa:	fbb5 f2f4 	udiv	r2, r5, r4
 801f3ae:	490c      	ldr	r1, [pc, #48]	; (801f3e0 <UnityPrintNumberUnsigned+0x64>)
 801f3b0:	fba1 3102 	umull	r3, r1, r1, r2
 801f3b4:	08c9      	lsrs	r1, r1, #3
 801f3b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801f3ba:	004b      	lsls	r3, r1, #1
 801f3bc:	1ad1      	subs	r1, r2, r3
 801f3be:	3130      	adds	r1, #48	; 0x30
 801f3c0:	b2c9      	uxtb	r1, r1
 801f3c2:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f3c4:	6893      	ldr	r3, [r2, #8]
 801f3c6:	3b01      	subs	r3, #1
 801f3c8:	6093      	str	r3, [r2, #8]
 801f3ca:	2b00      	cmp	r3, #0
 801f3cc:	dae2      	bge.n	801f394 <UnityPrintNumberUnsigned+0x18>
 801f3ce:	6996      	ldr	r6, [r2, #24]
 801f3d0:	42b3      	cmp	r3, r6
 801f3d2:	db01      	blt.n	801f3d8 <UnityPrintNumberUnsigned+0x5c>
 801f3d4:	290a      	cmp	r1, #10
 801f3d6:	d1dd      	bne.n	801f394 <UnityPrintNumberUnsigned+0x18>
	else
		return (__swbuf_r(_ptr, _c, _p));
 801f3d8:	f000 fef2 	bl	80201c0 <__swbuf_r>
 801f3dc:	e7de      	b.n	801f39c <UnityPrintNumberUnsigned+0x20>
}
 801f3de:	bd70      	pop	{r4, r5, r6, pc}
 801f3e0:	cccccccd 	.word	0xcccccccd
 801f3e4:	20000040 	.word	0x20000040

0801f3e8 <UnityPrintNumber>:
{
 801f3e8:	b510      	push	{r4, lr}
    if (number_to_print < 0)
 801f3ea:	1e04      	subs	r4, r0, #0
 801f3ec:	db03      	blt.n	801f3f6 <UnityPrintNumber+0xe>
    UnityPrintNumberUnsigned(number);
 801f3ee:	4620      	mov	r0, r4
 801f3f0:	f7ff ffc4 	bl	801f37c <UnityPrintNumberUnsigned>
 801f3f4:	bd10      	pop	{r4, pc}
        UNITY_OUTPUT_CHAR('-');
 801f3f6:	4b0b      	ldr	r3, [pc, #44]	; (801f424 <UnityPrintNumber+0x3c>)
 801f3f8:	6818      	ldr	r0, [r3, #0]
 801f3fa:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f3fc:	6893      	ldr	r3, [r2, #8]
 801f3fe:	3b01      	subs	r3, #1
 801f400:	6093      	str	r3, [r2, #8]
 801f402:	2b00      	cmp	r3, #0
 801f404:	db06      	blt.n	801f414 <UnityPrintNumber+0x2c>
		return (*_p->_p++ = _c);
 801f406:	6813      	ldr	r3, [r2, #0]
 801f408:	1c59      	adds	r1, r3, #1
 801f40a:	6011      	str	r1, [r2, #0]
 801f40c:	222d      	movs	r2, #45	; 0x2d
 801f40e:	701a      	strb	r2, [r3, #0]
        number = -number;
 801f410:	4264      	negs	r4, r4
 801f412:	e7ec      	b.n	801f3ee <UnityPrintNumber+0x6>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f414:	6991      	ldr	r1, [r2, #24]
 801f416:	428b      	cmp	r3, r1
 801f418:	daf5      	bge.n	801f406 <UnityPrintNumber+0x1e>
		return (__swbuf_r(_ptr, _c, _p));
 801f41a:	212d      	movs	r1, #45	; 0x2d
 801f41c:	f000 fed0 	bl	80201c0 <__swbuf_r>
 801f420:	e7f6      	b.n	801f410 <UnityPrintNumber+0x28>
 801f422:	bf00      	nop
 801f424:	20000040 	.word	0x20000040

0801f428 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 801f428:	b570      	push	{r4, r5, r6, lr}
 801f42a:	4605      	mov	r5, r0
    int nibble;
    char nibbles = nibbles_to_print;
    if ((unsigned)nibbles > (2 * sizeof(number)))
 801f42c:	2908      	cmp	r1, #8
 801f42e:	d801      	bhi.n	801f434 <UnityPrintNumberHex+0xc>
    char nibbles = nibbles_to_print;
 801f430:	460c      	mov	r4, r1
 801f432:	e005      	b.n	801f440 <UnityPrintNumberHex+0x18>
    {
        nibbles = 2 * sizeof(number);
 801f434:	2408      	movs	r4, #8
 801f436:	e003      	b.n	801f440 <UnityPrintNumberHex+0x18>
		return (*_p->_p++ = _c);
 801f438:	6813      	ldr	r3, [r2, #0]
 801f43a:	1c58      	adds	r0, r3, #1
 801f43c:	6010      	str	r0, [r2, #0]
 801f43e:	7019      	strb	r1, [r3, #0]
    }

    while (nibbles > 0)
 801f440:	b37c      	cbz	r4, 801f4a2 <UnityPrintNumberHex+0x7a>
    {
        nibbles--;
 801f442:	3c01      	subs	r4, #1
 801f444:	b2e4      	uxtb	r4, r4
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 801f446:	00a1      	lsls	r1, r4, #2
 801f448:	fa25 f101 	lsr.w	r1, r5, r1
 801f44c:	f001 010f 	and.w	r1, r1, #15
        if (nibble <= 9)
 801f450:	2909      	cmp	r1, #9
 801f452:	dc10      	bgt.n	801f476 <UnityPrintNumberHex+0x4e>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 801f454:	4b13      	ldr	r3, [pc, #76]	; (801f4a4 <UnityPrintNumberHex+0x7c>)
 801f456:	6818      	ldr	r0, [r3, #0]
 801f458:	3130      	adds	r1, #48	; 0x30
 801f45a:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f45c:	6893      	ldr	r3, [r2, #8]
 801f45e:	3b01      	subs	r3, #1
 801f460:	6093      	str	r3, [r2, #8]
 801f462:	2b00      	cmp	r3, #0
 801f464:	dae8      	bge.n	801f438 <UnityPrintNumberHex+0x10>
 801f466:	6996      	ldr	r6, [r2, #24]
 801f468:	42b3      	cmp	r3, r6
 801f46a:	db01      	blt.n	801f470 <UnityPrintNumberHex+0x48>
 801f46c:	290a      	cmp	r1, #10
 801f46e:	d1e3      	bne.n	801f438 <UnityPrintNumberHex+0x10>
		return (__swbuf_r(_ptr, _c, _p));
 801f470:	f000 fea6 	bl	80201c0 <__swbuf_r>
 801f474:	e7e4      	b.n	801f440 <UnityPrintNumberHex+0x18>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 801f476:	4b0b      	ldr	r3, [pc, #44]	; (801f4a4 <UnityPrintNumberHex+0x7c>)
 801f478:	6818      	ldr	r0, [r3, #0]
 801f47a:	3137      	adds	r1, #55	; 0x37
 801f47c:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f47e:	6893      	ldr	r3, [r2, #8]
 801f480:	3b01      	subs	r3, #1
 801f482:	6093      	str	r3, [r2, #8]
 801f484:	2b00      	cmp	r3, #0
 801f486:	db04      	blt.n	801f492 <UnityPrintNumberHex+0x6a>
		return (*_p->_p++ = _c);
 801f488:	6813      	ldr	r3, [r2, #0]
 801f48a:	1c58      	adds	r0, r3, #1
 801f48c:	6010      	str	r0, [r2, #0]
 801f48e:	7019      	strb	r1, [r3, #0]
 801f490:	e7d6      	b.n	801f440 <UnityPrintNumberHex+0x18>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f492:	6996      	ldr	r6, [r2, #24]
 801f494:	42b3      	cmp	r3, r6
 801f496:	db01      	blt.n	801f49c <UnityPrintNumberHex+0x74>
 801f498:	290a      	cmp	r1, #10
 801f49a:	d1f5      	bne.n	801f488 <UnityPrintNumberHex+0x60>
		return (__swbuf_r(_ptr, _c, _p));
 801f49c:	f000 fe90 	bl	80201c0 <__swbuf_r>
 801f4a0:	e7ce      	b.n	801f440 <UnityPrintNumberHex+0x18>
        }
    }
}
 801f4a2:	bd70      	pop	{r4, r5, r6, pc}
 801f4a4:	20000040 	.word	0x20000040

0801f4a8 <UnityPrintChar>:
{
 801f4a8:	b510      	push	{r4, lr}
    if ((*pch <= 126) && (*pch >= 32))
 801f4aa:	7801      	ldrb	r1, [r0, #0]
 801f4ac:	f1a1 0320 	sub.w	r3, r1, #32
 801f4b0:	b2db      	uxtb	r3, r3
 801f4b2:	2b5e      	cmp	r3, #94	; 0x5e
 801f4b4:	d923      	bls.n	801f4fe <UnityPrintChar+0x56>
 801f4b6:	4604      	mov	r4, r0
    else if (*pch == 13)
 801f4b8:	290d      	cmp	r1, #13
 801f4ba:	d035      	beq.n	801f528 <UnityPrintChar+0x80>
    else if (*pch == 10)
 801f4bc:	290a      	cmp	r1, #10
 801f4be:	d05c      	beq.n	801f57a <UnityPrintChar+0xd2>
        UNITY_OUTPUT_CHAR('\\');
 801f4c0:	4b4a      	ldr	r3, [pc, #296]	; (801f5ec <UnityPrintChar+0x144>)
 801f4c2:	6818      	ldr	r0, [r3, #0]
 801f4c4:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f4c6:	6893      	ldr	r3, [r2, #8]
 801f4c8:	3b01      	subs	r3, #1
 801f4ca:	6093      	str	r3, [r2, #8]
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	db7d      	blt.n	801f5cc <UnityPrintChar+0x124>
		return (*_p->_p++ = _c);
 801f4d0:	6813      	ldr	r3, [r2, #0]
 801f4d2:	1c59      	adds	r1, r3, #1
 801f4d4:	6011      	str	r1, [r2, #0]
 801f4d6:	225c      	movs	r2, #92	; 0x5c
 801f4d8:	701a      	strb	r2, [r3, #0]
        UNITY_OUTPUT_CHAR('x');
 801f4da:	4b44      	ldr	r3, [pc, #272]	; (801f5ec <UnityPrintChar+0x144>)
 801f4dc:	6818      	ldr	r0, [r3, #0]
 801f4de:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f4e0:	6893      	ldr	r3, [r2, #8]
 801f4e2:	3b01      	subs	r3, #1
 801f4e4:	6093      	str	r3, [r2, #8]
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	db78      	blt.n	801f5dc <UnityPrintChar+0x134>
		return (*_p->_p++ = _c);
 801f4ea:	6813      	ldr	r3, [r2, #0]
 801f4ec:	1c59      	adds	r1, r3, #1
 801f4ee:	6011      	str	r1, [r2, #0]
 801f4f0:	2278      	movs	r2, #120	; 0x78
 801f4f2:	701a      	strb	r2, [r3, #0]
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 801f4f4:	2102      	movs	r1, #2
 801f4f6:	7820      	ldrb	r0, [r4, #0]
 801f4f8:	f7ff ff96 	bl	801f428 <UnityPrintNumberHex>
 801f4fc:	bd10      	pop	{r4, pc}
        UNITY_OUTPUT_CHAR(*pch);
 801f4fe:	4b3b      	ldr	r3, [pc, #236]	; (801f5ec <UnityPrintChar+0x144>)
 801f500:	6818      	ldr	r0, [r3, #0]
 801f502:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f504:	6893      	ldr	r3, [r2, #8]
 801f506:	3b01      	subs	r3, #1
 801f508:	6093      	str	r3, [r2, #8]
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	db04      	blt.n	801f518 <UnityPrintChar+0x70>
		return (*_p->_p++ = _c);
 801f50e:	6813      	ldr	r3, [r2, #0]
 801f510:	1c58      	adds	r0, r3, #1
 801f512:	6010      	str	r0, [r2, #0]
 801f514:	7019      	strb	r1, [r3, #0]
 801f516:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f518:	6994      	ldr	r4, [r2, #24]
 801f51a:	42a3      	cmp	r3, r4
 801f51c:	db01      	blt.n	801f522 <UnityPrintChar+0x7a>
 801f51e:	290a      	cmp	r1, #10
 801f520:	d1f5      	bne.n	801f50e <UnityPrintChar+0x66>
		return (__swbuf_r(_ptr, _c, _p));
 801f522:	f000 fe4d 	bl	80201c0 <__swbuf_r>
 801f526:	bd10      	pop	{r4, pc}
        UNITY_OUTPUT_CHAR('\\');
 801f528:	4b30      	ldr	r3, [pc, #192]	; (801f5ec <UnityPrintChar+0x144>)
 801f52a:	6818      	ldr	r0, [r3, #0]
 801f52c:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f52e:	6893      	ldr	r3, [r2, #8]
 801f530:	3b01      	subs	r3, #1
 801f532:	6093      	str	r3, [r2, #8]
 801f534:	2b00      	cmp	r3, #0
 801f536:	db12      	blt.n	801f55e <UnityPrintChar+0xb6>
		return (*_p->_p++ = _c);
 801f538:	6813      	ldr	r3, [r2, #0]
 801f53a:	1c59      	adds	r1, r3, #1
 801f53c:	6011      	str	r1, [r2, #0]
 801f53e:	225c      	movs	r2, #92	; 0x5c
 801f540:	701a      	strb	r2, [r3, #0]
        UNITY_OUTPUT_CHAR('r');
 801f542:	4b2a      	ldr	r3, [pc, #168]	; (801f5ec <UnityPrintChar+0x144>)
 801f544:	6818      	ldr	r0, [r3, #0]
 801f546:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f548:	6893      	ldr	r3, [r2, #8]
 801f54a:	3b01      	subs	r3, #1
 801f54c:	6093      	str	r3, [r2, #8]
 801f54e:	2b00      	cmp	r3, #0
 801f550:	db0c      	blt.n	801f56c <UnityPrintChar+0xc4>
		return (*_p->_p++ = _c);
 801f552:	6813      	ldr	r3, [r2, #0]
 801f554:	1c59      	adds	r1, r3, #1
 801f556:	6011      	str	r1, [r2, #0]
 801f558:	2272      	movs	r2, #114	; 0x72
 801f55a:	701a      	strb	r2, [r3, #0]
 801f55c:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f55e:	6991      	ldr	r1, [r2, #24]
 801f560:	428b      	cmp	r3, r1
 801f562:	dae9      	bge.n	801f538 <UnityPrintChar+0x90>
		return (__swbuf_r(_ptr, _c, _p));
 801f564:	215c      	movs	r1, #92	; 0x5c
 801f566:	f000 fe2b 	bl	80201c0 <__swbuf_r>
 801f56a:	e7ea      	b.n	801f542 <UnityPrintChar+0x9a>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f56c:	6991      	ldr	r1, [r2, #24]
 801f56e:	428b      	cmp	r3, r1
 801f570:	daef      	bge.n	801f552 <UnityPrintChar+0xaa>
		return (__swbuf_r(_ptr, _c, _p));
 801f572:	2172      	movs	r1, #114	; 0x72
 801f574:	f000 fe24 	bl	80201c0 <__swbuf_r>
 801f578:	bd10      	pop	{r4, pc}
        UNITY_OUTPUT_CHAR('\\');
 801f57a:	4b1c      	ldr	r3, [pc, #112]	; (801f5ec <UnityPrintChar+0x144>)
 801f57c:	6818      	ldr	r0, [r3, #0]
 801f57e:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f580:	6893      	ldr	r3, [r2, #8]
 801f582:	3b01      	subs	r3, #1
 801f584:	6093      	str	r3, [r2, #8]
 801f586:	2b00      	cmp	r3, #0
 801f588:	db12      	blt.n	801f5b0 <UnityPrintChar+0x108>
		return (*_p->_p++ = _c);
 801f58a:	6813      	ldr	r3, [r2, #0]
 801f58c:	1c59      	adds	r1, r3, #1
 801f58e:	6011      	str	r1, [r2, #0]
 801f590:	225c      	movs	r2, #92	; 0x5c
 801f592:	701a      	strb	r2, [r3, #0]
        UNITY_OUTPUT_CHAR('n');
 801f594:	4b15      	ldr	r3, [pc, #84]	; (801f5ec <UnityPrintChar+0x144>)
 801f596:	6818      	ldr	r0, [r3, #0]
 801f598:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f59a:	6893      	ldr	r3, [r2, #8]
 801f59c:	3b01      	subs	r3, #1
 801f59e:	6093      	str	r3, [r2, #8]
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	db0c      	blt.n	801f5be <UnityPrintChar+0x116>
		return (*_p->_p++ = _c);
 801f5a4:	6813      	ldr	r3, [r2, #0]
 801f5a6:	1c59      	adds	r1, r3, #1
 801f5a8:	6011      	str	r1, [r2, #0]
 801f5aa:	226e      	movs	r2, #110	; 0x6e
 801f5ac:	701a      	strb	r2, [r3, #0]
 801f5ae:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f5b0:	6991      	ldr	r1, [r2, #24]
 801f5b2:	428b      	cmp	r3, r1
 801f5b4:	dae9      	bge.n	801f58a <UnityPrintChar+0xe2>
		return (__swbuf_r(_ptr, _c, _p));
 801f5b6:	215c      	movs	r1, #92	; 0x5c
 801f5b8:	f000 fe02 	bl	80201c0 <__swbuf_r>
 801f5bc:	e7ea      	b.n	801f594 <UnityPrintChar+0xec>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f5be:	6991      	ldr	r1, [r2, #24]
 801f5c0:	428b      	cmp	r3, r1
 801f5c2:	daef      	bge.n	801f5a4 <UnityPrintChar+0xfc>
		return (__swbuf_r(_ptr, _c, _p));
 801f5c4:	216e      	movs	r1, #110	; 0x6e
 801f5c6:	f000 fdfb 	bl	80201c0 <__swbuf_r>
 801f5ca:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f5cc:	6991      	ldr	r1, [r2, #24]
 801f5ce:	428b      	cmp	r3, r1
 801f5d0:	f6bf af7e 	bge.w	801f4d0 <UnityPrintChar+0x28>
		return (__swbuf_r(_ptr, _c, _p));
 801f5d4:	215c      	movs	r1, #92	; 0x5c
 801f5d6:	f000 fdf3 	bl	80201c0 <__swbuf_r>
 801f5da:	e77e      	b.n	801f4da <UnityPrintChar+0x32>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f5dc:	6991      	ldr	r1, [r2, #24]
 801f5de:	428b      	cmp	r3, r1
 801f5e0:	da83      	bge.n	801f4ea <UnityPrintChar+0x42>
		return (__swbuf_r(_ptr, _c, _p));
 801f5e2:	2178      	movs	r1, #120	; 0x78
 801f5e4:	f000 fdec 	bl	80201c0 <__swbuf_r>
 801f5e8:	e784      	b.n	801f4f4 <UnityPrintChar+0x4c>
 801f5ea:	bf00      	nop
 801f5ec:	20000040 	.word	0x20000040

0801f5f0 <UnityPrint>:
{
 801f5f0:	b510      	push	{r4, lr}
    if (pch != NULL)
 801f5f2:	4604      	mov	r4, r0
 801f5f4:	b920      	cbnz	r0, 801f600 <UnityPrint+0x10>
 801f5f6:	bd10      	pop	{r4, pc}
            UnityPrintChar(pch);
 801f5f8:	4620      	mov	r0, r4
 801f5fa:	f7ff ff55 	bl	801f4a8 <UnityPrintChar>
            pch++;
 801f5fe:	3401      	adds	r4, #1
        while (*pch)
 801f600:	7823      	ldrb	r3, [r4, #0]
 801f602:	2b00      	cmp	r3, #0
 801f604:	d1f8      	bne.n	801f5f8 <UnityPrint+0x8>
 801f606:	bd10      	pop	{r4, pc}

0801f608 <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 801f608:	b510      	push	{r4, lr}
 801f60a:	460c      	mov	r4, r1
    UnityPrint(file);
 801f60c:	f7ff fff0 	bl	801f5f0 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 801f610:	4b21      	ldr	r3, [pc, #132]	; (801f698 <UnityTestResultsBegin+0x90>)
 801f612:	6818      	ldr	r0, [r3, #0]
 801f614:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f616:	6893      	ldr	r3, [r2, #8]
 801f618:	3b01      	subs	r3, #1
 801f61a:	6093      	str	r3, [r2, #8]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	db26      	blt.n	801f66e <UnityTestResultsBegin+0x66>
		return (*_p->_p++ = _c);
 801f620:	6813      	ldr	r3, [r2, #0]
 801f622:	1c59      	adds	r1, r3, #1
 801f624:	6011      	str	r1, [r2, #0]
 801f626:	223a      	movs	r2, #58	; 0x3a
 801f628:	701a      	strb	r2, [r3, #0]
    UnityPrintNumber((UNITY_INT)line);
 801f62a:	4620      	mov	r0, r4
 801f62c:	f7ff fedc 	bl	801f3e8 <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 801f630:	4b19      	ldr	r3, [pc, #100]	; (801f698 <UnityTestResultsBegin+0x90>)
 801f632:	6818      	ldr	r0, [r3, #0]
 801f634:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f636:	6893      	ldr	r3, [r2, #8]
 801f638:	3b01      	subs	r3, #1
 801f63a:	6093      	str	r3, [r2, #8]
 801f63c:	2b00      	cmp	r3, #0
 801f63e:	db1d      	blt.n	801f67c <UnityTestResultsBegin+0x74>
		return (*_p->_p++ = _c);
 801f640:	6813      	ldr	r3, [r2, #0]
 801f642:	1c59      	adds	r1, r3, #1
 801f644:	6011      	str	r1, [r2, #0]
 801f646:	223a      	movs	r2, #58	; 0x3a
 801f648:	701a      	strb	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
 801f64a:	4b14      	ldr	r3, [pc, #80]	; (801f69c <UnityTestResultsBegin+0x94>)
 801f64c:	6858      	ldr	r0, [r3, #4]
 801f64e:	f7ff ffcf 	bl	801f5f0 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 801f652:	4b11      	ldr	r3, [pc, #68]	; (801f698 <UnityTestResultsBegin+0x90>)
 801f654:	6818      	ldr	r0, [r3, #0]
 801f656:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f658:	6893      	ldr	r3, [r2, #8]
 801f65a:	3b01      	subs	r3, #1
 801f65c:	6093      	str	r3, [r2, #8]
 801f65e:	2b00      	cmp	r3, #0
 801f660:	db13      	blt.n	801f68a <UnityTestResultsBegin+0x82>
		return (*_p->_p++ = _c);
 801f662:	6813      	ldr	r3, [r2, #0]
 801f664:	1c59      	adds	r1, r3, #1
 801f666:	6011      	str	r1, [r2, #0]
 801f668:	223a      	movs	r2, #58	; 0x3a
 801f66a:	701a      	strb	r2, [r3, #0]
 801f66c:	bd10      	pop	{r4, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f66e:	6991      	ldr	r1, [r2, #24]
 801f670:	428b      	cmp	r3, r1
 801f672:	dad5      	bge.n	801f620 <UnityTestResultsBegin+0x18>
		return (__swbuf_r(_ptr, _c, _p));
 801f674:	213a      	movs	r1, #58	; 0x3a
 801f676:	f000 fda3 	bl	80201c0 <__swbuf_r>
 801f67a:	e7d6      	b.n	801f62a <UnityTestResultsBegin+0x22>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f67c:	6991      	ldr	r1, [r2, #24]
 801f67e:	428b      	cmp	r3, r1
 801f680:	dade      	bge.n	801f640 <UnityTestResultsBegin+0x38>
		return (__swbuf_r(_ptr, _c, _p));
 801f682:	213a      	movs	r1, #58	; 0x3a
 801f684:	f000 fd9c 	bl	80201c0 <__swbuf_r>
 801f688:	e7df      	b.n	801f64a <UnityTestResultsBegin+0x42>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f68a:	6991      	ldr	r1, [r2, #24]
 801f68c:	428b      	cmp	r3, r1
 801f68e:	dae8      	bge.n	801f662 <UnityTestResultsBegin+0x5a>
		return (__swbuf_r(_ptr, _c, _p));
 801f690:	213a      	movs	r1, #58	; 0x3a
 801f692:	f000 fd95 	bl	80201c0 <__swbuf_r>
 801f696:	bd10      	pop	{r4, pc}
 801f698:	20000040 	.word	0x20000040
 801f69c:	20011f9c 	.word	0x20011f9c

0801f6a0 <UnityTestResultsFailBegin>:
}

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 801f6a0:	b508      	push	{r3, lr}
    UnityTestResultsBegin(Unity.TestFile, line);
 801f6a2:	4601      	mov	r1, r0
 801f6a4:	4b0d      	ldr	r3, [pc, #52]	; (801f6dc <UnityTestResultsFailBegin+0x3c>)
 801f6a6:	6818      	ldr	r0, [r3, #0]
 801f6a8:	f7ff ffae 	bl	801f608 <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
 801f6ac:	480c      	ldr	r0, [pc, #48]	; (801f6e0 <UnityTestResultsFailBegin+0x40>)
 801f6ae:	f7ff ff9f 	bl	801f5f0 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 801f6b2:	4b0c      	ldr	r3, [pc, #48]	; (801f6e4 <UnityTestResultsFailBegin+0x44>)
 801f6b4:	6818      	ldr	r0, [r3, #0]
 801f6b6:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f6b8:	6893      	ldr	r3, [r2, #8]
 801f6ba:	3b01      	subs	r3, #1
 801f6bc:	6093      	str	r3, [r2, #8]
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	db05      	blt.n	801f6ce <UnityTestResultsFailBegin+0x2e>
		return (*_p->_p++ = _c);
 801f6c2:	6813      	ldr	r3, [r2, #0]
 801f6c4:	1c59      	adds	r1, r3, #1
 801f6c6:	6011      	str	r1, [r2, #0]
 801f6c8:	223a      	movs	r2, #58	; 0x3a
 801f6ca:	701a      	strb	r2, [r3, #0]
 801f6cc:	bd08      	pop	{r3, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f6ce:	6991      	ldr	r1, [r2, #24]
 801f6d0:	428b      	cmp	r3, r1
 801f6d2:	daf6      	bge.n	801f6c2 <UnityTestResultsFailBegin+0x22>
		return (__swbuf_r(_ptr, _c, _p));
 801f6d4:	213a      	movs	r1, #58	; 0x3a
 801f6d6:	f000 fd73 	bl	80201c0 <__swbuf_r>
 801f6da:	bd08      	pop	{r3, pc}
 801f6dc:	20011f9c 	.word	0x20011f9c
 801f6e0:	080259d8 	.word	0x080259d8
 801f6e4:	20000040 	.word	0x20000040

0801f6e8 <UnityAddMsgIfSpecified>:
}

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
    if (msg)
 801f6e8:	b1e8      	cbz	r0, 801f726 <UnityAddMsgIfSpecified+0x3e>
{
 801f6ea:	b538      	push	{r3, r4, r5, lr}
 801f6ec:	4604      	mov	r4, r0
    {
        UnityPrint(UnityStrSpacer);
 801f6ee:	480e      	ldr	r0, [pc, #56]	; (801f728 <UnityAddMsgIfSpecified+0x40>)
 801f6f0:	f7ff ff7e 	bl	801f5f0 <UnityPrint>
#ifndef UNITY_EXCLUDE_DETAILS
        if (Unity.CurrentDetail1)
 801f6f4:	4b0d      	ldr	r3, [pc, #52]	; (801f72c <UnityAddMsgIfSpecified+0x44>)
 801f6f6:	689b      	ldr	r3, [r3, #8]
 801f6f8:	b18b      	cbz	r3, 801f71e <UnityAddMsgIfSpecified+0x36>
        {
            UnityPrint(UnityStrDetail1Name);
 801f6fa:	480d      	ldr	r0, [pc, #52]	; (801f730 <UnityAddMsgIfSpecified+0x48>)
 801f6fc:	f7ff ff78 	bl	801f5f0 <UnityPrint>
            UnityPrint(Unity.CurrentDetail1);
 801f700:	4d0a      	ldr	r5, [pc, #40]	; (801f72c <UnityAddMsgIfSpecified+0x44>)
 801f702:	68a8      	ldr	r0, [r5, #8]
 801f704:	f7ff ff74 	bl	801f5f0 <UnityPrint>
            if (Unity.CurrentDetail2)
 801f708:	68eb      	ldr	r3, [r5, #12]
 801f70a:	b12b      	cbz	r3, 801f718 <UnityAddMsgIfSpecified+0x30>
            {
                UnityPrint(UnityStrDetail2Name);
 801f70c:	4809      	ldr	r0, [pc, #36]	; (801f734 <UnityAddMsgIfSpecified+0x4c>)
 801f70e:	f7ff ff6f 	bl	801f5f0 <UnityPrint>
                UnityPrint(Unity.CurrentDetail2);
 801f712:	68e8      	ldr	r0, [r5, #12]
 801f714:	f7ff ff6c 	bl	801f5f0 <UnityPrint>
            }
            UnityPrint(UnityStrSpacer);
 801f718:	4803      	ldr	r0, [pc, #12]	; (801f728 <UnityAddMsgIfSpecified+0x40>)
 801f71a:	f7ff ff69 	bl	801f5f0 <UnityPrint>
        }
#endif
        UnityPrint(msg);
 801f71e:	4620      	mov	r0, r4
 801f720:	f7ff ff66 	bl	801f5f0 <UnityPrint>
 801f724:	bd38      	pop	{r3, r4, r5, pc}
 801f726:	4770      	bx	lr
 801f728:	08025a0c 	.word	0x08025a0c
 801f72c:	20011f9c 	.word	0x20011f9c
 801f730:	080259b4 	.word	0x080259b4
 801f734:	080259c0 	.word	0x080259c0

0801f738 <UnityPrintNumberByStyle>:
{
 801f738:	b538      	push	{r3, r4, r5, lr}
 801f73a:	4605      	mov	r5, r0
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 801f73c:	f011 0f10 	tst.w	r1, #16
 801f740:	d124      	bne.n	801f78c <UnityPrintNumberByStyle+0x54>
 801f742:	460c      	mov	r4, r1
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
 801f744:	f011 0f20 	tst.w	r1, #32
 801f748:	d123      	bne.n	801f792 <UnityPrintNumberByStyle+0x5a>
        UNITY_OUTPUT_CHAR('0');
 801f74a:	4b1a      	ldr	r3, [pc, #104]	; (801f7b4 <UnityPrintNumberByStyle+0x7c>)
 801f74c:	6818      	ldr	r0, [r3, #0]
 801f74e:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f750:	6893      	ldr	r3, [r2, #8]
 801f752:	3b01      	subs	r3, #1
 801f754:	6093      	str	r3, [r2, #8]
 801f756:	2b00      	cmp	r3, #0
 801f758:	db1e      	blt.n	801f798 <UnityPrintNumberByStyle+0x60>
		return (*_p->_p++ = _c);
 801f75a:	6813      	ldr	r3, [r2, #0]
 801f75c:	1c59      	adds	r1, r3, #1
 801f75e:	6011      	str	r1, [r2, #0]
 801f760:	2230      	movs	r2, #48	; 0x30
 801f762:	701a      	strb	r2, [r3, #0]
        UNITY_OUTPUT_CHAR('x');
 801f764:	4b13      	ldr	r3, [pc, #76]	; (801f7b4 <UnityPrintNumberByStyle+0x7c>)
 801f766:	6818      	ldr	r0, [r3, #0]
 801f768:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f76a:	6893      	ldr	r3, [r2, #8]
 801f76c:	3b01      	subs	r3, #1
 801f76e:	6093      	str	r3, [r2, #8]
 801f770:	2b00      	cmp	r3, #0
 801f772:	db18      	blt.n	801f7a6 <UnityPrintNumberByStyle+0x6e>
		return (*_p->_p++ = _c);
 801f774:	6813      	ldr	r3, [r2, #0]
 801f776:	1c59      	adds	r1, r3, #1
 801f778:	6011      	str	r1, [r2, #0]
 801f77a:	2278      	movs	r2, #120	; 0x78
 801f77c:	701a      	strb	r2, [r3, #0]
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
 801f77e:	f004 010f 	and.w	r1, r4, #15
 801f782:	0049      	lsls	r1, r1, #1
 801f784:	4628      	mov	r0, r5
 801f786:	f7ff fe4f 	bl	801f428 <UnityPrintNumberHex>
 801f78a:	bd38      	pop	{r3, r4, r5, pc}
        UnityPrintNumber(number);
 801f78c:	f7ff fe2c 	bl	801f3e8 <UnityPrintNumber>
 801f790:	bd38      	pop	{r3, r4, r5, pc}
        UnityPrintNumberUnsigned((UNITY_UINT)number);
 801f792:	f7ff fdf3 	bl	801f37c <UnityPrintNumberUnsigned>
 801f796:	bd38      	pop	{r3, r4, r5, pc}
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f798:	6991      	ldr	r1, [r2, #24]
 801f79a:	428b      	cmp	r3, r1
 801f79c:	dadd      	bge.n	801f75a <UnityPrintNumberByStyle+0x22>
		return (__swbuf_r(_ptr, _c, _p));
 801f79e:	2130      	movs	r1, #48	; 0x30
 801f7a0:	f000 fd0e 	bl	80201c0 <__swbuf_r>
 801f7a4:	e7de      	b.n	801f764 <UnityPrintNumberByStyle+0x2c>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f7a6:	6991      	ldr	r1, [r2, #24]
 801f7a8:	428b      	cmp	r3, r1
 801f7aa:	dae3      	bge.n	801f774 <UnityPrintNumberByStyle+0x3c>
		return (__swbuf_r(_ptr, _c, _p));
 801f7ac:	2178      	movs	r1, #120	; 0x78
 801f7ae:	f000 fd07 	bl	80201c0 <__swbuf_r>
 801f7b2:	e7e4      	b.n	801f77e <UnityPrintNumberByStyle+0x46>
 801f7b4:	20000040 	.word	0x20000040

0801f7b8 <UnityConcludeTest>:
{
 801f7b8:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
 801f7ba:	4b17      	ldr	r3, [pc, #92]	; (801f818 <UnityConcludeTest+0x60>)
 801f7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f7be:	b9c3      	cbnz	r3, 801f7f2 <UnityConcludeTest+0x3a>
    else if (!Unity.CurrentTestFailed)
 801f7c0:	4b15      	ldr	r3, [pc, #84]	; (801f818 <UnityConcludeTest+0x60>)
 801f7c2:	6a1b      	ldr	r3, [r3, #32]
 801f7c4:	b1d3      	cbz	r3, 801f7fc <UnityConcludeTest+0x44>
        Unity.TestFailures++;
 801f7c6:	4a14      	ldr	r2, [pc, #80]	; (801f818 <UnityConcludeTest+0x60>)
 801f7c8:	6993      	ldr	r3, [r2, #24]
 801f7ca:	3301      	adds	r3, #1
 801f7cc:	6193      	str	r3, [r2, #24]
    Unity.CurrentTestFailed = 0;
 801f7ce:	4b12      	ldr	r3, [pc, #72]	; (801f818 <UnityConcludeTest+0x60>)
 801f7d0:	2200      	movs	r2, #0
 801f7d2:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 801f7d4:	625a      	str	r2, [r3, #36]	; 0x24
    UNITY_PRINT_EOL();
 801f7d6:	4b11      	ldr	r3, [pc, #68]	; (801f81c <UnityConcludeTest+0x64>)
 801f7d8:	6818      	ldr	r0, [r3, #0]
 801f7da:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f7dc:	6893      	ldr	r3, [r2, #8]
 801f7de:	3b01      	subs	r3, #1
 801f7e0:	6093      	str	r3, [r2, #8]
 801f7e2:	2b00      	cmp	r3, #0
 801f7e4:	db13      	blt.n	801f80e <UnityConcludeTest+0x56>
		return (*_p->_p++ = _c);
 801f7e6:	6813      	ldr	r3, [r2, #0]
 801f7e8:	1c59      	adds	r1, r3, #1
 801f7ea:	6011      	str	r1, [r2, #0]
 801f7ec:	220a      	movs	r2, #10
 801f7ee:	701a      	strb	r2, [r3, #0]
 801f7f0:	bd08      	pop	{r3, pc}
        Unity.TestIgnores++;
 801f7f2:	4a09      	ldr	r2, [pc, #36]	; (801f818 <UnityConcludeTest+0x60>)
 801f7f4:	69d3      	ldr	r3, [r2, #28]
 801f7f6:	3301      	adds	r3, #1
 801f7f8:	61d3      	str	r3, [r2, #28]
 801f7fa:	e7e8      	b.n	801f7ce <UnityConcludeTest+0x16>
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 801f7fc:	4b06      	ldr	r3, [pc, #24]	; (801f818 <UnityConcludeTest+0x60>)
 801f7fe:	6919      	ldr	r1, [r3, #16]
 801f800:	6818      	ldr	r0, [r3, #0]
 801f802:	f7ff ff01 	bl	801f608 <UnityTestResultsBegin>
        UnityPrint(UnityStrPass);
 801f806:	4806      	ldr	r0, [pc, #24]	; (801f820 <UnityConcludeTest+0x68>)
 801f808:	f7ff fef2 	bl	801f5f0 <UnityPrint>
 801f80c:	e7df      	b.n	801f7ce <UnityConcludeTest+0x16>
		return (__swbuf_r(_ptr, _c, _p));
 801f80e:	210a      	movs	r1, #10
 801f810:	f000 fcd6 	bl	80201c0 <__swbuf_r>
 801f814:	bd08      	pop	{r3, pc}
 801f816:	bf00      	nop
 801f818:	20011f9c 	.word	0x20011f9c
 801f81c:	20000040 	.word	0x20000040
 801f820:	080259e4 	.word	0x080259e4

0801f824 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const UNITY_INT expected,
                            const UNITY_INT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
 801f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f826:	f89d 6018 	ldrb.w	r6, [sp, #24]
    RETURN_IF_FAIL_OR_IGNORE;
 801f82a:	4c13      	ldr	r4, [pc, #76]	; (801f878 <UnityAssertEqualNumber+0x54>)
 801f82c:	6a24      	ldr	r4, [r4, #32]
 801f82e:	b924      	cbnz	r4, 801f83a <UnityAssertEqualNumber+0x16>
 801f830:	4c11      	ldr	r4, [pc, #68]	; (801f878 <UnityAssertEqualNumber+0x54>)
 801f832:	6a64      	ldr	r4, [r4, #36]	; 0x24
 801f834:	b90c      	cbnz	r4, 801f83a <UnityAssertEqualNumber+0x16>

    if (expected != actual)
 801f836:	4288      	cmp	r0, r1
 801f838:	d100      	bne.n	801f83c <UnityAssertEqualNumber+0x18>
 801f83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f83c:	4617      	mov	r7, r2
 801f83e:	460c      	mov	r4, r1
 801f840:	4605      	mov	r5, r0
    {
        UnityTestResultsFailBegin(lineNumber);
 801f842:	4618      	mov	r0, r3
 801f844:	f7ff ff2c 	bl	801f6a0 <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 801f848:	480c      	ldr	r0, [pc, #48]	; (801f87c <UnityAssertEqualNumber+0x58>)
 801f84a:	f7ff fed1 	bl	801f5f0 <UnityPrint>
        UnityPrintNumberByStyle(expected, style);
 801f84e:	4631      	mov	r1, r6
 801f850:	4628      	mov	r0, r5
 801f852:	f7ff ff71 	bl	801f738 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrWas);
 801f856:	480a      	ldr	r0, [pc, #40]	; (801f880 <UnityAssertEqualNumber+0x5c>)
 801f858:	f7ff feca 	bl	801f5f0 <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 801f85c:	4631      	mov	r1, r6
 801f85e:	4620      	mov	r0, r4
 801f860:	f7ff ff6a 	bl	801f738 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 801f864:	4638      	mov	r0, r7
 801f866:	f7ff ff3f 	bl	801f6e8 <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 801f86a:	4803      	ldr	r0, [pc, #12]	; (801f878 <UnityAssertEqualNumber+0x54>)
 801f86c:	2101      	movs	r1, #1
 801f86e:	6201      	str	r1, [r0, #32]
 801f870:	3028      	adds	r0, #40	; 0x28
 801f872:	f7f0 fbeb 	bl	801004c <longjmp>
 801f876:	bf00      	nop
 801f878:	20011f9c 	.word	0x20011f9c
 801f87c:	080259cc 	.word	0x080259cc
 801f880:	08025a10 	.word	0x08025a10

0801f884 <UnityDefaultTestRun>:
    UNITY_IGNORE_AND_BAIL;
}

/*-----------------------------------------------*/
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 801f884:	b500      	push	{lr}
 801f886:	b083      	sub	sp, #12
 801f888:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
 801f88a:	480f      	ldr	r0, [pc, #60]	; (801f8c8 <UnityDefaultTestRun+0x44>)
 801f88c:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 801f88e:	6102      	str	r2, [r0, #16]
    Unity.NumberOfTests++;
 801f890:	6943      	ldr	r3, [r0, #20]
 801f892:	3301      	adds	r3, #1
 801f894:	6143      	str	r3, [r0, #20]
    UNITY_CLR_DETAILS();
 801f896:	2300      	movs	r3, #0
 801f898:	6083      	str	r3, [r0, #8]
 801f89a:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
 801f89c:	3028      	adds	r0, #40	; 0x28
 801f89e:	f7f0 fbcf 	bl	8010040 <setjmp>
 801f8a2:	b140      	cbz	r0, 801f8b6 <UnityDefaultTestRun+0x32>
    {
        setUp();
        Func();
    }
    if (TEST_PROTECT())
 801f8a4:	4809      	ldr	r0, [pc, #36]	; (801f8cc <UnityDefaultTestRun+0x48>)
 801f8a6:	f7f0 fbcb 	bl	8010040 <setjmp>
 801f8aa:	b148      	cbz	r0, 801f8c0 <UnityDefaultTestRun+0x3c>
    {
        tearDown();
    }
    UnityConcludeTest();
 801f8ac:	f7ff ff84 	bl	801f7b8 <UnityConcludeTest>
}
 801f8b0:	b003      	add	sp, #12
 801f8b2:	f85d fb04 	ldr.w	pc, [sp], #4
        setUp();
 801f8b6:	f7ff fd5f 	bl	801f378 <setUp>
        Func();
 801f8ba:	9b01      	ldr	r3, [sp, #4]
 801f8bc:	4798      	blx	r3
 801f8be:	e7f1      	b.n	801f8a4 <UnityDefaultTestRun+0x20>
        tearDown();
 801f8c0:	f7ff fd5b 	bl	801f37a <tearDown>
 801f8c4:	e7f2      	b.n	801f8ac <UnityDefaultTestRun+0x28>
 801f8c6:	bf00      	nop
 801f8c8:	20011f9c 	.word	0x20011f9c
 801f8cc:	20011fc4 	.word	0x20011fc4

0801f8d0 <UnityBegin>:

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
 801f8d0:	4b06      	ldr	r3, [pc, #24]	; (801f8ec <UnityBegin+0x1c>)
 801f8d2:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
 801f8d4:	2200      	movs	r2, #0
 801f8d6:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 801f8d8:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 801f8da:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 801f8dc:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 801f8de:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 801f8e0:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 801f8e2:	625a      	str	r2, [r3, #36]	; 0x24
    UNITY_EXEC_TIME_RESET();

    UNITY_CLR_DETAILS();
 801f8e4:	609a      	str	r2, [r3, #8]
 801f8e6:	60da      	str	r2, [r3, #12]
 801f8e8:	4770      	bx	lr
 801f8ea:	bf00      	nop
 801f8ec:	20011f9c 	.word	0x20011f9c

0801f8f0 <UnityEnd>:
    UNITY_OUTPUT_START();
}

/*-----------------------------------------------*/
int UnityEnd(void)
{
 801f8f0:	b510      	push	{r4, lr}
    UNITY_PRINT_EOL();
 801f8f2:	4b33      	ldr	r3, [pc, #204]	; (801f9c0 <UnityEnd+0xd0>)
 801f8f4:	6818      	ldr	r0, [r3, #0]
 801f8f6:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f8f8:	6893      	ldr	r3, [r2, #8]
 801f8fa:	3b01      	subs	r3, #1
 801f8fc:	6093      	str	r3, [r2, #8]
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	db4a      	blt.n	801f998 <UnityEnd+0xa8>
		return (*_p->_p++ = _c);
 801f902:	6813      	ldr	r3, [r2, #0]
 801f904:	1c59      	adds	r1, r3, #1
 801f906:	6011      	str	r1, [r2, #0]
 801f908:	220a      	movs	r2, #10
 801f90a:	701a      	strb	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
 801f90c:	482d      	ldr	r0, [pc, #180]	; (801f9c4 <UnityEnd+0xd4>)
 801f90e:	f7ff fe6f 	bl	801f5f0 <UnityPrint>
    UNITY_PRINT_EOL();
 801f912:	4b2b      	ldr	r3, [pc, #172]	; (801f9c0 <UnityEnd+0xd0>)
 801f914:	6818      	ldr	r0, [r3, #0]
 801f916:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f918:	6893      	ldr	r3, [r2, #8]
 801f91a:	3b01      	subs	r3, #1
 801f91c:	6093      	str	r3, [r2, #8]
 801f91e:	2b00      	cmp	r3, #0
 801f920:	db3e      	blt.n	801f9a0 <UnityEnd+0xb0>
		return (*_p->_p++ = _c);
 801f922:	6813      	ldr	r3, [r2, #0]
 801f924:	1c59      	adds	r1, r3, #1
 801f926:	6011      	str	r1, [r2, #0]
 801f928:	220a      	movs	r2, #10
 801f92a:	701a      	strb	r2, [r3, #0]
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 801f92c:	4c26      	ldr	r4, [pc, #152]	; (801f9c8 <UnityEnd+0xd8>)
 801f92e:	6960      	ldr	r0, [r4, #20]
 801f930:	f7ff fd5a 	bl	801f3e8 <UnityPrintNumber>
    UnityPrint(UnityStrResultsTests);
 801f934:	4825      	ldr	r0, [pc, #148]	; (801f9cc <UnityEnd+0xdc>)
 801f936:	f7ff fe5b 	bl	801f5f0 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
 801f93a:	69a0      	ldr	r0, [r4, #24]
 801f93c:	f7ff fd54 	bl	801f3e8 <UnityPrintNumber>
    UnityPrint(UnityStrResultsFailures);
 801f940:	4823      	ldr	r0, [pc, #140]	; (801f9d0 <UnityEnd+0xe0>)
 801f942:	f7ff fe55 	bl	801f5f0 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
 801f946:	69e0      	ldr	r0, [r4, #28]
 801f948:	f7ff fd4e 	bl	801f3e8 <UnityPrintNumber>
    UnityPrint(UnityStrResultsIgnored);
 801f94c:	4821      	ldr	r0, [pc, #132]	; (801f9d4 <UnityEnd+0xe4>)
 801f94e:	f7ff fe4f 	bl	801f5f0 <UnityPrint>
    UNITY_PRINT_EOL();
 801f952:	4b1b      	ldr	r3, [pc, #108]	; (801f9c0 <UnityEnd+0xd0>)
 801f954:	6818      	ldr	r0, [r3, #0]
 801f956:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f958:	6893      	ldr	r3, [r2, #8]
 801f95a:	3b01      	subs	r3, #1
 801f95c:	6093      	str	r3, [r2, #8]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	db22      	blt.n	801f9a8 <UnityEnd+0xb8>
		return (*_p->_p++ = _c);
 801f962:	6813      	ldr	r3, [r2, #0]
 801f964:	1c59      	adds	r1, r3, #1
 801f966:	6011      	str	r1, [r2, #0]
 801f968:	220a      	movs	r2, #10
 801f96a:	701a      	strb	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
 801f96c:	4b16      	ldr	r3, [pc, #88]	; (801f9c8 <UnityEnd+0xd8>)
 801f96e:	699b      	ldr	r3, [r3, #24]
 801f970:	b1f3      	cbz	r3, 801f9b0 <UnityEnd+0xc0>
    {
        UnityPrint(UnityStrOk);
    }
    else
    {
        UnityPrint(UnityStrFail);
 801f972:	4819      	ldr	r0, [pc, #100]	; (801f9d8 <UnityEnd+0xe8>)
 801f974:	f7ff fe3c 	bl	801f5f0 <UnityPrint>
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
 801f978:	4b11      	ldr	r3, [pc, #68]	; (801f9c0 <UnityEnd+0xd0>)
 801f97a:	6818      	ldr	r0, [r3, #0]
 801f97c:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 801f97e:	6893      	ldr	r3, [r2, #8]
 801f980:	3b01      	subs	r3, #1
 801f982:	6093      	str	r3, [r2, #8]
 801f984:	2b00      	cmp	r3, #0
 801f986:	db17      	blt.n	801f9b8 <UnityEnd+0xc8>
		return (*_p->_p++ = _c);
 801f988:	6813      	ldr	r3, [r2, #0]
 801f98a:	1c59      	adds	r1, r3, #1
 801f98c:	6011      	str	r1, [r2, #0]
 801f98e:	220a      	movs	r2, #10
 801f990:	701a      	strb	r2, [r3, #0]
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
 801f992:	4b0d      	ldr	r3, [pc, #52]	; (801f9c8 <UnityEnd+0xd8>)
 801f994:	6998      	ldr	r0, [r3, #24]
 801f996:	bd10      	pop	{r4, pc}
		return (__swbuf_r(_ptr, _c, _p));
 801f998:	210a      	movs	r1, #10
 801f99a:	f000 fc11 	bl	80201c0 <__swbuf_r>
 801f99e:	e7b5      	b.n	801f90c <UnityEnd+0x1c>
 801f9a0:	210a      	movs	r1, #10
 801f9a2:	f000 fc0d 	bl	80201c0 <__swbuf_r>
 801f9a6:	e7c1      	b.n	801f92c <UnityEnd+0x3c>
 801f9a8:	210a      	movs	r1, #10
 801f9aa:	f000 fc09 	bl	80201c0 <__swbuf_r>
 801f9ae:	e7dd      	b.n	801f96c <UnityEnd+0x7c>
        UnityPrint(UnityStrOk);
 801f9b0:	480a      	ldr	r0, [pc, #40]	; (801f9dc <UnityEnd+0xec>)
 801f9b2:	f7ff fe1d 	bl	801f5f0 <UnityPrint>
 801f9b6:	e7df      	b.n	801f978 <UnityEnd+0x88>
 801f9b8:	210a      	movs	r1, #10
 801f9ba:	f000 fc01 	bl	80201c0 <__swbuf_r>
 801f9be:	e7e8      	b.n	801f992 <UnityEnd+0xa2>
 801f9c0:	20000040 	.word	0x20000040
 801f9c4:	0802599c 	.word	0x0802599c
 801f9c8:	20011f9c 	.word	0x20011f9c
 801f9cc:	08025a04 	.word	0x08025a04
 801f9d0:	080259ec 	.word	0x080259ec
 801f9d4:	080259f8 	.word	0x080259f8
 801f9d8:	080259d8 	.word	0x080259d8
 801f9dc:	080259e0 	.word	0x080259e0

0801f9e0 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 801f9e0:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 801f9e2:	480c      	ldr	r0, [pc, #48]	; (801fa14 <MX_UART5_Init+0x34>)
 801f9e4:	4b0c      	ldr	r3, [pc, #48]	; (801fa18 <MX_UART5_Init+0x38>)
 801f9e6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 187500;
 801f9e8:	4b0c      	ldr	r3, [pc, #48]	; (801fa1c <MX_UART5_Init+0x3c>)
 801f9ea:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 801f9ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801f9f0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 801f9f2:	2300      	movs	r3, #0
 801f9f4:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 801f9f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f9fa:	6102      	str	r2, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 801f9fc:	220c      	movs	r2, #12
 801f9fe:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801fa00:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 801fa02:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 801fa04:	f7f2 fe36 	bl	8012674 <HAL_UART_Init>
 801fa08:	b900      	cbnz	r0, 801fa0c <MX_UART5_Init+0x2c>
 801fa0a:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 801fa0c:	f7fe fc1e 	bl	801e24c <Error_Handler>
  }

}
 801fa10:	e7fb      	b.n	801fa0a <MX_UART5_Init+0x2a>
 801fa12:	bf00      	nop
 801fa14:	20012080 	.word	0x20012080
 801fa18:	40005000 	.word	0x40005000
 801fa1c:	0002dc6c 	.word	0x0002dc6c

0801fa20 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801fa20:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 801fa22:	480a      	ldr	r0, [pc, #40]	; (801fa4c <MX_USART1_UART_Init+0x2c>)
 801fa24:	4b0a      	ldr	r3, [pc, #40]	; (801fa50 <MX_USART1_UART_Init+0x30>)
 801fa26:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 460800;
 801fa28:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 801fa2c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801fa2e:	2300      	movs	r3, #0
 801fa30:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801fa32:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801fa34:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 801fa36:	2208      	movs	r2, #8
 801fa38:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801fa3a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801fa3c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801fa3e:	f7f2 fe19 	bl	8012674 <HAL_UART_Init>
 801fa42:	b900      	cbnz	r0, 801fa46 <MX_USART1_UART_Init+0x26>
 801fa44:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 801fa46:	f7fe fc01 	bl	801e24c <Error_Handler>
  }

}
 801fa4a:	e7fb      	b.n	801fa44 <MX_USART1_UART_Init+0x24>
 801fa4c:	200120c0 	.word	0x200120c0
 801fa50:	40011000 	.word	0x40011000

0801fa54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801fa54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fa58:	b08b      	sub	sp, #44	; 0x2c
 801fa5a:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801fa5c:	2300      	movs	r3, #0
 801fa5e:	9305      	str	r3, [sp, #20]
 801fa60:	9306      	str	r3, [sp, #24]
 801fa62:	9307      	str	r3, [sp, #28]
 801fa64:	9308      	str	r3, [sp, #32]
 801fa66:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==UART5)
 801fa68:	6803      	ldr	r3, [r0, #0]
 801fa6a:	4a5a      	ldr	r2, [pc, #360]	; (801fbd4 <HAL_UART_MspInit+0x180>)
 801fa6c:	4293      	cmp	r3, r2
 801fa6e:	d005      	beq.n	801fa7c <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 801fa70:	4a59      	ldr	r2, [pc, #356]	; (801fbd8 <HAL_UART_MspInit+0x184>)
 801fa72:	4293      	cmp	r3, r2
 801fa74:	d064      	beq.n	801fb40 <HAL_UART_MspInit+0xec>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 801fa76:	b00b      	add	sp, #44	; 0x2c
 801fa78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 801fa7c:	2500      	movs	r5, #0
 801fa7e:	9500      	str	r5, [sp, #0]
 801fa80:	4b56      	ldr	r3, [pc, #344]	; (801fbdc <HAL_UART_MspInit+0x188>)
 801fa82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801fa84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801fa88:	641a      	str	r2, [r3, #64]	; 0x40
 801fa8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801fa8c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801fa90:	9200      	str	r2, [sp, #0]
 801fa92:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801fa94:	9501      	str	r5, [sp, #4]
 801fa96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fa98:	f042 0204 	orr.w	r2, r2, #4
 801fa9c:	631a      	str	r2, [r3, #48]	; 0x30
 801fa9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801faa0:	f002 0204 	and.w	r2, r2, #4
 801faa4:	9201      	str	r2, [sp, #4]
 801faa6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801faa8:	9502      	str	r5, [sp, #8]
 801faaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801faac:	f042 0208 	orr.w	r2, r2, #8
 801fab0:	631a      	str	r2, [r3, #48]	; 0x30
 801fab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fab4:	f003 0308 	and.w	r3, r3, #8
 801fab8:	9302      	str	r3, [sp, #8]
 801faba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801fabc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801fac0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fac2:	f04f 0902 	mov.w	r9, #2
 801fac6:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801faca:	f04f 0801 	mov.w	r8, #1
 801face:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fad2:	2703      	movs	r7, #3
 801fad4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801fad6:	2608      	movs	r6, #8
 801fad8:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fada:	a905      	add	r1, sp, #20
 801fadc:	4840      	ldr	r0, [pc, #256]	; (801fbe0 <HAL_UART_MspInit+0x18c>)
 801fade:	f7f1 fd3d 	bl	801155c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fae2:	2304      	movs	r3, #4
 801fae4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fae6:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801faea:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801faee:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801faf0:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801faf2:	a905      	add	r1, sp, #20
 801faf4:	483b      	ldr	r0, [pc, #236]	; (801fbe4 <HAL_UART_MspInit+0x190>)
 801faf6:	f7f1 fd31 	bl	801155c <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 801fafa:	483b      	ldr	r0, [pc, #236]	; (801fbe8 <HAL_UART_MspInit+0x194>)
 801fafc:	4b3b      	ldr	r3, [pc, #236]	; (801fbec <HAL_UART_MspInit+0x198>)
 801fafe:	6003      	str	r3, [r0, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 801fb00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801fb04:	6043      	str	r3, [r0, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801fb06:	2340      	movs	r3, #64	; 0x40
 801fb08:	6083      	str	r3, [r0, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801fb0a:	60c5      	str	r5, [r0, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 801fb0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fb10:	6103      	str	r3, [r0, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801fb12:	6145      	str	r5, [r0, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801fb14:	6185      	str	r5, [r0, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 801fb16:	61c5      	str	r5, [r0, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 801fb18:	6205      	str	r5, [r0, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801fb1a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 801fb1c:	f7f0 fd44 	bl	80105a8 <HAL_DMA_Init>
 801fb20:	b958      	cbnz	r0, 801fb3a <HAL_UART_MspInit+0xe6>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 801fb22:	4b31      	ldr	r3, [pc, #196]	; (801fbe8 <HAL_UART_MspInit+0x194>)
 801fb24:	6323      	str	r3, [r4, #48]	; 0x30
 801fb26:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 801fb28:	2200      	movs	r2, #0
 801fb2a:	2105      	movs	r1, #5
 801fb2c:	2035      	movs	r0, #53	; 0x35
 801fb2e:	f7f0 fc81 	bl	8010434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 801fb32:	2035      	movs	r0, #53	; 0x35
 801fb34:	f7f0 fcb0 	bl	8010498 <HAL_NVIC_EnableIRQ>
 801fb38:	e79d      	b.n	801fa76 <HAL_UART_MspInit+0x22>
      Error_Handler();
 801fb3a:	f7fe fb87 	bl	801e24c <Error_Handler>
 801fb3e:	e7f0      	b.n	801fb22 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART1_CLK_ENABLE();
 801fb40:	2500      	movs	r5, #0
 801fb42:	9503      	str	r5, [sp, #12]
 801fb44:	4b25      	ldr	r3, [pc, #148]	; (801fbdc <HAL_UART_MspInit+0x188>)
 801fb46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fb48:	f042 0210 	orr.w	r2, r2, #16
 801fb4c:	645a      	str	r2, [r3, #68]	; 0x44
 801fb4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fb50:	f002 0210 	and.w	r2, r2, #16
 801fb54:	9203      	str	r2, [sp, #12]
 801fb56:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801fb58:	9504      	str	r5, [sp, #16]
 801fb5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fb5c:	f042 0201 	orr.w	r2, r2, #1
 801fb60:	631a      	str	r2, [r3, #48]	; 0x30
 801fb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fb64:	f003 0301 	and.w	r3, r3, #1
 801fb68:	9304      	str	r3, [sp, #16]
 801fb6a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801fb6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801fb70:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fb72:	2302      	movs	r3, #2
 801fb74:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801fb76:	2301      	movs	r3, #1
 801fb78:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fb7a:	2303      	movs	r3, #3
 801fb7c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801fb7e:	2307      	movs	r3, #7
 801fb80:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fb82:	a905      	add	r1, sp, #20
 801fb84:	481a      	ldr	r0, [pc, #104]	; (801fbf0 <HAL_UART_MspInit+0x19c>)
 801fb86:	f7f1 fce9 	bl	801155c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 801fb8a:	481a      	ldr	r0, [pc, #104]	; (801fbf4 <HAL_UART_MspInit+0x1a0>)
 801fb8c:	4b1a      	ldr	r3, [pc, #104]	; (801fbf8 <HAL_UART_MspInit+0x1a4>)
 801fb8e:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 801fb90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801fb94:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801fb96:	2340      	movs	r3, #64	; 0x40
 801fb98:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801fb9a:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 801fb9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fba0:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801fba2:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801fba4:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 801fba6:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 801fba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801fbac:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801fbae:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 801fbb0:	f7f0 fcfa 	bl	80105a8 <HAL_DMA_Init>
 801fbb4:	b958      	cbnz	r0, 801fbce <HAL_UART_MspInit+0x17a>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 801fbb6:	4b0f      	ldr	r3, [pc, #60]	; (801fbf4 <HAL_UART_MspInit+0x1a0>)
 801fbb8:	6323      	str	r3, [r4, #48]	; 0x30
 801fbba:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 801fbbc:	2200      	movs	r2, #0
 801fbbe:	2105      	movs	r1, #5
 801fbc0:	2025      	movs	r0, #37	; 0x25
 801fbc2:	f7f0 fc37 	bl	8010434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801fbc6:	2025      	movs	r0, #37	; 0x25
 801fbc8:	f7f0 fc66 	bl	8010498 <HAL_NVIC_EnableIRQ>
}
 801fbcc:	e753      	b.n	801fa76 <HAL_UART_MspInit+0x22>
      Error_Handler();
 801fbce:	f7fe fb3d 	bl	801e24c <Error_Handler>
 801fbd2:	e7f0      	b.n	801fbb6 <HAL_UART_MspInit+0x162>
 801fbd4:	40005000 	.word	0x40005000
 801fbd8:	40011000 	.word	0x40011000
 801fbdc:	40023800 	.word	0x40023800
 801fbe0:	40020800 	.word	0x40020800
 801fbe4:	40020c00 	.word	0x40020c00
 801fbe8:	20012100 	.word	0x20012100
 801fbec:	400260b8 	.word	0x400260b8
 801fbf0:	40020000 	.word	0x40020000
 801fbf4:	20012020 	.word	0x20012020
 801fbf8:	400264b8 	.word	0x400264b8

0801fbfc <Web_thread>:

static portCHAR PAGE_BODY[768];
extern struct netif gnetif;
extern UART_HandleTypeDef huart5;

void Web_thread(void *arg) {
 801fbfc:	b570      	push	{r4, r5, r6, lr}
 801fbfe:	b08c      	sub	sp, #48	; 0x30
 801fc00:	4604      	mov	r4, r0
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
	u16_t buflen;
	char* buf;
	struct fs_file file;
	FlashToJSON(&hjsondata, &hflash);
 801fc02:	4989      	ldr	r1, [pc, #548]	; (801fe28 <Web_thread+0x22c>)
 801fc04:	4889      	ldr	r0, [pc, #548]	; (801fe2c <Web_thread+0x230>)
 801fc06:	f7fe f82f 	bl	801dc68 <FlashToJSON>

	osDelay(1);
 801fc0a:	2001      	movs	r0, #1
 801fc0c:	f7f2 ff5a 	bl	8012ac4 <osDelay>
 801fc10:	e016      	b.n	801fc40 <Web_thread+0x44>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
						buf += 5;
						if ((strncmp((char const *) buf, " ", 1) == 0)
								|| (strncmp((char const *) buf, "index.shtml",
										11) == 0)) {
							fs_open(&file, "/index.shtml");
 801fc12:	4987      	ldr	r1, [pc, #540]	; (801fe30 <Web_thread+0x234>)
 801fc14:	a803      	add	r0, sp, #12
 801fc16:	f7f6 fa1f 	bl	8016058 <fs_open>
							netconn_write(newconn,
 801fc1a:	2300      	movs	r3, #0
 801fc1c:	9300      	str	r3, [sp, #0]
 801fc1e:	9a04      	ldr	r2, [sp, #16]
 801fc20:	9903      	ldr	r1, [sp, #12]
 801fc22:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fc24:	f7f5 f84c 	bl	8014cc0 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 801fc28:	a803      	add	r0, sp, #12
 801fc2a:	f7f6 fa39 	bl	80160a0 <fs_close>
							osDelay(1);
						}
					}
				}
			}
			netconn_close(newconn);
 801fc2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fc30:	f7f5 f89a 	bl	8014d68 <netconn_close>
			netbuf_delete(inbuf);
 801fc34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fc36:	f7f6 f887 	bl	8015d48 <netbuf_delete>
			netconn_delete(newconn);
 801fc3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fc3c:	f7f4 ff34 	bl	8014aa8 <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 801fc40:	a90a      	add	r1, sp, #40	; 0x28
 801fc42:	4620      	mov	r0, r4
 801fc44:	f7f4 ff8e 	bl	8014b64 <netconn_accept>
		if (err == ERR_OK) {
 801fc48:	2800      	cmp	r0, #0
 801fc4a:	d1f9      	bne.n	801fc40 <Web_thread+0x44>
			recv_err = netconn_recv(newconn, &inbuf);
 801fc4c:	a90b      	add	r1, sp, #44	; 0x2c
 801fc4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fc50:	f7f4 ffe4 	bl	8014c1c <netconn_recv>
			if (recv_err == ERR_OK) {
 801fc54:	2800      	cmp	r0, #0
 801fc56:	d1ea      	bne.n	801fc2e <Web_thread+0x32>
				if (netconn_err(newconn) == ERR_OK) {
 801fc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	d1e5      	bne.n	801fc2e <Web_thread+0x32>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 801fc62:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 801fc66:	a908      	add	r1, sp, #32
 801fc68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fc6a:	f7f6 f87d 	bl	8015d68 <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 801fc6e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801fc72:	2b04      	cmp	r3, #4
 801fc74:	d9db      	bls.n	801fc2e <Web_thread+0x32>
 801fc76:	9d08      	ldr	r5, [sp, #32]
 801fc78:	2205      	movs	r2, #5
 801fc7a:	496e      	ldr	r1, [pc, #440]	; (801fe34 <Web_thread+0x238>)
 801fc7c:	4628      	mov	r0, r5
 801fc7e:	f000 f9b7 	bl	801fff0 <strncmp>
 801fc82:	2800      	cmp	r0, #0
 801fc84:	d1d3      	bne.n	801fc2e <Web_thread+0x32>
						buf += 5;
 801fc86:	1d6e      	adds	r6, r5, #5
 801fc88:	9608      	str	r6, [sp, #32]
						if ((strncmp((char const *) buf, " ", 1) == 0)
 801fc8a:	796b      	ldrb	r3, [r5, #5]
 801fc8c:	2b20      	cmp	r3, #32
 801fc8e:	d0c0      	beq.n	801fc12 <Web_thread+0x16>
								|| (strncmp((char const *) buf, "index.shtml",
 801fc90:	220b      	movs	r2, #11
 801fc92:	4969      	ldr	r1, [pc, #420]	; (801fe38 <Web_thread+0x23c>)
 801fc94:	4630      	mov	r0, r6
 801fc96:	f000 f9ab 	bl	801fff0 <strncmp>
 801fc9a:	2800      	cmp	r0, #0
 801fc9c:	d0b9      	beq.n	801fc12 <Web_thread+0x16>
						} else if (strncmp((char const *) buf, "img/logo.png",
 801fc9e:	220c      	movs	r2, #12
 801fca0:	4966      	ldr	r1, [pc, #408]	; (801fe3c <Web_thread+0x240>)
 801fca2:	4630      	mov	r0, r6
 801fca4:	f000 f9a4 	bl	801fff0 <strncmp>
 801fca8:	2800      	cmp	r0, #0
 801fcaa:	d038      	beq.n	801fd1e <Web_thread+0x122>
						} else if (strncmp((char const *) buf, "img/icon.png",
 801fcac:	220c      	movs	r2, #12
 801fcae:	4964      	ldr	r1, [pc, #400]	; (801fe40 <Web_thread+0x244>)
 801fcb0:	4630      	mov	r0, r6
 801fcb2:	f000 f99d 	bl	801fff0 <strncmp>
 801fcb6:	2800      	cmp	r0, #0
 801fcb8:	d040      	beq.n	801fd3c <Web_thread+0x140>
						} else if (strncmp((char const *) buf, "style.css", 9)
 801fcba:	2209      	movs	r2, #9
 801fcbc:	4961      	ldr	r1, [pc, #388]	; (801fe44 <Web_thread+0x248>)
 801fcbe:	4630      	mov	r0, r6
 801fcc0:	f000 f996 	bl	801fff0 <strncmp>
 801fcc4:	2800      	cmp	r0, #0
 801fcc6:	d048      	beq.n	801fd5a <Web_thread+0x15e>
						} else if (strncmp((char const *) buf, "AI.data?=", 9)
 801fcc8:	2209      	movs	r2, #9
 801fcca:	495f      	ldr	r1, [pc, #380]	; (801fe48 <Web_thread+0x24c>)
 801fccc:	4630      	mov	r0, r6
 801fcce:	f000 f98f 	bl	801fff0 <strncmp>
 801fcd2:	2800      	cmp	r0, #0
 801fcd4:	d050      	beq.n	801fd78 <Web_thread+0x17c>
						} else if (strncmp((char const *) buf, "json=", 5)
 801fcd6:	2205      	movs	r2, #5
 801fcd8:	495c      	ldr	r1, [pc, #368]	; (801fe4c <Web_thread+0x250>)
 801fcda:	4630      	mov	r0, r6
 801fcdc:	f000 f988 	bl	801fff0 <strncmp>
 801fce0:	2800      	cmp	r0, #0
 801fce2:	d068      	beq.n	801fdb6 <Web_thread+0x1ba>
						} else if (strncmp((char const *) buf, "cmd.reboot=1",
 801fce4:	220c      	movs	r2, #12
 801fce6:	495a      	ldr	r1, [pc, #360]	; (801fe50 <Web_thread+0x254>)
 801fce8:	4630      	mov	r0, r6
 801fcea:	f000 f981 	bl	801fff0 <strncmp>
 801fcee:	2800      	cmp	r0, #0
 801fcf0:	f040 8088 	bne.w	801fe04 <Web_thread+0x208>
							netconn_write(newconn, PAGE_HEADER,
 801fcf4:	4d57      	ldr	r5, [pc, #348]	; (801fe54 <Web_thread+0x258>)
 801fcf6:	4628      	mov	r0, r5
 801fcf8:	f7f0 f9ba 	bl	8010070 <strlen>
 801fcfc:	2300      	movs	r3, #0
 801fcfe:	9300      	str	r3, [sp, #0]
 801fd00:	2301      	movs	r3, #1
 801fd02:	4602      	mov	r2, r0
 801fd04:	4629      	mov	r1, r5
 801fd06:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fd08:	f7f4 ffda 	bl	8014cc0 <netconn_write_partly>
							LogText(SUB_SYS_WEB, LOG_LEV_INFO, "Reboot");
 801fd0c:	4a52      	ldr	r2, [pc, #328]	; (801fe58 <Web_thread+0x25c>)
 801fd0e:	2103      	movs	r1, #3
 801fd10:	2001      	movs	r0, #1
 801fd12:	f7fe f989 	bl	801e028 <LogText__>
							reboot_flag = 1;
 801fd16:	2201      	movs	r2, #1
 801fd18:	4b50      	ldr	r3, [pc, #320]	; (801fe5c <Web_thread+0x260>)
 801fd1a:	601a      	str	r2, [r3, #0]
 801fd1c:	e787      	b.n	801fc2e <Web_thread+0x32>
							fs_open(&file, "/img/logo.png");
 801fd1e:	4950      	ldr	r1, [pc, #320]	; (801fe60 <Web_thread+0x264>)
 801fd20:	a803      	add	r0, sp, #12
 801fd22:	f7f6 f999 	bl	8016058 <fs_open>
							netconn_write(newconn,
 801fd26:	2300      	movs	r3, #0
 801fd28:	9300      	str	r3, [sp, #0]
 801fd2a:	9a04      	ldr	r2, [sp, #16]
 801fd2c:	9903      	ldr	r1, [sp, #12]
 801fd2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fd30:	f7f4 ffc6 	bl	8014cc0 <netconn_write_partly>
							fs_close(&file);
 801fd34:	a803      	add	r0, sp, #12
 801fd36:	f7f6 f9b3 	bl	80160a0 <fs_close>
 801fd3a:	e778      	b.n	801fc2e <Web_thread+0x32>
							fs_open(&file, "/img/icon.png");
 801fd3c:	4949      	ldr	r1, [pc, #292]	; (801fe64 <Web_thread+0x268>)
 801fd3e:	a803      	add	r0, sp, #12
 801fd40:	f7f6 f98a 	bl	8016058 <fs_open>
							netconn_write(newconn,
 801fd44:	2300      	movs	r3, #0
 801fd46:	9300      	str	r3, [sp, #0]
 801fd48:	9a04      	ldr	r2, [sp, #16]
 801fd4a:	9903      	ldr	r1, [sp, #12]
 801fd4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fd4e:	f7f4 ffb7 	bl	8014cc0 <netconn_write_partly>
							fs_close(&file);
 801fd52:	a803      	add	r0, sp, #12
 801fd54:	f7f6 f9a4 	bl	80160a0 <fs_close>
 801fd58:	e769      	b.n	801fc2e <Web_thread+0x32>
							fs_open(&file, "/style.css");
 801fd5a:	4943      	ldr	r1, [pc, #268]	; (801fe68 <Web_thread+0x26c>)
 801fd5c:	a803      	add	r0, sp, #12
 801fd5e:	f7f6 f97b 	bl	8016058 <fs_open>
							netconn_write(newconn,
 801fd62:	2300      	movs	r3, #0
 801fd64:	9300      	str	r3, [sp, #0]
 801fd66:	9a04      	ldr	r2, [sp, #16]
 801fd68:	9903      	ldr	r1, [sp, #12]
 801fd6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fd6c:	f7f4 ffa8 	bl	8014cc0 <netconn_write_partly>
							fs_close(&file);
 801fd70:	a803      	add	r0, sp, #12
 801fd72:	f7f6 f995 	bl	80160a0 <fs_close>
 801fd76:	e75a      	b.n	801fc2e <Web_thread+0x32>
							json = (uint8_t*) pvPortMalloc(250);
 801fd78:	20fa      	movs	r0, #250	; 0xfa
 801fd7a:	f7f3 fab1 	bl	80132e0 <pvPortMalloc>
							if (json != NULL) {
 801fd7e:	4605      	mov	r5, r0
 801fd80:	2800      	cmp	r0, #0
 801fd82:	f43f af54 	beq.w	801fc2e <Web_thread+0x32>
								GetJSONData(json);
 801fd86:	f7fd fe9d 	bl	801dac4 <GetJSONData>
								sprintf(PAGE_BODY, "%s%s", PAGE_HEADER, json);
 801fd8a:	4e38      	ldr	r6, [pc, #224]	; (801fe6c <Web_thread+0x270>)
 801fd8c:	462b      	mov	r3, r5
 801fd8e:	4a31      	ldr	r2, [pc, #196]	; (801fe54 <Web_thread+0x258>)
 801fd90:	4937      	ldr	r1, [pc, #220]	; (801fe70 <Web_thread+0x274>)
 801fd92:	4630      	mov	r0, r6
 801fd94:	f7ff fabf 	bl	801f316 <siprintf>
								netconn_write(newconn, PAGE_BODY,
 801fd98:	4630      	mov	r0, r6
 801fd9a:	f7f0 f969 	bl	8010070 <strlen>
 801fd9e:	2300      	movs	r3, #0
 801fda0:	9300      	str	r3, [sp, #0]
 801fda2:	2301      	movs	r3, #1
 801fda4:	4602      	mov	r2, r0
 801fda6:	4631      	mov	r1, r6
 801fda8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fdaa:	f7f4 ff89 	bl	8014cc0 <netconn_write_partly>
								vPortFree(json);
 801fdae:	4628      	mov	r0, r5
 801fdb0:	f7f3 fb1a 	bl	80133e8 <vPortFree>
 801fdb4:	e73b      	b.n	801fc2e <Web_thread+0x32>
							json_str = (uint8_t*) pvPortMalloc(250);
 801fdb6:	20fa      	movs	r0, #250	; 0xfa
 801fdb8:	f7f3 fa92 	bl	80132e0 <pvPortMalloc>
							if (json_str != NULL) {
 801fdbc:	4605      	mov	r5, r0
 801fdbe:	2800      	cmp	r0, #0
 801fdc0:	f43f af35 	beq.w	801fc2e <Web_thread+0x32>
								DecodeURL((uint8_t*) buf + 5, json_str);
 801fdc4:	4601      	mov	r1, r0
 801fdc6:	9808      	ldr	r0, [sp, #32]
 801fdc8:	3005      	adds	r0, #5
 801fdca:	f7fd ffee 	bl	801ddaa <DecodeURL>
								ParseJSON(&hjsondata, json_str);
 801fdce:	4e17      	ldr	r6, [pc, #92]	; (801fe2c <Web_thread+0x230>)
 801fdd0:	4629      	mov	r1, r5
 801fdd2:	4630      	mov	r0, r6
 801fdd4:	f7fe f814 	bl	801de00 <ParseJSON>
								JSONToFlash(&hjsondata, &hflash);
 801fdd8:	4913      	ldr	r1, [pc, #76]	; (801fe28 <Web_thread+0x22c>)
 801fdda:	4630      	mov	r0, r6
 801fddc:	f7fe f8b8 	bl	801df50 <JSONToFlash>
								SaveFash();
 801fde0:	f7fc fd56 	bl	801c890 <SaveFash>
								netconn_write(newconn, PAGE_HEADER,
 801fde4:	4e1b      	ldr	r6, [pc, #108]	; (801fe54 <Web_thread+0x258>)
 801fde6:	4630      	mov	r0, r6
 801fde8:	f7f0 f942 	bl	8010070 <strlen>
 801fdec:	2300      	movs	r3, #0
 801fdee:	9300      	str	r3, [sp, #0]
 801fdf0:	2301      	movs	r3, #1
 801fdf2:	4602      	mov	r2, r0
 801fdf4:	4631      	mov	r1, r6
 801fdf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fdf8:	f7f4 ff62 	bl	8014cc0 <netconn_write_partly>
								vPortFree(json_str);
 801fdfc:	4628      	mov	r0, r5
 801fdfe:	f7f3 faf3 	bl	80133e8 <vPortFree>
 801fe02:	e714      	b.n	801fc2e <Web_thread+0x32>
							fs_open(&file, "/404.html");
 801fe04:	491b      	ldr	r1, [pc, #108]	; (801fe74 <Web_thread+0x278>)
 801fe06:	a803      	add	r0, sp, #12
 801fe08:	f7f6 f926 	bl	8016058 <fs_open>
							netconn_write(newconn,
 801fe0c:	2300      	movs	r3, #0
 801fe0e:	9300      	str	r3, [sp, #0]
 801fe10:	9a04      	ldr	r2, [sp, #16]
 801fe12:	9903      	ldr	r1, [sp, #12]
 801fe14:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fe16:	f7f4 ff53 	bl	8014cc0 <netconn_write_partly>
							fs_close(&file);
 801fe1a:	a803      	add	r0, sp, #12
 801fe1c:	f7f6 f940 	bl	80160a0 <fs_close>
							osDelay(1);
 801fe20:	2001      	movs	r0, #1
 801fe22:	f7f2 fe4f 	bl	8012ac4 <osDelay>
 801fe26:	e702      	b.n	801fc2e <Web_thread+0x32>
 801fe28:	2000ecd4 	.word	0x2000ecd4
 801fe2c:	20011e04 	.word	0x20011e04
 801fe30:	08025a98 	.word	0x08025a98
 801fe34:	08025a84 	.word	0x08025a84
 801fe38:	08025a8c 	.word	0x08025a8c
 801fe3c:	08025aa8 	.word	0x08025aa8
 801fe40:	08025ac8 	.word	0x08025ac8
 801fe44:	08025ae8 	.word	0x08025ae8
 801fe48:	08025b00 	.word	0x08025b00
 801fe4c:	08025b14 	.word	0x08025b14
 801fe50:	08025b1c 	.word	0x08025b1c
 801fe54:	08025a18 	.word	0x08025a18
 801fe58:	08025b2c 	.word	0x08025b2c
 801fe5c:	2000a198 	.word	0x2000a198
 801fe60:	08025ab8 	.word	0x08025ab8
 801fe64:	08025ad8 	.word	0x08025ad8
 801fe68:	08025af4 	.word	0x08025af4
 801fe6c:	20009e98 	.word	0x20009e98
 801fe70:	08025b0c 	.word	0x08025b0c
 801fe74:	08025b34 	.word	0x08025b34

0801fe78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 801fe78:	f8df d034 	ldr.w	sp, [pc, #52]	; 801feb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801fe7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801fe7e:	e003      	b.n	801fe88 <LoopCopyDataInit>

0801fe80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801fe80:	4b0c      	ldr	r3, [pc, #48]	; (801feb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801fe82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801fe84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801fe86:	3104      	adds	r1, #4

0801fe88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801fe88:	480b      	ldr	r0, [pc, #44]	; (801feb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801fe8a:	4b0c      	ldr	r3, [pc, #48]	; (801febc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801fe8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801fe8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801fe90:	d3f6      	bcc.n	801fe80 <CopyDataInit>
  ldr  r2, =_sbss
 801fe92:	4a0b      	ldr	r2, [pc, #44]	; (801fec0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801fe94:	e002      	b.n	801fe9c <LoopFillZerobss>

0801fe96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801fe96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801fe98:	f842 3b04 	str.w	r3, [r2], #4

0801fe9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801fe9c:	4b09      	ldr	r3, [pc, #36]	; (801fec4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801fe9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801fea0:	d3f9      	bcc.n	801fe96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801fea2:	f7fe ffe3 	bl	801ee6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801fea6:	f000 f83b 	bl	801ff20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801feaa:	f7fe fa29 	bl	801e300 <main>
  bx  lr    
 801feae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801feb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801feb4:	08025d14 	.word	0x08025d14
  ldr  r0, =_sdata
 801feb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801febc:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 801fec0:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 801fec4:	20012160 	.word	0x20012160

0801fec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801fec8:	e7fe      	b.n	801fec8 <ADC_IRQHandler>

0801feca <TestCalculateFCS>:

/* Includes */
#include "test_protocol.h"
/* -------- */

void TestCalculateFCS(){
 801feca:	b510      	push	{r4, lr}
 801fecc:	b086      	sub	sp, #24
	uint8_t buf[10];
	memset(buf,0x00,sizeof(buf));
 801fece:	2400      	movs	r4, #0
 801fed0:	9403      	str	r4, [sp, #12]
 801fed2:	9404      	str	r4, [sp, #16]
 801fed4:	f8ad 4014 	strh.w	r4, [sp, #20]
	TEST_ASSERT_EQUAL_HEX8(0x00, CalculateFCS(buf,2));
 801fed8:	2102      	movs	r1, #2
 801feda:	a803      	add	r0, sp, #12
 801fedc:	f7fe fce8 	bl	801e8b0 <CalculateFCS>
 801fee0:	2341      	movs	r3, #65	; 0x41
 801fee2:	9300      	str	r3, [sp, #0]
 801fee4:	2310      	movs	r3, #16
 801fee6:	4622      	mov	r2, r4
 801fee8:	b241      	sxtb	r1, r0
 801feea:	4620      	mov	r0, r4
 801feec:	f7ff fc9a 	bl	801f824 <UnityAssertEqualNumber>
}
 801fef0:	b006      	add	sp, #24
 801fef2:	bd10      	pop	{r4, pc}

0801fef4 <RunAllTests>:

/* Includes */
#include "test_runner.h"
/* -------- */

void RunAllTests(void) {
 801fef4:	b508      	push	{r3, lr}
	UNITY_BEGIN();
 801fef6:	4805      	ldr	r0, [pc, #20]	; (801ff0c <RunAllTests+0x18>)
 801fef8:	f7ff fcea 	bl	801f8d0 <UnityBegin>
	RUN_TEST(TestCalculateFCS);
 801fefc:	220e      	movs	r2, #14
 801fefe:	4904      	ldr	r1, [pc, #16]	; (801ff10 <RunAllTests+0x1c>)
 801ff00:	4804      	ldr	r0, [pc, #16]	; (801ff14 <RunAllTests+0x20>)
 801ff02:	f7ff fcbf 	bl	801f884 <UnityDefaultTestRun>
	UNITY_END();
 801ff06:	f7ff fcf3 	bl	801f8f0 <UnityEnd>
 801ff0a:	bd08      	pop	{r3, pc}
 801ff0c:	08025b40 	.word	0x08025b40
 801ff10:	08025b58 	.word	0x08025b58
 801ff14:	0801fecb 	.word	0x0801fecb

0801ff18 <atoi>:
 801ff18:	220a      	movs	r2, #10
 801ff1a:	2100      	movs	r1, #0
 801ff1c:	f000 b8fa 	b.w	8020114 <strtol>

0801ff20 <__libc_init_array>:
 801ff20:	b570      	push	{r4, r5, r6, lr}
 801ff22:	4e0d      	ldr	r6, [pc, #52]	; (801ff58 <__libc_init_array+0x38>)
 801ff24:	4c0d      	ldr	r4, [pc, #52]	; (801ff5c <__libc_init_array+0x3c>)
 801ff26:	1ba4      	subs	r4, r4, r6
 801ff28:	10a4      	asrs	r4, r4, #2
 801ff2a:	2500      	movs	r5, #0
 801ff2c:	42a5      	cmp	r5, r4
 801ff2e:	d109      	bne.n	801ff44 <__libc_init_array+0x24>
 801ff30:	4e0b      	ldr	r6, [pc, #44]	; (801ff60 <__libc_init_array+0x40>)
 801ff32:	4c0c      	ldr	r4, [pc, #48]	; (801ff64 <__libc_init_array+0x44>)
 801ff34:	f000 fd70 	bl	8020a18 <_init>
 801ff38:	1ba4      	subs	r4, r4, r6
 801ff3a:	10a4      	asrs	r4, r4, #2
 801ff3c:	2500      	movs	r5, #0
 801ff3e:	42a5      	cmp	r5, r4
 801ff40:	d105      	bne.n	801ff4e <__libc_init_array+0x2e>
 801ff42:	bd70      	pop	{r4, r5, r6, pc}
 801ff44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ff48:	4798      	blx	r3
 801ff4a:	3501      	adds	r5, #1
 801ff4c:	e7ee      	b.n	801ff2c <__libc_init_array+0xc>
 801ff4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ff52:	4798      	blx	r3
 801ff54:	3501      	adds	r5, #1
 801ff56:	e7f2      	b.n	801ff3e <__libc_init_array+0x1e>
 801ff58:	08025d0c 	.word	0x08025d0c
 801ff5c:	08025d0c 	.word	0x08025d0c
 801ff60:	08025d0c 	.word	0x08025d0c
 801ff64:	08025d10 	.word	0x08025d10

0801ff68 <__itoa>:
 801ff68:	1e93      	subs	r3, r2, #2
 801ff6a:	2b22      	cmp	r3, #34	; 0x22
 801ff6c:	b510      	push	{r4, lr}
 801ff6e:	460c      	mov	r4, r1
 801ff70:	d904      	bls.n	801ff7c <__itoa+0x14>
 801ff72:	2300      	movs	r3, #0
 801ff74:	700b      	strb	r3, [r1, #0]
 801ff76:	461c      	mov	r4, r3
 801ff78:	4620      	mov	r0, r4
 801ff7a:	bd10      	pop	{r4, pc}
 801ff7c:	2a0a      	cmp	r2, #10
 801ff7e:	d109      	bne.n	801ff94 <__itoa+0x2c>
 801ff80:	2800      	cmp	r0, #0
 801ff82:	da07      	bge.n	801ff94 <__itoa+0x2c>
 801ff84:	232d      	movs	r3, #45	; 0x2d
 801ff86:	700b      	strb	r3, [r1, #0]
 801ff88:	4240      	negs	r0, r0
 801ff8a:	2101      	movs	r1, #1
 801ff8c:	4421      	add	r1, r4
 801ff8e:	f000 f8d7 	bl	8020140 <__utoa>
 801ff92:	e7f1      	b.n	801ff78 <__itoa+0x10>
 801ff94:	2100      	movs	r1, #0
 801ff96:	e7f9      	b.n	801ff8c <__itoa+0x24>

0801ff98 <itoa>:
 801ff98:	f7ff bfe6 	b.w	801ff68 <__itoa>

0801ff9c <memcmp>:
 801ff9c:	b510      	push	{r4, lr}
 801ff9e:	3901      	subs	r1, #1
 801ffa0:	4402      	add	r2, r0
 801ffa2:	4290      	cmp	r0, r2
 801ffa4:	d101      	bne.n	801ffaa <memcmp+0xe>
 801ffa6:	2000      	movs	r0, #0
 801ffa8:	bd10      	pop	{r4, pc}
 801ffaa:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ffae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ffb2:	42a3      	cmp	r3, r4
 801ffb4:	d0f5      	beq.n	801ffa2 <memcmp+0x6>
 801ffb6:	1b18      	subs	r0, r3, r4
 801ffb8:	bd10      	pop	{r4, pc}

0801ffba <memcpy>:
 801ffba:	b510      	push	{r4, lr}
 801ffbc:	1e43      	subs	r3, r0, #1
 801ffbe:	440a      	add	r2, r1
 801ffc0:	4291      	cmp	r1, r2
 801ffc2:	d100      	bne.n	801ffc6 <memcpy+0xc>
 801ffc4:	bd10      	pop	{r4, pc}
 801ffc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ffca:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ffce:	e7f7      	b.n	801ffc0 <memcpy+0x6>

0801ffd0 <memset>:
 801ffd0:	4402      	add	r2, r0
 801ffd2:	4603      	mov	r3, r0
 801ffd4:	4293      	cmp	r3, r2
 801ffd6:	d100      	bne.n	801ffda <memset+0xa>
 801ffd8:	4770      	bx	lr
 801ffda:	f803 1b01 	strb.w	r1, [r3], #1
 801ffde:	e7f9      	b.n	801ffd4 <memset+0x4>

0801ffe0 <strcpy>:
 801ffe0:	4603      	mov	r3, r0
 801ffe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ffe6:	f803 2b01 	strb.w	r2, [r3], #1
 801ffea:	2a00      	cmp	r2, #0
 801ffec:	d1f9      	bne.n	801ffe2 <strcpy+0x2>
 801ffee:	4770      	bx	lr

0801fff0 <strncmp>:
 801fff0:	b510      	push	{r4, lr}
 801fff2:	b16a      	cbz	r2, 8020010 <strncmp+0x20>
 801fff4:	3901      	subs	r1, #1
 801fff6:	1884      	adds	r4, r0, r2
 801fff8:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fffc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020000:	4293      	cmp	r3, r2
 8020002:	d103      	bne.n	802000c <strncmp+0x1c>
 8020004:	42a0      	cmp	r0, r4
 8020006:	d001      	beq.n	802000c <strncmp+0x1c>
 8020008:	2b00      	cmp	r3, #0
 802000a:	d1f5      	bne.n	801fff8 <strncmp+0x8>
 802000c:	1a98      	subs	r0, r3, r2
 802000e:	bd10      	pop	{r4, pc}
 8020010:	4610      	mov	r0, r2
 8020012:	bd10      	pop	{r4, pc}

08020014 <_strtol_l.isra.0>:
 8020014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020018:	4680      	mov	r8, r0
 802001a:	4689      	mov	r9, r1
 802001c:	4692      	mov	sl, r2
 802001e:	461f      	mov	r7, r3
 8020020:	468b      	mov	fp, r1
 8020022:	465d      	mov	r5, fp
 8020024:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020026:	f815 4b01 	ldrb.w	r4, [r5], #1
 802002a:	f000 fb05 	bl	8020638 <__locale_ctype_ptr_l>
 802002e:	4420      	add	r0, r4
 8020030:	7846      	ldrb	r6, [r0, #1]
 8020032:	f016 0608 	ands.w	r6, r6, #8
 8020036:	d10b      	bne.n	8020050 <_strtol_l.isra.0+0x3c>
 8020038:	2c2d      	cmp	r4, #45	; 0x2d
 802003a:	d10b      	bne.n	8020054 <_strtol_l.isra.0+0x40>
 802003c:	782c      	ldrb	r4, [r5, #0]
 802003e:	2601      	movs	r6, #1
 8020040:	f10b 0502 	add.w	r5, fp, #2
 8020044:	b167      	cbz	r7, 8020060 <_strtol_l.isra.0+0x4c>
 8020046:	2f10      	cmp	r7, #16
 8020048:	d114      	bne.n	8020074 <_strtol_l.isra.0+0x60>
 802004a:	2c30      	cmp	r4, #48	; 0x30
 802004c:	d00a      	beq.n	8020064 <_strtol_l.isra.0+0x50>
 802004e:	e011      	b.n	8020074 <_strtol_l.isra.0+0x60>
 8020050:	46ab      	mov	fp, r5
 8020052:	e7e6      	b.n	8020022 <_strtol_l.isra.0+0xe>
 8020054:	2c2b      	cmp	r4, #43	; 0x2b
 8020056:	bf04      	itt	eq
 8020058:	782c      	ldrbeq	r4, [r5, #0]
 802005a:	f10b 0502 	addeq.w	r5, fp, #2
 802005e:	e7f1      	b.n	8020044 <_strtol_l.isra.0+0x30>
 8020060:	2c30      	cmp	r4, #48	; 0x30
 8020062:	d127      	bne.n	80200b4 <_strtol_l.isra.0+0xa0>
 8020064:	782b      	ldrb	r3, [r5, #0]
 8020066:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802006a:	2b58      	cmp	r3, #88	; 0x58
 802006c:	d14b      	bne.n	8020106 <_strtol_l.isra.0+0xf2>
 802006e:	786c      	ldrb	r4, [r5, #1]
 8020070:	2710      	movs	r7, #16
 8020072:	3502      	adds	r5, #2
 8020074:	2e00      	cmp	r6, #0
 8020076:	bf0c      	ite	eq
 8020078:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 802007c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8020080:	2200      	movs	r2, #0
 8020082:	fbb1 fef7 	udiv	lr, r1, r7
 8020086:	4610      	mov	r0, r2
 8020088:	fb07 1c1e 	mls	ip, r7, lr, r1
 802008c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8020090:	2b09      	cmp	r3, #9
 8020092:	d811      	bhi.n	80200b8 <_strtol_l.isra.0+0xa4>
 8020094:	461c      	mov	r4, r3
 8020096:	42a7      	cmp	r7, r4
 8020098:	dd1d      	ble.n	80200d6 <_strtol_l.isra.0+0xc2>
 802009a:	1c53      	adds	r3, r2, #1
 802009c:	d007      	beq.n	80200ae <_strtol_l.isra.0+0x9a>
 802009e:	4586      	cmp	lr, r0
 80200a0:	d316      	bcc.n	80200d0 <_strtol_l.isra.0+0xbc>
 80200a2:	d101      	bne.n	80200a8 <_strtol_l.isra.0+0x94>
 80200a4:	45a4      	cmp	ip, r4
 80200a6:	db13      	blt.n	80200d0 <_strtol_l.isra.0+0xbc>
 80200a8:	fb00 4007 	mla	r0, r0, r7, r4
 80200ac:	2201      	movs	r2, #1
 80200ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80200b2:	e7eb      	b.n	802008c <_strtol_l.isra.0+0x78>
 80200b4:	270a      	movs	r7, #10
 80200b6:	e7dd      	b.n	8020074 <_strtol_l.isra.0+0x60>
 80200b8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80200bc:	2b19      	cmp	r3, #25
 80200be:	d801      	bhi.n	80200c4 <_strtol_l.isra.0+0xb0>
 80200c0:	3c37      	subs	r4, #55	; 0x37
 80200c2:	e7e8      	b.n	8020096 <_strtol_l.isra.0+0x82>
 80200c4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80200c8:	2b19      	cmp	r3, #25
 80200ca:	d804      	bhi.n	80200d6 <_strtol_l.isra.0+0xc2>
 80200cc:	3c57      	subs	r4, #87	; 0x57
 80200ce:	e7e2      	b.n	8020096 <_strtol_l.isra.0+0x82>
 80200d0:	f04f 32ff 	mov.w	r2, #4294967295
 80200d4:	e7eb      	b.n	80200ae <_strtol_l.isra.0+0x9a>
 80200d6:	1c53      	adds	r3, r2, #1
 80200d8:	d108      	bne.n	80200ec <_strtol_l.isra.0+0xd8>
 80200da:	2322      	movs	r3, #34	; 0x22
 80200dc:	f8c8 3000 	str.w	r3, [r8]
 80200e0:	4608      	mov	r0, r1
 80200e2:	f1ba 0f00 	cmp.w	sl, #0
 80200e6:	d107      	bne.n	80200f8 <_strtol_l.isra.0+0xe4>
 80200e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200ec:	b106      	cbz	r6, 80200f0 <_strtol_l.isra.0+0xdc>
 80200ee:	4240      	negs	r0, r0
 80200f0:	f1ba 0f00 	cmp.w	sl, #0
 80200f4:	d00c      	beq.n	8020110 <_strtol_l.isra.0+0xfc>
 80200f6:	b122      	cbz	r2, 8020102 <_strtol_l.isra.0+0xee>
 80200f8:	3d01      	subs	r5, #1
 80200fa:	f8ca 5000 	str.w	r5, [sl]
 80200fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020102:	464d      	mov	r5, r9
 8020104:	e7f9      	b.n	80200fa <_strtol_l.isra.0+0xe6>
 8020106:	2430      	movs	r4, #48	; 0x30
 8020108:	2f00      	cmp	r7, #0
 802010a:	d1b3      	bne.n	8020074 <_strtol_l.isra.0+0x60>
 802010c:	2708      	movs	r7, #8
 802010e:	e7b1      	b.n	8020074 <_strtol_l.isra.0+0x60>
 8020110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020114 <strtol>:
 8020114:	4b08      	ldr	r3, [pc, #32]	; (8020138 <strtol+0x24>)
 8020116:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020118:	681c      	ldr	r4, [r3, #0]
 802011a:	4d08      	ldr	r5, [pc, #32]	; (802013c <strtol+0x28>)
 802011c:	6a23      	ldr	r3, [r4, #32]
 802011e:	2b00      	cmp	r3, #0
 8020120:	bf08      	it	eq
 8020122:	462b      	moveq	r3, r5
 8020124:	9300      	str	r3, [sp, #0]
 8020126:	4613      	mov	r3, r2
 8020128:	460a      	mov	r2, r1
 802012a:	4601      	mov	r1, r0
 802012c:	4620      	mov	r0, r4
 802012e:	f7ff ff71 	bl	8020014 <_strtol_l.isra.0>
 8020132:	b003      	add	sp, #12
 8020134:	bd30      	pop	{r4, r5, pc}
 8020136:	bf00      	nop
 8020138:	20000040 	.word	0x20000040
 802013c:	200000a4 	.word	0x200000a4

08020140 <__utoa>:
 8020140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020142:	4c1e      	ldr	r4, [pc, #120]	; (80201bc <__utoa+0x7c>)
 8020144:	b08b      	sub	sp, #44	; 0x2c
 8020146:	4603      	mov	r3, r0
 8020148:	460f      	mov	r7, r1
 802014a:	466d      	mov	r5, sp
 802014c:	f104 0e20 	add.w	lr, r4, #32
 8020150:	6820      	ldr	r0, [r4, #0]
 8020152:	6861      	ldr	r1, [r4, #4]
 8020154:	462e      	mov	r6, r5
 8020156:	c603      	stmia	r6!, {r0, r1}
 8020158:	3408      	adds	r4, #8
 802015a:	4574      	cmp	r4, lr
 802015c:	4635      	mov	r5, r6
 802015e:	d1f7      	bne.n	8020150 <__utoa+0x10>
 8020160:	7921      	ldrb	r1, [r4, #4]
 8020162:	7131      	strb	r1, [r6, #4]
 8020164:	1e91      	subs	r1, r2, #2
 8020166:	6820      	ldr	r0, [r4, #0]
 8020168:	6030      	str	r0, [r6, #0]
 802016a:	2922      	cmp	r1, #34	; 0x22
 802016c:	f04f 0100 	mov.w	r1, #0
 8020170:	d904      	bls.n	802017c <__utoa+0x3c>
 8020172:	7039      	strb	r1, [r7, #0]
 8020174:	460f      	mov	r7, r1
 8020176:	4638      	mov	r0, r7
 8020178:	b00b      	add	sp, #44	; 0x2c
 802017a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802017c:	1e78      	subs	r0, r7, #1
 802017e:	4606      	mov	r6, r0
 8020180:	fbb3 f5f2 	udiv	r5, r3, r2
 8020184:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8020188:	fb02 3315 	mls	r3, r2, r5, r3
 802018c:	4473      	add	r3, lr
 802018e:	1c4c      	adds	r4, r1, #1
 8020190:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8020194:	f806 3f01 	strb.w	r3, [r6, #1]!
 8020198:	462b      	mov	r3, r5
 802019a:	b965      	cbnz	r5, 80201b6 <__utoa+0x76>
 802019c:	553d      	strb	r5, [r7, r4]
 802019e:	187a      	adds	r2, r7, r1
 80201a0:	1acc      	subs	r4, r1, r3
 80201a2:	42a3      	cmp	r3, r4
 80201a4:	dae7      	bge.n	8020176 <__utoa+0x36>
 80201a6:	7844      	ldrb	r4, [r0, #1]
 80201a8:	7815      	ldrb	r5, [r2, #0]
 80201aa:	f800 5f01 	strb.w	r5, [r0, #1]!
 80201ae:	3301      	adds	r3, #1
 80201b0:	f802 4901 	strb.w	r4, [r2], #-1
 80201b4:	e7f4      	b.n	80201a0 <__utoa+0x60>
 80201b6:	4621      	mov	r1, r4
 80201b8:	e7e2      	b.n	8020180 <__utoa+0x40>
 80201ba:	bf00      	nop
 80201bc:	08025b70 	.word	0x08025b70

080201c0 <__swbuf_r>:
 80201c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201c2:	460e      	mov	r6, r1
 80201c4:	4614      	mov	r4, r2
 80201c6:	4605      	mov	r5, r0
 80201c8:	b118      	cbz	r0, 80201d2 <__swbuf_r+0x12>
 80201ca:	6983      	ldr	r3, [r0, #24]
 80201cc:	b90b      	cbnz	r3, 80201d2 <__swbuf_r+0x12>
 80201ce:	f000 f9a9 	bl	8020524 <__sinit>
 80201d2:	4b21      	ldr	r3, [pc, #132]	; (8020258 <__swbuf_r+0x98>)
 80201d4:	429c      	cmp	r4, r3
 80201d6:	d12a      	bne.n	802022e <__swbuf_r+0x6e>
 80201d8:	686c      	ldr	r4, [r5, #4]
 80201da:	69a3      	ldr	r3, [r4, #24]
 80201dc:	60a3      	str	r3, [r4, #8]
 80201de:	89a3      	ldrh	r3, [r4, #12]
 80201e0:	071a      	lsls	r2, r3, #28
 80201e2:	d52e      	bpl.n	8020242 <__swbuf_r+0x82>
 80201e4:	6923      	ldr	r3, [r4, #16]
 80201e6:	b363      	cbz	r3, 8020242 <__swbuf_r+0x82>
 80201e8:	6923      	ldr	r3, [r4, #16]
 80201ea:	6820      	ldr	r0, [r4, #0]
 80201ec:	1ac0      	subs	r0, r0, r3
 80201ee:	6963      	ldr	r3, [r4, #20]
 80201f0:	b2f6      	uxtb	r6, r6
 80201f2:	4298      	cmp	r0, r3
 80201f4:	4637      	mov	r7, r6
 80201f6:	db04      	blt.n	8020202 <__swbuf_r+0x42>
 80201f8:	4621      	mov	r1, r4
 80201fa:	4628      	mov	r0, r5
 80201fc:	f000 f928 	bl	8020450 <_fflush_r>
 8020200:	bb28      	cbnz	r0, 802024e <__swbuf_r+0x8e>
 8020202:	68a3      	ldr	r3, [r4, #8]
 8020204:	3b01      	subs	r3, #1
 8020206:	60a3      	str	r3, [r4, #8]
 8020208:	6823      	ldr	r3, [r4, #0]
 802020a:	1c5a      	adds	r2, r3, #1
 802020c:	6022      	str	r2, [r4, #0]
 802020e:	701e      	strb	r6, [r3, #0]
 8020210:	6963      	ldr	r3, [r4, #20]
 8020212:	3001      	adds	r0, #1
 8020214:	4298      	cmp	r0, r3
 8020216:	d004      	beq.n	8020222 <__swbuf_r+0x62>
 8020218:	89a3      	ldrh	r3, [r4, #12]
 802021a:	07db      	lsls	r3, r3, #31
 802021c:	d519      	bpl.n	8020252 <__swbuf_r+0x92>
 802021e:	2e0a      	cmp	r6, #10
 8020220:	d117      	bne.n	8020252 <__swbuf_r+0x92>
 8020222:	4621      	mov	r1, r4
 8020224:	4628      	mov	r0, r5
 8020226:	f000 f913 	bl	8020450 <_fflush_r>
 802022a:	b190      	cbz	r0, 8020252 <__swbuf_r+0x92>
 802022c:	e00f      	b.n	802024e <__swbuf_r+0x8e>
 802022e:	4b0b      	ldr	r3, [pc, #44]	; (802025c <__swbuf_r+0x9c>)
 8020230:	429c      	cmp	r4, r3
 8020232:	d101      	bne.n	8020238 <__swbuf_r+0x78>
 8020234:	68ac      	ldr	r4, [r5, #8]
 8020236:	e7d0      	b.n	80201da <__swbuf_r+0x1a>
 8020238:	4b09      	ldr	r3, [pc, #36]	; (8020260 <__swbuf_r+0xa0>)
 802023a:	429c      	cmp	r4, r3
 802023c:	bf08      	it	eq
 802023e:	68ec      	ldreq	r4, [r5, #12]
 8020240:	e7cb      	b.n	80201da <__swbuf_r+0x1a>
 8020242:	4621      	mov	r1, r4
 8020244:	4628      	mov	r0, r5
 8020246:	f000 f80d 	bl	8020264 <__swsetup_r>
 802024a:	2800      	cmp	r0, #0
 802024c:	d0cc      	beq.n	80201e8 <__swbuf_r+0x28>
 802024e:	f04f 37ff 	mov.w	r7, #4294967295
 8020252:	4638      	mov	r0, r7
 8020254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020256:	bf00      	nop
 8020258:	08025bb8 	.word	0x08025bb8
 802025c:	08025bd8 	.word	0x08025bd8
 8020260:	08025b98 	.word	0x08025b98

08020264 <__swsetup_r>:
 8020264:	4b32      	ldr	r3, [pc, #200]	; (8020330 <__swsetup_r+0xcc>)
 8020266:	b570      	push	{r4, r5, r6, lr}
 8020268:	681d      	ldr	r5, [r3, #0]
 802026a:	4606      	mov	r6, r0
 802026c:	460c      	mov	r4, r1
 802026e:	b125      	cbz	r5, 802027a <__swsetup_r+0x16>
 8020270:	69ab      	ldr	r3, [r5, #24]
 8020272:	b913      	cbnz	r3, 802027a <__swsetup_r+0x16>
 8020274:	4628      	mov	r0, r5
 8020276:	f000 f955 	bl	8020524 <__sinit>
 802027a:	4b2e      	ldr	r3, [pc, #184]	; (8020334 <__swsetup_r+0xd0>)
 802027c:	429c      	cmp	r4, r3
 802027e:	d10f      	bne.n	80202a0 <__swsetup_r+0x3c>
 8020280:	686c      	ldr	r4, [r5, #4]
 8020282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020286:	b29a      	uxth	r2, r3
 8020288:	0715      	lsls	r5, r2, #28
 802028a:	d42c      	bmi.n	80202e6 <__swsetup_r+0x82>
 802028c:	06d0      	lsls	r0, r2, #27
 802028e:	d411      	bmi.n	80202b4 <__swsetup_r+0x50>
 8020290:	2209      	movs	r2, #9
 8020292:	6032      	str	r2, [r6, #0]
 8020294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020298:	81a3      	strh	r3, [r4, #12]
 802029a:	f04f 30ff 	mov.w	r0, #4294967295
 802029e:	bd70      	pop	{r4, r5, r6, pc}
 80202a0:	4b25      	ldr	r3, [pc, #148]	; (8020338 <__swsetup_r+0xd4>)
 80202a2:	429c      	cmp	r4, r3
 80202a4:	d101      	bne.n	80202aa <__swsetup_r+0x46>
 80202a6:	68ac      	ldr	r4, [r5, #8]
 80202a8:	e7eb      	b.n	8020282 <__swsetup_r+0x1e>
 80202aa:	4b24      	ldr	r3, [pc, #144]	; (802033c <__swsetup_r+0xd8>)
 80202ac:	429c      	cmp	r4, r3
 80202ae:	bf08      	it	eq
 80202b0:	68ec      	ldreq	r4, [r5, #12]
 80202b2:	e7e6      	b.n	8020282 <__swsetup_r+0x1e>
 80202b4:	0751      	lsls	r1, r2, #29
 80202b6:	d512      	bpl.n	80202de <__swsetup_r+0x7a>
 80202b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80202ba:	b141      	cbz	r1, 80202ce <__swsetup_r+0x6a>
 80202bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80202c0:	4299      	cmp	r1, r3
 80202c2:	d002      	beq.n	80202ca <__swsetup_r+0x66>
 80202c4:	4630      	mov	r0, r6
 80202c6:	f000 fa31 	bl	802072c <_free_r>
 80202ca:	2300      	movs	r3, #0
 80202cc:	6363      	str	r3, [r4, #52]	; 0x34
 80202ce:	89a3      	ldrh	r3, [r4, #12]
 80202d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80202d4:	81a3      	strh	r3, [r4, #12]
 80202d6:	2300      	movs	r3, #0
 80202d8:	6063      	str	r3, [r4, #4]
 80202da:	6923      	ldr	r3, [r4, #16]
 80202dc:	6023      	str	r3, [r4, #0]
 80202de:	89a3      	ldrh	r3, [r4, #12]
 80202e0:	f043 0308 	orr.w	r3, r3, #8
 80202e4:	81a3      	strh	r3, [r4, #12]
 80202e6:	6923      	ldr	r3, [r4, #16]
 80202e8:	b94b      	cbnz	r3, 80202fe <__swsetup_r+0x9a>
 80202ea:	89a3      	ldrh	r3, [r4, #12]
 80202ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80202f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80202f4:	d003      	beq.n	80202fe <__swsetup_r+0x9a>
 80202f6:	4621      	mov	r1, r4
 80202f8:	4630      	mov	r0, r6
 80202fa:	f000 f9c5 	bl	8020688 <__smakebuf_r>
 80202fe:	89a2      	ldrh	r2, [r4, #12]
 8020300:	f012 0301 	ands.w	r3, r2, #1
 8020304:	d00c      	beq.n	8020320 <__swsetup_r+0xbc>
 8020306:	2300      	movs	r3, #0
 8020308:	60a3      	str	r3, [r4, #8]
 802030a:	6963      	ldr	r3, [r4, #20]
 802030c:	425b      	negs	r3, r3
 802030e:	61a3      	str	r3, [r4, #24]
 8020310:	6923      	ldr	r3, [r4, #16]
 8020312:	b953      	cbnz	r3, 802032a <__swsetup_r+0xc6>
 8020314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020318:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802031c:	d1ba      	bne.n	8020294 <__swsetup_r+0x30>
 802031e:	bd70      	pop	{r4, r5, r6, pc}
 8020320:	0792      	lsls	r2, r2, #30
 8020322:	bf58      	it	pl
 8020324:	6963      	ldrpl	r3, [r4, #20]
 8020326:	60a3      	str	r3, [r4, #8]
 8020328:	e7f2      	b.n	8020310 <__swsetup_r+0xac>
 802032a:	2000      	movs	r0, #0
 802032c:	e7f7      	b.n	802031e <__swsetup_r+0xba>
 802032e:	bf00      	nop
 8020330:	20000040 	.word	0x20000040
 8020334:	08025bb8 	.word	0x08025bb8
 8020338:	08025bd8 	.word	0x08025bd8
 802033c:	08025b98 	.word	0x08025b98

08020340 <__sflush_r>:
 8020340:	898a      	ldrh	r2, [r1, #12]
 8020342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020346:	4605      	mov	r5, r0
 8020348:	0710      	lsls	r0, r2, #28
 802034a:	460c      	mov	r4, r1
 802034c:	d45a      	bmi.n	8020404 <__sflush_r+0xc4>
 802034e:	684b      	ldr	r3, [r1, #4]
 8020350:	2b00      	cmp	r3, #0
 8020352:	dc05      	bgt.n	8020360 <__sflush_r+0x20>
 8020354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020356:	2b00      	cmp	r3, #0
 8020358:	dc02      	bgt.n	8020360 <__sflush_r+0x20>
 802035a:	2000      	movs	r0, #0
 802035c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020362:	2e00      	cmp	r6, #0
 8020364:	d0f9      	beq.n	802035a <__sflush_r+0x1a>
 8020366:	2300      	movs	r3, #0
 8020368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802036c:	682f      	ldr	r7, [r5, #0]
 802036e:	602b      	str	r3, [r5, #0]
 8020370:	d033      	beq.n	80203da <__sflush_r+0x9a>
 8020372:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020374:	89a3      	ldrh	r3, [r4, #12]
 8020376:	075a      	lsls	r2, r3, #29
 8020378:	d505      	bpl.n	8020386 <__sflush_r+0x46>
 802037a:	6863      	ldr	r3, [r4, #4]
 802037c:	1ac0      	subs	r0, r0, r3
 802037e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020380:	b10b      	cbz	r3, 8020386 <__sflush_r+0x46>
 8020382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020384:	1ac0      	subs	r0, r0, r3
 8020386:	2300      	movs	r3, #0
 8020388:	4602      	mov	r2, r0
 802038a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802038c:	6a21      	ldr	r1, [r4, #32]
 802038e:	4628      	mov	r0, r5
 8020390:	47b0      	blx	r6
 8020392:	1c43      	adds	r3, r0, #1
 8020394:	89a3      	ldrh	r3, [r4, #12]
 8020396:	d106      	bne.n	80203a6 <__sflush_r+0x66>
 8020398:	6829      	ldr	r1, [r5, #0]
 802039a:	291d      	cmp	r1, #29
 802039c:	d84b      	bhi.n	8020436 <__sflush_r+0xf6>
 802039e:	4a2b      	ldr	r2, [pc, #172]	; (802044c <__sflush_r+0x10c>)
 80203a0:	40ca      	lsrs	r2, r1
 80203a2:	07d6      	lsls	r6, r2, #31
 80203a4:	d547      	bpl.n	8020436 <__sflush_r+0xf6>
 80203a6:	2200      	movs	r2, #0
 80203a8:	6062      	str	r2, [r4, #4]
 80203aa:	04d9      	lsls	r1, r3, #19
 80203ac:	6922      	ldr	r2, [r4, #16]
 80203ae:	6022      	str	r2, [r4, #0]
 80203b0:	d504      	bpl.n	80203bc <__sflush_r+0x7c>
 80203b2:	1c42      	adds	r2, r0, #1
 80203b4:	d101      	bne.n	80203ba <__sflush_r+0x7a>
 80203b6:	682b      	ldr	r3, [r5, #0]
 80203b8:	b903      	cbnz	r3, 80203bc <__sflush_r+0x7c>
 80203ba:	6560      	str	r0, [r4, #84]	; 0x54
 80203bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80203be:	602f      	str	r7, [r5, #0]
 80203c0:	2900      	cmp	r1, #0
 80203c2:	d0ca      	beq.n	802035a <__sflush_r+0x1a>
 80203c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80203c8:	4299      	cmp	r1, r3
 80203ca:	d002      	beq.n	80203d2 <__sflush_r+0x92>
 80203cc:	4628      	mov	r0, r5
 80203ce:	f000 f9ad 	bl	802072c <_free_r>
 80203d2:	2000      	movs	r0, #0
 80203d4:	6360      	str	r0, [r4, #52]	; 0x34
 80203d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203da:	6a21      	ldr	r1, [r4, #32]
 80203dc:	2301      	movs	r3, #1
 80203de:	4628      	mov	r0, r5
 80203e0:	47b0      	blx	r6
 80203e2:	1c41      	adds	r1, r0, #1
 80203e4:	d1c6      	bne.n	8020374 <__sflush_r+0x34>
 80203e6:	682b      	ldr	r3, [r5, #0]
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	d0c3      	beq.n	8020374 <__sflush_r+0x34>
 80203ec:	2b1d      	cmp	r3, #29
 80203ee:	d001      	beq.n	80203f4 <__sflush_r+0xb4>
 80203f0:	2b16      	cmp	r3, #22
 80203f2:	d101      	bne.n	80203f8 <__sflush_r+0xb8>
 80203f4:	602f      	str	r7, [r5, #0]
 80203f6:	e7b0      	b.n	802035a <__sflush_r+0x1a>
 80203f8:	89a3      	ldrh	r3, [r4, #12]
 80203fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80203fe:	81a3      	strh	r3, [r4, #12]
 8020400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020404:	690f      	ldr	r7, [r1, #16]
 8020406:	2f00      	cmp	r7, #0
 8020408:	d0a7      	beq.n	802035a <__sflush_r+0x1a>
 802040a:	0793      	lsls	r3, r2, #30
 802040c:	680e      	ldr	r6, [r1, #0]
 802040e:	bf08      	it	eq
 8020410:	694b      	ldreq	r3, [r1, #20]
 8020412:	600f      	str	r7, [r1, #0]
 8020414:	bf18      	it	ne
 8020416:	2300      	movne	r3, #0
 8020418:	eba6 0807 	sub.w	r8, r6, r7
 802041c:	608b      	str	r3, [r1, #8]
 802041e:	f1b8 0f00 	cmp.w	r8, #0
 8020422:	dd9a      	ble.n	802035a <__sflush_r+0x1a>
 8020424:	4643      	mov	r3, r8
 8020426:	463a      	mov	r2, r7
 8020428:	6a21      	ldr	r1, [r4, #32]
 802042a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802042c:	4628      	mov	r0, r5
 802042e:	47b0      	blx	r6
 8020430:	2800      	cmp	r0, #0
 8020432:	dc07      	bgt.n	8020444 <__sflush_r+0x104>
 8020434:	89a3      	ldrh	r3, [r4, #12]
 8020436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802043a:	81a3      	strh	r3, [r4, #12]
 802043c:	f04f 30ff 	mov.w	r0, #4294967295
 8020440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020444:	4407      	add	r7, r0
 8020446:	eba8 0800 	sub.w	r8, r8, r0
 802044a:	e7e8      	b.n	802041e <__sflush_r+0xde>
 802044c:	20400001 	.word	0x20400001

08020450 <_fflush_r>:
 8020450:	b538      	push	{r3, r4, r5, lr}
 8020452:	690b      	ldr	r3, [r1, #16]
 8020454:	4605      	mov	r5, r0
 8020456:	460c      	mov	r4, r1
 8020458:	b1db      	cbz	r3, 8020492 <_fflush_r+0x42>
 802045a:	b118      	cbz	r0, 8020464 <_fflush_r+0x14>
 802045c:	6983      	ldr	r3, [r0, #24]
 802045e:	b90b      	cbnz	r3, 8020464 <_fflush_r+0x14>
 8020460:	f000 f860 	bl	8020524 <__sinit>
 8020464:	4b0c      	ldr	r3, [pc, #48]	; (8020498 <_fflush_r+0x48>)
 8020466:	429c      	cmp	r4, r3
 8020468:	d109      	bne.n	802047e <_fflush_r+0x2e>
 802046a:	686c      	ldr	r4, [r5, #4]
 802046c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020470:	b17b      	cbz	r3, 8020492 <_fflush_r+0x42>
 8020472:	4621      	mov	r1, r4
 8020474:	4628      	mov	r0, r5
 8020476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802047a:	f7ff bf61 	b.w	8020340 <__sflush_r>
 802047e:	4b07      	ldr	r3, [pc, #28]	; (802049c <_fflush_r+0x4c>)
 8020480:	429c      	cmp	r4, r3
 8020482:	d101      	bne.n	8020488 <_fflush_r+0x38>
 8020484:	68ac      	ldr	r4, [r5, #8]
 8020486:	e7f1      	b.n	802046c <_fflush_r+0x1c>
 8020488:	4b05      	ldr	r3, [pc, #20]	; (80204a0 <_fflush_r+0x50>)
 802048a:	429c      	cmp	r4, r3
 802048c:	bf08      	it	eq
 802048e:	68ec      	ldreq	r4, [r5, #12]
 8020490:	e7ec      	b.n	802046c <_fflush_r+0x1c>
 8020492:	2000      	movs	r0, #0
 8020494:	bd38      	pop	{r3, r4, r5, pc}
 8020496:	bf00      	nop
 8020498:	08025bb8 	.word	0x08025bb8
 802049c:	08025bd8 	.word	0x08025bd8
 80204a0:	08025b98 	.word	0x08025b98

080204a4 <_cleanup_r>:
 80204a4:	4901      	ldr	r1, [pc, #4]	; (80204ac <_cleanup_r+0x8>)
 80204a6:	f000 b8a9 	b.w	80205fc <_fwalk_reent>
 80204aa:	bf00      	nop
 80204ac:	08020451 	.word	0x08020451

080204b0 <std.isra.0>:
 80204b0:	2300      	movs	r3, #0
 80204b2:	b510      	push	{r4, lr}
 80204b4:	4604      	mov	r4, r0
 80204b6:	6003      	str	r3, [r0, #0]
 80204b8:	6043      	str	r3, [r0, #4]
 80204ba:	6083      	str	r3, [r0, #8]
 80204bc:	8181      	strh	r1, [r0, #12]
 80204be:	6643      	str	r3, [r0, #100]	; 0x64
 80204c0:	81c2      	strh	r2, [r0, #14]
 80204c2:	6103      	str	r3, [r0, #16]
 80204c4:	6143      	str	r3, [r0, #20]
 80204c6:	6183      	str	r3, [r0, #24]
 80204c8:	4619      	mov	r1, r3
 80204ca:	2208      	movs	r2, #8
 80204cc:	305c      	adds	r0, #92	; 0x5c
 80204ce:	f7ff fd7f 	bl	801ffd0 <memset>
 80204d2:	4b05      	ldr	r3, [pc, #20]	; (80204e8 <std.isra.0+0x38>)
 80204d4:	6263      	str	r3, [r4, #36]	; 0x24
 80204d6:	4b05      	ldr	r3, [pc, #20]	; (80204ec <std.isra.0+0x3c>)
 80204d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80204da:	4b05      	ldr	r3, [pc, #20]	; (80204f0 <std.isra.0+0x40>)
 80204dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80204de:	4b05      	ldr	r3, [pc, #20]	; (80204f4 <std.isra.0+0x44>)
 80204e0:	6224      	str	r4, [r4, #32]
 80204e2:	6323      	str	r3, [r4, #48]	; 0x30
 80204e4:	bd10      	pop	{r4, pc}
 80204e6:	bf00      	nop
 80204e8:	080208a5 	.word	0x080208a5
 80204ec:	080208c7 	.word	0x080208c7
 80204f0:	080208ff 	.word	0x080208ff
 80204f4:	08020923 	.word	0x08020923

080204f8 <__sfmoreglue>:
 80204f8:	b570      	push	{r4, r5, r6, lr}
 80204fa:	1e4a      	subs	r2, r1, #1
 80204fc:	2568      	movs	r5, #104	; 0x68
 80204fe:	4355      	muls	r5, r2
 8020500:	460e      	mov	r6, r1
 8020502:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020506:	f000 f95f 	bl	80207c8 <_malloc_r>
 802050a:	4604      	mov	r4, r0
 802050c:	b140      	cbz	r0, 8020520 <__sfmoreglue+0x28>
 802050e:	2100      	movs	r1, #0
 8020510:	e880 0042 	stmia.w	r0, {r1, r6}
 8020514:	300c      	adds	r0, #12
 8020516:	60a0      	str	r0, [r4, #8]
 8020518:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802051c:	f7ff fd58 	bl	801ffd0 <memset>
 8020520:	4620      	mov	r0, r4
 8020522:	bd70      	pop	{r4, r5, r6, pc}

08020524 <__sinit>:
 8020524:	6983      	ldr	r3, [r0, #24]
 8020526:	b510      	push	{r4, lr}
 8020528:	4604      	mov	r4, r0
 802052a:	bb33      	cbnz	r3, 802057a <__sinit+0x56>
 802052c:	6483      	str	r3, [r0, #72]	; 0x48
 802052e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8020530:	6503      	str	r3, [r0, #80]	; 0x50
 8020532:	4b12      	ldr	r3, [pc, #72]	; (802057c <__sinit+0x58>)
 8020534:	4a12      	ldr	r2, [pc, #72]	; (8020580 <__sinit+0x5c>)
 8020536:	681b      	ldr	r3, [r3, #0]
 8020538:	6282      	str	r2, [r0, #40]	; 0x28
 802053a:	4298      	cmp	r0, r3
 802053c:	bf04      	itt	eq
 802053e:	2301      	moveq	r3, #1
 8020540:	6183      	streq	r3, [r0, #24]
 8020542:	f000 f81f 	bl	8020584 <__sfp>
 8020546:	6060      	str	r0, [r4, #4]
 8020548:	4620      	mov	r0, r4
 802054a:	f000 f81b 	bl	8020584 <__sfp>
 802054e:	60a0      	str	r0, [r4, #8]
 8020550:	4620      	mov	r0, r4
 8020552:	f000 f817 	bl	8020584 <__sfp>
 8020556:	2200      	movs	r2, #0
 8020558:	60e0      	str	r0, [r4, #12]
 802055a:	2104      	movs	r1, #4
 802055c:	6860      	ldr	r0, [r4, #4]
 802055e:	f7ff ffa7 	bl	80204b0 <std.isra.0>
 8020562:	2201      	movs	r2, #1
 8020564:	2109      	movs	r1, #9
 8020566:	68a0      	ldr	r0, [r4, #8]
 8020568:	f7ff ffa2 	bl	80204b0 <std.isra.0>
 802056c:	2202      	movs	r2, #2
 802056e:	2112      	movs	r1, #18
 8020570:	68e0      	ldr	r0, [r4, #12]
 8020572:	f7ff ff9d 	bl	80204b0 <std.isra.0>
 8020576:	2301      	movs	r3, #1
 8020578:	61a3      	str	r3, [r4, #24]
 802057a:	bd10      	pop	{r4, pc}
 802057c:	08025b6c 	.word	0x08025b6c
 8020580:	080204a5 	.word	0x080204a5

08020584 <__sfp>:
 8020584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020586:	4b1c      	ldr	r3, [pc, #112]	; (80205f8 <__sfp+0x74>)
 8020588:	681e      	ldr	r6, [r3, #0]
 802058a:	69b3      	ldr	r3, [r6, #24]
 802058c:	4607      	mov	r7, r0
 802058e:	b913      	cbnz	r3, 8020596 <__sfp+0x12>
 8020590:	4630      	mov	r0, r6
 8020592:	f7ff ffc7 	bl	8020524 <__sinit>
 8020596:	3648      	adds	r6, #72	; 0x48
 8020598:	68b4      	ldr	r4, [r6, #8]
 802059a:	6873      	ldr	r3, [r6, #4]
 802059c:	3b01      	subs	r3, #1
 802059e:	d503      	bpl.n	80205a8 <__sfp+0x24>
 80205a0:	6833      	ldr	r3, [r6, #0]
 80205a2:	b133      	cbz	r3, 80205b2 <__sfp+0x2e>
 80205a4:	6836      	ldr	r6, [r6, #0]
 80205a6:	e7f7      	b.n	8020598 <__sfp+0x14>
 80205a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80205ac:	b16d      	cbz	r5, 80205ca <__sfp+0x46>
 80205ae:	3468      	adds	r4, #104	; 0x68
 80205b0:	e7f4      	b.n	802059c <__sfp+0x18>
 80205b2:	2104      	movs	r1, #4
 80205b4:	4638      	mov	r0, r7
 80205b6:	f7ff ff9f 	bl	80204f8 <__sfmoreglue>
 80205ba:	6030      	str	r0, [r6, #0]
 80205bc:	2800      	cmp	r0, #0
 80205be:	d1f1      	bne.n	80205a4 <__sfp+0x20>
 80205c0:	230c      	movs	r3, #12
 80205c2:	603b      	str	r3, [r7, #0]
 80205c4:	4604      	mov	r4, r0
 80205c6:	4620      	mov	r0, r4
 80205c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80205ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80205ce:	81e3      	strh	r3, [r4, #14]
 80205d0:	2301      	movs	r3, #1
 80205d2:	81a3      	strh	r3, [r4, #12]
 80205d4:	6665      	str	r5, [r4, #100]	; 0x64
 80205d6:	6025      	str	r5, [r4, #0]
 80205d8:	60a5      	str	r5, [r4, #8]
 80205da:	6065      	str	r5, [r4, #4]
 80205dc:	6125      	str	r5, [r4, #16]
 80205de:	6165      	str	r5, [r4, #20]
 80205e0:	61a5      	str	r5, [r4, #24]
 80205e2:	2208      	movs	r2, #8
 80205e4:	4629      	mov	r1, r5
 80205e6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80205ea:	f7ff fcf1 	bl	801ffd0 <memset>
 80205ee:	6365      	str	r5, [r4, #52]	; 0x34
 80205f0:	63a5      	str	r5, [r4, #56]	; 0x38
 80205f2:	64a5      	str	r5, [r4, #72]	; 0x48
 80205f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80205f6:	e7e6      	b.n	80205c6 <__sfp+0x42>
 80205f8:	08025b6c 	.word	0x08025b6c

080205fc <_fwalk_reent>:
 80205fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020600:	4680      	mov	r8, r0
 8020602:	4689      	mov	r9, r1
 8020604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020608:	2600      	movs	r6, #0
 802060a:	b914      	cbnz	r4, 8020612 <_fwalk_reent+0x16>
 802060c:	4630      	mov	r0, r6
 802060e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020612:	68a5      	ldr	r5, [r4, #8]
 8020614:	6867      	ldr	r7, [r4, #4]
 8020616:	3f01      	subs	r7, #1
 8020618:	d501      	bpl.n	802061e <_fwalk_reent+0x22>
 802061a:	6824      	ldr	r4, [r4, #0]
 802061c:	e7f5      	b.n	802060a <_fwalk_reent+0xe>
 802061e:	89ab      	ldrh	r3, [r5, #12]
 8020620:	2b01      	cmp	r3, #1
 8020622:	d907      	bls.n	8020634 <_fwalk_reent+0x38>
 8020624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020628:	3301      	adds	r3, #1
 802062a:	d003      	beq.n	8020634 <_fwalk_reent+0x38>
 802062c:	4629      	mov	r1, r5
 802062e:	4640      	mov	r0, r8
 8020630:	47c8      	blx	r9
 8020632:	4306      	orrs	r6, r0
 8020634:	3568      	adds	r5, #104	; 0x68
 8020636:	e7ee      	b.n	8020616 <_fwalk_reent+0x1a>

08020638 <__locale_ctype_ptr_l>:
 8020638:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 802063c:	4770      	bx	lr

0802063e <__swhatbuf_r>:
 802063e:	b570      	push	{r4, r5, r6, lr}
 8020640:	460e      	mov	r6, r1
 8020642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020646:	2900      	cmp	r1, #0
 8020648:	b090      	sub	sp, #64	; 0x40
 802064a:	4614      	mov	r4, r2
 802064c:	461d      	mov	r5, r3
 802064e:	da07      	bge.n	8020660 <__swhatbuf_r+0x22>
 8020650:	2300      	movs	r3, #0
 8020652:	602b      	str	r3, [r5, #0]
 8020654:	89b3      	ldrh	r3, [r6, #12]
 8020656:	061a      	lsls	r2, r3, #24
 8020658:	d410      	bmi.n	802067c <__swhatbuf_r+0x3e>
 802065a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802065e:	e00e      	b.n	802067e <__swhatbuf_r+0x40>
 8020660:	aa01      	add	r2, sp, #4
 8020662:	f000 f991 	bl	8020988 <_fstat_r>
 8020666:	2800      	cmp	r0, #0
 8020668:	dbf2      	blt.n	8020650 <__swhatbuf_r+0x12>
 802066a:	9a02      	ldr	r2, [sp, #8]
 802066c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020670:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020674:	425a      	negs	r2, r3
 8020676:	415a      	adcs	r2, r3
 8020678:	602a      	str	r2, [r5, #0]
 802067a:	e7ee      	b.n	802065a <__swhatbuf_r+0x1c>
 802067c:	2340      	movs	r3, #64	; 0x40
 802067e:	2000      	movs	r0, #0
 8020680:	6023      	str	r3, [r4, #0]
 8020682:	b010      	add	sp, #64	; 0x40
 8020684:	bd70      	pop	{r4, r5, r6, pc}
	...

08020688 <__smakebuf_r>:
 8020688:	898b      	ldrh	r3, [r1, #12]
 802068a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802068c:	079d      	lsls	r5, r3, #30
 802068e:	4606      	mov	r6, r0
 8020690:	460c      	mov	r4, r1
 8020692:	d507      	bpl.n	80206a4 <__smakebuf_r+0x1c>
 8020694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020698:	6023      	str	r3, [r4, #0]
 802069a:	6123      	str	r3, [r4, #16]
 802069c:	2301      	movs	r3, #1
 802069e:	6163      	str	r3, [r4, #20]
 80206a0:	b002      	add	sp, #8
 80206a2:	bd70      	pop	{r4, r5, r6, pc}
 80206a4:	ab01      	add	r3, sp, #4
 80206a6:	466a      	mov	r2, sp
 80206a8:	f7ff ffc9 	bl	802063e <__swhatbuf_r>
 80206ac:	9900      	ldr	r1, [sp, #0]
 80206ae:	4605      	mov	r5, r0
 80206b0:	4630      	mov	r0, r6
 80206b2:	f000 f889 	bl	80207c8 <_malloc_r>
 80206b6:	b948      	cbnz	r0, 80206cc <__smakebuf_r+0x44>
 80206b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80206bc:	059a      	lsls	r2, r3, #22
 80206be:	d4ef      	bmi.n	80206a0 <__smakebuf_r+0x18>
 80206c0:	f023 0303 	bic.w	r3, r3, #3
 80206c4:	f043 0302 	orr.w	r3, r3, #2
 80206c8:	81a3      	strh	r3, [r4, #12]
 80206ca:	e7e3      	b.n	8020694 <__smakebuf_r+0xc>
 80206cc:	4b0d      	ldr	r3, [pc, #52]	; (8020704 <__smakebuf_r+0x7c>)
 80206ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80206d0:	89a3      	ldrh	r3, [r4, #12]
 80206d2:	6020      	str	r0, [r4, #0]
 80206d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80206d8:	81a3      	strh	r3, [r4, #12]
 80206da:	9b00      	ldr	r3, [sp, #0]
 80206dc:	6163      	str	r3, [r4, #20]
 80206de:	9b01      	ldr	r3, [sp, #4]
 80206e0:	6120      	str	r0, [r4, #16]
 80206e2:	b15b      	cbz	r3, 80206fc <__smakebuf_r+0x74>
 80206e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80206e8:	4630      	mov	r0, r6
 80206ea:	f000 f95f 	bl	80209ac <_isatty_r>
 80206ee:	b128      	cbz	r0, 80206fc <__smakebuf_r+0x74>
 80206f0:	89a3      	ldrh	r3, [r4, #12]
 80206f2:	f023 0303 	bic.w	r3, r3, #3
 80206f6:	f043 0301 	orr.w	r3, r3, #1
 80206fa:	81a3      	strh	r3, [r4, #12]
 80206fc:	89a3      	ldrh	r3, [r4, #12]
 80206fe:	431d      	orrs	r5, r3
 8020700:	81a5      	strh	r5, [r4, #12]
 8020702:	e7cd      	b.n	80206a0 <__smakebuf_r+0x18>
 8020704:	080204a5 	.word	0x080204a5

08020708 <__ascii_mbtowc>:
 8020708:	b082      	sub	sp, #8
 802070a:	b901      	cbnz	r1, 802070e <__ascii_mbtowc+0x6>
 802070c:	a901      	add	r1, sp, #4
 802070e:	b142      	cbz	r2, 8020722 <__ascii_mbtowc+0x1a>
 8020710:	b14b      	cbz	r3, 8020726 <__ascii_mbtowc+0x1e>
 8020712:	7813      	ldrb	r3, [r2, #0]
 8020714:	600b      	str	r3, [r1, #0]
 8020716:	7812      	ldrb	r2, [r2, #0]
 8020718:	1c10      	adds	r0, r2, #0
 802071a:	bf18      	it	ne
 802071c:	2001      	movne	r0, #1
 802071e:	b002      	add	sp, #8
 8020720:	4770      	bx	lr
 8020722:	4610      	mov	r0, r2
 8020724:	e7fb      	b.n	802071e <__ascii_mbtowc+0x16>
 8020726:	f06f 0001 	mvn.w	r0, #1
 802072a:	e7f8      	b.n	802071e <__ascii_mbtowc+0x16>

0802072c <_free_r>:
 802072c:	b538      	push	{r3, r4, r5, lr}
 802072e:	4605      	mov	r5, r0
 8020730:	2900      	cmp	r1, #0
 8020732:	d045      	beq.n	80207c0 <_free_r+0x94>
 8020734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020738:	1f0c      	subs	r4, r1, #4
 802073a:	2b00      	cmp	r3, #0
 802073c:	bfb8      	it	lt
 802073e:	18e4      	addlt	r4, r4, r3
 8020740:	f000 f956 	bl	80209f0 <__malloc_lock>
 8020744:	4a1f      	ldr	r2, [pc, #124]	; (80207c4 <_free_r+0x98>)
 8020746:	6813      	ldr	r3, [r2, #0]
 8020748:	4610      	mov	r0, r2
 802074a:	b933      	cbnz	r3, 802075a <_free_r+0x2e>
 802074c:	6063      	str	r3, [r4, #4]
 802074e:	6014      	str	r4, [r2, #0]
 8020750:	4628      	mov	r0, r5
 8020752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020756:	f000 b94c 	b.w	80209f2 <__malloc_unlock>
 802075a:	42a3      	cmp	r3, r4
 802075c:	d90c      	bls.n	8020778 <_free_r+0x4c>
 802075e:	6821      	ldr	r1, [r4, #0]
 8020760:	1862      	adds	r2, r4, r1
 8020762:	4293      	cmp	r3, r2
 8020764:	bf04      	itt	eq
 8020766:	681a      	ldreq	r2, [r3, #0]
 8020768:	685b      	ldreq	r3, [r3, #4]
 802076a:	6063      	str	r3, [r4, #4]
 802076c:	bf04      	itt	eq
 802076e:	1852      	addeq	r2, r2, r1
 8020770:	6022      	streq	r2, [r4, #0]
 8020772:	6004      	str	r4, [r0, #0]
 8020774:	e7ec      	b.n	8020750 <_free_r+0x24>
 8020776:	4613      	mov	r3, r2
 8020778:	685a      	ldr	r2, [r3, #4]
 802077a:	b10a      	cbz	r2, 8020780 <_free_r+0x54>
 802077c:	42a2      	cmp	r2, r4
 802077e:	d9fa      	bls.n	8020776 <_free_r+0x4a>
 8020780:	6819      	ldr	r1, [r3, #0]
 8020782:	1858      	adds	r0, r3, r1
 8020784:	42a0      	cmp	r0, r4
 8020786:	d10b      	bne.n	80207a0 <_free_r+0x74>
 8020788:	6820      	ldr	r0, [r4, #0]
 802078a:	4401      	add	r1, r0
 802078c:	1858      	adds	r0, r3, r1
 802078e:	4282      	cmp	r2, r0
 8020790:	6019      	str	r1, [r3, #0]
 8020792:	d1dd      	bne.n	8020750 <_free_r+0x24>
 8020794:	6810      	ldr	r0, [r2, #0]
 8020796:	6852      	ldr	r2, [r2, #4]
 8020798:	605a      	str	r2, [r3, #4]
 802079a:	4401      	add	r1, r0
 802079c:	6019      	str	r1, [r3, #0]
 802079e:	e7d7      	b.n	8020750 <_free_r+0x24>
 80207a0:	d902      	bls.n	80207a8 <_free_r+0x7c>
 80207a2:	230c      	movs	r3, #12
 80207a4:	602b      	str	r3, [r5, #0]
 80207a6:	e7d3      	b.n	8020750 <_free_r+0x24>
 80207a8:	6820      	ldr	r0, [r4, #0]
 80207aa:	1821      	adds	r1, r4, r0
 80207ac:	428a      	cmp	r2, r1
 80207ae:	bf04      	itt	eq
 80207b0:	6811      	ldreq	r1, [r2, #0]
 80207b2:	6852      	ldreq	r2, [r2, #4]
 80207b4:	6062      	str	r2, [r4, #4]
 80207b6:	bf04      	itt	eq
 80207b8:	1809      	addeq	r1, r1, r0
 80207ba:	6021      	streq	r1, [r4, #0]
 80207bc:	605c      	str	r4, [r3, #4]
 80207be:	e7c7      	b.n	8020750 <_free_r+0x24>
 80207c0:	bd38      	pop	{r3, r4, r5, pc}
 80207c2:	bf00      	nop
 80207c4:	2000a19c 	.word	0x2000a19c

080207c8 <_malloc_r>:
 80207c8:	b570      	push	{r4, r5, r6, lr}
 80207ca:	1ccd      	adds	r5, r1, #3
 80207cc:	f025 0503 	bic.w	r5, r5, #3
 80207d0:	3508      	adds	r5, #8
 80207d2:	2d0c      	cmp	r5, #12
 80207d4:	bf38      	it	cc
 80207d6:	250c      	movcc	r5, #12
 80207d8:	2d00      	cmp	r5, #0
 80207da:	4606      	mov	r6, r0
 80207dc:	db01      	blt.n	80207e2 <_malloc_r+0x1a>
 80207de:	42a9      	cmp	r1, r5
 80207e0:	d903      	bls.n	80207ea <_malloc_r+0x22>
 80207e2:	230c      	movs	r3, #12
 80207e4:	6033      	str	r3, [r6, #0]
 80207e6:	2000      	movs	r0, #0
 80207e8:	bd70      	pop	{r4, r5, r6, pc}
 80207ea:	f000 f901 	bl	80209f0 <__malloc_lock>
 80207ee:	4a23      	ldr	r2, [pc, #140]	; (802087c <_malloc_r+0xb4>)
 80207f0:	6814      	ldr	r4, [r2, #0]
 80207f2:	4621      	mov	r1, r4
 80207f4:	b991      	cbnz	r1, 802081c <_malloc_r+0x54>
 80207f6:	4c22      	ldr	r4, [pc, #136]	; (8020880 <_malloc_r+0xb8>)
 80207f8:	6823      	ldr	r3, [r4, #0]
 80207fa:	b91b      	cbnz	r3, 8020804 <_malloc_r+0x3c>
 80207fc:	4630      	mov	r0, r6
 80207fe:	f000 f841 	bl	8020884 <_sbrk_r>
 8020802:	6020      	str	r0, [r4, #0]
 8020804:	4629      	mov	r1, r5
 8020806:	4630      	mov	r0, r6
 8020808:	f000 f83c 	bl	8020884 <_sbrk_r>
 802080c:	1c43      	adds	r3, r0, #1
 802080e:	d126      	bne.n	802085e <_malloc_r+0x96>
 8020810:	230c      	movs	r3, #12
 8020812:	6033      	str	r3, [r6, #0]
 8020814:	4630      	mov	r0, r6
 8020816:	f000 f8ec 	bl	80209f2 <__malloc_unlock>
 802081a:	e7e4      	b.n	80207e6 <_malloc_r+0x1e>
 802081c:	680b      	ldr	r3, [r1, #0]
 802081e:	1b5b      	subs	r3, r3, r5
 8020820:	d41a      	bmi.n	8020858 <_malloc_r+0x90>
 8020822:	2b0b      	cmp	r3, #11
 8020824:	d90f      	bls.n	8020846 <_malloc_r+0x7e>
 8020826:	600b      	str	r3, [r1, #0]
 8020828:	50cd      	str	r5, [r1, r3]
 802082a:	18cc      	adds	r4, r1, r3
 802082c:	4630      	mov	r0, r6
 802082e:	f000 f8e0 	bl	80209f2 <__malloc_unlock>
 8020832:	f104 000b 	add.w	r0, r4, #11
 8020836:	1d23      	adds	r3, r4, #4
 8020838:	f020 0007 	bic.w	r0, r0, #7
 802083c:	1ac3      	subs	r3, r0, r3
 802083e:	d01b      	beq.n	8020878 <_malloc_r+0xb0>
 8020840:	425a      	negs	r2, r3
 8020842:	50e2      	str	r2, [r4, r3]
 8020844:	bd70      	pop	{r4, r5, r6, pc}
 8020846:	428c      	cmp	r4, r1
 8020848:	bf0d      	iteet	eq
 802084a:	6863      	ldreq	r3, [r4, #4]
 802084c:	684b      	ldrne	r3, [r1, #4]
 802084e:	6063      	strne	r3, [r4, #4]
 8020850:	6013      	streq	r3, [r2, #0]
 8020852:	bf18      	it	ne
 8020854:	460c      	movne	r4, r1
 8020856:	e7e9      	b.n	802082c <_malloc_r+0x64>
 8020858:	460c      	mov	r4, r1
 802085a:	6849      	ldr	r1, [r1, #4]
 802085c:	e7ca      	b.n	80207f4 <_malloc_r+0x2c>
 802085e:	1cc4      	adds	r4, r0, #3
 8020860:	f024 0403 	bic.w	r4, r4, #3
 8020864:	42a0      	cmp	r0, r4
 8020866:	d005      	beq.n	8020874 <_malloc_r+0xac>
 8020868:	1a21      	subs	r1, r4, r0
 802086a:	4630      	mov	r0, r6
 802086c:	f000 f80a 	bl	8020884 <_sbrk_r>
 8020870:	3001      	adds	r0, #1
 8020872:	d0cd      	beq.n	8020810 <_malloc_r+0x48>
 8020874:	6025      	str	r5, [r4, #0]
 8020876:	e7d9      	b.n	802082c <_malloc_r+0x64>
 8020878:	bd70      	pop	{r4, r5, r6, pc}
 802087a:	bf00      	nop
 802087c:	2000a19c 	.word	0x2000a19c
 8020880:	2000a1a0 	.word	0x2000a1a0

08020884 <_sbrk_r>:
 8020884:	b538      	push	{r3, r4, r5, lr}
 8020886:	4c06      	ldr	r4, [pc, #24]	; (80208a0 <_sbrk_r+0x1c>)
 8020888:	2300      	movs	r3, #0
 802088a:	4605      	mov	r5, r0
 802088c:	4608      	mov	r0, r1
 802088e:	6023      	str	r3, [r4, #0]
 8020890:	f7fe fac2 	bl	801ee18 <_sbrk>
 8020894:	1c43      	adds	r3, r0, #1
 8020896:	d102      	bne.n	802089e <_sbrk_r+0x1a>
 8020898:	6823      	ldr	r3, [r4, #0]
 802089a:	b103      	cbz	r3, 802089e <_sbrk_r+0x1a>
 802089c:	602b      	str	r3, [r5, #0]
 802089e:	bd38      	pop	{r3, r4, r5, pc}
 80208a0:	2000eccc 	.word	0x2000eccc

080208a4 <__sread>:
 80208a4:	b510      	push	{r4, lr}
 80208a6:	460c      	mov	r4, r1
 80208a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208ac:	f000 f8a2 	bl	80209f4 <_read_r>
 80208b0:	2800      	cmp	r0, #0
 80208b2:	bfab      	itete	ge
 80208b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80208b6:	89a3      	ldrhlt	r3, [r4, #12]
 80208b8:	181b      	addge	r3, r3, r0
 80208ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80208be:	bfac      	ite	ge
 80208c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80208c2:	81a3      	strhlt	r3, [r4, #12]
 80208c4:	bd10      	pop	{r4, pc}

080208c6 <__swrite>:
 80208c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208ca:	461f      	mov	r7, r3
 80208cc:	898b      	ldrh	r3, [r1, #12]
 80208ce:	05db      	lsls	r3, r3, #23
 80208d0:	4605      	mov	r5, r0
 80208d2:	460c      	mov	r4, r1
 80208d4:	4616      	mov	r6, r2
 80208d6:	d505      	bpl.n	80208e4 <__swrite+0x1e>
 80208d8:	2302      	movs	r3, #2
 80208da:	2200      	movs	r2, #0
 80208dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208e0:	f000 f874 	bl	80209cc <_lseek_r>
 80208e4:	89a3      	ldrh	r3, [r4, #12]
 80208e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80208ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80208ee:	81a3      	strh	r3, [r4, #12]
 80208f0:	4632      	mov	r2, r6
 80208f2:	463b      	mov	r3, r7
 80208f4:	4628      	mov	r0, r5
 80208f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80208fa:	f000 b823 	b.w	8020944 <_write_r>

080208fe <__sseek>:
 80208fe:	b510      	push	{r4, lr}
 8020900:	460c      	mov	r4, r1
 8020902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020906:	f000 f861 	bl	80209cc <_lseek_r>
 802090a:	1c43      	adds	r3, r0, #1
 802090c:	89a3      	ldrh	r3, [r4, #12]
 802090e:	bf15      	itete	ne
 8020910:	6560      	strne	r0, [r4, #84]	; 0x54
 8020912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802091a:	81a3      	strheq	r3, [r4, #12]
 802091c:	bf18      	it	ne
 802091e:	81a3      	strhne	r3, [r4, #12]
 8020920:	bd10      	pop	{r4, pc}

08020922 <__sclose>:
 8020922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020926:	f000 b81f 	b.w	8020968 <_close_r>

0802092a <__ascii_wctomb>:
 802092a:	b149      	cbz	r1, 8020940 <__ascii_wctomb+0x16>
 802092c:	2aff      	cmp	r2, #255	; 0xff
 802092e:	bf85      	ittet	hi
 8020930:	238a      	movhi	r3, #138	; 0x8a
 8020932:	6003      	strhi	r3, [r0, #0]
 8020934:	700a      	strbls	r2, [r1, #0]
 8020936:	f04f 30ff 	movhi.w	r0, #4294967295
 802093a:	bf98      	it	ls
 802093c:	2001      	movls	r0, #1
 802093e:	4770      	bx	lr
 8020940:	4608      	mov	r0, r1
 8020942:	4770      	bx	lr

08020944 <_write_r>:
 8020944:	b538      	push	{r3, r4, r5, lr}
 8020946:	4c07      	ldr	r4, [pc, #28]	; (8020964 <_write_r+0x20>)
 8020948:	4605      	mov	r5, r0
 802094a:	4608      	mov	r0, r1
 802094c:	4611      	mov	r1, r2
 802094e:	2200      	movs	r2, #0
 8020950:	6022      	str	r2, [r4, #0]
 8020952:	461a      	mov	r2, r3
 8020954:	f7fe fa3b 	bl	801edce <_write>
 8020958:	1c43      	adds	r3, r0, #1
 802095a:	d102      	bne.n	8020962 <_write_r+0x1e>
 802095c:	6823      	ldr	r3, [r4, #0]
 802095e:	b103      	cbz	r3, 8020962 <_write_r+0x1e>
 8020960:	602b      	str	r3, [r5, #0]
 8020962:	bd38      	pop	{r3, r4, r5, pc}
 8020964:	2000eccc 	.word	0x2000eccc

08020968 <_close_r>:
 8020968:	b538      	push	{r3, r4, r5, lr}
 802096a:	4c06      	ldr	r4, [pc, #24]	; (8020984 <_close_r+0x1c>)
 802096c:	2300      	movs	r3, #0
 802096e:	4605      	mov	r5, r0
 8020970:	4608      	mov	r0, r1
 8020972:	6023      	str	r3, [r4, #0]
 8020974:	f7fe fa6e 	bl	801ee54 <_close>
 8020978:	1c43      	adds	r3, r0, #1
 802097a:	d102      	bne.n	8020982 <_close_r+0x1a>
 802097c:	6823      	ldr	r3, [r4, #0]
 802097e:	b103      	cbz	r3, 8020982 <_close_r+0x1a>
 8020980:	602b      	str	r3, [r5, #0]
 8020982:	bd38      	pop	{r3, r4, r5, pc}
 8020984:	2000eccc 	.word	0x2000eccc

08020988 <_fstat_r>:
 8020988:	b538      	push	{r3, r4, r5, lr}
 802098a:	4c07      	ldr	r4, [pc, #28]	; (80209a8 <_fstat_r+0x20>)
 802098c:	2300      	movs	r3, #0
 802098e:	4605      	mov	r5, r0
 8020990:	4608      	mov	r0, r1
 8020992:	4611      	mov	r1, r2
 8020994:	6023      	str	r3, [r4, #0]
 8020996:	f7fe fa60 	bl	801ee5a <_fstat>
 802099a:	1c43      	adds	r3, r0, #1
 802099c:	d102      	bne.n	80209a4 <_fstat_r+0x1c>
 802099e:	6823      	ldr	r3, [r4, #0]
 80209a0:	b103      	cbz	r3, 80209a4 <_fstat_r+0x1c>
 80209a2:	602b      	str	r3, [r5, #0]
 80209a4:	bd38      	pop	{r3, r4, r5, pc}
 80209a6:	bf00      	nop
 80209a8:	2000eccc 	.word	0x2000eccc

080209ac <_isatty_r>:
 80209ac:	b538      	push	{r3, r4, r5, lr}
 80209ae:	4c06      	ldr	r4, [pc, #24]	; (80209c8 <_isatty_r+0x1c>)
 80209b0:	2300      	movs	r3, #0
 80209b2:	4605      	mov	r5, r0
 80209b4:	4608      	mov	r0, r1
 80209b6:	6023      	str	r3, [r4, #0]
 80209b8:	f7fe fa54 	bl	801ee64 <_isatty>
 80209bc:	1c43      	adds	r3, r0, #1
 80209be:	d102      	bne.n	80209c6 <_isatty_r+0x1a>
 80209c0:	6823      	ldr	r3, [r4, #0]
 80209c2:	b103      	cbz	r3, 80209c6 <_isatty_r+0x1a>
 80209c4:	602b      	str	r3, [r5, #0]
 80209c6:	bd38      	pop	{r3, r4, r5, pc}
 80209c8:	2000eccc 	.word	0x2000eccc

080209cc <_lseek_r>:
 80209cc:	b538      	push	{r3, r4, r5, lr}
 80209ce:	4c07      	ldr	r4, [pc, #28]	; (80209ec <_lseek_r+0x20>)
 80209d0:	4605      	mov	r5, r0
 80209d2:	4608      	mov	r0, r1
 80209d4:	4611      	mov	r1, r2
 80209d6:	2200      	movs	r2, #0
 80209d8:	6022      	str	r2, [r4, #0]
 80209da:	461a      	mov	r2, r3
 80209dc:	f7fe fa44 	bl	801ee68 <_lseek>
 80209e0:	1c43      	adds	r3, r0, #1
 80209e2:	d102      	bne.n	80209ea <_lseek_r+0x1e>
 80209e4:	6823      	ldr	r3, [r4, #0]
 80209e6:	b103      	cbz	r3, 80209ea <_lseek_r+0x1e>
 80209e8:	602b      	str	r3, [r5, #0]
 80209ea:	bd38      	pop	{r3, r4, r5, pc}
 80209ec:	2000eccc 	.word	0x2000eccc

080209f0 <__malloc_lock>:
 80209f0:	4770      	bx	lr

080209f2 <__malloc_unlock>:
 80209f2:	4770      	bx	lr

080209f4 <_read_r>:
 80209f4:	b538      	push	{r3, r4, r5, lr}
 80209f6:	4c07      	ldr	r4, [pc, #28]	; (8020a14 <_read_r+0x20>)
 80209f8:	4605      	mov	r5, r0
 80209fa:	4608      	mov	r0, r1
 80209fc:	4611      	mov	r1, r2
 80209fe:	2200      	movs	r2, #0
 8020a00:	6022      	str	r2, [r4, #0]
 8020a02:	461a      	mov	r2, r3
 8020a04:	f7fe f9d4 	bl	801edb0 <_read>
 8020a08:	1c43      	adds	r3, r0, #1
 8020a0a:	d102      	bne.n	8020a12 <_read_r+0x1e>
 8020a0c:	6823      	ldr	r3, [r4, #0]
 8020a0e:	b103      	cbz	r3, 8020a12 <_read_r+0x1e>
 8020a10:	602b      	str	r3, [r5, #0]
 8020a12:	bd38      	pop	{r3, r4, r5, pc}
 8020a14:	2000eccc 	.word	0x2000eccc

08020a18 <_init>:
 8020a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a1a:	bf00      	nop
 8020a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020a1e:	bc08      	pop	{r3}
 8020a20:	469e      	mov	lr, r3
 8020a22:	4770      	bx	lr

08020a24 <_fini>:
 8020a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a26:	bf00      	nop
 8020a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020a2a:	bc08      	pop	{r3}
 8020a2c:	469e      	mov	lr, r3
 8020a2e:	4770      	bx	lr
