
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .eeprom_emul  00000000  08008000  08008000  00040210  2**0
                  CONTENTS
  2 .text         0000fcbc  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000050c8  0801fcbc  0801fcbc  0002fcbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08024d84  08024d84  00034d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08024d8c  08024d8c  00034d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08024d90  08024d90  00034d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000210  20000000  08024d94  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00040210  2**0
                  CONTENTS
  9 .bss          00011ec4  20000210  20000210  00040210  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200120d4  200120d4  00040210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00064e98  00000000  00000000  00040240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000af06  00000000  00000000  000a50d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c22d  00000000  00000000  000affde  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000022b8  00000000  00000000  000cc210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002750  00000000  00000000  000ce4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000186c9  00000000  00000000  000d0c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ab8a  00000000  00000000  000e92e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  000f3e6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b8  00000000  00000000  000f3ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000210 	.word	0x20000210
 801001c:	00000000 	.word	0x00000000
 8010020:	0801fca4 	.word	0x0801fca4

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000214 	.word	0x20000214
 801003c:	0801fca4 	.word	0x0801fca4

08010040 <strcmp>:
 8010040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010048:	2a01      	cmp	r2, #1
 801004a:	bf28      	it	cs
 801004c:	429a      	cmpcs	r2, r3
 801004e:	d0f7      	beq.n	8010040 <strcmp>
 8010050:	1ad0      	subs	r0, r2, r3
 8010052:	4770      	bx	lr

08010054 <strlen>:
 8010054:	4603      	mov	r3, r0
 8010056:	f813 2b01 	ldrb.w	r2, [r3], #1
 801005a:	2a00      	cmp	r2, #0
 801005c:	d1fb      	bne.n	8010056 <strlen+0x2>
 801005e:	1a18      	subs	r0, r3, r0
 8010060:	3801      	subs	r0, #1
 8010062:	4770      	bx	lr

08010064 <__aeabi_uldivmod>:
 8010064:	b953      	cbnz	r3, 801007c <__aeabi_uldivmod+0x18>
 8010066:	b94a      	cbnz	r2, 801007c <__aeabi_uldivmod+0x18>
 8010068:	2900      	cmp	r1, #0
 801006a:	bf08      	it	eq
 801006c:	2800      	cmpeq	r0, #0
 801006e:	bf1c      	itt	ne
 8010070:	f04f 31ff 	movne.w	r1, #4294967295
 8010074:	f04f 30ff 	movne.w	r0, #4294967295
 8010078:	f000 b97a 	b.w	8010370 <__aeabi_idiv0>
 801007c:	f1ad 0c08 	sub.w	ip, sp, #8
 8010080:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010084:	f000 f806 	bl	8010094 <__udivmoddi4>
 8010088:	f8dd e004 	ldr.w	lr, [sp, #4]
 801008c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010090:	b004      	add	sp, #16
 8010092:	4770      	bx	lr

08010094 <__udivmoddi4>:
 8010094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010098:	468c      	mov	ip, r1
 801009a:	460d      	mov	r5, r1
 801009c:	4604      	mov	r4, r0
 801009e:	9e08      	ldr	r6, [sp, #32]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d151      	bne.n	8010148 <__udivmoddi4+0xb4>
 80100a4:	428a      	cmp	r2, r1
 80100a6:	4617      	mov	r7, r2
 80100a8:	d96d      	bls.n	8010186 <__udivmoddi4+0xf2>
 80100aa:	fab2 fe82 	clz	lr, r2
 80100ae:	f1be 0f00 	cmp.w	lr, #0
 80100b2:	d00b      	beq.n	80100cc <__udivmoddi4+0x38>
 80100b4:	f1ce 0c20 	rsb	ip, lr, #32
 80100b8:	fa01 f50e 	lsl.w	r5, r1, lr
 80100bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80100c0:	fa02 f70e 	lsl.w	r7, r2, lr
 80100c4:	ea4c 0c05 	orr.w	ip, ip, r5
 80100c8:	fa00 f40e 	lsl.w	r4, r0, lr
 80100cc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80100d0:	0c25      	lsrs	r5, r4, #16
 80100d2:	fbbc f8fa 	udiv	r8, ip, sl
 80100d6:	fa1f f987 	uxth.w	r9, r7
 80100da:	fb0a cc18 	mls	ip, sl, r8, ip
 80100de:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80100e2:	fb08 f309 	mul.w	r3, r8, r9
 80100e6:	42ab      	cmp	r3, r5
 80100e8:	d90a      	bls.n	8010100 <__udivmoddi4+0x6c>
 80100ea:	19ed      	adds	r5, r5, r7
 80100ec:	f108 32ff 	add.w	r2, r8, #4294967295
 80100f0:	f080 8123 	bcs.w	801033a <__udivmoddi4+0x2a6>
 80100f4:	42ab      	cmp	r3, r5
 80100f6:	f240 8120 	bls.w	801033a <__udivmoddi4+0x2a6>
 80100fa:	f1a8 0802 	sub.w	r8, r8, #2
 80100fe:	443d      	add	r5, r7
 8010100:	1aed      	subs	r5, r5, r3
 8010102:	b2a4      	uxth	r4, r4
 8010104:	fbb5 f0fa 	udiv	r0, r5, sl
 8010108:	fb0a 5510 	mls	r5, sl, r0, r5
 801010c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010110:	fb00 f909 	mul.w	r9, r0, r9
 8010114:	45a1      	cmp	r9, r4
 8010116:	d909      	bls.n	801012c <__udivmoddi4+0x98>
 8010118:	19e4      	adds	r4, r4, r7
 801011a:	f100 33ff 	add.w	r3, r0, #4294967295
 801011e:	f080 810a 	bcs.w	8010336 <__udivmoddi4+0x2a2>
 8010122:	45a1      	cmp	r9, r4
 8010124:	f240 8107 	bls.w	8010336 <__udivmoddi4+0x2a2>
 8010128:	3802      	subs	r0, #2
 801012a:	443c      	add	r4, r7
 801012c:	eba4 0409 	sub.w	r4, r4, r9
 8010130:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010134:	2100      	movs	r1, #0
 8010136:	2e00      	cmp	r6, #0
 8010138:	d061      	beq.n	80101fe <__udivmoddi4+0x16a>
 801013a:	fa24 f40e 	lsr.w	r4, r4, lr
 801013e:	2300      	movs	r3, #0
 8010140:	6034      	str	r4, [r6, #0]
 8010142:	6073      	str	r3, [r6, #4]
 8010144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010148:	428b      	cmp	r3, r1
 801014a:	d907      	bls.n	801015c <__udivmoddi4+0xc8>
 801014c:	2e00      	cmp	r6, #0
 801014e:	d054      	beq.n	80101fa <__udivmoddi4+0x166>
 8010150:	2100      	movs	r1, #0
 8010152:	e886 0021 	stmia.w	r6, {r0, r5}
 8010156:	4608      	mov	r0, r1
 8010158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015c:	fab3 f183 	clz	r1, r3
 8010160:	2900      	cmp	r1, #0
 8010162:	f040 808e 	bne.w	8010282 <__udivmoddi4+0x1ee>
 8010166:	42ab      	cmp	r3, r5
 8010168:	d302      	bcc.n	8010170 <__udivmoddi4+0xdc>
 801016a:	4282      	cmp	r2, r0
 801016c:	f200 80fa 	bhi.w	8010364 <__udivmoddi4+0x2d0>
 8010170:	1a84      	subs	r4, r0, r2
 8010172:	eb65 0503 	sbc.w	r5, r5, r3
 8010176:	2001      	movs	r0, #1
 8010178:	46ac      	mov	ip, r5
 801017a:	2e00      	cmp	r6, #0
 801017c:	d03f      	beq.n	80101fe <__udivmoddi4+0x16a>
 801017e:	e886 1010 	stmia.w	r6, {r4, ip}
 8010182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010186:	b912      	cbnz	r2, 801018e <__udivmoddi4+0xfa>
 8010188:	2701      	movs	r7, #1
 801018a:	fbb7 f7f2 	udiv	r7, r7, r2
 801018e:	fab7 fe87 	clz	lr, r7
 8010192:	f1be 0f00 	cmp.w	lr, #0
 8010196:	d134      	bne.n	8010202 <__udivmoddi4+0x16e>
 8010198:	1beb      	subs	r3, r5, r7
 801019a:	0c3a      	lsrs	r2, r7, #16
 801019c:	fa1f fc87 	uxth.w	ip, r7
 80101a0:	2101      	movs	r1, #1
 80101a2:	fbb3 f8f2 	udiv	r8, r3, r2
 80101a6:	0c25      	lsrs	r5, r4, #16
 80101a8:	fb02 3318 	mls	r3, r2, r8, r3
 80101ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80101b0:	fb0c f308 	mul.w	r3, ip, r8
 80101b4:	42ab      	cmp	r3, r5
 80101b6:	d907      	bls.n	80101c8 <__udivmoddi4+0x134>
 80101b8:	19ed      	adds	r5, r5, r7
 80101ba:	f108 30ff 	add.w	r0, r8, #4294967295
 80101be:	d202      	bcs.n	80101c6 <__udivmoddi4+0x132>
 80101c0:	42ab      	cmp	r3, r5
 80101c2:	f200 80d1 	bhi.w	8010368 <__udivmoddi4+0x2d4>
 80101c6:	4680      	mov	r8, r0
 80101c8:	1aed      	subs	r5, r5, r3
 80101ca:	b2a3      	uxth	r3, r4
 80101cc:	fbb5 f0f2 	udiv	r0, r5, r2
 80101d0:	fb02 5510 	mls	r5, r2, r0, r5
 80101d4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80101d8:	fb0c fc00 	mul.w	ip, ip, r0
 80101dc:	45a4      	cmp	ip, r4
 80101de:	d907      	bls.n	80101f0 <__udivmoddi4+0x15c>
 80101e0:	19e4      	adds	r4, r4, r7
 80101e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80101e6:	d202      	bcs.n	80101ee <__udivmoddi4+0x15a>
 80101e8:	45a4      	cmp	ip, r4
 80101ea:	f200 80b8 	bhi.w	801035e <__udivmoddi4+0x2ca>
 80101ee:	4618      	mov	r0, r3
 80101f0:	eba4 040c 	sub.w	r4, r4, ip
 80101f4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80101f8:	e79d      	b.n	8010136 <__udivmoddi4+0xa2>
 80101fa:	4631      	mov	r1, r6
 80101fc:	4630      	mov	r0, r6
 80101fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010202:	f1ce 0420 	rsb	r4, lr, #32
 8010206:	fa05 f30e 	lsl.w	r3, r5, lr
 801020a:	fa07 f70e 	lsl.w	r7, r7, lr
 801020e:	fa20 f804 	lsr.w	r8, r0, r4
 8010212:	0c3a      	lsrs	r2, r7, #16
 8010214:	fa25 f404 	lsr.w	r4, r5, r4
 8010218:	ea48 0803 	orr.w	r8, r8, r3
 801021c:	fbb4 f1f2 	udiv	r1, r4, r2
 8010220:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8010224:	fb02 4411 	mls	r4, r2, r1, r4
 8010228:	fa1f fc87 	uxth.w	ip, r7
 801022c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8010230:	fb01 f30c 	mul.w	r3, r1, ip
 8010234:	42ab      	cmp	r3, r5
 8010236:	fa00 f40e 	lsl.w	r4, r0, lr
 801023a:	d909      	bls.n	8010250 <__udivmoddi4+0x1bc>
 801023c:	19ed      	adds	r5, r5, r7
 801023e:	f101 30ff 	add.w	r0, r1, #4294967295
 8010242:	f080 808a 	bcs.w	801035a <__udivmoddi4+0x2c6>
 8010246:	42ab      	cmp	r3, r5
 8010248:	f240 8087 	bls.w	801035a <__udivmoddi4+0x2c6>
 801024c:	3902      	subs	r1, #2
 801024e:	443d      	add	r5, r7
 8010250:	1aeb      	subs	r3, r5, r3
 8010252:	fa1f f588 	uxth.w	r5, r8
 8010256:	fbb3 f0f2 	udiv	r0, r3, r2
 801025a:	fb02 3310 	mls	r3, r2, r0, r3
 801025e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8010262:	fb00 f30c 	mul.w	r3, r0, ip
 8010266:	42ab      	cmp	r3, r5
 8010268:	d907      	bls.n	801027a <__udivmoddi4+0x1e6>
 801026a:	19ed      	adds	r5, r5, r7
 801026c:	f100 38ff 	add.w	r8, r0, #4294967295
 8010270:	d26f      	bcs.n	8010352 <__udivmoddi4+0x2be>
 8010272:	42ab      	cmp	r3, r5
 8010274:	d96d      	bls.n	8010352 <__udivmoddi4+0x2be>
 8010276:	3802      	subs	r0, #2
 8010278:	443d      	add	r5, r7
 801027a:	1aeb      	subs	r3, r5, r3
 801027c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8010280:	e78f      	b.n	80101a2 <__udivmoddi4+0x10e>
 8010282:	f1c1 0720 	rsb	r7, r1, #32
 8010286:	fa22 f807 	lsr.w	r8, r2, r7
 801028a:	408b      	lsls	r3, r1
 801028c:	fa05 f401 	lsl.w	r4, r5, r1
 8010290:	ea48 0303 	orr.w	r3, r8, r3
 8010294:	fa20 fe07 	lsr.w	lr, r0, r7
 8010298:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 801029c:	40fd      	lsrs	r5, r7
 801029e:	ea4e 0e04 	orr.w	lr, lr, r4
 80102a2:	fbb5 f9fc 	udiv	r9, r5, ip
 80102a6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80102aa:	fb0c 5519 	mls	r5, ip, r9, r5
 80102ae:	fa1f f883 	uxth.w	r8, r3
 80102b2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80102b6:	fb09 f408 	mul.w	r4, r9, r8
 80102ba:	42ac      	cmp	r4, r5
 80102bc:	fa02 f201 	lsl.w	r2, r2, r1
 80102c0:	fa00 fa01 	lsl.w	sl, r0, r1
 80102c4:	d908      	bls.n	80102d8 <__udivmoddi4+0x244>
 80102c6:	18ed      	adds	r5, r5, r3
 80102c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80102cc:	d243      	bcs.n	8010356 <__udivmoddi4+0x2c2>
 80102ce:	42ac      	cmp	r4, r5
 80102d0:	d941      	bls.n	8010356 <__udivmoddi4+0x2c2>
 80102d2:	f1a9 0902 	sub.w	r9, r9, #2
 80102d6:	441d      	add	r5, r3
 80102d8:	1b2d      	subs	r5, r5, r4
 80102da:	fa1f fe8e 	uxth.w	lr, lr
 80102de:	fbb5 f0fc 	udiv	r0, r5, ip
 80102e2:	fb0c 5510 	mls	r5, ip, r0, r5
 80102e6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80102ea:	fb00 f808 	mul.w	r8, r0, r8
 80102ee:	45a0      	cmp	r8, r4
 80102f0:	d907      	bls.n	8010302 <__udivmoddi4+0x26e>
 80102f2:	18e4      	adds	r4, r4, r3
 80102f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80102f8:	d229      	bcs.n	801034e <__udivmoddi4+0x2ba>
 80102fa:	45a0      	cmp	r8, r4
 80102fc:	d927      	bls.n	801034e <__udivmoddi4+0x2ba>
 80102fe:	3802      	subs	r0, #2
 8010300:	441c      	add	r4, r3
 8010302:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010306:	eba4 0408 	sub.w	r4, r4, r8
 801030a:	fba0 8902 	umull	r8, r9, r0, r2
 801030e:	454c      	cmp	r4, r9
 8010310:	46c6      	mov	lr, r8
 8010312:	464d      	mov	r5, r9
 8010314:	d315      	bcc.n	8010342 <__udivmoddi4+0x2ae>
 8010316:	d012      	beq.n	801033e <__udivmoddi4+0x2aa>
 8010318:	b156      	cbz	r6, 8010330 <__udivmoddi4+0x29c>
 801031a:	ebba 030e 	subs.w	r3, sl, lr
 801031e:	eb64 0405 	sbc.w	r4, r4, r5
 8010322:	fa04 f707 	lsl.w	r7, r4, r7
 8010326:	40cb      	lsrs	r3, r1
 8010328:	431f      	orrs	r7, r3
 801032a:	40cc      	lsrs	r4, r1
 801032c:	6037      	str	r7, [r6, #0]
 801032e:	6074      	str	r4, [r6, #4]
 8010330:	2100      	movs	r1, #0
 8010332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010336:	4618      	mov	r0, r3
 8010338:	e6f8      	b.n	801012c <__udivmoddi4+0x98>
 801033a:	4690      	mov	r8, r2
 801033c:	e6e0      	b.n	8010100 <__udivmoddi4+0x6c>
 801033e:	45c2      	cmp	sl, r8
 8010340:	d2ea      	bcs.n	8010318 <__udivmoddi4+0x284>
 8010342:	ebb8 0e02 	subs.w	lr, r8, r2
 8010346:	eb69 0503 	sbc.w	r5, r9, r3
 801034a:	3801      	subs	r0, #1
 801034c:	e7e4      	b.n	8010318 <__udivmoddi4+0x284>
 801034e:	4628      	mov	r0, r5
 8010350:	e7d7      	b.n	8010302 <__udivmoddi4+0x26e>
 8010352:	4640      	mov	r0, r8
 8010354:	e791      	b.n	801027a <__udivmoddi4+0x1e6>
 8010356:	4681      	mov	r9, r0
 8010358:	e7be      	b.n	80102d8 <__udivmoddi4+0x244>
 801035a:	4601      	mov	r1, r0
 801035c:	e778      	b.n	8010250 <__udivmoddi4+0x1bc>
 801035e:	3802      	subs	r0, #2
 8010360:	443c      	add	r4, r7
 8010362:	e745      	b.n	80101f0 <__udivmoddi4+0x15c>
 8010364:	4608      	mov	r0, r1
 8010366:	e708      	b.n	801017a <__udivmoddi4+0xe6>
 8010368:	f1a8 0802 	sub.w	r8, r8, #2
 801036c:	443d      	add	r5, r7
 801036e:	e72b      	b.n	80101c8 <__udivmoddi4+0x134>

08010370 <__aeabi_idiv0>:
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop

08010374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010374:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010376:	4b0b      	ldr	r3, [pc, #44]	; (80103a4 <HAL_Init+0x30>)
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801037e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010386:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801038e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010390:	2003      	movs	r0, #3
 8010392:	f000 f82f 	bl	80103f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010396:	2000      	movs	r0, #0
 8010398:	f00e fc66 	bl	801ec68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801039c:	f00e fc42 	bl	801ec24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80103a0:	2000      	movs	r0, #0
 80103a2:	bd08      	pop	{r3, pc}
 80103a4:	40023c00 	.word	0x40023c00

080103a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80103a8:	4a03      	ldr	r2, [pc, #12]	; (80103b8 <HAL_IncTick+0x10>)
 80103aa:	6811      	ldr	r1, [r2, #0]
 80103ac:	4b03      	ldr	r3, [pc, #12]	; (80103bc <HAL_IncTick+0x14>)
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	440b      	add	r3, r1
 80103b2:	6013      	str	r3, [r2, #0]
 80103b4:	4770      	bx	lr
 80103b6:	bf00      	nop
 80103b8:	2000a1a8 	.word	0x2000a1a8
 80103bc:	20000000 	.word	0x20000000

080103c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80103c0:	4b01      	ldr	r3, [pc, #4]	; (80103c8 <HAL_GetTick+0x8>)
 80103c2:	6818      	ldr	r0, [r3, #0]
}
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	2000a1a8 	.word	0x2000a1a8

080103cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80103cc:	b538      	push	{r3, r4, r5, lr}
 80103ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80103d0:	f7ff fff6 	bl	80103c0 <HAL_GetTick>
 80103d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80103d6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80103da:	d002      	beq.n	80103e2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80103dc:	4b04      	ldr	r3, [pc, #16]	; (80103f0 <HAL_Delay+0x24>)
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80103e2:	f7ff ffed 	bl	80103c0 <HAL_GetTick>
 80103e6:	1b40      	subs	r0, r0, r5
 80103e8:	4284      	cmp	r4, r0
 80103ea:	d8fa      	bhi.n	80103e2 <HAL_Delay+0x16>
  {
  }
}
 80103ec:	bd38      	pop	{r3, r4, r5, pc}
 80103ee:	bf00      	nop
 80103f0:	20000000 	.word	0x20000000

080103f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80103f4:	4a07      	ldr	r2, [pc, #28]	; (8010414 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80103f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80103f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80103fc:	041b      	lsls	r3, r3, #16
 80103fe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8010400:	0200      	lsls	r0, r0, #8
 8010402:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010406:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8010408:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 801040c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8010410:	60d0      	str	r0, [r2, #12]
 8010412:	4770      	bx	lr
 8010414:	e000ed00 	.word	0xe000ed00

08010418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010418:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801041a:	4b16      	ldr	r3, [pc, #88]	; (8010474 <HAL_NVIC_SetPriority+0x5c>)
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010422:	f1c3 0407 	rsb	r4, r3, #7
 8010426:	2c04      	cmp	r4, #4
 8010428:	bf28      	it	cs
 801042a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801042c:	1d1d      	adds	r5, r3, #4
 801042e:	2d06      	cmp	r5, #6
 8010430:	d917      	bls.n	8010462 <HAL_NVIC_SetPriority+0x4a>
 8010432:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010434:	2501      	movs	r5, #1
 8010436:	fa05 f404 	lsl.w	r4, r5, r4
 801043a:	3c01      	subs	r4, #1
 801043c:	4021      	ands	r1, r4
 801043e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010440:	fa05 f303 	lsl.w	r3, r5, r3
 8010444:	3b01      	subs	r3, #1
 8010446:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010448:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 801044a:	2800      	cmp	r0, #0
 801044c:	db0b      	blt.n	8010466 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801044e:	0109      	lsls	r1, r1, #4
 8010450:	b2c9      	uxtb	r1, r1
 8010452:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8010456:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 801045a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 801045e:	bc30      	pop	{r4, r5}
 8010460:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010462:	2300      	movs	r3, #0
 8010464:	e7e6      	b.n	8010434 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010466:	f000 000f 	and.w	r0, r0, #15
 801046a:	0109      	lsls	r1, r1, #4
 801046c:	b2c9      	uxtb	r1, r1
 801046e:	4b02      	ldr	r3, [pc, #8]	; (8010478 <HAL_NVIC_SetPriority+0x60>)
 8010470:	5419      	strb	r1, [r3, r0]
 8010472:	e7f4      	b.n	801045e <HAL_NVIC_SetPriority+0x46>
 8010474:	e000ed00 	.word	0xe000ed00
 8010478:	e000ed14 	.word	0xe000ed14

0801047c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801047c:	0942      	lsrs	r2, r0, #5
 801047e:	f000 001f 	and.w	r0, r0, #31
 8010482:	2301      	movs	r3, #1
 8010484:	fa03 f000 	lsl.w	r0, r3, r0
 8010488:	4b01      	ldr	r3, [pc, #4]	; (8010490 <HAL_NVIC_EnableIRQ+0x14>)
 801048a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801048e:	4770      	bx	lr
 8010490:	e000e100 	.word	0xe000e100

08010494 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010494:	0943      	lsrs	r3, r0, #5
 8010496:	f000 001f 	and.w	r0, r0, #31
 801049a:	2201      	movs	r2, #1
 801049c:	fa02 f000 	lsl.w	r0, r2, r0
 80104a0:	3320      	adds	r3, #32
 80104a2:	4a02      	ldr	r2, [pc, #8]	; (80104ac <HAL_NVIC_DisableIRQ+0x18>)
 80104a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	e000e100 	.word	0xe000e100

080104b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80104b0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80104b2:	6805      	ldr	r5, [r0, #0]
 80104b4:	682c      	ldr	r4, [r5, #0]
 80104b6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80104ba:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80104bc:	6804      	ldr	r4, [r0, #0]
 80104be:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80104c0:	6883      	ldr	r3, [r0, #8]
 80104c2:	2b40      	cmp	r3, #64	; 0x40
 80104c4:	d005      	beq.n	80104d2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80104c6:	6803      	ldr	r3, [r0, #0]
 80104c8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	60da      	str	r2, [r3, #12]
  }
}
 80104ce:	bc30      	pop	{r4, r5}
 80104d0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80104d2:	6803      	ldr	r3, [r0, #0]
 80104d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80104d6:	6803      	ldr	r3, [r0, #0]
 80104d8:	60d9      	str	r1, [r3, #12]
 80104da:	e7f8      	b.n	80104ce <DMA_SetConfig+0x1e>

080104dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80104dc:	6802      	ldr	r2, [r0, #0]
 80104de:	b2d3      	uxtb	r3, r2
 80104e0:	3b10      	subs	r3, #16
 80104e2:	490b      	ldr	r1, [pc, #44]	; (8010510 <DMA_CalcBaseAndBitshift+0x34>)
 80104e4:	fba1 1303 	umull	r1, r3, r1, r3
 80104e8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80104ea:	490a      	ldr	r1, [pc, #40]	; (8010514 <DMA_CalcBaseAndBitshift+0x38>)
 80104ec:	5cc9      	ldrb	r1, [r1, r3]
 80104ee:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80104f0:	2b03      	cmp	r3, #3
 80104f2:	d806      	bhi.n	8010502 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80104f4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80104f8:	f022 0203 	bic.w	r2, r2, #3
 80104fc:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80104fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8010500:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010502:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8010506:	f022 0203 	bic.w	r2, r2, #3
 801050a:	3204      	adds	r2, #4
 801050c:	6582      	str	r2, [r0, #88]	; 0x58
 801050e:	e7f6      	b.n	80104fe <DMA_CalcBaseAndBitshift+0x22>
 8010510:	aaaaaaab 	.word	0xaaaaaaab
 8010514:	0801fd60 	.word	0x0801fd60

08010518 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010518:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801051a:	6982      	ldr	r2, [r0, #24]
 801051c:	b992      	cbnz	r2, 8010544 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 801051e:	2b01      	cmp	r3, #1
 8010520:	d00a      	beq.n	8010538 <DMA_CheckFifoParam+0x20>
 8010522:	b11b      	cbz	r3, 801052c <DMA_CheckFifoParam+0x14>
 8010524:	2b02      	cmp	r3, #2
 8010526:	d001      	beq.n	801052c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8010528:	2000      	movs	r0, #0
 801052a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801052c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801052e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8010532:	d12c      	bne.n	801058e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8010534:	2000      	movs	r0, #0
 8010536:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010538:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801053a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801053e:	d028      	beq.n	8010592 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8010540:	2000      	movs	r0, #0
 8010542:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010544:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8010548:	d005      	beq.n	8010556 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801054a:	2b02      	cmp	r3, #2
 801054c:	d929      	bls.n	80105a2 <DMA_CheckFifoParam+0x8a>
 801054e:	2b03      	cmp	r3, #3
 8010550:	d015      	beq.n	801057e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8010552:	2000      	movs	r0, #0
 8010554:	4770      	bx	lr
    switch (tmp)
 8010556:	2b03      	cmp	r3, #3
 8010558:	d803      	bhi.n	8010562 <DMA_CheckFifoParam+0x4a>
 801055a:	e8df f003 	tbb	[pc, r3]
 801055e:	041c      	.short	0x041c
 8010560:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8010562:	2000      	movs	r0, #0
 8010564:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010566:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010568:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 801056c:	d115      	bne.n	801059a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 801056e:	2000      	movs	r0, #0
 8010570:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010572:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010578:	d011      	beq.n	801059e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 801057a:	2000      	movs	r0, #0
 801057c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801057e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010580:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8010584:	d001      	beq.n	801058a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8010586:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8010588:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 801058a:	2000      	movs	r0, #0
 801058c:	4770      	bx	lr
        status = HAL_ERROR;
 801058e:	2001      	movs	r0, #1
 8010590:	4770      	bx	lr
        status = HAL_ERROR;
 8010592:	2001      	movs	r0, #1
 8010594:	4770      	bx	lr
      status = HAL_ERROR;
 8010596:	2001      	movs	r0, #1
 8010598:	4770      	bx	lr
        status = HAL_ERROR;
 801059a:	2001      	movs	r0, #1
 801059c:	4770      	bx	lr
        status = HAL_ERROR;
 801059e:	2001      	movs	r0, #1
 80105a0:	4770      	bx	lr
      status = HAL_ERROR;
 80105a2:	2001      	movs	r0, #1
 80105a4:	4770      	bx	lr
	...

080105a8 <HAL_DMA_Init>:
{
 80105a8:	b570      	push	{r4, r5, r6, lr}
 80105aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80105ac:	f7ff ff08 	bl	80103c0 <HAL_GetTick>
  if(hdma == NULL)
 80105b0:	2c00      	cmp	r4, #0
 80105b2:	d05d      	beq.n	8010670 <HAL_DMA_Init+0xc8>
 80105b4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80105b6:	2300      	movs	r3, #0
 80105b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80105bc:	2302      	movs	r3, #2
 80105be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80105c2:	6822      	ldr	r2, [r4, #0]
 80105c4:	6813      	ldr	r3, [r2, #0]
 80105c6:	f023 0301 	bic.w	r3, r3, #1
 80105ca:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80105cc:	6823      	ldr	r3, [r4, #0]
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	f012 0f01 	tst.w	r2, #1
 80105d4:	d00a      	beq.n	80105ec <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80105d6:	f7ff fef3 	bl	80103c0 <HAL_GetTick>
 80105da:	1b40      	subs	r0, r0, r5
 80105dc:	2805      	cmp	r0, #5
 80105de:	d9f5      	bls.n	80105cc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80105e0:	2320      	movs	r3, #32
 80105e2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80105e4:	2003      	movs	r0, #3
 80105e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80105ea:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80105ec:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80105ee:	4921      	ldr	r1, [pc, #132]	; (8010674 <HAL_DMA_Init+0xcc>)
 80105f0:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80105f2:	6862      	ldr	r2, [r4, #4]
 80105f4:	68a0      	ldr	r0, [r4, #8]
 80105f6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80105f8:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80105fa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80105fc:	6920      	ldr	r0, [r4, #16]
 80105fe:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010600:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010602:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010604:	69a0      	ldr	r0, [r4, #24]
 8010606:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8010608:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801060a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 801060c:	6a20      	ldr	r0, [r4, #32]
 801060e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010610:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010612:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010614:	2904      	cmp	r1, #4
 8010616:	d016      	beq.n	8010646 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8010618:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 801061a:	6826      	ldr	r6, [r4, #0]
 801061c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801061e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8010622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010624:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010626:	2b04      	cmp	r3, #4
 8010628:	d012      	beq.n	8010650 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 801062a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801062c:	4620      	mov	r0, r4
 801062e:	f7ff ff55 	bl	80104dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010632:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010634:	233f      	movs	r3, #63	; 0x3f
 8010636:	4093      	lsls	r3, r2
 8010638:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801063a:	2000      	movs	r0, #0
 801063c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 801063e:	2301      	movs	r3, #1
 8010640:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8010644:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010646:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010648:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801064a:	4301      	orrs	r1, r0
 801064c:	430a      	orrs	r2, r1
 801064e:	e7e3      	b.n	8010618 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 8010650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010652:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010656:	2b00      	cmp	r3, #0
 8010658:	d0e7      	beq.n	801062a <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801065a:	4620      	mov	r0, r4
 801065c:	f7ff ff5c 	bl	8010518 <DMA_CheckFifoParam>
 8010660:	2800      	cmp	r0, #0
 8010662:	d0e2      	beq.n	801062a <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010664:	2340      	movs	r3, #64	; 0x40
 8010666:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8010668:	2001      	movs	r0, #1
 801066a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 801066e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010670:	2001      	movs	r0, #1
}
 8010672:	bd70      	pop	{r4, r5, r6, pc}
 8010674:	f010803f 	.word	0xf010803f

08010678 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8010678:	b340      	cbz	r0, 80106cc <HAL_DMA_DeInit+0x54>
{
 801067a:	b538      	push	{r3, r4, r5, lr}
 801067c:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 801067e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8010682:	b2db      	uxtb	r3, r3
 8010684:	2b02      	cmp	r3, #2
 8010686:	d101      	bne.n	801068c <HAL_DMA_DeInit+0x14>
    return HAL_BUSY;
 8010688:	2002      	movs	r0, #2
}
 801068a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_DMA_DISABLE(hdma);
 801068c:	6802      	ldr	r2, [r0, #0]
 801068e:	6813      	ldr	r3, [r2, #0]
 8010690:	f023 0301 	bic.w	r3, r3, #1
 8010694:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 8010696:	6803      	ldr	r3, [r0, #0]
 8010698:	2500      	movs	r5, #0
 801069a:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 801069c:	6803      	ldr	r3, [r0, #0]
 801069e:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80106a0:	6803      	ldr	r3, [r0, #0]
 80106a2:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80106a4:	6803      	ldr	r3, [r0, #0]
 80106a6:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80106a8:	6803      	ldr	r3, [r0, #0]
 80106aa:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80106ac:	6803      	ldr	r3, [r0, #0]
 80106ae:	2221      	movs	r2, #33	; 0x21
 80106b0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80106b2:	f7ff ff13 	bl	80104dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80106b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80106b8:	233f      	movs	r3, #63	; 0x3f
 80106ba:	4093      	lsls	r3, r2
 80106bc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80106be:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80106c0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80106c4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 80106c8:	4628      	mov	r0, r5
 80106ca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80106cc:	2001      	movs	r0, #1
 80106ce:	4770      	bx	lr

080106d0 <HAL_DMA_Start_IT>:
{
 80106d0:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80106d2:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80106d4:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80106d8:	2c01      	cmp	r4, #1
 80106da:	d031      	beq.n	8010740 <HAL_DMA_Start_IT+0x70>
 80106dc:	2401      	movs	r4, #1
 80106de:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80106e2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80106e6:	b2e4      	uxtb	r4, r4
 80106e8:	2c01      	cmp	r4, #1
 80106ea:	d004      	beq.n	80106f6 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80106ec:	2300      	movs	r3, #0
 80106ee:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80106f2:	2002      	movs	r0, #2
 80106f4:	bd38      	pop	{r3, r4, r5, pc}
 80106f6:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80106f8:	2002      	movs	r0, #2
 80106fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80106fe:	2000      	movs	r0, #0
 8010700:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010702:	4620      	mov	r0, r4
 8010704:	f7ff fed4 	bl	80104b0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010708:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801070a:	233f      	movs	r3, #63	; 0x3f
 801070c:	4093      	lsls	r3, r2
 801070e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010710:	6822      	ldr	r2, [r4, #0]
 8010712:	6813      	ldr	r3, [r2, #0]
 8010714:	f043 0316 	orr.w	r3, r3, #22
 8010718:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 801071a:	6822      	ldr	r2, [r4, #0]
 801071c:	6953      	ldr	r3, [r2, #20]
 801071e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010722:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8010724:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010726:	b123      	cbz	r3, 8010732 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8010728:	6822      	ldr	r2, [r4, #0]
 801072a:	6813      	ldr	r3, [r2, #0]
 801072c:	f043 0308 	orr.w	r3, r3, #8
 8010730:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8010732:	6822      	ldr	r2, [r4, #0]
 8010734:	6813      	ldr	r3, [r2, #0]
 8010736:	f043 0301 	orr.w	r3, r3, #1
 801073a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801073c:	2000      	movs	r0, #0
 801073e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 8010740:	2002      	movs	r0, #2
}
 8010742:	bd38      	pop	{r3, r4, r5, pc}

08010744 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010744:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8010748:	b2db      	uxtb	r3, r3
 801074a:	2b02      	cmp	r3, #2
 801074c:	d003      	beq.n	8010756 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801074e:	2380      	movs	r3, #128	; 0x80
 8010750:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8010752:	2001      	movs	r0, #1
 8010754:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8010756:	2305      	movs	r3, #5
 8010758:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 801075c:	6802      	ldr	r2, [r0, #0]
 801075e:	6813      	ldr	r3, [r2, #0]
 8010760:	f023 0301 	bic.w	r3, r3, #1
 8010764:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8010766:	2000      	movs	r0, #0
}
 8010768:	4770      	bx	lr
	...

0801076c <HAL_DMA_IRQHandler>:
{
 801076c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801076e:	b083      	sub	sp, #12
 8010770:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8010772:	2300      	movs	r3, #0
 8010774:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010776:	4b72      	ldr	r3, [pc, #456]	; (8010940 <HAL_DMA_IRQHandler+0x1d4>)
 8010778:	681d      	ldr	r5, [r3, #0]
 801077a:	4b72      	ldr	r3, [pc, #456]	; (8010944 <HAL_DMA_IRQHandler+0x1d8>)
 801077c:	fba3 3505 	umull	r3, r5, r3, r5
 8010780:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010782:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8010784:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010786:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8010788:	2308      	movs	r3, #8
 801078a:	4093      	lsls	r3, r2
 801078c:	421e      	tst	r6, r3
 801078e:	d010      	beq.n	80107b2 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010790:	6803      	ldr	r3, [r0, #0]
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	f012 0f04 	tst.w	r2, #4
 8010798:	d00b      	beq.n	80107b2 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	f022 0204 	bic.w	r2, r2, #4
 80107a0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80107a2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80107a4:	2308      	movs	r3, #8
 80107a6:	4093      	lsls	r3, r2
 80107a8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80107aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80107ac:	f043 0301 	orr.w	r3, r3, #1
 80107b0:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80107b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80107b4:	2301      	movs	r3, #1
 80107b6:	4093      	lsls	r3, r2
 80107b8:	421e      	tst	r6, r3
 80107ba:	d009      	beq.n	80107d0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80107bc:	6822      	ldr	r2, [r4, #0]
 80107be:	6952      	ldr	r2, [r2, #20]
 80107c0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80107c4:	d004      	beq.n	80107d0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80107c6:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80107c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80107ca:	f043 0302 	orr.w	r3, r3, #2
 80107ce:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80107d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80107d2:	2304      	movs	r3, #4
 80107d4:	4093      	lsls	r3, r2
 80107d6:	421e      	tst	r6, r3
 80107d8:	d009      	beq.n	80107ee <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80107da:	6822      	ldr	r2, [r4, #0]
 80107dc:	6812      	ldr	r2, [r2, #0]
 80107de:	f012 0f02 	tst.w	r2, #2
 80107e2:	d004      	beq.n	80107ee <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80107e4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80107e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80107e8:	f043 0304 	orr.w	r3, r3, #4
 80107ec:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80107ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80107f0:	2310      	movs	r3, #16
 80107f2:	4093      	lsls	r3, r2
 80107f4:	421e      	tst	r6, r3
 80107f6:	d024      	beq.n	8010842 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80107f8:	6822      	ldr	r2, [r4, #0]
 80107fa:	6812      	ldr	r2, [r2, #0]
 80107fc:	f012 0f08 	tst.w	r2, #8
 8010800:	d01f      	beq.n	8010842 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010802:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010804:	6823      	ldr	r3, [r4, #0]
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 801080c:	d00d      	beq.n	801082a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8010814:	d104      	bne.n	8010820 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8010816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010818:	b19b      	cbz	r3, 8010842 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 801081a:	4620      	mov	r0, r4
 801081c:	4798      	blx	r3
 801081e:	e010      	b.n	8010842 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010820:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010822:	b173      	cbz	r3, 8010842 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8010824:	4620      	mov	r0, r4
 8010826:	4798      	blx	r3
 8010828:	e00b      	b.n	8010842 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8010830:	d103      	bne.n	801083a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	f022 0208 	bic.w	r2, r2, #8
 8010838:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 801083a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801083c:	b10b      	cbz	r3, 8010842 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 801083e:	4620      	mov	r0, r4
 8010840:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8010842:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010844:	2320      	movs	r3, #32
 8010846:	4093      	lsls	r3, r2
 8010848:	421e      	tst	r6, r3
 801084a:	d055      	beq.n	80108f8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801084c:	6822      	ldr	r2, [r4, #0]
 801084e:	6812      	ldr	r2, [r2, #0]
 8010850:	f012 0f10 	tst.w	r2, #16
 8010854:	d050      	beq.n	80108f8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010856:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010858:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801085c:	b2db      	uxtb	r3, r3
 801085e:	2b05      	cmp	r3, #5
 8010860:	d00e      	beq.n	8010880 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010862:	6823      	ldr	r3, [r4, #0]
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 801086a:	d033      	beq.n	80108d4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8010872:	d12a      	bne.n	80108ca <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8010874:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010876:	2b00      	cmp	r3, #0
 8010878:	d03e      	beq.n	80108f8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 801087a:	4620      	mov	r0, r4
 801087c:	4798      	blx	r3
 801087e:	e03b      	b.n	80108f8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010880:	6822      	ldr	r2, [r4, #0]
 8010882:	6813      	ldr	r3, [r2, #0]
 8010884:	f023 0316 	bic.w	r3, r3, #22
 8010888:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801088a:	6822      	ldr	r2, [r4, #0]
 801088c:	6953      	ldr	r3, [r2, #20]
 801088e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010892:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010896:	b1a3      	cbz	r3, 80108c2 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010898:	6822      	ldr	r2, [r4, #0]
 801089a:	6813      	ldr	r3, [r2, #0]
 801089c:	f023 0308 	bic.w	r3, r3, #8
 80108a0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80108a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80108a4:	233f      	movs	r3, #63	; 0x3f
 80108a6:	4093      	lsls	r3, r2
 80108a8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80108aa:	2300      	movs	r3, #0
 80108ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80108b0:	2301      	movs	r3, #1
 80108b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80108b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d03f      	beq.n	801093c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80108bc:	4620      	mov	r0, r4
 80108be:	4798      	blx	r3
 80108c0:	e03c      	b.n	801093c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80108c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1e7      	bne.n	8010898 <HAL_DMA_IRQHandler+0x12c>
 80108c8:	e7eb      	b.n	80108a2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80108ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80108cc:	b1a3      	cbz	r3, 80108f8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80108ce:	4620      	mov	r0, r4
 80108d0:	4798      	blx	r3
 80108d2:	e011      	b.n	80108f8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80108da:	d109      	bne.n	80108f0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	f022 0210 	bic.w	r2, r2, #16
 80108e2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80108e4:	2300      	movs	r3, #0
 80108e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80108ea:	2301      	movs	r3, #1
 80108ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80108f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80108f2:	b10b      	cbz	r3, 80108f8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80108f4:	4620      	mov	r0, r4
 80108f6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80108f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80108fa:	b1fb      	cbz	r3, 801093c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80108fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80108fe:	f013 0f01 	tst.w	r3, #1
 8010902:	d017      	beq.n	8010934 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8010904:	2305      	movs	r3, #5
 8010906:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 801090a:	6822      	ldr	r2, [r4, #0]
 801090c:	6813      	ldr	r3, [r2, #0]
 801090e:	f023 0301 	bic.w	r3, r3, #1
 8010912:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8010914:	9b01      	ldr	r3, [sp, #4]
 8010916:	3301      	adds	r3, #1
 8010918:	9301      	str	r3, [sp, #4]
 801091a:	429d      	cmp	r5, r3
 801091c:	d304      	bcc.n	8010928 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f013 0f01 	tst.w	r3, #1
 8010926:	d1f5      	bne.n	8010914 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8010928:	2300      	movs	r3, #0
 801092a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 801092e:	2301      	movs	r3, #1
 8010930:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8010934:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010936:	b10b      	cbz	r3, 801093c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8010938:	4620      	mov	r0, r4
 801093a:	4798      	blx	r3
}
 801093c:	b003      	add	sp, #12
 801093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010940:	2000003c 	.word	0x2000003c
 8010944:	1b4e81b5 	.word	0x1b4e81b5

08010948 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8010948:	7950      	ldrb	r0, [r2, #5]
 801094a:	7913      	ldrb	r3, [r2, #4]
 801094c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8010950:	4807      	ldr	r0, [pc, #28]	; (8010970 <ETH_MACAddressConfig+0x28>)
 8010952:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8010954:	78d0      	ldrb	r0, [r2, #3]
 8010956:	7893      	ldrb	r3, [r2, #2]
 8010958:	041b      	lsls	r3, r3, #16
 801095a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801095e:	7850      	ldrb	r0, [r2, #1]
 8010960:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8010964:	7812      	ldrb	r2, [r2, #0]
 8010966:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8010968:	4a02      	ldr	r2, [pc, #8]	; (8010974 <ETH_MACAddressConfig+0x2c>)
 801096a:	508b      	str	r3, [r1, r2]
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	40028040 	.word	0x40028040
 8010974:	40028044 	.word	0x40028044

08010978 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8010978:	6801      	ldr	r1, [r0, #0]
 801097a:	f241 0218 	movw	r2, #4120	; 0x1018
 801097e:	588b      	ldr	r3, [r1, r2]
 8010980:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010984:	508b      	str	r3, [r1, r2]
 8010986:	4770      	bx	lr

08010988 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8010988:	6801      	ldr	r1, [r0, #0]
 801098a:	f241 0218 	movw	r2, #4120	; 0x1018
 801098e:	588b      	ldr	r3, [r1, r2]
 8010990:	f043 0302 	orr.w	r3, r3, #2
 8010994:	508b      	str	r3, [r1, r2]
 8010996:	4770      	bx	lr

08010998 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8010998:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 801099a:	4b08      	ldr	r3, [pc, #32]	; (80109bc <ETH_Delay+0x24>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	4a08      	ldr	r2, [pc, #32]	; (80109c0 <ETH_Delay+0x28>)
 80109a0:	fba2 2303 	umull	r2, r3, r2, r3
 80109a4:	0a5b      	lsrs	r3, r3, #9
 80109a6:	fb00 f003 	mul.w	r0, r0, r3
 80109aa:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80109ac:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80109ae:	9b01      	ldr	r3, [sp, #4]
 80109b0:	1e5a      	subs	r2, r3, #1
 80109b2:	9201      	str	r2, [sp, #4]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1f9      	bne.n	80109ac <ETH_Delay+0x14>
}
 80109b8:	b002      	add	sp, #8
 80109ba:	4770      	bx	lr
 80109bc:	2000003c 	.word	0x2000003c
 80109c0:	10624dd3 	.word	0x10624dd3

080109c4 <ETH_MACTransmissionEnable>:
{ 
 80109c4:	b510      	push	{r4, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80109ca:	2300      	movs	r3, #0
 80109cc:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80109ce:	6802      	ldr	r2, [r0, #0]
 80109d0:	6813      	ldr	r3, [r2, #0]
 80109d2:	f043 0308 	orr.w	r3, r3, #8
 80109d6:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80109d8:	6803      	ldr	r3, [r0, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80109de:	2001      	movs	r0, #1
 80109e0:	f7ff ffda 	bl	8010998 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80109e4:	6823      	ldr	r3, [r4, #0]
 80109e6:	9a01      	ldr	r2, [sp, #4]
 80109e8:	601a      	str	r2, [r3, #0]
}
 80109ea:	b002      	add	sp, #8
 80109ec:	bd10      	pop	{r4, pc}

080109ee <ETH_MACReceptionEnable>:
{ 
 80109ee:	b510      	push	{r4, lr}
 80109f0:	b082      	sub	sp, #8
 80109f2:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80109f4:	2300      	movs	r3, #0
 80109f6:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80109f8:	6802      	ldr	r2, [r0, #0]
 80109fa:	6813      	ldr	r3, [r2, #0]
 80109fc:	f043 0304 	orr.w	r3, r3, #4
 8010a00:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010a02:	6803      	ldr	r3, [r0, #0]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010a08:	2001      	movs	r0, #1
 8010a0a:	f7ff ffc5 	bl	8010998 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	9a01      	ldr	r2, [sp, #4]
 8010a12:	601a      	str	r2, [r3, #0]
}
 8010a14:	b002      	add	sp, #8
 8010a16:	bd10      	pop	{r4, pc}

08010a18 <ETH_FlushTransmitFIFO>:
{
 8010a18:	b530      	push	{r4, r5, lr}
 8010a1a:	b083      	sub	sp, #12
 8010a1c:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8010a22:	6802      	ldr	r2, [r0, #0]
 8010a24:	f241 0418 	movw	r4, #4120	; 0x1018
 8010a28:	5913      	ldr	r3, [r2, r4]
 8010a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a2e:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8010a30:	6803      	ldr	r3, [r0, #0]
 8010a32:	591b      	ldr	r3, [r3, r4]
 8010a34:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010a36:	2001      	movs	r0, #1
 8010a38:	f7ff ffae 	bl	8010998 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8010a3c:	682b      	ldr	r3, [r5, #0]
 8010a3e:	9a01      	ldr	r2, [sp, #4]
 8010a40:	511a      	str	r2, [r3, r4]
}
 8010a42:	b003      	add	sp, #12
 8010a44:	bd30      	pop	{r4, r5, pc}
	...

08010a48 <ETH_MACDMAConfig>:
{
 8010a48:	b570      	push	{r4, r5, r6, lr}
 8010a4a:	b09e      	sub	sp, #120	; 0x78
 8010a4c:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8010a4e:	b129      	cbz	r1, 8010a5c <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8010a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a54:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8010a56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010a5a:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010a5c:	69e3      	ldr	r3, [r4, #28]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d16a      	bne.n	8010b38 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8010a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a66:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8010a68:	6821      	ldr	r1, [r4, #0]
 8010a6a:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8010a6c:	4a39      	ldr	r2, [pc, #228]	; (8010b54 <ETH_MACDMAConfig+0x10c>)
 8010a6e:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8010a70:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8010a72:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8010a74:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8010a76:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8010a78:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8010a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8010a7e:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8010a80:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a86:	2001      	movs	r0, #1
 8010a88:	f7ff fca0 	bl	80103cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8010a8c:	6823      	ldr	r3, [r4, #0]
 8010a8e:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8010a90:	6823      	ldr	r3, [r4, #0]
 8010a92:	2240      	movs	r2, #64	; 0x40
 8010a94:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8010a96:	6823      	ldr	r3, [r4, #0]
 8010a98:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010a9a:	2001      	movs	r0, #1
 8010a9c:	f7ff fc96 	bl	80103cc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8010aa4:	6823      	ldr	r3, [r4, #0]
 8010aa6:	2500      	movs	r5, #0
 8010aa8:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010aae:	6822      	ldr	r2, [r4, #0]
 8010ab0:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8010ab2:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8010ab6:	041b      	lsls	r3, r3, #16
 8010ab8:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8010aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8010abe:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010ac0:	6823      	ldr	r3, [r4, #0]
 8010ac2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010ac4:	2001      	movs	r0, #1
 8010ac6:	f7ff fc81 	bl	80103cc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8010aca:	6823      	ldr	r3, [r4, #0]
 8010acc:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8010ace:	6823      	ldr	r3, [r4, #0]
 8010ad0:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8010ad6:	2001      	movs	r0, #1
 8010ad8:	f7ff fc78 	bl	80103cc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8010adc:	6823      	ldr	r3, [r4, #0]
 8010ade:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8010ae0:	6822      	ldr	r2, [r4, #0]
 8010ae2:	f241 0518 	movw	r5, #4120	; 0x1018
 8010ae6:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8010ae8:	4b1b      	ldr	r3, [pc, #108]	; (8010b58 <ETH_MACDMAConfig+0x110>)
 8010aea:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8010aec:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8010af0:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8010af4:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8010af6:	6823      	ldr	r3, [r4, #0]
 8010af8:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8010afa:	2001      	movs	r0, #1
 8010afc:	f7ff fc66 	bl	80103cc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8010b00:	6823      	ldr	r3, [r4, #0]
 8010b02:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8010b04:	6823      	ldr	r3, [r4, #0]
 8010b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b0a:	4a14      	ldr	r2, [pc, #80]	; (8010b5c <ETH_MACDMAConfig+0x114>)
 8010b0c:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b14:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8010b16:	2001      	movs	r0, #1
 8010b18:	f7ff fc58 	bl	80103cc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8010b1c:	6823      	ldr	r3, [r4, #0]
 8010b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b22:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8010b24:	69a3      	ldr	r3, [r4, #24]
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d009      	beq.n	8010b3e <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8010b2a:	6962      	ldr	r2, [r4, #20]
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f7ff ff0a 	bl	8010948 <ETH_MACAddressConfig>
}
 8010b34:	b01e      	add	sp, #120	; 0x78
 8010b36:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	9307      	str	r3, [sp, #28]
 8010b3c:	e794      	b.n	8010a68 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8010b3e:	6821      	ldr	r1, [r4, #0]
 8010b40:	f241 021c 	movw	r2, #4124	; 0x101c
 8010b44:	588b      	ldr	r3, [r1, r2]
 8010b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b4e:	508b      	str	r3, [r1, r2]
 8010b50:	e7eb      	b.n	8010b2a <ETH_MACDMAConfig+0xe2>
 8010b52:	bf00      	nop
 8010b54:	ff20810f 	.word	0xff20810f
 8010b58:	f8de3f23 	.word	0xf8de3f23
 8010b5c:	02c12080 	.word	0x02c12080

08010b60 <HAL_ETH_DMATxDescListInit>:
{
 8010b60:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8010b62:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010b66:	2c01      	cmp	r4, #1
 8010b68:	d031      	beq.n	8010bce <HAL_ETH_DMATxDescListInit+0x6e>
 8010b6a:	2401      	movs	r4, #1
 8010b6c:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010b70:	2402      	movs	r4, #2
 8010b72:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8010b76:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8010b78:	2400      	movs	r4, #0
 8010b7a:	e001      	b.n	8010b80 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8010b7c:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 8010b7e:	3401      	adds	r4, #1
 8010b80:	429c      	cmp	r4, r3
 8010b82:	d217      	bcs.n	8010bb4 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8010b84:	0165      	lsls	r5, r4, #5
 8010b86:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8010b88:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8010b8c:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8010b8e:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8010b92:	fb06 2604 	mla	r6, r6, r4, r2
 8010b96:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010b98:	69c6      	ldr	r6, [r0, #28]
 8010b9a:	b91e      	cbnz	r6, 8010ba4 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8010b9c:	594e      	ldr	r6, [r1, r5]
 8010b9e:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8010ba2:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 8010ba4:	1e5d      	subs	r5, r3, #1
 8010ba6:	42ac      	cmp	r4, r5
 8010ba8:	d2e8      	bcs.n	8010b7c <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8010baa:	1c65      	adds	r5, r4, #1
 8010bac:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8010bb0:	60fd      	str	r5, [r7, #12]
 8010bb2:	e7e4      	b.n	8010b7e <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8010bb4:	6802      	ldr	r2, [r0, #0]
 8010bb6:	f241 0310 	movw	r3, #4112	; 0x1010
 8010bba:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010bc8:	4618      	mov	r0, r3
}
 8010bca:	bcf0      	pop	{r4, r5, r6, r7}
 8010bcc:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010bce:	2002      	movs	r0, #2
 8010bd0:	e7fb      	b.n	8010bca <HAL_ETH_DMATxDescListInit+0x6a>

08010bd2 <HAL_ETH_DMARxDescListInit>:
{
 8010bd2:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8010bd4:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010bd8:	2c01      	cmp	r4, #1
 8010bda:	d02e      	beq.n	8010c3a <HAL_ETH_DMARxDescListInit+0x68>
 8010bdc:	2401      	movs	r4, #1
 8010bde:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010be2:	2402      	movs	r4, #2
 8010be4:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8010be8:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8010bea:	2400      	movs	r4, #0
 8010bec:	e001      	b.n	8010bf2 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8010bee:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 8010bf0:	3401      	adds	r4, #1
 8010bf2:	429c      	cmp	r4, r3
 8010bf4:	d214      	bcs.n	8010c20 <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 8010bf6:	0166      	lsls	r6, r4, #5
 8010bf8:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8010bfa:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8010bfe:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8010c00:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8010c04:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8010c06:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8010c0a:	fb06 2604 	mla	r6, r6, r4, r2
 8010c0e:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8010c10:	1e5e      	subs	r6, r3, #1
 8010c12:	42b4      	cmp	r4, r6
 8010c14:	d2eb      	bcs.n	8010bee <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8010c16:	1c66      	adds	r6, r4, #1
 8010c18:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8010c1c:	60ee      	str	r6, [r5, #12]
 8010c1e:	e7e7      	b.n	8010bf0 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8010c20:	6802      	ldr	r2, [r0, #0]
 8010c22:	f241 030c 	movw	r3, #4108	; 0x100c
 8010c26:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010c2e:	2300      	movs	r3, #0
 8010c30:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010c34:	4618      	mov	r0, r3
}
 8010c36:	bcf0      	pop	{r4, r5, r6, r7}
 8010c38:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010c3a:	2002      	movs	r0, #2
 8010c3c:	e7fb      	b.n	8010c36 <HAL_ETH_DMARxDescListInit+0x64>
	...

08010c40 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8010c40:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	f000 8087 	beq.w	8010d58 <HAL_ETH_TransmitFrame+0x118>
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010c50:	2302      	movs	r3, #2
 8010c52:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8010c56:	b199      	cbz	r1, 8010c80 <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8010c58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	2a00      	cmp	r2, #0
 8010c5e:	db17      	blt.n	8010c90 <HAL_ETH_TransmitFrame+0x50>
{
 8010c60:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8010c62:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010c66:	4291      	cmp	r1, r2
 8010c68:	d91a      	bls.n	8010ca0 <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8010c6a:	4c3c      	ldr	r4, [pc, #240]	; (8010d5c <HAL_ETH_TransmitFrame+0x11c>)
 8010c6c:	fba4 2401 	umull	r2, r4, r4, r1
 8010c70:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8010c72:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010c76:	fb02 1214 	mls	r2, r2, r4, r1
 8010c7a:	b192      	cbz	r2, 8010ca2 <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8010c7c:	3401      	adds	r4, #1
 8010c7e:	e010      	b.n	8010ca2 <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 8010c80:	2301      	movs	r3, #1
 8010c82:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010c86:	2200      	movs	r2, #0
 8010c88:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8010c90:	2312      	movs	r3, #18
 8010c92:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010c96:	2300      	movs	r3, #0
 8010c98:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 8010c9c:	2001      	movs	r0, #1
 8010c9e:	4770      	bx	lr
    bufcount = 1U;
 8010ca0:	2401      	movs	r4, #1
  if (bufcount == 1U)
 8010ca2:	2c01      	cmp	r4, #1
 8010ca4:	d001      	beq.n	8010caa <HAL_ETH_TransmitFrame+0x6a>
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	e037      	b.n	8010d1a <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8010caa:	681a      	ldr	r2, [r3, #0]
 8010cac:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8010cb0:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8010cb2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010cb4:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8010cb8:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8010cba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010cbc:	6813      	ldr	r3, [r2, #0]
 8010cbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010cc2:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8010cc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8010cca:	6803      	ldr	r3, [r0, #0]
 8010ccc:	f241 0214 	movw	r2, #4116	; 0x1014
 8010cd0:	589a      	ldr	r2, [r3, r2]
 8010cd2:	f012 0f04 	tst.w	r2, #4
 8010cd6:	d008      	beq.n	8010cea <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8010cd8:	2104      	movs	r1, #4
 8010cda:	f241 0214 	movw	r2, #4116	; 0x1014
 8010cde:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8010ce0:	6802      	ldr	r2, [r0, #0]
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	f241 0304 	movw	r3, #4100	; 0x1004
 8010ce8:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8010cea:	2301      	movs	r3, #1
 8010cec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010cf6:	4618      	mov	r0, r3
}
 8010cf8:	bc30      	pop	{r4, r5}
 8010cfa:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8010cfc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010cfe:	682a      	ldr	r2, [r5, #0]
 8010d00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010d04:	602a      	str	r2, [r5, #0]
 8010d06:	e011      	b.n	8010d2c <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8010d08:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010d0a:	682a      	ldr	r2, [r5, #0]
 8010d0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8010d10:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8010d12:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010d14:	68d2      	ldr	r2, [r2, #12]
 8010d16:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8010d18:	3301      	adds	r3, #1
 8010d1a:	429c      	cmp	r4, r3
 8010d1c:	d9d5      	bls.n	8010cca <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8010d1e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010d20:	682a      	ldr	r2, [r5, #0]
 8010d22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010d26:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d0e7      	beq.n	8010cfc <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8010d2c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010d2e:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8010d32:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8010d34:	1e62      	subs	r2, r4, #1
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d1e6      	bne.n	8010d08 <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8010d3a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010d3c:	682a      	ldr	r2, [r5, #0]
 8010d3e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8010d42:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8010d44:	4a06      	ldr	r2, [pc, #24]	; (8010d60 <HAL_ETH_TransmitFrame+0x120>)
 8010d46:	fb02 1204 	mla	r2, r2, r4, r1
 8010d4a:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8010d4e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8010d50:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010d54:	606a      	str	r2, [r5, #4]
 8010d56:	e7d7      	b.n	8010d08 <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8010d58:	2002      	movs	r0, #2
 8010d5a:	4770      	bx	lr
 8010d5c:	ac02b00b 	.word	0xac02b00b
 8010d60:	fffffa0c 	.word	0xfffffa0c

08010d64 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8010d64:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d045      	beq.n	8010df8 <HAL_ETH_GetReceivedFrame_IT+0x94>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010d72:	2302      	movs	r3, #2
 8010d74:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0U;
 8010d78:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8010d7a:	e00a      	b.n	8010d92 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8010d7c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8010d7e:	2201      	movs	r2, #1
 8010d80:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	6283      	str	r3, [r0, #40]	; 0x28
 8010d86:	e004      	b.n	8010d92 <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8010d88:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8010d8a:	3201      	adds	r2, #1
 8010d8c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8010d92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	2a00      	cmp	r2, #0
 8010d98:	db26      	blt.n	8010de8 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8010d9a:	2903      	cmp	r1, #3
 8010d9c:	d824      	bhi.n	8010de8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8010d9e:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8010da6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8010daa:	d0e7      	beq.n	8010d7c <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	f412 7f40 	tst.w	r2, #768	; 0x300
 8010db2:	d0e9      	beq.n	8010d88 <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8010db4:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8010db6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8010db8:	3201      	adds	r2, #1
 8010dba:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8010dbc:	2a01      	cmp	r2, #1
 8010dbe:	d011      	beq.n	8010de4 <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8010dc6:	3a04      	subs	r2, #4
 8010dc8:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8010dca:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8010dcc:	6892      	ldr	r2, [r2, #8]
 8010dce:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8010de0:	4618      	mov	r0, r3
 8010de2:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8010de4:	6303      	str	r3, [r0, #48]	; 0x30
 8010de6:	e7eb      	b.n	8010dc0 <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8010de8:	2301      	movs	r3, #1
 8010dea:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010dee:	2200      	movs	r2, #0
 8010df0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8010df4:	4618      	mov	r0, r3
 8010df6:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010df8:	2002      	movs	r0, #2
}
 8010dfa:	4770      	bx	lr

08010dfc <HAL_ETH_TxCpltCallback>:
{
 8010dfc:	4770      	bx	lr

08010dfe <HAL_ETH_ErrorCallback>:
{
 8010dfe:	4770      	bx	lr

08010e00 <HAL_ETH_IRQHandler>:
{
 8010e00:	b510      	push	{r4, lr}
 8010e02:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8010e04:	6803      	ldr	r3, [r0, #0]
 8010e06:	f241 0214 	movw	r2, #4116	; 0x1014
 8010e0a:	589a      	ldr	r2, [r3, r2]
 8010e0c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8010e10:	d111      	bne.n	8010e36 <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8010e12:	f241 0214 	movw	r2, #4116	; 0x1014
 8010e16:	589b      	ldr	r3, [r3, r2]
 8010e18:	f013 0f01 	tst.w	r3, #1
 8010e1c:	d119      	bne.n	8010e52 <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8010e1e:	6822      	ldr	r2, [r4, #0]
 8010e20:	f241 0314 	movw	r3, #4116	; 0x1014
 8010e24:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8010e28:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8010e2a:	6822      	ldr	r2, [r4, #0]
 8010e2c:	58d3      	ldr	r3, [r2, r3]
 8010e2e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8010e32:	d11b      	bne.n	8010e6c <HAL_ETH_IRQHandler+0x6c>
 8010e34:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8010e36:	f00c fa89 	bl	801d34c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8010e3a:	6822      	ldr	r2, [r4, #0]
 8010e3c:	2140      	movs	r1, #64	; 0x40
 8010e3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8010e42:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8010e44:	2301      	movs	r3, #1
 8010e46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e50:	e7e5      	b.n	8010e1e <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8010e52:	f7ff ffd3 	bl	8010dfc <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8010e56:	6821      	ldr	r1, [r4, #0]
 8010e58:	2301      	movs	r3, #1
 8010e5a:	f241 0214 	movw	r2, #4116	; 0x1014
 8010e5e:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8010e60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010e64:	2300      	movs	r3, #0
 8010e66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e6a:	e7d8      	b.n	8010e1e <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f7ff ffc6 	bl	8010dfe <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8010e72:	6822      	ldr	r2, [r4, #0]
 8010e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010e78:	f241 0314 	movw	r3, #4116	; 0x1014
 8010e7c:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8010e7e:	2301      	movs	r3, #1
 8010e80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8010e84:	2300      	movs	r3, #0
 8010e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010e8a:	e7d3      	b.n	8010e34 <HAL_ETH_IRQHandler+0x34>

08010e8c <HAL_ETH_ReadPHYRegister>:
{
 8010e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8010e8e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	2b82      	cmp	r3, #130	; 0x82
 8010e96:	d101      	bne.n	8010e9c <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8010e98:	2002      	movs	r0, #2
}
 8010e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e9c:	4616      	mov	r6, r2
 8010e9e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8010ea0:	2382      	movs	r3, #130	; 0x82
 8010ea2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8010ea6:	6802      	ldr	r2, [r0, #0]
 8010ea8:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8010eaa:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8010eae:	8a03      	ldrh	r3, [r0, #16]
 8010eb0:	02db      	lsls	r3, r3, #11
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8010eb6:	0189      	lsls	r1, r1, #6
 8010eb8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8010ebc:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8010ebe:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8010ec2:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8010ec4:	f7ff fa7c 	bl	80103c0 <HAL_GetTick>
 8010ec8:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8010eca:	f014 0f01 	tst.w	r4, #1
 8010ece:	d010      	beq.n	8010ef2 <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8010ed0:	f7ff fa76 	bl	80103c0 <HAL_GetTick>
 8010ed4:	1bc0      	subs	r0, r0, r7
 8010ed6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010eda:	d202      	bcs.n	8010ee2 <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8010edc:	682b      	ldr	r3, [r5, #0]
 8010ede:	691c      	ldr	r4, [r3, #16]
 8010ee0:	e7f3      	b.n	8010eca <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010ee8:	2300      	movs	r3, #0
 8010eea:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8010eee:	2003      	movs	r0, #3
 8010ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8010ef2:	682b      	ldr	r3, [r5, #0]
 8010ef4:	695b      	ldr	r3, [r3, #20]
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8010efa:	2301      	movs	r3, #1
 8010efc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8010f00:	2000      	movs	r0, #0
 8010f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f04 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8010f04:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	2b42      	cmp	r3, #66	; 0x42
 8010f0c:	d101      	bne.n	8010f12 <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8010f0e:	2002      	movs	r0, #2
 8010f10:	4770      	bx	lr
{
 8010f12:	b570      	push	{r4, r5, r6, lr}
 8010f14:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8010f16:	2342      	movs	r3, #66	; 0x42
 8010f18:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8010f1c:	6800      	ldr	r0, [r0, #0]
 8010f1e:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8010f20:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8010f24:	8a2b      	ldrh	r3, [r5, #16]
 8010f26:	02db      	lsls	r3, r3, #11
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8010f2c:	0189      	lsls	r1, r1, #6
 8010f2e:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8010f32:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8010f34:	f044 0403 	orr.w	r4, r4, #3
 8010f38:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8010f3a:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8010f3c:	682b      	ldr	r3, [r5, #0]
 8010f3e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8010f40:	f7ff fa3e 	bl	80103c0 <HAL_GetTick>
 8010f44:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8010f46:	f014 0f01 	tst.w	r4, #1
 8010f4a:	d010      	beq.n	8010f6e <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8010f4c:	f7ff fa38 	bl	80103c0 <HAL_GetTick>
 8010f50:	1b80      	subs	r0, r0, r6
 8010f52:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010f56:	d202      	bcs.n	8010f5e <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8010f58:	682b      	ldr	r3, [r5, #0]
 8010f5a:	691c      	ldr	r4, [r3, #16]
 8010f5c:	e7f3      	b.n	8010f46 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8010f5e:	2301      	movs	r3, #1
 8010f60:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010f64:	2300      	movs	r3, #0
 8010f66:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8010f6a:	2003      	movs	r0, #3
 8010f6c:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8010f6e:	2301      	movs	r3, #1
 8010f70:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8010f74:	2000      	movs	r0, #0
 8010f76:	bd70      	pop	{r4, r5, r6, pc}

08010f78 <HAL_ETH_Init>:
{
 8010f78:	b570      	push	{r4, r5, r6, lr}
 8010f7a:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8010f80:	2800      	cmp	r0, #0
 8010f82:	f000 810e 	beq.w	80111a2 <HAL_ETH_Init+0x22a>
 8010f86:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8010f88:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d034      	beq.n	8010ffa <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f90:	2300      	movs	r3, #0
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	4b84      	ldr	r3, [pc, #528]	; (80111a8 <HAL_ETH_Init+0x230>)
 8010f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8010f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fa4:	9300      	str	r3, [sp, #0]
 8010fa6:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8010fa8:	4b80      	ldr	r3, [pc, #512]	; (80111ac <HAL_ETH_Init+0x234>)
 8010faa:	685a      	ldr	r2, [r3, #4]
 8010fac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010fb0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8010fb2:	685a      	ldr	r2, [r3, #4]
 8010fb4:	6a21      	ldr	r1, [r4, #32]
 8010fb6:	430a      	orrs	r2, r1
 8010fb8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8010fba:	6823      	ldr	r3, [r4, #0]
 8010fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	f042 0201 	orr.w	r2, r2, #1
 8010fc6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010fc8:	f7ff f9fa 	bl	80103c0 <HAL_GetTick>
 8010fcc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8010fd4:	6812      	ldr	r2, [r2, #0]
 8010fd6:	f012 0f01 	tst.w	r2, #1
 8010fda:	d013      	beq.n	8011004 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8010fdc:	f7ff f9f0 	bl	80103c0 <HAL_GetTick>
 8010fe0:	1b40      	subs	r0, r0, r5
 8010fe2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8010fe6:	d9f2      	bls.n	8010fce <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8010fe8:	2503      	movs	r5, #3
 8010fea:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8010fee:	2300      	movs	r3, #0
 8010ff0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	b002      	add	sp, #8
 8010ff8:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8010ffa:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8010ffe:	f00c f949 	bl	801d294 <HAL_ETH_MspInit>
 8011002:	e7c5      	b.n	8010f90 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8011004:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8011006:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 801100a:	f000 ff1d 	bl	8011e48 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 801100e:	4b68      	ldr	r3, [pc, #416]	; (80111b0 <HAL_ETH_Init+0x238>)
 8011010:	4403      	add	r3, r0
 8011012:	4a68      	ldr	r2, [pc, #416]	; (80111b4 <HAL_ETH_Init+0x23c>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d855      	bhi.n	80110c4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8011018:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8011020:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011024:	2100      	movs	r1, #0
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff ff6c 	bl	8010f04 <HAL_ETH_WritePHYRegister>
 801102c:	4605      	mov	r5, r0
 801102e:	2800      	cmp	r0, #0
 8011030:	d160      	bne.n	80110f4 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8011032:	20ff      	movs	r0, #255	; 0xff
 8011034:	f7ff f9ca 	bl	80103cc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8011038:	6863      	ldr	r3, [r4, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	f000 8091 	beq.w	8011162 <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8011040:	f7ff f9be 	bl	80103c0 <HAL_GetTick>
 8011044:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8011046:	aa01      	add	r2, sp, #4
 8011048:	2101      	movs	r1, #1
 801104a:	4620      	mov	r0, r4
 801104c:	f7ff ff1e 	bl	8010e8c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8011050:	f7ff f9b6 	bl	80103c0 <HAL_GetTick>
 8011054:	1b80      	subs	r0, r0, r6
 8011056:	f241 3388 	movw	r3, #5000	; 0x1388
 801105a:	4298      	cmp	r0, r3
 801105c:	d852      	bhi.n	8011104 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 801105e:	9b01      	ldr	r3, [sp, #4]
 8011060:	f013 0f04 	tst.w	r3, #4
 8011064:	d0ef      	beq.n	8011046 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8011066:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801106a:	2100      	movs	r1, #0
 801106c:	4620      	mov	r0, r4
 801106e:	f7ff ff49 	bl	8010f04 <HAL_ETH_WritePHYRegister>
 8011072:	2800      	cmp	r0, #0
 8011074:	d152      	bne.n	801111c <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8011076:	f7ff f9a3 	bl	80103c0 <HAL_GetTick>
 801107a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 801107c:	aa01      	add	r2, sp, #4
 801107e:	2101      	movs	r1, #1
 8011080:	4620      	mov	r0, r4
 8011082:	f7ff ff03 	bl	8010e8c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8011086:	f7ff f99b 	bl	80103c0 <HAL_GetTick>
 801108a:	1b80      	subs	r0, r0, r6
 801108c:	f241 3388 	movw	r3, #5000	; 0x1388
 8011090:	4298      	cmp	r0, r3
 8011092:	d84b      	bhi.n	801112c <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8011094:	9b01      	ldr	r3, [sp, #4]
 8011096:	f013 0f20 	tst.w	r3, #32
 801109a:	d0ef      	beq.n	801107c <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 801109c:	aa01      	add	r2, sp, #4
 801109e:	2110      	movs	r1, #16
 80110a0:	4620      	mov	r0, r4
 80110a2:	f7ff fef3 	bl	8010e8c <HAL_ETH_ReadPHYRegister>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d14c      	bne.n	8011144 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80110aa:	9b01      	ldr	r3, [sp, #4]
 80110ac:	f013 0f04 	tst.w	r3, #4
 80110b0:	d050      	beq.n	8011154 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80110b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110b6:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80110b8:	f013 0f02 	tst.w	r3, #2
 80110bc:	d04d      	beq.n	801115a <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80110be:	2300      	movs	r3, #0
 80110c0:	60a3      	str	r3, [r4, #8]
 80110c2:	e05e      	b.n	8011182 <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80110c4:	4b3c      	ldr	r3, [pc, #240]	; (80111b8 <HAL_ETH_Init+0x240>)
 80110c6:	4403      	add	r3, r0
 80110c8:	4a3c      	ldr	r2, [pc, #240]	; (80111bc <HAL_ETH_Init+0x244>)
 80110ca:	4293      	cmp	r3, r2
 80110cc:	d802      	bhi.n	80110d4 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80110ce:	f045 050c 	orr.w	r5, r5, #12
 80110d2:	e7a3      	b.n	801101c <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80110d4:	4b3a      	ldr	r3, [pc, #232]	; (80111c0 <HAL_ETH_Init+0x248>)
 80110d6:	4403      	add	r3, r0
 80110d8:	4a3a      	ldr	r2, [pc, #232]	; (80111c4 <HAL_ETH_Init+0x24c>)
 80110da:	4293      	cmp	r3, r2
 80110dc:	d99e      	bls.n	801101c <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80110de:	4b3a      	ldr	r3, [pc, #232]	; (80111c8 <HAL_ETH_Init+0x250>)
 80110e0:	4403      	add	r3, r0
 80110e2:	4a3a      	ldr	r2, [pc, #232]	; (80111cc <HAL_ETH_Init+0x254>)
 80110e4:	4293      	cmp	r3, r2
 80110e6:	d802      	bhi.n	80110ee <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80110e8:	f045 0504 	orr.w	r5, r5, #4
 80110ec:	e796      	b.n	801101c <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80110ee:	f045 0510 	orr.w	r5, r5, #16
 80110f2:	e793      	b.n	801101c <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 80110f4:	2101      	movs	r1, #1
 80110f6:	4620      	mov	r0, r4
 80110f8:	f7ff fca6 	bl	8010a48 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80110fc:	2501      	movs	r5, #1
 80110fe:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8011102:	e777      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8011104:	2101      	movs	r1, #1
 8011106:	4620      	mov	r0, r4
 8011108:	f7ff fc9e 	bl	8010a48 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 801110c:	2301      	movs	r3, #1
 801110e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8011112:	2300      	movs	r3, #0
 8011114:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8011118:	2503      	movs	r5, #3
 801111a:	e76b      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 801111c:	2101      	movs	r1, #1
 801111e:	4620      	mov	r0, r4
 8011120:	f7ff fc92 	bl	8010a48 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8011124:	2501      	movs	r5, #1
 8011126:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 801112a:	e763      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 801112c:	2101      	movs	r1, #1
 801112e:	4620      	mov	r0, r4
 8011130:	f7ff fc8a 	bl	8010a48 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8011134:	2301      	movs	r3, #1
 8011136:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 801113a:	2300      	movs	r3, #0
 801113c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8011140:	2503      	movs	r5, #3
 8011142:	e757      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8011144:	2101      	movs	r1, #1
 8011146:	4620      	mov	r0, r4
 8011148:	f7ff fc7e 	bl	8010a48 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 801114c:	2501      	movs	r5, #1
 801114e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8011152:	e74f      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8011154:	2200      	movs	r2, #0
 8011156:	60e2      	str	r2, [r4, #12]
 8011158:	e7ae      	b.n	80110b8 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 801115a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801115e:	60a3      	str	r3, [r4, #8]
 8011160:	e00f      	b.n	8011182 <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8011162:	68e3      	ldr	r3, [r4, #12]
 8011164:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8011168:	68a3      	ldr	r3, [r4, #8]
 801116a:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 801116e:	431a      	orrs	r2, r3
 8011170:	2100      	movs	r1, #0
 8011172:	4620      	mov	r0, r4
 8011174:	f7ff fec6 	bl	8010f04 <HAL_ETH_WritePHYRegister>
 8011178:	b958      	cbnz	r0, 8011192 <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 801117a:	f640 70ff 	movw	r0, #4095	; 0xfff
 801117e:	f7ff f925 	bl	80103cc <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8011182:	2100      	movs	r1, #0
 8011184:	4620      	mov	r0, r4
 8011186:	f7ff fc5f 	bl	8010a48 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 801118a:	2301      	movs	r3, #1
 801118c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8011190:	e730      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8011192:	2101      	movs	r1, #1
 8011194:	4620      	mov	r0, r4
 8011196:	f7ff fc57 	bl	8010a48 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 801119a:	2501      	movs	r5, #1
 801119c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80111a0:	e728      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 80111a2:	2501      	movs	r5, #1
 80111a4:	e726      	b.n	8010ff4 <HAL_ETH_Init+0x7c>
 80111a6:	bf00      	nop
 80111a8:	40023800 	.word	0x40023800
 80111ac:	40013800 	.word	0x40013800
 80111b0:	feced300 	.word	0xfeced300
 80111b4:	00e4e1bf 	.word	0x00e4e1bf
 80111b8:	fde9f140 	.word	0xfde9f140
 80111bc:	017d783f 	.word	0x017d783f
 80111c0:	fc6c7900 	.word	0xfc6c7900
 80111c4:	026259ff 	.word	0x026259ff
 80111c8:	fa0a1f00 	.word	0xfa0a1f00
 80111cc:	02faf07f 	.word	0x02faf07f

080111d0 <HAL_ETH_Start>:
{  
 80111d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 80111d2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d101      	bne.n	80111de <HAL_ETH_Start+0xe>
 80111da:	2002      	movs	r0, #2
}
 80111dc:	bd38      	pop	{r3, r4, r5, pc}
 80111de:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 80111e0:	2501      	movs	r5, #1
 80111e2:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80111e6:	2302      	movs	r3, #2
 80111e8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 80111ec:	f7ff fbea 	bl	80109c4 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 80111f0:	4620      	mov	r0, r4
 80111f2:	f7ff fbfc 	bl	80109ee <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 80111f6:	4620      	mov	r0, r4
 80111f8:	f7ff fc0e 	bl	8010a18 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 80111fc:	4620      	mov	r0, r4
 80111fe:	f7ff fbbb 	bl	8010978 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8011202:	4620      	mov	r0, r4
 8011204:	f7ff fbc0 	bl	8010988 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8011208:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 801120c:	2000      	movs	r0, #0
 801120e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8011212:	bd38      	pop	{r3, r4, r5, pc}

08011214 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8011214:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011216:	4909      	ldr	r1, [pc, #36]	; (801123c <FLASH_Program_DoubleWord+0x28>)
 8011218:	690c      	ldr	r4, [r1, #16]
 801121a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 801121e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8011220:	690c      	ldr	r4, [r1, #16]
 8011222:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8011226:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011228:	690c      	ldr	r4, [r1, #16]
 801122a:	f044 0401 	orr.w	r4, r4, #1
 801122e:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8011230:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8011232:	6043      	str	r3, [r0, #4]
}
 8011234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop
 801123c:	40023c00 	.word	0x40023c00

08011240 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011240:	4b07      	ldr	r3, [pc, #28]	; (8011260 <FLASH_Program_Word+0x20>)
 8011242:	691a      	ldr	r2, [r3, #16]
 8011244:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011248:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801124a:	691a      	ldr	r2, [r3, #16]
 801124c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011250:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011252:	691a      	ldr	r2, [r3, #16]
 8011254:	f042 0201 	orr.w	r2, r2, #1
 8011258:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 801125a:	6001      	str	r1, [r0, #0]
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	40023c00 	.word	0x40023c00

08011264 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011264:	4b07      	ldr	r3, [pc, #28]	; (8011284 <FLASH_Program_HalfWord+0x20>)
 8011266:	691a      	ldr	r2, [r3, #16]
 8011268:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801126c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801126e:	691a      	ldr	r2, [r3, #16]
 8011270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011274:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011276:	691a      	ldr	r2, [r3, #16]
 8011278:	f042 0201 	orr.w	r2, r2, #1
 801127c:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 801127e:	8001      	strh	r1, [r0, #0]
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	40023c00 	.word	0x40023c00

08011288 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011288:	4b06      	ldr	r3, [pc, #24]	; (80112a4 <FLASH_Program_Byte+0x1c>)
 801128a:	691a      	ldr	r2, [r3, #16]
 801128c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011290:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8011292:	691a      	ldr	r2, [r3, #16]
 8011294:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011296:	691a      	ldr	r2, [r3, #16]
 8011298:	f042 0201 	orr.w	r2, r2, #1
 801129c:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 801129e:	7001      	strb	r1, [r0, #0]
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	40023c00 	.word	0x40023c00

080112a8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80112a8:	4b20      	ldr	r3, [pc, #128]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	f013 0f10 	tst.w	r3, #16
 80112b0:	d007      	beq.n	80112c2 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80112b2:	4a1f      	ldr	r2, [pc, #124]	; (8011330 <FLASH_SetErrorCode+0x88>)
 80112b4:	69d3      	ldr	r3, [r2, #28]
 80112b6:	f043 0310 	orr.w	r3, r3, #16
 80112ba:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80112bc:	2210      	movs	r2, #16
 80112be:	4b1b      	ldr	r3, [pc, #108]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80112c2:	4b1a      	ldr	r3, [pc, #104]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112c4:	68db      	ldr	r3, [r3, #12]
 80112c6:	f013 0f20 	tst.w	r3, #32
 80112ca:	d007      	beq.n	80112dc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80112cc:	4a18      	ldr	r2, [pc, #96]	; (8011330 <FLASH_SetErrorCode+0x88>)
 80112ce:	69d3      	ldr	r3, [r2, #28]
 80112d0:	f043 0308 	orr.w	r3, r3, #8
 80112d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80112d6:	2220      	movs	r2, #32
 80112d8:	4b14      	ldr	r3, [pc, #80]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80112dc:	4b13      	ldr	r3, [pc, #76]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80112e4:	d007      	beq.n	80112f6 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80112e6:	4a12      	ldr	r2, [pc, #72]	; (8011330 <FLASH_SetErrorCode+0x88>)
 80112e8:	69d3      	ldr	r3, [r2, #28]
 80112ea:	f043 0304 	orr.w	r3, r3, #4
 80112ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80112f0:	2240      	movs	r2, #64	; 0x40
 80112f2:	4b0e      	ldr	r3, [pc, #56]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80112f6:	4b0d      	ldr	r3, [pc, #52]	; (801132c <FLASH_SetErrorCode+0x84>)
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80112fe:	d007      	beq.n	8011310 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8011300:	4a0b      	ldr	r2, [pc, #44]	; (8011330 <FLASH_SetErrorCode+0x88>)
 8011302:	69d3      	ldr	r3, [r2, #28]
 8011304:	f043 0302 	orr.w	r3, r3, #2
 8011308:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801130a:	2280      	movs	r2, #128	; 0x80
 801130c:	4b07      	ldr	r3, [pc, #28]	; (801132c <FLASH_SetErrorCode+0x84>)
 801130e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8011310:	4b06      	ldr	r3, [pc, #24]	; (801132c <FLASH_SetErrorCode+0x84>)
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	f013 0f02 	tst.w	r3, #2
 8011318:	d007      	beq.n	801132a <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801131a:	4a05      	ldr	r2, [pc, #20]	; (8011330 <FLASH_SetErrorCode+0x88>)
 801131c:	69d3      	ldr	r3, [r2, #28]
 801131e:	f043 0320 	orr.w	r3, r3, #32
 8011322:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8011324:	2202      	movs	r2, #2
 8011326:	4b01      	ldr	r3, [pc, #4]	; (801132c <FLASH_SetErrorCode+0x84>)
 8011328:	60da      	str	r2, [r3, #12]
 801132a:	4770      	bx	lr
 801132c:	40023c00 	.word	0x40023c00
 8011330:	2000a1ac 	.word	0x2000a1ac

08011334 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011334:	4b09      	ldr	r3, [pc, #36]	; (801135c <HAL_FLASH_Unlock+0x28>)
 8011336:	691b      	ldr	r3, [r3, #16]
 8011338:	2b00      	cmp	r3, #0
 801133a:	db01      	blt.n	8011340 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 801133c:	2000      	movs	r0, #0
 801133e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011340:	4b06      	ldr	r3, [pc, #24]	; (801135c <HAL_FLASH_Unlock+0x28>)
 8011342:	4a07      	ldr	r2, [pc, #28]	; (8011360 <HAL_FLASH_Unlock+0x2c>)
 8011344:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011346:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 801134a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801134c:	691b      	ldr	r3, [r3, #16]
 801134e:	2b00      	cmp	r3, #0
 8011350:	db01      	blt.n	8011356 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8011352:	2000      	movs	r0, #0
 8011354:	4770      	bx	lr
      status = HAL_ERROR;
 8011356:	2001      	movs	r0, #1
}
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	40023c00 	.word	0x40023c00
 8011360:	45670123 	.word	0x45670123

08011364 <FLASH_WaitForLastOperation>:
{ 
 8011364:	b538      	push	{r3, r4, r5, lr}
 8011366:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011368:	2200      	movs	r2, #0
 801136a:	4b15      	ldr	r3, [pc, #84]	; (80113c0 <FLASH_WaitForLastOperation+0x5c>)
 801136c:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 801136e:	f7ff f827 	bl	80103c0 <HAL_GetTick>
 8011372:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011374:	4b13      	ldr	r3, [pc, #76]	; (80113c4 <FLASH_WaitForLastOperation+0x60>)
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801137c:	d00a      	beq.n	8011394 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 801137e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011382:	d0f7      	beq.n	8011374 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8011384:	b1cc      	cbz	r4, 80113ba <FLASH_WaitForLastOperation+0x56>
 8011386:	f7ff f81b 	bl	80103c0 <HAL_GetTick>
 801138a:	1b40      	subs	r0, r0, r5
 801138c:	4284      	cmp	r4, r0
 801138e:	d2f1      	bcs.n	8011374 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8011390:	2003      	movs	r0, #3
 8011392:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011394:	4b0b      	ldr	r3, [pc, #44]	; (80113c4 <FLASH_WaitForLastOperation+0x60>)
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	f013 0f01 	tst.w	r3, #1
 801139c:	d002      	beq.n	80113a4 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801139e:	2201      	movs	r2, #1
 80113a0:	4b08      	ldr	r3, [pc, #32]	; (80113c4 <FLASH_WaitForLastOperation+0x60>)
 80113a2:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80113a4:	4b07      	ldr	r3, [pc, #28]	; (80113c4 <FLASH_WaitForLastOperation+0x60>)
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 80113ac:	d101      	bne.n	80113b2 <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 80113ae:	2000      	movs	r0, #0
}  
 80113b0:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 80113b2:	f7ff ff79 	bl	80112a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80113b6:	2001      	movs	r0, #1
 80113b8:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 80113ba:	2003      	movs	r0, #3
 80113bc:	bd38      	pop	{r3, r4, r5, pc}
 80113be:	bf00      	nop
 80113c0:	2000a1ac 	.word	0x2000a1ac
 80113c4:	40023c00 	.word	0x40023c00

080113c8 <HAL_FLASH_Program>:
{
 80113c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80113cc:	4c1d      	ldr	r4, [pc, #116]	; (8011444 <HAL_FLASH_Program+0x7c>)
 80113ce:	7e24      	ldrb	r4, [r4, #24]
 80113d0:	2c01      	cmp	r4, #1
 80113d2:	d103      	bne.n	80113dc <HAL_FLASH_Program+0x14>
 80113d4:	2402      	movs	r4, #2
}
 80113d6:	4620      	mov	r0, r4
 80113d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113dc:	4698      	mov	r8, r3
 80113de:	4617      	mov	r7, r2
 80113e0:	460e      	mov	r6, r1
 80113e2:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80113e4:	2201      	movs	r2, #1
 80113e6:	4b17      	ldr	r3, [pc, #92]	; (8011444 <HAL_FLASH_Program+0x7c>)
 80113e8:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80113ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80113ee:	f7ff ffb9 	bl	8011364 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80113f2:	4604      	mov	r4, r0
 80113f4:	b998      	cbnz	r0, 801141e <HAL_FLASH_Program+0x56>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80113f6:	b1b5      	cbz	r5, 8011426 <HAL_FLASH_Program+0x5e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80113f8:	2d01      	cmp	r5, #1
 80113fa:	d019      	beq.n	8011430 <HAL_FLASH_Program+0x68>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80113fc:	2d02      	cmp	r5, #2
 80113fe:	d01c      	beq.n	801143a <HAL_FLASH_Program+0x72>
      FLASH_Program_DoubleWord(Address, Data);
 8011400:	463a      	mov	r2, r7
 8011402:	4643      	mov	r3, r8
 8011404:	4630      	mov	r0, r6
 8011406:	f7ff ff05 	bl	8011214 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801140a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801140e:	f7ff ffa9 	bl	8011364 <FLASH_WaitForLastOperation>
 8011412:	4604      	mov	r4, r0
    FLASH->CR &= (~FLASH_CR_PG);  
 8011414:	4a0c      	ldr	r2, [pc, #48]	; (8011448 <HAL_FLASH_Program+0x80>)
 8011416:	6913      	ldr	r3, [r2, #16]
 8011418:	f023 0301 	bic.w	r3, r3, #1
 801141c:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 801141e:	2200      	movs	r2, #0
 8011420:	4b08      	ldr	r3, [pc, #32]	; (8011444 <HAL_FLASH_Program+0x7c>)
 8011422:	761a      	strb	r2, [r3, #24]
  return status;
 8011424:	e7d7      	b.n	80113d6 <HAL_FLASH_Program+0xe>
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8011426:	b2f9      	uxtb	r1, r7
 8011428:	4630      	mov	r0, r6
 801142a:	f7ff ff2d 	bl	8011288 <FLASH_Program_Byte>
 801142e:	e7ec      	b.n	801140a <HAL_FLASH_Program+0x42>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8011430:	b2b9      	uxth	r1, r7
 8011432:	4630      	mov	r0, r6
 8011434:	f7ff ff16 	bl	8011264 <FLASH_Program_HalfWord>
 8011438:	e7e7      	b.n	801140a <HAL_FLASH_Program+0x42>
      FLASH_Program_Word(Address, (uint32_t) Data);
 801143a:	4639      	mov	r1, r7
 801143c:	4630      	mov	r0, r6
 801143e:	f7ff feff 	bl	8011240 <FLASH_Program_Word>
 8011442:	e7e2      	b.n	801140a <HAL_FLASH_Program+0x42>
 8011444:	2000a1ac 	.word	0x2000a1ac
 8011448:	40023c00 	.word	0x40023c00

0801144c <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801144c:	4b07      	ldr	r3, [pc, #28]	; (801146c <FLASH_MassErase+0x20>)
 801144e:	691a      	ldr	r2, [r3, #16]
 8011450:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011454:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8011456:	691a      	ldr	r2, [r3, #16]
 8011458:	f042 0204 	orr.w	r2, r2, #4
 801145c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 801145e:	691a      	ldr	r2, [r3, #16]
 8011460:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8011464:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8011468:	6118      	str	r0, [r3, #16]
 801146a:	4770      	bx	lr
 801146c:	40023c00 	.word	0x40023c00

08011470 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011470:	b1f9      	cbz	r1, 80114b2 <FLASH_Erase_Sector+0x42>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8011472:	2901      	cmp	r1, #1
 8011474:	d01f      	beq.n	80114b6 <FLASH_Erase_Sector+0x46>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8011476:	2902      	cmp	r1, #2
 8011478:	d018      	beq.n	80114ac <FLASH_Erase_Sector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 801147a:	f44f 7140 	mov.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801147e:	4b0f      	ldr	r3, [pc, #60]	; (80114bc <FLASH_Erase_Sector+0x4c>)
 8011480:	691a      	ldr	r2, [r3, #16]
 8011482:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011486:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8011488:	691a      	ldr	r2, [r3, #16]
 801148a:	430a      	orrs	r2, r1
 801148c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801148e:	691a      	ldr	r2, [r3, #16]
 8011490:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8011494:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8011496:	691a      	ldr	r2, [r3, #16]
 8011498:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 801149c:	f040 0002 	orr.w	r0, r0, #2
 80114a0:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80114a2:	691a      	ldr	r2, [r3, #16]
 80114a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80114a8:	611a      	str	r2, [r3, #16]
 80114aa:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_WORD;
 80114ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80114b0:	e7e5      	b.n	801147e <FLASH_Erase_Sector+0xe>
     tmp_psize = FLASH_PSIZE_BYTE;
 80114b2:	2100      	movs	r1, #0
 80114b4:	e7e3      	b.n	801147e <FLASH_Erase_Sector+0xe>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80114b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80114ba:	e7e0      	b.n	801147e <FLASH_Erase_Sector+0xe>
 80114bc:	40023c00 	.word	0x40023c00

080114c0 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80114c0:	4b16      	ldr	r3, [pc, #88]	; (801151c <FLASH_FlushCaches+0x5c>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80114c8:	d010      	beq.n	80114ec <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80114ca:	4b14      	ldr	r3, [pc, #80]	; (801151c <FLASH_FlushCaches+0x5c>)
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80114d2:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80114da:	601a      	str	r2, [r3, #0]
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80114e2:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80114e4:	681a      	ldr	r2, [r3, #0]
 80114e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80114ea:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80114ec:	4b0b      	ldr	r3, [pc, #44]	; (801151c <FLASH_FlushCaches+0x5c>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80114f4:	d010      	beq.n	8011518 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80114f6:	4b09      	ldr	r3, [pc, #36]	; (801151c <FLASH_FlushCaches+0x5c>)
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114fe:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8011500:	681a      	ldr	r2, [r3, #0]
 8011502:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801150e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011516:	601a      	str	r2, [r3, #0]
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop
 801151c:	40023c00 	.word	0x40023c00

08011520 <HAL_FLASHEx_Erase>:
{
 8011520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8011522:	4b22      	ldr	r3, [pc, #136]	; (80115ac <HAL_FLASHEx_Erase+0x8c>)
 8011524:	7e1b      	ldrb	r3, [r3, #24]
 8011526:	2b01      	cmp	r3, #1
 8011528:	d102      	bne.n	8011530 <HAL_FLASHEx_Erase+0x10>
 801152a:	2702      	movs	r7, #2
}
 801152c:	4638      	mov	r0, r7
 801152e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011530:	460e      	mov	r6, r1
 8011532:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8011534:	2201      	movs	r2, #1
 8011536:	4b1d      	ldr	r3, [pc, #116]	; (80115ac <HAL_FLASHEx_Erase+0x8c>)
 8011538:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801153a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801153e:	f7ff ff11 	bl	8011364 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011542:	4607      	mov	r7, r0
 8011544:	bb70      	cbnz	r0, 80115a4 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 8011546:	f04f 33ff 	mov.w	r3, #4294967295
 801154a:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801154c:	6823      	ldr	r3, [r4, #0]
 801154e:	2b01      	cmp	r3, #1
 8011550:	d016      	beq.n	8011580 <HAL_FLASHEx_Erase+0x60>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011552:	68a5      	ldr	r5, [r4, #8]
 8011554:	68e3      	ldr	r3, [r4, #12]
 8011556:	68a2      	ldr	r2, [r4, #8]
 8011558:	4413      	add	r3, r2
 801155a:	429d      	cmp	r5, r3
 801155c:	d220      	bcs.n	80115a0 <HAL_FLASHEx_Erase+0x80>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801155e:	7c21      	ldrb	r1, [r4, #16]
 8011560:	4628      	mov	r0, r5
 8011562:	f7ff ff85 	bl	8011470 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011566:	f24c 3050 	movw	r0, #50000	; 0xc350
 801156a:	f7ff fefb 	bl	8011364 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 801156e:	4a10      	ldr	r2, [pc, #64]	; (80115b0 <HAL_FLASHEx_Erase+0x90>)
 8011570:	6913      	ldr	r3, [r2, #16]
 8011572:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8011576:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8011578:	4607      	mov	r7, r0
 801157a:	b980      	cbnz	r0, 801159e <HAL_FLASHEx_Erase+0x7e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801157c:	3501      	adds	r5, #1
 801157e:	e7e9      	b.n	8011554 <HAL_FLASHEx_Erase+0x34>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8011580:	6861      	ldr	r1, [r4, #4]
 8011582:	7c20      	ldrb	r0, [r4, #16]
 8011584:	f7ff ff62 	bl	801144c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011588:	f24c 3050 	movw	r0, #50000	; 0xc350
 801158c:	f7ff feea 	bl	8011364 <FLASH_WaitForLastOperation>
 8011590:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8011592:	4a07      	ldr	r2, [pc, #28]	; (80115b0 <HAL_FLASHEx_Erase+0x90>)
 8011594:	6913      	ldr	r3, [r2, #16]
 8011596:	f023 0304 	bic.w	r3, r3, #4
 801159a:	6113      	str	r3, [r2, #16]
 801159c:	e000      	b.n	80115a0 <HAL_FLASHEx_Erase+0x80>
          *SectorError = index;
 801159e:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 80115a0:	f7ff ff8e 	bl	80114c0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80115a4:	2200      	movs	r2, #0
 80115a6:	4b01      	ldr	r3, [pc, #4]	; (80115ac <HAL_FLASHEx_Erase+0x8c>)
 80115a8:	761a      	strb	r2, [r3, #24]
  return status;
 80115aa:	e7bf      	b.n	801152c <HAL_FLASHEx_Erase+0xc>
 80115ac:	2000a1ac 	.word	0x2000a1ac
 80115b0:	40023c00 	.word	0x40023c00

080115b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80115b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115b6:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80115b8:	2400      	movs	r4, #0
 80115ba:	e04b      	b.n	8011654 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80115bc:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80115c0:	f10e 0e08 	add.w	lr, lr, #8
 80115c4:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80115c8:	f004 0607 	and.w	r6, r4, #7
 80115cc:	00b6      	lsls	r6, r6, #2
 80115ce:	270f      	movs	r7, #15
 80115d0:	40b7      	lsls	r7, r6
 80115d2:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80115d6:	690f      	ldr	r7, [r1, #16]
 80115d8:	fa07 f606 	lsl.w	r6, r7, r6
 80115dc:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 80115de:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 80115e2:	e046      	b.n	8011672 <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80115e4:	2607      	movs	r6, #7
 80115e6:	e000      	b.n	80115ea <HAL_GPIO_Init+0x36>
 80115e8:	2600      	movs	r6, #0
 80115ea:	fa06 f60e 	lsl.w	r6, r6, lr
 80115ee:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80115f0:	3302      	adds	r3, #2
 80115f2:	4e5e      	ldr	r6, [pc, #376]	; (801176c <HAL_GPIO_Init+0x1b8>)
 80115f4:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80115f8:	4b5d      	ldr	r3, [pc, #372]	; (8011770 <HAL_GPIO_Init+0x1bc>)
 80115fa:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 80115fc:	43eb      	mvns	r3, r5
 80115fe:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011602:	684f      	ldr	r7, [r1, #4]
 8011604:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8011608:	d001      	beq.n	801160e <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 801160a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 801160e:	4a58      	ldr	r2, [pc, #352]	; (8011770 <HAL_GPIO_Init+0x1bc>)
 8011610:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8011612:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8011614:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011618:	684f      	ldr	r7, [r1, #4]
 801161a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 801161e:	d001      	beq.n	8011624 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8011620:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8011624:	4a52      	ldr	r2, [pc, #328]	; (8011770 <HAL_GPIO_Init+0x1bc>)
 8011626:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011628:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 801162a:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801162e:	684f      	ldr	r7, [r1, #4]
 8011630:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8011634:	d001      	beq.n	801163a <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8011636:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 801163a:	4a4d      	ldr	r2, [pc, #308]	; (8011770 <HAL_GPIO_Init+0x1bc>)
 801163c:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 801163e:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8011640:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011642:	684e      	ldr	r6, [r1, #4]
 8011644:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8011648:	d001      	beq.n	801164e <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 801164a:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 801164e:	4a48      	ldr	r2, [pc, #288]	; (8011770 <HAL_GPIO_Init+0x1bc>)
 8011650:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011652:	3401      	adds	r4, #1
 8011654:	2c0f      	cmp	r4, #15
 8011656:	f200 8086 	bhi.w	8011766 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 801165a:	2301      	movs	r3, #1
 801165c:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801165e:	680a      	ldr	r2, [r1, #0]
 8011660:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8011664:	42ab      	cmp	r3, r5
 8011666:	d1f4      	bne.n	8011652 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011668:	684a      	ldr	r2, [r1, #4]
 801166a:	2a02      	cmp	r2, #2
 801166c:	d0a6      	beq.n	80115bc <HAL_GPIO_Init+0x8>
 801166e:	2a12      	cmp	r2, #18
 8011670:	d0a4      	beq.n	80115bc <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8011672:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011674:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8011678:	2203      	movs	r2, #3
 801167a:	fa02 f20e 	lsl.w	r2, r2, lr
 801167e:	43d2      	mvns	r2, r2
 8011680:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011682:	684f      	ldr	r7, [r1, #4]
 8011684:	f007 0703 	and.w	r7, r7, #3
 8011688:	fa07 f70e 	lsl.w	r7, r7, lr
 801168c:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 801168e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011690:	684e      	ldr	r6, [r1, #4]
 8011692:	1e77      	subs	r7, r6, #1
 8011694:	2f01      	cmp	r7, #1
 8011696:	d903      	bls.n	80116a0 <HAL_GPIO_Init+0xec>
 8011698:	2e11      	cmp	r6, #17
 801169a:	d001      	beq.n	80116a0 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801169c:	2e12      	cmp	r6, #18
 801169e:	d10f      	bne.n	80116c0 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 80116a0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80116a2:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80116a4:	68cf      	ldr	r7, [r1, #12]
 80116a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80116aa:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80116ac:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80116ae:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80116b0:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80116b4:	684e      	ldr	r6, [r1, #4]
 80116b6:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80116ba:	40a6      	lsls	r6, r4
 80116bc:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80116be:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80116c0:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80116c2:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80116c4:	688b      	ldr	r3, [r1, #8]
 80116c6:	fa03 f30e 	lsl.w	r3, r3, lr
 80116ca:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80116cc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80116ce:	684b      	ldr	r3, [r1, #4]
 80116d0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80116d4:	d0bd      	beq.n	8011652 <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80116d6:	2300      	movs	r3, #0
 80116d8:	9301      	str	r3, [sp, #4]
 80116da:	4b26      	ldr	r3, [pc, #152]	; (8011774 <HAL_GPIO_Init+0x1c0>)
 80116dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80116de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80116e2:	645a      	str	r2, [r3, #68]	; 0x44
 80116e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116ea:	9301      	str	r3, [sp, #4]
 80116ec:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80116ee:	08a3      	lsrs	r3, r4, #2
 80116f0:	1c9e      	adds	r6, r3, #2
 80116f2:	4a1e      	ldr	r2, [pc, #120]	; (801176c <HAL_GPIO_Init+0x1b8>)
 80116f4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80116f8:	f004 0603 	and.w	r6, r4, #3
 80116fc:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8011700:	260f      	movs	r6, #15
 8011702:	fa06 f60e 	lsl.w	r6, r6, lr
 8011706:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801170a:	4f1b      	ldr	r7, [pc, #108]	; (8011778 <HAL_GPIO_Init+0x1c4>)
 801170c:	42b8      	cmp	r0, r7
 801170e:	f43f af6b 	beq.w	80115e8 <HAL_GPIO_Init+0x34>
 8011712:	4e1a      	ldr	r6, [pc, #104]	; (801177c <HAL_GPIO_Init+0x1c8>)
 8011714:	42b0      	cmp	r0, r6
 8011716:	d01a      	beq.n	801174e <HAL_GPIO_Init+0x19a>
 8011718:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801171c:	42b0      	cmp	r0, r6
 801171e:	d018      	beq.n	8011752 <HAL_GPIO_Init+0x19e>
 8011720:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011724:	42b0      	cmp	r0, r6
 8011726:	d016      	beq.n	8011756 <HAL_GPIO_Init+0x1a2>
 8011728:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801172c:	42b0      	cmp	r0, r6
 801172e:	d014      	beq.n	801175a <HAL_GPIO_Init+0x1a6>
 8011730:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011734:	42b0      	cmp	r0, r6
 8011736:	d012      	beq.n	801175e <HAL_GPIO_Init+0x1aa>
 8011738:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801173c:	42b0      	cmp	r0, r6
 801173e:	d010      	beq.n	8011762 <HAL_GPIO_Init+0x1ae>
 8011740:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011744:	42b0      	cmp	r0, r6
 8011746:	f43f af4d 	beq.w	80115e4 <HAL_GPIO_Init+0x30>
 801174a:	2608      	movs	r6, #8
 801174c:	e74d      	b.n	80115ea <HAL_GPIO_Init+0x36>
 801174e:	2601      	movs	r6, #1
 8011750:	e74b      	b.n	80115ea <HAL_GPIO_Init+0x36>
 8011752:	2602      	movs	r6, #2
 8011754:	e749      	b.n	80115ea <HAL_GPIO_Init+0x36>
 8011756:	2603      	movs	r6, #3
 8011758:	e747      	b.n	80115ea <HAL_GPIO_Init+0x36>
 801175a:	2604      	movs	r6, #4
 801175c:	e745      	b.n	80115ea <HAL_GPIO_Init+0x36>
 801175e:	2605      	movs	r6, #5
 8011760:	e743      	b.n	80115ea <HAL_GPIO_Init+0x36>
 8011762:	2606      	movs	r6, #6
 8011764:	e741      	b.n	80115ea <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8011766:	b003      	add	sp, #12
 8011768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801176a:	bf00      	nop
 801176c:	40013800 	.word	0x40013800
 8011770:	40013c00 	.word	0x40013c00
 8011774:	40023800 	.word	0x40023800
 8011778:	40020000 	.word	0x40020000
 801177c:	40020400 	.word	0x40020400

08011780 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011780:	2300      	movs	r3, #0
 8011782:	2b0f      	cmp	r3, #15
 8011784:	f200 8085 	bhi.w	8011892 <HAL_GPIO_DeInit+0x112>
{
 8011788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801178a:	e009      	b.n	80117a0 <HAL_GPIO_DeInit+0x20>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801178c:	2607      	movs	r6, #7
 801178e:	e000      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 8011790:	2600      	movs	r6, #0
 8011792:	fa06 f202 	lsl.w	r2, r6, r2
 8011796:	4294      	cmp	r4, r2
 8011798:	d062      	beq.n	8011860 <HAL_GPIO_DeInit+0xe0>
  for(position = 0U; position < GPIO_NUMBER; position++)
 801179a:	3301      	adds	r3, #1
 801179c:	2b0f      	cmp	r3, #15
 801179e:	d877      	bhi.n	8011890 <HAL_GPIO_DeInit+0x110>
    ioposition = 0x01U << position;
 80117a0:	2201      	movs	r2, #1
 80117a2:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80117a4:	ea02 0501 	and.w	r5, r2, r1
    if(iocurrent == ioposition)
 80117a8:	42aa      	cmp	r2, r5
 80117aa:	d1f6      	bne.n	801179a <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80117ac:	6806      	ldr	r6, [r0, #0]
 80117ae:	005f      	lsls	r7, r3, #1
 80117b0:	2403      	movs	r4, #3
 80117b2:	40bc      	lsls	r4, r7
 80117b4:	43e4      	mvns	r4, r4
 80117b6:	4026      	ands	r6, r4
 80117b8:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80117ba:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80117be:	f10e 0e08 	add.w	lr, lr, #8
 80117c2:	f850 c02e 	ldr.w	ip, [r0, lr, lsl #2]
 80117c6:	f003 0607 	and.w	r6, r3, #7
 80117ca:	00b6      	lsls	r6, r6, #2
 80117cc:	270f      	movs	r7, #15
 80117ce:	fa07 f606 	lsl.w	r6, r7, r6
 80117d2:	ea2c 0606 	bic.w	r6, ip, r6
 80117d6:	f840 602e 	str.w	r6, [r0, lr, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80117da:	6886      	ldr	r6, [r0, #8]
 80117dc:	4026      	ands	r6, r4
 80117de:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80117e0:	6846      	ldr	r6, [r0, #4]
 80117e2:	ea26 0202 	bic.w	r2, r6, r2
 80117e6:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80117e8:	68c2      	ldr	r2, [r0, #12]
 80117ea:	4014      	ands	r4, r2
 80117ec:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2U];
 80117ee:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80117f2:	f10e 0402 	add.w	r4, lr, #2
 80117f6:	4a27      	ldr	r2, [pc, #156]	; (8011894 <HAL_GPIO_DeInit+0x114>)
 80117f8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80117fc:	f003 0203 	and.w	r2, r3, #3
 8011800:	0092      	lsls	r2, r2, #2
 8011802:	4097      	lsls	r7, r2
 8011804:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8011806:	4e24      	ldr	r6, [pc, #144]	; (8011898 <HAL_GPIO_DeInit+0x118>)
 8011808:	42b0      	cmp	r0, r6
 801180a:	d0c1      	beq.n	8011790 <HAL_GPIO_DeInit+0x10>
 801180c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011810:	42b0      	cmp	r0, r6
 8011812:	d019      	beq.n	8011848 <HAL_GPIO_DeInit+0xc8>
 8011814:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011818:	42b0      	cmp	r0, r6
 801181a:	d017      	beq.n	801184c <HAL_GPIO_DeInit+0xcc>
 801181c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011820:	42b0      	cmp	r0, r6
 8011822:	d015      	beq.n	8011850 <HAL_GPIO_DeInit+0xd0>
 8011824:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011828:	42b0      	cmp	r0, r6
 801182a:	d013      	beq.n	8011854 <HAL_GPIO_DeInit+0xd4>
 801182c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011830:	42b0      	cmp	r0, r6
 8011832:	d011      	beq.n	8011858 <HAL_GPIO_DeInit+0xd8>
 8011834:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011838:	42b0      	cmp	r0, r6
 801183a:	d00f      	beq.n	801185c <HAL_GPIO_DeInit+0xdc>
 801183c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011840:	42b0      	cmp	r0, r6
 8011842:	d0a3      	beq.n	801178c <HAL_GPIO_DeInit+0xc>
 8011844:	2608      	movs	r6, #8
 8011846:	e7a4      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 8011848:	2601      	movs	r6, #1
 801184a:	e7a2      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 801184c:	2602      	movs	r6, #2
 801184e:	e7a0      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 8011850:	2603      	movs	r6, #3
 8011852:	e79e      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 8011854:	2604      	movs	r6, #4
 8011856:	e79c      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 8011858:	2605      	movs	r6, #5
 801185a:	e79a      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
 801185c:	2606      	movs	r6, #6
 801185e:	e798      	b.n	8011792 <HAL_GPIO_DeInit+0x12>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011860:	4e0c      	ldr	r6, [pc, #48]	; (8011894 <HAL_GPIO_DeInit+0x114>)
 8011862:	f10e 0202 	add.w	r2, lr, #2
 8011866:	f856 4022 	ldr.w	r4, [r6, r2, lsl #2]
 801186a:	ea24 0707 	bic.w	r7, r4, r7
 801186e:	f846 7022 	str.w	r7, [r6, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8011872:	4c0a      	ldr	r4, [pc, #40]	; (801189c <HAL_GPIO_DeInit+0x11c>)
 8011874:	6826      	ldr	r6, [r4, #0]
 8011876:	43ea      	mvns	r2, r5
 8011878:	4016      	ands	r6, r2
 801187a:	6026      	str	r6, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801187c:	6865      	ldr	r5, [r4, #4]
 801187e:	4015      	ands	r5, r2
 8011880:	6065      	str	r5, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8011882:	68a5      	ldr	r5, [r4, #8]
 8011884:	4015      	ands	r5, r2
 8011886:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8011888:	68e5      	ldr	r5, [r4, #12]
 801188a:	402a      	ands	r2, r5
 801188c:	60e2      	str	r2, [r4, #12]
 801188e:	e784      	b.n	801179a <HAL_GPIO_DeInit+0x1a>
      }
    }
  }
}
 8011890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011892:	4770      	bx	lr
 8011894:	40013800 	.word	0x40013800
 8011898:	40020000 	.word	0x40020000
 801189c:	40013c00 	.word	0x40013c00

080118a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80118a0:	b912      	cbnz	r2, 80118a8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80118a2:	0409      	lsls	r1, r1, #16
 80118a4:	6181      	str	r1, [r0, #24]
 80118a6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80118a8:	6181      	str	r1, [r0, #24]
 80118aa:	4770      	bx	lr

080118ac <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80118ac:	6943      	ldr	r3, [r0, #20]
 80118ae:	4059      	eors	r1, r3
 80118b0:	6141      	str	r1, [r0, #20]
 80118b2:	4770      	bx	lr

080118b4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80118b4:	2800      	cmp	r0, #0
 80118b6:	f000 81bb 	beq.w	8011c30 <HAL_RCC_OscConfig+0x37c>
{
 80118ba:	b570      	push	{r4, r5, r6, lr}
 80118bc:	b082      	sub	sp, #8
 80118be:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80118c0:	6803      	ldr	r3, [r0, #0]
 80118c2:	f013 0f01 	tst.w	r3, #1
 80118c6:	d03b      	beq.n	8011940 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80118c8:	4ba7      	ldr	r3, [pc, #668]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	f003 030c 	and.w	r3, r3, #12
 80118d0:	2b04      	cmp	r3, #4
 80118d2:	d02c      	beq.n	801192e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80118d4:	4ba4      	ldr	r3, [pc, #656]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80118d6:	689b      	ldr	r3, [r3, #8]
 80118d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80118dc:	2b08      	cmp	r3, #8
 80118de:	d021      	beq.n	8011924 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80118e0:	6863      	ldr	r3, [r4, #4]
 80118e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118e6:	d04f      	beq.n	8011988 <HAL_RCC_OscConfig+0xd4>
 80118e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80118ec:	d052      	beq.n	8011994 <HAL_RCC_OscConfig+0xe0>
 80118ee:	4b9e      	ldr	r3, [pc, #632]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80118f6:	601a      	str	r2, [r3, #0]
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80118fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011900:	6863      	ldr	r3, [r4, #4]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d050      	beq.n	80119a8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011906:	f7fe fd5b 	bl	80103c0 <HAL_GetTick>
 801190a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801190c:	4b96      	ldr	r3, [pc, #600]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8011914:	d114      	bne.n	8011940 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011916:	f7fe fd53 	bl	80103c0 <HAL_GetTick>
 801191a:	1b40      	subs	r0, r0, r5
 801191c:	2864      	cmp	r0, #100	; 0x64
 801191e:	d9f5      	bls.n	801190c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8011920:	2003      	movs	r0, #3
 8011922:	e18a      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011924:	4b90      	ldr	r3, [pc, #576]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 801192c:	d0d8      	beq.n	80118e0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801192e:	4b8e      	ldr	r3, [pc, #568]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8011936:	d003      	beq.n	8011940 <HAL_RCC_OscConfig+0x8c>
 8011938:	6863      	ldr	r3, [r4, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	f000 817a 	beq.w	8011c34 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011940:	6823      	ldr	r3, [r4, #0]
 8011942:	f013 0f02 	tst.w	r3, #2
 8011946:	d055      	beq.n	80119f4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011948:	4b87      	ldr	r3, [pc, #540]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 801194a:	689b      	ldr	r3, [r3, #8]
 801194c:	f013 0f0c 	tst.w	r3, #12
 8011950:	d03e      	beq.n	80119d0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011952:	4b85      	ldr	r3, [pc, #532]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011954:	689b      	ldr	r3, [r3, #8]
 8011956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801195a:	2b08      	cmp	r3, #8
 801195c:	d033      	beq.n	80119c6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801195e:	68e3      	ldr	r3, [r4, #12]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d068      	beq.n	8011a36 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011964:	2201      	movs	r2, #1
 8011966:	4b81      	ldr	r3, [pc, #516]	; (8011b6c <HAL_RCC_OscConfig+0x2b8>)
 8011968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801196a:	f7fe fd29 	bl	80103c0 <HAL_GetTick>
 801196e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011970:	4b7d      	ldr	r3, [pc, #500]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f013 0f02 	tst.w	r3, #2
 8011978:	d154      	bne.n	8011a24 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801197a:	f7fe fd21 	bl	80103c0 <HAL_GetTick>
 801197e:	1b40      	subs	r0, r0, r5
 8011980:	2802      	cmp	r0, #2
 8011982:	d9f5      	bls.n	8011970 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8011984:	2003      	movs	r0, #3
 8011986:	e158      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011988:	4a77      	ldr	r2, [pc, #476]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 801198a:	6813      	ldr	r3, [r2, #0]
 801198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011990:	6013      	str	r3, [r2, #0]
 8011992:	e7b5      	b.n	8011900 <HAL_RCC_OscConfig+0x4c>
 8011994:	4b74      	ldr	r3, [pc, #464]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801199c:	601a      	str	r2, [r3, #0]
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80119a4:	601a      	str	r2, [r3, #0]
 80119a6:	e7ab      	b.n	8011900 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80119a8:	f7fe fd0a 	bl	80103c0 <HAL_GetTick>
 80119ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80119ae:	4b6e      	ldr	r3, [pc, #440]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80119b6:	d0c3      	beq.n	8011940 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80119b8:	f7fe fd02 	bl	80103c0 <HAL_GetTick>
 80119bc:	1b40      	subs	r0, r0, r5
 80119be:	2864      	cmp	r0, #100	; 0x64
 80119c0:	d9f5      	bls.n	80119ae <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80119c2:	2003      	movs	r0, #3
 80119c4:	e139      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80119c6:	4b68      	ldr	r3, [pc, #416]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80119ce:	d1c6      	bne.n	801195e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80119d0:	4b65      	ldr	r3, [pc, #404]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f013 0f02 	tst.w	r3, #2
 80119d8:	d004      	beq.n	80119e4 <HAL_RCC_OscConfig+0x130>
 80119da:	68e3      	ldr	r3, [r4, #12]
 80119dc:	2b01      	cmp	r3, #1
 80119de:	d001      	beq.n	80119e4 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80119e0:	2001      	movs	r0, #1
 80119e2:	e12a      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80119e4:	4a60      	ldr	r2, [pc, #384]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 80119e6:	6813      	ldr	r3, [r2, #0]
 80119e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80119ec:	6921      	ldr	r1, [r4, #16]
 80119ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80119f2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80119f4:	6823      	ldr	r3, [r4, #0]
 80119f6:	f013 0f08 	tst.w	r3, #8
 80119fa:	d040      	beq.n	8011a7e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80119fc:	6963      	ldr	r3, [r4, #20]
 80119fe:	b363      	cbz	r3, 8011a5a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011a00:	2201      	movs	r2, #1
 8011a02:	4b5b      	ldr	r3, [pc, #364]	; (8011b70 <HAL_RCC_OscConfig+0x2bc>)
 8011a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011a06:	f7fe fcdb 	bl	80103c0 <HAL_GetTick>
 8011a0a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011a0c:	4b56      	ldr	r3, [pc, #344]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a10:	f013 0f02 	tst.w	r3, #2
 8011a14:	d133      	bne.n	8011a7e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011a16:	f7fe fcd3 	bl	80103c0 <HAL_GetTick>
 8011a1a:	1b40      	subs	r0, r0, r5
 8011a1c:	2802      	cmp	r0, #2
 8011a1e:	d9f5      	bls.n	8011a0c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8011a20:	2003      	movs	r0, #3
 8011a22:	e10a      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a24:	4a50      	ldr	r2, [pc, #320]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a26:	6813      	ldr	r3, [r2, #0]
 8011a28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011a2c:	6921      	ldr	r1, [r4, #16]
 8011a2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011a32:	6013      	str	r3, [r2, #0]
 8011a34:	e7de      	b.n	80119f4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8011a36:	2200      	movs	r2, #0
 8011a38:	4b4c      	ldr	r3, [pc, #304]	; (8011b6c <HAL_RCC_OscConfig+0x2b8>)
 8011a3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011a3c:	f7fe fcc0 	bl	80103c0 <HAL_GetTick>
 8011a40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011a42:	4b49      	ldr	r3, [pc, #292]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f013 0f02 	tst.w	r3, #2
 8011a4a:	d0d3      	beq.n	80119f4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011a4c:	f7fe fcb8 	bl	80103c0 <HAL_GetTick>
 8011a50:	1b40      	subs	r0, r0, r5
 8011a52:	2802      	cmp	r0, #2
 8011a54:	d9f5      	bls.n	8011a42 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8011a56:	2003      	movs	r0, #3
 8011a58:	e0ef      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	4b44      	ldr	r3, [pc, #272]	; (8011b70 <HAL_RCC_OscConfig+0x2bc>)
 8011a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011a60:	f7fe fcae 	bl	80103c0 <HAL_GetTick>
 8011a64:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011a66:	4b40      	ldr	r3, [pc, #256]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a6a:	f013 0f02 	tst.w	r3, #2
 8011a6e:	d006      	beq.n	8011a7e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011a70:	f7fe fca6 	bl	80103c0 <HAL_GetTick>
 8011a74:	1b40      	subs	r0, r0, r5
 8011a76:	2802      	cmp	r0, #2
 8011a78:	d9f5      	bls.n	8011a66 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8011a7a:	2003      	movs	r0, #3
 8011a7c:	e0dd      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011a7e:	6823      	ldr	r3, [r4, #0]
 8011a80:	f013 0f04 	tst.w	r3, #4
 8011a84:	d079      	beq.n	8011b7a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011a86:	4b38      	ldr	r3, [pc, #224]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a8a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8011a8e:	d133      	bne.n	8011af8 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011a90:	2300      	movs	r3, #0
 8011a92:	9301      	str	r3, [sp, #4]
 8011a94:	4b34      	ldr	r3, [pc, #208]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8011a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8011aa8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011aaa:	4b32      	ldr	r3, [pc, #200]	; (8011b74 <HAL_RCC_OscConfig+0x2c0>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011ab2:	d023      	beq.n	8011afc <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011ab4:	68a3      	ldr	r3, [r4, #8]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d034      	beq.n	8011b24 <HAL_RCC_OscConfig+0x270>
 8011aba:	2b05      	cmp	r3, #5
 8011abc:	d038      	beq.n	8011b30 <HAL_RCC_OscConfig+0x27c>
 8011abe:	4b2a      	ldr	r3, [pc, #168]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011ac0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011ac2:	f022 0201 	bic.w	r2, r2, #1
 8011ac6:	671a      	str	r2, [r3, #112]	; 0x70
 8011ac8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011aca:	f022 0204 	bic.w	r2, r2, #4
 8011ace:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011ad0:	68a3      	ldr	r3, [r4, #8]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d036      	beq.n	8011b44 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011ad6:	f7fe fc73 	bl	80103c0 <HAL_GetTick>
 8011ada:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011adc:	4b22      	ldr	r3, [pc, #136]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ae0:	f013 0f02 	tst.w	r3, #2
 8011ae4:	d148      	bne.n	8011b78 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011ae6:	f7fe fc6b 	bl	80103c0 <HAL_GetTick>
 8011aea:	1b80      	subs	r0, r0, r6
 8011aec:	f241 3388 	movw	r3, #5000	; 0x1388
 8011af0:	4298      	cmp	r0, r3
 8011af2:	d9f3      	bls.n	8011adc <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8011af4:	2003      	movs	r0, #3
 8011af6:	e0a0      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8011af8:	2500      	movs	r5, #0
 8011afa:	e7d6      	b.n	8011aaa <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011afc:	4a1d      	ldr	r2, [pc, #116]	; (8011b74 <HAL_RCC_OscConfig+0x2c0>)
 8011afe:	6813      	ldr	r3, [r2, #0]
 8011b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b04:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8011b06:	f7fe fc5b 	bl	80103c0 <HAL_GetTick>
 8011b0a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011b0c:	4b19      	ldr	r3, [pc, #100]	; (8011b74 <HAL_RCC_OscConfig+0x2c0>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011b14:	d1ce      	bne.n	8011ab4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011b16:	f7fe fc53 	bl	80103c0 <HAL_GetTick>
 8011b1a:	1b80      	subs	r0, r0, r6
 8011b1c:	2802      	cmp	r0, #2
 8011b1e:	d9f5      	bls.n	8011b0c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8011b20:	2003      	movs	r0, #3
 8011b22:	e08a      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011b24:	4a10      	ldr	r2, [pc, #64]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011b26:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8011b28:	f043 0301 	orr.w	r3, r3, #1
 8011b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8011b2e:	e7cf      	b.n	8011ad0 <HAL_RCC_OscConfig+0x21c>
 8011b30:	4b0d      	ldr	r3, [pc, #52]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011b32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011b34:	f042 0204 	orr.w	r2, r2, #4
 8011b38:	671a      	str	r2, [r3, #112]	; 0x70
 8011b3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011b3c:	f042 0201 	orr.w	r2, r2, #1
 8011b40:	671a      	str	r2, [r3, #112]	; 0x70
 8011b42:	e7c5      	b.n	8011ad0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011b44:	f7fe fc3c 	bl	80103c0 <HAL_GetTick>
 8011b48:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011b4a:	4b07      	ldr	r3, [pc, #28]	; (8011b68 <HAL_RCC_OscConfig+0x2b4>)
 8011b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b4e:	f013 0f02 	tst.w	r3, #2
 8011b52:	d011      	beq.n	8011b78 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011b54:	f7fe fc34 	bl	80103c0 <HAL_GetTick>
 8011b58:	1b80      	subs	r0, r0, r6
 8011b5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8011b5e:	4298      	cmp	r0, r3
 8011b60:	d9f3      	bls.n	8011b4a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8011b62:	2003      	movs	r0, #3
 8011b64:	e069      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
 8011b66:	bf00      	nop
 8011b68:	40023800 	.word	0x40023800
 8011b6c:	42470000 	.word	0x42470000
 8011b70:	42470e80 	.word	0x42470e80
 8011b74:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011b78:	b9e5      	cbnz	r5, 8011bb4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011b7a:	69a3      	ldr	r3, [r4, #24]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d05b      	beq.n	8011c38 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011b80:	4a30      	ldr	r2, [pc, #192]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011b82:	6892      	ldr	r2, [r2, #8]
 8011b84:	f002 020c 	and.w	r2, r2, #12
 8011b88:	2a08      	cmp	r2, #8
 8011b8a:	d058      	beq.n	8011c3e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011b8c:	2b02      	cmp	r3, #2
 8011b8e:	d017      	beq.n	8011bc0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011b90:	2200      	movs	r2, #0
 8011b92:	4b2d      	ldr	r3, [pc, #180]	; (8011c48 <HAL_RCC_OscConfig+0x394>)
 8011b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b96:	f7fe fc13 	bl	80103c0 <HAL_GetTick>
 8011b9a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011b9c:	4b29      	ldr	r3, [pc, #164]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011ba4:	d042      	beq.n	8011c2c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011ba6:	f7fe fc0b 	bl	80103c0 <HAL_GetTick>
 8011baa:	1b00      	subs	r0, r0, r4
 8011bac:	2802      	cmp	r0, #2
 8011bae:	d9f5      	bls.n	8011b9c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8011bb0:	2003      	movs	r0, #3
 8011bb2:	e042      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011bb4:	4a23      	ldr	r2, [pc, #140]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011bb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8011bbe:	e7dc      	b.n	8011b7a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	4b21      	ldr	r3, [pc, #132]	; (8011c48 <HAL_RCC_OscConfig+0x394>)
 8011bc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011bc6:	f7fe fbfb 	bl	80103c0 <HAL_GetTick>
 8011bca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011bcc:	4b1d      	ldr	r3, [pc, #116]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011bd4:	d006      	beq.n	8011be4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011bd6:	f7fe fbf3 	bl	80103c0 <HAL_GetTick>
 8011bda:	1b40      	subs	r0, r0, r5
 8011bdc:	2802      	cmp	r0, #2
 8011bde:	d9f5      	bls.n	8011bcc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8011be0:	2003      	movs	r0, #3
 8011be2:	e02a      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011be4:	69e3      	ldr	r3, [r4, #28]
 8011be6:	6a22      	ldr	r2, [r4, #32]
 8011be8:	4313      	orrs	r3, r2
 8011bea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011bec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011bf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011bf2:	0852      	lsrs	r2, r2, #1
 8011bf4:	3a01      	subs	r2, #1
 8011bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011bfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011bfc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011c00:	4a10      	ldr	r2, [pc, #64]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011c02:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8011c04:	2201      	movs	r2, #1
 8011c06:	4b10      	ldr	r3, [pc, #64]	; (8011c48 <HAL_RCC_OscConfig+0x394>)
 8011c08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011c0a:	f7fe fbd9 	bl	80103c0 <HAL_GetTick>
 8011c0e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011c10:	4b0c      	ldr	r3, [pc, #48]	; (8011c44 <HAL_RCC_OscConfig+0x390>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011c18:	d106      	bne.n	8011c28 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011c1a:	f7fe fbd1 	bl	80103c0 <HAL_GetTick>
 8011c1e:	1b00      	subs	r0, r0, r4
 8011c20:	2802      	cmp	r0, #2
 8011c22:	d9f5      	bls.n	8011c10 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8011c24:	2003      	movs	r0, #3
 8011c26:	e008      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8011c28:	2000      	movs	r0, #0
 8011c2a:	e006      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
 8011c2c:	2000      	movs	r0, #0
 8011c2e:	e004      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8011c30:	2001      	movs	r0, #1
 8011c32:	4770      	bx	lr
        return HAL_ERROR;
 8011c34:	2001      	movs	r0, #1
 8011c36:	e000      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8011c38:	2000      	movs	r0, #0
}
 8011c3a:	b002      	add	sp, #8
 8011c3c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8011c3e:	2001      	movs	r0, #1
 8011c40:	e7fb      	b.n	8011c3a <HAL_RCC_OscConfig+0x386>
 8011c42:	bf00      	nop
 8011c44:	40023800 	.word	0x40023800
 8011c48:	42470060 	.word	0x42470060

08011c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011c4e:	4b25      	ldr	r3, [pc, #148]	; (8011ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	f003 030c 	and.w	r3, r3, #12
 8011c56:	2b04      	cmp	r3, #4
 8011c58:	d041      	beq.n	8011cde <HAL_RCC_GetSysClockFreq+0x92>
 8011c5a:	2b08      	cmp	r3, #8
 8011c5c:	d001      	beq.n	8011c62 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011c5e:	4822      	ldr	r0, [pc, #136]	; (8011ce8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8011c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011c62:	4b20      	ldr	r3, [pc, #128]	; (8011ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c64:	685a      	ldr	r2, [r3, #4]
 8011c66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8011c70:	d012      	beq.n	8011c98 <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011c72:	4b1c      	ldr	r3, [pc, #112]	; (8011ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c74:	6859      	ldr	r1, [r3, #4]
 8011c76:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	481b      	ldr	r0, [pc, #108]	; (8011cec <HAL_RCC_GetSysClockFreq+0xa0>)
 8011c7e:	fba1 0100 	umull	r0, r1, r1, r0
 8011c82:	f7fe f9ef 	bl	8010064 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011c86:	4b17      	ldr	r3, [pc, #92]	; (8011ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8011c8e:	3301      	adds	r3, #1
 8011c90:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8011c92:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8011c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011c98:	4b12      	ldr	r3, [pc, #72]	; (8011ce4 <HAL_RCC_GetSysClockFreq+0x98>)
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8011ca0:	461e      	mov	r6, r3
 8011ca2:	2700      	movs	r7, #0
 8011ca4:	015c      	lsls	r4, r3, #5
 8011ca6:	2500      	movs	r5, #0
 8011ca8:	1ae4      	subs	r4, r4, r3
 8011caa:	eb65 0507 	sbc.w	r5, r5, r7
 8011cae:	01a9      	lsls	r1, r5, #6
 8011cb0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8011cb4:	01a0      	lsls	r0, r4, #6
 8011cb6:	1b00      	subs	r0, r0, r4
 8011cb8:	eb61 0105 	sbc.w	r1, r1, r5
 8011cbc:	00cb      	lsls	r3, r1, #3
 8011cbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8011cc2:	00c4      	lsls	r4, r0, #3
 8011cc4:	19a0      	adds	r0, r4, r6
 8011cc6:	eb43 0107 	adc.w	r1, r3, r7
 8011cca:	028b      	lsls	r3, r1, #10
 8011ccc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8011cd0:	0284      	lsls	r4, r0, #10
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	f7fe f9c4 	bl	8010064 <__aeabi_uldivmod>
 8011cdc:	e7d3      	b.n	8011c86 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8011cde:	4803      	ldr	r0, [pc, #12]	; (8011cec <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	40023800 	.word	0x40023800
 8011ce8:	00f42400 	.word	0x00f42400
 8011cec:	017d7840 	.word	0x017d7840

08011cf0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	f000 809d 	beq.w	8011e30 <HAL_RCC_ClockConfig+0x140>
{
 8011cf6:	b570      	push	{r4, r5, r6, lr}
 8011cf8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011cfa:	4b4f      	ldr	r3, [pc, #316]	; (8011e38 <HAL_RCC_ClockConfig+0x148>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	f003 030f 	and.w	r3, r3, #15
 8011d02:	428b      	cmp	r3, r1
 8011d04:	d209      	bcs.n	8011d1a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011d06:	b2cb      	uxtb	r3, r1
 8011d08:	4a4b      	ldr	r2, [pc, #300]	; (8011e38 <HAL_RCC_ClockConfig+0x148>)
 8011d0a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011d0c:	6813      	ldr	r3, [r2, #0]
 8011d0e:	f003 030f 	and.w	r3, r3, #15
 8011d12:	4299      	cmp	r1, r3
 8011d14:	d001      	beq.n	8011d1a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8011d16:	2001      	movs	r0, #1
 8011d18:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011d1a:	6823      	ldr	r3, [r4, #0]
 8011d1c:	f013 0f02 	tst.w	r3, #2
 8011d20:	d017      	beq.n	8011d52 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011d22:	f013 0f04 	tst.w	r3, #4
 8011d26:	d004      	beq.n	8011d32 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011d28:	4a44      	ldr	r2, [pc, #272]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d2a:	6893      	ldr	r3, [r2, #8]
 8011d2c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011d30:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011d32:	6823      	ldr	r3, [r4, #0]
 8011d34:	f013 0f08 	tst.w	r3, #8
 8011d38:	d004      	beq.n	8011d44 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011d3a:	4a40      	ldr	r2, [pc, #256]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d3c:	6893      	ldr	r3, [r2, #8]
 8011d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011d42:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011d44:	4a3d      	ldr	r2, [pc, #244]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d46:	6893      	ldr	r3, [r2, #8]
 8011d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011d4c:	68a0      	ldr	r0, [r4, #8]
 8011d4e:	4303      	orrs	r3, r0
 8011d50:	6093      	str	r3, [r2, #8]
 8011d52:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011d54:	6823      	ldr	r3, [r4, #0]
 8011d56:	f013 0f01 	tst.w	r3, #1
 8011d5a:	d032      	beq.n	8011dc2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d5c:	6863      	ldr	r3, [r4, #4]
 8011d5e:	2b01      	cmp	r3, #1
 8011d60:	d021      	beq.n	8011da6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011d62:	1e9a      	subs	r2, r3, #2
 8011d64:	2a01      	cmp	r2, #1
 8011d66:	d925      	bls.n	8011db4 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d68:	4a34      	ldr	r2, [pc, #208]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d6a:	6812      	ldr	r2, [r2, #0]
 8011d6c:	f012 0f02 	tst.w	r2, #2
 8011d70:	d060      	beq.n	8011e34 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011d72:	4932      	ldr	r1, [pc, #200]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d74:	688a      	ldr	r2, [r1, #8]
 8011d76:	f022 0203 	bic.w	r2, r2, #3
 8011d7a:	4313      	orrs	r3, r2
 8011d7c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8011d7e:	f7fe fb1f 	bl	80103c0 <HAL_GetTick>
 8011d82:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011d84:	4b2d      	ldr	r3, [pc, #180]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	f003 030c 	and.w	r3, r3, #12
 8011d8c:	6862      	ldr	r2, [r4, #4]
 8011d8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8011d92:	d016      	beq.n	8011dc2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d94:	f7fe fb14 	bl	80103c0 <HAL_GetTick>
 8011d98:	1b80      	subs	r0, r0, r6
 8011d9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8011d9e:	4298      	cmp	r0, r3
 8011da0:	d9f0      	bls.n	8011d84 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8011da2:	2003      	movs	r0, #3
 8011da4:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011da6:	4a25      	ldr	r2, [pc, #148]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011da8:	6812      	ldr	r2, [r2, #0]
 8011daa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8011dae:	d1e0      	bne.n	8011d72 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8011db0:	2001      	movs	r0, #1
 8011db2:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011db4:	4a21      	ldr	r2, [pc, #132]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011db6:	6812      	ldr	r2, [r2, #0]
 8011db8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8011dbc:	d1d9      	bne.n	8011d72 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8011dbe:	2001      	movs	r0, #1
 8011dc0:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011dc2:	4b1d      	ldr	r3, [pc, #116]	; (8011e38 <HAL_RCC_ClockConfig+0x148>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f003 030f 	and.w	r3, r3, #15
 8011dca:	429d      	cmp	r5, r3
 8011dcc:	d209      	bcs.n	8011de2 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011dce:	b2ea      	uxtb	r2, r5
 8011dd0:	4b19      	ldr	r3, [pc, #100]	; (8011e38 <HAL_RCC_ClockConfig+0x148>)
 8011dd2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f003 030f 	and.w	r3, r3, #15
 8011dda:	429d      	cmp	r5, r3
 8011ddc:	d001      	beq.n	8011de2 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8011dde:	2001      	movs	r0, #1
}
 8011de0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011de2:	6823      	ldr	r3, [r4, #0]
 8011de4:	f013 0f04 	tst.w	r3, #4
 8011de8:	d006      	beq.n	8011df8 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011dea:	4a14      	ldr	r2, [pc, #80]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011dec:	6893      	ldr	r3, [r2, #8]
 8011dee:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8011df2:	68e1      	ldr	r1, [r4, #12]
 8011df4:	430b      	orrs	r3, r1
 8011df6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011df8:	6823      	ldr	r3, [r4, #0]
 8011dfa:	f013 0f08 	tst.w	r3, #8
 8011dfe:	d007      	beq.n	8011e10 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011e00:	4a0e      	ldr	r2, [pc, #56]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011e02:	6893      	ldr	r3, [r2, #8]
 8011e04:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8011e08:	6921      	ldr	r1, [r4, #16]
 8011e0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011e0e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011e10:	f7ff ff1c 	bl	8011c4c <HAL_RCC_GetSysClockFreq>
 8011e14:	4b09      	ldr	r3, [pc, #36]	; (8011e3c <HAL_RCC_ClockConfig+0x14c>)
 8011e16:	689b      	ldr	r3, [r3, #8]
 8011e18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8011e1c:	4a08      	ldr	r2, [pc, #32]	; (8011e40 <HAL_RCC_ClockConfig+0x150>)
 8011e1e:	5cd3      	ldrb	r3, [r2, r3]
 8011e20:	40d8      	lsrs	r0, r3
 8011e22:	4b08      	ldr	r3, [pc, #32]	; (8011e44 <HAL_RCC_ClockConfig+0x154>)
 8011e24:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8011e26:	2000      	movs	r0, #0
 8011e28:	f00c ff1e 	bl	801ec68 <HAL_InitTick>
  return HAL_OK;
 8011e2c:	2000      	movs	r0, #0
 8011e2e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8011e30:	2001      	movs	r0, #1
 8011e32:	4770      	bx	lr
        return HAL_ERROR;
 8011e34:	2001      	movs	r0, #1
 8011e36:	bd70      	pop	{r4, r5, r6, pc}
 8011e38:	40023c00 	.word	0x40023c00
 8011e3c:	40023800 	.word	0x40023800
 8011e40:	08024aec 	.word	0x08024aec
 8011e44:	2000003c 	.word	0x2000003c

08011e48 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8011e48:	4b01      	ldr	r3, [pc, #4]	; (8011e50 <HAL_RCC_GetHCLKFreq+0x8>)
 8011e4a:	6818      	ldr	r0, [r3, #0]
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop
 8011e50:	2000003c 	.word	0x2000003c

08011e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011e54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011e56:	f7ff fff7 	bl	8011e48 <HAL_RCC_GetHCLKFreq>
 8011e5a:	4b04      	ldr	r3, [pc, #16]	; (8011e6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8011e5c:	689b      	ldr	r3, [r3, #8]
 8011e5e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8011e62:	4a03      	ldr	r2, [pc, #12]	; (8011e70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011e64:	5cd3      	ldrb	r3, [r2, r3]
}
 8011e66:	40d8      	lsrs	r0, r3
 8011e68:	bd08      	pop	{r3, pc}
 8011e6a:	bf00      	nop
 8011e6c:	40023800 	.word	0x40023800
 8011e70:	08024afc 	.word	0x08024afc

08011e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011e74:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011e76:	f7ff ffe7 	bl	8011e48 <HAL_RCC_GetHCLKFreq>
 8011e7a:	4b04      	ldr	r3, [pc, #16]	; (8011e8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8011e7c:	689b      	ldr	r3, [r3, #8]
 8011e7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8011e82:	4a03      	ldr	r2, [pc, #12]	; (8011e90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8011e84:	5cd3      	ldrb	r3, [r2, r3]
}
 8011e86:	40d8      	lsrs	r0, r3
 8011e88:	bd08      	pop	{r3, pc}
 8011e8a:	bf00      	nop
 8011e8c:	40023800 	.word	0x40023800
 8011e90:	08024afc 	.word	0x08024afc

08011e94 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011e94:	230f      	movs	r3, #15
 8011e96:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011e98:	4b0b      	ldr	r3, [pc, #44]	; (8011ec8 <HAL_RCC_GetClockConfig+0x34>)
 8011e9a:	689a      	ldr	r2, [r3, #8]
 8011e9c:	f002 0203 	and.w	r2, r2, #3
 8011ea0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8011ea2:	689a      	ldr	r2, [r3, #8]
 8011ea4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8011ea8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011eaa:	689a      	ldr	r2, [r3, #8]
 8011eac:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8011eb0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	08db      	lsrs	r3, r3, #3
 8011eb6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8011eba:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011ebc:	4b03      	ldr	r3, [pc, #12]	; (8011ecc <HAL_RCC_GetClockConfig+0x38>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f003 030f 	and.w	r3, r3, #15
 8011ec4:	600b      	str	r3, [r1, #0]
 8011ec6:	4770      	bx	lr
 8011ec8:	40023800 	.word	0x40023800
 8011ecc:	40023c00 	.word	0x40023c00

08011ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011ed0:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011ed2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011ed4:	6a04      	ldr	r4, [r0, #32]
 8011ed6:	f024 0401 	bic.w	r4, r4, #1
 8011eda:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8011edc:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011ede:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011ee2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011ee6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8011eea:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011eec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8011eee:	6203      	str	r3, [r0, #32]
}
 8011ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ef4:	4770      	bx	lr

08011ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011ef6:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011ef8:	6a03      	ldr	r3, [r0, #32]
 8011efa:	f023 0310 	bic.w	r3, r3, #16
 8011efe:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011f00:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8011f02:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011f04:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011f08:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011f0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8011f10:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011f14:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8011f16:	6203      	str	r3, [r0, #32]
}
 8011f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f1c:	4770      	bx	lr

08011f1e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8011f1e:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8011f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8011f24:	f041 0107 	orr.w	r1, r1, #7
 8011f28:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8011f2a:	6083      	str	r3, [r0, #8]
 8011f2c:	4770      	bx	lr

08011f2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011f2e:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8011f30:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011f32:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8011f36:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8011f3a:	4319      	orrs	r1, r3
 8011f3c:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011f3e:	6084      	str	r4, [r0, #8]
} 
 8011f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f44:	4770      	bx	lr

08011f46 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011f46:	6802      	ldr	r2, [r0, #0]
 8011f48:	68d3      	ldr	r3, [r2, #12]
 8011f4a:	f043 0301 	orr.w	r3, r3, #1
 8011f4e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8011f50:	6802      	ldr	r2, [r0, #0]
 8011f52:	6813      	ldr	r3, [r2, #0]
 8011f54:	f043 0301 	orr.w	r3, r3, #1
 8011f58:	6013      	str	r3, [r2, #0]
}
 8011f5a:	2000      	movs	r0, #0
 8011f5c:	4770      	bx	lr

08011f5e <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8011f5e:	6802      	ldr	r2, [r0, #0]
 8011f60:	68d3      	ldr	r3, [r2, #12]
 8011f62:	f023 0301 	bic.w	r3, r3, #1
 8011f66:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8011f68:	6803      	ldr	r3, [r0, #0]
 8011f6a:	6a19      	ldr	r1, [r3, #32]
 8011f6c:	f241 1211 	movw	r2, #4369	; 0x1111
 8011f70:	4211      	tst	r1, r2
 8011f72:	d108      	bne.n	8011f86 <HAL_TIM_Base_Stop_IT+0x28>
 8011f74:	6a19      	ldr	r1, [r3, #32]
 8011f76:	f240 4244 	movw	r2, #1092	; 0x444
 8011f7a:	4211      	tst	r1, r2
 8011f7c:	d103      	bne.n	8011f86 <HAL_TIM_Base_Stop_IT+0x28>
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	f022 0201 	bic.w	r2, r2, #1
 8011f84:	601a      	str	r2, [r3, #0]
}
 8011f86:	2000      	movs	r0, #0
 8011f88:	4770      	bx	lr

08011f8a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8011f8a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d07d      	beq.n	801208e <HAL_TIM_ConfigClockSource+0x104>
{
 8011f92:	b510      	push	{r4, lr}
 8011f94:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8011f96:	2301      	movs	r3, #1
 8011f98:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8011f9c:	2302      	movs	r3, #2
 8011f9e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8011fa2:	6802      	ldr	r2, [r0, #0]
 8011fa4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8011fae:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8011fb0:	680b      	ldr	r3, [r1, #0]
 8011fb2:	2b40      	cmp	r3, #64	; 0x40
 8011fb4:	d057      	beq.n	8012066 <HAL_TIM_ConfigClockSource+0xdc>
 8011fb6:	d910      	bls.n	8011fda <HAL_TIM_ConfigClockSource+0x50>
 8011fb8:	2b70      	cmp	r3, #112	; 0x70
 8011fba:	d03e      	beq.n	801203a <HAL_TIM_ConfigClockSource+0xb0>
 8011fbc:	d81f      	bhi.n	8011ffe <HAL_TIM_ConfigClockSource+0x74>
 8011fbe:	2b50      	cmp	r3, #80	; 0x50
 8011fc0:	d047      	beq.n	8012052 <HAL_TIM_ConfigClockSource+0xc8>
 8011fc2:	2b60      	cmp	r3, #96	; 0x60
 8011fc4:	d132      	bne.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8011fc6:	68ca      	ldr	r2, [r1, #12]
 8011fc8:	6849      	ldr	r1, [r1, #4]
 8011fca:	6800      	ldr	r0, [r0, #0]
 8011fcc:	f7ff ff93 	bl	8011ef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011fd0:	2160      	movs	r1, #96	; 0x60
 8011fd2:	6820      	ldr	r0, [r4, #0]
 8011fd4:	f7ff ffa3 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8011fd8:	e028      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011fda:	2b10      	cmp	r3, #16
 8011fdc:	d04d      	beq.n	801207a <HAL_TIM_ConfigClockSource+0xf0>
 8011fde:	d908      	bls.n	8011ff2 <HAL_TIM_ConfigClockSource+0x68>
 8011fe0:	2b20      	cmp	r3, #32
 8011fe2:	d04f      	beq.n	8012084 <HAL_TIM_ConfigClockSource+0xfa>
 8011fe4:	2b30      	cmp	r3, #48	; 0x30
 8011fe6:	d121      	bne.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8011fe8:	2130      	movs	r1, #48	; 0x30
 8011fea:	6800      	ldr	r0, [r0, #0]
 8011fec:	f7ff ff97 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8011ff0:	e01c      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011ff2:	b9db      	cbnz	r3, 801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	6800      	ldr	r0, [r0, #0]
 8011ff8:	f7ff ff91 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8011ffc:	e016      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8011ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012002:	d00e      	beq.n	8012022 <HAL_TIM_ConfigClockSource+0x98>
 8012004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012008:	d110      	bne.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance, 
 801200a:	68cb      	ldr	r3, [r1, #12]
 801200c:	684a      	ldr	r2, [r1, #4]
 801200e:	6889      	ldr	r1, [r1, #8]
 8012010:	6800      	ldr	r0, [r0, #0]
 8012012:	f7ff ff8c 	bl	8011f2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012016:	6822      	ldr	r2, [r4, #0]
 8012018:	6893      	ldr	r3, [r2, #8]
 801201a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801201e:	6093      	str	r3, [r2, #8]
    break;
 8012020:	e004      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8012022:	6802      	ldr	r2, [r0, #0]
 8012024:	6893      	ldr	r3, [r2, #8]
 8012026:	f023 0307 	bic.w	r3, r3, #7
 801202a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 801202c:	2301      	movs	r3, #1
 801202e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8012032:	2000      	movs	r0, #0
 8012034:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8012038:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 801203a:	68cb      	ldr	r3, [r1, #12]
 801203c:	684a      	ldr	r2, [r1, #4]
 801203e:	6889      	ldr	r1, [r1, #8]
 8012040:	6800      	ldr	r0, [r0, #0]
 8012042:	f7ff ff74 	bl	8011f2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8012046:	6822      	ldr	r2, [r4, #0]
 8012048:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801204a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 801204e:	6093      	str	r3, [r2, #8]
    break;
 8012050:	e7ec      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8012052:	68ca      	ldr	r2, [r1, #12]
 8012054:	6849      	ldr	r1, [r1, #4]
 8012056:	6800      	ldr	r0, [r0, #0]
 8012058:	f7ff ff3a 	bl	8011ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801205c:	2150      	movs	r1, #80	; 0x50
 801205e:	6820      	ldr	r0, [r4, #0]
 8012060:	f7ff ff5d 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8012064:	e7e2      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8012066:	68ca      	ldr	r2, [r1, #12]
 8012068:	6849      	ldr	r1, [r1, #4]
 801206a:	6800      	ldr	r0, [r0, #0]
 801206c:	f7ff ff30 	bl	8011ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012070:	2140      	movs	r1, #64	; 0x40
 8012072:	6820      	ldr	r0, [r4, #0]
 8012074:	f7ff ff53 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8012078:	e7d8      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 801207a:	2110      	movs	r1, #16
 801207c:	6800      	ldr	r0, [r0, #0]
 801207e:	f7ff ff4e 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 8012082:	e7d3      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8012084:	2120      	movs	r1, #32
 8012086:	6800      	ldr	r0, [r0, #0]
 8012088:	f7ff ff49 	bl	8011f1e <TIM_ITRx_SetConfig>
    break;
 801208c:	e7ce      	b.n	801202c <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 801208e:	2002      	movs	r0, #2
 8012090:	4770      	bx	lr

08012092 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8012092:	4770      	bx	lr

08012094 <HAL_TIM_IC_CaptureCallback>:
{
 8012094:	4770      	bx	lr

08012096 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8012096:	4770      	bx	lr

08012098 <HAL_TIM_TriggerCallback>:
{
 8012098:	4770      	bx	lr

0801209a <HAL_TIM_IRQHandler>:
{
 801209a:	b510      	push	{r4, lr}
 801209c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801209e:	6803      	ldr	r3, [r0, #0]
 80120a0:	691a      	ldr	r2, [r3, #16]
 80120a2:	f012 0f02 	tst.w	r2, #2
 80120a6:	d011      	beq.n	80120cc <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80120a8:	68da      	ldr	r2, [r3, #12]
 80120aa:	f012 0f02 	tst.w	r2, #2
 80120ae:	d00d      	beq.n	80120cc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80120b0:	f06f 0202 	mvn.w	r2, #2
 80120b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80120b6:	2301      	movs	r3, #1
 80120b8:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80120ba:	6803      	ldr	r3, [r0, #0]
 80120bc:	699b      	ldr	r3, [r3, #24]
 80120be:	f013 0f03 	tst.w	r3, #3
 80120c2:	d070      	beq.n	80121a6 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80120c4:	f7ff ffe6 	bl	8012094 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80120c8:	2300      	movs	r3, #0
 80120ca:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	691a      	ldr	r2, [r3, #16]
 80120d0:	f012 0f04 	tst.w	r2, #4
 80120d4:	d012      	beq.n	80120fc <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80120d6:	68da      	ldr	r2, [r3, #12]
 80120d8:	f012 0f04 	tst.w	r2, #4
 80120dc:	d00e      	beq.n	80120fc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80120de:	f06f 0204 	mvn.w	r2, #4
 80120e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80120e4:	2302      	movs	r3, #2
 80120e6:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80120e8:	6823      	ldr	r3, [r4, #0]
 80120ea:	699b      	ldr	r3, [r3, #24]
 80120ec:	f413 7f40 	tst.w	r3, #768	; 0x300
 80120f0:	d05f      	beq.n	80121b2 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80120f2:	4620      	mov	r0, r4
 80120f4:	f7ff ffce 	bl	8012094 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80120f8:	2300      	movs	r3, #0
 80120fa:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80120fc:	6823      	ldr	r3, [r4, #0]
 80120fe:	691a      	ldr	r2, [r3, #16]
 8012100:	f012 0f08 	tst.w	r2, #8
 8012104:	d012      	beq.n	801212c <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8012106:	68da      	ldr	r2, [r3, #12]
 8012108:	f012 0f08 	tst.w	r2, #8
 801210c:	d00e      	beq.n	801212c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801210e:	f06f 0208 	mvn.w	r2, #8
 8012112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012114:	2304      	movs	r3, #4
 8012116:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012118:	6823      	ldr	r3, [r4, #0]
 801211a:	69db      	ldr	r3, [r3, #28]
 801211c:	f013 0f03 	tst.w	r3, #3
 8012120:	d04e      	beq.n	80121c0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8012122:	4620      	mov	r0, r4
 8012124:	f7ff ffb6 	bl	8012094 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012128:	2300      	movs	r3, #0
 801212a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801212c:	6823      	ldr	r3, [r4, #0]
 801212e:	691a      	ldr	r2, [r3, #16]
 8012130:	f012 0f10 	tst.w	r2, #16
 8012134:	d012      	beq.n	801215c <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8012136:	68da      	ldr	r2, [r3, #12]
 8012138:	f012 0f10 	tst.w	r2, #16
 801213c:	d00e      	beq.n	801215c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801213e:	f06f 0210 	mvn.w	r2, #16
 8012142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012144:	2308      	movs	r3, #8
 8012146:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012148:	6823      	ldr	r3, [r4, #0]
 801214a:	69db      	ldr	r3, [r3, #28]
 801214c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8012150:	d03d      	beq.n	80121ce <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8012152:	4620      	mov	r0, r4
 8012154:	f7ff ff9e 	bl	8012094 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012158:	2300      	movs	r3, #0
 801215a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801215c:	6823      	ldr	r3, [r4, #0]
 801215e:	691a      	ldr	r2, [r3, #16]
 8012160:	f012 0f01 	tst.w	r2, #1
 8012164:	d003      	beq.n	801216e <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8012166:	68da      	ldr	r2, [r3, #12]
 8012168:	f012 0f01 	tst.w	r2, #1
 801216c:	d136      	bne.n	80121dc <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801216e:	6823      	ldr	r3, [r4, #0]
 8012170:	691a      	ldr	r2, [r3, #16]
 8012172:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012176:	d003      	beq.n	8012180 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8012178:	68da      	ldr	r2, [r3, #12]
 801217a:	f012 0f80 	tst.w	r2, #128	; 0x80
 801217e:	d134      	bne.n	80121ea <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012180:	6823      	ldr	r3, [r4, #0]
 8012182:	691a      	ldr	r2, [r3, #16]
 8012184:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012188:	d003      	beq.n	8012192 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 801218a:	68da      	ldr	r2, [r3, #12]
 801218c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012190:	d132      	bne.n	80121f8 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012192:	6823      	ldr	r3, [r4, #0]
 8012194:	691a      	ldr	r2, [r3, #16]
 8012196:	f012 0f20 	tst.w	r2, #32
 801219a:	d003      	beq.n	80121a4 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 801219c:	68da      	ldr	r2, [r3, #12]
 801219e:	f012 0f20 	tst.w	r2, #32
 80121a2:	d130      	bne.n	8012206 <HAL_TIM_IRQHandler+0x16c>
 80121a4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80121a6:	f7ff ff74 	bl	8012092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121aa:	4620      	mov	r0, r4
 80121ac:	f7ff ff73 	bl	8012096 <HAL_TIM_PWM_PulseFinishedCallback>
 80121b0:	e78a      	b.n	80120c8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121b2:	4620      	mov	r0, r4
 80121b4:	f7ff ff6d 	bl	8012092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121b8:	4620      	mov	r0, r4
 80121ba:	f7ff ff6c 	bl	8012096 <HAL_TIM_PWM_PulseFinishedCallback>
 80121be:	e79b      	b.n	80120f8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121c0:	4620      	mov	r0, r4
 80121c2:	f7ff ff66 	bl	8012092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80121c6:	4620      	mov	r0, r4
 80121c8:	f7ff ff65 	bl	8012096 <HAL_TIM_PWM_PulseFinishedCallback>
 80121cc:	e7ac      	b.n	8012128 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80121ce:	4620      	mov	r0, r4
 80121d0:	f7ff ff5f 	bl	8012092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80121d4:	4620      	mov	r0, r4
 80121d6:	f7ff ff5e 	bl	8012096 <HAL_TIM_PWM_PulseFinishedCallback>
 80121da:	e7bd      	b.n	8012158 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80121dc:	f06f 0201 	mvn.w	r2, #1
 80121e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80121e2:	4620      	mov	r0, r4
 80121e4:	f00b fffe 	bl	801e1e4 <HAL_TIM_PeriodElapsedCallback>
 80121e8:	e7c1      	b.n	801216e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80121ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80121ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80121f0:	4620      	mov	r0, r4
 80121f2:	f000 f8e0 	bl	80123b6 <HAL_TIMEx_BreakCallback>
 80121f6:	e7c3      	b.n	8012180 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80121f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80121fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80121fe:	4620      	mov	r0, r4
 8012200:	f7ff ff4a 	bl	8012098 <HAL_TIM_TriggerCallback>
 8012204:	e7c5      	b.n	8012192 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012206:	f06f 0220 	mvn.w	r2, #32
 801220a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 801220c:	4620      	mov	r0, r4
 801220e:	f000 f8d1 	bl	80123b4 <HAL_TIMEx_CommutationCallback>
}
 8012212:	e7c7      	b.n	80121a4 <HAL_TIM_IRQHandler+0x10a>

08012214 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8012214:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8012216:	4a45      	ldr	r2, [pc, #276]	; (801232c <TIM_Base_SetConfig+0x118>)
 8012218:	4290      	cmp	r0, r2
 801221a:	d04a      	beq.n	80122b2 <TIM_Base_SetConfig+0x9e>
 801221c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012220:	d049      	beq.n	80122b6 <TIM_Base_SetConfig+0xa2>
 8012222:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8012226:	4290      	cmp	r0, r2
 8012228:	d047      	beq.n	80122ba <TIM_Base_SetConfig+0xa6>
 801222a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801222e:	4290      	cmp	r0, r2
 8012230:	d045      	beq.n	80122be <TIM_Base_SetConfig+0xaa>
 8012232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012236:	4290      	cmp	r0, r2
 8012238:	d043      	beq.n	80122c2 <TIM_Base_SetConfig+0xae>
 801223a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801223e:	4290      	cmp	r0, r2
 8012240:	d035      	beq.n	80122ae <TIM_Base_SetConfig+0x9a>
 8012242:	2200      	movs	r2, #0
 8012244:	b11a      	cbz	r2, 801224e <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801224a:	684a      	ldr	r2, [r1, #4]
 801224c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 801224e:	4a37      	ldr	r2, [pc, #220]	; (801232c <TIM_Base_SetConfig+0x118>)
 8012250:	4290      	cmp	r0, r2
 8012252:	d03a      	beq.n	80122ca <TIM_Base_SetConfig+0xb6>
 8012254:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012258:	d050      	beq.n	80122fc <TIM_Base_SetConfig+0xe8>
 801225a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 801225e:	4290      	cmp	r0, r2
 8012260:	d04e      	beq.n	8012300 <TIM_Base_SetConfig+0xec>
 8012262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012266:	4290      	cmp	r0, r2
 8012268:	d04c      	beq.n	8012304 <TIM_Base_SetConfig+0xf0>
 801226a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801226e:	4290      	cmp	r0, r2
 8012270:	d04a      	beq.n	8012308 <TIM_Base_SetConfig+0xf4>
 8012272:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8012276:	4290      	cmp	r0, r2
 8012278:	d048      	beq.n	801230c <TIM_Base_SetConfig+0xf8>
 801227a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 801227e:	4290      	cmp	r0, r2
 8012280:	d046      	beq.n	8012310 <TIM_Base_SetConfig+0xfc>
 8012282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012286:	4290      	cmp	r0, r2
 8012288:	d044      	beq.n	8012314 <TIM_Base_SetConfig+0x100>
 801228a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801228e:	4290      	cmp	r0, r2
 8012290:	d042      	beq.n	8012318 <TIM_Base_SetConfig+0x104>
 8012292:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8012296:	4290      	cmp	r0, r2
 8012298:	d040      	beq.n	801231c <TIM_Base_SetConfig+0x108>
 801229a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801229e:	4290      	cmp	r0, r2
 80122a0:	d03e      	beq.n	8012320 <TIM_Base_SetConfig+0x10c>
 80122a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80122a6:	4290      	cmp	r0, r2
 80122a8:	d00d      	beq.n	80122c6 <TIM_Base_SetConfig+0xb2>
 80122aa:	2200      	movs	r2, #0
 80122ac:	e00e      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80122ae:	2201      	movs	r2, #1
 80122b0:	e7c8      	b.n	8012244 <TIM_Base_SetConfig+0x30>
 80122b2:	2201      	movs	r2, #1
 80122b4:	e7c6      	b.n	8012244 <TIM_Base_SetConfig+0x30>
 80122b6:	2201      	movs	r2, #1
 80122b8:	e7c4      	b.n	8012244 <TIM_Base_SetConfig+0x30>
 80122ba:	2201      	movs	r2, #1
 80122bc:	e7c2      	b.n	8012244 <TIM_Base_SetConfig+0x30>
 80122be:	2201      	movs	r2, #1
 80122c0:	e7c0      	b.n	8012244 <TIM_Base_SetConfig+0x30>
 80122c2:	2201      	movs	r2, #1
 80122c4:	e7be      	b.n	8012244 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80122c6:	2201      	movs	r2, #1
 80122c8:	e000      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 80122ca:	2201      	movs	r2, #1
 80122cc:	b11a      	cbz	r2, 80122d6 <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 80122ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80122d2:	68ca      	ldr	r2, [r1, #12]
 80122d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80122d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80122d8:	688b      	ldr	r3, [r1, #8]
 80122da:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80122dc:	680b      	ldr	r3, [r1, #0]
 80122de:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80122e0:	4b12      	ldr	r3, [pc, #72]	; (801232c <TIM_Base_SetConfig+0x118>)
 80122e2:	4298      	cmp	r0, r3
 80122e4:	d020      	beq.n	8012328 <TIM_Base_SetConfig+0x114>
 80122e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80122ea:	4298      	cmp	r0, r3
 80122ec:	d01a      	beq.n	8012324 <TIM_Base_SetConfig+0x110>
 80122ee:	2300      	movs	r3, #0
 80122f0:	b10b      	cbz	r3, 80122f6 <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 80122f2:	690b      	ldr	r3, [r1, #16]
 80122f4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80122f6:	2301      	movs	r3, #1
 80122f8:	6143      	str	r3, [r0, #20]
 80122fa:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80122fc:	2201      	movs	r2, #1
 80122fe:	e7e5      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012300:	2201      	movs	r2, #1
 8012302:	e7e3      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012304:	2201      	movs	r2, #1
 8012306:	e7e1      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012308:	2201      	movs	r2, #1
 801230a:	e7df      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 801230c:	2201      	movs	r2, #1
 801230e:	e7dd      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012310:	2201      	movs	r2, #1
 8012312:	e7db      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012314:	2201      	movs	r2, #1
 8012316:	e7d9      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012318:	2201      	movs	r2, #1
 801231a:	e7d7      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 801231c:	2201      	movs	r2, #1
 801231e:	e7d5      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
 8012320:	2201      	movs	r2, #1
 8012322:	e7d3      	b.n	80122cc <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8012324:	2301      	movs	r3, #1
 8012326:	e7e3      	b.n	80122f0 <TIM_Base_SetConfig+0xdc>
 8012328:	2301      	movs	r3, #1
 801232a:	e7e1      	b.n	80122f0 <TIM_Base_SetConfig+0xdc>
 801232c:	40010000 	.word	0x40010000

08012330 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8012330:	b1a8      	cbz	r0, 801235e <HAL_TIM_Base_Init+0x2e>
{ 
 8012332:	b510      	push	{r4, lr}
 8012334:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8012336:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801233a:	b15b      	cbz	r3, 8012354 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 801233c:	2302      	movs	r3, #2
 801233e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8012342:	1d21      	adds	r1, r4, #4
 8012344:	6820      	ldr	r0, [r4, #0]
 8012346:	f7ff ff65 	bl	8012214 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 801234a:	2301      	movs	r3, #1
 801234c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8012350:	2000      	movs	r0, #0
 8012352:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8012354:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8012358:	f00c fe74 	bl	801f044 <HAL_TIM_Base_MspInit>
 801235c:	e7ee      	b.n	801233c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 801235e:	2001      	movs	r0, #1
 8012360:	4770      	bx	lr

08012362 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8012362:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8012366:	2b01      	cmp	r3, #1
 8012368:	d022      	beq.n	80123b0 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 801236a:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 801236c:	2201      	movs	r2, #1
 801236e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8012372:	2302      	movs	r3, #2
 8012374:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012378:	6804      	ldr	r4, [r0, #0]
 801237a:	6863      	ldr	r3, [r4, #4]
 801237c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012380:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8012382:	6804      	ldr	r4, [r0, #0]
 8012384:	6863      	ldr	r3, [r4, #4]
 8012386:	680d      	ldr	r5, [r1, #0]
 8012388:	432b      	orrs	r3, r5
 801238a:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801238c:	6804      	ldr	r4, [r0, #0]
 801238e:	68a3      	ldr	r3, [r4, #8]
 8012390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012394:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012396:	6804      	ldr	r4, [r0, #0]
 8012398:	68a3      	ldr	r3, [r4, #8]
 801239a:	6849      	ldr	r1, [r1, #4]
 801239c:	430b      	orrs	r3, r1
 801239e:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80123a0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80123a4:	2300      	movs	r3, #0
 80123a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80123aa:	4618      	mov	r0, r3
} 
 80123ac:	bc30      	pop	{r4, r5}
 80123ae:	4770      	bx	lr
  __HAL_LOCK(htim);
 80123b0:	2002      	movs	r0, #2
 80123b2:	4770      	bx	lr

080123b4 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80123b4:	4770      	bx	lr

080123b6 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80123b6:	4770      	bx	lr

080123b8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80123b8:	6802      	ldr	r2, [r0, #0]
 80123ba:	68d3      	ldr	r3, [r2, #12]
 80123bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80123c0:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80123c2:	2320      	movs	r3, #32
 80123c4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 80123c8:	4770      	bx	lr

080123ca <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80123ca:	6802      	ldr	r2, [r0, #0]
 80123cc:	68d3      	ldr	r3, [r2, #12]
 80123ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80123d2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123d4:	6802      	ldr	r2, [r0, #0]
 80123d6:	6953      	ldr	r3, [r2, #20]
 80123d8:	f023 0301 	bic.w	r3, r3, #1
 80123dc:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80123de:	2320      	movs	r3, #32
 80123e0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80123e4:	4770      	bx	lr

080123e6 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80123e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	2b21      	cmp	r3, #33	; 0x21
 80123ee:	d001      	beq.n	80123f4 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80123f0:	2002      	movs	r0, #2
 80123f2:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80123f4:	6883      	ldr	r3, [r0, #8]
 80123f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123fa:	d017      	beq.n	801242c <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80123fc:	6802      	ldr	r2, [r0, #0]
 80123fe:	6a03      	ldr	r3, [r0, #32]
 8012400:	1c59      	adds	r1, r3, #1
 8012402:	6201      	str	r1, [r0, #32]
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8012408:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801240a:	b29b      	uxth	r3, r3
 801240c:	3b01      	subs	r3, #1
 801240e:	b29b      	uxth	r3, r3
 8012410:	84c3      	strh	r3, [r0, #38]	; 0x26
 8012412:	b9db      	cbnz	r3, 801244c <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8012414:	6802      	ldr	r2, [r0, #0]
 8012416:	68d3      	ldr	r3, [r2, #12]
 8012418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801241c:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801241e:	6802      	ldr	r2, [r0, #0]
 8012420:	68d3      	ldr	r3, [r2, #12]
 8012422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012426:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8012428:	2000      	movs	r0, #0
 801242a:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 801242c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801242e:	6802      	ldr	r2, [r0, #0]
 8012430:	881b      	ldrh	r3, [r3, #0]
 8012432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012436:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8012438:	6903      	ldr	r3, [r0, #16]
 801243a:	b91b      	cbnz	r3, 8012444 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 801243c:	6a03      	ldr	r3, [r0, #32]
 801243e:	3302      	adds	r3, #2
 8012440:	6203      	str	r3, [r0, #32]
 8012442:	e7e1      	b.n	8012408 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8012444:	6a03      	ldr	r3, [r0, #32]
 8012446:	3301      	adds	r3, #1
 8012448:	6203      	str	r3, [r0, #32]
 801244a:	e7dd      	b.n	8012408 <UART_Transmit_IT+0x22>
    return HAL_OK;
 801244c:	2000      	movs	r0, #0
  }
}
 801244e:	4770      	bx	lr

08012450 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012454:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8012456:	6802      	ldr	r2, [r0, #0]
 8012458:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 801245a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 801245e:	68c1      	ldr	r1, [r0, #12]
 8012460:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8012462:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8012464:	6801      	ldr	r1, [r0, #0]
 8012466:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8012468:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801246c:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012470:	6882      	ldr	r2, [r0, #8]
 8012472:	6900      	ldr	r0, [r0, #16]
 8012474:	4302      	orrs	r2, r0
 8012476:	6960      	ldr	r0, [r4, #20]
 8012478:	4302      	orrs	r2, r0
 801247a:	69e0      	ldr	r0, [r4, #28]
 801247c:	4302      	orrs	r2, r0
 801247e:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8012480:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8012482:	6822      	ldr	r2, [r4, #0]
 8012484:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8012486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 801248a:	69a1      	ldr	r1, [r4, #24]
 801248c:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 801248e:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012490:	69e3      	ldr	r3, [r4, #28]
 8012492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012496:	d062      	beq.n	801255e <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8012498:	f8d4 8000 	ldr.w	r8, [r4]
 801249c:	4bbb      	ldr	r3, [pc, #748]	; (801278c <UART_SetConfig+0x33c>)
 801249e:	4598      	cmp	r8, r3
 80124a0:	f000 811b 	beq.w	80126da <UART_SetConfig+0x28a>
 80124a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80124a8:	4598      	cmp	r8, r3
 80124aa:	f000 8116 	beq.w	80126da <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80124ae:	f7ff fcd1 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80124b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124ba:	6865      	ldr	r5, [r4, #4]
 80124bc:	00ad      	lsls	r5, r5, #2
 80124be:	fbb0 f5f5 	udiv	r5, r0, r5
 80124c2:	4fb3      	ldr	r7, [pc, #716]	; (8012790 <UART_SetConfig+0x340>)
 80124c4:	fba7 3505 	umull	r3, r5, r7, r5
 80124c8:	096d      	lsrs	r5, r5, #5
 80124ca:	012e      	lsls	r6, r5, #4
 80124cc:	f7ff fcc2 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80124d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124d8:	6865      	ldr	r5, [r4, #4]
 80124da:	00ad      	lsls	r5, r5, #2
 80124dc:	fbb0 faf5 	udiv	sl, r0, r5
 80124e0:	f7ff fcb8 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80124e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80124ec:	6865      	ldr	r5, [r4, #4]
 80124ee:	00ad      	lsls	r5, r5, #2
 80124f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80124f4:	fba7 3505 	umull	r3, r5, r7, r5
 80124f8:	096d      	lsrs	r5, r5, #5
 80124fa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80124fe:	fb09 a515 	mls	r5, r9, r5, sl
 8012502:	012d      	lsls	r5, r5, #4
 8012504:	3532      	adds	r5, #50	; 0x32
 8012506:	fba7 3505 	umull	r3, r5, r7, r5
 801250a:	096d      	lsrs	r5, r5, #5
 801250c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8012510:	4435      	add	r5, r6
 8012512:	f7ff fc9f 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 8012516:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801251a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801251e:	6866      	ldr	r6, [r4, #4]
 8012520:	00b6      	lsls	r6, r6, #2
 8012522:	fbb0 f6f6 	udiv	r6, r0, r6
 8012526:	f7ff fc95 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 801252a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801252e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012532:	6863      	ldr	r3, [r4, #4]
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	fbb0 f0f3 	udiv	r0, r0, r3
 801253a:	fba7 3000 	umull	r3, r0, r7, r0
 801253e:	0940      	lsrs	r0, r0, #5
 8012540:	fb09 6910 	mls	r9, r9, r0, r6
 8012544:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8012548:	f109 0932 	add.w	r9, r9, #50	; 0x32
 801254c:	fba7 3709 	umull	r3, r7, r7, r9
 8012550:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8012554:	442f      	add	r7, r5
 8012556:	f8c8 7008 	str.w	r7, [r8, #8]
 801255a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 801255e:	f8d4 8000 	ldr.w	r8, [r4]
 8012562:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012566:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 801256a:	4598      	cmp	r8, r3
 801256c:	d05c      	beq.n	8012628 <UART_SetConfig+0x1d8>
 801256e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012572:	4598      	cmp	r8, r3
 8012574:	d058      	beq.n	8012628 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8012576:	f7ff fc6d 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 801257a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801257e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012582:	6865      	ldr	r5, [r4, #4]
 8012584:	006d      	lsls	r5, r5, #1
 8012586:	fbb0 f5f5 	udiv	r5, r0, r5
 801258a:	4f81      	ldr	r7, [pc, #516]	; (8012790 <UART_SetConfig+0x340>)
 801258c:	fba7 3505 	umull	r3, r5, r7, r5
 8012590:	096d      	lsrs	r5, r5, #5
 8012592:	012e      	lsls	r6, r5, #4
 8012594:	f7ff fc5e 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 8012598:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801259c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125a0:	6865      	ldr	r5, [r4, #4]
 80125a2:	006d      	lsls	r5, r5, #1
 80125a4:	fbb0 faf5 	udiv	sl, r0, r5
 80125a8:	f7ff fc54 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80125ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125b4:	6865      	ldr	r5, [r4, #4]
 80125b6:	006d      	lsls	r5, r5, #1
 80125b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80125bc:	fba7 3505 	umull	r3, r5, r7, r5
 80125c0:	096d      	lsrs	r5, r5, #5
 80125c2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80125c6:	fb09 a515 	mls	r5, r9, r5, sl
 80125ca:	00ed      	lsls	r5, r5, #3
 80125cc:	3532      	adds	r5, #50	; 0x32
 80125ce:	fba7 3505 	umull	r3, r5, r7, r5
 80125d2:	096d      	lsrs	r5, r5, #5
 80125d4:	006d      	lsls	r5, r5, #1
 80125d6:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80125da:	4435      	add	r5, r6
 80125dc:	f7ff fc3a 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80125e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125e8:	6866      	ldr	r6, [r4, #4]
 80125ea:	0076      	lsls	r6, r6, #1
 80125ec:	fbb0 f6f6 	udiv	r6, r0, r6
 80125f0:	f7ff fc30 	bl	8011e54 <HAL_RCC_GetPCLK1Freq>
 80125f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80125fc:	6863      	ldr	r3, [r4, #4]
 80125fe:	005b      	lsls	r3, r3, #1
 8012600:	fbb0 f3f3 	udiv	r3, r0, r3
 8012604:	fba7 2303 	umull	r2, r3, r7, r3
 8012608:	095b      	lsrs	r3, r3, #5
 801260a:	fb09 6913 	mls	r9, r9, r3, r6
 801260e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8012612:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8012616:	fba7 3709 	umull	r3, r7, r7, r9
 801261a:	f3c7 1742 	ubfx	r7, r7, #5, #3
 801261e:	442f      	add	r7, r5
 8012620:	f8c8 7008 	str.w	r7, [r8, #8]
 8012624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8012628:	f7ff fc24 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 801262c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012634:	6865      	ldr	r5, [r4, #4]
 8012636:	006d      	lsls	r5, r5, #1
 8012638:	fbb0 f5f5 	udiv	r5, r0, r5
 801263c:	4f54      	ldr	r7, [pc, #336]	; (8012790 <UART_SetConfig+0x340>)
 801263e:	fba7 3505 	umull	r3, r5, r7, r5
 8012642:	096d      	lsrs	r5, r5, #5
 8012644:	012e      	lsls	r6, r5, #4
 8012646:	f7ff fc15 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 801264a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801264e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012652:	6865      	ldr	r5, [r4, #4]
 8012654:	006d      	lsls	r5, r5, #1
 8012656:	fbb0 faf5 	udiv	sl, r0, r5
 801265a:	f7ff fc0b 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 801265e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012662:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012666:	6865      	ldr	r5, [r4, #4]
 8012668:	006d      	lsls	r5, r5, #1
 801266a:	fbb0 f5f5 	udiv	r5, r0, r5
 801266e:	fba7 3505 	umull	r3, r5, r7, r5
 8012672:	096d      	lsrs	r5, r5, #5
 8012674:	f04f 0964 	mov.w	r9, #100	; 0x64
 8012678:	fb09 a515 	mls	r5, r9, r5, sl
 801267c:	00ed      	lsls	r5, r5, #3
 801267e:	3532      	adds	r5, #50	; 0x32
 8012680:	fba7 3505 	umull	r3, r5, r7, r5
 8012684:	096d      	lsrs	r5, r5, #5
 8012686:	006d      	lsls	r5, r5, #1
 8012688:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 801268c:	4435      	add	r5, r6
 801268e:	f7ff fbf1 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 8012692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012696:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801269a:	6866      	ldr	r6, [r4, #4]
 801269c:	0076      	lsls	r6, r6, #1
 801269e:	fbb0 f6f6 	udiv	r6, r0, r6
 80126a2:	f7ff fbe7 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 80126a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80126aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80126ae:	6863      	ldr	r3, [r4, #4]
 80126b0:	005b      	lsls	r3, r3, #1
 80126b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80126b6:	fba7 2303 	umull	r2, r3, r7, r3
 80126ba:	095b      	lsrs	r3, r3, #5
 80126bc:	fb09 6913 	mls	r9, r9, r3, r6
 80126c0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80126c4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80126c8:	fba7 3709 	umull	r3, r7, r7, r9
 80126cc:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80126d0:	442f      	add	r7, r5
 80126d2:	f8c8 7008 	str.w	r7, [r8, #8]
 80126d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80126da:	f7ff fbcb 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 80126de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80126e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80126e6:	6865      	ldr	r5, [r4, #4]
 80126e8:	00ad      	lsls	r5, r5, #2
 80126ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80126ee:	4f28      	ldr	r7, [pc, #160]	; (8012790 <UART_SetConfig+0x340>)
 80126f0:	fba7 3505 	umull	r3, r5, r7, r5
 80126f4:	096d      	lsrs	r5, r5, #5
 80126f6:	012e      	lsls	r6, r5, #4
 80126f8:	f7ff fbbc 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 80126fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012700:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012704:	6865      	ldr	r5, [r4, #4]
 8012706:	00ad      	lsls	r5, r5, #2
 8012708:	fbb0 faf5 	udiv	sl, r0, r5
 801270c:	f7ff fbb2 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 8012710:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012714:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012718:	6865      	ldr	r5, [r4, #4]
 801271a:	00ad      	lsls	r5, r5, #2
 801271c:	fbb0 f5f5 	udiv	r5, r0, r5
 8012720:	fba7 3505 	umull	r3, r5, r7, r5
 8012724:	096d      	lsrs	r5, r5, #5
 8012726:	f04f 0964 	mov.w	r9, #100	; 0x64
 801272a:	fb09 a515 	mls	r5, r9, r5, sl
 801272e:	012d      	lsls	r5, r5, #4
 8012730:	3532      	adds	r5, #50	; 0x32
 8012732:	fba7 3505 	umull	r3, r5, r7, r5
 8012736:	096d      	lsrs	r5, r5, #5
 8012738:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 801273c:	4435      	add	r5, r6
 801273e:	f7ff fb99 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 8012742:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012746:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801274a:	6866      	ldr	r6, [r4, #4]
 801274c:	00b6      	lsls	r6, r6, #2
 801274e:	fbb0 f6f6 	udiv	r6, r0, r6
 8012752:	f7ff fb8f 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 8012756:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801275a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801275e:	6863      	ldr	r3, [r4, #4]
 8012760:	009b      	lsls	r3, r3, #2
 8012762:	fbb0 f3f3 	udiv	r3, r0, r3
 8012766:	fba7 2303 	umull	r2, r3, r7, r3
 801276a:	095b      	lsrs	r3, r3, #5
 801276c:	fb09 6913 	mls	r9, r9, r3, r6
 8012770:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8012774:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8012778:	fba7 3709 	umull	r3, r7, r7, r9
 801277c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8012780:	442f      	add	r7, r5
 8012782:	f8c8 7008 	str.w	r7, [r8, #8]
 8012786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801278a:	bf00      	nop
 801278c:	40011000 	.word	0x40011000
 8012790:	51eb851f 	.word	0x51eb851f

08012794 <HAL_UART_Init>:
  if(huart == NULL)
 8012794:	b358      	cbz	r0, 80127ee <HAL_UART_Init+0x5a>
{
 8012796:	b510      	push	{r4, lr}
 8012798:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 801279a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801279e:	b30b      	cbz	r3, 80127e4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80127a0:	2324      	movs	r3, #36	; 0x24
 80127a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80127a6:	6822      	ldr	r2, [r4, #0]
 80127a8:	68d3      	ldr	r3, [r2, #12]
 80127aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80127ae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80127b0:	4620      	mov	r0, r4
 80127b2:	f7ff fe4d 	bl	8012450 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80127b6:	6822      	ldr	r2, [r4, #0]
 80127b8:	6913      	ldr	r3, [r2, #16]
 80127ba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80127be:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80127c0:	6822      	ldr	r2, [r4, #0]
 80127c2:	6953      	ldr	r3, [r2, #20]
 80127c4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80127c8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80127ca:	6822      	ldr	r2, [r4, #0]
 80127cc:	68d3      	ldr	r3, [r2, #12]
 80127ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80127d2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127d4:	2000      	movs	r0, #0
 80127d6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80127d8:	2320      	movs	r3, #32
 80127da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80127de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80127e2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80127e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80127e8:	f00c fdc2 	bl	801f370 <HAL_UART_MspInit>
 80127ec:	e7d8      	b.n	80127a0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80127ee:	2001      	movs	r0, #1
 80127f0:	4770      	bx	lr

080127f2 <HAL_UART_DeInit>:
  if(huart == NULL)
 80127f2:	b178      	cbz	r0, 8012814 <HAL_UART_DeInit+0x22>
{
 80127f4:	b510      	push	{r4, lr}
 80127f6:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80127f8:	2324      	movs	r3, #36	; 0x24
 80127fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_MspDeInit(huart);
 80127fe:	f00c fe8b 	bl	801f518 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012802:	2000      	movs	r0, #0
 8012804:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8012806:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 801280a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  __HAL_UNLOCK(huart);
 801280e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8012812:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8012814:	2001      	movs	r0, #1
 8012816:	4770      	bx	lr

08012818 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8012818:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 801281c:	b2db      	uxtb	r3, r3
 801281e:	2b20      	cmp	r3, #32
 8012820:	d001      	beq.n	8012826 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY; 
 8012822:	2002      	movs	r0, #2
 8012824:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0)) 
 8012826:	b1d1      	cbz	r1, 801285e <HAL_UART_Receive_IT+0x46>
 8012828:	b1da      	cbz	r2, 8012862 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 801282a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801282e:	2b01      	cmp	r3, #1
 8012830:	d019      	beq.n	8012866 <HAL_UART_Receive_IT+0x4e>
    huart->pRxBuffPtr = pData;
 8012832:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8012834:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8012836:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012838:	2300      	movs	r3, #0
 801283a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801283c:	2222      	movs	r2, #34	; 0x22
 801283e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8012842:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012846:	6801      	ldr	r1, [r0, #0]
 8012848:	694a      	ldr	r2, [r1, #20]
 801284a:	f042 0201 	orr.w	r2, r2, #1
 801284e:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8012850:	6801      	ldr	r1, [r0, #0]
 8012852:	68ca      	ldr	r2, [r1, #12]
 8012854:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8012858:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 801285a:	4618      	mov	r0, r3
 801285c:	4770      	bx	lr
      return HAL_ERROR;
 801285e:	2001      	movs	r0, #1
 8012860:	4770      	bx	lr
 8012862:	2001      	movs	r0, #1
 8012864:	4770      	bx	lr
    __HAL_LOCK(huart);
 8012866:	2002      	movs	r0, #2
}
 8012868:	4770      	bx	lr
	...

0801286c <HAL_UART_Transmit_DMA>:
{
 801286c:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 801286e:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8012872:	b2e4      	uxtb	r4, r4
 8012874:	2c20      	cmp	r4, #32
 8012876:	d001      	beq.n	801287c <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 8012878:	2002      	movs	r0, #2
 801287a:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL ) || (Size == 0))
 801287c:	2900      	cmp	r1, #0
 801287e:	d031      	beq.n	80128e4 <HAL_UART_Transmit_DMA+0x78>
 8012880:	2a00      	cmp	r2, #0
 8012882:	d031      	beq.n	80128e8 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8012884:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8012888:	2b01      	cmp	r3, #1
 801288a:	d101      	bne.n	8012890 <HAL_UART_Transmit_DMA+0x24>
 801288c:	2002      	movs	r0, #2
}
 801288e:	bd38      	pop	{r3, r4, r5, pc}
 8012890:	4613      	mov	r3, r2
 8012892:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8012894:	2201      	movs	r2, #1
 8012896:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 801289a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 801289c:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 801289e:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128a0:	2500      	movs	r5, #0
 80128a2:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80128a4:	2221      	movs	r2, #33	; 0x21
 80128a6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80128aa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80128ac:	480f      	ldr	r0, [pc, #60]	; (80128ec <HAL_UART_Transmit_DMA+0x80>)
 80128ae:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80128b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80128b2:	480f      	ldr	r0, [pc, #60]	; (80128f0 <HAL_UART_Transmit_DMA+0x84>)
 80128b4:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80128b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80128b8:	480e      	ldr	r0, [pc, #56]	; (80128f4 <HAL_UART_Transmit_DMA+0x88>)
 80128ba:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 80128bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80128be:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80128c0:	6822      	ldr	r2, [r4, #0]
 80128c2:	3204      	adds	r2, #4
 80128c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80128c6:	f7fd ff03 	bl	80106d0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80128ca:	6823      	ldr	r3, [r4, #0]
 80128cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80128d0:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 80128d2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80128d6:	6822      	ldr	r2, [r4, #0]
 80128d8:	6953      	ldr	r3, [r2, #20]
 80128da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128de:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80128e0:	4628      	mov	r0, r5
 80128e2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80128e4:	2001      	movs	r0, #1
 80128e6:	bd38      	pop	{r3, r4, r5, pc}
 80128e8:	2001      	movs	r0, #1
 80128ea:	bd38      	pop	{r3, r4, r5, pc}
 80128ec:	080128f9 	.word	0x080128f9
 80128f0:	08012945 	.word	0x08012945
 80128f4:	080129e5 	.word	0x080129e5

080128f8 <UART_DMATransmitCplt>:
{
 80128f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80128fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80128fc:	6802      	ldr	r2, [r0, #0]
 80128fe:	6812      	ldr	r2, [r2, #0]
 8012900:	f412 7f80 	tst.w	r2, #256	; 0x100
 8012904:	d10c      	bne.n	8012920 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0U;
 8012906:	2200      	movs	r2, #0
 8012908:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801290a:	6819      	ldr	r1, [r3, #0]
 801290c:	694a      	ldr	r2, [r1, #20]
 801290e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012912:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	68d3      	ldr	r3, [r2, #12]
 8012918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801291c:	60d3      	str	r3, [r2, #12]
 801291e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8012920:	4618      	mov	r0, r3
 8012922:	f00b ff11 	bl	801e748 <HAL_UART_TxCpltCallback>
 8012926:	bd08      	pop	{r3, pc}

08012928 <UART_EndTransmit_IT>:
{
 8012928:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801292a:	6801      	ldr	r1, [r0, #0]
 801292c:	68cb      	ldr	r3, [r1, #12]
 801292e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012932:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8012934:	2320      	movs	r3, #32
 8012936:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 801293a:	f00b ff05 	bl	801e748 <HAL_UART_TxCpltCallback>
}
 801293e:	2000      	movs	r0, #0
 8012940:	bd08      	pop	{r3, pc}

08012942 <HAL_UART_TxHalfCpltCallback>:
{
 8012942:	4770      	bx	lr

08012944 <UART_DMATxHalfCplt>:
{
 8012944:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8012946:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012948:	f7ff fffb 	bl	8012942 <HAL_UART_TxHalfCpltCallback>
 801294c:	bd08      	pop	{r3, pc}

0801294e <UART_Receive_IT>:
{
 801294e:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8012950:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8012954:	b2db      	uxtb	r3, r3
 8012956:	2b22      	cmp	r3, #34	; 0x22
 8012958:	d001      	beq.n	801295e <UART_Receive_IT+0x10>
    return HAL_BUSY;
 801295a:	2002      	movs	r0, #2
 801295c:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 801295e:	6883      	ldr	r3, [r0, #8]
 8012960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012964:	d00f      	beq.n	8012986 <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8012966:	6903      	ldr	r3, [r0, #16]
 8012968:	bb0b      	cbnz	r3, 80129ae <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801296a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801296c:	1c5a      	adds	r2, r3, #1
 801296e:	6282      	str	r2, [r0, #40]	; 0x28
 8012970:	6802      	ldr	r2, [r0, #0]
 8012972:	6852      	ldr	r2, [r2, #4]
 8012974:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8012976:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8012978:	b29b      	uxth	r3, r3
 801297a:	3b01      	subs	r3, #1
 801297c:	b29b      	uxth	r3, r3
 801297e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8012980:	b1f3      	cbz	r3, 80129c0 <UART_Receive_IT+0x72>
    return HAL_OK;
 8012982:	2000      	movs	r0, #0
}
 8012984:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8012986:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8012988:	6903      	ldr	r3, [r0, #16]
 801298a:	b943      	cbnz	r3, 801299e <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801298c:	6803      	ldr	r3, [r0, #0]
 801298e:	685b      	ldr	r3, [r3, #4]
 8012990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012994:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8012996:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012998:	3302      	adds	r3, #2
 801299a:	6283      	str	r3, [r0, #40]	; 0x28
 801299c:	e7eb      	b.n	8012976 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801299e:	6803      	ldr	r3, [r0, #0]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	b2db      	uxtb	r3, r3
 80129a4:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80129a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80129a8:	3301      	adds	r3, #1
 80129aa:	6283      	str	r3, [r0, #40]	; 0x28
 80129ac:	e7e3      	b.n	8012976 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80129ae:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80129b0:	1c53      	adds	r3, r2, #1
 80129b2:	6283      	str	r3, [r0, #40]	; 0x28
 80129b4:	6803      	ldr	r3, [r0, #0]
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129bc:	7013      	strb	r3, [r2, #0]
 80129be:	e7da      	b.n	8012976 <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80129c0:	6802      	ldr	r2, [r0, #0]
 80129c2:	68d3      	ldr	r3, [r2, #12]
 80129c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80129c8:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80129ca:	6802      	ldr	r2, [r0, #0]
 80129cc:	6953      	ldr	r3, [r2, #20]
 80129ce:	f023 0301 	bic.w	r3, r3, #1
 80129d2:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80129d4:	2320      	movs	r3, #32
 80129d6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80129da:	f00b fe97 	bl	801e70c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80129de:	2000      	movs	r0, #0
 80129e0:	bd08      	pop	{r3, pc}

080129e2 <HAL_UART_ErrorCallback>:
{
 80129e2:	4770      	bx	lr

080129e4 <UART_DMAError>:
{
 80129e4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80129e6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80129e8:	6823      	ldr	r3, [r4, #0]
 80129ea:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80129ec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80129f0:	b2db      	uxtb	r3, r3
 80129f2:	2b21      	cmp	r3, #33	; 0x21
 80129f4:	d010      	beq.n	8012a18 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80129f6:	6823      	ldr	r3, [r4, #0]
 80129f8:	695a      	ldr	r2, [r3, #20]
 80129fa:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80129fe:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	2b22      	cmp	r3, #34	; 0x22
 8012a06:	d011      	beq.n	8012a2c <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012a08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012a0a:	f043 0310 	orr.w	r3, r3, #16
 8012a0e:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8012a10:	4620      	mov	r0, r4
 8012a12:	f7ff ffe6 	bl	80129e2 <HAL_UART_ErrorCallback>
 8012a16:	bd10      	pop	{r4, pc}
 8012a18:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8012a1c:	2a00      	cmp	r2, #0
 8012a1e:	d0ea      	beq.n	80129f6 <UART_DMAError+0x12>
    huart->TxXferCount = 0U;
 8012a20:	2300      	movs	r3, #0
 8012a22:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8012a24:	4620      	mov	r0, r4
 8012a26:	f7ff fcc7 	bl	80123b8 <UART_EndTxTransfer>
 8012a2a:	e7e4      	b.n	80129f6 <UART_DMAError+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8012a2c:	2a00      	cmp	r2, #0
 8012a2e:	d0eb      	beq.n	8012a08 <UART_DMAError+0x24>
    huart->RxXferCount = 0U;
 8012a30:	2300      	movs	r3, #0
 8012a32:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8012a34:	4620      	mov	r0, r4
 8012a36:	f7ff fcc8 	bl	80123ca <UART_EndRxTransfer>
 8012a3a:	e7e5      	b.n	8012a08 <UART_DMAError+0x24>

08012a3c <HAL_UART_IRQHandler>:
{
 8012a3c:	b510      	push	{r4, lr}
 8012a3e:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8012a40:	6802      	ldr	r2, [r0, #0]
 8012a42:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012a44:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012a46:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8012a48:	f013 000f 	ands.w	r0, r3, #15
 8012a4c:	d105      	bne.n	8012a5a <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012a4e:	f013 0f20 	tst.w	r3, #32
 8012a52:	d002      	beq.n	8012a5a <HAL_UART_IRQHandler+0x1e>
 8012a54:	f011 0f20 	tst.w	r1, #32
 8012a58:	d153      	bne.n	8012b02 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8012a5a:	2800      	cmp	r0, #0
 8012a5c:	d067      	beq.n	8012b2e <HAL_UART_IRQHandler+0xf2>
 8012a5e:	f012 0201 	ands.w	r2, r2, #1
 8012a62:	d102      	bne.n	8012a6a <HAL_UART_IRQHandler+0x2e>
 8012a64:	f411 7f90 	tst.w	r1, #288	; 0x120
 8012a68:	d061      	beq.n	8012b2e <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8012a6a:	f013 0f01 	tst.w	r3, #1
 8012a6e:	d006      	beq.n	8012a7e <HAL_UART_IRQHandler+0x42>
 8012a70:	f411 7f80 	tst.w	r1, #256	; 0x100
 8012a74:	d003      	beq.n	8012a7e <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a76:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012a78:	f040 0001 	orr.w	r0, r0, #1
 8012a7c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a7e:	f013 0f04 	tst.w	r3, #4
 8012a82:	d004      	beq.n	8012a8e <HAL_UART_IRQHandler+0x52>
 8012a84:	b11a      	cbz	r2, 8012a8e <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012a88:	f040 0002 	orr.w	r0, r0, #2
 8012a8c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a8e:	f013 0f02 	tst.w	r3, #2
 8012a92:	d004      	beq.n	8012a9e <HAL_UART_IRQHandler+0x62>
 8012a94:	b11a      	cbz	r2, 8012a9e <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a96:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012a98:	f040 0004 	orr.w	r0, r0, #4
 8012a9c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8012a9e:	f013 0f08 	tst.w	r3, #8
 8012aa2:	d004      	beq.n	8012aae <HAL_UART_IRQHandler+0x72>
 8012aa4:	b11a      	cbz	r2, 8012aae <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012aa6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012aa8:	f042 0208 	orr.w	r2, r2, #8
 8012aac:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012aae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012ab0:	2a00      	cmp	r2, #0
 8012ab2:	d048      	beq.n	8012b46 <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8012ab4:	f013 0f20 	tst.w	r3, #32
 8012ab8:	d002      	beq.n	8012ac0 <HAL_UART_IRQHandler+0x84>
 8012aba:	f011 0f20 	tst.w	r1, #32
 8012abe:	d124      	bne.n	8012b0a <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012ac0:	6823      	ldr	r3, [r4, #0]
 8012ac2:	695b      	ldr	r3, [r3, #20]
 8012ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8012ac8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012aca:	f012 0f08 	tst.w	r2, #8
 8012ace:	d100      	bne.n	8012ad2 <HAL_UART_IRQHandler+0x96>
 8012ad0:	b33b      	cbz	r3, 8012b22 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f7ff fc79 	bl	80123ca <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ad8:	6823      	ldr	r3, [r4, #0]
 8012ada:	695a      	ldr	r2, [r3, #20]
 8012adc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012ae0:	d01b      	beq.n	8012b1a <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012ae2:	695a      	ldr	r2, [r3, #20]
 8012ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ae8:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8012aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012aec:	b18b      	cbz	r3, 8012b12 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012aee:	4a1a      	ldr	r2, [pc, #104]	; (8012b58 <HAL_UART_IRQHandler+0x11c>)
 8012af0:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012af2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012af4:	f7fd fe26 	bl	8010744 <HAL_DMA_Abort_IT>
 8012af8:	b328      	cbz	r0, 8012b46 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012afa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012afc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012afe:	4798      	blx	r3
 8012b00:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8012b02:	4620      	mov	r0, r4
 8012b04:	f7ff ff23 	bl	801294e <UART_Receive_IT>
      return;
 8012b08:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	f7ff ff1f 	bl	801294e <UART_Receive_IT>
 8012b10:	e7d6      	b.n	8012ac0 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8012b12:	4620      	mov	r0, r4
 8012b14:	f7ff ff65 	bl	80129e2 <HAL_UART_ErrorCallback>
 8012b18:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	f7ff ff61 	bl	80129e2 <HAL_UART_ErrorCallback>
 8012b20:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8012b22:	4620      	mov	r0, r4
 8012b24:	f7ff ff5d 	bl	80129e2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012b2c:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012b2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012b32:	d002      	beq.n	8012b3a <HAL_UART_IRQHandler+0xfe>
 8012b34:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012b38:	d106      	bne.n	8012b48 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012b3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012b3e:	d002      	beq.n	8012b46 <HAL_UART_IRQHandler+0x10a>
 8012b40:	f011 0f40 	tst.w	r1, #64	; 0x40
 8012b44:	d104      	bne.n	8012b50 <HAL_UART_IRQHandler+0x114>
 8012b46:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8012b48:	4620      	mov	r0, r4
 8012b4a:	f7ff fc4c 	bl	80123e6 <UART_Transmit_IT>
    return;
 8012b4e:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8012b50:	4620      	mov	r0, r4
 8012b52:	f7ff fee9 	bl	8012928 <UART_EndTransmit_IT>
    return;
 8012b56:	e7f6      	b.n	8012b46 <HAL_UART_IRQHandler+0x10a>
 8012b58:	08012b5d 	.word	0x08012b5d

08012b5c <UART_DMAAbortOnError>:
{
 8012b5c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012b5e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8012b60:	2300      	movs	r3, #0
 8012b62:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8012b64:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8012b66:	f7ff ff3c 	bl	80129e2 <HAL_UART_ErrorCallback>
 8012b6a:	bd08      	pop	{r3, pc}

08012b6c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8012b6c:	2884      	cmp	r0, #132	; 0x84
 8012b6e:	d001      	beq.n	8012b74 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8012b70:	3003      	adds	r0, #3
 8012b72:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012b74:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8012b76:	4770      	bx	lr

08012b78 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b78:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8012b7c:	3000      	adds	r0, #0
 8012b7e:	bf18      	it	ne
 8012b80:	2001      	movne	r0, #1
 8012b82:	4770      	bx	lr

08012b84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012b84:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8012b86:	f001 fb75 	bl	8014274 <vTaskStartScheduler>
  
  return osOK;
}
 8012b8a:	2000      	movs	r0, #0
 8012b8c:	bd08      	pop	{r3, pc}

08012b8e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012b8e:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 8012b90:	f7ff fff2 	bl	8012b78 <inHandlerMode>
 8012b94:	b910      	cbnz	r0, 8012b9c <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 8012b96:	f001 fbb3 	bl	8014300 <xTaskGetTickCount>
  }
}
 8012b9a:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 8012b9c:	f001 fbb6 	bl	801430c <xTaskGetTickCountFromISR>
 8012ba0:	bd08      	pop	{r3, pc}

08012ba2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012ba2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ba6:	b087      	sub	sp, #28
 8012ba8:	4604      	mov	r4, r0
 8012baa:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012bac:	6945      	ldr	r5, [r0, #20]
 8012bae:	b1bd      	cbz	r5, 8012be0 <osThreadCreate+0x3e>
 8012bb0:	6986      	ldr	r6, [r0, #24]
 8012bb2:	b1ae      	cbz	r6, 8012be0 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bb4:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012bb8:	f8d0 9000 	ldr.w	r9, [r0]
 8012bbc:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8012bc0:	f7ff ffd4 	bl	8012b6c <makeFreeRtosPriority>
 8012bc4:	6922      	ldr	r2, [r4, #16]
 8012bc6:	9602      	str	r6, [sp, #8]
 8012bc8:	9501      	str	r5, [sp, #4]
 8012bca:	9000      	str	r0, [sp, #0]
 8012bcc:	463b      	mov	r3, r7
 8012bce:	4649      	mov	r1, r9
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	f001 faf1 	bl	80141b8 <xTaskCreateStatic>
 8012bd6:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012bd8:	9805      	ldr	r0, [sp, #20]
}
 8012bda:	b007      	add	sp, #28
 8012bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012be0:	6865      	ldr	r5, [r4, #4]
 8012be2:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012be4:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012be8:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8012bec:	f7ff ffbe 	bl	8012b6c <makeFreeRtosPriority>
 8012bf0:	ab05      	add	r3, sp, #20
 8012bf2:	9301      	str	r3, [sp, #4]
 8012bf4:	9000      	str	r0, [sp, #0]
 8012bf6:	463b      	mov	r3, r7
 8012bf8:	fa1f f288 	uxth.w	r2, r8
 8012bfc:	4631      	mov	r1, r6
 8012bfe:	4628      	mov	r0, r5
 8012c00:	f001 fb05 	bl	801420e <xTaskCreate>
 8012c04:	2801      	cmp	r0, #1
 8012c06:	d0e7      	beq.n	8012bd8 <osThreadCreate+0x36>
      return NULL;
 8012c08:	2000      	movs	r0, #0
 8012c0a:	e7e6      	b.n	8012bda <osThreadCreate+0x38>

08012c0c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012c0c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012c0e:	4603      	mov	r3, r0
 8012c10:	b900      	cbnz	r0, 8012c14 <osDelay+0x8>
 8012c12:	2301      	movs	r3, #1
 8012c14:	4618      	mov	r0, r3
 8012c16:	f001 fc8f 	bl	8014538 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012c1a:	2000      	movs	r0, #0
 8012c1c:	bd08      	pop	{r3, pc}

08012c1e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012c1e:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012c20:	6841      	ldr	r1, [r0, #4]
 8012c22:	b119      	cbz	r1, 8012c2c <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012c24:	2001      	movs	r0, #1
 8012c26:	f000 ff00 	bl	8013a2a <xQueueCreateMutexStatic>
 8012c2a:	bd08      	pop	{r3, pc}
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012c2c:	2001      	movs	r0, #1
 8012c2e:	f000 fef1 	bl	8013a14 <xQueueCreateMutex>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012c32:	bd08      	pop	{r3, pc}

08012c34 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8012c34:	b530      	push	{r4, r5, lr}
 8012c36:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012c38:	2300      	movs	r3, #0
 8012c3a:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8012c3c:	b360      	cbz	r0, 8012c98 <osMutexWait+0x64>
 8012c3e:	460c      	mov	r4, r1
 8012c40:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012c42:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012c46:	d00d      	beq.n	8012c64 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012c48:	b901      	cbnz	r1, 8012c4c <osMutexWait+0x18>
  ticks = 0;
 8012c4a:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012c4c:	f7ff ff94 	bl	8012b78 <inHandlerMode>
 8012c50:	b1b8      	cbz	r0, 8012c82 <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012c52:	aa01      	add	r2, sp, #4
 8012c54:	2100      	movs	r1, #0
 8012c56:	4628      	mov	r0, r5
 8012c58:	f001 f89c 	bl	8013d94 <xQueueReceiveFromISR>
 8012c5c:	2801      	cmp	r0, #1
 8012c5e:	d004      	beq.n	8012c6a <osMutexWait+0x36>
      return osErrorOS;
 8012c60:	20ff      	movs	r0, #255	; 0xff
 8012c62:	e017      	b.n	8012c94 <osMutexWait+0x60>
    ticks = portMAX_DELAY;
 8012c64:	f04f 34ff 	mov.w	r4, #4294967295
 8012c68:	e7f0      	b.n	8012c4c <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012c6a:	9b01      	ldr	r3, [sp, #4]
 8012c6c:	b1b3      	cbz	r3, 8012c9c <osMutexWait+0x68>
 8012c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c72:	4b0c      	ldr	r3, [pc, #48]	; (8012ca4 <osMutexWait+0x70>)
 8012c74:	601a      	str	r2, [r3, #0]
 8012c76:	f3bf 8f4f 	dsb	sy
 8012c7a:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8012c7e:	2000      	movs	r0, #0
 8012c80:	e008      	b.n	8012c94 <osMutexWait+0x60>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8012c82:	2300      	movs	r3, #0
 8012c84:	4622      	mov	r2, r4
 8012c86:	4619      	mov	r1, r3
 8012c88:	4628      	mov	r0, r5
 8012c8a:	f000 ffab 	bl	8013be4 <xQueueGenericReceive>
 8012c8e:	2801      	cmp	r0, #1
 8012c90:	d006      	beq.n	8012ca0 <osMutexWait+0x6c>
    return osErrorOS;
 8012c92:	20ff      	movs	r0, #255	; 0xff
}
 8012c94:	b003      	add	sp, #12
 8012c96:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8012c98:	2080      	movs	r0, #128	; 0x80
 8012c9a:	e7fb      	b.n	8012c94 <osMutexWait+0x60>
  return osOK;
 8012c9c:	2000      	movs	r0, #0
 8012c9e:	e7f9      	b.n	8012c94 <osMutexWait+0x60>
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	e7f7      	b.n	8012c94 <osMutexWait+0x60>
 8012ca4:	e000ed04 	.word	0xe000ed04

08012ca8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8012ca8:	b510      	push	{r4, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 8012cb2:	f7ff ff61 	bl	8012b78 <inHandlerMode>
 8012cb6:	b1a0      	cbz	r0, 8012ce2 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012cb8:	a901      	add	r1, sp, #4
 8012cba:	4620      	mov	r0, r4
 8012cbc:	f000 ff33 	bl	8013b26 <xQueueGiveFromISR>
 8012cc0:	2801      	cmp	r0, #1
 8012cc2:	d002      	beq.n	8012cca <osMutexRelease+0x22>
      return osErrorOS;
 8012cc4:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8012cc6:	b002      	add	sp, #8
 8012cc8:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012cca:	9b01      	ldr	r3, [sp, #4]
 8012ccc:	b1ab      	cbz	r3, 8012cfa <osMutexRelease+0x52>
 8012cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cd2:	4b0b      	ldr	r3, [pc, #44]	; (8012d00 <osMutexRelease+0x58>)
 8012cd4:	601a      	str	r2, [r3, #0]
 8012cd6:	f3bf 8f4f 	dsb	sy
 8012cda:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8012cde:	2000      	movs	r0, #0
 8012ce0:	e7f1      	b.n	8012cc6 <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f000 fdc3 	bl	8013874 <xQueueGenericSend>
 8012cee:	2801      	cmp	r0, #1
 8012cf0:	d001      	beq.n	8012cf6 <osMutexRelease+0x4e>
    result = osErrorOS;
 8012cf2:	20ff      	movs	r0, #255	; 0xff
 8012cf4:	e7e7      	b.n	8012cc6 <osMutexRelease+0x1e>
  osStatus result = osOK;
 8012cf6:	2000      	movs	r0, #0
 8012cf8:	e7e5      	b.n	8012cc6 <osMutexRelease+0x1e>
 8012cfa:	2000      	movs	r0, #0
 8012cfc:	e7e3      	b.n	8012cc6 <osMutexRelease+0x1e>
 8012cfe:	bf00      	nop
 8012d00:	e000ed04 	.word	0xe000ed04

08012d04 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012d04:	b510      	push	{r4, lr}
 8012d06:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012d08:	6843      	ldr	r3, [r0, #4]
 8012d0a:	b163      	cbz	r3, 8012d26 <osSemaphoreCreate+0x22>
    if (count == 1) {
 8012d0c:	2901      	cmp	r1, #1
 8012d0e:	d11a      	bne.n	8012d46 <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012d10:	2203      	movs	r2, #3
 8012d12:	9200      	str	r2, [sp, #0]
 8012d14:	2200      	movs	r2, #0
 8012d16:	4611      	mov	r1, r2
 8012d18:	2001      	movs	r0, #1
 8012d1a:	f000 fd34 	bl	8013786 <xQueueGenericCreateStatic>
 8012d1e:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8012d20:	4620      	mov	r0, r4
 8012d22:	b002      	add	sp, #8
 8012d24:	bd10      	pop	{r4, pc}
    if (count == 1) {
 8012d26:	2901      	cmp	r1, #1
 8012d28:	d10f      	bne.n	8012d4a <osSemaphoreCreate+0x46>
      vSemaphoreCreateBinary(sema);
 8012d2a:	2203      	movs	r2, #3
 8012d2c:	2100      	movs	r1, #0
 8012d2e:	2001      	movs	r0, #1
 8012d30:	f000 fd79 	bl	8013826 <xQueueGenericCreate>
 8012d34:	4604      	mov	r4, r0
 8012d36:	2800      	cmp	r0, #0
 8012d38:	d0f2      	beq.n	8012d20 <osSemaphoreCreate+0x1c>
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	4619      	mov	r1, r3
 8012d40:	f000 fd98 	bl	8013874 <xQueueGenericSend>
 8012d44:	e7ec      	b.n	8012d20 <osSemaphoreCreate+0x1c>
      return NULL;
 8012d46:	2400      	movs	r4, #0
 8012d48:	e7ea      	b.n	8012d20 <osSemaphoreCreate+0x1c>
      return NULL;
 8012d4a:	2400      	movs	r4, #0
 8012d4c:	e7e8      	b.n	8012d20 <osSemaphoreCreate+0x1c>
	...

08012d50 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012d50:	b530      	push	{r4, r5, lr}
 8012d52:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012d54:	2300      	movs	r3, #0
 8012d56:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8012d58:	b360      	cbz	r0, 8012db4 <osSemaphoreWait+0x64>
 8012d5a:	460c      	mov	r4, r1
 8012d5c:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012d5e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012d62:	d00d      	beq.n	8012d80 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012d64:	b901      	cbnz	r1, 8012d68 <osSemaphoreWait+0x18>
  ticks = 0;
 8012d66:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012d68:	f7ff ff06 	bl	8012b78 <inHandlerMode>
 8012d6c:	b1b8      	cbz	r0, 8012d9e <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012d6e:	aa01      	add	r2, sp, #4
 8012d70:	2100      	movs	r1, #0
 8012d72:	4628      	mov	r0, r5
 8012d74:	f001 f80e 	bl	8013d94 <xQueueReceiveFromISR>
 8012d78:	2801      	cmp	r0, #1
 8012d7a:	d004      	beq.n	8012d86 <osSemaphoreWait+0x36>
      return osErrorOS;
 8012d7c:	20ff      	movs	r0, #255	; 0xff
 8012d7e:	e017      	b.n	8012db0 <osSemaphoreWait+0x60>
    ticks = portMAX_DELAY;
 8012d80:	f04f 34ff 	mov.w	r4, #4294967295
 8012d84:	e7f0      	b.n	8012d68 <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012d86:	9b01      	ldr	r3, [sp, #4]
 8012d88:	b1b3      	cbz	r3, 8012db8 <osSemaphoreWait+0x68>
 8012d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d8e:	4b0c      	ldr	r3, [pc, #48]	; (8012dc0 <osSemaphoreWait+0x70>)
 8012d90:	601a      	str	r2, [r3, #0]
 8012d92:	f3bf 8f4f 	dsb	sy
 8012d96:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8012d9a:	2000      	movs	r0, #0
 8012d9c:	e008      	b.n	8012db0 <osSemaphoreWait+0x60>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012d9e:	2300      	movs	r3, #0
 8012da0:	4622      	mov	r2, r4
 8012da2:	4619      	mov	r1, r3
 8012da4:	4628      	mov	r0, r5
 8012da6:	f000 ff1d 	bl	8013be4 <xQueueGenericReceive>
 8012daa:	2801      	cmp	r0, #1
 8012dac:	d006      	beq.n	8012dbc <osSemaphoreWait+0x6c>
    return osErrorOS;
 8012dae:	20ff      	movs	r0, #255	; 0xff
}
 8012db0:	b003      	add	sp, #12
 8012db2:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8012db4:	2080      	movs	r0, #128	; 0x80
 8012db6:	e7fb      	b.n	8012db0 <osSemaphoreWait+0x60>
  return osOK;
 8012db8:	2000      	movs	r0, #0
 8012dba:	e7f9      	b.n	8012db0 <osSemaphoreWait+0x60>
 8012dbc:	2000      	movs	r0, #0
 8012dbe:	e7f7      	b.n	8012db0 <osSemaphoreWait+0x60>
 8012dc0:	e000ed04 	.word	0xe000ed04

08012dc4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012dc4:	b510      	push	{r4, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8012dce:	f7ff fed3 	bl	8012b78 <inHandlerMode>
 8012dd2:	b1a0      	cbz	r0, 8012dfe <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012dd4:	a901      	add	r1, sp, #4
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f000 fea5 	bl	8013b26 <xQueueGiveFromISR>
 8012ddc:	2801      	cmp	r0, #1
 8012dde:	d002      	beq.n	8012de6 <osSemaphoreRelease+0x22>
      return osErrorOS;
 8012de0:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8012de2:	b002      	add	sp, #8
 8012de4:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8012de6:	9b01      	ldr	r3, [sp, #4]
 8012de8:	b1ab      	cbz	r3, 8012e16 <osSemaphoreRelease+0x52>
 8012dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dee:	4b0b      	ldr	r3, [pc, #44]	; (8012e1c <osSemaphoreRelease+0x58>)
 8012df0:	601a      	str	r2, [r3, #0]
 8012df2:	f3bf 8f4f 	dsb	sy
 8012df6:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8012dfa:	2000      	movs	r0, #0
 8012dfc:	e7f1      	b.n	8012de2 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012dfe:	2300      	movs	r3, #0
 8012e00:	461a      	mov	r2, r3
 8012e02:	4619      	mov	r1, r3
 8012e04:	4620      	mov	r0, r4
 8012e06:	f000 fd35 	bl	8013874 <xQueueGenericSend>
 8012e0a:	2801      	cmp	r0, #1
 8012e0c:	d001      	beq.n	8012e12 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8012e0e:	20ff      	movs	r0, #255	; 0xff
 8012e10:	e7e7      	b.n	8012de2 <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8012e12:	2000      	movs	r0, #0
 8012e14:	e7e5      	b.n	8012de2 <osSemaphoreRelease+0x1e>
 8012e16:	2000      	movs	r0, #0
 8012e18:	e7e3      	b.n	8012de2 <osSemaphoreRelease+0x1e>
 8012e1a:	bf00      	nop
 8012e1c:	e000ed04 	.word	0xe000ed04

08012e20 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012e20:	b510      	push	{r4, lr}
 8012e22:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012e24:	f7ff fea8 	bl	8012b78 <inHandlerMode>
 8012e28:	b108      	cbz	r0, 8012e2e <osSemaphoreDelete+0xe>
    return osErrorISR;
 8012e2a:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 8012e2c:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f001 f854 	bl	8013edc <vQueueDelete>
  return osOK; 
 8012e34:	2000      	movs	r0, #0
 8012e36:	bd10      	pop	{r4, pc}

08012e38 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012e38:	b510      	push	{r4, lr}
 8012e3a:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012e3c:	6882      	ldr	r2, [r0, #8]
 8012e3e:	b14a      	cbz	r2, 8012e54 <osMessageCreate+0x1c>
 8012e40:	68c3      	ldr	r3, [r0, #12]
 8012e42:	b13b      	cbz	r3, 8012e54 <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012e44:	6841      	ldr	r1, [r0, #4]
 8012e46:	6800      	ldr	r0, [r0, #0]
 8012e48:	2400      	movs	r4, #0
 8012e4a:	9400      	str	r4, [sp, #0]
 8012e4c:	f000 fc9b 	bl	8013786 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012e50:	b002      	add	sp, #8
 8012e52:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012e54:	2200      	movs	r2, #0
 8012e56:	6841      	ldr	r1, [r0, #4]
 8012e58:	6800      	ldr	r0, [r0, #0]
 8012e5a:	f000 fce4 	bl	8013826 <xQueueGenericCreate>
 8012e5e:	e7f7      	b.n	8012e50 <osMessageCreate+0x18>

08012e60 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012e60:	b530      	push	{r4, r5, lr}
 8012e62:	b085      	sub	sp, #20
 8012e64:	4604      	mov	r4, r0
 8012e66:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8012e6c:	4615      	mov	r5, r2
 8012e6e:	b902      	cbnz	r2, 8012e72 <osMessagePut+0x12>
    ticks = 1;
 8012e70:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8012e72:	f7ff fe81 	bl	8012b78 <inHandlerMode>
 8012e76:	b1a8      	cbz	r0, 8012ea4 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012e78:	2300      	movs	r3, #0
 8012e7a:	aa03      	add	r2, sp, #12
 8012e7c:	a901      	add	r1, sp, #4
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f000 fde2 	bl	8013a48 <xQueueGenericSendFromISR>
 8012e84:	2801      	cmp	r0, #1
 8012e86:	d001      	beq.n	8012e8c <osMessagePut+0x2c>
      return osErrorOS;
 8012e88:	20ff      	movs	r0, #255	; 0xff
 8012e8a:	e014      	b.n	8012eb6 <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012e8c:	9b03      	ldr	r3, [sp, #12]
 8012e8e:	b1a3      	cbz	r3, 8012eba <osMessagePut+0x5a>
 8012e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e94:	4b0b      	ldr	r3, [pc, #44]	; (8012ec4 <osMessagePut+0x64>)
 8012e96:	601a      	str	r2, [r3, #0]
 8012e98:	f3bf 8f4f 	dsb	sy
 8012e9c:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8012ea0:	2000      	movs	r0, #0
 8012ea2:	e008      	b.n	8012eb6 <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	462a      	mov	r2, r5
 8012ea8:	a901      	add	r1, sp, #4
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f000 fce2 	bl	8013874 <xQueueGenericSend>
 8012eb0:	2801      	cmp	r0, #1
 8012eb2:	d004      	beq.n	8012ebe <osMessagePut+0x5e>
      return osErrorOS;
 8012eb4:	20ff      	movs	r0, #255	; 0xff
}
 8012eb6:	b005      	add	sp, #20
 8012eb8:	bd30      	pop	{r4, r5, pc}
  return osOK;
 8012eba:	2000      	movs	r0, #0
 8012ebc:	e7fb      	b.n	8012eb6 <osMessagePut+0x56>
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	e7f9      	b.n	8012eb6 <osMessagePut+0x56>
 8012ec2:	bf00      	nop
 8012ec4:	e000ed04 	.word	0xe000ed04

08012ec8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012ec8:	b570      	push	{r4, r5, r6, lr}
 8012eca:	b084      	sub	sp, #16
 8012ecc:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012ece:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8012ed4:	b1f9      	cbz	r1, 8012f16 <osMessageGet+0x4e>
 8012ed6:	460d      	mov	r5, r1
 8012ed8:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8012eda:	2300      	movs	r3, #0
 8012edc:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8012ede:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012ee2:	d021      	beq.n	8012f28 <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8012ee4:	b902      	cbnz	r2, 8012ee8 <osMessageGet+0x20>
  ticks = 0;
 8012ee6:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8012ee8:	f7ff fe46 	bl	8012b78 <inHandlerMode>
 8012eec:	b310      	cbz	r0, 8012f34 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012eee:	aa03      	add	r2, sp, #12
 8012ef0:	a901      	add	r1, sp, #4
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	f000 ff4e 	bl	8013d94 <xQueueReceiveFromISR>
 8012ef8:	2801      	cmp	r0, #1
 8012efa:	d018      	beq.n	8012f2e <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8012efc:	2300      	movs	r3, #0
 8012efe:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012f00:	9b03      	ldr	r3, [sp, #12]
 8012f02:	b313      	cbz	r3, 8012f4a <osMessageGet+0x82>
 8012f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f08:	4b16      	ldr	r3, [pc, #88]	; (8012f64 <osMessageGet+0x9c>)
 8012f0a:	601a      	str	r2, [r3, #0]
 8012f0c:	f3bf 8f4f 	dsb	sy
 8012f10:	f3bf 8f6f 	isb	sy
 8012f14:	e019      	b.n	8012f4a <osMessageGet+0x82>
    event.status = osErrorParameter;
 8012f16:	ab04      	add	r3, sp, #16
 8012f18:	2280      	movs	r2, #128	; 0x80
 8012f1a:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8012f1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012f22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012f26:	e014      	b.n	8012f52 <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 8012f28:	f04f 36ff 	mov.w	r6, #4294967295
 8012f2c:	e7dc      	b.n	8012ee8 <osMessageGet+0x20>
      event.status = osEventMessage;
 8012f2e:	2310      	movs	r3, #16
 8012f30:	9300      	str	r3, [sp, #0]
 8012f32:	e7e5      	b.n	8012f00 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012f34:	2300      	movs	r3, #0
 8012f36:	4632      	mov	r2, r6
 8012f38:	a901      	add	r1, sp, #4
 8012f3a:	4628      	mov	r0, r5
 8012f3c:	f000 fe52 	bl	8013be4 <xQueueGenericReceive>
 8012f40:	2801      	cmp	r0, #1
 8012f42:	d009      	beq.n	8012f58 <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012f44:	b95e      	cbnz	r6, 8012f5e <osMessageGet+0x96>
 8012f46:	2300      	movs	r3, #0
 8012f48:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8012f4a:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 8012f4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012f52:	4620      	mov	r0, r4
 8012f54:	b004      	add	sp, #16
 8012f56:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8012f58:	2310      	movs	r3, #16
 8012f5a:	9300      	str	r3, [sp, #0]
 8012f5c:	e7f5      	b.n	8012f4a <osMessageGet+0x82>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012f5e:	2340      	movs	r3, #64	; 0x40
 8012f60:	e7f2      	b.n	8012f48 <osMessageGet+0x80>
 8012f62:	bf00      	nop
 8012f64:	e000ed04 	.word	0xe000ed04

08012f68 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012f6c:	f7ff fe04 	bl	8012b78 <inHandlerMode>
 8012f70:	b918      	cbnz	r0, 8012f7a <osMessageWaiting+0x12>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8012f72:	4620      	mov	r0, r4
 8012f74:	f000 ff69 	bl	8013e4a <uxQueueMessagesWaiting>
  }
}
 8012f78:	bd10      	pop	{r4, pc}
    return uxQueueMessagesWaitingFromISR(queue_id);
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	f000 ff78 	bl	8013e70 <uxQueueMessagesWaitingFromISR>
 8012f80:	bd10      	pop	{r4, pc}

08012f82 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8012f82:	b510      	push	{r4, lr}
 8012f84:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8012f86:	f7ff fdf7 	bl	8012b78 <inHandlerMode>
 8012f8a:	b108      	cbz	r0, 8012f90 <osMessageDelete+0xe>
    return osErrorISR;
 8012f8c:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 8012f8e:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 8012f90:	4620      	mov	r0, r4
 8012f92:	f000 ffa3 	bl	8013edc <vQueueDelete>
  return osOK; 
 8012f96:	2000      	movs	r0, #0
 8012f98:	bd10      	pop	{r4, pc}

08012f9a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f9a:	f100 0308 	add.w	r3, r0, #8
 8012f9e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012fa6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012fa8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012faa:	2300      	movs	r3, #0
 8012fac:	6003      	str	r3, [r0, #0]
 8012fae:	4770      	bx	lr

08012fb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	6103      	str	r3, [r0, #16]
 8012fb4:	4770      	bx	lr

08012fb6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8012fb6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012fb8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012fba:	689a      	ldr	r2, [r3, #8]
 8012fbc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012fbe:	689a      	ldr	r2, [r3, #8]
 8012fc0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012fc2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012fc4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8012fc6:	6803      	ldr	r3, [r0, #0]
 8012fc8:	3301      	adds	r3, #1
 8012fca:	6003      	str	r3, [r0, #0]
 8012fcc:	4770      	bx	lr

08012fce <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012fce:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012fd0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012fd2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012fd6:	d002      	beq.n	8012fde <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012fd8:	f100 0208 	add.w	r2, r0, #8
 8012fdc:	e002      	b.n	8012fe4 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8012fde:	6902      	ldr	r2, [r0, #16]
 8012fe0:	e004      	b.n	8012fec <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012fe2:	461a      	mov	r2, r3
 8012fe4:	6853      	ldr	r3, [r2, #4]
 8012fe6:	681c      	ldr	r4, [r3, #0]
 8012fe8:	42a5      	cmp	r5, r4
 8012fea:	d2fa      	bcs.n	8012fe2 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012fec:	6853      	ldr	r3, [r2, #4]
 8012fee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012ff0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012ff2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8012ff4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012ff6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8012ff8:	6803      	ldr	r3, [r0, #0]
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	6003      	str	r3, [r0, #0]
}
 8012ffe:	bc30      	pop	{r4, r5}
 8013000:	4770      	bx	lr

08013002 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8013002:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013004:	6842      	ldr	r2, [r0, #4]
 8013006:	6881      	ldr	r1, [r0, #8]
 8013008:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801300a:	6882      	ldr	r2, [r0, #8]
 801300c:	6841      	ldr	r1, [r0, #4]
 801300e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013010:	685a      	ldr	r2, [r3, #4]
 8013012:	4290      	cmp	r0, r2
 8013014:	d005      	beq.n	8013022 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8013016:	2200      	movs	r2, #0
 8013018:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 801301a:	6818      	ldr	r0, [r3, #0]
 801301c:	3801      	subs	r0, #1
 801301e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8013020:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013022:	6882      	ldr	r2, [r0, #8]
 8013024:	605a      	str	r2, [r3, #4]
 8013026:	e7f6      	b.n	8013016 <uxListRemove+0x14>

08013028 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013028:	4b0b      	ldr	r3, [pc, #44]	; (8013058 <prvTaskExitError+0x30>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013030:	d008      	beq.n	8013044 <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013036:	f383 8811 	msr	BASEPRI, r3
 801303a:	f3bf 8f6f 	isb	sy
 801303e:	f3bf 8f4f 	dsb	sy
 8013042:	e7fe      	b.n	8013042 <prvTaskExitError+0x1a>
 8013044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013048:	f383 8811 	msr	BASEPRI, r3
 801304c:	f3bf 8f6f 	isb	sy
 8013050:	f3bf 8f4f 	dsb	sy
 8013054:	e7fe      	b.n	8013054 <prvTaskExitError+0x2c>
 8013056:	bf00      	nop
 8013058:	20000004 	.word	0x20000004

0801305c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 801305c:	4806      	ldr	r0, [pc, #24]	; (8013078 <prvPortStartFirstTask+0x1c>)
 801305e:	6800      	ldr	r0, [r0, #0]
 8013060:	6800      	ldr	r0, [r0, #0]
 8013062:	f380 8808 	msr	MSP, r0
 8013066:	b662      	cpsie	i
 8013068:	b661      	cpsie	f
 801306a:	f3bf 8f4f 	dsb	sy
 801306e:	f3bf 8f6f 	isb	sy
 8013072:	df00      	svc	0
 8013074:	bf00      	nop
 8013076:	0000      	.short	0x0000
 8013078:	e000ed08 	.word	0xe000ed08

0801307c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801307c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801308c <vPortEnableVFP+0x10>
 8013080:	6801      	ldr	r1, [r0, #0]
 8013082:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013086:	6001      	str	r1, [r0, #0]
 8013088:	4770      	bx	lr
 801308a:	0000      	.short	0x0000
 801308c:	e000ed88 	.word	0xe000ed88

08013090 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013094:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013098:	f021 0101 	bic.w	r1, r1, #1
 801309c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80130a0:	4b05      	ldr	r3, [pc, #20]	; (80130b8 <pxPortInitialiseStack+0x28>)
 80130a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80130a6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80130aa:	f06f 0302 	mvn.w	r3, #2
 80130ae:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80130b2:	3844      	subs	r0, #68	; 0x44
 80130b4:	4770      	bx	lr
 80130b6:	bf00      	nop
 80130b8:	08013029 	.word	0x08013029
 80130bc:	00000000 	.word	0x00000000

080130c0 <SVC_Handler>:
	__asm volatile (
 80130c0:	4b07      	ldr	r3, [pc, #28]	; (80130e0 <pxCurrentTCBConst2>)
 80130c2:	6819      	ldr	r1, [r3, #0]
 80130c4:	6808      	ldr	r0, [r1, #0]
 80130c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ca:	f380 8809 	msr	PSP, r0
 80130ce:	f3bf 8f6f 	isb	sy
 80130d2:	f04f 0000 	mov.w	r0, #0
 80130d6:	f380 8811 	msr	BASEPRI, r0
 80130da:	4770      	bx	lr
 80130dc:	f3af 8000 	nop.w

080130e0 <pxCurrentTCBConst2>:
 80130e0:	2000924c 	.word	0x2000924c

080130e4 <vPortEnterCritical>:
 80130e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e8:	f383 8811 	msr	BASEPRI, r3
 80130ec:	f3bf 8f6f 	isb	sy
 80130f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80130f4:	4a0a      	ldr	r2, [pc, #40]	; (8013120 <vPortEnterCritical+0x3c>)
 80130f6:	6813      	ldr	r3, [r2, #0]
 80130f8:	3301      	adds	r3, #1
 80130fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80130fc:	2b01      	cmp	r3, #1
 80130fe:	d10d      	bne.n	801311c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013100:	4b08      	ldr	r3, [pc, #32]	; (8013124 <vPortEnterCritical+0x40>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013108:	d008      	beq.n	801311c <vPortEnterCritical+0x38>
 801310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801310e:	f383 8811 	msr	BASEPRI, r3
 8013112:	f3bf 8f6f 	isb	sy
 8013116:	f3bf 8f4f 	dsb	sy
 801311a:	e7fe      	b.n	801311a <vPortEnterCritical+0x36>
 801311c:	4770      	bx	lr
 801311e:	bf00      	nop
 8013120:	20000004 	.word	0x20000004
 8013124:	e000ed04 	.word	0xe000ed04

08013128 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8013128:	4b09      	ldr	r3, [pc, #36]	; (8013150 <vPortExitCritical+0x28>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	b943      	cbnz	r3, 8013140 <vPortExitCritical+0x18>
 801312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013132:	f383 8811 	msr	BASEPRI, r3
 8013136:	f3bf 8f6f 	isb	sy
 801313a:	f3bf 8f4f 	dsb	sy
 801313e:	e7fe      	b.n	801313e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8013140:	3b01      	subs	r3, #1
 8013142:	4a03      	ldr	r2, [pc, #12]	; (8013150 <vPortExitCritical+0x28>)
 8013144:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013146:	b90b      	cbnz	r3, 801314c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013148:	f383 8811 	msr	BASEPRI, r3
 801314c:	4770      	bx	lr
 801314e:	bf00      	nop
 8013150:	20000004 	.word	0x20000004
	...

08013160 <PendSV_Handler>:
	__asm volatile
 8013160:	f3ef 8009 	mrs	r0, PSP
 8013164:	f3bf 8f6f 	isb	sy
 8013168:	4b15      	ldr	r3, [pc, #84]	; (80131c0 <pxCurrentTCBConst>)
 801316a:	681a      	ldr	r2, [r3, #0]
 801316c:	f01e 0f10 	tst.w	lr, #16
 8013170:	bf08      	it	eq
 8013172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801317a:	6010      	str	r0, [r2, #0]
 801317c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8013180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013184:	f380 8811 	msr	BASEPRI, r0
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	f3bf 8f6f 	isb	sy
 8013190:	f001 fa3c 	bl	801460c <vTaskSwitchContext>
 8013194:	f04f 0000 	mov.w	r0, #0
 8013198:	f380 8811 	msr	BASEPRI, r0
 801319c:	bc08      	pop	{r3}
 801319e:	6819      	ldr	r1, [r3, #0]
 80131a0:	6808      	ldr	r0, [r1, #0]
 80131a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a6:	f01e 0f10 	tst.w	lr, #16
 80131aa:	bf08      	it	eq
 80131ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80131b0:	f380 8809 	msr	PSP, r0
 80131b4:	f3bf 8f6f 	isb	sy
 80131b8:	4770      	bx	lr
 80131ba:	bf00      	nop
 80131bc:	f3af 8000 	nop.w

080131c0 <pxCurrentTCBConst>:
 80131c0:	2000924c 	.word	0x2000924c

080131c4 <SysTick_Handler>:
{
 80131c4:	b508      	push	{r3, lr}
	__asm volatile
 80131c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ca:	f383 8811 	msr	BASEPRI, r3
 80131ce:	f3bf 8f6f 	isb	sy
 80131d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80131d6:	f001 f8a1 	bl	801431c <xTaskIncrementTick>
 80131da:	b118      	cbz	r0, 80131e4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80131dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131e0:	4b02      	ldr	r3, [pc, #8]	; (80131ec <SysTick_Handler+0x28>)
 80131e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80131e4:	2300      	movs	r3, #0
 80131e6:	f383 8811 	msr	BASEPRI, r3
 80131ea:	bd08      	pop	{r3, pc}
 80131ec:	e000ed04 	.word	0xe000ed04

080131f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80131f0:	4b06      	ldr	r3, [pc, #24]	; (801320c <vPortSetupTimerInterrupt+0x1c>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	4a06      	ldr	r2, [pc, #24]	; (8013210 <vPortSetupTimerInterrupt+0x20>)
 80131f6:	fba2 2303 	umull	r2, r3, r2, r3
 80131fa:	099b      	lsrs	r3, r3, #6
 80131fc:	3b01      	subs	r3, #1
 80131fe:	4a05      	ldr	r2, [pc, #20]	; (8013214 <vPortSetupTimerInterrupt+0x24>)
 8013200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013202:	2207      	movs	r2, #7
 8013204:	4b04      	ldr	r3, [pc, #16]	; (8013218 <vPortSetupTimerInterrupt+0x28>)
 8013206:	601a      	str	r2, [r3, #0]
 8013208:	4770      	bx	lr
 801320a:	bf00      	nop
 801320c:	2000003c 	.word	0x2000003c
 8013210:	10624dd3 	.word	0x10624dd3
 8013214:	e000e014 	.word	0xe000e014
 8013218:	e000e010 	.word	0xe000e010

0801321c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801321c:	4b31      	ldr	r3, [pc, #196]	; (80132e4 <xPortStartScheduler+0xc8>)
 801321e:	681a      	ldr	r2, [r3, #0]
 8013220:	4b31      	ldr	r3, [pc, #196]	; (80132e8 <xPortStartScheduler+0xcc>)
 8013222:	429a      	cmp	r2, r3
 8013224:	d01a      	beq.n	801325c <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013226:	4b2f      	ldr	r3, [pc, #188]	; (80132e4 <xPortStartScheduler+0xc8>)
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	4b30      	ldr	r3, [pc, #192]	; (80132ec <xPortStartScheduler+0xd0>)
 801322c:	429a      	cmp	r2, r3
 801322e:	d01e      	beq.n	801326e <xPortStartScheduler+0x52>
{
 8013230:	b500      	push	{lr}
 8013232:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013234:	4b2e      	ldr	r3, [pc, #184]	; (80132f0 <xPortStartScheduler+0xd4>)
 8013236:	781a      	ldrb	r2, [r3, #0]
 8013238:	b2d2      	uxtb	r2, r2
 801323a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801323c:	22ff      	movs	r2, #255	; 0xff
 801323e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	b2db      	uxtb	r3, r3
 8013244:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013248:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801324c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013250:	4a28      	ldr	r2, [pc, #160]	; (80132f4 <xPortStartScheduler+0xd8>)
 8013252:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013254:	2207      	movs	r2, #7
 8013256:	4b28      	ldr	r3, [pc, #160]	; (80132f8 <xPortStartScheduler+0xdc>)
 8013258:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801325a:	e01b      	b.n	8013294 <xPortStartScheduler+0x78>
	__asm volatile
 801325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013260:	f383 8811 	msr	BASEPRI, r3
 8013264:	f3bf 8f6f 	isb	sy
 8013268:	f3bf 8f4f 	dsb	sy
 801326c:	e7fe      	b.n	801326c <xPortStartScheduler+0x50>
 801326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013272:	f383 8811 	msr	BASEPRI, r3
 8013276:	f3bf 8f6f 	isb	sy
 801327a:	f3bf 8f4f 	dsb	sy
 801327e:	e7fe      	b.n	801327e <xPortStartScheduler+0x62>
			ulMaxPRIGROUPValue--;
 8013280:	4a1d      	ldr	r2, [pc, #116]	; (80132f8 <xPortStartScheduler+0xdc>)
 8013282:	6813      	ldr	r3, [r2, #0]
 8013284:	3b01      	subs	r3, #1
 8013286:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013288:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801328c:	005b      	lsls	r3, r3, #1
 801328e:	b2db      	uxtb	r3, r3
 8013290:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013294:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013298:	f013 0f80 	tst.w	r3, #128	; 0x80
 801329c:	d1f0      	bne.n	8013280 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801329e:	4a16      	ldr	r2, [pc, #88]	; (80132f8 <xPortStartScheduler+0xdc>)
 80132a0:	6813      	ldr	r3, [r2, #0]
 80132a2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80132a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80132a8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80132aa:	9b01      	ldr	r3, [sp, #4]
 80132ac:	b2db      	uxtb	r3, r3
 80132ae:	4a10      	ldr	r2, [pc, #64]	; (80132f0 <xPortStartScheduler+0xd4>)
 80132b0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80132b2:	4b12      	ldr	r3, [pc, #72]	; (80132fc <xPortStartScheduler+0xe0>)
 80132b4:	681a      	ldr	r2, [r3, #0]
 80132b6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80132ba:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80132c2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80132c4:	f7ff ff94 	bl	80131f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80132c8:	2200      	movs	r2, #0
 80132ca:	4b0d      	ldr	r3, [pc, #52]	; (8013300 <xPortStartScheduler+0xe4>)
 80132cc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80132ce:	f7ff fed5 	bl	801307c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80132d2:	4a0c      	ldr	r2, [pc, #48]	; (8013304 <xPortStartScheduler+0xe8>)
 80132d4:	6813      	ldr	r3, [r2, #0]
 80132d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80132da:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80132dc:	f7ff febe 	bl	801305c <prvPortStartFirstTask>
	prvTaskExitError();
 80132e0:	f7ff fea2 	bl	8013028 <prvTaskExitError>
 80132e4:	e000ed00 	.word	0xe000ed00
 80132e8:	410fc271 	.word	0x410fc271
 80132ec:	410fc270 	.word	0x410fc270
 80132f0:	e000e400 	.word	0xe000e400
 80132f4:	2000022c 	.word	0x2000022c
 80132f8:	20000230 	.word	0x20000230
 80132fc:	e000ed20 	.word	0xe000ed20
 8013300:	20000004 	.word	0x20000004
 8013304:	e000ef34 	.word	0xe000ef34

08013308 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8013308:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801330c:	2b0f      	cmp	r3, #15
 801330e:	d90f      	bls.n	8013330 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013310:	4a10      	ldr	r2, [pc, #64]	; (8013354 <vPortValidateInterruptPriority+0x4c>)
 8013312:	5c9b      	ldrb	r3, [r3, r2]
 8013314:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013316:	4a10      	ldr	r2, [pc, #64]	; (8013358 <vPortValidateInterruptPriority+0x50>)
 8013318:	7812      	ldrb	r2, [r2, #0]
 801331a:	4293      	cmp	r3, r2
 801331c:	d208      	bcs.n	8013330 <vPortValidateInterruptPriority+0x28>
 801331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013322:	f383 8811 	msr	BASEPRI, r3
 8013326:	f3bf 8f6f 	isb	sy
 801332a:	f3bf 8f4f 	dsb	sy
 801332e:	e7fe      	b.n	801332e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013330:	4b0a      	ldr	r3, [pc, #40]	; (801335c <vPortValidateInterruptPriority+0x54>)
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013338:	4a09      	ldr	r2, [pc, #36]	; (8013360 <vPortValidateInterruptPriority+0x58>)
 801333a:	6812      	ldr	r2, [r2, #0]
 801333c:	4293      	cmp	r3, r2
 801333e:	d908      	bls.n	8013352 <vPortValidateInterruptPriority+0x4a>
 8013340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013344:	f383 8811 	msr	BASEPRI, r3
 8013348:	f3bf 8f6f 	isb	sy
 801334c:	f3bf 8f4f 	dsb	sy
 8013350:	e7fe      	b.n	8013350 <vPortValidateInterruptPriority+0x48>
 8013352:	4770      	bx	lr
 8013354:	e000e3f0 	.word	0xe000e3f0
 8013358:	2000022c 	.word	0x2000022c
 801335c:	e000ed0c 	.word	0xe000ed0c
 8013360:	20000230 	.word	0x20000230

08013364 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013364:	4a12      	ldr	r2, [pc, #72]	; (80133b0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013366:	f012 0f07 	tst.w	r2, #7
 801336a:	d01e      	beq.n	80133aa <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801336c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801336e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013372:	f5c1 4310 	rsb	r3, r1, #36864	; 0x9000
 8013376:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013378:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801337a:	480e      	ldr	r0, [pc, #56]	; (80133b4 <prvHeapInit+0x50>)
 801337c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801337e:	2100      	movs	r1, #0
 8013380:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013382:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8013384:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013386:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801338a:	480b      	ldr	r0, [pc, #44]	; (80133b8 <prvHeapInit+0x54>)
 801338c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801338e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013390:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013392:	1a99      	subs	r1, r3, r2
 8013394:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013396:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013398:	4b08      	ldr	r3, [pc, #32]	; (80133bc <prvHeapInit+0x58>)
 801339a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801339c:	4b08      	ldr	r3, [pc, #32]	; (80133c0 <prvHeapInit+0x5c>)
 801339e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80133a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80133a4:	4b07      	ldr	r3, [pc, #28]	; (80133c4 <prvHeapInit+0x60>)
 80133a6:	601a      	str	r2, [r3, #0]
 80133a8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80133aa:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80133ae:	e7e4      	b.n	801337a <prvHeapInit+0x16>
 80133b0:	20000238 	.word	0x20000238
 80133b4:	20009244 	.word	0x20009244
 80133b8:	20000234 	.word	0x20000234
 80133bc:	20009240 	.word	0x20009240
 80133c0:	2000923c 	.word	0x2000923c
 80133c4:	20009238 	.word	0x20009238

080133c8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80133c8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80133ca:	4b13      	ldr	r3, [pc, #76]	; (8013418 <prvInsertBlockIntoFreeList+0x50>)
 80133cc:	681a      	ldr	r2, [r3, #0]
 80133ce:	4282      	cmp	r2, r0
 80133d0:	d31b      	bcc.n	801340a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80133d2:	6859      	ldr	r1, [r3, #4]
 80133d4:	185c      	adds	r4, r3, r1
 80133d6:	42a0      	cmp	r0, r4
 80133d8:	d103      	bne.n	80133e2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80133da:	6840      	ldr	r0, [r0, #4]
 80133dc:	4401      	add	r1, r0
 80133de:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80133e0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80133e2:	6841      	ldr	r1, [r0, #4]
 80133e4:	1844      	adds	r4, r0, r1
 80133e6:	42a2      	cmp	r2, r4
 80133e8:	d113      	bne.n	8013412 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80133ea:	4c0c      	ldr	r4, [pc, #48]	; (801341c <prvInsertBlockIntoFreeList+0x54>)
 80133ec:	6824      	ldr	r4, [r4, #0]
 80133ee:	42a2      	cmp	r2, r4
 80133f0:	d00d      	beq.n	801340e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80133f2:	6852      	ldr	r2, [r2, #4]
 80133f4:	4411      	add	r1, r2
 80133f6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	6812      	ldr	r2, [r2, #0]
 80133fc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80133fe:	4298      	cmp	r0, r3
 8013400:	d000      	beq.n	8013404 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013402:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013408:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801340a:	4613      	mov	r3, r2
 801340c:	e7de      	b.n	80133cc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801340e:	6004      	str	r4, [r0, #0]
 8013410:	e7f5      	b.n	80133fe <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013412:	6002      	str	r2, [r0, #0]
 8013414:	e7f3      	b.n	80133fe <prvInsertBlockIntoFreeList+0x36>
 8013416:	bf00      	nop
 8013418:	20009244 	.word	0x20009244
 801341c:	20000234 	.word	0x20000234

08013420 <pvPortMalloc>:
{
 8013420:	b570      	push	{r4, r5, r6, lr}
 8013422:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8013424:	f000 ff64 	bl	80142f0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8013428:	4b3a      	ldr	r3, [pc, #232]	; (8013514 <pvPortMalloc+0xf4>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	b1bb      	cbz	r3, 801345e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801342e:	4b3a      	ldr	r3, [pc, #232]	; (8013518 <pvPortMalloc+0xf8>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	421c      	tst	r4, r3
 8013434:	d163      	bne.n	80134fe <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8013436:	b1ac      	cbz	r4, 8013464 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8013438:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801343a:	f014 0f07 	tst.w	r4, #7
 801343e:	d011      	beq.n	8013464 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013440:	f024 0407 	bic.w	r4, r4, #7
 8013444:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013446:	f004 0307 	and.w	r3, r4, #7
 801344a:	b15b      	cbz	r3, 8013464 <pvPortMalloc+0x44>
 801344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013450:	f383 8811 	msr	BASEPRI, r3
 8013454:	f3bf 8f6f 	isb	sy
 8013458:	f3bf 8f4f 	dsb	sy
 801345c:	e7fe      	b.n	801345c <pvPortMalloc+0x3c>
			prvHeapInit();
 801345e:	f7ff ff81 	bl	8013364 <prvHeapInit>
 8013462:	e7e4      	b.n	801342e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013464:	2c00      	cmp	r4, #0
 8013466:	d04c      	beq.n	8013502 <pvPortMalloc+0xe2>
 8013468:	4b2c      	ldr	r3, [pc, #176]	; (801351c <pvPortMalloc+0xfc>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	429c      	cmp	r4, r3
 801346e:	d84a      	bhi.n	8013506 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8013470:	4b2b      	ldr	r3, [pc, #172]	; (8013520 <pvPortMalloc+0x100>)
 8013472:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013474:	e001      	b.n	801347a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8013476:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8013478:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801347a:	686a      	ldr	r2, [r5, #4]
 801347c:	4294      	cmp	r4, r2
 801347e:	d902      	bls.n	8013486 <pvPortMalloc+0x66>
 8013480:	682a      	ldr	r2, [r5, #0]
 8013482:	2a00      	cmp	r2, #0
 8013484:	d1f7      	bne.n	8013476 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8013486:	4a23      	ldr	r2, [pc, #140]	; (8013514 <pvPortMalloc+0xf4>)
 8013488:	6812      	ldr	r2, [r2, #0]
 801348a:	4295      	cmp	r5, r2
 801348c:	d03d      	beq.n	801350a <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801348e:	681e      	ldr	r6, [r3, #0]
 8013490:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013492:	682a      	ldr	r2, [r5, #0]
 8013494:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013496:	686b      	ldr	r3, [r5, #4]
 8013498:	1b1b      	subs	r3, r3, r4
 801349a:	2b10      	cmp	r3, #16
 801349c:	d910      	bls.n	80134c0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801349e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80134a0:	f010 0f07 	tst.w	r0, #7
 80134a4:	d008      	beq.n	80134b8 <pvPortMalloc+0x98>
 80134a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134aa:	f383 8811 	msr	BASEPRI, r3
 80134ae:	f3bf 8f6f 	isb	sy
 80134b2:	f3bf 8f4f 	dsb	sy
 80134b6:	e7fe      	b.n	80134b6 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80134b8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80134ba:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80134bc:	f7ff ff84 	bl	80133c8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80134c0:	686a      	ldr	r2, [r5, #4]
 80134c2:	4916      	ldr	r1, [pc, #88]	; (801351c <pvPortMalloc+0xfc>)
 80134c4:	680b      	ldr	r3, [r1, #0]
 80134c6:	1a9b      	subs	r3, r3, r2
 80134c8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80134ca:	4916      	ldr	r1, [pc, #88]	; (8013524 <pvPortMalloc+0x104>)
 80134cc:	6809      	ldr	r1, [r1, #0]
 80134ce:	428b      	cmp	r3, r1
 80134d0:	d201      	bcs.n	80134d6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80134d2:	4914      	ldr	r1, [pc, #80]	; (8013524 <pvPortMalloc+0x104>)
 80134d4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80134d6:	4b10      	ldr	r3, [pc, #64]	; (8013518 <pvPortMalloc+0xf8>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	4313      	orrs	r3, r2
 80134dc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80134de:	2300      	movs	r3, #0
 80134e0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80134e2:	f000 ffab 	bl	801443c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80134e6:	f016 0f07 	tst.w	r6, #7
 80134ea:	d010      	beq.n	801350e <pvPortMalloc+0xee>
 80134ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134f0:	f383 8811 	msr	BASEPRI, r3
 80134f4:	f3bf 8f6f 	isb	sy
 80134f8:	f3bf 8f4f 	dsb	sy
 80134fc:	e7fe      	b.n	80134fc <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 80134fe:	2600      	movs	r6, #0
 8013500:	e7ef      	b.n	80134e2 <pvPortMalloc+0xc2>
 8013502:	2600      	movs	r6, #0
 8013504:	e7ed      	b.n	80134e2 <pvPortMalloc+0xc2>
 8013506:	2600      	movs	r6, #0
 8013508:	e7eb      	b.n	80134e2 <pvPortMalloc+0xc2>
 801350a:	2600      	movs	r6, #0
 801350c:	e7e9      	b.n	80134e2 <pvPortMalloc+0xc2>
}
 801350e:	4630      	mov	r0, r6
 8013510:	bd70      	pop	{r4, r5, r6, pc}
 8013512:	bf00      	nop
 8013514:	20000234 	.word	0x20000234
 8013518:	20009238 	.word	0x20009238
 801351c:	2000923c 	.word	0x2000923c
 8013520:	20009244 	.word	0x20009244
 8013524:	20009240 	.word	0x20009240

08013528 <vPortFree>:
	if( pv != NULL )
 8013528:	b380      	cbz	r0, 801358c <vPortFree+0x64>
{
 801352a:	b538      	push	{r3, r4, r5, lr}
 801352c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801352e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013532:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013536:	4916      	ldr	r1, [pc, #88]	; (8013590 <vPortFree+0x68>)
 8013538:	6809      	ldr	r1, [r1, #0]
 801353a:	420a      	tst	r2, r1
 801353c:	d108      	bne.n	8013550 <vPortFree+0x28>
 801353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013542:	f383 8811 	msr	BASEPRI, r3
 8013546:	f3bf 8f6f 	isb	sy
 801354a:	f3bf 8f4f 	dsb	sy
 801354e:	e7fe      	b.n	801354e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013550:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8013554:	b140      	cbz	r0, 8013568 <vPortFree+0x40>
 8013556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801355a:	f383 8811 	msr	BASEPRI, r3
 801355e:	f3bf 8f6f 	isb	sy
 8013562:	f3bf 8f4f 	dsb	sy
 8013566:	e7fe      	b.n	8013566 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013568:	ea22 0201 	bic.w	r2, r2, r1
 801356c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8013570:	f000 febe 	bl	80142f0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013574:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8013578:	4a06      	ldr	r2, [pc, #24]	; (8013594 <vPortFree+0x6c>)
 801357a:	6813      	ldr	r3, [r2, #0]
 801357c:	440b      	add	r3, r1
 801357e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013580:	4628      	mov	r0, r5
 8013582:	f7ff ff21 	bl	80133c8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8013586:	f000 ff59 	bl	801443c <xTaskResumeAll>
 801358a:	bd38      	pop	{r3, r4, r5, pc}
 801358c:	4770      	bx	lr
 801358e:	bf00      	nop
 8013590:	20009238 	.word	0x20009238
 8013594:	2000923c 	.word	0x2000923c

08013598 <xPortGetMinimumEverFreeHeapSize>:
}
 8013598:	4b01      	ldr	r3, [pc, #4]	; (80135a0 <xPortGetMinimumEverFreeHeapSize+0x8>)
 801359a:	6818      	ldr	r0, [r3, #0]
 801359c:	4770      	bx	lr
 801359e:	bf00      	nop
 80135a0:	20009240 	.word	0x20009240

080135a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80135a4:	b510      	push	{r4, lr}
 80135a6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80135a8:	f7ff fd9c 	bl	80130e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80135ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80135ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d004      	beq.n	80135be <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80135b4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80135b6:	f7ff fdb7 	bl	8013128 <vPortExitCritical>

	return xReturn;
}
 80135ba:	4620      	mov	r0, r4
 80135bc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80135be:	2401      	movs	r4, #1
 80135c0:	e7f9      	b.n	80135b6 <prvIsQueueFull+0x12>

080135c2 <prvIsQueueEmpty>:
{
 80135c2:	b510      	push	{r4, lr}
 80135c4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80135c6:	f7ff fd8d 	bl	80130e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80135ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80135cc:	b123      	cbz	r3, 80135d8 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 80135ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80135d0:	f7ff fdaa 	bl	8013128 <vPortExitCritical>
}
 80135d4:	4620      	mov	r0, r4
 80135d6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80135d8:	2401      	movs	r4, #1
 80135da:	e7f9      	b.n	80135d0 <prvIsQueueEmpty+0xe>

080135dc <prvCopyDataToQueue>:
{
 80135dc:	b570      	push	{r4, r5, r6, lr}
 80135de:	4604      	mov	r4, r0
 80135e0:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80135e2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80135e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80135e6:	b94a      	cbnz	r2, 80135fc <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135e8:	6803      	ldr	r3, [r0, #0]
 80135ea:	bb53      	cbnz	r3, 8013642 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80135ec:	6840      	ldr	r0, [r0, #4]
 80135ee:	f001 f98d 	bl	801490c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80135f2:	2300      	movs	r3, #0
 80135f4:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80135f6:	3501      	adds	r5, #1
 80135f8:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80135fa:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80135fc:	b96e      	cbnz	r6, 801361a <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80135fe:	6880      	ldr	r0, [r0, #8]
 8013600:	f00c fa2b 	bl	801fa5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8013604:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013606:	68a3      	ldr	r3, [r4, #8]
 8013608:	4413      	add	r3, r2
 801360a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801360c:	6862      	ldr	r2, [r4, #4]
 801360e:	4293      	cmp	r3, r2
 8013610:	d319      	bcc.n	8013646 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013612:	6823      	ldr	r3, [r4, #0]
 8013614:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8013616:	2000      	movs	r0, #0
 8013618:	e7ed      	b.n	80135f6 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801361a:	68c0      	ldr	r0, [r0, #12]
 801361c:	f00c fa1d 	bl	801fa5a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8013620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013622:	425b      	negs	r3, r3
 8013624:	68e2      	ldr	r2, [r4, #12]
 8013626:	441a      	add	r2, r3
 8013628:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801362a:	6821      	ldr	r1, [r4, #0]
 801362c:	428a      	cmp	r2, r1
 801362e:	d202      	bcs.n	8013636 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8013630:	6862      	ldr	r2, [r4, #4]
 8013632:	4413      	add	r3, r2
 8013634:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8013636:	2e02      	cmp	r6, #2
 8013638:	d107      	bne.n	801364a <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801363a:	b145      	cbz	r5, 801364e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 801363c:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 801363e:	2000      	movs	r0, #0
 8013640:	e7d9      	b.n	80135f6 <prvCopyDataToQueue+0x1a>
 8013642:	2000      	movs	r0, #0
 8013644:	e7d7      	b.n	80135f6 <prvCopyDataToQueue+0x1a>
 8013646:	2000      	movs	r0, #0
 8013648:	e7d5      	b.n	80135f6 <prvCopyDataToQueue+0x1a>
 801364a:	2000      	movs	r0, #0
 801364c:	e7d3      	b.n	80135f6 <prvCopyDataToQueue+0x1a>
 801364e:	2000      	movs	r0, #0
 8013650:	e7d1      	b.n	80135f6 <prvCopyDataToQueue+0x1a>

08013652 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013652:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013654:	b172      	cbz	r2, 8013674 <prvCopyDataFromQueue+0x22>
{
 8013656:	b510      	push	{r4, lr}
 8013658:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801365a:	68c4      	ldr	r4, [r0, #12]
 801365c:	4414      	add	r4, r2
 801365e:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013660:	6840      	ldr	r0, [r0, #4]
 8013662:	4284      	cmp	r4, r0
 8013664:	d301      	bcc.n	801366a <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8013666:	6818      	ldr	r0, [r3, #0]
 8013668:	60d8      	str	r0, [r3, #12]
 801366a:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801366c:	68d9      	ldr	r1, [r3, #12]
 801366e:	f00c f9f4 	bl	801fa5a <memcpy>
 8013672:	bd10      	pop	{r4, pc}
 8013674:	4770      	bx	lr

08013676 <prvUnlockQueue>:
{
 8013676:	b538      	push	{r3, r4, r5, lr}
 8013678:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 801367a:	f7ff fd33 	bl	80130e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 801367e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8013682:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013684:	e001      	b.n	801368a <prvUnlockQueue+0x14>
			--cTxLock;
 8013686:	3c01      	subs	r4, #1
 8013688:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801368a:	2c00      	cmp	r4, #0
 801368c:	dd0a      	ble.n	80136a4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801368e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013690:	b143      	cbz	r3, 80136a4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013692:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8013696:	f001 f835 	bl	8014704 <xTaskRemoveFromEventList>
 801369a:	2800      	cmp	r0, #0
 801369c:	d0f3      	beq.n	8013686 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 801369e:	f001 f8cd 	bl	801483c <vTaskMissedYield>
 80136a2:	e7f0      	b.n	8013686 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80136a4:	23ff      	movs	r3, #255	; 0xff
 80136a6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80136aa:	f7ff fd3d 	bl	8013128 <vPortExitCritical>
	taskENTER_CRITICAL();
 80136ae:	f7ff fd19 	bl	80130e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80136b2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80136b6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80136b8:	e001      	b.n	80136be <prvUnlockQueue+0x48>
				--cRxLock;
 80136ba:	3c01      	subs	r4, #1
 80136bc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80136be:	2c00      	cmp	r4, #0
 80136c0:	dd0a      	ble.n	80136d8 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136c2:	692b      	ldr	r3, [r5, #16]
 80136c4:	b143      	cbz	r3, 80136d8 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136c6:	f105 0010 	add.w	r0, r5, #16
 80136ca:	f001 f81b 	bl	8014704 <xTaskRemoveFromEventList>
 80136ce:	2800      	cmp	r0, #0
 80136d0:	d0f3      	beq.n	80136ba <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80136d2:	f001 f8b3 	bl	801483c <vTaskMissedYield>
 80136d6:	e7f0      	b.n	80136ba <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80136d8:	23ff      	movs	r3, #255	; 0xff
 80136da:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80136de:	f7ff fd23 	bl	8013128 <vPortExitCritical>
 80136e2:	bd38      	pop	{r3, r4, r5, pc}

080136e4 <xQueueGenericReset>:
{
 80136e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80136e6:	b330      	cbz	r0, 8013736 <xQueueGenericReset+0x52>
 80136e8:	4604      	mov	r4, r0
 80136ea:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80136ec:	f7ff fcfa 	bl	80130e4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80136f0:	6821      	ldr	r1, [r4, #0]
 80136f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80136f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80136f6:	fb03 1002 	mla	r0, r3, r2, r1
 80136fa:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80136fc:	2000      	movs	r0, #0
 80136fe:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013700:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8013702:	3a01      	subs	r2, #1
 8013704:	fb02 1303 	mla	r3, r2, r3, r1
 8013708:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801370a:	23ff      	movs	r3, #255	; 0xff
 801370c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013710:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8013714:	b9c5      	cbnz	r5, 8013748 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013716:	6923      	ldr	r3, [r4, #16]
 8013718:	b1f3      	cbz	r3, 8013758 <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801371a:	f104 0010 	add.w	r0, r4, #16
 801371e:	f000 fff1 	bl	8014704 <xTaskRemoveFromEventList>
 8013722:	b1c8      	cbz	r0, 8013758 <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
 8013724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013728:	4b0d      	ldr	r3, [pc, #52]	; (8013760 <xQueueGenericReset+0x7c>)
 801372a:	601a      	str	r2, [r3, #0]
 801372c:	f3bf 8f4f 	dsb	sy
 8013730:	f3bf 8f6f 	isb	sy
 8013734:	e010      	b.n	8013758 <xQueueGenericReset+0x74>
 8013736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801373a:	f383 8811 	msr	BASEPRI, r3
 801373e:	f3bf 8f6f 	isb	sy
 8013742:	f3bf 8f4f 	dsb	sy
 8013746:	e7fe      	b.n	8013746 <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013748:	f104 0010 	add.w	r0, r4, #16
 801374c:	f7ff fc25 	bl	8012f9a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013750:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013754:	f7ff fc21 	bl	8012f9a <vListInitialise>
	taskEXIT_CRITICAL();
 8013758:	f7ff fce6 	bl	8013128 <vPortExitCritical>
}
 801375c:	2001      	movs	r0, #1
 801375e:	bd38      	pop	{r3, r4, r5, pc}
 8013760:	e000ed04 	.word	0xe000ed04

08013764 <prvInitialiseNewQueue>:
{
 8013764:	b538      	push	{r3, r4, r5, lr}
 8013766:	461d      	mov	r5, r3
 8013768:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 801376a:	460b      	mov	r3, r1
 801376c:	b149      	cbz	r1, 8013782 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801376e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8013770:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013772:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013774:	2101      	movs	r1, #1
 8013776:	4620      	mov	r0, r4
 8013778:	f7ff ffb4 	bl	80136e4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 801377c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 8013780:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013782:	6024      	str	r4, [r4, #0]
 8013784:	e7f4      	b.n	8013770 <prvInitialiseNewQueue+0xc>

08013786 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013786:	b940      	cbnz	r0, 801379a <xQueueGenericCreateStatic+0x14>
 8013788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801378c:	f383 8811 	msr	BASEPRI, r3
 8013790:	f3bf 8f6f 	isb	sy
 8013794:	f3bf 8f4f 	dsb	sy
 8013798:	e7fe      	b.n	8013798 <xQueueGenericCreateStatic+0x12>
	{
 801379a:	b510      	push	{r4, lr}
 801379c:	b084      	sub	sp, #16
 801379e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80137a0:	b163      	cbz	r3, 80137bc <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80137a2:	b1a2      	cbz	r2, 80137ce <xQueueGenericCreateStatic+0x48>
 80137a4:	b1a9      	cbz	r1, 80137d2 <xQueueGenericCreateStatic+0x4c>
 80137a6:	2001      	movs	r0, #1
 80137a8:	b9a8      	cbnz	r0, 80137d6 <xQueueGenericCreateStatic+0x50>
 80137aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ae:	f383 8811 	msr	BASEPRI, r3
 80137b2:	f3bf 8f6f 	isb	sy
 80137b6:	f3bf 8f4f 	dsb	sy
 80137ba:	e7fe      	b.n	80137ba <xQueueGenericCreateStatic+0x34>
 80137bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c0:	f383 8811 	msr	BASEPRI, r3
 80137c4:	f3bf 8f6f 	isb	sy
 80137c8:	f3bf 8f4f 	dsb	sy
 80137cc:	e7fe      	b.n	80137cc <xQueueGenericCreateStatic+0x46>
 80137ce:	2001      	movs	r0, #1
 80137d0:	e7ea      	b.n	80137a8 <xQueueGenericCreateStatic+0x22>
 80137d2:	2000      	movs	r0, #0
 80137d4:	e7e8      	b.n	80137a8 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80137d6:	b90a      	cbnz	r2, 80137dc <xQueueGenericCreateStatic+0x56>
 80137d8:	b101      	cbz	r1, 80137dc <xQueueGenericCreateStatic+0x56>
 80137da:	2000      	movs	r0, #0
 80137dc:	b940      	cbnz	r0, 80137f0 <xQueueGenericCreateStatic+0x6a>
 80137de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e2:	f383 8811 	msr	BASEPRI, r3
 80137e6:	f3bf 8f6f 	isb	sy
 80137ea:	f3bf 8f4f 	dsb	sy
 80137ee:	e7fe      	b.n	80137ee <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80137f0:	2050      	movs	r0, #80	; 0x50
 80137f2:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80137f4:	9803      	ldr	r0, [sp, #12]
 80137f6:	2850      	cmp	r0, #80	; 0x50
 80137f8:	d008      	beq.n	801380c <xQueueGenericCreateStatic+0x86>
 80137fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137fe:	f383 8811 	msr	BASEPRI, r3
 8013802:	f3bf 8f6f 	isb	sy
 8013806:	f3bf 8f4f 	dsb	sy
 801380a:	e7fe      	b.n	801380a <xQueueGenericCreateStatic+0x84>
 801380c:	4620      	mov	r0, r4
 801380e:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013810:	2301      	movs	r3, #1
 8013812:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013816:	9400      	str	r4, [sp, #0]
 8013818:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801381c:	f7ff ffa2 	bl	8013764 <prvInitialiseNewQueue>
	}
 8013820:	4620      	mov	r0, r4
 8013822:	b004      	add	sp, #16
 8013824:	bd10      	pop	{r4, pc}

08013826 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013826:	b940      	cbnz	r0, 801383a <xQueueGenericCreate+0x14>
 8013828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801382c:	f383 8811 	msr	BASEPRI, r3
 8013830:	f3bf 8f6f 	isb	sy
 8013834:	f3bf 8f4f 	dsb	sy
 8013838:	e7fe      	b.n	8013838 <xQueueGenericCreate+0x12>
	{
 801383a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801383c:	b083      	sub	sp, #12
 801383e:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8013840:	b111      	cbz	r1, 8013848 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013842:	fb01 f000 	mul.w	r0, r1, r0
 8013846:	e000      	b.n	801384a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8013848:	2000      	movs	r0, #0
 801384a:	4617      	mov	r7, r2
 801384c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801384e:	3050      	adds	r0, #80	; 0x50
 8013850:	f7ff fde6 	bl	8013420 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8013854:	4605      	mov	r5, r0
 8013856:	b150      	cbz	r0, 801386e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013858:	2300      	movs	r3, #0
 801385a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801385e:	9000      	str	r0, [sp, #0]
 8013860:	463b      	mov	r3, r7
 8013862:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8013866:	4621      	mov	r1, r4
 8013868:	4630      	mov	r0, r6
 801386a:	f7ff ff7b 	bl	8013764 <prvInitialiseNewQueue>
	}
 801386e:	4628      	mov	r0, r5
 8013870:	b003      	add	sp, #12
 8013872:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013874 <xQueueGenericSend>:
{
 8013874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013876:	b085      	sub	sp, #20
 8013878:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801387a:	b160      	cbz	r0, 8013896 <xQueueGenericSend+0x22>
 801387c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801387e:	b199      	cbz	r1, 80138a8 <xQueueGenericSend+0x34>
 8013880:	2501      	movs	r5, #1
 8013882:	b9bd      	cbnz	r5, 80138b4 <xQueueGenericSend+0x40>
 8013884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013888:	f383 8811 	msr	BASEPRI, r3
 801388c:	f3bf 8f6f 	isb	sy
 8013890:	f3bf 8f4f 	dsb	sy
 8013894:	e7fe      	b.n	8013894 <xQueueGenericSend+0x20>
 8013896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801389a:	f383 8811 	msr	BASEPRI, r3
 801389e:	f3bf 8f6f 	isb	sy
 80138a2:	f3bf 8f4f 	dsb	sy
 80138a6:	e7fe      	b.n	80138a6 <xQueueGenericSend+0x32>
 80138a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80138aa:	b90a      	cbnz	r2, 80138b0 <xQueueGenericSend+0x3c>
 80138ac:	2501      	movs	r5, #1
 80138ae:	e7e8      	b.n	8013882 <xQueueGenericSend+0xe>
 80138b0:	2500      	movs	r5, #0
 80138b2:	e7e6      	b.n	8013882 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80138b4:	2b02      	cmp	r3, #2
 80138b6:	d009      	beq.n	80138cc <xQueueGenericSend+0x58>
 80138b8:	b96d      	cbnz	r5, 80138d6 <xQueueGenericSend+0x62>
 80138ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138be:	f383 8811 	msr	BASEPRI, r3
 80138c2:	f3bf 8f6f 	isb	sy
 80138c6:	f3bf 8f4f 	dsb	sy
 80138ca:	e7fe      	b.n	80138ca <xQueueGenericSend+0x56>
 80138cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80138ce:	2a01      	cmp	r2, #1
 80138d0:	d0f2      	beq.n	80138b8 <xQueueGenericSend+0x44>
 80138d2:	2500      	movs	r5, #0
 80138d4:	e7f0      	b.n	80138b8 <xQueueGenericSend+0x44>
 80138d6:	461e      	mov	r6, r3
 80138d8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80138da:	f000 ffb5 	bl	8014848 <xTaskGetSchedulerState>
 80138de:	b910      	cbnz	r0, 80138e6 <xQueueGenericSend+0x72>
 80138e0:	9b01      	ldr	r3, [sp, #4]
 80138e2:	b103      	cbz	r3, 80138e6 <xQueueGenericSend+0x72>
 80138e4:	2500      	movs	r5, #0
 80138e6:	b945      	cbnz	r5, 80138fa <xQueueGenericSend+0x86>
 80138e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ec:	f383 8811 	msr	BASEPRI, r3
 80138f0:	f3bf 8f6f 	isb	sy
 80138f4:	f3bf 8f4f 	dsb	sy
 80138f8:	e7fe      	b.n	80138f8 <xQueueGenericSend+0x84>
 80138fa:	2500      	movs	r5, #0
 80138fc:	e02c      	b.n	8013958 <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80138fe:	4632      	mov	r2, r6
 8013900:	4639      	mov	r1, r7
 8013902:	4620      	mov	r0, r4
 8013904:	f7ff fe6a 	bl	80135dc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801390a:	b18b      	cbz	r3, 8013930 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801390c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013910:	f000 fef8 	bl	8014704 <xTaskRemoveFromEventList>
 8013914:	b138      	cbz	r0, 8013926 <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
 8013916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801391a:	4b37      	ldr	r3, [pc, #220]	; (80139f8 <xQueueGenericSend+0x184>)
 801391c:	601a      	str	r2, [r3, #0]
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8013926:	f7ff fbff 	bl	8013128 <vPortExitCritical>
				return pdPASS;
 801392a:	2001      	movs	r0, #1
}
 801392c:	b005      	add	sp, #20
 801392e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
 8013930:	2800      	cmp	r0, #0
 8013932:	d0f8      	beq.n	8013926 <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8013934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013938:	4b2f      	ldr	r3, [pc, #188]	; (80139f8 <xQueueGenericSend+0x184>)
 801393a:	601a      	str	r2, [r3, #0]
 801393c:	f3bf 8f4f 	dsb	sy
 8013940:	f3bf 8f6f 	isb	sy
 8013944:	e7ef      	b.n	8013926 <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
 8013946:	f7ff fbef 	bl	8013128 <vPortExitCritical>
					return errQUEUE_FULL;
 801394a:	2000      	movs	r0, #0
 801394c:	e7ee      	b.n	801392c <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
 801394e:	4620      	mov	r0, r4
 8013950:	f7ff fe91 	bl	8013676 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013954:	f000 fd72 	bl	801443c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8013958:	f7ff fbc4 	bl	80130e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801395c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801395e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013960:	429a      	cmp	r2, r3
 8013962:	d3cc      	bcc.n	80138fe <xQueueGenericSend+0x8a>
 8013964:	2e02      	cmp	r6, #2
 8013966:	d0ca      	beq.n	80138fe <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013968:	9b01      	ldr	r3, [sp, #4]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d0eb      	beq.n	8013946 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
 801396e:	b91d      	cbnz	r5, 8013978 <xQueueGenericSend+0x104>
					vTaskSetTimeOutState( &xTimeOut );
 8013970:	a802      	add	r0, sp, #8
 8013972:	f000 ff0d 	bl	8014790 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013976:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8013978:	f7ff fbd6 	bl	8013128 <vPortExitCritical>
		vTaskSuspendAll();
 801397c:	f000 fcb8 	bl	80142f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013980:	f7ff fbb0 	bl	80130e4 <vPortEnterCritical>
 8013984:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013988:	b25b      	sxtb	r3, r3
 801398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801398e:	d102      	bne.n	8013996 <xQueueGenericSend+0x122>
 8013990:	2300      	movs	r3, #0
 8013992:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013996:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801399a:	b25b      	sxtb	r3, r3
 801399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139a0:	d102      	bne.n	80139a8 <xQueueGenericSend+0x134>
 80139a2:	2300      	movs	r3, #0
 80139a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80139a8:	f7ff fbbe 	bl	8013128 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80139ac:	a901      	add	r1, sp, #4
 80139ae:	a802      	add	r0, sp, #8
 80139b0:	f000 ff04 	bl	80147bc <xTaskCheckForTimeOut>
 80139b4:	b9c8      	cbnz	r0, 80139ea <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80139b6:	4620      	mov	r0, r4
 80139b8:	f7ff fdf4 	bl	80135a4 <prvIsQueueFull>
 80139bc:	2800      	cmp	r0, #0
 80139be:	d0c6      	beq.n	801394e <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80139c0:	9901      	ldr	r1, [sp, #4]
 80139c2:	f104 0010 	add.w	r0, r4, #16
 80139c6:	f000 fe85 	bl	80146d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80139ca:	4620      	mov	r0, r4
 80139cc:	f7ff fe53 	bl	8013676 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80139d0:	f000 fd34 	bl	801443c <xTaskResumeAll>
 80139d4:	2800      	cmp	r0, #0
 80139d6:	d1bf      	bne.n	8013958 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 80139d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139dc:	4b06      	ldr	r3, [pc, #24]	; (80139f8 <xQueueGenericSend+0x184>)
 80139de:	601a      	str	r2, [r3, #0]
 80139e0:	f3bf 8f4f 	dsb	sy
 80139e4:	f3bf 8f6f 	isb	sy
 80139e8:	e7b6      	b.n	8013958 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 80139ea:	4620      	mov	r0, r4
 80139ec:	f7ff fe43 	bl	8013676 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139f0:	f000 fd24 	bl	801443c <xTaskResumeAll>
			return errQUEUE_FULL;
 80139f4:	2000      	movs	r0, #0
 80139f6:	e799      	b.n	801392c <xQueueGenericSend+0xb8>
 80139f8:	e000ed04 	.word	0xe000ed04

080139fc <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80139fc:	b148      	cbz	r0, 8013a12 <prvInitialiseMutex+0x16>
	{
 80139fe:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8013a00:	2100      	movs	r1, #0
 8013a02:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013a04:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8013a06:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013a08:	460b      	mov	r3, r1
 8013a0a:	460a      	mov	r2, r1
 8013a0c:	f7ff ff32 	bl	8013874 <xQueueGenericSend>
 8013a10:	bd08      	pop	{r3, pc}
 8013a12:	4770      	bx	lr

08013a14 <xQueueCreateMutex>:
	{
 8013a14:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8013a16:	4602      	mov	r2, r0
 8013a18:	2100      	movs	r1, #0
 8013a1a:	2001      	movs	r0, #1
 8013a1c:	f7ff ff03 	bl	8013826 <xQueueGenericCreate>
 8013a20:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8013a22:	f7ff ffeb 	bl	80139fc <prvInitialiseMutex>
	}
 8013a26:	4620      	mov	r0, r4
 8013a28:	bd10      	pop	{r4, pc}

08013a2a <xQueueCreateMutexStatic>:
	{
 8013a2a:	b510      	push	{r4, lr}
 8013a2c:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013a2e:	9000      	str	r0, [sp, #0]
 8013a30:	460b      	mov	r3, r1
 8013a32:	2200      	movs	r2, #0
 8013a34:	4611      	mov	r1, r2
 8013a36:	2001      	movs	r0, #1
 8013a38:	f7ff fea5 	bl	8013786 <xQueueGenericCreateStatic>
 8013a3c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8013a3e:	f7ff ffdd 	bl	80139fc <prvInitialiseMutex>
	}
 8013a42:	4620      	mov	r0, r4
 8013a44:	b002      	add	sp, #8
 8013a46:	bd10      	pop	{r4, pc}

08013a48 <xQueueGenericSendFromISR>:
{
 8013a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013a4c:	b160      	cbz	r0, 8013a68 <xQueueGenericSendFromISR+0x20>
 8013a4e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a50:	b199      	cbz	r1, 8013a7a <xQueueGenericSendFromISR+0x32>
 8013a52:	2001      	movs	r0, #1
 8013a54:	b9b8      	cbnz	r0, 8013a86 <xQueueGenericSendFromISR+0x3e>
 8013a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a5a:	f383 8811 	msr	BASEPRI, r3
 8013a5e:	f3bf 8f6f 	isb	sy
 8013a62:	f3bf 8f4f 	dsb	sy
 8013a66:	e7fe      	b.n	8013a66 <xQueueGenericSendFromISR+0x1e>
 8013a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a6c:	f383 8811 	msr	BASEPRI, r3
 8013a70:	f3bf 8f6f 	isb	sy
 8013a74:	f3bf 8f4f 	dsb	sy
 8013a78:	e7fe      	b.n	8013a78 <xQueueGenericSendFromISR+0x30>
 8013a7a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8013a7c:	b908      	cbnz	r0, 8013a82 <xQueueGenericSendFromISR+0x3a>
 8013a7e:	2001      	movs	r0, #1
 8013a80:	e7e8      	b.n	8013a54 <xQueueGenericSendFromISR+0xc>
 8013a82:	2000      	movs	r0, #0
 8013a84:	e7e6      	b.n	8013a54 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013a86:	2b02      	cmp	r3, #2
 8013a88:	d009      	beq.n	8013a9e <xQueueGenericSendFromISR+0x56>
 8013a8a:	b968      	cbnz	r0, 8013aa8 <xQueueGenericSendFromISR+0x60>
 8013a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a90:	f383 8811 	msr	BASEPRI, r3
 8013a94:	f3bf 8f6f 	isb	sy
 8013a98:	f3bf 8f4f 	dsb	sy
 8013a9c:	e7fe      	b.n	8013a9c <xQueueGenericSendFromISR+0x54>
 8013a9e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8013aa0:	2d01      	cmp	r5, #1
 8013aa2:	d0f2      	beq.n	8013a8a <xQueueGenericSendFromISR+0x42>
 8013aa4:	2000      	movs	r0, #0
 8013aa6:	e7f0      	b.n	8013a8a <xQueueGenericSendFromISR+0x42>
 8013aa8:	461f      	mov	r7, r3
 8013aaa:	4690      	mov	r8, r2
 8013aac:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013aae:	f7ff fc2b 	bl	8013308 <vPortValidateInterruptPriority>
	__asm volatile
 8013ab2:	f3ef 8611 	mrs	r6, BASEPRI
 8013ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aba:	f383 8811 	msr	BASEPRI, r3
 8013abe:	f3bf 8f6f 	isb	sy
 8013ac2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013ac6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d301      	bcc.n	8013ad2 <xQueueGenericSendFromISR+0x8a>
 8013ace:	2f02      	cmp	r7, #2
 8013ad0:	d121      	bne.n	8013b16 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013ad2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8013ad6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ad8:	463a      	mov	r2, r7
 8013ada:	4649      	mov	r1, r9
 8013adc:	4620      	mov	r0, r4
 8013ade:	f7ff fd7d 	bl	80135dc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8013ae2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013ae6:	d110      	bne.n	8013b0a <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aea:	b1b3      	cbz	r3, 8013b1a <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013aec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013af0:	f000 fe08 	bl	8014704 <xTaskRemoveFromEventList>
 8013af4:	b198      	cbz	r0, 8013b1e <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 8013af6:	f1b8 0f00 	cmp.w	r8, #0
 8013afa:	d012      	beq.n	8013b22 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013afc:	2001      	movs	r0, #1
 8013afe:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8013b02:	f386 8811 	msr	BASEPRI, r6
}
 8013b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b0a:	1c6b      	adds	r3, r5, #1
 8013b0c:	b25b      	sxtb	r3, r3
 8013b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8013b12:	2001      	movs	r0, #1
 8013b14:	e7f5      	b.n	8013b02 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8013b16:	2000      	movs	r0, #0
 8013b18:	e7f3      	b.n	8013b02 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 8013b1a:	2001      	movs	r0, #1
 8013b1c:	e7f1      	b.n	8013b02 <xQueueGenericSendFromISR+0xba>
 8013b1e:	2001      	movs	r0, #1
 8013b20:	e7ef      	b.n	8013b02 <xQueueGenericSendFromISR+0xba>
 8013b22:	2001      	movs	r0, #1
 8013b24:	e7ed      	b.n	8013b02 <xQueueGenericSendFromISR+0xba>

08013b26 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8013b26:	b160      	cbz	r0, 8013b42 <xQueueGiveFromISR+0x1c>
{
 8013b28:	b570      	push	{r4, r5, r6, lr}
 8013b2a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8013b2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013b2e:	b18b      	cbz	r3, 8013b54 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8013b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b34:	f383 8811 	msr	BASEPRI, r3
 8013b38:	f3bf 8f6f 	isb	sy
 8013b3c:	f3bf 8f4f 	dsb	sy
 8013b40:	e7fe      	b.n	8013b40 <xQueueGiveFromISR+0x1a>
 8013b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b46:	f383 8811 	msr	BASEPRI, r3
 8013b4a:	f3bf 8f6f 	isb	sy
 8013b4e:	f3bf 8f4f 	dsb	sy
 8013b52:	e7fe      	b.n	8013b52 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8013b54:	6803      	ldr	r3, [r0, #0]
 8013b56:	b153      	cbz	r3, 8013b6e <xQueueGiveFromISR+0x48>
 8013b58:	2301      	movs	r3, #1
 8013b5a:	b973      	cbnz	r3, 8013b7a <xQueueGiveFromISR+0x54>
 8013b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b60:	f383 8811 	msr	BASEPRI, r3
 8013b64:	f3bf 8f6f 	isb	sy
 8013b68:	f3bf 8f4f 	dsb	sy
 8013b6c:	e7fe      	b.n	8013b6c <xQueueGiveFromISR+0x46>
 8013b6e:	6843      	ldr	r3, [r0, #4]
 8013b70:	b90b      	cbnz	r3, 8013b76 <xQueueGiveFromISR+0x50>
 8013b72:	2301      	movs	r3, #1
 8013b74:	e7f1      	b.n	8013b5a <xQueueGiveFromISR+0x34>
 8013b76:	2300      	movs	r3, #0
 8013b78:	e7ef      	b.n	8013b5a <xQueueGiveFromISR+0x34>
 8013b7a:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b7c:	f7ff fbc4 	bl	8013308 <vPortValidateInterruptPriority>
	__asm volatile
 8013b80:	f3ef 8511 	mrs	r5, BASEPRI
 8013b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b88:	f383 8811 	msr	BASEPRI, r3
 8013b8c:	f3bf 8f6f 	isb	sy
 8013b90:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013b96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	d21a      	bcs.n	8013bd2 <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b9c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013ba0:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8013ba2:	3201      	adds	r2, #1
 8013ba4:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8013ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013baa:	d10c      	bne.n	8013bc6 <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013bae:	b193      	cbz	r3, 8013bd6 <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013bb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013bb4:	f000 fda6 	bl	8014704 <xTaskRemoveFromEventList>
 8013bb8:	b178      	cbz	r0, 8013bda <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 8013bba:	b186      	cbz	r6, 8013bde <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013bbc:	2001      	movs	r0, #1
 8013bbe:	6030      	str	r0, [r6, #0]
	__asm volatile
 8013bc0:	f385 8811 	msr	BASEPRI, r5
}
 8013bc4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	b25b      	sxtb	r3, r3
 8013bca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8013bce:	2001      	movs	r0, #1
 8013bd0:	e7f6      	b.n	8013bc0 <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	e7f4      	b.n	8013bc0 <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 8013bd6:	2001      	movs	r0, #1
 8013bd8:	e7f2      	b.n	8013bc0 <xQueueGiveFromISR+0x9a>
 8013bda:	2001      	movs	r0, #1
 8013bdc:	e7f0      	b.n	8013bc0 <xQueueGiveFromISR+0x9a>
 8013bde:	2001      	movs	r0, #1
 8013be0:	e7ee      	b.n	8013bc0 <xQueueGiveFromISR+0x9a>
	...

08013be4 <xQueueGenericReceive>:
{
 8013be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013be8:	b084      	sub	sp, #16
 8013bea:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8013bec:	b160      	cbz	r0, 8013c08 <xQueueGenericReceive+0x24>
 8013bee:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bf0:	b199      	cbz	r1, 8013c1a <xQueueGenericReceive+0x36>
 8013bf2:	2501      	movs	r5, #1
 8013bf4:	b9bd      	cbnz	r5, 8013c26 <xQueueGenericReceive+0x42>
	__asm volatile
 8013bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfa:	f383 8811 	msr	BASEPRI, r3
 8013bfe:	f3bf 8f6f 	isb	sy
 8013c02:	f3bf 8f4f 	dsb	sy
 8013c06:	e7fe      	b.n	8013c06 <xQueueGenericReceive+0x22>
 8013c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0c:	f383 8811 	msr	BASEPRI, r3
 8013c10:	f3bf 8f6f 	isb	sy
 8013c14:	f3bf 8f4f 	dsb	sy
 8013c18:	e7fe      	b.n	8013c18 <xQueueGenericReceive+0x34>
 8013c1a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013c1c:	b90a      	cbnz	r2, 8013c22 <xQueueGenericReceive+0x3e>
 8013c1e:	2501      	movs	r5, #1
 8013c20:	e7e8      	b.n	8013bf4 <xQueueGenericReceive+0x10>
 8013c22:	2500      	movs	r5, #0
 8013c24:	e7e6      	b.n	8013bf4 <xQueueGenericReceive+0x10>
 8013c26:	461f      	mov	r7, r3
 8013c28:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c2a:	f000 fe0d 	bl	8014848 <xTaskGetSchedulerState>
 8013c2e:	b910      	cbnz	r0, 8013c36 <xQueueGenericReceive+0x52>
 8013c30:	9b01      	ldr	r3, [sp, #4]
 8013c32:	b103      	cbz	r3, 8013c36 <xQueueGenericReceive+0x52>
 8013c34:	2500      	movs	r5, #0
 8013c36:	b945      	cbnz	r5, 8013c4a <xQueueGenericReceive+0x66>
 8013c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c3c:	f383 8811 	msr	BASEPRI, r3
 8013c40:	f3bf 8f6f 	isb	sy
 8013c44:	f3bf 8f4f 	dsb	sy
 8013c48:	e7fe      	b.n	8013c48 <xQueueGenericReceive+0x64>
 8013c4a:	2600      	movs	r6, #0
 8013c4c:	e05d      	b.n	8013d0a <xQueueGenericReceive+0x126>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8013c4e:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c50:	4641      	mov	r1, r8
 8013c52:	4620      	mov	r0, r4
 8013c54:	f7ff fcfd 	bl	8013652 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8013c58:	b9df      	cbnz	r7, 8013c92 <xQueueGenericReceive+0xae>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8013c5a:	3d01      	subs	r5, #1
 8013c5c:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c5e:	6823      	ldr	r3, [r4, #0]
 8013c60:	b913      	cbnz	r3, 8013c68 <xQueueGenericReceive+0x84>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8013c62:	f000 fead 	bl	80149c0 <pvTaskIncrementMutexHeldCount>
 8013c66:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c68:	6923      	ldr	r3, [r4, #16]
 8013c6a:	b163      	cbz	r3, 8013c86 <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c6c:	f104 0010 	add.w	r0, r4, #16
 8013c70:	f000 fd48 	bl	8014704 <xTaskRemoveFromEventList>
 8013c74:	b138      	cbz	r0, 8013c86 <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8013c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c7a:	4b45      	ldr	r3, [pc, #276]	; (8013d90 <xQueueGenericReceive+0x1ac>)
 8013c7c:	601a      	str	r2, [r3, #0]
 8013c7e:	f3bf 8f4f 	dsb	sy
 8013c82:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8013c86:	f7ff fa4f 	bl	8013128 <vPortExitCritical>
				return pdPASS;
 8013c8a:	2001      	movs	r0, #1
}
 8013c8c:	b004      	add	sp, #16
 8013c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8013c92:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d0f5      	beq.n	8013c86 <xQueueGenericReceive+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013c9e:	f000 fd31 	bl	8014704 <xTaskRemoveFromEventList>
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	d0ef      	beq.n	8013c86 <xQueueGenericReceive+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8013ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013caa:	4b39      	ldr	r3, [pc, #228]	; (8013d90 <xQueueGenericReceive+0x1ac>)
 8013cac:	601a      	str	r2, [r3, #0]
 8013cae:	f3bf 8f4f 	dsb	sy
 8013cb2:	f3bf 8f6f 	isb	sy
 8013cb6:	e7e6      	b.n	8013c86 <xQueueGenericReceive+0xa2>
					taskEXIT_CRITICAL();
 8013cb8:	f7ff fa36 	bl	8013128 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8013cbc:	2000      	movs	r0, #0
 8013cbe:	e7e5      	b.n	8013c8c <xQueueGenericReceive+0xa8>
					vTaskSetTimeOutState( &xTimeOut );
 8013cc0:	a802      	add	r0, sp, #8
 8013cc2:	f000 fd65 	bl	8014790 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013cc6:	2601      	movs	r6, #1
 8013cc8:	e029      	b.n	8013d1e <xQueueGenericReceive+0x13a>
		prvLockQueue( pxQueue );
 8013cca:	2300      	movs	r3, #0
 8013ccc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013cd0:	e031      	b.n	8013d36 <xQueueGenericReceive+0x152>
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013cd8:	e033      	b.n	8013d42 <xQueueGenericReceive+0x15e>
						taskENTER_CRITICAL();
 8013cda:	f7ff fa03 	bl	80130e4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8013cde:	6860      	ldr	r0, [r4, #4]
 8013ce0:	f000 fdc2 	bl	8014868 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8013ce4:	f7ff fa20 	bl	8013128 <vPortExitCritical>
 8013ce8:	e03b      	b.n	8013d62 <xQueueGenericReceive+0x17e>
				prvUnlockQueue( pxQueue );
 8013cea:	4620      	mov	r0, r4
 8013cec:	f7ff fcc3 	bl	8013676 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013cf0:	f000 fba4 	bl	801443c <xTaskResumeAll>
 8013cf4:	e009      	b.n	8013d0a <xQueueGenericReceive+0x126>
			prvUnlockQueue( pxQueue );
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	f7ff fcbd 	bl	8013676 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013cfc:	f000 fb9e 	bl	801443c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d00:	4620      	mov	r0, r4
 8013d02:	f7ff fc5e 	bl	80135c2 <prvIsQueueEmpty>
 8013d06:	2800      	cmp	r0, #0
 8013d08:	d140      	bne.n	8013d8c <xQueueGenericReceive+0x1a8>
		taskENTER_CRITICAL();
 8013d0a:	f7ff f9eb 	bl	80130e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d0e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d10:	2d00      	cmp	r5, #0
 8013d12:	d19c      	bne.n	8013c4e <xQueueGenericReceive+0x6a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013d14:	9b01      	ldr	r3, [sp, #4]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d0ce      	beq.n	8013cb8 <xQueueGenericReceive+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8013d1a:	2e00      	cmp	r6, #0
 8013d1c:	d0d0      	beq.n	8013cc0 <xQueueGenericReceive+0xdc>
		taskEXIT_CRITICAL();
 8013d1e:	f7ff fa03 	bl	8013128 <vPortExitCritical>
		vTaskSuspendAll();
 8013d22:	f000 fae5 	bl	80142f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013d26:	f7ff f9dd 	bl	80130e4 <vPortEnterCritical>
 8013d2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013d2e:	b25b      	sxtb	r3, r3
 8013d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d34:	d0c9      	beq.n	8013cca <xQueueGenericReceive+0xe6>
 8013d36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013d3a:	b25b      	sxtb	r3, r3
 8013d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d40:	d0c7      	beq.n	8013cd2 <xQueueGenericReceive+0xee>
 8013d42:	f7ff f9f1 	bl	8013128 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d46:	a901      	add	r1, sp, #4
 8013d48:	a802      	add	r0, sp, #8
 8013d4a:	f000 fd37 	bl	80147bc <xTaskCheckForTimeOut>
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	d1d1      	bne.n	8013cf6 <xQueueGenericReceive+0x112>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d52:	4620      	mov	r0, r4
 8013d54:	f7ff fc35 	bl	80135c2 <prvIsQueueEmpty>
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	d0c6      	beq.n	8013cea <xQueueGenericReceive+0x106>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d0bb      	beq.n	8013cda <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d62:	9901      	ldr	r1, [sp, #4]
 8013d64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013d68:	f000 fcb4 	bl	80146d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f7ff fc82 	bl	8013676 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d72:	f000 fb63 	bl	801443c <xTaskResumeAll>
 8013d76:	2800      	cmp	r0, #0
 8013d78:	d1c7      	bne.n	8013d0a <xQueueGenericReceive+0x126>
					portYIELD_WITHIN_API();
 8013d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d7e:	4b04      	ldr	r3, [pc, #16]	; (8013d90 <xQueueGenericReceive+0x1ac>)
 8013d80:	601a      	str	r2, [r3, #0]
 8013d82:	f3bf 8f4f 	dsb	sy
 8013d86:	f3bf 8f6f 	isb	sy
 8013d8a:	e7be      	b.n	8013d0a <xQueueGenericReceive+0x126>
				return errQUEUE_EMPTY;
 8013d8c:	2000      	movs	r0, #0
 8013d8e:	e77d      	b.n	8013c8c <xQueueGenericReceive+0xa8>
 8013d90:	e000ed04 	.word	0xe000ed04

08013d94 <xQueueReceiveFromISR>:
{
 8013d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013d98:	b160      	cbz	r0, 8013db4 <xQueueReceiveFromISR+0x20>
 8013d9a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d9c:	b199      	cbz	r1, 8013dc6 <xQueueReceiveFromISR+0x32>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	b9bb      	cbnz	r3, 8013dd2 <xQueueReceiveFromISR+0x3e>
 8013da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013da6:	f383 8811 	msr	BASEPRI, r3
 8013daa:	f3bf 8f6f 	isb	sy
 8013dae:	f3bf 8f4f 	dsb	sy
 8013db2:	e7fe      	b.n	8013db2 <xQueueReceiveFromISR+0x1e>
 8013db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db8:	f383 8811 	msr	BASEPRI, r3
 8013dbc:	f3bf 8f6f 	isb	sy
 8013dc0:	f3bf 8f4f 	dsb	sy
 8013dc4:	e7fe      	b.n	8013dc4 <xQueueReceiveFromISR+0x30>
 8013dc6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013dc8:	b90b      	cbnz	r3, 8013dce <xQueueReceiveFromISR+0x3a>
 8013dca:	2301      	movs	r3, #1
 8013dcc:	e7e8      	b.n	8013da0 <xQueueReceiveFromISR+0xc>
 8013dce:	2300      	movs	r3, #0
 8013dd0:	e7e6      	b.n	8013da0 <xQueueReceiveFromISR+0xc>
 8013dd2:	4617      	mov	r7, r2
 8013dd4:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013dd6:	f7ff fa97 	bl	8013308 <vPortValidateInterruptPriority>
	__asm volatile
 8013dda:	f3ef 8611 	mrs	r6, BASEPRI
 8013dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de2:	f383 8811 	msr	BASEPRI, r3
 8013de6:	f3bf 8f6f 	isb	sy
 8013dea:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013dee:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013df2:	f1b8 0f00 	cmp.w	r8, #0
 8013df6:	d020      	beq.n	8013e3a <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8013df8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8013dfc:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013dfe:	4649      	mov	r1, r9
 8013e00:	4620      	mov	r0, r4
 8013e02:	f7ff fc26 	bl	8013652 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8013e06:	f108 33ff 	add.w	r3, r8, #4294967295
 8013e0a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8013e0c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013e10:	d10d      	bne.n	8013e2e <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e12:	6923      	ldr	r3, [r4, #16]
 8013e14:	b19b      	cbz	r3, 8013e3e <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e16:	f104 0010 	add.w	r0, r4, #16
 8013e1a:	f000 fc73 	bl	8014704 <xTaskRemoveFromEventList>
 8013e1e:	b180      	cbz	r0, 8013e42 <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 8013e20:	b18f      	cbz	r7, 8013e46 <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013e22:	2001      	movs	r0, #1
 8013e24:	6038      	str	r0, [r7, #0]
	__asm volatile
 8013e26:	f386 8811 	msr	BASEPRI, r6
}
 8013e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013e2e:	1c6b      	adds	r3, r5, #1
 8013e30:	b25b      	sxtb	r3, r3
 8013e32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8013e36:	2001      	movs	r0, #1
 8013e38:	e7f5      	b.n	8013e26 <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 8013e3a:	2000      	movs	r0, #0
 8013e3c:	e7f3      	b.n	8013e26 <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 8013e3e:	2001      	movs	r0, #1
 8013e40:	e7f1      	b.n	8013e26 <xQueueReceiveFromISR+0x92>
 8013e42:	2001      	movs	r0, #1
 8013e44:	e7ef      	b.n	8013e26 <xQueueReceiveFromISR+0x92>
 8013e46:	2001      	movs	r0, #1
 8013e48:	e7ed      	b.n	8013e26 <xQueueReceiveFromISR+0x92>

08013e4a <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8013e4a:	b940      	cbnz	r0, 8013e5e <uxQueueMessagesWaiting+0x14>
	__asm volatile
 8013e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e50:	f383 8811 	msr	BASEPRI, r3
 8013e54:	f3bf 8f6f 	isb	sy
 8013e58:	f3bf 8f4f 	dsb	sy
 8013e5c:	e7fe      	b.n	8013e5c <uxQueueMessagesWaiting+0x12>
{
 8013e5e:	b510      	push	{r4, lr}
 8013e60:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8013e62:	f7ff f93f 	bl	80130e4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013e66:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8013e68:	f7ff f95e 	bl	8013128 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	bd10      	pop	{r4, pc}

08013e70 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8013e70:	b108      	cbz	r0, 8013e76 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013e72:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013e74:	4770      	bx	lr
 8013e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e7a:	f383 8811 	msr	BASEPRI, r3
 8013e7e:	f3bf 8f6f 	isb	sy
 8013e82:	f3bf 8f4f 	dsb	sy
 8013e86:	e7fe      	b.n	8013e86 <uxQueueMessagesWaitingFromISR+0x16>

08013e88 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e88:	2300      	movs	r3, #0
 8013e8a:	2b0f      	cmp	r3, #15
 8013e8c:	d80c      	bhi.n	8013ea8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013e8e:	4a07      	ldr	r2, [pc, #28]	; (8013eac <vQueueAddToRegistry+0x24>)
 8013e90:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013e94:	b10a      	cbz	r2, 8013e9a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e96:	3301      	adds	r3, #1
 8013e98:	e7f7      	b.n	8013e8a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013e9a:	4a04      	ldr	r2, [pc, #16]	; (8013eac <vQueueAddToRegistry+0x24>)
 8013e9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013ea0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013ea4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013ea6:	4770      	bx	lr
 8013ea8:	4770      	bx	lr
 8013eaa:	bf00      	nop
 8013eac:	2000a1cc 	.word	0x2000a1cc

08013eb0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	2b0f      	cmp	r3, #15
 8013eb4:	d80f      	bhi.n	8013ed6 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013eb6:	4a08      	ldr	r2, [pc, #32]	; (8013ed8 <vQueueUnregisterQueue+0x28>)
 8013eb8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013ebc:	6852      	ldr	r2, [r2, #4]
 8013ebe:	4282      	cmp	r2, r0
 8013ec0:	d001      	beq.n	8013ec6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ec2:	3301      	adds	r3, #1
 8013ec4:	e7f5      	b.n	8013eb2 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013ec6:	4a04      	ldr	r2, [pc, #16]	; (8013ed8 <vQueueUnregisterQueue+0x28>)
 8013ec8:	2100      	movs	r1, #0
 8013eca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013ece:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013ed2:	6059      	str	r1, [r3, #4]
				break;
 8013ed4:	4770      	bx	lr
 8013ed6:	4770      	bx	lr
 8013ed8:	2000a1cc 	.word	0x2000a1cc

08013edc <vQueueDelete>:
	configASSERT( pxQueue );
 8013edc:	b150      	cbz	r0, 8013ef4 <vQueueDelete+0x18>
{
 8013ede:	b510      	push	{r4, lr}
 8013ee0:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8013ee2:	f7ff ffe5 	bl	8013eb0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013ee6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013eea:	b913      	cbnz	r3, 8013ef2 <vQueueDelete+0x16>
			vPortFree( pxQueue );
 8013eec:	4620      	mov	r0, r4
 8013eee:	f7ff fb1b 	bl	8013528 <vPortFree>
 8013ef2:	bd10      	pop	{r4, pc}
 8013ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ef8:	f383 8811 	msr	BASEPRI, r3
 8013efc:	f3bf 8f6f 	isb	sy
 8013f00:	f3bf 8f4f 	dsb	sy
 8013f04:	e7fe      	b.n	8013f04 <vQueueDelete+0x28>
	...

08013f08 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f08:	4b0a      	ldr	r3, [pc, #40]	; (8013f34 <prvResetNextTaskUnblockTime+0x2c>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	b94b      	cbnz	r3, 8013f24 <prvResetNextTaskUnblockTime+0x1c>
 8013f10:	2301      	movs	r3, #1
 8013f12:	b94b      	cbnz	r3, 8013f28 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013f14:	4b07      	ldr	r3, [pc, #28]	; (8013f34 <prvResetNextTaskUnblockTime+0x2c>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	68db      	ldr	r3, [r3, #12]
 8013f1a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013f1c:	685a      	ldr	r2, [r3, #4]
 8013f1e:	4b06      	ldr	r3, [pc, #24]	; (8013f38 <prvResetNextTaskUnblockTime+0x30>)
 8013f20:	601a      	str	r2, [r3, #0]
 8013f22:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f24:	2300      	movs	r3, #0
 8013f26:	e7f4      	b.n	8013f12 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8013f28:	f04f 32ff 	mov.w	r2, #4294967295
 8013f2c:	4b02      	ldr	r3, [pc, #8]	; (8013f38 <prvResetNextTaskUnblockTime+0x30>)
 8013f2e:	601a      	str	r2, [r3, #0]
 8013f30:	4770      	bx	lr
 8013f32:	bf00      	nop
 8013f34:	20009250 	.word	0x20009250
 8013f38:	2000932c 	.word	0x2000932c

08013f3c <prvInitialiseNewTask>:
{
 8013f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f40:	4681      	mov	r9, r0
 8013f42:	460d      	mov	r5, r1
 8013f44:	4617      	mov	r7, r2
 8013f46:	469a      	mov	sl, r3
 8013f48:	9e08      	ldr	r6, [sp, #32]
 8013f4a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8013f4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013f50:	0092      	lsls	r2, r2, #2
 8013f52:	21a5      	movs	r1, #165	; 0xa5
 8013f54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013f56:	f00b fd8b 	bl	801fa70 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013f5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013f5c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8013f60:	3a01      	subs	r2, #1
 8013f62:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013f66:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	2b0f      	cmp	r3, #15
 8013f6e:	d807      	bhi.n	8013f80 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013f70:	5ce9      	ldrb	r1, [r5, r3]
 8013f72:	18e2      	adds	r2, r4, r3
 8013f74:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8013f78:	5cea      	ldrb	r2, [r5, r3]
 8013f7a:	b10a      	cbz	r2, 8013f80 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f7c:	3301      	adds	r3, #1
 8013f7e:	e7f5      	b.n	8013f6c <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013f80:	2300      	movs	r3, #0
 8013f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013f86:	2e06      	cmp	r6, #6
 8013f88:	d900      	bls.n	8013f8c <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013f8a:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8013f8c:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8013f8e:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013f90:	2500      	movs	r5, #0
 8013f92:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013f94:	1d20      	adds	r0, r4, #4
 8013f96:	f7ff f80b 	bl	8012fb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013f9a:	f104 0018 	add.w	r0, r4, #24
 8013f9e:	f7ff f807 	bl	8012fb0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013fa2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013fa4:	f1c6 0607 	rsb	r6, r6, #7
 8013fa8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013faa:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013fac:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8013fae:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013fb0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013fb4:	4652      	mov	r2, sl
 8013fb6:	4649      	mov	r1, r9
 8013fb8:	4638      	mov	r0, r7
 8013fba:	f7ff f869 	bl	8013090 <pxPortInitialiseStack>
 8013fbe:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8013fc0:	f1b8 0f00 	cmp.w	r8, #0
 8013fc4:	d001      	beq.n	8013fca <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013fc6:	f8c8 4000 	str.w	r4, [r8]
 8013fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08013fd0 <prvInitialiseTaskLists>:
{
 8013fd0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013fd2:	2400      	movs	r4, #0
 8013fd4:	e007      	b.n	8013fe6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013fd6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8013fda:	0093      	lsls	r3, r2, #2
 8013fdc:	480e      	ldr	r0, [pc, #56]	; (8014018 <prvInitialiseTaskLists+0x48>)
 8013fde:	4418      	add	r0, r3
 8013fe0:	f7fe ffdb 	bl	8012f9a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013fe4:	3401      	adds	r4, #1
 8013fe6:	2c06      	cmp	r4, #6
 8013fe8:	d9f5      	bls.n	8013fd6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8013fea:	4d0c      	ldr	r5, [pc, #48]	; (801401c <prvInitialiseTaskLists+0x4c>)
 8013fec:	4628      	mov	r0, r5
 8013fee:	f7fe ffd4 	bl	8012f9a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013ff2:	4c0b      	ldr	r4, [pc, #44]	; (8014020 <prvInitialiseTaskLists+0x50>)
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	f7fe ffd0 	bl	8012f9a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013ffa:	480a      	ldr	r0, [pc, #40]	; (8014024 <prvInitialiseTaskLists+0x54>)
 8013ffc:	f7fe ffcd 	bl	8012f9a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8014000:	4809      	ldr	r0, [pc, #36]	; (8014028 <prvInitialiseTaskLists+0x58>)
 8014002:	f7fe ffca 	bl	8012f9a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8014006:	4809      	ldr	r0, [pc, #36]	; (801402c <prvInitialiseTaskLists+0x5c>)
 8014008:	f7fe ffc7 	bl	8012f9a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801400c:	4b08      	ldr	r3, [pc, #32]	; (8014030 <prvInitialiseTaskLists+0x60>)
 801400e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014010:	4b08      	ldr	r3, [pc, #32]	; (8014034 <prvInitialiseTaskLists+0x64>)
 8014012:	601c      	str	r4, [r3, #0]
 8014014:	bd38      	pop	{r3, r4, r5, pc}
 8014016:	bf00      	nop
 8014018:	20009258 	.word	0x20009258
 801401c:	20009304 	.word	0x20009304
 8014020:	20009318 	.word	0x20009318
 8014024:	20009334 	.word	0x20009334
 8014028:	20009360 	.word	0x20009360
 801402c:	2000934c 	.word	0x2000934c
 8014030:	20009250 	.word	0x20009250
 8014034:	20009254 	.word	0x20009254

08014038 <prvAddNewTaskToReadyList>:
{
 8014038:	b510      	push	{r4, lr}
 801403a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801403c:	f7ff f852 	bl	80130e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8014040:	4a21      	ldr	r2, [pc, #132]	; (80140c8 <prvAddNewTaskToReadyList+0x90>)
 8014042:	6813      	ldr	r3, [r2, #0]
 8014044:	3301      	adds	r3, #1
 8014046:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014048:	4b20      	ldr	r3, [pc, #128]	; (80140cc <prvAddNewTaskToReadyList+0x94>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d032      	beq.n	80140b6 <prvAddNewTaskToReadyList+0x7e>
			if( xSchedulerRunning == pdFALSE )
 8014050:	4b1f      	ldr	r3, [pc, #124]	; (80140d0 <prvAddNewTaskToReadyList+0x98>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	b93b      	cbnz	r3, 8014066 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014056:	4b1d      	ldr	r3, [pc, #116]	; (80140cc <prvAddNewTaskToReadyList+0x94>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801405c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801405e:	429a      	cmp	r2, r3
 8014060:	d801      	bhi.n	8014066 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 8014062:	4b1a      	ldr	r3, [pc, #104]	; (80140cc <prvAddNewTaskToReadyList+0x94>)
 8014064:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8014066:	4a1b      	ldr	r2, [pc, #108]	; (80140d4 <prvAddNewTaskToReadyList+0x9c>)
 8014068:	6813      	ldr	r3, [r2, #0]
 801406a:	3301      	adds	r3, #1
 801406c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801406e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8014070:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014072:	2201      	movs	r2, #1
 8014074:	409a      	lsls	r2, r3
 8014076:	4918      	ldr	r1, [pc, #96]	; (80140d8 <prvAddNewTaskToReadyList+0xa0>)
 8014078:	6808      	ldr	r0, [r1, #0]
 801407a:	4302      	orrs	r2, r0
 801407c:	600a      	str	r2, [r1, #0]
 801407e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014082:	009a      	lsls	r2, r3, #2
 8014084:	1d21      	adds	r1, r4, #4
 8014086:	4815      	ldr	r0, [pc, #84]	; (80140dc <prvAddNewTaskToReadyList+0xa4>)
 8014088:	4410      	add	r0, r2
 801408a:	f7fe ff94 	bl	8012fb6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801408e:	f7ff f84b 	bl	8013128 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8014092:	4b0f      	ldr	r3, [pc, #60]	; (80140d0 <prvAddNewTaskToReadyList+0x98>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	b16b      	cbz	r3, 80140b4 <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014098:	4b0c      	ldr	r3, [pc, #48]	; (80140cc <prvAddNewTaskToReadyList+0x94>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801409e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d207      	bcs.n	80140b4 <prvAddNewTaskToReadyList+0x7c>
			taskYIELD_IF_USING_PREEMPTION();
 80140a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140a8:	4b0d      	ldr	r3, [pc, #52]	; (80140e0 <prvAddNewTaskToReadyList+0xa8>)
 80140aa:	601a      	str	r2, [r3, #0]
 80140ac:	f3bf 8f4f 	dsb	sy
 80140b0:	f3bf 8f6f 	isb	sy
 80140b4:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80140b6:	4b05      	ldr	r3, [pc, #20]	; (80140cc <prvAddNewTaskToReadyList+0x94>)
 80140b8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80140ba:	6813      	ldr	r3, [r2, #0]
 80140bc:	2b01      	cmp	r3, #1
 80140be:	d1d2      	bne.n	8014066 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 80140c0:	f7ff ff86 	bl	8013fd0 <prvInitialiseTaskLists>
 80140c4:	e7cf      	b.n	8014066 <prvAddNewTaskToReadyList+0x2e>
 80140c6:	bf00      	nop
 80140c8:	200092ec 	.word	0x200092ec
 80140cc:	2000924c 	.word	0x2000924c
 80140d0:	20009348 	.word	0x20009348
 80140d4:	200092fc 	.word	0x200092fc
 80140d8:	20009300 	.word	0x20009300
 80140dc:	20009258 	.word	0x20009258
 80140e0:	e000ed04 	.word	0xe000ed04

080140e4 <prvDeleteTCB>:
	{
 80140e4:	b510      	push	{r4, lr}
 80140e6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80140e8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80140ec:	b163      	cbz	r3, 8014108 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d011      	beq.n	8014116 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 80140f2:	2b02      	cmp	r3, #2
 80140f4:	d012      	beq.n	801411c <prvDeleteTCB+0x38>
 80140f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140fa:	f383 8811 	msr	BASEPRI, r3
 80140fe:	f3bf 8f6f 	isb	sy
 8014102:	f3bf 8f4f 	dsb	sy
 8014106:	e7fe      	b.n	8014106 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8014108:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801410a:	f7ff fa0d 	bl	8013528 <vPortFree>
				vPortFree( pxTCB );
 801410e:	4620      	mov	r0, r4
 8014110:	f7ff fa0a 	bl	8013528 <vPortFree>
 8014114:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8014116:	f7ff fa07 	bl	8013528 <vPortFree>
 801411a:	bd10      	pop	{r4, pc}
 801411c:	bd10      	pop	{r4, pc}
	...

08014120 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014120:	b570      	push	{r4, r5, r6, lr}
 8014122:	4604      	mov	r4, r0
 8014124:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014126:	4b1d      	ldr	r3, [pc, #116]	; (801419c <prvAddCurrentTaskToDelayedList+0x7c>)
 8014128:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801412a:	4b1d      	ldr	r3, [pc, #116]	; (80141a0 <prvAddCurrentTaskToDelayedList+0x80>)
 801412c:	6818      	ldr	r0, [r3, #0]
 801412e:	3004      	adds	r0, #4
 8014130:	f7fe ff67 	bl	8013002 <uxListRemove>
 8014134:	b950      	cbnz	r0, 801414c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8014136:	4b1a      	ldr	r3, [pc, #104]	; (80141a0 <prvAddCurrentTaskToDelayedList+0x80>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801413c:	2301      	movs	r3, #1
 801413e:	fa03 f202 	lsl.w	r2, r3, r2
 8014142:	4918      	ldr	r1, [pc, #96]	; (80141a4 <prvAddCurrentTaskToDelayedList+0x84>)
 8014144:	680b      	ldr	r3, [r1, #0]
 8014146:	ea23 0302 	bic.w	r3, r3, r2
 801414a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801414c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014150:	d013      	beq.n	801417a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014152:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014154:	4b12      	ldr	r3, [pc, #72]	; (80141a0 <prvAddCurrentTaskToDelayedList+0x80>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801415a:	42a5      	cmp	r5, r4
 801415c:	d816      	bhi.n	801418c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801415e:	4b12      	ldr	r3, [pc, #72]	; (80141a8 <prvAddCurrentTaskToDelayedList+0x88>)
 8014160:	6818      	ldr	r0, [r3, #0]
 8014162:	4b0f      	ldr	r3, [pc, #60]	; (80141a0 <prvAddCurrentTaskToDelayedList+0x80>)
 8014164:	6819      	ldr	r1, [r3, #0]
 8014166:	3104      	adds	r1, #4
 8014168:	f7fe ff31 	bl	8012fce <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 801416c:	4b0f      	ldr	r3, [pc, #60]	; (80141ac <prvAddCurrentTaskToDelayedList+0x8c>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	429c      	cmp	r4, r3
 8014172:	d201      	bcs.n	8014178 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8014174:	4b0d      	ldr	r3, [pc, #52]	; (80141ac <prvAddCurrentTaskToDelayedList+0x8c>)
 8014176:	601c      	str	r4, [r3, #0]
 8014178:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801417a:	2e00      	cmp	r6, #0
 801417c:	d0e9      	beq.n	8014152 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801417e:	4b08      	ldr	r3, [pc, #32]	; (80141a0 <prvAddCurrentTaskToDelayedList+0x80>)
 8014180:	6819      	ldr	r1, [r3, #0]
 8014182:	3104      	adds	r1, #4
 8014184:	480a      	ldr	r0, [pc, #40]	; (80141b0 <prvAddCurrentTaskToDelayedList+0x90>)
 8014186:	f7fe ff16 	bl	8012fb6 <vListInsertEnd>
 801418a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801418c:	4b09      	ldr	r3, [pc, #36]	; (80141b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801418e:	6818      	ldr	r0, [r3, #0]
 8014190:	4b03      	ldr	r3, [pc, #12]	; (80141a0 <prvAddCurrentTaskToDelayedList+0x80>)
 8014192:	6819      	ldr	r1, [r3, #0]
 8014194:	3104      	adds	r1, #4
 8014196:	f7fe ff1a 	bl	8012fce <vListInsert>
 801419a:	bd70      	pop	{r4, r5, r6, pc}
 801419c:	20009374 	.word	0x20009374
 80141a0:	2000924c 	.word	0x2000924c
 80141a4:	20009300 	.word	0x20009300
 80141a8:	20009250 	.word	0x20009250
 80141ac:	2000932c 	.word	0x2000932c
 80141b0:	2000934c 	.word	0x2000934c
 80141b4:	20009254 	.word	0x20009254

080141b8 <xTaskCreateStatic>:
	{
 80141b8:	b530      	push	{r4, r5, lr}
 80141ba:	b087      	sub	sp, #28
 80141bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80141be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80141c0:	b14d      	cbz	r5, 80141d6 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 80141c2:	b98c      	cbnz	r4, 80141e8 <xTaskCreateStatic+0x30>
 80141c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c8:	f383 8811 	msr	BASEPRI, r3
 80141cc:	f3bf 8f6f 	isb	sy
 80141d0:	f3bf 8f4f 	dsb	sy
 80141d4:	e7fe      	b.n	80141d4 <xTaskCreateStatic+0x1c>
 80141d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141da:	f383 8811 	msr	BASEPRI, r3
 80141de:	f3bf 8f6f 	isb	sy
 80141e2:	f3bf 8f4f 	dsb	sy
 80141e6:	e7fe      	b.n	80141e6 <xTaskCreateStatic+0x2e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80141e8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80141ea:	2502      	movs	r5, #2
 80141ec:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80141f0:	2500      	movs	r5, #0
 80141f2:	9503      	str	r5, [sp, #12]
 80141f4:	9402      	str	r4, [sp, #8]
 80141f6:	ad05      	add	r5, sp, #20
 80141f8:	9501      	str	r5, [sp, #4]
 80141fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80141fc:	9500      	str	r5, [sp, #0]
 80141fe:	f7ff fe9d 	bl	8013f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014202:	4620      	mov	r0, r4
 8014204:	f7ff ff18 	bl	8014038 <prvAddNewTaskToReadyList>
	}
 8014208:	9805      	ldr	r0, [sp, #20]
 801420a:	b007      	add	sp, #28
 801420c:	bd30      	pop	{r4, r5, pc}

0801420e <xTaskCreate>:
	{
 801420e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014212:	b085      	sub	sp, #20
 8014214:	4606      	mov	r6, r0
 8014216:	460f      	mov	r7, r1
 8014218:	4615      	mov	r5, r2
 801421a:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801421c:	0090      	lsls	r0, r2, #2
 801421e:	f7ff f8ff 	bl	8013420 <pvPortMalloc>
			if( pxStack != NULL )
 8014222:	b310      	cbz	r0, 801426a <xTaskCreate+0x5c>
 8014224:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8014226:	2060      	movs	r0, #96	; 0x60
 8014228:	f7ff f8fa 	bl	8013420 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801422c:	4604      	mov	r4, r0
 801422e:	b1c0      	cbz	r0, 8014262 <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 8014230:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8014234:	b1dc      	cbz	r4, 801426e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014236:	2300      	movs	r3, #0
 8014238:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801423c:	9303      	str	r3, [sp, #12]
 801423e:	9402      	str	r4, [sp, #8]
 8014240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014242:	9301      	str	r3, [sp, #4]
 8014244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014246:	9300      	str	r3, [sp, #0]
 8014248:	4643      	mov	r3, r8
 801424a:	462a      	mov	r2, r5
 801424c:	4639      	mov	r1, r7
 801424e:	4630      	mov	r0, r6
 8014250:	f7ff fe74 	bl	8013f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014254:	4620      	mov	r0, r4
 8014256:	f7ff feef 	bl	8014038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801425a:	2001      	movs	r0, #1
	}
 801425c:	b005      	add	sp, #20
 801425e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8014262:	4648      	mov	r0, r9
 8014264:	f7ff f960 	bl	8013528 <vPortFree>
 8014268:	e7e4      	b.n	8014234 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 801426a:	2400      	movs	r4, #0
 801426c:	e7e2      	b.n	8014234 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801426e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8014272:	e7f3      	b.n	801425c <xTaskCreate+0x4e>

08014274 <vTaskStartScheduler>:
{
 8014274:	b510      	push	{r4, lr}
 8014276:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014278:	2400      	movs	r4, #0
 801427a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801427c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801427e:	aa07      	add	r2, sp, #28
 8014280:	a906      	add	r1, sp, #24
 8014282:	a805      	add	r0, sp, #20
 8014284:	f009 f93e 	bl	801d504 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014288:	9b05      	ldr	r3, [sp, #20]
 801428a:	9302      	str	r3, [sp, #8]
 801428c:	9b06      	ldr	r3, [sp, #24]
 801428e:	9301      	str	r3, [sp, #4]
 8014290:	9400      	str	r4, [sp, #0]
 8014292:	4623      	mov	r3, r4
 8014294:	9a07      	ldr	r2, [sp, #28]
 8014296:	4911      	ldr	r1, [pc, #68]	; (80142dc <vTaskStartScheduler+0x68>)
 8014298:	4811      	ldr	r0, [pc, #68]	; (80142e0 <vTaskStartScheduler+0x6c>)
 801429a:	f7ff ff8d 	bl	80141b8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801429e:	b118      	cbz	r0, 80142a8 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 80142a0:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 80142a2:	b91b      	cbnz	r3, 80142ac <vTaskStartScheduler+0x38>
}
 80142a4:	b008      	add	sp, #32
 80142a6:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80142a8:	2300      	movs	r3, #0
 80142aa:	e7fa      	b.n	80142a2 <vTaskStartScheduler+0x2e>
 80142ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b0:	f383 8811 	msr	BASEPRI, r3
 80142b4:	f3bf 8f6f 	isb	sy
 80142b8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80142bc:	f04f 32ff 	mov.w	r2, #4294967295
 80142c0:	4b08      	ldr	r3, [pc, #32]	; (80142e4 <vTaskStartScheduler+0x70>)
 80142c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80142c4:	2201      	movs	r2, #1
 80142c6:	4b08      	ldr	r3, [pc, #32]	; (80142e8 <vTaskStartScheduler+0x74>)
 80142c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80142ca:	2200      	movs	r2, #0
 80142cc:	4b07      	ldr	r3, [pc, #28]	; (80142ec <vTaskStartScheduler+0x78>)
 80142ce:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80142d0:	f009 f900 	bl	801d4d4 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 80142d4:	f7fe ffa2 	bl	801321c <xPortStartScheduler>
 80142d8:	e7e4      	b.n	80142a4 <vTaskStartScheduler+0x30>
 80142da:	bf00      	nop
 80142dc:	0801fd68 	.word	0x0801fd68
 80142e0:	080145e5 	.word	0x080145e5
 80142e4:	2000932c 	.word	0x2000932c
 80142e8:	20009348 	.word	0x20009348
 80142ec:	20009374 	.word	0x20009374

080142f0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80142f0:	4a02      	ldr	r2, [pc, #8]	; (80142fc <vTaskSuspendAll+0xc>)
 80142f2:	6813      	ldr	r3, [r2, #0]
 80142f4:	3301      	adds	r3, #1
 80142f6:	6013      	str	r3, [r2, #0]
 80142f8:	4770      	bx	lr
 80142fa:	bf00      	nop
 80142fc:	200092f8 	.word	0x200092f8

08014300 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8014300:	4b01      	ldr	r3, [pc, #4]	; (8014308 <xTaskGetTickCount+0x8>)
 8014302:	6818      	ldr	r0, [r3, #0]
}
 8014304:	4770      	bx	lr
 8014306:	bf00      	nop
 8014308:	20009374 	.word	0x20009374

0801430c <xTaskGetTickCountFromISR>:
{
 801430c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801430e:	f7fe fffb 	bl	8013308 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8014312:	4b01      	ldr	r3, [pc, #4]	; (8014318 <xTaskGetTickCountFromISR+0xc>)
 8014314:	6818      	ldr	r0, [r3, #0]
}
 8014316:	bd08      	pop	{r3, pc}
 8014318:	20009374 	.word	0x20009374

0801431c <xTaskIncrementTick>:
{
 801431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801431e:	4b3c      	ldr	r3, [pc, #240]	; (8014410 <xTaskIncrementTick+0xf4>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d168      	bne.n	80143f8 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + 1;
 8014326:	4b3b      	ldr	r3, [pc, #236]	; (8014414 <xTaskIncrementTick+0xf8>)
 8014328:	681d      	ldr	r5, [r3, #0]
 801432a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 801432c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 801432e:	b9c5      	cbnz	r5, 8014362 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8014330:	4b39      	ldr	r3, [pc, #228]	; (8014418 <xTaskIncrementTick+0xfc>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	b143      	cbz	r3, 801434a <xTaskIncrementTick+0x2e>
 8014338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801433c:	f383 8811 	msr	BASEPRI, r3
 8014340:	f3bf 8f6f 	isb	sy
 8014344:	f3bf 8f4f 	dsb	sy
 8014348:	e7fe      	b.n	8014348 <xTaskIncrementTick+0x2c>
 801434a:	4a33      	ldr	r2, [pc, #204]	; (8014418 <xTaskIncrementTick+0xfc>)
 801434c:	6811      	ldr	r1, [r2, #0]
 801434e:	4b33      	ldr	r3, [pc, #204]	; (801441c <xTaskIncrementTick+0x100>)
 8014350:	6818      	ldr	r0, [r3, #0]
 8014352:	6010      	str	r0, [r2, #0]
 8014354:	6019      	str	r1, [r3, #0]
 8014356:	4a32      	ldr	r2, [pc, #200]	; (8014420 <xTaskIncrementTick+0x104>)
 8014358:	6813      	ldr	r3, [r2, #0]
 801435a:	3301      	adds	r3, #1
 801435c:	6013      	str	r3, [r2, #0]
 801435e:	f7ff fdd3 	bl	8013f08 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014362:	4b30      	ldr	r3, [pc, #192]	; (8014424 <xTaskIncrementTick+0x108>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	429d      	cmp	r5, r3
 8014368:	d23a      	bcs.n	80143e0 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 801436a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801436c:	4b2e      	ldr	r3, [pc, #184]	; (8014428 <xTaskIncrementTick+0x10c>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014372:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014376:	009a      	lsls	r2, r3, #2
 8014378:	4b2c      	ldr	r3, [pc, #176]	; (801442c <xTaskIncrementTick+0x110>)
 801437a:	589b      	ldr	r3, [r3, r2]
 801437c:	2b01      	cmp	r3, #1
 801437e:	d940      	bls.n	8014402 <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8014380:	2401      	movs	r4, #1
 8014382:	e03e      	b.n	8014402 <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 8014384:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014386:	4b24      	ldr	r3, [pc, #144]	; (8014418 <xTaskIncrementTick+0xfc>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	b353      	cbz	r3, 80143e4 <xTaskIncrementTick+0xc8>
 801438e:	2300      	movs	r3, #0
 8014390:	bb53      	cbnz	r3, 80143e8 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8014392:	4b21      	ldr	r3, [pc, #132]	; (8014418 <xTaskIncrementTick+0xfc>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801439a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 801439c:	429d      	cmp	r5, r3
 801439e:	d328      	bcc.n	80143f2 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143a0:	1d37      	adds	r7, r6, #4
 80143a2:	4638      	mov	r0, r7
 80143a4:	f7fe fe2d 	bl	8013002 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80143a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80143aa:	b11b      	cbz	r3, 80143b4 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80143ac:	f106 0018 	add.w	r0, r6, #24
 80143b0:	f7fe fe27 	bl	8013002 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80143b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80143b6:	2201      	movs	r2, #1
 80143b8:	409a      	lsls	r2, r3
 80143ba:	491d      	ldr	r1, [pc, #116]	; (8014430 <xTaskIncrementTick+0x114>)
 80143bc:	6808      	ldr	r0, [r1, #0]
 80143be:	4302      	orrs	r2, r0
 80143c0:	600a      	str	r2, [r1, #0]
 80143c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80143c6:	009a      	lsls	r2, r3, #2
 80143c8:	4639      	mov	r1, r7
 80143ca:	4818      	ldr	r0, [pc, #96]	; (801442c <xTaskIncrementTick+0x110>)
 80143cc:	4410      	add	r0, r2
 80143ce:	f7fe fdf2 	bl	8012fb6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80143d2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80143d4:	4b14      	ldr	r3, [pc, #80]	; (8014428 <xTaskIncrementTick+0x10c>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143da:	429a      	cmp	r2, r3
 80143dc:	d2d2      	bcs.n	8014384 <xTaskIncrementTick+0x68>
 80143de:	e7d2      	b.n	8014386 <xTaskIncrementTick+0x6a>
 80143e0:	2400      	movs	r4, #0
 80143e2:	e7d0      	b.n	8014386 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143e4:	2301      	movs	r3, #1
 80143e6:	e7d3      	b.n	8014390 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143e8:	f04f 32ff 	mov.w	r2, #4294967295
 80143ec:	4b0d      	ldr	r3, [pc, #52]	; (8014424 <xTaskIncrementTick+0x108>)
 80143ee:	601a      	str	r2, [r3, #0]
					break;
 80143f0:	e7bc      	b.n	801436c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80143f2:	4a0c      	ldr	r2, [pc, #48]	; (8014424 <xTaskIncrementTick+0x108>)
 80143f4:	6013      	str	r3, [r2, #0]
						break;
 80143f6:	e7b9      	b.n	801436c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80143f8:	4a0e      	ldr	r2, [pc, #56]	; (8014434 <xTaskIncrementTick+0x118>)
 80143fa:	6813      	ldr	r3, [r2, #0]
 80143fc:	3301      	adds	r3, #1
 80143fe:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8014400:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8014402:	4b0d      	ldr	r3, [pc, #52]	; (8014438 <xTaskIncrementTick+0x11c>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	b103      	cbz	r3, 801440a <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 8014408:	2401      	movs	r4, #1
}
 801440a:	4620      	mov	r0, r4
 801440c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801440e:	bf00      	nop
 8014410:	200092f8 	.word	0x200092f8
 8014414:	20009374 	.word	0x20009374
 8014418:	20009250 	.word	0x20009250
 801441c:	20009254 	.word	0x20009254
 8014420:	20009330 	.word	0x20009330
 8014424:	2000932c 	.word	0x2000932c
 8014428:	2000924c 	.word	0x2000924c
 801442c:	20009258 	.word	0x20009258
 8014430:	20009300 	.word	0x20009300
 8014434:	200092f4 	.word	0x200092f4
 8014438:	20009378 	.word	0x20009378

0801443c <xTaskResumeAll>:
{
 801443c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 801443e:	4b35      	ldr	r3, [pc, #212]	; (8014514 <xTaskResumeAll+0xd8>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	b943      	cbnz	r3, 8014456 <xTaskResumeAll+0x1a>
 8014444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014448:	f383 8811 	msr	BASEPRI, r3
 801444c:	f3bf 8f6f 	isb	sy
 8014450:	f3bf 8f4f 	dsb	sy
 8014454:	e7fe      	b.n	8014454 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8014456:	f7fe fe45 	bl	80130e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801445a:	4b2e      	ldr	r3, [pc, #184]	; (8014514 <xTaskResumeAll+0xd8>)
 801445c:	681a      	ldr	r2, [r3, #0]
 801445e:	3a01      	subs	r2, #1
 8014460:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d150      	bne.n	801450a <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014468:	4b2b      	ldr	r3, [pc, #172]	; (8014518 <xTaskResumeAll+0xdc>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	b923      	cbnz	r3, 8014478 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 801446e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8014470:	f7fe fe5a 	bl	8013128 <vPortExitCritical>
}
 8014474:	4620      	mov	r0, r4
 8014476:	bd38      	pop	{r3, r4, r5, pc}
 8014478:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801447a:	4b28      	ldr	r3, [pc, #160]	; (801451c <xTaskResumeAll+0xe0>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	b31b      	cbz	r3, 80144c8 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8014480:	4b26      	ldr	r3, [pc, #152]	; (801451c <xTaskResumeAll+0xe0>)
 8014482:	68db      	ldr	r3, [r3, #12]
 8014484:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014486:	f104 0018 	add.w	r0, r4, #24
 801448a:	f7fe fdba 	bl	8013002 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801448e:	1d25      	adds	r5, r4, #4
 8014490:	4628      	mov	r0, r5
 8014492:	f7fe fdb6 	bl	8013002 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014498:	2201      	movs	r2, #1
 801449a:	409a      	lsls	r2, r3
 801449c:	4920      	ldr	r1, [pc, #128]	; (8014520 <xTaskResumeAll+0xe4>)
 801449e:	6808      	ldr	r0, [r1, #0]
 80144a0:	4302      	orrs	r2, r0
 80144a2:	600a      	str	r2, [r1, #0]
 80144a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80144a8:	009a      	lsls	r2, r3, #2
 80144aa:	4629      	mov	r1, r5
 80144ac:	481d      	ldr	r0, [pc, #116]	; (8014524 <xTaskResumeAll+0xe8>)
 80144ae:	4410      	add	r0, r2
 80144b0:	f7fe fd81 	bl	8012fb6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80144b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80144b6:	4b1c      	ldr	r3, [pc, #112]	; (8014528 <xTaskResumeAll+0xec>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144bc:	429a      	cmp	r2, r3
 80144be:	d3dc      	bcc.n	801447a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80144c0:	2201      	movs	r2, #1
 80144c2:	4b1a      	ldr	r3, [pc, #104]	; (801452c <xTaskResumeAll+0xf0>)
 80144c4:	601a      	str	r2, [r3, #0]
 80144c6:	e7d8      	b.n	801447a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 80144c8:	b10c      	cbz	r4, 80144ce <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80144ca:	f7ff fd1d 	bl	8013f08 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80144ce:	4b18      	ldr	r3, [pc, #96]	; (8014530 <xTaskResumeAll+0xf4>)
 80144d0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80144d2:	b974      	cbnz	r4, 80144f2 <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 80144d4:	4b15      	ldr	r3, [pc, #84]	; (801452c <xTaskResumeAll+0xf0>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	b1cb      	cbz	r3, 801450e <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 80144da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144de:	4b15      	ldr	r3, [pc, #84]	; (8014534 <xTaskResumeAll+0xf8>)
 80144e0:	601a      	str	r2, [r3, #0]
 80144e2:	f3bf 8f4f 	dsb	sy
 80144e6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80144ea:	2401      	movs	r4, #1
 80144ec:	e7c0      	b.n	8014470 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80144ee:	3c01      	subs	r4, #1
 80144f0:	d007      	beq.n	8014502 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 80144f2:	f7ff ff13 	bl	801431c <xTaskIncrementTick>
 80144f6:	2800      	cmp	r0, #0
 80144f8:	d0f9      	beq.n	80144ee <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 80144fa:	2201      	movs	r2, #1
 80144fc:	4b0b      	ldr	r3, [pc, #44]	; (801452c <xTaskResumeAll+0xf0>)
 80144fe:	601a      	str	r2, [r3, #0]
 8014500:	e7f5      	b.n	80144ee <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8014502:	2200      	movs	r2, #0
 8014504:	4b0a      	ldr	r3, [pc, #40]	; (8014530 <xTaskResumeAll+0xf4>)
 8014506:	601a      	str	r2, [r3, #0]
 8014508:	e7e4      	b.n	80144d4 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 801450a:	2400      	movs	r4, #0
 801450c:	e7b0      	b.n	8014470 <xTaskResumeAll+0x34>
 801450e:	2400      	movs	r4, #0
 8014510:	e7ae      	b.n	8014470 <xTaskResumeAll+0x34>
 8014512:	bf00      	nop
 8014514:	200092f8 	.word	0x200092f8
 8014518:	200092ec 	.word	0x200092ec
 801451c:	20009334 	.word	0x20009334
 8014520:	20009300 	.word	0x20009300
 8014524:	20009258 	.word	0x20009258
 8014528:	2000924c 	.word	0x2000924c
 801452c:	20009378 	.word	0x20009378
 8014530:	200092f4 	.word	0x200092f4
 8014534:	e000ed04 	.word	0xe000ed04

08014538 <vTaskDelay>:
	{
 8014538:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801453a:	b1a8      	cbz	r0, 8014568 <vTaskDelay+0x30>
 801453c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 801453e:	4b10      	ldr	r3, [pc, #64]	; (8014580 <vTaskDelay+0x48>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	b143      	cbz	r3, 8014556 <vTaskDelay+0x1e>
 8014544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014548:	f383 8811 	msr	BASEPRI, r3
 801454c:	f3bf 8f6f 	isb	sy
 8014550:	f3bf 8f4f 	dsb	sy
 8014554:	e7fe      	b.n	8014554 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8014556:	f7ff fecb 	bl	80142f0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801455a:	2100      	movs	r1, #0
 801455c:	4620      	mov	r0, r4
 801455e:	f7ff fddf 	bl	8014120 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8014562:	f7ff ff6b 	bl	801443c <xTaskResumeAll>
 8014566:	e000      	b.n	801456a <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8014568:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 801456a:	b938      	cbnz	r0, 801457c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 801456c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014570:	4b04      	ldr	r3, [pc, #16]	; (8014584 <vTaskDelay+0x4c>)
 8014572:	601a      	str	r2, [r3, #0]
 8014574:	f3bf 8f4f 	dsb	sy
 8014578:	f3bf 8f6f 	isb	sy
 801457c:	bd10      	pop	{r4, pc}
 801457e:	bf00      	nop
 8014580:	200092f8 	.word	0x200092f8
 8014584:	e000ed04 	.word	0xe000ed04

08014588 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014588:	4b13      	ldr	r3, [pc, #76]	; (80145d8 <prvCheckTasksWaitingTermination+0x50>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	b313      	cbz	r3, 80145d4 <prvCheckTasksWaitingTermination+0x4c>
{
 801458e:	b510      	push	{r4, lr}
			vTaskSuspendAll();
 8014590:	f7ff feae 	bl	80142f0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8014594:	4b11      	ldr	r3, [pc, #68]	; (80145dc <prvCheckTasksWaitingTermination+0x54>)
 8014596:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8014598:	f7ff ff50 	bl	801443c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 801459c:	b924      	cbnz	r4, 80145a8 <prvCheckTasksWaitingTermination+0x20>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801459e:	4b0e      	ldr	r3, [pc, #56]	; (80145d8 <prvCheckTasksWaitingTermination+0x50>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d1f4      	bne.n	8014590 <prvCheckTasksWaitingTermination+0x8>
}
 80145a6:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
 80145a8:	f7fe fd9c 	bl	80130e4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80145ac:	4b0b      	ldr	r3, [pc, #44]	; (80145dc <prvCheckTasksWaitingTermination+0x54>)
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145b2:	1d20      	adds	r0, r4, #4
 80145b4:	f7fe fd25 	bl	8013002 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80145b8:	4a09      	ldr	r2, [pc, #36]	; (80145e0 <prvCheckTasksWaitingTermination+0x58>)
 80145ba:	6813      	ldr	r3, [r2, #0]
 80145bc:	3b01      	subs	r3, #1
 80145be:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80145c0:	4a05      	ldr	r2, [pc, #20]	; (80145d8 <prvCheckTasksWaitingTermination+0x50>)
 80145c2:	6813      	ldr	r3, [r2, #0]
 80145c4:	3b01      	subs	r3, #1
 80145c6:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 80145c8:	f7fe fdae 	bl	8013128 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 80145cc:	4620      	mov	r0, r4
 80145ce:	f7ff fd89 	bl	80140e4 <prvDeleteTCB>
 80145d2:	e7e4      	b.n	801459e <prvCheckTasksWaitingTermination+0x16>
 80145d4:	4770      	bx	lr
 80145d6:	bf00      	nop
 80145d8:	200092f0 	.word	0x200092f0
 80145dc:	20009360 	.word	0x20009360
 80145e0:	200092ec 	.word	0x200092ec

080145e4 <prvIdleTask>:
{
 80145e4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80145e6:	f7ff ffcf 	bl	8014588 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80145ea:	4b06      	ldr	r3, [pc, #24]	; (8014604 <prvIdleTask+0x20>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	2b01      	cmp	r3, #1
 80145f0:	d9f9      	bls.n	80145e6 <prvIdleTask+0x2>
				taskYIELD();
 80145f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145f6:	4b04      	ldr	r3, [pc, #16]	; (8014608 <prvIdleTask+0x24>)
 80145f8:	601a      	str	r2, [r3, #0]
 80145fa:	f3bf 8f4f 	dsb	sy
 80145fe:	f3bf 8f6f 	isb	sy
 8014602:	e7f0      	b.n	80145e6 <prvIdleTask+0x2>
 8014604:	20009258 	.word	0x20009258
 8014608:	e000ed04 	.word	0xe000ed04

0801460c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801460c:	4b2a      	ldr	r3, [pc, #168]	; (80146b8 <vTaskSwitchContext+0xac>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	b11b      	cbz	r3, 801461a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8014612:	2201      	movs	r2, #1
 8014614:	4b29      	ldr	r3, [pc, #164]	; (80146bc <vTaskSwitchContext+0xb0>)
 8014616:	601a      	str	r2, [r3, #0]
 8014618:	4770      	bx	lr
{
 801461a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 801461c:	2200      	movs	r2, #0
 801461e:	4b27      	ldr	r3, [pc, #156]	; (80146bc <vTaskSwitchContext+0xb0>)
 8014620:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8014622:	f008 ff69 	bl	801d4f8 <getRunTimeCounterValue>
 8014626:	4b26      	ldr	r3, [pc, #152]	; (80146c0 <vTaskSwitchContext+0xb4>)
 8014628:	6018      	str	r0, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	4a25      	ldr	r2, [pc, #148]	; (80146c4 <vTaskSwitchContext+0xb8>)
 801462e:	6812      	ldr	r2, [r2, #0]
 8014630:	4293      	cmp	r3, r2
 8014632:	d907      	bls.n	8014644 <vTaskSwitchContext+0x38>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8014634:	4b22      	ldr	r3, [pc, #136]	; (80146c0 <vTaskSwitchContext+0xb4>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	1a9a      	subs	r2, r3, r2
 801463a:	4b23      	ldr	r3, [pc, #140]	; (80146c8 <vTaskSwitchContext+0xbc>)
 801463c:	6819      	ldr	r1, [r3, #0]
 801463e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8014640:	4413      	add	r3, r2
 8014642:	654b      	str	r3, [r1, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8014644:	4b1e      	ldr	r3, [pc, #120]	; (80146c0 <vTaskSwitchContext+0xb4>)
 8014646:	681a      	ldr	r2, [r3, #0]
 8014648:	4b1e      	ldr	r3, [pc, #120]	; (80146c4 <vTaskSwitchContext+0xb8>)
 801464a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801464c:	4b1f      	ldr	r3, [pc, #124]	; (80146cc <vTaskSwitchContext+0xc0>)
 801464e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8014650:	fab3 f383 	clz	r3, r3
 8014654:	b2db      	uxtb	r3, r3
 8014656:	f1c3 031f 	rsb	r3, r3, #31
 801465a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801465e:	008a      	lsls	r2, r1, #2
 8014660:	491b      	ldr	r1, [pc, #108]	; (80146d0 <vTaskSwitchContext+0xc4>)
 8014662:	588a      	ldr	r2, [r1, r2]
 8014664:	b942      	cbnz	r2, 8014678 <vTaskSwitchContext+0x6c>
	__asm volatile
 8014666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801466a:	f383 8811 	msr	BASEPRI, r3
 801466e:	f3bf 8f6f 	isb	sy
 8014672:	f3bf 8f4f 	dsb	sy
 8014676:	e7fe      	b.n	8014676 <vTaskSwitchContext+0x6a>
 8014678:	4815      	ldr	r0, [pc, #84]	; (80146d0 <vTaskSwitchContext+0xc4>)
 801467a:	009a      	lsls	r2, r3, #2
 801467c:	18d4      	adds	r4, r2, r3
 801467e:	00a1      	lsls	r1, r4, #2
 8014680:	4401      	add	r1, r0
 8014682:	684c      	ldr	r4, [r1, #4]
 8014684:	6864      	ldr	r4, [r4, #4]
 8014686:	604c      	str	r4, [r1, #4]
 8014688:	441a      	add	r2, r3
 801468a:	0091      	lsls	r1, r2, #2
 801468c:	3108      	adds	r1, #8
 801468e:	4408      	add	r0, r1
 8014690:	4284      	cmp	r4, r0
 8014692:	d009      	beq.n	80146a8 <vTaskSwitchContext+0x9c>
 8014694:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014698:	009a      	lsls	r2, r3, #2
 801469a:	4b0d      	ldr	r3, [pc, #52]	; (80146d0 <vTaskSwitchContext+0xc4>)
 801469c:	4413      	add	r3, r2
 801469e:	685b      	ldr	r3, [r3, #4]
 80146a0:	68da      	ldr	r2, [r3, #12]
 80146a2:	4b09      	ldr	r3, [pc, #36]	; (80146c8 <vTaskSwitchContext+0xbc>)
 80146a4:	601a      	str	r2, [r3, #0]
 80146a6:	bd10      	pop	{r4, pc}
 80146a8:	6860      	ldr	r0, [r4, #4]
 80146aa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80146ae:	0091      	lsls	r1, r2, #2
 80146b0:	4a07      	ldr	r2, [pc, #28]	; (80146d0 <vTaskSwitchContext+0xc4>)
 80146b2:	440a      	add	r2, r1
 80146b4:	6050      	str	r0, [r2, #4]
 80146b6:	e7ed      	b.n	8014694 <vTaskSwitchContext+0x88>
 80146b8:	200092f8 	.word	0x200092f8
 80146bc:	20009378 	.word	0x20009378
 80146c0:	200092e8 	.word	0x200092e8
 80146c4:	200092e4 	.word	0x200092e4
 80146c8:	2000924c 	.word	0x2000924c
 80146cc:	20009300 	.word	0x20009300
 80146d0:	20009258 	.word	0x20009258

080146d4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80146d4:	b940      	cbnz	r0, 80146e8 <vTaskPlaceOnEventList+0x14>
 80146d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146da:	f383 8811 	msr	BASEPRI, r3
 80146de:	f3bf 8f6f 	isb	sy
 80146e2:	f3bf 8f4f 	dsb	sy
 80146e6:	e7fe      	b.n	80146e6 <vTaskPlaceOnEventList+0x12>
{
 80146e8:	b510      	push	{r4, lr}
 80146ea:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80146ec:	4b04      	ldr	r3, [pc, #16]	; (8014700 <vTaskPlaceOnEventList+0x2c>)
 80146ee:	6819      	ldr	r1, [r3, #0]
 80146f0:	3118      	adds	r1, #24
 80146f2:	f7fe fc6c 	bl	8012fce <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80146f6:	2101      	movs	r1, #1
 80146f8:	4620      	mov	r0, r4
 80146fa:	f7ff fd11 	bl	8014120 <prvAddCurrentTaskToDelayedList>
 80146fe:	bd10      	pop	{r4, pc}
 8014700:	2000924c 	.word	0x2000924c

08014704 <xTaskRemoveFromEventList>:
{
 8014704:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8014706:	68c3      	ldr	r3, [r0, #12]
 8014708:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801470a:	b324      	cbz	r4, 8014756 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801470c:	f104 0518 	add.w	r5, r4, #24
 8014710:	4628      	mov	r0, r5
 8014712:	f7fe fc76 	bl	8013002 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014716:	4b18      	ldr	r3, [pc, #96]	; (8014778 <xTaskRemoveFromEventList+0x74>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	bb2b      	cbnz	r3, 8014768 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801471c:	1d25      	adds	r5, r4, #4
 801471e:	4628      	mov	r0, r5
 8014720:	f7fe fc6f 	bl	8013002 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014724:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014726:	2201      	movs	r2, #1
 8014728:	409a      	lsls	r2, r3
 801472a:	4914      	ldr	r1, [pc, #80]	; (801477c <xTaskRemoveFromEventList+0x78>)
 801472c:	6808      	ldr	r0, [r1, #0]
 801472e:	4302      	orrs	r2, r0
 8014730:	600a      	str	r2, [r1, #0]
 8014732:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014736:	009a      	lsls	r2, r3, #2
 8014738:	4629      	mov	r1, r5
 801473a:	4811      	ldr	r0, [pc, #68]	; (8014780 <xTaskRemoveFromEventList+0x7c>)
 801473c:	4410      	add	r0, r2
 801473e:	f7fe fc3a 	bl	8012fb6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014742:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014744:	4b0f      	ldr	r3, [pc, #60]	; (8014784 <xTaskRemoveFromEventList+0x80>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801474a:	429a      	cmp	r2, r3
 801474c:	d911      	bls.n	8014772 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 801474e:	2001      	movs	r0, #1
 8014750:	4b0d      	ldr	r3, [pc, #52]	; (8014788 <xTaskRemoveFromEventList+0x84>)
 8014752:	6018      	str	r0, [r3, #0]
 8014754:	bd38      	pop	{r3, r4, r5, pc}
 8014756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801475a:	f383 8811 	msr	BASEPRI, r3
 801475e:	f3bf 8f6f 	isb	sy
 8014762:	f3bf 8f4f 	dsb	sy
 8014766:	e7fe      	b.n	8014766 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014768:	4629      	mov	r1, r5
 801476a:	4808      	ldr	r0, [pc, #32]	; (801478c <xTaskRemoveFromEventList+0x88>)
 801476c:	f7fe fc23 	bl	8012fb6 <vListInsertEnd>
 8014770:	e7e7      	b.n	8014742 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8014772:	2000      	movs	r0, #0
}
 8014774:	bd38      	pop	{r3, r4, r5, pc}
 8014776:	bf00      	nop
 8014778:	200092f8 	.word	0x200092f8
 801477c:	20009300 	.word	0x20009300
 8014780:	20009258 	.word	0x20009258
 8014784:	2000924c 	.word	0x2000924c
 8014788:	20009378 	.word	0x20009378
 801478c:	20009334 	.word	0x20009334

08014790 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 8014790:	b130      	cbz	r0, 80147a0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014792:	4a08      	ldr	r2, [pc, #32]	; (80147b4 <vTaskSetTimeOutState+0x24>)
 8014794:	6812      	ldr	r2, [r2, #0]
 8014796:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014798:	4a07      	ldr	r2, [pc, #28]	; (80147b8 <vTaskSetTimeOutState+0x28>)
 801479a:	6812      	ldr	r2, [r2, #0]
 801479c:	6042      	str	r2, [r0, #4]
 801479e:	4770      	bx	lr
 80147a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147a4:	f383 8811 	msr	BASEPRI, r3
 80147a8:	f3bf 8f6f 	isb	sy
 80147ac:	f3bf 8f4f 	dsb	sy
 80147b0:	e7fe      	b.n	80147b0 <vTaskSetTimeOutState+0x20>
 80147b2:	bf00      	nop
 80147b4:	20009330 	.word	0x20009330
 80147b8:	20009374 	.word	0x20009374

080147bc <xTaskCheckForTimeOut>:
{
 80147bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 80147be:	b1c0      	cbz	r0, 80147f2 <xTaskCheckForTimeOut+0x36>
 80147c0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 80147c2:	b1f9      	cbz	r1, 8014804 <xTaskCheckForTimeOut+0x48>
 80147c4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80147c6:	f7fe fc8d 	bl	80130e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80147ca:	4b1a      	ldr	r3, [pc, #104]	; (8014834 <xTaskCheckForTimeOut+0x78>)
 80147cc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80147ce:	682b      	ldr	r3, [r5, #0]
 80147d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147d4:	d02a      	beq.n	801482c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80147d6:	6820      	ldr	r0, [r4, #0]
 80147d8:	4a17      	ldr	r2, [pc, #92]	; (8014838 <xTaskCheckForTimeOut+0x7c>)
 80147da:	6812      	ldr	r2, [r2, #0]
 80147dc:	4290      	cmp	r0, r2
 80147de:	d002      	beq.n	80147e6 <xTaskCheckForTimeOut+0x2a>
 80147e0:	6862      	ldr	r2, [r4, #4]
 80147e2:	4291      	cmp	r1, r2
 80147e4:	d224      	bcs.n	8014830 <xTaskCheckForTimeOut+0x74>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80147e6:	6862      	ldr	r2, [r4, #4]
 80147e8:	1a88      	subs	r0, r1, r2
 80147ea:	4283      	cmp	r3, r0
 80147ec:	d813      	bhi.n	8014816 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 80147ee:	2401      	movs	r4, #1
 80147f0:	e018      	b.n	8014824 <xTaskCheckForTimeOut+0x68>
 80147f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f6:	f383 8811 	msr	BASEPRI, r3
 80147fa:	f3bf 8f6f 	isb	sy
 80147fe:	f3bf 8f4f 	dsb	sy
 8014802:	e7fe      	b.n	8014802 <xTaskCheckForTimeOut+0x46>
 8014804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014808:	f383 8811 	msr	BASEPRI, r3
 801480c:	f3bf 8f6f 	isb	sy
 8014810:	f3bf 8f4f 	dsb	sy
 8014814:	e7fe      	b.n	8014814 <xTaskCheckForTimeOut+0x58>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8014816:	1a52      	subs	r2, r2, r1
 8014818:	4413      	add	r3, r2
 801481a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 801481c:	4620      	mov	r0, r4
 801481e:	f7ff ffb7 	bl	8014790 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8014822:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8014824:	f7fe fc80 	bl	8013128 <vPortExitCritical>
}
 8014828:	4620      	mov	r0, r4
 801482a:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
 801482c:	2400      	movs	r4, #0
 801482e:	e7f9      	b.n	8014824 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8014830:	2401      	movs	r4, #1
 8014832:	e7f7      	b.n	8014824 <xTaskCheckForTimeOut+0x68>
 8014834:	20009374 	.word	0x20009374
 8014838:	20009330 	.word	0x20009330

0801483c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801483c:	2201      	movs	r2, #1
 801483e:	4b01      	ldr	r3, [pc, #4]	; (8014844 <vTaskMissedYield+0x8>)
 8014840:	601a      	str	r2, [r3, #0]
 8014842:	4770      	bx	lr
 8014844:	20009378 	.word	0x20009378

08014848 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8014848:	4b05      	ldr	r3, [pc, #20]	; (8014860 <xTaskGetSchedulerState+0x18>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	b123      	cbz	r3, 8014858 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801484e:	4b05      	ldr	r3, [pc, #20]	; (8014864 <xTaskGetSchedulerState+0x1c>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	b91b      	cbnz	r3, 801485c <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8014854:	2002      	movs	r0, #2
 8014856:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014858:	2001      	movs	r0, #1
 801485a:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 801485c:	2000      	movs	r0, #0
	}
 801485e:	4770      	bx	lr
 8014860:	20009348 	.word	0x20009348
 8014864:	200092f8 	.word	0x200092f8

08014868 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8014868:	2800      	cmp	r0, #0
 801486a:	d047      	beq.n	80148fc <vTaskPriorityInherit+0x94>
	{
 801486c:	b538      	push	{r3, r4, r5, lr}
 801486e:	4604      	mov	r4, r0
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014870:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014872:	4923      	ldr	r1, [pc, #140]	; (8014900 <vTaskPriorityInherit+0x98>)
 8014874:	6809      	ldr	r1, [r1, #0]
 8014876:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8014878:	428b      	cmp	r3, r1
 801487a:	d216      	bcs.n	80148aa <vTaskPriorityInherit+0x42>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801487c:	6981      	ldr	r1, [r0, #24]
 801487e:	2900      	cmp	r1, #0
 8014880:	db05      	blt.n	801488e <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014882:	491f      	ldr	r1, [pc, #124]	; (8014900 <vTaskPriorityInherit+0x98>)
 8014884:	6809      	ldr	r1, [r1, #0]
 8014886:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8014888:	f1c1 0107 	rsb	r1, r1, #7
 801488c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801488e:	6960      	ldr	r0, [r4, #20]
 8014890:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014894:	0099      	lsls	r1, r3, #2
 8014896:	4b1b      	ldr	r3, [pc, #108]	; (8014904 <vTaskPriorityInherit+0x9c>)
 8014898:	440b      	add	r3, r1
 801489a:	4298      	cmp	r0, r3
 801489c:	d006      	beq.n	80148ac <vTaskPriorityInherit+0x44>
 801489e:	2300      	movs	r3, #0
 80148a0:	b933      	cbnz	r3, 80148b0 <vTaskPriorityInherit+0x48>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80148a2:	4b17      	ldr	r3, [pc, #92]	; (8014900 <vTaskPriorityInherit+0x98>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80148aa:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80148ac:	2301      	movs	r3, #1
 80148ae:	e7f7      	b.n	80148a0 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148b0:	1d25      	adds	r5, r4, #4
 80148b2:	4628      	mov	r0, r5
 80148b4:	f7fe fba5 	bl	8013002 <uxListRemove>
 80148b8:	b968      	cbnz	r0, 80148d6 <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80148ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80148bc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80148c0:	008a      	lsls	r2, r1, #2
 80148c2:	4910      	ldr	r1, [pc, #64]	; (8014904 <vTaskPriorityInherit+0x9c>)
 80148c4:	588a      	ldr	r2, [r1, r2]
 80148c6:	b932      	cbnz	r2, 80148d6 <vTaskPriorityInherit+0x6e>
 80148c8:	2201      	movs	r2, #1
 80148ca:	409a      	lsls	r2, r3
 80148cc:	490e      	ldr	r1, [pc, #56]	; (8014908 <vTaskPriorityInherit+0xa0>)
 80148ce:	680b      	ldr	r3, [r1, #0]
 80148d0:	ea23 0302 	bic.w	r3, r3, r2
 80148d4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80148d6:	4b0a      	ldr	r3, [pc, #40]	; (8014900 <vTaskPriorityInherit+0x98>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148dc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80148de:	2201      	movs	r2, #1
 80148e0:	409a      	lsls	r2, r3
 80148e2:	4909      	ldr	r1, [pc, #36]	; (8014908 <vTaskPriorityInherit+0xa0>)
 80148e4:	6808      	ldr	r0, [r1, #0]
 80148e6:	4302      	orrs	r2, r0
 80148e8:	600a      	str	r2, [r1, #0]
 80148ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80148ee:	009a      	lsls	r2, r3, #2
 80148f0:	4629      	mov	r1, r5
 80148f2:	4804      	ldr	r0, [pc, #16]	; (8014904 <vTaskPriorityInherit+0x9c>)
 80148f4:	4410      	add	r0, r2
 80148f6:	f7fe fb5e 	bl	8012fb6 <vListInsertEnd>
 80148fa:	bd38      	pop	{r3, r4, r5, pc}
 80148fc:	4770      	bx	lr
 80148fe:	bf00      	nop
 8014900:	2000924c 	.word	0x2000924c
 8014904:	20009258 	.word	0x20009258
 8014908:	20009300 	.word	0x20009300

0801490c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801490c:	2800      	cmp	r0, #0
 801490e:	d04a      	beq.n	80149a6 <xTaskPriorityDisinherit+0x9a>
	{
 8014910:	b538      	push	{r3, r4, r5, lr}
 8014912:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8014914:	4a27      	ldr	r2, [pc, #156]	; (80149b4 <xTaskPriorityDisinherit+0xa8>)
 8014916:	6812      	ldr	r2, [r2, #0]
 8014918:	4290      	cmp	r0, r2
 801491a:	d008      	beq.n	801492e <xTaskPriorityDisinherit+0x22>
 801491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014920:	f383 8811 	msr	BASEPRI, r3
 8014924:	f3bf 8f6f 	isb	sy
 8014928:	f3bf 8f4f 	dsb	sy
 801492c:	e7fe      	b.n	801492c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801492e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8014930:	b942      	cbnz	r2, 8014944 <xTaskPriorityDisinherit+0x38>
 8014932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014936:	f383 8811 	msr	BASEPRI, r3
 801493a:	f3bf 8f6f 	isb	sy
 801493e:	f3bf 8f4f 	dsb	sy
 8014942:	e7fe      	b.n	8014942 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8014944:	3a01      	subs	r2, #1
 8014946:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014948:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801494a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801494c:	4288      	cmp	r0, r1
 801494e:	d02c      	beq.n	80149aa <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014950:	bb6a      	cbnz	r2, 80149ae <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014952:	1d25      	adds	r5, r4, #4
 8014954:	4628      	mov	r0, r5
 8014956:	f7fe fb54 	bl	8013002 <uxListRemove>
 801495a:	b970      	cbnz	r0, 801497a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801495c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801495e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8014962:	008b      	lsls	r3, r1, #2
 8014964:	4914      	ldr	r1, [pc, #80]	; (80149b8 <xTaskPriorityDisinherit+0xac>)
 8014966:	58cb      	ldr	r3, [r1, r3]
 8014968:	b93b      	cbnz	r3, 801497a <xTaskPriorityDisinherit+0x6e>
 801496a:	2301      	movs	r3, #1
 801496c:	fa03 f202 	lsl.w	r2, r3, r2
 8014970:	4912      	ldr	r1, [pc, #72]	; (80149bc <xTaskPriorityDisinherit+0xb0>)
 8014972:	680b      	ldr	r3, [r1, #0]
 8014974:	ea23 0302 	bic.w	r3, r3, r2
 8014978:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801497a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801497c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801497e:	f1c3 0207 	rsb	r2, r3, #7
 8014982:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8014984:	2401      	movs	r4, #1
 8014986:	fa04 f203 	lsl.w	r2, r4, r3
 801498a:	490c      	ldr	r1, [pc, #48]	; (80149bc <xTaskPriorityDisinherit+0xb0>)
 801498c:	6808      	ldr	r0, [r1, #0]
 801498e:	4302      	orrs	r2, r0
 8014990:	600a      	str	r2, [r1, #0]
 8014992:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014996:	009a      	lsls	r2, r3, #2
 8014998:	4629      	mov	r1, r5
 801499a:	4807      	ldr	r0, [pc, #28]	; (80149b8 <xTaskPriorityDisinherit+0xac>)
 801499c:	4410      	add	r0, r2
 801499e:	f7fe fb0a 	bl	8012fb6 <vListInsertEnd>
					xReturn = pdTRUE;
 80149a2:	4620      	mov	r0, r4
 80149a4:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80149a6:	2000      	movs	r0, #0
 80149a8:	4770      	bx	lr
 80149aa:	2000      	movs	r0, #0
 80149ac:	bd38      	pop	{r3, r4, r5, pc}
 80149ae:	2000      	movs	r0, #0
	}
 80149b0:	bd38      	pop	{r3, r4, r5, pc}
 80149b2:	bf00      	nop
 80149b4:	2000924c 	.word	0x2000924c
 80149b8:	20009258 	.word	0x20009258
 80149bc:	20009300 	.word	0x20009300

080149c0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80149c0:	4b05      	ldr	r3, [pc, #20]	; (80149d8 <pvTaskIncrementMutexHeldCount+0x18>)
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	b123      	cbz	r3, 80149d0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80149c6:	4b04      	ldr	r3, [pc, #16]	; (80149d8 <pvTaskIncrementMutexHeldCount+0x18>)
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80149cc:	3301      	adds	r3, #1
 80149ce:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 80149d0:	4b01      	ldr	r3, [pc, #4]	; (80149d8 <pvTaskIncrementMutexHeldCount+0x18>)
 80149d2:	6818      	ldr	r0, [r3, #0]
	}
 80149d4:	4770      	bx	lr
 80149d6:	bf00      	nop
 80149d8:	2000924c 	.word	0x2000924c

080149dc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80149dc:	b510      	push	{r4, lr}
 80149de:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80149e0:	680a      	ldr	r2, [r1, #0]
 80149e2:	320c      	adds	r2, #12
 80149e4:	f001 fb8e 	bl	8016104 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80149e8:	4603      	mov	r3, r0
 80149ea:	b908      	cbnz	r0, 80149f0 <netconn_apimsg+0x14>
    return apimsg->err;
 80149ec:	f994 3004 	ldrsb.w	r3, [r4, #4]
  }
  return err;
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	bd10      	pop	{r4, pc}

080149f4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80149f4:	b500      	push	{lr}
 80149f6:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80149f8:	b160      	cbz	r0, 8014a14 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80149fa:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80149fc:	f88d 100c 	strb.w	r1, [sp, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8014a00:	2329      	movs	r3, #41	; 0x29
 8014a02:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8014a06:	a901      	add	r1, sp, #4
 8014a08:	4807      	ldr	r0, [pc, #28]	; (8014a28 <netconn_close_shutdown+0x34>)
 8014a0a:	f7ff ffe7 	bl	80149dc <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8014a0e:	b007      	add	sp, #28
 8014a10:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014a14:	4b05      	ldr	r3, [pc, #20]	; (8014a2c <netconn_close_shutdown+0x38>)
 8014a16:	f44f 724a 	mov.w	r2, #808	; 0x328
 8014a1a:	4905      	ldr	r1, [pc, #20]	; (8014a30 <netconn_close_shutdown+0x3c>)
 8014a1c:	4805      	ldr	r0, [pc, #20]	; (8014a34 <netconn_close_shutdown+0x40>)
 8014a1e:	f00a fc2e 	bl	801f27e <iprintf>
 8014a22:	f06f 000f 	mvn.w	r0, #15
 8014a26:	e7f2      	b.n	8014a0e <netconn_close_shutdown+0x1a>
 8014a28:	08015da9 	.word	0x08015da9
 8014a2c:	0801fdcc 	.word	0x0801fdcc
 8014a30:	0801fe00 	.word	0x0801fe00
 8014a34:	0801fe1c 	.word	0x0801fe1c

08014a38 <netconn_recv_data>:
{
 8014a38:	b570      	push	{r4, r5, r6, lr}
 8014a3a:	b086      	sub	sp, #24
  void *buf = NULL;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014a40:	b199      	cbz	r1, 8014a6a <netconn_recv_data+0x32>
 8014a42:	4604      	mov	r4, r0
 8014a44:	460e      	mov	r6, r1
  *new_buf = NULL;
 8014a46:	2300      	movs	r3, #0
 8014a48:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014a4a:	b1c0      	cbz	r0, 8014a7e <netconn_recv_data+0x46>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8014a4c:	f100 0510 	add.w	r5, r0, #16
 8014a50:	4628      	mov	r0, r5
 8014a52:	f007 fe4b 	bl	801c6ec <sys_mbox_valid>
 8014a56:	b9e0      	cbnz	r0, 8014a92 <netconn_recv_data+0x5a>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8014a58:	f104 0014 	add.w	r0, r4, #20
 8014a5c:	f007 fe46 	bl	801c6ec <sys_mbox_valid>
 8014a60:	2800      	cmp	r0, #0
 8014a62:	d05e      	beq.n	8014b22 <netconn_recv_data+0xea>
 8014a64:	f06f 000a 	mvn.w	r0, #10
 8014a68:	e01c      	b.n	8014aa4 <netconn_recv_data+0x6c>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014a6a:	4b2f      	ldr	r3, [pc, #188]	; (8014b28 <netconn_recv_data+0xf0>)
 8014a6c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8014a70:	492e      	ldr	r1, [pc, #184]	; (8014b2c <netconn_recv_data+0xf4>)
 8014a72:	482f      	ldr	r0, [pc, #188]	; (8014b30 <netconn_recv_data+0xf8>)
 8014a74:	f00a fc03 	bl	801f27e <iprintf>
 8014a78:	f06f 000f 	mvn.w	r0, #15
 8014a7c:	e012      	b.n	8014aa4 <netconn_recv_data+0x6c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014a7e:	4b2a      	ldr	r3, [pc, #168]	; (8014b28 <netconn_recv_data+0xf0>)
 8014a80:	f240 12e9 	movw	r2, #489	; 0x1e9
 8014a84:	492b      	ldr	r1, [pc, #172]	; (8014b34 <netconn_recv_data+0xfc>)
 8014a86:	482a      	ldr	r0, [pc, #168]	; (8014b30 <netconn_recv_data+0xf8>)
 8014a88:	f00a fbf9 	bl	801f27e <iprintf>
 8014a8c:	f06f 000f 	mvn.w	r0, #15
 8014a90:	e008      	b.n	8014aa4 <netconn_recv_data+0x6c>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8014a92:	4628      	mov	r0, r5
 8014a94:	f007 fe2a 	bl	801c6ec <sys_mbox_valid>
 8014a98:	b130      	cbz	r0, 8014aa8 <netconn_recv_data+0x70>
  if (ERR_IS_FATAL(conn->last_err)) {
 8014a9a:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8014a9e:	f110 0f0c 	cmn.w	r0, #12
 8014aa2:	da0b      	bge.n	8014abc <netconn_recv_data+0x84>
}
 8014aa4:	b006      	add	sp, #24
 8014aa6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8014aa8:	4b1f      	ldr	r3, [pc, #124]	; (8014b28 <netconn_recv_data+0xf0>)
 8014aaa:	f240 12f5 	movw	r2, #501	; 0x1f5
 8014aae:	4922      	ldr	r1, [pc, #136]	; (8014b38 <netconn_recv_data+0x100>)
 8014ab0:	481f      	ldr	r0, [pc, #124]	; (8014b30 <netconn_recv_data+0xf8>)
 8014ab2:	f00a fbe4 	bl	801f27e <iprintf>
 8014ab6:	f06f 000a 	mvn.w	r0, #10
 8014aba:	e7f3      	b.n	8014aa4 <netconn_recv_data+0x6c>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8014abc:	2200      	movs	r2, #0
 8014abe:	a905      	add	r1, sp, #20
 8014ac0:	4628      	mov	r0, r5
 8014ac2:	f007 fdd4 	bl	801c66e <sys_arch_mbox_fetch>
    API_MSG_VAR_REF(msg).conn = conn;
 8014ac6:	9400      	str	r4, [sp, #0]
    if (buf != NULL) {
 8014ac8:	9b05      	ldr	r3, [sp, #20]
 8014aca:	b18b      	cbz	r3, 8014af0 <netconn_recv_data+0xb8>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8014acc:	891b      	ldrh	r3, [r3, #8]
 8014ace:	9302      	str	r3, [sp, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8014ad0:	4669      	mov	r1, sp
 8014ad2:	481a      	ldr	r0, [pc, #104]	; (8014b3c <netconn_recv_data+0x104>)
 8014ad4:	f7ff ff82 	bl	80149dc <netconn_apimsg>
    if (buf == NULL) {
 8014ad8:	9b05      	ldr	r3, [sp, #20]
 8014ada:	b163      	cbz	r3, 8014af6 <netconn_recv_data+0xbe>
    len = ((struct pbuf *)buf)->tot_len;
 8014adc:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8014ade:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014ae0:	b113      	cbz	r3, 8014ae8 <netconn_recv_data+0xb0>
 8014ae2:	2101      	movs	r1, #1
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	4798      	blx	r3
  *new_buf = buf;
 8014ae8:	9b05      	ldr	r3, [sp, #20]
 8014aea:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8014aec:	2000      	movs	r0, #0
 8014aee:	e7d9      	b.n	8014aa4 <netconn_recv_data+0x6c>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8014af0:	2301      	movs	r3, #1
 8014af2:	9302      	str	r3, [sp, #8]
 8014af4:	e7ec      	b.n	8014ad0 <netconn_recv_data+0x98>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014af6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014af8:	b11b      	cbz	r3, 8014b02 <netconn_recv_data+0xca>
 8014afa:	2200      	movs	r2, #0
 8014afc:	2101      	movs	r1, #1
 8014afe:	4620      	mov	r0, r4
 8014b00:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8014b02:	6863      	ldr	r3, [r4, #4]
 8014b04:	b933      	cbnz	r3, 8014b14 <netconn_recv_data+0xdc>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8014b06:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	d1ca      	bne.n	8014aa4 <netconn_recv_data+0x6c>
 8014b0e:	f06f 000d 	mvn.w	r0, #13
 8014b12:	e7c7      	b.n	8014aa4 <netconn_recv_data+0x6c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8014b14:	2101      	movs	r1, #1
 8014b16:	4620      	mov	r0, r4
 8014b18:	f7ff ff6c 	bl	80149f4 <netconn_close_shutdown>
      return ERR_CLSD;
 8014b1c:	f06f 000e 	mvn.w	r0, #14
 8014b20:	e7c0      	b.n	8014aa4 <netconn_recv_data+0x6c>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8014b22:	f06f 000e 	mvn.w	r0, #14
 8014b26:	e7bd      	b.n	8014aa4 <netconn_recv_data+0x6c>
 8014b28:	0801fdcc 	.word	0x0801fdcc
 8014b2c:	0801fee0 	.word	0x0801fee0
 8014b30:	0801fe1c 	.word	0x0801fe1c
 8014b34:	0801ff00 	.word	0x0801ff00
 8014b38:	0801ff1c 	.word	0x0801ff1c
 8014b3c:	08015c55 	.word	0x08015c55

08014b40 <netconn_new_with_proto_and_callback>:
{
 8014b40:	b570      	push	{r4, r5, r6, lr}
 8014b42:	b086      	sub	sp, #24
 8014b44:	460d      	mov	r5, r1
  conn = netconn_alloc(t, callback);
 8014b46:	4611      	mov	r1, r2
 8014b48:	f000 fde0 	bl	801570c <netconn_alloc>
  if (conn != NULL) {
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	b140      	cbz	r0, 8014b62 <netconn_new_with_proto_and_callback+0x22>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8014b50:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8014b54:	a906      	add	r1, sp, #24
 8014b56:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8014b5a:	4820      	ldr	r0, [pc, #128]	; (8014bdc <netconn_new_with_proto_and_callback+0x9c>)
 8014b5c:	f7ff ff3e 	bl	80149dc <netconn_apimsg>
    if (err != ERR_OK) {
 8014b60:	b910      	cbnz	r0, 8014b68 <netconn_new_with_proto_and_callback+0x28>
}
 8014b62:	4620      	mov	r0, r4
 8014b64:	b006      	add	sp, #24
 8014b66:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8014b68:	6863      	ldr	r3, [r4, #4]
 8014b6a:	b12b      	cbz	r3, 8014b78 <netconn_new_with_proto_and_callback+0x38>
 8014b6c:	4b1c      	ldr	r3, [pc, #112]	; (8014be0 <netconn_new_with_proto_and_callback+0xa0>)
 8014b6e:	2289      	movs	r2, #137	; 0x89
 8014b70:	491c      	ldr	r1, [pc, #112]	; (8014be4 <netconn_new_with_proto_and_callback+0xa4>)
 8014b72:	481d      	ldr	r0, [pc, #116]	; (8014be8 <netconn_new_with_proto_and_callback+0xa8>)
 8014b74:	f00a fb83 	bl	801f27e <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014b78:	f104 0510 	add.w	r5, r4, #16
 8014b7c:	4628      	mov	r0, r5
 8014b7e:	f007 fdb5 	bl	801c6ec <sys_mbox_valid>
 8014b82:	b1b0      	cbz	r0, 8014bb2 <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014b84:	f104 0014 	add.w	r0, r4, #20
 8014b88:	f007 fdb0 	bl	801c6ec <sys_mbox_valid>
 8014b8c:	b9c0      	cbnz	r0, 8014bc0 <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014b8e:	f104 060c 	add.w	r6, r4, #12
 8014b92:	4630      	mov	r0, r6
 8014b94:	f007 fdf4 	bl	801c780 <sys_sem_valid>
 8014b98:	b1c8      	cbz	r0, 8014bce <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 8014b9a:	4630      	mov	r0, r6
 8014b9c:	f007 fdeb 	bl	801c776 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8014ba0:	4628      	mov	r0, r5
 8014ba2:	f007 fd45 	bl	801c630 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8014ba6:	4621      	mov	r1, r4
 8014ba8:	2006      	movs	r0, #6
 8014baa:	f003 fa75 	bl	8018098 <memp_free>
      return NULL;
 8014bae:	2400      	movs	r4, #0
 8014bb0:	e7d7      	b.n	8014b62 <netconn_new_with_proto_and_callback+0x22>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014bb2:	4b0b      	ldr	r3, [pc, #44]	; (8014be0 <netconn_new_with_proto_and_callback+0xa0>)
 8014bb4:	228a      	movs	r2, #138	; 0x8a
 8014bb6:	490d      	ldr	r1, [pc, #52]	; (8014bec <netconn_new_with_proto_and_callback+0xac>)
 8014bb8:	480b      	ldr	r0, [pc, #44]	; (8014be8 <netconn_new_with_proto_and_callback+0xa8>)
 8014bba:	f00a fb60 	bl	801f27e <iprintf>
 8014bbe:	e7e1      	b.n	8014b84 <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014bc0:	4b07      	ldr	r3, [pc, #28]	; (8014be0 <netconn_new_with_proto_and_callback+0xa0>)
 8014bc2:	228c      	movs	r2, #140	; 0x8c
 8014bc4:	490a      	ldr	r1, [pc, #40]	; (8014bf0 <netconn_new_with_proto_and_callback+0xb0>)
 8014bc6:	4808      	ldr	r0, [pc, #32]	; (8014be8 <netconn_new_with_proto_and_callback+0xa8>)
 8014bc8:	f00a fb59 	bl	801f27e <iprintf>
 8014bcc:	e7df      	b.n	8014b8e <netconn_new_with_proto_and_callback+0x4e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014bce:	4b04      	ldr	r3, [pc, #16]	; (8014be0 <netconn_new_with_proto_and_callback+0xa0>)
 8014bd0:	228f      	movs	r2, #143	; 0x8f
 8014bd2:	4908      	ldr	r1, [pc, #32]	; (8014bf4 <netconn_new_with_proto_and_callback+0xb4>)
 8014bd4:	4804      	ldr	r0, [pc, #16]	; (8014be8 <netconn_new_with_proto_and_callback+0xa8>)
 8014bd6:	f00a fb52 	bl	801f27e <iprintf>
 8014bda:	e7de      	b.n	8014b9a <netconn_new_with_proto_and_callback+0x5a>
 8014bdc:	080156d9 	.word	0x080156d9
 8014be0:	0801fdcc 	.word	0x0801fdcc
 8014be4:	0801fe64 	.word	0x0801fe64
 8014be8:	0801fe1c 	.word	0x0801fe1c
 8014bec:	0801fe88 	.word	0x0801fe88
 8014bf0:	0801fea0 	.word	0x0801fea0
 8014bf4:	0801fec4 	.word	0x0801fec4

08014bf8 <netconn_delete>:
{
 8014bf8:	b530      	push	{r4, r5, lr}
 8014bfa:	b087      	sub	sp, #28
  if (conn == NULL) {
 8014bfc:	b188      	cbz	r0, 8014c22 <netconn_delete+0x2a>
 8014bfe:	4604      	mov	r4, r0
  API_MSG_VAR_REF(msg).conn = conn;
 8014c00:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8014c02:	2329      	movs	r3, #41	; 0x29
 8014c04:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8014c08:	a901      	add	r1, sp, #4
 8014c0a:	4807      	ldr	r0, [pc, #28]	; (8014c28 <netconn_delete+0x30>)
 8014c0c:	f7ff fee6 	bl	80149dc <netconn_apimsg>
  if (err != ERR_OK) {
 8014c10:	4605      	mov	r5, r0
 8014c12:	b110      	cbz	r0, 8014c1a <netconn_delete+0x22>
}
 8014c14:	4628      	mov	r0, r5
 8014c16:	b007      	add	sp, #28
 8014c18:	bd30      	pop	{r4, r5, pc}
  netconn_free(conn);
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f000 fdba 	bl	8015794 <netconn_free>
  return ERR_OK;
 8014c20:	e7f8      	b.n	8014c14 <netconn_delete+0x1c>
    return ERR_OK;
 8014c22:	2500      	movs	r5, #0
 8014c24:	e7f6      	b.n	8014c14 <netconn_delete+0x1c>
 8014c26:	bf00      	nop
 8014c28:	080159b1 	.word	0x080159b1

08014c2c <netconn_bind>:
{
 8014c2c:	b500      	push	{lr}
 8014c2e:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014c30:	b160      	cbz	r0, 8014c4c <netconn_bind+0x20>
 8014c32:	4603      	mov	r3, r0
  if (addr == NULL) {
 8014c34:	b199      	cbz	r1, 8014c5e <netconn_bind+0x32>
  API_MSG_VAR_REF(msg).conn = conn;
 8014c36:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014c38:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014c3a:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8014c3e:	a901      	add	r1, sp, #4
 8014c40:	4808      	ldr	r0, [pc, #32]	; (8014c64 <netconn_bind+0x38>)
 8014c42:	f7ff fecb 	bl	80149dc <netconn_apimsg>
}
 8014c46:	b007      	add	sp, #28
 8014c48:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014c4c:	4b06      	ldr	r3, [pc, #24]	; (8014c68 <netconn_bind+0x3c>)
 8014c4e:	22ff      	movs	r2, #255	; 0xff
 8014c50:	4906      	ldr	r1, [pc, #24]	; (8014c6c <netconn_bind+0x40>)
 8014c52:	4807      	ldr	r0, [pc, #28]	; (8014c70 <netconn_bind+0x44>)
 8014c54:	f00a fb13 	bl	801f27e <iprintf>
 8014c58:	f06f 000f 	mvn.w	r0, #15
 8014c5c:	e7f3      	b.n	8014c46 <netconn_bind+0x1a>
    addr = IP4_ADDR_ANY;
 8014c5e:	4905      	ldr	r1, [pc, #20]	; (8014c74 <netconn_bind+0x48>)
 8014c60:	e7e9      	b.n	8014c36 <netconn_bind+0xa>
 8014c62:	bf00      	nop
 8014c64:	08015b11 	.word	0x08015b11
 8014c68:	0801fdcc 	.word	0x0801fdcc
 8014c6c:	0801fdb0 	.word	0x0801fdb0
 8014c70:	0801fe1c 	.word	0x0801fe1c
 8014c74:	08023388 	.word	0x08023388

08014c78 <netconn_listen_with_backlog>:
{
 8014c78:	b500      	push	{lr}
 8014c7a:	b087      	sub	sp, #28
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014c7c:	b140      	cbz	r0, 8014c90 <netconn_listen_with_backlog+0x18>
  API_MSG_VAR_REF(msg).conn = conn;
 8014c7e:	a906      	add	r1, sp, #24
 8014c80:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8014c84:	4807      	ldr	r0, [pc, #28]	; (8014ca4 <netconn_listen_with_backlog+0x2c>)
 8014c86:	f7ff fea9 	bl	80149dc <netconn_apimsg>
}
 8014c8a:	b007      	add	sp, #28
 8014c8c:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014c90:	4b05      	ldr	r3, [pc, #20]	; (8014ca8 <netconn_listen_with_backlog+0x30>)
 8014c92:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014c96:	4905      	ldr	r1, [pc, #20]	; (8014cac <netconn_listen_with_backlog+0x34>)
 8014c98:	4805      	ldr	r0, [pc, #20]	; (8014cb0 <netconn_listen_with_backlog+0x38>)
 8014c9a:	f00a faf0 	bl	801f27e <iprintf>
 8014c9e:	f06f 000f 	mvn.w	r0, #15
 8014ca2:	e7f2      	b.n	8014c8a <netconn_listen_with_backlog+0x12>
 8014ca4:	08015b65 	.word	0x08015b65
 8014ca8:	0801fdcc 	.word	0x0801fdcc
 8014cac:	0801fe44 	.word	0x0801fe44
 8014cb0:	0801fe1c 	.word	0x0801fe1c

08014cb4 <netconn_accept>:
{
 8014cb4:	b570      	push	{r4, r5, r6, lr}
 8014cb6:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014cb8:	b159      	cbz	r1, 8014cd2 <netconn_accept+0x1e>
 8014cba:	4604      	mov	r4, r0
 8014cbc:	460d      	mov	r5, r1
  *new_conn = NULL;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014cc2:	b180      	cbz	r0, 8014ce6 <netconn_accept+0x32>
  if (ERR_IS_FATAL(conn->last_err)) {
 8014cc4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8014cc8:	f110 0f0c 	cmn.w	r0, #12
 8014ccc:	da15      	bge.n	8014cfa <netconn_accept+0x46>
}
 8014cce:	b002      	add	sp, #8
 8014cd0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014cd2:	4b21      	ldr	r3, [pc, #132]	; (8014d58 <netconn_accept+0xa4>)
 8014cd4:	f240 128d 	movw	r2, #397	; 0x18d
 8014cd8:	4920      	ldr	r1, [pc, #128]	; (8014d5c <netconn_accept+0xa8>)
 8014cda:	4821      	ldr	r0, [pc, #132]	; (8014d60 <netconn_accept+0xac>)
 8014cdc:	f00a facf 	bl	801f27e <iprintf>
 8014ce0:	f06f 000f 	mvn.w	r0, #15
 8014ce4:	e7f3      	b.n	8014cce <netconn_accept+0x1a>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014ce6:	4b1c      	ldr	r3, [pc, #112]	; (8014d58 <netconn_accept+0xa4>)
 8014ce8:	f240 128f 	movw	r2, #399	; 0x18f
 8014cec:	491d      	ldr	r1, [pc, #116]	; (8014d64 <netconn_accept+0xb0>)
 8014cee:	481c      	ldr	r0, [pc, #112]	; (8014d60 <netconn_accept+0xac>)
 8014cf0:	f00a fac5 	bl	801f27e <iprintf>
 8014cf4:	f06f 000f 	mvn.w	r0, #15
 8014cf8:	e7e9      	b.n	8014cce <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8014cfa:	f104 0614 	add.w	r6, r4, #20
 8014cfe:	4630      	mov	r0, r6
 8014d00:	f007 fcf4 	bl	801c6ec <sys_mbox_valid>
 8014d04:	b308      	cbz	r0, 8014d4a <netconn_accept+0x96>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8014d06:	2200      	movs	r2, #0
 8014d08:	a901      	add	r1, sp, #4
 8014d0a:	4630      	mov	r0, r6
 8014d0c:	f007 fcaf 	bl	801c66e <sys_arch_mbox_fetch>
  newconn = (struct netconn *)accept_ptr;
 8014d10:	9e01      	ldr	r6, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014d14:	b11b      	cbz	r3, 8014d1e <netconn_accept+0x6a>
 8014d16:	2200      	movs	r2, #0
 8014d18:	2101      	movs	r1, #1
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 8014d1e:	4b12      	ldr	r3, [pc, #72]	; (8014d68 <netconn_accept+0xb4>)
 8014d20:	9a01      	ldr	r2, [sp, #4]
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d014      	beq.n	8014d50 <netconn_accept+0x9c>
  if (newconn == NULL) {
 8014d26:	b116      	cbz	r6, 8014d2e <netconn_accept+0x7a>
  *new_conn = newconn;
 8014d28:	602e      	str	r6, [r5, #0]
  return ERR_OK;
 8014d2a:	2000      	movs	r0, #0
 8014d2c:	e7cf      	b.n	8014cce <netconn_accept+0x1a>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8014d2e:	f007 fd6f 	bl	801c810 <sys_arch_protect>
 8014d32:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014d36:	f113 0f0c 	cmn.w	r3, #12
 8014d3a:	db01      	blt.n	8014d40 <netconn_accept+0x8c>
 8014d3c:	23f1      	movs	r3, #241	; 0xf1
 8014d3e:	7223      	strb	r3, [r4, #8]
 8014d40:	f007 fd72 	bl	801c828 <sys_arch_unprotect>
    return ERR_CLSD;
 8014d44:	f06f 000e 	mvn.w	r0, #14
 8014d48:	e7c1      	b.n	8014cce <netconn_accept+0x1a>
    return ERR_CLSD;
 8014d4a:	f06f 000e 	mvn.w	r0, #14
 8014d4e:	e7be      	b.n	8014cce <netconn_accept+0x1a>
    return ERR_ABRT;
 8014d50:	f06f 000c 	mvn.w	r0, #12
 8014d54:	e7bb      	b.n	8014cce <netconn_accept+0x1a>
 8014d56:	bf00      	nop
 8014d58:	0801fdcc 	.word	0x0801fdcc
 8014d5c:	0801fd70 	.word	0x0801fd70
 8014d60:	0801fe1c 	.word	0x0801fe1c
 8014d64:	0801fd90 	.word	0x0801fd90
 8014d68:	2000a24c 	.word	0x2000a24c

08014d6c <netconn_recv>:
{
 8014d6c:	b570      	push	{r4, r5, r6, lr}
 8014d6e:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014d70:	b1f9      	cbz	r1, 8014db2 <netconn_recv+0x46>
 8014d72:	4605      	mov	r5, r0
 8014d74:	460e      	mov	r6, r1
  *new_buf = NULL;
 8014d76:	2300      	movs	r3, #0
 8014d78:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014d7a:	b320      	cbz	r0, 8014dc6 <netconn_recv+0x5a>
    struct pbuf *p = NULL;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8014d80:	2005      	movs	r0, #5
 8014d82:	f003 f96f 	bl	8018064 <memp_malloc>
    if (buf == NULL) {
 8014d86:	4604      	mov	r4, r0
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	d033      	beq.n	8014df4 <netconn_recv+0x88>
    err = netconn_recv_data(conn, (void **)&p);
 8014d8c:	a901      	add	r1, sp, #4
 8014d8e:	4628      	mov	r0, r5
 8014d90:	f7ff fe52 	bl	8014a38 <netconn_recv_data>
    if (err != ERR_OK) {
 8014d94:	4605      	mov	r5, r0
 8014d96:	bb00      	cbnz	r0, 8014dda <netconn_recv+0x6e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014d98:	9b01      	ldr	r3, [sp, #4]
 8014d9a:	b31b      	cbz	r3, 8014de4 <netconn_recv+0x78>
    buf->p = p;
 8014d9c:	9b01      	ldr	r3, [sp, #4]
 8014d9e:	6023      	str	r3, [r4, #0]
    buf->ptr = p;
 8014da0:	9b01      	ldr	r3, [sp, #4]
 8014da2:	6063      	str	r3, [r4, #4]
    buf->port = 0;
 8014da4:	2300      	movs	r3, #0
 8014da6:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8014da8:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 8014daa:	6034      	str	r4, [r6, #0]
}
 8014dac:	4628      	mov	r0, r5
 8014dae:	b002      	add	sp, #8
 8014db0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014db2:	4b12      	ldr	r3, [pc, #72]	; (8014dfc <netconn_recv+0x90>)
 8014db4:	f44f 721d 	mov.w	r2, #628	; 0x274
 8014db8:	4911      	ldr	r1, [pc, #68]	; (8014e00 <netconn_recv+0x94>)
 8014dba:	4812      	ldr	r0, [pc, #72]	; (8014e04 <netconn_recv+0x98>)
 8014dbc:	f00a fa5f 	bl	801f27e <iprintf>
 8014dc0:	f06f 050f 	mvn.w	r5, #15
 8014dc4:	e7f2      	b.n	8014dac <netconn_recv+0x40>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014dc6:	4b0d      	ldr	r3, [pc, #52]	; (8014dfc <netconn_recv+0x90>)
 8014dc8:	f240 2276 	movw	r2, #630	; 0x276
 8014dcc:	490e      	ldr	r1, [pc, #56]	; (8014e08 <netconn_recv+0x9c>)
 8014dce:	480d      	ldr	r0, [pc, #52]	; (8014e04 <netconn_recv+0x98>)
 8014dd0:	f00a fa55 	bl	801f27e <iprintf>
 8014dd4:	f06f 050f 	mvn.w	r5, #15
 8014dd8:	e7e8      	b.n	8014dac <netconn_recv+0x40>
      memp_free(MEMP_NETBUF, buf);
 8014dda:	4621      	mov	r1, r4
 8014ddc:	2005      	movs	r0, #5
 8014dde:	f003 f95b 	bl	8018098 <memp_free>
      return err;
 8014de2:	e7e3      	b.n	8014dac <netconn_recv+0x40>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014de4:	4b05      	ldr	r3, [pc, #20]	; (8014dfc <netconn_recv+0x90>)
 8014de6:	f240 228a 	movw	r2, #650	; 0x28a
 8014dea:	4908      	ldr	r1, [pc, #32]	; (8014e0c <netconn_recv+0xa0>)
 8014dec:	4805      	ldr	r0, [pc, #20]	; (8014e04 <netconn_recv+0x98>)
 8014dee:	f00a fa46 	bl	801f27e <iprintf>
 8014df2:	e7d3      	b.n	8014d9c <netconn_recv+0x30>
      return ERR_MEM;
 8014df4:	f04f 35ff 	mov.w	r5, #4294967295
 8014df8:	e7d8      	b.n	8014dac <netconn_recv+0x40>
 8014dfa:	bf00      	nop
 8014dfc:	0801fdcc 	.word	0x0801fdcc
 8014e00:	0801fee0 	.word	0x0801fee0
 8014e04:	0801fe1c 	.word	0x0801fe1c
 8014e08:	0801ff00 	.word	0x0801ff00
 8014e0c:	08020104 	.word	0x08020104

08014e10 <netconn_write_partly>:
{
 8014e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e12:	b087      	sub	sp, #28
 8014e14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014e16:	b188      	cbz	r0, 8014e3c <netconn_write_partly+0x2c>
 8014e18:	4616      	mov	r6, r2
 8014e1a:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8014e1c:	7802      	ldrb	r2, [r0, #0]
 8014e1e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8014e22:	2a10      	cmp	r2, #16
 8014e24:	d114      	bne.n	8014e50 <netconn_write_partly+0x40>
  if (size == 0) {
 8014e26:	2e00      	cmp	r6, #0
 8014e28:	d035      	beq.n	8014e96 <netconn_write_partly+0x86>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014e2a:	7f02      	ldrb	r2, [r0, #28]
 8014e2c:	f012 0f02 	tst.w	r2, #2
 8014e30:	d118      	bne.n	8014e64 <netconn_write_partly+0x54>
 8014e32:	f013 0f04 	tst.w	r3, #4
 8014e36:	d029      	beq.n	8014e8c <netconn_write_partly+0x7c>
 8014e38:	2201      	movs	r2, #1
 8014e3a:	e014      	b.n	8014e66 <netconn_write_partly+0x56>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014e3c:	4b19      	ldr	r3, [pc, #100]	; (8014ea4 <netconn_write_partly+0x94>)
 8014e3e:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014e42:	4919      	ldr	r1, [pc, #100]	; (8014ea8 <netconn_write_partly+0x98>)
 8014e44:	4819      	ldr	r0, [pc, #100]	; (8014eac <netconn_write_partly+0x9c>)
 8014e46:	f00a fa1a 	bl	801f27e <iprintf>
 8014e4a:	f06f 030f 	mvn.w	r3, #15
 8014e4e:	e023      	b.n	8014e98 <netconn_write_partly+0x88>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8014e50:	4b14      	ldr	r3, [pc, #80]	; (8014ea4 <netconn_write_partly+0x94>)
 8014e52:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014e56:	4916      	ldr	r1, [pc, #88]	; (8014eb0 <netconn_write_partly+0xa0>)
 8014e58:	4814      	ldr	r0, [pc, #80]	; (8014eac <netconn_write_partly+0x9c>)
 8014e5a:	f00a fa10 	bl	801f27e <iprintf>
 8014e5e:	f06f 0305 	mvn.w	r3, #5
 8014e62:	e019      	b.n	8014e98 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014e64:	2201      	movs	r2, #1
  if (dontblock && !bytes_written) {
 8014e66:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 8014e6a:	b102      	cbz	r2, 8014e6e <netconn_write_partly+0x5e>
 8014e6c:	b1bd      	cbz	r5, 8014e9e <netconn_write_partly+0x8e>
  API_MSG_VAR_REF(msg).conn = conn;
 8014e6e:	9401      	str	r4, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8014e70:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8014e72:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8014e76:	9604      	str	r6, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8014e78:	a901      	add	r1, sp, #4
 8014e7a:	480e      	ldr	r0, [pc, #56]	; (8014eb4 <netconn_write_partly+0xa4>)
 8014e7c:	f7ff fdae 	bl	80149dc <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8014e80:	4603      	mov	r3, r0
 8014e82:	b948      	cbnz	r0, 8014e98 <netconn_write_partly+0x88>
 8014e84:	b145      	cbz	r5, 8014e98 <netconn_write_partly+0x88>
    if (dontblock) {
 8014e86:	b91f      	cbnz	r7, 8014e90 <netconn_write_partly+0x80>
      *bytes_written = size;
 8014e88:	602e      	str	r6, [r5, #0]
 8014e8a:	e005      	b.n	8014e98 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	e7ea      	b.n	8014e66 <netconn_write_partly+0x56>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8014e90:	9a04      	ldr	r2, [sp, #16]
 8014e92:	602a      	str	r2, [r5, #0]
 8014e94:	e000      	b.n	8014e98 <netconn_write_partly+0x88>
    return ERR_OK;
 8014e96:	2300      	movs	r3, #0
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	b007      	add	sp, #28
 8014e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8014e9e:	f06f 0305 	mvn.w	r3, #5
 8014ea2:	e7f9      	b.n	8014e98 <netconn_write_partly+0x88>
 8014ea4:	0801fdcc 	.word	0x0801fdcc
 8014ea8:	0801ff3c 	.word	0x0801ff3c
 8014eac:	0801fe1c 	.word	0x0801fe1c
 8014eb0:	0801ff58 	.word	0x0801ff58
 8014eb4:	08015cad 	.word	0x08015cad

08014eb8 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8014eb8:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8014eba:	2103      	movs	r1, #3
 8014ebc:	f7ff fd9a 	bl	80149f4 <netconn_close_shutdown>
}
 8014ec0:	bd08      	pop	{r3, pc}
	...

08014ec4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8014ec4:	b510      	push	{r4, lr}
 8014ec6:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8014ec8:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 8014eca:	4620      	mov	r0, r4
 8014ecc:	f003 ffc3 	bl	8018e56 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8014ed0:	4908      	ldr	r1, [pc, #32]	; (8014ef4 <setup_tcp+0x30>)
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f003 ffc2 	bl	8018e5c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8014ed8:	4907      	ldr	r1, [pc, #28]	; (8014ef8 <setup_tcp+0x34>)
 8014eda:	4620      	mov	r0, r4
 8014edc:	f003 ffd8 	bl	8018e90 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8014ee0:	2202      	movs	r2, #2
 8014ee2:	4906      	ldr	r1, [pc, #24]	; (8014efc <setup_tcp+0x38>)
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	f004 f80d 	bl	8018f04 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8014eea:	4905      	ldr	r1, [pc, #20]	; (8014f00 <setup_tcp+0x3c>)
 8014eec:	4620      	mov	r0, r4
 8014eee:	f003 ffe7 	bl	8018ec0 <tcp_err>
 8014ef2:	bd10      	pop	{r4, pc}
 8014ef4:	08015609 	.word	0x08015609
 8014ef8:	08015595 	.word	0x08015595
 8014efc:	08015511 	.word	0x08015511
 8014f00:	08014f5d 	.word	0x08014f5d

08014f04 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8014f04:	b538      	push	{r3, r4, r5, lr}
 8014f06:	4604      	mov	r4, r0
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8014f08:	6803      	ldr	r3, [r0, #0]
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	b133      	cbz	r3, 8014f1c <pcb_new+0x18>
 8014f0e:	4b10      	ldr	r3, [pc, #64]	; (8014f50 <pcb_new+0x4c>)
 8014f10:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8014f14:	490f      	ldr	r1, [pc, #60]	; (8014f54 <pcb_new+0x50>)
 8014f16:	4810      	ldr	r0, [pc, #64]	; (8014f58 <pcb_new+0x54>)
 8014f18:	f00a f9b1 	bl	801f27e <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8014f1c:	6825      	ldr	r5, [r4, #0]
 8014f1e:	782b      	ldrb	r3, [r5, #0]
 8014f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f24:	2b10      	cmp	r3, #16
 8014f26:	d002      	beq.n	8014f2e <pcb_new+0x2a>
    }
    break;
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8014f28:	23fa      	movs	r3, #250	; 0xfa
 8014f2a:	7123      	strb	r3, [r4, #4]
    return;
 8014f2c:	bd38      	pop	{r3, r4, r5, pc}
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8014f2e:	2000      	movs	r0, #0
 8014f30:	f004 fd5c 	bl	80199ec <tcp_new_ip_type>
 8014f34:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8014f36:	6820      	ldr	r0, [r4, #0]
 8014f38:	6843      	ldr	r3, [r0, #4]
 8014f3a:	b10b      	cbz	r3, 8014f40 <pcb_new+0x3c>
      setup_tcp(msg->conn);
 8014f3c:	f7ff ffc2 	bl	8014ec4 <setup_tcp>
  }
  if (msg->conn->pcb.ip == NULL) {
 8014f40:	6823      	ldr	r3, [r4, #0]
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	b103      	cbz	r3, 8014f48 <pcb_new+0x44>
 8014f46:	bd38      	pop	{r3, r4, r5, pc}
    msg->err = ERR_MEM;
 8014f48:	23ff      	movs	r3, #255	; 0xff
 8014f4a:	7123      	strb	r3, [r4, #4]
 8014f4c:	e7fb      	b.n	8014f46 <pcb_new+0x42>
 8014f4e:	bf00      	nop
 8014f50:	08020240 	.word	0x08020240
 8014f54:	08020274 	.word	0x08020274
 8014f58:	0801fe1c 	.word	0x0801fe1c

08014f5c <err_tcp>:
{
 8014f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f5e:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014f60:	4604      	mov	r4, r0
 8014f62:	2800      	cmp	r0, #0
 8014f64:	d038      	beq.n	8014fd8 <err_tcp+0x7c>
  conn->pcb.tcp = NULL;
 8014f66:	2300      	movs	r3, #0
 8014f68:	6063      	str	r3, [r4, #4]
  old_state = conn->state;
 8014f6a:	7865      	ldrb	r5, [r4, #1]
  conn->state = NETCONN_NONE;
 8014f6c:	7063      	strb	r3, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 8014f6e:	2d04      	cmp	r5, #4
 8014f70:	d03a      	beq.n	8014fe8 <err_tcp+0x8c>
    SYS_ARCH_SET(conn->last_err, err);
 8014f72:	f007 fc4d 	bl	801c810 <sys_arch_protect>
 8014f76:	7226      	strb	r6, [r4, #8]
 8014f78:	f007 fc56 	bl	801c828 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8014f7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014f7e:	b11b      	cbz	r3, 8014f88 <err_tcp+0x2c>
 8014f80:	2200      	movs	r2, #0
 8014f82:	2104      	movs	r1, #4
 8014f84:	4620      	mov	r0, r4
 8014f86:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014f88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014f8a:	b11b      	cbz	r3, 8014f94 <err_tcp+0x38>
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	4611      	mov	r1, r2
 8014f90:	4620      	mov	r0, r4
 8014f92:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014f94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014f96:	b11b      	cbz	r3, 8014fa0 <err_tcp+0x44>
 8014f98:	2200      	movs	r2, #0
 8014f9a:	2102      	movs	r1, #2
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 8014fa0:	f104 0710 	add.w	r7, r4, #16
 8014fa4:	4638      	mov	r0, r7
 8014fa6:	f007 fba1 	bl	801c6ec <sys_mbox_valid>
 8014faa:	bb68      	cbnz	r0, 8015008 <err_tcp+0xac>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8014fac:	f104 0714 	add.w	r7, r4, #20
 8014fb0:	4638      	mov	r0, r7
 8014fb2:	f007 fb9b 	bl	801c6ec <sys_mbox_valid>
 8014fb6:	bb60      	cbnz	r0, 8015012 <err_tcp+0xb6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8014fb8:	2d01      	cmp	r5, #1
 8014fba:	d02f      	beq.n	801501c <err_tcp+0xc0>
 8014fbc:	2d04      	cmp	r5, #4
 8014fbe:	d02d      	beq.n	801501c <err_tcp+0xc0>
 8014fc0:	2d03      	cmp	r5, #3
 8014fc2:	d02b      	beq.n	801501c <err_tcp+0xc0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8014fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fc6:	b133      	cbz	r3, 8014fd6 <err_tcp+0x7a>
 8014fc8:	4b2e      	ldr	r3, [pc, #184]	; (8015084 <err_tcp+0x128>)
 8014fca:	f240 12bd 	movw	r2, #445	; 0x1bd
 8014fce:	492e      	ldr	r1, [pc, #184]	; (8015088 <err_tcp+0x12c>)
 8014fd0:	482e      	ldr	r0, [pc, #184]	; (801508c <err_tcp+0x130>)
 8014fd2:	f00a f954 	bl	801f27e <iprintf>
 8014fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014fd8:	4b2a      	ldr	r3, [pc, #168]	; (8015084 <err_tcp+0x128>)
 8014fda:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014fde:	492c      	ldr	r1, [pc, #176]	; (8015090 <err_tcp+0x134>)
 8014fe0:	482a      	ldr	r0, [pc, #168]	; (801508c <err_tcp+0x130>)
 8014fe2:	f00a f94c 	bl	801f27e <iprintf>
 8014fe6:	e7be      	b.n	8014f66 <err_tcp+0xa>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8014fe8:	b164      	cbz	r4, 8015004 <err_tcp+0xa8>
 8014fea:	f007 fc11 	bl	801c810 <sys_arch_protect>
 8014fee:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8014ff2:	f113 0f0c 	cmn.w	r3, #12
 8014ff6:	db01      	blt.n	8014ffc <err_tcp+0xa0>
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	7223      	strb	r3, [r4, #8]
 8014ffc:	f007 fc14 	bl	801c828 <sys_arch_unprotect>
    err = ERR_OK;
 8015000:	2600      	movs	r6, #0
 8015002:	e7bb      	b.n	8014f7c <err_tcp+0x20>
 8015004:	2600      	movs	r6, #0
 8015006:	e7b9      	b.n	8014f7c <err_tcp+0x20>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8015008:	2100      	movs	r1, #0
 801500a:	4638      	mov	r0, r7
 801500c:	f007 fb25 	bl	801c65a <sys_mbox_trypost>
 8015010:	e7cc      	b.n	8014fac <err_tcp+0x50>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8015012:	2100      	movs	r1, #0
 8015014:	4638      	mov	r0, r7
 8015016:	f007 fb20 	bl	801c65a <sys_mbox_trypost>
 801501a:	e7cd      	b.n	8014fb8 <err_tcp+0x5c>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801501c:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 801501e:	f023 0204 	bic.w	r2, r3, #4
 8015022:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8015024:	f013 0f04 	tst.w	r3, #4
 8015028:	d1d5      	bne.n	8014fd6 <err_tcp+0x7a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801502a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801502c:	b1cb      	cbz	r3, 8015062 <err_tcp+0x106>
      conn->current_msg->err = err;
 801502e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015030:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015034:	681d      	ldr	r5, [r3, #0]
 8015036:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8015038:	4628      	mov	r0, r5
 801503a:	f007 fba1 	bl	801c780 <sys_sem_valid>
 801503e:	b1c0      	cbz	r0, 8015072 <err_tcp+0x116>
      conn->current_msg = NULL;
 8015040:	2300      	movs	r3, #0
 8015042:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8015044:	b14c      	cbz	r4, 801505a <err_tcp+0xfe>
 8015046:	f007 fbe3 	bl	801c810 <sys_arch_protect>
 801504a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801504e:	f113 0f0c 	cmn.w	r3, #12
 8015052:	db00      	blt.n	8015056 <err_tcp+0xfa>
 8015054:	7226      	strb	r6, [r4, #8]
 8015056:	f007 fbe7 	bl	801c828 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 801505a:	4628      	mov	r0, r5
 801505c:	f007 fb86 	bl	801c76c <sys_sem_signal>
 8015060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015062:	4b08      	ldr	r3, [pc, #32]	; (8015084 <err_tcp+0x128>)
 8015064:	f240 12b3 	movw	r2, #435	; 0x1b3
 8015068:	490a      	ldr	r1, [pc, #40]	; (8015094 <err_tcp+0x138>)
 801506a:	4808      	ldr	r0, [pc, #32]	; (801508c <err_tcp+0x130>)
 801506c:	f00a f907 	bl	801f27e <iprintf>
 8015070:	e7dd      	b.n	801502e <err_tcp+0xd2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8015072:	4b04      	ldr	r3, [pc, #16]	; (8015084 <err_tcp+0x128>)
 8015074:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015078:	4907      	ldr	r1, [pc, #28]	; (8015098 <err_tcp+0x13c>)
 801507a:	4804      	ldr	r0, [pc, #16]	; (801508c <err_tcp+0x130>)
 801507c:	f00a f8ff 	bl	801f27e <iprintf>
 8015080:	e7de      	b.n	8015040 <err_tcp+0xe4>
 8015082:	bf00      	nop
 8015084:	08020240 	.word	0x08020240
 8015088:	0801ffc4 	.word	0x0801ffc4
 801508c:	0801fe1c 	.word	0x0801fe1c
 8015090:	0801ff7c 	.word	0x0801ff7c
 8015094:	0801ff8c 	.word	0x0801ff8c
 8015098:	0801ffa8 	.word	0x0801ffa8

0801509c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801509c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150a0:	4688      	mov	r8, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80150a2:	4604      	mov	r4, r0
 80150a4:	b1f0      	cbz	r0, 80150e4 <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80150a6:	7863      	ldrb	r3, [r4, #1]
 80150a8:	2b01      	cmp	r3, #1
 80150aa:	d006      	beq.n	80150ba <lwip_netconn_do_writemore+0x1e>
 80150ac:	4b7b      	ldr	r3, [pc, #492]	; (801529c <lwip_netconn_do_writemore+0x200>)
 80150ae:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80150b2:	497b      	ldr	r1, [pc, #492]	; (80152a0 <lwip_netconn_do_writemore+0x204>)
 80150b4:	487b      	ldr	r0, [pc, #492]	; (80152a4 <lwip_netconn_do_writemore+0x208>)
 80150b6:	f00a f8e2 	bl	801f27e <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80150ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150bc:	b1d3      	cbz	r3, 80150f4 <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80150be:	6863      	ldr	r3, [r4, #4]
 80150c0:	b303      	cbz	r3, 8015104 <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80150c2:	6a22      	ldr	r2, [r4, #32]
 80150c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150c6:	68db      	ldr	r3, [r3, #12]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d223      	bcs.n	8015114 <lwip_netconn_do_writemore+0x78>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 80150cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80150ce:	f892 9010 	ldrb.w	r9, [r2, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80150d2:	7f23      	ldrb	r3, [r4, #28]
 80150d4:	f013 0f02 	tst.w	r3, #2
 80150d8:	d124      	bne.n	8015124 <lwip_netconn_do_writemore+0x88>
 80150da:	f019 0f04 	tst.w	r9, #4
 80150de:	d039      	beq.n	8015154 <lwip_netconn_do_writemore+0xb8>
 80150e0:	2601      	movs	r6, #1
 80150e2:	e020      	b.n	8015126 <lwip_netconn_do_writemore+0x8a>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 80150e4:	4b6d      	ldr	r3, [pc, #436]	; (801529c <lwip_netconn_do_writemore+0x200>)
 80150e6:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80150ea:	496f      	ldr	r1, [pc, #444]	; (80152a8 <lwip_netconn_do_writemore+0x20c>)
 80150ec:	486d      	ldr	r0, [pc, #436]	; (80152a4 <lwip_netconn_do_writemore+0x208>)
 80150ee:	f00a f8c6 	bl	801f27e <iprintf>
 80150f2:	e7d8      	b.n	80150a6 <lwip_netconn_do_writemore+0xa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80150f4:	4b69      	ldr	r3, [pc, #420]	; (801529c <lwip_netconn_do_writemore+0x200>)
 80150f6:	f240 52e5 	movw	r2, #1509	; 0x5e5
 80150fa:	496c      	ldr	r1, [pc, #432]	; (80152ac <lwip_netconn_do_writemore+0x210>)
 80150fc:	4869      	ldr	r0, [pc, #420]	; (80152a4 <lwip_netconn_do_writemore+0x208>)
 80150fe:	f00a f8be 	bl	801f27e <iprintf>
 8015102:	e7dc      	b.n	80150be <lwip_netconn_do_writemore+0x22>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8015104:	4b65      	ldr	r3, [pc, #404]	; (801529c <lwip_netconn_do_writemore+0x200>)
 8015106:	f240 52e6 	movw	r2, #1510	; 0x5e6
 801510a:	4969      	ldr	r1, [pc, #420]	; (80152b0 <lwip_netconn_do_writemore+0x214>)
 801510c:	4865      	ldr	r0, [pc, #404]	; (80152a4 <lwip_netconn_do_writemore+0x208>)
 801510e:	f00a f8b6 	bl	801f27e <iprintf>
 8015112:	e7d6      	b.n	80150c2 <lwip_netconn_do_writemore+0x26>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8015114:	4b61      	ldr	r3, [pc, #388]	; (801529c <lwip_netconn_do_writemore+0x200>)
 8015116:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 801511a:	4966      	ldr	r1, [pc, #408]	; (80152b4 <lwip_netconn_do_writemore+0x218>)
 801511c:	4861      	ldr	r0, [pc, #388]	; (80152a4 <lwip_netconn_do_writemore+0x208>)
 801511e:	f00a f8ae 	bl	801f27e <iprintf>
 8015122:	e7d3      	b.n	80150cc <lwip_netconn_do_writemore+0x30>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015124:	2601      	movs	r6, #1
 8015126:	b2f6      	uxtb	r6, r6
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8015128:	6897      	ldr	r7, [r2, #8]
 801512a:	6a23      	ldr	r3, [r4, #32]
 801512c:	441f      	add	r7, r3
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 801512e:	68d2      	ldr	r2, [r2, #12]
 8015130:	1ad5      	subs	r5, r2, r3
    if (diff > 0xffffUL) { /* max_u16_t */
 8015132:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8015136:	d30f      	bcc.n	8015158 <lwip_netconn_do_writemore+0xbc>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 8015138:	f049 0902 	orr.w	r9, r9, #2
      len = 0xffff;
 801513c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8015140:	6861      	ldr	r1, [r4, #4]
 8015142:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
    if (available < len) {
 8015146:	428d      	cmp	r5, r1
 8015148:	d90b      	bls.n	8015162 <lwip_netconn_do_writemore+0xc6>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 801514a:	b13e      	cbz	r6, 801515c <lwip_netconn_do_writemore+0xc0>
        if (!len) {
 801514c:	2900      	cmp	r1, #0
 801514e:	d039      	beq.n	80151c4 <lwip_netconn_do_writemore+0x128>
      len = available;
 8015150:	460d      	mov	r5, r1
 8015152:	e006      	b.n	8015162 <lwip_netconn_do_writemore+0xc6>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015154:	2600      	movs	r6, #0
 8015156:	e7e6      	b.n	8015126 <lwip_netconn_do_writemore+0x8a>
      len = (u16_t)diff;
 8015158:	b2ad      	uxth	r5, r5
 801515a:	e7f1      	b.n	8015140 <lwip_netconn_do_writemore+0xa4>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 801515c:	f049 0902 	orr.w	r9, r9, #2
      len = available;
 8015160:	460d      	mov	r5, r1
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8015162:	442b      	add	r3, r5
 8015164:	429a      	cmp	r2, r3
 8015166:	d325      	bcc.n	80151b4 <lwip_netconn_do_writemore+0x118>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8015168:	464b      	mov	r3, r9
 801516a:	462a      	mov	r2, r5
 801516c:	4639      	mov	r1, r7
 801516e:	6860      	ldr	r0, [r4, #4]
 8015170:	f006 fa28 	bl	801b5c4 <tcp_write>
 8015174:	4607      	mov	r7, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8015176:	1c43      	adds	r3, r0, #1
 8015178:	b2db      	uxtb	r3, r3
 801517a:	2b01      	cmp	r3, #1
 801517c:	d925      	bls.n	80151ca <lwip_netconn_do_writemore+0x12e>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 801517e:	2f00      	cmp	r7, #0
 8015180:	d146      	bne.n	8015210 <lwip_netconn_do_writemore+0x174>
      err_t out_err;
      conn->write_offset += len;
 8015182:	6a23      	ldr	r3, [r4, #32]
 8015184:	441d      	add	r5, r3
 8015186:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8015188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801518a:	68da      	ldr	r2, [r3, #12]
 801518c:	4295      	cmp	r5, r2
 801518e:	d000      	beq.n	8015192 <lwip_netconn_do_writemore+0xf6>
 8015190:	b10e      	cbz	r6, 8015196 <lwip_netconn_do_writemore+0xfa>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8015192:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8015194:	2601      	movs	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8015196:	6860      	ldr	r0, [r4, #4]
 8015198:	f006 fdc2 	bl	801bd20 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 801519c:	f110 0f0c 	cmn.w	r0, #12
 80151a0:	db02      	blt.n	80151a8 <lwip_netconn_do_writemore+0x10c>
 80151a2:	f110 0f04 	cmn.w	r0, #4
 80151a6:	d13a      	bne.n	801521e <lwip_netconn_do_writemore+0x182>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 80151a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151aa:	2200      	movs	r2, #0
 80151ac:	60da      	str	r2, [r3, #12]
        err = out_err;
 80151ae:	4607      	mov	r7, r0
        write_finished = 1;
 80151b0:	2601      	movs	r6, #1
 80151b2:	e034      	b.n	801521e <lwip_netconn_do_writemore+0x182>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80151b4:	4b39      	ldr	r3, [pc, #228]	; (801529c <lwip_netconn_do_writemore+0x200>)
 80151b6:	f240 6213 	movw	r2, #1555	; 0x613
 80151ba:	493f      	ldr	r1, [pc, #252]	; (80152b8 <lwip_netconn_do_writemore+0x21c>)
 80151bc:	4839      	ldr	r0, [pc, #228]	; (80152a4 <lwip_netconn_do_writemore+0x208>)
 80151be:	f00a f85e 	bl	801f27e <iprintf>
 80151c2:	e7d1      	b.n	8015168 <lwip_netconn_do_writemore+0xcc>
      len = available;
 80151c4:	460d      	mov	r5, r1
          err = ERR_WOULDBLOCK;
 80151c6:	f06f 0706 	mvn.w	r7, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 80151ca:	b176      	cbz	r6, 80151ea <lwip_netconn_do_writemore+0x14e>
 80151cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151ce:	68db      	ldr	r3, [r3, #12]
 80151d0:	429d      	cmp	r5, r3
 80151d2:	d20a      	bcs.n	80151ea <lwip_netconn_do_writemore+0x14e>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80151d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80151d6:	b11b      	cbz	r3, 80151e0 <lwip_netconn_do_writemore+0x144>
 80151d8:	462a      	mov	r2, r5
 80151da:	2103      	movs	r1, #3
 80151dc:	4620      	mov	r0, r4
 80151de:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80151e0:	7f23      	ldrb	r3, [r4, #28]
 80151e2:	f043 0310 	orr.w	r3, r3, #16
 80151e6:	7723      	strb	r3, [r4, #28]
 80151e8:	e7c9      	b.n	801517e <lwip_netconn_do_writemore+0xe2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80151ea:	6863      	ldr	r3, [r4, #4]
 80151ec:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 80151f0:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80151f4:	4291      	cmp	r1, r2
 80151f6:	d903      	bls.n	8015200 <lwip_netconn_do_writemore+0x164>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80151f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80151fc:	2b04      	cmp	r3, #4
 80151fe:	d9be      	bls.n	801517e <lwip_netconn_do_writemore+0xe2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8015200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015202:	2b00      	cmp	r3, #0
 8015204:	d0bb      	beq.n	801517e <lwip_netconn_do_writemore+0xe2>
 8015206:	462a      	mov	r2, r5
 8015208:	2103      	movs	r1, #3
 801520a:	4620      	mov	r0, r4
 801520c:	4798      	blx	r3
 801520e:	e7b6      	b.n	801517e <lwip_netconn_do_writemore+0xe2>
      }
    } else if (err == ERR_MEM) {
 8015210:	f1b7 3fff 	cmp.w	r7, #4294967295
 8015214:	d01f      	beq.n	8015256 <lwip_netconn_do_writemore+0x1ba>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 8015216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015218:	2200      	movs	r2, #0
 801521a:	60da      	str	r2, [r3, #12]
      write_finished = 1;
 801521c:	2601      	movs	r6, #1
    }
  }
  if (write_finished) {
 801521e:	2e00      	cmp	r6, #0
 8015220:	d037      	beq.n	8015292 <lwip_netconn_do_writemore+0x1f6>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015224:	6818      	ldr	r0, [r3, #0]
 8015226:	f100 050c 	add.w	r5, r0, #12
    conn->current_msg->err = err;
 801522a:	711f      	strb	r7, [r3, #4]
    conn->current_msg = NULL;
 801522c:	2300      	movs	r3, #0
 801522e:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 8015230:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8015232:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8015234:	b14c      	cbz	r4, 801524a <lwip_netconn_do_writemore+0x1ae>
 8015236:	f007 faeb 	bl	801c810 <sys_arch_protect>
 801523a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801523e:	f113 0f0c 	cmn.w	r3, #12
 8015242:	db00      	blt.n	8015246 <lwip_netconn_do_writemore+0x1aa>
 8015244:	7227      	strb	r7, [r4, #8]
 8015246:	f007 faef 	bl	801c828 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801524a:	f1b8 0f00 	cmp.w	r8, #0
 801524e:	d11a      	bne.n	8015286 <lwip_netconn_do_writemore+0x1ea>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8015250:	2000      	movs	r0, #0
}
 8015252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      err_t out_err = tcp_output(conn->pcb.tcp);
 8015256:	6860      	ldr	r0, [r4, #4]
 8015258:	f006 fd62 	bl	801bd20 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 801525c:	f110 0f0c 	cmn.w	r0, #12
 8015260:	db0b      	blt.n	801527a <lwip_netconn_do_writemore+0x1de>
 8015262:	f110 0f04 	cmn.w	r0, #4
 8015266:	d008      	beq.n	801527a <lwip_netconn_do_writemore+0x1de>
      } else if (dontblock) {
 8015268:	2e00      	cmp	r6, #0
 801526a:	d0d8      	beq.n	801521e <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 801526c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801526e:	2200      	movs	r2, #0
 8015270:	60da      	str	r2, [r3, #12]
        write_finished = 1;
 8015272:	2601      	movs	r6, #1
        err = ERR_WOULDBLOCK;
 8015274:	f06f 0706 	mvn.w	r7, #6
 8015278:	e7d1      	b.n	801521e <lwip_netconn_do_writemore+0x182>
        conn->current_msg->msg.w.len = 0;
 801527a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801527c:	2200      	movs	r2, #0
 801527e:	60da      	str	r2, [r3, #12]
        err = out_err;
 8015280:	4607      	mov	r7, r0
        write_finished = 1;
 8015282:	2601      	movs	r6, #1
        conn->current_msg->msg.w.len = 0;
 8015284:	e7cb      	b.n	801521e <lwip_netconn_do_writemore+0x182>
      sys_sem_signal(op_completed_sem);
 8015286:	4628      	mov	r0, r5
 8015288:	f007 fa70 	bl	801c76c <sys_sem_signal>
  return ERR_OK;
 801528c:	2000      	movs	r0, #0
 801528e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 8015292:	f04f 30ff 	mov.w	r0, #4294967295
 8015296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801529a:	bf00      	nop
 801529c:	08020240 	.word	0x08020240
 80152a0:	080200d8 	.word	0x080200d8
 80152a4:	0801fe1c 	.word	0x0801fe1c
 80152a8:	0801ff7c 	.word	0x0801ff7c
 80152ac:	0801ff8c 	.word	0x0801ff8c
 80152b0:	080200f8 	.word	0x080200f8
 80152b4:	08020110 	.word	0x08020110
 80152b8:	08020144 	.word	0x08020144

080152bc <lwip_netconn_do_close_internal>:
{
 80152bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152c0:	4688      	mov	r8, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80152c2:	4604      	mov	r4, r0
 80152c4:	2800      	cmp	r0, #0
 80152c6:	d035      	beq.n	8015334 <lwip_netconn_do_close_internal+0x78>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80152c8:	7823      	ldrb	r3, [r4, #0]
 80152ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152ce:	2b10      	cmp	r3, #16
 80152d0:	d006      	beq.n	80152e0 <lwip_netconn_do_close_internal+0x24>
 80152d2:	4b83      	ldr	r3, [pc, #524]	; (80154e0 <lwip_netconn_do_close_internal+0x224>)
 80152d4:	f44f 7251 	mov.w	r2, #836	; 0x344
 80152d8:	4982      	ldr	r1, [pc, #520]	; (80154e4 <lwip_netconn_do_close_internal+0x228>)
 80152da:	4883      	ldr	r0, [pc, #524]	; (80154e8 <lwip_netconn_do_close_internal+0x22c>)
 80152dc:	f009 ffcf 	bl	801f27e <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80152e0:	7863      	ldrb	r3, [r4, #1]
 80152e2:	2b04      	cmp	r3, #4
 80152e4:	d006      	beq.n	80152f4 <lwip_netconn_do_close_internal+0x38>
 80152e6:	4b7e      	ldr	r3, [pc, #504]	; (80154e0 <lwip_netconn_do_close_internal+0x224>)
 80152e8:	f240 3245 	movw	r2, #837	; 0x345
 80152ec:	497f      	ldr	r1, [pc, #508]	; (80154ec <lwip_netconn_do_close_internal+0x230>)
 80152ee:	487e      	ldr	r0, [pc, #504]	; (80154e8 <lwip_netconn_do_close_internal+0x22c>)
 80152f0:	f009 ffc5 	bl	801f27e <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80152f4:	6863      	ldr	r3, [r4, #4]
 80152f6:	b32b      	cbz	r3, 8015344 <lwip_netconn_do_close_internal+0x88>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80152f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152fa:	b35b      	cbz	r3, 8015354 <lwip_netconn_do_close_internal+0x98>
  tpcb = conn->pcb.tcp;
 80152fc:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80152fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015300:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 8015302:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8015306:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 801530a:	2b03      	cmp	r3, #3
 801530c:	d02a      	beq.n	8015364 <lwip_netconn_do_close_internal+0xa8>
  } else if (shut_rx &&
 801530e:	f1ba 0f00 	cmp.w	sl, #0
 8015312:	d006      	beq.n	8015322 <lwip_netconn_do_close_internal+0x66>
             ((tpcb->state == FIN_WAIT_1) ||
 8015314:	7d2a      	ldrb	r2, [r5, #20]
 8015316:	1f53      	subs	r3, r2, #5
 8015318:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 801531a:	2b01      	cmp	r3, #1
 801531c:	d93a      	bls.n	8015394 <lwip_netconn_do_close_internal+0xd8>
              (tpcb->state == FIN_WAIT_2) ||
 801531e:	2a08      	cmp	r2, #8
 8015320:	d03a      	beq.n	8015398 <lwip_netconn_do_close_internal+0xdc>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8015322:	f1b9 0f00 	cmp.w	r9, #0
 8015326:	d039      	beq.n	801539c <lwip_netconn_do_close_internal+0xe0>
 8015328:	7eab      	ldrb	r3, [r5, #26]
 801532a:	f013 0f10 	tst.w	r3, #16
 801532e:	d137      	bne.n	80153a0 <lwip_netconn_do_close_internal+0xe4>
    close = 0;
 8015330:	2700      	movs	r7, #0
 8015332:	e018      	b.n	8015366 <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8015334:	4b6a      	ldr	r3, [pc, #424]	; (80154e0 <lwip_netconn_do_close_internal+0x224>)
 8015336:	f240 3243 	movw	r2, #835	; 0x343
 801533a:	496d      	ldr	r1, [pc, #436]	; (80154f0 <lwip_netconn_do_close_internal+0x234>)
 801533c:	486a      	ldr	r0, [pc, #424]	; (80154e8 <lwip_netconn_do_close_internal+0x22c>)
 801533e:	f009 ff9e 	bl	801f27e <iprintf>
 8015342:	e7c1      	b.n	80152c8 <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8015344:	4b66      	ldr	r3, [pc, #408]	; (80154e0 <lwip_netconn_do_close_internal+0x224>)
 8015346:	f240 3246 	movw	r2, #838	; 0x346
 801534a:	496a      	ldr	r1, [pc, #424]	; (80154f4 <lwip_netconn_do_close_internal+0x238>)
 801534c:	4866      	ldr	r0, [pc, #408]	; (80154e8 <lwip_netconn_do_close_internal+0x22c>)
 801534e:	f009 ff96 	bl	801f27e <iprintf>
 8015352:	e7d1      	b.n	80152f8 <lwip_netconn_do_close_internal+0x3c>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015354:	4b62      	ldr	r3, [pc, #392]	; (80154e0 <lwip_netconn_do_close_internal+0x224>)
 8015356:	f240 3247 	movw	r2, #839	; 0x347
 801535a:	4967      	ldr	r1, [pc, #412]	; (80154f8 <lwip_netconn_do_close_internal+0x23c>)
 801535c:	4862      	ldr	r0, [pc, #392]	; (80154e8 <lwip_netconn_do_close_internal+0x22c>)
 801535e:	f009 ff8e 	bl	801f27e <iprintf>
 8015362:	e7cb      	b.n	80152fc <lwip_netconn_do_close_internal+0x40>
    close = 1;
 8015364:	2701      	movs	r7, #1
  if (close) {
 8015366:	b9ef      	cbnz	r7, 80153a4 <lwip_netconn_do_close_internal+0xe8>
  if (tpcb->state == LISTEN) {
 8015368:	7d2b      	ldrb	r3, [r5, #20]
 801536a:	2b01      	cmp	r3, #1
 801536c:	d01f      	beq.n	80153ae <lwip_netconn_do_close_internal+0xf2>
    if (shut_rx) {
 801536e:	f1ba 0f00 	cmp.w	sl, #0
 8015372:	d121      	bne.n	80153b8 <lwip_netconn_do_close_internal+0xfc>
    if (shut_tx) {
 8015374:	f1b9 0f00 	cmp.w	r9, #0
 8015378:	d127      	bne.n	80153ca <lwip_netconn_do_close_internal+0x10e>
    if (close) {
 801537a:	bb5f      	cbnz	r7, 80153d4 <lwip_netconn_do_close_internal+0x118>
  if (close) {
 801537c:	b3a7      	cbz	r7, 80153e8 <lwip_netconn_do_close_internal+0x12c>
      err = tcp_close(tpcb);
 801537e:	4628      	mov	r0, r5
 8015380:	f004 f8fc 	bl	801957c <tcp_close>
 8015384:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8015386:	2e00      	cmp	r6, #0
 8015388:	d042      	beq.n	8015410 <lwip_netconn_do_close_internal+0x154>
    if (err == ERR_MEM) {
 801538a:	f1b6 3fff 	cmp.w	r6, #4294967295
 801538e:	d032      	beq.n	80153f6 <lwip_netconn_do_close_internal+0x13a>
      close_finished = 1;
 8015390:	2301      	movs	r3, #1
 8015392:	e03e      	b.n	8015412 <lwip_netconn_do_close_internal+0x156>
    close = 1;
 8015394:	2701      	movs	r7, #1
 8015396:	e7e6      	b.n	8015366 <lwip_netconn_do_close_internal+0xaa>
 8015398:	2701      	movs	r7, #1
 801539a:	e7e4      	b.n	8015366 <lwip_netconn_do_close_internal+0xaa>
    close = 0;
 801539c:	2700      	movs	r7, #0
 801539e:	e7e2      	b.n	8015366 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 80153a0:	2701      	movs	r7, #1
 80153a2:	e7e0      	b.n	8015366 <lwip_netconn_do_close_internal+0xaa>
    tcp_arg(tpcb, NULL);
 80153a4:	2100      	movs	r1, #0
 80153a6:	4628      	mov	r0, r5
 80153a8:	f003 fd55 	bl	8018e56 <tcp_arg>
 80153ac:	e7dc      	b.n	8015368 <lwip_netconn_do_close_internal+0xac>
    tcp_accept(tpcb, NULL);
 80153ae:	2100      	movs	r1, #0
 80153b0:	4628      	mov	r0, r5
 80153b2:	f003 fd9f 	bl	8018ef4 <tcp_accept>
 80153b6:	e7e1      	b.n	801537c <lwip_netconn_do_close_internal+0xc0>
      tcp_recv(tpcb, NULL);
 80153b8:	2100      	movs	r1, #0
 80153ba:	4628      	mov	r0, r5
 80153bc:	f003 fd4e 	bl	8018e5c <tcp_recv>
      tcp_accept(tpcb, NULL);
 80153c0:	2100      	movs	r1, #0
 80153c2:	4628      	mov	r0, r5
 80153c4:	f003 fd96 	bl	8018ef4 <tcp_accept>
 80153c8:	e7d4      	b.n	8015374 <lwip_netconn_do_close_internal+0xb8>
      tcp_sent(tpcb, NULL);
 80153ca:	2100      	movs	r1, #0
 80153cc:	4628      	mov	r0, r5
 80153ce:	f003 fd5f 	bl	8018e90 <tcp_sent>
 80153d2:	e7d2      	b.n	801537a <lwip_netconn_do_close_internal+0xbe>
      tcp_poll(tpcb, NULL, 0);
 80153d4:	2200      	movs	r2, #0
 80153d6:	4611      	mov	r1, r2
 80153d8:	4628      	mov	r0, r5
 80153da:	f003 fd93 	bl	8018f04 <tcp_poll>
      tcp_err(tpcb, NULL);
 80153de:	2100      	movs	r1, #0
 80153e0:	4628      	mov	r0, r5
 80153e2:	f003 fd6d 	bl	8018ec0 <tcp_err>
 80153e6:	e7c9      	b.n	801537c <lwip_netconn_do_close_internal+0xc0>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80153e8:	464a      	mov	r2, r9
 80153ea:	4651      	mov	r1, sl
 80153ec:	4628      	mov	r0, r5
 80153ee:	f004 f96d 	bl	80196cc <tcp_shutdown>
 80153f2:	4606      	mov	r6, r0
 80153f4:	e7c7      	b.n	8015386 <lwip_netconn_do_close_internal+0xca>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80153f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153f8:	7a5b      	ldrb	r3, [r3, #9]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d13f      	bne.n	801547e <lwip_netconn_do_close_internal+0x1c2>
        if (close) {
 80153fe:	b90f      	cbnz	r7, 8015404 <lwip_netconn_do_close_internal+0x148>
        close_finished = 1;
 8015400:	2301      	movs	r3, #1
 8015402:	e006      	b.n	8015412 <lwip_netconn_do_close_internal+0x156>
          tcp_abort(tpcb);
 8015404:	4628      	mov	r0, r5
 8015406:	f004 fa09 	bl	801981c <tcp_abort>
        close_finished = 1;
 801540a:	463b      	mov	r3, r7
          err = ERR_OK;
 801540c:	2600      	movs	r6, #0
 801540e:	e000      	b.n	8015412 <lwip_netconn_do_close_internal+0x156>
    close_finished = 1;
 8015410:	2301      	movs	r3, #1
  if (close_finished) {
 8015412:	2b00      	cmp	r3, #0
 8015414:	d03a      	beq.n	801548c <lwip_netconn_do_close_internal+0x1d0>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015418:	681d      	ldr	r5, [r3, #0]
 801541a:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 801541c:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 801541e:	2300      	movs	r3, #0
 8015420:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8015422:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8015424:	b9ce      	cbnz	r6, 801545a <lwip_netconn_do_close_internal+0x19e>
      if (close) {
 8015426:	b137      	cbz	r7, 8015436 <lwip_netconn_do_close_internal+0x17a>
        conn->pcb.tcp = NULL;
 8015428:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801542a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801542c:	b11b      	cbz	r3, 8015436 <lwip_netconn_do_close_internal+0x17a>
 801542e:	2200      	movs	r2, #0
 8015430:	2104      	movs	r1, #4
 8015432:	4620      	mov	r0, r4
 8015434:	4798      	blx	r3
      if (shut_rx) {
 8015436:	f1ba 0f00 	cmp.w	sl, #0
 801543a:	d005      	beq.n	8015448 <lwip_netconn_do_close_internal+0x18c>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801543c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801543e:	b11b      	cbz	r3, 8015448 <lwip_netconn_do_close_internal+0x18c>
 8015440:	2200      	movs	r2, #0
 8015442:	4611      	mov	r1, r2
 8015444:	4620      	mov	r0, r4
 8015446:	4798      	blx	r3
      if (shut_tx) {
 8015448:	f1b9 0f00 	cmp.w	r9, #0
 801544c:	d005      	beq.n	801545a <lwip_netconn_do_close_internal+0x19e>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801544e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015450:	b11b      	cbz	r3, 801545a <lwip_netconn_do_close_internal+0x19e>
 8015452:	2200      	movs	r2, #0
 8015454:	2102      	movs	r1, #2
 8015456:	4620      	mov	r0, r4
 8015458:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 801545a:	b14c      	cbz	r4, 8015470 <lwip_netconn_do_close_internal+0x1b4>
 801545c:	f007 f9d8 	bl	801c810 <sys_arch_protect>
 8015460:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8015464:	f113 0f0c 	cmn.w	r3, #12
 8015468:	db00      	blt.n	801546c <lwip_netconn_do_close_internal+0x1b0>
 801546a:	7226      	strb	r6, [r4, #8]
 801546c:	f007 f9dc 	bl	801c828 <sys_arch_unprotect>
    if (delayed)
 8015470:	f1b8 0f00 	cmp.w	r8, #0
 8015474:	d105      	bne.n	8015482 <lwip_netconn_do_close_internal+0x1c6>
    return ERR_OK;
 8015476:	2600      	movs	r6, #0
}
 8015478:	4630      	mov	r0, r6
 801547a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t close_finished = 0;
 801547e:	2300      	movs	r3, #0
 8015480:	e7c7      	b.n	8015412 <lwip_netconn_do_close_internal+0x156>
      sys_sem_signal(op_completed_sem);
 8015482:	4628      	mov	r0, r5
 8015484:	f007 f972 	bl	801c76c <sys_sem_signal>
    return ERR_OK;
 8015488:	2600      	movs	r6, #0
 801548a:	e7f5      	b.n	8015478 <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801548c:	7d2b      	ldrb	r3, [r5, #20]
 801548e:	2b01      	cmp	r3, #1
 8015490:	d019      	beq.n	80154c6 <lwip_netconn_do_close_internal+0x20a>
    if (shut_tx) {
 8015492:	f1b9 0f00 	cmp.w	r9, #0
 8015496:	d11e      	bne.n	80154d6 <lwip_netconn_do_close_internal+0x21a>
    tcp_poll(tpcb, poll_tcp, 1);
 8015498:	2201      	movs	r2, #1
 801549a:	4918      	ldr	r1, [pc, #96]	; (80154fc <lwip_netconn_do_close_internal+0x240>)
 801549c:	4628      	mov	r0, r5
 801549e:	f003 fd31 	bl	8018f04 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80154a2:	4917      	ldr	r1, [pc, #92]	; (8015500 <lwip_netconn_do_close_internal+0x244>)
 80154a4:	4628      	mov	r0, r5
 80154a6:	f003 fd0b 	bl	8018ec0 <tcp_err>
    tcp_arg(tpcb, conn);
 80154aa:	4621      	mov	r1, r4
 80154ac:	4628      	mov	r0, r5
 80154ae:	f003 fcd2 	bl	8018e56 <tcp_arg>
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80154b2:	2e00      	cmp	r6, #0
 80154b4:	d1e0      	bne.n	8015478 <lwip_netconn_do_close_internal+0x1bc>
 80154b6:	4b0a      	ldr	r3, [pc, #40]	; (80154e0 <lwip_netconn_do_close_internal+0x224>)
 80154b8:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80154bc:	4911      	ldr	r1, [pc, #68]	; (8015504 <lwip_netconn_do_close_internal+0x248>)
 80154be:	480a      	ldr	r0, [pc, #40]	; (80154e8 <lwip_netconn_do_close_internal+0x22c>)
 80154c0:	f009 fedd 	bl	801f27e <iprintf>
 80154c4:	e7d8      	b.n	8015478 <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80154c6:	4b06      	ldr	r3, [pc, #24]	; (80154e0 <lwip_netconn_do_close_internal+0x224>)
 80154c8:	f240 32e3 	movw	r2, #995	; 0x3e3
 80154cc:	490e      	ldr	r1, [pc, #56]	; (8015508 <lwip_netconn_do_close_internal+0x24c>)
 80154ce:	4806      	ldr	r0, [pc, #24]	; (80154e8 <lwip_netconn_do_close_internal+0x22c>)
 80154d0:	f009 fed5 	bl	801f27e <iprintf>
 80154d4:	e7dd      	b.n	8015492 <lwip_netconn_do_close_internal+0x1d6>
      tcp_sent(tpcb, sent_tcp);
 80154d6:	490d      	ldr	r1, [pc, #52]	; (801550c <lwip_netconn_do_close_internal+0x250>)
 80154d8:	4628      	mov	r0, r5
 80154da:	f003 fcd9 	bl	8018e90 <tcp_sent>
 80154de:	e7db      	b.n	8015498 <lwip_netconn_do_close_internal+0x1dc>
 80154e0:	08020240 	.word	0x08020240
 80154e4:	0801ffe0 	.word	0x0801ffe0
 80154e8:	0801fe1c 	.word	0x0801fe1c
 80154ec:	08020000 	.word	0x08020000
 80154f0:	0801fe54 	.word	0x0801fe54
 80154f4:	08020024 	.word	0x08020024
 80154f8:	0801ff8c 	.word	0x0801ff8c
 80154fc:	08015511 	.word	0x08015511
 8015500:	08014f5d 	.word	0x08014f5d
 8015504:	0802005c 	.word	0x0802005c
 8015508:	08020038 	.word	0x08020038
 801550c:	08015595 	.word	0x08015595

08015510 <poll_tcp>:
{
 8015510:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015512:	4604      	mov	r4, r0
 8015514:	b1f8      	cbz	r0, 8015556 <poll_tcp+0x46>
  if (conn->state == NETCONN_WRITE) {
 8015516:	7863      	ldrb	r3, [r4, #1]
 8015518:	2b01      	cmp	r3, #1
 801551a:	d024      	beq.n	8015566 <poll_tcp+0x56>
  } else if (conn->state == NETCONN_CLOSE) {
 801551c:	2b04      	cmp	r3, #4
 801551e:	d027      	beq.n	8015570 <poll_tcp+0x60>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8015520:	7f23      	ldrb	r3, [r4, #28]
 8015522:	f013 0f10 	tst.w	r3, #16
 8015526:	d014      	beq.n	8015552 <poll_tcp+0x42>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015528:	6862      	ldr	r2, [r4, #4]
 801552a:	b192      	cbz	r2, 8015552 <poll_tcp+0x42>
 801552c:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
 8015530:	f240 51a1 	movw	r1, #1441	; 0x5a1
 8015534:	4288      	cmp	r0, r1
 8015536:	d90c      	bls.n	8015552 <poll_tcp+0x42>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8015538:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801553c:	2a04      	cmp	r2, #4
 801553e:	d808      	bhi.n	8015552 <poll_tcp+0x42>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8015540:	f023 0310 	bic.w	r3, r3, #16
 8015544:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015548:	b11b      	cbz	r3, 8015552 <poll_tcp+0x42>
 801554a:	2200      	movs	r2, #0
 801554c:	2102      	movs	r1, #2
 801554e:	4620      	mov	r0, r4
 8015550:	4798      	blx	r3
}
 8015552:	2000      	movs	r0, #0
 8015554:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015556:	4b0c      	ldr	r3, [pc, #48]	; (8015588 <poll_tcp+0x78>)
 8015558:	f44f 729c 	mov.w	r2, #312	; 0x138
 801555c:	490b      	ldr	r1, [pc, #44]	; (801558c <poll_tcp+0x7c>)
 801555e:	480c      	ldr	r0, [pc, #48]	; (8015590 <poll_tcp+0x80>)
 8015560:	f009 fe8d 	bl	801f27e <iprintf>
 8015564:	e7d7      	b.n	8015516 <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015566:	2101      	movs	r1, #1
 8015568:	4620      	mov	r0, r4
 801556a:	f7ff fd97 	bl	801509c <lwip_netconn_do_writemore>
 801556e:	e7d7      	b.n	8015520 <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8015570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015572:	b11b      	cbz	r3, 801557c <poll_tcp+0x6c>
 8015574:	7a5a      	ldrb	r2, [r3, #9]
 8015576:	b10a      	cbz	r2, 801557c <poll_tcp+0x6c>
      conn->current_msg->msg.sd.polls_left--;
 8015578:	3a01      	subs	r2, #1
 801557a:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801557c:	2101      	movs	r1, #1
 801557e:	4620      	mov	r0, r4
 8015580:	f7ff fe9c 	bl	80152bc <lwip_netconn_do_close_internal>
 8015584:	e7cc      	b.n	8015520 <poll_tcp+0x10>
 8015586:	bf00      	nop
 8015588:	08020240 	.word	0x08020240
 801558c:	0801ff7c 	.word	0x0801ff7c
 8015590:	0801fe1c 	.word	0x0801fe1c

08015594 <sent_tcp>:
{
 8015594:	b538      	push	{r3, r4, r5, lr}
 8015596:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015598:	4604      	mov	r4, r0
 801559a:	b1e8      	cbz	r0, 80155d8 <sent_tcp+0x44>
  if (conn) {
 801559c:	b1d4      	cbz	r4, 80155d4 <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 801559e:	7863      	ldrb	r3, [r4, #1]
 80155a0:	2b01      	cmp	r3, #1
 80155a2:	d021      	beq.n	80155e8 <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 80155a4:	2b04      	cmp	r3, #4
 80155a6:	d024      	beq.n	80155f2 <sent_tcp+0x5e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80155a8:	6863      	ldr	r3, [r4, #4]
 80155aa:	b19b      	cbz	r3, 80155d4 <sent_tcp+0x40>
 80155ac:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
 80155b0:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80155b4:	4291      	cmp	r1, r2
 80155b6:	d90d      	bls.n	80155d4 <sent_tcp+0x40>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80155b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80155bc:	2b04      	cmp	r3, #4
 80155be:	d809      	bhi.n	80155d4 <sent_tcp+0x40>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80155c0:	7f23      	ldrb	r3, [r4, #28]
 80155c2:	f023 0310 	bic.w	r3, r3, #16
 80155c6:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80155c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80155ca:	b11b      	cbz	r3, 80155d4 <sent_tcp+0x40>
 80155cc:	462a      	mov	r2, r5
 80155ce:	2102      	movs	r1, #2
 80155d0:	4620      	mov	r0, r4
 80155d2:	4798      	blx	r3
}
 80155d4:	2000      	movs	r0, #0
 80155d6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80155d8:	4b08      	ldr	r3, [pc, #32]	; (80155fc <sent_tcp+0x68>)
 80155da:	f240 1261 	movw	r2, #353	; 0x161
 80155de:	4908      	ldr	r1, [pc, #32]	; (8015600 <sent_tcp+0x6c>)
 80155e0:	4808      	ldr	r0, [pc, #32]	; (8015604 <sent_tcp+0x70>)
 80155e2:	f009 fe4c 	bl	801f27e <iprintf>
 80155e6:	e7d9      	b.n	801559c <sent_tcp+0x8>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80155e8:	2101      	movs	r1, #1
 80155ea:	4620      	mov	r0, r4
 80155ec:	f7ff fd56 	bl	801509c <lwip_netconn_do_writemore>
 80155f0:	e7da      	b.n	80155a8 <sent_tcp+0x14>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80155f2:	2101      	movs	r1, #1
 80155f4:	4620      	mov	r0, r4
 80155f6:	f7ff fe61 	bl	80152bc <lwip_netconn_do_close_internal>
 80155fa:	e7d5      	b.n	80155a8 <sent_tcp+0x14>
 80155fc:	08020240 	.word	0x08020240
 8015600:	0801ff7c 	.word	0x0801ff7c
 8015604:	0801fe1c 	.word	0x0801fe1c

08015608 <recv_tcp>:
{
 8015608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801560c:	4604      	mov	r4, r0
 801560e:	4615      	mov	r5, r2
 8015610:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8015612:	460f      	mov	r7, r1
 8015614:	b1e9      	cbz	r1, 8015652 <recv_tcp+0x4a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8015616:	b31c      	cbz	r4, 8015660 <recv_tcp+0x58>
  if (conn == NULL) {
 8015618:	2c00      	cmp	r4, #0
 801561a:	d04a      	beq.n	80156b2 <recv_tcp+0xaa>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 801561c:	6863      	ldr	r3, [r4, #4]
 801561e:	429f      	cmp	r7, r3
 8015620:	d006      	beq.n	8015630 <recv_tcp+0x28>
 8015622:	4b28      	ldr	r3, [pc, #160]	; (80156c4 <recv_tcp+0xbc>)
 8015624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015628:	4927      	ldr	r1, [pc, #156]	; (80156c8 <recv_tcp+0xc0>)
 801562a:	4828      	ldr	r0, [pc, #160]	; (80156cc <recv_tcp+0xc4>)
 801562c:	f009 fe27 	bl	801f27e <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8015630:	f104 0610 	add.w	r6, r4, #16
 8015634:	4630      	mov	r0, r6
 8015636:	f007 f859 	bl	801c6ec <sys_mbox_valid>
 801563a:	b9c0      	cbnz	r0, 801566e <recv_tcp+0x66>
    if (p != NULL) {
 801563c:	2d00      	cmp	r5, #0
 801563e:	d03b      	beq.n	80156b8 <recv_tcp+0xb0>
      tcp_recved(pcb, p->tot_len);
 8015640:	8929      	ldrh	r1, [r5, #8]
 8015642:	4638      	mov	r0, r7
 8015644:	f003 fb9a 	bl	8018d7c <tcp_recved>
      pbuf_free(p);
 8015648:	4628      	mov	r0, r5
 801564a:	f002 fef5 	bl	8018438 <pbuf_free>
    return ERR_OK;
 801564e:	2500      	movs	r5, #0
 8015650:	e01e      	b.n	8015690 <recv_tcp+0x88>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8015652:	4b1c      	ldr	r3, [pc, #112]	; (80156c4 <recv_tcp+0xbc>)
 8015654:	22f9      	movs	r2, #249	; 0xf9
 8015656:	491e      	ldr	r1, [pc, #120]	; (80156d0 <recv_tcp+0xc8>)
 8015658:	481c      	ldr	r0, [pc, #112]	; (80156cc <recv_tcp+0xc4>)
 801565a:	f009 fe10 	bl	801f27e <iprintf>
 801565e:	e7da      	b.n	8015616 <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8015660:	4b18      	ldr	r3, [pc, #96]	; (80156c4 <recv_tcp+0xbc>)
 8015662:	22fa      	movs	r2, #250	; 0xfa
 8015664:	491b      	ldr	r1, [pc, #108]	; (80156d4 <recv_tcp+0xcc>)
 8015666:	4819      	ldr	r0, [pc, #100]	; (80156cc <recv_tcp+0xc4>)
 8015668:	f009 fe09 	bl	801f27e <iprintf>
 801566c:	e7d4      	b.n	8015618 <recv_tcp+0x10>
  if (err != ERR_OK) {
 801566e:	f1b8 0f00 	cmp.w	r8, #0
 8015672:	d110      	bne.n	8015696 <recv_tcp+0x8e>
  if (p != NULL) {
 8015674:	b1dd      	cbz	r5, 80156ae <recv_tcp+0xa6>
    len = p->tot_len;
 8015676:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8015678:	4629      	mov	r1, r5
 801567a:	4630      	mov	r0, r6
 801567c:	f006 ffed 	bl	801c65a <sys_mbox_trypost>
 8015680:	4605      	mov	r5, r0
 8015682:	b9d8      	cbnz	r0, 80156bc <recv_tcp+0xb4>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8015684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015686:	b11b      	cbz	r3, 8015690 <recv_tcp+0x88>
 8015688:	463a      	mov	r2, r7
 801568a:	2100      	movs	r1, #0
 801568c:	4620      	mov	r0, r4
 801568e:	4798      	blx	r3
}
 8015690:	4628      	mov	r0, r5
 8015692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 8015696:	f007 f8bb 	bl	801c810 <sys_arch_protect>
 801569a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801569e:	f113 0f0c 	cmn.w	r3, #12
 80156a2:	db01      	blt.n	80156a8 <recv_tcp+0xa0>
 80156a4:	f884 8008 	strb.w	r8, [r4, #8]
 80156a8:	f007 f8be 	bl	801c828 <sys_arch_unprotect>
 80156ac:	e7e2      	b.n	8015674 <recv_tcp+0x6c>
    len = 0;
 80156ae:	2700      	movs	r7, #0
 80156b0:	e7e2      	b.n	8015678 <recv_tcp+0x70>
    return ERR_VAL;
 80156b2:	f06f 0505 	mvn.w	r5, #5
 80156b6:	e7eb      	b.n	8015690 <recv_tcp+0x88>
    return ERR_OK;
 80156b8:	2500      	movs	r5, #0
 80156ba:	e7e9      	b.n	8015690 <recv_tcp+0x88>
    return ERR_MEM;
 80156bc:	f04f 35ff 	mov.w	r5, #4294967295
 80156c0:	e7e6      	b.n	8015690 <recv_tcp+0x88>
 80156c2:	bf00      	nop
 80156c4:	08020240 	.word	0x08020240
 80156c8:	080202d8 	.word	0x080202d8
 80156cc:	0801fe1c 	.word	0x0801fe1c
 80156d0:	08020294 	.word	0x08020294
 80156d4:	080202b8 	.word	0x080202b8

080156d8 <lwip_netconn_do_newconn>:
{
 80156d8:	b510      	push	{r4, lr}
 80156da:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 80156dc:	2300      	movs	r3, #0
 80156de:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80156e0:	6803      	ldr	r3, [r0, #0]
 80156e2:	685b      	ldr	r3, [r3, #4]
 80156e4:	b17b      	cbz	r3, 8015706 <lwip_netconn_do_newconn+0x2e>
  TCPIP_APIMSG_ACK(msg);
 80156e6:	6823      	ldr	r3, [r4, #0]
 80156e8:	b163      	cbz	r3, 8015704 <lwip_netconn_do_newconn+0x2c>
 80156ea:	f007 f891 	bl	801c810 <sys_arch_protect>
 80156ee:	6823      	ldr	r3, [r4, #0]
 80156f0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80156f4:	f112 0f0c 	cmn.w	r2, #12
 80156f8:	db02      	blt.n	8015700 <lwip_netconn_do_newconn+0x28>
 80156fa:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80156fe:	721a      	strb	r2, [r3, #8]
 8015700:	f007 f892 	bl	801c828 <sys_arch_unprotect>
 8015704:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 8015706:	f7ff fbfd 	bl	8014f04 <pcb_new>
 801570a:	e7ec      	b.n	80156e6 <lwip_netconn_do_newconn+0xe>

0801570c <netconn_alloc>:
{
 801570c:	b570      	push	{r4, r5, r6, lr}
 801570e:	4605      	mov	r5, r0
 8015710:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8015712:	2006      	movs	r0, #6
 8015714:	f002 fca6 	bl	8018064 <memp_malloc>
  if (conn == NULL) {
 8015718:	4604      	mov	r4, r0
 801571a:	b308      	cbz	r0, 8015760 <netconn_alloc+0x54>
  conn->last_err = ERR_OK;
 801571c:	2300      	movs	r3, #0
 801571e:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8015720:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8015722:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8015724:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8015728:	2d10      	cmp	r5, #16
 801572a:	d11b      	bne.n	8015764 <netconn_alloc+0x58>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801572c:	f100 0510 	add.w	r5, r0, #16
 8015730:	2106      	movs	r1, #6
 8015732:	4628      	mov	r0, r5
 8015734:	f006 ff68 	bl	801c608 <sys_mbox_new>
 8015738:	b9d8      	cbnz	r0, 8015772 <netconn_alloc+0x66>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801573a:	2100      	movs	r1, #0
 801573c:	f104 000c 	add.w	r0, r4, #12
 8015740:	f006 ffdd 	bl	801c6fe <sys_sem_new>
 8015744:	b9d8      	cbnz	r0, 801577e <netconn_alloc+0x72>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8015746:	f104 0014 	add.w	r0, r4, #20
 801574a:	f006 ffd5 	bl	801c6f8 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 801574e:	2300      	movs	r3, #0
 8015750:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8015752:	f04f 32ff 	mov.w	r2, #4294967295
 8015756:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8015758:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 801575a:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 801575c:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 801575e:	7723      	strb	r3, [r4, #28]
}
 8015760:	4620      	mov	r0, r4
 8015762:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8015764:	4b08      	ldr	r3, [pc, #32]	; (8015788 <netconn_alloc+0x7c>)
 8015766:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801576a:	4908      	ldr	r1, [pc, #32]	; (801578c <netconn_alloc+0x80>)
 801576c:	4808      	ldr	r0, [pc, #32]	; (8015790 <netconn_alloc+0x84>)
 801576e:	f009 fd86 	bl	801f27e <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8015772:	4621      	mov	r1, r4
 8015774:	2006      	movs	r0, #6
 8015776:	f002 fc8f 	bl	8018098 <memp_free>
  return NULL;
 801577a:	2400      	movs	r4, #0
 801577c:	e7f0      	b.n	8015760 <netconn_alloc+0x54>
    sys_mbox_free(&conn->recvmbox);
 801577e:	4628      	mov	r0, r5
 8015780:	f006 ff56 	bl	801c630 <sys_mbox_free>
    goto free_and_return;
 8015784:	e7f5      	b.n	8015772 <netconn_alloc+0x66>
 8015786:	bf00      	nop
 8015788:	08020240 	.word	0x08020240
 801578c:	08020170 	.word	0x08020170
 8015790:	0801fe1c 	.word	0x0801fe1c

08015794 <netconn_free>:
{
 8015794:	b538      	push	{r3, r4, r5, lr}
 8015796:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8015798:	6843      	ldr	r3, [r0, #4]
 801579a:	b133      	cbz	r3, 80157aa <netconn_free+0x16>
 801579c:	4b16      	ldr	r3, [pc, #88]	; (80157f8 <netconn_free+0x64>)
 801579e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80157a2:	4916      	ldr	r1, [pc, #88]	; (80157fc <netconn_free+0x68>)
 80157a4:	4816      	ldr	r0, [pc, #88]	; (8015800 <netconn_free+0x6c>)
 80157a6:	f009 fd6a 	bl	801f27e <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80157aa:	f104 0010 	add.w	r0, r4, #16
 80157ae:	f006 ff9d 	bl	801c6ec <sys_mbox_valid>
 80157b2:	b988      	cbnz	r0, 80157d8 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80157b4:	f104 0014 	add.w	r0, r4, #20
 80157b8:	f006 ff98 	bl	801c6ec <sys_mbox_valid>
 80157bc:	b9a0      	cbnz	r0, 80157e8 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 80157be:	f104 050c 	add.w	r5, r4, #12
 80157c2:	4628      	mov	r0, r5
 80157c4:	f006 ffd7 	bl	801c776 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80157c8:	4628      	mov	r0, r5
 80157ca:	f006 ffdf 	bl	801c78c <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 80157ce:	4621      	mov	r1, r4
 80157d0:	2006      	movs	r0, #6
 80157d2:	f002 fc61 	bl	8018098 <memp_free>
 80157d6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80157d8:	4b07      	ldr	r3, [pc, #28]	; (80157f8 <netconn_free+0x64>)
 80157da:	f240 22e2 	movw	r2, #738	; 0x2e2
 80157de:	4909      	ldr	r1, [pc, #36]	; (8015804 <netconn_free+0x70>)
 80157e0:	4807      	ldr	r0, [pc, #28]	; (8015800 <netconn_free+0x6c>)
 80157e2:	f009 fd4c 	bl	801f27e <iprintf>
 80157e6:	e7e5      	b.n	80157b4 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80157e8:	4b03      	ldr	r3, [pc, #12]	; (80157f8 <netconn_free+0x64>)
 80157ea:	f240 22e5 	movw	r2, #741	; 0x2e5
 80157ee:	4906      	ldr	r1, [pc, #24]	; (8015808 <netconn_free+0x74>)
 80157f0:	4803      	ldr	r0, [pc, #12]	; (8015800 <netconn_free+0x6c>)
 80157f2:	f009 fd44 	bl	801f27e <iprintf>
 80157f6:	e7e2      	b.n	80157be <netconn_free+0x2a>
 80157f8:	08020240 	.word	0x08020240
 80157fc:	08020198 	.word	0x08020198
 8015800:	0801fe1c 	.word	0x0801fe1c
 8015804:	080201c8 	.word	0x080201c8
 8015808:	08020204 	.word	0x08020204

0801580c <netconn_drain>:
{
 801580c:	b570      	push	{r4, r5, r6, lr}
 801580e:	b082      	sub	sp, #8
 8015810:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8015812:	f100 0410 	add.w	r4, r0, #16
 8015816:	4620      	mov	r0, r4
 8015818:	f006 ff68 	bl	801c6ec <sys_mbox_valid>
 801581c:	bb38      	cbnz	r0, 801586e <netconn_drain+0x62>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 801581e:	3514      	adds	r5, #20
 8015820:	4628      	mov	r0, r5
 8015822:	f006 ff63 	bl	801c6ec <sys_mbox_valid>
 8015826:	2800      	cmp	r0, #0
 8015828:	d03e      	beq.n	80158a8 <netconn_drain+0x9c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801582a:	a901      	add	r1, sp, #4
 801582c:	4628      	mov	r0, r5
 801582e:	f006 ff4a 	bl	801c6c6 <sys_arch_mbox_tryfetch>
 8015832:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015836:	d031      	beq.n	801589c <netconn_drain+0x90>
      if (mem != &netconn_aborted) {
 8015838:	9c01      	ldr	r4, [sp, #4]
 801583a:	4b1c      	ldr	r3, [pc, #112]	; (80158ac <netconn_drain+0xa0>)
 801583c:	429c      	cmp	r4, r3
 801583e:	d0f4      	beq.n	801582a <netconn_drain+0x1e>
        netconn_drain(newconn);
 8015840:	4620      	mov	r0, r4
 8015842:	f7ff ffe3 	bl	801580c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8015846:	6860      	ldr	r0, [r4, #4]
 8015848:	b118      	cbz	r0, 8015852 <netconn_drain+0x46>
          tcp_abort(newconn->pcb.tcp);
 801584a:	f003 ffe7 	bl	801981c <tcp_abort>
          newconn->pcb.tcp = NULL;
 801584e:	2300      	movs	r3, #0
 8015850:	6063      	str	r3, [r4, #4]
        netconn_free(newconn);
 8015852:	4620      	mov	r0, r4
 8015854:	f7ff ff9e 	bl	8015794 <netconn_free>
 8015858:	e7e7      	b.n	801582a <netconn_drain+0x1e>
        if (mem != NULL) {
 801585a:	9e01      	ldr	r6, [sp, #4]
 801585c:	b13e      	cbz	r6, 801586e <netconn_drain+0x62>
          if (conn->pcb.tcp != NULL) {
 801585e:	6868      	ldr	r0, [r5, #4]
 8015860:	b110      	cbz	r0, 8015868 <netconn_drain+0x5c>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8015862:	8931      	ldrh	r1, [r6, #8]
 8015864:	f003 fa8a 	bl	8018d7c <tcp_recved>
          pbuf_free(p);
 8015868:	4630      	mov	r0, r6
 801586a:	f002 fde5 	bl	8018438 <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801586e:	a901      	add	r1, sp, #4
 8015870:	4620      	mov	r0, r4
 8015872:	f006 ff28 	bl	801c6c6 <sys_arch_mbox_tryfetch>
 8015876:	f1b0 3fff 	cmp.w	r0, #4294967295
 801587a:	d008      	beq.n	801588e <netconn_drain+0x82>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801587c:	782b      	ldrb	r3, [r5, #0]
 801587e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015882:	2b10      	cmp	r3, #16
 8015884:	d0e9      	beq.n	801585a <netconn_drain+0x4e>
        netbuf_delete((struct netbuf *)mem);
 8015886:	9801      	ldr	r0, [sp, #4]
 8015888:	f000 fb06 	bl	8015e98 <netbuf_delete>
 801588c:	e7ef      	b.n	801586e <netconn_drain+0x62>
    sys_mbox_free(&conn->recvmbox);
 801588e:	4620      	mov	r0, r4
 8015890:	f006 fece 	bl	801c630 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8015894:	4620      	mov	r0, r4
 8015896:	f006 ff2f 	bl	801c6f8 <sys_mbox_set_invalid>
 801589a:	e7c0      	b.n	801581e <netconn_drain+0x12>
    sys_mbox_free(&conn->acceptmbox);
 801589c:	4628      	mov	r0, r5
 801589e:	f006 fec7 	bl	801c630 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80158a2:	4628      	mov	r0, r5
 80158a4:	f006 ff28 	bl	801c6f8 <sys_mbox_set_invalid>
}
 80158a8:	b002      	add	sp, #8
 80158aa:	bd70      	pop	{r4, r5, r6, pc}
 80158ac:	2000a24c 	.word	0x2000a24c

080158b0 <accept_function>:
{
 80158b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 80158b4:	2800      	cmp	r0, #0
 80158b6:	d067      	beq.n	8015988 <accept_function+0xd8>
 80158b8:	4604      	mov	r4, r0
 80158ba:	4616      	mov	r6, r2
 80158bc:	460d      	mov	r5, r1
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80158be:	f100 0814 	add.w	r8, r0, #20
 80158c2:	4640      	mov	r0, r8
 80158c4:	f006 ff12 	bl	801c6ec <sys_mbox_valid>
 80158c8:	2800      	cmp	r0, #0
 80158ca:	d060      	beq.n	801598e <accept_function+0xde>
  if (newpcb == NULL) {
 80158cc:	b1c5      	cbz	r5, 8015900 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 80158ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80158d0:	7820      	ldrb	r0, [r4, #0]
 80158d2:	f7ff ff1b 	bl	801570c <netconn_alloc>
  if (newconn == NULL) {
 80158d6:	4607      	mov	r7, r0
 80158d8:	b310      	cbz	r0, 8015920 <accept_function+0x70>
  newconn->pcb.tcp = newpcb;
 80158da:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 80158dc:	f7ff faf2 	bl	8014ec4 <setup_tcp>
  newconn->last_err = err;
 80158e0:	723e      	strb	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80158e2:	4639      	mov	r1, r7
 80158e4:	4640      	mov	r0, r8
 80158e6:	f006 feb8 	bl	801c65a <sys_mbox_trypost>
 80158ea:	4605      	mov	r5, r0
 80158ec:	bb30      	cbnz	r0, 801593c <accept_function+0x8c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80158ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80158f0:	b11b      	cbz	r3, 80158fa <accept_function+0x4a>
 80158f2:	2200      	movs	r2, #0
 80158f4:	4611      	mov	r1, r2
 80158f6:	4620      	mov	r0, r4
 80158f8:	4798      	blx	r3
}
 80158fa:	4628      	mov	r0, r5
 80158fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8015900:	492a      	ldr	r1, [pc, #168]	; (80159ac <accept_function+0xfc>)
 8015902:	4640      	mov	r0, r8
 8015904:	f006 fea9 	bl	801c65a <sys_mbox_trypost>
 8015908:	2800      	cmp	r0, #0
 801590a:	d143      	bne.n	8015994 <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801590c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801590e:	2b00      	cmp	r3, #0
 8015910:	d043      	beq.n	801599a <accept_function+0xea>
 8015912:	2200      	movs	r2, #0
 8015914:	4611      	mov	r1, r2
 8015916:	4620      	mov	r0, r4
 8015918:	4798      	blx	r3
    return ERR_VAL;
 801591a:	f06f 0505 	mvn.w	r5, #5
 801591e:	e7ec      	b.n	80158fa <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8015920:	4922      	ldr	r1, [pc, #136]	; (80159ac <accept_function+0xfc>)
 8015922:	4640      	mov	r0, r8
 8015924:	f006 fe99 	bl	801c65a <sys_mbox_trypost>
 8015928:	bbd0      	cbnz	r0, 80159a0 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801592a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801592c:	b3db      	cbz	r3, 80159a6 <accept_function+0xf6>
 801592e:	2200      	movs	r2, #0
 8015930:	4611      	mov	r1, r2
 8015932:	4620      	mov	r0, r4
 8015934:	4798      	blx	r3
    return ERR_MEM;
 8015936:	f04f 35ff 	mov.w	r5, #4294967295
 801593a:	e7de      	b.n	80158fa <accept_function+0x4a>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 801593c:	687c      	ldr	r4, [r7, #4]
    tcp_arg(pcb, NULL);
 801593e:	2100      	movs	r1, #0
 8015940:	4620      	mov	r0, r4
 8015942:	f003 fa88 	bl	8018e56 <tcp_arg>
    tcp_recv(pcb, NULL);
 8015946:	2100      	movs	r1, #0
 8015948:	4620      	mov	r0, r4
 801594a:	f003 fa87 	bl	8018e5c <tcp_recv>
    tcp_sent(pcb, NULL);
 801594e:	2100      	movs	r1, #0
 8015950:	4620      	mov	r0, r4
 8015952:	f003 fa9d 	bl	8018e90 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8015956:	2200      	movs	r2, #0
 8015958:	4611      	mov	r1, r2
 801595a:	4620      	mov	r0, r4
 801595c:	f003 fad2 	bl	8018f04 <tcp_poll>
    tcp_err(pcb, NULL);
 8015960:	2100      	movs	r1, #0
 8015962:	4620      	mov	r0, r4
 8015964:	f003 faac 	bl	8018ec0 <tcp_err>
    newconn->pcb.tcp = NULL;
 8015968:	2300      	movs	r3, #0
 801596a:	607b      	str	r3, [r7, #4]
    sys_mbox_free(&newconn->recvmbox);
 801596c:	f107 0410 	add.w	r4, r7, #16
 8015970:	4620      	mov	r0, r4
 8015972:	f006 fe5d 	bl	801c630 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8015976:	4620      	mov	r0, r4
 8015978:	f006 febe 	bl	801c6f8 <sys_mbox_set_invalid>
    netconn_free(newconn);
 801597c:	4638      	mov	r0, r7
 801597e:	f7ff ff09 	bl	8015794 <netconn_free>
    return ERR_MEM;
 8015982:	f04f 35ff 	mov.w	r5, #4294967295
 8015986:	e7b8      	b.n	80158fa <accept_function+0x4a>
    return ERR_VAL;
 8015988:	f06f 0505 	mvn.w	r5, #5
 801598c:	e7b5      	b.n	80158fa <accept_function+0x4a>
    return ERR_VAL;
 801598e:	f06f 0505 	mvn.w	r5, #5
 8015992:	e7b2      	b.n	80158fa <accept_function+0x4a>
    return ERR_VAL;
 8015994:	f06f 0505 	mvn.w	r5, #5
 8015998:	e7af      	b.n	80158fa <accept_function+0x4a>
 801599a:	f06f 0505 	mvn.w	r5, #5
 801599e:	e7ac      	b.n	80158fa <accept_function+0x4a>
    return ERR_MEM;
 80159a0:	f04f 35ff 	mov.w	r5, #4294967295
 80159a4:	e7a9      	b.n	80158fa <accept_function+0x4a>
 80159a6:	f04f 35ff 	mov.w	r5, #4294967295
 80159aa:	e7a6      	b.n	80158fa <accept_function+0x4a>
 80159ac:	2000a24c 	.word	0x2000a24c

080159b0 <lwip_netconn_do_delconn>:
{
 80159b0:	b538      	push	{r3, r4, r5, lr}
 80159b2:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 80159b4:	6803      	ldr	r3, [r0, #0]
 80159b6:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80159b8:	b15d      	cbz	r5, 80159d2 <lwip_netconn_do_delconn+0x22>
 80159ba:	781b      	ldrb	r3, [r3, #0]
 80159bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80159c0:	2b10      	cmp	r3, #16
 80159c2:	d006      	beq.n	80159d2 <lwip_netconn_do_delconn+0x22>
 80159c4:	4b4b      	ldr	r3, [pc, #300]	; (8015af4 <lwip_netconn_do_delconn+0x144>)
 80159c6:	f240 4201 	movw	r2, #1025	; 0x401
 80159ca:	494b      	ldr	r1, [pc, #300]	; (8015af8 <lwip_netconn_do_delconn+0x148>)
 80159cc:	484b      	ldr	r0, [pc, #300]	; (8015afc <lwip_netconn_do_delconn+0x14c>)
 80159ce:	f009 fc56 	bl	801f27e <iprintf>
  if (((state != NETCONN_NONE) &&
 80159d2:	b1d5      	cbz	r5, 8015a0a <lwip_netconn_do_delconn+0x5a>
 80159d4:	2d02      	cmp	r5, #2
 80159d6:	d018      	beq.n	8015a0a <lwip_netconn_do_delconn+0x5a>
       (state != NETCONN_LISTEN) &&
 80159d8:	2d03      	cmp	r5, #3
 80159da:	d016      	beq.n	8015a0a <lwip_netconn_do_delconn+0x5a>
    msg->err = ERR_INPROGRESS;
 80159dc:	23fb      	movs	r3, #251	; 0xfb
 80159de:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80159e0:	6820      	ldr	r0, [r4, #0]
 80159e2:	300c      	adds	r0, #12
 80159e4:	f006 fecc 	bl	801c780 <sys_sem_valid>
 80159e8:	b170      	cbz	r0, 8015a08 <lwip_netconn_do_delconn+0x58>
    TCPIP_APIMSG_ACK(msg);
 80159ea:	6823      	ldr	r3, [r4, #0]
 80159ec:	b163      	cbz	r3, 8015a08 <lwip_netconn_do_delconn+0x58>
 80159ee:	f006 ff0f 	bl	801c810 <sys_arch_protect>
 80159f2:	6823      	ldr	r3, [r4, #0]
 80159f4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80159f8:	f112 0f0c 	cmn.w	r2, #12
 80159fc:	db02      	blt.n	8015a04 <lwip_netconn_do_delconn+0x54>
 80159fe:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015a02:	721a      	strb	r2, [r3, #8]
 8015a04:	f006 ff10 	bl	801c828 <sys_arch_unprotect>
 8015a08:	bd38      	pop	{r3, r4, r5, pc}
       (state != NETCONN_CONNECT)) ||
 8015a0a:	2d03      	cmp	r5, #3
 8015a0c:	d049      	beq.n	8015aa2 <lwip_netconn_do_delconn+0xf2>
    LWIP_ASSERT("blocking connect in progress",
 8015a0e:	2d03      	cmp	r5, #3
 8015a10:	d04d      	beq.n	8015aae <lwip_netconn_do_delconn+0xfe>
    msg->err = ERR_OK;
 8015a12:	2300      	movs	r3, #0
 8015a14:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 8015a16:	6820      	ldr	r0, [r4, #0]
 8015a18:	f7ff fef8 	bl	801580c <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8015a1c:	6823      	ldr	r3, [r4, #0]
 8015a1e:	685a      	ldr	r2, [r3, #4]
 8015a20:	2a00      	cmp	r2, #0
 8015a22:	d057      	beq.n	8015ad4 <lwip_netconn_do_delconn+0x124>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015a24:	781a      	ldrb	r2, [r3, #0]
 8015a26:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8015a2a:	2a10      	cmp	r2, #16
 8015a2c:	d150      	bne.n	8015ad0 <lwip_netconn_do_delconn+0x120>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a30:	2a00      	cmp	r2, #0
 8015a32:	d049      	beq.n	8015ac8 <lwip_netconn_do_delconn+0x118>
 8015a34:	4b2f      	ldr	r3, [pc, #188]	; (8015af4 <lwip_netconn_do_delconn+0x144>)
 8015a36:	f240 4235 	movw	r2, #1077	; 0x435
 8015a3a:	4931      	ldr	r1, [pc, #196]	; (8015b00 <lwip_netconn_do_delconn+0x150>)
 8015a3c:	482f      	ldr	r0, [pc, #188]	; (8015afc <lwip_netconn_do_delconn+0x14c>)
 8015a3e:	f009 fc1e 	bl	801f27e <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8015a42:	6823      	ldr	r3, [r4, #0]
 8015a44:	2204      	movs	r2, #4
 8015a46:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8015a48:	2303      	movs	r3, #3
 8015a4a:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 8015a4c:	6823      	ldr	r3, [r4, #0]
 8015a4e:	625c      	str	r4, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8015a50:	2100      	movs	r1, #0
 8015a52:	6820      	ldr	r0, [r4, #0]
 8015a54:	f7ff fc32 	bl	80152bc <lwip_netconn_do_close_internal>
 8015a58:	2800      	cmp	r0, #0
 8015a5a:	d0d5      	beq.n	8015a08 <lwip_netconn_do_delconn+0x58>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8015a5c:	6823      	ldr	r3, [r4, #0]
 8015a5e:	785b      	ldrb	r3, [r3, #1]
 8015a60:	2b04      	cmp	r3, #4
 8015a62:	d006      	beq.n	8015a72 <lwip_netconn_do_delconn+0xc2>
 8015a64:	4b23      	ldr	r3, [pc, #140]	; (8015af4 <lwip_netconn_do_delconn+0x144>)
 8015a66:	f240 423b 	movw	r2, #1083	; 0x43b
 8015a6a:	4926      	ldr	r1, [pc, #152]	; (8015b04 <lwip_netconn_do_delconn+0x154>)
 8015a6c:	4823      	ldr	r0, [pc, #140]	; (8015afc <lwip_netconn_do_delconn+0x14c>)
 8015a6e:	f009 fc06 	bl	801f27e <iprintf>
          UNLOCK_TCPIP_CORE();
 8015a72:	4d25      	ldr	r5, [pc, #148]	; (8015b08 <lwip_netconn_do_delconn+0x158>)
 8015a74:	4628      	mov	r0, r5
 8015a76:	f006 feb1 	bl	801c7dc <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015a7a:	6820      	ldr	r0, [r4, #0]
 8015a7c:	2100      	movs	r1, #0
 8015a7e:	300c      	adds	r0, #12
 8015a80:	f006 fe56 	bl	801c730 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8015a84:	4628      	mov	r0, r5
 8015a86:	f006 fea2 	bl	801c7ce <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015a8a:	6823      	ldr	r3, [r4, #0]
 8015a8c:	785b      	ldrb	r3, [r3, #1]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d0ba      	beq.n	8015a08 <lwip_netconn_do_delconn+0x58>
 8015a92:	4b18      	ldr	r3, [pc, #96]	; (8015af4 <lwip_netconn_do_delconn+0x144>)
 8015a94:	f240 423f 	movw	r2, #1087	; 0x43f
 8015a98:	491a      	ldr	r1, [pc, #104]	; (8015b04 <lwip_netconn_do_delconn+0x154>)
 8015a9a:	4818      	ldr	r0, [pc, #96]	; (8015afc <lwip_netconn_do_delconn+0x14c>)
 8015a9c:	f009 fbef 	bl	801f27e <iprintf>
 8015aa0:	bd38      	pop	{r3, r4, r5, pc}
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8015aa2:	6823      	ldr	r3, [r4, #0]
 8015aa4:	7f1b      	ldrb	r3, [r3, #28]
 8015aa6:	f013 0f04 	tst.w	r3, #4
 8015aaa:	d1b0      	bne.n	8015a0e <lwip_netconn_do_delconn+0x5e>
 8015aac:	e796      	b.n	80159dc <lwip_netconn_do_delconn+0x2c>
    LWIP_ASSERT("blocking connect in progress",
 8015aae:	6823      	ldr	r3, [r4, #0]
 8015ab0:	7f1b      	ldrb	r3, [r3, #28]
 8015ab2:	f013 0f04 	tst.w	r3, #4
 8015ab6:	d1ac      	bne.n	8015a12 <lwip_netconn_do_delconn+0x62>
 8015ab8:	4b0e      	ldr	r3, [pc, #56]	; (8015af4 <lwip_netconn_do_delconn+0x144>)
 8015aba:	f240 421f 	movw	r2, #1055	; 0x41f
 8015abe:	4913      	ldr	r1, [pc, #76]	; (8015b0c <lwip_netconn_do_delconn+0x15c>)
 8015ac0:	480e      	ldr	r0, [pc, #56]	; (8015afc <lwip_netconn_do_delconn+0x14c>)
 8015ac2:	f009 fbdc 	bl	801f27e <iprintf>
 8015ac6:	e7a4      	b.n	8015a12 <lwip_netconn_do_delconn+0x62>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015ac8:	6a1b      	ldr	r3, [r3, #32]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d0b9      	beq.n	8015a42 <lwip_netconn_do_delconn+0x92>
 8015ace:	e7b1      	b.n	8015a34 <lwip_netconn_do_delconn+0x84>
      msg->conn->pcb.tcp = NULL;
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8015ad4:	6820      	ldr	r0, [r4, #0]
 8015ad6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015ad8:	b113      	cbz	r3, 8015ae0 <lwip_netconn_do_delconn+0x130>
 8015ada:	2200      	movs	r2, #0
 8015adc:	4611      	mov	r1, r2
 8015ade:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8015ae0:	6820      	ldr	r0, [r4, #0]
 8015ae2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	f43f af7b 	beq.w	80159e0 <lwip_netconn_do_delconn+0x30>
 8015aea:	2200      	movs	r2, #0
 8015aec:	2102      	movs	r1, #2
 8015aee:	4798      	blx	r3
 8015af0:	e776      	b.n	80159e0 <lwip_netconn_do_delconn+0x30>
 8015af2:	bf00      	nop
 8015af4:	08020240 	.word	0x08020240
 8015af8:	0802006c 	.word	0x0802006c
 8015afc:	0801fe1c 	.word	0x0801fe1c
 8015b00:	080200a0 	.word	0x080200a0
 8015b04:	080200bc 	.word	0x080200bc
 8015b08:	2000a250 	.word	0x2000a250
 8015b0c:	08020080 	.word	0x08020080

08015b10 <lwip_netconn_do_bind>:
{
 8015b10:	b510      	push	{r4, lr}
 8015b12:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015b14:	6803      	ldr	r3, [r0, #0]
 8015b16:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015b1a:	f112 0f0c 	cmn.w	r2, #12
 8015b1e:	da10      	bge.n	8015b42 <lwip_netconn_do_bind+0x32>
    msg->err = msg->conn->last_err;
 8015b20:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8015b22:	6823      	ldr	r3, [r4, #0]
 8015b24:	b163      	cbz	r3, 8015b40 <lwip_netconn_do_bind+0x30>
 8015b26:	f006 fe73 	bl	801c810 <sys_arch_protect>
 8015b2a:	6823      	ldr	r3, [r4, #0]
 8015b2c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015b30:	f112 0f0c 	cmn.w	r2, #12
 8015b34:	db02      	blt.n	8015b3c <lwip_netconn_do_bind+0x2c>
 8015b36:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015b3a:	721a      	strb	r2, [r3, #8]
 8015b3c:	f006 fe74 	bl	801c828 <sys_arch_unprotect>
 8015b40:	bd10      	pop	{r4, pc}
    msg->err = ERR_VAL;
 8015b42:	22fa      	movs	r2, #250	; 0xfa
 8015b44:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8015b46:	6858      	ldr	r0, [r3, #4]
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	d0ea      	beq.n	8015b22 <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b52:	2b10      	cmp	r3, #16
 8015b54:	d1e5      	bne.n	8015b22 <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8015b56:	89a2      	ldrh	r2, [r4, #12]
 8015b58:	68a1      	ldr	r1, [r4, #8]
 8015b5a:	f003 f821 	bl	8018ba0 <tcp_bind>
 8015b5e:	7120      	strb	r0, [r4, #4]
        break;
 8015b60:	e7df      	b.n	8015b22 <lwip_netconn_do_bind+0x12>
	...

08015b64 <lwip_netconn_do_listen>:
{
 8015b64:	b530      	push	{r4, r5, lr}
 8015b66:	b083      	sub	sp, #12
 8015b68:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015b6a:	6803      	ldr	r3, [r0, #0]
 8015b6c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015b70:	f112 0f0c 	cmn.w	r2, #12
 8015b74:	da11      	bge.n	8015b9a <lwip_netconn_do_listen+0x36>
    msg->err = msg->conn->last_err;
 8015b76:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8015b78:	6823      	ldr	r3, [r4, #0]
 8015b7a:	b163      	cbz	r3, 8015b96 <lwip_netconn_do_listen+0x32>
 8015b7c:	f006 fe48 	bl	801c810 <sys_arch_protect>
 8015b80:	6823      	ldr	r3, [r4, #0]
 8015b82:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015b86:	f112 0f0c 	cmn.w	r2, #12
 8015b8a:	db02      	blt.n	8015b92 <lwip_netconn_do_listen+0x2e>
 8015b8c:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015b90:	721a      	strb	r2, [r3, #8]
 8015b92:	f006 fe49 	bl	801c828 <sys_arch_unprotect>
}
 8015b96:	b003      	add	sp, #12
 8015b98:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 8015b9a:	22f5      	movs	r2, #245	; 0xf5
 8015b9c:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8015b9e:	6858      	ldr	r0, [r3, #4]
 8015ba0:	2800      	cmp	r0, #0
 8015ba2:	d0e9      	beq.n	8015b78 <lwip_netconn_do_listen+0x14>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015ba4:	781a      	ldrb	r2, [r3, #0]
 8015ba6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8015baa:	2a10      	cmp	r2, #16
 8015bac:	d002      	beq.n	8015bb4 <lwip_netconn_do_listen+0x50>
        msg->err = ERR_ARG;
 8015bae:	23f0      	movs	r3, #240	; 0xf0
 8015bb0:	7123      	strb	r3, [r4, #4]
 8015bb2:	e7e1      	b.n	8015b78 <lwip_netconn_do_listen+0x14>
        if (msg->conn->state == NETCONN_NONE) {
 8015bb4:	785b      	ldrb	r3, [r3, #1]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d145      	bne.n	8015c46 <lwip_netconn_do_listen+0xe2>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8015bba:	7d03      	ldrb	r3, [r0, #20]
 8015bbc:	b113      	cbz	r3, 8015bc4 <lwip_netconn_do_listen+0x60>
            msg->err = ERR_VAL;
 8015bbe:	23fa      	movs	r3, #250	; 0xfa
 8015bc0:	7123      	strb	r3, [r4, #4]
 8015bc2:	e7d9      	b.n	8015b78 <lwip_netconn_do_listen+0x14>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8015bc4:	f10d 0207 	add.w	r2, sp, #7
 8015bc8:	21ff      	movs	r1, #255	; 0xff
 8015bca:	f003 f847 	bl	8018c5c <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8015bce:	4605      	mov	r5, r0
 8015bd0:	b1f0      	cbz	r0, 8015c10 <lwip_netconn_do_listen+0xac>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8015bd2:	6820      	ldr	r0, [r4, #0]
 8015bd4:	3010      	adds	r0, #16
 8015bd6:	f006 fd89 	bl	801c6ec <sys_mbox_valid>
 8015bda:	b9e8      	cbnz	r0, 8015c18 <lwip_netconn_do_listen+0xb4>
              msg->err = ERR_OK;
 8015bdc:	2300      	movs	r3, #0
 8015bde:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8015be0:	6820      	ldr	r0, [r4, #0]
 8015be2:	3014      	adds	r0, #20
 8015be4:	f006 fd82 	bl	801c6ec <sys_mbox_valid>
 8015be8:	b1f8      	cbz	r0, 8015c2a <lwip_netconn_do_listen+0xc6>
              if (msg->err == ERR_OK) {
 8015bea:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8015bee:	bb1b      	cbnz	r3, 8015c38 <lwip_netconn_do_listen+0xd4>
                msg->conn->state = NETCONN_LISTEN;
 8015bf0:	6823      	ldr	r3, [r4, #0]
 8015bf2:	2202      	movs	r2, #2
 8015bf4:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8015bf6:	6823      	ldr	r3, [r4, #0]
 8015bf8:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8015bfa:	6823      	ldr	r3, [r4, #0]
 8015bfc:	4619      	mov	r1, r3
 8015bfe:	6858      	ldr	r0, [r3, #4]
 8015c00:	f003 f929 	bl	8018e56 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8015c04:	6823      	ldr	r3, [r4, #0]
 8015c06:	4912      	ldr	r1, [pc, #72]	; (8015c50 <lwip_netconn_do_listen+0xec>)
 8015c08:	6858      	ldr	r0, [r3, #4]
 8015c0a:	f003 f973 	bl	8018ef4 <tcp_accept>
 8015c0e:	e7b3      	b.n	8015b78 <lwip_netconn_do_listen+0x14>
              msg->err = err;
 8015c10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015c14:	7123      	strb	r3, [r4, #4]
 8015c16:	e7af      	b.n	8015b78 <lwip_netconn_do_listen+0x14>
                sys_mbox_free(&msg->conn->recvmbox);
 8015c18:	6820      	ldr	r0, [r4, #0]
 8015c1a:	3010      	adds	r0, #16
 8015c1c:	f006 fd08 	bl	801c630 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8015c20:	6820      	ldr	r0, [r4, #0]
 8015c22:	3010      	adds	r0, #16
 8015c24:	f006 fd68 	bl	801c6f8 <sys_mbox_set_invalid>
 8015c28:	e7d8      	b.n	8015bdc <lwip_netconn_do_listen+0x78>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8015c2a:	6820      	ldr	r0, [r4, #0]
 8015c2c:	2106      	movs	r1, #6
 8015c2e:	3014      	adds	r0, #20
 8015c30:	f006 fcea 	bl	801c608 <sys_mbox_new>
 8015c34:	7120      	strb	r0, [r4, #4]
 8015c36:	e7d8      	b.n	8015bea <lwip_netconn_do_listen+0x86>
                tcp_close(lpcb);
 8015c38:	4628      	mov	r0, r5
 8015c3a:	f003 fc9f 	bl	801957c <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8015c3e:	6823      	ldr	r3, [r4, #0]
 8015c40:	2200      	movs	r2, #0
 8015c42:	605a      	str	r2, [r3, #4]
 8015c44:	e798      	b.n	8015b78 <lwip_netconn_do_listen+0x14>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8015c46:	2b02      	cmp	r3, #2
 8015c48:	d196      	bne.n	8015b78 <lwip_netconn_do_listen+0x14>
          msg->err = ERR_OK;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	7123      	strb	r3, [r4, #4]
 8015c4e:	e793      	b.n	8015b78 <lwip_netconn_do_listen+0x14>
 8015c50:	080158b1 	.word	0x080158b1

08015c54 <lwip_netconn_do_recv>:
{
 8015c54:	b570      	push	{r4, r5, r6, lr}
 8015c56:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8015c5c:	6803      	ldr	r3, [r0, #0]
 8015c5e:	685a      	ldr	r2, [r3, #4]
 8015c60:	b122      	cbz	r2, 8015c6c <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015c62:	781b      	ldrb	r3, [r3, #0]
 8015c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c68:	2b10      	cmp	r3, #16
 8015c6a:	d00f      	beq.n	8015c8c <lwip_netconn_do_recv+0x38>
  TCPIP_APIMSG_ACK(msg);
 8015c6c:	6833      	ldr	r3, [r6, #0]
 8015c6e:	b163      	cbz	r3, 8015c8a <lwip_netconn_do_recv+0x36>
 8015c70:	f006 fdce 	bl	801c810 <sys_arch_protect>
 8015c74:	6833      	ldr	r3, [r6, #0]
 8015c76:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015c7a:	f112 0f0c 	cmn.w	r2, #12
 8015c7e:	db02      	blt.n	8015c86 <lwip_netconn_do_recv+0x32>
 8015c80:	f996 2004 	ldrsb.w	r2, [r6, #4]
 8015c84:	721a      	strb	r2, [r3, #8]
 8015c86:	f006 fdcf 	bl	801c828 <sys_arch_unprotect>
 8015c8a:	bd70      	pop	{r4, r5, r6, pc}
      u32_t remaining = msg->msg.r.len;
 8015c8c:	6884      	ldr	r4, [r0, #8]
 8015c8e:	e008      	b.n	8015ca2 <lwip_netconn_do_recv+0x4e>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8015c90:	f64f 75ff 	movw	r5, #65535	; 0xffff
        tcp_recved(msg->conn->pcb.tcp, recved);
 8015c94:	6833      	ldr	r3, [r6, #0]
 8015c96:	4629      	mov	r1, r5
 8015c98:	6858      	ldr	r0, [r3, #4]
 8015c9a:	f003 f86f 	bl	8018d7c <tcp_recved>
      } while (remaining != 0);
 8015c9e:	1b64      	subs	r4, r4, r5
 8015ca0:	d0e4      	beq.n	8015c6c <lwip_netconn_do_recv+0x18>
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8015ca2:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8015ca6:	d2f3      	bcs.n	8015c90 <lwip_netconn_do_recv+0x3c>
 8015ca8:	b2a5      	uxth	r5, r4
 8015caa:	e7f3      	b.n	8015c94 <lwip_netconn_do_recv+0x40>

08015cac <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8015cac:	b538      	push	{r3, r4, r5, lr}
 8015cae:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8015cb0:	6803      	ldr	r3, [r0, #0]
 8015cb2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015cb6:	f112 0f0c 	cmn.w	r2, #12
 8015cba:	da0f      	bge.n	8015cdc <lwip_netconn_do_write+0x30>
    msg->err = msg->conn->last_err;
 8015cbc:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8015cbe:	b163      	cbz	r3, 8015cda <lwip_netconn_do_write+0x2e>
 8015cc0:	f006 fda6 	bl	801c810 <sys_arch_protect>
 8015cc4:	6823      	ldr	r3, [r4, #0]
 8015cc6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015cca:	f112 0f0c 	cmn.w	r2, #12
 8015cce:	db02      	blt.n	8015cd6 <lwip_netconn_do_write+0x2a>
 8015cd0:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015cd4:	721a      	strb	r2, [r3, #8]
 8015cd6:	f006 fda7 	bl	801c828 <sys_arch_unprotect>
 8015cda:	bd38      	pop	{r3, r4, r5, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015cdc:	781a      	ldrb	r2, [r3, #0]
 8015cde:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8015ce2:	2a10      	cmp	r2, #16
 8015ce4:	d1eb      	bne.n	8015cbe <lwip_netconn_do_write+0x12>
      if (msg->conn->state != NETCONN_NONE) {
 8015ce6:	785a      	ldrb	r2, [r3, #1]
 8015ce8:	b112      	cbz	r2, 8015cf0 <lwip_netconn_do_write+0x44>
        msg->err = ERR_INPROGRESS;
 8015cea:	22fb      	movs	r2, #251	; 0xfb
 8015cec:	7102      	strb	r2, [r0, #4]
 8015cee:	e7e6      	b.n	8015cbe <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 8015cf0:	685a      	ldr	r2, [r3, #4]
 8015cf2:	2a00      	cmp	r2, #0
 8015cf4:	d048      	beq.n	8015d88 <lwip_netconn_do_write+0xdc>
        msg->conn->state = NETCONN_WRITE;
 8015cf6:	2201      	movs	r2, #1
 8015cf8:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015cfa:	6803      	ldr	r3, [r0, #0]
 8015cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015cfe:	2a00      	cmp	r2, #0
 8015d00:	d036      	beq.n	8015d70 <lwip_netconn_do_write+0xc4>
 8015d02:	4b23      	ldr	r3, [pc, #140]	; (8015d90 <lwip_netconn_do_write+0xe4>)
 8015d04:	f240 6283 	movw	r2, #1667	; 0x683
 8015d08:	4922      	ldr	r1, [pc, #136]	; (8015d94 <lwip_netconn_do_write+0xe8>)
 8015d0a:	4823      	ldr	r0, [pc, #140]	; (8015d98 <lwip_netconn_do_write+0xec>)
 8015d0c:	f009 fab7 	bl	801f27e <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8015d10:	68e3      	ldr	r3, [r4, #12]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d030      	beq.n	8015d78 <lwip_netconn_do_write+0xcc>
        msg->conn->current_msg = msg;
 8015d16:	6823      	ldr	r3, [r4, #0]
 8015d18:	625c      	str	r4, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8015d1a:	6823      	ldr	r3, [r4, #0]
 8015d1c:	2100      	movs	r1, #0
 8015d1e:	6219      	str	r1, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8015d20:	6820      	ldr	r0, [r4, #0]
 8015d22:	f7ff f9bb 	bl	801509c <lwip_netconn_do_writemore>
 8015d26:	2800      	cmp	r0, #0
 8015d28:	d0d7      	beq.n	8015cda <lwip_netconn_do_write+0x2e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8015d2a:	6823      	ldr	r3, [r4, #0]
 8015d2c:	785b      	ldrb	r3, [r3, #1]
 8015d2e:	2b01      	cmp	r3, #1
 8015d30:	d006      	beq.n	8015d40 <lwip_netconn_do_write+0x94>
 8015d32:	4b17      	ldr	r3, [pc, #92]	; (8015d90 <lwip_netconn_do_write+0xe4>)
 8015d34:	f240 6289 	movw	r2, #1673	; 0x689
 8015d38:	4918      	ldr	r1, [pc, #96]	; (8015d9c <lwip_netconn_do_write+0xf0>)
 8015d3a:	4817      	ldr	r0, [pc, #92]	; (8015d98 <lwip_netconn_do_write+0xec>)
 8015d3c:	f009 fa9f 	bl	801f27e <iprintf>
          UNLOCK_TCPIP_CORE();
 8015d40:	4d17      	ldr	r5, [pc, #92]	; (8015da0 <lwip_netconn_do_write+0xf4>)
 8015d42:	4628      	mov	r0, r5
 8015d44:	f006 fd4a 	bl	801c7dc <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015d48:	6820      	ldr	r0, [r4, #0]
 8015d4a:	2100      	movs	r1, #0
 8015d4c:	300c      	adds	r0, #12
 8015d4e:	f006 fcef 	bl	801c730 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8015d52:	4628      	mov	r0, r5
 8015d54:	f006 fd3b 	bl	801c7ce <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8015d58:	6823      	ldr	r3, [r4, #0]
 8015d5a:	785b      	ldrb	r3, [r3, #1]
 8015d5c:	2b01      	cmp	r3, #1
 8015d5e:	d1bc      	bne.n	8015cda <lwip_netconn_do_write+0x2e>
 8015d60:	4b0b      	ldr	r3, [pc, #44]	; (8015d90 <lwip_netconn_do_write+0xe4>)
 8015d62:	f240 628d 	movw	r2, #1677	; 0x68d
 8015d66:	490d      	ldr	r1, [pc, #52]	; (8015d9c <lwip_netconn_do_write+0xf0>)
 8015d68:	480b      	ldr	r0, [pc, #44]	; (8015d98 <lwip_netconn_do_write+0xec>)
 8015d6a:	f009 fa88 	bl	801f27e <iprintf>
 8015d6e:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015d70:	6a1b      	ldr	r3, [r3, #32]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d0cc      	beq.n	8015d10 <lwip_netconn_do_write+0x64>
 8015d76:	e7c4      	b.n	8015d02 <lwip_netconn_do_write+0x56>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8015d78:	4b05      	ldr	r3, [pc, #20]	; (8015d90 <lwip_netconn_do_write+0xe4>)
 8015d7a:	f240 6284 	movw	r2, #1668	; 0x684
 8015d7e:	4909      	ldr	r1, [pc, #36]	; (8015da4 <lwip_netconn_do_write+0xf8>)
 8015d80:	4805      	ldr	r0, [pc, #20]	; (8015d98 <lwip_netconn_do_write+0xec>)
 8015d82:	f009 fa7c 	bl	801f27e <iprintf>
 8015d86:	e7c6      	b.n	8015d16 <lwip_netconn_do_write+0x6a>
        msg->err = ERR_CONN;
 8015d88:	22f5      	movs	r2, #245	; 0xf5
 8015d8a:	7102      	strb	r2, [r0, #4]
 8015d8c:	e797      	b.n	8015cbe <lwip_netconn_do_write+0x12>
 8015d8e:	bf00      	nop
 8015d90:	08020240 	.word	0x08020240
 8015d94:	080200a0 	.word	0x080200a0
 8015d98:	0801fe1c 	.word	0x0801fe1c
 8015d9c:	080200bc 	.word	0x080200bc
 8015da0:	2000a250 	.word	0x2000a250
 8015da4:	080200c4 	.word	0x080200c4

08015da8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8015da8:	b538      	push	{r3, r4, r5, lr}
 8015daa:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8015dac:	6800      	ldr	r0, [r0, #0]
 8015dae:	7842      	ldrb	r2, [r0, #1]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8015db0:	6843      	ldr	r3, [r0, #4]
 8015db2:	b123      	cbz	r3, 8015dbe <lwip_netconn_do_close+0x16>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8015db4:	7803      	ldrb	r3, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 8015db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015dba:	2b10      	cmp	r3, #16
 8015dbc:	d010      	beq.n	8015de0 <lwip_netconn_do_close+0x38>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8015dbe:	23f5      	movs	r3, #245	; 0xf5
 8015dc0:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8015dc2:	b160      	cbz	r0, 8015dde <lwip_netconn_do_close+0x36>
 8015dc4:	f006 fd24 	bl	801c810 <sys_arch_protect>
 8015dc8:	6823      	ldr	r3, [r4, #0]
 8015dca:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015dce:	f112 0f0c 	cmn.w	r2, #12
 8015dd2:	db02      	blt.n	8015dda <lwip_netconn_do_close+0x32>
 8015dd4:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8015dd8:	721a      	strb	r2, [r3, #8]
 8015dda:	f006 fd25 	bl	801c828 <sys_arch_unprotect>
 8015dde:	bd38      	pop	{r3, r4, r5, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8015de0:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8015de2:	2b03      	cmp	r3, #3
 8015de4:	d001      	beq.n	8015dea <lwip_netconn_do_close+0x42>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8015de6:	2a02      	cmp	r2, #2
 8015de8:	d0e9      	beq.n	8015dbe <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 8015dea:	2a03      	cmp	r2, #3
 8015dec:	d03d      	beq.n	8015e6a <lwip_netconn_do_close+0xc2>
    } else if (state == NETCONN_WRITE) {
 8015dee:	2a01      	cmp	r2, #1
 8015df0:	d03e      	beq.n	8015e70 <lwip_netconn_do_close+0xc8>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8015df2:	f013 0f01 	tst.w	r3, #1
 8015df6:	d13e      	bne.n	8015e76 <lwip_netconn_do_close+0xce>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015df8:	6823      	ldr	r3, [r4, #0]
 8015dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015dfc:	2a00      	cmp	r2, #0
 8015dfe:	d03d      	beq.n	8015e7c <lwip_netconn_do_close+0xd4>
 8015e00:	4b20      	ldr	r3, [pc, #128]	; (8015e84 <lwip_netconn_do_close+0xdc>)
 8015e02:	f240 721c 	movw	r2, #1820	; 0x71c
 8015e06:	4920      	ldr	r1, [pc, #128]	; (8015e88 <lwip_netconn_do_close+0xe0>)
 8015e08:	4820      	ldr	r0, [pc, #128]	; (8015e8c <lwip_netconn_do_close+0xe4>)
 8015e0a:	f009 fa38 	bl	801f27e <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8015e0e:	6823      	ldr	r3, [r4, #0]
 8015e10:	2204      	movs	r2, #4
 8015e12:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8015e14:	6823      	ldr	r3, [r4, #0]
 8015e16:	625c      	str	r4, [r3, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8015e18:	2100      	movs	r1, #0
 8015e1a:	6820      	ldr	r0, [r4, #0]
 8015e1c:	f7ff fa4e 	bl	80152bc <lwip_netconn_do_close_internal>
 8015e20:	2800      	cmp	r0, #0
 8015e22:	d0dc      	beq.n	8015dde <lwip_netconn_do_close+0x36>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8015e24:	6823      	ldr	r3, [r4, #0]
 8015e26:	785b      	ldrb	r3, [r3, #1]
 8015e28:	2b04      	cmp	r3, #4
 8015e2a:	d006      	beq.n	8015e3a <lwip_netconn_do_close+0x92>
 8015e2c:	4b15      	ldr	r3, [pc, #84]	; (8015e84 <lwip_netconn_do_close+0xdc>)
 8015e2e:	f240 7221 	movw	r2, #1825	; 0x721
 8015e32:	4917      	ldr	r1, [pc, #92]	; (8015e90 <lwip_netconn_do_close+0xe8>)
 8015e34:	4815      	ldr	r0, [pc, #84]	; (8015e8c <lwip_netconn_do_close+0xe4>)
 8015e36:	f009 fa22 	bl	801f27e <iprintf>
        UNLOCK_TCPIP_CORE();
 8015e3a:	4d16      	ldr	r5, [pc, #88]	; (8015e94 <lwip_netconn_do_close+0xec>)
 8015e3c:	4628      	mov	r0, r5
 8015e3e:	f006 fccd 	bl	801c7dc <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015e42:	6820      	ldr	r0, [r4, #0]
 8015e44:	2100      	movs	r1, #0
 8015e46:	300c      	adds	r0, #12
 8015e48:	f006 fc72 	bl	801c730 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8015e4c:	4628      	mov	r0, r5
 8015e4e:	f006 fcbe 	bl	801c7ce <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015e52:	6823      	ldr	r3, [r4, #0]
 8015e54:	785b      	ldrb	r3, [r3, #1]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d0c1      	beq.n	8015dde <lwip_netconn_do_close+0x36>
 8015e5a:	4b0a      	ldr	r3, [pc, #40]	; (8015e84 <lwip_netconn_do_close+0xdc>)
 8015e5c:	f240 7225 	movw	r2, #1829	; 0x725
 8015e60:	490b      	ldr	r1, [pc, #44]	; (8015e90 <lwip_netconn_do_close+0xe8>)
 8015e62:	480a      	ldr	r0, [pc, #40]	; (8015e8c <lwip_netconn_do_close+0xe4>)
 8015e64:	f009 fa0b 	bl	801f27e <iprintf>
 8015e68:	bd38      	pop	{r3, r4, r5, pc}
      msg->err = ERR_CONN;
 8015e6a:	23f5      	movs	r3, #245	; 0xf5
 8015e6c:	7123      	strb	r3, [r4, #4]
 8015e6e:	e7a8      	b.n	8015dc2 <lwip_netconn_do_close+0x1a>
      msg->err = ERR_INPROGRESS;
 8015e70:	23fb      	movs	r3, #251	; 0xfb
 8015e72:	7123      	strb	r3, [r4, #4]
 8015e74:	e7a5      	b.n	8015dc2 <lwip_netconn_do_close+0x1a>
        netconn_drain(msg->conn);
 8015e76:	f7ff fcc9 	bl	801580c <netconn_drain>
 8015e7a:	e7bd      	b.n	8015df8 <lwip_netconn_do_close+0x50>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8015e7c:	6a1b      	ldr	r3, [r3, #32]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d0c5      	beq.n	8015e0e <lwip_netconn_do_close+0x66>
 8015e82:	e7bd      	b.n	8015e00 <lwip_netconn_do_close+0x58>
 8015e84:	08020240 	.word	0x08020240
 8015e88:	080200a0 	.word	0x080200a0
 8015e8c:	0801fe1c 	.word	0x0801fe1c
 8015e90:	080200bc 	.word	0x080200bc
 8015e94:	2000a250 	.word	0x2000a250

08015e98 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8015e98:	b168      	cbz	r0, 8015eb6 <netbuf_delete+0x1e>
{
 8015e9a:	b510      	push	{r4, lr}
 8015e9c:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 8015e9e:	6800      	ldr	r0, [r0, #0]
 8015ea0:	b120      	cbz	r0, 8015eac <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8015ea2:	f002 fac9 	bl	8018438 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	6063      	str	r3, [r4, #4]
 8015eaa:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8015eac:	4621      	mov	r1, r4
 8015eae:	2005      	movs	r0, #5
 8015eb0:	f002 f8f2 	bl	8018098 <memp_free>
 8015eb4:	bd10      	pop	{r4, pc}
 8015eb6:	4770      	bx	lr

08015eb8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8015eb8:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8015eba:	b158      	cbz	r0, 8015ed4 <netbuf_data+0x1c>
 8015ebc:	4603      	mov	r3, r0
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8015ebe:	b191      	cbz	r1, 8015ee6 <netbuf_data+0x2e>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8015ec0:	b1d2      	cbz	r2, 8015ef8 <netbuf_data+0x40>

  if (buf->ptr == NULL) {
 8015ec2:	6840      	ldr	r0, [r0, #4]
 8015ec4:	b308      	cbz	r0, 8015f0a <netbuf_data+0x52>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 8015ec6:	6840      	ldr	r0, [r0, #4]
 8015ec8:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	895b      	ldrh	r3, [r3, #10]
 8015ece:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8015ed0:	2000      	movs	r0, #0
 8015ed2:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8015ed4:	4b0e      	ldr	r3, [pc, #56]	; (8015f10 <netbuf_data+0x58>)
 8015ed6:	22c2      	movs	r2, #194	; 0xc2
 8015ed8:	490e      	ldr	r1, [pc, #56]	; (8015f14 <netbuf_data+0x5c>)
 8015eda:	480f      	ldr	r0, [pc, #60]	; (8015f18 <netbuf_data+0x60>)
 8015edc:	f009 f9cf 	bl	801f27e <iprintf>
 8015ee0:	f06f 000f 	mvn.w	r0, #15
 8015ee4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8015ee6:	4b0a      	ldr	r3, [pc, #40]	; (8015f10 <netbuf_data+0x58>)
 8015ee8:	22c3      	movs	r2, #195	; 0xc3
 8015eea:	490c      	ldr	r1, [pc, #48]	; (8015f1c <netbuf_data+0x64>)
 8015eec:	480a      	ldr	r0, [pc, #40]	; (8015f18 <netbuf_data+0x60>)
 8015eee:	f009 f9c6 	bl	801f27e <iprintf>
 8015ef2:	f06f 000f 	mvn.w	r0, #15
 8015ef6:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8015ef8:	4b05      	ldr	r3, [pc, #20]	; (8015f10 <netbuf_data+0x58>)
 8015efa:	22c4      	movs	r2, #196	; 0xc4
 8015efc:	4908      	ldr	r1, [pc, #32]	; (8015f20 <netbuf_data+0x68>)
 8015efe:	4806      	ldr	r0, [pc, #24]	; (8015f18 <netbuf_data+0x60>)
 8015f00:	f009 f9bd 	bl	801f27e <iprintf>
 8015f04:	f06f 000f 	mvn.w	r0, #15
 8015f08:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 8015f0a:	f06f 0001 	mvn.w	r0, #1
}
 8015f0e:	bd08      	pop	{r3, pc}
 8015f10:	080202f8 	.word	0x080202f8
 8015f14:	0802036c 	.word	0x0802036c
 8015f18:	0801fe1c 	.word	0x0801fe1c
 8015f1c:	08020388 	.word	0x08020388
 8015f20:	080203a8 	.word	0x080203a8

08015f24 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8015f24:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8015f26:	b138      	cbz	r0, 8015f38 <netbuf_next+0x14>
  if (buf->ptr->next == NULL) {
 8015f28:	6843      	ldr	r3, [r0, #4]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	b17b      	cbz	r3, 8015f4e <netbuf_next+0x2a>
    return -1;
  }
  buf->ptr = buf->ptr->next;
 8015f2e:	6043      	str	r3, [r0, #4]
  if (buf->ptr->next == NULL) {
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	b153      	cbz	r3, 8015f4a <netbuf_next+0x26>
    return 1;
  }
  return 0;
 8015f34:	2000      	movs	r0, #0
}
 8015f36:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8015f38:	4b06      	ldr	r3, [pc, #24]	; (8015f54 <netbuf_next+0x30>)
 8015f3a:	22dc      	movs	r2, #220	; 0xdc
 8015f3c:	4906      	ldr	r1, [pc, #24]	; (8015f58 <netbuf_next+0x34>)
 8015f3e:	4807      	ldr	r0, [pc, #28]	; (8015f5c <netbuf_next+0x38>)
 8015f40:	f009 f99d 	bl	801f27e <iprintf>
 8015f44:	f04f 30ff 	mov.w	r0, #4294967295
 8015f48:	bd08      	pop	{r3, pc}
    return 1;
 8015f4a:	2001      	movs	r0, #1
 8015f4c:	bd08      	pop	{r3, pc}
    return -1;
 8015f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8015f52:	bd08      	pop	{r3, pc}
 8015f54:	080202f8 	.word	0x080202f8
 8015f58:	080203c4 	.word	0x080203c4
 8015f5c:	0801fe1c 	.word	0x0801fe1c

08015f60 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8015f60:	b500      	push	{lr}
 8015f62:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8015f64:	4b20      	ldr	r3, [pc, #128]	; (8015fe8 <tcpip_thread+0x88>)
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	b113      	cbz	r3, 8015f70 <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 8015f6a:	4a20      	ldr	r2, [pc, #128]	; (8015fec <tcpip_thread+0x8c>)
 8015f6c:	6810      	ldr	r0, [r2, #0]
 8015f6e:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8015f70:	481f      	ldr	r0, [pc, #124]	; (8015ff0 <tcpip_thread+0x90>)
 8015f72:	f006 fc2c 	bl	801c7ce <sys_mutex_lock>
 8015f76:	e00e      	b.n	8015f96 <tcpip_thread+0x36>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015f78:	4b1e      	ldr	r3, [pc, #120]	; (8015ff4 <tcpip_thread+0x94>)
 8015f7a:	2269      	movs	r2, #105	; 0x69
 8015f7c:	491e      	ldr	r1, [pc, #120]	; (8015ff8 <tcpip_thread+0x98>)
 8015f7e:	481f      	ldr	r0, [pc, #124]	; (8015ffc <tcpip_thread+0x9c>)
 8015f80:	f009 f97d 	bl	801f27e <iprintf>
      continue;
 8015f84:	e007      	b.n	8015f96 <tcpip_thread+0x36>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8015f86:	68da      	ldr	r2, [r3, #12]
 8015f88:	6899      	ldr	r1, [r3, #8]
 8015f8a:	6858      	ldr	r0, [r3, #4]
 8015f8c:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015f8e:	9901      	ldr	r1, [sp, #4]
 8015f90:	2008      	movs	r0, #8
 8015f92:	f002 f881 	bl	8018098 <memp_free>
    UNLOCK_TCPIP_CORE();
 8015f96:	4c16      	ldr	r4, [pc, #88]	; (8015ff0 <tcpip_thread+0x90>)
 8015f98:	4620      	mov	r0, r4
 8015f9a:	f006 fc1f 	bl	801c7dc <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8015f9e:	a901      	add	r1, sp, #4
 8015fa0:	4817      	ldr	r0, [pc, #92]	; (8016000 <tcpip_thread+0xa0>)
 8015fa2:	f006 fa85 	bl	801c4b0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8015fa6:	4620      	mov	r0, r4
 8015fa8:	f006 fc11 	bl	801c7ce <sys_mutex_lock>
    if (msg == NULL) {
 8015fac:	9b01      	ldr	r3, [sp, #4]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d0e2      	beq.n	8015f78 <tcpip_thread+0x18>
    switch (msg->type) {
 8015fb2:	781a      	ldrb	r2, [r3, #0]
 8015fb4:	2a03      	cmp	r2, #3
 8015fb6:	d00a      	beq.n	8015fce <tcpip_thread+0x6e>
 8015fb8:	2a04      	cmp	r2, #4
 8015fba:	d010      	beq.n	8015fde <tcpip_thread+0x7e>
 8015fbc:	2a02      	cmp	r2, #2
 8015fbe:	d0e2      	beq.n	8015f86 <tcpip_thread+0x26>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015fc0:	4b0c      	ldr	r3, [pc, #48]	; (8015ff4 <tcpip_thread+0x94>)
 8015fc2:	229b      	movs	r2, #155	; 0x9b
 8015fc4:	490c      	ldr	r1, [pc, #48]	; (8015ff8 <tcpip_thread+0x98>)
 8015fc6:	480d      	ldr	r0, [pc, #52]	; (8015ffc <tcpip_thread+0x9c>)
 8015fc8:	f009 f959 	bl	801f27e <iprintf>
      break;
 8015fcc:	e7e3      	b.n	8015f96 <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015fce:	685a      	ldr	r2, [r3, #4]
 8015fd0:	6898      	ldr	r0, [r3, #8]
 8015fd2:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015fd4:	9901      	ldr	r1, [sp, #4]
 8015fd6:	2007      	movs	r0, #7
 8015fd8:	f002 f85e 	bl	8018098 <memp_free>
      break;
 8015fdc:	e7db      	b.n	8015f96 <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015fde:	685a      	ldr	r2, [r3, #4]
 8015fe0:	6898      	ldr	r0, [r3, #8]
 8015fe2:	4790      	blx	r2
      break;
 8015fe4:	e7d7      	b.n	8015f96 <tcpip_thread+0x36>
 8015fe6:	bf00      	nop
 8015fe8:	20009380 	.word	0x20009380
 8015fec:	20009384 	.word	0x20009384
 8015ff0:	2000a250 	.word	0x2000a250
 8015ff4:	08020448 	.word	0x08020448
 8015ff8:	08020478 	.word	0x08020478
 8015ffc:	0801fe1c 	.word	0x0801fe1c
 8016000:	2000937c 	.word	0x2000937c

08016004 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8016004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016006:	4607      	mov	r7, r0
 8016008:	460e      	mov	r6, r1
 801600a:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 801600c:	4813      	ldr	r0, [pc, #76]	; (801605c <tcpip_inpkt+0x58>)
 801600e:	f006 fb6d 	bl	801c6ec <sys_mbox_valid>
 8016012:	b188      	cbz	r0, 8016038 <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8016014:	2008      	movs	r0, #8
 8016016:	f002 f825 	bl	8018064 <memp_malloc>
  if (msg == NULL) {
 801601a:	4604      	mov	r4, r0
 801601c:	b1d0      	cbz	r0, 8016054 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 801601e:	2302      	movs	r3, #2
 8016020:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8016022:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8016024:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8016026:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8016028:	4601      	mov	r1, r0
 801602a:	480c      	ldr	r0, [pc, #48]	; (801605c <tcpip_inpkt+0x58>)
 801602c:	f006 fb15 	bl	801c65a <sys_mbox_trypost>
 8016030:	4603      	mov	r3, r0
 8016032:	b940      	cbnz	r0, 8016046 <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8016034:	4618      	mov	r0, r3
 8016036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8016038:	4b09      	ldr	r3, [pc, #36]	; (8016060 <tcpip_inpkt+0x5c>)
 801603a:	22b5      	movs	r2, #181	; 0xb5
 801603c:	4909      	ldr	r1, [pc, #36]	; (8016064 <tcpip_inpkt+0x60>)
 801603e:	480a      	ldr	r0, [pc, #40]	; (8016068 <tcpip_inpkt+0x64>)
 8016040:	f009 f91d 	bl	801f27e <iprintf>
 8016044:	e7e6      	b.n	8016014 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016046:	4621      	mov	r1, r4
 8016048:	2008      	movs	r0, #8
 801604a:	f002 f825 	bl	8018098 <memp_free>
    return ERR_MEM;
 801604e:	f04f 33ff 	mov.w	r3, #4294967295
 8016052:	e7ef      	b.n	8016034 <tcpip_inpkt+0x30>
    return ERR_MEM;
 8016054:	f04f 33ff 	mov.w	r3, #4294967295
 8016058:	e7ec      	b.n	8016034 <tcpip_inpkt+0x30>
 801605a:	bf00      	nop
 801605c:	2000937c 	.word	0x2000937c
 8016060:	08020448 	.word	0x08020448
 8016064:	08020438 	.word	0x08020438
 8016068:	0801fe1c 	.word	0x0801fe1c

0801606c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801606c:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801606e:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8016072:	f013 0f18 	tst.w	r3, #24
 8016076:	d103      	bne.n	8016080 <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8016078:	4a03      	ldr	r2, [pc, #12]	; (8016088 <tcpip_input+0x1c>)
 801607a:	f7ff ffc3 	bl	8016004 <tcpip_inpkt>
}
 801607e:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 8016080:	4a02      	ldr	r2, [pc, #8]	; (801608c <tcpip_input+0x20>)
 8016082:	f7ff ffbf 	bl	8016004 <tcpip_inpkt>
 8016086:	bd08      	pop	{r3, pc}
 8016088:	08016de1 	.word	0x08016de1
 801608c:	0801c4f1 	.word	0x0801c4f1

08016090 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8016090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016092:	4607      	mov	r7, r0
 8016094:	460e      	mov	r6, r1
 8016096:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8016098:	4816      	ldr	r0, [pc, #88]	; (80160f4 <tcpip_callback_with_block+0x64>)
 801609a:	f006 fb27 	bl	801c6ec <sys_mbox_valid>
 801609e:	b188      	cbz	r0, 80160c4 <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80160a0:	2007      	movs	r0, #7
 80160a2:	f001 ffdf 	bl	8018064 <memp_malloc>
  if (msg == NULL) {
 80160a6:	4604      	mov	r4, r0
 80160a8:	b300      	cbz	r0, 80160ec <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80160aa:	2303      	movs	r3, #3
 80160ac:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 80160ae:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80160b0:	6086      	str	r6, [r0, #8]
  if (block) {
 80160b2:	b975      	cbnz	r5, 80160d2 <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80160b4:	4601      	mov	r1, r0
 80160b6:	480f      	ldr	r0, [pc, #60]	; (80160f4 <tcpip_callback_with_block+0x64>)
 80160b8:	f006 facf 	bl	801c65a <sys_mbox_trypost>
 80160bc:	4603      	mov	r3, r0
 80160be:	b970      	cbnz	r0, 80160de <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80160c4:	4b0c      	ldr	r3, [pc, #48]	; (80160f8 <tcpip_callback_with_block+0x68>)
 80160c6:	22ee      	movs	r2, #238	; 0xee
 80160c8:	490c      	ldr	r1, [pc, #48]	; (80160fc <tcpip_callback_with_block+0x6c>)
 80160ca:	480d      	ldr	r0, [pc, #52]	; (8016100 <tcpip_callback_with_block+0x70>)
 80160cc:	f009 f8d7 	bl	801f27e <iprintf>
 80160d0:	e7e6      	b.n	80160a0 <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 80160d2:	4601      	mov	r1, r0
 80160d4:	4807      	ldr	r0, [pc, #28]	; (80160f4 <tcpip_callback_with_block+0x64>)
 80160d6:	f006 fab4 	bl	801c642 <sys_mbox_post>
  return ERR_OK;
 80160da:	2300      	movs	r3, #0
 80160dc:	e7f0      	b.n	80160c0 <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80160de:	4621      	mov	r1, r4
 80160e0:	2007      	movs	r0, #7
 80160e2:	f001 ffd9 	bl	8018098 <memp_free>
      return ERR_MEM;
 80160e6:	f04f 33ff 	mov.w	r3, #4294967295
 80160ea:	e7e9      	b.n	80160c0 <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 80160ec:	f04f 33ff 	mov.w	r3, #4294967295
 80160f0:	e7e6      	b.n	80160c0 <tcpip_callback_with_block+0x30>
 80160f2:	bf00      	nop
 80160f4:	2000937c 	.word	0x2000937c
 80160f8:	08020448 	.word	0x08020448
 80160fc:	08020438 	.word	0x08020438
 8016100:	0801fe1c 	.word	0x0801fe1c

08016104 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8016104:	b570      	push	{r4, r5, r6, lr}
 8016106:	4605      	mov	r5, r0
 8016108:	460e      	mov	r6, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801610a:	4c05      	ldr	r4, [pc, #20]	; (8016120 <tcpip_send_msg_wait_sem+0x1c>)
 801610c:	4620      	mov	r0, r4
 801610e:	f006 fb5e 	bl	801c7ce <sys_mutex_lock>
  fn(apimsg);
 8016112:	4630      	mov	r0, r6
 8016114:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 8016116:	4620      	mov	r0, r4
 8016118:	f006 fb60 	bl	801c7dc <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801611c:	2000      	movs	r0, #0
 801611e:	bd70      	pop	{r4, r5, r6, pc}
 8016120:	2000a250 	.word	0x2000a250

08016124 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8016124:	b530      	push	{r4, r5, lr}
 8016126:	b083      	sub	sp, #12
 8016128:	4605      	mov	r5, r0
 801612a:	460c      	mov	r4, r1
  lwip_init();
 801612c:	f000 f870 	bl	8016210 <lwip_init>

  tcpip_init_done = initfunc;
 8016130:	4b13      	ldr	r3, [pc, #76]	; (8016180 <tcpip_init+0x5c>)
 8016132:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8016134:	4b13      	ldr	r3, [pc, #76]	; (8016184 <tcpip_init+0x60>)
 8016136:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016138:	2106      	movs	r1, #6
 801613a:	4813      	ldr	r0, [pc, #76]	; (8016188 <tcpip_init+0x64>)
 801613c:	f006 fa64 	bl	801c608 <sys_mbox_new>
 8016140:	b970      	cbnz	r0, 8016160 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016142:	4812      	ldr	r0, [pc, #72]	; (801618c <tcpip_init+0x68>)
 8016144:	f006 fb32 	bl	801c7ac <sys_mutex_new>
 8016148:	b990      	cbnz	r0, 8016170 <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801614a:	2302      	movs	r3, #2
 801614c:	9300      	str	r3, [sp, #0]
 801614e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016152:	2200      	movs	r2, #0
 8016154:	490e      	ldr	r1, [pc, #56]	; (8016190 <tcpip_init+0x6c>)
 8016156:	480f      	ldr	r0, [pc, #60]	; (8016194 <tcpip_init+0x70>)
 8016158:	f006 fb45 	bl	801c7e6 <sys_thread_new>
}
 801615c:	b003      	add	sp, #12
 801615e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016160:	4b0d      	ldr	r3, [pc, #52]	; (8016198 <tcpip_init+0x74>)
 8016162:	f240 12d5 	movw	r2, #469	; 0x1d5
 8016166:	490d      	ldr	r1, [pc, #52]	; (801619c <tcpip_init+0x78>)
 8016168:	480d      	ldr	r0, [pc, #52]	; (80161a0 <tcpip_init+0x7c>)
 801616a:	f009 f888 	bl	801f27e <iprintf>
 801616e:	e7e8      	b.n	8016142 <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8016170:	4b09      	ldr	r3, [pc, #36]	; (8016198 <tcpip_init+0x74>)
 8016172:	f240 12d9 	movw	r2, #473	; 0x1d9
 8016176:	490b      	ldr	r1, [pc, #44]	; (80161a4 <tcpip_init+0x80>)
 8016178:	4809      	ldr	r0, [pc, #36]	; (80161a0 <tcpip_init+0x7c>)
 801617a:	f009 f880 	bl	801f27e <iprintf>
 801617e:	e7e4      	b.n	801614a <tcpip_init+0x26>
 8016180:	20009380 	.word	0x20009380
 8016184:	20009384 	.word	0x20009384
 8016188:	2000937c 	.word	0x2000937c
 801618c:	2000a250 	.word	0x2000a250
 8016190:	08015f61 	.word	0x08015f61
 8016194:	08020428 	.word	0x08020428
 8016198:	08020448 	.word	0x08020448
 801619c:	080203e0 	.word	0x080203e0
 80161a0:	0801fe1c 	.word	0x0801fe1c
 80161a4:	08020404 	.word	0x08020404

080161a8 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80161a8:	b1c8      	cbz	r0, 80161de <fs_open+0x36>
{
 80161aa:	b570      	push	{r4, r5, r6, lr}
 80161ac:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 80161ae:	b1c9      	cbz	r1, 80161e4 <fs_open+0x3c>
 80161b0:	460d      	mov	r5, r1
 80161b2:	4c0e      	ldr	r4, [pc, #56]	; (80161ec <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80161b4:	b184      	cbz	r4, 80161d8 <fs_open+0x30>
    if (!strcmp(name, (const char *)f->name)) {
 80161b6:	6861      	ldr	r1, [r4, #4]
 80161b8:	4628      	mov	r0, r5
 80161ba:	f7f9 ff41 	bl	8010040 <strcmp>
 80161be:	b108      	cbz	r0, 80161c4 <fs_open+0x1c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80161c0:	6824      	ldr	r4, [r4, #0]
 80161c2:	e7f7      	b.n	80161b4 <fs_open+0xc>
      file->data = (const char *)f->data;
 80161c4:	68a3      	ldr	r3, [r4, #8]
 80161c6:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 80161c8:	68e3      	ldr	r3, [r4, #12]
 80161ca:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 80161cc:	68e3      	ldr	r3, [r4, #12]
 80161ce:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 80161d0:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 80161d2:	7c23      	ldrb	r3, [r4, #16]
 80161d4:	7433      	strb	r3, [r6, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80161d6:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  /* file not found */
  return ERR_VAL;
 80161d8:	f06f 0005 	mvn.w	r0, #5
 80161dc:	bd70      	pop	{r4, r5, r6, pc}
     return ERR_ARG;
 80161de:	f06f 000f 	mvn.w	r0, #15
 80161e2:	4770      	bx	lr
 80161e4:	f06f 000f 	mvn.w	r0, #15
}
 80161e8:	bd70      	pop	{r4, r5, r6, pc}
 80161ea:	bf00      	nop
 80161ec:	08023010 	.word	0x08023010

080161f0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80161f0:	4770      	bx	lr

080161f2 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 80161f2:	ba40      	rev16	r0, r0
}
 80161f4:	b280      	uxth	r0, r0
 80161f6:	4770      	bx	lr

080161f8 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 80161f8:	0203      	lsls	r3, r0, #8
 80161fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80161fe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8016202:	0a02      	lsrs	r2, r0, #8
 8016204:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016208:	4313      	orrs	r3, r2
}
 801620a:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 801620e:	4770      	bx	lr

08016210 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8016210:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8016212:	f006 fabf 	bl	801c794 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8016216:	f001 fce7 	bl	8017be8 <mem_init>
  memp_init();
 801621a:	f001 ff13 	bl	8018044 <memp_init>
  pbuf_init();
  netif_init();
 801621e:	f001 ff66 	bl	80180ee <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8016222:	f002 fcbb 	bl	8018b9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8016226:	f006 f91d 	bl	801c464 <sys_timeouts_init>
 801622a:	bd08      	pop	{r3, pc}

0801622c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801622c:	b510      	push	{r4, lr}
 801622e:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016230:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8016234:	00d3      	lsls	r3, r2, #3
 8016236:	4a09      	ldr	r2, [pc, #36]	; (801625c <etharp_free_entry+0x30>)
 8016238:	58d0      	ldr	r0, [r2, r3]
 801623a:	b138      	cbz	r0, 801624c <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801623c:	f002 f8fc 	bl	8018438 <pbuf_free>
    arp_table[i].q = NULL;
 8016240:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8016244:	00d3      	lsls	r3, r2, #3
 8016246:	2100      	movs	r1, #0
 8016248:	4a04      	ldr	r2, [pc, #16]	; (801625c <etharp_free_entry+0x30>)
 801624a:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801624c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016250:	00e2      	lsls	r2, r4, #3
 8016252:	4b02      	ldr	r3, [pc, #8]	; (801625c <etharp_free_entry+0x30>)
 8016254:	4413      	add	r3, r2
 8016256:	2200      	movs	r2, #0
 8016258:	751a      	strb	r2, [r3, #20]
 801625a:	bd10      	pop	{r4, pc}
 801625c:	20009388 	.word	0x20009388

08016260 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8016260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016264:	f04f 0e00 	mov.w	lr, #0
 8016268:	46f3      	mov	fp, lr
 801626a:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 801626c:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016270:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 8016272:	4667      	mov	r7, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016274:	46e0      	mov	r8, ip
 8016276:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016278:	e003      	b.n	8016282 <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801627a:	b96c      	cbnz	r4, 8016298 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801627c:	b25f      	sxtb	r7, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801627e:	3301      	adds	r3, #1
 8016280:	b2db      	uxtb	r3, r3
 8016282:	2b09      	cmp	r3, #9
 8016284:	d845      	bhi.n	8016312 <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 8016286:	461a      	mov	r2, r3
 8016288:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801628c:	00e5      	lsls	r5, r4, #3
 801628e:	4c59      	ldr	r4, [pc, #356]	; (80163f4 <etharp_find_entry+0x194>)
 8016290:	442c      	add	r4, r5
 8016292:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016294:	2f0a      	cmp	r7, #10
 8016296:	d0f0      	beq.n	801627a <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016298:	2c00      	cmp	r4, #0
 801629a:	d0f0      	beq.n	801627e <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801629c:	b140      	cbz	r0, 80162b0 <etharp_find_entry+0x50>
 801629e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80162a2:	00ee      	lsls	r6, r5, #3
 80162a4:	4d53      	ldr	r5, [pc, #332]	; (80163f4 <etharp_find_entry+0x194>)
 80162a6:	4435      	add	r5, r6
 80162a8:	686d      	ldr	r5, [r5, #4]
 80162aa:	6806      	ldr	r6, [r0, #0]
 80162ac:	42ae      	cmp	r6, r5
 80162ae:	d00f      	beq.n	80162d0 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80162b0:	2c01      	cmp	r4, #1
 80162b2:	d010      	beq.n	80162d6 <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80162b4:	2c01      	cmp	r4, #1
 80162b6:	d9e2      	bls.n	801627e <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80162b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80162bc:	00d4      	lsls	r4, r2, #3
 80162be:	4a4d      	ldr	r2, [pc, #308]	; (80163f4 <etharp_find_entry+0x194>)
 80162c0:	4422      	add	r2, r4
 80162c2:	8a52      	ldrh	r2, [r2, #18]
 80162c4:	4596      	cmp	lr, r2
 80162c6:	d8da      	bhi.n	801627e <etharp_find_entry+0x1e>
            old_stable = i;
 80162c8:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 80162cc:	4696      	mov	lr, r2
 80162ce:	e7d6      	b.n	801627e <etharp_find_entry+0x1e>
        return i;
 80162d0:	b258      	sxtb	r0, r3
 80162d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 80162d6:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80162da:	00ec      	lsls	r4, r5, #3
 80162dc:	4d45      	ldr	r5, [pc, #276]	; (80163f4 <etharp_find_entry+0x194>)
 80162de:	592c      	ldr	r4, [r5, r4]
 80162e0:	b15c      	cbz	r4, 80162fa <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 80162e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80162e6:	00d4      	lsls	r4, r2, #3
 80162e8:	462a      	mov	r2, r5
 80162ea:	4422      	add	r2, r4
 80162ec:	8a52      	ldrh	r2, [r2, #18]
 80162ee:	4591      	cmp	r9, r2
 80162f0:	d8c5      	bhi.n	801627e <etharp_find_entry+0x1e>
            old_queue = i;
 80162f2:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 80162f6:	4691      	mov	r9, r2
 80162f8:	e7c1      	b.n	801627e <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 80162fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80162fe:	00d4      	lsls	r4, r2, #3
 8016300:	4a3c      	ldr	r2, [pc, #240]	; (80163f4 <etharp_find_entry+0x194>)
 8016302:	4422      	add	r2, r4
 8016304:	8a52      	ldrh	r2, [r2, #18]
 8016306:	4593      	cmp	fp, r2
 8016308:	d8b9      	bhi.n	801627e <etharp_find_entry+0x1e>
            old_pending = i;
 801630a:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 801630e:	4693      	mov	fp, r2
 8016310:	e7b5      	b.n	801627e <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016312:	f011 0f02 	tst.w	r1, #2
 8016316:	d165      	bne.n	80163e4 <etharp_find_entry+0x184>
 8016318:	2f0a      	cmp	r7, #10
 801631a:	d020      	beq.n	801635e <etharp_find_entry+0xfe>
 801631c:	4605      	mov	r5, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801631e:	2f09      	cmp	r7, #9
 8016320:	dc24      	bgt.n	801636c <etharp_find_entry+0x10c>
    i = empty;
 8016322:	b2ff      	uxtb	r7, r7
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016324:	2f09      	cmp	r7, #9
 8016326:	d84d      	bhi.n	80163c4 <etharp_find_entry+0x164>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016328:	463c      	mov	r4, r7
 801632a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 801632e:	00da      	lsls	r2, r3, #3
 8016330:	4b30      	ldr	r3, [pc, #192]	; (80163f4 <etharp_find_entry+0x194>)
 8016332:	4413      	add	r3, r2
 8016334:	7d1b      	ldrb	r3, [r3, #20]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d14c      	bne.n	80163d4 <etharp_find_entry+0x174>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801633a:	b135      	cbz	r5, 801634a <etharp_find_entry+0xea>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801633c:	6829      	ldr	r1, [r5, #0]
 801633e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8016342:	00da      	lsls	r2, r3, #3
 8016344:	4b2b      	ldr	r3, [pc, #172]	; (80163f4 <etharp_find_entry+0x194>)
 8016346:	4413      	add	r3, r2
 8016348:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 801634a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801634e:	00e2      	lsls	r2, r4, #3
 8016350:	4b28      	ldr	r3, [pc, #160]	; (80163f4 <etharp_find_entry+0x194>)
 8016352:	4413      	add	r3, r2
 8016354:	2200      	movs	r2, #0
 8016356:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8016358:	b278      	sxtb	r0, r7
 801635a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801635e:	f011 0f01 	tst.w	r1, #1
 8016362:	d1db      	bne.n	801631c <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 8016364:	f04f 30ff 	mov.w	r0, #4294967295
 8016368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 801636c:	f1b8 0f09 	cmp.w	r8, #9
 8016370:	dc14      	bgt.n	801639c <etharp_find_entry+0x13c>
      i = old_stable;
 8016372:	fa5f f788 	uxtb.w	r7, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016376:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 801637a:	00d3      	lsls	r3, r2, #3
 801637c:	4a1d      	ldr	r2, [pc, #116]	; (80163f4 <etharp_find_entry+0x194>)
 801637e:	58d3      	ldr	r3, [r2, r3]
 8016380:	b133      	cbz	r3, 8016390 <etharp_find_entry+0x130>
 8016382:	4b1d      	ldr	r3, [pc, #116]	; (80163f8 <etharp_find_entry+0x198>)
 8016384:	f240 126f 	movw	r2, #367	; 0x16f
 8016388:	491c      	ldr	r1, [pc, #112]	; (80163fc <etharp_find_entry+0x19c>)
 801638a:	481d      	ldr	r0, [pc, #116]	; (8016400 <etharp_find_entry+0x1a0>)
 801638c:	f008 ff77 	bl	801f27e <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016390:	2f09      	cmp	r7, #9
 8016392:	d80f      	bhi.n	80163b4 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 8016394:	4638      	mov	r0, r7
 8016396:	f7ff ff49 	bl	801622c <etharp_free_entry>
 801639a:	e7c3      	b.n	8016324 <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801639c:	f1ba 0f09 	cmp.w	sl, #9
 80163a0:	dc02      	bgt.n	80163a8 <etharp_find_entry+0x148>
      i = old_pending;
 80163a2:	fa5f f78a 	uxtb.w	r7, sl
 80163a6:	e7f3      	b.n	8016390 <etharp_find_entry+0x130>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80163a8:	f1bc 0f09 	cmp.w	ip, #9
 80163ac:	dc1e      	bgt.n	80163ec <etharp_find_entry+0x18c>
      i = old_queue;
 80163ae:	fa5f f78c 	uxtb.w	r7, ip
 80163b2:	e7ed      	b.n	8016390 <etharp_find_entry+0x130>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80163b4:	4b10      	ldr	r3, [pc, #64]	; (80163f8 <etharp_find_entry+0x198>)
 80163b6:	f240 1281 	movw	r2, #385	; 0x181
 80163ba:	4912      	ldr	r1, [pc, #72]	; (8016404 <etharp_find_entry+0x1a4>)
 80163bc:	4810      	ldr	r0, [pc, #64]	; (8016400 <etharp_find_entry+0x1a0>)
 80163be:	f008 ff5e 	bl	801f27e <iprintf>
 80163c2:	e7e7      	b.n	8016394 <etharp_find_entry+0x134>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80163c4:	4b0c      	ldr	r3, [pc, #48]	; (80163f8 <etharp_find_entry+0x198>)
 80163c6:	f240 1285 	movw	r2, #389	; 0x185
 80163ca:	490e      	ldr	r1, [pc, #56]	; (8016404 <etharp_find_entry+0x1a4>)
 80163cc:	480c      	ldr	r0, [pc, #48]	; (8016400 <etharp_find_entry+0x1a0>)
 80163ce:	f008 ff56 	bl	801f27e <iprintf>
 80163d2:	e7a9      	b.n	8016328 <etharp_find_entry+0xc8>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80163d4:	4b08      	ldr	r3, [pc, #32]	; (80163f8 <etharp_find_entry+0x198>)
 80163d6:	f240 1287 	movw	r2, #391	; 0x187
 80163da:	490b      	ldr	r1, [pc, #44]	; (8016408 <etharp_find_entry+0x1a8>)
 80163dc:	4808      	ldr	r0, [pc, #32]	; (8016400 <etharp_find_entry+0x1a0>)
 80163de:	f008 ff4e 	bl	801f27e <iprintf>
 80163e2:	e7aa      	b.n	801633a <etharp_find_entry+0xda>
    return (s8_t)ERR_MEM;
 80163e4:	f04f 30ff 	mov.w	r0, #4294967295
 80163e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 80163ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80163f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163f4:	20009388 	.word	0x20009388
 80163f8:	08023024 	.word	0x08023024
 80163fc:	0802305c 	.word	0x0802305c
 8016400:	0801fe1c 	.word	0x0801fe1c
 8016404:	08023074 	.word	0x08023074
 8016408:	08023088 	.word	0x08023088

0801640c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801640c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801640e:	b083      	sub	sp, #12
 8016410:	4604      	mov	r4, r0
 8016412:	460d      	mov	r5, r1
 8016414:	4616      	mov	r6, r2
 8016416:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016418:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801641c:	2b06      	cmp	r3, #6
 801641e:	d006      	beq.n	801642e <etharp_update_arp_entry+0x22>
 8016420:	4b28      	ldr	r3, [pc, #160]	; (80164c4 <etharp_update_arp_entry+0xb8>)
 8016422:	f240 12ab 	movw	r2, #427	; 0x1ab
 8016426:	4928      	ldr	r1, [pc, #160]	; (80164c8 <etharp_update_arp_entry+0xbc>)
 8016428:	4828      	ldr	r0, [pc, #160]	; (80164cc <etharp_update_arp_entry+0xc0>)
 801642a:	f008 ff28 	bl	801f27e <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801642e:	2d00      	cmp	r5, #0
 8016430:	d039      	beq.n	80164a6 <etharp_update_arp_entry+0x9a>
 8016432:	6828      	ldr	r0, [r5, #0]
 8016434:	2800      	cmp	r0, #0
 8016436:	d039      	beq.n	80164ac <etharp_update_arp_entry+0xa0>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016438:	4621      	mov	r1, r4
 801643a:	f000 fe34 	bl	80170a6 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801643e:	2800      	cmp	r0, #0
 8016440:	d137      	bne.n	80164b2 <etharp_update_arp_entry+0xa6>
      ip4_addr_ismulticast(ipaddr)) {
 8016442:	682b      	ldr	r3, [r5, #0]
 8016444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016448:	2be0      	cmp	r3, #224	; 0xe0
 801644a:	d035      	beq.n	80164b8 <etharp_update_arp_entry+0xac>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801644c:	4622      	mov	r2, r4
 801644e:	4639      	mov	r1, r7
 8016450:	4628      	mov	r0, r5
 8016452:	f7ff ff05 	bl	8016260 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 8016456:	2800      	cmp	r0, #0
 8016458:	db23      	blt.n	80164a2 <etharp_update_arp_entry+0x96>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801645a:	4d1d      	ldr	r5, [pc, #116]	; (80164d0 <etharp_update_arp_entry+0xc4>)
 801645c:	0042      	lsls	r2, r0, #1
 801645e:	1813      	adds	r3, r2, r0
 8016460:	00d9      	lsls	r1, r3, #3
 8016462:	186f      	adds	r7, r5, r1
 8016464:	2302      	movs	r3, #2
 8016466:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016468:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801646a:	460b      	mov	r3, r1
 801646c:	3308      	adds	r3, #8
 801646e:	442b      	add	r3, r5
 8016470:	6832      	ldr	r2, [r6, #0]
 8016472:	605a      	str	r2, [r3, #4]
 8016474:	88b2      	ldrh	r2, [r6, #4]
 8016476:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016478:	2300      	movs	r3, #0
 801647a:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801647c:	586d      	ldr	r5, [r5, r1]
 801647e:	b1f5      	cbz	r5, 80164be <etharp_update_arp_entry+0xb2>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 8016480:	2700      	movs	r7, #0
 8016482:	4a13      	ldr	r2, [pc, #76]	; (80164d0 <etharp_update_arp_entry+0xc4>)
 8016484:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016486:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801648a:	9300      	str	r3, [sp, #0]
 801648c:	4633      	mov	r3, r6
 801648e:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8016492:	4629      	mov	r1, r5
 8016494:	4620      	mov	r0, r4
 8016496:	f006 f87f 	bl	801c598 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801649a:	4628      	mov	r0, r5
 801649c:	f001 ffcc 	bl	8018438 <pbuf_free>
  }
  return ERR_OK;
 80164a0:	4638      	mov	r0, r7
}
 80164a2:	b003      	add	sp, #12
 80164a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 80164a6:	f06f 000f 	mvn.w	r0, #15
 80164aa:	e7fa      	b.n	80164a2 <etharp_update_arp_entry+0x96>
 80164ac:	f06f 000f 	mvn.w	r0, #15
 80164b0:	e7f7      	b.n	80164a2 <etharp_update_arp_entry+0x96>
 80164b2:	f06f 000f 	mvn.w	r0, #15
 80164b6:	e7f4      	b.n	80164a2 <etharp_update_arp_entry+0x96>
 80164b8:	f06f 000f 	mvn.w	r0, #15
 80164bc:	e7f1      	b.n	80164a2 <etharp_update_arp_entry+0x96>
  return ERR_OK;
 80164be:	2000      	movs	r0, #0
 80164c0:	e7ef      	b.n	80164a2 <etharp_update_arp_entry+0x96>
 80164c2:	bf00      	nop
 80164c4:	08023024 	.word	0x08023024
 80164c8:	080231dc 	.word	0x080231dc
 80164cc:	0801fe1c 	.word	0x0801fe1c
 80164d0:	20009388 	.word	0x20009388

080164d4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80164d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164d8:	b082      	sub	sp, #8
 80164da:	4689      	mov	r9, r1
 80164dc:	4692      	mov	sl, r2
 80164de:	4698      	mov	r8, r3
 80164e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80164e2:	4607      	mov	r7, r0
 80164e4:	2800      	cmp	r0, #0
 80164e6:	d048      	beq.n	801657a <etharp_raw+0xa6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80164e8:	2200      	movs	r2, #0
 80164ea:	211c      	movs	r1, #28
 80164ec:	2002      	movs	r0, #2
 80164ee:	f002 f80f 	bl	8018510 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80164f2:	4606      	mov	r6, r0
 80164f4:	2800      	cmp	r0, #0
 80164f6:	d050      	beq.n	801659a <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80164f8:	8943      	ldrh	r3, [r0, #10]
 80164fa:	2b1b      	cmp	r3, #27
 80164fc:	d945      	bls.n	801658a <etharp_raw+0xb6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80164fe:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016500:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8016504:	f7ff fe75 	bl	80161f2 <lwip_htons>
 8016508:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801650a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801650e:	2b06      	cmp	r3, #6
 8016510:	d006      	beq.n	8016520 <etharp_raw+0x4c>
 8016512:	4b23      	ldr	r3, [pc, #140]	; (80165a0 <etharp_raw+0xcc>)
 8016514:	f240 426b 	movw	r2, #1131	; 0x46b
 8016518:	4922      	ldr	r1, [pc, #136]	; (80165a4 <etharp_raw+0xd0>)
 801651a:	4823      	ldr	r0, [pc, #140]	; (80165a8 <etharp_raw+0xd4>)
 801651c:	f008 feaf 	bl	801f27e <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8016520:	f8d8 3000 	ldr.w	r3, [r8]
 8016524:	60a3      	str	r3, [r4, #8]
 8016526:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801652a:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801652c:	682b      	ldr	r3, [r5, #0]
 801652e:	f8c4 3012 	str.w	r3, [r4, #18]
 8016532:	88ab      	ldrh	r3, [r5, #4]
 8016534:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8016536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801653e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8016544:	2500      	movs	r5, #0
 8016546:	7025      	strb	r5, [r4, #0]
 8016548:	2301      	movs	r3, #1
 801654a:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801654c:	2308      	movs	r3, #8
 801654e:	70a3      	strb	r3, [r4, #2]
 8016550:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016552:	2306      	movs	r3, #6
 8016554:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016556:	2304      	movs	r3, #4
 8016558:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801655a:	f640 0306 	movw	r3, #2054	; 0x806
 801655e:	9300      	str	r3, [sp, #0]
 8016560:	4653      	mov	r3, sl
 8016562:	464a      	mov	r2, r9
 8016564:	4631      	mov	r1, r6
 8016566:	4638      	mov	r0, r7
 8016568:	f006 f816 	bl	801c598 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801656c:	4630      	mov	r0, r6
 801656e:	f001 ff63 	bl	8018438 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8016572:	4628      	mov	r0, r5
}
 8016574:	b002      	add	sp, #8
 8016576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801657a:	4b09      	ldr	r3, [pc, #36]	; (80165a0 <etharp_raw+0xcc>)
 801657c:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8016580:	490a      	ldr	r1, [pc, #40]	; (80165ac <etharp_raw+0xd8>)
 8016582:	4809      	ldr	r0, [pc, #36]	; (80165a8 <etharp_raw+0xd4>)
 8016584:	f008 fe7b 	bl	801f27e <iprintf>
 8016588:	e7ae      	b.n	80164e8 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801658a:	4b05      	ldr	r3, [pc, #20]	; (80165a0 <etharp_raw+0xcc>)
 801658c:	f240 4264 	movw	r2, #1124	; 0x464
 8016590:	4907      	ldr	r1, [pc, #28]	; (80165b0 <etharp_raw+0xdc>)
 8016592:	4805      	ldr	r0, [pc, #20]	; (80165a8 <etharp_raw+0xd4>)
 8016594:	f008 fe73 	bl	801f27e <iprintf>
 8016598:	e7b1      	b.n	80164fe <etharp_raw+0x2a>
    return ERR_MEM;
 801659a:	f04f 30ff 	mov.w	r0, #4294967295
 801659e:	e7e9      	b.n	8016574 <etharp_raw+0xa0>
 80165a0:	08023024 	.word	0x08023024
 80165a4:	08023198 	.word	0x08023198
 80165a8:	0801fe1c 	.word	0x0801fe1c
 80165ac:	08023154 	.word	0x08023154
 80165b0:	08023164 	.word	0x08023164

080165b4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80165b4:	b530      	push	{r4, r5, lr}
 80165b6:	b085      	sub	sp, #20
 80165b8:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80165ba:	f100 0425 	add.w	r4, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80165be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80165c0:	2501      	movs	r5, #1
 80165c2:	9503      	str	r5, [sp, #12]
 80165c4:	9102      	str	r1, [sp, #8]
 80165c6:	4904      	ldr	r1, [pc, #16]	; (80165d8 <etharp_request_dst+0x24>)
 80165c8:	9101      	str	r1, [sp, #4]
 80165ca:	9300      	str	r3, [sp, #0]
 80165cc:	4623      	mov	r3, r4
 80165ce:	4621      	mov	r1, r4
 80165d0:	f7ff ff80 	bl	80164d4 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 80165d4:	b005      	add	sp, #20
 80165d6:	bd30      	pop	{r4, r5, pc}
 80165d8:	080248e0 	.word	0x080248e0

080165dc <etharp_cleanup_netif>:
{
 80165dc:	b538      	push	{r3, r4, r5, lr}
 80165de:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165e0:	2400      	movs	r4, #0
 80165e2:	e001      	b.n	80165e8 <etharp_cleanup_netif+0xc>
 80165e4:	3401      	adds	r4, #1
 80165e6:	b2e4      	uxtb	r4, r4
 80165e8:	2c09      	cmp	r4, #9
 80165ea:	d810      	bhi.n	801660e <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 80165ec:	4620      	mov	r0, r4
 80165ee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80165f2:	00da      	lsls	r2, r3, #3
 80165f4:	4b06      	ldr	r3, [pc, #24]	; (8016610 <etharp_cleanup_netif+0x34>)
 80165f6:	4413      	add	r3, r2
 80165f8:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d0f2      	beq.n	80165e4 <etharp_cleanup_netif+0x8>
 80165fe:	4b04      	ldr	r3, [pc, #16]	; (8016610 <etharp_cleanup_netif+0x34>)
 8016600:	4413      	add	r3, r2
 8016602:	689b      	ldr	r3, [r3, #8]
 8016604:	42ab      	cmp	r3, r5
 8016606:	d1ed      	bne.n	80165e4 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 8016608:	f7ff fe10 	bl	801622c <etharp_free_entry>
 801660c:	e7ea      	b.n	80165e4 <etharp_cleanup_netif+0x8>
}
 801660e:	bd38      	pop	{r3, r4, r5, pc}
 8016610:	20009388 	.word	0x20009388

08016614 <etharp_input>:
{
 8016614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016618:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801661a:	b161      	cbz	r1, 8016636 <etharp_input+0x22>
 801661c:	4604      	mov	r4, r0
 801661e:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 8016620:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016622:	882b      	ldrh	r3, [r5, #0]
 8016624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016628:	d00d      	beq.n	8016646 <etharp_input+0x32>
    pbuf_free(p);
 801662a:	4620      	mov	r0, r4
 801662c:	f001 ff04 	bl	8018438 <pbuf_free>
}
 8016630:	b006      	add	sp, #24
 8016632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016636:	4b20      	ldr	r3, [pc, #128]	; (80166b8 <etharp_input+0xa4>)
 8016638:	f44f 7222 	mov.w	r2, #648	; 0x288
 801663c:	491f      	ldr	r1, [pc, #124]	; (80166bc <etharp_input+0xa8>)
 801663e:	4820      	ldr	r0, [pc, #128]	; (80166c0 <etharp_input+0xac>)
 8016640:	f008 fe1d 	bl	801f27e <iprintf>
 8016644:	e7f4      	b.n	8016630 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016646:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8016648:	2b06      	cmp	r3, #6
 801664a:	d1ee      	bne.n	801662a <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801664c:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801664e:	2b04      	cmp	r3, #4
 8016650:	d1eb      	bne.n	801662a <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016652:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016654:	2b08      	cmp	r3, #8
 8016656:	d1e8      	bne.n	801662a <etharp_input+0x16>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8016658:	f8d5 300e 	ldr.w	r3, [r5, #14]
 801665c:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801665e:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016660:	684b      	ldr	r3, [r1, #4]
 8016662:	b1ab      	cbz	r3, 8016690 <etharp_input+0x7c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016664:	429f      	cmp	r7, r3
 8016666:	bf14      	ite	ne
 8016668:	2700      	movne	r7, #0
 801666a:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801666c:	f105 0808 	add.w	r8, r5, #8
 8016670:	b187      	cbz	r7, 8016694 <etharp_input+0x80>
 8016672:	2301      	movs	r3, #1
 8016674:	4642      	mov	r2, r8
 8016676:	a905      	add	r1, sp, #20
 8016678:	4630      	mov	r0, r6
 801667a:	f7ff fec7 	bl	801640c <etharp_update_arp_entry>
  switch (hdr->opcode) {
 801667e:	88eb      	ldrh	r3, [r5, #6]
 8016680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016684:	d100      	bne.n	8016688 <etharp_input+0x74>
    if (for_us) {
 8016686:	b93f      	cbnz	r7, 8016698 <etharp_input+0x84>
  pbuf_free(p);
 8016688:	4620      	mov	r0, r4
 801668a:	f001 fed5 	bl	8018438 <pbuf_free>
 801668e:	e7cf      	b.n	8016630 <etharp_input+0x1c>
    for_us = 0;
 8016690:	2700      	movs	r7, #0
 8016692:	e7eb      	b.n	801666c <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016694:	2302      	movs	r3, #2
 8016696:	e7ed      	b.n	8016674 <etharp_input+0x60>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016698:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801669c:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 801669e:	2202      	movs	r2, #2
 80166a0:	9203      	str	r2, [sp, #12]
 80166a2:	aa05      	add	r2, sp, #20
 80166a4:	9202      	str	r2, [sp, #8]
 80166a6:	f8cd 8004 	str.w	r8, [sp, #4]
 80166aa:	9300      	str	r3, [sp, #0]
 80166ac:	460b      	mov	r3, r1
 80166ae:	4642      	mov	r2, r8
 80166b0:	4630      	mov	r0, r6
 80166b2:	f7ff ff0f 	bl	80164d4 <etharp_raw>
 80166b6:	e7e7      	b.n	8016688 <etharp_input+0x74>
 80166b8:	08023024 	.word	0x08023024
 80166bc:	08023154 	.word	0x08023154
 80166c0:	0801fe1c 	.word	0x0801fe1c

080166c4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80166c4:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80166c6:	4a02      	ldr	r2, [pc, #8]	; (80166d0 <etharp_request+0xc>)
 80166c8:	f7ff ff74 	bl	80165b4 <etharp_request_dst>
}
 80166cc:	bd08      	pop	{r3, pc}
 80166ce:	bf00      	nop
 80166d0:	0802486c 	.word	0x0802486c

080166d4 <etharp_tmr>:
{
 80166d4:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166d6:	2400      	movs	r4, #0
 80166d8:	e005      	b.n	80166e6 <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80166da:	2b04      	cmp	r3, #4
 80166dc:	d91d      	bls.n	801671a <etharp_tmr+0x46>
        etharp_free_entry(i);
 80166de:	f7ff fda5 	bl	801622c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166e2:	3401      	adds	r4, #1
 80166e4:	b2e4      	uxtb	r4, r4
 80166e6:	2c09      	cmp	r4, #9
 80166e8:	d838      	bhi.n	801675c <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 80166ea:	4620      	mov	r0, r4
 80166ec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80166f0:	00da      	lsls	r2, r3, #3
 80166f2:	4b1b      	ldr	r3, [pc, #108]	; (8016760 <etharp_tmr+0x8c>)
 80166f4:	4413      	add	r3, r2
 80166f6:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d0f2      	beq.n	80166e2 <etharp_tmr+0xe>
      arp_table[i].ctime++;
 80166fc:	4611      	mov	r1, r2
 80166fe:	4a18      	ldr	r2, [pc, #96]	; (8016760 <etharp_tmr+0x8c>)
 8016700:	440a      	add	r2, r1
 8016702:	8a53      	ldrh	r3, [r2, #18]
 8016704:	3301      	adds	r3, #1
 8016706:	b29b      	uxth	r3, r3
 8016708:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801670a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801670e:	d2e6      	bcs.n	80166de <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016710:	4a13      	ldr	r2, [pc, #76]	; (8016760 <etharp_tmr+0x8c>)
 8016712:	440a      	add	r2, r1
 8016714:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016716:	2a01      	cmp	r2, #1
 8016718:	d0df      	beq.n	80166da <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801671a:	2a03      	cmp	r2, #3
 801671c:	d00e      	beq.n	801673c <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801671e:	2a04      	cmp	r2, #4
 8016720:	d014      	beq.n	801674c <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016722:	2a01      	cmp	r2, #1
 8016724:	d1dd      	bne.n	80166e2 <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016726:	4a0e      	ldr	r2, [pc, #56]	; (8016760 <etharp_tmr+0x8c>)
 8016728:	0043      	lsls	r3, r0, #1
 801672a:	181d      	adds	r5, r3, r0
 801672c:	00e9      	lsls	r1, r5, #3
 801672e:	4411      	add	r1, r2
 8016730:	460a      	mov	r2, r1
 8016732:	3104      	adds	r1, #4
 8016734:	6890      	ldr	r0, [r2, #8]
 8016736:	f7ff ffc5 	bl	80166c4 <etharp_request>
 801673a:	e7d2      	b.n	80166e2 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801673c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016740:	00c2      	lsls	r2, r0, #3
 8016742:	4b07      	ldr	r3, [pc, #28]	; (8016760 <etharp_tmr+0x8c>)
 8016744:	4413      	add	r3, r2
 8016746:	2204      	movs	r2, #4
 8016748:	751a      	strb	r2, [r3, #20]
 801674a:	e7ca      	b.n	80166e2 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801674c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016750:	00c2      	lsls	r2, r0, #3
 8016752:	4b03      	ldr	r3, [pc, #12]	; (8016760 <etharp_tmr+0x8c>)
 8016754:	4413      	add	r3, r2
 8016756:	2202      	movs	r2, #2
 8016758:	751a      	strb	r2, [r3, #20]
 801675a:	e7c2      	b.n	80166e2 <etharp_tmr+0xe>
}
 801675c:	bd38      	pop	{r3, r4, r5, pc}
 801675e:	bf00      	nop
 8016760:	20009388 	.word	0x20009388

08016764 <etharp_output_to_arp_index>:
{
 8016764:	b570      	push	{r4, r5, r6, lr}
 8016766:	b082      	sub	sp, #8
 8016768:	4605      	mov	r5, r0
 801676a:	460e      	mov	r6, r1
 801676c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801676e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016772:	00da      	lsls	r2, r3, #3
 8016774:	4b2c      	ldr	r3, [pc, #176]	; (8016828 <etharp_output_to_arp_index+0xc4>)
 8016776:	4413      	add	r3, r2
 8016778:	7d1b      	ldrb	r3, [r3, #20]
 801677a:	2b01      	cmp	r3, #1
 801677c:	d919      	bls.n	80167b2 <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801677e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8016782:	00da      	lsls	r2, r3, #3
 8016784:	4b28      	ldr	r3, [pc, #160]	; (8016828 <etharp_output_to_arp_index+0xc4>)
 8016786:	4413      	add	r3, r2
 8016788:	7d1b      	ldrb	r3, [r3, #20]
 801678a:	2b02      	cmp	r3, #2
 801678c:	d019      	beq.n	80167c2 <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801678e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016792:	00e3      	lsls	r3, r4, #3
 8016794:	3308      	adds	r3, #8
 8016796:	4a24      	ldr	r2, [pc, #144]	; (8016828 <etharp_output_to_arp_index+0xc4>)
 8016798:	4413      	add	r3, r2
 801679a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801679e:	9200      	str	r2, [sp, #0]
 80167a0:	3304      	adds	r3, #4
 80167a2:	f105 0225 	add.w	r2, r5, #37	; 0x25
 80167a6:	4631      	mov	r1, r6
 80167a8:	4628      	mov	r0, r5
 80167aa:	f005 fef5 	bl	801c598 <ethernet_output>
}
 80167ae:	b002      	add	sp, #8
 80167b0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80167b2:	4b1e      	ldr	r3, [pc, #120]	; (801682c <etharp_output_to_arp_index+0xc8>)
 80167b4:	f240 22ed 	movw	r2, #749	; 0x2ed
 80167b8:	491d      	ldr	r1, [pc, #116]	; (8016830 <etharp_output_to_arp_index+0xcc>)
 80167ba:	481e      	ldr	r0, [pc, #120]	; (8016834 <etharp_output_to_arp_index+0xd0>)
 80167bc:	f008 fd5f 	bl	801f27e <iprintf>
 80167c0:	e7dd      	b.n	801677e <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80167c2:	4b19      	ldr	r3, [pc, #100]	; (8016828 <etharp_output_to_arp_index+0xc4>)
 80167c4:	4413      	add	r3, r2
 80167c6:	8a5b      	ldrh	r3, [r3, #18]
 80167c8:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80167cc:	d819      	bhi.n	8016802 <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80167ce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80167d2:	d3dc      	bcc.n	801678e <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80167d4:	4a14      	ldr	r2, [pc, #80]	; (8016828 <etharp_output_to_arp_index+0xc4>)
 80167d6:	0063      	lsls	r3, r4, #1
 80167d8:	1918      	adds	r0, r3, r4
 80167da:	00c1      	lsls	r1, r0, #3
 80167dc:	4608      	mov	r0, r1
 80167de:	4411      	add	r1, r2
 80167e0:	3008      	adds	r0, #8
 80167e2:	4402      	add	r2, r0
 80167e4:	3204      	adds	r2, #4
 80167e6:	3104      	adds	r1, #4
 80167e8:	4628      	mov	r0, r5
 80167ea:	f7ff fee3 	bl	80165b4 <etharp_request_dst>
 80167ee:	2800      	cmp	r0, #0
 80167f0:	d1cd      	bne.n	801678e <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80167f2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80167f6:	00da      	lsls	r2, r3, #3
 80167f8:	4b0b      	ldr	r3, [pc, #44]	; (8016828 <etharp_output_to_arp_index+0xc4>)
 80167fa:	4413      	add	r3, r2
 80167fc:	2203      	movs	r2, #3
 80167fe:	751a      	strb	r2, [r3, #20]
 8016800:	e7c5      	b.n	801678e <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016802:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8016806:	00d3      	lsls	r3, r2, #3
 8016808:	4907      	ldr	r1, [pc, #28]	; (8016828 <etharp_output_to_arp_index+0xc4>)
 801680a:	4419      	add	r1, r3
 801680c:	3104      	adds	r1, #4
 801680e:	4628      	mov	r0, r5
 8016810:	f7ff ff58 	bl	80166c4 <etharp_request>
 8016814:	2800      	cmp	r0, #0
 8016816:	d1ba      	bne.n	801678e <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016818:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801681c:	00da      	lsls	r2, r3, #3
 801681e:	4b02      	ldr	r3, [pc, #8]	; (8016828 <etharp_output_to_arp_index+0xc4>)
 8016820:	4413      	add	r3, r2
 8016822:	2203      	movs	r2, #3
 8016824:	751a      	strb	r2, [r3, #20]
 8016826:	e7b2      	b.n	801678e <etharp_output_to_arp_index+0x2a>
 8016828:	20009388 	.word	0x20009388
 801682c:	08023024 	.word	0x08023024
 8016830:	080230d4 	.word	0x080230d4
 8016834:	0801fe1c 	.word	0x0801fe1c

08016838 <etharp_query>:
{
 8016838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801683c:	b083      	sub	sp, #12
 801683e:	4606      	mov	r6, r0
 8016840:	460c      	mov	r4, r1
 8016842:	4617      	mov	r7, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8016844:	f100 0825 	add.w	r8, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016848:	4601      	mov	r1, r0
 801684a:	6820      	ldr	r0, [r4, #0]
 801684c:	f000 fc2b 	bl	80170a6 <ip4_addr_isbroadcast_u32>
 8016850:	2800      	cmp	r0, #0
 8016852:	f040 80aa 	bne.w	80169aa <etharp_query+0x172>
      ip4_addr_ismulticast(ipaddr) ||
 8016856:	6823      	ldr	r3, [r4, #0]
 8016858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801685c:	2ae0      	cmp	r2, #224	; 0xe0
 801685e:	f000 80a7 	beq.w	80169b0 <etharp_query+0x178>
      ip4_addr_ismulticast(ipaddr) ||
 8016862:	2c00      	cmp	r4, #0
 8016864:	f000 80a7 	beq.w	80169b6 <etharp_query+0x17e>
      ip4_addr_isany(ipaddr)) {
 8016868:	2b00      	cmp	r3, #0
 801686a:	f000 80a7 	beq.w	80169bc <etharp_query+0x184>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801686e:	4632      	mov	r2, r6
 8016870:	2101      	movs	r1, #1
 8016872:	4620      	mov	r0, r4
 8016874:	f7ff fcf4 	bl	8016260 <etharp_find_entry>
  if (i < 0) {
 8016878:	1e05      	subs	r5, r0, #0
 801687a:	f2c0 80a2 	blt.w	80169c2 <etharp_query+0x18a>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801687e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8016882:	00da      	lsls	r2, r3, #3
 8016884:	4b51      	ldr	r3, [pc, #324]	; (80169cc <etharp_query+0x194>)
 8016886:	4413      	add	r3, r2
 8016888:	7d1b      	ldrb	r3, [r3, #20]
 801688a:	bb1b      	cbnz	r3, 80168d4 <etharp_query+0x9c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 801688c:	006a      	lsls	r2, r5, #1
 801688e:	442a      	add	r2, r5
 8016890:	00d1      	lsls	r1, r2, #3
 8016892:	4b4e      	ldr	r3, [pc, #312]	; (80169cc <etharp_query+0x194>)
 8016894:	440b      	add	r3, r1
 8016896:	f04f 0901 	mov.w	r9, #1
 801689a:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 801689e:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80168a0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80168a4:	00da      	lsls	r2, r3, #3
 80168a6:	4b49      	ldr	r3, [pc, #292]	; (80169cc <etharp_query+0x194>)
 80168a8:	4413      	add	r3, r2
 80168aa:	7d1b      	ldrb	r3, [r3, #20]
 80168ac:	b1ab      	cbz	r3, 80168da <etharp_query+0xa2>
  if (is_new_entry || (q == NULL)) {
 80168ae:	f1b9 0f00 	cmp.w	r9, #0
 80168b2:	d11a      	bne.n	80168ea <etharp_query+0xb2>
 80168b4:	b1cf      	cbz	r7, 80168ea <etharp_query+0xb2>
  err_t result = ERR_MEM;
 80168b6:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 80168ba:	b1f7      	cbz	r7, 80168fa <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80168bc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80168c0:	00da      	lsls	r2, r3, #3
 80168c2:	4b42      	ldr	r3, [pc, #264]	; (80169cc <etharp_query+0x194>)
 80168c4:	4413      	add	r3, r2
 80168c6:	7d1b      	ldrb	r3, [r3, #20]
 80168c8:	2b01      	cmp	r3, #1
 80168ca:	d81e      	bhi.n	801690a <etharp_query+0xd2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80168cc:	2b01      	cmp	r3, #1
 80168ce:	d12c      	bne.n	801692a <etharp_query+0xf2>
 80168d0:	463c      	mov	r4, r7
 80168d2:	e032      	b.n	801693a <etharp_query+0x102>
  int is_new_entry = 0;
 80168d4:	f04f 0900 	mov.w	r9, #0
 80168d8:	e7e2      	b.n	80168a0 <etharp_query+0x68>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80168da:	4b3d      	ldr	r3, [pc, #244]	; (80169d0 <etharp_query+0x198>)
 80168dc:	f240 32c9 	movw	r2, #969	; 0x3c9
 80168e0:	493c      	ldr	r1, [pc, #240]	; (80169d4 <etharp_query+0x19c>)
 80168e2:	483d      	ldr	r0, [pc, #244]	; (80169d8 <etharp_query+0x1a0>)
 80168e4:	f008 fccb 	bl	801f27e <iprintf>
 80168e8:	e7e1      	b.n	80168ae <etharp_query+0x76>
    result = etharp_request(netif, ipaddr);
 80168ea:	4621      	mov	r1, r4
 80168ec:	4630      	mov	r0, r6
 80168ee:	f7ff fee9 	bl	80166c4 <etharp_request>
 80168f2:	4604      	mov	r4, r0
    if (q == NULL) {
 80168f4:	2f00      	cmp	r7, #0
 80168f6:	d1e0      	bne.n	80168ba <etharp_query+0x82>
 80168f8:	e017      	b.n	801692a <etharp_query+0xf2>
  LWIP_ASSERT("q != NULL", q != NULL);
 80168fa:	4b35      	ldr	r3, [pc, #212]	; (80169d0 <etharp_query+0x198>)
 80168fc:	f240 32db 	movw	r2, #987	; 0x3db
 8016900:	4936      	ldr	r1, [pc, #216]	; (80169dc <etharp_query+0x1a4>)
 8016902:	4835      	ldr	r0, [pc, #212]	; (80169d8 <etharp_query+0x1a0>)
 8016904:	f008 fcbb 	bl	801f27e <iprintf>
 8016908:	e7d8      	b.n	80168bc <etharp_query+0x84>
    ETHARP_SET_HINT(netif, i);
 801690a:	4b35      	ldr	r3, [pc, #212]	; (80169e0 <etharp_query+0x1a8>)
 801690c:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801690e:	4613      	mov	r3, r2
 8016910:	3308      	adds	r3, #8
 8016912:	4a2e      	ldr	r2, [pc, #184]	; (80169cc <etharp_query+0x194>)
 8016914:	4413      	add	r3, r2
 8016916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801691a:	9200      	str	r2, [sp, #0]
 801691c:	3304      	adds	r3, #4
 801691e:	4642      	mov	r2, r8
 8016920:	4639      	mov	r1, r7
 8016922:	4630      	mov	r0, r6
 8016924:	f005 fe38 	bl	801c598 <ethernet_output>
 8016928:	4604      	mov	r4, r0
}
 801692a:	4620      	mov	r0, r4
 801692c:	b003      	add	sp, #12
 801692e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (p->type != PBUF_ROM) {
 8016932:	7b23      	ldrb	r3, [r4, #12]
 8016934:	2b01      	cmp	r3, #1
 8016936:	d122      	bne.n	801697e <etharp_query+0x146>
      p = p->next;
 8016938:	6824      	ldr	r4, [r4, #0]
    while (p) {
 801693a:	b174      	cbz	r4, 801695a <etharp_query+0x122>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801693c:	8962      	ldrh	r2, [r4, #10]
 801693e:	8923      	ldrh	r3, [r4, #8]
 8016940:	429a      	cmp	r2, r3
 8016942:	d1f6      	bne.n	8016932 <etharp_query+0xfa>
 8016944:	6823      	ldr	r3, [r4, #0]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d0f3      	beq.n	8016932 <etharp_query+0xfa>
 801694a:	4b21      	ldr	r3, [pc, #132]	; (80169d0 <etharp_query+0x198>)
 801694c:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8016950:	4924      	ldr	r1, [pc, #144]	; (80169e4 <etharp_query+0x1ac>)
 8016952:	4821      	ldr	r0, [pc, #132]	; (80169d8 <etharp_query+0x1a0>)
 8016954:	f008 fc93 	bl	801f27e <iprintf>
 8016958:	e7eb      	b.n	8016932 <etharp_query+0xfa>
    int copy_needed = 0;
 801695a:	2300      	movs	r3, #0
    if (copy_needed) {
 801695c:	b18b      	cbz	r3, 8016982 <etharp_query+0x14a>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801695e:	2200      	movs	r2, #0
 8016960:	8921      	ldrh	r1, [r4, #8]
 8016962:	2002      	movs	r0, #2
 8016964:	f001 fdd4 	bl	8018510 <pbuf_alloc>
      if (p != NULL) {
 8016968:	4604      	mov	r4, r0
 801696a:	b170      	cbz	r0, 801698a <etharp_query+0x152>
        if (pbuf_copy(p, q) != ERR_OK) {
 801696c:	4639      	mov	r1, r7
 801696e:	f001 ff89 	bl	8018884 <pbuf_copy>
 8016972:	b150      	cbz	r0, 801698a <etharp_query+0x152>
          pbuf_free(p);
 8016974:	4620      	mov	r0, r4
 8016976:	f001 fd5f 	bl	8018438 <pbuf_free>
          p = NULL;
 801697a:	2400      	movs	r4, #0
 801697c:	e005      	b.n	801698a <etharp_query+0x152>
        copy_needed = 1;
 801697e:	2301      	movs	r3, #1
 8016980:	e7ec      	b.n	801695c <etharp_query+0x124>
      pbuf_ref(p);
 8016982:	4638      	mov	r0, r7
 8016984:	f001 ff28 	bl	80187d8 <pbuf_ref>
      p = q;
 8016988:	463c      	mov	r4, r7
    if (p != NULL) {
 801698a:	b1e4      	cbz	r4, 80169c6 <etharp_query+0x18e>
      if (arp_table[i].q != NULL) {
 801698c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016990:	00d3      	lsls	r3, r2, #3
 8016992:	4a0e      	ldr	r2, [pc, #56]	; (80169cc <etharp_query+0x194>)
 8016994:	58d0      	ldr	r0, [r2, r3]
 8016996:	b108      	cbz	r0, 801699c <etharp_query+0x164>
        pbuf_free(arp_table[i].q);
 8016998:	f001 fd4e 	bl	8018438 <pbuf_free>
      arp_table[i].q = p;
 801699c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80169a0:	00eb      	lsls	r3, r5, #3
 80169a2:	4a0a      	ldr	r2, [pc, #40]	; (80169cc <etharp_query+0x194>)
 80169a4:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 80169a6:	2400      	movs	r4, #0
 80169a8:	e7bf      	b.n	801692a <etharp_query+0xf2>
    return ERR_ARG;
 80169aa:	f06f 040f 	mvn.w	r4, #15
 80169ae:	e7bc      	b.n	801692a <etharp_query+0xf2>
 80169b0:	f06f 040f 	mvn.w	r4, #15
 80169b4:	e7b9      	b.n	801692a <etharp_query+0xf2>
 80169b6:	f06f 040f 	mvn.w	r4, #15
 80169ba:	e7b6      	b.n	801692a <etharp_query+0xf2>
 80169bc:	f06f 040f 	mvn.w	r4, #15
 80169c0:	e7b3      	b.n	801692a <etharp_query+0xf2>
    return (err_t)i;
 80169c2:	462c      	mov	r4, r5
 80169c4:	e7b1      	b.n	801692a <etharp_query+0xf2>
      result = ERR_MEM;
 80169c6:	f04f 34ff 	mov.w	r4, #4294967295
 80169ca:	e7ae      	b.n	801692a <etharp_query+0xf2>
 80169cc:	20009388 	.word	0x20009388
 80169d0:	08023024 	.word	0x08023024
 80169d4:	08023104 	.word	0x08023104
 80169d8:	0801fe1c 	.word	0x0801fe1c
 80169dc:	0802312c 	.word	0x0802312c
 80169e0:	20009478 	.word	0x20009478
 80169e4:	08023138 	.word	0x08023138

080169e8 <etharp_output>:
{
 80169e8:	b570      	push	{r4, r5, r6, lr}
 80169ea:	b084      	sub	sp, #16
 80169ec:	460e      	mov	r6, r1
 80169ee:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80169f0:	4605      	mov	r5, r0
 80169f2:	2800      	cmp	r0, #0
 80169f4:	d02f      	beq.n	8016a56 <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 80169f6:	2e00      	cmp	r6, #0
 80169f8:	d035      	beq.n	8016a66 <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80169fa:	2c00      	cmp	r4, #0
 80169fc:	d03b      	beq.n	8016a76 <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80169fe:	4629      	mov	r1, r5
 8016a00:	6820      	ldr	r0, [r4, #0]
 8016a02:	f000 fb50 	bl	80170a6 <ip4_addr_isbroadcast_u32>
 8016a06:	2800      	cmp	r0, #0
 8016a08:	d17a      	bne.n	8016b00 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016a0a:	6823      	ldr	r3, [r4, #0]
 8016a0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016a10:	2ae0      	cmp	r2, #224	; 0xe0
 8016a12:	d038      	beq.n	8016a86 <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a14:	686a      	ldr	r2, [r5, #4]
 8016a16:	68a9      	ldr	r1, [r5, #8]
 8016a18:	405a      	eors	r2, r3
 8016a1a:	420a      	tst	r2, r1
 8016a1c:	d009      	beq.n	8016a32 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 8016a1e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a20:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016a24:	4293      	cmp	r3, r2
 8016a26:	d004      	beq.n	8016a32 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016a28:	68eb      	ldr	r3, [r5, #12]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d074      	beq.n	8016b18 <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 8016a2e:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016a32:	4b3b      	ldr	r3, [pc, #236]	; (8016b20 <etharp_output+0x138>)
 8016a34:	781a      	ldrb	r2, [r3, #0]
 8016a36:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016a3a:	00d9      	lsls	r1, r3, #3
 8016a3c:	4b39      	ldr	r3, [pc, #228]	; (8016b24 <etharp_output+0x13c>)
 8016a3e:	440b      	add	r3, r1
 8016a40:	7d1b      	ldrb	r3, [r3, #20]
 8016a42:	2b01      	cmp	r3, #1
 8016a44:	d954      	bls.n	8016af0 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016a46:	6820      	ldr	r0, [r4, #0]
 8016a48:	4b36      	ldr	r3, [pc, #216]	; (8016b24 <etharp_output+0x13c>)
 8016a4a:	440b      	add	r3, r1
 8016a4c:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016a4e:	4298      	cmp	r0, r3
 8016a50:	d02f      	beq.n	8016ab2 <etharp_output+0xca>
 8016a52:	2200      	movs	r2, #0
 8016a54:	e034      	b.n	8016ac0 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016a56:	4b34      	ldr	r3, [pc, #208]	; (8016b28 <etharp_output+0x140>)
 8016a58:	f240 321b 	movw	r2, #795	; 0x31b
 8016a5c:	4933      	ldr	r1, [pc, #204]	; (8016b2c <etharp_output+0x144>)
 8016a5e:	4834      	ldr	r0, [pc, #208]	; (8016b30 <etharp_output+0x148>)
 8016a60:	f008 fc0d 	bl	801f27e <iprintf>
 8016a64:	e7c7      	b.n	80169f6 <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016a66:	4b30      	ldr	r3, [pc, #192]	; (8016b28 <etharp_output+0x140>)
 8016a68:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016a6c:	4931      	ldr	r1, [pc, #196]	; (8016b34 <etharp_output+0x14c>)
 8016a6e:	4830      	ldr	r0, [pc, #192]	; (8016b30 <etharp_output+0x148>)
 8016a70:	f008 fc05 	bl	801f27e <iprintf>
 8016a74:	e7c1      	b.n	80169fa <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016a76:	4b2c      	ldr	r3, [pc, #176]	; (8016b28 <etharp_output+0x140>)
 8016a78:	f240 321d 	movw	r2, #797	; 0x31d
 8016a7c:	492e      	ldr	r1, [pc, #184]	; (8016b38 <etharp_output+0x150>)
 8016a7e:	482c      	ldr	r0, [pc, #176]	; (8016b30 <etharp_output+0x148>)
 8016a80:	f008 fbfd 	bl	801f27e <iprintf>
 8016a84:	e7bb      	b.n	80169fe <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016a86:	2301      	movs	r3, #1
 8016a88:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016a92:	235e      	movs	r3, #94	; 0x5e
 8016a94:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016a98:	7863      	ldrb	r3, [r4, #1]
 8016a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016a9e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016aa2:	78a3      	ldrb	r3, [r4, #2]
 8016aa4:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016aa8:	78e3      	ldrb	r3, [r4, #3]
 8016aaa:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8016aae:	ab02      	add	r3, sp, #8
 8016ab0:	e027      	b.n	8016b02 <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016ab2:	4631      	mov	r1, r6
 8016ab4:	4628      	mov	r0, r5
 8016ab6:	f7ff fe55 	bl	8016764 <etharp_output_to_arp_index>
 8016aba:	e02b      	b.n	8016b14 <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016abc:	3201      	adds	r2, #1
 8016abe:	b252      	sxtb	r2, r2
 8016ac0:	2a09      	cmp	r2, #9
 8016ac2:	dc17      	bgt.n	8016af4 <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ac4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8016ac8:	00d9      	lsls	r1, r3, #3
 8016aca:	4b16      	ldr	r3, [pc, #88]	; (8016b24 <etharp_output+0x13c>)
 8016acc:	440b      	add	r3, r1
 8016ace:	7d1b      	ldrb	r3, [r3, #20]
 8016ad0:	2b01      	cmp	r3, #1
 8016ad2:	d9f3      	bls.n	8016abc <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016ad4:	6820      	ldr	r0, [r4, #0]
 8016ad6:	4b13      	ldr	r3, [pc, #76]	; (8016b24 <etharp_output+0x13c>)
 8016ad8:	440b      	add	r3, r1
 8016ada:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016adc:	4298      	cmp	r0, r3
 8016ade:	d1ed      	bne.n	8016abc <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 8016ae0:	b2d2      	uxtb	r2, r2
 8016ae2:	4b0f      	ldr	r3, [pc, #60]	; (8016b20 <etharp_output+0x138>)
 8016ae4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016ae6:	4631      	mov	r1, r6
 8016ae8:	4628      	mov	r0, r5
 8016aea:	f7ff fe3b 	bl	8016764 <etharp_output_to_arp_index>
 8016aee:	e011      	b.n	8016b14 <etharp_output+0x12c>
 8016af0:	2200      	movs	r2, #0
 8016af2:	e7e5      	b.n	8016ac0 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8016af4:	4632      	mov	r2, r6
 8016af6:	4621      	mov	r1, r4
 8016af8:	4628      	mov	r0, r5
 8016afa:	f7ff fe9d 	bl	8016838 <etharp_query>
 8016afe:	e009      	b.n	8016b14 <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 8016b00:	4b0e      	ldr	r3, [pc, #56]	; (8016b3c <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8016b02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016b06:	9200      	str	r2, [sp, #0]
 8016b08:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8016b0c:	4631      	mov	r1, r6
 8016b0e:	4628      	mov	r0, r5
 8016b10:	f005 fd42 	bl	801c598 <ethernet_output>
}
 8016b14:	b004      	add	sp, #16
 8016b16:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 8016b18:	f06f 0003 	mvn.w	r0, #3
 8016b1c:	e7fa      	b.n	8016b14 <etharp_output+0x12c>
 8016b1e:	bf00      	nop
 8016b20:	20009478 	.word	0x20009478
 8016b24:	20009388 	.word	0x20009388
 8016b28:	08023024 	.word	0x08023024
 8016b2c:	08023154 	.word	0x08023154
 8016b30:	0801fe1c 	.word	0x0801fe1c
 8016b34:	0802312c 	.word	0x0802312c
 8016b38:	080230b4 	.word	0x080230b4
 8016b3c:	0802486c 	.word	0x0802486c

08016b40 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b44:	b086      	sub	sp, #24
 8016b46:	4606      	mov	r6, r0
 8016b48:	4688      	mov	r8, r1
 8016b4a:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	2124      	movs	r1, #36	; 0x24
 8016b50:	2001      	movs	r0, #1
 8016b52:	f001 fcdd 	bl	8018510 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8016b56:	2800      	cmp	r0, #0
 8016b58:	d037      	beq.n	8016bca <icmp_send_response+0x8a>
 8016b5a:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016b5c:	8943      	ldrh	r3, [r0, #10]
 8016b5e:	2b23      	cmp	r3, #35	; 0x23
 8016b60:	d936      	bls.n	8016bd0 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016b62:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016b66:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8016b68:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8016b6c:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	7123      	strb	r3, [r4, #4]
 8016b72:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8016b74:	71a3      	strb	r3, [r4, #6]
 8016b76:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016b78:	686f      	ldr	r7, [r5, #4]
 8016b7a:	6873      	ldr	r3, [r6, #4]
 8016b7c:	681e      	ldr	r6, [r3, #0]
 8016b7e:	6858      	ldr	r0, [r3, #4]
 8016b80:	6899      	ldr	r1, [r3, #8]
 8016b82:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8016b86:	60be      	str	r6, [r7, #8]
 8016b88:	60f8      	str	r0, [r7, #12]
 8016b8a:	6139      	str	r1, [r7, #16]
 8016b8c:	f8c7 c014 	str.w	ip, [r7, #20]
 8016b90:	691e      	ldr	r6, [r3, #16]
 8016b92:	6958      	ldr	r0, [r3, #20]
 8016b94:	6999      	ldr	r1, [r3, #24]
 8016b96:	61be      	str	r6, [r7, #24]
 8016b98:	61f8      	str	r0, [r7, #28]
 8016b9a:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016b9c:	f8de 300c 	ldr.w	r3, [lr, #12]
 8016ba0:	a806      	add	r0, sp, #24
 8016ba2:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016ba6:	f000 f8cb 	bl	8016d40 <ip4_route>
#endif
  if (netif != NULL) {
 8016baa:	b158      	cbz	r0, 8016bc4 <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016bac:	2100      	movs	r1, #0
 8016bae:	70a1      	strb	r1, [r4, #2]
 8016bb0:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016bb2:	9002      	str	r0, [sp, #8]
 8016bb4:	2301      	movs	r3, #1
 8016bb6:	9301      	str	r3, [sp, #4]
 8016bb8:	9100      	str	r1, [sp, #0]
 8016bba:	23ff      	movs	r3, #255	; 0xff
 8016bbc:	aa05      	add	r2, sp, #20
 8016bbe:	4628      	mov	r0, r5
 8016bc0:	f000 fa5c 	bl	801707c <ip4_output_if>
  }
  pbuf_free(q);
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	f001 fc37 	bl	8018438 <pbuf_free>
}
 8016bca:	b006      	add	sp, #24
 8016bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016bd0:	4b03      	ldr	r3, [pc, #12]	; (8016be0 <icmp_send_response+0xa0>)
 8016bd2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8016bd6:	4903      	ldr	r1, [pc, #12]	; (8016be4 <icmp_send_response+0xa4>)
 8016bd8:	4803      	ldr	r0, [pc, #12]	; (8016be8 <icmp_send_response+0xa8>)
 8016bda:	f008 fb50 	bl	801f27e <iprintf>
 8016bde:	e7c0      	b.n	8016b62 <icmp_send_response+0x22>
 8016be0:	0802326c 	.word	0x0802326c
 8016be4:	080232a4 	.word	0x080232a4
 8016be8:	0801fe1c 	.word	0x0801fe1c

08016bec <icmp_input>:
{
 8016bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf0:	b084      	sub	sp, #16
 8016bf2:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8016bf4:	4b47      	ldr	r3, [pc, #284]	; (8016d14 <icmp_input+0x128>)
 8016bf6:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8016bf8:	7834      	ldrb	r4, [r6, #0]
 8016bfa:	f004 040f 	and.w	r4, r4, #15
 8016bfe:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8016c00:	2c13      	cmp	r4, #19
 8016c02:	d915      	bls.n	8016c30 <icmp_input+0x44>
 8016c04:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 8016c06:	8943      	ldrh	r3, [r0, #10]
 8016c08:	2b03      	cmp	r3, #3
 8016c0a:	d911      	bls.n	8016c30 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8016c0c:	6843      	ldr	r3, [r0, #4]
 8016c0e:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8016c10:	2b08      	cmp	r3, #8
 8016c12:	d15d      	bne.n	8016cd0 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016c14:	4b3f      	ldr	r3, [pc, #252]	; (8016d14 <icmp_input+0x128>)
 8016c16:	6958      	ldr	r0, [r3, #20]
 8016c18:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8016c1c:	2be0      	cmp	r3, #224	; 0xe0
 8016c1e:	d023      	beq.n	8016c68 <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016c20:	4b3c      	ldr	r3, [pc, #240]	; (8016d14 <icmp_input+0x128>)
 8016c22:	6819      	ldr	r1, [r3, #0]
 8016c24:	f000 fa3f 	bl	80170a6 <ip4_addr_isbroadcast_u32>
 8016c28:	b9f0      	cbnz	r0, 8016c68 <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016c2a:	892b      	ldrh	r3, [r5, #8]
 8016c2c:	2b07      	cmp	r3, #7
 8016c2e:	d805      	bhi.n	8016c3c <icmp_input+0x50>
  pbuf_free(p);
 8016c30:	4628      	mov	r0, r5
 8016c32:	f001 fc01 	bl	8018438 <pbuf_free>
}
 8016c36:	b004      	add	sp, #16
 8016c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016c3c:	f104 010e 	add.w	r1, r4, #14
 8016c40:	4628      	mov	r0, r5
 8016c42:	f001 fbef 	bl	8018424 <pbuf_header>
 8016c46:	b3a8      	cbz	r0, 8016cb4 <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8016c48:	8929      	ldrh	r1, [r5, #8]
 8016c4a:	4421      	add	r1, r4
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	b289      	uxth	r1, r1
 8016c50:	2002      	movs	r0, #2
 8016c52:	f001 fc5d 	bl	8018510 <pbuf_alloc>
      if (r == NULL) {
 8016c56:	4680      	mov	r8, r0
 8016c58:	b130      	cbz	r0, 8016c68 <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016c5a:	8942      	ldrh	r2, [r0, #10]
 8016c5c:	f104 0308 	add.w	r3, r4, #8
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d205      	bcs.n	8016c70 <icmp_input+0x84>
        pbuf_free(r);
 8016c64:	f001 fbe8 	bl	8018438 <pbuf_free>
  pbuf_free(p);
 8016c68:	4628      	mov	r0, r5
 8016c6a:	f001 fbe5 	bl	8018438 <pbuf_free>
  return;
 8016c6e:	e7e2      	b.n	8016c36 <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 8016c70:	4622      	mov	r2, r4
 8016c72:	4631      	mov	r1, r6
 8016c74:	6840      	ldr	r0, [r0, #4]
 8016c76:	f008 fef0 	bl	801fa5a <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8016c7a:	4261      	negs	r1, r4
 8016c7c:	4640      	mov	r0, r8
 8016c7e:	f001 fbd1 	bl	8018424 <pbuf_header>
 8016c82:	b148      	cbz	r0, 8016c98 <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016c84:	4b24      	ldr	r3, [pc, #144]	; (8016d18 <icmp_input+0x12c>)
 8016c86:	22af      	movs	r2, #175	; 0xaf
 8016c88:	4924      	ldr	r1, [pc, #144]	; (8016d1c <icmp_input+0x130>)
 8016c8a:	4825      	ldr	r0, [pc, #148]	; (8016d20 <icmp_input+0x134>)
 8016c8c:	f008 faf7 	bl	801f27e <iprintf>
        pbuf_free(r);
 8016c90:	4640      	mov	r0, r8
 8016c92:	f001 fbd1 	bl	8018438 <pbuf_free>
        goto icmperr;
 8016c96:	e7e7      	b.n	8016c68 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 8016c98:	4629      	mov	r1, r5
 8016c9a:	4640      	mov	r0, r8
 8016c9c:	f001 fdf2 	bl	8018884 <pbuf_copy>
 8016ca0:	b118      	cbz	r0, 8016caa <icmp_input+0xbe>
        pbuf_free(r);
 8016ca2:	4640      	mov	r0, r8
 8016ca4:	f001 fbc8 	bl	8018438 <pbuf_free>
        goto icmperr;
 8016ca8:	e7de      	b.n	8016c68 <icmp_input+0x7c>
      pbuf_free(p);
 8016caa:	4628      	mov	r0, r5
 8016cac:	f001 fbc4 	bl	8018438 <pbuf_free>
      p = r;
 8016cb0:	4645      	mov	r5, r8
 8016cb2:	e007      	b.n	8016cc4 <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016cb4:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 8016cb8:	31f2      	adds	r1, #242	; 0xf2
 8016cba:	b209      	sxth	r1, r1
 8016cbc:	4628      	mov	r0, r5
 8016cbe:	f001 fbb1 	bl	8018424 <pbuf_header>
 8016cc2:	b948      	cbnz	r0, 8016cd8 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 8016cc4:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8016cc6:	4621      	mov	r1, r4
 8016cc8:	4628      	mov	r0, r5
 8016cca:	f001 fbab 	bl	8018424 <pbuf_header>
 8016cce:	b150      	cbz	r0, 8016ce6 <icmp_input+0xfa>
  pbuf_free(p);
 8016cd0:	4628      	mov	r0, r5
 8016cd2:	f001 fbb1 	bl	8018438 <pbuf_free>
  return;
 8016cd6:	e7ae      	b.n	8016c36 <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016cd8:	4b0f      	ldr	r3, [pc, #60]	; (8016d18 <icmp_input+0x12c>)
 8016cda:	22c0      	movs	r2, #192	; 0xc0
 8016cdc:	4911      	ldr	r1, [pc, #68]	; (8016d24 <icmp_input+0x138>)
 8016cde:	4810      	ldr	r0, [pc, #64]	; (8016d20 <icmp_input+0x134>)
 8016ce0:	f008 facd 	bl	801f27e <iprintf>
        goto icmperr;
 8016ce4:	e7c0      	b.n	8016c68 <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8016ce6:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8016ce8:	490a      	ldr	r1, [pc, #40]	; (8016d14 <icmp_input+0x128>)
 8016cea:	694b      	ldr	r3, [r1, #20]
 8016cec:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016cee:	690b      	ldr	r3, [r1, #16]
 8016cf0:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 8016cf6:	70b2      	strb	r2, [r6, #2]
 8016cf8:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8016cfa:	23ff      	movs	r3, #255	; 0xff
 8016cfc:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8016cfe:	7282      	strb	r2, [r0, #10]
 8016d00:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016d02:	9702      	str	r7, [sp, #8]
 8016d04:	2001      	movs	r0, #1
 8016d06:	9001      	str	r0, [sp, #4]
 8016d08:	9200      	str	r2, [sp, #0]
 8016d0a:	3114      	adds	r1, #20
 8016d0c:	4628      	mov	r0, r5
 8016d0e:	f000 f9b5 	bl	801707c <ip4_output_if>
 8016d12:	e7dd      	b.n	8016cd0 <icmp_input+0xe4>
 8016d14:	2000a254 	.word	0x2000a254
 8016d18:	0802326c 	.word	0x0802326c
 8016d1c:	08023200 	.word	0x08023200
 8016d20:	0801fe1c 	.word	0x0801fe1c
 8016d24:	08023238 	.word	0x08023238

08016d28 <icmp_dest_unreach>:
{
 8016d28:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 8016d2a:	460a      	mov	r2, r1
 8016d2c:	2103      	movs	r1, #3
 8016d2e:	f7ff ff07 	bl	8016b40 <icmp_send_response>
 8016d32:	bd08      	pop	{r3, pc}

08016d34 <icmp_time_exceeded>:
{
 8016d34:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 8016d36:	460a      	mov	r2, r1
 8016d38:	210b      	movs	r1, #11
 8016d3a:	f7ff ff01 	bl	8016b40 <icmp_send_response>
 8016d3e:	bd08      	pop	{r3, pc}

08016d40 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016d40:	4b25      	ldr	r3, [pc, #148]	; (8016dd8 <ip4_route+0x98>)
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	e02b      	b.n	8016d9e <ip4_route+0x5e>
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	b1ab      	cbz	r3, 8016d76 <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016d4a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8016d4e:	f002 0105 	and.w	r1, r2, #5
 8016d52:	2905      	cmp	r1, #5
 8016d54:	d1f7      	bne.n	8016d46 <ip4_route+0x6>
 8016d56:	6859      	ldr	r1, [r3, #4]
 8016d58:	2900      	cmp	r1, #0
 8016d5a:	d0f4      	beq.n	8016d46 <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016d5c:	6804      	ldr	r4, [r0, #0]
 8016d5e:	689d      	ldr	r5, [r3, #8]
 8016d60:	4061      	eors	r1, r4
 8016d62:	4229      	tst	r1, r5
 8016d64:	d016      	beq.n	8016d94 <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016d66:	f012 0f02 	tst.w	r2, #2
 8016d6a:	d1ec      	bne.n	8016d46 <ip4_route+0x6>
 8016d6c:	68da      	ldr	r2, [r3, #12]
 8016d6e:	4294      	cmp	r4, r2
 8016d70:	d1e9      	bne.n	8016d46 <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 8016d72:	4618      	mov	r0, r3
 8016d74:	e00a      	b.n	8016d8c <ip4_route+0x4c>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016d76:	4a19      	ldr	r2, [pc, #100]	; (8016ddc <ip4_route+0x9c>)
 8016d78:	6810      	ldr	r0, [r2, #0]
 8016d7a:	b138      	cbz	r0, 8016d8c <ip4_route+0x4c>
 8016d7c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8016d80:	f002 0205 	and.w	r2, r2, #5
 8016d84:	2a05      	cmp	r2, #5
 8016d86:	d107      	bne.n	8016d98 <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8016d88:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016d8a:	b10a      	cbz	r2, 8016d90 <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8016d8c:	bc30      	pop	{r4, r5}
 8016d8e:	4770      	bx	lr
    return NULL;
 8016d90:	4618      	mov	r0, r3
 8016d92:	e7fb      	b.n	8016d8c <ip4_route+0x4c>
        return netif;
 8016d94:	4618      	mov	r0, r3
 8016d96:	e7f9      	b.n	8016d8c <ip4_route+0x4c>
    return NULL;
 8016d98:	4618      	mov	r0, r3
 8016d9a:	e7f7      	b.n	8016d8c <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	b153      	cbz	r3, 8016db6 <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016da0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8016da4:	f002 0105 	and.w	r1, r2, #5
 8016da8:	2905      	cmp	r1, #5
 8016daa:	d1f7      	bne.n	8016d9c <ip4_route+0x5c>
 8016dac:	6859      	ldr	r1, [r3, #4]
 8016dae:	2900      	cmp	r1, #0
 8016db0:	d0f4      	beq.n	8016d9c <ip4_route+0x5c>
{
 8016db2:	b430      	push	{r4, r5}
 8016db4:	e7d2      	b.n	8016d5c <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016db6:	4a09      	ldr	r2, [pc, #36]	; (8016ddc <ip4_route+0x9c>)
 8016db8:	6810      	ldr	r0, [r2, #0]
 8016dba:	2800      	cmp	r0, #0
 8016dbc:	d0e7      	beq.n	8016d8e <ip4_route+0x4e>
 8016dbe:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8016dc2:	f002 0205 	and.w	r2, r2, #5
 8016dc6:	2a05      	cmp	r2, #5
 8016dc8:	d104      	bne.n	8016dd4 <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8016dca:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016dcc:	2a00      	cmp	r2, #0
 8016dce:	d1de      	bne.n	8016d8e <ip4_route+0x4e>
    return NULL;
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	4770      	bx	lr
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	4770      	bx	lr
 8016dd8:	2000eca8 	.word	0x2000eca8
 8016ddc:	2000ecac 	.word	0x2000ecac

08016de0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016de4:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016de6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8016dea:	f898 3000 	ldrb.w	r3, [r8]
 8016dee:	091a      	lsrs	r2, r3, #4
 8016df0:	2a04      	cmp	r2, #4
 8016df2:	d004      	beq.n	8016dfe <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016df4:	f001 fb20 	bl	8018438 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8016df8:	2000      	movs	r0, #0
 8016dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dfe:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
 8016e00:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 8016e04:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016e06:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8016e0a:	f7ff f9f2 	bl	80161f2 <lwip_htons>
 8016e0e:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8016e10:	892b      	ldrh	r3, [r5, #8]
 8016e12:	4298      	cmp	r0, r3
 8016e14:	d316      	bcc.n	8016e44 <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016e16:	896b      	ldrh	r3, [r5, #10]
 8016e18:	429e      	cmp	r6, r3
 8016e1a:	d818      	bhi.n	8016e4e <ip4_input+0x6e>
 8016e1c:	892b      	ldrh	r3, [r5, #8]
 8016e1e:	429c      	cmp	r4, r3
 8016e20:	d815      	bhi.n	8016e4e <ip4_input+0x6e>
 8016e22:	2e13      	cmp	r6, #19
 8016e24:	d913      	bls.n	8016e4e <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016e26:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016e2a:	4a55      	ldr	r2, [pc, #340]	; (8016f80 <ip4_input+0x1a0>)
 8016e2c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016e2e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8016e32:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016e38:	2be0      	cmp	r3, #224	; 0xe0
 8016e3a:	d00c      	beq.n	8016e56 <ip4_input+0x76>
 8016e3c:	463c      	mov	r4, r7
 8016e3e:	f04f 0901 	mov.w	r9, #1
 8016e42:	e015      	b.n	8016e70 <ip4_input+0x90>
    pbuf_realloc(p, iphdr_len);
 8016e44:	4601      	mov	r1, r0
 8016e46:	4628      	mov	r0, r5
 8016e48:	f001 fc4a 	bl	80186e0 <pbuf_realloc>
 8016e4c:	e7e3      	b.n	8016e16 <ip4_input+0x36>
    pbuf_free(p);
 8016e4e:	4628      	mov	r0, r5
 8016e50:	f001 faf2 	bl	8018438 <pbuf_free>
    return ERR_OK;
 8016e54:	e7d0      	b.n	8016df8 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016e56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016e5a:	f013 0f01 	tst.w	r3, #1
 8016e5e:	d024      	beq.n	8016eaa <ip4_input+0xca>
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	bb23      	cbnz	r3, 8016eae <ip4_input+0xce>
      netif = NULL;
 8016e64:	2400      	movs	r4, #0
 8016e66:	e025      	b.n	8016eb4 <ip4_input+0xd4>
        netif = netif->next;
 8016e68:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 8016e6a:	42bc      	cmp	r4, r7
 8016e6c:	d01b      	beq.n	8016ea6 <ip4_input+0xc6>
    } while (netif != NULL);
 8016e6e:	b30c      	cbz	r4, 8016eb4 <ip4_input+0xd4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016e70:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8016e74:	f013 0f01 	tst.w	r3, #1
 8016e78:	d009      	beq.n	8016e8e <ip4_input+0xae>
 8016e7a:	6863      	ldr	r3, [r4, #4]
 8016e7c:	b13b      	cbz	r3, 8016e8e <ip4_input+0xae>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016e7e:	4a40      	ldr	r2, [pc, #256]	; (8016f80 <ip4_input+0x1a0>)
 8016e80:	6950      	ldr	r0, [r2, #20]
 8016e82:	4283      	cmp	r3, r0
 8016e84:	d016      	beq.n	8016eb4 <ip4_input+0xd4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016e86:	4621      	mov	r1, r4
 8016e88:	f000 f90d 	bl	80170a6 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016e8c:	b990      	cbnz	r0, 8016eb4 <ip4_input+0xd4>
      if (first) {
 8016e8e:	f1b9 0f00 	cmp.w	r9, #0
 8016e92:	d0e9      	beq.n	8016e68 <ip4_input+0x88>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8016e94:	4b3a      	ldr	r3, [pc, #232]	; (8016f80 <ip4_input+0x1a0>)
 8016e96:	7d1b      	ldrb	r3, [r3, #20]
 8016e98:	2b7f      	cmp	r3, #127	; 0x7f
 8016e9a:	d00a      	beq.n	8016eb2 <ip4_input+0xd2>
        netif = netif_list;
 8016e9c:	4b39      	ldr	r3, [pc, #228]	; (8016f84 <ip4_input+0x1a4>)
 8016e9e:	681c      	ldr	r4, [r3, #0]
        first = 0;
 8016ea0:	f04f 0900 	mov.w	r9, #0
 8016ea4:	e7e1      	b.n	8016e6a <ip4_input+0x8a>
        netif = netif->next;
 8016ea6:	6824      	ldr	r4, [r4, #0]
 8016ea8:	e7e1      	b.n	8016e6e <ip4_input+0x8e>
      netif = NULL;
 8016eaa:	2400      	movs	r4, #0
 8016eac:	e002      	b.n	8016eb4 <ip4_input+0xd4>
      netif = inp;
 8016eae:	463c      	mov	r4, r7
 8016eb0:	e000      	b.n	8016eb4 <ip4_input+0xd4>
          netif = NULL;
 8016eb2:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016eb4:	4639      	mov	r1, r7
 8016eb6:	4b32      	ldr	r3, [pc, #200]	; (8016f80 <ip4_input+0x1a0>)
 8016eb8:	6918      	ldr	r0, [r3, #16]
 8016eba:	f000 f8f4 	bl	80170a6 <ip4_addr_isbroadcast_u32>
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	d137      	bne.n	8016f32 <ip4_input+0x152>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016ec2:	4b2f      	ldr	r3, [pc, #188]	; (8016f80 <ip4_input+0x1a0>)
 8016ec4:	691b      	ldr	r3, [r3, #16]
 8016ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016eca:	2be0      	cmp	r3, #224	; 0xe0
 8016ecc:	d031      	beq.n	8016f32 <ip4_input+0x152>
  if (netif == NULL) {
 8016ece:	2c00      	cmp	r4, #0
 8016ed0:	d033      	beq.n	8016f3a <ip4_input+0x15a>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016ed2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8016ed6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	b13b      	cbz	r3, 8016eee <ip4_input+0x10e>
    p = ip4_reass(p);
 8016ede:	4628      	mov	r0, r5
 8016ee0:	f000 fc48 	bl	8017774 <ip4_reass>
    if (p == NULL) {
 8016ee4:	4605      	mov	r5, r0
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d086      	beq.n	8016df8 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 8016eea:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 8016eee:	4a24      	ldr	r2, [pc, #144]	; (8016f80 <ip4_input+0x1a0>)
 8016ef0:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 8016ef2:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016ef4:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8016ef8:	f898 3000 	ldrb.w	r3, [r8]
 8016efc:	f003 030f 	and.w	r3, r3, #15
 8016f00:	009b      	lsls	r3, r3, #2
 8016f02:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8016f04:	4271      	negs	r1, r6
 8016f06:	4628      	mov	r0, r5
 8016f08:	f001 fa8c 	bl	8018424 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8016f0c:	f898 3009 	ldrb.w	r3, [r8, #9]
 8016f10:	2b01      	cmp	r3, #1
 8016f12:	d016      	beq.n	8016f42 <ip4_input+0x162>
 8016f14:	2b06      	cmp	r3, #6
 8016f16:	d119      	bne.n	8016f4c <ip4_input+0x16c>
      tcp_input(p, inp);
 8016f18:	4639      	mov	r1, r7
 8016f1a:	4628      	mov	r0, r5
 8016f1c:	f003 ff16 	bl	801ad4c <tcp_input>
  ip_data.current_netif = NULL;
 8016f20:	4b17      	ldr	r3, [pc, #92]	; (8016f80 <ip4_input+0x1a0>)
 8016f22:	2200      	movs	r2, #0
 8016f24:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016f26:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016f28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016f2a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016f2c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016f2e:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 8016f30:	e762      	b.n	8016df8 <ip4_input+0x18>
      pbuf_free(p);
 8016f32:	4628      	mov	r0, r5
 8016f34:	f001 fa80 	bl	8018438 <pbuf_free>
      return ERR_OK;
 8016f38:	e75e      	b.n	8016df8 <ip4_input+0x18>
    pbuf_free(p);
 8016f3a:	4628      	mov	r0, r5
 8016f3c:	f001 fa7c 	bl	8018438 <pbuf_free>
    return ERR_OK;
 8016f40:	e75a      	b.n	8016df8 <ip4_input+0x18>
      icmp_input(p, inp);
 8016f42:	4639      	mov	r1, r7
 8016f44:	4628      	mov	r0, r5
 8016f46:	f7ff fe51 	bl	8016bec <icmp_input>
      break;
 8016f4a:	e7e9      	b.n	8016f20 <ip4_input+0x140>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016f4c:	4621      	mov	r1, r4
 8016f4e:	4b0c      	ldr	r3, [pc, #48]	; (8016f80 <ip4_input+0x1a0>)
 8016f50:	6958      	ldr	r0, [r3, #20]
 8016f52:	f000 f8a8 	bl	80170a6 <ip4_addr_isbroadcast_u32>
 8016f56:	b978      	cbnz	r0, 8016f78 <ip4_input+0x198>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016f58:	4b09      	ldr	r3, [pc, #36]	; (8016f80 <ip4_input+0x1a0>)
 8016f5a:	695b      	ldr	r3, [r3, #20]
 8016f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016f60:	2be0      	cmp	r3, #224	; 0xe0
 8016f62:	d009      	beq.n	8016f78 <ip4_input+0x198>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8016f64:	4631      	mov	r1, r6
 8016f66:	4628      	mov	r0, r5
 8016f68:	f001 fa61 	bl	801842e <pbuf_header_force>
        p->payload = iphdr;
 8016f6c:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016f70:	2102      	movs	r1, #2
 8016f72:	4628      	mov	r0, r5
 8016f74:	f7ff fed8 	bl	8016d28 <icmp_dest_unreach>
      pbuf_free(p);
 8016f78:	4628      	mov	r0, r5
 8016f7a:	f001 fa5d 	bl	8018438 <pbuf_free>
 8016f7e:	e7cf      	b.n	8016f20 <ip4_input+0x140>
 8016f80:	2000a254 	.word	0x2000a254
 8016f84:	2000eca8 	.word	0x2000eca8

08016f88 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8016f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f8c:	b083      	sub	sp, #12
 8016f8e:	4605      	mov	r5, r0
 8016f90:	4689      	mov	r9, r1
 8016f92:	4616      	mov	r6, r2
 8016f94:	4698      	mov	r8, r3
 8016f96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016f98:	89c3      	ldrh	r3, [r0, #14]
 8016f9a:	2b01      	cmp	r3, #1
 8016f9c:	d006      	beq.n	8016fac <ip4_output_if_src+0x24>
 8016f9e:	4b31      	ldr	r3, [pc, #196]	; (8017064 <ip4_output_if_src+0xdc>)
 8016fa0:	f240 3233 	movw	r2, #819	; 0x333
 8016fa4:	4930      	ldr	r1, [pc, #192]	; (8017068 <ip4_output_if_src+0xe0>)
 8016fa6:	4831      	ldr	r0, [pc, #196]	; (801706c <ip4_output_if_src+0xe4>)
 8016fa8:	f008 f969 	bl	801f27e <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016fac:	2e00      	cmp	r6, #0
 8016fae:	d04a      	beq.n	8017046 <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8016fb0:	2114      	movs	r1, #20
 8016fb2:	4628      	mov	r0, r5
 8016fb4:	f001 fa36 	bl	8018424 <pbuf_header>
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	d150      	bne.n	801705e <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016fbc:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016fbe:	896b      	ldrh	r3, [r5, #10]
 8016fc0:	2b13      	cmp	r3, #19
 8016fc2:	d934      	bls.n	801702e <ip4_output_if_src+0xa6>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016fc4:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016fc8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8016fcc:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016fce:	6833      	ldr	r3, [r6, #0]
 8016fd0:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016fd2:	2345      	movs	r3, #69	; 0x45
 8016fd4:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8016fd6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8016fda:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016fdc:	8928      	ldrh	r0, [r5, #8]
 8016fde:	f7ff f908 	bl	80161f2 <lwip_htons>
 8016fe2:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	71a3      	strb	r3, [r4, #6]
 8016fe8:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016fea:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8017078 <ip4_output_if_src+0xf0>
 8016fee:	f8b8 0000 	ldrh.w	r0, [r8]
 8016ff2:	f7ff f8fe 	bl	80161f2 <lwip_htons>
 8016ff6:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016ff8:	f8b8 3000 	ldrh.w	r3, [r8]
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 8017002:	f1b9 0f00 	cmp.w	r9, #0
 8017006:	d01a      	beq.n	801703e <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017008:	f8d9 3000 	ldr.w	r3, [r9]
 801700c:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801700e:	2300      	movs	r3, #0
 8017010:	72a3      	strb	r3, [r4, #10]
 8017012:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017014:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017016:	b113      	cbz	r3, 801701e <ip4_output_if_src+0x96>
 8017018:	892a      	ldrh	r2, [r5, #8]
 801701a:	4293      	cmp	r3, r2
 801701c:	d319      	bcc.n	8017052 <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801701e:	697b      	ldr	r3, [r7, #20]
 8017020:	4632      	mov	r2, r6
 8017022:	4629      	mov	r1, r5
 8017024:	4638      	mov	r0, r7
 8017026:	4798      	blx	r3
}
 8017028:	b003      	add	sp, #12
 801702a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801702e:	4b0d      	ldr	r3, [pc, #52]	; (8017064 <ip4_output_if_src+0xdc>)
 8017030:	f240 3261 	movw	r2, #865	; 0x361
 8017034:	490e      	ldr	r1, [pc, #56]	; (8017070 <ip4_output_if_src+0xe8>)
 8017036:	480d      	ldr	r0, [pc, #52]	; (801706c <ip4_output_if_src+0xe4>)
 8017038:	f008 f921 	bl	801f27e <iprintf>
 801703c:	e7c2      	b.n	8016fc4 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801703e:	4b0d      	ldr	r3, [pc, #52]	; (8017074 <ip4_output_if_src+0xec>)
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	60e3      	str	r3, [r4, #12]
 8017044:	e7e3      	b.n	801700e <ip4_output_if_src+0x86>
    iphdr = (struct ip_hdr *)p->payload;
 8017046:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017048:	691b      	ldr	r3, [r3, #16]
 801704a:	ae02      	add	r6, sp, #8
 801704c:	f846 3d04 	str.w	r3, [r6, #-4]!
 8017050:	e7e0      	b.n	8017014 <ip4_output_if_src+0x8c>
    return ip4_frag(p, netif, dest);
 8017052:	4632      	mov	r2, r6
 8017054:	4639      	mov	r1, r7
 8017056:	4628      	mov	r0, r5
 8017058:	f000 fc60 	bl	801791c <ip4_frag>
 801705c:	e7e4      	b.n	8017028 <ip4_output_if_src+0xa0>
      return ERR_BUF;
 801705e:	f06f 0001 	mvn.w	r0, #1
 8017062:	e7e1      	b.n	8017028 <ip4_output_if_src+0xa0>
 8017064:	080232d0 	.word	0x080232d0
 8017068:	08023304 	.word	0x08023304
 801706c:	0801fe1c 	.word	0x0801fe1c
 8017070:	08023310 	.word	0x08023310
 8017074:	08023388 	.word	0x08023388
 8017078:	2000947a 	.word	0x2000947a

0801707c <ip4_output_if>:
{
 801707c:	b530      	push	{r4, r5, lr}
 801707e:	b085      	sub	sp, #20
 8017080:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 8017082:	4615      	mov	r5, r2
 8017084:	b11a      	cbz	r2, 801708e <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 8017086:	b109      	cbz	r1, 801708c <ip4_output_if+0x10>
 8017088:	680a      	ldr	r2, [r1, #0]
 801708a:	b902      	cbnz	r2, 801708e <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 801708c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801708e:	9402      	str	r4, [sp, #8]
 8017090:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8017094:	9201      	str	r2, [sp, #4]
 8017096:	f89d 2020 	ldrb.w	r2, [sp, #32]
 801709a:	9200      	str	r2, [sp, #0]
 801709c:	462a      	mov	r2, r5
 801709e:	f7ff ff73 	bl	8016f88 <ip4_output_if_src>
}
 80170a2:	b005      	add	sp, #20
 80170a4:	bd30      	pop	{r4, r5, pc}

080170a6 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80170a6:	1e43      	subs	r3, r0, #1
 80170a8:	f113 0f03 	cmn.w	r3, #3
 80170ac:	d811      	bhi.n	80170d2 <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80170ae:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 80170b2:	f013 0f02 	tst.w	r3, #2
 80170b6:	d00e      	beq.n	80170d6 <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80170b8:	684b      	ldr	r3, [r1, #4]
 80170ba:	4298      	cmp	r0, r3
 80170bc:	d00d      	beq.n	80170da <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80170be:	688a      	ldr	r2, [r1, #8]
 80170c0:	4043      	eors	r3, r0
 80170c2:	4213      	tst	r3, r2
 80170c4:	d10b      	bne.n	80170de <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80170c6:	43d2      	mvns	r2, r2
 80170c8:	ea32 0300 	bics.w	r3, r2, r0
 80170cc:	d009      	beq.n	80170e2 <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80170ce:	2000      	movs	r0, #0
 80170d0:	4770      	bx	lr
    return 1;
 80170d2:	2001      	movs	r0, #1
 80170d4:	4770      	bx	lr
    return 0;
 80170d6:	2000      	movs	r0, #0
 80170d8:	4770      	bx	lr
    return 0;
 80170da:	2000      	movs	r0, #0
 80170dc:	4770      	bx	lr
    return 0;
 80170de:	2000      	movs	r0, #0
 80170e0:	4770      	bx	lr
    return 1;
 80170e2:	2001      	movs	r0, #1
  }
}
 80170e4:	4770      	bx	lr
	...

080170e8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80170e8:	b570      	push	{r4, r5, r6, lr}
 80170ea:	b084      	sub	sp, #16
 80170ec:	460c      	mov	r4, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 80170ee:	7803      	ldrb	r3, [r0, #0]
  u32_t *pp = parts;
 80170f0:	466e      	mov	r6, sp
 80170f2:	e03b      	b.n	801716c <ip4addr_aton+0x84>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
 80170f4:	1c42      	adds	r2, r0, #1
 80170f6:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 80170f8:	2b78      	cmp	r3, #120	; 0x78
 80170fa:	d004      	beq.n	8017106 <ip4addr_aton+0x1e>
 80170fc:	2b58      	cmp	r3, #88	; 0x58
 80170fe:	d002      	beq.n	8017106 <ip4addr_aton+0x1e>
      c = *++cp;
 8017100:	4610      	mov	r0, r2
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 8017102:	2108      	movs	r1, #8
 8017104:	e03a      	b.n	801717c <ip4addr_aton+0x94>
        c = *++cp;
 8017106:	7883      	ldrb	r3, [r0, #2]
 8017108:	3002      	adds	r0, #2
        base = 16;
 801710a:	2110      	movs	r1, #16
        c = *++cp;
 801710c:	e036      	b.n	801717c <ip4addr_aton+0x94>
    }
    for (;;) {
      if (isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
        c = *++cp;
      } else if (base == 16 && isxdigit(c)) {
 801710e:	2910      	cmp	r1, #16
 8017110:	d123      	bne.n	801715a <ip4addr_aton+0x72>
 8017112:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017116:	b2d2      	uxtb	r2, r2
 8017118:	2a05      	cmp	r2, #5
 801711a:	d904      	bls.n	8017126 <ip4addr_aton+0x3e>
 801711c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017120:	b2d2      	uxtb	r2, r2
 8017122:	2a05      	cmp	r2, #5
 8017124:	d819      	bhi.n	801715a <ip4addr_aton+0x72>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 8017126:	012d      	lsls	r5, r5, #4
 8017128:	f103 020a 	add.w	r2, r3, #10
 801712c:	3b61      	subs	r3, #97	; 0x61
 801712e:	b2db      	uxtb	r3, r3
 8017130:	2b19      	cmp	r3, #25
 8017132:	d810      	bhi.n	8017156 <ip4addr_aton+0x6e>
 8017134:	2361      	movs	r3, #97	; 0x61
 8017136:	1ad2      	subs	r2, r2, r3
 8017138:	4315      	orrs	r5, r2
        c = *++cp;
 801713a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
      if (isdigit(c)) {
 801713e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017142:	b2d2      	uxtb	r2, r2
 8017144:	2a09      	cmp	r2, #9
 8017146:	d8e2      	bhi.n	801710e <ip4addr_aton+0x26>
        val = (val * base) + (u32_t)(c - '0');
 8017148:	fb05 3201 	mla	r2, r5, r1, r3
 801714c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
        c = *++cp;
 8017150:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8017154:	e7f3      	b.n	801713e <ip4addr_aton+0x56>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 8017156:	2341      	movs	r3, #65	; 0x41
 8017158:	e7ed      	b.n	8017136 <ip4addr_aton+0x4e>
      } else {
        break;
      }
    }
    if (c == '.') {
 801715a:	2b2e      	cmp	r3, #46	; 0x2e
 801715c:	d110      	bne.n	8017180 <ip4addr_aton+0x98>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801715e:	ab03      	add	r3, sp, #12
 8017160:	429e      	cmp	r6, r3
 8017162:	d260      	bcs.n	8017226 <ip4addr_aton+0x13e>
        return 0;
      }
      *pp++ = val;
 8017164:	6035      	str	r5, [r6, #0]
      c = *++cp;
 8017166:	7843      	ldrb	r3, [r0, #1]
      *pp++ = val;
 8017168:	3604      	adds	r6, #4
      c = *++cp;
 801716a:	3001      	adds	r0, #1
    if (!isdigit(c)) {
 801716c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017170:	b2d2      	uxtb	r2, r2
 8017172:	2a09      	cmp	r2, #9
 8017174:	d855      	bhi.n	8017222 <ip4addr_aton+0x13a>
    if (c == '0') {
 8017176:	2b30      	cmp	r3, #48	; 0x30
 8017178:	d0bc      	beq.n	80170f4 <ip4addr_aton+0xc>
    base = 10;
 801717a:	210a      	movs	r1, #10
        base = 16;
 801717c:	2500      	movs	r5, #0
 801717e:	e7de      	b.n	801713e <ip4addr_aton+0x56>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8017180:	b16b      	cbz	r3, 801719e <ip4addr_aton+0xb6>
 8017182:	2b20      	cmp	r3, #32
 8017184:	d00b      	beq.n	801719e <ip4addr_aton+0xb6>
 8017186:	2b0c      	cmp	r3, #12
 8017188:	d009      	beq.n	801719e <ip4addr_aton+0xb6>
 801718a:	2b0a      	cmp	r3, #10
 801718c:	d007      	beq.n	801719e <ip4addr_aton+0xb6>
 801718e:	2b0d      	cmp	r3, #13
 8017190:	d005      	beq.n	801719e <ip4addr_aton+0xb6>
 8017192:	2b09      	cmp	r3, #9
 8017194:	d003      	beq.n	801719e <ip4addr_aton+0xb6>
 8017196:	2b0b      	cmp	r3, #11
 8017198:	d001      	beq.n	801719e <ip4addr_aton+0xb6>
    return 0;
 801719a:	2000      	movs	r0, #0
 801719c:	e044      	b.n	8017228 <ip4addr_aton+0x140>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801719e:	4668      	mov	r0, sp
 80171a0:	1a30      	subs	r0, r6, r0
 80171a2:	1080      	asrs	r0, r0, #2
 80171a4:	3001      	adds	r0, #1
 80171a6:	2804      	cmp	r0, #4
 80171a8:	d82d      	bhi.n	8017206 <ip4addr_aton+0x11e>
 80171aa:	e8df f000 	tbb	[pc, r0]
 80171ae:	333d      	.short	0x333d
 80171b0:	0c03      	.short	0x0c03
 80171b2:	1a          	.byte	0x1a
 80171b3:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 80171b4:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 80171b8:	d238      	bcs.n	801722c <ip4addr_aton+0x144>
      return 0;
    }
    if (parts[0] > 0xff) {
 80171ba:	9b00      	ldr	r3, [sp, #0]
 80171bc:	2bff      	cmp	r3, #255	; 0xff
 80171be:	d837      	bhi.n	8017230 <ip4addr_aton+0x148>
      return 0;
    }
    val |= parts[0] << 24;
 80171c0:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    break;
 80171c4:	e026      	b.n	8017214 <ip4addr_aton+0x12c>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 80171c6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80171ca:	d233      	bcs.n	8017234 <ip4addr_aton+0x14c>
      return 0;
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80171cc:	9a00      	ldr	r2, [sp, #0]
 80171ce:	2aff      	cmp	r2, #255	; 0xff
 80171d0:	d832      	bhi.n	8017238 <ip4addr_aton+0x150>
 80171d2:	9b01      	ldr	r3, [sp, #4]
 80171d4:	2bff      	cmp	r3, #255	; 0xff
 80171d6:	d831      	bhi.n	801723c <ip4addr_aton+0x154>
      return 0;
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 80171d8:	041b      	lsls	r3, r3, #16
 80171da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80171de:	431d      	orrs	r5, r3
    break;
 80171e0:	e018      	b.n	8017214 <ip4addr_aton+0x12c>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 80171e2:	2dff      	cmp	r5, #255	; 0xff
 80171e4:	d82c      	bhi.n	8017240 <ip4addr_aton+0x158>
      return 0;
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80171e6:	9900      	ldr	r1, [sp, #0]
 80171e8:	29ff      	cmp	r1, #255	; 0xff
 80171ea:	d82b      	bhi.n	8017244 <ip4addr_aton+0x15c>
 80171ec:	9b01      	ldr	r3, [sp, #4]
 80171ee:	2bff      	cmp	r3, #255	; 0xff
 80171f0:	d82a      	bhi.n	8017248 <ip4addr_aton+0x160>
 80171f2:	9a02      	ldr	r2, [sp, #8]
 80171f4:	2aff      	cmp	r2, #255	; 0xff
 80171f6:	d829      	bhi.n	801724c <ip4addr_aton+0x164>
      return 0;
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80171f8:	041b      	lsls	r3, r3, #16
 80171fa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80171fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017202:	431d      	orrs	r5, r3
    break;
 8017204:	e006      	b.n	8017214 <ip4addr_aton+0x12c>
  default:
    LWIP_ASSERT("unhandled", 0);
 8017206:	4b13      	ldr	r3, [pc, #76]	; (8017254 <ip4addr_aton+0x16c>)
 8017208:	f240 1203 	movw	r2, #259	; 0x103
 801720c:	4912      	ldr	r1, [pc, #72]	; (8017258 <ip4addr_aton+0x170>)
 801720e:	4813      	ldr	r0, [pc, #76]	; (801725c <ip4addr_aton+0x174>)
 8017210:	f008 f835 	bl	801f27e <iprintf>
    break;
  }
  if (addr) {
 8017214:	b1e4      	cbz	r4, 8017250 <ip4addr_aton+0x168>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8017216:	4628      	mov	r0, r5
 8017218:	f7fe ffee 	bl	80161f8 <lwip_htonl>
 801721c:	6020      	str	r0, [r4, #0]
  }
  return 1;
 801721e:	2001      	movs	r0, #1
 8017220:	e002      	b.n	8017228 <ip4addr_aton+0x140>
      return 0;
 8017222:	2000      	movs	r0, #0
 8017224:	e000      	b.n	8017228 <ip4addr_aton+0x140>
        return 0;
 8017226:	2000      	movs	r0, #0
}
 8017228:	b004      	add	sp, #16
 801722a:	bd70      	pop	{r4, r5, r6, pc}
      return 0;
 801722c:	2000      	movs	r0, #0
 801722e:	e7fb      	b.n	8017228 <ip4addr_aton+0x140>
      return 0;
 8017230:	2000      	movs	r0, #0
 8017232:	e7f9      	b.n	8017228 <ip4addr_aton+0x140>
      return 0;
 8017234:	2000      	movs	r0, #0
 8017236:	e7f7      	b.n	8017228 <ip4addr_aton+0x140>
      return 0;
 8017238:	2000      	movs	r0, #0
 801723a:	e7f5      	b.n	8017228 <ip4addr_aton+0x140>
 801723c:	2000      	movs	r0, #0
 801723e:	e7f3      	b.n	8017228 <ip4addr_aton+0x140>
      return 0;
 8017240:	2000      	movs	r0, #0
 8017242:	e7f1      	b.n	8017228 <ip4addr_aton+0x140>
      return 0;
 8017244:	2000      	movs	r0, #0
 8017246:	e7ef      	b.n	8017228 <ip4addr_aton+0x140>
 8017248:	2000      	movs	r0, #0
 801724a:	e7ed      	b.n	8017228 <ip4addr_aton+0x140>
 801724c:	2000      	movs	r0, #0
 801724e:	e7eb      	b.n	8017228 <ip4addr_aton+0x140>
  return 1;
 8017250:	2001      	movs	r0, #1
 8017252:	e7e9      	b.n	8017228 <ip4addr_aton+0x140>
 8017254:	08023340 	.word	0x08023340
 8017258:	0802337c 	.word	0x0802337c
 801725c:	0801fe1c 	.word	0x0801fe1c

08017260 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017264:	b083      	sub	sp, #12
 8017266:	4689      	mov	r9, r1
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8017268:	6803      	ldr	r3, [r0, #0]
 801726a:	f10d 0e08 	add.w	lr, sp, #8
 801726e:	f84e 3d04 	str.w	r3, [lr, #-4]!

  rp = buf;
 8017272:	460f      	mov	r7, r1
  int len = 0;
 8017274:	2600      	movs	r6, #0
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 8017276:	4630      	mov	r0, r6
 8017278:	2803      	cmp	r0, #3
 801727a:	d838      	bhi.n	80172ee <ip4addr_ntoa_r+0x8e>
 801727c:	2500      	movs	r5, #0
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 801727e:	f89e 4000 	ldrb.w	r4, [lr]
 8017282:	4b20      	ldr	r3, [pc, #128]	; (8017304 <ip4addr_ntoa_r+0xa4>)
 8017284:	fba3 1304 	umull	r1, r3, r3, r4
 8017288:	08db      	lsrs	r3, r3, #3
 801728a:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 801728e:	ea4f 0c48 	mov.w	ip, r8, lsl #1
 8017292:	eba4 040c 	sub.w	r4, r4, ip
 8017296:	b2e4      	uxtb	r4, r4
      *ap /= (u8_t)10;
 8017298:	b2db      	uxtb	r3, r3
 801729a:	f88e 3000 	strb.w	r3, [lr]
      inv[i++] = (char)('0' + rem);
 801729e:	f105 0c01 	add.w	ip, r5, #1
 80172a2:	fa5f f18c 	uxtb.w	r1, ip
 80172a6:	3430      	adds	r4, #48	; 0x30
 80172a8:	f10d 0c08 	add.w	ip, sp, #8
 80172ac:	4465      	add	r5, ip
 80172ae:	f805 4c08 	strb.w	r4, [r5, #-8]
 80172b2:	460d      	mov	r5, r1
    } while (*ap);
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d1e2      	bne.n	801727e <ip4addr_ntoa_r+0x1e>
    while (i--) {
 80172b8:	1e4b      	subs	r3, r1, #1
 80172ba:	b2db      	uxtb	r3, r3
 80172bc:	b159      	cbz	r1, 80172d6 <ip4addr_ntoa_r+0x76>
      if (len++ >= buflen) {
 80172be:	1c74      	adds	r4, r6, #1
 80172c0:	4296      	cmp	r6, r2
 80172c2:	da19      	bge.n	80172f8 <ip4addr_ntoa_r+0x98>
        return NULL;
      }
      *rp++ = inv[i];
 80172c4:	a902      	add	r1, sp, #8
 80172c6:	18cd      	adds	r5, r1, r3
 80172c8:	f815 5c08 	ldrb.w	r5, [r5, #-8]
 80172cc:	703d      	strb	r5, [r7, #0]
      if (len++ >= buflen) {
 80172ce:	4626      	mov	r6, r4
    while (i--) {
 80172d0:	4619      	mov	r1, r3
      *rp++ = inv[i];
 80172d2:	3701      	adds	r7, #1
 80172d4:	e7f0      	b.n	80172b8 <ip4addr_ntoa_r+0x58>
    }
    if (len++ >= buflen) {
 80172d6:	1c73      	adds	r3, r6, #1
 80172d8:	4296      	cmp	r6, r2
 80172da:	da11      	bge.n	8017300 <ip4addr_ntoa_r+0xa0>
      return NULL;
    }
    *rp++ = '.';
 80172dc:	242e      	movs	r4, #46	; 0x2e
 80172de:	703c      	strb	r4, [r7, #0]
    ap++;
 80172e0:	f10e 0e01 	add.w	lr, lr, #1
  for (n = 0; n < 4; n++) {
 80172e4:	3001      	adds	r0, #1
 80172e6:	b2c0      	uxtb	r0, r0
    if (len++ >= buflen) {
 80172e8:	461e      	mov	r6, r3
    *rp++ = '.';
 80172ea:	3701      	adds	r7, #1
 80172ec:	e7c4      	b.n	8017278 <ip4addr_ntoa_r+0x18>
  }
  *--rp = 0;
 80172ee:	2300      	movs	r3, #0
 80172f0:	f807 3c01 	strb.w	r3, [r7, #-1]
  return buf;
 80172f4:	4648      	mov	r0, r9
 80172f6:	e000      	b.n	80172fa <ip4addr_ntoa_r+0x9a>
        return NULL;
 80172f8:	2000      	movs	r0, #0
}
 80172fa:	b003      	add	sp, #12
 80172fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8017300:	2000      	movs	r0, #0
 8017302:	e7fa      	b.n	80172fa <ip4addr_ntoa_r+0x9a>
 8017304:	cccccccd 	.word	0xcccccccd

08017308 <ip4addr_ntoa>:
{
 8017308:	b508      	push	{r3, lr}
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801730a:	2210      	movs	r2, #16
 801730c:	4901      	ldr	r1, [pc, #4]	; (8017314 <ip4addr_ntoa+0xc>)
 801730e:	f7ff ffa7 	bl	8017260 <ip4addr_ntoa_r>
}
 8017312:	bd08      	pop	{r3, pc}
 8017314:	2000947c 	.word	0x2000947c

08017318 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017318:	b538      	push	{r3, r4, r5, lr}
 801731a:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801731c:	4b0c      	ldr	r3, [pc, #48]	; (8017350 <ip_reass_dequeue_datagram+0x38>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	4283      	cmp	r3, r0
 8017322:	d008      	beq.n	8017336 <ip_reass_dequeue_datagram+0x1e>
 8017324:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017326:	b151      	cbz	r1, 801733e <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8017328:	6823      	ldr	r3, [r4, #0]
 801732a:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801732c:	4621      	mov	r1, r4
 801732e:	2003      	movs	r0, #3
 8017330:	f000 feb2 	bl	8018098 <memp_free>
 8017334:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8017336:	6802      	ldr	r2, [r0, #0]
 8017338:	4b05      	ldr	r3, [pc, #20]	; (8017350 <ip_reass_dequeue_datagram+0x38>)
 801733a:	601a      	str	r2, [r3, #0]
 801733c:	e7f6      	b.n	801732c <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801733e:	4b05      	ldr	r3, [pc, #20]	; (8017354 <ip_reass_dequeue_datagram+0x3c>)
 8017340:	f240 1245 	movw	r2, #325	; 0x145
 8017344:	4904      	ldr	r1, [pc, #16]	; (8017358 <ip_reass_dequeue_datagram+0x40>)
 8017346:	4805      	ldr	r0, [pc, #20]	; (801735c <ip_reass_dequeue_datagram+0x44>)
 8017348:	f007 ff99 	bl	801f27e <iprintf>
 801734c:	e7ec      	b.n	8017328 <ip_reass_dequeue_datagram+0x10>
 801734e:	bf00      	nop
 8017350:	20009490 	.word	0x20009490
 8017354:	0802347c 	.word	0x0802347c
 8017358:	080234b8 	.word	0x080234b8
 801735c:	0801fe1c 	.word	0x0801fe1c

08017360 <ip_reass_free_complete_datagram>:
{
 8017360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017364:	4680      	mov	r8, r0
 8017366:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017368:	4281      	cmp	r1, r0
 801736a:	d015      	beq.n	8017398 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 801736c:	f1b9 0f00 	cmp.w	r9, #0
 8017370:	d009      	beq.n	8017386 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017372:	f8d9 3000 	ldr.w	r3, [r9]
 8017376:	4598      	cmp	r8, r3
 8017378:	d005      	beq.n	8017386 <ip_reass_free_complete_datagram+0x26>
 801737a:	4b35      	ldr	r3, [pc, #212]	; (8017450 <ip_reass_free_complete_datagram+0xf0>)
 801737c:	22ad      	movs	r2, #173	; 0xad
 801737e:	4935      	ldr	r1, [pc, #212]	; (8017454 <ip_reass_free_complete_datagram+0xf4>)
 8017380:	4835      	ldr	r0, [pc, #212]	; (8017458 <ip_reass_free_complete_datagram+0xf8>)
 8017382:	f007 ff7c 	bl	801f27e <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017386:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801738a:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 801738c:	889a      	ldrh	r2, [r3, #4]
 801738e:	b152      	cbz	r2, 80173a6 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 8017390:	2600      	movs	r6, #0
  p = ipr->p;
 8017392:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 8017396:	e032      	b.n	80173fe <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017398:	4b2d      	ldr	r3, [pc, #180]	; (8017450 <ip_reass_free_complete_datagram+0xf0>)
 801739a:	22ab      	movs	r2, #171	; 0xab
 801739c:	492f      	ldr	r1, [pc, #188]	; (801745c <ip_reass_free_complete_datagram+0xfc>)
 801739e:	482e      	ldr	r0, [pc, #184]	; (8017458 <ip_reass_free_complete_datagram+0xf8>)
 80173a0:	f007 ff6d 	bl	801f27e <iprintf>
 80173a4:	e7e2      	b.n	801736c <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80173ac:	4643      	mov	r3, r8
 80173ae:	6862      	ldr	r2, [r4, #4]
 80173b0:	f853 1f08 	ldr.w	r1, [r3, #8]!
 80173b4:	685e      	ldr	r6, [r3, #4]
 80173b6:	689d      	ldr	r5, [r3, #8]
 80173b8:	68d8      	ldr	r0, [r3, #12]
 80173ba:	6011      	str	r1, [r2, #0]
 80173bc:	6056      	str	r6, [r2, #4]
 80173be:	6095      	str	r5, [r2, #8]
 80173c0:	60d0      	str	r0, [r2, #12]
 80173c2:	6919      	ldr	r1, [r3, #16]
 80173c4:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80173c6:	2101      	movs	r1, #1
 80173c8:	4620      	mov	r0, r4
 80173ca:	f7ff fcb3 	bl	8016d34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80173ce:	4620      	mov	r0, r4
 80173d0:	f001 f9f8 	bl	80187c4 <pbuf_clen>
 80173d4:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80173d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80173da:	da03      	bge.n	80173e4 <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 80173dc:	4620      	mov	r0, r4
 80173de:	f001 f82b 	bl	8018438 <pbuf_free>
 80173e2:	e7d6      	b.n	8017392 <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80173e4:	4b1a      	ldr	r3, [pc, #104]	; (8017450 <ip_reass_free_complete_datagram+0xf0>)
 80173e6:	22bc      	movs	r2, #188	; 0xbc
 80173e8:	491d      	ldr	r1, [pc, #116]	; (8017460 <ip_reass_free_complete_datagram+0x100>)
 80173ea:	481b      	ldr	r0, [pc, #108]	; (8017458 <ip_reass_free_complete_datagram+0xf8>)
 80173ec:	f007 ff47 	bl	801f27e <iprintf>
 80173f0:	e7f4      	b.n	80173dc <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed += clen;
 80173f2:	4435      	add	r5, r6
 80173f4:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 80173f6:	4620      	mov	r0, r4
 80173f8:	f001 f81e 	bl	8018438 <pbuf_free>
    p = iprh->next_pbuf;
 80173fc:	463c      	mov	r4, r7
  while (p != NULL) {
 80173fe:	b184      	cbz	r4, 8017422 <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 8017400:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 8017402:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 8017404:	4620      	mov	r0, r4
 8017406:	f001 f9dd 	bl	80187c4 <pbuf_clen>
 801740a:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801740c:	1833      	adds	r3, r6, r0
 801740e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017412:	dbee      	blt.n	80173f2 <ip_reass_free_complete_datagram+0x92>
 8017414:	4b0e      	ldr	r3, [pc, #56]	; (8017450 <ip_reass_free_complete_datagram+0xf0>)
 8017416:	22cc      	movs	r2, #204	; 0xcc
 8017418:	4911      	ldr	r1, [pc, #68]	; (8017460 <ip_reass_free_complete_datagram+0x100>)
 801741a:	480f      	ldr	r0, [pc, #60]	; (8017458 <ip_reass_free_complete_datagram+0xf8>)
 801741c:	f007 ff2f 	bl	801f27e <iprintf>
 8017420:	e7e7      	b.n	80173f2 <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 8017422:	4649      	mov	r1, r9
 8017424:	4640      	mov	r0, r8
 8017426:	f7ff ff77 	bl	8017318 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801742a:	4b0e      	ldr	r3, [pc, #56]	; (8017464 <ip_reass_free_complete_datagram+0x104>)
 801742c:	881b      	ldrh	r3, [r3, #0]
 801742e:	429e      	cmp	r6, r3
 8017430:	d806      	bhi.n	8017440 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount -= pbufs_freed;
 8017432:	4a0c      	ldr	r2, [pc, #48]	; (8017464 <ip_reass_free_complete_datagram+0x104>)
 8017434:	8813      	ldrh	r3, [r2, #0]
 8017436:	1b9b      	subs	r3, r3, r6
 8017438:	8013      	strh	r3, [r2, #0]
}
 801743a:	4630      	mov	r0, r6
 801743c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8017440:	4b03      	ldr	r3, [pc, #12]	; (8017450 <ip_reass_free_complete_datagram+0xf0>)
 8017442:	22d2      	movs	r2, #210	; 0xd2
 8017444:	4908      	ldr	r1, [pc, #32]	; (8017468 <ip_reass_free_complete_datagram+0x108>)
 8017446:	4804      	ldr	r0, [pc, #16]	; (8017458 <ip_reass_free_complete_datagram+0xf8>)
 8017448:	f007 ff19 	bl	801f27e <iprintf>
 801744c:	e7f1      	b.n	8017432 <ip_reass_free_complete_datagram+0xd2>
 801744e:	bf00      	nop
 8017450:	0802347c 	.word	0x0802347c
 8017454:	080234e0 	.word	0x080234e0
 8017458:	0801fe1c 	.word	0x0801fe1c
 801745c:	080234d4 	.word	0x080234d4
 8017460:	080234f4 	.word	0x080234f4
 8017464:	2000948c 	.word	0x2000948c
 8017468:	08023514 	.word	0x08023514

0801746c <ip_reass_remove_oldest_datagram>:
{
 801746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017470:	4605      	mov	r5, r0
 8017472:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8017474:	2600      	movs	r6, #0
 8017476:	e02a      	b.n	80174ce <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017478:	699a      	ldr	r2, [r3, #24]
 801747a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 801747e:	4562      	cmp	r2, ip
 8017480:	d110      	bne.n	80174a4 <ip_reass_remove_oldest_datagram+0x38>
 8017482:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8017486:	88aa      	ldrh	r2, [r5, #4]
 8017488:	4594      	cmp	ip, r2
 801748a:	d10b      	bne.n	80174a4 <ip_reass_remove_oldest_datagram+0x38>
 801748c:	e001      	b.n	8017492 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 801748e:	4671      	mov	r1, lr
          oldest = r;
 8017490:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8017492:	681a      	ldr	r2, [r3, #0]
 8017494:	b18a      	cbz	r2, 80174ba <ip_reass_remove_oldest_datagram+0x4e>
 8017496:	469e      	mov	lr, r3
 8017498:	4613      	mov	r3, r2
    while (r != NULL) {
 801749a:	b183      	cbz	r3, 80174be <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801749c:	68ea      	ldr	r2, [r5, #12]
 801749e:	695f      	ldr	r7, [r3, #20]
 80174a0:	4297      	cmp	r7, r2
 80174a2:	d0e9      	beq.n	8017478 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 80174a4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80174a6:	2800      	cmp	r0, #0
 80174a8:	d0f1      	beq.n	801748e <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 80174aa:	f893 c01f 	ldrb.w	ip, [r3, #31]
 80174ae:	7fc2      	ldrb	r2, [r0, #31]
 80174b0:	4594      	cmp	ip, r2
 80174b2:	d8ee      	bhi.n	8017492 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 80174b4:	4671      	mov	r1, lr
          oldest = r;
 80174b6:	4618      	mov	r0, r3
 80174b8:	e7eb      	b.n	8017492 <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 80174ba:	4673      	mov	r3, lr
 80174bc:	e7eb      	b.n	8017496 <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 80174be:	b110      	cbz	r0, 80174c6 <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80174c0:	f7ff ff4e 	bl	8017360 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80174c4:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80174c6:	4546      	cmp	r6, r8
 80174c8:	da08      	bge.n	80174dc <ip_reass_remove_oldest_datagram+0x70>
 80174ca:	2c01      	cmp	r4, #1
 80174cc:	dd06      	ble.n	80174dc <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 80174ce:	4b05      	ldr	r3, [pc, #20]	; (80174e4 <ip_reass_remove_oldest_datagram+0x78>)
 80174d0:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 80174d2:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80174d4:	4621      	mov	r1, r4
    prev = NULL;
 80174d6:	46a6      	mov	lr, r4
    oldest = NULL;
 80174d8:	4620      	mov	r0, r4
    while (r != NULL) {
 80174da:	e7de      	b.n	801749a <ip_reass_remove_oldest_datagram+0x2e>
}
 80174dc:	4630      	mov	r0, r6
 80174de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174e2:	bf00      	nop
 80174e4:	20009490 	.word	0x20009490

080174e8 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80174e8:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80174ea:	4604      	mov	r4, r0
 80174ec:	b120      	cbz	r0, 80174f8 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80174ee:	4621      	mov	r1, r4
 80174f0:	2004      	movs	r0, #4
 80174f2:	f000 fdd1 	bl	8018098 <memp_free>
 80174f6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80174f8:	4b03      	ldr	r3, [pc, #12]	; (8017508 <ip_frag_free_pbuf_custom_ref+0x20>)
 80174fa:	f240 22ae 	movw	r2, #686	; 0x2ae
 80174fe:	4903      	ldr	r1, [pc, #12]	; (801750c <ip_frag_free_pbuf_custom_ref+0x24>)
 8017500:	4803      	ldr	r0, [pc, #12]	; (8017510 <ip_frag_free_pbuf_custom_ref+0x28>)
 8017502:	f007 febc 	bl	801f27e <iprintf>
 8017506:	e7f2      	b.n	80174ee <ip_frag_free_pbuf_custom_ref+0x6>
 8017508:	0802347c 	.word	0x0802347c
 801750c:	08020104 	.word	0x08020104
 8017510:	0801fe1c 	.word	0x0801fe1c

08017514 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017514:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017516:	4604      	mov	r4, r0
 8017518:	b138      	cbz	r0, 801752a <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 801751a:	6960      	ldr	r0, [r4, #20]
 801751c:	b108      	cbz	r0, 8017522 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801751e:	f000 ff8b 	bl	8018438 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017522:	4620      	mov	r0, r4
 8017524:	f7ff ffe0 	bl	80174e8 <ip_frag_free_pbuf_custom_ref>
 8017528:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801752a:	4b04      	ldr	r3, [pc, #16]	; (801753c <ipfrag_free_pbuf_custom+0x28>)
 801752c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8017530:	4903      	ldr	r1, [pc, #12]	; (8017540 <ipfrag_free_pbuf_custom+0x2c>)
 8017532:	4804      	ldr	r0, [pc, #16]	; (8017544 <ipfrag_free_pbuf_custom+0x30>)
 8017534:	f007 fea3 	bl	801f27e <iprintf>
 8017538:	e7ef      	b.n	801751a <ipfrag_free_pbuf_custom+0x6>
 801753a:	bf00      	nop
 801753c:	0802347c 	.word	0x0802347c
 8017540:	08023530 	.word	0x08023530
 8017544:	0801fe1c 	.word	0x0801fe1c

08017548 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 8017548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801754c:	4680      	mov	r8, r0
 801754e:	460f      	mov	r7, r1
 8017550:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 8017552:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8017554:	8860      	ldrh	r0, [r4, #2]
 8017556:	f7fe fe4c 	bl	80161f2 <lwip_htons>
 801755a:	7826      	ldrb	r6, [r4, #0]
 801755c:	f006 060f 	and.w	r6, r6, #15
 8017560:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 8017564:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8017566:	88e0      	ldrh	r0, [r4, #6]
 8017568:	f7fe fe43 	bl	80161f2 <lwip_htons>
 801756c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017570:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8017572:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 8017574:	2400      	movs	r4, #0
 8017576:	702c      	strb	r4, [r5, #0]
 8017578:	706c      	strb	r4, [r5, #1]
 801757a:	70ac      	strb	r4, [r5, #2]
 801757c:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 801757e:	80a8      	strh	r0, [r5, #4]
  iprh->end = offset + len;
 8017580:	eb06 0e00 	add.w	lr, r6, r0
 8017584:	fa1f fe8e 	uxth.w	lr, lr
 8017588:	f8a5 e006 	strh.w	lr, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 801758c:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 8017590:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 8017592:	e033      	b.n	80175fc <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 8017594:	6029      	str	r1, [r5, #0]
      if (iprh_prev != NULL) {
 8017596:	b34c      	cbz	r4, 80175ec <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017598:	88e2      	ldrh	r2, [r4, #6]
 801759a:	4290      	cmp	r0, r2
 801759c:	d37e      	bcc.n	801769c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
 801759e:	889b      	ldrh	r3, [r3, #4]
 80175a0:	459e      	cmp	lr, r3
 80175a2:	d87b      	bhi.n	801769c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        iprh_prev->next_pbuf = new_p;
 80175a4:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 80175a6:	88ab      	ldrh	r3, [r5, #4]
 80175a8:	429a      	cmp	r2, r3
 80175aa:	d000      	beq.n	80175ae <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 80175ac:	2600      	movs	r6, #0
  if (q == NULL) {
 80175ae:	2900      	cmp	r1, #0
 80175b0:	d036      	beq.n	8017620 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80175b2:	f1b9 0f00 	cmp.w	r9, #0
 80175b6:	d104      	bne.n	80175c2 <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 80175b8:	f898 301e 	ldrb.w	r3, [r8, #30]
 80175bc:	f013 0f01 	tst.w	r3, #1
 80175c0:	d07a      	beq.n	80176b8 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
    if (valid) {
 80175c2:	2e00      	cmp	r6, #0
 80175c4:	d067      	beq.n	8017696 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80175c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d060      	beq.n	8017690 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 80175ce:	6858      	ldr	r0, [r3, #4]
 80175d0:	8883      	ldrh	r3, [r0, #4]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d15e      	bne.n	8017694 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 80175d6:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 80175d8:	2a00      	cmp	r2, #0
 80175da:	d044      	beq.n	8017666 <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 80175dc:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 80175de:	88e9      	ldrh	r1, [r5, #6]
 80175e0:	889a      	ldrh	r2, [r3, #4]
 80175e2:	4291      	cmp	r1, r2
 80175e4:	d13d      	bne.n	8017662 <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 80175e6:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 80175e8:	461d      	mov	r5, r3
 80175ea:	e7f5      	b.n	80175d8 <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 80175ec:	889b      	ldrh	r3, [r3, #4]
 80175ee:	459e      	cmp	lr, r3
 80175f0:	d854      	bhi.n	801769c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        ipr->p = new_p;
 80175f2:	f8c8 7004 	str.w	r7, [r8, #4]
 80175f6:	e7da      	b.n	80175ae <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 80175f8:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 80175fa:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 80175fc:	2900      	cmp	r1, #0
 80175fe:	d0d6      	beq.n	80175ae <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8017600:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8017602:	889a      	ldrh	r2, [r3, #4]
 8017604:	4290      	cmp	r0, r2
 8017606:	d3c5      	bcc.n	8017594 <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 8017608:	4290      	cmp	r0, r2
 801760a:	d047      	beq.n	801769c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start < iprh_tmp->end) {
 801760c:	88d9      	ldrh	r1, [r3, #6]
 801760e:	4288      	cmp	r0, r1
 8017610:	d344      	bcc.n	801769c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      if (iprh_prev != NULL) {
 8017612:	2c00      	cmp	r4, #0
 8017614:	d0f0      	beq.n	80175f8 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 8017616:	88e1      	ldrh	r1, [r4, #6]
 8017618:	428a      	cmp	r2, r1
 801761a:	d0ed      	beq.n	80175f8 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 801761c:	2600      	movs	r6, #0
 801761e:	e7eb      	b.n	80175f8 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 8017620:	b194      	cbz	r4, 8017648 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017622:	88e2      	ldrh	r2, [r4, #6]
 8017624:	88ab      	ldrh	r3, [r5, #4]
 8017626:	429a      	cmp	r2, r3
 8017628:	d806      	bhi.n	8017638 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 801762a:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 801762c:	88e2      	ldrh	r2, [r4, #6]
 801762e:	88ab      	ldrh	r3, [r5, #4]
 8017630:	429a      	cmp	r2, r3
 8017632:	d0be      	beq.n	80175b2 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 8017634:	2600      	movs	r6, #0
 8017636:	e7bc      	b.n	80175b2 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017638:	4b21      	ldr	r3, [pc, #132]	; (80176c0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 801763a:	f240 12ab 	movw	r2, #427	; 0x1ab
 801763e:	4921      	ldr	r1, [pc, #132]	; (80176c4 <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 8017640:	4821      	ldr	r0, [pc, #132]	; (80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8017642:	f007 fe1c 	bl	801f27e <iprintf>
 8017646:	e7f0      	b.n	801762a <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017648:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801764c:	b133      	cbz	r3, 801765c <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 801764e:	4b1c      	ldr	r3, [pc, #112]	; (80176c0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8017650:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8017654:	491d      	ldr	r1, [pc, #116]	; (80176cc <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 8017656:	481c      	ldr	r0, [pc, #112]	; (80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8017658:	f007 fe11 	bl	801f27e <iprintf>
      ipr->p = new_p;
 801765c:	f8c8 7004 	str.w	r7, [r8, #4]
 8017660:	e7a7      	b.n	80175b2 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 8017662:	461d      	mov	r5, r3
            valid = 0;
 8017664:	2600      	movs	r6, #0
        if (valid) {
 8017666:	b1b6      	cbz	r6, 8017696 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8017668:	4285      	cmp	r5, r0
 801766a:	d009      	beq.n	8017680 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801766c:	682b      	ldr	r3, [r5, #0]
 801766e:	b193      	cbz	r3, 8017696 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 8017670:	4b13      	ldr	r3, [pc, #76]	; (80176c0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8017672:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8017676:	4916      	ldr	r1, [pc, #88]	; (80176d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 8017678:	4813      	ldr	r0, [pc, #76]	; (80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 801767a:	f007 fe00 	bl	801f27e <iprintf>
 801767e:	e00a      	b.n	8017696 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8017680:	4b0f      	ldr	r3, [pc, #60]	; (80176c0 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8017682:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017686:	4913      	ldr	r1, [pc, #76]	; (80176d4 <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 8017688:	480f      	ldr	r0, [pc, #60]	; (80176c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 801768a:	f007 fdf8 	bl	801f27e <iprintf>
 801768e:	e7ed      	b.n	801766c <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 8017690:	2600      	movs	r6, #0
 8017692:	e000      	b.n	8017696 <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 8017694:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017696:	4630      	mov	r0, r6
 8017698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801769c:	4638      	mov	r0, r7
 801769e:	f001 f891 	bl	80187c4 <pbuf_clen>
 80176a2:	4a0d      	ldr	r2, [pc, #52]	; (80176d8 <ip_reass_chain_frag_into_datagram_and_validate+0x190>)
 80176a4:	8813      	ldrh	r3, [r2, #0]
 80176a6:	1a18      	subs	r0, r3, r0
 80176a8:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 80176aa:	4638      	mov	r0, r7
 80176ac:	f000 fec4 	bl	8018438 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80176b0:	f04f 30ff 	mov.w	r0, #4294967295
 80176b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80176b8:	4648      	mov	r0, r9
}
 80176ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176be:	bf00      	nop
 80176c0:	0802347c 	.word	0x0802347c
 80176c4:	080233f0 	.word	0x080233f0
 80176c8:	0801fe1c 	.word	0x0801fe1c
 80176cc:	08023410 	.word	0x08023410
 80176d0:	08023458 	.word	0x08023458
 80176d4:	08023448 	.word	0x08023448
 80176d8:	2000948c 	.word	0x2000948c

080176dc <ip_frag_alloc_pbuf_custom_ref>:
{
 80176dc:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80176de:	2004      	movs	r0, #4
 80176e0:	f000 fcc0 	bl	8018064 <memp_malloc>
}
 80176e4:	bd08      	pop	{r3, pc}
	...

080176e8 <ip_reass_enqueue_new_datagram>:
{
 80176e8:	b570      	push	{r4, r5, r6, lr}
 80176ea:	4605      	mov	r5, r0
 80176ec:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80176ee:	2003      	movs	r0, #3
 80176f0:	f000 fcb8 	bl	8018064 <memp_malloc>
  if (ipr == NULL) {
 80176f4:	4604      	mov	r4, r0
 80176f6:	b1b0      	cbz	r0, 8017726 <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80176f8:	2220      	movs	r2, #32
 80176fa:	2100      	movs	r1, #0
 80176fc:	4620      	mov	r0, r4
 80176fe:	f008 f9b7 	bl	801fa70 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017702:	2303      	movs	r3, #3
 8017704:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8017706:	4b0f      	ldr	r3, [pc, #60]	; (8017744 <ip_reass_enqueue_new_datagram+0x5c>)
 8017708:	681a      	ldr	r2, [r3, #0]
 801770a:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 801770c:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801770e:	682a      	ldr	r2, [r5, #0]
 8017710:	686e      	ldr	r6, [r5, #4]
 8017712:	68a8      	ldr	r0, [r5, #8]
 8017714:	68e9      	ldr	r1, [r5, #12]
 8017716:	60a2      	str	r2, [r4, #8]
 8017718:	60e6      	str	r6, [r4, #12]
 801771a:	6120      	str	r0, [r4, #16]
 801771c:	6161      	str	r1, [r4, #20]
 801771e:	692a      	ldr	r2, [r5, #16]
 8017720:	61a2      	str	r2, [r4, #24]
}
 8017722:	4620      	mov	r0, r4
 8017724:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017726:	4631      	mov	r1, r6
 8017728:	4628      	mov	r0, r5
 801772a:	f7ff fe9f 	bl	801746c <ip_reass_remove_oldest_datagram>
 801772e:	4286      	cmp	r6, r0
 8017730:	dd02      	ble.n	8017738 <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 8017732:	2c00      	cmp	r4, #0
 8017734:	d1e0      	bne.n	80176f8 <ip_reass_enqueue_new_datagram+0x10>
 8017736:	e7f4      	b.n	8017722 <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017738:	2003      	movs	r0, #3
 801773a:	f000 fc93 	bl	8018064 <memp_malloc>
 801773e:	4604      	mov	r4, r0
 8017740:	e7f7      	b.n	8017732 <ip_reass_enqueue_new_datagram+0x4a>
 8017742:	bf00      	nop
 8017744:	20009490 	.word	0x20009490

08017748 <ip_reass_tmr>:
{
 8017748:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801774a:	4b09      	ldr	r3, [pc, #36]	; (8017770 <ip_reass_tmr+0x28>)
 801774c:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 801774e:	2400      	movs	r4, #0
  while (r != NULL) {
 8017750:	e004      	b.n	801775c <ip_reass_tmr+0x14>
      r = r->next;
 8017752:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8017754:	4621      	mov	r1, r4
 8017756:	f7ff fe03 	bl	8017360 <ip_reass_free_complete_datagram>
      r = r->next;
 801775a:	4628      	mov	r0, r5
  while (r != NULL) {
 801775c:	b138      	cbz	r0, 801776e <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 801775e:	7fc3      	ldrb	r3, [r0, #31]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d0f6      	beq.n	8017752 <ip_reass_tmr+0xa>
      r->timer--;
 8017764:	3b01      	subs	r3, #1
 8017766:	77c3      	strb	r3, [r0, #31]
      prev = r;
 8017768:	4604      	mov	r4, r0
      r = r->next;
 801776a:	6800      	ldr	r0, [r0, #0]
 801776c:	e7f6      	b.n	801775c <ip_reass_tmr+0x14>
}
 801776e:	bd38      	pop	{r3, r4, r5, pc}
 8017770:	20009490 	.word	0x20009490

08017774 <ip4_reass>:
{
 8017774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017778:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 801777a:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801777c:	782b      	ldrb	r3, [r5, #0]
 801777e:	f003 030f 	and.w	r3, r3, #15
 8017782:	2b05      	cmp	r3, #5
 8017784:	d124      	bne.n	80177d0 <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8017786:	88e8      	ldrh	r0, [r5, #6]
 8017788:	f7fe fd33 	bl	80161f2 <lwip_htons>
 801778c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017790:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8017792:	8868      	ldrh	r0, [r5, #2]
 8017794:	f7fe fd2d 	bl	80161f2 <lwip_htons>
 8017798:	782e      	ldrb	r6, [r5, #0]
 801779a:	f006 060f 	and.w	r6, r6, #15
 801779e:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 80177a2:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 80177a4:	4648      	mov	r0, r9
 80177a6:	f001 f80d 	bl	80187c4 <pbuf_clen>
 80177aa:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80177ac:	4b59      	ldr	r3, [pc, #356]	; (8017914 <ip4_reass+0x1a0>)
 80177ae:	881b      	ldrh	r3, [r3, #0]
 80177b0:	4403      	add	r3, r0
 80177b2:	2b0a      	cmp	r3, #10
 80177b4:	dc02      	bgt.n	80177bc <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80177b6:	4b58      	ldr	r3, [pc, #352]	; (8017918 <ip4_reass+0x1a4>)
 80177b8:	681c      	ldr	r4, [r3, #0]
 80177ba:	e011      	b.n	80177e0 <ip4_reass+0x6c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80177bc:	4601      	mov	r1, r0
 80177be:	4628      	mov	r0, r5
 80177c0:	f7ff fe54 	bl	801746c <ip_reass_remove_oldest_datagram>
 80177c4:	b120      	cbz	r0, 80177d0 <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80177c6:	4b53      	ldr	r3, [pc, #332]	; (8017914 <ip4_reass+0x1a0>)
 80177c8:	881b      	ldrh	r3, [r3, #0]
 80177ca:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80177cc:	2b0a      	cmp	r3, #10
 80177ce:	ddf2      	ble.n	80177b6 <ip4_reass+0x42>
  pbuf_free(p);
 80177d0:	4648      	mov	r0, r9
 80177d2:	f000 fe31 	bl	8018438 <pbuf_free>
  return NULL;
 80177d6:	2700      	movs	r7, #0
}
 80177d8:	4638      	mov	r0, r7
 80177da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80177de:	6824      	ldr	r4, [r4, #0]
 80177e0:	b15c      	cbz	r4, 80177fa <ip4_reass+0x86>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80177e2:	6962      	ldr	r2, [r4, #20]
 80177e4:	68eb      	ldr	r3, [r5, #12]
 80177e6:	429a      	cmp	r2, r3
 80177e8:	d1f9      	bne.n	80177de <ip4_reass+0x6a>
 80177ea:	69a2      	ldr	r2, [r4, #24]
 80177ec:	692b      	ldr	r3, [r5, #16]
 80177ee:	429a      	cmp	r2, r3
 80177f0:	d1f5      	bne.n	80177de <ip4_reass+0x6a>
 80177f2:	89a2      	ldrh	r2, [r4, #12]
 80177f4:	88ab      	ldrh	r3, [r5, #4]
 80177f6:	429a      	cmp	r2, r3
 80177f8:	d1f1      	bne.n	80177de <ip4_reass+0x6a>
  if (ipr == NULL) {
 80177fa:	2c00      	cmp	r4, #0
 80177fc:	d048      	beq.n	8017890 <ip4_reass+0x11c>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80177fe:	88e8      	ldrh	r0, [r5, #6]
 8017800:	f7fe fcf7 	bl	80161f2 <lwip_htons>
 8017804:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017808:	2800      	cmp	r0, #0
 801780a:	d049      	beq.n	80178a0 <ip4_reass+0x12c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801780c:	88ed      	ldrh	r5, [r5, #6]
 801780e:	f005 0520 	and.w	r5, r5, #32
 8017812:	2d00      	cmp	r5, #0
 8017814:	bf0c      	ite	eq
 8017816:	2201      	moveq	r2, #1
 8017818:	2200      	movne	r2, #0
  if (is_last) {
 801781a:	d107      	bne.n	801782c <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 801781c:	19bb      	adds	r3, r7, r6
 801781e:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017820:	429f      	cmp	r7, r3
 8017822:	d8d5      	bhi.n	80177d0 <ip4_reass+0x5c>
 8017824:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 8017828:	428b      	cmp	r3, r1
 801782a:	d8d1      	bhi.n	80177d0 <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801782c:	4649      	mov	r1, r9
 801782e:	4620      	mov	r0, r4
 8017830:	f7ff fe8a 	bl	8017548 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017834:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017838:	d0ca      	beq.n	80177d0 <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801783a:	4b36      	ldr	r3, [pc, #216]	; (8017914 <ip4_reass+0x1a0>)
 801783c:	881a      	ldrh	r2, [r3, #0]
 801783e:	4490      	add	r8, r2
 8017840:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 8017844:	b92d      	cbnz	r5, 8017852 <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 8017846:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 8017848:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801784a:	7fa3      	ldrb	r3, [r4, #30]
 801784c:	f043 0301 	orr.w	r3, r3, #1
 8017850:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017852:	2801      	cmp	r0, #1
 8017854:	d15b      	bne.n	801790e <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 8017856:	8ba3      	ldrh	r3, [r4, #28]
 8017858:	3314      	adds	r3, #20
 801785a:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801785c:	6863      	ldr	r3, [r4, #4]
 801785e:	685e      	ldr	r6, [r3, #4]
 8017860:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017862:	4623      	mov	r3, r4
 8017864:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8017868:	685f      	ldr	r7, [r3, #4]
 801786a:	6898      	ldr	r0, [r3, #8]
 801786c:	68d9      	ldr	r1, [r3, #12]
 801786e:	6032      	str	r2, [r6, #0]
 8017870:	6077      	str	r7, [r6, #4]
 8017872:	60b0      	str	r0, [r6, #8]
 8017874:	60f1      	str	r1, [r6, #12]
 8017876:	691a      	ldr	r2, [r3, #16]
 8017878:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801787a:	8ba0      	ldrh	r0, [r4, #28]
 801787c:	f7fe fcb9 	bl	80161f2 <lwip_htons>
 8017880:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017882:	2300      	movs	r3, #0
 8017884:	71b3      	strb	r3, [r6, #6]
 8017886:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017888:	72b3      	strb	r3, [r6, #10]
 801788a:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 801788c:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 801788e:	e026      	b.n	80178de <ip4_reass+0x16a>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017890:	4641      	mov	r1, r8
 8017892:	4628      	mov	r0, r5
 8017894:	f7ff ff28 	bl	80176e8 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 8017898:	4604      	mov	r4, r0
 801789a:	2800      	cmp	r0, #0
 801789c:	d1b6      	bne.n	801780c <ip4_reass+0x98>
 801789e:	e797      	b.n	80177d0 <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80178a0:	89e0      	ldrh	r0, [r4, #14]
 80178a2:	f7fe fca6 	bl	80161f2 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80178a6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80178aa:	2800      	cmp	r0, #0
 80178ac:	d0ae      	beq.n	801780c <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80178ae:	682a      	ldr	r2, [r5, #0]
 80178b0:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80178b4:	68a8      	ldr	r0, [r5, #8]
 80178b6:	68e9      	ldr	r1, [r5, #12]
 80178b8:	60a2      	str	r2, [r4, #8]
 80178ba:	f8c4 e00c 	str.w	lr, [r4, #12]
 80178be:	6120      	str	r0, [r4, #16]
 80178c0:	6161      	str	r1, [r4, #20]
 80178c2:	692a      	ldr	r2, [r5, #16]
 80178c4:	61a2      	str	r2, [r4, #24]
 80178c6:	e7a1      	b.n	801780c <ip4_reass+0x98>
      iprh = (struct ip_reass_helper*)r->payload;
 80178c8:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 80178ca:	f06f 0113 	mvn.w	r1, #19
 80178ce:	4628      	mov	r0, r5
 80178d0:	f000 fda8 	bl	8018424 <pbuf_header>
      pbuf_cat(p, r);
 80178d4:	4629      	mov	r1, r5
 80178d6:	4638      	mov	r0, r7
 80178d8:	f000 ff9a 	bl	8018810 <pbuf_cat>
      r = iprh->next_pbuf;
 80178dc:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 80178de:	2d00      	cmp	r5, #0
 80178e0:	d1f2      	bne.n	80178c8 <ip4_reass+0x154>
    if (ipr == reassdatagrams) {
 80178e2:	4b0d      	ldr	r3, [pc, #52]	; (8017918 <ip4_reass+0x1a4>)
 80178e4:	6819      	ldr	r1, [r3, #0]
 80178e6:	428c      	cmp	r4, r1
 80178e8:	d005      	beq.n	80178f6 <ip4_reass+0x182>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80178ea:	b129      	cbz	r1, 80178f8 <ip4_reass+0x184>
        if (ipr_prev->next == ipr) {
 80178ec:	680b      	ldr	r3, [r1, #0]
 80178ee:	429c      	cmp	r4, r3
 80178f0:	d002      	beq.n	80178f8 <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80178f2:	4619      	mov	r1, r3
 80178f4:	e7f9      	b.n	80178ea <ip4_reass+0x176>
      ipr_prev = NULL;
 80178f6:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80178f8:	4620      	mov	r0, r4
 80178fa:	f7ff fd0d 	bl	8017318 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 80178fe:	4638      	mov	r0, r7
 8017900:	f000 ff60 	bl	80187c4 <pbuf_clen>
 8017904:	4a03      	ldr	r2, [pc, #12]	; (8017914 <ip4_reass+0x1a0>)
 8017906:	8813      	ldrh	r3, [r2, #0]
 8017908:	1a18      	subs	r0, r3, r0
 801790a:	8010      	strh	r0, [r2, #0]
    return p;
 801790c:	e764      	b.n	80177d8 <ip4_reass+0x64>
  return NULL;
 801790e:	2700      	movs	r7, #0
 8017910:	e762      	b.n	80177d8 <ip4_reass+0x64>
 8017912:	bf00      	nop
 8017914:	2000948c 	.word	0x2000948c
 8017918:	20009490 	.word	0x20009490

0801791c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017920:	b08d      	sub	sp, #52	; 0x34
 8017922:	4605      	mov	r5, r0
 8017924:	9107      	str	r1, [sp, #28]
 8017926:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8017928:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 801792a:	3b14      	subs	r3, #20
 801792c:	d420      	bmi.n	8017970 <ip4_frag+0x54>
 801792e:	10db      	asrs	r3, r3, #3
 8017930:	9309      	str	r3, [sp, #36]	; 0x24
 8017932:	b29b      	uxth	r3, r3
 8017934:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017936:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801793a:	f89a 3000 	ldrb.w	r3, [sl]
 801793e:	f003 030f 	and.w	r3, r3, #15
 8017942:	2b05      	cmp	r3, #5
 8017944:	d116      	bne.n	8017974 <ip4_frag+0x58>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017946:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 801794a:	f7fe fc52 	bl	80161f2 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 801794e:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8017952:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8017954:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8017958:	d116      	bne.n	8017988 <ip4_frag+0x6c>

  left = p->tot_len - IP_HLEN;
 801795a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801795e:	f1a9 0914 	sub.w	r9, r9, #20
 8017962:	fa1f fb89 	uxth.w	fp, r9
  u16_t poff = IP_HLEN;
 8017966:	f04f 0814 	mov.w	r8, #20
  u16_t newpbuflen = 0;
 801796a:	2400      	movs	r4, #0
 801796c:	46d9      	mov	r9, fp

  while (left) {
 801796e:	e08c      	b.n	8017a8a <ip4_frag+0x16e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8017970:	3307      	adds	r3, #7
 8017972:	e7dc      	b.n	801792e <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8017974:	4b5e      	ldr	r3, [pc, #376]	; (8017af0 <ip4_frag+0x1d4>)
 8017976:	f240 22e1 	movw	r2, #737	; 0x2e1
 801797a:	495e      	ldr	r1, [pc, #376]	; (8017af4 <ip4_frag+0x1d8>)
 801797c:	485e      	ldr	r0, [pc, #376]	; (8017af8 <ip4_frag+0x1dc>)
 801797e:	f007 fc7e 	bl	801f27e <iprintf>
 8017982:	f06f 0005 	mvn.w	r0, #5
 8017986:	e043      	b.n	8017a10 <ip4_frag+0xf4>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8017988:	4b59      	ldr	r3, [pc, #356]	; (8017af0 <ip4_frag+0x1d4>)
 801798a:	f240 22e6 	movw	r2, #742	; 0x2e6
 801798e:	495b      	ldr	r1, [pc, #364]	; (8017afc <ip4_frag+0x1e0>)
 8017990:	4859      	ldr	r0, [pc, #356]	; (8017af8 <ip4_frag+0x1dc>)
 8017992:	f007 fc74 	bl	801f27e <iprintf>
 8017996:	f06f 0005 	mvn.w	r0, #5
 801799a:	e039      	b.n	8017a10 <ip4_frag+0xf4>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801799c:	4b54      	ldr	r3, [pc, #336]	; (8017af0 <ip4_frag+0x1d4>)
 801799e:	f240 3209 	movw	r2, #777	; 0x309
 80179a2:	4957      	ldr	r1, [pc, #348]	; (8017b00 <ip4_frag+0x1e4>)
 80179a4:	4854      	ldr	r0, [pc, #336]	; (8017af8 <ip4_frag+0x1dc>)
 80179a6:	f007 fc6a 	bl	801f27e <iprintf>
 80179aa:	e086      	b.n	8017aba <ip4_frag+0x19e>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80179ac:	f7ff fe96 	bl	80176dc <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 80179b0:	4607      	mov	r7, r0
 80179b2:	b340      	cbz	r0, 8017a06 <ip4_frag+0xea>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 80179b4:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80179b6:	4443      	add	r3, r8
 80179b8:	9401      	str	r4, [sp, #4]
 80179ba:	9300      	str	r3, [sp, #0]
 80179bc:	4603      	mov	r3, r0
 80179be:	2202      	movs	r2, #2
 80179c0:	4621      	mov	r1, r4
 80179c2:	2004      	movs	r0, #4
 80179c4:	f000 fcf2 	bl	80183ac <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80179c8:	9003      	str	r0, [sp, #12]
 80179ca:	b320      	cbz	r0, 8017a16 <ip4_frag+0xfa>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80179cc:	4628      	mov	r0, r5
 80179ce:	f000 ff03 	bl	80187d8 <pbuf_ref>
      pcr->original = p;
 80179d2:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80179d4:	4b4b      	ldr	r3, [pc, #300]	; (8017b04 <ip4_frag+0x1e8>)
 80179d6:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80179d8:	9903      	ldr	r1, [sp, #12]
 80179da:	9804      	ldr	r0, [sp, #16]
 80179dc:	f000 ff18 	bl	8018810 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80179e0:	1b36      	subs	r6, r6, r4
 80179e2:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 80179e4:	b116      	cbz	r6, 80179ec <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 80179e6:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 80179e8:	f04f 0800 	mov.w	r8, #0
    while (left_to_copy) {
 80179ec:	b1e6      	cbz	r6, 8017a28 <ip4_frag+0x10c>
      u16_t plen = p->len - poff;
 80179ee:	896c      	ldrh	r4, [r5, #10]
 80179f0:	eba4 0408 	sub.w	r4, r4, r8
 80179f4:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80179f6:	42b4      	cmp	r4, r6
 80179f8:	bf28      	it	cs
 80179fa:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 80179fc:	2c00      	cmp	r4, #0
 80179fe:	d1d5      	bne.n	80179ac <ip4_frag+0x90>
        p = p->next;
 8017a00:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8017a02:	46a0      	mov	r8, r4
        continue;
 8017a04:	e7f2      	b.n	80179ec <ip4_frag+0xd0>
        pbuf_free(rambuf);
 8017a06:	9804      	ldr	r0, [sp, #16]
 8017a08:	f000 fd16 	bl	8018438 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017a0c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017a10:	b00d      	add	sp, #52	; 0x34
 8017a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 8017a16:	4638      	mov	r0, r7
 8017a18:	f7ff fd66 	bl	80174e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017a1c:	9804      	ldr	r0, [sp, #16]
 8017a1e:	f000 fd0b 	bl	8018438 <pbuf_free>
  return ERR_MEM;
 8017a22:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 8017a26:	e7f3      	b.n	8017a10 <ip4_frag+0xf4>
    poff += newpbuflen;
 8017a28:	44a0      	add	r8, r4
 8017a2a:	fa1f f888 	uxth.w	r8, r8
    last = (left <= netif->mtu - IP_HLEN);
 8017a2e:	9b07      	ldr	r3, [sp, #28]
 8017a30:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017a32:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 8017a34:	9a06      	ldr	r2, [sp, #24]
 8017a36:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 8017a3a:	9a08      	ldr	r2, [sp, #32]
 8017a3c:	429a      	cmp	r2, r3
 8017a3e:	dd01      	ble.n	8017a44 <ip4_frag+0x128>
      tmp = tmp | IP_MF;
 8017a40:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017a44:	f7fe fbd5 	bl	80161f2 <lwip_htons>
 8017a48:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8017a4c:	9e05      	ldr	r6, [sp, #20]
 8017a4e:	f106 0014 	add.w	r0, r6, #20
 8017a52:	b280      	uxth	r0, r0
 8017a54:	f7fe fbcd 	bl	80161f2 <lwip_htons>
 8017a58:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	f88b 300a 	strb.w	r3, [fp, #10]
 8017a62:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8017a66:	9807      	ldr	r0, [sp, #28]
 8017a68:	6943      	ldr	r3, [r0, #20]
 8017a6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a6c:	9f04      	ldr	r7, [sp, #16]
 8017a6e:	4639      	mov	r1, r7
 8017a70:	4798      	blx	r3
    pbuf_free(rambuf);
 8017a72:	4638      	mov	r0, r7
 8017a74:	f000 fce0 	bl	8018438 <pbuf_free>
    left -= fragsize;
 8017a78:	eba9 0306 	sub.w	r3, r9, r6
 8017a7c:	fa1f f983 	uxth.w	r9, r3
    ofo += nfb;
 8017a80:	9b06      	ldr	r3, [sp, #24]
 8017a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a84:	4413      	add	r3, r2
 8017a86:	b29b      	uxth	r3, r3
 8017a88:	9306      	str	r3, [sp, #24]
  while (left) {
 8017a8a:	f1b9 0f00 	cmp.w	r9, #0
 8017a8e:	d029      	beq.n	8017ae4 <ip4_frag+0x1c8>
    fragsize = LWIP_MIN(left, nfb * 8);
 8017a90:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8017a94:	00db      	lsls	r3, r3, #3
 8017a96:	f8cd 9020 	str.w	r9, [sp, #32]
 8017a9a:	454b      	cmp	r3, r9
 8017a9c:	bfa8      	it	ge
 8017a9e:	464b      	movge	r3, r9
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	2114      	movs	r1, #20
 8017aa8:	2002      	movs	r0, #2
 8017aaa:	f000 fd31 	bl	8018510 <pbuf_alloc>
    if (rambuf == NULL) {
 8017aae:	9004      	str	r0, [sp, #16]
 8017ab0:	b1d0      	cbz	r0, 8017ae8 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017ab2:	896b      	ldrh	r3, [r5, #10]
 8017ab4:	2b13      	cmp	r3, #19
 8017ab6:	f67f af71 	bls.w	801799c <ip4_frag+0x80>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017aba:	9f04      	ldr	r7, [sp, #16]
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f8da 2000 	ldr.w	r2, [sl]
 8017ac2:	f8da 6004 	ldr.w	r6, [sl, #4]
 8017ac6:	f8da 0008 	ldr.w	r0, [sl, #8]
 8017aca:	f8da 100c 	ldr.w	r1, [sl, #12]
 8017ace:	601a      	str	r2, [r3, #0]
 8017ad0:	605e      	str	r6, [r3, #4]
 8017ad2:	6098      	str	r0, [r3, #8]
 8017ad4:	60d9      	str	r1, [r3, #12]
 8017ad6:	f8da 2010 	ldr.w	r2, [sl, #16]
 8017ada:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017adc:	f8d7 b004 	ldr.w	fp, [r7, #4]
    left_to_copy = fragsize;
 8017ae0:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 8017ae2:	e783      	b.n	80179ec <ip4_frag+0xd0>
  return ERR_OK;
 8017ae4:	2000      	movs	r0, #0
 8017ae6:	e793      	b.n	8017a10 <ip4_frag+0xf4>
  return ERR_MEM;
 8017ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8017aec:	e790      	b.n	8017a10 <ip4_frag+0xf4>
 8017aee:	bf00      	nop
 8017af0:	0802347c 	.word	0x0802347c
 8017af4:	0802338c 	.word	0x0802338c
 8017af8:	0801fe1c 	.word	0x0801fe1c
 8017afc:	080233b4 	.word	0x080233b4
 8017b00:	080233d0 	.word	0x080233d0
 8017b04:	08017515 	.word	0x08017515

08017b08 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017b08:	b510      	push	{r4, lr}
 8017b0a:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017b0c:	4b2d      	ldr	r3, [pc, #180]	; (8017bc4 <plug_holes+0xbc>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	4283      	cmp	r3, r0
 8017b12:	d831      	bhi.n	8017b78 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017b14:	4b2c      	ldr	r3, [pc, #176]	; (8017bc8 <plug_holes+0xc0>)
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	429c      	cmp	r4, r3
 8017b1a:	d235      	bcs.n	8017b88 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017b1c:	7923      	ldrb	r3, [r4, #4]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d13a      	bne.n	8017b98 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017b22:	8823      	ldrh	r3, [r4, #0]
 8017b24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017b28:	d83e      	bhi.n	8017ba8 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8017b2a:	4b26      	ldr	r3, [pc, #152]	; (8017bc4 <plug_holes+0xbc>)
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	8821      	ldrh	r1, [r4, #0]
 8017b30:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8017b32:	4294      	cmp	r4, r2
 8017b34:	d00f      	beq.n	8017b56 <plug_holes+0x4e>
 8017b36:	7910      	ldrb	r0, [r2, #4]
 8017b38:	b968      	cbnz	r0, 8017b56 <plug_holes+0x4e>
 8017b3a:	4823      	ldr	r0, [pc, #140]	; (8017bc8 <plug_holes+0xc0>)
 8017b3c:	6800      	ldr	r0, [r0, #0]
 8017b3e:	4282      	cmp	r2, r0
 8017b40:	d009      	beq.n	8017b56 <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8017b42:	4822      	ldr	r0, [pc, #136]	; (8017bcc <plug_holes+0xc4>)
 8017b44:	6800      	ldr	r0, [r0, #0]
 8017b46:	4282      	cmp	r2, r0
 8017b48:	d036      	beq.n	8017bb8 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 8017b4a:	5a5a      	ldrh	r2, [r3, r1]
 8017b4c:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8017b4e:	5a5a      	ldrh	r2, [r3, r1]
 8017b50:	441a      	add	r2, r3
 8017b52:	1ae1      	subs	r1, r4, r3
 8017b54:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8017b56:	8861      	ldrh	r1, [r4, #2]
 8017b58:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8017b5a:	4294      	cmp	r4, r2
 8017b5c:	d00b      	beq.n	8017b76 <plug_holes+0x6e>
 8017b5e:	7910      	ldrb	r0, [r2, #4]
 8017b60:	b948      	cbnz	r0, 8017b76 <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8017b62:	481a      	ldr	r0, [pc, #104]	; (8017bcc <plug_holes+0xc4>)
 8017b64:	6800      	ldr	r0, [r0, #0]
 8017b66:	4284      	cmp	r4, r0
 8017b68:	d029      	beq.n	8017bbe <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 8017b6a:	8820      	ldrh	r0, [r4, #0]
 8017b6c:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8017b6e:	8821      	ldrh	r1, [r4, #0]
 8017b70:	4419      	add	r1, r3
 8017b72:	1ad3      	subs	r3, r2, r3
 8017b74:	804b      	strh	r3, [r1, #2]
 8017b76:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017b78:	4b15      	ldr	r3, [pc, #84]	; (8017bd0 <plug_holes+0xc8>)
 8017b7a:	f240 125d 	movw	r2, #349	; 0x15d
 8017b7e:	4915      	ldr	r1, [pc, #84]	; (8017bd4 <plug_holes+0xcc>)
 8017b80:	4815      	ldr	r0, [pc, #84]	; (8017bd8 <plug_holes+0xd0>)
 8017b82:	f007 fb7c 	bl	801f27e <iprintf>
 8017b86:	e7c5      	b.n	8017b14 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017b88:	4b11      	ldr	r3, [pc, #68]	; (8017bd0 <plug_holes+0xc8>)
 8017b8a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8017b8e:	4913      	ldr	r1, [pc, #76]	; (8017bdc <plug_holes+0xd4>)
 8017b90:	4811      	ldr	r0, [pc, #68]	; (8017bd8 <plug_holes+0xd0>)
 8017b92:	f007 fb74 	bl	801f27e <iprintf>
 8017b96:	e7c1      	b.n	8017b1c <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017b98:	4b0d      	ldr	r3, [pc, #52]	; (8017bd0 <plug_holes+0xc8>)
 8017b9a:	f240 125f 	movw	r2, #351	; 0x15f
 8017b9e:	4910      	ldr	r1, [pc, #64]	; (8017be0 <plug_holes+0xd8>)
 8017ba0:	480d      	ldr	r0, [pc, #52]	; (8017bd8 <plug_holes+0xd0>)
 8017ba2:	f007 fb6c 	bl	801f27e <iprintf>
 8017ba6:	e7bc      	b.n	8017b22 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017ba8:	4b09      	ldr	r3, [pc, #36]	; (8017bd0 <plug_holes+0xc8>)
 8017baa:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8017bae:	490d      	ldr	r1, [pc, #52]	; (8017be4 <plug_holes+0xdc>)
 8017bb0:	4809      	ldr	r0, [pc, #36]	; (8017bd8 <plug_holes+0xd0>)
 8017bb2:	f007 fb64 	bl	801f27e <iprintf>
 8017bb6:	e7b8      	b.n	8017b2a <plug_holes+0x22>
      lfree = mem;
 8017bb8:	4a04      	ldr	r2, [pc, #16]	; (8017bcc <plug_holes+0xc4>)
 8017bba:	6014      	str	r4, [r2, #0]
 8017bbc:	e7c5      	b.n	8017b4a <plug_holes+0x42>
      lfree = pmem;
 8017bbe:	4803      	ldr	r0, [pc, #12]	; (8017bcc <plug_holes+0xc4>)
 8017bc0:	6002      	str	r2, [r0, #0]
 8017bc2:	e7d2      	b.n	8017b6a <plug_holes+0x62>
 8017bc4:	2000949c 	.word	0x2000949c
 8017bc8:	200094a0 	.word	0x200094a0
 8017bcc:	20009494 	.word	0x20009494
 8017bd0:	08023680 	.word	0x08023680
 8017bd4:	080236b0 	.word	0x080236b0
 8017bd8:	0801fe1c 	.word	0x0801fe1c
 8017bdc:	080236c8 	.word	0x080236c8
 8017be0:	080236e4 	.word	0x080236e4
 8017be4:	08023700 	.word	0x08023700

08017be8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8017be8:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8017bea:	4b11      	ldr	r3, [pc, #68]	; (8017c30 <mem_init+0x48>)
 8017bec:	f023 0303 	bic.w	r3, r3, #3
 8017bf0:	4a10      	ldr	r2, [pc, #64]	; (8017c34 <mem_init+0x4c>)
 8017bf2:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8017bf4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8017bf8:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8017bfe:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8017c00:	185a      	adds	r2, r3, r1
 8017c02:	480d      	ldr	r0, [pc, #52]	; (8017c38 <mem_init+0x50>)
 8017c04:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8017c06:	2001      	movs	r0, #1
 8017c08:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017c0a:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8017c0e:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8017c10:	4a0a      	ldr	r2, [pc, #40]	; (8017c3c <mem_init+0x54>)
 8017c12:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8017c14:	480a      	ldr	r0, [pc, #40]	; (8017c40 <mem_init+0x58>)
 8017c16:	f004 fdc9 	bl	801c7ac <sys_mutex_new>
 8017c1a:	b900      	cbnz	r0, 8017c1e <mem_init+0x36>
 8017c1c:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8017c1e:	4b09      	ldr	r3, [pc, #36]	; (8017c44 <mem_init+0x5c>)
 8017c20:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8017c24:	4908      	ldr	r1, [pc, #32]	; (8017c48 <mem_init+0x60>)
 8017c26:	4809      	ldr	r0, [pc, #36]	; (8017c4c <mem_init+0x64>)
 8017c28:	f007 fb29 	bl	801f27e <iprintf>
  }
}
 8017c2c:	e7f6      	b.n	8017c1c <mem_init+0x34>
 8017c2e:	bf00      	nop
 8017c30:	2000a26f 	.word	0x2000a26f
 8017c34:	2000949c 	.word	0x2000949c
 8017c38:	200094a0 	.word	0x200094a0
 8017c3c:	20009494 	.word	0x20009494
 8017c40:	20009498 	.word	0x20009498
 8017c44:	08023680 	.word	0x08023680
 8017c48:	0802358c 	.word	0x0802358c
 8017c4c:	0801fe1c 	.word	0x0801fe1c

08017c50 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017c50:	2800      	cmp	r0, #0
 8017c52:	d048      	beq.n	8017ce6 <mem_free+0x96>
{
 8017c54:	b538      	push	{r3, r4, r5, lr}
 8017c56:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8017c58:	f010 0f03 	tst.w	r0, #3
 8017c5c:	d11b      	bne.n	8017c96 <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017c5e:	4b22      	ldr	r3, [pc, #136]	; (8017ce8 <mem_free+0x98>)
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	429c      	cmp	r4, r3
 8017c64:	d303      	bcc.n	8017c6e <mem_free+0x1e>
 8017c66:	4b21      	ldr	r3, [pc, #132]	; (8017cec <mem_free+0x9c>)
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	429c      	cmp	r4, r3
 8017c6c:	d306      	bcc.n	8017c7c <mem_free+0x2c>
 8017c6e:	4b20      	ldr	r3, [pc, #128]	; (8017cf0 <mem_free+0xa0>)
 8017c70:	f240 12af 	movw	r2, #431	; 0x1af
 8017c74:	491f      	ldr	r1, [pc, #124]	; (8017cf4 <mem_free+0xa4>)
 8017c76:	4820      	ldr	r0, [pc, #128]	; (8017cf8 <mem_free+0xa8>)
 8017c78:	f007 fb01 	bl	801f27e <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017c7c:	4b1a      	ldr	r3, [pc, #104]	; (8017ce8 <mem_free+0x98>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	429c      	cmp	r4, r3
 8017c82:	d303      	bcc.n	8017c8c <mem_free+0x3c>
 8017c84:	4b19      	ldr	r3, [pc, #100]	; (8017cec <mem_free+0x9c>)
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	429c      	cmp	r4, r3
 8017c8a:	d30c      	bcc.n	8017ca6 <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8017c8c:	f004 fdc0 	bl	801c810 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8017c90:	f004 fdca 	bl	801c828 <sys_arch_unprotect>
    return;
 8017c94:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8017c96:	4b16      	ldr	r3, [pc, #88]	; (8017cf0 <mem_free+0xa0>)
 8017c98:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8017c9c:	4917      	ldr	r1, [pc, #92]	; (8017cfc <mem_free+0xac>)
 8017c9e:	4816      	ldr	r0, [pc, #88]	; (8017cf8 <mem_free+0xa8>)
 8017ca0:	f007 faed 	bl	801f27e <iprintf>
 8017ca4:	e7db      	b.n	8017c5e <mem_free+0xe>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017ca6:	4816      	ldr	r0, [pc, #88]	; (8017d00 <mem_free+0xb0>)
 8017ca8:	f004 fd91 	bl	801c7ce <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8017cac:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8017cb0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8017cb4:	b17b      	cbz	r3, 8017cd6 <mem_free+0x86>
  /* ... and is now unused. */
  mem->used = 0;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8017cbc:	4b11      	ldr	r3, [pc, #68]	; (8017d04 <mem_free+0xb4>)
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	429d      	cmp	r5, r3
 8017cc2:	d201      	bcs.n	8017cc8 <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8017cc4:	4b0f      	ldr	r3, [pc, #60]	; (8017d04 <mem_free+0xb4>)
 8017cc6:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017cc8:	4628      	mov	r0, r5
 8017cca:	f7ff ff1d 	bl	8017b08 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017cce:	480c      	ldr	r0, [pc, #48]	; (8017d00 <mem_free+0xb0>)
 8017cd0:	f004 fd84 	bl	801c7dc <sys_mutex_unlock>
 8017cd4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8017cd6:	4b06      	ldr	r3, [pc, #24]	; (8017cf0 <mem_free+0xa0>)
 8017cd8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8017cdc:	490a      	ldr	r1, [pc, #40]	; (8017d08 <mem_free+0xb8>)
 8017cde:	4806      	ldr	r0, [pc, #24]	; (8017cf8 <mem_free+0xa8>)
 8017ce0:	f007 facd 	bl	801f27e <iprintf>
 8017ce4:	e7e7      	b.n	8017cb6 <mem_free+0x66>
 8017ce6:	4770      	bx	lr
 8017ce8:	2000949c 	.word	0x2000949c
 8017cec:	200094a0 	.word	0x200094a0
 8017cf0:	08023680 	.word	0x08023680
 8017cf4:	08023560 	.word	0x08023560
 8017cf8:	0801fe1c 	.word	0x0801fe1c
 8017cfc:	0802353c 	.word	0x0802353c
 8017d00:	20009498 	.word	0x20009498
 8017d04:	20009494 	.word	0x20009494
 8017d08:	08023578 	.word	0x08023578

08017d0c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8017d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d0e:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8017d10:	1ccc      	adds	r4, r1, #3
 8017d12:	b2a4      	uxth	r4, r4
 8017d14:	f024 0403 	bic.w	r4, r4, #3
 8017d18:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 8017d1a:	2c0b      	cmp	r4, #11
 8017d1c:	d800      	bhi.n	8017d20 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8017d1e:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8017d20:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8017d24:	d879      	bhi.n	8017e1a <mem_trim+0x10e>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017d26:	4b3f      	ldr	r3, [pc, #252]	; (8017e24 <mem_trim+0x118>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	42ab      	cmp	r3, r5
 8017d2c:	d803      	bhi.n	8017d36 <mem_trim+0x2a>
 8017d2e:	4b3e      	ldr	r3, [pc, #248]	; (8017e28 <mem_trim+0x11c>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	429d      	cmp	r5, r3
 8017d34:	d306      	bcc.n	8017d44 <mem_trim+0x38>
 8017d36:	4b3d      	ldr	r3, [pc, #244]	; (8017e2c <mem_trim+0x120>)
 8017d38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017d3c:	493c      	ldr	r1, [pc, #240]	; (8017e30 <mem_trim+0x124>)
 8017d3e:	483d      	ldr	r0, [pc, #244]	; (8017e34 <mem_trim+0x128>)
 8017d40:	f007 fa9d 	bl	801f27e <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017d44:	4b37      	ldr	r3, [pc, #220]	; (8017e24 <mem_trim+0x118>)
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	429d      	cmp	r5, r3
 8017d4a:	d336      	bcc.n	8017dba <mem_trim+0xae>
 8017d4c:	4a36      	ldr	r2, [pc, #216]	; (8017e28 <mem_trim+0x11c>)
 8017d4e:	6812      	ldr	r2, [r2, #0]
 8017d50:	4295      	cmp	r5, r2
 8017d52:	d232      	bcs.n	8017dba <mem_trim+0xae>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8017d54:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8017d58:	1aff      	subs	r7, r7, r3
 8017d5a:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8017d5c:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8017d60:	1bf6      	subs	r6, r6, r7
 8017d62:	b2b6      	uxth	r6, r6
 8017d64:	3e08      	subs	r6, #8
 8017d66:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017d68:	42b4      	cmp	r4, r6
 8017d6a:	d82c      	bhi.n	8017dc6 <mem_trim+0xba>
  if (newsize > size) {
 8017d6c:	42b4      	cmp	r4, r6
 8017d6e:	d856      	bhi.n	8017e1e <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8017d70:	d027      	beq.n	8017dc2 <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017d72:	4831      	ldr	r0, [pc, #196]	; (8017e38 <mem_trim+0x12c>)
 8017d74:	f004 fd2b 	bl	801c7ce <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8017d78:	4b2a      	ldr	r3, [pc, #168]	; (8017e24 <mem_trim+0x118>)
 8017d7a:	681a      	ldr	r2, [r3, #0]
 8017d7c:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8017d80:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8017d82:	7908      	ldrb	r0, [r1, #4]
 8017d84:	bb58      	cbnz	r0, 8017dde <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8017d86:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8017d88:	19e3      	adds	r3, r4, r7
 8017d8a:	b29b      	uxth	r3, r3
 8017d8c:	3308      	adds	r3, #8
 8017d8e:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8017d90:	4c2a      	ldr	r4, [pc, #168]	; (8017e3c <mem_trim+0x130>)
 8017d92:	6824      	ldr	r4, [r4, #0]
 8017d94:	42a1      	cmp	r1, r4
 8017d96:	d01e      	beq.n	8017dd6 <mem_trim+0xca>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8017d98:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 8017d9a:	2400      	movs	r4, #0
 8017d9c:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017d9e:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 8017da0:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017da2:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017da6:	5ad1      	ldrh	r1, [r2, r3]
 8017da8:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8017dac:	d001      	beq.n	8017db2 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017dae:	440a      	add	r2, r1
 8017db0:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017db2:	4821      	ldr	r0, [pc, #132]	; (8017e38 <mem_trim+0x12c>)
 8017db4:	f004 fd12 	bl	801c7dc <sys_mutex_unlock>
  return rmem;
 8017db8:	e003      	b.n	8017dc2 <mem_trim+0xb6>
    SYS_ARCH_PROTECT(lev);
 8017dba:	f004 fd29 	bl	801c810 <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 8017dbe:	f004 fd33 	bl	801c828 <sys_arch_unprotect>
}
 8017dc2:	4628      	mov	r0, r5
 8017dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017dc6:	4b19      	ldr	r3, [pc, #100]	; (8017e2c <mem_trim+0x120>)
 8017dc8:	f240 2206 	movw	r2, #518	; 0x206
 8017dcc:	491c      	ldr	r1, [pc, #112]	; (8017e40 <mem_trim+0x134>)
 8017dce:	4819      	ldr	r0, [pc, #100]	; (8017e34 <mem_trim+0x128>)
 8017dd0:	f007 fa55 	bl	801f27e <iprintf>
 8017dd4:	e7ca      	b.n	8017d6c <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8017dd6:	18d1      	adds	r1, r2, r3
 8017dd8:	4c18      	ldr	r4, [pc, #96]	; (8017e3c <mem_trim+0x130>)
 8017dda:	6021      	str	r1, [r4, #0]
 8017ddc:	e7dc      	b.n	8017d98 <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017dde:	f104 0314 	add.w	r3, r4, #20
 8017de2:	42b3      	cmp	r3, r6
 8017de4:	d8e5      	bhi.n	8017db2 <mem_trim+0xa6>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8017de6:	19e3      	adds	r3, r4, r7
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	3308      	adds	r3, #8
 8017dec:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8017dee:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8017df0:	4812      	ldr	r0, [pc, #72]	; (8017e3c <mem_trim+0x130>)
 8017df2:	6800      	ldr	r0, [r0, #0]
 8017df4:	4281      	cmp	r1, r0
 8017df6:	d201      	bcs.n	8017dfc <mem_trim+0xf0>
      lfree = mem2;
 8017df8:	4810      	ldr	r0, [pc, #64]	; (8017e3c <mem_trim+0x130>)
 8017dfa:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8017dfc:	2000      	movs	r0, #0
 8017dfe:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8017e00:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8017e04:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8017e06:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8017e08:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017e0c:	5ad1      	ldrh	r1, [r2, r3]
 8017e0e:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8017e12:	d0ce      	beq.n	8017db2 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017e14:	440a      	add	r2, r1
 8017e16:	8053      	strh	r3, [r2, #2]
 8017e18:	e7cb      	b.n	8017db2 <mem_trim+0xa6>
    return NULL;
 8017e1a:	2500      	movs	r5, #0
 8017e1c:	e7d1      	b.n	8017dc2 <mem_trim+0xb6>
    return NULL;
 8017e1e:	2500      	movs	r5, #0
 8017e20:	e7cf      	b.n	8017dc2 <mem_trim+0xb6>
 8017e22:	bf00      	nop
 8017e24:	2000949c 	.word	0x2000949c
 8017e28:	200094a0 	.word	0x200094a0
 8017e2c:	08023680 	.word	0x08023680
 8017e30:	08023648 	.word	0x08023648
 8017e34:	0801fe1c 	.word	0x0801fe1c
 8017e38:	20009498 	.word	0x20009498
 8017e3c:	20009494 	.word	0x20009494
 8017e40:	08023660 	.word	0x08023660

08017e44 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8017e44:	2800      	cmp	r0, #0
 8017e46:	f000 808e 	beq.w	8017f66 <mem_malloc+0x122>
{
 8017e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e4c:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8017e4e:	3503      	adds	r5, #3
 8017e50:	b2ad      	uxth	r5, r5
 8017e52:	f025 0503 	bic.w	r5, r5, #3
 8017e56:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 8017e58:	2d0b      	cmp	r5, #11
 8017e5a:	d800      	bhi.n	8017e5e <mem_malloc+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8017e5c:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 8017e5e:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8017e62:	f200 8082 	bhi.w	8017f6a <mem_malloc+0x126>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017e66:	4842      	ldr	r0, [pc, #264]	; (8017f70 <mem_malloc+0x12c>)
 8017e68:	f004 fcb1 	bl	801c7ce <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8017e6c:	4b41      	ldr	r3, [pc, #260]	; (8017f74 <mem_malloc+0x130>)
 8017e6e:	6818      	ldr	r0, [r3, #0]
 8017e70:	4b41      	ldr	r3, [pc, #260]	; (8017f78 <mem_malloc+0x134>)
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	1a1b      	subs	r3, r3, r0
 8017e76:	b29b      	uxth	r3, r3
 8017e78:	e049      	b.n	8017f0e <mem_malloc+0xca>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017e7a:	2301      	movs	r3, #1
 8017e7c:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017e7e:	4b3e      	ldr	r3, [pc, #248]	; (8017f78 <mem_malloc+0x134>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	429c      	cmp	r4, r3
 8017e84:	d014      	beq.n	8017eb0 <mem_malloc+0x6c>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017e86:	483a      	ldr	r0, [pc, #232]	; (8017f70 <mem_malloc+0x12c>)
 8017e88:	f004 fca8 	bl	801c7dc <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017e8c:	4426      	add	r6, r4
 8017e8e:	3608      	adds	r6, #8
 8017e90:	4b3a      	ldr	r3, [pc, #232]	; (8017f7c <mem_malloc+0x138>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	429e      	cmp	r6, r3
 8017e96:	d821      	bhi.n	8017edc <mem_malloc+0x98>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017e98:	f014 0503 	ands.w	r5, r4, #3
 8017e9c:	d126      	bne.n	8017eec <mem_malloc+0xa8>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017e9e:	2d00      	cmp	r5, #0
 8017ea0:	d12c      	bne.n	8017efc <mem_malloc+0xb8>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8017ea2:	f104 0008 	add.w	r0, r4, #8
 8017ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 8017ea8:	4a32      	ldr	r2, [pc, #200]	; (8017f74 <mem_malloc+0x130>)
 8017eaa:	6812      	ldr	r2, [r2, #0]
 8017eac:	881b      	ldrh	r3, [r3, #0]
 8017eae:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 8017eb0:	791a      	ldrb	r2, [r3, #4]
 8017eb2:	b11a      	cbz	r2, 8017ebc <mem_malloc+0x78>
 8017eb4:	4931      	ldr	r1, [pc, #196]	; (8017f7c <mem_malloc+0x138>)
 8017eb6:	6809      	ldr	r1, [r1, #0]
 8017eb8:	428b      	cmp	r3, r1
 8017eba:	d1f5      	bne.n	8017ea8 <mem_malloc+0x64>
          lfree = cur;
 8017ebc:	492e      	ldr	r1, [pc, #184]	; (8017f78 <mem_malloc+0x134>)
 8017ebe:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017ec0:	492e      	ldr	r1, [pc, #184]	; (8017f7c <mem_malloc+0x138>)
 8017ec2:	6809      	ldr	r1, [r1, #0]
 8017ec4:	428b      	cmp	r3, r1
 8017ec6:	d0de      	beq.n	8017e86 <mem_malloc+0x42>
 8017ec8:	2a00      	cmp	r2, #0
 8017eca:	d0dc      	beq.n	8017e86 <mem_malloc+0x42>
 8017ecc:	4b2c      	ldr	r3, [pc, #176]	; (8017f80 <mem_malloc+0x13c>)
 8017ece:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017ed2:	492c      	ldr	r1, [pc, #176]	; (8017f84 <mem_malloc+0x140>)
 8017ed4:	482c      	ldr	r0, [pc, #176]	; (8017f88 <mem_malloc+0x144>)
 8017ed6:	f007 f9d2 	bl	801f27e <iprintf>
 8017eda:	e7d4      	b.n	8017e86 <mem_malloc+0x42>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017edc:	4b28      	ldr	r3, [pc, #160]	; (8017f80 <mem_malloc+0x13c>)
 8017ede:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8017ee2:	492a      	ldr	r1, [pc, #168]	; (8017f8c <mem_malloc+0x148>)
 8017ee4:	4828      	ldr	r0, [pc, #160]	; (8017f88 <mem_malloc+0x144>)
 8017ee6:	f007 f9ca 	bl	801f27e <iprintf>
 8017eea:	e7d5      	b.n	8017e98 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017eec:	4b24      	ldr	r3, [pc, #144]	; (8017f80 <mem_malloc+0x13c>)
 8017eee:	f240 22d6 	movw	r2, #726	; 0x2d6
 8017ef2:	4927      	ldr	r1, [pc, #156]	; (8017f90 <mem_malloc+0x14c>)
 8017ef4:	4824      	ldr	r0, [pc, #144]	; (8017f88 <mem_malloc+0x144>)
 8017ef6:	f007 f9c2 	bl	801f27e <iprintf>
 8017efa:	e7d0      	b.n	8017e9e <mem_malloc+0x5a>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017efc:	4b20      	ldr	r3, [pc, #128]	; (8017f80 <mem_malloc+0x13c>)
 8017efe:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8017f02:	4924      	ldr	r1, [pc, #144]	; (8017f94 <mem_malloc+0x150>)
 8017f04:	4820      	ldr	r0, [pc, #128]	; (8017f88 <mem_malloc+0x144>)
 8017f06:	f007 f9ba 	bl	801f27e <iprintf>
 8017f0a:	e7ca      	b.n	8017ea2 <mem_malloc+0x5e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8017f0c:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8017f0e:	461f      	mov	r7, r3
 8017f10:	462e      	mov	r6, r5
 8017f12:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 8017f16:	428b      	cmp	r3, r1
 8017f18:	d220      	bcs.n	8017f5c <mem_malloc+0x118>
      mem = (struct mem *)(void *)&ram[ptr];
 8017f1a:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 8017f1c:	7921      	ldrb	r1, [r4, #4]
 8017f1e:	2900      	cmp	r1, #0
 8017f20:	d1f4      	bne.n	8017f0c <mem_malloc+0xc8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017f22:	5ac2      	ldrh	r2, [r0, r3]
 8017f24:	1bd2      	subs	r2, r2, r7
 8017f26:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 8017f28:	4296      	cmp	r6, r2
 8017f2a:	d8ef      	bhi.n	8017f0c <mem_malloc+0xc8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017f2c:	f106 0114 	add.w	r1, r6, #20
 8017f30:	428a      	cmp	r2, r1
 8017f32:	d3a2      	bcc.n	8017e7a <mem_malloc+0x36>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8017f34:	18ea      	adds	r2, r5, r3
 8017f36:	b292      	uxth	r2, r2
 8017f38:	3208      	adds	r2, #8
 8017f3a:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8017f3c:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 8017f3e:	2500      	movs	r5, #0
 8017f40:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 8017f42:	8825      	ldrh	r5, [r4, #0]
 8017f44:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 8017f46:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8017f48:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017f4e:	5a83      	ldrh	r3, [r0, r2]
 8017f50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017f54:	d093      	beq.n	8017e7e <mem_malloc+0x3a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8017f56:	4418      	add	r0, r3
 8017f58:	8042      	strh	r2, [r0, #2]
 8017f5a:	e790      	b.n	8017e7e <mem_malloc+0x3a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017f5c:	4804      	ldr	r0, [pc, #16]	; (8017f70 <mem_malloc+0x12c>)
 8017f5e:	f004 fc3d 	bl	801c7dc <sys_mutex_unlock>
  return NULL;
 8017f62:	2000      	movs	r0, #0
 8017f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8017f66:	2000      	movs	r0, #0
 8017f68:	4770      	bx	lr
    return NULL;
 8017f6a:	2000      	movs	r0, #0
}
 8017f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f6e:	bf00      	nop
 8017f70:	20009498 	.word	0x20009498
 8017f74:	2000949c 	.word	0x2000949c
 8017f78:	20009494 	.word	0x20009494
 8017f7c:	200094a0 	.word	0x200094a0
 8017f80:	08023680 	.word	0x08023680
 8017f84:	080235a8 	.word	0x080235a8
 8017f88:	0801fe1c 	.word	0x0801fe1c
 8017f8c:	080235c4 	.word	0x080235c4
 8017f90:	080235f4 	.word	0x080235f4
 8017f94:	08023624 	.word	0x08023624

08017f98 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8017f98:	b538      	push	{r3, r4, r5, lr}
 8017f9a:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8017f9c:	f004 fc38 	bl	801c810 <sys_arch_protect>
 8017fa0:	4605      	mov	r5, r0

  memp = *desc->tab;
 8017fa2:	68a3      	ldr	r3, [r4, #8]
 8017fa4:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8017fa6:	b18c      	cbz	r4, 8017fcc <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8017fa8:	6822      	ldr	r2, [r4, #0]
 8017faa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017fac:	f014 0f03 	tst.w	r4, #3
 8017fb0:	d104      	bne.n	8017fbc <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017fb2:	4628      	mov	r0, r5
 8017fb4:	f004 fc38 	bl	801c828 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8017fb8:	4620      	mov	r0, r4
 8017fba:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017fbc:	4b05      	ldr	r3, [pc, #20]	; (8017fd4 <do_memp_malloc_pool+0x3c>)
 8017fbe:	f240 1249 	movw	r2, #329	; 0x149
 8017fc2:	4905      	ldr	r1, [pc, #20]	; (8017fd8 <do_memp_malloc_pool+0x40>)
 8017fc4:	4805      	ldr	r0, [pc, #20]	; (8017fdc <do_memp_malloc_pool+0x44>)
 8017fc6:	f007 f95a 	bl	801f27e <iprintf>
 8017fca:	e7f2      	b.n	8017fb2 <do_memp_malloc_pool+0x1a>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8017fcc:	f004 fc2c 	bl	801c828 <sys_arch_unprotect>
  return NULL;
 8017fd0:	2000      	movs	r0, #0
}
 8017fd2:	bd38      	pop	{r3, r4, r5, pc}
 8017fd4:	0802374c 	.word	0x0802374c
 8017fd8:	0802377c 	.word	0x0802377c
 8017fdc:	0801fe1c 	.word	0x0801fe1c

08017fe0 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8017fe0:	b538      	push	{r3, r4, r5, lr}
 8017fe2:	4605      	mov	r5, r0
 8017fe4:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8017fe6:	f011 0f03 	tst.w	r1, #3
 8017fea:	d109      	bne.n	8018000 <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8017fec:	f004 fc10 	bl	801c810 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8017ff0:	68ab      	ldr	r3, [r5, #8]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8017ff6:	68ab      	ldr	r3, [r5, #8]
 8017ff8:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8017ffa:	f004 fc15 	bl	801c828 <sys_arch_unprotect>
 8017ffe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8018000:	4b03      	ldr	r3, [pc, #12]	; (8018010 <do_memp_free_pool+0x30>)
 8018002:	f240 129d 	movw	r2, #413	; 0x19d
 8018006:	4903      	ldr	r1, [pc, #12]	; (8018014 <do_memp_free_pool+0x34>)
 8018008:	4803      	ldr	r0, [pc, #12]	; (8018018 <do_memp_free_pool+0x38>)
 801800a:	f007 f938 	bl	801f27e <iprintf>
 801800e:	e7ed      	b.n	8017fec <do_memp_free_pool+0xc>
 8018010:	0802374c 	.word	0x0802374c
 8018014:	0802372c 	.word	0x0802372c
 8018018:	0801fe1c 	.word	0x0801fe1c

0801801c <memp_init_pool>:
  *desc->tab = NULL;
 801801c:	6883      	ldr	r3, [r0, #8]
 801801e:	2200      	movs	r2, #0
 8018020:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8018022:	6843      	ldr	r3, [r0, #4]
 8018024:	3303      	adds	r3, #3
 8018026:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 801802a:	e007      	b.n	801803c <memp_init_pool+0x20>
    memp->next = *desc->tab;
 801802c:	6881      	ldr	r1, [r0, #8]
 801802e:	6809      	ldr	r1, [r1, #0]
 8018030:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8018032:	6881      	ldr	r1, [r0, #8]
 8018034:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8018036:	8801      	ldrh	r1, [r0, #0]
 8018038:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 801803a:	3201      	adds	r2, #1
 801803c:	8841      	ldrh	r1, [r0, #2]
 801803e:	428a      	cmp	r2, r1
 8018040:	dbf4      	blt.n	801802c <memp_init_pool+0x10>
}
 8018042:	4770      	bx	lr

08018044 <memp_init>:
{
 8018044:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8018046:	2400      	movs	r4, #0
 8018048:	e006      	b.n	8018058 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 801804a:	4b05      	ldr	r3, [pc, #20]	; (8018060 <memp_init+0x1c>)
 801804c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018050:	f7ff ffe4 	bl	801801c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8018054:	3401      	adds	r4, #1
 8018056:	b2a4      	uxth	r4, r4
 8018058:	2c0b      	cmp	r4, #11
 801805a:	d9f6      	bls.n	801804a <memp_init+0x6>
}
 801805c:	bd10      	pop	{r4, pc}
 801805e:	bf00      	nop
 8018060:	0802386c 	.word	0x0802386c

08018064 <memp_malloc>:
{
 8018064:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8018066:	280b      	cmp	r0, #11
 8018068:	d805      	bhi.n	8018076 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 801806a:	4b07      	ldr	r3, [pc, #28]	; (8018088 <memp_malloc+0x24>)
 801806c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018070:	f7ff ff92 	bl	8017f98 <do_memp_malloc_pool>
}
 8018074:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8018076:	4b05      	ldr	r3, [pc, #20]	; (801808c <memp_malloc+0x28>)
 8018078:	f240 1287 	movw	r2, #391	; 0x187
 801807c:	4904      	ldr	r1, [pc, #16]	; (8018090 <memp_malloc+0x2c>)
 801807e:	4805      	ldr	r0, [pc, #20]	; (8018094 <memp_malloc+0x30>)
 8018080:	f007 f8fd 	bl	801f27e <iprintf>
 8018084:	2000      	movs	r0, #0
 8018086:	bd08      	pop	{r3, pc}
 8018088:	0802386c 	.word	0x0802386c
 801808c:	0802374c 	.word	0x0802374c
 8018090:	0802384c 	.word	0x0802384c
 8018094:	0801fe1c 	.word	0x0801fe1c

08018098 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8018098:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801809a:	280b      	cmp	r0, #11
 801809c:	d806      	bhi.n	80180ac <memp_free+0x14>

  if (mem == NULL) {
 801809e:	b121      	cbz	r1, 80180aa <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80180a0:	4b06      	ldr	r3, [pc, #24]	; (80180bc <memp_free+0x24>)
 80180a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80180a6:	f7ff ff9b 	bl	8017fe0 <do_memp_free_pool>
 80180aa:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80180ac:	4b04      	ldr	r3, [pc, #16]	; (80180c0 <memp_free+0x28>)
 80180ae:	f240 12db 	movw	r2, #475	; 0x1db
 80180b2:	4904      	ldr	r1, [pc, #16]	; (80180c4 <memp_free+0x2c>)
 80180b4:	4804      	ldr	r0, [pc, #16]	; (80180c8 <memp_free+0x30>)
 80180b6:	f007 f8e2 	bl	801f27e <iprintf>
 80180ba:	bd08      	pop	{r3, pc}
 80180bc:	0802386c 	.word	0x0802386c
 80180c0:	0802374c 	.word	0x0802374c
 80180c4:	08023830 	.word	0x08023830
 80180c8:	0801fe1c 	.word	0x0801fe1c

080180cc <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80180cc:	f011 0f01 	tst.w	r1, #1
 80180d0:	d00c      	beq.n	80180ec <netif_issue_reports+0x20>
{
 80180d2:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80180d4:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80180d6:	b123      	cbz	r3, 80180e2 <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80180d8:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80180dc:	f013 0f08 	tst.w	r3, #8
 80180e0:	d100      	bne.n	80180e4 <netif_issue_reports+0x18>
 80180e2:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 80180e4:	1d01      	adds	r1, r0, #4
 80180e6:	f7fe faed 	bl	80166c4 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80180ea:	e7fa      	b.n	80180e2 <netif_issue_reports+0x16>
 80180ec:	4770      	bx	lr

080180ee <netif_init>:
{
 80180ee:	4770      	bx	lr

080180f0 <netif_set_ipaddr>:
{
 80180f0:	b530      	push	{r4, r5, lr}
 80180f2:	b083      	sub	sp, #12
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80180f4:	460d      	mov	r5, r1
 80180f6:	b199      	cbz	r1, 8018120 <netif_set_ipaddr+0x30>
 80180f8:	680a      	ldr	r2, [r1, #0]
 80180fa:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80180fc:	6842      	ldr	r2, [r0, #4]
 80180fe:	9901      	ldr	r1, [sp, #4]
 8018100:	4291      	cmp	r1, r2
 8018102:	d00b      	beq.n	801811c <netif_set_ipaddr+0x2c>
 8018104:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8018106:	a901      	add	r1, sp, #4
 8018108:	3004      	adds	r0, #4
 801810a:	f001 fc93 	bl	8019a34 <tcp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801810e:	b15d      	cbz	r5, 8018128 <netif_set_ipaddr+0x38>
 8018110:	682b      	ldr	r3, [r5, #0]
 8018112:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8018114:	2101      	movs	r1, #1
 8018116:	4620      	mov	r0, r4
 8018118:	f7ff ffd8 	bl	80180cc <netif_issue_reports>
}
 801811c:	b003      	add	sp, #12
 801811e:	bd30      	pop	{r4, r5, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8018120:	4a02      	ldr	r2, [pc, #8]	; (801812c <netif_set_ipaddr+0x3c>)
 8018122:	6812      	ldr	r2, [r2, #0]
 8018124:	9201      	str	r2, [sp, #4]
 8018126:	e7e9      	b.n	80180fc <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8018128:	2300      	movs	r3, #0
 801812a:	e7f2      	b.n	8018112 <netif_set_ipaddr+0x22>
 801812c:	08023388 	.word	0x08023388

08018130 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8018130:	b111      	cbz	r1, 8018138 <netif_set_gw+0x8>
 8018132:	680b      	ldr	r3, [r1, #0]
 8018134:	60c3      	str	r3, [r0, #12]
 8018136:	4770      	bx	lr
 8018138:	2300      	movs	r3, #0
 801813a:	e7fb      	b.n	8018134 <netif_set_gw+0x4>

0801813c <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801813c:	b111      	cbz	r1, 8018144 <netif_set_netmask+0x8>
 801813e:	680b      	ldr	r3, [r1, #0]
 8018140:	6083      	str	r3, [r0, #8]
 8018142:	4770      	bx	lr
 8018144:	2300      	movs	r3, #0
 8018146:	e7fb      	b.n	8018140 <netif_set_netmask+0x4>

08018148 <netif_set_addr>:
{
 8018148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801814a:	4604      	mov	r4, r0
 801814c:	4617      	mov	r7, r2
 801814e:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 8018150:	460d      	mov	r5, r1
 8018152:	b109      	cbz	r1, 8018158 <netif_set_addr+0x10>
 8018154:	680b      	ldr	r3, [r1, #0]
 8018156:	b963      	cbnz	r3, 8018172 <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 8018158:	4629      	mov	r1, r5
 801815a:	4620      	mov	r0, r4
 801815c:	f7ff ffc8 	bl	80180f0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8018160:	4639      	mov	r1, r7
 8018162:	4620      	mov	r0, r4
 8018164:	f7ff ffea 	bl	801813c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8018168:	4631      	mov	r1, r6
 801816a:	4620      	mov	r0, r4
 801816c:	f7ff ffe0 	bl	8018130 <netif_set_gw>
 8018170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 8018172:	4611      	mov	r1, r2
 8018174:	f7ff ffe2 	bl	801813c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8018178:	4631      	mov	r1, r6
 801817a:	4620      	mov	r0, r4
 801817c:	f7ff ffd8 	bl	8018130 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 8018180:	4629      	mov	r1, r5
 8018182:	4620      	mov	r0, r4
 8018184:	f7ff ffb4 	bl	80180f0 <netif_set_ipaddr>
 8018188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801818c <netif_add>:
{
 801818c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018190:	4604      	mov	r4, r0
 8018192:	460e      	mov	r6, r1
 8018194:	4617      	mov	r7, r2
 8018196:	4698      	mov	r8, r3
 8018198:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 801819a:	b315      	cbz	r5, 80181e2 <netif_add+0x56>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801819c:	2300      	movs	r3, #0
 801819e:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80181a0:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80181a2:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 80181a4:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80181a8:	2303      	movs	r3, #3
 80181aa:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80181ae:	9b06      	ldr	r3, [sp, #24]
 80181b0:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80181b2:	4a11      	ldr	r2, [pc, #68]	; (80181f8 <netif_add+0x6c>)
 80181b4:	7813      	ldrb	r3, [r2, #0]
 80181b6:	1c59      	adds	r1, r3, #1
 80181b8:	7011      	strb	r1, [r2, #0]
 80181ba:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 80181be:	9b08      	ldr	r3, [sp, #32]
 80181c0:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80181c2:	4643      	mov	r3, r8
 80181c4:	463a      	mov	r2, r7
 80181c6:	4631      	mov	r1, r6
 80181c8:	4620      	mov	r0, r4
 80181ca:	f7ff ffbd 	bl	8018148 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80181ce:	4620      	mov	r0, r4
 80181d0:	47a8      	blx	r5
 80181d2:	b968      	cbnz	r0, 80181f0 <netif_add+0x64>
  netif->next = netif_list;
 80181d4:	4b09      	ldr	r3, [pc, #36]	; (80181fc <netif_add+0x70>)
 80181d6:	681a      	ldr	r2, [r3, #0]
 80181d8:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80181da:	601c      	str	r4, [r3, #0]
  return netif;
 80181dc:	4620      	mov	r0, r4
 80181de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 80181e2:	4b07      	ldr	r3, [pc, #28]	; (8018200 <netif_add+0x74>)
 80181e4:	22fb      	movs	r2, #251	; 0xfb
 80181e6:	4907      	ldr	r1, [pc, #28]	; (8018204 <netif_add+0x78>)
 80181e8:	4807      	ldr	r0, [pc, #28]	; (8018208 <netif_add+0x7c>)
 80181ea:	f007 f848 	bl	801f27e <iprintf>
 80181ee:	e7d5      	b.n	801819c <netif_add+0x10>
    return NULL;
 80181f0:	2000      	movs	r0, #0
}
 80181f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181f6:	bf00      	nop
 80181f8:	200094d4 	.word	0x200094d4
 80181fc:	2000eca8 	.word	0x2000eca8
 8018200:	0802389c 	.word	0x0802389c
 8018204:	080238d0 	.word	0x080238d0
 8018208:	0801fe1c 	.word	0x0801fe1c

0801820c <netif_set_default>:
  netif_default = netif;
 801820c:	4b01      	ldr	r3, [pc, #4]	; (8018214 <netif_set_default+0x8>)
 801820e:	6018      	str	r0, [r3, #0]
 8018210:	4770      	bx	lr
 8018212:	bf00      	nop
 8018214:	2000ecac 	.word	0x2000ecac

08018218 <netif_set_up>:
{
 8018218:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801821a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 801821e:	f013 0f01 	tst.w	r3, #1
 8018222:	d106      	bne.n	8018232 <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8018224:	f043 0301 	orr.w	r3, r3, #1
 8018228:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 801822c:	f013 0f04 	tst.w	r3, #4
 8018230:	d100      	bne.n	8018234 <netif_set_up+0x1c>
 8018232:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8018234:	2103      	movs	r1, #3
 8018236:	f7ff ff49 	bl	80180cc <netif_issue_reports>
}
 801823a:	e7fa      	b.n	8018232 <netif_set_up+0x1a>

0801823c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801823c:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801823e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8018242:	f013 0f01 	tst.w	r3, #1
 8018246:	d006      	beq.n	8018256 <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 8018248:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801824c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018250:	f013 0f08 	tst.w	r3, #8
 8018254:	d100      	bne.n	8018258 <netif_set_down+0x1c>
 8018256:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 8018258:	f7fe f9c0 	bl	80165dc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801825c:	e7fb      	b.n	8018256 <netif_set_down+0x1a>
	...

08018260 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8018260:	b570      	push	{r4, r5, r6, lr}
 8018262:	460c      	mov	r4, r1
 8018264:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018266:	4605      	mov	r5, r0
 8018268:	b1c0      	cbz	r0, 801829c <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 801826a:	2c00      	cmp	r4, #0
 801826c:	d04e      	beq.n	801830c <pbuf_header_impl+0xac>
 801826e:	2d00      	cmp	r5, #0
 8018270:	d04e      	beq.n	8018310 <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 8018272:	2c00      	cmp	r4, #0
 8018274:	db1a      	blt.n	80182ac <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8018276:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8018278:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 801827a:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 801827c:	b32b      	cbz	r3, 80182ca <pbuf_header_impl+0x6a>
 801827e:	2b03      	cmp	r3, #3
 8018280:	d023      	beq.n	80182ca <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8018282:	3b01      	subs	r3, #1
 8018284:	b29b      	uxth	r3, r3
 8018286:	2b01      	cmp	r3, #1
 8018288:	d837      	bhi.n	80182fa <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801828a:	2c00      	cmp	r4, #0
 801828c:	db2f      	blt.n	80182ee <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 801828e:	2c00      	cmp	r4, #0
 8018290:	dd40      	ble.n	8018314 <pbuf_header_impl+0xb4>
 8018292:	2e00      	cmp	r6, #0
 8018294:	d040      	beq.n	8018318 <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8018296:	1b09      	subs	r1, r1, r4
 8018298:	6069      	str	r1, [r5, #4]
 801829a:	e01c      	b.n	80182d6 <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 801829c:	4b1f      	ldr	r3, [pc, #124]	; (801831c <pbuf_header_impl+0xbc>)
 801829e:	f240 223f 	movw	r2, #575	; 0x23f
 80182a2:	491f      	ldr	r1, [pc, #124]	; (8018320 <pbuf_header_impl+0xc0>)
 80182a4:	481f      	ldr	r0, [pc, #124]	; (8018324 <pbuf_header_impl+0xc4>)
 80182a6:	f006 ffea 	bl	801f27e <iprintf>
 80182aa:	e7de      	b.n	801826a <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 80182ac:	b2a2      	uxth	r2, r4
 80182ae:	4252      	negs	r2, r2
 80182b0:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80182b2:	896b      	ldrh	r3, [r5, #10]
 80182b4:	429a      	cmp	r2, r3
 80182b6:	d9df      	bls.n	8018278 <pbuf_header_impl+0x18>
 80182b8:	4b18      	ldr	r3, [pc, #96]	; (801831c <pbuf_header_impl+0xbc>)
 80182ba:	f240 2247 	movw	r2, #583	; 0x247
 80182be:	491a      	ldr	r1, [pc, #104]	; (8018328 <pbuf_header_impl+0xc8>)
 80182c0:	4818      	ldr	r0, [pc, #96]	; (8018324 <pbuf_header_impl+0xc4>)
 80182c2:	f006 ffdc 	bl	801f27e <iprintf>
 80182c6:	2001      	movs	r0, #1
 80182c8:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 80182ca:	1b0b      	subs	r3, r1, r4
 80182cc:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80182ce:	f105 0210 	add.w	r2, r5, #16
 80182d2:	4293      	cmp	r3, r2
 80182d4:	d308      	bcc.n	80182e8 <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80182d6:	b2a4      	uxth	r4, r4
 80182d8:	896b      	ldrh	r3, [r5, #10]
 80182da:	4423      	add	r3, r4
 80182dc:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 80182de:	892b      	ldrh	r3, [r5, #8]
 80182e0:	441c      	add	r4, r3
 80182e2:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80182e4:	2000      	movs	r0, #0
 80182e6:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 80182e8:	6069      	str	r1, [r5, #4]
      return 1;
 80182ea:	2001      	movs	r0, #1
 80182ec:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80182ee:	896b      	ldrh	r3, [r5, #10]
 80182f0:	429a      	cmp	r2, r3
 80182f2:	d8cc      	bhi.n	801828e <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80182f4:	1b09      	subs	r1, r1, r4
 80182f6:	6069      	str	r1, [r5, #4]
 80182f8:	e7ed      	b.n	80182d6 <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 80182fa:	4b08      	ldr	r3, [pc, #32]	; (801831c <pbuf_header_impl+0xbc>)
 80182fc:	f240 2277 	movw	r2, #631	; 0x277
 8018300:	490a      	ldr	r1, [pc, #40]	; (801832c <pbuf_header_impl+0xcc>)
 8018302:	4808      	ldr	r0, [pc, #32]	; (8018324 <pbuf_header_impl+0xc4>)
 8018304:	f006 ffbb 	bl	801f27e <iprintf>
    return 1;
 8018308:	2001      	movs	r0, #1
 801830a:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 801830c:	2000      	movs	r0, #0
 801830e:	bd70      	pop	{r4, r5, r6, pc}
 8018310:	2000      	movs	r0, #0
 8018312:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8018314:	2001      	movs	r0, #1
 8018316:	bd70      	pop	{r4, r5, r6, pc}
 8018318:	2001      	movs	r0, #1
}
 801831a:	bd70      	pop	{r4, r5, r6, pc}
 801831c:	08023ba0 	.word	0x08023ba0
 8018320:	08020104 	.word	0x08020104
 8018324:	0801fe1c 	.word	0x0801fe1c
 8018328:	08023bd0 	.word	0x08023bd0
 801832c:	08023bf0 	.word	0x08023bf0

08018330 <pbuf_pool_is_empty>:
{
 8018330:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 8018332:	f004 fa6d 	bl	801c810 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8018336:	4b0c      	ldr	r3, [pc, #48]	; (8018368 <pbuf_pool_is_empty+0x38>)
 8018338:	781c      	ldrb	r4, [r3, #0]
 801833a:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 801833c:	2201      	movs	r2, #1
 801833e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018340:	f004 fa72 	bl	801c828 <sys_arch_unprotect>
  if (!queued) {
 8018344:	b104      	cbz	r4, 8018348 <pbuf_pool_is_empty+0x18>
 8018346:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018348:	2200      	movs	r2, #0
 801834a:	4611      	mov	r1, r2
 801834c:	4807      	ldr	r0, [pc, #28]	; (801836c <pbuf_pool_is_empty+0x3c>)
 801834e:	f7fd fe9f 	bl	8016090 <tcpip_callback_with_block>
 8018352:	2800      	cmp	r0, #0
 8018354:	d0f7      	beq.n	8018346 <pbuf_pool_is_empty+0x16>
 8018356:	f004 fa5b 	bl	801c810 <sys_arch_protect>
 801835a:	2200      	movs	r2, #0
 801835c:	4b02      	ldr	r3, [pc, #8]	; (8018368 <pbuf_pool_is_empty+0x38>)
 801835e:	701a      	strb	r2, [r3, #0]
 8018360:	f004 fa62 	bl	801c828 <sys_arch_unprotect>
}
 8018364:	e7ef      	b.n	8018346 <pbuf_pool_is_empty+0x16>
 8018366:	bf00      	nop
 8018368:	2000ecb0 	.word	0x2000ecb0
 801836c:	080183a5 	.word	0x080183a5

08018370 <pbuf_free_ooseq>:
{
 8018370:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018372:	f004 fa4d 	bl	801c810 <sys_arch_protect>
 8018376:	2200      	movs	r2, #0
 8018378:	4b08      	ldr	r3, [pc, #32]	; (801839c <pbuf_free_ooseq+0x2c>)
 801837a:	701a      	strb	r2, [r3, #0]
 801837c:	f004 fa54 	bl	801c828 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018380:	4b07      	ldr	r3, [pc, #28]	; (80183a0 <pbuf_free_ooseq+0x30>)
 8018382:	681c      	ldr	r4, [r3, #0]
 8018384:	b144      	cbz	r4, 8018398 <pbuf_free_ooseq+0x28>
    if (NULL != pcb->ooseq) {
 8018386:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8018388:	b908      	cbnz	r0, 801838e <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801838a:	68e4      	ldr	r4, [r4, #12]
 801838c:	e7fa      	b.n	8018384 <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 801838e:	f000 fd44 	bl	8018e1a <tcp_segs_free>
      pcb->ooseq = NULL;
 8018392:	2300      	movs	r3, #0
 8018394:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 8018396:	bd10      	pop	{r4, pc}
 8018398:	bd10      	pop	{r4, pc}
 801839a:	bf00      	nop
 801839c:	2000ecb0 	.word	0x2000ecb0
 80183a0:	2000ecb8 	.word	0x2000ecb8

080183a4 <pbuf_free_ooseq_callback>:
{
 80183a4:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 80183a6:	f7ff ffe3 	bl	8018370 <pbuf_free_ooseq>
 80183aa:	bd08      	pop	{r3, pc}

080183ac <pbuf_alloced_custom>:
{
 80183ac:	b570      	push	{r4, r5, r6, lr}
 80183ae:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 80183b0:	2804      	cmp	r0, #4
 80183b2:	d80a      	bhi.n	80183ca <pbuf_alloced_custom+0x1e>
 80183b4:	e8df f000 	tbb	[pc, r0]
 80183b8:	05031412 	.word	0x05031412
 80183bc:	07          	.byte	0x07
 80183bd:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80183be:	200e      	movs	r0, #14
    break;
 80183c0:	e00f      	b.n	80183e2 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80183c2:	2000      	movs	r0, #0
    break;
 80183c4:	e00d      	b.n	80183e2 <pbuf_alloced_custom+0x36>
    offset = 0;
 80183c6:	2000      	movs	r0, #0
    break;
 80183c8:	e00b      	b.n	80183e2 <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80183ca:	4b13      	ldr	r3, [pc, #76]	; (8018418 <pbuf_alloced_custom+0x6c>)
 80183cc:	f240 12c5 	movw	r2, #453	; 0x1c5
 80183d0:	4912      	ldr	r1, [pc, #72]	; (801841c <pbuf_alloced_custom+0x70>)
 80183d2:	4813      	ldr	r0, [pc, #76]	; (8018420 <pbuf_alloced_custom+0x74>)
 80183d4:	f006 ff53 	bl	801f27e <iprintf>
    return NULL;
 80183d8:	2000      	movs	r0, #0
 80183da:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80183dc:	2036      	movs	r0, #54	; 0x36
 80183de:	e000      	b.n	80183e2 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80183e0:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80183e2:	3003      	adds	r0, #3
 80183e4:	f020 0003 	bic.w	r0, r0, #3
 80183e8:	180e      	adds	r6, r1, r0
 80183ea:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 80183ee:	42ae      	cmp	r6, r5
 80183f0:	d810      	bhi.n	8018414 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 80183f2:	2500      	movs	r5, #0
 80183f4:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 80183f6:	b154      	cbz	r4, 801840e <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80183f8:	4420      	add	r0, r4
 80183fa:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80183fc:	2002      	movs	r0, #2
 80183fe:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8018400:	8119      	strh	r1, [r3, #8]
 8018402:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8018404:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8018406:	2201      	movs	r2, #1
 8018408:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801840a:	4618      	mov	r0, r3
 801840c:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 801840e:	2000      	movs	r0, #0
 8018410:	6058      	str	r0, [r3, #4]
 8018412:	e7f3      	b.n	80183fc <pbuf_alloced_custom+0x50>
    return NULL;
 8018414:	2000      	movs	r0, #0
}
 8018416:	bd70      	pop	{r4, r5, r6, pc}
 8018418:	08023ba0 	.word	0x08023ba0
 801841c:	080239cc 	.word	0x080239cc
 8018420:	0801fe1c 	.word	0x0801fe1c

08018424 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8018424:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 8018426:	2200      	movs	r2, #0
 8018428:	f7ff ff1a 	bl	8018260 <pbuf_header_impl>
}
 801842c:	bd08      	pop	{r3, pc}

0801842e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801842e:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 8018430:	2201      	movs	r2, #1
 8018432:	f7ff ff15 	bl	8018260 <pbuf_header_impl>
}
 8018436:	bd08      	pop	{r3, pc}

08018438 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801843a:	b128      	cbz	r0, 8018448 <pbuf_free+0x10>
 801843c:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801843e:	7b03      	ldrb	r3, [r0, #12]
 8018440:	2b03      	cmp	r3, #3
 8018442:	d80b      	bhi.n	801845c <pbuf_free+0x24>
{
 8018444:	2600      	movs	r6, #0
 8018446:	e01f      	b.n	8018488 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 8018448:	4b2b      	ldr	r3, [pc, #172]	; (80184f8 <pbuf_free+0xc0>)
 801844a:	f240 22d2 	movw	r2, #722	; 0x2d2
 801844e:	492b      	ldr	r1, [pc, #172]	; (80184fc <pbuf_free+0xc4>)
 8018450:	482b      	ldr	r0, [pc, #172]	; (8018500 <pbuf_free+0xc8>)
 8018452:	f006 ff14 	bl	801f27e <iprintf>
    return 0;
 8018456:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8018458:	4630      	mov	r0, r6
 801845a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 801845c:	4b26      	ldr	r3, [pc, #152]	; (80184f8 <pbuf_free+0xc0>)
 801845e:	f240 22de 	movw	r2, #734	; 0x2de
 8018462:	4928      	ldr	r1, [pc, #160]	; (8018504 <pbuf_free+0xcc>)
 8018464:	4826      	ldr	r0, [pc, #152]	; (8018500 <pbuf_free+0xc8>)
 8018466:	f006 ff0a 	bl	801f27e <iprintf>
 801846a:	e7eb      	b.n	8018444 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801846c:	4b22      	ldr	r3, [pc, #136]	; (80184f8 <pbuf_free+0xc0>)
 801846e:	f240 22eb 	movw	r2, #747	; 0x2eb
 8018472:	4925      	ldr	r1, [pc, #148]	; (8018508 <pbuf_free+0xd0>)
 8018474:	4822      	ldr	r0, [pc, #136]	; (8018500 <pbuf_free+0xc8>)
 8018476:	f006 ff02 	bl	801f27e <iprintf>
 801847a:	e00d      	b.n	8018498 <pbuf_free+0x60>
        pc->custom_free_function(p);
 801847c:	6923      	ldr	r3, [r4, #16]
 801847e:	4620      	mov	r0, r4
 8018480:	4798      	blx	r3
      count++;
 8018482:	3601      	adds	r6, #1
 8018484:	b2f6      	uxtb	r6, r6
      p = q;
 8018486:	462c      	mov	r4, r5
  while (p != NULL) {
 8018488:	2c00      	cmp	r4, #0
 801848a:	d0e5      	beq.n	8018458 <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 801848c:	f004 f9c0 	bl	801c810 <sys_arch_protect>
 8018490:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018492:	89e3      	ldrh	r3, [r4, #14]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d0e9      	beq.n	801846c <pbuf_free+0x34>
    ref = --(p->ref);
 8018498:	89e5      	ldrh	r5, [r4, #14]
 801849a:	3d01      	subs	r5, #1
 801849c:	b2ad      	uxth	r5, r5
 801849e:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80184a0:	4638      	mov	r0, r7
 80184a2:	f004 f9c1 	bl	801c828 <sys_arch_unprotect>
    if (ref == 0) {
 80184a6:	bb25      	cbnz	r5, 80184f2 <pbuf_free+0xba>
      q = p->next;
 80184a8:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 80184aa:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80184ac:	7b62      	ldrb	r2, [r4, #13]
 80184ae:	f012 0f02 	tst.w	r2, #2
 80184b2:	d00a      	beq.n	80184ca <pbuf_free+0x92>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80184b4:	6923      	ldr	r3, [r4, #16]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d1e0      	bne.n	801847c <pbuf_free+0x44>
 80184ba:	4b0f      	ldr	r3, [pc, #60]	; (80184f8 <pbuf_free+0xc0>)
 80184bc:	f240 22f9 	movw	r2, #761	; 0x2f9
 80184c0:	4912      	ldr	r1, [pc, #72]	; (801850c <pbuf_free+0xd4>)
 80184c2:	480f      	ldr	r0, [pc, #60]	; (8018500 <pbuf_free+0xc8>)
 80184c4:	f006 fedb 	bl	801f27e <iprintf>
 80184c8:	e7d8      	b.n	801847c <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 80184ca:	2b03      	cmp	r3, #3
 80184cc:	d007      	beq.n	80184de <pbuf_free+0xa6>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80184ce:	3b01      	subs	r3, #1
 80184d0:	b29b      	uxth	r3, r3
 80184d2:	2b01      	cmp	r3, #1
 80184d4:	d908      	bls.n	80184e8 <pbuf_free+0xb0>
          mem_free(p);
 80184d6:	4620      	mov	r0, r4
 80184d8:	f7ff fbba 	bl	8017c50 <mem_free>
 80184dc:	e7d1      	b.n	8018482 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 80184de:	4621      	mov	r1, r4
 80184e0:	200b      	movs	r0, #11
 80184e2:	f7ff fdd9 	bl	8018098 <memp_free>
 80184e6:	e7cc      	b.n	8018482 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 80184e8:	4621      	mov	r1, r4
 80184ea:	200a      	movs	r0, #10
 80184ec:	f7ff fdd4 	bl	8018098 <memp_free>
 80184f0:	e7c7      	b.n	8018482 <pbuf_free+0x4a>
      p = NULL;
 80184f2:	2400      	movs	r4, #0
 80184f4:	e7c8      	b.n	8018488 <pbuf_free+0x50>
 80184f6:	bf00      	nop
 80184f8:	08023ba0 	.word	0x08023ba0
 80184fc:	08020104 	.word	0x08020104
 8018500:	0801fe1c 	.word	0x0801fe1c
 8018504:	08023b4c 	.word	0x08023b4c
 8018508:	08023b64 	.word	0x08023b64
 801850c:	08023b7c 	.word	0x08023b7c

08018510 <pbuf_alloc>:
{
 8018510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018514:	460d      	mov	r5, r1
 8018516:	4617      	mov	r7, r2
  switch (layer) {
 8018518:	2804      	cmp	r0, #4
 801851a:	d80a      	bhi.n	8018532 <pbuf_alloc+0x22>
 801851c:	e8df f000 	tbb	[pc, r0]
 8018520:	05031412 	.word	0x05031412
 8018524:	07          	.byte	0x07
 8018525:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8018526:	240e      	movs	r4, #14
    break;
 8018528:	e00f      	b.n	801854a <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801852a:	2400      	movs	r4, #0
    break;
 801852c:	e00d      	b.n	801854a <pbuf_alloc+0x3a>
    offset = 0;
 801852e:	2400      	movs	r4, #0
    break;
 8018530:	e00b      	b.n	801854a <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8018532:	4b64      	ldr	r3, [pc, #400]	; (80186c4 <pbuf_alloc+0x1b4>)
 8018534:	f44f 728b 	mov.w	r2, #278	; 0x116
 8018538:	4963      	ldr	r1, [pc, #396]	; (80186c8 <pbuf_alloc+0x1b8>)
 801853a:	4864      	ldr	r0, [pc, #400]	; (80186cc <pbuf_alloc+0x1bc>)
 801853c:	f006 fe9f 	bl	801f27e <iprintf>
    return NULL;
 8018540:	2600      	movs	r6, #0
 8018542:	e0b1      	b.n	80186a8 <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8018544:	2436      	movs	r4, #54	; 0x36
 8018546:	e000      	b.n	801854a <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8018548:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 801854a:	2f03      	cmp	r7, #3
 801854c:	f200 80af 	bhi.w	80186ae <pbuf_alloc+0x19e>
 8018550:	e8df f007 	tbb	[pc, r7]
 8018554:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8018558:	200b      	movs	r0, #11
 801855a:	f7ff fd83 	bl	8018064 <memp_malloc>
    if (p == NULL) {
 801855e:	4606      	mov	r6, r0
 8018560:	b1f8      	cbz	r0, 80185a2 <pbuf_alloc+0x92>
    p->type = type;
 8018562:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 8018564:	2300      	movs	r3, #0
 8018566:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8018568:	f104 0310 	add.w	r3, r4, #16
 801856c:	4403      	add	r3, r0
 801856e:	3303      	adds	r3, #3
 8018570:	f023 0303 	bic.w	r3, r3, #3
 8018574:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 8018576:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8018578:	1ce2      	adds	r2, r4, #3
 801857a:	f022 0203 	bic.w	r2, r2, #3
 801857e:	f5c2 7242 	rsb	r2, r2, #776	; 0x308
 8018582:	42aa      	cmp	r2, r5
 8018584:	bf28      	it	cs
 8018586:	462a      	movcs	r2, r5
 8018588:	b292      	uxth	r2, r2
 801858a:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801858c:	4413      	add	r3, r2
 801858e:	f500 7846 	add.w	r8, r0, #792	; 0x318
 8018592:	4543      	cmp	r3, r8
 8018594:	d808      	bhi.n	80185a8 <pbuf_alloc+0x98>
    p->ref = 1;
 8018596:	2301      	movs	r3, #1
 8018598:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 801859a:	8973      	ldrh	r3, [r6, #10]
 801859c:	1aed      	subs	r5, r5, r3
    r = p;
 801859e:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 80185a0:	e026      	b.n	80185f0 <pbuf_alloc+0xe0>
      PBUF_POOL_IS_EMPTY();
 80185a2:	f7ff fec5 	bl	8018330 <pbuf_pool_is_empty>
      return NULL;
 80185a6:	e07f      	b.n	80186a8 <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80185a8:	4b46      	ldr	r3, [pc, #280]	; (80186c4 <pbuf_alloc+0x1b4>)
 80185aa:	f44f 7298 	mov.w	r2, #304	; 0x130
 80185ae:	4948      	ldr	r1, [pc, #288]	; (80186d0 <pbuf_alloc+0x1c0>)
 80185b0:	4846      	ldr	r0, [pc, #280]	; (80186cc <pbuf_alloc+0x1bc>)
 80185b2:	f006 fe64 	bl	801f27e <iprintf>
 80185b6:	e7ee      	b.n	8018596 <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 80185b8:	f7ff feba 	bl	8018330 <pbuf_pool_is_empty>
        pbuf_free(p);
 80185bc:	4630      	mov	r0, r6
 80185be:	f7ff ff3b 	bl	8018438 <pbuf_free>
        return NULL;
 80185c2:	4626      	mov	r6, r4
 80185c4:	e070      	b.n	80186a8 <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80185c6:	4b3f      	ldr	r3, [pc, #252]	; (80186c4 <pbuf_alloc+0x1b4>)
 80185c8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80185cc:	4941      	ldr	r1, [pc, #260]	; (80186d4 <pbuf_alloc+0x1c4>)
 80185ce:	483f      	ldr	r0, [pc, #252]	; (80186cc <pbuf_alloc+0x1bc>)
 80185d0:	f006 fe55 	bl	801f27e <iprintf>
 80185d4:	e01e      	b.n	8018614 <pbuf_alloc+0x104>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80185d6:	4b3b      	ldr	r3, [pc, #236]	; (80186c4 <pbuf_alloc+0x1b4>)
 80185d8:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80185dc:	493e      	ldr	r1, [pc, #248]	; (80186d8 <pbuf_alloc+0x1c8>)
 80185de:	483b      	ldr	r0, [pc, #236]	; (80186cc <pbuf_alloc+0x1bc>)
 80185e0:	f006 fe4d 	bl	801f27e <iprintf>
 80185e4:	e024      	b.n	8018630 <pbuf_alloc+0x120>
      q->ref = 1;
 80185e6:	2301      	movs	r3, #1
 80185e8:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 80185ea:	8963      	ldrh	r3, [r4, #10]
 80185ec:	1aed      	subs	r5, r5, r3
      r = q;
 80185ee:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 80185f0:	2d00      	cmp	r5, #0
 80185f2:	dd55      	ble.n	80186a0 <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80185f4:	200b      	movs	r0, #11
 80185f6:	f7ff fd35 	bl	8018064 <memp_malloc>
      if (q == NULL) {
 80185fa:	4604      	mov	r4, r0
 80185fc:	2800      	cmp	r0, #0
 80185fe:	d0db      	beq.n	80185b8 <pbuf_alloc+0xa8>
      q->type = type;
 8018600:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 8018602:	2300      	movs	r3, #0
 8018604:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8018606:	6003      	str	r3, [r0, #0]
      r->next = q;
 8018608:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 801860c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8018610:	429d      	cmp	r5, r3
 8018612:	dcd8      	bgt.n	80185c6 <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 8018614:	b2ab      	uxth	r3, r5
 8018616:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8018618:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 801861c:	bf28      	it	cs
 801861e:	f44f 7342 	movcs.w	r3, #776	; 0x308
 8018622:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8018624:	f104 0310 	add.w	r3, r4, #16
 8018628:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801862a:	f013 0f03 	tst.w	r3, #3
 801862e:	d1d2      	bne.n	80185d6 <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8018630:	6873      	ldr	r3, [r6, #4]
 8018632:	8972      	ldrh	r2, [r6, #10]
 8018634:	4413      	add	r3, r2
 8018636:	4598      	cmp	r8, r3
 8018638:	d2d5      	bcs.n	80185e6 <pbuf_alloc+0xd6>
 801863a:	4b22      	ldr	r3, [pc, #136]	; (80186c4 <pbuf_alloc+0x1b4>)
 801863c:	f240 1255 	movw	r2, #341	; 0x155
 8018640:	4923      	ldr	r1, [pc, #140]	; (80186d0 <pbuf_alloc+0x1c0>)
 8018642:	4822      	ldr	r0, [pc, #136]	; (80186cc <pbuf_alloc+0x1bc>)
 8018644:	f006 fe1b 	bl	801f27e <iprintf>
 8018648:	e7cd      	b.n	80185e6 <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 801864a:	f104 0013 	add.w	r0, r4, #19
 801864e:	f020 0003 	bic.w	r0, r0, #3
 8018652:	b283      	uxth	r3, r0
 8018654:	1cea      	adds	r2, r5, #3
 8018656:	b290      	uxth	r0, r2
 8018658:	f020 0003 	bic.w	r0, r0, #3
 801865c:	4418      	add	r0, r3
 801865e:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8018660:	f022 0203 	bic.w	r2, r2, #3
 8018664:	4290      	cmp	r0, r2
 8018666:	d32b      	bcc.n	80186c0 <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8018668:	f7ff fbec 	bl	8017e44 <mem_malloc>
    if (p == NULL) {
 801866c:	4606      	mov	r6, r0
 801866e:	b1d8      	cbz	r0, 80186a8 <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8018670:	f104 0310 	add.w	r3, r4, #16
 8018674:	4403      	add	r3, r0
 8018676:	3303      	adds	r3, #3
 8018678:	f023 0303 	bic.w	r3, r3, #3
 801867c:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 801867e:	8105      	strh	r5, [r0, #8]
 8018680:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8018682:	2300      	movs	r3, #0
 8018684:	6003      	str	r3, [r0, #0]
    p->type = type;
 8018686:	7307      	strb	r7, [r0, #12]
 8018688:	e00a      	b.n	80186a0 <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801868a:	200a      	movs	r0, #10
 801868c:	f7ff fcea 	bl	8018064 <memp_malloc>
    if (p == NULL) {
 8018690:	4606      	mov	r6, r0
 8018692:	b148      	cbz	r0, 80186a8 <pbuf_alloc+0x198>
    p->payload = NULL;
 8018694:	2300      	movs	r3, #0
 8018696:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8018698:	8105      	strh	r5, [r0, #8]
 801869a:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 801869c:	6003      	str	r3, [r0, #0]
    p->type = type;
 801869e:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 80186a0:	2301      	movs	r3, #1
 80186a2:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 80186a4:	2300      	movs	r3, #0
 80186a6:	7373      	strb	r3, [r6, #13]
}
 80186a8:	4630      	mov	r0, r6
 80186aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80186ae:	4b05      	ldr	r3, [pc, #20]	; (80186c4 <pbuf_alloc+0x1b4>)
 80186b0:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80186b4:	4909      	ldr	r1, [pc, #36]	; (80186dc <pbuf_alloc+0x1cc>)
 80186b6:	4805      	ldr	r0, [pc, #20]	; (80186cc <pbuf_alloc+0x1bc>)
 80186b8:	f006 fde1 	bl	801f27e <iprintf>
    return NULL;
 80186bc:	2600      	movs	r6, #0
 80186be:	e7f3      	b.n	80186a8 <pbuf_alloc+0x198>
        return NULL;
 80186c0:	2600      	movs	r6, #0
 80186c2:	e7f1      	b.n	80186a8 <pbuf_alloc+0x198>
 80186c4:	08023ba0 	.word	0x08023ba0
 80186c8:	080238e8 	.word	0x080238e8
 80186cc:	0801fe1c 	.word	0x0801fe1c
 80186d0:	08023904 	.word	0x08023904
 80186d4:	0802396c 	.word	0x0802396c
 80186d8:	08023980 	.word	0x08023980
 80186dc:	080239b0 	.word	0x080239b0

080186e0 <pbuf_realloc>:
{
 80186e0:	b570      	push	{r4, r5, r6, lr}
 80186e2:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80186e4:	4604      	mov	r4, r0
 80186e6:	b198      	cbz	r0, 8018710 <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80186e8:	7b23      	ldrb	r3, [r4, #12]
 80186ea:	2b03      	cmp	r3, #3
 80186ec:	d00b      	beq.n	8018706 <pbuf_realloc+0x26>
 80186ee:	2b01      	cmp	r3, #1
 80186f0:	d009      	beq.n	8018706 <pbuf_realloc+0x26>
 80186f2:	b143      	cbz	r3, 8018706 <pbuf_realloc+0x26>
 80186f4:	2b02      	cmp	r3, #2
 80186f6:	d006      	beq.n	8018706 <pbuf_realloc+0x26>
 80186f8:	4b2b      	ldr	r3, [pc, #172]	; (80187a8 <pbuf_realloc+0xc8>)
 80186fa:	f240 12f7 	movw	r2, #503	; 0x1f7
 80186fe:	492b      	ldr	r1, [pc, #172]	; (80187ac <pbuf_realloc+0xcc>)
 8018700:	482b      	ldr	r0, [pc, #172]	; (80187b0 <pbuf_realloc+0xd0>)
 8018702:	f006 fdbc 	bl	801f27e <iprintf>
  if (new_len >= p->tot_len) {
 8018706:	8926      	ldrh	r6, [r4, #8]
 8018708:	42ae      	cmp	r6, r5
 801870a:	d938      	bls.n	801877e <pbuf_realloc+0x9e>
  grow = new_len - p->tot_len;
 801870c:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 801870e:	e00d      	b.n	801872c <pbuf_realloc+0x4c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018710:	4b25      	ldr	r3, [pc, #148]	; (80187a8 <pbuf_realloc+0xc8>)
 8018712:	f240 12f3 	movw	r2, #499	; 0x1f3
 8018716:	4927      	ldr	r1, [pc, #156]	; (80187b4 <pbuf_realloc+0xd4>)
 8018718:	4825      	ldr	r0, [pc, #148]	; (80187b0 <pbuf_realloc+0xd0>)
 801871a:	f006 fdb0 	bl	801f27e <iprintf>
 801871e:	e7e3      	b.n	80186e8 <pbuf_realloc+0x8>
    q->tot_len += (u16_t)grow;
 8018720:	8923      	ldrh	r3, [r4, #8]
 8018722:	fa13 f386 	uxtah	r3, r3, r6
 8018726:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8018728:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801872a:	b184      	cbz	r4, 801874e <pbuf_realloc+0x6e>
  while (rem_len > q->len) {
 801872c:	8961      	ldrh	r1, [r4, #10]
 801872e:	428d      	cmp	r5, r1
 8018730:	d915      	bls.n	801875e <pbuf_realloc+0x7e>
    rem_len -= q->len;
 8018732:	1a69      	subs	r1, r5, r1
 8018734:	b28d      	uxth	r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8018736:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801873a:	429e      	cmp	r6, r3
 801873c:	ddf0      	ble.n	8018720 <pbuf_realloc+0x40>
 801873e:	4b1a      	ldr	r3, [pc, #104]	; (80187a8 <pbuf_realloc+0xc8>)
 8018740:	f240 220b 	movw	r2, #523	; 0x20b
 8018744:	491c      	ldr	r1, [pc, #112]	; (80187b8 <pbuf_realloc+0xd8>)
 8018746:	481a      	ldr	r0, [pc, #104]	; (80187b0 <pbuf_realloc+0xd0>)
 8018748:	f006 fd99 	bl	801f27e <iprintf>
 801874c:	e7e8      	b.n	8018720 <pbuf_realloc+0x40>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801874e:	4b16      	ldr	r3, [pc, #88]	; (80187a8 <pbuf_realloc+0xc8>)
 8018750:	f240 220f 	movw	r2, #527	; 0x20f
 8018754:	4919      	ldr	r1, [pc, #100]	; (80187bc <pbuf_realloc+0xdc>)
 8018756:	4816      	ldr	r0, [pc, #88]	; (80187b0 <pbuf_realloc+0xd0>)
 8018758:	f006 fd91 	bl	801f27e <iprintf>
 801875c:	e7e6      	b.n	801872c <pbuf_realloc+0x4c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 801875e:	7b23      	ldrb	r3, [r4, #12]
 8018760:	b92b      	cbnz	r3, 801876e <pbuf_realloc+0x8e>
 8018762:	428d      	cmp	r5, r1
 8018764:	d003      	beq.n	801876e <pbuf_realloc+0x8e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8018766:	7b63      	ldrb	r3, [r4, #13]
 8018768:	f013 0f02 	tst.w	r3, #2
 801876c:	d008      	beq.n	8018780 <pbuf_realloc+0xa0>
  q->len = rem_len;
 801876e:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8018770:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8018772:	6820      	ldr	r0, [r4, #0]
 8018774:	b108      	cbz	r0, 801877a <pbuf_realloc+0x9a>
    pbuf_free(q->next);
 8018776:	f7ff fe5f 	bl	8018438 <pbuf_free>
  q->next = NULL;
 801877a:	2300      	movs	r3, #0
 801877c:	6023      	str	r3, [r4, #0]
 801877e:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8018780:	6863      	ldr	r3, [r4, #4]
 8018782:	1b1b      	subs	r3, r3, r4
 8018784:	fa15 f183 	uxtah	r1, r5, r3
 8018788:	b289      	uxth	r1, r1
 801878a:	4620      	mov	r0, r4
 801878c:	f7ff fabe 	bl	8017d0c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8018790:	4604      	mov	r4, r0
 8018792:	2800      	cmp	r0, #0
 8018794:	d1eb      	bne.n	801876e <pbuf_realloc+0x8e>
 8018796:	4b04      	ldr	r3, [pc, #16]	; (80187a8 <pbuf_realloc+0xc8>)
 8018798:	f240 221d 	movw	r2, #541	; 0x21d
 801879c:	4908      	ldr	r1, [pc, #32]	; (80187c0 <pbuf_realloc+0xe0>)
 801879e:	4804      	ldr	r0, [pc, #16]	; (80187b0 <pbuf_realloc+0xd0>)
 80187a0:	f006 fd6d 	bl	801f27e <iprintf>
 80187a4:	e7e3      	b.n	801876e <pbuf_realloc+0x8e>
 80187a6:	bf00      	nop
 80187a8:	08023ba0 	.word	0x08023ba0
 80187ac:	08023c18 	.word	0x08023c18
 80187b0:	0801fe1c 	.word	0x0801fe1c
 80187b4:	08023c00 	.word	0x08023c00
 80187b8:	08023c34 	.word	0x08023c34
 80187bc:	08023c48 	.word	0x08023c48
 80187c0:	08023c60 	.word	0x08023c60

080187c4 <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 80187c4:	2300      	movs	r3, #0
  while (p != NULL) {
 80187c6:	e002      	b.n	80187ce <pbuf_clen+0xa>
    ++len;
 80187c8:	3301      	adds	r3, #1
 80187ca:	b29b      	uxth	r3, r3
    p = p->next;
 80187cc:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 80187ce:	2800      	cmp	r0, #0
 80187d0:	d1fa      	bne.n	80187c8 <pbuf_clen+0x4>
  }
  return len;
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	4770      	bx	lr
	...

080187d8 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 80187d8:	b198      	cbz	r0, 8018802 <pbuf_ref+0x2a>
{
 80187da:	b510      	push	{r4, lr}
 80187dc:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 80187de:	f004 f817 	bl	801c810 <sys_arch_protect>
 80187e2:	89e3      	ldrh	r3, [r4, #14]
 80187e4:	3301      	adds	r3, #1
 80187e6:	81e3      	strh	r3, [r4, #14]
 80187e8:	f004 f81e 	bl	801c828 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80187ec:	89e3      	ldrh	r3, [r4, #14]
 80187ee:	b103      	cbz	r3, 80187f2 <pbuf_ref+0x1a>
 80187f0:	bd10      	pop	{r4, pc}
 80187f2:	4b04      	ldr	r3, [pc, #16]	; (8018804 <pbuf_ref+0x2c>)
 80187f4:	f240 3239 	movw	r2, #825	; 0x339
 80187f8:	4903      	ldr	r1, [pc, #12]	; (8018808 <pbuf_ref+0x30>)
 80187fa:	4804      	ldr	r0, [pc, #16]	; (801880c <pbuf_ref+0x34>)
 80187fc:	f006 fd3f 	bl	801f27e <iprintf>
  }
}
 8018800:	e7f6      	b.n	80187f0 <pbuf_ref+0x18>
 8018802:	4770      	bx	lr
 8018804:	08023ba0 	.word	0x08023ba0
 8018808:	08023c7c 	.word	0x08023c7c
 801880c:	0801fe1c 	.word	0x0801fe1c

08018810 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018810:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8018812:	b110      	cbz	r0, 801881a <pbuf_cat+0xa>
 8018814:	460d      	mov	r5, r1
 8018816:	4604      	mov	r4, r0
 8018818:	b961      	cbnz	r1, 8018834 <pbuf_cat+0x24>
 801881a:	4b15      	ldr	r3, [pc, #84]	; (8018870 <pbuf_cat+0x60>)
 801881c:	f240 324d 	movw	r2, #845	; 0x34d
 8018820:	4914      	ldr	r1, [pc, #80]	; (8018874 <pbuf_cat+0x64>)
 8018822:	4815      	ldr	r0, [pc, #84]	; (8018878 <pbuf_cat+0x68>)
 8018824:	f006 fd2b 	bl	801f27e <iprintf>
 8018828:	bd38      	pop	{r3, r4, r5, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 801882a:	892b      	ldrh	r3, [r5, #8]
 801882c:	8921      	ldrh	r1, [r4, #8]
 801882e:	440b      	add	r3, r1
 8018830:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8018832:	4614      	mov	r4, r2
 8018834:	6822      	ldr	r2, [r4, #0]
 8018836:	2a00      	cmp	r2, #0
 8018838:	d1f7      	bne.n	801882a <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801883a:	8922      	ldrh	r2, [r4, #8]
 801883c:	8963      	ldrh	r3, [r4, #10]
 801883e:	429a      	cmp	r2, r3
 8018840:	d006      	beq.n	8018850 <pbuf_cat+0x40>
 8018842:	4b0b      	ldr	r3, [pc, #44]	; (8018870 <pbuf_cat+0x60>)
 8018844:	f240 3255 	movw	r2, #853	; 0x355
 8018848:	490c      	ldr	r1, [pc, #48]	; (801887c <pbuf_cat+0x6c>)
 801884a:	480b      	ldr	r0, [pc, #44]	; (8018878 <pbuf_cat+0x68>)
 801884c:	f006 fd17 	bl	801f27e <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8018850:	6823      	ldr	r3, [r4, #0]
 8018852:	b133      	cbz	r3, 8018862 <pbuf_cat+0x52>
 8018854:	4b06      	ldr	r3, [pc, #24]	; (8018870 <pbuf_cat+0x60>)
 8018856:	f240 3256 	movw	r2, #854	; 0x356
 801885a:	4909      	ldr	r1, [pc, #36]	; (8018880 <pbuf_cat+0x70>)
 801885c:	4806      	ldr	r0, [pc, #24]	; (8018878 <pbuf_cat+0x68>)
 801885e:	f006 fd0e 	bl	801f27e <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8018862:	892b      	ldrh	r3, [r5, #8]
 8018864:	8922      	ldrh	r2, [r4, #8]
 8018866:	4413      	add	r3, r2
 8018868:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801886a:	6025      	str	r5, [r4, #0]
 801886c:	bd38      	pop	{r3, r4, r5, pc}
 801886e:	bf00      	nop
 8018870:	08023ba0 	.word	0x08023ba0
 8018874:	080239f0 	.word	0x080239f0
 8018878:	0801fe1c 	.word	0x0801fe1c
 801887c:	08023a28 	.word	0x08023a28
 8018880:	08023a58 	.word	0x08023a58

08018884 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8018884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8018888:	b150      	cbz	r0, 80188a0 <pbuf_copy+0x1c>
 801888a:	460d      	mov	r5, r1
 801888c:	4607      	mov	r7, r0
 801888e:	b139      	cbz	r1, 80188a0 <pbuf_copy+0x1c>
 8018890:	8902      	ldrh	r2, [r0, #8]
 8018892:	890b      	ldrh	r3, [r1, #8]
 8018894:	429a      	cmp	r2, r3
 8018896:	d303      	bcc.n	80188a0 <pbuf_copy+0x1c>
 8018898:	f04f 0800 	mov.w	r8, #0
 801889c:	4646      	mov	r6, r8
 801889e:	e02c      	b.n	80188fa <pbuf_copy+0x76>
 80188a0:	4b3f      	ldr	r3, [pc, #252]	; (80189a0 <pbuf_copy+0x11c>)
 80188a2:	f240 32bd 	movw	r2, #957	; 0x3bd
 80188a6:	493f      	ldr	r1, [pc, #252]	; (80189a4 <pbuf_copy+0x120>)
 80188a8:	483f      	ldr	r0, [pc, #252]	; (80189a8 <pbuf_copy+0x124>)
 80188aa:	f006 fce8 	bl	801f27e <iprintf>
 80188ae:	f06f 000f 	mvn.w	r0, #15
 80188b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80188b6:	1b9b      	subs	r3, r3, r6
 80188b8:	b29c      	uxth	r4, r3
 80188ba:	e026      	b.n	801890a <pbuf_copy+0x86>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80188bc:	4b38      	ldr	r3, [pc, #224]	; (80189a0 <pbuf_copy+0x11c>)
 80188be:	f240 32cd 	movw	r2, #973	; 0x3cd
 80188c2:	493a      	ldr	r1, [pc, #232]	; (80189ac <pbuf_copy+0x128>)
 80188c4:	4838      	ldr	r0, [pc, #224]	; (80189a8 <pbuf_copy+0x124>)
 80188c6:	f006 fcda 	bl	801f27e <iprintf>
 80188ca:	e02d      	b.n	8018928 <pbuf_copy+0xa4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80188cc:	4b34      	ldr	r3, [pc, #208]	; (80189a0 <pbuf_copy+0x11c>)
 80188ce:	f240 32ce 	movw	r2, #974	; 0x3ce
 80188d2:	4937      	ldr	r1, [pc, #220]	; (80189b0 <pbuf_copy+0x12c>)
 80188d4:	4834      	ldr	r0, [pc, #208]	; (80189a8 <pbuf_copy+0x124>)
 80188d6:	f006 fcd2 	bl	801f27e <iprintf>
 80188da:	e028      	b.n	801892e <pbuf_copy+0xaa>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80188dc:	897b      	ldrh	r3, [r7, #10]
 80188de:	429e      	cmp	r6, r3
 80188e0:	d02c      	beq.n	801893c <pbuf_copy+0xb8>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80188e2:	b11d      	cbz	r5, 80188ec <pbuf_copy+0x68>
 80188e4:	896a      	ldrh	r2, [r5, #10]
 80188e6:	892b      	ldrh	r3, [r5, #8]
 80188e8:	429a      	cmp	r2, r3
 80188ea:	d039      	beq.n	8018960 <pbuf_copy+0xdc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80188ec:	b11f      	cbz	r7, 80188f6 <pbuf_copy+0x72>
 80188ee:	897a      	ldrh	r2, [r7, #10]
 80188f0:	893b      	ldrh	r3, [r7, #8]
 80188f2:	429a      	cmp	r2, r3
 80188f4:	d042      	beq.n	801897c <pbuf_copy+0xf8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80188f6:	2d00      	cmp	r5, #0
 80188f8:	d04e      	beq.n	8018998 <pbuf_copy+0x114>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80188fa:	897b      	ldrh	r3, [r7, #10]
 80188fc:	1b99      	subs	r1, r3, r6
 80188fe:	896c      	ldrh	r4, [r5, #10]
 8018900:	eba4 0208 	sub.w	r2, r4, r8
 8018904:	4291      	cmp	r1, r2
 8018906:	dbd6      	blt.n	80188b6 <pbuf_copy+0x32>
      len = p_from->len - offset_from;
 8018908:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 801890a:	6878      	ldr	r0, [r7, #4]
 801890c:	6869      	ldr	r1, [r5, #4]
 801890e:	4622      	mov	r2, r4
 8018910:	4441      	add	r1, r8
 8018912:	4430      	add	r0, r6
 8018914:	f007 f8a1 	bl	801fa5a <memcpy>
    offset_to += len;
 8018918:	4426      	add	r6, r4
 801891a:	b2b6      	uxth	r6, r6
    offset_from += len;
 801891c:	4444      	add	r4, r8
 801891e:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8018922:	897b      	ldrh	r3, [r7, #10]
 8018924:	429e      	cmp	r6, r3
 8018926:	d8c9      	bhi.n	80188bc <pbuf_copy+0x38>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8018928:	896b      	ldrh	r3, [r5, #10]
 801892a:	4598      	cmp	r8, r3
 801892c:	d8ce      	bhi.n	80188cc <pbuf_copy+0x48>
    if (offset_from >= p_from->len) {
 801892e:	896b      	ldrh	r3, [r5, #10]
 8018930:	4598      	cmp	r8, r3
 8018932:	d3d3      	bcc.n	80188dc <pbuf_copy+0x58>
      p_from = p_from->next;
 8018934:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 8018936:	f04f 0800 	mov.w	r8, #0
 801893a:	e7cf      	b.n	80188dc <pbuf_copy+0x58>
      p_to = p_to->next;
 801893c:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 801893e:	b10f      	cbz	r7, 8018944 <pbuf_copy+0xc0>
      offset_to = 0;
 8018940:	2600      	movs	r6, #0
 8018942:	e7ce      	b.n	80188e2 <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8018944:	b90d      	cbnz	r5, 801894a <pbuf_copy+0xc6>
      offset_to = 0;
 8018946:	2600      	movs	r6, #0
 8018948:	e7cb      	b.n	80188e2 <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 801894a:	4b15      	ldr	r3, [pc, #84]	; (80189a0 <pbuf_copy+0x11c>)
 801894c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8018950:	4918      	ldr	r1, [pc, #96]	; (80189b4 <pbuf_copy+0x130>)
 8018952:	4815      	ldr	r0, [pc, #84]	; (80189a8 <pbuf_copy+0x124>)
 8018954:	f006 fc93 	bl	801f27e <iprintf>
 8018958:	f06f 000f 	mvn.w	r0, #15
 801895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018960:	682b      	ldr	r3, [r5, #0]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d0c2      	beq.n	80188ec <pbuf_copy+0x68>
 8018966:	4b0e      	ldr	r3, [pc, #56]	; (80189a0 <pbuf_copy+0x11c>)
 8018968:	f240 32de 	movw	r2, #990	; 0x3de
 801896c:	4912      	ldr	r1, [pc, #72]	; (80189b8 <pbuf_copy+0x134>)
 801896e:	480e      	ldr	r0, [pc, #56]	; (80189a8 <pbuf_copy+0x124>)
 8018970:	f006 fc85 	bl	801f27e <iprintf>
 8018974:	f06f 0005 	mvn.w	r0, #5
 8018978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d0b9      	beq.n	80188f6 <pbuf_copy+0x72>
 8018982:	4b07      	ldr	r3, [pc, #28]	; (80189a0 <pbuf_copy+0x11c>)
 8018984:	f240 32e3 	movw	r2, #995	; 0x3e3
 8018988:	490b      	ldr	r1, [pc, #44]	; (80189b8 <pbuf_copy+0x134>)
 801898a:	4807      	ldr	r0, [pc, #28]	; (80189a8 <pbuf_copy+0x124>)
 801898c:	f006 fc77 	bl	801f27e <iprintf>
 8018990:	f06f 0005 	mvn.w	r0, #5
 8018994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8018998:	2000      	movs	r0, #0
}
 801899a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801899e:	bf00      	nop
 80189a0:	08023ba0 	.word	0x08023ba0
 80189a4:	08023a68 	.word	0x08023a68
 80189a8:	0801fe1c 	.word	0x0801fe1c
 80189ac:	08023a98 	.word	0x08023a98
 80189b0:	08023ab0 	.word	0x08023ab0
 80189b4:	08023acc 	.word	0x08023acc
 80189b8:	08023adc 	.word	0x08023adc

080189bc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80189bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80189c0:	b128      	cbz	r0, 80189ce <pbuf_copy_partial+0x12>
 80189c2:	460f      	mov	r7, r1
 80189c4:	4690      	mov	r8, r2
 80189c6:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80189c8:	b161      	cbz	r1, 80189e4 <pbuf_copy_partial+0x28>
 80189ca:	2600      	movs	r6, #0
 80189cc:	e027      	b.n	8018a1e <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80189ce:	4b1a      	ldr	r3, [pc, #104]	; (8018a38 <pbuf_copy_partial+0x7c>)
 80189d0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80189d4:	4919      	ldr	r1, [pc, #100]	; (8018a3c <pbuf_copy_partial+0x80>)
 80189d6:	481a      	ldr	r0, [pc, #104]	; (8018a40 <pbuf_copy_partial+0x84>)
 80189d8:	f006 fc51 	bl	801f27e <iprintf>
 80189dc:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 80189de:	4630      	mov	r0, r6
 80189e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80189e4:	4b14      	ldr	r3, [pc, #80]	; (8018a38 <pbuf_copy_partial+0x7c>)
 80189e6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80189ea:	4916      	ldr	r1, [pc, #88]	; (8018a44 <pbuf_copy_partial+0x88>)
 80189ec:	4814      	ldr	r0, [pc, #80]	; (8018a40 <pbuf_copy_partial+0x84>)
 80189ee:	f006 fc46 	bl	801f27e <iprintf>
 80189f2:	2600      	movs	r6, #0
 80189f4:	e7f3      	b.n	80189de <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 80189f6:	896a      	ldrh	r2, [r5, #10]
 80189f8:	1ad2      	subs	r2, r2, r3
 80189fa:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 80189fc:	45a0      	cmp	r8, r4
 80189fe:	d200      	bcs.n	8018a02 <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 8018a00:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8018a02:	6869      	ldr	r1, [r5, #4]
 8018a04:	4622      	mov	r2, r4
 8018a06:	4419      	add	r1, r3
 8018a08:	19b8      	adds	r0, r7, r6
 8018a0a:	f007 f826 	bl	801fa5a <memcpy>
      copied_total += buf_copy_len;
 8018a0e:	4426      	add	r6, r4
 8018a10:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 8018a12:	eba8 0404 	sub.w	r4, r8, r4
 8018a16:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8018a1a:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018a1c:	682d      	ldr	r5, [r5, #0]
 8018a1e:	f1b8 0f00 	cmp.w	r8, #0
 8018a22:	d0dc      	beq.n	80189de <pbuf_copy_partial+0x22>
 8018a24:	2d00      	cmp	r5, #0
 8018a26:	d0da      	beq.n	80189de <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d0e4      	beq.n	80189f6 <pbuf_copy_partial+0x3a>
 8018a2c:	8969      	ldrh	r1, [r5, #10]
 8018a2e:	428b      	cmp	r3, r1
 8018a30:	d3e1      	bcc.n	80189f6 <pbuf_copy_partial+0x3a>
      offset -= p->len;
 8018a32:	1a5b      	subs	r3, r3, r1
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	e7f1      	b.n	8018a1c <pbuf_copy_partial+0x60>
 8018a38:	08023ba0 	.word	0x08023ba0
 8018a3c:	08023b08 	.word	0x08023b08
 8018a40:	0801fe1c 	.word	0x0801fe1c
 8018a44:	08023b28 	.word	0x08023b28

08018a48 <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018a48:	e000      	b.n	8018a4c <tcp_remove_listener+0x4>
 8018a4a:	68c0      	ldr	r0, [r0, #12]
 8018a4c:	b128      	cbz	r0, 8018a5a <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 8018a4e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8018a50:	428b      	cmp	r3, r1
 8018a52:	d1fa      	bne.n	8018a4a <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 8018a54:	2300      	movs	r3, #0
 8018a56:	6783      	str	r3, [r0, #120]	; 0x78
 8018a58:	e7f7      	b.n	8018a4a <tcp_remove_listener+0x2>
      }
   }
}
 8018a5a:	4770      	bx	lr

08018a5c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8018a5c:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 8018a5e:	2400      	movs	r4, #0
 8018a60:	e009      	b.n	8018a76 <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018a62:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018a66:	4b14      	ldr	r3, [pc, #80]	; (8018ab8 <tcp_new_port+0x5c>)
 8018a68:	801a      	strh	r2, [r3, #0]
 8018a6a:	e00c      	b.n	8018a86 <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018a6c:	3401      	adds	r4, #1
 8018a6e:	b2a4      	uxth	r4, r4
 8018a70:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8018a74:	d21e      	bcs.n	8018ab4 <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8018a76:	4a10      	ldr	r2, [pc, #64]	; (8018ab8 <tcp_new_port+0x5c>)
 8018a78:	8813      	ldrh	r3, [r2, #0]
 8018a7a:	1c59      	adds	r1, r3, #1
 8018a7c:	8011      	strh	r1, [r2, #0]
 8018a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a82:	4293      	cmp	r3, r2
 8018a84:	d0ed      	beq.n	8018a62 <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018a86:	2000      	movs	r0, #0
 8018a88:	2803      	cmp	r0, #3
 8018a8a:	d80e      	bhi.n	8018aaa <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018a8c:	4b0b      	ldr	r3, [pc, #44]	; (8018abc <tcp_new_port+0x60>)
 8018a8e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	b133      	cbz	r3, 8018aa4 <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 8018a96:	8ad9      	ldrh	r1, [r3, #22]
 8018a98:	4a07      	ldr	r2, [pc, #28]	; (8018ab8 <tcp_new_port+0x5c>)
 8018a9a:	8812      	ldrh	r2, [r2, #0]
 8018a9c:	4291      	cmp	r1, r2
 8018a9e:	d0e5      	beq.n	8018a6c <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018aa0:	68db      	ldr	r3, [r3, #12]
 8018aa2:	e7f7      	b.n	8018a94 <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018aa4:	3001      	adds	r0, #1
 8018aa6:	b2c0      	uxtb	r0, r0
 8018aa8:	e7ee      	b.n	8018a88 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8018aaa:	4b03      	ldr	r3, [pc, #12]	; (8018ab8 <tcp_new_port+0x5c>)
 8018aac:	8818      	ldrh	r0, [r3, #0]
}
 8018aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ab2:	4770      	bx	lr
          return 0;
 8018ab4:	2000      	movs	r0, #0
 8018ab6:	e7fa      	b.n	8018aae <tcp_new_port+0x52>
 8018ab8:	2000000c 	.word	0x2000000c
 8018abc:	08023dc8 	.word	0x08023dc8

08018ac0 <tcp_listen_closed>:
{
 8018ac0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018ac2:	4605      	mov	r5, r0
 8018ac4:	b150      	cbz	r0, 8018adc <tcp_listen_closed+0x1c>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8018ac6:	7d2b      	ldrb	r3, [r5, #20]
 8018ac8:	2b01      	cmp	r3, #1
 8018aca:	d005      	beq.n	8018ad8 <tcp_listen_closed+0x18>
 8018acc:	4b0c      	ldr	r3, [pc, #48]	; (8018b00 <tcp_listen_closed+0x40>)
 8018ace:	22c1      	movs	r2, #193	; 0xc1
 8018ad0:	490c      	ldr	r1, [pc, #48]	; (8018b04 <tcp_listen_closed+0x44>)
 8018ad2:	480d      	ldr	r0, [pc, #52]	; (8018b08 <tcp_listen_closed+0x48>)
 8018ad4:	f006 fbd3 	bl	801f27e <iprintf>
{
 8018ad8:	2401      	movs	r4, #1
 8018ada:	e00e      	b.n	8018afa <tcp_listen_closed+0x3a>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018adc:	4b08      	ldr	r3, [pc, #32]	; (8018b00 <tcp_listen_closed+0x40>)
 8018ade:	22c0      	movs	r2, #192	; 0xc0
 8018ae0:	490a      	ldr	r1, [pc, #40]	; (8018b0c <tcp_listen_closed+0x4c>)
 8018ae2:	4809      	ldr	r0, [pc, #36]	; (8018b08 <tcp_listen_closed+0x48>)
 8018ae4:	f006 fbcb 	bl	801f27e <iprintf>
 8018ae8:	e7ed      	b.n	8018ac6 <tcp_listen_closed+0x6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8018aea:	4b09      	ldr	r3, [pc, #36]	; (8018b10 <tcp_listen_closed+0x50>)
 8018aec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018af0:	4629      	mov	r1, r5
 8018af2:	6818      	ldr	r0, [r3, #0]
 8018af4:	f7ff ffa8 	bl	8018a48 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018af8:	3401      	adds	r4, #1
 8018afa:	2c03      	cmp	r4, #3
 8018afc:	d9f5      	bls.n	8018aea <tcp_listen_closed+0x2a>
}
 8018afe:	bd38      	pop	{r3, r4, r5, pc}
 8018b00:	08023d50 	.word	0x08023d50
 8018b04:	08023d8c 	.word	0x08023d8c
 8018b08:	0801fe1c 	.word	0x0801fe1c
 8018b0c:	08023d80 	.word	0x08023d80
 8018b10:	08023dc8 	.word	0x08023dc8

08018b14 <tcp_close_shutdown_fin>:
{
 8018b14:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018b16:	4604      	mov	r4, r0
 8018b18:	b140      	cbz	r0, 8018b2c <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8018b1a:	7d23      	ldrb	r3, [r4, #20]
 8018b1c:	2b04      	cmp	r3, #4
 8018b1e:	d01a      	beq.n	8018b56 <tcp_close_shutdown_fin+0x42>
 8018b20:	2b07      	cmp	r3, #7
 8018b22:	d021      	beq.n	8018b68 <tcp_close_shutdown_fin+0x54>
 8018b24:	2b03      	cmp	r3, #3
 8018b26:	d009      	beq.n	8018b3c <tcp_close_shutdown_fin+0x28>
    return ERR_OK;
 8018b28:	2500      	movs	r5, #0
 8018b2a:	e012      	b.n	8018b52 <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018b2c:	4b18      	ldr	r3, [pc, #96]	; (8018b90 <tcp_close_shutdown_fin+0x7c>)
 8018b2e:	f240 124d 	movw	r2, #333	; 0x14d
 8018b32:	4918      	ldr	r1, [pc, #96]	; (8018b94 <tcp_close_shutdown_fin+0x80>)
 8018b34:	4818      	ldr	r0, [pc, #96]	; (8018b98 <tcp_close_shutdown_fin+0x84>)
 8018b36:	f006 fba2 	bl	801f27e <iprintf>
 8018b3a:	e7ee      	b.n	8018b1a <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	f003 f893 	bl	801bc68 <tcp_send_fin>
    if (err == ERR_OK) {
 8018b42:	4605      	mov	r5, r0
 8018b44:	b908      	cbnz	r0, 8018b4a <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8018b46:	2305      	movs	r3, #5
 8018b48:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8018b4a:	b1b5      	cbz	r5, 8018b7a <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 8018b4c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8018b50:	d017      	beq.n	8018b82 <tcp_close_shutdown_fin+0x6e>
}
 8018b52:	4628      	mov	r0, r5
 8018b54:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 8018b56:	4620      	mov	r0, r4
 8018b58:	f003 f886 	bl	801bc68 <tcp_send_fin>
    if (err == ERR_OK) {
 8018b5c:	4605      	mov	r5, r0
 8018b5e:	2800      	cmp	r0, #0
 8018b60:	d1f3      	bne.n	8018b4a <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8018b62:	2305      	movs	r3, #5
 8018b64:	7523      	strb	r3, [r4, #20]
 8018b66:	e7f0      	b.n	8018b4a <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 8018b68:	4620      	mov	r0, r4
 8018b6a:	f003 f87d 	bl	801bc68 <tcp_send_fin>
    if (err == ERR_OK) {
 8018b6e:	4605      	mov	r5, r0
 8018b70:	2800      	cmp	r0, #0
 8018b72:	d1ea      	bne.n	8018b4a <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 8018b74:	2309      	movs	r3, #9
 8018b76:	7523      	strb	r3, [r4, #20]
 8018b78:	e7e7      	b.n	8018b4a <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	f003 f8d0 	bl	801bd20 <tcp_output>
 8018b80:	e7e7      	b.n	8018b52 <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 8018b82:	7ea3      	ldrb	r3, [r4, #26]
 8018b84:	f043 0308 	orr.w	r3, r3, #8
 8018b88:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8018b8a:	2500      	movs	r5, #0
 8018b8c:	e7e1      	b.n	8018b52 <tcp_close_shutdown_fin+0x3e>
 8018b8e:	bf00      	nop
 8018b90:	08023d50 	.word	0x08023d50
 8018b94:	08023d80 	.word	0x08023d80
 8018b98:	0801fe1c 	.word	0x0801fe1c

08018b9c <tcp_init>:
{
 8018b9c:	4770      	bx	lr
	...

08018ba0 <tcp_bind>:
{
 8018ba0:	b570      	push	{r4, r5, r6, lr}
 8018ba2:	4605      	mov	r5, r0
  if (ipaddr == NULL) {
 8018ba4:	460c      	mov	r4, r1
 8018ba6:	b171      	cbz	r1, 8018bc6 <tcp_bind+0x26>
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8018ba8:	2d00      	cmp	r5, #0
 8018baa:	d039      	beq.n	8018c20 <tcp_bind+0x80>
 8018bac:	2c00      	cmp	r4, #0
 8018bae:	d03a      	beq.n	8018c26 <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018bb0:	7d2b      	ldrb	r3, [r5, #20]
 8018bb2:	b953      	cbnz	r3, 8018bca <tcp_bind+0x2a>
  if (port == 0) {
 8018bb4:	b19a      	cbz	r2, 8018bde <tcp_bind+0x3e>
 8018bb6:	2600      	movs	r6, #0
    for (i = 0; i < max_pcb_list; i++) {
 8018bb8:	2e03      	cmp	r6, #3
 8018bba:	dc14      	bgt.n	8018be6 <tcp_bind+0x46>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018bbc:	4b21      	ldr	r3, [pc, #132]	; (8018c44 <tcp_bind+0xa4>)
 8018bbe:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	e01c      	b.n	8018c00 <tcp_bind+0x60>
    ipaddr = IP4_ADDR_ANY;
 8018bc6:	4c20      	ldr	r4, [pc, #128]	; (8018c48 <tcp_bind+0xa8>)
 8018bc8:	e7ee      	b.n	8018ba8 <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018bca:	4b20      	ldr	r3, [pc, #128]	; (8018c4c <tcp_bind+0xac>)
 8018bcc:	f44f 7211 	mov.w	r2, #580	; 0x244
 8018bd0:	491f      	ldr	r1, [pc, #124]	; (8018c50 <tcp_bind+0xb0>)
 8018bd2:	4820      	ldr	r0, [pc, #128]	; (8018c54 <tcp_bind+0xb4>)
 8018bd4:	f006 fb53 	bl	801f27e <iprintf>
 8018bd8:	f06f 0005 	mvn.w	r0, #5
 8018bdc:	bd70      	pop	{r4, r5, r6, pc}
    port = tcp_new_port();
 8018bde:	f7ff ff3d 	bl	8018a5c <tcp_new_port>
    if (port == 0) {
 8018be2:	4602      	mov	r2, r0
 8018be4:	b310      	cbz	r0, 8018c2c <tcp_bind+0x8c>
  if (!ip_addr_isany(ipaddr)) {
 8018be6:	6823      	ldr	r3, [r4, #0]
 8018be8:	b103      	cbz	r3, 8018bec <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8018bea:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8018bec:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018bee:	4b1a      	ldr	r3, [pc, #104]	; (8018c58 <tcp_bind+0xb8>)
 8018bf0:	681a      	ldr	r2, [r3, #0]
 8018bf2:	60ea      	str	r2, [r5, #12]
 8018bf4:	601d      	str	r5, [r3, #0]
 8018bf6:	f003 fbfb 	bl	801c3f0 <tcp_timer_needed>
  return ERR_OK;
 8018bfa:	2000      	movs	r0, #0
 8018bfc:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018bfe:	68db      	ldr	r3, [r3, #12]
 8018c00:	b163      	cbz	r3, 8018c1c <tcp_bind+0x7c>
        if (cpcb->local_port == port) {
 8018c02:	8ad9      	ldrh	r1, [r3, #22]
 8018c04:	428a      	cmp	r2, r1
 8018c06:	d1fa      	bne.n	8018bfe <tcp_bind+0x5e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018c08:	b19b      	cbz	r3, 8018c32 <tcp_bind+0x92>
                (ip_addr_isany(&cpcb->local_ip) ||
 8018c0a:	6819      	ldr	r1, [r3, #0]
 8018c0c:	b1a1      	cbz	r1, 8018c38 <tcp_bind+0x98>
                ip_addr_isany(ipaddr) ||
 8018c0e:	6820      	ldr	r0, [r4, #0]
 8018c10:	b1a8      	cbz	r0, 8018c3e <tcp_bind+0x9e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018c12:	4281      	cmp	r1, r0
 8018c14:	d1f3      	bne.n	8018bfe <tcp_bind+0x5e>
              return ERR_USE;
 8018c16:	f06f 0007 	mvn.w	r0, #7
}
 8018c1a:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8018c1c:	3601      	adds	r6, #1
 8018c1e:	e7cb      	b.n	8018bb8 <tcp_bind+0x18>
    return ERR_VAL;
 8018c20:	f06f 0005 	mvn.w	r0, #5
 8018c24:	bd70      	pop	{r4, r5, r6, pc}
 8018c26:	f06f 0005 	mvn.w	r0, #5
 8018c2a:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_BUF;
 8018c2c:	f06f 0001 	mvn.w	r0, #1
 8018c30:	bd70      	pop	{r4, r5, r6, pc}
              return ERR_USE;
 8018c32:	f06f 0007 	mvn.w	r0, #7
 8018c36:	bd70      	pop	{r4, r5, r6, pc}
 8018c38:	f06f 0007 	mvn.w	r0, #7
 8018c3c:	bd70      	pop	{r4, r5, r6, pc}
 8018c3e:	f06f 0007 	mvn.w	r0, #7
 8018c42:	bd70      	pop	{r4, r5, r6, pc}
 8018c44:	08023dc8 	.word	0x08023dc8
 8018c48:	08023388 	.word	0x08023388
 8018c4c:	08023d50 	.word	0x08023d50
 8018c50:	08023cd4 	.word	0x08023cd4
 8018c54:	0801fe1c 	.word	0x0801fe1c
 8018c58:	2000ecc4 	.word	0x2000ecc4

08018c5c <tcp_listen_with_backlog_and_err>:
{
 8018c5c:	b570      	push	{r4, r5, r6, lr}
 8018c5e:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018c60:	7d03      	ldrb	r3, [r0, #20]
 8018c62:	bb23      	cbnz	r3, 8018cae <tcp_listen_with_backlog_and_err+0x52>
 8018c64:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 8018c66:	2b01      	cmp	r3, #1
 8018c68:	d042      	beq.n	8018cf0 <tcp_listen_with_backlog_and_err+0x94>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018c6a:	2001      	movs	r0, #1
 8018c6c:	f7ff f9fa 	bl	8018064 <memp_malloc>
  if (lpcb == NULL) {
 8018c70:	4605      	mov	r5, r0
 8018c72:	2800      	cmp	r0, #0
 8018c74:	d043      	beq.n	8018cfe <tcp_listen_with_backlog_and_err+0xa2>
  lpcb->callback_arg = pcb->callback_arg;
 8018c76:	6923      	ldr	r3, [r4, #16]
 8018c78:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8018c7a:	8ae3      	ldrh	r3, [r4, #22]
 8018c7c:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8018c7e:	2301      	movs	r3, #1
 8018c80:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8018c82:	7d63      	ldrb	r3, [r4, #21]
 8018c84:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8018c86:	7a23      	ldrb	r3, [r4, #8]
 8018c88:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8018c8a:	7aa3      	ldrb	r3, [r4, #10]
 8018c8c:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 8018c8e:	7a63      	ldrb	r3, [r4, #9]
 8018c90:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018c92:	6823      	ldr	r3, [r4, #0]
 8018c94:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8018c96:	8ae3      	ldrh	r3, [r4, #22]
 8018c98:	b1e3      	cbz	r3, 8018cd4 <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018c9a:	4b1a      	ldr	r3, [pc, #104]	; (8018d04 <tcp_listen_with_backlog_and_err+0xa8>)
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	429c      	cmp	r4, r3
 8018ca0:	d010      	beq.n	8018cc4 <tcp_listen_with_backlog_and_err+0x68>
 8018ca2:	b1ab      	cbz	r3, 8018cd0 <tcp_listen_with_backlog_and_err+0x74>
 8018ca4:	68da      	ldr	r2, [r3, #12]
 8018ca6:	4294      	cmp	r4, r2
 8018ca8:	d010      	beq.n	8018ccc <tcp_listen_with_backlog_and_err+0x70>
 8018caa:	4613      	mov	r3, r2
 8018cac:	e7f9      	b.n	8018ca2 <tcp_listen_with_backlog_and_err+0x46>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018cae:	4b16      	ldr	r3, [pc, #88]	; (8018d08 <tcp_listen_with_backlog_and_err+0xac>)
 8018cb0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8018cb4:	4915      	ldr	r1, [pc, #84]	; (8018d0c <tcp_listen_with_backlog_and_err+0xb0>)
 8018cb6:	4816      	ldr	r0, [pc, #88]	; (8018d10 <tcp_listen_with_backlog_and_err+0xb4>)
 8018cb8:	f006 fae1 	bl	801f27e <iprintf>
 8018cbc:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8018cc0:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018cc2:	e018      	b.n	8018cf6 <tcp_listen_with_backlog_and_err+0x9a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018cc4:	68da      	ldr	r2, [r3, #12]
 8018cc6:	4b0f      	ldr	r3, [pc, #60]	; (8018d04 <tcp_listen_with_backlog_and_err+0xa8>)
 8018cc8:	601a      	str	r2, [r3, #0]
 8018cca:	e001      	b.n	8018cd0 <tcp_listen_with_backlog_and_err+0x74>
 8018ccc:	68e2      	ldr	r2, [r4, #12]
 8018cce:	60da      	str	r2, [r3, #12]
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8018cd4:	4621      	mov	r1, r4
 8018cd6:	2000      	movs	r0, #0
 8018cd8:	f7ff f9de 	bl	8018098 <memp_free>
  lpcb->accept = tcp_accept_null;
 8018cdc:	4b0d      	ldr	r3, [pc, #52]	; (8018d14 <tcp_listen_with_backlog_and_err+0xb8>)
 8018cde:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018ce0:	4b0d      	ldr	r3, [pc, #52]	; (8018d18 <tcp_listen_with_backlog_and_err+0xbc>)
 8018ce2:	681a      	ldr	r2, [r3, #0]
 8018ce4:	60ea      	str	r2, [r5, #12]
 8018ce6:	601d      	str	r5, [r3, #0]
 8018ce8:	f003 fb82 	bl	801c3f0 <tcp_timer_needed>
  res = ERR_OK;
 8018cec:	2300      	movs	r3, #0
 8018cee:	e002      	b.n	8018cf6 <tcp_listen_with_backlog_and_err+0x9a>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8018cf0:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 8018cf2:	f06f 0308 	mvn.w	r3, #8
  if (err != NULL) {
 8018cf6:	b106      	cbz	r6, 8018cfa <tcp_listen_with_backlog_and_err+0x9e>
    *err = res;
 8018cf8:	7033      	strb	r3, [r6, #0]
}
 8018cfa:	4628      	mov	r0, r5
 8018cfc:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8018cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8018d02:	e7f8      	b.n	8018cf6 <tcp_listen_with_backlog_and_err+0x9a>
 8018d04:	2000ecc4 	.word	0x2000ecc4
 8018d08:	08023d50 	.word	0x08023d50
 8018d0c:	08023da4 	.word	0x08023da4
 8018d10:	0801fe1c 	.word	0x0801fe1c
 8018d14:	08019827 	.word	0x08019827
 8018d18:	2000ecc0 	.word	0x2000ecc0

08018d1c <tcp_update_rcv_ann_wnd>:
{
 8018d1c:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018d1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018d20:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8018d22:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018d24:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8018d26:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8018d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018d2c:	d901      	bls.n	8018d32 <tcp_update_rcv_ann_wnd+0x16>
 8018d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018d32:	440b      	add	r3, r1
 8018d34:	1ad3      	subs	r3, r2, r3
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	db02      	blt.n	8018d40 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018d3a:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8018d3c:	1a50      	subs	r0, r2, r1
 8018d3e:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018d40:	1a6b      	subs	r3, r5, r1
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	dd03      	ble.n	8018d4e <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 8018d46:	2200      	movs	r2, #0
 8018d48:	8542      	strh	r2, [r0, #42]	; 0x2a
    return 0;
 8018d4a:	4610      	mov	r0, r2
 8018d4c:	bd38      	pop	{r3, r4, r5, pc}
 8018d4e:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8018d50:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018d52:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8018d56:	d202      	bcs.n	8018d5e <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8018d58:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8018d5a:	2000      	movs	r0, #0
}
 8018d5c:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018d5e:	4b04      	ldr	r3, [pc, #16]	; (8018d70 <tcp_update_rcv_ann_wnd+0x54>)
 8018d60:	f44f 7242 	mov.w	r2, #776	; 0x308
 8018d64:	4903      	ldr	r1, [pc, #12]	; (8018d74 <tcp_update_rcv_ann_wnd+0x58>)
 8018d66:	4804      	ldr	r0, [pc, #16]	; (8018d78 <tcp_update_rcv_ann_wnd+0x5c>)
 8018d68:	f006 fa89 	bl	801f27e <iprintf>
 8018d6c:	e7f4      	b.n	8018d58 <tcp_update_rcv_ann_wnd+0x3c>
 8018d6e:	bf00      	nop
 8018d70:	08023d50 	.word	0x08023d50
 8018d74:	08024048 	.word	0x08024048
 8018d78:	0801fe1c 	.word	0x0801fe1c

08018d7c <tcp_recved>:
{
 8018d7c:	b538      	push	{r3, r4, r5, lr}
 8018d7e:	4605      	mov	r5, r0
 8018d80:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018d82:	7d03      	ldrb	r3, [r0, #20]
 8018d84:	2b01      	cmp	r3, #1
 8018d86:	d010      	beq.n	8018daa <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 8018d88:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8018d8a:	4421      	add	r1, r4
 8018d8c:	b289      	uxth	r1, r1
 8018d8e:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8018d90:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8018d94:	d911      	bls.n	8018dba <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018d9a:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8018d9c:	4628      	mov	r0, r5
 8018d9e:	f7ff ffbd 	bl	8018d1c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8018da2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018da6:	da1b      	bge.n	8018de0 <tcp_recved+0x64>
 8018da8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018daa:	4b11      	ldr	r3, [pc, #68]	; (8018df0 <tcp_recved+0x74>)
 8018dac:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018db0:	4910      	ldr	r1, [pc, #64]	; (8018df4 <tcp_recved+0x78>)
 8018db2:	4811      	ldr	r0, [pc, #68]	; (8018df8 <tcp_recved+0x7c>)
 8018db4:	f006 fa63 	bl	801f27e <iprintf>
 8018db8:	e7e6      	b.n	8018d88 <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 8018dba:	2900      	cmp	r1, #0
 8018dbc:	d1ee      	bne.n	8018d9c <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8018dbe:	7d2b      	ldrb	r3, [r5, #20]
 8018dc0:	2b07      	cmp	r3, #7
 8018dc2:	d009      	beq.n	8018dd8 <tcp_recved+0x5c>
 8018dc4:	2b09      	cmp	r3, #9
 8018dc6:	d007      	beq.n	8018dd8 <tcp_recved+0x5c>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8018dc8:	4b09      	ldr	r3, [pc, #36]	; (8018df0 <tcp_recved+0x74>)
 8018dca:	f240 322d 	movw	r2, #813	; 0x32d
 8018dce:	490b      	ldr	r1, [pc, #44]	; (8018dfc <tcp_recved+0x80>)
 8018dd0:	4809      	ldr	r0, [pc, #36]	; (8018df8 <tcp_recved+0x7c>)
 8018dd2:	f006 fa54 	bl	801f27e <iprintf>
 8018dd6:	e7e1      	b.n	8018d9c <tcp_recved+0x20>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018ddc:	852b      	strh	r3, [r5, #40]	; 0x28
 8018dde:	e7dd      	b.n	8018d9c <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8018de0:	7eab      	ldrb	r3, [r5, #26]
 8018de2:	f043 0302 	orr.w	r3, r3, #2
 8018de6:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 8018de8:	4628      	mov	r0, r5
 8018dea:	f002 ff99 	bl	801bd20 <tcp_output>
}
 8018dee:	e7db      	b.n	8018da8 <tcp_recved+0x2c>
 8018df0:	08023d50 	.word	0x08023d50
 8018df4:	08023e74 	.word	0x08023e74
 8018df8:	0801fe1c 	.word	0x0801fe1c
 8018dfc:	08023e9c 	.word	0x08023e9c

08018e00 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8018e00:	b150      	cbz	r0, 8018e18 <tcp_seg_free+0x18>
{
 8018e02:	b510      	push	{r4, lr}
 8018e04:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8018e06:	6840      	ldr	r0, [r0, #4]
 8018e08:	b108      	cbz	r0, 8018e0e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8018e0a:	f7ff fb15 	bl	8018438 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018e0e:	4621      	mov	r1, r4
 8018e10:	2002      	movs	r0, #2
 8018e12:	f7ff f941 	bl	8018098 <memp_free>
 8018e16:	bd10      	pop	{r4, pc}
 8018e18:	4770      	bx	lr

08018e1a <tcp_segs_free>:
  while (seg != NULL) {
 8018e1a:	b138      	cbz	r0, 8018e2c <tcp_segs_free+0x12>
{
 8018e1c:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8018e1e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8018e20:	f7ff ffee 	bl	8018e00 <tcp_seg_free>
    seg = next;
 8018e24:	4620      	mov	r0, r4
  while (seg != NULL) {
 8018e26:	2c00      	cmp	r4, #0
 8018e28:	d1f9      	bne.n	8018e1e <tcp_segs_free+0x4>
}
 8018e2a:	bd10      	pop	{r4, pc}
 8018e2c:	4770      	bx	lr

08018e2e <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018e2e:	b538      	push	{r3, r4, r5, lr}
 8018e30:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018e32:	2002      	movs	r0, #2
 8018e34:	f7ff f916 	bl	8018064 <memp_malloc>
  if (cseg == NULL) {
 8018e38:	4604      	mov	r4, r0
 8018e3a:	b150      	cbz	r0, 8018e52 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8018e3c:	6828      	ldr	r0, [r5, #0]
 8018e3e:	6869      	ldr	r1, [r5, #4]
 8018e40:	68aa      	ldr	r2, [r5, #8]
 8018e42:	68eb      	ldr	r3, [r5, #12]
 8018e44:	6020      	str	r0, [r4, #0]
 8018e46:	6061      	str	r1, [r4, #4]
 8018e48:	60a2      	str	r2, [r4, #8]
 8018e4a:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8018e4c:	6860      	ldr	r0, [r4, #4]
 8018e4e:	f7ff fcc3 	bl	80187d8 <pbuf_ref>
  return cseg;
}
 8018e52:	4620      	mov	r0, r4
 8018e54:	bd38      	pop	{r3, r4, r5, pc}

08018e56 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8018e56:	b100      	cbz	r0, 8018e5a <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8018e58:	6101      	str	r1, [r0, #16]
 8018e5a:	4770      	bx	lr

08018e5c <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 8018e5c:	b180      	cbz	r0, 8018e80 <tcp_recv+0x24>
{
 8018e5e:	b538      	push	{r3, r4, r5, lr}
 8018e60:	4604      	mov	r4, r0
 8018e62:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018e64:	7d03      	ldrb	r3, [r0, #20]
 8018e66:	2b01      	cmp	r3, #1
 8018e68:	d002      	beq.n	8018e70 <tcp_recv+0x14>
    pcb->recv = recv;
 8018e6a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8018e6e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018e70:	4b04      	ldr	r3, [pc, #16]	; (8018e84 <tcp_recv+0x28>)
 8018e72:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8018e76:	4904      	ldr	r1, [pc, #16]	; (8018e88 <tcp_recv+0x2c>)
 8018e78:	4804      	ldr	r0, [pc, #16]	; (8018e8c <tcp_recv+0x30>)
 8018e7a:	f006 fa00 	bl	801f27e <iprintf>
 8018e7e:	e7f4      	b.n	8018e6a <tcp_recv+0xe>
 8018e80:	4770      	bx	lr
 8018e82:	bf00      	nop
 8018e84:	08023d50 	.word	0x08023d50
 8018e88:	08023e4c 	.word	0x08023e4c
 8018e8c:	0801fe1c 	.word	0x0801fe1c

08018e90 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 8018e90:	b178      	cbz	r0, 8018eb2 <tcp_sent+0x22>
{
 8018e92:	b538      	push	{r3, r4, r5, lr}
 8018e94:	4604      	mov	r4, r0
 8018e96:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018e98:	7d03      	ldrb	r3, [r0, #20]
 8018e9a:	2b01      	cmp	r3, #1
 8018e9c:	d001      	beq.n	8018ea2 <tcp_sent+0x12>
    pcb->sent = sent;
 8018e9e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8018ea0:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018ea2:	4b04      	ldr	r3, [pc, #16]	; (8018eb4 <tcp_sent+0x24>)
 8018ea4:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8018ea8:	4903      	ldr	r1, [pc, #12]	; (8018eb8 <tcp_sent+0x28>)
 8018eaa:	4804      	ldr	r0, [pc, #16]	; (8018ebc <tcp_sent+0x2c>)
 8018eac:	f006 f9e7 	bl	801f27e <iprintf>
 8018eb0:	e7f5      	b.n	8018e9e <tcp_sent+0xe>
 8018eb2:	4770      	bx	lr
 8018eb4:	08023d50 	.word	0x08023d50
 8018eb8:	08023ec0 	.word	0x08023ec0
 8018ebc:	0801fe1c 	.word	0x0801fe1c

08018ec0 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 8018ec0:	b180      	cbz	r0, 8018ee4 <tcp_err+0x24>
{
 8018ec2:	b538      	push	{r3, r4, r5, lr}
 8018ec4:	4604      	mov	r4, r0
 8018ec6:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018ec8:	7d03      	ldrb	r3, [r0, #20]
 8018eca:	2b01      	cmp	r3, #1
 8018ecc:	d002      	beq.n	8018ed4 <tcp_err+0x14>
    pcb->errf = err;
 8018ece:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8018ed2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018ed4:	4b04      	ldr	r3, [pc, #16]	; (8018ee8 <tcp_err+0x28>)
 8018ed6:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8018eda:	4904      	ldr	r1, [pc, #16]	; (8018eec <tcp_err+0x2c>)
 8018edc:	4804      	ldr	r0, [pc, #16]	; (8018ef0 <tcp_err+0x30>)
 8018ede:	f006 f9ce 	bl	801f27e <iprintf>
 8018ee2:	e7f4      	b.n	8018ece <tcp_err+0xe>
 8018ee4:	4770      	bx	lr
 8018ee6:	bf00      	nop
 8018ee8:	08023d50 	.word	0x08023d50
 8018eec:	08023d18 	.word	0x08023d18
 8018ef0:	0801fe1c 	.word	0x0801fe1c

08018ef4 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8018ef4:	b110      	cbz	r0, 8018efc <tcp_accept+0x8>
 8018ef6:	7d02      	ldrb	r2, [r0, #20]
 8018ef8:	2a01      	cmp	r2, #1
 8018efa:	d000      	beq.n	8018efe <tcp_accept+0xa>
 8018efc:	4770      	bx	lr
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8018efe:	6181      	str	r1, [r0, #24]
  }
}
 8018f00:	e7fc      	b.n	8018efc <tcp_accept+0x8>
	...

08018f04 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8018f04:	b570      	push	{r4, r5, r6, lr}
 8018f06:	4604      	mov	r4, r0
 8018f08:	460e      	mov	r6, r1
 8018f0a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018f0c:	7d03      	ldrb	r3, [r0, #20]
 8018f0e:	2b01      	cmp	r3, #1
 8018f10:	d003      	beq.n	8018f1a <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8018f12:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8018f16:	7725      	strb	r5, [r4, #28]
 8018f18:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018f1a:	4b04      	ldr	r3, [pc, #16]	; (8018f2c <tcp_poll+0x28>)
 8018f1c:	f240 7203 	movw	r2, #1795	; 0x703
 8018f20:	4903      	ldr	r1, [pc, #12]	; (8018f30 <tcp_poll+0x2c>)
 8018f22:	4804      	ldr	r0, [pc, #16]	; (8018f34 <tcp_poll+0x30>)
 8018f24:	f006 f9ab 	bl	801f27e <iprintf>
 8018f28:	e7f3      	b.n	8018f12 <tcp_poll+0xe>
 8018f2a:	bf00      	nop
 8018f2c:	08023d50 	.word	0x08023d50
 8018f30:	08023e2c 	.word	0x08023e2c
 8018f34:	0801fe1c 	.word	0x0801fe1c

08018f38 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8018f38:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8018f3a:	7d03      	ldrb	r3, [r0, #20]
 8018f3c:	b1e3      	cbz	r3, 8018f78 <tcp_pcb_purge+0x40>
 8018f3e:	2b0a      	cmp	r3, #10
 8018f40:	d01a      	beq.n	8018f78 <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 8018f42:	2b01      	cmp	r3, #1
 8018f44:	d018      	beq.n	8018f78 <tcp_pcb_purge+0x40>
 8018f46:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8018f48:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8018f4a:	b118      	cbz	r0, 8018f54 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8018f4c:	f7ff fa74 	bl	8018438 <pbuf_free>
      pcb->refused_data = NULL;
 8018f50:	2300      	movs	r3, #0
 8018f52:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8018f54:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8018f56:	f7ff ff60 	bl	8018e1a <tcp_segs_free>
    pcb->ooseq = NULL;
 8018f5a:	2500      	movs	r5, #0
 8018f5c:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8018f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f62:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8018f64:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8018f66:	f7ff ff58 	bl	8018e1a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8018f6a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8018f6c:	f7ff ff55 	bl	8018e1a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8018f70:	66a5      	str	r5, [r4, #104]	; 0x68
 8018f72:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8018f74:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8018f78:	bd38      	pop	{r3, r4, r5, pc}
	...

08018f7c <tcp_slowtmr>:
{
 8018f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f80:	b082      	sub	sp, #8
  ++tcp_ticks;
 8018f82:	4aae      	ldr	r2, [pc, #696]	; (801923c <tcp_slowtmr+0x2c0>)
 8018f84:	6813      	ldr	r3, [r2, #0]
 8018f86:	3301      	adds	r3, #1
 8018f88:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8018f8a:	4aad      	ldr	r2, [pc, #692]	; (8019240 <tcp_slowtmr+0x2c4>)
 8018f8c:	7813      	ldrb	r3, [r2, #0]
 8018f8e:	3301      	adds	r3, #1
 8018f90:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8018f92:	4bac      	ldr	r3, [pc, #688]	; (8019244 <tcp_slowtmr+0x2c8>)
 8018f94:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8018f96:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8018f98:	e018      	b.n	8018fcc <tcp_slowtmr+0x50>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018f9a:	4bab      	ldr	r3, [pc, #684]	; (8019248 <tcp_slowtmr+0x2cc>)
 8018f9c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8018fa0:	49aa      	ldr	r1, [pc, #680]	; (801924c <tcp_slowtmr+0x2d0>)
 8018fa2:	48ab      	ldr	r0, [pc, #684]	; (8019250 <tcp_slowtmr+0x2d4>)
 8018fa4:	f006 f96b 	bl	801f27e <iprintf>
 8018fa8:	e016      	b.n	8018fd8 <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018faa:	4ba7      	ldr	r3, [pc, #668]	; (8019248 <tcp_slowtmr+0x2cc>)
 8018fac:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018fb0:	49a8      	ldr	r1, [pc, #672]	; (8019254 <tcp_slowtmr+0x2d8>)
 8018fb2:	48a7      	ldr	r0, [pc, #668]	; (8019250 <tcp_slowtmr+0x2d4>)
 8018fb4:	f006 f963 	bl	801f27e <iprintf>
 8018fb8:	e011      	b.n	8018fde <tcp_slowtmr+0x62>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8018fba:	4ba3      	ldr	r3, [pc, #652]	; (8019248 <tcp_slowtmr+0x2cc>)
 8018fbc:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8018fc0:	49a5      	ldr	r1, [pc, #660]	; (8019258 <tcp_slowtmr+0x2dc>)
 8018fc2:	48a3      	ldr	r0, [pc, #652]	; (8019250 <tcp_slowtmr+0x2d4>)
 8018fc4:	f006 f95b 	bl	801f27e <iprintf>
 8018fc8:	e00c      	b.n	8018fe4 <tcp_slowtmr+0x68>
      pcb = pcb->next;
 8018fca:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8018fcc:	2c00      	cmp	r4, #0
 8018fce:	f000 817c 	beq.w	80192ca <tcp_slowtmr+0x34e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018fd2:	7d23      	ldrb	r3, [r4, #20]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d0e0      	beq.n	8018f9a <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018fd8:	7d23      	ldrb	r3, [r4, #20]
 8018fda:	2b01      	cmp	r3, #1
 8018fdc:	d0e5      	beq.n	8018faa <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8018fde:	7d23      	ldrb	r3, [r4, #20]
 8018fe0:	2b0a      	cmp	r3, #10
 8018fe2:	d0ea      	beq.n	8018fba <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8018fe4:	7f62      	ldrb	r2, [r4, #29]
 8018fe6:	4b96      	ldr	r3, [pc, #600]	; (8019240 <tcp_slowtmr+0x2c4>)
 8018fe8:	781b      	ldrb	r3, [r3, #0]
 8018fea:	429a      	cmp	r2, r3
 8018fec:	d0ed      	beq.n	8018fca <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8018fee:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8018ff0:	7d23      	ldrb	r3, [r4, #20]
 8018ff2:	2b02      	cmp	r3, #2
 8018ff4:	d016      	beq.n	8019024 <tcp_slowtmr+0xa8>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8018ff6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8018ffa:	2a0b      	cmp	r2, #11
 8018ffc:	d860      	bhi.n	80190c0 <tcp_slowtmr+0x144>
      if (pcb->persist_backoff > 0) {
 8018ffe:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 8019002:	b335      	cbz	r5, 8019052 <tcp_slowtmr+0xd6>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8019004:	3d01      	subs	r5, #1
 8019006:	4b95      	ldr	r3, [pc, #596]	; (801925c <tcp_slowtmr+0x2e0>)
 8019008:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 801900a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 801900e:	429a      	cmp	r2, r3
 8019010:	d902      	bls.n	8019018 <tcp_slowtmr+0x9c>
          pcb->persist_cnt++;
 8019012:	3301      	adds	r3, #1
 8019014:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8019018:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 801901c:	429a      	cmp	r2, r3
 801901e:	d907      	bls.n	8019030 <tcp_slowtmr+0xb4>
    pcb_remove = 0;
 8019020:	2500      	movs	r5, #0
 8019022:	e04e      	b.n	80190c2 <tcp_slowtmr+0x146>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019024:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8019028:	2a05      	cmp	r2, #5
 801902a:	d9e4      	bls.n	8018ff6 <tcp_slowtmr+0x7a>
      ++pcb_remove;
 801902c:	2501      	movs	r5, #1
 801902e:	e048      	b.n	80190c2 <tcp_slowtmr+0x146>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8019030:	4620      	mov	r0, r4
 8019032:	f003 f8c2 	bl	801c1ba <tcp_zero_window_probe>
 8019036:	2800      	cmp	r0, #0
 8019038:	d150      	bne.n	80190dc <tcp_slowtmr+0x160>
            pcb->persist_cnt = 0;
 801903a:	2300      	movs	r3, #0
 801903c:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8019040:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8019044:	2b06      	cmp	r3, #6
 8019046:	d84b      	bhi.n	80190e0 <tcp_slowtmr+0x164>
              pcb->persist_backoff++;
 8019048:	3301      	adds	r3, #1
 801904a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 801904e:	2500      	movs	r5, #0
 8019050:	e037      	b.n	80190c2 <tcp_slowtmr+0x146>
        if (pcb->rtime >= 0) {
 8019052:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8019056:	2900      	cmp	r1, #0
 8019058:	db01      	blt.n	801905e <tcp_slowtmr+0xe2>
          ++pcb->rtime;
 801905a:	3101      	adds	r1, #1
 801905c:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 801905e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8019060:	b379      	cbz	r1, 80190c2 <tcp_slowtmr+0x146>
 8019062:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8019066:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801906a:	4288      	cmp	r0, r1
 801906c:	db29      	blt.n	80190c2 <tcp_slowtmr+0x146>
          if (pcb->state != SYN_SENT) {
 801906e:	2b02      	cmp	r3, #2
 8019070:	d00d      	beq.n	801908e <tcp_slowtmr+0x112>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8019072:	2a0c      	cmp	r2, #12
 8019074:	bf28      	it	cs
 8019076:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8019078:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801907c:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8019080:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8019084:	4976      	ldr	r1, [pc, #472]	; (8019260 <tcp_slowtmr+0x2e4>)
 8019086:	5c8a      	ldrb	r2, [r1, r2]
 8019088:	4093      	lsls	r3, r2
 801908a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 801908e:	2300      	movs	r3, #0
 8019090:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8019092:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8019096:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801909a:	4293      	cmp	r3, r2
 801909c:	bf28      	it	cs
 801909e:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 80190a0:	085b      	lsrs	r3, r3, #1
 80190a2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80190a6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80190a8:	004a      	lsls	r2, r1, #1
 80190aa:	b292      	uxth	r2, r2
 80190ac:	4293      	cmp	r3, r2
 80190ae:	d201      	bcs.n	80190b4 <tcp_slowtmr+0x138>
            pcb->ssthresh = (pcb->mss << 1);
 80190b0:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 80190b4:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 80190b8:	4620      	mov	r0, r4
 80190ba:	f002 ffe1 	bl	801c080 <tcp_rexmit_rto>
 80190be:	e000      	b.n	80190c2 <tcp_slowtmr+0x146>
      ++pcb_remove;
 80190c0:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 80190c2:	7d23      	ldrb	r3, [r4, #20]
 80190c4:	2b06      	cmp	r3, #6
 80190c6:	d00d      	beq.n	80190e4 <tcp_slowtmr+0x168>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80190c8:	7a22      	ldrb	r2, [r4, #8]
 80190ca:	f012 0f08 	tst.w	r2, #8
 80190ce:	d043      	beq.n	8019158 <tcp_slowtmr+0x1dc>
 80190d0:	2b04      	cmp	r3, #4
 80190d2:	d014      	beq.n	80190fe <tcp_slowtmr+0x182>
       ((pcb->state == ESTABLISHED) ||
 80190d4:	2b07      	cmp	r3, #7
 80190d6:	d012      	beq.n	80190fe <tcp_slowtmr+0x182>
    pcb_reset = 0;
 80190d8:	2700      	movs	r7, #0
 80190da:	e03e      	b.n	801915a <tcp_slowtmr+0x1de>
    pcb_remove = 0;
 80190dc:	2500      	movs	r5, #0
 80190de:	e7f0      	b.n	80190c2 <tcp_slowtmr+0x146>
 80190e0:	2500      	movs	r5, #0
 80190e2:	e7ee      	b.n	80190c2 <tcp_slowtmr+0x146>
      if (pcb->flags & TF_RXCLOSED) {
 80190e4:	7ea2      	ldrb	r2, [r4, #26]
 80190e6:	f012 0f10 	tst.w	r2, #16
 80190ea:	d0ed      	beq.n	80190c8 <tcp_slowtmr+0x14c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80190ec:	6a21      	ldr	r1, [r4, #32]
 80190ee:	4a53      	ldr	r2, [pc, #332]	; (801923c <tcp_slowtmr+0x2c0>)
 80190f0:	6812      	ldr	r2, [r2, #0]
 80190f2:	1a52      	subs	r2, r2, r1
 80190f4:	2a28      	cmp	r2, #40	; 0x28
 80190f6:	d9e7      	bls.n	80190c8 <tcp_slowtmr+0x14c>
          ++pcb_remove;
 80190f8:	3501      	adds	r5, #1
 80190fa:	b2ed      	uxtb	r5, r5
 80190fc:	e7e4      	b.n	80190c8 <tcp_slowtmr+0x14c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80190fe:	4b4f      	ldr	r3, [pc, #316]	; (801923c <tcp_slowtmr+0x2c0>)
 8019100:	681a      	ldr	r2, [r3, #0]
 8019102:	6a23      	ldr	r3, [r4, #32]
 8019104:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8019106:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801910a:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 801910e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8019112:	4854      	ldr	r0, [pc, #336]	; (8019264 <tcp_slowtmr+0x2e8>)
 8019114:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019118:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801911c:	d903      	bls.n	8019126 <tcp_slowtmr+0x1aa>
        ++pcb_remove;
 801911e:	3501      	adds	r5, #1
 8019120:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8019122:	2701      	movs	r7, #1
 8019124:	e019      	b.n	801915a <tcp_slowtmr+0x1de>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8019126:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 801912a:	484f      	ldr	r0, [pc, #316]	; (8019268 <tcp_slowtmr+0x2ec>)
 801912c:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 8019130:	494c      	ldr	r1, [pc, #304]	; (8019264 <tcp_slowtmr+0x2e8>)
 8019132:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019136:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801913a:	d801      	bhi.n	8019140 <tcp_slowtmr+0x1c4>
    pcb_reset = 0;
 801913c:	2700      	movs	r7, #0
 801913e:	e00c      	b.n	801915a <tcp_slowtmr+0x1de>
        err = tcp_keepalive(pcb);
 8019140:	4620      	mov	r0, r4
 8019142:	f003 f80e 	bl	801c162 <tcp_keepalive>
        if (err == ERR_OK) {
 8019146:	2800      	cmp	r0, #0
 8019148:	d13a      	bne.n	80191c0 <tcp_slowtmr+0x244>
          pcb->keep_cnt_sent++;
 801914a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 801914e:	3301      	adds	r3, #1
 8019150:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8019154:	2700      	movs	r7, #0
 8019156:	e000      	b.n	801915a <tcp_slowtmr+0x1de>
 8019158:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 801915a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801915c:	b150      	cbz	r0, 8019174 <tcp_slowtmr+0x1f8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 801915e:	4b37      	ldr	r3, [pc, #220]	; (801923c <tcp_slowtmr+0x2c0>)
 8019160:	681a      	ldr	r2, [r3, #0]
 8019162:	6a23      	ldr	r3, [r4, #32]
 8019164:	1ad2      	subs	r2, r2, r3
 8019166:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801916a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801916e:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 8019170:	428a      	cmp	r2, r1
 8019172:	d227      	bcs.n	80191c4 <tcp_slowtmr+0x248>
    if (pcb->state == SYN_RCVD) {
 8019174:	7d23      	ldrb	r3, [r4, #20]
 8019176:	2b03      	cmp	r3, #3
 8019178:	d029      	beq.n	80191ce <tcp_slowtmr+0x252>
    if (pcb->state == LAST_ACK) {
 801917a:	2b09      	cmp	r3, #9
 801917c:	d030      	beq.n	80191e0 <tcp_slowtmr+0x264>
    if (pcb_remove) {
 801917e:	2d00      	cmp	r5, #0
 8019180:	d137      	bne.n	80191f2 <tcp_slowtmr+0x276>
      pcb = pcb->next;
 8019182:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8019184:	7ee3      	ldrb	r3, [r4, #27]
 8019186:	3301      	adds	r3, #1
 8019188:	b2db      	uxtb	r3, r3
 801918a:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 801918c:	7f22      	ldrb	r2, [r4, #28]
 801918e:	4293      	cmp	r3, r2
 8019190:	f0c0 8098 	bcc.w	80192c4 <tcp_slowtmr+0x348>
        prev->polltmr = 0;
 8019194:	2300      	movs	r3, #0
 8019196:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8019198:	4a34      	ldr	r2, [pc, #208]	; (801926c <tcp_slowtmr+0x2f0>)
 801919a:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 801919c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	f000 8087 	beq.w	80192b4 <tcp_slowtmr+0x338>
 80191a6:	4621      	mov	r1, r4
 80191a8:	6920      	ldr	r0, [r4, #16]
 80191aa:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80191ac:	4b2f      	ldr	r3, [pc, #188]	; (801926c <tcp_slowtmr+0x2f0>)
 80191ae:	781b      	ldrb	r3, [r3, #0]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	f47f aeee 	bne.w	8018f92 <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 80191b6:	2800      	cmp	r0, #0
 80191b8:	d07e      	beq.n	80192b8 <tcp_slowtmr+0x33c>
      prev = pcb;
 80191ba:	4626      	mov	r6, r4
      pcb = pcb->next;
 80191bc:	462c      	mov	r4, r5
 80191be:	e705      	b.n	8018fcc <tcp_slowtmr+0x50>
    pcb_reset = 0;
 80191c0:	2700      	movs	r7, #0
 80191c2:	e7ca      	b.n	801915a <tcp_slowtmr+0x1de>
      tcp_segs_free(pcb->ooseq);
 80191c4:	f7ff fe29 	bl	8018e1a <tcp_segs_free>
      pcb->ooseq = NULL;
 80191c8:	2300      	movs	r3, #0
 80191ca:	6723      	str	r3, [r4, #112]	; 0x70
 80191cc:	e7d2      	b.n	8019174 <tcp_slowtmr+0x1f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80191ce:	6a21      	ldr	r1, [r4, #32]
 80191d0:	4a1a      	ldr	r2, [pc, #104]	; (801923c <tcp_slowtmr+0x2c0>)
 80191d2:	6812      	ldr	r2, [r2, #0]
 80191d4:	1a52      	subs	r2, r2, r1
 80191d6:	2a28      	cmp	r2, #40	; 0x28
 80191d8:	d9cf      	bls.n	801917a <tcp_slowtmr+0x1fe>
        ++pcb_remove;
 80191da:	3501      	adds	r5, #1
 80191dc:	b2ed      	uxtb	r5, r5
 80191de:	e7cc      	b.n	801917a <tcp_slowtmr+0x1fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80191e0:	6a22      	ldr	r2, [r4, #32]
 80191e2:	4b16      	ldr	r3, [pc, #88]	; (801923c <tcp_slowtmr+0x2c0>)
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	1a9b      	subs	r3, r3, r2
 80191e8:	2bf0      	cmp	r3, #240	; 0xf0
 80191ea:	d9c8      	bls.n	801917e <tcp_slowtmr+0x202>
        ++pcb_remove;
 80191ec:	3501      	adds	r5, #1
 80191ee:	b2ed      	uxtb	r5, r5
 80191f0:	e7c5      	b.n	801917e <tcp_slowtmr+0x202>
      tcp_err_fn err_fn = pcb->errf;
 80191f2:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 80191f6:	4620      	mov	r0, r4
 80191f8:	f7ff fe9e 	bl	8018f38 <tcp_pcb_purge>
      if (prev != NULL) {
 80191fc:	2e00      	cmp	r6, #0
 80191fe:	d03f      	beq.n	8019280 <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019200:	4b10      	ldr	r3, [pc, #64]	; (8019244 <tcp_slowtmr+0x2c8>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	429c      	cmp	r4, r3
 8019206:	d033      	beq.n	8019270 <tcp_slowtmr+0x2f4>
        prev->next = pcb->next;
 8019208:	68e3      	ldr	r3, [r4, #12]
 801920a:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 801920c:	2f00      	cmp	r7, #0
 801920e:	d146      	bne.n	801929e <tcp_slowtmr+0x322>
      err_arg = pcb->callback_arg;
 8019210:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 8019214:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8019216:	4621      	mov	r1, r4
 8019218:	2000      	movs	r0, #0
 801921a:	f7fe ff3d 	bl	8018098 <memp_free>
      tcp_active_pcbs_changed = 0;
 801921e:	2200      	movs	r2, #0
 8019220:	4b12      	ldr	r3, [pc, #72]	; (801926c <tcp_slowtmr+0x2f0>)
 8019222:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8019224:	b11d      	cbz	r5, 801922e <tcp_slowtmr+0x2b2>
 8019226:	f06f 010c 	mvn.w	r1, #12
 801922a:	4640      	mov	r0, r8
 801922c:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 801922e:	4b0f      	ldr	r3, [pc, #60]	; (801926c <tcp_slowtmr+0x2f0>)
 8019230:	781b      	ldrb	r3, [r3, #0]
 8019232:	2b00      	cmp	r3, #0
 8019234:	f47f aead 	bne.w	8018f92 <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8019238:	463c      	mov	r4, r7
 801923a:	e6c7      	b.n	8018fcc <tcp_slowtmr+0x50>
 801923c:	2000ecbc 	.word	0x2000ecbc
 8019240:	200094d6 	.word	0x200094d6
 8019244:	2000ecb8 	.word	0x2000ecb8
 8019248:	08023d50 	.word	0x08023d50
 801924c:	08023ee8 	.word	0x08023ee8
 8019250:	0801fe1c 	.word	0x0801fe1c
 8019254:	08023f14 	.word	0x08023f14
 8019258:	08023f40 	.word	0x08023f40
 801925c:	08023e24 	.word	0x08023e24
 8019260:	08023cc4 	.word	0x08023cc4
 8019264:	10624dd3 	.word	0x10624dd3
 8019268:	000124f8 	.word	0x000124f8
 801926c:	2000ecb4 	.word	0x2000ecb4
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019270:	4b39      	ldr	r3, [pc, #228]	; (8019358 <tcp_slowtmr+0x3dc>)
 8019272:	f240 4289 	movw	r2, #1161	; 0x489
 8019276:	4939      	ldr	r1, [pc, #228]	; (801935c <tcp_slowtmr+0x3e0>)
 8019278:	4839      	ldr	r0, [pc, #228]	; (8019360 <tcp_slowtmr+0x3e4>)
 801927a:	f006 f800 	bl	801f27e <iprintf>
 801927e:	e7c3      	b.n	8019208 <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8019280:	4b38      	ldr	r3, [pc, #224]	; (8019364 <tcp_slowtmr+0x3e8>)
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	429c      	cmp	r4, r3
 8019286:	d006      	beq.n	8019296 <tcp_slowtmr+0x31a>
 8019288:	4b33      	ldr	r3, [pc, #204]	; (8019358 <tcp_slowtmr+0x3dc>)
 801928a:	f240 428d 	movw	r2, #1165	; 0x48d
 801928e:	4936      	ldr	r1, [pc, #216]	; (8019368 <tcp_slowtmr+0x3ec>)
 8019290:	4833      	ldr	r0, [pc, #204]	; (8019360 <tcp_slowtmr+0x3e4>)
 8019292:	f005 fff4 	bl	801f27e <iprintf>
        tcp_active_pcbs = pcb->next;
 8019296:	68e2      	ldr	r2, [r4, #12]
 8019298:	4b32      	ldr	r3, [pc, #200]	; (8019364 <tcp_slowtmr+0x3e8>)
 801929a:	601a      	str	r2, [r3, #0]
 801929c:	e7b6      	b.n	801920c <tcp_slowtmr+0x290>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801929e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80192a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80192a2:	8b23      	ldrh	r3, [r4, #24]
 80192a4:	9301      	str	r3, [sp, #4]
 80192a6:	8ae3      	ldrh	r3, [r4, #22]
 80192a8:	9300      	str	r3, [sp, #0]
 80192aa:	1d23      	adds	r3, r4, #4
 80192ac:	4622      	mov	r2, r4
 80192ae:	f002 fe93 	bl	801bfd8 <tcp_rst>
 80192b2:	e7ad      	b.n	8019210 <tcp_slowtmr+0x294>
        TCP_EVENT_POLL(prev, err);
 80192b4:	2000      	movs	r0, #0
 80192b6:	e779      	b.n	80191ac <tcp_slowtmr+0x230>
          tcp_output(prev);
 80192b8:	4620      	mov	r0, r4
 80192ba:	f002 fd31 	bl	801bd20 <tcp_output>
      prev = pcb;
 80192be:	4626      	mov	r6, r4
      pcb = pcb->next;
 80192c0:	462c      	mov	r4, r5
 80192c2:	e683      	b.n	8018fcc <tcp_slowtmr+0x50>
      prev = pcb;
 80192c4:	4626      	mov	r6, r4
      pcb = pcb->next;
 80192c6:	462c      	mov	r4, r5
 80192c8:	e680      	b.n	8018fcc <tcp_slowtmr+0x50>
  pcb = tcp_tw_pcbs;
 80192ca:	4b28      	ldr	r3, [pc, #160]	; (801936c <tcp_slowtmr+0x3f0>)
 80192cc:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 80192ce:	e003      	b.n	80192d8 <tcp_slowtmr+0x35c>
      ++pcb_remove;
 80192d0:	2301      	movs	r3, #1
    if (pcb_remove) {
 80192d2:	b9ab      	cbnz	r3, 8019300 <tcp_slowtmr+0x384>
      prev = pcb;
 80192d4:	462c      	mov	r4, r5
      pcb = pcb->next;
 80192d6:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 80192d8:	2d00      	cmp	r5, #0
 80192da:	d039      	beq.n	8019350 <tcp_slowtmr+0x3d4>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80192dc:	7d2b      	ldrb	r3, [r5, #20]
 80192de:	2b0a      	cmp	r3, #10
 80192e0:	d006      	beq.n	80192f0 <tcp_slowtmr+0x374>
 80192e2:	4b1d      	ldr	r3, [pc, #116]	; (8019358 <tcp_slowtmr+0x3dc>)
 80192e4:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80192e8:	4921      	ldr	r1, [pc, #132]	; (8019370 <tcp_slowtmr+0x3f4>)
 80192ea:	481d      	ldr	r0, [pc, #116]	; (8019360 <tcp_slowtmr+0x3e4>)
 80192ec:	f005 ffc7 	bl	801f27e <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80192f0:	6a2a      	ldr	r2, [r5, #32]
 80192f2:	4b20      	ldr	r3, [pc, #128]	; (8019374 <tcp_slowtmr+0x3f8>)
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	1a9b      	subs	r3, r3, r2
 80192f8:	2bf0      	cmp	r3, #240	; 0xf0
 80192fa:	d8e9      	bhi.n	80192d0 <tcp_slowtmr+0x354>
    pcb_remove = 0;
 80192fc:	2300      	movs	r3, #0
 80192fe:	e7e8      	b.n	80192d2 <tcp_slowtmr+0x356>
      tcp_pcb_purge(pcb);
 8019300:	4628      	mov	r0, r5
 8019302:	f7ff fe19 	bl	8018f38 <tcp_pcb_purge>
      if (prev != NULL) {
 8019306:	b1a4      	cbz	r4, 8019332 <tcp_slowtmr+0x3b6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8019308:	4b18      	ldr	r3, [pc, #96]	; (801936c <tcp_slowtmr+0x3f0>)
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	429d      	cmp	r5, r3
 801930e:	d008      	beq.n	8019322 <tcp_slowtmr+0x3a6>
        prev->next = pcb->next;
 8019310:	68eb      	ldr	r3, [r5, #12]
 8019312:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8019314:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8019316:	4629      	mov	r1, r5
 8019318:	2000      	movs	r0, #0
 801931a:	f7fe febd 	bl	8018098 <memp_free>
      pcb = pcb->next;
 801931e:	4635      	mov	r5, r6
 8019320:	e7da      	b.n	80192d8 <tcp_slowtmr+0x35c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8019322:	4b0d      	ldr	r3, [pc, #52]	; (8019358 <tcp_slowtmr+0x3dc>)
 8019324:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8019328:	4913      	ldr	r1, [pc, #76]	; (8019378 <tcp_slowtmr+0x3fc>)
 801932a:	480d      	ldr	r0, [pc, #52]	; (8019360 <tcp_slowtmr+0x3e4>)
 801932c:	f005 ffa7 	bl	801f27e <iprintf>
 8019330:	e7ee      	b.n	8019310 <tcp_slowtmr+0x394>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8019332:	4b0e      	ldr	r3, [pc, #56]	; (801936c <tcp_slowtmr+0x3f0>)
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	429d      	cmp	r5, r3
 8019338:	d006      	beq.n	8019348 <tcp_slowtmr+0x3cc>
 801933a:	4b07      	ldr	r3, [pc, #28]	; (8019358 <tcp_slowtmr+0x3dc>)
 801933c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8019340:	490e      	ldr	r1, [pc, #56]	; (801937c <tcp_slowtmr+0x400>)
 8019342:	4807      	ldr	r0, [pc, #28]	; (8019360 <tcp_slowtmr+0x3e4>)
 8019344:	f005 ff9b 	bl	801f27e <iprintf>
        tcp_tw_pcbs = pcb->next;
 8019348:	68ea      	ldr	r2, [r5, #12]
 801934a:	4b08      	ldr	r3, [pc, #32]	; (801936c <tcp_slowtmr+0x3f0>)
 801934c:	601a      	str	r2, [r3, #0]
 801934e:	e7e1      	b.n	8019314 <tcp_slowtmr+0x398>
}
 8019350:	b002      	add	sp, #8
 8019352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019356:	bf00      	nop
 8019358:	08023d50 	.word	0x08023d50
 801935c:	08023f70 	.word	0x08023f70
 8019360:	0801fe1c 	.word	0x0801fe1c
 8019364:	2000ecb8 	.word	0x2000ecb8
 8019368:	08023f9c 	.word	0x08023f9c
 801936c:	2000ecc8 	.word	0x2000ecc8
 8019370:	08023fc8 	.word	0x08023fc8
 8019374:	2000ecbc 	.word	0x2000ecbc
 8019378:	08023ff8 	.word	0x08023ff8
 801937c:	08024020 	.word	0x08024020

08019380 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8019380:	b510      	push	{r4, lr}
 8019382:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8019384:	6803      	ldr	r3, [r0, #0]
 8019386:	428b      	cmp	r3, r1
 8019388:	d005      	beq.n	8019396 <tcp_pcb_remove+0x16>
 801938a:	b14b      	cbz	r3, 80193a0 <tcp_pcb_remove+0x20>
 801938c:	68da      	ldr	r2, [r3, #12]
 801938e:	4294      	cmp	r4, r2
 8019390:	d004      	beq.n	801939c <tcp_pcb_remove+0x1c>
 8019392:	4613      	mov	r3, r2
 8019394:	e7f9      	b.n	801938a <tcp_pcb_remove+0xa>
 8019396:	68db      	ldr	r3, [r3, #12]
 8019398:	6003      	str	r3, [r0, #0]
 801939a:	e001      	b.n	80193a0 <tcp_pcb_remove+0x20>
 801939c:	68e2      	ldr	r2, [r4, #12]
 801939e:	60da      	str	r2, [r3, #12]
 80193a0:	2300      	movs	r3, #0
 80193a2:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 80193a4:	4620      	mov	r0, r4
 80193a6:	f7ff fdc7 	bl	8018f38 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80193aa:	7d23      	ldrb	r3, [r4, #20]
 80193ac:	2b0a      	cmp	r3, #10
 80193ae:	d005      	beq.n	80193bc <tcp_pcb_remove+0x3c>
 80193b0:	2b01      	cmp	r3, #1
 80193b2:	d003      	beq.n	80193bc <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 80193b4:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 80193b6:	f013 0f01 	tst.w	r3, #1
 80193ba:	d121      	bne.n	8019400 <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 80193bc:	7d23      	ldrb	r3, [r4, #20]
 80193be:	2b01      	cmp	r3, #1
 80193c0:	d01a      	beq.n	80193f8 <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80193c2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80193c4:	b133      	cbz	r3, 80193d4 <tcp_pcb_remove+0x54>
 80193c6:	4b12      	ldr	r3, [pc, #72]	; (8019410 <tcp_pcb_remove+0x90>)
 80193c8:	f240 7253 	movw	r2, #1875	; 0x753
 80193cc:	4911      	ldr	r1, [pc, #68]	; (8019414 <tcp_pcb_remove+0x94>)
 80193ce:	4812      	ldr	r0, [pc, #72]	; (8019418 <tcp_pcb_remove+0x98>)
 80193d0:	f005 ff55 	bl	801f27e <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80193d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80193d6:	b133      	cbz	r3, 80193e6 <tcp_pcb_remove+0x66>
 80193d8:	4b0d      	ldr	r3, [pc, #52]	; (8019410 <tcp_pcb_remove+0x90>)
 80193da:	f240 7254 	movw	r2, #1876	; 0x754
 80193de:	490f      	ldr	r1, [pc, #60]	; (801941c <tcp_pcb_remove+0x9c>)
 80193e0:	480d      	ldr	r0, [pc, #52]	; (8019418 <tcp_pcb_remove+0x98>)
 80193e2:	f005 ff4c 	bl	801f27e <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80193e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80193e8:	b133      	cbz	r3, 80193f8 <tcp_pcb_remove+0x78>
 80193ea:	4b09      	ldr	r3, [pc, #36]	; (8019410 <tcp_pcb_remove+0x90>)
 80193ec:	f240 7256 	movw	r2, #1878	; 0x756
 80193f0:	490b      	ldr	r1, [pc, #44]	; (8019420 <tcp_pcb_remove+0xa0>)
 80193f2:	4809      	ldr	r0, [pc, #36]	; (8019418 <tcp_pcb_remove+0x98>)
 80193f4:	f005 ff43 	bl	801f27e <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80193f8:	2300      	movs	r3, #0
 80193fa:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80193fc:	82e3      	strh	r3, [r4, #22]
 80193fe:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 8019400:	f043 0302 	orr.w	r3, r3, #2
 8019404:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8019406:	4620      	mov	r0, r4
 8019408:	f002 fc8a 	bl	801bd20 <tcp_output>
 801940c:	e7d6      	b.n	80193bc <tcp_pcb_remove+0x3c>
 801940e:	bf00      	nop
 8019410:	08023d50 	.word	0x08023d50
 8019414:	08023dd8 	.word	0x08023dd8
 8019418:	0801fe1c 	.word	0x0801fe1c
 801941c:	08023df0 	.word	0x08023df0
 8019420:	08023e0c 	.word	0x08023e0c

08019424 <tcp_close_shutdown>:
{
 8019424:	b510      	push	{r4, lr}
 8019426:	b082      	sub	sp, #8
 8019428:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801942a:	b121      	cbz	r1, 8019436 <tcp_close_shutdown+0x12>
 801942c:	7d03      	ldrb	r3, [r0, #20]
 801942e:	2b04      	cmp	r3, #4
 8019430:	d00c      	beq.n	801944c <tcp_close_shutdown+0x28>
 8019432:	2b07      	cmp	r3, #7
 8019434:	d00a      	beq.n	801944c <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 8019436:	7d23      	ldrb	r3, [r4, #20]
 8019438:	2b01      	cmp	r3, #1
 801943a:	d072      	beq.n	8019522 <tcp_close_shutdown+0xfe>
 801943c:	2b00      	cmp	r3, #0
 801943e:	d055      	beq.n	80194ec <tcp_close_shutdown+0xc8>
 8019440:	2b02      	cmp	r3, #2
 8019442:	d07b      	beq.n	801953c <tcp_close_shutdown+0x118>
    return tcp_close_shutdown_fin(pcb);
 8019444:	4620      	mov	r0, r4
 8019446:	f7ff fb65 	bl	8018b14 <tcp_close_shutdown_fin>
 801944a:	e068      	b.n	801951e <tcp_close_shutdown+0xfa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801944c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801944e:	b1d3      	cbz	r3, 8019486 <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019450:	7ea3      	ldrb	r3, [r4, #26]
 8019452:	f013 0f10 	tst.w	r3, #16
 8019456:	d01b      	beq.n	8019490 <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019458:	8b23      	ldrh	r3, [r4, #24]
 801945a:	9301      	str	r3, [sp, #4]
 801945c:	8ae3      	ldrh	r3, [r4, #22]
 801945e:	9300      	str	r3, [sp, #0]
 8019460:	1d23      	adds	r3, r4, #4
 8019462:	4622      	mov	r2, r4
 8019464:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019466:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019468:	f002 fdb6 	bl	801bfd8 <tcp_rst>
      tcp_pcb_purge(pcb);
 801946c:	4620      	mov	r0, r4
 801946e:	f7ff fd63 	bl	8018f38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8019472:	4b39      	ldr	r3, [pc, #228]	; (8019558 <tcp_close_shutdown+0x134>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	429c      	cmp	r4, r3
 8019478:	d012      	beq.n	80194a0 <tcp_close_shutdown+0x7c>
 801947a:	b1bb      	cbz	r3, 80194ac <tcp_close_shutdown+0x88>
 801947c:	68da      	ldr	r2, [r3, #12]
 801947e:	4294      	cmp	r4, r2
 8019480:	d012      	beq.n	80194a8 <tcp_close_shutdown+0x84>
 8019482:	4613      	mov	r3, r2
 8019484:	e7f9      	b.n	801947a <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019486:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8019488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801948c:	d1e0      	bne.n	8019450 <tcp_close_shutdown+0x2c>
 801948e:	e7d2      	b.n	8019436 <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019490:	4b32      	ldr	r3, [pc, #200]	; (801955c <tcp_close_shutdown+0x138>)
 8019492:	f240 120f 	movw	r2, #271	; 0x10f
 8019496:	4932      	ldr	r1, [pc, #200]	; (8019560 <tcp_close_shutdown+0x13c>)
 8019498:	4832      	ldr	r0, [pc, #200]	; (8019564 <tcp_close_shutdown+0x140>)
 801949a:	f005 fef0 	bl	801f27e <iprintf>
 801949e:	e7db      	b.n	8019458 <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 80194a0:	68da      	ldr	r2, [r3, #12]
 80194a2:	4b2d      	ldr	r3, [pc, #180]	; (8019558 <tcp_close_shutdown+0x134>)
 80194a4:	601a      	str	r2, [r3, #0]
 80194a6:	e001      	b.n	80194ac <tcp_close_shutdown+0x88>
 80194a8:	68e2      	ldr	r2, [r4, #12]
 80194aa:	60da      	str	r2, [r3, #12]
 80194ac:	2300      	movs	r3, #0
 80194ae:	60e3      	str	r3, [r4, #12]
 80194b0:	2201      	movs	r2, #1
 80194b2:	4b2d      	ldr	r3, [pc, #180]	; (8019568 <tcp_close_shutdown+0x144>)
 80194b4:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80194b6:	7d23      	ldrb	r3, [r4, #20]
 80194b8:	2b04      	cmp	r3, #4
 80194ba:	d009      	beq.n	80194d0 <tcp_close_shutdown+0xac>
        if (tcp_input_pcb == pcb) {
 80194bc:	4b2b      	ldr	r3, [pc, #172]	; (801956c <tcp_close_shutdown+0x148>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	429c      	cmp	r4, r3
 80194c2:	d00f      	beq.n	80194e4 <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 80194c4:	4621      	mov	r1, r4
 80194c6:	2000      	movs	r0, #0
 80194c8:	f7fe fde6 	bl	8018098 <memp_free>
      return ERR_OK;
 80194cc:	2000      	movs	r0, #0
 80194ce:	e026      	b.n	801951e <tcp_close_shutdown+0xfa>
        pcb->state = TIME_WAIT;
 80194d0:	230a      	movs	r3, #10
 80194d2:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80194d4:	4b26      	ldr	r3, [pc, #152]	; (8019570 <tcp_close_shutdown+0x14c>)
 80194d6:	681a      	ldr	r2, [r3, #0]
 80194d8:	60e2      	str	r2, [r4, #12]
 80194da:	601c      	str	r4, [r3, #0]
 80194dc:	f002 ff88 	bl	801c3f0 <tcp_timer_needed>
      return ERR_OK;
 80194e0:	2000      	movs	r0, #0
 80194e2:	e01c      	b.n	801951e <tcp_close_shutdown+0xfa>
          tcp_trigger_input_pcb_close();
 80194e4:	f001 fecc 	bl	801b280 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 80194e8:	2000      	movs	r0, #0
 80194ea:	e018      	b.n	801951e <tcp_close_shutdown+0xfa>
    if (pcb->local_port != 0) {
 80194ec:	8ae3      	ldrh	r3, [r4, #22]
 80194ee:	b18b      	cbz	r3, 8019514 <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80194f0:	4b20      	ldr	r3, [pc, #128]	; (8019574 <tcp_close_shutdown+0x150>)
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	429c      	cmp	r4, r3
 80194f6:	d005      	beq.n	8019504 <tcp_close_shutdown+0xe0>
 80194f8:	b153      	cbz	r3, 8019510 <tcp_close_shutdown+0xec>
 80194fa:	68da      	ldr	r2, [r3, #12]
 80194fc:	4294      	cmp	r4, r2
 80194fe:	d005      	beq.n	801950c <tcp_close_shutdown+0xe8>
 8019500:	4613      	mov	r3, r2
 8019502:	e7f9      	b.n	80194f8 <tcp_close_shutdown+0xd4>
 8019504:	68da      	ldr	r2, [r3, #12]
 8019506:	4b1b      	ldr	r3, [pc, #108]	; (8019574 <tcp_close_shutdown+0x150>)
 8019508:	601a      	str	r2, [r3, #0]
 801950a:	e001      	b.n	8019510 <tcp_close_shutdown+0xec>
 801950c:	68e2      	ldr	r2, [r4, #12]
 801950e:	60da      	str	r2, [r3, #12]
 8019510:	2300      	movs	r3, #0
 8019512:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 8019514:	4621      	mov	r1, r4
 8019516:	2000      	movs	r0, #0
 8019518:	f7fe fdbe 	bl	8018098 <memp_free>
  return ERR_OK;
 801951c:	2000      	movs	r0, #0
}
 801951e:	b002      	add	sp, #8
 8019520:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 8019522:	4620      	mov	r0, r4
 8019524:	f7ff facc 	bl	8018ac0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019528:	4621      	mov	r1, r4
 801952a:	4813      	ldr	r0, [pc, #76]	; (8019578 <tcp_close_shutdown+0x154>)
 801952c:	f7ff ff28 	bl	8019380 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8019530:	4621      	mov	r1, r4
 8019532:	2001      	movs	r0, #1
 8019534:	f7fe fdb0 	bl	8018098 <memp_free>
  return ERR_OK;
 8019538:	2000      	movs	r0, #0
    break;
 801953a:	e7f0      	b.n	801951e <tcp_close_shutdown+0xfa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 801953c:	4621      	mov	r1, r4
 801953e:	4806      	ldr	r0, [pc, #24]	; (8019558 <tcp_close_shutdown+0x134>)
 8019540:	f7ff ff1e 	bl	8019380 <tcp_pcb_remove>
 8019544:	2201      	movs	r2, #1
 8019546:	4b08      	ldr	r3, [pc, #32]	; (8019568 <tcp_close_shutdown+0x144>)
 8019548:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 801954a:	4621      	mov	r1, r4
 801954c:	2000      	movs	r0, #0
 801954e:	f7fe fda3 	bl	8018098 <memp_free>
  return ERR_OK;
 8019552:	2000      	movs	r0, #0
    break;
 8019554:	e7e3      	b.n	801951e <tcp_close_shutdown+0xfa>
 8019556:	bf00      	nop
 8019558:	2000ecb8 	.word	0x2000ecb8
 801955c:	08023d50 	.word	0x08023d50
 8019560:	08023cfc 	.word	0x08023cfc
 8019564:	0801fe1c 	.word	0x0801fe1c
 8019568:	2000ecb4 	.word	0x2000ecb4
 801956c:	2000eccc 	.word	0x2000eccc
 8019570:	2000ecc8 	.word	0x2000ecc8
 8019574:	2000ecc4 	.word	0x2000ecc4
 8019578:	2000ecc0 	.word	0x2000ecc0

0801957c <tcp_close>:
{
 801957c:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 801957e:	7d03      	ldrb	r3, [r0, #20]
 8019580:	2b01      	cmp	r3, #1
 8019582:	d003      	beq.n	801958c <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 8019584:	7e83      	ldrb	r3, [r0, #26]
 8019586:	f043 0310 	orr.w	r3, r3, #16
 801958a:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801958c:	2101      	movs	r1, #1
 801958e:	f7ff ff49 	bl	8019424 <tcp_close_shutdown>
}
 8019592:	bd08      	pop	{r3, pc}

08019594 <tcp_recv_null>:
{
 8019594:	b510      	push	{r4, lr}
 8019596:	4608      	mov	r0, r1
  if (p != NULL) {
 8019598:	b142      	cbz	r2, 80195ac <tcp_recv_null+0x18>
 801959a:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 801959c:	8911      	ldrh	r1, [r2, #8]
 801959e:	f7ff fbed 	bl	8018d7c <tcp_recved>
    pbuf_free(p);
 80195a2:	4620      	mov	r0, r4
 80195a4:	f7fe ff48 	bl	8018438 <pbuf_free>
  return ERR_OK;
 80195a8:	2000      	movs	r0, #0
 80195aa:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80195ac:	b10b      	cbz	r3, 80195b2 <tcp_recv_null+0x1e>
  return ERR_OK;
 80195ae:	2000      	movs	r0, #0
}
 80195b0:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 80195b2:	f7ff ffe3 	bl	801957c <tcp_close>
 80195b6:	bd10      	pop	{r4, pc}

080195b8 <tcp_process_refused_data>:
{
 80195b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195ba:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80195bc:	6f46      	ldr	r6, [r0, #116]	; 0x74
 80195be:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80195c0:	2300      	movs	r3, #0
 80195c2:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80195c4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80195c8:	b1dd      	cbz	r5, 8019602 <tcp_process_refused_data+0x4a>
 80195ca:	4632      	mov	r2, r6
 80195cc:	4601      	mov	r1, r0
 80195ce:	6900      	ldr	r0, [r0, #16]
 80195d0:	47a8      	blx	r5
 80195d2:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80195d4:	b9fd      	cbnz	r5, 8019616 <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80195d6:	f017 0f20 	tst.w	r7, #32
 80195da:	d022      	beq.n	8019622 <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80195dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80195de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80195e2:	d001      	beq.n	80195e8 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 80195e4:	3301      	adds	r3, #1
 80195e6:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80195e8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80195ec:	b18e      	cbz	r6, 8019612 <tcp_process_refused_data+0x5a>
 80195ee:	2300      	movs	r3, #0
 80195f0:	461a      	mov	r2, r3
 80195f2:	4621      	mov	r1, r4
 80195f4:	6920      	ldr	r0, [r4, #16]
 80195f6:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80195f8:	f110 0f0d 	cmn.w	r0, #13
 80195fc:	d111      	bne.n	8019622 <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 80195fe:	4605      	mov	r5, r0
 8019600:	e00f      	b.n	8019622 <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8019602:	2300      	movs	r3, #0
 8019604:	4632      	mov	r2, r6
 8019606:	4601      	mov	r1, r0
 8019608:	4618      	mov	r0, r3
 801960a:	f7ff ffc3 	bl	8019594 <tcp_recv_null>
 801960e:	4605      	mov	r5, r0
 8019610:	e7e0      	b.n	80195d4 <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 8019612:	4628      	mov	r0, r5
 8019614:	e7f0      	b.n	80195f8 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 8019616:	f115 0f0d 	cmn.w	r5, #13
 801961a:	d002      	beq.n	8019622 <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 801961c:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 801961e:	f06f 0504 	mvn.w	r5, #4
}
 8019622:	4628      	mov	r0, r5
 8019624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019628 <tcp_fasttmr>:
{
 8019628:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 801962a:	4a1c      	ldr	r2, [pc, #112]	; (801969c <tcp_fasttmr+0x74>)
 801962c:	7813      	ldrb	r3, [r2, #0]
 801962e:	3301      	adds	r3, #1
 8019630:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8019632:	4b1b      	ldr	r3, [pc, #108]	; (80196a0 <tcp_fasttmr+0x78>)
 8019634:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8019636:	e013      	b.n	8019660 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8019638:	f043 0302 	orr.w	r3, r3, #2
 801963c:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 801963e:	4620      	mov	r0, r4
 8019640:	f002 fb6e 	bl	801bd20 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8019644:	7ea3      	ldrb	r3, [r4, #26]
 8019646:	f023 0303 	bic.w	r3, r3, #3
 801964a:	76a3      	strb	r3, [r4, #26]
 801964c:	e013      	b.n	8019676 <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 801964e:	f023 0308 	bic.w	r3, r3, #8
 8019652:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8019654:	4620      	mov	r0, r4
 8019656:	f7ff fa5d 	bl	8018b14 <tcp_close_shutdown_fin>
 801965a:	e010      	b.n	801967e <tcp_fasttmr+0x56>
      pcb = pcb->next;
 801965c:	68e5      	ldr	r5, [r4, #12]
{
 801965e:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8019660:	b1dc      	cbz	r4, 801969a <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 8019662:	7f62      	ldrb	r2, [r4, #29]
 8019664:	4b0d      	ldr	r3, [pc, #52]	; (801969c <tcp_fasttmr+0x74>)
 8019666:	781b      	ldrb	r3, [r3, #0]
 8019668:	429a      	cmp	r2, r3
 801966a:	d0f7      	beq.n	801965c <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 801966c:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 801966e:	7ea3      	ldrb	r3, [r4, #26]
 8019670:	f013 0f01 	tst.w	r3, #1
 8019674:	d1e0      	bne.n	8019638 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8019676:	7ea3      	ldrb	r3, [r4, #26]
 8019678:	f013 0f08 	tst.w	r3, #8
 801967c:	d1e7      	bne.n	801964e <tcp_fasttmr+0x26>
      next = pcb->next;
 801967e:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8019680:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8019682:	2b00      	cmp	r3, #0
 8019684:	d0eb      	beq.n	801965e <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 8019686:	4e07      	ldr	r6, [pc, #28]	; (80196a4 <tcp_fasttmr+0x7c>)
 8019688:	2300      	movs	r3, #0
 801968a:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 801968c:	4620      	mov	r0, r4
 801968e:	f7ff ff93 	bl	80195b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8019692:	7833      	ldrb	r3, [r6, #0]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d0e2      	beq.n	801965e <tcp_fasttmr+0x36>
 8019698:	e7cb      	b.n	8019632 <tcp_fasttmr+0xa>
}
 801969a:	bd70      	pop	{r4, r5, r6, pc}
 801969c:	200094d6 	.word	0x200094d6
 80196a0:	2000ecb8 	.word	0x2000ecb8
 80196a4:	2000ecb4 	.word	0x2000ecb4

080196a8 <tcp_tmr>:
{
 80196a8:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80196aa:	f7ff ffbd 	bl	8019628 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80196ae:	4a06      	ldr	r2, [pc, #24]	; (80196c8 <tcp_tmr+0x20>)
 80196b0:	7813      	ldrb	r3, [r2, #0]
 80196b2:	3301      	adds	r3, #1
 80196b4:	b2db      	uxtb	r3, r3
 80196b6:	7013      	strb	r3, [r2, #0]
 80196b8:	f013 0f01 	tst.w	r3, #1
 80196bc:	d100      	bne.n	80196c0 <tcp_tmr+0x18>
 80196be:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80196c0:	f7ff fc5c 	bl	8018f7c <tcp_slowtmr>
}
 80196c4:	e7fb      	b.n	80196be <tcp_tmr+0x16>
 80196c6:	bf00      	nop
 80196c8:	200094d5 	.word	0x200094d5

080196cc <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 80196cc:	7d03      	ldrb	r3, [r0, #20]
 80196ce:	2b01      	cmp	r3, #1
 80196d0:	d020      	beq.n	8019714 <tcp_shutdown+0x48>
{
 80196d2:	b570      	push	{r4, r5, r6, lr}
 80196d4:	4616      	mov	r6, r2
 80196d6:	460d      	mov	r5, r1
 80196d8:	4604      	mov	r4, r0
  if (shut_rx) {
 80196da:	b151      	cbz	r1, 80196f2 <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 80196dc:	7e83      	ldrb	r3, [r0, #26]
 80196de:	f043 0310 	orr.w	r3, r3, #16
 80196e2:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 80196e4:	b992      	cbnz	r2, 801970c <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 80196e6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80196e8:	b118      	cbz	r0, 80196f2 <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 80196ea:	f7fe fea5 	bl	8018438 <pbuf_free>
      pcb->refused_data = NULL;
 80196ee:	2300      	movs	r3, #0
 80196f0:	6763      	str	r3, [r4, #116]	; 0x74
  if (shut_tx) {
 80196f2:	b196      	cbz	r6, 801971a <tcp_shutdown+0x4e>
    switch (pcb->state) {
 80196f4:	7d23      	ldrb	r3, [r4, #20]
 80196f6:	2b03      	cmp	r3, #3
 80196f8:	d311      	bcc.n	801971e <tcp_shutdown+0x52>
 80196fa:	2b04      	cmp	r3, #4
 80196fc:	d901      	bls.n	8019702 <tcp_shutdown+0x36>
 80196fe:	2b07      	cmp	r3, #7
 8019700:	d10d      	bne.n	801971e <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8019702:	b2e9      	uxtb	r1, r5
 8019704:	4620      	mov	r0, r4
 8019706:	f7ff fe8d 	bl	8019424 <tcp_close_shutdown>
 801970a:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 801970c:	2101      	movs	r1, #1
 801970e:	f7ff fe89 	bl	8019424 <tcp_close_shutdown>
 8019712:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 8019714:	f06f 000a 	mvn.w	r0, #10
 8019718:	4770      	bx	lr
  return ERR_OK;
 801971a:	2000      	movs	r0, #0
 801971c:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_CONN;
 801971e:	f06f 000a 	mvn.w	r0, #10
}
 8019722:	bd70      	pop	{r4, r5, r6, pc}

08019724 <tcp_abandon>:
{
 8019724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019728:	b082      	sub	sp, #8
 801972a:	4604      	mov	r4, r0
 801972c:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801972e:	7d03      	ldrb	r3, [r0, #20]
 8019730:	2b01      	cmp	r3, #1
 8019732:	d01a      	beq.n	801976a <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 8019734:	7d23      	ldrb	r3, [r4, #20]
 8019736:	2b0a      	cmp	r3, #10
 8019738:	d01f      	beq.n	801977a <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 801973a:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 801973e:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8019742:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8019746:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8019748:	2b00      	cmp	r3, #0
 801974a:	d141      	bne.n	80197d0 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 801974c:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8019750:	f1ba 0f00 	cmp.w	sl, #0
 8019754:	d046      	beq.n	80197e4 <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019756:	4b2a      	ldr	r3, [pc, #168]	; (8019800 <tcp_abandon+0xdc>)
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	429c      	cmp	r4, r3
 801975c:	d016      	beq.n	801978c <tcp_abandon+0x68>
 801975e:	b1db      	cbz	r3, 8019798 <tcp_abandon+0x74>
 8019760:	68da      	ldr	r2, [r3, #12]
 8019762:	4294      	cmp	r4, r2
 8019764:	d016      	beq.n	8019794 <tcp_abandon+0x70>
 8019766:	4613      	mov	r3, r2
 8019768:	e7f9      	b.n	801975e <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801976a:	4b26      	ldr	r3, [pc, #152]	; (8019804 <tcp_abandon+0xe0>)
 801976c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019770:	4925      	ldr	r1, [pc, #148]	; (8019808 <tcp_abandon+0xe4>)
 8019772:	4826      	ldr	r0, [pc, #152]	; (801980c <tcp_abandon+0xe8>)
 8019774:	f005 fd83 	bl	801f27e <iprintf>
 8019778:	e7dc      	b.n	8019734 <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801977a:	4621      	mov	r1, r4
 801977c:	4824      	ldr	r0, [pc, #144]	; (8019810 <tcp_abandon+0xec>)
 801977e:	f7ff fdff 	bl	8019380 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8019782:	4621      	mov	r1, r4
 8019784:	2000      	movs	r0, #0
 8019786:	f7fe fc87 	bl	8018098 <memp_free>
 801978a:	e01e      	b.n	80197ca <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801978c:	68da      	ldr	r2, [r3, #12]
 801978e:	4b1c      	ldr	r3, [pc, #112]	; (8019800 <tcp_abandon+0xdc>)
 8019790:	601a      	str	r2, [r3, #0]
 8019792:	e001      	b.n	8019798 <tcp_abandon+0x74>
 8019794:	68e2      	ldr	r2, [r4, #12]
 8019796:	60da      	str	r2, [r3, #12]
 8019798:	2500      	movs	r5, #0
 801979a:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 801979c:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 801979e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80197a0:	b108      	cbz	r0, 80197a6 <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 80197a2:	f7ff fb3a 	bl	8018e1a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80197a6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80197a8:	b108      	cbz	r0, 80197ae <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 80197aa:	f7ff fb36 	bl	8018e1a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80197ae:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80197b0:	b108      	cbz	r0, 80197b6 <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 80197b2:	f7ff fb32 	bl	8018e1a <tcp_segs_free>
    if (send_rst) {
 80197b6:	b9bd      	cbnz	r5, 80197e8 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 80197b8:	4621      	mov	r1, r4
 80197ba:	2000      	movs	r0, #0
 80197bc:	f7fe fc6c 	bl	8018098 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80197c0:	b11e      	cbz	r6, 80197ca <tcp_abandon+0xa6>
 80197c2:	f06f 010c 	mvn.w	r1, #12
 80197c6:	4638      	mov	r0, r7
 80197c8:	47b0      	blx	r6
}
 80197ca:	b002      	add	sp, #8
 80197cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 80197d0:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80197d4:	4621      	mov	r1, r4
 80197d6:	480f      	ldr	r0, [pc, #60]	; (8019814 <tcp_abandon+0xf0>)
 80197d8:	f7ff fdd2 	bl	8019380 <tcp_pcb_remove>
 80197dc:	2201      	movs	r2, #1
 80197de:	4b0e      	ldr	r3, [pc, #56]	; (8019818 <tcp_abandon+0xf4>)
 80197e0:	701a      	strb	r2, [r3, #0]
 80197e2:	e7dc      	b.n	801979e <tcp_abandon+0x7a>
    int send_rst = 0;
 80197e4:	2500      	movs	r5, #0
 80197e6:	e7da      	b.n	801979e <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80197e8:	8b23      	ldrh	r3, [r4, #24]
 80197ea:	9301      	str	r3, [sp, #4]
 80197ec:	f8cd a000 	str.w	sl, [sp]
 80197f0:	1d23      	adds	r3, r4, #4
 80197f2:	4622      	mov	r2, r4
 80197f4:	4649      	mov	r1, r9
 80197f6:	4640      	mov	r0, r8
 80197f8:	f002 fbee 	bl	801bfd8 <tcp_rst>
 80197fc:	e7dc      	b.n	80197b8 <tcp_abandon+0x94>
 80197fe:	bf00      	nop
 8019800:	2000ecc4 	.word	0x2000ecc4
 8019804:	08023d50 	.word	0x08023d50
 8019808:	08023c90 	.word	0x08023c90
 801980c:	0801fe1c 	.word	0x0801fe1c
 8019810:	2000ecc8 	.word	0x2000ecc8
 8019814:	2000ecb8 	.word	0x2000ecb8
 8019818:	2000ecb4 	.word	0x2000ecb4

0801981c <tcp_abort>:
{
 801981c:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 801981e:	2101      	movs	r1, #1
 8019820:	f7ff ff80 	bl	8019724 <tcp_abandon>
 8019824:	bd08      	pop	{r3, pc}

08019826 <tcp_accept_null>:
{
 8019826:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 8019828:	4608      	mov	r0, r1
 801982a:	f7ff fff7 	bl	801981c <tcp_abort>
}
 801982e:	f06f 000c 	mvn.w	r0, #12
 8019832:	bd08      	pop	{r3, pc}

08019834 <tcp_kill_timewait>:
{
 8019834:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019836:	4b0a      	ldr	r3, [pc, #40]	; (8019860 <tcp_kill_timewait+0x2c>)
 8019838:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 801983a:	2400      	movs	r4, #0
  inactive = NULL;
 801983c:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801983e:	e000      	b.n	8019842 <tcp_kill_timewait+0xe>
 8019840:	68db      	ldr	r3, [r3, #12]
 8019842:	b143      	cbz	r3, 8019856 <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019844:	6a19      	ldr	r1, [r3, #32]
 8019846:	4a07      	ldr	r2, [pc, #28]	; (8019864 <tcp_kill_timewait+0x30>)
 8019848:	6812      	ldr	r2, [r2, #0]
 801984a:	1a52      	subs	r2, r2, r1
 801984c:	4294      	cmp	r4, r2
 801984e:	d8f7      	bhi.n	8019840 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8019850:	4614      	mov	r4, r2
      inactive = pcb;
 8019852:	4618      	mov	r0, r3
 8019854:	e7f4      	b.n	8019840 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 8019856:	b108      	cbz	r0, 801985c <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8019858:	f7ff ffe0 	bl	801981c <tcp_abort>
 801985c:	bd10      	pop	{r4, pc}
 801985e:	bf00      	nop
 8019860:	2000ecc8 	.word	0x2000ecc8
 8019864:	2000ecbc 	.word	0x2000ecbc

08019868 <tcp_kill_prio>:
{
 8019868:	b570      	push	{r4, r5, r6, lr}
 801986a:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801986c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8019870:	d000      	beq.n	8019874 <tcp_kill_prio+0xc>
 8019872:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019874:	4b0b      	ldr	r3, [pc, #44]	; (80198a4 <tcp_kill_prio+0x3c>)
 8019876:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8019878:	2400      	movs	r4, #0
  inactive = NULL;
 801987a:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801987c:	b91b      	cbnz	r3, 8019886 <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 801987e:	b108      	cbz	r0, 8019884 <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 8019880:	f7ff ffcc 	bl	801981c <tcp_abort>
 8019884:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 8019886:	7d5d      	ldrb	r5, [r3, #21]
 8019888:	42aa      	cmp	r2, r5
 801988a:	d308      	bcc.n	801989e <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801988c:	6a1e      	ldr	r6, [r3, #32]
 801988e:	4906      	ldr	r1, [pc, #24]	; (80198a8 <tcp_kill_prio+0x40>)
 8019890:	6809      	ldr	r1, [r1, #0]
 8019892:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 8019894:	428c      	cmp	r4, r1
 8019896:	d802      	bhi.n	801989e <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 8019898:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 801989a:	460c      	mov	r4, r1
      inactive = pcb;
 801989c:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801989e:	68db      	ldr	r3, [r3, #12]
 80198a0:	e7ec      	b.n	801987c <tcp_kill_prio+0x14>
 80198a2:	bf00      	nop
 80198a4:	2000ecb8 	.word	0x2000ecb8
 80198a8:	2000ecbc 	.word	0x2000ecbc

080198ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80198ac:	b538      	push	{r3, r4, r5, lr}
 80198ae:	4604      	mov	r4, r0
 80198b0:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 80198b2:	e003      	b.n	80198bc <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80198b4:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80198b6:	f7ff ffb1 	bl	801981c <tcp_abort>
      pcb = next;
 80198ba:	4628      	mov	r0, r5
  while (pcb != NULL) {
 80198bc:	b128      	cbz	r0, 80198ca <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80198be:	6802      	ldr	r2, [r0, #0]
 80198c0:	6823      	ldr	r3, [r4, #0]
 80198c2:	429a      	cmp	r2, r3
 80198c4:	d0f6      	beq.n	80198b4 <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 80198c6:	68c0      	ldr	r0, [r0, #12]
 80198c8:	e7f8      	b.n	80198bc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80198ca:	bd38      	pop	{r3, r4, r5, pc}

080198cc <tcp_kill_state>:
{
 80198cc:	b538      	push	{r3, r4, r5, lr}
 80198ce:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80198d0:	f1a0 0308 	sub.w	r3, r0, #8
 80198d4:	b2db      	uxtb	r3, r3
 80198d6:	2b01      	cmp	r3, #1
 80198d8:	d906      	bls.n	80198e8 <tcp_kill_state+0x1c>
 80198da:	4b0f      	ldr	r3, [pc, #60]	; (8019918 <tcp_kill_state+0x4c>)
 80198dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80198e0:	490e      	ldr	r1, [pc, #56]	; (801991c <tcp_kill_state+0x50>)
 80198e2:	480f      	ldr	r0, [pc, #60]	; (8019920 <tcp_kill_state+0x54>)
 80198e4:	f005 fccb 	bl	801f27e <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80198e8:	4b0e      	ldr	r3, [pc, #56]	; (8019924 <tcp_kill_state+0x58>)
 80198ea:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80198ec:	2100      	movs	r1, #0
  inactive = NULL;
 80198ee:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80198f0:	e000      	b.n	80198f4 <tcp_kill_state+0x28>
 80198f2:	68db      	ldr	r3, [r3, #12]
 80198f4:	b15b      	cbz	r3, 801990e <tcp_kill_state+0x42>
    if (pcb->state == state) {
 80198f6:	7d1a      	ldrb	r2, [r3, #20]
 80198f8:	4294      	cmp	r4, r2
 80198fa:	d1fa      	bne.n	80198f2 <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80198fc:	6a1d      	ldr	r5, [r3, #32]
 80198fe:	4a0a      	ldr	r2, [pc, #40]	; (8019928 <tcp_kill_state+0x5c>)
 8019900:	6812      	ldr	r2, [r2, #0]
 8019902:	1b52      	subs	r2, r2, r5
 8019904:	4291      	cmp	r1, r2
 8019906:	d8f4      	bhi.n	80198f2 <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 8019908:	4611      	mov	r1, r2
        inactive = pcb;
 801990a:	4618      	mov	r0, r3
 801990c:	e7f1      	b.n	80198f2 <tcp_kill_state+0x26>
  if (inactive != NULL) {
 801990e:	b110      	cbz	r0, 8019916 <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 8019910:	2100      	movs	r1, #0
 8019912:	f7ff ff07 	bl	8019724 <tcp_abandon>
 8019916:	bd38      	pop	{r3, r4, r5, pc}
 8019918:	08023d50 	.word	0x08023d50
 801991c:	08023d40 	.word	0x08023d40
 8019920:	0801fe1c 	.word	0x0801fe1c
 8019924:	2000ecb8 	.word	0x2000ecb8
 8019928:	2000ecbc 	.word	0x2000ecbc

0801992c <tcp_alloc>:
{
 801992c:	b538      	push	{r3, r4, r5, lr}
 801992e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019930:	2000      	movs	r0, #0
 8019932:	f7fe fb97 	bl	8018064 <memp_malloc>
  if (pcb == NULL) {
 8019936:	4604      	mov	r4, r0
 8019938:	b368      	cbz	r0, 8019996 <tcp_alloc+0x6a>
  if (pcb != NULL) {
 801993a:	b354      	cbz	r4, 8019992 <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801993c:	2298      	movs	r2, #152	; 0x98
 801993e:	2100      	movs	r1, #0
 8019940:	4620      	mov	r0, r4
 8019942:	f006 f895 	bl	801fa70 <memset>
    pcb->prio = prio;
 8019946:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8019948:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 801994c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019954:	8562      	strh	r2, [r4, #42]	; 0x2a
 8019956:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8019958:	22ff      	movs	r2, #255	; 0xff
 801995a:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 801995c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019960:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8019962:	2206      	movs	r2, #6
 8019964:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8019968:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 801996a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801996e:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8019970:	2201      	movs	r2, #1
 8019972:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8019976:	4a19      	ldr	r2, [pc, #100]	; (80199dc <tcp_alloc+0xb0>)
 8019978:	6812      	ldr	r2, [r2, #0]
 801997a:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 801997c:	4a18      	ldr	r2, [pc, #96]	; (80199e0 <tcp_alloc+0xb4>)
 801997e:	7812      	ldrb	r2, [r2, #0]
 8019980:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 8019982:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8019986:	4b17      	ldr	r3, [pc, #92]	; (80199e4 <tcp_alloc+0xb8>)
 8019988:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801998c:	4b16      	ldr	r3, [pc, #88]	; (80199e8 <tcp_alloc+0xbc>)
 801998e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8019992:	4620      	mov	r0, r4
 8019994:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 8019996:	f7ff ff4d 	bl	8019834 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801999a:	2000      	movs	r0, #0
 801999c:	f7fe fb62 	bl	8018064 <memp_malloc>
    if (pcb == NULL) {
 80199a0:	4604      	mov	r4, r0
 80199a2:	2800      	cmp	r0, #0
 80199a4:	d1c9      	bne.n	801993a <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 80199a6:	2009      	movs	r0, #9
 80199a8:	f7ff ff90 	bl	80198cc <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80199ac:	2000      	movs	r0, #0
 80199ae:	f7fe fb59 	bl	8018064 <memp_malloc>
      if (pcb == NULL) {
 80199b2:	4604      	mov	r4, r0
 80199b4:	2800      	cmp	r0, #0
 80199b6:	d1c0      	bne.n	801993a <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 80199b8:	2008      	movs	r0, #8
 80199ba:	f7ff ff87 	bl	80198cc <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80199be:	2000      	movs	r0, #0
 80199c0:	f7fe fb50 	bl	8018064 <memp_malloc>
        if (pcb == NULL) {
 80199c4:	4604      	mov	r4, r0
 80199c6:	2800      	cmp	r0, #0
 80199c8:	d1b7      	bne.n	801993a <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 80199ca:	4628      	mov	r0, r5
 80199cc:	f7ff ff4c 	bl	8019868 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80199d0:	2000      	movs	r0, #0
 80199d2:	f7fe fb47 	bl	8018064 <memp_malloc>
 80199d6:	4604      	mov	r4, r0
 80199d8:	e7af      	b.n	801993a <tcp_alloc+0xe>
 80199da:	bf00      	nop
 80199dc:	2000ecbc 	.word	0x2000ecbc
 80199e0:	200094d6 	.word	0x200094d6
 80199e4:	08019595 	.word	0x08019595
 80199e8:	006ddd00 	.word	0x006ddd00

080199ec <tcp_new_ip_type>:
{
 80199ec:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80199ee:	2040      	movs	r0, #64	; 0x40
 80199f0:	f7ff ff9c 	bl	801992c <tcp_alloc>
}
 80199f4:	bd08      	pop	{r3, pc}
	...

080199f8 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 80199f8:	4b03      	ldr	r3, [pc, #12]	; (8019a08 <tcp_next_iss+0x10>)
 80199fa:	6818      	ldr	r0, [r3, #0]
 80199fc:	4a03      	ldr	r2, [pc, #12]	; (8019a0c <tcp_next_iss+0x14>)
 80199fe:	6812      	ldr	r2, [r2, #0]
 8019a00:	4410      	add	r0, r2
 8019a02:	6018      	str	r0, [r3, #0]
}
 8019a04:	4770      	bx	lr
 8019a06:	bf00      	nop
 8019a08:	20000008 	.word	0x20000008
 8019a0c:	2000ecbc 	.word	0x2000ecbc

08019a10 <tcp_eff_send_mss_impl>:
{
 8019a10:	b510      	push	{r4, lr}
 8019a12:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8019a14:	4608      	mov	r0, r1
 8019a16:	f7fd f993 	bl	8016d40 <ip4_route>
    if (outif == NULL) {
 8019a1a:	b138      	cbz	r0, 8019a2c <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 8019a1c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8019a1e:	b13b      	cbz	r3, 8019a30 <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8019a20:	3b28      	subs	r3, #40	; 0x28
 8019a22:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8019a24:	42a0      	cmp	r0, r4
 8019a26:	bf28      	it	cs
 8019a28:	4620      	movcs	r0, r4
 8019a2a:	bd10      	pop	{r4, pc}
      return sendmss;
 8019a2c:	4620      	mov	r0, r4
 8019a2e:	bd10      	pop	{r4, pc}
 8019a30:	4620      	mov	r0, r4
}
 8019a32:	bd10      	pop	{r4, pc}

08019a34 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8019a34:	b308      	cbz	r0, 8019a7a <tcp_netif_ip_addr_changed+0x46>
{
 8019a36:	b570      	push	{r4, r5, r6, lr}
 8019a38:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8019a3a:	6803      	ldr	r3, [r0, #0]
 8019a3c:	b903      	cbnz	r3, 8019a40 <tcp_netif_ip_addr_changed+0xc>
 8019a3e:	bd70      	pop	{r4, r5, r6, pc}
 8019a40:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8019a42:	4b0e      	ldr	r3, [pc, #56]	; (8019a7c <tcp_netif_ip_addr_changed+0x48>)
 8019a44:	6819      	ldr	r1, [r3, #0]
 8019a46:	f7ff ff31 	bl	80198ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8019a4a:	4b0d      	ldr	r3, [pc, #52]	; (8019a80 <tcp_netif_ip_addr_changed+0x4c>)
 8019a4c:	6819      	ldr	r1, [r3, #0]
 8019a4e:	4620      	mov	r0, r4
 8019a50:	f7ff ff2c 	bl	80198ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8019a54:	2e00      	cmp	r6, #0
 8019a56:	d0f2      	beq.n	8019a3e <tcp_netif_ip_addr_changed+0xa>
 8019a58:	6833      	ldr	r3, [r6, #0]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d0ef      	beq.n	8019a3e <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8019a5e:	4b09      	ldr	r3, [pc, #36]	; (8019a84 <tcp_netif_ip_addr_changed+0x50>)
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	e000      	b.n	8019a66 <tcp_netif_ip_addr_changed+0x32>
{
 8019a64:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d0e9      	beq.n	8019a3e <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 8019a6a:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8019a6c:	681d      	ldr	r5, [r3, #0]
 8019a6e:	6820      	ldr	r0, [r4, #0]
 8019a70:	4285      	cmp	r5, r0
 8019a72:	d1f7      	bne.n	8019a64 <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8019a74:	6831      	ldr	r1, [r6, #0]
 8019a76:	6019      	str	r1, [r3, #0]
 8019a78:	e7f4      	b.n	8019a64 <tcp_netif_ip_addr_changed+0x30>
 8019a7a:	4770      	bx	lr
 8019a7c:	2000ecb8 	.word	0x2000ecb8
 8019a80:	2000ecc4 	.word	0x2000ecc4
 8019a84:	2000ecc0 	.word	0x2000ecc0

08019a88 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8019a88:	4b0e      	ldr	r3, [pc, #56]	; (8019ac4 <tcp_getoptbyte+0x3c>)
 8019a8a:	6819      	ldr	r1, [r3, #0]
 8019a8c:	b189      	cbz	r1, 8019ab2 <tcp_getoptbyte+0x2a>
 8019a8e:	4b0e      	ldr	r3, [pc, #56]	; (8019ac8 <tcp_getoptbyte+0x40>)
 8019a90:	881b      	ldrh	r3, [r3, #0]
 8019a92:	4a0e      	ldr	r2, [pc, #56]	; (8019acc <tcp_getoptbyte+0x44>)
 8019a94:	8812      	ldrh	r2, [r2, #0]
 8019a96:	4293      	cmp	r3, r2
 8019a98:	d30b      	bcc.n	8019ab2 <tcp_getoptbyte+0x2a>
{
 8019a9a:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8019a9c:	1c5c      	adds	r4, r3, #1
 8019a9e:	480a      	ldr	r0, [pc, #40]	; (8019ac8 <tcp_getoptbyte+0x40>)
 8019aa0:	8004      	strh	r4, [r0, #0]
 8019aa2:	b2db      	uxtb	r3, r3
 8019aa4:	b2d2      	uxtb	r2, r2
 8019aa6:	1a9b      	subs	r3, r3, r2
 8019aa8:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8019aaa:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8019aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ab0:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8019ab2:	4b07      	ldr	r3, [pc, #28]	; (8019ad0 <tcp_getoptbyte+0x48>)
 8019ab4:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8019ab6:	4904      	ldr	r1, [pc, #16]	; (8019ac8 <tcp_getoptbyte+0x40>)
 8019ab8:	880a      	ldrh	r2, [r1, #0]
 8019aba:	1c50      	adds	r0, r2, #1
 8019abc:	8008      	strh	r0, [r1, #0]
 8019abe:	4413      	add	r3, r2
 8019ac0:	7d18      	ldrb	r0, [r3, #20]
 8019ac2:	4770      	bx	lr
 8019ac4:	2000950c 	.word	0x2000950c
 8019ac8:	20009500 	.word	0x20009500
 8019acc:	20009508 	.word	0x20009508
 8019ad0:	20009504 	.word	0x20009504

08019ad4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019ad4:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019ad6:	4b1f      	ldr	r3, [pc, #124]	; (8019b54 <tcp_parseopt+0x80>)
 8019ad8:	881b      	ldrh	r3, [r3, #0]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d038      	beq.n	8019b50 <tcp_parseopt+0x7c>
 8019ade:	4605      	mov	r5, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019ae0:	2200      	movs	r2, #0
 8019ae2:	4b1d      	ldr	r3, [pc, #116]	; (8019b58 <tcp_parseopt+0x84>)
 8019ae4:	801a      	strh	r2, [r3, #0]
 8019ae6:	4b1c      	ldr	r3, [pc, #112]	; (8019b58 <tcp_parseopt+0x84>)
 8019ae8:	881a      	ldrh	r2, [r3, #0]
 8019aea:	4b1a      	ldr	r3, [pc, #104]	; (8019b54 <tcp_parseopt+0x80>)
 8019aec:	881b      	ldrh	r3, [r3, #0]
 8019aee:	429a      	cmp	r2, r3
 8019af0:	d22e      	bcs.n	8019b50 <tcp_parseopt+0x7c>
      u8_t opt = tcp_getoptbyte();
 8019af2:	f7ff ffc9 	bl	8019a88 <tcp_getoptbyte>
      switch (opt) {
 8019af6:	2801      	cmp	r0, #1
 8019af8:	d0f5      	beq.n	8019ae6 <tcp_parseopt+0x12>
 8019afa:	b348      	cbz	r0, 8019b50 <tcp_parseopt+0x7c>
 8019afc:	2802      	cmp	r0, #2
 8019afe:	d11d      	bne.n	8019b3c <tcp_parseopt+0x68>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019b00:	f7ff ffc2 	bl	8019a88 <tcp_getoptbyte>
 8019b04:	2804      	cmp	r0, #4
 8019b06:	d123      	bne.n	8019b50 <tcp_parseopt+0x7c>
 8019b08:	4b13      	ldr	r3, [pc, #76]	; (8019b58 <tcp_parseopt+0x84>)
 8019b0a:	881b      	ldrh	r3, [r3, #0]
 8019b0c:	3302      	adds	r3, #2
 8019b0e:	4a11      	ldr	r2, [pc, #68]	; (8019b54 <tcp_parseopt+0x80>)
 8019b10:	8812      	ldrh	r2, [r2, #0]
 8019b12:	4293      	cmp	r3, r2
 8019b14:	dc1c      	bgt.n	8019b50 <tcp_parseopt+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8019b16:	f7ff ffb7 	bl	8019a88 <tcp_getoptbyte>
 8019b1a:	b283      	uxth	r3, r0
 8019b1c:	021b      	lsls	r3, r3, #8
 8019b1e:	b29c      	uxth	r4, r3
        mss |= tcp_getoptbyte();
 8019b20:	f7ff ffb2 	bl	8019a88 <tcp_getoptbyte>
 8019b24:	b280      	uxth	r0, r0
 8019b26:	ea44 0300 	orr.w	r3, r4, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019b2a:	1e5a      	subs	r2, r3, #1
 8019b2c:	b292      	uxth	r2, r2
 8019b2e:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 8019b32:	d301      	bcc.n	8019b38 <tcp_parseopt+0x64>
 8019b34:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8019b38:	866b      	strh	r3, [r5, #50]	; 0x32
        break;
 8019b3a:	e7d4      	b.n	8019ae6 <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8019b3c:	f7ff ffa4 	bl	8019a88 <tcp_getoptbyte>
        if (data < 2) {
 8019b40:	2801      	cmp	r0, #1
 8019b42:	d905      	bls.n	8019b50 <tcp_parseopt+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8019b44:	4b04      	ldr	r3, [pc, #16]	; (8019b58 <tcp_parseopt+0x84>)
 8019b46:	881a      	ldrh	r2, [r3, #0]
 8019b48:	4410      	add	r0, r2
 8019b4a:	3802      	subs	r0, #2
 8019b4c:	8018      	strh	r0, [r3, #0]
 8019b4e:	e7ca      	b.n	8019ae6 <tcp_parseopt+0x12>
 8019b50:	bd38      	pop	{r3, r4, r5, pc}
 8019b52:	bf00      	nop
 8019b54:	20009510 	.word	0x20009510
 8019b58:	20009500 	.word	0x20009500

08019b5c <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8019b5c:	4b0e      	ldr	r3, [pc, #56]	; (8019b98 <tcp_input_delayed_close+0x3c>)
 8019b5e:	781b      	ldrb	r3, [r3, #0]
 8019b60:	f013 0f10 	tst.w	r3, #16
 8019b64:	d016      	beq.n	8019b94 <tcp_input_delayed_close+0x38>
{
 8019b66:	b510      	push	{r4, lr}
 8019b68:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 8019b6a:	7e83      	ldrb	r3, [r0, #26]
 8019b6c:	f013 0f10 	tst.w	r3, #16
 8019b70:	d106      	bne.n	8019b80 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019b72:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8019b76:	b11b      	cbz	r3, 8019b80 <tcp_input_delayed_close+0x24>
 8019b78:	f06f 010e 	mvn.w	r1, #14
 8019b7c:	6900      	ldr	r0, [r0, #16]
 8019b7e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019b80:	4621      	mov	r1, r4
 8019b82:	4806      	ldr	r0, [pc, #24]	; (8019b9c <tcp_input_delayed_close+0x40>)
 8019b84:	f7ff fbfc 	bl	8019380 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8019b88:	4621      	mov	r1, r4
 8019b8a:	2000      	movs	r0, #0
 8019b8c:	f7fe fa84 	bl	8018098 <memp_free>
    return 1;
 8019b90:	2001      	movs	r0, #1
 8019b92:	bd10      	pop	{r4, pc}
  return 0;
 8019b94:	2000      	movs	r0, #0
 8019b96:	4770      	bx	lr
 8019b98:	200094f8 	.word	0x200094f8
 8019b9c:	2000ecb8 	.word	0x2000ecb8

08019ba0 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8019ba0:	4b1c      	ldr	r3, [pc, #112]	; (8019c14 <tcp_timewait_input+0x74>)
 8019ba2:	781b      	ldrb	r3, [r3, #0]
 8019ba4:	f013 0f04 	tst.w	r3, #4
 8019ba8:	d132      	bne.n	8019c10 <tcp_timewait_input+0x70>
{
 8019baa:	b510      	push	{r4, lr}
 8019bac:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 8019bae:	f013 0f02 	tst.w	r3, #2
 8019bb2:	d01c      	beq.n	8019bee <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8019bb4:	4b18      	ldr	r3, [pc, #96]	; (8019c18 <tcp_timewait_input+0x78>)
 8019bb6:	6819      	ldr	r1, [r3, #0]
 8019bb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019bba:	1aca      	subs	r2, r1, r3
 8019bbc:	2a00      	cmp	r2, #0
 8019bbe:	db1c      	blt.n	8019bfa <tcp_timewait_input+0x5a>
 8019bc0:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8019bc2:	4413      	add	r3, r2
 8019bc4:	1acb      	subs	r3, r1, r3
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	dc17      	bgt.n	8019bfa <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019bca:	4b14      	ldr	r3, [pc, #80]	; (8019c1c <tcp_timewait_input+0x7c>)
 8019bcc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019bce:	4a14      	ldr	r2, [pc, #80]	; (8019c20 <tcp_timewait_input+0x80>)
 8019bd0:	4814      	ldr	r0, [pc, #80]	; (8019c24 <tcp_timewait_input+0x84>)
 8019bd2:	8800      	ldrh	r0, [r0, #0]
 8019bd4:	881c      	ldrh	r4, [r3, #0]
 8019bd6:	9401      	str	r4, [sp, #4]
 8019bd8:	885b      	ldrh	r3, [r3, #2]
 8019bda:	9300      	str	r3, [sp, #0]
 8019bdc:	4613      	mov	r3, r2
 8019bde:	3204      	adds	r2, #4
 8019be0:	4401      	add	r1, r0
 8019be2:	4811      	ldr	r0, [pc, #68]	; (8019c28 <tcp_timewait_input+0x88>)
 8019be4:	6800      	ldr	r0, [r0, #0]
 8019be6:	f002 f9f7 	bl	801bfd8 <tcp_rst>
}
 8019bea:	b002      	add	sp, #8
 8019bec:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 8019bee:	f013 0f01 	tst.w	r3, #1
 8019bf2:	d002      	beq.n	8019bfa <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 8019bf4:	4b0d      	ldr	r3, [pc, #52]	; (8019c2c <tcp_timewait_input+0x8c>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 8019bfa:	4b0a      	ldr	r3, [pc, #40]	; (8019c24 <tcp_timewait_input+0x84>)
 8019bfc:	881b      	ldrh	r3, [r3, #0]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d0f3      	beq.n	8019bea <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 8019c02:	7e83      	ldrb	r3, [r0, #26]
 8019c04:	f043 0302 	orr.w	r3, r3, #2
 8019c08:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 8019c0a:	f002 f889 	bl	801bd20 <tcp_output>
 8019c0e:	e7ec      	b.n	8019bea <tcp_timewait_input+0x4a>
 8019c10:	4770      	bx	lr
 8019c12:	bf00      	nop
 8019c14:	200094dc 	.word	0x200094dc
 8019c18:	200094fc 	.word	0x200094fc
 8019c1c:	20009504 	.word	0x20009504
 8019c20:	2000a264 	.word	0x2000a264
 8019c24:	20009512 	.word	0x20009512
 8019c28:	200094d8 	.word	0x200094d8
 8019c2c:	2000ecbc 	.word	0x2000ecbc

08019c30 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8019c30:	4b3c      	ldr	r3, [pc, #240]	; (8019d24 <tcp_listen_input+0xf4>)
 8019c32:	781b      	ldrb	r3, [r3, #0]
 8019c34:	f013 0f04 	tst.w	r3, #4
 8019c38:	d173      	bne.n	8019d22 <tcp_listen_input+0xf2>
{
 8019c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c3c:	b083      	sub	sp, #12
 8019c3e:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 8019c40:	f013 0f10 	tst.w	r3, #16
 8019c44:	d104      	bne.n	8019c50 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 8019c46:	f013 0f02 	tst.w	r3, #2
 8019c4a:	d114      	bne.n	8019c76 <tcp_listen_input+0x46>
}
 8019c4c:	b003      	add	sp, #12
 8019c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019c50:	4b35      	ldr	r3, [pc, #212]	; (8019d28 <tcp_listen_input+0xf8>)
 8019c52:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8019c54:	4a35      	ldr	r2, [pc, #212]	; (8019d2c <tcp_listen_input+0xfc>)
 8019c56:	4936      	ldr	r1, [pc, #216]	; (8019d30 <tcp_listen_input+0x100>)
 8019c58:	880c      	ldrh	r4, [r1, #0]
 8019c5a:	4936      	ldr	r1, [pc, #216]	; (8019d34 <tcp_listen_input+0x104>)
 8019c5c:	6809      	ldr	r1, [r1, #0]
 8019c5e:	4836      	ldr	r0, [pc, #216]	; (8019d38 <tcp_listen_input+0x108>)
 8019c60:	6800      	ldr	r0, [r0, #0]
 8019c62:	881d      	ldrh	r5, [r3, #0]
 8019c64:	9501      	str	r5, [sp, #4]
 8019c66:	885b      	ldrh	r3, [r3, #2]
 8019c68:	9300      	str	r3, [sp, #0]
 8019c6a:	4613      	mov	r3, r2
 8019c6c:	3204      	adds	r2, #4
 8019c6e:	4421      	add	r1, r4
 8019c70:	f002 f9b2 	bl	801bfd8 <tcp_rst>
 8019c74:	e7ea      	b.n	8019c4c <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 8019c76:	7d40      	ldrb	r0, [r0, #21]
 8019c78:	f7ff fe58 	bl	801992c <tcp_alloc>
    if (npcb == NULL) {
 8019c7c:	4604      	mov	r4, r0
 8019c7e:	2800      	cmp	r0, #0
 8019c80:	d041      	beq.n	8019d06 <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8019c82:	4b2e      	ldr	r3, [pc, #184]	; (8019d3c <tcp_listen_input+0x10c>)
 8019c84:	695a      	ldr	r2, [r3, #20]
 8019c86:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8019c88:	691b      	ldr	r3, [r3, #16]
 8019c8a:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8019c8c:	8aeb      	ldrh	r3, [r5, #22]
 8019c8e:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8019c90:	4e25      	ldr	r6, [pc, #148]	; (8019d28 <tcp_listen_input+0xf8>)
 8019c92:	6833      	ldr	r3, [r6, #0]
 8019c94:	881b      	ldrh	r3, [r3, #0]
 8019c96:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8019c98:	2303      	movs	r3, #3
 8019c9a:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8019c9c:	4f25      	ldr	r7, [pc, #148]	; (8019d34 <tcp_listen_input+0x104>)
 8019c9e:	683b      	ldr	r3, [r7, #0]
 8019ca0:	3301      	adds	r3, #1
 8019ca2:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8019ca4:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8019ca6:	f7ff fea7 	bl	80199f8 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8019caa:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 8019cac:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8019cae:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8019cb0:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019cb2:	683b      	ldr	r3, [r7, #0]
 8019cb4:	3b01      	subs	r3, #1
 8019cb6:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8019cb8:	692b      	ldr	r3, [r5, #16]
 8019cba:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8019cbc:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019cbe:	7a2b      	ldrb	r3, [r5, #8]
 8019cc0:	f003 030c 	and.w	r3, r3, #12
 8019cc4:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8019cc6:	4b1e      	ldr	r3, [pc, #120]	; (8019d40 <tcp_listen_input+0x110>)
 8019cc8:	681a      	ldr	r2, [r3, #0]
 8019cca:	60e2      	str	r2, [r4, #12]
 8019ccc:	601c      	str	r4, [r3, #0]
 8019cce:	f002 fb8f 	bl	801c3f0 <tcp_timer_needed>
 8019cd2:	2201      	movs	r2, #1
 8019cd4:	4b1b      	ldr	r3, [pc, #108]	; (8019d44 <tcp_listen_input+0x114>)
 8019cd6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019cd8:	4620      	mov	r0, r4
 8019cda:	f7ff fefb 	bl	8019ad4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019cde:	6833      	ldr	r3, [r6, #0]
 8019ce0:	89db      	ldrh	r3, [r3, #14]
 8019ce2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019ce6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019cea:	1d21      	adds	r1, r4, #4
 8019cec:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8019cee:	f7ff fe8f 	bl	8019a10 <tcp_eff_send_mss_impl>
 8019cf2:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019cf4:	2112      	movs	r1, #18
 8019cf6:	4620      	mov	r0, r4
 8019cf8:	f001 ff02 	bl	801bb00 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8019cfc:	b960      	cbnz	r0, 8019d18 <tcp_listen_input+0xe8>
    tcp_output(npcb);
 8019cfe:	4620      	mov	r0, r4
 8019d00:	f002 f80e 	bl	801bd20 <tcp_output>
 8019d04:	e7a2      	b.n	8019c4c <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019d06:	69ab      	ldr	r3, [r5, #24]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d09f      	beq.n	8019c4c <tcp_listen_input+0x1c>
 8019d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8019d10:	2100      	movs	r1, #0
 8019d12:	6928      	ldr	r0, [r5, #16]
 8019d14:	4798      	blx	r3
 8019d16:	e799      	b.n	8019c4c <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 8019d18:	2100      	movs	r1, #0
 8019d1a:	4620      	mov	r0, r4
 8019d1c:	f7ff fd02 	bl	8019724 <tcp_abandon>
      return;
 8019d20:	e794      	b.n	8019c4c <tcp_listen_input+0x1c>
 8019d22:	4770      	bx	lr
 8019d24:	200094dc 	.word	0x200094dc
 8019d28:	20009504 	.word	0x20009504
 8019d2c:	2000a264 	.word	0x2000a264
 8019d30:	20009512 	.word	0x20009512
 8019d34:	200094fc 	.word	0x200094fc
 8019d38:	200094d8 	.word	0x200094d8
 8019d3c:	2000a254 	.word	0x2000a254
 8019d40:	2000ecb8 	.word	0x2000ecb8
 8019d44:	2000ecb4 	.word	0x2000ecb4

08019d48 <tcp_oos_insert_segment>:
{
 8019d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d4a:	4605      	mov	r5, r0
 8019d4c:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019d4e:	68c3      	ldr	r3, [r0, #12]
 8019d50:	8998      	ldrh	r0, [r3, #12]
 8019d52:	f7fc fa4e 	bl	80161f2 <lwip_htons>
 8019d56:	f010 0f01 	tst.w	r0, #1
 8019d5a:	d009      	beq.n	8019d70 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 8019d5c:	4620      	mov	r0, r4
 8019d5e:	f7ff f85c 	bl	8018e1a <tcp_segs_free>
    next = NULL;
 8019d62:	2400      	movs	r4, #0
 8019d64:	e02e      	b.n	8019dc4 <tcp_oos_insert_segment+0x7c>
      next = next->next;
 8019d66:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 8019d68:	4620      	mov	r0, r4
 8019d6a:	f7ff f849 	bl	8018e00 <tcp_seg_free>
      next = next->next;
 8019d6e:	4634      	mov	r4, r6
    while (next &&
 8019d70:	b1c4      	cbz	r4, 8019da4 <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019d72:	892b      	ldrh	r3, [r5, #8]
 8019d74:	4a14      	ldr	r2, [pc, #80]	; (8019dc8 <tcp_oos_insert_segment+0x80>)
 8019d76:	6812      	ldr	r2, [r2, #0]
 8019d78:	4413      	add	r3, r2
 8019d7a:	68e1      	ldr	r1, [r4, #12]
 8019d7c:	684a      	ldr	r2, [r1, #4]
 8019d7e:	8920      	ldrh	r0, [r4, #8]
 8019d80:	4402      	add	r2, r0
 8019d82:	1a9b      	subs	r3, r3, r2
    while (next &&
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	db0d      	blt.n	8019da4 <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019d88:	8988      	ldrh	r0, [r1, #12]
 8019d8a:	f7fc fa32 	bl	80161f2 <lwip_htons>
 8019d8e:	f010 0f01 	tst.w	r0, #1
 8019d92:	d0e8      	beq.n	8019d66 <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019d94:	68ef      	ldr	r7, [r5, #12]
 8019d96:	89be      	ldrh	r6, [r7, #12]
 8019d98:	2001      	movs	r0, #1
 8019d9a:	f7fc fa2a 	bl	80161f2 <lwip_htons>
 8019d9e:	4330      	orrs	r0, r6
 8019da0:	81b8      	strh	r0, [r7, #12]
 8019da2:	e7e0      	b.n	8019d66 <tcp_oos_insert_segment+0x1e>
    if (next &&
 8019da4:	b174      	cbz	r4, 8019dc4 <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019da6:	892b      	ldrh	r3, [r5, #8]
 8019da8:	4a07      	ldr	r2, [pc, #28]	; (8019dc8 <tcp_oos_insert_segment+0x80>)
 8019daa:	6811      	ldr	r1, [r2, #0]
 8019dac:	440b      	add	r3, r1
 8019dae:	68e2      	ldr	r2, [r4, #12]
 8019db0:	6852      	ldr	r2, [r2, #4]
 8019db2:	1a9b      	subs	r3, r3, r2
    if (next &&
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	dd05      	ble.n	8019dc4 <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019db8:	1a52      	subs	r2, r2, r1
 8019dba:	b291      	uxth	r1, r2
 8019dbc:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019dbe:	6868      	ldr	r0, [r5, #4]
 8019dc0:	f7fe fc8e 	bl	80186e0 <pbuf_realloc>
  cseg->next = next;
 8019dc4:	602c      	str	r4, [r5, #0]
 8019dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dc8:	200094fc 	.word	0x200094fc

08019dcc <tcp_receive>:
{
 8019dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dd0:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019dd2:	7d03      	ldrb	r3, [r0, #20]
 8019dd4:	2b03      	cmp	r3, #3
 8019dd6:	d979      	bls.n	8019ecc <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 8019dd8:	4bae      	ldr	r3, [pc, #696]	; (801a094 <tcp_receive+0x2c8>)
 8019dda:	781b      	ldrb	r3, [r3, #0]
 8019ddc:	f013 0f10 	tst.w	r3, #16
 8019de0:	f000 81aa 	beq.w	801a138 <tcp_receive+0x36c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019de4:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8019de8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8019dea:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019dec:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8019dee:	4baa      	ldr	r3, [pc, #680]	; (801a098 <tcp_receive+0x2cc>)
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	1acd      	subs	r5, r1, r3
 8019df4:	2d00      	cmp	r5, #0
 8019df6:	db7c      	blt.n	8019ef2 <tcp_receive+0x126>
 8019df8:	4299      	cmp	r1, r3
 8019dfa:	d06f      	beq.n	8019edc <tcp_receive+0x110>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019dfc:	49a7      	ldr	r1, [pc, #668]	; (801a09c <tcp_receive+0x2d0>)
 8019dfe:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019e00:	428a      	cmp	r2, r1
 8019e02:	d071      	beq.n	8019ee8 <tcp_receive+0x11c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019e04:	4ba5      	ldr	r3, [pc, #660]	; (801a09c <tcp_receive+0x2d0>)
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019e0a:	1a5a      	subs	r2, r3, r1
 8019e0c:	2a00      	cmp	r2, #0
 8019e0e:	f340 8095 	ble.w	8019f3c <tcp_receive+0x170>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8019e12:	2a01      	cmp	r2, #1
 8019e14:	d404      	bmi.n	8019e20 <tcp_receive+0x54>
 8019e16:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019e18:	1a9a      	subs	r2, r3, r2
 8019e1a:	2a00      	cmp	r2, #0
 8019e1c:	f340 80cc 	ble.w	8019fb8 <tcp_receive+0x1ec>
      tcp_send_empty_ack(pcb);
 8019e20:	4620      	mov	r0, r4
 8019e22:	f001 ff43 	bl	801bcac <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 8019e26:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	f000 8176 	beq.w	801a11a <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019e2e:	4a9b      	ldr	r2, [pc, #620]	; (801a09c <tcp_receive+0x2d0>)
 8019e30:	6815      	ldr	r5, [r2, #0]
 8019e32:	68db      	ldr	r3, [r3, #12]
 8019e34:	6858      	ldr	r0, [r3, #4]
 8019e36:	f7fc f9df 	bl	80161f8 <lwip_htonl>
 8019e3a:	4606      	mov	r6, r0
 8019e3c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019e3e:	891f      	ldrh	r7, [r3, #8]
 8019e40:	68db      	ldr	r3, [r3, #12]
 8019e42:	8998      	ldrh	r0, [r3, #12]
 8019e44:	f7fc f9d5 	bl	80161f2 <lwip_htons>
 8019e48:	f010 0f03 	tst.w	r0, #3
 8019e4c:	f000 8163 	beq.w	801a116 <tcp_receive+0x34a>
 8019e50:	2301      	movs	r3, #1
 8019e52:	443b      	add	r3, r7
 8019e54:	441e      	add	r6, r3
 8019e56:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 8019e58:	2d00      	cmp	r5, #0
 8019e5a:	f2c0 815e 	blt.w	801a11a <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019e5e:	4b8f      	ldr	r3, [pc, #572]	; (801a09c <tcp_receive+0x2d0>)
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019e64:	1a9b      	subs	r3, r3, r2
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	f300 8157 	bgt.w	801a11a <tcp_receive+0x34e>
      next = pcb->unsent;
 8019e6c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8019e6e:	682b      	ldr	r3, [r5, #0]
 8019e70:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	f000 8144 	beq.w	801a100 <tcp_receive+0x334>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019e78:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8019e7c:	6868      	ldr	r0, [r5, #4]
 8019e7e:	f7fe fca1 	bl	80187c4 <pbuf_clen>
 8019e82:	4286      	cmp	r6, r0
 8019e84:	f0c0 813f 	bcc.w	801a106 <tcp_receive+0x33a>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8019e88:	6868      	ldr	r0, [r5, #4]
 8019e8a:	f7fe fc9b 	bl	80187c4 <pbuf_clen>
 8019e8e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019e92:	1a18      	subs	r0, r3, r0
 8019e94:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8019e98:	892b      	ldrh	r3, [r5, #8]
 8019e9a:	4a81      	ldr	r2, [pc, #516]	; (801a0a0 <tcp_receive+0x2d4>)
 8019e9c:	8811      	ldrh	r1, [r2, #0]
 8019e9e:	440b      	add	r3, r1
 8019ea0:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 8019ea2:	4628      	mov	r0, r5
 8019ea4:	f7fe ffac 	bl	8018e00 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 8019ea8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d0ba      	beq.n	8019e26 <tcp_receive+0x5a>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8019eb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d1b7      	bne.n	8019e26 <tcp_receive+0x5a>
 8019eb6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d1b4      	bne.n	8019e26 <tcp_receive+0x5a>
 8019ebc:	4b79      	ldr	r3, [pc, #484]	; (801a0a4 <tcp_receive+0x2d8>)
 8019ebe:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8019ec2:	4979      	ldr	r1, [pc, #484]	; (801a0a8 <tcp_receive+0x2dc>)
 8019ec4:	4879      	ldr	r0, [pc, #484]	; (801a0ac <tcp_receive+0x2e0>)
 8019ec6:	f005 f9da 	bl	801f27e <iprintf>
 8019eca:	e7ac      	b.n	8019e26 <tcp_receive+0x5a>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019ecc:	4b75      	ldr	r3, [pc, #468]	; (801a0a4 <tcp_receive+0x2d8>)
 8019ece:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8019ed2:	4977      	ldr	r1, [pc, #476]	; (801a0b0 <tcp_receive+0x2e4>)
 8019ed4:	4875      	ldr	r0, [pc, #468]	; (801a0ac <tcp_receive+0x2e0>)
 8019ed6:	f005 f9d2 	bl	801f27e <iprintf>
 8019eda:	e77d      	b.n	8019dd8 <tcp_receive+0xc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019edc:	496f      	ldr	r1, [pc, #444]	; (801a09c <tcp_receive+0x2d0>)
 8019ede:	6809      	ldr	r1, [r1, #0]
 8019ee0:	1a51      	subs	r1, r2, r1
 8019ee2:	2900      	cmp	r1, #0
 8019ee4:	da8a      	bge.n	8019dfc <tcp_receive+0x30>
 8019ee6:	e004      	b.n	8019ef2 <tcp_receive+0x126>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019ee8:	4a72      	ldr	r2, [pc, #456]	; (801a0b4 <tcp_receive+0x2e8>)
 8019eea:	6812      	ldr	r2, [r2, #0]
 8019eec:	89d2      	ldrh	r2, [r2, #14]
 8019eee:	4290      	cmp	r0, r2
 8019ef0:	d288      	bcs.n	8019e04 <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019ef2:	4a70      	ldr	r2, [pc, #448]	; (801a0b4 <tcp_receive+0x2e8>)
 8019ef4:	6812      	ldr	r2, [r2, #0]
 8019ef6:	89d2      	ldrh	r2, [r2, #14]
 8019ef8:	b291      	uxth	r1, r2
 8019efa:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019efe:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 8019f02:	4281      	cmp	r1, r0
 8019f04:	d901      	bls.n	8019f0a <tcp_receive+0x13e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019f06:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 8019f0a:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8019f0c:	4b63      	ldr	r3, [pc, #396]	; (801a09c <tcp_receive+0x2d0>)
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8019f12:	b951      	cbnz	r1, 8019f2a <tcp_receive+0x15e>
        if (pcb->persist_backoff == 0) {
 8019f14:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	f47f af73 	bne.w	8019e04 <tcp_receive+0x38>
          pcb->persist_cnt = 0;
 8019f1e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8019f22:	2301      	movs	r3, #1
 8019f24:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8019f28:	e76c      	b.n	8019e04 <tcp_receive+0x38>
      } else if (pcb->persist_backoff > 0) {
 8019f2a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	f43f af68 	beq.w	8019e04 <tcp_receive+0x38>
          pcb->persist_backoff = 0;
 8019f34:	2300      	movs	r3, #0
 8019f36:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8019f3a:	e763      	b.n	8019e04 <tcp_receive+0x38>
      if (tcplen == 0) {
 8019f3c:	4a5e      	ldr	r2, [pc, #376]	; (801a0b8 <tcp_receive+0x2ec>)
 8019f3e:	8812      	ldrh	r2, [r2, #0]
 8019f40:	bb7a      	cbnz	r2, 8019fa2 <tcp_receive+0x1d6>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019f42:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8019f44:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8019f48:	4402      	add	r2, r0
 8019f4a:	4296      	cmp	r6, r2
 8019f4c:	d001      	beq.n	8019f52 <tcp_receive+0x186>
  int found_dupack = 0;
 8019f4e:	2300      	movs	r3, #0
 8019f50:	e028      	b.n	8019fa4 <tcp_receive+0x1d8>
          if (pcb->rtime >= 0) {
 8019f52:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8019f56:	2a00      	cmp	r2, #0
 8019f58:	db2a      	blt.n	8019fb0 <tcp_receive+0x1e4>
            if (pcb->lastack == ackno) {
 8019f5a:	428b      	cmp	r3, r1
 8019f5c:	d001      	beq.n	8019f62 <tcp_receive+0x196>
  int found_dupack = 0;
 8019f5e:	2300      	movs	r3, #0
 8019f60:	e020      	b.n	8019fa4 <tcp_receive+0x1d8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8019f62:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019f66:	1c53      	adds	r3, r2, #1
 8019f68:	b2db      	uxtb	r3, r3
 8019f6a:	429a      	cmp	r2, r3
 8019f6c:	d201      	bcs.n	8019f72 <tcp_receive+0x1a6>
                ++pcb->dupacks;
 8019f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8019f72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019f76:	2b03      	cmp	r3, #3
 8019f78:	d90a      	bls.n	8019f90 <tcp_receive+0x1c4>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8019f7a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8019f7e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019f80:	4413      	add	r3, r2
 8019f82:	b29b      	uxth	r3, r3
 8019f84:	429a      	cmp	r2, r3
 8019f86:	d215      	bcs.n	8019fb4 <tcp_receive+0x1e8>
                  pcb->cwnd += pcb->mss;
 8019f88:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
              found_dupack = 1;
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	e009      	b.n	8019fa4 <tcp_receive+0x1d8>
              } else if (pcb->dupacks == 3) {
 8019f90:	2b03      	cmp	r3, #3
 8019f92:	d001      	beq.n	8019f98 <tcp_receive+0x1cc>
              found_dupack = 1;
 8019f94:	2301      	movs	r3, #1
 8019f96:	e005      	b.n	8019fa4 <tcp_receive+0x1d8>
                tcp_rexmit_fast(pcb);
 8019f98:	4620      	mov	r0, r4
 8019f9a:	f002 f8b6 	bl	801c10a <tcp_rexmit_fast>
              found_dupack = 1;
 8019f9e:	2301      	movs	r3, #1
 8019fa0:	e000      	b.n	8019fa4 <tcp_receive+0x1d8>
  int found_dupack = 0;
 8019fa2:	2300      	movs	r3, #0
      if (!found_dupack) {
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	f47f af3e 	bne.w	8019e26 <tcp_receive+0x5a>
        pcb->dupacks = 0;
 8019faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fae:	e73a      	b.n	8019e26 <tcp_receive+0x5a>
  int found_dupack = 0;
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	e7f7      	b.n	8019fa4 <tcp_receive+0x1d8>
              found_dupack = 1;
 8019fb4:	2301      	movs	r3, #1
 8019fb6:	e7f5      	b.n	8019fa4 <tcp_receive+0x1d8>
      if (pcb->flags & TF_INFR) {
 8019fb8:	7ea2      	ldrb	r2, [r4, #26]
 8019fba:	f012 0f04 	tst.w	r2, #4
 8019fbe:	d006      	beq.n	8019fce <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 8019fc0:	f022 0204 	bic.w	r2, r2, #4
 8019fc4:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8019fc6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8019fca:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 8019fce:	2100      	movs	r1, #0
 8019fd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8019fd4:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8019fd8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019fda:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8019fde:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8019fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8019fe6:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8019fe8:	7d23      	ldrb	r3, [r4, #20]
 8019fea:	2b03      	cmp	r3, #3
 8019fec:	d90c      	bls.n	801a008 <tcp_receive+0x23c>
        if (pcb->cwnd < pcb->ssthresh) {
 8019fee:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8019ff2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8019ff6:	429a      	cmp	r2, r3
 8019ff8:	d260      	bcs.n	801a0bc <tcp_receive+0x2f0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8019ffa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019ffc:	4413      	add	r3, r2
 8019ffe:	b29b      	uxth	r3, r3
 801a000:	429a      	cmp	r2, r3
 801a002:	d201      	bcs.n	801a008 <tcp_receive+0x23c>
            pcb->cwnd += pcb->mss;
 801a004:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 801a008:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d06d      	beq.n	801a0ea <tcp_receive+0x31e>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 801a00e:	68db      	ldr	r3, [r3, #12]
 801a010:	6858      	ldr	r0, [r3, #4]
 801a012:	f7fc f8f1 	bl	80161f8 <lwip_htonl>
 801a016:	4605      	mov	r5, r0
 801a018:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a01a:	891e      	ldrh	r6, [r3, #8]
 801a01c:	68db      	ldr	r3, [r3, #12]
 801a01e:	8998      	ldrh	r0, [r3, #12]
 801a020:	f7fc f8e7 	bl	80161f2 <lwip_htons>
 801a024:	f010 0f03 	tst.w	r0, #3
 801a028:	d05d      	beq.n	801a0e6 <tcp_receive+0x31a>
 801a02a:	2301      	movs	r3, #1
 801a02c:	4433      	add	r3, r6
 801a02e:	441d      	add	r5, r3
 801a030:	4b1a      	ldr	r3, [pc, #104]	; (801a09c <tcp_receive+0x2d0>)
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 801a036:	2d00      	cmp	r5, #0
 801a038:	dc57      	bgt.n	801a0ea <tcp_receive+0x31e>
        next = pcb->unacked;
 801a03a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 801a03c:	682b      	ldr	r3, [r5, #0]
 801a03e:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801a040:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 801a044:	6868      	ldr	r0, [r5, #4]
 801a046:	f7fe fbbd 	bl	80187c4 <pbuf_clen>
 801a04a:	4286      	cmp	r6, r0
 801a04c:	d343      	bcc.n	801a0d6 <tcp_receive+0x30a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 801a04e:	6868      	ldr	r0, [r5, #4]
 801a050:	f7fe fbb8 	bl	80187c4 <pbuf_clen>
 801a054:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a058:	1a18      	subs	r0, r3, r0
 801a05a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 801a05e:	892b      	ldrh	r3, [r5, #8]
 801a060:	4a0f      	ldr	r2, [pc, #60]	; (801a0a0 <tcp_receive+0x2d4>)
 801a062:	8811      	ldrh	r1, [r2, #0]
 801a064:	440b      	add	r3, r1
 801a066:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 801a068:	4628      	mov	r0, r5
 801a06a:	f7fe fec9 	bl	8018e00 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 801a06e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a072:	2b00      	cmp	r3, #0
 801a074:	d0c8      	beq.n	801a008 <tcp_receive+0x23c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 801a076:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d1c5      	bne.n	801a008 <tcp_receive+0x23c>
 801a07c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d1c2      	bne.n	801a008 <tcp_receive+0x23c>
 801a082:	4b08      	ldr	r3, [pc, #32]	; (801a0a4 <tcp_receive+0x2d8>)
 801a084:	f240 42a7 	movw	r2, #1191	; 0x4a7
 801a088:	4907      	ldr	r1, [pc, #28]	; (801a0a8 <tcp_receive+0x2dc>)
 801a08a:	4808      	ldr	r0, [pc, #32]	; (801a0ac <tcp_receive+0x2e0>)
 801a08c:	f005 f8f7 	bl	801f27e <iprintf>
 801a090:	e7ba      	b.n	801a008 <tcp_receive+0x23c>
 801a092:	bf00      	nop
 801a094:	200094dc 	.word	0x200094dc
 801a098:	200094fc 	.word	0x200094fc
 801a09c:	200094d8 	.word	0x200094d8
 801a0a0:	200094f0 	.word	0x200094f0
 801a0a4:	0802422c 	.word	0x0802422c
 801a0a8:	080242a4 	.word	0x080242a4
 801a0ac:	0801fe1c 	.word	0x0801fe1c
 801a0b0:	08024260 	.word	0x08024260
 801a0b4:	20009504 	.word	0x20009504
 801a0b8:	20009512 	.word	0x20009512
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 801a0bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801a0be:	fb03 f303 	mul.w	r3, r3, r3
 801a0c2:	fb93 f3f2 	sdiv	r3, r3, r2
 801a0c6:	fa12 f383 	uxtah	r3, r2, r3
 801a0ca:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 801a0cc:	429a      	cmp	r2, r3
 801a0ce:	d29b      	bcs.n	801a008 <tcp_receive+0x23c>
            pcb->cwnd = new_cwnd;
 801a0d0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801a0d4:	e798      	b.n	801a008 <tcp_receive+0x23c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801a0d6:	4ba2      	ldr	r3, [pc, #648]	; (801a360 <tcp_receive+0x594>)
 801a0d8:	f240 429e 	movw	r2, #1182	; 0x49e
 801a0dc:	49a1      	ldr	r1, [pc, #644]	; (801a364 <tcp_receive+0x598>)
 801a0de:	48a2      	ldr	r0, [pc, #648]	; (801a368 <tcp_receive+0x59c>)
 801a0e0:	f005 f8cd 	bl	801f27e <iprintf>
 801a0e4:	e7b3      	b.n	801a04e <tcp_receive+0x282>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	e7a0      	b.n	801a02c <tcp_receive+0x260>
      if (pcb->unacked == NULL) {
 801a0ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a0ec:	b123      	cbz	r3, 801a0f8 <tcp_receive+0x32c>
        pcb->rtime = 0;
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	76e3      	strb	r3, [r4, #27]
 801a0f6:	e696      	b.n	8019e26 <tcp_receive+0x5a>
        pcb->rtime = -1;
 801a0f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a0fc:	8623      	strh	r3, [r4, #48]	; 0x30
 801a0fe:	e7f8      	b.n	801a0f2 <tcp_receive+0x326>
        pcb->unsent_oversize = 0;
 801a100:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 801a104:	e6b8      	b.n	8019e78 <tcp_receive+0xac>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801a106:	4b96      	ldr	r3, [pc, #600]	; (801a360 <tcp_receive+0x594>)
 801a108:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801a10c:	4995      	ldr	r1, [pc, #596]	; (801a364 <tcp_receive+0x598>)
 801a10e:	4896      	ldr	r0, [pc, #600]	; (801a368 <tcp_receive+0x59c>)
 801a110:	f005 f8b5 	bl	801f27e <iprintf>
 801a114:	e6b8      	b.n	8019e88 <tcp_receive+0xbc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801a116:	2300      	movs	r3, #0
 801a118:	e69b      	b.n	8019e52 <tcp_receive+0x86>
    pcb->snd_buf += recv_acked;
 801a11a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801a11e:	4a93      	ldr	r2, [pc, #588]	; (801a36c <tcp_receive+0x5a0>)
 801a120:	8812      	ldrh	r2, [r2, #0]
 801a122:	4413      	add	r3, r2
 801a124:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801a128:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a12a:	b12b      	cbz	r3, 801a138 <tcp_receive+0x36c>
 801a12c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801a12e:	4990      	ldr	r1, [pc, #576]	; (801a370 <tcp_receive+0x5a4>)
 801a130:	6809      	ldr	r1, [r1, #0]
 801a132:	1a52      	subs	r2, r2, r1
 801a134:	2a00      	cmp	r2, #0
 801a136:	db29      	blt.n	801a18c <tcp_receive+0x3c0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801a138:	4b8e      	ldr	r3, [pc, #568]	; (801a374 <tcp_receive+0x5a8>)
 801a13a:	881b      	ldrh	r3, [r3, #0]
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	f000 834b 	beq.w	801a7d8 <tcp_receive+0xa0c>
 801a142:	7d22      	ldrb	r2, [r4, #20]
 801a144:	2a06      	cmp	r2, #6
 801a146:	f200 8347 	bhi.w	801a7d8 <tcp_receive+0xa0c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a14a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a14c:	4a8a      	ldr	r2, [pc, #552]	; (801a378 <tcp_receive+0x5ac>)
 801a14e:	6812      	ldr	r2, [r2, #0]
 801a150:	1a8e      	subs	r6, r1, r2
 801a152:	2e01      	cmp	r6, #1
 801a154:	d404      	bmi.n	801a160 <tcp_receive+0x394>
 801a156:	4413      	add	r3, r2
 801a158:	1acb      	subs	r3, r1, r3
 801a15a:	3301      	adds	r3, #1
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	dd36      	ble.n	801a1ce <tcp_receive+0x402>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801a160:	1a52      	subs	r2, r2, r1
 801a162:	2a00      	cmp	r2, #0
 801a164:	f2c0 8093 	blt.w	801a28e <tcp_receive+0x4c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a168:	4b83      	ldr	r3, [pc, #524]	; (801a378 <tcp_receive+0x5ac>)
 801a16a:	6819      	ldr	r1, [r3, #0]
 801a16c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a16e:	1a8b      	subs	r3, r1, r2
 801a170:	2b00      	cmp	r3, #0
 801a172:	db06      	blt.n	801a182 <tcp_receive+0x3b6>
 801a174:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a176:	4413      	add	r3, r2
 801a178:	1acb      	subs	r3, r1, r3
 801a17a:	3301      	adds	r3, #1
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	f340 808b 	ble.w	801a298 <tcp_receive+0x4cc>
      tcp_send_empty_ack(pcb);
 801a182:	4620      	mov	r0, r4
 801a184:	f001 fd92 	bl	801bcac <tcp_send_empty_ack>
 801a188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801a18c:	4a7b      	ldr	r2, [pc, #492]	; (801a37c <tcp_receive+0x5b0>)
 801a18e:	6812      	ldr	r2, [r2, #0]
 801a190:	1ad2      	subs	r2, r2, r3
 801a192:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 801a194:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801a198:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 801a19c:	b292      	uxth	r2, r2
 801a19e:	b213      	sxth	r3, r2
      pcb->sa += m;
 801a1a0:	4411      	add	r1, r2
 801a1a2:	b209      	sxth	r1, r1
 801a1a4:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	db0e      	blt.n	801a1c8 <tcp_receive+0x3fc>
      m = m - (pcb->sv >> 2);
 801a1aa:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 801a1ae:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 801a1b2:	fa12 f383 	uxtah	r3, r2, r3
 801a1b6:	b29b      	uxth	r3, r3
 801a1b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801a1ba:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801a1be:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	6363      	str	r3, [r4, #52]	; 0x34
 801a1c6:	e7b7      	b.n	801a138 <tcp_receive+0x36c>
        m = -m;
 801a1c8:	4253      	negs	r3, r2
 801a1ca:	b21b      	sxth	r3, r3
 801a1cc:	e7ed      	b.n	801a1aa <tcp_receive+0x3de>
      struct pbuf *p = inseg.p;
 801a1ce:	4b6c      	ldr	r3, [pc, #432]	; (801a380 <tcp_receive+0x5b4>)
 801a1d0:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 801a1d2:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a1d4:	b195      	cbz	r5, 801a1fc <tcp_receive+0x430>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801a1d6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 801a1da:	429e      	cmp	r6, r3
 801a1dc:	dc16      	bgt.n	801a20c <tcp_receive+0x440>
      if (inseg.p->len < off) {
 801a1de:	4b68      	ldr	r3, [pc, #416]	; (801a380 <tcp_receive+0x5b4>)
 801a1e0:	6858      	ldr	r0, [r3, #4]
 801a1e2:	8943      	ldrh	r3, [r0, #10]
 801a1e4:	429e      	cmp	r6, r3
 801a1e6:	dd44      	ble.n	801a272 <tcp_receive+0x4a6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a1e8:	8903      	ldrh	r3, [r0, #8]
 801a1ea:	429e      	cmp	r6, r3
 801a1ec:	dc16      	bgt.n	801a21c <tcp_receive+0x450>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801a1ee:	4b64      	ldr	r3, [pc, #400]	; (801a380 <tcp_receive+0x5b4>)
 801a1f0:	685b      	ldr	r3, [r3, #4]
 801a1f2:	891a      	ldrh	r2, [r3, #8]
 801a1f4:	b2b6      	uxth	r6, r6
 801a1f6:	1b92      	subs	r2, r2, r6
 801a1f8:	b292      	uxth	r2, r2
        while (p->len < off) {
 801a1fa:	e01c      	b.n	801a236 <tcp_receive+0x46a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a1fc:	4b58      	ldr	r3, [pc, #352]	; (801a360 <tcp_receive+0x594>)
 801a1fe:	f240 523c 	movw	r2, #1340	; 0x53c
 801a202:	4960      	ldr	r1, [pc, #384]	; (801a384 <tcp_receive+0x5b8>)
 801a204:	4858      	ldr	r0, [pc, #352]	; (801a368 <tcp_receive+0x59c>)
 801a206:	f005 f83a 	bl	801f27e <iprintf>
 801a20a:	e7e4      	b.n	801a1d6 <tcp_receive+0x40a>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801a20c:	4b54      	ldr	r3, [pc, #336]	; (801a360 <tcp_receive+0x594>)
 801a20e:	f240 523d 	movw	r2, #1341	; 0x53d
 801a212:	495d      	ldr	r1, [pc, #372]	; (801a388 <tcp_receive+0x5bc>)
 801a214:	4854      	ldr	r0, [pc, #336]	; (801a368 <tcp_receive+0x59c>)
 801a216:	f005 f832 	bl	801f27e <iprintf>
 801a21a:	e7e0      	b.n	801a1de <tcp_receive+0x412>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a21c:	4b50      	ldr	r3, [pc, #320]	; (801a360 <tcp_receive+0x594>)
 801a21e:	f240 523f 	movw	r2, #1343	; 0x53f
 801a222:	495a      	ldr	r1, [pc, #360]	; (801a38c <tcp_receive+0x5c0>)
 801a224:	4850      	ldr	r0, [pc, #320]	; (801a368 <tcp_receive+0x59c>)
 801a226:	f005 f82a 	bl	801f27e <iprintf>
 801a22a:	e7e0      	b.n	801a1ee <tcp_receive+0x422>
          off -= p->len;
 801a22c:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 801a22e:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 801a230:	2300      	movs	r3, #0
 801a232:	816b      	strh	r3, [r5, #10]
          p = p->next;
 801a234:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 801a236:	896b      	ldrh	r3, [r5, #10]
 801a238:	429f      	cmp	r7, r3
 801a23a:	dcf7      	bgt.n	801a22c <tcp_receive+0x460>
        if (pbuf_header(p, (s16_t)-off)) {
 801a23c:	4279      	negs	r1, r7
 801a23e:	b209      	sxth	r1, r1
 801a240:	4628      	mov	r0, r5
 801a242:	f7fe f8ef 	bl	8018424 <pbuf_header>
 801a246:	b960      	cbnz	r0, 801a262 <tcp_receive+0x496>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 801a248:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a24a:	484b      	ldr	r0, [pc, #300]	; (801a378 <tcp_receive+0x5ac>)
 801a24c:	6803      	ldr	r3, [r0, #0]
 801a24e:	1a9b      	subs	r3, r3, r2
 801a250:	494b      	ldr	r1, [pc, #300]	; (801a380 <tcp_receive+0x5b4>)
 801a252:	890d      	ldrh	r5, [r1, #8]
 801a254:	fa15 f383 	uxtah	r3, r5, r3
 801a258:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a25a:	68cb      	ldr	r3, [r1, #12]
 801a25c:	6002      	str	r2, [r0, #0]
 801a25e:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a260:	e782      	b.n	801a168 <tcp_receive+0x39c>
          LWIP_ASSERT("pbuf_header failed", 0);
 801a262:	4b3f      	ldr	r3, [pc, #252]	; (801a360 <tcp_receive+0x594>)
 801a264:	f240 524c 	movw	r2, #1356	; 0x54c
 801a268:	4949      	ldr	r1, [pc, #292]	; (801a390 <tcp_receive+0x5c4>)
 801a26a:	483f      	ldr	r0, [pc, #252]	; (801a368 <tcp_receive+0x59c>)
 801a26c:	f005 f807 	bl	801f27e <iprintf>
 801a270:	e7ea      	b.n	801a248 <tcp_receive+0x47c>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 801a272:	4271      	negs	r1, r6
 801a274:	b209      	sxth	r1, r1
 801a276:	f7fe f8d5 	bl	8018424 <pbuf_header>
 801a27a:	2800      	cmp	r0, #0
 801a27c:	d0e4      	beq.n	801a248 <tcp_receive+0x47c>
          LWIP_ASSERT("pbuf_header failed", 0);
 801a27e:	4b38      	ldr	r3, [pc, #224]	; (801a360 <tcp_receive+0x594>)
 801a280:	f240 5251 	movw	r2, #1361	; 0x551
 801a284:	4942      	ldr	r1, [pc, #264]	; (801a390 <tcp_receive+0x5c4>)
 801a286:	4838      	ldr	r0, [pc, #224]	; (801a368 <tcp_receive+0x59c>)
 801a288:	f004 fff9 	bl	801f27e <iprintf>
 801a28c:	e7dc      	b.n	801a248 <tcp_receive+0x47c>
        tcp_ack_now(pcb);
 801a28e:	7ea3      	ldrb	r3, [r4, #26]
 801a290:	f043 0302 	orr.w	r3, r3, #2
 801a294:	76a3      	strb	r3, [r4, #26]
 801a296:	e767      	b.n	801a168 <tcp_receive+0x39c>
      if (pcb->rcv_nxt == seqno) {
 801a298:	4291      	cmp	r1, r2
 801a29a:	d008      	beq.n	801a2ae <tcp_receive+0x4e2>
        tcp_send_empty_ack(pcb);
 801a29c:	4620      	mov	r0, r4
 801a29e:	f001 fd05 	bl	801bcac <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 801a2a2:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801a2a4:	2d00      	cmp	r5, #0
 801a2a6:	f000 81ad 	beq.w	801a604 <tcp_receive+0x838>
 801a2aa:	2600      	movs	r6, #0
 801a2ac:	e1e4      	b.n	801a678 <tcp_receive+0x8ac>
        tcplen = TCP_TCPLEN(&inseg);
 801a2ae:	4b34      	ldr	r3, [pc, #208]	; (801a380 <tcp_receive+0x5b4>)
 801a2b0:	891d      	ldrh	r5, [r3, #8]
 801a2b2:	68db      	ldr	r3, [r3, #12]
 801a2b4:	8998      	ldrh	r0, [r3, #12]
 801a2b6:	f7fb ff9c 	bl	80161f2 <lwip_htons>
 801a2ba:	f010 0f03 	tst.w	r0, #3
 801a2be:	d015      	beq.n	801a2ec <tcp_receive+0x520>
 801a2c0:	2301      	movs	r3, #1
 801a2c2:	442b      	add	r3, r5
 801a2c4:	b29b      	uxth	r3, r3
 801a2c6:	4a2b      	ldr	r2, [pc, #172]	; (801a374 <tcp_receive+0x5a8>)
 801a2c8:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 801a2ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a2cc:	4293      	cmp	r3, r2
 801a2ce:	d80f      	bhi.n	801a2f0 <tcp_receive+0x524>
        if (pcb->ooseq != NULL) {
 801a2d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	f000 80ed 	beq.w	801a4b2 <tcp_receive+0x6e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a2d8:	4b29      	ldr	r3, [pc, #164]	; (801a380 <tcp_receive+0x5b4>)
 801a2da:	68db      	ldr	r3, [r3, #12]
 801a2dc:	8998      	ldrh	r0, [r3, #12]
 801a2de:	f7fb ff88 	bl	80161f2 <lwip_htons>
 801a2e2:	f010 0f01 	tst.w	r0, #1
 801a2e6:	d168      	bne.n	801a3ba <tcp_receive+0x5ee>
            next = pcb->ooseq;
 801a2e8:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 801a2ea:	e077      	b.n	801a3dc <tcp_receive+0x610>
        tcplen = TCP_TCPLEN(&inseg);
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	e7e8      	b.n	801a2c2 <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a2f0:	4b23      	ldr	r3, [pc, #140]	; (801a380 <tcp_receive+0x5b4>)
 801a2f2:	68db      	ldr	r3, [r3, #12]
 801a2f4:	8998      	ldrh	r0, [r3, #12]
 801a2f6:	f7fb ff7c 	bl	80161f2 <lwip_htons>
 801a2fa:	f010 0f01 	tst.w	r0, #1
 801a2fe:	d14b      	bne.n	801a398 <tcp_receive+0x5cc>
          inseg.len = (u16_t)pcb->rcv_wnd;
 801a300:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a302:	4b1f      	ldr	r3, [pc, #124]	; (801a380 <tcp_receive+0x5b4>)
 801a304:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a306:	68db      	ldr	r3, [r3, #12]
 801a308:	8998      	ldrh	r0, [r3, #12]
 801a30a:	f7fb ff72 	bl	80161f2 <lwip_htons>
 801a30e:	f010 0f02 	tst.w	r0, #2
 801a312:	d003      	beq.n	801a31c <tcp_receive+0x550>
            inseg.len -= 1;
 801a314:	4a1a      	ldr	r2, [pc, #104]	; (801a380 <tcp_receive+0x5b4>)
 801a316:	8913      	ldrh	r3, [r2, #8]
 801a318:	3b01      	subs	r3, #1
 801a31a:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801a31c:	4d18      	ldr	r5, [pc, #96]	; (801a380 <tcp_receive+0x5b4>)
 801a31e:	8929      	ldrh	r1, [r5, #8]
 801a320:	6868      	ldr	r0, [r5, #4]
 801a322:	f7fe f9dd 	bl	80186e0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801a326:	892e      	ldrh	r6, [r5, #8]
 801a328:	68eb      	ldr	r3, [r5, #12]
 801a32a:	8998      	ldrh	r0, [r3, #12]
 801a32c:	f7fb ff61 	bl	80161f2 <lwip_htons>
 801a330:	f010 0f03 	tst.w	r0, #3
 801a334:	d03f      	beq.n	801a3b6 <tcp_receive+0x5ea>
 801a336:	2301      	movs	r3, #1
 801a338:	4433      	add	r3, r6
 801a33a:	b29b      	uxth	r3, r3
 801a33c:	4a0d      	ldr	r2, [pc, #52]	; (801a374 <tcp_receive+0x5a8>)
 801a33e:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a340:	4a0d      	ldr	r2, [pc, #52]	; (801a378 <tcp_receive+0x5ac>)
 801a342:	6812      	ldr	r2, [r2, #0]
 801a344:	4413      	add	r3, r2
 801a346:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a348:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a34a:	440a      	add	r2, r1
 801a34c:	4293      	cmp	r3, r2
 801a34e:	d0bf      	beq.n	801a2d0 <tcp_receive+0x504>
 801a350:	4b03      	ldr	r3, [pc, #12]	; (801a360 <tcp_receive+0x594>)
 801a352:	f240 527f 	movw	r2, #1407	; 0x57f
 801a356:	490f      	ldr	r1, [pc, #60]	; (801a394 <tcp_receive+0x5c8>)
 801a358:	4803      	ldr	r0, [pc, #12]	; (801a368 <tcp_receive+0x59c>)
 801a35a:	f004 ff90 	bl	801f27e <iprintf>
 801a35e:	e7b7      	b.n	801a2d0 <tcp_receive+0x504>
 801a360:	0802422c 	.word	0x0802422c
 801a364:	0802427c 	.word	0x0802427c
 801a368:	0801fe1c 	.word	0x0801fe1c
 801a36c:	200094f0 	.word	0x200094f0
 801a370:	200094d8 	.word	0x200094d8
 801a374:	20009512 	.word	0x20009512
 801a378:	200094fc 	.word	0x200094fc
 801a37c:	2000ecbc 	.word	0x2000ecbc
 801a380:	200094e0 	.word	0x200094e0
 801a384:	080242c4 	.word	0x080242c4
 801a388:	080242d4 	.word	0x080242d4
 801a38c:	080242e4 	.word	0x080242e4
 801a390:	080242f4 	.word	0x080242f4
 801a394:	08024308 	.word	0x08024308
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801a398:	4ba9      	ldr	r3, [pc, #676]	; (801a640 <tcp_receive+0x874>)
 801a39a:	68de      	ldr	r6, [r3, #12]
 801a39c:	89b0      	ldrh	r0, [r6, #12]
 801a39e:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 801a3a2:	b2ad      	uxth	r5, r5
 801a3a4:	f7fb ff25 	bl	80161f2 <lwip_htons>
 801a3a8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801a3ac:	f7fb ff21 	bl	80161f2 <lwip_htons>
 801a3b0:	4328      	orrs	r0, r5
 801a3b2:	81b0      	strh	r0, [r6, #12]
 801a3b4:	e7a4      	b.n	801a300 <tcp_receive+0x534>
          tcplen = TCP_TCPLEN(&inseg);
 801a3b6:	2300      	movs	r3, #0
 801a3b8:	e7be      	b.n	801a338 <tcp_receive+0x56c>
            while (pcb->ooseq != NULL) {
 801a3ba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801a3bc:	2800      	cmp	r0, #0
 801a3be:	d078      	beq.n	801a4b2 <tcp_receive+0x6e6>
              pcb->ooseq = pcb->ooseq->next;
 801a3c0:	6803      	ldr	r3, [r0, #0]
 801a3c2:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 801a3c4:	f7fe fd1c 	bl	8018e00 <tcp_seg_free>
 801a3c8:	e7f7      	b.n	801a3ba <tcp_receive+0x5ee>
                tcplen = TCP_TCPLEN(&inseg);
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	443b      	add	r3, r7
 801a3ce:	4a9d      	ldr	r2, [pc, #628]	; (801a644 <tcp_receive+0x878>)
 801a3d0:	8013      	strh	r3, [r2, #0]
              next = next->next;
 801a3d2:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 801a3d4:	4628      	mov	r0, r5
 801a3d6:	f7fe fd13 	bl	8018e00 <tcp_seg_free>
              next = next->next;
 801a3da:	4635      	mov	r5, r6
            while (next &&
 801a3dc:	b375      	cbz	r5, 801a43c <tcp_receive+0x670>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a3de:	4b99      	ldr	r3, [pc, #612]	; (801a644 <tcp_receive+0x878>)
 801a3e0:	881b      	ldrh	r3, [r3, #0]
 801a3e2:	4a99      	ldr	r2, [pc, #612]	; (801a648 <tcp_receive+0x87c>)
 801a3e4:	6812      	ldr	r2, [r2, #0]
 801a3e6:	4413      	add	r3, r2
 801a3e8:	68e9      	ldr	r1, [r5, #12]
 801a3ea:	684a      	ldr	r2, [r1, #4]
 801a3ec:	8928      	ldrh	r0, [r5, #8]
 801a3ee:	4402      	add	r2, r0
 801a3f0:	1a9b      	subs	r3, r3, r2
            while (next &&
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	db22      	blt.n	801a43c <tcp_receive+0x670>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a3f6:	8988      	ldrh	r0, [r1, #12]
 801a3f8:	f7fb fefb 	bl	80161f2 <lwip_htons>
 801a3fc:	f010 0f01 	tst.w	r0, #1
 801a400:	d0e7      	beq.n	801a3d2 <tcp_receive+0x606>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801a402:	4b8f      	ldr	r3, [pc, #572]	; (801a640 <tcp_receive+0x874>)
 801a404:	68db      	ldr	r3, [r3, #12]
 801a406:	8998      	ldrh	r0, [r3, #12]
 801a408:	f7fb fef3 	bl	80161f2 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a40c:	f010 0f02 	tst.w	r0, #2
 801a410:	d1df      	bne.n	801a3d2 <tcp_receive+0x606>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801a412:	4e8b      	ldr	r6, [pc, #556]	; (801a640 <tcp_receive+0x874>)
 801a414:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801a418:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 801a41c:	2001      	movs	r0, #1
 801a41e:	f7fb fee8 	bl	80161f2 <lwip_htons>
 801a422:	4338      	orrs	r0, r7
 801a424:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801a428:	8937      	ldrh	r7, [r6, #8]
 801a42a:	68f3      	ldr	r3, [r6, #12]
 801a42c:	8998      	ldrh	r0, [r3, #12]
 801a42e:	f7fb fee0 	bl	80161f2 <lwip_htons>
 801a432:	f010 0f03 	tst.w	r0, #3
 801a436:	d0c8      	beq.n	801a3ca <tcp_receive+0x5fe>
 801a438:	2301      	movs	r3, #1
 801a43a:	e7c7      	b.n	801a3cc <tcp_receive+0x600>
            if (next &&
 801a43c:	2d00      	cmp	r5, #0
 801a43e:	d037      	beq.n	801a4b0 <tcp_receive+0x6e4>
                TCP_SEQ_GT(seqno + tcplen,
 801a440:	4b81      	ldr	r3, [pc, #516]	; (801a648 <tcp_receive+0x87c>)
 801a442:	6819      	ldr	r1, [r3, #0]
 801a444:	4b7f      	ldr	r3, [pc, #508]	; (801a644 <tcp_receive+0x878>)
 801a446:	881b      	ldrh	r3, [r3, #0]
 801a448:	440b      	add	r3, r1
 801a44a:	68ea      	ldr	r2, [r5, #12]
 801a44c:	6852      	ldr	r2, [r2, #4]
 801a44e:	1a9b      	subs	r3, r3, r2
            if (next &&
 801a450:	2b00      	cmp	r3, #0
 801a452:	dd2d      	ble.n	801a4b0 <tcp_receive+0x6e4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a454:	1a52      	subs	r2, r2, r1
 801a456:	4b7a      	ldr	r3, [pc, #488]	; (801a640 <tcp_receive+0x874>)
 801a458:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a45a:	68db      	ldr	r3, [r3, #12]
 801a45c:	8998      	ldrh	r0, [r3, #12]
 801a45e:	f7fb fec8 	bl	80161f2 <lwip_htons>
 801a462:	f010 0f02 	tst.w	r0, #2
 801a466:	d003      	beq.n	801a470 <tcp_receive+0x6a4>
                inseg.len -= 1;
 801a468:	4a75      	ldr	r2, [pc, #468]	; (801a640 <tcp_receive+0x874>)
 801a46a:	8913      	ldrh	r3, [r2, #8]
 801a46c:	3b01      	subs	r3, #1
 801a46e:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801a470:	4e73      	ldr	r6, [pc, #460]	; (801a640 <tcp_receive+0x874>)
 801a472:	8931      	ldrh	r1, [r6, #8]
 801a474:	6870      	ldr	r0, [r6, #4]
 801a476:	f7fe f933 	bl	80186e0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a47a:	8937      	ldrh	r7, [r6, #8]
 801a47c:	68f3      	ldr	r3, [r6, #12]
 801a47e:	8998      	ldrh	r0, [r3, #12]
 801a480:	f7fb feb7 	bl	80161f2 <lwip_htons>
 801a484:	f010 0f03 	tst.w	r0, #3
 801a488:	d03b      	beq.n	801a502 <tcp_receive+0x736>
 801a48a:	2301      	movs	r3, #1
 801a48c:	443b      	add	r3, r7
 801a48e:	b29b      	uxth	r3, r3
 801a490:	4a6c      	ldr	r2, [pc, #432]	; (801a644 <tcp_receive+0x878>)
 801a492:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a494:	4a6c      	ldr	r2, [pc, #432]	; (801a648 <tcp_receive+0x87c>)
 801a496:	6812      	ldr	r2, [r2, #0]
 801a498:	4413      	add	r3, r2
 801a49a:	68ea      	ldr	r2, [r5, #12]
 801a49c:	6852      	ldr	r2, [r2, #4]
 801a49e:	4293      	cmp	r3, r2
 801a4a0:	d006      	beq.n	801a4b0 <tcp_receive+0x6e4>
 801a4a2:	4b6a      	ldr	r3, [pc, #424]	; (801a64c <tcp_receive+0x880>)
 801a4a4:	f240 52af 	movw	r2, #1455	; 0x5af
 801a4a8:	4969      	ldr	r1, [pc, #420]	; (801a650 <tcp_receive+0x884>)
 801a4aa:	486a      	ldr	r0, [pc, #424]	; (801a654 <tcp_receive+0x888>)
 801a4ac:	f004 fee7 	bl	801f27e <iprintf>
            pcb->ooseq = next;
 801a4b0:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
 801a4b2:	4b64      	ldr	r3, [pc, #400]	; (801a644 <tcp_receive+0x878>)
 801a4b4:	881a      	ldrh	r2, [r3, #0]
 801a4b6:	4b64      	ldr	r3, [pc, #400]	; (801a648 <tcp_receive+0x87c>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	4413      	add	r3, r2
 801a4bc:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a4be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a4c0:	429a      	cmp	r2, r3
 801a4c2:	d820      	bhi.n	801a506 <tcp_receive+0x73a>
        pcb->rcv_wnd -= tcplen;
 801a4c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a4c6:	4a5f      	ldr	r2, [pc, #380]	; (801a644 <tcp_receive+0x878>)
 801a4c8:	8812      	ldrh	r2, [r2, #0]
 801a4ca:	1a9b      	subs	r3, r3, r2
 801a4cc:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801a4ce:	4620      	mov	r0, r4
 801a4d0:	f7fe fc24 	bl	8018d1c <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801a4d4:	4b5a      	ldr	r3, [pc, #360]	; (801a640 <tcp_receive+0x874>)
 801a4d6:	685b      	ldr	r3, [r3, #4]
 801a4d8:	891a      	ldrh	r2, [r3, #8]
 801a4da:	b122      	cbz	r2, 801a4e6 <tcp_receive+0x71a>
          recv_data = inseg.p;
 801a4dc:	4a5e      	ldr	r2, [pc, #376]	; (801a658 <tcp_receive+0x88c>)
 801a4de:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801a4e0:	2200      	movs	r2, #0
 801a4e2:	4b57      	ldr	r3, [pc, #348]	; (801a640 <tcp_receive+0x874>)
 801a4e4:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a4e6:	4b56      	ldr	r3, [pc, #344]	; (801a640 <tcp_receive+0x874>)
 801a4e8:	68db      	ldr	r3, [r3, #12]
 801a4ea:	8998      	ldrh	r0, [r3, #12]
 801a4ec:	f7fb fe81 	bl	80161f2 <lwip_htons>
 801a4f0:	f010 0f01 	tst.w	r0, #1
 801a4f4:	d035      	beq.n	801a562 <tcp_receive+0x796>
          recv_flags |= TF_GOT_FIN;
 801a4f6:	4a59      	ldr	r2, [pc, #356]	; (801a65c <tcp_receive+0x890>)
 801a4f8:	7813      	ldrb	r3, [r2, #0]
 801a4fa:	f043 0320 	orr.w	r3, r3, #32
 801a4fe:	7013      	strb	r3, [r2, #0]
 801a500:	e02f      	b.n	801a562 <tcp_receive+0x796>
              tcplen = TCP_TCPLEN(&inseg);
 801a502:	2300      	movs	r3, #0
 801a504:	e7c2      	b.n	801a48c <tcp_receive+0x6c0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a506:	4b51      	ldr	r3, [pc, #324]	; (801a64c <tcp_receive+0x880>)
 801a508:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a50c:	4954      	ldr	r1, [pc, #336]	; (801a660 <tcp_receive+0x894>)
 801a50e:	4851      	ldr	r0, [pc, #324]	; (801a654 <tcp_receive+0x888>)
 801a510:	f004 feb5 	bl	801f27e <iprintf>
 801a514:	e7d6      	b.n	801a4c4 <tcp_receive+0x6f8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a516:	2300      	movs	r3, #0
 801a518:	e035      	b.n	801a586 <tcp_receive+0x7ba>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a51a:	2300      	movs	r3, #0
 801a51c:	e041      	b.n	801a5a2 <tcp_receive+0x7d6>
 801a51e:	4b4b      	ldr	r3, [pc, #300]	; (801a64c <tcp_receive+0x880>)
 801a520:	f240 52de 	movw	r2, #1502	; 0x5de
 801a524:	494f      	ldr	r1, [pc, #316]	; (801a664 <tcp_receive+0x898>)
 801a526:	484b      	ldr	r0, [pc, #300]	; (801a654 <tcp_receive+0x888>)
 801a528:	f004 fea9 	bl	801f27e <iprintf>
 801a52c:	e03c      	b.n	801a5a8 <tcp_receive+0x7dc>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a52e:	2300      	movs	r3, #0
 801a530:	e043      	b.n	801a5ba <tcp_receive+0x7ee>
              recv_data = cseg->p;
 801a532:	4b49      	ldr	r3, [pc, #292]	; (801a658 <tcp_receive+0x88c>)
 801a534:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 801a536:	2300      	movs	r3, #0
 801a538:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a53a:	68eb      	ldr	r3, [r5, #12]
 801a53c:	8998      	ldrh	r0, [r3, #12]
 801a53e:	f7fb fe58 	bl	80161f2 <lwip_htons>
 801a542:	f010 0f01 	tst.w	r0, #1
 801a546:	d007      	beq.n	801a558 <tcp_receive+0x78c>
            recv_flags |= TF_GOT_FIN;
 801a548:	4a44      	ldr	r2, [pc, #272]	; (801a65c <tcp_receive+0x890>)
 801a54a:	7813      	ldrb	r3, [r2, #0]
 801a54c:	f043 0320 	orr.w	r3, r3, #32
 801a550:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a552:	7d23      	ldrb	r3, [r4, #20]
 801a554:	2b04      	cmp	r3, #4
 801a556:	d042      	beq.n	801a5de <tcp_receive+0x812>
          pcb->ooseq = cseg->next;
 801a558:	682b      	ldr	r3, [r5, #0]
 801a55a:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 801a55c:	4628      	mov	r0, r5
 801a55e:	f7fe fc4f 	bl	8018e00 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a562:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801a564:	2d00      	cmp	r5, #0
 801a566:	d03d      	beq.n	801a5e4 <tcp_receive+0x818>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a568:	68ea      	ldr	r2, [r5, #12]
 801a56a:	6853      	ldr	r3, [r2, #4]
 801a56c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a56e:	428b      	cmp	r3, r1
 801a570:	d138      	bne.n	801a5e4 <tcp_receive+0x818>
          seqno = pcb->ooseq->tcphdr->seqno;
 801a572:	4935      	ldr	r1, [pc, #212]	; (801a648 <tcp_receive+0x87c>)
 801a574:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a576:	892e      	ldrh	r6, [r5, #8]
 801a578:	8990      	ldrh	r0, [r2, #12]
 801a57a:	f7fb fe3a 	bl	80161f2 <lwip_htons>
 801a57e:	f010 0f03 	tst.w	r0, #3
 801a582:	d0c8      	beq.n	801a516 <tcp_receive+0x74a>
 801a584:	2301      	movs	r3, #1
 801a586:	199a      	adds	r2, r3, r6
 801a588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a58a:	4413      	add	r3, r2
 801a58c:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a58e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 801a590:	892f      	ldrh	r7, [r5, #8]
 801a592:	68eb      	ldr	r3, [r5, #12]
 801a594:	8998      	ldrh	r0, [r3, #12]
 801a596:	f7fb fe2c 	bl	80161f2 <lwip_htons>
 801a59a:	f010 0f03 	tst.w	r0, #3
 801a59e:	d0bc      	beq.n	801a51a <tcp_receive+0x74e>
 801a5a0:	2301      	movs	r3, #1
 801a5a2:	443b      	add	r3, r7
 801a5a4:	429e      	cmp	r6, r3
 801a5a6:	d3ba      	bcc.n	801a51e <tcp_receive+0x752>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a5a8:	892e      	ldrh	r6, [r5, #8]
 801a5aa:	68eb      	ldr	r3, [r5, #12]
 801a5ac:	8998      	ldrh	r0, [r3, #12]
 801a5ae:	f7fb fe20 	bl	80161f2 <lwip_htons>
 801a5b2:	f010 0f03 	tst.w	r0, #3
 801a5b6:	d0ba      	beq.n	801a52e <tcp_receive+0x762>
 801a5b8:	2301      	movs	r3, #1
 801a5ba:	199a      	adds	r2, r3, r6
 801a5bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a5be:	1a9b      	subs	r3, r3, r2
 801a5c0:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801a5c2:	4620      	mov	r0, r4
 801a5c4:	f7fe fbaa 	bl	8018d1c <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801a5c8:	6869      	ldr	r1, [r5, #4]
 801a5ca:	890b      	ldrh	r3, [r1, #8]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d0b4      	beq.n	801a53a <tcp_receive+0x76e>
            if (recv_data) {
 801a5d0:	4b21      	ldr	r3, [pc, #132]	; (801a658 <tcp_receive+0x88c>)
 801a5d2:	6818      	ldr	r0, [r3, #0]
 801a5d4:	2800      	cmp	r0, #0
 801a5d6:	d0ac      	beq.n	801a532 <tcp_receive+0x766>
              pbuf_cat(recv_data, cseg->p);
 801a5d8:	f7fe f91a 	bl	8018810 <pbuf_cat>
 801a5dc:	e7ab      	b.n	801a536 <tcp_receive+0x76a>
              pcb->state = CLOSE_WAIT;
 801a5de:	2307      	movs	r3, #7
 801a5e0:	7523      	strb	r3, [r4, #20]
 801a5e2:	e7b9      	b.n	801a558 <tcp_receive+0x78c>
        tcp_ack(pcb);
 801a5e4:	7ea3      	ldrb	r3, [r4, #26]
 801a5e6:	f013 0f01 	tst.w	r3, #1
 801a5ea:	d006      	beq.n	801a5fa <tcp_receive+0x82e>
 801a5ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801a5f0:	f043 0302 	orr.w	r3, r3, #2
 801a5f4:	76a3      	strb	r3, [r4, #26]
 801a5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5fa:	f043 0301 	orr.w	r3, r3, #1
 801a5fe:	76a3      	strb	r3, [r4, #26]
 801a600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a604:	480e      	ldr	r0, [pc, #56]	; (801a640 <tcp_receive+0x874>)
 801a606:	f7fe fc12 	bl	8018e2e <tcp_seg_copy>
 801a60a:	6720      	str	r0, [r4, #112]	; 0x70
 801a60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 801a610:	4b0b      	ldr	r3, [pc, #44]	; (801a640 <tcp_receive+0x874>)
 801a612:	891a      	ldrh	r2, [r3, #8]
 801a614:	892b      	ldrh	r3, [r5, #8]
 801a616:	429a      	cmp	r2, r3
 801a618:	f240 80ee 	bls.w	801a7f8 <tcp_receive+0xa2c>
                cseg = tcp_seg_copy(&inseg);
 801a61c:	4808      	ldr	r0, [pc, #32]	; (801a640 <tcp_receive+0x874>)
 801a61e:	f7fe fc06 	bl	8018e2e <tcp_seg_copy>
                if (cseg != NULL) {
 801a622:	4603      	mov	r3, r0
 801a624:	2800      	cmp	r0, #0
 801a626:	f000 80e7 	beq.w	801a7f8 <tcp_receive+0xa2c>
                  if (prev != NULL) {
 801a62a:	b136      	cbz	r6, 801a63a <tcp_receive+0x86e>
                    prev->next = cseg;
 801a62c:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 801a62e:	4629      	mov	r1, r5
 801a630:	4618      	mov	r0, r3
 801a632:	f7ff fb89 	bl	8019d48 <tcp_oos_insert_segment>
 801a636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 801a63a:	6720      	str	r0, [r4, #112]	; 0x70
 801a63c:	e7f7      	b.n	801a62e <tcp_receive+0x862>
 801a63e:	bf00      	nop
 801a640:	200094e0 	.word	0x200094e0
 801a644:	20009512 	.word	0x20009512
 801a648:	200094fc 	.word	0x200094fc
 801a64c:	0802422c 	.word	0x0802422c
 801a650:	08024340 	.word	0x08024340
 801a654:	0801fe1c 	.word	0x0801fe1c
 801a658:	200094f4 	.word	0x200094f4
 801a65c:	200094f8 	.word	0x200094f8
 801a660:	0802437c 	.word	0x0802437c
 801a664:	0802439c 	.word	0x0802439c
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a668:	1a5a      	subs	r2, r3, r1
 801a66a:	2a00      	cmp	r2, #0
 801a66c:	db35      	blt.n	801a6da <tcp_receive+0x90e>
              if (next->next == NULL &&
 801a66e:	682a      	ldr	r2, [r5, #0]
 801a670:	462e      	mov	r6, r5
 801a672:	2a00      	cmp	r2, #0
 801a674:	d03d      	beq.n	801a6f2 <tcp_receive+0x926>
 801a676:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a678:	2d00      	cmp	r5, #0
 801a67a:	f000 80ab 	beq.w	801a7d4 <tcp_receive+0xa08>
            if (seqno == next->tcphdr->seqno) {
 801a67e:	68e8      	ldr	r0, [r5, #12]
 801a680:	6841      	ldr	r1, [r0, #4]
 801a682:	4b5e      	ldr	r3, [pc, #376]	; (801a7fc <tcp_receive+0xa30>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	4299      	cmp	r1, r3
 801a688:	d0c2      	beq.n	801a610 <tcp_receive+0x844>
              if (prev == NULL) {
 801a68a:	2e00      	cmp	r6, #0
 801a68c:	d0ec      	beq.n	801a668 <tcp_receive+0x89c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 801a68e:	68f2      	ldr	r2, [r6, #12]
 801a690:	6852      	ldr	r2, [r2, #4]
 801a692:	1a9a      	subs	r2, r3, r2
 801a694:	2a01      	cmp	r2, #1
 801a696:	d4ea      	bmi.n	801a66e <tcp_receive+0x8a2>
 801a698:	1a5a      	subs	r2, r3, r1
 801a69a:	3201      	adds	r2, #1
 801a69c:	2a00      	cmp	r2, #0
 801a69e:	dce6      	bgt.n	801a66e <tcp_receive+0x8a2>
                  cseg = tcp_seg_copy(&inseg);
 801a6a0:	4857      	ldr	r0, [pc, #348]	; (801a800 <tcp_receive+0xa34>)
 801a6a2:	f7fe fbc4 	bl	8018e2e <tcp_seg_copy>
                  if (cseg != NULL) {
 801a6a6:	4604      	mov	r4, r0
 801a6a8:	2800      	cmp	r0, #0
 801a6aa:	f000 80a5 	beq.w	801a7f8 <tcp_receive+0xa2c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a6ae:	68f3      	ldr	r3, [r6, #12]
 801a6b0:	6859      	ldr	r1, [r3, #4]
 801a6b2:	8932      	ldrh	r2, [r6, #8]
 801a6b4:	440a      	add	r2, r1
 801a6b6:	4b51      	ldr	r3, [pc, #324]	; (801a7fc <tcp_receive+0xa30>)
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	1ad2      	subs	r2, r2, r3
 801a6bc:	2a00      	cmp	r2, #0
 801a6be:	dd05      	ble.n	801a6cc <tcp_receive+0x900>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a6c0:	1a5b      	subs	r3, r3, r1
 801a6c2:	b299      	uxth	r1, r3
 801a6c4:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a6c6:	6870      	ldr	r0, [r6, #4]
 801a6c8:	f7fe f80a 	bl	80186e0 <pbuf_realloc>
                    prev->next = cseg;
 801a6cc:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a6ce:	4629      	mov	r1, r5
 801a6d0:	4620      	mov	r0, r4
 801a6d2:	f7ff fb39 	bl	8019d48 <tcp_oos_insert_segment>
 801a6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 801a6da:	4849      	ldr	r0, [pc, #292]	; (801a800 <tcp_receive+0xa34>)
 801a6dc:	f7fe fba7 	bl	8018e2e <tcp_seg_copy>
                  if (cseg != NULL) {
 801a6e0:	2800      	cmp	r0, #0
 801a6e2:	f000 8089 	beq.w	801a7f8 <tcp_receive+0xa2c>
                    pcb->ooseq = cseg;
 801a6e6:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801a6e8:	4629      	mov	r1, r5
 801a6ea:	f7ff fb2d 	bl	8019d48 <tcp_oos_insert_segment>
 801a6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a6f2:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	dc01      	bgt.n	801a6fc <tcp_receive+0x930>
 801a6f8:	4615      	mov	r5, r2
 801a6fa:	e7bd      	b.n	801a678 <tcp_receive+0x8ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a6fc:	8980      	ldrh	r0, [r0, #12]
 801a6fe:	f7fb fd78 	bl	80161f2 <lwip_htons>
 801a702:	f010 0f01 	tst.w	r0, #1
 801a706:	d177      	bne.n	801a7f8 <tcp_receive+0xa2c>
                next->next = tcp_seg_copy(&inseg);
 801a708:	483d      	ldr	r0, [pc, #244]	; (801a800 <tcp_receive+0xa34>)
 801a70a:	f7fe fb90 	bl	8018e2e <tcp_seg_copy>
 801a70e:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801a710:	2800      	cmp	r0, #0
 801a712:	d071      	beq.n	801a7f8 <tcp_receive+0xa2c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a714:	68eb      	ldr	r3, [r5, #12]
 801a716:	6859      	ldr	r1, [r3, #4]
 801a718:	892a      	ldrh	r2, [r5, #8]
 801a71a:	440a      	add	r2, r1
 801a71c:	4b37      	ldr	r3, [pc, #220]	; (801a7fc <tcp_receive+0xa30>)
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	1ad2      	subs	r2, r2, r3
 801a722:	2a00      	cmp	r2, #0
 801a724:	dd05      	ble.n	801a732 <tcp_receive+0x966>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a726:	1a5b      	subs	r3, r3, r1
 801a728:	b299      	uxth	r1, r3
 801a72a:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801a72c:	6868      	ldr	r0, [r5, #4]
 801a72e:	f7fd ffd7 	bl	80186e0 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a732:	4b34      	ldr	r3, [pc, #208]	; (801a804 <tcp_receive+0xa38>)
 801a734:	881b      	ldrh	r3, [r3, #0]
 801a736:	4a31      	ldr	r2, [pc, #196]	; (801a7fc <tcp_receive+0xa30>)
 801a738:	6812      	ldr	r2, [r2, #0]
 801a73a:	4413      	add	r3, r2
 801a73c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a73e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a740:	440a      	add	r2, r1
 801a742:	1a9b      	subs	r3, r3, r2
 801a744:	2b00      	cmp	r3, #0
 801a746:	dd57      	ble.n	801a7f8 <tcp_receive+0xa2c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a748:	682b      	ldr	r3, [r5, #0]
 801a74a:	68db      	ldr	r3, [r3, #12]
 801a74c:	8998      	ldrh	r0, [r3, #12]
 801a74e:	f7fb fd50 	bl	80161f2 <lwip_htons>
 801a752:	f010 0f01 	tst.w	r0, #1
 801a756:	d12c      	bne.n	801a7b2 <tcp_receive+0x9e6>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a758:	682a      	ldr	r2, [r5, #0]
 801a75a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a75c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a75e:	440b      	add	r3, r1
 801a760:	b29b      	uxth	r3, r3
 801a762:	4926      	ldr	r1, [pc, #152]	; (801a7fc <tcp_receive+0xa30>)
 801a764:	6809      	ldr	r1, [r1, #0]
 801a766:	1a5b      	subs	r3, r3, r1
 801a768:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a76a:	682b      	ldr	r3, [r5, #0]
 801a76c:	8919      	ldrh	r1, [r3, #8]
 801a76e:	6858      	ldr	r0, [r3, #4]
 801a770:	f7fd ffb6 	bl	80186e0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a774:	682b      	ldr	r3, [r5, #0]
 801a776:	891d      	ldrh	r5, [r3, #8]
 801a778:	68db      	ldr	r3, [r3, #12]
 801a77a:	8998      	ldrh	r0, [r3, #12]
 801a77c:	f7fb fd39 	bl	80161f2 <lwip_htons>
 801a780:	f010 0f03 	tst.w	r0, #3
 801a784:	d024      	beq.n	801a7d0 <tcp_receive+0xa04>
 801a786:	2301      	movs	r3, #1
 801a788:	442b      	add	r3, r5
 801a78a:	b29b      	uxth	r3, r3
 801a78c:	4a1d      	ldr	r2, [pc, #116]	; (801a804 <tcp_receive+0xa38>)
 801a78e:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a790:	4a1a      	ldr	r2, [pc, #104]	; (801a7fc <tcp_receive+0xa30>)
 801a792:	6812      	ldr	r2, [r2, #0]
 801a794:	4413      	add	r3, r2
 801a796:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a798:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a79a:	440a      	add	r2, r1
 801a79c:	4293      	cmp	r3, r2
 801a79e:	d02b      	beq.n	801a7f8 <tcp_receive+0xa2c>
 801a7a0:	4b19      	ldr	r3, [pc, #100]	; (801a808 <tcp_receive+0xa3c>)
 801a7a2:	f240 627b 	movw	r2, #1659	; 0x67b
 801a7a6:	4919      	ldr	r1, [pc, #100]	; (801a80c <tcp_receive+0xa40>)
 801a7a8:	4819      	ldr	r0, [pc, #100]	; (801a810 <tcp_receive+0xa44>)
 801a7aa:	f004 fd68 	bl	801f27e <iprintf>
 801a7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a7b2:	682b      	ldr	r3, [r5, #0]
 801a7b4:	68df      	ldr	r7, [r3, #12]
 801a7b6:	89b8      	ldrh	r0, [r7, #12]
 801a7b8:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 801a7bc:	b2b6      	uxth	r6, r6
 801a7be:	f7fb fd18 	bl	80161f2 <lwip_htons>
 801a7c2:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801a7c6:	f7fb fd14 	bl	80161f2 <lwip_htons>
 801a7ca:	4330      	orrs	r0, r6
 801a7cc:	81b8      	strh	r0, [r7, #12]
 801a7ce:	e7c3      	b.n	801a758 <tcp_receive+0x98c>
                    tcplen = TCP_TCPLEN(next->next);
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	e7d9      	b.n	801a788 <tcp_receive+0x9bc>
 801a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a7d8:	4b08      	ldr	r3, [pc, #32]	; (801a7fc <tcp_receive+0xa30>)
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a7de:	1a99      	subs	r1, r3, r2
 801a7e0:	2900      	cmp	r1, #0
 801a7e2:	db05      	blt.n	801a7f0 <tcp_receive+0xa24>
 801a7e4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a7e6:	440a      	add	r2, r1
 801a7e8:	1a9b      	subs	r3, r3, r2
 801a7ea:	3301      	adds	r3, #1
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	dd03      	ble.n	801a7f8 <tcp_receive+0xa2c>
      tcp_ack_now(pcb);
 801a7f0:	7ea3      	ldrb	r3, [r4, #26]
 801a7f2:	f043 0302 	orr.w	r3, r3, #2
 801a7f6:	76a3      	strb	r3, [r4, #26]
 801a7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7fc:	200094fc 	.word	0x200094fc
 801a800:	200094e0 	.word	0x200094e0
 801a804:	20009512 	.word	0x20009512
 801a808:	0802422c 	.word	0x0802422c
 801a80c:	08024308 	.word	0x08024308
 801a810:	0801fe1c 	.word	0x0801fe1c

0801a814 <tcp_process>:
{
 801a814:	b570      	push	{r4, r5, r6, lr}
 801a816:	b082      	sub	sp, #8
 801a818:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 801a81a:	4ba3      	ldr	r3, [pc, #652]	; (801aaa8 <tcp_process+0x294>)
 801a81c:	781b      	ldrb	r3, [r3, #0]
 801a81e:	f013 0f04 	tst.w	r3, #4
 801a822:	d03d      	beq.n	801a8a0 <tcp_process+0x8c>
    if (pcb->state == SYN_SENT) {
 801a824:	7d01      	ldrb	r1, [r0, #20]
 801a826:	2902      	cmp	r1, #2
 801a828:	d012      	beq.n	801a850 <tcp_process+0x3c>
      if (seqno == pcb->rcv_nxt) {
 801a82a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801a82c:	4b9f      	ldr	r3, [pc, #636]	; (801aaac <tcp_process+0x298>)
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	429a      	cmp	r2, r3
 801a832:	d01c      	beq.n	801a86e <tcp_process+0x5a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a834:	1a98      	subs	r0, r3, r2
 801a836:	2800      	cmp	r0, #0
 801a838:	db1b      	blt.n	801a872 <tcp_process+0x5e>
 801a83a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801a83c:	4402      	add	r2, r0
 801a83e:	1a9b      	subs	r3, r3, r2
 801a840:	2b00      	cmp	r3, #0
 801a842:	dd0c      	ble.n	801a85e <tcp_process+0x4a>
  u8_t acceptable = 0;
 801a844:	2300      	movs	r3, #0
    if (acceptable) {
 801a846:	b9b3      	cbnz	r3, 801a876 <tcp_process+0x62>
      return ERR_OK;
 801a848:	2500      	movs	r5, #0
}
 801a84a:	4628      	mov	r0, r5
 801a84c:	b002      	add	sp, #8
 801a84e:	bd70      	pop	{r4, r5, r6, pc}
      if (ackno == pcb->snd_nxt) {
 801a850:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801a852:	4b97      	ldr	r3, [pc, #604]	; (801aab0 <tcp_process+0x29c>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	429a      	cmp	r2, r3
 801a858:	d007      	beq.n	801a86a <tcp_process+0x56>
  u8_t acceptable = 0;
 801a85a:	2300      	movs	r3, #0
 801a85c:	e7f3      	b.n	801a846 <tcp_process+0x32>
        tcp_ack_now(pcb);
 801a85e:	7ea3      	ldrb	r3, [r4, #26]
 801a860:	f043 0302 	orr.w	r3, r3, #2
 801a864:	76a3      	strb	r3, [r4, #26]
  u8_t acceptable = 0;
 801a866:	2300      	movs	r3, #0
 801a868:	e7ed      	b.n	801a846 <tcp_process+0x32>
        acceptable = 1;
 801a86a:	2301      	movs	r3, #1
 801a86c:	e7eb      	b.n	801a846 <tcp_process+0x32>
        acceptable = 1;
 801a86e:	2301      	movs	r3, #1
 801a870:	e7e9      	b.n	801a846 <tcp_process+0x32>
  u8_t acceptable = 0;
 801a872:	2300      	movs	r3, #0
 801a874:	e7e7      	b.n	801a846 <tcp_process+0x32>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a876:	b159      	cbz	r1, 801a890 <tcp_process+0x7c>
      recv_flags |= TF_RESET;
 801a878:	4a8e      	ldr	r2, [pc, #568]	; (801aab4 <tcp_process+0x2a0>)
 801a87a:	7813      	ldrb	r3, [r2, #0]
 801a87c:	f043 0308 	orr.w	r3, r3, #8
 801a880:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801a882:	7ea3      	ldrb	r3, [r4, #26]
 801a884:	f023 0301 	bic.w	r3, r3, #1
 801a888:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 801a88a:	f06f 050d 	mvn.w	r5, #13
 801a88e:	e7dc      	b.n	801a84a <tcp_process+0x36>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a890:	4b89      	ldr	r3, [pc, #548]	; (801aab8 <tcp_process+0x2a4>)
 801a892:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a896:	4989      	ldr	r1, [pc, #548]	; (801aabc <tcp_process+0x2a8>)
 801a898:	4889      	ldr	r0, [pc, #548]	; (801aac0 <tcp_process+0x2ac>)
 801a89a:	f004 fcf0 	bl	801f27e <iprintf>
 801a89e:	e7eb      	b.n	801a878 <tcp_process+0x64>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801a8a0:	f013 0f02 	tst.w	r3, #2
 801a8a4:	d00a      	beq.n	801a8bc <tcp_process+0xa8>
 801a8a6:	7d03      	ldrb	r3, [r0, #20]
 801a8a8:	3b02      	subs	r3, #2
 801a8aa:	b2db      	uxtb	r3, r3
 801a8ac:	2b01      	cmp	r3, #1
 801a8ae:	d905      	bls.n	801a8bc <tcp_process+0xa8>
    tcp_ack_now(pcb);
 801a8b0:	7e83      	ldrb	r3, [r0, #26]
 801a8b2:	f043 0302 	orr.w	r3, r3, #2
 801a8b6:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 801a8b8:	2500      	movs	r5, #0
 801a8ba:	e7c6      	b.n	801a84a <tcp_process+0x36>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801a8bc:	7ea3      	ldrb	r3, [r4, #26]
 801a8be:	f013 0f10 	tst.w	r3, #16
 801a8c2:	d102      	bne.n	801a8ca <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 801a8c4:	4b7f      	ldr	r3, [pc, #508]	; (801aac4 <tcp_process+0x2b0>)
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 801a8d0:	4620      	mov	r0, r4
 801a8d2:	f7ff f8ff 	bl	8019ad4 <tcp_parseopt>
  switch (pcb->state) {
 801a8d6:	7d23      	ldrb	r3, [r4, #20]
 801a8d8:	3b02      	subs	r3, #2
 801a8da:	2b07      	cmp	r3, #7
 801a8dc:	f200 8219 	bhi.w	801ad12 <tcp_process+0x4fe>
 801a8e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a8e4:	009b0008 	.word	0x009b0008
 801a8e8:	01460135 	.word	0x01460135
 801a8ec:	0135019c 	.word	0x0135019c
 801a8f0:	01fd01ca 	.word	0x01fd01ca
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801a8f4:	4b6c      	ldr	r3, [pc, #432]	; (801aaa8 <tcp_process+0x294>)
 801a8f6:	781b      	ldrb	r3, [r3, #0]
 801a8f8:	f003 0212 	and.w	r2, r3, #18
 801a8fc:	2a12      	cmp	r2, #18
 801a8fe:	d004      	beq.n	801a90a <tcp_process+0xf6>
    else if (flags & TCP_ACK) {
 801a900:	f013 0f10 	tst.w	r3, #16
 801a904:	d16b      	bne.n	801a9de <tcp_process+0x1ca>
  return ERR_OK;
 801a906:	2500      	movs	r5, #0
 801a908:	e79f      	b.n	801a84a <tcp_process+0x36>
        && (ackno == pcb->lastack + 1)) {
 801a90a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801a90c:	3201      	adds	r2, #1
 801a90e:	4968      	ldr	r1, [pc, #416]	; (801aab0 <tcp_process+0x29c>)
 801a910:	6809      	ldr	r1, [r1, #0]
 801a912:	428a      	cmp	r2, r1
 801a914:	d1f4      	bne.n	801a900 <tcp_process+0xec>
      pcb->rcv_nxt = seqno + 1;
 801a916:	4b65      	ldr	r3, [pc, #404]	; (801aaac <tcp_process+0x298>)
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	1c5a      	adds	r2, r3, #1
 801a91c:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a91e:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 801a920:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801a922:	4a69      	ldr	r2, [pc, #420]	; (801aac8 <tcp_process+0x2b4>)
 801a924:	6812      	ldr	r2, [r2, #0]
 801a926:	89d2      	ldrh	r2, [r2, #14]
 801a928:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801a92c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801a930:	3b01      	subs	r3, #1
 801a932:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801a934:	2304      	movs	r3, #4
 801a936:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a938:	18e1      	adds	r1, r4, r3
 801a93a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801a93c:	f7ff f868 	bl	8019a10 <tcp_eff_send_mss_impl>
 801a940:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a942:	0043      	lsls	r3, r0, #1
 801a944:	f241 121c 	movw	r2, #4380	; 0x111c
 801a948:	4293      	cmp	r3, r2
 801a94a:	bf38      	it	cc
 801a94c:	4613      	movcc	r3, r2
 801a94e:	0080      	lsls	r0, r0, #2
 801a950:	4283      	cmp	r3, r0
 801a952:	bf28      	it	cs
 801a954:	4603      	movcs	r3, r0
 801a956:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a95a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a95e:	b31b      	cbz	r3, 801a9a8 <tcp_process+0x194>
      --pcb->snd_queuelen;
 801a960:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801a964:	3b01      	subs	r3, #1
 801a966:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 801a96a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 801a96c:	b325      	cbz	r5, 801a9b8 <tcp_process+0x1a4>
        pcb->unacked = rseg->next;
 801a96e:	682b      	ldr	r3, [r5, #0]
 801a970:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 801a972:	4628      	mov	r0, r5
 801a974:	f7fe fa44 	bl	8018e00 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 801a978:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a97a:	b353      	cbz	r3, 801a9d2 <tcp_process+0x1be>
        pcb->rtime = 0;
 801a97c:	2300      	movs	r3, #0
 801a97e:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 801a980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a984:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801a988:	b33b      	cbz	r3, 801a9da <tcp_process+0x1c6>
 801a98a:	2200      	movs	r2, #0
 801a98c:	4621      	mov	r1, r4
 801a98e:	6920      	ldr	r0, [r4, #16]
 801a990:	4798      	blx	r3
 801a992:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 801a994:	f115 0f0d 	cmn.w	r5, #13
 801a998:	f43f af57 	beq.w	801a84a <tcp_process+0x36>
      tcp_ack_now(pcb);
 801a99c:	7ea3      	ldrb	r3, [r4, #26]
 801a99e:	f043 0302 	orr.w	r3, r3, #2
 801a9a2:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 801a9a4:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 801a9a6:	e750      	b.n	801a84a <tcp_process+0x36>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a9a8:	4b43      	ldr	r3, [pc, #268]	; (801aab8 <tcp_process+0x2a4>)
 801a9aa:	f240 321a 	movw	r2, #794	; 0x31a
 801a9ae:	4947      	ldr	r1, [pc, #284]	; (801aacc <tcp_process+0x2b8>)
 801a9b0:	4843      	ldr	r0, [pc, #268]	; (801aac0 <tcp_process+0x2ac>)
 801a9b2:	f004 fc64 	bl	801f27e <iprintf>
 801a9b6:	e7d3      	b.n	801a960 <tcp_process+0x14c>
        rseg = pcb->unsent;
 801a9b8:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801a9ba:	b115      	cbz	r5, 801a9c2 <tcp_process+0x1ae>
        pcb->unsent = rseg->next;
 801a9bc:	682b      	ldr	r3, [r5, #0]
 801a9be:	66a3      	str	r3, [r4, #104]	; 0x68
 801a9c0:	e7d7      	b.n	801a972 <tcp_process+0x15e>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801a9c2:	4b3d      	ldr	r3, [pc, #244]	; (801aab8 <tcp_process+0x2a4>)
 801a9c4:	f240 3222 	movw	r2, #802	; 0x322
 801a9c8:	4941      	ldr	r1, [pc, #260]	; (801aad0 <tcp_process+0x2bc>)
 801a9ca:	483d      	ldr	r0, [pc, #244]	; (801aac0 <tcp_process+0x2ac>)
 801a9cc:	f004 fc57 	bl	801f27e <iprintf>
 801a9d0:	e7f4      	b.n	801a9bc <tcp_process+0x1a8>
        pcb->rtime = -1;
 801a9d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9d6:	8623      	strh	r3, [r4, #48]	; 0x30
 801a9d8:	e7d4      	b.n	801a984 <tcp_process+0x170>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a9da:	2500      	movs	r5, #0
 801a9dc:	e7da      	b.n	801a994 <tcp_process+0x180>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a9de:	4b3a      	ldr	r3, [pc, #232]	; (801aac8 <tcp_process+0x2b4>)
 801a9e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801a9e2:	4a3c      	ldr	r2, [pc, #240]	; (801aad4 <tcp_process+0x2c0>)
 801a9e4:	493c      	ldr	r1, [pc, #240]	; (801aad8 <tcp_process+0x2c4>)
 801a9e6:	880d      	ldrh	r5, [r1, #0]
 801a9e8:	4930      	ldr	r1, [pc, #192]	; (801aaac <tcp_process+0x298>)
 801a9ea:	6809      	ldr	r1, [r1, #0]
 801a9ec:	4830      	ldr	r0, [pc, #192]	; (801aab0 <tcp_process+0x29c>)
 801a9ee:	6800      	ldr	r0, [r0, #0]
 801a9f0:	881e      	ldrh	r6, [r3, #0]
 801a9f2:	9601      	str	r6, [sp, #4]
 801a9f4:	885b      	ldrh	r3, [r3, #2]
 801a9f6:	9300      	str	r3, [sp, #0]
 801a9f8:	4613      	mov	r3, r2
 801a9fa:	3204      	adds	r2, #4
 801a9fc:	4429      	add	r1, r5
 801a9fe:	f001 faeb 	bl	801bfd8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801aa02:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801aa06:	2b05      	cmp	r3, #5
 801aa08:	d901      	bls.n	801aa0e <tcp_process+0x1fa>
  return ERR_OK;
 801aa0a:	2500      	movs	r5, #0
 801aa0c:	e71d      	b.n	801a84a <tcp_process+0x36>
        pcb->rtime = 0;
 801aa0e:	2500      	movs	r5, #0
 801aa10:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 801aa12:	4620      	mov	r0, r4
 801aa14:	f001 fb34 	bl	801c080 <tcp_rexmit_rto>
 801aa18:	e717      	b.n	801a84a <tcp_process+0x36>
    if (flags & TCP_ACK) {
 801aa1a:	4b23      	ldr	r3, [pc, #140]	; (801aaa8 <tcp_process+0x294>)
 801aa1c:	781b      	ldrb	r3, [r3, #0]
 801aa1e:	f013 0f10 	tst.w	r3, #16
 801aa22:	f000 8083 	beq.w	801ab2c <tcp_process+0x318>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801aa26:	4b22      	ldr	r3, [pc, #136]	; (801aab0 <tcp_process+0x29c>)
 801aa28:	6818      	ldr	r0, [r3, #0]
 801aa2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801aa2c:	1ac3      	subs	r3, r0, r3
 801aa2e:	2b01      	cmp	r3, #1
 801aa30:	d403      	bmi.n	801aa3a <tcp_process+0x226>
 801aa32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801aa34:	1ac3      	subs	r3, r0, r3
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	dd11      	ble.n	801aa5e <tcp_process+0x24a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aa3a:	4b23      	ldr	r3, [pc, #140]	; (801aac8 <tcp_process+0x2b4>)
 801aa3c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801aa3e:	4a25      	ldr	r2, [pc, #148]	; (801aad4 <tcp_process+0x2c0>)
 801aa40:	4925      	ldr	r1, [pc, #148]	; (801aad8 <tcp_process+0x2c4>)
 801aa42:	880c      	ldrh	r4, [r1, #0]
 801aa44:	4919      	ldr	r1, [pc, #100]	; (801aaac <tcp_process+0x298>)
 801aa46:	6809      	ldr	r1, [r1, #0]
 801aa48:	881d      	ldrh	r5, [r3, #0]
 801aa4a:	9501      	str	r5, [sp, #4]
 801aa4c:	885b      	ldrh	r3, [r3, #2]
 801aa4e:	9300      	str	r3, [sp, #0]
 801aa50:	4613      	mov	r3, r2
 801aa52:	3204      	adds	r2, #4
 801aa54:	4421      	add	r1, r4
 801aa56:	f001 fabf 	bl	801bfd8 <tcp_rst>
  return ERR_OK;
 801aa5a:	2500      	movs	r5, #0
 801aa5c:	e6f5      	b.n	801a84a <tcp_process+0x36>
        pcb->state = ESTABLISHED;
 801aa5e:	2304      	movs	r3, #4
 801aa60:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801aa62:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801aa64:	b10b      	cbz	r3, 801aa6a <tcp_process+0x256>
 801aa66:	699b      	ldr	r3, [r3, #24]
 801aa68:	b19b      	cbz	r3, 801aa92 <tcp_process+0x27e>
        if (pcb->listener == NULL) {
 801aa6a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801aa6c:	b1cb      	cbz	r3, 801aaa2 <tcp_process+0x28e>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801aa6e:	699b      	ldr	r3, [r3, #24]
 801aa70:	b3b3      	cbz	r3, 801aae0 <tcp_process+0x2cc>
 801aa72:	2200      	movs	r2, #0
 801aa74:	4621      	mov	r1, r4
 801aa76:	6920      	ldr	r0, [r4, #16]
 801aa78:	4798      	blx	r3
 801aa7a:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 801aa7c:	b39d      	cbz	r5, 801aae6 <tcp_process+0x2d2>
          if (err != ERR_ABRT) {
 801aa7e:	f115 0f0d 	cmn.w	r5, #13
 801aa82:	f43f aee2 	beq.w	801a84a <tcp_process+0x36>
            tcp_abort(pcb);
 801aa86:	4620      	mov	r0, r4
 801aa88:	f7fe fec8 	bl	801981c <tcp_abort>
          return ERR_ABRT;
 801aa8c:	f06f 050c 	mvn.w	r5, #12
 801aa90:	e6db      	b.n	801a84a <tcp_process+0x36>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801aa92:	4b09      	ldr	r3, [pc, #36]	; (801aab8 <tcp_process+0x2a4>)
 801aa94:	f240 3251 	movw	r2, #849	; 0x351
 801aa98:	4910      	ldr	r1, [pc, #64]	; (801aadc <tcp_process+0x2c8>)
 801aa9a:	4809      	ldr	r0, [pc, #36]	; (801aac0 <tcp_process+0x2ac>)
 801aa9c:	f004 fbef 	bl	801f27e <iprintf>
 801aaa0:	e7e3      	b.n	801aa6a <tcp_process+0x256>
          err = ERR_VAL;
 801aaa2:	f06f 0505 	mvn.w	r5, #5
 801aaa6:	e7e9      	b.n	801aa7c <tcp_process+0x268>
 801aaa8:	200094dc 	.word	0x200094dc
 801aaac:	200094fc 	.word	0x200094fc
 801aab0:	200094d8 	.word	0x200094d8
 801aab4:	200094f8 	.word	0x200094f8
 801aab8:	0802422c 	.word	0x0802422c
 801aabc:	080241c0 	.word	0x080241c0
 801aac0:	0801fe1c 	.word	0x0801fe1c
 801aac4:	2000ecbc 	.word	0x2000ecbc
 801aac8:	20009504 	.word	0x20009504
 801aacc:	080241e0 	.word	0x080241e0
 801aad0:	080241f8 	.word	0x080241f8
 801aad4:	2000a264 	.word	0x2000a264
 801aad8:	20009512 	.word	0x20009512
 801aadc:	0802420c 	.word	0x0802420c
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801aae0:	f06f 050f 	mvn.w	r5, #15
 801aae4:	e7ca      	b.n	801aa7c <tcp_process+0x268>
        tcp_receive(pcb);
 801aae6:	4620      	mov	r0, r4
 801aae8:	f7ff f970 	bl	8019dcc <tcp_receive>
        if (recv_acked != 0) {
 801aaec:	4b8f      	ldr	r3, [pc, #572]	; (801ad2c <tcp_process+0x518>)
 801aaee:	881b      	ldrh	r3, [r3, #0]
 801aaf0:	b113      	cbz	r3, 801aaf8 <tcp_process+0x2e4>
          recv_acked--;
 801aaf2:	3b01      	subs	r3, #1
 801aaf4:	4a8d      	ldr	r2, [pc, #564]	; (801ad2c <tcp_process+0x518>)
 801aaf6:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801aaf8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801aafa:	0053      	lsls	r3, r2, #1
 801aafc:	f241 111c 	movw	r1, #4380	; 0x111c
 801ab00:	428b      	cmp	r3, r1
 801ab02:	bf38      	it	cc
 801ab04:	460b      	movcc	r3, r1
 801ab06:	0092      	lsls	r2, r2, #2
 801ab08:	4293      	cmp	r3, r2
 801ab0a:	bf28      	it	cs
 801ab0c:	4613      	movcs	r3, r2
 801ab0e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 801ab12:	4b87      	ldr	r3, [pc, #540]	; (801ad30 <tcp_process+0x51c>)
 801ab14:	781b      	ldrb	r3, [r3, #0]
 801ab16:	f013 0f20 	tst.w	r3, #32
 801ab1a:	f43f ae96 	beq.w	801a84a <tcp_process+0x36>
          tcp_ack_now(pcb);
 801ab1e:	7ea3      	ldrb	r3, [r4, #26]
 801ab20:	f043 0302 	orr.w	r3, r3, #2
 801ab24:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 801ab26:	2307      	movs	r3, #7
 801ab28:	7523      	strb	r3, [r4, #20]
 801ab2a:	e68e      	b.n	801a84a <tcp_process+0x36>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801ab2c:	f013 0f02 	tst.w	r3, #2
 801ab30:	f000 80f1 	beq.w	801ad16 <tcp_process+0x502>
 801ab34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ab36:	3b01      	subs	r3, #1
 801ab38:	4a7e      	ldr	r2, [pc, #504]	; (801ad34 <tcp_process+0x520>)
 801ab3a:	6812      	ldr	r2, [r2, #0]
 801ab3c:	4293      	cmp	r3, r2
 801ab3e:	d001      	beq.n	801ab44 <tcp_process+0x330>
  return ERR_OK;
 801ab40:	2500      	movs	r5, #0
 801ab42:	e682      	b.n	801a84a <tcp_process+0x36>
      tcp_rexmit(pcb);
 801ab44:	4620      	mov	r0, r4
 801ab46:	f001 fab6 	bl	801c0b6 <tcp_rexmit>
  return ERR_OK;
 801ab4a:	2500      	movs	r5, #0
 801ab4c:	e67d      	b.n	801a84a <tcp_process+0x36>
    tcp_receive(pcb);
 801ab4e:	4620      	mov	r0, r4
 801ab50:	f7ff f93c 	bl	8019dcc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801ab54:	4b76      	ldr	r3, [pc, #472]	; (801ad30 <tcp_process+0x51c>)
 801ab56:	781b      	ldrb	r3, [r3, #0]
 801ab58:	f013 0f20 	tst.w	r3, #32
 801ab5c:	f000 80dd 	beq.w	801ad1a <tcp_process+0x506>
      tcp_ack_now(pcb);
 801ab60:	7ea3      	ldrb	r3, [r4, #26]
 801ab62:	f043 0302 	orr.w	r3, r3, #2
 801ab66:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 801ab68:	2307      	movs	r3, #7
 801ab6a:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801ab6c:	2500      	movs	r5, #0
 801ab6e:	e66c      	b.n	801a84a <tcp_process+0x36>
    tcp_receive(pcb);
 801ab70:	4620      	mov	r0, r4
 801ab72:	f7ff f92b 	bl	8019dcc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801ab76:	4b6e      	ldr	r3, [pc, #440]	; (801ad30 <tcp_process+0x51c>)
 801ab78:	781b      	ldrb	r3, [r3, #0]
 801ab7a:	f013 0f20 	tst.w	r3, #32
 801ab7e:	d038      	beq.n	801abf2 <tcp_process+0x3de>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ab80:	4b6d      	ldr	r3, [pc, #436]	; (801ad38 <tcp_process+0x524>)
 801ab82:	781b      	ldrb	r3, [r3, #0]
 801ab84:	f013 0f10 	tst.w	r3, #16
 801ab88:	d004      	beq.n	801ab94 <tcp_process+0x380>
 801ab8a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801ab8c:	4b6b      	ldr	r3, [pc, #428]	; (801ad3c <tcp_process+0x528>)
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	429a      	cmp	r2, r3
 801ab92:	d007      	beq.n	801aba4 <tcp_process+0x390>
        tcp_ack_now(pcb);
 801ab94:	7ea3      	ldrb	r3, [r4, #26]
 801ab96:	f043 0302 	orr.w	r3, r3, #2
 801ab9a:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 801ab9c:	2308      	movs	r3, #8
 801ab9e:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801aba0:	2500      	movs	r5, #0
 801aba2:	e652      	b.n	801a84a <tcp_process+0x36>
          pcb->unsent == NULL) {
 801aba4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d1f4      	bne.n	801ab94 <tcp_process+0x380>
        tcp_ack_now(pcb);
 801abaa:	7ea3      	ldrb	r3, [r4, #26]
 801abac:	f043 0302 	orr.w	r3, r3, #2
 801abb0:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 801abb2:	4620      	mov	r0, r4
 801abb4:	f7fe f9c0 	bl	8018f38 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801abb8:	4b61      	ldr	r3, [pc, #388]	; (801ad40 <tcp_process+0x52c>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	429c      	cmp	r4, r3
 801abbe:	d005      	beq.n	801abcc <tcp_process+0x3b8>
 801abc0:	b153      	cbz	r3, 801abd8 <tcp_process+0x3c4>
 801abc2:	68da      	ldr	r2, [r3, #12]
 801abc4:	4294      	cmp	r4, r2
 801abc6:	d005      	beq.n	801abd4 <tcp_process+0x3c0>
 801abc8:	4613      	mov	r3, r2
 801abca:	e7f9      	b.n	801abc0 <tcp_process+0x3ac>
 801abcc:	68da      	ldr	r2, [r3, #12]
 801abce:	4b5c      	ldr	r3, [pc, #368]	; (801ad40 <tcp_process+0x52c>)
 801abd0:	601a      	str	r2, [r3, #0]
 801abd2:	e001      	b.n	801abd8 <tcp_process+0x3c4>
 801abd4:	68e2      	ldr	r2, [r4, #12]
 801abd6:	60da      	str	r2, [r3, #12]
 801abd8:	2201      	movs	r2, #1
 801abda:	4b5a      	ldr	r3, [pc, #360]	; (801ad44 <tcp_process+0x530>)
 801abdc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801abde:	230a      	movs	r3, #10
 801abe0:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801abe2:	4b59      	ldr	r3, [pc, #356]	; (801ad48 <tcp_process+0x534>)
 801abe4:	681a      	ldr	r2, [r3, #0]
 801abe6:	60e2      	str	r2, [r4, #12]
 801abe8:	601c      	str	r4, [r3, #0]
 801abea:	f001 fc01 	bl	801c3f0 <tcp_timer_needed>
  return ERR_OK;
 801abee:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 801abf0:	e62b      	b.n	801a84a <tcp_process+0x36>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801abf2:	4b51      	ldr	r3, [pc, #324]	; (801ad38 <tcp_process+0x524>)
 801abf4:	781b      	ldrb	r3, [r3, #0]
 801abf6:	f013 0f10 	tst.w	r3, #16
 801abfa:	f000 8090 	beq.w	801ad1e <tcp_process+0x50a>
 801abfe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801ac00:	4b4e      	ldr	r3, [pc, #312]	; (801ad3c <tcp_process+0x528>)
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	429a      	cmp	r2, r3
 801ac06:	d001      	beq.n	801ac0c <tcp_process+0x3f8>
  return ERR_OK;
 801ac08:	2500      	movs	r5, #0
 801ac0a:	e61e      	b.n	801a84a <tcp_process+0x36>
               pcb->unsent == NULL) {
 801ac0c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ac0e:	b10b      	cbz	r3, 801ac14 <tcp_process+0x400>
  return ERR_OK;
 801ac10:	2500      	movs	r5, #0
 801ac12:	e61a      	b.n	801a84a <tcp_process+0x36>
      pcb->state = FIN_WAIT_2;
 801ac14:	2306      	movs	r3, #6
 801ac16:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801ac18:	2500      	movs	r5, #0
 801ac1a:	e616      	b.n	801a84a <tcp_process+0x36>
    tcp_receive(pcb);
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	f7ff f8d5 	bl	8019dcc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801ac22:	4b43      	ldr	r3, [pc, #268]	; (801ad30 <tcp_process+0x51c>)
 801ac24:	781b      	ldrb	r3, [r3, #0]
 801ac26:	f013 0f20 	tst.w	r3, #32
 801ac2a:	d101      	bne.n	801ac30 <tcp_process+0x41c>
  return ERR_OK;
 801ac2c:	2500      	movs	r5, #0
 801ac2e:	e60c      	b.n	801a84a <tcp_process+0x36>
      tcp_ack_now(pcb);
 801ac30:	7ea3      	ldrb	r3, [r4, #26]
 801ac32:	f043 0302 	orr.w	r3, r3, #2
 801ac36:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 801ac38:	4620      	mov	r0, r4
 801ac3a:	f7fe f97d 	bl	8018f38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801ac3e:	4b40      	ldr	r3, [pc, #256]	; (801ad40 <tcp_process+0x52c>)
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	429c      	cmp	r4, r3
 801ac44:	d005      	beq.n	801ac52 <tcp_process+0x43e>
 801ac46:	b153      	cbz	r3, 801ac5e <tcp_process+0x44a>
 801ac48:	68da      	ldr	r2, [r3, #12]
 801ac4a:	4294      	cmp	r4, r2
 801ac4c:	d005      	beq.n	801ac5a <tcp_process+0x446>
 801ac4e:	4613      	mov	r3, r2
 801ac50:	e7f9      	b.n	801ac46 <tcp_process+0x432>
 801ac52:	68da      	ldr	r2, [r3, #12]
 801ac54:	4b3a      	ldr	r3, [pc, #232]	; (801ad40 <tcp_process+0x52c>)
 801ac56:	601a      	str	r2, [r3, #0]
 801ac58:	e001      	b.n	801ac5e <tcp_process+0x44a>
 801ac5a:	68e2      	ldr	r2, [r4, #12]
 801ac5c:	60da      	str	r2, [r3, #12]
 801ac5e:	2201      	movs	r2, #1
 801ac60:	4b38      	ldr	r3, [pc, #224]	; (801ad44 <tcp_process+0x530>)
 801ac62:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801ac64:	230a      	movs	r3, #10
 801ac66:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801ac68:	4b37      	ldr	r3, [pc, #220]	; (801ad48 <tcp_process+0x534>)
 801ac6a:	681a      	ldr	r2, [r3, #0]
 801ac6c:	60e2      	str	r2, [r4, #12]
 801ac6e:	601c      	str	r4, [r3, #0]
 801ac70:	f001 fbbe 	bl	801c3f0 <tcp_timer_needed>
  return ERR_OK;
 801ac74:	2500      	movs	r5, #0
 801ac76:	e5e8      	b.n	801a84a <tcp_process+0x36>
    tcp_receive(pcb);
 801ac78:	4620      	mov	r0, r4
 801ac7a:	f7ff f8a7 	bl	8019dcc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ac7e:	4b2e      	ldr	r3, [pc, #184]	; (801ad38 <tcp_process+0x524>)
 801ac80:	781b      	ldrb	r3, [r3, #0]
 801ac82:	f013 0f10 	tst.w	r3, #16
 801ac86:	d04c      	beq.n	801ad22 <tcp_process+0x50e>
 801ac88:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801ac8a:	4b2c      	ldr	r3, [pc, #176]	; (801ad3c <tcp_process+0x528>)
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	429a      	cmp	r2, r3
 801ac90:	d001      	beq.n	801ac96 <tcp_process+0x482>
  return ERR_OK;
 801ac92:	2500      	movs	r5, #0
 801ac94:	e5d9      	b.n	801a84a <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ac96:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801ac98:	b10b      	cbz	r3, 801ac9e <tcp_process+0x48a>
  return ERR_OK;
 801ac9a:	2500      	movs	r5, #0
 801ac9c:	e5d5      	b.n	801a84a <tcp_process+0x36>
      tcp_pcb_purge(pcb);
 801ac9e:	4620      	mov	r0, r4
 801aca0:	f7fe f94a 	bl	8018f38 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801aca4:	4b26      	ldr	r3, [pc, #152]	; (801ad40 <tcp_process+0x52c>)
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	429c      	cmp	r4, r3
 801acaa:	d005      	beq.n	801acb8 <tcp_process+0x4a4>
 801acac:	b153      	cbz	r3, 801acc4 <tcp_process+0x4b0>
 801acae:	68da      	ldr	r2, [r3, #12]
 801acb0:	4294      	cmp	r4, r2
 801acb2:	d005      	beq.n	801acc0 <tcp_process+0x4ac>
 801acb4:	4613      	mov	r3, r2
 801acb6:	e7f9      	b.n	801acac <tcp_process+0x498>
 801acb8:	68da      	ldr	r2, [r3, #12]
 801acba:	4b21      	ldr	r3, [pc, #132]	; (801ad40 <tcp_process+0x52c>)
 801acbc:	601a      	str	r2, [r3, #0]
 801acbe:	e001      	b.n	801acc4 <tcp_process+0x4b0>
 801acc0:	68e2      	ldr	r2, [r4, #12]
 801acc2:	60da      	str	r2, [r3, #12]
 801acc4:	2201      	movs	r2, #1
 801acc6:	4b1f      	ldr	r3, [pc, #124]	; (801ad44 <tcp_process+0x530>)
 801acc8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801acca:	230a      	movs	r3, #10
 801accc:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801acce:	4b1e      	ldr	r3, [pc, #120]	; (801ad48 <tcp_process+0x534>)
 801acd0:	681a      	ldr	r2, [r3, #0]
 801acd2:	60e2      	str	r2, [r4, #12]
 801acd4:	601c      	str	r4, [r3, #0]
 801acd6:	f001 fb8b 	bl	801c3f0 <tcp_timer_needed>
  return ERR_OK;
 801acda:	2500      	movs	r5, #0
 801acdc:	e5b5      	b.n	801a84a <tcp_process+0x36>
    tcp_receive(pcb);
 801acde:	4620      	mov	r0, r4
 801ace0:	f7ff f874 	bl	8019dcc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ace4:	4b14      	ldr	r3, [pc, #80]	; (801ad38 <tcp_process+0x524>)
 801ace6:	781b      	ldrb	r3, [r3, #0]
 801ace8:	f013 0f10 	tst.w	r3, #16
 801acec:	d01b      	beq.n	801ad26 <tcp_process+0x512>
 801acee:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801acf0:	4b12      	ldr	r3, [pc, #72]	; (801ad3c <tcp_process+0x528>)
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	429a      	cmp	r2, r3
 801acf6:	d001      	beq.n	801acfc <tcp_process+0x4e8>
  return ERR_OK;
 801acf8:	2500      	movs	r5, #0
 801acfa:	e5a6      	b.n	801a84a <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801acfc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801acfe:	b10b      	cbz	r3, 801ad04 <tcp_process+0x4f0>
  return ERR_OK;
 801ad00:	2500      	movs	r5, #0
 801ad02:	e5a2      	b.n	801a84a <tcp_process+0x36>
      recv_flags |= TF_CLOSED;
 801ad04:	4a0a      	ldr	r2, [pc, #40]	; (801ad30 <tcp_process+0x51c>)
 801ad06:	7813      	ldrb	r3, [r2, #0]
 801ad08:	f043 0310 	orr.w	r3, r3, #16
 801ad0c:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 801ad0e:	2500      	movs	r5, #0
 801ad10:	e59b      	b.n	801a84a <tcp_process+0x36>
 801ad12:	2500      	movs	r5, #0
 801ad14:	e599      	b.n	801a84a <tcp_process+0x36>
 801ad16:	2500      	movs	r5, #0
 801ad18:	e597      	b.n	801a84a <tcp_process+0x36>
 801ad1a:	2500      	movs	r5, #0
 801ad1c:	e595      	b.n	801a84a <tcp_process+0x36>
 801ad1e:	2500      	movs	r5, #0
 801ad20:	e593      	b.n	801a84a <tcp_process+0x36>
 801ad22:	2500      	movs	r5, #0
 801ad24:	e591      	b.n	801a84a <tcp_process+0x36>
 801ad26:	2500      	movs	r5, #0
 801ad28:	e58f      	b.n	801a84a <tcp_process+0x36>
 801ad2a:	bf00      	nop
 801ad2c:	200094f0 	.word	0x200094f0
 801ad30:	200094f8 	.word	0x200094f8
 801ad34:	200094fc 	.word	0x200094fc
 801ad38:	200094dc 	.word	0x200094dc
 801ad3c:	200094d8 	.word	0x200094d8
 801ad40:	2000ecb8 	.word	0x2000ecb8
 801ad44:	2000ecb4 	.word	0x2000ecb4
 801ad48:	2000ecc8 	.word	0x2000ecc8

0801ad4c <tcp_input>:
{
 801ad4c:	b570      	push	{r4, r5, r6, lr}
 801ad4e:	b082      	sub	sp, #8
 801ad50:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 801ad52:	6842      	ldr	r2, [r0, #4]
 801ad54:	4b9f      	ldr	r3, [pc, #636]	; (801afd4 <tcp_input+0x288>)
 801ad56:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 801ad58:	8943      	ldrh	r3, [r0, #10]
 801ad5a:	2b13      	cmp	r3, #19
 801ad5c:	d93e      	bls.n	801addc <tcp_input+0x90>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ad5e:	4b9e      	ldr	r3, [pc, #632]	; (801afd8 <tcp_input+0x28c>)
 801ad60:	6819      	ldr	r1, [r3, #0]
 801ad62:	6958      	ldr	r0, [r3, #20]
 801ad64:	f7fc f99f 	bl	80170a6 <ip4_addr_isbroadcast_u32>
 801ad68:	2800      	cmp	r0, #0
 801ad6a:	d137      	bne.n	801addc <tcp_input+0x90>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ad6c:	4b9a      	ldr	r3, [pc, #616]	; (801afd8 <tcp_input+0x28c>)
 801ad6e:	695b      	ldr	r3, [r3, #20]
 801ad70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ad74:	2be0      	cmp	r3, #224	; 0xe0
 801ad76:	d031      	beq.n	801addc <tcp_input+0x90>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801ad78:	4b96      	ldr	r3, [pc, #600]	; (801afd4 <tcp_input+0x288>)
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	8998      	ldrh	r0, [r3, #12]
 801ad7e:	f7fb fa38 	bl	80161f2 <lwip_htons>
 801ad82:	f3c0 310f 	ubfx	r1, r0, #12, #16
 801ad86:	0089      	lsls	r1, r1, #2
 801ad88:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ad8a:	2913      	cmp	r1, #19
 801ad8c:	d926      	bls.n	801addc <tcp_input+0x90>
 801ad8e:	b289      	uxth	r1, r1
 801ad90:	8923      	ldrh	r3, [r4, #8]
 801ad92:	4299      	cmp	r1, r3
 801ad94:	d822      	bhi.n	801addc <tcp_input+0x90>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801ad96:	f1a1 0314 	sub.w	r3, r1, #20
 801ad9a:	b29b      	uxth	r3, r3
 801ad9c:	4a8f      	ldr	r2, [pc, #572]	; (801afdc <tcp_input+0x290>)
 801ad9e:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 801ada0:	2000      	movs	r0, #0
 801ada2:	4a8f      	ldr	r2, [pc, #572]	; (801afe0 <tcp_input+0x294>)
 801ada4:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 801ada6:	8962      	ldrh	r2, [r4, #10]
 801ada8:	4291      	cmp	r1, r2
 801adaa:	d91c      	bls.n	801ade6 <tcp_input+0x9a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801adac:	6823      	ldr	r3, [r4, #0]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d051      	beq.n	801ae56 <tcp_input+0x10a>
    pbuf_header(p, -TCP_HLEN);
 801adb2:	f06f 0113 	mvn.w	r1, #19
 801adb6:	4620      	mov	r0, r4
 801adb8:	f7fd fb34 	bl	8018424 <pbuf_header>
    tcphdr_opt1len = p->len;
 801adbc:	8961      	ldrh	r1, [r4, #10]
 801adbe:	4b89      	ldr	r3, [pc, #548]	; (801afe4 <tcp_input+0x298>)
 801adc0:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801adc2:	4b86      	ldr	r3, [pc, #536]	; (801afdc <tcp_input+0x290>)
 801adc4:	881d      	ldrh	r5, [r3, #0]
 801adc6:	1a6d      	subs	r5, r5, r1
 801adc8:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801adca:	4249      	negs	r1, r1
 801adcc:	b209      	sxth	r1, r1
 801adce:	4620      	mov	r0, r4
 801add0:	f7fd fb28 	bl	8018424 <pbuf_header>
    if (opt2len > p->next->len) {
 801add4:	6820      	ldr	r0, [r4, #0]
 801add6:	8943      	ldrh	r3, [r0, #10]
 801add8:	429d      	cmp	r5, r3
 801adda:	d943      	bls.n	801ae64 <tcp_input+0x118>
  pbuf_free(p);
 801addc:	4620      	mov	r0, r4
 801adde:	f7fd fb2b 	bl	8018438 <pbuf_free>
}
 801ade2:	b002      	add	sp, #8
 801ade4:	bd70      	pop	{r4, r5, r6, pc}
    tcphdr_opt1len = tcphdr_optlen;
 801ade6:	4a7f      	ldr	r2, [pc, #508]	; (801afe4 <tcp_input+0x298>)
 801ade8:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801adea:	4249      	negs	r1, r1
 801adec:	4620      	mov	r0, r4
 801adee:	f7fd fb19 	bl	8018424 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801adf2:	4d78      	ldr	r5, [pc, #480]	; (801afd4 <tcp_input+0x288>)
 801adf4:	682e      	ldr	r6, [r5, #0]
 801adf6:	8830      	ldrh	r0, [r6, #0]
 801adf8:	f7fb f9fb 	bl	80161f2 <lwip_htons>
 801adfc:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801adfe:	682e      	ldr	r6, [r5, #0]
 801ae00:	8870      	ldrh	r0, [r6, #2]
 801ae02:	f7fb f9f6 	bl	80161f2 <lwip_htons>
 801ae06:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ae08:	682e      	ldr	r6, [r5, #0]
 801ae0a:	6870      	ldr	r0, [r6, #4]
 801ae0c:	f7fb f9f4 	bl	80161f8 <lwip_htonl>
 801ae10:	6070      	str	r0, [r6, #4]
 801ae12:	4b75      	ldr	r3, [pc, #468]	; (801afe8 <tcp_input+0x29c>)
 801ae14:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ae16:	682e      	ldr	r6, [r5, #0]
 801ae18:	68b0      	ldr	r0, [r6, #8]
 801ae1a:	f7fb f9ed 	bl	80161f8 <lwip_htonl>
 801ae1e:	60b0      	str	r0, [r6, #8]
 801ae20:	4b72      	ldr	r3, [pc, #456]	; (801afec <tcp_input+0x2a0>)
 801ae22:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ae24:	682e      	ldr	r6, [r5, #0]
 801ae26:	89f0      	ldrh	r0, [r6, #14]
 801ae28:	f7fb f9e3 	bl	80161f2 <lwip_htons>
 801ae2c:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 801ae2e:	682b      	ldr	r3, [r5, #0]
 801ae30:	8998      	ldrh	r0, [r3, #12]
 801ae32:	f7fb f9de 	bl	80161f2 <lwip_htons>
 801ae36:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 801ae3a:	4a6d      	ldr	r2, [pc, #436]	; (801aff0 <tcp_input+0x2a4>)
 801ae3c:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801ae3e:	8922      	ldrh	r2, [r4, #8]
 801ae40:	f013 0303 	ands.w	r3, r3, #3
 801ae44:	bf18      	it	ne
 801ae46:	2301      	movne	r3, #1
 801ae48:	4413      	add	r3, r2
 801ae4a:	4a6a      	ldr	r2, [pc, #424]	; (801aff4 <tcp_input+0x2a8>)
 801ae4c:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae4e:	4b6a      	ldr	r3, [pc, #424]	; (801aff8 <tcp_input+0x2ac>)
 801ae50:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 801ae52:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae54:	e033      	b.n	801aebe <tcp_input+0x172>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ae56:	4b69      	ldr	r3, [pc, #420]	; (801affc <tcp_input+0x2b0>)
 801ae58:	22b2      	movs	r2, #178	; 0xb2
 801ae5a:	4969      	ldr	r1, [pc, #420]	; (801b000 <tcp_input+0x2b4>)
 801ae5c:	4869      	ldr	r0, [pc, #420]	; (801b004 <tcp_input+0x2b8>)
 801ae5e:	f004 fa0e 	bl	801f27e <iprintf>
 801ae62:	e7a6      	b.n	801adb2 <tcp_input+0x66>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801ae64:	6842      	ldr	r2, [r0, #4]
 801ae66:	4b5e      	ldr	r3, [pc, #376]	; (801afe0 <tcp_input+0x294>)
 801ae68:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 801ae6a:	4269      	negs	r1, r5
 801ae6c:	b209      	sxth	r1, r1
 801ae6e:	f7fd fad9 	bl	8018424 <pbuf_header>
    p->tot_len -= opt2len;
 801ae72:	8923      	ldrh	r3, [r4, #8]
 801ae74:	1b5d      	subs	r5, r3, r5
 801ae76:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ae78:	8963      	ldrh	r3, [r4, #10]
 801ae7a:	b95b      	cbnz	r3, 801ae94 <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801ae7c:	8922      	ldrh	r2, [r4, #8]
 801ae7e:	6823      	ldr	r3, [r4, #0]
 801ae80:	891b      	ldrh	r3, [r3, #8]
 801ae82:	429a      	cmp	r2, r3
 801ae84:	d0b5      	beq.n	801adf2 <tcp_input+0xa6>
 801ae86:	4b5d      	ldr	r3, [pc, #372]	; (801affc <tcp_input+0x2b0>)
 801ae88:	22d0      	movs	r2, #208	; 0xd0
 801ae8a:	495f      	ldr	r1, [pc, #380]	; (801b008 <tcp_input+0x2bc>)
 801ae8c:	485d      	ldr	r0, [pc, #372]	; (801b004 <tcp_input+0x2b8>)
 801ae8e:	f004 f9f6 	bl	801f27e <iprintf>
 801ae92:	e7ae      	b.n	801adf2 <tcp_input+0xa6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ae94:	4b59      	ldr	r3, [pc, #356]	; (801affc <tcp_input+0x2b0>)
 801ae96:	22cf      	movs	r2, #207	; 0xcf
 801ae98:	495c      	ldr	r1, [pc, #368]	; (801b00c <tcp_input+0x2c0>)
 801ae9a:	485a      	ldr	r0, [pc, #360]	; (801b004 <tcp_input+0x2b8>)
 801ae9c:	f004 f9ef 	bl	801f27e <iprintf>
 801aea0:	e7ec      	b.n	801ae7c <tcp_input+0x130>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801aea2:	7d2b      	ldrb	r3, [r5, #20]
 801aea4:	2b0a      	cmp	r3, #10
 801aea6:	d016      	beq.n	801aed6 <tcp_input+0x18a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801aea8:	7d2b      	ldrb	r3, [r5, #20]
 801aeaa:	2b01      	cmp	r3, #1
 801aeac:	d01a      	beq.n	801aee4 <tcp_input+0x198>
    if (pcb->remote_port == tcphdr->src &&
 801aeae:	8b29      	ldrh	r1, [r5, #24]
 801aeb0:	4b48      	ldr	r3, [pc, #288]	; (801afd4 <tcp_input+0x288>)
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	881a      	ldrh	r2, [r3, #0]
 801aeb6:	4291      	cmp	r1, r2
 801aeb8:	d01b      	beq.n	801aef2 <tcp_input+0x1a6>
    prev = pcb;
 801aeba:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801aebc:	68ed      	ldr	r5, [r5, #12]
 801aebe:	2d00      	cmp	r5, #0
 801aec0:	d032      	beq.n	801af28 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801aec2:	7d2b      	ldrb	r3, [r5, #20]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d1ec      	bne.n	801aea2 <tcp_input+0x156>
 801aec8:	4b4c      	ldr	r3, [pc, #304]	; (801affc <tcp_input+0x2b0>)
 801aeca:	22e2      	movs	r2, #226	; 0xe2
 801aecc:	4950      	ldr	r1, [pc, #320]	; (801b010 <tcp_input+0x2c4>)
 801aece:	484d      	ldr	r0, [pc, #308]	; (801b004 <tcp_input+0x2b8>)
 801aed0:	f004 f9d5 	bl	801f27e <iprintf>
 801aed4:	e7e5      	b.n	801aea2 <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801aed6:	4b49      	ldr	r3, [pc, #292]	; (801affc <tcp_input+0x2b0>)
 801aed8:	22e3      	movs	r2, #227	; 0xe3
 801aeda:	494e      	ldr	r1, [pc, #312]	; (801b014 <tcp_input+0x2c8>)
 801aedc:	4849      	ldr	r0, [pc, #292]	; (801b004 <tcp_input+0x2b8>)
 801aede:	f004 f9ce 	bl	801f27e <iprintf>
 801aee2:	e7e1      	b.n	801aea8 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801aee4:	4b45      	ldr	r3, [pc, #276]	; (801affc <tcp_input+0x2b0>)
 801aee6:	22e4      	movs	r2, #228	; 0xe4
 801aee8:	494b      	ldr	r1, [pc, #300]	; (801b018 <tcp_input+0x2cc>)
 801aeea:	4846      	ldr	r0, [pc, #280]	; (801b004 <tcp_input+0x2b8>)
 801aeec:	f004 f9c7 	bl	801f27e <iprintf>
 801aef0:	e7dd      	b.n	801aeae <tcp_input+0x162>
        pcb->local_port == tcphdr->dest &&
 801aef2:	8aea      	ldrh	r2, [r5, #22]
 801aef4:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 801aef6:	429a      	cmp	r2, r3
 801aef8:	d1df      	bne.n	801aeba <tcp_input+0x16e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801aefa:	686a      	ldr	r2, [r5, #4]
 801aefc:	4b36      	ldr	r3, [pc, #216]	; (801afd8 <tcp_input+0x28c>)
 801aefe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801af00:	429a      	cmp	r2, r3
 801af02:	d1da      	bne.n	801aeba <tcp_input+0x16e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801af04:	682a      	ldr	r2, [r5, #0]
 801af06:	4b34      	ldr	r3, [pc, #208]	; (801afd8 <tcp_input+0x28c>)
 801af08:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801af0a:	429a      	cmp	r2, r3
 801af0c:	d1d5      	bne.n	801aeba <tcp_input+0x16e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801af0e:	68eb      	ldr	r3, [r5, #12]
 801af10:	429d      	cmp	r5, r3
 801af12:	d04d      	beq.n	801afb0 <tcp_input+0x264>
      if (prev != NULL) {
 801af14:	b12e      	cbz	r6, 801af22 <tcp_input+0x1d6>
        prev->next = pcb->next;
 801af16:	68eb      	ldr	r3, [r5, #12]
 801af18:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 801af1a:	4b37      	ldr	r3, [pc, #220]	; (801aff8 <tcp_input+0x2ac>)
 801af1c:	681a      	ldr	r2, [r3, #0]
 801af1e:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 801af20:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801af22:	68eb      	ldr	r3, [r5, #12]
 801af24:	429d      	cmp	r5, r3
 801af26:	d04a      	beq.n	801afbe <tcp_input+0x272>
  if (pcb == NULL) {
 801af28:	2d00      	cmp	r5, #0
 801af2a:	d04f      	beq.n	801afcc <tcp_input+0x280>
  if (pcb != NULL) {
 801af2c:	2d00      	cmp	r5, #0
 801af2e:	f000 8168 	beq.w	801b202 <tcp_input+0x4b6>
    inseg.next = NULL;
 801af32:	4a3a      	ldr	r2, [pc, #232]	; (801b01c <tcp_input+0x2d0>)
 801af34:	2300      	movs	r3, #0
 801af36:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 801af38:	8921      	ldrh	r1, [r4, #8]
 801af3a:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 801af3c:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 801af3e:	4925      	ldr	r1, [pc, #148]	; (801afd4 <tcp_input+0x288>)
 801af40:	6809      	ldr	r1, [r1, #0]
 801af42:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 801af44:	4a36      	ldr	r2, [pc, #216]	; (801b020 <tcp_input+0x2d4>)
 801af46:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 801af48:	4a36      	ldr	r2, [pc, #216]	; (801b024 <tcp_input+0x2d8>)
 801af4a:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 801af4c:	4a36      	ldr	r2, [pc, #216]	; (801b028 <tcp_input+0x2dc>)
 801af4e:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 801af50:	4b27      	ldr	r3, [pc, #156]	; (801aff0 <tcp_input+0x2a4>)
 801af52:	781b      	ldrb	r3, [r3, #0]
 801af54:	f013 0f08 	tst.w	r3, #8
 801af58:	d003      	beq.n	801af62 <tcp_input+0x216>
      p->flags |= PBUF_FLAG_PUSH;
 801af5a:	7b63      	ldrb	r3, [r4, #13]
 801af5c:	f043 0301 	orr.w	r3, r3, #1
 801af60:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 801af62:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801af64:	2b00      	cmp	r3, #0
 801af66:	f000 80b9 	beq.w	801b0dc <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801af6a:	4628      	mov	r0, r5
 801af6c:	f7fe fb24 	bl	80195b8 <tcp_process_refused_data>
 801af70:	f110 0f0d 	cmn.w	r0, #13
 801af74:	d008      	beq.n	801af88 <tcp_input+0x23c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801af76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801af78:	2b00      	cmp	r3, #0
 801af7a:	f000 80af 	beq.w	801b0dc <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801af7e:	4b1d      	ldr	r3, [pc, #116]	; (801aff4 <tcp_input+0x2a8>)
 801af80:	881b      	ldrh	r3, [r3, #0]
 801af82:	2b00      	cmp	r3, #0
 801af84:	f000 80aa 	beq.w	801b0dc <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 801af88:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	f000 80a2 	beq.w	801b0d4 <tcp_input+0x388>
    tcp_input_pcb = NULL;
 801af90:	2300      	movs	r3, #0
 801af92:	4a26      	ldr	r2, [pc, #152]	; (801b02c <tcp_input+0x2e0>)
 801af94:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 801af96:	4a22      	ldr	r2, [pc, #136]	; (801b020 <tcp_input+0x2d4>)
 801af98:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 801af9a:	4b20      	ldr	r3, [pc, #128]	; (801b01c <tcp_input+0x2d0>)
 801af9c:	6858      	ldr	r0, [r3, #4]
 801af9e:	2800      	cmp	r0, #0
 801afa0:	f43f af1f 	beq.w	801ade2 <tcp_input+0x96>
      pbuf_free(inseg.p);
 801afa4:	f7fd fa48 	bl	8018438 <pbuf_free>
      inseg.p = NULL;
 801afa8:	2200      	movs	r2, #0
 801afaa:	4b1c      	ldr	r3, [pc, #112]	; (801b01c <tcp_input+0x2d0>)
 801afac:	605a      	str	r2, [r3, #4]
 801afae:	e718      	b.n	801ade2 <tcp_input+0x96>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801afb0:	4b12      	ldr	r3, [pc, #72]	; (801affc <tcp_input+0x2b0>)
 801afb2:	22ec      	movs	r2, #236	; 0xec
 801afb4:	491e      	ldr	r1, [pc, #120]	; (801b030 <tcp_input+0x2e4>)
 801afb6:	4813      	ldr	r0, [pc, #76]	; (801b004 <tcp_input+0x2b8>)
 801afb8:	f004 f961 	bl	801f27e <iprintf>
 801afbc:	e7aa      	b.n	801af14 <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801afbe:	4b0f      	ldr	r3, [pc, #60]	; (801affc <tcp_input+0x2b0>)
 801afc0:	22f4      	movs	r2, #244	; 0xf4
 801afc2:	491c      	ldr	r1, [pc, #112]	; (801b034 <tcp_input+0x2e8>)
 801afc4:	480f      	ldr	r0, [pc, #60]	; (801b004 <tcp_input+0x2b8>)
 801afc6:	f004 f95a 	bl	801f27e <iprintf>
 801afca:	e7ad      	b.n	801af28 <tcp_input+0x1dc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801afcc:	4b1a      	ldr	r3, [pc, #104]	; (801b038 <tcp_input+0x2ec>)
 801afce:	681d      	ldr	r5, [r3, #0]
 801afd0:	e03b      	b.n	801b04a <tcp_input+0x2fe>
 801afd2:	bf00      	nop
 801afd4:	20009504 	.word	0x20009504
 801afd8:	2000a254 	.word	0x2000a254
 801afdc:	20009510 	.word	0x20009510
 801afe0:	2000950c 	.word	0x2000950c
 801afe4:	20009508 	.word	0x20009508
 801afe8:	200094fc 	.word	0x200094fc
 801afec:	200094d8 	.word	0x200094d8
 801aff0:	200094dc 	.word	0x200094dc
 801aff4:	20009512 	.word	0x20009512
 801aff8:	2000ecb8 	.word	0x2000ecb8
 801affc:	0802422c 	.word	0x0802422c
 801b000:	08024064 	.word	0x08024064
 801b004:	0801fe1c 	.word	0x0801fe1c
 801b008:	08024080 	.word	0x08024080
 801b00c:	08024074 	.word	0x08024074
 801b010:	080240a0 	.word	0x080240a0
 801b014:	080240c8 	.word	0x080240c8
 801b018:	080240f4 	.word	0x080240f4
 801b01c:	200094e0 	.word	0x200094e0
 801b020:	200094f4 	.word	0x200094f4
 801b024:	200094f8 	.word	0x200094f8
 801b028:	200094f0 	.word	0x200094f0
 801b02c:	2000eccc 	.word	0x2000eccc
 801b030:	0802411c 	.word	0x0802411c
 801b034:	08024148 	.word	0x08024148
 801b038:	2000ecc8 	.word	0x2000ecc8
      if (pcb->remote_port == tcphdr->src &&
 801b03c:	8b29      	ldrh	r1, [r5, #24]
 801b03e:	4b80      	ldr	r3, [pc, #512]	; (801b240 <tcp_input+0x4f4>)
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	881a      	ldrh	r2, [r3, #0]
 801b044:	4291      	cmp	r1, r2
 801b046:	d00b      	beq.n	801b060 <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b048:	68ed      	ldr	r5, [r5, #12]
 801b04a:	b1f5      	cbz	r5, 801b08a <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b04c:	7d2b      	ldrb	r3, [r5, #20]
 801b04e:	2b0a      	cmp	r3, #10
 801b050:	d0f4      	beq.n	801b03c <tcp_input+0x2f0>
 801b052:	4b7c      	ldr	r3, [pc, #496]	; (801b244 <tcp_input+0x4f8>)
 801b054:	22fe      	movs	r2, #254	; 0xfe
 801b056:	497c      	ldr	r1, [pc, #496]	; (801b248 <tcp_input+0x4fc>)
 801b058:	487c      	ldr	r0, [pc, #496]	; (801b24c <tcp_input+0x500>)
 801b05a:	f004 f910 	bl	801f27e <iprintf>
 801b05e:	e7ed      	b.n	801b03c <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 801b060:	8aea      	ldrh	r2, [r5, #22]
 801b062:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 801b064:	429a      	cmp	r2, r3
 801b066:	d1ef      	bne.n	801b048 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b068:	686a      	ldr	r2, [r5, #4]
 801b06a:	4b79      	ldr	r3, [pc, #484]	; (801b250 <tcp_input+0x504>)
 801b06c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b06e:	429a      	cmp	r2, r3
 801b070:	d1ea      	bne.n	801b048 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b072:	682a      	ldr	r2, [r5, #0]
 801b074:	4b76      	ldr	r3, [pc, #472]	; (801b250 <tcp_input+0x504>)
 801b076:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b078:	429a      	cmp	r2, r3
 801b07a:	d1e5      	bne.n	801b048 <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 801b07c:	4628      	mov	r0, r5
 801b07e:	f7fe fd8f 	bl	8019ba0 <tcp_timewait_input>
        pbuf_free(p);
 801b082:	4620      	mov	r0, r4
 801b084:	f7fd f9d8 	bl	8018438 <pbuf_free>
        return;
 801b088:	e6ab      	b.n	801ade2 <tcp_input+0x96>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b08a:	4b72      	ldr	r3, [pc, #456]	; (801b254 <tcp_input+0x508>)
 801b08c:	681e      	ldr	r6, [r3, #0]
 801b08e:	4630      	mov	r0, r6
    prev = NULL;
 801b090:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b092:	e001      	b.n	801b098 <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 801b094:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b096:	68c0      	ldr	r0, [r0, #12]
 801b098:	b168      	cbz	r0, 801b0b6 <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 801b09a:	8ac2      	ldrh	r2, [r0, #22]
 801b09c:	4b68      	ldr	r3, [pc, #416]	; (801b240 <tcp_input+0x4f4>)
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	885b      	ldrh	r3, [r3, #2]
 801b0a2:	429a      	cmp	r2, r3
 801b0a4:	d1f6      	bne.n	801b094 <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b0a6:	6803      	ldr	r3, [r0, #0]
 801b0a8:	4a69      	ldr	r2, [pc, #420]	; (801b250 <tcp_input+0x504>)
 801b0aa:	6952      	ldr	r2, [r2, #20]
 801b0ac:	4293      	cmp	r3, r2
 801b0ae:	d002      	beq.n	801b0b6 <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b0b0:	b108      	cbz	r0, 801b0b6 <tcp_input+0x36a>
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d1ee      	bne.n	801b094 <tcp_input+0x348>
    if (lpcb != NULL) {
 801b0b6:	2800      	cmp	r0, #0
 801b0b8:	f43f af38 	beq.w	801af2c <tcp_input+0x1e0>
      if (prev != NULL) {
 801b0bc:	b121      	cbz	r1, 801b0c8 <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b0be:	68c3      	ldr	r3, [r0, #12]
 801b0c0:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b0c2:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b0c4:	4b63      	ldr	r3, [pc, #396]	; (801b254 <tcp_input+0x508>)
 801b0c6:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 801b0c8:	f7fe fdb2 	bl	8019c30 <tcp_listen_input>
      pbuf_free(p);
 801b0cc:	4620      	mov	r0, r4
 801b0ce:	f7fd f9b3 	bl	8018438 <pbuf_free>
      return;
 801b0d2:	e686      	b.n	801ade2 <tcp_input+0x96>
          tcp_send_empty_ack(pcb);
 801b0d4:	4628      	mov	r0, r5
 801b0d6:	f000 fde9 	bl	801bcac <tcp_send_empty_ack>
 801b0da:	e759      	b.n	801af90 <tcp_input+0x244>
    tcp_input_pcb = pcb;
 801b0dc:	4b5e      	ldr	r3, [pc, #376]	; (801b258 <tcp_input+0x50c>)
 801b0de:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 801b0e0:	4628      	mov	r0, r5
 801b0e2:	f7ff fb97 	bl	801a814 <tcp_process>
    if (err != ERR_ABRT) {
 801b0e6:	f110 0f0d 	cmn.w	r0, #13
 801b0ea:	f43f af51 	beq.w	801af90 <tcp_input+0x244>
      if (recv_flags & TF_RESET) {
 801b0ee:	4b5b      	ldr	r3, [pc, #364]	; (801b25c <tcp_input+0x510>)
 801b0f0:	781b      	ldrb	r3, [r3, #0]
 801b0f2:	f013 0f08 	tst.w	r3, #8
 801b0f6:	d00f      	beq.n	801b118 <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b0f8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 801b0fc:	b11b      	cbz	r3, 801b106 <tcp_input+0x3ba>
 801b0fe:	f06f 010d 	mvn.w	r1, #13
 801b102:	6928      	ldr	r0, [r5, #16]
 801b104:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b106:	4629      	mov	r1, r5
 801b108:	4855      	ldr	r0, [pc, #340]	; (801b260 <tcp_input+0x514>)
 801b10a:	f7fe f939 	bl	8019380 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 801b10e:	4629      	mov	r1, r5
 801b110:	2000      	movs	r0, #0
 801b112:	f7fc ffc1 	bl	8018098 <memp_free>
 801b116:	e73b      	b.n	801af90 <tcp_input+0x244>
        if (recv_acked > 0) {
 801b118:	4b52      	ldr	r3, [pc, #328]	; (801b264 <tcp_input+0x518>)
 801b11a:	881a      	ldrh	r2, [r3, #0]
 801b11c:	b162      	cbz	r2, 801b138 <tcp_input+0x3ec>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b11e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801b120:	2b00      	cmp	r3, #0
 801b122:	d048      	beq.n	801b1b6 <tcp_input+0x46a>
 801b124:	4629      	mov	r1, r5
 801b126:	6928      	ldr	r0, [r5, #16]
 801b128:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801b12a:	f110 0f0d 	cmn.w	r0, #13
 801b12e:	f43f af2f 	beq.w	801af90 <tcp_input+0x244>
          recv_acked = 0;
 801b132:	2200      	movs	r2, #0
 801b134:	4b4b      	ldr	r3, [pc, #300]	; (801b264 <tcp_input+0x518>)
 801b136:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b138:	4628      	mov	r0, r5
 801b13a:	f7fe fd0f 	bl	8019b5c <tcp_input_delayed_close>
 801b13e:	2800      	cmp	r0, #0
 801b140:	f47f af26 	bne.w	801af90 <tcp_input+0x244>
        if (recv_data != NULL) {
 801b144:	4b48      	ldr	r3, [pc, #288]	; (801b268 <tcp_input+0x51c>)
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	b1eb      	cbz	r3, 801b186 <tcp_input+0x43a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b14a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801b14c:	b133      	cbz	r3, 801b15c <tcp_input+0x410>
 801b14e:	4b3d      	ldr	r3, [pc, #244]	; (801b244 <tcp_input+0x4f8>)
 801b150:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 801b154:	4945      	ldr	r1, [pc, #276]	; (801b26c <tcp_input+0x520>)
 801b156:	483d      	ldr	r0, [pc, #244]	; (801b24c <tcp_input+0x500>)
 801b158:	f004 f891 	bl	801f27e <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b15c:	7eab      	ldrb	r3, [r5, #26]
 801b15e:	f013 0f10 	tst.w	r3, #16
 801b162:	d12a      	bne.n	801b1ba <tcp_input+0x46e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b164:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 801b168:	b37c      	cbz	r4, 801b1ca <tcp_input+0x47e>
 801b16a:	2300      	movs	r3, #0
 801b16c:	4a3e      	ldr	r2, [pc, #248]	; (801b268 <tcp_input+0x51c>)
 801b16e:	6812      	ldr	r2, [r2, #0]
 801b170:	4629      	mov	r1, r5
 801b172:	6928      	ldr	r0, [r5, #16]
 801b174:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 801b176:	f110 0f0d 	cmn.w	r0, #13
 801b17a:	f43f af09 	beq.w	801af90 <tcp_input+0x244>
          if (err != ERR_OK) {
 801b17e:	b110      	cbz	r0, 801b186 <tcp_input+0x43a>
            pcb->refused_data = recv_data;
 801b180:	4b39      	ldr	r3, [pc, #228]	; (801b268 <tcp_input+0x51c>)
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 801b186:	4b35      	ldr	r3, [pc, #212]	; (801b25c <tcp_input+0x510>)
 801b188:	781b      	ldrb	r3, [r3, #0]
 801b18a:	f013 0f20 	tst.w	r3, #32
 801b18e:	d005      	beq.n	801b19c <tcp_input+0x450>
          if (pcb->refused_data != NULL) {
 801b190:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801b192:	b313      	cbz	r3, 801b1da <tcp_input+0x48e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b194:	7b5a      	ldrb	r2, [r3, #13]
 801b196:	f042 0220 	orr.w	r2, r2, #32
 801b19a:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801b19c:	2200      	movs	r2, #0
 801b19e:	4b2e      	ldr	r3, [pc, #184]	; (801b258 <tcp_input+0x50c>)
 801b1a0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b1a2:	4628      	mov	r0, r5
 801b1a4:	f7fe fcda 	bl	8019b5c <tcp_input_delayed_close>
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	f47f aef1 	bne.w	801af90 <tcp_input+0x244>
        tcp_output(pcb);
 801b1ae:	4628      	mov	r0, r5
 801b1b0:	f000 fdb6 	bl	801bd20 <tcp_output>
 801b1b4:	e6ec      	b.n	801af90 <tcp_input+0x244>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b1b6:	2000      	movs	r0, #0
 801b1b8:	e7b7      	b.n	801b12a <tcp_input+0x3de>
            pbuf_free(recv_data);
 801b1ba:	4b2b      	ldr	r3, [pc, #172]	; (801b268 <tcp_input+0x51c>)
 801b1bc:	6818      	ldr	r0, [r3, #0]
 801b1be:	f7fd f93b 	bl	8018438 <pbuf_free>
            tcp_abort(pcb);
 801b1c2:	4628      	mov	r0, r5
 801b1c4:	f7fe fb2a 	bl	801981c <tcp_abort>
            goto aborted;
 801b1c8:	e6e2      	b.n	801af90 <tcp_input+0x244>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b1ca:	2300      	movs	r3, #0
 801b1cc:	4a26      	ldr	r2, [pc, #152]	; (801b268 <tcp_input+0x51c>)
 801b1ce:	6812      	ldr	r2, [r2, #0]
 801b1d0:	4629      	mov	r1, r5
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	f7fe f9de 	bl	8019594 <tcp_recv_null>
 801b1d8:	e7cd      	b.n	801b176 <tcp_input+0x42a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b1da:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801b1dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b1e0:	d001      	beq.n	801b1e6 <tcp_input+0x49a>
              pcb->rcv_wnd++;
 801b1e2:	3301      	adds	r3, #1
 801b1e4:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801b1e6:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 801b1ea:	b144      	cbz	r4, 801b1fe <tcp_input+0x4b2>
 801b1ec:	2300      	movs	r3, #0
 801b1ee:	461a      	mov	r2, r3
 801b1f0:	4629      	mov	r1, r5
 801b1f2:	6928      	ldr	r0, [r5, #16]
 801b1f4:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 801b1f6:	f110 0f0d 	cmn.w	r0, #13
 801b1fa:	d1cf      	bne.n	801b19c <tcp_input+0x450>
 801b1fc:	e6c8      	b.n	801af90 <tcp_input+0x244>
            TCP_EVENT_CLOSED(pcb, err);
 801b1fe:	2000      	movs	r0, #0
 801b200:	e7f9      	b.n	801b1f6 <tcp_input+0x4aa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b202:	4b0f      	ldr	r3, [pc, #60]	; (801b240 <tcp_input+0x4f4>)
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	8998      	ldrh	r0, [r3, #12]
 801b208:	f7fa fff3 	bl	80161f2 <lwip_htons>
 801b20c:	f010 0f04 	tst.w	r0, #4
 801b210:	d003      	beq.n	801b21a <tcp_input+0x4ce>
    pbuf_free(p);
 801b212:	4620      	mov	r0, r4
 801b214:	f7fd f910 	bl	8018438 <pbuf_free>
 801b218:	e5e3      	b.n	801ade2 <tcp_input+0x96>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b21a:	4b09      	ldr	r3, [pc, #36]	; (801b240 <tcp_input+0x4f4>)
 801b21c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801b21e:	4a14      	ldr	r2, [pc, #80]	; (801b270 <tcp_input+0x524>)
 801b220:	4914      	ldr	r1, [pc, #80]	; (801b274 <tcp_input+0x528>)
 801b222:	8808      	ldrh	r0, [r1, #0]
 801b224:	4914      	ldr	r1, [pc, #80]	; (801b278 <tcp_input+0x52c>)
 801b226:	6809      	ldr	r1, [r1, #0]
 801b228:	881d      	ldrh	r5, [r3, #0]
 801b22a:	9501      	str	r5, [sp, #4]
 801b22c:	885b      	ldrh	r3, [r3, #2]
 801b22e:	9300      	str	r3, [sp, #0]
 801b230:	4613      	mov	r3, r2
 801b232:	3204      	adds	r2, #4
 801b234:	4401      	add	r1, r0
 801b236:	4811      	ldr	r0, [pc, #68]	; (801b27c <tcp_input+0x530>)
 801b238:	6800      	ldr	r0, [r0, #0]
 801b23a:	f000 fecd 	bl	801bfd8 <tcp_rst>
 801b23e:	e7e8      	b.n	801b212 <tcp_input+0x4c6>
 801b240:	20009504 	.word	0x20009504
 801b244:	0802422c 	.word	0x0802422c
 801b248:	08024174 	.word	0x08024174
 801b24c:	0801fe1c 	.word	0x0801fe1c
 801b250:	2000a254 	.word	0x2000a254
 801b254:	2000ecc0 	.word	0x2000ecc0
 801b258:	2000eccc 	.word	0x2000eccc
 801b25c:	200094f8 	.word	0x200094f8
 801b260:	2000ecb8 	.word	0x2000ecb8
 801b264:	200094f0 	.word	0x200094f0
 801b268:	200094f4 	.word	0x200094f4
 801b26c:	080241a4 	.word	0x080241a4
 801b270:	2000a264 	.word	0x2000a264
 801b274:	20009512 	.word	0x20009512
 801b278:	200094fc 	.word	0x200094fc
 801b27c:	200094d8 	.word	0x200094d8

0801b280 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801b280:	4a02      	ldr	r2, [pc, #8]	; (801b28c <tcp_trigger_input_pcb_close+0xc>)
 801b282:	7813      	ldrb	r3, [r2, #0]
 801b284:	f043 0310 	orr.w	r3, r3, #16
 801b288:	7013      	strb	r3, [r2, #0]
 801b28a:	4770      	bx	lr
 801b28c:	200094f8 	.word	0x200094f8

0801b290 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801b290:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801b292:	7d03      	ldrb	r3, [r0, #20]
 801b294:	2b04      	cmp	r3, #4
 801b296:	d005      	beq.n	801b2a4 <tcp_write_checks+0x14>
 801b298:	2b07      	cmp	r3, #7
 801b29a:	d003      	beq.n	801b2a4 <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 801b29c:	2b02      	cmp	r3, #2
 801b29e:	d001      	beq.n	801b2a4 <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 801b2a0:	2b03      	cmp	r3, #3
 801b2a2:	d139      	bne.n	801b318 <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 801b2a4:	2900      	cmp	r1, #0
 801b2a6:	d03a      	beq.n	801b31e <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801b2a8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801b2ac:	4299      	cmp	r1, r3
 801b2ae:	d808      	bhi.n	801b2c2 <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801b2b0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801b2b4:	2b0a      	cmp	r3, #10
 801b2b6:	d80b      	bhi.n	801b2d0 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 801b2b8:	b1f3      	cbz	r3, 801b2f8 <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b2ba:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801b2bc:	b17b      	cbz	r3, 801b2de <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801b2be:	2000      	movs	r0, #0
 801b2c0:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 801b2c2:	7e83      	ldrb	r3, [r0, #26]
 801b2c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b2c8:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 801b2ca:	f04f 30ff 	mov.w	r0, #4294967295
 801b2ce:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 801b2d0:	7e83      	ldrb	r3, [r0, #26]
 801b2d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b2d6:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 801b2d8:	f04f 30ff 	mov.w	r0, #4294967295
 801b2dc:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b2de:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801b2e0:	b10b      	cbz	r3, 801b2e6 <tcp_write_checks+0x56>
  return ERR_OK;
 801b2e2:	2000      	movs	r0, #0
 801b2e4:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b2e6:	4b0f      	ldr	r3, [pc, #60]	; (801b324 <tcp_write_checks+0x94>)
 801b2e8:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801b2ec:	490e      	ldr	r1, [pc, #56]	; (801b328 <tcp_write_checks+0x98>)
 801b2ee:	480f      	ldr	r0, [pc, #60]	; (801b32c <tcp_write_checks+0x9c>)
 801b2f0:	f003 ffc5 	bl	801f27e <iprintf>
  return ERR_OK;
 801b2f4:	2000      	movs	r0, #0
 801b2f6:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b2f8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801b2fa:	b143      	cbz	r3, 801b30e <tcp_write_checks+0x7e>
 801b2fc:	4b09      	ldr	r3, [pc, #36]	; (801b324 <tcp_write_checks+0x94>)
 801b2fe:	f240 1259 	movw	r2, #345	; 0x159
 801b302:	490b      	ldr	r1, [pc, #44]	; (801b330 <tcp_write_checks+0xa0>)
 801b304:	4809      	ldr	r0, [pc, #36]	; (801b32c <tcp_write_checks+0x9c>)
 801b306:	f003 ffba 	bl	801f27e <iprintf>
  return ERR_OK;
 801b30a:	2000      	movs	r0, #0
 801b30c:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b30e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801b310:	2b00      	cmp	r3, #0
 801b312:	d1f3      	bne.n	801b2fc <tcp_write_checks+0x6c>
  return ERR_OK;
 801b314:	2000      	movs	r0, #0
}
 801b316:	bd08      	pop	{r3, pc}
    return ERR_CONN;
 801b318:	f06f 000a 	mvn.w	r0, #10
 801b31c:	bd08      	pop	{r3, pc}
    return ERR_OK;
 801b31e:	2000      	movs	r0, #0
 801b320:	bd08      	pop	{r3, pc}
 801b322:	bf00      	nop
 801b324:	0802473c 	.word	0x0802473c
 801b328:	08024770 	.word	0x08024770
 801b32c:	0801fe1c 	.word	0x0801fe1c
 801b330:	080247ac 	.word	0x080247ac

0801b334 <tcp_pbuf_prealloc>:
{
 801b334:	b570      	push	{r4, r5, r6, lr}
 801b336:	460c      	mov	r4, r1
 801b338:	461e      	mov	r6, r3
 801b33a:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 801b33e:	4291      	cmp	r1, r2
 801b340:	d215      	bcs.n	801b36e <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b342:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801b346:	f011 0f02 	tst.w	r1, #2
 801b34a:	d108      	bne.n	801b35e <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 801b34c:	9904      	ldr	r1, [sp, #16]
 801b34e:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b350:	f011 0f40 	tst.w	r1, #64	; 0x40
 801b354:	d126      	bne.n	801b3a4 <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 801b356:	b113      	cbz	r3, 801b35e <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 801b358:	9b04      	ldr	r3, [sp, #16]
 801b35a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 801b35c:	b1e3      	cbz	r3, 801b398 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801b35e:	f204 21d3 	addw	r1, r4, #723	; 0x2d3
 801b362:	f021 0103 	bic.w	r1, r1, #3
 801b366:	428a      	cmp	r2, r1
 801b368:	bf28      	it	cs
 801b36a:	460a      	movcs	r2, r1
 801b36c:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801b36e:	2200      	movs	r2, #0
 801b370:	f7fd f8ce 	bl	8018510 <pbuf_alloc>
  if (p == NULL) {
 801b374:	4605      	mov	r5, r0
 801b376:	b168      	cbz	r0, 801b394 <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801b378:	6803      	ldr	r3, [r0, #0]
 801b37a:	b133      	cbz	r3, 801b38a <tcp_pbuf_prealloc+0x56>
 801b37c:	4b0a      	ldr	r3, [pc, #40]	; (801b3a8 <tcp_pbuf_prealloc+0x74>)
 801b37e:	f44f 7288 	mov.w	r2, #272	; 0x110
 801b382:	490a      	ldr	r1, [pc, #40]	; (801b3ac <tcp_pbuf_prealloc+0x78>)
 801b384:	480a      	ldr	r0, [pc, #40]	; (801b3b0 <tcp_pbuf_prealloc+0x7c>)
 801b386:	f003 ff7a 	bl	801f27e <iprintf>
  *oversize = p->len - length;
 801b38a:	896b      	ldrh	r3, [r5, #10]
 801b38c:	1b1b      	subs	r3, r3, r4
 801b38e:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 801b390:	812c      	strh	r4, [r5, #8]
 801b392:	816c      	strh	r4, [r5, #10]
}
 801b394:	4628      	mov	r0, r5
 801b396:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 801b398:	9b04      	ldr	r3, [sp, #16]
 801b39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d1de      	bne.n	801b35e <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 801b3a0:	4621      	mov	r1, r4
 801b3a2:	e7e4      	b.n	801b36e <tcp_pbuf_prealloc+0x3a>
 801b3a4:	4621      	mov	r1, r4
 801b3a6:	e7e2      	b.n	801b36e <tcp_pbuf_prealloc+0x3a>
 801b3a8:	0802473c 	.word	0x0802473c
 801b3ac:	0802454c 	.word	0x0802454c
 801b3b0:	0801fe1c 	.word	0x0801fe1c

0801b3b4 <tcp_create_segment>:
{
 801b3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3b8:	4680      	mov	r8, r0
 801b3ba:	460e      	mov	r6, r1
 801b3bc:	4617      	mov	r7, r2
 801b3be:	4699      	mov	r9, r3
 801b3c0:	f89d a020 	ldrb.w	sl, [sp, #32]
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b3c4:	f01a 0f01 	tst.w	sl, #1
 801b3c8:	d03c      	beq.n	801b444 <tcp_create_segment+0x90>
 801b3ca:	2504      	movs	r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801b3cc:	2002      	movs	r0, #2
 801b3ce:	f7fc fe49 	bl	8018064 <memp_malloc>
 801b3d2:	4604      	mov	r4, r0
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	d037      	beq.n	801b448 <tcp_create_segment+0x94>
  seg->flags = optflags;
 801b3d8:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801b3dc:	2300      	movs	r3, #0
 801b3de:	6003      	str	r3, [r0, #0]
  seg->p = p;
 801b3e0:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b3e2:	8933      	ldrh	r3, [r6, #8]
 801b3e4:	fa1f fa85 	uxth.w	sl, r5
 801b3e8:	4553      	cmp	r3, sl
 801b3ea:	d331      	bcc.n	801b450 <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 801b3ec:	8933      	ldrh	r3, [r6, #8]
 801b3ee:	eba3 030a 	sub.w	r3, r3, sl
 801b3f2:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 801b3f4:	2114      	movs	r1, #20
 801b3f6:	4630      	mov	r0, r6
 801b3f8:	f7fd f814 	bl	8018424 <pbuf_header>
 801b3fc:	bb78      	cbnz	r0, 801b45e <tcp_create_segment+0xaa>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801b3fe:	6863      	ldr	r3, [r4, #4]
 801b400:	685e      	ldr	r6, [r3, #4]
 801b402:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801b404:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 801b408:	f7fa fef3 	bl	80161f2 <lwip_htons>
 801b40c:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801b40e:	68e6      	ldr	r6, [r4, #12]
 801b410:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 801b414:	f7fa feed 	bl	80161f2 <lwip_htons>
 801b418:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801b41a:	68e6      	ldr	r6, [r4, #12]
 801b41c:	4648      	mov	r0, r9
 801b41e:	f7fa feeb 	bl	80161f8 <lwip_htonl>
 801b422:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801b424:	68e6      	ldr	r6, [r4, #12]
 801b426:	08a8      	lsrs	r0, r5, #2
 801b428:	3005      	adds	r0, #5
 801b42a:	0300      	lsls	r0, r0, #12
 801b42c:	b280      	uxth	r0, r0
 801b42e:	4338      	orrs	r0, r7
 801b430:	f7fa fedf 	bl	80161f2 <lwip_htons>
 801b434:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 801b436:	68e3      	ldr	r3, [r4, #12]
 801b438:	2200      	movs	r2, #0
 801b43a:	749a      	strb	r2, [r3, #18]
 801b43c:	74da      	strb	r2, [r3, #19]
}
 801b43e:	4620      	mov	r0, r4
 801b440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b444:	2500      	movs	r5, #0
 801b446:	e7c1      	b.n	801b3cc <tcp_create_segment+0x18>
    pbuf_free(p);
 801b448:	4630      	mov	r0, r6
 801b44a:	f7fc fff5 	bl	8018438 <pbuf_free>
    return NULL;
 801b44e:	e7f6      	b.n	801b43e <tcp_create_segment+0x8a>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b450:	4b05      	ldr	r3, [pc, #20]	; (801b468 <tcp_create_segment+0xb4>)
 801b452:	22ba      	movs	r2, #186	; 0xba
 801b454:	4905      	ldr	r1, [pc, #20]	; (801b46c <tcp_create_segment+0xb8>)
 801b456:	4806      	ldr	r0, [pc, #24]	; (801b470 <tcp_create_segment+0xbc>)
 801b458:	f003 ff11 	bl	801f27e <iprintf>
 801b45c:	e7c6      	b.n	801b3ec <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 801b45e:	4620      	mov	r0, r4
 801b460:	f7fd fcce 	bl	8018e00 <tcp_seg_free>
    return NULL;
 801b464:	2400      	movs	r4, #0
 801b466:	e7ea      	b.n	801b43e <tcp_create_segment+0x8a>
 801b468:	0802473c 	.word	0x0802473c
 801b46c:	080243c4 	.word	0x080243c4
 801b470:	0801fe1c 	.word	0x0801fe1c

0801b474 <tcp_output_alloc_header>:
{
 801b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b478:	4606      	mov	r6, r0
 801b47a:	460c      	mov	r4, r1
 801b47c:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b47e:	4411      	add	r1, r2
 801b480:	b289      	uxth	r1, r1
 801b482:	3114      	adds	r1, #20
 801b484:	2200      	movs	r2, #0
 801b486:	b289      	uxth	r1, r1
 801b488:	2001      	movs	r0, #1
 801b48a:	f7fd f841 	bl	8018510 <pbuf_alloc>
  if (p != NULL) {
 801b48e:	4607      	mov	r7, r0
 801b490:	b348      	cbz	r0, 801b4e6 <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b492:	8942      	ldrh	r2, [r0, #10]
 801b494:	f104 0314 	add.w	r3, r4, #20
 801b498:	429a      	cmp	r2, r3
 801b49a:	db27      	blt.n	801b4ec <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 801b49c:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 801b49e:	8af0      	ldrh	r0, [r6, #22]
 801b4a0:	f7fa fea7 	bl	80161f2 <lwip_htons>
 801b4a4:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801b4a6:	8b30      	ldrh	r0, [r6, #24]
 801b4a8:	f7fa fea3 	bl	80161f2 <lwip_htons>
 801b4ac:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 801b4ae:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b4b2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801b4b4:	f7fa fea0 	bl	80161f8 <lwip_htonl>
 801b4b8:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801b4ba:	08a0      	lsrs	r0, r4, #2
 801b4bc:	3005      	adds	r0, #5
 801b4be:	0300      	lsls	r0, r0, #12
 801b4c0:	b280      	uxth	r0, r0
 801b4c2:	f040 0010 	orr.w	r0, r0, #16
 801b4c6:	f7fa fe94 	bl	80161f2 <lwip_htons>
 801b4ca:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b4cc:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 801b4ce:	f7fa fe90 	bl	80161f2 <lwip_htons>
 801b4d2:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	742b      	strb	r3, [r5, #16]
 801b4d8:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 801b4da:	74ab      	strb	r3, [r5, #18]
 801b4dc:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b4de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b4e0:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 801b4e2:	4413      	add	r3, r2
 801b4e4:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 801b4e6:	4638      	mov	r0, r7
 801b4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b4ec:	4b03      	ldr	r3, [pc, #12]	; (801b4fc <tcp_output_alloc_header+0x88>)
 801b4ee:	2273      	movs	r2, #115	; 0x73
 801b4f0:	4903      	ldr	r1, [pc, #12]	; (801b500 <tcp_output_alloc_header+0x8c>)
 801b4f2:	4804      	ldr	r0, [pc, #16]	; (801b504 <tcp_output_alloc_header+0x90>)
 801b4f4:	f003 fec3 	bl	801f27e <iprintf>
 801b4f8:	e7d0      	b.n	801b49c <tcp_output_alloc_header+0x28>
 801b4fa:	bf00      	nop
 801b4fc:	0802473c 	.word	0x0802473c
 801b500:	0802451c 	.word	0x0802451c
 801b504:	0801fe1c 	.word	0x0801fe1c

0801b508 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801b508:	6843      	ldr	r3, [r0, #4]
 801b50a:	89db      	ldrh	r3, [r3, #14]
 801b50c:	2b01      	cmp	r3, #1
 801b50e:	d001      	beq.n	801b514 <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801b510:	2000      	movs	r0, #0
 801b512:	4770      	bx	lr
{
 801b514:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b516:	b085      	sub	sp, #20
 801b518:	4616      	mov	r6, r2
 801b51a:	460d      	mov	r5, r1
 801b51c:	4604      	mov	r4, r0
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b51e:	68c7      	ldr	r7, [r0, #12]
 801b520:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801b522:	f7fa fe69 	bl	80161f8 <lwip_htonl>
 801b526:	60b8      	str	r0, [r7, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b528:	68e7      	ldr	r7, [r4, #12]
 801b52a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 801b52c:	f7fa fe61 	bl	80161f2 <lwip_htons>
 801b530:	81f8      	strh	r0, [r7, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b532:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b534:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 801b536:	4413      	add	r3, r2
 801b538:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b53a:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b53c:	7aa3      	ldrb	r3, [r4, #10]
 801b53e:	f013 0f01 	tst.w	r3, #1
 801b542:	d126      	bne.n	801b592 <tcp_output_segment+0x8a>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b544:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 801b548:	2b00      	cmp	r3, #0
 801b54a:	db2d      	blt.n	801b5a8 <tcp_output_segment+0xa0>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
 801b54c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d02d      	beq.n	801b5ae <tcp_output_segment+0xa6>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b552:	68e3      	ldr	r3, [r4, #12]
 801b554:	6862      	ldr	r2, [r4, #4]
 801b556:	6851      	ldr	r1, [r2, #4]
 801b558:	1a5b      	subs	r3, r3, r1
 801b55a:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b55c:	8951      	ldrh	r1, [r2, #10]
 801b55e:	1ac9      	subs	r1, r1, r3
 801b560:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 801b562:	6861      	ldr	r1, [r4, #4]
 801b564:	890a      	ldrh	r2, [r1, #8]
 801b566:	1ad3      	subs	r3, r2, r3
 801b568:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 801b56a:	6863      	ldr	r3, [r4, #4]
 801b56c:	68e2      	ldr	r2, [r4, #12]
 801b56e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b570:	68e3      	ldr	r3, [r4, #12]
 801b572:	2200      	movs	r2, #0
 801b574:	741a      	strb	r2, [r3, #16]
 801b576:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b578:	6860      	ldr	r0, [r4, #4]
 801b57a:	7aab      	ldrb	r3, [r5, #10]
 801b57c:	7a6a      	ldrb	r2, [r5, #9]
 801b57e:	9602      	str	r6, [sp, #8]
 801b580:	2106      	movs	r1, #6
 801b582:	9101      	str	r1, [sp, #4]
 801b584:	9200      	str	r2, [sp, #0]
 801b586:	1d2a      	adds	r2, r5, #4
 801b588:	4629      	mov	r1, r5
 801b58a:	f7fb fd77 	bl	801707c <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 801b58e:	b005      	add	sp, #20
 801b590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801b592:	1d29      	adds	r1, r5, #4
 801b594:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 801b598:	f7fe fa3a 	bl	8019a10 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b59c:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801b5a0:	f7fa fe2a 	bl	80161f8 <lwip_htonl>
 801b5a4:	6178      	str	r0, [r7, #20]
 801b5a6:	e7cd      	b.n	801b544 <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 801b5a8:	2300      	movs	r3, #0
 801b5aa:	862b      	strh	r3, [r5, #48]	; 0x30
 801b5ac:	e7ce      	b.n	801b54c <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 801b5ae:	4b04      	ldr	r3, [pc, #16]	; (801b5c0 <tcp_output_segment+0xb8>)
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b5b4:	68e3      	ldr	r3, [r4, #12]
 801b5b6:	6858      	ldr	r0, [r3, #4]
 801b5b8:	f7fa fe1e 	bl	80161f8 <lwip_htonl>
 801b5bc:	63a8      	str	r0, [r5, #56]	; 0x38
 801b5be:	e7c8      	b.n	801b552 <tcp_output_segment+0x4a>
 801b5c0:	2000ecbc 	.word	0x2000ecbc

0801b5c4 <tcp_write>:
{
 801b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5c8:	b091      	sub	sp, #68	; 0x44
 801b5ca:	4681      	mov	r9, r0
 801b5cc:	9108      	str	r1, [sp, #32]
 801b5ce:	4692      	mov	sl, r2
 801b5d0:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 801b5d2:	2300      	movs	r3, #0
 801b5d4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801b5d8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 801b5dc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801b5de:	9205      	str	r2, [sp, #20]
 801b5e0:	085b      	lsrs	r3, r3, #1
 801b5e2:	4293      	cmp	r3, r2
 801b5e4:	bf28      	it	cs
 801b5e6:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 801b5e8:	b103      	cbz	r3, 801b5ec <tcp_write+0x28>
 801b5ea:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b5ec:	9b08      	ldr	r3, [sp, #32]
 801b5ee:	b1cb      	cbz	r3, 801b624 <tcp_write+0x60>
  err = tcp_write_checks(pcb, len);
 801b5f0:	4651      	mov	r1, sl
 801b5f2:	4648      	mov	r0, r9
 801b5f4:	f7ff fe4c 	bl	801b290 <tcp_write_checks>
  if (err != ERR_OK) {
 801b5f8:	9009      	str	r0, [sp, #36]	; 0x24
 801b5fa:	2800      	cmp	r0, #0
 801b5fc:	f040 81b2 	bne.w	801b964 <tcp_write+0x3a0>
  queuelen = pcb->snd_queuelen;
 801b600:	f8b9 6062 	ldrh.w	r6, [r9, #98]	; 0x62
  if (pcb->unsent != NULL) {
 801b604:	f8d9 b068 	ldr.w	fp, [r9, #104]	; 0x68
 801b608:	f1bb 0f00 	cmp.w	fp, #0
 801b60c:	d116      	bne.n	801b63c <tcp_write+0x78>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b60e:	f8b9 4064 	ldrh.w	r4, [r9, #100]	; 0x64
 801b612:	2c00      	cmp	r4, #0
 801b614:	f040 80d8 	bne.w	801b7c8 <tcp_write+0x204>
  u16_t extendlen = 0;
 801b618:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 801b61a:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b61c:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 801b61e:	2300      	movs	r3, #0
 801b620:	930c      	str	r3, [sp, #48]	; 0x30
 801b622:	e0e3      	b.n	801b7ec <tcp_write+0x228>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b624:	4bb1      	ldr	r3, [pc, #708]	; (801b8ec <tcp_write+0x328>)
 801b626:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801b62a:	49b1      	ldr	r1, [pc, #708]	; (801b8f0 <tcp_write+0x32c>)
 801b62c:	48b1      	ldr	r0, [pc, #708]	; (801b8f4 <tcp_write+0x330>)
 801b62e:	f003 fe26 	bl	801f27e <iprintf>
 801b632:	f06f 030f 	mvn.w	r3, #15
 801b636:	9309      	str	r3, [sp, #36]	; 0x24
 801b638:	e194      	b.n	801b964 <tcp_write+0x3a0>
         last_unsent = last_unsent->next);
 801b63a:	46bb      	mov	fp, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b63c:	f8db 7000 	ldr.w	r7, [fp]
 801b640:	2f00      	cmp	r7, #0
 801b642:	d1fa      	bne.n	801b63a <tcp_write+0x76>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801b644:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b648:	f013 0f01 	tst.w	r3, #1
 801b64c:	d051      	beq.n	801b6f2 <tcp_write+0x12e>
 801b64e:	2404      	movs	r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b650:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b654:	4423      	add	r3, r4
 801b656:	9a05      	ldr	r2, [sp, #20]
 801b658:	429a      	cmp	r2, r3
 801b65a:	db4c      	blt.n	801b6f6 <tcp_write+0x132>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b65c:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b660:	441c      	add	r4, r3
 801b662:	b2a4      	uxth	r4, r4
 801b664:	9b05      	ldr	r3, [sp, #20]
 801b666:	1b1c      	subs	r4, r3, r4
 801b668:	b2a3      	uxth	r3, r4
 801b66a:	461a      	mov	r2, r3
 801b66c:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 801b66e:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801b672:	930a      	str	r3, [sp, #40]	; 0x28
 801b674:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d04e      	beq.n	801b71a <tcp_write+0x156>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b67c:	429a      	cmp	r2, r3
 801b67e:	d342      	bcc.n	801b706 <tcp_write+0x142>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b680:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b684:	459a      	cmp	sl, r3
 801b686:	d946      	bls.n	801b716 <tcp_write+0x152>
 801b688:	461a      	mov	r2, r3
 801b68a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b68c:	4282      	cmp	r2, r0
 801b68e:	bfa8      	it	ge
 801b690:	4602      	movge	r2, r0
 801b692:	b292      	uxth	r2, r2
 801b694:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801b696:	1a9b      	subs	r3, r3, r2
 801b698:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 801b69c:	1a83      	subs	r3, r0, r2
 801b69e:	b29b      	uxth	r3, r3
 801b6a0:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 801b6a2:	46d8      	mov	r8, fp
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801b6a4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b6a8:	b14b      	cbz	r3, 801b6be <tcp_write+0xfa>
 801b6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6ac:	4553      	cmp	r3, sl
 801b6ae:	d006      	beq.n	801b6be <tcp_write+0xfa>
 801b6b0:	4b8e      	ldr	r3, [pc, #568]	; (801b8ec <tcp_write+0x328>)
 801b6b2:	f240 12e1 	movw	r2, #481	; 0x1e1
 801b6b6:	4990      	ldr	r1, [pc, #576]	; (801b8f8 <tcp_write+0x334>)
 801b6b8:	488e      	ldr	r0, [pc, #568]	; (801b8f4 <tcp_write+0x330>)
 801b6ba:	f003 fde0 	bl	801f27e <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b6be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b6c0:	4552      	cmp	r2, sl
 801b6c2:	f080 808f 	bcs.w	801b7e4 <tcp_write+0x220>
 801b6c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b6c8:	2900      	cmp	r1, #0
 801b6ca:	f000 8094 	beq.w	801b7f6 <tcp_write+0x232>
 801b6ce:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	f000 8093 	beq.w	801b7fe <tcp_write+0x23a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b6d8:	ebaa 0502 	sub.w	r5, sl, r2
 801b6dc:	428d      	cmp	r5, r1
 801b6de:	bfa8      	it	ge
 801b6e0:	460d      	movge	r5, r1
 801b6e2:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b6e4:	9b06      	ldr	r3, [sp, #24]
 801b6e6:	f013 0f01 	tst.w	r3, #1
 801b6ea:	d118      	bne.n	801b71e <tcp_write+0x15a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b6ec:	f8db 3004 	ldr.w	r3, [fp, #4]
 801b6f0:	e038      	b.n	801b764 <tcp_write+0x1a0>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801b6f2:	2400      	movs	r4, #0
 801b6f4:	e7ac      	b.n	801b650 <tcp_write+0x8c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b6f6:	4b7d      	ldr	r3, [pc, #500]	; (801b8ec <tcp_write+0x328>)
 801b6f8:	f240 12c7 	movw	r2, #455	; 0x1c7
 801b6fc:	497f      	ldr	r1, [pc, #508]	; (801b8fc <tcp_write+0x338>)
 801b6fe:	487d      	ldr	r0, [pc, #500]	; (801b8f4 <tcp_write+0x330>)
 801b700:	f003 fdbd 	bl	801f27e <iprintf>
 801b704:	e7aa      	b.n	801b65c <tcp_write+0x98>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b706:	4b79      	ldr	r3, [pc, #484]	; (801b8ec <tcp_write+0x328>)
 801b708:	f240 12d9 	movw	r2, #473	; 0x1d9
 801b70c:	497c      	ldr	r1, [pc, #496]	; (801b900 <tcp_write+0x33c>)
 801b70e:	4879      	ldr	r0, [pc, #484]	; (801b8f4 <tcp_write+0x330>)
 801b710:	f003 fdb5 	bl	801f27e <iprintf>
 801b714:	e7b4      	b.n	801b680 <tcp_write+0xbc>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b716:	4652      	mov	r2, sl
 801b718:	e7b7      	b.n	801b68a <tcp_write+0xc6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b71a:	46b8      	mov	r8, r7
 801b71c:	e7c2      	b.n	801b6a4 <tcp_write+0xe0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801b71e:	2301      	movs	r3, #1
 801b720:	9302      	str	r3, [sp, #8]
 801b722:	9b06      	ldr	r3, [sp, #24]
 801b724:	9301      	str	r3, [sp, #4]
 801b726:	f8cd 9000 	str.w	r9, [sp]
 801b72a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801b72e:	460a      	mov	r2, r1
 801b730:	4621      	mov	r1, r4
 801b732:	2004      	movs	r0, #4
 801b734:	f7ff fdfe 	bl	801b334 <tcp_pbuf_prealloc>
 801b738:	4603      	mov	r3, r0
 801b73a:	900c      	str	r0, [sp, #48]	; 0x30
 801b73c:	2800      	cmp	r0, #0
 801b73e:	f000 80f0 	beq.w	801b922 <tcp_write+0x35e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801b742:	4622      	mov	r2, r4
 801b744:	9908      	ldr	r1, [sp, #32]
 801b746:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b748:	4401      	add	r1, r0
 801b74a:	461d      	mov	r5, r3
 801b74c:	6858      	ldr	r0, [r3, #4]
 801b74e:	f004 f984 	bl	801fa5a <memcpy>
        queuelen += pbuf_clen(concat_p);
 801b752:	4628      	mov	r0, r5
 801b754:	f7fd f836 	bl	80187c4 <pbuf_clen>
 801b758:	4406      	add	r6, r0
 801b75a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801b75c:	2300      	movs	r3, #0
 801b75e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b760:	e01a      	b.n	801b798 <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b762:	4613      	mov	r3, r2
 801b764:	681a      	ldr	r2, [r3, #0]
 801b766:	2a00      	cmp	r2, #0
 801b768:	d1fb      	bne.n	801b762 <tcp_write+0x19e>
 801b76a:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b76c:	7b1a      	ldrb	r2, [r3, #12]
 801b76e:	2a01      	cmp	r2, #1
 801b770:	d017      	beq.n	801b7a2 <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801b772:	2201      	movs	r2, #1
 801b774:	4621      	mov	r1, r4
 801b776:	2004      	movs	r0, #4
 801b778:	f7fc feca 	bl	8018510 <pbuf_alloc>
 801b77c:	900c      	str	r0, [sp, #48]	; 0x30
 801b77e:	2800      	cmp	r0, #0
 801b780:	f000 80cf 	beq.w	801b922 <tcp_write+0x35e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801b784:	9b08      	ldr	r3, [sp, #32]
 801b786:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b788:	440b      	add	r3, r1
 801b78a:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801b78c:	f7fd f81a 	bl	80187c4 <pbuf_clen>
 801b790:	4406      	add	r6, r0
 801b792:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801b794:	2300      	movs	r3, #0
 801b796:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 801b798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b79a:	441c      	add	r4, r3
 801b79c:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 801b79e:	46d8      	mov	r8, fp
 801b7a0:	e024      	b.n	801b7ec <tcp_write+0x228>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b7a2:	685a      	ldr	r2, [r3, #4]
 801b7a4:	895b      	ldrh	r3, [r3, #10]
 801b7a6:	4413      	add	r3, r2
 801b7a8:	9a08      	ldr	r2, [sp, #32]
 801b7aa:	429a      	cmp	r2, r3
 801b7ac:	d1e1      	bne.n	801b772 <tcp_write+0x1ae>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7b0:	b90b      	cbnz	r3, 801b7b6 <tcp_write+0x1f2>
          extendlen = seglen;
 801b7b2:	940b      	str	r4, [sp, #44]	; 0x2c
 801b7b4:	e7f0      	b.n	801b798 <tcp_write+0x1d4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b7b6:	4b4d      	ldr	r3, [pc, #308]	; (801b8ec <tcp_write+0x328>)
 801b7b8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801b7bc:	4951      	ldr	r1, [pc, #324]	; (801b904 <tcp_write+0x340>)
 801b7be:	484d      	ldr	r0, [pc, #308]	; (801b8f4 <tcp_write+0x330>)
 801b7c0:	f003 fd5d 	bl	801f27e <iprintf>
          extendlen = seglen;
 801b7c4:	940b      	str	r4, [sp, #44]	; 0x2c
 801b7c6:	e7e7      	b.n	801b798 <tcp_write+0x1d4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b7c8:	4b48      	ldr	r3, [pc, #288]	; (801b8ec <tcp_write+0x328>)
 801b7ca:	f240 2225 	movw	r2, #549	; 0x225
 801b7ce:	494e      	ldr	r1, [pc, #312]	; (801b908 <tcp_write+0x344>)
 801b7d0:	4848      	ldr	r0, [pc, #288]	; (801b8f4 <tcp_write+0x330>)
 801b7d2:	f003 fd54 	bl	801f27e <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b7d6:	46d8      	mov	r8, fp
  u16_t extendlen = 0;
 801b7d8:	2300      	movs	r3, #0
 801b7da:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 801b7dc:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 801b7de:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 801b7e0:	930c      	str	r3, [sp, #48]	; 0x30
 801b7e2:	e003      	b.n	801b7ec <tcp_write+0x228>
 801b7e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 801b7e6:	2300      	movs	r3, #0
 801b7e8:	930b      	str	r3, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 801b7ea:	930c      	str	r3, [sp, #48]	; 0x30
      queue = seg;
 801b7ec:	2700      	movs	r7, #0
 801b7ee:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 801b7f2:	46bb      	mov	fp, r7
 801b7f4:	e060      	b.n	801b8b8 <tcp_write+0x2f4>
 801b7f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	930c      	str	r3, [sp, #48]	; 0x30
 801b7fc:	e7f6      	b.n	801b7ec <tcp_write+0x228>
  u16_t extendlen = 0;
 801b7fe:	930b      	str	r3, [sp, #44]	; 0x2c
 801b800:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 801b802:	2300      	movs	r3, #0
 801b804:	930c      	str	r3, [sp, #48]	; 0x30
 801b806:	e7f1      	b.n	801b7ec <tcp_write+0x228>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801b808:	fab7 f387 	clz	r3, r7
 801b80c:	095b      	lsrs	r3, r3, #5
 801b80e:	9302      	str	r3, [sp, #8]
 801b810:	9b06      	ldr	r3, [sp, #24]
 801b812:	9301      	str	r3, [sp, #4]
 801b814:	f8cd 9000 	str.w	r9, [sp]
 801b818:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801b81c:	9a05      	ldr	r2, [sp, #20]
 801b81e:	4629      	mov	r1, r5
 801b820:	2000      	movs	r0, #0
 801b822:	f7ff fd87 	bl	801b334 <tcp_pbuf_prealloc>
 801b826:	4680      	mov	r8, r0
 801b828:	2800      	cmp	r0, #0
 801b82a:	d07a      	beq.n	801b922 <tcp_write+0x35e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b82c:	8943      	ldrh	r3, [r0, #10]
 801b82e:	429d      	cmp	r5, r3
 801b830:	d807      	bhi.n	801b842 <tcp_write+0x27e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 801b832:	462a      	mov	r2, r5
 801b834:	9b08      	ldr	r3, [sp, #32]
 801b836:	1919      	adds	r1, r3, r4
 801b838:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b83c:	f004 f90d 	bl	801fa5a <memcpy>
 801b840:	e01d      	b.n	801b87e <tcp_write+0x2ba>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b842:	4b2a      	ldr	r3, [pc, #168]	; (801b8ec <tcp_write+0x328>)
 801b844:	f240 2241 	movw	r2, #577	; 0x241
 801b848:	4930      	ldr	r1, [pc, #192]	; (801b90c <tcp_write+0x348>)
 801b84a:	482a      	ldr	r0, [pc, #168]	; (801b8f4 <tcp_write+0x330>)
 801b84c:	f003 fd17 	bl	801f27e <iprintf>
 801b850:	e7ef      	b.n	801b832 <tcp_write+0x26e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801b852:	2201      	movs	r2, #1
 801b854:	4629      	mov	r1, r5
 801b856:	2000      	movs	r0, #0
 801b858:	f7fc fe5a 	bl	8018510 <pbuf_alloc>
 801b85c:	9007      	str	r0, [sp, #28]
 801b85e:	2800      	cmp	r0, #0
 801b860:	d05f      	beq.n	801b922 <tcp_write+0x35e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801b862:	9b08      	ldr	r3, [sp, #32]
 801b864:	4423      	add	r3, r4
 801b866:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b868:	2200      	movs	r2, #0
 801b86a:	4611      	mov	r1, r2
 801b86c:	4610      	mov	r0, r2
 801b86e:	f7fc fe4f 	bl	8018510 <pbuf_alloc>
 801b872:	4680      	mov	r8, r0
 801b874:	2800      	cmp	r0, #0
 801b876:	d04d      	beq.n	801b914 <tcp_write+0x350>
      pbuf_cat(p/*header*/, p2/*data*/);
 801b878:	9907      	ldr	r1, [sp, #28]
 801b87a:	f7fc ffc9 	bl	8018810 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801b87e:	4640      	mov	r0, r8
 801b880:	f7fc ffa0 	bl	80187c4 <pbuf_clen>
 801b884:	4406      	add	r6, r0
 801b886:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801b888:	2e0b      	cmp	r6, #11
 801b88a:	d847      	bhi.n	801b91c <tcp_write+0x358>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801b88c:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 801b890:	2200      	movs	r2, #0
 801b892:	9200      	str	r2, [sp, #0]
 801b894:	4423      	add	r3, r4
 801b896:	4641      	mov	r1, r8
 801b898:	4648      	mov	r0, r9
 801b89a:	f7ff fd8b 	bl	801b3b4 <tcp_create_segment>
 801b89e:	4680      	mov	r8, r0
 801b8a0:	2800      	cmp	r0, #0
 801b8a2:	d03e      	beq.n	801b922 <tcp_write+0x35e>
    if (queue == NULL) {
 801b8a4:	2f00      	cmp	r7, #0
 801b8a6:	d069      	beq.n	801b97c <tcp_write+0x3b8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b8a8:	f1bb 0f00 	cmp.w	fp, #0
 801b8ac:	d05e      	beq.n	801b96c <tcp_write+0x3a8>
      prev_seg->next = seg;
 801b8ae:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 801b8b2:	442c      	add	r4, r5
 801b8b4:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 801b8b6:	46c3      	mov	fp, r8
  while (pos < len) {
 801b8b8:	4554      	cmp	r4, sl
 801b8ba:	d261      	bcs.n	801b980 <tcp_write+0x3bc>
    u16_t left = len - pos;
 801b8bc:	ebaa 0504 	sub.w	r5, sl, r4
 801b8c0:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 801b8c2:	9b05      	ldr	r3, [sp, #20]
 801b8c4:	429d      	cmp	r5, r3
 801b8c6:	bf28      	it	cs
 801b8c8:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b8ca:	9b06      	ldr	r3, [sp, #24]
 801b8cc:	f013 0f01 	tst.w	r3, #1
 801b8d0:	d19a      	bne.n	801b808 <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801b8d2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d0bb      	beq.n	801b852 <tcp_write+0x28e>
 801b8da:	4b04      	ldr	r3, [pc, #16]	; (801b8ec <tcp_write+0x328>)
 801b8dc:	f240 224b 	movw	r2, #587	; 0x24b
 801b8e0:	490b      	ldr	r1, [pc, #44]	; (801b910 <tcp_write+0x34c>)
 801b8e2:	4804      	ldr	r0, [pc, #16]	; (801b8f4 <tcp_write+0x330>)
 801b8e4:	f003 fccb 	bl	801f27e <iprintf>
 801b8e8:	e7b3      	b.n	801b852 <tcp_write+0x28e>
 801b8ea:	bf00      	nop
 801b8ec:	0802473c 	.word	0x0802473c
 801b8f0:	08024560 	.word	0x08024560
 801b8f4:	0801fe1c 	.word	0x0801fe1c
 801b8f8:	080245cc 	.word	0x080245cc
 801b8fc:	08024594 	.word	0x08024594
 801b900:	080245ac 	.word	0x080245ac
 801b904:	080245ec 	.word	0x080245ec
 801b908:	08024618 	.word	0x08024618
 801b90c:	08024648 	.word	0x08024648
 801b910:	08024688 	.word	0x08024688
        pbuf_free(p2);
 801b914:	9807      	ldr	r0, [sp, #28]
 801b916:	f7fc fd8f 	bl	8018438 <pbuf_free>
        goto memerr;
 801b91a:	e002      	b.n	801b922 <tcp_write+0x35e>
      pbuf_free(p);
 801b91c:	4640      	mov	r0, r8
 801b91e:	f7fc fd8b 	bl	8018438 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 801b922:	f899 301a 	ldrb.w	r3, [r9, #26]
 801b926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b92a:	f889 301a 	strb.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801b92e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b930:	b113      	cbz	r3, 801b938 <tcp_write+0x374>
    pbuf_free(concat_p);
 801b932:	4618      	mov	r0, r3
 801b934:	f7fc fd80 	bl	8018438 <pbuf_free>
  if (queue != NULL) {
 801b938:	b117      	cbz	r7, 801b940 <tcp_write+0x37c>
    tcp_segs_free(queue);
 801b93a:	4638      	mov	r0, r7
 801b93c:	f7fd fa6d 	bl	8018e1a <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801b940:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
 801b944:	2b00      	cmp	r3, #0
 801b946:	f000 80c6 	beq.w	801bad6 <tcp_write+0x512>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b94a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801b94e:	2b00      	cmp	r3, #0
 801b950:	f040 80c5 	bne.w	801bade <tcp_write+0x51a>
 801b954:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 801b958:	2b00      	cmp	r3, #0
 801b95a:	f000 80b1 	beq.w	801bac0 <tcp_write+0x4fc>
  return ERR_MEM;
 801b95e:	f04f 33ff 	mov.w	r3, #4294967295
 801b962:	9309      	str	r3, [sp, #36]	; 0x24
}
 801b964:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b966:	b011      	add	sp, #68	; 0x44
 801b968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b96c:	4b5e      	ldr	r3, [pc, #376]	; (801bae8 <tcp_write+0x524>)
 801b96e:	f240 2285 	movw	r2, #645	; 0x285
 801b972:	495e      	ldr	r1, [pc, #376]	; (801baec <tcp_write+0x528>)
 801b974:	485e      	ldr	r0, [pc, #376]	; (801baf0 <tcp_write+0x52c>)
 801b976:	f003 fc82 	bl	801f27e <iprintf>
 801b97a:	e798      	b.n	801b8ae <tcp_write+0x2ea>
      queue = seg;
 801b97c:	4607      	mov	r7, r0
 801b97e:	e798      	b.n	801b8b2 <tcp_write+0x2ee>
 801b980:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 801b984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b986:	b1e3      	cbz	r3, 801b9c2 <tcp_write+0x3fe>
    for (p = last_unsent->p; p; p = p->next) {
 801b988:	f8db 4004 	ldr.w	r4, [fp, #4]
 801b98c:	461d      	mov	r5, r3
 801b98e:	e000      	b.n	801b992 <tcp_write+0x3ce>
 801b990:	6824      	ldr	r4, [r4, #0]
 801b992:	b184      	cbz	r4, 801b9b6 <tcp_write+0x3f2>
      p->tot_len += oversize_used;
 801b994:	8923      	ldrh	r3, [r4, #8]
 801b996:	442b      	add	r3, r5
 801b998:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801b99a:	6823      	ldr	r3, [r4, #0]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d1f7      	bne.n	801b990 <tcp_write+0x3cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801b9a0:	6860      	ldr	r0, [r4, #4]
 801b9a2:	8963      	ldrh	r3, [r4, #10]
 801b9a4:	462a      	mov	r2, r5
 801b9a6:	9908      	ldr	r1, [sp, #32]
 801b9a8:	4418      	add	r0, r3
 801b9aa:	f004 f856 	bl	801fa5a <memcpy>
        p->len += oversize_used;
 801b9ae:	8963      	ldrh	r3, [r4, #10]
 801b9b0:	442b      	add	r3, r5
 801b9b2:	8163      	strh	r3, [r4, #10]
 801b9b4:	e7ec      	b.n	801b990 <tcp_write+0x3cc>
    last_unsent->len += oversize_used;
 801b9b6:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801b9ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b9bc:	441a      	add	r2, r3
 801b9be:	f8ab 2008 	strh.w	r2, [fp, #8]
  pcb->unsent_oversize = oversize;
 801b9c2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b9c6:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 801b9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d03f      	beq.n	801ba50 <tcp_write+0x48c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b9d0:	f1bb 0f00 	cmp.w	fp, #0
 801b9d4:	d034      	beq.n	801ba40 <tcp_write+0x47c>
    pbuf_cat(last_unsent->p, concat_p);
 801b9d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b9d8:	4621      	mov	r1, r4
 801b9da:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b9de:	f7fc ff17 	bl	8018810 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b9e2:	8923      	ldrh	r3, [r4, #8]
 801b9e4:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 801b9e8:	4413      	add	r3, r2
 801b9ea:	f8ab 3008 	strh.w	r3, [fp, #8]
  if (last_unsent == NULL) {
 801b9ee:	f1bb 0f00 	cmp.w	fp, #0
 801b9f2:	d056      	beq.n	801baa2 <tcp_write+0x4de>
    last_unsent->next = queue;
 801b9f4:	f8cb 7000 	str.w	r7, [fp]
  pcb->snd_lbb += len;
 801b9f8:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 801b9fc:	4453      	add	r3, sl
 801b9fe:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 801ba02:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
 801ba06:	eba3 0a0a 	sub.w	sl, r3, sl
 801ba0a:	f8a9 a060 	strh.w	sl, [r9, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 801ba0e:	f8a9 6062 	strh.w	r6, [r9, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 801ba12:	b11e      	cbz	r6, 801ba1c <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length",
 801ba14:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d045      	beq.n	801baa8 <tcp_write+0x4e4>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801ba1c:	f1b8 0f00 	cmp.w	r8, #0
 801ba20:	d0a0      	beq.n	801b964 <tcp_write+0x3a0>
 801ba22:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ba26:	2c00      	cmp	r4, #0
 801ba28:	d09c      	beq.n	801b964 <tcp_write+0x3a0>
 801ba2a:	9b06      	ldr	r3, [sp, #24]
 801ba2c:	f013 0f02 	tst.w	r3, #2
 801ba30:	d198      	bne.n	801b964 <tcp_write+0x3a0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801ba32:	89a5      	ldrh	r5, [r4, #12]
 801ba34:	2008      	movs	r0, #8
 801ba36:	f7fa fbdc 	bl	80161f2 <lwip_htons>
 801ba3a:	4328      	orrs	r0, r5
 801ba3c:	81a0      	strh	r0, [r4, #12]
 801ba3e:	e791      	b.n	801b964 <tcp_write+0x3a0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801ba40:	4b29      	ldr	r3, [pc, #164]	; (801bae8 <tcp_write+0x524>)
 801ba42:	f240 22bb 	movw	r2, #699	; 0x2bb
 801ba46:	492b      	ldr	r1, [pc, #172]	; (801baf4 <tcp_write+0x530>)
 801ba48:	4829      	ldr	r0, [pc, #164]	; (801baf0 <tcp_write+0x52c>)
 801ba4a:	f003 fc18 	bl	801f27e <iprintf>
 801ba4e:	e7c2      	b.n	801b9d6 <tcp_write+0x412>
  } else if (extendlen > 0) {
 801ba50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d0cb      	beq.n	801b9ee <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ba56:	f1bb 0f00 	cmp.w	fp, #0
 801ba5a:	d006      	beq.n	801ba6a <tcp_write+0x4a6>
 801ba5c:	f8db 3004 	ldr.w	r3, [fp, #4]
 801ba60:	b11b      	cbz	r3, 801ba6a <tcp_write+0x4a6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ba62:	f8db 3004 	ldr.w	r3, [fp, #4]
 801ba66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ba68:	e00b      	b.n	801ba82 <tcp_write+0x4be>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ba6a:	4b1f      	ldr	r3, [pc, #124]	; (801bae8 <tcp_write+0x524>)
 801ba6c:	f240 22c1 	movw	r2, #705	; 0x2c1
 801ba70:	4921      	ldr	r1, [pc, #132]	; (801baf8 <tcp_write+0x534>)
 801ba72:	481f      	ldr	r0, [pc, #124]	; (801baf0 <tcp_write+0x52c>)
 801ba74:	f003 fc03 	bl	801f27e <iprintf>
 801ba78:	e7f3      	b.n	801ba62 <tcp_write+0x49e>
      p->tot_len += extendlen;
 801ba7a:	891a      	ldrh	r2, [r3, #8]
 801ba7c:	4402      	add	r2, r0
 801ba7e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ba80:	460b      	mov	r3, r1
 801ba82:	6819      	ldr	r1, [r3, #0]
 801ba84:	2900      	cmp	r1, #0
 801ba86:	d1f8      	bne.n	801ba7a <tcp_write+0x4b6>
    p->tot_len += extendlen;
 801ba88:	891a      	ldrh	r2, [r3, #8]
 801ba8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ba8c:	4402      	add	r2, r0
 801ba8e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801ba90:	895a      	ldrh	r2, [r3, #10]
 801ba92:	4402      	add	r2, r0
 801ba94:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801ba96:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801ba9a:	4403      	add	r3, r0
 801ba9c:	f8ab 3008 	strh.w	r3, [fp, #8]
 801baa0:	e7a5      	b.n	801b9ee <tcp_write+0x42a>
    pcb->unsent = queue;
 801baa2:	f8c9 7068 	str.w	r7, [r9, #104]	; 0x68
 801baa6:	e7a7      	b.n	801b9f8 <tcp_write+0x434>
    LWIP_ASSERT("tcp_write: valid queue length",
 801baa8:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 801baac:	2b00      	cmp	r3, #0
 801baae:	d1b5      	bne.n	801ba1c <tcp_write+0x458>
 801bab0:	4b0d      	ldr	r3, [pc, #52]	; (801bae8 <tcp_write+0x524>)
 801bab2:	f240 22ed 	movw	r2, #749	; 0x2ed
 801bab6:	4911      	ldr	r1, [pc, #68]	; (801bafc <tcp_write+0x538>)
 801bab8:	480d      	ldr	r0, [pc, #52]	; (801baf0 <tcp_write+0x52c>)
 801baba:	f003 fbe0 	bl	801f27e <iprintf>
 801babe:	e7ad      	b.n	801ba1c <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801bac0:	4b09      	ldr	r3, [pc, #36]	; (801bae8 <tcp_write+0x524>)
 801bac2:	f240 3202 	movw	r2, #770	; 0x302
 801bac6:	490d      	ldr	r1, [pc, #52]	; (801bafc <tcp_write+0x538>)
 801bac8:	4809      	ldr	r0, [pc, #36]	; (801baf0 <tcp_write+0x52c>)
 801baca:	f003 fbd8 	bl	801f27e <iprintf>
  return ERR_MEM;
 801bace:	f04f 33ff 	mov.w	r3, #4294967295
 801bad2:	9309      	str	r3, [sp, #36]	; 0x24
 801bad4:	e746      	b.n	801b964 <tcp_write+0x3a0>
 801bad6:	f04f 33ff 	mov.w	r3, #4294967295
 801bada:	9309      	str	r3, [sp, #36]	; 0x24
 801badc:	e742      	b.n	801b964 <tcp_write+0x3a0>
 801bade:	f04f 33ff 	mov.w	r3, #4294967295
 801bae2:	9309      	str	r3, [sp, #36]	; 0x24
 801bae4:	e73e      	b.n	801b964 <tcp_write+0x3a0>
 801bae6:	bf00      	nop
 801bae8:	0802473c 	.word	0x0802473c
 801baec:	08024698 	.word	0x08024698
 801baf0:	0801fe1c 	.word	0x0801fe1c
 801baf4:	080246ac 	.word	0x080246ac
 801baf8:	080246e4 	.word	0x080246e4
 801bafc:	0802471c 	.word	0x0802471c

0801bb00 <tcp_enqueue_flags>:
{
 801bb00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb04:	b083      	sub	sp, #12
 801bb06:	4604      	mov	r4, r0
 801bb08:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801bb0a:	f011 0703 	ands.w	r7, r1, #3
 801bb0e:	d030      	beq.n	801bb72 <tcp_enqueue_flags+0x72>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801bb10:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801bb14:	2b0a      	cmp	r3, #10
 801bb16:	d902      	bls.n	801bb1e <tcp_enqueue_flags+0x1e>
 801bb18:	f015 0f01 	tst.w	r5, #1
 801bb1c:	d031      	beq.n	801bb82 <tcp_enqueue_flags+0x82>
  if (flags & TCP_SYN) {
 801bb1e:	f015 0f02 	tst.w	r5, #2
 801bb22:	d135      	bne.n	801bb90 <tcp_enqueue_flags+0x90>
  u8_t optflags = 0;
 801bb24:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801bb28:	f1b9 0f00 	cmp.w	r9, #0
 801bb2c:	d033      	beq.n	801bb96 <tcp_enqueue_flags+0x96>
 801bb2e:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801bb30:	b2b6      	uxth	r6, r6
 801bb32:	2200      	movs	r2, #0
 801bb34:	4631      	mov	r1, r6
 801bb36:	4610      	mov	r0, r2
 801bb38:	f7fc fcea 	bl	8018510 <pbuf_alloc>
 801bb3c:	4680      	mov	r8, r0
 801bb3e:	b360      	cbz	r0, 801bb9a <tcp_enqueue_flags+0x9a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801bb40:	8943      	ldrh	r3, [r0, #10]
 801bb42:	429e      	cmp	r6, r3
 801bb44:	d830      	bhi.n	801bba8 <tcp_enqueue_flags+0xa8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801bb46:	f8cd 9000 	str.w	r9, [sp]
 801bb4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bb4c:	462a      	mov	r2, r5
 801bb4e:	4641      	mov	r1, r8
 801bb50:	4620      	mov	r0, r4
 801bb52:	f7ff fc2f 	bl	801b3b4 <tcp_create_segment>
 801bb56:	4606      	mov	r6, r0
 801bb58:	b370      	cbz	r0, 801bbb8 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801bb5a:	68c3      	ldr	r3, [r0, #12]
 801bb5c:	f013 0f03 	tst.w	r3, #3
 801bb60:	d131      	bne.n	801bbc6 <tcp_enqueue_flags+0xc6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801bb62:	8933      	ldrh	r3, [r6, #8]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d136      	bne.n	801bbd6 <tcp_enqueue_flags+0xd6>
  if (pcb->unsent == NULL) {
 801bb68:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801bb6a:	2a00      	cmp	r2, #0
 801bb6c:	d13c      	bne.n	801bbe8 <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 801bb6e:	66a6      	str	r6, [r4, #104]	; 0x68
 801bb70:	e03e      	b.n	801bbf0 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801bb72:	4b36      	ldr	r3, [pc, #216]	; (801bc4c <tcp_enqueue_flags+0x14c>)
 801bb74:	f240 321b 	movw	r2, #795	; 0x31b
 801bb78:	4935      	ldr	r1, [pc, #212]	; (801bc50 <tcp_enqueue_flags+0x150>)
 801bb7a:	4836      	ldr	r0, [pc, #216]	; (801bc54 <tcp_enqueue_flags+0x154>)
 801bb7c:	f003 fb7f 	bl	801f27e <iprintf>
 801bb80:	e7c6      	b.n	801bb10 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 801bb82:	7ea3      	ldrb	r3, [r4, #26]
 801bb84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bb88:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801bb8a:	f04f 30ff 	mov.w	r0, #4294967295
 801bb8e:	e04a      	b.n	801bc26 <tcp_enqueue_flags+0x126>
    optflags = TF_SEG_OPTS_MSS;
 801bb90:	f04f 0901 	mov.w	r9, #1
 801bb94:	e7c8      	b.n	801bb28 <tcp_enqueue_flags+0x28>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801bb96:	2600      	movs	r6, #0
 801bb98:	e7ca      	b.n	801bb30 <tcp_enqueue_flags+0x30>
    pcb->flags |= TF_NAGLEMEMERR;
 801bb9a:	7ea3      	ldrb	r3, [r4, #26]
 801bb9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bba0:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801bba2:	f04f 30ff 	mov.w	r0, #4294967295
 801bba6:	e03e      	b.n	801bc26 <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801bba8:	4b28      	ldr	r3, [pc, #160]	; (801bc4c <tcp_enqueue_flags+0x14c>)
 801bbaa:	f240 3241 	movw	r2, #833	; 0x341
 801bbae:	492a      	ldr	r1, [pc, #168]	; (801bc58 <tcp_enqueue_flags+0x158>)
 801bbb0:	4828      	ldr	r0, [pc, #160]	; (801bc54 <tcp_enqueue_flags+0x154>)
 801bbb2:	f003 fb64 	bl	801f27e <iprintf>
 801bbb6:	e7c6      	b.n	801bb46 <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 801bbb8:	7ea3      	ldrb	r3, [r4, #26]
 801bbba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801bbbe:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 801bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 801bbc4:	e02f      	b.n	801bc26 <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801bbc6:	4b21      	ldr	r3, [pc, #132]	; (801bc4c <tcp_enqueue_flags+0x14c>)
 801bbc8:	f240 3249 	movw	r2, #841	; 0x349
 801bbcc:	4923      	ldr	r1, [pc, #140]	; (801bc5c <tcp_enqueue_flags+0x15c>)
 801bbce:	4821      	ldr	r0, [pc, #132]	; (801bc54 <tcp_enqueue_flags+0x154>)
 801bbd0:	f003 fb55 	bl	801f27e <iprintf>
 801bbd4:	e7c5      	b.n	801bb62 <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801bbd6:	4b1d      	ldr	r3, [pc, #116]	; (801bc4c <tcp_enqueue_flags+0x14c>)
 801bbd8:	f240 324a 	movw	r2, #842	; 0x34a
 801bbdc:	4920      	ldr	r1, [pc, #128]	; (801bc60 <tcp_enqueue_flags+0x160>)
 801bbde:	481d      	ldr	r0, [pc, #116]	; (801bc54 <tcp_enqueue_flags+0x154>)
 801bbe0:	f003 fb4d 	bl	801f27e <iprintf>
 801bbe4:	e7c0      	b.n	801bb68 <tcp_enqueue_flags+0x68>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801bbe6:	461a      	mov	r2, r3
 801bbe8:	6813      	ldr	r3, [r2, #0]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d1fb      	bne.n	801bbe6 <tcp_enqueue_flags+0xe6>
    useg->next = seg;
 801bbee:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801bbf0:	2300      	movs	r3, #0
 801bbf2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801bbf6:	b117      	cbz	r7, 801bbfe <tcp_enqueue_flags+0xfe>
    pcb->snd_lbb++;
 801bbf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bbfa:	3301      	adds	r3, #1
 801bbfc:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 801bbfe:	f015 0f01 	tst.w	r5, #1
 801bc02:	d003      	beq.n	801bc0c <tcp_enqueue_flags+0x10c>
    pcb->flags |= TF_FIN;
 801bc04:	7ea3      	ldrb	r3, [r4, #26]
 801bc06:	f043 0320 	orr.w	r3, r3, #32
 801bc0a:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801bc0c:	6870      	ldr	r0, [r6, #4]
 801bc0e:	f7fc fdd9 	bl	80187c4 <pbuf_clen>
 801bc12:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801bc16:	4418      	add	r0, r3
 801bc18:	b280      	uxth	r0, r0
 801bc1a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 801bc1e:	b190      	cbz	r0, 801bc46 <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801bc20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bc22:	b11b      	cbz	r3, 801bc2c <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 801bc24:	2000      	movs	r0, #0
}
 801bc26:	b003      	add	sp, #12
 801bc28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801bc2c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801bc2e:	b10b      	cbz	r3, 801bc34 <tcp_enqueue_flags+0x134>
  return ERR_OK;
 801bc30:	2000      	movs	r0, #0
 801bc32:	e7f8      	b.n	801bc26 <tcp_enqueue_flags+0x126>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801bc34:	4b05      	ldr	r3, [pc, #20]	; (801bc4c <tcp_enqueue_flags+0x14c>)
 801bc36:	f240 326d 	movw	r2, #877	; 0x36d
 801bc3a:	490a      	ldr	r1, [pc, #40]	; (801bc64 <tcp_enqueue_flags+0x164>)
 801bc3c:	4805      	ldr	r0, [pc, #20]	; (801bc54 <tcp_enqueue_flags+0x154>)
 801bc3e:	f003 fb1e 	bl	801f27e <iprintf>
  return ERR_OK;
 801bc42:	2000      	movs	r0, #0
 801bc44:	e7ef      	b.n	801bc26 <tcp_enqueue_flags+0x126>
 801bc46:	2000      	movs	r0, #0
 801bc48:	e7ed      	b.n	801bc26 <tcp_enqueue_flags+0x126>
 801bc4a:	bf00      	nop
 801bc4c:	0802473c 	.word	0x0802473c
 801bc50:	080243dc 	.word	0x080243dc
 801bc54:	0801fe1c 	.word	0x0801fe1c
 801bc58:	08024434 	.word	0x08024434
 801bc5c:	08024470 	.word	0x08024470
 801bc60:	08024488 	.word	0x08024488
 801bc64:	080244b4 	.word	0x080244b4

0801bc68 <tcp_send_fin>:
{
 801bc68:	b570      	push	{r4, r5, r6, lr}
 801bc6a:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 801bc6c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 801bc6e:	b90c      	cbnz	r4, 801bc74 <tcp_send_fin+0xc>
 801bc70:	e00a      	b.n	801bc88 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 801bc72:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801bc74:	6823      	ldr	r3, [r4, #0]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d1fb      	bne.n	801bc72 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801bc7a:	68e3      	ldr	r3, [r4, #12]
 801bc7c:	8998      	ldrh	r0, [r3, #12]
 801bc7e:	f7fa fab8 	bl	80161f2 <lwip_htons>
 801bc82:	f010 0f07 	tst.w	r0, #7
 801bc86:	d004      	beq.n	801bc92 <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801bc88:	2101      	movs	r1, #1
 801bc8a:	4628      	mov	r0, r5
 801bc8c:	f7ff ff38 	bl	801bb00 <tcp_enqueue_flags>
}
 801bc90:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801bc92:	68e6      	ldr	r6, [r4, #12]
 801bc94:	89b4      	ldrh	r4, [r6, #12]
 801bc96:	2001      	movs	r0, #1
 801bc98:	f7fa faab 	bl	80161f2 <lwip_htons>
 801bc9c:	4320      	orrs	r0, r4
 801bc9e:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 801bca0:	7eab      	ldrb	r3, [r5, #26]
 801bca2:	f043 0320 	orr.w	r3, r3, #32
 801bca6:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 801bca8:	2000      	movs	r0, #0
 801bcaa:	bd70      	pop	{r4, r5, r6, pc}

0801bcac <tcp_send_empty_ack>:
{
 801bcac:	b570      	push	{r4, r5, r6, lr}
 801bcae:	b084      	sub	sp, #16
 801bcb0:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801bcb2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801bcb4:	f7fa faa0 	bl	80161f8 <lwip_htonl>
 801bcb8:	4603      	mov	r3, r0
 801bcba:	2200      	movs	r2, #0
 801bcbc:	4611      	mov	r1, r2
 801bcbe:	4620      	mov	r0, r4
 801bcc0:	f7ff fbd8 	bl	801b474 <tcp_output_alloc_header>
  if (p == NULL) {
 801bcc4:	b1e0      	cbz	r0, 801bd00 <tcp_send_empty_ack+0x54>
 801bcc6:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bcc8:	1d25      	adds	r5, r4, #4
 801bcca:	4628      	mov	r0, r5
 801bccc:	f7fb f838 	bl	8016d40 <ip4_route>
  if (netif == NULL) {
 801bcd0:	b1e8      	cbz	r0, 801bd0e <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801bcd2:	7aa3      	ldrb	r3, [r4, #10]
 801bcd4:	7a61      	ldrb	r1, [r4, #9]
 801bcd6:	9002      	str	r0, [sp, #8]
 801bcd8:	2206      	movs	r2, #6
 801bcda:	9201      	str	r2, [sp, #4]
 801bcdc:	9100      	str	r1, [sp, #0]
 801bcde:	462a      	mov	r2, r5
 801bce0:	4621      	mov	r1, r4
 801bce2:	4630      	mov	r0, r6
 801bce4:	f7fb f9ca 	bl	801707c <ip4_output_if>
 801bce8:	4605      	mov	r5, r0
  pbuf_free(p);
 801bcea:	4630      	mov	r0, r6
 801bcec:	f7fc fba4 	bl	8018438 <pbuf_free>
  if (err != ERR_OK) {
 801bcf0:	b985      	cbnz	r5, 801bd14 <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801bcf2:	7ea3      	ldrb	r3, [r4, #26]
 801bcf4:	f023 0303 	bic.w	r3, r3, #3
 801bcf8:	76a3      	strb	r3, [r4, #26]
}
 801bcfa:	4628      	mov	r0, r5
 801bcfc:	b004      	add	sp, #16
 801bcfe:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801bd00:	7ea3      	ldrb	r3, [r4, #26]
 801bd02:	f043 0303 	orr.w	r3, r3, #3
 801bd06:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 801bd08:	f06f 0501 	mvn.w	r5, #1
 801bd0c:	e7f5      	b.n	801bcfa <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 801bd0e:	f06f 0503 	mvn.w	r5, #3
 801bd12:	e7ea      	b.n	801bcea <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801bd14:	7ea3      	ldrb	r3, [r4, #26]
 801bd16:	f043 0303 	orr.w	r3, r3, #3
 801bd1a:	76a3      	strb	r3, [r4, #26]
 801bd1c:	e7ed      	b.n	801bcfa <tcp_send_empty_ack+0x4e>
	...

0801bd20 <tcp_output>:
{
 801bd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd24:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801bd26:	7d03      	ldrb	r3, [r0, #20]
 801bd28:	2b01      	cmp	r3, #1
 801bd2a:	d01e      	beq.n	801bd6a <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 801bd2c:	4ba5      	ldr	r3, [pc, #660]	; (801bfc4 <tcp_output+0x2a4>)
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	429d      	cmp	r5, r3
 801bd32:	f000 813e 	beq.w	801bfb2 <tcp_output+0x292>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801bd36:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 801bd3a:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 801bd3e:	42bb      	cmp	r3, r7
 801bd40:	d200      	bcs.n	801bd44 <tcp_output+0x24>
 801bd42:	461f      	mov	r7, r3
  seg = pcb->unsent;
 801bd44:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 801bd46:	7eab      	ldrb	r3, [r5, #26]
 801bd48:	f013 0f02 	tst.w	r3, #2
 801bd4c:	d00a      	beq.n	801bd64 <tcp_output+0x44>
 801bd4e:	b1a4      	cbz	r4, 801bd7a <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801bd50:	68e3      	ldr	r3, [r4, #12]
 801bd52:	6858      	ldr	r0, [r3, #4]
 801bd54:	f7fa fa50 	bl	80161f8 <lwip_htonl>
 801bd58:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801bd5a:	1ac3      	subs	r3, r0, r3
 801bd5c:	8920      	ldrh	r0, [r4, #8]
 801bd5e:	4403      	add	r3, r0
     (seg == NULL ||
 801bd60:	429f      	cmp	r7, r3
 801bd62:	d30a      	bcc.n	801bd7a <tcp_output+0x5a>
  useg = pcb->unacked;
 801bd64:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 801bd66:	b976      	cbnz	r6, 801bd86 <tcp_output+0x66>
 801bd68:	e010      	b.n	801bd8c <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801bd6a:	4b97      	ldr	r3, [pc, #604]	; (801bfc8 <tcp_output+0x2a8>)
 801bd6c:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801bd70:	4996      	ldr	r1, [pc, #600]	; (801bfcc <tcp_output+0x2ac>)
 801bd72:	4897      	ldr	r0, [pc, #604]	; (801bfd0 <tcp_output+0x2b0>)
 801bd74:	f003 fa83 	bl	801f27e <iprintf>
 801bd78:	e7d8      	b.n	801bd2c <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 801bd7a:	4628      	mov	r0, r5
 801bd7c:	f7ff ff96 	bl	801bcac <tcp_send_empty_ack>
 801bd80:	4603      	mov	r3, r0
 801bd82:	e03f      	b.n	801be04 <tcp_output+0xe4>
    for (; useg->next != NULL; useg = useg->next);
 801bd84:	461e      	mov	r6, r3
 801bd86:	6833      	ldr	r3, [r6, #0]
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d1fb      	bne.n	801bd84 <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bd8c:	1d28      	adds	r0, r5, #4
 801bd8e:	f7fa ffd7 	bl	8016d40 <ip4_route>
  if (netif == NULL) {
 801bd92:	4680      	mov	r8, r0
 801bd94:	2800      	cmp	r0, #0
 801bd96:	f000 810e 	beq.w	801bfb6 <tcp_output+0x296>
  if (ip_addr_isany(&pcb->local_ip)) {
 801bd9a:	b10d      	cbz	r5, 801bda0 <tcp_output+0x80>
 801bd9c:	682b      	ldr	r3, [r5, #0]
 801bd9e:	b933      	cbnz	r3, 801bdae <tcp_output+0x8e>
    if (local_ip == NULL) {
 801bda0:	f118 0f04 	cmn.w	r8, #4
 801bda4:	f000 810a 	beq.w	801bfbc <tcp_output+0x29c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801bda8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bdac:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 801bdae:	2c00      	cmp	r4, #0
 801bdb0:	f000 80a2 	beq.w	801bef8 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801bdb4:	68e3      	ldr	r3, [r4, #12]
 801bdb6:	6858      	ldr	r0, [r3, #4]
 801bdb8:	f7fa fa1e 	bl	80161f8 <lwip_htonl>
 801bdbc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801bdbe:	1ac3      	subs	r3, r0, r3
 801bdc0:	8920      	ldrh	r0, [r4, #8]
 801bdc2:	4403      	add	r3, r0
  if (seg != NULL &&
 801bdc4:	429f      	cmp	r7, r3
 801bdc6:	f080 8097 	bcs.w	801bef8 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801bdca:	2f00      	cmp	r7, #0
 801bdcc:	f000 8094 	beq.w	801bef8 <tcp_output+0x1d8>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801bdd0:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 801bdd4:	429f      	cmp	r7, r3
 801bdd6:	f040 808f 	bne.w	801bef8 <tcp_output+0x1d8>
 801bdda:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	f040 808b 	bne.w	801bef8 <tcp_output+0x1d8>
    if (pcb->persist_backoff == 0) {
 801bde2:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 801bde6:	b923      	cbnz	r3, 801bdf2 <tcp_output+0xd2>
      pcb->persist_cnt = 0;
 801bde8:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 801bdec:	2301      	movs	r3, #1
 801bdee:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  if (pcb->unsent == NULL) {
 801bdf2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	f000 80d9 	beq.w	801bfac <tcp_output+0x28c>
  pcb->flags &= ~TF_NAGLEMEMERR;
 801bdfa:	7eab      	ldrb	r3, [r5, #26]
 801bdfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801be00:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 801be02:	2300      	movs	r3, #0
}
 801be04:	4618      	mov	r0, r3
 801be06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("RST not expected here!",
 801be0a:	4b6f      	ldr	r3, [pc, #444]	; (801bfc8 <tcp_output+0x2a8>)
 801be0c:	f240 4246 	movw	r2, #1094	; 0x446
 801be10:	4970      	ldr	r1, [pc, #448]	; (801bfd4 <tcp_output+0x2b4>)
 801be12:	486f      	ldr	r0, [pc, #444]	; (801bfd0 <tcp_output+0x2b0>)
 801be14:	f003 fa33 	bl	801f27e <iprintf>
 801be18:	e084      	b.n	801bf24 <tcp_output+0x204>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801be1a:	891a      	ldrh	r2, [r3, #8]
 801be1c:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801be1e:	429a      	cmp	r2, r3
 801be20:	f080 8091 	bcs.w	801bf46 <tcp_output+0x226>
 801be24:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 801be28:	2b00      	cmp	r3, #0
 801be2a:	f000 808e 	beq.w	801bf4a <tcp_output+0x22a>
 801be2e:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 801be32:	2b0a      	cmp	r3, #10
 801be34:	f240 808b 	bls.w	801bf4e <tcp_output+0x22e>
 801be38:	2301      	movs	r3, #1
 801be3a:	e002      	b.n	801be42 <tcp_output+0x122>
 801be3c:	2301      	movs	r3, #1
 801be3e:	e000      	b.n	801be42 <tcp_output+0x122>
 801be40:	2301      	movs	r3, #1
 801be42:	b91b      	cbnz	r3, 801be4c <tcp_output+0x12c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801be44:	7eab      	ldrb	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801be46:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801be4a:	d0d2      	beq.n	801bdf2 <tcp_output+0xd2>
    if (pcb->state != SYN_SENT) {
 801be4c:	7d2b      	ldrb	r3, [r5, #20]
 801be4e:	2b02      	cmp	r3, #2
 801be50:	d00a      	beq.n	801be68 <tcp_output+0x148>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801be52:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 801be56:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 801be5a:	2010      	movs	r0, #16
 801be5c:	f7fa f9c9 	bl	80161f2 <lwip_htons>
 801be60:	ea49 0000 	orr.w	r0, r9, r0
 801be64:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 801be68:	4642      	mov	r2, r8
 801be6a:	4629      	mov	r1, r5
 801be6c:	4620      	mov	r0, r4
 801be6e:	f7ff fb4b 	bl	801b508 <tcp_output_segment>
    if (err != ERR_OK) {
 801be72:	4603      	mov	r3, r0
 801be74:	2800      	cmp	r0, #0
 801be76:	d16c      	bne.n	801bf52 <tcp_output+0x232>
    pcb->unsent = seg->next;
 801be78:	6823      	ldr	r3, [r4, #0]
 801be7a:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 801be7c:	7d2b      	ldrb	r3, [r5, #20]
 801be7e:	2b02      	cmp	r3, #2
 801be80:	d003      	beq.n	801be8a <tcp_output+0x16a>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801be82:	7eab      	ldrb	r3, [r5, #26]
 801be84:	f023 0303 	bic.w	r3, r3, #3
 801be88:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801be8a:	68e3      	ldr	r3, [r4, #12]
 801be8c:	6858      	ldr	r0, [r3, #4]
 801be8e:	f7fa f9b3 	bl	80161f8 <lwip_htonl>
 801be92:	4681      	mov	r9, r0
 801be94:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 801be98:	68e3      	ldr	r3, [r4, #12]
 801be9a:	8998      	ldrh	r0, [r3, #12]
 801be9c:	f7fa f9a9 	bl	80161f2 <lwip_htons>
 801bea0:	f010 0f03 	tst.w	r0, #3
 801bea4:	d05a      	beq.n	801bf5c <tcp_output+0x23c>
 801bea6:	2001      	movs	r0, #1
 801bea8:	4450      	add	r0, sl
 801beaa:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801beac:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801beae:	1a1b      	subs	r3, r3, r0
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	db55      	blt.n	801bf60 <tcp_output+0x240>
    if (TCP_TCPLEN(seg) > 0) {
 801beb4:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 801beb8:	68e3      	ldr	r3, [r4, #12]
 801beba:	8998      	ldrh	r0, [r3, #12]
 801bebc:	f7fa f999 	bl	80161f2 <lwip_htons>
 801bec0:	f010 0f03 	tst.w	r0, #3
 801bec4:	d04e      	beq.n	801bf64 <tcp_output+0x244>
 801bec6:	2301      	movs	r3, #1
 801bec8:	eb13 0f09 	cmn.w	r3, r9
 801becc:	d06a      	beq.n	801bfa4 <tcp_output+0x284>
      seg->next = NULL;
 801bece:	2300      	movs	r3, #0
 801bed0:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 801bed2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d047      	beq.n	801bf68 <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801bed8:	68e3      	ldr	r3, [r4, #12]
 801beda:	6858      	ldr	r0, [r3, #4]
 801bedc:	f7fa f98c 	bl	80161f8 <lwip_htonl>
 801bee0:	4681      	mov	r9, r0
 801bee2:	68f3      	ldr	r3, [r6, #12]
 801bee4:	6858      	ldr	r0, [r3, #4]
 801bee6:	f7fa f987 	bl	80161f8 <lwip_htonl>
 801beea:	eba9 0000 	sub.w	r0, r9, r0
 801beee:	2800      	cmp	r0, #0
 801bef0:	db3d      	blt.n	801bf6e <tcp_output+0x24e>
          useg->next = seg;
 801bef2:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 801bef4:	4626      	mov	r6, r4
    seg = pcb->unsent;
 801bef6:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 801bef8:	2c00      	cmp	r4, #0
 801befa:	f43f af7a 	beq.w	801bdf2 <tcp_output+0xd2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801befe:	68e3      	ldr	r3, [r4, #12]
 801bf00:	6858      	ldr	r0, [r3, #4]
 801bf02:	f7fa f979 	bl	80161f8 <lwip_htonl>
 801bf06:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801bf08:	1ac0      	subs	r0, r0, r3
 801bf0a:	8923      	ldrh	r3, [r4, #8]
 801bf0c:	4418      	add	r0, r3
  while (seg != NULL &&
 801bf0e:	4287      	cmp	r7, r0
 801bf10:	f4ff af6f 	bcc.w	801bdf2 <tcp_output+0xd2>
    LWIP_ASSERT("RST not expected here!",
 801bf14:	68e3      	ldr	r3, [r4, #12]
 801bf16:	8998      	ldrh	r0, [r3, #12]
 801bf18:	f7fa f96b 	bl	80161f2 <lwip_htons>
 801bf1c:	f010 0f04 	tst.w	r0, #4
 801bf20:	f47f af73 	bne.w	801be0a <tcp_output+0xea>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801bf24:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d088      	beq.n	801be3c <tcp_output+0x11c>
 801bf2a:	7eab      	ldrb	r3, [r5, #26]
 801bf2c:	f013 0f44 	tst.w	r3, #68	; 0x44
 801bf30:	d186      	bne.n	801be40 <tcp_output+0x120>
 801bf32:	6eab      	ldr	r3, [r5, #104]	; 0x68
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	f43f af75 	beq.w	801be24 <tcp_output+0x104>
 801bf3a:	681a      	ldr	r2, [r3, #0]
 801bf3c:	2a00      	cmp	r2, #0
 801bf3e:	f43f af6c 	beq.w	801be1a <tcp_output+0xfa>
 801bf42:	2301      	movs	r3, #1
 801bf44:	e77d      	b.n	801be42 <tcp_output+0x122>
 801bf46:	2301      	movs	r3, #1
 801bf48:	e77b      	b.n	801be42 <tcp_output+0x122>
 801bf4a:	2301      	movs	r3, #1
 801bf4c:	e779      	b.n	801be42 <tcp_output+0x122>
 801bf4e:	2300      	movs	r3, #0
 801bf50:	e777      	b.n	801be42 <tcp_output+0x122>
      pcb->flags |= TF_NAGLEMEMERR;
 801bf52:	7eaa      	ldrb	r2, [r5, #26]
 801bf54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801bf58:	76aa      	strb	r2, [r5, #26]
      return err;
 801bf5a:	e753      	b.n	801be04 <tcp_output+0xe4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bf5c:	2000      	movs	r0, #0
 801bf5e:	e7a3      	b.n	801bea8 <tcp_output+0x188>
      pcb->snd_nxt = snd_nxt;
 801bf60:	64e8      	str	r0, [r5, #76]	; 0x4c
 801bf62:	e7a7      	b.n	801beb4 <tcp_output+0x194>
    if (TCP_TCPLEN(seg) > 0) {
 801bf64:	2300      	movs	r3, #0
 801bf66:	e7af      	b.n	801bec8 <tcp_output+0x1a8>
        pcb->unacked = seg;
 801bf68:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 801bf6a:	4626      	mov	r6, r4
 801bf6c:	e7c3      	b.n	801bef6 <tcp_output+0x1d6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801bf6e:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 801bf72:	e001      	b.n	801bf78 <tcp_output+0x258>
              cur_seg = &((*cur_seg)->next );
 801bf74:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 801bf78:	f8da 3000 	ldr.w	r3, [sl]
 801bf7c:	b163      	cbz	r3, 801bf98 <tcp_output+0x278>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bf7e:	68db      	ldr	r3, [r3, #12]
 801bf80:	6858      	ldr	r0, [r3, #4]
 801bf82:	f7fa f939 	bl	80161f8 <lwip_htonl>
 801bf86:	4681      	mov	r9, r0
 801bf88:	68e3      	ldr	r3, [r4, #12]
 801bf8a:	6858      	ldr	r0, [r3, #4]
 801bf8c:	f7fa f934 	bl	80161f8 <lwip_htonl>
 801bf90:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801bf94:	2800      	cmp	r0, #0
 801bf96:	dbed      	blt.n	801bf74 <tcp_output+0x254>
          seg->next = (*cur_seg);
 801bf98:	f8da 3000 	ldr.w	r3, [sl]
 801bf9c:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 801bf9e:	f8ca 4000 	str.w	r4, [sl]
 801bfa2:	e7a8      	b.n	801bef6 <tcp_output+0x1d6>
      tcp_seg_free(seg);
 801bfa4:	4620      	mov	r0, r4
 801bfa6:	f7fc ff2b 	bl	8018e00 <tcp_seg_free>
 801bfaa:	e7a4      	b.n	801bef6 <tcp_output+0x1d6>
    pcb->unsent_oversize = 0;
 801bfac:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 801bfb0:	e723      	b.n	801bdfa <tcp_output+0xda>
    return ERR_OK;
 801bfb2:	2300      	movs	r3, #0
 801bfb4:	e726      	b.n	801be04 <tcp_output+0xe4>
    return ERR_RTE;
 801bfb6:	f06f 0303 	mvn.w	r3, #3
 801bfba:	e723      	b.n	801be04 <tcp_output+0xe4>
      return ERR_RTE;
 801bfbc:	f06f 0303 	mvn.w	r3, #3
 801bfc0:	e720      	b.n	801be04 <tcp_output+0xe4>
 801bfc2:	bf00      	nop
 801bfc4:	2000eccc 	.word	0x2000eccc
 801bfc8:	0802473c 	.word	0x0802473c
 801bfcc:	080244dc 	.word	0x080244dc
 801bfd0:	0801fe1c 	.word	0x0801fe1c
 801bfd4:	08024504 	.word	0x08024504

0801bfd8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801bfd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bfdc:	b085      	sub	sp, #20
 801bfde:	4680      	mov	r8, r0
 801bfe0:	460f      	mov	r7, r1
 801bfe2:	4691      	mov	r9, r2
 801bfe4:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801bfe6:	2200      	movs	r2, #0
 801bfe8:	2114      	movs	r1, #20
 801bfea:	2001      	movs	r0, #1
 801bfec:	f7fc fa90 	bl	8018510 <pbuf_alloc>
  if (p == NULL) {
 801bff0:	b3a8      	cbz	r0, 801c05e <tcp_rst+0x86>
 801bff2:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bff4:	8943      	ldrh	r3, [r0, #10]
 801bff6:	2b13      	cmp	r3, #19
 801bff8:	d934      	bls.n	801c064 <tcp_rst+0x8c>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801bffa:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 801bffc:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801c000:	f7fa f8f7 	bl	80161f2 <lwip_htons>
 801c004:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801c006:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801c00a:	f7fa f8f2 	bl	80161f2 <lwip_htons>
 801c00e:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801c010:	4640      	mov	r0, r8
 801c012:	f7fa f8f1 	bl	80161f8 <lwip_htonl>
 801c016:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801c018:	4638      	mov	r0, r7
 801c01a:	f7fa f8ed 	bl	80161f8 <lwip_htonl>
 801c01e:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801c020:	f245 0014 	movw	r0, #20500	; 0x5014
 801c024:	f7fa f8e5 	bl	80161f2 <lwip_htons>
 801c028:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801c02a:	2300      	movs	r3, #0
 801c02c:	2210      	movs	r2, #16
 801c02e:	73a2      	strb	r2, [r4, #14]
 801c030:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 801c032:	7423      	strb	r3, [r4, #16]
 801c034:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 801c036:	74a3      	strb	r3, [r4, #18]
 801c038:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801c03a:	4630      	mov	r0, r6
 801c03c:	f7fa fe80 	bl	8016d40 <ip4_route>
  if (netif != NULL) {
 801c040:	b150      	cbz	r0, 801c058 <tcp_rst+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801c042:	9002      	str	r0, [sp, #8]
 801c044:	2306      	movs	r3, #6
 801c046:	9301      	str	r3, [sp, #4]
 801c048:	2300      	movs	r3, #0
 801c04a:	9300      	str	r3, [sp, #0]
 801c04c:	23ff      	movs	r3, #255	; 0xff
 801c04e:	4632      	mov	r2, r6
 801c050:	4649      	mov	r1, r9
 801c052:	4628      	mov	r0, r5
 801c054:	f7fb f812 	bl	801707c <ip4_output_if>
  }
  pbuf_free(p);
 801c058:	4628      	mov	r0, r5
 801c05a:	f7fc f9ed 	bl	8018438 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c05e:	b005      	add	sp, #20
 801c060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c064:	4b03      	ldr	r3, [pc, #12]	; (801c074 <tcp_rst+0x9c>)
 801c066:	f240 524d 	movw	r2, #1357	; 0x54d
 801c06a:	4903      	ldr	r1, [pc, #12]	; (801c078 <tcp_rst+0xa0>)
 801c06c:	4803      	ldr	r0, [pc, #12]	; (801c07c <tcp_rst+0xa4>)
 801c06e:	f003 f906 	bl	801f27e <iprintf>
 801c072:	e7c2      	b.n	801bffa <tcp_rst+0x22>
 801c074:	0802473c 	.word	0x0802473c
 801c078:	0802451c 	.word	0x0802451c
 801c07c:	0801fe1c 	.word	0x0801fe1c

0801c080 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801c080:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 801c082:	b10a      	cbz	r2, 801c088 <tcp_rexmit_rto+0x8>
{
 801c084:	b508      	push	{r3, lr}
 801c086:	e001      	b.n	801c08c <tcp_rexmit_rto+0xc>
 801c088:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801c08a:	461a      	mov	r2, r3
 801c08c:	6813      	ldr	r3, [r2, #0]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d1fb      	bne.n	801c08a <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801c092:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801c094:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801c096:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801c098:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801c09a:	2300      	movs	r3, #0
 801c09c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801c09e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801c0a2:	2bff      	cmp	r3, #255	; 0xff
 801c0a4:	d002      	beq.n	801c0ac <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 801c0a6:	3301      	adds	r3, #1
 801c0a8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801c0b0:	f7ff fe36 	bl	801bd20 <tcp_output>
 801c0b4:	bd08      	pop	{r3, pc}

0801c0b6 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801c0b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801c0b8:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 801c0ba:	b316      	cbz	r6, 801c102 <tcp_rexmit+0x4c>
 801c0bc:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 801c0be:	6833      	ldr	r3, [r6, #0]
 801c0c0:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801c0c2:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 801c0c6:	e000      	b.n	801c0ca <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801c0c8:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801c0ca:	682b      	ldr	r3, [r5, #0]
 801c0cc:	b15b      	cbz	r3, 801c0e6 <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c0ce:	68db      	ldr	r3, [r3, #12]
 801c0d0:	6858      	ldr	r0, [r3, #4]
 801c0d2:	f7fa f891 	bl	80161f8 <lwip_htonl>
 801c0d6:	4604      	mov	r4, r0
 801c0d8:	68f3      	ldr	r3, [r6, #12]
 801c0da:	6858      	ldr	r0, [r3, #4]
 801c0dc:	f7fa f88c 	bl	80161f8 <lwip_htonl>
 801c0e0:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 801c0e2:	2800      	cmp	r0, #0
 801c0e4:	dbf0      	blt.n	801c0c8 <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 801c0e6:	682b      	ldr	r3, [r5, #0]
 801c0e8:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801c0ea:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801c0ec:	6833      	ldr	r3, [r6, #0]
 801c0ee:	b14b      	cbz	r3, 801c104 <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801c0f0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801c0f4:	2bff      	cmp	r3, #255	; 0xff
 801c0f6:	d002      	beq.n	801c0fe <tcp_rexmit+0x48>
    ++pcb->nrtx;
 801c0f8:	3301      	adds	r3, #1
 801c0fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801c0fe:	2300      	movs	r3, #0
 801c100:	637b      	str	r3, [r7, #52]	; 0x34
 801c102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801c104:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801c108:	e7f2      	b.n	801c0f0 <tcp_rexmit+0x3a>

0801c10a <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801c10a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801c10c:	b11b      	cbz	r3, 801c116 <tcp_rexmit_fast+0xc>
 801c10e:	7e83      	ldrb	r3, [r0, #26]
 801c110:	f013 0f04 	tst.w	r3, #4
 801c114:	d000      	beq.n	801c118 <tcp_rexmit_fast+0xe>
 801c116:	4770      	bx	lr
{
 801c118:	b510      	push	{r4, lr}
 801c11a:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801c11c:	f7ff ffcb 	bl	801c0b6 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c120:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801c124:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 801c128:	4293      	cmp	r3, r2
 801c12a:	d218      	bcs.n	801c15e <tcp_rexmit_fast+0x54>
 801c12c:	085a      	lsrs	r2, r3, #1
 801c12e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801c132:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c134:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801c138:	d202      	bcs.n	801c140 <tcp_rexmit_fast+0x36>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801c13a:	005a      	lsls	r2, r3, #1
 801c13c:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801c140:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801c144:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c148:	fa12 f383 	uxtah	r3, r2, r3
 801c14c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801c150:	7ea3      	ldrb	r3, [r4, #26]
 801c152:	f043 0304 	orr.w	r3, r3, #4
 801c156:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801c158:	2300      	movs	r3, #0
 801c15a:	8623      	strh	r3, [r4, #48]	; 0x30
 801c15c:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801c15e:	0852      	lsrs	r2, r2, #1
 801c160:	e7e5      	b.n	801c12e <tcp_rexmit_fast+0x24>

0801c162 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c162:	b570      	push	{r4, r5, r6, lr}
 801c164:	b084      	sub	sp, #16
 801c166:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c168:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c16a:	3801      	subs	r0, #1
 801c16c:	f7fa f844 	bl	80161f8 <lwip_htonl>
 801c170:	4603      	mov	r3, r0
 801c172:	2200      	movs	r2, #0
 801c174:	4611      	mov	r1, r2
 801c176:	4620      	mov	r0, r4
 801c178:	f7ff f97c 	bl	801b474 <tcp_output_alloc_header>
  if (p == NULL) {
 801c17c:	b1d0      	cbz	r0, 801c1b4 <tcp_keepalive+0x52>
 801c17e:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801c180:	1d26      	adds	r6, r4, #4
 801c182:	4630      	mov	r0, r6
 801c184:	f7fa fddc 	bl	8016d40 <ip4_route>
  if (netif == NULL) {
 801c188:	b188      	cbz	r0, 801c1ae <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801c18a:	7aa3      	ldrb	r3, [r4, #10]
 801c18c:	9002      	str	r0, [sp, #8]
 801c18e:	2206      	movs	r2, #6
 801c190:	9201      	str	r2, [sp, #4]
 801c192:	2200      	movs	r2, #0
 801c194:	9200      	str	r2, [sp, #0]
 801c196:	4632      	mov	r2, r6
 801c198:	4621      	mov	r1, r4
 801c19a:	4628      	mov	r0, r5
 801c19c:	f7fa ff6e 	bl	801707c <ip4_output_if>
 801c1a0:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801c1a2:	4628      	mov	r0, r5
 801c1a4:	f7fc f948 	bl	8018438 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801c1a8:	4620      	mov	r0, r4
 801c1aa:	b004      	add	sp, #16
 801c1ac:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 801c1ae:	f06f 0403 	mvn.w	r4, #3
 801c1b2:	e7f6      	b.n	801c1a2 <tcp_keepalive+0x40>
    return ERR_MEM;
 801c1b4:	f04f 34ff 	mov.w	r4, #4294967295
 801c1b8:	e7f6      	b.n	801c1a8 <tcp_keepalive+0x46>

0801c1ba <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1be:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801c1c0:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 801c1c2:	b175      	cbz	r5, 801c1e2 <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 801c1c4:	2d00      	cmp	r5, #0
 801c1c6:	d05d      	beq.n	801c284 <tcp_zero_window_probe+0xca>
 801c1c8:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c1ca:	68eb      	ldr	r3, [r5, #12]
 801c1cc:	8998      	ldrh	r0, [r3, #12]
 801c1ce:	f7fa f810 	bl	80161f2 <lwip_htons>
 801c1d2:	f010 0f01 	tst.w	r0, #1
 801c1d6:	d006      	beq.n	801c1e6 <tcp_zero_window_probe+0x2c>
 801c1d8:	892b      	ldrh	r3, [r5, #8]
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	d040      	beq.n	801c260 <tcp_zero_window_probe+0xa6>
 801c1de:	2200      	movs	r2, #0
 801c1e0:	e002      	b.n	801c1e8 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 801c1e2:	6e85      	ldr	r5, [r0, #104]	; 0x68
 801c1e4:	e7ee      	b.n	801c1c4 <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c1e6:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c1e8:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801c1ec:	68eb      	ldr	r3, [r5, #12]
 801c1ee:	685b      	ldr	r3, [r3, #4]
 801c1f0:	f082 0201 	eor.w	r2, r2, #1
 801c1f4:	2100      	movs	r1, #0
 801c1f6:	4620      	mov	r0, r4
 801c1f8:	f7ff f93c 	bl	801b474 <tcp_output_alloc_header>
  if (p == NULL) {
 801c1fc:	4607      	mov	r7, r0
 801c1fe:	2800      	cmp	r0, #0
 801c200:	d042      	beq.n	801c288 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c202:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 801c206:	b36e      	cbz	r6, 801c264 <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c208:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 801c20c:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 801c210:	b2b6      	uxth	r6, r6
 801c212:	2011      	movs	r0, #17
 801c214:	f7f9 ffed 	bl	80161f2 <lwip_htons>
 801c218:	4330      	orrs	r0, r6
 801c21a:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c21e:	68eb      	ldr	r3, [r5, #12]
 801c220:	6858      	ldr	r0, [r3, #4]
 801c222:	f7f9 ffe9 	bl	80161f8 <lwip_htonl>
 801c226:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c228:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c22a:	1a1b      	subs	r3, r3, r0
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	db24      	blt.n	801c27a <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801c230:	1d25      	adds	r5, r4, #4
 801c232:	4628      	mov	r0, r5
 801c234:	f7fa fd84 	bl	8016d40 <ip4_route>
  if (netif == NULL) {
 801c238:	b308      	cbz	r0, 801c27e <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801c23a:	7aa3      	ldrb	r3, [r4, #10]
 801c23c:	9002      	str	r0, [sp, #8]
 801c23e:	2206      	movs	r2, #6
 801c240:	9201      	str	r2, [sp, #4]
 801c242:	2200      	movs	r2, #0
 801c244:	9200      	str	r2, [sp, #0]
 801c246:	462a      	mov	r2, r5
 801c248:	4621      	mov	r1, r4
 801c24a:	4638      	mov	r0, r7
 801c24c:	f7fa ff16 	bl	801707c <ip4_output_if>
 801c250:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801c252:	4638      	mov	r0, r7
 801c254:	f7fc f8f0 	bl	8018438 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801c258:	4620      	mov	r0, r4
 801c25a:	b004      	add	sp, #16
 801c25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c260:	2201      	movs	r2, #1
 801c262:	e7c1      	b.n	801c1e8 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c264:	6868      	ldr	r0, [r5, #4]
 801c266:	8903      	ldrh	r3, [r0, #8]
 801c268:	892a      	ldrh	r2, [r5, #8]
 801c26a:	1a9b      	subs	r3, r3, r2
 801c26c:	b29b      	uxth	r3, r3
 801c26e:	2201      	movs	r2, #1
 801c270:	f108 0114 	add.w	r1, r8, #20
 801c274:	f7fc fba2 	bl	80189bc <pbuf_copy_partial>
 801c278:	e7d1      	b.n	801c21e <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 801c27a:	64e0      	str	r0, [r4, #76]	; 0x4c
 801c27c:	e7d8      	b.n	801c230 <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 801c27e:	f06f 0403 	mvn.w	r4, #3
 801c282:	e7e6      	b.n	801c252 <tcp_zero_window_probe+0x98>
    return ERR_OK;
 801c284:	2400      	movs	r4, #0
 801c286:	e7e7      	b.n	801c258 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 801c288:	f04f 34ff 	mov.w	r4, #4294967295
 801c28c:	e7e4      	b.n	801c258 <tcp_zero_window_probe+0x9e>
	...

0801c290 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 801c290:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 801c292:	4b0a      	ldr	r3, [pc, #40]	; (801c2bc <sys_timeouts_sleeptime+0x2c>)
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	b15b      	cbz	r3, 801c2b0 <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 801c298:	f001 f884 	bl	801d3a4 <sys_now>
 801c29c:	4b08      	ldr	r3, [pc, #32]	; (801c2c0 <sys_timeouts_sleeptime+0x30>)
 801c29e:	681b      	ldr	r3, [r3, #0]
 801c2a0:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 801c2a2:	4b06      	ldr	r3, [pc, #24]	; (801c2bc <sys_timeouts_sleeptime+0x2c>)
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	685b      	ldr	r3, [r3, #4]
 801c2a8:	4298      	cmp	r0, r3
 801c2aa:	d804      	bhi.n	801c2b6 <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 801c2ac:	1a18      	subs	r0, r3, r0
 801c2ae:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 801c2b0:	f04f 30ff 	mov.w	r0, #4294967295
 801c2b4:	bd08      	pop	{r3, pc}
    return 0;
 801c2b6:	2000      	movs	r0, #0
  }
}
 801c2b8:	bd08      	pop	{r3, pc}
 801c2ba:	bf00      	nop
 801c2bc:	20009514 	.word	0x20009514
 801c2c0:	2000951c 	.word	0x2000951c

0801c2c4 <sys_check_timeouts>:
{
 801c2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (next_timeout) {
 801c2c6:	4b18      	ldr	r3, [pc, #96]	; (801c328 <sys_check_timeouts+0x64>)
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	b363      	cbz	r3, 801c326 <sys_check_timeouts+0x62>
    now = sys_now();
 801c2cc:	f001 f86a 	bl	801d3a4 <sys_now>
    diff = now - timeouts_last_time;
 801c2d0:	4b16      	ldr	r3, [pc, #88]	; (801c32c <sys_check_timeouts+0x68>)
 801c2d2:	681c      	ldr	r4, [r3, #0]
 801c2d4:	1b04      	subs	r4, r0, r4
 801c2d6:	e005      	b.n	801c2e4 <sys_check_timeouts+0x20>
      had_one = 0;
 801c2d8:	2300      	movs	r3, #0
 801c2da:	e002      	b.n	801c2e2 <sys_check_timeouts+0x1e>
 801c2dc:	2300      	movs	r3, #0
 801c2de:	e000      	b.n	801c2e2 <sys_check_timeouts+0x1e>
        had_one = 1;
 801c2e0:	2301      	movs	r3, #1
    } while (had_one);
 801c2e2:	b303      	cbz	r3, 801c326 <sys_check_timeouts+0x62>
      tmptimeout = next_timeout;
 801c2e4:	4b10      	ldr	r3, [pc, #64]	; (801c328 <sys_check_timeouts+0x64>)
 801c2e6:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801c2e8:	2900      	cmp	r1, #0
 801c2ea:	d0f5      	beq.n	801c2d8 <sys_check_timeouts+0x14>
 801c2ec:	684b      	ldr	r3, [r1, #4]
 801c2ee:	429c      	cmp	r4, r3
 801c2f0:	d3f4      	bcc.n	801c2dc <sys_check_timeouts+0x18>
        timeouts_last_time += tmptimeout->time;
 801c2f2:	480e      	ldr	r0, [pc, #56]	; (801c32c <sys_check_timeouts+0x68>)
 801c2f4:	6802      	ldr	r2, [r0, #0]
 801c2f6:	441a      	add	r2, r3
 801c2f8:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 801c2fa:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 801c2fc:	680a      	ldr	r2, [r1, #0]
 801c2fe:	4b0a      	ldr	r3, [pc, #40]	; (801c328 <sys_check_timeouts+0x64>)
 801c300:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 801c302:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 801c304:	68cf      	ldr	r7, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c306:	2009      	movs	r0, #9
 801c308:	f7fb fec6 	bl	8018098 <memp_free>
        if (handler != NULL) {
 801c30c:	2d00      	cmp	r5, #0
 801c30e:	d0e7      	beq.n	801c2e0 <sys_check_timeouts+0x1c>
          LOCK_TCPIP_CORE();
 801c310:	4e07      	ldr	r6, [pc, #28]	; (801c330 <sys_check_timeouts+0x6c>)
 801c312:	4630      	mov	r0, r6
 801c314:	f000 fa5b 	bl	801c7ce <sys_mutex_lock>
          handler(arg);
 801c318:	4638      	mov	r0, r7
 801c31a:	47a8      	blx	r5
          UNLOCK_TCPIP_CORE();
 801c31c:	4630      	mov	r0, r6
 801c31e:	f000 fa5d 	bl	801c7dc <sys_mutex_unlock>
        had_one = 1;
 801c322:	2301      	movs	r3, #1
 801c324:	e7dd      	b.n	801c2e2 <sys_check_timeouts+0x1e>
 801c326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c328:	20009514 	.word	0x20009514
 801c32c:	2000951c 	.word	0x2000951c
 801c330:	2000a250 	.word	0x2000a250

0801c334 <sys_timeout>:
{
 801c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c338:	4605      	mov	r5, r0
 801c33a:	4688      	mov	r8, r1
 801c33c:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c33e:	2009      	movs	r0, #9
 801c340:	f7fb fe90 	bl	8018064 <memp_malloc>
  if (timeout == NULL) {
 801c344:	b308      	cbz	r0, 801c38a <sys_timeout+0x56>
 801c346:	4604      	mov	r4, r0
  now = sys_now();
 801c348:	f001 f82c 	bl	801d3a4 <sys_now>
  if (next_timeout == NULL) {
 801c34c:	4b23      	ldr	r3, [pc, #140]	; (801c3dc <sys_timeout+0xa8>)
 801c34e:	681e      	ldr	r6, [r3, #0]
 801c350:	b31e      	cbz	r6, 801c39a <sys_timeout+0x66>
    diff = now - timeouts_last_time;
 801c352:	4b23      	ldr	r3, [pc, #140]	; (801c3e0 <sys_timeout+0xac>)
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 801c358:	2300      	movs	r3, #0
 801c35a:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 801c35c:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 801c360:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 801c362:	4428      	add	r0, r5
 801c364:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 801c366:	b1e6      	cbz	r6, 801c3a2 <sys_timeout+0x6e>
  if (next_timeout->time > msecs) {
 801c368:	6873      	ldr	r3, [r6, #4]
 801c36a:	429d      	cmp	r5, r3
 801c36c:	d31d      	bcc.n	801c3aa <sys_timeout+0x76>
 801c36e:	4632      	mov	r2, r6
    for (t = next_timeout; t != NULL; t = t->next) {
 801c370:	2a00      	cmp	r2, #0
 801c372:	d030      	beq.n	801c3d6 <sys_timeout+0xa2>
      timeout->time -= t->time;
 801c374:	6851      	ldr	r1, [r2, #4]
 801c376:	6863      	ldr	r3, [r4, #4]
 801c378:	1a5b      	subs	r3, r3, r1
 801c37a:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801c37c:	6811      	ldr	r1, [r2, #0]
 801c37e:	b1d9      	cbz	r1, 801c3b8 <sys_timeout+0x84>
 801c380:	6848      	ldr	r0, [r1, #4]
 801c382:	4283      	cmp	r3, r0
 801c384:	d318      	bcc.n	801c3b8 <sys_timeout+0x84>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c386:	460a      	mov	r2, r1
 801c388:	e7f2      	b.n	801c370 <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c38a:	4b16      	ldr	r3, [pc, #88]	; (801c3e4 <sys_timeout+0xb0>)
 801c38c:	22d4      	movs	r2, #212	; 0xd4
 801c38e:	4916      	ldr	r1, [pc, #88]	; (801c3e8 <sys_timeout+0xb4>)
 801c390:	4816      	ldr	r0, [pc, #88]	; (801c3ec <sys_timeout+0xb8>)
 801c392:	f002 ff74 	bl	801f27e <iprintf>
 801c396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 801c39a:	4b11      	ldr	r3, [pc, #68]	; (801c3e0 <sys_timeout+0xac>)
 801c39c:	6018      	str	r0, [r3, #0]
    diff = 0;
 801c39e:	2000      	movs	r0, #0
 801c3a0:	e7da      	b.n	801c358 <sys_timeout+0x24>
    next_timeout = timeout;
 801c3a2:	4b0e      	ldr	r3, [pc, #56]	; (801c3dc <sys_timeout+0xa8>)
 801c3a4:	601c      	str	r4, [r3, #0]
    return;
 801c3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 801c3aa:	1b5d      	subs	r5, r3, r5
 801c3ac:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 801c3ae:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 801c3b0:	4b0a      	ldr	r3, [pc, #40]	; (801c3dc <sys_timeout+0xa8>)
 801c3b2:	601c      	str	r4, [r3, #0]
 801c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (t->next != NULL) {
 801c3b8:	b139      	cbz	r1, 801c3ca <sys_timeout+0x96>
          t->next->time -= timeout->time;
 801c3ba:	6848      	ldr	r0, [r1, #4]
 801c3bc:	1ac3      	subs	r3, r0, r3
 801c3be:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 801c3c0:	6813      	ldr	r3, [r2, #0]
 801c3c2:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 801c3c4:	6014      	str	r4, [r2, #0]
        break;
 801c3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if (timeout->time > msecs) {
 801c3ca:	429d      	cmp	r5, r3
 801c3cc:	d2f8      	bcs.n	801c3c0 <sys_timeout+0x8c>
          timeout->time = msecs + next_timeout->time;
 801c3ce:	6873      	ldr	r3, [r6, #4]
 801c3d0:	441d      	add	r5, r3
 801c3d2:	6065      	str	r5, [r4, #4]
 801c3d4:	e7f4      	b.n	801c3c0 <sys_timeout+0x8c>
 801c3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3da:	bf00      	nop
 801c3dc:	20009514 	.word	0x20009514
 801c3e0:	2000951c 	.word	0x2000951c
 801c3e4:	080247f8 	.word	0x080247f8
 801c3e8:	0802482c 	.word	0x0802482c
 801c3ec:	0801fe1c 	.word	0x0801fe1c

0801c3f0 <tcp_timer_needed>:
{
 801c3f0:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c3f2:	4b0a      	ldr	r3, [pc, #40]	; (801c41c <tcp_timer_needed+0x2c>)
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	b953      	cbnz	r3, 801c40e <tcp_timer_needed+0x1e>
 801c3f8:	4b09      	ldr	r3, [pc, #36]	; (801c420 <tcp_timer_needed+0x30>)
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	b143      	cbz	r3, 801c410 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 801c3fe:	2201      	movs	r2, #1
 801c400:	4b06      	ldr	r3, [pc, #24]	; (801c41c <tcp_timer_needed+0x2c>)
 801c402:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c404:	2200      	movs	r2, #0
 801c406:	4907      	ldr	r1, [pc, #28]	; (801c424 <tcp_timer_needed+0x34>)
 801c408:	20fa      	movs	r0, #250	; 0xfa
 801c40a:	f7ff ff93 	bl	801c334 <sys_timeout>
 801c40e:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c410:	4b05      	ldr	r3, [pc, #20]	; (801c428 <tcp_timer_needed+0x38>)
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d1f2      	bne.n	801c3fe <tcp_timer_needed+0xe>
 801c418:	e7f9      	b.n	801c40e <tcp_timer_needed+0x1e>
 801c41a:	bf00      	nop
 801c41c:	20009518 	.word	0x20009518
 801c420:	2000ecb8 	.word	0x2000ecb8
 801c424:	0801c42d 	.word	0x0801c42d
 801c428:	2000ecc8 	.word	0x2000ecc8

0801c42c <tcpip_tcp_timer>:
{
 801c42c:	b508      	push	{r3, lr}
  tcp_tmr();
 801c42e:	f7fd f93b 	bl	80196a8 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c432:	4b08      	ldr	r3, [pc, #32]	; (801c454 <tcpip_tcp_timer+0x28>)
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	b12b      	cbz	r3, 801c444 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c438:	2200      	movs	r2, #0
 801c43a:	4907      	ldr	r1, [pc, #28]	; (801c458 <tcpip_tcp_timer+0x2c>)
 801c43c:	20fa      	movs	r0, #250	; 0xfa
 801c43e:	f7ff ff79 	bl	801c334 <sys_timeout>
 801c442:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c444:	4b05      	ldr	r3, [pc, #20]	; (801c45c <tcpip_tcp_timer+0x30>)
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d1f5      	bne.n	801c438 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801c44c:	2200      	movs	r2, #0
 801c44e:	4b04      	ldr	r3, [pc, #16]	; (801c460 <tcpip_tcp_timer+0x34>)
 801c450:	601a      	str	r2, [r3, #0]
 801c452:	bd08      	pop	{r3, pc}
 801c454:	2000ecb8 	.word	0x2000ecb8
 801c458:	0801c42d 	.word	0x0801c42d
 801c45c:	2000ecc8 	.word	0x2000ecc8
 801c460:	20009518 	.word	0x20009518

0801c464 <sys_timeouts_init>:
{
 801c464:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c466:	2401      	movs	r4, #1
 801c468:	e008      	b.n	801c47c <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801c46a:	4b08      	ldr	r3, [pc, #32]	; (801c48c <sys_timeouts_init+0x28>)
 801c46c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 801c470:	4907      	ldr	r1, [pc, #28]	; (801c490 <sys_timeouts_init+0x2c>)
 801c472:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 801c476:	f7ff ff5d 	bl	801c334 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c47a:	3401      	adds	r4, #1
 801c47c:	2c02      	cmp	r4, #2
 801c47e:	d9f4      	bls.n	801c46a <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 801c480:	f000 ff90 	bl	801d3a4 <sys_now>
 801c484:	4b03      	ldr	r3, [pc, #12]	; (801c494 <sys_timeouts_init+0x30>)
 801c486:	6018      	str	r0, [r3, #0]
 801c488:	bd10      	pop	{r4, pc}
 801c48a:	bf00      	nop
 801c48c:	080247e0 	.word	0x080247e0
 801c490:	0801c499 	.word	0x0801c499
 801c494:	2000951c 	.word	0x2000951c

0801c498 <cyclic_timer>:
{
 801c498:	b510      	push	{r4, lr}
 801c49a:	4604      	mov	r4, r0
  cyclic->handler();
 801c49c:	6843      	ldr	r3, [r0, #4]
 801c49e:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801c4a0:	4622      	mov	r2, r4
 801c4a2:	4902      	ldr	r1, [pc, #8]	; (801c4ac <cyclic_timer+0x14>)
 801c4a4:	6820      	ldr	r0, [r4, #0]
 801c4a6:	f7ff ff45 	bl	801c334 <sys_timeout>
 801c4aa:	bd10      	pop	{r4, pc}
 801c4ac:	0801c499 	.word	0x0801c499

0801c4b0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801c4b0:	b538      	push	{r3, r4, r5, lr}
 801c4b2:	4604      	mov	r4, r0
 801c4b4:	460d      	mov	r5, r1
 801c4b6:	e007      	b.n	801c4c8 <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 801c4b8:	2200      	movs	r2, #0
 801c4ba:	4629      	mov	r1, r5
 801c4bc:	4620      	mov	r0, r4
 801c4be:	f000 f8d6 	bl	801c66e <sys_arch_mbox_fetch>
    return;
 801c4c2:	bd38      	pop	{r3, r4, r5, pc}

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801c4c4:	f7ff fefe 	bl	801c2c4 <sys_check_timeouts>
  if (!next_timeout) {
 801c4c8:	4b08      	ldr	r3, [pc, #32]	; (801c4ec <sys_timeouts_mbox_fetch+0x3c>)
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d0f3      	beq.n	801c4b8 <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 801c4d0:	f7ff fede 	bl	801c290 <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801c4d4:	4602      	mov	r2, r0
 801c4d6:	2800      	cmp	r0, #0
 801c4d8:	d0f4      	beq.n	801c4c4 <sys_timeouts_mbox_fetch+0x14>
 801c4da:	4629      	mov	r1, r5
 801c4dc:	4620      	mov	r0, r4
 801c4de:	f000 f8c6 	bl	801c66e <sys_arch_mbox_fetch>
 801c4e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 801c4e6:	d0ed      	beq.n	801c4c4 <sys_timeouts_mbox_fetch+0x14>
 801c4e8:	bd38      	pop	{r3, r4, r5, pc}
 801c4ea:	bf00      	nop
 801c4ec:	20009514 	.word	0x20009514

0801c4f0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4f2:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801c4f4:	8945      	ldrh	r5, [r0, #10]
 801c4f6:	2d0e      	cmp	r5, #14
 801c4f8:	d916      	bls.n	801c528 <ethernet_input+0x38>
 801c4fa:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c4fc:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c4fe:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c500:	7803      	ldrb	r3, [r0, #0]
 801c502:	f013 0f01 	tst.w	r3, #1
 801c506:	d00a      	beq.n	801c51e <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c508:	2b01      	cmp	r3, #1
 801c50a:	d012      	beq.n	801c532 <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c50c:	2206      	movs	r2, #6
 801c50e:	4921      	ldr	r1, [pc, #132]	; (801c594 <ethernet_input+0xa4>)
 801c510:	f003 fa94 	bl	801fa3c <memcmp>
 801c514:	b918      	cbnz	r0, 801c51e <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c516:	7b63      	ldrb	r3, [r4, #13]
 801c518:	f043 0308 	orr.w	r3, r3, #8
 801c51c:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801c51e:	2e08      	cmp	r6, #8
 801c520:	d012      	beq.n	801c548 <ethernet_input+0x58>
 801c522:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801c526:	d022      	beq.n	801c56e <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801c528:	4620      	mov	r0, r4
 801c52a:	f7fb ff85 	bl	8018438 <pbuf_free>
  return ERR_OK;
}
 801c52e:	2000      	movs	r0, #0
 801c530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c532:	7843      	ldrb	r3, [r0, #1]
 801c534:	2b00      	cmp	r3, #0
 801c536:	d1f2      	bne.n	801c51e <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c538:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c53a:	2b5e      	cmp	r3, #94	; 0x5e
 801c53c:	d1ef      	bne.n	801c51e <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 801c53e:	7b63      	ldrb	r3, [r4, #13]
 801c540:	f043 0310 	orr.w	r3, r3, #16
 801c544:	7363      	strb	r3, [r4, #13]
 801c546:	e7ea      	b.n	801c51e <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c548:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c54c:	f013 0f08 	tst.w	r3, #8
 801c550:	d0ea      	beq.n	801c528 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801c552:	2d0d      	cmp	r5, #13
 801c554:	dde8      	ble.n	801c528 <ethernet_input+0x38>
 801c556:	f06f 010d 	mvn.w	r1, #13
 801c55a:	4620      	mov	r0, r4
 801c55c:	f7fb ff62 	bl	8018424 <pbuf_header>
 801c560:	2800      	cmp	r0, #0
 801c562:	d1e1      	bne.n	801c528 <ethernet_input+0x38>
        ip4_input(p, netif);
 801c564:	4639      	mov	r1, r7
 801c566:	4620      	mov	r0, r4
 801c568:	f7fa fc3a 	bl	8016de0 <ip4_input>
      break;
 801c56c:	e7df      	b.n	801c52e <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c56e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c572:	f013 0f08 	tst.w	r3, #8
 801c576:	d0d7      	beq.n	801c528 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801c578:	2d0d      	cmp	r5, #13
 801c57a:	ddd5      	ble.n	801c528 <ethernet_input+0x38>
 801c57c:	f06f 010d 	mvn.w	r1, #13
 801c580:	4620      	mov	r0, r4
 801c582:	f7fb ff4f 	bl	8018424 <pbuf_header>
 801c586:	2800      	cmp	r0, #0
 801c588:	d1ce      	bne.n	801c528 <ethernet_input+0x38>
        etharp_input(p, netif);
 801c58a:	4639      	mov	r1, r7
 801c58c:	4620      	mov	r0, r4
 801c58e:	f7fa f841 	bl	8016614 <etharp_input>
      break;
 801c592:	e7cc      	b.n	801c52e <ethernet_input+0x3e>
 801c594:	0802486c 	.word	0x0802486c

0801c598 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801c598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c59c:	4605      	mov	r5, r0
 801c59e:	460c      	mov	r4, r1
 801c5a0:	4616      	mov	r6, r2
 801c5a2:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c5a4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801c5a8:	f7f9 fe23 	bl	80161f2 <lwip_htons>
 801c5ac:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801c5ae:	210e      	movs	r1, #14
 801c5b0:	4620      	mov	r0, r4
 801c5b2:	f7fb ff37 	bl	8018424 <pbuf_header>
 801c5b6:	b9e0      	cbnz	r0, 801c5f2 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801c5b8:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 801c5ba:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801c5be:	683a      	ldr	r2, [r7, #0]
 801c5c0:	601a      	str	r2, [r3, #0]
 801c5c2:	88ba      	ldrh	r2, [r7, #4]
 801c5c4:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 801c5c6:	6832      	ldr	r2, [r6, #0]
 801c5c8:	f8c3 2006 	str.w	r2, [r3, #6]
 801c5cc:	88b2      	ldrh	r2, [r6, #4]
 801c5ce:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c5d0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801c5d4:	2b06      	cmp	r3, #6
 801c5d6:	d006      	beq.n	801c5e6 <ethernet_output+0x4e>
 801c5d8:	4b08      	ldr	r3, [pc, #32]	; (801c5fc <ethernet_output+0x64>)
 801c5da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801c5de:	4908      	ldr	r1, [pc, #32]	; (801c600 <ethernet_output+0x68>)
 801c5e0:	4808      	ldr	r0, [pc, #32]	; (801c604 <ethernet_output+0x6c>)
 801c5e2:	f002 fe4c 	bl	801f27e <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c5e6:	69ab      	ldr	r3, [r5, #24]
 801c5e8:	4621      	mov	r1, r4
 801c5ea:	4628      	mov	r0, r5
 801c5ec:	4798      	blx	r3
 801c5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c5f2:	f06f 0001 	mvn.w	r0, #1
}
 801c5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5fa:	bf00      	nop
 801c5fc:	08024874 	.word	0x08024874
 801c600:	080248ac 	.word	0x080248ac
 801c604:	0801fe1c 	.word	0x0801fe1c

0801c608 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c608:	b510      	push	{r4, lr}
 801c60a:	b084      	sub	sp, #16
 801c60c:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 801c60e:	9100      	str	r1, [sp, #0]
 801c610:	2304      	movs	r3, #4
 801c612:	9301      	str	r3, [sp, #4]
 801c614:	2100      	movs	r1, #0
 801c616:	9102      	str	r1, [sp, #8]
 801c618:	9103      	str	r1, [sp, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c61a:	4668      	mov	r0, sp
 801c61c:	f7f6 fc0c 	bl	8012e38 <osMessageCreate>
 801c620:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801c622:	b110      	cbz	r0, 801c62a <sys_mbox_new+0x22>
  return ERR_MEM;
 
 return ERR_OK;
 801c624:	2000      	movs	r0, #0
}
 801c626:	b004      	add	sp, #16
 801c628:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 801c62a:	f04f 30ff 	mov.w	r0, #4294967295
 801c62e:	e7fa      	b.n	801c626 <sys_mbox_new+0x1e>

0801c630 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c630:	b510      	push	{r4, lr}
 801c632:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 801c634:	6800      	ldr	r0, [r0, #0]
 801c636:	f7f6 fc97 	bl	8012f68 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 801c63a:	6820      	ldr	r0, [r4, #0]
 801c63c:	f7f6 fca1 	bl	8012f82 <osMessageDelete>
 801c640:	bd10      	pop	{r4, pc}

0801c642 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801c642:	b538      	push	{r3, r4, r5, lr}
 801c644:	4605      	mov	r5, r0
 801c646:	460c      	mov	r4, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801c648:	f04f 32ff 	mov.w	r2, #4294967295
 801c64c:	4621      	mov	r1, r4
 801c64e:	6828      	ldr	r0, [r5, #0]
 801c650:	f7f6 fc06 	bl	8012e60 <osMessagePut>
 801c654:	2800      	cmp	r0, #0
 801c656:	d1f7      	bne.n	801c648 <sys_mbox_post+0x6>
}
 801c658:	bd38      	pop	{r3, r4, r5, pc}

0801c65a <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c65a:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c65c:	2200      	movs	r2, #0
 801c65e:	6800      	ldr	r0, [r0, #0]
 801c660:	f7f6 fbfe 	bl	8012e60 <osMessagePut>
 801c664:	b900      	cbnz	r0, 801c668 <sys_mbox_trypost+0xe>
#endif /* SYS_STATS */
			
   }

   return result;
}
 801c666:	bd08      	pop	{r3, pc}
      result = ERR_MEM;
 801c668:	f04f 30ff 	mov.w	r0, #4294967295
 801c66c:	e7fb      	b.n	801c666 <sys_mbox_trypost+0xc>

0801c66e <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c66e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c670:	b089      	sub	sp, #36	; 0x24
 801c672:	4606      	mov	r6, r0
 801c674:	460f      	mov	r7, r1
 801c676:	4615      	mov	r5, r2
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801c678:	f7f6 fa89 	bl	8012b8e <osKernelSysTick>
 801c67c:	4604      	mov	r4, r0
  
  if(timeout != 0)
 801c67e:	b185      	cbz	r5, 801c6a2 <sys_arch_mbox_fetch+0x34>
  { 
    event = osMessageGet (*mbox, timeout);
 801c680:	462a      	mov	r2, r5
 801c682:	6831      	ldr	r1, [r6, #0]
 801c684:	a805      	add	r0, sp, #20
 801c686:	f7f6 fc1f 	bl	8012ec8 <osMessageGet>
    
    if(event.status == osEventMessage)
 801c68a:	9b05      	ldr	r3, [sp, #20]
 801c68c:	2b10      	cmp	r3, #16
 801c68e:	d002      	beq.n	801c696 <sys_arch_mbox_fetch+0x28>
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c690:	f04f 30ff 	mov.w	r0, #4294967295
 801c694:	e015      	b.n	801c6c2 <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 801c696:	9b06      	ldr	r3, [sp, #24]
 801c698:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 801c69a:	f7f6 fa78 	bl	8012b8e <osKernelSysTick>
 801c69e:	1b00      	subs	r0, r0, r4
 801c6a0:	e00f      	b.n	801c6c2 <sys_arch_mbox_fetch+0x54>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801c6a2:	f04f 32ff 	mov.w	r2, #4294967295
 801c6a6:	6831      	ldr	r1, [r6, #0]
 801c6a8:	4668      	mov	r0, sp
 801c6aa:	f7f6 fc0d 	bl	8012ec8 <osMessageGet>
 801c6ae:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 801c6b2:	ab08      	add	r3, sp, #32
 801c6b4:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c6b8:	9b06      	ldr	r3, [sp, #24]
 801c6ba:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 801c6bc:	f7f6 fa67 	bl	8012b8e <osKernelSysTick>
 801c6c0:	1b00      	subs	r0, r0, r4
  }
}
 801c6c2:	b009      	add	sp, #36	; 0x24
 801c6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c6c6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c6c6:	b510      	push	{r4, lr}
 801c6c8:	b084      	sub	sp, #16
 801c6ca:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 801c6cc:	2200      	movs	r2, #0
 801c6ce:	6801      	ldr	r1, [r0, #0]
 801c6d0:	a801      	add	r0, sp, #4
 801c6d2:	f7f6 fbf9 	bl	8012ec8 <osMessageGet>
  
  if(event.status == osEventMessage)
 801c6d6:	9b01      	ldr	r3, [sp, #4]
 801c6d8:	2b10      	cmp	r3, #16
 801c6da:	d003      	beq.n	801c6e4 <sys_arch_mbox_tryfetch+0x1e>
    *msg = (void *)event.value.v;
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c6dc:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 801c6e0:	b004      	add	sp, #16
 801c6e2:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 801c6e4:	9b02      	ldr	r3, [sp, #8]
 801c6e6:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 801c6e8:	2000      	movs	r0, #0
 801c6ea:	e7f9      	b.n	801c6e0 <sys_arch_mbox_tryfetch+0x1a>

0801c6ec <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
  if (*mbox == SYS_MBOX_NULL) 
 801c6ec:	6803      	ldr	r3, [r0, #0]
 801c6ee:	b10b      	cbz	r3, 801c6f4 <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 801c6f0:	2001      	movs	r0, #1
}                                             
 801c6f2:	4770      	bx	lr
    return 0;
 801c6f4:	2000      	movs	r0, #0
 801c6f6:	4770      	bx	lr

0801c6f8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
  *mbox = SYS_MBOX_NULL;                      
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	6003      	str	r3, [r0, #0]
 801c6fc:	4770      	bx	lr

0801c6fe <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c6fe:	b530      	push	{r4, r5, lr}
 801c700:	b083      	sub	sp, #12
 801c702:	4604      	mov	r4, r0
 801c704:	460d      	mov	r5, r1
  osSemaphoreDef(SEM);
 801c706:	2300      	movs	r3, #0
 801c708:	9300      	str	r3, [sp, #0]
 801c70a:	9301      	str	r3, [sp, #4]

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c70c:	2101      	movs	r1, #1
 801c70e:	4668      	mov	r0, sp
 801c710:	f7f6 faf8 	bl	8012d04 <osSemaphoreCreate>
 801c714:	6020      	str	r0, [r4, #0]
	
  if(*sem == NULL)
 801c716:	b140      	cbz	r0, 801c72a <sys_sem_new+0x2c>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 801c718:	b115      	cbz	r5, 801c720 <sys_sem_new+0x22>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 801c71a:	2000      	movs	r0, #0
}
 801c71c:	b003      	add	sp, #12
 801c71e:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem,0);
 801c720:	2100      	movs	r1, #0
 801c722:	f7f6 fb15 	bl	8012d50 <osSemaphoreWait>
	return ERR_OK;
 801c726:	2000      	movs	r0, #0
 801c728:	e7f8      	b.n	801c71c <sys_sem_new+0x1e>
		return ERR_MEM;
 801c72a:	f04f 30ff 	mov.w	r0, #4294967295
 801c72e:	e7f5      	b.n	801c71c <sys_sem_new+0x1e>

0801c730 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c730:	b570      	push	{r4, r5, r6, lr}
 801c732:	4604      	mov	r4, r0
 801c734:	460e      	mov	r6, r1
  uint32_t starttime = osKernelSysTick();
 801c736:	f7f6 fa2a 	bl	8012b8e <osKernelSysTick>
 801c73a:	4605      	mov	r5, r0
  
  if(timeout != 0)
 801c73c:	b956      	cbnz	r6, 801c754 <sys_arch_sem_wait+0x24>
      return SYS_ARCH_TIMEOUT;
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c73e:	f04f 31ff 	mov.w	r1, #4294967295
 801c742:	6820      	ldr	r0, [r4, #0]
 801c744:	f7f6 fb04 	bl	8012d50 <osSemaphoreWait>
 801c748:	2800      	cmp	r0, #0
 801c74a:	d1f8      	bne.n	801c73e <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 801c74c:	f7f6 fa1f 	bl	8012b8e <osKernelSysTick>
 801c750:	1b40      	subs	r0, r0, r5
 801c752:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c754:	4631      	mov	r1, r6
 801c756:	6820      	ldr	r0, [r4, #0]
 801c758:	f7f6 fafa 	bl	8012d50 <osSemaphoreWait>
 801c75c:	b110      	cbz	r0, 801c764 <sys_arch_sem_wait+0x34>
      return SYS_ARCH_TIMEOUT;
 801c75e:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 801c762:	bd70      	pop	{r4, r5, r6, pc}
      return (osKernelSysTick() - starttime);
 801c764:	f7f6 fa13 	bl	8012b8e <osKernelSysTick>
 801c768:	1b40      	subs	r0, r0, r5
 801c76a:	bd70      	pop	{r4, r5, r6, pc}

0801c76c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c76c:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 801c76e:	6800      	ldr	r0, [r0, #0]
 801c770:	f7f6 fb28 	bl	8012dc4 <osSemaphoreRelease>
 801c774:	bd08      	pop	{r3, pc}

0801c776 <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c776:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 801c778:	6800      	ldr	r0, [r0, #0]
 801c77a:	f7f6 fb51 	bl	8012e20 <osSemaphoreDelete>
 801c77e:	bd08      	pop	{r3, pc}

0801c780 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 801c780:	6803      	ldr	r3, [r0, #0]
 801c782:	b10b      	cbz	r3, 801c788 <sys_sem_valid+0x8>
    return 0;
  else
    return 1;                                       
 801c784:	2001      	movs	r0, #1
}
 801c786:	4770      	bx	lr
    return 0;
 801c788:	2000      	movs	r0, #0
 801c78a:	4770      	bx	lr

0801c78c <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 801c78c:	2300      	movs	r3, #0
 801c78e:	6003      	str	r3, [r0, #0]
 801c790:	4770      	bx	lr
	...

0801c794 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801c794:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c796:	4803      	ldr	r0, [pc, #12]	; (801c7a4 <sys_init+0x10>)
 801c798:	f7f6 fa41 	bl	8012c1e <osMutexCreate>
 801c79c:	4b02      	ldr	r3, [pc, #8]	; (801c7a8 <sys_init+0x14>)
 801c79e:	6018      	str	r0, [r3, #0]
 801c7a0:	bd08      	pop	{r3, pc}
 801c7a2:	bf00      	nop
 801c7a4:	080248e8 	.word	0x080248e8
 801c7a8:	2000ecd4 	.word	0x2000ecd4

0801c7ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c7ac:	b510      	push	{r4, lr}
 801c7ae:	b082      	sub	sp, #8
 801c7b0:	4604      	mov	r4, r0
  
  osMutexDef(MUTEX);
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	9300      	str	r3, [sp, #0]
 801c7b6:	9301      	str	r3, [sp, #4]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c7b8:	4668      	mov	r0, sp
 801c7ba:	f7f6 fa30 	bl	8012c1e <osMutexCreate>
 801c7be:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801c7c0:	b110      	cbz	r0, 801c7c8 <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c7c2:	2000      	movs	r0, #0
}
 801c7c4:	b002      	add	sp, #8
 801c7c6:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 801c7c8:	f04f 30ff 	mov.w	r0, #4294967295
 801c7cc:	e7fa      	b.n	801c7c4 <sys_mutex_new+0x18>

0801c7ce <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c7ce:	b508      	push	{r3, lr}
  osMutexWait (*mutex, osWaitForever);
 801c7d0:	f04f 31ff 	mov.w	r1, #4294967295
 801c7d4:	6800      	ldr	r0, [r0, #0]
 801c7d6:	f7f6 fa2d 	bl	8012c34 <osMutexWait>
 801c7da:	bd08      	pop	{r3, pc}

0801c7dc <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c7dc:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 801c7de:	6800      	ldr	r0, [r0, #0]
 801c7e0:	f7f6 fa62 	bl	8012ca8 <osMutexRelease>
 801c7e4:	bd08      	pop	{r3, pc}

0801c7e6 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c7e6:	b510      	push	{r4, lr}
 801c7e8:	b088      	sub	sp, #32
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c7ea:	2400      	movs	r4, #0
 801c7ec:	9403      	str	r4, [sp, #12]
 801c7ee:	9404      	str	r4, [sp, #16]
 801c7f0:	9406      	str	r4, [sp, #24]
 801c7f2:	9407      	str	r4, [sp, #28]
 801c7f4:	9001      	str	r0, [sp, #4]
 801c7f6:	9102      	str	r1, [sp, #8]
 801c7f8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c7fc:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c800:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 801c802:	4611      	mov	r1, r2
 801c804:	a801      	add	r0, sp, #4
 801c806:	f7f6 f9cc 	bl	8012ba2 <osThreadCreate>
}
 801c80a:	b008      	add	sp, #32
 801c80c:	bd10      	pop	{r4, pc}
	...

0801c810 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c810:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c812:	f04f 31ff 	mov.w	r1, #4294967295
 801c816:	4b03      	ldr	r3, [pc, #12]	; (801c824 <sys_arch_protect+0x14>)
 801c818:	6818      	ldr	r0, [r3, #0]
 801c81a:	f7f6 fa0b 	bl	8012c34 <osMutexWait>
  return (sys_prot_t)1;
}
 801c81e:	2001      	movs	r0, #1
 801c820:	bd08      	pop	{r3, pc}
 801c822:	bf00      	nop
 801c824:	2000ecd4 	.word	0x2000ecd4

0801c828 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c828:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c82a:	4b02      	ldr	r3, [pc, #8]	; (801c834 <sys_arch_unprotect+0xc>)
 801c82c:	6818      	ldr	r0, [r3, #0]
 801c82e:	f7f6 fa3b 	bl	8012ca8 <osMutexRelease>
 801c832:	bd08      	pop	{r3, pc}
 801c834:	2000ecd4 	.word	0x2000ecd4

0801c838 <is_exp_of_2>:

/*Checks if argument is power of 2 --------------------------------------- */

static uint8_t is_exp_of_2(uint32_t n)
{
    return ( n & (n - 1) ) == 0;
 801c838:	1e43      	subs	r3, r0, #1
 801c83a:	4218      	tst	r0, r3
}
 801c83c:	bf0c      	ite	eq
 801c83e:	2001      	moveq	r0, #1
 801c840:	2000      	movne	r0, #0
 801c842:	4770      	bx	lr

0801c844 <CB_Init>:

/* Circular buffer initiation function ----------------------------------- */

error_t CB_Init(circbuff *cb, uint32_t buf_size) {
 801c844:	b538      	push	{r3, r4, r5, lr}
 801c846:	4605      	mov	r5, r0
 801c848:	460c      	mov	r4, r1
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 801c84a:	4608      	mov	r0, r1
 801c84c:	f7ff fff4 	bl	801c838 <is_exp_of_2>
 801c850:	b908      	cbnz	r0, 801c856 <CB_Init+0x12>
 801c852:	2004      	movs	r0, #4
 801c854:	bd38      	pop	{r3, r4, r5, pc}
						/* return error if buffer size is not power of 2 */
	cb->size = buf_size;
 801c856:	606c      	str	r4, [r5, #4]
	cb->read_pos = 0;
 801c858:	2300      	movs	r3, #0
 801c85a:	60ab      	str	r3, [r5, #8]
	cb->write_pos = 0;
 801c85c:	60eb      	str	r3, [r5, #12]
	cb->buf = (uint8_t*) pvPortMalloc(buf_size * sizeof(uint8_t));
 801c85e:	4620      	mov	r0, r4
 801c860:	f7f6 fdde 	bl	8013420 <pvPortMalloc>
 801c864:	6028      	str	r0, [r5, #0]
	if (cb->buf == NULL) {
 801c866:	b108      	cbz	r0, 801c86c <CB_Init+0x28>
		return MEM_ERR;
	}
	return NO_ERR;
 801c868:	2000      	movs	r0, #0
}
 801c86a:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ERR;
 801c86c:	2001      	movs	r0, #1
 801c86e:	bd38      	pop	{r3, r4, r5, pc}

0801c870 <CB_Data_Length>:

/* Returns length of data in buffer ---------------------------------------*/

uint32_t CB_Data_Length(circbuff *cb) {
	return ((cb->write_pos - cb->read_pos) & (cb->size - 1));
 801c870:	68c3      	ldr	r3, [r0, #12]
 801c872:	6882      	ldr	r2, [r0, #8]
 801c874:	1a9a      	subs	r2, r3, r2
 801c876:	6843      	ldr	r3, [r0, #4]
 801c878:	3b01      	subs	r3, #1
}
 801c87a:	ea02 0003 	and.w	r0, r2, r3
 801c87e:	4770      	bx	lr

0801c880 <CB_Write>:

/* Write new element to buffer --------------------------------------------*/

error_t CB_Write(circbuff *cb, uint8_t item){
 801c880:	b538      	push	{r3, r4, r5, lr}
 801c882:	4604      	mov	r4, r0
 801c884:	460d      	mov	r5, r1
	if (CB_Data_Length(cb) >= (cb->size - 1)){
 801c886:	f7ff fff3 	bl	801c870 <CB_Data_Length>
 801c88a:	6863      	ldr	r3, [r4, #4]
 801c88c:	3b01      	subs	r3, #1
 801c88e:	4298      	cmp	r0, r3
 801c890:	d301      	bcc.n	801c896 <CB_Write+0x16>
		return FULL_ERR;
 801c892:	2003      	movs	r0, #3
	}
	cb->buf[cb->write_pos] = item;
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
	return NO_ERR;
}
 801c894:	bd38      	pop	{r3, r4, r5, pc}
	cb->buf[cb->write_pos] = item;
 801c896:	6822      	ldr	r2, [r4, #0]
 801c898:	68e3      	ldr	r3, [r4, #12]
 801c89a:	54d5      	strb	r5, [r2, r3]
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
 801c89c:	68e3      	ldr	r3, [r4, #12]
 801c89e:	3301      	adds	r3, #1
 801c8a0:	6862      	ldr	r2, [r4, #4]
 801c8a2:	3a01      	subs	r2, #1
 801c8a4:	4013      	ands	r3, r2
 801c8a6:	60e3      	str	r3, [r4, #12]
	return NO_ERR;
 801c8a8:	2000      	movs	r0, #0
 801c8aa:	bd38      	pop	{r3, r4, r5, pc}

0801c8ac <CB_Read>:

/* Read element from buffer -----------------------------------------------*/

error_t CB_Read(circbuff *cb, uint8_t * item){
 801c8ac:	b538      	push	{r3, r4, r5, lr}
 801c8ae:	4604      	mov	r4, r0
 801c8b0:	460d      	mov	r5, r1
	if (CB_Data_Length(cb) == 0){
 801c8b2:	f7ff ffdd 	bl	801c870 <CB_Data_Length>
 801c8b6:	b908      	cbnz	r0, 801c8bc <CB_Read+0x10>
		return EMPTY_ERR;
 801c8b8:	2002      	movs	r0, #2
	}
	*item = cb->buf[cb->read_pos];
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
	return NO_ERR;
}
 801c8ba:	bd38      	pop	{r3, r4, r5, pc}
	*item = cb->buf[cb->read_pos];
 801c8bc:	6822      	ldr	r2, [r4, #0]
 801c8be:	68a3      	ldr	r3, [r4, #8]
 801c8c0:	5cd3      	ldrb	r3, [r2, r3]
 801c8c2:	702b      	strb	r3, [r5, #0]
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
 801c8c4:	68a3      	ldr	r3, [r4, #8]
 801c8c6:	3301      	adds	r3, #1
 801c8c8:	6862      	ldr	r2, [r4, #4]
 801c8ca:	3a01      	subs	r2, #1
 801c8cc:	4013      	ands	r3, r2
 801c8ce:	60a3      	str	r3, [r4, #8]
	return NO_ERR;
 801c8d0:	2000      	movs	r0, #0
 801c8d2:	bd38      	pop	{r3, r4, r5, pc}

0801c8d4 <FlashInit>:
SN_LS_ADDR,
MAC_02_01_ADDR,
MAC_04_03_ADDR,
MAC_06_05_ADDR };

void FlashInit() {
 801c8d4:	b510      	push	{r4, lr}
 801c8d6:	b082      	sub	sp, #8

	uint16_t mem_key;
	EE_ReadVariable(MEM_KEY_ADDR, &mem_key); /* Memory key reading */
 801c8d8:	f10d 0106 	add.w	r1, sp, #6
 801c8dc:	2000      	movs	r0, #0
 801c8de:	f000 f9a3 	bl	801cc28 <EE_ReadVariable>
	if (mem_key != MEMORY_KEY) { /* First launching of device */
 801c8e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801c8e6:	f64d 63ad 	movw	r3, #57005	; 0xdead
 801c8ea:	429a      	cmp	r2, r3
 801c8ec:	d048      	beq.n	801c980 <FlashInit+0xac>
		/* Default FLASH initialization --------------------- */
		EE_WriteVariable(MEM_KEY_ADDR, MEMORY_KEY);
 801c8ee:	4619      	mov	r1, r3
 801c8f0:	2000      	movs	r0, #0
 801c8f2:	f000 fb55 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 801c8f6:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 801c8fa:	2001      	movs	r0, #1
 801c8fc:	f000 fb50 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 801c900:	f64f 5104 	movw	r1, #64772	; 0xfd04
 801c904:	2002      	movs	r0, #2
 801c906:	f000 fb4b 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(BR_MS_ADDR, DEFAULT_BR_MS);
 801c90a:	2102      	movs	r1, #2
 801c90c:	2003      	movs	r0, #3
 801c90e:	f000 fb47 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(BR_LS_ADDR, DEFAULT_BR_LS);
 801c912:	f64d 416c 	movw	r1, #56428	; 0xdc6c
 801c916:	2004      	movs	r0, #4
 801c918:	f000 fb42 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(MPI_ADRR_ADDR, DEFAULT_MPI_ADDR);
 801c91c:	2101      	movs	r1, #1
 801c91e:	2005      	movs	r0, #5
 801c920:	f000 fb3e 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(PORT_ADRR, DEFAULT_PORT);
 801c924:	2166      	movs	r1, #102	; 0x66
 801c926:	2006      	movs	r0, #6
 801c928:	f000 fb3a 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(MASK_02_01_ADDR, DEFAULT_MASK_02_01);
 801c92c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c930:	2007      	movs	r0, #7
 801c932:	f000 fb35 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(MASK_04_03_ADDR, DEFAULT_MASK_04_03);
 801c936:	21ff      	movs	r1, #255	; 0xff
 801c938:	2008      	movs	r0, #8
 801c93a:	f000 fb31 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(GATE_02_01_ADDR, DEFAULT_GATE_02_01);
 801c93e:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 801c942:	2009      	movs	r0, #9
 801c944:	f000 fb2c 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(GATE_04_03_ADDR, DEFAULT_GATE_04_03);
 801c948:	f44f 7182 	mov.w	r1, #260	; 0x104
 801c94c:	200a      	movs	r0, #10
 801c94e:	f000 fb27 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(SN_MS_ADDR, DEFAULT_SN_MS);
 801c952:	2100      	movs	r1, #0
 801c954:	200b      	movs	r0, #11
 801c956:	f000 fb23 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(SN_LS_ADDR, DEFAULT_SN_LS);
 801c95a:	2101      	movs	r1, #1
 801c95c:	200c      	movs	r0, #12
 801c95e:	f000 fb1f 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(MAC_02_01_ADDR, DEFAULT_MAC_02_01);
 801c962:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c966:	2010      	movs	r0, #16
 801c968:	f000 fb1a 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(MAC_04_03_ADDR, DEFAULT_MAC_04_03);
 801c96c:	f244 21a2 	movw	r1, #17058	; 0x42a2
 801c970:	2011      	movs	r0, #17
 801c972:	f000 fb15 	bl	801cfa0 <EE_WriteVariable>
		EE_WriteVariable(MAC_06_05_ADDR, DEFAULT_MAC_06_05);
 801c976:	f24e 4150 	movw	r1, #58448	; 0xe450
 801c97a:	2012      	movs	r0, #18
 801c97c:	f000 fb10 	bl	801cfa0 <EE_WriteVariable>
		uint16_t ui16[2];
		uint8_t ui8[4];
	} tmp_u;

	/*baud rate */
	EE_ReadVariable(BR_MS_ADDR, &tmp_u.ui16[1]);
 801c980:	f10d 0102 	add.w	r1, sp, #2
 801c984:	2003      	movs	r0, #3
 801c986:	f000 f94f 	bl	801cc28 <EE_ReadVariable>
	EE_ReadVariable(BR_LS_ADDR, &tmp_u.ui16[0]);
 801c98a:	4669      	mov	r1, sp
 801c98c:	2004      	movs	r0, #4
 801c98e:	f000 f94b 	bl	801cc28 <EE_ReadVariable>
	huart5.Init.BaudRate = tmp_u.ui32;
 801c992:	9b00      	ldr	r3, [sp, #0]
 801c994:	4a40      	ldr	r2, [pc, #256]	; (801ca98 <FlashInit+0x1c4>)
 801c996:	6053      	str	r3, [r2, #4]
	hflash.speed = huart5.Init.BaudRate;
 801c998:	4c40      	ldr	r4, [pc, #256]	; (801ca9c <FlashInit+0x1c8>)
 801c99a:	6023      	str	r3, [r4, #0]
	/* IP-address */
	EE_ReadVariable(IP_02_01_ADDR, &tmp_u.ui16[0]);
 801c99c:	4669      	mov	r1, sp
 801c99e:	2001      	movs	r0, #1
 801c9a0:	f000 f942 	bl	801cc28 <EE_ReadVariable>
	EE_ReadVariable(IP_04_03_ADDR, &tmp_u.ui16[1]);
 801c9a4:	f10d 0102 	add.w	r1, sp, #2
 801c9a8:	2002      	movs	r0, #2
 801c9aa:	f000 f93d 	bl	801cc28 <EE_ReadVariable>
	hflash.IP_addr[0] = tmp_u.ui8[0];
 801c9ae:	f89d 3000 	ldrb.w	r3, [sp]
 801c9b2:	71a3      	strb	r3, [r4, #6]
	hflash.IP_addr[1] = tmp_u.ui8[1];
 801c9b4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801c9b8:	71e3      	strb	r3, [r4, #7]
	hflash.IP_addr[2] = tmp_u.ui8[2];
 801c9ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801c9be:	7223      	strb	r3, [r4, #8]
	hflash.IP_addr[3] = tmp_u.ui8[3];
 801c9c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801c9c4:	7263      	strb	r3, [r4, #9]
	/* MPI/Profibus address */
	EE_ReadVariable(MPI_ADRR_ADDR, &hflash.own_addr);
 801c9c6:	1d21      	adds	r1, r4, #4
 801c9c8:	2005      	movs	r0, #5
 801c9ca:	f000 f92d 	bl	801cc28 <EE_ReadVariable>
	/* Subnet mask */
	EE_ReadVariable(MASK_02_01_ADDR, &tmp_u.ui16[0]);
 801c9ce:	4669      	mov	r1, sp
 801c9d0:	2007      	movs	r0, #7
 801c9d2:	f000 f929 	bl	801cc28 <EE_ReadVariable>
	EE_ReadVariable(MASK_04_03_ADDR, &tmp_u.ui16[1]);
 801c9d6:	f10d 0102 	add.w	r1, sp, #2
 801c9da:	2008      	movs	r0, #8
 801c9dc:	f000 f924 	bl	801cc28 <EE_ReadVariable>
	hflash.mask[0] = tmp_u.ui8[0];
 801c9e0:	f89d 3000 	ldrb.w	r3, [sp]
 801c9e4:	72a3      	strb	r3, [r4, #10]
	hflash.mask[1] = tmp_u.ui8[1];
 801c9e6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801c9ea:	72e3      	strb	r3, [r4, #11]
	hflash.mask[2] = tmp_u.ui8[2];
 801c9ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801c9f0:	7323      	strb	r3, [r4, #12]
	hflash.mask[3] = tmp_u.ui8[3];
 801c9f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801c9f6:	7363      	strb	r3, [r4, #13]
	/* Gateway */
	EE_ReadVariable(GATE_02_01_ADDR, &tmp_u.ui16[0]);
 801c9f8:	4669      	mov	r1, sp
 801c9fa:	2009      	movs	r0, #9
 801c9fc:	f000 f914 	bl	801cc28 <EE_ReadVariable>
	EE_ReadVariable(GATE_04_03_ADDR, &tmp_u.ui16[1]);
 801ca00:	f10d 0102 	add.w	r1, sp, #2
 801ca04:	200a      	movs	r0, #10
 801ca06:	f000 f90f 	bl	801cc28 <EE_ReadVariable>
	hflash.gate[0] = tmp_u.ui8[0];
 801ca0a:	f89d 3000 	ldrb.w	r3, [sp]
 801ca0e:	73a3      	strb	r3, [r4, #14]
	hflash.gate[1] = tmp_u.ui8[1];
 801ca10:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801ca14:	73e3      	strb	r3, [r4, #15]
	hflash.gate[2] = tmp_u.ui8[2];
 801ca16:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801ca1a:	7423      	strb	r3, [r4, #16]
	hflash.gate[3] = tmp_u.ui8[3];
 801ca1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ca20:	7463      	strb	r3, [r4, #17]
	/* Port number */
	EE_ReadVariable(PORT_ADRR, &hflash.port);
 801ca22:	f104 0112 	add.w	r1, r4, #18
 801ca26:	2006      	movs	r0, #6
 801ca28:	f000 f8fe 	bl	801cc28 <EE_ReadVariable>
	/* Serial number */
	EE_ReadVariable(SN_MS_ADDR, &tmp_u.ui16[1]);
 801ca2c:	f10d 0102 	add.w	r1, sp, #2
 801ca30:	200b      	movs	r0, #11
 801ca32:	f000 f8f9 	bl	801cc28 <EE_ReadVariable>
	EE_ReadVariable(SN_LS_ADDR, &tmp_u.ui16[0]);
 801ca36:	4669      	mov	r1, sp
 801ca38:	200c      	movs	r0, #12
 801ca3a:	f000 f8f5 	bl	801cc28 <EE_ReadVariable>
	hflash.serial_num = tmp_u.ui32;
 801ca3e:	9b00      	ldr	r3, [sp, #0]
 801ca40:	6163      	str	r3, [r4, #20]
	/* MAC address */
	EE_ReadVariable(MAC_02_01_ADDR, &tmp_u.ui16[0]);
 801ca42:	4669      	mov	r1, sp
 801ca44:	2010      	movs	r0, #16
 801ca46:	f000 f8ef 	bl	801cc28 <EE_ReadVariable>
	EE_ReadVariable(MAC_04_03_ADDR, &tmp_u.ui16[1]);
 801ca4a:	f10d 0102 	add.w	r1, sp, #2
 801ca4e:	2011      	movs	r0, #17
 801ca50:	f000 f8ea 	bl	801cc28 <EE_ReadVariable>
	hflash.mac_addr[0] = tmp_u.ui8[0];
 801ca54:	f89d 3000 	ldrb.w	r3, [sp]
 801ca58:	77a3      	strb	r3, [r4, #30]
	hflash.mac_addr[1] = tmp_u.ui8[1];
 801ca5a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801ca5e:	77e3      	strb	r3, [r4, #31]
	hflash.mac_addr[2] = tmp_u.ui8[2];
 801ca60:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801ca64:	f884 3020 	strb.w	r3, [r4, #32]
	hflash.mac_addr[3] = tmp_u.ui8[3];
 801ca68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801ca6c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	EE_ReadVariable(MAC_06_05_ADDR, &tmp_u.ui16[0]);
 801ca70:	4669      	mov	r1, sp
 801ca72:	2012      	movs	r0, #18
 801ca74:	f000 f8d8 	bl	801cc28 <EE_ReadVariable>
	hflash.mac_addr[4] = tmp_u.ui8[0];
 801ca78:	f89d 3000 	ldrb.w	r3, [sp]
 801ca7c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	hflash.mac_addr[5] = tmp_u.ui8[1];
 801ca80:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801ca84:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

	hflash.ver[0] = VER1;
 801ca88:	2300      	movs	r3, #0
 801ca8a:	8323      	strh	r3, [r4, #24]
	hflash.ver[1] = VER2;
 801ca8c:	2203      	movs	r2, #3
 801ca8e:	8362      	strh	r2, [r4, #26]
	hflash.ver[2] = VER3;
 801ca90:	83a3      	strh	r3, [r4, #28]
	/* ------------------------------------------------------- */
}
 801ca92:	b002      	add	sp, #8
 801ca94:	bd10      	pop	{r4, pc}
 801ca96:	bf00      	nop
 801ca98:	20011ff4 	.word	0x20011ff4
 801ca9c:	2000ecd8 	.word	0x2000ecd8

0801caa0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 801caa0:	b510      	push	{r4, lr}
 801caa2:	b082      	sub	sp, #8
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801caa4:	2400      	movs	r4, #0
 801caa6:	9400      	str	r4, [sp, #0]
 801caa8:	4b12      	ldr	r3, [pc, #72]	; (801caf4 <MX_DMA_Init+0x54>)
 801caaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801caac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801cab0:	631a      	str	r2, [r3, #48]	; 0x30
 801cab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801cab4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 801cab8:	9200      	str	r2, [sp, #0]
 801caba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 801cabc:	9401      	str	r4, [sp, #4]
 801cabe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801cac0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801cac4:	631a      	str	r2, [r3, #48]	; 0x30
 801cac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801cacc:	9301      	str	r3, [sp, #4]
 801cace:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 801cad0:	4622      	mov	r2, r4
 801cad2:	2105      	movs	r1, #5
 801cad4:	202f      	movs	r0, #47	; 0x2f
 801cad6:	f7f3 fc9f 	bl	8010418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 801cada:	202f      	movs	r0, #47	; 0x2f
 801cadc:	f7f3 fcce 	bl	801047c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 801cae0:	4622      	mov	r2, r4
 801cae2:	2105      	movs	r1, #5
 801cae4:	2046      	movs	r0, #70	; 0x46
 801cae6:	f7f3 fc97 	bl	8010418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 801caea:	2046      	movs	r0, #70	; 0x46
 801caec:	f7f3 fcc6 	bl	801047c <HAL_NVIC_EnableIRQ>

}
 801caf0:	b002      	add	sp, #8
 801caf2:	bd10      	pop	{r4, pc}
 801caf4:	40023800 	.word	0x40023800

0801caf8 <EE_VerifyPageFullyErased>:
{
  uint32_t ReadStatus = 1;
  uint16_t AddressValue = 0x5555;
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 801caf8:	4b07      	ldr	r3, [pc, #28]	; (801cb18 <EE_VerifyPageFullyErased+0x20>)
 801cafa:	4298      	cmp	r0, r3
 801cafc:	d807      	bhi.n	801cb0e <EE_VerifyPageFullyErased+0x16>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 801cafe:	8803      	ldrh	r3, [r0, #0]
 801cb00:	b29b      	uxth	r3, r3

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 801cb02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cb06:	4293      	cmp	r3, r2
 801cb08:	d103      	bne.n	801cb12 <EE_VerifyPageFullyErased+0x1a>
      ReadStatus = 0;

      break;
    }
    /* Next address location */
    Address = Address + 4;
 801cb0a:	3004      	adds	r0, #4
 801cb0c:	e7f4      	b.n	801caf8 <EE_VerifyPageFullyErased>
  uint32_t ReadStatus = 1;
 801cb0e:	2001      	movs	r0, #1
 801cb10:	4770      	bx	lr
      ReadStatus = 0;
 801cb12:	2000      	movs	r0, #0
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
}
 801cb14:	4770      	bx	lr
 801cb16:	bf00      	nop
 801cb18:	0800bfff 	.word	0x0800bfff

0801cb1c <EE_FindValidPage>:
static uint16_t EE_FindValidPage(uint8_t Operation)
{
  uint16_t PageStatus0 = 6, PageStatus1 = 6;

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801cb1c:	4b11      	ldr	r3, [pc, #68]	; (801cb64 <EE_FindValidPage+0x48>)
 801cb1e:	881b      	ldrh	r3, [r3, #0]
 801cb20:	b29b      	uxth	r3, r3

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801cb22:	4a11      	ldr	r2, [pc, #68]	; (801cb68 <EE_FindValidPage+0x4c>)
 801cb24:	8812      	ldrh	r2, [r2, #0]
 801cb26:	b292      	uxth	r2, r2

  /* Write or read operation */
  switch (Operation)
 801cb28:	b198      	cbz	r0, 801cb52 <EE_FindValidPage+0x36>
 801cb2a:	2801      	cmp	r0, #1
 801cb2c:	d117      	bne.n	801cb5e <EE_FindValidPage+0x42>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 801cb2e:	b93a      	cbnz	r2, 801cb40 <EE_FindValidPage+0x24>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 801cb30:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 801cb34:	428b      	cmp	r3, r1
 801cb36:	d001      	beq.n	801cb3c <EE_FindValidPage+0x20>
        {
          return PAGE0;         /* Page0 valid */
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 801cb38:	2301      	movs	r3, #1
 801cb3a:	e011      	b.n	801cb60 <EE_FindValidPage+0x44>
          return PAGE0;         /* Page0 valid */
 801cb3c:	4613      	mov	r3, r2
 801cb3e:	e00f      	b.n	801cb60 <EE_FindValidPage+0x44>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 801cb40:	b10b      	cbz	r3, 801cb46 <EE_FindValidPage+0x2a>
          return PAGE0;         /* Page0 valid */
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 801cb42:	23ab      	movs	r3, #171	; 0xab
 801cb44:	e00c      	b.n	801cb60 <EE_FindValidPage+0x44>
        if (PageStatus1 == RECEIVE_DATA)
 801cb46:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 801cb4a:	428a      	cmp	r2, r1
 801cb4c:	d108      	bne.n	801cb60 <EE_FindValidPage+0x44>
          return PAGE1;         /* Page1 valid */
 801cb4e:	2301      	movs	r3, #1
 801cb50:	e006      	b.n	801cb60 <EE_FindValidPage+0x44>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 801cb52:	b12b      	cbz	r3, 801cb60 <EE_FindValidPage+0x44>
      {
        return PAGE0;           /* Page0 valid */
      }
      else if (PageStatus1 == VALID_PAGE)
 801cb54:	b10a      	cbz	r2, 801cb5a <EE_FindValidPage+0x3e>
      {
        return PAGE1;           /* Page1 valid */
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 801cb56:	23ab      	movs	r3, #171	; 0xab
 801cb58:	e002      	b.n	801cb60 <EE_FindValidPage+0x44>
        return PAGE1;           /* Page1 valid */
 801cb5a:	2301      	movs	r3, #1
 801cb5c:	e000      	b.n	801cb60 <EE_FindValidPage+0x44>
      }

    default:
      return PAGE0;             /* Page0 valid */
 801cb5e:	2300      	movs	r3, #0
  }
}
 801cb60:	4618      	mov	r0, r3
 801cb62:	4770      	bx	lr
 801cb64:	08008000 	.word	0x08008000
 801cb68:	0800c000 	.word	0x0800c000

0801cb6c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 801cb6c:	b570      	push	{r4, r5, r6, lr}
 801cb6e:	4605      	mov	r5, r0
 801cb70:	460e      	mov	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGE0;
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 801cb72:	2001      	movs	r0, #1
 801cb74:	f7ff ffd2 	bl	801cb1c <EE_FindValidPage>
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 801cb78:	28ab      	cmp	r0, #171	; 0xab
 801cb7a:	d021      	beq.n	801cbc0 <EE_VerifyPageFullWriteVariable+0x54>
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801cb7c:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
 801cb80:	3402      	adds	r4, #2
 801cb82:	03a4      	lsls	r4, r4, #14

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 801cb84:	1c43      	adds	r3, r0, #1
 801cb86:	480f      	ldr	r0, [pc, #60]	; (801cbc4 <EE_VerifyPageFullWriteVariable+0x58>)
 801cb88:	eb00 3083 	add.w	r0, r0, r3, lsl #14

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 801cb8c:	4284      	cmp	r4, r0
 801cb8e:	d216      	bcs.n	801cbbe <EE_VerifyPageFullWriteVariable+0x52>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 801cb90:	6823      	ldr	r3, [r4, #0]
 801cb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb96:	d001      	beq.n	801cb9c <EE_VerifyPageFullWriteVariable+0x30>
      return FlashStatus;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 801cb98:	3404      	adds	r4, #4
 801cb9a:	e7f7      	b.n	801cb8c <EE_VerifyPageFullWriteVariable+0x20>
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 801cb9c:	b2b2      	uxth	r2, r6
 801cb9e:	2300      	movs	r3, #0
 801cba0:	4621      	mov	r1, r4
 801cba2:	2001      	movs	r0, #1
 801cba4:	f7f4 fc10 	bl	80113c8 <HAL_FLASH_Program>
      if (FlashStatus != HAL_OK)
 801cba8:	b108      	cbz	r0, 801cbae <EE_VerifyPageFullWriteVariable+0x42>
        return FlashStatus;
 801cbaa:	b280      	uxth	r0, r0
 801cbac:	bd70      	pop	{r4, r5, r6, pc}
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 801cbae:	b2aa      	uxth	r2, r5
 801cbb0:	2300      	movs	r3, #0
 801cbb2:	1ca1      	adds	r1, r4, #2
 801cbb4:	2001      	movs	r0, #1
 801cbb6:	f7f4 fc07 	bl	80113c8 <HAL_FLASH_Program>
      return FlashStatus;
 801cbba:	b280      	uxth	r0, r0
 801cbbc:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 801cbbe:	2080      	movs	r0, #128	; 0x80
}
 801cbc0:	bd70      	pop	{r4, r5, r6, pc}
 801cbc2:	bf00      	nop
 801cbc4:	08007fff 	.word	0x08007fff

0801cbc8 <EE_Format>:
{
 801cbc8:	b510      	push	{r4, lr}
 801cbca:	b086      	sub	sp, #24
  uint32_t SectorError = 0;
 801cbcc:	2300      	movs	r3, #0
 801cbce:	9305      	str	r3, [sp, #20]
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 801cbd0:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = PAGE0_ID;
 801cbd2:	2302      	movs	r3, #2
 801cbd4:	9302      	str	r3, [sp, #8]
  pEraseInit.NbSectors = 1;
 801cbd6:	2201      	movs	r2, #1
 801cbd8:	9203      	str	r2, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cbda:	9304      	str	r3, [sp, #16]
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801cbdc:	4810      	ldr	r0, [pc, #64]	; (801cc20 <EE_Format+0x58>)
 801cbde:	f7ff ff8b 	bl	801caf8 <EE_VerifyPageFullyErased>
 801cbe2:	b928      	cbnz	r0, 801cbf0 <EE_Format+0x28>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801cbe4:	a905      	add	r1, sp, #20
 801cbe6:	4668      	mov	r0, sp
 801cbe8:	f7f4 fc9a 	bl	8011520 <HAL_FLASHEx_Erase>
    if (FlashStatus != HAL_OK)
 801cbec:	4604      	mov	r4, r0
 801cbee:	b938      	cbnz	r0, 801cc00 <EE_Format+0x38>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 801cbf0:	2200      	movs	r2, #0
 801cbf2:	2300      	movs	r3, #0
 801cbf4:	490a      	ldr	r1, [pc, #40]	; (801cc20 <EE_Format+0x58>)
 801cbf6:	2001      	movs	r0, #1
 801cbf8:	f7f4 fbe6 	bl	80113c8 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801cbfc:	4604      	mov	r4, r0
 801cbfe:	b110      	cbz	r0, 801cc06 <EE_Format+0x3e>
}
 801cc00:	4620      	mov	r0, r4
 801cc02:	b006      	add	sp, #24
 801cc04:	bd10      	pop	{r4, pc}
  pEraseInit.Sector = PAGE1_ID;
 801cc06:	2303      	movs	r3, #3
 801cc08:	9302      	str	r3, [sp, #8]
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801cc0a:	4806      	ldr	r0, [pc, #24]	; (801cc24 <EE_Format+0x5c>)
 801cc0c:	f7ff ff74 	bl	801caf8 <EE_VerifyPageFullyErased>
 801cc10:	2800      	cmp	r0, #0
 801cc12:	d1f5      	bne.n	801cc00 <EE_Format+0x38>
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 801cc14:	a905      	add	r1, sp, #20
 801cc16:	4668      	mov	r0, sp
 801cc18:	f7f4 fc82 	bl	8011520 <HAL_FLASHEx_Erase>
 801cc1c:	4604      	mov	r4, r0
 801cc1e:	e7ef      	b.n	801cc00 <EE_Format+0x38>
 801cc20:	08008000 	.word	0x08008000
 801cc24:	0800c000 	.word	0x0800c000

0801cc28 <EE_ReadVariable>:
{
 801cc28:	b538      	push	{r3, r4, r5, lr}
 801cc2a:	4604      	mov	r4, r0
 801cc2c:	460d      	mov	r5, r1
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801cc2e:	2000      	movs	r0, #0
 801cc30:	f7ff ff74 	bl	801cb1c <EE_FindValidPage>
  if (ValidPage == NO_VALID_PAGE)
 801cc34:	28ab      	cmp	r0, #171	; 0xab
 801cc36:	d016      	beq.n	801cc66 <EE_ReadVariable+0x3e>
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801cc38:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 801cc3c:	3202      	adds	r2, #2
 801cc3e:	0392      	lsls	r2, r2, #14
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801cc40:	1c43      	adds	r3, r0, #1
 801cc42:	4809      	ldr	r0, [pc, #36]	; (801cc68 <EE_ReadVariable+0x40>)
 801cc44:	eb00 3083 	add.w	r0, r0, r3, lsl #14
  while (Address > (PageStartAddress + 2))
 801cc48:	1c93      	adds	r3, r2, #2
 801cc4a:	4298      	cmp	r0, r3
 801cc4c:	d90a      	bls.n	801cc64 <EE_ReadVariable+0x3c>
    AddressValue = (*(__IO uint16_t*)Address);
 801cc4e:	8803      	ldrh	r3, [r0, #0]
 801cc50:	b29b      	uxth	r3, r3
    if (AddressValue == VirtAddress)
 801cc52:	42a3      	cmp	r3, r4
 801cc54:	d001      	beq.n	801cc5a <EE_ReadVariable+0x32>
      Address = Address - 4;
 801cc56:	3804      	subs	r0, #4
 801cc58:	e7f6      	b.n	801cc48 <EE_ReadVariable+0x20>
      *Data = (*(__IO uint16_t*)(Address - 2));
 801cc5a:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 801cc5e:	802b      	strh	r3, [r5, #0]
      ReadStatus = 0;
 801cc60:	2000      	movs	r0, #0
      break;
 801cc62:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 801cc64:	2001      	movs	r0, #1
}
 801cc66:	bd38      	pop	{r3, r4, r5, pc}
 801cc68:	08007ffe 	.word	0x08007ffe

0801cc6c <EE_Init>:
{
 801cc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc6e:	b087      	sub	sp, #28
  uint32_t SectorError = 0;
 801cc70:	2300      	movs	r3, #0
 801cc72:	9305      	str	r3, [sp, #20]
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801cc74:	4a92      	ldr	r2, [pc, #584]	; (801cec0 <EE_Init+0x254>)
 801cc76:	8816      	ldrh	r6, [r2, #0]
 801cc78:	b2b6      	uxth	r6, r6
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801cc7a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 801cc7e:	8815      	ldrh	r5, [r2, #0]
 801cc80:	b2ad      	uxth	r5, r5
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801cc82:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = PAGE0_ID;
 801cc84:	2302      	movs	r3, #2
 801cc86:	9302      	str	r3, [sp, #8]
  pEraseInit.NbSectors = 1;
 801cc88:	2201      	movs	r2, #1
 801cc8a:	9203      	str	r2, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cc8c:	9304      	str	r3, [sp, #16]
  switch (PageStatus0)
 801cc8e:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 801cc92:	429e      	cmp	r6, r3
 801cc94:	d040      	beq.n	801cd18 <EE_Init+0xac>
 801cc96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc9a:	429e      	cmp	r6, r3
 801cc9c:	d00b      	beq.n	801ccb6 <EE_Init+0x4a>
 801cc9e:	2e00      	cmp	r6, #0
 801cca0:	f000 809f 	beq.w	801cde2 <EE_Init+0x176>
      FlashStatus = EE_Format();
 801cca4:	f7ff ff90 	bl	801cbc8 <EE_Format>
      if (FlashStatus != HAL_OK)
 801cca8:	2800      	cmp	r0, #0
 801ccaa:	f000 8107 	beq.w	801cebc <EE_Init+0x250>
        return FlashStatus;
 801ccae:	b285      	uxth	r5, r0
}
 801ccb0:	4628      	mov	r0, r5
 801ccb2:	b007      	add	sp, #28
 801ccb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 801ccb6:	b155      	cbz	r5, 801ccce <EE_Init+0x62>
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 801ccb8:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 801ccbc:	429d      	cmp	r5, r3
 801ccbe:	d015      	beq.n	801ccec <EE_Init+0x80>
        FlashStatus = EE_Format();
 801ccc0:	f7ff ff82 	bl	801cbc8 <EE_Format>
        if (FlashStatus != HAL_OK)
 801ccc4:	2800      	cmp	r0, #0
 801ccc6:	f000 80f1 	beq.w	801ceac <EE_Init+0x240>
          return FlashStatus;
 801ccca:	b285      	uxth	r5, r0
 801cccc:	e7f0      	b.n	801ccb0 <EE_Init+0x44>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801ccce:	487c      	ldr	r0, [pc, #496]	; (801cec0 <EE_Init+0x254>)
 801ccd0:	f7ff ff12 	bl	801caf8 <EE_VerifyPageFullyErased>
 801ccd4:	4604      	mov	r4, r0
 801ccd6:	2800      	cmp	r0, #0
 801ccd8:	d1ea      	bne.n	801ccb0 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801ccda:	a905      	add	r1, sp, #20
 801ccdc:	4668      	mov	r0, sp
 801ccde:	f7f4 fc1f 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cce2:	2800      	cmp	r0, #0
 801cce4:	f000 80de 	beq.w	801cea4 <EE_Init+0x238>
            return FlashStatus;
 801cce8:	b285      	uxth	r5, r0
 801ccea:	e7e1      	b.n	801ccb0 <EE_Init+0x44>
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801ccec:	4874      	ldr	r0, [pc, #464]	; (801cec0 <EE_Init+0x254>)
 801ccee:	f7ff ff03 	bl	801caf8 <EE_VerifyPageFullyErased>
 801ccf2:	b920      	cbnz	r0, 801ccfe <EE_Init+0x92>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801ccf4:	a905      	add	r1, sp, #20
 801ccf6:	4668      	mov	r0, sp
 801ccf8:	f7f4 fc12 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801ccfc:	b950      	cbnz	r0, 801cd14 <EE_Init+0xa8>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 801ccfe:	2200      	movs	r2, #0
 801cd00:	2300      	movs	r3, #0
 801cd02:	4970      	ldr	r1, [pc, #448]	; (801cec4 <EE_Init+0x258>)
 801cd04:	2001      	movs	r0, #1
 801cd06:	f7f4 fb5f 	bl	80113c8 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cd0a:	2800      	cmp	r0, #0
 801cd0c:	f000 80cc 	beq.w	801cea8 <EE_Init+0x23c>
          return FlashStatus;
 801cd10:	b285      	uxth	r5, r0
 801cd12:	e7cd      	b.n	801ccb0 <EE_Init+0x44>
            return FlashStatus;
 801cd14:	b285      	uxth	r5, r0
 801cd16:	e7cb      	b.n	801ccb0 <EE_Init+0x44>
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 801cd18:	b35d      	cbz	r5, 801cd72 <EE_Init+0x106>
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 801cd1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cd1e:	429d      	cmp	r5, r3
 801cd20:	d048      	beq.n	801cdb4 <EE_Init+0x148>
        FlashStatus = EE_Format();
 801cd22:	f7ff ff51 	bl	801cbc8 <EE_Format>
        if (FlashStatus != HAL_OK)
 801cd26:	2800      	cmp	r0, #0
 801cd28:	f000 80c6 	beq.w	801ceb8 <EE_Init+0x24c>
          return FlashStatus;
 801cd2c:	b285      	uxth	r5, r0
 801cd2e:	e7bf      	b.n	801ccb0 <EE_Init+0x44>
            x = VarIdx;
 801cd30:	b227      	sxth	r7, r4
 801cd32:	e00c      	b.n	801cd4e <EE_Init+0xe2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801cd34:	3401      	adds	r4, #1
 801cd36:	b2a4      	uxth	r4, r4
 801cd38:	2c12      	cmp	r4, #18
 801cd3a:	d81e      	bhi.n	801cd7a <EE_Init+0x10e>
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801cd3c:	4b62      	ldr	r3, [pc, #392]	; (801cec8 <EE_Init+0x25c>)
 801cd3e:	881b      	ldrh	r3, [r3, #0]
 801cd40:	b29b      	uxth	r3, r3
 801cd42:	4626      	mov	r6, r4
 801cd44:	4a61      	ldr	r2, [pc, #388]	; (801cecc <EE_Init+0x260>)
 801cd46:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801cd4a:	4283      	cmp	r3, r0
 801cd4c:	d0f0      	beq.n	801cd30 <EE_Init+0xc4>
          if (VarIdx != x)
 801cd4e:	42be      	cmp	r6, r7
 801cd50:	d0f0      	beq.n	801cd34 <EE_Init+0xc8>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801cd52:	495f      	ldr	r1, [pc, #380]	; (801ced0 <EE_Init+0x264>)
 801cd54:	f7ff ff68 	bl	801cc28 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 801cd58:	2801      	cmp	r0, #1
 801cd5a:	d0eb      	beq.n	801cd34 <EE_Init+0xc8>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801cd5c:	4b5c      	ldr	r3, [pc, #368]	; (801ced0 <EE_Init+0x264>)
 801cd5e:	8819      	ldrh	r1, [r3, #0]
 801cd60:	4b5a      	ldr	r3, [pc, #360]	; (801cecc <EE_Init+0x260>)
 801cd62:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 801cd66:	f7ff ff01 	bl	801cb6c <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 801cd6a:	2800      	cmp	r0, #0
 801cd6c:	d0e2      	beq.n	801cd34 <EE_Init+0xc8>
                return EepromStatus;
 801cd6e:	4605      	mov	r5, r0
 801cd70:	e79e      	b.n	801ccb0 <EE_Init+0x44>
 801cd72:	462c      	mov	r4, r5
 801cd74:	f04f 37ff 	mov.w	r7, #4294967295
 801cd78:	e7de      	b.n	801cd38 <EE_Init+0xcc>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	4950      	ldr	r1, [pc, #320]	; (801cec0 <EE_Init+0x254>)
 801cd80:	2001      	movs	r0, #1
 801cd82:	f7f4 fb21 	bl	80113c8 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cd86:	b108      	cbz	r0, 801cd8c <EE_Init+0x120>
          return FlashStatus;
 801cd88:	b285      	uxth	r5, r0
 801cd8a:	e791      	b.n	801ccb0 <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801cd8c:	2303      	movs	r3, #3
 801cd8e:	9302      	str	r3, [sp, #8]
        pEraseInit.NbSectors = 1;
 801cd90:	2301      	movs	r3, #1
 801cd92:	9303      	str	r3, [sp, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cd94:	2302      	movs	r3, #2
 801cd96:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801cd98:	484a      	ldr	r0, [pc, #296]	; (801cec4 <EE_Init+0x258>)
 801cd9a:	f7ff fead 	bl	801caf8 <EE_VerifyPageFullyErased>
 801cd9e:	4604      	mov	r4, r0
 801cda0:	2800      	cmp	r0, #0
 801cda2:	d185      	bne.n	801ccb0 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cda4:	a905      	add	r1, sp, #20
 801cda6:	4668      	mov	r0, sp
 801cda8:	f7f4 fbba 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cdac:	2800      	cmp	r0, #0
 801cdae:	d07f      	beq.n	801ceb0 <EE_Init+0x244>
            return FlashStatus;
 801cdb0:	b285      	uxth	r5, r0
 801cdb2:	e77d      	b.n	801ccb0 <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801cdb4:	2303      	movs	r3, #3
 801cdb6:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801cdb8:	4842      	ldr	r0, [pc, #264]	; (801cec4 <EE_Init+0x258>)
 801cdba:	f7ff fe9d 	bl	801caf8 <EE_VerifyPageFullyErased>
 801cdbe:	b920      	cbnz	r0, 801cdca <EE_Init+0x15e>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801cdc0:	a905      	add	r1, sp, #20
 801cdc2:	4668      	mov	r0, sp
 801cdc4:	f7f4 fbac 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801cdc8:	b948      	cbnz	r0, 801cdde <EE_Init+0x172>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 801cdca:	2200      	movs	r2, #0
 801cdcc:	2300      	movs	r3, #0
 801cdce:	493c      	ldr	r1, [pc, #240]	; (801cec0 <EE_Init+0x254>)
 801cdd0:	2001      	movs	r0, #1
 801cdd2:	f7f4 faf9 	bl	80113c8 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801cdd6:	2800      	cmp	r0, #0
 801cdd8:	d06c      	beq.n	801ceb4 <EE_Init+0x248>
          return FlashStatus;
 801cdda:	b285      	uxth	r5, r0
 801cddc:	e768      	b.n	801ccb0 <EE_Init+0x44>
            return FlashStatus;
 801cdde:	b285      	uxth	r5, r0
 801cde0:	e766      	b.n	801ccb0 <EE_Init+0x44>
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801cde2:	b13d      	cbz	r5, 801cdf4 <EE_Init+0x188>
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 801cde4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cde8:	429d      	cmp	r5, r3
 801cdea:	d00a      	beq.n	801ce02 <EE_Init+0x196>
 801cdec:	4634      	mov	r4, r6
 801cdee:	f04f 37ff 	mov.w	r7, #4294967295
 801cdf2:	e01c      	b.n	801ce2e <EE_Init+0x1c2>
        FlashStatus = EE_Format();
 801cdf4:	f7ff fee8 	bl	801cbc8 <EE_Format>
        if (FlashStatus != HAL_OK)
 801cdf8:	2800      	cmp	r0, #0
 801cdfa:	f43f af59 	beq.w	801ccb0 <EE_Init+0x44>
          return FlashStatus;
 801cdfe:	b285      	uxth	r5, r0
 801ce00:	e756      	b.n	801ccb0 <EE_Init+0x44>
        pEraseInit.Sector = PAGE1_ID;
 801ce02:	2303      	movs	r3, #3
 801ce04:	9302      	str	r3, [sp, #8]
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 801ce06:	482f      	ldr	r0, [pc, #188]	; (801cec4 <EE_Init+0x258>)
 801ce08:	f7ff fe76 	bl	801caf8 <EE_VerifyPageFullyErased>
 801ce0c:	4605      	mov	r5, r0
 801ce0e:	b108      	cbz	r0, 801ce14 <EE_Init+0x1a8>
  return HAL_OK;
 801ce10:	4635      	mov	r5, r6
 801ce12:	e74d      	b.n	801ccb0 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801ce14:	a905      	add	r1, sp, #20
 801ce16:	4668      	mov	r0, sp
 801ce18:	f7f4 fb82 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801ce1c:	2800      	cmp	r0, #0
 801ce1e:	f43f af47 	beq.w	801ccb0 <EE_Init+0x44>
            return FlashStatus;
 801ce22:	b285      	uxth	r5, r0
 801ce24:	e744      	b.n	801ccb0 <EE_Init+0x44>
            x = VarIdx;
 801ce26:	b227      	sxth	r7, r4
 801ce28:	e00c      	b.n	801ce44 <EE_Init+0x1d8>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801ce2a:	3401      	adds	r4, #1
 801ce2c:	b2a4      	uxth	r4, r4
 801ce2e:	2c12      	cmp	r4, #18
 801ce30:	d81a      	bhi.n	801ce68 <EE_Init+0x1fc>
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801ce32:	4b28      	ldr	r3, [pc, #160]	; (801ced4 <EE_Init+0x268>)
 801ce34:	881b      	ldrh	r3, [r3, #0]
 801ce36:	b29b      	uxth	r3, r3
 801ce38:	4625      	mov	r5, r4
 801ce3a:	4a24      	ldr	r2, [pc, #144]	; (801cecc <EE_Init+0x260>)
 801ce3c:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801ce40:	4283      	cmp	r3, r0
 801ce42:	d0f0      	beq.n	801ce26 <EE_Init+0x1ba>
          if (VarIdx != x)
 801ce44:	42bd      	cmp	r5, r7
 801ce46:	d0f0      	beq.n	801ce2a <EE_Init+0x1be>
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801ce48:	4921      	ldr	r1, [pc, #132]	; (801ced0 <EE_Init+0x264>)
 801ce4a:	f7ff feed 	bl	801cc28 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 801ce4e:	2801      	cmp	r0, #1
 801ce50:	d0eb      	beq.n	801ce2a <EE_Init+0x1be>
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801ce52:	4b1f      	ldr	r3, [pc, #124]	; (801ced0 <EE_Init+0x264>)
 801ce54:	8819      	ldrh	r1, [r3, #0]
 801ce56:	4b1d      	ldr	r3, [pc, #116]	; (801cecc <EE_Init+0x260>)
 801ce58:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 801ce5c:	f7ff fe86 	bl	801cb6c <EE_VerifyPageFullWriteVariable>
              if (EepromStatus != HAL_OK)
 801ce60:	4605      	mov	r5, r0
 801ce62:	2800      	cmp	r0, #0
 801ce64:	d0e1      	beq.n	801ce2a <EE_Init+0x1be>
 801ce66:	e723      	b.n	801ccb0 <EE_Init+0x44>
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 801ce68:	2200      	movs	r2, #0
 801ce6a:	2300      	movs	r3, #0
 801ce6c:	4915      	ldr	r1, [pc, #84]	; (801cec4 <EE_Init+0x258>)
 801ce6e:	2001      	movs	r0, #1
 801ce70:	f7f4 faaa 	bl	80113c8 <HAL_FLASH_Program>
        if (FlashStatus != HAL_OK)
 801ce74:	b108      	cbz	r0, 801ce7a <EE_Init+0x20e>
          return FlashStatus;
 801ce76:	b285      	uxth	r5, r0
 801ce78:	e71a      	b.n	801ccb0 <EE_Init+0x44>
        pEraseInit.Sector = PAGE0_ID;
 801ce7a:	2302      	movs	r3, #2
 801ce7c:	9302      	str	r3, [sp, #8]
        pEraseInit.NbSectors = 1;
 801ce7e:	2201      	movs	r2, #1
 801ce80:	9203      	str	r2, [sp, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801ce82:	9304      	str	r3, [sp, #16]
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 801ce84:	480e      	ldr	r0, [pc, #56]	; (801cec0 <EE_Init+0x254>)
 801ce86:	f7ff fe37 	bl	801caf8 <EE_VerifyPageFullyErased>
 801ce8a:	4605      	mov	r5, r0
 801ce8c:	b108      	cbz	r0, 801ce92 <EE_Init+0x226>
  return HAL_OK;
 801ce8e:	4635      	mov	r5, r6
 801ce90:	e70e      	b.n	801ccb0 <EE_Init+0x44>
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 801ce92:	a905      	add	r1, sp, #20
 801ce94:	4668      	mov	r0, sp
 801ce96:	f7f4 fb43 	bl	8011520 <HAL_FLASHEx_Erase>
          if (FlashStatus != HAL_OK)
 801ce9a:	2800      	cmp	r0, #0
 801ce9c:	f43f af08 	beq.w	801ccb0 <EE_Init+0x44>
            return FlashStatus;
 801cea0:	b285      	uxth	r5, r0
 801cea2:	e705      	b.n	801ccb0 <EE_Init+0x44>
  return HAL_OK;
 801cea4:	4625      	mov	r5, r4
 801cea6:	e703      	b.n	801ccb0 <EE_Init+0x44>
 801cea8:	2500      	movs	r5, #0
 801ceaa:	e701      	b.n	801ccb0 <EE_Init+0x44>
 801ceac:	2500      	movs	r5, #0
 801ceae:	e6ff      	b.n	801ccb0 <EE_Init+0x44>
 801ceb0:	4625      	mov	r5, r4
 801ceb2:	e6fd      	b.n	801ccb0 <EE_Init+0x44>
 801ceb4:	2500      	movs	r5, #0
 801ceb6:	e6fb      	b.n	801ccb0 <EE_Init+0x44>
 801ceb8:	2500      	movs	r5, #0
 801ceba:	e6f9      	b.n	801ccb0 <EE_Init+0x44>
 801cebc:	2500      	movs	r5, #0
 801cebe:	e6f7      	b.n	801ccb0 <EE_Init+0x44>
 801cec0:	08008000 	.word	0x08008000
 801cec4:	0800c000 	.word	0x0800c000
 801cec8:	08008006 	.word	0x08008006
 801cecc:	20000010 	.word	0x20000010
 801ced0:	20009520 	.word	0x20009520
 801ced4:	0800c006 	.word	0x0800c006

0801ced8 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 801ced8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cedc:	b086      	sub	sp, #24
 801cede:	4605      	mov	r5, r0
 801cee0:	460e      	mov	r6, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
  uint16_t OldPageId=0;
  uint16_t ValidPage = PAGE0, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
  uint32_t SectorError = 0;
 801cee2:	2000      	movs	r0, #0
 801cee4:	9005      	str	r0, [sp, #20]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 801cee6:	f7ff fe19 	bl	801cb1c <EE_FindValidPage>

  if (ValidPage == PAGE1)       /* Page1 valid */
 801ceea:	2801      	cmp	r0, #1
 801ceec:	d012      	beq.n	801cf14 <EE_PageTransfer+0x3c>
    NewPageAddress = PAGE0_BASE_ADDRESS;

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 801ceee:	b120      	cbz	r0, 801cefa <EE_PageTransfer+0x22>
    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 801cef0:	24ab      	movs	r4, #171	; 0xab
    return FlashStatus;
  }

  /* Return last operation flash status */
  return FlashStatus;
}
 801cef2:	4620      	mov	r0, r4
 801cef4:	b006      	add	sp, #24
 801cef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    OldPageId = PAGE0_ID;
 801cefa:	f04f 0802 	mov.w	r8, #2
    NewPageAddress = PAGE1_BASE_ADDRESS;
 801cefe:	4f24      	ldr	r7, [pc, #144]	; (801cf90 <EE_PageTransfer+0xb8>)
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 801cf00:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 801cf04:	2300      	movs	r3, #0
 801cf06:	4639      	mov	r1, r7
 801cf08:	2001      	movs	r0, #1
 801cf0a:	f7f4 fa5d 	bl	80113c8 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801cf0e:	b128      	cbz	r0, 801cf1c <EE_PageTransfer+0x44>
    return FlashStatus;
 801cf10:	b284      	uxth	r4, r0
 801cf12:	e7ee      	b.n	801cef2 <EE_PageTransfer+0x1a>
    OldPageId = PAGE1_ID;
 801cf14:	f04f 0803 	mov.w	r8, #3
    NewPageAddress = PAGE0_BASE_ADDRESS;
 801cf18:	4f1e      	ldr	r7, [pc, #120]	; (801cf94 <EE_PageTransfer+0xbc>)
 801cf1a:	e7f1      	b.n	801cf00 <EE_PageTransfer+0x28>
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801cf1c:	4631      	mov	r1, r6
 801cf1e:	4628      	mov	r0, r5
 801cf20:	f7ff fe24 	bl	801cb6c <EE_VerifyPageFullWriteVariable>
  if (EepromStatus != HAL_OK)
 801cf24:	4604      	mov	r4, r0
 801cf26:	b110      	cbz	r0, 801cf2e <EE_PageTransfer+0x56>
 801cf28:	e7e3      	b.n	801cef2 <EE_PageTransfer+0x1a>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 801cf2a:	3401      	adds	r4, #1
 801cf2c:	b2a4      	uxth	r4, r4
 801cf2e:	2c12      	cmp	r4, #18
 801cf30:	d814      	bhi.n	801cf5c <EE_PageTransfer+0x84>
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 801cf32:	4b19      	ldr	r3, [pc, #100]	; (801cf98 <EE_PageTransfer+0xc0>)
 801cf34:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 801cf38:	4285      	cmp	r5, r0
 801cf3a:	d0f6      	beq.n	801cf2a <EE_PageTransfer+0x52>
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801cf3c:	4917      	ldr	r1, [pc, #92]	; (801cf9c <EE_PageTransfer+0xc4>)
 801cf3e:	f7ff fe73 	bl	801cc28 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 801cf42:	2801      	cmp	r0, #1
 801cf44:	d0f1      	beq.n	801cf2a <EE_PageTransfer+0x52>
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801cf46:	4b15      	ldr	r3, [pc, #84]	; (801cf9c <EE_PageTransfer+0xc4>)
 801cf48:	8819      	ldrh	r1, [r3, #0]
 801cf4a:	4b13      	ldr	r3, [pc, #76]	; (801cf98 <EE_PageTransfer+0xc0>)
 801cf4c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 801cf50:	f7ff fe0c 	bl	801cb6c <EE_VerifyPageFullWriteVariable>
        if (EepromStatus != HAL_OK)
 801cf54:	2800      	cmp	r0, #0
 801cf56:	d0e8      	beq.n	801cf2a <EE_PageTransfer+0x52>
          return EepromStatus;
 801cf58:	4604      	mov	r4, r0
 801cf5a:	e7ca      	b.n	801cef2 <EE_PageTransfer+0x1a>
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 801cf5c:	2300      	movs	r3, #0
 801cf5e:	9300      	str	r3, [sp, #0]
  pEraseInit.Sector = OldPageId;
 801cf60:	f8cd 8008 	str.w	r8, [sp, #8]
  pEraseInit.NbSectors = 1;
 801cf64:	2301      	movs	r3, #1
 801cf66:	9303      	str	r3, [sp, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 801cf68:	2302      	movs	r3, #2
 801cf6a:	9304      	str	r3, [sp, #16]
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 801cf6c:	a905      	add	r1, sp, #20
 801cf6e:	4668      	mov	r0, sp
 801cf70:	f7f4 fad6 	bl	8011520 <HAL_FLASHEx_Erase>
  if (FlashStatus != HAL_OK)
 801cf74:	b108      	cbz	r0, 801cf7a <EE_PageTransfer+0xa2>
    return FlashStatus;
 801cf76:	b284      	uxth	r4, r0
 801cf78:	e7bb      	b.n	801cef2 <EE_PageTransfer+0x1a>
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	4639      	mov	r1, r7
 801cf80:	2001      	movs	r0, #1
 801cf82:	f7f4 fa21 	bl	80113c8 <HAL_FLASH_Program>
  if (FlashStatus != HAL_OK)
 801cf86:	b908      	cbnz	r0, 801cf8c <EE_PageTransfer+0xb4>
  return FlashStatus;
 801cf88:	b284      	uxth	r4, r0
 801cf8a:	e7b2      	b.n	801cef2 <EE_PageTransfer+0x1a>
    return FlashStatus;
 801cf8c:	b284      	uxth	r4, r0
 801cf8e:	e7b0      	b.n	801cef2 <EE_PageTransfer+0x1a>
 801cf90:	0800c000 	.word	0x0800c000
 801cf94:	08008000 	.word	0x08008000
 801cf98:	20000010 	.word	0x20000010
 801cf9c:	20009520 	.word	0x20009520

0801cfa0 <EE_WriteVariable>:
{
 801cfa0:	b538      	push	{r3, r4, r5, lr}
 801cfa2:	4604      	mov	r4, r0
 801cfa4:	460d      	mov	r5, r1
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 801cfa6:	f7ff fde1 	bl	801cb6c <EE_VerifyPageFullWriteVariable>
  if (Status == PAGE_FULL)
 801cfaa:	2880      	cmp	r0, #128	; 0x80
 801cfac:	d000      	beq.n	801cfb0 <EE_WriteVariable+0x10>
}
 801cfae:	bd38      	pop	{r3, r4, r5, pc}
    Status = EE_PageTransfer(VirtAddress, Data);
 801cfb0:	4629      	mov	r1, r5
 801cfb2:	4620      	mov	r0, r4
 801cfb4:	f7ff ff90 	bl	801ced8 <EE_PageTransfer>
 801cfb8:	e7f9      	b.n	801cfae <EE_WriteVariable+0xe>
	...

0801cfbc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801cfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801cfc0:	4834      	ldr	r0, [pc, #208]	; (801d094 <low_level_input+0xd8>)
 801cfc2:	f7f3 fecf 	bl	8010d64 <HAL_ETH_GetReceivedFrame_IT>
 801cfc6:	2800      	cmp	r0, #0
 801cfc8:	d160      	bne.n	801d08c <low_level_input+0xd0>
    return NULL;
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 801cfca:	4b32      	ldr	r3, [pc, #200]	; (801d094 <low_level_input+0xd8>)
 801cfcc:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801cfce:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
  
  if (len > 0)
 801cfd2:	b949      	cbnz	r1, 801cfe8 <low_level_input+0x2c>
  struct pbuf *p = NULL;
 801cfd4:	f04f 0a00 	mov.w	sl, #0
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  }
  
  if (p != NULL)
 801cfd8:	f1ba 0f00 	cmp.w	sl, #0
 801cfdc:	d033      	beq.n	801d046 <low_level_input+0x8a>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801cfde:	4b2d      	ldr	r3, [pc, #180]	; (801d094 <low_level_input+0xd8>)
 801cfe0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 801cfe2:	46d1      	mov	r9, sl
    bufferoffset = 0;
 801cfe4:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 801cfe6:	e027      	b.n	801d038 <low_level_input+0x7c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801cfe8:	2203      	movs	r2, #3
 801cfea:	2004      	movs	r0, #4
 801cfec:	f7fb fa90 	bl	8018510 <pbuf_alloc>
 801cff0:	4682      	mov	sl, r0
 801cff2:	e7f1      	b.n	801cfd8 <low_level_input+0x1c>
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801cff4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801cff8:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 801cffc:	3204      	adds	r2, #4
 801cffe:	eb08 0104 	add.w	r1, r8, r4
 801d002:	4430      	add	r0, r6
 801d004:	f002 fd29 	bl	801fa5a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801d008:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801d00a:	f8d7 8008 	ldr.w	r8, [r7, #8]
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801d00e:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801d012:	1b36      	subs	r6, r6, r4
 801d014:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 801d018:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801d01a:	18a5      	adds	r5, r4, r2
 801d01c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801d020:	429d      	cmp	r5, r3
 801d022:	d8e7      	bhi.n	801cff4 <low_level_input+0x38>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801d024:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d028:	eb08 0104 	add.w	r1, r8, r4
 801d02c:	4430      	add	r0, r6
 801d02e:	f002 fd14 	bl	801fa5a <memcpy>
    for(q = p; q != NULL; q = q->next)
 801d032:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 801d036:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 801d038:	f1b9 0f00 	cmp.w	r9, #0
 801d03c:	d003      	beq.n	801d046 <low_level_input+0x8a>
      byteslefttocopy = q->len;
 801d03e:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 801d042:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801d044:	e7e9      	b.n	801d01a <low_level_input+0x5e>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801d046:	4b13      	ldr	r3, [pc, #76]	; (801d094 <low_level_input+0xd8>)
 801d048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801d04a:	2100      	movs	r1, #0
 801d04c:	e005      	b.n	801d05a <low_level_input+0x9e>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801d04e:	681a      	ldr	r2, [r3, #0]
 801d050:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801d054:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801d056:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801d058:	3101      	adds	r1, #1
 801d05a:	4a0e      	ldr	r2, [pc, #56]	; (801d094 <low_level_input+0xd8>)
 801d05c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801d05e:	4291      	cmp	r1, r2
 801d060:	d3f5      	bcc.n	801d04e <low_level_input+0x92>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 801d062:	4b0c      	ldr	r3, [pc, #48]	; (801d094 <low_level_input+0xd8>)
 801d064:	2200      	movs	r2, #0
 801d066:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	f241 0214 	movw	r2, #4116	; 0x1014
 801d06e:	589a      	ldr	r2, [r3, r2]
 801d070:	f012 0f80 	tst.w	r2, #128	; 0x80
 801d074:	d007      	beq.n	801d086 <low_level_input+0xca>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801d076:	2180      	movs	r1, #128	; 0x80
 801d078:	f241 0214 	movw	r2, #4116	; 0x1014
 801d07c:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 801d07e:	2100      	movs	r1, #0
 801d080:	f241 0208 	movw	r2, #4104	; 0x1008
 801d084:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 801d086:	4650      	mov	r0, sl
 801d088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 801d08c:	f04f 0a00 	mov.w	sl, #0
 801d090:	e7f9      	b.n	801d086 <low_level_input+0xca>
 801d092:	bf00      	nop
 801d094:	200105cc 	.word	0x200105cc

0801d098 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 801d098:	b538      	push	{r3, r4, r5, lr}
 801d09a:	4605      	mov	r5, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 801d09c:	f04f 31ff 	mov.w	r1, #4294967295
 801d0a0:	4b0b      	ldr	r3, [pc, #44]	; (801d0d0 <ethernetif_input+0x38>)
 801d0a2:	6818      	ldr	r0, [r3, #0]
 801d0a4:	f7f5 fe54 	bl	8012d50 <osSemaphoreWait>
 801d0a8:	2800      	cmp	r0, #0
 801d0aa:	d1f7      	bne.n	801d09c <ethernetif_input+0x4>
 801d0ac:	e001      	b.n	801d0b2 <ethernetif_input+0x1a>
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
      } while(p!=NULL);
 801d0ae:	2c00      	cmp	r4, #0
 801d0b0:	d0f4      	beq.n	801d09c <ethernetif_input+0x4>
        p = low_level_input( netif );
 801d0b2:	4628      	mov	r0, r5
 801d0b4:	f7ff ff82 	bl	801cfbc <low_level_input>
        if   (p != NULL)
 801d0b8:	4604      	mov	r4, r0
 801d0ba:	2800      	cmp	r0, #0
 801d0bc:	d0f7      	beq.n	801d0ae <ethernetif_input+0x16>
          if (netif->input( p, netif) != ERR_OK )
 801d0be:	692b      	ldr	r3, [r5, #16]
 801d0c0:	4629      	mov	r1, r5
 801d0c2:	4798      	blx	r3
 801d0c4:	2800      	cmp	r0, #0
 801d0c6:	d0f2      	beq.n	801d0ae <ethernetif_input+0x16>
            pbuf_free(p);
 801d0c8:	4620      	mov	r0, r4
 801d0ca:	f7fb f9b5 	bl	8018438 <pbuf_free>
 801d0ce:	e7ee      	b.n	801d0ae <ethernetif_input+0x16>
 801d0d0:	20009524 	.word	0x20009524

0801d0d4 <low_level_output>:
{
 801d0d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0d8:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801d0da:	4b2c      	ldr	r3, [pc, #176]	; (801d18c <low_level_output+0xb8>)
 801d0dc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801d0de:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 801d0e2:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 801d0e4:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 801d0e6:	f1bb 0f00 	cmp.w	fp, #0
 801d0ea:	d032      	beq.n	801d152 <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801d0ec:	6833      	ldr	r3, [r6, #0]
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	db35      	blt.n	801d15e <low_level_output+0x8a>
      byteslefttocopy = q->len;
 801d0f2:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 801d0f6:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801d0f8:	eb04 0809 	add.w	r8, r4, r9
 801d0fc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801d100:	4598      	cmp	r8, r3
 801d102:	d919      	bls.n	801d138 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 801d104:	f8db 1004 	ldr.w	r1, [fp, #4]
 801d108:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 801d10c:	3204      	adds	r2, #4
 801d10e:	4429      	add	r1, r5
 801d110:	eb0a 0004 	add.w	r0, sl, r4
 801d114:	f002 fca1 	bl	801fa5a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801d118:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801d11a:	6833      	ldr	r3, [r6, #0]
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	db21      	blt.n	801d164 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 801d120:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801d124:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801d128:	1b2d      	subs	r5, r5, r4
 801d12a:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801d12e:	1b3f      	subs	r7, r7, r4
 801d130:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 801d134:	2400      	movs	r4, #0
 801d136:	e7df      	b.n	801d0f8 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801d138:	f8db 1004 	ldr.w	r1, [fp, #4]
 801d13c:	464a      	mov	r2, r9
 801d13e:	4429      	add	r1, r5
 801d140:	eb0a 0004 	add.w	r0, sl, r4
 801d144:	f002 fc89 	bl	801fa5a <memcpy>
      framelength = framelength + byteslefttocopy;
 801d148:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 801d14a:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 801d14e:	4644      	mov	r4, r8
 801d150:	e7c9      	b.n	801d0e6 <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 801d152:	4639      	mov	r1, r7
 801d154:	480d      	ldr	r0, [pc, #52]	; (801d18c <low_level_output+0xb8>)
 801d156:	f7f3 fd73 	bl	8010c40 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 801d15a:	2000      	movs	r0, #0
 801d15c:	e004      	b.n	801d168 <low_level_output+0x94>
        errval = ERR_USE;
 801d15e:	f06f 0007 	mvn.w	r0, #7
 801d162:	e001      	b.n	801d168 <low_level_output+0x94>
          errval = ERR_USE;
 801d164:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 801d168:	4b08      	ldr	r3, [pc, #32]	; (801d18c <low_level_output+0xb8>)
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	f241 0214 	movw	r2, #4116	; 0x1014
 801d170:	589a      	ldr	r2, [r3, r2]
 801d172:	f012 0f20 	tst.w	r2, #32
 801d176:	d007      	beq.n	801d188 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801d178:	2120      	movs	r1, #32
 801d17a:	f241 0214 	movw	r2, #4116	; 0x1014
 801d17e:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 801d180:	2100      	movs	r1, #0
 801d182:	f241 0204 	movw	r2, #4100	; 0x1004
 801d186:	5099      	str	r1, [r3, r2]
}
 801d188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d18c:	200105cc 	.word	0x200105cc

0801d190 <low_level_init>:
{ 
 801d190:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d192:	b08d      	sub	sp, #52	; 0x34
 801d194:	4604      	mov	r4, r0
  heth.Instance = ETH;
 801d196:	4837      	ldr	r0, [pc, #220]	; (801d274 <low_level_init+0xe4>)
 801d198:	4b37      	ldr	r3, [pc, #220]	; (801d278 <low_level_init+0xe8>)
 801d19a:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801d19c:	2301      	movs	r3, #1
 801d19e:	6043      	str	r3, [r0, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 801d1a0:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 801d1a2:	2200      	movs	r2, #0
 801d1a4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  MACAddr[1] = 0x02;
 801d1a8:	2102      	movs	r1, #2
 801d1aa:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
  MACAddr[2] = 0xA2;
 801d1ae:	21a2      	movs	r1, #162	; 0xa2
 801d1b0:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
  MACAddr[3] = 0x42;
 801d1b4:	2142      	movs	r1, #66	; 0x42
 801d1b6:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
  MACAddr[4] = 0x50;
 801d1ba:	2150      	movs	r1, #80	; 0x50
 801d1bc:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
  MACAddr[5] = 0xE4;
 801d1c0:	21e4      	movs	r1, #228	; 0xe4
 801d1c2:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
  heth.Init.MACAddr = &MACAddr[0];
 801d1c6:	a90a      	add	r1, sp, #40	; 0x28
 801d1c8:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 801d1ca:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801d1cc:	61c2      	str	r2, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801d1ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801d1d2:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801d1d4:	f7f3 fed0 	bl	8010f78 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 801d1d8:	b928      	cbnz	r0, 801d1e6 <low_level_init+0x56>
    netif->flags |= NETIF_FLAG_LINK_UP;
 801d1da:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801d1de:	f043 0304 	orr.w	r3, r3, #4
 801d1e2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801d1e6:	4f23      	ldr	r7, [pc, #140]	; (801d274 <low_level_init+0xe4>)
 801d1e8:	2304      	movs	r3, #4
 801d1ea:	4a24      	ldr	r2, [pc, #144]	; (801d27c <low_level_init+0xec>)
 801d1ec:	4924      	ldr	r1, [pc, #144]	; (801d280 <low_level_init+0xf0>)
 801d1ee:	4638      	mov	r0, r7
 801d1f0:	f7f3 fcb6 	bl	8010b60 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801d1f4:	2304      	movs	r3, #4
 801d1f6:	4a23      	ldr	r2, [pc, #140]	; (801d284 <low_level_init+0xf4>)
 801d1f8:	4923      	ldr	r1, [pc, #140]	; (801d288 <low_level_init+0xf8>)
 801d1fa:	4638      	mov	r0, r7
 801d1fc:	f7f3 fce9 	bl	8010bd2 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801d200:	2306      	movs	r3, #6
 801d202:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801d206:	697b      	ldr	r3, [r7, #20]
 801d208:	781a      	ldrb	r2, [r3, #0]
 801d20a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801d20e:	785a      	ldrb	r2, [r3, #1]
 801d210:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801d214:	789a      	ldrb	r2, [r3, #2]
 801d216:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801d21a:	78da      	ldrb	r2, [r3, #3]
 801d21c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801d220:	791a      	ldrb	r2, [r3, #4]
 801d222:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801d226:	795b      	ldrb	r3, [r3, #5]
 801d228:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 801d22c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 801d230:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801d232:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801d236:	f043 030a 	orr.w	r3, r3, #10
 801d23a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  osSemaphoreDef(SEM);
 801d23e:	2300      	movs	r3, #0
 801d240:	9308      	str	r3, [sp, #32]
 801d242:	9309      	str	r3, [sp, #36]	; 0x24
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 801d244:	2101      	movs	r1, #1
 801d246:	a808      	add	r0, sp, #32
 801d248:	f7f5 fd5c 	bl	8012d04 <osSemaphoreCreate>
 801d24c:	4b0f      	ldr	r3, [pc, #60]	; (801d28c <low_level_init+0xfc>)
 801d24e:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801d250:	ad01      	add	r5, sp, #4
 801d252:	4e0f      	ldr	r6, [pc, #60]	; (801d290 <low_level_init+0x100>)
 801d254:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d258:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d25c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 801d260:	4621      	mov	r1, r4
 801d262:	a801      	add	r0, sp, #4
 801d264:	f7f5 fc9d 	bl	8012ba2 <osThreadCreate>
  HAL_ETH_Start(&heth);
 801d268:	4638      	mov	r0, r7
 801d26a:	f7f3 ffb1 	bl	80111d0 <HAL_ETH_Start>
}
 801d26e:	b00d      	add	sp, #52	; 0x34
 801d270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d272:	bf00      	nop
 801d274:	200105cc 	.word	0x200105cc
 801d278:	40028000 	.word	0x40028000
 801d27c:	20010614 	.word	0x20010614
 801d280:	2000ecfc 	.word	0x2000ecfc
 801d284:	2000ed7c 	.word	0x2000ed7c
 801d288:	2001054c 	.word	0x2001054c
 801d28c:	20009524 	.word	0x20009524
 801d290:	0801fcbc 	.word	0x0801fcbc

0801d294 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 801d294:	6802      	ldr	r2, [r0, #0]
 801d296:	4b29      	ldr	r3, [pc, #164]	; (801d33c <HAL_ETH_MspInit+0xa8>)
 801d298:	429a      	cmp	r2, r3
 801d29a:	d000      	beq.n	801d29e <HAL_ETH_MspInit+0xa>
 801d29c:	4770      	bx	lr
{
 801d29e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2a0:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_ETH_CLK_ENABLE();
 801d2a2:	2400      	movs	r4, #0
 801d2a4:	9400      	str	r4, [sp, #0]
 801d2a6:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 801d2aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d2ac:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 801d2b0:	631a      	str	r2, [r3, #48]	; 0x30
 801d2b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d2b4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 801d2b8:	9200      	str	r2, [sp, #0]
 801d2ba:	9a00      	ldr	r2, [sp, #0]
 801d2bc:	9401      	str	r4, [sp, #4]
 801d2be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d2c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801d2c4:	631a      	str	r2, [r3, #48]	; 0x30
 801d2c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d2c8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801d2cc:	9201      	str	r2, [sp, #4]
 801d2ce:	9a01      	ldr	r2, [sp, #4]
 801d2d0:	9402      	str	r4, [sp, #8]
 801d2d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d2d4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801d2d8:	631a      	str	r2, [r3, #48]	; 0x30
 801d2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d2dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d2e0:	9302      	str	r3, [sp, #8]
 801d2e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 801d2e4:	2332      	movs	r3, #50	; 0x32
 801d2e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d2e8:	2702      	movs	r7, #2
 801d2ea:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2ec:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d2ee:	2603      	movs	r6, #3
 801d2f0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d2f2:	250b      	movs	r5, #11
 801d2f4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d2f6:	a903      	add	r1, sp, #12
 801d2f8:	4811      	ldr	r0, [pc, #68]	; (801d340 <HAL_ETH_MspInit+0xac>)
 801d2fa:	f7f4 f95b 	bl	80115b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 801d2fe:	2386      	movs	r3, #134	; 0x86
 801d300:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d302:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d304:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d306:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d308:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d30a:	a903      	add	r1, sp, #12
 801d30c:	480d      	ldr	r0, [pc, #52]	; (801d344 <HAL_ETH_MspInit+0xb0>)
 801d30e:	f7f4 f951 	bl	80115b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 801d312:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801d316:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d318:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d31a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d31c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d31e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801d320:	a903      	add	r1, sp, #12
 801d322:	4809      	ldr	r0, [pc, #36]	; (801d348 <HAL_ETH_MspInit+0xb4>)
 801d324:	f7f4 f946 	bl	80115b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 801d328:	4622      	mov	r2, r4
 801d32a:	2105      	movs	r1, #5
 801d32c:	203d      	movs	r0, #61	; 0x3d
 801d32e:	f7f3 f873 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801d332:	203d      	movs	r0, #61	; 0x3d
 801d334:	f7f3 f8a2 	bl	801047c <HAL_NVIC_EnableIRQ>
}
 801d338:	b009      	add	sp, #36	; 0x24
 801d33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d33c:	40028000 	.word	0x40028000
 801d340:	40020800 	.word	0x40020800
 801d344:	40020000 	.word	0x40020000
 801d348:	40020400 	.word	0x40020400

0801d34c <HAL_ETH_RxCpltCallback>:
{
 801d34c:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 801d34e:	4b02      	ldr	r3, [pc, #8]	; (801d358 <HAL_ETH_RxCpltCallback+0xc>)
 801d350:	6818      	ldr	r0, [r3, #0]
 801d352:	f7f5 fd37 	bl	8012dc4 <osSemaphoreRelease>
 801d356:	bd08      	pop	{r3, pc}
 801d358:	20009524 	.word	0x20009524

0801d35c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801d35c:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d35e:	4604      	mov	r4, r0
 801d360:	b170      	cbz	r0, 801d380 <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 801d362:	2373      	movs	r3, #115	; 0x73
 801d364:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 801d368:	2374      	movs	r3, #116	; 0x74
 801d36a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801d36e:	4b08      	ldr	r3, [pc, #32]	; (801d390 <ethernetif_init+0x34>)
 801d370:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801d372:	4b08      	ldr	r3, [pc, #32]	; (801d394 <ethernetif_init+0x38>)
 801d374:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801d376:	4620      	mov	r0, r4
 801d378:	f7ff ff0a 	bl	801d190 <low_level_init>

  return ERR_OK;
}
 801d37c:	2000      	movs	r0, #0
 801d37e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d380:	4b05      	ldr	r3, [pc, #20]	; (801d398 <ethernetif_init+0x3c>)
 801d382:	f240 2235 	movw	r2, #565	; 0x235
 801d386:	4905      	ldr	r1, [pc, #20]	; (801d39c <ethernetif_init+0x40>)
 801d388:	4805      	ldr	r0, [pc, #20]	; (801d3a0 <ethernetif_init+0x44>)
 801d38a:	f001 ff78 	bl	801f27e <iprintf>
 801d38e:	e7e8      	b.n	801d362 <ethernetif_init+0x6>
 801d390:	080169e9 	.word	0x080169e9
 801d394:	0801d0d5 	.word	0x0801d0d5
 801d398:	080248f0 	.word	0x080248f0
 801d39c:	08023154 	.word	0x08023154
 801d3a0:	0801fe1c 	.word	0x0801fe1c

0801d3a4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 801d3a4:	b508      	push	{r3, lr}
  return HAL_GetTick();
 801d3a6:	f7f3 f80b 	bl	80103c0 <HAL_GetTick>
}
 801d3aa:	bd08      	pop	{r3, pc}

0801d3ac <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 801d3ac:	b510      	push	{r4, lr}
 801d3ae:	b086      	sub	sp, #24
  /* init code for LWIP */
  MX_LWIP_Init();
 801d3b0:	f000 fe8c 	bl	801e0cc <MX_LWIP_Init>

  /* USER CODE BEGIN StartDefaultTask */

	struct netconn *conn_port80;
	err_t err;
	conn_port80 = netconn_new(NETCONN_TCP);
 801d3b4:	2200      	movs	r2, #0
 801d3b6:	4611      	mov	r1, r2
 801d3b8:	2010      	movs	r0, #16
 801d3ba:	f7f7 fbc1 	bl	8014b40 <netconn_new_with_proto_and_callback>
	if (conn_port80 != NULL) {
 801d3be:	b198      	cbz	r0, 801d3e8 <StartDefaultTask+0x3c>
 801d3c0:	4604      	mov	r4, r0
		err = netconn_bind(conn_port80, IP_ADDR_ANY, 80);
 801d3c2:	2250      	movs	r2, #80	; 0x50
 801d3c4:	4931      	ldr	r1, [pc, #196]	; (801d48c <StartDefaultTask+0xe0>)
 801d3c6:	f7f7 fc31 	bl	8014c2c <netconn_bind>
		if (err == ERR_OK) {
 801d3ca:	2800      	cmp	r0, #0
 801d3cc:	d156      	bne.n	801d47c <StartDefaultTask+0xd0>
			netconn_listen(conn_port80);
 801d3ce:	21ff      	movs	r1, #255	; 0xff
 801d3d0:	4620      	mov	r0, r4
 801d3d2:	f7f7 fc51 	bl	8014c78 <netconn_listen_with_backlog>
			sys_thread_new("web_thread", Web_thread, (void*) conn_port80,
 801d3d6:	2300      	movs	r3, #0
 801d3d8:	9300      	str	r3, [sp, #0]
 801d3da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d3de:	4622      	mov	r2, r4
 801d3e0:	492b      	ldr	r1, [pc, #172]	; (801d490 <StartDefaultTask+0xe4>)
 801d3e2:	482c      	ldr	r0, [pc, #176]	; (801d494 <StartDefaultTask+0xe8>)
 801d3e4:	f7ff f9ff 	bl	801c7e6 <sys_thread_new>
			netconn_delete(conn_port80);
		}
	}

	struct netconn *conn_port102;
	conn_port102 = netconn_new(NETCONN_TCP);
 801d3e8:	2200      	movs	r2, #0
 801d3ea:	4611      	mov	r1, r2
 801d3ec:	2010      	movs	r0, #16
 801d3ee:	f7f7 fba7 	bl	8014b40 <netconn_new_with_proto_and_callback>
	if (conn_port102 != NULL) {
 801d3f2:	4604      	mov	r4, r0
 801d3f4:	b190      	cbz	r0, 801d41c <StartDefaultTask+0x70>
		err = netconn_bind(conn_port102, IP_ADDR_ANY, 102);
 801d3f6:	2266      	movs	r2, #102	; 0x66
 801d3f8:	4924      	ldr	r1, [pc, #144]	; (801d48c <StartDefaultTask+0xe0>)
 801d3fa:	f7f7 fc17 	bl	8014c2c <netconn_bind>
		if (err == ERR_OK) {
 801d3fe:	2800      	cmp	r0, #0
 801d400:	d140      	bne.n	801d484 <StartDefaultTask+0xd8>
			netconn_listen(conn_port102);
 801d402:	21ff      	movs	r1, #255	; 0xff
 801d404:	4620      	mov	r0, r4
 801d406:	f7f7 fc37 	bl	8014c78 <netconn_listen_with_backlog>
			sys_thread_new("tcp_serv_thread", Client_thread, (void*) conn_port102,
 801d40a:	2301      	movs	r3, #1
 801d40c:	9300      	str	r3, [sp, #0]
 801d40e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d412:	4622      	mov	r2, r4
 801d414:	4920      	ldr	r1, [pc, #128]	; (801d498 <StartDefaultTask+0xec>)
 801d416:	4821      	ldr	r0, [pc, #132]	; (801d49c <StartDefaultTask+0xf0>)
 801d418:	f7ff f9e5 	bl	801c7e6 <sys_thread_new>
		} else {
			netconn_delete(conn_port102);
		}
	}

	uint8_t data_conn1[] = { 0x80, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00 };
 801d41c:	4a20      	ldr	r2, [pc, #128]	; (801d4a0 <StartDefaultTask+0xf4>)
 801d41e:	ab03      	add	r3, sp, #12
 801d420:	ca07      	ldmia	r2, {r0, r1, r2}
 801d422:	c303      	stmia	r3!, {r0, r1}
 801d424:	701a      	strb	r2, [r3, #0]
	uint8_t * request_data;
	request_data = (uint8_t*) pvPortMalloc(sizeof(data_conn1));
 801d426:	2009      	movs	r0, #9
 801d428:	f7f5 fffa 	bl	8013420 <pvPortMalloc>
 801d42c:	4602      	mov	r2, r0
	memcpy(request_data, data_conn1, sizeof(data_conn1));
 801d42e:	ab03      	add	r3, sp, #12
 801d430:	cb03      	ldmia	r3!, {r0, r1}
 801d432:	6010      	str	r0, [r2, #0]
 801d434:	6051      	str	r1, [r2, #4]
 801d436:	781b      	ldrb	r3, [r3, #0]
 801d438:	7213      	strb	r3, [r2, #8]
	hprot.data_len = sizeof(data_conn1);
 801d43a:	4b1a      	ldr	r3, [pc, #104]	; (801d4a4 <StartDefaultTask+0xf8>)
 801d43c:	2109      	movs	r1, #9
 801d43e:	7419      	strb	r1, [r3, #16]
	hprot.data_ptr = request_data;
 801d440:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 801d442:	4c19      	ldr	r4, [pc, #100]	; (801d4a8 <StartDefaultTask+0xfc>)
 801d444:	2201      	movs	r2, #1
 801d446:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d44a:	4620      	mov	r0, r4
 801d44c:	f7f4 fa28 	bl	80118a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 801d450:	2200      	movs	r2, #0
 801d452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d456:	4620      	mov	r0, r4
 801d458:	f7f4 fa22 	bl	80118a0 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for (;;) {
		printf("Free heap: %d\r\n",xPortGetMinimumEverFreeHeapSize());
 801d45c:	f7f6 f89c 	bl	8013598 <xPortGetMinimumEverFreeHeapSize>
 801d460:	4601      	mov	r1, r0
 801d462:	4812      	ldr	r0, [pc, #72]	; (801d4ac <StartDefaultTask+0x100>)
 801d464:	f001 ff0b 	bl	801f27e <iprintf>
		osDelay(500);
 801d468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801d46c:	f7f5 fbce 	bl	8012c0c <osDelay>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 801d470:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d474:	480c      	ldr	r0, [pc, #48]	; (801d4a8 <StartDefaultTask+0xfc>)
 801d476:	f7f4 fa19 	bl	80118ac <HAL_GPIO_TogglePin>
 801d47a:	e7ef      	b.n	801d45c <StartDefaultTask+0xb0>
			netconn_delete(conn_port80);
 801d47c:	4620      	mov	r0, r4
 801d47e:	f7f7 fbbb 	bl	8014bf8 <netconn_delete>
 801d482:	e7b1      	b.n	801d3e8 <StartDefaultTask+0x3c>
			netconn_delete(conn_port102);
 801d484:	4620      	mov	r0, r4
 801d486:	f7f7 fbb7 	bl	8014bf8 <netconn_delete>
 801d48a:	e7c7      	b.n	801d41c <StartDefaultTask+0x70>
 801d48c:	08023388 	.word	0x08023388
 801d490:	0801f675 	.word	0x0801f675
 801d494:	08024950 	.word	0x08024950
 801d498:	0801ee05 	.word	0x0801ee05
 801d49c:	0802495c 	.word	0x0802495c
 801d4a0:	0801fcd8 	.word	0x0801fcd8
 801d4a4:	20011ec4 	.word	0x20011ec4
 801d4a8:	40021000 	.word	0x40021000
 801d4ac:	0802496c 	.word	0x0802496c

0801d4b0 <StartHeapCleanerTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
//---------------------------------------------------------------
void StartHeapCleanerTask(void const * argument) {
 801d4b0:	b500      	push	{lr}
 801d4b2:	b083      	sub	sp, #12
	uint8_t * heap_ptr;
	for (;;) {
		xQueueReceive(cleaner_queue, &heap_ptr, portMAX_DELAY);
 801d4b4:	2300      	movs	r3, #0
 801d4b6:	f04f 32ff 	mov.w	r2, #4294967295
 801d4ba:	a901      	add	r1, sp, #4
 801d4bc:	4804      	ldr	r0, [pc, #16]	; (801d4d0 <StartHeapCleanerTask+0x20>)
 801d4be:	6800      	ldr	r0, [r0, #0]
 801d4c0:	f7f6 fb90 	bl	8013be4 <xQueueGenericReceive>
		vPortFree((uint8_t *) heap_ptr);
 801d4c4:	9801      	ldr	r0, [sp, #4]
 801d4c6:	f7f6 f82f 	bl	8013528 <vPortFree>
		heap_ptr = NULL;
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	9301      	str	r3, [sp, #4]
 801d4ce:	e7f1      	b.n	801d4b4 <StartHeapCleanerTask+0x4>
 801d4d0:	20011df8 	.word	0x20011df8

0801d4d4 <configureTimerForRunTimeStats>:
__weak void configureTimerForRunTimeStats(void) {
 801d4d4:	b508      	push	{r3, lr}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801d4d6:	4b06      	ldr	r3, [pc, #24]	; (801d4f0 <configureTimerForRunTimeStats+0x1c>)
 801d4d8:	2200      	movs	r2, #0
 801d4da:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801d4de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801d4e2:	605a      	str	r2, [r3, #4]
	MX_TIM7_Init();
 801d4e4:	f001 fd50 	bl	801ef88 <MX_TIM7_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 801d4e8:	4802      	ldr	r0, [pc, #8]	; (801d4f4 <configureTimerForRunTimeStats+0x20>)
 801d4ea:	f7f4 fd2c 	bl	8011f46 <HAL_TIM_Base_Start_IT>
 801d4ee:	bd08      	pop	{r3, pc}
 801d4f0:	e000e100 	.word	0xe000e100
 801d4f4:	20011f58 	.word	0x20011f58

0801d4f8 <getRunTimeCounterValue>:
	return ulHighFrequencyTimerTicks;
 801d4f8:	4b01      	ldr	r3, [pc, #4]	; (801d500 <getRunTimeCounterValue+0x8>)
 801d4fa:	6818      	ldr	r0, [r3, #0]
}
 801d4fc:	4770      	bx	lr
 801d4fe:	bf00      	nop
 801d500:	20009528 	.word	0x20009528

0801d504 <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 801d504:	4b03      	ldr	r3, [pc, #12]	; (801d514 <vApplicationGetIdleTaskMemory+0x10>)
 801d506:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 801d508:	4b03      	ldr	r3, [pc, #12]	; (801d518 <vApplicationGetIdleTaskMemory+0x14>)
 801d50a:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 801d50c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d510:	6013      	str	r3, [r2, #0]
 801d512:	4770      	bx	lr
 801d514:	20009d2c 	.word	0x20009d2c
 801d518:	2000952c 	.word	0x2000952c

0801d51c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 801d51c:	b570      	push	{r4, r5, r6, lr}
 801d51e:	b096      	sub	sp, #88	; 0x58
	osThreadDef(processTask, StartProcessTask, osPriorityRealtime, 0, 1024);
 801d520:	4c2b      	ldr	r4, [pc, #172]	; (801d5d0 <MX_FREERTOS_Init+0xb4>)
 801d522:	ad0f      	add	r5, sp, #60	; 0x3c
 801d524:	f104 060c 	add.w	r6, r4, #12
 801d528:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d52a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d52c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d530:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	processTaskHandle = osThreadCreate(osThread(processTask), NULL);
 801d534:	2100      	movs	r1, #0
 801d536:	a80f      	add	r0, sp, #60	; 0x3c
 801d538:	f7f5 fb33 	bl	8012ba2 <osThreadCreate>
 801d53c:	4b25      	ldr	r3, [pc, #148]	; (801d5d4 <MX_FREERTOS_Init+0xb8>)
 801d53e:	6018      	str	r0, [r3, #0]
	osThreadDef(cleanerTask, StartHeapCleanerTask, osPriorityAboveNormal, 0,
 801d540:	ad08      	add	r5, sp, #32
 801d542:	f104 0628 	add.w	r6, r4, #40	; 0x28
 801d546:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d54a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801d54e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	heapCleanerHandle = osThreadCreate(osThread(cleanerTask), NULL);
 801d552:	2100      	movs	r1, #0
 801d554:	a808      	add	r0, sp, #32
 801d556:	f7f5 fb24 	bl	8012ba2 <osThreadCreate>
 801d55a:	4b1f      	ldr	r3, [pc, #124]	; (801d5d8 <MX_FREERTOS_Init+0xbc>)
 801d55c:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 801d55e:	ad01      	add	r5, sp, #4
 801d560:	3444      	adds	r4, #68	; 0x44
 801d562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d566:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d56a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801d56e:	2100      	movs	r1, #0
 801d570:	a801      	add	r0, sp, #4
 801d572:	f7f5 fb16 	bl	8012ba2 <osThreadCreate>
 801d576:	4b19      	ldr	r3, [pc, #100]	; (801d5dc <MX_FREERTOS_Init+0xc0>)
 801d578:	6018      	str	r0, [r3, #0]
	frames_queue = xQueueCreate(16, sizeof(uint16_t));
 801d57a:	2200      	movs	r2, #0
 801d57c:	2102      	movs	r1, #2
 801d57e:	2010      	movs	r0, #16
 801d580:	f7f6 f951 	bl	8013826 <xQueueGenericCreate>
 801d584:	4b16      	ldr	r3, [pc, #88]	; (801d5e0 <MX_FREERTOS_Init+0xc4>)
 801d586:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(frames_queue,"frames_queue");
 801d588:	4916      	ldr	r1, [pc, #88]	; (801d5e4 <MX_FREERTOS_Init+0xc8>)
 801d58a:	f7f6 fc7d 	bl	8013e88 <vQueueAddToRegistry>
	cleaner_queue = xQueueCreate(16, sizeof(uint8_t*));
 801d58e:	2200      	movs	r2, #0
 801d590:	2104      	movs	r1, #4
 801d592:	2010      	movs	r0, #16
 801d594:	f7f6 f947 	bl	8013826 <xQueueGenericCreate>
 801d598:	4b13      	ldr	r3, [pc, #76]	; (801d5e8 <MX_FREERTOS_Init+0xcc>)
 801d59a:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(cleaner_queue,"cleaner_queue");
 801d59c:	4913      	ldr	r1, [pc, #76]	; (801d5ec <MX_FREERTOS_Init+0xd0>)
 801d59e:	f7f6 fc73 	bl	8013e88 <vQueueAddToRegistry>
	tcp_client_queue = xQueueCreate(8, sizeof(parcel_t));
 801d5a2:	2200      	movs	r2, #0
 801d5a4:	2108      	movs	r1, #8
 801d5a6:	4608      	mov	r0, r1
 801d5a8:	f7f6 f93d 	bl	8013826 <xQueueGenericCreate>
 801d5ac:	4b10      	ldr	r3, [pc, #64]	; (801d5f0 <MX_FREERTOS_Init+0xd4>)
 801d5ae:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(tcp_client_queue,"tcp_client_queue");
 801d5b0:	4910      	ldr	r1, [pc, #64]	; (801d5f4 <MX_FREERTOS_Init+0xd8>)
 801d5b2:	f7f6 fc69 	bl	8013e88 <vQueueAddToRegistry>
	protocol_queue = xQueueCreate(8, sizeof(parcel_t));
 801d5b6:	2200      	movs	r2, #0
 801d5b8:	2108      	movs	r1, #8
 801d5ba:	4608      	mov	r0, r1
 801d5bc:	f7f6 f933 	bl	8013826 <xQueueGenericCreate>
 801d5c0:	4b0d      	ldr	r3, [pc, #52]	; (801d5f8 <MX_FREERTOS_Init+0xdc>)
 801d5c2:	6018      	str	r0, [r3, #0]
	vQueueAddToRegistry(protocol_queue,"protocol_queue");
 801d5c4:	490d      	ldr	r1, [pc, #52]	; (801d5fc <MX_FREERTOS_Init+0xe0>)
 801d5c6:	f7f6 fc5f 	bl	8013e88 <vQueueAddToRegistry>
}
 801d5ca:	b016      	add	sp, #88	; 0x58
 801d5cc:	bd70      	pop	{r4, r5, r6, pc}
 801d5ce:	bf00      	nop
 801d5d0:	0801fcd8 	.word	0x0801fcd8
 801d5d4:	20011df4 	.word	0x20011df4
 801d5d8:	20011dec 	.word	0x20011dec
 801d5dc:	20011de4 	.word	0x20011de4
 801d5e0:	20011de8 	.word	0x20011de8
 801d5e4:	0802490c 	.word	0x0802490c
 801d5e8:	20011df8 	.word	0x20011df8
 801d5ec:	0802491c 	.word	0x0802491c
 801d5f0:	20011f18 	.word	0x20011f18
 801d5f4:	0802492c 	.word	0x0802492c
 801d5f8:	20011ed8 	.word	0x20011ed8
 801d5fc:	08024940 	.word	0x08024940

0801d600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801d600:	b530      	push	{r4, r5, lr}
 801d602:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d604:	2400      	movs	r4, #0
 801d606:	9407      	str	r4, [sp, #28]
 801d608:	9408      	str	r4, [sp, #32]
 801d60a:	9409      	str	r4, [sp, #36]	; 0x24
 801d60c:	940a      	str	r4, [sp, #40]	; 0x28
 801d60e:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801d610:	9401      	str	r4, [sp, #4]
 801d612:	4b28      	ldr	r3, [pc, #160]	; (801d6b4 <MX_GPIO_Init+0xb4>)
 801d614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801d61a:	631a      	str	r2, [r3, #48]	; 0x30
 801d61c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d61e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801d622:	9201      	str	r2, [sp, #4]
 801d624:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801d626:	9402      	str	r4, [sp, #8]
 801d628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d62a:	f042 0204 	orr.w	r2, r2, #4
 801d62e:	631a      	str	r2, [r3, #48]	; 0x30
 801d630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d632:	f002 0204 	and.w	r2, r2, #4
 801d636:	9202      	str	r2, [sp, #8]
 801d638:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801d63a:	9403      	str	r4, [sp, #12]
 801d63c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d63e:	f042 0201 	orr.w	r2, r2, #1
 801d642:	631a      	str	r2, [r3, #48]	; 0x30
 801d644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d646:	f002 0201 	and.w	r2, r2, #1
 801d64a:	9203      	str	r2, [sp, #12]
 801d64c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801d64e:	9404      	str	r4, [sp, #16]
 801d650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d652:	f042 0210 	orr.w	r2, r2, #16
 801d656:	631a      	str	r2, [r3, #48]	; 0x30
 801d658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d65a:	f002 0210 	and.w	r2, r2, #16
 801d65e:	9204      	str	r2, [sp, #16]
 801d660:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801d662:	9405      	str	r4, [sp, #20]
 801d664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d666:	f042 0202 	orr.w	r2, r2, #2
 801d66a:	631a      	str	r2, [r3, #48]	; 0x30
 801d66c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d66e:	f002 0202 	and.w	r2, r2, #2
 801d672:	9205      	str	r2, [sp, #20]
 801d674:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801d676:	9406      	str	r4, [sp, #24]
 801d678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d67a:	f042 0208 	orr.w	r2, r2, #8
 801d67e:	631a      	str	r2, [r3, #48]	; 0x30
 801d680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d682:	f003 0308 	and.w	r3, r3, #8
 801d686:	9306      	str	r3, [sp, #24]
 801d688:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 801d68a:	4d0b      	ldr	r5, [pc, #44]	; (801d6b8 <MX_GPIO_Init+0xb8>)
 801d68c:	4622      	mov	r2, r4
 801d68e:	f240 6101 	movw	r1, #1537	; 0x601
 801d692:	4628      	mov	r0, r5
 801d694:	f7f4 f904 	bl	80118a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin;
 801d698:	f240 6301 	movw	r3, #1537	; 0x601
 801d69c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801d69e:	2301      	movs	r3, #1
 801d6a0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d6a2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d6a4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801d6a6:	a907      	add	r1, sp, #28
 801d6a8:	4628      	mov	r0, r5
 801d6aa:	f7f3 ff83 	bl	80115b4 <HAL_GPIO_Init>

}
 801d6ae:	b00d      	add	sp, #52	; 0x34
 801d6b0:	bd30      	pop	{r4, r5, pc}
 801d6b2:	bf00      	nop
 801d6b4:	40023800 	.word	0x40023800
 801d6b8:	40021000 	.word	0x40021000

0801d6bc <jsmn_alloc_token>:
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 801d6bc:	6843      	ldr	r3, [r0, #4]
 801d6be:	4293      	cmp	r3, r2
 801d6c0:	d20a      	bcs.n	801d6d8 <jsmn_alloc_token+0x1c>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 801d6c2:	1c5a      	adds	r2, r3, #1
 801d6c4:	6042      	str	r2, [r0, #4]
 801d6c6:	eb01 1003 	add.w	r0, r1, r3, lsl #4
	tok->start = tok->end = -1;
 801d6ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d6ce:	6083      	str	r3, [r0, #8]
 801d6d0:	6043      	str	r3, [r0, #4]
	tok->size = 0;
 801d6d2:	2300      	movs	r3, #0
 801d6d4:	60c3      	str	r3, [r0, #12]
#ifdef JSMN_PARENT_LINKS
	tok->parent = -1;
#endif
	return tok;
 801d6d6:	4770      	bx	lr
		return NULL;
 801d6d8:	2000      	movs	r0, #0
}
 801d6da:	4770      	bx	lr

0801d6dc <jsmn_fill_token>:
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 801d6dc:	7001      	strb	r1, [r0, #0]
	token->start = start;
 801d6de:	6042      	str	r2, [r0, #4]
	token->end = end;
 801d6e0:	6083      	str	r3, [r0, #8]
	token->size = 0;
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	60c3      	str	r3, [r0, #12]
 801d6e6:	4770      	bx	lr

0801d6e8 <jsmn_parse_primitive>:

/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
 801d6e8:	b570      	push	{r4, r5, r6, lr}
	jsmntok_t *token;
	int start;

	start = parser->pos;
 801d6ea:	6806      	ldr	r6, [r0, #0]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d6ec:	e00b      	b.n	801d706 <jsmn_parse_primitive+0x1e>
		switch (js[parser->pos]) {
 801d6ee:	2c09      	cmp	r4, #9
 801d6f0:	d303      	bcc.n	801d6fa <jsmn_parse_primitive+0x12>
 801d6f2:	2c0a      	cmp	r4, #10
 801d6f4:	d919      	bls.n	801d72a <jsmn_parse_primitive+0x42>
 801d6f6:	2c0d      	cmp	r4, #13
 801d6f8:	d017      	beq.n	801d72a <jsmn_parse_primitive+0x42>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 801d6fa:	3c20      	subs	r4, #32
 801d6fc:	b2e4      	uxtb	r4, r4
 801d6fe:	2c5e      	cmp	r4, #94	; 0x5e
 801d700:	d824      	bhi.n	801d74c <jsmn_parse_primitive+0x64>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d702:	3501      	adds	r5, #1
 801d704:	6005      	str	r5, [r0, #0]
 801d706:	6805      	ldr	r5, [r0, #0]
 801d708:	4295      	cmp	r5, r2
 801d70a:	d20e      	bcs.n	801d72a <jsmn_parse_primitive+0x42>
 801d70c:	5d4c      	ldrb	r4, [r1, r5]
 801d70e:	b164      	cbz	r4, 801d72a <jsmn_parse_primitive+0x42>
		switch (js[parser->pos]) {
 801d710:	2c20      	cmp	r4, #32
 801d712:	d00a      	beq.n	801d72a <jsmn_parse_primitive+0x42>
 801d714:	d9eb      	bls.n	801d6ee <jsmn_parse_primitive+0x6>
 801d716:	2c3a      	cmp	r4, #58	; 0x3a
 801d718:	d007      	beq.n	801d72a <jsmn_parse_primitive+0x42>
 801d71a:	d904      	bls.n	801d726 <jsmn_parse_primitive+0x3e>
 801d71c:	2c5d      	cmp	r4, #93	; 0x5d
 801d71e:	d004      	beq.n	801d72a <jsmn_parse_primitive+0x42>
 801d720:	2c7d      	cmp	r4, #125	; 0x7d
 801d722:	d1ea      	bne.n	801d6fa <jsmn_parse_primitive+0x12>
 801d724:	e001      	b.n	801d72a <jsmn_parse_primitive+0x42>
 801d726:	2c2c      	cmp	r4, #44	; 0x2c
 801d728:	d1e7      	bne.n	801d6fa <jsmn_parse_primitive+0x12>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
 801d72a:	b19b      	cbz	r3, 801d754 <jsmn_parse_primitive+0x6c>
 801d72c:	4619      	mov	r1, r3
 801d72e:	4604      	mov	r4, r0
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
 801d730:	9a04      	ldr	r2, [sp, #16]
 801d732:	f7ff ffc3 	bl	801d6bc <jsmn_alloc_token>
	if (token == NULL) {
 801d736:	b188      	cbz	r0, 801d75c <jsmn_parse_primitive+0x74>
		parser->pos = start;
		return JSMN_ERROR_NOMEM;
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 801d738:	6823      	ldr	r3, [r4, #0]
 801d73a:	4632      	mov	r2, r6
 801d73c:	2104      	movs	r1, #4
 801d73e:	f7ff ffcd 	bl	801d6dc <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
 801d742:	6823      	ldr	r3, [r4, #0]
 801d744:	3b01      	subs	r3, #1
 801d746:	6023      	str	r3, [r4, #0]
	return 0;
 801d748:	2000      	movs	r0, #0
}
 801d74a:	bd70      	pop	{r4, r5, r6, pc}
			parser->pos = start;
 801d74c:	6006      	str	r6, [r0, #0]
			return JSMN_ERROR_INVAL;
 801d74e:	f06f 0001 	mvn.w	r0, #1
 801d752:	bd70      	pop	{r4, r5, r6, pc}
		parser->pos--;
 801d754:	3d01      	subs	r5, #1
 801d756:	6005      	str	r5, [r0, #0]
		return 0;
 801d758:	2000      	movs	r0, #0
 801d75a:	bd70      	pop	{r4, r5, r6, pc}
		parser->pos = start;
 801d75c:	6026      	str	r6, [r4, #0]
		return JSMN_ERROR_NOMEM;
 801d75e:	f04f 30ff 	mov.w	r0, #4294967295
 801d762:	bd70      	pop	{r4, r5, r6, pc}

0801d764 <jsmn_parse_string>:

/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
 801d764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	jsmntok_t *token;

	int start = parser->pos;
 801d766:	6806      	ldr	r6, [r0, #0]

	parser->pos++;
 801d768:	1c74      	adds	r4, r6, #1
 801d76a:	6004      	str	r4, [r0, #0]

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d76c:	e03c      	b.n	801d7e8 <jsmn_parse_string+0x84>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
 801d76e:	2b00      	cmp	r3, #0
 801d770:	f000 8102 	beq.w	801d978 <jsmn_parse_string+0x214>
 801d774:	4619      	mov	r1, r3
 801d776:	4604      	mov	r4, r0
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
 801d778:	9a06      	ldr	r2, [sp, #24]
 801d77a:	f7ff ff9f 	bl	801d6bc <jsmn_alloc_token>
			if (token == NULL) {
 801d77e:	b130      	cbz	r0, 801d78e <jsmn_parse_string+0x2a>
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 801d780:	6823      	ldr	r3, [r4, #0]
 801d782:	1c72      	adds	r2, r6, #1
 801d784:	2103      	movs	r1, #3
 801d786:	f7ff ffa9 	bl	801d6dc <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
			token->parent = parser->toksuper;
#endif
			return 0;
 801d78a:	2000      	movs	r0, #0
 801d78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				parser->pos = start;
 801d78e:	6026      	str	r6, [r4, #0]
				return JSMN_ERROR_NOMEM;
 801d790:	f04f 30ff 	mov.w	r0, #4294967295
 801d794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
 801d796:	3401      	adds	r4, #1
 801d798:	6004      	str	r4, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 801d79a:	f04f 0e00 	mov.w	lr, #0
 801d79e:	e003      	b.n	801d7a8 <jsmn_parse_string+0x44>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
 801d7a0:	3401      	adds	r4, #1
 801d7a2:	6004      	str	r4, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 801d7a4:	f10e 0e01 	add.w	lr, lr, #1
 801d7a8:	f1be 0f03 	cmp.w	lr, #3
 801d7ac:	dc16      	bgt.n	801d7dc <jsmn_parse_string+0x78>
 801d7ae:	6804      	ldr	r4, [r0, #0]
 801d7b0:	42a2      	cmp	r2, r4
 801d7b2:	d913      	bls.n	801d7dc <jsmn_parse_string+0x78>
 801d7b4:	5d0d      	ldrb	r5, [r1, r4]
 801d7b6:	b18d      	cbz	r5, 801d7dc <jsmn_parse_string+0x78>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 801d7b8:	f1a5 0730 	sub.w	r7, r5, #48	; 0x30
 801d7bc:	b2ff      	uxtb	r7, r7
 801d7be:	2f09      	cmp	r7, #9
 801d7c0:	d9ee      	bls.n	801d7a0 <jsmn_parse_string+0x3c>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
 801d7c2:	f1a5 0741 	sub.w	r7, r5, #65	; 0x41
 801d7c6:	b2ff      	uxtb	r7, r7
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 801d7c8:	2f05      	cmp	r7, #5
 801d7ca:	d9e9      	bls.n	801d7a0 <jsmn_parse_string+0x3c>
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 801d7cc:	3d61      	subs	r5, #97	; 0x61
 801d7ce:	b2ed      	uxtb	r5, r5
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 801d7d0:	2d05      	cmp	r5, #5
 801d7d2:	d9e5      	bls.n	801d7a0 <jsmn_parse_string+0x3c>
							parser->pos = start;
 801d7d4:	6006      	str	r6, [r0, #0]
							return JSMN_ERROR_INVAL;
 801d7d6:	f06f 0001 	mvn.w	r0, #1
 801d7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					}
					parser->pos--;
 801d7dc:	6804      	ldr	r4, [r0, #0]
 801d7de:	3c01      	subs	r4, #1
 801d7e0:	6004      	str	r4, [r0, #0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d7e2:	6804      	ldr	r4, [r0, #0]
 801d7e4:	3401      	adds	r4, #1
 801d7e6:	6004      	str	r4, [r0, #0]
 801d7e8:	6804      	ldr	r4, [r0, #0]
 801d7ea:	4294      	cmp	r4, r2
 801d7ec:	f080 80c0 	bcs.w	801d970 <jsmn_parse_string+0x20c>
 801d7f0:	5d0d      	ldrb	r5, [r1, r4]
 801d7f2:	2d00      	cmp	r5, #0
 801d7f4:	f000 80bc 	beq.w	801d970 <jsmn_parse_string+0x20c>
		if (c == '\"') {
 801d7f8:	2d22      	cmp	r5, #34	; 0x22
 801d7fa:	d0b8      	beq.n	801d76e <jsmn_parse_string+0xa>
		if (c == '\\' && parser->pos + 1 < len) {
 801d7fc:	2d5c      	cmp	r5, #92	; 0x5c
 801d7fe:	d1f0      	bne.n	801d7e2 <jsmn_parse_string+0x7e>
 801d800:	3401      	adds	r4, #1
 801d802:	42a2      	cmp	r2, r4
 801d804:	d9ed      	bls.n	801d7e2 <jsmn_parse_string+0x7e>
			parser->pos++;
 801d806:	6004      	str	r4, [r0, #0]
			switch (js[parser->pos]) {
 801d808:	5d0d      	ldrb	r5, [r1, r4]
 801d80a:	3d22      	subs	r5, #34	; 0x22
 801d80c:	2d53      	cmp	r5, #83	; 0x53
 801d80e:	f200 80ab 	bhi.w	801d968 <jsmn_parse_string+0x204>
 801d812:	a701      	add	r7, pc, #4	; (adr r7, 801d818 <jsmn_parse_string+0xb4>)
 801d814:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
 801d818:	0801d7e3 	.word	0x0801d7e3
 801d81c:	0801d969 	.word	0x0801d969
 801d820:	0801d969 	.word	0x0801d969
 801d824:	0801d969 	.word	0x0801d969
 801d828:	0801d969 	.word	0x0801d969
 801d82c:	0801d969 	.word	0x0801d969
 801d830:	0801d969 	.word	0x0801d969
 801d834:	0801d969 	.word	0x0801d969
 801d838:	0801d969 	.word	0x0801d969
 801d83c:	0801d969 	.word	0x0801d969
 801d840:	0801d969 	.word	0x0801d969
 801d844:	0801d969 	.word	0x0801d969
 801d848:	0801d969 	.word	0x0801d969
 801d84c:	0801d7e3 	.word	0x0801d7e3
 801d850:	0801d969 	.word	0x0801d969
 801d854:	0801d969 	.word	0x0801d969
 801d858:	0801d969 	.word	0x0801d969
 801d85c:	0801d969 	.word	0x0801d969
 801d860:	0801d969 	.word	0x0801d969
 801d864:	0801d969 	.word	0x0801d969
 801d868:	0801d969 	.word	0x0801d969
 801d86c:	0801d969 	.word	0x0801d969
 801d870:	0801d969 	.word	0x0801d969
 801d874:	0801d969 	.word	0x0801d969
 801d878:	0801d969 	.word	0x0801d969
 801d87c:	0801d969 	.word	0x0801d969
 801d880:	0801d969 	.word	0x0801d969
 801d884:	0801d969 	.word	0x0801d969
 801d888:	0801d969 	.word	0x0801d969
 801d88c:	0801d969 	.word	0x0801d969
 801d890:	0801d969 	.word	0x0801d969
 801d894:	0801d969 	.word	0x0801d969
 801d898:	0801d969 	.word	0x0801d969
 801d89c:	0801d969 	.word	0x0801d969
 801d8a0:	0801d969 	.word	0x0801d969
 801d8a4:	0801d969 	.word	0x0801d969
 801d8a8:	0801d969 	.word	0x0801d969
 801d8ac:	0801d969 	.word	0x0801d969
 801d8b0:	0801d969 	.word	0x0801d969
 801d8b4:	0801d969 	.word	0x0801d969
 801d8b8:	0801d969 	.word	0x0801d969
 801d8bc:	0801d969 	.word	0x0801d969
 801d8c0:	0801d969 	.word	0x0801d969
 801d8c4:	0801d969 	.word	0x0801d969
 801d8c8:	0801d969 	.word	0x0801d969
 801d8cc:	0801d969 	.word	0x0801d969
 801d8d0:	0801d969 	.word	0x0801d969
 801d8d4:	0801d969 	.word	0x0801d969
 801d8d8:	0801d969 	.word	0x0801d969
 801d8dc:	0801d969 	.word	0x0801d969
 801d8e0:	0801d969 	.word	0x0801d969
 801d8e4:	0801d969 	.word	0x0801d969
 801d8e8:	0801d969 	.word	0x0801d969
 801d8ec:	0801d969 	.word	0x0801d969
 801d8f0:	0801d969 	.word	0x0801d969
 801d8f4:	0801d969 	.word	0x0801d969
 801d8f8:	0801d969 	.word	0x0801d969
 801d8fc:	0801d969 	.word	0x0801d969
 801d900:	0801d7e3 	.word	0x0801d7e3
 801d904:	0801d969 	.word	0x0801d969
 801d908:	0801d969 	.word	0x0801d969
 801d90c:	0801d969 	.word	0x0801d969
 801d910:	0801d969 	.word	0x0801d969
 801d914:	0801d969 	.word	0x0801d969
 801d918:	0801d7e3 	.word	0x0801d7e3
 801d91c:	0801d969 	.word	0x0801d969
 801d920:	0801d969 	.word	0x0801d969
 801d924:	0801d969 	.word	0x0801d969
 801d928:	0801d7e3 	.word	0x0801d7e3
 801d92c:	0801d969 	.word	0x0801d969
 801d930:	0801d969 	.word	0x0801d969
 801d934:	0801d969 	.word	0x0801d969
 801d938:	0801d969 	.word	0x0801d969
 801d93c:	0801d969 	.word	0x0801d969
 801d940:	0801d969 	.word	0x0801d969
 801d944:	0801d969 	.word	0x0801d969
 801d948:	0801d7e3 	.word	0x0801d7e3
 801d94c:	0801d969 	.word	0x0801d969
 801d950:	0801d969 	.word	0x0801d969
 801d954:	0801d969 	.word	0x0801d969
 801d958:	0801d7e3 	.word	0x0801d7e3
 801d95c:	0801d969 	.word	0x0801d969
 801d960:	0801d7e3 	.word	0x0801d7e3
 801d964:	0801d797 	.word	0x0801d797
					break;
				/* Unexpected symbol */
				default:
					parser->pos = start;
 801d968:	6006      	str	r6, [r0, #0]
					return JSMN_ERROR_INVAL;
 801d96a:	f06f 0001 	mvn.w	r0, #1
 801d96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
	}
	parser->pos = start;
 801d970:	6006      	str	r6, [r0, #0]
	return JSMN_ERROR_PART;
 801d972:	f06f 0002 	mvn.w	r0, #2
 801d976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return 0;
 801d978:	2000      	movs	r0, #0
}
 801d97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d97c <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 801d97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d980:	b082      	sub	sp, #8
 801d982:	4606      	mov	r6, r0
 801d984:	4688      	mov	r8, r1
 801d986:	4617      	mov	r7, r2
 801d988:	461d      	mov	r5, r3
 801d98a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 801d98e:	f8d0 9004 	ldr.w	r9, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801d992:	e05d      	b.n	801da50 <jsmn_parse+0xd4>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 801d994:	2c0d      	cmp	r4, #13
 801d996:	d058      	beq.n	801da4a <jsmn_parse+0xce>
 801d998:	d91c      	bls.n	801d9d4 <jsmn_parse+0x58>
 801d99a:	2c20      	cmp	r4, #32
 801d99c:	d055      	beq.n	801da4a <jsmn_parse+0xce>
 801d99e:	2c22      	cmp	r4, #34	; 0x22
 801d9a0:	d11b      	bne.n	801d9da <jsmn_parse+0x5e>
					}
				}
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 801d9a2:	f8cd a000 	str.w	sl, [sp]
 801d9a6:	462b      	mov	r3, r5
 801d9a8:	463a      	mov	r2, r7
 801d9aa:	4641      	mov	r1, r8
 801d9ac:	4630      	mov	r0, r6
 801d9ae:	f7ff fed9 	bl	801d764 <jsmn_parse_string>
				if (r < 0) return r;
 801d9b2:	2800      	cmp	r0, #0
 801d9b4:	f2c0 80d9 	blt.w	801db6a <jsmn_parse+0x1ee>
				count++;
 801d9b8:	f109 0901 	add.w	r9, r9, #1
				if (parser->toksuper != -1 && tokens != NULL)
 801d9bc:	68b3      	ldr	r3, [r6, #8]
 801d9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d9c2:	d042      	beq.n	801da4a <jsmn_parse+0xce>
 801d9c4:	2d00      	cmp	r5, #0
 801d9c6:	d040      	beq.n	801da4a <jsmn_parse+0xce>
					tokens[parser->toksuper].size++;
 801d9c8:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801d9cc:	68da      	ldr	r2, [r3, #12]
 801d9ce:	3201      	adds	r2, #1
 801d9d0:	60da      	str	r2, [r3, #12]
 801d9d2:	e03a      	b.n	801da4a <jsmn_parse+0xce>
		switch (c) {
 801d9d4:	3c09      	subs	r4, #9
 801d9d6:	2c01      	cmp	r4, #1
 801d9d8:	d937      	bls.n	801da4a <jsmn_parse+0xce>
				}
#else
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 801d9da:	f8cd a000 	str.w	sl, [sp]
 801d9de:	462b      	mov	r3, r5
 801d9e0:	463a      	mov	r2, r7
 801d9e2:	4641      	mov	r1, r8
 801d9e4:	4630      	mov	r0, r6
 801d9e6:	f7ff fe7f 	bl	801d6e8 <jsmn_parse_primitive>
				if (r < 0) return r;
 801d9ea:	2800      	cmp	r0, #0
 801d9ec:	f2c0 80bf 	blt.w	801db6e <jsmn_parse+0x1f2>
				count++;
 801d9f0:	f109 0901 	add.w	r9, r9, #1
				if (parser->toksuper != -1 && tokens != NULL)
 801d9f4:	68b3      	ldr	r3, [r6, #8]
 801d9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d9fa:	d026      	beq.n	801da4a <jsmn_parse+0xce>
 801d9fc:	b32d      	cbz	r5, 801da4a <jsmn_parse+0xce>
					tokens[parser->toksuper].size++;
 801d9fe:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801da02:	68da      	ldr	r2, [r3, #12]
 801da04:	3201      	adds	r2, #1
 801da06:	60da      	str	r2, [r3, #12]
 801da08:	e01f      	b.n	801da4a <jsmn_parse+0xce>
		switch (c) {
 801da0a:	2c5b      	cmp	r4, #91	; 0x5b
 801da0c:	d1e5      	bne.n	801d9da <jsmn_parse+0x5e>
				count++;
 801da0e:	f109 0901 	add.w	r9, r9, #1
				if (tokens == NULL) {
 801da12:	b1d5      	cbz	r5, 801da4a <jsmn_parse+0xce>
				token = jsmn_alloc_token(parser, tokens, num_tokens);
 801da14:	4652      	mov	r2, sl
 801da16:	4629      	mov	r1, r5
 801da18:	4630      	mov	r0, r6
 801da1a:	f7ff fe4f 	bl	801d6bc <jsmn_alloc_token>
				if (token == NULL)
 801da1e:	4601      	mov	r1, r0
 801da20:	2800      	cmp	r0, #0
 801da22:	f000 809c 	beq.w	801db5e <jsmn_parse+0x1e2>
				if (parser->toksuper != -1) {
 801da26:	68b3      	ldr	r3, [r6, #8]
 801da28:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da2c:	d004      	beq.n	801da38 <jsmn_parse+0xbc>
					tokens[parser->toksuper].size++;
 801da2e:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801da32:	68da      	ldr	r2, [r3, #12]
 801da34:	3201      	adds	r2, #1
 801da36:	60da      	str	r2, [r3, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 801da38:	2c7b      	cmp	r4, #123	; 0x7b
 801da3a:	d028      	beq.n	801da8e <jsmn_parse+0x112>
 801da3c:	2302      	movs	r3, #2
 801da3e:	700b      	strb	r3, [r1, #0]
				token->start = parser->pos;
 801da40:	6833      	ldr	r3, [r6, #0]
 801da42:	604b      	str	r3, [r1, #4]
				parser->toksuper = parser->toknext - 1;
 801da44:	6873      	ldr	r3, [r6, #4]
 801da46:	3b01      	subs	r3, #1
 801da48:	60b3      	str	r3, [r6, #8]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 801da4a:	6833      	ldr	r3, [r6, #0]
 801da4c:	3301      	adds	r3, #1
 801da4e:	6033      	str	r3, [r6, #0]
 801da50:	6831      	ldr	r1, [r6, #0]
 801da52:	42b9      	cmp	r1, r7
 801da54:	d26c      	bcs.n	801db30 <jsmn_parse+0x1b4>
 801da56:	f818 4001 	ldrb.w	r4, [r8, r1]
 801da5a:	2c00      	cmp	r4, #0
 801da5c:	d068      	beq.n	801db30 <jsmn_parse+0x1b4>
		switch (c) {
 801da5e:	2c2c      	cmp	r4, #44	; 0x2c
 801da60:	d043      	beq.n	801daea <jsmn_parse+0x16e>
 801da62:	d997      	bls.n	801d994 <jsmn_parse+0x18>
 801da64:	2c5d      	cmp	r4, #93	; 0x5d
 801da66:	d00a      	beq.n	801da7e <jsmn_parse+0x102>
 801da68:	d805      	bhi.n	801da76 <jsmn_parse+0xfa>
 801da6a:	2c3a      	cmp	r4, #58	; 0x3a
 801da6c:	d1cd      	bne.n	801da0a <jsmn_parse+0x8e>
				parser->toksuper = parser->toknext - 1;
 801da6e:	6873      	ldr	r3, [r6, #4]
 801da70:	3b01      	subs	r3, #1
 801da72:	60b3      	str	r3, [r6, #8]
				break;
 801da74:	e7e9      	b.n	801da4a <jsmn_parse+0xce>
		switch (c) {
 801da76:	2c7b      	cmp	r4, #123	; 0x7b
 801da78:	d0c9      	beq.n	801da0e <jsmn_parse+0x92>
 801da7a:	2c7d      	cmp	r4, #125	; 0x7d
 801da7c:	d1ad      	bne.n	801d9da <jsmn_parse+0x5e>
				if (tokens == NULL)
 801da7e:	2d00      	cmp	r5, #0
 801da80:	d0e3      	beq.n	801da4a <jsmn_parse+0xce>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 801da82:	2c7d      	cmp	r4, #125	; 0x7d
 801da84:	d005      	beq.n	801da92 <jsmn_parse+0x116>
 801da86:	2402      	movs	r4, #2
				for (i = parser->toknext - 1; i >= 0; i--) {
 801da88:	6873      	ldr	r3, [r6, #4]
 801da8a:	3b01      	subs	r3, #1
 801da8c:	e004      	b.n	801da98 <jsmn_parse+0x11c>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 801da8e:	2301      	movs	r3, #1
 801da90:	e7d5      	b.n	801da3e <jsmn_parse+0xc2>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 801da92:	2401      	movs	r4, #1
 801da94:	e7f8      	b.n	801da88 <jsmn_parse+0x10c>
				for (i = parser->toknext - 1; i >= 0; i--) {
 801da96:	3b01      	subs	r3, #1
 801da98:	2b00      	cmp	r3, #0
 801da9a:	db11      	blt.n	801dac0 <jsmn_parse+0x144>
					token = &tokens[i];
 801da9c:	eb05 1203 	add.w	r2, r5, r3, lsl #4
					if (token->start != -1 && token->end == -1) {
 801daa0:	6850      	ldr	r0, [r2, #4]
 801daa2:	f1b0 3fff 	cmp.w	r0, #4294967295
 801daa6:	d0f6      	beq.n	801da96 <jsmn_parse+0x11a>
 801daa8:	6890      	ldr	r0, [r2, #8]
 801daaa:	f1b0 3fff 	cmp.w	r0, #4294967295
 801daae:	d1f2      	bne.n	801da96 <jsmn_parse+0x11a>
						if (token->type != type) {
 801dab0:	7810      	ldrb	r0, [r2, #0]
 801dab2:	4284      	cmp	r4, r0
 801dab4:	d156      	bne.n	801db64 <jsmn_parse+0x1e8>
						parser->toksuper = -1;
 801dab6:	f04f 30ff 	mov.w	r0, #4294967295
 801daba:	60b0      	str	r0, [r6, #8]
						token->end = parser->pos + 1;
 801dabc:	3101      	adds	r1, #1
 801dabe:	6091      	str	r1, [r2, #8]
				if (i == -1) return JSMN_ERROR_INVAL;
 801dac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dac4:	d103      	bne.n	801dace <jsmn_parse+0x152>
 801dac6:	f06f 0901 	mvn.w	r9, #1
 801daca:	e044      	b.n	801db56 <jsmn_parse+0x1da>
				for (; i >= 0; i--) {
 801dacc:	3b01      	subs	r3, #1
 801dace:	2b00      	cmp	r3, #0
 801dad0:	dbbb      	blt.n	801da4a <jsmn_parse+0xce>
					token = &tokens[i];
 801dad2:	eb05 1203 	add.w	r2, r5, r3, lsl #4
					if (token->start != -1 && token->end == -1) {
 801dad6:	6851      	ldr	r1, [r2, #4]
 801dad8:	f1b1 3fff 	cmp.w	r1, #4294967295
 801dadc:	d0f6      	beq.n	801dacc <jsmn_parse+0x150>
 801dade:	6892      	ldr	r2, [r2, #8]
 801dae0:	f1b2 3fff 	cmp.w	r2, #4294967295
 801dae4:	d1f2      	bne.n	801dacc <jsmn_parse+0x150>
						parser->toksuper = i;
 801dae6:	60b3      	str	r3, [r6, #8]
						break;
 801dae8:	e7af      	b.n	801da4a <jsmn_parse+0xce>
				if (tokens != NULL && parser->toksuper != -1 &&
 801daea:	2d00      	cmp	r5, #0
 801daec:	d0ad      	beq.n	801da4a <jsmn_parse+0xce>
 801daee:	68b3      	ldr	r3, [r6, #8]
 801daf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801daf4:	d0a9      	beq.n	801da4a <jsmn_parse+0xce>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 801daf6:	011b      	lsls	r3, r3, #4
 801daf8:	5ceb      	ldrb	r3, [r5, r3]
				if (tokens != NULL && parser->toksuper != -1 &&
 801dafa:	2b02      	cmp	r3, #2
 801dafc:	d0a5      	beq.n	801da4a <jsmn_parse+0xce>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 801dafe:	2b01      	cmp	r3, #1
 801db00:	d0a3      	beq.n	801da4a <jsmn_parse+0xce>
					for (i = parser->toknext - 1; i >= 0; i--) {
 801db02:	6872      	ldr	r2, [r6, #4]
 801db04:	3a01      	subs	r2, #1
 801db06:	e000      	b.n	801db0a <jsmn_parse+0x18e>
 801db08:	3a01      	subs	r2, #1
 801db0a:	2a00      	cmp	r2, #0
 801db0c:	db9d      	blt.n	801da4a <jsmn_parse+0xce>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 801db0e:	0113      	lsls	r3, r2, #4
 801db10:	18e9      	adds	r1, r5, r3
 801db12:	5ceb      	ldrb	r3, [r5, r3]
 801db14:	3b01      	subs	r3, #1
 801db16:	b2db      	uxtb	r3, r3
 801db18:	2b01      	cmp	r3, #1
 801db1a:	d8f5      	bhi.n	801db08 <jsmn_parse+0x18c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 801db1c:	684b      	ldr	r3, [r1, #4]
 801db1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801db22:	d0f1      	beq.n	801db08 <jsmn_parse+0x18c>
 801db24:	688b      	ldr	r3, [r1, #8]
 801db26:	f1b3 3fff 	cmp.w	r3, #4294967295
 801db2a:	d1ed      	bne.n	801db08 <jsmn_parse+0x18c>
								parser->toksuper = i;
 801db2c:	60b2      	str	r2, [r6, #8]
								break;
 801db2e:	e78c      	b.n	801da4a <jsmn_parse+0xce>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
 801db30:	b18d      	cbz	r5, 801db56 <jsmn_parse+0x1da>
		for (i = parser->toknext - 1; i >= 0; i--) {
 801db32:	6873      	ldr	r3, [r6, #4]
 801db34:	3b01      	subs	r3, #1
 801db36:	e000      	b.n	801db3a <jsmn_parse+0x1be>
 801db38:	3b01      	subs	r3, #1
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	db0b      	blt.n	801db56 <jsmn_parse+0x1da>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 801db3e:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 801db42:	6851      	ldr	r1, [r2, #4]
 801db44:	f1b1 3fff 	cmp.w	r1, #4294967295
 801db48:	d0f6      	beq.n	801db38 <jsmn_parse+0x1bc>
 801db4a:	6892      	ldr	r2, [r2, #8]
 801db4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801db50:	d1f2      	bne.n	801db38 <jsmn_parse+0x1bc>
				return JSMN_ERROR_PART;
 801db52:	f06f 0902 	mvn.w	r9, #2
			}
		}
	}

	return count;
}
 801db56:	4648      	mov	r0, r9
 801db58:	b002      	add	sp, #8
 801db5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					return JSMN_ERROR_NOMEM;
 801db5e:	f04f 39ff 	mov.w	r9, #4294967295
 801db62:	e7f8      	b.n	801db56 <jsmn_parse+0x1da>
							return JSMN_ERROR_INVAL;
 801db64:	f06f 0901 	mvn.w	r9, #1
 801db68:	e7f5      	b.n	801db56 <jsmn_parse+0x1da>
				if (r < 0) return r;
 801db6a:	4681      	mov	r9, r0
 801db6c:	e7f3      	b.n	801db56 <jsmn_parse+0x1da>
				if (r < 0) return r;
 801db6e:	4681      	mov	r9, r0
 801db70:	e7f1      	b.n	801db56 <jsmn_parse+0x1da>

0801db72 <jsmn_init>:
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 801db72:	2300      	movs	r3, #0
 801db74:	6003      	str	r3, [r0, #0]
	parser->toknext = 0;
 801db76:	6043      	str	r3, [r0, #4]
	parser->toksuper = -1;
 801db78:	f04f 33ff 	mov.w	r3, #4294967295
 801db7c:	6083      	str	r3, [r0, #8]
 801db7e:	4770      	bx	lr

0801db80 <GetJSONData>:
/* ------------------- */

/* ---------- FUNCTIONS ------------ */
/* -------||--||--||--||--||-------- */
/* -------\/--\/--\/--\/--\/-------- */
uint GetJSONData(uint8_t *pstr) {
 801db80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db84:	4605      	mov	r5, r0
	uint size = 0;
	memcpy(pstr, "{\"addr_IP\":\"", 12);
 801db86:	4b5c      	ldr	r3, [pc, #368]	; (801dcf8 <GetJSONData+0x178>)
 801db88:	cb07      	ldmia	r3!, {r0, r1, r2}
 801db8a:	6028      	str	r0, [r5, #0]
 801db8c:	6069      	str	r1, [r5, #4]
 801db8e:	60aa      	str	r2, [r5, #8]
	size += 12;
	uint8_t tmp = strlen((const char *) hjsondata.ip_addr);
 801db90:	4e5a      	ldr	r6, [pc, #360]	; (801dcfc <GetJSONData+0x17c>)
 801db92:	4630      	mov	r0, r6
 801db94:	f7f2 fa5e 	bl	8010054 <strlen>
 801db98:	b2c4      	uxtb	r4, r0
	memcpy(pstr + size, hjsondata.ip_addr, tmp);
 801db9a:	4622      	mov	r2, r4
 801db9c:	4631      	mov	r1, r6
 801db9e:	f105 000c 	add.w	r0, r5, #12
 801dba2:	f001 ff5a 	bl	801fa5a <memcpy>
	size += tmp;
 801dba6:	f104 070c 	add.w	r7, r4, #12
	memcpy(pstr + size, "\",\"mask\":\"", 10);
 801dbaa:	19ea      	adds	r2, r5, r7
 801dbac:	4b54      	ldr	r3, [pc, #336]	; (801dd00 <GetJSONData+0x180>)
 801dbae:	cb03      	ldmia	r3!, {r0, r1}
 801dbb0:	51e8      	str	r0, [r5, r7]
 801dbb2:	6051      	str	r1, [r2, #4]
 801dbb4:	881b      	ldrh	r3, [r3, #0]
 801dbb6:	8113      	strh	r3, [r2, #8]
	size += 10;
 801dbb8:	3416      	adds	r4, #22
	tmp = strlen((const char *) hjsondata.mask);
 801dbba:	f106 0810 	add.w	r8, r6, #16
 801dbbe:	4640      	mov	r0, r8
 801dbc0:	f7f2 fa48 	bl	8010054 <strlen>
 801dbc4:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, hjsondata.mask, tmp);
 801dbc6:	463a      	mov	r2, r7
 801dbc8:	4641      	mov	r1, r8
 801dbca:	1928      	adds	r0, r5, r4
 801dbcc:	f001 ff45 	bl	801fa5a <memcpy>
	size += tmp;
 801dbd0:	19e3      	adds	r3, r4, r7
	memcpy(pstr + size, "\",\"gate\":\"", 10);
 801dbd2:	18ec      	adds	r4, r5, r3
 801dbd4:	4a4b      	ldr	r2, [pc, #300]	; (801dd04 <GetJSONData+0x184>)
 801dbd6:	ca03      	ldmia	r2!, {r0, r1}
 801dbd8:	50e8      	str	r0, [r5, r3]
 801dbda:	6061      	str	r1, [r4, #4]
 801dbdc:	8812      	ldrh	r2, [r2, #0]
 801dbde:	8122      	strh	r2, [r4, #8]
	size += 10;
 801dbe0:	f103 040a 	add.w	r4, r3, #10
	tmp = strlen((const char *) hjsondata.gate);
 801dbe4:	f106 0820 	add.w	r8, r6, #32
 801dbe8:	4640      	mov	r0, r8
 801dbea:	f7f2 fa33 	bl	8010054 <strlen>
 801dbee:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, hjsondata.gate, tmp);
 801dbf0:	463a      	mov	r2, r7
 801dbf2:	4641      	mov	r1, r8
 801dbf4:	1928      	adds	r0, r5, r4
 801dbf6:	f001 ff30 	bl	801fa5a <memcpy>
	size += tmp;
 801dbfa:	19e3      	adds	r3, r4, r7
	memcpy(pstr + size, "\",\"port\":", 9);
 801dbfc:	18ec      	adds	r4, r5, r3
 801dbfe:	4a42      	ldr	r2, [pc, #264]	; (801dd08 <GetJSONData+0x188>)
 801dc00:	ca03      	ldmia	r2!, {r0, r1}
 801dc02:	50e8      	str	r0, [r5, r3]
 801dc04:	6061      	str	r1, [r4, #4]
 801dc06:	7812      	ldrb	r2, [r2, #0]
 801dc08:	7222      	strb	r2, [r4, #8]
	size += 9;
 801dc0a:	f103 0409 	add.w	r4, r3, #9
	itoa(hjsondata.port, (char *) pstr + size, 10);
 801dc0e:	192f      	adds	r7, r5, r4
 801dc10:	220a      	movs	r2, #10
 801dc12:	4639      	mov	r1, r7
 801dc14:	8e30      	ldrh	r0, [r6, #48]	; 0x30
 801dc16:	f001 ff0f 	bl	801fa38 <itoa>
	size += strlen((const char *) pstr + size);
 801dc1a:	4638      	mov	r0, r7
 801dc1c:	f7f2 fa1a 	bl	8010054 <strlen>
 801dc20:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"speed\":", 9);
 801dc22:	18ec      	adds	r4, r5, r3
 801dc24:	4a39      	ldr	r2, [pc, #228]	; (801dd0c <GetJSONData+0x18c>)
 801dc26:	ca03      	ldmia	r2!, {r0, r1}
 801dc28:	50e8      	str	r0, [r5, r3]
 801dc2a:	6061      	str	r1, [r4, #4]
 801dc2c:	7812      	ldrb	r2, [r2, #0]
 801dc2e:	7222      	strb	r2, [r4, #8]
	size += 9;
 801dc30:	f103 0409 	add.w	r4, r3, #9
	itoa(hjsondata.speed, ((char *) pstr + size), 10);
 801dc34:	192f      	adds	r7, r5, r4
 801dc36:	220a      	movs	r2, #10
 801dc38:	4639      	mov	r1, r7
 801dc3a:	6b70      	ldr	r0, [r6, #52]	; 0x34
 801dc3c:	f001 fefc 	bl	801fa38 <itoa>
	size += strlen((const char *) pstr + size);
 801dc40:	4638      	mov	r0, r7
 801dc42:	f7f2 fa07 	bl	8010054 <strlen>
 801dc46:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"addr_own\":", 12);
 801dc48:	18ef      	adds	r7, r5, r3
 801dc4a:	4c31      	ldr	r4, [pc, #196]	; (801dd10 <GetJSONData+0x190>)
 801dc4c:	cc07      	ldmia	r4!, {r0, r1, r2}
 801dc4e:	50e8      	str	r0, [r5, r3]
 801dc50:	6079      	str	r1, [r7, #4]
 801dc52:	60ba      	str	r2, [r7, #8]
	size += 12;
 801dc54:	f103 040c 	add.w	r4, r3, #12
	itoa(hjsondata.own_addr, (char *) pstr + size, 10);
 801dc58:	192f      	adds	r7, r5, r4
 801dc5a:	220a      	movs	r2, #10
 801dc5c:	4639      	mov	r1, r7
 801dc5e:	f896 0038 	ldrb.w	r0, [r6, #56]	; 0x38
 801dc62:	f001 fee9 	bl	801fa38 <itoa>
	size += strlen((const char *) pstr + size);
 801dc66:	4638      	mov	r0, r7
 801dc68:	f7f2 f9f4 	bl	8010054 <strlen>
 801dc6c:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"ver\":\"", 8);
 801dc6e:	18ec      	adds	r4, r5, r3
 801dc70:	4a28      	ldr	r2, [pc, #160]	; (801dd14 <GetJSONData+0x194>)
 801dc72:	ca03      	ldmia	r2!, {r0, r1}
 801dc74:	50e8      	str	r0, [r5, r3]
 801dc76:	6061      	str	r1, [r4, #4]
	size += 8;
 801dc78:	f103 0408 	add.w	r4, r3, #8
	tmp = strlen((const char *) hjsondata.ver);
 801dc7c:	f106 0839 	add.w	r8, r6, #57	; 0x39
 801dc80:	4640      	mov	r0, r8
 801dc82:	f7f2 f9e7 	bl	8010054 <strlen>
 801dc86:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, (const char *) hjsondata.ver, tmp);
 801dc88:	463a      	mov	r2, r7
 801dc8a:	4641      	mov	r1, r8
 801dc8c:	1928      	adds	r0, r5, r4
 801dc8e:	f001 fee4 	bl	801fa5a <memcpy>
	size += tmp;
 801dc92:	19e3      	adds	r3, r4, r7
	memcpy(pstr + size, "\",\"sn\":", 7);
 801dc94:	18e9      	adds	r1, r5, r3
 801dc96:	4a20      	ldr	r2, [pc, #128]	; (801dd18 <GetJSONData+0x198>)
 801dc98:	6810      	ldr	r0, [r2, #0]
 801dc9a:	50e8      	str	r0, [r5, r3]
 801dc9c:	8890      	ldrh	r0, [r2, #4]
 801dc9e:	7992      	ldrb	r2, [r2, #6]
 801dca0:	8088      	strh	r0, [r1, #4]
 801dca2:	718a      	strb	r2, [r1, #6]
	size += 7;
 801dca4:	1ddc      	adds	r4, r3, #7
	itoa(hjsondata.serial_num, (char *) (pstr + size), 10);
 801dca6:	192f      	adds	r7, r5, r4
 801dca8:	220a      	movs	r2, #10
 801dcaa:	4639      	mov	r1, r7
 801dcac:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 801dcae:	f001 fec3 	bl	801fa38 <itoa>
	size += strlen((const char *) pstr + size);
 801dcb2:	4638      	mov	r0, r7
 801dcb4:	f7f2 f9ce 	bl	8010054 <strlen>
 801dcb8:	1823      	adds	r3, r4, r0
	memcpy(pstr + size, ",\"addr_MAC\":\"", 13);
 801dcba:	18ef      	adds	r7, r5, r3
 801dcbc:	4c17      	ldr	r4, [pc, #92]	; (801dd1c <GetJSONData+0x19c>)
 801dcbe:	cc07      	ldmia	r4!, {r0, r1, r2}
 801dcc0:	50e8      	str	r0, [r5, r3]
 801dcc2:	6079      	str	r1, [r7, #4]
 801dcc4:	60ba      	str	r2, [r7, #8]
 801dcc6:	7822      	ldrb	r2, [r4, #0]
 801dcc8:	733a      	strb	r2, [r7, #12]
	size += 13;
 801dcca:	f103 040d 	add.w	r4, r3, #13
	tmp = strlen((const char *) hjsondata.mac_addr);
 801dcce:	364c      	adds	r6, #76	; 0x4c
 801dcd0:	4630      	mov	r0, r6
 801dcd2:	f7f2 f9bf 	bl	8010054 <strlen>
 801dcd6:	b2c7      	uxtb	r7, r0
	memcpy(pstr + size, hjsondata.mac_addr, tmp);
 801dcd8:	463a      	mov	r2, r7
 801dcda:	4631      	mov	r1, r6
 801dcdc:	1928      	adds	r0, r5, r4
 801dcde:	f001 febc 	bl	801fa5a <memcpy>
	size += tmp;
 801dce2:	19e0      	adds	r0, r4, r7
	memcpy(pstr + size, "\"}\0", 3);
 801dce4:	182a      	adds	r2, r5, r0
 801dce6:	4b0e      	ldr	r3, [pc, #56]	; (801dd20 <GetJSONData+0x1a0>)
 801dce8:	8819      	ldrh	r1, [r3, #0]
 801dcea:	789b      	ldrb	r3, [r3, #2]
 801dcec:	5229      	strh	r1, [r5, r0]
 801dcee:	7093      	strb	r3, [r2, #2]
	size += 3;
	return size;
}
 801dcf0:	3003      	adds	r0, #3
 801dcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcf6:	bf00      	nop
 801dcf8:	080249a0 	.word	0x080249a0
 801dcfc:	20011dfc 	.word	0x20011dfc
 801dd00:	080249b0 	.word	0x080249b0
 801dd04:	080249bc 	.word	0x080249bc
 801dd08:	080249c8 	.word	0x080249c8
 801dd0c:	080249d4 	.word	0x080249d4
 801dd10:	080249e0 	.word	0x080249e0
 801dd14:	080249f0 	.word	0x080249f0
 801dd18:	080249fc 	.word	0x080249fc
 801dd1c:	08024a04 	.word	0x08024a04
 801dd20:	0801fd38 	.word	0x0801fd38

0801dd24 <FlashToJSON>:

void FlashToJSON(json_data_t *js, flash_data_t *fs) {
 801dd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd28:	4604      	mov	r4, r0
 801dd2a:	460f      	mov	r7, r1

	js->speed = fs->speed;
 801dd2c:	680b      	ldr	r3, [r1, #0]
 801dd2e:	6343      	str	r3, [r0, #52]	; 0x34
	js->port = fs->port;
 801dd30:	8a4b      	ldrh	r3, [r1, #18]
 801dd32:	8603      	strh	r3, [r0, #48]	; 0x30
	js->own_addr = fs->own_addr;
 801dd34:	888b      	ldrh	r3, [r1, #4]
 801dd36:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	js->serial_num = fs->serial_num;
 801dd3a:	694b      	ldr	r3, [r1, #20]
 801dd3c:	6483      	str	r3, [r0, #72]	; 0x48
	uint len = 0;

	for (int i = 0; i < 4; i++) {
 801dd3e:	2600      	movs	r6, #0
	uint len = 0;
 801dd40:	4635      	mov	r5, r6
	for (int i = 0; i < 4; i++) {
 801dd42:	e00f      	b.n	801dd64 <FlashToJSON+0x40>
		itoa(fs->IP_addr[i], (char*) &js->ip_addr[len], 10);
 801dd44:	19bb      	adds	r3, r7, r6
 801dd46:	eb04 0805 	add.w	r8, r4, r5
 801dd4a:	220a      	movs	r2, #10
 801dd4c:	4641      	mov	r1, r8
 801dd4e:	7998      	ldrb	r0, [r3, #6]
 801dd50:	f001 fe72 	bl	801fa38 <itoa>
		len += strlen((char*) &js->ip_addr[len]);
 801dd54:	4640      	mov	r0, r8
 801dd56:	f7f2 f97d 	bl	8010054 <strlen>
 801dd5a:	4405      	add	r5, r0
		js->ip_addr[len] = '.';
 801dd5c:	232e      	movs	r3, #46	; 0x2e
 801dd5e:	5563      	strb	r3, [r4, r5]
		len++;
 801dd60:	3501      	adds	r5, #1
	for (int i = 0; i < 4; i++) {
 801dd62:	3601      	adds	r6, #1
 801dd64:	2e03      	cmp	r6, #3
 801dd66:	dded      	ble.n	801dd44 <FlashToJSON+0x20>
	}
	js->ip_addr[--len] = '\0';
 801dd68:	1960      	adds	r0, r4, r5
 801dd6a:	2500      	movs	r5, #0
 801dd6c:	f800 5c01 	strb.w	r5, [r0, #-1]

	len = 0;
	for (int i = 0; i < 4; i++) {
 801dd70:	46a8      	mov	r8, r5
 801dd72:	e014      	b.n	801dd9e <FlashToJSON+0x7a>
		itoa(fs->gate[i], (char*) &js->gate[len], 10);
 801dd74:	eb07 0308 	add.w	r3, r7, r8
 801dd78:	f105 0620 	add.w	r6, r5, #32
 801dd7c:	4426      	add	r6, r4
 801dd7e:	220a      	movs	r2, #10
 801dd80:	4631      	mov	r1, r6
 801dd82:	7b98      	ldrb	r0, [r3, #14]
 801dd84:	f001 fe58 	bl	801fa38 <itoa>
		len += strlen((char*) &js->gate[len]);
 801dd88:	4630      	mov	r0, r6
 801dd8a:	f7f2 f963 	bl	8010054 <strlen>
 801dd8e:	4405      	add	r5, r0
		js->gate[len] = '.';
 801dd90:	1963      	adds	r3, r4, r5
 801dd92:	222e      	movs	r2, #46	; 0x2e
 801dd94:	f883 2020 	strb.w	r2, [r3, #32]
		len++;
 801dd98:	3501      	adds	r5, #1
	for (int i = 0; i < 4; i++) {
 801dd9a:	f108 0801 	add.w	r8, r8, #1
 801dd9e:	f1b8 0f03 	cmp.w	r8, #3
 801dda2:	dde7      	ble.n	801dd74 <FlashToJSON+0x50>
	}
	js->gate[--len] = '\0';
 801dda4:	1960      	adds	r0, r4, r5
 801dda6:	2500      	movs	r5, #0
 801dda8:	77c5      	strb	r5, [r0, #31]

	len = 0;
	for (int i = 0; i < 4; i++) {
 801ddaa:	46a8      	mov	r8, r5
 801ddac:	e013      	b.n	801ddd6 <FlashToJSON+0xb2>
		itoa(fs->mask[i], (char*) &js->mask[len], 10);
 801ddae:	eb07 0308 	add.w	r3, r7, r8
 801ddb2:	f105 0610 	add.w	r6, r5, #16
 801ddb6:	4426      	add	r6, r4
 801ddb8:	220a      	movs	r2, #10
 801ddba:	4631      	mov	r1, r6
 801ddbc:	7a98      	ldrb	r0, [r3, #10]
 801ddbe:	f001 fe3b 	bl	801fa38 <itoa>
		len += strlen((char*) &js->mask[len]);
 801ddc2:	4630      	mov	r0, r6
 801ddc4:	f7f2 f946 	bl	8010054 <strlen>
 801ddc8:	4405      	add	r5, r0
		js->mask[len] = '.';
 801ddca:	1963      	adds	r3, r4, r5
 801ddcc:	222e      	movs	r2, #46	; 0x2e
 801ddce:	741a      	strb	r2, [r3, #16]
		len++;
 801ddd0:	3501      	adds	r5, #1
	for (int i = 0; i < 4; i++) {
 801ddd2:	f108 0801 	add.w	r8, r8, #1
 801ddd6:	f1b8 0f03 	cmp.w	r8, #3
 801ddda:	dde8      	ble.n	801ddae <FlashToJSON+0x8a>
	}
	js->mask[--len] = '\0';
 801dddc:	1960      	adds	r0, r4, r5
 801ddde:	2500      	movs	r5, #0
 801dde0:	73c5      	strb	r5, [r0, #15]

	len = 0;
	for (int i = 0; i < 6; i++) {
 801dde2:	46a8      	mov	r8, r5
 801dde4:	e015      	b.n	801de12 <FlashToJSON+0xee>
		itoa(fs->mac_addr[i], (char*) &js->mac_addr[len], 16);
 801dde6:	eb07 0308 	add.w	r3, r7, r8
 801ddea:	f105 0648 	add.w	r6, r5, #72	; 0x48
 801ddee:	4426      	add	r6, r4
 801ddf0:	3604      	adds	r6, #4
 801ddf2:	2210      	movs	r2, #16
 801ddf4:	4631      	mov	r1, r6
 801ddf6:	7f98      	ldrb	r0, [r3, #30]
 801ddf8:	f001 fe1e 	bl	801fa38 <itoa>
		len += strlen((char*) &js->mac_addr[len]);
 801ddfc:	4630      	mov	r0, r6
 801ddfe:	f7f2 f929 	bl	8010054 <strlen>
 801de02:	4405      	add	r5, r0
		js->mac_addr[len] = '-';
 801de04:	1963      	adds	r3, r4, r5
 801de06:	222d      	movs	r2, #45	; 0x2d
 801de08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		len++;
 801de0c:	3501      	adds	r5, #1
	for (int i = 0; i < 6; i++) {
 801de0e:	f108 0801 	add.w	r8, r8, #1
 801de12:	f1b8 0f05 	cmp.w	r8, #5
 801de16:	dde6      	ble.n	801dde6 <FlashToJSON+0xc2>
	}
	js->mac_addr[--len] = '\0';
 801de18:	4425      	add	r5, r4
 801de1a:	2000      	movs	r0, #0
 801de1c:	f885 004b 	strb.w	r0, [r5, #75]	; 0x4b

	len = 0;
	for (int i = 0; i < 3; i++) {
 801de20:	4680      	mov	r8, r0
	len = 0;
 801de22:	4605      	mov	r5, r0
	for (int i = 0; i < 3; i++) {
 801de24:	e016      	b.n	801de54 <FlashToJSON+0x130>
		itoa(fs->ver[i], (char*) &js->ver[len], 10);
 801de26:	f108 030c 	add.w	r3, r8, #12
 801de2a:	f105 0638 	add.w	r6, r5, #56	; 0x38
 801de2e:	4426      	add	r6, r4
 801de30:	3601      	adds	r6, #1
 801de32:	220a      	movs	r2, #10
 801de34:	4631      	mov	r1, r6
 801de36:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 801de3a:	f001 fdfd 	bl	801fa38 <itoa>
		len += strlen((char*) &js->ver[len]);
 801de3e:	4630      	mov	r0, r6
 801de40:	f7f2 f908 	bl	8010054 <strlen>
 801de44:	4405      	add	r5, r0
		js->ver[len] = '.';
 801de46:	1963      	adds	r3, r4, r5
 801de48:	222e      	movs	r2, #46	; 0x2e
 801de4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		len++;
 801de4e:	3501      	adds	r5, #1
	for (int i = 0; i < 3; i++) {
 801de50:	f108 0801 	add.w	r8, r8, #1
 801de54:	f1b8 0f02 	cmp.w	r8, #2
 801de58:	dde5      	ble.n	801de26 <FlashToJSON+0x102>
	}
	js->ver[--len] = '\0';
 801de5a:	442c      	add	r4, r5
 801de5c:	2300      	movs	r3, #0
 801de5e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801de62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801de66 <DecodeURL>:
}

void DecodeURL(uint8_t *buf, uint8_t *result) {
	while (*buf != '\r') {
 801de66:	e00a      	b.n	801de7e <DecodeURL+0x18>
		if (*buf == '%') {
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'B')) {
 801de68:	7843      	ldrb	r3, [r0, #1]
 801de6a:	2b37      	cmp	r3, #55	; 0x37
 801de6c:	d00e      	beq.n	801de8c <DecodeURL+0x26>
				*result = '{';
				buf += 2;
			}
			if ((*(buf + 1) == '2') && (*(buf + 2) == '2')) {
 801de6e:	7843      	ldrb	r3, [r0, #1]
 801de70:	2b32      	cmp	r3, #50	; 0x32
 801de72:	d012      	beq.n	801de9a <DecodeURL+0x34>
				*result = '\"';
				buf += 2;
			}
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'D')) {
 801de74:	7843      	ldrb	r3, [r0, #1]
 801de76:	2b37      	cmp	r3, #55	; 0x37
 801de78:	d016      	beq.n	801dea8 <DecodeURL+0x42>
				break;
			}
		} else {
			*result = *buf;
		}
		buf++;
 801de7a:	3001      	adds	r0, #1
		result++;
 801de7c:	3101      	adds	r1, #1
	while (*buf != '\r') {
 801de7e:	7803      	ldrb	r3, [r0, #0]
 801de80:	2b0d      	cmp	r3, #13
 801de82:	d019      	beq.n	801deb8 <DecodeURL+0x52>
		if (*buf == '%') {
 801de84:	2b25      	cmp	r3, #37	; 0x25
 801de86:	d0ef      	beq.n	801de68 <DecodeURL+0x2>
			*result = *buf;
 801de88:	700b      	strb	r3, [r1, #0]
 801de8a:	e7f6      	b.n	801de7a <DecodeURL+0x14>
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'B')) {
 801de8c:	7883      	ldrb	r3, [r0, #2]
 801de8e:	2b42      	cmp	r3, #66	; 0x42
 801de90:	d1ed      	bne.n	801de6e <DecodeURL+0x8>
				*result = '{';
 801de92:	237b      	movs	r3, #123	; 0x7b
 801de94:	700b      	strb	r3, [r1, #0]
				buf += 2;
 801de96:	3002      	adds	r0, #2
 801de98:	e7e9      	b.n	801de6e <DecodeURL+0x8>
			if ((*(buf + 1) == '2') && (*(buf + 2) == '2')) {
 801de9a:	7883      	ldrb	r3, [r0, #2]
 801de9c:	2b32      	cmp	r3, #50	; 0x32
 801de9e:	d1e9      	bne.n	801de74 <DecodeURL+0xe>
				*result = '\"';
 801dea0:	2322      	movs	r3, #34	; 0x22
 801dea2:	700b      	strb	r3, [r1, #0]
				buf += 2;
 801dea4:	3002      	adds	r0, #2
 801dea6:	e7e5      	b.n	801de74 <DecodeURL+0xe>
			if ((*(buf + 1) == '7') && (*(buf + 2) == 'D')) {
 801dea8:	7883      	ldrb	r3, [r0, #2]
 801deaa:	2b44      	cmp	r3, #68	; 0x44
 801deac:	d1e5      	bne.n	801de7a <DecodeURL+0x14>
				*result = '}';
 801deae:	237d      	movs	r3, #125	; 0x7d
 801deb0:	700b      	strb	r3, [r1, #0]
				*(result+1) = '\0';
 801deb2:	2300      	movs	r3, #0
 801deb4:	704b      	strb	r3, [r1, #1]
				break;
 801deb6:	4770      	bx	lr
 801deb8:	4770      	bx	lr
	...

0801debc <ParseJSON>:
	}
}

void ParseJSON(json_data_t *js, uint8_t *json_str) {
 801debc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dec0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801dec4:	4680      	mov	r8, r0
 801dec6:	460f      	mov	r7, r1
	int resultCode;
	jsmn_parser p;
	jsmntok_t tokens[MAXNUMBER_OF_TOKENS];
	jsmn_init(&p);
 801dec8:	a895      	add	r0, sp, #596	; 0x254
 801deca:	f7ff fe52 	bl	801db72 <jsmn_init>
	resultCode = jsmn_parse(&p, (char*) json_str, strlen((char*) json_str),
 801dece:	4638      	mov	r0, r7
 801ded0:	f7f2 f8c0 	bl	8010054 <strlen>
 801ded4:	2320      	movs	r3, #32
 801ded6:	9300      	str	r3, [sp, #0]
 801ded8:	ab15      	add	r3, sp, #84	; 0x54
 801deda:	4602      	mov	r2, r0
 801dedc:	4639      	mov	r1, r7
 801dede:	a895      	add	r0, sp, #596	; 0x254
 801dee0:	f7ff fd4c 	bl	801d97c <jsmn_parse>
			tokens, sizeof(tokens) / sizeof(tokens[0]));

	if (resultCode > 0) {
 801dee4:	1e06      	subs	r6, r0, #0
 801dee6:	dd7d      	ble.n	801dfe4 <ParseJSON+0x128>
 801dee8:	2501      	movs	r5, #1
 801deea:	e008      	b.n	801defe <ParseJSON+0x42>
				/*
				 {\"addr_IP\":\"192.168.4.255\",\"mask\":\"255.255.255.000\",\"gate\":\"192.168.4.1\",\"port\":102,\"speed\":187500,
				 \"addr_own\":1,\"ver\":\"0.0.0\",\"sn\":0,\"addr_MAC\":\"AA-BB-CC-DD-EE-FF\"}
				 */
				if (strcmp((char*) Prev_keyString, "addr_IP") == 0) {
					strcpy((char*) js->ip_addr, (char*) keyString);
 801deec:	a907      	add	r1, sp, #28
 801deee:	4640      	mov	r0, r8
 801def0:	f001 fdc6 	bl	801fa80 <strcpy>
						js->serial_num = (uint8_t) atoi((char*) keyString);
					}
				} else if (strcmp((char*) Prev_keyString, "addr_MAC") == 0) {
					strcpy((char*) js->mac_addr, (char*) keyString);
				}
				strcpy((char*) Prev_keyString, (char*) keyString);
 801def4:	a907      	add	r1, sp, #28
 801def6:	a80e      	add	r0, sp, #56	; 0x38
 801def8:	f001 fdc2 	bl	801fa80 <strcpy>
		for (int i = 1; i <= resultCode - 1; i++) // resultCode == 0 => whole json string
 801defc:	3501      	adds	r5, #1
 801defe:	1e73      	subs	r3, r6, #1
 801df00:	429d      	cmp	r5, r3
 801df02:	dc6f      	bgt.n	801dfe4 <ParseJSON+0x128>
			jsmntok_t key = tokens[i];
 801df04:	ac03      	add	r4, sp, #12
 801df06:	ab15      	add	r3, sp, #84	; 0x54
 801df08:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 801df0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801df0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			uint16_t length = key.end - key.start;
 801df12:	b292      	uxth	r2, r2
 801df14:	b28c      	uxth	r4, r1
 801df16:	1b12      	subs	r2, r2, r4
 801df18:	b294      	uxth	r4, r2
			if (length < MAX_TOKEN_LENGTH) {
 801df1a:	2c18      	cmp	r4, #24
 801df1c:	d8ee      	bhi.n	801defc <ParseJSON+0x40>
				memcpy(keyString, &json_str[key.start], length);
 801df1e:	f10d 091c 	add.w	r9, sp, #28
 801df22:	4622      	mov	r2, r4
 801df24:	4439      	add	r1, r7
 801df26:	4648      	mov	r0, r9
 801df28:	f001 fd97 	bl	801fa5a <memcpy>
				keyString[length] = '\0';
 801df2c:	2300      	movs	r3, #0
 801df2e:	f809 3004 	strb.w	r3, [r9, r4]
				if (strcmp((char*) Prev_keyString, "addr_IP") == 0) {
 801df32:	492e      	ldr	r1, [pc, #184]	; (801dfec <ParseJSON+0x130>)
 801df34:	a80e      	add	r0, sp, #56	; 0x38
 801df36:	f7f2 f883 	bl	8010040 <strcmp>
 801df3a:	2800      	cmp	r0, #0
 801df3c:	d0d6      	beq.n	801deec <ParseJSON+0x30>
				} else if (strcmp((char*) Prev_keyString, "mask") == 0) {
 801df3e:	492c      	ldr	r1, [pc, #176]	; (801dff0 <ParseJSON+0x134>)
 801df40:	a80e      	add	r0, sp, #56	; 0x38
 801df42:	f7f2 f87d 	bl	8010040 <strcmp>
 801df46:	b318      	cbz	r0, 801df90 <ParseJSON+0xd4>
				} else if (strcmp((char*) Prev_keyString, "gate") == 0) {
 801df48:	492a      	ldr	r1, [pc, #168]	; (801dff4 <ParseJSON+0x138>)
 801df4a:	a80e      	add	r0, sp, #56	; 0x38
 801df4c:	f7f2 f878 	bl	8010040 <strcmp>
 801df50:	b320      	cbz	r0, 801df9c <ParseJSON+0xe0>
				} else if (strcmp((char*) Prev_keyString, "port") == 0) {
 801df52:	4929      	ldr	r1, [pc, #164]	; (801dff8 <ParseJSON+0x13c>)
 801df54:	a80e      	add	r0, sp, #56	; 0x38
 801df56:	f7f2 f873 	bl	8010040 <strcmp>
 801df5a:	b328      	cbz	r0, 801dfa8 <ParseJSON+0xec>
				} else if (strcmp((char*) Prev_keyString, "speed") == 0) {
 801df5c:	4927      	ldr	r1, [pc, #156]	; (801dffc <ParseJSON+0x140>)
 801df5e:	a80e      	add	r0, sp, #56	; 0x38
 801df60:	f7f2 f86e 	bl	8010040 <strcmp>
 801df64:	b330      	cbz	r0, 801dfb4 <ParseJSON+0xf8>
				} else if (strcmp((char*) Prev_keyString, "addr_own") == 0) {
 801df66:	4926      	ldr	r1, [pc, #152]	; (801e000 <ParseJSON+0x144>)
 801df68:	a80e      	add	r0, sp, #56	; 0x38
 801df6a:	f7f2 f869 	bl	8010040 <strcmp>
 801df6e:	b338      	cbz	r0, 801dfc0 <ParseJSON+0x104>
				} else if (strcmp((char*) Prev_keyString, "sn") == 0) {
 801df70:	4924      	ldr	r1, [pc, #144]	; (801e004 <ParseJSON+0x148>)
 801df72:	a80e      	add	r0, sp, #56	; 0x38
 801df74:	f7f2 f864 	bl	8010040 <strcmp>
 801df78:	bb40      	cbnz	r0, 801dfcc <ParseJSON+0x110>
					if (js->serial_num
 801df7a:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 801df7e:	2b01      	cmp	r3, #1
 801df80:	d1b8      	bne.n	801def4 <ParseJSON+0x38>
						js->serial_num = (uint8_t) atoi((char*) keyString);
 801df82:	a807      	add	r0, sp, #28
 801df84:	f001 fd17 	bl	801f9b6 <atoi>
 801df88:	b2c0      	uxtb	r0, r0
 801df8a:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
 801df8e:	e7b1      	b.n	801def4 <ParseJSON+0x38>
					strcpy((char*) js->mask, (char*) keyString);
 801df90:	a907      	add	r1, sp, #28
 801df92:	f108 0010 	add.w	r0, r8, #16
 801df96:	f001 fd73 	bl	801fa80 <strcpy>
 801df9a:	e7ab      	b.n	801def4 <ParseJSON+0x38>
					strcpy((char*) js->gate, (char*) keyString);
 801df9c:	a907      	add	r1, sp, #28
 801df9e:	f108 0020 	add.w	r0, r8, #32
 801dfa2:	f001 fd6d 	bl	801fa80 <strcpy>
 801dfa6:	e7a5      	b.n	801def4 <ParseJSON+0x38>
					js->port = (uint16_t) atoi((char*) keyString);
 801dfa8:	a807      	add	r0, sp, #28
 801dfaa:	f001 fd04 	bl	801f9b6 <atoi>
 801dfae:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
 801dfb2:	e79f      	b.n	801def4 <ParseJSON+0x38>
					js->speed = (uint32_t) atoi((char*) keyString);
 801dfb4:	a807      	add	r0, sp, #28
 801dfb6:	f001 fcfe 	bl	801f9b6 <atoi>
 801dfba:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 801dfbe:	e799      	b.n	801def4 <ParseJSON+0x38>
					js->own_addr = (uint8_t) atoi((char*) keyString);
 801dfc0:	a807      	add	r0, sp, #28
 801dfc2:	f001 fcf8 	bl	801f9b6 <atoi>
 801dfc6:	f888 0038 	strb.w	r0, [r8, #56]	; 0x38
 801dfca:	e793      	b.n	801def4 <ParseJSON+0x38>
				} else if (strcmp((char*) Prev_keyString, "addr_MAC") == 0) {
 801dfcc:	490e      	ldr	r1, [pc, #56]	; (801e008 <ParseJSON+0x14c>)
 801dfce:	a80e      	add	r0, sp, #56	; 0x38
 801dfd0:	f7f2 f836 	bl	8010040 <strcmp>
 801dfd4:	2800      	cmp	r0, #0
 801dfd6:	d18d      	bne.n	801def4 <ParseJSON+0x38>
					strcpy((char*) js->mac_addr, (char*) keyString);
 801dfd8:	a907      	add	r1, sp, #28
 801dfda:	f108 004c 	add.w	r0, r8, #76	; 0x4c
 801dfde:	f001 fd4f 	bl	801fa80 <strcpy>
 801dfe2:	e787      	b.n	801def4 <ParseJSON+0x38>
			}
		}
	}

}
 801dfe4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801dfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dfec:	08024a14 	.word	0x08024a14
 801dff0:	08024a1c 	.word	0x08024a1c
 801dff4:	08024a24 	.word	0x08024a24
 801dff8:	08024a2c 	.word	0x08024a2c
 801dffc:	08024a34 	.word	0x08024a34
 801e000:	08024a3c 	.word	0x08024a3c
 801e004:	08024a48 	.word	0x08024a48
 801e008:	08024a4c 	.word	0x08024a4c

0801e00c <LogInit>:
static char* txt_lev[NUM_LOG_LEV - 1] = { "OFF", "ERR", "WAR", "INF", };

static char* txt_sys[NUM_OF_SUB_SYS] = { "MEM", "WEB", "458", "TCP", "LOG" };

void LogInit(UART_HandleTypeDef * log_if) {
	hlog.interface = log_if;
 801e00c:	4b05      	ldr	r3, [pc, #20]	; (801e024 <LogInit+0x18>)
 801e00e:	6018      	str	r0, [r3, #0]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 801e010:	2300      	movs	r3, #0
 801e012:	e004      	b.n	801e01e <LogInit+0x12>
		hlog.levels[i] = LOG_LEV_ALL;
 801e014:	4a03      	ldr	r2, [pc, #12]	; (801e024 <LogInit+0x18>)
 801e016:	441a      	add	r2, r3
 801e018:	2104      	movs	r1, #4
 801e01a:	7111      	strb	r1, [r2, #4]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 801e01c:	3301      	adds	r3, #1
 801e01e:	2b04      	cmp	r3, #4
 801e020:	ddf8      	ble.n	801e014 <LogInit+0x8>
	}
}
 801e022:	4770      	bx	lr
 801e024:	20011e5c 	.word	0x20011e5c

0801e028 <LogText__>:

void LogText__(log_sub_sys sys, log_level level, char *msg) {
 801e028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e02c:	4606      	mov	r6, r0
 801e02e:	460d      	mov	r5, r1
 801e030:	4617      	mov	r7, r2
	if (level <= hlog.levels[sys]) {
 801e032:	4b21      	ldr	r3, [pc, #132]	; (801e0b8 <LogText__+0x90>)
 801e034:	4403      	add	r3, r0
 801e036:	791b      	ldrb	r3, [r3, #4]
 801e038:	428b      	cmp	r3, r1
 801e03a:	d204      	bcs.n	801e046 <LogText__+0x1e>
 801e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		while (hlog.interface->gState != HAL_UART_STATE_READY) {
			osDelay(1);
 801e040:	2001      	movs	r0, #1
 801e042:	f7f4 fde3 	bl	8012c0c <osDelay>
		while (hlog.interface->gState != HAL_UART_STATE_READY) {
 801e046:	4b1c      	ldr	r3, [pc, #112]	; (801e0b8 <LogText__+0x90>)
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801e04e:	b2db      	uxtb	r3, r3
 801e050:	2b20      	cmp	r3, #32
 801e052:	d1f5      	bne.n	801e040 <LogText__+0x18>
 801e054:	463b      	mov	r3, r7
 801e056:	2400      	movs	r4, #0
 801e058:	e001      	b.n	801e05e <LogText__+0x36>
		}
		uint len = 0;
		char * ptr = msg;
		while (*ptr++) {
			len++;
 801e05a:	3401      	adds	r4, #1
		while (*ptr++) {
 801e05c:	4613      	mov	r3, r2
 801e05e:	1c5a      	adds	r2, r3, #1
 801e060:	781b      	ldrb	r3, [r3, #0]
 801e062:	2b00      	cmp	r3, #0
 801e064:	d1f9      	bne.n	801e05a <LogText__+0x32>
		}
		ptr = (char*) pvPortMalloc((size_t) (len + 10));
 801e066:	f104 000a 	add.w	r0, r4, #10
 801e06a:	f7f5 f9d9 	bl	8013420 <pvPortMalloc>
		if (ptr != NULL) {
 801e06e:	4680      	mov	r8, r0
 801e070:	b300      	cbz	r0, 801e0b4 <LogText__+0x8c>
			strcpy(ptr, txt_sys[sys]);
 801e072:	4b12      	ldr	r3, [pc, #72]	; (801e0bc <LogText__+0x94>)
 801e074:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 801e078:	f001 fd02 	bl	801fa80 <strcpy>
			strcpy(ptr + 3, "_");
 801e07c:	4b10      	ldr	r3, [pc, #64]	; (801e0c0 <LogText__+0x98>)
 801e07e:	881b      	ldrh	r3, [r3, #0]
 801e080:	f8a8 3003 	strh.w	r3, [r8, #3]
			strcpy(ptr + 4, txt_lev[level]);
 801e084:	4b0f      	ldr	r3, [pc, #60]	; (801e0c4 <LogText__+0x9c>)
 801e086:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801e08a:	f108 0004 	add.w	r0, r8, #4
 801e08e:	f001 fcf7 	bl	801fa80 <strcpy>
			strcpy(ptr + 7, ":");
 801e092:	4b0d      	ldr	r3, [pc, #52]	; (801e0c8 <LogText__+0xa0>)
 801e094:	881b      	ldrh	r3, [r3, #0]
 801e096:	f8a8 3007 	strh.w	r3, [r8, #7]
			strcpy(ptr + 8, msg);
 801e09a:	4639      	mov	r1, r7
 801e09c:	f108 0008 	add.w	r0, r8, #8
 801e0a0:	f001 fcee 	bl	801fa80 <strcpy>
			HAL_UART_Transmit_DMA(hlog.interface, (uint8_t*) ptr, len + 8);
 801e0a4:	f104 0208 	add.w	r2, r4, #8
 801e0a8:	b292      	uxth	r2, r2
 801e0aa:	4641      	mov	r1, r8
 801e0ac:	4b02      	ldr	r3, [pc, #8]	; (801e0b8 <LogText__+0x90>)
 801e0ae:	6818      	ldr	r0, [r3, #0]
 801e0b0:	f7f4 fbdc 	bl	801286c <HAL_UART_Transmit_DMA>
 801e0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0b8:	20011e5c 	.word	0x20011e5c
 801e0bc:	08024a90 	.word	0x08024a90
 801e0c0:	08024a58 	.word	0x08024a58
 801e0c4:	08024a80 	.word	0x08024a80
 801e0c8:	080249dc 	.word	0x080249dc

0801e0cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801e0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0ce:	b085      	sub	sp, #20
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801e0d0:	4f3b      	ldr	r7, [pc, #236]	; (801e1c0 <MX_LWIP_Init+0xf4>)
 801e0d2:	23c0      	movs	r3, #192	; 0xc0
 801e0d4:	703b      	strb	r3, [r7, #0]
  IP_ADDRESS[1] = 168;
 801e0d6:	23a8      	movs	r3, #168	; 0xa8
 801e0d8:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 4;
 801e0da:	2304      	movs	r3, #4
 801e0dc:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 253;
 801e0de:	23fd      	movs	r3, #253	; 0xfd
 801e0e0:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 801e0e2:	4e38      	ldr	r6, [pc, #224]	; (801e1c4 <MX_LWIP_Init+0xf8>)
 801e0e4:	23ff      	movs	r3, #255	; 0xff
 801e0e6:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 801e0e8:	7073      	strb	r3, [r6, #1]
  NETMASK_ADDRESS[2] = 255;
 801e0ea:	70b3      	strb	r3, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 801e0ec:	2400      	movs	r4, #0
 801e0ee:	70f4      	strb	r4, [r6, #3]
  GATEWAY_ADDRESS[0] = 0;
 801e0f0:	4d35      	ldr	r5, [pc, #212]	; (801e1c8 <MX_LWIP_Init+0xfc>)
 801e0f2:	702c      	strb	r4, [r5, #0]
  GATEWAY_ADDRESS[1] = 0;
 801e0f4:	706c      	strb	r4, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 801e0f6:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 0;
 801e0f8:	70ec      	strb	r4, [r5, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801e0fa:	4621      	mov	r1, r4
 801e0fc:	4620      	mov	r0, r4
 801e0fe:	f7f8 f811 	bl	8016124 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801e102:	783a      	ldrb	r2, [r7, #0]
 801e104:	787b      	ldrb	r3, [r7, #1]
 801e106:	041b      	lsls	r3, r3, #16
 801e108:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801e10c:	78ba      	ldrb	r2, [r7, #2]
 801e10e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e112:	78fa      	ldrb	r2, [r7, #3]
 801e114:	4313      	orrs	r3, r2
 801e116:	021a      	lsls	r2, r3, #8
 801e118:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801e11c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801e120:	0a19      	lsrs	r1, r3, #8
 801e122:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e126:	430a      	orrs	r2, r1
 801e128:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 801e12c:	4927      	ldr	r1, [pc, #156]	; (801e1cc <MX_LWIP_Init+0x100>)
 801e12e:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801e130:	7832      	ldrb	r2, [r6, #0]
 801e132:	7873      	ldrb	r3, [r6, #1]
 801e134:	041b      	lsls	r3, r3, #16
 801e136:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801e13a:	78b2      	ldrb	r2, [r6, #2]
 801e13c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e140:	78f2      	ldrb	r2, [r6, #3]
 801e142:	4313      	orrs	r3, r2
 801e144:	021a      	lsls	r2, r3, #8
 801e146:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801e14a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801e14e:	0a18      	lsrs	r0, r3, #8
 801e150:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e154:	4302      	orrs	r2, r0
 801e156:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 801e15a:	4a1d      	ldr	r2, [pc, #116]	; (801e1d0 <MX_LWIP_Init+0x104>)
 801e15c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801e15e:	7828      	ldrb	r0, [r5, #0]
 801e160:	786b      	ldrb	r3, [r5, #1]
 801e162:	041b      	lsls	r3, r3, #16
 801e164:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801e168:	78a8      	ldrb	r0, [r5, #2]
 801e16a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801e16e:	78e8      	ldrb	r0, [r5, #3]
 801e170:	4303      	orrs	r3, r0
 801e172:	0218      	lsls	r0, r3, #8
 801e174:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 801e178:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801e17c:	0a1d      	lsrs	r5, r3, #8
 801e17e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e182:	4328      	orrs	r0, r5
 801e184:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 801e188:	4b12      	ldr	r3, [pc, #72]	; (801e1d4 <MX_LWIP_Init+0x108>)
 801e18a:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801e18c:	4d12      	ldr	r5, [pc, #72]	; (801e1d8 <MX_LWIP_Init+0x10c>)
 801e18e:	4813      	ldr	r0, [pc, #76]	; (801e1dc <MX_LWIP_Init+0x110>)
 801e190:	9002      	str	r0, [sp, #8]
 801e192:	4813      	ldr	r0, [pc, #76]	; (801e1e0 <MX_LWIP_Init+0x114>)
 801e194:	9001      	str	r0, [sp, #4]
 801e196:	9400      	str	r4, [sp, #0]
 801e198:	4628      	mov	r0, r5
 801e19a:	f7f9 fff7 	bl	801818c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801e19e:	4628      	mov	r0, r5
 801e1a0:	f7fa f834 	bl	801820c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801e1a4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 801e1a8:	f013 0f04 	tst.w	r3, #4
 801e1ac:	d104      	bne.n	801e1b8 <MX_LWIP_Init+0xec>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801e1ae:	480a      	ldr	r0, [pc, #40]	; (801e1d8 <MX_LWIP_Init+0x10c>)
 801e1b0:	f7fa f844 	bl	801823c <netif_set_down>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801e1b4:	b005      	add	sp, #20
 801e1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 801e1b8:	4628      	mov	r0, r5
 801e1ba:	f7fa f82d 	bl	8018218 <netif_set_up>
 801e1be:	e7f9      	b.n	801e1b4 <MX_LWIP_Init+0xe8>
 801e1c0:	20011ea4 	.word	0x20011ea4
 801e1c4:	20011ea0 	.word	0x20011ea0
 801e1c8:	20011e68 	.word	0x20011e68
 801e1cc:	20011e9c 	.word	0x20011e9c
 801e1d0:	20011ea8 	.word	0x20011ea8
 801e1d4:	20011eac 	.word	0x20011eac
 801e1d8:	20011e6c 	.word	0x20011e6c
 801e1dc:	0801606d 	.word	0x0801606d
 801e1e0:	0801d35d 	.word	0x0801d35d

0801e1e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e1e4:	b510      	push	{r4, lr}
 801e1e6:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 801e1e8:	6802      	ldr	r2, [r0, #0]
 801e1ea:	4b0e      	ldr	r3, [pc, #56]	; (801e224 <HAL_TIM_PeriodElapsedCallback+0x40>)
 801e1ec:	429a      	cmp	r2, r3
 801e1ee:	d008      	beq.n	801e202 <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM8) {
 801e1f0:	6822      	ldr	r2, [r4, #0]
 801e1f2:	4b0d      	ldr	r3, [pc, #52]	; (801e228 <HAL_TIM_PeriodElapsedCallback+0x44>)
 801e1f4:	429a      	cmp	r2, r3
 801e1f6:	d007      	beq.n	801e208 <HAL_TIM_PeriodElapsedCallback+0x24>
		CommandProcess();
	}
	if (htim->Instance == TIM7) {
 801e1f8:	6822      	ldr	r2, [r4, #0]
 801e1fa:	4b0c      	ldr	r3, [pc, #48]	; (801e22c <HAL_TIM_PeriodElapsedCallback+0x48>)
 801e1fc:	429a      	cmp	r2, r3
 801e1fe:	d006      	beq.n	801e20e <HAL_TIM_PeriodElapsedCallback+0x2a>
 801e200:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 801e202:	f7f2 f8d1 	bl	80103a8 <HAL_IncTick>
 801e206:	e7f3      	b.n	801e1f0 <HAL_TIM_PeriodElapsedCallback+0xc>
		CommandProcess();
 801e208:	f000 f894 	bl	801e334 <CommandProcess>
 801e20c:	e7f4      	b.n	801e1f8 <HAL_TIM_PeriodElapsedCallback+0x14>
		__HAL_TIM_SET_COUNTER(&htim7, 0x00U);
 801e20e:	4808      	ldr	r0, [pc, #32]	; (801e230 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 801e210:	6803      	ldr	r3, [r0, #0]
 801e212:	2200      	movs	r2, #0
 801e214:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim7);
 801e216:	f7f3 fe96 	bl	8011f46 <HAL_TIM_Base_Start_IT>
		ulHighFrequencyTimerTicks++;
 801e21a:	4a06      	ldr	r2, [pc, #24]	; (801e234 <HAL_TIM_PeriodElapsedCallback+0x50>)
 801e21c:	6813      	ldr	r3, [r2, #0]
 801e21e:	3301      	adds	r3, #1
 801e220:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 801e222:	e7ed      	b.n	801e200 <HAL_TIM_PeriodElapsedCallback+0x1c>
 801e224:	40010000 	.word	0x40010000
 801e228:	40010400 	.word	0x40010400
 801e22c:	40001400 	.word	0x40001400
 801e230:	20011f58 	.word	0x20011f58
 801e234:	20009528 	.word	0x20009528

0801e238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801e238:	e7fe      	b.n	801e238 <Error_Handler>
	...

0801e23c <SystemClock_Config>:
{
 801e23c:	b500      	push	{lr}
 801e23e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801e240:	2230      	movs	r2, #48	; 0x30
 801e242:	2100      	movs	r1, #0
 801e244:	a808      	add	r0, sp, #32
 801e246:	f001 fc13 	bl	801fa70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801e24a:	2300      	movs	r3, #0
 801e24c:	9303      	str	r3, [sp, #12]
 801e24e:	9304      	str	r3, [sp, #16]
 801e250:	9305      	str	r3, [sp, #20]
 801e252:	9306      	str	r3, [sp, #24]
 801e254:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 801e256:	9301      	str	r3, [sp, #4]
 801e258:	4a21      	ldr	r2, [pc, #132]	; (801e2e0 <SystemClock_Config+0xa4>)
 801e25a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801e25c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801e260:	6411      	str	r1, [r2, #64]	; 0x40
 801e262:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801e264:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 801e268:	9201      	str	r2, [sp, #4]
 801e26a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801e26c:	9302      	str	r3, [sp, #8]
 801e26e:	4b1d      	ldr	r3, [pc, #116]	; (801e2e4 <SystemClock_Config+0xa8>)
 801e270:	681a      	ldr	r2, [r3, #0]
 801e272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801e276:	601a      	str	r2, [r3, #0]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e27e:	9302      	str	r3, [sp, #8]
 801e280:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801e282:	2301      	movs	r3, #1
 801e284:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801e286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801e28a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801e28c:	2302      	movs	r3, #2
 801e28e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801e290:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 801e294:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 801e296:	2219      	movs	r2, #25
 801e298:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 801e29a:	f44f 72a8 	mov.w	r2, #336	; 0x150
 801e29e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801e2a0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 801e2a2:	2305      	movs	r3, #5
 801e2a4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801e2a6:	a808      	add	r0, sp, #32
 801e2a8:	f7f3 fb04 	bl	80118b4 <HAL_RCC_OscConfig>
 801e2ac:	b998      	cbnz	r0, 801e2d6 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801e2ae:	230f      	movs	r3, #15
 801e2b0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801e2b2:	2302      	movs	r3, #2
 801e2b4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801e2b6:	2300      	movs	r3, #0
 801e2b8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801e2ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801e2be:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801e2c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801e2c4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801e2c6:	2105      	movs	r1, #5
 801e2c8:	a803      	add	r0, sp, #12
 801e2ca:	f7f3 fd11 	bl	8011cf0 <HAL_RCC_ClockConfig>
 801e2ce:	b920      	cbnz	r0, 801e2da <SystemClock_Config+0x9e>
}
 801e2d0:	b015      	add	sp, #84	; 0x54
 801e2d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801e2d6:	f7ff ffaf 	bl	801e238 <Error_Handler>
    Error_Handler();
 801e2da:	f7ff ffad 	bl	801e238 <Error_Handler>
 801e2de:	bf00      	nop
 801e2e0:	40023800 	.word	0x40023800
 801e2e4:	40007000 	.word	0x40007000

0801e2e8 <main>:
{
 801e2e8:	b508      	push	{r3, lr}
  HAL_Init();
 801e2ea:	f7f2 f843 	bl	8010374 <HAL_Init>
  SystemClock_Config();
 801e2ee:	f7ff ffa5 	bl	801e23c <SystemClock_Config>
	HAL_FLASH_Unlock();
 801e2f2:	f7f3 f81f 	bl	8011334 <HAL_FLASH_Unlock>
	EE_Init();
 801e2f6:	f7fe fcb9 	bl	801cc6c <EE_Init>
	FlashInit();
 801e2fa:	f7fe faeb 	bl	801c8d4 <FlashInit>
	ProtocolSettingsInit(&hprot);
 801e2fe:	480b      	ldr	r0, [pc, #44]	; (801e32c <main+0x44>)
 801e300:	f000 fab2 	bl	801e868 <ProtocolSettingsInit>
  MX_GPIO_Init();
 801e304:	f7ff f97c 	bl	801d600 <MX_GPIO_Init>
  MX_DMA_Init();
 801e308:	f7fe fbca 	bl	801caa0 <MX_DMA_Init>
  MX_UART5_Init();
 801e30c:	f000 fff6 	bl	801f2fc <MX_UART5_Init>
  MX_TIM8_Init();
 801e310:	f000 fe60 	bl	801efd4 <MX_TIM8_Init>
  MX_TIM7_Init();
 801e314:	f000 fe38 	bl	801ef88 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 801e318:	f001 f810 	bl	801f33c <MX_USART1_UART_Init>
  LogInit(&huart1);
 801e31c:	4804      	ldr	r0, [pc, #16]	; (801e330 <main+0x48>)
 801e31e:	f7ff fe75 	bl	801e00c <LogInit>
  MX_FREERTOS_Init();
 801e322:	f7ff f8fb 	bl	801d51c <MX_FREERTOS_Init>
  osKernelStart();
 801e326:	f7f4 fc2d 	bl	8012b84 <osKernelStart>
 801e32a:	e7fe      	b.n	801e32a <main+0x42>
 801e32c:	20011ec4 	.word	0x20011ec4
 801e330:	20012034 	.word	0x20012034

0801e334 <CommandProcess>:
extern xQueueHandle frames_queue;
extern xQueueHandle cleaner_queue;

profibus_MPI_t hprot;

inline void CommandProcess() {
 801e334:	b530      	push	{r4, r5, lr}
 801e336:	b083      	sub	sp, #12
	static portBASE_TYPE xHigherPriorityTaskWoken;
	uint32_t len;
	xHigherPriorityTaskWoken = pdFALSE;
 801e338:	4c10      	ldr	r4, [pc, #64]	; (801e37c <CommandProcess+0x48>)
 801e33a:	2500      	movs	r5, #0
 801e33c:	6025      	str	r5, [r4, #0]
	HAL_TIM_Base_Stop_IT(&htim8);
 801e33e:	4810      	ldr	r0, [pc, #64]	; (801e380 <CommandProcess+0x4c>)
 801e340:	f7f3 fe0d 	bl	8011f5e <HAL_TIM_Base_Stop_IT>
	len = CB_Data_Length(&inbuf_UART);
 801e344:	480f      	ldr	r0, [pc, #60]	; (801e384 <CommandProcess+0x50>)
 801e346:	f7fe fa93 	bl	801c870 <CB_Data_Length>
 801e34a:	a902      	add	r1, sp, #8
 801e34c:	f841 0d04 	str.w	r0, [r1, #-4]!
	xQueueSendFromISR(frames_queue, &len, &xHigherPriorityTaskWoken);
 801e350:	462b      	mov	r3, r5
 801e352:	4622      	mov	r2, r4
 801e354:	480c      	ldr	r0, [pc, #48]	; (801e388 <CommandProcess+0x54>)
 801e356:	6800      	ldr	r0, [r0, #0]
 801e358:	f7f5 fb76 	bl	8013a48 <xQueueGenericSendFromISR>
	if (xHigherPriorityTaskWoken == pdTRUE) {
 801e35c:	6823      	ldr	r3, [r4, #0]
 801e35e:	2b01      	cmp	r3, #1
 801e360:	d001      	beq.n	801e366 <CommandProcess+0x32>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 801e362:	b003      	add	sp, #12
 801e364:	bd30      	pop	{r4, r5, pc}
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801e366:	2b00      	cmp	r3, #0
 801e368:	d0fb      	beq.n	801e362 <CommandProcess+0x2e>
 801e36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e36e:	4b07      	ldr	r3, [pc, #28]	; (801e38c <CommandProcess+0x58>)
 801e370:	601a      	str	r2, [r3, #0]
 801e372:	f3bf 8f4f 	dsb	sy
 801e376:	f3bf 8f6f 	isb	sy
}
 801e37a:	e7f2      	b.n	801e362 <CommandProcess+0x2e>
 801e37c:	20009e8c 	.word	0x20009e8c
 801e380:	20011f1c 	.word	0x20011f1c
 801e384:	20011eb4 	.word	0x20011eb4
 801e388:	20011de8 	.word	0x20011de8
 801e38c:	e000ed04 	.word	0xe000ed04

0801e390 <SendAckMsg>:

void SendAckMsg(void) {
 801e390:	b510      	push	{r4, lr}
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(1);
 801e392:	2001      	movs	r0, #1
 801e394:	f7f5 f844 	bl	8013420 <pvPortMalloc>
 801e398:	4604      	mov	r4, r0
	*temp = 0xE5;
 801e39a:	23e5      	movs	r3, #229	; 0xe5
 801e39c:	7003      	strb	r3, [r0, #0]
	TRANS_ON();
 801e39e:	2201      	movs	r2, #1
 801e3a0:	4611      	mov	r1, r2
 801e3a2:	4804      	ldr	r0, [pc, #16]	; (801e3b4 <SendAckMsg+0x24>)
 801e3a4:	f7f3 fa7c 	bl	80118a0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 1);
 801e3a8:	2201      	movs	r2, #1
 801e3aa:	4621      	mov	r1, r4
 801e3ac:	4802      	ldr	r0, [pc, #8]	; (801e3b8 <SendAckMsg+0x28>)
 801e3ae:	f7f4 fa5d 	bl	801286c <HAL_UART_Transmit_DMA>
 801e3b2:	bd10      	pop	{r4, pc}
 801e3b4:	40021000 	.word	0x40021000
 801e3b8:	20011ff4 	.word	0x20011ff4

0801e3bc <SendClosemMsg>:
}

void SendClosemMsg(uint8_t to, uint8_t from) {
 801e3bc:	b570      	push	{r4, r5, r6, lr}
 801e3be:	4606      	mov	r6, r0
 801e3c0:	460d      	mov	r5, r1
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = 12;
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801e3c2:	200c      	movs	r0, #12
 801e3c4:	f7f5 f82c 	bl	8013420 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801e3c8:	4604      	mov	r4, r0
 801e3ca:	b338      	cbz	r0, 801e41c <SendClosemMsg+0x60>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801e3cc:	2368      	movs	r3, #104	; 0x68
 801e3ce:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = 0x06;
 801e3d0:	2106      	movs	r1, #6
 801e3d2:	7061      	strb	r1, [r4, #1]
	*tmp_ptr++ = 0x06;
 801e3d4:	70a1      	strb	r1, [r4, #2]
	*tmp_ptr++ = 0x68;
 801e3d6:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801e3d8:	f066 067f 	orn	r6, r6, #127	; 0x7f
 801e3dc:	7126      	strb	r6, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801e3de:	f065 057f 	orn	r5, r5, #127	; 0x7f
 801e3e2:	7165      	strb	r5, [r4, #5]
	*tmp_ptr++ = 0x5C;
 801e3e4:	235c      	movs	r3, #92	; 0x5c
 801e3e6:	71a3      	strb	r3, [r4, #6]
	*tmp_ptr++ = hprot.master_SAP;
 801e3e8:	4d10      	ldr	r5, [pc, #64]	; (801e42c <SendClosemMsg+0x70>)
 801e3ea:	7cab      	ldrb	r3, [r5, #18]
 801e3ec:	71e3      	strb	r3, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801e3ee:	231f      	movs	r3, #31
 801e3f0:	7223      	strb	r3, [r4, #8]
	*tmp_ptr++ = 0x80;
 801e3f2:	2380      	movs	r3, #128	; 0x80
 801e3f4:	7263      	strb	r3, [r4, #9]
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, 6);
 801e3f6:	1d20      	adds	r0, r4, #4
 801e3f8:	f000 fa46 	bl	801e888 <CalculateFCS>
 801e3fc:	72a0      	strb	r0, [r4, #10]
	*tmp_ptr = 0x16;
 801e3fe:	2316      	movs	r3, #22
 801e400:	72e3      	strb	r3, [r4, #11]
	TRANS_ON();
 801e402:	2201      	movs	r2, #1
 801e404:	4611      	mov	r1, r2
 801e406:	480a      	ldr	r0, [pc, #40]	; (801e430 <SendClosemMsg+0x74>)
 801e408:	f7f3 fa4a 	bl	80118a0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801e40c:	220c      	movs	r2, #12
 801e40e:	4621      	mov	r1, r4
 801e410:	4808      	ldr	r0, [pc, #32]	; (801e434 <SendClosemMsg+0x78>)
 801e412:	f7f4 fa2b 	bl	801286c <HAL_UART_Transmit_DMA>
	hprot.conn_stat = CONN_CLOSED;
 801e416:	2305      	movs	r3, #5
 801e418:	70eb      	strb	r3, [r5, #3]
 801e41a:	bd70      	pop	{r4, r5, r6, pc}
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e41c:	4a06      	ldr	r2, [pc, #24]	; (801e438 <SendClosemMsg+0x7c>)
 801e41e:	2101      	movs	r1, #1
 801e420:	f7ff fe02 	bl	801e028 <LogText__>
		Error_Handler();
 801e424:	f7ff ff08 	bl	801e238 <Error_Handler>
 801e428:	e7d0      	b.n	801e3cc <SendClosemMsg+0x10>
 801e42a:	bf00      	nop
 801e42c:	20011ec4 	.word	0x20011ec4
 801e430:	40021000 	.word	0x40021000
 801e434:	20011ff4 	.word	0x20011ff4
 801e438:	08024aa4 	.word	0x08024aa4

0801e43c <SendConfirmMsg>:
}

void SendConfirmMsg(uint8_t to, uint8_t from, uint8_t size, uint8_t func) {
 801e43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e440:	4680      	mov	r8, r0
 801e442:	460f      	mov	r7, r1
 801e444:	4615      	mov	r5, r2
 801e446:	4699      	mov	r9, r3
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = size + 6;
 801e448:	1d96      	adds	r6, r2, #6
 801e44a:	b2f6      	uxtb	r6, r6
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801e44c:	4630      	mov	r0, r6
 801e44e:	f7f4 ffe7 	bl	8013420 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801e452:	4604      	mov	r4, r0
 801e454:	2800      	cmp	r0, #0
 801e456:	d03a      	beq.n	801e4ce <SendConfirmMsg+0x92>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801e458:	2368      	movs	r3, #104	; 0x68
 801e45a:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = size;
 801e45c:	7065      	strb	r5, [r4, #1]
	*tmp_ptr++ = size;
 801e45e:	70a5      	strb	r5, [r4, #2]
	*tmp_ptr++ = 0x68;
 801e460:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801e462:	f068 087f 	orn	r8, r8, #127	; 0x7f
 801e466:	f884 8004 	strb.w	r8, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801e46a:	f067 077f 	orn	r7, r7, #127	; 0x7f
 801e46e:	7167      	strb	r7, [r4, #5]
	*tmp_ptr++ = func;
 801e470:	f884 9006 	strb.w	r9, [r4, #6]
	*tmp_ptr++ = hprot.master_SAP;
 801e474:	4b1d      	ldr	r3, [pc, #116]	; (801e4ec <SendConfirmMsg+0xb0>)
 801e476:	7c9b      	ldrb	r3, [r3, #18]
 801e478:	71e3      	strb	r3, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801e47a:	231f      	movs	r3, #31
 801e47c:	7223      	strb	r3, [r4, #8]
	if (size == 0x07) {
 801e47e:	2d07      	cmp	r5, #7
 801e480:	d02c      	beq.n	801e4dc <SendConfirmMsg+0xa0>
		*tmp_ptr++ = 0x05;
		*tmp_ptr++ = 0x07;
	} else {
		*tmp_ptr++ = 0xB0;
 801e482:	23b0      	movs	r3, #176	; 0xb0
 801e484:	7263      	strb	r3, [r4, #9]
		*tmp_ptr++ = 0x07;
 801e486:	2307      	movs	r3, #7
 801e488:	72a3      	strb	r3, [r4, #10]
		*tmp_ptr++ = hprot.req_num++;
 801e48a:	f104 070c 	add.w	r7, r4, #12
 801e48e:	4b17      	ldr	r3, [pc, #92]	; (801e4ec <SendConfirmMsg+0xb0>)
 801e490:	7cda      	ldrb	r2, [r3, #19]
 801e492:	1c51      	adds	r1, r2, #1
 801e494:	74d9      	strb	r1, [r3, #19]
 801e496:	72e2      	strb	r2, [r4, #11]
		if (hprot.req_num == 0) {
 801e498:	7cdb      	ldrb	r3, [r3, #19]
 801e49a:	b913      	cbnz	r3, 801e4a2 <SendConfirmMsg+0x66>
			hprot.req_num++;
 801e49c:	3301      	adds	r3, #1
 801e49e:	4a13      	ldr	r2, [pc, #76]	; (801e4ec <SendConfirmMsg+0xb0>)
 801e4a0:	74d3      	strb	r3, [r2, #19]
		}
	}
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, size);
 801e4a2:	4629      	mov	r1, r5
 801e4a4:	1d20      	adds	r0, r4, #4
 801e4a6:	f000 f9ef 	bl	801e888 <CalculateFCS>
 801e4aa:	7038      	strb	r0, [r7, #0]
	*tmp_ptr = 0x16;
 801e4ac:	2316      	movs	r3, #22
 801e4ae:	707b      	strb	r3, [r7, #1]
	hprot.confirm_status = CONF_SENT;
 801e4b0:	2202      	movs	r2, #2
 801e4b2:	4b0e      	ldr	r3, [pc, #56]	; (801e4ec <SendConfirmMsg+0xb0>)
 801e4b4:	709a      	strb	r2, [r3, #2]
	TRANS_ON();
 801e4b6:	2201      	movs	r2, #1
 801e4b8:	4611      	mov	r1, r2
 801e4ba:	480d      	ldr	r0, [pc, #52]	; (801e4f0 <SendConfirmMsg+0xb4>)
 801e4bc:	f7f3 f9f0 	bl	80118a0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801e4c0:	4632      	mov	r2, r6
 801e4c2:	4621      	mov	r1, r4
 801e4c4:	480b      	ldr	r0, [pc, #44]	; (801e4f4 <SendConfirmMsg+0xb8>)
 801e4c6:	f7f4 f9d1 	bl	801286c <HAL_UART_Transmit_DMA>
 801e4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e4ce:	4a0a      	ldr	r2, [pc, #40]	; (801e4f8 <SendConfirmMsg+0xbc>)
 801e4d0:	2101      	movs	r1, #1
 801e4d2:	f7ff fda9 	bl	801e028 <LogText__>
		Error_Handler();
 801e4d6:	f7ff feaf 	bl	801e238 <Error_Handler>
 801e4da:	e7bd      	b.n	801e458 <SendConfirmMsg+0x1c>
		*tmp_ptr++ = 0x05;
 801e4dc:	2305      	movs	r3, #5
 801e4de:	7263      	strb	r3, [r4, #9]
		*tmp_ptr++ = 0x07;
 801e4e0:	f104 070b 	add.w	r7, r4, #11
 801e4e4:	2307      	movs	r3, #7
 801e4e6:	72a3      	strb	r3, [r4, #10]
 801e4e8:	e7db      	b.n	801e4a2 <SendConfirmMsg+0x66>
 801e4ea:	bf00      	nop
 801e4ec:	20011ec4 	.word	0x20011ec4
 801e4f0:	40021000 	.word	0x40021000
 801e4f4:	20011ff4 	.word	0x20011ff4
 801e4f8:	08024aa4 	.word	0x08024aa4

0801e4fc <SendTokenMsg>:
}

void SendTokenMsg(uint8_t to, uint8_t from) {
 801e4fc:	b570      	push	{r4, r5, r6, lr}
 801e4fe:	4606      	mov	r6, r0
 801e500:	460d      	mov	r5, r1
	uint8_t * temp;
	static int cnt = 100;
	temp = (uint8_t*) pvPortMalloc(3);
 801e502:	2003      	movs	r0, #3
 801e504:	f7f4 ff8c 	bl	8013420 <pvPortMalloc>
	if (temp == NULL) {
 801e508:	4604      	mov	r4, r0
 801e50a:	b1a8      	cbz	r0, 801e538 <SendTokenMsg+0x3c>
		Error_Handler();
	}
	temp[0] = 0xDC;
 801e50c:	23dc      	movs	r3, #220	; 0xdc
 801e50e:	7023      	strb	r3, [r4, #0]
	temp[1] = to;
 801e510:	7066      	strb	r6, [r4, #1]
	temp[2] = from;
 801e512:	70a5      	strb	r5, [r4, #2]
	cnt--;
 801e514:	4a13      	ldr	r2, [pc, #76]	; (801e564 <SendTokenMsg+0x68>)
 801e516:	6813      	ldr	r3, [r2, #0]
 801e518:	3b01      	subs	r3, #1
 801e51a:	6013      	str	r3, [r2, #0]
	if (cnt == 0) {
 801e51c:	b17b      	cbz	r3, 801e53e <SendTokenMsg+0x42>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		cnt = 10;
	}
	TRANS_ON();
 801e51e:	2201      	movs	r2, #1
 801e520:	4611      	mov	r1, r2
 801e522:	4811      	ldr	r0, [pc, #68]	; (801e568 <SendTokenMsg+0x6c>)
 801e524:	f7f3 f9bc 	bl	80118a0 <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit_DMA(&huart5, temp, 3) == HAL_BUSY) {
 801e528:	2203      	movs	r2, #3
 801e52a:	4621      	mov	r1, r4
 801e52c:	480f      	ldr	r0, [pc, #60]	; (801e56c <SendTokenMsg+0x70>)
 801e52e:	f7f4 f99d 	bl	801286c <HAL_UART_Transmit_DMA>
 801e532:	2802      	cmp	r0, #2
 801e534:	d00c      	beq.n	801e550 <SendTokenMsg+0x54>
 801e536:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 801e538:	f7ff fe7e 	bl	801e238 <Error_Handler>
 801e53c:	e7e6      	b.n	801e50c <SendTokenMsg+0x10>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 801e53e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e542:	4809      	ldr	r0, [pc, #36]	; (801e568 <SendTokenMsg+0x6c>)
 801e544:	f7f3 f9b2 	bl	80118ac <HAL_GPIO_TogglePin>
		cnt = 10;
 801e548:	220a      	movs	r2, #10
 801e54a:	4b06      	ldr	r3, [pc, #24]	; (801e564 <SendTokenMsg+0x68>)
 801e54c:	601a      	str	r2, [r3, #0]
 801e54e:	e7e6      	b.n	801e51e <SendTokenMsg+0x22>
		TRANS_OFF();
 801e550:	2200      	movs	r2, #0
 801e552:	2101      	movs	r1, #1
 801e554:	4804      	ldr	r0, [pc, #16]	; (801e568 <SendTokenMsg+0x6c>)
 801e556:	f7f3 f9a3 	bl	80118a0 <HAL_GPIO_WritePin>
		vPortFree(temp);
 801e55a:	4620      	mov	r0, r4
 801e55c:	f7f4 ffe4 	bl	8013528 <vPortFree>
	}
}
 801e560:	e7e9      	b.n	801e536 <SendTokenMsg+0x3a>
 801e562:	bf00      	nop
 801e564:	20000038 	.word	0x20000038
 801e568:	40021000 	.word	0x40021000
 801e56c:	20011ff4 	.word	0x20011ff4

0801e570 <SendNoDataMsg>:

void SendNoDataMsg(uint8_t to, uint8_t from, uint8_t fc) {
 801e570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e572:	4605      	mov	r5, r0
 801e574:	460f      	mov	r7, r1
 801e576:	4616      	mov	r6, r2
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(6);
 801e578:	2006      	movs	r0, #6
 801e57a:	f7f4 ff51 	bl	8013420 <pvPortMalloc>
	if (temp == NULL) {
 801e57e:	4604      	mov	r4, r0
 801e580:	b1a8      	cbz	r0, 801e5ae <SendNoDataMsg+0x3e>
		Error_Handler();
	}
	temp[0] = 0x10;
 801e582:	2310      	movs	r3, #16
 801e584:	7023      	strb	r3, [r4, #0]
	temp[1] = to;
 801e586:	7065      	strb	r5, [r4, #1]
	temp[2] = from;
 801e588:	70a7      	strb	r7, [r4, #2]
	temp[3] = fc;
 801e58a:	70e6      	strb	r6, [r4, #3]
	temp[4] = to + from + fc;
 801e58c:	443d      	add	r5, r7
 801e58e:	fa56 f585 	uxtab	r5, r6, r5
 801e592:	7125      	strb	r5, [r4, #4]
	temp[5] = 0x16;
 801e594:	2316      	movs	r3, #22
 801e596:	7163      	strb	r3, [r4, #5]
	TRANS_ON();
 801e598:	2201      	movs	r2, #1
 801e59a:	4611      	mov	r1, r2
 801e59c:	4805      	ldr	r0, [pc, #20]	; (801e5b4 <SendNoDataMsg+0x44>)
 801e59e:	f7f3 f97f 	bl	80118a0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 6);
 801e5a2:	2206      	movs	r2, #6
 801e5a4:	4621      	mov	r1, r4
 801e5a6:	4804      	ldr	r0, [pc, #16]	; (801e5b8 <SendNoDataMsg+0x48>)
 801e5a8:	f7f4 f960 	bl	801286c <HAL_UART_Transmit_DMA>
 801e5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Error_Handler();
 801e5ae:	f7ff fe43 	bl	801e238 <Error_Handler>
 801e5b2:	e7e6      	b.n	801e582 <SendNoDataMsg+0x12>
 801e5b4:	40021000 	.word	0x40021000
 801e5b8:	20011ff4 	.word	0x20011ff4

0801e5bc <SendRequestMsg>:
}

void SendRequestMsg(uint8_t to, uint8_t from, uint8_t* data, uint8_t data_len) {
 801e5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5c0:	4682      	mov	sl, r0
 801e5c2:	4688      	mov	r8, r1
 801e5c4:	4691      	mov	r9, r2
 801e5c6:	461d      	mov	r5, r3
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 13;
 801e5c8:	f103 070d 	add.w	r7, r3, #13
 801e5cc:	b2ff      	uxtb	r7, r7
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801e5ce:	4638      	mov	r0, r7
 801e5d0:	f7f4 ff26 	bl	8013420 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801e5d4:	4604      	mov	r4, r0
 801e5d6:	b3b8      	cbz	r0, 801e648 <SendRequestMsg+0x8c>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801e5d8:	2368      	movs	r3, #104	; 0x68
 801e5da:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = data_len + 7;
 801e5dc:	1dee      	adds	r6, r5, #7
 801e5de:	b2f6      	uxtb	r6, r6
 801e5e0:	7066      	strb	r6, [r4, #1]
	*tmp_ptr++ = data_len + 7;
 801e5e2:	70a6      	strb	r6, [r4, #2]
	*tmp_ptr++ = 0x68;
 801e5e4:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801e5e6:	f06a 0a7f 	orn	sl, sl, #127	; 0x7f
 801e5ea:	f884 a004 	strb.w	sl, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801e5ee:	f068 087f 	orn	r8, r8, #127	; 0x7f
 801e5f2:	f884 8005 	strb.w	r8, [r4, #5]
	*tmp_ptr++ = 0x7C;
 801e5f6:	237c      	movs	r3, #124	; 0x7c
 801e5f8:	71a3      	strb	r3, [r4, #6]
	*tmp_ptr++ = hprot.master_SAP;
 801e5fa:	4b17      	ldr	r3, [pc, #92]	; (801e658 <SendRequestMsg+0x9c>)
 801e5fc:	7c9a      	ldrb	r2, [r3, #18]
 801e5fe:	71e2      	strb	r2, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801e600:	221f      	movs	r2, #31
 801e602:	7222      	strb	r2, [r4, #8]
	*tmp_ptr++ = 0xF1;
 801e604:	22f1      	movs	r2, #241	; 0xf1
 801e606:	7262      	strb	r2, [r4, #9]
	*tmp_ptr++ = hprot.req_num;
 801e608:	f104 080b 	add.w	r8, r4, #11
 801e60c:	7cdb      	ldrb	r3, [r3, #19]
 801e60e:	72a3      	strb	r3, [r4, #10]
	memcpy(tmp_ptr, data, data_len);
 801e610:	462a      	mov	r2, r5
 801e612:	4649      	mov	r1, r9
 801e614:	4640      	mov	r0, r8
 801e616:	f001 fa20 	bl	801fa5a <memcpy>
	tmp_ptr += data_len;
 801e61a:	eb08 0905 	add.w	r9, r8, r5
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 7);
 801e61e:	4631      	mov	r1, r6
 801e620:	1d20      	adds	r0, r4, #4
 801e622:	f000 f931 	bl	801e888 <CalculateFCS>
 801e626:	f808 0005 	strb.w	r0, [r8, r5]
	*tmp_ptr = 0x16;
 801e62a:	2316      	movs	r3, #22
 801e62c:	f889 3001 	strb.w	r3, [r9, #1]
	TRANS_ON();
 801e630:	2201      	movs	r2, #1
 801e632:	4611      	mov	r1, r2
 801e634:	4809      	ldr	r0, [pc, #36]	; (801e65c <SendRequestMsg+0xa0>)
 801e636:	f7f3 f933 	bl	80118a0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801e63a:	463a      	mov	r2, r7
 801e63c:	4621      	mov	r1, r4
 801e63e:	4808      	ldr	r0, [pc, #32]	; (801e660 <SendRequestMsg+0xa4>)
 801e640:	f7f4 f914 	bl	801286c <HAL_UART_Transmit_DMA>
 801e644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e648:	4a06      	ldr	r2, [pc, #24]	; (801e664 <SendRequestMsg+0xa8>)
 801e64a:	2101      	movs	r1, #1
 801e64c:	f7ff fcec 	bl	801e028 <LogText__>
		Error_Handler();
 801e650:	f7ff fdf2 	bl	801e238 <Error_Handler>
 801e654:	e7c0      	b.n	801e5d8 <SendRequestMsg+0x1c>
 801e656:	bf00      	nop
 801e658:	20011ec4 	.word	0x20011ec4
 801e65c:	40021000 	.word	0x40021000
 801e660:	20011ff4 	.word	0x20011ff4
 801e664:	08024aa4 	.word	0x08024aa4

0801e668 <SendConnectMsg>:
}

void SendConnectMsg(uint8_t to, uint8_t from, uint8_t fc) {
 801e668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e66a:	b085      	sub	sp, #20
 801e66c:	4606      	mov	r6, r0
 801e66e:	460d      	mov	r5, r1
 801e670:	4617      	mov	r7, r2
	uint8_t data[] = { 0x80, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00 };
 801e672:	4a21      	ldr	r2, [pc, #132]	; (801e6f8 <SendConnectMsg+0x90>)
 801e674:	ab01      	add	r3, sp, #4
 801e676:	ca07      	ldmia	r2, {r0, r1, r2}
 801e678:	c303      	stmia	r3!, {r0, r1}
 801e67a:	701a      	strb	r2, [r3, #0]
	uint8_t data_len = sizeof(data);
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 14;
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 801e67c:	2017      	movs	r0, #23
 801e67e:	f7f4 fecf 	bl	8013420 <pvPortMalloc>
	if (msg_ptr == NULL) {
 801e682:	4604      	mov	r4, r0
 801e684:	b388      	cbz	r0, 801e6ea <SendConnectMsg+0x82>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
				"Request buffer allocation error.");
		Error_Handler();
	}
	tmp_ptr = msg_ptr;
	*tmp_ptr++ = 0x68;
 801e686:	2368      	movs	r3, #104	; 0x68
 801e688:	7023      	strb	r3, [r4, #0]
	*tmp_ptr++ = data_len + 8;
 801e68a:	2211      	movs	r2, #17
 801e68c:	7062      	strb	r2, [r4, #1]
	*tmp_ptr++ = data_len + 8;
 801e68e:	70a2      	strb	r2, [r4, #2]
	*tmp_ptr++ = 0x68;
 801e690:	70e3      	strb	r3, [r4, #3]
	*tmp_ptr++ = to | 0x80;
 801e692:	f066 067f 	orn	r6, r6, #127	; 0x7f
 801e696:	7126      	strb	r6, [r4, #4]
	*tmp_ptr++ = from | 0x80;
 801e698:	f065 057f 	orn	r5, r5, #127	; 0x7f
 801e69c:	7165      	strb	r5, [r4, #5]
	*tmp_ptr++ = fc;
 801e69e:	71a7      	strb	r7, [r4, #6]
	*tmp_ptr++ = 0x00;
 801e6a0:	2300      	movs	r3, #0
 801e6a2:	71e3      	strb	r3, [r4, #7]
	*tmp_ptr++ = 0x1F;
 801e6a4:	231f      	movs	r3, #31
 801e6a6:	7223      	strb	r3, [r4, #8]
	*tmp_ptr++ = 0xE0;
 801e6a8:	23e0      	movs	r3, #224	; 0xe0
 801e6aa:	7263      	strb	r3, [r4, #9]
	*tmp_ptr++ = 0x04;
 801e6ac:	2304      	movs	r3, #4
 801e6ae:	72a3      	strb	r3, [r4, #10]
	*tmp_ptr++ = hprot.req_num;
 801e6b0:	4d12      	ldr	r5, [pc, #72]	; (801e6fc <SendConnectMsg+0x94>)
 801e6b2:	7ceb      	ldrb	r3, [r5, #19]
 801e6b4:	72e3      	strb	r3, [r4, #11]
	memcpy(tmp_ptr, data, data_len);
 801e6b6:	ab01      	add	r3, sp, #4
 801e6b8:	cb03      	ldmia	r3!, {r0, r1}
 801e6ba:	60e0      	str	r0, [r4, #12]
 801e6bc:	6121      	str	r1, [r4, #16]
 801e6be:	781b      	ldrb	r3, [r3, #0]
 801e6c0:	7523      	strb	r3, [r4, #20]
	tmp_ptr += data_len;
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 8);
 801e6c2:	4611      	mov	r1, r2
 801e6c4:	1d20      	adds	r0, r4, #4
 801e6c6:	f000 f8df 	bl	801e888 <CalculateFCS>
 801e6ca:	7560      	strb	r0, [r4, #21]
	*tmp_ptr = 0x16;
 801e6cc:	2316      	movs	r3, #22
 801e6ce:	75a3      	strb	r3, [r4, #22]
	hprot.conn_stat = CONN_REQ_SENT;
 801e6d0:	2101      	movs	r1, #1
 801e6d2:	70e9      	strb	r1, [r5, #3]
	TRANS_ON();
 801e6d4:	460a      	mov	r2, r1
 801e6d6:	480a      	ldr	r0, [pc, #40]	; (801e700 <SendConnectMsg+0x98>)
 801e6d8:	f7f3 f8e2 	bl	80118a0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 801e6dc:	2217      	movs	r2, #23
 801e6de:	4621      	mov	r1, r4
 801e6e0:	4808      	ldr	r0, [pc, #32]	; (801e704 <SendConnectMsg+0x9c>)
 801e6e2:	f7f4 f8c3 	bl	801286c <HAL_UART_Transmit_DMA>
}
 801e6e6:	b005      	add	sp, #20
 801e6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e6ea:	4a07      	ldr	r2, [pc, #28]	; (801e708 <SendConnectMsg+0xa0>)
 801e6ec:	2101      	movs	r1, #1
 801e6ee:	f7ff fc9b 	bl	801e028 <LogText__>
		Error_Handler();
 801e6f2:	f7ff fda1 	bl	801e238 <Error_Handler>
 801e6f6:	e7c6      	b.n	801e686 <SendConnectMsg+0x1e>
 801e6f8:	0801fd3c 	.word	0x0801fd3c
 801e6fc:	20011ec4 	.word	0x20011ec4
 801e700:	40021000 	.word	0x40021000
 801e704:	20011ff4 	.word	0x20011ff4
 801e708:	08024aa4 	.word	0x08024aa4

0801e70c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == &huart5) {
 801e70c:	4b0a      	ldr	r3, [pc, #40]	; (801e738 <HAL_UART_RxCpltCallback+0x2c>)
 801e70e:	4283      	cmp	r3, r0
 801e710:	d000      	beq.n	801e714 <HAL_UART_RxCpltCallback+0x8>
 801e712:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801e714:	b510      	push	{r4, lr}
		HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801e716:	4c09      	ldr	r4, [pc, #36]	; (801e73c <HAL_UART_RxCpltCallback+0x30>)
 801e718:	2201      	movs	r2, #1
 801e71a:	4621      	mov	r1, r4
 801e71c:	4618      	mov	r0, r3
 801e71e:	f7f4 f87b 	bl	8012818 <HAL_UART_Receive_IT>
		CB_Write(&inbuf_UART, received_byte);
 801e722:	7821      	ldrb	r1, [r4, #0]
 801e724:	4806      	ldr	r0, [pc, #24]	; (801e740 <HAL_UART_RxCpltCallback+0x34>)
 801e726:	f7fe f8ab 	bl	801c880 <CB_Write>
		__HAL_TIM_SET_COUNTER(&htim8, 0x00U);
 801e72a:	4806      	ldr	r0, [pc, #24]	; (801e744 <HAL_UART_RxCpltCallback+0x38>)
 801e72c:	6803      	ldr	r3, [r0, #0]
 801e72e:	2200      	movs	r2, #0
 801e730:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim8);
 801e732:	f7f3 fc08 	bl	8011f46 <HAL_TIM_Base_Start_IT>
 801e736:	bd10      	pop	{r4, pc}
 801e738:	20011ff4 	.word	0x20011ff4
 801e73c:	20011eb0 	.word	0x20011eb0
 801e740:	20011eb4 	.word	0x20011eb4
 801e744:	20011f1c 	.word	0x20011f1c

0801e748 <HAL_UART_TxCpltCallback>:
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 801e748:	b510      	push	{r4, lr}
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 801e74a:	2200      	movs	r2, #0
 801e74c:	4b1c      	ldr	r3, [pc, #112]	; (801e7c0 <HAL_UART_TxCpltCallback+0x78>)
 801e74e:	601a      	str	r2, [r3, #0]
	if (huart == &huart5) {
 801e750:	4b1c      	ldr	r3, [pc, #112]	; (801e7c4 <HAL_UART_TxCpltCallback+0x7c>)
 801e752:	4298      	cmp	r0, r3
 801e754:	d004      	beq.n	801e760 <HAL_UART_TxCpltCallback+0x18>
		xQueueSendFromISR(cleaner_queue, &(huart5.pTxBuffPtr),
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
		}
	} else if (huart == hlog.interface) {
 801e756:	4b1c      	ldr	r3, [pc, #112]	; (801e7c8 <HAL_UART_TxCpltCallback+0x80>)
 801e758:	6819      	ldr	r1, [r3, #0]
 801e75a:	4288      	cmp	r0, r1
 801e75c:	d01a      	beq.n	801e794 <HAL_UART_TxCpltCallback+0x4c>
 801e75e:	bd10      	pop	{r4, pc}
		TRANS_OFF();
 801e760:	2101      	movs	r1, #1
 801e762:	481a      	ldr	r0, [pc, #104]	; (801e7cc <HAL_UART_TxCpltCallback+0x84>)
 801e764:	f7f3 f89c 	bl	80118a0 <HAL_GPIO_WritePin>
		xQueueSendFromISR(cleaner_queue, &(huart5.pTxBuffPtr),
 801e768:	4c15      	ldr	r4, [pc, #84]	; (801e7c0 <HAL_UART_TxCpltCallback+0x78>)
 801e76a:	2300      	movs	r3, #0
 801e76c:	4622      	mov	r2, r4
 801e76e:	4918      	ldr	r1, [pc, #96]	; (801e7d0 <HAL_UART_TxCpltCallback+0x88>)
 801e770:	4818      	ldr	r0, [pc, #96]	; (801e7d4 <HAL_UART_TxCpltCallback+0x8c>)
 801e772:	6800      	ldr	r0, [r0, #0]
 801e774:	f7f5 f968 	bl	8013a48 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken == pdTRUE) {
 801e778:	6823      	ldr	r3, [r4, #0]
 801e77a:	2b01      	cmp	r3, #1
 801e77c:	d1ef      	bne.n	801e75e <HAL_UART_TxCpltCallback+0x16>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d0ed      	beq.n	801e75e <HAL_UART_TxCpltCallback+0x16>
 801e782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e786:	4b14      	ldr	r3, [pc, #80]	; (801e7d8 <HAL_UART_TxCpltCallback+0x90>)
 801e788:	601a      	str	r2, [r3, #0]
 801e78a:	f3bf 8f4f 	dsb	sy
 801e78e:	f3bf 8f6f 	isb	sy
 801e792:	bd10      	pop	{r4, pc}
		xQueueSendFromISR(cleaner_queue, &(hlog.interface->pTxBuffPtr),
 801e794:	4c0a      	ldr	r4, [pc, #40]	; (801e7c0 <HAL_UART_TxCpltCallback+0x78>)
 801e796:	2300      	movs	r3, #0
 801e798:	4622      	mov	r2, r4
 801e79a:	3120      	adds	r1, #32
 801e79c:	480d      	ldr	r0, [pc, #52]	; (801e7d4 <HAL_UART_TxCpltCallback+0x8c>)
 801e79e:	6800      	ldr	r0, [r0, #0]
 801e7a0:	f7f5 f952 	bl	8013a48 <xQueueGenericSendFromISR>
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
 801e7a4:	6823      	ldr	r3, [r4, #0]
 801e7a6:	2b01      	cmp	r3, #1
 801e7a8:	d1d9      	bne.n	801e75e <HAL_UART_TxCpltCallback+0x16>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	d0d7      	beq.n	801e75e <HAL_UART_TxCpltCallback+0x16>
 801e7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e7b2:	4b09      	ldr	r3, [pc, #36]	; (801e7d8 <HAL_UART_TxCpltCallback+0x90>)
 801e7b4:	601a      	str	r2, [r3, #0]
 801e7b6:	f3bf 8f4f 	dsb	sy
 801e7ba:	f3bf 8f6f 	isb	sy
		}
	}
}
 801e7be:	e7ce      	b.n	801e75e <HAL_UART_TxCpltCallback+0x16>
 801e7c0:	20009e90 	.word	0x20009e90
 801e7c4:	20011ff4 	.word	0x20011ff4
 801e7c8:	20011e5c 	.word	0x20011e5c
 801e7cc:	40021000 	.word	0x40021000
 801e7d0:	20012014 	.word	0x20012014
 801e7d4:	20011df8 	.word	0x20011df8
 801e7d8:	e000ed04 	.word	0xe000ed04

0801e7dc <StartProcessTask>:

void StartProcessTask(void const * argument) {
 801e7dc:	b510      	push	{r4, lr}
 801e7de:	b082      	sub	sp, #8
	uint8_t len;
	static uint8_t cmd_data_buf[SIZE_OF_CMD_BUF];

	error_t err = NO_ERR;
	err = CB_Init(&inbuf_UART, UART_BUFF_SIZE);
 801e7e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e7e4:	481a      	ldr	r0, [pc, #104]	; (801e850 <StartProcessTask+0x74>)
 801e7e6:	f7fe f82d 	bl	801c844 <CB_Init>
	if (err != NO_ERR) {
 801e7ea:	b120      	cbz	r0, 801e7f6 <StartProcessTask+0x1a>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 801e7ec:	4a19      	ldr	r2, [pc, #100]	; (801e854 <StartProcessTask+0x78>)
 801e7ee:	2101      	movs	r1, #1
 801e7f0:	2000      	movs	r0, #0
 801e7f2:	f7ff fc19 	bl	801e028 <LogText__>
				"Circular buffer allocation error.\r\n");
	}
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 801e7f6:	2201      	movs	r2, #1
 801e7f8:	4917      	ldr	r1, [pc, #92]	; (801e858 <StartProcessTask+0x7c>)
 801e7fa:	4818      	ldr	r0, [pc, #96]	; (801e85c <StartProcessTask+0x80>)
 801e7fc:	f7f4 f80c 	bl	8012818 <HAL_UART_Receive_IT>
 801e800:	e015      	b.n	801e82e <StartProcessTask+0x52>
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
		cmd_data_buf[SIZE_OF_CMD_BUF - 1] = len;
		uint pos = 0;
		while (len) {
			uint8_t ch;
			CB_Read(&inbuf_UART, &ch);
 801e802:	f10d 0106 	add.w	r1, sp, #6
 801e806:	4812      	ldr	r0, [pc, #72]	; (801e850 <StartProcessTask+0x74>)
 801e808:	f7fe f850 	bl	801c8ac <CB_Read>
			--len;
 801e80c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e810:	3b01      	subs	r3, #1
 801e812:	f88d 3007 	strb.w	r3, [sp, #7]
			cmd_data_buf[pos++] = ch;
 801e816:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801e81a:	4b11      	ldr	r3, [pc, #68]	; (801e860 <StartProcessTask+0x84>)
 801e81c:	551a      	strb	r2, [r3, r4]
 801e81e:	3401      	adds	r4, #1
		while (len) {
 801e820:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e824:	2b00      	cmp	r3, #0
 801e826:	d1ec      	bne.n	801e802 <StartProcessTask+0x26>
		}
		CommandParser(cmd_data_buf);
 801e828:	480d      	ldr	r0, [pc, #52]	; (801e860 <StartProcessTask+0x84>)
 801e82a:	f000 f83b 	bl	801e8a4 <CommandParser>
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
 801e82e:	2300      	movs	r3, #0
 801e830:	f04f 32ff 	mov.w	r2, #4294967295
 801e834:	f10d 0107 	add.w	r1, sp, #7
 801e838:	480a      	ldr	r0, [pc, #40]	; (801e864 <StartProcessTask+0x88>)
 801e83a:	6800      	ldr	r0, [r0, #0]
 801e83c:	f7f5 f9d2 	bl	8013be4 <xQueueGenericReceive>
		cmd_data_buf[SIZE_OF_CMD_BUF - 1] = len;
 801e840:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801e844:	4b06      	ldr	r3, [pc, #24]	; (801e860 <StartProcessTask+0x84>)
 801e846:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		uint pos = 0;
 801e84a:	2400      	movs	r4, #0
		while (len) {
 801e84c:	e7e8      	b.n	801e820 <StartProcessTask+0x44>
 801e84e:	bf00      	nop
 801e850:	20011eb4 	.word	0x20011eb4
 801e854:	08024ac8 	.word	0x08024ac8
 801e858:	20011eb0 	.word	0x20011eb0
 801e85c:	20011ff4 	.word	0x20011ff4
 801e860:	20009d8c 	.word	0x20009d8c
 801e864:	20011de8 	.word	0x20011de8

0801e868 <ProtocolSettingsInit>:
/* ---------- FUNCTIONS ------------ */
/* -------||--||--||--||--||-------- */
/* -------\/--\/--\/--\/--\/-------- */

void ProtocolSettingsInit(profibus_MPI_t* hp) {
	hp->own_address = hflash.own_addr;
 801e868:	4b06      	ldr	r3, [pc, #24]	; (801e884 <ProtocolSettingsInit+0x1c>)
 801e86a:	889a      	ldrh	r2, [r3, #4]
 801e86c:	7002      	strb	r2, [r0, #0]
	hp->speed = hflash.speed;
 801e86e:	681b      	ldr	r3, [r3, #0]
 801e870:	6083      	str	r3, [r0, #8]
	hp->token_possession = 0U;
 801e872:	2300      	movs	r3, #0
 801e874:	7043      	strb	r3, [r0, #1]
	hp->confirm_status = CONF_OK;
 801e876:	2203      	movs	r2, #3
 801e878:	7082      	strb	r2, [r0, #2]
	hp->conn_stat = CONN_NO;
 801e87a:	70c3      	strb	r3, [r0, #3]
	hp->wait_for_answer = 0U;
 801e87c:	7103      	strb	r3, [r0, #4]
	hp->data_ptr = NULL;
 801e87e:	60c3      	str	r3, [r0, #12]
	hp->data_len = 0U;
 801e880:	7403      	strb	r3, [r0, #16]
 801e882:	4770      	bx	lr
 801e884:	2000ecd8 	.word	0x2000ecd8

0801e888 <CalculateFCS>:
}

uint8_t CalculateFCS(uint8_t * buf, uint8_t len) {
	uint8_t result = 0;
 801e888:	2200      	movs	r2, #0
	while (len--) {
 801e88a:	e004      	b.n	801e896 <CalculateFCS+0xe>
		result += *buf++;
 801e88c:	7801      	ldrb	r1, [r0, #0]
 801e88e:	440a      	add	r2, r1
 801e890:	b2d2      	uxtb	r2, r2
	while (len--) {
 801e892:	4619      	mov	r1, r3
		result += *buf++;
 801e894:	3001      	adds	r0, #1
	while (len--) {
 801e896:	1e4b      	subs	r3, r1, #1
 801e898:	b2db      	uxtb	r3, r3
 801e89a:	2900      	cmp	r1, #0
 801e89c:	d1f6      	bne.n	801e88c <CalculateFCS+0x4>
	}
	return result;
}
 801e89e:	4610      	mov	r0, r2
 801e8a0:	4770      	bx	lr
	...

0801e8a4 <CommandParser>:
	return NO_ERR;
}

error_t CommandParser(uint8_t *buf) {
	static telegram_t htel;
	htel.SD = *buf++;
 801e8a4:	7803      	ldrb	r3, [r0, #0]
 801e8a6:	4aa4      	ldr	r2, [pc, #656]	; (801eb38 <CommandParser+0x294>)
 801e8a8:	7013      	strb	r3, [r2, #0]
	switch (htel.SD) {
 801e8aa:	2ba2      	cmp	r3, #162	; 0xa2
 801e8ac:	f000 81b2 	beq.w	801ec14 <CommandParser+0x370>
error_t CommandParser(uint8_t *buf) {
 801e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8b2:	b083      	sub	sp, #12
 801e8b4:	f100 0501 	add.w	r5, r0, #1
 801e8b8:	4604      	mov	r4, r0
	switch (htel.SD) {
 801e8ba:	d80f      	bhi.n	801e8dc <CommandParser+0x38>
 801e8bc:	2b10      	cmp	r3, #16
 801e8be:	f000 80b6 	beq.w	801ea2e <CommandParser+0x18a>
 801e8c2:	2b68      	cmp	r3, #104	; 0x68
 801e8c4:	d117      	bne.n	801e8f6 <CommandParser+0x52>
		break;
	case 0x68:
		/* Variable length data */
		/* Format by wiki: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|PDU|FCS|ED| */
		/* Real MPI frame: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|F1/[B0|0x]|RN|PDU|FCS|ED| */
		htel.LE = *buf++;
 801e8c6:	7845      	ldrb	r5, [r0, #1]
 801e8c8:	4a9b      	ldr	r2, [pc, #620]	; (801eb38 <CommandParser+0x294>)
 801e8ca:	7055      	strb	r5, [r2, #1]
		htel.LEr = *buf++;
 801e8cc:	7883      	ldrb	r3, [r0, #2]
 801e8ce:	7093      	strb	r3, [r2, #2]
		buf++;
 801e8d0:	1d06      	adds	r6, r0, #4
		if (htel.LE != htel.LEr) {
 801e8d2:	429d      	cmp	r5, r3
 801e8d4:	f000 80d3 	beq.w	801ea7e <CommandParser+0x1da>
			return FRAME_ERR;
 801e8d8:	2006      	movs	r0, #6
 801e8da:	e00d      	b.n	801e8f8 <CommandParser+0x54>
	switch (htel.SD) {
 801e8dc:	2bdc      	cmp	r3, #220	; 0xdc
 801e8de:	d00d      	beq.n	801e8fc <CommandParser+0x58>
 801e8e0:	2be5      	cmp	r3, #229	; 0xe5
 801e8e2:	d108      	bne.n	801e8f6 <CommandParser+0x52>
	case 0xA2:
		/* Fixed length data */
		break;
	case 0xE5:
		/* Acknowledgment */
		SendTokenMsg(htel.SA, hprot.own_address);
 801e8e4:	4c95      	ldr	r4, [pc, #596]	; (801eb3c <CommandParser+0x298>)
 801e8e6:	7821      	ldrb	r1, [r4, #0]
 801e8e8:	4b93      	ldr	r3, [pc, #588]	; (801eb38 <CommandParser+0x294>)
 801e8ea:	7918      	ldrb	r0, [r3, #4]
 801e8ec:	f7ff fe06 	bl	801e4fc <SendTokenMsg>
		hprot.token_possession = 0U;
 801e8f0:	2000      	movs	r0, #0
 801e8f2:	7060      	strb	r0, [r4, #1]
		return NO_ERR;
 801e8f4:	e000      	b.n	801e8f8 <CommandParser+0x54>
		break;
	default:
		return UNKNOWN_SD_ERR;
 801e8f6:	2005      	movs	r0, #5
	}
	return NO_ERR;
}
 801e8f8:	b003      	add	sp, #12
 801e8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		htel.DA = *buf++;
 801e8fc:	7843      	ldrb	r3, [r0, #1]
 801e8fe:	4a8e      	ldr	r2, [pc, #568]	; (801eb38 <CommandParser+0x294>)
 801e900:	70d3      	strb	r3, [r2, #3]
		if (htel.DA != hprot.own_address) {
 801e902:	4a8e      	ldr	r2, [pc, #568]	; (801eb3c <CommandParser+0x298>)
 801e904:	7812      	ldrb	r2, [r2, #0]
 801e906:	4293      	cmp	r3, r2
 801e908:	d001      	beq.n	801e90e <CommandParser+0x6a>
			return NO_ERR;
 801e90a:	2000      	movs	r0, #0
 801e90c:	e7f4      	b.n	801e8f8 <CommandParser+0x54>
		htel.SA = *buf;
 801e90e:	7882      	ldrb	r2, [r0, #2]
 801e910:	4b89      	ldr	r3, [pc, #548]	; (801eb38 <CommandParser+0x294>)
 801e912:	711a      	strb	r2, [r3, #4]
	if ((hprot.conn_stat == CONN_CLOSE) && (hprot.confirm_status != CONF_NEED08)) {
 801e914:	4b89      	ldr	r3, [pc, #548]	; (801eb3c <CommandParser+0x298>)
 801e916:	78db      	ldrb	r3, [r3, #3]
 801e918:	b2db      	uxtb	r3, r3
 801e91a:	2b04      	cmp	r3, #4
 801e91c:	d02f      	beq.n	801e97e <CommandParser+0xda>
	} else if (hprot.confirm_status == CONF_NEED07) {
 801e91e:	4b87      	ldr	r3, [pc, #540]	; (801eb3c <CommandParser+0x298>)
 801e920:	789b      	ldrb	r3, [r3, #2]
 801e922:	2b00      	cmp	r3, #0
 801e924:	d036      	beq.n	801e994 <CommandParser+0xf0>
	} else if (hprot.confirm_status == CONF_NEED08) {
 801e926:	4b85      	ldr	r3, [pc, #532]	; (801eb3c <CommandParser+0x298>)
 801e928:	789b      	ldrb	r3, [r3, #2]
 801e92a:	b2db      	uxtb	r3, r3
 801e92c:	2b01      	cmp	r3, #1
 801e92e:	d03a      	beq.n	801e9a6 <CommandParser+0x102>
	} else if (hprot.confirm_status == CONF_NEED07_AGAIN) {
 801e930:	4b82      	ldr	r3, [pc, #520]	; (801eb3c <CommandParser+0x298>)
 801e932:	789b      	ldrb	r3, [r3, #2]
 801e934:	b2db      	uxtb	r3, r3
 801e936:	2b04      	cmp	r3, #4
 801e938:	d03e      	beq.n	801e9b8 <CommandParser+0x114>
		if (xQueuePeek(tcp_client_queue,&parc,0) != pdPASS) {
 801e93a:	2301      	movs	r3, #1
 801e93c:	2200      	movs	r2, #0
 801e93e:	4669      	mov	r1, sp
 801e940:	487f      	ldr	r0, [pc, #508]	; (801eb40 <CommandParser+0x29c>)
 801e942:	6800      	ldr	r0, [r0, #0]
 801e944:	f7f5 f94e 	bl	8013be4 <xQueueGenericReceive>
 801e948:	2801      	cmp	r0, #1
 801e94a:	d13e      	bne.n	801e9ca <CommandParser+0x126>
			hprot.token_possession = 1U;
 801e94c:	4b7b      	ldr	r3, [pc, #492]	; (801eb3c <CommandParser+0x298>)
 801e94e:	2201      	movs	r2, #1
 801e950:	705a      	strb	r2, [r3, #1]
			if (hprot.conn_stat == CONN_OK) {
 801e952:	78db      	ldrb	r3, [r3, #3]
 801e954:	b2db      	uxtb	r3, r3
 801e956:	2b02      	cmp	r3, #2
 801e958:	d041      	beq.n	801e9de <CommandParser+0x13a>
			} else if (hprot.conn_stat == CONN_NO) {
 801e95a:	4b78      	ldr	r3, [pc, #480]	; (801eb3c <CommandParser+0x298>)
 801e95c:	78db      	ldrb	r3, [r3, #3]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d055      	beq.n	801ea0e <CommandParser+0x16a>
			} else if (hprot.conn_stat == CONN_AGAIN) {
 801e962:	4b76      	ldr	r3, [pc, #472]	; (801eb3c <CommandParser+0x298>)
 801e964:	78db      	ldrb	r3, [r3, #3]
 801e966:	b2db      	uxtb	r3, r3
 801e968:	2b03      	cmp	r3, #3
 801e96a:	d058      	beq.n	801ea1e <CommandParser+0x17a>
				SendTokenMsg(tel->SA, hprot.own_address);
 801e96c:	4c73      	ldr	r4, [pc, #460]	; (801eb3c <CommandParser+0x298>)
 801e96e:	7821      	ldrb	r1, [r4, #0]
 801e970:	4b71      	ldr	r3, [pc, #452]	; (801eb38 <CommandParser+0x294>)
 801e972:	7918      	ldrb	r0, [r3, #4]
 801e974:	f7ff fdc2 	bl	801e4fc <SendTokenMsg>
				hprot.token_possession = 0U;
 801e978:	2300      	movs	r3, #0
 801e97a:	7063      	strb	r3, [r4, #1]
 801e97c:	e02d      	b.n	801e9da <CommandParser+0x136>
	if ((hprot.conn_stat == CONN_CLOSE) && (hprot.confirm_status != CONF_NEED08)) {
 801e97e:	4b6f      	ldr	r3, [pc, #444]	; (801eb3c <CommandParser+0x298>)
 801e980:	789b      	ldrb	r3, [r3, #2]
 801e982:	b2db      	uxtb	r3, r3
 801e984:	2b01      	cmp	r3, #1
 801e986:	d0ca      	beq.n	801e91e <CommandParser+0x7a>
		SendClosemMsg(tel->SA, hprot.own_address);
 801e988:	4b6c      	ldr	r3, [pc, #432]	; (801eb3c <CommandParser+0x298>)
 801e98a:	7819      	ldrb	r1, [r3, #0]
 801e98c:	b2d0      	uxtb	r0, r2
 801e98e:	f7ff fd15 	bl	801e3bc <SendClosemMsg>
 801e992:	e022      	b.n	801e9da <CommandParser+0x136>
		SendConfirmMsg(tel->SA, hprot.own_address, 0x07, 0x5C);
 801e994:	235c      	movs	r3, #92	; 0x5c
 801e996:	2207      	movs	r2, #7
 801e998:	4968      	ldr	r1, [pc, #416]	; (801eb3c <CommandParser+0x298>)
 801e99a:	7809      	ldrb	r1, [r1, #0]
 801e99c:	4866      	ldr	r0, [pc, #408]	; (801eb38 <CommandParser+0x294>)
 801e99e:	7900      	ldrb	r0, [r0, #4]
 801e9a0:	f7ff fd4c 	bl	801e43c <SendConfirmMsg>
 801e9a4:	e019      	b.n	801e9da <CommandParser+0x136>
		SendConfirmMsg(tel->SA, hprot.own_address, 0x08, 0x5C);
 801e9a6:	235c      	movs	r3, #92	; 0x5c
 801e9a8:	2208      	movs	r2, #8
 801e9aa:	4964      	ldr	r1, [pc, #400]	; (801eb3c <CommandParser+0x298>)
 801e9ac:	7809      	ldrb	r1, [r1, #0]
 801e9ae:	4862      	ldr	r0, [pc, #392]	; (801eb38 <CommandParser+0x294>)
 801e9b0:	7900      	ldrb	r0, [r0, #4]
 801e9b2:	f7ff fd43 	bl	801e43c <SendConfirmMsg>
 801e9b6:	e010      	b.n	801e9da <CommandParser+0x136>
		SendConfirmMsg(tel->SA, hprot.own_address, 0x07, 0x7C);
 801e9b8:	237c      	movs	r3, #124	; 0x7c
 801e9ba:	2207      	movs	r2, #7
 801e9bc:	495f      	ldr	r1, [pc, #380]	; (801eb3c <CommandParser+0x298>)
 801e9be:	7809      	ldrb	r1, [r1, #0]
 801e9c0:	485d      	ldr	r0, [pc, #372]	; (801eb38 <CommandParser+0x294>)
 801e9c2:	7900      	ldrb	r0, [r0, #4]
 801e9c4:	f7ff fd3a 	bl	801e43c <SendConfirmMsg>
 801e9c8:	e007      	b.n	801e9da <CommandParser+0x136>
			SendTokenMsg(tel->SA, hprot.own_address);
 801e9ca:	4c5c      	ldr	r4, [pc, #368]	; (801eb3c <CommandParser+0x298>)
 801e9cc:	7821      	ldrb	r1, [r4, #0]
 801e9ce:	4b5a      	ldr	r3, [pc, #360]	; (801eb38 <CommandParser+0x294>)
 801e9d0:	7918      	ldrb	r0, [r3, #4]
 801e9d2:	f7ff fd93 	bl	801e4fc <SendTokenMsg>
			hprot.token_possession = 0U;
 801e9d6:	2300      	movs	r3, #0
 801e9d8:	7063      	strb	r3, [r4, #1]
		return TokenCmdProcessing(&htel);
 801e9da:	2000      	movs	r0, #0
 801e9dc:	e78c      	b.n	801e8f8 <CommandParser+0x54>
				parc.data = NULL;
 801e9de:	2200      	movs	r2, #0
 801e9e0:	a902      	add	r1, sp, #8
 801e9e2:	f841 2d08 	str.w	r2, [r1, #-8]!
				xQueueReceive(tcp_client_queue, &parc, 0);
 801e9e6:	4613      	mov	r3, r2
 801e9e8:	4855      	ldr	r0, [pc, #340]	; (801eb40 <CommandParser+0x29c>)
 801e9ea:	6800      	ldr	r0, [r0, #0]
 801e9ec:	f7f5 f8fa 	bl	8013be4 <xQueueGenericReceive>
				SendRequestMsg(tel->SA, hprot.own_address, parc.data, parc.len);
 801e9f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801e9f4:	9a00      	ldr	r2, [sp, #0]
 801e9f6:	4951      	ldr	r1, [pc, #324]	; (801eb3c <CommandParser+0x298>)
 801e9f8:	7809      	ldrb	r1, [r1, #0]
 801e9fa:	484f      	ldr	r0, [pc, #316]	; (801eb38 <CommandParser+0x294>)
 801e9fc:	7900      	ldrb	r0, [r0, #4]
 801e9fe:	f7ff fddd 	bl	801e5bc <SendRequestMsg>
				if (parc.data != NULL) {
 801ea02:	9800      	ldr	r0, [sp, #0]
 801ea04:	2800      	cmp	r0, #0
 801ea06:	d0e8      	beq.n	801e9da <CommandParser+0x136>
					vPortFree(parc.data);
 801ea08:	f7f4 fd8e 	bl	8013528 <vPortFree>
 801ea0c:	e7e5      	b.n	801e9da <CommandParser+0x136>
				SendConnectMsg(tel->SA, hprot.own_address, 0x6D);
 801ea0e:	226d      	movs	r2, #109	; 0x6d
 801ea10:	4b4a      	ldr	r3, [pc, #296]	; (801eb3c <CommandParser+0x298>)
 801ea12:	7819      	ldrb	r1, [r3, #0]
 801ea14:	4b48      	ldr	r3, [pc, #288]	; (801eb38 <CommandParser+0x294>)
 801ea16:	7918      	ldrb	r0, [r3, #4]
 801ea18:	f7ff fe26 	bl	801e668 <SendConnectMsg>
 801ea1c:	e7dd      	b.n	801e9da <CommandParser+0x136>
				SendConnectMsg(tel->SA, hprot.own_address, 0x5D);
 801ea1e:	225d      	movs	r2, #93	; 0x5d
 801ea20:	4b46      	ldr	r3, [pc, #280]	; (801eb3c <CommandParser+0x298>)
 801ea22:	7819      	ldrb	r1, [r3, #0]
 801ea24:	4b44      	ldr	r3, [pc, #272]	; (801eb38 <CommandParser+0x294>)
 801ea26:	7918      	ldrb	r0, [r3, #4]
 801ea28:	f7ff fe1e 	bl	801e668 <SendConnectMsg>
 801ea2c:	e7d5      	b.n	801e9da <CommandParser+0x136>
		if (CalculateFCS(buf, 3) != *(buf + 3)) {
 801ea2e:	2103      	movs	r1, #3
 801ea30:	4628      	mov	r0, r5
 801ea32:	f7ff ff29 	bl	801e888 <CalculateFCS>
 801ea36:	7923      	ldrb	r3, [r4, #4]
 801ea38:	4298      	cmp	r0, r3
 801ea3a:	d001      	beq.n	801ea40 <CommandParser+0x19c>
			return FCS_ERR;
 801ea3c:	2007      	movs	r0, #7
 801ea3e:	e75b      	b.n	801e8f8 <CommandParser+0x54>
		htel.DA = *buf++;
 801ea40:	7861      	ldrb	r1, [r4, #1]
 801ea42:	4b3d      	ldr	r3, [pc, #244]	; (801eb38 <CommandParser+0x294>)
 801ea44:	70d9      	strb	r1, [r3, #3]
		if (htel.DA != hprot.own_address) {
 801ea46:	4b3d      	ldr	r3, [pc, #244]	; (801eb3c <CommandParser+0x298>)
 801ea48:	781b      	ldrb	r3, [r3, #0]
 801ea4a:	4299      	cmp	r1, r3
 801ea4c:	d001      	beq.n	801ea52 <CommandParser+0x1ae>
			return NO_ERR;
 801ea4e:	2000      	movs	r0, #0
 801ea50:	e752      	b.n	801e8f8 <CommandParser+0x54>
		htel.SA = *buf++;
 801ea52:	78a0      	ldrb	r0, [r4, #2]
 801ea54:	4b38      	ldr	r3, [pc, #224]	; (801eb38 <CommandParser+0x294>)
 801ea56:	7118      	strb	r0, [r3, #4]
		htel.FC = *buf++;
 801ea58:	78e2      	ldrb	r2, [r4, #3]
 801ea5a:	715a      	strb	r2, [r3, #5]
		htel.FCS = *buf++;
 801ea5c:	7925      	ldrb	r5, [r4, #4]
 801ea5e:	741d      	strb	r5, [r3, #16]
		htel.ED = *buf;
 801ea60:	7964      	ldrb	r4, [r4, #5]
 801ea62:	745c      	strb	r4, [r3, #17]
	if (tel->FC == 0x49) {
 801ea64:	2a49      	cmp	r2, #73	; 0x49
 801ea66:	d001      	beq.n	801ea6c <CommandParser+0x1c8>
		return NoDataCmdProcessing(&htel);
 801ea68:	2000      	movs	r0, #0
 801ea6a:	e745      	b.n	801e8f8 <CommandParser+0x54>
		SendNoDataMsg(tel->SA, tel->DA, 0x20);
 801ea6c:	2220      	movs	r2, #32
 801ea6e:	f7ff fd7f 	bl	801e570 <SendNoDataMsg>
		hprot.master_address = tel->SA;
 801ea72:	4b31      	ldr	r3, [pc, #196]	; (801eb38 <CommandParser+0x294>)
 801ea74:	791a      	ldrb	r2, [r3, #4]
 801ea76:	4b31      	ldr	r3, [pc, #196]	; (801eb3c <CommandParser+0x298>)
 801ea78:	745a      	strb	r2, [r3, #17]
		return NoDataCmdProcessing(&htel);
 801ea7a:	2000      	movs	r0, #0
 801ea7c:	e73c      	b.n	801e8f8 <CommandParser+0x54>
		if (CalculateFCS(buf, htel.LE) != *(buf + htel.LE)) {
 801ea7e:	4629      	mov	r1, r5
 801ea80:	4630      	mov	r0, r6
 801ea82:	f7ff ff01 	bl	801e888 <CalculateFCS>
 801ea86:	5d73      	ldrb	r3, [r6, r5]
 801ea88:	4298      	cmp	r0, r3
 801ea8a:	d001      	beq.n	801ea90 <CommandParser+0x1ec>
			return FCS_ERR;
 801ea8c:	2007      	movs	r0, #7
 801ea8e:	e733      	b.n	801e8f8 <CommandParser+0x54>
		htel.DA = *buf++;
 801ea90:	7923      	ldrb	r3, [r4, #4]
 801ea92:	4a29      	ldr	r2, [pc, #164]	; (801eb38 <CommandParser+0x294>)
 801ea94:	70d3      	strb	r3, [r2, #3]
		if ((htel.DA & 0x7F) != hprot.own_address) { /* Broadcast message */
 801ea96:	4a29      	ldr	r2, [pc, #164]	; (801eb3c <CommandParser+0x298>)
 801ea98:	7812      	ldrb	r2, [r2, #0]
 801ea9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ea9e:	4293      	cmp	r3, r2
 801eaa0:	d001      	beq.n	801eaa6 <CommandParser+0x202>
			return NO_ERR;
 801eaa2:	2000      	movs	r0, #0
 801eaa4:	e728      	b.n	801e8f8 <CommandParser+0x54>
		htel.SA = *buf++;
 801eaa6:	7963      	ldrb	r3, [r4, #5]
 801eaa8:	4a23      	ldr	r2, [pc, #140]	; (801eb38 <CommandParser+0x294>)
 801eaaa:	7113      	strb	r3, [r2, #4]
		htel.FC = *buf++;
 801eaac:	79a3      	ldrb	r3, [r4, #6]
 801eaae:	7153      	strb	r3, [r2, #5]
		htel.DSAP = *buf++;
 801eab0:	79e3      	ldrb	r3, [r4, #7]
 801eab2:	7193      	strb	r3, [r2, #6]
		htel.SSAP = *buf++;
 801eab4:	7a23      	ldrb	r3, [r4, #8]
 801eab6:	71d3      	strb	r3, [r2, #7]
		htel.UK1 = *buf++;
 801eab8:	7a63      	ldrb	r3, [r4, #9]
 801eaba:	7213      	strb	r3, [r2, #8]
		if (htel.UK1 == 0xC0) {
 801eabc:	2bc0      	cmp	r3, #192	; 0xc0
 801eabe:	d019      	beq.n	801eaf4 <CommandParser+0x250>
		} else if (htel.UK1 == 0xB0) {
 801eac0:	2bb0      	cmp	r3, #176	; 0xb0
 801eac2:	d02f      	beq.n	801eb24 <CommandParser+0x280>
		} else if (htel.UK1 == 0xD0) {
 801eac4:	2bd0      	cmp	r3, #208	; 0xd0
 801eac6:	d03d      	beq.n	801eb44 <CommandParser+0x2a0>
		} else if (htel.UK1 == 0x05) {
 801eac8:	2b05      	cmp	r3, #5
 801eaca:	d051      	beq.n	801eb70 <CommandParser+0x2cc>
			htel.RN = *buf++;
 801eacc:	f104 060b 	add.w	r6, r4, #11
 801ead0:	7aa3      	ldrb	r3, [r4, #10]
 801ead2:	4c19      	ldr	r4, [pc, #100]	; (801eb38 <CommandParser+0x294>)
 801ead4:	72a3      	strb	r3, [r4, #10]
			uint pdu_size = htel.LE - 7;
 801ead6:	3d07      	subs	r5, #7
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 801ead8:	4628      	mov	r0, r5
 801eada:	f7f4 fca1 	bl	8013420 <pvPortMalloc>
 801eade:	60e0      	str	r0, [r4, #12]
			memcpy(htel.PDU, buf, pdu_size);
 801eae0:	462a      	mov	r2, r5
 801eae2:	4631      	mov	r1, r6
 801eae4:	f000 ffb9 	bl	801fa5a <memcpy>
			buf += pdu_size;
 801eae8:	1973      	adds	r3, r6, r5
			htel.FCS = *buf++;
 801eaea:	5d72      	ldrb	r2, [r6, r5]
 801eaec:	7422      	strb	r2, [r4, #16]
			htel.ED = *buf;
 801eaee:	785b      	ldrb	r3, [r3, #1]
 801eaf0:	7463      	strb	r3, [r4, #17]
 801eaf2:	e004      	b.n	801eafe <CommandParser+0x25a>
			htel.FCS = *buf++;
 801eaf4:	7aa2      	ldrb	r2, [r4, #10]
 801eaf6:	4b10      	ldr	r3, [pc, #64]	; (801eb38 <CommandParser+0x294>)
 801eaf8:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 801eafa:	7ae2      	ldrb	r2, [r4, #11]
 801eafc:	745a      	strb	r2, [r3, #17]
	if (tel->UK1 == 0xD0) {
 801eafe:	4b0e      	ldr	r3, [pc, #56]	; (801eb38 <CommandParser+0x294>)
 801eb00:	7a1b      	ldrb	r3, [r3, #8]
 801eb02:	2bd0      	cmp	r3, #208	; 0xd0
 801eb04:	d03c      	beq.n	801eb80 <CommandParser+0x2dc>
	} else if (tel->UK1 == 0x05) {
 801eb06:	2b05      	cmp	r3, #5
 801eb08:	d05e      	beq.n	801ebc8 <CommandParser+0x324>
	} else if (tel->UK1 == 0xB0) {
 801eb0a:	2bb0      	cmp	r3, #176	; 0xb0
 801eb0c:	d064      	beq.n	801ebd8 <CommandParser+0x334>
	} else if (tel->UK1 == 0xC0){
 801eb0e:	2bc0      	cmp	r3, #192	; 0xc0
 801eb10:	d03e      	beq.n	801eb90 <CommandParser+0x2ec>
	else if ((tel->FC == 0x7C) || (tel->FC == 0x5C)) {
 801eb12:	4b09      	ldr	r3, [pc, #36]	; (801eb38 <CommandParser+0x294>)
 801eb14:	795b      	ldrb	r3, [r3, #5]
 801eb16:	2b7c      	cmp	r3, #124	; 0x7c
 801eb18:	d061      	beq.n	801ebde <CommandParser+0x33a>
 801eb1a:	2b5c      	cmp	r3, #92	; 0x5c
 801eb1c:	d05f      	beq.n	801ebde <CommandParser+0x33a>
		SendAckMsg();
 801eb1e:	f7ff fc37 	bl	801e390 <SendAckMsg>
 801eb22:	e035      	b.n	801eb90 <CommandParser+0x2ec>
			htel.UK2 = *buf++;
 801eb24:	7aa2      	ldrb	r2, [r4, #10]
 801eb26:	4b04      	ldr	r3, [pc, #16]	; (801eb38 <CommandParser+0x294>)
 801eb28:	725a      	strb	r2, [r3, #9]
			htel.RN = *buf++;
 801eb2a:	7ae2      	ldrb	r2, [r4, #11]
 801eb2c:	729a      	strb	r2, [r3, #10]
			htel.FCS = *buf++;
 801eb2e:	7b22      	ldrb	r2, [r4, #12]
 801eb30:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 801eb32:	7b62      	ldrb	r2, [r4, #13]
 801eb34:	745a      	strb	r2, [r3, #17]
 801eb36:	e7e2      	b.n	801eafe <CommandParser+0x25a>
 801eb38:	20009e94 	.word	0x20009e94
 801eb3c:	20011ec4 	.word	0x20011ec4
 801eb40:	20011f18 	.word	0x20011f18
			htel.UK2 = *buf++;
 801eb44:	7aa3      	ldrb	r3, [r4, #10]
 801eb46:	4e34      	ldr	r6, [pc, #208]	; (801ec18 <CommandParser+0x374>)
 801eb48:	7273      	strb	r3, [r6, #9]
			htel.RN = *buf++;
 801eb4a:	f104 070c 	add.w	r7, r4, #12
 801eb4e:	7ae3      	ldrb	r3, [r4, #11]
 801eb50:	72b3      	strb	r3, [r6, #10]
			uint pdu_size = htel.LE - 8;
 801eb52:	3d08      	subs	r5, #8
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 801eb54:	4628      	mov	r0, r5
 801eb56:	f7f4 fc63 	bl	8013420 <pvPortMalloc>
 801eb5a:	60f0      	str	r0, [r6, #12]
			memcpy(htel.PDU, buf, pdu_size);
 801eb5c:	462a      	mov	r2, r5
 801eb5e:	4639      	mov	r1, r7
 801eb60:	f000 ff7b 	bl	801fa5a <memcpy>
			buf += pdu_size;
 801eb64:	197b      	adds	r3, r7, r5
			htel.FCS = *buf++;
 801eb66:	5d7a      	ldrb	r2, [r7, r5]
 801eb68:	7432      	strb	r2, [r6, #16]
			htel.ED = *buf;
 801eb6a:	785b      	ldrb	r3, [r3, #1]
 801eb6c:	7473      	strb	r3, [r6, #17]
 801eb6e:	e7c6      	b.n	801eafe <CommandParser+0x25a>
			htel.UK2 = *buf++;
 801eb70:	7aa2      	ldrb	r2, [r4, #10]
 801eb72:	4b29      	ldr	r3, [pc, #164]	; (801ec18 <CommandParser+0x374>)
 801eb74:	725a      	strb	r2, [r3, #9]
			htel.FCS = *buf++;
 801eb76:	7ae2      	ldrb	r2, [r4, #11]
 801eb78:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 801eb7a:	7b22      	ldrb	r2, [r4, #12]
 801eb7c:	745a      	strb	r2, [r3, #17]
 801eb7e:	e7be      	b.n	801eafe <CommandParser+0x25a>
		if (tel->FC == 0x6C) {
 801eb80:	4b25      	ldr	r3, [pc, #148]	; (801ec18 <CommandParser+0x374>)
 801eb82:	795b      	ldrb	r3, [r3, #5]
 801eb84:	2b6c      	cmp	r3, #108	; 0x6c
 801eb86:	d00d      	beq.n	801eba4 <CommandParser+0x300>
		if (tel->FC == 0x5C) {
 801eb88:	4b23      	ldr	r3, [pc, #140]	; (801ec18 <CommandParser+0x374>)
 801eb8a:	795b      	ldrb	r3, [r3, #5]
 801eb8c:	2b5c      	cmp	r3, #92	; 0x5c
 801eb8e:	d012      	beq.n	801ebb6 <CommandParser+0x312>
	if (tel->PDU != NULL) {
 801eb90:	4b21      	ldr	r3, [pc, #132]	; (801ec18 <CommandParser+0x374>)
 801eb92:	68d8      	ldr	r0, [r3, #12]
 801eb94:	b120      	cbz	r0, 801eba0 <CommandParser+0x2fc>
		vPortFree(tel->PDU);
 801eb96:	f7f4 fcc7 	bl	8013528 <vPortFree>
		tel->PDU = NULL;
 801eb9a:	2200      	movs	r2, #0
 801eb9c:	4b1e      	ldr	r3, [pc, #120]	; (801ec18 <CommandParser+0x374>)
 801eb9e:	60da      	str	r2, [r3, #12]
		return VarDataCmdProcessing(&htel);
 801eba0:	2000      	movs	r0, #0
 801eba2:	e6a9      	b.n	801e8f8 <CommandParser+0x54>
			hprot.confirm_status = CONF_NEED07;
 801eba4:	4b1d      	ldr	r3, [pc, #116]	; (801ec1c <CommandParser+0x378>)
 801eba6:	2200      	movs	r2, #0
 801eba8:	709a      	strb	r2, [r3, #2]
			hprot.master_SAP = tel->SSAP;
 801ebaa:	4a1b      	ldr	r2, [pc, #108]	; (801ec18 <CommandParser+0x374>)
 801ebac:	79d2      	ldrb	r2, [r2, #7]
 801ebae:	749a      	strb	r2, [r3, #18]
			SendAckMsg();
 801ebb0:	f7ff fbee 	bl	801e390 <SendAckMsg>
 801ebb4:	e7e8      	b.n	801eb88 <CommandParser+0x2e4>
			hprot.confirm_status = CONF_NEED07_AGAIN;
 801ebb6:	4b19      	ldr	r3, [pc, #100]	; (801ec1c <CommandParser+0x378>)
 801ebb8:	2204      	movs	r2, #4
 801ebba:	709a      	strb	r2, [r3, #2]
			hprot.master_SAP = tel->SSAP;
 801ebbc:	4a16      	ldr	r2, [pc, #88]	; (801ec18 <CommandParser+0x374>)
 801ebbe:	79d2      	ldrb	r2, [r2, #7]
 801ebc0:	749a      	strb	r2, [r3, #18]
			SendAckMsg();
 801ebc2:	f7ff fbe5 	bl	801e390 <SendAckMsg>
 801ebc6:	e7e3      	b.n	801eb90 <CommandParser+0x2ec>
		hprot.confirm_status = CONF_OK;
 801ebc8:	4b14      	ldr	r3, [pc, #80]	; (801ec1c <CommandParser+0x378>)
 801ebca:	2203      	movs	r2, #3
 801ebcc:	709a      	strb	r2, [r3, #2]
		hprot.conn_stat = CONN_OK;
 801ebce:	2202      	movs	r2, #2
 801ebd0:	70da      	strb	r2, [r3, #3]
		SendAckMsg();
 801ebd2:	f7ff fbdd 	bl	801e390 <SendAckMsg>
 801ebd6:	e7db      	b.n	801eb90 <CommandParser+0x2ec>
		SendAckMsg();
 801ebd8:	f7ff fbda 	bl	801e390 <SendAckMsg>
 801ebdc:	e7d8      	b.n	801eb90 <CommandParser+0x2ec>
		parc.len = tel->LE - 7;
 801ebde:	4c0e      	ldr	r4, [pc, #56]	; (801ec18 <CommandParser+0x374>)
 801ebe0:	7860      	ldrb	r0, [r4, #1]
 801ebe2:	3807      	subs	r0, #7
 801ebe4:	b280      	uxth	r0, r0
 801ebe6:	f8ad 0004 	strh.w	r0, [sp, #4]
		parc.data = pvPortMalloc(parc.len);
 801ebea:	f7f4 fc19 	bl	8013420 <pvPortMalloc>
 801ebee:	9000      	str	r0, [sp, #0]
		memcpy(parc.data, tel->PDU, parc.len);
 801ebf0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ebf4:	68e1      	ldr	r1, [r4, #12]
 801ebf6:	f000 ff30 	bl	801fa5a <memcpy>
		xQueueSend(protocol_queue, &parc, 0);
 801ebfa:	2300      	movs	r3, #0
 801ebfc:	461a      	mov	r2, r3
 801ebfe:	4669      	mov	r1, sp
 801ec00:	4807      	ldr	r0, [pc, #28]	; (801ec20 <CommandParser+0x37c>)
 801ec02:	6800      	ldr	r0, [r0, #0]
 801ec04:	f7f4 fe36 	bl	8013874 <xQueueGenericSend>
		hprot.confirm_status = CONF_NEED08;
 801ec08:	2201      	movs	r2, #1
 801ec0a:	4b04      	ldr	r3, [pc, #16]	; (801ec1c <CommandParser+0x378>)
 801ec0c:	709a      	strb	r2, [r3, #2]
		SendAckMsg();
 801ec0e:	f7ff fbbf 	bl	801e390 <SendAckMsg>
 801ec12:	e7bd      	b.n	801eb90 <CommandParser+0x2ec>
	return NO_ERR;
 801ec14:	2000      	movs	r0, #0
 801ec16:	4770      	bx	lr
 801ec18:	20009e94 	.word	0x20009e94
 801ec1c:	20011ec4 	.word	0x20011ec4
 801ec20:	20011ed8 	.word	0x20011ed8

0801ec24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801ec24:	b500      	push	{lr}
 801ec26:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ec28:	2200      	movs	r2, #0
 801ec2a:	9200      	str	r2, [sp, #0]
 801ec2c:	4b0d      	ldr	r3, [pc, #52]	; (801ec64 <HAL_MspInit+0x40>)
 801ec2e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801ec30:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 801ec34:	6459      	str	r1, [r3, #68]	; 0x44
 801ec36:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801ec38:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 801ec3c:	9100      	str	r1, [sp, #0]
 801ec3e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801ec40:	9201      	str	r2, [sp, #4]
 801ec42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801ec44:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 801ec48:	6419      	str	r1, [r3, #64]	; 0x40
 801ec4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ec50:	9301      	str	r3, [sp, #4]
 801ec52:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801ec54:	210f      	movs	r1, #15
 801ec56:	f06f 0001 	mvn.w	r0, #1
 801ec5a:	f7f1 fbdd 	bl	8010418 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801ec5e:	b003      	add	sp, #12
 801ec60:	f85d fb04 	ldr.w	pc, [sp], #4
 801ec64:	40023800 	.word	0x40023800

0801ec68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801ec68:	b510      	push	{r4, lr}
 801ec6a:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 801ec6c:	2200      	movs	r2, #0
 801ec6e:	4601      	mov	r1, r0
 801ec70:	2019      	movs	r0, #25
 801ec72:	f7f1 fbd1 	bl	8010418 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 801ec76:	2019      	movs	r0, #25
 801ec78:	f7f1 fc00 	bl	801047c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 801ec7c:	2400      	movs	r4, #0
 801ec7e:	9401      	str	r4, [sp, #4]
 801ec80:	4b14      	ldr	r3, [pc, #80]	; (801ecd4 <HAL_InitTick+0x6c>)
 801ec82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ec84:	f042 0201 	orr.w	r2, r2, #1
 801ec88:	645a      	str	r2, [r3, #68]	; 0x44
 801ec8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ec8c:	f003 0301 	and.w	r3, r3, #1
 801ec90:	9301      	str	r3, [sp, #4]
 801ec92:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801ec94:	a902      	add	r1, sp, #8
 801ec96:	a803      	add	r0, sp, #12
 801ec98:	f7f3 f8fc 	bl	8011e94 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 801ec9c:	f7f3 f8ea 	bl	8011e74 <HAL_RCC_GetPCLK2Freq>
 801eca0:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801eca2:	480d      	ldr	r0, [pc, #52]	; (801ecd8 <HAL_InitTick+0x70>)
 801eca4:	fba0 2303 	umull	r2, r3, r0, r3
 801eca8:	0c9b      	lsrs	r3, r3, #18
 801ecaa:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 801ecac:	480b      	ldr	r0, [pc, #44]	; (801ecdc <HAL_InitTick+0x74>)
 801ecae:	4a0c      	ldr	r2, [pc, #48]	; (801ece0 <HAL_InitTick+0x78>)
 801ecb0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 801ecb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 801ecb6:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801ecb8:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 801ecba:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ecbc:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 801ecbe:	f7f3 fb37 	bl	8012330 <HAL_TIM_Base_Init>
 801ecc2:	b110      	cbz	r0, 801ecca <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 801ecc4:	2001      	movs	r0, #1
}
 801ecc6:	b008      	add	sp, #32
 801ecc8:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 801ecca:	4804      	ldr	r0, [pc, #16]	; (801ecdc <HAL_InitTick+0x74>)
 801eccc:	f7f3 f93b 	bl	8011f46 <HAL_TIM_Base_Start_IT>
 801ecd0:	e7f9      	b.n	801ecc6 <HAL_InitTick+0x5e>
 801ecd2:	bf00      	nop
 801ecd4:	40023800 	.word	0x40023800
 801ecd8:	431bde83 	.word	0x431bde83
 801ecdc:	20011edc 	.word	0x20011edc
 801ece0:	40010000 	.word	0x40010000

0801ece4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801ece4:	4770      	bx	lr

0801ece6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801ece6:	e7fe      	b.n	801ece6 <HardFault_Handler>

0801ece8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801ece8:	e7fe      	b.n	801ece8 <MemManage_Handler>

0801ecea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801ecea:	e7fe      	b.n	801ecea <BusFault_Handler>

0801ecec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801ecec:	e7fe      	b.n	801ecec <UsageFault_Handler>

0801ecee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801ecee:	4770      	bx	lr

0801ecf0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 801ecf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801ecf2:	4802      	ldr	r0, [pc, #8]	; (801ecfc <TIM1_UP_TIM10_IRQHandler+0xc>)
 801ecf4:	f7f3 f9d1 	bl	801209a <HAL_TIM_IRQHandler>
 801ecf8:	bd08      	pop	{r3, pc}
 801ecfa:	bf00      	nop
 801ecfc:	20011edc 	.word	0x20011edc

0801ed00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 801ed00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801ed02:	4802      	ldr	r0, [pc, #8]	; (801ed0c <USART1_IRQHandler+0xc>)
 801ed04:	f7f3 fe9a 	bl	8012a3c <HAL_UART_IRQHandler>
 801ed08:	bd08      	pop	{r3, pc}
 801ed0a:	bf00      	nop
 801ed0c:	20012034 	.word	0x20012034

0801ed10 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 801ed10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801ed12:	4802      	ldr	r0, [pc, #8]	; (801ed1c <TIM8_UP_TIM13_IRQHandler+0xc>)
 801ed14:	f7f3 f9c1 	bl	801209a <HAL_TIM_IRQHandler>
 801ed18:	bd08      	pop	{r3, pc}
 801ed1a:	bf00      	nop
 801ed1c:	20011f1c 	.word	0x20011f1c

0801ed20 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 801ed20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 801ed22:	4802      	ldr	r0, [pc, #8]	; (801ed2c <DMA1_Stream7_IRQHandler+0xc>)
 801ed24:	f7f1 fd22 	bl	801076c <HAL_DMA_IRQHandler>
 801ed28:	bd08      	pop	{r3, pc}
 801ed2a:	bf00      	nop
 801ed2c:	20012074 	.word	0x20012074

0801ed30 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 801ed30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 801ed32:	4802      	ldr	r0, [pc, #8]	; (801ed3c <UART5_IRQHandler+0xc>)
 801ed34:	f7f3 fe82 	bl	8012a3c <HAL_UART_IRQHandler>
 801ed38:	bd08      	pop	{r3, pc}
 801ed3a:	bf00      	nop
 801ed3c:	20011ff4 	.word	0x20011ff4

0801ed40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 801ed40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801ed42:	4802      	ldr	r0, [pc, #8]	; (801ed4c <TIM7_IRQHandler+0xc>)
 801ed44:	f7f3 f9a9 	bl	801209a <HAL_TIM_IRQHandler>
 801ed48:	bd08      	pop	{r3, pc}
 801ed4a:	bf00      	nop
 801ed4c:	20011f58 	.word	0x20011f58

0801ed50 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 801ed50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 801ed52:	4802      	ldr	r0, [pc, #8]	; (801ed5c <ETH_IRQHandler+0xc>)
 801ed54:	f7f2 f854 	bl	8010e00 <HAL_ETH_IRQHandler>
 801ed58:	bd08      	pop	{r3, pc}
 801ed5a:	bf00      	nop
 801ed5c:	200105cc 	.word	0x200105cc

0801ed60 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 801ed60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 801ed62:	4802      	ldr	r0, [pc, #8]	; (801ed6c <DMA2_Stream7_IRQHandler+0xc>)
 801ed64:	f7f1 fd02 	bl	801076c <HAL_DMA_IRQHandler>
 801ed68:	bd08      	pop	{r3, pc}
 801ed6a:	bf00      	nop
 801ed6c:	20011f94 	.word	0x20011f94

0801ed70 <_write>:
	}

	return len;
}

int _write(int file, char *ptr, int len) {
 801ed70:	b430      	push	{r4, r5}
	int i = 0;
	for (i = 0; i < len; i++)
 801ed72:	2400      	movs	r4, #0
 801ed74:	e00a      	b.n	801ed8c <_write+0x1c>
  __ASM volatile ("nop");
 801ed76:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 801ed78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801ed7c:	681b      	ldr	r3, [r3, #0]
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d0f9      	beq.n	801ed76 <_write+0x6>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 801ed82:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801ed86:	7019      	strb	r1, [r3, #0]
 801ed88:	3401      	adds	r4, #1
		ITM_SendChar((*ptr++));
 801ed8a:	4629      	mov	r1, r5
	for (i = 0; i < len; i++)
 801ed8c:	4294      	cmp	r4, r2
 801ed8e:	da10      	bge.n	801edb2 <_write+0x42>
		ITM_SendChar((*ptr++));
 801ed90:	1c4d      	adds	r5, r1, #1
 801ed92:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801ed94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801ed98:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 801ed9c:	f013 0f01 	tst.w	r3, #1
 801eda0:	d0f2      	beq.n	801ed88 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801eda2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801eda6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801edaa:	f013 0f01 	tst.w	r3, #1
 801edae:	d1e3      	bne.n	801ed78 <_write+0x8>
 801edb0:	e7ea      	b.n	801ed88 <_write+0x18>
	return len;
}
 801edb2:	4610      	mov	r0, r2
 801edb4:	bc30      	pop	{r4, r5}
 801edb6:	4770      	bx	lr

0801edb8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801edb8:	490f      	ldr	r1, [pc, #60]	; (801edf8 <SystemInit+0x40>)
 801edba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801edbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801edc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801edc6:	4b0d      	ldr	r3, [pc, #52]	; (801edfc <SystemInit+0x44>)
 801edc8:	681a      	ldr	r2, [r3, #0]
 801edca:	f042 0201 	orr.w	r2, r2, #1
 801edce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801edd0:	2000      	movs	r0, #0
 801edd2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801edd4:	681a      	ldr	r2, [r3, #0]
 801edd6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801edda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801edde:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801ede0:	4a07      	ldr	r2, [pc, #28]	; (801ee00 <SystemInit+0x48>)
 801ede2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801ede4:	681a      	ldr	r2, [r3, #0]
 801ede6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801edea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801edec:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801edee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801edf2:	608b      	str	r3, [r1, #8]
 801edf4:	4770      	bx	lr
 801edf6:	bf00      	nop
 801edf8:	e000ed00 	.word	0xe000ed00
 801edfc:	40023800 	.word	0x40023800
 801ee00:	24003010 	.word	0x24003010

0801ee04 <Client_thread>:

#include "tcp_client.h"

xQueueHandle tcp_client_queue;

void Client_thread(void *arg) {
 801ee04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee06:	b08f      	sub	sp, #60	; 0x3c
 801ee08:	4605      	mov	r5, r0
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
	u16_t buflen;
	char *buf;

	uint8_t data_COTP[] = { 0x03, 0x00, 0x00, 0x16, 0x11, 0xD0, 0x00, 0x01,
 801ee0a:	ac04      	add	r4, sp, #16
 801ee0c:	4e5a      	ldr	r6, [pc, #360]	; (801ef78 <Client_thread+0x174>)
 801ee0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801ee10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ee12:	e896 0003 	ldmia.w	r6, {r0, r1}
 801ee16:	f844 0b04 	str.w	r0, [r4], #4
 801ee1a:	8021      	strh	r1, [r4, #0]
			0x00, 0x01, 0x00, 0xC1, 0x02, 0x01, 0x00, 0xC2, 0x02, 0x01, 0x02,
			0xC0, 0x01, 0x0A };

	osDelay(1);
 801ee1c:	2001      	movs	r0, #1
 801ee1e:	f7f3 fef5 	bl	8012c0c <osDelay>
 801ee22:	e094      	b.n	801ef4e <Client_thread+0x14a>
						data_COTP[18] = hprot.master_address;
						netconn_write(newconn,
								(const unsigned char* )(data_COTP),
								sizeof(data_COTP), NETCONN_COPY);
						if (hprot.conn_stat == CONN_CLOSED) {
							hprot.conn_stat = CONN_AGAIN;
 801ee24:	2203      	movs	r2, #3
 801ee26:	70e2      	strb	r2, [r4, #3]
 801ee28:	e030      	b.n	801ee8c <Client_thread+0x88>
						}
						hprot.req_num = 0;
					} else if (buf[7] == 0x32) {
 801ee2a:	79db      	ldrb	r3, [r3, #7]
 801ee2c:	2b32      	cmp	r3, #50	; 0x32
 801ee2e:	d031      	beq.n	801ee94 <Client_thread+0x90>
						vPortFree(parc.data);
						netconn_write(newconn, (const unsigned char* )(answer),
								parc.len + 7, NETCONN_COPY);
						vPortFree(answer);
					}
				} while (netbuf_next(inbuf) >= 0);
 801ee30:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ee32:	f7f7 f877 	bl	8015f24 <netbuf_next>
 801ee36:	2800      	cmp	r0, #0
 801ee38:	db76      	blt.n	801ef28 <Client_thread+0x124>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 801ee3a:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 801ee3e:	a90a      	add	r1, sp, #40	; 0x28
 801ee40:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ee42:	f7f7 f839 	bl	8015eb8 <netbuf_data>
					if ((buf[0] == 0x03) && (buf[1] == 0x00) && (buf[2] == 0x00)
 801ee46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee48:	781a      	ldrb	r2, [r3, #0]
 801ee4a:	2a03      	cmp	r2, #3
 801ee4c:	d1ed      	bne.n	801ee2a <Client_thread+0x26>
 801ee4e:	785a      	ldrb	r2, [r3, #1]
 801ee50:	2a00      	cmp	r2, #0
 801ee52:	d1ea      	bne.n	801ee2a <Client_thread+0x26>
 801ee54:	789a      	ldrb	r2, [r3, #2]
 801ee56:	2a00      	cmp	r2, #0
 801ee58:	d1e7      	bne.n	801ee2a <Client_thread+0x26>
							&& (buf[3] == 0x16) && (buf[21] == hprot.master_address)) {
 801ee5a:	78da      	ldrb	r2, [r3, #3]
 801ee5c:	2a16      	cmp	r2, #22
 801ee5e:	d1e4      	bne.n	801ee2a <Client_thread+0x26>
 801ee60:	7d59      	ldrb	r1, [r3, #21]
 801ee62:	4a46      	ldr	r2, [pc, #280]	; (801ef7c <Client_thread+0x178>)
 801ee64:	7c52      	ldrb	r2, [r2, #17]
 801ee66:	b2d2      	uxtb	r2, r2
 801ee68:	4291      	cmp	r1, r2
 801ee6a:	d1de      	bne.n	801ee2a <Client_thread+0x26>
						data_COTP[18] = hprot.master_address;
 801ee6c:	4c43      	ldr	r4, [pc, #268]	; (801ef7c <Client_thread+0x178>)
 801ee6e:	7c63      	ldrb	r3, [r4, #17]
 801ee70:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
						netconn_write(newconn,
 801ee74:	2300      	movs	r3, #0
 801ee76:	9300      	str	r3, [sp, #0]
 801ee78:	2301      	movs	r3, #1
 801ee7a:	2216      	movs	r2, #22
 801ee7c:	a904      	add	r1, sp, #16
 801ee7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ee80:	f7f5 ffc6 	bl	8014e10 <netconn_write_partly>
						if (hprot.conn_stat == CONN_CLOSED) {
 801ee84:	78e3      	ldrb	r3, [r4, #3]
 801ee86:	b2db      	uxtb	r3, r3
 801ee88:	2b05      	cmp	r3, #5
 801ee8a:	d0cb      	beq.n	801ee24 <Client_thread+0x20>
						hprot.req_num = 0;
 801ee8c:	2200      	movs	r2, #0
 801ee8e:	4b3b      	ldr	r3, [pc, #236]	; (801ef7c <Client_thread+0x178>)
 801ee90:	74da      	strb	r2, [r3, #19]
 801ee92:	e7cd      	b.n	801ee30 <Client_thread+0x2c>
						parc.len = buflen - 7;
 801ee94:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801ee98:	3807      	subs	r0, #7
 801ee9a:	b280      	uxth	r0, r0
 801ee9c:	f8ad 000c 	strh.w	r0, [sp, #12]
						parc.data = pvPortMalloc(parc.len);
 801eea0:	f7f4 fabe 	bl	8013420 <pvPortMalloc>
 801eea4:	9002      	str	r0, [sp, #8]
						memcpy(parc.data, buf + 7, parc.len);
 801eea6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801eeaa:	990a      	ldr	r1, [sp, #40]	; 0x28
 801eeac:	3107      	adds	r1, #7
 801eeae:	f000 fdd4 	bl	801fa5a <memcpy>
						xQueueSend(tcp_client_queue, &parc, 0);
 801eeb2:	2300      	movs	r3, #0
 801eeb4:	461a      	mov	r2, r3
 801eeb6:	a902      	add	r1, sp, #8
 801eeb8:	4831      	ldr	r0, [pc, #196]	; (801ef80 <Client_thread+0x17c>)
 801eeba:	6800      	ldr	r0, [r0, #0]
 801eebc:	f7f4 fcda 	bl	8013874 <xQueueGenericSend>
						xQueueReceive(protocol_queue, &parc, portMAX_DELAY);
 801eec0:	2300      	movs	r3, #0
 801eec2:	f04f 32ff 	mov.w	r2, #4294967295
 801eec6:	a902      	add	r1, sp, #8
 801eec8:	482e      	ldr	r0, [pc, #184]	; (801ef84 <Client_thread+0x180>)
 801eeca:	6800      	ldr	r0, [r0, #0]
 801eecc:	f7f4 fe8a 	bl	8013be4 <xQueueGenericReceive>
						answer = (uint8_t*) pvPortMalloc(parc.len + 7);
 801eed0:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 801eed4:	3007      	adds	r0, #7
 801eed6:	f7f4 faa3 	bl	8013420 <pvPortMalloc>
 801eeda:	4604      	mov	r4, r0
						answer[0] = 0x03;
 801eedc:	2303      	movs	r3, #3
 801eede:	7003      	strb	r3, [r0, #0]
						answer[1] = 0x00;
 801eee0:	2600      	movs	r6, #0
 801eee2:	7046      	strb	r6, [r0, #1]
						answer[2] = 0x00;
 801eee4:	7086      	strb	r6, [r0, #2]
						answer[3] = parc.len + 7;
 801eee6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801eeea:	3307      	adds	r3, #7
 801eeec:	70c3      	strb	r3, [r0, #3]
						answer[4] = 0x02;
 801eeee:	2302      	movs	r3, #2
 801eef0:	7103      	strb	r3, [r0, #4]
						answer[5] = 0xF0;
 801eef2:	23f0      	movs	r3, #240	; 0xf0
 801eef4:	7143      	strb	r3, [r0, #5]
						answer[6] = 0x80;
 801eef6:	2380      	movs	r3, #128	; 0x80
 801eef8:	7183      	strb	r3, [r0, #6]
						memcpy(answer + 7, parc.data, parc.len);
 801eefa:	9f02      	ldr	r7, [sp, #8]
 801eefc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801ef00:	4639      	mov	r1, r7
 801ef02:	3007      	adds	r0, #7
 801ef04:	f000 fda9 	bl	801fa5a <memcpy>
						vPortFree(parc.data);
 801ef08:	4638      	mov	r0, r7
 801ef0a:	f7f4 fb0d 	bl	8013528 <vPortFree>
						netconn_write(newconn, (const unsigned char* )(answer),
 801ef0e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801ef12:	9600      	str	r6, [sp, #0]
 801ef14:	2301      	movs	r3, #1
 801ef16:	3207      	adds	r2, #7
 801ef18:	4621      	mov	r1, r4
 801ef1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ef1c:	f7f5 ff78 	bl	8014e10 <netconn_write_partly>
						vPortFree(answer);
 801ef20:	4620      	mov	r0, r4
 801ef22:	f7f4 fb01 	bl	8013528 <vPortFree>
 801ef26:	e783      	b.n	801ee30 <Client_thread+0x2c>
				netbuf_delete(inbuf);
 801ef28:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ef2a:	f7f6 ffb5 	bl	8015e98 <netbuf_delete>
				err = netconn_recv(newconn, &inbuf);
 801ef2e:	a90d      	add	r1, sp, #52	; 0x34
 801ef30:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ef32:	f7f5 ff1b 	bl	8014d6c <netconn_recv>
			while (err == ERR_OK) {
 801ef36:	2800      	cmp	r0, #0
 801ef38:	f43f af7f 	beq.w	801ee3a <Client_thread+0x36>
			} /* while (err == ERR_OK) */
			if (err == ERR_CLSD) {
 801ef3c:	f110 0f0f 	cmn.w	r0, #15
 801ef40:	d010      	beq.n	801ef64 <Client_thread+0x160>
				if (hprot.conn_stat == CONN_OK) {
					hprot.conn_stat = CONN_CLOSE;
				}
			}
		}
		netconn_close(newconn);
 801ef42:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ef44:	f7f5 ffb8 	bl	8014eb8 <netconn_close>
		netconn_delete(newconn);
 801ef48:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ef4a:	f7f5 fe55 	bl	8014bf8 <netconn_delete>
		accept_err = netconn_accept(arg_conn, &newconn);
 801ef4e:	a90c      	add	r1, sp, #48	; 0x30
 801ef50:	4628      	mov	r0, r5
 801ef52:	f7f5 feaf 	bl	8014cb4 <netconn_accept>
		if (accept_err == ERR_OK) {
 801ef56:	2800      	cmp	r0, #0
 801ef58:	d1f3      	bne.n	801ef42 <Client_thread+0x13e>
			err = netconn_recv(newconn, &inbuf);
 801ef5a:	a90d      	add	r1, sp, #52	; 0x34
 801ef5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ef5e:	f7f5 ff05 	bl	8014d6c <netconn_recv>
			while (err == ERR_OK) {
 801ef62:	e7e8      	b.n	801ef36 <Client_thread+0x132>
				if (hprot.conn_stat == CONN_OK) {
 801ef64:	4b05      	ldr	r3, [pc, #20]	; (801ef7c <Client_thread+0x178>)
 801ef66:	78db      	ldrb	r3, [r3, #3]
 801ef68:	b2db      	uxtb	r3, r3
 801ef6a:	2b02      	cmp	r3, #2
 801ef6c:	d1e9      	bne.n	801ef42 <Client_thread+0x13e>
					hprot.conn_stat = CONN_CLOSE;
 801ef6e:	2204      	movs	r2, #4
 801ef70:	4b02      	ldr	r3, [pc, #8]	; (801ef7c <Client_thread+0x178>)
 801ef72:	70da      	strb	r2, [r3, #3]
 801ef74:	e7e5      	b.n	801ef42 <Client_thread+0x13e>
 801ef76:	bf00      	nop
 801ef78:	0801fd48 	.word	0x0801fd48
 801ef7c:	20011ec4 	.word	0x20011ec4
 801ef80:	20011f18 	.word	0x20011f18
 801ef84:	20011ed8 	.word	0x20011ed8

0801ef88 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 801ef88:	b500      	push	{lr}
 801ef8a:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	9300      	str	r3, [sp, #0]
 801ef90:	9301      	str	r3, [sp, #4]

  htim7.Instance = TIM7;
 801ef92:	480e      	ldr	r0, [pc, #56]	; (801efcc <MX_TIM7_Init+0x44>)
 801ef94:	4a0e      	ldr	r2, [pc, #56]	; (801efd0 <MX_TIM7_Init+0x48>)
 801ef96:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 801ef98:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ef9a:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 840;
 801ef9c:	f44f 7352 	mov.w	r3, #840	; 0x348
 801efa0:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801efa2:	f7f3 f9c5 	bl	8012330 <HAL_TIM_Base_Init>
 801efa6:	b950      	cbnz	r0, 801efbe <MX_TIM7_Init+0x36>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801efa8:	2300      	movs	r3, #0
 801efaa:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801efac:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801efae:	4669      	mov	r1, sp
 801efb0:	4806      	ldr	r0, [pc, #24]	; (801efcc <MX_TIM7_Init+0x44>)
 801efb2:	f7f3 f9d6 	bl	8012362 <HAL_TIMEx_MasterConfigSynchronization>
 801efb6:	b928      	cbnz	r0, 801efc4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
  }

}
 801efb8:	b003      	add	sp, #12
 801efba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801efbe:	f7ff f93b 	bl	801e238 <Error_Handler>
 801efc2:	e7f1      	b.n	801efa8 <MX_TIM7_Init+0x20>
    Error_Handler();
 801efc4:	f7ff f938 	bl	801e238 <Error_Handler>
}
 801efc8:	e7f6      	b.n	801efb8 <MX_TIM7_Init+0x30>
 801efca:	bf00      	nop
 801efcc:	20011f58 	.word	0x20011f58
 801efd0:	40001400 	.word	0x40001400

0801efd4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 801efd4:	b500      	push	{lr}
 801efd6:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801efd8:	2300      	movs	r3, #0
 801efda:	9302      	str	r3, [sp, #8]
 801efdc:	9303      	str	r3, [sp, #12]
 801efde:	9304      	str	r3, [sp, #16]
 801efe0:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801efe2:	9300      	str	r3, [sp, #0]
 801efe4:	9301      	str	r3, [sp, #4]

  htim8.Instance = TIM8;
 801efe6:	4815      	ldr	r0, [pc, #84]	; (801f03c <MX_TIM8_Init+0x68>)
 801efe8:	4a15      	ldr	r2, [pc, #84]	; (801f040 <MX_TIM8_Init+0x6c>)
 801efea:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 0;
 801efec:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801efee:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 27720;
 801eff0:	f646 4248 	movw	r2, #27720	; 0x6c48
 801eff4:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801eff6:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 801eff8:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801effa:	f7f3 f999 	bl	8012330 <HAL_TIM_Base_Init>
 801effe:	b998      	cbnz	r0, 801f028 <MX_TIM8_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801f000:	a906      	add	r1, sp, #24
 801f002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801f006:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801f00a:	480c      	ldr	r0, [pc, #48]	; (801f03c <MX_TIM8_Init+0x68>)
 801f00c:	f7f2 ffbd 	bl	8011f8a <HAL_TIM_ConfigClockSource>
 801f010:	b968      	cbnz	r0, 801f02e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801f012:	2300      	movs	r3, #0
 801f014:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801f016:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801f018:	4669      	mov	r1, sp
 801f01a:	4808      	ldr	r0, [pc, #32]	; (801f03c <MX_TIM8_Init+0x68>)
 801f01c:	f7f3 f9a1 	bl	8012362 <HAL_TIMEx_MasterConfigSynchronization>
 801f020:	b940      	cbnz	r0, 801f034 <MX_TIM8_Init+0x60>
  {
    Error_Handler();
  }

}
 801f022:	b007      	add	sp, #28
 801f024:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 801f028:	f7ff f906 	bl	801e238 <Error_Handler>
 801f02c:	e7e8      	b.n	801f000 <MX_TIM8_Init+0x2c>
    Error_Handler();
 801f02e:	f7ff f903 	bl	801e238 <Error_Handler>
 801f032:	e7ee      	b.n	801f012 <MX_TIM8_Init+0x3e>
    Error_Handler();
 801f034:	f7ff f900 	bl	801e238 <Error_Handler>
}
 801f038:	e7f3      	b.n	801f022 <MX_TIM8_Init+0x4e>
 801f03a:	bf00      	nop
 801f03c:	20011f1c 	.word	0x20011f1c
 801f040:	40010400 	.word	0x40010400

0801f044 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801f044:	b500      	push	{lr}
 801f046:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM7)
 801f048:	6803      	ldr	r3, [r0, #0]
 801f04a:	4a18      	ldr	r2, [pc, #96]	; (801f0ac <HAL_TIM_Base_MspInit+0x68>)
 801f04c:	4293      	cmp	r3, r2
 801f04e:	d005      	beq.n	801f05c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 801f050:	4a17      	ldr	r2, [pc, #92]	; (801f0b0 <HAL_TIM_Base_MspInit+0x6c>)
 801f052:	4293      	cmp	r3, r2
 801f054:	d016      	beq.n	801f084 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 801f056:	b003      	add	sp, #12
 801f058:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 801f05c:	2200      	movs	r2, #0
 801f05e:	9200      	str	r2, [sp, #0]
 801f060:	4b14      	ldr	r3, [pc, #80]	; (801f0b4 <HAL_TIM_Base_MspInit+0x70>)
 801f062:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801f064:	f041 0120 	orr.w	r1, r1, #32
 801f068:	6419      	str	r1, [r3, #64]	; 0x40
 801f06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f06c:	f003 0320 	and.w	r3, r3, #32
 801f070:	9300      	str	r3, [sp, #0]
 801f072:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 801f074:	2105      	movs	r1, #5
 801f076:	2037      	movs	r0, #55	; 0x37
 801f078:	f7f1 f9ce 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801f07c:	2037      	movs	r0, #55	; 0x37
 801f07e:	f7f1 f9fd 	bl	801047c <HAL_NVIC_EnableIRQ>
 801f082:	e7e8      	b.n	801f056 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801f084:	2200      	movs	r2, #0
 801f086:	9201      	str	r2, [sp, #4]
 801f088:	4b0a      	ldr	r3, [pc, #40]	; (801f0b4 <HAL_TIM_Base_MspInit+0x70>)
 801f08a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801f08c:	f041 0102 	orr.w	r1, r1, #2
 801f090:	6459      	str	r1, [r3, #68]	; 0x44
 801f092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f094:	f003 0302 	and.w	r3, r3, #2
 801f098:	9301      	str	r3, [sp, #4]
 801f09a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 801f09c:	2105      	movs	r1, #5
 801f09e:	202c      	movs	r0, #44	; 0x2c
 801f0a0:	f7f1 f9ba 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801f0a4:	202c      	movs	r0, #44	; 0x2c
 801f0a6:	f7f1 f9e9 	bl	801047c <HAL_NVIC_EnableIRQ>
}
 801f0aa:	e7d4      	b.n	801f056 <HAL_TIM_Base_MspInit+0x12>
 801f0ac:	40001400 	.word	0x40001400
 801f0b0:	40010400 	.word	0x40010400
 801f0b4:	40023800 	.word	0x40023800

0801f0b8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 801f0b8:	b470      	push	{r4, r5, r6}
	int div = 1;
 801f0ba:	2301      	movs	r3, #1
	while (d/div >= base)
 801f0bc:	e001      	b.n	801f0c2 <ts_itoa+0xa>
		div *= base;
 801f0be:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 801f0c2:	fbb1 f4f3 	udiv	r4, r1, r3
 801f0c6:	4294      	cmp	r4, r2
 801f0c8:	d2f9      	bcs.n	801f0be <ts_itoa+0x6>
 801f0ca:	e004      	b.n	801f0d6 <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 801f0cc:	6805      	ldr	r5, [r0, #0]
 801f0ce:	1c6e      	adds	r6, r5, #1
 801f0d0:	6006      	str	r6, [r0, #0]
 801f0d2:	3430      	adds	r4, #48	; 0x30
 801f0d4:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 801f0d6:	b16b      	cbz	r3, 801f0f4 <ts_itoa+0x3c>
		int num = d/div;
 801f0d8:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 801f0dc:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 801f0e0:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 801f0e4:	2c09      	cmp	r4, #9
 801f0e6:	ddf1      	ble.n	801f0cc <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 801f0e8:	6805      	ldr	r5, [r0, #0]
 801f0ea:	1c6e      	adds	r6, r5, #1
 801f0ec:	6006      	str	r6, [r0, #0]
 801f0ee:	3437      	adds	r4, #55	; 0x37
 801f0f0:	702c      	strb	r4, [r5, #0]
 801f0f2:	e7f0      	b.n	801f0d6 <ts_itoa+0x1e>
	}
}
 801f0f4:	bc70      	pop	{r4, r5, r6}
 801f0f6:	4770      	bx	lr

0801f0f8 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 801f0f8:	b530      	push	{r4, r5, lr}
 801f0fa:	b083      	sub	sp, #12
 801f0fc:	9001      	str	r0, [sp, #4]
 801f0fe:	460c      	mov	r4, r1
 801f100:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 801f102:	4605      	mov	r5, r0
	while(*fmt)
 801f104:	e03e      	b.n	801f184 <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 801f106:	7863      	ldrb	r3, [r4, #1]
 801f108:	2b64      	cmp	r3, #100	; 0x64
 801f10a:	d01c      	beq.n	801f146 <ts_formatstring+0x4e>
 801f10c:	d90d      	bls.n	801f12a <ts_formatstring+0x32>
 801f10e:	2b73      	cmp	r3, #115	; 0x73
 801f110:	d04a      	beq.n	801f1a8 <ts_formatstring+0xb0>
 801f112:	d916      	bls.n	801f142 <ts_formatstring+0x4a>
 801f114:	2b75      	cmp	r3, #117	; 0x75
 801f116:	d121      	bne.n	801f15c <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 801f118:	9b00      	ldr	r3, [sp, #0]
 801f11a:	1d1a      	adds	r2, r3, #4
 801f11c:	9200      	str	r2, [sp, #0]
 801f11e:	220a      	movs	r2, #10
 801f120:	6819      	ldr	r1, [r3, #0]
 801f122:	a801      	add	r0, sp, #4
 801f124:	f7ff ffc8 	bl	801f0b8 <ts_itoa>
				break;
 801f128:	e02b      	b.n	801f182 <ts_formatstring+0x8a>
			switch (*(++fmt))
 801f12a:	2b58      	cmp	r3, #88	; 0x58
 801f12c:	d018      	beq.n	801f160 <ts_formatstring+0x68>
 801f12e:	2b63      	cmp	r3, #99	; 0x63
 801f130:	d01f      	beq.n	801f172 <ts_formatstring+0x7a>
 801f132:	2b25      	cmp	r3, #37	; 0x25
 801f134:	d125      	bne.n	801f182 <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 801f136:	9b01      	ldr	r3, [sp, #4]
 801f138:	1c5a      	adds	r2, r3, #1
 801f13a:	9201      	str	r2, [sp, #4]
 801f13c:	2225      	movs	r2, #37	; 0x25
 801f13e:	701a      	strb	r2, [r3, #0]
				  break;
 801f140:	e01f      	b.n	801f182 <ts_formatstring+0x8a>
			switch (*(++fmt))
 801f142:	2b69      	cmp	r3, #105	; 0x69
 801f144:	d11d      	bne.n	801f182 <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 801f146:	9b00      	ldr	r3, [sp, #0]
 801f148:	1d1a      	adds	r2, r3, #4
 801f14a:	9200      	str	r2, [sp, #0]
 801f14c:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 801f14e:	2900      	cmp	r1, #0
 801f150:	db23      	blt.n	801f19a <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 801f152:	220a      	movs	r2, #10
 801f154:	a801      	add	r0, sp, #4
 801f156:	f7ff ffaf 	bl	801f0b8 <ts_itoa>
				break;
 801f15a:	e012      	b.n	801f182 <ts_formatstring+0x8a>
			switch (*(++fmt))
 801f15c:	2b78      	cmp	r3, #120	; 0x78
 801f15e:	d110      	bne.n	801f182 <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 801f160:	9b00      	ldr	r3, [sp, #0]
 801f162:	1d1a      	adds	r2, r3, #4
 801f164:	9200      	str	r2, [sp, #0]
 801f166:	2210      	movs	r2, #16
 801f168:	6819      	ldr	r1, [r3, #0]
 801f16a:	a801      	add	r0, sp, #4
 801f16c:	f7ff ffa4 	bl	801f0b8 <ts_itoa>
				break;
 801f170:	e007      	b.n	801f182 <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 801f172:	9b01      	ldr	r3, [sp, #4]
 801f174:	1c5a      	adds	r2, r3, #1
 801f176:	9201      	str	r2, [sp, #4]
 801f178:	9a00      	ldr	r2, [sp, #0]
 801f17a:	1d11      	adds	r1, r2, #4
 801f17c:	9100      	str	r1, [sp, #0]
 801f17e:	6812      	ldr	r2, [r2, #0]
 801f180:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 801f182:	3402      	adds	r4, #2
	while(*fmt)
 801f184:	7823      	ldrb	r3, [r4, #0]
 801f186:	b1f3      	cbz	r3, 801f1c6 <ts_formatstring+0xce>
		if (*fmt == '%')
 801f188:	2b25      	cmp	r3, #37	; 0x25
 801f18a:	d0bc      	beq.n	801f106 <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 801f18c:	9b01      	ldr	r3, [sp, #4]
 801f18e:	1c5a      	adds	r2, r3, #1
 801f190:	9201      	str	r2, [sp, #4]
 801f192:	7822      	ldrb	r2, [r4, #0]
 801f194:	701a      	strb	r2, [r3, #0]
 801f196:	3401      	adds	r4, #1
 801f198:	e7f4      	b.n	801f184 <ts_formatstring+0x8c>
						val *= -1;
 801f19a:	4249      	negs	r1, r1
						*buf++ = '-';
 801f19c:	9b01      	ldr	r3, [sp, #4]
 801f19e:	1c5a      	adds	r2, r3, #1
 801f1a0:	9201      	str	r2, [sp, #4]
 801f1a2:	222d      	movs	r2, #45	; 0x2d
 801f1a4:	701a      	strb	r2, [r3, #0]
 801f1a6:	e7d4      	b.n	801f152 <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 801f1a8:	9b00      	ldr	r3, [sp, #0]
 801f1aa:	1d1a      	adds	r2, r3, #4
 801f1ac:	9200      	str	r2, [sp, #0]
 801f1ae:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 801f1b0:	e005      	b.n	801f1be <ts_formatstring+0xc6>
						*buf++ = *arg++;
 801f1b2:	9a01      	ldr	r2, [sp, #4]
 801f1b4:	1c51      	adds	r1, r2, #1
 801f1b6:	9101      	str	r1, [sp, #4]
 801f1b8:	7819      	ldrb	r1, [r3, #0]
 801f1ba:	7011      	strb	r1, [r2, #0]
 801f1bc:	3301      	adds	r3, #1
					while (*arg)
 801f1be:	781a      	ldrb	r2, [r3, #0]
 801f1c0:	2a00      	cmp	r2, #0
 801f1c2:	d1f6      	bne.n	801f1b2 <ts_formatstring+0xba>
 801f1c4:	e7dd      	b.n	801f182 <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 801f1c6:	2200      	movs	r2, #0
 801f1c8:	9b01      	ldr	r3, [sp, #4]
 801f1ca:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 801f1cc:	9801      	ldr	r0, [sp, #4]
 801f1ce:	1b40      	subs	r0, r0, r5
 801f1d0:	b003      	add	sp, #12
 801f1d2:	bd30      	pop	{r4, r5, pc}

0801f1d4 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 801f1d4:	b082      	sub	sp, #8
 801f1d6:	4603      	mov	r3, r0
 801f1d8:	9101      	str	r1, [sp, #4]
	int length = 0;
 801f1da:	2000      	movs	r0, #0
	while (*fmt)
 801f1dc:	e01d      	b.n	801f21a <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 801f1de:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 801f1e0:	785b      	ldrb	r3, [r3, #1]
 801f1e2:	3b58      	subs	r3, #88	; 0x58
 801f1e4:	2b20      	cmp	r3, #32
 801f1e6:	d837      	bhi.n	801f258 <ts_formatlength+0x84>
 801f1e8:	e8df f003 	tbb	[pc, r3]
 801f1ec:	36363630 	.word	0x36363630
 801f1f0:	36363636 	.word	0x36363636
 801f1f4:	11363636 	.word	0x11363636
 801f1f8:	3636361d 	.word	0x3636361d
 801f1fc:	36361d36 	.word	0x36361d36
 801f200:	36363636 	.word	0x36363636
 801f204:	23363636 	.word	0x23363636
 801f208:	36361d36 	.word	0x36361d36
 801f20c:	30          	.byte	0x30
 801f20d:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 801f20e:	9b01      	ldr	r3, [sp, #4]
 801f210:	3304      	adds	r3, #4
 801f212:	9301      	str	r3, [sp, #4]
				  ++length;
 801f214:	3001      	adds	r0, #1
			++fmt;
 801f216:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 801f218:	3301      	adds	r3, #1
	while (*fmt)
 801f21a:	781a      	ldrb	r2, [r3, #0]
 801f21c:	b1fa      	cbz	r2, 801f25e <ts_formatlength+0x8a>
		if (*fmt == '%')
 801f21e:	2a25      	cmp	r2, #37	; 0x25
 801f220:	d0dd      	beq.n	801f1de <ts_formatlength+0xa>
			++length;
 801f222:	3001      	adds	r0, #1
 801f224:	e7f8      	b.n	801f218 <ts_formatlength+0x44>
				  length += 11;
 801f226:	300b      	adds	r0, #11
				  va_arg(va, int);
 801f228:	9b01      	ldr	r3, [sp, #4]
 801f22a:	3304      	adds	r3, #4
 801f22c:	9301      	str	r3, [sp, #4]
			++fmt;
 801f22e:	460b      	mov	r3, r1
 801f230:	e7f2      	b.n	801f218 <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 801f232:	9b01      	ldr	r3, [sp, #4]
 801f234:	1d1a      	adds	r2, r3, #4
 801f236:	9201      	str	r2, [sp, #4]
 801f238:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 801f23a:	e001      	b.n	801f240 <ts_formatlength+0x6c>
			  			  ++length;
 801f23c:	3001      	adds	r0, #1
			  		  while (*str++)
 801f23e:	4613      	mov	r3, r2
 801f240:	1c5a      	adds	r2, r3, #1
 801f242:	781b      	ldrb	r3, [r3, #0]
 801f244:	2b00      	cmp	r3, #0
 801f246:	d1f9      	bne.n	801f23c <ts_formatlength+0x68>
			++fmt;
 801f248:	460b      	mov	r3, r1
 801f24a:	e7e5      	b.n	801f218 <ts_formatlength+0x44>
				  length += 8;
 801f24c:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 801f24e:	9b01      	ldr	r3, [sp, #4]
 801f250:	3304      	adds	r3, #4
 801f252:	9301      	str	r3, [sp, #4]
			++fmt;
 801f254:	460b      	mov	r3, r1
 801f256:	e7df      	b.n	801f218 <ts_formatlength+0x44>
				  ++length;
 801f258:	3001      	adds	r0, #1
			++fmt;
 801f25a:	460b      	mov	r3, r1
				  break;
 801f25c:	e7dc      	b.n	801f218 <ts_formatlength+0x44>
	}
	return length;
}
 801f25e:	b002      	add	sp, #8
 801f260:	4770      	bx	lr

0801f262 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 801f262:	b40e      	push	{r1, r2, r3}
 801f264:	b500      	push	{lr}
 801f266:	b082      	sub	sp, #8
 801f268:	aa03      	add	r2, sp, #12
 801f26a:	f852 1b04 	ldr.w	r1, [r2], #4
	int length;
	va_list va;
	va_start(va, fmt);
 801f26e:	9201      	str	r2, [sp, #4]
	length = ts_formatstring(buf, fmt, va);
 801f270:	f7ff ff42 	bl	801f0f8 <ts_formatstring>
	va_end(va);
	return length;
}
 801f274:	b002      	add	sp, #8
 801f276:	f85d eb04 	ldr.w	lr, [sp], #4
 801f27a:	b003      	add	sp, #12
 801f27c:	4770      	bx	lr

0801f27e <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 801f27e:	b40f      	push	{r0, r1, r2, r3}
 801f280:	b5b0      	push	{r4, r5, r7, lr}
 801f282:	b082      	sub	sp, #8
 801f284:	af00      	add	r7, sp, #0
 801f286:	f107 0418 	add.w	r4, r7, #24
 801f28a:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 801f28e:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 801f290:	4621      	mov	r1, r4
 801f292:	4628      	mov	r0, r5
 801f294:	f7ff ff9e 	bl	801f1d4 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 801f298:	3007      	adds	r0, #7
 801f29a:	f020 0007 	bic.w	r0, r0, #7
 801f29e:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 801f2a2:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 801f2a4:	4622      	mov	r2, r4
 801f2a6:	4629      	mov	r1, r5
 801f2a8:	4668      	mov	r0, sp
 801f2aa:	f7ff ff25 	bl	801f0f8 <ts_formatstring>
		length = _write(1, buf, length);
 801f2ae:	4602      	mov	r2, r0
 801f2b0:	4669      	mov	r1, sp
 801f2b2:	2001      	movs	r0, #1
 801f2b4:	f7ff fd5c 	bl	801ed70 <_write>
		va_end(va);
	}
	return length;
}
 801f2b8:	3708      	adds	r7, #8
 801f2ba:	46bd      	mov	sp, r7
 801f2bc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801f2c0:	b004      	add	sp, #16
 801f2c2:	4770      	bx	lr

0801f2c4 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 801f2c4:	b538      	push	{r3, r4, r5, lr}
 801f2c6:	4605      	mov	r5, r0
	int length = strlen(s);
 801f2c8:	f7f0 fec4 	bl	8010054 <strlen>
 801f2cc:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 801f2ce:	4602      	mov	r2, r0
 801f2d0:	4629      	mov	r1, r5
 801f2d2:	2001      	movs	r0, #1
 801f2d4:	f7ff fd4c 	bl	801ed70 <_write>
 801f2d8:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 801f2da:	2201      	movs	r2, #1
 801f2dc:	4906      	ldr	r1, [pc, #24]	; (801f2f8 <puts+0x34>)
 801f2de:	4610      	mov	r0, r2
 801f2e0:	f7ff fd46 	bl	801ed70 <_write>
 801f2e4:	4428      	add	r0, r5

	if (numbytes == (length+1))
 801f2e6:	3401      	adds	r4, #1
 801f2e8:	42a0      	cmp	r0, r4
 801f2ea:	d101      	bne.n	801f2f0 <puts+0x2c>
	{
		res = 0;
 801f2ec:	2000      	movs	r0, #0
 801f2ee:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		res = EOF;
 801f2f0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return res;
}
 801f2f4:	bd38      	pop	{r3, r4, r5, pc}
 801f2f6:	bf00      	nop
 801f2f8:	08023f10 	.word	0x08023f10

0801f2fc <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 801f2fc:	b508      	push	{r3, lr}

  huart5.Instance = UART5;
 801f2fe:	480c      	ldr	r0, [pc, #48]	; (801f330 <MX_UART5_Init+0x34>)
 801f300:	4b0c      	ldr	r3, [pc, #48]	; (801f334 <MX_UART5_Init+0x38>)
 801f302:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 187500;
 801f304:	4b0c      	ldr	r3, [pc, #48]	; (801f338 <MX_UART5_Init+0x3c>)
 801f306:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 801f308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801f30c:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 801f30e:	2300      	movs	r3, #0
 801f310:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 801f312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f316:	6102      	str	r2, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 801f318:	220c      	movs	r2, #12
 801f31a:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801f31c:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 801f31e:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 801f320:	f7f3 fa38 	bl	8012794 <HAL_UART_Init>
 801f324:	b900      	cbnz	r0, 801f328 <MX_UART5_Init+0x2c>
 801f326:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 801f328:	f7fe ff86 	bl	801e238 <Error_Handler>
  }

}
 801f32c:	e7fb      	b.n	801f326 <MX_UART5_Init+0x2a>
 801f32e:	bf00      	nop
 801f330:	20011ff4 	.word	0x20011ff4
 801f334:	40005000 	.word	0x40005000
 801f338:	0002dc6c 	.word	0x0002dc6c

0801f33c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801f33c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 801f33e:	480a      	ldr	r0, [pc, #40]	; (801f368 <MX_USART1_UART_Init+0x2c>)
 801f340:	4b0a      	ldr	r3, [pc, #40]	; (801f36c <MX_USART1_UART_Init+0x30>)
 801f342:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 460800;
 801f344:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 801f348:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801f34a:	2300      	movs	r3, #0
 801f34c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801f34e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801f350:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 801f352:	2208      	movs	r2, #8
 801f354:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801f356:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801f358:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801f35a:	f7f3 fa1b 	bl	8012794 <HAL_UART_Init>
 801f35e:	b900      	cbnz	r0, 801f362 <MX_USART1_UART_Init+0x26>
 801f360:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 801f362:	f7fe ff69 	bl	801e238 <Error_Handler>
  }

}
 801f366:	e7fb      	b.n	801f360 <MX_USART1_UART_Init+0x24>
 801f368:	20012034 	.word	0x20012034
 801f36c:	40011000 	.word	0x40011000

0801f370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801f370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f374:	b08b      	sub	sp, #44	; 0x2c
 801f376:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f378:	2300      	movs	r3, #0
 801f37a:	9305      	str	r3, [sp, #20]
 801f37c:	9306      	str	r3, [sp, #24]
 801f37e:	9307      	str	r3, [sp, #28]
 801f380:	9308      	str	r3, [sp, #32]
 801f382:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==UART5)
 801f384:	6803      	ldr	r3, [r0, #0]
 801f386:	4a5a      	ldr	r2, [pc, #360]	; (801f4f0 <HAL_UART_MspInit+0x180>)
 801f388:	4293      	cmp	r3, r2
 801f38a:	d005      	beq.n	801f398 <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 801f38c:	4a59      	ldr	r2, [pc, #356]	; (801f4f4 <HAL_UART_MspInit+0x184>)
 801f38e:	4293      	cmp	r3, r2
 801f390:	d064      	beq.n	801f45c <HAL_UART_MspInit+0xec>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 801f392:	b00b      	add	sp, #44	; 0x2c
 801f394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 801f398:	2500      	movs	r5, #0
 801f39a:	9500      	str	r5, [sp, #0]
 801f39c:	4b56      	ldr	r3, [pc, #344]	; (801f4f8 <HAL_UART_MspInit+0x188>)
 801f39e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801f3a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801f3a4:	641a      	str	r2, [r3, #64]	; 0x40
 801f3a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801f3a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801f3ac:	9200      	str	r2, [sp, #0]
 801f3ae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801f3b0:	9501      	str	r5, [sp, #4]
 801f3b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f3b4:	f042 0204 	orr.w	r2, r2, #4
 801f3b8:	631a      	str	r2, [r3, #48]	; 0x30
 801f3ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f3bc:	f002 0204 	and.w	r2, r2, #4
 801f3c0:	9201      	str	r2, [sp, #4]
 801f3c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801f3c4:	9502      	str	r5, [sp, #8]
 801f3c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f3c8:	f042 0208 	orr.w	r2, r2, #8
 801f3cc:	631a      	str	r2, [r3, #48]	; 0x30
 801f3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3d0:	f003 0308 	and.w	r3, r3, #8
 801f3d4:	9302      	str	r3, [sp, #8]
 801f3d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801f3d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801f3dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f3de:	f04f 0902 	mov.w	r9, #2
 801f3e2:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801f3e6:	f04f 0801 	mov.w	r8, #1
 801f3ea:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f3ee:	2703      	movs	r7, #3
 801f3f0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801f3f2:	2608      	movs	r6, #8
 801f3f4:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f3f6:	a905      	add	r1, sp, #20
 801f3f8:	4840      	ldr	r0, [pc, #256]	; (801f4fc <HAL_UART_MspInit+0x18c>)
 801f3fa:	f7f2 f8db 	bl	80115b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801f3fe:	2304      	movs	r3, #4
 801f400:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f402:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801f406:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f40a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801f40c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801f40e:	a905      	add	r1, sp, #20
 801f410:	483b      	ldr	r0, [pc, #236]	; (801f500 <HAL_UART_MspInit+0x190>)
 801f412:	f7f2 f8cf 	bl	80115b4 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 801f416:	483b      	ldr	r0, [pc, #236]	; (801f504 <HAL_UART_MspInit+0x194>)
 801f418:	4b3b      	ldr	r3, [pc, #236]	; (801f508 <HAL_UART_MspInit+0x198>)
 801f41a:	6003      	str	r3, [r0, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 801f41c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801f420:	6043      	str	r3, [r0, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801f422:	2340      	movs	r3, #64	; 0x40
 801f424:	6083      	str	r3, [r0, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801f426:	60c5      	str	r5, [r0, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 801f428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f42c:	6103      	str	r3, [r0, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801f42e:	6145      	str	r5, [r0, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801f430:	6185      	str	r5, [r0, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 801f432:	61c5      	str	r5, [r0, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 801f434:	6205      	str	r5, [r0, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801f436:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 801f438:	f7f1 f8b6 	bl	80105a8 <HAL_DMA_Init>
 801f43c:	b958      	cbnz	r0, 801f456 <HAL_UART_MspInit+0xe6>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 801f43e:	4b31      	ldr	r3, [pc, #196]	; (801f504 <HAL_UART_MspInit+0x194>)
 801f440:	6323      	str	r3, [r4, #48]	; 0x30
 801f442:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 801f444:	2200      	movs	r2, #0
 801f446:	2105      	movs	r1, #5
 801f448:	2035      	movs	r0, #53	; 0x35
 801f44a:	f7f0 ffe5 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 801f44e:	2035      	movs	r0, #53	; 0x35
 801f450:	f7f1 f814 	bl	801047c <HAL_NVIC_EnableIRQ>
 801f454:	e79d      	b.n	801f392 <HAL_UART_MspInit+0x22>
      Error_Handler();
 801f456:	f7fe feef 	bl	801e238 <Error_Handler>
 801f45a:	e7f0      	b.n	801f43e <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART1_CLK_ENABLE();
 801f45c:	2500      	movs	r5, #0
 801f45e:	9503      	str	r5, [sp, #12]
 801f460:	4b25      	ldr	r3, [pc, #148]	; (801f4f8 <HAL_UART_MspInit+0x188>)
 801f462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f464:	f042 0210 	orr.w	r2, r2, #16
 801f468:	645a      	str	r2, [r3, #68]	; 0x44
 801f46a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f46c:	f002 0210 	and.w	r2, r2, #16
 801f470:	9203      	str	r2, [sp, #12]
 801f472:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f474:	9504      	str	r5, [sp, #16]
 801f476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f478:	f042 0201 	orr.w	r2, r2, #1
 801f47c:	631a      	str	r2, [r3, #48]	; 0x30
 801f47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f480:	f003 0301 	and.w	r3, r3, #1
 801f484:	9304      	str	r3, [sp, #16]
 801f486:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801f488:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801f48c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f48e:	2302      	movs	r3, #2
 801f490:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801f492:	2301      	movs	r3, #1
 801f494:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f496:	2303      	movs	r3, #3
 801f498:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801f49a:	2307      	movs	r3, #7
 801f49c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f49e:	a905      	add	r1, sp, #20
 801f4a0:	481a      	ldr	r0, [pc, #104]	; (801f50c <HAL_UART_MspInit+0x19c>)
 801f4a2:	f7f2 f887 	bl	80115b4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 801f4a6:	481a      	ldr	r0, [pc, #104]	; (801f510 <HAL_UART_MspInit+0x1a0>)
 801f4a8:	4b1a      	ldr	r3, [pc, #104]	; (801f514 <HAL_UART_MspInit+0x1a4>)
 801f4aa:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 801f4ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801f4b0:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801f4b2:	2340      	movs	r3, #64	; 0x40
 801f4b4:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801f4b6:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 801f4b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f4bc:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801f4be:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801f4c0:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 801f4c2:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 801f4c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801f4c8:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801f4ca:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 801f4cc:	f7f1 f86c 	bl	80105a8 <HAL_DMA_Init>
 801f4d0:	b958      	cbnz	r0, 801f4ea <HAL_UART_MspInit+0x17a>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 801f4d2:	4b0f      	ldr	r3, [pc, #60]	; (801f510 <HAL_UART_MspInit+0x1a0>)
 801f4d4:	6323      	str	r3, [r4, #48]	; 0x30
 801f4d6:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 801f4d8:	2200      	movs	r2, #0
 801f4da:	2105      	movs	r1, #5
 801f4dc:	2025      	movs	r0, #37	; 0x25
 801f4de:	f7f0 ff9b 	bl	8010418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801f4e2:	2025      	movs	r0, #37	; 0x25
 801f4e4:	f7f0 ffca 	bl	801047c <HAL_NVIC_EnableIRQ>
}
 801f4e8:	e753      	b.n	801f392 <HAL_UART_MspInit+0x22>
      Error_Handler();
 801f4ea:	f7fe fea5 	bl	801e238 <Error_Handler>
 801f4ee:	e7f0      	b.n	801f4d2 <HAL_UART_MspInit+0x162>
 801f4f0:	40005000 	.word	0x40005000
 801f4f4:	40011000 	.word	0x40011000
 801f4f8:	40023800 	.word	0x40023800
 801f4fc:	40020800 	.word	0x40020800
 801f500:	40020c00 	.word	0x40020c00
 801f504:	20012074 	.word	0x20012074
 801f508:	400260b8 	.word	0x400260b8
 801f50c:	40020000 	.word	0x40020000
 801f510:	20011f94 	.word	0x20011f94
 801f514:	400264b8 	.word	0x400264b8

0801f518 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 801f518:	b510      	push	{r4, lr}
 801f51a:	4604      	mov	r4, r0

  if(uartHandle->Instance==UART5)
 801f51c:	6803      	ldr	r3, [r0, #0]
 801f51e:	4a17      	ldr	r2, [pc, #92]	; (801f57c <HAL_UART_MspDeInit+0x64>)
 801f520:	4293      	cmp	r3, r2
 801f522:	d003      	beq.n	801f52c <HAL_UART_MspDeInit+0x14>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART1)
 801f524:	4a16      	ldr	r2, [pc, #88]	; (801f580 <HAL_UART_MspDeInit+0x68>)
 801f526:	4293      	cmp	r3, r2
 801f528:	d016      	beq.n	801f558 <HAL_UART_MspDeInit+0x40>
 801f52a:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART5_CLK_DISABLE();
 801f52c:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 801f530:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801f532:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801f536:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 801f538:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801f53c:	4811      	ldr	r0, [pc, #68]	; (801f584 <HAL_UART_MspDeInit+0x6c>)
 801f53e:	f7f2 f91f 	bl	8011780 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 801f542:	2104      	movs	r1, #4
 801f544:	4810      	ldr	r0, [pc, #64]	; (801f588 <HAL_UART_MspDeInit+0x70>)
 801f546:	f7f2 f91b 	bl	8011780 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 801f54a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f54c:	f7f1 f894 	bl	8010678 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 801f550:	2035      	movs	r0, #53	; 0x35
 801f552:	f7f0 ff9f 	bl	8010494 <HAL_NVIC_DisableIRQ>
 801f556:	bd10      	pop	{r4, pc}
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 801f558:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 801f55c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801f55e:	f023 0310 	bic.w	r3, r3, #16
 801f562:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 801f564:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801f568:	4808      	ldr	r0, [pc, #32]	; (801f58c <HAL_UART_MspDeInit+0x74>)
 801f56a:	f7f2 f909 	bl	8011780 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 801f56e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f570:	f7f1 f882 	bl	8010678 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 801f574:	2025      	movs	r0, #37	; 0x25
 801f576:	f7f0 ff8d 	bl	8010494 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 801f57a:	e7d6      	b.n	801f52a <HAL_UART_MspDeInit+0x12>
 801f57c:	40005000 	.word	0x40005000
 801f580:	40011000 	.word	0x40011000
 801f584:	40020800 	.word	0x40020800
 801f588:	40020c00 	.word	0x40020c00
 801f58c:	40020000 	.word	0x40020000

0801f590 <read_param>:
static void form_data_parser(char * in_buf);
static uint read_param(char * out_buf, const char * const in_buf,
		const uint max_len);

static uint read_param(char * out_buf, const char * const in_buf,
		const uint max_len) {
 801f590:	b410      	push	{r4}
 801f592:	4604      	mov	r4, r0
	const char* tmp_p = in_buf;
	uint len = 0;
 801f594:	2000      	movs	r0, #0
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 801f596:	e003      	b.n	801f5a0 <read_param+0x10>
		*out_buf++ = *tmp_p;
 801f598:	7023      	strb	r3, [r4, #0]
		len++;
 801f59a:	3001      	adds	r0, #1
		tmp_p++;
 801f59c:	3101      	adds	r1, #1
		*out_buf++ = *tmp_p;
 801f59e:	3401      	adds	r4, #1
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 801f5a0:	780b      	ldrb	r3, [r1, #0]
 801f5a2:	2b20      	cmp	r3, #32
 801f5a4:	d003      	beq.n	801f5ae <read_param+0x1e>
 801f5a6:	2b26      	cmp	r3, #38	; 0x26
 801f5a8:	d001      	beq.n	801f5ae <read_param+0x1e>
 801f5aa:	4290      	cmp	r0, r2
 801f5ac:	d9f4      	bls.n	801f598 <read_param+0x8>
	}
	return len;
}
 801f5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f5b2:	4770      	bx	lr

0801f5b4 <form_data_parser>:

static void form_data_parser(char * in_buf) {
 801f5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f5b6:	b087      	sub	sp, #28
 801f5b8:	4604      	mov	r4, r0
	char par_str[16];
	uint par_len;
	uint baudrate = 0;
	while (*in_buf != ' ') {
 801f5ba:	e021      	b.n	801f600 <form_data_parser+0x4c>
		if (*in_buf == '&') {
			in_buf++;
 801f5bc:	3401      	adds	r4, #1
 801f5be:	e024      	b.n	801f60a <form_data_parser+0x56>
		}
		int param_num = atoi(in_buf);
		if (param_num < 9) {
			in_buf += 2;
		} else {
			in_buf += 3;
 801f5c0:	3403      	adds	r4, #3
 801f5c2:	e028      	b.n	801f616 <form_data_parser+0x62>
		}
		switch (param_num) {
		case 1:                                        //IP-address
			par_len = read_param(par_str, in_buf, 15);
 801f5c4:	220f      	movs	r2, #15
 801f5c6:	4621      	mov	r1, r4
 801f5c8:	a802      	add	r0, sp, #8
 801f5ca:	f7ff ffe1 	bl	801f590 <read_param>
 801f5ce:	4605      	mov	r5, r0
			par_str[par_len] = '\0';
 801f5d0:	ab06      	add	r3, sp, #24
 801f5d2:	4403      	add	r3, r0
 801f5d4:	2200      	movs	r2, #0
 801f5d6:	f803 2c10 	strb.w	r2, [r3, #-16]
			ip4_addr_t new_ip;
			ipaddr_aton(par_str, &new_ip);
 801f5da:	a901      	add	r1, sp, #4
 801f5dc:	a802      	add	r0, sp, #8
 801f5de:	f7f7 fd83 	bl	80170e8 <ip4addr_aton>
			EE_WriteVariable(IP_02_01_ADDR,
 801f5e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801f5e6:	2001      	movs	r0, #1
 801f5e8:	f7fd fcda 	bl	801cfa0 <EE_WriteVariable>
					(uint16_t) (new_ip.addr & 0x0000FFFF));
			EE_WriteVariable(IP_04_03_ADDR,
 801f5ec:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801f5f0:	2002      	movs	r0, #2
 801f5f2:	f7fd fcd5 	bl	801cfa0 <EE_WriteVariable>
					(uint16_t) ((new_ip.addr >> 16) & 0x0000FFFF));
			netif_set_ipaddr(&gnetif, &new_ip);
 801f5f6:	a901      	add	r1, sp, #4
 801f5f8:	481c      	ldr	r0, [pc, #112]	; (801f66c <form_data_parser+0xb8>)
 801f5fa:	f7f8 fd79 	bl	80180f0 <netif_set_ipaddr>
			in_buf += par_len;
 801f5fe:	442c      	add	r4, r5
	while (*in_buf != ' ') {
 801f600:	7823      	ldrb	r3, [r4, #0]
 801f602:	2b20      	cmp	r3, #32
 801f604:	d030      	beq.n	801f668 <form_data_parser+0xb4>
		if (*in_buf == '&') {
 801f606:	2b26      	cmp	r3, #38	; 0x26
 801f608:	d0d8      	beq.n	801f5bc <form_data_parser+0x8>
		int param_num = atoi(in_buf);
 801f60a:	4620      	mov	r0, r4
 801f60c:	f000 f9d3 	bl	801f9b6 <atoi>
		if (param_num < 9) {
 801f610:	2808      	cmp	r0, #8
 801f612:	dcd5      	bgt.n	801f5c0 <form_data_parser+0xc>
			in_buf += 2;
 801f614:	3402      	adds	r4, #2
		switch (param_num) {
 801f616:	2801      	cmp	r0, #1
 801f618:	d0d4      	beq.n	801f5c4 <form_data_parser+0x10>
 801f61a:	2802      	cmp	r0, #2
 801f61c:	d1f0      	bne.n	801f600 <form_data_parser+0x4c>
			break;
		case 2:                                       //Baudrate
			par_len = read_param(par_str, in_buf, 15);
 801f61e:	220f      	movs	r2, #15
 801f620:	4621      	mov	r1, r4
 801f622:	a802      	add	r0, sp, #8
 801f624:	f7ff ffb4 	bl	801f590 <read_param>
 801f628:	4607      	mov	r7, r0
			par_str[par_len] = '\0';
 801f62a:	ab06      	add	r3, sp, #24
 801f62c:	4403      	add	r3, r0
 801f62e:	2200      	movs	r2, #0
 801f630:	f803 2c10 	strb.w	r2, [r3, #-16]
			baudrate = atoi(par_str);
 801f634:	a802      	add	r0, sp, #8
 801f636:	f000 f9be 	bl	801f9b6 <atoi>
 801f63a:	4606      	mov	r6, r0
			HAL_UART_DeInit(&huart5);
 801f63c:	4d0c      	ldr	r5, [pc, #48]	; (801f670 <form_data_parser+0xbc>)
 801f63e:	4628      	mov	r0, r5
 801f640:	f7f3 f8d7 	bl	80127f2 <HAL_UART_DeInit>
			huart5.Init.BaudRate = baudrate;
 801f644:	606e      	str	r6, [r5, #4]
			EE_WriteVariable(BR_LS_ADDR, (uint16_t) (baudrate & 0x0000FFFF));
 801f646:	b2b1      	uxth	r1, r6
 801f648:	2004      	movs	r0, #4
 801f64a:	f7fd fca9 	bl	801cfa0 <EE_WriteVariable>
			EE_WriteVariable(BR_MS_ADDR,
 801f64e:	0c31      	lsrs	r1, r6, #16
 801f650:	2003      	movs	r0, #3
 801f652:	f7fd fca5 	bl	801cfa0 <EE_WriteVariable>
					(uint16_t) ((baudrate >> 16) & 0x0000FFFF));
			if (HAL_UART_Init(&huart5) != HAL_OK) {
 801f656:	4628      	mov	r0, r5
 801f658:	f7f3 f89c 	bl	8012794 <HAL_UART_Init>
 801f65c:	b908      	cbnz	r0, 801f662 <form_data_parser+0xae>
				Error_Handler();
			}
			in_buf += par_len;
 801f65e:	443c      	add	r4, r7
			break;
 801f660:	e7ce      	b.n	801f600 <form_data_parser+0x4c>
				Error_Handler();
 801f662:	f7fe fde9 	bl	801e238 <Error_Handler>
 801f666:	e7fa      	b.n	801f65e <form_data_parser+0xaa>
		}
	}
}
 801f668:	b007      	add	sp, #28
 801f66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f66c:	20011e6c 	.word	0x20011e6c
 801f670:	20011ff4 	.word	0x20011ff4

0801f674 <Web_thread>:

void Web_thread(void *arg) {
 801f674:	b570      	push	{r4, r5, r6, lr}
 801f676:	b08c      	sub	sp, #48	; 0x30
 801f678:	4604      	mov	r4, r0
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
	u16_t buflen;
	char* buf;
	struct fs_file file;
	FlashToJSON(&hjsondata, &hflash);
 801f67a:	49a2      	ldr	r1, [pc, #648]	; (801f904 <Web_thread+0x290>)
 801f67c:	48a2      	ldr	r0, [pc, #648]	; (801f908 <Web_thread+0x294>)
 801f67e:	f7fe fb51 	bl	801dd24 <FlashToJSON>

	osDelay(1);
 801f682:	2001      	movs	r0, #1
 801f684:	f7f3 fac2 	bl	8012c0c <osDelay>
 801f688:	e016      	b.n	801f6b8 <Web_thread+0x44>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
						buf += 5;
						if ((strncmp((char const *) buf, " ", 1) == 0)
								|| (strncmp((char const *) buf, "index.shtml",
										11) == 0)) {
							fs_open(&file, "/index.shtml");
 801f68a:	49a0      	ldr	r1, [pc, #640]	; (801f90c <Web_thread+0x298>)
 801f68c:	a803      	add	r0, sp, #12
 801f68e:	f7f6 fd8b 	bl	80161a8 <fs_open>
							netconn_write(newconn,
 801f692:	2300      	movs	r3, #0
 801f694:	9300      	str	r3, [sp, #0]
 801f696:	9a04      	ldr	r2, [sp, #16]
 801f698:	9903      	ldr	r1, [sp, #12]
 801f69a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f69c:	f7f5 fbb8 	bl	8014e10 <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 801f6a0:	a803      	add	r0, sp, #12
 801f6a2:	f7f6 fda5 	bl	80161f0 <fs_close>
							osDelay(1);
						}
					}
				}
			}
			netconn_close(newconn);
 801f6a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f6a8:	f7f5 fc06 	bl	8014eb8 <netconn_close>
			netbuf_delete(inbuf);
 801f6ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f6ae:	f7f6 fbf3 	bl	8015e98 <netbuf_delete>
			netconn_delete(newconn);
 801f6b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f6b4:	f7f5 faa0 	bl	8014bf8 <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 801f6b8:	a90a      	add	r1, sp, #40	; 0x28
 801f6ba:	4620      	mov	r0, r4
 801f6bc:	f7f5 fafa 	bl	8014cb4 <netconn_accept>
		if (err == ERR_OK) {
 801f6c0:	2800      	cmp	r0, #0
 801f6c2:	d1f9      	bne.n	801f6b8 <Web_thread+0x44>
			printf("Accept.\n");
 801f6c4:	4892      	ldr	r0, [pc, #584]	; (801f910 <Web_thread+0x29c>)
 801f6c6:	f7ff fdfd 	bl	801f2c4 <puts>
			recv_err = netconn_recv(newconn, &inbuf);
 801f6ca:	a90b      	add	r1, sp, #44	; 0x2c
 801f6cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f6ce:	f7f5 fb4d 	bl	8014d6c <netconn_recv>
			if (recv_err == ERR_OK) {
 801f6d2:	2800      	cmp	r0, #0
 801f6d4:	d1e7      	bne.n	801f6a6 <Web_thread+0x32>
				if (netconn_err(newconn) == ERR_OK) {
 801f6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	d1e2      	bne.n	801f6a6 <Web_thread+0x32>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 801f6e0:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 801f6e4:	a908      	add	r1, sp, #32
 801f6e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f6e8:	f7f6 fbe6 	bl	8015eb8 <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 801f6ec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801f6f0:	2b04      	cmp	r3, #4
 801f6f2:	d9d8      	bls.n	801f6a6 <Web_thread+0x32>
 801f6f4:	9e08      	ldr	r6, [sp, #32]
 801f6f6:	2205      	movs	r2, #5
 801f6f8:	4986      	ldr	r1, [pc, #536]	; (801f914 <Web_thread+0x2a0>)
 801f6fa:	4630      	mov	r0, r6
 801f6fc:	f000 f9c8 	bl	801fa90 <strncmp>
 801f700:	2800      	cmp	r0, #0
 801f702:	d1d0      	bne.n	801f6a6 <Web_thread+0x32>
						buf += 5;
 801f704:	1d75      	adds	r5, r6, #5
 801f706:	9508      	str	r5, [sp, #32]
						if ((strncmp((char const *) buf, " ", 1) == 0)
 801f708:	7976      	ldrb	r6, [r6, #5]
 801f70a:	2e20      	cmp	r6, #32
 801f70c:	d0bd      	beq.n	801f68a <Web_thread+0x16>
								|| (strncmp((char const *) buf, "index.shtml",
 801f70e:	220b      	movs	r2, #11
 801f710:	4981      	ldr	r1, [pc, #516]	; (801f918 <Web_thread+0x2a4>)
 801f712:	4628      	mov	r0, r5
 801f714:	f000 f9bc 	bl	801fa90 <strncmp>
 801f718:	2800      	cmp	r0, #0
 801f71a:	d0b6      	beq.n	801f68a <Web_thread+0x16>
						} else if (strncmp((char const *) buf, "img/logo.png",
 801f71c:	220c      	movs	r2, #12
 801f71e:	497f      	ldr	r1, [pc, #508]	; (801f91c <Web_thread+0x2a8>)
 801f720:	4628      	mov	r0, r5
 801f722:	f000 f9b5 	bl	801fa90 <strncmp>
 801f726:	2800      	cmp	r0, #0
 801f728:	d04d      	beq.n	801f7c6 <Web_thread+0x152>
						} else if (strncmp((char const *) buf, "img/icon.png",
 801f72a:	220c      	movs	r2, #12
 801f72c:	497c      	ldr	r1, [pc, #496]	; (801f920 <Web_thread+0x2ac>)
 801f72e:	4628      	mov	r0, r5
 801f730:	f000 f9ae 	bl	801fa90 <strncmp>
 801f734:	2800      	cmp	r0, #0
 801f736:	d055      	beq.n	801f7e4 <Web_thread+0x170>
						} else if (strncmp((char const *) buf, "style.css", 9)
 801f738:	2209      	movs	r2, #9
 801f73a:	497a      	ldr	r1, [pc, #488]	; (801f924 <Web_thread+0x2b0>)
 801f73c:	4628      	mov	r0, r5
 801f73e:	f000 f9a7 	bl	801fa90 <strncmp>
 801f742:	2800      	cmp	r0, #0
 801f744:	d05d      	beq.n	801f802 <Web_thread+0x18e>
						} else if (strncmp((char const *) buf, "AI.data?=", 9)
 801f746:	2209      	movs	r2, #9
 801f748:	4977      	ldr	r1, [pc, #476]	; (801f928 <Web_thread+0x2b4>)
 801f74a:	4628      	mov	r0, r5
 801f74c:	f000 f9a0 	bl	801fa90 <strncmp>
 801f750:	2800      	cmp	r0, #0
 801f752:	d065      	beq.n	801f820 <Web_thread+0x1ac>
						} else if (strncmp((char const *) buf, "AI.shtml?IP=",
 801f754:	220c      	movs	r2, #12
 801f756:	4975      	ldr	r1, [pc, #468]	; (801f92c <Web_thread+0x2b8>)
 801f758:	4628      	mov	r0, r5
 801f75a:	f000 f999 	bl	801fa90 <strncmp>
 801f75e:	2800      	cmp	r0, #0
 801f760:	d07d      	beq.n	801f85e <Web_thread+0x1ea>
						} else if (strncmp((char const *) buf, "AI.shtml?BR=",
 801f762:	220c      	movs	r2, #12
 801f764:	4972      	ldr	r1, [pc, #456]	; (801f930 <Web_thread+0x2bc>)
 801f766:	4628      	mov	r0, r5
 801f768:	f000 f992 	bl	801fa90 <strncmp>
 801f76c:	2800      	cmp	r0, #0
 801f76e:	f000 808c 	beq.w	801f88a <Web_thread+0x216>
						} else if (*buf == '?') {
 801f772:	2e3f      	cmp	r6, #63	; 0x3f
 801f774:	f000 809d 	beq.w	801f8b2 <Web_thread+0x23e>
						} else if (strncmp((char const *) buf, "json=", 5)
 801f778:	2205      	movs	r2, #5
 801f77a:	496e      	ldr	r1, [pc, #440]	; (801f934 <Web_thread+0x2c0>)
 801f77c:	4628      	mov	r0, r5
 801f77e:	f000 f987 	bl	801fa90 <strncmp>
 801f782:	2800      	cmp	r0, #0
 801f784:	f040 80a8 	bne.w	801f8d8 <Web_thread+0x264>
							json_str = (uint8_t*) pvPortMalloc(250);
 801f788:	20fa      	movs	r0, #250	; 0xfa
 801f78a:	f7f3 fe49 	bl	8013420 <pvPortMalloc>
							if (json_str != NULL) {
 801f78e:	4605      	mov	r5, r0
 801f790:	2800      	cmp	r0, #0
 801f792:	d088      	beq.n	801f6a6 <Web_thread+0x32>
								DecodeURL((uint8_t*) buf + 5, json_str);
 801f794:	4601      	mov	r1, r0
 801f796:	9808      	ldr	r0, [sp, #32]
 801f798:	3005      	adds	r0, #5
 801f79a:	f7fe fb64 	bl	801de66 <DecodeURL>
								ParseJSON(&hjsondata, json_str);
 801f79e:	4629      	mov	r1, r5
 801f7a0:	4859      	ldr	r0, [pc, #356]	; (801f908 <Web_thread+0x294>)
 801f7a2:	f7fe fb8b 	bl	801debc <ParseJSON>
								netconn_write(newconn, PAGE_HEADER,
 801f7a6:	4e64      	ldr	r6, [pc, #400]	; (801f938 <Web_thread+0x2c4>)
 801f7a8:	4630      	mov	r0, r6
 801f7aa:	f7f0 fc53 	bl	8010054 <strlen>
 801f7ae:	2300      	movs	r3, #0
 801f7b0:	9300      	str	r3, [sp, #0]
 801f7b2:	2301      	movs	r3, #1
 801f7b4:	4602      	mov	r2, r0
 801f7b6:	4631      	mov	r1, r6
 801f7b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f7ba:	f7f5 fb29 	bl	8014e10 <netconn_write_partly>
								vPortFree(json_str);
 801f7be:	4628      	mov	r0, r5
 801f7c0:	f7f3 feb2 	bl	8013528 <vPortFree>
 801f7c4:	e76f      	b.n	801f6a6 <Web_thread+0x32>
							fs_open(&file, "/img/logo.png");
 801f7c6:	495d      	ldr	r1, [pc, #372]	; (801f93c <Web_thread+0x2c8>)
 801f7c8:	a803      	add	r0, sp, #12
 801f7ca:	f7f6 fced 	bl	80161a8 <fs_open>
							netconn_write(newconn,
 801f7ce:	2300      	movs	r3, #0
 801f7d0:	9300      	str	r3, [sp, #0]
 801f7d2:	9a04      	ldr	r2, [sp, #16]
 801f7d4:	9903      	ldr	r1, [sp, #12]
 801f7d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f7d8:	f7f5 fb1a 	bl	8014e10 <netconn_write_partly>
							fs_close(&file);
 801f7dc:	a803      	add	r0, sp, #12
 801f7de:	f7f6 fd07 	bl	80161f0 <fs_close>
 801f7e2:	e760      	b.n	801f6a6 <Web_thread+0x32>
							fs_open(&file, "/img/icon.png");
 801f7e4:	4956      	ldr	r1, [pc, #344]	; (801f940 <Web_thread+0x2cc>)
 801f7e6:	a803      	add	r0, sp, #12
 801f7e8:	f7f6 fcde 	bl	80161a8 <fs_open>
							netconn_write(newconn,
 801f7ec:	2300      	movs	r3, #0
 801f7ee:	9300      	str	r3, [sp, #0]
 801f7f0:	9a04      	ldr	r2, [sp, #16]
 801f7f2:	9903      	ldr	r1, [sp, #12]
 801f7f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f7f6:	f7f5 fb0b 	bl	8014e10 <netconn_write_partly>
							fs_close(&file);
 801f7fa:	a803      	add	r0, sp, #12
 801f7fc:	f7f6 fcf8 	bl	80161f0 <fs_close>
 801f800:	e751      	b.n	801f6a6 <Web_thread+0x32>
							fs_open(&file, "/style.css");
 801f802:	4950      	ldr	r1, [pc, #320]	; (801f944 <Web_thread+0x2d0>)
 801f804:	a803      	add	r0, sp, #12
 801f806:	f7f6 fccf 	bl	80161a8 <fs_open>
							netconn_write(newconn,
 801f80a:	2300      	movs	r3, #0
 801f80c:	9300      	str	r3, [sp, #0]
 801f80e:	9a04      	ldr	r2, [sp, #16]
 801f810:	9903      	ldr	r1, [sp, #12]
 801f812:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f814:	f7f5 fafc 	bl	8014e10 <netconn_write_partly>
							fs_close(&file);
 801f818:	a803      	add	r0, sp, #12
 801f81a:	f7f6 fce9 	bl	80161f0 <fs_close>
 801f81e:	e742      	b.n	801f6a6 <Web_thread+0x32>
							json = (uint8_t*) pvPortMalloc(250);
 801f820:	20fa      	movs	r0, #250	; 0xfa
 801f822:	f7f3 fdfd 	bl	8013420 <pvPortMalloc>
							if (json != NULL) {
 801f826:	4605      	mov	r5, r0
 801f828:	2800      	cmp	r0, #0
 801f82a:	f43f af3c 	beq.w	801f6a6 <Web_thread+0x32>
								GetJSONData(json);
 801f82e:	f7fe f9a7 	bl	801db80 <GetJSONData>
								sprintf(PAGE_BODY, "%s%s", PAGE_HEADER, json);
 801f832:	4e45      	ldr	r6, [pc, #276]	; (801f948 <Web_thread+0x2d4>)
 801f834:	462b      	mov	r3, r5
 801f836:	4a40      	ldr	r2, [pc, #256]	; (801f938 <Web_thread+0x2c4>)
 801f838:	4944      	ldr	r1, [pc, #272]	; (801f94c <Web_thread+0x2d8>)
 801f83a:	4630      	mov	r0, r6
 801f83c:	f7ff fd11 	bl	801f262 <siprintf>
								netconn_write(newconn, PAGE_BODY,
 801f840:	4630      	mov	r0, r6
 801f842:	f7f0 fc07 	bl	8010054 <strlen>
 801f846:	2300      	movs	r3, #0
 801f848:	9300      	str	r3, [sp, #0]
 801f84a:	2301      	movs	r3, #1
 801f84c:	4602      	mov	r2, r0
 801f84e:	4631      	mov	r1, r6
 801f850:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f852:	f7f5 fadd 	bl	8014e10 <netconn_write_partly>
								vPortFree(json);
 801f856:	4628      	mov	r0, r5
 801f858:	f7f3 fe66 	bl	8013528 <vPortFree>
 801f85c:	e723      	b.n	801f6a6 <Web_thread+0x32>
							sprintf(PAGE_BODY, "%s%s", PAGE_HEADER,
 801f85e:	483c      	ldr	r0, [pc, #240]	; (801f950 <Web_thread+0x2dc>)
 801f860:	f7f7 fd52 	bl	8017308 <ip4addr_ntoa>
 801f864:	4d38      	ldr	r5, [pc, #224]	; (801f948 <Web_thread+0x2d4>)
 801f866:	4603      	mov	r3, r0
 801f868:	4a33      	ldr	r2, [pc, #204]	; (801f938 <Web_thread+0x2c4>)
 801f86a:	4938      	ldr	r1, [pc, #224]	; (801f94c <Web_thread+0x2d8>)
 801f86c:	4628      	mov	r0, r5
 801f86e:	f7ff fcf8 	bl	801f262 <siprintf>
							netconn_write(newconn, PAGE_BODY,
 801f872:	4628      	mov	r0, r5
 801f874:	f7f0 fbee 	bl	8010054 <strlen>
 801f878:	2300      	movs	r3, #0
 801f87a:	9300      	str	r3, [sp, #0]
 801f87c:	2301      	movs	r3, #1
 801f87e:	4602      	mov	r2, r0
 801f880:	4629      	mov	r1, r5
 801f882:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f884:	f7f5 fac4 	bl	8014e10 <netconn_write_partly>
 801f888:	e70d      	b.n	801f6a6 <Web_thread+0x32>
							sprintf(PAGE_BODY, "%s%u", PAGE_HEADER,
 801f88a:	4d2f      	ldr	r5, [pc, #188]	; (801f948 <Web_thread+0x2d4>)
 801f88c:	4b31      	ldr	r3, [pc, #196]	; (801f954 <Web_thread+0x2e0>)
 801f88e:	685b      	ldr	r3, [r3, #4]
 801f890:	4a29      	ldr	r2, [pc, #164]	; (801f938 <Web_thread+0x2c4>)
 801f892:	4931      	ldr	r1, [pc, #196]	; (801f958 <Web_thread+0x2e4>)
 801f894:	4628      	mov	r0, r5
 801f896:	f7ff fce4 	bl	801f262 <siprintf>
							netconn_write(newconn, PAGE_BODY,
 801f89a:	4628      	mov	r0, r5
 801f89c:	f7f0 fbda 	bl	8010054 <strlen>
 801f8a0:	2300      	movs	r3, #0
 801f8a2:	9300      	str	r3, [sp, #0]
 801f8a4:	2301      	movs	r3, #1
 801f8a6:	4602      	mov	r2, r0
 801f8a8:	4629      	mov	r1, r5
 801f8aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f8ac:	f7f5 fab0 	bl	8014e10 <netconn_write_partly>
 801f8b0:	e6f9      	b.n	801f6a6 <Web_thread+0x32>
							form_data_parser(++buf);
 801f8b2:	1c68      	adds	r0, r5, #1
 801f8b4:	9008      	str	r0, [sp, #32]
 801f8b6:	f7ff fe7d 	bl	801f5b4 <form_data_parser>
							fs_open(&file, "/index.shtml");
 801f8ba:	4914      	ldr	r1, [pc, #80]	; (801f90c <Web_thread+0x298>)
 801f8bc:	a803      	add	r0, sp, #12
 801f8be:	f7f6 fc73 	bl	80161a8 <fs_open>
							netconn_write(newconn,
 801f8c2:	2300      	movs	r3, #0
 801f8c4:	9300      	str	r3, [sp, #0]
 801f8c6:	9a04      	ldr	r2, [sp, #16]
 801f8c8:	9903      	ldr	r1, [sp, #12]
 801f8ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f8cc:	f7f5 faa0 	bl	8014e10 <netconn_write_partly>
							fs_close(&file);
 801f8d0:	a803      	add	r0, sp, #12
 801f8d2:	f7f6 fc8d 	bl	80161f0 <fs_close>
 801f8d6:	e6e6      	b.n	801f6a6 <Web_thread+0x32>
							fs_open(&file, "/404.html");
 801f8d8:	4920      	ldr	r1, [pc, #128]	; (801f95c <Web_thread+0x2e8>)
 801f8da:	a803      	add	r0, sp, #12
 801f8dc:	f7f6 fc64 	bl	80161a8 <fs_open>
							netconn_write(newconn,
 801f8e0:	2300      	movs	r3, #0
 801f8e2:	9300      	str	r3, [sp, #0]
 801f8e4:	9a04      	ldr	r2, [sp, #16]
 801f8e6:	9903      	ldr	r1, [sp, #12]
 801f8e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f8ea:	f7f5 fa91 	bl	8014e10 <netconn_write_partly>
							fs_close(&file);
 801f8ee:	a803      	add	r0, sp, #12
 801f8f0:	f7f6 fc7e 	bl	80161f0 <fs_close>
							printf("File not found\n");
 801f8f4:	481a      	ldr	r0, [pc, #104]	; (801f960 <Web_thread+0x2ec>)
 801f8f6:	f7ff fce5 	bl	801f2c4 <puts>
							osDelay(1);
 801f8fa:	2001      	movs	r0, #1
 801f8fc:	f7f3 f986 	bl	8012c0c <osDelay>
 801f900:	e6d1      	b.n	801f6a6 <Web_thread+0x32>
 801f902:	bf00      	nop
 801f904:	2000ecd8 	.word	0x2000ecd8
 801f908:	20011dfc 	.word	0x20011dfc
 801f90c:	08024b8c 	.word	0x08024b8c
 801f910:	08024b70 	.word	0x08024b70
 801f914:	08024b78 	.word	0x08024b78
 801f918:	08024b80 	.word	0x08024b80
 801f91c:	08024b9c 	.word	0x08024b9c
 801f920:	08024bbc 	.word	0x08024bbc
 801f924:	08024bdc 	.word	0x08024bdc
 801f928:	08024bf4 	.word	0x08024bf4
 801f92c:	08024c08 	.word	0x08024c08
 801f930:	08024c18 	.word	0x08024c18
 801f934:	08024c30 	.word	0x08024c30
 801f938:	08024b04 	.word	0x08024b04
 801f93c:	08024bac 	.word	0x08024bac
 801f940:	08024bcc 	.word	0x08024bcc
 801f944:	08024be8 	.word	0x08024be8
 801f948:	20009ea8 	.word	0x20009ea8
 801f94c:	08024c00 	.word	0x08024c00
 801f950:	20011e70 	.word	0x20011e70
 801f954:	20011ff4 	.word	0x20011ff4
 801f958:	08024c28 	.word	0x08024c28
 801f95c:	08024c38 	.word	0x08024c38
 801f960:	08024c44 	.word	0x08024c44

0801f964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 801f964:	f8df d034 	ldr.w	sp, [pc, #52]	; 801f99c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801f968:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801f96a:	e003      	b.n	801f974 <LoopCopyDataInit>

0801f96c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801f96c:	4b0c      	ldr	r3, [pc, #48]	; (801f9a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801f96e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801f970:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801f972:	3104      	adds	r1, #4

0801f974 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801f974:	480b      	ldr	r0, [pc, #44]	; (801f9a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801f976:	4b0c      	ldr	r3, [pc, #48]	; (801f9a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801f978:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801f97a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801f97c:	d3f6      	bcc.n	801f96c <CopyDataInit>
  ldr  r2, =_sbss
 801f97e:	4a0b      	ldr	r2, [pc, #44]	; (801f9ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801f980:	e002      	b.n	801f988 <LoopFillZerobss>

0801f982 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801f982:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801f984:	f842 3b04 	str.w	r3, [r2], #4

0801f988 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801f988:	4b09      	ldr	r3, [pc, #36]	; (801f9b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801f98a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801f98c:	d3f9      	bcc.n	801f982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801f98e:	f7ff fa13 	bl	801edb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801f992:	f000 f815 	bl	801f9c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801f996:	f7fe fca7 	bl	801e2e8 <main>
  bx  lr    
 801f99a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801f99c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801f9a0:	08024d94 	.word	0x08024d94
  ldr  r0, =_sdata
 801f9a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801f9a8:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 801f9ac:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 801f9b0:	200120d4 	.word	0x200120d4

0801f9b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801f9b4:	e7fe      	b.n	801f9b4 <ADC_IRQHandler>

0801f9b6 <atoi>:
 801f9b6:	220a      	movs	r2, #10
 801f9b8:	2100      	movs	r1, #0
 801f9ba:	f000 b8fb 	b.w	801fbb4 <strtol>
	...

0801f9c0 <__libc_init_array>:
 801f9c0:	b570      	push	{r4, r5, r6, lr}
 801f9c2:	4e0d      	ldr	r6, [pc, #52]	; (801f9f8 <__libc_init_array+0x38>)
 801f9c4:	4c0d      	ldr	r4, [pc, #52]	; (801f9fc <__libc_init_array+0x3c>)
 801f9c6:	1ba4      	subs	r4, r4, r6
 801f9c8:	10a4      	asrs	r4, r4, #2
 801f9ca:	2500      	movs	r5, #0
 801f9cc:	42a5      	cmp	r5, r4
 801f9ce:	d109      	bne.n	801f9e4 <__libc_init_array+0x24>
 801f9d0:	4e0b      	ldr	r6, [pc, #44]	; (801fa00 <__libc_init_array+0x40>)
 801f9d2:	4c0c      	ldr	r4, [pc, #48]	; (801fa04 <__libc_init_array+0x44>)
 801f9d4:	f000 f966 	bl	801fca4 <_init>
 801f9d8:	1ba4      	subs	r4, r4, r6
 801f9da:	10a4      	asrs	r4, r4, #2
 801f9dc:	2500      	movs	r5, #0
 801f9de:	42a5      	cmp	r5, r4
 801f9e0:	d105      	bne.n	801f9ee <__libc_init_array+0x2e>
 801f9e2:	bd70      	pop	{r4, r5, r6, pc}
 801f9e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f9e8:	4798      	blx	r3
 801f9ea:	3501      	adds	r5, #1
 801f9ec:	e7ee      	b.n	801f9cc <__libc_init_array+0xc>
 801f9ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f9f2:	4798      	blx	r3
 801f9f4:	3501      	adds	r5, #1
 801f9f6:	e7f2      	b.n	801f9de <__libc_init_array+0x1e>
 801f9f8:	08024d8c 	.word	0x08024d8c
 801f9fc:	08024d8c 	.word	0x08024d8c
 801fa00:	08024d8c 	.word	0x08024d8c
 801fa04:	08024d90 	.word	0x08024d90

0801fa08 <__itoa>:
 801fa08:	1e93      	subs	r3, r2, #2
 801fa0a:	2b22      	cmp	r3, #34	; 0x22
 801fa0c:	b510      	push	{r4, lr}
 801fa0e:	460c      	mov	r4, r1
 801fa10:	d904      	bls.n	801fa1c <__itoa+0x14>
 801fa12:	2300      	movs	r3, #0
 801fa14:	700b      	strb	r3, [r1, #0]
 801fa16:	461c      	mov	r4, r3
 801fa18:	4620      	mov	r0, r4
 801fa1a:	bd10      	pop	{r4, pc}
 801fa1c:	2a0a      	cmp	r2, #10
 801fa1e:	d109      	bne.n	801fa34 <__itoa+0x2c>
 801fa20:	2800      	cmp	r0, #0
 801fa22:	da07      	bge.n	801fa34 <__itoa+0x2c>
 801fa24:	232d      	movs	r3, #45	; 0x2d
 801fa26:	700b      	strb	r3, [r1, #0]
 801fa28:	4240      	negs	r0, r0
 801fa2a:	2101      	movs	r1, #1
 801fa2c:	4421      	add	r1, r4
 801fa2e:	f000 f8d7 	bl	801fbe0 <__utoa>
 801fa32:	e7f1      	b.n	801fa18 <__itoa+0x10>
 801fa34:	2100      	movs	r1, #0
 801fa36:	e7f9      	b.n	801fa2c <__itoa+0x24>

0801fa38 <itoa>:
 801fa38:	f7ff bfe6 	b.w	801fa08 <__itoa>

0801fa3c <memcmp>:
 801fa3c:	b510      	push	{r4, lr}
 801fa3e:	3901      	subs	r1, #1
 801fa40:	4402      	add	r2, r0
 801fa42:	4290      	cmp	r0, r2
 801fa44:	d101      	bne.n	801fa4a <memcmp+0xe>
 801fa46:	2000      	movs	r0, #0
 801fa48:	bd10      	pop	{r4, pc}
 801fa4a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fa4e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fa52:	42a3      	cmp	r3, r4
 801fa54:	d0f5      	beq.n	801fa42 <memcmp+0x6>
 801fa56:	1b18      	subs	r0, r3, r4
 801fa58:	bd10      	pop	{r4, pc}

0801fa5a <memcpy>:
 801fa5a:	b510      	push	{r4, lr}
 801fa5c:	1e43      	subs	r3, r0, #1
 801fa5e:	440a      	add	r2, r1
 801fa60:	4291      	cmp	r1, r2
 801fa62:	d100      	bne.n	801fa66 <memcpy+0xc>
 801fa64:	bd10      	pop	{r4, pc}
 801fa66:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fa6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fa6e:	e7f7      	b.n	801fa60 <memcpy+0x6>

0801fa70 <memset>:
 801fa70:	4402      	add	r2, r0
 801fa72:	4603      	mov	r3, r0
 801fa74:	4293      	cmp	r3, r2
 801fa76:	d100      	bne.n	801fa7a <memset+0xa>
 801fa78:	4770      	bx	lr
 801fa7a:	f803 1b01 	strb.w	r1, [r3], #1
 801fa7e:	e7f9      	b.n	801fa74 <memset+0x4>

0801fa80 <strcpy>:
 801fa80:	4603      	mov	r3, r0
 801fa82:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fa86:	f803 2b01 	strb.w	r2, [r3], #1
 801fa8a:	2a00      	cmp	r2, #0
 801fa8c:	d1f9      	bne.n	801fa82 <strcpy+0x2>
 801fa8e:	4770      	bx	lr

0801fa90 <strncmp>:
 801fa90:	b510      	push	{r4, lr}
 801fa92:	b16a      	cbz	r2, 801fab0 <strncmp+0x20>
 801fa94:	3901      	subs	r1, #1
 801fa96:	1884      	adds	r4, r0, r2
 801fa98:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fa9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801faa0:	4293      	cmp	r3, r2
 801faa2:	d103      	bne.n	801faac <strncmp+0x1c>
 801faa4:	42a0      	cmp	r0, r4
 801faa6:	d001      	beq.n	801faac <strncmp+0x1c>
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	d1f5      	bne.n	801fa98 <strncmp+0x8>
 801faac:	1a98      	subs	r0, r3, r2
 801faae:	bd10      	pop	{r4, pc}
 801fab0:	4610      	mov	r0, r2
 801fab2:	bd10      	pop	{r4, pc}

0801fab4 <_strtol_l.isra.0>:
 801fab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fab8:	4680      	mov	r8, r0
 801faba:	4689      	mov	r9, r1
 801fabc:	4692      	mov	sl, r2
 801fabe:	461f      	mov	r7, r3
 801fac0:	468b      	mov	fp, r1
 801fac2:	465d      	mov	r5, fp
 801fac4:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801faca:	f000 f8c9 	bl	801fc60 <__locale_ctype_ptr_l>
 801face:	4420      	add	r0, r4
 801fad0:	7846      	ldrb	r6, [r0, #1]
 801fad2:	f016 0608 	ands.w	r6, r6, #8
 801fad6:	d10b      	bne.n	801faf0 <_strtol_l.isra.0+0x3c>
 801fad8:	2c2d      	cmp	r4, #45	; 0x2d
 801fada:	d10b      	bne.n	801faf4 <_strtol_l.isra.0+0x40>
 801fadc:	782c      	ldrb	r4, [r5, #0]
 801fade:	2601      	movs	r6, #1
 801fae0:	f10b 0502 	add.w	r5, fp, #2
 801fae4:	b167      	cbz	r7, 801fb00 <_strtol_l.isra.0+0x4c>
 801fae6:	2f10      	cmp	r7, #16
 801fae8:	d114      	bne.n	801fb14 <_strtol_l.isra.0+0x60>
 801faea:	2c30      	cmp	r4, #48	; 0x30
 801faec:	d00a      	beq.n	801fb04 <_strtol_l.isra.0+0x50>
 801faee:	e011      	b.n	801fb14 <_strtol_l.isra.0+0x60>
 801faf0:	46ab      	mov	fp, r5
 801faf2:	e7e6      	b.n	801fac2 <_strtol_l.isra.0+0xe>
 801faf4:	2c2b      	cmp	r4, #43	; 0x2b
 801faf6:	bf04      	itt	eq
 801faf8:	782c      	ldrbeq	r4, [r5, #0]
 801fafa:	f10b 0502 	addeq.w	r5, fp, #2
 801fafe:	e7f1      	b.n	801fae4 <_strtol_l.isra.0+0x30>
 801fb00:	2c30      	cmp	r4, #48	; 0x30
 801fb02:	d127      	bne.n	801fb54 <_strtol_l.isra.0+0xa0>
 801fb04:	782b      	ldrb	r3, [r5, #0]
 801fb06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fb0a:	2b58      	cmp	r3, #88	; 0x58
 801fb0c:	d14b      	bne.n	801fba6 <_strtol_l.isra.0+0xf2>
 801fb0e:	786c      	ldrb	r4, [r5, #1]
 801fb10:	2710      	movs	r7, #16
 801fb12:	3502      	adds	r5, #2
 801fb14:	2e00      	cmp	r6, #0
 801fb16:	bf0c      	ite	eq
 801fb18:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801fb1c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801fb20:	2200      	movs	r2, #0
 801fb22:	fbb1 fef7 	udiv	lr, r1, r7
 801fb26:	4610      	mov	r0, r2
 801fb28:	fb07 1c1e 	mls	ip, r7, lr, r1
 801fb2c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801fb30:	2b09      	cmp	r3, #9
 801fb32:	d811      	bhi.n	801fb58 <_strtol_l.isra.0+0xa4>
 801fb34:	461c      	mov	r4, r3
 801fb36:	42a7      	cmp	r7, r4
 801fb38:	dd1d      	ble.n	801fb76 <_strtol_l.isra.0+0xc2>
 801fb3a:	1c53      	adds	r3, r2, #1
 801fb3c:	d007      	beq.n	801fb4e <_strtol_l.isra.0+0x9a>
 801fb3e:	4586      	cmp	lr, r0
 801fb40:	d316      	bcc.n	801fb70 <_strtol_l.isra.0+0xbc>
 801fb42:	d101      	bne.n	801fb48 <_strtol_l.isra.0+0x94>
 801fb44:	45a4      	cmp	ip, r4
 801fb46:	db13      	blt.n	801fb70 <_strtol_l.isra.0+0xbc>
 801fb48:	fb00 4007 	mla	r0, r0, r7, r4
 801fb4c:	2201      	movs	r2, #1
 801fb4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fb52:	e7eb      	b.n	801fb2c <_strtol_l.isra.0+0x78>
 801fb54:	270a      	movs	r7, #10
 801fb56:	e7dd      	b.n	801fb14 <_strtol_l.isra.0+0x60>
 801fb58:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801fb5c:	2b19      	cmp	r3, #25
 801fb5e:	d801      	bhi.n	801fb64 <_strtol_l.isra.0+0xb0>
 801fb60:	3c37      	subs	r4, #55	; 0x37
 801fb62:	e7e8      	b.n	801fb36 <_strtol_l.isra.0+0x82>
 801fb64:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801fb68:	2b19      	cmp	r3, #25
 801fb6a:	d804      	bhi.n	801fb76 <_strtol_l.isra.0+0xc2>
 801fb6c:	3c57      	subs	r4, #87	; 0x57
 801fb6e:	e7e2      	b.n	801fb36 <_strtol_l.isra.0+0x82>
 801fb70:	f04f 32ff 	mov.w	r2, #4294967295
 801fb74:	e7eb      	b.n	801fb4e <_strtol_l.isra.0+0x9a>
 801fb76:	1c53      	adds	r3, r2, #1
 801fb78:	d108      	bne.n	801fb8c <_strtol_l.isra.0+0xd8>
 801fb7a:	2322      	movs	r3, #34	; 0x22
 801fb7c:	f8c8 3000 	str.w	r3, [r8]
 801fb80:	4608      	mov	r0, r1
 801fb82:	f1ba 0f00 	cmp.w	sl, #0
 801fb86:	d107      	bne.n	801fb98 <_strtol_l.isra.0+0xe4>
 801fb88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb8c:	b106      	cbz	r6, 801fb90 <_strtol_l.isra.0+0xdc>
 801fb8e:	4240      	negs	r0, r0
 801fb90:	f1ba 0f00 	cmp.w	sl, #0
 801fb94:	d00c      	beq.n	801fbb0 <_strtol_l.isra.0+0xfc>
 801fb96:	b122      	cbz	r2, 801fba2 <_strtol_l.isra.0+0xee>
 801fb98:	3d01      	subs	r5, #1
 801fb9a:	f8ca 5000 	str.w	r5, [sl]
 801fb9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fba2:	464d      	mov	r5, r9
 801fba4:	e7f9      	b.n	801fb9a <_strtol_l.isra.0+0xe6>
 801fba6:	2430      	movs	r4, #48	; 0x30
 801fba8:	2f00      	cmp	r7, #0
 801fbaa:	d1b3      	bne.n	801fb14 <_strtol_l.isra.0+0x60>
 801fbac:	2708      	movs	r7, #8
 801fbae:	e7b1      	b.n	801fb14 <_strtol_l.isra.0+0x60>
 801fbb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fbb4 <strtol>:
 801fbb4:	4b08      	ldr	r3, [pc, #32]	; (801fbd8 <strtol+0x24>)
 801fbb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fbb8:	681c      	ldr	r4, [r3, #0]
 801fbba:	4d08      	ldr	r5, [pc, #32]	; (801fbdc <strtol+0x28>)
 801fbbc:	6a23      	ldr	r3, [r4, #32]
 801fbbe:	2b00      	cmp	r3, #0
 801fbc0:	bf08      	it	eq
 801fbc2:	462b      	moveq	r3, r5
 801fbc4:	9300      	str	r3, [sp, #0]
 801fbc6:	4613      	mov	r3, r2
 801fbc8:	460a      	mov	r2, r1
 801fbca:	4601      	mov	r1, r0
 801fbcc:	4620      	mov	r0, r4
 801fbce:	f7ff ff71 	bl	801fab4 <_strtol_l.isra.0>
 801fbd2:	b003      	add	sp, #12
 801fbd4:	bd30      	pop	{r4, r5, pc}
 801fbd6:	bf00      	nop
 801fbd8:	20000040 	.word	0x20000040
 801fbdc:	200000a4 	.word	0x200000a4

0801fbe0 <__utoa>:
 801fbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbe2:	4c1e      	ldr	r4, [pc, #120]	; (801fc5c <__utoa+0x7c>)
 801fbe4:	b08b      	sub	sp, #44	; 0x2c
 801fbe6:	4603      	mov	r3, r0
 801fbe8:	460f      	mov	r7, r1
 801fbea:	466d      	mov	r5, sp
 801fbec:	f104 0e20 	add.w	lr, r4, #32
 801fbf0:	6820      	ldr	r0, [r4, #0]
 801fbf2:	6861      	ldr	r1, [r4, #4]
 801fbf4:	462e      	mov	r6, r5
 801fbf6:	c603      	stmia	r6!, {r0, r1}
 801fbf8:	3408      	adds	r4, #8
 801fbfa:	4574      	cmp	r4, lr
 801fbfc:	4635      	mov	r5, r6
 801fbfe:	d1f7      	bne.n	801fbf0 <__utoa+0x10>
 801fc00:	7921      	ldrb	r1, [r4, #4]
 801fc02:	7131      	strb	r1, [r6, #4]
 801fc04:	1e91      	subs	r1, r2, #2
 801fc06:	6820      	ldr	r0, [r4, #0]
 801fc08:	6030      	str	r0, [r6, #0]
 801fc0a:	2922      	cmp	r1, #34	; 0x22
 801fc0c:	f04f 0100 	mov.w	r1, #0
 801fc10:	d904      	bls.n	801fc1c <__utoa+0x3c>
 801fc12:	7039      	strb	r1, [r7, #0]
 801fc14:	460f      	mov	r7, r1
 801fc16:	4638      	mov	r0, r7
 801fc18:	b00b      	add	sp, #44	; 0x2c
 801fc1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc1c:	1e78      	subs	r0, r7, #1
 801fc1e:	4606      	mov	r6, r0
 801fc20:	fbb3 f5f2 	udiv	r5, r3, r2
 801fc24:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801fc28:	fb02 3315 	mls	r3, r2, r5, r3
 801fc2c:	4473      	add	r3, lr
 801fc2e:	1c4c      	adds	r4, r1, #1
 801fc30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801fc34:	f806 3f01 	strb.w	r3, [r6, #1]!
 801fc38:	462b      	mov	r3, r5
 801fc3a:	b965      	cbnz	r5, 801fc56 <__utoa+0x76>
 801fc3c:	553d      	strb	r5, [r7, r4]
 801fc3e:	187a      	adds	r2, r7, r1
 801fc40:	1acc      	subs	r4, r1, r3
 801fc42:	42a3      	cmp	r3, r4
 801fc44:	dae7      	bge.n	801fc16 <__utoa+0x36>
 801fc46:	7844      	ldrb	r4, [r0, #1]
 801fc48:	7815      	ldrb	r5, [r2, #0]
 801fc4a:	f800 5f01 	strb.w	r5, [r0, #1]!
 801fc4e:	3301      	adds	r3, #1
 801fc50:	f802 4901 	strb.w	r4, [r2], #-1
 801fc54:	e7f4      	b.n	801fc40 <__utoa+0x60>
 801fc56:	4621      	mov	r1, r4
 801fc58:	e7e2      	b.n	801fc20 <__utoa+0x40>
 801fc5a:	bf00      	nop
 801fc5c:	08024c54 	.word	0x08024c54

0801fc60 <__locale_ctype_ptr_l>:
 801fc60:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801fc64:	4770      	bx	lr

0801fc66 <__ascii_mbtowc>:
 801fc66:	b082      	sub	sp, #8
 801fc68:	b901      	cbnz	r1, 801fc6c <__ascii_mbtowc+0x6>
 801fc6a:	a901      	add	r1, sp, #4
 801fc6c:	b142      	cbz	r2, 801fc80 <__ascii_mbtowc+0x1a>
 801fc6e:	b14b      	cbz	r3, 801fc84 <__ascii_mbtowc+0x1e>
 801fc70:	7813      	ldrb	r3, [r2, #0]
 801fc72:	600b      	str	r3, [r1, #0]
 801fc74:	7812      	ldrb	r2, [r2, #0]
 801fc76:	1c10      	adds	r0, r2, #0
 801fc78:	bf18      	it	ne
 801fc7a:	2001      	movne	r0, #1
 801fc7c:	b002      	add	sp, #8
 801fc7e:	4770      	bx	lr
 801fc80:	4610      	mov	r0, r2
 801fc82:	e7fb      	b.n	801fc7c <__ascii_mbtowc+0x16>
 801fc84:	f06f 0001 	mvn.w	r0, #1
 801fc88:	e7f8      	b.n	801fc7c <__ascii_mbtowc+0x16>

0801fc8a <__ascii_wctomb>:
 801fc8a:	b149      	cbz	r1, 801fca0 <__ascii_wctomb+0x16>
 801fc8c:	2aff      	cmp	r2, #255	; 0xff
 801fc8e:	bf85      	ittet	hi
 801fc90:	238a      	movhi	r3, #138	; 0x8a
 801fc92:	6003      	strhi	r3, [r0, #0]
 801fc94:	700a      	strbls	r2, [r1, #0]
 801fc96:	f04f 30ff 	movhi.w	r0, #4294967295
 801fc9a:	bf98      	it	ls
 801fc9c:	2001      	movls	r0, #1
 801fc9e:	4770      	bx	lr
 801fca0:	4608      	mov	r0, r1
 801fca2:	4770      	bx	lr

0801fca4 <_init>:
 801fca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fca6:	bf00      	nop
 801fca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcaa:	bc08      	pop	{r3}
 801fcac:	469e      	mov	lr, r3
 801fcae:	4770      	bx	lr

0801fcb0 <_fini>:
 801fcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcb2:	bf00      	nop
 801fcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcb6:	bc08      	pop	{r3}
 801fcb8:	469e      	mov	lr, r3
 801fcba:	4770      	bx	lr
