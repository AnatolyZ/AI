
AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .eeprom_emul  00000000  08008000  08008000  00040220  2**0
                  CONTENTS
  2 .text         00016a68  08010000  08010000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004e2c  08026a68  08026a68  00036a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0802b894  0802b894  0003b894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0802b89c  0802b89c  0003b89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0802b8a0  0802b8a0  0003b8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000220  20000000  0802b8a4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00040220  2**0
                  CONTENTS
  9 .bss          00011e48  20000220  20000220  00040220  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20012068  20012068  00040220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000544d9  00000000  00000000  00040250  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000994c  00000000  00000000  00094729  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022d0  00000000  00000000  0009e078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fd8  00000000  00000000  000a0348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00018175  00000000  00000000  000a2320  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a91e  00000000  00000000  000ba495  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000c4db3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008b68  00000000  00000000  000c4e30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08010000 <__do_global_dtors_aux>:
 8010000:	b510      	push	{r4, lr}
 8010002:	4c05      	ldr	r4, [pc, #20]	; (8010018 <__do_global_dtors_aux+0x18>)
 8010004:	7823      	ldrb	r3, [r4, #0]
 8010006:	b933      	cbnz	r3, 8010016 <__do_global_dtors_aux+0x16>
 8010008:	4b04      	ldr	r3, [pc, #16]	; (801001c <__do_global_dtors_aux+0x1c>)
 801000a:	b113      	cbz	r3, 8010012 <__do_global_dtors_aux+0x12>
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <__do_global_dtors_aux+0x20>)
 801000e:	f3af 8000 	nop.w
 8010012:	2301      	movs	r3, #1
 8010014:	7023      	strb	r3, [r4, #0]
 8010016:	bd10      	pop	{r4, pc}
 8010018:	20000220 	.word	0x20000220
 801001c:	00000000 	.word	0x00000000
 8010020:	08026a50 	.word	0x08026a50

08010024 <frame_dummy>:
 8010024:	b508      	push	{r3, lr}
 8010026:	4b03      	ldr	r3, [pc, #12]	; (8010034 <frame_dummy+0x10>)
 8010028:	b11b      	cbz	r3, 8010032 <frame_dummy+0xe>
 801002a:	4903      	ldr	r1, [pc, #12]	; (8010038 <frame_dummy+0x14>)
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <frame_dummy+0x18>)
 801002e:	f3af 8000 	nop.w
 8010032:	bd08      	pop	{r3, pc}
 8010034:	00000000 	.word	0x00000000
 8010038:	20000224 	.word	0x20000224
 801003c:	08026a50 	.word	0x08026a50

08010040 <strcmp>:
 8010040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010048:	2a01      	cmp	r2, #1
 801004a:	bf28      	it	cs
 801004c:	429a      	cmpcs	r2, r3
 801004e:	d0f7      	beq.n	8010040 <strcmp>
 8010050:	1ad0      	subs	r0, r2, r3
 8010052:	4770      	bx	lr

08010054 <strlen>:
 8010054:	4603      	mov	r3, r0
 8010056:	f813 2b01 	ldrb.w	r2, [r3], #1
 801005a:	2a00      	cmp	r2, #0
 801005c:	d1fb      	bne.n	8010056 <strlen+0x2>
 801005e:	1a18      	subs	r0, r3, r0
 8010060:	3801      	subs	r0, #1
 8010062:	4770      	bx	lr

08010064 <__aeabi_uldivmod>:
 8010064:	b953      	cbnz	r3, 801007c <__aeabi_uldivmod+0x18>
 8010066:	b94a      	cbnz	r2, 801007c <__aeabi_uldivmod+0x18>
 8010068:	2900      	cmp	r1, #0
 801006a:	bf08      	it	eq
 801006c:	2800      	cmpeq	r0, #0
 801006e:	bf1c      	itt	ne
 8010070:	f04f 31ff 	movne.w	r1, #4294967295
 8010074:	f04f 30ff 	movne.w	r0, #4294967295
 8010078:	f000 b97a 	b.w	8010370 <__aeabi_idiv0>
 801007c:	f1ad 0c08 	sub.w	ip, sp, #8
 8010080:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010084:	f000 f806 	bl	8010094 <__udivmoddi4>
 8010088:	f8dd e004 	ldr.w	lr, [sp, #4]
 801008c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010090:	b004      	add	sp, #16
 8010092:	4770      	bx	lr

08010094 <__udivmoddi4>:
 8010094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010098:	468c      	mov	ip, r1
 801009a:	460d      	mov	r5, r1
 801009c:	4604      	mov	r4, r0
 801009e:	9e08      	ldr	r6, [sp, #32]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d151      	bne.n	8010148 <__udivmoddi4+0xb4>
 80100a4:	428a      	cmp	r2, r1
 80100a6:	4617      	mov	r7, r2
 80100a8:	d96d      	bls.n	8010186 <__udivmoddi4+0xf2>
 80100aa:	fab2 fe82 	clz	lr, r2
 80100ae:	f1be 0f00 	cmp.w	lr, #0
 80100b2:	d00b      	beq.n	80100cc <__udivmoddi4+0x38>
 80100b4:	f1ce 0c20 	rsb	ip, lr, #32
 80100b8:	fa01 f50e 	lsl.w	r5, r1, lr
 80100bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80100c0:	fa02 f70e 	lsl.w	r7, r2, lr
 80100c4:	ea4c 0c05 	orr.w	ip, ip, r5
 80100c8:	fa00 f40e 	lsl.w	r4, r0, lr
 80100cc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80100d0:	0c25      	lsrs	r5, r4, #16
 80100d2:	fbbc f8fa 	udiv	r8, ip, sl
 80100d6:	fa1f f987 	uxth.w	r9, r7
 80100da:	fb0a cc18 	mls	ip, sl, r8, ip
 80100de:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80100e2:	fb08 f309 	mul.w	r3, r8, r9
 80100e6:	42ab      	cmp	r3, r5
 80100e8:	d90a      	bls.n	8010100 <__udivmoddi4+0x6c>
 80100ea:	19ed      	adds	r5, r5, r7
 80100ec:	f108 32ff 	add.w	r2, r8, #4294967295
 80100f0:	f080 8123 	bcs.w	801033a <__udivmoddi4+0x2a6>
 80100f4:	42ab      	cmp	r3, r5
 80100f6:	f240 8120 	bls.w	801033a <__udivmoddi4+0x2a6>
 80100fa:	f1a8 0802 	sub.w	r8, r8, #2
 80100fe:	443d      	add	r5, r7
 8010100:	1aed      	subs	r5, r5, r3
 8010102:	b2a4      	uxth	r4, r4
 8010104:	fbb5 f0fa 	udiv	r0, r5, sl
 8010108:	fb0a 5510 	mls	r5, sl, r0, r5
 801010c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010110:	fb00 f909 	mul.w	r9, r0, r9
 8010114:	45a1      	cmp	r9, r4
 8010116:	d909      	bls.n	801012c <__udivmoddi4+0x98>
 8010118:	19e4      	adds	r4, r4, r7
 801011a:	f100 33ff 	add.w	r3, r0, #4294967295
 801011e:	f080 810a 	bcs.w	8010336 <__udivmoddi4+0x2a2>
 8010122:	45a1      	cmp	r9, r4
 8010124:	f240 8107 	bls.w	8010336 <__udivmoddi4+0x2a2>
 8010128:	3802      	subs	r0, #2
 801012a:	443c      	add	r4, r7
 801012c:	eba4 0409 	sub.w	r4, r4, r9
 8010130:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010134:	2100      	movs	r1, #0
 8010136:	2e00      	cmp	r6, #0
 8010138:	d061      	beq.n	80101fe <__udivmoddi4+0x16a>
 801013a:	fa24 f40e 	lsr.w	r4, r4, lr
 801013e:	2300      	movs	r3, #0
 8010140:	6034      	str	r4, [r6, #0]
 8010142:	6073      	str	r3, [r6, #4]
 8010144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010148:	428b      	cmp	r3, r1
 801014a:	d907      	bls.n	801015c <__udivmoddi4+0xc8>
 801014c:	2e00      	cmp	r6, #0
 801014e:	d054      	beq.n	80101fa <__udivmoddi4+0x166>
 8010150:	2100      	movs	r1, #0
 8010152:	e886 0021 	stmia.w	r6, {r0, r5}
 8010156:	4608      	mov	r0, r1
 8010158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015c:	fab3 f183 	clz	r1, r3
 8010160:	2900      	cmp	r1, #0
 8010162:	f040 808e 	bne.w	8010282 <__udivmoddi4+0x1ee>
 8010166:	42ab      	cmp	r3, r5
 8010168:	d302      	bcc.n	8010170 <__udivmoddi4+0xdc>
 801016a:	4282      	cmp	r2, r0
 801016c:	f200 80fa 	bhi.w	8010364 <__udivmoddi4+0x2d0>
 8010170:	1a84      	subs	r4, r0, r2
 8010172:	eb65 0503 	sbc.w	r5, r5, r3
 8010176:	2001      	movs	r0, #1
 8010178:	46ac      	mov	ip, r5
 801017a:	2e00      	cmp	r6, #0
 801017c:	d03f      	beq.n	80101fe <__udivmoddi4+0x16a>
 801017e:	e886 1010 	stmia.w	r6, {r4, ip}
 8010182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010186:	b912      	cbnz	r2, 801018e <__udivmoddi4+0xfa>
 8010188:	2701      	movs	r7, #1
 801018a:	fbb7 f7f2 	udiv	r7, r7, r2
 801018e:	fab7 fe87 	clz	lr, r7
 8010192:	f1be 0f00 	cmp.w	lr, #0
 8010196:	d134      	bne.n	8010202 <__udivmoddi4+0x16e>
 8010198:	1beb      	subs	r3, r5, r7
 801019a:	0c3a      	lsrs	r2, r7, #16
 801019c:	fa1f fc87 	uxth.w	ip, r7
 80101a0:	2101      	movs	r1, #1
 80101a2:	fbb3 f8f2 	udiv	r8, r3, r2
 80101a6:	0c25      	lsrs	r5, r4, #16
 80101a8:	fb02 3318 	mls	r3, r2, r8, r3
 80101ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80101b0:	fb0c f308 	mul.w	r3, ip, r8
 80101b4:	42ab      	cmp	r3, r5
 80101b6:	d907      	bls.n	80101c8 <__udivmoddi4+0x134>
 80101b8:	19ed      	adds	r5, r5, r7
 80101ba:	f108 30ff 	add.w	r0, r8, #4294967295
 80101be:	d202      	bcs.n	80101c6 <__udivmoddi4+0x132>
 80101c0:	42ab      	cmp	r3, r5
 80101c2:	f200 80d1 	bhi.w	8010368 <__udivmoddi4+0x2d4>
 80101c6:	4680      	mov	r8, r0
 80101c8:	1aed      	subs	r5, r5, r3
 80101ca:	b2a3      	uxth	r3, r4
 80101cc:	fbb5 f0f2 	udiv	r0, r5, r2
 80101d0:	fb02 5510 	mls	r5, r2, r0, r5
 80101d4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80101d8:	fb0c fc00 	mul.w	ip, ip, r0
 80101dc:	45a4      	cmp	ip, r4
 80101de:	d907      	bls.n	80101f0 <__udivmoddi4+0x15c>
 80101e0:	19e4      	adds	r4, r4, r7
 80101e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80101e6:	d202      	bcs.n	80101ee <__udivmoddi4+0x15a>
 80101e8:	45a4      	cmp	ip, r4
 80101ea:	f200 80b8 	bhi.w	801035e <__udivmoddi4+0x2ca>
 80101ee:	4618      	mov	r0, r3
 80101f0:	eba4 040c 	sub.w	r4, r4, ip
 80101f4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80101f8:	e79d      	b.n	8010136 <__udivmoddi4+0xa2>
 80101fa:	4631      	mov	r1, r6
 80101fc:	4630      	mov	r0, r6
 80101fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010202:	f1ce 0420 	rsb	r4, lr, #32
 8010206:	fa05 f30e 	lsl.w	r3, r5, lr
 801020a:	fa07 f70e 	lsl.w	r7, r7, lr
 801020e:	fa20 f804 	lsr.w	r8, r0, r4
 8010212:	0c3a      	lsrs	r2, r7, #16
 8010214:	fa25 f404 	lsr.w	r4, r5, r4
 8010218:	ea48 0803 	orr.w	r8, r8, r3
 801021c:	fbb4 f1f2 	udiv	r1, r4, r2
 8010220:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8010224:	fb02 4411 	mls	r4, r2, r1, r4
 8010228:	fa1f fc87 	uxth.w	ip, r7
 801022c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8010230:	fb01 f30c 	mul.w	r3, r1, ip
 8010234:	42ab      	cmp	r3, r5
 8010236:	fa00 f40e 	lsl.w	r4, r0, lr
 801023a:	d909      	bls.n	8010250 <__udivmoddi4+0x1bc>
 801023c:	19ed      	adds	r5, r5, r7
 801023e:	f101 30ff 	add.w	r0, r1, #4294967295
 8010242:	f080 808a 	bcs.w	801035a <__udivmoddi4+0x2c6>
 8010246:	42ab      	cmp	r3, r5
 8010248:	f240 8087 	bls.w	801035a <__udivmoddi4+0x2c6>
 801024c:	3902      	subs	r1, #2
 801024e:	443d      	add	r5, r7
 8010250:	1aeb      	subs	r3, r5, r3
 8010252:	fa1f f588 	uxth.w	r5, r8
 8010256:	fbb3 f0f2 	udiv	r0, r3, r2
 801025a:	fb02 3310 	mls	r3, r2, r0, r3
 801025e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8010262:	fb00 f30c 	mul.w	r3, r0, ip
 8010266:	42ab      	cmp	r3, r5
 8010268:	d907      	bls.n	801027a <__udivmoddi4+0x1e6>
 801026a:	19ed      	adds	r5, r5, r7
 801026c:	f100 38ff 	add.w	r8, r0, #4294967295
 8010270:	d26f      	bcs.n	8010352 <__udivmoddi4+0x2be>
 8010272:	42ab      	cmp	r3, r5
 8010274:	d96d      	bls.n	8010352 <__udivmoddi4+0x2be>
 8010276:	3802      	subs	r0, #2
 8010278:	443d      	add	r5, r7
 801027a:	1aeb      	subs	r3, r5, r3
 801027c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8010280:	e78f      	b.n	80101a2 <__udivmoddi4+0x10e>
 8010282:	f1c1 0720 	rsb	r7, r1, #32
 8010286:	fa22 f807 	lsr.w	r8, r2, r7
 801028a:	408b      	lsls	r3, r1
 801028c:	fa05 f401 	lsl.w	r4, r5, r1
 8010290:	ea48 0303 	orr.w	r3, r8, r3
 8010294:	fa20 fe07 	lsr.w	lr, r0, r7
 8010298:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 801029c:	40fd      	lsrs	r5, r7
 801029e:	ea4e 0e04 	orr.w	lr, lr, r4
 80102a2:	fbb5 f9fc 	udiv	r9, r5, ip
 80102a6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80102aa:	fb0c 5519 	mls	r5, ip, r9, r5
 80102ae:	fa1f f883 	uxth.w	r8, r3
 80102b2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80102b6:	fb09 f408 	mul.w	r4, r9, r8
 80102ba:	42ac      	cmp	r4, r5
 80102bc:	fa02 f201 	lsl.w	r2, r2, r1
 80102c0:	fa00 fa01 	lsl.w	sl, r0, r1
 80102c4:	d908      	bls.n	80102d8 <__udivmoddi4+0x244>
 80102c6:	18ed      	adds	r5, r5, r3
 80102c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80102cc:	d243      	bcs.n	8010356 <__udivmoddi4+0x2c2>
 80102ce:	42ac      	cmp	r4, r5
 80102d0:	d941      	bls.n	8010356 <__udivmoddi4+0x2c2>
 80102d2:	f1a9 0902 	sub.w	r9, r9, #2
 80102d6:	441d      	add	r5, r3
 80102d8:	1b2d      	subs	r5, r5, r4
 80102da:	fa1f fe8e 	uxth.w	lr, lr
 80102de:	fbb5 f0fc 	udiv	r0, r5, ip
 80102e2:	fb0c 5510 	mls	r5, ip, r0, r5
 80102e6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80102ea:	fb00 f808 	mul.w	r8, r0, r8
 80102ee:	45a0      	cmp	r8, r4
 80102f0:	d907      	bls.n	8010302 <__udivmoddi4+0x26e>
 80102f2:	18e4      	adds	r4, r4, r3
 80102f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80102f8:	d229      	bcs.n	801034e <__udivmoddi4+0x2ba>
 80102fa:	45a0      	cmp	r8, r4
 80102fc:	d927      	bls.n	801034e <__udivmoddi4+0x2ba>
 80102fe:	3802      	subs	r0, #2
 8010300:	441c      	add	r4, r3
 8010302:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010306:	eba4 0408 	sub.w	r4, r4, r8
 801030a:	fba0 8902 	umull	r8, r9, r0, r2
 801030e:	454c      	cmp	r4, r9
 8010310:	46c6      	mov	lr, r8
 8010312:	464d      	mov	r5, r9
 8010314:	d315      	bcc.n	8010342 <__udivmoddi4+0x2ae>
 8010316:	d012      	beq.n	801033e <__udivmoddi4+0x2aa>
 8010318:	b156      	cbz	r6, 8010330 <__udivmoddi4+0x29c>
 801031a:	ebba 030e 	subs.w	r3, sl, lr
 801031e:	eb64 0405 	sbc.w	r4, r4, r5
 8010322:	fa04 f707 	lsl.w	r7, r4, r7
 8010326:	40cb      	lsrs	r3, r1
 8010328:	431f      	orrs	r7, r3
 801032a:	40cc      	lsrs	r4, r1
 801032c:	6037      	str	r7, [r6, #0]
 801032e:	6074      	str	r4, [r6, #4]
 8010330:	2100      	movs	r1, #0
 8010332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010336:	4618      	mov	r0, r3
 8010338:	e6f8      	b.n	801012c <__udivmoddi4+0x98>
 801033a:	4690      	mov	r8, r2
 801033c:	e6e0      	b.n	8010100 <__udivmoddi4+0x6c>
 801033e:	45c2      	cmp	sl, r8
 8010340:	d2ea      	bcs.n	8010318 <__udivmoddi4+0x284>
 8010342:	ebb8 0e02 	subs.w	lr, r8, r2
 8010346:	eb69 0503 	sbc.w	r5, r9, r3
 801034a:	3801      	subs	r0, #1
 801034c:	e7e4      	b.n	8010318 <__udivmoddi4+0x284>
 801034e:	4628      	mov	r0, r5
 8010350:	e7d7      	b.n	8010302 <__udivmoddi4+0x26e>
 8010352:	4640      	mov	r0, r8
 8010354:	e791      	b.n	801027a <__udivmoddi4+0x1e6>
 8010356:	4681      	mov	r9, r0
 8010358:	e7be      	b.n	80102d8 <__udivmoddi4+0x244>
 801035a:	4601      	mov	r1, r0
 801035c:	e778      	b.n	8010250 <__udivmoddi4+0x1bc>
 801035e:	3802      	subs	r0, #2
 8010360:	443c      	add	r4, r7
 8010362:	e745      	b.n	80101f0 <__udivmoddi4+0x15c>
 8010364:	4608      	mov	r0, r1
 8010366:	e708      	b.n	801017a <__udivmoddi4+0xe6>
 8010368:	f1a8 0802 	sub.w	r8, r8, #2
 801036c:	443d      	add	r5, r7
 801036e:	e72b      	b.n	80101c8 <__udivmoddi4+0x134>

08010370 <__aeabi_idiv0>:
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop

08010374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010378:	4a0e      	ldr	r2, [pc, #56]	; (80103b4 <HAL_Init+0x40>)
 801037a:	4b0e      	ldr	r3, [pc, #56]	; (80103b4 <HAL_Init+0x40>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010384:	4a0b      	ldr	r2, [pc, #44]	; (80103b4 <HAL_Init+0x40>)
 8010386:	4b0b      	ldr	r3, [pc, #44]	; (80103b4 <HAL_Init+0x40>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801038e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010390:	4a08      	ldr	r2, [pc, #32]	; (80103b4 <HAL_Init+0x40>)
 8010392:	4b08      	ldr	r3, [pc, #32]	; (80103b4 <HAL_Init+0x40>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801039a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801039c:	2003      	movs	r0, #3
 801039e:	f000 f90e 	bl	80105be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80103a2:	2000      	movs	r0, #0
 80103a4:	f015 f90a 	bl	80255bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80103a8:	f015 f8dc 	bl	8025564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80103ac:	2300      	movs	r3, #0
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	40023c00 	.word	0x40023c00

080103b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80103b8:	b480      	push	{r7}
 80103ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80103bc:	4b06      	ldr	r3, [pc, #24]	; (80103d8 <HAL_IncTick+0x20>)
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	461a      	mov	r2, r3
 80103c2:	4b06      	ldr	r3, [pc, #24]	; (80103dc <HAL_IncTick+0x24>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4413      	add	r3, r2
 80103c8:	4a04      	ldr	r2, [pc, #16]	; (80103dc <HAL_IncTick+0x24>)
 80103ca:	6013      	str	r3, [r2, #0]
}
 80103cc:	bf00      	nop
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	20000000 	.word	0x20000000
 80103dc:	2000a1b4 	.word	0x2000a1b4

080103e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80103e0:	b480      	push	{r7}
 80103e2:	af00      	add	r7, sp, #0
  return uwTick;
 80103e4:	4b03      	ldr	r3, [pc, #12]	; (80103f4 <HAL_GetTick+0x14>)
 80103e6:	681b      	ldr	r3, [r3, #0]
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	2000a1b4 	.word	0x2000a1b4

080103f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010400:	f7ff ffee 	bl	80103e0 <HAL_GetTick>
 8010404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010410:	d005      	beq.n	801041e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010412:	4b09      	ldr	r3, [pc, #36]	; (8010438 <HAL_Delay+0x40>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	461a      	mov	r2, r3
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	4413      	add	r3, r2
 801041c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801041e:	bf00      	nop
 8010420:	f7ff ffde 	bl	80103e0 <HAL_GetTick>
 8010424:	4602      	mov	r2, r0
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	1ad2      	subs	r2, r2, r3
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	429a      	cmp	r2, r3
 801042e:	d3f7      	bcc.n	8010420 <HAL_Delay+0x28>
  {
  }
}
 8010430:	bf00      	nop
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	20000000 	.word	0x20000000

0801043c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801043c:	b480      	push	{r7}
 801043e:	b085      	sub	sp, #20
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f003 0307 	and.w	r3, r3, #7
 801044a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801044c:	4b0c      	ldr	r3, [pc, #48]	; (8010480 <NVIC_SetPriorityGrouping+0x44>)
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010458:	4013      	ands	r3, r2
 801045a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801046c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801046e:	4a04      	ldr	r2, [pc, #16]	; (8010480 <NVIC_SetPriorityGrouping+0x44>)
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	60d3      	str	r3, [r2, #12]
}
 8010474:	bf00      	nop
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr
 8010480:	e000ed00 	.word	0xe000ed00

08010484 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8010484:	b480      	push	{r7}
 8010486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010488:	4b04      	ldr	r3, [pc, #16]	; (801049c <NVIC_GetPriorityGrouping+0x18>)
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	0a1b      	lsrs	r3, r3, #8
 801048e:	f003 0307 	and.w	r3, r3, #7
}
 8010492:	4618      	mov	r0, r3
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr
 801049c:	e000ed00 	.word	0xe000ed00

080104a0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80104aa:	4909      	ldr	r1, [pc, #36]	; (80104d0 <NVIC_EnableIRQ+0x30>)
 80104ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104b0:	095b      	lsrs	r3, r3, #5
 80104b2:	79fa      	ldrb	r2, [r7, #7]
 80104b4:	f002 021f 	and.w	r2, r2, #31
 80104b8:	2001      	movs	r0, #1
 80104ba:	fa00 f202 	lsl.w	r2, r0, r2
 80104be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80104c2:	bf00      	nop
 80104c4:	370c      	adds	r7, #12
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	e000e100 	.word	0xe000e100

080104d4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	4603      	mov	r3, r0
 80104dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80104de:	4909      	ldr	r1, [pc, #36]	; (8010504 <NVIC_DisableIRQ+0x30>)
 80104e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104e4:	095b      	lsrs	r3, r3, #5
 80104e6:	79fa      	ldrb	r2, [r7, #7]
 80104e8:	f002 021f 	and.w	r2, r2, #31
 80104ec:	2001      	movs	r0, #1
 80104ee:	fa00 f202 	lsl.w	r2, r0, r2
 80104f2:	3320      	adds	r3, #32
 80104f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80104f8:	bf00      	nop
 80104fa:	370c      	adds	r7, #12
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr
 8010504:	e000e100 	.word	0xe000e100

08010508 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010508:	b480      	push	{r7}
 801050a:	b083      	sub	sp, #12
 801050c:	af00      	add	r7, sp, #0
 801050e:	4603      	mov	r3, r0
 8010510:	6039      	str	r1, [r7, #0]
 8010512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8010514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010518:	2b00      	cmp	r3, #0
 801051a:	da0b      	bge.n	8010534 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801051c:	490d      	ldr	r1, [pc, #52]	; (8010554 <NVIC_SetPriority+0x4c>)
 801051e:	79fb      	ldrb	r3, [r7, #7]
 8010520:	f003 030f 	and.w	r3, r3, #15
 8010524:	3b04      	subs	r3, #4
 8010526:	683a      	ldr	r2, [r7, #0]
 8010528:	b2d2      	uxtb	r2, r2
 801052a:	0112      	lsls	r2, r2, #4
 801052c:	b2d2      	uxtb	r2, r2
 801052e:	440b      	add	r3, r1
 8010530:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010532:	e009      	b.n	8010548 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010534:	4908      	ldr	r1, [pc, #32]	; (8010558 <NVIC_SetPriority+0x50>)
 8010536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801053a:	683a      	ldr	r2, [r7, #0]
 801053c:	b2d2      	uxtb	r2, r2
 801053e:	0112      	lsls	r2, r2, #4
 8010540:	b2d2      	uxtb	r2, r2
 8010542:	440b      	add	r3, r1
 8010544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr
 8010554:	e000ed00 	.word	0xe000ed00
 8010558:	e000e100 	.word	0xe000e100

0801055c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801055c:	b480      	push	{r7}
 801055e:	b089      	sub	sp, #36	; 0x24
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f003 0307 	and.w	r3, r3, #7
 801056e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	f1c3 0307 	rsb	r3, r3, #7
 8010576:	2b04      	cmp	r3, #4
 8010578:	bf28      	it	cs
 801057a:	2304      	movcs	r3, #4
 801057c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	3304      	adds	r3, #4
 8010582:	2b06      	cmp	r3, #6
 8010584:	d902      	bls.n	801058c <NVIC_EncodePriority+0x30>
 8010586:	69fb      	ldr	r3, [r7, #28]
 8010588:	3b03      	subs	r3, #3
 801058a:	e000      	b.n	801058e <NVIC_EncodePriority+0x32>
 801058c:	2300      	movs	r3, #0
 801058e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010590:	2201      	movs	r2, #1
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	fa02 f303 	lsl.w	r3, r2, r3
 8010598:	1e5a      	subs	r2, r3, #1
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	401a      	ands	r2, r3
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80105a2:	2101      	movs	r1, #1
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	fa01 f303 	lsl.w	r3, r1, r3
 80105aa:	1e59      	subs	r1, r3, #1
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80105b0:	4313      	orrs	r3, r2
         );
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3724      	adds	r7, #36	; 0x24
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr

080105be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b082      	sub	sp, #8
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f7ff ff38 	bl	801043c <NVIC_SetPriorityGrouping>
}
 80105cc:	bf00      	nop
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b086      	sub	sp, #24
 80105d8:	af00      	add	r7, sp, #0
 80105da:	4603      	mov	r3, r0
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	607a      	str	r2, [r7, #4]
 80105e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80105e2:	2300      	movs	r3, #0
 80105e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80105e6:	f7ff ff4d 	bl	8010484 <NVIC_GetPriorityGrouping>
 80105ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	68b9      	ldr	r1, [r7, #8]
 80105f0:	6978      	ldr	r0, [r7, #20]
 80105f2:	f7ff ffb3 	bl	801055c <NVIC_EncodePriority>
 80105f6:	4602      	mov	r2, r0
 80105f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105fc:	4611      	mov	r1, r2
 80105fe:	4618      	mov	r0, r3
 8010600:	f7ff ff82 	bl	8010508 <NVIC_SetPriority>
}
 8010604:	bf00      	nop
 8010606:	3718      	adds	r7, #24
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	4603      	mov	r3, r0
 8010614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801061a:	4618      	mov	r0, r3
 801061c:	f7ff ff40 	bl	80104a0 <NVIC_EnableIRQ>
}
 8010620:	bf00      	nop
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	4603      	mov	r3, r0
 8010630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8010632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010636:	4618      	mov	r0, r3
 8010638:	f7ff ff4c 	bl	80104d4 <NVIC_DisableIRQ>
}
 801063c:	bf00      	nop
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801064c:	2300      	movs	r3, #0
 801064e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8010650:	f7ff fec6 	bl	80103e0 <HAL_GetTick>
 8010654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d101      	bne.n	8010660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801065c:	2301      	movs	r3, #1
 801065e:	e099      	b.n	8010794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2202      	movs	r2, #2
 801066c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	6812      	ldr	r2, [r2, #0]
 8010678:	6812      	ldr	r2, [r2, #0]
 801067a:	f022 0201 	bic.w	r2, r2, #1
 801067e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010680:	e00f      	b.n	80106a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010682:	f7ff fead 	bl	80103e0 <HAL_GetTick>
 8010686:	4602      	mov	r2, r0
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	1ad3      	subs	r3, r2, r3
 801068c:	2b05      	cmp	r3, #5
 801068e:	d908      	bls.n	80106a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2220      	movs	r2, #32
 8010694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2203      	movs	r2, #3
 801069a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801069e:	2303      	movs	r3, #3
 80106a0:	e078      	b.n	8010794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f003 0301 	and.w	r3, r3, #1
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1e8      	bne.n	8010682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80106b8:	697a      	ldr	r2, [r7, #20]
 80106ba:	4b38      	ldr	r3, [pc, #224]	; (801079c <HAL_DMA_Init+0x158>)
 80106bc:	4013      	ands	r3, r2
 80106be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	685a      	ldr	r2, [r3, #4]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80106ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	691b      	ldr	r3, [r3, #16]
 80106d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80106da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	699b      	ldr	r3, [r3, #24]
 80106e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80106e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6a1b      	ldr	r3, [r3, #32]
 80106ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80106ee:	697a      	ldr	r2, [r7, #20]
 80106f0:	4313      	orrs	r3, r2
 80106f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f8:	2b04      	cmp	r3, #4
 80106fa:	d107      	bne.n	801070c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010704:	4313      	orrs	r3, r2
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	4313      	orrs	r3, r2
 801070a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	695b      	ldr	r3, [r3, #20]
 801071a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	f023 0307 	bic.w	r3, r3, #7
 8010722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010728:	697a      	ldr	r2, [r7, #20]
 801072a:	4313      	orrs	r3, r2
 801072c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010732:	2b04      	cmp	r3, #4
 8010734:	d117      	bne.n	8010766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801073a:	697a      	ldr	r2, [r7, #20]
 801073c:	4313      	orrs	r3, r2
 801073e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00e      	beq.n	8010766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 fae5 	bl	8010d18 <DMA_CheckFifoParam>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d008      	beq.n	8010766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2240      	movs	r2, #64	; 0x40
 8010758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2201      	movs	r2, #1
 801075e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8010762:	2301      	movs	r3, #1
 8010764:	e016      	b.n	8010794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	697a      	ldr	r2, [r7, #20]
 801076c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 fa9c 	bl	8010cac <DMA_CalcBaseAndBitshift>
 8010774:	4603      	mov	r3, r0
 8010776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801077c:	223f      	movs	r2, #63	; 0x3f
 801077e:	409a      	lsls	r2, r3
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2200      	movs	r2, #0
 8010788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2201      	movs	r2, #1
 801078e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3718      	adds	r7, #24
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	f010803f 	.word	0xf010803f

080107a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d101      	bne.n	80107b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80107ae:	2301      	movs	r3, #1
 80107b0:	e03e      	b.n	8010830 <HAL_DMA_DeInit+0x90>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d101      	bne.n	80107c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80107be:	2302      	movs	r3, #2
 80107c0:	e036      	b.n	8010830 <HAL_DMA_DeInit+0x90>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	6812      	ldr	r2, [r2, #0]
 80107ca:	6812      	ldr	r2, [r2, #0]
 80107cc:	f022 0201 	bic.w	r2, r2, #1
 80107d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2200      	movs	r2, #0
 80107d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	2200      	movs	r2, #0
 80107e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2200      	movs	r2, #0
 80107e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	2200      	movs	r2, #0
 80107f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2200      	movs	r2, #0
 80107f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2221      	movs	r2, #33	; 0x21
 8010800:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 fa52 	bl	8010cac <DMA_CalcBaseAndBitshift>
 8010808:	4603      	mov	r3, r0
 801080a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010810:	223f      	movs	r2, #63	; 0x3f
 8010812:	409a      	lsls	r2, r3
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2200      	movs	r2, #0
 8010822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2200      	movs	r2, #0
 801082a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801082e:	2300      	movs	r3, #0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
 8010844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801084e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010856:	2b01      	cmp	r3, #1
 8010858:	d101      	bne.n	801085e <HAL_DMA_Start_IT+0x26>
 801085a:	2302      	movs	r3, #2
 801085c:	e048      	b.n	80108f0 <HAL_DMA_Start_IT+0xb8>
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2201      	movs	r2, #1
 8010862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801086c:	b2db      	uxtb	r3, r3
 801086e:	2b01      	cmp	r3, #1
 8010870:	d137      	bne.n	80108e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2202      	movs	r2, #2
 8010876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2200      	movs	r2, #0
 801087e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	68b9      	ldr	r1, [r7, #8]
 8010886:	68f8      	ldr	r0, [r7, #12]
 8010888:	f000 f9e2 	bl	8010c50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010890:	223f      	movs	r2, #63	; 0x3f
 8010892:	409a      	lsls	r2, r3
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	6812      	ldr	r2, [r2, #0]
 80108a0:	6812      	ldr	r2, [r2, #0]
 80108a2:	f042 0216 	orr.w	r2, r2, #22
 80108a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	6812      	ldr	r2, [r2, #0]
 80108b0:	6952      	ldr	r2, [r2, #20]
 80108b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80108b6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d007      	beq.n	80108d0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	68fa      	ldr	r2, [r7, #12]
 80108c6:	6812      	ldr	r2, [r2, #0]
 80108c8:	6812      	ldr	r2, [r2, #0]
 80108ca:	f042 0208 	orr.w	r2, r2, #8
 80108ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	6812      	ldr	r2, [r2, #0]
 80108d8:	6812      	ldr	r2, [r2, #0]
 80108da:	f042 0201 	orr.w	r2, r2, #1
 80108de:	601a      	str	r2, [r3, #0]
 80108e0:	e005      	b.n	80108ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80108ea:	2302      	movs	r3, #2
 80108ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80108ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3718      	adds	r7, #24
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010906:	b2db      	uxtb	r3, r3
 8010908:	2b02      	cmp	r3, #2
 801090a:	d004      	beq.n	8010916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2280      	movs	r2, #128	; 0x80
 8010910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010912:	2301      	movs	r3, #1
 8010914:	e00c      	b.n	8010930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2205      	movs	r2, #5
 801091a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	6812      	ldr	r2, [r2, #0]
 8010926:	6812      	ldr	r2, [r2, #0]
 8010928:	f022 0201 	bic.w	r2, r2, #1
 801092c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801092e:	2300      	movs	r3, #0
}
 8010930:	4618      	mov	r0, r3
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b086      	sub	sp, #24
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010944:	2300      	movs	r3, #0
 8010946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010948:	4b92      	ldr	r3, [pc, #584]	; (8010b94 <HAL_DMA_IRQHandler+0x258>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4a92      	ldr	r2, [pc, #584]	; (8010b98 <HAL_DMA_IRQHandler+0x25c>)
 801094e:	fba2 2303 	umull	r2, r3, r2, r3
 8010952:	0a9b      	lsrs	r3, r3, #10
 8010954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801095a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010966:	2208      	movs	r2, #8
 8010968:	409a      	lsls	r2, r3
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	4013      	ands	r3, r2
 801096e:	2b00      	cmp	r3, #0
 8010970:	d01a      	beq.n	80109a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f003 0304 	and.w	r3, r3, #4
 801097c:	2b00      	cmp	r3, #0
 801097e:	d013      	beq.n	80109a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	6812      	ldr	r2, [r2, #0]
 8010988:	6812      	ldr	r2, [r2, #0]
 801098a:	f022 0204 	bic.w	r2, r2, #4
 801098e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010994:	2208      	movs	r2, #8
 8010996:	409a      	lsls	r2, r3
 8010998:	693b      	ldr	r3, [r7, #16]
 801099a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109a0:	f043 0201 	orr.w	r2, r3, #1
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109ac:	2201      	movs	r2, #1
 80109ae:	409a      	lsls	r2, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	4013      	ands	r3, r2
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d012      	beq.n	80109de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	695b      	ldr	r3, [r3, #20]
 80109be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00b      	beq.n	80109de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109ca:	2201      	movs	r2, #1
 80109cc:	409a      	lsls	r2, r3
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109d6:	f043 0202 	orr.w	r2, r3, #2
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109e2:	2204      	movs	r2, #4
 80109e4:	409a      	lsls	r2, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	4013      	ands	r3, r2
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d012      	beq.n	8010a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f003 0302 	and.w	r3, r3, #2
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00b      	beq.n	8010a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a00:	2204      	movs	r2, #4
 8010a02:	409a      	lsls	r2, r3
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a0c:	f043 0204 	orr.w	r2, r3, #4
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a18:	2210      	movs	r2, #16
 8010a1a:	409a      	lsls	r2, r3
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	4013      	ands	r3, r2
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d043      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f003 0308 	and.w	r3, r3, #8
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d03c      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a36:	2210      	movs	r2, #16
 8010a38:	409a      	lsls	r2, r3
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d018      	beq.n	8010a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d108      	bne.n	8010a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d024      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	4798      	blx	r3
 8010a6a:	e01f      	b.n	8010aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d01b      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	4798      	blx	r3
 8010a7c:	e016      	b.n	8010aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d107      	bne.n	8010a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	6812      	ldr	r2, [r2, #0]
 8010a94:	6812      	ldr	r2, [r2, #0]
 8010a96:	f022 0208 	bic.w	r2, r2, #8
 8010a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d003      	beq.n	8010aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ab0:	2220      	movs	r2, #32
 8010ab2:	409a      	lsls	r2, r3
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	4013      	ands	r3, r2
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 808e 	beq.w	8010bda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f003 0310 	and.w	r3, r3, #16
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f000 8086 	beq.w	8010bda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	409a      	lsls	r2, r3
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	2b05      	cmp	r3, #5
 8010ae4:	d136      	bne.n	8010b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	6812      	ldr	r2, [r2, #0]
 8010aee:	6812      	ldr	r2, [r2, #0]
 8010af0:	f022 0216 	bic.w	r2, r2, #22
 8010af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	6812      	ldr	r2, [r2, #0]
 8010afe:	6952      	ldr	r2, [r2, #20]
 8010b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d103      	bne.n	8010b16 <HAL_DMA_IRQHandler+0x1da>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d007      	beq.n	8010b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	6812      	ldr	r2, [r2, #0]
 8010b1e:	6812      	ldr	r2, [r2, #0]
 8010b20:	f022 0208 	bic.w	r2, r2, #8
 8010b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b2a:	223f      	movs	r2, #63	; 0x3f
 8010b2c:	409a      	lsls	r2, r3
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2200      	movs	r2, #0
 8010b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d07d      	beq.n	8010c46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	4798      	blx	r3
        }
        return;
 8010b52:	e078      	b.n	8010c46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d01c      	beq.n	8010b9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d108      	bne.n	8010b82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d030      	beq.n	8010bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	4798      	blx	r3
 8010b80:	e02b      	b.n	8010bda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d027      	beq.n	8010bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	4798      	blx	r3
 8010b92:	e022      	b.n	8010bda <HAL_DMA_IRQHandler+0x29e>
 8010b94:	2000004c 	.word	0x2000004c
 8010b98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d10f      	bne.n	8010bca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	6812      	ldr	r2, [r2, #0]
 8010bb2:	6812      	ldr	r2, [r2, #0]
 8010bb4:	f022 0210 	bic.w	r2, r2, #16
 8010bb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2201      	movs	r2, #1
 8010bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d003      	beq.n	8010bda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d032      	beq.n	8010c48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010be6:	f003 0301 	and.w	r3, r3, #1
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d022      	beq.n	8010c34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2205      	movs	r2, #5
 8010bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	6812      	ldr	r2, [r2, #0]
 8010bfe:	6812      	ldr	r2, [r2, #0]
 8010c00:	f022 0201 	bic.w	r2, r2, #1
 8010c04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	60bb      	str	r3, [r7, #8]
 8010c0c:	697a      	ldr	r2, [r7, #20]
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d807      	bhi.n	8010c22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f003 0301 	and.w	r3, r3, #1
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d1f2      	bne.n	8010c06 <HAL_DMA_IRQHandler+0x2ca>
 8010c20:	e000      	b.n	8010c24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8010c22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2200      	movs	r2, #0
 8010c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d005      	beq.n	8010c48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	4798      	blx	r3
 8010c44:	e000      	b.n	8010c48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8010c46:	bf00      	nop
    }
  }
}
 8010c48:	3718      	adds	r7, #24
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop

08010c50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b085      	sub	sp, #20
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	60b9      	str	r1, [r7, #8]
 8010c5a:	607a      	str	r2, [r7, #4]
 8010c5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68fa      	ldr	r2, [r7, #12]
 8010c64:	6812      	ldr	r2, [r2, #0]
 8010c66:	6812      	ldr	r2, [r2, #0]
 8010c68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010c6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	683a      	ldr	r2, [r7, #0]
 8010c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	689b      	ldr	r3, [r3, #8]
 8010c7a:	2b40      	cmp	r3, #64	; 0x40
 8010c7c:	d108      	bne.n	8010c90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8010c8e:	e007      	b.n	8010ca0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	68ba      	ldr	r2, [r7, #8]
 8010c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	60da      	str	r2, [r3, #12]
}
 8010ca0:	bf00      	nop
 8010ca2:	3714      	adds	r7, #20
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr

08010cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	3b10      	subs	r3, #16
 8010cbc:	4a14      	ldr	r2, [pc, #80]	; (8010d10 <DMA_CalcBaseAndBitshift+0x64>)
 8010cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8010cc2:	091b      	lsrs	r3, r3, #4
 8010cc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8010cc6:	4a13      	ldr	r2, [pc, #76]	; (8010d14 <DMA_CalcBaseAndBitshift+0x68>)
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	4413      	add	r3, r2
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2b03      	cmp	r3, #3
 8010cd8:	d909      	bls.n	8010cee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010ce2:	f023 0303 	bic.w	r3, r3, #3
 8010ce6:	1d1a      	adds	r2, r3, #4
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	659a      	str	r2, [r3, #88]	; 0x58
 8010cec:	e007      	b.n	8010cfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010cf6:	f023 0303 	bic.w	r3, r3, #3
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
 8010d0e:	bf00      	nop
 8010d10:	aaaaaaab 	.word	0xaaaaaaab
 8010d14:	08029324 	.word	0x08029324

08010d18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d20:	2300      	movs	r3, #0
 8010d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	699b      	ldr	r3, [r3, #24]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d11f      	bne.n	8010d72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	2b03      	cmp	r3, #3
 8010d36:	d855      	bhi.n	8010de4 <DMA_CheckFifoParam+0xcc>
 8010d38:	a201      	add	r2, pc, #4	; (adr r2, 8010d40 <DMA_CheckFifoParam+0x28>)
 8010d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d3e:	bf00      	nop
 8010d40:	08010d51 	.word	0x08010d51
 8010d44:	08010d63 	.word	0x08010d63
 8010d48:	08010d51 	.word	0x08010d51
 8010d4c:	08010de5 	.word	0x08010de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d045      	beq.n	8010de8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010d60:	e042      	b.n	8010de8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010d6a:	d13f      	bne.n	8010dec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010d70:	e03c      	b.n	8010dec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	699b      	ldr	r3, [r3, #24]
 8010d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d7a:	d121      	bne.n	8010dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	2b03      	cmp	r3, #3
 8010d80:	d836      	bhi.n	8010df0 <DMA_CheckFifoParam+0xd8>
 8010d82:	a201      	add	r2, pc, #4	; (adr r2, 8010d88 <DMA_CheckFifoParam+0x70>)
 8010d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d88:	08010d99 	.word	0x08010d99
 8010d8c:	08010d9f 	.word	0x08010d9f
 8010d90:	08010d99 	.word	0x08010d99
 8010d94:	08010db1 	.word	0x08010db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010d98:	2301      	movs	r3, #1
 8010d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8010d9c:	e02f      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d024      	beq.n	8010df4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8010daa:	2301      	movs	r3, #1
 8010dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010dae:	e021      	b.n	8010df4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010db8:	d11e      	bne.n	8010df8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8010dba:	2301      	movs	r3, #1
 8010dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010dbe:	e01b      	b.n	8010df8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	2b02      	cmp	r3, #2
 8010dc4:	d902      	bls.n	8010dcc <DMA_CheckFifoParam+0xb4>
 8010dc6:	2b03      	cmp	r3, #3
 8010dc8:	d003      	beq.n	8010dd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010dca:	e018      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	73fb      	strb	r3, [r7, #15]
      break;
 8010dd0:	e015      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00e      	beq.n	8010dfc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8010dde:	2301      	movs	r3, #1
 8010de0:	73fb      	strb	r3, [r7, #15]
      break;
 8010de2:	e00b      	b.n	8010dfc <DMA_CheckFifoParam+0xe4>
      break;
 8010de4:	bf00      	nop
 8010de6:	e00a      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010de8:	bf00      	nop
 8010dea:	e008      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010dec:	bf00      	nop
 8010dee:	e006      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010df0:	bf00      	nop
 8010df2:	e004      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010df4:	bf00      	nop
 8010df6:	e002      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;   
 8010df8:	bf00      	nop
 8010dfa:	e000      	b.n	8010dfe <DMA_CheckFifoParam+0xe6>
      break;
 8010dfc:	bf00      	nop
    }
  } 
  
  return status; 
 8010dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3714      	adds	r7, #20
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b088      	sub	sp, #32
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8010e14:	2300      	movs	r3, #0
 8010e16:	61fb      	str	r3, [r7, #28]
 8010e18:	2300      	movs	r3, #0
 8010e1a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8010e1c:	4baa      	ldr	r3, [pc, #680]	; (80110c8 <HAL_ETH_Init+0x2bc>)
 8010e1e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8010e20:	2300      	movs	r3, #0
 8010e22:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8010e24:	2300      	movs	r3, #0
 8010e26:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d101      	bne.n	8010e32 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	e185      	b.n	801113e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d106      	bne.n	8010e4c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f012 fdf8 	bl	8023a3c <HAL_ETH_MspInit>
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	60bb      	str	r3, [r7, #8]
 8010e50:	4a9e      	ldr	r2, [pc, #632]	; (80110cc <HAL_ETH_Init+0x2c0>)
 8010e52:	4b9e      	ldr	r3, [pc, #632]	; (80110cc <HAL_ETH_Init+0x2c0>)
 8010e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e5a:	6453      	str	r3, [r2, #68]	; 0x44
 8010e5c:	4b9b      	ldr	r3, [pc, #620]	; (80110cc <HAL_ETH_Init+0x2c0>)
 8010e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e64:	60bb      	str	r3, [r7, #8]
 8010e66:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8010e68:	4a99      	ldr	r2, [pc, #612]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e6a:	4b99      	ldr	r3, [pc, #612]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010e72:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8010e74:	4996      	ldr	r1, [pc, #600]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e76:	4b96      	ldr	r3, [pc, #600]	; (80110d0 <HAL_ETH_Init+0x2c4>)
 8010e78:	685a      	ldr	r2, [r3, #4]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6a1b      	ldr	r3, [r3, #32]
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	6812      	ldr	r2, [r2, #0]
 8010e8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010e8e:	6812      	ldr	r2, [r2, #0]
 8010e90:	f042 0201 	orr.w	r2, r2, #1
 8010e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e98:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8010e9a:	f7ff faa1 	bl	80103e0 <HAL_GetTick>
 8010e9e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010ea0:	e011      	b.n	8010ec6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8010ea2:	f7ff fa9d 	bl	80103e0 <HAL_GetTick>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010eb0:	d909      	bls.n	8010ec6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2203      	movs	r2, #3
 8010eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8010ec2:	2303      	movs	r3, #3
 8010ec4:	e13b      	b.n	801113e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f003 0301 	and.w	r3, r3, #1
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1e4      	bne.n	8010ea2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	691b      	ldr	r3, [r3, #16]
 8010ede:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	f023 031c 	bic.w	r3, r3, #28
 8010ee6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8010ee8:	f002 f8fe 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8010eec:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8010eee:	69bb      	ldr	r3, [r7, #24]
 8010ef0:	4a78      	ldr	r2, [pc, #480]	; (80110d4 <HAL_ETH_Init+0x2c8>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d908      	bls.n	8010f08 <HAL_ETH_Init+0xfc>
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	4a77      	ldr	r2, [pc, #476]	; (80110d8 <HAL_ETH_Init+0x2cc>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d804      	bhi.n	8010f08 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	f043 0308 	orr.w	r3, r3, #8
 8010f04:	61fb      	str	r3, [r7, #28]
 8010f06:	e027      	b.n	8010f58 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	4a73      	ldr	r2, [pc, #460]	; (80110d8 <HAL_ETH_Init+0x2cc>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d908      	bls.n	8010f22 <HAL_ETH_Init+0x116>
 8010f10:	69bb      	ldr	r3, [r7, #24]
 8010f12:	4a72      	ldr	r2, [pc, #456]	; (80110dc <HAL_ETH_Init+0x2d0>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d804      	bhi.n	8010f22 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	f043 030c 	orr.w	r3, r3, #12
 8010f1e:	61fb      	str	r3, [r7, #28]
 8010f20:	e01a      	b.n	8010f58 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	4a6d      	ldr	r2, [pc, #436]	; (80110dc <HAL_ETH_Init+0x2d0>)
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d903      	bls.n	8010f32 <HAL_ETH_Init+0x126>
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	4a6c      	ldr	r2, [pc, #432]	; (80110e0 <HAL_ETH_Init+0x2d4>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d911      	bls.n	8010f56 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	4a6a      	ldr	r2, [pc, #424]	; (80110e0 <HAL_ETH_Init+0x2d4>)
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d908      	bls.n	8010f4c <HAL_ETH_Init+0x140>
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	4a69      	ldr	r2, [pc, #420]	; (80110e4 <HAL_ETH_Init+0x2d8>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d804      	bhi.n	8010f4c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	f043 0304 	orr.w	r3, r3, #4
 8010f48:	61fb      	str	r3, [r7, #28]
 8010f4a:	e005      	b.n	8010f58 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	f043 0310 	orr.w	r3, r3, #16
 8010f52:	61fb      	str	r3, [r7, #28]
 8010f54:	e000      	b.n	8010f58 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8010f56:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	69fa      	ldr	r2, [r7, #28]
 8010f5e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8010f60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010f64:	2100      	movs	r1, #0
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f000 fc19 	bl	801179e <HAL_ETH_WritePHYRegister>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d00b      	beq.n	8010f8a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8010f72:	2301      	movs	r3, #1
 8010f74:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8010f76:	6939      	ldr	r1, [r7, #16]
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 fca5 	bl	80118c8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8010f86:	2301      	movs	r3, #1
 8010f88:	e0d9      	b.n	801113e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8010f8a:	20ff      	movs	r0, #255	; 0xff
 8010f8c:	f7ff fa34 	bl	80103f8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f000 80a7 	beq.w	80110e8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8010f9a:	f7ff fa21 	bl	80103e0 <HAL_GetTick>
 8010f9e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8010fa0:	f107 030c 	add.w	r3, r7, #12
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	2101      	movs	r1, #1
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f000 fb90 	bl	80116ce <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8010fae:	f7ff fa17 	bl	80103e0 <HAL_GetTick>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d90f      	bls.n	8010fe0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8010fc4:	6939      	ldr	r1, [r7, #16]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fc7e 	bl	80118c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2201      	movs	r2, #1
 8010fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8010fdc:	2303      	movs	r3, #3
 8010fde:	e0ae      	b.n	801113e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f003 0304 	and.w	r3, r3, #4
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d0da      	beq.n	8010fa0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8010fea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010fee:	2100      	movs	r1, #0
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f000 fbd4 	bl	801179e <HAL_ETH_WritePHYRegister>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00b      	beq.n	8011014 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8011000:	6939      	ldr	r1, [r7, #16]
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 fc60 	bl	80118c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2201      	movs	r2, #1
 801100c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8011010:	2301      	movs	r3, #1
 8011012:	e094      	b.n	801113e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8011014:	f7ff f9e4 	bl	80103e0 <HAL_GetTick>
 8011018:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 801101a:	f107 030c 	add.w	r3, r7, #12
 801101e:	461a      	mov	r2, r3
 8011020:	2101      	movs	r1, #1
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 fb53 	bl	80116ce <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8011028:	f7ff f9da 	bl	80103e0 <HAL_GetTick>
 801102c:	4602      	mov	r2, r0
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	1ad3      	subs	r3, r2, r3
 8011032:	f241 3288 	movw	r2, #5000	; 0x1388
 8011036:	4293      	cmp	r3, r2
 8011038:	d90f      	bls.n	801105a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 801103a:	2301      	movs	r3, #1
 801103c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 801103e:	6939      	ldr	r1, [r7, #16]
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fc41 	bl	80118c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2201      	movs	r2, #1
 801104a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8011056:	2303      	movs	r3, #3
 8011058:	e071      	b.n	801113e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f003 0320 	and.w	r3, r3, #32
 8011060:	2b00      	cmp	r3, #0
 8011062:	d0da      	beq.n	801101a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8011064:	f107 030c 	add.w	r3, r7, #12
 8011068:	461a      	mov	r2, r3
 801106a:	2110      	movs	r1, #16
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f000 fb2e 	bl	80116ce <HAL_ETH_ReadPHYRegister>
 8011072:	4603      	mov	r3, r0
 8011074:	2b00      	cmp	r3, #0
 8011076:	d00b      	beq.n	8011090 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8011078:	2301      	movs	r3, #1
 801107a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 801107c:	6939      	ldr	r1, [r7, #16]
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 fc22 	bl	80118c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2201      	movs	r2, #1
 8011088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 801108c:	2301      	movs	r3, #1
 801108e:	e056      	b.n	801113e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	f003 0304 	and.w	r3, r3, #4
 8011096:	2b00      	cmp	r3, #0
 8011098:	d004      	beq.n	80110a4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110a0:	60da      	str	r2, [r3, #12]
 80110a2:	e002      	b.n	80110aa <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2200      	movs	r2, #0
 80110a8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	f003 0302 	and.w	r3, r3, #2
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d003      	beq.n	80110bc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2200      	movs	r2, #0
 80110b8:	609a      	str	r2, [r3, #8]
 80110ba:	e037      	b.n	801112c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80110c2:	609a      	str	r2, [r3, #8]
 80110c4:	e032      	b.n	801112c <HAL_ETH_Init+0x320>
 80110c6:	bf00      	nop
 80110c8:	03938700 	.word	0x03938700
 80110cc:	40023800 	.word	0x40023800
 80110d0:	40013800 	.word	0x40013800
 80110d4:	01312cff 	.word	0x01312cff
 80110d8:	02160ebf 	.word	0x02160ebf
 80110dc:	039386ff 	.word	0x039386ff
 80110e0:	05f5e0ff 	.word	0x05f5e0ff
 80110e4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	08db      	lsrs	r3, r3, #3
 80110ee:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	085b      	lsrs	r3, r3, #1
 80110f6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80110f8:	4313      	orrs	r3, r2
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	461a      	mov	r2, r3
 80110fe:	2100      	movs	r1, #0
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 fb4c 	bl	801179e <HAL_ETH_WritePHYRegister>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00b      	beq.n	8011124 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 801110c:	2301      	movs	r3, #1
 801110e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8011110:	6939      	ldr	r1, [r7, #16]
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 fbd8 	bl	80118c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2201      	movs	r2, #1
 801111c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8011120:	2301      	movs	r3, #1
 8011122:	e00c      	b.n	801113e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8011124:	f640 70ff 	movw	r0, #4095	; 0xfff
 8011128:	f7ff f966 	bl	80103f8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 801112c:	6939      	ldr	r1, [r7, #16]
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 fbca 	bl	80118c8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2201      	movs	r2, #1
 8011138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 801113c:	2300      	movs	r3, #0
}
 801113e:	4618      	mov	r0, r3
 8011140:	3720      	adds	r7, #32
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop

08011148 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8011148:	b480      	push	{r7}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
 8011154:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8011156:	2300      	movs	r3, #0
 8011158:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011160:	2b01      	cmp	r3, #1
 8011162:	d101      	bne.n	8011168 <HAL_ETH_DMATxDescListInit+0x20>
 8011164:	2302      	movs	r3, #2
 8011166:	e052      	b.n	801120e <HAL_ETH_DMATxDescListInit+0xc6>
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2201      	movs	r2, #1
 801116c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2202      	movs	r2, #2
 8011174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	68ba      	ldr	r2, [r7, #8]
 801117c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 801117e:	2300      	movs	r3, #0
 8011180:	617b      	str	r3, [r7, #20]
 8011182:	e030      	b.n	80111e6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	015b      	lsls	r3, r3, #5
 8011188:	68ba      	ldr	r2, [r7, #8]
 801118a:	4413      	add	r3, r2
 801118c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011194:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801119c:	fb02 f303 	mul.w	r3, r2, r3
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	4413      	add	r3, r2
 80111a4:	461a      	mov	r2, r3
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	69db      	ldr	r3, [r3, #28]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d105      	bne.n	80111be <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	1e5a      	subs	r2, r3, #1
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d908      	bls.n	80111da <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	3301      	adds	r3, #1
 80111cc:	015b      	lsls	r3, r3, #5
 80111ce:	68ba      	ldr	r2, [r7, #8]
 80111d0:	4413      	add	r3, r2
 80111d2:	461a      	mov	r2, r3
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	60da      	str	r2, [r3, #12]
 80111d8:	e002      	b.n	80111e0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80111da:	68ba      	ldr	r2, [r7, #8]
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	3301      	adds	r3, #1
 80111e4:	617b      	str	r3, [r7, #20]
 80111e6:	697a      	ldr	r2, [r7, #20]
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d3ca      	bcc.n	8011184 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111f8:	3310      	adds	r3, #16
 80111fa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	2201      	movs	r2, #1
 8011200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	371c      	adds	r7, #28
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr

0801121a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 801121a:	b480      	push	{r7}
 801121c:	b087      	sub	sp, #28
 801121e:	af00      	add	r7, sp, #0
 8011220:	60f8      	str	r0, [r7, #12]
 8011222:	60b9      	str	r1, [r7, #8]
 8011224:	607a      	str	r2, [r7, #4]
 8011226:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8011228:	2300      	movs	r3, #0
 801122a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011232:	2b01      	cmp	r3, #1
 8011234:	d101      	bne.n	801123a <HAL_ETH_DMARxDescListInit+0x20>
 8011236:	2302      	movs	r3, #2
 8011238:	e056      	b.n	80112e8 <HAL_ETH_DMARxDescListInit+0xce>
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2201      	movs	r2, #1
 801123e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2202      	movs	r2, #2
 8011246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8011250:	2300      	movs	r3, #0
 8011252:	617b      	str	r3, [r7, #20]
 8011254:	e034      	b.n	80112c0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	015b      	lsls	r3, r3, #5
 801125a:	68ba      	ldr	r2, [r7, #8]
 801125c:	4413      	add	r3, r2
 801125e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011266:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 801126e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011276:	fb02 f303 	mul.w	r3, r2, r3
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	4413      	add	r3, r2
 801127e:	461a      	mov	r2, r3
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	699b      	ldr	r3, [r3, #24]
 8011288:	2b01      	cmp	r3, #1
 801128a:	d105      	bne.n	8011298 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	1e5a      	subs	r2, r3, #1
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d908      	bls.n	80112b4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	3301      	adds	r3, #1
 80112a6:	015b      	lsls	r3, r3, #5
 80112a8:	68ba      	ldr	r2, [r7, #8]
 80112aa:	4413      	add	r3, r2
 80112ac:	461a      	mov	r2, r3
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	60da      	str	r2, [r3, #12]
 80112b2:	e002      	b.n	80112ba <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80112b4:	68ba      	ldr	r2, [r7, #8]
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	3301      	adds	r3, #1
 80112be:	617b      	str	r3, [r7, #20]
 80112c0:	697a      	ldr	r2, [r7, #20]
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d3c6      	bcc.n	8011256 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112d2:	330c      	adds	r3, #12
 80112d4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2201      	movs	r2, #1
 80112da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	2200      	movs	r2, #0
 80112e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80112e6:	2300      	movs	r3, #0
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	371c      	adds	r7, #28
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr

080112f4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80112fe:	2300      	movs	r3, #0
 8011300:	617b      	str	r3, [r7, #20]
 8011302:	2300      	movs	r3, #0
 8011304:	60fb      	str	r3, [r7, #12]
 8011306:	2300      	movs	r3, #0
 8011308:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011310:	2b01      	cmp	r3, #1
 8011312:	d101      	bne.n	8011318 <HAL_ETH_TransmitFrame+0x24>
 8011314:	2302      	movs	r3, #2
 8011316:	e0cd      	b.n	80114b4 <HAL_ETH_TransmitFrame+0x1c0>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2201      	movs	r2, #1
 801131c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2202      	movs	r2, #2
 8011324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d109      	bne.n	8011342 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2201      	movs	r2, #1
 8011332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2200      	movs	r2, #0
 801133a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 801133e:	2301      	movs	r3, #1
 8011340:	e0b8      	b.n	80114b4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	da09      	bge.n	8011360 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2212      	movs	r2, #18
 8011350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 801135c:	2301      	movs	r3, #1
 801135e:	e0a9      	b.n	80114b4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011366:	4293      	cmp	r3, r2
 8011368:	d915      	bls.n	8011396 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	4a54      	ldr	r2, [pc, #336]	; (80114c0 <HAL_ETH_TransmitFrame+0x1cc>)
 801136e:	fba2 2303 	umull	r2, r3, r2, r3
 8011372:	0a9b      	lsrs	r3, r3, #10
 8011374:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8011376:	683a      	ldr	r2, [r7, #0]
 8011378:	4b51      	ldr	r3, [pc, #324]	; (80114c0 <HAL_ETH_TransmitFrame+0x1cc>)
 801137a:	fba3 1302 	umull	r1, r3, r3, r2
 801137e:	0a9b      	lsrs	r3, r3, #10
 8011380:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8011384:	fb01 f303 	mul.w	r3, r1, r3
 8011388:	1ad3      	subs	r3, r2, r3
 801138a:	2b00      	cmp	r3, #0
 801138c:	d005      	beq.n	801139a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	3301      	adds	r3, #1
 8011392:	617b      	str	r3, [r7, #20]
 8011394:	e001      	b.n	801139a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8011396:	2301      	movs	r3, #1
 8011398:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	2b01      	cmp	r3, #1
 801139e:	d11c      	bne.n	80113da <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a4:	687a      	ldr	r2, [r7, #4]
 80113a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113a8:	6812      	ldr	r2, [r2, #0]
 80113aa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80113ae:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b4:	683a      	ldr	r2, [r7, #0]
 80113b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80113ba:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c0:	687a      	ldr	r2, [r7, #4]
 80113c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113c4:	6812      	ldr	r2, [r2, #0]
 80113c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80113ca:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	461a      	mov	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80113d8:	e04b      	b.n	8011472 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80113da:	2300      	movs	r3, #0
 80113dc:	613b      	str	r3, [r7, #16]
 80113de:	e044      	b.n	801146a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113e8:	6812      	ldr	r2, [r2, #0]
 80113ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80113ee:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d107      	bne.n	8011406 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113fa:	687a      	ldr	r2, [r7, #4]
 80113fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80113fe:	6812      	ldr	r2, [r2, #0]
 8011400:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011404:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801140a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801140e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	1e5a      	subs	r2, r3, #1
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	429a      	cmp	r2, r3
 8011418:	d116      	bne.n	8011448 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011422:	6812      	ldr	r2, [r2, #0]
 8011424:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8011428:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	4a25      	ldr	r2, [pc, #148]	; (80114c4 <HAL_ETH_TransmitFrame+0x1d0>)
 801142e:	fb02 f203 	mul.w	r2, r2, r3
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	4413      	add	r3, r2
 8011436:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801143a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011440:	68fa      	ldr	r2, [r7, #12]
 8011442:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011446:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011450:	6812      	ldr	r2, [r2, #0]
 8011452:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011456:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	461a      	mov	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	3301      	adds	r3, #1
 8011468:	613b      	str	r3, [r7, #16]
 801146a:	693a      	ldr	r2, [r7, #16]
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	429a      	cmp	r2, r3
 8011470:	d3b6      	bcc.n	80113e0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801147a:	3314      	adds	r3, #20
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 0304 	and.w	r3, r3, #4
 8011482:	2b00      	cmp	r3, #0
 8011484:	d00d      	beq.n	80114a2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801148e:	3314      	adds	r3, #20
 8011490:	2204      	movs	r2, #4
 8011492:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801149c:	3304      	adds	r3, #4
 801149e:	2200      	movs	r2, #0
 80114a0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2201      	movs	r2, #1
 80114a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2200      	movs	r2, #0
 80114ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80114b2:	2300      	movs	r3, #0
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	371c      	adds	r7, #28
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	ac02b00b 	.word	0xac02b00b
 80114c4:	fffffa0c 	.word	0xfffffa0c

080114c8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80114d0:	2300      	movs	r3, #0
 80114d2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d101      	bne.n	80114e2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80114de:	2302      	movs	r3, #2
 80114e0:	e074      	b.n	80115cc <HAL_ETH_GetReceivedFrame_IT+0x104>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2201      	movs	r2, #1
 80114e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2202      	movs	r2, #2
 80114ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80114f2:	e05a      	b.n	80115aa <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	3301      	adds	r3, #1
 80114f8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011508:	d10d      	bne.n	8011526 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2201      	movs	r2, #1
 8011516:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	461a      	mov	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	629a      	str	r2, [r3, #40]	; 0x28
 8011524:	e041      	b.n	80115aa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011530:	2b00      	cmp	r3, #0
 8011532:	d10b      	bne.n	801154c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011538:	1c5a      	adds	r2, r3, #1
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	461a      	mov	r2, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	629a      	str	r2, [r3, #40]	; 0x28
 801154a:	e02e      	b.n	80115aa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011558:	1c5a      	adds	r2, r3, #1
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011562:	2b01      	cmp	r3, #1
 8011564:	d103      	bne.n	801156e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	0c1b      	lsrs	r3, r3, #16
 8011576:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801157a:	1f1a      	subs	r2, r3, #4
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011584:	689a      	ldr	r2, [r3, #8]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	461a      	mov	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2201      	movs	r2, #1
 801159a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2200      	movs	r2, #0
 80115a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	e010      	b.n	80115cc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	db02      	blt.n	80115ba <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2b03      	cmp	r3, #3
 80115b8:	d99c      	bls.n	80114f4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2201      	movs	r2, #1
 80115be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2200      	movs	r2, #0
 80115c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80115ca:	2301      	movs	r3, #1
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3714      	adds	r7, #20
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80115e8:	3314      	adds	r3, #20
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115f0:	2b40      	cmp	r3, #64	; 0x40
 80115f2:	d112      	bne.n	801161a <HAL_ETH_IRQHandler+0x42>
  {
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f012 fa9b 	bl	8023b30 <HAL_ETH_RxCpltCallback>
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011602:	3314      	adds	r3, #20
 8011604:	2240      	movs	r2, #64	; 0x40
 8011606:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2201      	movs	r2, #1
 801160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2200      	movs	r2, #0
 8011614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011618:	e01b      	b.n	8011652 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011622:	3314      	adds	r3, #20
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	f003 0301 	and.w	r3, r3, #1
 801162a:	2b01      	cmp	r3, #1
 801162c:	d111      	bne.n	8011652 <HAL_ETH_IRQHandler+0x7a>
  {
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f000 f839 	bl	80116a6 <HAL_ETH_TxCpltCallback>
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801163c:	3314      	adds	r3, #20
 801163e:	2201      	movs	r2, #1
 8011640:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801165a:	3314      	adds	r3, #20
 801165c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011660:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801166a:	3314      	adds	r3, #20
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011676:	d112      	bne.n	801169e <HAL_ETH_IRQHandler+0xc6>
  {
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f000 f81e 	bl	80116ba <HAL_ETH_ErrorCallback>

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011686:	3314      	adds	r3, #20
 8011688:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801168c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2201      	movs	r2, #1
 8011692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2200      	movs	r2, #0
 801169a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 801169e:	bf00      	nop
 80116a0:	3708      	adds	r7, #8
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}

080116a6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80116a6:	b480      	push	{r7}
 80116a8:	b083      	sub	sp, #12
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80116ae:	bf00      	nop
 80116b0:	370c      	adds	r7, #12
 80116b2:	46bd      	mov	sp, r7
 80116b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b8:	4770      	bx	lr

080116ba <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80116ba:	b480      	push	{r7}
 80116bc:	b083      	sub	sp, #12
 80116be:	af00      	add	r7, sp, #0
 80116c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80116c2:	bf00      	nop
 80116c4:	370c      	adds	r7, #12
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr

080116ce <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80116ce:	b580      	push	{r7, lr}
 80116d0:	b086      	sub	sp, #24
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	60f8      	str	r0, [r7, #12]
 80116d6:	460b      	mov	r3, r1
 80116d8:	607a      	str	r2, [r7, #4]
 80116da:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80116dc:	2300      	movs	r3, #0
 80116de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80116e0:	2300      	movs	r3, #0
 80116e2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	2b82      	cmp	r3, #130	; 0x82
 80116ee:	d101      	bne.n	80116f4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80116f0:	2302      	movs	r3, #2
 80116f2:	e050      	b.n	8011796 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2282      	movs	r2, #130	; 0x82
 80116f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	691b      	ldr	r3, [r3, #16]
 8011702:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	f003 031c 	and.w	r3, r3, #28
 801170a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	8a1b      	ldrh	r3, [r3, #16]
 8011710:	02db      	lsls	r3, r3, #11
 8011712:	b29b      	uxth	r3, r3
 8011714:	697a      	ldr	r2, [r7, #20]
 8011716:	4313      	orrs	r3, r2
 8011718:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 801171a:	897b      	ldrh	r3, [r7, #10]
 801171c:	019b      	lsls	r3, r3, #6
 801171e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	4313      	orrs	r3, r2
 8011726:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	f023 0302 	bic.w	r3, r3, #2
 801172e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	f043 0301 	orr.w	r3, r3, #1
 8011736:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8011740:	f7fe fe4e 	bl	80103e0 <HAL_GetTick>
 8011744:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011746:	e015      	b.n	8011774 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8011748:	f7fe fe4a 	bl	80103e0 <HAL_GetTick>
 801174c:	4602      	mov	r2, r0
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011756:	d309      	bcc.n	801176c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	2201      	movs	r2, #1
 801175c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2200      	movs	r2, #0
 8011764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8011768:	2303      	movs	r3, #3
 801176a:	e014      	b.n	8011796 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	691b      	ldr	r3, [r3, #16]
 8011772:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	f003 0301 	and.w	r3, r3, #1
 801177a:	2b00      	cmp	r3, #0
 801177c:	d1e4      	bne.n	8011748 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	695b      	ldr	r3, [r3, #20]
 8011784:	b29b      	uxth	r3, r3
 8011786:	461a      	mov	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2201      	movs	r2, #1
 8011790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8011794:	2300      	movs	r3, #0
}
 8011796:	4618      	mov	r0, r3
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b086      	sub	sp, #24
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	60f8      	str	r0, [r7, #12]
 80117a6:	460b      	mov	r3, r1
 80117a8:	607a      	str	r2, [r7, #4]
 80117aa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80117ac:	2300      	movs	r3, #0
 80117ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80117b0:	2300      	movs	r3, #0
 80117b2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b42      	cmp	r3, #66	; 0x42
 80117be:	d101      	bne.n	80117c4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80117c0:	2302      	movs	r3, #2
 80117c2:	e04e      	b.n	8011862 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2242      	movs	r2, #66	; 0x42
 80117c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	691b      	ldr	r3, [r3, #16]
 80117d2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	f003 031c 	and.w	r3, r3, #28
 80117da:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	8a1b      	ldrh	r3, [r3, #16]
 80117e0:	02db      	lsls	r3, r3, #11
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	697a      	ldr	r2, [r7, #20]
 80117e6:	4313      	orrs	r3, r2
 80117e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80117ea:	897b      	ldrh	r3, [r7, #10]
 80117ec:	019b      	lsls	r3, r3, #6
 80117ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80117f2:	697a      	ldr	r2, [r7, #20]
 80117f4:	4313      	orrs	r3, r2
 80117f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	f043 0302 	orr.w	r3, r3, #2
 80117fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	f043 0301 	orr.w	r3, r3, #1
 8011806:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	b292      	uxth	r2, r2
 8011810:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 801181a:	f7fe fde1 	bl	80103e0 <HAL_GetTick>
 801181e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011820:	e015      	b.n	801184e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8011822:	f7fe fddd 	bl	80103e0 <HAL_GetTick>
 8011826:	4602      	mov	r2, r0
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011830:	d309      	bcc.n	8011846 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2201      	movs	r2, #1
 8011836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2200      	movs	r2, #0
 801183e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8011842:	2303      	movs	r3, #3
 8011844:	e00d      	b.n	8011862 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	f003 0301 	and.w	r3, r3, #1
 8011854:	2b00      	cmp	r3, #0
 8011856:	d1e4      	bne.n	8011822 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2201      	movs	r2, #1
 801185c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3718      	adds	r7, #24
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 801186a:	b580      	push	{r7, lr}
 801186c:	b082      	sub	sp, #8
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011878:	2b01      	cmp	r3, #1
 801187a:	d101      	bne.n	8011880 <HAL_ETH_Start+0x16>
 801187c:	2302      	movs	r3, #2
 801187e:	e01f      	b.n	80118c0 <HAL_ETH_Start+0x56>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2201      	movs	r2, #1
 8011884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2202      	movs	r2, #2
 801188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f000 fa19 	bl	8011cc8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 fa33 	bl	8011d02 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f000 fa7d 	bl	8011d9c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f000 fa4a 	bl	8011d3c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 fa5f 	bl	8011d6c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2201      	movs	r2, #1
 80118b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2200      	movs	r2, #0
 80118ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b0b0      	sub	sp, #192	; 0xc0
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80118d2:	2300      	movs	r3, #0
 80118d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d007      	beq.n	80118ee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80118e4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80118ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80118ee:	2300      	movs	r3, #0
 80118f0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80118f2:	2300      	movs	r3, #0
 80118f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80118f6:	2300      	movs	r3, #0
 80118f8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80118fa:	2300      	movs	r3, #0
 80118fc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80118fe:	2300      	movs	r3, #0
 8011900:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8011902:	2300      	movs	r3, #0
 8011904:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	69db      	ldr	r3, [r3, #28]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d103      	bne.n	8011916 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 801190e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011912:	663b      	str	r3, [r7, #96]	; 0x60
 8011914:	e001      	b.n	801191a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8011916:	2300      	movs	r3, #0
 8011918:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 801191a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801191e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8011920:	2300      	movs	r3, #0
 8011922:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8011924:	2300      	movs	r3, #0
 8011926:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8011928:	2300      	movs	r3, #0
 801192a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 801192c:	2300      	movs	r3, #0
 801192e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8011930:	2300      	movs	r3, #0
 8011932:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8011934:	2340      	movs	r3, #64	; 0x40
 8011936:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8011938:	2300      	movs	r3, #0
 801193a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 801193e:	2300      	movs	r3, #0
 8011940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8011944:	2300      	movs	r3, #0
 8011946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 801194a:	2300      	movs	r3, #0
 801194c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8011950:	2300      	movs	r3, #0
 8011952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8011956:	2300      	movs	r3, #0
 8011958:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 801195c:	2300      	movs	r3, #0
 801195e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8011962:	2300      	movs	r3, #0
 8011964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8011968:	2380      	movs	r3, #128	; 0x80
 801196a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 801196e:	2300      	movs	r3, #0
 8011970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8011974:	2300      	movs	r3, #0
 8011976:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 801197a:	2300      	movs	r3, #0
 801197c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8011980:	2300      	movs	r3, #0
 8011982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8011986:	2300      	movs	r3, #0
 8011988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 801198c:	2300      	movs	r3, #0
 801198e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 801199c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119a0:	4bab      	ldr	r3, [pc, #684]	; (8011c50 <ETH_MACDMAConfig+0x388>)
 80119a2:	4013      	ands	r3, r2
 80119a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80119a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80119aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80119ac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80119ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80119b0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80119b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80119b4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80119ba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80119bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80119be:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80119c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80119c2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80119c8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80119ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80119cc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80119ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80119d0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80119d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80119d4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80119d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80119d8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80119da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80119dc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80119de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119e2:	4313      	orrs	r3, r2
 80119e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80119fc:	2001      	movs	r0, #1
 80119fe:	f7fe fcfb 	bl	80103f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8011a12:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011a14:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8011a16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8011a18:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8011a1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8011a1e:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 8011a20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8011a24:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8011a26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8011a2a:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8011a2c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8011a30:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 8011a32:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8011a36:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8011a38:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8011a44:	2001      	movs	r0, #1
 8011a46:	f7fe fcd7 	bl	80103f8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a52:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011a5c:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011a66:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	699b      	ldr	r3, [r3, #24]
 8011a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8011a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011a76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8011a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011a84:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8011a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8011a8a:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8011a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8011a90:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8011a92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8011a96:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8011a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8011a9c:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8011a9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8011aa2:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8011aa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011ab6:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	699b      	ldr	r3, [r3, #24]
 8011abe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8011ac2:	2001      	movs	r0, #1
 8011ac4:	f7fe fc98 	bl	80103f8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011ad0:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8011ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8011ade:	430a      	orrs	r2, r1
 8011ae0:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	69db      	ldr	r3, [r3, #28]
 8011ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8011aec:	2001      	movs	r0, #1
 8011aee:	f7fe fc83 	bl	80103f8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011afa:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8011afc:	2300      	movs	r3, #0
 8011afe:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8011b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011b04:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8011b06:	2300      	movs	r3, #0
 8011b08:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8011b0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011b0e:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8011b10:	2300      	movs	r3, #0
 8011b12:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8011b14:	2300      	movs	r3, #0
 8011b16:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8011b20:	2304      	movs	r3, #4
 8011b22:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8011b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8011b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011b2e:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8011b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011b34:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8011b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b3a:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8011b3c:	2380      	movs	r3, #128	; 0x80
 8011b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8011b40:	2300      	movs	r3, #0
 8011b42:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8011b44:	2300      	movs	r3, #0
 8011b46:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b50:	3318      	adds	r3, #24
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8011b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011b5c:	4b3d      	ldr	r3, [pc, #244]	; (8011c54 <ETH_MACDMAConfig+0x38c>)
 8011b5e:	4013      	ands	r3, r2
 8011b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011b64:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8011b66:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011b68:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8011b6a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8011b6c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8011b6e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8011b70:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8011b72:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8011b74:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8011b76:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8011b78:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8011b7a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8011b7c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8011b80:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8011b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8011b84:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8011b86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b98:	3318      	adds	r3, #24
 8011b9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011b9e:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011ba8:	3318      	adds	r3, #24
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8011bb0:	2001      	movs	r0, #1
 8011bb2:	f7fe fc21 	bl	80103f8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bbe:	3318      	adds	r3, #24
 8011bc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011bc4:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8011bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011bce:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8011bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8011bd2:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 8011bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8011bd6:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8011bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8011bda:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2U) |
 8011bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011bde:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 8011be0:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 8011be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8011be4:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8011be6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8011bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bee:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8011bfe:	2001      	movs	r0, #1
 8011c00:	f7fe fbfa 	bl	80103f8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011c10:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	2b01      	cmp	r3, #1
 8011c18:	d10f      	bne.n	8011c3a <ETH_MACDMAConfig+0x372>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6819      	ldr	r1, [r3, #0]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c26:	331c      	adds	r3, #28
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c32:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011c36:	331c      	adds	r3, #28
 8011c38:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	695b      	ldr	r3, [r3, #20]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	2100      	movs	r1, #0
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 f808 	bl	8011c58 <ETH_MACAddressConfig>
}
 8011c48:	bf00      	nop
 8011c4a:	37c0      	adds	r7, #192	; 0xc0
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	ff20810f 	.word	0xff20810f
 8011c54:	f8de3f23 	.word	0xf8de3f23

08011c58 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b087      	sub	sp, #28
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	3305      	adds	r3, #5
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	021b      	lsls	r3, r3, #8
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	3204      	adds	r2, #4
 8011c70:	7812      	ldrb	r2, [r2, #0]
 8011c72:	4313      	orrs	r3, r2
 8011c74:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8011c76:	68ba      	ldr	r2, [r7, #8]
 8011c78:	4b11      	ldr	r3, [pc, #68]	; (8011cc0 <ETH_MACAddressConfig+0x68>)
 8011c7a:	4413      	add	r3, r2
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	3303      	adds	r3, #3
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	061a      	lsls	r2, r3, #24
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	3302      	adds	r3, #2
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	041b      	lsls	r3, r3, #16
 8011c92:	431a      	orrs	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	3301      	adds	r3, #1
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	021b      	lsls	r3, r3, #8
 8011c9c:	4313      	orrs	r3, r2
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	7812      	ldrb	r2, [r2, #0]
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8011ca6:	68ba      	ldr	r2, [r7, #8]
 8011ca8:	4b06      	ldr	r3, [pc, #24]	; (8011cc4 <ETH_MACAddressConfig+0x6c>)
 8011caa:	4413      	add	r3, r2
 8011cac:	461a      	mov	r2, r3
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	6013      	str	r3, [r2, #0]
}
 8011cb2:	bf00      	nop
 8011cb4:	371c      	adds	r7, #28
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	40028040 	.word	0x40028040
 8011cc4:	40028044 	.word	0x40028044

08011cc8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	6812      	ldr	r2, [r2, #0]
 8011cdc:	6812      	ldr	r2, [r2, #0]
 8011cde:	f042 0208 	orr.w	r2, r2, #8
 8011ce2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011cec:	2001      	movs	r0, #1
 8011cee:	f000 f87f 	bl	8011df0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	68fa      	ldr	r2, [r7, #12]
 8011cf8:	601a      	str	r2, [r3, #0]
}
 8011cfa:	bf00      	nop
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b084      	sub	sp, #16
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	6812      	ldr	r2, [r2, #0]
 8011d16:	6812      	ldr	r2, [r2, #0]
 8011d18:	f042 0204 	orr.w	r2, r2, #4
 8011d1c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011d26:	2001      	movs	r0, #1
 8011d28:	f000 f862 	bl	8011df0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	68fa      	ldr	r2, [r7, #12]
 8011d32:	601a      	str	r2, [r3, #0]
}
 8011d34:	bf00      	nop
 8011d36:	3710      	adds	r7, #16
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6819      	ldr	r1, [r3, #0]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d50:	3318      	adds	r3, #24
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8011d58:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011d5c:	3318      	adds	r3, #24
 8011d5e:	601a      	str	r2, [r3, #0]
}
 8011d60:	bf00      	nop
 8011d62:	370c      	adds	r7, #12
 8011d64:	46bd      	mov	sp, r7
 8011d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6a:	4770      	bx	lr

08011d6c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8011d6c:	b480      	push	{r7}
 8011d6e:	b083      	sub	sp, #12
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6819      	ldr	r1, [r3, #0]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d80:	3318      	adds	r3, #24
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f043 0202 	orr.w	r2, r3, #2
 8011d88:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011d8c:	3318      	adds	r3, #24
 8011d8e:	601a      	str	r2, [r3, #0]
}
 8011d90:	bf00      	nop
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr

08011d9c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b084      	sub	sp, #16
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8011da4:	2300      	movs	r3, #0
 8011da6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6819      	ldr	r1, [r3, #0]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011db4:	3318      	adds	r3, #24
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011dbc:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8011dc0:	3318      	adds	r3, #24
 8011dc2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011dcc:	3318      	adds	r3, #24
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	f000 f80c 	bl	8011df0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011de2:	3318      	adds	r3, #24
 8011de4:	601a      	str	r2, [r3, #0]
}
 8011de6:	bf00      	nop
 8011de8:	3710      	adds	r7, #16
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
	...

08011df0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b085      	sub	sp, #20
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8011df8:	4b0a      	ldr	r3, [pc, #40]	; (8011e24 <ETH_Delay+0x34>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4a0a      	ldr	r2, [pc, #40]	; (8011e28 <ETH_Delay+0x38>)
 8011dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8011e02:	0a5b      	lsrs	r3, r3, #9
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	fb02 f303 	mul.w	r3, r2, r3
 8011e0a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8011e0c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	1e5a      	subs	r2, r3, #1
 8011e12:	60fa      	str	r2, [r7, #12]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d1f9      	bne.n	8011e0c <ETH_Delay+0x1c>
}
 8011e18:	bf00      	nop
 8011e1a:	3714      	adds	r7, #20
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	2000004c 	.word	0x2000004c
 8011e28:	10624dd3 	.word	0x10624dd3

08011e2c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b086      	sub	sp, #24
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011e3e:	4b23      	ldr	r3, [pc, #140]	; (8011ecc <HAL_FLASH_Program+0xa0>)
 8011e40:	7e1b      	ldrb	r3, [r3, #24]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d101      	bne.n	8011e4a <HAL_FLASH_Program+0x1e>
 8011e46:	2302      	movs	r3, #2
 8011e48:	e03b      	b.n	8011ec2 <HAL_FLASH_Program+0x96>
 8011e4a:	4b20      	ldr	r3, [pc, #128]	; (8011ecc <HAL_FLASH_Program+0xa0>)
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011e50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011e54:	f000 f860 	bl	8011f18 <FLASH_WaitForLastOperation>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8011e5c:	7dfb      	ldrb	r3, [r7, #23]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d12b      	bne.n	8011eba <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d105      	bne.n	8011e74 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8011e68:	783b      	ldrb	r3, [r7, #0]
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	68b8      	ldr	r0, [r7, #8]
 8011e6e:	f000 f905 	bl	801207c <FLASH_Program_Byte>
 8011e72:	e016      	b.n	8011ea2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	d105      	bne.n	8011e86 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8011e7a:	883b      	ldrh	r3, [r7, #0]
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	68b8      	ldr	r0, [r7, #8]
 8011e80:	f000 f8d8 	bl	8012034 <FLASH_Program_HalfWord>
 8011e84:	e00d      	b.n	8011ea2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2b02      	cmp	r3, #2
 8011e8a:	d105      	bne.n	8011e98 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	4619      	mov	r1, r3
 8011e90:	68b8      	ldr	r0, [r7, #8]
 8011e92:	f000 f8ad 	bl	8011ff0 <FLASH_Program_Word>
 8011e96:	e004      	b.n	8011ea2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8011e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e9c:	68b8      	ldr	r0, [r7, #8]
 8011e9e:	f000 f87b 	bl	8011f98 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011ea2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011ea6:	f000 f837 	bl	8011f18 <FLASH_WaitForLastOperation>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8011eae:	4a08      	ldr	r2, [pc, #32]	; (8011ed0 <HAL_FLASH_Program+0xa4>)
 8011eb0:	4b07      	ldr	r3, [pc, #28]	; (8011ed0 <HAL_FLASH_Program+0xa4>)
 8011eb2:	691b      	ldr	r3, [r3, #16]
 8011eb4:	f023 0301 	bic.w	r3, r3, #1
 8011eb8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011eba:	4b04      	ldr	r3, [pc, #16]	; (8011ecc <HAL_FLASH_Program+0xa0>)
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8011ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3718      	adds	r7, #24
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	2000a1b8 	.word	0x2000a1b8
 8011ed0:	40023c00 	.word	0x40023c00

08011ed4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011ede:	4b0b      	ldr	r3, [pc, #44]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011ee0:	691b      	ldr	r3, [r3, #16]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	da0b      	bge.n	8011efe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011ee6:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011ee8:	4a09      	ldr	r2, [pc, #36]	; (8011f10 <HAL_FLASH_Unlock+0x3c>)
 8011eea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011eec:	4b07      	ldr	r3, [pc, #28]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011eee:	4a09      	ldr	r2, [pc, #36]	; (8011f14 <HAL_FLASH_Unlock+0x40>)
 8011ef0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011ef2:	4b06      	ldr	r3, [pc, #24]	; (8011f0c <HAL_FLASH_Unlock+0x38>)
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	da01      	bge.n	8011efe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8011efa:	2301      	movs	r3, #1
 8011efc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8011efe:	79fb      	ldrb	r3, [r7, #7]
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr
 8011f0c:	40023c00 	.word	0x40023c00
 8011f10:	45670123 	.word	0x45670123
 8011f14:	cdef89ab 	.word	0xcdef89ab

08011f18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011f20:	2300      	movs	r3, #0
 8011f22:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011f24:	4b1a      	ldr	r3, [pc, #104]	; (8011f90 <FLASH_WaitForLastOperation+0x78>)
 8011f26:	2200      	movs	r2, #0
 8011f28:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8011f2a:	f7fe fa59 	bl	80103e0 <HAL_GetTick>
 8011f2e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011f30:	e010      	b.n	8011f54 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f38:	d00c      	beq.n	8011f54 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d007      	beq.n	8011f50 <FLASH_WaitForLastOperation+0x38>
 8011f40:	f7fe fa4e 	bl	80103e0 <HAL_GetTick>
 8011f44:	4602      	mov	r2, r0
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	1ad2      	subs	r2, r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d901      	bls.n	8011f54 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011f50:	2303      	movs	r3, #3
 8011f52:	e019      	b.n	8011f88 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011f54:	4b0f      	ldr	r3, [pc, #60]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f56:	68db      	ldr	r3, [r3, #12]
 8011f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d1e8      	bne.n	8011f32 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011f60:	4b0c      	ldr	r3, [pc, #48]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	f003 0301 	and.w	r3, r3, #1
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d002      	beq.n	8011f72 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011f6c:	4b09      	ldr	r3, [pc, #36]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f6e:	2201      	movs	r2, #1
 8011f70:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8011f72:	4b08      	ldr	r3, [pc, #32]	; (8011f94 <FLASH_WaitForLastOperation+0x7c>)
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d003      	beq.n	8011f86 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8011f7e:	f000 f89f 	bl	80120c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011f82:	2301      	movs	r3, #1
 8011f84:	e000      	b.n	8011f88 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8011f86:	2300      	movs	r3, #0
  
}  
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	2000a1b8 	.word	0x2000a1b8
 8011f94:	40023c00 	.word	0x40023c00

08011f98 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8011f98:	b4f0      	push	{r4, r5, r6, r7}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011fa4:	4a11      	ldr	r2, [pc, #68]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fa6:	4b11      	ldr	r3, [pc, #68]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fa8:	691b      	ldr	r3, [r3, #16]
 8011faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011fae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8011fb0:	4a0e      	ldr	r2, [pc, #56]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fb2:	4b0e      	ldr	r3, [pc, #56]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011fba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011fbc:	4a0b      	ldr	r2, [pc, #44]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fbe:	4b0b      	ldr	r3, [pc, #44]	; (8011fec <FLASH_Program_DoubleWord+0x54>)
 8011fc0:	691b      	ldr	r3, [r3, #16]
 8011fc2:	f043 0301 	orr.w	r3, r3, #1
 8011fc6:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	683a      	ldr	r2, [r7, #0]
 8011fcc:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	3304      	adds	r3, #4
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	e897 0018 	ldmia.w	r7, {r3, r4}
 8011fd8:	0025      	movs	r5, r4
 8011fda:	2600      	movs	r6, #0
 8011fdc:	462b      	mov	r3, r5
 8011fde:	6013      	str	r3, [r2, #0]
}
 8011fe0:	bf00      	nop
 8011fe2:	3710      	adds	r7, #16
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bcf0      	pop	{r4, r5, r6, r7}
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop
 8011fec:	40023c00 	.word	0x40023c00

08011ff0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011ffa:	4a0d      	ldr	r2, [pc, #52]	; (8012030 <FLASH_Program_Word+0x40>)
 8011ffc:	4b0c      	ldr	r3, [pc, #48]	; (8012030 <FLASH_Program_Word+0x40>)
 8011ffe:	691b      	ldr	r3, [r3, #16]
 8012000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012004:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8012006:	4a0a      	ldr	r2, [pc, #40]	; (8012030 <FLASH_Program_Word+0x40>)
 8012008:	4b09      	ldr	r3, [pc, #36]	; (8012030 <FLASH_Program_Word+0x40>)
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012010:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012012:	4a07      	ldr	r2, [pc, #28]	; (8012030 <FLASH_Program_Word+0x40>)
 8012014:	4b06      	ldr	r3, [pc, #24]	; (8012030 <FLASH_Program_Word+0x40>)
 8012016:	691b      	ldr	r3, [r3, #16]
 8012018:	f043 0301 	orr.w	r3, r3, #1
 801201c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	683a      	ldr	r2, [r7, #0]
 8012022:	601a      	str	r2, [r3, #0]
}
 8012024:	bf00      	nop
 8012026:	370c      	adds	r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr
 8012030:	40023c00 	.word	0x40023c00

08012034 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	460b      	mov	r3, r1
 801203e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012040:	4a0d      	ldr	r2, [pc, #52]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 8012042:	4b0d      	ldr	r3, [pc, #52]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 8012044:	691b      	ldr	r3, [r3, #16]
 8012046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801204a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801204c:	4a0a      	ldr	r2, [pc, #40]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 801204e:	4b0a      	ldr	r3, [pc, #40]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 8012050:	691b      	ldr	r3, [r3, #16]
 8012052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012058:	4a07      	ldr	r2, [pc, #28]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 801205a:	4b07      	ldr	r3, [pc, #28]	; (8012078 <FLASH_Program_HalfWord+0x44>)
 801205c:	691b      	ldr	r3, [r3, #16]
 801205e:	f043 0301 	orr.w	r3, r3, #1
 8012062:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	887a      	ldrh	r2, [r7, #2]
 8012068:	801a      	strh	r2, [r3, #0]
}
 801206a:	bf00      	nop
 801206c:	370c      	adds	r7, #12
 801206e:	46bd      	mov	sp, r7
 8012070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop
 8012078:	40023c00 	.word	0x40023c00

0801207c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	460b      	mov	r3, r1
 8012086:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012088:	4a0c      	ldr	r2, [pc, #48]	; (80120bc <FLASH_Program_Byte+0x40>)
 801208a:	4b0c      	ldr	r3, [pc, #48]	; (80120bc <FLASH_Program_Byte+0x40>)
 801208c:	691b      	ldr	r3, [r3, #16]
 801208e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012092:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8012094:	4a09      	ldr	r2, [pc, #36]	; (80120bc <FLASH_Program_Byte+0x40>)
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <FLASH_Program_Byte+0x40>)
 8012098:	691b      	ldr	r3, [r3, #16]
 801209a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801209c:	4a07      	ldr	r2, [pc, #28]	; (80120bc <FLASH_Program_Byte+0x40>)
 801209e:	4b07      	ldr	r3, [pc, #28]	; (80120bc <FLASH_Program_Byte+0x40>)
 80120a0:	691b      	ldr	r3, [r3, #16]
 80120a2:	f043 0301 	orr.w	r3, r3, #1
 80120a6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	78fa      	ldrb	r2, [r7, #3]
 80120ac:	701a      	strb	r2, [r3, #0]
}
 80120ae:	bf00      	nop
 80120b0:	370c      	adds	r7, #12
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr
 80120ba:	bf00      	nop
 80120bc:	40023c00 	.word	0x40023c00

080120c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80120c0:	b480      	push	{r7}
 80120c2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80120c4:	4b27      	ldr	r3, [pc, #156]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	f003 0310 	and.w	r3, r3, #16
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d008      	beq.n	80120e2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80120d0:	4b25      	ldr	r3, [pc, #148]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120d2:	69db      	ldr	r3, [r3, #28]
 80120d4:	f043 0310 	orr.w	r3, r3, #16
 80120d8:	4a23      	ldr	r2, [pc, #140]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120da:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80120dc:	4b21      	ldr	r3, [pc, #132]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120de:	2210      	movs	r2, #16
 80120e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80120e2:	4b20      	ldr	r3, [pc, #128]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120e4:	68db      	ldr	r3, [r3, #12]
 80120e6:	f003 0320 	and.w	r3, r3, #32
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d008      	beq.n	8012100 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80120ee:	4b1e      	ldr	r3, [pc, #120]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120f0:	69db      	ldr	r3, [r3, #28]
 80120f2:	f043 0308 	orr.w	r3, r3, #8
 80120f6:	4a1c      	ldr	r2, [pc, #112]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 80120f8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80120fa:	4b1a      	ldr	r3, [pc, #104]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 80120fc:	2220      	movs	r2, #32
 80120fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8012100:	4b18      	ldr	r3, [pc, #96]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012102:	68db      	ldr	r3, [r3, #12]
 8012104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012108:	2b00      	cmp	r3, #0
 801210a:	d008      	beq.n	801211e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801210c:	4b16      	ldr	r3, [pc, #88]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 801210e:	69db      	ldr	r3, [r3, #28]
 8012110:	f043 0304 	orr.w	r3, r3, #4
 8012114:	4a14      	ldr	r2, [pc, #80]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 8012116:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8012118:	4b12      	ldr	r3, [pc, #72]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 801211a:	2240      	movs	r2, #64	; 0x40
 801211c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801211e:	4b11      	ldr	r3, [pc, #68]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012120:	68db      	ldr	r3, [r3, #12]
 8012122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012126:	2b00      	cmp	r3, #0
 8012128:	d008      	beq.n	801213c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801212a:	4b0f      	ldr	r3, [pc, #60]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 801212c:	69db      	ldr	r3, [r3, #28]
 801212e:	f043 0302 	orr.w	r3, r3, #2
 8012132:	4a0d      	ldr	r2, [pc, #52]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 8012134:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8012136:	4b0b      	ldr	r3, [pc, #44]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012138:	2280      	movs	r2, #128	; 0x80
 801213a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801213c:	4b09      	ldr	r3, [pc, #36]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	f003 0302 	and.w	r3, r3, #2
 8012144:	2b00      	cmp	r3, #0
 8012146:	d008      	beq.n	801215a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012148:	4b07      	ldr	r3, [pc, #28]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 801214a:	69db      	ldr	r3, [r3, #28]
 801214c:	f043 0320 	orr.w	r3, r3, #32
 8012150:	4a05      	ldr	r2, [pc, #20]	; (8012168 <FLASH_SetErrorCode+0xa8>)
 8012152:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012154:	4b03      	ldr	r3, [pc, #12]	; (8012164 <FLASH_SetErrorCode+0xa4>)
 8012156:	2202      	movs	r2, #2
 8012158:	60da      	str	r2, [r3, #12]
  }
}
 801215a:	bf00      	nop
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr
 8012164:	40023c00 	.word	0x40023c00
 8012168:	2000a1b8 	.word	0x2000a1b8

0801216c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012176:	2301      	movs	r3, #1
 8012178:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801217a:	2300      	movs	r3, #0
 801217c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801217e:	4b31      	ldr	r3, [pc, #196]	; (8012244 <HAL_FLASHEx_Erase+0xd8>)
 8012180:	7e1b      	ldrb	r3, [r3, #24]
 8012182:	2b01      	cmp	r3, #1
 8012184:	d101      	bne.n	801218a <HAL_FLASHEx_Erase+0x1e>
 8012186:	2302      	movs	r3, #2
 8012188:	e058      	b.n	801223c <HAL_FLASHEx_Erase+0xd0>
 801218a:	4b2e      	ldr	r3, [pc, #184]	; (8012244 <HAL_FLASHEx_Erase+0xd8>)
 801218c:	2201      	movs	r2, #1
 801218e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012190:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012194:	f7ff fec0 	bl	8011f18 <FLASH_WaitForLastOperation>
 8012198:	4603      	mov	r3, r0
 801219a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 801219c:	7bfb      	ldrb	r3, [r7, #15]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d148      	bne.n	8012234 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	f04f 32ff 	mov.w	r2, #4294967295
 80121a8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d115      	bne.n	80121de <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	691b      	ldr	r3, [r3, #16]
 80121b6:	b2da      	uxtb	r2, r3
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	4619      	mov	r1, r3
 80121be:	4610      	mov	r0, r2
 80121c0:	f000 f844 	bl	801224c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80121c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80121c8:	f7ff fea6 	bl	8011f18 <FLASH_WaitForLastOperation>
 80121cc:	4603      	mov	r3, r0
 80121ce:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80121d0:	4a1d      	ldr	r2, [pc, #116]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 80121d2:	4b1d      	ldr	r3, [pc, #116]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 80121d4:	691b      	ldr	r3, [r3, #16]
 80121d6:	f023 0304 	bic.w	r3, r3, #4
 80121da:	6113      	str	r3, [r2, #16]
 80121dc:	e028      	b.n	8012230 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	689b      	ldr	r3, [r3, #8]
 80121e2:	60bb      	str	r3, [r7, #8]
 80121e4:	e01c      	b.n	8012220 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	691b      	ldr	r3, [r3, #16]
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	4619      	mov	r1, r3
 80121ee:	68b8      	ldr	r0, [r7, #8]
 80121f0:	f000 f850 	bl	8012294 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80121f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80121f8:	f7ff fe8e 	bl	8011f18 <FLASH_WaitForLastOperation>
 80121fc:	4603      	mov	r3, r0
 80121fe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8012200:	4a11      	ldr	r2, [pc, #68]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 8012202:	4b11      	ldr	r3, [pc, #68]	; (8012248 <HAL_FLASHEx_Erase+0xdc>)
 8012204:	691b      	ldr	r3, [r3, #16]
 8012206:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801220a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 801220c:	7bfb      	ldrb	r3, [r7, #15]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d003      	beq.n	801221a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	68ba      	ldr	r2, [r7, #8]
 8012216:	601a      	str	r2, [r3, #0]
          break;
 8012218:	e00a      	b.n	8012230 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	3301      	adds	r3, #1
 801221e:	60bb      	str	r3, [r7, #8]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	68da      	ldr	r2, [r3, #12]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	689b      	ldr	r3, [r3, #8]
 8012228:	441a      	add	r2, r3
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	429a      	cmp	r2, r3
 801222e:	d8da      	bhi.n	80121e6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8012230:	f000 f878 	bl	8012324 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012234:	4b03      	ldr	r3, [pc, #12]	; (8012244 <HAL_FLASHEx_Erase+0xd8>)
 8012236:	2200      	movs	r2, #0
 8012238:	761a      	strb	r2, [r3, #24]

  return status;
 801223a:	7bfb      	ldrb	r3, [r7, #15]
}
 801223c:	4618      	mov	r0, r3
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	2000a1b8 	.word	0x2000a1b8
 8012248:	40023c00 	.word	0x40023c00

0801224c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	4603      	mov	r3, r0
 8012254:	6039      	str	r1, [r7, #0]
 8012256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012258:	4a0d      	ldr	r2, [pc, #52]	; (8012290 <FLASH_MassErase+0x44>)
 801225a:	4b0d      	ldr	r3, [pc, #52]	; (8012290 <FLASH_MassErase+0x44>)
 801225c:	691b      	ldr	r3, [r3, #16]
 801225e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012262:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8012264:	4a0a      	ldr	r2, [pc, #40]	; (8012290 <FLASH_MassErase+0x44>)
 8012266:	4b0a      	ldr	r3, [pc, #40]	; (8012290 <FLASH_MassErase+0x44>)
 8012268:	691b      	ldr	r3, [r3, #16]
 801226a:	f043 0304 	orr.w	r3, r3, #4
 801226e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8012270:	4907      	ldr	r1, [pc, #28]	; (8012290 <FLASH_MassErase+0x44>)
 8012272:	4b07      	ldr	r3, [pc, #28]	; (8012290 <FLASH_MassErase+0x44>)
 8012274:	691a      	ldr	r2, [r3, #16]
 8012276:	79fb      	ldrb	r3, [r7, #7]
 8012278:	021b      	lsls	r3, r3, #8
 801227a:	4313      	orrs	r3, r2
 801227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012280:	610b      	str	r3, [r1, #16]
}
 8012282:	bf00      	nop
 8012284:	370c      	adds	r7, #12
 8012286:	46bd      	mov	sp, r7
 8012288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228c:	4770      	bx	lr
 801228e:	bf00      	nop
 8012290:	40023c00 	.word	0x40023c00

08012294 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8012294:	b480      	push	{r7}
 8012296:	b085      	sub	sp, #20
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	460b      	mov	r3, r1
 801229e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80122a0:	2300      	movs	r3, #0
 80122a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80122a4:	78fb      	ldrb	r3, [r7, #3]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d102      	bne.n	80122b0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80122aa:	2300      	movs	r3, #0
 80122ac:	60fb      	str	r3, [r7, #12]
 80122ae:	e010      	b.n	80122d2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80122b0:	78fb      	ldrb	r3, [r7, #3]
 80122b2:	2b01      	cmp	r3, #1
 80122b4:	d103      	bne.n	80122be <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80122b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122ba:	60fb      	str	r3, [r7, #12]
 80122bc:	e009      	b.n	80122d2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80122be:	78fb      	ldrb	r3, [r7, #3]
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d103      	bne.n	80122cc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80122c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80122c8:	60fb      	str	r3, [r7, #12]
 80122ca:	e002      	b.n	80122d2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80122cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80122d0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80122d2:	4a13      	ldr	r2, [pc, #76]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122d4:	4b12      	ldr	r3, [pc, #72]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122d6:	691b      	ldr	r3, [r3, #16]
 80122d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80122dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80122de:	4910      	ldr	r1, [pc, #64]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122e0:	4b0f      	ldr	r3, [pc, #60]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122e2:	691a      	ldr	r2, [r3, #16]
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	4313      	orrs	r3, r2
 80122e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80122ea:	4a0d      	ldr	r2, [pc, #52]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122ec:	4b0c      	ldr	r3, [pc, #48]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122ee:	691b      	ldr	r3, [r3, #16]
 80122f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80122f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80122f6:	490a      	ldr	r1, [pc, #40]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122f8:	4b09      	ldr	r3, [pc, #36]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 80122fa:	691a      	ldr	r2, [r3, #16]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	00db      	lsls	r3, r3, #3
 8012300:	4313      	orrs	r3, r2
 8012302:	f043 0302 	orr.w	r3, r3, #2
 8012306:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8012308:	4a05      	ldr	r2, [pc, #20]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 801230a:	4b05      	ldr	r3, [pc, #20]	; (8012320 <FLASH_Erase_Sector+0x8c>)
 801230c:	691b      	ldr	r3, [r3, #16]
 801230e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012312:	6113      	str	r3, [r2, #16]
}
 8012314:	bf00      	nop
 8012316:	3714      	adds	r7, #20
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr
 8012320:	40023c00 	.word	0x40023c00

08012324 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8012324:	b480      	push	{r7}
 8012326:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8012328:	4b20      	ldr	r3, [pc, #128]	; (80123ac <FLASH_FlushCaches+0x88>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012330:	2b00      	cmp	r3, #0
 8012332:	d017      	beq.n	8012364 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012334:	4a1d      	ldr	r2, [pc, #116]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012336:	4b1d      	ldr	r3, [pc, #116]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801233e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012340:	4a1a      	ldr	r2, [pc, #104]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012342:	4b1a      	ldr	r3, [pc, #104]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801234a:	6013      	str	r3, [r2, #0]
 801234c:	4a17      	ldr	r2, [pc, #92]	; (80123ac <FLASH_FlushCaches+0x88>)
 801234e:	4b17      	ldr	r3, [pc, #92]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012356:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012358:	4a14      	ldr	r2, [pc, #80]	; (80123ac <FLASH_FlushCaches+0x88>)
 801235a:	4b14      	ldr	r3, [pc, #80]	; (80123ac <FLASH_FlushCaches+0x88>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012362:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8012364:	4b11      	ldr	r3, [pc, #68]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801236c:	2b00      	cmp	r3, #0
 801236e:	d017      	beq.n	80123a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8012370:	4a0e      	ldr	r2, [pc, #56]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012372:	4b0e      	ldr	r3, [pc, #56]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801237a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801237c:	4a0b      	ldr	r2, [pc, #44]	; (80123ac <FLASH_FlushCaches+0x88>)
 801237e:	4b0b      	ldr	r3, [pc, #44]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012386:	6013      	str	r3, [r2, #0]
 8012388:	4a08      	ldr	r2, [pc, #32]	; (80123ac <FLASH_FlushCaches+0x88>)
 801238a:	4b08      	ldr	r3, [pc, #32]	; (80123ac <FLASH_FlushCaches+0x88>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012392:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8012394:	4a05      	ldr	r2, [pc, #20]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012396:	4b05      	ldr	r3, [pc, #20]	; (80123ac <FLASH_FlushCaches+0x88>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801239e:	6013      	str	r3, [r2, #0]
  }
}
 80123a0:	bf00      	nop
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop
 80123ac:	40023c00 	.word	0x40023c00

080123b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b089      	sub	sp, #36	; 0x24
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80123ba:	2300      	movs	r3, #0
 80123bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80123be:	2300      	movs	r3, #0
 80123c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80123c2:	2300      	movs	r3, #0
 80123c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80123c6:	2300      	movs	r3, #0
 80123c8:	61fb      	str	r3, [r7, #28]
 80123ca:	e16b      	b.n	80126a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80123cc:	2201      	movs	r2, #1
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	fa02 f303 	lsl.w	r3, r2, r3
 80123d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	4013      	ands	r3, r2
 80123de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80123e0:	693a      	ldr	r2, [r7, #16]
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	f040 815a 	bne.w	801269e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	d003      	beq.n	80123fa <HAL_GPIO_Init+0x4a>
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	2b12      	cmp	r3, #18
 80123f8:	d123      	bne.n	8012442 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	08da      	lsrs	r2, r3, #3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	3208      	adds	r2, #8
 8012402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	f003 0307 	and.w	r3, r3, #7
 801240e:	009b      	lsls	r3, r3, #2
 8012410:	220f      	movs	r2, #15
 8012412:	fa02 f303 	lsl.w	r3, r2, r3
 8012416:	43db      	mvns	r3, r3
 8012418:	69ba      	ldr	r2, [r7, #24]
 801241a:	4013      	ands	r3, r2
 801241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	691a      	ldr	r2, [r3, #16]
 8012422:	69fb      	ldr	r3, [r7, #28]
 8012424:	f003 0307 	and.w	r3, r3, #7
 8012428:	009b      	lsls	r3, r3, #2
 801242a:	fa02 f303 	lsl.w	r3, r2, r3
 801242e:	69ba      	ldr	r2, [r7, #24]
 8012430:	4313      	orrs	r3, r2
 8012432:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012434:	69fb      	ldr	r3, [r7, #28]
 8012436:	08da      	lsrs	r2, r3, #3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	3208      	adds	r2, #8
 801243c:	69b9      	ldr	r1, [r7, #24]
 801243e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	005b      	lsls	r3, r3, #1
 801244c:	2203      	movs	r2, #3
 801244e:	fa02 f303 	lsl.w	r3, r2, r3
 8012452:	43db      	mvns	r3, r3
 8012454:	69ba      	ldr	r2, [r7, #24]
 8012456:	4013      	ands	r3, r2
 8012458:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	f003 0203 	and.w	r2, r3, #3
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	005b      	lsls	r3, r3, #1
 8012466:	fa02 f303 	lsl.w	r3, r2, r3
 801246a:	69ba      	ldr	r2, [r7, #24]
 801246c:	4313      	orrs	r3, r2
 801246e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	69ba      	ldr	r2, [r7, #24]
 8012474:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d00b      	beq.n	8012496 <HAL_GPIO_Init+0xe6>
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	685b      	ldr	r3, [r3, #4]
 8012482:	2b02      	cmp	r3, #2
 8012484:	d007      	beq.n	8012496 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801248a:	2b11      	cmp	r3, #17
 801248c:	d003      	beq.n	8012496 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	2b12      	cmp	r3, #18
 8012494:	d130      	bne.n	80124f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	005b      	lsls	r3, r3, #1
 80124a0:	2203      	movs	r2, #3
 80124a2:	fa02 f303 	lsl.w	r3, r2, r3
 80124a6:	43db      	mvns	r3, r3
 80124a8:	69ba      	ldr	r2, [r7, #24]
 80124aa:	4013      	ands	r3, r2
 80124ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	68da      	ldr	r2, [r3, #12]
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	fa02 f303 	lsl.w	r3, r2, r3
 80124ba:	69ba      	ldr	r2, [r7, #24]
 80124bc:	4313      	orrs	r3, r2
 80124be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	69ba      	ldr	r2, [r7, #24]
 80124c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80124cc:	2201      	movs	r2, #1
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	fa02 f303 	lsl.w	r3, r2, r3
 80124d4:	43db      	mvns	r3, r3
 80124d6:	69ba      	ldr	r2, [r7, #24]
 80124d8:	4013      	ands	r3, r2
 80124da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	091b      	lsrs	r3, r3, #4
 80124e2:	f003 0201 	and.w	r2, r3, #1
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	fa02 f303 	lsl.w	r3, r2, r3
 80124ec:	69ba      	ldr	r2, [r7, #24]
 80124ee:	4313      	orrs	r3, r2
 80124f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	69ba      	ldr	r2, [r7, #24]
 80124f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	005b      	lsls	r3, r3, #1
 8012502:	2203      	movs	r2, #3
 8012504:	fa02 f303 	lsl.w	r3, r2, r3
 8012508:	43db      	mvns	r3, r3
 801250a:	69ba      	ldr	r2, [r7, #24]
 801250c:	4013      	ands	r3, r2
 801250e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	689a      	ldr	r2, [r3, #8]
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	005b      	lsls	r3, r3, #1
 8012518:	fa02 f303 	lsl.w	r3, r2, r3
 801251c:	69ba      	ldr	r2, [r7, #24]
 801251e:	4313      	orrs	r3, r2
 8012520:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	69ba      	ldr	r2, [r7, #24]
 8012526:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012530:	2b00      	cmp	r3, #0
 8012532:	f000 80b4 	beq.w	801269e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012536:	2300      	movs	r3, #0
 8012538:	60fb      	str	r3, [r7, #12]
 801253a:	4a5f      	ldr	r2, [pc, #380]	; (80126b8 <HAL_GPIO_Init+0x308>)
 801253c:	4b5e      	ldr	r3, [pc, #376]	; (80126b8 <HAL_GPIO_Init+0x308>)
 801253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012544:	6453      	str	r3, [r2, #68]	; 0x44
 8012546:	4b5c      	ldr	r3, [pc, #368]	; (80126b8 <HAL_GPIO_Init+0x308>)
 8012548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801254e:	60fb      	str	r3, [r7, #12]
 8012550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012552:	4a5a      	ldr	r2, [pc, #360]	; (80126bc <HAL_GPIO_Init+0x30c>)
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	089b      	lsrs	r3, r3, #2
 8012558:	3302      	adds	r3, #2
 801255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	f003 0303 	and.w	r3, r3, #3
 8012566:	009b      	lsls	r3, r3, #2
 8012568:	220f      	movs	r2, #15
 801256a:	fa02 f303 	lsl.w	r3, r2, r3
 801256e:	43db      	mvns	r3, r3
 8012570:	69ba      	ldr	r2, [r7, #24]
 8012572:	4013      	ands	r3, r2
 8012574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4a51      	ldr	r2, [pc, #324]	; (80126c0 <HAL_GPIO_Init+0x310>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d02b      	beq.n	80125d6 <HAL_GPIO_Init+0x226>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4a50      	ldr	r2, [pc, #320]	; (80126c4 <HAL_GPIO_Init+0x314>)
 8012582:	4293      	cmp	r3, r2
 8012584:	d025      	beq.n	80125d2 <HAL_GPIO_Init+0x222>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	4a4f      	ldr	r2, [pc, #316]	; (80126c8 <HAL_GPIO_Init+0x318>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d01f      	beq.n	80125ce <HAL_GPIO_Init+0x21e>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	4a4e      	ldr	r2, [pc, #312]	; (80126cc <HAL_GPIO_Init+0x31c>)
 8012592:	4293      	cmp	r3, r2
 8012594:	d019      	beq.n	80125ca <HAL_GPIO_Init+0x21a>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4a4d      	ldr	r2, [pc, #308]	; (80126d0 <HAL_GPIO_Init+0x320>)
 801259a:	4293      	cmp	r3, r2
 801259c:	d013      	beq.n	80125c6 <HAL_GPIO_Init+0x216>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4a4c      	ldr	r2, [pc, #304]	; (80126d4 <HAL_GPIO_Init+0x324>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d00d      	beq.n	80125c2 <HAL_GPIO_Init+0x212>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	4a4b      	ldr	r2, [pc, #300]	; (80126d8 <HAL_GPIO_Init+0x328>)
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d007      	beq.n	80125be <HAL_GPIO_Init+0x20e>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4a4a      	ldr	r2, [pc, #296]	; (80126dc <HAL_GPIO_Init+0x32c>)
 80125b2:	4293      	cmp	r3, r2
 80125b4:	d101      	bne.n	80125ba <HAL_GPIO_Init+0x20a>
 80125b6:	2307      	movs	r3, #7
 80125b8:	e00e      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125ba:	2308      	movs	r3, #8
 80125bc:	e00c      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125be:	2306      	movs	r3, #6
 80125c0:	e00a      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125c2:	2305      	movs	r3, #5
 80125c4:	e008      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125c6:	2304      	movs	r3, #4
 80125c8:	e006      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125ca:	2303      	movs	r3, #3
 80125cc:	e004      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125ce:	2302      	movs	r3, #2
 80125d0:	e002      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125d2:	2301      	movs	r3, #1
 80125d4:	e000      	b.n	80125d8 <HAL_GPIO_Init+0x228>
 80125d6:	2300      	movs	r3, #0
 80125d8:	69fa      	ldr	r2, [r7, #28]
 80125da:	f002 0203 	and.w	r2, r2, #3
 80125de:	0092      	lsls	r2, r2, #2
 80125e0:	4093      	lsls	r3, r2
 80125e2:	69ba      	ldr	r2, [r7, #24]
 80125e4:	4313      	orrs	r3, r2
 80125e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80125e8:	4934      	ldr	r1, [pc, #208]	; (80126bc <HAL_GPIO_Init+0x30c>)
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	089b      	lsrs	r3, r3, #2
 80125ee:	3302      	adds	r3, #2
 80125f0:	69ba      	ldr	r2, [r7, #24]
 80125f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80125f6:	4b3a      	ldr	r3, [pc, #232]	; (80126e0 <HAL_GPIO_Init+0x330>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	43db      	mvns	r3, r3
 8012600:	69ba      	ldr	r2, [r7, #24]
 8012602:	4013      	ands	r3, r2
 8012604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801260e:	2b00      	cmp	r3, #0
 8012610:	d003      	beq.n	801261a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012612:	69ba      	ldr	r2, [r7, #24]
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	4313      	orrs	r3, r2
 8012618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801261a:	4a31      	ldr	r2, [pc, #196]	; (80126e0 <HAL_GPIO_Init+0x330>)
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012620:	4b2f      	ldr	r3, [pc, #188]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	43db      	mvns	r3, r3
 801262a:	69ba      	ldr	r2, [r7, #24]
 801262c:	4013      	ands	r3, r2
 801262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012638:	2b00      	cmp	r3, #0
 801263a:	d003      	beq.n	8012644 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 801263c:	69ba      	ldr	r2, [r7, #24]
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	4313      	orrs	r3, r2
 8012642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012644:	4a26      	ldr	r2, [pc, #152]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801264a:	4b25      	ldr	r3, [pc, #148]	; (80126e0 <HAL_GPIO_Init+0x330>)
 801264c:	689b      	ldr	r3, [r3, #8]
 801264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	43db      	mvns	r3, r3
 8012654:	69ba      	ldr	r2, [r7, #24]
 8012656:	4013      	ands	r3, r2
 8012658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012662:	2b00      	cmp	r3, #0
 8012664:	d003      	beq.n	801266e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012666:	69ba      	ldr	r2, [r7, #24]
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	4313      	orrs	r3, r2
 801266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801266e:	4a1c      	ldr	r2, [pc, #112]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012674:	4b1a      	ldr	r3, [pc, #104]	; (80126e0 <HAL_GPIO_Init+0x330>)
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	43db      	mvns	r3, r3
 801267e:	69ba      	ldr	r2, [r7, #24]
 8012680:	4013      	ands	r3, r2
 8012682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d003      	beq.n	8012698 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012690:	69ba      	ldr	r2, [r7, #24]
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	4313      	orrs	r3, r2
 8012696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012698:	4a11      	ldr	r2, [pc, #68]	; (80126e0 <HAL_GPIO_Init+0x330>)
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	3301      	adds	r3, #1
 80126a2:	61fb      	str	r3, [r7, #28]
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	2b0f      	cmp	r3, #15
 80126a8:	f67f ae90 	bls.w	80123cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80126ac:	bf00      	nop
 80126ae:	3724      	adds	r7, #36	; 0x24
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr
 80126b8:	40023800 	.word	0x40023800
 80126bc:	40013800 	.word	0x40013800
 80126c0:	40020000 	.word	0x40020000
 80126c4:	40020400 	.word	0x40020400
 80126c8:	40020800 	.word	0x40020800
 80126cc:	40020c00 	.word	0x40020c00
 80126d0:	40021000 	.word	0x40021000
 80126d4:	40021400 	.word	0x40021400
 80126d8:	40021800 	.word	0x40021800
 80126dc:	40021c00 	.word	0x40021c00
 80126e0:	40013c00 	.word	0x40013c00

080126e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b087      	sub	sp, #28
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80126ee:	2300      	movs	r3, #0
 80126f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80126f2:	2300      	movs	r3, #0
 80126f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80126f6:	2300      	movs	r3, #0
 80126f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80126fa:	2300      	movs	r3, #0
 80126fc:	617b      	str	r3, [r7, #20]
 80126fe:	e0ce      	b.n	801289e <HAL_GPIO_DeInit+0x1ba>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012700:	2201      	movs	r2, #1
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	fa02 f303 	lsl.w	r3, r2, r3
 8012708:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801270a:	683a      	ldr	r2, [r7, #0]
 801270c:	693b      	ldr	r3, [r7, #16]
 801270e:	4013      	ands	r3, r2
 8012710:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8012712:	68fa      	ldr	r2, [r7, #12]
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	429a      	cmp	r2, r3
 8012718:	f040 80be 	bne.w	8012898 <HAL_GPIO_DeInit+0x1b4>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681a      	ldr	r2, [r3, #0]
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	005b      	lsls	r3, r3, #1
 8012724:	2103      	movs	r1, #3
 8012726:	fa01 f303 	lsl.w	r3, r1, r3
 801272a:	43db      	mvns	r3, r3
 801272c:	401a      	ands	r2, r3
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	08da      	lsrs	r2, r3, #3
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	08d9      	lsrs	r1, r3, #3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	3108      	adds	r1, #8
 801273e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	f003 0307 	and.w	r3, r3, #7
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	200f      	movs	r0, #15
 801274c:	fa00 f303 	lsl.w	r3, r0, r3
 8012750:	43db      	mvns	r3, r3
 8012752:	4019      	ands	r1, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	3208      	adds	r2, #8
 8012758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	689a      	ldr	r2, [r3, #8]
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	005b      	lsls	r3, r3, #1
 8012764:	2103      	movs	r1, #3
 8012766:	fa01 f303 	lsl.w	r3, r1, r3
 801276a:	43db      	mvns	r3, r3
 801276c:	401a      	ands	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	685a      	ldr	r2, [r3, #4]
 8012776:	2101      	movs	r1, #1
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	fa01 f303 	lsl.w	r3, r1, r3
 801277e:	43db      	mvns	r3, r3
 8012780:	401a      	ands	r2, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	68da      	ldr	r2, [r3, #12]
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	005b      	lsls	r3, r3, #1
 801278e:	2103      	movs	r1, #3
 8012790:	fa01 f303 	lsl.w	r3, r1, r3
 8012794:	43db      	mvns	r3, r3
 8012796:	401a      	ands	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801279c:	4a45      	ldr	r2, [pc, #276]	; (80128b4 <HAL_GPIO_DeInit+0x1d0>)
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	089b      	lsrs	r3, r3, #2
 80127a2:	3302      	adds	r3, #2
 80127a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	f003 0303 	and.w	r3, r3, #3
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	220f      	movs	r2, #15
 80127b4:	fa02 f303 	lsl.w	r3, r2, r3
 80127b8:	68ba      	ldr	r2, [r7, #8]
 80127ba:	4013      	ands	r3, r2
 80127bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4a3d      	ldr	r2, [pc, #244]	; (80128b8 <HAL_GPIO_DeInit+0x1d4>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d02b      	beq.n	801281e <HAL_GPIO_DeInit+0x13a>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	4a3c      	ldr	r2, [pc, #240]	; (80128bc <HAL_GPIO_DeInit+0x1d8>)
 80127ca:	4293      	cmp	r3, r2
 80127cc:	d025      	beq.n	801281a <HAL_GPIO_DeInit+0x136>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4a3b      	ldr	r2, [pc, #236]	; (80128c0 <HAL_GPIO_DeInit+0x1dc>)
 80127d2:	4293      	cmp	r3, r2
 80127d4:	d01f      	beq.n	8012816 <HAL_GPIO_DeInit+0x132>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4a3a      	ldr	r2, [pc, #232]	; (80128c4 <HAL_GPIO_DeInit+0x1e0>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d019      	beq.n	8012812 <HAL_GPIO_DeInit+0x12e>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4a39      	ldr	r2, [pc, #228]	; (80128c8 <HAL_GPIO_DeInit+0x1e4>)
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d013      	beq.n	801280e <HAL_GPIO_DeInit+0x12a>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	4a38      	ldr	r2, [pc, #224]	; (80128cc <HAL_GPIO_DeInit+0x1e8>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d00d      	beq.n	801280a <HAL_GPIO_DeInit+0x126>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4a37      	ldr	r2, [pc, #220]	; (80128d0 <HAL_GPIO_DeInit+0x1ec>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d007      	beq.n	8012806 <HAL_GPIO_DeInit+0x122>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4a36      	ldr	r2, [pc, #216]	; (80128d4 <HAL_GPIO_DeInit+0x1f0>)
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d101      	bne.n	8012802 <HAL_GPIO_DeInit+0x11e>
 80127fe:	2307      	movs	r3, #7
 8012800:	e00e      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012802:	2308      	movs	r3, #8
 8012804:	e00c      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012806:	2306      	movs	r3, #6
 8012808:	e00a      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801280a:	2305      	movs	r3, #5
 801280c:	e008      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801280e:	2304      	movs	r3, #4
 8012810:	e006      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012812:	2303      	movs	r3, #3
 8012814:	e004      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 8012816:	2302      	movs	r3, #2
 8012818:	e002      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801281a:	2301      	movs	r3, #1
 801281c:	e000      	b.n	8012820 <HAL_GPIO_DeInit+0x13c>
 801281e:	2300      	movs	r3, #0
 8012820:	697a      	ldr	r2, [r7, #20]
 8012822:	f002 0203 	and.w	r2, r2, #3
 8012826:	0092      	lsls	r2, r2, #2
 8012828:	fa03 f202 	lsl.w	r2, r3, r2
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	429a      	cmp	r2, r3
 8012830:	d132      	bne.n	8012898 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	f003 0303 	and.w	r3, r3, #3
 8012838:	009b      	lsls	r3, r3, #2
 801283a:	220f      	movs	r2, #15
 801283c:	fa02 f303 	lsl.w	r3, r2, r3
 8012840:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8012842:	481c      	ldr	r0, [pc, #112]	; (80128b4 <HAL_GPIO_DeInit+0x1d0>)
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	089b      	lsrs	r3, r3, #2
 8012848:	491a      	ldr	r1, [pc, #104]	; (80128b4 <HAL_GPIO_DeInit+0x1d0>)
 801284a:	697a      	ldr	r2, [r7, #20]
 801284c:	0892      	lsrs	r2, r2, #2
 801284e:	3202      	adds	r2, #2
 8012850:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012854:	68ba      	ldr	r2, [r7, #8]
 8012856:	43d2      	mvns	r2, r2
 8012858:	400a      	ands	r2, r1
 801285a:	3302      	adds	r3, #2
 801285c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012860:	491d      	ldr	r1, [pc, #116]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012862:	4b1d      	ldr	r3, [pc, #116]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	43db      	mvns	r3, r3
 801286a:	4013      	ands	r3, r2
 801286c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801286e:	491a      	ldr	r1, [pc, #104]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012870:	4b19      	ldr	r3, [pc, #100]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012872:	685a      	ldr	r2, [r3, #4]
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	43db      	mvns	r3, r3
 8012878:	4013      	ands	r3, r2
 801287a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801287c:	4916      	ldr	r1, [pc, #88]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 801287e:	4b16      	ldr	r3, [pc, #88]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 8012880:	689a      	ldr	r2, [r3, #8]
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	43db      	mvns	r3, r3
 8012886:	4013      	ands	r3, r2
 8012888:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801288a:	4913      	ldr	r1, [pc, #76]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 801288c:	4b12      	ldr	r3, [pc, #72]	; (80128d8 <HAL_GPIO_DeInit+0x1f4>)
 801288e:	68da      	ldr	r2, [r3, #12]
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	43db      	mvns	r3, r3
 8012894:	4013      	ands	r3, r2
 8012896:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	3301      	adds	r3, #1
 801289c:	617b      	str	r3, [r7, #20]
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	2b0f      	cmp	r3, #15
 80128a2:	f67f af2d 	bls.w	8012700 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 80128a6:	bf00      	nop
 80128a8:	371c      	adds	r7, #28
 80128aa:	46bd      	mov	sp, r7
 80128ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop
 80128b4:	40013800 	.word	0x40013800
 80128b8:	40020000 	.word	0x40020000
 80128bc:	40020400 	.word	0x40020400
 80128c0:	40020800 	.word	0x40020800
 80128c4:	40020c00 	.word	0x40020c00
 80128c8:	40021000 	.word	0x40021000
 80128cc:	40021400 	.word	0x40021400
 80128d0:	40021800 	.word	0x40021800
 80128d4:	40021c00 	.word	0x40021c00
 80128d8:	40013c00 	.word	0x40013c00

080128dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80128dc:	b480      	push	{r7}
 80128de:	b083      	sub	sp, #12
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	460b      	mov	r3, r1
 80128e6:	807b      	strh	r3, [r7, #2]
 80128e8:	4613      	mov	r3, r2
 80128ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80128ec:	787b      	ldrb	r3, [r7, #1]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d003      	beq.n	80128fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80128f2:	887a      	ldrh	r2, [r7, #2]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80128f8:	e003      	b.n	8012902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80128fa:	887b      	ldrh	r3, [r7, #2]
 80128fc:	041a      	lsls	r2, r3, #16
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	619a      	str	r2, [r3, #24]
}
 8012902:	bf00      	nop
 8012904:	370c      	adds	r7, #12
 8012906:	46bd      	mov	sp, r7
 8012908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290c:	4770      	bx	lr

0801290e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801290e:	b480      	push	{r7}
 8012910:	b083      	sub	sp, #12
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
 8012916:	460b      	mov	r3, r1
 8012918:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	695a      	ldr	r2, [r3, #20]
 801291e:	887b      	ldrh	r3, [r7, #2]
 8012920:	405a      	eors	r2, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	615a      	str	r2, [r3, #20]
}
 8012926:	bf00      	nop
 8012928:	370c      	adds	r7, #12
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr
	...

08012934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b086      	sub	sp, #24
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d101      	bne.n	8012946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012942:	2301      	movs	r3, #1
 8012944:	e22d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f003 0301 	and.w	r3, r3, #1
 801294e:	2b00      	cmp	r3, #0
 8012950:	d075      	beq.n	8012a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012952:	4ba3      	ldr	r3, [pc, #652]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012954:	689b      	ldr	r3, [r3, #8]
 8012956:	f003 030c 	and.w	r3, r3, #12
 801295a:	2b04      	cmp	r3, #4
 801295c:	d00c      	beq.n	8012978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801295e:	4ba0      	ldr	r3, [pc, #640]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012960:	689b      	ldr	r3, [r3, #8]
 8012962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012966:	2b08      	cmp	r3, #8
 8012968:	d112      	bne.n	8012990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801296a:	4b9d      	ldr	r3, [pc, #628]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012976:	d10b      	bne.n	8012990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012978:	4b99      	ldr	r3, [pc, #612]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012980:	2b00      	cmp	r3, #0
 8012982:	d05b      	beq.n	8012a3c <HAL_RCC_OscConfig+0x108>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d157      	bne.n	8012a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801298c:	2301      	movs	r3, #1
 801298e:	e208      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012998:	d106      	bne.n	80129a8 <HAL_RCC_OscConfig+0x74>
 801299a:	4a91      	ldr	r2, [pc, #580]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801299c:	4b90      	ldr	r3, [pc, #576]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80129a4:	6013      	str	r3, [r2, #0]
 80129a6:	e01d      	b.n	80129e4 <HAL_RCC_OscConfig+0xb0>
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80129b0:	d10c      	bne.n	80129cc <HAL_RCC_OscConfig+0x98>
 80129b2:	4a8b      	ldr	r2, [pc, #556]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129b4:	4b8a      	ldr	r3, [pc, #552]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80129bc:	6013      	str	r3, [r2, #0]
 80129be:	4a88      	ldr	r2, [pc, #544]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129c0:	4b87      	ldr	r3, [pc, #540]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80129c8:	6013      	str	r3, [r2, #0]
 80129ca:	e00b      	b.n	80129e4 <HAL_RCC_OscConfig+0xb0>
 80129cc:	4a84      	ldr	r2, [pc, #528]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129ce:	4b84      	ldr	r3, [pc, #528]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80129d6:	6013      	str	r3, [r2, #0]
 80129d8:	4a81      	ldr	r2, [pc, #516]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129da:	4b81      	ldr	r3, [pc, #516]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80129e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d013      	beq.n	8012a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80129ec:	f7fd fcf8 	bl	80103e0 <HAL_GetTick>
 80129f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80129f2:	e008      	b.n	8012a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80129f4:	f7fd fcf4 	bl	80103e0 <HAL_GetTick>
 80129f8:	4602      	mov	r2, r0
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	2b64      	cmp	r3, #100	; 0x64
 8012a00:	d901      	bls.n	8012a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012a02:	2303      	movs	r3, #3
 8012a04:	e1cd      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a06:	4b76      	ldr	r3, [pc, #472]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d0f0      	beq.n	80129f4 <HAL_RCC_OscConfig+0xc0>
 8012a12:	e014      	b.n	8012a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a14:	f7fd fce4 	bl	80103e0 <HAL_GetTick>
 8012a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012a1a:	e008      	b.n	8012a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012a1c:	f7fd fce0 	bl	80103e0 <HAL_GetTick>
 8012a20:	4602      	mov	r2, r0
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	1ad3      	subs	r3, r2, r3
 8012a26:	2b64      	cmp	r3, #100	; 0x64
 8012a28:	d901      	bls.n	8012a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012a2a:	2303      	movs	r3, #3
 8012a2c:	e1b9      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012a2e:	4b6c      	ldr	r3, [pc, #432]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d1f0      	bne.n	8012a1c <HAL_RCC_OscConfig+0xe8>
 8012a3a:	e000      	b.n	8012a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	f003 0302 	and.w	r3, r3, #2
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d063      	beq.n	8012b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012a4a:	4b65      	ldr	r3, [pc, #404]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a4c:	689b      	ldr	r3, [r3, #8]
 8012a4e:	f003 030c 	and.w	r3, r3, #12
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d00b      	beq.n	8012a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012a56:	4b62      	ldr	r3, [pc, #392]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a58:	689b      	ldr	r3, [r3, #8]
 8012a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012a5e:	2b08      	cmp	r3, #8
 8012a60:	d11c      	bne.n	8012a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012a62:	4b5f      	ldr	r3, [pc, #380]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d116      	bne.n	8012a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012a6e:	4b5c      	ldr	r3, [pc, #368]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f003 0302 	and.w	r3, r3, #2
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d005      	beq.n	8012a86 <HAL_RCC_OscConfig+0x152>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	68db      	ldr	r3, [r3, #12]
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d001      	beq.n	8012a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012a82:	2301      	movs	r3, #1
 8012a84:	e18d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012a86:	4956      	ldr	r1, [pc, #344]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a88:	4b55      	ldr	r3, [pc, #340]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	691b      	ldr	r3, [r3, #16]
 8012a94:	00db      	lsls	r3, r3, #3
 8012a96:	4313      	orrs	r3, r2
 8012a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012a9a:	e03a      	b.n	8012b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d020      	beq.n	8012ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012aa4:	4b4f      	ldr	r3, [pc, #316]	; (8012be4 <HAL_RCC_OscConfig+0x2b0>)
 8012aa6:	2201      	movs	r2, #1
 8012aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012aaa:	f7fd fc99 	bl	80103e0 <HAL_GetTick>
 8012aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012ab0:	e008      	b.n	8012ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012ab2:	f7fd fc95 	bl	80103e0 <HAL_GetTick>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	1ad3      	subs	r3, r2, r3
 8012abc:	2b02      	cmp	r3, #2
 8012abe:	d901      	bls.n	8012ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012ac0:	2303      	movs	r3, #3
 8012ac2:	e16e      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012ac4:	4b46      	ldr	r3, [pc, #280]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f003 0302 	and.w	r3, r3, #2
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d0f0      	beq.n	8012ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012ad0:	4943      	ldr	r1, [pc, #268]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ad2:	4b43      	ldr	r3, [pc, #268]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	691b      	ldr	r3, [r3, #16]
 8012ade:	00db      	lsls	r3, r3, #3
 8012ae0:	4313      	orrs	r3, r2
 8012ae2:	600b      	str	r3, [r1, #0]
 8012ae4:	e015      	b.n	8012b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012ae6:	4b3f      	ldr	r3, [pc, #252]	; (8012be4 <HAL_RCC_OscConfig+0x2b0>)
 8012ae8:	2200      	movs	r2, #0
 8012aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012aec:	f7fd fc78 	bl	80103e0 <HAL_GetTick>
 8012af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012af2:	e008      	b.n	8012b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012af4:	f7fd fc74 	bl	80103e0 <HAL_GetTick>
 8012af8:	4602      	mov	r2, r0
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	1ad3      	subs	r3, r2, r3
 8012afe:	2b02      	cmp	r3, #2
 8012b00:	d901      	bls.n	8012b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012b02:	2303      	movs	r3, #3
 8012b04:	e14d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012b06:	4b36      	ldr	r3, [pc, #216]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f003 0302 	and.w	r3, r3, #2
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1f0      	bne.n	8012af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f003 0308 	and.w	r3, r3, #8
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d030      	beq.n	8012b80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	695b      	ldr	r3, [r3, #20]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d016      	beq.n	8012b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012b26:	4b30      	ldr	r3, [pc, #192]	; (8012be8 <HAL_RCC_OscConfig+0x2b4>)
 8012b28:	2201      	movs	r2, #1
 8012b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b2c:	f7fd fc58 	bl	80103e0 <HAL_GetTick>
 8012b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b32:	e008      	b.n	8012b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b34:	f7fd fc54 	bl	80103e0 <HAL_GetTick>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	1ad3      	subs	r3, r2, r3
 8012b3e:	2b02      	cmp	r3, #2
 8012b40:	d901      	bls.n	8012b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012b42:	2303      	movs	r3, #3
 8012b44:	e12d      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b46:	4b26      	ldr	r3, [pc, #152]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b4a:	f003 0302 	and.w	r3, r3, #2
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d0f0      	beq.n	8012b34 <HAL_RCC_OscConfig+0x200>
 8012b52:	e015      	b.n	8012b80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012b54:	4b24      	ldr	r3, [pc, #144]	; (8012be8 <HAL_RCC_OscConfig+0x2b4>)
 8012b56:	2200      	movs	r2, #0
 8012b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012b5a:	f7fd fc41 	bl	80103e0 <HAL_GetTick>
 8012b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b60:	e008      	b.n	8012b74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b62:	f7fd fc3d 	bl	80103e0 <HAL_GetTick>
 8012b66:	4602      	mov	r2, r0
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d901      	bls.n	8012b74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012b70:	2303      	movs	r3, #3
 8012b72:	e116      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b74:	4b1a      	ldr	r3, [pc, #104]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b78:	f003 0302 	and.w	r3, r3, #2
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1f0      	bne.n	8012b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f003 0304 	and.w	r3, r3, #4
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 80a0 	beq.w	8012cce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012b92:	4b13      	ldr	r3, [pc, #76]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d10f      	bne.n	8012bbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	60fb      	str	r3, [r7, #12]
 8012ba2:	4a0f      	ldr	r2, [pc, #60]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ba4:	4b0e      	ldr	r3, [pc, #56]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012bac:	6413      	str	r3, [r2, #64]	; 0x40
 8012bae:	4b0c      	ldr	r3, [pc, #48]	; (8012be0 <HAL_RCC_OscConfig+0x2ac>)
 8012bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012bb6:	60fb      	str	r3, [r7, #12]
 8012bb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012bbe:	4b0b      	ldr	r3, [pc, #44]	; (8012bec <HAL_RCC_OscConfig+0x2b8>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d121      	bne.n	8012c0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012bca:	4a08      	ldr	r2, [pc, #32]	; (8012bec <HAL_RCC_OscConfig+0x2b8>)
 8012bcc:	4b07      	ldr	r3, [pc, #28]	; (8012bec <HAL_RCC_OscConfig+0x2b8>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012bd6:	f7fd fc03 	bl	80103e0 <HAL_GetTick>
 8012bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012bdc:	e011      	b.n	8012c02 <HAL_RCC_OscConfig+0x2ce>
 8012bde:	bf00      	nop
 8012be0:	40023800 	.word	0x40023800
 8012be4:	42470000 	.word	0x42470000
 8012be8:	42470e80 	.word	0x42470e80
 8012bec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012bf0:	f7fd fbf6 	bl	80103e0 <HAL_GetTick>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	2b02      	cmp	r3, #2
 8012bfc:	d901      	bls.n	8012c02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012bfe:	2303      	movs	r3, #3
 8012c00:	e0cf      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012c02:	4b6a      	ldr	r3, [pc, #424]	; (8012dac <HAL_RCC_OscConfig+0x478>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d0f0      	beq.n	8012bf0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	689b      	ldr	r3, [r3, #8]
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d106      	bne.n	8012c24 <HAL_RCC_OscConfig+0x2f0>
 8012c16:	4a66      	ldr	r2, [pc, #408]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c18:	4b65      	ldr	r3, [pc, #404]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c1c:	f043 0301 	orr.w	r3, r3, #1
 8012c20:	6713      	str	r3, [r2, #112]	; 0x70
 8012c22:	e01c      	b.n	8012c5e <HAL_RCC_OscConfig+0x32a>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	2b05      	cmp	r3, #5
 8012c2a:	d10c      	bne.n	8012c46 <HAL_RCC_OscConfig+0x312>
 8012c2c:	4a60      	ldr	r2, [pc, #384]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c2e:	4b60      	ldr	r3, [pc, #384]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c32:	f043 0304 	orr.w	r3, r3, #4
 8012c36:	6713      	str	r3, [r2, #112]	; 0x70
 8012c38:	4a5d      	ldr	r2, [pc, #372]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c3a:	4b5d      	ldr	r3, [pc, #372]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c3e:	f043 0301 	orr.w	r3, r3, #1
 8012c42:	6713      	str	r3, [r2, #112]	; 0x70
 8012c44:	e00b      	b.n	8012c5e <HAL_RCC_OscConfig+0x32a>
 8012c46:	4a5a      	ldr	r2, [pc, #360]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c48:	4b59      	ldr	r3, [pc, #356]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c4c:	f023 0301 	bic.w	r3, r3, #1
 8012c50:	6713      	str	r3, [r2, #112]	; 0x70
 8012c52:	4a57      	ldr	r2, [pc, #348]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c54:	4b56      	ldr	r3, [pc, #344]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c58:	f023 0304 	bic.w	r3, r3, #4
 8012c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d015      	beq.n	8012c92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c66:	f7fd fbbb 	bl	80103e0 <HAL_GetTick>
 8012c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c6c:	e00a      	b.n	8012c84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c6e:	f7fd fbb7 	bl	80103e0 <HAL_GetTick>
 8012c72:	4602      	mov	r2, r0
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	1ad3      	subs	r3, r2, r3
 8012c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	d901      	bls.n	8012c84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012c80:	2303      	movs	r3, #3
 8012c82:	e08e      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c84:	4b4a      	ldr	r3, [pc, #296]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c88:	f003 0302 	and.w	r3, r3, #2
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d0ee      	beq.n	8012c6e <HAL_RCC_OscConfig+0x33a>
 8012c90:	e014      	b.n	8012cbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012c92:	f7fd fba5 	bl	80103e0 <HAL_GetTick>
 8012c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012c98:	e00a      	b.n	8012cb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c9a:	f7fd fba1 	bl	80103e0 <HAL_GetTick>
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	1ad3      	subs	r3, r2, r3
 8012ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d901      	bls.n	8012cb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012cac:	2303      	movs	r3, #3
 8012cae:	e078      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012cb0:	4b3f      	ldr	r3, [pc, #252]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cb4:	f003 0302 	and.w	r3, r3, #2
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d1ee      	bne.n	8012c9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012cbc:	7dfb      	ldrb	r3, [r7, #23]
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d105      	bne.n	8012cce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012cc2:	4a3b      	ldr	r2, [pc, #236]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cc4:	4b3a      	ldr	r3, [pc, #232]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ccc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	699b      	ldr	r3, [r3, #24]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d064      	beq.n	8012da0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012cd6:	4b36      	ldr	r3, [pc, #216]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012cd8:	689b      	ldr	r3, [r3, #8]
 8012cda:	f003 030c 	and.w	r3, r3, #12
 8012cde:	2b08      	cmp	r3, #8
 8012ce0:	d05c      	beq.n	8012d9c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	699b      	ldr	r3, [r3, #24]
 8012ce6:	2b02      	cmp	r3, #2
 8012ce8:	d141      	bne.n	8012d6e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012cea:	4b32      	ldr	r3, [pc, #200]	; (8012db4 <HAL_RCC_OscConfig+0x480>)
 8012cec:	2200      	movs	r2, #0
 8012cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012cf0:	f7fd fb76 	bl	80103e0 <HAL_GetTick>
 8012cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012cf6:	e008      	b.n	8012d0a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012cf8:	f7fd fb72 	bl	80103e0 <HAL_GetTick>
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	1ad3      	subs	r3, r2, r3
 8012d02:	2b02      	cmp	r3, #2
 8012d04:	d901      	bls.n	8012d0a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8012d06:	2303      	movs	r3, #3
 8012d08:	e04b      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d0a:	4b29      	ldr	r3, [pc, #164]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d1f0      	bne.n	8012cf8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012d16:	4926      	ldr	r1, [pc, #152]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	69da      	ldr	r2, [r3, #28]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6a1b      	ldr	r3, [r3, #32]
 8012d20:	431a      	orrs	r2, r3
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d26:	019b      	lsls	r3, r3, #6
 8012d28:	431a      	orrs	r2, r3
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d2e:	085b      	lsrs	r3, r3, #1
 8012d30:	3b01      	subs	r3, #1
 8012d32:	041b      	lsls	r3, r3, #16
 8012d34:	431a      	orrs	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d3a:	061b      	lsls	r3, r3, #24
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012d40:	4b1c      	ldr	r3, [pc, #112]	; (8012db4 <HAL_RCC_OscConfig+0x480>)
 8012d42:	2201      	movs	r2, #1
 8012d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d46:	f7fd fb4b 	bl	80103e0 <HAL_GetTick>
 8012d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d4c:	e008      	b.n	8012d60 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d4e:	f7fd fb47 	bl	80103e0 <HAL_GetTick>
 8012d52:	4602      	mov	r2, r0
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	1ad3      	subs	r3, r2, r3
 8012d58:	2b02      	cmp	r3, #2
 8012d5a:	d901      	bls.n	8012d60 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8012d5c:	2303      	movs	r3, #3
 8012d5e:	e020      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d60:	4b13      	ldr	r3, [pc, #76]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d0f0      	beq.n	8012d4e <HAL_RCC_OscConfig+0x41a>
 8012d6c:	e018      	b.n	8012da0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012d6e:	4b11      	ldr	r3, [pc, #68]	; (8012db4 <HAL_RCC_OscConfig+0x480>)
 8012d70:	2200      	movs	r2, #0
 8012d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d74:	f7fd fb34 	bl	80103e0 <HAL_GetTick>
 8012d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d7a:	e008      	b.n	8012d8e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d7c:	f7fd fb30 	bl	80103e0 <HAL_GetTick>
 8012d80:	4602      	mov	r2, r0
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	1ad3      	subs	r3, r2, r3
 8012d86:	2b02      	cmp	r3, #2
 8012d88:	d901      	bls.n	8012d8e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8012d8a:	2303      	movs	r3, #3
 8012d8c:	e009      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d8e:	4b08      	ldr	r3, [pc, #32]	; (8012db0 <HAL_RCC_OscConfig+0x47c>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d1f0      	bne.n	8012d7c <HAL_RCC_OscConfig+0x448>
 8012d9a:	e001      	b.n	8012da0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	e000      	b.n	8012da2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8012da0:	2300      	movs	r3, #0
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3718      	adds	r7, #24
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	40007000 	.word	0x40007000
 8012db0:	40023800 	.word	0x40023800
 8012db4:	42470060 	.word	0x42470060

08012db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d101      	bne.n	8012dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	e0ca      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012dcc:	4b67      	ldr	r3, [pc, #412]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	f003 020f 	and.w	r2, r3, #15
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d20c      	bcs.n	8012df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012dda:	4b64      	ldr	r3, [pc, #400]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012ddc:	683a      	ldr	r2, [r7, #0]
 8012dde:	b2d2      	uxtb	r2, r2
 8012de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012de2:	4b62      	ldr	r3, [pc, #392]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	f003 020f 	and.w	r2, r3, #15
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d001      	beq.n	8012df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012df0:	2301      	movs	r3, #1
 8012df2:	e0b6      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f003 0302 	and.w	r3, r3, #2
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d020      	beq.n	8012e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f003 0304 	and.w	r3, r3, #4
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d005      	beq.n	8012e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012e0c:	4a58      	ldr	r2, [pc, #352]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e0e:	4b58      	ldr	r3, [pc, #352]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e10:	689b      	ldr	r3, [r3, #8]
 8012e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f003 0308 	and.w	r3, r3, #8
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d005      	beq.n	8012e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012e24:	4a52      	ldr	r2, [pc, #328]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e26:	4b52      	ldr	r3, [pc, #328]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012e30:	494f      	ldr	r1, [pc, #316]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e32:	4b4f      	ldr	r3, [pc, #316]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e34:	689b      	ldr	r3, [r3, #8]
 8012e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	689b      	ldr	r3, [r3, #8]
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f003 0301 	and.w	r3, r3, #1
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d044      	beq.n	8012ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	d107      	bne.n	8012e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012e56:	4b46      	ldr	r3, [pc, #280]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d119      	bne.n	8012e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e62:	2301      	movs	r3, #1
 8012e64:	e07d      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	2b02      	cmp	r3, #2
 8012e6c:	d003      	beq.n	8012e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012e72:	2b03      	cmp	r3, #3
 8012e74:	d107      	bne.n	8012e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012e76:	4b3e      	ldr	r3, [pc, #248]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d109      	bne.n	8012e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e82:	2301      	movs	r3, #1
 8012e84:	e06d      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012e86:	4b3a      	ldr	r3, [pc, #232]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f003 0302 	and.w	r3, r3, #2
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d101      	bne.n	8012e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012e92:	2301      	movs	r3, #1
 8012e94:	e065      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012e96:	4936      	ldr	r1, [pc, #216]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e98:	4b35      	ldr	r3, [pc, #212]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012e9a:	689b      	ldr	r3, [r3, #8]
 8012e9c:	f023 0203 	bic.w	r2, r3, #3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	4313      	orrs	r3, r2
 8012ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012ea8:	f7fd fa9a 	bl	80103e0 <HAL_GetTick>
 8012eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012eae:	e00a      	b.n	8012ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012eb0:	f7fd fa96 	bl	80103e0 <HAL_GetTick>
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	1ad3      	subs	r3, r2, r3
 8012eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d901      	bls.n	8012ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012ec2:	2303      	movs	r3, #3
 8012ec4:	e04d      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012ec6:	4b2a      	ldr	r3, [pc, #168]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012ec8:	689b      	ldr	r3, [r3, #8]
 8012eca:	f003 020c 	and.w	r2, r3, #12
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d1eb      	bne.n	8012eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012ed8:	4b24      	ldr	r3, [pc, #144]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	f003 020f 	and.w	r2, r3, #15
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d90c      	bls.n	8012f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012ee6:	4b21      	ldr	r3, [pc, #132]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012ee8:	683a      	ldr	r2, [r7, #0]
 8012eea:	b2d2      	uxtb	r2, r2
 8012eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012eee:	4b1f      	ldr	r3, [pc, #124]	; (8012f6c <HAL_RCC_ClockConfig+0x1b4>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f003 020f 	and.w	r2, r3, #15
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d001      	beq.n	8012f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012efc:	2301      	movs	r3, #1
 8012efe:	e030      	b.n	8012f62 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f003 0304 	and.w	r3, r3, #4
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d008      	beq.n	8012f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012f0c:	4918      	ldr	r1, [pc, #96]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f0e:	4b18      	ldr	r3, [pc, #96]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f10:	689b      	ldr	r3, [r3, #8]
 8012f12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	68db      	ldr	r3, [r3, #12]
 8012f1a:	4313      	orrs	r3, r2
 8012f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	f003 0308 	and.w	r3, r3, #8
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d009      	beq.n	8012f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012f2a:	4911      	ldr	r1, [pc, #68]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f2c:	4b10      	ldr	r3, [pc, #64]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f2e:	689b      	ldr	r3, [r3, #8]
 8012f30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	691b      	ldr	r3, [r3, #16]
 8012f38:	00db      	lsls	r3, r3, #3
 8012f3a:	4313      	orrs	r3, r2
 8012f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012f3e:	f000 f81d 	bl	8012f7c <HAL_RCC_GetSysClockFreq>
 8012f42:	4601      	mov	r1, r0
 8012f44:	4b0a      	ldr	r3, [pc, #40]	; (8012f70 <HAL_RCC_ClockConfig+0x1b8>)
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	091b      	lsrs	r3, r3, #4
 8012f4a:	f003 030f 	and.w	r3, r3, #15
 8012f4e:	4a09      	ldr	r2, [pc, #36]	; (8012f74 <HAL_RCC_ClockConfig+0x1bc>)
 8012f50:	5cd3      	ldrb	r3, [r2, r3]
 8012f52:	fa21 f303 	lsr.w	r3, r1, r3
 8012f56:	4a08      	ldr	r2, [pc, #32]	; (8012f78 <HAL_RCC_ClockConfig+0x1c0>)
 8012f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8012f5a:	2000      	movs	r0, #0
 8012f5c:	f012 fb2e 	bl	80255bc <HAL_InitTick>

  return HAL_OK;
 8012f60:	2300      	movs	r3, #0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3710      	adds	r7, #16
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	40023c00 	.word	0x40023c00
 8012f70:	40023800 	.word	0x40023800
 8012f74:	0802b704 	.word	0x0802b704
 8012f78:	2000004c 	.word	0x2000004c

08012f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f80:	b087      	sub	sp, #28
 8012f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012f84:	2200      	movs	r2, #0
 8012f86:	60fa      	str	r2, [r7, #12]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	617a      	str	r2, [r7, #20]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8012f90:	2200      	movs	r2, #0
 8012f92:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012f94:	4a51      	ldr	r2, [pc, #324]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012f96:	6892      	ldr	r2, [r2, #8]
 8012f98:	f002 020c 	and.w	r2, r2, #12
 8012f9c:	2a04      	cmp	r2, #4
 8012f9e:	d007      	beq.n	8012fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8012fa0:	2a08      	cmp	r2, #8
 8012fa2:	d008      	beq.n	8012fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8012fa4:	2a00      	cmp	r2, #0
 8012fa6:	f040 8090 	bne.w	80130ca <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012faa:	4b4d      	ldr	r3, [pc, #308]	; (80130e0 <HAL_RCC_GetSysClockFreq+0x164>)
 8012fac:	613b      	str	r3, [r7, #16]
       break;
 8012fae:	e08f      	b.n	80130d0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012fb0:	4b4c      	ldr	r3, [pc, #304]	; (80130e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012fb2:	613b      	str	r3, [r7, #16]
      break;
 8012fb4:	e08c      	b.n	80130d0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012fb6:	4a49      	ldr	r2, [pc, #292]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012fb8:	6852      	ldr	r2, [r2, #4]
 8012fba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012fbe:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012fc0:	4a46      	ldr	r2, [pc, #280]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012fc2:	6852      	ldr	r2, [r2, #4]
 8012fc4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8012fc8:	2a00      	cmp	r2, #0
 8012fca:	d023      	beq.n	8013014 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012fcc:	4b43      	ldr	r3, [pc, #268]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	099b      	lsrs	r3, r3, #6
 8012fd2:	f04f 0400 	mov.w	r4, #0
 8012fd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012fda:	f04f 0200 	mov.w	r2, #0
 8012fde:	ea03 0301 	and.w	r3, r3, r1
 8012fe2:	ea04 0402 	and.w	r4, r4, r2
 8012fe6:	4a3f      	ldr	r2, [pc, #252]	; (80130e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012fe8:	fb02 f104 	mul.w	r1, r2, r4
 8012fec:	2200      	movs	r2, #0
 8012fee:	fb02 f203 	mul.w	r2, r2, r3
 8012ff2:	440a      	add	r2, r1
 8012ff4:	493b      	ldr	r1, [pc, #236]	; (80130e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8012ff6:	fba3 0101 	umull	r0, r1, r3, r1
 8012ffa:	1853      	adds	r3, r2, r1
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f04f 0400 	mov.w	r4, #0
 8013004:	461a      	mov	r2, r3
 8013006:	4623      	mov	r3, r4
 8013008:	f7fd f82c 	bl	8010064 <__aeabi_uldivmod>
 801300c:	4603      	mov	r3, r0
 801300e:	460c      	mov	r4, r1
 8013010:	617b      	str	r3, [r7, #20]
 8013012:	e04c      	b.n	80130ae <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013014:	4a31      	ldr	r2, [pc, #196]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 8013016:	6852      	ldr	r2, [r2, #4]
 8013018:	0992      	lsrs	r2, r2, #6
 801301a:	4611      	mov	r1, r2
 801301c:	f04f 0200 	mov.w	r2, #0
 8013020:	f240 15ff 	movw	r5, #511	; 0x1ff
 8013024:	f04f 0600 	mov.w	r6, #0
 8013028:	ea05 0501 	and.w	r5, r5, r1
 801302c:	ea06 0602 	and.w	r6, r6, r2
 8013030:	4629      	mov	r1, r5
 8013032:	4632      	mov	r2, r6
 8013034:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8013038:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 801303c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8013040:	4651      	mov	r1, sl
 8013042:	465a      	mov	r2, fp
 8013044:	46aa      	mov	sl, r5
 8013046:	46b3      	mov	fp, r6
 8013048:	4655      	mov	r5, sl
 801304a:	465e      	mov	r6, fp
 801304c:	1b4d      	subs	r5, r1, r5
 801304e:	eb62 0606 	sbc.w	r6, r2, r6
 8013052:	4629      	mov	r1, r5
 8013054:	4632      	mov	r2, r6
 8013056:	0194      	lsls	r4, r2, #6
 8013058:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801305c:	018b      	lsls	r3, r1, #6
 801305e:	1a5b      	subs	r3, r3, r1
 8013060:	eb64 0402 	sbc.w	r4, r4, r2
 8013064:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8013068:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 801306c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8013070:	4643      	mov	r3, r8
 8013072:	464c      	mov	r4, r9
 8013074:	4655      	mov	r5, sl
 8013076:	465e      	mov	r6, fp
 8013078:	18ed      	adds	r5, r5, r3
 801307a:	eb46 0604 	adc.w	r6, r6, r4
 801307e:	462b      	mov	r3, r5
 8013080:	4634      	mov	r4, r6
 8013082:	02a2      	lsls	r2, r4, #10
 8013084:	607a      	str	r2, [r7, #4]
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801308c:	607a      	str	r2, [r7, #4]
 801308e:	029b      	lsls	r3, r3, #10
 8013090:	603b      	str	r3, [r7, #0]
 8013092:	e897 0018 	ldmia.w	r7, {r3, r4}
 8013096:	4618      	mov	r0, r3
 8013098:	4621      	mov	r1, r4
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	f04f 0400 	mov.w	r4, #0
 80130a0:	461a      	mov	r2, r3
 80130a2:	4623      	mov	r3, r4
 80130a4:	f7fc ffde 	bl	8010064 <__aeabi_uldivmod>
 80130a8:	4603      	mov	r3, r0
 80130aa:	460c      	mov	r4, r1
 80130ac:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80130ae:	4b0b      	ldr	r3, [pc, #44]	; (80130dc <HAL_RCC_GetSysClockFreq+0x160>)
 80130b0:	685b      	ldr	r3, [r3, #4]
 80130b2:	0c1b      	lsrs	r3, r3, #16
 80130b4:	f003 0303 	and.w	r3, r3, #3
 80130b8:	3301      	adds	r3, #1
 80130ba:	005b      	lsls	r3, r3, #1
 80130bc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80130be:	697a      	ldr	r2, [r7, #20]
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80130c6:	613b      	str	r3, [r7, #16]
      break;
 80130c8:	e002      	b.n	80130d0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80130ca:	4b05      	ldr	r3, [pc, #20]	; (80130e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80130cc:	613b      	str	r3, [r7, #16]
      break;
 80130ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80130d0:	693b      	ldr	r3, [r7, #16]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	371c      	adds	r7, #28
 80130d6:	46bd      	mov	sp, r7
 80130d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130dc:	40023800 	.word	0x40023800
 80130e0:	00f42400 	.word	0x00f42400
 80130e4:	017d7840 	.word	0x017d7840

080130e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80130e8:	b480      	push	{r7}
 80130ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80130ec:	4b03      	ldr	r3, [pc, #12]	; (80130fc <HAL_RCC_GetHCLKFreq+0x14>)
 80130ee:	681b      	ldr	r3, [r3, #0]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	2000004c 	.word	0x2000004c

08013100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013104:	f7ff fff0 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8013108:	4601      	mov	r1, r0
 801310a:	4b05      	ldr	r3, [pc, #20]	; (8013120 <HAL_RCC_GetPCLK1Freq+0x20>)
 801310c:	689b      	ldr	r3, [r3, #8]
 801310e:	0a9b      	lsrs	r3, r3, #10
 8013110:	f003 0307 	and.w	r3, r3, #7
 8013114:	4a03      	ldr	r2, [pc, #12]	; (8013124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013116:	5cd3      	ldrb	r3, [r2, r3]
 8013118:	fa21 f303 	lsr.w	r3, r1, r3
}
 801311c:	4618      	mov	r0, r3
 801311e:	bd80      	pop	{r7, pc}
 8013120:	40023800 	.word	0x40023800
 8013124:	0802b714 	.word	0x0802b714

08013128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801312c:	f7ff ffdc 	bl	80130e8 <HAL_RCC_GetHCLKFreq>
 8013130:	4601      	mov	r1, r0
 8013132:	4b05      	ldr	r3, [pc, #20]	; (8013148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013134:	689b      	ldr	r3, [r3, #8]
 8013136:	0b5b      	lsrs	r3, r3, #13
 8013138:	f003 0307 	and.w	r3, r3, #7
 801313c:	4a03      	ldr	r2, [pc, #12]	; (801314c <HAL_RCC_GetPCLK2Freq+0x24>)
 801313e:	5cd3      	ldrb	r3, [r2, r3]
 8013140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8013144:	4618      	mov	r0, r3
 8013146:	bd80      	pop	{r7, pc}
 8013148:	40023800 	.word	0x40023800
 801314c:	0802b714 	.word	0x0802b714

08013150 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	220f      	movs	r2, #15
 801315e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013160:	4b12      	ldr	r3, [pc, #72]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 8013162:	689b      	ldr	r3, [r3, #8]
 8013164:	f003 0203 	and.w	r2, r3, #3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801316c:	4b0f      	ldr	r3, [pc, #60]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 801316e:	689b      	ldr	r3, [r3, #8]
 8013170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8013178:	4b0c      	ldr	r3, [pc, #48]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 801317a:	689b      	ldr	r3, [r3, #8]
 801317c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013184:	4b09      	ldr	r3, [pc, #36]	; (80131ac <HAL_RCC_GetClockConfig+0x5c>)
 8013186:	689b      	ldr	r3, [r3, #8]
 8013188:	08db      	lsrs	r3, r3, #3
 801318a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013192:	4b07      	ldr	r3, [pc, #28]	; (80131b0 <HAL_RCC_GetClockConfig+0x60>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f003 020f 	and.w	r2, r3, #15
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	601a      	str	r2, [r3, #0]
}
 801319e:	bf00      	nop
 80131a0:	370c      	adds	r7, #12
 80131a2:	46bd      	mov	sp, r7
 80131a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop
 80131ac:	40023800 	.word	0x40023800
 80131b0:	40023c00 	.word	0x40023c00

080131b4 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d101      	bne.n	80131c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80131c2:	2301      	movs	r3, #1
 80131c4:	e01d      	b.n	8013202 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d106      	bne.n	80131e0 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2200      	movs	r2, #0
 80131d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f012 fcb2 	bl	8025b44 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2202      	movs	r2, #2
 80131e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	3304      	adds	r3, #4
 80131f0:	4619      	mov	r1, r3
 80131f2:	4610      	mov	r0, r2
 80131f4:	f000 fa5a 	bl	80136ac <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2201      	movs	r2, #1
 80131fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8013200:	2300      	movs	r3, #0
}
 8013202:	4618      	mov	r0, r3
 8013204:	3708      	adds	r7, #8
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}

0801320a <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801320a:	b480      	push	{r7}
 801320c:	b083      	sub	sp, #12
 801320e:	af00      	add	r7, sp, #0
 8013210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	6812      	ldr	r2, [r2, #0]
 801321a:	68d2      	ldr	r2, [r2, #12]
 801321c:	f042 0201 	orr.w	r2, r2, #1
 8013220:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	687a      	ldr	r2, [r7, #4]
 8013228:	6812      	ldr	r2, [r2, #0]
 801322a:	6812      	ldr	r2, [r2, #0]
 801322c:	f042 0201 	orr.w	r2, r2, #1
 8013230:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8013232:	2300      	movs	r3, #0
}
 8013234:	4618      	mov	r0, r3
 8013236:	370c      	adds	r7, #12
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr

08013240 <HAL_TIM_Base_Stop_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8013240:	b480      	push	{r7}
 8013242:	b083      	sub	sp, #12
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	6812      	ldr	r2, [r2, #0]
 8013250:	68d2      	ldr	r2, [r2, #12]
 8013252:	f022 0201 	bic.w	r2, r2, #1
 8013256:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	6a1a      	ldr	r2, [r3, #32]
 801325e:	f241 1311 	movw	r3, #4369	; 0x1111
 8013262:	4013      	ands	r3, r2
 8013264:	2b00      	cmp	r3, #0
 8013266:	d10f      	bne.n	8013288 <HAL_TIM_Base_Stop_IT+0x48>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	6a1a      	ldr	r2, [r3, #32]
 801326e:	f240 4344 	movw	r3, #1092	; 0x444
 8013272:	4013      	ands	r3, r2
 8013274:	2b00      	cmp	r3, #0
 8013276:	d107      	bne.n	8013288 <HAL_TIM_Base_Stop_IT+0x48>
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	6812      	ldr	r2, [r2, #0]
 8013280:	6812      	ldr	r2, [r2, #0]
 8013282:	f022 0201 	bic.w	r2, r2, #1
 8013286:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 8013288:	2300      	movs	r3, #0
}
 801328a:	4618      	mov	r0, r3
 801328c:	370c      	adds	r7, #12
 801328e:	46bd      	mov	sp, r7
 8013290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013294:	4770      	bx	lr

08013296 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013296:	b580      	push	{r7, lr}
 8013298:	b082      	sub	sp, #8
 801329a:	af00      	add	r7, sp, #0
 801329c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	691b      	ldr	r3, [r3, #16]
 80132a4:	f003 0302 	and.w	r3, r3, #2
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d122      	bne.n	80132f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	f003 0302 	and.w	r3, r3, #2
 80132b6:	2b02      	cmp	r3, #2
 80132b8:	d11b      	bne.n	80132f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f06f 0202 	mvn.w	r2, #2
 80132c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2201      	movs	r2, #1
 80132c8:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	699b      	ldr	r3, [r3, #24]
 80132d0:	f003 0303 	and.w	r3, r3, #3
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d003      	beq.n	80132e0 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f000 f9c9 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 80132de:	e005      	b.n	80132ec <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f000 f9bb 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f000 f9cc 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2200      	movs	r2, #0
 80132f0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	691b      	ldr	r3, [r3, #16]
 80132f8:	f003 0304 	and.w	r3, r3, #4
 80132fc:	2b04      	cmp	r3, #4
 80132fe:	d122      	bne.n	8013346 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	68db      	ldr	r3, [r3, #12]
 8013306:	f003 0304 	and.w	r3, r3, #4
 801330a:	2b04      	cmp	r3, #4
 801330c:	d11b      	bne.n	8013346 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	f06f 0204 	mvn.w	r2, #4
 8013316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2202      	movs	r2, #2
 801331c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	699b      	ldr	r3, [r3, #24]
 8013324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013328:	2b00      	cmp	r3, #0
 801332a:	d003      	beq.n	8013334 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 f99f 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 8013332:	e005      	b.n	8013340 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f000 f991 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f000 f9a2 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2200      	movs	r2, #0
 8013344:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	691b      	ldr	r3, [r3, #16]
 801334c:	f003 0308 	and.w	r3, r3, #8
 8013350:	2b08      	cmp	r3, #8
 8013352:	d122      	bne.n	801339a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	68db      	ldr	r3, [r3, #12]
 801335a:	f003 0308 	and.w	r3, r3, #8
 801335e:	2b08      	cmp	r3, #8
 8013360:	d11b      	bne.n	801339a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f06f 0208 	mvn.w	r2, #8
 801336a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2204      	movs	r2, #4
 8013370:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	69db      	ldr	r3, [r3, #28]
 8013378:	f003 0303 	and.w	r3, r3, #3
 801337c:	2b00      	cmp	r3, #0
 801337e:	d003      	beq.n	8013388 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f000 f975 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 8013386:	e005      	b.n	8013394 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f000 f967 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f000 f978 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2200      	movs	r2, #0
 8013398:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	691b      	ldr	r3, [r3, #16]
 80133a0:	f003 0310 	and.w	r3, r3, #16
 80133a4:	2b10      	cmp	r3, #16
 80133a6:	d122      	bne.n	80133ee <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	f003 0310 	and.w	r3, r3, #16
 80133b2:	2b10      	cmp	r3, #16
 80133b4:	d11b      	bne.n	80133ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f06f 0210 	mvn.w	r2, #16
 80133be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2208      	movs	r2, #8
 80133c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	69db      	ldr	r3, [r3, #28]
 80133cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d003      	beq.n	80133dc <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f000 f94b 	bl	8013670 <HAL_TIM_IC_CaptureCallback>
 80133da:	e005      	b.n	80133e8 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f000 f93d 	bl	801365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 f94e 	bl	8013684 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2200      	movs	r2, #0
 80133ec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	691b      	ldr	r3, [r3, #16]
 80133f4:	f003 0301 	and.w	r3, r3, #1
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d10e      	bne.n	801341a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	68db      	ldr	r3, [r3, #12]
 8013402:	f003 0301 	and.w	r3, r3, #1
 8013406:	2b01      	cmp	r3, #1
 8013408:	d107      	bne.n	801341a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f06f 0201 	mvn.w	r2, #1
 8013412:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f011 fa55 	bl	80248c4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	691b      	ldr	r3, [r3, #16]
 8013420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013424:	2b80      	cmp	r3, #128	; 0x80
 8013426:	d10e      	bne.n	8013446 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013432:	2b80      	cmp	r3, #128	; 0x80
 8013434:	d107      	bne.n	8013446 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801343e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f000 fad5 	bl	80139f0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	691b      	ldr	r3, [r3, #16]
 801344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013450:	2b40      	cmp	r3, #64	; 0x40
 8013452:	d10e      	bne.n	8013472 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801345e:	2b40      	cmp	r3, #64	; 0x40
 8013460:	d107      	bne.n	8013472 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801346a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f000 f913 	bl	8013698 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	691b      	ldr	r3, [r3, #16]
 8013478:	f003 0320 	and.w	r3, r3, #32
 801347c:	2b20      	cmp	r3, #32
 801347e:	d10e      	bne.n	801349e <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	f003 0320 	and.w	r3, r3, #32
 801348a:	2b20      	cmp	r3, #32
 801348c:	d107      	bne.n	801349e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	f06f 0220 	mvn.w	r2, #32
 8013496:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f000 fa9f 	bl	80139dc <HAL_TIMEx_CommutationCallback>
    }
  }
}
 801349e:	bf00      	nop
 80134a0:	3708      	adds	r7, #8
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b084      	sub	sp, #16
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80134b0:	2300      	movs	r3, #0
 80134b2:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80134ba:	2b01      	cmp	r3, #1
 80134bc:	d101      	bne.n	80134c2 <HAL_TIM_ConfigClockSource+0x1c>
 80134be:	2302      	movs	r3, #2
 80134c0:	e0c8      	b.n	8013654 <HAL_TIM_ConfigClockSource+0x1ae>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2201      	movs	r2, #1
 80134c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2202      	movs	r2, #2
 80134ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80134e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80134e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	68fa      	ldr	r2, [r7, #12]
 80134f0:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b40      	cmp	r3, #64	; 0x40
 80134f8:	d077      	beq.n	80135ea <HAL_TIM_ConfigClockSource+0x144>
 80134fa:	2b40      	cmp	r3, #64	; 0x40
 80134fc:	d80e      	bhi.n	801351c <HAL_TIM_ConfigClockSource+0x76>
 80134fe:	2b10      	cmp	r3, #16
 8013500:	f000 808a 	beq.w	8013618 <HAL_TIM_ConfigClockSource+0x172>
 8013504:	2b10      	cmp	r3, #16
 8013506:	d802      	bhi.n	801350e <HAL_TIM_ConfigClockSource+0x68>
 8013508:	2b00      	cmp	r3, #0
 801350a:	d07e      	beq.n	801360a <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 801350c:	e099      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801350e:	2b20      	cmp	r3, #32
 8013510:	f000 8089 	beq.w	8013626 <HAL_TIM_ConfigClockSource+0x180>
 8013514:	2b30      	cmp	r3, #48	; 0x30
 8013516:	f000 808d 	beq.w	8013634 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 801351a:	e092      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801351c:	2b70      	cmp	r3, #112	; 0x70
 801351e:	d016      	beq.n	801354e <HAL_TIM_ConfigClockSource+0xa8>
 8013520:	2b70      	cmp	r3, #112	; 0x70
 8013522:	d804      	bhi.n	801352e <HAL_TIM_ConfigClockSource+0x88>
 8013524:	2b50      	cmp	r3, #80	; 0x50
 8013526:	d040      	beq.n	80135aa <HAL_TIM_ConfigClockSource+0x104>
 8013528:	2b60      	cmp	r3, #96	; 0x60
 801352a:	d04e      	beq.n	80135ca <HAL_TIM_ConfigClockSource+0x124>
    break;    
 801352c:	e089      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 801352e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013532:	d003      	beq.n	801353c <HAL_TIM_ConfigClockSource+0x96>
 8013534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013538:	d024      	beq.n	8013584 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 801353a:	e082      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	6812      	ldr	r2, [r2, #0]
 8013544:	6892      	ldr	r2, [r2, #8]
 8013546:	f022 0207 	bic.w	r2, r2, #7
 801354a:	609a      	str	r2, [r3, #8]
    break;
 801354c:	e079      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6818      	ldr	r0, [r3, #0]
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	6899      	ldr	r1, [r3, #8]
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	685a      	ldr	r2, [r3, #4]
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	f000 f9d6 	bl	801390e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	689b      	ldr	r3, [r3, #8]
 8013568:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8013570:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013578:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	609a      	str	r2, [r3, #8]
    break;
 8013582:	e05e      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6818      	ldr	r0, [r3, #0]
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	6899      	ldr	r1, [r3, #8]
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	685a      	ldr	r2, [r3, #4]
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	f000 f9bb 	bl	801390e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	687a      	ldr	r2, [r7, #4]
 801359e:	6812      	ldr	r2, [r2, #0]
 80135a0:	6892      	ldr	r2, [r2, #8]
 80135a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80135a6:	609a      	str	r2, [r3, #8]
    break;
 80135a8:	e04b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6818      	ldr	r0, [r3, #0]
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	6859      	ldr	r1, [r3, #4]
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	68db      	ldr	r3, [r3, #12]
 80135b6:	461a      	mov	r2, r3
 80135b8:	f000 f922 	bl	8013800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2150      	movs	r1, #80	; 0x50
 80135c2:	4618      	mov	r0, r3
 80135c4:	f000 f983 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 80135c8:	e03b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6818      	ldr	r0, [r3, #0]
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	6859      	ldr	r1, [r3, #4]
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	68db      	ldr	r3, [r3, #12]
 80135d6:	461a      	mov	r2, r3
 80135d8:	f000 f945 	bl	8013866 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2160      	movs	r1, #96	; 0x60
 80135e2:	4618      	mov	r0, r3
 80135e4:	f000 f973 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 80135e8:	e02b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6818      	ldr	r0, [r3, #0]
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	6859      	ldr	r1, [r3, #4]
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	68db      	ldr	r3, [r3, #12]
 80135f6:	461a      	mov	r2, r3
 80135f8:	f000 f902 	bl	8013800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2140      	movs	r1, #64	; 0x40
 8013602:	4618      	mov	r0, r3
 8013604:	f000 f963 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013608:	e01b      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	2100      	movs	r1, #0
 8013610:	4618      	mov	r0, r3
 8013612:	f000 f95c 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013616:	e014      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	2110      	movs	r1, #16
 801361e:	4618      	mov	r0, r3
 8013620:	f000 f955 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013624:	e00d      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2120      	movs	r1, #32
 801362c:	4618      	mov	r0, r3
 801362e:	f000 f94e 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013632:	e006      	b.n	8013642 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	2130      	movs	r1, #48	; 0x30
 801363a:	4618      	mov	r0, r3
 801363c:	f000 f947 	bl	80138ce <TIM_ITRx_SetConfig>
    break;
 8013640:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2201      	movs	r2, #1
 8013646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2200      	movs	r2, #0
 801364e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8013652:	2300      	movs	r3, #0
}
 8013654:	4618      	mov	r0, r3
 8013656:	3710      	adds	r7, #16
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801365c:	b480      	push	{r7}
 801365e:	b083      	sub	sp, #12
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013664:	bf00      	nop
 8013666:	370c      	adds	r7, #12
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr

08013670 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013670:	b480      	push	{r7}
 8013672:	b083      	sub	sp, #12
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013678:	bf00      	nop
 801367a:	370c      	adds	r7, #12
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr

08013684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013684:	b480      	push	{r7}
 8013686:	b083      	sub	sp, #12
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801368c:	bf00      	nop
 801368e:	370c      	adds	r7, #12
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr

08013698 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013698:	b480      	push	{r7}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80136a0:	bf00      	nop
 80136a2:	370c      	adds	r7, #12
 80136a4:	46bd      	mov	sp, r7
 80136a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136aa:	4770      	bx	lr

080136ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b085      	sub	sp, #20
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80136b6:	2300      	movs	r3, #0
 80136b8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	4a44      	ldr	r2, [pc, #272]	; (80137d4 <TIM_Base_SetConfig+0x128>)
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d013      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80136ce:	d00f      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	4a41      	ldr	r2, [pc, #260]	; (80137d8 <TIM_Base_SetConfig+0x12c>)
 80136d4:	4293      	cmp	r3, r2
 80136d6:	d00b      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	4a40      	ldr	r2, [pc, #256]	; (80137dc <TIM_Base_SetConfig+0x130>)
 80136dc:	4293      	cmp	r3, r2
 80136de:	d007      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	4a3f      	ldr	r2, [pc, #252]	; (80137e0 <TIM_Base_SetConfig+0x134>)
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d003      	beq.n	80136f0 <TIM_Base_SetConfig+0x44>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	4a3e      	ldr	r2, [pc, #248]	; (80137e4 <TIM_Base_SetConfig+0x138>)
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d101      	bne.n	80136f4 <TIM_Base_SetConfig+0x48>
 80136f0:	2301      	movs	r3, #1
 80136f2:	e000      	b.n	80136f6 <TIM_Base_SetConfig+0x4a>
 80136f4:	2300      	movs	r3, #0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d008      	beq.n	801370c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	68fa      	ldr	r2, [r7, #12]
 8013708:	4313      	orrs	r3, r2
 801370a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	4a31      	ldr	r2, [pc, #196]	; (80137d4 <TIM_Base_SetConfig+0x128>)
 8013710:	4293      	cmp	r3, r2
 8013712:	d02b      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801371a:	d027      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	4a2e      	ldr	r2, [pc, #184]	; (80137d8 <TIM_Base_SetConfig+0x12c>)
 8013720:	4293      	cmp	r3, r2
 8013722:	d023      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	4a2d      	ldr	r2, [pc, #180]	; (80137dc <TIM_Base_SetConfig+0x130>)
 8013728:	4293      	cmp	r3, r2
 801372a:	d01f      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	4a2c      	ldr	r2, [pc, #176]	; (80137e0 <TIM_Base_SetConfig+0x134>)
 8013730:	4293      	cmp	r3, r2
 8013732:	d01b      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	4a2b      	ldr	r2, [pc, #172]	; (80137e4 <TIM_Base_SetConfig+0x138>)
 8013738:	4293      	cmp	r3, r2
 801373a:	d017      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	4a2a      	ldr	r2, [pc, #168]	; (80137e8 <TIM_Base_SetConfig+0x13c>)
 8013740:	4293      	cmp	r3, r2
 8013742:	d013      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	4a29      	ldr	r2, [pc, #164]	; (80137ec <TIM_Base_SetConfig+0x140>)
 8013748:	4293      	cmp	r3, r2
 801374a:	d00f      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	4a28      	ldr	r2, [pc, #160]	; (80137f0 <TIM_Base_SetConfig+0x144>)
 8013750:	4293      	cmp	r3, r2
 8013752:	d00b      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	4a27      	ldr	r2, [pc, #156]	; (80137f4 <TIM_Base_SetConfig+0x148>)
 8013758:	4293      	cmp	r3, r2
 801375a:	d007      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	4a26      	ldr	r2, [pc, #152]	; (80137f8 <TIM_Base_SetConfig+0x14c>)
 8013760:	4293      	cmp	r3, r2
 8013762:	d003      	beq.n	801376c <TIM_Base_SetConfig+0xc0>
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	4a25      	ldr	r2, [pc, #148]	; (80137fc <TIM_Base_SetConfig+0x150>)
 8013768:	4293      	cmp	r3, r2
 801376a:	d101      	bne.n	8013770 <TIM_Base_SetConfig+0xc4>
 801376c:	2301      	movs	r3, #1
 801376e:	e000      	b.n	8013772 <TIM_Base_SetConfig+0xc6>
 8013770:	2300      	movs	r3, #0
 8013772:	2b00      	cmp	r3, #0
 8013774:	d008      	beq.n	8013788 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801377c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	68db      	ldr	r3, [r3, #12]
 8013782:	68fa      	ldr	r2, [r7, #12]
 8013784:	4313      	orrs	r3, r2
 8013786:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	689a      	ldr	r2, [r3, #8]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4a0c      	ldr	r2, [pc, #48]	; (80137d4 <TIM_Base_SetConfig+0x128>)
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d003      	beq.n	80137ae <TIM_Base_SetConfig+0x102>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4a0e      	ldr	r2, [pc, #56]	; (80137e4 <TIM_Base_SetConfig+0x138>)
 80137aa:	4293      	cmp	r3, r2
 80137ac:	d101      	bne.n	80137b2 <TIM_Base_SetConfig+0x106>
 80137ae:	2301      	movs	r3, #1
 80137b0:	e000      	b.n	80137b4 <TIM_Base_SetConfig+0x108>
 80137b2:	2300      	movs	r3, #0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d003      	beq.n	80137c0 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	691a      	ldr	r2, [r3, #16]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2201      	movs	r2, #1
 80137c4:	615a      	str	r2, [r3, #20]
}
 80137c6:	bf00      	nop
 80137c8:	3714      	adds	r7, #20
 80137ca:	46bd      	mov	sp, r7
 80137cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d0:	4770      	bx	lr
 80137d2:	bf00      	nop
 80137d4:	40010000 	.word	0x40010000
 80137d8:	40000400 	.word	0x40000400
 80137dc:	40000800 	.word	0x40000800
 80137e0:	40000c00 	.word	0x40000c00
 80137e4:	40010400 	.word	0x40010400
 80137e8:	40014000 	.word	0x40014000
 80137ec:	40014400 	.word	0x40014400
 80137f0:	40014800 	.word	0x40014800
 80137f4:	40001800 	.word	0x40001800
 80137f8:	40001c00 	.word	0x40001c00
 80137fc:	40002000 	.word	0x40002000

08013800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013800:	b480      	push	{r7}
 8013802:	b087      	sub	sp, #28
 8013804:	af00      	add	r7, sp, #0
 8013806:	60f8      	str	r0, [r7, #12]
 8013808:	60b9      	str	r1, [r7, #8]
 801380a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 801380c:	2300      	movs	r3, #0
 801380e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8013810:	2300      	movs	r3, #0
 8013812:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	6a1b      	ldr	r3, [r3, #32]
 8013818:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	6a1b      	ldr	r3, [r3, #32]
 801381e:	f023 0201 	bic.w	r2, r3, #1
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	699b      	ldr	r3, [r3, #24]
 801382a:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013832:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	011b      	lsls	r3, r3, #4
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	4313      	orrs	r3, r2
 801383c:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	f023 030a 	bic.w	r3, r3, #10
 8013844:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8013846:	693a      	ldr	r2, [r7, #16]
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	4313      	orrs	r3, r2
 801384c:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	697a      	ldr	r2, [r7, #20]
 8013852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	693a      	ldr	r2, [r7, #16]
 8013858:	621a      	str	r2, [r3, #32]
}
 801385a:	bf00      	nop
 801385c:	371c      	adds	r7, #28
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr

08013866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013866:	b480      	push	{r7}
 8013868:	b087      	sub	sp, #28
 801386a:	af00      	add	r7, sp, #0
 801386c:	60f8      	str	r0, [r7, #12]
 801386e:	60b9      	str	r1, [r7, #8]
 8013870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8013872:	2300      	movs	r3, #0
 8013874:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8013876:	2300      	movs	r3, #0
 8013878:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	6a1b      	ldr	r3, [r3, #32]
 801387e:	f023 0210 	bic.w	r2, r3, #16
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	699b      	ldr	r3, [r3, #24]
 801388a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	6a1b      	ldr	r3, [r3, #32]
 8013890:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	031b      	lsls	r3, r3, #12
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	4313      	orrs	r3, r2
 80138a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80138aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	011b      	lsls	r3, r3, #4
 80138b0:	693a      	ldr	r2, [r7, #16]
 80138b2:	4313      	orrs	r3, r2
 80138b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	697a      	ldr	r2, [r7, #20]
 80138ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	693a      	ldr	r2, [r7, #16]
 80138c0:	621a      	str	r2, [r3, #32]
}
 80138c2:	bf00      	nop
 80138c4:	371c      	adds	r7, #28
 80138c6:	46bd      	mov	sp, r7
 80138c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138cc:	4770      	bx	lr

080138ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 80138ce:	b480      	push	{r7}
 80138d0:	b085      	sub	sp, #20
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
 80138d6:	460b      	mov	r3, r1
 80138d8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80138da:	2300      	movs	r3, #0
 80138dc:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	689b      	ldr	r3, [r3, #8]
 80138e2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80138ea:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80138ec:	887b      	ldrh	r3, [r7, #2]
 80138ee:	f043 0307 	orr.w	r3, r3, #7
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	461a      	mov	r2, r3
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	4313      	orrs	r3, r2
 80138fa:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	609a      	str	r2, [r3, #8]
}
 8013902:	bf00      	nop
 8013904:	3714      	adds	r7, #20
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr

0801390e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801390e:	b480      	push	{r7}
 8013910:	b087      	sub	sp, #28
 8013912:	af00      	add	r7, sp, #0
 8013914:	60f8      	str	r0, [r7, #12]
 8013916:	60b9      	str	r1, [r7, #8]
 8013918:	607a      	str	r2, [r7, #4]
 801391a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 801391c:	2300      	movs	r3, #0
 801391e:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	689b      	ldr	r3, [r3, #8]
 8013924:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801392c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	021a      	lsls	r2, r3, #8
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	431a      	orrs	r2, r3
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	4313      	orrs	r3, r2
 801393a:	697a      	ldr	r2, [r7, #20]
 801393c:	4313      	orrs	r3, r2
 801393e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	697a      	ldr	r2, [r7, #20]
 8013944:	609a      	str	r2, [r3, #8]
} 
 8013946:	bf00      	nop
 8013948:	371c      	adds	r7, #28
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr

08013952 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8013952:	b480      	push	{r7}
 8013954:	b083      	sub	sp, #12
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
 801395a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013962:	2b01      	cmp	r3, #1
 8013964:	d101      	bne.n	801396a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013966:	2302      	movs	r3, #2
 8013968:	e032      	b.n	80139d0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2201      	movs	r2, #1
 801396e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2202      	movs	r2, #2
 8013976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	6812      	ldr	r2, [r2, #0]
 8013982:	6852      	ldr	r2, [r2, #4]
 8013984:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8013988:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	687a      	ldr	r2, [r7, #4]
 8013990:	6812      	ldr	r2, [r2, #0]
 8013992:	6851      	ldr	r1, [r2, #4]
 8013994:	683a      	ldr	r2, [r7, #0]
 8013996:	6812      	ldr	r2, [r2, #0]
 8013998:	430a      	orrs	r2, r1
 801399a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	687a      	ldr	r2, [r7, #4]
 80139a2:	6812      	ldr	r2, [r2, #0]
 80139a4:	6892      	ldr	r2, [r2, #8]
 80139a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80139aa:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	6812      	ldr	r2, [r2, #0]
 80139b4:	6891      	ldr	r1, [r2, #8]
 80139b6:	683a      	ldr	r2, [r7, #0]
 80139b8:	6852      	ldr	r2, [r2, #4]
 80139ba:	430a      	orrs	r2, r1
 80139bc:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2201      	movs	r2, #1
 80139c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2200      	movs	r2, #0
 80139ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80139ce:	2300      	movs	r3, #0
} 
 80139d0:	4618      	mov	r0, r3
 80139d2:	370c      	adds	r7, #12
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr

080139dc <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80139dc:	b480      	push	{r7}
 80139de:	b083      	sub	sp, #12
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80139e4:	bf00      	nop
 80139e6:	370c      	adds	r7, #12
 80139e8:	46bd      	mov	sp, r7
 80139ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ee:	4770      	bx	lr

080139f0 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80139f0:	b480      	push	{r7}
 80139f2:	b083      	sub	sp, #12
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80139f8:	bf00      	nop
 80139fa:	370c      	adds	r7, #12
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr

08013a04 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d101      	bne.n	8013a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013a12:	2301      	movs	r3, #1
 8013a14:	e03f      	b.n	8013a96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d106      	bne.n	8013a30 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2200      	movs	r2, #0
 8013a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f012 fb28 	bl	8026080 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2224      	movs	r2, #36	; 0x24
 8013a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	6812      	ldr	r2, [r2, #0]
 8013a40:	68d2      	ldr	r2, [r2, #12]
 8013a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013a46:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f000 fbc5 	bl	80141d8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	687a      	ldr	r2, [r7, #4]
 8013a54:	6812      	ldr	r2, [r2, #0]
 8013a56:	6912      	ldr	r2, [r2, #16]
 8013a58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	6812      	ldr	r2, [r2, #0]
 8013a66:	6952      	ldr	r2, [r2, #20]
 8013a68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013a6c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	6812      	ldr	r2, [r2, #0]
 8013a76:	68d2      	ldr	r2, [r2, #12]
 8013a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013a7c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2200      	movs	r2, #0
 8013a82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2220      	movs	r2, #32
 8013a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2220      	movs	r2, #32
 8013a90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8013a94:	2300      	movs	r3, #0
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3708      	adds	r7, #8
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <HAL_UART_DeInit>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b082      	sub	sp, #8
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d101      	bne.n	8013ab0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8013aac:	2301      	movs	r3, #1
 8013aae:	e016      	b.n	8013ade <HAL_UART_DeInit+0x40>
  }
  
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2224      	movs	r2, #36	; 0x24
 8013ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f012 fbf7 	bl	80262ac <HAL_UART_MspDeInit>
  
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Lock */
  __HAL_UNLOCK(huart);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8013adc:	2300      	movs	r3, #0
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3708      	adds	r7, #8
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}

08013ae6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013ae6:	b480      	push	{r7}
 8013ae8:	b085      	sub	sp, #20
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	60f8      	str	r0, [r7, #12]
 8013aee:	60b9      	str	r1, [r7, #8]
 8013af0:	4613      	mov	r3, r2
 8013af2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013afa:	b2db      	uxtb	r3, r3
 8013afc:	2b20      	cmp	r3, #32
 8013afe:	d138      	bne.n	8013b72 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d002      	beq.n	8013b0c <HAL_UART_Receive_IT+0x26>
 8013b06:	88fb      	ldrh	r3, [r7, #6]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d101      	bne.n	8013b10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	e031      	b.n	8013b74 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b16:	2b01      	cmp	r3, #1
 8013b18:	d101      	bne.n	8013b1e <HAL_UART_Receive_IT+0x38>
 8013b1a:	2302      	movs	r3, #2
 8013b1c:	e02a      	b.n	8013b74 <HAL_UART_Receive_IT+0x8e>
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	2201      	movs	r2, #1
 8013b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	68ba      	ldr	r2, [r7, #8]
 8013b2a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	88fa      	ldrh	r2, [r7, #6]
 8013b30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	88fa      	ldrh	r2, [r7, #6]
 8013b36:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2222      	movs	r2, #34	; 0x22
 8013b42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	68fa      	ldr	r2, [r7, #12]
 8013b54:	6812      	ldr	r2, [r2, #0]
 8013b56:	6952      	ldr	r2, [r2, #20]
 8013b58:	f042 0201 	orr.w	r2, r2, #1
 8013b5c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	6812      	ldr	r2, [r2, #0]
 8013b66:	68d2      	ldr	r2, [r2, #12]
 8013b68:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8013b6c:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	e000      	b.n	8013b74 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8013b72:	2302      	movs	r3, #2
  }
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3714      	adds	r7, #20
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr

08013b80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b086      	sub	sp, #24
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013b94:	b2db      	uxtb	r3, r3
 8013b96:	2b20      	cmp	r3, #32
 8013b98:	d153      	bne.n	8013c42 <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d002      	beq.n	8013ba6 <HAL_UART_Transmit_DMA+0x26>
 8013ba0:	88fb      	ldrh	r3, [r7, #6]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d101      	bne.n	8013baa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	e04c      	b.n	8013c44 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013bb0:	2b01      	cmp	r3, #1
 8013bb2:	d101      	bne.n	8013bb8 <HAL_UART_Transmit_DMA+0x38>
 8013bb4:	2302      	movs	r3, #2
 8013bb6:	e045      	b.n	8013c44 <HAL_UART_Transmit_DMA+0xc4>
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2201      	movs	r2, #1
 8013bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8013bc0:	68ba      	ldr	r2, [r7, #8]
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	88fa      	ldrh	r2, [r7, #6]
 8013bca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	88fa      	ldrh	r2, [r7, #6]
 8013bd0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2221      	movs	r2, #33	; 0x21
 8013bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013be4:	4a19      	ldr	r2, [pc, #100]	; (8013c4c <HAL_UART_Transmit_DMA+0xcc>)
 8013be6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bec:	4a18      	ldr	r2, [pc, #96]	; (8013c50 <HAL_UART_Transmit_DMA+0xd0>)
 8013bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bf4:	4a17      	ldr	r2, [pc, #92]	; (8013c54 <HAL_UART_Transmit_DMA+0xd4>)
 8013bf6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 8013c00:	f107 0308 	add.w	r3, r7, #8
 8013c04:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	6819      	ldr	r1, [r3, #0]
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	3304      	adds	r3, #4
 8013c14:	461a      	mov	r2, r3
 8013c16:	88fb      	ldrh	r3, [r7, #6]
 8013c18:	f7fc fe0e 	bl	8010838 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013c24:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	2200      	movs	r2, #0
 8013c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	68fa      	ldr	r2, [r7, #12]
 8013c34:	6812      	ldr	r2, [r2, #0]
 8013c36:	6952      	ldr	r2, [r2, #20]
 8013c38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013c3c:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	e000      	b.n	8013c44 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8013c42:	2302      	movs	r3, #2
  }
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	3718      	adds	r7, #24
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	08013e79 	.word	0x08013e79
 8013c50:	08013ecb 	.word	0x08013ecb
 8013c54:	08013ee7 	.word	0x08013ee7

08013c58 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b088      	sub	sp, #32
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	695b      	ldr	r3, [r3, #20]
 8013c76:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	f003 030f 	and.w	r3, r3, #15
 8013c86:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d10d      	bne.n	8013caa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	f003 0320 	and.w	r3, r3, #32
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d008      	beq.n	8013caa <HAL_UART_IRQHandler+0x52>
 8013c98:	69bb      	ldr	r3, [r7, #24]
 8013c9a:	f003 0320 	and.w	r3, r3, #32
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d003      	beq.n	8013caa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fa1e 	bl	80140e4 <UART_Receive_IT>
      return;
 8013ca8:	e0cc      	b.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f000 80ab 	beq.w	8013e08 <HAL_UART_IRQHandler+0x1b0>
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	f003 0301 	and.w	r3, r3, #1
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d105      	bne.n	8013cc8 <HAL_UART_IRQHandler+0x70>
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	f000 80a0 	beq.w	8013e08 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8013cc8:	69fb      	ldr	r3, [r7, #28]
 8013cca:	f003 0301 	and.w	r3, r3, #1
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d00a      	beq.n	8013ce8 <HAL_UART_IRQHandler+0x90>
 8013cd2:	69bb      	ldr	r3, [r7, #24]
 8013cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d005      	beq.n	8013ce8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ce0:	f043 0201 	orr.w	r2, r3, #1
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	f003 0304 	and.w	r3, r3, #4
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d00a      	beq.n	8013d08 <HAL_UART_IRQHandler+0xb0>
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	f003 0301 	and.w	r3, r3, #1
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d005      	beq.n	8013d08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d00:	f043 0202 	orr.w	r2, r3, #2
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	f003 0302 	and.w	r3, r3, #2
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d00a      	beq.n	8013d28 <HAL_UART_IRQHandler+0xd0>
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	f003 0301 	and.w	r3, r3, #1
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d005      	beq.n	8013d28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d20:	f043 0204 	orr.w	r2, r3, #4
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013d28:	69fb      	ldr	r3, [r7, #28]
 8013d2a:	f003 0308 	and.w	r3, r3, #8
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d00a      	beq.n	8013d48 <HAL_UART_IRQHandler+0xf0>
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	f003 0301 	and.w	r3, r3, #1
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d005      	beq.n	8013d48 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d40:	f043 0208 	orr.w	r2, r3, #8
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d078      	beq.n	8013e42 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	f003 0320 	and.w	r3, r3, #32
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d007      	beq.n	8013d6a <HAL_UART_IRQHandler+0x112>
 8013d5a:	69bb      	ldr	r3, [r7, #24]
 8013d5c:	f003 0320 	and.w	r3, r3, #32
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d002      	beq.n	8013d6a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f000 f9bd 	bl	80140e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	695b      	ldr	r3, [r3, #20]
 8013d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	bf14      	ite	ne
 8013d78:	2301      	movne	r3, #1
 8013d7a:	2300      	moveq	r3, #0
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d84:	f003 0308 	and.w	r3, r3, #8
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d102      	bne.n	8013d92 <HAL_UART_IRQHandler+0x13a>
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d031      	beq.n	8013df6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013d92:	6878      	ldr	r0, [r7, #4]
 8013d94:	f000 f907 	bl	8013fa6 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	695b      	ldr	r3, [r3, #20]
 8013d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d023      	beq.n	8013dee <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	6812      	ldr	r2, [r2, #0]
 8013dae:	6952      	ldr	r2, [r2, #20]
 8013db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013db4:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d013      	beq.n	8013de6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dc2:	4a22      	ldr	r2, [pc, #136]	; (8013e4c <HAL_UART_IRQHandler+0x1f4>)
 8013dc4:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fc fd94 	bl	80108f8 <HAL_DMA_Abort_IT>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d016      	beq.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013de0:	4610      	mov	r0, r2
 8013de2:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013de4:	e00e      	b.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f000 f83c 	bl	8013e64 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013dec:	e00a      	b.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f000 f838 	bl	8013e64 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013df4:	e006      	b.n	8013e04 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f000 f834 	bl	8013e64 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8013e02:	e01e      	b.n	8013e42 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e04:	bf00      	nop
    return;
 8013e06:	e01c      	b.n	8013e42 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8013e08:	69fb      	ldr	r3, [r7, #28]
 8013e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d008      	beq.n	8013e24 <HAL_UART_IRQHandler+0x1cc>
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d003      	beq.n	8013e24 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f000 f8f4 	bl	801400a <UART_Transmit_IT>
    return;
 8013e22:	e00f      	b.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d00a      	beq.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d005      	beq.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f000 f93b 	bl	80140b4 <UART_EndTransmit_IT>
    return;
 8013e3e:	bf00      	nop
 8013e40:	e000      	b.n	8013e44 <HAL_UART_IRQHandler+0x1ec>
    return;
 8013e42:	bf00      	nop
  }
}
 8013e44:	3720      	adds	r7, #32
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	08013fe3 	.word	0x08013fe3

08013e50 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013e50:	b480      	push	{r7}
 8013e52:	b083      	sub	sp, #12
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8013e58:	bf00      	nop
 8013e5a:	370c      	adds	r7, #12
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e62:	4770      	bx	lr

08013e64 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013e64:	b480      	push	{r7}
 8013e66:	b083      	sub	sp, #12
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8013e6c:	bf00      	nop
 8013e6e:	370c      	adds	r7, #12
 8013e70:	46bd      	mov	sp, r7
 8013e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e76:	4770      	bx	lr

08013e78 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b084      	sub	sp, #16
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e84:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d113      	bne.n	8013ebc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	2200      	movs	r2, #0
 8013e98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	68fa      	ldr	r2, [r7, #12]
 8013ea0:	6812      	ldr	r2, [r2, #0]
 8013ea2:	6952      	ldr	r2, [r2, #20]
 8013ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013ea8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	68fa      	ldr	r2, [r7, #12]
 8013eb0:	6812      	ldr	r2, [r2, #0]
 8013eb2:	68d2      	ldr	r2, [r2, #12]
 8013eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013eb8:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 8013eba:	e002      	b.n	8013ec2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8013ebc:	68f8      	ldr	r0, [r7, #12]
 8013ebe:	f011 f81f 	bl	8024f00 <HAL_UART_TxCpltCallback>
}
 8013ec2:	bf00      	nop
 8013ec4:	3710      	adds	r7, #16
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}

08013eca <UART_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013eca:	b580      	push	{r7, lr}
 8013ecc:	b084      	sub	sp, #16
 8013ece:	af00      	add	r7, sp, #0
 8013ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ed6:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8013ed8:	68f8      	ldr	r0, [r7, #12]
 8013eda:	f7ff ffb9 	bl	8013e50 <HAL_UART_TxHalfCpltCallback>
}
 8013ede:	bf00      	nop
 8013ee0:	3710      	adds	r7, #16
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}

08013ee6 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013ee6:	b580      	push	{r7, lr}
 8013ee8:	b084      	sub	sp, #16
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ef6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	695b      	ldr	r3, [r3, #20]
 8013efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	bf14      	ite	ne
 8013f06:	2301      	movne	r3, #1
 8013f08:	2300      	moveq	r3, #0
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	2b21      	cmp	r3, #33	; 0x21
 8013f18:	d108      	bne.n	8013f2c <UART_DMAError+0x46>
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d005      	beq.n	8013f2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	2200      	movs	r2, #0
 8013f24:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8013f26:	68b8      	ldr	r0, [r7, #8]
 8013f28:	f000 f827 	bl	8013f7a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	695b      	ldr	r3, [r3, #20]
 8013f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	bf14      	ite	ne
 8013f3a:	2301      	movne	r3, #1
 8013f3c:	2300      	moveq	r3, #0
 8013f3e:	b2db      	uxtb	r3, r3
 8013f40:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013f48:	b2db      	uxtb	r3, r3
 8013f4a:	2b22      	cmp	r3, #34	; 0x22
 8013f4c:	d108      	bne.n	8013f60 <UART_DMAError+0x7a>
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d005      	beq.n	8013f60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	2200      	movs	r2, #0
 8013f58:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8013f5a:	68b8      	ldr	r0, [r7, #8]
 8013f5c:	f000 f823 	bl	8013fa6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f64:	f043 0210 	orr.w	r2, r3, #16
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8013f6c:	68b8      	ldr	r0, [r7, #8]
 8013f6e:	f7ff ff79 	bl	8013e64 <HAL_UART_ErrorCallback>
}
 8013f72:	bf00      	nop
 8013f74:	3710      	adds	r7, #16
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013f7a:	b480      	push	{r7}
 8013f7c:	b083      	sub	sp, #12
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	687a      	ldr	r2, [r7, #4]
 8013f88:	6812      	ldr	r2, [r2, #0]
 8013f8a:	68d2      	ldr	r2, [r2, #12]
 8013f8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8013f90:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2220      	movs	r2, #32
 8013f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8013f9a:	bf00      	nop
 8013f9c:	370c      	adds	r7, #12
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa4:	4770      	bx	lr

08013fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013fa6:	b480      	push	{r7}
 8013fa8:	b083      	sub	sp, #12
 8013faa:	af00      	add	r7, sp, #0
 8013fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	687a      	ldr	r2, [r7, #4]
 8013fb4:	6812      	ldr	r2, [r2, #0]
 8013fb6:	68d2      	ldr	r2, [r2, #12]
 8013fb8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8013fbc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	687a      	ldr	r2, [r7, #4]
 8013fc4:	6812      	ldr	r2, [r2, #0]
 8013fc6:	6952      	ldr	r2, [r2, #20]
 8013fc8:	f022 0201 	bic.w	r2, r2, #1
 8013fcc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2220      	movs	r2, #32
 8013fd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8013fd6:	bf00      	nop
 8013fd8:	370c      	adds	r7, #12
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe0:	4770      	bx	lr

08013fe2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013fe2:	b580      	push	{r7, lr}
 8013fe4:	b084      	sub	sp, #16
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8013ffc:	68f8      	ldr	r0, [r7, #12]
 8013ffe:	f7ff ff31 	bl	8013e64 <HAL_UART_ErrorCallback>
}
 8014002:	bf00      	nop
 8014004:	3710      	adds	r7, #16
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}

0801400a <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801400a:	b480      	push	{r7}
 801400c:	b085      	sub	sp, #20
 801400e:	af00      	add	r7, sp, #0
 8014010:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014018:	b2db      	uxtb	r3, r3
 801401a:	2b21      	cmp	r3, #33	; 0x21
 801401c:	d143      	bne.n	80140a6 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	689b      	ldr	r3, [r3, #8]
 8014022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014026:	d119      	bne.n	801405c <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6a1b      	ldr	r3, [r3, #32]
 801402c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	68fa      	ldr	r2, [r7, #12]
 8014034:	8812      	ldrh	r2, [r2, #0]
 8014036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801403a:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	691b      	ldr	r3, [r3, #16]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d105      	bne.n	8014050 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6a1b      	ldr	r3, [r3, #32]
 8014048:	1c9a      	adds	r2, r3, #2
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	621a      	str	r2, [r3, #32]
 801404e:	e00e      	b.n	801406e <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6a1b      	ldr	r3, [r3, #32]
 8014054:	1c5a      	adds	r2, r3, #1
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	621a      	str	r2, [r3, #32]
 801405a:	e008      	b.n	801406e <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	6a1b      	ldr	r3, [r3, #32]
 8014064:	1c58      	adds	r0, r3, #1
 8014066:	6879      	ldr	r1, [r7, #4]
 8014068:	6208      	str	r0, [r1, #32]
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014072:	b29b      	uxth	r3, r3
 8014074:	3b01      	subs	r3, #1
 8014076:	b29b      	uxth	r3, r3
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	4619      	mov	r1, r3
 801407c:	84d1      	strh	r1, [r2, #38]	; 0x26
 801407e:	2b00      	cmp	r3, #0
 8014080:	d10f      	bne.n	80140a2 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	687a      	ldr	r2, [r7, #4]
 8014088:	6812      	ldr	r2, [r2, #0]
 801408a:	68d2      	ldr	r2, [r2, #12]
 801408c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014090:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	687a      	ldr	r2, [r7, #4]
 8014098:	6812      	ldr	r2, [r2, #0]
 801409a:	68d2      	ldr	r2, [r2, #12]
 801409c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80140a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80140a2:	2300      	movs	r3, #0
 80140a4:	e000      	b.n	80140a8 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80140a6:	2302      	movs	r3, #2
  }
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	3714      	adds	r7, #20
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr

080140b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	6812      	ldr	r2, [r2, #0]
 80140c4:	68d2      	ldr	r2, [r2, #12]
 80140c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80140ca:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2220      	movs	r2, #32
 80140d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f010 ff13 	bl	8024f00 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80140da:	2300      	movs	r3, #0
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3708      	adds	r7, #8
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b084      	sub	sp, #16
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80140f2:	b2db      	uxtb	r3, r3
 80140f4:	2b22      	cmp	r3, #34	; 0x22
 80140f6:	d169      	bne.n	80141cc <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	689b      	ldr	r3, [r3, #8]
 80140fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014100:	d123      	bne.n	801414a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014106:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	691b      	ldr	r3, [r3, #16]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d10e      	bne.n	801412e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	685b      	ldr	r3, [r3, #4]
 8014116:	b29b      	uxth	r3, r3
 8014118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801411c:	b29a      	uxth	r2, r3
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014126:	1c9a      	adds	r2, r3, #2
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	629a      	str	r2, [r3, #40]	; 0x28
 801412c:	e029      	b.n	8014182 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	b29b      	uxth	r3, r3
 8014136:	b2db      	uxtb	r3, r3
 8014138:	b29a      	uxth	r2, r3
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014142:	1c5a      	adds	r2, r3, #1
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	629a      	str	r2, [r3, #40]	; 0x28
 8014148:	e01b      	b.n	8014182 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	691b      	ldr	r3, [r3, #16]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d10a      	bne.n	8014168 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014156:	1c59      	adds	r1, r3, #1
 8014158:	687a      	ldr	r2, [r7, #4]
 801415a:	6291      	str	r1, [r2, #40]	; 0x28
 801415c:	687a      	ldr	r2, [r7, #4]
 801415e:	6812      	ldr	r2, [r2, #0]
 8014160:	6852      	ldr	r2, [r2, #4]
 8014162:	b2d2      	uxtb	r2, r2
 8014164:	701a      	strb	r2, [r3, #0]
 8014166:	e00c      	b.n	8014182 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801416c:	1c59      	adds	r1, r3, #1
 801416e:	687a      	ldr	r2, [r7, #4]
 8014170:	6291      	str	r1, [r2, #40]	; 0x28
 8014172:	687a      	ldr	r2, [r7, #4]
 8014174:	6812      	ldr	r2, [r2, #0]
 8014176:	6852      	ldr	r2, [r2, #4]
 8014178:	b2d2      	uxtb	r2, r2
 801417a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801417e:	b2d2      	uxtb	r2, r2
 8014180:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014186:	b29b      	uxth	r3, r3
 8014188:	3b01      	subs	r3, #1
 801418a:	b29b      	uxth	r3, r3
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	4619      	mov	r1, r3
 8014190:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8014192:	2b00      	cmp	r3, #0
 8014194:	d118      	bne.n	80141c8 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	6812      	ldr	r2, [r2, #0]
 801419e:	68d2      	ldr	r2, [r2, #12]
 80141a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80141a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	6812      	ldr	r2, [r2, #0]
 80141ae:	6952      	ldr	r2, [r2, #20]
 80141b0:	f022 0201 	bic.w	r2, r2, #1
 80141b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2220      	movs	r2, #32
 80141ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f010 fe78 	bl	8024eb4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80141c4:	2300      	movs	r3, #0
 80141c6:	e002      	b.n	80141ce <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 80141c8:	2300      	movs	r3, #0
 80141ca:	e000      	b.n	80141ce <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 80141cc:	2302      	movs	r3, #2
  }
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	3710      	adds	r7, #16
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
	...

080141d8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80141d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141da:	b085      	sub	sp, #20
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80141e0:	2300      	movs	r3, #0
 80141e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	691b      	ldr	r3, [r3, #16]
 80141ea:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80141f2:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	68db      	ldr	r3, [r3, #12]
 80141f8:	68fa      	ldr	r2, [r7, #12]
 80141fa:	4313      	orrs	r3, r2
 80141fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8014214:	f023 030c 	bic.w	r3, r3, #12
 8014218:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	689a      	ldr	r2, [r3, #8]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	691b      	ldr	r3, [r3, #16]
 8014222:	431a      	orrs	r2, r3
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	695b      	ldr	r3, [r3, #20]
 8014228:	431a      	orrs	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	69db      	ldr	r3, [r3, #28]
 801422e:	4313      	orrs	r3, r2
 8014230:	68fa      	ldr	r2, [r7, #12]
 8014232:	4313      	orrs	r3, r2
 8014234:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	68fa      	ldr	r2, [r7, #12]
 801423c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	695b      	ldr	r3, [r3, #20]
 8014244:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801424c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	699b      	ldr	r3, [r3, #24]
 8014252:	68fa      	ldr	r2, [r7, #12]
 8014254:	4313      	orrs	r3, r2
 8014256:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	68fa      	ldr	r2, [r7, #12]
 801425e:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	69db      	ldr	r3, [r3, #28]
 8014264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014268:	f040 80e4 	bne.w	8014434 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	4aab      	ldr	r2, [pc, #684]	; (8014520 <UART_SetConfig+0x348>)
 8014272:	4293      	cmp	r3, r2
 8014274:	d004      	beq.n	8014280 <UART_SetConfig+0xa8>
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	4aaa      	ldr	r2, [pc, #680]	; (8014524 <UART_SetConfig+0x34c>)
 801427c:	4293      	cmp	r3, r2
 801427e:	d16c      	bne.n	801435a <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681c      	ldr	r4, [r3, #0]
 8014284:	f7fe ff50 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014288:	4602      	mov	r2, r0
 801428a:	4613      	mov	r3, r2
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	4413      	add	r3, r2
 8014290:	009a      	lsls	r2, r3, #2
 8014292:	441a      	add	r2, r3
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	005b      	lsls	r3, r3, #1
 801429a:	fbb2 f3f3 	udiv	r3, r2, r3
 801429e:	4aa2      	ldr	r2, [pc, #648]	; (8014528 <UART_SetConfig+0x350>)
 80142a0:	fba2 2303 	umull	r2, r3, r2, r3
 80142a4:	095b      	lsrs	r3, r3, #5
 80142a6:	011d      	lsls	r5, r3, #4
 80142a8:	f7fe ff3e 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80142ac:	4602      	mov	r2, r0
 80142ae:	4613      	mov	r3, r2
 80142b0:	009b      	lsls	r3, r3, #2
 80142b2:	4413      	add	r3, r2
 80142b4:	009a      	lsls	r2, r3, #2
 80142b6:	441a      	add	r2, r3
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	005b      	lsls	r3, r3, #1
 80142be:	fbb2 f6f3 	udiv	r6, r2, r3
 80142c2:	f7fe ff31 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80142c6:	4602      	mov	r2, r0
 80142c8:	4613      	mov	r3, r2
 80142ca:	009b      	lsls	r3, r3, #2
 80142cc:	4413      	add	r3, r2
 80142ce:	009a      	lsls	r2, r3, #2
 80142d0:	441a      	add	r2, r3
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	005b      	lsls	r3, r3, #1
 80142d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80142dc:	4a92      	ldr	r2, [pc, #584]	; (8014528 <UART_SetConfig+0x350>)
 80142de:	fba2 2303 	umull	r2, r3, r2, r3
 80142e2:	095b      	lsrs	r3, r3, #5
 80142e4:	2264      	movs	r2, #100	; 0x64
 80142e6:	fb02 f303 	mul.w	r3, r2, r3
 80142ea:	1af3      	subs	r3, r6, r3
 80142ec:	00db      	lsls	r3, r3, #3
 80142ee:	3332      	adds	r3, #50	; 0x32
 80142f0:	4a8d      	ldr	r2, [pc, #564]	; (8014528 <UART_SetConfig+0x350>)
 80142f2:	fba2 2303 	umull	r2, r3, r2, r3
 80142f6:	095b      	lsrs	r3, r3, #5
 80142f8:	005b      	lsls	r3, r3, #1
 80142fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80142fe:	441d      	add	r5, r3
 8014300:	f7fe ff12 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014304:	4602      	mov	r2, r0
 8014306:	4613      	mov	r3, r2
 8014308:	009b      	lsls	r3, r3, #2
 801430a:	4413      	add	r3, r2
 801430c:	009a      	lsls	r2, r3, #2
 801430e:	441a      	add	r2, r3
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	685b      	ldr	r3, [r3, #4]
 8014314:	005b      	lsls	r3, r3, #1
 8014316:	fbb2 f6f3 	udiv	r6, r2, r3
 801431a:	f7fe ff05 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 801431e:	4602      	mov	r2, r0
 8014320:	4613      	mov	r3, r2
 8014322:	009b      	lsls	r3, r3, #2
 8014324:	4413      	add	r3, r2
 8014326:	009a      	lsls	r2, r3, #2
 8014328:	441a      	add	r2, r3
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	005b      	lsls	r3, r3, #1
 8014330:	fbb2 f3f3 	udiv	r3, r2, r3
 8014334:	4a7c      	ldr	r2, [pc, #496]	; (8014528 <UART_SetConfig+0x350>)
 8014336:	fba2 2303 	umull	r2, r3, r2, r3
 801433a:	095b      	lsrs	r3, r3, #5
 801433c:	2264      	movs	r2, #100	; 0x64
 801433e:	fb02 f303 	mul.w	r3, r2, r3
 8014342:	1af3      	subs	r3, r6, r3
 8014344:	00db      	lsls	r3, r3, #3
 8014346:	3332      	adds	r3, #50	; 0x32
 8014348:	4a77      	ldr	r2, [pc, #476]	; (8014528 <UART_SetConfig+0x350>)
 801434a:	fba2 2303 	umull	r2, r3, r2, r3
 801434e:	095b      	lsrs	r3, r3, #5
 8014350:	f003 0307 	and.w	r3, r3, #7
 8014354:	442b      	add	r3, r5
 8014356:	60a3      	str	r3, [r4, #8]
 8014358:	e154      	b.n	8014604 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681c      	ldr	r4, [r3, #0]
 801435e:	f7fe fecf 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014362:	4602      	mov	r2, r0
 8014364:	4613      	mov	r3, r2
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	4413      	add	r3, r2
 801436a:	009a      	lsls	r2, r3, #2
 801436c:	441a      	add	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	005b      	lsls	r3, r3, #1
 8014374:	fbb2 f3f3 	udiv	r3, r2, r3
 8014378:	4a6b      	ldr	r2, [pc, #428]	; (8014528 <UART_SetConfig+0x350>)
 801437a:	fba2 2303 	umull	r2, r3, r2, r3
 801437e:	095b      	lsrs	r3, r3, #5
 8014380:	011d      	lsls	r5, r3, #4
 8014382:	f7fe febd 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014386:	4602      	mov	r2, r0
 8014388:	4613      	mov	r3, r2
 801438a:	009b      	lsls	r3, r3, #2
 801438c:	4413      	add	r3, r2
 801438e:	009a      	lsls	r2, r3, #2
 8014390:	441a      	add	r2, r3
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	005b      	lsls	r3, r3, #1
 8014398:	fbb2 f6f3 	udiv	r6, r2, r3
 801439c:	f7fe feb0 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80143a0:	4602      	mov	r2, r0
 80143a2:	4613      	mov	r3, r2
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	4413      	add	r3, r2
 80143a8:	009a      	lsls	r2, r3, #2
 80143aa:	441a      	add	r2, r3
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80143b6:	4a5c      	ldr	r2, [pc, #368]	; (8014528 <UART_SetConfig+0x350>)
 80143b8:	fba2 2303 	umull	r2, r3, r2, r3
 80143bc:	095b      	lsrs	r3, r3, #5
 80143be:	2264      	movs	r2, #100	; 0x64
 80143c0:	fb02 f303 	mul.w	r3, r2, r3
 80143c4:	1af3      	subs	r3, r6, r3
 80143c6:	00db      	lsls	r3, r3, #3
 80143c8:	3332      	adds	r3, #50	; 0x32
 80143ca:	4a57      	ldr	r2, [pc, #348]	; (8014528 <UART_SetConfig+0x350>)
 80143cc:	fba2 2303 	umull	r2, r3, r2, r3
 80143d0:	095b      	lsrs	r3, r3, #5
 80143d2:	005b      	lsls	r3, r3, #1
 80143d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80143d8:	441d      	add	r5, r3
 80143da:	f7fe fe91 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80143de:	4602      	mov	r2, r0
 80143e0:	4613      	mov	r3, r2
 80143e2:	009b      	lsls	r3, r3, #2
 80143e4:	4413      	add	r3, r2
 80143e6:	009a      	lsls	r2, r3, #2
 80143e8:	441a      	add	r2, r3
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	685b      	ldr	r3, [r3, #4]
 80143ee:	005b      	lsls	r3, r3, #1
 80143f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80143f4:	f7fe fe84 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80143f8:	4602      	mov	r2, r0
 80143fa:	4613      	mov	r3, r2
 80143fc:	009b      	lsls	r3, r3, #2
 80143fe:	4413      	add	r3, r2
 8014400:	009a      	lsls	r2, r3, #2
 8014402:	441a      	add	r2, r3
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	685b      	ldr	r3, [r3, #4]
 8014408:	005b      	lsls	r3, r3, #1
 801440a:	fbb2 f3f3 	udiv	r3, r2, r3
 801440e:	4a46      	ldr	r2, [pc, #280]	; (8014528 <UART_SetConfig+0x350>)
 8014410:	fba2 2303 	umull	r2, r3, r2, r3
 8014414:	095b      	lsrs	r3, r3, #5
 8014416:	2264      	movs	r2, #100	; 0x64
 8014418:	fb02 f303 	mul.w	r3, r2, r3
 801441c:	1af3      	subs	r3, r6, r3
 801441e:	00db      	lsls	r3, r3, #3
 8014420:	3332      	adds	r3, #50	; 0x32
 8014422:	4a41      	ldr	r2, [pc, #260]	; (8014528 <UART_SetConfig+0x350>)
 8014424:	fba2 2303 	umull	r2, r3, r2, r3
 8014428:	095b      	lsrs	r3, r3, #5
 801442a:	f003 0307 	and.w	r3, r3, #7
 801442e:	442b      	add	r3, r5
 8014430:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8014432:	e0e7      	b.n	8014604 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	4a39      	ldr	r2, [pc, #228]	; (8014520 <UART_SetConfig+0x348>)
 801443a:	4293      	cmp	r3, r2
 801443c:	d004      	beq.n	8014448 <UART_SetConfig+0x270>
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	4a38      	ldr	r2, [pc, #224]	; (8014524 <UART_SetConfig+0x34c>)
 8014444:	4293      	cmp	r3, r2
 8014446:	d171      	bne.n	801452c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681c      	ldr	r4, [r3, #0]
 801444c:	f7fe fe6c 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014450:	4602      	mov	r2, r0
 8014452:	4613      	mov	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	4413      	add	r3, r2
 8014458:	009a      	lsls	r2, r3, #2
 801445a:	441a      	add	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	009b      	lsls	r3, r3, #2
 8014462:	fbb2 f3f3 	udiv	r3, r2, r3
 8014466:	4a30      	ldr	r2, [pc, #192]	; (8014528 <UART_SetConfig+0x350>)
 8014468:	fba2 2303 	umull	r2, r3, r2, r3
 801446c:	095b      	lsrs	r3, r3, #5
 801446e:	011d      	lsls	r5, r3, #4
 8014470:	f7fe fe5a 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 8014474:	4602      	mov	r2, r0
 8014476:	4613      	mov	r3, r2
 8014478:	009b      	lsls	r3, r3, #2
 801447a:	4413      	add	r3, r2
 801447c:	009a      	lsls	r2, r3, #2
 801447e:	441a      	add	r2, r3
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	685b      	ldr	r3, [r3, #4]
 8014484:	009b      	lsls	r3, r3, #2
 8014486:	fbb2 f6f3 	udiv	r6, r2, r3
 801448a:	f7fe fe4d 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 801448e:	4602      	mov	r2, r0
 8014490:	4613      	mov	r3, r2
 8014492:	009b      	lsls	r3, r3, #2
 8014494:	4413      	add	r3, r2
 8014496:	009a      	lsls	r2, r3, #2
 8014498:	441a      	add	r2, r3
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80144a4:	4a20      	ldr	r2, [pc, #128]	; (8014528 <UART_SetConfig+0x350>)
 80144a6:	fba2 2303 	umull	r2, r3, r2, r3
 80144aa:	095b      	lsrs	r3, r3, #5
 80144ac:	2264      	movs	r2, #100	; 0x64
 80144ae:	fb02 f303 	mul.w	r3, r2, r3
 80144b2:	1af3      	subs	r3, r6, r3
 80144b4:	011b      	lsls	r3, r3, #4
 80144b6:	3332      	adds	r3, #50	; 0x32
 80144b8:	4a1b      	ldr	r2, [pc, #108]	; (8014528 <UART_SetConfig+0x350>)
 80144ba:	fba2 2303 	umull	r2, r3, r2, r3
 80144be:	095b      	lsrs	r3, r3, #5
 80144c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144c4:	441d      	add	r5, r3
 80144c6:	f7fe fe2f 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80144ca:	4602      	mov	r2, r0
 80144cc:	4613      	mov	r3, r2
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	4413      	add	r3, r2
 80144d2:	009a      	lsls	r2, r3, #2
 80144d4:	441a      	add	r2, r3
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	009b      	lsls	r3, r3, #2
 80144dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80144e0:	f7fe fe22 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 80144e4:	4602      	mov	r2, r0
 80144e6:	4613      	mov	r3, r2
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	4413      	add	r3, r2
 80144ec:	009a      	lsls	r2, r3, #2
 80144ee:	441a      	add	r2, r3
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80144fa:	4a0b      	ldr	r2, [pc, #44]	; (8014528 <UART_SetConfig+0x350>)
 80144fc:	fba2 2303 	umull	r2, r3, r2, r3
 8014500:	095b      	lsrs	r3, r3, #5
 8014502:	2264      	movs	r2, #100	; 0x64
 8014504:	fb02 f303 	mul.w	r3, r2, r3
 8014508:	1af3      	subs	r3, r6, r3
 801450a:	011b      	lsls	r3, r3, #4
 801450c:	3332      	adds	r3, #50	; 0x32
 801450e:	4a06      	ldr	r2, [pc, #24]	; (8014528 <UART_SetConfig+0x350>)
 8014510:	fba2 2303 	umull	r2, r3, r2, r3
 8014514:	095b      	lsrs	r3, r3, #5
 8014516:	f003 030f 	and.w	r3, r3, #15
 801451a:	442b      	add	r3, r5
 801451c:	60a3      	str	r3, [r4, #8]
 801451e:	e071      	b.n	8014604 <UART_SetConfig+0x42c>
 8014520:	40011000 	.word	0x40011000
 8014524:	40011400 	.word	0x40011400
 8014528:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681c      	ldr	r4, [r3, #0]
 8014530:	f7fe fde6 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014534:	4602      	mov	r2, r0
 8014536:	4613      	mov	r3, r2
 8014538:	009b      	lsls	r3, r3, #2
 801453a:	4413      	add	r3, r2
 801453c:	009a      	lsls	r2, r3, #2
 801453e:	441a      	add	r2, r3
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	685b      	ldr	r3, [r3, #4]
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	fbb2 f3f3 	udiv	r3, r2, r3
 801454a:	4a30      	ldr	r2, [pc, #192]	; (801460c <UART_SetConfig+0x434>)
 801454c:	fba2 2303 	umull	r2, r3, r2, r3
 8014550:	095b      	lsrs	r3, r3, #5
 8014552:	011d      	lsls	r5, r3, #4
 8014554:	f7fe fdd4 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014558:	4602      	mov	r2, r0
 801455a:	4613      	mov	r3, r2
 801455c:	009b      	lsls	r3, r3, #2
 801455e:	4413      	add	r3, r2
 8014560:	009a      	lsls	r2, r3, #2
 8014562:	441a      	add	r2, r3
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	fbb2 f6f3 	udiv	r6, r2, r3
 801456e:	f7fe fdc7 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 8014572:	4602      	mov	r2, r0
 8014574:	4613      	mov	r3, r2
 8014576:	009b      	lsls	r3, r3, #2
 8014578:	4413      	add	r3, r2
 801457a:	009a      	lsls	r2, r3, #2
 801457c:	441a      	add	r2, r3
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	685b      	ldr	r3, [r3, #4]
 8014582:	009b      	lsls	r3, r3, #2
 8014584:	fbb2 f3f3 	udiv	r3, r2, r3
 8014588:	4a20      	ldr	r2, [pc, #128]	; (801460c <UART_SetConfig+0x434>)
 801458a:	fba2 2303 	umull	r2, r3, r2, r3
 801458e:	095b      	lsrs	r3, r3, #5
 8014590:	2264      	movs	r2, #100	; 0x64
 8014592:	fb02 f303 	mul.w	r3, r2, r3
 8014596:	1af3      	subs	r3, r6, r3
 8014598:	011b      	lsls	r3, r3, #4
 801459a:	3332      	adds	r3, #50	; 0x32
 801459c:	4a1b      	ldr	r2, [pc, #108]	; (801460c <UART_SetConfig+0x434>)
 801459e:	fba2 2303 	umull	r2, r3, r2, r3
 80145a2:	095b      	lsrs	r3, r3, #5
 80145a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80145a8:	441d      	add	r5, r3
 80145aa:	f7fe fda9 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80145ae:	4602      	mov	r2, r0
 80145b0:	4613      	mov	r3, r2
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	4413      	add	r3, r2
 80145b6:	009a      	lsls	r2, r3, #2
 80145b8:	441a      	add	r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	009b      	lsls	r3, r3, #2
 80145c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80145c4:	f7fe fd9c 	bl	8013100 <HAL_RCC_GetPCLK1Freq>
 80145c8:	4602      	mov	r2, r0
 80145ca:	4613      	mov	r3, r2
 80145cc:	009b      	lsls	r3, r3, #2
 80145ce:	4413      	add	r3, r2
 80145d0:	009a      	lsls	r2, r3, #2
 80145d2:	441a      	add	r2, r3
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	fbb2 f3f3 	udiv	r3, r2, r3
 80145de:	4a0b      	ldr	r2, [pc, #44]	; (801460c <UART_SetConfig+0x434>)
 80145e0:	fba2 2303 	umull	r2, r3, r2, r3
 80145e4:	095b      	lsrs	r3, r3, #5
 80145e6:	2264      	movs	r2, #100	; 0x64
 80145e8:	fb02 f303 	mul.w	r3, r2, r3
 80145ec:	1af3      	subs	r3, r6, r3
 80145ee:	011b      	lsls	r3, r3, #4
 80145f0:	3332      	adds	r3, #50	; 0x32
 80145f2:	4a06      	ldr	r2, [pc, #24]	; (801460c <UART_SetConfig+0x434>)
 80145f4:	fba2 2303 	umull	r2, r3, r2, r3
 80145f8:	095b      	lsrs	r3, r3, #5
 80145fa:	f003 030f 	and.w	r3, r3, #15
 80145fe:	442b      	add	r3, r5
 8014600:	60a3      	str	r3, [r4, #8]
}
 8014602:	e7ff      	b.n	8014604 <UART_SetConfig+0x42c>
 8014604:	bf00      	nop
 8014606:	3714      	adds	r7, #20
 8014608:	46bd      	mov	sp, r7
 801460a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801460c:	51eb851f 	.word	0x51eb851f

08014610 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014610:	b480      	push	{r7}
 8014612:	b085      	sub	sp, #20
 8014614:	af00      	add	r7, sp, #0
 8014616:	4603      	mov	r3, r0
 8014618:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801461a:	2300      	movs	r3, #0
 801461c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014622:	2b84      	cmp	r3, #132	; 0x84
 8014624:	d005      	beq.n	8014632 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014626:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	4413      	add	r3, r2
 801462e:	3303      	adds	r3, #3
 8014630:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014632:	68fb      	ldr	r3, [r7, #12]
}
 8014634:	4618      	mov	r0, r3
 8014636:	3714      	adds	r7, #20
 8014638:	46bd      	mov	sp, r7
 801463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463e:	4770      	bx	lr

08014640 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014640:	b480      	push	{r7}
 8014642:	b083      	sub	sp, #12
 8014644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014646:	f3ef 8305 	mrs	r3, IPSR
 801464a:	607b      	str	r3, [r7, #4]
  return(result);
 801464c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801464e:	2b00      	cmp	r3, #0
 8014650:	bf14      	ite	ne
 8014652:	2301      	movne	r3, #1
 8014654:	2300      	moveq	r3, #0
 8014656:	b2db      	uxtb	r3, r3
}
 8014658:	4618      	mov	r0, r3
 801465a:	370c      	adds	r7, #12
 801465c:	46bd      	mov	sp, r7
 801465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014662:	4770      	bx	lr

08014664 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014668:	f002 f806 	bl	8016678 <vTaskStartScheduler>
  
  return osOK;
 801466c:	2300      	movs	r3, #0
}
 801466e:	4618      	mov	r0, r3
 8014670:	bd80      	pop	{r7, pc}

08014672 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014672:	b580      	push	{r7, lr}
 8014674:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014676:	f7ff ffe3 	bl	8014640 <inHandlerMode>
 801467a:	4603      	mov	r3, r0
 801467c:	2b00      	cmp	r3, #0
 801467e:	d003      	beq.n	8014688 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014680:	f002 f914 	bl	80168ac <xTaskGetTickCountFromISR>
 8014684:	4603      	mov	r3, r0
 8014686:	e002      	b.n	801468e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014688:	f002 f900 	bl	801688c <xTaskGetTickCount>
 801468c:	4603      	mov	r3, r0
  }
}
 801468e:	4618      	mov	r0, r3
 8014690:	bd80      	pop	{r7, pc}

08014692 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014694:	b089      	sub	sp, #36	; 0x24
 8014696:	af04      	add	r7, sp, #16
 8014698:	6078      	str	r0, [r7, #4]
 801469a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	695b      	ldr	r3, [r3, #20]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d020      	beq.n	80146e6 <osThreadCreate+0x54>
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	699b      	ldr	r3, [r3, #24]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d01c      	beq.n	80146e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	685c      	ldr	r4, [r3, #4]
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	681d      	ldr	r5, [r3, #0]
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	691e      	ldr	r6, [r3, #16]
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80146be:	4618      	mov	r0, r3
 80146c0:	f7ff ffa6 	bl	8014610 <makeFreeRtosPriority>
 80146c4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	695b      	ldr	r3, [r3, #20]
 80146ca:	687a      	ldr	r2, [r7, #4]
 80146cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80146ce:	9202      	str	r2, [sp, #8]
 80146d0:	9301      	str	r3, [sp, #4]
 80146d2:	9100      	str	r1, [sp, #0]
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	4632      	mov	r2, r6
 80146d8:	4629      	mov	r1, r5
 80146da:	4620      	mov	r0, r4
 80146dc:	f001 fe12 	bl	8016304 <xTaskCreateStatic>
 80146e0:	4603      	mov	r3, r0
 80146e2:	60fb      	str	r3, [r7, #12]
 80146e4:	e01c      	b.n	8014720 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	685c      	ldr	r4, [r3, #4]
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80146f2:	b29e      	uxth	r6, r3
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80146fa:	4618      	mov	r0, r3
 80146fc:	f7ff ff88 	bl	8014610 <makeFreeRtosPriority>
 8014700:	4602      	mov	r2, r0
 8014702:	f107 030c 	add.w	r3, r7, #12
 8014706:	9301      	str	r3, [sp, #4]
 8014708:	9200      	str	r2, [sp, #0]
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	4632      	mov	r2, r6
 801470e:	4629      	mov	r1, r5
 8014710:	4620      	mov	r0, r4
 8014712:	f001 fe41 	bl	8016398 <xTaskCreate>
 8014716:	4603      	mov	r3, r0
 8014718:	2b01      	cmp	r3, #1
 801471a:	d001      	beq.n	8014720 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801471c:	2300      	movs	r3, #0
 801471e:	e000      	b.n	8014722 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014720:	68fb      	ldr	r3, [r7, #12]
}
 8014722:	4618      	mov	r0, r3
 8014724:	3714      	adds	r7, #20
 8014726:	46bd      	mov	sp, r7
 8014728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801472a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801472a:	b580      	push	{r7, lr}
 801472c:	b084      	sub	sp, #16
 801472e:	af00      	add	r7, sp, #0
 8014730:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d001      	beq.n	8014740 <osDelay+0x16>
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	e000      	b.n	8014742 <osDelay+0x18>
 8014740:	2301      	movs	r3, #1
 8014742:	4618      	mov	r0, r3
 8014744:	f001 ff64 	bl	8016610 <vTaskDelay>
  
  return osOK;
 8014748:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801474a:	4618      	mov	r0, r3
 801474c:	3710      	adds	r7, #16
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}

08014752 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8014752:	b580      	push	{r7, lr}
 8014754:	b082      	sub	sp, #8
 8014756:	af00      	add	r7, sp, #0
 8014758:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	685b      	ldr	r3, [r3, #4]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d007      	beq.n	8014772 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	4619      	mov	r1, r3
 8014768:	2001      	movs	r0, #1
 801476a:	f001 f873 	bl	8015854 <xQueueCreateMutexStatic>
 801476e:	4603      	mov	r3, r0
 8014770:	e003      	b.n	801477a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8014772:	2001      	movs	r0, #1
 8014774:	f001 f856 	bl	8015824 <xQueueCreateMutex>
 8014778:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 801477a:	4618      	mov	r0, r3
 801477c:	3708      	adds	r7, #8
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}
	...

08014784 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b084      	sub	sp, #16
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
 801478c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801478e:	2300      	movs	r3, #0
 8014790:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d101      	bne.n	801479c <osMutexWait+0x18>
    return osErrorParameter;
 8014798:	2380      	movs	r3, #128	; 0x80
 801479a:	e03c      	b.n	8014816 <osMutexWait+0x92>
  }
  
  ticks = 0;
 801479c:	2300      	movs	r3, #0
 801479e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a6:	d103      	bne.n	80147b0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80147a8:	f04f 33ff 	mov.w	r3, #4294967295
 80147ac:	60fb      	str	r3, [r7, #12]
 80147ae:	e009      	b.n	80147c4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d006      	beq.n	80147c4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d101      	bne.n	80147c4 <osMutexWait+0x40>
      ticks = 1;
 80147c0:	2301      	movs	r3, #1
 80147c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80147c4:	f7ff ff3c 	bl	8014640 <inHandlerMode>
 80147c8:	4603      	mov	r3, r0
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d017      	beq.n	80147fe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80147ce:	f107 0308 	add.w	r3, r7, #8
 80147d2:	461a      	mov	r2, r3
 80147d4:	2100      	movs	r1, #0
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f001 fb82 	bl	8015ee0 <xQueueReceiveFromISR>
 80147dc:	4603      	mov	r3, r0
 80147de:	2b01      	cmp	r3, #1
 80147e0:	d001      	beq.n	80147e6 <osMutexWait+0x62>
      return osErrorOS;
 80147e2:	23ff      	movs	r3, #255	; 0xff
 80147e4:	e017      	b.n	8014816 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d013      	beq.n	8014814 <osMutexWait+0x90>
 80147ec:	4b0c      	ldr	r3, [pc, #48]	; (8014820 <osMutexWait+0x9c>)
 80147ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147f2:	601a      	str	r2, [r3, #0]
 80147f4:	f3bf 8f4f 	dsb	sy
 80147f8:	f3bf 8f6f 	isb	sy
 80147fc:	e00a      	b.n	8014814 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80147fe:	2300      	movs	r3, #0
 8014800:	68fa      	ldr	r2, [r7, #12]
 8014802:	2100      	movs	r1, #0
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f001 fa59 	bl	8015cbc <xQueueGenericReceive>
 801480a:	4603      	mov	r3, r0
 801480c:	2b01      	cmp	r3, #1
 801480e:	d001      	beq.n	8014814 <osMutexWait+0x90>
    return osErrorOS;
 8014810:	23ff      	movs	r3, #255	; 0xff
 8014812:	e000      	b.n	8014816 <osMutexWait+0x92>
  }
  
  return osOK;
 8014814:	2300      	movs	r3, #0
}
 8014816:	4618      	mov	r0, r3
 8014818:	3710      	adds	r7, #16
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop
 8014820:	e000ed04 	.word	0xe000ed04

08014824 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b084      	sub	sp, #16
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801482c:	2300      	movs	r3, #0
 801482e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014830:	2300      	movs	r3, #0
 8014832:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8014834:	f7ff ff04 	bl	8014640 <inHandlerMode>
 8014838:	4603      	mov	r3, r0
 801483a:	2b00      	cmp	r3, #0
 801483c:	d016      	beq.n	801486c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801483e:	f107 0308 	add.w	r3, r7, #8
 8014842:	4619      	mov	r1, r3
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f001 f9af 	bl	8015ba8 <xQueueGiveFromISR>
 801484a:	4603      	mov	r3, r0
 801484c:	2b01      	cmp	r3, #1
 801484e:	d001      	beq.n	8014854 <osMutexRelease+0x30>
      return osErrorOS;
 8014850:	23ff      	movs	r3, #255	; 0xff
 8014852:	e017      	b.n	8014884 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d013      	beq.n	8014882 <osMutexRelease+0x5e>
 801485a:	4b0c      	ldr	r3, [pc, #48]	; (801488c <osMutexRelease+0x68>)
 801485c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014860:	601a      	str	r2, [r3, #0]
 8014862:	f3bf 8f4f 	dsb	sy
 8014866:	f3bf 8f6f 	isb	sy
 801486a:	e00a      	b.n	8014882 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 801486c:	2300      	movs	r3, #0
 801486e:	2200      	movs	r2, #0
 8014870:	2100      	movs	r1, #0
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f001 f80a 	bl	801588c <xQueueGenericSend>
 8014878:	4603      	mov	r3, r0
 801487a:	2b01      	cmp	r3, #1
 801487c:	d001      	beq.n	8014882 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801487e:	23ff      	movs	r3, #255	; 0xff
 8014880:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8014882:	68fb      	ldr	r3, [r7, #12]
}
 8014884:	4618      	mov	r0, r3
 8014886:	3710      	adds	r7, #16
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	e000ed04 	.word	0xe000ed04

08014890 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014890:	b580      	push	{r7, lr}
 8014892:	b086      	sub	sp, #24
 8014894:	af02      	add	r7, sp, #8
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d010      	beq.n	80148c4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	2b01      	cmp	r3, #1
 80148a6:	d10b      	bne.n	80148c0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	685a      	ldr	r2, [r3, #4]
 80148ac:	2303      	movs	r3, #3
 80148ae:	9300      	str	r3, [sp, #0]
 80148b0:	4613      	mov	r3, r2
 80148b2:	2200      	movs	r2, #0
 80148b4:	2100      	movs	r1, #0
 80148b6:	2001      	movs	r0, #1
 80148b8:	f000 fec8 	bl	801564c <xQueueGenericCreateStatic>
 80148bc:	4603      	mov	r3, r0
 80148be:	e016      	b.n	80148ee <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80148c0:	2300      	movs	r3, #0
 80148c2:	e014      	b.n	80148ee <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	2b01      	cmp	r3, #1
 80148c8:	d110      	bne.n	80148ec <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80148ca:	2203      	movs	r2, #3
 80148cc:	2100      	movs	r1, #0
 80148ce:	2001      	movs	r0, #1
 80148d0:	f000 ff2e 	bl	8015730 <xQueueGenericCreate>
 80148d4:	60f8      	str	r0, [r7, #12]
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d005      	beq.n	80148e8 <osSemaphoreCreate+0x58>
 80148dc:	2300      	movs	r3, #0
 80148de:	2200      	movs	r2, #0
 80148e0:	2100      	movs	r1, #0
 80148e2:	68f8      	ldr	r0, [r7, #12]
 80148e4:	f000 ffd2 	bl	801588c <xQueueGenericSend>
      return sema;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	e000      	b.n	80148ee <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80148ec:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80148ee:	4618      	mov	r0, r3
 80148f0:	3710      	adds	r7, #16
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}
	...

080148f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014902:	2300      	movs	r3, #0
 8014904:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d101      	bne.n	8014910 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801490c:	2380      	movs	r3, #128	; 0x80
 801490e:	e03c      	b.n	801498a <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 8014910:	2300      	movs	r3, #0
 8014912:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801491a:	d103      	bne.n	8014924 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801491c:	f04f 33ff 	mov.w	r3, #4294967295
 8014920:	60fb      	str	r3, [r7, #12]
 8014922:	e009      	b.n	8014938 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d006      	beq.n	8014938 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d101      	bne.n	8014938 <osSemaphoreWait+0x40>
      ticks = 1;
 8014934:	2301      	movs	r3, #1
 8014936:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014938:	f7ff fe82 	bl	8014640 <inHandlerMode>
 801493c:	4603      	mov	r3, r0
 801493e:	2b00      	cmp	r3, #0
 8014940:	d017      	beq.n	8014972 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014942:	f107 0308 	add.w	r3, r7, #8
 8014946:	461a      	mov	r2, r3
 8014948:	2100      	movs	r1, #0
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f001 fac8 	bl	8015ee0 <xQueueReceiveFromISR>
 8014950:	4603      	mov	r3, r0
 8014952:	2b01      	cmp	r3, #1
 8014954:	d001      	beq.n	801495a <osSemaphoreWait+0x62>
      return osErrorOS;
 8014956:	23ff      	movs	r3, #255	; 0xff
 8014958:	e017      	b.n	801498a <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d013      	beq.n	8014988 <osSemaphoreWait+0x90>
 8014960:	4b0c      	ldr	r3, [pc, #48]	; (8014994 <osSemaphoreWait+0x9c>)
 8014962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014966:	601a      	str	r2, [r3, #0]
 8014968:	f3bf 8f4f 	dsb	sy
 801496c:	f3bf 8f6f 	isb	sy
 8014970:	e00a      	b.n	8014988 <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014972:	2300      	movs	r3, #0
 8014974:	68fa      	ldr	r2, [r7, #12]
 8014976:	2100      	movs	r1, #0
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f001 f99f 	bl	8015cbc <xQueueGenericReceive>
 801497e:	4603      	mov	r3, r0
 8014980:	2b01      	cmp	r3, #1
 8014982:	d001      	beq.n	8014988 <osSemaphoreWait+0x90>
    return osErrorOS;
 8014984:	23ff      	movs	r3, #255	; 0xff
 8014986:	e000      	b.n	801498a <osSemaphoreWait+0x92>
  }
  
  return osOK;
 8014988:	2300      	movs	r3, #0
}
 801498a:	4618      	mov	r0, r3
 801498c:	3710      	adds	r7, #16
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	bf00      	nop
 8014994:	e000ed04 	.word	0xe000ed04

08014998 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b084      	sub	sp, #16
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80149a0:	2300      	movs	r3, #0
 80149a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80149a4:	2300      	movs	r3, #0
 80149a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80149a8:	f7ff fe4a 	bl	8014640 <inHandlerMode>
 80149ac:	4603      	mov	r3, r0
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d016      	beq.n	80149e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80149b2:	f107 0308 	add.w	r3, r7, #8
 80149b6:	4619      	mov	r1, r3
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f001 f8f5 	bl	8015ba8 <xQueueGiveFromISR>
 80149be:	4603      	mov	r3, r0
 80149c0:	2b01      	cmp	r3, #1
 80149c2:	d001      	beq.n	80149c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80149c4:	23ff      	movs	r3, #255	; 0xff
 80149c6:	e017      	b.n	80149f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d013      	beq.n	80149f6 <osSemaphoreRelease+0x5e>
 80149ce:	4b0c      	ldr	r3, [pc, #48]	; (8014a00 <osSemaphoreRelease+0x68>)
 80149d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149d4:	601a      	str	r2, [r3, #0]
 80149d6:	f3bf 8f4f 	dsb	sy
 80149da:	f3bf 8f6f 	isb	sy
 80149de:	e00a      	b.n	80149f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80149e0:	2300      	movs	r3, #0
 80149e2:	2200      	movs	r2, #0
 80149e4:	2100      	movs	r1, #0
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f000 ff50 	bl	801588c <xQueueGenericSend>
 80149ec:	4603      	mov	r3, r0
 80149ee:	2b01      	cmp	r3, #1
 80149f0:	d001      	beq.n	80149f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80149f2:	23ff      	movs	r3, #255	; 0xff
 80149f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80149f6:	68fb      	ldr	r3, [r7, #12]
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	3710      	adds	r7, #16
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}
 8014a00:	e000ed04 	.word	0xe000ed04

08014a04 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b082      	sub	sp, #8
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014a0c:	f7ff fe18 	bl	8014640 <inHandlerMode>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d001      	beq.n	8014a1a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8014a16:	2382      	movs	r3, #130	; 0x82
 8014a18:	e003      	b.n	8014a22 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f001 fb15 	bl	801604a <vQueueDelete>

  return osOK; 
 8014a20:	2300      	movs	r3, #0
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3708      	adds	r7, #8
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}

08014a2a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014a2a:	b590      	push	{r4, r7, lr}
 8014a2c:	b085      	sub	sp, #20
 8014a2e:	af02      	add	r7, sp, #8
 8014a30:	6078      	str	r0, [r7, #4]
 8014a32:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	689b      	ldr	r3, [r3, #8]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d012      	beq.n	8014a62 <osMessageCreate+0x38>
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	68db      	ldr	r3, [r3, #12]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d00e      	beq.n	8014a62 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6818      	ldr	r0, [r3, #0]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6859      	ldr	r1, [r3, #4]
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	689a      	ldr	r2, [r3, #8]
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	68dc      	ldr	r4, [r3, #12]
 8014a54:	2300      	movs	r3, #0
 8014a56:	9300      	str	r3, [sp, #0]
 8014a58:	4623      	mov	r3, r4
 8014a5a:	f000 fdf7 	bl	801564c <xQueueGenericCreateStatic>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	e008      	b.n	8014a74 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	6818      	ldr	r0, [r3, #0]
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	685b      	ldr	r3, [r3, #4]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	f000 fe5f 	bl	8015730 <xQueueGenericCreate>
 8014a72:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	370c      	adds	r7, #12
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd90      	pop	{r4, r7, pc}

08014a7c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b086      	sub	sp, #24
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014a90:	697b      	ldr	r3, [r7, #20]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d101      	bne.n	8014a9a <osMessagePut+0x1e>
    ticks = 1;
 8014a96:	2301      	movs	r3, #1
 8014a98:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8014a9a:	f7ff fdd1 	bl	8014640 <inHandlerMode>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d018      	beq.n	8014ad6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014aa4:	f107 0210 	add.w	r2, r7, #16
 8014aa8:	f107 0108 	add.w	r1, r7, #8
 8014aac:	2300      	movs	r3, #0
 8014aae:	68f8      	ldr	r0, [r7, #12]
 8014ab0:	f000 ffe6 	bl	8015a80 <xQueueGenericSendFromISR>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	2b01      	cmp	r3, #1
 8014ab8:	d001      	beq.n	8014abe <osMessagePut+0x42>
      return osErrorOS;
 8014aba:	23ff      	movs	r3, #255	; 0xff
 8014abc:	e018      	b.n	8014af0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014abe:	693b      	ldr	r3, [r7, #16]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d014      	beq.n	8014aee <osMessagePut+0x72>
 8014ac4:	4b0c      	ldr	r3, [pc, #48]	; (8014af8 <osMessagePut+0x7c>)
 8014ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014aca:	601a      	str	r2, [r3, #0]
 8014acc:	f3bf 8f4f 	dsb	sy
 8014ad0:	f3bf 8f6f 	isb	sy
 8014ad4:	e00b      	b.n	8014aee <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014ad6:	f107 0108 	add.w	r1, r7, #8
 8014ada:	2300      	movs	r3, #0
 8014adc:	697a      	ldr	r2, [r7, #20]
 8014ade:	68f8      	ldr	r0, [r7, #12]
 8014ae0:	f000 fed4 	bl	801588c <xQueueGenericSend>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	2b01      	cmp	r3, #1
 8014ae8:	d001      	beq.n	8014aee <osMessagePut+0x72>
      return osErrorOS;
 8014aea:	23ff      	movs	r3, #255	; 0xff
 8014aec:	e000      	b.n	8014af0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014aee:	2300      	movs	r3, #0
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3718      	adds	r7, #24
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}
 8014af8:	e000ed04 	.word	0xe000ed04

08014afc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014afc:	b590      	push	{r4, r7, lr}
 8014afe:	b08b      	sub	sp, #44	; 0x2c
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	60f8      	str	r0, [r7, #12]
 8014b04:	60b9      	str	r1, [r7, #8]
 8014b06:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d10a      	bne.n	8014b2c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014b16:	2380      	movs	r3, #128	; 0x80
 8014b18:	617b      	str	r3, [r7, #20]
    return event;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	461c      	mov	r4, r3
 8014b1e:	f107 0314 	add.w	r3, r7, #20
 8014b22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014b2a:	e054      	b.n	8014bd6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014b30:	2300      	movs	r3, #0
 8014b32:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b3a:	d103      	bne.n	8014b44 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b40:	627b      	str	r3, [r7, #36]	; 0x24
 8014b42:	e009      	b.n	8014b58 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d006      	beq.n	8014b58 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8014b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d101      	bne.n	8014b58 <osMessageGet+0x5c>
      ticks = 1;
 8014b54:	2301      	movs	r3, #1
 8014b56:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014b58:	f7ff fd72 	bl	8014640 <inHandlerMode>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d01c      	beq.n	8014b9c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014b62:	f107 0220 	add.w	r2, r7, #32
 8014b66:	f107 0314 	add.w	r3, r7, #20
 8014b6a:	3304      	adds	r3, #4
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	68b8      	ldr	r0, [r7, #8]
 8014b70:	f001 f9b6 	bl	8015ee0 <xQueueReceiveFromISR>
 8014b74:	4603      	mov	r3, r0
 8014b76:	2b01      	cmp	r3, #1
 8014b78:	d102      	bne.n	8014b80 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014b7a:	2310      	movs	r3, #16
 8014b7c:	617b      	str	r3, [r7, #20]
 8014b7e:	e001      	b.n	8014b84 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014b80:	2300      	movs	r3, #0
 8014b82:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014b84:	6a3b      	ldr	r3, [r7, #32]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d01d      	beq.n	8014bc6 <osMessageGet+0xca>
 8014b8a:	4b15      	ldr	r3, [pc, #84]	; (8014be0 <osMessageGet+0xe4>)
 8014b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b90:	601a      	str	r2, [r3, #0]
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	f3bf 8f6f 	isb	sy
 8014b9a:	e014      	b.n	8014bc6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014b9c:	f107 0314 	add.w	r3, r7, #20
 8014ba0:	1d19      	adds	r1, r3, #4
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ba6:	68b8      	ldr	r0, [r7, #8]
 8014ba8:	f001 f888 	bl	8015cbc <xQueueGenericReceive>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b01      	cmp	r3, #1
 8014bb0:	d102      	bne.n	8014bb8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014bb2:	2310      	movs	r3, #16
 8014bb4:	617b      	str	r3, [r7, #20]
 8014bb6:	e006      	b.n	8014bc6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d101      	bne.n	8014bc2 <osMessageGet+0xc6>
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	e000      	b.n	8014bc4 <osMessageGet+0xc8>
 8014bc2:	2340      	movs	r3, #64	; 0x40
 8014bc4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	461c      	mov	r4, r3
 8014bca:	f107 0314 	add.w	r3, r7, #20
 8014bce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014bd6:	68f8      	ldr	r0, [r7, #12]
 8014bd8:	372c      	adds	r7, #44	; 0x2c
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd90      	pop	{r4, r7, pc}
 8014bde:	bf00      	nop
 8014be0:	e000ed04 	.word	0xe000ed04

08014be4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014bec:	f7ff fd28 	bl	8014640 <inHandlerMode>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d004      	beq.n	8014c00 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f001 fa0c 	bl	8016014 <uxQueueMessagesWaitingFromISR>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	e003      	b.n	8014c08 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f001 f9ea 	bl	8015fda <uxQueueMessagesWaiting>
 8014c06:	4603      	mov	r3, r0
  }
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3708      	adds	r7, #8
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014c18:	f7ff fd12 	bl	8014640 <inHandlerMode>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d001      	beq.n	8014c26 <osMessageDelete+0x16>
    return osErrorISR;
 8014c22:	2382      	movs	r3, #130	; 0x82
 8014c24:	e003      	b.n	8014c2e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f001 fa0f 	bl	801604a <vQueueDelete>

  return osOK; 
 8014c2c:	2300      	movs	r3, #0
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3708      	adds	r7, #8
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}

08014c36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014c36:	b480      	push	{r7}
 8014c38:	b083      	sub	sp, #12
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f103 0208 	add.w	r2, r3, #8
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8014c4e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f103 0208 	add.w	r2, r3, #8
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	f103 0208 	add.w	r2, r3, #8
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	2200      	movs	r2, #0
 8014c68:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014c6a:	bf00      	nop
 8014c6c:	370c      	adds	r7, #12
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c74:	4770      	bx	lr

08014c76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014c76:	b480      	push	{r7}
 8014c78:	b083      	sub	sp, #12
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	2200      	movs	r2, #0
 8014c82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014c84:	bf00      	nop
 8014c86:	370c      	adds	r7, #12
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8e:	4770      	bx	lr

08014c90 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014c90:	b480      	push	{r7}
 8014c92:	b085      	sub	sp, #20
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	685b      	ldr	r3, [r3, #4]
 8014c9e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	68fa      	ldr	r2, [r7, #12]
 8014ca4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	689a      	ldr	r2, [r3, #8]
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	689b      	ldr	r3, [r3, #8]
 8014cb2:	683a      	ldr	r2, [r7, #0]
 8014cb4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	683a      	ldr	r2, [r7, #0]
 8014cba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	1c5a      	adds	r2, r3, #1
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	601a      	str	r2, [r3, #0]
}
 8014ccc:	bf00      	nop
 8014cce:	3714      	adds	r7, #20
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr

08014cd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014ce2:	683b      	ldr	r3, [r7, #0]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cee:	d103      	bne.n	8014cf8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	691b      	ldr	r3, [r3, #16]
 8014cf4:	60fb      	str	r3, [r7, #12]
 8014cf6:	e00c      	b.n	8014d12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	3308      	adds	r3, #8
 8014cfc:	60fb      	str	r3, [r7, #12]
 8014cfe:	e002      	b.n	8014d06 <vListInsert+0x2e>
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	685b      	ldr	r3, [r3, #4]
 8014d04:	60fb      	str	r3, [r7, #12]
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	685b      	ldr	r3, [r3, #4]
 8014d0a:	681a      	ldr	r2, [r3, #0]
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	d9f6      	bls.n	8014d00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	685a      	ldr	r2, [r3, #4]
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014d1a:	683b      	ldr	r3, [r7, #0]
 8014d1c:	685b      	ldr	r3, [r3, #4]
 8014d1e:	683a      	ldr	r2, [r7, #0]
 8014d20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	68fa      	ldr	r2, [r7, #12]
 8014d26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	683a      	ldr	r2, [r7, #0]
 8014d2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	687a      	ldr	r2, [r7, #4]
 8014d32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	1c5a      	adds	r2, r3, #1
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	601a      	str	r2, [r3, #0]
}
 8014d3e:	bf00      	nop
 8014d40:	3714      	adds	r7, #20
 8014d42:	46bd      	mov	sp, r7
 8014d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d48:	4770      	bx	lr

08014d4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014d4a:	b480      	push	{r7}
 8014d4c:	b085      	sub	sp, #20
 8014d4e:	af00      	add	r7, sp, #0
 8014d50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	691b      	ldr	r3, [r3, #16]
 8014d56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	685b      	ldr	r3, [r3, #4]
 8014d5c:	687a      	ldr	r2, [r7, #4]
 8014d5e:	6892      	ldr	r2, [r2, #8]
 8014d60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	689b      	ldr	r3, [r3, #8]
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	6852      	ldr	r2, [r2, #4]
 8014d6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	685a      	ldr	r2, [r3, #4]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d103      	bne.n	8014d7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	689a      	ldr	r2, [r3, #8]
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2200      	movs	r2, #0
 8014d82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	1e5a      	subs	r2, r3, #1
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	681b      	ldr	r3, [r3, #0]
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3714      	adds	r7, #20
 8014d96:	46bd      	mov	sp, r7
 8014d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9c:	4770      	bx	lr
	...

08014da0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014da0:	b480      	push	{r7}
 8014da2:	b085      	sub	sp, #20
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	60f8      	str	r0, [r7, #12]
 8014da8:	60b9      	str	r1, [r7, #8]
 8014daa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	3b04      	subs	r3, #4
 8014db0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	3b04      	subs	r3, #4
 8014dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014dc0:	68bb      	ldr	r3, [r7, #8]
 8014dc2:	f023 0201 	bic.w	r2, r3, #1
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	3b04      	subs	r3, #4
 8014dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014dd0:	4a0c      	ldr	r2, [pc, #48]	; (8014e04 <pxPortInitialiseStack+0x64>)
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	3b14      	subs	r3, #20
 8014dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	3b04      	subs	r3, #4
 8014de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f06f 0202 	mvn.w	r2, #2
 8014dee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	3b20      	subs	r3, #32
 8014df4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014df6:	68fb      	ldr	r3, [r7, #12]
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3714      	adds	r7, #20
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr
 8014e04:	08014e09 	.word	0x08014e09

08014e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b083      	sub	sp, #12
 8014e0c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014e0e:	4b0c      	ldr	r3, [pc, #48]	; (8014e40 <prvTaskExitError+0x38>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e16:	d009      	beq.n	8014e2c <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e1c:	f383 8811 	msr	BASEPRI, r3
 8014e20:	f3bf 8f6f 	isb	sy
 8014e24:	f3bf 8f4f 	dsb	sy
 8014e28:	607b      	str	r3, [r7, #4]
 8014e2a:	e7fe      	b.n	8014e2a <prvTaskExitError+0x22>
 8014e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e30:	f383 8811 	msr	BASEPRI, r3
 8014e34:	f3bf 8f6f 	isb	sy
 8014e38:	f3bf 8f4f 	dsb	sy
 8014e3c:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8014e3e:	e7fe      	b.n	8014e3e <prvTaskExitError+0x36>
 8014e40:	20000004 	.word	0x20000004
	...

08014e50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014e50:	4b07      	ldr	r3, [pc, #28]	; (8014e70 <pxCurrentTCBConst2>)
 8014e52:	6819      	ldr	r1, [r3, #0]
 8014e54:	6808      	ldr	r0, [r1, #0]
 8014e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e5a:	f380 8809 	msr	PSP, r0
 8014e5e:	f3bf 8f6f 	isb	sy
 8014e62:	f04f 0000 	mov.w	r0, #0
 8014e66:	f380 8811 	msr	BASEPRI, r0
 8014e6a:	4770      	bx	lr
 8014e6c:	f3af 8000 	nop.w

08014e70 <pxCurrentTCBConst2>:
 8014e70:	2000925c 	.word	0x2000925c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014e74:	bf00      	nop
 8014e76:	bf00      	nop

08014e78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8014e78:	4806      	ldr	r0, [pc, #24]	; (8014e94 <prvPortStartFirstTask+0x1c>)
 8014e7a:	6800      	ldr	r0, [r0, #0]
 8014e7c:	6800      	ldr	r0, [r0, #0]
 8014e7e:	f380 8808 	msr	MSP, r0
 8014e82:	b662      	cpsie	i
 8014e84:	b661      	cpsie	f
 8014e86:	f3bf 8f4f 	dsb	sy
 8014e8a:	f3bf 8f6f 	isb	sy
 8014e8e:	df00      	svc	0
 8014e90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014e92:	bf00      	nop
 8014e94:	e000ed08 	.word	0xe000ed08

08014e98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b086      	sub	sp, #24
 8014e9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014e9e:	4b3b      	ldr	r3, [pc, #236]	; (8014f8c <xPortStartScheduler+0xf4>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	4a3b      	ldr	r2, [pc, #236]	; (8014f90 <xPortStartScheduler+0xf8>)
 8014ea4:	4293      	cmp	r3, r2
 8014ea6:	d109      	bne.n	8014ebc <xPortStartScheduler+0x24>
 8014ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eac:	f383 8811 	msr	BASEPRI, r3
 8014eb0:	f3bf 8f6f 	isb	sy
 8014eb4:	f3bf 8f4f 	dsb	sy
 8014eb8:	613b      	str	r3, [r7, #16]
 8014eba:	e7fe      	b.n	8014eba <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014ebc:	4b33      	ldr	r3, [pc, #204]	; (8014f8c <xPortStartScheduler+0xf4>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	4a34      	ldr	r2, [pc, #208]	; (8014f94 <xPortStartScheduler+0xfc>)
 8014ec2:	4293      	cmp	r3, r2
 8014ec4:	d109      	bne.n	8014eda <xPortStartScheduler+0x42>
 8014ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eca:	f383 8811 	msr	BASEPRI, r3
 8014ece:	f3bf 8f6f 	isb	sy
 8014ed2:	f3bf 8f4f 	dsb	sy
 8014ed6:	60fb      	str	r3, [r7, #12]
 8014ed8:	e7fe      	b.n	8014ed8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014eda:	4b2f      	ldr	r3, [pc, #188]	; (8014f98 <xPortStartScheduler+0x100>)
 8014edc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	b2db      	uxtb	r3, r3
 8014ee4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	22ff      	movs	r2, #255	; 0xff
 8014eea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	781b      	ldrb	r3, [r3, #0]
 8014ef0:	b2db      	uxtb	r3, r3
 8014ef2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014ef4:	79fb      	ldrb	r3, [r7, #7]
 8014ef6:	b2db      	uxtb	r3, r3
 8014ef8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014efc:	b2da      	uxtb	r2, r3
 8014efe:	4b27      	ldr	r3, [pc, #156]	; (8014f9c <xPortStartScheduler+0x104>)
 8014f00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014f02:	4b27      	ldr	r3, [pc, #156]	; (8014fa0 <xPortStartScheduler+0x108>)
 8014f04:	2207      	movs	r2, #7
 8014f06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f08:	e009      	b.n	8014f1e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8014f0a:	4b25      	ldr	r3, [pc, #148]	; (8014fa0 <xPortStartScheduler+0x108>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	3b01      	subs	r3, #1
 8014f10:	4a23      	ldr	r2, [pc, #140]	; (8014fa0 <xPortStartScheduler+0x108>)
 8014f12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014f14:	79fb      	ldrb	r3, [r7, #7]
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	005b      	lsls	r3, r3, #1
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014f1e:	79fb      	ldrb	r3, [r7, #7]
 8014f20:	b2db      	uxtb	r3, r3
 8014f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f26:	2b80      	cmp	r3, #128	; 0x80
 8014f28:	d0ef      	beq.n	8014f0a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014f2a:	4b1d      	ldr	r3, [pc, #116]	; (8014fa0 <xPortStartScheduler+0x108>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	021b      	lsls	r3, r3, #8
 8014f30:	4a1b      	ldr	r2, [pc, #108]	; (8014fa0 <xPortStartScheduler+0x108>)
 8014f32:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014f34:	4b1a      	ldr	r3, [pc, #104]	; (8014fa0 <xPortStartScheduler+0x108>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014f3c:	4a18      	ldr	r2, [pc, #96]	; (8014fa0 <xPortStartScheduler+0x108>)
 8014f3e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	b2da      	uxtb	r2, r3
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014f48:	4a16      	ldr	r2, [pc, #88]	; (8014fa4 <xPortStartScheduler+0x10c>)
 8014f4a:	4b16      	ldr	r3, [pc, #88]	; (8014fa4 <xPortStartScheduler+0x10c>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014f52:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014f54:	4a13      	ldr	r2, [pc, #76]	; (8014fa4 <xPortStartScheduler+0x10c>)
 8014f56:	4b13      	ldr	r3, [pc, #76]	; (8014fa4 <xPortStartScheduler+0x10c>)
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014f5e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014f60:	f000 f8d2 	bl	8015108 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014f64:	4b10      	ldr	r3, [pc, #64]	; (8014fa8 <xPortStartScheduler+0x110>)
 8014f66:	2200      	movs	r2, #0
 8014f68:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014f6a:	f000 f8e9 	bl	8015140 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014f6e:	4a0f      	ldr	r2, [pc, #60]	; (8014fac <xPortStartScheduler+0x114>)
 8014f70:	4b0e      	ldr	r3, [pc, #56]	; (8014fac <xPortStartScheduler+0x114>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014f78:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014f7a:	f7ff ff7d 	bl	8014e78 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8014f7e:	f7ff ff43 	bl	8014e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014f82:	2300      	movs	r3, #0
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3718      	adds	r7, #24
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}
 8014f8c:	e000ed00 	.word	0xe000ed00
 8014f90:	410fc271 	.word	0x410fc271
 8014f94:	410fc270 	.word	0x410fc270
 8014f98:	e000e400 	.word	0xe000e400
 8014f9c:	2000023c 	.word	0x2000023c
 8014fa0:	20000240 	.word	0x20000240
 8014fa4:	e000ed20 	.word	0xe000ed20
 8014fa8:	20000004 	.word	0x20000004
 8014fac:	e000ef34 	.word	0xe000ef34

08014fb0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fba:	f383 8811 	msr	BASEPRI, r3
 8014fbe:	f3bf 8f6f 	isb	sy
 8014fc2:	f3bf 8f4f 	dsb	sy
 8014fc6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014fc8:	4b0e      	ldr	r3, [pc, #56]	; (8015004 <vPortEnterCritical+0x54>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	3301      	adds	r3, #1
 8014fce:	4a0d      	ldr	r2, [pc, #52]	; (8015004 <vPortEnterCritical+0x54>)
 8014fd0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014fd2:	4b0c      	ldr	r3, [pc, #48]	; (8015004 <vPortEnterCritical+0x54>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	2b01      	cmp	r3, #1
 8014fd8:	d10e      	bne.n	8014ff8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014fda:	4b0b      	ldr	r3, [pc, #44]	; (8015008 <vPortEnterCritical+0x58>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	b2db      	uxtb	r3, r3
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d009      	beq.n	8014ff8 <vPortEnterCritical+0x48>
 8014fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fe8:	f383 8811 	msr	BASEPRI, r3
 8014fec:	f3bf 8f6f 	isb	sy
 8014ff0:	f3bf 8f4f 	dsb	sy
 8014ff4:	603b      	str	r3, [r7, #0]
 8014ff6:	e7fe      	b.n	8014ff6 <vPortEnterCritical+0x46>
	}
}
 8014ff8:	bf00      	nop
 8014ffa:	370c      	adds	r7, #12
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr
 8015004:	20000004 	.word	0x20000004
 8015008:	e000ed04 	.word	0xe000ed04

0801500c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801500c:	b480      	push	{r7}
 801500e:	b083      	sub	sp, #12
 8015010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015012:	4b11      	ldr	r3, [pc, #68]	; (8015058 <vPortExitCritical+0x4c>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d109      	bne.n	801502e <vPortExitCritical+0x22>
 801501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801501e:	f383 8811 	msr	BASEPRI, r3
 8015022:	f3bf 8f6f 	isb	sy
 8015026:	f3bf 8f4f 	dsb	sy
 801502a:	607b      	str	r3, [r7, #4]
 801502c:	e7fe      	b.n	801502c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801502e:	4b0a      	ldr	r3, [pc, #40]	; (8015058 <vPortExitCritical+0x4c>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	3b01      	subs	r3, #1
 8015034:	4a08      	ldr	r2, [pc, #32]	; (8015058 <vPortExitCritical+0x4c>)
 8015036:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015038:	4b07      	ldr	r3, [pc, #28]	; (8015058 <vPortExitCritical+0x4c>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d104      	bne.n	801504a <vPortExitCritical+0x3e>
 8015040:	2300      	movs	r3, #0
 8015042:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801504a:	bf00      	nop
 801504c:	370c      	adds	r7, #12
 801504e:	46bd      	mov	sp, r7
 8015050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015054:	4770      	bx	lr
 8015056:	bf00      	nop
 8015058:	20000004 	.word	0x20000004
 801505c:	00000000 	.word	0x00000000

08015060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015060:	f3ef 8009 	mrs	r0, PSP
 8015064:	f3bf 8f6f 	isb	sy
 8015068:	4b15      	ldr	r3, [pc, #84]	; (80150c0 <pxCurrentTCBConst>)
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	f01e 0f10 	tst.w	lr, #16
 8015070:	bf08      	it	eq
 8015072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801507a:	6010      	str	r0, [r2, #0]
 801507c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8015080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015084:	f380 8811 	msr	BASEPRI, r0
 8015088:	f3bf 8f4f 	dsb	sy
 801508c:	f3bf 8f6f 	isb	sy
 8015090:	f001 fcda 	bl	8016a48 <vTaskSwitchContext>
 8015094:	f04f 0000 	mov.w	r0, #0
 8015098:	f380 8811 	msr	BASEPRI, r0
 801509c:	bc08      	pop	{r3}
 801509e:	6819      	ldr	r1, [r3, #0]
 80150a0:	6808      	ldr	r0, [r1, #0]
 80150a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150a6:	f01e 0f10 	tst.w	lr, #16
 80150aa:	bf08      	it	eq
 80150ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80150b0:	f380 8809 	msr	PSP, r0
 80150b4:	f3bf 8f6f 	isb	sy
 80150b8:	4770      	bx	lr
 80150ba:	bf00      	nop
 80150bc:	f3af 8000 	nop.w

080150c0 <pxCurrentTCBConst>:
 80150c0:	2000925c 	.word	0x2000925c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80150c4:	bf00      	nop
 80150c6:	bf00      	nop

080150c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
	__asm volatile
 80150ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d2:	f383 8811 	msr	BASEPRI, r3
 80150d6:	f3bf 8f6f 	isb	sy
 80150da:	f3bf 8f4f 	dsb	sy
 80150de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80150e0:	f001 fbf6 	bl	80168d0 <xTaskIncrementTick>
 80150e4:	4603      	mov	r3, r0
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d003      	beq.n	80150f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80150ea:	4b06      	ldr	r3, [pc, #24]	; (8015104 <SysTick_Handler+0x3c>)
 80150ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150f0:	601a      	str	r2, [r3, #0]
 80150f2:	2300      	movs	r3, #0
 80150f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80150f6:	683b      	ldr	r3, [r7, #0]
 80150f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80150fc:	bf00      	nop
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}
 8015104:	e000ed04 	.word	0xe000ed04

08015108 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015108:	b480      	push	{r7}
 801510a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801510c:	4a08      	ldr	r2, [pc, #32]	; (8015130 <vPortSetupTimerInterrupt+0x28>)
 801510e:	4b09      	ldr	r3, [pc, #36]	; (8015134 <vPortSetupTimerInterrupt+0x2c>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	4909      	ldr	r1, [pc, #36]	; (8015138 <vPortSetupTimerInterrupt+0x30>)
 8015114:	fba1 1303 	umull	r1, r3, r1, r3
 8015118:	099b      	lsrs	r3, r3, #6
 801511a:	3b01      	subs	r3, #1
 801511c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801511e:	4b07      	ldr	r3, [pc, #28]	; (801513c <vPortSetupTimerInterrupt+0x34>)
 8015120:	2207      	movs	r2, #7
 8015122:	601a      	str	r2, [r3, #0]
}
 8015124:	bf00      	nop
 8015126:	46bd      	mov	sp, r7
 8015128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512c:	4770      	bx	lr
 801512e:	bf00      	nop
 8015130:	e000e014 	.word	0xe000e014
 8015134:	2000004c 	.word	0x2000004c
 8015138:	10624dd3 	.word	0x10624dd3
 801513c:	e000e010 	.word	0xe000e010

08015140 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015140:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015150 <vPortEnableVFP+0x10>
 8015144:	6801      	ldr	r1, [r0, #0]
 8015146:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801514a:	6001      	str	r1, [r0, #0]
 801514c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801514e:	bf00      	nop
 8015150:	e000ed88 	.word	0xe000ed88

08015154 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015154:	b480      	push	{r7}
 8015156:	b085      	sub	sp, #20
 8015158:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 801515a:	f3ef 8305 	mrs	r3, IPSR
 801515e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	2b0f      	cmp	r3, #15
 8015164:	d913      	bls.n	801518e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015166:	4a16      	ldr	r2, [pc, #88]	; (80151c0 <vPortValidateInterruptPriority+0x6c>)
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	4413      	add	r3, r2
 801516c:	781b      	ldrb	r3, [r3, #0]
 801516e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015170:	4b14      	ldr	r3, [pc, #80]	; (80151c4 <vPortValidateInterruptPriority+0x70>)
 8015172:	781b      	ldrb	r3, [r3, #0]
 8015174:	7afa      	ldrb	r2, [r7, #11]
 8015176:	429a      	cmp	r2, r3
 8015178:	d209      	bcs.n	801518e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801517e:	f383 8811 	msr	BASEPRI, r3
 8015182:	f3bf 8f6f 	isb	sy
 8015186:	f3bf 8f4f 	dsb	sy
 801518a:	607b      	str	r3, [r7, #4]
 801518c:	e7fe      	b.n	801518c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801518e:	4b0e      	ldr	r3, [pc, #56]	; (80151c8 <vPortValidateInterruptPriority+0x74>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015196:	4b0d      	ldr	r3, [pc, #52]	; (80151cc <vPortValidateInterruptPriority+0x78>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	429a      	cmp	r2, r3
 801519c:	d909      	bls.n	80151b2 <vPortValidateInterruptPriority+0x5e>
 801519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151a2:	f383 8811 	msr	BASEPRI, r3
 80151a6:	f3bf 8f6f 	isb	sy
 80151aa:	f3bf 8f4f 	dsb	sy
 80151ae:	603b      	str	r3, [r7, #0]
 80151b0:	e7fe      	b.n	80151b0 <vPortValidateInterruptPriority+0x5c>
	}
 80151b2:	bf00      	nop
 80151b4:	3714      	adds	r7, #20
 80151b6:	46bd      	mov	sp, r7
 80151b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151bc:	4770      	bx	lr
 80151be:	bf00      	nop
 80151c0:	e000e3f0 	.word	0xe000e3f0
 80151c4:	2000023c 	.word	0x2000023c
 80151c8:	e000ed0c 	.word	0xe000ed0c
 80151cc:	20000240 	.word	0x20000240

080151d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b08a      	sub	sp, #40	; 0x28
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80151d8:	2300      	movs	r3, #0
 80151da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80151dc:	f001 faac 	bl	8016738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80151e0:	4b57      	ldr	r3, [pc, #348]	; (8015340 <pvPortMalloc+0x170>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d101      	bne.n	80151ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80151e8:	f000 f90c 	bl	8015404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80151ec:	4b55      	ldr	r3, [pc, #340]	; (8015344 <pvPortMalloc+0x174>)
 80151ee:	681a      	ldr	r2, [r3, #0]
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	4013      	ands	r3, r2
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	f040 808c 	bne.w	8015312 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d01c      	beq.n	801523a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8015200:	2208      	movs	r2, #8
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	4413      	add	r3, r2
 8015206:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	f003 0307 	and.w	r3, r3, #7
 801520e:	2b00      	cmp	r3, #0
 8015210:	d013      	beq.n	801523a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	f023 0307 	bic.w	r3, r3, #7
 8015218:	3308      	adds	r3, #8
 801521a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f003 0307 	and.w	r3, r3, #7
 8015222:	2b00      	cmp	r3, #0
 8015224:	d009      	beq.n	801523a <pvPortMalloc+0x6a>
 8015226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801522a:	f383 8811 	msr	BASEPRI, r3
 801522e:	f3bf 8f6f 	isb	sy
 8015232:	f3bf 8f4f 	dsb	sy
 8015236:	617b      	str	r3, [r7, #20]
 8015238:	e7fe      	b.n	8015238 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d068      	beq.n	8015312 <pvPortMalloc+0x142>
 8015240:	4b41      	ldr	r3, [pc, #260]	; (8015348 <pvPortMalloc+0x178>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	687a      	ldr	r2, [r7, #4]
 8015246:	429a      	cmp	r2, r3
 8015248:	d863      	bhi.n	8015312 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801524a:	4b40      	ldr	r3, [pc, #256]	; (801534c <pvPortMalloc+0x17c>)
 801524c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801524e:	4b3f      	ldr	r3, [pc, #252]	; (801534c <pvPortMalloc+0x17c>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015254:	e004      	b.n	8015260 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8015256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015262:	685a      	ldr	r2, [r3, #4]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	429a      	cmp	r2, r3
 8015268:	d203      	bcs.n	8015272 <pvPortMalloc+0xa2>
 801526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d1f1      	bne.n	8015256 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015272:	4b33      	ldr	r3, [pc, #204]	; (8015340 <pvPortMalloc+0x170>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015278:	429a      	cmp	r2, r3
 801527a:	d04a      	beq.n	8015312 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801527c:	6a3b      	ldr	r3, [r7, #32]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	2208      	movs	r2, #8
 8015282:	4413      	add	r3, r2
 8015284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015288:	681a      	ldr	r2, [r3, #0]
 801528a:	6a3b      	ldr	r3, [r7, #32]
 801528c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015290:	685a      	ldr	r2, [r3, #4]
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	1ad2      	subs	r2, r2, r3
 8015296:	2308      	movs	r3, #8
 8015298:	005b      	lsls	r3, r3, #1
 801529a:	429a      	cmp	r2, r3
 801529c:	d91e      	bls.n	80152dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801529e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	4413      	add	r3, r2
 80152a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80152a6:	69bb      	ldr	r3, [r7, #24]
 80152a8:	f003 0307 	and.w	r3, r3, #7
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d009      	beq.n	80152c4 <pvPortMalloc+0xf4>
 80152b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152b4:	f383 8811 	msr	BASEPRI, r3
 80152b8:	f3bf 8f6f 	isb	sy
 80152bc:	f3bf 8f4f 	dsb	sy
 80152c0:	613b      	str	r3, [r7, #16]
 80152c2:	e7fe      	b.n	80152c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80152c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c6:	685a      	ldr	r2, [r3, #4]
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	1ad2      	subs	r2, r2, r3
 80152cc:	69bb      	ldr	r3, [r7, #24]
 80152ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80152d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d2:	687a      	ldr	r2, [r7, #4]
 80152d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80152d6:	69b8      	ldr	r0, [r7, #24]
 80152d8:	f000 f8f6 	bl	80154c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80152dc:	4b1a      	ldr	r3, [pc, #104]	; (8015348 <pvPortMalloc+0x178>)
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	1ad3      	subs	r3, r2, r3
 80152e6:	4a18      	ldr	r2, [pc, #96]	; (8015348 <pvPortMalloc+0x178>)
 80152e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80152ea:	4b17      	ldr	r3, [pc, #92]	; (8015348 <pvPortMalloc+0x178>)
 80152ec:	681a      	ldr	r2, [r3, #0]
 80152ee:	4b18      	ldr	r3, [pc, #96]	; (8015350 <pvPortMalloc+0x180>)
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	429a      	cmp	r2, r3
 80152f4:	d203      	bcs.n	80152fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80152f6:	4b14      	ldr	r3, [pc, #80]	; (8015348 <pvPortMalloc+0x178>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	4a15      	ldr	r2, [pc, #84]	; (8015350 <pvPortMalloc+0x180>)
 80152fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80152fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015300:	685a      	ldr	r2, [r3, #4]
 8015302:	4b10      	ldr	r3, [pc, #64]	; (8015344 <pvPortMalloc+0x174>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	431a      	orrs	r2, r3
 8015308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801530a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801530e:	2200      	movs	r2, #0
 8015310:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015312:	f001 fa1f 	bl	8016754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015316:	69fb      	ldr	r3, [r7, #28]
 8015318:	f003 0307 	and.w	r3, r3, #7
 801531c:	2b00      	cmp	r3, #0
 801531e:	d009      	beq.n	8015334 <pvPortMalloc+0x164>
 8015320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015324:	f383 8811 	msr	BASEPRI, r3
 8015328:	f3bf 8f6f 	isb	sy
 801532c:	f3bf 8f4f 	dsb	sy
 8015330:	60fb      	str	r3, [r7, #12]
 8015332:	e7fe      	b.n	8015332 <pvPortMalloc+0x162>
	return pvReturn;
 8015334:	69fb      	ldr	r3, [r7, #28]
}
 8015336:	4618      	mov	r0, r3
 8015338:	3728      	adds	r7, #40	; 0x28
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	2000924c 	.word	0x2000924c
 8015344:	20009258 	.word	0x20009258
 8015348:	20009250 	.word	0x20009250
 801534c:	20009244 	.word	0x20009244
 8015350:	20009254 	.word	0x20009254

08015354 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b086      	sub	sp, #24
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d046      	beq.n	80153f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015366:	2308      	movs	r3, #8
 8015368:	425b      	negs	r3, r3
 801536a:	697a      	ldr	r2, [r7, #20]
 801536c:	4413      	add	r3, r2
 801536e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015374:	693b      	ldr	r3, [r7, #16]
 8015376:	685a      	ldr	r2, [r3, #4]
 8015378:	4b20      	ldr	r3, [pc, #128]	; (80153fc <vPortFree+0xa8>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	4013      	ands	r3, r2
 801537e:	2b00      	cmp	r3, #0
 8015380:	d109      	bne.n	8015396 <vPortFree+0x42>
 8015382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015386:	f383 8811 	msr	BASEPRI, r3
 801538a:	f3bf 8f6f 	isb	sy
 801538e:	f3bf 8f4f 	dsb	sy
 8015392:	60fb      	str	r3, [r7, #12]
 8015394:	e7fe      	b.n	8015394 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015396:	693b      	ldr	r3, [r7, #16]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d009      	beq.n	80153b2 <vPortFree+0x5e>
 801539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a2:	f383 8811 	msr	BASEPRI, r3
 80153a6:	f3bf 8f6f 	isb	sy
 80153aa:	f3bf 8f4f 	dsb	sy
 80153ae:	60bb      	str	r3, [r7, #8]
 80153b0:	e7fe      	b.n	80153b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80153b2:	693b      	ldr	r3, [r7, #16]
 80153b4:	685a      	ldr	r2, [r3, #4]
 80153b6:	4b11      	ldr	r3, [pc, #68]	; (80153fc <vPortFree+0xa8>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	4013      	ands	r3, r2
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d019      	beq.n	80153f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d115      	bne.n	80153f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	685a      	ldr	r2, [r3, #4]
 80153cc:	4b0b      	ldr	r3, [pc, #44]	; (80153fc <vPortFree+0xa8>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	43db      	mvns	r3, r3
 80153d2:	401a      	ands	r2, r3
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80153d8:	f001 f9ae 	bl	8016738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	685a      	ldr	r2, [r3, #4]
 80153e0:	4b07      	ldr	r3, [pc, #28]	; (8015400 <vPortFree+0xac>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	4413      	add	r3, r2
 80153e6:	4a06      	ldr	r2, [pc, #24]	; (8015400 <vPortFree+0xac>)
 80153e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80153ea:	6938      	ldr	r0, [r7, #16]
 80153ec:	f000 f86c 	bl	80154c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80153f0:	f001 f9b0 	bl	8016754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80153f4:	bf00      	nop
 80153f6:	3718      	adds	r7, #24
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	20009258 	.word	0x20009258
 8015400:	20009250 	.word	0x20009250

08015404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015404:	b480      	push	{r7}
 8015406:	b085      	sub	sp, #20
 8015408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801540a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 801540e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015410:	4b27      	ldr	r3, [pc, #156]	; (80154b0 <prvHeapInit+0xac>)
 8015412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	f003 0307 	and.w	r3, r3, #7
 801541a:	2b00      	cmp	r3, #0
 801541c:	d00c      	beq.n	8015438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	3307      	adds	r3, #7
 8015422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	f023 0307 	bic.w	r3, r3, #7
 801542a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801542c:	68ba      	ldr	r2, [r7, #8]
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	1ad3      	subs	r3, r2, r3
 8015432:	4a1f      	ldr	r2, [pc, #124]	; (80154b0 <prvHeapInit+0xac>)
 8015434:	4413      	add	r3, r2
 8015436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801543c:	4a1d      	ldr	r2, [pc, #116]	; (80154b4 <prvHeapInit+0xb0>)
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015442:	4b1c      	ldr	r3, [pc, #112]	; (80154b4 <prvHeapInit+0xb0>)
 8015444:	2200      	movs	r2, #0
 8015446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015448:	687a      	ldr	r2, [r7, #4]
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	4413      	add	r3, r2
 801544e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015450:	2208      	movs	r2, #8
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	1a9b      	subs	r3, r3, r2
 8015456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	f023 0307 	bic.w	r3, r3, #7
 801545e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	4a15      	ldr	r2, [pc, #84]	; (80154b8 <prvHeapInit+0xb4>)
 8015464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015466:	4b14      	ldr	r3, [pc, #80]	; (80154b8 <prvHeapInit+0xb4>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	2200      	movs	r2, #0
 801546c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801546e:	4b12      	ldr	r3, [pc, #72]	; (80154b8 <prvHeapInit+0xb4>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	2200      	movs	r2, #0
 8015474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	68fa      	ldr	r2, [r7, #12]
 801547e:	1ad2      	subs	r2, r2, r3
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015484:	4b0c      	ldr	r3, [pc, #48]	; (80154b8 <prvHeapInit+0xb4>)
 8015486:	681a      	ldr	r2, [r3, #0]
 8015488:	683b      	ldr	r3, [r7, #0]
 801548a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	4a0a      	ldr	r2, [pc, #40]	; (80154bc <prvHeapInit+0xb8>)
 8015492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	685b      	ldr	r3, [r3, #4]
 8015498:	4a09      	ldr	r2, [pc, #36]	; (80154c0 <prvHeapInit+0xbc>)
 801549a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801549c:	4b09      	ldr	r3, [pc, #36]	; (80154c4 <prvHeapInit+0xc0>)
 801549e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80154a2:	601a      	str	r2, [r3, #0]
}
 80154a4:	bf00      	nop
 80154a6:	3714      	adds	r7, #20
 80154a8:	46bd      	mov	sp, r7
 80154aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ae:	4770      	bx	lr
 80154b0:	20000244 	.word	0x20000244
 80154b4:	20009244 	.word	0x20009244
 80154b8:	2000924c 	.word	0x2000924c
 80154bc:	20009254 	.word	0x20009254
 80154c0:	20009250 	.word	0x20009250
 80154c4:	20009258 	.word	0x20009258

080154c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80154c8:	b480      	push	{r7}
 80154ca:	b085      	sub	sp, #20
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80154d0:	4b28      	ldr	r3, [pc, #160]	; (8015574 <prvInsertBlockIntoFreeList+0xac>)
 80154d2:	60fb      	str	r3, [r7, #12]
 80154d4:	e002      	b.n	80154dc <prvInsertBlockIntoFreeList+0x14>
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	60fb      	str	r3, [r7, #12]
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	681a      	ldr	r2, [r3, #0]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d3f7      	bcc.n	80154d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	68ba      	ldr	r2, [r7, #8]
 80154f0:	441a      	add	r2, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	429a      	cmp	r2, r3
 80154f6:	d108      	bne.n	801550a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	685a      	ldr	r2, [r3, #4]
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	685b      	ldr	r3, [r3, #4]
 8015500:	441a      	add	r2, r3
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	68ba      	ldr	r2, [r7, #8]
 8015514:	441a      	add	r2, r3
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	429a      	cmp	r2, r3
 801551c:	d118      	bne.n	8015550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	681a      	ldr	r2, [r3, #0]
 8015522:	4b15      	ldr	r3, [pc, #84]	; (8015578 <prvInsertBlockIntoFreeList+0xb0>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	429a      	cmp	r2, r3
 8015528:	d00d      	beq.n	8015546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	685a      	ldr	r2, [r3, #4]
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	441a      	add	r2, r3
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	681a      	ldr	r2, [r3, #0]
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	601a      	str	r2, [r3, #0]
 8015544:	e008      	b.n	8015558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015546:	4b0c      	ldr	r3, [pc, #48]	; (8015578 <prvInsertBlockIntoFreeList+0xb0>)
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	601a      	str	r2, [r3, #0]
 801554e:	e003      	b.n	8015558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	681a      	ldr	r2, [r3, #0]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015558:	68fa      	ldr	r2, [r7, #12]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	429a      	cmp	r2, r3
 801555e:	d002      	beq.n	8015566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	687a      	ldr	r2, [r7, #4]
 8015564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015566:	bf00      	nop
 8015568:	3714      	adds	r7, #20
 801556a:	46bd      	mov	sp, r7
 801556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015570:	4770      	bx	lr
 8015572:	bf00      	nop
 8015574:	20009244 	.word	0x20009244
 8015578:	2000924c 	.word	0x2000924c

0801557c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b084      	sub	sp, #16
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d109      	bne.n	80155a4 <xQueueGenericReset+0x28>
 8015590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015594:	f383 8811 	msr	BASEPRI, r3
 8015598:	f3bf 8f6f 	isb	sy
 801559c:	f3bf 8f4f 	dsb	sy
 80155a0:	60bb      	str	r3, [r7, #8]
 80155a2:	e7fe      	b.n	80155a2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80155a4:	f7ff fd04 	bl	8014fb0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	681a      	ldr	r2, [r3, #0]
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155b0:	68f9      	ldr	r1, [r7, #12]
 80155b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80155b4:	fb01 f303 	mul.w	r3, r1, r3
 80155b8:	441a      	add	r2, r3
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2200      	movs	r2, #0
 80155c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	681a      	ldr	r2, [r3, #0]
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	681a      	ldr	r2, [r3, #0]
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155d4:	3b01      	subs	r3, #1
 80155d6:	68f9      	ldr	r1, [r7, #12]
 80155d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80155da:	fb01 f303 	mul.w	r3, r1, r3
 80155de:	441a      	add	r2, r3
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	22ff      	movs	r2, #255	; 0xff
 80155e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	22ff      	movs	r2, #255	; 0xff
 80155f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d114      	bne.n	8015624 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	691b      	ldr	r3, [r3, #16]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d01a      	beq.n	8015638 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	3310      	adds	r3, #16
 8015606:	4618      	mov	r0, r3
 8015608:	f001 fab8 	bl	8016b7c <xTaskRemoveFromEventList>
 801560c:	4603      	mov	r3, r0
 801560e:	2b00      	cmp	r3, #0
 8015610:	d012      	beq.n	8015638 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015612:	4b0d      	ldr	r3, [pc, #52]	; (8015648 <xQueueGenericReset+0xcc>)
 8015614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015618:	601a      	str	r2, [r3, #0]
 801561a:	f3bf 8f4f 	dsb	sy
 801561e:	f3bf 8f6f 	isb	sy
 8015622:	e009      	b.n	8015638 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	3310      	adds	r3, #16
 8015628:	4618      	mov	r0, r3
 801562a:	f7ff fb04 	bl	8014c36 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	3324      	adds	r3, #36	; 0x24
 8015632:	4618      	mov	r0, r3
 8015634:	f7ff faff 	bl	8014c36 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015638:	f7ff fce8 	bl	801500c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801563c:	2301      	movs	r3, #1
}
 801563e:	4618      	mov	r0, r3
 8015640:	3710      	adds	r7, #16
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}
 8015646:	bf00      	nop
 8015648:	e000ed04 	.word	0xe000ed04

0801564c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801564c:	b580      	push	{r7, lr}
 801564e:	b08e      	sub	sp, #56	; 0x38
 8015650:	af02      	add	r7, sp, #8
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	607a      	str	r2, [r7, #4]
 8015658:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d109      	bne.n	8015674 <xQueueGenericCreateStatic+0x28>
 8015660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015664:	f383 8811 	msr	BASEPRI, r3
 8015668:	f3bf 8f6f 	isb	sy
 801566c:	f3bf 8f4f 	dsb	sy
 8015670:	62bb      	str	r3, [r7, #40]	; 0x28
 8015672:	e7fe      	b.n	8015672 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d109      	bne.n	801568e <xQueueGenericCreateStatic+0x42>
 801567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801567e:	f383 8811 	msr	BASEPRI, r3
 8015682:	f3bf 8f6f 	isb	sy
 8015686:	f3bf 8f4f 	dsb	sy
 801568a:	627b      	str	r3, [r7, #36]	; 0x24
 801568c:	e7fe      	b.n	801568c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d002      	beq.n	801569a <xQueueGenericCreateStatic+0x4e>
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d001      	beq.n	801569e <xQueueGenericCreateStatic+0x52>
 801569a:	2301      	movs	r3, #1
 801569c:	e000      	b.n	80156a0 <xQueueGenericCreateStatic+0x54>
 801569e:	2300      	movs	r3, #0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d109      	bne.n	80156b8 <xQueueGenericCreateStatic+0x6c>
 80156a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156a8:	f383 8811 	msr	BASEPRI, r3
 80156ac:	f3bf 8f6f 	isb	sy
 80156b0:	f3bf 8f4f 	dsb	sy
 80156b4:	623b      	str	r3, [r7, #32]
 80156b6:	e7fe      	b.n	80156b6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d102      	bne.n	80156c4 <xQueueGenericCreateStatic+0x78>
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d101      	bne.n	80156c8 <xQueueGenericCreateStatic+0x7c>
 80156c4:	2301      	movs	r3, #1
 80156c6:	e000      	b.n	80156ca <xQueueGenericCreateStatic+0x7e>
 80156c8:	2300      	movs	r3, #0
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d109      	bne.n	80156e2 <xQueueGenericCreateStatic+0x96>
 80156ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156d2:	f383 8811 	msr	BASEPRI, r3
 80156d6:	f3bf 8f6f 	isb	sy
 80156da:	f3bf 8f4f 	dsb	sy
 80156de:	61fb      	str	r3, [r7, #28]
 80156e0:	e7fe      	b.n	80156e0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80156e2:	2350      	movs	r3, #80	; 0x50
 80156e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	2b50      	cmp	r3, #80	; 0x50
 80156ea:	d009      	beq.n	8015700 <xQueueGenericCreateStatic+0xb4>
 80156ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f0:	f383 8811 	msr	BASEPRI, r3
 80156f4:	f3bf 8f6f 	isb	sy
 80156f8:	f3bf 8f4f 	dsb	sy
 80156fc:	61bb      	str	r3, [r7, #24]
 80156fe:	e7fe      	b.n	80156fe <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015706:	2b00      	cmp	r3, #0
 8015708:	d00d      	beq.n	8015726 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570c:	2201      	movs	r2, #1
 801570e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015712:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015718:	9300      	str	r3, [sp, #0]
 801571a:	4613      	mov	r3, r2
 801571c:	687a      	ldr	r2, [r7, #4]
 801571e:	68b9      	ldr	r1, [r7, #8]
 8015720:	68f8      	ldr	r0, [r7, #12]
 8015722:	f000 f842 	bl	80157aa <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8015726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015728:	4618      	mov	r0, r3
 801572a:	3730      	adds	r7, #48	; 0x30
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}

08015730 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015730:	b580      	push	{r7, lr}
 8015732:	b08a      	sub	sp, #40	; 0x28
 8015734:	af02      	add	r7, sp, #8
 8015736:	60f8      	str	r0, [r7, #12]
 8015738:	60b9      	str	r1, [r7, #8]
 801573a:	4613      	mov	r3, r2
 801573c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d109      	bne.n	8015758 <xQueueGenericCreate+0x28>
 8015744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015748:	f383 8811 	msr	BASEPRI, r3
 801574c:	f3bf 8f6f 	isb	sy
 8015750:	f3bf 8f4f 	dsb	sy
 8015754:	613b      	str	r3, [r7, #16]
 8015756:	e7fe      	b.n	8015756 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d102      	bne.n	8015764 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801575e:	2300      	movs	r3, #0
 8015760:	61fb      	str	r3, [r7, #28]
 8015762:	e004      	b.n	801576e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	68ba      	ldr	r2, [r7, #8]
 8015768:	fb02 f303 	mul.w	r3, r2, r3
 801576c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801576e:	69fb      	ldr	r3, [r7, #28]
 8015770:	3350      	adds	r3, #80	; 0x50
 8015772:	4618      	mov	r0, r3
 8015774:	f7ff fd2c 	bl	80151d0 <pvPortMalloc>
 8015778:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801577a:	69bb      	ldr	r3, [r7, #24]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d00f      	beq.n	80157a0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8015780:	69bb      	ldr	r3, [r7, #24]
 8015782:	3350      	adds	r3, #80	; 0x50
 8015784:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015786:	69bb      	ldr	r3, [r7, #24]
 8015788:	2200      	movs	r2, #0
 801578a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801578e:	79fa      	ldrb	r2, [r7, #7]
 8015790:	69bb      	ldr	r3, [r7, #24]
 8015792:	9300      	str	r3, [sp, #0]
 8015794:	4613      	mov	r3, r2
 8015796:	697a      	ldr	r2, [r7, #20]
 8015798:	68b9      	ldr	r1, [r7, #8]
 801579a:	68f8      	ldr	r0, [r7, #12]
 801579c:	f000 f805 	bl	80157aa <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80157a0:	69bb      	ldr	r3, [r7, #24]
	}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3720      	adds	r7, #32
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}

080157aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80157aa:	b580      	push	{r7, lr}
 80157ac:	b084      	sub	sp, #16
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	60f8      	str	r0, [r7, #12]
 80157b2:	60b9      	str	r1, [r7, #8]
 80157b4:	607a      	str	r2, [r7, #4]
 80157b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d103      	bne.n	80157c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80157be:	69bb      	ldr	r3, [r7, #24]
 80157c0:	69ba      	ldr	r2, [r7, #24]
 80157c2:	601a      	str	r2, [r3, #0]
 80157c4:	e002      	b.n	80157cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80157c6:	69bb      	ldr	r3, [r7, #24]
 80157c8:	687a      	ldr	r2, [r7, #4]
 80157ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80157cc:	69bb      	ldr	r3, [r7, #24]
 80157ce:	68fa      	ldr	r2, [r7, #12]
 80157d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	68ba      	ldr	r2, [r7, #8]
 80157d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80157d8:	2101      	movs	r1, #1
 80157da:	69b8      	ldr	r0, [r7, #24]
 80157dc:	f7ff fece 	bl	801557c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80157e0:	69bb      	ldr	r3, [r7, #24]
 80157e2:	78fa      	ldrb	r2, [r7, #3]
 80157e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80157e8:	bf00      	nop
 80157ea:	3710      	adds	r7, #16
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d00e      	beq.n	801581c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	2200      	movs	r2, #0
 8015802:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	2200      	movs	r2, #0
 8015808:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	2200      	movs	r2, #0
 801580e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015810:	2300      	movs	r3, #0
 8015812:	2200      	movs	r2, #0
 8015814:	2100      	movs	r1, #0
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f000 f838 	bl	801588c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801581c:	bf00      	nop
 801581e:	3708      	adds	r7, #8
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015824:	b580      	push	{r7, lr}
 8015826:	b086      	sub	sp, #24
 8015828:	af00      	add	r7, sp, #0
 801582a:	4603      	mov	r3, r0
 801582c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801582e:	2301      	movs	r3, #1
 8015830:	617b      	str	r3, [r7, #20]
 8015832:	2300      	movs	r3, #0
 8015834:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015836:	79fb      	ldrb	r3, [r7, #7]
 8015838:	461a      	mov	r2, r3
 801583a:	6939      	ldr	r1, [r7, #16]
 801583c:	6978      	ldr	r0, [r7, #20]
 801583e:	f7ff ff77 	bl	8015730 <xQueueGenericCreate>
 8015842:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8015844:	68f8      	ldr	r0, [r7, #12]
 8015846:	f7ff ffd3 	bl	80157f0 <prvInitialiseMutex>

		return pxNewQueue;
 801584a:	68fb      	ldr	r3, [r7, #12]
	}
 801584c:	4618      	mov	r0, r3
 801584e:	3718      	adds	r7, #24
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}

08015854 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8015854:	b580      	push	{r7, lr}
 8015856:	b088      	sub	sp, #32
 8015858:	af02      	add	r7, sp, #8
 801585a:	4603      	mov	r3, r0
 801585c:	6039      	str	r1, [r7, #0]
 801585e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015860:	2301      	movs	r3, #1
 8015862:	617b      	str	r3, [r7, #20]
 8015864:	2300      	movs	r3, #0
 8015866:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015868:	79fb      	ldrb	r3, [r7, #7]
 801586a:	9300      	str	r3, [sp, #0]
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	2200      	movs	r2, #0
 8015870:	6939      	ldr	r1, [r7, #16]
 8015872:	6978      	ldr	r0, [r7, #20]
 8015874:	f7ff feea 	bl	801564c <xQueueGenericCreateStatic>
 8015878:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 801587a:	68f8      	ldr	r0, [r7, #12]
 801587c:	f7ff ffb8 	bl	80157f0 <prvInitialiseMutex>

		return pxNewQueue;
 8015880:	68fb      	ldr	r3, [r7, #12]
	}
 8015882:	4618      	mov	r0, r3
 8015884:	3718      	adds	r7, #24
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
	...

0801588c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b08e      	sub	sp, #56	; 0x38
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
 8015898:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801589a:	2300      	movs	r3, #0
 801589c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80158a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d109      	bne.n	80158bc <xQueueGenericSend+0x30>
 80158a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158ac:	f383 8811 	msr	BASEPRI, r3
 80158b0:	f3bf 8f6f 	isb	sy
 80158b4:	f3bf 8f4f 	dsb	sy
 80158b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80158ba:	e7fe      	b.n	80158ba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d103      	bne.n	80158ca <xQueueGenericSend+0x3e>
 80158c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d101      	bne.n	80158ce <xQueueGenericSend+0x42>
 80158ca:	2301      	movs	r3, #1
 80158cc:	e000      	b.n	80158d0 <xQueueGenericSend+0x44>
 80158ce:	2300      	movs	r3, #0
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d109      	bne.n	80158e8 <xQueueGenericSend+0x5c>
 80158d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158d8:	f383 8811 	msr	BASEPRI, r3
 80158dc:	f3bf 8f6f 	isb	sy
 80158e0:	f3bf 8f4f 	dsb	sy
 80158e4:	627b      	str	r3, [r7, #36]	; 0x24
 80158e6:	e7fe      	b.n	80158e6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	2b02      	cmp	r3, #2
 80158ec:	d103      	bne.n	80158f6 <xQueueGenericSend+0x6a>
 80158ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158f2:	2b01      	cmp	r3, #1
 80158f4:	d101      	bne.n	80158fa <xQueueGenericSend+0x6e>
 80158f6:	2301      	movs	r3, #1
 80158f8:	e000      	b.n	80158fc <xQueueGenericSend+0x70>
 80158fa:	2300      	movs	r3, #0
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d109      	bne.n	8015914 <xQueueGenericSend+0x88>
 8015900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015904:	f383 8811 	msr	BASEPRI, r3
 8015908:	f3bf 8f6f 	isb	sy
 801590c:	f3bf 8f4f 	dsb	sy
 8015910:	623b      	str	r3, [r7, #32]
 8015912:	e7fe      	b.n	8015912 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015914:	f001 fb0a 	bl	8016f2c <xTaskGetSchedulerState>
 8015918:	4603      	mov	r3, r0
 801591a:	2b00      	cmp	r3, #0
 801591c:	d102      	bne.n	8015924 <xQueueGenericSend+0x98>
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d101      	bne.n	8015928 <xQueueGenericSend+0x9c>
 8015924:	2301      	movs	r3, #1
 8015926:	e000      	b.n	801592a <xQueueGenericSend+0x9e>
 8015928:	2300      	movs	r3, #0
 801592a:	2b00      	cmp	r3, #0
 801592c:	d109      	bne.n	8015942 <xQueueGenericSend+0xb6>
 801592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015932:	f383 8811 	msr	BASEPRI, r3
 8015936:	f3bf 8f6f 	isb	sy
 801593a:	f3bf 8f4f 	dsb	sy
 801593e:	61fb      	str	r3, [r7, #28]
 8015940:	e7fe      	b.n	8015940 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015942:	f7ff fb35 	bl	8014fb0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801594e:	429a      	cmp	r2, r3
 8015950:	d302      	bcc.n	8015958 <xQueueGenericSend+0xcc>
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	2b02      	cmp	r3, #2
 8015956:	d129      	bne.n	80159ac <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015958:	683a      	ldr	r2, [r7, #0]
 801595a:	68b9      	ldr	r1, [r7, #8]
 801595c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801595e:	f000 fb96 	bl	801608e <prvCopyDataToQueue>
 8015962:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015968:	2b00      	cmp	r3, #0
 801596a:	d010      	beq.n	801598e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801596e:	3324      	adds	r3, #36	; 0x24
 8015970:	4618      	mov	r0, r3
 8015972:	f001 f903 	bl	8016b7c <xTaskRemoveFromEventList>
 8015976:	4603      	mov	r3, r0
 8015978:	2b00      	cmp	r3, #0
 801597a:	d013      	beq.n	80159a4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801597c:	4b3f      	ldr	r3, [pc, #252]	; (8015a7c <xQueueGenericSend+0x1f0>)
 801597e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015982:	601a      	str	r2, [r3, #0]
 8015984:	f3bf 8f4f 	dsb	sy
 8015988:	f3bf 8f6f 	isb	sy
 801598c:	e00a      	b.n	80159a4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015990:	2b00      	cmp	r3, #0
 8015992:	d007      	beq.n	80159a4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015994:	4b39      	ldr	r3, [pc, #228]	; (8015a7c <xQueueGenericSend+0x1f0>)
 8015996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801599a:	601a      	str	r2, [r3, #0]
 801599c:	f3bf 8f4f 	dsb	sy
 80159a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80159a4:	f7ff fb32 	bl	801500c <vPortExitCritical>
				return pdPASS;
 80159a8:	2301      	movs	r3, #1
 80159aa:	e063      	b.n	8015a74 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d103      	bne.n	80159ba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80159b2:	f7ff fb2b 	bl	801500c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80159b6:	2300      	movs	r3, #0
 80159b8:	e05c      	b.n	8015a74 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80159ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d106      	bne.n	80159ce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80159c0:	f107 0314 	add.w	r3, r7, #20
 80159c4:	4618      	mov	r0, r3
 80159c6:	f001 f93b 	bl	8016c40 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80159ca:	2301      	movs	r3, #1
 80159cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80159ce:	f7ff fb1d 	bl	801500c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80159d2:	f000 feb1 	bl	8016738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80159d6:	f7ff faeb 	bl	8014fb0 <vPortEnterCritical>
 80159da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80159e0:	b25b      	sxtb	r3, r3
 80159e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159e6:	d103      	bne.n	80159f0 <xQueueGenericSend+0x164>
 80159e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ea:	2200      	movs	r2, #0
 80159ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80159f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80159f6:	b25b      	sxtb	r3, r3
 80159f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159fc:	d103      	bne.n	8015a06 <xQueueGenericSend+0x17a>
 80159fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a00:	2200      	movs	r2, #0
 8015a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015a06:	f7ff fb01 	bl	801500c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015a0a:	1d3a      	adds	r2, r7, #4
 8015a0c:	f107 0314 	add.w	r3, r7, #20
 8015a10:	4611      	mov	r1, r2
 8015a12:	4618      	mov	r0, r3
 8015a14:	f001 f938 	bl	8016c88 <xTaskCheckForTimeOut>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d124      	bne.n	8015a68 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a20:	f000 fc2d 	bl	801627e <prvIsQueueFull>
 8015a24:	4603      	mov	r3, r0
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d018      	beq.n	8015a5c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a2c:	3310      	adds	r3, #16
 8015a2e:	687a      	ldr	r2, [r7, #4]
 8015a30:	4611      	mov	r1, r2
 8015a32:	4618      	mov	r0, r3
 8015a34:	f001 f87e 	bl	8016b34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a3a:	f000 fbb8 	bl	80161ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015a3e:	f000 fe89 	bl	8016754 <xTaskResumeAll>
 8015a42:	4603      	mov	r3, r0
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	f47f af7c 	bne.w	8015942 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8015a4a:	4b0c      	ldr	r3, [pc, #48]	; (8015a7c <xQueueGenericSend+0x1f0>)
 8015a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a50:	601a      	str	r2, [r3, #0]
 8015a52:	f3bf 8f4f 	dsb	sy
 8015a56:	f3bf 8f6f 	isb	sy
 8015a5a:	e772      	b.n	8015942 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a5e:	f000 fba6 	bl	80161ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015a62:	f000 fe77 	bl	8016754 <xTaskResumeAll>
 8015a66:	e76c      	b.n	8015942 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a6a:	f000 fba0 	bl	80161ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a6e:	f000 fe71 	bl	8016754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015a72:	2300      	movs	r3, #0
		}
	}
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	3738      	adds	r7, #56	; 0x38
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}
 8015a7c:	e000ed04 	.word	0xe000ed04

08015a80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b08e      	sub	sp, #56	; 0x38
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	60f8      	str	r0, [r7, #12]
 8015a88:	60b9      	str	r1, [r7, #8]
 8015a8a:	607a      	str	r2, [r7, #4]
 8015a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d109      	bne.n	8015aac <xQueueGenericSendFromISR+0x2c>
 8015a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a9c:	f383 8811 	msr	BASEPRI, r3
 8015aa0:	f3bf 8f6f 	isb	sy
 8015aa4:	f3bf 8f4f 	dsb	sy
 8015aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8015aaa:	e7fe      	b.n	8015aaa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015aac:	68bb      	ldr	r3, [r7, #8]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d103      	bne.n	8015aba <xQueueGenericSendFromISR+0x3a>
 8015ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d101      	bne.n	8015abe <xQueueGenericSendFromISR+0x3e>
 8015aba:	2301      	movs	r3, #1
 8015abc:	e000      	b.n	8015ac0 <xQueueGenericSendFromISR+0x40>
 8015abe:	2300      	movs	r3, #0
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d109      	bne.n	8015ad8 <xQueueGenericSendFromISR+0x58>
 8015ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ac8:	f383 8811 	msr	BASEPRI, r3
 8015acc:	f3bf 8f6f 	isb	sy
 8015ad0:	f3bf 8f4f 	dsb	sy
 8015ad4:	623b      	str	r3, [r7, #32]
 8015ad6:	e7fe      	b.n	8015ad6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	2b02      	cmp	r3, #2
 8015adc:	d103      	bne.n	8015ae6 <xQueueGenericSendFromISR+0x66>
 8015ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ae2:	2b01      	cmp	r3, #1
 8015ae4:	d101      	bne.n	8015aea <xQueueGenericSendFromISR+0x6a>
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	e000      	b.n	8015aec <xQueueGenericSendFromISR+0x6c>
 8015aea:	2300      	movs	r3, #0
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d109      	bne.n	8015b04 <xQueueGenericSendFromISR+0x84>
 8015af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af4:	f383 8811 	msr	BASEPRI, r3
 8015af8:	f3bf 8f6f 	isb	sy
 8015afc:	f3bf 8f4f 	dsb	sy
 8015b00:	61fb      	str	r3, [r7, #28]
 8015b02:	e7fe      	b.n	8015b02 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b04:	f7ff fb26 	bl	8015154 <vPortValidateInterruptPriority>
	__asm volatile
 8015b08:	f3ef 8211 	mrs	r2, BASEPRI
 8015b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b10:	f383 8811 	msr	BASEPRI, r3
 8015b14:	f3bf 8f6f 	isb	sy
 8015b18:	f3bf 8f4f 	dsb	sy
 8015b1c:	61ba      	str	r2, [r7, #24]
 8015b1e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015b20:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015b22:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	d302      	bcc.n	8015b36 <xQueueGenericSendFromISR+0xb6>
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	2b02      	cmp	r3, #2
 8015b34:	d12c      	bne.n	8015b90 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015b40:	683a      	ldr	r2, [r7, #0]
 8015b42:	68b9      	ldr	r1, [r7, #8]
 8015b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b46:	f000 faa2 	bl	801608e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015b4a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b52:	d112      	bne.n	8015b7a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d016      	beq.n	8015b8a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b5e:	3324      	adds	r3, #36	; 0x24
 8015b60:	4618      	mov	r0, r3
 8015b62:	f001 f80b 	bl	8016b7c <xTaskRemoveFromEventList>
 8015b66:	4603      	mov	r3, r0
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d00e      	beq.n	8015b8a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d00b      	beq.n	8015b8a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2201      	movs	r2, #1
 8015b76:	601a      	str	r2, [r3, #0]
 8015b78:	e007      	b.n	8015b8a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015b7e:	3301      	adds	r3, #1
 8015b80:	b2db      	uxtb	r3, r3
 8015b82:	b25a      	sxtb	r2, r3
 8015b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015b8e:	e001      	b.n	8015b94 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015b90:	2300      	movs	r3, #0
 8015b92:	637b      	str	r3, [r7, #52]	; 0x34
 8015b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b96:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3738      	adds	r7, #56	; 0x38
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}

08015ba8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b08e      	sub	sp, #56	; 0x38
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
 8015bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d109      	bne.n	8015bd0 <xQueueGiveFromISR+0x28>
	__asm volatile
 8015bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc0:	f383 8811 	msr	BASEPRI, r3
 8015bc4:	f3bf 8f6f 	isb	sy
 8015bc8:	f3bf 8f4f 	dsb	sy
 8015bcc:	623b      	str	r3, [r7, #32]
 8015bce:	e7fe      	b.n	8015bce <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d009      	beq.n	8015bec <xQueueGiveFromISR+0x44>
 8015bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bdc:	f383 8811 	msr	BASEPRI, r3
 8015be0:	f3bf 8f6f 	isb	sy
 8015be4:	f3bf 8f4f 	dsb	sy
 8015be8:	61fb      	str	r3, [r7, #28]
 8015bea:	e7fe      	b.n	8015bea <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8015bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d103      	bne.n	8015bfc <xQueueGiveFromISR+0x54>
 8015bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf6:	685b      	ldr	r3, [r3, #4]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d101      	bne.n	8015c00 <xQueueGiveFromISR+0x58>
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	e000      	b.n	8015c02 <xQueueGiveFromISR+0x5a>
 8015c00:	2300      	movs	r3, #0
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d109      	bne.n	8015c1a <xQueueGiveFromISR+0x72>
 8015c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c0a:	f383 8811 	msr	BASEPRI, r3
 8015c0e:	f3bf 8f6f 	isb	sy
 8015c12:	f3bf 8f4f 	dsb	sy
 8015c16:	61bb      	str	r3, [r7, #24]
 8015c18:	e7fe      	b.n	8015c18 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c1a:	f7ff fa9b 	bl	8015154 <vPortValidateInterruptPriority>
	__asm volatile
 8015c1e:	f3ef 8211 	mrs	r2, BASEPRI
 8015c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c26:	f383 8811 	msr	BASEPRI, r3
 8015c2a:	f3bf 8f6f 	isb	sy
 8015c2e:	f3bf 8f4f 	dsb	sy
 8015c32:	617a      	str	r2, [r7, #20]
 8015c34:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015c36:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d92b      	bls.n	8015ca2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8015c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c56:	1c5a      	adds	r2, r3, #1
 8015c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015c5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c64:	d112      	bne.n	8015c8c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d016      	beq.n	8015c9c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c70:	3324      	adds	r3, #36	; 0x24
 8015c72:	4618      	mov	r0, r3
 8015c74:	f000 ff82 	bl	8016b7c <xTaskRemoveFromEventList>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d00e      	beq.n	8015c9c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d00b      	beq.n	8015c9c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015c84:	683b      	ldr	r3, [r7, #0]
 8015c86:	2201      	movs	r2, #1
 8015c88:	601a      	str	r2, [r3, #0]
 8015c8a:	e007      	b.n	8015c9c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c90:	3301      	adds	r3, #1
 8015c92:	b2db      	uxtb	r3, r3
 8015c94:	b25a      	sxtb	r2, r3
 8015c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8015ca0:	e001      	b.n	8015ca6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8015ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	3738      	adds	r7, #56	; 0x38
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
	...

08015cbc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b08e      	sub	sp, #56	; 0x38
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	60f8      	str	r0, [r7, #12]
 8015cc4:	60b9      	str	r1, [r7, #8]
 8015cc6:	607a      	str	r2, [r7, #4]
 8015cc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015cca:	2300      	movs	r3, #0
 8015ccc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d109      	bne.n	8015cec <xQueueGenericReceive+0x30>
	__asm volatile
 8015cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cdc:	f383 8811 	msr	BASEPRI, r3
 8015ce0:	f3bf 8f6f 	isb	sy
 8015ce4:	f3bf 8f4f 	dsb	sy
 8015ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8015cea:	e7fe      	b.n	8015cea <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015cec:	68bb      	ldr	r3, [r7, #8]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d103      	bne.n	8015cfa <xQueueGenericReceive+0x3e>
 8015cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d101      	bne.n	8015cfe <xQueueGenericReceive+0x42>
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	e000      	b.n	8015d00 <xQueueGenericReceive+0x44>
 8015cfe:	2300      	movs	r3, #0
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d109      	bne.n	8015d18 <xQueueGenericReceive+0x5c>
 8015d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d08:	f383 8811 	msr	BASEPRI, r3
 8015d0c:	f3bf 8f6f 	isb	sy
 8015d10:	f3bf 8f4f 	dsb	sy
 8015d14:	623b      	str	r3, [r7, #32]
 8015d16:	e7fe      	b.n	8015d16 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015d18:	f001 f908 	bl	8016f2c <xTaskGetSchedulerState>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d102      	bne.n	8015d28 <xQueueGenericReceive+0x6c>
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d101      	bne.n	8015d2c <xQueueGenericReceive+0x70>
 8015d28:	2301      	movs	r3, #1
 8015d2a:	e000      	b.n	8015d2e <xQueueGenericReceive+0x72>
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d109      	bne.n	8015d46 <xQueueGenericReceive+0x8a>
 8015d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d36:	f383 8811 	msr	BASEPRI, r3
 8015d3a:	f3bf 8f6f 	isb	sy
 8015d3e:	f3bf 8f4f 	dsb	sy
 8015d42:	61fb      	str	r3, [r7, #28]
 8015d44:	e7fe      	b.n	8015d44 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8015d46:	f7ff f933 	bl	8014fb0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d046      	beq.n	8015de4 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8015d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d58:	68db      	ldr	r3, [r3, #12]
 8015d5a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015d5c:	68b9      	ldr	r1, [r7, #8]
 8015d5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d60:	f000 f9ff 	bl	8016162 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8015d64:	683b      	ldr	r3, [r7, #0]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d121      	bne.n	8015dae <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8015d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6c:	1e5a      	subs	r2, r3, #1
 8015d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d70:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d104      	bne.n	8015d84 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8015d7a:	f001 f9ef 	bl	801715c <pvTaskIncrementMutexHeldCount>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d82:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d86:	691b      	ldr	r3, [r3, #16]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d027      	beq.n	8015ddc <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d8e:	3310      	adds	r3, #16
 8015d90:	4618      	mov	r0, r3
 8015d92:	f000 fef3 	bl	8016b7c <xTaskRemoveFromEventList>
 8015d96:	4603      	mov	r3, r0
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d01f      	beq.n	8015ddc <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8015d9c:	4b4f      	ldr	r3, [pc, #316]	; (8015edc <xQueueGenericReceive+0x220>)
 8015d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015da2:	601a      	str	r2, [r3, #0]
 8015da4:	f3bf 8f4f 	dsb	sy
 8015da8:	f3bf 8f6f 	isb	sy
 8015dac:	e016      	b.n	8015ddc <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8015dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015db2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d00f      	beq.n	8015ddc <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbe:	3324      	adds	r3, #36	; 0x24
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f000 fedb 	bl	8016b7c <xTaskRemoveFromEventList>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d007      	beq.n	8015ddc <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8015dcc:	4b43      	ldr	r3, [pc, #268]	; (8015edc <xQueueGenericReceive+0x220>)
 8015dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dd2:	601a      	str	r2, [r3, #0]
 8015dd4:	f3bf 8f4f 	dsb	sy
 8015dd8:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8015ddc:	f7ff f916 	bl	801500c <vPortExitCritical>
				return pdPASS;
 8015de0:	2301      	movs	r3, #1
 8015de2:	e077      	b.n	8015ed4 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d103      	bne.n	8015df2 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015dea:	f7ff f90f 	bl	801500c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015dee:	2300      	movs	r3, #0
 8015df0:	e070      	b.n	8015ed4 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d106      	bne.n	8015e06 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8015df8:	f107 0314 	add.w	r3, r7, #20
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f000 ff1f 	bl	8016c40 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015e02:	2301      	movs	r3, #1
 8015e04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015e06:	f7ff f901 	bl	801500c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015e0a:	f000 fc95 	bl	8016738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015e0e:	f7ff f8cf 	bl	8014fb0 <vPortEnterCritical>
 8015e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015e18:	b25b      	sxtb	r3, r3
 8015e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e1e:	d103      	bne.n	8015e28 <xQueueGenericReceive+0x16c>
 8015e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e22:	2200      	movs	r2, #0
 8015e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e2e:	b25b      	sxtb	r3, r3
 8015e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e34:	d103      	bne.n	8015e3e <xQueueGenericReceive+0x182>
 8015e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e38:	2200      	movs	r2, #0
 8015e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015e3e:	f7ff f8e5 	bl	801500c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015e42:	1d3a      	adds	r2, r7, #4
 8015e44:	f107 0314 	add.w	r3, r7, #20
 8015e48:	4611      	mov	r1, r2
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f000 ff1c 	bl	8016c88 <xTaskCheckForTimeOut>
 8015e50:	4603      	mov	r3, r0
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d131      	bne.n	8015eba <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e58:	f000 f9fb 	bl	8016252 <prvIsQueueEmpty>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d025      	beq.n	8015eae <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d108      	bne.n	8015e7c <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8015e6a:	f7ff f8a1 	bl	8014fb0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8015e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e70:	685b      	ldr	r3, [r3, #4]
 8015e72:	4618      	mov	r0, r3
 8015e74:	f001 f878 	bl	8016f68 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8015e78:	f7ff f8c8 	bl	801500c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e7e:	3324      	adds	r3, #36	; 0x24
 8015e80:	687a      	ldr	r2, [r7, #4]
 8015e82:	4611      	mov	r1, r2
 8015e84:	4618      	mov	r0, r3
 8015e86:	f000 fe55 	bl	8016b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e8c:	f000 f98f 	bl	80161ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015e90:	f000 fc60 	bl	8016754 <xTaskResumeAll>
 8015e94:	4603      	mov	r3, r0
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	f47f af55 	bne.w	8015d46 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8015e9c:	4b0f      	ldr	r3, [pc, #60]	; (8015edc <xQueueGenericReceive+0x220>)
 8015e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ea2:	601a      	str	r2, [r3, #0]
 8015ea4:	f3bf 8f4f 	dsb	sy
 8015ea8:	f3bf 8f6f 	isb	sy
 8015eac:	e74b      	b.n	8015d46 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015eae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015eb0:	f000 f97d 	bl	80161ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015eb4:	f000 fc4e 	bl	8016754 <xTaskResumeAll>
 8015eb8:	e745      	b.n	8015d46 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8015eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ebc:	f000 f977 	bl	80161ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015ec0:	f000 fc48 	bl	8016754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ec6:	f000 f9c4 	bl	8016252 <prvIsQueueEmpty>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	f43f af3a 	beq.w	8015d46 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015ed2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3738      	adds	r7, #56	; 0x38
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}
 8015edc:	e000ed04 	.word	0xe000ed04

08015ee0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b08e      	sub	sp, #56	; 0x38
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d109      	bne.n	8015f0a <xQueueReceiveFromISR+0x2a>
 8015ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015efa:	f383 8811 	msr	BASEPRI, r3
 8015efe:	f3bf 8f6f 	isb	sy
 8015f02:	f3bf 8f4f 	dsb	sy
 8015f06:	623b      	str	r3, [r7, #32]
 8015f08:	e7fe      	b.n	8015f08 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d103      	bne.n	8015f18 <xQueueReceiveFromISR+0x38>
 8015f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d101      	bne.n	8015f1c <xQueueReceiveFromISR+0x3c>
 8015f18:	2301      	movs	r3, #1
 8015f1a:	e000      	b.n	8015f1e <xQueueReceiveFromISR+0x3e>
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d109      	bne.n	8015f36 <xQueueReceiveFromISR+0x56>
 8015f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f26:	f383 8811 	msr	BASEPRI, r3
 8015f2a:	f3bf 8f6f 	isb	sy
 8015f2e:	f3bf 8f4f 	dsb	sy
 8015f32:	61fb      	str	r3, [r7, #28]
 8015f34:	e7fe      	b.n	8015f34 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015f36:	f7ff f90d 	bl	8015154 <vPortValidateInterruptPriority>
	__asm volatile
 8015f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8015f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f42:	f383 8811 	msr	BASEPRI, r3
 8015f46:	f3bf 8f6f 	isb	sy
 8015f4a:	f3bf 8f4f 	dsb	sy
 8015f4e:	61ba      	str	r2, [r7, #24]
 8015f50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015f52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d02f      	beq.n	8015fc2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015f6c:	68b9      	ldr	r1, [r7, #8]
 8015f6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f70:	f000 f8f7 	bl	8016162 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8015f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f76:	1e5a      	subs	r2, r3, #1
 8015f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015f7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f84:	d112      	bne.n	8015fac <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f88:	691b      	ldr	r3, [r3, #16]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d016      	beq.n	8015fbc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f90:	3310      	adds	r3, #16
 8015f92:	4618      	mov	r0, r3
 8015f94:	f000 fdf2 	bl	8016b7c <xTaskRemoveFromEventList>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d00e      	beq.n	8015fbc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d00b      	beq.n	8015fbc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2201      	movs	r2, #1
 8015fa8:	601a      	str	r2, [r3, #0]
 8015faa:	e007      	b.n	8015fbc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fb0:	3301      	adds	r3, #1
 8015fb2:	b2db      	uxtb	r3, r3
 8015fb4:	b25a      	sxtb	r2, r3
 8015fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8015fc0:	e001      	b.n	8015fc6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8015fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3738      	adds	r7, #56	; 0x38
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}

08015fda <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015fda:	b580      	push	{r7, lr}
 8015fdc:	b084      	sub	sp, #16
 8015fde:	af00      	add	r7, sp, #0
 8015fe0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d109      	bne.n	8015ffc <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8015fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fec:	f383 8811 	msr	BASEPRI, r3
 8015ff0:	f3bf 8f6f 	isb	sy
 8015ff4:	f3bf 8f4f 	dsb	sy
 8015ff8:	60bb      	str	r3, [r7, #8]
 8015ffa:	e7fe      	b.n	8015ffa <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8015ffc:	f7fe ffd8 	bl	8014fb0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016004:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8016006:	f7ff f801 	bl	801500c <vPortExitCritical>

	return uxReturn;
 801600a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801600c:	4618      	mov	r0, r3
 801600e:	3710      	adds	r7, #16
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}

08016014 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8016014:	b480      	push	{r7}
 8016016:	b085      	sub	sp, #20
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d109      	bne.n	8016036 <uxQueueMessagesWaitingFromISR+0x22>
 8016022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016026:	f383 8811 	msr	BASEPRI, r3
 801602a:	f3bf 8f6f 	isb	sy
 801602e:	f3bf 8f4f 	dsb	sy
 8016032:	60bb      	str	r3, [r7, #8]
 8016034:	e7fe      	b.n	8016034 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801603a:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 801603c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801603e:	4618      	mov	r0, r3
 8016040:	3714      	adds	r7, #20
 8016042:	46bd      	mov	sp, r7
 8016044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016048:	4770      	bx	lr

0801604a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801604a:	b580      	push	{r7, lr}
 801604c:	b084      	sub	sp, #16
 801604e:	af00      	add	r7, sp, #0
 8016050:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d109      	bne.n	8016070 <vQueueDelete+0x26>
 801605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016060:	f383 8811 	msr	BASEPRI, r3
 8016064:	f3bf 8f6f 	isb	sy
 8016068:	f3bf 8f4f 	dsb	sy
 801606c:	60bb      	str	r3, [r7, #8]
 801606e:	e7fe      	b.n	801606e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016070:	68f8      	ldr	r0, [r7, #12]
 8016072:	f000 f91d 	bl	80162b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801607c:	2b00      	cmp	r3, #0
 801607e:	d102      	bne.n	8016086 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8016080:	68f8      	ldr	r0, [r7, #12]
 8016082:	f7ff f967 	bl	8015354 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016086:	bf00      	nop
 8016088:	3710      	adds	r7, #16
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801608e:	b580      	push	{r7, lr}
 8016090:	b086      	sub	sp, #24
 8016092:	af00      	add	r7, sp, #0
 8016094:	60f8      	str	r0, [r7, #12]
 8016096:	60b9      	str	r1, [r7, #8]
 8016098:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801609a:	2300      	movs	r3, #0
 801609c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d10d      	bne.n	80160c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d14d      	bne.n	8016150 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	4618      	mov	r0, r3
 80160ba:	f000 ffcb 	bl	8017054 <xTaskPriorityDisinherit>
 80160be:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	2200      	movs	r2, #0
 80160c4:	605a      	str	r2, [r3, #4]
 80160c6:	e043      	b.n	8016150 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d119      	bne.n	8016102 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	6898      	ldr	r0, [r3, #8]
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160d6:	461a      	mov	r2, r3
 80160d8:	68b9      	ldr	r1, [r7, #8]
 80160da:	f010 fbd4 	bl	8026886 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	689a      	ldr	r2, [r3, #8]
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160e6:	441a      	add	r2, r3
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	689a      	ldr	r2, [r3, #8]
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	685b      	ldr	r3, [r3, #4]
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d32b      	bcc.n	8016150 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	681a      	ldr	r2, [r3, #0]
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	609a      	str	r2, [r3, #8]
 8016100:	e026      	b.n	8016150 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	68d8      	ldr	r0, [r3, #12]
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801610a:	461a      	mov	r2, r3
 801610c:	68b9      	ldr	r1, [r7, #8]
 801610e:	f010 fbba 	bl	8026886 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	68da      	ldr	r2, [r3, #12]
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801611a:	425b      	negs	r3, r3
 801611c:	441a      	add	r2, r3
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	68da      	ldr	r2, [r3, #12]
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	429a      	cmp	r2, r3
 801612c:	d207      	bcs.n	801613e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	685a      	ldr	r2, [r3, #4]
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016136:	425b      	negs	r3, r3
 8016138:	441a      	add	r2, r3
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	2b02      	cmp	r3, #2
 8016142:	d105      	bne.n	8016150 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016144:	693b      	ldr	r3, [r7, #16]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d002      	beq.n	8016150 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801614a:	693b      	ldr	r3, [r7, #16]
 801614c:	3b01      	subs	r3, #1
 801614e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8016150:	693b      	ldr	r3, [r7, #16]
 8016152:	1c5a      	adds	r2, r3, #1
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016158:	697b      	ldr	r3, [r7, #20]
}
 801615a:	4618      	mov	r0, r3
 801615c:	3718      	adds	r7, #24
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}

08016162 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016162:	b580      	push	{r7, lr}
 8016164:	b082      	sub	sp, #8
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
 801616a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016170:	2b00      	cmp	r3, #0
 8016172:	d018      	beq.n	80161a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	68da      	ldr	r2, [r3, #12]
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801617c:	441a      	add	r2, r3
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	68da      	ldr	r2, [r3, #12]
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	429a      	cmp	r2, r3
 801618c:	d303      	bcc.n	8016196 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681a      	ldr	r2, [r3, #0]
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	68d9      	ldr	r1, [r3, #12]
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801619e:	461a      	mov	r2, r3
 80161a0:	6838      	ldr	r0, [r7, #0]
 80161a2:	f010 fb70 	bl	8026886 <memcpy>
	}
}
 80161a6:	bf00      	nop
 80161a8:	3708      	adds	r7, #8
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}

080161ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80161ae:	b580      	push	{r7, lr}
 80161b0:	b084      	sub	sp, #16
 80161b2:	af00      	add	r7, sp, #0
 80161b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80161b6:	f7fe fefb 	bl	8014fb0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80161c2:	e011      	b.n	80161e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d012      	beq.n	80161f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	3324      	adds	r3, #36	; 0x24
 80161d0:	4618      	mov	r0, r3
 80161d2:	f000 fcd3 	bl	8016b7c <xTaskRemoveFromEventList>
 80161d6:	4603      	mov	r3, r0
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d001      	beq.n	80161e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80161dc:	f000 fdb2 	bl	8016d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80161e0:	7bfb      	ldrb	r3, [r7, #15]
 80161e2:	3b01      	subs	r3, #1
 80161e4:	b2db      	uxtb	r3, r3
 80161e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80161e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	dce9      	bgt.n	80161c4 <prvUnlockQueue+0x16>
 80161f0:	e000      	b.n	80161f4 <prvUnlockQueue+0x46>
					break;
 80161f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	22ff      	movs	r2, #255	; 0xff
 80161f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80161fc:	f7fe ff06 	bl	801500c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016200:	f7fe fed6 	bl	8014fb0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801620a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801620c:	e011      	b.n	8016232 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	691b      	ldr	r3, [r3, #16]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d012      	beq.n	801623c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	3310      	adds	r3, #16
 801621a:	4618      	mov	r0, r3
 801621c:	f000 fcae 	bl	8016b7c <xTaskRemoveFromEventList>
 8016220:	4603      	mov	r3, r0
 8016222:	2b00      	cmp	r3, #0
 8016224:	d001      	beq.n	801622a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016226:	f000 fd8d 	bl	8016d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801622a:	7bbb      	ldrb	r3, [r7, #14]
 801622c:	3b01      	subs	r3, #1
 801622e:	b2db      	uxtb	r3, r3
 8016230:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016232:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016236:	2b00      	cmp	r3, #0
 8016238:	dce9      	bgt.n	801620e <prvUnlockQueue+0x60>
 801623a:	e000      	b.n	801623e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801623c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	22ff      	movs	r2, #255	; 0xff
 8016242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016246:	f7fe fee1 	bl	801500c <vPortExitCritical>
}
 801624a:	bf00      	nop
 801624c:	3710      	adds	r7, #16
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}

08016252 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016252:	b580      	push	{r7, lr}
 8016254:	b084      	sub	sp, #16
 8016256:	af00      	add	r7, sp, #0
 8016258:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801625a:	f7fe fea9 	bl	8014fb0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016262:	2b00      	cmp	r3, #0
 8016264:	d102      	bne.n	801626c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016266:	2301      	movs	r3, #1
 8016268:	60fb      	str	r3, [r7, #12]
 801626a:	e001      	b.n	8016270 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801626c:	2300      	movs	r3, #0
 801626e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016270:	f7fe fecc 	bl	801500c <vPortExitCritical>

	return xReturn;
 8016274:	68fb      	ldr	r3, [r7, #12]
}
 8016276:	4618      	mov	r0, r3
 8016278:	3710      	adds	r7, #16
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}

0801627e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801627e:	b580      	push	{r7, lr}
 8016280:	b084      	sub	sp, #16
 8016282:	af00      	add	r7, sp, #0
 8016284:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016286:	f7fe fe93 	bl	8014fb0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016292:	429a      	cmp	r2, r3
 8016294:	d102      	bne.n	801629c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016296:	2301      	movs	r3, #1
 8016298:	60fb      	str	r3, [r7, #12]
 801629a:	e001      	b.n	80162a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801629c:	2300      	movs	r3, #0
 801629e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80162a0:	f7fe feb4 	bl	801500c <vPortExitCritical>

	return xReturn;
 80162a4:	68fb      	ldr	r3, [r7, #12]
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3710      	adds	r7, #16
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
	...

080162b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80162b0:	b480      	push	{r7}
 80162b2:	b085      	sub	sp, #20
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80162b8:	2300      	movs	r3, #0
 80162ba:	60fb      	str	r3, [r7, #12]
 80162bc:	e016      	b.n	80162ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80162be:	4a10      	ldr	r2, [pc, #64]	; (8016300 <vQueueUnregisterQueue+0x50>)
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	00db      	lsls	r3, r3, #3
 80162c4:	4413      	add	r3, r2
 80162c6:	685a      	ldr	r2, [r3, #4]
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	429a      	cmp	r2, r3
 80162cc:	d10b      	bne.n	80162e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80162ce:	4a0c      	ldr	r2, [pc, #48]	; (8016300 <vQueueUnregisterQueue+0x50>)
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	2100      	movs	r1, #0
 80162d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80162d8:	4a09      	ldr	r2, [pc, #36]	; (8016300 <vQueueUnregisterQueue+0x50>)
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	00db      	lsls	r3, r3, #3
 80162de:	4413      	add	r3, r2
 80162e0:	2200      	movs	r2, #0
 80162e2:	605a      	str	r2, [r3, #4]
				break;
 80162e4:	e005      	b.n	80162f2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	3301      	adds	r3, #1
 80162ea:	60fb      	str	r3, [r7, #12]
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	2b0f      	cmp	r3, #15
 80162f0:	d9e5      	bls.n	80162be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80162f2:	bf00      	nop
 80162f4:	3714      	adds	r7, #20
 80162f6:	46bd      	mov	sp, r7
 80162f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162fc:	4770      	bx	lr
 80162fe:	bf00      	nop
 8016300:	2000a1d8 	.word	0x2000a1d8

08016304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016304:	b580      	push	{r7, lr}
 8016306:	b08c      	sub	sp, #48	; 0x30
 8016308:	af04      	add	r7, sp, #16
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
 8016310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016314:	2b00      	cmp	r3, #0
 8016316:	d109      	bne.n	801632c <xTaskCreateStatic+0x28>
 8016318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801631c:	f383 8811 	msr	BASEPRI, r3
 8016320:	f3bf 8f6f 	isb	sy
 8016324:	f3bf 8f4f 	dsb	sy
 8016328:	61bb      	str	r3, [r7, #24]
 801632a:	e7fe      	b.n	801632a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801632e:	2b00      	cmp	r3, #0
 8016330:	d109      	bne.n	8016346 <xTaskCreateStatic+0x42>
 8016332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016336:	f383 8811 	msr	BASEPRI, r3
 801633a:	f3bf 8f6f 	isb	sy
 801633e:	f3bf 8f4f 	dsb	sy
 8016342:	617b      	str	r3, [r7, #20]
 8016344:	e7fe      	b.n	8016344 <xTaskCreateStatic+0x40>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016348:	2b00      	cmp	r3, #0
 801634a:	d01e      	beq.n	801638a <xTaskCreateStatic+0x86>
 801634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801634e:	2b00      	cmp	r3, #0
 8016350:	d01b      	beq.n	801638a <xTaskCreateStatic+0x86>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016354:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016356:	69fb      	ldr	r3, [r7, #28]
 8016358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801635a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	2202      	movs	r2, #2
 8016360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016364:	2300      	movs	r3, #0
 8016366:	9303      	str	r3, [sp, #12]
 8016368:	69fb      	ldr	r3, [r7, #28]
 801636a:	9302      	str	r3, [sp, #8]
 801636c:	f107 0310 	add.w	r3, r7, #16
 8016370:	9301      	str	r3, [sp, #4]
 8016372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016374:	9300      	str	r3, [sp, #0]
 8016376:	683b      	ldr	r3, [r7, #0]
 8016378:	687a      	ldr	r2, [r7, #4]
 801637a:	68b9      	ldr	r1, [r7, #8]
 801637c:	68f8      	ldr	r0, [r7, #12]
 801637e:	f000 f850 	bl	8016422 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016382:	69f8      	ldr	r0, [r7, #28]
 8016384:	f000 f8d6 	bl	8016534 <prvAddNewTaskToReadyList>
 8016388:	e001      	b.n	801638e <xTaskCreateStatic+0x8a>
		}
		else
		{
			xReturn = NULL;
 801638a:	2300      	movs	r3, #0
 801638c:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 801638e:	693b      	ldr	r3, [r7, #16]
	}
 8016390:	4618      	mov	r0, r3
 8016392:	3720      	adds	r7, #32
 8016394:	46bd      	mov	sp, r7
 8016396:	bd80      	pop	{r7, pc}

08016398 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016398:	b580      	push	{r7, lr}
 801639a:	b08c      	sub	sp, #48	; 0x30
 801639c:	af04      	add	r7, sp, #16
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	60b9      	str	r1, [r7, #8]
 80163a2:	603b      	str	r3, [r7, #0]
 80163a4:	4613      	mov	r3, r2
 80163a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163a8:	88fb      	ldrh	r3, [r7, #6]
 80163aa:	009b      	lsls	r3, r3, #2
 80163ac:	4618      	mov	r0, r3
 80163ae:	f7fe ff0f 	bl	80151d0 <pvPortMalloc>
 80163b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80163b4:	697b      	ldr	r3, [r7, #20]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d00e      	beq.n	80163d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80163ba:	2060      	movs	r0, #96	; 0x60
 80163bc:	f7fe ff08 	bl	80151d0 <pvPortMalloc>
 80163c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80163c2:	69fb      	ldr	r3, [r7, #28]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d003      	beq.n	80163d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80163c8:	69fb      	ldr	r3, [r7, #28]
 80163ca:	697a      	ldr	r2, [r7, #20]
 80163cc:	631a      	str	r2, [r3, #48]	; 0x30
 80163ce:	e005      	b.n	80163dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80163d0:	6978      	ldr	r0, [r7, #20]
 80163d2:	f7fe ffbf 	bl	8015354 <vPortFree>
 80163d6:	e001      	b.n	80163dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80163d8:	2300      	movs	r3, #0
 80163da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80163dc:	69fb      	ldr	r3, [r7, #28]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d017      	beq.n	8016412 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80163e2:	69fb      	ldr	r3, [r7, #28]
 80163e4:	2200      	movs	r2, #0
 80163e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80163ea:	88fa      	ldrh	r2, [r7, #6]
 80163ec:	2300      	movs	r3, #0
 80163ee:	9303      	str	r3, [sp, #12]
 80163f0:	69fb      	ldr	r3, [r7, #28]
 80163f2:	9302      	str	r3, [sp, #8]
 80163f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f6:	9301      	str	r3, [sp, #4]
 80163f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163fa:	9300      	str	r3, [sp, #0]
 80163fc:	683b      	ldr	r3, [r7, #0]
 80163fe:	68b9      	ldr	r1, [r7, #8]
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f000 f80e 	bl	8016422 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016406:	69f8      	ldr	r0, [r7, #28]
 8016408:	f000 f894 	bl	8016534 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801640c:	2301      	movs	r3, #1
 801640e:	61bb      	str	r3, [r7, #24]
 8016410:	e002      	b.n	8016418 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016412:	f04f 33ff 	mov.w	r3, #4294967295
 8016416:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016418:	69bb      	ldr	r3, [r7, #24]
	}
 801641a:	4618      	mov	r0, r3
 801641c:	3720      	adds	r7, #32
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}

08016422 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8016422:	b580      	push	{r7, lr}
 8016424:	b088      	sub	sp, #32
 8016426:	af00      	add	r7, sp, #0
 8016428:	60f8      	str	r0, [r7, #12]
 801642a:	60b9      	str	r1, [r7, #8]
 801642c:	607a      	str	r2, [r7, #4]
 801642e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016432:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	009b      	lsls	r3, r3, #2
 8016438:	461a      	mov	r2, r3
 801643a:	21a5      	movs	r1, #165	; 0xa5
 801643c:	f010 fa2e 	bl	802689c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8016440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801644a:	3b01      	subs	r3, #1
 801644c:	009b      	lsls	r3, r3, #2
 801644e:	4413      	add	r3, r2
 8016450:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8016452:	69bb      	ldr	r3, [r7, #24]
 8016454:	f023 0307 	bic.w	r3, r3, #7
 8016458:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801645a:	69bb      	ldr	r3, [r7, #24]
 801645c:	f003 0307 	and.w	r3, r3, #7
 8016460:	2b00      	cmp	r3, #0
 8016462:	d009      	beq.n	8016478 <prvInitialiseNewTask+0x56>
 8016464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016468:	f383 8811 	msr	BASEPRI, r3
 801646c:	f3bf 8f6f 	isb	sy
 8016470:	f3bf 8f4f 	dsb	sy
 8016474:	617b      	str	r3, [r7, #20]
 8016476:	e7fe      	b.n	8016476 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016478:	2300      	movs	r3, #0
 801647a:	61fb      	str	r3, [r7, #28]
 801647c:	e012      	b.n	80164a4 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801647e:	68ba      	ldr	r2, [r7, #8]
 8016480:	69fb      	ldr	r3, [r7, #28]
 8016482:	4413      	add	r3, r2
 8016484:	7819      	ldrb	r1, [r3, #0]
 8016486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016488:	69fb      	ldr	r3, [r7, #28]
 801648a:	4413      	add	r3, r2
 801648c:	3334      	adds	r3, #52	; 0x34
 801648e:	460a      	mov	r2, r1
 8016490:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8016492:	68ba      	ldr	r2, [r7, #8]
 8016494:	69fb      	ldr	r3, [r7, #28]
 8016496:	4413      	add	r3, r2
 8016498:	781b      	ldrb	r3, [r3, #0]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d006      	beq.n	80164ac <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801649e:	69fb      	ldr	r3, [r7, #28]
 80164a0:	3301      	adds	r3, #1
 80164a2:	61fb      	str	r3, [r7, #28]
 80164a4:	69fb      	ldr	r3, [r7, #28]
 80164a6:	2b0f      	cmp	r3, #15
 80164a8:	d9e9      	bls.n	801647e <prvInitialiseNewTask+0x5c>
 80164aa:	e000      	b.n	80164ae <prvInitialiseNewTask+0x8c>
		{
			break;
 80164ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80164ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b0:	2200      	movs	r2, #0
 80164b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80164b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164b8:	2b06      	cmp	r3, #6
 80164ba:	d901      	bls.n	80164c0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80164bc:	2306      	movs	r3, #6
 80164be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80164c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80164c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80164c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80164ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80164cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ce:	2200      	movs	r2, #0
 80164d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80164d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d4:	3304      	adds	r3, #4
 80164d6:	4618      	mov	r0, r3
 80164d8:	f7fe fbcd 	bl	8014c76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80164dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164de:	3318      	adds	r3, #24
 80164e0:	4618      	mov	r0, r3
 80164e2:	f7fe fbc8 	bl	8014c76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80164e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80164ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ee:	f1c3 0207 	rsb	r2, r3, #7
 80164f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80164f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80164fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164fe:	2200      	movs	r2, #0
 8016500:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016504:	2200      	movs	r2, #0
 8016506:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801650a:	2200      	movs	r2, #0
 801650c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016510:	683a      	ldr	r2, [r7, #0]
 8016512:	68f9      	ldr	r1, [r7, #12]
 8016514:	69b8      	ldr	r0, [r7, #24]
 8016516:	f7fe fc43 	bl	8014da0 <pxPortInitialiseStack>
 801651a:	4602      	mov	r2, r0
 801651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801651e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8016520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016522:	2b00      	cmp	r3, #0
 8016524:	d002      	beq.n	801652c <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801652a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801652c:	bf00      	nop
 801652e:	3720      	adds	r7, #32
 8016530:	46bd      	mov	sp, r7
 8016532:	bd80      	pop	{r7, pc}

08016534 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b082      	sub	sp, #8
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801653c:	f7fe fd38 	bl	8014fb0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016540:	4b2c      	ldr	r3, [pc, #176]	; (80165f4 <prvAddNewTaskToReadyList+0xc0>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	3301      	adds	r3, #1
 8016546:	4a2b      	ldr	r2, [pc, #172]	; (80165f4 <prvAddNewTaskToReadyList+0xc0>)
 8016548:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801654a:	4b2b      	ldr	r3, [pc, #172]	; (80165f8 <prvAddNewTaskToReadyList+0xc4>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d109      	bne.n	8016566 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016552:	4a29      	ldr	r2, [pc, #164]	; (80165f8 <prvAddNewTaskToReadyList+0xc4>)
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016558:	4b26      	ldr	r3, [pc, #152]	; (80165f4 <prvAddNewTaskToReadyList+0xc0>)
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	2b01      	cmp	r3, #1
 801655e:	d110      	bne.n	8016582 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016560:	f000 fc14 	bl	8016d8c <prvInitialiseTaskLists>
 8016564:	e00d      	b.n	8016582 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016566:	4b25      	ldr	r3, [pc, #148]	; (80165fc <prvAddNewTaskToReadyList+0xc8>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d109      	bne.n	8016582 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801656e:	4b22      	ldr	r3, [pc, #136]	; (80165f8 <prvAddNewTaskToReadyList+0xc4>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016578:	429a      	cmp	r2, r3
 801657a:	d802      	bhi.n	8016582 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801657c:	4a1e      	ldr	r2, [pc, #120]	; (80165f8 <prvAddNewTaskToReadyList+0xc4>)
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016582:	4b1f      	ldr	r3, [pc, #124]	; (8016600 <prvAddNewTaskToReadyList+0xcc>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	3301      	adds	r3, #1
 8016588:	4a1d      	ldr	r2, [pc, #116]	; (8016600 <prvAddNewTaskToReadyList+0xcc>)
 801658a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801658c:	4b1c      	ldr	r3, [pc, #112]	; (8016600 <prvAddNewTaskToReadyList+0xcc>)
 801658e:	681a      	ldr	r2, [r3, #0]
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016598:	2201      	movs	r2, #1
 801659a:	409a      	lsls	r2, r3
 801659c:	4b19      	ldr	r3, [pc, #100]	; (8016604 <prvAddNewTaskToReadyList+0xd0>)
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	4313      	orrs	r3, r2
 80165a2:	4a18      	ldr	r2, [pc, #96]	; (8016604 <prvAddNewTaskToReadyList+0xd0>)
 80165a4:	6013      	str	r3, [r2, #0]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165aa:	4613      	mov	r3, r2
 80165ac:	009b      	lsls	r3, r3, #2
 80165ae:	4413      	add	r3, r2
 80165b0:	009b      	lsls	r3, r3, #2
 80165b2:	4a15      	ldr	r2, [pc, #84]	; (8016608 <prvAddNewTaskToReadyList+0xd4>)
 80165b4:	441a      	add	r2, r3
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	3304      	adds	r3, #4
 80165ba:	4619      	mov	r1, r3
 80165bc:	4610      	mov	r0, r2
 80165be:	f7fe fb67 	bl	8014c90 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80165c2:	f7fe fd23 	bl	801500c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80165c6:	4b0d      	ldr	r3, [pc, #52]	; (80165fc <prvAddNewTaskToReadyList+0xc8>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d00e      	beq.n	80165ec <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80165ce:	4b0a      	ldr	r3, [pc, #40]	; (80165f8 <prvAddNewTaskToReadyList+0xc4>)
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165d8:	429a      	cmp	r2, r3
 80165da:	d207      	bcs.n	80165ec <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80165dc:	4b0b      	ldr	r3, [pc, #44]	; (801660c <prvAddNewTaskToReadyList+0xd8>)
 80165de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165e2:	601a      	str	r2, [r3, #0]
 80165e4:	f3bf 8f4f 	dsb	sy
 80165e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80165ec:	bf00      	nop
 80165ee:	3708      	adds	r7, #8
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}
 80165f4:	2000935c 	.word	0x2000935c
 80165f8:	2000925c 	.word	0x2000925c
 80165fc:	20009368 	.word	0x20009368
 8016600:	20009378 	.word	0x20009378
 8016604:	20009364 	.word	0x20009364
 8016608:	20009260 	.word	0x20009260
 801660c:	e000ed04 	.word	0xe000ed04

08016610 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016618:	2300      	movs	r3, #0
 801661a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d016      	beq.n	8016650 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016622:	4b13      	ldr	r3, [pc, #76]	; (8016670 <vTaskDelay+0x60>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d009      	beq.n	801663e <vTaskDelay+0x2e>
 801662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801662e:	f383 8811 	msr	BASEPRI, r3
 8016632:	f3bf 8f6f 	isb	sy
 8016636:	f3bf 8f4f 	dsb	sy
 801663a:	60bb      	str	r3, [r7, #8]
 801663c:	e7fe      	b.n	801663c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801663e:	f000 f87b 	bl	8016738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016642:	2100      	movs	r1, #0
 8016644:	6878      	ldr	r0, [r7, #4]
 8016646:	f000 fd9d 	bl	8017184 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801664a:	f000 f883 	bl	8016754 <xTaskResumeAll>
 801664e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d107      	bne.n	8016666 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8016656:	4b07      	ldr	r3, [pc, #28]	; (8016674 <vTaskDelay+0x64>)
 8016658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801665c:	601a      	str	r2, [r3, #0]
 801665e:	f3bf 8f4f 	dsb	sy
 8016662:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016666:	bf00      	nop
 8016668:	3710      	adds	r7, #16
 801666a:	46bd      	mov	sp, r7
 801666c:	bd80      	pop	{r7, pc}
 801666e:	bf00      	nop
 8016670:	20009384 	.word	0x20009384
 8016674:	e000ed04 	.word	0xe000ed04

08016678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b08a      	sub	sp, #40	; 0x28
 801667c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801667e:	2300      	movs	r3, #0
 8016680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016682:	2300      	movs	r3, #0
 8016684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016686:	463a      	mov	r2, r7
 8016688:	1d39      	adds	r1, r7, #4
 801668a:	f107 0308 	add.w	r3, r7, #8
 801668e:	4618      	mov	r0, r3
 8016690:	f00d fd24 	bl	80240dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016694:	6839      	ldr	r1, [r7, #0]
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	68ba      	ldr	r2, [r7, #8]
 801669a:	9202      	str	r2, [sp, #8]
 801669c:	9301      	str	r3, [sp, #4]
 801669e:	2300      	movs	r3, #0
 80166a0:	9300      	str	r3, [sp, #0]
 80166a2:	2300      	movs	r3, #0
 80166a4:	460a      	mov	r2, r1
 80166a6:	491e      	ldr	r1, [pc, #120]	; (8016720 <vTaskStartScheduler+0xa8>)
 80166a8:	481e      	ldr	r0, [pc, #120]	; (8016724 <vTaskStartScheduler+0xac>)
 80166aa:	f7ff fe2b 	bl	8016304 <xTaskCreateStatic>
 80166ae:	4602      	mov	r2, r0
 80166b0:	4b1d      	ldr	r3, [pc, #116]	; (8016728 <vTaskStartScheduler+0xb0>)
 80166b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80166b4:	4b1c      	ldr	r3, [pc, #112]	; (8016728 <vTaskStartScheduler+0xb0>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d002      	beq.n	80166c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80166bc:	2301      	movs	r3, #1
 80166be:	617b      	str	r3, [r7, #20]
 80166c0:	e001      	b.n	80166c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80166c2:	2300      	movs	r3, #0
 80166c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80166c6:	697b      	ldr	r3, [r7, #20]
 80166c8:	2b01      	cmp	r3, #1
 80166ca:	d117      	bne.n	80166fc <vTaskStartScheduler+0x84>
 80166cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166d0:	f383 8811 	msr	BASEPRI, r3
 80166d4:	f3bf 8f6f 	isb	sy
 80166d8:	f3bf 8f4f 	dsb	sy
 80166dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80166de:	4b13      	ldr	r3, [pc, #76]	; (801672c <vTaskStartScheduler+0xb4>)
 80166e0:	f04f 32ff 	mov.w	r2, #4294967295
 80166e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80166e6:	4b12      	ldr	r3, [pc, #72]	; (8016730 <vTaskStartScheduler+0xb8>)
 80166e8:	2201      	movs	r2, #1
 80166ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80166ec:	4b11      	ldr	r3, [pc, #68]	; (8016734 <vTaskStartScheduler+0xbc>)
 80166ee:	2200      	movs	r2, #0
 80166f0:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80166f2:	f00d fcd5 	bl	80240a0 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80166f6:	f7fe fbcf 	bl	8014e98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80166fa:	e00d      	b.n	8016718 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80166fc:	697b      	ldr	r3, [r7, #20]
 80166fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016702:	d109      	bne.n	8016718 <vTaskStartScheduler+0xa0>
 8016704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016708:	f383 8811 	msr	BASEPRI, r3
 801670c:	f3bf 8f6f 	isb	sy
 8016710:	f3bf 8f4f 	dsb	sy
 8016714:	60fb      	str	r3, [r7, #12]
 8016716:	e7fe      	b.n	8016716 <vTaskStartScheduler+0x9e>
}
 8016718:	bf00      	nop
 801671a:	3718      	adds	r7, #24
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}
 8016720:	08026a68 	.word	0x08026a68
 8016724:	08016d5d 	.word	0x08016d5d
 8016728:	20009380 	.word	0x20009380
 801672c:	2000937c 	.word	0x2000937c
 8016730:	20009368 	.word	0x20009368
 8016734:	20009360 	.word	0x20009360

08016738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016738:	b480      	push	{r7}
 801673a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801673c:	4b04      	ldr	r3, [pc, #16]	; (8016750 <vTaskSuspendAll+0x18>)
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	3301      	adds	r3, #1
 8016742:	4a03      	ldr	r2, [pc, #12]	; (8016750 <vTaskSuspendAll+0x18>)
 8016744:	6013      	str	r3, [r2, #0]
}
 8016746:	bf00      	nop
 8016748:	46bd      	mov	sp, r7
 801674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674e:	4770      	bx	lr
 8016750:	20009384 	.word	0x20009384

08016754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b084      	sub	sp, #16
 8016758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801675a:	2300      	movs	r3, #0
 801675c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801675e:	2300      	movs	r3, #0
 8016760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016762:	4b41      	ldr	r3, [pc, #260]	; (8016868 <xTaskResumeAll+0x114>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d109      	bne.n	801677e <xTaskResumeAll+0x2a>
 801676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801676e:	f383 8811 	msr	BASEPRI, r3
 8016772:	f3bf 8f6f 	isb	sy
 8016776:	f3bf 8f4f 	dsb	sy
 801677a:	603b      	str	r3, [r7, #0]
 801677c:	e7fe      	b.n	801677c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801677e:	f7fe fc17 	bl	8014fb0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016782:	4b39      	ldr	r3, [pc, #228]	; (8016868 <xTaskResumeAll+0x114>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	3b01      	subs	r3, #1
 8016788:	4a37      	ldr	r2, [pc, #220]	; (8016868 <xTaskResumeAll+0x114>)
 801678a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801678c:	4b36      	ldr	r3, [pc, #216]	; (8016868 <xTaskResumeAll+0x114>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d161      	bne.n	8016858 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016794:	4b35      	ldr	r3, [pc, #212]	; (801686c <xTaskResumeAll+0x118>)
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d05d      	beq.n	8016858 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801679c:	e02e      	b.n	80167fc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801679e:	4b34      	ldr	r3, [pc, #208]	; (8016870 <xTaskResumeAll+0x11c>)
 80167a0:	68db      	ldr	r3, [r3, #12]
 80167a2:	68db      	ldr	r3, [r3, #12]
 80167a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	3318      	adds	r3, #24
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7fe facd 	bl	8014d4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	3304      	adds	r3, #4
 80167b4:	4618      	mov	r0, r3
 80167b6:	f7fe fac8 	bl	8014d4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167be:	2201      	movs	r2, #1
 80167c0:	409a      	lsls	r2, r3
 80167c2:	4b2c      	ldr	r3, [pc, #176]	; (8016874 <xTaskResumeAll+0x120>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	4313      	orrs	r3, r2
 80167c8:	4a2a      	ldr	r2, [pc, #168]	; (8016874 <xTaskResumeAll+0x120>)
 80167ca:	6013      	str	r3, [r2, #0]
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167d0:	4613      	mov	r3, r2
 80167d2:	009b      	lsls	r3, r3, #2
 80167d4:	4413      	add	r3, r2
 80167d6:	009b      	lsls	r3, r3, #2
 80167d8:	4a27      	ldr	r2, [pc, #156]	; (8016878 <xTaskResumeAll+0x124>)
 80167da:	441a      	add	r2, r3
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	3304      	adds	r3, #4
 80167e0:	4619      	mov	r1, r3
 80167e2:	4610      	mov	r0, r2
 80167e4:	f7fe fa54 	bl	8014c90 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167ec:	4b23      	ldr	r3, [pc, #140]	; (801687c <xTaskResumeAll+0x128>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d302      	bcc.n	80167fc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80167f6:	4b22      	ldr	r3, [pc, #136]	; (8016880 <xTaskResumeAll+0x12c>)
 80167f8:	2201      	movs	r2, #1
 80167fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80167fc:	4b1c      	ldr	r3, [pc, #112]	; (8016870 <xTaskResumeAll+0x11c>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d1cc      	bne.n	801679e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d001      	beq.n	801680e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801680a:	f000 fb69 	bl	8016ee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801680e:	4b1d      	ldr	r3, [pc, #116]	; (8016884 <xTaskResumeAll+0x130>)
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d010      	beq.n	801683c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801681a:	f000 f859 	bl	80168d0 <xTaskIncrementTick>
 801681e:	4603      	mov	r3, r0
 8016820:	2b00      	cmp	r3, #0
 8016822:	d002      	beq.n	801682a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8016824:	4b16      	ldr	r3, [pc, #88]	; (8016880 <xTaskResumeAll+0x12c>)
 8016826:	2201      	movs	r2, #1
 8016828:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	3b01      	subs	r3, #1
 801682e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d1f1      	bne.n	801681a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8016836:	4b13      	ldr	r3, [pc, #76]	; (8016884 <xTaskResumeAll+0x130>)
 8016838:	2200      	movs	r2, #0
 801683a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801683c:	4b10      	ldr	r3, [pc, #64]	; (8016880 <xTaskResumeAll+0x12c>)
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d009      	beq.n	8016858 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016844:	2301      	movs	r3, #1
 8016846:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016848:	4b0f      	ldr	r3, [pc, #60]	; (8016888 <xTaskResumeAll+0x134>)
 801684a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801684e:	601a      	str	r2, [r3, #0]
 8016850:	f3bf 8f4f 	dsb	sy
 8016854:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016858:	f7fe fbd8 	bl	801500c <vPortExitCritical>

	return xAlreadyYielded;
 801685c:	68bb      	ldr	r3, [r7, #8]
}
 801685e:	4618      	mov	r0, r3
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	20009384 	.word	0x20009384
 801686c:	2000935c 	.word	0x2000935c
 8016870:	2000931c 	.word	0x2000931c
 8016874:	20009364 	.word	0x20009364
 8016878:	20009260 	.word	0x20009260
 801687c:	2000925c 	.word	0x2000925c
 8016880:	20009370 	.word	0x20009370
 8016884:	2000936c 	.word	0x2000936c
 8016888:	e000ed04 	.word	0xe000ed04

0801688c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801688c:	b480      	push	{r7}
 801688e:	b083      	sub	sp, #12
 8016890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016892:	4b05      	ldr	r3, [pc, #20]	; (80168a8 <xTaskGetTickCount+0x1c>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016898:	687b      	ldr	r3, [r7, #4]
}
 801689a:	4618      	mov	r0, r3
 801689c:	370c      	adds	r7, #12
 801689e:	46bd      	mov	sp, r7
 80168a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop
 80168a8:	20009360 	.word	0x20009360

080168ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80168b2:	f7fe fc4f 	bl	8015154 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80168b6:	2300      	movs	r3, #0
 80168b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80168ba:	4b04      	ldr	r3, [pc, #16]	; (80168cc <xTaskGetTickCountFromISR+0x20>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80168c0:	683b      	ldr	r3, [r7, #0]
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3708      	adds	r7, #8
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	20009360 	.word	0x20009360

080168d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b086      	sub	sp, #24
 80168d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80168d6:	2300      	movs	r3, #0
 80168d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80168da:	4b50      	ldr	r3, [pc, #320]	; (8016a1c <xTaskIncrementTick+0x14c>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	f040 808c 	bne.w	80169fc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80168e4:	4b4e      	ldr	r3, [pc, #312]	; (8016a20 <xTaskIncrementTick+0x150>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	3301      	adds	r3, #1
 80168ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80168ec:	4a4c      	ldr	r2, [pc, #304]	; (8016a20 <xTaskIncrementTick+0x150>)
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80168f2:	693b      	ldr	r3, [r7, #16]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d11f      	bne.n	8016938 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80168f8:	4b4a      	ldr	r3, [pc, #296]	; (8016a24 <xTaskIncrementTick+0x154>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d009      	beq.n	8016916 <xTaskIncrementTick+0x46>
 8016902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016906:	f383 8811 	msr	BASEPRI, r3
 801690a:	f3bf 8f6f 	isb	sy
 801690e:	f3bf 8f4f 	dsb	sy
 8016912:	603b      	str	r3, [r7, #0]
 8016914:	e7fe      	b.n	8016914 <xTaskIncrementTick+0x44>
 8016916:	4b43      	ldr	r3, [pc, #268]	; (8016a24 <xTaskIncrementTick+0x154>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	60fb      	str	r3, [r7, #12]
 801691c:	4b42      	ldr	r3, [pc, #264]	; (8016a28 <xTaskIncrementTick+0x158>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4a40      	ldr	r2, [pc, #256]	; (8016a24 <xTaskIncrementTick+0x154>)
 8016922:	6013      	str	r3, [r2, #0]
 8016924:	4a40      	ldr	r2, [pc, #256]	; (8016a28 <xTaskIncrementTick+0x158>)
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	6013      	str	r3, [r2, #0]
 801692a:	4b40      	ldr	r3, [pc, #256]	; (8016a2c <xTaskIncrementTick+0x15c>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	3301      	adds	r3, #1
 8016930:	4a3e      	ldr	r2, [pc, #248]	; (8016a2c <xTaskIncrementTick+0x15c>)
 8016932:	6013      	str	r3, [r2, #0]
 8016934:	f000 fad4 	bl	8016ee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016938:	4b3d      	ldr	r3, [pc, #244]	; (8016a30 <xTaskIncrementTick+0x160>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	693a      	ldr	r2, [r7, #16]
 801693e:	429a      	cmp	r2, r3
 8016940:	d34d      	bcc.n	80169de <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016942:	4b38      	ldr	r3, [pc, #224]	; (8016a24 <xTaskIncrementTick+0x154>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d101      	bne.n	8016950 <xTaskIncrementTick+0x80>
 801694c:	2301      	movs	r3, #1
 801694e:	e000      	b.n	8016952 <xTaskIncrementTick+0x82>
 8016950:	2300      	movs	r3, #0
 8016952:	2b00      	cmp	r3, #0
 8016954:	d004      	beq.n	8016960 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016956:	4b36      	ldr	r3, [pc, #216]	; (8016a30 <xTaskIncrementTick+0x160>)
 8016958:	f04f 32ff 	mov.w	r2, #4294967295
 801695c:	601a      	str	r2, [r3, #0]
					break;
 801695e:	e03e      	b.n	80169de <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8016960:	4b30      	ldr	r3, [pc, #192]	; (8016a24 <xTaskIncrementTick+0x154>)
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	68db      	ldr	r3, [r3, #12]
 8016966:	68db      	ldr	r3, [r3, #12]
 8016968:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801696a:	68bb      	ldr	r3, [r7, #8]
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016970:	693a      	ldr	r2, [r7, #16]
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	429a      	cmp	r2, r3
 8016976:	d203      	bcs.n	8016980 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016978:	4a2d      	ldr	r2, [pc, #180]	; (8016a30 <xTaskIncrementTick+0x160>)
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6013      	str	r3, [r2, #0]
						break;
 801697e:	e02e      	b.n	80169de <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016980:	68bb      	ldr	r3, [r7, #8]
 8016982:	3304      	adds	r3, #4
 8016984:	4618      	mov	r0, r3
 8016986:	f7fe f9e0 	bl	8014d4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801698e:	2b00      	cmp	r3, #0
 8016990:	d004      	beq.n	801699c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	3318      	adds	r3, #24
 8016996:	4618      	mov	r0, r3
 8016998:	f7fe f9d7 	bl	8014d4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169a0:	2201      	movs	r2, #1
 80169a2:	409a      	lsls	r2, r3
 80169a4:	4b23      	ldr	r3, [pc, #140]	; (8016a34 <xTaskIncrementTick+0x164>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	4313      	orrs	r3, r2
 80169aa:	4a22      	ldr	r2, [pc, #136]	; (8016a34 <xTaskIncrementTick+0x164>)
 80169ac:	6013      	str	r3, [r2, #0]
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169b2:	4613      	mov	r3, r2
 80169b4:	009b      	lsls	r3, r3, #2
 80169b6:	4413      	add	r3, r2
 80169b8:	009b      	lsls	r3, r3, #2
 80169ba:	4a1f      	ldr	r2, [pc, #124]	; (8016a38 <xTaskIncrementTick+0x168>)
 80169bc:	441a      	add	r2, r3
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	3304      	adds	r3, #4
 80169c2:	4619      	mov	r1, r3
 80169c4:	4610      	mov	r0, r2
 80169c6:	f7fe f963 	bl	8014c90 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80169ca:	68bb      	ldr	r3, [r7, #8]
 80169cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169ce:	4b1b      	ldr	r3, [pc, #108]	; (8016a3c <xTaskIncrementTick+0x16c>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d3b4      	bcc.n	8016942 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80169d8:	2301      	movs	r3, #1
 80169da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80169dc:	e7b1      	b.n	8016942 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80169de:	4b17      	ldr	r3, [pc, #92]	; (8016a3c <xTaskIncrementTick+0x16c>)
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169e4:	4914      	ldr	r1, [pc, #80]	; (8016a38 <xTaskIncrementTick+0x168>)
 80169e6:	4613      	mov	r3, r2
 80169e8:	009b      	lsls	r3, r3, #2
 80169ea:	4413      	add	r3, r2
 80169ec:	009b      	lsls	r3, r3, #2
 80169ee:	440b      	add	r3, r1
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	2b01      	cmp	r3, #1
 80169f4:	d907      	bls.n	8016a06 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80169f6:	2301      	movs	r3, #1
 80169f8:	617b      	str	r3, [r7, #20]
 80169fa:	e004      	b.n	8016a06 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80169fc:	4b10      	ldr	r3, [pc, #64]	; (8016a40 <xTaskIncrementTick+0x170>)
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	3301      	adds	r3, #1
 8016a02:	4a0f      	ldr	r2, [pc, #60]	; (8016a40 <xTaskIncrementTick+0x170>)
 8016a04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016a06:	4b0f      	ldr	r3, [pc, #60]	; (8016a44 <xTaskIncrementTick+0x174>)
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d001      	beq.n	8016a12 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8016a0e:	2301      	movs	r3, #1
 8016a10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016a12:	697b      	ldr	r3, [r7, #20]
}
 8016a14:	4618      	mov	r0, r3
 8016a16:	3718      	adds	r7, #24
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}
 8016a1c:	20009384 	.word	0x20009384
 8016a20:	20009360 	.word	0x20009360
 8016a24:	20009314 	.word	0x20009314
 8016a28:	20009318 	.word	0x20009318
 8016a2c:	20009374 	.word	0x20009374
 8016a30:	2000937c 	.word	0x2000937c
 8016a34:	20009364 	.word	0x20009364
 8016a38:	20009260 	.word	0x20009260
 8016a3c:	2000925c 	.word	0x2000925c
 8016a40:	2000936c 	.word	0x2000936c
 8016a44:	20009370 	.word	0x20009370

08016a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b086      	sub	sp, #24
 8016a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016a4e:	4b32      	ldr	r3, [pc, #200]	; (8016b18 <vTaskSwitchContext+0xd0>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d003      	beq.n	8016a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016a56:	4b31      	ldr	r3, [pc, #196]	; (8016b1c <vTaskSwitchContext+0xd4>)
 8016a58:	2201      	movs	r2, #1
 8016a5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016a5c:	e057      	b.n	8016b0e <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8016a5e:	4b2f      	ldr	r3, [pc, #188]	; (8016b1c <vTaskSwitchContext+0xd4>)
 8016a60:	2200      	movs	r2, #0
 8016a62:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8016a64:	f00d fb2e 	bl	80240c4 <getRunTimeCounterValue>
 8016a68:	4602      	mov	r2, r0
 8016a6a:	4b2d      	ldr	r3, [pc, #180]	; (8016b20 <vTaskSwitchContext+0xd8>)
 8016a6c:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8016a6e:	4b2c      	ldr	r3, [pc, #176]	; (8016b20 <vTaskSwitchContext+0xd8>)
 8016a70:	681a      	ldr	r2, [r3, #0]
 8016a72:	4b2c      	ldr	r3, [pc, #176]	; (8016b24 <vTaskSwitchContext+0xdc>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d909      	bls.n	8016a8e <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8016a7a:	4b2b      	ldr	r3, [pc, #172]	; (8016b28 <vTaskSwitchContext+0xe0>)
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8016a80:	4a27      	ldr	r2, [pc, #156]	; (8016b20 <vTaskSwitchContext+0xd8>)
 8016a82:	6810      	ldr	r0, [r2, #0]
 8016a84:	4a27      	ldr	r2, [pc, #156]	; (8016b24 <vTaskSwitchContext+0xdc>)
 8016a86:	6812      	ldr	r2, [r2, #0]
 8016a88:	1a82      	subs	r2, r0, r2
 8016a8a:	440a      	add	r2, r1
 8016a8c:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8016a8e:	4b24      	ldr	r3, [pc, #144]	; (8016b20 <vTaskSwitchContext+0xd8>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	4a24      	ldr	r2, [pc, #144]	; (8016b24 <vTaskSwitchContext+0xdc>)
 8016a94:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8016a96:	4b25      	ldr	r3, [pc, #148]	; (8016b2c <vTaskSwitchContext+0xe4>)
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	fab3 f383 	clz	r3, r3
 8016aa2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016aa4:	7afb      	ldrb	r3, [r7, #11]
 8016aa6:	f1c3 031f 	rsb	r3, r3, #31
 8016aaa:	617b      	str	r3, [r7, #20]
 8016aac:	4920      	ldr	r1, [pc, #128]	; (8016b30 <vTaskSwitchContext+0xe8>)
 8016aae:	697a      	ldr	r2, [r7, #20]
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	009b      	lsls	r3, r3, #2
 8016ab4:	4413      	add	r3, r2
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	440b      	add	r3, r1
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d109      	bne.n	8016ad4 <vTaskSwitchContext+0x8c>
	__asm volatile
 8016ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac4:	f383 8811 	msr	BASEPRI, r3
 8016ac8:	f3bf 8f6f 	isb	sy
 8016acc:	f3bf 8f4f 	dsb	sy
 8016ad0:	607b      	str	r3, [r7, #4]
 8016ad2:	e7fe      	b.n	8016ad2 <vTaskSwitchContext+0x8a>
 8016ad4:	697a      	ldr	r2, [r7, #20]
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	009b      	lsls	r3, r3, #2
 8016ada:	4413      	add	r3, r2
 8016adc:	009b      	lsls	r3, r3, #2
 8016ade:	4a14      	ldr	r2, [pc, #80]	; (8016b30 <vTaskSwitchContext+0xe8>)
 8016ae0:	4413      	add	r3, r2
 8016ae2:	613b      	str	r3, [r7, #16]
 8016ae4:	693b      	ldr	r3, [r7, #16]
 8016ae6:	685b      	ldr	r3, [r3, #4]
 8016ae8:	685a      	ldr	r2, [r3, #4]
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	605a      	str	r2, [r3, #4]
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	685a      	ldr	r2, [r3, #4]
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	3308      	adds	r3, #8
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d104      	bne.n	8016b04 <vTaskSwitchContext+0xbc>
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	685b      	ldr	r3, [r3, #4]
 8016afe:	685a      	ldr	r2, [r3, #4]
 8016b00:	693b      	ldr	r3, [r7, #16]
 8016b02:	605a      	str	r2, [r3, #4]
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	685b      	ldr	r3, [r3, #4]
 8016b08:	68db      	ldr	r3, [r3, #12]
 8016b0a:	4a07      	ldr	r2, [pc, #28]	; (8016b28 <vTaskSwitchContext+0xe0>)
 8016b0c:	6013      	str	r3, [r2, #0]
}
 8016b0e:	bf00      	nop
 8016b10:	3718      	adds	r7, #24
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}
 8016b16:	bf00      	nop
 8016b18:	20009384 	.word	0x20009384
 8016b1c:	20009370 	.word	0x20009370
 8016b20:	2000938c 	.word	0x2000938c
 8016b24:	20009388 	.word	0x20009388
 8016b28:	2000925c 	.word	0x2000925c
 8016b2c:	20009364 	.word	0x20009364
 8016b30:	20009260 	.word	0x20009260

08016b34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b084      	sub	sp, #16
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
 8016b3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d109      	bne.n	8016b58 <vTaskPlaceOnEventList+0x24>
 8016b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b48:	f383 8811 	msr	BASEPRI, r3
 8016b4c:	f3bf 8f6f 	isb	sy
 8016b50:	f3bf 8f4f 	dsb	sy
 8016b54:	60fb      	str	r3, [r7, #12]
 8016b56:	e7fe      	b.n	8016b56 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016b58:	4b07      	ldr	r3, [pc, #28]	; (8016b78 <vTaskPlaceOnEventList+0x44>)
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	3318      	adds	r3, #24
 8016b5e:	4619      	mov	r1, r3
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f7fe f8b9 	bl	8014cd8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016b66:	2101      	movs	r1, #1
 8016b68:	6838      	ldr	r0, [r7, #0]
 8016b6a:	f000 fb0b 	bl	8017184 <prvAddCurrentTaskToDelayedList>
}
 8016b6e:	bf00      	nop
 8016b70:	3710      	adds	r7, #16
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}
 8016b76:	bf00      	nop
 8016b78:	2000925c 	.word	0x2000925c

08016b7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b086      	sub	sp, #24
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	68db      	ldr	r3, [r3, #12]
 8016b88:	68db      	ldr	r3, [r3, #12]
 8016b8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d109      	bne.n	8016ba6 <xTaskRemoveFromEventList+0x2a>
 8016b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b96:	f383 8811 	msr	BASEPRI, r3
 8016b9a:	f3bf 8f6f 	isb	sy
 8016b9e:	f3bf 8f4f 	dsb	sy
 8016ba2:	60fb      	str	r3, [r7, #12]
 8016ba4:	e7fe      	b.n	8016ba4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016ba6:	693b      	ldr	r3, [r7, #16]
 8016ba8:	3318      	adds	r3, #24
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7fe f8cd 	bl	8014d4a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016bb0:	4b1d      	ldr	r3, [pc, #116]	; (8016c28 <xTaskRemoveFromEventList+0xac>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d11c      	bne.n	8016bf2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016bb8:	693b      	ldr	r3, [r7, #16]
 8016bba:	3304      	adds	r3, #4
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7fe f8c4 	bl	8014d4a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016bc2:	693b      	ldr	r3, [r7, #16]
 8016bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bc6:	2201      	movs	r2, #1
 8016bc8:	409a      	lsls	r2, r3
 8016bca:	4b18      	ldr	r3, [pc, #96]	; (8016c2c <xTaskRemoveFromEventList+0xb0>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	4313      	orrs	r3, r2
 8016bd0:	4a16      	ldr	r2, [pc, #88]	; (8016c2c <xTaskRemoveFromEventList+0xb0>)
 8016bd2:	6013      	str	r3, [r2, #0]
 8016bd4:	693b      	ldr	r3, [r7, #16]
 8016bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bd8:	4613      	mov	r3, r2
 8016bda:	009b      	lsls	r3, r3, #2
 8016bdc:	4413      	add	r3, r2
 8016bde:	009b      	lsls	r3, r3, #2
 8016be0:	4a13      	ldr	r2, [pc, #76]	; (8016c30 <xTaskRemoveFromEventList+0xb4>)
 8016be2:	441a      	add	r2, r3
 8016be4:	693b      	ldr	r3, [r7, #16]
 8016be6:	3304      	adds	r3, #4
 8016be8:	4619      	mov	r1, r3
 8016bea:	4610      	mov	r0, r2
 8016bec:	f7fe f850 	bl	8014c90 <vListInsertEnd>
 8016bf0:	e005      	b.n	8016bfe <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	3318      	adds	r3, #24
 8016bf6:	4619      	mov	r1, r3
 8016bf8:	480e      	ldr	r0, [pc, #56]	; (8016c34 <xTaskRemoveFromEventList+0xb8>)
 8016bfa:	f7fe f849 	bl	8014c90 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c02:	4b0d      	ldr	r3, [pc, #52]	; (8016c38 <xTaskRemoveFromEventList+0xbc>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c08:	429a      	cmp	r2, r3
 8016c0a:	d905      	bls.n	8016c18 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016c10:	4b0a      	ldr	r3, [pc, #40]	; (8016c3c <xTaskRemoveFromEventList+0xc0>)
 8016c12:	2201      	movs	r2, #1
 8016c14:	601a      	str	r2, [r3, #0]
 8016c16:	e001      	b.n	8016c1c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8016c1c:	697b      	ldr	r3, [r7, #20]
}
 8016c1e:	4618      	mov	r0, r3
 8016c20:	3718      	adds	r7, #24
 8016c22:	46bd      	mov	sp, r7
 8016c24:	bd80      	pop	{r7, pc}
 8016c26:	bf00      	nop
 8016c28:	20009384 	.word	0x20009384
 8016c2c:	20009364 	.word	0x20009364
 8016c30:	20009260 	.word	0x20009260
 8016c34:	2000931c 	.word	0x2000931c
 8016c38:	2000925c 	.word	0x2000925c
 8016c3c:	20009370 	.word	0x20009370

08016c40 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016c40:	b480      	push	{r7}
 8016c42:	b085      	sub	sp, #20
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d109      	bne.n	8016c62 <vTaskSetTimeOutState+0x22>
 8016c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c52:	f383 8811 	msr	BASEPRI, r3
 8016c56:	f3bf 8f6f 	isb	sy
 8016c5a:	f3bf 8f4f 	dsb	sy
 8016c5e:	60fb      	str	r3, [r7, #12]
 8016c60:	e7fe      	b.n	8016c60 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016c62:	4b07      	ldr	r3, [pc, #28]	; (8016c80 <vTaskSetTimeOutState+0x40>)
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016c6a:	4b06      	ldr	r3, [pc, #24]	; (8016c84 <vTaskSetTimeOutState+0x44>)
 8016c6c:	681a      	ldr	r2, [r3, #0]
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	605a      	str	r2, [r3, #4]
}
 8016c72:	bf00      	nop
 8016c74:	3714      	adds	r7, #20
 8016c76:	46bd      	mov	sp, r7
 8016c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7c:	4770      	bx	lr
 8016c7e:	bf00      	nop
 8016c80:	20009374 	.word	0x20009374
 8016c84:	20009360 	.word	0x20009360

08016c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b086      	sub	sp, #24
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
 8016c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d109      	bne.n	8016cac <xTaskCheckForTimeOut+0x24>
 8016c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c9c:	f383 8811 	msr	BASEPRI, r3
 8016ca0:	f3bf 8f6f 	isb	sy
 8016ca4:	f3bf 8f4f 	dsb	sy
 8016ca8:	60fb      	str	r3, [r7, #12]
 8016caa:	e7fe      	b.n	8016caa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d109      	bne.n	8016cc6 <xTaskCheckForTimeOut+0x3e>
 8016cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb6:	f383 8811 	msr	BASEPRI, r3
 8016cba:	f3bf 8f6f 	isb	sy
 8016cbe:	f3bf 8f4f 	dsb	sy
 8016cc2:	60bb      	str	r3, [r7, #8]
 8016cc4:	e7fe      	b.n	8016cc4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8016cc6:	f7fe f973 	bl	8014fb0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016cca:	4b1c      	ldr	r3, [pc, #112]	; (8016d3c <xTaskCheckForTimeOut+0xb4>)
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016cd0:	683b      	ldr	r3, [r7, #0]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cd8:	d102      	bne.n	8016ce0 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016cda:	2300      	movs	r3, #0
 8016cdc:	617b      	str	r3, [r7, #20]
 8016cde:	e026      	b.n	8016d2e <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	681a      	ldr	r2, [r3, #0]
 8016ce4:	4b16      	ldr	r3, [pc, #88]	; (8016d40 <xTaskCheckForTimeOut+0xb8>)
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	d007      	beq.n	8016cfc <xTaskCheckForTimeOut+0x74>
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	685a      	ldr	r2, [r3, #4]
 8016cf0:	693b      	ldr	r3, [r7, #16]
 8016cf2:	429a      	cmp	r2, r3
 8016cf4:	d802      	bhi.n	8016cfc <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	617b      	str	r3, [r7, #20]
 8016cfa:	e018      	b.n	8016d2e <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	685b      	ldr	r3, [r3, #4]
 8016d00:	693a      	ldr	r2, [r7, #16]
 8016d02:	1ad2      	subs	r2, r2, r3
 8016d04:	683b      	ldr	r3, [r7, #0]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d20e      	bcs.n	8016d2a <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8016d0c:	683b      	ldr	r3, [r7, #0]
 8016d0e:	681a      	ldr	r2, [r3, #0]
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6859      	ldr	r1, [r3, #4]
 8016d14:	693b      	ldr	r3, [r7, #16]
 8016d16:	1acb      	subs	r3, r1, r3
 8016d18:	441a      	add	r2, r3
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8016d1e:	6878      	ldr	r0, [r7, #4]
 8016d20:	f7ff ff8e 	bl	8016c40 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8016d24:	2300      	movs	r3, #0
 8016d26:	617b      	str	r3, [r7, #20]
 8016d28:	e001      	b.n	8016d2e <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8016d2e:	f7fe f96d 	bl	801500c <vPortExitCritical>

	return xReturn;
 8016d32:	697b      	ldr	r3, [r7, #20]
}
 8016d34:	4618      	mov	r0, r3
 8016d36:	3718      	adds	r7, #24
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd80      	pop	{r7, pc}
 8016d3c:	20009360 	.word	0x20009360
 8016d40:	20009374 	.word	0x20009374

08016d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016d44:	b480      	push	{r7}
 8016d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016d48:	4b03      	ldr	r3, [pc, #12]	; (8016d58 <vTaskMissedYield+0x14>)
 8016d4a:	2201      	movs	r2, #1
 8016d4c:	601a      	str	r2, [r3, #0]
}
 8016d4e:	bf00      	nop
 8016d50:	46bd      	mov	sp, r7
 8016d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d56:	4770      	bx	lr
 8016d58:	20009370 	.word	0x20009370

08016d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b082      	sub	sp, #8
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016d64:	f000 f852 	bl	8016e0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016d68:	4b06      	ldr	r3, [pc, #24]	; (8016d84 <prvIdleTask+0x28>)
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	2b01      	cmp	r3, #1
 8016d6e:	d9f9      	bls.n	8016d64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016d70:	4b05      	ldr	r3, [pc, #20]	; (8016d88 <prvIdleTask+0x2c>)
 8016d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d76:	601a      	str	r2, [r3, #0]
 8016d78:	f3bf 8f4f 	dsb	sy
 8016d7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016d80:	e7f0      	b.n	8016d64 <prvIdleTask+0x8>
 8016d82:	bf00      	nop
 8016d84:	20009260 	.word	0x20009260
 8016d88:	e000ed04 	.word	0xe000ed04

08016d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016d92:	2300      	movs	r3, #0
 8016d94:	607b      	str	r3, [r7, #4]
 8016d96:	e00c      	b.n	8016db2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016d98:	687a      	ldr	r2, [r7, #4]
 8016d9a:	4613      	mov	r3, r2
 8016d9c:	009b      	lsls	r3, r3, #2
 8016d9e:	4413      	add	r3, r2
 8016da0:	009b      	lsls	r3, r3, #2
 8016da2:	4a12      	ldr	r2, [pc, #72]	; (8016dec <prvInitialiseTaskLists+0x60>)
 8016da4:	4413      	add	r3, r2
 8016da6:	4618      	mov	r0, r3
 8016da8:	f7fd ff45 	bl	8014c36 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	3301      	adds	r3, #1
 8016db0:	607b      	str	r3, [r7, #4]
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	2b06      	cmp	r3, #6
 8016db6:	d9ef      	bls.n	8016d98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016db8:	480d      	ldr	r0, [pc, #52]	; (8016df0 <prvInitialiseTaskLists+0x64>)
 8016dba:	f7fd ff3c 	bl	8014c36 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016dbe:	480d      	ldr	r0, [pc, #52]	; (8016df4 <prvInitialiseTaskLists+0x68>)
 8016dc0:	f7fd ff39 	bl	8014c36 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016dc4:	480c      	ldr	r0, [pc, #48]	; (8016df8 <prvInitialiseTaskLists+0x6c>)
 8016dc6:	f7fd ff36 	bl	8014c36 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016dca:	480c      	ldr	r0, [pc, #48]	; (8016dfc <prvInitialiseTaskLists+0x70>)
 8016dcc:	f7fd ff33 	bl	8014c36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016dd0:	480b      	ldr	r0, [pc, #44]	; (8016e00 <prvInitialiseTaskLists+0x74>)
 8016dd2:	f7fd ff30 	bl	8014c36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016dd6:	4b0b      	ldr	r3, [pc, #44]	; (8016e04 <prvInitialiseTaskLists+0x78>)
 8016dd8:	4a05      	ldr	r2, [pc, #20]	; (8016df0 <prvInitialiseTaskLists+0x64>)
 8016dda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016ddc:	4b0a      	ldr	r3, [pc, #40]	; (8016e08 <prvInitialiseTaskLists+0x7c>)
 8016dde:	4a05      	ldr	r2, [pc, #20]	; (8016df4 <prvInitialiseTaskLists+0x68>)
 8016de0:	601a      	str	r2, [r3, #0]
}
 8016de2:	bf00      	nop
 8016de4:	3708      	adds	r7, #8
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}
 8016dea:	bf00      	nop
 8016dec:	20009260 	.word	0x20009260
 8016df0:	200092ec 	.word	0x200092ec
 8016df4:	20009300 	.word	0x20009300
 8016df8:	2000931c 	.word	0x2000931c
 8016dfc:	20009330 	.word	0x20009330
 8016e00:	20009348 	.word	0x20009348
 8016e04:	20009314 	.word	0x20009314
 8016e08:	20009318 	.word	0x20009318

08016e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b082      	sub	sp, #8
 8016e10:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e12:	e028      	b.n	8016e66 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8016e14:	f7ff fc90 	bl	8016738 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8016e18:	4b17      	ldr	r3, [pc, #92]	; (8016e78 <prvCheckTasksWaitingTermination+0x6c>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	bf0c      	ite	eq
 8016e20:	2301      	moveq	r3, #1
 8016e22:	2300      	movne	r3, #0
 8016e24:	b2db      	uxtb	r3, r3
 8016e26:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8016e28:	f7ff fc94 	bl	8016754 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d119      	bne.n	8016e66 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8016e32:	f7fe f8bd 	bl	8014fb0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8016e36:	4b10      	ldr	r3, [pc, #64]	; (8016e78 <prvCheckTasksWaitingTermination+0x6c>)
 8016e38:	68db      	ldr	r3, [r3, #12]
 8016e3a:	68db      	ldr	r3, [r3, #12]
 8016e3c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016e3e:	683b      	ldr	r3, [r7, #0]
 8016e40:	3304      	adds	r3, #4
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7fd ff81 	bl	8014d4a <uxListRemove>
					--uxCurrentNumberOfTasks;
 8016e48:	4b0c      	ldr	r3, [pc, #48]	; (8016e7c <prvCheckTasksWaitingTermination+0x70>)
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	3b01      	subs	r3, #1
 8016e4e:	4a0b      	ldr	r2, [pc, #44]	; (8016e7c <prvCheckTasksWaitingTermination+0x70>)
 8016e50:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8016e52:	4b0b      	ldr	r3, [pc, #44]	; (8016e80 <prvCheckTasksWaitingTermination+0x74>)
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	3b01      	subs	r3, #1
 8016e58:	4a09      	ldr	r2, [pc, #36]	; (8016e80 <prvCheckTasksWaitingTermination+0x74>)
 8016e5a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8016e5c:	f7fe f8d6 	bl	801500c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8016e60:	6838      	ldr	r0, [r7, #0]
 8016e62:	f000 f80f 	bl	8016e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e66:	4b06      	ldr	r3, [pc, #24]	; (8016e80 <prvCheckTasksWaitingTermination+0x74>)
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d1d2      	bne.n	8016e14 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016e6e:	bf00      	nop
 8016e70:	3708      	adds	r7, #8
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop
 8016e78:	20009330 	.word	0x20009330
 8016e7c:	2000935c 	.word	0x2000935c
 8016e80:	20009344 	.word	0x20009344

08016e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b084      	sub	sp, #16
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d108      	bne.n	8016ea8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f7fe fa5a 	bl	8015354 <vPortFree>
				vPortFree( pxTCB );
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f7fe fa57 	bl	8015354 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016ea6:	e017      	b.n	8016ed8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016eae:	2b01      	cmp	r3, #1
 8016eb0:	d103      	bne.n	8016eba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016eb2:	6878      	ldr	r0, [r7, #4]
 8016eb4:	f7fe fa4e 	bl	8015354 <vPortFree>
	}
 8016eb8:	e00e      	b.n	8016ed8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8016ec0:	2b02      	cmp	r3, #2
 8016ec2:	d009      	beq.n	8016ed8 <prvDeleteTCB+0x54>
 8016ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ec8:	f383 8811 	msr	BASEPRI, r3
 8016ecc:	f3bf 8f6f 	isb	sy
 8016ed0:	f3bf 8f4f 	dsb	sy
 8016ed4:	60fb      	str	r3, [r7, #12]
 8016ed6:	e7fe      	b.n	8016ed6 <prvDeleteTCB+0x52>
	}
 8016ed8:	bf00      	nop
 8016eda:	3710      	adds	r7, #16
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}

08016ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016ee0:	b480      	push	{r7}
 8016ee2:	b083      	sub	sp, #12
 8016ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016ee6:	4b0f      	ldr	r3, [pc, #60]	; (8016f24 <prvResetNextTaskUnblockTime+0x44>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d101      	bne.n	8016ef4 <prvResetNextTaskUnblockTime+0x14>
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	e000      	b.n	8016ef6 <prvResetNextTaskUnblockTime+0x16>
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d004      	beq.n	8016f04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016efa:	4b0b      	ldr	r3, [pc, #44]	; (8016f28 <prvResetNextTaskUnblockTime+0x48>)
 8016efc:	f04f 32ff 	mov.w	r2, #4294967295
 8016f00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016f02:	e008      	b.n	8016f16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8016f04:	4b07      	ldr	r3, [pc, #28]	; (8016f24 <prvResetNextTaskUnblockTime+0x44>)
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	68db      	ldr	r3, [r3, #12]
 8016f0a:	68db      	ldr	r3, [r3, #12]
 8016f0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	685b      	ldr	r3, [r3, #4]
 8016f12:	4a05      	ldr	r2, [pc, #20]	; (8016f28 <prvResetNextTaskUnblockTime+0x48>)
 8016f14:	6013      	str	r3, [r2, #0]
}
 8016f16:	bf00      	nop
 8016f18:	370c      	adds	r7, #12
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f20:	4770      	bx	lr
 8016f22:	bf00      	nop
 8016f24:	20009314 	.word	0x20009314
 8016f28:	2000937c 	.word	0x2000937c

08016f2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016f2c:	b480      	push	{r7}
 8016f2e:	b083      	sub	sp, #12
 8016f30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016f32:	4b0b      	ldr	r3, [pc, #44]	; (8016f60 <xTaskGetSchedulerState+0x34>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d102      	bne.n	8016f40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	607b      	str	r3, [r7, #4]
 8016f3e:	e008      	b.n	8016f52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016f40:	4b08      	ldr	r3, [pc, #32]	; (8016f64 <xTaskGetSchedulerState+0x38>)
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d102      	bne.n	8016f4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016f48:	2302      	movs	r3, #2
 8016f4a:	607b      	str	r3, [r7, #4]
 8016f4c:	e001      	b.n	8016f52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016f4e:	2300      	movs	r3, #0
 8016f50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016f52:	687b      	ldr	r3, [r7, #4]
	}
 8016f54:	4618      	mov	r0, r3
 8016f56:	370c      	adds	r7, #12
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5e:	4770      	bx	lr
 8016f60:	20009368 	.word	0x20009368
 8016f64:	20009384 	.word	0x20009384

08016f68 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b084      	sub	sp, #16
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d062      	beq.n	8017040 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f7e:	4b32      	ldr	r3, [pc, #200]	; (8017048 <vTaskPriorityInherit+0xe0>)
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d25b      	bcs.n	8017040 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	699b      	ldr	r3, [r3, #24]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	db06      	blt.n	8016f9e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f90:	4b2d      	ldr	r3, [pc, #180]	; (8017048 <vTaskPriorityInherit+0xe0>)
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f96:	f1c3 0207 	rsb	r2, r3, #7
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	6959      	ldr	r1, [r3, #20]
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fa6:	4613      	mov	r3, r2
 8016fa8:	009b      	lsls	r3, r3, #2
 8016faa:	4413      	add	r3, r2
 8016fac:	009b      	lsls	r3, r3, #2
 8016fae:	4a27      	ldr	r2, [pc, #156]	; (801704c <vTaskPriorityInherit+0xe4>)
 8016fb0:	4413      	add	r3, r2
 8016fb2:	4299      	cmp	r1, r3
 8016fb4:	d101      	bne.n	8016fba <vTaskPriorityInherit+0x52>
 8016fb6:	2301      	movs	r3, #1
 8016fb8:	e000      	b.n	8016fbc <vTaskPriorityInherit+0x54>
 8016fba:	2300      	movs	r3, #0
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d03a      	beq.n	8017036 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	3304      	adds	r3, #4
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f7fd fec0 	bl	8014d4a <uxListRemove>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d115      	bne.n	8016ffc <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fd4:	491d      	ldr	r1, [pc, #116]	; (801704c <vTaskPriorityInherit+0xe4>)
 8016fd6:	4613      	mov	r3, r2
 8016fd8:	009b      	lsls	r3, r3, #2
 8016fda:	4413      	add	r3, r2
 8016fdc:	009b      	lsls	r3, r3, #2
 8016fde:	440b      	add	r3, r1
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d10a      	bne.n	8016ffc <vTaskPriorityInherit+0x94>
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fea:	2201      	movs	r2, #1
 8016fec:	fa02 f303 	lsl.w	r3, r2, r3
 8016ff0:	43da      	mvns	r2, r3
 8016ff2:	4b17      	ldr	r3, [pc, #92]	; (8017050 <vTaskPriorityInherit+0xe8>)
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	4013      	ands	r3, r2
 8016ff8:	4a15      	ldr	r2, [pc, #84]	; (8017050 <vTaskPriorityInherit+0xe8>)
 8016ffa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016ffc:	4b12      	ldr	r3, [pc, #72]	; (8017048 <vTaskPriorityInherit+0xe0>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801700a:	2201      	movs	r2, #1
 801700c:	409a      	lsls	r2, r3
 801700e:	4b10      	ldr	r3, [pc, #64]	; (8017050 <vTaskPriorityInherit+0xe8>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	4313      	orrs	r3, r2
 8017014:	4a0e      	ldr	r2, [pc, #56]	; (8017050 <vTaskPriorityInherit+0xe8>)
 8017016:	6013      	str	r3, [r2, #0]
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801701c:	4613      	mov	r3, r2
 801701e:	009b      	lsls	r3, r3, #2
 8017020:	4413      	add	r3, r2
 8017022:	009b      	lsls	r3, r3, #2
 8017024:	4a09      	ldr	r2, [pc, #36]	; (801704c <vTaskPriorityInherit+0xe4>)
 8017026:	441a      	add	r2, r3
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	3304      	adds	r3, #4
 801702c:	4619      	mov	r1, r3
 801702e:	4610      	mov	r0, r2
 8017030:	f7fd fe2e 	bl	8014c90 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017034:	e004      	b.n	8017040 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017036:	4b04      	ldr	r3, [pc, #16]	; (8017048 <vTaskPriorityInherit+0xe0>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8017040:	bf00      	nop
 8017042:	3710      	adds	r7, #16
 8017044:	46bd      	mov	sp, r7
 8017046:	bd80      	pop	{r7, pc}
 8017048:	2000925c 	.word	0x2000925c
 801704c:	20009260 	.word	0x20009260
 8017050:	20009364 	.word	0x20009364

08017054 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017054:	b580      	push	{r7, lr}
 8017056:	b086      	sub	sp, #24
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017060:	2300      	movs	r3, #0
 8017062:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d06c      	beq.n	8017144 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801706a:	4b39      	ldr	r3, [pc, #228]	; (8017150 <xTaskPriorityDisinherit+0xfc>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	693a      	ldr	r2, [r7, #16]
 8017070:	429a      	cmp	r2, r3
 8017072:	d009      	beq.n	8017088 <xTaskPriorityDisinherit+0x34>
 8017074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017078:	f383 8811 	msr	BASEPRI, r3
 801707c:	f3bf 8f6f 	isb	sy
 8017080:	f3bf 8f4f 	dsb	sy
 8017084:	60fb      	str	r3, [r7, #12]
 8017086:	e7fe      	b.n	8017086 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8017088:	693b      	ldr	r3, [r7, #16]
 801708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801708c:	2b00      	cmp	r3, #0
 801708e:	d109      	bne.n	80170a4 <xTaskPriorityDisinherit+0x50>
 8017090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017094:	f383 8811 	msr	BASEPRI, r3
 8017098:	f3bf 8f6f 	isb	sy
 801709c:	f3bf 8f4f 	dsb	sy
 80170a0:	60bb      	str	r3, [r7, #8]
 80170a2:	e7fe      	b.n	80170a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80170a4:	693b      	ldr	r3, [r7, #16]
 80170a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170a8:	1e5a      	subs	r2, r3, #1
 80170aa:	693b      	ldr	r3, [r7, #16]
 80170ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80170ae:	693b      	ldr	r3, [r7, #16]
 80170b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170b2:	693b      	ldr	r3, [r7, #16]
 80170b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d044      	beq.n	8017144 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80170ba:	693b      	ldr	r3, [r7, #16]
 80170bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d140      	bne.n	8017144 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80170c2:	693b      	ldr	r3, [r7, #16]
 80170c4:	3304      	adds	r3, #4
 80170c6:	4618      	mov	r0, r3
 80170c8:	f7fd fe3f 	bl	8014d4a <uxListRemove>
 80170cc:	4603      	mov	r3, r0
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d115      	bne.n	80170fe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80170d2:	693b      	ldr	r3, [r7, #16]
 80170d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170d6:	491f      	ldr	r1, [pc, #124]	; (8017154 <xTaskPriorityDisinherit+0x100>)
 80170d8:	4613      	mov	r3, r2
 80170da:	009b      	lsls	r3, r3, #2
 80170dc:	4413      	add	r3, r2
 80170de:	009b      	lsls	r3, r3, #2
 80170e0:	440b      	add	r3, r1
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d10a      	bne.n	80170fe <xTaskPriorityDisinherit+0xaa>
 80170e8:	693b      	ldr	r3, [r7, #16]
 80170ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170ec:	2201      	movs	r2, #1
 80170ee:	fa02 f303 	lsl.w	r3, r2, r3
 80170f2:	43da      	mvns	r2, r3
 80170f4:	4b18      	ldr	r3, [pc, #96]	; (8017158 <xTaskPriorityDisinherit+0x104>)
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	4013      	ands	r3, r2
 80170fa:	4a17      	ldr	r2, [pc, #92]	; (8017158 <xTaskPriorityDisinherit+0x104>)
 80170fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80170fe:	693b      	ldr	r3, [r7, #16]
 8017100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017102:	693b      	ldr	r3, [r7, #16]
 8017104:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801710a:	f1c3 0207 	rsb	r2, r3, #7
 801710e:	693b      	ldr	r3, [r7, #16]
 8017110:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017112:	693b      	ldr	r3, [r7, #16]
 8017114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017116:	2201      	movs	r2, #1
 8017118:	409a      	lsls	r2, r3
 801711a:	4b0f      	ldr	r3, [pc, #60]	; (8017158 <xTaskPriorityDisinherit+0x104>)
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	4313      	orrs	r3, r2
 8017120:	4a0d      	ldr	r2, [pc, #52]	; (8017158 <xTaskPriorityDisinherit+0x104>)
 8017122:	6013      	str	r3, [r2, #0]
 8017124:	693b      	ldr	r3, [r7, #16]
 8017126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017128:	4613      	mov	r3, r2
 801712a:	009b      	lsls	r3, r3, #2
 801712c:	4413      	add	r3, r2
 801712e:	009b      	lsls	r3, r3, #2
 8017130:	4a08      	ldr	r2, [pc, #32]	; (8017154 <xTaskPriorityDisinherit+0x100>)
 8017132:	441a      	add	r2, r3
 8017134:	693b      	ldr	r3, [r7, #16]
 8017136:	3304      	adds	r3, #4
 8017138:	4619      	mov	r1, r3
 801713a:	4610      	mov	r0, r2
 801713c:	f7fd fda8 	bl	8014c90 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017140:	2301      	movs	r3, #1
 8017142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017144:	697b      	ldr	r3, [r7, #20]
	}
 8017146:	4618      	mov	r0, r3
 8017148:	3718      	adds	r7, #24
 801714a:	46bd      	mov	sp, r7
 801714c:	bd80      	pop	{r7, pc}
 801714e:	bf00      	nop
 8017150:	2000925c 	.word	0x2000925c
 8017154:	20009260 	.word	0x20009260
 8017158:	20009364 	.word	0x20009364

0801715c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 801715c:	b480      	push	{r7}
 801715e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017160:	4b07      	ldr	r3, [pc, #28]	; (8017180 <pvTaskIncrementMutexHeldCount+0x24>)
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d004      	beq.n	8017172 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017168:	4b05      	ldr	r3, [pc, #20]	; (8017180 <pvTaskIncrementMutexHeldCount+0x24>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801716e:	3201      	adds	r2, #1
 8017170:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017172:	4b03      	ldr	r3, [pc, #12]	; (8017180 <pvTaskIncrementMutexHeldCount+0x24>)
 8017174:	681b      	ldr	r3, [r3, #0]
	}
 8017176:	4618      	mov	r0, r3
 8017178:	46bd      	mov	sp, r7
 801717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717e:	4770      	bx	lr
 8017180:	2000925c 	.word	0x2000925c

08017184 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b084      	sub	sp, #16
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
 801718c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801718e:	4b29      	ldr	r3, [pc, #164]	; (8017234 <prvAddCurrentTaskToDelayedList+0xb0>)
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017194:	4b28      	ldr	r3, [pc, #160]	; (8017238 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	3304      	adds	r3, #4
 801719a:	4618      	mov	r0, r3
 801719c:	f7fd fdd5 	bl	8014d4a <uxListRemove>
 80171a0:	4603      	mov	r3, r0
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d10b      	bne.n	80171be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80171a6:	4b24      	ldr	r3, [pc, #144]	; (8017238 <prvAddCurrentTaskToDelayedList+0xb4>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ac:	2201      	movs	r2, #1
 80171ae:	fa02 f303 	lsl.w	r3, r2, r3
 80171b2:	43da      	mvns	r2, r3
 80171b4:	4b21      	ldr	r3, [pc, #132]	; (801723c <prvAddCurrentTaskToDelayedList+0xb8>)
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	4013      	ands	r3, r2
 80171ba:	4a20      	ldr	r2, [pc, #128]	; (801723c <prvAddCurrentTaskToDelayedList+0xb8>)
 80171bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171c4:	d10a      	bne.n	80171dc <prvAddCurrentTaskToDelayedList+0x58>
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d007      	beq.n	80171dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80171cc:	4b1a      	ldr	r3, [pc, #104]	; (8017238 <prvAddCurrentTaskToDelayedList+0xb4>)
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	3304      	adds	r3, #4
 80171d2:	4619      	mov	r1, r3
 80171d4:	481a      	ldr	r0, [pc, #104]	; (8017240 <prvAddCurrentTaskToDelayedList+0xbc>)
 80171d6:	f7fd fd5b 	bl	8014c90 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80171da:	e026      	b.n	801722a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80171dc:	68fa      	ldr	r2, [r7, #12]
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	4413      	add	r3, r2
 80171e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80171e4:	4b14      	ldr	r3, [pc, #80]	; (8017238 <prvAddCurrentTaskToDelayedList+0xb4>)
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	68ba      	ldr	r2, [r7, #8]
 80171ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80171ec:	68ba      	ldr	r2, [r7, #8]
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	429a      	cmp	r2, r3
 80171f2:	d209      	bcs.n	8017208 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80171f4:	4b13      	ldr	r3, [pc, #76]	; (8017244 <prvAddCurrentTaskToDelayedList+0xc0>)
 80171f6:	681a      	ldr	r2, [r3, #0]
 80171f8:	4b0f      	ldr	r3, [pc, #60]	; (8017238 <prvAddCurrentTaskToDelayedList+0xb4>)
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	3304      	adds	r3, #4
 80171fe:	4619      	mov	r1, r3
 8017200:	4610      	mov	r0, r2
 8017202:	f7fd fd69 	bl	8014cd8 <vListInsert>
}
 8017206:	e010      	b.n	801722a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017208:	4b0f      	ldr	r3, [pc, #60]	; (8017248 <prvAddCurrentTaskToDelayedList+0xc4>)
 801720a:	681a      	ldr	r2, [r3, #0]
 801720c:	4b0a      	ldr	r3, [pc, #40]	; (8017238 <prvAddCurrentTaskToDelayedList+0xb4>)
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	3304      	adds	r3, #4
 8017212:	4619      	mov	r1, r3
 8017214:	4610      	mov	r0, r2
 8017216:	f7fd fd5f 	bl	8014cd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801721a:	4b0c      	ldr	r3, [pc, #48]	; (801724c <prvAddCurrentTaskToDelayedList+0xc8>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	68ba      	ldr	r2, [r7, #8]
 8017220:	429a      	cmp	r2, r3
 8017222:	d202      	bcs.n	801722a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017224:	4a09      	ldr	r2, [pc, #36]	; (801724c <prvAddCurrentTaskToDelayedList+0xc8>)
 8017226:	68bb      	ldr	r3, [r7, #8]
 8017228:	6013      	str	r3, [r2, #0]
}
 801722a:	bf00      	nop
 801722c:	3710      	adds	r7, #16
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}
 8017232:	bf00      	nop
 8017234:	20009360 	.word	0x20009360
 8017238:	2000925c 	.word	0x2000925c
 801723c:	20009364 	.word	0x20009364
 8017240:	20009348 	.word	0x20009348
 8017244:	20009318 	.word	0x20009318
 8017248:	20009314 	.word	0x20009314
 801724c:	2000937c 	.word	0x2000937c

08017250 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b084      	sub	sp, #16
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
 8017258:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	330c      	adds	r3, #12
 8017260:	461a      	mov	r2, r3
 8017262:	6839      	ldr	r1, [r7, #0]
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	f002 f87b 	bl	8019360 <tcpip_send_msg_wait_sem>
 801726a:	4603      	mov	r3, r0
 801726c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801726e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d103      	bne.n	801727e <netconn_apimsg+0x2e>
    return apimsg->err;
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801727c:	e001      	b.n	8017282 <netconn_apimsg+0x32>
  }
  return err;
 801727e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017282:	4618      	mov	r0, r3
 8017284:	3710      	adds	r7, #16
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}
	...

0801728c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b08a      	sub	sp, #40	; 0x28
 8017290:	af00      	add	r7, sp, #0
 8017292:	4603      	mov	r3, r0
 8017294:	603a      	str	r2, [r7, #0]
 8017296:	71fb      	strb	r3, [r7, #7]
 8017298:	460b      	mov	r3, r1
 801729a:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 801729c:	79fb      	ldrb	r3, [r7, #7]
 801729e:	6839      	ldr	r1, [r7, #0]
 80172a0:	4618      	mov	r0, r3
 80172a2:	f000 feb7 	bl	8018014 <netconn_alloc>
 80172a6:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 80172a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d054      	beq.n	8017358 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80172ae:	79bb      	ldrb	r3, [r7, #6]
 80172b0:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 80172b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172b4:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80172b6:	f107 030c 	add.w	r3, r7, #12
 80172ba:	4619      	mov	r1, r3
 80172bc:	4829      	ldr	r0, [pc, #164]	; (8017364 <netconn_new_with_proto_and_callback+0xd8>)
 80172be:	f7ff ffc7 	bl	8017250 <netconn_apimsg>
 80172c2:	4603      	mov	r3, r0
 80172c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 80172c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d043      	beq.n	8017358 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80172d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172d2:	685b      	ldr	r3, [r3, #4]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d005      	beq.n	80172e4 <netconn_new_with_proto_and_callback+0x58>
 80172d8:	4b23      	ldr	r3, [pc, #140]	; (8017368 <netconn_new_with_proto_and_callback+0xdc>)
 80172da:	2289      	movs	r2, #137	; 0x89
 80172dc:	4923      	ldr	r1, [pc, #140]	; (801736c <netconn_new_with_proto_and_callback+0xe0>)
 80172de:	4824      	ldr	r0, [pc, #144]	; (8017370 <netconn_new_with_proto_and_callback+0xe4>)
 80172e0:	f00e fe02 	bl	8025ee8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80172e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172e6:	3310      	adds	r3, #16
 80172e8:	4618      	mov	r0, r3
 80172ea:	f00b fd21 	bl	8022d30 <sys_mbox_valid>
 80172ee:	4603      	mov	r3, r0
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d105      	bne.n	8017300 <netconn_new_with_proto_and_callback+0x74>
 80172f4:	4b1c      	ldr	r3, [pc, #112]	; (8017368 <netconn_new_with_proto_and_callback+0xdc>)
 80172f6:	228a      	movs	r2, #138	; 0x8a
 80172f8:	491e      	ldr	r1, [pc, #120]	; (8017374 <netconn_new_with_proto_and_callback+0xe8>)
 80172fa:	481d      	ldr	r0, [pc, #116]	; (8017370 <netconn_new_with_proto_and_callback+0xe4>)
 80172fc:	f00e fdf4 	bl	8025ee8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8017300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017302:	3314      	adds	r3, #20
 8017304:	4618      	mov	r0, r3
 8017306:	f00b fd13 	bl	8022d30 <sys_mbox_valid>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d005      	beq.n	801731c <netconn_new_with_proto_and_callback+0x90>
 8017310:	4b15      	ldr	r3, [pc, #84]	; (8017368 <netconn_new_with_proto_and_callback+0xdc>)
 8017312:	228c      	movs	r2, #140	; 0x8c
 8017314:	4918      	ldr	r1, [pc, #96]	; (8017378 <netconn_new_with_proto_and_callback+0xec>)
 8017316:	4816      	ldr	r0, [pc, #88]	; (8017370 <netconn_new_with_proto_and_callback+0xe4>)
 8017318:	f00e fde6 	bl	8025ee8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 801731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801731e:	330c      	adds	r3, #12
 8017320:	4618      	mov	r0, r3
 8017322:	f00b fd96 	bl	8022e52 <sys_sem_valid>
 8017326:	4603      	mov	r3, r0
 8017328:	2b00      	cmp	r3, #0
 801732a:	d105      	bne.n	8017338 <netconn_new_with_proto_and_callback+0xac>
 801732c:	4b0e      	ldr	r3, [pc, #56]	; (8017368 <netconn_new_with_proto_and_callback+0xdc>)
 801732e:	228f      	movs	r2, #143	; 0x8f
 8017330:	4912      	ldr	r1, [pc, #72]	; (801737c <netconn_new_with_proto_and_callback+0xf0>)
 8017332:	480f      	ldr	r0, [pc, #60]	; (8017370 <netconn_new_with_proto_and_callback+0xe4>)
 8017334:	f00e fdd8 	bl	8025ee8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8017338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801733a:	330c      	adds	r3, #12
 801733c:	4618      	mov	r0, r3
 801733e:	f00b fd7b 	bl	8022e38 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8017342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017344:	3310      	adds	r3, #16
 8017346:	4618      	mov	r0, r3
 8017348:	f00b fc56 	bl	8022bf8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 801734c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801734e:	2006      	movs	r0, #6
 8017350:	f004 ffda 	bl	801c308 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8017354:	2300      	movs	r3, #0
 8017356:	e000      	b.n	801735a <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8017358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801735a:	4618      	mov	r0, r3
 801735c:	3728      	adds	r7, #40	; 0x28
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}
 8017362:	bf00      	nop
 8017364:	08017fbd 	.word	0x08017fbd
 8017368:	08026a70 	.word	0x08026a70
 801736c:	08026aa4 	.word	0x08026aa4
 8017370:	08026ac8 	.word	0x08026ac8
 8017374:	08026af0 	.word	0x08026af0
 8017378:	08026b08 	.word	0x08026b08
 801737c:	08026b2c 	.word	0x08026b2c

08017380 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b088      	sub	sp, #32
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d101      	bne.n	8017392 <netconn_delete+0x12>
    return ERR_OK;
 801738e:	2300      	movs	r3, #0
 8017390:	e016      	b.n	80173c0 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8017396:	2329      	movs	r3, #41	; 0x29
 8017398:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801739a:	f107 0308 	add.w	r3, r7, #8
 801739e:	4619      	mov	r1, r3
 80173a0:	4809      	ldr	r0, [pc, #36]	; (80173c8 <netconn_delete+0x48>)
 80173a2:	f7ff ff55 	bl	8017250 <netconn_apimsg>
 80173a6:	4603      	mov	r3, r0
 80173a8:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80173aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d002      	beq.n	80173b8 <netconn_delete+0x38>
    return err;
 80173b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80173b6:	e003      	b.n	80173c0 <netconn_delete+0x40>
  }

  netconn_free(conn);
 80173b8:	6878      	ldr	r0, [r7, #4]
 80173ba:	f000 fe95 	bl	80180e8 <netconn_free>

  return ERR_OK;
 80173be:	2300      	movs	r3, #0
}
 80173c0:	4618      	mov	r0, r3
 80173c2:	3720      	adds	r7, #32
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}
 80173c8:	0801856d 	.word	0x0801856d

080173cc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b08a      	sub	sp, #40	; 0x28
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	60f8      	str	r0, [r7, #12]
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	4613      	mov	r3, r2
 80173d8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d108      	bne.n	80173f2 <netconn_bind+0x26>
 80173e0:	4b11      	ldr	r3, [pc, #68]	; (8017428 <netconn_bind+0x5c>)
 80173e2:	22ff      	movs	r2, #255	; 0xff
 80173e4:	4911      	ldr	r1, [pc, #68]	; (801742c <netconn_bind+0x60>)
 80173e6:	4812      	ldr	r0, [pc, #72]	; (8017430 <netconn_bind+0x64>)
 80173e8:	f00e fd7e 	bl	8025ee8 <iprintf>
 80173ec:	f06f 030f 	mvn.w	r3, #15
 80173f0:	e015      	b.n	801741e <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80173f2:	68bb      	ldr	r3, [r7, #8]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d101      	bne.n	80173fc <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 80173f8:	4b0e      	ldr	r3, [pc, #56]	; (8017434 <netconn_bind+0x68>)
 80173fa:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8017400:	68bb      	ldr	r3, [r7, #8]
 8017402:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8017404:	88fb      	ldrh	r3, [r7, #6]
 8017406:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8017408:	f107 0310 	add.w	r3, r7, #16
 801740c:	4619      	mov	r1, r3
 801740e:	480a      	ldr	r0, [pc, #40]	; (8017438 <netconn_bind+0x6c>)
 8017410:	f7ff ff1e 	bl	8017250 <netconn_apimsg>
 8017414:	4603      	mov	r3, r0
 8017416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 801741a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801741e:	4618      	mov	r0, r3
 8017420:	3728      	adds	r7, #40	; 0x28
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}
 8017426:	bf00      	nop
 8017428:	08026a70 	.word	0x08026a70
 801742c:	08026ba8 	.word	0x08026ba8
 8017430:	08026ac8 	.word	0x08026ac8
 8017434:	0802b5e8 	.word	0x0802b5e8
 8017438:	08018759 	.word	0x08018759

0801743c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b088      	sub	sp, #32
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
 8017444:	460b      	mov	r3, r1
 8017446:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d109      	bne.n	8017462 <netconn_listen_with_backlog+0x26>
 801744e:	4b0d      	ldr	r3, [pc, #52]	; (8017484 <netconn_listen_with_backlog+0x48>)
 8017450:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017454:	490c      	ldr	r1, [pc, #48]	; (8017488 <netconn_listen_with_backlog+0x4c>)
 8017456:	480d      	ldr	r0, [pc, #52]	; (801748c <netconn_listen_with_backlog+0x50>)
 8017458:	f00e fd46 	bl	8025ee8 <iprintf>
 801745c:	f06f 030f 	mvn.w	r3, #15
 8017460:	e00b      	b.n	801747a <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8017466:	f107 0308 	add.w	r3, r7, #8
 801746a:	4619      	mov	r1, r3
 801746c:	4808      	ldr	r0, [pc, #32]	; (8017490 <netconn_listen_with_backlog+0x54>)
 801746e:	f7ff feef 	bl	8017250 <netconn_apimsg>
 8017472:	4603      	mov	r3, r0
 8017474:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8017476:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 801747a:	4618      	mov	r0, r3
 801747c:	3720      	adds	r7, #32
 801747e:	46bd      	mov	sp, r7
 8017480:	bd80      	pop	{r7, pc}
 8017482:	bf00      	nop
 8017484:	08026a70 	.word	0x08026a70
 8017488:	08026c08 	.word	0x08026c08
 801748c:	08026ac8 	.word	0x08026ac8
 8017490:	080187f5 	.word	0x080187f5

08017494 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b086      	sub	sp, #24
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
 801749c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 801749e:	683b      	ldr	r3, [r7, #0]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d109      	bne.n	80174b8 <netconn_accept+0x24>
 80174a4:	4b34      	ldr	r3, [pc, #208]	; (8017578 <netconn_accept+0xe4>)
 80174a6:	f240 128d 	movw	r2, #397	; 0x18d
 80174aa:	4934      	ldr	r1, [pc, #208]	; (801757c <netconn_accept+0xe8>)
 80174ac:	4834      	ldr	r0, [pc, #208]	; (8017580 <netconn_accept+0xec>)
 80174ae:	f00e fd1b 	bl	8025ee8 <iprintf>
 80174b2:	f06f 030f 	mvn.w	r3, #15
 80174b6:	e05b      	b.n	8017570 <netconn_accept+0xdc>
  *new_conn = NULL;
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	2200      	movs	r2, #0
 80174bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d109      	bne.n	80174d8 <netconn_accept+0x44>
 80174c4:	4b2c      	ldr	r3, [pc, #176]	; (8017578 <netconn_accept+0xe4>)
 80174c6:	f240 128f 	movw	r2, #399	; 0x18f
 80174ca:	492e      	ldr	r1, [pc, #184]	; (8017584 <netconn_accept+0xf0>)
 80174cc:	482c      	ldr	r0, [pc, #176]	; (8017580 <netconn_accept+0xec>)
 80174ce:	f00e fd0b 	bl	8025ee8 <iprintf>
 80174d2:	f06f 030f 	mvn.w	r3, #15
 80174d6:	e04b      	b.n	8017570 <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80174de:	f113 0f0c 	cmn.w	r3, #12
 80174e2:	da03      	bge.n	80174ec <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80174ea:	e041      	b.n	8017570 <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	3314      	adds	r3, #20
 80174f0:	4618      	mov	r0, r3
 80174f2:	f00b fc1d 	bl	8022d30 <sys_mbox_valid>
 80174f6:	4603      	mov	r3, r0
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d102      	bne.n	8017502 <netconn_accept+0x6e>
    return ERR_CLSD;
 80174fc:	f06f 030e 	mvn.w	r3, #14
 8017500:	e036      	b.n	8017570 <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	3314      	adds	r3, #20
 8017506:	f107 010c 	add.w	r1, r7, #12
 801750a:	2200      	movs	r2, #0
 801750c:	4618      	mov	r0, r3
 801750e:	f00b fbb4 	bl	8022c7a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801751a:	2b00      	cmp	r3, #0
 801751c:	d005      	beq.n	801752a <netconn_accept+0x96>
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017522:	2200      	movs	r2, #0
 8017524:	2101      	movs	r1, #1
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	4a16      	ldr	r2, [pc, #88]	; (8017588 <netconn_accept+0xf4>)
 801752e:	4293      	cmp	r3, r2
 8017530:	d102      	bne.n	8017538 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 8017532:	f06f 030c 	mvn.w	r3, #12
 8017536:	e01b      	b.n	8017570 <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8017538:	697b      	ldr	r3, [r7, #20]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d114      	bne.n	8017568 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d00e      	beq.n	8017562 <netconn_accept+0xce>
 8017544:	f00b fd10 	bl	8022f68 <sys_arch_protect>
 8017548:	6138      	str	r0, [r7, #16]
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017550:	f113 0f0c 	cmn.w	r3, #12
 8017554:	db02      	blt.n	801755c <netconn_accept+0xc8>
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	22f1      	movs	r2, #241	; 0xf1
 801755a:	721a      	strb	r2, [r3, #8]
 801755c:	6938      	ldr	r0, [r7, #16]
 801755e:	f00b fd11 	bl	8022f84 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 8017562:	f06f 030e 	mvn.w	r3, #14
 8017566:	e003      	b.n	8017570 <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8017568:	683b      	ldr	r3, [r7, #0]
 801756a:	697a      	ldr	r2, [r7, #20]
 801756c:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801756e:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8017570:	4618      	mov	r0, r3
 8017572:	3718      	adds	r7, #24
 8017574:	46bd      	mov	sp, r7
 8017576:	bd80      	pop	{r7, pc}
 8017578:	08026a70 	.word	0x08026a70
 801757c:	08026c28 	.word	0x08026c28
 8017580:	08026ac8 	.word	0x08026ac8
 8017584:	08026c48 	.word	0x08026c48
 8017588:	2000a258 	.word	0x2000a258

0801758c <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b08a      	sub	sp, #40	; 0x28
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
 8017594:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8017596:	2300      	movs	r3, #0
 8017598:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d109      	bne.n	80175b4 <netconn_recv_data+0x28>
 80175a0:	4b4e      	ldr	r3, [pc, #312]	; (80176dc <netconn_recv_data+0x150>)
 80175a2:	f240 12e7 	movw	r2, #487	; 0x1e7
 80175a6:	494e      	ldr	r1, [pc, #312]	; (80176e0 <netconn_recv_data+0x154>)
 80175a8:	484e      	ldr	r0, [pc, #312]	; (80176e4 <netconn_recv_data+0x158>)
 80175aa:	f00e fc9d 	bl	8025ee8 <iprintf>
 80175ae:	f06f 030f 	mvn.w	r3, #15
 80175b2:	e08f      	b.n	80176d4 <netconn_recv_data+0x148>
  *new_buf = NULL;
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	2200      	movs	r2, #0
 80175b8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d109      	bne.n	80175d4 <netconn_recv_data+0x48>
 80175c0:	4b46      	ldr	r3, [pc, #280]	; (80176dc <netconn_recv_data+0x150>)
 80175c2:	f240 12e9 	movw	r2, #489	; 0x1e9
 80175c6:	4948      	ldr	r1, [pc, #288]	; (80176e8 <netconn_recv_data+0x15c>)
 80175c8:	4846      	ldr	r0, [pc, #280]	; (80176e4 <netconn_recv_data+0x158>)
 80175ca:	f00e fc8d 	bl	8025ee8 <iprintf>
 80175ce:	f06f 030f 	mvn.w	r3, #15
 80175d2:	e07f      	b.n	80176d4 <netconn_recv_data+0x148>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	3310      	adds	r3, #16
 80175d8:	4618      	mov	r0, r3
 80175da:	f00b fba9 	bl	8022d30 <sys_mbox_valid>
 80175de:	4603      	mov	r3, r0
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d10d      	bne.n	8017600 <netconn_recv_data+0x74>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	3314      	adds	r3, #20
 80175e8:	4618      	mov	r0, r3
 80175ea:	f00b fba1 	bl	8022d30 <sys_mbox_valid>
 80175ee:	4603      	mov	r3, r0
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d002      	beq.n	80175fa <netconn_recv_data+0x6e>
 80175f4:	f06f 030a 	mvn.w	r3, #10
 80175f8:	e06c      	b.n	80176d4 <netconn_recv_data+0x148>
 80175fa:	f06f 030e 	mvn.w	r3, #14
 80175fe:	e069      	b.n	80176d4 <netconn_recv_data+0x148>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	3310      	adds	r3, #16
 8017604:	4618      	mov	r0, r3
 8017606:	f00b fb93 	bl	8022d30 <sys_mbox_valid>
 801760a:	4603      	mov	r3, r0
 801760c:	2b00      	cmp	r3, #0
 801760e:	d109      	bne.n	8017624 <netconn_recv_data+0x98>
 8017610:	4b32      	ldr	r3, [pc, #200]	; (80176dc <netconn_recv_data+0x150>)
 8017612:	f240 12f5 	movw	r2, #501	; 0x1f5
 8017616:	4935      	ldr	r1, [pc, #212]	; (80176ec <netconn_recv_data+0x160>)
 8017618:	4832      	ldr	r0, [pc, #200]	; (80176e4 <netconn_recv_data+0x158>)
 801761a:	f00e fc65 	bl	8025ee8 <iprintf>
 801761e:	f06f 030a 	mvn.w	r3, #10
 8017622:	e057      	b.n	80176d4 <netconn_recv_data+0x148>

  if (ERR_IS_FATAL(conn->last_err)) {
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801762a:	f113 0f0c 	cmn.w	r3, #12
 801762e:	da03      	bge.n	8017638 <netconn_recv_data+0xac>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017636:	e04d      	b.n	80176d4 <netconn_recv_data+0x148>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	3310      	adds	r3, #16
 801763c:	f107 0120 	add.w	r1, r7, #32
 8017640:	2200      	movs	r2, #0
 8017642:	4618      	mov	r0, r3
 8017644:	f00b fb19 	bl	8022c7a <sys_arch_mbox_fetch>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 801764c:	6a3b      	ldr	r3, [r7, #32]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d003      	beq.n	801765a <netconn_recv_data+0xce>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8017652:	6a3b      	ldr	r3, [r7, #32]
 8017654:	891b      	ldrh	r3, [r3, #8]
 8017656:	617b      	str	r3, [r7, #20]
 8017658:	e001      	b.n	801765e <netconn_recv_data+0xd2>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 801765a:	2301      	movs	r3, #1
 801765c:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 801765e:	f107 030c 	add.w	r3, r7, #12
 8017662:	4619      	mov	r1, r3
 8017664:	4822      	ldr	r0, [pc, #136]	; (80176f0 <netconn_recv_data+0x164>)
 8017666:	f7ff fdf3 	bl	8017250 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 801766a:	6a3b      	ldr	r3, [r7, #32]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d120      	bne.n	80176b2 <netconn_recv_data+0x126>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017674:	2b00      	cmp	r3, #0
 8017676:	d005      	beq.n	8017684 <netconn_recv_data+0xf8>
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801767c:	2200      	movs	r2, #0
 801767e:	2101      	movs	r1, #1
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	685b      	ldr	r3, [r3, #4]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d10b      	bne.n	80176a4 <netconn_recv_data+0x118>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d003      	beq.n	801769e <netconn_recv_data+0x112>
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801769c:	e01a      	b.n	80176d4 <netconn_recv_data+0x148>
 801769e:	f06f 030d 	mvn.w	r3, #13
 80176a2:	e017      	b.n	80176d4 <netconn_recv_data+0x148>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80176a4:	2101      	movs	r1, #1
 80176a6:	6878      	ldr	r0, [r7, #4]
 80176a8:	f000 f908 	bl	80178bc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80176ac:	f06f 030e 	mvn.w	r3, #14
 80176b0:	e010      	b.n	80176d4 <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80176b2:	6a3b      	ldr	r3, [r7, #32]
 80176b4:	891b      	ldrh	r3, [r3, #8]
 80176b6:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d005      	beq.n	80176cc <netconn_recv_data+0x140>
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80176c6:	2101      	movs	r1, #1
 80176c8:	6878      	ldr	r0, [r7, #4]
 80176ca:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80176cc:	6a3a      	ldr	r2, [r7, #32]
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80176d2:	2300      	movs	r3, #0
}
 80176d4:	4618      	mov	r0, r3
 80176d6:	3728      	adds	r7, #40	; 0x28
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	08026a70 	.word	0x08026a70
 80176e0:	08026c68 	.word	0x08026c68
 80176e4:	08026ac8 	.word	0x08026ac8
 80176e8:	08026c88 	.word	0x08026c88
 80176ec:	08026ca4 	.word	0x08026ca4
 80176f0:	08018979 	.word	0x08018979

080176f4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b086      	sub	sp, #24
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
 80176fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80176fe:	2300      	movs	r3, #0
 8017700:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8017702:	683b      	ldr	r3, [r7, #0]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d109      	bne.n	801771c <netconn_recv+0x28>
 8017708:	4b2b      	ldr	r3, [pc, #172]	; (80177b8 <netconn_recv+0xc4>)
 801770a:	f44f 721d 	mov.w	r2, #628	; 0x274
 801770e:	492b      	ldr	r1, [pc, #172]	; (80177bc <netconn_recv+0xc8>)
 8017710:	482b      	ldr	r0, [pc, #172]	; (80177c0 <netconn_recv+0xcc>)
 8017712:	f00e fbe9 	bl	8025ee8 <iprintf>
 8017716:	f06f 030f 	mvn.w	r3, #15
 801771a:	e048      	b.n	80177ae <netconn_recv+0xba>
  *new_buf = NULL;
 801771c:	683b      	ldr	r3, [r7, #0]
 801771e:	2200      	movs	r2, #0
 8017720:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d109      	bne.n	801773c <netconn_recv+0x48>
 8017728:	4b23      	ldr	r3, [pc, #140]	; (80177b8 <netconn_recv+0xc4>)
 801772a:	f240 2276 	movw	r2, #630	; 0x276
 801772e:	4925      	ldr	r1, [pc, #148]	; (80177c4 <netconn_recv+0xd0>)
 8017730:	4823      	ldr	r0, [pc, #140]	; (80177c0 <netconn_recv+0xcc>)
 8017732:	f00e fbd9 	bl	8025ee8 <iprintf>
 8017736:	f06f 030f 	mvn.w	r3, #15
 801773a:	e038      	b.n	80177ae <netconn_recv+0xba>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 801773c:	2300      	movs	r3, #0
 801773e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8017740:	2005      	movs	r0, #5
 8017742:	f004 fd8f 	bl	801c264 <memp_malloc>
 8017746:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8017748:	697b      	ldr	r3, [r7, #20]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d102      	bne.n	8017754 <netconn_recv+0x60>
      return ERR_MEM;
 801774e:	f04f 33ff 	mov.w	r3, #4294967295
 8017752:	e02c      	b.n	80177ae <netconn_recv+0xba>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8017754:	f107 030c 	add.w	r3, r7, #12
 8017758:	4619      	mov	r1, r3
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f7ff ff16 	bl	801758c <netconn_recv_data>
 8017760:	4603      	mov	r3, r0
 8017762:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017764:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d006      	beq.n	801777a <netconn_recv+0x86>
      memp_free(MEMP_NETBUF, buf);
 801776c:	6979      	ldr	r1, [r7, #20]
 801776e:	2005      	movs	r0, #5
 8017770:	f004 fdca 	bl	801c308 <memp_free>
      return err;
 8017774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017778:	e019      	b.n	80177ae <netconn_recv+0xba>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d106      	bne.n	801778e <netconn_recv+0x9a>
 8017780:	4b0d      	ldr	r3, [pc, #52]	; (80177b8 <netconn_recv+0xc4>)
 8017782:	f240 228a 	movw	r2, #650	; 0x28a
 8017786:	4910      	ldr	r1, [pc, #64]	; (80177c8 <netconn_recv+0xd4>)
 8017788:	480d      	ldr	r0, [pc, #52]	; (80177c0 <netconn_recv+0xcc>)
 801778a:	f00e fbad 	bl	8025ee8 <iprintf>

    buf->p = p;
 801778e:	68fa      	ldr	r2, [r7, #12]
 8017790:	697b      	ldr	r3, [r7, #20]
 8017792:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8017794:	68fa      	ldr	r2, [r7, #12]
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 801779a:	697b      	ldr	r3, [r7, #20]
 801779c:	2200      	movs	r2, #0
 801779e:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	2200      	movs	r2, #0
 80177a4:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80177a6:	683b      	ldr	r3, [r7, #0]
 80177a8:	697a      	ldr	r2, [r7, #20]
 80177aa:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80177ac:	2300      	movs	r3, #0
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	3718      	adds	r7, #24
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}
 80177b6:	bf00      	nop
 80177b8:	08026a70 	.word	0x08026a70
 80177bc:	08026c68 	.word	0x08026c68
 80177c0:	08026ac8 	.word	0x08026ac8
 80177c4:	08026c88 	.word	0x08026c88
 80177c8:	08026cc4 	.word	0x08026cc4

080177cc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b08a      	sub	sp, #40	; 0x28
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	60f8      	str	r0, [r7, #12]
 80177d4:	60b9      	str	r1, [r7, #8]
 80177d6:	607a      	str	r2, [r7, #4]
 80177d8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d109      	bne.n	80177f4 <netconn_write_partly+0x28>
 80177e0:	4b31      	ldr	r3, [pc, #196]	; (80178a8 <netconn_write_partly+0xdc>)
 80177e2:	f240 22e6 	movw	r2, #742	; 0x2e6
 80177e6:	4931      	ldr	r1, [pc, #196]	; (80178ac <netconn_write_partly+0xe0>)
 80177e8:	4831      	ldr	r0, [pc, #196]	; (80178b0 <netconn_write_partly+0xe4>)
 80177ea:	f00e fb7d 	bl	8025ee8 <iprintf>
 80177ee:	f06f 030f 	mvn.w	r3, #15
 80177f2:	e054      	b.n	801789e <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	781b      	ldrb	r3, [r3, #0]
 80177f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80177fc:	2b10      	cmp	r3, #16
 80177fe:	d009      	beq.n	8017814 <netconn_write_partly+0x48>
 8017800:	4b29      	ldr	r3, [pc, #164]	; (80178a8 <netconn_write_partly+0xdc>)
 8017802:	f240 22e7 	movw	r2, #743	; 0x2e7
 8017806:	492b      	ldr	r1, [pc, #172]	; (80178b4 <netconn_write_partly+0xe8>)
 8017808:	4829      	ldr	r0, [pc, #164]	; (80178b0 <netconn_write_partly+0xe4>)
 801780a:	f00e fb6d 	bl	8025ee8 <iprintf>
 801780e:	f06f 0305 	mvn.w	r3, #5
 8017812:	e044      	b.n	801789e <netconn_write_partly+0xd2>
  if (size == 0) {
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d101      	bne.n	801781e <netconn_write_partly+0x52>
    return ERR_OK;
 801781a:	2300      	movs	r3, #0
 801781c:	e03f      	b.n	801789e <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	7f1b      	ldrb	r3, [r3, #28]
 8017822:	f003 0302 	and.w	r3, r3, #2
 8017826:	2b00      	cmp	r3, #0
 8017828:	d104      	bne.n	8017834 <netconn_write_partly+0x68>
 801782a:	78fb      	ldrb	r3, [r7, #3]
 801782c:	f003 0304 	and.w	r3, r3, #4
 8017830:	2b00      	cmp	r3, #0
 8017832:	d001      	beq.n	8017838 <netconn_write_partly+0x6c>
 8017834:	2301      	movs	r3, #1
 8017836:	e000      	b.n	801783a <netconn_write_partly+0x6e>
 8017838:	2300      	movs	r3, #0
 801783a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 801783e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017842:	2b00      	cmp	r3, #0
 8017844:	d005      	beq.n	8017852 <netconn_write_partly+0x86>
 8017846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017848:	2b00      	cmp	r3, #0
 801784a:	d102      	bne.n	8017852 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801784c:	f06f 0305 	mvn.w	r3, #5
 8017850:	e025      	b.n	801789e <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8017856:	68bb      	ldr	r3, [r7, #8]
 8017858:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 801785a:	78fb      	ldrb	r3, [r7, #3]
 801785c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8017864:	f107 0310 	add.w	r3, r7, #16
 8017868:	4619      	mov	r1, r3
 801786a:	4813      	ldr	r0, [pc, #76]	; (80178b8 <netconn_write_partly+0xec>)
 801786c:	f7ff fcf0 	bl	8017250 <netconn_apimsg>
 8017870:	4603      	mov	r3, r0
 8017872:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8017876:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 801787a:	2b00      	cmp	r3, #0
 801787c:	d10d      	bne.n	801789a <netconn_write_partly+0xce>
 801787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017880:	2b00      	cmp	r3, #0
 8017882:	d00a      	beq.n	801789a <netconn_write_partly+0xce>
    if (dontblock) {
 8017884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017888:	2b00      	cmp	r3, #0
 801788a:	d003      	beq.n	8017894 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 801788c:	69fa      	ldr	r2, [r7, #28]
 801788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017890:	601a      	str	r2, [r3, #0]
 8017892:	e002      	b.n	801789a <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8017894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017896:	687a      	ldr	r2, [r7, #4]
 8017898:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 801789a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 801789e:	4618      	mov	r0, r3
 80178a0:	3728      	adds	r7, #40	; 0x28
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}
 80178a6:	bf00      	nop
 80178a8:	08026a70 	.word	0x08026a70
 80178ac:	08026cec 	.word	0x08026cec
 80178b0:	08026ac8 	.word	0x08026ac8
 80178b4:	08026d08 	.word	0x08026d08
 80178b8:	08018d59 	.word	0x08018d59

080178bc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b088      	sub	sp, #32
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
 80178c4:	460b      	mov	r3, r1
 80178c6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d109      	bne.n	80178e2 <netconn_close_shutdown+0x26>
 80178ce:	4b0f      	ldr	r3, [pc, #60]	; (801790c <netconn_close_shutdown+0x50>)
 80178d0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80178d4:	490e      	ldr	r1, [pc, #56]	; (8017910 <netconn_close_shutdown+0x54>)
 80178d6:	480f      	ldr	r0, [pc, #60]	; (8017914 <netconn_close_shutdown+0x58>)
 80178d8:	f00e fb06 	bl	8025ee8 <iprintf>
 80178dc:	f06f 030f 	mvn.w	r3, #15
 80178e0:	e00f      	b.n	8017902 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80178e6:	78fb      	ldrb	r3, [r7, #3]
 80178e8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80178ea:	2329      	movs	r3, #41	; 0x29
 80178ec:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80178ee:	f107 0308 	add.w	r3, r7, #8
 80178f2:	4619      	mov	r1, r3
 80178f4:	4808      	ldr	r0, [pc, #32]	; (8017918 <netconn_close_shutdown+0x5c>)
 80178f6:	f7ff fcab 	bl	8017250 <netconn_apimsg>
 80178fa:	4603      	mov	r3, r0
 80178fc:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 80178fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017902:	4618      	mov	r0, r3
 8017904:	3720      	adds	r7, #32
 8017906:	46bd      	mov	sp, r7
 8017908:	bd80      	pop	{r7, pc}
 801790a:	bf00      	nop
 801790c:	08026a70 	.word	0x08026a70
 8017910:	08026d2c 	.word	0x08026d2c
 8017914:	08026ac8 	.word	0x08026ac8
 8017918:	08018eb1 	.word	0x08018eb1

0801791c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8017924:	2103      	movs	r1, #3
 8017926:	6878      	ldr	r0, [r7, #4]
 8017928:	f7ff ffc8 	bl	80178bc <netconn_close_shutdown>
 801792c:	4603      	mov	r3, r0
}
 801792e:	4618      	mov	r0, r3
 8017930:	3708      	adds	r7, #8
 8017932:	46bd      	mov	sp, r7
 8017934:	bd80      	pop	{r7, pc}
	...

08017938 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b088      	sub	sp, #32
 801793c:	af00      	add	r7, sp, #0
 801793e:	60f8      	str	r0, [r7, #12]
 8017940:	60b9      	str	r1, [r7, #8]
 8017942:	607a      	str	r2, [r7, #4]
 8017944:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8017946:	68bb      	ldr	r3, [r7, #8]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d105      	bne.n	8017958 <recv_tcp+0x20>
 801794c:	4b39      	ldr	r3, [pc, #228]	; (8017a34 <recv_tcp+0xfc>)
 801794e:	22f9      	movs	r2, #249	; 0xf9
 8017950:	4939      	ldr	r1, [pc, #228]	; (8017a38 <recv_tcp+0x100>)
 8017952:	483a      	ldr	r0, [pc, #232]	; (8017a3c <recv_tcp+0x104>)
 8017954:	f00e fac8 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d105      	bne.n	801796a <recv_tcp+0x32>
 801795e:	4b35      	ldr	r3, [pc, #212]	; (8017a34 <recv_tcp+0xfc>)
 8017960:	22fa      	movs	r2, #250	; 0xfa
 8017962:	4937      	ldr	r1, [pc, #220]	; (8017a40 <recv_tcp+0x108>)
 8017964:	4835      	ldr	r0, [pc, #212]	; (8017a3c <recv_tcp+0x104>)
 8017966:	f00e fabf 	bl	8025ee8 <iprintf>
  conn = (struct netconn *)arg;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 801796e:	69bb      	ldr	r3, [r7, #24]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d102      	bne.n	801797a <recv_tcp+0x42>
    return ERR_VAL;
 8017974:	f06f 0305 	mvn.w	r3, #5
 8017978:	e057      	b.n	8017a2a <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 801797a:	69bb      	ldr	r3, [r7, #24]
 801797c:	685a      	ldr	r2, [r3, #4]
 801797e:	68bb      	ldr	r3, [r7, #8]
 8017980:	429a      	cmp	r2, r3
 8017982:	d006      	beq.n	8017992 <recv_tcp+0x5a>
 8017984:	4b2b      	ldr	r3, [pc, #172]	; (8017a34 <recv_tcp+0xfc>)
 8017986:	f44f 7280 	mov.w	r2, #256	; 0x100
 801798a:	492e      	ldr	r1, [pc, #184]	; (8017a44 <recv_tcp+0x10c>)
 801798c:	482b      	ldr	r0, [pc, #172]	; (8017a3c <recv_tcp+0x104>)
 801798e:	f00e faab 	bl	8025ee8 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8017992:	69bb      	ldr	r3, [r7, #24]
 8017994:	3310      	adds	r3, #16
 8017996:	4618      	mov	r0, r3
 8017998:	f00b f9ca 	bl	8022d30 <sys_mbox_valid>
 801799c:	4603      	mov	r3, r0
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d10d      	bne.n	80179be <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d008      	beq.n	80179ba <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	891b      	ldrh	r3, [r3, #8]
 80179ac:	4619      	mov	r1, r3
 80179ae:	68b8      	ldr	r0, [r7, #8]
 80179b0:	f006 f8d8 	bl	801db64 <tcp_recved>
      pbuf_free(p);
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f005 f9f9 	bl	801cdac <pbuf_free>
    }
    return ERR_OK;
 80179ba:	2300      	movs	r3, #0
 80179bc:	e035      	b.n	8017a2a <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80179be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d011      	beq.n	80179ea <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 80179c6:	69bb      	ldr	r3, [r7, #24]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d00e      	beq.n	80179ea <recv_tcp+0xb2>
 80179cc:	f00b facc 	bl	8022f68 <sys_arch_protect>
 80179d0:	6178      	str	r0, [r7, #20]
 80179d2:	69bb      	ldr	r3, [r7, #24]
 80179d4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80179d8:	f113 0f0c 	cmn.w	r3, #12
 80179dc:	db02      	blt.n	80179e4 <recv_tcp+0xac>
 80179de:	69bb      	ldr	r3, [r7, #24]
 80179e0:	78fa      	ldrb	r2, [r7, #3]
 80179e2:	721a      	strb	r2, [r3, #8]
 80179e4:	6978      	ldr	r0, [r7, #20]
 80179e6:	f00b facd 	bl	8022f84 <sys_arch_unprotect>
  }

  if (p != NULL) {
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d003      	beq.n	80179f8 <recv_tcp+0xc0>
    len = p->tot_len;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	891b      	ldrh	r3, [r3, #8]
 80179f4:	83fb      	strh	r3, [r7, #30]
 80179f6:	e001      	b.n	80179fc <recv_tcp+0xc4>
  } else {
    len = 0;
 80179f8:	2300      	movs	r3, #0
 80179fa:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 80179fc:	69bb      	ldr	r3, [r7, #24]
 80179fe:	3310      	adds	r3, #16
 8017a00:	6879      	ldr	r1, [r7, #4]
 8017a02:	4618      	mov	r0, r3
 8017a04:	f00b f91f 	bl	8022c46 <sys_mbox_trypost>
 8017a08:	4603      	mov	r3, r0
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d002      	beq.n	8017a14 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8017a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a12:	e00a      	b.n	8017a2a <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8017a14:	69bb      	ldr	r3, [r7, #24]
 8017a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d005      	beq.n	8017a28 <recv_tcp+0xf0>
 8017a1c:	69bb      	ldr	r3, [r7, #24]
 8017a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a20:	8bfa      	ldrh	r2, [r7, #30]
 8017a22:	2100      	movs	r1, #0
 8017a24:	69b8      	ldr	r0, [r7, #24]
 8017a26:	4798      	blx	r3
  }

  return ERR_OK;
 8017a28:	2300      	movs	r3, #0
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	3720      	adds	r7, #32
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd80      	pop	{r7, pc}
 8017a32:	bf00      	nop
 8017a34:	08026d48 	.word	0x08026d48
 8017a38:	08026d7c 	.word	0x08026d7c
 8017a3c:	08026da0 	.word	0x08026da0
 8017a40:	08026dc8 	.word	0x08026dc8
 8017a44:	08026de8 	.word	0x08026de8

08017a48 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b084      	sub	sp, #16
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
 8017a50:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d106      	bne.n	8017a6a <poll_tcp+0x22>
 8017a5c:	4b2a      	ldr	r3, [pc, #168]	; (8017b08 <poll_tcp+0xc0>)
 8017a5e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8017a62:	492a      	ldr	r1, [pc, #168]	; (8017b0c <poll_tcp+0xc4>)
 8017a64:	482a      	ldr	r0, [pc, #168]	; (8017b10 <poll_tcp+0xc8>)
 8017a66:	f00e fa3f 	bl	8025ee8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	785b      	ldrb	r3, [r3, #1]
 8017a6e:	2b01      	cmp	r3, #1
 8017a70:	d104      	bne.n	8017a7c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8017a72:	2101      	movs	r1, #1
 8017a74:	68f8      	ldr	r0, [r7, #12]
 8017a76:	f000 ffcb 	bl	8018a10 <lwip_netconn_do_writemore>
 8017a7a:	e016      	b.n	8017aaa <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	785b      	ldrb	r3, [r3, #1]
 8017a80:	2b04      	cmp	r3, #4
 8017a82:	d112      	bne.n	8017aaa <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d00a      	beq.n	8017aa2 <poll_tcp+0x5a>
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a90:	7a5b      	ldrb	r3, [r3, #9]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d005      	beq.n	8017aa2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a9a:	7a5a      	ldrb	r2, [r3, #9]
 8017a9c:	3a01      	subs	r2, #1
 8017a9e:	b2d2      	uxtb	r2, r2
 8017aa0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8017aa2:	2101      	movs	r1, #1
 8017aa4:	68f8      	ldr	r0, [r7, #12]
 8017aa6:	f000 fbe9 	bl	801827c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	7f1b      	ldrb	r3, [r3, #28]
 8017aae:	f003 0310 	and.w	r3, r3, #16
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d022      	beq.n	8017afc <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	685b      	ldr	r3, [r3, #4]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d01e      	beq.n	8017afc <poll_tcp+0xb4>
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017ac6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017aca:	4293      	cmp	r3, r2
 8017acc:	d916      	bls.n	8017afc <poll_tcp+0xb4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8017ad6:	2b04      	cmp	r3, #4
 8017ad8:	d810      	bhi.n	8017afc <poll_tcp+0xb4>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	7f1b      	ldrb	r3, [r3, #28]
 8017ade:	f023 0310 	bic.w	r3, r3, #16
 8017ae2:	b2da      	uxtb	r2, r3
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d005      	beq.n	8017afc <poll_tcp+0xb4>
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017af4:	2200      	movs	r2, #0
 8017af6:	2102      	movs	r1, #2
 8017af8:	68f8      	ldr	r0, [r7, #12]
 8017afa:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8017afc:	2300      	movs	r3, #0
}
 8017afe:	4618      	mov	r0, r3
 8017b00:	3710      	adds	r7, #16
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}
 8017b06:	bf00      	nop
 8017b08:	08026d48 	.word	0x08026d48
 8017b0c:	08026e08 	.word	0x08026e08
 8017b10:	08026da0 	.word	0x08026da0

08017b14 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b086      	sub	sp, #24
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	4613      	mov	r3, r2
 8017b20:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8017b26:	697b      	ldr	r3, [r7, #20]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d106      	bne.n	8017b3a <sent_tcp+0x26>
 8017b2c:	4b21      	ldr	r3, [pc, #132]	; (8017bb4 <sent_tcp+0xa0>)
 8017b2e:	f240 1261 	movw	r2, #353	; 0x161
 8017b32:	4921      	ldr	r1, [pc, #132]	; (8017bb8 <sent_tcp+0xa4>)
 8017b34:	4821      	ldr	r0, [pc, #132]	; (8017bbc <sent_tcp+0xa8>)
 8017b36:	f00e f9d7 	bl	8025ee8 <iprintf>

  if (conn) {
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d033      	beq.n	8017ba8 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	785b      	ldrb	r3, [r3, #1]
 8017b44:	2b01      	cmp	r3, #1
 8017b46:	d104      	bne.n	8017b52 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8017b48:	2101      	movs	r1, #1
 8017b4a:	6978      	ldr	r0, [r7, #20]
 8017b4c:	f000 ff60 	bl	8018a10 <lwip_netconn_do_writemore>
 8017b50:	e007      	b.n	8017b62 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8017b52:	697b      	ldr	r3, [r7, #20]
 8017b54:	785b      	ldrb	r3, [r3, #1]
 8017b56:	2b04      	cmp	r3, #4
 8017b58:	d103      	bne.n	8017b62 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8017b5a:	2101      	movs	r1, #1
 8017b5c:	6978      	ldr	r0, [r7, #20]
 8017b5e:	f000 fb8d 	bl	801827c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8017b62:	697b      	ldr	r3, [r7, #20]
 8017b64:	685b      	ldr	r3, [r3, #4]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d01e      	beq.n	8017ba8 <sent_tcp+0x94>
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	685b      	ldr	r3, [r3, #4]
 8017b6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017b72:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017b76:	4293      	cmp	r3, r2
 8017b78:	d916      	bls.n	8017ba8 <sent_tcp+0x94>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8017b7a:	697b      	ldr	r3, [r7, #20]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8017b82:	2b04      	cmp	r3, #4
 8017b84:	d810      	bhi.n	8017ba8 <sent_tcp+0x94>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8017b86:	697b      	ldr	r3, [r7, #20]
 8017b88:	7f1b      	ldrb	r3, [r3, #28]
 8017b8a:	f023 0310 	bic.w	r3, r3, #16
 8017b8e:	b2da      	uxtb	r2, r3
 8017b90:	697b      	ldr	r3, [r7, #20]
 8017b92:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d005      	beq.n	8017ba8 <sent_tcp+0x94>
 8017b9c:	697b      	ldr	r3, [r7, #20]
 8017b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ba0:	88fa      	ldrh	r2, [r7, #6]
 8017ba2:	2102      	movs	r1, #2
 8017ba4:	6978      	ldr	r0, [r7, #20]
 8017ba6:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8017ba8:	2300      	movs	r3, #0
}
 8017baa:	4618      	mov	r0, r3
 8017bac:	3718      	adds	r7, #24
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd80      	pop	{r7, pc}
 8017bb2:	bf00      	nop
 8017bb4:	08026d48 	.word	0x08026d48
 8017bb8:	08026e08 	.word	0x08026e08
 8017bbc:	08026da0 	.word	0x08026da0

08017bc0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b08a      	sub	sp, #40	; 0x28
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
 8017bc8:	460b      	mov	r3, r1
 8017bca:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8017bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d106      	bne.n	8017be4 <err_tcp+0x24>
 8017bd6:	4b6c      	ldr	r3, [pc, #432]	; (8017d88 <err_tcp+0x1c8>)
 8017bd8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017bdc:	496b      	ldr	r1, [pc, #428]	; (8017d8c <err_tcp+0x1cc>)
 8017bde:	486c      	ldr	r0, [pc, #432]	; (8017d90 <err_tcp+0x1d0>)
 8017be0:	f00e f982 	bl	8025ee8 <iprintf>

  conn->pcb.tcp = NULL;
 8017be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be6:	2200      	movs	r2, #0
 8017be8:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8017bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bec:	785b      	ldrb	r3, [r3, #1]
 8017bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8017bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8017bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017bfc:	2b04      	cmp	r3, #4
 8017bfe:	d114      	bne.n	8017c2a <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8017c00:	2300      	movs	r3, #0
 8017c02:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8017c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d018      	beq.n	8017c3c <err_tcp+0x7c>
 8017c0a:	f00b f9ad 	bl	8022f68 <sys_arch_protect>
 8017c0e:	61f8      	str	r0, [r7, #28]
 8017c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c12:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017c16:	f113 0f0c 	cmn.w	r3, #12
 8017c1a:	db02      	blt.n	8017c22 <err_tcp+0x62>
 8017c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1e:	2200      	movs	r2, #0
 8017c20:	721a      	strb	r2, [r3, #8]
 8017c22:	69f8      	ldr	r0, [r7, #28]
 8017c24:	f00b f9ae 	bl	8022f84 <sys_arch_unprotect>
 8017c28:	e008      	b.n	8017c3c <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8017c2a:	f00b f99d 	bl	8022f68 <sys_arch_protect>
 8017c2e:	61b8      	str	r0, [r7, #24]
 8017c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c32:	78fa      	ldrb	r2, [r7, #3]
 8017c34:	721a      	strb	r2, [r3, #8]
 8017c36:	69b8      	ldr	r0, [r7, #24]
 8017c38:	f00b f9a4 	bl	8022f84 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8017c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d005      	beq.n	8017c50 <err_tcp+0x90>
 8017c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c48:	2200      	movs	r2, #0
 8017c4a:	2104      	movs	r1, #4
 8017c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c4e:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d005      	beq.n	8017c64 <err_tcp+0xa4>
 8017c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c5c:	2200      	movs	r2, #0
 8017c5e:	2100      	movs	r1, #0
 8017c60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c62:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8017c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d005      	beq.n	8017c78 <err_tcp+0xb8>
 8017c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c70:	2200      	movs	r2, #0
 8017c72:	2102      	movs	r1, #2
 8017c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c76:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8017c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c7a:	3310      	adds	r3, #16
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	f00b f857 	bl	8022d30 <sys_mbox_valid>
 8017c82:	4603      	mov	r3, r0
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d005      	beq.n	8017c94 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8017c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c8a:	3310      	adds	r3, #16
 8017c8c:	2100      	movs	r1, #0
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f00a ffd9 	bl	8022c46 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8017c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c96:	3314      	adds	r3, #20
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f00b f849 	bl	8022d30 <sys_mbox_valid>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d005      	beq.n	8017cb0 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8017ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca6:	3314      	adds	r3, #20
 8017ca8:	2100      	movs	r1, #0
 8017caa:	4618      	mov	r0, r3
 8017cac:	f00a ffcb 	bl	8022c46 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8017cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017cb4:	2b01      	cmp	r3, #1
 8017cb6:	d007      	beq.n	8017cc8 <err_tcp+0x108>
 8017cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017cbc:	2b04      	cmp	r3, #4
 8017cbe:	d003      	beq.n	8017cc8 <err_tcp+0x108>
 8017cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017cc4:	2b03      	cmp	r3, #3
 8017cc6:	d14d      	bne.n	8017d64 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8017cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cca:	7f1b      	ldrb	r3, [r3, #28]
 8017ccc:	f003 0304 	and.w	r3, r3, #4
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	bf14      	ite	ne
 8017cd4:	2301      	movne	r3, #1
 8017cd6:	2300      	moveq	r3, #0
 8017cd8:	b2db      	uxtb	r3, r3
 8017cda:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8017cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cde:	7f1b      	ldrb	r3, [r3, #28]
 8017ce0:	f023 0304 	bic.w	r3, r3, #4
 8017ce4:	b2da      	uxtb	r2, r3
 8017ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8017cea:	697b      	ldr	r3, [r7, #20]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d145      	bne.n	8017d7c <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8017cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d106      	bne.n	8017d06 <err_tcp+0x146>
 8017cf8:	4b23      	ldr	r3, [pc, #140]	; (8017d88 <err_tcp+0x1c8>)
 8017cfa:	f240 12b3 	movw	r2, #435	; 0x1b3
 8017cfe:	4925      	ldr	r1, [pc, #148]	; (8017d94 <err_tcp+0x1d4>)
 8017d00:	4823      	ldr	r0, [pc, #140]	; (8017d90 <err_tcp+0x1d0>)
 8017d02:	f00e f8f1 	bl	8025ee8 <iprintf>
      conn->current_msg->err = err;
 8017d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d0a:	78fa      	ldrb	r2, [r7, #3]
 8017d0c:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8017d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	330c      	adds	r3, #12
 8017d16:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8017d18:	6938      	ldr	r0, [r7, #16]
 8017d1a:	f00b f89a 	bl	8022e52 <sys_sem_valid>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d106      	bne.n	8017d32 <err_tcp+0x172>
 8017d24:	4b18      	ldr	r3, [pc, #96]	; (8017d88 <err_tcp+0x1c8>)
 8017d26:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017d2a:	491b      	ldr	r1, [pc, #108]	; (8017d98 <err_tcp+0x1d8>)
 8017d2c:	4818      	ldr	r0, [pc, #96]	; (8017d90 <err_tcp+0x1d0>)
 8017d2e:	f00e f8db 	bl	8025ee8 <iprintf>
      conn->current_msg = NULL;
 8017d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d34:	2200      	movs	r2, #0
 8017d36:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8017d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d00e      	beq.n	8017d5c <err_tcp+0x19c>
 8017d3e:	f00b f913 	bl	8022f68 <sys_arch_protect>
 8017d42:	60f8      	str	r0, [r7, #12]
 8017d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d46:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017d4a:	f113 0f0c 	cmn.w	r3, #12
 8017d4e:	db02      	blt.n	8017d56 <err_tcp+0x196>
 8017d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d52:	78fa      	ldrb	r2, [r7, #3]
 8017d54:	721a      	strb	r2, [r3, #8]
 8017d56:	68f8      	ldr	r0, [r7, #12]
 8017d58:	f00b f914 	bl	8022f84 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8017d5c:	6938      	ldr	r0, [r7, #16]
 8017d5e:	f00b f85e 	bl	8022e1e <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8017d62:	e00b      	b.n	8017d7c <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8017d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d008      	beq.n	8017d7e <err_tcp+0x1be>
 8017d6c:	4b06      	ldr	r3, [pc, #24]	; (8017d88 <err_tcp+0x1c8>)
 8017d6e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8017d72:	490a      	ldr	r1, [pc, #40]	; (8017d9c <err_tcp+0x1dc>)
 8017d74:	4806      	ldr	r0, [pc, #24]	; (8017d90 <err_tcp+0x1d0>)
 8017d76:	f00e f8b7 	bl	8025ee8 <iprintf>
  }
}
 8017d7a:	e000      	b.n	8017d7e <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8017d7c:	bf00      	nop
}
 8017d7e:	bf00      	nop
 8017d80:	3728      	adds	r7, #40	; 0x28
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	08026d48 	.word	0x08026d48
 8017d8c:	08026e08 	.word	0x08026e08
 8017d90:	08026da0 	.word	0x08026da0
 8017d94:	08026e18 	.word	0x08026e18
 8017d98:	08026e34 	.word	0x08026e34
 8017d9c:	08026e50 	.word	0x08026e50

08017da0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b084      	sub	sp, #16
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8017dae:	6879      	ldr	r1, [r7, #4]
 8017db0:	68f8      	ldr	r0, [r7, #12]
 8017db2:	f006 fcb9 	bl	801e728 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8017db6:	490a      	ldr	r1, [pc, #40]	; (8017de0 <setup_tcp+0x40>)
 8017db8:	68f8      	ldr	r0, [r7, #12]
 8017dba:	f006 fcc7 	bl	801e74c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8017dbe:	4909      	ldr	r1, [pc, #36]	; (8017de4 <setup_tcp+0x44>)
 8017dc0:	68f8      	ldr	r0, [r7, #12]
 8017dc2:	f006 fce5 	bl	801e790 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8017dc6:	2202      	movs	r2, #2
 8017dc8:	4907      	ldr	r1, [pc, #28]	; (8017de8 <setup_tcp+0x48>)
 8017dca:	68f8      	ldr	r0, [r7, #12]
 8017dcc:	f006 fd3a 	bl	801e844 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8017dd0:	4906      	ldr	r1, [pc, #24]	; (8017dec <setup_tcp+0x4c>)
 8017dd2:	68f8      	ldr	r0, [r7, #12]
 8017dd4:	f006 fcfc 	bl	801e7d0 <tcp_err>
}
 8017dd8:	bf00      	nop
 8017dda:	3710      	adds	r7, #16
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	bd80      	pop	{r7, pc}
 8017de0:	08017939 	.word	0x08017939
 8017de4:	08017b15 	.word	0x08017b15
 8017de8:	08017a49 	.word	0x08017a49
 8017dec:	08017bc1 	.word	0x08017bc1

08017df0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b088      	sub	sp, #32
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	60f8      	str	r0, [r7, #12]
 8017df8:	60b9      	str	r1, [r7, #8]
 8017dfa:	4613      	mov	r3, r2
 8017dfc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8017e02:	69fb      	ldr	r3, [r7, #28]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d102      	bne.n	8017e0e <accept_function+0x1e>
    return ERR_VAL;
 8017e08:	f06f 0305 	mvn.w	r3, #5
 8017e0c:	e08d      	b.n	8017f2a <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8017e0e:	69fb      	ldr	r3, [r7, #28]
 8017e10:	3314      	adds	r3, #20
 8017e12:	4618      	mov	r0, r3
 8017e14:	f00a ff8c 	bl	8022d30 <sys_mbox_valid>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d102      	bne.n	8017e24 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8017e1e:	f06f 0305 	mvn.w	r3, #5
 8017e22:	e082      	b.n	8017f2a <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d115      	bne.n	8017e56 <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8017e2a:	69fb      	ldr	r3, [r7, #28]
 8017e2c:	3314      	adds	r3, #20
 8017e2e:	4941      	ldr	r1, [pc, #260]	; (8017f34 <accept_function+0x144>)
 8017e30:	4618      	mov	r0, r3
 8017e32:	f00a ff08 	bl	8022c46 <sys_mbox_trypost>
 8017e36:	4603      	mov	r3, r0
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d109      	bne.n	8017e50 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017e3c:	69fb      	ldr	r3, [r7, #28]
 8017e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d005      	beq.n	8017e50 <accept_function+0x60>
 8017e44:	69fb      	ldr	r3, [r7, #28]
 8017e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e48:	2200      	movs	r2, #0
 8017e4a:	2100      	movs	r1, #0
 8017e4c:	69f8      	ldr	r0, [r7, #28]
 8017e4e:	4798      	blx	r3
    }
    return ERR_VAL;
 8017e50:	f06f 0305 	mvn.w	r3, #5
 8017e54:	e069      	b.n	8017f2a <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8017e56:	69fb      	ldr	r3, [r7, #28]
 8017e58:	781a      	ldrb	r2, [r3, #0]
 8017e5a:	69fb      	ldr	r3, [r7, #28]
 8017e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e5e:	4619      	mov	r1, r3
 8017e60:	4610      	mov	r0, r2
 8017e62:	f000 f8d7 	bl	8018014 <netconn_alloc>
 8017e66:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8017e68:	69bb      	ldr	r3, [r7, #24]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d115      	bne.n	8017e9a <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8017e6e:	69fb      	ldr	r3, [r7, #28]
 8017e70:	3314      	adds	r3, #20
 8017e72:	4930      	ldr	r1, [pc, #192]	; (8017f34 <accept_function+0x144>)
 8017e74:	4618      	mov	r0, r3
 8017e76:	f00a fee6 	bl	8022c46 <sys_mbox_trypost>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d109      	bne.n	8017e94 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017e80:	69fb      	ldr	r3, [r7, #28]
 8017e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d005      	beq.n	8017e94 <accept_function+0xa4>
 8017e88:	69fb      	ldr	r3, [r7, #28]
 8017e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	2100      	movs	r1, #0
 8017e90:	69f8      	ldr	r0, [r7, #28]
 8017e92:	4798      	blx	r3
    }
    return ERR_MEM;
 8017e94:	f04f 33ff 	mov.w	r3, #4294967295
 8017e98:	e047      	b.n	8017f2a <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 8017e9a:	69bb      	ldr	r3, [r7, #24]
 8017e9c:	68ba      	ldr	r2, [r7, #8]
 8017e9e:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8017ea0:	69b8      	ldr	r0, [r7, #24]
 8017ea2:	f7ff ff7d 	bl	8017da0 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 8017ea6:	69bb      	ldr	r3, [r7, #24]
 8017ea8:	79fa      	ldrb	r2, [r7, #7]
 8017eaa:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8017eac:	69fb      	ldr	r3, [r7, #28]
 8017eae:	3314      	adds	r3, #20
 8017eb0:	69b9      	ldr	r1, [r7, #24]
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	f00a fec7 	bl	8022c46 <sys_mbox_trypost>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d02a      	beq.n	8017f14 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8017ebe:	69bb      	ldr	r3, [r7, #24]
 8017ec0:	685b      	ldr	r3, [r3, #4]
 8017ec2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8017ec4:	2100      	movs	r1, #0
 8017ec6:	6978      	ldr	r0, [r7, #20]
 8017ec8:	f006 fc2e 	bl	801e728 <tcp_arg>
    tcp_recv(pcb, NULL);
 8017ecc:	2100      	movs	r1, #0
 8017ece:	6978      	ldr	r0, [r7, #20]
 8017ed0:	f006 fc3c 	bl	801e74c <tcp_recv>
    tcp_sent(pcb, NULL);
 8017ed4:	2100      	movs	r1, #0
 8017ed6:	6978      	ldr	r0, [r7, #20]
 8017ed8:	f006 fc5a 	bl	801e790 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8017edc:	2200      	movs	r2, #0
 8017ede:	2100      	movs	r1, #0
 8017ee0:	6978      	ldr	r0, [r7, #20]
 8017ee2:	f006 fcaf 	bl	801e844 <tcp_poll>
    tcp_err(pcb, NULL);
 8017ee6:	2100      	movs	r1, #0
 8017ee8:	6978      	ldr	r0, [r7, #20]
 8017eea:	f006 fc71 	bl	801e7d0 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8017eee:	69bb      	ldr	r3, [r7, #24]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8017ef4:	69bb      	ldr	r3, [r7, #24]
 8017ef6:	3310      	adds	r3, #16
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f00a fe7d 	bl	8022bf8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8017efe:	69bb      	ldr	r3, [r7, #24]
 8017f00:	3310      	adds	r3, #16
 8017f02:	4618      	mov	r0, r3
 8017f04:	f00a ff25 	bl	8022d52 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8017f08:	69b8      	ldr	r0, [r7, #24]
 8017f0a:	f000 f8ed 	bl	80180e8 <netconn_free>
    return ERR_MEM;
 8017f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8017f12:	e00a      	b.n	8017f2a <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017f14:	69fb      	ldr	r3, [r7, #28]
 8017f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d005      	beq.n	8017f28 <accept_function+0x138>
 8017f1c:	69fb      	ldr	r3, [r7, #28]
 8017f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f20:	2200      	movs	r2, #0
 8017f22:	2100      	movs	r1, #0
 8017f24:	69f8      	ldr	r0, [r7, #28]
 8017f26:	4798      	blx	r3
  }

  return ERR_OK;
 8017f28:	2300      	movs	r3, #0
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	3720      	adds	r7, #32
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd80      	pop	{r7, pc}
 8017f32:	bf00      	nop
 8017f34:	2000a258 	.word	0x2000a258

08017f38 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8017f38:	b590      	push	{r4, r7, lr}
 8017f3a:	b085      	sub	sp, #20
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8017f40:	2300      	movs	r3, #0
 8017f42:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	685b      	ldr	r3, [r3, #4]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d006      	beq.n	8017f5c <pcb_new+0x24>
 8017f4e:	4b18      	ldr	r3, [pc, #96]	; (8017fb0 <pcb_new+0x78>)
 8017f50:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8017f54:	4917      	ldr	r1, [pc, #92]	; (8017fb4 <pcb_new+0x7c>)
 8017f56:	4818      	ldr	r0, [pc, #96]	; (8017fb8 <pcb_new+0x80>)
 8017f58:	f00d ffc6 	bl	8025ee8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f66:	2b10      	cmp	r3, #16
 8017f68:	d112      	bne.n	8017f90 <pcb_new+0x58>
    }
    break;
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	681c      	ldr	r4, [r3, #0]
 8017f6e:	7bfb      	ldrb	r3, [r7, #15]
 8017f70:	4618      	mov	r0, r3
 8017f72:	f006 fbcb 	bl	801e70c <tcp_new_ip_type>
 8017f76:	4603      	mov	r3, r0
 8017f78:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	685b      	ldr	r3, [r3, #4]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d009      	beq.n	8017f98 <pcb_new+0x60>
      setup_tcp(msg->conn);
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7ff ff09 	bl	8017da0 <setup_tcp>
    }
    break;
 8017f8e:	e003      	b.n	8017f98 <pcb_new+0x60>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	22fa      	movs	r2, #250	; 0xfa
 8017f94:	711a      	strb	r2, [r3, #4]
    return;
 8017f96:	e008      	b.n	8017faa <pcb_new+0x72>
    break;
 8017f98:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	685b      	ldr	r3, [r3, #4]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d102      	bne.n	8017faa <pcb_new+0x72>
    msg->err = ERR_MEM;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	22ff      	movs	r2, #255	; 0xff
 8017fa8:	711a      	strb	r2, [r3, #4]
  }
}
 8017faa:	3714      	adds	r7, #20
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd90      	pop	{r4, r7, pc}
 8017fb0:	08026d48 	.word	0x08026d48
 8017fb4:	08026e6c 	.word	0x08026e6c
 8017fb8:	08026da0 	.word	0x08026da0

08017fbc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b084      	sub	sp, #16
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	2200      	movs	r2, #0
 8017fcc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	685b      	ldr	r3, [r3, #4]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d102      	bne.n	8017fde <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8017fd8:	68f8      	ldr	r0, [r7, #12]
 8017fda:	f7ff ffad 	bl	8017f38 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d012      	beq.n	801800c <lwip_netconn_do_newconn+0x50>
 8017fe6:	f00a ffbf 	bl	8022f68 <sys_arch_protect>
 8017fea:	60b8      	str	r0, [r7, #8]
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017ff4:	f113 0f0c 	cmn.w	r3, #12
 8017ff8:	db05      	blt.n	8018006 <lwip_netconn_do_newconn+0x4a>
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	68fa      	ldr	r2, [r7, #12]
 8018000:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018004:	721a      	strb	r2, [r3, #8]
 8018006:	68b8      	ldr	r0, [r7, #8]
 8018008:	f00a ffbc 	bl	8022f84 <sys_arch_unprotect>
}
 801800c:	bf00      	nop
 801800e:	3710      	adds	r7, #16
 8018010:	46bd      	mov	sp, r7
 8018012:	bd80      	pop	{r7, pc}

08018014 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b084      	sub	sp, #16
 8018018:	af00      	add	r7, sp, #0
 801801a:	4603      	mov	r3, r0
 801801c:	6039      	str	r1, [r7, #0]
 801801e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8018020:	2006      	movs	r0, #6
 8018022:	f004 f91f 	bl	801c264 <memp_malloc>
 8018026:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d101      	bne.n	8018032 <netconn_alloc+0x1e>
    return NULL;
 801802e:	2300      	movs	r3, #0
 8018030:	e050      	b.n	80180d4 <netconn_alloc+0xc0>
  }

  conn->last_err = ERR_OK;
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	2200      	movs	r2, #0
 8018036:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	79fa      	ldrb	r2, [r7, #7]
 801803c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	2200      	movs	r2, #0
 8018042:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8018044:	79fb      	ldrb	r3, [r7, #7]
 8018046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801804a:	2b10      	cmp	r3, #16
 801804c:	d10c      	bne.n	8018068 <netconn_alloc+0x54>
    size = DEFAULT_UDP_RECVMBOX_SIZE;
    break;
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 801804e:	2306      	movs	r3, #6
 8018050:	60bb      	str	r3, [r7, #8]
    break;
 8018052:	bf00      	nop
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
    goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	3310      	adds	r3, #16
 8018058:	68b9      	ldr	r1, [r7, #8]
 801805a:	4618      	mov	r0, r3
 801805c:	f00a fdaa 	bl	8022bb4 <sys_mbox_new>
 8018060:	4603      	mov	r3, r0
 8018062:	2b00      	cmp	r3, #0
 8018064:	d008      	beq.n	8018078 <netconn_alloc+0x64>
    goto free_and_return;
 8018066:	e030      	b.n	80180ca <netconn_alloc+0xb6>
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8018068:	4b1c      	ldr	r3, [pc, #112]	; (80180dc <netconn_alloc+0xc8>)
 801806a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801806e:	491c      	ldr	r1, [pc, #112]	; (80180e0 <netconn_alloc+0xcc>)
 8018070:	481c      	ldr	r0, [pc, #112]	; (80180e4 <netconn_alloc+0xd0>)
 8018072:	f00d ff39 	bl	8025ee8 <iprintf>
    goto free_and_return;
 8018076:	e028      	b.n	80180ca <netconn_alloc+0xb6>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	330c      	adds	r3, #12
 801807c:	2100      	movs	r1, #0
 801807e:	4618      	mov	r0, r3
 8018080:	f00a fe74 	bl	8022d6c <sys_sem_new>
 8018084:	4603      	mov	r3, r0
 8018086:	2b00      	cmp	r3, #0
 8018088:	d005      	beq.n	8018096 <netconn_alloc+0x82>
    sys_mbox_free(&conn->recvmbox);
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	3310      	adds	r3, #16
 801808e:	4618      	mov	r0, r3
 8018090:	f00a fdb2 	bl	8022bf8 <sys_mbox_free>
    goto free_and_return;
 8018094:	e019      	b.n	80180ca <netconn_alloc+0xb6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	3314      	adds	r3, #20
 801809a:	4618      	mov	r0, r3
 801809c:	f00a fe59 	bl	8022d52 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	2200      	movs	r2, #0
 80180a4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	f04f 32ff 	mov.w	r2, #4294967295
 80180ac:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	683a      	ldr	r2, [r7, #0]
 80180b2:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	2200      	movs	r2, #0
 80180b8:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	2200      	movs	r2, #0
 80180be:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	2200      	movs	r2, #0
 80180c4:	771a      	strb	r2, [r3, #28]
  return conn;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	e004      	b.n	80180d4 <netconn_alloc+0xc0>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80180ca:	68f9      	ldr	r1, [r7, #12]
 80180cc:	2006      	movs	r0, #6
 80180ce:	f004 f91b 	bl	801c308 <memp_free>
  return NULL;
 80180d2:	2300      	movs	r3, #0
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	3710      	adds	r7, #16
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}
 80180dc:	08026d48 	.word	0x08026d48
 80180e0:	08026e8c 	.word	0x08026e8c
 80180e4:	08026da0 	.word	0x08026da0

080180e8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b082      	sub	sp, #8
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	685b      	ldr	r3, [r3, #4]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d006      	beq.n	8018106 <netconn_free+0x1e>
 80180f8:	4b1b      	ldr	r3, [pc, #108]	; (8018168 <netconn_free+0x80>)
 80180fa:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80180fe:	491b      	ldr	r1, [pc, #108]	; (801816c <netconn_free+0x84>)
 8018100:	481b      	ldr	r0, [pc, #108]	; (8018170 <netconn_free+0x88>)
 8018102:	f00d fef1 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	3310      	adds	r3, #16
 801810a:	4618      	mov	r0, r3
 801810c:	f00a fe10 	bl	8022d30 <sys_mbox_valid>
 8018110:	4603      	mov	r3, r0
 8018112:	2b00      	cmp	r3, #0
 8018114:	d006      	beq.n	8018124 <netconn_free+0x3c>
 8018116:	4b14      	ldr	r3, [pc, #80]	; (8018168 <netconn_free+0x80>)
 8018118:	f240 22e2 	movw	r2, #738	; 0x2e2
 801811c:	4915      	ldr	r1, [pc, #84]	; (8018174 <netconn_free+0x8c>)
 801811e:	4814      	ldr	r0, [pc, #80]	; (8018170 <netconn_free+0x88>)
 8018120:	f00d fee2 	bl	8025ee8 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	3314      	adds	r3, #20
 8018128:	4618      	mov	r0, r3
 801812a:	f00a fe01 	bl	8022d30 <sys_mbox_valid>
 801812e:	4603      	mov	r3, r0
 8018130:	2b00      	cmp	r3, #0
 8018132:	d006      	beq.n	8018142 <netconn_free+0x5a>
 8018134:	4b0c      	ldr	r3, [pc, #48]	; (8018168 <netconn_free+0x80>)
 8018136:	f240 22e5 	movw	r2, #741	; 0x2e5
 801813a:	490f      	ldr	r1, [pc, #60]	; (8018178 <netconn_free+0x90>)
 801813c:	480c      	ldr	r0, [pc, #48]	; (8018170 <netconn_free+0x88>)
 801813e:	f00d fed3 	bl	8025ee8 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	330c      	adds	r3, #12
 8018146:	4618      	mov	r0, r3
 8018148:	f00a fe76 	bl	8022e38 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	330c      	adds	r3, #12
 8018150:	4618      	mov	r0, r3
 8018152:	f00a fe8f 	bl	8022e74 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8018156:	6879      	ldr	r1, [r7, #4]
 8018158:	2006      	movs	r0, #6
 801815a:	f004 f8d5 	bl	801c308 <memp_free>
}
 801815e:	bf00      	nop
 8018160:	3708      	adds	r7, #8
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}
 8018166:	bf00      	nop
 8018168:	08026d48 	.word	0x08026d48
 801816c:	08026eb4 	.word	0x08026eb4
 8018170:	08026da0 	.word	0x08026da0
 8018174:	08026ee4 	.word	0x08026ee4
 8018178:	08026f20 	.word	0x08026f20

0801817c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b086      	sub	sp, #24
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	3310      	adds	r3, #16
 8018188:	4618      	mov	r0, r3
 801818a:	f00a fdd1 	bl	8022d30 <sys_mbox_valid>
 801818e:	4603      	mov	r3, r0
 8018190:	2b00      	cmp	r3, #0
 8018192:	d035      	beq.n	8018200 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8018194:	e01e      	b.n	80181d4 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	781b      	ldrb	r3, [r3, #0]
 801819a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801819e:	2b10      	cmp	r3, #16
 80181a0:	d114      	bne.n	80181cc <netconn_drain+0x50>
        if (mem != NULL) {
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d015      	beq.n	80181d4 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d007      	beq.n	80181c4 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	685a      	ldr	r2, [r3, #4]
 80181b8:	697b      	ldr	r3, [r7, #20]
 80181ba:	891b      	ldrh	r3, [r3, #8]
 80181bc:	4619      	mov	r1, r3
 80181be:	4610      	mov	r0, r2
 80181c0:	f005 fcd0 	bl	801db64 <tcp_recved>
          }
          pbuf_free(p);
 80181c4:	6978      	ldr	r0, [r7, #20]
 80181c6:	f004 fdf1 	bl	801cdac <pbuf_free>
 80181ca:	e003      	b.n	80181d4 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	4618      	mov	r0, r3
 80181d0:	f000 ff16 	bl	8019000 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	3310      	adds	r3, #16
 80181d8:	f107 020c 	add.w	r2, r7, #12
 80181dc:	4611      	mov	r1, r2
 80181de:	4618      	mov	r0, r3
 80181e0:	f00a fd8a 	bl	8022cf8 <sys_arch_mbox_tryfetch>
 80181e4:	4603      	mov	r3, r0
 80181e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181ea:	d1d4      	bne.n	8018196 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	3310      	adds	r3, #16
 80181f0:	4618      	mov	r0, r3
 80181f2:	f00a fd01 	bl	8022bf8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	3310      	adds	r3, #16
 80181fa:	4618      	mov	r0, r3
 80181fc:	f00a fda9 	bl	8022d52 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	3314      	adds	r3, #20
 8018204:	4618      	mov	r0, r3
 8018206:	f00a fd93 	bl	8022d30 <sys_mbox_valid>
 801820a:	4603      	mov	r3, r0
 801820c:	2b00      	cmp	r3, #0
 801820e:	d02e      	beq.n	801826e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8018210:	e017      	b.n	8018242 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	4a18      	ldr	r2, [pc, #96]	; (8018278 <netconn_drain+0xfc>)
 8018216:	4293      	cmp	r3, r2
 8018218:	d013      	beq.n	8018242 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 801821e:	6938      	ldr	r0, [r7, #16]
 8018220:	f7ff ffac 	bl	801817c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8018224:	693b      	ldr	r3, [r7, #16]
 8018226:	685b      	ldr	r3, [r3, #4]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d007      	beq.n	801823c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 801822c:	693b      	ldr	r3, [r7, #16]
 801822e:	685b      	ldr	r3, [r3, #4]
 8018230:	4618      	mov	r0, r3
 8018232:	f005 fb01 	bl	801d838 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8018236:	693b      	ldr	r3, [r7, #16]
 8018238:	2200      	movs	r2, #0
 801823a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 801823c:	6938      	ldr	r0, [r7, #16]
 801823e:	f7ff ff53 	bl	80180e8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	3314      	adds	r3, #20
 8018246:	f107 020c 	add.w	r2, r7, #12
 801824a:	4611      	mov	r1, r2
 801824c:	4618      	mov	r0, r3
 801824e:	f00a fd53 	bl	8022cf8 <sys_arch_mbox_tryfetch>
 8018252:	4603      	mov	r3, r0
 8018254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018258:	d1db      	bne.n	8018212 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	3314      	adds	r3, #20
 801825e:	4618      	mov	r0, r3
 8018260:	f00a fcca 	bl	8022bf8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	3314      	adds	r3, #20
 8018268:	4618      	mov	r0, r3
 801826a:	f00a fd72 	bl	8022d52 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801826e:	bf00      	nop
 8018270:	3718      	adds	r7, #24
 8018272:	46bd      	mov	sp, r7
 8018274:	bd80      	pop	{r7, pc}
 8018276:	bf00      	nop
 8018278:	2000a258 	.word	0x2000a258

0801827c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b088      	sub	sp, #32
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
 8018284:	460b      	mov	r3, r1
 8018286:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8018288:	2300      	movs	r3, #0
 801828a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d106      	bne.n	80182a0 <lwip_netconn_do_close_internal+0x24>
 8018292:	4baa      	ldr	r3, [pc, #680]	; (801853c <lwip_netconn_do_close_internal+0x2c0>)
 8018294:	f240 3243 	movw	r2, #835	; 0x343
 8018298:	49a9      	ldr	r1, [pc, #676]	; (8018540 <lwip_netconn_do_close_internal+0x2c4>)
 801829a:	48aa      	ldr	r0, [pc, #680]	; (8018544 <lwip_netconn_do_close_internal+0x2c8>)
 801829c:	f00d fe24 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	781b      	ldrb	r3, [r3, #0]
 80182a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80182a8:	2b10      	cmp	r3, #16
 80182aa:	d006      	beq.n	80182ba <lwip_netconn_do_close_internal+0x3e>
 80182ac:	4ba3      	ldr	r3, [pc, #652]	; (801853c <lwip_netconn_do_close_internal+0x2c0>)
 80182ae:	f44f 7251 	mov.w	r2, #836	; 0x344
 80182b2:	49a5      	ldr	r1, [pc, #660]	; (8018548 <lwip_netconn_do_close_internal+0x2cc>)
 80182b4:	48a3      	ldr	r0, [pc, #652]	; (8018544 <lwip_netconn_do_close_internal+0x2c8>)
 80182b6:	f00d fe17 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	785b      	ldrb	r3, [r3, #1]
 80182be:	2b04      	cmp	r3, #4
 80182c0:	d006      	beq.n	80182d0 <lwip_netconn_do_close_internal+0x54>
 80182c2:	4b9e      	ldr	r3, [pc, #632]	; (801853c <lwip_netconn_do_close_internal+0x2c0>)
 80182c4:	f240 3245 	movw	r2, #837	; 0x345
 80182c8:	49a0      	ldr	r1, [pc, #640]	; (801854c <lwip_netconn_do_close_internal+0x2d0>)
 80182ca:	489e      	ldr	r0, [pc, #632]	; (8018544 <lwip_netconn_do_close_internal+0x2c8>)
 80182cc:	f00d fe0c 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	685b      	ldr	r3, [r3, #4]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d106      	bne.n	80182e6 <lwip_netconn_do_close_internal+0x6a>
 80182d8:	4b98      	ldr	r3, [pc, #608]	; (801853c <lwip_netconn_do_close_internal+0x2c0>)
 80182da:	f240 3246 	movw	r2, #838	; 0x346
 80182de:	499c      	ldr	r1, [pc, #624]	; (8018550 <lwip_netconn_do_close_internal+0x2d4>)
 80182e0:	4898      	ldr	r0, [pc, #608]	; (8018544 <lwip_netconn_do_close_internal+0x2c8>)
 80182e2:	f00d fe01 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d106      	bne.n	80182fc <lwip_netconn_do_close_internal+0x80>
 80182ee:	4b93      	ldr	r3, [pc, #588]	; (801853c <lwip_netconn_do_close_internal+0x2c0>)
 80182f0:	f240 3247 	movw	r2, #839	; 0x347
 80182f4:	4997      	ldr	r1, [pc, #604]	; (8018554 <lwip_netconn_do_close_internal+0x2d8>)
 80182f6:	4893      	ldr	r0, [pc, #588]	; (8018544 <lwip_netconn_do_close_internal+0x2c8>)
 80182f8:	f00d fdf6 	bl	8025ee8 <iprintf>

  tpcb = conn->pcb.tcp;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	685b      	ldr	r3, [r3, #4]
 8018300:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018306:	7a1b      	ldrb	r3, [r3, #8]
 8018308:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 801830a:	7dfb      	ldrb	r3, [r7, #23]
 801830c:	f003 0301 	and.w	r3, r3, #1
 8018310:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8018312:	7dfb      	ldrb	r3, [r7, #23]
 8018314:	f003 0302 	and.w	r3, r3, #2
 8018318:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801831a:	7dfb      	ldrb	r3, [r7, #23]
 801831c:	2b03      	cmp	r3, #3
 801831e:	d102      	bne.n	8018326 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8018320:	2301      	movs	r3, #1
 8018322:	77bb      	strb	r3, [r7, #30]
 8018324:	e01f      	b.n	8018366 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8018326:	7dbb      	ldrb	r3, [r7, #22]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d00e      	beq.n	801834a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 801832c:	69bb      	ldr	r3, [r7, #24]
 801832e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8018330:	2b05      	cmp	r3, #5
 8018332:	d007      	beq.n	8018344 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8018334:	69bb      	ldr	r3, [r7, #24]
 8018336:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8018338:	2b06      	cmp	r3, #6
 801833a:	d003      	beq.n	8018344 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 801833c:	69bb      	ldr	r3, [r7, #24]
 801833e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8018340:	2b08      	cmp	r3, #8
 8018342:	d102      	bne.n	801834a <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8018344:	2301      	movs	r3, #1
 8018346:	77bb      	strb	r3, [r7, #30]
 8018348:	e00d      	b.n	8018366 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801834a:	7d7b      	ldrb	r3, [r7, #21]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d008      	beq.n	8018362 <lwip_netconn_do_close_internal+0xe6>
 8018350:	69bb      	ldr	r3, [r7, #24]
 8018352:	7e9b      	ldrb	r3, [r3, #26]
 8018354:	f003 0310 	and.w	r3, r3, #16
 8018358:	2b00      	cmp	r3, #0
 801835a:	d002      	beq.n	8018362 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 801835c:	2301      	movs	r3, #1
 801835e:	77bb      	strb	r3, [r7, #30]
 8018360:	e001      	b.n	8018366 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8018362:	2300      	movs	r3, #0
 8018364:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8018366:	7fbb      	ldrb	r3, [r7, #30]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d003      	beq.n	8018374 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 801836c:	2100      	movs	r1, #0
 801836e:	69b8      	ldr	r0, [r7, #24]
 8018370:	f006 f9da 	bl	801e728 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8018374:	69bb      	ldr	r3, [r7, #24]
 8018376:	7d1b      	ldrb	r3, [r3, #20]
 8018378:	2b01      	cmp	r3, #1
 801837a:	d104      	bne.n	8018386 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801837c:	2100      	movs	r1, #0
 801837e:	69b8      	ldr	r0, [r7, #24]
 8018380:	f006 fa48 	bl	801e814 <tcp_accept>
 8018384:	e01d      	b.n	80183c2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8018386:	7dbb      	ldrb	r3, [r7, #22]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d007      	beq.n	801839c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 801838c:	2100      	movs	r1, #0
 801838e:	69b8      	ldr	r0, [r7, #24]
 8018390:	f006 f9dc 	bl	801e74c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8018394:	2100      	movs	r1, #0
 8018396:	69b8      	ldr	r0, [r7, #24]
 8018398:	f006 fa3c 	bl	801e814 <tcp_accept>
    }
    if (shut_tx) {
 801839c:	7d7b      	ldrb	r3, [r7, #21]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d003      	beq.n	80183aa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80183a2:	2100      	movs	r1, #0
 80183a4:	69b8      	ldr	r0, [r7, #24]
 80183a6:	f006 f9f3 	bl	801e790 <tcp_sent>
    }
    if (close) {
 80183aa:	7fbb      	ldrb	r3, [r7, #30]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d008      	beq.n	80183c2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80183b0:	2200      	movs	r2, #0
 80183b2:	2100      	movs	r1, #0
 80183b4:	69b8      	ldr	r0, [r7, #24]
 80183b6:	f006 fa45 	bl	801e844 <tcp_poll>
      tcp_err(tpcb, NULL);
 80183ba:	2100      	movs	r1, #0
 80183bc:	69b8      	ldr	r0, [r7, #24]
 80183be:	f006 fa07 	bl	801e7d0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 80183c2:	7fbb      	ldrb	r3, [r7, #30]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d005      	beq.n	80183d4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80183c8:	69b8      	ldr	r0, [r7, #24]
 80183ca:	f005 f923 	bl	801d614 <tcp_close>
 80183ce:	4603      	mov	r3, r0
 80183d0:	77fb      	strb	r3, [r7, #31]
 80183d2:	e007      	b.n	80183e4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80183d4:	7dbb      	ldrb	r3, [r7, #22]
 80183d6:	7d7a      	ldrb	r2, [r7, #21]
 80183d8:	4619      	mov	r1, r3
 80183da:	69b8      	ldr	r0, [r7, #24]
 80183dc:	f005 f932 	bl	801d644 <tcp_shutdown>
 80183e0:	4603      	mov	r3, r0
 80183e2:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 80183e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d102      	bne.n	80183f2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80183ec:	2301      	movs	r3, #1
 80183ee:	777b      	strb	r3, [r7, #29]
 80183f0:	e016      	b.n	8018420 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80183f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80183f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183fa:	d10f      	bne.n	801841c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018400:	7a5b      	ldrb	r3, [r3, #9]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d10c      	bne.n	8018420 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8018406:	2301      	movs	r3, #1
 8018408:	777b      	strb	r3, [r7, #29]
        if (close) {
 801840a:	7fbb      	ldrb	r3, [r7, #30]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d007      	beq.n	8018420 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8018410:	69b8      	ldr	r0, [r7, #24]
 8018412:	f005 fa11 	bl	801d838 <tcp_abort>
          err = ERR_OK;
 8018416:	2300      	movs	r3, #0
 8018418:	77fb      	strb	r3, [r7, #31]
 801841a:	e001      	b.n	8018420 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 801841c:	2301      	movs	r3, #1
 801841e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8018420:	7f7b      	ldrb	r3, [r7, #29]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d056      	beq.n	80184d4 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	330c      	adds	r3, #12
 801842e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018434:	7ffa      	ldrb	r2, [r7, #31]
 8018436:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	2200      	movs	r2, #0
 801843c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	2200      	movs	r2, #0
 8018442:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8018444:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d129      	bne.n	80184a0 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 801844c:	7fbb      	ldrb	r3, [r7, #30]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d00c      	beq.n	801846c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	2200      	movs	r2, #0
 8018456:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801845c:	2b00      	cmp	r3, #0
 801845e:	d005      	beq.n	801846c <lwip_netconn_do_close_internal+0x1f0>
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018464:	2200      	movs	r2, #0
 8018466:	2104      	movs	r1, #4
 8018468:	6878      	ldr	r0, [r7, #4]
 801846a:	4798      	blx	r3
      }
      if (shut_rx) {
 801846c:	7dbb      	ldrb	r3, [r7, #22]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d009      	beq.n	8018486 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018476:	2b00      	cmp	r3, #0
 8018478:	d005      	beq.n	8018486 <lwip_netconn_do_close_internal+0x20a>
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801847e:	2200      	movs	r2, #0
 8018480:	2100      	movs	r1, #0
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	4798      	blx	r3
      }
      if (shut_tx) {
 8018486:	7d7b      	ldrb	r3, [r7, #21]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d009      	beq.n	80184a0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018490:	2b00      	cmp	r3, #0
 8018492:	d005      	beq.n	80184a0 <lwip_netconn_do_close_internal+0x224>
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018498:	2200      	movs	r2, #0
 801849a:	2102      	movs	r1, #2
 801849c:	6878      	ldr	r0, [r7, #4]
 801849e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d00e      	beq.n	80184c4 <lwip_netconn_do_close_internal+0x248>
 80184a6:	f00a fd5f 	bl	8022f68 <sys_arch_protect>
 80184aa:	60f8      	str	r0, [r7, #12]
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80184b2:	f113 0f0c 	cmn.w	r3, #12
 80184b6:	db02      	blt.n	80184be <lwip_netconn_do_close_internal+0x242>
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	7ffa      	ldrb	r2, [r7, #31]
 80184bc:	721a      	strb	r2, [r3, #8]
 80184be:	68f8      	ldr	r0, [r7, #12]
 80184c0:	f00a fd60 	bl	8022f84 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80184c4:	78fb      	ldrb	r3, [r7, #3]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d002      	beq.n	80184d0 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80184ca:	6938      	ldr	r0, [r7, #16]
 80184cc:	f00a fca7 	bl	8022e1e <sys_sem_signal>
    }
    return ERR_OK;
 80184d0:	2300      	movs	r3, #0
 80184d2:	e02e      	b.n	8018532 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 80184d4:	7f7b      	ldrb	r3, [r7, #29]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d11e      	bne.n	8018518 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80184da:	69bb      	ldr	r3, [r7, #24]
 80184dc:	7d1b      	ldrb	r3, [r3, #20]
 80184de:	2b01      	cmp	r3, #1
 80184e0:	d106      	bne.n	80184f0 <lwip_netconn_do_close_internal+0x274>
 80184e2:	4b16      	ldr	r3, [pc, #88]	; (801853c <lwip_netconn_do_close_internal+0x2c0>)
 80184e4:	f240 32e3 	movw	r2, #995	; 0x3e3
 80184e8:	491b      	ldr	r1, [pc, #108]	; (8018558 <lwip_netconn_do_close_internal+0x2dc>)
 80184ea:	4816      	ldr	r0, [pc, #88]	; (8018544 <lwip_netconn_do_close_internal+0x2c8>)
 80184ec:	f00d fcfc 	bl	8025ee8 <iprintf>
    if (shut_tx) {
 80184f0:	7d7b      	ldrb	r3, [r7, #21]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d003      	beq.n	80184fe <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 80184f6:	4919      	ldr	r1, [pc, #100]	; (801855c <lwip_netconn_do_close_internal+0x2e0>)
 80184f8:	69b8      	ldr	r0, [r7, #24]
 80184fa:	f006 f949 	bl	801e790 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80184fe:	2201      	movs	r2, #1
 8018500:	4917      	ldr	r1, [pc, #92]	; (8018560 <lwip_netconn_do_close_internal+0x2e4>)
 8018502:	69b8      	ldr	r0, [r7, #24]
 8018504:	f006 f99e 	bl	801e844 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8018508:	4916      	ldr	r1, [pc, #88]	; (8018564 <lwip_netconn_do_close_internal+0x2e8>)
 801850a:	69b8      	ldr	r0, [r7, #24]
 801850c:	f006 f960 	bl	801e7d0 <tcp_err>
    tcp_arg(tpcb, conn);
 8018510:	6879      	ldr	r1, [r7, #4]
 8018512:	69b8      	ldr	r0, [r7, #24]
 8018514:	f006 f908 	bl	801e728 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8018518:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801851c:	2b00      	cmp	r3, #0
 801851e:	d106      	bne.n	801852e <lwip_netconn_do_close_internal+0x2b2>
 8018520:	4b06      	ldr	r3, [pc, #24]	; (801853c <lwip_netconn_do_close_internal+0x2c0>)
 8018522:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8018526:	4910      	ldr	r1, [pc, #64]	; (8018568 <lwip_netconn_do_close_internal+0x2ec>)
 8018528:	4806      	ldr	r0, [pc, #24]	; (8018544 <lwip_netconn_do_close_internal+0x2c8>)
 801852a:	f00d fcdd 	bl	8025ee8 <iprintf>
  return err;
 801852e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018532:	4618      	mov	r0, r3
 8018534:	3720      	adds	r7, #32
 8018536:	46bd      	mov	sp, r7
 8018538:	bd80      	pop	{r7, pc}
 801853a:	bf00      	nop
 801853c:	08026d48 	.word	0x08026d48
 8018540:	08026f5c 	.word	0x08026f5c
 8018544:	08026da0 	.word	0x08026da0
 8018548:	08026f6c 	.word	0x08026f6c
 801854c:	08026f8c 	.word	0x08026f8c
 8018550:	08026fb0 	.word	0x08026fb0
 8018554:	08026e18 	.word	0x08026e18
 8018558:	08026fc4 	.word	0x08026fc4
 801855c:	08017b15 	.word	0x08017b15
 8018560:	08017a49 	.word	0x08017a49
 8018564:	08017bc1 	.word	0x08017bc1
 8018568:	08026fe8 	.word	0x08026fe8

0801856c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b086      	sub	sp, #24
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8018578:	697b      	ldr	r3, [r7, #20]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	785b      	ldrb	r3, [r3, #1]
 801857e:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8018580:	7cfb      	ldrb	r3, [r7, #19]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d00d      	beq.n	80185a2 <lwip_netconn_do_delconn+0x36>
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	781b      	ldrb	r3, [r3, #0]
 801858c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018590:	2b10      	cmp	r3, #16
 8018592:	d006      	beq.n	80185a2 <lwip_netconn_do_delconn+0x36>
 8018594:	4b69      	ldr	r3, [pc, #420]	; (801873c <lwip_netconn_do_delconn+0x1d0>)
 8018596:	f240 4201 	movw	r2, #1025	; 0x401
 801859a:	4969      	ldr	r1, [pc, #420]	; (8018740 <lwip_netconn_do_delconn+0x1d4>)
 801859c:	4869      	ldr	r0, [pc, #420]	; (8018744 <lwip_netconn_do_delconn+0x1d8>)
 801859e:	f00d fca3 	bl	8025ee8 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80185a2:	7cfb      	ldrb	r3, [r7, #19]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d005      	beq.n	80185b4 <lwip_netconn_do_delconn+0x48>
 80185a8:	7cfb      	ldrb	r3, [r7, #19]
 80185aa:	2b02      	cmp	r3, #2
 80185ac:	d002      	beq.n	80185b4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80185ae:	7cfb      	ldrb	r3, [r7, #19]
 80185b0:	2b03      	cmp	r3, #3
 80185b2:	d109      	bne.n	80185c8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80185b4:	7cfb      	ldrb	r3, [r7, #19]
 80185b6:	2b03      	cmp	r3, #3
 80185b8:	d10a      	bne.n	80185d0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80185ba:	697b      	ldr	r3, [r7, #20]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	7f1b      	ldrb	r3, [r3, #28]
 80185c0:	f003 0304 	and.w	r3, r3, #4
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d103      	bne.n	80185d0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	22fb      	movs	r2, #251	; 0xfb
 80185cc:	711a      	strb	r2, [r3, #4]
 80185ce:	e08f      	b.n	80186f0 <lwip_netconn_do_delconn+0x184>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80185d0:	7cfb      	ldrb	r3, [r7, #19]
 80185d2:	2b03      	cmp	r3, #3
 80185d4:	d10d      	bne.n	80185f2 <lwip_netconn_do_delconn+0x86>
 80185d6:	697b      	ldr	r3, [r7, #20]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	7f1b      	ldrb	r3, [r3, #28]
 80185dc:	f003 0304 	and.w	r3, r3, #4
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d106      	bne.n	80185f2 <lwip_netconn_do_delconn+0x86>
 80185e4:	4b55      	ldr	r3, [pc, #340]	; (801873c <lwip_netconn_do_delconn+0x1d0>)
 80185e6:	f240 421f 	movw	r2, #1055	; 0x41f
 80185ea:	4957      	ldr	r1, [pc, #348]	; (8018748 <lwip_netconn_do_delconn+0x1dc>)
 80185ec:	4855      	ldr	r0, [pc, #340]	; (8018744 <lwip_netconn_do_delconn+0x1d8>)
 80185ee:	f00d fc7b 	bl	8025ee8 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80185f2:	697b      	ldr	r3, [r7, #20]
 80185f4:	2200      	movs	r2, #0
 80185f6:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 80185f8:	697b      	ldr	r3, [r7, #20]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	4618      	mov	r0, r3
 80185fe:	f7ff fdbd 	bl	801817c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	685b      	ldr	r3, [r3, #4]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d057      	beq.n	80186bc <lwip_netconn_do_delconn+0x150>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801860c:	697b      	ldr	r3, [r7, #20]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	781b      	ldrb	r3, [r3, #0]
 8018612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018616:	2b10      	cmp	r3, #16
 8018618:	d005      	beq.n	8018626 <lwip_netconn_do_delconn+0xba>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 801861a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	2200      	movs	r2, #0
 8018622:	605a      	str	r2, [r3, #4]
 8018624:	e04a      	b.n	80186bc <lwip_netconn_do_delconn+0x150>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8018626:	697b      	ldr	r3, [r7, #20]
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801862c:	2b00      	cmp	r3, #0
 801862e:	d104      	bne.n	801863a <lwip_netconn_do_delconn+0xce>
 8018630:	697b      	ldr	r3, [r7, #20]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	6a1b      	ldr	r3, [r3, #32]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d006      	beq.n	8018648 <lwip_netconn_do_delconn+0xdc>
 801863a:	4b40      	ldr	r3, [pc, #256]	; (801873c <lwip_netconn_do_delconn+0x1d0>)
 801863c:	f240 4235 	movw	r2, #1077	; 0x435
 8018640:	4942      	ldr	r1, [pc, #264]	; (801874c <lwip_netconn_do_delconn+0x1e0>)
 8018642:	4840      	ldr	r0, [pc, #256]	; (8018744 <lwip_netconn_do_delconn+0x1d8>)
 8018644:	f00d fc50 	bl	8025ee8 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	2204      	movs	r2, #4
 801864e:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	2203      	movs	r2, #3
 8018654:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 8018656:	697b      	ldr	r3, [r7, #20]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	697a      	ldr	r2, [r7, #20]
 801865c:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801865e:	697b      	ldr	r3, [r7, #20]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	2100      	movs	r1, #0
 8018664:	4618      	mov	r0, r3
 8018666:	f7ff fe09 	bl	801827c <lwip_netconn_do_close_internal>
 801866a:	4603      	mov	r3, r0
 801866c:	2b00      	cmp	r3, #0
 801866e:	d060      	beq.n	8018732 <lwip_netconn_do_delconn+0x1c6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	785b      	ldrb	r3, [r3, #1]
 8018676:	2b04      	cmp	r3, #4
 8018678:	d006      	beq.n	8018688 <lwip_netconn_do_delconn+0x11c>
 801867a:	4b30      	ldr	r3, [pc, #192]	; (801873c <lwip_netconn_do_delconn+0x1d0>)
 801867c:	f240 423b 	movw	r2, #1083	; 0x43b
 8018680:	4933      	ldr	r1, [pc, #204]	; (8018750 <lwip_netconn_do_delconn+0x1e4>)
 8018682:	4830      	ldr	r0, [pc, #192]	; (8018744 <lwip_netconn_do_delconn+0x1d8>)
 8018684:	f00d fc30 	bl	8025ee8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8018688:	4832      	ldr	r0, [pc, #200]	; (8018754 <lwip_netconn_do_delconn+0x1e8>)
 801868a:	f00a fc3a 	bl	8022f02 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801868e:	697b      	ldr	r3, [r7, #20]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	330c      	adds	r3, #12
 8018694:	2100      	movs	r1, #0
 8018696:	4618      	mov	r0, r3
 8018698:	f00a fb90 	bl	8022dbc <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 801869c:	482d      	ldr	r0, [pc, #180]	; (8018754 <lwip_netconn_do_delconn+0x1e8>)
 801869e:	f00a fc21 	bl	8022ee4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80186a2:	697b      	ldr	r3, [r7, #20]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	785b      	ldrb	r3, [r3, #1]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d042      	beq.n	8018732 <lwip_netconn_do_delconn+0x1c6>
 80186ac:	4b23      	ldr	r3, [pc, #140]	; (801873c <lwip_netconn_do_delconn+0x1d0>)
 80186ae:	f240 423f 	movw	r2, #1087	; 0x43f
 80186b2:	4927      	ldr	r1, [pc, #156]	; (8018750 <lwip_netconn_do_delconn+0x1e4>)
 80186b4:	4823      	ldr	r0, [pc, #140]	; (8018744 <lwip_netconn_do_delconn+0x1d8>)
 80186b6:	f00d fc17 	bl	8025ee8 <iprintf>
        return;
 80186ba:	e03a      	b.n	8018732 <lwip_netconn_do_delconn+0x1c6>
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80186bc:	697b      	ldr	r3, [r7, #20]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d007      	beq.n	80186d6 <lwip_netconn_do_delconn+0x16a>
 80186c6:	697b      	ldr	r3, [r7, #20]
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186cc:	697a      	ldr	r2, [r7, #20]
 80186ce:	6810      	ldr	r0, [r2, #0]
 80186d0:	2200      	movs	r2, #0
 80186d2:	2100      	movs	r1, #0
 80186d4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80186d6:	697b      	ldr	r3, [r7, #20]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d007      	beq.n	80186f0 <lwip_netconn_do_delconn+0x184>
 80186e0:	697b      	ldr	r3, [r7, #20]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186e6:	697a      	ldr	r2, [r7, #20]
 80186e8:	6810      	ldr	r0, [r2, #0]
 80186ea:	2200      	movs	r2, #0
 80186ec:	2102      	movs	r1, #2
 80186ee:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80186f0:	697b      	ldr	r3, [r7, #20]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	330c      	adds	r3, #12
 80186f6:	4618      	mov	r0, r3
 80186f8:	f00a fbab 	bl	8022e52 <sys_sem_valid>
 80186fc:	4603      	mov	r3, r0
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d018      	beq.n	8018734 <lwip_netconn_do_delconn+0x1c8>
    TCPIP_APIMSG_ACK(msg);
 8018702:	697b      	ldr	r3, [r7, #20]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d014      	beq.n	8018734 <lwip_netconn_do_delconn+0x1c8>
 801870a:	f00a fc2d 	bl	8022f68 <sys_arch_protect>
 801870e:	60f8      	str	r0, [r7, #12]
 8018710:	697b      	ldr	r3, [r7, #20]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018718:	f113 0f0c 	cmn.w	r3, #12
 801871c:	db05      	blt.n	801872a <lwip_netconn_do_delconn+0x1be>
 801871e:	697b      	ldr	r3, [r7, #20]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	697a      	ldr	r2, [r7, #20]
 8018724:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018728:	721a      	strb	r2, [r3, #8]
 801872a:	68f8      	ldr	r0, [r7, #12]
 801872c:	f00a fc2a 	bl	8022f84 <sys_arch_unprotect>
 8018730:	e000      	b.n	8018734 <lwip_netconn_do_delconn+0x1c8>
        return;
 8018732:	bf00      	nop
  }
}
 8018734:	3718      	adds	r7, #24
 8018736:	46bd      	mov	sp, r7
 8018738:	bd80      	pop	{r7, pc}
 801873a:	bf00      	nop
 801873c:	08026d48 	.word	0x08026d48
 8018740:	08026ff8 	.word	0x08026ff8
 8018744:	08026da0 	.word	0x08026da0
 8018748:	0802700c 	.word	0x0802700c
 801874c:	0802702c 	.word	0x0802702c
 8018750:	08027048 	.word	0x08027048
 8018754:	2000a25c 	.word	0x2000a25c

08018758 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b084      	sub	sp, #16
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801876c:	f113 0f0c 	cmn.w	r3, #12
 8018770:	da06      	bge.n	8018780 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	711a      	strb	r2, [r3, #4]
 801877e:	e01e      	b.n	80187be <lwip_netconn_do_bind+0x66>
  } else {
    msg->err = ERR_VAL;
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	22fa      	movs	r2, #250	; 0xfa
 8018784:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	685b      	ldr	r3, [r3, #4]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d016      	beq.n	80187be <lwip_netconn_do_bind+0x66>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	781b      	ldrb	r3, [r3, #0]
 8018796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801879a:	2b10      	cmp	r3, #16
 801879c:	d000      	beq.n	80187a0 <lwip_netconn_do_bind+0x48>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 801879e:	e00e      	b.n	80187be <lwip_netconn_do_bind+0x66>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	6858      	ldr	r0, [r3, #4]
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	6899      	ldr	r1, [r3, #8]
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	899b      	ldrh	r3, [r3, #12]
 80187ae:	461a      	mov	r2, r3
 80187b0:	f005 f84e 	bl	801d850 <tcp_bind>
 80187b4:	4603      	mov	r3, r0
 80187b6:	461a      	mov	r2, r3
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	711a      	strb	r2, [r3, #4]
        break;
 80187bc:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d012      	beq.n	80187ec <lwip_netconn_do_bind+0x94>
 80187c6:	f00a fbcf 	bl	8022f68 <sys_arch_protect>
 80187ca:	60b8      	str	r0, [r7, #8]
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80187d4:	f113 0f0c 	cmn.w	r3, #12
 80187d8:	db05      	blt.n	80187e6 <lwip_netconn_do_bind+0x8e>
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	68fa      	ldr	r2, [r7, #12]
 80187e0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80187e4:	721a      	strb	r2, [r3, #8]
 80187e6:	68b8      	ldr	r0, [r7, #8]
 80187e8:	f00a fbcc 	bl	8022f84 <sys_arch_unprotect>
}
 80187ec:	bf00      	nop
 80187ee:	3710      	adds	r7, #16
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}

080187f4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b088      	sub	sp, #32
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8018800:	69fb      	ldr	r3, [r7, #28]
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018808:	f113 0f0c 	cmn.w	r3, #12
 801880c:	da06      	bge.n	801881c <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 801880e:	69fb      	ldr	r3, [r7, #28]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018816:	69fb      	ldr	r3, [r7, #28]
 8018818:	711a      	strb	r2, [r3, #4]
 801881a:	e090      	b.n	801893e <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 801881c:	69fb      	ldr	r3, [r7, #28]
 801881e:	22f5      	movs	r2, #245	; 0xf5
 8018820:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8018822:	69fb      	ldr	r3, [r7, #28]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	685b      	ldr	r3, [r3, #4]
 8018828:	2b00      	cmp	r3, #0
 801882a:	f000 8088 	beq.w	801893e <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801882e:	69fb      	ldr	r3, [r7, #28]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	781b      	ldrb	r3, [r3, #0]
 8018834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018838:	2b10      	cmp	r3, #16
 801883a:	d17d      	bne.n	8018938 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 801883c:	69fb      	ldr	r3, [r7, #28]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	785b      	ldrb	r3, [r3, #1]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d16f      	bne.n	8018926 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8018846:	69fb      	ldr	r3, [r7, #28]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	685b      	ldr	r3, [r3, #4]
 801884c:	7d1b      	ldrb	r3, [r3, #20]
 801884e:	2b00      	cmp	r3, #0
 8018850:	d003      	beq.n	801885a <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 8018852:	69fb      	ldr	r3, [r7, #28]
 8018854:	22fa      	movs	r2, #250	; 0xfa
 8018856:	711a      	strb	r2, [r3, #4]
 8018858:	e071      	b.n	801893e <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 801885a:	23ff      	movs	r3, #255	; 0xff
 801885c:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 801885e:	69fb      	ldr	r3, [r7, #28]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	685b      	ldr	r3, [r3, #4]
 8018864:	f107 020f 	add.w	r2, r7, #15
 8018868:	7ef9      	ldrb	r1, [r7, #27]
 801886a:	4618      	mov	r0, r3
 801886c:	f005 f892 	bl	801d994 <tcp_listen_with_backlog_and_err>
 8018870:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 8018872:	697b      	ldr	r3, [r7, #20]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d104      	bne.n	8018882 <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8018878:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801887c:	69fb      	ldr	r3, [r7, #28]
 801887e:	711a      	strb	r2, [r3, #4]
 8018880:	e05d      	b.n	801893e <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8018882:	69fb      	ldr	r3, [r7, #28]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	3310      	adds	r3, #16
 8018888:	4618      	mov	r0, r3
 801888a:	f00a fa51 	bl	8022d30 <sys_mbox_valid>
 801888e:	4603      	mov	r3, r0
 8018890:	2b00      	cmp	r3, #0
 8018892:	d00b      	beq.n	80188ac <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 8018894:	69fb      	ldr	r3, [r7, #28]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	3310      	adds	r3, #16
 801889a:	4618      	mov	r0, r3
 801889c:	f00a f9ac 	bl	8022bf8 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	3310      	adds	r3, #16
 80188a6:	4618      	mov	r0, r3
 80188a8:	f00a fa53 	bl	8022d52 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 80188ac:	69fb      	ldr	r3, [r7, #28]
 80188ae:	2200      	movs	r2, #0
 80188b0:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80188b2:	69fb      	ldr	r3, [r7, #28]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	3314      	adds	r3, #20
 80188b8:	4618      	mov	r0, r3
 80188ba:	f00a fa39 	bl	8022d30 <sys_mbox_valid>
 80188be:	4603      	mov	r3, r0
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d10a      	bne.n	80188da <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80188c4:	69fb      	ldr	r3, [r7, #28]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	3314      	adds	r3, #20
 80188ca:	2106      	movs	r1, #6
 80188cc:	4618      	mov	r0, r3
 80188ce:	f00a f971 	bl	8022bb4 <sys_mbox_new>
 80188d2:	4603      	mov	r3, r0
 80188d4:	461a      	mov	r2, r3
 80188d6:	69fb      	ldr	r3, [r7, #28]
 80188d8:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 80188da:	69fb      	ldr	r3, [r7, #28]
 80188dc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d118      	bne.n	8018916 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 80188e4:	69fb      	ldr	r3, [r7, #28]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	2202      	movs	r2, #2
 80188ea:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 80188ec:	69fb      	ldr	r3, [r7, #28]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	697a      	ldr	r2, [r7, #20]
 80188f2:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80188f4:	69fb      	ldr	r3, [r7, #28]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	685a      	ldr	r2, [r3, #4]
 80188fa:	69fb      	ldr	r3, [r7, #28]
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	4619      	mov	r1, r3
 8018900:	4610      	mov	r0, r2
 8018902:	f005 ff11 	bl	801e728 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8018906:	69fb      	ldr	r3, [r7, #28]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	685b      	ldr	r3, [r3, #4]
 801890c:	4919      	ldr	r1, [pc, #100]	; (8018974 <lwip_netconn_do_listen+0x180>)
 801890e:	4618      	mov	r0, r3
 8018910:	f005 ff80 	bl	801e814 <tcp_accept>
 8018914:	e013      	b.n	801893e <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 8018916:	6978      	ldr	r0, [r7, #20]
 8018918:	f004 fe7c 	bl	801d614 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 801891c:	69fb      	ldr	r3, [r7, #28]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	2200      	movs	r2, #0
 8018922:	605a      	str	r2, [r3, #4]
 8018924:	e00b      	b.n	801893e <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8018926:	69fb      	ldr	r3, [r7, #28]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	785b      	ldrb	r3, [r3, #1]
 801892c:	2b02      	cmp	r3, #2
 801892e:	d106      	bne.n	801893e <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 8018930:	69fb      	ldr	r3, [r7, #28]
 8018932:	2200      	movs	r2, #0
 8018934:	711a      	strb	r2, [r3, #4]
 8018936:	e002      	b.n	801893e <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 8018938:	69fb      	ldr	r3, [r7, #28]
 801893a:	22f0      	movs	r2, #240	; 0xf0
 801893c:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 801893e:	69fb      	ldr	r3, [r7, #28]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d012      	beq.n	801896c <lwip_netconn_do_listen+0x178>
 8018946:	f00a fb0f 	bl	8022f68 <sys_arch_protect>
 801894a:	6138      	str	r0, [r7, #16]
 801894c:	69fb      	ldr	r3, [r7, #28]
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018954:	f113 0f0c 	cmn.w	r3, #12
 8018958:	db05      	blt.n	8018966 <lwip_netconn_do_listen+0x172>
 801895a:	69fb      	ldr	r3, [r7, #28]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	69fa      	ldr	r2, [r7, #28]
 8018960:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018964:	721a      	strb	r2, [r3, #8]
 8018966:	6938      	ldr	r0, [r7, #16]
 8018968:	f00a fb0c 	bl	8022f84 <sys_arch_unprotect>
}
 801896c:	bf00      	nop
 801896e:	3720      	adds	r7, #32
 8018970:	46bd      	mov	sp, r7
 8018972:	bd80      	pop	{r7, pc}
 8018974:	08017df1 	.word	0x08017df1

08018978 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b086      	sub	sp, #24
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8018984:	693b      	ldr	r3, [r7, #16]
 8018986:	2200      	movs	r2, #0
 8018988:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 801898a:	693b      	ldr	r3, [r7, #16]
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	685b      	ldr	r3, [r3, #4]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d022      	beq.n	80189da <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8018994:	693b      	ldr	r3, [r7, #16]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	781b      	ldrb	r3, [r3, #0]
 801899a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801899e:	2b10      	cmp	r3, #16
 80189a0:	d11b      	bne.n	80189da <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 80189a2:	693b      	ldr	r3, [r7, #16]
 80189a4:	689b      	ldr	r3, [r3, #8]
 80189a6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 80189a8:	697b      	ldr	r3, [r7, #20]
 80189aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80189ae:	d202      	bcs.n	80189b6 <lwip_netconn_do_recv+0x3e>
 80189b0:	697b      	ldr	r3, [r7, #20]
 80189b2:	b29b      	uxth	r3, r3
 80189b4:	e001      	b.n	80189ba <lwip_netconn_do_recv+0x42>
 80189b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189ba:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80189bc:	693b      	ldr	r3, [r7, #16]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	685b      	ldr	r3, [r3, #4]
 80189c2:	89fa      	ldrh	r2, [r7, #14]
 80189c4:	4611      	mov	r1, r2
 80189c6:	4618      	mov	r0, r3
 80189c8:	f005 f8cc 	bl	801db64 <tcp_recved>
        remaining -= recved;
 80189cc:	89fb      	ldrh	r3, [r7, #14]
 80189ce:	697a      	ldr	r2, [r7, #20]
 80189d0:	1ad3      	subs	r3, r2, r3
 80189d2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80189d4:	697b      	ldr	r3, [r7, #20]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d1e6      	bne.n	80189a8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80189da:	693b      	ldr	r3, [r7, #16]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d012      	beq.n	8018a08 <lwip_netconn_do_recv+0x90>
 80189e2:	f00a fac1 	bl	8022f68 <sys_arch_protect>
 80189e6:	60b8      	str	r0, [r7, #8]
 80189e8:	693b      	ldr	r3, [r7, #16]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80189f0:	f113 0f0c 	cmn.w	r3, #12
 80189f4:	db05      	blt.n	8018a02 <lwip_netconn_do_recv+0x8a>
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	693a      	ldr	r2, [r7, #16]
 80189fc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018a00:	721a      	strb	r2, [r3, #8]
 8018a02:	68b8      	ldr	r0, [r7, #8]
 8018a04:	f00a fabe 	bl	8022f84 <sys_arch_unprotect>
}
 8018a08:	bf00      	nop
 8018a0a:	3718      	adds	r7, #24
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	bd80      	pop	{r7, pc}

08018a10 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b08a      	sub	sp, #40	; 0x28
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
 8018a18:	460b      	mov	r3, r1
 8018a1a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d106      	bne.n	8018a36 <lwip_netconn_do_writemore+0x26>
 8018a28:	4ba3      	ldr	r3, [pc, #652]	; (8018cb8 <lwip_netconn_do_writemore+0x2a8>)
 8018a2a:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8018a2e:	49a3      	ldr	r1, [pc, #652]	; (8018cbc <lwip_netconn_do_writemore+0x2ac>)
 8018a30:	48a3      	ldr	r0, [pc, #652]	; (8018cc0 <lwip_netconn_do_writemore+0x2b0>)
 8018a32:	f00d fa59 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	785b      	ldrb	r3, [r3, #1]
 8018a3a:	2b01      	cmp	r3, #1
 8018a3c:	d006      	beq.n	8018a4c <lwip_netconn_do_writemore+0x3c>
 8018a3e:	4b9e      	ldr	r3, [pc, #632]	; (8018cb8 <lwip_netconn_do_writemore+0x2a8>)
 8018a40:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8018a44:	499f      	ldr	r1, [pc, #636]	; (8018cc4 <lwip_netconn_do_writemore+0x2b4>)
 8018a46:	489e      	ldr	r0, [pc, #632]	; (8018cc0 <lwip_netconn_do_writemore+0x2b0>)
 8018a48:	f00d fa4e 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d106      	bne.n	8018a62 <lwip_netconn_do_writemore+0x52>
 8018a54:	4b98      	ldr	r3, [pc, #608]	; (8018cb8 <lwip_netconn_do_writemore+0x2a8>)
 8018a56:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8018a5a:	499b      	ldr	r1, [pc, #620]	; (8018cc8 <lwip_netconn_do_writemore+0x2b8>)
 8018a5c:	4898      	ldr	r0, [pc, #608]	; (8018cc0 <lwip_netconn_do_writemore+0x2b0>)
 8018a5e:	f00d fa43 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	685b      	ldr	r3, [r3, #4]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d106      	bne.n	8018a78 <lwip_netconn_do_writemore+0x68>
 8018a6a:	4b93      	ldr	r3, [pc, #588]	; (8018cb8 <lwip_netconn_do_writemore+0x2a8>)
 8018a6c:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8018a70:	4996      	ldr	r1, [pc, #600]	; (8018ccc <lwip_netconn_do_writemore+0x2bc>)
 8018a72:	4893      	ldr	r0, [pc, #588]	; (8018cc0 <lwip_netconn_do_writemore+0x2b0>)
 8018a74:	f00d fa38 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	6a1a      	ldr	r2, [r3, #32]
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a80:	68db      	ldr	r3, [r3, #12]
 8018a82:	429a      	cmp	r2, r3
 8018a84:	d306      	bcc.n	8018a94 <lwip_netconn_do_writemore+0x84>
 8018a86:	4b8c      	ldr	r3, [pc, #560]	; (8018cb8 <lwip_netconn_do_writemore+0x2a8>)
 8018a88:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8018a8c:	4990      	ldr	r1, [pc, #576]	; (8018cd0 <lwip_netconn_do_writemore+0x2c0>)
 8018a8e:	488c      	ldr	r0, [pc, #560]	; (8018cc0 <lwip_netconn_do_writemore+0x2b0>)
 8018a90:	f00d fa2a 	bl	8025ee8 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a98:	7c1b      	ldrb	r3, [r3, #16]
 8018a9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	7f1b      	ldrb	r3, [r3, #28]
 8018aa2:	f003 0302 	and.w	r3, r3, #2
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d105      	bne.n	8018ab6 <lwip_netconn_do_writemore+0xa6>
 8018aaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018aae:	f003 0304 	and.w	r3, r3, #4
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d001      	beq.n	8018aba <lwip_netconn_do_writemore+0xaa>
 8018ab6:	2301      	movs	r3, #1
 8018ab8:	e000      	b.n	8018abc <lwip_netconn_do_writemore+0xac>
 8018aba:	2300      	movs	r3, #0
 8018abc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ac4:	689a      	ldr	r2, [r3, #8]
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	6a1b      	ldr	r3, [r3, #32]
 8018aca:	4413      	add	r3, r2
 8018acc:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ad2:	68da      	ldr	r2, [r3, #12]
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	6a1b      	ldr	r3, [r3, #32]
 8018ad8:	1ad3      	subs	r3, r2, r3
 8018ada:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8018adc:	69bb      	ldr	r3, [r7, #24]
 8018ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ae2:	d309      	bcc.n	8018af8 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 8018ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ae8:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 8018aea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018aee:	f043 0302 	orr.w	r3, r3, #2
 8018af2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018af6:	e001      	b.n	8018afc <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 8018af8:	69bb      	ldr	r3, [r7, #24]
 8018afa:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	685b      	ldr	r3, [r3, #4]
 8018b00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018b04:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8018b06:	8afa      	ldrh	r2, [r7, #22]
 8018b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b0a:	429a      	cmp	r2, r3
 8018b0c:	d212      	bcs.n	8018b34 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 8018b0e:	8afb      	ldrh	r3, [r7, #22]
 8018b10:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8018b12:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d006      	beq.n	8018b28 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 8018b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d109      	bne.n	8018b34 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 8018b20:	23f9      	movs	r3, #249	; 0xf9
 8018b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8018b26:	e029      	b.n	8018b7c <lwip_netconn_do_writemore+0x16c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8018b28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018b2c:	f043 0302 	orr.w	r3, r3, #2
 8018b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	6a1a      	ldr	r2, [r3, #32]
 8018b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b3a:	441a      	add	r2, r3
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b40:	68db      	ldr	r3, [r3, #12]
 8018b42:	429a      	cmp	r2, r3
 8018b44:	d906      	bls.n	8018b54 <lwip_netconn_do_writemore+0x144>
 8018b46:	4b5c      	ldr	r3, [pc, #368]	; (8018cb8 <lwip_netconn_do_writemore+0x2a8>)
 8018b48:	f240 6213 	movw	r2, #1555	; 0x613
 8018b4c:	4961      	ldr	r1, [pc, #388]	; (8018cd4 <lwip_netconn_do_writemore+0x2c4>)
 8018b4e:	485c      	ldr	r0, [pc, #368]	; (8018cc0 <lwip_netconn_do_writemore+0x2b0>)
 8018b50:	f00d f9ca 	bl	8025ee8 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6858      	ldr	r0, [r3, #4]
 8018b58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018b5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018b5e:	69f9      	ldr	r1, [r7, #28]
 8018b60:	f008 fc22 	bl	80213a8 <tcp_write>
 8018b64:	4603      	mov	r3, r0
 8018b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8018b6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d004      	beq.n	8018b7c <lwip_netconn_do_writemore+0x16c>
 8018b72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b7a:	d133      	bne.n	8018be4 <lwip_netconn_do_writemore+0x1d4>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8018b7c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d017      	beq.n	8018bb4 <lwip_netconn_do_writemore+0x1a4>
 8018b84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b8a:	68db      	ldr	r3, [r3, #12]
 8018b8c:	429a      	cmp	r2, r3
 8018b8e:	d211      	bcs.n	8018bb4 <lwip_netconn_do_writemore+0x1a4>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d005      	beq.n	8018ba4 <lwip_netconn_do_writemore+0x194>
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018b9e:	2103      	movs	r1, #3
 8018ba0:	6878      	ldr	r0, [r7, #4]
 8018ba2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	7f1b      	ldrb	r3, [r3, #28]
 8018ba8:	f043 0310 	orr.w	r3, r3, #16
 8018bac:	b2da      	uxtb	r2, r3
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	771a      	strb	r2, [r3, #28]
 8018bb2:	e017      	b.n	8018be4 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	685b      	ldr	r3, [r3, #4]
 8018bb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018bbc:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8018bc0:	4293      	cmp	r3, r2
 8018bc2:	d905      	bls.n	8018bd0 <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	685b      	ldr	r3, [r3, #4]
 8018bc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8018bcc:	2b04      	cmp	r3, #4
 8018bce:	d909      	bls.n	8018be4 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d005      	beq.n	8018be4 <lwip_netconn_do_writemore+0x1d4>
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018bdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018bde:	2103      	movs	r1, #3
 8018be0:	6878      	ldr	r0, [r7, #4]
 8018be2:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8018be4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d134      	bne.n	8018c56 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	6a1a      	ldr	r2, [r3, #32]
 8018bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018bf2:	441a      	add	r2, r3
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	6a1a      	ldr	r2, [r3, #32]
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c00:	68db      	ldr	r3, [r3, #12]
 8018c02:	429a      	cmp	r2, r3
 8018c04:	d003      	beq.n	8018c0e <lwip_netconn_do_writemore+0x1fe>
 8018c06:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d007      	beq.n	8018c1e <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c12:	687a      	ldr	r2, [r7, #4]
 8018c14:	6a12      	ldr	r2, [r2, #32]
 8018c16:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8018c18:	2301      	movs	r3, #1
 8018c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	685b      	ldr	r3, [r3, #4]
 8018c22:	4618      	mov	r0, r3
 8018c24:	f009 f876 	bl	8021d14 <tcp_output>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8018c2c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018c30:	f113 0f0c 	cmn.w	r3, #12
 8018c34:	db04      	blt.n	8018c40 <lwip_netconn_do_writemore+0x230>
 8018c36:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018c3a:	f113 0f04 	cmn.w	r3, #4
 8018c3e:	d152      	bne.n	8018ce6 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8018c40:	7d7b      	ldrb	r3, [r7, #21]
 8018c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018c46:	2301      	movs	r3, #1
 8018c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c50:	2200      	movs	r2, #0
 8018c52:	60da      	str	r2, [r3, #12]
 8018c54:	e047      	b.n	8018ce6 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 8018c56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c5e:	d13b      	bne.n	8018cd8 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	685b      	ldr	r3, [r3, #4]
 8018c64:	4618      	mov	r0, r3
 8018c66:	f009 f855 	bl	8021d14 <tcp_output>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8018c6e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018c72:	f113 0f0c 	cmn.w	r3, #12
 8018c76:	db04      	blt.n	8018c82 <lwip_netconn_do_writemore+0x272>
 8018c78:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018c7c:	f113 0f04 	cmn.w	r3, #4
 8018c80:	d10a      	bne.n	8018c98 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8018c82:	7d3b      	ldrb	r3, [r7, #20]
 8018c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018c88:	2301      	movs	r3, #1
 8018c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c92:	2200      	movs	r2, #0
 8018c94:	60da      	str	r2, [r3, #12]
 8018c96:	e026      	b.n	8018ce6 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 8018c98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d022      	beq.n	8018ce6 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8018ca0:	23f9      	movs	r3, #249	; 0xf9
 8018ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb0:	2200      	movs	r2, #0
 8018cb2:	60da      	str	r2, [r3, #12]
 8018cb4:	e017      	b.n	8018ce6 <lwip_netconn_do_writemore+0x2d6>
 8018cb6:	bf00      	nop
 8018cb8:	08026d48 	.word	0x08026d48
 8018cbc:	08026e08 	.word	0x08026e08
 8018cc0:	08026da0 	.word	0x08026da0
 8018cc4:	080270e8 	.word	0x080270e8
 8018cc8:	08026e18 	.word	0x08026e18
 8018ccc:	08027108 	.word	0x08027108
 8018cd0:	08027120 	.word	0x08027120
 8018cd4:	08027154 	.word	0x08027154
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8018cd8:	2301      	movs	r3, #1
 8018cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8018ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d02c      	beq.n	8018d48 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	330c      	adds	r3, #12
 8018cf6:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cfc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018d00:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	2200      	movs	r2, #0
 8018d06:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	2200      	movs	r2, #0
 8018d12:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d00f      	beq.n	8018d3a <lwip_netconn_do_writemore+0x32a>
 8018d1a:	f00a f925 	bl	8022f68 <sys_arch_protect>
 8018d1e:	60f8      	str	r0, [r7, #12]
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d26:	f113 0f0c 	cmn.w	r3, #12
 8018d2a:	db03      	blt.n	8018d34 <lwip_netconn_do_writemore+0x324>
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018d32:	721a      	strb	r2, [r3, #8]
 8018d34:	68f8      	ldr	r0, [r7, #12]
 8018d36:	f00a f925 	bl	8022f84 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8018d3a:	78fb      	ldrb	r3, [r7, #3]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d006      	beq.n	8018d4e <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8018d40:	6938      	ldr	r0, [r7, #16]
 8018d42:	f00a f86c 	bl	8022e1e <sys_sem_signal>
 8018d46:	e002      	b.n	8018d4e <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8018d48:	f04f 33ff 	mov.w	r3, #4294967295
 8018d4c:	e000      	b.n	8018d50 <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 8018d4e:	2300      	movs	r3, #0
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	3728      	adds	r7, #40	; 0x28
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd80      	pop	{r7, pc}

08018d58 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b084      	sub	sp, #16
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018d6c:	f113 0f0c 	cmn.w	r3, #12
 8018d70:	da06      	bge.n	8018d80 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	711a      	strb	r2, [r3, #4]
 8018d7e:	e06e      	b.n	8018e5e <lwip_netconn_do_write+0x106>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	781b      	ldrb	r3, [r3, #0]
 8018d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018d8a:	2b10      	cmp	r3, #16
 8018d8c:	d167      	bne.n	8018e5e <lwip_netconn_do_write+0x106>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	785b      	ldrb	r3, [r3, #1]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d003      	beq.n	8018da0 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	22fb      	movs	r2, #251	; 0xfb
 8018d9c:	711a      	strb	r2, [r3, #4]
 8018d9e:	e05e      	b.n	8018e5e <lwip_netconn_do_write+0x106>
      } else if (msg->conn->pcb.tcp != NULL) {
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	685b      	ldr	r3, [r3, #4]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d056      	beq.n	8018e58 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	2201      	movs	r2, #1
 8018db0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d104      	bne.n	8018dc6 <lwip_netconn_do_write+0x6e>
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	6a1b      	ldr	r3, [r3, #32]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d006      	beq.n	8018dd4 <lwip_netconn_do_write+0x7c>
 8018dc6:	4b34      	ldr	r3, [pc, #208]	; (8018e98 <lwip_netconn_do_write+0x140>)
 8018dc8:	f240 6283 	movw	r2, #1667	; 0x683
 8018dcc:	4933      	ldr	r1, [pc, #204]	; (8018e9c <lwip_netconn_do_write+0x144>)
 8018dce:	4834      	ldr	r0, [pc, #208]	; (8018ea0 <lwip_netconn_do_write+0x148>)
 8018dd0:	f00d f88a 	bl	8025ee8 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	68db      	ldr	r3, [r3, #12]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d106      	bne.n	8018dea <lwip_netconn_do_write+0x92>
 8018ddc:	4b2e      	ldr	r3, [pc, #184]	; (8018e98 <lwip_netconn_do_write+0x140>)
 8018dde:	f240 6284 	movw	r2, #1668	; 0x684
 8018de2:	4930      	ldr	r1, [pc, #192]	; (8018ea4 <lwip_netconn_do_write+0x14c>)
 8018de4:	482e      	ldr	r0, [pc, #184]	; (8018ea0 <lwip_netconn_do_write+0x148>)
 8018de6:	f00d f87f 	bl	8025ee8 <iprintf>
        msg->conn->current_msg = msg;
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	68fa      	ldr	r2, [r7, #12]
 8018df0:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	2200      	movs	r2, #0
 8018df8:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	2100      	movs	r1, #0
 8018e00:	4618      	mov	r0, r3
 8018e02:	f7ff fe05 	bl	8018a10 <lwip_netconn_do_writemore>
 8018e06:	4603      	mov	r3, r0
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d040      	beq.n	8018e8e <lwip_netconn_do_write+0x136>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	785b      	ldrb	r3, [r3, #1]
 8018e12:	2b01      	cmp	r3, #1
 8018e14:	d006      	beq.n	8018e24 <lwip_netconn_do_write+0xcc>
 8018e16:	4b20      	ldr	r3, [pc, #128]	; (8018e98 <lwip_netconn_do_write+0x140>)
 8018e18:	f240 6289 	movw	r2, #1673	; 0x689
 8018e1c:	4922      	ldr	r1, [pc, #136]	; (8018ea8 <lwip_netconn_do_write+0x150>)
 8018e1e:	4820      	ldr	r0, [pc, #128]	; (8018ea0 <lwip_netconn_do_write+0x148>)
 8018e20:	f00d f862 	bl	8025ee8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8018e24:	4821      	ldr	r0, [pc, #132]	; (8018eac <lwip_netconn_do_write+0x154>)
 8018e26:	f00a f86c 	bl	8022f02 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	330c      	adds	r3, #12
 8018e30:	2100      	movs	r1, #0
 8018e32:	4618      	mov	r0, r3
 8018e34:	f009 ffc2 	bl	8022dbc <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8018e38:	481c      	ldr	r0, [pc, #112]	; (8018eac <lwip_netconn_do_write+0x154>)
 8018e3a:	f00a f853 	bl	8022ee4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	785b      	ldrb	r3, [r3, #1]
 8018e44:	2b01      	cmp	r3, #1
 8018e46:	d122      	bne.n	8018e8e <lwip_netconn_do_write+0x136>
 8018e48:	4b13      	ldr	r3, [pc, #76]	; (8018e98 <lwip_netconn_do_write+0x140>)
 8018e4a:	f240 628d 	movw	r2, #1677	; 0x68d
 8018e4e:	4916      	ldr	r1, [pc, #88]	; (8018ea8 <lwip_netconn_do_write+0x150>)
 8018e50:	4813      	ldr	r0, [pc, #76]	; (8018ea0 <lwip_netconn_do_write+0x148>)
 8018e52:	f00d f849 	bl	8025ee8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8018e56:	e01a      	b.n	8018e8e <lwip_netconn_do_write+0x136>
      } else {
        msg->err = ERR_CONN;
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	22f5      	movs	r2, #245	; 0xf5
 8018e5c:	711a      	strb	r2, [r3, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d014      	beq.n	8018e90 <lwip_netconn_do_write+0x138>
 8018e66:	f00a f87f 	bl	8022f68 <sys_arch_protect>
 8018e6a:	60b8      	str	r0, [r7, #8]
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018e74:	f113 0f0c 	cmn.w	r3, #12
 8018e78:	db05      	blt.n	8018e86 <lwip_netconn_do_write+0x12e>
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	68fa      	ldr	r2, [r7, #12]
 8018e80:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018e84:	721a      	strb	r2, [r3, #8]
 8018e86:	68b8      	ldr	r0, [r7, #8]
 8018e88:	f00a f87c 	bl	8022f84 <sys_arch_unprotect>
 8018e8c:	e000      	b.n	8018e90 <lwip_netconn_do_write+0x138>
        return;
 8018e8e:	bf00      	nop
}
 8018e90:	3710      	adds	r7, #16
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd80      	pop	{r7, pc}
 8018e96:	bf00      	nop
 8018e98:	08026d48 	.word	0x08026d48
 8018e9c:	0802702c 	.word	0x0802702c
 8018ea0:	08026da0 	.word	0x08026da0
 8018ea4:	08027180 	.word	0x08027180
 8018ea8:	08027048 	.word	0x08027048
 8018eac:	2000a25c 	.word	0x2000a25c

08018eb0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b086      	sub	sp, #24
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8018ebc:	697b      	ldr	r3, [r7, #20]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	785b      	ldrb	r3, [r3, #1]
 8018ec2:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8018ec4:	697b      	ldr	r3, [r7, #20]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	685b      	ldr	r3, [r3, #4]
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d06e      	beq.n	8018fac <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8018ece:	697b      	ldr	r3, [r7, #20]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	781b      	ldrb	r3, [r3, #0]
 8018ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8018ed8:	2b10      	cmp	r3, #16
 8018eda:	d167      	bne.n	8018fac <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8018edc:	697b      	ldr	r3, [r7, #20]
 8018ede:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8018ee0:	2b03      	cmp	r3, #3
 8018ee2:	d002      	beq.n	8018eea <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8018ee4:	7cfb      	ldrb	r3, [r7, #19]
 8018ee6:	2b02      	cmp	r3, #2
 8018ee8:	d060      	beq.n	8018fac <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8018eea:	7cfb      	ldrb	r3, [r7, #19]
 8018eec:	2b03      	cmp	r3, #3
 8018eee:	d103      	bne.n	8018ef8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8018ef0:	697b      	ldr	r3, [r7, #20]
 8018ef2:	22f5      	movs	r2, #245	; 0xf5
 8018ef4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8018ef6:	e05c      	b.n	8018fb2 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8018ef8:	7cfb      	ldrb	r3, [r7, #19]
 8018efa:	2b01      	cmp	r3, #1
 8018efc:	d103      	bne.n	8018f06 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8018efe:	697b      	ldr	r3, [r7, #20]
 8018f00:	22fb      	movs	r2, #251	; 0xfb
 8018f02:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8018f04:	e055      	b.n	8018fb2 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8018f06:	697b      	ldr	r3, [r7, #20]
 8018f08:	7a1b      	ldrb	r3, [r3, #8]
 8018f0a:	f003 0301 	and.w	r3, r3, #1
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d004      	beq.n	8018f1c <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8018f12:	697b      	ldr	r3, [r7, #20]
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	4618      	mov	r0, r3
 8018f18:	f7ff f930 	bl	801817c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8018f1c:	697b      	ldr	r3, [r7, #20]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d104      	bne.n	8018f30 <lwip_netconn_do_close+0x80>
 8018f26:	697b      	ldr	r3, [r7, #20]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	6a1b      	ldr	r3, [r3, #32]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d006      	beq.n	8018f3e <lwip_netconn_do_close+0x8e>
 8018f30:	4b2e      	ldr	r3, [pc, #184]	; (8018fec <lwip_netconn_do_close+0x13c>)
 8018f32:	f240 721c 	movw	r2, #1820	; 0x71c
 8018f36:	492e      	ldr	r1, [pc, #184]	; (8018ff0 <lwip_netconn_do_close+0x140>)
 8018f38:	482e      	ldr	r0, [pc, #184]	; (8018ff4 <lwip_netconn_do_close+0x144>)
 8018f3a:	f00c ffd5 	bl	8025ee8 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8018f3e:	697b      	ldr	r3, [r7, #20]
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	2204      	movs	r2, #4
 8018f44:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8018f46:	697b      	ldr	r3, [r7, #20]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	697a      	ldr	r2, [r7, #20]
 8018f4c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8018f4e:	697b      	ldr	r3, [r7, #20]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	2100      	movs	r1, #0
 8018f54:	4618      	mov	r0, r3
 8018f56:	f7ff f991 	bl	801827c <lwip_netconn_do_close_internal>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d040      	beq.n	8018fe2 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8018f60:	697b      	ldr	r3, [r7, #20]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	785b      	ldrb	r3, [r3, #1]
 8018f66:	2b04      	cmp	r3, #4
 8018f68:	d006      	beq.n	8018f78 <lwip_netconn_do_close+0xc8>
 8018f6a:	4b20      	ldr	r3, [pc, #128]	; (8018fec <lwip_netconn_do_close+0x13c>)
 8018f6c:	f240 7221 	movw	r2, #1825	; 0x721
 8018f70:	4921      	ldr	r1, [pc, #132]	; (8018ff8 <lwip_netconn_do_close+0x148>)
 8018f72:	4820      	ldr	r0, [pc, #128]	; (8018ff4 <lwip_netconn_do_close+0x144>)
 8018f74:	f00c ffb8 	bl	8025ee8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8018f78:	4820      	ldr	r0, [pc, #128]	; (8018ffc <lwip_netconn_do_close+0x14c>)
 8018f7a:	f009 ffc2 	bl	8022f02 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8018f7e:	697b      	ldr	r3, [r7, #20]
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	330c      	adds	r3, #12
 8018f84:	2100      	movs	r1, #0
 8018f86:	4618      	mov	r0, r3
 8018f88:	f009 ff18 	bl	8022dbc <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8018f8c:	481b      	ldr	r0, [pc, #108]	; (8018ffc <lwip_netconn_do_close+0x14c>)
 8018f8e:	f009 ffa9 	bl	8022ee4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8018f92:	697b      	ldr	r3, [r7, #20]
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	785b      	ldrb	r3, [r3, #1]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d022      	beq.n	8018fe2 <lwip_netconn_do_close+0x132>
 8018f9c:	4b13      	ldr	r3, [pc, #76]	; (8018fec <lwip_netconn_do_close+0x13c>)
 8018f9e:	f240 7225 	movw	r2, #1829	; 0x725
 8018fa2:	4915      	ldr	r1, [pc, #84]	; (8018ff8 <lwip_netconn_do_close+0x148>)
 8018fa4:	4813      	ldr	r0, [pc, #76]	; (8018ff4 <lwip_netconn_do_close+0x144>)
 8018fa6:	f00c ff9f 	bl	8025ee8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8018faa:	e01a      	b.n	8018fe2 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8018fac:	697b      	ldr	r3, [r7, #20]
 8018fae:	22f5      	movs	r2, #245	; 0xf5
 8018fb0:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8018fb2:	697b      	ldr	r3, [r7, #20]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d014      	beq.n	8018fe4 <lwip_netconn_do_close+0x134>
 8018fba:	f009 ffd5 	bl	8022f68 <sys_arch_protect>
 8018fbe:	60f8      	str	r0, [r7, #12]
 8018fc0:	697b      	ldr	r3, [r7, #20]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018fc8:	f113 0f0c 	cmn.w	r3, #12
 8018fcc:	db05      	blt.n	8018fda <lwip_netconn_do_close+0x12a>
 8018fce:	697b      	ldr	r3, [r7, #20]
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	697a      	ldr	r2, [r7, #20]
 8018fd4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8018fd8:	721a      	strb	r2, [r3, #8]
 8018fda:	68f8      	ldr	r0, [r7, #12]
 8018fdc:	f009 ffd2 	bl	8022f84 <sys_arch_unprotect>
 8018fe0:	e000      	b.n	8018fe4 <lwip_netconn_do_close+0x134>
      return;
 8018fe2:	bf00      	nop
}
 8018fe4:	3718      	adds	r7, #24
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	bd80      	pop	{r7, pc}
 8018fea:	bf00      	nop
 8018fec:	08026d48 	.word	0x08026d48
 8018ff0:	0802702c 	.word	0x0802702c
 8018ff4:	08026da0 	.word	0x08026da0
 8018ff8:	08027048 	.word	0x08027048
 8018ffc:	2000a25c 	.word	0x2000a25c

08019000 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b082      	sub	sp, #8
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d013      	beq.n	8019036 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d00b      	beq.n	801902e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	4618      	mov	r0, r3
 801901c:	f003 fec6 	bl	801cdac <pbuf_free>
      buf->p = buf->ptr = NULL;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2200      	movs	r2, #0
 8019024:	605a      	str	r2, [r3, #4]
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	685a      	ldr	r2, [r3, #4]
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801902e:	6879      	ldr	r1, [r7, #4]
 8019030:	2005      	movs	r0, #5
 8019032:	f003 f969 	bl	801c308 <memp_free>
  }
}
 8019036:	bf00      	nop
 8019038:	3708      	adds	r7, #8
 801903a:	46bd      	mov	sp, r7
 801903c:	bd80      	pop	{r7, pc}
	...

08019040 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8019040:	b580      	push	{r7, lr}
 8019042:	b084      	sub	sp, #16
 8019044:	af00      	add	r7, sp, #0
 8019046:	60f8      	str	r0, [r7, #12]
 8019048:	60b9      	str	r1, [r7, #8]
 801904a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d108      	bne.n	8019064 <netbuf_data+0x24>
 8019052:	4b1b      	ldr	r3, [pc, #108]	; (80190c0 <netbuf_data+0x80>)
 8019054:	22c2      	movs	r2, #194	; 0xc2
 8019056:	491b      	ldr	r1, [pc, #108]	; (80190c4 <netbuf_data+0x84>)
 8019058:	481b      	ldr	r0, [pc, #108]	; (80190c8 <netbuf_data+0x88>)
 801905a:	f00c ff45 	bl	8025ee8 <iprintf>
 801905e:	f06f 030f 	mvn.w	r3, #15
 8019062:	e029      	b.n	80190b8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d108      	bne.n	801907c <netbuf_data+0x3c>
 801906a:	4b15      	ldr	r3, [pc, #84]	; (80190c0 <netbuf_data+0x80>)
 801906c:	22c3      	movs	r2, #195	; 0xc3
 801906e:	4917      	ldr	r1, [pc, #92]	; (80190cc <netbuf_data+0x8c>)
 8019070:	4815      	ldr	r0, [pc, #84]	; (80190c8 <netbuf_data+0x88>)
 8019072:	f00c ff39 	bl	8025ee8 <iprintf>
 8019076:	f06f 030f 	mvn.w	r3, #15
 801907a:	e01d      	b.n	80190b8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	2b00      	cmp	r3, #0
 8019080:	d108      	bne.n	8019094 <netbuf_data+0x54>
 8019082:	4b0f      	ldr	r3, [pc, #60]	; (80190c0 <netbuf_data+0x80>)
 8019084:	22c4      	movs	r2, #196	; 0xc4
 8019086:	4912      	ldr	r1, [pc, #72]	; (80190d0 <netbuf_data+0x90>)
 8019088:	480f      	ldr	r0, [pc, #60]	; (80190c8 <netbuf_data+0x88>)
 801908a:	f00c ff2d 	bl	8025ee8 <iprintf>
 801908e:	f06f 030f 	mvn.w	r3, #15
 8019092:	e011      	b.n	80190b8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	685b      	ldr	r3, [r3, #4]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d102      	bne.n	80190a2 <netbuf_data+0x62>
    return ERR_BUF;
 801909c:	f06f 0301 	mvn.w	r3, #1
 80190a0:	e00a      	b.n	80190b8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	685b      	ldr	r3, [r3, #4]
 80190a6:	685a      	ldr	r2, [r3, #4]
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	685b      	ldr	r3, [r3, #4]
 80190b0:	895a      	ldrh	r2, [r3, #10]
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80190b6:	2300      	movs	r3, #0
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	3710      	adds	r7, #16
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	080271ac 	.word	0x080271ac
 80190c4:	080272b4 	.word	0x080272b4
 80190c8:	080271fc 	.word	0x080271fc
 80190cc:	080272d0 	.word	0x080272d0
 80190d0:	080272f0 	.word	0x080272f0

080190d4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b082      	sub	sp, #8
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d108      	bne.n	80190f4 <netbuf_next+0x20>
 80190e2:	4b11      	ldr	r3, [pc, #68]	; (8019128 <netbuf_next+0x54>)
 80190e4:	22dc      	movs	r2, #220	; 0xdc
 80190e6:	4911      	ldr	r1, [pc, #68]	; (801912c <netbuf_next+0x58>)
 80190e8:	4811      	ldr	r0, [pc, #68]	; (8019130 <netbuf_next+0x5c>)
 80190ea:	f00c fefd 	bl	8025ee8 <iprintf>
 80190ee:	f04f 33ff 	mov.w	r3, #4294967295
 80190f2:	e014      	b.n	801911e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	685b      	ldr	r3, [r3, #4]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d102      	bne.n	8019104 <netbuf_next+0x30>
    return -1;
 80190fe:	f04f 33ff 	mov.w	r3, #4294967295
 8019102:	e00c      	b.n	801911e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	685b      	ldr	r3, [r3, #4]
 8019108:	681a      	ldr	r2, [r3, #0]
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	685b      	ldr	r3, [r3, #4]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d101      	bne.n	801911c <netbuf_next+0x48>
    return 1;
 8019118:	2301      	movs	r3, #1
 801911a:	e000      	b.n	801911e <netbuf_next+0x4a>
  }
  return 0;
 801911c:	2300      	movs	r3, #0
}
 801911e:	4618      	mov	r0, r3
 8019120:	3708      	adds	r7, #8
 8019122:	46bd      	mov	sp, r7
 8019124:	bd80      	pop	{r7, pc}
 8019126:	bf00      	nop
 8019128:	080271ac 	.word	0x080271ac
 801912c:	0802730c 	.word	0x0802730c
 8019130:	080271fc 	.word	0x080271fc

08019134 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8019134:	b580      	push	{r7, lr}
 8019136:	b084      	sub	sp, #16
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 801913c:	4b29      	ldr	r3, [pc, #164]	; (80191e4 <tcpip_thread+0xb0>)
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d005      	beq.n	8019150 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8019144:	4b27      	ldr	r3, [pc, #156]	; (80191e4 <tcpip_thread+0xb0>)
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	4a27      	ldr	r2, [pc, #156]	; (80191e8 <tcpip_thread+0xb4>)
 801914a:	6812      	ldr	r2, [r2, #0]
 801914c:	4610      	mov	r0, r2
 801914e:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8019150:	4826      	ldr	r0, [pc, #152]	; (80191ec <tcpip_thread+0xb8>)
 8019152:	f009 fec7 	bl	8022ee4 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8019156:	4825      	ldr	r0, [pc, #148]	; (80191ec <tcpip_thread+0xb8>)
 8019158:	f009 fed3 	bl	8022f02 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 801915c:	f107 030c 	add.w	r3, r7, #12
 8019160:	4619      	mov	r1, r3
 8019162:	4823      	ldr	r0, [pc, #140]	; (80191f0 <tcpip_thread+0xbc>)
 8019164:	f009 fc26 	bl	80229b4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8019168:	4820      	ldr	r0, [pc, #128]	; (80191ec <tcpip_thread+0xb8>)
 801916a:	f009 febb 	bl	8022ee4 <sys_mutex_lock>
    if (msg == NULL) {
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d106      	bne.n	8019182 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8019174:	4b1f      	ldr	r3, [pc, #124]	; (80191f4 <tcpip_thread+0xc0>)
 8019176:	2269      	movs	r2, #105	; 0x69
 8019178:	491f      	ldr	r1, [pc, #124]	; (80191f8 <tcpip_thread+0xc4>)
 801917a:	4820      	ldr	r0, [pc, #128]	; (80191fc <tcpip_thread+0xc8>)
 801917c:	f00c feb4 	bl	8025ee8 <iprintf>
      continue;
 8019180:	e02f      	b.n	80191e2 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	781b      	ldrb	r3, [r3, #0]
 8019186:	2b03      	cmp	r3, #3
 8019188:	d011      	beq.n	80191ae <tcpip_thread+0x7a>
 801918a:	2b04      	cmp	r3, #4
 801918c:	d01b      	beq.n	80191c6 <tcpip_thread+0x92>
 801918e:	2b02      	cmp	r3, #2
 8019190:	d120      	bne.n	80191d4 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	68db      	ldr	r3, [r3, #12]
 8019196:	68fa      	ldr	r2, [r7, #12]
 8019198:	6850      	ldr	r0, [r2, #4]
 801919a:	68fa      	ldr	r2, [r7, #12]
 801919c:	6892      	ldr	r2, [r2, #8]
 801919e:	4611      	mov	r1, r2
 80191a0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	4619      	mov	r1, r3
 80191a6:	2008      	movs	r0, #8
 80191a8:	f003 f8ae 	bl	801c308 <memp_free>
      break;
 80191ac:	e019      	b.n	80191e2 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	685b      	ldr	r3, [r3, #4]
 80191b2:	68fa      	ldr	r2, [r7, #12]
 80191b4:	6892      	ldr	r2, [r2, #8]
 80191b6:	4610      	mov	r0, r2
 80191b8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	4619      	mov	r1, r3
 80191be:	2007      	movs	r0, #7
 80191c0:	f003 f8a2 	bl	801c308 <memp_free>
      break;
 80191c4:	e00d      	b.n	80191e2 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	685b      	ldr	r3, [r3, #4]
 80191ca:	68fa      	ldr	r2, [r7, #12]
 80191cc:	6892      	ldr	r2, [r2, #8]
 80191ce:	4610      	mov	r0, r2
 80191d0:	4798      	blx	r3
      break;
 80191d2:	e006      	b.n	80191e2 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80191d4:	4b07      	ldr	r3, [pc, #28]	; (80191f4 <tcpip_thread+0xc0>)
 80191d6:	229b      	movs	r2, #155	; 0x9b
 80191d8:	4907      	ldr	r1, [pc, #28]	; (80191f8 <tcpip_thread+0xc4>)
 80191da:	4808      	ldr	r0, [pc, #32]	; (80191fc <tcpip_thread+0xc8>)
 80191dc:	f00c fe84 	bl	8025ee8 <iprintf>
      break;
 80191e0:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 80191e2:	e7b8      	b.n	8019156 <tcpip_thread+0x22>
 80191e4:	20009390 	.word	0x20009390
 80191e8:	20009394 	.word	0x20009394
 80191ec:	2000a25c 	.word	0x2000a25c
 80191f0:	20009398 	.word	0x20009398
 80191f4:	08027344 	.word	0x08027344
 80191f8:	08027374 	.word	0x08027374
 80191fc:	08027394 	.word	0x08027394

08019200 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b086      	sub	sp, #24
 8019204:	af00      	add	r7, sp, #0
 8019206:	60f8      	str	r0, [r7, #12]
 8019208:	60b9      	str	r1, [r7, #8]
 801920a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 801920c:	481a      	ldr	r0, [pc, #104]	; (8019278 <tcpip_inpkt+0x78>)
 801920e:	f009 fd8f 	bl	8022d30 <sys_mbox_valid>
 8019212:	4603      	mov	r3, r0
 8019214:	2b00      	cmp	r3, #0
 8019216:	d105      	bne.n	8019224 <tcpip_inpkt+0x24>
 8019218:	4b18      	ldr	r3, [pc, #96]	; (801927c <tcpip_inpkt+0x7c>)
 801921a:	22b5      	movs	r2, #181	; 0xb5
 801921c:	4918      	ldr	r1, [pc, #96]	; (8019280 <tcpip_inpkt+0x80>)
 801921e:	4819      	ldr	r0, [pc, #100]	; (8019284 <tcpip_inpkt+0x84>)
 8019220:	f00c fe62 	bl	8025ee8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8019224:	2008      	movs	r0, #8
 8019226:	f003 f81d 	bl	801c264 <memp_malloc>
 801922a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	2b00      	cmp	r3, #0
 8019230:	d102      	bne.n	8019238 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8019232:	f04f 33ff 	mov.w	r3, #4294967295
 8019236:	e01a      	b.n	801926e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8019238:	697b      	ldr	r3, [r7, #20]
 801923a:	2202      	movs	r2, #2
 801923c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801923e:	697b      	ldr	r3, [r7, #20]
 8019240:	68fa      	ldr	r2, [r7, #12]
 8019242:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	68ba      	ldr	r2, [r7, #8]
 8019248:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801924a:	697b      	ldr	r3, [r7, #20]
 801924c:	687a      	ldr	r2, [r7, #4]
 801924e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8019250:	6979      	ldr	r1, [r7, #20]
 8019252:	4809      	ldr	r0, [pc, #36]	; (8019278 <tcpip_inpkt+0x78>)
 8019254:	f009 fcf7 	bl	8022c46 <sys_mbox_trypost>
 8019258:	4603      	mov	r3, r0
 801925a:	2b00      	cmp	r3, #0
 801925c:	d006      	beq.n	801926c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801925e:	6979      	ldr	r1, [r7, #20]
 8019260:	2008      	movs	r0, #8
 8019262:	f003 f851 	bl	801c308 <memp_free>
    return ERR_MEM;
 8019266:	f04f 33ff 	mov.w	r3, #4294967295
 801926a:	e000      	b.n	801926e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801926c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801926e:	4618      	mov	r0, r3
 8019270:	3718      	adds	r7, #24
 8019272:	46bd      	mov	sp, r7
 8019274:	bd80      	pop	{r7, pc}
 8019276:	bf00      	nop
 8019278:	20009398 	.word	0x20009398
 801927c:	08027344 	.word	0x08027344
 8019280:	080273bc 	.word	0x080273bc
 8019284:	08027394 	.word	0x08027394

08019288 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b082      	sub	sp, #8
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
 8019290:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8019292:	683b      	ldr	r3, [r7, #0]
 8019294:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8019298:	f003 0318 	and.w	r3, r3, #24
 801929c:	2b00      	cmp	r3, #0
 801929e:	d006      	beq.n	80192ae <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80192a0:	4a08      	ldr	r2, [pc, #32]	; (80192c4 <tcpip_input+0x3c>)
 80192a2:	6839      	ldr	r1, [r7, #0]
 80192a4:	6878      	ldr	r0, [r7, #4]
 80192a6:	f7ff ffab 	bl	8019200 <tcpip_inpkt>
 80192aa:	4603      	mov	r3, r0
 80192ac:	e005      	b.n	80192ba <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 80192ae:	4a06      	ldr	r2, [pc, #24]	; (80192c8 <tcpip_input+0x40>)
 80192b0:	6839      	ldr	r1, [r7, #0]
 80192b2:	6878      	ldr	r0, [r7, #4]
 80192b4:	f7ff ffa4 	bl	8019200 <tcpip_inpkt>
 80192b8:	4603      	mov	r3, r0
}
 80192ba:	4618      	mov	r0, r3
 80192bc:	3708      	adds	r7, #8
 80192be:	46bd      	mov	sp, r7
 80192c0:	bd80      	pop	{r7, pc}
 80192c2:	bf00      	nop
 80192c4:	08022a01 	.word	0x08022a01
 80192c8:	0801a741 	.word	0x0801a741

080192cc <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b086      	sub	sp, #24
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	60f8      	str	r0, [r7, #12]
 80192d4:	60b9      	str	r1, [r7, #8]
 80192d6:	4613      	mov	r3, r2
 80192d8:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80192da:	481d      	ldr	r0, [pc, #116]	; (8019350 <tcpip_callback_with_block+0x84>)
 80192dc:	f009 fd28 	bl	8022d30 <sys_mbox_valid>
 80192e0:	4603      	mov	r3, r0
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d105      	bne.n	80192f2 <tcpip_callback_with_block+0x26>
 80192e6:	4b1b      	ldr	r3, [pc, #108]	; (8019354 <tcpip_callback_with_block+0x88>)
 80192e8:	22ee      	movs	r2, #238	; 0xee
 80192ea:	491b      	ldr	r1, [pc, #108]	; (8019358 <tcpip_callback_with_block+0x8c>)
 80192ec:	481b      	ldr	r0, [pc, #108]	; (801935c <tcpip_callback_with_block+0x90>)
 80192ee:	f00c fdfb 	bl	8025ee8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80192f2:	2007      	movs	r0, #7
 80192f4:	f002 ffb6 	bl	801c264 <memp_malloc>
 80192f8:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80192fa:	697b      	ldr	r3, [r7, #20]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d102      	bne.n	8019306 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8019300:	f04f 33ff 	mov.w	r3, #4294967295
 8019304:	e01f      	b.n	8019346 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8019306:	697b      	ldr	r3, [r7, #20]
 8019308:	2203      	movs	r2, #3
 801930a:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801930c:	697b      	ldr	r3, [r7, #20]
 801930e:	68fa      	ldr	r2, [r7, #12]
 8019310:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8019312:	697b      	ldr	r3, [r7, #20]
 8019314:	68ba      	ldr	r2, [r7, #8]
 8019316:	609a      	str	r2, [r3, #8]
  if (block) {
 8019318:	79fb      	ldrb	r3, [r7, #7]
 801931a:	2b00      	cmp	r3, #0
 801931c:	d004      	beq.n	8019328 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 801931e:	6979      	ldr	r1, [r7, #20]
 8019320:	480b      	ldr	r0, [pc, #44]	; (8019350 <tcpip_callback_with_block+0x84>)
 8019322:	f009 fc7b 	bl	8022c1c <sys_mbox_post>
 8019326:	e00d      	b.n	8019344 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8019328:	6979      	ldr	r1, [r7, #20]
 801932a:	4809      	ldr	r0, [pc, #36]	; (8019350 <tcpip_callback_with_block+0x84>)
 801932c:	f009 fc8b 	bl	8022c46 <sys_mbox_trypost>
 8019330:	4603      	mov	r3, r0
 8019332:	2b00      	cmp	r3, #0
 8019334:	d006      	beq.n	8019344 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019336:	6979      	ldr	r1, [r7, #20]
 8019338:	2007      	movs	r0, #7
 801933a:	f002 ffe5 	bl	801c308 <memp_free>
      return ERR_MEM;
 801933e:	f04f 33ff 	mov.w	r3, #4294967295
 8019342:	e000      	b.n	8019346 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8019344:	2300      	movs	r3, #0
}
 8019346:	4618      	mov	r0, r3
 8019348:	3718      	adds	r7, #24
 801934a:	46bd      	mov	sp, r7
 801934c:	bd80      	pop	{r7, pc}
 801934e:	bf00      	nop
 8019350:	20009398 	.word	0x20009398
 8019354:	08027344 	.word	0x08027344
 8019358:	080273bc 	.word	0x080273bc
 801935c:	08027394 	.word	0x08027394

08019360 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b084      	sub	sp, #16
 8019364:	af00      	add	r7, sp, #0
 8019366:	60f8      	str	r0, [r7, #12]
 8019368:	60b9      	str	r1, [r7, #8]
 801936a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801936c:	4806      	ldr	r0, [pc, #24]	; (8019388 <tcpip_send_msg_wait_sem+0x28>)
 801936e:	f009 fdb9 	bl	8022ee4 <sys_mutex_lock>
  fn(apimsg);
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	68b8      	ldr	r0, [r7, #8]
 8019376:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8019378:	4803      	ldr	r0, [pc, #12]	; (8019388 <tcpip_send_msg_wait_sem+0x28>)
 801937a:	f009 fdc2 	bl	8022f02 <sys_mutex_unlock>
  return ERR_OK;
 801937e:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8019380:	4618      	mov	r0, r3
 8019382:	3710      	adds	r7, #16
 8019384:	46bd      	mov	sp, r7
 8019386:	bd80      	pop	{r7, pc}
 8019388:	2000a25c 	.word	0x2000a25c

0801938c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801938c:	b580      	push	{r7, lr}
 801938e:	b084      	sub	sp, #16
 8019390:	af02      	add	r7, sp, #8
 8019392:	6078      	str	r0, [r7, #4]
 8019394:	6039      	str	r1, [r7, #0]
  lwip_init();
 8019396:	f000 f8b2 	bl	80194fe <lwip_init>

  tcpip_init_done = initfunc;
 801939a:	4a17      	ldr	r2, [pc, #92]	; (80193f8 <tcpip_init+0x6c>)
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80193a0:	4a16      	ldr	r2, [pc, #88]	; (80193fc <tcpip_init+0x70>)
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80193a6:	2106      	movs	r1, #6
 80193a8:	4815      	ldr	r0, [pc, #84]	; (8019400 <tcpip_init+0x74>)
 80193aa:	f009 fc03 	bl	8022bb4 <sys_mbox_new>
 80193ae:	4603      	mov	r3, r0
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d006      	beq.n	80193c2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80193b4:	4b13      	ldr	r3, [pc, #76]	; (8019404 <tcpip_init+0x78>)
 80193b6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80193ba:	4913      	ldr	r1, [pc, #76]	; (8019408 <tcpip_init+0x7c>)
 80193bc:	4813      	ldr	r0, [pc, #76]	; (801940c <tcpip_init+0x80>)
 80193be:	f00c fd93 	bl	8025ee8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80193c2:	4813      	ldr	r0, [pc, #76]	; (8019410 <tcpip_init+0x84>)
 80193c4:	f009 fd72 	bl	8022eac <sys_mutex_new>
 80193c8:	4603      	mov	r3, r0
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d006      	beq.n	80193dc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80193ce:	4b0d      	ldr	r3, [pc, #52]	; (8019404 <tcpip_init+0x78>)
 80193d0:	f240 12d9 	movw	r2, #473	; 0x1d9
 80193d4:	490f      	ldr	r1, [pc, #60]	; (8019414 <tcpip_init+0x88>)
 80193d6:	480d      	ldr	r0, [pc, #52]	; (801940c <tcpip_init+0x80>)
 80193d8:	f00c fd86 	bl	8025ee8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80193dc:	2302      	movs	r3, #2
 80193de:	9300      	str	r3, [sp, #0]
 80193e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80193e4:	2200      	movs	r2, #0
 80193e6:	490c      	ldr	r1, [pc, #48]	; (8019418 <tcpip_init+0x8c>)
 80193e8:	480c      	ldr	r0, [pc, #48]	; (801941c <tcpip_init+0x90>)
 80193ea:	f009 fd97 	bl	8022f1c <sys_thread_new>
}
 80193ee:	bf00      	nop
 80193f0:	3708      	adds	r7, #8
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}
 80193f6:	bf00      	nop
 80193f8:	20009390 	.word	0x20009390
 80193fc:	20009394 	.word	0x20009394
 8019400:	20009398 	.word	0x20009398
 8019404:	08027344 	.word	0x08027344
 8019408:	080273cc 	.word	0x080273cc
 801940c:	08027394 	.word	0x08027394
 8019410:	2000a25c 	.word	0x2000a25c
 8019414:	080273f0 	.word	0x080273f0
 8019418:	08019135 	.word	0x08019135
 801941c:	08027414 	.word	0x08027414

08019420 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b084      	sub	sp, #16
 8019424:	af00      	add	r7, sp, #0
 8019426:	6078      	str	r0, [r7, #4]
 8019428:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d002      	beq.n	8019436 <fs_open+0x16>
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d102      	bne.n	801943c <fs_open+0x1c>
     return ERR_ARG;
 8019436:	f06f 030f 	mvn.w	r3, #15
 801943a:	e028      	b.n	801948e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 801943c:	4b16      	ldr	r3, [pc, #88]	; (8019498 <fs_open+0x78>)
 801943e:	60fb      	str	r3, [r7, #12]
 8019440:	e020      	b.n	8019484 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	685b      	ldr	r3, [r3, #4]
 8019446:	4619      	mov	r1, r3
 8019448:	6838      	ldr	r0, [r7, #0]
 801944a:	f7f6 fdf9 	bl	8010040 <strcmp>
 801944e:	4603      	mov	r3, r0
 8019450:	2b00      	cmp	r3, #0
 8019452:	d114      	bne.n	801947e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	689a      	ldr	r2, [r3, #8]
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	68da      	ldr	r2, [r3, #12]
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	68da      	ldr	r2, [r3, #12]
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	2200      	movs	r2, #0
 8019470:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	7c1a      	ldrb	r2, [r3, #16]
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 801947a:	2300      	movs	r3, #0
 801947c:	e007      	b.n	801948e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	60fb      	str	r3, [r7, #12]
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d1db      	bne.n	8019442 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 801948a:	f06f 0305 	mvn.w	r3, #5
}
 801948e:	4618      	mov	r0, r3
 8019490:	3710      	adds	r7, #16
 8019492:	46bd      	mov	sp, r7
 8019494:	bd80      	pop	{r7, pc}
 8019496:	bf00      	nop
 8019498:	0802b5d4 	.word	0x0802b5d4

0801949c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 801949c:	b480      	push	{r7}
 801949e:	b083      	sub	sp, #12
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80194a4:	bf00      	nop
 80194a6:	370c      	adds	r7, #12
 80194a8:	46bd      	mov	sp, r7
 80194aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ae:	4770      	bx	lr

080194b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80194b0:	b480      	push	{r7}
 80194b2:	b083      	sub	sp, #12
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	4603      	mov	r3, r0
 80194b8:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80194ba:	88fb      	ldrh	r3, [r7, #6]
 80194bc:	ba5b      	rev16	r3, r3
 80194be:	b29b      	uxth	r3, r3
}
 80194c0:	4618      	mov	r0, r3
 80194c2:	370c      	adds	r7, #12
 80194c4:	46bd      	mov	sp, r7
 80194c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ca:	4770      	bx	lr

080194cc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80194cc:	b480      	push	{r7}
 80194ce:	b083      	sub	sp, #12
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	061a      	lsls	r2, r3, #24
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	021b      	lsls	r3, r3, #8
 80194dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80194e0:	431a      	orrs	r2, r3
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	0a1b      	lsrs	r3, r3, #8
 80194e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80194ea:	431a      	orrs	r2, r3
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	0e1b      	lsrs	r3, r3, #24
 80194f0:	4313      	orrs	r3, r2
}
 80194f2:	4618      	mov	r0, r3
 80194f4:	370c      	adds	r7, #12
 80194f6:	46bd      	mov	sp, r7
 80194f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194fc:	4770      	bx	lr

080194fe <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80194fe:	b580      	push	{r7, lr}
 8019500:	b082      	sub	sp, #8
 8019502:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8019504:	2300      	movs	r3, #0
 8019506:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8019508:	f009 fcc2 	bl	8022e90 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801950c:	f002 fb92 	bl	801bc34 <mem_init>
  memp_init();
 8019510:	f002 fe5c 	bl	801c1cc <memp_init>
  pbuf_init();
  netif_init();
 8019514:	f002 ff22 	bl	801c35c <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8019518:	f003 febe 	bl	801d298 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 801951c:	f009 f906 	bl	802272c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8019520:	bf00      	nop
 8019522:	3708      	adds	r7, #8
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}

08019528 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b082      	sub	sp, #8
 801952c:	af00      	add	r7, sp, #0
 801952e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019530:	4915      	ldr	r1, [pc, #84]	; (8019588 <etharp_free_entry+0x60>)
 8019532:	687a      	ldr	r2, [r7, #4]
 8019534:	4613      	mov	r3, r2
 8019536:	005b      	lsls	r3, r3, #1
 8019538:	4413      	add	r3, r2
 801953a:	00db      	lsls	r3, r3, #3
 801953c:	440b      	add	r3, r1
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d013      	beq.n	801956c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019544:	4910      	ldr	r1, [pc, #64]	; (8019588 <etharp_free_entry+0x60>)
 8019546:	687a      	ldr	r2, [r7, #4]
 8019548:	4613      	mov	r3, r2
 801954a:	005b      	lsls	r3, r3, #1
 801954c:	4413      	add	r3, r2
 801954e:	00db      	lsls	r3, r3, #3
 8019550:	440b      	add	r3, r1
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	4618      	mov	r0, r3
 8019556:	f003 fc29 	bl	801cdac <pbuf_free>
    arp_table[i].q = NULL;
 801955a:	490b      	ldr	r1, [pc, #44]	; (8019588 <etharp_free_entry+0x60>)
 801955c:	687a      	ldr	r2, [r7, #4]
 801955e:	4613      	mov	r3, r2
 8019560:	005b      	lsls	r3, r3, #1
 8019562:	4413      	add	r3, r2
 8019564:	00db      	lsls	r3, r3, #3
 8019566:	440b      	add	r3, r1
 8019568:	2200      	movs	r2, #0
 801956a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801956c:	4906      	ldr	r1, [pc, #24]	; (8019588 <etharp_free_entry+0x60>)
 801956e:	687a      	ldr	r2, [r7, #4]
 8019570:	4613      	mov	r3, r2
 8019572:	005b      	lsls	r3, r3, #1
 8019574:	4413      	add	r3, r2
 8019576:	00db      	lsls	r3, r3, #3
 8019578:	440b      	add	r3, r1
 801957a:	3314      	adds	r3, #20
 801957c:	2200      	movs	r2, #0
 801957e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019580:	bf00      	nop
 8019582:	3708      	adds	r7, #8
 8019584:	46bd      	mov	sp, r7
 8019586:	bd80      	pop	{r7, pc}
 8019588:	2000939c 	.word	0x2000939c

0801958c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801958c:	b580      	push	{r7, lr}
 801958e:	b082      	sub	sp, #8
 8019590:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019592:	2300      	movs	r3, #0
 8019594:	71fb      	strb	r3, [r7, #7]
 8019596:	e096      	b.n	80196c6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019598:	79fa      	ldrb	r2, [r7, #7]
 801959a:	494f      	ldr	r1, [pc, #316]	; (80196d8 <etharp_tmr+0x14c>)
 801959c:	4613      	mov	r3, r2
 801959e:	005b      	lsls	r3, r3, #1
 80195a0:	4413      	add	r3, r2
 80195a2:	00db      	lsls	r3, r3, #3
 80195a4:	440b      	add	r3, r1
 80195a6:	3314      	adds	r3, #20
 80195a8:	781b      	ldrb	r3, [r3, #0]
 80195aa:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80195ac:	79bb      	ldrb	r3, [r7, #6]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	f000 8086 	beq.w	80196c0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80195b4:	79fa      	ldrb	r2, [r7, #7]
 80195b6:	4948      	ldr	r1, [pc, #288]	; (80196d8 <etharp_tmr+0x14c>)
 80195b8:	4613      	mov	r3, r2
 80195ba:	005b      	lsls	r3, r3, #1
 80195bc:	4413      	add	r3, r2
 80195be:	00db      	lsls	r3, r3, #3
 80195c0:	440b      	add	r3, r1
 80195c2:	3312      	adds	r3, #18
 80195c4:	881b      	ldrh	r3, [r3, #0]
 80195c6:	3301      	adds	r3, #1
 80195c8:	b298      	uxth	r0, r3
 80195ca:	4943      	ldr	r1, [pc, #268]	; (80196d8 <etharp_tmr+0x14c>)
 80195cc:	4613      	mov	r3, r2
 80195ce:	005b      	lsls	r3, r3, #1
 80195d0:	4413      	add	r3, r2
 80195d2:	00db      	lsls	r3, r3, #3
 80195d4:	440b      	add	r3, r1
 80195d6:	3312      	adds	r3, #18
 80195d8:	4602      	mov	r2, r0
 80195da:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80195dc:	79fa      	ldrb	r2, [r7, #7]
 80195de:	493e      	ldr	r1, [pc, #248]	; (80196d8 <etharp_tmr+0x14c>)
 80195e0:	4613      	mov	r3, r2
 80195e2:	005b      	lsls	r3, r3, #1
 80195e4:	4413      	add	r3, r2
 80195e6:	00db      	lsls	r3, r3, #3
 80195e8:	440b      	add	r3, r1
 80195ea:	3312      	adds	r3, #18
 80195ec:	881b      	ldrh	r3, [r3, #0]
 80195ee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80195f2:	d215      	bcs.n	8019620 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80195f4:	79fa      	ldrb	r2, [r7, #7]
 80195f6:	4938      	ldr	r1, [pc, #224]	; (80196d8 <etharp_tmr+0x14c>)
 80195f8:	4613      	mov	r3, r2
 80195fa:	005b      	lsls	r3, r3, #1
 80195fc:	4413      	add	r3, r2
 80195fe:	00db      	lsls	r3, r3, #3
 8019600:	440b      	add	r3, r1
 8019602:	3314      	adds	r3, #20
 8019604:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019606:	2b01      	cmp	r3, #1
 8019608:	d10f      	bne.n	801962a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801960a:	79fa      	ldrb	r2, [r7, #7]
 801960c:	4932      	ldr	r1, [pc, #200]	; (80196d8 <etharp_tmr+0x14c>)
 801960e:	4613      	mov	r3, r2
 8019610:	005b      	lsls	r3, r3, #1
 8019612:	4413      	add	r3, r2
 8019614:	00db      	lsls	r3, r3, #3
 8019616:	440b      	add	r3, r1
 8019618:	3312      	adds	r3, #18
 801961a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801961c:	2b04      	cmp	r3, #4
 801961e:	d904      	bls.n	801962a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019620:	79fb      	ldrb	r3, [r7, #7]
 8019622:	4618      	mov	r0, r3
 8019624:	f7ff ff80 	bl	8019528 <etharp_free_entry>
 8019628:	e04a      	b.n	80196c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801962a:	79fa      	ldrb	r2, [r7, #7]
 801962c:	492a      	ldr	r1, [pc, #168]	; (80196d8 <etharp_tmr+0x14c>)
 801962e:	4613      	mov	r3, r2
 8019630:	005b      	lsls	r3, r3, #1
 8019632:	4413      	add	r3, r2
 8019634:	00db      	lsls	r3, r3, #3
 8019636:	440b      	add	r3, r1
 8019638:	3314      	adds	r3, #20
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	2b03      	cmp	r3, #3
 801963e:	d10a      	bne.n	8019656 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019640:	79fa      	ldrb	r2, [r7, #7]
 8019642:	4925      	ldr	r1, [pc, #148]	; (80196d8 <etharp_tmr+0x14c>)
 8019644:	4613      	mov	r3, r2
 8019646:	005b      	lsls	r3, r3, #1
 8019648:	4413      	add	r3, r2
 801964a:	00db      	lsls	r3, r3, #3
 801964c:	440b      	add	r3, r1
 801964e:	3314      	adds	r3, #20
 8019650:	2204      	movs	r2, #4
 8019652:	701a      	strb	r2, [r3, #0]
 8019654:	e034      	b.n	80196c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019656:	79fa      	ldrb	r2, [r7, #7]
 8019658:	491f      	ldr	r1, [pc, #124]	; (80196d8 <etharp_tmr+0x14c>)
 801965a:	4613      	mov	r3, r2
 801965c:	005b      	lsls	r3, r3, #1
 801965e:	4413      	add	r3, r2
 8019660:	00db      	lsls	r3, r3, #3
 8019662:	440b      	add	r3, r1
 8019664:	3314      	adds	r3, #20
 8019666:	781b      	ldrb	r3, [r3, #0]
 8019668:	2b04      	cmp	r3, #4
 801966a:	d10a      	bne.n	8019682 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801966c:	79fa      	ldrb	r2, [r7, #7]
 801966e:	491a      	ldr	r1, [pc, #104]	; (80196d8 <etharp_tmr+0x14c>)
 8019670:	4613      	mov	r3, r2
 8019672:	005b      	lsls	r3, r3, #1
 8019674:	4413      	add	r3, r2
 8019676:	00db      	lsls	r3, r3, #3
 8019678:	440b      	add	r3, r1
 801967a:	3314      	adds	r3, #20
 801967c:	2202      	movs	r2, #2
 801967e:	701a      	strb	r2, [r3, #0]
 8019680:	e01e      	b.n	80196c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019682:	79fa      	ldrb	r2, [r7, #7]
 8019684:	4914      	ldr	r1, [pc, #80]	; (80196d8 <etharp_tmr+0x14c>)
 8019686:	4613      	mov	r3, r2
 8019688:	005b      	lsls	r3, r3, #1
 801968a:	4413      	add	r3, r2
 801968c:	00db      	lsls	r3, r3, #3
 801968e:	440b      	add	r3, r1
 8019690:	3314      	adds	r3, #20
 8019692:	781b      	ldrb	r3, [r3, #0]
 8019694:	2b01      	cmp	r3, #1
 8019696:	d113      	bne.n	80196c0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019698:	79fa      	ldrb	r2, [r7, #7]
 801969a:	490f      	ldr	r1, [pc, #60]	; (80196d8 <etharp_tmr+0x14c>)
 801969c:	4613      	mov	r3, r2
 801969e:	005b      	lsls	r3, r3, #1
 80196a0:	4413      	add	r3, r2
 80196a2:	00db      	lsls	r3, r3, #3
 80196a4:	440b      	add	r3, r1
 80196a6:	3308      	adds	r3, #8
 80196a8:	6818      	ldr	r0, [r3, #0]
 80196aa:	79fa      	ldrb	r2, [r7, #7]
 80196ac:	4613      	mov	r3, r2
 80196ae:	005b      	lsls	r3, r3, #1
 80196b0:	4413      	add	r3, r2
 80196b2:	00db      	lsls	r3, r3, #3
 80196b4:	4a08      	ldr	r2, [pc, #32]	; (80196d8 <etharp_tmr+0x14c>)
 80196b6:	4413      	add	r3, r2
 80196b8:	3304      	adds	r3, #4
 80196ba:	4619      	mov	r1, r3
 80196bc:	f000 fe38 	bl	801a330 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80196c0:	79fb      	ldrb	r3, [r7, #7]
 80196c2:	3301      	adds	r3, #1
 80196c4:	71fb      	strb	r3, [r7, #7]
 80196c6:	79fb      	ldrb	r3, [r7, #7]
 80196c8:	2b09      	cmp	r3, #9
 80196ca:	f67f af65 	bls.w	8019598 <etharp_tmr+0xc>
      }
    }
  }
}
 80196ce:	bf00      	nop
 80196d0:	3708      	adds	r7, #8
 80196d2:	46bd      	mov	sp, r7
 80196d4:	bd80      	pop	{r7, pc}
 80196d6:	bf00      	nop
 80196d8:	2000939c 	.word	0x2000939c

080196dc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80196dc:	b580      	push	{r7, lr}
 80196de:	b088      	sub	sp, #32
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	60f8      	str	r0, [r7, #12]
 80196e4:	460b      	mov	r3, r1
 80196e6:	607a      	str	r2, [r7, #4]
 80196e8:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80196ea:	230a      	movs	r3, #10
 80196ec:	77fb      	strb	r3, [r7, #31]
 80196ee:	230a      	movs	r3, #10
 80196f0:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80196f2:	230a      	movs	r3, #10
 80196f4:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80196f6:	2300      	movs	r3, #0
 80196f8:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80196fa:	230a      	movs	r3, #10
 80196fc:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80196fe:	2300      	movs	r3, #0
 8019700:	833b      	strh	r3, [r7, #24]
 8019702:	2300      	movs	r3, #0
 8019704:	82fb      	strh	r3, [r7, #22]
 8019706:	2300      	movs	r3, #0
 8019708:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801970a:	2300      	movs	r3, #0
 801970c:	773b      	strb	r3, [r7, #28]
 801970e:	e093      	b.n	8019838 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8019710:	7f3a      	ldrb	r2, [r7, #28]
 8019712:	4990      	ldr	r1, [pc, #576]	; (8019954 <etharp_find_entry+0x278>)
 8019714:	4613      	mov	r3, r2
 8019716:	005b      	lsls	r3, r3, #1
 8019718:	4413      	add	r3, r2
 801971a:	00db      	lsls	r3, r3, #3
 801971c:	440b      	add	r3, r1
 801971e:	3314      	adds	r3, #20
 8019720:	781b      	ldrb	r3, [r3, #0]
 8019722:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019724:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019728:	2b0a      	cmp	r3, #10
 801972a:	d105      	bne.n	8019738 <etharp_find_entry+0x5c>
 801972c:	7cfb      	ldrb	r3, [r7, #19]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d102      	bne.n	8019738 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8019732:	7f3b      	ldrb	r3, [r7, #28]
 8019734:	777b      	strb	r3, [r7, #29]
 8019736:	e07c      	b.n	8019832 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019738:	7cfb      	ldrb	r3, [r7, #19]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d079      	beq.n	8019832 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801973e:	7cfb      	ldrb	r3, [r7, #19]
 8019740:	2b01      	cmp	r3, #1
 8019742:	d009      	beq.n	8019758 <etharp_find_entry+0x7c>
 8019744:	7cfb      	ldrb	r3, [r7, #19]
 8019746:	2b01      	cmp	r3, #1
 8019748:	d806      	bhi.n	8019758 <etharp_find_entry+0x7c>
 801974a:	4b83      	ldr	r3, [pc, #524]	; (8019958 <etharp_find_entry+0x27c>)
 801974c:	f44f 7293 	mov.w	r2, #294	; 0x126
 8019750:	4982      	ldr	r1, [pc, #520]	; (801995c <etharp_find_entry+0x280>)
 8019752:	4883      	ldr	r0, [pc, #524]	; (8019960 <etharp_find_entry+0x284>)
 8019754:	f00c fbc8 	bl	8025ee8 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d00f      	beq.n	801977e <etharp_find_entry+0xa2>
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	6819      	ldr	r1, [r3, #0]
 8019762:	7f3a      	ldrb	r2, [r7, #28]
 8019764:	487b      	ldr	r0, [pc, #492]	; (8019954 <etharp_find_entry+0x278>)
 8019766:	4613      	mov	r3, r2
 8019768:	005b      	lsls	r3, r3, #1
 801976a:	4413      	add	r3, r2
 801976c:	00db      	lsls	r3, r3, #3
 801976e:	4403      	add	r3, r0
 8019770:	3304      	adds	r3, #4
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	4299      	cmp	r1, r3
 8019776:	d102      	bne.n	801977e <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019778:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801977c:	e0e5      	b.n	801994a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801977e:	7cfb      	ldrb	r3, [r7, #19]
 8019780:	2b01      	cmp	r3, #1
 8019782:	d13b      	bne.n	80197fc <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019784:	7f3a      	ldrb	r2, [r7, #28]
 8019786:	4973      	ldr	r1, [pc, #460]	; (8019954 <etharp_find_entry+0x278>)
 8019788:	4613      	mov	r3, r2
 801978a:	005b      	lsls	r3, r3, #1
 801978c:	4413      	add	r3, r2
 801978e:	00db      	lsls	r3, r3, #3
 8019790:	440b      	add	r3, r1
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d018      	beq.n	80197ca <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8019798:	7f3a      	ldrb	r2, [r7, #28]
 801979a:	496e      	ldr	r1, [pc, #440]	; (8019954 <etharp_find_entry+0x278>)
 801979c:	4613      	mov	r3, r2
 801979e:	005b      	lsls	r3, r3, #1
 80197a0:	4413      	add	r3, r2
 80197a2:	00db      	lsls	r3, r3, #3
 80197a4:	440b      	add	r3, r1
 80197a6:	3312      	adds	r3, #18
 80197a8:	881b      	ldrh	r3, [r3, #0]
 80197aa:	8b3a      	ldrh	r2, [r7, #24]
 80197ac:	429a      	cmp	r2, r3
 80197ae:	d840      	bhi.n	8019832 <etharp_find_entry+0x156>
            old_queue = i;
 80197b0:	7f3b      	ldrb	r3, [r7, #28]
 80197b2:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80197b4:	7f3a      	ldrb	r2, [r7, #28]
 80197b6:	4967      	ldr	r1, [pc, #412]	; (8019954 <etharp_find_entry+0x278>)
 80197b8:	4613      	mov	r3, r2
 80197ba:	005b      	lsls	r3, r3, #1
 80197bc:	4413      	add	r3, r2
 80197be:	00db      	lsls	r3, r3, #3
 80197c0:	440b      	add	r3, r1
 80197c2:	3312      	adds	r3, #18
 80197c4:	881b      	ldrh	r3, [r3, #0]
 80197c6:	833b      	strh	r3, [r7, #24]
 80197c8:	e033      	b.n	8019832 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80197ca:	7f3a      	ldrb	r2, [r7, #28]
 80197cc:	4961      	ldr	r1, [pc, #388]	; (8019954 <etharp_find_entry+0x278>)
 80197ce:	4613      	mov	r3, r2
 80197d0:	005b      	lsls	r3, r3, #1
 80197d2:	4413      	add	r3, r2
 80197d4:	00db      	lsls	r3, r3, #3
 80197d6:	440b      	add	r3, r1
 80197d8:	3312      	adds	r3, #18
 80197da:	881b      	ldrh	r3, [r3, #0]
 80197dc:	8afa      	ldrh	r2, [r7, #22]
 80197de:	429a      	cmp	r2, r3
 80197e0:	d827      	bhi.n	8019832 <etharp_find_entry+0x156>
            old_pending = i;
 80197e2:	7f3b      	ldrb	r3, [r7, #28]
 80197e4:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 80197e6:	7f3a      	ldrb	r2, [r7, #28]
 80197e8:	495a      	ldr	r1, [pc, #360]	; (8019954 <etharp_find_entry+0x278>)
 80197ea:	4613      	mov	r3, r2
 80197ec:	005b      	lsls	r3, r3, #1
 80197ee:	4413      	add	r3, r2
 80197f0:	00db      	lsls	r3, r3, #3
 80197f2:	440b      	add	r3, r1
 80197f4:	3312      	adds	r3, #18
 80197f6:	881b      	ldrh	r3, [r3, #0]
 80197f8:	82fb      	strh	r3, [r7, #22]
 80197fa:	e01a      	b.n	8019832 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80197fc:	7cfb      	ldrb	r3, [r7, #19]
 80197fe:	2b01      	cmp	r3, #1
 8019800:	d917      	bls.n	8019832 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019802:	7f3a      	ldrb	r2, [r7, #28]
 8019804:	4953      	ldr	r1, [pc, #332]	; (8019954 <etharp_find_entry+0x278>)
 8019806:	4613      	mov	r3, r2
 8019808:	005b      	lsls	r3, r3, #1
 801980a:	4413      	add	r3, r2
 801980c:	00db      	lsls	r3, r3, #3
 801980e:	440b      	add	r3, r1
 8019810:	3312      	adds	r3, #18
 8019812:	881b      	ldrh	r3, [r3, #0]
 8019814:	8aba      	ldrh	r2, [r7, #20]
 8019816:	429a      	cmp	r2, r3
 8019818:	d80b      	bhi.n	8019832 <etharp_find_entry+0x156>
            old_stable = i;
 801981a:	7f3b      	ldrb	r3, [r7, #28]
 801981c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801981e:	7f3a      	ldrb	r2, [r7, #28]
 8019820:	494c      	ldr	r1, [pc, #304]	; (8019954 <etharp_find_entry+0x278>)
 8019822:	4613      	mov	r3, r2
 8019824:	005b      	lsls	r3, r3, #1
 8019826:	4413      	add	r3, r2
 8019828:	00db      	lsls	r3, r3, #3
 801982a:	440b      	add	r3, r1
 801982c:	3312      	adds	r3, #18
 801982e:	881b      	ldrh	r3, [r3, #0]
 8019830:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019832:	7f3b      	ldrb	r3, [r7, #28]
 8019834:	3301      	adds	r3, #1
 8019836:	773b      	strb	r3, [r7, #28]
 8019838:	7f3b      	ldrb	r3, [r7, #28]
 801983a:	2b09      	cmp	r3, #9
 801983c:	f67f af68 	bls.w	8019710 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019840:	7afb      	ldrb	r3, [r7, #11]
 8019842:	f003 0302 	and.w	r3, r3, #2
 8019846:	2b00      	cmp	r3, #0
 8019848:	d108      	bne.n	801985c <etharp_find_entry+0x180>
 801984a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801984e:	2b0a      	cmp	r3, #10
 8019850:	d107      	bne.n	8019862 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019852:	7afb      	ldrb	r3, [r7, #11]
 8019854:	f003 0301 	and.w	r3, r3, #1
 8019858:	2b00      	cmp	r3, #0
 801985a:	d102      	bne.n	8019862 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 801985c:	f04f 33ff 	mov.w	r3, #4294967295
 8019860:	e073      	b.n	801994a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019862:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019866:	2b09      	cmp	r3, #9
 8019868:	dc02      	bgt.n	8019870 <etharp_find_entry+0x194>
    i = empty;
 801986a:	7f7b      	ldrb	r3, [r7, #29]
 801986c:	773b      	strb	r3, [r7, #28]
 801986e:	e036      	b.n	80198de <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019870:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019874:	2b09      	cmp	r3, #9
 8019876:	dc13      	bgt.n	80198a0 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8019878:	7fbb      	ldrb	r3, [r7, #30]
 801987a:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801987c:	7f3a      	ldrb	r2, [r7, #28]
 801987e:	4935      	ldr	r1, [pc, #212]	; (8019954 <etharp_find_entry+0x278>)
 8019880:	4613      	mov	r3, r2
 8019882:	005b      	lsls	r3, r3, #1
 8019884:	4413      	add	r3, r2
 8019886:	00db      	lsls	r3, r3, #3
 8019888:	440b      	add	r3, r1
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d018      	beq.n	80198c2 <etharp_find_entry+0x1e6>
 8019890:	4b31      	ldr	r3, [pc, #196]	; (8019958 <etharp_find_entry+0x27c>)
 8019892:	f240 126f 	movw	r2, #367	; 0x16f
 8019896:	4933      	ldr	r1, [pc, #204]	; (8019964 <etharp_find_entry+0x288>)
 8019898:	4831      	ldr	r0, [pc, #196]	; (8019960 <etharp_find_entry+0x284>)
 801989a:	f00c fb25 	bl	8025ee8 <iprintf>
 801989e:	e010      	b.n	80198c2 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80198a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80198a4:	2b09      	cmp	r3, #9
 80198a6:	dc02      	bgt.n	80198ae <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80198a8:	7ffb      	ldrb	r3, [r7, #31]
 80198aa:	773b      	strb	r3, [r7, #28]
 80198ac:	e009      	b.n	80198c2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80198ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80198b2:	2b09      	cmp	r3, #9
 80198b4:	dc02      	bgt.n	80198bc <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80198b6:	7efb      	ldrb	r3, [r7, #27]
 80198b8:	773b      	strb	r3, [r7, #28]
 80198ba:	e002      	b.n	80198c2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80198bc:	f04f 33ff 	mov.w	r3, #4294967295
 80198c0:	e043      	b.n	801994a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80198c2:	7f3b      	ldrb	r3, [r7, #28]
 80198c4:	2b09      	cmp	r3, #9
 80198c6:	d906      	bls.n	80198d6 <etharp_find_entry+0x1fa>
 80198c8:	4b23      	ldr	r3, [pc, #140]	; (8019958 <etharp_find_entry+0x27c>)
 80198ca:	f240 1281 	movw	r2, #385	; 0x181
 80198ce:	4926      	ldr	r1, [pc, #152]	; (8019968 <etharp_find_entry+0x28c>)
 80198d0:	4823      	ldr	r0, [pc, #140]	; (8019960 <etharp_find_entry+0x284>)
 80198d2:	f00c fb09 	bl	8025ee8 <iprintf>
    etharp_free_entry(i);
 80198d6:	7f3b      	ldrb	r3, [r7, #28]
 80198d8:	4618      	mov	r0, r3
 80198da:	f7ff fe25 	bl	8019528 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80198de:	7f3b      	ldrb	r3, [r7, #28]
 80198e0:	2b09      	cmp	r3, #9
 80198e2:	d906      	bls.n	80198f2 <etharp_find_entry+0x216>
 80198e4:	4b1c      	ldr	r3, [pc, #112]	; (8019958 <etharp_find_entry+0x27c>)
 80198e6:	f240 1285 	movw	r2, #389	; 0x185
 80198ea:	491f      	ldr	r1, [pc, #124]	; (8019968 <etharp_find_entry+0x28c>)
 80198ec:	481c      	ldr	r0, [pc, #112]	; (8019960 <etharp_find_entry+0x284>)
 80198ee:	f00c fafb 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80198f2:	7f3a      	ldrb	r2, [r7, #28]
 80198f4:	4917      	ldr	r1, [pc, #92]	; (8019954 <etharp_find_entry+0x278>)
 80198f6:	4613      	mov	r3, r2
 80198f8:	005b      	lsls	r3, r3, #1
 80198fa:	4413      	add	r3, r2
 80198fc:	00db      	lsls	r3, r3, #3
 80198fe:	440b      	add	r3, r1
 8019900:	3314      	adds	r3, #20
 8019902:	781b      	ldrb	r3, [r3, #0]
 8019904:	2b00      	cmp	r3, #0
 8019906:	d006      	beq.n	8019916 <etharp_find_entry+0x23a>
 8019908:	4b13      	ldr	r3, [pc, #76]	; (8019958 <etharp_find_entry+0x27c>)
 801990a:	f240 1287 	movw	r2, #391	; 0x187
 801990e:	4917      	ldr	r1, [pc, #92]	; (801996c <etharp_find_entry+0x290>)
 8019910:	4813      	ldr	r0, [pc, #76]	; (8019960 <etharp_find_entry+0x284>)
 8019912:	f00c fae9 	bl	8025ee8 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d00a      	beq.n	8019932 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801991c:	7f3a      	ldrb	r2, [r7, #28]
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	6819      	ldr	r1, [r3, #0]
 8019922:	480c      	ldr	r0, [pc, #48]	; (8019954 <etharp_find_entry+0x278>)
 8019924:	4613      	mov	r3, r2
 8019926:	005b      	lsls	r3, r3, #1
 8019928:	4413      	add	r3, r2
 801992a:	00db      	lsls	r3, r3, #3
 801992c:	4403      	add	r3, r0
 801992e:	3304      	adds	r3, #4
 8019930:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019932:	7f3a      	ldrb	r2, [r7, #28]
 8019934:	4907      	ldr	r1, [pc, #28]	; (8019954 <etharp_find_entry+0x278>)
 8019936:	4613      	mov	r3, r2
 8019938:	005b      	lsls	r3, r3, #1
 801993a:	4413      	add	r3, r2
 801993c:	00db      	lsls	r3, r3, #3
 801993e:	440b      	add	r3, r1
 8019940:	3312      	adds	r3, #18
 8019942:	2200      	movs	r2, #0
 8019944:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8019946:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801994a:	4618      	mov	r0, r3
 801994c:	3720      	adds	r7, #32
 801994e:	46bd      	mov	sp, r7
 8019950:	bd80      	pop	{r7, pc}
 8019952:	bf00      	nop
 8019954:	2000939c 	.word	0x2000939c
 8019958:	08027424 	.word	0x08027424
 801995c:	0802745c 	.word	0x0802745c
 8019960:	0802749c 	.word	0x0802749c
 8019964:	080274c4 	.word	0x080274c4
 8019968:	080274dc 	.word	0x080274dc
 801996c:	080274f0 	.word	0x080274f0

08019970 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019970:	b580      	push	{r7, lr}
 8019972:	b088      	sub	sp, #32
 8019974:	af02      	add	r7, sp, #8
 8019976:	60f8      	str	r0, [r7, #12]
 8019978:	60b9      	str	r1, [r7, #8]
 801997a:	607a      	str	r2, [r7, #4]
 801997c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019984:	2b06      	cmp	r3, #6
 8019986:	d006      	beq.n	8019996 <etharp_update_arp_entry+0x26>
 8019988:	4b48      	ldr	r3, [pc, #288]	; (8019aac <etharp_update_arp_entry+0x13c>)
 801998a:	f240 12ab 	movw	r2, #427	; 0x1ab
 801998e:	4948      	ldr	r1, [pc, #288]	; (8019ab0 <etharp_update_arp_entry+0x140>)
 8019990:	4848      	ldr	r0, [pc, #288]	; (8019ab4 <etharp_update_arp_entry+0x144>)
 8019992:	f00c faa9 	bl	8025ee8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019996:	68bb      	ldr	r3, [r7, #8]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d012      	beq.n	80199c2 <etharp_update_arp_entry+0x52>
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d00e      	beq.n	80199c2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	68f9      	ldr	r1, [r7, #12]
 80199aa:	4618      	mov	r0, r3
 80199ac:	f001 f8ce 	bl	801ab4c <ip4_addr_isbroadcast_u32>
 80199b0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d105      	bne.n	80199c2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80199b6:	68bb      	ldr	r3, [r7, #8]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80199be:	2be0      	cmp	r3, #224	; 0xe0
 80199c0:	d102      	bne.n	80199c8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80199c2:	f06f 030f 	mvn.w	r3, #15
 80199c6:	e06c      	b.n	8019aa2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80199c8:	78fb      	ldrb	r3, [r7, #3]
 80199ca:	68fa      	ldr	r2, [r7, #12]
 80199cc:	4619      	mov	r1, r3
 80199ce:	68b8      	ldr	r0, [r7, #8]
 80199d0:	f7ff fe84 	bl	80196dc <etharp_find_entry>
 80199d4:	4603      	mov	r3, r0
 80199d6:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80199d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	da02      	bge.n	80199e6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80199e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80199e4:	e05d      	b.n	8019aa2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80199e6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80199ea:	4933      	ldr	r1, [pc, #204]	; (8019ab8 <etharp_update_arp_entry+0x148>)
 80199ec:	4613      	mov	r3, r2
 80199ee:	005b      	lsls	r3, r3, #1
 80199f0:	4413      	add	r3, r2
 80199f2:	00db      	lsls	r3, r3, #3
 80199f4:	440b      	add	r3, r1
 80199f6:	3314      	adds	r3, #20
 80199f8:	2202      	movs	r2, #2
 80199fa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80199fc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019a00:	492d      	ldr	r1, [pc, #180]	; (8019ab8 <etharp_update_arp_entry+0x148>)
 8019a02:	4613      	mov	r3, r2
 8019a04:	005b      	lsls	r3, r3, #1
 8019a06:	4413      	add	r3, r2
 8019a08:	00db      	lsls	r3, r3, #3
 8019a0a:	440b      	add	r3, r1
 8019a0c:	3308      	adds	r3, #8
 8019a0e:	68fa      	ldr	r2, [r7, #12]
 8019a10:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8019a12:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019a16:	4613      	mov	r3, r2
 8019a18:	005b      	lsls	r3, r3, #1
 8019a1a:	4413      	add	r3, r2
 8019a1c:	00db      	lsls	r3, r3, #3
 8019a1e:	3308      	adds	r3, #8
 8019a20:	4a25      	ldr	r2, [pc, #148]	; (8019ab8 <etharp_update_arp_entry+0x148>)
 8019a22:	4413      	add	r3, r2
 8019a24:	3304      	adds	r3, #4
 8019a26:	2206      	movs	r2, #6
 8019a28:	6879      	ldr	r1, [r7, #4]
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f00c ff2b 	bl	8026886 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019a30:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019a34:	4920      	ldr	r1, [pc, #128]	; (8019ab8 <etharp_update_arp_entry+0x148>)
 8019a36:	4613      	mov	r3, r2
 8019a38:	005b      	lsls	r3, r3, #1
 8019a3a:	4413      	add	r3, r2
 8019a3c:	00db      	lsls	r3, r3, #3
 8019a3e:	440b      	add	r3, r1
 8019a40:	3312      	adds	r3, #18
 8019a42:	2200      	movs	r2, #0
 8019a44:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019a46:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019a4a:	491b      	ldr	r1, [pc, #108]	; (8019ab8 <etharp_update_arp_entry+0x148>)
 8019a4c:	4613      	mov	r3, r2
 8019a4e:	005b      	lsls	r3, r3, #1
 8019a50:	4413      	add	r3, r2
 8019a52:	00db      	lsls	r3, r3, #3
 8019a54:	440b      	add	r3, r1
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d021      	beq.n	8019aa0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019a5c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019a60:	4915      	ldr	r1, [pc, #84]	; (8019ab8 <etharp_update_arp_entry+0x148>)
 8019a62:	4613      	mov	r3, r2
 8019a64:	005b      	lsls	r3, r3, #1
 8019a66:	4413      	add	r3, r2
 8019a68:	00db      	lsls	r3, r3, #3
 8019a6a:	440b      	add	r3, r1
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019a70:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019a74:	4910      	ldr	r1, [pc, #64]	; (8019ab8 <etharp_update_arp_entry+0x148>)
 8019a76:	4613      	mov	r3, r2
 8019a78:	005b      	lsls	r3, r3, #1
 8019a7a:	4413      	add	r3, r2
 8019a7c:	00db      	lsls	r3, r3, #3
 8019a7e:	440b      	add	r3, r1
 8019a80:	2200      	movs	r2, #0
 8019a82:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8019a8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019a8e:	9300      	str	r3, [sp, #0]
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	6939      	ldr	r1, [r7, #16]
 8019a94:	68f8      	ldr	r0, [r7, #12]
 8019a96:	f009 f845 	bl	8022b24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019a9a:	6938      	ldr	r0, [r7, #16]
 8019a9c:	f003 f986 	bl	801cdac <pbuf_free>
  }
  return ERR_OK;
 8019aa0:	2300      	movs	r3, #0
}
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	3718      	adds	r7, #24
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	bd80      	pop	{r7, pc}
 8019aaa:	bf00      	nop
 8019aac:	08027424 	.word	0x08027424
 8019ab0:	0802751c 	.word	0x0802751c
 8019ab4:	0802749c 	.word	0x0802749c
 8019ab8:	2000939c 	.word	0x2000939c

08019abc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b084      	sub	sp, #16
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	73fb      	strb	r3, [r7, #15]
 8019ac8:	e01f      	b.n	8019b0a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8019aca:	7bfa      	ldrb	r2, [r7, #15]
 8019acc:	4912      	ldr	r1, [pc, #72]	; (8019b18 <etharp_cleanup_netif+0x5c>)
 8019ace:	4613      	mov	r3, r2
 8019ad0:	005b      	lsls	r3, r3, #1
 8019ad2:	4413      	add	r3, r2
 8019ad4:	00db      	lsls	r3, r3, #3
 8019ad6:	440b      	add	r3, r1
 8019ad8:	3314      	adds	r3, #20
 8019ada:	781b      	ldrb	r3, [r3, #0]
 8019adc:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019ade:	7bbb      	ldrb	r3, [r7, #14]
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d00f      	beq.n	8019b04 <etharp_cleanup_netif+0x48>
 8019ae4:	7bfa      	ldrb	r2, [r7, #15]
 8019ae6:	490c      	ldr	r1, [pc, #48]	; (8019b18 <etharp_cleanup_netif+0x5c>)
 8019ae8:	4613      	mov	r3, r2
 8019aea:	005b      	lsls	r3, r3, #1
 8019aec:	4413      	add	r3, r2
 8019aee:	00db      	lsls	r3, r3, #3
 8019af0:	440b      	add	r3, r1
 8019af2:	3308      	adds	r3, #8
 8019af4:	681a      	ldr	r2, [r3, #0]
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d103      	bne.n	8019b04 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8019afc:	7bfb      	ldrb	r3, [r7, #15]
 8019afe:	4618      	mov	r0, r3
 8019b00:	f7ff fd12 	bl	8019528 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019b04:	7bfb      	ldrb	r3, [r7, #15]
 8019b06:	3301      	adds	r3, #1
 8019b08:	73fb      	strb	r3, [r7, #15]
 8019b0a:	7bfb      	ldrb	r3, [r7, #15]
 8019b0c:	2b09      	cmp	r3, #9
 8019b0e:	d9dc      	bls.n	8019aca <etharp_cleanup_netif+0xe>
    }
  }
}
 8019b10:	bf00      	nop
 8019b12:	3710      	adds	r7, #16
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bd80      	pop	{r7, pc}
 8019b18:	2000939c 	.word	0x2000939c

08019b1c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019b1c:	b5b0      	push	{r4, r5, r7, lr}
 8019b1e:	b08a      	sub	sp, #40	; 0x28
 8019b20:	af04      	add	r7, sp, #16
 8019b22:	6078      	str	r0, [r7, #4]
 8019b24:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019b26:	683b      	ldr	r3, [r7, #0]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d107      	bne.n	8019b3c <etharp_input+0x20>
 8019b2c:	4b3d      	ldr	r3, [pc, #244]	; (8019c24 <etharp_input+0x108>)
 8019b2e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8019b32:	493d      	ldr	r1, [pc, #244]	; (8019c28 <etharp_input+0x10c>)
 8019b34:	483d      	ldr	r0, [pc, #244]	; (8019c2c <etharp_input+0x110>)
 8019b36:	f00c f9d7 	bl	8025ee8 <iprintf>
 8019b3a:	e06f      	b.n	8019c1c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	685b      	ldr	r3, [r3, #4]
 8019b40:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8019b42:	693b      	ldr	r3, [r7, #16]
 8019b44:	881b      	ldrh	r3, [r3, #0]
 8019b46:	b29b      	uxth	r3, r3
 8019b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019b4c:	d10c      	bne.n	8019b68 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019b4e:	693b      	ldr	r3, [r7, #16]
 8019b50:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8019b52:	2b06      	cmp	r3, #6
 8019b54:	d108      	bne.n	8019b68 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019b56:	693b      	ldr	r3, [r7, #16]
 8019b58:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019b5a:	2b04      	cmp	r3, #4
 8019b5c:	d104      	bne.n	8019b68 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019b5e:	693b      	ldr	r3, [r7, #16]
 8019b60:	885b      	ldrh	r3, [r3, #2]
 8019b62:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019b64:	2b08      	cmp	r3, #8
 8019b66:	d003      	beq.n	8019b70 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019b68:	6878      	ldr	r0, [r7, #4]
 8019b6a:	f003 f91f 	bl	801cdac <pbuf_free>
    return;
 8019b6e:	e055      	b.n	8019c1c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8019b70:	693b      	ldr	r3, [r7, #16]
 8019b72:	330e      	adds	r3, #14
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8019b78:	693b      	ldr	r3, [r7, #16]
 8019b7a:	3318      	adds	r3, #24
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019b80:	683b      	ldr	r3, [r7, #0]
 8019b82:	3304      	adds	r3, #4
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d102      	bne.n	8019b90 <etharp_input+0x74>
    for_us = 0;
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	75fb      	strb	r3, [r7, #23]
 8019b8e:	e009      	b.n	8019ba4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019b90:	68ba      	ldr	r2, [r7, #8]
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	3304      	adds	r3, #4
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	429a      	cmp	r2, r3
 8019b9a:	bf0c      	ite	eq
 8019b9c:	2301      	moveq	r3, #1
 8019b9e:	2300      	movne	r3, #0
 8019ba0:	b2db      	uxtb	r3, r3
 8019ba2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019ba4:	693b      	ldr	r3, [r7, #16]
 8019ba6:	f103 0208 	add.w	r2, r3, #8
 8019baa:	7dfb      	ldrb	r3, [r7, #23]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d001      	beq.n	8019bb4 <etharp_input+0x98>
 8019bb0:	2301      	movs	r3, #1
 8019bb2:	e000      	b.n	8019bb6 <etharp_input+0x9a>
 8019bb4:	2302      	movs	r3, #2
 8019bb6:	f107 010c 	add.w	r1, r7, #12
 8019bba:	6838      	ldr	r0, [r7, #0]
 8019bbc:	f7ff fed8 	bl	8019970 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019bc0:	693b      	ldr	r3, [r7, #16]
 8019bc2:	88db      	ldrh	r3, [r3, #6]
 8019bc4:	b29b      	uxth	r3, r3
 8019bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019bca:	d003      	beq.n	8019bd4 <etharp_input+0xb8>
 8019bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019bd0:	d01e      	beq.n	8019c10 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8019bd2:	e020      	b.n	8019c16 <etharp_input+0xfa>
    if (for_us) {
 8019bd4:	7dfb      	ldrb	r3, [r7, #23]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d01c      	beq.n	8019c14 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019bda:	683b      	ldr	r3, [r7, #0]
 8019bdc:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8019be0:	693b      	ldr	r3, [r7, #16]
 8019be2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019be6:	683b      	ldr	r3, [r7, #0]
 8019be8:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8019bf0:	693a      	ldr	r2, [r7, #16]
 8019bf2:	3208      	adds	r2, #8
      etharp_raw(netif,
 8019bf4:	2102      	movs	r1, #2
 8019bf6:	9103      	str	r1, [sp, #12]
 8019bf8:	f107 010c 	add.w	r1, r7, #12
 8019bfc:	9102      	str	r1, [sp, #8]
 8019bfe:	9201      	str	r2, [sp, #4]
 8019c00:	9300      	str	r3, [sp, #0]
 8019c02:	462b      	mov	r3, r5
 8019c04:	4622      	mov	r2, r4
 8019c06:	4601      	mov	r1, r0
 8019c08:	6838      	ldr	r0, [r7, #0]
 8019c0a:	f000 fae3 	bl	801a1d4 <etharp_raw>
    break;
 8019c0e:	e001      	b.n	8019c14 <etharp_input+0xf8>
    break;
 8019c10:	bf00      	nop
 8019c12:	e000      	b.n	8019c16 <etharp_input+0xfa>
    break;
 8019c14:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019c16:	6878      	ldr	r0, [r7, #4]
 8019c18:	f003 f8c8 	bl	801cdac <pbuf_free>
}
 8019c1c:	3718      	adds	r7, #24
 8019c1e:	46bd      	mov	sp, r7
 8019c20:	bdb0      	pop	{r4, r5, r7, pc}
 8019c22:	bf00      	nop
 8019c24:	08027424 	.word	0x08027424
 8019c28:	08027574 	.word	0x08027574
 8019c2c:	0802749c 	.word	0x0802749c

08019c30 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8019c30:	b580      	push	{r7, lr}
 8019c32:	b086      	sub	sp, #24
 8019c34:	af02      	add	r7, sp, #8
 8019c36:	60f8      	str	r0, [r7, #12]
 8019c38:	60b9      	str	r1, [r7, #8]
 8019c3a:	4613      	mov	r3, r2
 8019c3c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8019c3e:	79fa      	ldrb	r2, [r7, #7]
 8019c40:	4944      	ldr	r1, [pc, #272]	; (8019d54 <etharp_output_to_arp_index+0x124>)
 8019c42:	4613      	mov	r3, r2
 8019c44:	005b      	lsls	r3, r3, #1
 8019c46:	4413      	add	r3, r2
 8019c48:	00db      	lsls	r3, r3, #3
 8019c4a:	440b      	add	r3, r1
 8019c4c:	3314      	adds	r3, #20
 8019c4e:	781b      	ldrb	r3, [r3, #0]
 8019c50:	2b01      	cmp	r3, #1
 8019c52:	d806      	bhi.n	8019c62 <etharp_output_to_arp_index+0x32>
 8019c54:	4b40      	ldr	r3, [pc, #256]	; (8019d58 <etharp_output_to_arp_index+0x128>)
 8019c56:	f240 22ed 	movw	r2, #749	; 0x2ed
 8019c5a:	4940      	ldr	r1, [pc, #256]	; (8019d5c <etharp_output_to_arp_index+0x12c>)
 8019c5c:	4840      	ldr	r0, [pc, #256]	; (8019d60 <etharp_output_to_arp_index+0x130>)
 8019c5e:	f00c f943 	bl	8025ee8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019c62:	79fa      	ldrb	r2, [r7, #7]
 8019c64:	493b      	ldr	r1, [pc, #236]	; (8019d54 <etharp_output_to_arp_index+0x124>)
 8019c66:	4613      	mov	r3, r2
 8019c68:	005b      	lsls	r3, r3, #1
 8019c6a:	4413      	add	r3, r2
 8019c6c:	00db      	lsls	r3, r3, #3
 8019c6e:	440b      	add	r3, r1
 8019c70:	3314      	adds	r3, #20
 8019c72:	781b      	ldrb	r3, [r3, #0]
 8019c74:	2b02      	cmp	r3, #2
 8019c76:	d153      	bne.n	8019d20 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019c78:	79fa      	ldrb	r2, [r7, #7]
 8019c7a:	4936      	ldr	r1, [pc, #216]	; (8019d54 <etharp_output_to_arp_index+0x124>)
 8019c7c:	4613      	mov	r3, r2
 8019c7e:	005b      	lsls	r3, r3, #1
 8019c80:	4413      	add	r3, r2
 8019c82:	00db      	lsls	r3, r3, #3
 8019c84:	440b      	add	r3, r1
 8019c86:	3312      	adds	r3, #18
 8019c88:	881b      	ldrh	r3, [r3, #0]
 8019c8a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8019c8e:	d919      	bls.n	8019cc4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019c90:	79fa      	ldrb	r2, [r7, #7]
 8019c92:	4613      	mov	r3, r2
 8019c94:	005b      	lsls	r3, r3, #1
 8019c96:	4413      	add	r3, r2
 8019c98:	00db      	lsls	r3, r3, #3
 8019c9a:	4a2e      	ldr	r2, [pc, #184]	; (8019d54 <etharp_output_to_arp_index+0x124>)
 8019c9c:	4413      	add	r3, r2
 8019c9e:	3304      	adds	r3, #4
 8019ca0:	4619      	mov	r1, r3
 8019ca2:	68f8      	ldr	r0, [r7, #12]
 8019ca4:	f000 fb44 	bl	801a330 <etharp_request>
 8019ca8:	4603      	mov	r3, r0
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d138      	bne.n	8019d20 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019cae:	79fa      	ldrb	r2, [r7, #7]
 8019cb0:	4928      	ldr	r1, [pc, #160]	; (8019d54 <etharp_output_to_arp_index+0x124>)
 8019cb2:	4613      	mov	r3, r2
 8019cb4:	005b      	lsls	r3, r3, #1
 8019cb6:	4413      	add	r3, r2
 8019cb8:	00db      	lsls	r3, r3, #3
 8019cba:	440b      	add	r3, r1
 8019cbc:	3314      	adds	r3, #20
 8019cbe:	2203      	movs	r2, #3
 8019cc0:	701a      	strb	r2, [r3, #0]
 8019cc2:	e02d      	b.n	8019d20 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019cc4:	79fa      	ldrb	r2, [r7, #7]
 8019cc6:	4923      	ldr	r1, [pc, #140]	; (8019d54 <etharp_output_to_arp_index+0x124>)
 8019cc8:	4613      	mov	r3, r2
 8019cca:	005b      	lsls	r3, r3, #1
 8019ccc:	4413      	add	r3, r2
 8019cce:	00db      	lsls	r3, r3, #3
 8019cd0:	440b      	add	r3, r1
 8019cd2:	3312      	adds	r3, #18
 8019cd4:	881b      	ldrh	r3, [r3, #0]
 8019cd6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8019cda:	d321      	bcc.n	8019d20 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019cdc:	79fa      	ldrb	r2, [r7, #7]
 8019cde:	4613      	mov	r3, r2
 8019ce0:	005b      	lsls	r3, r3, #1
 8019ce2:	4413      	add	r3, r2
 8019ce4:	00db      	lsls	r3, r3, #3
 8019ce6:	4a1b      	ldr	r2, [pc, #108]	; (8019d54 <etharp_output_to_arp_index+0x124>)
 8019ce8:	4413      	add	r3, r2
 8019cea:	1d19      	adds	r1, r3, #4
 8019cec:	79fa      	ldrb	r2, [r7, #7]
 8019cee:	4613      	mov	r3, r2
 8019cf0:	005b      	lsls	r3, r3, #1
 8019cf2:	4413      	add	r3, r2
 8019cf4:	00db      	lsls	r3, r3, #3
 8019cf6:	3308      	adds	r3, #8
 8019cf8:	4a16      	ldr	r2, [pc, #88]	; (8019d54 <etharp_output_to_arp_index+0x124>)
 8019cfa:	4413      	add	r3, r2
 8019cfc:	3304      	adds	r3, #4
 8019cfe:	461a      	mov	r2, r3
 8019d00:	68f8      	ldr	r0, [r7, #12]
 8019d02:	f000 faf3 	bl	801a2ec <etharp_request_dst>
 8019d06:	4603      	mov	r3, r0
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d109      	bne.n	8019d20 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019d0c:	79fa      	ldrb	r2, [r7, #7]
 8019d0e:	4911      	ldr	r1, [pc, #68]	; (8019d54 <etharp_output_to_arp_index+0x124>)
 8019d10:	4613      	mov	r3, r2
 8019d12:	005b      	lsls	r3, r3, #1
 8019d14:	4413      	add	r3, r2
 8019d16:	00db      	lsls	r3, r3, #3
 8019d18:	440b      	add	r3, r1
 8019d1a:	3314      	adds	r3, #20
 8019d1c:	2203      	movs	r2, #3
 8019d1e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8019d26:	79fa      	ldrb	r2, [r7, #7]
 8019d28:	4613      	mov	r3, r2
 8019d2a:	005b      	lsls	r3, r3, #1
 8019d2c:	4413      	add	r3, r2
 8019d2e:	00db      	lsls	r3, r3, #3
 8019d30:	3308      	adds	r3, #8
 8019d32:	4a08      	ldr	r2, [pc, #32]	; (8019d54 <etharp_output_to_arp_index+0x124>)
 8019d34:	4413      	add	r3, r2
 8019d36:	1d1a      	adds	r2, r3, #4
 8019d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019d3c:	9300      	str	r3, [sp, #0]
 8019d3e:	4613      	mov	r3, r2
 8019d40:	460a      	mov	r2, r1
 8019d42:	68b9      	ldr	r1, [r7, #8]
 8019d44:	68f8      	ldr	r0, [r7, #12]
 8019d46:	f008 feed 	bl	8022b24 <ethernet_output>
 8019d4a:	4603      	mov	r3, r0
}
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	3710      	adds	r7, #16
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd80      	pop	{r7, pc}
 8019d54:	2000939c 	.word	0x2000939c
 8019d58:	08027424 	.word	0x08027424
 8019d5c:	08027594 	.word	0x08027594
 8019d60:	0802749c 	.word	0x0802749c

08019d64 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b08a      	sub	sp, #40	; 0x28
 8019d68:	af02      	add	r7, sp, #8
 8019d6a:	60f8      	str	r0, [r7, #12]
 8019d6c:	60b9      	str	r1, [r7, #8]
 8019d6e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d106      	bne.n	8019d88 <etharp_output+0x24>
 8019d7a:	4b69      	ldr	r3, [pc, #420]	; (8019f20 <etharp_output+0x1bc>)
 8019d7c:	f240 321b 	movw	r2, #795	; 0x31b
 8019d80:	4968      	ldr	r1, [pc, #416]	; (8019f24 <etharp_output+0x1c0>)
 8019d82:	4869      	ldr	r0, [pc, #420]	; (8019f28 <etharp_output+0x1c4>)
 8019d84:	f00c f8b0 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019d88:	68bb      	ldr	r3, [r7, #8]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d106      	bne.n	8019d9c <etharp_output+0x38>
 8019d8e:	4b64      	ldr	r3, [pc, #400]	; (8019f20 <etharp_output+0x1bc>)
 8019d90:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8019d94:	4965      	ldr	r1, [pc, #404]	; (8019f2c <etharp_output+0x1c8>)
 8019d96:	4864      	ldr	r0, [pc, #400]	; (8019f28 <etharp_output+0x1c4>)
 8019d98:	f00c f8a6 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d106      	bne.n	8019db0 <etharp_output+0x4c>
 8019da2:	4b5f      	ldr	r3, [pc, #380]	; (8019f20 <etharp_output+0x1bc>)
 8019da4:	f240 321d 	movw	r2, #797	; 0x31d
 8019da8:	4961      	ldr	r1, [pc, #388]	; (8019f30 <etharp_output+0x1cc>)
 8019daa:	485f      	ldr	r0, [pc, #380]	; (8019f28 <etharp_output+0x1c4>)
 8019dac:	f00c f89c 	bl	8025ee8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	68f9      	ldr	r1, [r7, #12]
 8019db6:	4618      	mov	r0, r3
 8019db8:	f000 fec8 	bl	801ab4c <ip4_addr_isbroadcast_u32>
 8019dbc:	4603      	mov	r3, r0
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d002      	beq.n	8019dc8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019dc2:	4b5c      	ldr	r3, [pc, #368]	; (8019f34 <etharp_output+0x1d0>)
 8019dc4:	61fb      	str	r3, [r7, #28]
 8019dc6:	e09b      	b.n	8019f00 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019dd0:	2be0      	cmp	r3, #224	; 0xe0
 8019dd2:	d118      	bne.n	8019e06 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019dd4:	2301      	movs	r3, #1
 8019dd6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019dd8:	2300      	movs	r3, #0
 8019dda:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019ddc:	235e      	movs	r3, #94	; 0x5e
 8019dde:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	3301      	adds	r3, #1
 8019de4:	781b      	ldrb	r3, [r3, #0]
 8019de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019dea:	b2db      	uxtb	r3, r3
 8019dec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	3302      	adds	r3, #2
 8019df2:	781b      	ldrb	r3, [r3, #0]
 8019df4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	3303      	adds	r3, #3
 8019dfa:	781b      	ldrb	r3, [r3, #0]
 8019dfc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019dfe:	f107 0310 	add.w	r3, r7, #16
 8019e02:	61fb      	str	r3, [r7, #28]
 8019e04:	e07c      	b.n	8019f00 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	681a      	ldr	r2, [r3, #0]
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	3304      	adds	r3, #4
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	405a      	eors	r2, r3
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	3308      	adds	r3, #8
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	4013      	ands	r3, r2
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d012      	beq.n	8019e44 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019e24:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019e28:	4293      	cmp	r3, r2
 8019e2a:	d00b      	beq.n	8019e44 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	330c      	adds	r3, #12
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d003      	beq.n	8019e3e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	330c      	adds	r3, #12
 8019e3a:	61bb      	str	r3, [r7, #24]
 8019e3c:	e002      	b.n	8019e44 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019e3e:	f06f 0303 	mvn.w	r3, #3
 8019e42:	e069      	b.n	8019f18 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019e44:	4b3c      	ldr	r3, [pc, #240]	; (8019f38 <etharp_output+0x1d4>)
 8019e46:	781b      	ldrb	r3, [r3, #0]
 8019e48:	4619      	mov	r1, r3
 8019e4a:	4a3c      	ldr	r2, [pc, #240]	; (8019f3c <etharp_output+0x1d8>)
 8019e4c:	460b      	mov	r3, r1
 8019e4e:	005b      	lsls	r3, r3, #1
 8019e50:	440b      	add	r3, r1
 8019e52:	00db      	lsls	r3, r3, #3
 8019e54:	4413      	add	r3, r2
 8019e56:	3314      	adds	r3, #20
 8019e58:	781b      	ldrb	r3, [r3, #0]
 8019e5a:	2b01      	cmp	r3, #1
 8019e5c:	d917      	bls.n	8019e8e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019e5e:	69bb      	ldr	r3, [r7, #24]
 8019e60:	681a      	ldr	r2, [r3, #0]
 8019e62:	4b35      	ldr	r3, [pc, #212]	; (8019f38 <etharp_output+0x1d4>)
 8019e64:	781b      	ldrb	r3, [r3, #0]
 8019e66:	4618      	mov	r0, r3
 8019e68:	4934      	ldr	r1, [pc, #208]	; (8019f3c <etharp_output+0x1d8>)
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	005b      	lsls	r3, r3, #1
 8019e6e:	4403      	add	r3, r0
 8019e70:	00db      	lsls	r3, r3, #3
 8019e72:	440b      	add	r3, r1
 8019e74:	3304      	adds	r3, #4
 8019e76:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	d108      	bne.n	8019e8e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019e7c:	4b2e      	ldr	r3, [pc, #184]	; (8019f38 <etharp_output+0x1d4>)
 8019e7e:	781b      	ldrb	r3, [r3, #0]
 8019e80:	461a      	mov	r2, r3
 8019e82:	68b9      	ldr	r1, [r7, #8]
 8019e84:	68f8      	ldr	r0, [r7, #12]
 8019e86:	f7ff fed3 	bl	8019c30 <etharp_output_to_arp_index>
 8019e8a:	4603      	mov	r3, r0
 8019e8c:	e044      	b.n	8019f18 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019e8e:	2300      	movs	r3, #0
 8019e90:	75fb      	strb	r3, [r7, #23]
 8019e92:	e02a      	b.n	8019eea <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019e94:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019e98:	4928      	ldr	r1, [pc, #160]	; (8019f3c <etharp_output+0x1d8>)
 8019e9a:	4613      	mov	r3, r2
 8019e9c:	005b      	lsls	r3, r3, #1
 8019e9e:	4413      	add	r3, r2
 8019ea0:	00db      	lsls	r3, r3, #3
 8019ea2:	440b      	add	r3, r1
 8019ea4:	3314      	adds	r3, #20
 8019ea6:	781b      	ldrb	r3, [r3, #0]
 8019ea8:	2b01      	cmp	r3, #1
 8019eaa:	d918      	bls.n	8019ede <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019eac:	69bb      	ldr	r3, [r7, #24]
 8019eae:	6819      	ldr	r1, [r3, #0]
 8019eb0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8019eb4:	4821      	ldr	r0, [pc, #132]	; (8019f3c <etharp_output+0x1d8>)
 8019eb6:	4613      	mov	r3, r2
 8019eb8:	005b      	lsls	r3, r3, #1
 8019eba:	4413      	add	r3, r2
 8019ebc:	00db      	lsls	r3, r3, #3
 8019ebe:	4403      	add	r3, r0
 8019ec0:	3304      	adds	r3, #4
 8019ec2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019ec4:	4299      	cmp	r1, r3
 8019ec6:	d10a      	bne.n	8019ede <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8019ec8:	7dfa      	ldrb	r2, [r7, #23]
 8019eca:	4b1b      	ldr	r3, [pc, #108]	; (8019f38 <etharp_output+0x1d4>)
 8019ecc:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019ece:	7dfb      	ldrb	r3, [r7, #23]
 8019ed0:	461a      	mov	r2, r3
 8019ed2:	68b9      	ldr	r1, [r7, #8]
 8019ed4:	68f8      	ldr	r0, [r7, #12]
 8019ed6:	f7ff feab 	bl	8019c30 <etharp_output_to_arp_index>
 8019eda:	4603      	mov	r3, r0
 8019edc:	e01c      	b.n	8019f18 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019ee2:	b2db      	uxtb	r3, r3
 8019ee4:	3301      	adds	r3, #1
 8019ee6:	b2db      	uxtb	r3, r3
 8019ee8:	75fb      	strb	r3, [r7, #23]
 8019eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019eee:	2b09      	cmp	r3, #9
 8019ef0:	ddd0      	ble.n	8019e94 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019ef2:	68ba      	ldr	r2, [r7, #8]
 8019ef4:	69b9      	ldr	r1, [r7, #24]
 8019ef6:	68f8      	ldr	r0, [r7, #12]
 8019ef8:	f000 f822 	bl	8019f40 <etharp_query>
 8019efc:	4603      	mov	r3, r0
 8019efe:	e00b      	b.n	8019f18 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8019f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019f0a:	9300      	str	r3, [sp, #0]
 8019f0c:	69fb      	ldr	r3, [r7, #28]
 8019f0e:	68b9      	ldr	r1, [r7, #8]
 8019f10:	68f8      	ldr	r0, [r7, #12]
 8019f12:	f008 fe07 	bl	8022b24 <ethernet_output>
 8019f16:	4603      	mov	r3, r0
}
 8019f18:	4618      	mov	r0, r3
 8019f1a:	3720      	adds	r7, #32
 8019f1c:	46bd      	mov	sp, r7
 8019f1e:	bd80      	pop	{r7, pc}
 8019f20:	08027424 	.word	0x08027424
 8019f24:	08027574 	.word	0x08027574
 8019f28:	0802749c 	.word	0x0802749c
 8019f2c:	080275c4 	.word	0x080275c4
 8019f30:	08027564 	.word	0x08027564
 8019f34:	0802b6ec 	.word	0x0802b6ec
 8019f38:	2000948c 	.word	0x2000948c
 8019f3c:	2000939c 	.word	0x2000939c

08019f40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b08c      	sub	sp, #48	; 0x30
 8019f44:	af02      	add	r7, sp, #8
 8019f46:	60f8      	str	r0, [r7, #12]
 8019f48:	60b9      	str	r1, [r7, #8]
 8019f4a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	3325      	adds	r3, #37	; 0x25
 8019f50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019f52:	23ff      	movs	r3, #255	; 0xff
 8019f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019f58:	2300      	movs	r3, #0
 8019f5a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	68f9      	ldr	r1, [r7, #12]
 8019f62:	4618      	mov	r0, r3
 8019f64:	f000 fdf2 	bl	801ab4c <ip4_addr_isbroadcast_u32>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d10c      	bne.n	8019f88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019f6e:	68bb      	ldr	r3, [r7, #8]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019f76:	2be0      	cmp	r3, #224	; 0xe0
 8019f78:	d006      	beq.n	8019f88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019f7a:	68bb      	ldr	r3, [r7, #8]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d003      	beq.n	8019f88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019f80:	68bb      	ldr	r3, [r7, #8]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d102      	bne.n	8019f8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019f88:	f06f 030f 	mvn.w	r3, #15
 8019f8c:	e10f      	b.n	801a1ae <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019f8e:	68fa      	ldr	r2, [r7, #12]
 8019f90:	2101      	movs	r1, #1
 8019f92:	68b8      	ldr	r0, [r7, #8]
 8019f94:	f7ff fba2 	bl	80196dc <etharp_find_entry>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8019f9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	da02      	bge.n	8019faa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8019fa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019fa8:	e101      	b.n	801a1ae <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019faa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019fae:	4982      	ldr	r1, [pc, #520]	; (801a1b8 <etharp_query+0x278>)
 8019fb0:	4613      	mov	r3, r2
 8019fb2:	005b      	lsls	r3, r3, #1
 8019fb4:	4413      	add	r3, r2
 8019fb6:	00db      	lsls	r3, r3, #3
 8019fb8:	440b      	add	r3, r1
 8019fba:	3314      	adds	r3, #20
 8019fbc:	781b      	ldrb	r3, [r3, #0]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d117      	bne.n	8019ff2 <etharp_query+0xb2>
    is_new_entry = 1;
 8019fc2:	2301      	movs	r3, #1
 8019fc4:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019fc6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019fca:	497b      	ldr	r1, [pc, #492]	; (801a1b8 <etharp_query+0x278>)
 8019fcc:	4613      	mov	r3, r2
 8019fce:	005b      	lsls	r3, r3, #1
 8019fd0:	4413      	add	r3, r2
 8019fd2:	00db      	lsls	r3, r3, #3
 8019fd4:	440b      	add	r3, r1
 8019fd6:	3314      	adds	r3, #20
 8019fd8:	2201      	movs	r2, #1
 8019fda:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019fdc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019fe0:	4975      	ldr	r1, [pc, #468]	; (801a1b8 <etharp_query+0x278>)
 8019fe2:	4613      	mov	r3, r2
 8019fe4:	005b      	lsls	r3, r3, #1
 8019fe6:	4413      	add	r3, r2
 8019fe8:	00db      	lsls	r3, r3, #3
 8019fea:	440b      	add	r3, r1
 8019fec:	3308      	adds	r3, #8
 8019fee:	68fa      	ldr	r2, [r7, #12]
 8019ff0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019ff2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8019ff6:	4970      	ldr	r1, [pc, #448]	; (801a1b8 <etharp_query+0x278>)
 8019ff8:	4613      	mov	r3, r2
 8019ffa:	005b      	lsls	r3, r3, #1
 8019ffc:	4413      	add	r3, r2
 8019ffe:	00db      	lsls	r3, r3, #3
 801a000:	440b      	add	r3, r1
 801a002:	3314      	adds	r3, #20
 801a004:	781b      	ldrb	r3, [r3, #0]
 801a006:	2b01      	cmp	r3, #1
 801a008:	d012      	beq.n	801a030 <etharp_query+0xf0>
 801a00a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a00e:	496a      	ldr	r1, [pc, #424]	; (801a1b8 <etharp_query+0x278>)
 801a010:	4613      	mov	r3, r2
 801a012:	005b      	lsls	r3, r3, #1
 801a014:	4413      	add	r3, r2
 801a016:	00db      	lsls	r3, r3, #3
 801a018:	440b      	add	r3, r1
 801a01a:	3314      	adds	r3, #20
 801a01c:	781b      	ldrb	r3, [r3, #0]
 801a01e:	2b01      	cmp	r3, #1
 801a020:	d806      	bhi.n	801a030 <etharp_query+0xf0>
 801a022:	4b66      	ldr	r3, [pc, #408]	; (801a1bc <etharp_query+0x27c>)
 801a024:	f240 32c9 	movw	r2, #969	; 0x3c9
 801a028:	4965      	ldr	r1, [pc, #404]	; (801a1c0 <etharp_query+0x280>)
 801a02a:	4866      	ldr	r0, [pc, #408]	; (801a1c4 <etharp_query+0x284>)
 801a02c:	f00b ff5c 	bl	8025ee8 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a030:	6a3b      	ldr	r3, [r7, #32]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d102      	bne.n	801a03c <etharp_query+0xfc>
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d10c      	bne.n	801a056 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a03c:	68b9      	ldr	r1, [r7, #8]
 801a03e:	68f8      	ldr	r0, [r7, #12]
 801a040:	f000 f976 	bl	801a330 <etharp_request>
 801a044:	4603      	mov	r3, r0
 801a046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d102      	bne.n	801a056 <etharp_query+0x116>
      return result;
 801a050:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a054:	e0ab      	b.n	801a1ae <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d106      	bne.n	801a06a <etharp_query+0x12a>
 801a05c:	4b57      	ldr	r3, [pc, #348]	; (801a1bc <etharp_query+0x27c>)
 801a05e:	f240 32db 	movw	r2, #987	; 0x3db
 801a062:	4959      	ldr	r1, [pc, #356]	; (801a1c8 <etharp_query+0x288>)
 801a064:	4857      	ldr	r0, [pc, #348]	; (801a1c4 <etharp_query+0x284>)
 801a066:	f00b ff3f 	bl	8025ee8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a06a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a06e:	4952      	ldr	r1, [pc, #328]	; (801a1b8 <etharp_query+0x278>)
 801a070:	4613      	mov	r3, r2
 801a072:	005b      	lsls	r3, r3, #1
 801a074:	4413      	add	r3, r2
 801a076:	00db      	lsls	r3, r3, #3
 801a078:	440b      	add	r3, r1
 801a07a:	3314      	adds	r3, #20
 801a07c:	781b      	ldrb	r3, [r3, #0]
 801a07e:	2b01      	cmp	r3, #1
 801a080:	d919      	bls.n	801a0b6 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801a082:	7cfa      	ldrb	r2, [r7, #19]
 801a084:	4b51      	ldr	r3, [pc, #324]	; (801a1cc <etharp_query+0x28c>)
 801a086:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a088:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a08c:	4613      	mov	r3, r2
 801a08e:	005b      	lsls	r3, r3, #1
 801a090:	4413      	add	r3, r2
 801a092:	00db      	lsls	r3, r3, #3
 801a094:	3308      	adds	r3, #8
 801a096:	4a48      	ldr	r2, [pc, #288]	; (801a1b8 <etharp_query+0x278>)
 801a098:	4413      	add	r3, r2
 801a09a:	1d1a      	adds	r2, r3, #4
 801a09c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a0a0:	9300      	str	r3, [sp, #0]
 801a0a2:	4613      	mov	r3, r2
 801a0a4:	697a      	ldr	r2, [r7, #20]
 801a0a6:	6879      	ldr	r1, [r7, #4]
 801a0a8:	68f8      	ldr	r0, [r7, #12]
 801a0aa:	f008 fd3b 	bl	8022b24 <ethernet_output>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a0b4:	e079      	b.n	801a1aa <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a0b6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a0ba:	493f      	ldr	r1, [pc, #252]	; (801a1b8 <etharp_query+0x278>)
 801a0bc:	4613      	mov	r3, r2
 801a0be:	005b      	lsls	r3, r3, #1
 801a0c0:	4413      	add	r3, r2
 801a0c2:	00db      	lsls	r3, r3, #3
 801a0c4:	440b      	add	r3, r1
 801a0c6:	3314      	adds	r3, #20
 801a0c8:	781b      	ldrb	r3, [r3, #0]
 801a0ca:	2b01      	cmp	r3, #1
 801a0cc:	d16d      	bne.n	801a1aa <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a0d6:	e01a      	b.n	801a10e <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a0d8:	69fb      	ldr	r3, [r7, #28]
 801a0da:	895a      	ldrh	r2, [r3, #10]
 801a0dc:	69fb      	ldr	r3, [r7, #28]
 801a0de:	891b      	ldrh	r3, [r3, #8]
 801a0e0:	429a      	cmp	r2, r3
 801a0e2:	d10a      	bne.n	801a0fa <etharp_query+0x1ba>
 801a0e4:	69fb      	ldr	r3, [r7, #28]
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d006      	beq.n	801a0fa <etharp_query+0x1ba>
 801a0ec:	4b33      	ldr	r3, [pc, #204]	; (801a1bc <etharp_query+0x27c>)
 801a0ee:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801a0f2:	4937      	ldr	r1, [pc, #220]	; (801a1d0 <etharp_query+0x290>)
 801a0f4:	4833      	ldr	r0, [pc, #204]	; (801a1c4 <etharp_query+0x284>)
 801a0f6:	f00b fef7 	bl	8025ee8 <iprintf>
      if (p->type != PBUF_ROM) {
 801a0fa:	69fb      	ldr	r3, [r7, #28]
 801a0fc:	7b1b      	ldrb	r3, [r3, #12]
 801a0fe:	2b01      	cmp	r3, #1
 801a100:	d002      	beq.n	801a108 <etharp_query+0x1c8>
        copy_needed = 1;
 801a102:	2301      	movs	r3, #1
 801a104:	61bb      	str	r3, [r7, #24]
        break;
 801a106:	e005      	b.n	801a114 <etharp_query+0x1d4>
      }
      p = p->next;
 801a108:	69fb      	ldr	r3, [r7, #28]
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a10e:	69fb      	ldr	r3, [r7, #28]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d1e1      	bne.n	801a0d8 <etharp_query+0x198>
    }
    if (copy_needed) {
 801a114:	69bb      	ldr	r3, [r7, #24]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d017      	beq.n	801a14a <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801a11a:	69fb      	ldr	r3, [r7, #28]
 801a11c:	891b      	ldrh	r3, [r3, #8]
 801a11e:	2200      	movs	r2, #0
 801a120:	4619      	mov	r1, r3
 801a122:	2002      	movs	r0, #2
 801a124:	f002 fad0 	bl	801c6c8 <pbuf_alloc>
 801a128:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801a12a:	69fb      	ldr	r3, [r7, #28]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d011      	beq.n	801a154 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 801a130:	6879      	ldr	r1, [r7, #4]
 801a132:	69f8      	ldr	r0, [r7, #28]
 801a134:	f002 ff6a 	bl	801d00c <pbuf_copy>
 801a138:	4603      	mov	r3, r0
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d00a      	beq.n	801a154 <etharp_query+0x214>
          pbuf_free(p);
 801a13e:	69f8      	ldr	r0, [r7, #28]
 801a140:	f002 fe34 	bl	801cdac <pbuf_free>
          p = NULL;
 801a144:	2300      	movs	r3, #0
 801a146:	61fb      	str	r3, [r7, #28]
 801a148:	e004      	b.n	801a154 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a14e:	69f8      	ldr	r0, [r7, #28]
 801a150:	f002 fede 	bl	801cf10 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a154:	69fb      	ldr	r3, [r7, #28]
 801a156:	2b00      	cmp	r3, #0
 801a158:	d024      	beq.n	801a1a4 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a15a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a15e:	4916      	ldr	r1, [pc, #88]	; (801a1b8 <etharp_query+0x278>)
 801a160:	4613      	mov	r3, r2
 801a162:	005b      	lsls	r3, r3, #1
 801a164:	4413      	add	r3, r2
 801a166:	00db      	lsls	r3, r3, #3
 801a168:	440b      	add	r3, r1
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d00b      	beq.n	801a188 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801a170:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a174:	4910      	ldr	r1, [pc, #64]	; (801a1b8 <etharp_query+0x278>)
 801a176:	4613      	mov	r3, r2
 801a178:	005b      	lsls	r3, r3, #1
 801a17a:	4413      	add	r3, r2
 801a17c:	00db      	lsls	r3, r3, #3
 801a17e:	440b      	add	r3, r1
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	4618      	mov	r0, r3
 801a184:	f002 fe12 	bl	801cdac <pbuf_free>
      }
      arp_table[i].q = p;
 801a188:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801a18c:	490a      	ldr	r1, [pc, #40]	; (801a1b8 <etharp_query+0x278>)
 801a18e:	4613      	mov	r3, r2
 801a190:	005b      	lsls	r3, r3, #1
 801a192:	4413      	add	r3, r2
 801a194:	00db      	lsls	r3, r3, #3
 801a196:	440b      	add	r3, r1
 801a198:	69fa      	ldr	r2, [r7, #28]
 801a19a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a19c:	2300      	movs	r3, #0
 801a19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a1a2:	e002      	b.n	801a1aa <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a1a4:	23ff      	movs	r3, #255	; 0xff
 801a1a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801a1aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	3728      	adds	r7, #40	; 0x28
 801a1b2:	46bd      	mov	sp, r7
 801a1b4:	bd80      	pop	{r7, pc}
 801a1b6:	bf00      	nop
 801a1b8:	2000939c 	.word	0x2000939c
 801a1bc:	08027424 	.word	0x08027424
 801a1c0:	080275d0 	.word	0x080275d0
 801a1c4:	0802749c 	.word	0x0802749c
 801a1c8:	080275c4 	.word	0x080275c4
 801a1cc:	2000948c 	.word	0x2000948c
 801a1d0:	080275f8 	.word	0x080275f8

0801a1d4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b08a      	sub	sp, #40	; 0x28
 801a1d8:	af02      	add	r7, sp, #8
 801a1da:	60f8      	str	r0, [r7, #12]
 801a1dc:	60b9      	str	r1, [r7, #8]
 801a1de:	607a      	str	r2, [r7, #4]
 801a1e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d106      	bne.n	801a1fa <etharp_raw+0x26>
 801a1ec:	4b3a      	ldr	r3, [pc, #232]	; (801a2d8 <etharp_raw+0x104>)
 801a1ee:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801a1f2:	493a      	ldr	r1, [pc, #232]	; (801a2dc <etharp_raw+0x108>)
 801a1f4:	483a      	ldr	r0, [pc, #232]	; (801a2e0 <etharp_raw+0x10c>)
 801a1f6:	f00b fe77 	bl	8025ee8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a1fa:	2200      	movs	r2, #0
 801a1fc:	211c      	movs	r1, #28
 801a1fe:	2002      	movs	r0, #2
 801a200:	f002 fa62 	bl	801c6c8 <pbuf_alloc>
 801a204:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a206:	69bb      	ldr	r3, [r7, #24]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d102      	bne.n	801a212 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a20c:	f04f 33ff 	mov.w	r3, #4294967295
 801a210:	e05d      	b.n	801a2ce <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a212:	69bb      	ldr	r3, [r7, #24]
 801a214:	895b      	ldrh	r3, [r3, #10]
 801a216:	2b1b      	cmp	r3, #27
 801a218:	d806      	bhi.n	801a228 <etharp_raw+0x54>
 801a21a:	4b2f      	ldr	r3, [pc, #188]	; (801a2d8 <etharp_raw+0x104>)
 801a21c:	f240 4264 	movw	r2, #1124	; 0x464
 801a220:	4930      	ldr	r1, [pc, #192]	; (801a2e4 <etharp_raw+0x110>)
 801a222:	482f      	ldr	r0, [pc, #188]	; (801a2e0 <etharp_raw+0x10c>)
 801a224:	f00b fe60 	bl	8025ee8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a228:	69bb      	ldr	r3, [r7, #24]
 801a22a:	685b      	ldr	r3, [r3, #4]
 801a22c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a22e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a230:	4618      	mov	r0, r3
 801a232:	f7ff f93d 	bl	80194b0 <lwip_htons>
 801a236:	4603      	mov	r3, r0
 801a238:	461a      	mov	r2, r3
 801a23a:	697b      	ldr	r3, [r7, #20]
 801a23c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a244:	2b06      	cmp	r3, #6
 801a246:	d006      	beq.n	801a256 <etharp_raw+0x82>
 801a248:	4b23      	ldr	r3, [pc, #140]	; (801a2d8 <etharp_raw+0x104>)
 801a24a:	f240 426b 	movw	r2, #1131	; 0x46b
 801a24e:	4926      	ldr	r1, [pc, #152]	; (801a2e8 <etharp_raw+0x114>)
 801a250:	4823      	ldr	r0, [pc, #140]	; (801a2e0 <etharp_raw+0x10c>)
 801a252:	f00b fe49 	bl	8025ee8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801a256:	697b      	ldr	r3, [r7, #20]
 801a258:	3308      	adds	r3, #8
 801a25a:	2206      	movs	r2, #6
 801a25c:	6839      	ldr	r1, [r7, #0]
 801a25e:	4618      	mov	r0, r3
 801a260:	f00c fb11 	bl	8026886 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801a264:	697b      	ldr	r3, [r7, #20]
 801a266:	3312      	adds	r3, #18
 801a268:	2206      	movs	r2, #6
 801a26a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a26c:	4618      	mov	r0, r3
 801a26e:	f00c fb0a 	bl	8026886 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801a272:	697b      	ldr	r3, [r7, #20]
 801a274:	330e      	adds	r3, #14
 801a276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a278:	6812      	ldr	r2, [r2, #0]
 801a27a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801a27c:	697b      	ldr	r3, [r7, #20]
 801a27e:	3318      	adds	r3, #24
 801a280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a282:	6812      	ldr	r2, [r2, #0]
 801a284:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801a286:	697b      	ldr	r3, [r7, #20]
 801a288:	2200      	movs	r2, #0
 801a28a:	701a      	strb	r2, [r3, #0]
 801a28c:	2200      	movs	r2, #0
 801a28e:	f042 0201 	orr.w	r2, r2, #1
 801a292:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a294:	697b      	ldr	r3, [r7, #20]
 801a296:	2200      	movs	r2, #0
 801a298:	f042 0208 	orr.w	r2, r2, #8
 801a29c:	709a      	strb	r2, [r3, #2]
 801a29e:	2200      	movs	r2, #0
 801a2a0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a2a2:	697b      	ldr	r3, [r7, #20]
 801a2a4:	2206      	movs	r2, #6
 801a2a6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a2a8:	697b      	ldr	r3, [r7, #20]
 801a2aa:	2204      	movs	r2, #4
 801a2ac:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a2ae:	f640 0306 	movw	r3, #2054	; 0x806
 801a2b2:	9300      	str	r3, [sp, #0]
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	68ba      	ldr	r2, [r7, #8]
 801a2b8:	69b9      	ldr	r1, [r7, #24]
 801a2ba:	68f8      	ldr	r0, [r7, #12]
 801a2bc:	f008 fc32 	bl	8022b24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a2c0:	69b8      	ldr	r0, [r7, #24]
 801a2c2:	f002 fd73 	bl	801cdac <pbuf_free>
  p = NULL;
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a2ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	3720      	adds	r7, #32
 801a2d2:	46bd      	mov	sp, r7
 801a2d4:	bd80      	pop	{r7, pc}
 801a2d6:	bf00      	nop
 801a2d8:	08027424 	.word	0x08027424
 801a2dc:	08027574 	.word	0x08027574
 801a2e0:	0802749c 	.word	0x0802749c
 801a2e4:	08027614 	.word	0x08027614
 801a2e8:	08027648 	.word	0x08027648

0801a2ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b088      	sub	sp, #32
 801a2f0:	af04      	add	r7, sp, #16
 801a2f2:	60f8      	str	r0, [r7, #12]
 801a2f4:	60b9      	str	r1, [r7, #8]
 801a2f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	f103 0025 	add.w	r0, r3, #37	; 0x25
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a308:	2201      	movs	r2, #1
 801a30a:	9203      	str	r2, [sp, #12]
 801a30c:	68ba      	ldr	r2, [r7, #8]
 801a30e:	9202      	str	r2, [sp, #8]
 801a310:	4a06      	ldr	r2, [pc, #24]	; (801a32c <etharp_request_dst+0x40>)
 801a312:	9201      	str	r2, [sp, #4]
 801a314:	9300      	str	r3, [sp, #0]
 801a316:	4603      	mov	r3, r0
 801a318:	687a      	ldr	r2, [r7, #4]
 801a31a:	68f8      	ldr	r0, [r7, #12]
 801a31c:	f7ff ff5a 	bl	801a1d4 <etharp_raw>
 801a320:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a322:	4618      	mov	r0, r3
 801a324:	3710      	adds	r7, #16
 801a326:	46bd      	mov	sp, r7
 801a328:	bd80      	pop	{r7, pc}
 801a32a:	bf00      	nop
 801a32c:	0802b6f4 	.word	0x0802b6f4

0801a330 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b082      	sub	sp, #8
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
 801a338:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a33a:	4a05      	ldr	r2, [pc, #20]	; (801a350 <etharp_request+0x20>)
 801a33c:	6839      	ldr	r1, [r7, #0]
 801a33e:	6878      	ldr	r0, [r7, #4]
 801a340:	f7ff ffd4 	bl	801a2ec <etharp_request_dst>
 801a344:	4603      	mov	r3, r0
}
 801a346:	4618      	mov	r0, r3
 801a348:	3708      	adds	r7, #8
 801a34a:	46bd      	mov	sp, r7
 801a34c:	bd80      	pop	{r7, pc}
 801a34e:	bf00      	nop
 801a350:	0802b6ec 	.word	0x0802b6ec

0801a354 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a354:	b580      	push	{r7, lr}
 801a356:	b08e      	sub	sp, #56	; 0x38
 801a358:	af04      	add	r7, sp, #16
 801a35a:	6078      	str	r0, [r7, #4]
 801a35c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a35e:	4b7a      	ldr	r3, [pc, #488]	; (801a548 <icmp_input+0x1f4>)
 801a360:	689b      	ldr	r3, [r3, #8]
 801a362:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a366:	781b      	ldrb	r3, [r3, #0]
 801a368:	b29b      	uxth	r3, r3
 801a36a:	f003 030f 	and.w	r3, r3, #15
 801a36e:	b29b      	uxth	r3, r3
 801a370:	009b      	lsls	r3, r3, #2
 801a372:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801a374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a376:	2b13      	cmp	r3, #19
 801a378:	f240 80d1 	bls.w	801a51e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	895b      	ldrh	r3, [r3, #10]
 801a380:	2b03      	cmp	r3, #3
 801a382:	f240 80ce 	bls.w	801a522 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	685b      	ldr	r3, [r3, #4]
 801a38a:	781b      	ldrb	r3, [r3, #0]
 801a38c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a390:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a394:	2b00      	cmp	r3, #0
 801a396:	f000 80bb 	beq.w	801a510 <icmp_input+0x1bc>
 801a39a:	2b08      	cmp	r3, #8
 801a39c:	f040 80bb 	bne.w	801a516 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801a3a0:	4b6a      	ldr	r3, [pc, #424]	; (801a54c <icmp_input+0x1f8>)
 801a3a2:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a3a4:	4b68      	ldr	r3, [pc, #416]	; (801a548 <icmp_input+0x1f4>)
 801a3a6:	695b      	ldr	r3, [r3, #20]
 801a3a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a3ac:	2be0      	cmp	r3, #224	; 0xe0
 801a3ae:	f000 80bf 	beq.w	801a530 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a3b2:	4b65      	ldr	r3, [pc, #404]	; (801a548 <icmp_input+0x1f4>)
 801a3b4:	695a      	ldr	r2, [r3, #20]
 801a3b6:	4b64      	ldr	r3, [pc, #400]	; (801a548 <icmp_input+0x1f4>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	4619      	mov	r1, r3
 801a3bc:	4610      	mov	r0, r2
 801a3be:	f000 fbc5 	bl	801ab4c <ip4_addr_isbroadcast_u32>
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	f040 80b5 	bne.w	801a534 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	891b      	ldrh	r3, [r3, #8]
 801a3ce:	2b07      	cmp	r3, #7
 801a3d0:	f240 80a9 	bls.w	801a526 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801a3d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a3d6:	330e      	adds	r3, #14
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	b21b      	sxth	r3, r3
 801a3dc:	4619      	mov	r1, r3
 801a3de:	6878      	ldr	r0, [r7, #4]
 801a3e0:	f002 fcc0 	bl	801cd64 <pbuf_header>
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d046      	beq.n	801a478 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	891a      	ldrh	r2, [r3, #8]
 801a3ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a3f0:	4413      	add	r3, r2
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	2200      	movs	r2, #0
 801a3f6:	4619      	mov	r1, r3
 801a3f8:	2002      	movs	r0, #2
 801a3fa:	f002 f965 	bl	801c6c8 <pbuf_alloc>
 801a3fe:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801a400:	69bb      	ldr	r3, [r7, #24]
 801a402:	2b00      	cmp	r3, #0
 801a404:	f000 8098 	beq.w	801a538 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a408:	69bb      	ldr	r3, [r7, #24]
 801a40a:	895b      	ldrh	r3, [r3, #10]
 801a40c:	461a      	mov	r2, r3
 801a40e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a410:	3308      	adds	r3, #8
 801a412:	429a      	cmp	r2, r3
 801a414:	d203      	bcs.n	801a41e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801a416:	69b8      	ldr	r0, [r7, #24]
 801a418:	f002 fcc8 	bl	801cdac <pbuf_free>
        goto icmperr;
 801a41c:	e08d      	b.n	801a53a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801a41e:	69bb      	ldr	r3, [r7, #24]
 801a420:	685b      	ldr	r3, [r3, #4]
 801a422:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a426:	4618      	mov	r0, r3
 801a428:	f00c fa2d 	bl	8026886 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801a42c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a42e:	425b      	negs	r3, r3
 801a430:	b29b      	uxth	r3, r3
 801a432:	b21b      	sxth	r3, r3
 801a434:	4619      	mov	r1, r3
 801a436:	69b8      	ldr	r0, [r7, #24]
 801a438:	f002 fc94 	bl	801cd64 <pbuf_header>
 801a43c:	4603      	mov	r3, r0
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d009      	beq.n	801a456 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a442:	4b43      	ldr	r3, [pc, #268]	; (801a550 <icmp_input+0x1fc>)
 801a444:	22af      	movs	r2, #175	; 0xaf
 801a446:	4943      	ldr	r1, [pc, #268]	; (801a554 <icmp_input+0x200>)
 801a448:	4843      	ldr	r0, [pc, #268]	; (801a558 <icmp_input+0x204>)
 801a44a:	f00b fd4d 	bl	8025ee8 <iprintf>
        pbuf_free(r);
 801a44e:	69b8      	ldr	r0, [r7, #24]
 801a450:	f002 fcac 	bl	801cdac <pbuf_free>
        goto icmperr;
 801a454:	e071      	b.n	801a53a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801a456:	6879      	ldr	r1, [r7, #4]
 801a458:	69b8      	ldr	r0, [r7, #24]
 801a45a:	f002 fdd7 	bl	801d00c <pbuf_copy>
 801a45e:	4603      	mov	r3, r0
 801a460:	2b00      	cmp	r3, #0
 801a462:	d003      	beq.n	801a46c <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801a464:	69b8      	ldr	r0, [r7, #24]
 801a466:	f002 fca1 	bl	801cdac <pbuf_free>
        goto icmperr;
 801a46a:	e066      	b.n	801a53a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 801a46c:	6878      	ldr	r0, [r7, #4]
 801a46e:	f002 fc9d 	bl	801cdac <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801a472:	69bb      	ldr	r3, [r7, #24]
 801a474:	607b      	str	r3, [r7, #4]
 801a476:	e015      	b.n	801a4a4 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801a478:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a47a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801a47e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801a482:	33f2      	adds	r3, #242	; 0xf2
 801a484:	b29b      	uxth	r3, r3
 801a486:	b21b      	sxth	r3, r3
 801a488:	4619      	mov	r1, r3
 801a48a:	6878      	ldr	r0, [r7, #4]
 801a48c:	f002 fc6a 	bl	801cd64 <pbuf_header>
 801a490:	4603      	mov	r3, r0
 801a492:	2b00      	cmp	r3, #0
 801a494:	d006      	beq.n	801a4a4 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a496:	4b2e      	ldr	r3, [pc, #184]	; (801a550 <icmp_input+0x1fc>)
 801a498:	22c0      	movs	r2, #192	; 0xc0
 801a49a:	4930      	ldr	r1, [pc, #192]	; (801a55c <icmp_input+0x208>)
 801a49c:	482e      	ldr	r0, [pc, #184]	; (801a558 <icmp_input+0x204>)
 801a49e:	f00b fd23 	bl	8025ee8 <iprintf>
        goto icmperr;
 801a4a2:	e04a      	b.n	801a53a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	685b      	ldr	r3, [r3, #4]
 801a4a8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801a4aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a4ae:	4619      	mov	r1, r3
 801a4b0:	6878      	ldr	r0, [r7, #4]
 801a4b2:	f002 fc57 	bl	801cd64 <pbuf_header>
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d12b      	bne.n	801a514 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	685b      	ldr	r3, [r3, #4]
 801a4c0:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801a4c2:	69fb      	ldr	r3, [r7, #28]
 801a4c4:	681a      	ldr	r2, [r3, #0]
 801a4c6:	693b      	ldr	r3, [r7, #16]
 801a4c8:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a4ca:	4b1f      	ldr	r3, [pc, #124]	; (801a548 <icmp_input+0x1f4>)
 801a4cc:	691a      	ldr	r2, [r3, #16]
 801a4ce:	693b      	ldr	r3, [r7, #16]
 801a4d0:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a4d2:	697b      	ldr	r3, [r7, #20]
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 801a4d8:	697b      	ldr	r3, [r7, #20]
 801a4da:	2200      	movs	r2, #0
 801a4dc:	709a      	strb	r2, [r3, #2]
 801a4de:	2200      	movs	r2, #0
 801a4e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801a4e2:	693b      	ldr	r3, [r7, #16]
 801a4e4:	22ff      	movs	r2, #255	; 0xff
 801a4e6:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801a4e8:	693b      	ldr	r3, [r7, #16]
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	729a      	strb	r2, [r3, #10]
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a4f2:	683b      	ldr	r3, [r7, #0]
 801a4f4:	9302      	str	r3, [sp, #8]
 801a4f6:	2301      	movs	r3, #1
 801a4f8:	9301      	str	r3, [sp, #4]
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	9300      	str	r3, [sp, #0]
 801a4fe:	23ff      	movs	r3, #255	; 0xff
 801a500:	2200      	movs	r2, #0
 801a502:	69f9      	ldr	r1, [r7, #28]
 801a504:	6878      	ldr	r0, [r7, #4]
 801a506:	f000 fa4f 	bl	801a9a8 <ip4_output_if>
 801a50a:	4603      	mov	r3, r0
 801a50c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801a50e:	e001      	b.n	801a514 <icmp_input+0x1c0>
    break;
 801a510:	bf00      	nop
 801a512:	e000      	b.n	801a516 <icmp_input+0x1c2>
    break;
 801a514:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a516:	6878      	ldr	r0, [r7, #4]
 801a518:	f002 fc48 	bl	801cdac <pbuf_free>
  return;
 801a51c:	e011      	b.n	801a542 <icmp_input+0x1ee>
    goto lenerr;
 801a51e:	bf00      	nop
 801a520:	e002      	b.n	801a528 <icmp_input+0x1d4>
    goto lenerr;
 801a522:	bf00      	nop
 801a524:	e000      	b.n	801a528 <icmp_input+0x1d4>
      goto lenerr;
 801a526:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a528:	6878      	ldr	r0, [r7, #4]
 801a52a:	f002 fc3f 	bl	801cdac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a52e:	e008      	b.n	801a542 <icmp_input+0x1ee>
      goto icmperr;
 801a530:	bf00      	nop
 801a532:	e002      	b.n	801a53a <icmp_input+0x1e6>
      goto icmperr;
 801a534:	bf00      	nop
 801a536:	e000      	b.n	801a53a <icmp_input+0x1e6>
        goto icmperr;
 801a538:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a53a:	6878      	ldr	r0, [r7, #4]
 801a53c:	f002 fc36 	bl	801cdac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a540:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a542:	3728      	adds	r7, #40	; 0x28
 801a544:	46bd      	mov	sp, r7
 801a546:	bd80      	pop	{r7, pc}
 801a548:	2000a260 	.word	0x2000a260
 801a54c:	2000a274 	.word	0x2000a274
 801a550:	0802768c 	.word	0x0802768c
 801a554:	080276c4 	.word	0x080276c4
 801a558:	080276fc 	.word	0x080276fc
 801a55c:	08027724 	.word	0x08027724

0801a560 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b082      	sub	sp, #8
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
 801a568:	460b      	mov	r3, r1
 801a56a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a56c:	78fb      	ldrb	r3, [r7, #3]
 801a56e:	461a      	mov	r2, r3
 801a570:	2103      	movs	r1, #3
 801a572:	6878      	ldr	r0, [r7, #4]
 801a574:	f000 f814 	bl	801a5a0 <icmp_send_response>
}
 801a578:	bf00      	nop
 801a57a:	3708      	adds	r7, #8
 801a57c:	46bd      	mov	sp, r7
 801a57e:	bd80      	pop	{r7, pc}

0801a580 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a580:	b580      	push	{r7, lr}
 801a582:	b082      	sub	sp, #8
 801a584:	af00      	add	r7, sp, #0
 801a586:	6078      	str	r0, [r7, #4]
 801a588:	460b      	mov	r3, r1
 801a58a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a58c:	78fb      	ldrb	r3, [r7, #3]
 801a58e:	461a      	mov	r2, r3
 801a590:	210b      	movs	r1, #11
 801a592:	6878      	ldr	r0, [r7, #4]
 801a594:	f000 f804 	bl	801a5a0 <icmp_send_response>
}
 801a598:	bf00      	nop
 801a59a:	3708      	adds	r7, #8
 801a59c:	46bd      	mov	sp, r7
 801a59e:	bd80      	pop	{r7, pc}

0801a5a0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a5a0:	b580      	push	{r7, lr}
 801a5a2:	b08c      	sub	sp, #48	; 0x30
 801a5a4:	af04      	add	r7, sp, #16
 801a5a6:	6078      	str	r0, [r7, #4]
 801a5a8:	460b      	mov	r3, r1
 801a5aa:	70fb      	strb	r3, [r7, #3]
 801a5ac:	4613      	mov	r3, r2
 801a5ae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	2124      	movs	r1, #36	; 0x24
 801a5b4:	2001      	movs	r0, #1
 801a5b6:	f002 f887 	bl	801c6c8 <pbuf_alloc>
 801a5ba:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a5bc:	69fb      	ldr	r3, [r7, #28]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d04c      	beq.n	801a65c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a5c2:	69fb      	ldr	r3, [r7, #28]
 801a5c4:	895b      	ldrh	r3, [r3, #10]
 801a5c6:	2b23      	cmp	r3, #35	; 0x23
 801a5c8:	d806      	bhi.n	801a5d8 <icmp_send_response+0x38>
 801a5ca:	4b26      	ldr	r3, [pc, #152]	; (801a664 <icmp_send_response+0xc4>)
 801a5cc:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801a5d0:	4925      	ldr	r1, [pc, #148]	; (801a668 <icmp_send_response+0xc8>)
 801a5d2:	4826      	ldr	r0, [pc, #152]	; (801a66c <icmp_send_response+0xcc>)
 801a5d4:	f00b fc88 	bl	8025ee8 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	685b      	ldr	r3, [r3, #4]
 801a5dc:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a5de:	69fb      	ldr	r3, [r7, #28]
 801a5e0:	685b      	ldr	r3, [r3, #4]
 801a5e2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a5e4:	697b      	ldr	r3, [r7, #20]
 801a5e6:	78fa      	ldrb	r2, [r7, #3]
 801a5e8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a5ea:	697b      	ldr	r3, [r7, #20]
 801a5ec:	78ba      	ldrb	r2, [r7, #2]
 801a5ee:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a5f0:	697b      	ldr	r3, [r7, #20]
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	711a      	strb	r2, [r3, #4]
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a5fa:	697b      	ldr	r3, [r7, #20]
 801a5fc:	2200      	movs	r2, #0
 801a5fe:	719a      	strb	r2, [r3, #6]
 801a600:	2200      	movs	r2, #0
 801a602:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a604:	69fb      	ldr	r3, [r7, #28]
 801a606:	685b      	ldr	r3, [r3, #4]
 801a608:	f103 0008 	add.w	r0, r3, #8
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	685b      	ldr	r3, [r3, #4]
 801a610:	221c      	movs	r2, #28
 801a612:	4619      	mov	r1, r3
 801a614:	f00c f937 	bl	8026886 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a618:	69bb      	ldr	r3, [r7, #24]
 801a61a:	68db      	ldr	r3, [r3, #12]
 801a61c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a61e:	f107 030c 	add.w	r3, r7, #12
 801a622:	4618      	mov	r0, r3
 801a624:	f000 f824 	bl	801a670 <ip4_route>
 801a628:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a62a:	693b      	ldr	r3, [r7, #16]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d011      	beq.n	801a654 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a630:	697b      	ldr	r3, [r7, #20]
 801a632:	2200      	movs	r2, #0
 801a634:	709a      	strb	r2, [r3, #2]
 801a636:	2200      	movs	r2, #0
 801a638:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a63a:	f107 020c 	add.w	r2, r7, #12
 801a63e:	693b      	ldr	r3, [r7, #16]
 801a640:	9302      	str	r3, [sp, #8]
 801a642:	2301      	movs	r3, #1
 801a644:	9301      	str	r3, [sp, #4]
 801a646:	2300      	movs	r3, #0
 801a648:	9300      	str	r3, [sp, #0]
 801a64a:	23ff      	movs	r3, #255	; 0xff
 801a64c:	2100      	movs	r1, #0
 801a64e:	69f8      	ldr	r0, [r7, #28]
 801a650:	f000 f9aa 	bl	801a9a8 <ip4_output_if>
  }
  pbuf_free(q);
 801a654:	69f8      	ldr	r0, [r7, #28]
 801a656:	f002 fba9 	bl	801cdac <pbuf_free>
 801a65a:	e000      	b.n	801a65e <icmp_send_response+0xbe>
    return;
 801a65c:	bf00      	nop
}
 801a65e:	3720      	adds	r7, #32
 801a660:	46bd      	mov	sp, r7
 801a662:	bd80      	pop	{r7, pc}
 801a664:	0802768c 	.word	0x0802768c
 801a668:	08027758 	.word	0x08027758
 801a66c:	080276fc 	.word	0x080276fc

0801a670 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a670:	b480      	push	{r7}
 801a672:	b085      	sub	sp, #20
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801a678:	4b2f      	ldr	r3, [pc, #188]	; (801a738 <ip4_route+0xc8>)
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	60fb      	str	r3, [r7, #12]
 801a67e:	e033      	b.n	801a6e8 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a686:	f003 0301 	and.w	r3, r3, #1
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d029      	beq.n	801a6e2 <ip4_route+0x72>
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a694:	f003 0304 	and.w	r3, r3, #4
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d022      	beq.n	801a6e2 <ip4_route+0x72>
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	3304      	adds	r3, #4
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d01d      	beq.n	801a6e2 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	681a      	ldr	r2, [r3, #0]
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	3304      	adds	r3, #4
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	405a      	eors	r2, r3
 801a6b2:	68fb      	ldr	r3, [r7, #12]
 801a6b4:	3308      	adds	r3, #8
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	4013      	ands	r3, r2
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d101      	bne.n	801a6c2 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	e033      	b.n	801a72a <ip4_route+0xba>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a6c8:	f003 0302 	and.w	r3, r3, #2
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d108      	bne.n	801a6e2 <ip4_route+0x72>
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	681a      	ldr	r2, [r3, #0]
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	330c      	adds	r3, #12
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	429a      	cmp	r2, r3
 801a6dc:	d101      	bne.n	801a6e2 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	e023      	b.n	801a72a <ip4_route+0xba>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	60fb      	str	r3, [r7, #12]
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d1c8      	bne.n	801a680 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a6ee:	4b13      	ldr	r3, [pc, #76]	; (801a73c <ip4_route+0xcc>)
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d015      	beq.n	801a722 <ip4_route+0xb2>
 801a6f6:	4b11      	ldr	r3, [pc, #68]	; (801a73c <ip4_route+0xcc>)
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a6fe:	f003 0301 	and.w	r3, r3, #1
 801a702:	2b00      	cmp	r3, #0
 801a704:	d00d      	beq.n	801a722 <ip4_route+0xb2>
 801a706:	4b0d      	ldr	r3, [pc, #52]	; (801a73c <ip4_route+0xcc>)
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a70e:	f003 0304 	and.w	r3, r3, #4
 801a712:	2b00      	cmp	r3, #0
 801a714:	d005      	beq.n	801a722 <ip4_route+0xb2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801a716:	4b09      	ldr	r3, [pc, #36]	; (801a73c <ip4_route+0xcc>)
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	3304      	adds	r3, #4
 801a71c:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d101      	bne.n	801a726 <ip4_route+0xb6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a722:	2300      	movs	r3, #0
 801a724:	e001      	b.n	801a72a <ip4_route+0xba>
  }

  return netif_default;
 801a726:	4b05      	ldr	r3, [pc, #20]	; (801a73c <ip4_route+0xcc>)
 801a728:	681b      	ldr	r3, [r3, #0]
}
 801a72a:	4618      	mov	r0, r3
 801a72c:	3714      	adds	r7, #20
 801a72e:	46bd      	mov	sp, r7
 801a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a734:	4770      	bx	lr
 801a736:	bf00      	nop
 801a738:	2000ecb4 	.word	0x2000ecb4
 801a73c:	2000ecb8 	.word	0x2000ecb8

0801a740 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a740:	b580      	push	{r7, lr}
 801a742:	b086      	sub	sp, #24
 801a744:	af00      	add	r7, sp, #0
 801a746:	6078      	str	r0, [r7, #4]
 801a748:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	685b      	ldr	r3, [r3, #4]
 801a74e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801a750:	697b      	ldr	r3, [r7, #20]
 801a752:	781b      	ldrb	r3, [r3, #0]
 801a754:	091b      	lsrs	r3, r3, #4
 801a756:	b2db      	uxtb	r3, r3
 801a758:	2b04      	cmp	r3, #4
 801a75a:	d004      	beq.n	801a766 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a75c:	6878      	ldr	r0, [r7, #4]
 801a75e:	f002 fb25 	bl	801cdac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a762:	2300      	movs	r3, #0
 801a764:	e118      	b.n	801a998 <ip4_input+0x258>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801a766:	697b      	ldr	r3, [r7, #20]
 801a768:	781b      	ldrb	r3, [r3, #0]
 801a76a:	b29b      	uxth	r3, r3
 801a76c:	f003 030f 	and.w	r3, r3, #15
 801a770:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801a772:	897b      	ldrh	r3, [r7, #10]
 801a774:	009b      	lsls	r3, r3, #2
 801a776:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a778:	697b      	ldr	r3, [r7, #20]
 801a77a:	885b      	ldrh	r3, [r3, #2]
 801a77c:	b29b      	uxth	r3, r3
 801a77e:	4618      	mov	r0, r3
 801a780:	f7fe fe96 	bl	80194b0 <lwip_htons>
 801a784:	4603      	mov	r3, r0
 801a786:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	891b      	ldrh	r3, [r3, #8]
 801a78c:	893a      	ldrh	r2, [r7, #8]
 801a78e:	429a      	cmp	r2, r3
 801a790:	d204      	bcs.n	801a79c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801a792:	893b      	ldrh	r3, [r7, #8]
 801a794:	4619      	mov	r1, r3
 801a796:	6878      	ldr	r0, [r7, #4]
 801a798:	f002 f994 	bl	801cac4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	895b      	ldrh	r3, [r3, #10]
 801a7a0:	897a      	ldrh	r2, [r7, #10]
 801a7a2:	429a      	cmp	r2, r3
 801a7a4:	d807      	bhi.n	801a7b6 <ip4_input+0x76>
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	891b      	ldrh	r3, [r3, #8]
 801a7aa:	893a      	ldrh	r2, [r7, #8]
 801a7ac:	429a      	cmp	r2, r3
 801a7ae:	d802      	bhi.n	801a7b6 <ip4_input+0x76>
 801a7b0:	897b      	ldrh	r3, [r7, #10]
 801a7b2:	2b13      	cmp	r3, #19
 801a7b4:	d804      	bhi.n	801a7c0 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a7b6:	6878      	ldr	r0, [r7, #4]
 801a7b8:	f002 faf8 	bl	801cdac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a7bc:	2300      	movs	r3, #0
 801a7be:	e0eb      	b.n	801a998 <ip4_input+0x258>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a7c0:	697b      	ldr	r3, [r7, #20]
 801a7c2:	691b      	ldr	r3, [r3, #16]
 801a7c4:	4a76      	ldr	r2, [pc, #472]	; (801a9a0 <ip4_input+0x260>)
 801a7c6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a7c8:	697b      	ldr	r3, [r7, #20]
 801a7ca:	68db      	ldr	r3, [r3, #12]
 801a7cc:	4a74      	ldr	r2, [pc, #464]	; (801a9a0 <ip4_input+0x260>)
 801a7ce:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a7d0:	4b73      	ldr	r3, [pc, #460]	; (801a9a0 <ip4_input+0x260>)
 801a7d2:	695b      	ldr	r3, [r3, #20]
 801a7d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a7d8:	2be0      	cmp	r3, #224	; 0xe0
 801a7da:	d111      	bne.n	801a800 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a7dc:	683b      	ldr	r3, [r7, #0]
 801a7de:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a7e2:	f003 0301 	and.w	r3, r3, #1
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d007      	beq.n	801a7fa <ip4_input+0xba>
 801a7ea:	683b      	ldr	r3, [r7, #0]
 801a7ec:	3304      	adds	r3, #4
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d002      	beq.n	801a7fa <ip4_input+0xba>
      netif = inp;
 801a7f4:	683b      	ldr	r3, [r7, #0]
 801a7f6:	613b      	str	r3, [r7, #16]
 801a7f8:	e040      	b.n	801a87c <ip4_input+0x13c>
    } else {
      netif = NULL;
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	613b      	str	r3, [r7, #16]
 801a7fe:	e03d      	b.n	801a87c <ip4_input+0x13c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801a800:	2301      	movs	r3, #1
 801a802:	60fb      	str	r3, [r7, #12]
    netif = inp;
 801a804:	683b      	ldr	r3, [r7, #0]
 801a806:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a808:	693b      	ldr	r3, [r7, #16]
 801a80a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801a80e:	f003 0301 	and.w	r3, r3, #1
 801a812:	2b00      	cmp	r3, #0
 801a814:	d014      	beq.n	801a840 <ip4_input+0x100>
 801a816:	693b      	ldr	r3, [r7, #16]
 801a818:	3304      	adds	r3, #4
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d00f      	beq.n	801a840 <ip4_input+0x100>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a820:	4b5f      	ldr	r3, [pc, #380]	; (801a9a0 <ip4_input+0x260>)
 801a822:	695a      	ldr	r2, [r3, #20]
 801a824:	693b      	ldr	r3, [r7, #16]
 801a826:	3304      	adds	r3, #4
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	429a      	cmp	r2, r3
 801a82c:	d026      	beq.n	801a87c <ip4_input+0x13c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a82e:	4b5c      	ldr	r3, [pc, #368]	; (801a9a0 <ip4_input+0x260>)
 801a830:	695b      	ldr	r3, [r3, #20]
 801a832:	6939      	ldr	r1, [r7, #16]
 801a834:	4618      	mov	r0, r3
 801a836:	f000 f989 	bl	801ab4c <ip4_addr_isbroadcast_u32>
 801a83a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d11d      	bne.n	801a87c <ip4_input+0x13c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	2b00      	cmp	r3, #0
 801a844:	d00d      	beq.n	801a862 <ip4_input+0x122>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801a846:	4b56      	ldr	r3, [pc, #344]	; (801a9a0 <ip4_input+0x260>)
 801a848:	695b      	ldr	r3, [r3, #20]
 801a84a:	b2db      	uxtb	r3, r3
 801a84c:	2b7f      	cmp	r3, #127	; 0x7f
 801a84e:	d102      	bne.n	801a856 <ip4_input+0x116>
          netif = NULL;
 801a850:	2300      	movs	r3, #0
 801a852:	613b      	str	r3, [r7, #16]
          break;
 801a854:	e012      	b.n	801a87c <ip4_input+0x13c>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801a856:	2300      	movs	r3, #0
 801a858:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801a85a:	4b52      	ldr	r3, [pc, #328]	; (801a9a4 <ip4_input+0x264>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	613b      	str	r3, [r7, #16]
 801a860:	e002      	b.n	801a868 <ip4_input+0x128>
      } else {
        netif = netif->next;
 801a862:	693b      	ldr	r3, [r7, #16]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 801a868:	693a      	ldr	r2, [r7, #16]
 801a86a:	683b      	ldr	r3, [r7, #0]
 801a86c:	429a      	cmp	r2, r3
 801a86e:	d102      	bne.n	801a876 <ip4_input+0x136>
        netif = netif->next;
 801a870:	693b      	ldr	r3, [r7, #16]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 801a876:	693b      	ldr	r3, [r7, #16]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d1c5      	bne.n	801a808 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a87c:	4b48      	ldr	r3, [pc, #288]	; (801a9a0 <ip4_input+0x260>)
 801a87e:	691b      	ldr	r3, [r3, #16]
 801a880:	6839      	ldr	r1, [r7, #0]
 801a882:	4618      	mov	r0, r3
 801a884:	f000 f962 	bl	801ab4c <ip4_addr_isbroadcast_u32>
 801a888:	4603      	mov	r3, r0
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d105      	bne.n	801a89a <ip4_input+0x15a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a88e:	4b44      	ldr	r3, [pc, #272]	; (801a9a0 <ip4_input+0x260>)
 801a890:	691b      	ldr	r3, [r3, #16]
 801a892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a896:	2be0      	cmp	r3, #224	; 0xe0
 801a898:	d104      	bne.n	801a8a4 <ip4_input+0x164>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a89a:	6878      	ldr	r0, [r7, #4]
 801a89c:	f002 fa86 	bl	801cdac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	e079      	b.n	801a998 <ip4_input+0x258>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a8a4:	693b      	ldr	r3, [r7, #16]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d104      	bne.n	801a8b4 <ip4_input+0x174>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a8aa:	6878      	ldr	r0, [r7, #4]
 801a8ac:	f002 fa7e 	bl	801cdac <pbuf_free>
    return ERR_OK;
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	e071      	b.n	801a998 <ip4_input+0x258>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a8b4:	697b      	ldr	r3, [r7, #20]
 801a8b6:	88db      	ldrh	r3, [r3, #6]
 801a8b8:	b29b      	uxth	r3, r3
 801a8ba:	461a      	mov	r2, r3
 801a8bc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a8c0:	4013      	ands	r3, r2
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d00b      	beq.n	801a8de <ip4_input+0x19e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a8c6:	6878      	ldr	r0, [r7, #4]
 801a8c8:	f000 fe56 	bl	801b578 <ip4_reass>
 801a8cc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d101      	bne.n	801a8d8 <ip4_input+0x198>
      return ERR_OK;
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	e05f      	b.n	801a998 <ip4_input+0x258>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	685b      	ldr	r3, [r3, #4]
 801a8dc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a8de:	4a30      	ldr	r2, [pc, #192]	; (801a9a0 <ip4_input+0x260>)
 801a8e0:	693b      	ldr	r3, [r7, #16]
 801a8e2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a8e4:	4a2e      	ldr	r2, [pc, #184]	; (801a9a0 <ip4_input+0x260>)
 801a8e6:	683b      	ldr	r3, [r7, #0]
 801a8e8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a8ea:	4a2d      	ldr	r2, [pc, #180]	; (801a9a0 <ip4_input+0x260>)
 801a8ec:	697b      	ldr	r3, [r7, #20]
 801a8ee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801a8f0:	697b      	ldr	r3, [r7, #20]
 801a8f2:	781b      	ldrb	r3, [r3, #0]
 801a8f4:	b29b      	uxth	r3, r3
 801a8f6:	f003 030f 	and.w	r3, r3, #15
 801a8fa:	b29b      	uxth	r3, r3
 801a8fc:	009b      	lsls	r3, r3, #2
 801a8fe:	b29a      	uxth	r2, r3
 801a900:	4b27      	ldr	r3, [pc, #156]	; (801a9a0 <ip4_input+0x260>)
 801a902:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801a904:	897b      	ldrh	r3, [r7, #10]
 801a906:	425b      	negs	r3, r3
 801a908:	b29b      	uxth	r3, r3
 801a90a:	b21b      	sxth	r3, r3
 801a90c:	4619      	mov	r1, r3
 801a90e:	6878      	ldr	r0, [r7, #4]
 801a910:	f002 fa28 	bl	801cd64 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 801a914:	697b      	ldr	r3, [r7, #20]
 801a916:	7a5b      	ldrb	r3, [r3, #9]
 801a918:	2b01      	cmp	r3, #1
 801a91a:	d006      	beq.n	801a92a <ip4_input+0x1ea>
 801a91c:	2b06      	cmp	r3, #6
 801a91e:	d109      	bne.n	801a934 <ip4_input+0x1f4>
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 801a920:	6839      	ldr	r1, [r7, #0]
 801a922:	6878      	ldr	r0, [r7, #4]
 801a924:	f004 f90e 	bl	801eb44 <tcp_input>
      break;
 801a928:	e023      	b.n	801a972 <ip4_input+0x232>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801a92a:	6839      	ldr	r1, [r7, #0]
 801a92c:	6878      	ldr	r0, [r7, #4]
 801a92e:	f7ff fd11 	bl	801a354 <icmp_input>
      break;
 801a932:	e01e      	b.n	801a972 <ip4_input+0x232>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a934:	4b1a      	ldr	r3, [pc, #104]	; (801a9a0 <ip4_input+0x260>)
 801a936:	695b      	ldr	r3, [r3, #20]
 801a938:	6939      	ldr	r1, [r7, #16]
 801a93a:	4618      	mov	r0, r3
 801a93c:	f000 f906 	bl	801ab4c <ip4_addr_isbroadcast_u32>
 801a940:	4603      	mov	r3, r0
 801a942:	2b00      	cmp	r3, #0
 801a944:	d112      	bne.n	801a96c <ip4_input+0x22c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a946:	4b16      	ldr	r3, [pc, #88]	; (801a9a0 <ip4_input+0x260>)
 801a948:	695b      	ldr	r3, [r3, #20]
 801a94a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a94e:	2be0      	cmp	r3, #224	; 0xe0
 801a950:	d00c      	beq.n	801a96c <ip4_input+0x22c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801a952:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801a956:	4619      	mov	r1, r3
 801a958:	6878      	ldr	r0, [r7, #4]
 801a95a:	f002 fa15 	bl	801cd88 <pbuf_header_force>
        p->payload = iphdr;
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	697a      	ldr	r2, [r7, #20]
 801a962:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a964:	2102      	movs	r1, #2
 801a966:	6878      	ldr	r0, [r7, #4]
 801a968:	f7ff fdfa 	bl	801a560 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801a96c:	6878      	ldr	r0, [r7, #4]
 801a96e:	f002 fa1d 	bl	801cdac <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a972:	4b0b      	ldr	r3, [pc, #44]	; (801a9a0 <ip4_input+0x260>)
 801a974:	2200      	movs	r2, #0
 801a976:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a978:	4b09      	ldr	r3, [pc, #36]	; (801a9a0 <ip4_input+0x260>)
 801a97a:	2200      	movs	r2, #0
 801a97c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a97e:	4b08      	ldr	r3, [pc, #32]	; (801a9a0 <ip4_input+0x260>)
 801a980:	2200      	movs	r2, #0
 801a982:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a984:	4b06      	ldr	r3, [pc, #24]	; (801a9a0 <ip4_input+0x260>)
 801a986:	2200      	movs	r2, #0
 801a988:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a98a:	4b05      	ldr	r3, [pc, #20]	; (801a9a0 <ip4_input+0x260>)
 801a98c:	2200      	movs	r2, #0
 801a98e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a990:	4b03      	ldr	r3, [pc, #12]	; (801a9a0 <ip4_input+0x260>)
 801a992:	2200      	movs	r2, #0
 801a994:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a996:	2300      	movs	r3, #0
}
 801a998:	4618      	mov	r0, r3
 801a99a:	3718      	adds	r7, #24
 801a99c:	46bd      	mov	sp, r7
 801a99e:	bd80      	pop	{r7, pc}
 801a9a0:	2000a260 	.word	0x2000a260
 801a9a4:	2000ecb4 	.word	0x2000ecb4

0801a9a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b08a      	sub	sp, #40	; 0x28
 801a9ac:	af04      	add	r7, sp, #16
 801a9ae:	60f8      	str	r0, [r7, #12]
 801a9b0:	60b9      	str	r1, [r7, #8]
 801a9b2:	607a      	str	r2, [r7, #4]
 801a9b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a9b6:	68bb      	ldr	r3, [r7, #8]
 801a9b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d009      	beq.n	801a9d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a9c0:	68bb      	ldr	r3, [r7, #8]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d003      	beq.n	801a9ce <ip4_output_if+0x26>
 801a9c6:	68bb      	ldr	r3, [r7, #8]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d102      	bne.n	801a9d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9d0:	3304      	adds	r3, #4
 801a9d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a9d4:	78fa      	ldrb	r2, [r7, #3]
 801a9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9d8:	9302      	str	r3, [sp, #8]
 801a9da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a9de:	9301      	str	r3, [sp, #4]
 801a9e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a9e4:	9300      	str	r3, [sp, #0]
 801a9e6:	4613      	mov	r3, r2
 801a9e8:	687a      	ldr	r2, [r7, #4]
 801a9ea:	6979      	ldr	r1, [r7, #20]
 801a9ec:	68f8      	ldr	r0, [r7, #12]
 801a9ee:	f000 f805 	bl	801a9fc <ip4_output_if_src>
 801a9f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	3718      	adds	r7, #24
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	bd80      	pop	{r7, pc}

0801a9fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b088      	sub	sp, #32
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	60f8      	str	r0, [r7, #12]
 801aa04:	60b9      	str	r1, [r7, #8]
 801aa06:	607a      	str	r2, [r7, #4]
 801aa08:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	89db      	ldrh	r3, [r3, #14]
 801aa0e:	2b01      	cmp	r3, #1
 801aa10:	d006      	beq.n	801aa20 <ip4_output_if_src+0x24>
 801aa12:	4b48      	ldr	r3, [pc, #288]	; (801ab34 <ip4_output_if_src+0x138>)
 801aa14:	f240 3233 	movw	r2, #819	; 0x333
 801aa18:	4947      	ldr	r1, [pc, #284]	; (801ab38 <ip4_output_if_src+0x13c>)
 801aa1a:	4848      	ldr	r0, [pc, #288]	; (801ab3c <ip4_output_if_src+0x140>)
 801aa1c:	f00b fa64 	bl	8025ee8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d060      	beq.n	801aae8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801aa26:	2314      	movs	r3, #20
 801aa28:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801aa2a:	2114      	movs	r1, #20
 801aa2c:	68f8      	ldr	r0, [r7, #12]
 801aa2e:	f002 f999 	bl	801cd64 <pbuf_header>
 801aa32:	4603      	mov	r3, r0
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d002      	beq.n	801aa3e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801aa38:	f06f 0301 	mvn.w	r3, #1
 801aa3c:	e075      	b.n	801ab2a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	685b      	ldr	r3, [r3, #4]
 801aa42:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	895b      	ldrh	r3, [r3, #10]
 801aa48:	2b13      	cmp	r3, #19
 801aa4a:	d806      	bhi.n	801aa5a <ip4_output_if_src+0x5e>
 801aa4c:	4b39      	ldr	r3, [pc, #228]	; (801ab34 <ip4_output_if_src+0x138>)
 801aa4e:	f240 3261 	movw	r2, #865	; 0x361
 801aa52:	493b      	ldr	r1, [pc, #236]	; (801ab40 <ip4_output_if_src+0x144>)
 801aa54:	4839      	ldr	r0, [pc, #228]	; (801ab3c <ip4_output_if_src+0x140>)
 801aa56:	f00b fa47 	bl	8025ee8 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801aa5a:	69bb      	ldr	r3, [r7, #24]
 801aa5c:	78fa      	ldrb	r2, [r7, #3]
 801aa5e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801aa60:	69bb      	ldr	r3, [r7, #24]
 801aa62:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801aa66:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	681a      	ldr	r2, [r3, #0]
 801aa6c:	69bb      	ldr	r3, [r7, #24]
 801aa6e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801aa70:	8bfb      	ldrh	r3, [r7, #30]
 801aa72:	089b      	lsrs	r3, r3, #2
 801aa74:	b29b      	uxth	r3, r3
 801aa76:	b2db      	uxtb	r3, r3
 801aa78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa7c:	b2da      	uxtb	r2, r3
 801aa7e:	69bb      	ldr	r3, [r7, #24]
 801aa80:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801aa82:	69bb      	ldr	r3, [r7, #24]
 801aa84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801aa88:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	891b      	ldrh	r3, [r3, #8]
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f7fe fd0e 	bl	80194b0 <lwip_htons>
 801aa94:	4603      	mov	r3, r0
 801aa96:	461a      	mov	r2, r3
 801aa98:	69bb      	ldr	r3, [r7, #24]
 801aa9a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801aa9c:	69bb      	ldr	r3, [r7, #24]
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	719a      	strb	r2, [r3, #6]
 801aaa2:	2200      	movs	r2, #0
 801aaa4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801aaa6:	4b27      	ldr	r3, [pc, #156]	; (801ab44 <ip4_output_if_src+0x148>)
 801aaa8:	881b      	ldrh	r3, [r3, #0]
 801aaaa:	4618      	mov	r0, r3
 801aaac:	f7fe fd00 	bl	80194b0 <lwip_htons>
 801aab0:	4603      	mov	r3, r0
 801aab2:	461a      	mov	r2, r3
 801aab4:	69bb      	ldr	r3, [r7, #24]
 801aab6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801aab8:	4b22      	ldr	r3, [pc, #136]	; (801ab44 <ip4_output_if_src+0x148>)
 801aaba:	881b      	ldrh	r3, [r3, #0]
 801aabc:	3301      	adds	r3, #1
 801aabe:	b29a      	uxth	r2, r3
 801aac0:	4b20      	ldr	r3, [pc, #128]	; (801ab44 <ip4_output_if_src+0x148>)
 801aac2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801aac4:	68bb      	ldr	r3, [r7, #8]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d104      	bne.n	801aad4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801aaca:	4b1f      	ldr	r3, [pc, #124]	; (801ab48 <ip4_output_if_src+0x14c>)
 801aacc:	681a      	ldr	r2, [r3, #0]
 801aace:	69bb      	ldr	r3, [r7, #24]
 801aad0:	60da      	str	r2, [r3, #12]
 801aad2:	e003      	b.n	801aadc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801aad4:	68bb      	ldr	r3, [r7, #8]
 801aad6:	681a      	ldr	r2, [r3, #0]
 801aad8:	69bb      	ldr	r3, [r7, #24]
 801aada:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801aadc:	69bb      	ldr	r3, [r7, #24]
 801aade:	2200      	movs	r2, #0
 801aae0:	729a      	strb	r2, [r3, #10]
 801aae2:	2200      	movs	r2, #0
 801aae4:	72da      	strb	r2, [r3, #11]
 801aae6:	e008      	b.n	801aafa <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	685b      	ldr	r3, [r3, #4]
 801aaec:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801aaee:	69bb      	ldr	r3, [r7, #24]
 801aaf0:	691b      	ldr	r3, [r3, #16]
 801aaf2:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801aaf4:	f107 0314 	add.w	r3, r7, #20
 801aaf8:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aafc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d00c      	beq.n	801ab1c <ip4_output_if_src+0x120>
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	891a      	ldrh	r2, [r3, #8]
 801ab06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab08:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801ab0a:	429a      	cmp	r2, r3
 801ab0c:	d906      	bls.n	801ab1c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801ab0e:	687a      	ldr	r2, [r7, #4]
 801ab10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ab12:	68f8      	ldr	r0, [r7, #12]
 801ab14:	f000 fed8 	bl	801b8c8 <ip4_frag>
 801ab18:	4603      	mov	r3, r0
 801ab1a:	e006      	b.n	801ab2a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab1e:	695b      	ldr	r3, [r3, #20]
 801ab20:	687a      	ldr	r2, [r7, #4]
 801ab22:	68f9      	ldr	r1, [r7, #12]
 801ab24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ab26:	4798      	blx	r3
 801ab28:	4603      	mov	r3, r0
}
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	3720      	adds	r7, #32
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	bd80      	pop	{r7, pc}
 801ab32:	bf00      	nop
 801ab34:	08027784 	.word	0x08027784
 801ab38:	080277b8 	.word	0x080277b8
 801ab3c:	080277c4 	.word	0x080277c4
 801ab40:	080277ec 	.word	0x080277ec
 801ab44:	2000948e 	.word	0x2000948e
 801ab48:	0802b5e8 	.word	0x0802b5e8

0801ab4c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ab4c:	b480      	push	{r7}
 801ab4e:	b085      	sub	sp, #20
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	6078      	str	r0, [r7, #4]
 801ab54:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab60:	d002      	beq.n	801ab68 <ip4_addr_isbroadcast_u32+0x1c>
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d101      	bne.n	801ab6c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801ab68:	2301      	movs	r3, #1
 801ab6a:	e02a      	b.n	801abc2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801ab6c:	683b      	ldr	r3, [r7, #0]
 801ab6e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801ab72:	f003 0302 	and.w	r3, r3, #2
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d101      	bne.n	801ab7e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	e021      	b.n	801abc2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801ab7e:	683b      	ldr	r3, [r7, #0]
 801ab80:	3304      	adds	r3, #4
 801ab82:	681a      	ldr	r2, [r3, #0]
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	429a      	cmp	r2, r3
 801ab88:	d101      	bne.n	801ab8e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	e019      	b.n	801abc2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801ab8e:	68fa      	ldr	r2, [r7, #12]
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	3304      	adds	r3, #4
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	405a      	eors	r2, r3
 801ab98:	683b      	ldr	r3, [r7, #0]
 801ab9a:	3308      	adds	r3, #8
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	4013      	ands	r3, r2
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d10d      	bne.n	801abc0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801aba4:	683b      	ldr	r3, [r7, #0]
 801aba6:	3308      	adds	r3, #8
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	43da      	mvns	r2, r3
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801abb0:	683b      	ldr	r3, [r7, #0]
 801abb2:	3308      	adds	r3, #8
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801abb8:	429a      	cmp	r2, r3
 801abba:	d101      	bne.n	801abc0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801abbc:	2301      	movs	r3, #1
 801abbe:	e000      	b.n	801abc2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801abc0:	2300      	movs	r3, #0
  }
}
 801abc2:	4618      	mov	r0, r3
 801abc4:	3714      	adds	r7, #20
 801abc6:	46bd      	mov	sp, r7
 801abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abcc:	4770      	bx	lr
	...

0801abd0 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801abd0:	b580      	push	{r7, lr}
 801abd2:	b08a      	sub	sp, #40	; 0x28
 801abd4:	af00      	add	r7, sp, #0
 801abd6:	6078      	str	r0, [r7, #4]
 801abd8:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801abda:	f107 030c 	add.w	r3, r7, #12
 801abde:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	781b      	ldrb	r3, [r3, #0]
 801abe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801abe8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abec:	2b2f      	cmp	r3, #47	; 0x2f
 801abee:	d903      	bls.n	801abf8 <ip4addr_aton+0x28>
 801abf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801abf4:	2b39      	cmp	r3, #57	; 0x39
 801abf6:	d901      	bls.n	801abfc <ip4addr_aton+0x2c>
      return 0;
 801abf8:	2300      	movs	r3, #0
 801abfa:	e11e      	b.n	801ae3a <ip4addr_aton+0x26a>
    }
    val = 0;
 801abfc:	2300      	movs	r3, #0
 801abfe:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801ac00:	230a      	movs	r3, #10
 801ac02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801ac06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac0a:	2b30      	cmp	r3, #48	; 0x30
 801ac0c:	d11c      	bne.n	801ac48 <ip4addr_aton+0x78>
      c = *++cp;
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	3301      	adds	r3, #1
 801ac12:	607b      	str	r3, [r7, #4]
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	781b      	ldrb	r3, [r3, #0]
 801ac18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801ac1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac20:	2b78      	cmp	r3, #120	; 0x78
 801ac22:	d003      	beq.n	801ac2c <ip4addr_aton+0x5c>
 801ac24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac28:	2b58      	cmp	r3, #88	; 0x58
 801ac2a:	d10a      	bne.n	801ac42 <ip4addr_aton+0x72>
        base = 16;
 801ac2c:	2310      	movs	r3, #16
 801ac2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	3301      	adds	r3, #1
 801ac36:	607b      	str	r3, [r7, #4]
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	781b      	ldrb	r3, [r3, #0]
 801ac3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801ac40:	e002      	b.n	801ac48 <ip4addr_aton+0x78>
      } else {
        base = 8;
 801ac42:	2308      	movs	r3, #8
 801ac44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 801ac48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac4c:	2b2f      	cmp	r3, #47	; 0x2f
 801ac4e:	d915      	bls.n	801ac7c <ip4addr_aton+0xac>
 801ac50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac54:	2b39      	cmp	r3, #57	; 0x39
 801ac56:	d811      	bhi.n	801ac7c <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 801ac58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ac5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac5e:	fb02 f203 	mul.w	r2, r2, r3
 801ac62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac66:	4413      	add	r3, r2
 801ac68:	3b30      	subs	r3, #48	; 0x30
 801ac6a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	3301      	adds	r3, #1
 801ac70:	607b      	str	r3, [r7, #4]
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	781b      	ldrb	r3, [r3, #0]
 801ac76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801ac7a:	e036      	b.n	801acea <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 801ac7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ac80:	2b10      	cmp	r3, #16
 801ac82:	d133      	bne.n	801acec <ip4addr_aton+0x11c>
 801ac84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac88:	2b2f      	cmp	r3, #47	; 0x2f
 801ac8a:	d903      	bls.n	801ac94 <ip4addr_aton+0xc4>
 801ac8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac90:	2b39      	cmp	r3, #57	; 0x39
 801ac92:	d90f      	bls.n	801acb4 <ip4addr_aton+0xe4>
 801ac94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ac98:	2b60      	cmp	r3, #96	; 0x60
 801ac9a:	d903      	bls.n	801aca4 <ip4addr_aton+0xd4>
 801ac9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aca0:	2b66      	cmp	r3, #102	; 0x66
 801aca2:	d907      	bls.n	801acb4 <ip4addr_aton+0xe4>
 801aca4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aca8:	2b40      	cmp	r3, #64	; 0x40
 801acaa:	d91f      	bls.n	801acec <ip4addr_aton+0x11c>
 801acac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801acb0:	2b46      	cmp	r3, #70	; 0x46
 801acb2:	d81b      	bhi.n	801acec <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb6:	011b      	lsls	r3, r3, #4
 801acb8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801acbc:	f102 010a 	add.w	r1, r2, #10
 801acc0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801acc4:	2a60      	cmp	r2, #96	; 0x60
 801acc6:	d905      	bls.n	801acd4 <ip4addr_aton+0x104>
 801acc8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801accc:	2a7a      	cmp	r2, #122	; 0x7a
 801acce:	d801      	bhi.n	801acd4 <ip4addr_aton+0x104>
 801acd0:	2261      	movs	r2, #97	; 0x61
 801acd2:	e000      	b.n	801acd6 <ip4addr_aton+0x106>
 801acd4:	2241      	movs	r2, #65	; 0x41
 801acd6:	1a8a      	subs	r2, r1, r2
 801acd8:	4313      	orrs	r3, r2
 801acda:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	3301      	adds	r3, #1
 801ace0:	607b      	str	r3, [r7, #4]
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	781b      	ldrb	r3, [r3, #0]
 801ace6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (isdigit(c)) {
 801acea:	e7ad      	b.n	801ac48 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 801acec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801acf0:	2b2e      	cmp	r3, #46	; 0x2e
 801acf2:	d114      	bne.n	801ad1e <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801acf4:	f107 030c 	add.w	r3, r7, #12
 801acf8:	330c      	adds	r3, #12
 801acfa:	69fa      	ldr	r2, [r7, #28]
 801acfc:	4293      	cmp	r3, r2
 801acfe:	d801      	bhi.n	801ad04 <ip4addr_aton+0x134>
        return 0;
 801ad00:	2300      	movs	r3, #0
 801ad02:	e09a      	b.n	801ae3a <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 801ad04:	69fb      	ldr	r3, [r7, #28]
 801ad06:	1d1a      	adds	r2, r3, #4
 801ad08:	61fa      	str	r2, [r7, #28]
 801ad0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad0c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	3301      	adds	r3, #1
 801ad12:	607b      	str	r3, [r7, #4]
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	781b      	ldrb	r3, [r3, #0]
 801ad18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!isdigit(c)) {
 801ad1c:	e764      	b.n	801abe8 <ip4addr_aton+0x18>
    } else {
      break;
 801ad1e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 801ad20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d019      	beq.n	801ad5c <ip4addr_aton+0x18c>
 801ad28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad2c:	2b20      	cmp	r3, #32
 801ad2e:	d015      	beq.n	801ad5c <ip4addr_aton+0x18c>
 801ad30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad34:	2b0c      	cmp	r3, #12
 801ad36:	d011      	beq.n	801ad5c <ip4addr_aton+0x18c>
 801ad38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad3c:	2b0a      	cmp	r3, #10
 801ad3e:	d00d      	beq.n	801ad5c <ip4addr_aton+0x18c>
 801ad40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad44:	2b0d      	cmp	r3, #13
 801ad46:	d009      	beq.n	801ad5c <ip4addr_aton+0x18c>
 801ad48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad4c:	2b09      	cmp	r3, #9
 801ad4e:	d005      	beq.n	801ad5c <ip4addr_aton+0x18c>
 801ad50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ad54:	2b0b      	cmp	r3, #11
 801ad56:	d001      	beq.n	801ad5c <ip4addr_aton+0x18c>
    return 0;
 801ad58:	2300      	movs	r3, #0
 801ad5a:	e06e      	b.n	801ae3a <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801ad5c:	69fa      	ldr	r2, [r7, #28]
 801ad5e:	f107 030c 	add.w	r3, r7, #12
 801ad62:	1ad3      	subs	r3, r2, r3
 801ad64:	109b      	asrs	r3, r3, #2
 801ad66:	3301      	adds	r3, #1
 801ad68:	2b04      	cmp	r3, #4
 801ad6a:	d853      	bhi.n	801ae14 <ip4addr_aton+0x244>
 801ad6c:	a201      	add	r2, pc, #4	; (adr r2, 801ad74 <ip4addr_aton+0x1a4>)
 801ad6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad72:	bf00      	nop
 801ad74:	0801ad89 	.word	0x0801ad89
 801ad78:	0801ae25 	.word	0x0801ae25
 801ad7c:	0801ad8d 	.word	0x0801ad8d
 801ad80:	0801adaf 	.word	0x0801adaf
 801ad84:	0801addd 	.word	0x0801addd

  case 0:
    return 0;       /* initial nondigit */
 801ad88:	2300      	movs	r3, #0
 801ad8a:	e056      	b.n	801ae3a <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 801ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ad92:	d301      	bcc.n	801ad98 <ip4addr_aton+0x1c8>
      return 0;
 801ad94:	2300      	movs	r3, #0
 801ad96:	e050      	b.n	801ae3a <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	2bff      	cmp	r3, #255	; 0xff
 801ad9c:	d901      	bls.n	801ada2 <ip4addr_aton+0x1d2>
      return 0;
 801ad9e:	2300      	movs	r3, #0
 801ada0:	e04b      	b.n	801ae3a <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	061b      	lsls	r3, r3, #24
 801ada6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ada8:	4313      	orrs	r3, r2
 801adaa:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801adac:	e03b      	b.n	801ae26 <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 801adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801adb4:	d301      	bcc.n	801adba <ip4addr_aton+0x1ea>
      return 0;
 801adb6:	2300      	movs	r3, #0
 801adb8:	e03f      	b.n	801ae3a <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	2bff      	cmp	r3, #255	; 0xff
 801adbe:	d802      	bhi.n	801adc6 <ip4addr_aton+0x1f6>
 801adc0:	693b      	ldr	r3, [r7, #16]
 801adc2:	2bff      	cmp	r3, #255	; 0xff
 801adc4:	d901      	bls.n	801adca <ip4addr_aton+0x1fa>
      return 0;
 801adc6:	2300      	movs	r3, #0
 801adc8:	e037      	b.n	801ae3a <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	061a      	lsls	r2, r3, #24
 801adce:	693b      	ldr	r3, [r7, #16]
 801add0:	041b      	lsls	r3, r3, #16
 801add2:	4313      	orrs	r3, r2
 801add4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801add6:	4313      	orrs	r3, r2
 801add8:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801adda:	e024      	b.n	801ae26 <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 801addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adde:	2bff      	cmp	r3, #255	; 0xff
 801ade0:	d901      	bls.n	801ade6 <ip4addr_aton+0x216>
      return 0;
 801ade2:	2300      	movs	r3, #0
 801ade4:	e029      	b.n	801ae3a <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	2bff      	cmp	r3, #255	; 0xff
 801adea:	d805      	bhi.n	801adf8 <ip4addr_aton+0x228>
 801adec:	693b      	ldr	r3, [r7, #16]
 801adee:	2bff      	cmp	r3, #255	; 0xff
 801adf0:	d802      	bhi.n	801adf8 <ip4addr_aton+0x228>
 801adf2:	697b      	ldr	r3, [r7, #20]
 801adf4:	2bff      	cmp	r3, #255	; 0xff
 801adf6:	d901      	bls.n	801adfc <ip4addr_aton+0x22c>
      return 0;
 801adf8:	2300      	movs	r3, #0
 801adfa:	e01e      	b.n	801ae3a <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801adfc:	68fb      	ldr	r3, [r7, #12]
 801adfe:	061a      	lsls	r2, r3, #24
 801ae00:	693b      	ldr	r3, [r7, #16]
 801ae02:	041b      	lsls	r3, r3, #16
 801ae04:	431a      	orrs	r2, r3
 801ae06:	697b      	ldr	r3, [r7, #20]
 801ae08:	021b      	lsls	r3, r3, #8
 801ae0a:	4313      	orrs	r3, r2
 801ae0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ae0e:	4313      	orrs	r3, r2
 801ae10:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801ae12:	e008      	b.n	801ae26 <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 801ae14:	4b0b      	ldr	r3, [pc, #44]	; (801ae44 <ip4addr_aton+0x274>)
 801ae16:	f240 1203 	movw	r2, #259	; 0x103
 801ae1a:	490b      	ldr	r1, [pc, #44]	; (801ae48 <ip4addr_aton+0x278>)
 801ae1c:	480b      	ldr	r0, [pc, #44]	; (801ae4c <ip4addr_aton+0x27c>)
 801ae1e:	f00b f863 	bl	8025ee8 <iprintf>
    break;
 801ae22:	e000      	b.n	801ae26 <ip4addr_aton+0x256>
    break;
 801ae24:	bf00      	nop
  }
  if (addr) {
 801ae26:	683b      	ldr	r3, [r7, #0]
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d005      	beq.n	801ae38 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801ae2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae2e:	f7fe fb4d 	bl	80194cc <lwip_htonl>
 801ae32:	4602      	mov	r2, r0
 801ae34:	683b      	ldr	r3, [r7, #0]
 801ae36:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801ae38:	2301      	movs	r3, #1
}
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	3728      	adds	r7, #40	; 0x28
 801ae3e:	46bd      	mov	sp, r7
 801ae40:	bd80      	pop	{r7, pc}
 801ae42:	bf00      	nop
 801ae44:	0802781c 	.word	0x0802781c
 801ae48:	08027858 	.word	0x08027858
 801ae4c:	08027864 	.word	0x08027864

0801ae50 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801ae50:	b580      	push	{r7, lr}
 801ae52:	b082      	sub	sp, #8
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801ae58:	2210      	movs	r2, #16
 801ae5a:	4904      	ldr	r1, [pc, #16]	; (801ae6c <ip4addr_ntoa+0x1c>)
 801ae5c:	6878      	ldr	r0, [r7, #4]
 801ae5e:	f000 f807 	bl	801ae70 <ip4addr_ntoa_r>
 801ae62:	4603      	mov	r3, r0
}
 801ae64:	4618      	mov	r0, r3
 801ae66:	3708      	adds	r7, #8
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}
 801ae6c:	20009490 	.word	0x20009490

0801ae70 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801ae70:	b480      	push	{r7}
 801ae72:	b08d      	sub	sp, #52	; 0x34
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	60f8      	str	r0, [r7, #12]
 801ae78:	60b9      	str	r1, [r7, #8]
 801ae7a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801ae7c:	2300      	movs	r3, #0
 801ae7e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801ae86:	68bb      	ldr	r3, [r7, #8]
 801ae88:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801ae8a:	f107 0318 	add.w	r3, r7, #24
 801ae8e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801ae90:	2300      	movs	r3, #0
 801ae92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ae96:	e059      	b.n	801af4c <ip4addr_ntoa_r+0xdc>
    i = 0;
 801ae98:	2300      	movs	r3, #0
 801ae9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aea0:	781a      	ldrb	r2, [r3, #0]
 801aea2:	4b33      	ldr	r3, [pc, #204]	; (801af70 <ip4addr_ntoa_r+0x100>)
 801aea4:	fba3 1302 	umull	r1, r3, r3, r2
 801aea8:	08d9      	lsrs	r1, r3, #3
 801aeaa:	460b      	mov	r3, r1
 801aeac:	009b      	lsls	r3, r3, #2
 801aeae:	440b      	add	r3, r1
 801aeb0:	005b      	lsls	r3, r3, #1
 801aeb2:	1ad3      	subs	r3, r2, r3
 801aeb4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801aeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aeb8:	781b      	ldrb	r3, [r3, #0]
 801aeba:	4a2d      	ldr	r2, [pc, #180]	; (801af70 <ip4addr_ntoa_r+0x100>)
 801aebc:	fba2 2303 	umull	r2, r3, r2, r3
 801aec0:	08db      	lsrs	r3, r3, #3
 801aec2:	b2da      	uxtb	r2, r3
 801aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aec6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801aec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aecc:	1c5a      	adds	r2, r3, #1
 801aece:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801aed2:	4619      	mov	r1, r3
 801aed4:	7ffb      	ldrb	r3, [r7, #31]
 801aed6:	3330      	adds	r3, #48	; 0x30
 801aed8:	b2da      	uxtb	r2, r3
 801aeda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aede:	440b      	add	r3, r1
 801aee0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aee6:	781b      	ldrb	r3, [r3, #0]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d1d8      	bne.n	801ae9e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801aeec:	e012      	b.n	801af14 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801aeee:	6a3b      	ldr	r3, [r7, #32]
 801aef0:	1c5a      	adds	r2, r3, #1
 801aef2:	623a      	str	r2, [r7, #32]
 801aef4:	687a      	ldr	r2, [r7, #4]
 801aef6:	4293      	cmp	r3, r2
 801aef8:	db01      	blt.n	801aefe <ip4addr_ntoa_r+0x8e>
        return NULL;
 801aefa:	2300      	movs	r3, #0
 801aefc:	e031      	b.n	801af62 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af00:	1c5a      	adds	r2, r3, #1
 801af02:	62fa      	str	r2, [r7, #44]	; 0x2c
 801af04:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801af08:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801af0c:	440a      	add	r2, r1
 801af0e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801af12:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801af14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801af18:	1e5a      	subs	r2, r3, #1
 801af1a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d1e5      	bne.n	801aeee <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801af22:	6a3b      	ldr	r3, [r7, #32]
 801af24:	1c5a      	adds	r2, r3, #1
 801af26:	623a      	str	r2, [r7, #32]
 801af28:	687a      	ldr	r2, [r7, #4]
 801af2a:	4293      	cmp	r3, r2
 801af2c:	db01      	blt.n	801af32 <ip4addr_ntoa_r+0xc2>
      return NULL;
 801af2e:	2300      	movs	r3, #0
 801af30:	e017      	b.n	801af62 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801af32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af34:	1c5a      	adds	r2, r3, #1
 801af36:	62fa      	str	r2, [r7, #44]	; 0x2c
 801af38:	222e      	movs	r2, #46	; 0x2e
 801af3a:	701a      	strb	r2, [r3, #0]
    ap++;
 801af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af3e:	3301      	adds	r3, #1
 801af40:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801af42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af46:	3301      	adds	r3, #1
 801af48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801af4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af50:	2b03      	cmp	r3, #3
 801af52:	d9a1      	bls.n	801ae98 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801af54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af56:	3b01      	subs	r3, #1
 801af58:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af5c:	2200      	movs	r2, #0
 801af5e:	701a      	strb	r2, [r3, #0]
  return buf;
 801af60:	68bb      	ldr	r3, [r7, #8]
}
 801af62:	4618      	mov	r0, r3
 801af64:	3734      	adds	r7, #52	; 0x34
 801af66:	46bd      	mov	sp, r7
 801af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af6c:	4770      	bx	lr
 801af6e:	bf00      	nop
 801af70:	cccccccd 	.word	0xcccccccd

0801af74 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b084      	sub	sp, #16
 801af78:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801af7a:	2300      	movs	r3, #0
 801af7c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801af7e:	4b12      	ldr	r3, [pc, #72]	; (801afc8 <ip_reass_tmr+0x54>)
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801af84:	e018      	b.n	801afb8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	7fdb      	ldrb	r3, [r3, #31]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d00b      	beq.n	801afa6 <ip_reass_tmr+0x32>
      r->timer--;
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	7fdb      	ldrb	r3, [r3, #31]
 801af92:	3b01      	subs	r3, #1
 801af94:	b2da      	uxtb	r2, r3
 801af96:	68fb      	ldr	r3, [r7, #12]
 801af98:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	60fb      	str	r3, [r7, #12]
 801afa4:	e008      	b.n	801afb8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801afb0:	68b9      	ldr	r1, [r7, #8]
 801afb2:	6878      	ldr	r0, [r7, #4]
 801afb4:	f000 f80a 	bl	801afcc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	d1e3      	bne.n	801af86 <ip_reass_tmr+0x12>
     }
   }
}
 801afbe:	bf00      	nop
 801afc0:	3710      	adds	r7, #16
 801afc2:	46bd      	mov	sp, r7
 801afc4:	bd80      	pop	{r7, pc}
 801afc6:	bf00      	nop
 801afc8:	200094a0 	.word	0x200094a0

0801afcc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b088      	sub	sp, #32
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
 801afd4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801afd6:	2300      	movs	r3, #0
 801afd8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801afda:	683a      	ldr	r2, [r7, #0]
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	429a      	cmp	r2, r3
 801afe0:	d105      	bne.n	801afee <ip_reass_free_complete_datagram+0x22>
 801afe2:	4b45      	ldr	r3, [pc, #276]	; (801b0f8 <ip_reass_free_complete_datagram+0x12c>)
 801afe4:	22ab      	movs	r2, #171	; 0xab
 801afe6:	4945      	ldr	r1, [pc, #276]	; (801b0fc <ip_reass_free_complete_datagram+0x130>)
 801afe8:	4845      	ldr	r0, [pc, #276]	; (801b100 <ip_reass_free_complete_datagram+0x134>)
 801afea:	f00a ff7d 	bl	8025ee8 <iprintf>
  if (prev != NULL) {
 801afee:	683b      	ldr	r3, [r7, #0]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d00a      	beq.n	801b00a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801aff4:	683b      	ldr	r3, [r7, #0]
 801aff6:	681a      	ldr	r2, [r3, #0]
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	429a      	cmp	r2, r3
 801affc:	d005      	beq.n	801b00a <ip_reass_free_complete_datagram+0x3e>
 801affe:	4b3e      	ldr	r3, [pc, #248]	; (801b0f8 <ip_reass_free_complete_datagram+0x12c>)
 801b000:	22ad      	movs	r2, #173	; 0xad
 801b002:	4940      	ldr	r1, [pc, #256]	; (801b104 <ip_reass_free_complete_datagram+0x138>)
 801b004:	483e      	ldr	r0, [pc, #248]	; (801b100 <ip_reass_free_complete_datagram+0x134>)
 801b006:	f00a ff6f 	bl	8025ee8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	685b      	ldr	r3, [r3, #4]
 801b00e:	685b      	ldr	r3, [r3, #4]
 801b010:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b012:	697b      	ldr	r3, [r7, #20]
 801b014:	889b      	ldrh	r3, [r3, #4]
 801b016:	b29b      	uxth	r3, r3
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d12a      	bne.n	801b072 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	685b      	ldr	r3, [r3, #4]
 801b020:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	681a      	ldr	r2, [r3, #0]
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b02a:	69bb      	ldr	r3, [r7, #24]
 801b02c:	6858      	ldr	r0, [r3, #4]
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	3308      	adds	r3, #8
 801b032:	2214      	movs	r2, #20
 801b034:	4619      	mov	r1, r3
 801b036:	f00b fc26 	bl	8026886 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b03a:	2101      	movs	r1, #1
 801b03c:	69b8      	ldr	r0, [r7, #24]
 801b03e:	f7ff fa9f 	bl	801a580 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b042:	69b8      	ldr	r0, [r7, #24]
 801b044:	f001 ff4c 	bl	801cee0 <pbuf_clen>
 801b048:	4603      	mov	r3, r0
 801b04a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b04c:	8bfa      	ldrh	r2, [r7, #30]
 801b04e:	8a7b      	ldrh	r3, [r7, #18]
 801b050:	4413      	add	r3, r2
 801b052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b056:	db05      	blt.n	801b064 <ip_reass_free_complete_datagram+0x98>
 801b058:	4b27      	ldr	r3, [pc, #156]	; (801b0f8 <ip_reass_free_complete_datagram+0x12c>)
 801b05a:	22bc      	movs	r2, #188	; 0xbc
 801b05c:	492a      	ldr	r1, [pc, #168]	; (801b108 <ip_reass_free_complete_datagram+0x13c>)
 801b05e:	4828      	ldr	r0, [pc, #160]	; (801b100 <ip_reass_free_complete_datagram+0x134>)
 801b060:	f00a ff42 	bl	8025ee8 <iprintf>
    pbufs_freed += clen;
 801b064:	8bfa      	ldrh	r2, [r7, #30]
 801b066:	8a7b      	ldrh	r3, [r7, #18]
 801b068:	4413      	add	r3, r2
 801b06a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b06c:	69b8      	ldr	r0, [r7, #24]
 801b06e:	f001 fe9d 	bl	801cdac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	685b      	ldr	r3, [r3, #4]
 801b076:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b078:	e01f      	b.n	801b0ba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b07a:	69bb      	ldr	r3, [r7, #24]
 801b07c:	685b      	ldr	r3, [r3, #4]
 801b07e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b080:	69bb      	ldr	r3, [r7, #24]
 801b082:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b084:	697b      	ldr	r3, [r7, #20]
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b08a:	68f8      	ldr	r0, [r7, #12]
 801b08c:	f001 ff28 	bl	801cee0 <pbuf_clen>
 801b090:	4603      	mov	r3, r0
 801b092:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b094:	8bfa      	ldrh	r2, [r7, #30]
 801b096:	8a7b      	ldrh	r3, [r7, #18]
 801b098:	4413      	add	r3, r2
 801b09a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b09e:	db05      	blt.n	801b0ac <ip_reass_free_complete_datagram+0xe0>
 801b0a0:	4b15      	ldr	r3, [pc, #84]	; (801b0f8 <ip_reass_free_complete_datagram+0x12c>)
 801b0a2:	22cc      	movs	r2, #204	; 0xcc
 801b0a4:	4918      	ldr	r1, [pc, #96]	; (801b108 <ip_reass_free_complete_datagram+0x13c>)
 801b0a6:	4816      	ldr	r0, [pc, #88]	; (801b100 <ip_reass_free_complete_datagram+0x134>)
 801b0a8:	f00a ff1e 	bl	8025ee8 <iprintf>
    pbufs_freed += clen;
 801b0ac:	8bfa      	ldrh	r2, [r7, #30]
 801b0ae:	8a7b      	ldrh	r3, [r7, #18]
 801b0b0:	4413      	add	r3, r2
 801b0b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b0b4:	68f8      	ldr	r0, [r7, #12]
 801b0b6:	f001 fe79 	bl	801cdac <pbuf_free>
  while (p != NULL) {
 801b0ba:	69bb      	ldr	r3, [r7, #24]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d1dc      	bne.n	801b07a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b0c0:	6839      	ldr	r1, [r7, #0]
 801b0c2:	6878      	ldr	r0, [r7, #4]
 801b0c4:	f000 f8c2 	bl	801b24c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801b0c8:	4b10      	ldr	r3, [pc, #64]	; (801b10c <ip_reass_free_complete_datagram+0x140>)
 801b0ca:	881b      	ldrh	r3, [r3, #0]
 801b0cc:	8bfa      	ldrh	r2, [r7, #30]
 801b0ce:	429a      	cmp	r2, r3
 801b0d0:	d905      	bls.n	801b0de <ip_reass_free_complete_datagram+0x112>
 801b0d2:	4b09      	ldr	r3, [pc, #36]	; (801b0f8 <ip_reass_free_complete_datagram+0x12c>)
 801b0d4:	22d2      	movs	r2, #210	; 0xd2
 801b0d6:	490e      	ldr	r1, [pc, #56]	; (801b110 <ip_reass_free_complete_datagram+0x144>)
 801b0d8:	4809      	ldr	r0, [pc, #36]	; (801b100 <ip_reass_free_complete_datagram+0x134>)
 801b0da:	f00a ff05 	bl	8025ee8 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801b0de:	4b0b      	ldr	r3, [pc, #44]	; (801b10c <ip_reass_free_complete_datagram+0x140>)
 801b0e0:	881a      	ldrh	r2, [r3, #0]
 801b0e2:	8bfb      	ldrh	r3, [r7, #30]
 801b0e4:	1ad3      	subs	r3, r2, r3
 801b0e6:	b29a      	uxth	r2, r3
 801b0e8:	4b08      	ldr	r3, [pc, #32]	; (801b10c <ip_reass_free_complete_datagram+0x140>)
 801b0ea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b0ec:	8bfb      	ldrh	r3, [r7, #30]
}
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	3720      	adds	r7, #32
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd80      	pop	{r7, pc}
 801b0f6:	bf00      	nop
 801b0f8:	0802788c 	.word	0x0802788c
 801b0fc:	080278c8 	.word	0x080278c8
 801b100:	080278d4 	.word	0x080278d4
 801b104:	080278fc 	.word	0x080278fc
 801b108:	08027910 	.word	0x08027910
 801b10c:	200094a4 	.word	0x200094a4
 801b110:	08027930 	.word	0x08027930

0801b114 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b08a      	sub	sp, #40	; 0x28
 801b118:	af00      	add	r7, sp, #0
 801b11a:	6078      	str	r0, [r7, #4]
 801b11c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b11e:	2300      	movs	r3, #0
 801b120:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b122:	2300      	movs	r3, #0
 801b124:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b126:	2300      	movs	r3, #0
 801b128:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b12a:	2300      	movs	r3, #0
 801b12c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b12e:	2300      	movs	r3, #0
 801b130:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b132:	4b28      	ldr	r3, [pc, #160]	; (801b1d4 <ip_reass_remove_oldest_datagram+0xc0>)
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b138:	e030      	b.n	801b19c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b13c:	695a      	ldr	r2, [r3, #20]
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	68db      	ldr	r3, [r3, #12]
 801b142:	429a      	cmp	r2, r3
 801b144:	d10c      	bne.n	801b160 <ip_reass_remove_oldest_datagram+0x4c>
 801b146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b148:	699a      	ldr	r2, [r3, #24]
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	691b      	ldr	r3, [r3, #16]
 801b14e:	429a      	cmp	r2, r3
 801b150:	d106      	bne.n	801b160 <ip_reass_remove_oldest_datagram+0x4c>
 801b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b154:	899a      	ldrh	r2, [r3, #12]
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	889b      	ldrh	r3, [r3, #4]
 801b15a:	b29b      	uxth	r3, r3
 801b15c:	429a      	cmp	r2, r3
 801b15e:	d014      	beq.n	801b18a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b160:	693b      	ldr	r3, [r7, #16]
 801b162:	3301      	adds	r3, #1
 801b164:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b166:	6a3b      	ldr	r3, [r7, #32]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d104      	bne.n	801b176 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b16e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b170:	69fb      	ldr	r3, [r7, #28]
 801b172:	61bb      	str	r3, [r7, #24]
 801b174:	e009      	b.n	801b18a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b178:	7fda      	ldrb	r2, [r3, #31]
 801b17a:	6a3b      	ldr	r3, [r7, #32]
 801b17c:	7fdb      	ldrb	r3, [r3, #31]
 801b17e:	429a      	cmp	r2, r3
 801b180:	d803      	bhi.n	801b18a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b184:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b186:	69fb      	ldr	r3, [r7, #28]
 801b188:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d001      	beq.n	801b196 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b194:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d1cb      	bne.n	801b13a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b1a2:	6a3b      	ldr	r3, [r7, #32]
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d008      	beq.n	801b1ba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b1a8:	69b9      	ldr	r1, [r7, #24]
 801b1aa:	6a38      	ldr	r0, [r7, #32]
 801b1ac:	f7ff ff0e 	bl	801afcc <ip_reass_free_complete_datagram>
 801b1b0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b1b2:	697a      	ldr	r2, [r7, #20]
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	4413      	add	r3, r2
 801b1b8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b1ba:	697a      	ldr	r2, [r7, #20]
 801b1bc:	683b      	ldr	r3, [r7, #0]
 801b1be:	429a      	cmp	r2, r3
 801b1c0:	da02      	bge.n	801b1c8 <ip_reass_remove_oldest_datagram+0xb4>
 801b1c2:	693b      	ldr	r3, [r7, #16]
 801b1c4:	2b01      	cmp	r3, #1
 801b1c6:	dcac      	bgt.n	801b122 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b1c8:	697b      	ldr	r3, [r7, #20]
}
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	3728      	adds	r7, #40	; 0x28
 801b1ce:	46bd      	mov	sp, r7
 801b1d0:	bd80      	pop	{r7, pc}
 801b1d2:	bf00      	nop
 801b1d4:	200094a0 	.word	0x200094a0

0801b1d8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b1d8:	b580      	push	{r7, lr}
 801b1da:	b084      	sub	sp, #16
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	6078      	str	r0, [r7, #4]
 801b1e0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b1e2:	2003      	movs	r0, #3
 801b1e4:	f001 f83e 	bl	801c264 <memp_malloc>
 801b1e8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d110      	bne.n	801b212 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b1f0:	6839      	ldr	r1, [r7, #0]
 801b1f2:	6878      	ldr	r0, [r7, #4]
 801b1f4:	f7ff ff8e 	bl	801b114 <ip_reass_remove_oldest_datagram>
 801b1f8:	4602      	mov	r2, r0
 801b1fa:	683b      	ldr	r3, [r7, #0]
 801b1fc:	429a      	cmp	r2, r3
 801b1fe:	db03      	blt.n	801b208 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b200:	2003      	movs	r0, #3
 801b202:	f001 f82f 	bl	801c264 <memp_malloc>
 801b206:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d101      	bne.n	801b212 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801b20e:	2300      	movs	r3, #0
 801b210:	e016      	b.n	801b240 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b212:	2220      	movs	r2, #32
 801b214:	2100      	movs	r1, #0
 801b216:	68f8      	ldr	r0, [r7, #12]
 801b218:	f00b fb40 	bl	802689c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b21c:	68fb      	ldr	r3, [r7, #12]
 801b21e:	2203      	movs	r2, #3
 801b220:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b222:	4b09      	ldr	r3, [pc, #36]	; (801b248 <ip_reass_enqueue_new_datagram+0x70>)
 801b224:	681a      	ldr	r2, [r3, #0]
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b22a:	4a07      	ldr	r2, [pc, #28]	; (801b248 <ip_reass_enqueue_new_datagram+0x70>)
 801b22c:	68fb      	ldr	r3, [r7, #12]
 801b22e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	3308      	adds	r3, #8
 801b234:	2214      	movs	r2, #20
 801b236:	6879      	ldr	r1, [r7, #4]
 801b238:	4618      	mov	r0, r3
 801b23a:	f00b fb24 	bl	8026886 <memcpy>
  return ipr;
 801b23e:	68fb      	ldr	r3, [r7, #12]
}
 801b240:	4618      	mov	r0, r3
 801b242:	3710      	adds	r7, #16
 801b244:	46bd      	mov	sp, r7
 801b246:	bd80      	pop	{r7, pc}
 801b248:	200094a0 	.word	0x200094a0

0801b24c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b24c:	b580      	push	{r7, lr}
 801b24e:	b082      	sub	sp, #8
 801b250:	af00      	add	r7, sp, #0
 801b252:	6078      	str	r0, [r7, #4]
 801b254:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b256:	4b10      	ldr	r3, [pc, #64]	; (801b298 <ip_reass_dequeue_datagram+0x4c>)
 801b258:	681a      	ldr	r2, [r3, #0]
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	429a      	cmp	r2, r3
 801b25e:	d104      	bne.n	801b26a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	4a0c      	ldr	r2, [pc, #48]	; (801b298 <ip_reass_dequeue_datagram+0x4c>)
 801b266:	6013      	str	r3, [r2, #0]
 801b268:	e00d      	b.n	801b286 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b26a:	683b      	ldr	r3, [r7, #0]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d106      	bne.n	801b27e <ip_reass_dequeue_datagram+0x32>
 801b270:	4b0a      	ldr	r3, [pc, #40]	; (801b29c <ip_reass_dequeue_datagram+0x50>)
 801b272:	f240 1245 	movw	r2, #325	; 0x145
 801b276:	490a      	ldr	r1, [pc, #40]	; (801b2a0 <ip_reass_dequeue_datagram+0x54>)
 801b278:	480a      	ldr	r0, [pc, #40]	; (801b2a4 <ip_reass_dequeue_datagram+0x58>)
 801b27a:	f00a fe35 	bl	8025ee8 <iprintf>
    prev->next = ipr->next;
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681a      	ldr	r2, [r3, #0]
 801b282:	683b      	ldr	r3, [r7, #0]
 801b284:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b286:	6879      	ldr	r1, [r7, #4]
 801b288:	2003      	movs	r0, #3
 801b28a:	f001 f83d 	bl	801c308 <memp_free>
}
 801b28e:	bf00      	nop
 801b290:	3708      	adds	r7, #8
 801b292:	46bd      	mov	sp, r7
 801b294:	bd80      	pop	{r7, pc}
 801b296:	bf00      	nop
 801b298:	200094a0 	.word	0x200094a0
 801b29c:	0802788c 	.word	0x0802788c
 801b2a0:	0802794c 	.word	0x0802794c
 801b2a4:	080278d4 	.word	0x080278d4

0801b2a8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b2a8:	b580      	push	{r7, lr}
 801b2aa:	b08c      	sub	sp, #48	; 0x30
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	60f8      	str	r0, [r7, #12]
 801b2b0:	60b9      	str	r1, [r7, #8]
 801b2b2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b2b8:	2301      	movs	r3, #1
 801b2ba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	685b      	ldr	r3, [r3, #4]
 801b2c0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801b2c2:	69fb      	ldr	r3, [r7, #28]
 801b2c4:	885b      	ldrh	r3, [r3, #2]
 801b2c6:	b29b      	uxth	r3, r3
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	f7fe f8f1 	bl	80194b0 <lwip_htons>
 801b2ce:	4603      	mov	r3, r0
 801b2d0:	461a      	mov	r2, r3
 801b2d2:	69fb      	ldr	r3, [r7, #28]
 801b2d4:	781b      	ldrb	r3, [r3, #0]
 801b2d6:	b29b      	uxth	r3, r3
 801b2d8:	f003 030f 	and.w	r3, r3, #15
 801b2dc:	b29b      	uxth	r3, r3
 801b2de:	009b      	lsls	r3, r3, #2
 801b2e0:	b29b      	uxth	r3, r3
 801b2e2:	1ad3      	subs	r3, r2, r3
 801b2e4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801b2e6:	69fb      	ldr	r3, [r7, #28]
 801b2e8:	88db      	ldrh	r3, [r3, #6]
 801b2ea:	b29b      	uxth	r3, r3
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	f7fe f8df 	bl	80194b0 <lwip_htons>
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b2f8:	b29b      	uxth	r3, r3
 801b2fa:	00db      	lsls	r3, r3, #3
 801b2fc:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801b2fe:	68bb      	ldr	r3, [r7, #8]
 801b300:	685b      	ldr	r3, [r3, #4]
 801b302:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801b304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b306:	2200      	movs	r2, #0
 801b308:	701a      	strb	r2, [r3, #0]
 801b30a:	2200      	movs	r2, #0
 801b30c:	705a      	strb	r2, [r3, #1]
 801b30e:	2200      	movs	r2, #0
 801b310:	709a      	strb	r2, [r3, #2]
 801b312:	2200      	movs	r2, #0
 801b314:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b318:	8b3a      	ldrh	r2, [r7, #24]
 801b31a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801b31c:	8b3a      	ldrh	r2, [r7, #24]
 801b31e:	8b7b      	ldrh	r3, [r7, #26]
 801b320:	4413      	add	r3, r2
 801b322:	b29a      	uxth	r2, r3
 801b324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b326:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	685b      	ldr	r3, [r3, #4]
 801b32c:	627b      	str	r3, [r7, #36]	; 0x24
 801b32e:	e061      	b.n	801b3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b332:	685b      	ldr	r3, [r3, #4]
 801b334:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b338:	889b      	ldrh	r3, [r3, #4]
 801b33a:	b29a      	uxth	r2, r3
 801b33c:	697b      	ldr	r3, [r7, #20]
 801b33e:	889b      	ldrh	r3, [r3, #4]
 801b340:	b29b      	uxth	r3, r3
 801b342:	429a      	cmp	r2, r3
 801b344:	d232      	bcs.n	801b3ac <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b34a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d01f      	beq.n	801b392 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b354:	889b      	ldrh	r3, [r3, #4]
 801b356:	b29a      	uxth	r2, r3
 801b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b35a:	88db      	ldrh	r3, [r3, #6]
 801b35c:	b29b      	uxth	r3, r3
 801b35e:	429a      	cmp	r2, r3
 801b360:	f0c0 80e8 	bcc.w	801b534 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 801b364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b366:	88db      	ldrh	r3, [r3, #6]
 801b368:	b29a      	uxth	r2, r3
 801b36a:	697b      	ldr	r3, [r7, #20]
 801b36c:	889b      	ldrh	r3, [r3, #4]
 801b36e:	b29b      	uxth	r3, r3
 801b370:	429a      	cmp	r2, r3
 801b372:	f200 80df 	bhi.w	801b534 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b378:	68ba      	ldr	r2, [r7, #8]
 801b37a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b37e:	88db      	ldrh	r3, [r3, #6]
 801b380:	b29a      	uxth	r2, r3
 801b382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b384:	889b      	ldrh	r3, [r3, #4]
 801b386:	b29b      	uxth	r3, r3
 801b388:	429a      	cmp	r2, r3
 801b38a:	d037      	beq.n	801b3fc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b38c:	2300      	movs	r3, #0
 801b38e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b390:	e034      	b.n	801b3fc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b394:	88db      	ldrh	r3, [r3, #6]
 801b396:	b29a      	uxth	r2, r3
 801b398:	697b      	ldr	r3, [r7, #20]
 801b39a:	889b      	ldrh	r3, [r3, #4]
 801b39c:	b29b      	uxth	r3, r3
 801b39e:	429a      	cmp	r2, r3
 801b3a0:	f200 80c3 	bhi.w	801b52a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	68ba      	ldr	r2, [r7, #8]
 801b3a8:	605a      	str	r2, [r3, #4]
      break;
 801b3aa:	e027      	b.n	801b3fc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801b3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3ae:	889b      	ldrh	r3, [r3, #4]
 801b3b0:	b29a      	uxth	r2, r3
 801b3b2:	697b      	ldr	r3, [r7, #20]
 801b3b4:	889b      	ldrh	r3, [r3, #4]
 801b3b6:	b29b      	uxth	r3, r3
 801b3b8:	429a      	cmp	r2, r3
 801b3ba:	f000 80b8 	beq.w	801b52e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3c0:	889b      	ldrh	r3, [r3, #4]
 801b3c2:	b29a      	uxth	r2, r3
 801b3c4:	697b      	ldr	r3, [r7, #20]
 801b3c6:	88db      	ldrh	r3, [r3, #6]
 801b3c8:	b29b      	uxth	r3, r3
 801b3ca:	429a      	cmp	r2, r3
 801b3cc:	f0c0 80b1 	bcc.w	801b532 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d009      	beq.n	801b3ea <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 801b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b3d8:	88db      	ldrh	r3, [r3, #6]
 801b3da:	b29a      	uxth	r2, r3
 801b3dc:	697b      	ldr	r3, [r7, #20]
 801b3de:	889b      	ldrh	r3, [r3, #4]
 801b3e0:	b29b      	uxth	r3, r3
 801b3e2:	429a      	cmp	r2, r3
 801b3e4:	d001      	beq.n	801b3ea <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b3e6:	2300      	movs	r3, #0
 801b3e8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b3ea:	697b      	ldr	r3, [r7, #20]
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b3f0:	697b      	ldr	r3, [r7, #20]
 801b3f2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d19a      	bne.n	801b330 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801b3fa:	e000      	b.n	801b3fe <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801b3fc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b400:	2b00      	cmp	r3, #0
 801b402:	d12d      	bne.n	801b460 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 801b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b406:	2b00      	cmp	r3, #0
 801b408:	d01c      	beq.n	801b444 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b40c:	88db      	ldrh	r3, [r3, #6]
 801b40e:	b29a      	uxth	r2, r3
 801b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b412:	889b      	ldrh	r3, [r3, #4]
 801b414:	b29b      	uxth	r3, r3
 801b416:	429a      	cmp	r2, r3
 801b418:	d906      	bls.n	801b428 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801b41a:	4b50      	ldr	r3, [pc, #320]	; (801b55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b41c:	f240 12ab 	movw	r2, #427	; 0x1ab
 801b420:	494f      	ldr	r1, [pc, #316]	; (801b560 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801b422:	4850      	ldr	r0, [pc, #320]	; (801b564 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b424:	f00a fd60 	bl	8025ee8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b42a:	68ba      	ldr	r2, [r7, #8]
 801b42c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b430:	88db      	ldrh	r3, [r3, #6]
 801b432:	b29a      	uxth	r2, r3
 801b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b436:	889b      	ldrh	r3, [r3, #4]
 801b438:	b29b      	uxth	r3, r3
 801b43a:	429a      	cmp	r2, r3
 801b43c:	d010      	beq.n	801b460 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801b43e:	2300      	movs	r3, #0
 801b440:	623b      	str	r3, [r7, #32]
 801b442:	e00d      	b.n	801b460 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	685b      	ldr	r3, [r3, #4]
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d006      	beq.n	801b45a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 801b44c:	4b43      	ldr	r3, [pc, #268]	; (801b55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b44e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 801b452:	4945      	ldr	r1, [pc, #276]	; (801b568 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b454:	4843      	ldr	r0, [pc, #268]	; (801b564 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b456:	f00a fd47 	bl	8025ee8 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	68ba      	ldr	r2, [r7, #8]
 801b45e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	2b00      	cmp	r3, #0
 801b464:	d105      	bne.n	801b472 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801b466:	68fb      	ldr	r3, [r7, #12]
 801b468:	7f9b      	ldrb	r3, [r3, #30]
 801b46a:	f003 0301 	and.w	r3, r3, #1
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d059      	beq.n	801b526 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 801b472:	6a3b      	ldr	r3, [r7, #32]
 801b474:	2b00      	cmp	r3, #0
 801b476:	d04f      	beq.n	801b518 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	685b      	ldr	r3, [r3, #4]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d006      	beq.n	801b48e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	685b      	ldr	r3, [r3, #4]
 801b484:	685b      	ldr	r3, [r3, #4]
 801b486:	889b      	ldrh	r3, [r3, #4]
 801b488:	b29b      	uxth	r3, r3
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d002      	beq.n	801b494 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b48e:	2300      	movs	r3, #0
 801b490:	623b      	str	r3, [r7, #32]
 801b492:	e041      	b.n	801b518 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b496:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b49e:	e012      	b.n	801b4c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4a2:	685b      	ldr	r3, [r3, #4]
 801b4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4a8:	88db      	ldrh	r3, [r3, #6]
 801b4aa:	b29a      	uxth	r2, r3
 801b4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ae:	889b      	ldrh	r3, [r3, #4]
 801b4b0:	b29b      	uxth	r3, r3
 801b4b2:	429a      	cmp	r2, r3
 801b4b4:	d002      	beq.n	801b4bc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	623b      	str	r3, [r7, #32]
            break;
 801b4ba:	e007      	b.n	801b4cc <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 801b4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4be:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d1e9      	bne.n	801b4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b4cc:	6a3b      	ldr	r3, [r7, #32]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d022      	beq.n	801b518 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	685b      	ldr	r3, [r3, #4]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d106      	bne.n	801b4e8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801b4da:	4b20      	ldr	r3, [pc, #128]	; (801b55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b4dc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801b4e0:	4922      	ldr	r1, [pc, #136]	; (801b56c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b4e2:	4820      	ldr	r0, [pc, #128]	; (801b564 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b4e4:	f00a fd00 	bl	8025ee8 <iprintf>
          LWIP_ASSERT("sanity check",
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	685b      	ldr	r3, [r3, #4]
 801b4ec:	685a      	ldr	r2, [r3, #4]
 801b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4f0:	429a      	cmp	r2, r3
 801b4f2:	d106      	bne.n	801b502 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 801b4f4:	4b19      	ldr	r3, [pc, #100]	; (801b55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b4f6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801b4fa:	491c      	ldr	r1, [pc, #112]	; (801b56c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b4fc:	4819      	ldr	r0, [pc, #100]	; (801b564 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b4fe:	f00a fcf3 	bl	8025ee8 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d006      	beq.n	801b518 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801b50a:	4b14      	ldr	r3, [pc, #80]	; (801b55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 801b50c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801b510:	4917      	ldr	r1, [pc, #92]	; (801b570 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b512:	4814      	ldr	r0, [pc, #80]	; (801b564 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b514:	f00a fce8 	bl	8025ee8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b518:	6a3b      	ldr	r3, [r7, #32]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	bf14      	ite	ne
 801b51e:	2301      	movne	r3, #1
 801b520:	2300      	moveq	r3, #0
 801b522:	b2db      	uxtb	r3, r3
 801b524:	e016      	b.n	801b554 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b526:	2300      	movs	r3, #0
 801b528:	e014      	b.n	801b554 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 801b52a:	bf00      	nop
 801b52c:	e002      	b.n	801b534 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 801b52e:	bf00      	nop
 801b530:	e000      	b.n	801b534 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 801b532:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801b534:	68b8      	ldr	r0, [r7, #8]
 801b536:	f001 fcd3 	bl	801cee0 <pbuf_clen>
 801b53a:	4603      	mov	r3, r0
 801b53c:	461a      	mov	r2, r3
 801b53e:	4b0d      	ldr	r3, [pc, #52]	; (801b574 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b540:	881b      	ldrh	r3, [r3, #0]
 801b542:	1a9b      	subs	r3, r3, r2
 801b544:	b29a      	uxth	r2, r3
 801b546:	4b0b      	ldr	r3, [pc, #44]	; (801b574 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b548:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801b54a:	68b8      	ldr	r0, [r7, #8]
 801b54c:	f001 fc2e 	bl	801cdac <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b550:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 801b554:	4618      	mov	r0, r3
 801b556:	3730      	adds	r7, #48	; 0x30
 801b558:	46bd      	mov	sp, r7
 801b55a:	bd80      	pop	{r7, pc}
 801b55c:	0802788c 	.word	0x0802788c
 801b560:	08027968 	.word	0x08027968
 801b564:	080278d4 	.word	0x080278d4
 801b568:	08027988 	.word	0x08027988
 801b56c:	080279c0 	.word	0x080279c0
 801b570:	080279d0 	.word	0x080279d0
 801b574:	200094a4 	.word	0x200094a4

0801b578 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b08e      	sub	sp, #56	; 0x38
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	685b      	ldr	r3, [r3, #4]
 801b584:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801b586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b588:	781b      	ldrb	r3, [r3, #0]
 801b58a:	f003 030f 	and.w	r3, r3, #15
 801b58e:	009b      	lsls	r3, r3, #2
 801b590:	2b14      	cmp	r3, #20
 801b592:	f040 8131 	bne.w	801b7f8 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801b596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b598:	88db      	ldrh	r3, [r3, #6]
 801b59a:	b29b      	uxth	r3, r3
 801b59c:	4618      	mov	r0, r3
 801b59e:	f7fd ff87 	bl	80194b0 <lwip_htons>
 801b5a2:	4603      	mov	r3, r0
 801b5a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b5a8:	b29b      	uxth	r3, r3
 801b5aa:	00db      	lsls	r3, r3, #3
 801b5ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801b5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5b0:	885b      	ldrh	r3, [r3, #2]
 801b5b2:	b29b      	uxth	r3, r3
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	f7fd ff7b 	bl	80194b0 <lwip_htons>
 801b5ba:	4603      	mov	r3, r0
 801b5bc:	461a      	mov	r2, r3
 801b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5c0:	781b      	ldrb	r3, [r3, #0]
 801b5c2:	b29b      	uxth	r3, r3
 801b5c4:	f003 030f 	and.w	r3, r3, #15
 801b5c8:	b29b      	uxth	r3, r3
 801b5ca:	009b      	lsls	r3, r3, #2
 801b5cc:	b29b      	uxth	r3, r3
 801b5ce:	1ad3      	subs	r3, r2, r3
 801b5d0:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b5d2:	6878      	ldr	r0, [r7, #4]
 801b5d4:	f001 fc84 	bl	801cee0 <pbuf_clen>
 801b5d8:	4603      	mov	r3, r0
 801b5da:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b5dc:	4b8c      	ldr	r3, [pc, #560]	; (801b810 <ip4_reass+0x298>)
 801b5de:	881b      	ldrh	r3, [r3, #0]
 801b5e0:	461a      	mov	r2, r3
 801b5e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b5e4:	4413      	add	r3, r2
 801b5e6:	2b0a      	cmp	r3, #10
 801b5e8:	dd10      	ble.n	801b60c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b5ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b5ec:	4619      	mov	r1, r3
 801b5ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b5f0:	f7ff fd90 	bl	801b114 <ip_reass_remove_oldest_datagram>
 801b5f4:	4603      	mov	r3, r0
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	f000 8101 	beq.w	801b7fe <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b5fc:	4b84      	ldr	r3, [pc, #528]	; (801b810 <ip4_reass+0x298>)
 801b5fe:	881b      	ldrh	r3, [r3, #0]
 801b600:	461a      	mov	r2, r3
 801b602:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b604:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b606:	2b0a      	cmp	r3, #10
 801b608:	f300 80f9 	bgt.w	801b7fe <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b60c:	4b81      	ldr	r3, [pc, #516]	; (801b814 <ip4_reass+0x29c>)
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	633b      	str	r3, [r7, #48]	; 0x30
 801b612:	e015      	b.n	801b640 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b616:	695a      	ldr	r2, [r3, #20]
 801b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b61a:	68db      	ldr	r3, [r3, #12]
 801b61c:	429a      	cmp	r2, r3
 801b61e:	d10c      	bne.n	801b63a <ip4_reass+0xc2>
 801b620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b622:	699a      	ldr	r2, [r3, #24]
 801b624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b626:	691b      	ldr	r3, [r3, #16]
 801b628:	429a      	cmp	r2, r3
 801b62a:	d106      	bne.n	801b63a <ip4_reass+0xc2>
 801b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b62e:	899a      	ldrh	r2, [r3, #12]
 801b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b632:	889b      	ldrh	r3, [r3, #4]
 801b634:	b29b      	uxth	r3, r3
 801b636:	429a      	cmp	r2, r3
 801b638:	d006      	beq.n	801b648 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	633b      	str	r3, [r7, #48]	; 0x30
 801b640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b642:	2b00      	cmp	r3, #0
 801b644:	d1e6      	bne.n	801b614 <ip4_reass+0x9c>
 801b646:	e000      	b.n	801b64a <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b648:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d109      	bne.n	801b664 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b652:	4619      	mov	r1, r3
 801b654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b656:	f7ff fdbf 	bl	801b1d8 <ip_reass_enqueue_new_datagram>
 801b65a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d11c      	bne.n	801b69c <ip4_reass+0x124>
      goto nullreturn;
 801b662:	e0cc      	b.n	801b7fe <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b666:	88db      	ldrh	r3, [r3, #6]
 801b668:	b29b      	uxth	r3, r3
 801b66a:	4618      	mov	r0, r3
 801b66c:	f7fd ff20 	bl	80194b0 <lwip_htons>
 801b670:	4603      	mov	r3, r0
 801b672:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b676:	2b00      	cmp	r3, #0
 801b678:	d110      	bne.n	801b69c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b67c:	89db      	ldrh	r3, [r3, #14]
 801b67e:	4618      	mov	r0, r3
 801b680:	f7fd ff16 	bl	80194b0 <lwip_htons>
 801b684:	4603      	mov	r3, r0
 801b686:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d006      	beq.n	801b69c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b690:	3308      	adds	r3, #8
 801b692:	2214      	movs	r2, #20
 801b694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b696:	4618      	mov	r0, r3
 801b698:	f00b f8f5 	bl	8026886 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b69e:	88db      	ldrh	r3, [r3, #6]
 801b6a0:	b29b      	uxth	r3, r3
 801b6a2:	f003 0320 	and.w	r3, r3, #32
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	bf0c      	ite	eq
 801b6aa:	2301      	moveq	r3, #1
 801b6ac:	2300      	movne	r3, #0
 801b6ae:	b2db      	uxtb	r3, r3
 801b6b0:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b6b2:	69fb      	ldr	r3, [r7, #28]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d00e      	beq.n	801b6d6 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801b6b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b6ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b6bc:	4413      	add	r3, r2
 801b6be:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b6c0:	8b7a      	ldrh	r2, [r7, #26]
 801b6c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b6c4:	429a      	cmp	r2, r3
 801b6c6:	f0c0 809a 	bcc.w	801b7fe <ip4_reass+0x286>
 801b6ca:	8b7b      	ldrh	r3, [r7, #26]
 801b6cc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b6d0:	4293      	cmp	r3, r2
 801b6d2:	f200 8094 	bhi.w	801b7fe <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b6d6:	69fa      	ldr	r2, [r7, #28]
 801b6d8:	6879      	ldr	r1, [r7, #4]
 801b6da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b6dc:	f7ff fde4 	bl	801b2a8 <ip_reass_chain_frag_into_datagram_and_validate>
 801b6e0:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b6e2:	697b      	ldr	r3, [r7, #20]
 801b6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b6e8:	f000 8088 	beq.w	801b7fc <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b6ec:	4b48      	ldr	r3, [pc, #288]	; (801b810 <ip4_reass+0x298>)
 801b6ee:	881a      	ldrh	r2, [r3, #0]
 801b6f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b6f2:	4413      	add	r3, r2
 801b6f4:	b29a      	uxth	r2, r3
 801b6f6:	4b46      	ldr	r3, [pc, #280]	; (801b810 <ip4_reass+0x298>)
 801b6f8:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b6fa:	69fb      	ldr	r3, [r7, #28]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d00d      	beq.n	801b71c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 801b700:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b702:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b704:	4413      	add	r3, r2
 801b706:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b70a:	8a7a      	ldrh	r2, [r7, #18]
 801b70c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b710:	7f9b      	ldrb	r3, [r3, #30]
 801b712:	f043 0301 	orr.w	r3, r3, #1
 801b716:	b2da      	uxtb	r2, r3
 801b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b71a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b71c:	697b      	ldr	r3, [r7, #20]
 801b71e:	2b01      	cmp	r3, #1
 801b720:	d168      	bne.n	801b7f4 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b724:	8b9b      	ldrh	r3, [r3, #28]
 801b726:	3314      	adds	r3, #20
 801b728:	b29a      	uxth	r2, r3
 801b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b72c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b730:	685b      	ldr	r3, [r3, #4]
 801b732:	685b      	ldr	r3, [r3, #4]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b73a:	685b      	ldr	r3, [r3, #4]
 801b73c:	685b      	ldr	r3, [r3, #4]
 801b73e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b742:	3308      	adds	r3, #8
 801b744:	2214      	movs	r2, #20
 801b746:	4619      	mov	r1, r3
 801b748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b74a:	f00b f89c 	bl	8026886 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b750:	8b9b      	ldrh	r3, [r3, #28]
 801b752:	4618      	mov	r0, r3
 801b754:	f7fd feac 	bl	80194b0 <lwip_htons>
 801b758:	4603      	mov	r3, r0
 801b75a:	461a      	mov	r2, r3
 801b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b75e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b762:	2200      	movs	r2, #0
 801b764:	719a      	strb	r2, [r3, #6]
 801b766:	2200      	movs	r2, #0
 801b768:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b76c:	2200      	movs	r2, #0
 801b76e:	729a      	strb	r2, [r3, #10]
 801b770:	2200      	movs	r2, #0
 801b772:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b776:	685b      	ldr	r3, [r3, #4]
 801b778:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b77a:	e00e      	b.n	801b79a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 801b77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b77e:	685b      	ldr	r3, [r3, #4]
 801b780:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801b782:	f06f 0113 	mvn.w	r1, #19
 801b786:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b788:	f001 faec 	bl	801cd64 <pbuf_header>
      pbuf_cat(p, r);
 801b78c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b78e:	6878      	ldr	r0, [r7, #4]
 801b790:	f001 fbe6 	bl	801cf60 <pbuf_cat>
      r = iprh->next_pbuf;
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d1ed      	bne.n	801b77c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b7a0:	4b1c      	ldr	r3, [pc, #112]	; (801b814 <ip4_reass+0x29c>)
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b7a6:	429a      	cmp	r2, r3
 801b7a8:	d102      	bne.n	801b7b0 <ip4_reass+0x238>
      ipr_prev = NULL;
 801b7aa:	2300      	movs	r3, #0
 801b7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b7ae:	e010      	b.n	801b7d2 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b7b0:	4b18      	ldr	r3, [pc, #96]	; (801b814 <ip4_reass+0x29c>)
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b7b6:	e007      	b.n	801b7c8 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801b7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7ba:	681a      	ldr	r2, [r3, #0]
 801b7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7be:	429a      	cmp	r2, r3
 801b7c0:	d006      	beq.n	801b7d0 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d1f4      	bne.n	801b7b8 <ip4_reass+0x240>
 801b7ce:	e000      	b.n	801b7d2 <ip4_reass+0x25a>
          break;
 801b7d0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b7d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b7d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b7d6:	f7ff fd39 	bl	801b24c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801b7da:	6878      	ldr	r0, [r7, #4]
 801b7dc:	f001 fb80 	bl	801cee0 <pbuf_clen>
 801b7e0:	4603      	mov	r3, r0
 801b7e2:	461a      	mov	r2, r3
 801b7e4:	4b0a      	ldr	r3, [pc, #40]	; (801b810 <ip4_reass+0x298>)
 801b7e6:	881b      	ldrh	r3, [r3, #0]
 801b7e8:	1a9b      	subs	r3, r3, r2
 801b7ea:	b29a      	uxth	r2, r3
 801b7ec:	4b08      	ldr	r3, [pc, #32]	; (801b810 <ip4_reass+0x298>)
 801b7ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	e008      	b.n	801b806 <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	e006      	b.n	801b806 <ip4_reass+0x28e>
    goto nullreturn;
 801b7f8:	bf00      	nop
 801b7fa:	e000      	b.n	801b7fe <ip4_reass+0x286>
    goto nullreturn;
 801b7fc:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b7fe:	6878      	ldr	r0, [r7, #4]
 801b800:	f001 fad4 	bl	801cdac <pbuf_free>
  return NULL;
 801b804:	2300      	movs	r3, #0
}
 801b806:	4618      	mov	r0, r3
 801b808:	3738      	adds	r7, #56	; 0x38
 801b80a:	46bd      	mov	sp, r7
 801b80c:	bd80      	pop	{r7, pc}
 801b80e:	bf00      	nop
 801b810:	200094a4 	.word	0x200094a4
 801b814:	200094a0 	.word	0x200094a0

0801b818 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b818:	b580      	push	{r7, lr}
 801b81a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801b81c:	2004      	movs	r0, #4
 801b81e:	f000 fd21 	bl	801c264 <memp_malloc>
 801b822:	4603      	mov	r3, r0
}
 801b824:	4618      	mov	r0, r3
 801b826:	bd80      	pop	{r7, pc}

0801b828 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801b828:	b580      	push	{r7, lr}
 801b82a:	b082      	sub	sp, #8
 801b82c:	af00      	add	r7, sp, #0
 801b82e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d106      	bne.n	801b844 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b836:	4b07      	ldr	r3, [pc, #28]	; (801b854 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b838:	f240 22ae 	movw	r2, #686	; 0x2ae
 801b83c:	4906      	ldr	r1, [pc, #24]	; (801b858 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b83e:	4807      	ldr	r0, [pc, #28]	; (801b85c <ip_frag_free_pbuf_custom_ref+0x34>)
 801b840:	f00a fb52 	bl	8025ee8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b844:	6879      	ldr	r1, [r7, #4]
 801b846:	2004      	movs	r0, #4
 801b848:	f000 fd5e 	bl	801c308 <memp_free>
}
 801b84c:	bf00      	nop
 801b84e:	3708      	adds	r7, #8
 801b850:	46bd      	mov	sp, r7
 801b852:	bd80      	pop	{r7, pc}
 801b854:	0802788c 	.word	0x0802788c
 801b858:	080279f4 	.word	0x080279f4
 801b85c:	080278d4 	.word	0x080278d4

0801b860 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b860:	b580      	push	{r7, lr}
 801b862:	b084      	sub	sp, #16
 801b864:	af00      	add	r7, sp, #0
 801b866:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b86c:	68fb      	ldr	r3, [r7, #12]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d106      	bne.n	801b880 <ipfrag_free_pbuf_custom+0x20>
 801b872:	4b11      	ldr	r3, [pc, #68]	; (801b8b8 <ipfrag_free_pbuf_custom+0x58>)
 801b874:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801b878:	4910      	ldr	r1, [pc, #64]	; (801b8bc <ipfrag_free_pbuf_custom+0x5c>)
 801b87a:	4811      	ldr	r0, [pc, #68]	; (801b8c0 <ipfrag_free_pbuf_custom+0x60>)
 801b87c:	f00a fb34 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 801b880:	68fa      	ldr	r2, [r7, #12]
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	429a      	cmp	r2, r3
 801b886:	d006      	beq.n	801b896 <ipfrag_free_pbuf_custom+0x36>
 801b888:	4b0b      	ldr	r3, [pc, #44]	; (801b8b8 <ipfrag_free_pbuf_custom+0x58>)
 801b88a:	f240 22b9 	movw	r2, #697	; 0x2b9
 801b88e:	490d      	ldr	r1, [pc, #52]	; (801b8c4 <ipfrag_free_pbuf_custom+0x64>)
 801b890:	480b      	ldr	r0, [pc, #44]	; (801b8c0 <ipfrag_free_pbuf_custom+0x60>)
 801b892:	f00a fb29 	bl	8025ee8 <iprintf>
  if (pcr->original != NULL) {
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	695b      	ldr	r3, [r3, #20]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d004      	beq.n	801b8a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	695b      	ldr	r3, [r3, #20]
 801b8a2:	4618      	mov	r0, r3
 801b8a4:	f001 fa82 	bl	801cdac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b8a8:	68f8      	ldr	r0, [r7, #12]
 801b8aa:	f7ff ffbd 	bl	801b828 <ip_frag_free_pbuf_custom_ref>
}
 801b8ae:	bf00      	nop
 801b8b0:	3710      	adds	r7, #16
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	bd80      	pop	{r7, pc}
 801b8b6:	bf00      	nop
 801b8b8:	0802788c 	.word	0x0802788c
 801b8bc:	08027a00 	.word	0x08027a00
 801b8c0:	080278d4 	.word	0x080278d4
 801b8c4:	08027a0c 	.word	0x08027a0c

0801b8c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b8c8:	b580      	push	{r7, lr}
 801b8ca:	b092      	sub	sp, #72	; 0x48
 801b8cc:	af02      	add	r7, sp, #8
 801b8ce:	60f8      	str	r0, [r7, #12]
 801b8d0:	60b9      	str	r1, [r7, #8]
 801b8d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801b8d8:	68bb      	ldr	r3, [r7, #8]
 801b8da:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b8dc:	3b14      	subs	r3, #20
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	da00      	bge.n	801b8e4 <ip4_frag+0x1c>
 801b8e2:	3307      	adds	r3, #7
 801b8e4:	10db      	asrs	r3, r3, #3
 801b8e6:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b8e8:	2314      	movs	r3, #20
 801b8ea:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	685b      	ldr	r3, [r3, #4]
 801b8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801b8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8f4:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8f8:	781b      	ldrb	r3, [r3, #0]
 801b8fa:	f003 030f 	and.w	r3, r3, #15
 801b8fe:	009b      	lsls	r3, r3, #2
 801b900:	2b14      	cmp	r3, #20
 801b902:	d009      	beq.n	801b918 <ip4_frag+0x50>
 801b904:	4b79      	ldr	r3, [pc, #484]	; (801baec <ip4_frag+0x224>)
 801b906:	f240 22e1 	movw	r2, #737	; 0x2e1
 801b90a:	4979      	ldr	r1, [pc, #484]	; (801baf0 <ip4_frag+0x228>)
 801b90c:	4879      	ldr	r0, [pc, #484]	; (801baf4 <ip4_frag+0x22c>)
 801b90e:	f00a faeb 	bl	8025ee8 <iprintf>
 801b912:	f06f 0305 	mvn.w	r3, #5
 801b916:	e0e5      	b.n	801bae4 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b91a:	88db      	ldrh	r3, [r3, #6]
 801b91c:	b29b      	uxth	r3, r3
 801b91e:	4618      	mov	r0, r3
 801b920:	f7fd fdc6 	bl	80194b0 <lwip_htons>
 801b924:	4603      	mov	r3, r0
 801b926:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 801b928:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b92a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b92e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801b930:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b936:	2b00      	cmp	r3, #0
 801b938:	d009      	beq.n	801b94e <ip4_frag+0x86>
 801b93a:	4b6c      	ldr	r3, [pc, #432]	; (801baec <ip4_frag+0x224>)
 801b93c:	f240 22e6 	movw	r2, #742	; 0x2e6
 801b940:	496d      	ldr	r1, [pc, #436]	; (801baf8 <ip4_frag+0x230>)
 801b942:	486c      	ldr	r0, [pc, #432]	; (801baf4 <ip4_frag+0x22c>)
 801b944:	f00a fad0 	bl	8025ee8 <iprintf>
 801b948:	f06f 0305 	mvn.w	r3, #5
 801b94c:	e0ca      	b.n	801bae4 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	891b      	ldrh	r3, [r3, #8]
 801b952:	3b14      	subs	r3, #20
 801b954:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801b956:	e0bc      	b.n	801bad2 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801b958:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801b95a:	00da      	lsls	r2, r3, #3
 801b95c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b95e:	4293      	cmp	r3, r2
 801b960:	bfa8      	it	ge
 801b962:	4613      	movge	r3, r2
 801b964:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b966:	2200      	movs	r2, #0
 801b968:	2114      	movs	r1, #20
 801b96a:	2002      	movs	r0, #2
 801b96c:	f000 feac 	bl	801c6c8 <pbuf_alloc>
 801b970:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801b972:	6a3b      	ldr	r3, [r7, #32]
 801b974:	2b00      	cmp	r3, #0
 801b976:	f000 80b2 	beq.w	801bade <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	895b      	ldrh	r3, [r3, #10]
 801b97e:	2b13      	cmp	r3, #19
 801b980:	d806      	bhi.n	801b990 <ip4_frag+0xc8>
 801b982:	4b5a      	ldr	r3, [pc, #360]	; (801baec <ip4_frag+0x224>)
 801b984:	f240 3209 	movw	r2, #777	; 0x309
 801b988:	495c      	ldr	r1, [pc, #368]	; (801bafc <ip4_frag+0x234>)
 801b98a:	485a      	ldr	r0, [pc, #360]	; (801baf4 <ip4_frag+0x22c>)
 801b98c:	f00a faac 	bl	8025ee8 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b990:	6a3b      	ldr	r3, [r7, #32]
 801b992:	685b      	ldr	r3, [r3, #4]
 801b994:	2214      	movs	r2, #20
 801b996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b998:	4618      	mov	r0, r3
 801b99a:	f00a ff74 	bl	8026886 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b99e:	6a3b      	ldr	r3, [r7, #32]
 801b9a0:	685b      	ldr	r3, [r3, #4]
 801b9a2:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801b9a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b9a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801b9a8:	e04f      	b.n	801ba4a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801b9aa:	68fb      	ldr	r3, [r7, #12]
 801b9ac:	895a      	ldrh	r2, [r3, #10]
 801b9ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b9b0:	1ad3      	subs	r3, r2, r3
 801b9b2:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b9b4:	8bfa      	ldrh	r2, [r7, #30]
 801b9b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b9b8:	4293      	cmp	r3, r2
 801b9ba:	bf28      	it	cs
 801b9bc:	4613      	movcs	r3, r2
 801b9be:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b9c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d105      	bne.n	801b9d2 <ip4_frag+0x10a>
        poff = 0;
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	60fb      	str	r3, [r7, #12]
        continue;
 801b9d0:	e03b      	b.n	801ba4a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b9d2:	f7ff ff21 	bl	801b818 <ip_frag_alloc_pbuf_custom_ref>
 801b9d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b9d8:	69bb      	ldr	r3, [r7, #24]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d103      	bne.n	801b9e6 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801b9de:	6a38      	ldr	r0, [r7, #32]
 801b9e0:	f001 f9e4 	bl	801cdac <pbuf_free>
        goto memerr;
 801b9e4:	e07c      	b.n	801bae0 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b9e6:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b9ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b9ee:	4413      	add	r3, r2
 801b9f0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801b9f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b9f4:	9201      	str	r2, [sp, #4]
 801b9f6:	9300      	str	r3, [sp, #0]
 801b9f8:	4603      	mov	r3, r0
 801b9fa:	2202      	movs	r2, #2
 801b9fc:	2004      	movs	r0, #4
 801b9fe:	f000 fff7 	bl	801c9f0 <pbuf_alloced_custom>
 801ba02:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ba04:	697b      	ldr	r3, [r7, #20]
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d106      	bne.n	801ba18 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ba0a:	69b8      	ldr	r0, [r7, #24]
 801ba0c:	f7ff ff0c 	bl	801b828 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ba10:	6a38      	ldr	r0, [r7, #32]
 801ba12:	f001 f9cb 	bl	801cdac <pbuf_free>
        goto memerr;
 801ba16:	e063      	b.n	801bae0 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801ba18:	68f8      	ldr	r0, [r7, #12]
 801ba1a:	f001 fa79 	bl	801cf10 <pbuf_ref>
      pcr->original = p;
 801ba1e:	69bb      	ldr	r3, [r7, #24]
 801ba20:	68fa      	ldr	r2, [r7, #12]
 801ba22:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ba24:	69bb      	ldr	r3, [r7, #24]
 801ba26:	4a36      	ldr	r2, [pc, #216]	; (801bb00 <ip4_frag+0x238>)
 801ba28:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ba2a:	6979      	ldr	r1, [r7, #20]
 801ba2c:	6a38      	ldr	r0, [r7, #32]
 801ba2e:	f001 fa97 	bl	801cf60 <pbuf_cat>
      left_to_copy -= newpbuflen;
 801ba32:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801ba34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ba36:	1ad3      	subs	r3, r2, r3
 801ba38:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801ba3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d004      	beq.n	801ba4a <ip4_frag+0x182>
        poff = 0;
 801ba40:	2300      	movs	r3, #0
 801ba42:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801ba44:	68fb      	ldr	r3, [r7, #12]
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ba4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d1ac      	bne.n	801b9aa <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 801ba50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801ba52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ba54:	4413      	add	r3, r2
 801ba56:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ba58:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ba5a:	68bb      	ldr	r3, [r7, #8]
 801ba5c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801ba5e:	3b14      	subs	r3, #20
 801ba60:	429a      	cmp	r2, r3
 801ba62:	bfd4      	ite	le
 801ba64:	2301      	movle	r3, #1
 801ba66:	2300      	movgt	r3, #0
 801ba68:	b2db      	uxtb	r3, r3
 801ba6a:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ba6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801ba6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ba72:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801ba74:	693b      	ldr	r3, [r7, #16]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d103      	bne.n	801ba82 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 801ba7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ba7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ba80:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ba82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ba84:	4618      	mov	r0, r3
 801ba86:	f7fd fd13 	bl	80194b0 <lwip_htons>
 801ba8a:	4603      	mov	r3, r0
 801ba8c:	461a      	mov	r2, r3
 801ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba90:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801ba92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ba94:	3314      	adds	r3, #20
 801ba96:	b29b      	uxth	r3, r3
 801ba98:	4618      	mov	r0, r3
 801ba9a:	f7fd fd09 	bl	80194b0 <lwip_htons>
 801ba9e:	4603      	mov	r3, r0
 801baa0:	461a      	mov	r2, r3
 801baa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baa4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baa8:	2200      	movs	r2, #0
 801baaa:	729a      	strb	r2, [r3, #10]
 801baac:	2200      	movs	r2, #0
 801baae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801bab0:	68bb      	ldr	r3, [r7, #8]
 801bab2:	695b      	ldr	r3, [r3, #20]
 801bab4:	687a      	ldr	r2, [r7, #4]
 801bab6:	6a39      	ldr	r1, [r7, #32]
 801bab8:	68b8      	ldr	r0, [r7, #8]
 801baba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801babc:	6a38      	ldr	r0, [r7, #32]
 801babe:	f001 f975 	bl	801cdac <pbuf_free>
    left -= fragsize;
 801bac2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bac4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bac6:	1ad3      	subs	r3, r2, r3
 801bac8:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801baca:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801bacc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801bace:	4413      	add	r3, r2
 801bad0:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801bad2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	f47f af3f 	bne.w	801b958 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801bada:	2300      	movs	r3, #0
 801badc:	e002      	b.n	801bae4 <ip4_frag+0x21c>
      goto memerr;
 801bade:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801bae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bae4:	4618      	mov	r0, r3
 801bae6:	3740      	adds	r7, #64	; 0x40
 801bae8:	46bd      	mov	sp, r7
 801baea:	bd80      	pop	{r7, pc}
 801baec:	0802788c 	.word	0x0802788c
 801baf0:	08027a18 	.word	0x08027a18
 801baf4:	080278d4 	.word	0x080278d4
 801baf8:	08027a40 	.word	0x08027a40
 801bafc:	08027a5c 	.word	0x08027a5c
 801bb00:	0801b861 	.word	0x0801b861

0801bb04 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b084      	sub	sp, #16
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801bb0c:	4b40      	ldr	r3, [pc, #256]	; (801bc10 <plug_holes+0x10c>)
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	687a      	ldr	r2, [r7, #4]
 801bb12:	429a      	cmp	r2, r3
 801bb14:	d206      	bcs.n	801bb24 <plug_holes+0x20>
 801bb16:	4b3f      	ldr	r3, [pc, #252]	; (801bc14 <plug_holes+0x110>)
 801bb18:	f240 125d 	movw	r2, #349	; 0x15d
 801bb1c:	493e      	ldr	r1, [pc, #248]	; (801bc18 <plug_holes+0x114>)
 801bb1e:	483f      	ldr	r0, [pc, #252]	; (801bc1c <plug_holes+0x118>)
 801bb20:	f00a f9e2 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801bb24:	4b3e      	ldr	r3, [pc, #248]	; (801bc20 <plug_holes+0x11c>)
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	687a      	ldr	r2, [r7, #4]
 801bb2a:	429a      	cmp	r2, r3
 801bb2c:	d306      	bcc.n	801bb3c <plug_holes+0x38>
 801bb2e:	4b39      	ldr	r3, [pc, #228]	; (801bc14 <plug_holes+0x110>)
 801bb30:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801bb34:	493b      	ldr	r1, [pc, #236]	; (801bc24 <plug_holes+0x120>)
 801bb36:	4839      	ldr	r0, [pc, #228]	; (801bc1c <plug_holes+0x118>)
 801bb38:	f00a f9d6 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	791b      	ldrb	r3, [r3, #4]
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d006      	beq.n	801bb52 <plug_holes+0x4e>
 801bb44:	4b33      	ldr	r3, [pc, #204]	; (801bc14 <plug_holes+0x110>)
 801bb46:	f240 125f 	movw	r2, #351	; 0x15f
 801bb4a:	4937      	ldr	r1, [pc, #220]	; (801bc28 <plug_holes+0x124>)
 801bb4c:	4833      	ldr	r0, [pc, #204]	; (801bc1c <plug_holes+0x118>)
 801bb4e:	f00a f9cb 	bl	8025ee8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	881b      	ldrh	r3, [r3, #0]
 801bb56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bb5a:	d906      	bls.n	801bb6a <plug_holes+0x66>
 801bb5c:	4b2d      	ldr	r3, [pc, #180]	; (801bc14 <plug_holes+0x110>)
 801bb5e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801bb62:	4932      	ldr	r1, [pc, #200]	; (801bc2c <plug_holes+0x128>)
 801bb64:	482d      	ldr	r0, [pc, #180]	; (801bc1c <plug_holes+0x118>)
 801bb66:	f00a f9bf 	bl	8025ee8 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 801bb6a:	4b29      	ldr	r3, [pc, #164]	; (801bc10 <plug_holes+0x10c>)
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	687a      	ldr	r2, [r7, #4]
 801bb70:	8812      	ldrh	r2, [r2, #0]
 801bb72:	4413      	add	r3, r2
 801bb74:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801bb76:	687a      	ldr	r2, [r7, #4]
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	429a      	cmp	r2, r3
 801bb7c:	d01f      	beq.n	801bbbe <plug_holes+0xba>
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	791b      	ldrb	r3, [r3, #4]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d11b      	bne.n	801bbbe <plug_holes+0xba>
 801bb86:	4b26      	ldr	r3, [pc, #152]	; (801bc20 <plug_holes+0x11c>)
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	68fa      	ldr	r2, [r7, #12]
 801bb8c:	429a      	cmp	r2, r3
 801bb8e:	d016      	beq.n	801bbbe <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801bb90:	4b27      	ldr	r3, [pc, #156]	; (801bc30 <plug_holes+0x12c>)
 801bb92:	681a      	ldr	r2, [r3, #0]
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	429a      	cmp	r2, r3
 801bb98:	d102      	bne.n	801bba0 <plug_holes+0x9c>
      lfree = mem;
 801bb9a:	4a25      	ldr	r2, [pc, #148]	; (801bc30 <plug_holes+0x12c>)
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801bba0:	68fb      	ldr	r3, [r7, #12]
 801bba2:	881a      	ldrh	r2, [r3, #0]
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 801bba8:	4b19      	ldr	r3, [pc, #100]	; (801bc10 <plug_holes+0x10c>)
 801bbaa:	681b      	ldr	r3, [r3, #0]
 801bbac:	68fa      	ldr	r2, [r7, #12]
 801bbae:	8812      	ldrh	r2, [r2, #0]
 801bbb0:	4413      	add	r3, r2
 801bbb2:	687a      	ldr	r2, [r7, #4]
 801bbb4:	4916      	ldr	r1, [pc, #88]	; (801bc10 <plug_holes+0x10c>)
 801bbb6:	6809      	ldr	r1, [r1, #0]
 801bbb8:	1a52      	subs	r2, r2, r1
 801bbba:	b292      	uxth	r2, r2
 801bbbc:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 801bbbe:	4b14      	ldr	r3, [pc, #80]	; (801bc10 <plug_holes+0x10c>)
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	687a      	ldr	r2, [r7, #4]
 801bbc4:	8852      	ldrh	r2, [r2, #2]
 801bbc6:	4413      	add	r3, r2
 801bbc8:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801bbca:	68ba      	ldr	r2, [r7, #8]
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	429a      	cmp	r2, r3
 801bbd0:	d01a      	beq.n	801bc08 <plug_holes+0x104>
 801bbd2:	68bb      	ldr	r3, [r7, #8]
 801bbd4:	791b      	ldrb	r3, [r3, #4]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d116      	bne.n	801bc08 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801bbda:	4b15      	ldr	r3, [pc, #84]	; (801bc30 <plug_holes+0x12c>)
 801bbdc:	681a      	ldr	r2, [r3, #0]
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	429a      	cmp	r2, r3
 801bbe2:	d102      	bne.n	801bbea <plug_holes+0xe6>
      lfree = pmem;
 801bbe4:	4a12      	ldr	r2, [pc, #72]	; (801bc30 <plug_holes+0x12c>)
 801bbe6:	68bb      	ldr	r3, [r7, #8]
 801bbe8:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	881a      	ldrh	r2, [r3, #0]
 801bbee:	68bb      	ldr	r3, [r7, #8]
 801bbf0:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 801bbf2:	4b07      	ldr	r3, [pc, #28]	; (801bc10 <plug_holes+0x10c>)
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	687a      	ldr	r2, [r7, #4]
 801bbf8:	8812      	ldrh	r2, [r2, #0]
 801bbfa:	4413      	add	r3, r2
 801bbfc:	68ba      	ldr	r2, [r7, #8]
 801bbfe:	4904      	ldr	r1, [pc, #16]	; (801bc10 <plug_holes+0x10c>)
 801bc00:	6809      	ldr	r1, [r1, #0]
 801bc02:	1a52      	subs	r2, r2, r1
 801bc04:	b292      	uxth	r2, r2
 801bc06:	805a      	strh	r2, [r3, #2]
  }
}
 801bc08:	bf00      	nop
 801bc0a:	3710      	adds	r7, #16
 801bc0c:	46bd      	mov	sp, r7
 801bc0e:	bd80      	pop	{r7, pc}
 801bc10:	200094a8 	.word	0x200094a8
 801bc14:	08027a7c 	.word	0x08027a7c
 801bc18:	08027aac 	.word	0x08027aac
 801bc1c:	08027ac4 	.word	0x08027ac4
 801bc20:	200094ac 	.word	0x200094ac
 801bc24:	08027aec 	.word	0x08027aec
 801bc28:	08027b08 	.word	0x08027b08
 801bc2c:	08027b24 	.word	0x08027b24
 801bc30:	200094b0 	.word	0x200094b0

0801bc34 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801bc34:	b580      	push	{r7, lr}
 801bc36:	b082      	sub	sp, #8
 801bc38:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801bc3a:	4b1e      	ldr	r3, [pc, #120]	; (801bcb4 <mem_init+0x80>)
 801bc3c:	3303      	adds	r3, #3
 801bc3e:	f023 0303 	bic.w	r3, r3, #3
 801bc42:	461a      	mov	r2, r3
 801bc44:	4b1c      	ldr	r3, [pc, #112]	; (801bcb8 <mem_init+0x84>)
 801bc46:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801bc48:	4b1b      	ldr	r3, [pc, #108]	; (801bcb8 <mem_init+0x84>)
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801bc54:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	2200      	movs	r2, #0
 801bc5a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	2200      	movs	r2, #0
 801bc60:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 801bc62:	4b15      	ldr	r3, [pc, #84]	; (801bcb8 <mem_init+0x84>)
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 801bc6a:	4a14      	ldr	r2, [pc, #80]	; (801bcbc <mem_init+0x88>)
 801bc6c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801bc6e:	4b13      	ldr	r3, [pc, #76]	; (801bcbc <mem_init+0x88>)
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	2201      	movs	r2, #1
 801bc74:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801bc76:	4b11      	ldr	r3, [pc, #68]	; (801bcbc <mem_init+0x88>)
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801bc7e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801bc80:	4b0e      	ldr	r3, [pc, #56]	; (801bcbc <mem_init+0x88>)
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801bc88:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801bc8a:	4b0b      	ldr	r3, [pc, #44]	; (801bcb8 <mem_init+0x84>)
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	4a0c      	ldr	r2, [pc, #48]	; (801bcc0 <mem_init+0x8c>)
 801bc90:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801bc92:	480c      	ldr	r0, [pc, #48]	; (801bcc4 <mem_init+0x90>)
 801bc94:	f007 f90a 	bl	8022eac <sys_mutex_new>
 801bc98:	4603      	mov	r3, r0
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d006      	beq.n	801bcac <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801bc9e:	4b0a      	ldr	r3, [pc, #40]	; (801bcc8 <mem_init+0x94>)
 801bca0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801bca4:	4909      	ldr	r1, [pc, #36]	; (801bccc <mem_init+0x98>)
 801bca6:	480a      	ldr	r0, [pc, #40]	; (801bcd0 <mem_init+0x9c>)
 801bca8:	f00a f91e 	bl	8025ee8 <iprintf>
  }
}
 801bcac:	bf00      	nop
 801bcae:	3708      	adds	r7, #8
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	bd80      	pop	{r7, pc}
 801bcb4:	2000a278 	.word	0x2000a278
 801bcb8:	200094a8 	.word	0x200094a8
 801bcbc:	200094ac 	.word	0x200094ac
 801bcc0:	200094b0 	.word	0x200094b0
 801bcc4:	200094b4 	.word	0x200094b4
 801bcc8:	08027a7c 	.word	0x08027a7c
 801bccc:	08027b50 	.word	0x08027b50
 801bcd0:	08027ac4 	.word	0x08027ac4

0801bcd4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b084      	sub	sp, #16
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d050      	beq.n	801bd84 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	f003 0303 	and.w	r3, r3, #3
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d006      	beq.n	801bcfa <mem_free+0x26>
 801bcec:	4b27      	ldr	r3, [pc, #156]	; (801bd8c <mem_free+0xb8>)
 801bcee:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 801bcf2:	4927      	ldr	r1, [pc, #156]	; (801bd90 <mem_free+0xbc>)
 801bcf4:	4827      	ldr	r0, [pc, #156]	; (801bd94 <mem_free+0xc0>)
 801bcf6:	f00a f8f7 	bl	8025ee8 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801bcfa:	4b27      	ldr	r3, [pc, #156]	; (801bd98 <mem_free+0xc4>)
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	687a      	ldr	r2, [r7, #4]
 801bd00:	429a      	cmp	r2, r3
 801bd02:	d304      	bcc.n	801bd0e <mem_free+0x3a>
 801bd04:	4b25      	ldr	r3, [pc, #148]	; (801bd9c <mem_free+0xc8>)
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	687a      	ldr	r2, [r7, #4]
 801bd0a:	429a      	cmp	r2, r3
 801bd0c:	d306      	bcc.n	801bd1c <mem_free+0x48>
 801bd0e:	4b1f      	ldr	r3, [pc, #124]	; (801bd8c <mem_free+0xb8>)
 801bd10:	f240 12af 	movw	r2, #431	; 0x1af
 801bd14:	4922      	ldr	r1, [pc, #136]	; (801bda0 <mem_free+0xcc>)
 801bd16:	481f      	ldr	r0, [pc, #124]	; (801bd94 <mem_free+0xc0>)
 801bd18:	f00a f8e6 	bl	8025ee8 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801bd1c:	4b1e      	ldr	r3, [pc, #120]	; (801bd98 <mem_free+0xc4>)
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	687a      	ldr	r2, [r7, #4]
 801bd22:	429a      	cmp	r2, r3
 801bd24:	d304      	bcc.n	801bd30 <mem_free+0x5c>
 801bd26:	4b1d      	ldr	r3, [pc, #116]	; (801bd9c <mem_free+0xc8>)
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	687a      	ldr	r2, [r7, #4]
 801bd2c:	429a      	cmp	r2, r3
 801bd2e:	d306      	bcc.n	801bd3e <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 801bd30:	f007 f91a 	bl	8022f68 <sys_arch_protect>
 801bd34:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 801bd36:	68b8      	ldr	r0, [r7, #8]
 801bd38:	f007 f924 	bl	8022f84 <sys_arch_unprotect>
    return;
 801bd3c:	e023      	b.n	801bd86 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801bd3e:	4819      	ldr	r0, [pc, #100]	; (801bda4 <mem_free+0xd0>)
 801bd40:	f007 f8d0 	bl	8022ee4 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	3b08      	subs	r3, #8
 801bd48:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	791b      	ldrb	r3, [r3, #4]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d106      	bne.n	801bd60 <mem_free+0x8c>
 801bd52:	4b0e      	ldr	r3, [pc, #56]	; (801bd8c <mem_free+0xb8>)
 801bd54:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 801bd58:	4913      	ldr	r1, [pc, #76]	; (801bda8 <mem_free+0xd4>)
 801bd5a:	480e      	ldr	r0, [pc, #56]	; (801bd94 <mem_free+0xc0>)
 801bd5c:	f00a f8c4 	bl	8025ee8 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	2200      	movs	r2, #0
 801bd64:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801bd66:	4b11      	ldr	r3, [pc, #68]	; (801bdac <mem_free+0xd8>)
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	68fa      	ldr	r2, [r7, #12]
 801bd6c:	429a      	cmp	r2, r3
 801bd6e:	d202      	bcs.n	801bd76 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801bd70:	4a0e      	ldr	r2, [pc, #56]	; (801bdac <mem_free+0xd8>)
 801bd72:	68fb      	ldr	r3, [r7, #12]
 801bd74:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801bd76:	68f8      	ldr	r0, [r7, #12]
 801bd78:	f7ff fec4 	bl	801bb04 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801bd7c:	4809      	ldr	r0, [pc, #36]	; (801bda4 <mem_free+0xd0>)
 801bd7e:	f007 f8c0 	bl	8022f02 <sys_mutex_unlock>
 801bd82:	e000      	b.n	801bd86 <mem_free+0xb2>
    return;
 801bd84:	bf00      	nop
}
 801bd86:	3710      	adds	r7, #16
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bd80      	pop	{r7, pc}
 801bd8c:	08027a7c 	.word	0x08027a7c
 801bd90:	08027b6c 	.word	0x08027b6c
 801bd94:	08027ac4 	.word	0x08027ac4
 801bd98:	200094a8 	.word	0x200094a8
 801bd9c:	200094ac 	.word	0x200094ac
 801bda0:	08027b90 	.word	0x08027b90
 801bda4:	200094b4 	.word	0x200094b4
 801bda8:	08027ba8 	.word	0x08027ba8
 801bdac:	200094b0 	.word	0x200094b0

0801bdb0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 801bdb0:	b580      	push	{r7, lr}
 801bdb2:	b088      	sub	sp, #32
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	6078      	str	r0, [r7, #4]
 801bdb8:	460b      	mov	r3, r1
 801bdba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 801bdbc:	887b      	ldrh	r3, [r7, #2]
 801bdbe:	3303      	adds	r3, #3
 801bdc0:	b29b      	uxth	r3, r3
 801bdc2:	f023 0303 	bic.w	r3, r3, #3
 801bdc6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 801bdc8:	887b      	ldrh	r3, [r7, #2]
 801bdca:	2b0b      	cmp	r3, #11
 801bdcc:	d801      	bhi.n	801bdd2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801bdce:	230c      	movs	r3, #12
 801bdd0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 801bdd2:	887b      	ldrh	r3, [r7, #2]
 801bdd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bdd8:	d901      	bls.n	801bdde <mem_trim+0x2e>
    return NULL;
 801bdda:	2300      	movs	r3, #0
 801bddc:	e0bd      	b.n	801bf5a <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801bdde:	4b61      	ldr	r3, [pc, #388]	; (801bf64 <mem_trim+0x1b4>)
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	687a      	ldr	r2, [r7, #4]
 801bde4:	429a      	cmp	r2, r3
 801bde6:	d304      	bcc.n	801bdf2 <mem_trim+0x42>
 801bde8:	4b5f      	ldr	r3, [pc, #380]	; (801bf68 <mem_trim+0x1b8>)
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	687a      	ldr	r2, [r7, #4]
 801bdee:	429a      	cmp	r2, r3
 801bdf0:	d306      	bcc.n	801be00 <mem_trim+0x50>
 801bdf2:	4b5e      	ldr	r3, [pc, #376]	; (801bf6c <mem_trim+0x1bc>)
 801bdf4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801bdf8:	495d      	ldr	r1, [pc, #372]	; (801bf70 <mem_trim+0x1c0>)
 801bdfa:	485e      	ldr	r0, [pc, #376]	; (801bf74 <mem_trim+0x1c4>)
 801bdfc:	f00a f874 	bl	8025ee8 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801be00:	4b58      	ldr	r3, [pc, #352]	; (801bf64 <mem_trim+0x1b4>)
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	687a      	ldr	r2, [r7, #4]
 801be06:	429a      	cmp	r2, r3
 801be08:	d304      	bcc.n	801be14 <mem_trim+0x64>
 801be0a:	4b57      	ldr	r3, [pc, #348]	; (801bf68 <mem_trim+0x1b8>)
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	687a      	ldr	r2, [r7, #4]
 801be10:	429a      	cmp	r2, r3
 801be12:	d307      	bcc.n	801be24 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 801be14:	f007 f8a8 	bl	8022f68 <sys_arch_protect>
 801be18:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 801be1a:	68f8      	ldr	r0, [r7, #12]
 801be1c:	f007 f8b2 	bl	8022f84 <sys_arch_unprotect>
    return rmem;
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	e09a      	b.n	801bf5a <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	3b08      	subs	r3, #8
 801be28:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 801be2a:	69fb      	ldr	r3, [r7, #28]
 801be2c:	4a4d      	ldr	r2, [pc, #308]	; (801bf64 <mem_trim+0x1b4>)
 801be2e:	6812      	ldr	r2, [r2, #0]
 801be30:	1a9b      	subs	r3, r3, r2
 801be32:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 801be34:	69fb      	ldr	r3, [r7, #28]
 801be36:	881a      	ldrh	r2, [r3, #0]
 801be38:	8b7b      	ldrh	r3, [r7, #26]
 801be3a:	1ad3      	subs	r3, r2, r3
 801be3c:	b29b      	uxth	r3, r3
 801be3e:	3b08      	subs	r3, #8
 801be40:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801be42:	887a      	ldrh	r2, [r7, #2]
 801be44:	8b3b      	ldrh	r3, [r7, #24]
 801be46:	429a      	cmp	r2, r3
 801be48:	d906      	bls.n	801be58 <mem_trim+0xa8>
 801be4a:	4b48      	ldr	r3, [pc, #288]	; (801bf6c <mem_trim+0x1bc>)
 801be4c:	f240 2206 	movw	r2, #518	; 0x206
 801be50:	4949      	ldr	r1, [pc, #292]	; (801bf78 <mem_trim+0x1c8>)
 801be52:	4848      	ldr	r0, [pc, #288]	; (801bf74 <mem_trim+0x1c4>)
 801be54:	f00a f848 	bl	8025ee8 <iprintf>
  if (newsize > size) {
 801be58:	887a      	ldrh	r2, [r7, #2]
 801be5a:	8b3b      	ldrh	r3, [r7, #24]
 801be5c:	429a      	cmp	r2, r3
 801be5e:	d901      	bls.n	801be64 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 801be60:	2300      	movs	r3, #0
 801be62:	e07a      	b.n	801bf5a <mem_trim+0x1aa>
  }
  if (newsize == size) {
 801be64:	887a      	ldrh	r2, [r7, #2]
 801be66:	8b3b      	ldrh	r3, [r7, #24]
 801be68:	429a      	cmp	r2, r3
 801be6a:	d101      	bne.n	801be70 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	e074      	b.n	801bf5a <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801be70:	4842      	ldr	r0, [pc, #264]	; (801bf7c <mem_trim+0x1cc>)
 801be72:	f007 f837 	bl	8022ee4 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 801be76:	4b3b      	ldr	r3, [pc, #236]	; (801bf64 <mem_trim+0x1b4>)
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	69fa      	ldr	r2, [r7, #28]
 801be7c:	8812      	ldrh	r2, [r2, #0]
 801be7e:	4413      	add	r3, r2
 801be80:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 801be82:	697b      	ldr	r3, [r7, #20]
 801be84:	791b      	ldrb	r3, [r3, #4]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d131      	bne.n	801beee <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 801be8a:	697b      	ldr	r3, [r7, #20]
 801be8c:	881b      	ldrh	r3, [r3, #0]
 801be8e:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801be90:	8b7a      	ldrh	r2, [r7, #26]
 801be92:	887b      	ldrh	r3, [r7, #2]
 801be94:	4413      	add	r3, r2
 801be96:	b29b      	uxth	r3, r3
 801be98:	3308      	adds	r3, #8
 801be9a:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 801be9c:	4b38      	ldr	r3, [pc, #224]	; (801bf80 <mem_trim+0x1d0>)
 801be9e:	681a      	ldr	r2, [r3, #0]
 801bea0:	697b      	ldr	r3, [r7, #20]
 801bea2:	429a      	cmp	r2, r3
 801bea4:	d105      	bne.n	801beb2 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 801bea6:	4b2f      	ldr	r3, [pc, #188]	; (801bf64 <mem_trim+0x1b4>)
 801bea8:	681a      	ldr	r2, [r3, #0]
 801beaa:	8a3b      	ldrh	r3, [r7, #16]
 801beac:	4413      	add	r3, r2
 801beae:	4a34      	ldr	r2, [pc, #208]	; (801bf80 <mem_trim+0x1d0>)
 801beb0:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801beb2:	4b2c      	ldr	r3, [pc, #176]	; (801bf64 <mem_trim+0x1b4>)
 801beb4:	681a      	ldr	r2, [r3, #0]
 801beb6:	8a3b      	ldrh	r3, [r7, #16]
 801beb8:	4413      	add	r3, r2
 801beba:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 801bebc:	697b      	ldr	r3, [r7, #20]
 801bebe:	2200      	movs	r2, #0
 801bec0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801bec2:	697b      	ldr	r3, [r7, #20]
 801bec4:	8a7a      	ldrh	r2, [r7, #18]
 801bec6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801bec8:	697b      	ldr	r3, [r7, #20]
 801beca:	8b7a      	ldrh	r2, [r7, #26]
 801becc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801bece:	69fb      	ldr	r3, [r7, #28]
 801bed0:	8a3a      	ldrh	r2, [r7, #16]
 801bed2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801bed4:	697b      	ldr	r3, [r7, #20]
 801bed6:	881b      	ldrh	r3, [r3, #0]
 801bed8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bedc:	d039      	beq.n	801bf52 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801bede:	4b21      	ldr	r3, [pc, #132]	; (801bf64 <mem_trim+0x1b4>)
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	697a      	ldr	r2, [r7, #20]
 801bee4:	8812      	ldrh	r2, [r2, #0]
 801bee6:	4413      	add	r3, r2
 801bee8:	8a3a      	ldrh	r2, [r7, #16]
 801beea:	805a      	strh	r2, [r3, #2]
 801beec:	e031      	b.n	801bf52 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801beee:	887b      	ldrh	r3, [r7, #2]
 801bef0:	f103 0214 	add.w	r2, r3, #20
 801bef4:	8b3b      	ldrh	r3, [r7, #24]
 801bef6:	429a      	cmp	r2, r3
 801bef8:	d82b      	bhi.n	801bf52 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801befa:	8b7a      	ldrh	r2, [r7, #26]
 801befc:	887b      	ldrh	r3, [r7, #2]
 801befe:	4413      	add	r3, r2
 801bf00:	b29b      	uxth	r3, r3
 801bf02:	3308      	adds	r3, #8
 801bf04:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801bf06:	4b17      	ldr	r3, [pc, #92]	; (801bf64 <mem_trim+0x1b4>)
 801bf08:	681a      	ldr	r2, [r3, #0]
 801bf0a:	8a3b      	ldrh	r3, [r7, #16]
 801bf0c:	4413      	add	r3, r2
 801bf0e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 801bf10:	4b1b      	ldr	r3, [pc, #108]	; (801bf80 <mem_trim+0x1d0>)
 801bf12:	681b      	ldr	r3, [r3, #0]
 801bf14:	697a      	ldr	r2, [r7, #20]
 801bf16:	429a      	cmp	r2, r3
 801bf18:	d202      	bcs.n	801bf20 <mem_trim+0x170>
      lfree = mem2;
 801bf1a:	4a19      	ldr	r2, [pc, #100]	; (801bf80 <mem_trim+0x1d0>)
 801bf1c:	697b      	ldr	r3, [r7, #20]
 801bf1e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801bf20:	697b      	ldr	r3, [r7, #20]
 801bf22:	2200      	movs	r2, #0
 801bf24:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801bf26:	69fb      	ldr	r3, [r7, #28]
 801bf28:	881a      	ldrh	r2, [r3, #0]
 801bf2a:	697b      	ldr	r3, [r7, #20]
 801bf2c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801bf2e:	697b      	ldr	r3, [r7, #20]
 801bf30:	8b7a      	ldrh	r2, [r7, #26]
 801bf32:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801bf34:	69fb      	ldr	r3, [r7, #28]
 801bf36:	8a3a      	ldrh	r2, [r7, #16]
 801bf38:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801bf3a:	697b      	ldr	r3, [r7, #20]
 801bf3c:	881b      	ldrh	r3, [r3, #0]
 801bf3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bf42:	d006      	beq.n	801bf52 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801bf44:	4b07      	ldr	r3, [pc, #28]	; (801bf64 <mem_trim+0x1b4>)
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	697a      	ldr	r2, [r7, #20]
 801bf4a:	8812      	ldrh	r2, [r2, #0]
 801bf4c:	4413      	add	r3, r2
 801bf4e:	8a3a      	ldrh	r2, [r7, #16]
 801bf50:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801bf52:	480a      	ldr	r0, [pc, #40]	; (801bf7c <mem_trim+0x1cc>)
 801bf54:	f006 ffd5 	bl	8022f02 <sys_mutex_unlock>
  return rmem;
 801bf58:	687b      	ldr	r3, [r7, #4]
}
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	3720      	adds	r7, #32
 801bf5e:	46bd      	mov	sp, r7
 801bf60:	bd80      	pop	{r7, pc}
 801bf62:	bf00      	nop
 801bf64:	200094a8 	.word	0x200094a8
 801bf68:	200094ac 	.word	0x200094ac
 801bf6c:	08027a7c 	.word	0x08027a7c
 801bf70:	08027bbc 	.word	0x08027bbc
 801bf74:	08027ac4 	.word	0x08027ac4
 801bf78:	08027bd4 	.word	0x08027bd4
 801bf7c:	200094b4 	.word	0x200094b4
 801bf80:	200094b0 	.word	0x200094b0

0801bf84 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 801bf84:	b580      	push	{r7, lr}
 801bf86:	b088      	sub	sp, #32
 801bf88:	af00      	add	r7, sp, #0
 801bf8a:	4603      	mov	r3, r0
 801bf8c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 801bf8e:	88fb      	ldrh	r3, [r7, #6]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d101      	bne.n	801bf98 <mem_malloc+0x14>
    return NULL;
 801bf94:	2300      	movs	r3, #0
 801bf96:	e0d1      	b.n	801c13c <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 801bf98:	88fb      	ldrh	r3, [r7, #6]
 801bf9a:	3303      	adds	r3, #3
 801bf9c:	b29b      	uxth	r3, r3
 801bf9e:	f023 0303 	bic.w	r3, r3, #3
 801bfa2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 801bfa4:	88fb      	ldrh	r3, [r7, #6]
 801bfa6:	2b0b      	cmp	r3, #11
 801bfa8:	d801      	bhi.n	801bfae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801bfaa:	230c      	movs	r3, #12
 801bfac:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 801bfae:	88fb      	ldrh	r3, [r7, #6]
 801bfb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801bfb4:	d901      	bls.n	801bfba <mem_malloc+0x36>
    return NULL;
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	e0c0      	b.n	801c13c <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801bfba:	4862      	ldr	r0, [pc, #392]	; (801c144 <mem_malloc+0x1c0>)
 801bfbc:	f006 ff92 	bl	8022ee4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801bfc0:	4b61      	ldr	r3, [pc, #388]	; (801c148 <mem_malloc+0x1c4>)
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	461a      	mov	r2, r3
 801bfc6:	4b61      	ldr	r3, [pc, #388]	; (801c14c <mem_malloc+0x1c8>)
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	1ad3      	subs	r3, r2, r3
 801bfcc:	83fb      	strh	r3, [r7, #30]
 801bfce:	e0aa      	b.n	801c126 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 801bfd0:	4b5e      	ldr	r3, [pc, #376]	; (801c14c <mem_malloc+0x1c8>)
 801bfd2:	681a      	ldr	r2, [r3, #0]
 801bfd4:	8bfb      	ldrh	r3, [r7, #30]
 801bfd6:	4413      	add	r3, r2
 801bfd8:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801bfda:	697b      	ldr	r3, [r7, #20]
 801bfdc:	791b      	ldrb	r3, [r3, #4]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	f040 809b 	bne.w	801c11a <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801bfe4:	697b      	ldr	r3, [r7, #20]
 801bfe6:	881b      	ldrh	r3, [r3, #0]
 801bfe8:	461a      	mov	r2, r3
 801bfea:	8bfb      	ldrh	r3, [r7, #30]
 801bfec:	1ad3      	subs	r3, r2, r3
 801bfee:	f1a3 0208 	sub.w	r2, r3, #8
 801bff2:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 801bff4:	429a      	cmp	r2, r3
 801bff6:	f0c0 8090 	bcc.w	801c11a <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801bffa:	697b      	ldr	r3, [r7, #20]
 801bffc:	881b      	ldrh	r3, [r3, #0]
 801bffe:	461a      	mov	r2, r3
 801c000:	8bfb      	ldrh	r3, [r7, #30]
 801c002:	1ad3      	subs	r3, r2, r3
 801c004:	f1a3 0208 	sub.w	r2, r3, #8
 801c008:	88fb      	ldrh	r3, [r7, #6]
 801c00a:	3314      	adds	r3, #20
 801c00c:	429a      	cmp	r2, r3
 801c00e:	d327      	bcc.n	801c060 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 801c010:	8bfa      	ldrh	r2, [r7, #30]
 801c012:	88fb      	ldrh	r3, [r7, #6]
 801c014:	4413      	add	r3, r2
 801c016:	b29b      	uxth	r3, r3
 801c018:	3308      	adds	r3, #8
 801c01a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 801c01c:	4b4b      	ldr	r3, [pc, #300]	; (801c14c <mem_malloc+0x1c8>)
 801c01e:	681a      	ldr	r2, [r3, #0]
 801c020:	8a7b      	ldrh	r3, [r7, #18]
 801c022:	4413      	add	r3, r2
 801c024:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	2200      	movs	r2, #0
 801c02a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801c02c:	697b      	ldr	r3, [r7, #20]
 801c02e:	881a      	ldrh	r2, [r3, #0]
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	8bfa      	ldrh	r2, [r7, #30]
 801c038:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801c03a:	697b      	ldr	r3, [r7, #20]
 801c03c:	8a7a      	ldrh	r2, [r7, #18]
 801c03e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801c040:	697b      	ldr	r3, [r7, #20]
 801c042:	2201      	movs	r2, #1
 801c044:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801c046:	68fb      	ldr	r3, [r7, #12]
 801c048:	881b      	ldrh	r3, [r3, #0]
 801c04a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801c04e:	d00a      	beq.n	801c066 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801c050:	4b3e      	ldr	r3, [pc, #248]	; (801c14c <mem_malloc+0x1c8>)
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	68fa      	ldr	r2, [r7, #12]
 801c056:	8812      	ldrh	r2, [r2, #0]
 801c058:	4413      	add	r3, r2
 801c05a:	8a7a      	ldrh	r2, [r7, #18]
 801c05c:	805a      	strh	r2, [r3, #2]
 801c05e:	e002      	b.n	801c066 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801c060:	697b      	ldr	r3, [r7, #20]
 801c062:	2201      	movs	r2, #1
 801c064:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801c066:	4b38      	ldr	r3, [pc, #224]	; (801c148 <mem_malloc+0x1c4>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	697a      	ldr	r2, [r7, #20]
 801c06c:	429a      	cmp	r2, r3
 801c06e:	d127      	bne.n	801c0c0 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 801c070:	4b35      	ldr	r3, [pc, #212]	; (801c148 <mem_malloc+0x1c4>)
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801c076:	e005      	b.n	801c084 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 801c078:	4b34      	ldr	r3, [pc, #208]	; (801c14c <mem_malloc+0x1c8>)
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	69ba      	ldr	r2, [r7, #24]
 801c07e:	8812      	ldrh	r2, [r2, #0]
 801c080:	4413      	add	r3, r2
 801c082:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 801c084:	69bb      	ldr	r3, [r7, #24]
 801c086:	791b      	ldrb	r3, [r3, #4]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d004      	beq.n	801c096 <mem_malloc+0x112>
 801c08c:	4b30      	ldr	r3, [pc, #192]	; (801c150 <mem_malloc+0x1cc>)
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	69ba      	ldr	r2, [r7, #24]
 801c092:	429a      	cmp	r2, r3
 801c094:	d1f0      	bne.n	801c078 <mem_malloc+0xf4>
          }
          lfree = cur;
 801c096:	4a2c      	ldr	r2, [pc, #176]	; (801c148 <mem_malloc+0x1c4>)
 801c098:	69bb      	ldr	r3, [r7, #24]
 801c09a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801c09c:	4b2a      	ldr	r3, [pc, #168]	; (801c148 <mem_malloc+0x1c4>)
 801c09e:	681a      	ldr	r2, [r3, #0]
 801c0a0:	4b2b      	ldr	r3, [pc, #172]	; (801c150 <mem_malloc+0x1cc>)
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	429a      	cmp	r2, r3
 801c0a6:	d00b      	beq.n	801c0c0 <mem_malloc+0x13c>
 801c0a8:	4b27      	ldr	r3, [pc, #156]	; (801c148 <mem_malloc+0x1c4>)
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	791b      	ldrb	r3, [r3, #4]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d006      	beq.n	801c0c0 <mem_malloc+0x13c>
 801c0b2:	4b28      	ldr	r3, [pc, #160]	; (801c154 <mem_malloc+0x1d0>)
 801c0b4:	f240 22cf 	movw	r2, #719	; 0x2cf
 801c0b8:	4927      	ldr	r1, [pc, #156]	; (801c158 <mem_malloc+0x1d4>)
 801c0ba:	4828      	ldr	r0, [pc, #160]	; (801c15c <mem_malloc+0x1d8>)
 801c0bc:	f009 ff14 	bl	8025ee8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801c0c0:	4820      	ldr	r0, [pc, #128]	; (801c144 <mem_malloc+0x1c0>)
 801c0c2:	f006 ff1e 	bl	8022f02 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801c0c6:	88fa      	ldrh	r2, [r7, #6]
 801c0c8:	697b      	ldr	r3, [r7, #20]
 801c0ca:	4413      	add	r3, r2
 801c0cc:	3308      	adds	r3, #8
 801c0ce:	4a20      	ldr	r2, [pc, #128]	; (801c150 <mem_malloc+0x1cc>)
 801c0d0:	6812      	ldr	r2, [r2, #0]
 801c0d2:	4293      	cmp	r3, r2
 801c0d4:	d906      	bls.n	801c0e4 <mem_malloc+0x160>
 801c0d6:	4b1f      	ldr	r3, [pc, #124]	; (801c154 <mem_malloc+0x1d0>)
 801c0d8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801c0dc:	4920      	ldr	r1, [pc, #128]	; (801c160 <mem_malloc+0x1dc>)
 801c0de:	481f      	ldr	r0, [pc, #124]	; (801c15c <mem_malloc+0x1d8>)
 801c0e0:	f009 ff02 	bl	8025ee8 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801c0e4:	697b      	ldr	r3, [r7, #20]
 801c0e6:	f003 0303 	and.w	r3, r3, #3
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d006      	beq.n	801c0fc <mem_malloc+0x178>
 801c0ee:	4b19      	ldr	r3, [pc, #100]	; (801c154 <mem_malloc+0x1d0>)
 801c0f0:	f240 22d6 	movw	r2, #726	; 0x2d6
 801c0f4:	491b      	ldr	r1, [pc, #108]	; (801c164 <mem_malloc+0x1e0>)
 801c0f6:	4819      	ldr	r0, [pc, #100]	; (801c15c <mem_malloc+0x1d8>)
 801c0f8:	f009 fef6 	bl	8025ee8 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801c0fc:	697b      	ldr	r3, [r7, #20]
 801c0fe:	f003 0303 	and.w	r3, r3, #3
 801c102:	2b00      	cmp	r3, #0
 801c104:	d006      	beq.n	801c114 <mem_malloc+0x190>
 801c106:	4b13      	ldr	r3, [pc, #76]	; (801c154 <mem_malloc+0x1d0>)
 801c108:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 801c10c:	4916      	ldr	r1, [pc, #88]	; (801c168 <mem_malloc+0x1e4>)
 801c10e:	4813      	ldr	r0, [pc, #76]	; (801c15c <mem_malloc+0x1d8>)
 801c110:	f009 feea 	bl	8025ee8 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 801c114:	697b      	ldr	r3, [r7, #20]
 801c116:	3308      	adds	r3, #8
 801c118:	e010      	b.n	801c13c <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 801c11a:	4b0c      	ldr	r3, [pc, #48]	; (801c14c <mem_malloc+0x1c8>)
 801c11c:	681a      	ldr	r2, [r3, #0]
 801c11e:	8bfb      	ldrh	r3, [r7, #30]
 801c120:	4413      	add	r3, r2
 801c122:	881b      	ldrh	r3, [r3, #0]
 801c124:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801c126:	8bfa      	ldrh	r2, [r7, #30]
 801c128:	88fb      	ldrh	r3, [r7, #6]
 801c12a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801c12e:	429a      	cmp	r2, r3
 801c130:	f4ff af4e 	bcc.w	801bfd0 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801c134:	4803      	ldr	r0, [pc, #12]	; (801c144 <mem_malloc+0x1c0>)
 801c136:	f006 fee4 	bl	8022f02 <sys_mutex_unlock>
  return NULL;
 801c13a:	2300      	movs	r3, #0
}
 801c13c:	4618      	mov	r0, r3
 801c13e:	3720      	adds	r7, #32
 801c140:	46bd      	mov	sp, r7
 801c142:	bd80      	pop	{r7, pc}
 801c144:	200094b4 	.word	0x200094b4
 801c148:	200094b0 	.word	0x200094b0
 801c14c:	200094a8 	.word	0x200094a8
 801c150:	200094ac 	.word	0x200094ac
 801c154:	08027a7c 	.word	0x08027a7c
 801c158:	08027bf4 	.word	0x08027bf4
 801c15c:	08027ac4 	.word	0x08027ac4
 801c160:	08027c10 	.word	0x08027c10
 801c164:	08027c40 	.word	0x08027c40
 801c168:	08027c70 	.word	0x08027c70

0801c16c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801c16c:	b480      	push	{r7}
 801c16e:	b085      	sub	sp, #20
 801c170:	af00      	add	r7, sp, #0
 801c172:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	689b      	ldr	r3, [r3, #8]
 801c178:	2200      	movs	r2, #0
 801c17a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	685b      	ldr	r3, [r3, #4]
 801c180:	3303      	adds	r3, #3
 801c182:	f023 0303 	bic.w	r3, r3, #3
 801c186:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801c188:	2300      	movs	r3, #0
 801c18a:	60fb      	str	r3, [r7, #12]
 801c18c:	e011      	b.n	801c1b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	689b      	ldr	r3, [r3, #8]
 801c192:	681a      	ldr	r2, [r3, #0]
 801c194:	68bb      	ldr	r3, [r7, #8]
 801c196:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	689b      	ldr	r3, [r3, #8]
 801c19c:	68ba      	ldr	r2, [r7, #8]
 801c19e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	881b      	ldrh	r3, [r3, #0]
 801c1a4:	461a      	mov	r2, r3
 801c1a6:	68bb      	ldr	r3, [r7, #8]
 801c1a8:	4413      	add	r3, r2
 801c1aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	3301      	adds	r3, #1
 801c1b0:	60fb      	str	r3, [r7, #12]
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	885b      	ldrh	r3, [r3, #2]
 801c1b6:	461a      	mov	r2, r3
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	429a      	cmp	r2, r3
 801c1bc:	dce7      	bgt.n	801c18e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801c1be:	bf00      	nop
 801c1c0:	3714      	adds	r7, #20
 801c1c2:	46bd      	mov	sp, r7
 801c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c8:	4770      	bx	lr
	...

0801c1cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801c1cc:	b580      	push	{r7, lr}
 801c1ce:	b082      	sub	sp, #8
 801c1d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	80fb      	strh	r3, [r7, #6]
 801c1d6:	e009      	b.n	801c1ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801c1d8:	88fb      	ldrh	r3, [r7, #6]
 801c1da:	4a08      	ldr	r2, [pc, #32]	; (801c1fc <memp_init+0x30>)
 801c1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f7ff ffc3 	bl	801c16c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801c1e6:	88fb      	ldrh	r3, [r7, #6]
 801c1e8:	3301      	adds	r3, #1
 801c1ea:	80fb      	strh	r3, [r7, #6]
 801c1ec:	88fb      	ldrh	r3, [r7, #6]
 801c1ee:	2b0b      	cmp	r3, #11
 801c1f0:	d9f2      	bls.n	801c1d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801c1f2:	bf00      	nop
 801c1f4:	3708      	adds	r7, #8
 801c1f6:	46bd      	mov	sp, r7
 801c1f8:	bd80      	pop	{r7, pc}
 801c1fa:	bf00      	nop
 801c1fc:	0802b67c 	.word	0x0802b67c

0801c200 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 801c200:	b580      	push	{r7, lr}
 801c202:	b084      	sub	sp, #16
 801c204:	af00      	add	r7, sp, #0
 801c206:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801c208:	f006 feae 	bl	8022f68 <sys_arch_protect>
 801c20c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	689b      	ldr	r3, [r3, #8]
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801c216:	68bb      	ldr	r3, [r7, #8]
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d015      	beq.n	801c248 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	689b      	ldr	r3, [r3, #8]
 801c220:	68ba      	ldr	r2, [r7, #8]
 801c222:	6812      	ldr	r2, [r2, #0]
 801c224:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801c226:	68bb      	ldr	r3, [r7, #8]
 801c228:	f003 0303 	and.w	r3, r3, #3
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d006      	beq.n	801c23e <do_memp_malloc_pool+0x3e>
 801c230:	4b09      	ldr	r3, [pc, #36]	; (801c258 <do_memp_malloc_pool+0x58>)
 801c232:	f240 1249 	movw	r2, #329	; 0x149
 801c236:	4909      	ldr	r1, [pc, #36]	; (801c25c <do_memp_malloc_pool+0x5c>)
 801c238:	4809      	ldr	r0, [pc, #36]	; (801c260 <do_memp_malloc_pool+0x60>)
 801c23a:	f009 fe55 	bl	8025ee8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801c23e:	68f8      	ldr	r0, [r7, #12]
 801c240:	f006 fea0 	bl	8022f84 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 801c244:	68bb      	ldr	r3, [r7, #8]
 801c246:	e003      	b.n	801c250 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 801c248:	68f8      	ldr	r0, [r7, #12]
 801c24a:	f006 fe9b 	bl	8022f84 <sys_arch_unprotect>
  return NULL;
 801c24e:	2300      	movs	r3, #0
}
 801c250:	4618      	mov	r0, r3
 801c252:	3710      	adds	r7, #16
 801c254:	46bd      	mov	sp, r7
 801c256:	bd80      	pop	{r7, pc}
 801c258:	08027c94 	.word	0x08027c94
 801c25c:	08027cc4 	.word	0x08027cc4
 801c260:	08027ce8 	.word	0x08027ce8

0801c264 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 801c264:	b580      	push	{r7, lr}
 801c266:	b084      	sub	sp, #16
 801c268:	af00      	add	r7, sp, #0
 801c26a:	4603      	mov	r3, r0
 801c26c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801c26e:	79fb      	ldrb	r3, [r7, #7]
 801c270:	2b0b      	cmp	r3, #11
 801c272:	d908      	bls.n	801c286 <memp_malloc+0x22>
 801c274:	4b0a      	ldr	r3, [pc, #40]	; (801c2a0 <memp_malloc+0x3c>)
 801c276:	f240 1287 	movw	r2, #391	; 0x187
 801c27a:	490a      	ldr	r1, [pc, #40]	; (801c2a4 <memp_malloc+0x40>)
 801c27c:	480a      	ldr	r0, [pc, #40]	; (801c2a8 <memp_malloc+0x44>)
 801c27e:	f009 fe33 	bl	8025ee8 <iprintf>
 801c282:	2300      	movs	r3, #0
 801c284:	e008      	b.n	801c298 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801c286:	79fb      	ldrb	r3, [r7, #7]
 801c288:	4a08      	ldr	r2, [pc, #32]	; (801c2ac <memp_malloc+0x48>)
 801c28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c28e:	4618      	mov	r0, r3
 801c290:	f7ff ffb6 	bl	801c200 <do_memp_malloc_pool>
 801c294:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801c296:	68fb      	ldr	r3, [r7, #12]
}
 801c298:	4618      	mov	r0, r3
 801c29a:	3710      	adds	r7, #16
 801c29c:	46bd      	mov	sp, r7
 801c29e:	bd80      	pop	{r7, pc}
 801c2a0:	08027c94 	.word	0x08027c94
 801c2a4:	08027d24 	.word	0x08027d24
 801c2a8:	08027ce8 	.word	0x08027ce8
 801c2ac:	0802b67c 	.word	0x0802b67c

0801c2b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 801c2b0:	b580      	push	{r7, lr}
 801c2b2:	b084      	sub	sp, #16
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
 801c2b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801c2ba:	683b      	ldr	r3, [r7, #0]
 801c2bc:	f003 0303 	and.w	r3, r3, #3
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d006      	beq.n	801c2d2 <do_memp_free_pool+0x22>
 801c2c4:	4b0d      	ldr	r3, [pc, #52]	; (801c2fc <do_memp_free_pool+0x4c>)
 801c2c6:	f240 129d 	movw	r2, #413	; 0x19d
 801c2ca:	490d      	ldr	r1, [pc, #52]	; (801c300 <do_memp_free_pool+0x50>)
 801c2cc:	480d      	ldr	r0, [pc, #52]	; (801c304 <do_memp_free_pool+0x54>)
 801c2ce:	f009 fe0b 	bl	8025ee8 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 801c2d2:	683b      	ldr	r3, [r7, #0]
 801c2d4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801c2d6:	f006 fe47 	bl	8022f68 <sys_arch_protect>
 801c2da:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	689b      	ldr	r3, [r3, #8]
 801c2e0:	681a      	ldr	r2, [r3, #0]
 801c2e2:	68fb      	ldr	r3, [r7, #12]
 801c2e4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	689b      	ldr	r3, [r3, #8]
 801c2ea:	68fa      	ldr	r2, [r7, #12]
 801c2ec:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801c2ee:	68b8      	ldr	r0, [r7, #8]
 801c2f0:	f006 fe48 	bl	8022f84 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801c2f4:	bf00      	nop
 801c2f6:	3710      	adds	r7, #16
 801c2f8:	46bd      	mov	sp, r7
 801c2fa:	bd80      	pop	{r7, pc}
 801c2fc:	08027c94 	.word	0x08027c94
 801c300:	08027d44 	.word	0x08027d44
 801c304:	08027ce8 	.word	0x08027ce8

0801c308 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801c308:	b580      	push	{r7, lr}
 801c30a:	b082      	sub	sp, #8
 801c30c:	af00      	add	r7, sp, #0
 801c30e:	4603      	mov	r3, r0
 801c310:	6039      	str	r1, [r7, #0]
 801c312:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801c314:	79fb      	ldrb	r3, [r7, #7]
 801c316:	2b0b      	cmp	r3, #11
 801c318:	d907      	bls.n	801c32a <memp_free+0x22>
 801c31a:	4b0c      	ldr	r3, [pc, #48]	; (801c34c <memp_free+0x44>)
 801c31c:	f240 12db 	movw	r2, #475	; 0x1db
 801c320:	490b      	ldr	r1, [pc, #44]	; (801c350 <memp_free+0x48>)
 801c322:	480c      	ldr	r0, [pc, #48]	; (801c354 <memp_free+0x4c>)
 801c324:	f009 fde0 	bl	8025ee8 <iprintf>
 801c328:	e00c      	b.n	801c344 <memp_free+0x3c>

  if (mem == NULL) {
 801c32a:	683b      	ldr	r3, [r7, #0]
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d008      	beq.n	801c342 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801c330:	79fb      	ldrb	r3, [r7, #7]
 801c332:	4a09      	ldr	r2, [pc, #36]	; (801c358 <memp_free+0x50>)
 801c334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c338:	6839      	ldr	r1, [r7, #0]
 801c33a:	4618      	mov	r0, r3
 801c33c:	f7ff ffb8 	bl	801c2b0 <do_memp_free_pool>
 801c340:	e000      	b.n	801c344 <memp_free+0x3c>
    return;
 801c342:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801c344:	3708      	adds	r7, #8
 801c346:	46bd      	mov	sp, r7
 801c348:	bd80      	pop	{r7, pc}
 801c34a:	bf00      	nop
 801c34c:	08027c94 	.word	0x08027c94
 801c350:	08027d64 	.word	0x08027d64
 801c354:	08027ce8 	.word	0x08027ce8
 801c358:	0802b67c 	.word	0x0802b67c

0801c35c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801c35c:	b480      	push	{r7}
 801c35e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801c360:	bf00      	nop
 801c362:	46bd      	mov	sp, r7
 801c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c368:	4770      	bx	lr
	...

0801c36c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801c36c:	b580      	push	{r7, lr}
 801c36e:	b084      	sub	sp, #16
 801c370:	af00      	add	r7, sp, #0
 801c372:	60f8      	str	r0, [r7, #12]
 801c374:	60b9      	str	r1, [r7, #8]
 801c376:	607a      	str	r2, [r7, #4]
 801c378:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 801c37a:	69fb      	ldr	r3, [r7, #28]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d105      	bne.n	801c38c <netif_add+0x20>
 801c380:	4b1f      	ldr	r3, [pc, #124]	; (801c400 <netif_add+0x94>)
 801c382:	22fb      	movs	r2, #251	; 0xfb
 801c384:	491f      	ldr	r1, [pc, #124]	; (801c404 <netif_add+0x98>)
 801c386:	4820      	ldr	r0, [pc, #128]	; (801c408 <netif_add+0x9c>)
 801c388:	f009 fdae 	bl	8025ee8 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	2200      	movs	r2, #0
 801c390:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	2200      	movs	r2, #0
 801c396:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801c398:	68fb      	ldr	r3, [r7, #12]
 801c39a:	2200      	movs	r2, #0
 801c39c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	2203      	movs	r2, #3
 801c3aa:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	69ba      	ldr	r2, [r7, #24]
 801c3b2:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 801c3b4:	4b15      	ldr	r3, [pc, #84]	; (801c40c <netif_add+0xa0>)
 801c3b6:	781b      	ldrb	r3, [r3, #0]
 801c3b8:	1c5a      	adds	r2, r3, #1
 801c3ba:	b2d1      	uxtb	r1, r2
 801c3bc:	4a13      	ldr	r2, [pc, #76]	; (801c40c <netif_add+0xa0>)
 801c3be:	7011      	strb	r1, [r2, #0]
 801c3c0:	68fa      	ldr	r2, [r7, #12]
 801c3c2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	6a3a      	ldr	r2, [r7, #32]
 801c3ca:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801c3cc:	683b      	ldr	r3, [r7, #0]
 801c3ce:	687a      	ldr	r2, [r7, #4]
 801c3d0:	68b9      	ldr	r1, [r7, #8]
 801c3d2:	68f8      	ldr	r0, [r7, #12]
 801c3d4:	f000 f81e 	bl	801c414 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801c3d8:	69fb      	ldr	r3, [r7, #28]
 801c3da:	68f8      	ldr	r0, [r7, #12]
 801c3dc:	4798      	blx	r3
 801c3de:	4603      	mov	r3, r0
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d001      	beq.n	801c3e8 <netif_add+0x7c>
    return NULL;
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	e007      	b.n	801c3f8 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801c3e8:	4b09      	ldr	r3, [pc, #36]	; (801c410 <netif_add+0xa4>)
 801c3ea:	681a      	ldr	r2, [r3, #0]
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801c3f0:	4a07      	ldr	r2, [pc, #28]	; (801c410 <netif_add+0xa4>)
 801c3f2:	68fb      	ldr	r3, [r7, #12]
 801c3f4:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 801c3f6:	68fb      	ldr	r3, [r7, #12]
}
 801c3f8:	4618      	mov	r0, r3
 801c3fa:	3710      	adds	r7, #16
 801c3fc:	46bd      	mov	sp, r7
 801c3fe:	bd80      	pop	{r7, pc}
 801c400:	08027d80 	.word	0x08027d80
 801c404:	08027db4 	.word	0x08027db4
 801c408:	08027dcc 	.word	0x08027dcc
 801c40c:	200094e8 	.word	0x200094e8
 801c410:	2000ecb4 	.word	0x2000ecb4

0801c414 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 801c414:	b580      	push	{r7, lr}
 801c416:	b084      	sub	sp, #16
 801c418:	af00      	add	r7, sp, #0
 801c41a:	60f8      	str	r0, [r7, #12]
 801c41c:	60b9      	str	r1, [r7, #8]
 801c41e:	607a      	str	r2, [r7, #4]
 801c420:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 801c422:	68bb      	ldr	r3, [r7, #8]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d003      	beq.n	801c430 <netif_set_addr+0x1c>
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d10c      	bne.n	801c44a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 801c430:	68b9      	ldr	r1, [r7, #8]
 801c432:	68f8      	ldr	r0, [r7, #12]
 801c434:	f000 f81a 	bl	801c46c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 801c438:	6879      	ldr	r1, [r7, #4]
 801c43a:	68f8      	ldr	r0, [r7, #12]
 801c43c:	f000 f85a 	bl	801c4f4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801c440:	6839      	ldr	r1, [r7, #0]
 801c442:	68f8      	ldr	r0, [r7, #12]
 801c444:	f000 f842 	bl	801c4cc <netif_set_gw>
 801c448:	e00b      	b.n	801c462 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 801c44a:	6879      	ldr	r1, [r7, #4]
 801c44c:	68f8      	ldr	r0, [r7, #12]
 801c44e:	f000 f851 	bl	801c4f4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 801c452:	6839      	ldr	r1, [r7, #0]
 801c454:	68f8      	ldr	r0, [r7, #12]
 801c456:	f000 f839 	bl	801c4cc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 801c45a:	68b9      	ldr	r1, [r7, #8]
 801c45c:	68f8      	ldr	r0, [r7, #12]
 801c45e:	f000 f805 	bl	801c46c <netif_set_ipaddr>
  }
}
 801c462:	bf00      	nop
 801c464:	3710      	adds	r7, #16
 801c466:	46bd      	mov	sp, r7
 801c468:	bd80      	pop	{r7, pc}
	...

0801c46c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c46c:	b580      	push	{r7, lr}
 801c46e:	b084      	sub	sp, #16
 801c470:	af00      	add	r7, sp, #0
 801c472:	6078      	str	r0, [r7, #4]
 801c474:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 801c476:	683b      	ldr	r3, [r7, #0]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d003      	beq.n	801c484 <netif_set_ipaddr+0x18>
 801c47c:	683b      	ldr	r3, [r7, #0]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	60fb      	str	r3, [r7, #12]
 801c482:	e002      	b.n	801c48a <netif_set_ipaddr+0x1e>
 801c484:	4b10      	ldr	r3, [pc, #64]	; (801c4c8 <netif_set_ipaddr+0x5c>)
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 801c48a:	68fa      	ldr	r2, [r7, #12]
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	3304      	adds	r3, #4
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	429a      	cmp	r2, r3
 801c494:	d014      	beq.n	801c4c0 <netif_set_ipaddr+0x54>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	3304      	adds	r3, #4
 801c49a:	f107 020c 	add.w	r2, r7, #12
 801c49e:	4611      	mov	r1, r2
 801c4a0:	4618      	mov	r0, r3
 801c4a2:	f002 fb0f 	bl	801eac4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801c4a6:	683b      	ldr	r3, [r7, #0]
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d002      	beq.n	801c4b2 <netif_set_ipaddr+0x46>
 801c4ac:	683b      	ldr	r3, [r7, #0]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	e000      	b.n	801c4b4 <netif_set_ipaddr+0x48>
 801c4b2:	2300      	movs	r3, #0
 801c4b4:	687a      	ldr	r2, [r7, #4]
 801c4b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801c4b8:	2101      	movs	r1, #1
 801c4ba:	6878      	ldr	r0, [r7, #4]
 801c4bc:	f000 f861 	bl	801c582 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 801c4c0:	bf00      	nop
 801c4c2:	3710      	adds	r7, #16
 801c4c4:	46bd      	mov	sp, r7
 801c4c6:	bd80      	pop	{r7, pc}
 801c4c8:	0802b5e8 	.word	0x0802b5e8

0801c4cc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 801c4cc:	b480      	push	{r7}
 801c4ce:	b083      	sub	sp, #12
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	6078      	str	r0, [r7, #4]
 801c4d4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801c4d6:	683b      	ldr	r3, [r7, #0]
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d002      	beq.n	801c4e2 <netif_set_gw+0x16>
 801c4dc:	683b      	ldr	r3, [r7, #0]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	e000      	b.n	801c4e4 <netif_set_gw+0x18>
 801c4e2:	2300      	movs	r3, #0
 801c4e4:	687a      	ldr	r2, [r7, #4]
 801c4e6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 801c4e8:	bf00      	nop
 801c4ea:	370c      	adds	r7, #12
 801c4ec:	46bd      	mov	sp, r7
 801c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4f2:	4770      	bx	lr

0801c4f4 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 801c4f4:	b480      	push	{r7}
 801c4f6:	b083      	sub	sp, #12
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	6078      	str	r0, [r7, #4]
 801c4fc:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801c4fe:	683b      	ldr	r3, [r7, #0]
 801c500:	2b00      	cmp	r3, #0
 801c502:	d002      	beq.n	801c50a <netif_set_netmask+0x16>
 801c504:	683b      	ldr	r3, [r7, #0]
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	e000      	b.n	801c50c <netif_set_netmask+0x18>
 801c50a:	2300      	movs	r3, #0
 801c50c:	687a      	ldr	r2, [r7, #4]
 801c50e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 801c510:	bf00      	nop
 801c512:	370c      	adds	r7, #12
 801c514:	46bd      	mov	sp, r7
 801c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c51a:	4770      	bx	lr

0801c51c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801c51c:	b480      	push	{r7}
 801c51e:	b083      	sub	sp, #12
 801c520:	af00      	add	r7, sp, #0
 801c522:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801c524:	4a04      	ldr	r2, [pc, #16]	; (801c538 <netif_set_default+0x1c>)
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801c52a:	bf00      	nop
 801c52c:	370c      	adds	r7, #12
 801c52e:	46bd      	mov	sp, r7
 801c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c534:	4770      	bx	lr
 801c536:	bf00      	nop
 801c538:	2000ecb8 	.word	0x2000ecb8

0801c53c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801c53c:	b580      	push	{r7, lr}
 801c53e:	b082      	sub	sp, #8
 801c540:	af00      	add	r7, sp, #0
 801c542:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c54a:	f003 0301 	and.w	r3, r3, #1
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d113      	bne.n	801c57a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c558:	f043 0301 	orr.w	r3, r3, #1
 801c55c:	b2da      	uxtb	r2, r3
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c56a:	f003 0304 	and.w	r3, r3, #4
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d003      	beq.n	801c57a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801c572:	2103      	movs	r1, #3
 801c574:	6878      	ldr	r0, [r7, #4]
 801c576:	f000 f804 	bl	801c582 <netif_issue_reports>
    }
  }
}
 801c57a:	bf00      	nop
 801c57c:	3708      	adds	r7, #8
 801c57e:	46bd      	mov	sp, r7
 801c580:	bd80      	pop	{r7, pc}

0801c582 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 801c582:	b580      	push	{r7, lr}
 801c584:	b082      	sub	sp, #8
 801c586:	af00      	add	r7, sp, #0
 801c588:	6078      	str	r0, [r7, #4]
 801c58a:	460b      	mov	r3, r1
 801c58c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801c58e:	78fb      	ldrb	r3, [r7, #3]
 801c590:	f003 0301 	and.w	r3, r3, #1
 801c594:	2b00      	cmp	r3, #0
 801c596:	d011      	beq.n	801c5bc <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	3304      	adds	r3, #4
 801c59c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d00c      	beq.n	801c5bc <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c5a8:	f003 0308 	and.w	r3, r3, #8
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d005      	beq.n	801c5bc <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	3304      	adds	r3, #4
 801c5b4:	4619      	mov	r1, r3
 801c5b6:	6878      	ldr	r0, [r7, #4]
 801c5b8:	f7fd feba 	bl	801a330 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 801c5bc:	bf00      	nop
 801c5be:	3708      	adds	r7, #8
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}

0801c5c4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	b082      	sub	sp, #8
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c5d2:	f003 0301 	and.w	r3, r3, #1
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d012      	beq.n	801c600 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c5e0:	f023 0301 	bic.w	r3, r3, #1
 801c5e4:	b2da      	uxtb	r2, r3
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801c5f2:	f003 0308 	and.w	r3, r3, #8
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d002      	beq.n	801c600 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 801c5fa:	6878      	ldr	r0, [r7, #4]
 801c5fc:	f7fd fa5e 	bl	8019abc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801c600:	bf00      	nop
 801c602:	3708      	adds	r7, #8
 801c604:	46bd      	mov	sp, r7
 801c606:	bd80      	pop	{r7, pc}

0801c608 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801c608:	b580      	push	{r7, lr}
 801c60a:	b082      	sub	sp, #8
 801c60c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801c60e:	f006 fcab 	bl	8022f68 <sys_arch_protect>
 801c612:	6038      	str	r0, [r7, #0]
 801c614:	4b0f      	ldr	r3, [pc, #60]	; (801c654 <pbuf_free_ooseq+0x4c>)
 801c616:	2200      	movs	r2, #0
 801c618:	701a      	strb	r2, [r3, #0]
 801c61a:	6838      	ldr	r0, [r7, #0]
 801c61c:	f006 fcb2 	bl	8022f84 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801c620:	4b0d      	ldr	r3, [pc, #52]	; (801c658 <pbuf_free_ooseq+0x50>)
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	607b      	str	r3, [r7, #4]
 801c626:	e00f      	b.n	801c648 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d008      	beq.n	801c642 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c634:	4618      	mov	r0, r3
 801c636:	f001 fec0 	bl	801e3ba <tcp_segs_free>
      pcb->ooseq = NULL;
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	2200      	movs	r2, #0
 801c63e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 801c640:	e005      	b.n	801c64e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	68db      	ldr	r3, [r3, #12]
 801c646:	607b      	str	r3, [r7, #4]
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d1ec      	bne.n	801c628 <pbuf_free_ooseq+0x20>
    }
  }
}
 801c64e:	3708      	adds	r7, #8
 801c650:	46bd      	mov	sp, r7
 801c652:	bd80      	pop	{r7, pc}
 801c654:	2000ecbc 	.word	0x2000ecbc
 801c658:	2000ecc4 	.word	0x2000ecc4

0801c65c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801c65c:	b580      	push	{r7, lr}
 801c65e:	b082      	sub	sp, #8
 801c660:	af00      	add	r7, sp, #0
 801c662:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801c664:	f7ff ffd0 	bl	801c608 <pbuf_free_ooseq>
}
 801c668:	bf00      	nop
 801c66a:	3708      	adds	r7, #8
 801c66c:	46bd      	mov	sp, r7
 801c66e:	bd80      	pop	{r7, pc}

0801c670 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801c670:	b580      	push	{r7, lr}
 801c672:	b082      	sub	sp, #8
 801c674:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801c676:	f006 fc77 	bl	8022f68 <sys_arch_protect>
 801c67a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801c67c:	4b10      	ldr	r3, [pc, #64]	; (801c6c0 <pbuf_pool_is_empty+0x50>)
 801c67e:	781b      	ldrb	r3, [r3, #0]
 801c680:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801c682:	4b0f      	ldr	r3, [pc, #60]	; (801c6c0 <pbuf_pool_is_empty+0x50>)
 801c684:	2201      	movs	r2, #1
 801c686:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801c688:	6878      	ldr	r0, [r7, #4]
 801c68a:	f006 fc7b 	bl	8022f84 <sys_arch_unprotect>

  if (!queued) {
 801c68e:	78fb      	ldrb	r3, [r7, #3]
 801c690:	2b00      	cmp	r3, #0
 801c692:	d110      	bne.n	801c6b6 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801c694:	2200      	movs	r2, #0
 801c696:	2100      	movs	r1, #0
 801c698:	480a      	ldr	r0, [pc, #40]	; (801c6c4 <pbuf_pool_is_empty+0x54>)
 801c69a:	f7fc fe17 	bl	80192cc <tcpip_callback_with_block>
 801c69e:	4603      	mov	r3, r0
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d008      	beq.n	801c6b6 <pbuf_pool_is_empty+0x46>
 801c6a4:	f006 fc60 	bl	8022f68 <sys_arch_protect>
 801c6a8:	6078      	str	r0, [r7, #4]
 801c6aa:	4b05      	ldr	r3, [pc, #20]	; (801c6c0 <pbuf_pool_is_empty+0x50>)
 801c6ac:	2200      	movs	r2, #0
 801c6ae:	701a      	strb	r2, [r3, #0]
 801c6b0:	6878      	ldr	r0, [r7, #4]
 801c6b2:	f006 fc67 	bl	8022f84 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801c6b6:	bf00      	nop
 801c6b8:	3708      	adds	r7, #8
 801c6ba:	46bd      	mov	sp, r7
 801c6bc:	bd80      	pop	{r7, pc}
 801c6be:	bf00      	nop
 801c6c0:	2000ecbc 	.word	0x2000ecbc
 801c6c4:	0801c65d 	.word	0x0801c65d

0801c6c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801c6c8:	b580      	push	{r7, lr}
 801c6ca:	b088      	sub	sp, #32
 801c6cc:	af00      	add	r7, sp, #0
 801c6ce:	4603      	mov	r3, r0
 801c6d0:	71fb      	strb	r3, [r7, #7]
 801c6d2:	460b      	mov	r3, r1
 801c6d4:	80bb      	strh	r3, [r7, #4]
 801c6d6:	4613      	mov	r3, r2
 801c6d8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 801c6da:	79fb      	ldrb	r3, [r7, #7]
 801c6dc:	2b04      	cmp	r3, #4
 801c6de:	d81c      	bhi.n	801c71a <pbuf_alloc+0x52>
 801c6e0:	a201      	add	r2, pc, #4	; (adr r2, 801c6e8 <pbuf_alloc+0x20>)
 801c6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6e6:	bf00      	nop
 801c6e8:	0801c6fd 	.word	0x0801c6fd
 801c6ec:	0801c703 	.word	0x0801c703
 801c6f0:	0801c709 	.word	0x0801c709
 801c6f4:	0801c70f 	.word	0x0801c70f
 801c6f8:	0801c715 	.word	0x0801c715
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801c6fc:	2336      	movs	r3, #54	; 0x36
 801c6fe:	82fb      	strh	r3, [r7, #22]
    break;
 801c700:	e014      	b.n	801c72c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801c702:	2322      	movs	r3, #34	; 0x22
 801c704:	82fb      	strh	r3, [r7, #22]
    break;
 801c706:	e011      	b.n	801c72c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801c708:	230e      	movs	r3, #14
 801c70a:	82fb      	strh	r3, [r7, #22]
    break;
 801c70c:	e00e      	b.n	801c72c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801c70e:	2300      	movs	r3, #0
 801c710:	82fb      	strh	r3, [r7, #22]
    break;
 801c712:	e00b      	b.n	801c72c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 801c714:	2300      	movs	r3, #0
 801c716:	82fb      	strh	r3, [r7, #22]
    break;
 801c718:	e008      	b.n	801c72c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 801c71a:	4ba5      	ldr	r3, [pc, #660]	; (801c9b0 <pbuf_alloc+0x2e8>)
 801c71c:	f44f 728b 	mov.w	r2, #278	; 0x116
 801c720:	49a4      	ldr	r1, [pc, #656]	; (801c9b4 <pbuf_alloc+0x2ec>)
 801c722:	48a5      	ldr	r0, [pc, #660]	; (801c9b8 <pbuf_alloc+0x2f0>)
 801c724:	f009 fbe0 	bl	8025ee8 <iprintf>
    return NULL;
 801c728:	2300      	movs	r3, #0
 801c72a:	e15d      	b.n	801c9e8 <pbuf_alloc+0x320>
  }

  switch (type) {
 801c72c:	79bb      	ldrb	r3, [r7, #6]
 801c72e:	2b03      	cmp	r3, #3
 801c730:	f200 8134 	bhi.w	801c99c <pbuf_alloc+0x2d4>
 801c734:	a201      	add	r2, pc, #4	; (adr r2, 801c73c <pbuf_alloc+0x74>)
 801c736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c73a:	bf00      	nop
 801c73c:	0801c8dd 	.word	0x0801c8dd
 801c740:	0801c969 	.word	0x0801c969
 801c744:	0801c969 	.word	0x0801c969
 801c748:	0801c74d 	.word	0x0801c74d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c74c:	200b      	movs	r0, #11
 801c74e:	f7ff fd89 	bl	801c264 <memp_malloc>
 801c752:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 801c754:	69fb      	ldr	r3, [r7, #28]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d103      	bne.n	801c762 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 801c75a:	f7ff ff89 	bl	801c670 <pbuf_pool_is_empty>
      return NULL;
 801c75e:	2300      	movs	r3, #0
 801c760:	e142      	b.n	801c9e8 <pbuf_alloc+0x320>
    }
    p->type = type;
 801c762:	69fb      	ldr	r3, [r7, #28]
 801c764:	79ba      	ldrb	r2, [r7, #6]
 801c766:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 801c768:	69fb      	ldr	r3, [r7, #28]
 801c76a:	2200      	movs	r2, #0
 801c76c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801c76e:	8afb      	ldrh	r3, [r7, #22]
 801c770:	3310      	adds	r3, #16
 801c772:	69fa      	ldr	r2, [r7, #28]
 801c774:	4413      	add	r3, r2
 801c776:	3303      	adds	r3, #3
 801c778:	f023 0303 	bic.w	r3, r3, #3
 801c77c:	461a      	mov	r2, r3
 801c77e:	69fb      	ldr	r3, [r7, #28]
 801c780:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 801c782:	69fb      	ldr	r3, [r7, #28]
 801c784:	685b      	ldr	r3, [r3, #4]
 801c786:	f003 0303 	and.w	r3, r3, #3
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d006      	beq.n	801c79c <pbuf_alloc+0xd4>
 801c78e:	4b88      	ldr	r3, [pc, #544]	; (801c9b0 <pbuf_alloc+0x2e8>)
 801c790:	f240 1229 	movw	r2, #297	; 0x129
 801c794:	4989      	ldr	r1, [pc, #548]	; (801c9bc <pbuf_alloc+0x2f4>)
 801c796:	4888      	ldr	r0, [pc, #544]	; (801c9b8 <pbuf_alloc+0x2f0>)
 801c798:	f009 fba6 	bl	8025ee8 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 801c79c:	69fb      	ldr	r3, [r7, #28]
 801c79e:	88ba      	ldrh	r2, [r7, #4]
 801c7a0:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801c7a2:	8afb      	ldrh	r3, [r7, #22]
 801c7a4:	3303      	adds	r3, #3
 801c7a6:	f023 0303 	bic.w	r3, r3, #3
 801c7aa:	f5c3 7242 	rsb	r2, r3, #776	; 0x308
 801c7ae:	88bb      	ldrh	r3, [r7, #4]
 801c7b0:	4293      	cmp	r3, r2
 801c7b2:	bf28      	it	cs
 801c7b4:	4613      	movcs	r3, r2
 801c7b6:	b29a      	uxth	r2, r3
 801c7b8:	69fb      	ldr	r3, [r7, #28]
 801c7ba:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801c7bc:	69fb      	ldr	r3, [r7, #28]
 801c7be:	685b      	ldr	r3, [r3, #4]
 801c7c0:	69fa      	ldr	r2, [r7, #28]
 801c7c2:	8952      	ldrh	r2, [r2, #10]
 801c7c4:	441a      	add	r2, r3
 801c7c6:	69fb      	ldr	r3, [r7, #28]
 801c7c8:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801c7cc:	429a      	cmp	r2, r3
 801c7ce:	d906      	bls.n	801c7de <pbuf_alloc+0x116>
 801c7d0:	4b77      	ldr	r3, [pc, #476]	; (801c9b0 <pbuf_alloc+0x2e8>)
 801c7d2:	f44f 7298 	mov.w	r2, #304	; 0x130
 801c7d6:	497a      	ldr	r1, [pc, #488]	; (801c9c0 <pbuf_alloc+0x2f8>)
 801c7d8:	4877      	ldr	r0, [pc, #476]	; (801c9b8 <pbuf_alloc+0x2f0>)
 801c7da:	f009 fb85 	bl	8025ee8 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801c7de:	8afb      	ldrh	r3, [r7, #22]
 801c7e0:	3303      	adds	r3, #3
 801c7e2:	f023 0303 	bic.w	r3, r3, #3
 801c7e6:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 801c7ea:	d106      	bne.n	801c7fa <pbuf_alloc+0x132>
 801c7ec:	4b70      	ldr	r3, [pc, #448]	; (801c9b0 <pbuf_alloc+0x2e8>)
 801c7ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c7f2:	4974      	ldr	r1, [pc, #464]	; (801c9c4 <pbuf_alloc+0x2fc>)
 801c7f4:	4870      	ldr	r0, [pc, #448]	; (801c9b8 <pbuf_alloc+0x2f0>)
 801c7f6:	f009 fb77 	bl	8025ee8 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 801c7fa:	69fb      	ldr	r3, [r7, #28]
 801c7fc:	2201      	movs	r2, #1
 801c7fe:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 801c800:	69fb      	ldr	r3, [r7, #28]
 801c802:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 801c804:	88bb      	ldrh	r3, [r7, #4]
 801c806:	69fa      	ldr	r2, [r7, #28]
 801c808:	8952      	ldrh	r2, [r2, #10]
 801c80a:	1a9b      	subs	r3, r3, r2
 801c80c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 801c80e:	e061      	b.n	801c8d4 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c810:	200b      	movs	r0, #11
 801c812:	f7ff fd27 	bl	801c264 <memp_malloc>
 801c816:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d106      	bne.n	801c82c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 801c81e:	f7ff ff27 	bl	801c670 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 801c822:	69f8      	ldr	r0, [r7, #28]
 801c824:	f000 fac2 	bl	801cdac <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 801c828:	2300      	movs	r3, #0
 801c82a:	e0dd      	b.n	801c9e8 <pbuf_alloc+0x320>
      }
      q->type = type;
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	79ba      	ldrb	r2, [r7, #6]
 801c830:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	2200      	movs	r2, #0
 801c836:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	2200      	movs	r2, #0
 801c83c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 801c83e:	69bb      	ldr	r3, [r7, #24]
 801c840:	68fa      	ldr	r2, [r7, #12]
 801c842:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 801c844:	693b      	ldr	r3, [r7, #16]
 801c846:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c84a:	4293      	cmp	r3, r2
 801c84c:	dd06      	ble.n	801c85c <pbuf_alloc+0x194>
 801c84e:	4b58      	ldr	r3, [pc, #352]	; (801c9b0 <pbuf_alloc+0x2e8>)
 801c850:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801c854:	495c      	ldr	r1, [pc, #368]	; (801c9c8 <pbuf_alloc+0x300>)
 801c856:	4858      	ldr	r0, [pc, #352]	; (801c9b8 <pbuf_alloc+0x2f0>)
 801c858:	f009 fb46 	bl	8025ee8 <iprintf>
      q->tot_len = (u16_t)rem_len;
 801c85c:	693b      	ldr	r3, [r7, #16]
 801c85e:	b29a      	uxth	r2, r3
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 801c864:	693b      	ldr	r3, [r7, #16]
 801c866:	b29b      	uxth	r3, r3
 801c868:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 801c86c:	bf28      	it	cs
 801c86e:	f44f 7342 	movcs.w	r3, #776	; 0x308
 801c872:	b29a      	uxth	r2, r3
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	f103 0210 	add.w	r2, r3, #16
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	685b      	ldr	r3, [r3, #4]
 801c886:	f003 0303 	and.w	r3, r3, #3
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d006      	beq.n	801c89c <pbuf_alloc+0x1d4>
 801c88e:	4b48      	ldr	r3, [pc, #288]	; (801c9b0 <pbuf_alloc+0x2e8>)
 801c890:	f44f 72a9 	mov.w	r2, #338	; 0x152
 801c894:	494d      	ldr	r1, [pc, #308]	; (801c9cc <pbuf_alloc+0x304>)
 801c896:	4848      	ldr	r0, [pc, #288]	; (801c9b8 <pbuf_alloc+0x2f0>)
 801c898:	f009 fb26 	bl	8025ee8 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801c89c:	69fb      	ldr	r3, [r7, #28]
 801c89e:	685b      	ldr	r3, [r3, #4]
 801c8a0:	69fa      	ldr	r2, [r7, #28]
 801c8a2:	8952      	ldrh	r2, [r2, #10]
 801c8a4:	441a      	add	r2, r3
 801c8a6:	69fb      	ldr	r3, [r7, #28]
 801c8a8:	f503 7346 	add.w	r3, r3, #792	; 0x318
 801c8ac:	429a      	cmp	r2, r3
 801c8ae:	d906      	bls.n	801c8be <pbuf_alloc+0x1f6>
 801c8b0:	4b3f      	ldr	r3, [pc, #252]	; (801c9b0 <pbuf_alloc+0x2e8>)
 801c8b2:	f240 1255 	movw	r2, #341	; 0x155
 801c8b6:	4942      	ldr	r1, [pc, #264]	; (801c9c0 <pbuf_alloc+0x2f8>)
 801c8b8:	483f      	ldr	r0, [pc, #252]	; (801c9b8 <pbuf_alloc+0x2f0>)
 801c8ba:	f009 fb15 	bl	8025ee8 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	2201      	movs	r2, #1
 801c8c2:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	895b      	ldrh	r3, [r3, #10]
 801c8c8:	461a      	mov	r2, r3
 801c8ca:	693b      	ldr	r3, [r7, #16]
 801c8cc:	1a9b      	subs	r3, r3, r2
 801c8ce:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 801c8d4:	693b      	ldr	r3, [r7, #16]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	dc9a      	bgt.n	801c810 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 801c8da:	e07e      	b.n	801c9da <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 801c8dc:	8afb      	ldrh	r3, [r7, #22]
 801c8de:	3313      	adds	r3, #19
 801c8e0:	b29b      	uxth	r3, r3
 801c8e2:	f023 0303 	bic.w	r3, r3, #3
 801c8e6:	b29a      	uxth	r2, r3
 801c8e8:	88bb      	ldrh	r3, [r7, #4]
 801c8ea:	3303      	adds	r3, #3
 801c8ec:	b29b      	uxth	r3, r3
 801c8ee:	f023 0303 	bic.w	r3, r3, #3
 801c8f2:	b29b      	uxth	r3, r3
 801c8f4:	4413      	add	r3, r2
 801c8f6:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 801c8f8:	897a      	ldrh	r2, [r7, #10]
 801c8fa:	88bb      	ldrh	r3, [r7, #4]
 801c8fc:	3303      	adds	r3, #3
 801c8fe:	f023 0303 	bic.w	r3, r3, #3
 801c902:	429a      	cmp	r2, r3
 801c904:	d201      	bcs.n	801c90a <pbuf_alloc+0x242>
        return NULL;
 801c906:	2300      	movs	r3, #0
 801c908:	e06e      	b.n	801c9e8 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 801c90a:	897b      	ldrh	r3, [r7, #10]
 801c90c:	4618      	mov	r0, r3
 801c90e:	f7ff fb39 	bl	801bf84 <mem_malloc>
 801c912:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 801c914:	69fb      	ldr	r3, [r7, #28]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d101      	bne.n	801c91e <pbuf_alloc+0x256>
      return NULL;
 801c91a:	2300      	movs	r3, #0
 801c91c:	e064      	b.n	801c9e8 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 801c91e:	8afb      	ldrh	r3, [r7, #22]
 801c920:	3310      	adds	r3, #16
 801c922:	69fa      	ldr	r2, [r7, #28]
 801c924:	4413      	add	r3, r2
 801c926:	3303      	adds	r3, #3
 801c928:	f023 0303 	bic.w	r3, r3, #3
 801c92c:	461a      	mov	r2, r3
 801c92e:	69fb      	ldr	r3, [r7, #28]
 801c930:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801c932:	69fb      	ldr	r3, [r7, #28]
 801c934:	88ba      	ldrh	r2, [r7, #4]
 801c936:	811a      	strh	r2, [r3, #8]
 801c938:	69fb      	ldr	r3, [r7, #28]
 801c93a:	891a      	ldrh	r2, [r3, #8]
 801c93c:	69fb      	ldr	r3, [r7, #28]
 801c93e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801c940:	69fb      	ldr	r3, [r7, #28]
 801c942:	2200      	movs	r2, #0
 801c944:	601a      	str	r2, [r3, #0]
    p->type = type;
 801c946:	69fb      	ldr	r3, [r7, #28]
 801c948:	79ba      	ldrb	r2, [r7, #6]
 801c94a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801c94c:	69fb      	ldr	r3, [r7, #28]
 801c94e:	685b      	ldr	r3, [r3, #4]
 801c950:	f003 0303 	and.w	r3, r3, #3
 801c954:	2b00      	cmp	r3, #0
 801c956:	d03f      	beq.n	801c9d8 <pbuf_alloc+0x310>
 801c958:	4b15      	ldr	r3, [pc, #84]	; (801c9b0 <pbuf_alloc+0x2e8>)
 801c95a:	f240 1277 	movw	r2, #375	; 0x177
 801c95e:	491c      	ldr	r1, [pc, #112]	; (801c9d0 <pbuf_alloc+0x308>)
 801c960:	4815      	ldr	r0, [pc, #84]	; (801c9b8 <pbuf_alloc+0x2f0>)
 801c962:	f009 fac1 	bl	8025ee8 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 801c966:	e037      	b.n	801c9d8 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801c968:	200a      	movs	r0, #10
 801c96a:	f7ff fc7b 	bl	801c264 <memp_malloc>
 801c96e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 801c970:	69fb      	ldr	r3, [r7, #28]
 801c972:	2b00      	cmp	r3, #0
 801c974:	d101      	bne.n	801c97a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 801c976:	2300      	movs	r3, #0
 801c978:	e036      	b.n	801c9e8 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 801c97a:	69fb      	ldr	r3, [r7, #28]
 801c97c:	2200      	movs	r2, #0
 801c97e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801c980:	69fb      	ldr	r3, [r7, #28]
 801c982:	88ba      	ldrh	r2, [r7, #4]
 801c984:	811a      	strh	r2, [r3, #8]
 801c986:	69fb      	ldr	r3, [r7, #28]
 801c988:	891a      	ldrh	r2, [r3, #8]
 801c98a:	69fb      	ldr	r3, [r7, #28]
 801c98c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801c98e:	69fb      	ldr	r3, [r7, #28]
 801c990:	2200      	movs	r2, #0
 801c992:	601a      	str	r2, [r3, #0]
    p->type = type;
 801c994:	69fb      	ldr	r3, [r7, #28]
 801c996:	79ba      	ldrb	r2, [r7, #6]
 801c998:	731a      	strb	r2, [r3, #12]
    break;
 801c99a:	e01e      	b.n	801c9da <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c99c:	4b04      	ldr	r3, [pc, #16]	; (801c9b0 <pbuf_alloc+0x2e8>)
 801c99e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 801c9a2:	490c      	ldr	r1, [pc, #48]	; (801c9d4 <pbuf_alloc+0x30c>)
 801c9a4:	4804      	ldr	r0, [pc, #16]	; (801c9b8 <pbuf_alloc+0x2f0>)
 801c9a6:	f009 fa9f 	bl	8025ee8 <iprintf>
    return NULL;
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	e01c      	b.n	801c9e8 <pbuf_alloc+0x320>
 801c9ae:	bf00      	nop
 801c9b0:	08027df4 	.word	0x08027df4
 801c9b4:	08027e24 	.word	0x08027e24
 801c9b8:	08027e40 	.word	0x08027e40
 801c9bc:	08027e68 	.word	0x08027e68
 801c9c0:	08027e98 	.word	0x08027e98
 801c9c4:	08027ecc 	.word	0x08027ecc
 801c9c8:	08027f00 	.word	0x08027f00
 801c9cc:	08027f14 	.word	0x08027f14
 801c9d0:	08027f44 	.word	0x08027f44
 801c9d4:	08027f70 	.word	0x08027f70
    break;
 801c9d8:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 801c9da:	69fb      	ldr	r3, [r7, #28]
 801c9dc:	2201      	movs	r2, #1
 801c9de:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801c9e0:	69fb      	ldr	r3, [r7, #28]
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801c9e6:	69fb      	ldr	r3, [r7, #28]
}
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	3720      	adds	r7, #32
 801c9ec:	46bd      	mov	sp, r7
 801c9ee:	bd80      	pop	{r7, pc}

0801c9f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801c9f0:	b580      	push	{r7, lr}
 801c9f2:	b084      	sub	sp, #16
 801c9f4:	af00      	add	r7, sp, #0
 801c9f6:	603b      	str	r3, [r7, #0]
 801c9f8:	4603      	mov	r3, r0
 801c9fa:	71fb      	strb	r3, [r7, #7]
 801c9fc:	460b      	mov	r3, r1
 801c9fe:	80bb      	strh	r3, [r7, #4]
 801ca00:	4613      	mov	r3, r2
 801ca02:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 801ca04:	79fb      	ldrb	r3, [r7, #7]
 801ca06:	2b04      	cmp	r3, #4
 801ca08:	d81b      	bhi.n	801ca42 <pbuf_alloced_custom+0x52>
 801ca0a:	a201      	add	r2, pc, #4	; (adr r2, 801ca10 <pbuf_alloced_custom+0x20>)
 801ca0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ca10:	0801ca25 	.word	0x0801ca25
 801ca14:	0801ca2b 	.word	0x0801ca2b
 801ca18:	0801ca31 	.word	0x0801ca31
 801ca1c:	0801ca37 	.word	0x0801ca37
 801ca20:	0801ca3d 	.word	0x0801ca3d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801ca24:	2336      	movs	r3, #54	; 0x36
 801ca26:	81fb      	strh	r3, [r7, #14]
    break;
 801ca28:	e014      	b.n	801ca54 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801ca2a:	2322      	movs	r3, #34	; 0x22
 801ca2c:	81fb      	strh	r3, [r7, #14]
    break;
 801ca2e:	e011      	b.n	801ca54 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801ca30:	230e      	movs	r3, #14
 801ca32:	81fb      	strh	r3, [r7, #14]
    break;
 801ca34:	e00e      	b.n	801ca54 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801ca36:	2300      	movs	r3, #0
 801ca38:	81fb      	strh	r3, [r7, #14]
    break;
 801ca3a:	e00b      	b.n	801ca54 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 801ca3c:	2300      	movs	r3, #0
 801ca3e:	81fb      	strh	r3, [r7, #14]
    break;
 801ca40:	e008      	b.n	801ca54 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 801ca42:	4b1d      	ldr	r3, [pc, #116]	; (801cab8 <pbuf_alloced_custom+0xc8>)
 801ca44:	f240 12c5 	movw	r2, #453	; 0x1c5
 801ca48:	491c      	ldr	r1, [pc, #112]	; (801cabc <pbuf_alloced_custom+0xcc>)
 801ca4a:	481d      	ldr	r0, [pc, #116]	; (801cac0 <pbuf_alloced_custom+0xd0>)
 801ca4c:	f009 fa4c 	bl	8025ee8 <iprintf>
    return NULL;
 801ca50:	2300      	movs	r3, #0
 801ca52:	e02d      	b.n	801cab0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801ca54:	89fb      	ldrh	r3, [r7, #14]
 801ca56:	3303      	adds	r3, #3
 801ca58:	f023 0203 	bic.w	r2, r3, #3
 801ca5c:	88bb      	ldrh	r3, [r7, #4]
 801ca5e:	441a      	add	r2, r3
 801ca60:	8bbb      	ldrh	r3, [r7, #28]
 801ca62:	429a      	cmp	r2, r3
 801ca64:	d901      	bls.n	801ca6a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801ca66:	2300      	movs	r3, #0
 801ca68:	e022      	b.n	801cab0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 801ca6a:	683b      	ldr	r3, [r7, #0]
 801ca6c:	2200      	movs	r2, #0
 801ca6e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 801ca70:	69bb      	ldr	r3, [r7, #24]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d008      	beq.n	801ca88 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801ca76:	89fb      	ldrh	r3, [r7, #14]
 801ca78:	3303      	adds	r3, #3
 801ca7a:	f023 0303 	bic.w	r3, r3, #3
 801ca7e:	69ba      	ldr	r2, [r7, #24]
 801ca80:	441a      	add	r2, r3
 801ca82:	683b      	ldr	r3, [r7, #0]
 801ca84:	605a      	str	r2, [r3, #4]
 801ca86:	e002      	b.n	801ca8e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 801ca88:	683b      	ldr	r3, [r7, #0]
 801ca8a:	2200      	movs	r2, #0
 801ca8c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 801ca8e:	683b      	ldr	r3, [r7, #0]
 801ca90:	2202      	movs	r2, #2
 801ca92:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 801ca94:	683b      	ldr	r3, [r7, #0]
 801ca96:	88ba      	ldrh	r2, [r7, #4]
 801ca98:	811a      	strh	r2, [r3, #8]
 801ca9a:	683b      	ldr	r3, [r7, #0]
 801ca9c:	891a      	ldrh	r2, [r3, #8]
 801ca9e:	683b      	ldr	r3, [r7, #0]
 801caa0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801caa2:	683b      	ldr	r3, [r7, #0]
 801caa4:	79ba      	ldrb	r2, [r7, #6]
 801caa6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 801caa8:	683b      	ldr	r3, [r7, #0]
 801caaa:	2201      	movs	r2, #1
 801caac:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801caae:	683b      	ldr	r3, [r7, #0]
}
 801cab0:	4618      	mov	r0, r3
 801cab2:	3710      	adds	r7, #16
 801cab4:	46bd      	mov	sp, r7
 801cab6:	bd80      	pop	{r7, pc}
 801cab8:	08027df4 	.word	0x08027df4
 801cabc:	08027f8c 	.word	0x08027f8c
 801cac0:	08027e40 	.word	0x08027e40

0801cac4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b086      	sub	sp, #24
 801cac8:	af00      	add	r7, sp, #0
 801caca:	6078      	str	r0, [r7, #4]
 801cacc:	460b      	mov	r3, r1
 801cace:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	d106      	bne.n	801cae4 <pbuf_realloc+0x20>
 801cad6:	4b4b      	ldr	r3, [pc, #300]	; (801cc04 <pbuf_realloc+0x140>)
 801cad8:	f240 12f3 	movw	r2, #499	; 0x1f3
 801cadc:	494a      	ldr	r1, [pc, #296]	; (801cc08 <pbuf_realloc+0x144>)
 801cade:	484b      	ldr	r0, [pc, #300]	; (801cc0c <pbuf_realloc+0x148>)
 801cae0:	f009 fa02 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	7b1b      	ldrb	r3, [r3, #12]
 801cae8:	2b03      	cmp	r3, #3
 801caea:	d012      	beq.n	801cb12 <pbuf_realloc+0x4e>
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	7b1b      	ldrb	r3, [r3, #12]
 801caf0:	2b01      	cmp	r3, #1
 801caf2:	d00e      	beq.n	801cb12 <pbuf_realloc+0x4e>
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	7b1b      	ldrb	r3, [r3, #12]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d00a      	beq.n	801cb12 <pbuf_realloc+0x4e>
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	7b1b      	ldrb	r3, [r3, #12]
 801cb00:	2b02      	cmp	r3, #2
 801cb02:	d006      	beq.n	801cb12 <pbuf_realloc+0x4e>
 801cb04:	4b3f      	ldr	r3, [pc, #252]	; (801cc04 <pbuf_realloc+0x140>)
 801cb06:	f240 12f7 	movw	r2, #503	; 0x1f7
 801cb0a:	4941      	ldr	r1, [pc, #260]	; (801cc10 <pbuf_realloc+0x14c>)
 801cb0c:	483f      	ldr	r0, [pc, #252]	; (801cc0c <pbuf_realloc+0x148>)
 801cb0e:	f009 f9eb 	bl	8025ee8 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	891b      	ldrh	r3, [r3, #8]
 801cb16:	887a      	ldrh	r2, [r7, #2]
 801cb18:	429a      	cmp	r2, r3
 801cb1a:	d26f      	bcs.n	801cbfc <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 801cb1c:	887b      	ldrh	r3, [r7, #2]
 801cb1e:	687a      	ldr	r2, [r7, #4]
 801cb20:	8912      	ldrh	r2, [r2, #8]
 801cb22:	1a9b      	subs	r3, r3, r2
 801cb24:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801cb26:	887b      	ldrh	r3, [r7, #2]
 801cb28:	827b      	strh	r3, [r7, #18]
  q = p;
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801cb2e:	e025      	b.n	801cb7c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801cb30:	697b      	ldr	r3, [r7, #20]
 801cb32:	895b      	ldrh	r3, [r3, #10]
 801cb34:	8a7a      	ldrh	r2, [r7, #18]
 801cb36:	1ad3      	subs	r3, r2, r3
 801cb38:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 801cb3a:	68fb      	ldr	r3, [r7, #12]
 801cb3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cb40:	4293      	cmp	r3, r2
 801cb42:	dd06      	ble.n	801cb52 <pbuf_realloc+0x8e>
 801cb44:	4b2f      	ldr	r3, [pc, #188]	; (801cc04 <pbuf_realloc+0x140>)
 801cb46:	f240 220b 	movw	r2, #523	; 0x20b
 801cb4a:	4932      	ldr	r1, [pc, #200]	; (801cc14 <pbuf_realloc+0x150>)
 801cb4c:	482f      	ldr	r0, [pc, #188]	; (801cc0c <pbuf_realloc+0x148>)
 801cb4e:	f009 f9cb 	bl	8025ee8 <iprintf>
    q->tot_len += (u16_t)grow;
 801cb52:	697b      	ldr	r3, [r7, #20]
 801cb54:	891a      	ldrh	r2, [r3, #8]
 801cb56:	68fb      	ldr	r3, [r7, #12]
 801cb58:	b29b      	uxth	r3, r3
 801cb5a:	4413      	add	r3, r2
 801cb5c:	b29a      	uxth	r2, r3
 801cb5e:	697b      	ldr	r3, [r7, #20]
 801cb60:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801cb62:	697b      	ldr	r3, [r7, #20]
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801cb68:	697b      	ldr	r3, [r7, #20]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d106      	bne.n	801cb7c <pbuf_realloc+0xb8>
 801cb6e:	4b25      	ldr	r3, [pc, #148]	; (801cc04 <pbuf_realloc+0x140>)
 801cb70:	f240 220f 	movw	r2, #527	; 0x20f
 801cb74:	4928      	ldr	r1, [pc, #160]	; (801cc18 <pbuf_realloc+0x154>)
 801cb76:	4825      	ldr	r0, [pc, #148]	; (801cc0c <pbuf_realloc+0x148>)
 801cb78:	f009 f9b6 	bl	8025ee8 <iprintf>
  while (rem_len > q->len) {
 801cb7c:	697b      	ldr	r3, [r7, #20]
 801cb7e:	895b      	ldrh	r3, [r3, #10]
 801cb80:	8a7a      	ldrh	r2, [r7, #18]
 801cb82:	429a      	cmp	r2, r3
 801cb84:	d8d4      	bhi.n	801cb30 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 801cb86:	697b      	ldr	r3, [r7, #20]
 801cb88:	7b1b      	ldrb	r3, [r3, #12]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d122      	bne.n	801cbd4 <pbuf_realloc+0x110>
 801cb8e:	697b      	ldr	r3, [r7, #20]
 801cb90:	895b      	ldrh	r3, [r3, #10]
 801cb92:	8a7a      	ldrh	r2, [r7, #18]
 801cb94:	429a      	cmp	r2, r3
 801cb96:	d01d      	beq.n	801cbd4 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801cb98:	697b      	ldr	r3, [r7, #20]
 801cb9a:	7b5b      	ldrb	r3, [r3, #13]
 801cb9c:	f003 0302 	and.w	r3, r3, #2
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d117      	bne.n	801cbd4 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 801cba4:	697b      	ldr	r3, [r7, #20]
 801cba6:	685b      	ldr	r3, [r3, #4]
 801cba8:	461a      	mov	r2, r3
 801cbaa:	697b      	ldr	r3, [r7, #20]
 801cbac:	1ad3      	subs	r3, r2, r3
 801cbae:	b29a      	uxth	r2, r3
 801cbb0:	8a7b      	ldrh	r3, [r7, #18]
 801cbb2:	4413      	add	r3, r2
 801cbb4:	b29b      	uxth	r3, r3
 801cbb6:	4619      	mov	r1, r3
 801cbb8:	6978      	ldr	r0, [r7, #20]
 801cbba:	f7ff f8f9 	bl	801bdb0 <mem_trim>
 801cbbe:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801cbc0:	697b      	ldr	r3, [r7, #20]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d106      	bne.n	801cbd4 <pbuf_realloc+0x110>
 801cbc6:	4b0f      	ldr	r3, [pc, #60]	; (801cc04 <pbuf_realloc+0x140>)
 801cbc8:	f240 221d 	movw	r2, #541	; 0x21d
 801cbcc:	4913      	ldr	r1, [pc, #76]	; (801cc1c <pbuf_realloc+0x158>)
 801cbce:	480f      	ldr	r0, [pc, #60]	; (801cc0c <pbuf_realloc+0x148>)
 801cbd0:	f009 f98a 	bl	8025ee8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801cbd4:	697b      	ldr	r3, [r7, #20]
 801cbd6:	8a7a      	ldrh	r2, [r7, #18]
 801cbd8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801cbda:	697b      	ldr	r3, [r7, #20]
 801cbdc:	895a      	ldrh	r2, [r3, #10]
 801cbde:	697b      	ldr	r3, [r7, #20]
 801cbe0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801cbe2:	697b      	ldr	r3, [r7, #20]
 801cbe4:	681b      	ldr	r3, [r3, #0]
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d004      	beq.n	801cbf4 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801cbea:	697b      	ldr	r3, [r7, #20]
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	4618      	mov	r0, r3
 801cbf0:	f000 f8dc 	bl	801cdac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801cbf4:	697b      	ldr	r3, [r7, #20]
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	601a      	str	r2, [r3, #0]
 801cbfa:	e000      	b.n	801cbfe <pbuf_realloc+0x13a>
    return;
 801cbfc:	bf00      	nop

}
 801cbfe:	3718      	adds	r7, #24
 801cc00:	46bd      	mov	sp, r7
 801cc02:	bd80      	pop	{r7, pc}
 801cc04:	08027df4 	.word	0x08027df4
 801cc08:	08027fb0 	.word	0x08027fb0
 801cc0c:	08027e40 	.word	0x08027e40
 801cc10:	08027fc8 	.word	0x08027fc8
 801cc14:	08027fe4 	.word	0x08027fe4
 801cc18:	08027ff8 	.word	0x08027ff8
 801cc1c:	08028010 	.word	0x08028010

0801cc20 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801cc20:	b580      	push	{r7, lr}
 801cc22:	b084      	sub	sp, #16
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
 801cc28:	460b      	mov	r3, r1
 801cc2a:	807b      	strh	r3, [r7, #2]
 801cc2c:	4613      	mov	r3, r2
 801cc2e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d106      	bne.n	801cc44 <pbuf_header_impl+0x24>
 801cc36:	4b46      	ldr	r3, [pc, #280]	; (801cd50 <pbuf_header_impl+0x130>)
 801cc38:	f240 223f 	movw	r2, #575	; 0x23f
 801cc3c:	4945      	ldr	r1, [pc, #276]	; (801cd54 <pbuf_header_impl+0x134>)
 801cc3e:	4846      	ldr	r0, [pc, #280]	; (801cd58 <pbuf_header_impl+0x138>)
 801cc40:	f009 f952 	bl	8025ee8 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 801cc44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d002      	beq.n	801cc52 <pbuf_header_impl+0x32>
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d101      	bne.n	801cc56 <pbuf_header_impl+0x36>
    return 0;
 801cc52:	2300      	movs	r3, #0
 801cc54:	e078      	b.n	801cd48 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 801cc56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	da10      	bge.n	801cc80 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 801cc5e:	887b      	ldrh	r3, [r7, #2]
 801cc60:	425b      	negs	r3, r3
 801cc62:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	895b      	ldrh	r3, [r3, #10]
 801cc68:	89fa      	ldrh	r2, [r7, #14]
 801cc6a:	429a      	cmp	r2, r3
 801cc6c:	d90a      	bls.n	801cc84 <pbuf_header_impl+0x64>
 801cc6e:	4b38      	ldr	r3, [pc, #224]	; (801cd50 <pbuf_header_impl+0x130>)
 801cc70:	f240 2247 	movw	r2, #583	; 0x247
 801cc74:	4939      	ldr	r1, [pc, #228]	; (801cd5c <pbuf_header_impl+0x13c>)
 801cc76:	4838      	ldr	r0, [pc, #224]	; (801cd58 <pbuf_header_impl+0x138>)
 801cc78:	f009 f936 	bl	8025ee8 <iprintf>
 801cc7c:	2301      	movs	r3, #1
 801cc7e:	e063      	b.n	801cd48 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 801cc80:	887b      	ldrh	r3, [r7, #2]
 801cc82:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	7b1b      	ldrb	r3, [r3, #12]
 801cc88:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	685b      	ldr	r3, [r3, #4]
 801cc8e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 801cc90:	89bb      	ldrh	r3, [r7, #12]
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d002      	beq.n	801cc9c <pbuf_header_impl+0x7c>
 801cc96:	89bb      	ldrh	r3, [r7, #12]
 801cc98:	2b03      	cmp	r3, #3
 801cc9a:	d112      	bne.n	801ccc2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	685a      	ldr	r2, [r3, #4]
 801cca0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cca4:	425b      	negs	r3, r3
 801cca6:	441a      	add	r2, r3
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	685a      	ldr	r2, [r3, #4]
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	3310      	adds	r3, #16
 801ccb4:	429a      	cmp	r2, r3
 801ccb6:	d238      	bcs.n	801cd2a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	68ba      	ldr	r2, [r7, #8]
 801ccbc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 801ccbe:	2301      	movs	r3, #1
 801ccc0:	e042      	b.n	801cd48 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801ccc2:	89bb      	ldrh	r3, [r7, #12]
 801ccc4:	2b02      	cmp	r3, #2
 801ccc6:	d002      	beq.n	801ccce <pbuf_header_impl+0xae>
 801ccc8:	89bb      	ldrh	r3, [r7, #12]
 801ccca:	2b01      	cmp	r3, #1
 801cccc:	d124      	bne.n	801cd18 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801ccce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	da0d      	bge.n	801ccf2 <pbuf_header_impl+0xd2>
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	895b      	ldrh	r3, [r3, #10]
 801ccda:	89fa      	ldrh	r2, [r7, #14]
 801ccdc:	429a      	cmp	r2, r3
 801ccde:	d808      	bhi.n	801ccf2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	685a      	ldr	r2, [r3, #4]
 801cce4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cce8:	425b      	negs	r3, r3
 801ccea:	441a      	add	r2, r3
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	605a      	str	r2, [r3, #4]
 801ccf0:	e011      	b.n	801cd16 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 801ccf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	dd0b      	ble.n	801cd12 <pbuf_header_impl+0xf2>
 801ccfa:	787b      	ldrb	r3, [r7, #1]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d008      	beq.n	801cd12 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	685a      	ldr	r2, [r3, #4]
 801cd04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cd08:	425b      	negs	r3, r3
 801cd0a:	441a      	add	r2, r3
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	605a      	str	r2, [r3, #4]
 801cd10:	e001      	b.n	801cd16 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801cd12:	2301      	movs	r3, #1
 801cd14:	e018      	b.n	801cd48 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801cd16:	e008      	b.n	801cd2a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 801cd18:	4b0d      	ldr	r3, [pc, #52]	; (801cd50 <pbuf_header_impl+0x130>)
 801cd1a:	f240 2277 	movw	r2, #631	; 0x277
 801cd1e:	4910      	ldr	r1, [pc, #64]	; (801cd60 <pbuf_header_impl+0x140>)
 801cd20:	480d      	ldr	r0, [pc, #52]	; (801cd58 <pbuf_header_impl+0x138>)
 801cd22:	f009 f8e1 	bl	8025ee8 <iprintf>
    return 1;
 801cd26:	2301      	movs	r3, #1
 801cd28:	e00e      	b.n	801cd48 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	895a      	ldrh	r2, [r3, #10]
 801cd2e:	887b      	ldrh	r3, [r7, #2]
 801cd30:	4413      	add	r3, r2
 801cd32:	b29a      	uxth	r2, r3
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	891a      	ldrh	r2, [r3, #8]
 801cd3c:	887b      	ldrh	r3, [r7, #2]
 801cd3e:	4413      	add	r3, r2
 801cd40:	b29a      	uxth	r2, r3
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 801cd46:	2300      	movs	r3, #0
}
 801cd48:	4618      	mov	r0, r3
 801cd4a:	3710      	adds	r7, #16
 801cd4c:	46bd      	mov	sp, r7
 801cd4e:	bd80      	pop	{r7, pc}
 801cd50:	08027df4 	.word	0x08027df4
 801cd54:	0802802c 	.word	0x0802802c
 801cd58:	08027e40 	.word	0x08027e40
 801cd5c:	08028038 	.word	0x08028038
 801cd60:	08028058 	.word	0x08028058

0801cd64 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b082      	sub	sp, #8
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	6078      	str	r0, [r7, #4]
 801cd6c:	460b      	mov	r3, r1
 801cd6e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 801cd70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cd74:	2200      	movs	r2, #0
 801cd76:	4619      	mov	r1, r3
 801cd78:	6878      	ldr	r0, [r7, #4]
 801cd7a:	f7ff ff51 	bl	801cc20 <pbuf_header_impl>
 801cd7e:	4603      	mov	r3, r0
}
 801cd80:	4618      	mov	r0, r3
 801cd82:	3708      	adds	r7, #8
 801cd84:	46bd      	mov	sp, r7
 801cd86:	bd80      	pop	{r7, pc}

0801cd88 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801cd88:	b580      	push	{r7, lr}
 801cd8a:	b082      	sub	sp, #8
 801cd8c:	af00      	add	r7, sp, #0
 801cd8e:	6078      	str	r0, [r7, #4]
 801cd90:	460b      	mov	r3, r1
 801cd92:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 801cd94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801cd98:	2201      	movs	r2, #1
 801cd9a:	4619      	mov	r1, r3
 801cd9c:	6878      	ldr	r0, [r7, #4]
 801cd9e:	f7ff ff3f 	bl	801cc20 <pbuf_header_impl>
 801cda2:	4603      	mov	r3, r0
}
 801cda4:	4618      	mov	r0, r3
 801cda6:	3708      	adds	r7, #8
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	bd80      	pop	{r7, pc}

0801cdac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801cdac:	b580      	push	{r7, lr}
 801cdae:	b088      	sub	sp, #32
 801cdb0:	af00      	add	r7, sp, #0
 801cdb2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d10b      	bne.n	801cdd2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d106      	bne.n	801cdce <pbuf_free+0x22>
 801cdc0:	4b41      	ldr	r3, [pc, #260]	; (801cec8 <pbuf_free+0x11c>)
 801cdc2:	f240 22d2 	movw	r2, #722	; 0x2d2
 801cdc6:	4941      	ldr	r1, [pc, #260]	; (801cecc <pbuf_free+0x120>)
 801cdc8:	4841      	ldr	r0, [pc, #260]	; (801ced0 <pbuf_free+0x124>)
 801cdca:	f009 f88d 	bl	8025ee8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801cdce:	2300      	movs	r3, #0
 801cdd0:	e076      	b.n	801cec0 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	7b1b      	ldrb	r3, [r3, #12]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d012      	beq.n	801ce00 <pbuf_free+0x54>
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	7b1b      	ldrb	r3, [r3, #12]
 801cdde:	2b01      	cmp	r3, #1
 801cde0:	d00e      	beq.n	801ce00 <pbuf_free+0x54>
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	7b1b      	ldrb	r3, [r3, #12]
 801cde6:	2b02      	cmp	r3, #2
 801cde8:	d00a      	beq.n	801ce00 <pbuf_free+0x54>
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	7b1b      	ldrb	r3, [r3, #12]
 801cdee:	2b03      	cmp	r3, #3
 801cdf0:	d006      	beq.n	801ce00 <pbuf_free+0x54>
 801cdf2:	4b35      	ldr	r3, [pc, #212]	; (801cec8 <pbuf_free+0x11c>)
 801cdf4:	f240 22de 	movw	r2, #734	; 0x2de
 801cdf8:	4936      	ldr	r1, [pc, #216]	; (801ced4 <pbuf_free+0x128>)
 801cdfa:	4835      	ldr	r0, [pc, #212]	; (801ced0 <pbuf_free+0x124>)
 801cdfc:	f009 f874 	bl	8025ee8 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 801ce00:	2300      	movs	r3, #0
 801ce02:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801ce04:	e058      	b.n	801ceb8 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801ce06:	f006 f8af 	bl	8022f68 <sys_arch_protect>
 801ce0a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	89db      	ldrh	r3, [r3, #14]
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d106      	bne.n	801ce22 <pbuf_free+0x76>
 801ce14:	4b2c      	ldr	r3, [pc, #176]	; (801cec8 <pbuf_free+0x11c>)
 801ce16:	f240 22eb 	movw	r2, #747	; 0x2eb
 801ce1a:	492f      	ldr	r1, [pc, #188]	; (801ced8 <pbuf_free+0x12c>)
 801ce1c:	482c      	ldr	r0, [pc, #176]	; (801ced0 <pbuf_free+0x124>)
 801ce1e:	f009 f863 	bl	8025ee8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	89db      	ldrh	r3, [r3, #14]
 801ce26:	3b01      	subs	r3, #1
 801ce28:	b29a      	uxth	r2, r3
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	81da      	strh	r2, [r3, #14]
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	89db      	ldrh	r3, [r3, #14]
 801ce32:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 801ce34:	69b8      	ldr	r0, [r7, #24]
 801ce36:	f006 f8a5 	bl	8022f84 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801ce3a:	8afb      	ldrh	r3, [r7, #22]
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d139      	bne.n	801ceb4 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	7b1b      	ldrb	r3, [r3, #12]
 801ce4a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	7b5b      	ldrb	r3, [r3, #13]
 801ce50:	f003 0302 	and.w	r3, r3, #2
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d011      	beq.n	801ce7c <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801ce5c:	68bb      	ldr	r3, [r7, #8]
 801ce5e:	691b      	ldr	r3, [r3, #16]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d106      	bne.n	801ce72 <pbuf_free+0xc6>
 801ce64:	4b18      	ldr	r3, [pc, #96]	; (801cec8 <pbuf_free+0x11c>)
 801ce66:	f240 22f9 	movw	r2, #761	; 0x2f9
 801ce6a:	491c      	ldr	r1, [pc, #112]	; (801cedc <pbuf_free+0x130>)
 801ce6c:	4818      	ldr	r0, [pc, #96]	; (801ced0 <pbuf_free+0x124>)
 801ce6e:	f009 f83b 	bl	8025ee8 <iprintf>
        pc->custom_free_function(p);
 801ce72:	68bb      	ldr	r3, [r7, #8]
 801ce74:	691b      	ldr	r3, [r3, #16]
 801ce76:	6878      	ldr	r0, [r7, #4]
 801ce78:	4798      	blx	r3
 801ce7a:	e015      	b.n	801cea8 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 801ce7c:	89fb      	ldrh	r3, [r7, #14]
 801ce7e:	2b03      	cmp	r3, #3
 801ce80:	d104      	bne.n	801ce8c <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 801ce82:	6879      	ldr	r1, [r7, #4]
 801ce84:	200b      	movs	r0, #11
 801ce86:	f7ff fa3f 	bl	801c308 <memp_free>
 801ce8a:	e00d      	b.n	801cea8 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 801ce8c:	89fb      	ldrh	r3, [r7, #14]
 801ce8e:	2b01      	cmp	r3, #1
 801ce90:	d002      	beq.n	801ce98 <pbuf_free+0xec>
 801ce92:	89fb      	ldrh	r3, [r7, #14]
 801ce94:	2b02      	cmp	r3, #2
 801ce96:	d104      	bne.n	801cea2 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 801ce98:	6879      	ldr	r1, [r7, #4]
 801ce9a:	200a      	movs	r0, #10
 801ce9c:	f7ff fa34 	bl	801c308 <memp_free>
 801cea0:	e002      	b.n	801cea8 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 801cea2:	6878      	ldr	r0, [r7, #4]
 801cea4:	f7fe ff16 	bl	801bcd4 <mem_free>
        }
      }
      count++;
 801cea8:	7ffb      	ldrb	r3, [r7, #31]
 801ceaa:	3301      	adds	r3, #1
 801ceac:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801ceae:	693b      	ldr	r3, [r7, #16]
 801ceb0:	607b      	str	r3, [r7, #4]
 801ceb2:	e001      	b.n	801ceb8 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d1a3      	bne.n	801ce06 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801cebe:	7ffb      	ldrb	r3, [r7, #31]
}
 801cec0:	4618      	mov	r0, r3
 801cec2:	3720      	adds	r7, #32
 801cec4:	46bd      	mov	sp, r7
 801cec6:	bd80      	pop	{r7, pc}
 801cec8:	08027df4 	.word	0x08027df4
 801cecc:	0802802c 	.word	0x0802802c
 801ced0:	08027e40 	.word	0x08027e40
 801ced4:	08028068 	.word	0x08028068
 801ced8:	08028080 	.word	0x08028080
 801cedc:	08028098 	.word	0x08028098

0801cee0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801cee0:	b480      	push	{r7}
 801cee2:	b085      	sub	sp, #20
 801cee4:	af00      	add	r7, sp, #0
 801cee6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801cee8:	2300      	movs	r3, #0
 801ceea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801ceec:	e005      	b.n	801cefa <pbuf_clen+0x1a>
    ++len;
 801ceee:	89fb      	ldrh	r3, [r7, #14]
 801cef0:	3301      	adds	r3, #1
 801cef2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d1f6      	bne.n	801ceee <pbuf_clen+0xe>
  }
  return len;
 801cf00:	89fb      	ldrh	r3, [r7, #14]
}
 801cf02:	4618      	mov	r0, r3
 801cf04:	3714      	adds	r7, #20
 801cf06:	46bd      	mov	sp, r7
 801cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf0c:	4770      	bx	lr
	...

0801cf10 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b084      	sub	sp, #16
 801cf14:	af00      	add	r7, sp, #0
 801cf16:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d016      	beq.n	801cf4c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 801cf1e:	f006 f823 	bl	8022f68 <sys_arch_protect>
 801cf22:	60f8      	str	r0, [r7, #12]
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	89db      	ldrh	r3, [r3, #14]
 801cf28:	3301      	adds	r3, #1
 801cf2a:	b29a      	uxth	r2, r3
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	81da      	strh	r2, [r3, #14]
 801cf30:	68f8      	ldr	r0, [r7, #12]
 801cf32:	f006 f827 	bl	8022f84 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	89db      	ldrh	r3, [r3, #14]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d106      	bne.n	801cf4c <pbuf_ref+0x3c>
 801cf3e:	4b05      	ldr	r3, [pc, #20]	; (801cf54 <pbuf_ref+0x44>)
 801cf40:	f240 3239 	movw	r2, #825	; 0x339
 801cf44:	4904      	ldr	r1, [pc, #16]	; (801cf58 <pbuf_ref+0x48>)
 801cf46:	4805      	ldr	r0, [pc, #20]	; (801cf5c <pbuf_ref+0x4c>)
 801cf48:	f008 ffce 	bl	8025ee8 <iprintf>
  }
}
 801cf4c:	bf00      	nop
 801cf4e:	3710      	adds	r7, #16
 801cf50:	46bd      	mov	sp, r7
 801cf52:	bd80      	pop	{r7, pc}
 801cf54:	08027df4 	.word	0x08027df4
 801cf58:	080280bc 	.word	0x080280bc
 801cf5c:	08027e40 	.word	0x08027e40

0801cf60 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b084      	sub	sp, #16
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
 801cf68:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d002      	beq.n	801cf76 <pbuf_cat+0x16>
 801cf70:	683b      	ldr	r3, [r7, #0]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d107      	bne.n	801cf86 <pbuf_cat+0x26>
 801cf76:	4b20      	ldr	r3, [pc, #128]	; (801cff8 <pbuf_cat+0x98>)
 801cf78:	f240 324d 	movw	r2, #845	; 0x34d
 801cf7c:	491f      	ldr	r1, [pc, #124]	; (801cffc <pbuf_cat+0x9c>)
 801cf7e:	4820      	ldr	r0, [pc, #128]	; (801d000 <pbuf_cat+0xa0>)
 801cf80:	f008 ffb2 	bl	8025ee8 <iprintf>
 801cf84:	e034      	b.n	801cff0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	60fb      	str	r3, [r7, #12]
 801cf8a:	e00a      	b.n	801cfa2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	891a      	ldrh	r2, [r3, #8]
 801cf90:	683b      	ldr	r3, [r7, #0]
 801cf92:	891b      	ldrh	r3, [r3, #8]
 801cf94:	4413      	add	r3, r2
 801cf96:	b29a      	uxth	r2, r3
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	60fb      	str	r3, [r7, #12]
 801cfa2:	68fb      	ldr	r3, [r7, #12]
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d1f0      	bne.n	801cf8c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801cfaa:	68fb      	ldr	r3, [r7, #12]
 801cfac:	891a      	ldrh	r2, [r3, #8]
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	895b      	ldrh	r3, [r3, #10]
 801cfb2:	429a      	cmp	r2, r3
 801cfb4:	d006      	beq.n	801cfc4 <pbuf_cat+0x64>
 801cfb6:	4b10      	ldr	r3, [pc, #64]	; (801cff8 <pbuf_cat+0x98>)
 801cfb8:	f240 3255 	movw	r2, #853	; 0x355
 801cfbc:	4911      	ldr	r1, [pc, #68]	; (801d004 <pbuf_cat+0xa4>)
 801cfbe:	4810      	ldr	r0, [pc, #64]	; (801d000 <pbuf_cat+0xa0>)
 801cfc0:	f008 ff92 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d006      	beq.n	801cfda <pbuf_cat+0x7a>
 801cfcc:	4b0a      	ldr	r3, [pc, #40]	; (801cff8 <pbuf_cat+0x98>)
 801cfce:	f240 3256 	movw	r2, #854	; 0x356
 801cfd2:	490d      	ldr	r1, [pc, #52]	; (801d008 <pbuf_cat+0xa8>)
 801cfd4:	480a      	ldr	r0, [pc, #40]	; (801d000 <pbuf_cat+0xa0>)
 801cfd6:	f008 ff87 	bl	8025ee8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	891a      	ldrh	r2, [r3, #8]
 801cfde:	683b      	ldr	r3, [r7, #0]
 801cfe0:	891b      	ldrh	r3, [r3, #8]
 801cfe2:	4413      	add	r3, r2
 801cfe4:	b29a      	uxth	r2, r3
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	683a      	ldr	r2, [r7, #0]
 801cfee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801cff0:	3710      	adds	r7, #16
 801cff2:	46bd      	mov	sp, r7
 801cff4:	bd80      	pop	{r7, pc}
 801cff6:	bf00      	nop
 801cff8:	08027df4 	.word	0x08027df4
 801cffc:	080280d0 	.word	0x080280d0
 801d000:	08027e40 	.word	0x08027e40
 801d004:	08028108 	.word	0x08028108
 801d008:	08028138 	.word	0x08028138

0801d00c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b084      	sub	sp, #16
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
 801d014:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 801d016:	2300      	movs	r3, #0
 801d018:	81fb      	strh	r3, [r7, #14]
 801d01a:	2300      	movs	r3, #0
 801d01c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	2b00      	cmp	r3, #0
 801d022:	d008      	beq.n	801d036 <pbuf_copy+0x2a>
 801d024:	683b      	ldr	r3, [r7, #0]
 801d026:	2b00      	cmp	r3, #0
 801d028:	d005      	beq.n	801d036 <pbuf_copy+0x2a>
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	891a      	ldrh	r2, [r3, #8]
 801d02e:	683b      	ldr	r3, [r7, #0]
 801d030:	891b      	ldrh	r3, [r3, #8]
 801d032:	429a      	cmp	r2, r3
 801d034:	d209      	bcs.n	801d04a <pbuf_copy+0x3e>
 801d036:	4b54      	ldr	r3, [pc, #336]	; (801d188 <pbuf_copy+0x17c>)
 801d038:	f240 32bd 	movw	r2, #957	; 0x3bd
 801d03c:	4953      	ldr	r1, [pc, #332]	; (801d18c <pbuf_copy+0x180>)
 801d03e:	4854      	ldr	r0, [pc, #336]	; (801d190 <pbuf_copy+0x184>)
 801d040:	f008 ff52 	bl	8025ee8 <iprintf>
 801d044:	f06f 030f 	mvn.w	r3, #15
 801d048:	e099      	b.n	801d17e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	895b      	ldrh	r3, [r3, #10]
 801d04e:	461a      	mov	r2, r3
 801d050:	89fb      	ldrh	r3, [r7, #14]
 801d052:	1ad2      	subs	r2, r2, r3
 801d054:	683b      	ldr	r3, [r7, #0]
 801d056:	895b      	ldrh	r3, [r3, #10]
 801d058:	4619      	mov	r1, r3
 801d05a:	89bb      	ldrh	r3, [r7, #12]
 801d05c:	1acb      	subs	r3, r1, r3
 801d05e:	429a      	cmp	r2, r3
 801d060:	db05      	blt.n	801d06e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801d062:	683b      	ldr	r3, [r7, #0]
 801d064:	895a      	ldrh	r2, [r3, #10]
 801d066:	89bb      	ldrh	r3, [r7, #12]
 801d068:	1ad3      	subs	r3, r2, r3
 801d06a:	817b      	strh	r3, [r7, #10]
 801d06c:	e004      	b.n	801d078 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	895a      	ldrh	r2, [r3, #10]
 801d072:	89fb      	ldrh	r3, [r7, #14]
 801d074:	1ad3      	subs	r3, r2, r3
 801d076:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	685a      	ldr	r2, [r3, #4]
 801d07c:	89fb      	ldrh	r3, [r7, #14]
 801d07e:	18d0      	adds	r0, r2, r3
 801d080:	683b      	ldr	r3, [r7, #0]
 801d082:	685a      	ldr	r2, [r3, #4]
 801d084:	89bb      	ldrh	r3, [r7, #12]
 801d086:	4413      	add	r3, r2
 801d088:	897a      	ldrh	r2, [r7, #10]
 801d08a:	4619      	mov	r1, r3
 801d08c:	f009 fbfb 	bl	8026886 <memcpy>
    offset_to += len;
 801d090:	89fa      	ldrh	r2, [r7, #14]
 801d092:	897b      	ldrh	r3, [r7, #10]
 801d094:	4413      	add	r3, r2
 801d096:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 801d098:	89ba      	ldrh	r2, [r7, #12]
 801d09a:	897b      	ldrh	r3, [r7, #10]
 801d09c:	4413      	add	r3, r2
 801d09e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	895b      	ldrh	r3, [r3, #10]
 801d0a4:	89fa      	ldrh	r2, [r7, #14]
 801d0a6:	429a      	cmp	r2, r3
 801d0a8:	d906      	bls.n	801d0b8 <pbuf_copy+0xac>
 801d0aa:	4b37      	ldr	r3, [pc, #220]	; (801d188 <pbuf_copy+0x17c>)
 801d0ac:	f240 32cd 	movw	r2, #973	; 0x3cd
 801d0b0:	4938      	ldr	r1, [pc, #224]	; (801d194 <pbuf_copy+0x188>)
 801d0b2:	4837      	ldr	r0, [pc, #220]	; (801d190 <pbuf_copy+0x184>)
 801d0b4:	f008 ff18 	bl	8025ee8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801d0b8:	683b      	ldr	r3, [r7, #0]
 801d0ba:	895b      	ldrh	r3, [r3, #10]
 801d0bc:	89ba      	ldrh	r2, [r7, #12]
 801d0be:	429a      	cmp	r2, r3
 801d0c0:	d906      	bls.n	801d0d0 <pbuf_copy+0xc4>
 801d0c2:	4b31      	ldr	r3, [pc, #196]	; (801d188 <pbuf_copy+0x17c>)
 801d0c4:	f240 32ce 	movw	r2, #974	; 0x3ce
 801d0c8:	4933      	ldr	r1, [pc, #204]	; (801d198 <pbuf_copy+0x18c>)
 801d0ca:	4831      	ldr	r0, [pc, #196]	; (801d190 <pbuf_copy+0x184>)
 801d0cc:	f008 ff0c 	bl	8025ee8 <iprintf>
    if (offset_from >= p_from->len) {
 801d0d0:	683b      	ldr	r3, [r7, #0]
 801d0d2:	895b      	ldrh	r3, [r3, #10]
 801d0d4:	89ba      	ldrh	r2, [r7, #12]
 801d0d6:	429a      	cmp	r2, r3
 801d0d8:	d304      	bcc.n	801d0e4 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 801d0da:	2300      	movs	r3, #0
 801d0dc:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801d0de:	683b      	ldr	r3, [r7, #0]
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	895b      	ldrh	r3, [r3, #10]
 801d0e8:	89fa      	ldrh	r2, [r7, #14]
 801d0ea:	429a      	cmp	r2, r3
 801d0ec:	d114      	bne.n	801d118 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801d0ee:	2300      	movs	r3, #0
 801d0f0:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d10c      	bne.n	801d118 <pbuf_copy+0x10c>
 801d0fe:	683b      	ldr	r3, [r7, #0]
 801d100:	2b00      	cmp	r3, #0
 801d102:	d009      	beq.n	801d118 <pbuf_copy+0x10c>
 801d104:	4b20      	ldr	r3, [pc, #128]	; (801d188 <pbuf_copy+0x17c>)
 801d106:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801d10a:	4924      	ldr	r1, [pc, #144]	; (801d19c <pbuf_copy+0x190>)
 801d10c:	4820      	ldr	r0, [pc, #128]	; (801d190 <pbuf_copy+0x184>)
 801d10e:	f008 feeb 	bl	8025ee8 <iprintf>
 801d112:	f06f 030f 	mvn.w	r3, #15
 801d116:	e032      	b.n	801d17e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801d118:	683b      	ldr	r3, [r7, #0]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d013      	beq.n	801d146 <pbuf_copy+0x13a>
 801d11e:	683b      	ldr	r3, [r7, #0]
 801d120:	895a      	ldrh	r2, [r3, #10]
 801d122:	683b      	ldr	r3, [r7, #0]
 801d124:	891b      	ldrh	r3, [r3, #8]
 801d126:	429a      	cmp	r2, r3
 801d128:	d10d      	bne.n	801d146 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801d12a:	683b      	ldr	r3, [r7, #0]
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d009      	beq.n	801d146 <pbuf_copy+0x13a>
 801d132:	4b15      	ldr	r3, [pc, #84]	; (801d188 <pbuf_copy+0x17c>)
 801d134:	f240 32de 	movw	r2, #990	; 0x3de
 801d138:	4919      	ldr	r1, [pc, #100]	; (801d1a0 <pbuf_copy+0x194>)
 801d13a:	4815      	ldr	r0, [pc, #84]	; (801d190 <pbuf_copy+0x184>)
 801d13c:	f008 fed4 	bl	8025ee8 <iprintf>
 801d140:	f06f 0305 	mvn.w	r3, #5
 801d144:	e01b      	b.n	801d17e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d013      	beq.n	801d174 <pbuf_copy+0x168>
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	895a      	ldrh	r2, [r3, #10]
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	891b      	ldrh	r3, [r3, #8]
 801d154:	429a      	cmp	r2, r3
 801d156:	d10d      	bne.n	801d174 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	681b      	ldr	r3, [r3, #0]
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d009      	beq.n	801d174 <pbuf_copy+0x168>
 801d160:	4b09      	ldr	r3, [pc, #36]	; (801d188 <pbuf_copy+0x17c>)
 801d162:	f240 32e3 	movw	r2, #995	; 0x3e3
 801d166:	490e      	ldr	r1, [pc, #56]	; (801d1a0 <pbuf_copy+0x194>)
 801d168:	4809      	ldr	r0, [pc, #36]	; (801d190 <pbuf_copy+0x184>)
 801d16a:	f008 febd 	bl	8025ee8 <iprintf>
 801d16e:	f06f 0305 	mvn.w	r3, #5
 801d172:	e004      	b.n	801d17e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801d174:	683b      	ldr	r3, [r7, #0]
 801d176:	2b00      	cmp	r3, #0
 801d178:	f47f af67 	bne.w	801d04a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801d17c:	2300      	movs	r3, #0
}
 801d17e:	4618      	mov	r0, r3
 801d180:	3710      	adds	r7, #16
 801d182:	46bd      	mov	sp, r7
 801d184:	bd80      	pop	{r7, pc}
 801d186:	bf00      	nop
 801d188:	08027df4 	.word	0x08027df4
 801d18c:	08028184 	.word	0x08028184
 801d190:	08027e40 	.word	0x08027e40
 801d194:	080281b4 	.word	0x080281b4
 801d198:	080281cc 	.word	0x080281cc
 801d19c:	080281e8 	.word	0x080281e8
 801d1a0:	080281f8 	.word	0x080281f8

0801d1a4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801d1a4:	b580      	push	{r7, lr}
 801d1a6:	b088      	sub	sp, #32
 801d1a8:	af00      	add	r7, sp, #0
 801d1aa:	60f8      	str	r0, [r7, #12]
 801d1ac:	60b9      	str	r1, [r7, #8]
 801d1ae:	4611      	mov	r1, r2
 801d1b0:	461a      	mov	r2, r3
 801d1b2:	460b      	mov	r3, r1
 801d1b4:	80fb      	strh	r3, [r7, #6]
 801d1b6:	4613      	mov	r3, r2
 801d1b8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d108      	bne.n	801d1d6 <pbuf_copy_partial+0x32>
 801d1c4:	4b30      	ldr	r3, [pc, #192]	; (801d288 <pbuf_copy_partial+0xe4>)
 801d1c6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801d1ca:	4930      	ldr	r1, [pc, #192]	; (801d28c <pbuf_copy_partial+0xe8>)
 801d1cc:	4830      	ldr	r0, [pc, #192]	; (801d290 <pbuf_copy_partial+0xec>)
 801d1ce:	f008 fe8b 	bl	8025ee8 <iprintf>
 801d1d2:	2300      	movs	r3, #0
 801d1d4:	e054      	b.n	801d280 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801d1d6:	68bb      	ldr	r3, [r7, #8]
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d108      	bne.n	801d1ee <pbuf_copy_partial+0x4a>
 801d1dc:	4b2a      	ldr	r3, [pc, #168]	; (801d288 <pbuf_copy_partial+0xe4>)
 801d1de:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801d1e2:	492c      	ldr	r1, [pc, #176]	; (801d294 <pbuf_copy_partial+0xf0>)
 801d1e4:	482a      	ldr	r0, [pc, #168]	; (801d290 <pbuf_copy_partial+0xec>)
 801d1e6:	f008 fe7f 	bl	8025ee8 <iprintf>
 801d1ea:	2300      	movs	r3, #0
 801d1ec:	e048      	b.n	801d280 <pbuf_copy_partial+0xdc>

  left = 0;
 801d1ee:	2300      	movs	r3, #0
 801d1f0:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d002      	beq.n	801d1fe <pbuf_copy_partial+0x5a>
 801d1f8:	68bb      	ldr	r3, [r7, #8]
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d101      	bne.n	801d202 <pbuf_copy_partial+0x5e>
    return 0;
 801d1fe:	2300      	movs	r3, #0
 801d200:	e03e      	b.n	801d280 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801d202:	68fb      	ldr	r3, [r7, #12]
 801d204:	61fb      	str	r3, [r7, #28]
 801d206:	e034      	b.n	801d272 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 801d208:	88bb      	ldrh	r3, [r7, #4]
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d00a      	beq.n	801d224 <pbuf_copy_partial+0x80>
 801d20e:	69fb      	ldr	r3, [r7, #28]
 801d210:	895b      	ldrh	r3, [r3, #10]
 801d212:	88ba      	ldrh	r2, [r7, #4]
 801d214:	429a      	cmp	r2, r3
 801d216:	d305      	bcc.n	801d224 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 801d218:	69fb      	ldr	r3, [r7, #28]
 801d21a:	895b      	ldrh	r3, [r3, #10]
 801d21c:	88ba      	ldrh	r2, [r7, #4]
 801d21e:	1ad3      	subs	r3, r2, r3
 801d220:	80bb      	strh	r3, [r7, #4]
 801d222:	e023      	b.n	801d26c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 801d224:	69fb      	ldr	r3, [r7, #28]
 801d226:	895a      	ldrh	r2, [r3, #10]
 801d228:	88bb      	ldrh	r3, [r7, #4]
 801d22a:	1ad3      	subs	r3, r2, r3
 801d22c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801d22e:	8b3a      	ldrh	r2, [r7, #24]
 801d230:	88fb      	ldrh	r3, [r7, #6]
 801d232:	429a      	cmp	r2, r3
 801d234:	d901      	bls.n	801d23a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 801d236:	88fb      	ldrh	r3, [r7, #6]
 801d238:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 801d23a:	8b7b      	ldrh	r3, [r7, #26]
 801d23c:	68ba      	ldr	r2, [r7, #8]
 801d23e:	18d0      	adds	r0, r2, r3
 801d240:	69fb      	ldr	r3, [r7, #28]
 801d242:	685a      	ldr	r2, [r3, #4]
 801d244:	88bb      	ldrh	r3, [r7, #4]
 801d246:	4413      	add	r3, r2
 801d248:	8b3a      	ldrh	r2, [r7, #24]
 801d24a:	4619      	mov	r1, r3
 801d24c:	f009 fb1b 	bl	8026886 <memcpy>
      copied_total += buf_copy_len;
 801d250:	8afa      	ldrh	r2, [r7, #22]
 801d252:	8b3b      	ldrh	r3, [r7, #24]
 801d254:	4413      	add	r3, r2
 801d256:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 801d258:	8b7a      	ldrh	r2, [r7, #26]
 801d25a:	8b3b      	ldrh	r3, [r7, #24]
 801d25c:	4413      	add	r3, r2
 801d25e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 801d260:	88fa      	ldrh	r2, [r7, #6]
 801d262:	8b3b      	ldrh	r3, [r7, #24]
 801d264:	1ad3      	subs	r3, r2, r3
 801d266:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801d268:	2300      	movs	r3, #0
 801d26a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801d26c:	69fb      	ldr	r3, [r7, #28]
 801d26e:	681b      	ldr	r3, [r3, #0]
 801d270:	61fb      	str	r3, [r7, #28]
 801d272:	88fb      	ldrh	r3, [r7, #6]
 801d274:	2b00      	cmp	r3, #0
 801d276:	d002      	beq.n	801d27e <pbuf_copy_partial+0xda>
 801d278:	69fb      	ldr	r3, [r7, #28]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d1c4      	bne.n	801d208 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 801d27e:	8afb      	ldrh	r3, [r7, #22]
}
 801d280:	4618      	mov	r0, r3
 801d282:	3720      	adds	r7, #32
 801d284:	46bd      	mov	sp, r7
 801d286:	bd80      	pop	{r7, pc}
 801d288:	08027df4 	.word	0x08027df4
 801d28c:	08028224 	.word	0x08028224
 801d290:	08027e40 	.word	0x08027e40
 801d294:	08028244 	.word	0x08028244

0801d298 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801d298:	b480      	push	{r7}
 801d29a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801d29c:	bf00      	nop
 801d29e:	46bd      	mov	sp, r7
 801d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2a4:	4770      	bx	lr
	...

0801d2a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801d2a8:	b580      	push	{r7, lr}
 801d2aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801d2ac:	f000 ffb8 	bl	801e220 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801d2b0:	4b07      	ldr	r3, [pc, #28]	; (801d2d0 <tcp_tmr+0x28>)
 801d2b2:	781b      	ldrb	r3, [r3, #0]
 801d2b4:	3301      	adds	r3, #1
 801d2b6:	b2da      	uxtb	r2, r3
 801d2b8:	4b05      	ldr	r3, [pc, #20]	; (801d2d0 <tcp_tmr+0x28>)
 801d2ba:	701a      	strb	r2, [r3, #0]
 801d2bc:	4b04      	ldr	r3, [pc, #16]	; (801d2d0 <tcp_tmr+0x28>)
 801d2be:	781b      	ldrb	r3, [r3, #0]
 801d2c0:	f003 0301 	and.w	r3, r3, #1
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d001      	beq.n	801d2cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801d2c8:	f000 fcea 	bl	801dca0 <tcp_slowtmr>
  }
}
 801d2cc:	bf00      	nop
 801d2ce:	bd80      	pop	{r7, pc}
 801d2d0:	200094e9 	.word	0x200094e9

0801d2d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801d2d4:	b480      	push	{r7}
 801d2d6:	b085      	sub	sp, #20
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	6078      	str	r0, [r7, #4]
 801d2dc:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	60fb      	str	r3, [r7, #12]
 801d2e2:	e00a      	b.n	801d2fa <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801d2e8:	683b      	ldr	r3, [r7, #0]
 801d2ea:	429a      	cmp	r2, r3
 801d2ec:	d102      	bne.n	801d2f4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	2200      	movs	r2, #0
 801d2f2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	68db      	ldr	r3, [r3, #12]
 801d2f8:	60fb      	str	r3, [r7, #12]
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d1f1      	bne.n	801d2e4 <tcp_remove_listener+0x10>
      }
   }
}
 801d300:	bf00      	nop
 801d302:	3714      	adds	r7, #20
 801d304:	46bd      	mov	sp, r7
 801d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d30a:	4770      	bx	lr

0801d30c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801d30c:	b580      	push	{r7, lr}
 801d30e:	b084      	sub	sp, #16
 801d310:	af00      	add	r7, sp, #0
 801d312:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d105      	bne.n	801d326 <tcp_listen_closed+0x1a>
 801d31a:	4b13      	ldr	r3, [pc, #76]	; (801d368 <tcp_listen_closed+0x5c>)
 801d31c:	22c0      	movs	r2, #192	; 0xc0
 801d31e:	4913      	ldr	r1, [pc, #76]	; (801d36c <tcp_listen_closed+0x60>)
 801d320:	4813      	ldr	r0, [pc, #76]	; (801d370 <tcp_listen_closed+0x64>)
 801d322:	f008 fde1 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	7d1b      	ldrb	r3, [r3, #20]
 801d32a:	2b01      	cmp	r3, #1
 801d32c:	d005      	beq.n	801d33a <tcp_listen_closed+0x2e>
 801d32e:	4b0e      	ldr	r3, [pc, #56]	; (801d368 <tcp_listen_closed+0x5c>)
 801d330:	22c1      	movs	r2, #193	; 0xc1
 801d332:	4910      	ldr	r1, [pc, #64]	; (801d374 <tcp_listen_closed+0x68>)
 801d334:	480e      	ldr	r0, [pc, #56]	; (801d370 <tcp_listen_closed+0x64>)
 801d336:	f008 fdd7 	bl	8025ee8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801d33a:	2301      	movs	r3, #1
 801d33c:	60fb      	str	r3, [r7, #12]
 801d33e:	e00b      	b.n	801d358 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 801d340:	4a0d      	ldr	r2, [pc, #52]	; (801d378 <tcp_listen_closed+0x6c>)
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	6879      	ldr	r1, [r7, #4]
 801d34c:	4618      	mov	r0, r3
 801d34e:	f7ff ffc1 	bl	801d2d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	3301      	adds	r3, #1
 801d356:	60fb      	str	r3, [r7, #12]
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	2b03      	cmp	r3, #3
 801d35c:	d9f0      	bls.n	801d340 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801d35e:	bf00      	nop
 801d360:	3710      	adds	r7, #16
 801d362:	46bd      	mov	sp, r7
 801d364:	bd80      	pop	{r7, pc}
 801d366:	bf00      	nop
 801d368:	08028378 	.word	0x08028378
 801d36c:	080283a8 	.word	0x080283a8
 801d370:	080283b4 	.word	0x080283b4
 801d374:	080283dc 	.word	0x080283dc
 801d378:	0802b6c4 	.word	0x0802b6c4

0801d37c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801d37c:	b5b0      	push	{r4, r5, r7, lr}
 801d37e:	b086      	sub	sp, #24
 801d380:	af02      	add	r7, sp, #8
 801d382:	6078      	str	r0, [r7, #4]
 801d384:	460b      	mov	r3, r1
 801d386:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801d388:	78fb      	ldrb	r3, [r7, #3]
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	d075      	beq.n	801d47a <tcp_close_shutdown+0xfe>
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	7d1b      	ldrb	r3, [r3, #20]
 801d392:	2b04      	cmp	r3, #4
 801d394:	d003      	beq.n	801d39e <tcp_close_shutdown+0x22>
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	7d1b      	ldrb	r3, [r3, #20]
 801d39a:	2b07      	cmp	r3, #7
 801d39c:	d16d      	bne.n	801d47a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	d104      	bne.n	801d3b0 <tcp_close_shutdown+0x34>
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d3aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d3ae:	d064      	beq.n	801d47a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	7e9b      	ldrb	r3, [r3, #26]
 801d3b4:	f003 0310 	and.w	r3, r3, #16
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d106      	bne.n	801d3ca <tcp_close_shutdown+0x4e>
 801d3bc:	4b59      	ldr	r3, [pc, #356]	; (801d524 <tcp_close_shutdown+0x1a8>)
 801d3be:	f240 120f 	movw	r2, #271	; 0x10f
 801d3c2:	4959      	ldr	r1, [pc, #356]	; (801d528 <tcp_close_shutdown+0x1ac>)
 801d3c4:	4859      	ldr	r0, [pc, #356]	; (801d52c <tcp_close_shutdown+0x1b0>)
 801d3c6:	f008 fd8f 	bl	8025ee8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801d3d2:	687c      	ldr	r4, [r7, #4]
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	1d1d      	adds	r5, r3, #4
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	8adb      	ldrh	r3, [r3, #22]
 801d3dc:	687a      	ldr	r2, [r7, #4]
 801d3de:	8b12      	ldrh	r2, [r2, #24]
 801d3e0:	9201      	str	r2, [sp, #4]
 801d3e2:	9300      	str	r3, [sp, #0]
 801d3e4:	462b      	mov	r3, r5
 801d3e6:	4622      	mov	r2, r4
 801d3e8:	f004 ff1c 	bl	8022224 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801d3ec:	6878      	ldr	r0, [r7, #4]
 801d3ee:	f001 fa4d 	bl	801e88c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801d3f2:	4b4f      	ldr	r3, [pc, #316]	; (801d530 <tcp_close_shutdown+0x1b4>)
 801d3f4:	681a      	ldr	r2, [r3, #0]
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	429a      	cmp	r2, r3
 801d3fa:	d105      	bne.n	801d408 <tcp_close_shutdown+0x8c>
 801d3fc:	4b4c      	ldr	r3, [pc, #304]	; (801d530 <tcp_close_shutdown+0x1b4>)
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	68db      	ldr	r3, [r3, #12]
 801d402:	4a4b      	ldr	r2, [pc, #300]	; (801d530 <tcp_close_shutdown+0x1b4>)
 801d404:	6013      	str	r3, [r2, #0]
 801d406:	e013      	b.n	801d430 <tcp_close_shutdown+0xb4>
 801d408:	4b49      	ldr	r3, [pc, #292]	; (801d530 <tcp_close_shutdown+0x1b4>)
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	60fb      	str	r3, [r7, #12]
 801d40e:	e00c      	b.n	801d42a <tcp_close_shutdown+0xae>
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	68da      	ldr	r2, [r3, #12]
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	429a      	cmp	r2, r3
 801d418:	d104      	bne.n	801d424 <tcp_close_shutdown+0xa8>
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	68da      	ldr	r2, [r3, #12]
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	60da      	str	r2, [r3, #12]
 801d422:	e005      	b.n	801d430 <tcp_close_shutdown+0xb4>
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	68db      	ldr	r3, [r3, #12]
 801d428:	60fb      	str	r3, [r7, #12]
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d1ef      	bne.n	801d410 <tcp_close_shutdown+0x94>
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	2200      	movs	r2, #0
 801d434:	60da      	str	r2, [r3, #12]
 801d436:	4b3f      	ldr	r3, [pc, #252]	; (801d534 <tcp_close_shutdown+0x1b8>)
 801d438:	2201      	movs	r2, #1
 801d43a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	7d1b      	ldrb	r3, [r3, #20]
 801d440:	2b04      	cmp	r3, #4
 801d442:	d10c      	bne.n	801d45e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	220a      	movs	r2, #10
 801d448:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d44a:	4b3b      	ldr	r3, [pc, #236]	; (801d538 <tcp_close_shutdown+0x1bc>)
 801d44c:	681a      	ldr	r2, [r3, #0]
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	60da      	str	r2, [r3, #12]
 801d452:	4a39      	ldr	r2, [pc, #228]	; (801d538 <tcp_close_shutdown+0x1bc>)
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	6013      	str	r3, [r2, #0]
 801d458:	f005 f932 	bl	80226c0 <tcp_timer_needed>
 801d45c:	e00b      	b.n	801d476 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 801d45e:	4b37      	ldr	r3, [pc, #220]	; (801d53c <tcp_close_shutdown+0x1c0>)
 801d460:	681a      	ldr	r2, [r3, #0]
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	429a      	cmp	r2, r3
 801d466:	d102      	bne.n	801d46e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 801d468:	f003 fd72 	bl	8020f50 <tcp_trigger_input_pcb_close>
 801d46c:	e003      	b.n	801d476 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 801d46e:	6879      	ldr	r1, [r7, #4]
 801d470:	2000      	movs	r0, #0
 801d472:	f7fe ff49 	bl	801c308 <memp_free>
        }
      }
      return ERR_OK;
 801d476:	2300      	movs	r3, #0
 801d478:	e050      	b.n	801d51c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	7d1b      	ldrb	r3, [r3, #20]
 801d47e:	2b01      	cmp	r3, #1
 801d480:	d02e      	beq.n	801d4e0 <tcp_close_shutdown+0x164>
 801d482:	2b02      	cmp	r3, #2
 801d484:	d038      	beq.n	801d4f8 <tcp_close_shutdown+0x17c>
 801d486:	2b00      	cmp	r3, #0
 801d488:	d142      	bne.n	801d510 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	8adb      	ldrh	r3, [r3, #22]
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d021      	beq.n	801d4d6 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801d492:	4b2b      	ldr	r3, [pc, #172]	; (801d540 <tcp_close_shutdown+0x1c4>)
 801d494:	681a      	ldr	r2, [r3, #0]
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	429a      	cmp	r2, r3
 801d49a:	d105      	bne.n	801d4a8 <tcp_close_shutdown+0x12c>
 801d49c:	4b28      	ldr	r3, [pc, #160]	; (801d540 <tcp_close_shutdown+0x1c4>)
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	68db      	ldr	r3, [r3, #12]
 801d4a2:	4a27      	ldr	r2, [pc, #156]	; (801d540 <tcp_close_shutdown+0x1c4>)
 801d4a4:	6013      	str	r3, [r2, #0]
 801d4a6:	e013      	b.n	801d4d0 <tcp_close_shutdown+0x154>
 801d4a8:	4b25      	ldr	r3, [pc, #148]	; (801d540 <tcp_close_shutdown+0x1c4>)
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	60bb      	str	r3, [r7, #8]
 801d4ae:	e00c      	b.n	801d4ca <tcp_close_shutdown+0x14e>
 801d4b0:	68bb      	ldr	r3, [r7, #8]
 801d4b2:	68da      	ldr	r2, [r3, #12]
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	429a      	cmp	r2, r3
 801d4b8:	d104      	bne.n	801d4c4 <tcp_close_shutdown+0x148>
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	68da      	ldr	r2, [r3, #12]
 801d4be:	68bb      	ldr	r3, [r7, #8]
 801d4c0:	60da      	str	r2, [r3, #12]
 801d4c2:	e005      	b.n	801d4d0 <tcp_close_shutdown+0x154>
 801d4c4:	68bb      	ldr	r3, [r7, #8]
 801d4c6:	68db      	ldr	r3, [r3, #12]
 801d4c8:	60bb      	str	r3, [r7, #8]
 801d4ca:	68bb      	ldr	r3, [r7, #8]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d1ef      	bne.n	801d4b0 <tcp_close_shutdown+0x134>
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	2200      	movs	r2, #0
 801d4d4:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 801d4d6:	6879      	ldr	r1, [r7, #4]
 801d4d8:	2000      	movs	r0, #0
 801d4da:	f7fe ff15 	bl	801c308 <memp_free>
    break;
 801d4de:	e01c      	b.n	801d51a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 801d4e0:	6878      	ldr	r0, [r7, #4]
 801d4e2:	f7ff ff13 	bl	801d30c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801d4e6:	6879      	ldr	r1, [r7, #4]
 801d4e8:	4816      	ldr	r0, [pc, #88]	; (801d544 <tcp_close_shutdown+0x1c8>)
 801d4ea:	f001 fa11 	bl	801e910 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801d4ee:	6879      	ldr	r1, [r7, #4]
 801d4f0:	2001      	movs	r0, #1
 801d4f2:	f7fe ff09 	bl	801c308 <memp_free>
    break;
 801d4f6:	e010      	b.n	801d51a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 801d4f8:	6879      	ldr	r1, [r7, #4]
 801d4fa:	480d      	ldr	r0, [pc, #52]	; (801d530 <tcp_close_shutdown+0x1b4>)
 801d4fc:	f001 fa08 	bl	801e910 <tcp_pcb_remove>
 801d500:	4b0c      	ldr	r3, [pc, #48]	; (801d534 <tcp_close_shutdown+0x1b8>)
 801d502:	2201      	movs	r2, #1
 801d504:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 801d506:	6879      	ldr	r1, [r7, #4]
 801d508:	2000      	movs	r0, #0
 801d50a:	f7fe fefd 	bl	801c308 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 801d50e:	e004      	b.n	801d51a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 801d510:	6878      	ldr	r0, [r7, #4]
 801d512:	f000 f819 	bl	801d548 <tcp_close_shutdown_fin>
 801d516:	4603      	mov	r3, r0
 801d518:	e000      	b.n	801d51c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 801d51a:	2300      	movs	r3, #0
}
 801d51c:	4618      	mov	r0, r3
 801d51e:	3710      	adds	r7, #16
 801d520:	46bd      	mov	sp, r7
 801d522:	bdb0      	pop	{r4, r5, r7, pc}
 801d524:	08028378 	.word	0x08028378
 801d528:	080283f4 	.word	0x080283f4
 801d52c:	080283b4 	.word	0x080283b4
 801d530:	2000ecc4 	.word	0x2000ecc4
 801d534:	2000ecc0 	.word	0x2000ecc0
 801d538:	2000ecd4 	.word	0x2000ecd4
 801d53c:	2000ecd8 	.word	0x2000ecd8
 801d540:	2000ecd0 	.word	0x2000ecd0
 801d544:	2000eccc 	.word	0x2000eccc

0801d548 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b084      	sub	sp, #16
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	2b00      	cmp	r3, #0
 801d554:	d106      	bne.n	801d564 <tcp_close_shutdown_fin+0x1c>
 801d556:	4b2c      	ldr	r3, [pc, #176]	; (801d608 <tcp_close_shutdown_fin+0xc0>)
 801d558:	f240 124d 	movw	r2, #333	; 0x14d
 801d55c:	492b      	ldr	r1, [pc, #172]	; (801d60c <tcp_close_shutdown_fin+0xc4>)
 801d55e:	482c      	ldr	r0, [pc, #176]	; (801d610 <tcp_close_shutdown_fin+0xc8>)
 801d560:	f008 fcc2 	bl	8025ee8 <iprintf>

  switch (pcb->state) {
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	7d1b      	ldrb	r3, [r3, #20]
 801d568:	2b04      	cmp	r3, #4
 801d56a:	d010      	beq.n	801d58e <tcp_close_shutdown_fin+0x46>
 801d56c:	2b07      	cmp	r3, #7
 801d56e:	d01b      	beq.n	801d5a8 <tcp_close_shutdown_fin+0x60>
 801d570:	2b03      	cmp	r3, #3
 801d572:	d126      	bne.n	801d5c2 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 801d574:	6878      	ldr	r0, [r7, #4]
 801d576:	f003 fd77 	bl	8021068 <tcp_send_fin>
 801d57a:	4603      	mov	r3, r0
 801d57c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d582:	2b00      	cmp	r3, #0
 801d584:	d11f      	bne.n	801d5c6 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	2205      	movs	r2, #5
 801d58a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d58c:	e01b      	b.n	801d5c6 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 801d58e:	6878      	ldr	r0, [r7, #4]
 801d590:	f003 fd6a 	bl	8021068 <tcp_send_fin>
 801d594:	4603      	mov	r3, r0
 801d596:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d114      	bne.n	801d5ca <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	2205      	movs	r2, #5
 801d5a4:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d5a6:	e010      	b.n	801d5ca <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 801d5a8:	6878      	ldr	r0, [r7, #4]
 801d5aa:	f003 fd5d 	bl	8021068 <tcp_send_fin>
 801d5ae:	4603      	mov	r3, r0
 801d5b0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801d5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5b6:	2b00      	cmp	r3, #0
 801d5b8:	d109      	bne.n	801d5ce <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	2209      	movs	r2, #9
 801d5be:	751a      	strb	r2, [r3, #20]
    }
    break;
 801d5c0:	e005      	b.n	801d5ce <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	e01c      	b.n	801d600 <tcp_close_shutdown_fin+0xb8>
    break;
 801d5c6:	bf00      	nop
 801d5c8:	e002      	b.n	801d5d0 <tcp_close_shutdown_fin+0x88>
    break;
 801d5ca:	bf00      	nop
 801d5cc:	e000      	b.n	801d5d0 <tcp_close_shutdown_fin+0x88>
    break;
 801d5ce:	bf00      	nop
  }

  if (err == ERR_OK) {
 801d5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d103      	bne.n	801d5e0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801d5d8:	6878      	ldr	r0, [r7, #4]
 801d5da:	f004 fb9b 	bl	8021d14 <tcp_output>
 801d5de:	e00d      	b.n	801d5fc <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801d5e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d5e8:	d108      	bne.n	801d5fc <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	7e9b      	ldrb	r3, [r3, #26]
 801d5ee:	f043 0308 	orr.w	r3, r3, #8
 801d5f2:	b2da      	uxtb	r2, r3
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	e001      	b.n	801d600 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 801d5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d600:	4618      	mov	r0, r3
 801d602:	3710      	adds	r7, #16
 801d604:	46bd      	mov	sp, r7
 801d606:	bd80      	pop	{r7, pc}
 801d608:	08028378 	.word	0x08028378
 801d60c:	080283a8 	.word	0x080283a8
 801d610:	080283b4 	.word	0x080283b4

0801d614 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801d614:	b580      	push	{r7, lr}
 801d616:	b082      	sub	sp, #8
 801d618:	af00      	add	r7, sp, #0
 801d61a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	7d1b      	ldrb	r3, [r3, #20]
 801d620:	2b01      	cmp	r3, #1
 801d622:	d006      	beq.n	801d632 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	7e9b      	ldrb	r3, [r3, #26]
 801d628:	f043 0310 	orr.w	r3, r3, #16
 801d62c:	b2da      	uxtb	r2, r3
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801d632:	2101      	movs	r1, #1
 801d634:	6878      	ldr	r0, [r7, #4]
 801d636:	f7ff fea1 	bl	801d37c <tcp_close_shutdown>
 801d63a:	4603      	mov	r3, r0
}
 801d63c:	4618      	mov	r0, r3
 801d63e:	3708      	adds	r7, #8
 801d640:	46bd      	mov	sp, r7
 801d642:	bd80      	pop	{r7, pc}

0801d644 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801d644:	b580      	push	{r7, lr}
 801d646:	b084      	sub	sp, #16
 801d648:	af00      	add	r7, sp, #0
 801d64a:	60f8      	str	r0, [r7, #12]
 801d64c:	60b9      	str	r1, [r7, #8]
 801d64e:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 801d650:	68fb      	ldr	r3, [r7, #12]
 801d652:	7d1b      	ldrb	r3, [r3, #20]
 801d654:	2b01      	cmp	r3, #1
 801d656:	d102      	bne.n	801d65e <tcp_shutdown+0x1a>
    return ERR_CONN;
 801d658:	f06f 030a 	mvn.w	r3, #10
 801d65c:	e035      	b.n	801d6ca <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 801d65e:	68bb      	ldr	r3, [r7, #8]
 801d660:	2b00      	cmp	r3, #0
 801d662:	d01b      	beq.n	801d69c <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	7e9b      	ldrb	r3, [r3, #26]
 801d668:	f043 0310 	orr.w	r3, r3, #16
 801d66c:	b2da      	uxtb	r2, r3
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	2b00      	cmp	r3, #0
 801d676:	d005      	beq.n	801d684 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801d678:	2101      	movs	r1, #1
 801d67a:	68f8      	ldr	r0, [r7, #12]
 801d67c:	f7ff fe7e 	bl	801d37c <tcp_close_shutdown>
 801d680:	4603      	mov	r3, r0
 801d682:	e022      	b.n	801d6ca <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d007      	beq.n	801d69c <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d690:	4618      	mov	r0, r3
 801d692:	f7ff fb8b 	bl	801cdac <pbuf_free>
      pcb->refused_data = NULL;
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	2200      	movs	r2, #0
 801d69a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d012      	beq.n	801d6c8 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	7d1b      	ldrb	r3, [r3, #20]
 801d6a6:	2b03      	cmp	r3, #3
 801d6a8:	db0b      	blt.n	801d6c2 <tcp_shutdown+0x7e>
 801d6aa:	2b04      	cmp	r3, #4
 801d6ac:	dd01      	ble.n	801d6b2 <tcp_shutdown+0x6e>
 801d6ae:	2b07      	cmp	r3, #7
 801d6b0:	d107      	bne.n	801d6c2 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801d6b2:	68bb      	ldr	r3, [r7, #8]
 801d6b4:	b2db      	uxtb	r3, r3
 801d6b6:	4619      	mov	r1, r3
 801d6b8:	68f8      	ldr	r0, [r7, #12]
 801d6ba:	f7ff fe5f 	bl	801d37c <tcp_close_shutdown>
 801d6be:	4603      	mov	r3, r0
 801d6c0:	e003      	b.n	801d6ca <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 801d6c2:	f06f 030a 	mvn.w	r3, #10
 801d6c6:	e000      	b.n	801d6ca <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 801d6c8:	2300      	movs	r3, #0
}
 801d6ca:	4618      	mov	r0, r3
 801d6cc:	3710      	adds	r7, #16
 801d6ce:	46bd      	mov	sp, r7
 801d6d0:	bd80      	pop	{r7, pc}
	...

0801d6d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801d6d4:	b580      	push	{r7, lr}
 801d6d6:	b08c      	sub	sp, #48	; 0x30
 801d6d8:	af02      	add	r7, sp, #8
 801d6da:	6078      	str	r0, [r7, #4]
 801d6dc:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	7d1b      	ldrb	r3, [r3, #20]
 801d6e2:	2b01      	cmp	r3, #1
 801d6e4:	d106      	bne.n	801d6f4 <tcp_abandon+0x20>
 801d6e6:	4b4d      	ldr	r3, [pc, #308]	; (801d81c <tcp_abandon+0x148>)
 801d6e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d6ec:	494c      	ldr	r1, [pc, #304]	; (801d820 <tcp_abandon+0x14c>)
 801d6ee:	484d      	ldr	r0, [pc, #308]	; (801d824 <tcp_abandon+0x150>)
 801d6f0:	f008 fbfa 	bl	8025ee8 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	7d1b      	ldrb	r3, [r3, #20]
 801d6f8:	2b0a      	cmp	r3, #10
 801d6fa:	d108      	bne.n	801d70e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801d6fc:	6879      	ldr	r1, [r7, #4]
 801d6fe:	484a      	ldr	r0, [pc, #296]	; (801d828 <tcp_abandon+0x154>)
 801d700:	f001 f906 	bl	801e910 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801d704:	6879      	ldr	r1, [r7, #4]
 801d706:	2000      	movs	r0, #0
 801d708:	f7fe fdfe 	bl	801c308 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 801d70c:	e081      	b.n	801d812 <tcp_abandon+0x13e>
    int send_rst = 0;
 801d70e:	2300      	movs	r3, #0
 801d710:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801d712:	2300      	movs	r3, #0
 801d714:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d71a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d720:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 801d722:	687b      	ldr	r3, [r7, #4]
 801d724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d728:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	691b      	ldr	r3, [r3, #16]
 801d72e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801d730:	687b      	ldr	r3, [r7, #4]
 801d732:	7d1b      	ldrb	r3, [r3, #20]
 801d734:	2b00      	cmp	r3, #0
 801d736:	d126      	bne.n	801d786 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	8adb      	ldrh	r3, [r3, #22]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d02e      	beq.n	801d79e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801d740:	4b3a      	ldr	r3, [pc, #232]	; (801d82c <tcp_abandon+0x158>)
 801d742:	681a      	ldr	r2, [r3, #0]
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	429a      	cmp	r2, r3
 801d748:	d105      	bne.n	801d756 <tcp_abandon+0x82>
 801d74a:	4b38      	ldr	r3, [pc, #224]	; (801d82c <tcp_abandon+0x158>)
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	68db      	ldr	r3, [r3, #12]
 801d750:	4a36      	ldr	r2, [pc, #216]	; (801d82c <tcp_abandon+0x158>)
 801d752:	6013      	str	r3, [r2, #0]
 801d754:	e013      	b.n	801d77e <tcp_abandon+0xaa>
 801d756:	4b35      	ldr	r3, [pc, #212]	; (801d82c <tcp_abandon+0x158>)
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	61fb      	str	r3, [r7, #28]
 801d75c:	e00c      	b.n	801d778 <tcp_abandon+0xa4>
 801d75e:	69fb      	ldr	r3, [r7, #28]
 801d760:	68da      	ldr	r2, [r3, #12]
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	429a      	cmp	r2, r3
 801d766:	d104      	bne.n	801d772 <tcp_abandon+0x9e>
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	68da      	ldr	r2, [r3, #12]
 801d76c:	69fb      	ldr	r3, [r7, #28]
 801d76e:	60da      	str	r2, [r3, #12]
 801d770:	e005      	b.n	801d77e <tcp_abandon+0xaa>
 801d772:	69fb      	ldr	r3, [r7, #28]
 801d774:	68db      	ldr	r3, [r3, #12]
 801d776:	61fb      	str	r3, [r7, #28]
 801d778:	69fb      	ldr	r3, [r7, #28]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d1ef      	bne.n	801d75e <tcp_abandon+0x8a>
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	2200      	movs	r2, #0
 801d782:	60da      	str	r2, [r3, #12]
 801d784:	e00b      	b.n	801d79e <tcp_abandon+0xca>
      send_rst = reset;
 801d786:	683b      	ldr	r3, [r7, #0]
 801d788:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	8adb      	ldrh	r3, [r3, #22]
 801d78e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801d790:	6879      	ldr	r1, [r7, #4]
 801d792:	4827      	ldr	r0, [pc, #156]	; (801d830 <tcp_abandon+0x15c>)
 801d794:	f001 f8bc 	bl	801e910 <tcp_pcb_remove>
 801d798:	4b26      	ldr	r3, [pc, #152]	; (801d834 <tcp_abandon+0x160>)
 801d79a:	2201      	movs	r2, #1
 801d79c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d004      	beq.n	801d7b0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d7aa:	4618      	mov	r0, r3
 801d7ac:	f000 fe05 	bl	801e3ba <tcp_segs_free>
    if (pcb->unsent != NULL) {
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d004      	beq.n	801d7c2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d7bc:	4618      	mov	r0, r3
 801d7be:	f000 fdfc 	bl	801e3ba <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d004      	beq.n	801d7d4 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d7ce:	4618      	mov	r0, r3
 801d7d0:	f000 fdf3 	bl	801e3ba <tcp_segs_free>
    if (send_rst) {
 801d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d00c      	beq.n	801d7f4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801d7da:	687a      	ldr	r2, [r7, #4]
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	1d19      	adds	r1, r3, #4
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	8b1b      	ldrh	r3, [r3, #24]
 801d7e4:	9301      	str	r3, [sp, #4]
 801d7e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d7e8:	9300      	str	r3, [sp, #0]
 801d7ea:	460b      	mov	r3, r1
 801d7ec:	6979      	ldr	r1, [r7, #20]
 801d7ee:	69b8      	ldr	r0, [r7, #24]
 801d7f0:	f004 fd18 	bl	8022224 <tcp_rst>
    last_state = pcb->state;
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	7d1b      	ldrb	r3, [r3, #20]
 801d7f8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 801d7fa:	6879      	ldr	r1, [r7, #4]
 801d7fc:	2000      	movs	r0, #0
 801d7fe:	f7fe fd83 	bl	801c308 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801d802:	693b      	ldr	r3, [r7, #16]
 801d804:	2b00      	cmp	r3, #0
 801d806:	d004      	beq.n	801d812 <tcp_abandon+0x13e>
 801d808:	693b      	ldr	r3, [r7, #16]
 801d80a:	f06f 010c 	mvn.w	r1, #12
 801d80e:	68f8      	ldr	r0, [r7, #12]
 801d810:	4798      	blx	r3
}
 801d812:	bf00      	nop
 801d814:	3728      	adds	r7, #40	; 0x28
 801d816:	46bd      	mov	sp, r7
 801d818:	bd80      	pop	{r7, pc}
 801d81a:	bf00      	nop
 801d81c:	08028378 	.word	0x08028378
 801d820:	08028410 	.word	0x08028410
 801d824:	080283b4 	.word	0x080283b4
 801d828:	2000ecd4 	.word	0x2000ecd4
 801d82c:	2000ecd0 	.word	0x2000ecd0
 801d830:	2000ecc4 	.word	0x2000ecc4
 801d834:	2000ecc0 	.word	0x2000ecc0

0801d838 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801d838:	b580      	push	{r7, lr}
 801d83a:	b082      	sub	sp, #8
 801d83c:	af00      	add	r7, sp, #0
 801d83e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801d840:	2101      	movs	r1, #1
 801d842:	6878      	ldr	r0, [r7, #4]
 801d844:	f7ff ff46 	bl	801d6d4 <tcp_abandon>
}
 801d848:	bf00      	nop
 801d84a:	3708      	adds	r7, #8
 801d84c:	46bd      	mov	sp, r7
 801d84e:	bd80      	pop	{r7, pc}

0801d850 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d850:	b580      	push	{r7, lr}
 801d852:	b088      	sub	sp, #32
 801d854:	af00      	add	r7, sp, #0
 801d856:	60f8      	str	r0, [r7, #12]
 801d858:	60b9      	str	r1, [r7, #8]
 801d85a:	4613      	mov	r3, r2
 801d85c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801d85e:	2304      	movs	r3, #4
 801d860:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d862:	68bb      	ldr	r3, [r7, #8]
 801d864:	2b00      	cmp	r3, #0
 801d866:	d101      	bne.n	801d86c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801d868:	4b3c      	ldr	r3, [pc, #240]	; (801d95c <tcp_bind+0x10c>)
 801d86a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	2b00      	cmp	r3, #0
 801d870:	d002      	beq.n	801d878 <tcp_bind+0x28>
 801d872:	68bb      	ldr	r3, [r7, #8]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d102      	bne.n	801d87e <tcp_bind+0x2e>
    return ERR_VAL;
 801d878:	f06f 0305 	mvn.w	r3, #5
 801d87c:	e06a      	b.n	801d954 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	7d1b      	ldrb	r3, [r3, #20]
 801d882:	2b00      	cmp	r3, #0
 801d884:	d009      	beq.n	801d89a <tcp_bind+0x4a>
 801d886:	4b36      	ldr	r3, [pc, #216]	; (801d960 <tcp_bind+0x110>)
 801d888:	f44f 7211 	mov.w	r2, #580	; 0x244
 801d88c:	4935      	ldr	r1, [pc, #212]	; (801d964 <tcp_bind+0x114>)
 801d88e:	4836      	ldr	r0, [pc, #216]	; (801d968 <tcp_bind+0x118>)
 801d890:	f008 fb2a 	bl	8025ee8 <iprintf>
 801d894:	f06f 0305 	mvn.w	r3, #5
 801d898:	e05c      	b.n	801d954 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 801d89a:	88fb      	ldrh	r3, [r7, #6]
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d109      	bne.n	801d8b4 <tcp_bind+0x64>
    port = tcp_new_port();
 801d8a0:	f000 f9ba 	bl	801dc18 <tcp_new_port>
 801d8a4:	4603      	mov	r3, r0
 801d8a6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d8a8:	88fb      	ldrh	r3, [r7, #6]
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	d135      	bne.n	801d91a <tcp_bind+0xca>
      return ERR_BUF;
 801d8ae:	f06f 0301 	mvn.w	r3, #1
 801d8b2:	e04f      	b.n	801d954 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	61fb      	str	r3, [r7, #28]
 801d8b8:	e02b      	b.n	801d912 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801d8ba:	4a2c      	ldr	r2, [pc, #176]	; (801d96c <tcp_bind+0x11c>)
 801d8bc:	69fb      	ldr	r3, [r7, #28]
 801d8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	61bb      	str	r3, [r7, #24]
 801d8c6:	e01e      	b.n	801d906 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 801d8c8:	69bb      	ldr	r3, [r7, #24]
 801d8ca:	8adb      	ldrh	r3, [r3, #22]
 801d8cc:	88fa      	ldrh	r2, [r7, #6]
 801d8ce:	429a      	cmp	r2, r3
 801d8d0:	d116      	bne.n	801d900 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801d8d2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d010      	beq.n	801d8fa <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 801d8d8:	69bb      	ldr	r3, [r7, #24]
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d00c      	beq.n	801d8fa <tcp_bind+0xaa>
 801d8e0:	68bb      	ldr	r3, [r7, #8]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d009      	beq.n	801d8fa <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 801d8e6:	68bb      	ldr	r3, [r7, #8]
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d005      	beq.n	801d8fa <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801d8ee:	69bb      	ldr	r3, [r7, #24]
 801d8f0:	681a      	ldr	r2, [r3, #0]
 801d8f2:	68bb      	ldr	r3, [r7, #8]
 801d8f4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801d8f6:	429a      	cmp	r2, r3
 801d8f8:	d102      	bne.n	801d900 <tcp_bind+0xb0>
              return ERR_USE;
 801d8fa:	f06f 0307 	mvn.w	r3, #7
 801d8fe:	e029      	b.n	801d954 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801d900:	69bb      	ldr	r3, [r7, #24]
 801d902:	68db      	ldr	r3, [r3, #12]
 801d904:	61bb      	str	r3, [r7, #24]
 801d906:	69bb      	ldr	r3, [r7, #24]
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d1dd      	bne.n	801d8c8 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 801d90c:	69fb      	ldr	r3, [r7, #28]
 801d90e:	3301      	adds	r3, #1
 801d910:	61fb      	str	r3, [r7, #28]
 801d912:	69fa      	ldr	r2, [r7, #28]
 801d914:	697b      	ldr	r3, [r7, #20]
 801d916:	429a      	cmp	r2, r3
 801d918:	dbcf      	blt.n	801d8ba <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 801d91a:	68bb      	ldr	r3, [r7, #8]
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d00c      	beq.n	801d93a <tcp_bind+0xea>
 801d920:	68bb      	ldr	r3, [r7, #8]
 801d922:	681b      	ldr	r3, [r3, #0]
 801d924:	2b00      	cmp	r3, #0
 801d926:	d008      	beq.n	801d93a <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801d928:	68bb      	ldr	r3, [r7, #8]
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	d002      	beq.n	801d934 <tcp_bind+0xe4>
 801d92e:	68bb      	ldr	r3, [r7, #8]
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	e000      	b.n	801d936 <tcp_bind+0xe6>
 801d934:	2300      	movs	r3, #0
 801d936:	68fa      	ldr	r2, [r7, #12]
 801d938:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	88fa      	ldrh	r2, [r7, #6]
 801d93e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801d940:	4b0b      	ldr	r3, [pc, #44]	; (801d970 <tcp_bind+0x120>)
 801d942:	681a      	ldr	r2, [r3, #0]
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	60da      	str	r2, [r3, #12]
 801d948:	4a09      	ldr	r2, [pc, #36]	; (801d970 <tcp_bind+0x120>)
 801d94a:	68fb      	ldr	r3, [r7, #12]
 801d94c:	6013      	str	r3, [r2, #0]
 801d94e:	f004 feb7 	bl	80226c0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801d952:	2300      	movs	r3, #0
}
 801d954:	4618      	mov	r0, r3
 801d956:	3720      	adds	r7, #32
 801d958:	46bd      	mov	sp, r7
 801d95a:	bd80      	pop	{r7, pc}
 801d95c:	0802b5e8 	.word	0x0802b5e8
 801d960:	08028378 	.word	0x08028378
 801d964:	08028444 	.word	0x08028444
 801d968:	080283b4 	.word	0x080283b4
 801d96c:	0802b6c4 	.word	0x0802b6c4
 801d970:	2000ecd0 	.word	0x2000ecd0

0801d974 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801d974:	b580      	push	{r7, lr}
 801d976:	b084      	sub	sp, #16
 801d978:	af00      	add	r7, sp, #0
 801d97a:	60f8      	str	r0, [r7, #12]
 801d97c:	60b9      	str	r1, [r7, #8]
 801d97e:	4613      	mov	r3, r2
 801d980:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 801d982:	68b8      	ldr	r0, [r7, #8]
 801d984:	f7ff ff58 	bl	801d838 <tcp_abort>

  return ERR_ABRT;
 801d988:	f06f 030c 	mvn.w	r3, #12
}
 801d98c:	4618      	mov	r0, r3
 801d98e:	3710      	adds	r7, #16
 801d990:	46bd      	mov	sp, r7
 801d992:	bd80      	pop	{r7, pc}

0801d994 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801d994:	b580      	push	{r7, lr}
 801d996:	b088      	sub	sp, #32
 801d998:	af00      	add	r7, sp, #0
 801d99a:	60f8      	str	r0, [r7, #12]
 801d99c:	460b      	mov	r3, r1
 801d99e:	607a      	str	r2, [r7, #4]
 801d9a0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801d9a2:	2300      	movs	r3, #0
 801d9a4:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	7d1b      	ldrb	r3, [r3, #20]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d009      	beq.n	801d9c2 <tcp_listen_with_backlog_and_err+0x2e>
 801d9ae:	4b3f      	ldr	r3, [pc, #252]	; (801daac <tcp_listen_with_backlog_and_err+0x118>)
 801d9b0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 801d9b4:	493e      	ldr	r1, [pc, #248]	; (801dab0 <tcp_listen_with_backlog_and_err+0x11c>)
 801d9b6:	483f      	ldr	r0, [pc, #252]	; (801dab4 <tcp_listen_with_backlog_and_err+0x120>)
 801d9b8:	f008 fa96 	bl	8025ee8 <iprintf>
 801d9bc:	23f1      	movs	r3, #241	; 0xf1
 801d9be:	76fb      	strb	r3, [r7, #27]
 801d9c0:	e069      	b.n	801da96 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	7d1b      	ldrb	r3, [r3, #20]
 801d9c6:	2b01      	cmp	r3, #1
 801d9c8:	d104      	bne.n	801d9d4 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801d9ce:	23f7      	movs	r3, #247	; 0xf7
 801d9d0:	76fb      	strb	r3, [r7, #27]
    goto done;
 801d9d2:	e060      	b.n	801da96 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801d9d4:	2001      	movs	r0, #1
 801d9d6:	f7fe fc45 	bl	801c264 <memp_malloc>
 801d9da:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801d9dc:	69fb      	ldr	r3, [r7, #28]
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d102      	bne.n	801d9e8 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 801d9e2:	23ff      	movs	r3, #255	; 0xff
 801d9e4:	76fb      	strb	r3, [r7, #27]
    goto done;
 801d9e6:	e056      	b.n	801da96 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	691a      	ldr	r2, [r3, #16]
 801d9ec:	69fb      	ldr	r3, [r7, #28]
 801d9ee:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	8ada      	ldrh	r2, [r3, #22]
 801d9f4:	69fb      	ldr	r3, [r7, #28]
 801d9f6:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801d9f8:	69fb      	ldr	r3, [r7, #28]
 801d9fa:	2201      	movs	r2, #1
 801d9fc:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	7d5a      	ldrb	r2, [r3, #21]
 801da02:	69fb      	ldr	r3, [r7, #28]
 801da04:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801da06:	68fb      	ldr	r3, [r7, #12]
 801da08:	7a1a      	ldrb	r2, [r3, #8]
 801da0a:	69fb      	ldr	r3, [r7, #28]
 801da0c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801da0e:	68fb      	ldr	r3, [r7, #12]
 801da10:	7a9a      	ldrb	r2, [r3, #10]
 801da12:	69fb      	ldr	r3, [r7, #28]
 801da14:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 801da16:	68fb      	ldr	r3, [r7, #12]
 801da18:	7a5a      	ldrb	r2, [r3, #9]
 801da1a:	69fb      	ldr	r3, [r7, #28]
 801da1c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801da1e:	68fb      	ldr	r3, [r7, #12]
 801da20:	681a      	ldr	r2, [r3, #0]
 801da22:	69fb      	ldr	r3, [r7, #28]
 801da24:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801da26:	68fb      	ldr	r3, [r7, #12]
 801da28:	8adb      	ldrh	r3, [r3, #22]
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	d021      	beq.n	801da72 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801da2e:	4b22      	ldr	r3, [pc, #136]	; (801dab8 <tcp_listen_with_backlog_and_err+0x124>)
 801da30:	681a      	ldr	r2, [r3, #0]
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	429a      	cmp	r2, r3
 801da36:	d105      	bne.n	801da44 <tcp_listen_with_backlog_and_err+0xb0>
 801da38:	4b1f      	ldr	r3, [pc, #124]	; (801dab8 <tcp_listen_with_backlog_and_err+0x124>)
 801da3a:	681b      	ldr	r3, [r3, #0]
 801da3c:	68db      	ldr	r3, [r3, #12]
 801da3e:	4a1e      	ldr	r2, [pc, #120]	; (801dab8 <tcp_listen_with_backlog_and_err+0x124>)
 801da40:	6013      	str	r3, [r2, #0]
 801da42:	e013      	b.n	801da6c <tcp_listen_with_backlog_and_err+0xd8>
 801da44:	4b1c      	ldr	r3, [pc, #112]	; (801dab8 <tcp_listen_with_backlog_and_err+0x124>)
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	617b      	str	r3, [r7, #20]
 801da4a:	e00c      	b.n	801da66 <tcp_listen_with_backlog_and_err+0xd2>
 801da4c:	697b      	ldr	r3, [r7, #20]
 801da4e:	68da      	ldr	r2, [r3, #12]
 801da50:	68fb      	ldr	r3, [r7, #12]
 801da52:	429a      	cmp	r2, r3
 801da54:	d104      	bne.n	801da60 <tcp_listen_with_backlog_and_err+0xcc>
 801da56:	68fb      	ldr	r3, [r7, #12]
 801da58:	68da      	ldr	r2, [r3, #12]
 801da5a:	697b      	ldr	r3, [r7, #20]
 801da5c:	60da      	str	r2, [r3, #12]
 801da5e:	e005      	b.n	801da6c <tcp_listen_with_backlog_and_err+0xd8>
 801da60:	697b      	ldr	r3, [r7, #20]
 801da62:	68db      	ldr	r3, [r3, #12]
 801da64:	617b      	str	r3, [r7, #20]
 801da66:	697b      	ldr	r3, [r7, #20]
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d1ef      	bne.n	801da4c <tcp_listen_with_backlog_and_err+0xb8>
 801da6c:	68fb      	ldr	r3, [r7, #12]
 801da6e:	2200      	movs	r2, #0
 801da70:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 801da72:	68f9      	ldr	r1, [r7, #12]
 801da74:	2000      	movs	r0, #0
 801da76:	f7fe fc47 	bl	801c308 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801da7a:	69fb      	ldr	r3, [r7, #28]
 801da7c:	4a0f      	ldr	r2, [pc, #60]	; (801dabc <tcp_listen_with_backlog_and_err+0x128>)
 801da7e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801da80:	4b0f      	ldr	r3, [pc, #60]	; (801dac0 <tcp_listen_with_backlog_and_err+0x12c>)
 801da82:	681a      	ldr	r2, [r3, #0]
 801da84:	69fb      	ldr	r3, [r7, #28]
 801da86:	60da      	str	r2, [r3, #12]
 801da88:	4a0d      	ldr	r2, [pc, #52]	; (801dac0 <tcp_listen_with_backlog_and_err+0x12c>)
 801da8a:	69fb      	ldr	r3, [r7, #28]
 801da8c:	6013      	str	r3, [r2, #0]
 801da8e:	f004 fe17 	bl	80226c0 <tcp_timer_needed>
  res = ERR_OK;
 801da92:	2300      	movs	r3, #0
 801da94:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d002      	beq.n	801daa2 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	7efa      	ldrb	r2, [r7, #27]
 801daa0:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801daa2:	69fb      	ldr	r3, [r7, #28]
}
 801daa4:	4618      	mov	r0, r3
 801daa6:	3720      	adds	r7, #32
 801daa8:	46bd      	mov	sp, r7
 801daaa:	bd80      	pop	{r7, pc}
 801daac:	08028378 	.word	0x08028378
 801dab0:	0802846c 	.word	0x0802846c
 801dab4:	080283b4 	.word	0x080283b4
 801dab8:	2000ecd0 	.word	0x2000ecd0
 801dabc:	0801d975 	.word	0x0801d975
 801dac0:	2000eccc 	.word	0x2000eccc

0801dac4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801dac4:	b580      	push	{r7, lr}
 801dac6:	b084      	sub	sp, #16
 801dac8:	af00      	add	r7, sp, #0
 801daca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dad0:	687a      	ldr	r2, [r7, #4]
 801dad2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801dad4:	4413      	add	r3, r2
 801dad6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dadc:	687a      	ldr	r2, [r7, #4]
 801dade:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801dae0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801dae4:	d802      	bhi.n	801daec <tcp_update_rcv_ann_wnd+0x28>
 801dae6:	687a      	ldr	r2, [r7, #4]
 801dae8:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801daea:	e001      	b.n	801daf0 <tcp_update_rcv_ann_wnd+0x2c>
 801daec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801daf0:	4413      	add	r3, r2
 801daf2:	68fa      	ldr	r2, [r7, #12]
 801daf4:	1ad3      	subs	r3, r2, r3
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	db08      	blt.n	801db0c <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db06:	68fa      	ldr	r2, [r7, #12]
 801db08:	1ad3      	subs	r3, r2, r3
 801db0a:	e020      	b.n	801db4e <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db14:	1ad3      	subs	r3, r2, r3
 801db16:	2b00      	cmp	r3, #0
 801db18:	dd03      	ble.n	801db22 <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	2200      	movs	r2, #0
 801db1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 801db20:	e014      	b.n	801db4c <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db2a:	1ad3      	subs	r3, r2, r3
 801db2c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801db2e:	68bb      	ldr	r3, [r7, #8]
 801db30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801db34:	d306      	bcc.n	801db44 <tcp_update_rcv_ann_wnd+0x80>
 801db36:	4b08      	ldr	r3, [pc, #32]	; (801db58 <tcp_update_rcv_ann_wnd+0x94>)
 801db38:	f44f 7242 	mov.w	r2, #776	; 0x308
 801db3c:	4907      	ldr	r1, [pc, #28]	; (801db5c <tcp_update_rcv_ann_wnd+0x98>)
 801db3e:	4808      	ldr	r0, [pc, #32]	; (801db60 <tcp_update_rcv_ann_wnd+0x9c>)
 801db40:	f008 f9d2 	bl	8025ee8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801db44:	68bb      	ldr	r3, [r7, #8]
 801db46:	b29a      	uxth	r2, r3
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801db4c:	2300      	movs	r3, #0
  }
}
 801db4e:	4618      	mov	r0, r3
 801db50:	3710      	adds	r7, #16
 801db52:	46bd      	mov	sp, r7
 801db54:	bd80      	pop	{r7, pc}
 801db56:	bf00      	nop
 801db58:	08028378 	.word	0x08028378
 801db5c:	08028490 	.word	0x08028490
 801db60:	080283b4 	.word	0x080283b4

0801db64 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801db64:	b580      	push	{r7, lr}
 801db66:	b084      	sub	sp, #16
 801db68:	af00      	add	r7, sp, #0
 801db6a:	6078      	str	r0, [r7, #4]
 801db6c:	460b      	mov	r3, r1
 801db6e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	7d1b      	ldrb	r3, [r3, #20]
 801db74:	2b01      	cmp	r3, #1
 801db76:	d106      	bne.n	801db86 <tcp_recved+0x22>
 801db78:	4b23      	ldr	r3, [pc, #140]	; (801dc08 <tcp_recved+0xa4>)
 801db7a:	f44f 7248 	mov.w	r2, #800	; 0x320
 801db7e:	4923      	ldr	r1, [pc, #140]	; (801dc0c <tcp_recved+0xa8>)
 801db80:	4823      	ldr	r0, [pc, #140]	; (801dc10 <tcp_recved+0xac>)
 801db82:	f008 f9b1 	bl	8025ee8 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801db8a:	887b      	ldrh	r3, [r7, #2]
 801db8c:	4413      	add	r3, r2
 801db8e:	b29a      	uxth	r2, r3
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801db98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801db9c:	d904      	bls.n	801dba8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801dba4:	851a      	strh	r2, [r3, #40]	; 0x28
 801dba6:	e017      	b.n	801dbd8 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	d113      	bne.n	801dbd8 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	7d1b      	ldrb	r3, [r3, #20]
 801dbb4:	2b07      	cmp	r3, #7
 801dbb6:	d003      	beq.n	801dbc0 <tcp_recved+0x5c>
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	7d1b      	ldrb	r3, [r3, #20]
 801dbbc:	2b09      	cmp	r3, #9
 801dbbe:	d104      	bne.n	801dbca <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801dbc6:	851a      	strh	r2, [r3, #40]	; 0x28
 801dbc8:	e006      	b.n	801dbd8 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 801dbca:	4b0f      	ldr	r3, [pc, #60]	; (801dc08 <tcp_recved+0xa4>)
 801dbcc:	f240 322d 	movw	r2, #813	; 0x32d
 801dbd0:	4910      	ldr	r1, [pc, #64]	; (801dc14 <tcp_recved+0xb0>)
 801dbd2:	480f      	ldr	r0, [pc, #60]	; (801dc10 <tcp_recved+0xac>)
 801dbd4:	f008 f988 	bl	8025ee8 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801dbd8:	6878      	ldr	r0, [r7, #4]
 801dbda:	f7ff ff73 	bl	801dac4 <tcp_update_rcv_ann_wnd>
 801dbde:	4603      	mov	r3, r0
 801dbe0:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dbe8:	db09      	blt.n	801dbfe <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	7e9b      	ldrb	r3, [r3, #26]
 801dbee:	f043 0302 	orr.w	r3, r3, #2
 801dbf2:	b2da      	uxtb	r2, r3
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801dbf8:	6878      	ldr	r0, [r7, #4]
 801dbfa:	f004 f88b 	bl	8021d14 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801dbfe:	bf00      	nop
 801dc00:	3710      	adds	r7, #16
 801dc02:	46bd      	mov	sp, r7
 801dc04:	bd80      	pop	{r7, pc}
 801dc06:	bf00      	nop
 801dc08:	08028378 	.word	0x08028378
 801dc0c:	080284ac 	.word	0x080284ac
 801dc10:	080283b4 	.word	0x080283b4
 801dc14:	080284d4 	.word	0x080284d4

0801dc18 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801dc18:	b480      	push	{r7}
 801dc1a:	b083      	sub	sp, #12
 801dc1c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801dc1e:	2300      	movs	r3, #0
 801dc20:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801dc22:	4b1d      	ldr	r3, [pc, #116]	; (801dc98 <tcp_new_port+0x80>)
 801dc24:	881b      	ldrh	r3, [r3, #0]
 801dc26:	1c5a      	adds	r2, r3, #1
 801dc28:	b291      	uxth	r1, r2
 801dc2a:	4a1b      	ldr	r2, [pc, #108]	; (801dc98 <tcp_new_port+0x80>)
 801dc2c:	8011      	strh	r1, [r2, #0]
 801dc2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dc32:	4293      	cmp	r3, r2
 801dc34:	d103      	bne.n	801dc3e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801dc36:	4b18      	ldr	r3, [pc, #96]	; (801dc98 <tcp_new_port+0x80>)
 801dc38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801dc3c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801dc3e:	2300      	movs	r3, #0
 801dc40:	71fb      	strb	r3, [r7, #7]
 801dc42:	e01e      	b.n	801dc82 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801dc44:	79fb      	ldrb	r3, [r7, #7]
 801dc46:	4a15      	ldr	r2, [pc, #84]	; (801dc9c <tcp_new_port+0x84>)
 801dc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dc4c:	681b      	ldr	r3, [r3, #0]
 801dc4e:	603b      	str	r3, [r7, #0]
 801dc50:	e011      	b.n	801dc76 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 801dc52:	683b      	ldr	r3, [r7, #0]
 801dc54:	8ada      	ldrh	r2, [r3, #22]
 801dc56:	4b10      	ldr	r3, [pc, #64]	; (801dc98 <tcp_new_port+0x80>)
 801dc58:	881b      	ldrh	r3, [r3, #0]
 801dc5a:	429a      	cmp	r2, r3
 801dc5c:	d108      	bne.n	801dc70 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801dc5e:	88bb      	ldrh	r3, [r7, #4]
 801dc60:	3301      	adds	r3, #1
 801dc62:	80bb      	strh	r3, [r7, #4]
 801dc64:	88bb      	ldrh	r3, [r7, #4]
 801dc66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dc6a:	d3da      	bcc.n	801dc22 <tcp_new_port+0xa>
          return 0;
 801dc6c:	2300      	movs	r3, #0
 801dc6e:	e00d      	b.n	801dc8c <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801dc70:	683b      	ldr	r3, [r7, #0]
 801dc72:	68db      	ldr	r3, [r3, #12]
 801dc74:	603b      	str	r3, [r7, #0]
 801dc76:	683b      	ldr	r3, [r7, #0]
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d1ea      	bne.n	801dc52 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801dc7c:	79fb      	ldrb	r3, [r7, #7]
 801dc7e:	3301      	adds	r3, #1
 801dc80:	71fb      	strb	r3, [r7, #7]
 801dc82:	79fb      	ldrb	r3, [r7, #7]
 801dc84:	2b03      	cmp	r3, #3
 801dc86:	d9dd      	bls.n	801dc44 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801dc88:	4b03      	ldr	r3, [pc, #12]	; (801dc98 <tcp_new_port+0x80>)
 801dc8a:	881b      	ldrh	r3, [r3, #0]
}
 801dc8c:	4618      	mov	r0, r3
 801dc8e:	370c      	adds	r7, #12
 801dc90:	46bd      	mov	sp, r7
 801dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc96:	4770      	bx	lr
 801dc98:	20000008 	.word	0x20000008
 801dc9c:	0802b6c4 	.word	0x0802b6c4

0801dca0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801dca0:	b5b0      	push	{r4, r5, r7, lr}
 801dca2:	b08c      	sub	sp, #48	; 0x30
 801dca4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801dca6:	2300      	movs	r3, #0
 801dca8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 801dcaa:	4b97      	ldr	r3, [pc, #604]	; (801df08 <tcp_slowtmr+0x268>)
 801dcac:	681b      	ldr	r3, [r3, #0]
 801dcae:	3301      	adds	r3, #1
 801dcb0:	4a95      	ldr	r2, [pc, #596]	; (801df08 <tcp_slowtmr+0x268>)
 801dcb2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801dcb4:	4b95      	ldr	r3, [pc, #596]	; (801df0c <tcp_slowtmr+0x26c>)
 801dcb6:	781b      	ldrb	r3, [r3, #0]
 801dcb8:	3301      	adds	r3, #1
 801dcba:	b2da      	uxtb	r2, r3
 801dcbc:	4b93      	ldr	r3, [pc, #588]	; (801df0c <tcp_slowtmr+0x26c>)
 801dcbe:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 801dcc4:	4b92      	ldr	r3, [pc, #584]	; (801df10 <tcp_slowtmr+0x270>)
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801dcca:	e227      	b.n	801e11c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcce:	7d1b      	ldrb	r3, [r3, #20]
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d106      	bne.n	801dce2 <tcp_slowtmr+0x42>
 801dcd4:	4b8f      	ldr	r3, [pc, #572]	; (801df14 <tcp_slowtmr+0x274>)
 801dcd6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 801dcda:	498f      	ldr	r1, [pc, #572]	; (801df18 <tcp_slowtmr+0x278>)
 801dcdc:	488f      	ldr	r0, [pc, #572]	; (801df1c <tcp_slowtmr+0x27c>)
 801dcde:	f008 f903 	bl	8025ee8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801dce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dce4:	7d1b      	ldrb	r3, [r3, #20]
 801dce6:	2b01      	cmp	r3, #1
 801dce8:	d106      	bne.n	801dcf8 <tcp_slowtmr+0x58>
 801dcea:	4b8a      	ldr	r3, [pc, #552]	; (801df14 <tcp_slowtmr+0x274>)
 801dcec:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801dcf0:	498b      	ldr	r1, [pc, #556]	; (801df20 <tcp_slowtmr+0x280>)
 801dcf2:	488a      	ldr	r0, [pc, #552]	; (801df1c <tcp_slowtmr+0x27c>)
 801dcf4:	f008 f8f8 	bl	8025ee8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcfa:	7d1b      	ldrb	r3, [r3, #20]
 801dcfc:	2b0a      	cmp	r3, #10
 801dcfe:	d106      	bne.n	801dd0e <tcp_slowtmr+0x6e>
 801dd00:	4b84      	ldr	r3, [pc, #528]	; (801df14 <tcp_slowtmr+0x274>)
 801dd02:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801dd06:	4987      	ldr	r1, [pc, #540]	; (801df24 <tcp_slowtmr+0x284>)
 801dd08:	4884      	ldr	r0, [pc, #528]	; (801df1c <tcp_slowtmr+0x27c>)
 801dd0a:	f008 f8ed 	bl	8025ee8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd10:	7f5a      	ldrb	r2, [r3, #29]
 801dd12:	4b7e      	ldr	r3, [pc, #504]	; (801df0c <tcp_slowtmr+0x26c>)
 801dd14:	781b      	ldrb	r3, [r3, #0]
 801dd16:	429a      	cmp	r2, r3
 801dd18:	d103      	bne.n	801dd22 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 801dd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd1c:	68db      	ldr	r3, [r3, #12]
 801dd1e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 801dd20:	e1fc      	b.n	801e11c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801dd22:	4b7a      	ldr	r3, [pc, #488]	; (801df0c <tcp_slowtmr+0x26c>)
 801dd24:	781a      	ldrb	r2, [r3, #0]
 801dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd28:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 801dd2e:	2300      	movs	r3, #0
 801dd30:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801dd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd34:	7d1b      	ldrb	r3, [r3, #20]
 801dd36:	2b02      	cmp	r3, #2
 801dd38:	d108      	bne.n	801dd4c <tcp_slowtmr+0xac>
 801dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dd40:	2b05      	cmp	r3, #5
 801dd42:	d903      	bls.n	801dd4c <tcp_slowtmr+0xac>
      ++pcb_remove;
 801dd44:	7ffb      	ldrb	r3, [r7, #31]
 801dd46:	3301      	adds	r3, #1
 801dd48:	77fb      	strb	r3, [r7, #31]
 801dd4a:	e0a2      	b.n	801de92 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 801dd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dd52:	2b0b      	cmp	r3, #11
 801dd54:	d903      	bls.n	801dd5e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801dd56:	7ffb      	ldrb	r3, [r7, #31]
 801dd58:	3301      	adds	r3, #1
 801dd5a:	77fb      	strb	r3, [r7, #31]
 801dd5c:	e099      	b.n	801de92 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd60:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d032      	beq.n	801ddce <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 801dd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd6a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801dd6e:	3b01      	subs	r3, #1
 801dd70:	4a6d      	ldr	r2, [pc, #436]	; (801df28 <tcp_slowtmr+0x288>)
 801dd72:	5cd3      	ldrb	r3, [r2, r3]
 801dd74:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 801dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd78:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801dd7c:	7f3a      	ldrb	r2, [r7, #28]
 801dd7e:	429a      	cmp	r2, r3
 801dd80:	d907      	bls.n	801dd92 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 801dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd84:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801dd88:	3301      	adds	r3, #1
 801dd8a:	b2da      	uxtb	r2, r3
 801dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd8e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 801dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd94:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801dd98:	7f3a      	ldrb	r2, [r7, #28]
 801dd9a:	429a      	cmp	r2, r3
 801dd9c:	d879      	bhi.n	801de92 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 801dd9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dda0:	f004 fbce 	bl	8022540 <tcp_zero_window_probe>
 801dda4:	4603      	mov	r3, r0
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d173      	bne.n	801de92 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 801ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddac:	2200      	movs	r2, #0
 801ddae:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801ddb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddb4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801ddb8:	2b06      	cmp	r3, #6
 801ddba:	d86a      	bhi.n	801de92 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 801ddbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddbe:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801ddc2:	3301      	adds	r3, #1
 801ddc4:	b2da      	uxtb	r2, r3
 801ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddc8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 801ddcc:	e061      	b.n	801de92 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 801ddce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddd0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	db08      	blt.n	801ddea <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 801ddd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ddde:	b29b      	uxth	r3, r3
 801dde0:	3301      	adds	r3, #1
 801dde2:	b29b      	uxth	r3, r3
 801dde4:	b21a      	sxth	r2, r3
 801dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dde8:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 801ddea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	d04f      	beq.n	801de92 <tcp_slowtmr+0x1f2>
 801ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddf4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801ddfe:	429a      	cmp	r2, r3
 801de00:	db47      	blt.n	801de92 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de04:	7d1b      	ldrb	r3, [r3, #20]
 801de06:	2b02      	cmp	r3, #2
 801de08:	d018      	beq.n	801de3c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 801de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801de10:	2b0c      	cmp	r3, #12
 801de12:	bf28      	it	cs
 801de14:	230c      	movcs	r3, #12
 801de16:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801de18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801de1e:	10db      	asrs	r3, r3, #3
 801de20:	b21b      	sxth	r3, r3
 801de22:	461a      	mov	r2, r3
 801de24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801de2a:	4413      	add	r3, r2
 801de2c:	7efa      	ldrb	r2, [r7, #27]
 801de2e:	493f      	ldr	r1, [pc, #252]	; (801df2c <tcp_slowtmr+0x28c>)
 801de30:	5c8a      	ldrb	r2, [r1, r2]
 801de32:	4093      	lsls	r3, r2
 801de34:	b21a      	sxth	r2, r3
 801de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 801de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de3e:	2200      	movs	r2, #0
 801de40:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801de42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de44:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801de4e:	4293      	cmp	r3, r2
 801de50:	bf28      	it	cs
 801de52:	4613      	movcs	r3, r2
 801de54:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 801de56:	8b3b      	ldrh	r3, [r7, #24]
 801de58:	085b      	lsrs	r3, r3, #1
 801de5a:	b29a      	uxth	r2, r3
 801de5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de5e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801de62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de64:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801de6c:	005b      	lsls	r3, r3, #1
 801de6e:	b29b      	uxth	r3, r3
 801de70:	429a      	cmp	r2, r3
 801de72:	d206      	bcs.n	801de82 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 801de74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801de78:	005b      	lsls	r3, r3, #1
 801de7a:	b29a      	uxth	r2, r3
 801de7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de7e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 801de82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de84:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 801de8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de8e:	f004 fa3d 	bl	802230c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801de92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de94:	7d1b      	ldrb	r3, [r3, #20]
 801de96:	2b06      	cmp	r3, #6
 801de98:	d10f      	bne.n	801deba <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de9c:	7e9b      	ldrb	r3, [r3, #26]
 801de9e:	f003 0310 	and.w	r3, r3, #16
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d009      	beq.n	801deba <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dea6:	4b18      	ldr	r3, [pc, #96]	; (801df08 <tcp_slowtmr+0x268>)
 801dea8:	681a      	ldr	r2, [r3, #0]
 801deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deac:	6a1b      	ldr	r3, [r3, #32]
 801deae:	1ad3      	subs	r3, r2, r3
 801deb0:	2b28      	cmp	r3, #40	; 0x28
 801deb2:	d902      	bls.n	801deba <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801deb4:	7ffb      	ldrb	r3, [r7, #31]
 801deb6:	3301      	adds	r3, #1
 801deb8:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801deba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801debc:	7a1b      	ldrb	r3, [r3, #8]
 801debe:	f003 0308 	and.w	r3, r3, #8
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	d05d      	beq.n	801df82 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 801dec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dec8:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801deca:	2b04      	cmp	r3, #4
 801decc:	d003      	beq.n	801ded6 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 801dece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ded0:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 801ded2:	2b07      	cmp	r3, #7
 801ded4:	d155      	bne.n	801df82 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ded6:	4b0c      	ldr	r3, [pc, #48]	; (801df08 <tcp_slowtmr+0x268>)
 801ded8:	681a      	ldr	r2, [r3, #0]
 801deda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dedc:	6a1b      	ldr	r3, [r3, #32]
 801dede:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 801dee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dee6:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801deea:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801deee:	4910      	ldr	r1, [pc, #64]	; (801df30 <tcp_slowtmr+0x290>)
 801def0:	fba1 1303 	umull	r1, r3, r1, r3
 801def4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801def6:	429a      	cmp	r2, r3
 801def8:	d91c      	bls.n	801df34 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801defa:	7ffb      	ldrb	r3, [r7, #31]
 801defc:	3301      	adds	r3, #1
 801defe:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 801df00:	7fbb      	ldrb	r3, [r7, #30]
 801df02:	3301      	adds	r3, #1
 801df04:	77bb      	strb	r3, [r7, #30]
 801df06:	e03c      	b.n	801df82 <tcp_slowtmr+0x2e2>
 801df08:	2000ecc8 	.word	0x2000ecc8
 801df0c:	200094ea 	.word	0x200094ea
 801df10:	2000ecc4 	.word	0x2000ecc4
 801df14:	08028378 	.word	0x08028378
 801df18:	08028528 	.word	0x08028528
 801df1c:	080283b4 	.word	0x080283b4
 801df20:	08028554 	.word	0x08028554
 801df24:	08028580 	.word	0x08028580
 801df28:	0802b6bc 	.word	0x0802b6bc
 801df2c:	0802b6ac 	.word	0x0802b6ac
 801df30:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801df34:	4b97      	ldr	r3, [pc, #604]	; (801e194 <tcp_slowtmr+0x4f4>)
 801df36:	681a      	ldr	r2, [r3, #0]
 801df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df3a:	6a1b      	ldr	r3, [r3, #32]
 801df3c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df40:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df46:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801df4a:	4618      	mov	r0, r3
 801df4c:	4b92      	ldr	r3, [pc, #584]	; (801e198 <tcp_slowtmr+0x4f8>)
 801df4e:	fb03 f300 	mul.w	r3, r3, r0
 801df52:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 801df54:	4991      	ldr	r1, [pc, #580]	; (801e19c <tcp_slowtmr+0x4fc>)
 801df56:	fba1 1303 	umull	r1, r3, r1, r3
 801df5a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801df5c:	429a      	cmp	r2, r3
 801df5e:	d910      	bls.n	801df82 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 801df60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801df62:	f004 fab0 	bl	80224c6 <tcp_keepalive>
 801df66:	4603      	mov	r3, r0
 801df68:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 801df6a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801df6e:	2b00      	cmp	r3, #0
 801df70:	d107      	bne.n	801df82 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 801df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df74:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801df78:	3301      	adds	r3, #1
 801df7a:	b2da      	uxtb	r2, r3
 801df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df7e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df86:	2b00      	cmp	r3, #0
 801df88:	d016      	beq.n	801dfb8 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 801df8a:	4b82      	ldr	r3, [pc, #520]	; (801e194 <tcp_slowtmr+0x4f4>)
 801df8c:	681a      	ldr	r2, [r3, #0]
 801df8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df90:	6a1b      	ldr	r3, [r3, #32]
 801df92:	1ad2      	subs	r2, r2, r3
 801df94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df96:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801df9a:	4619      	mov	r1, r3
 801df9c:	460b      	mov	r3, r1
 801df9e:	005b      	lsls	r3, r3, #1
 801dfa0:	440b      	add	r3, r1
 801dfa2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801dfa4:	429a      	cmp	r2, r3
 801dfa6:	d307      	bcc.n	801dfb8 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 801dfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dfac:	4618      	mov	r0, r3
 801dfae:	f000 fa04 	bl	801e3ba <tcp_segs_free>
      pcb->ooseq = NULL;
 801dfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfb4:	2200      	movs	r2, #0
 801dfb6:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801dfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfba:	7d1b      	ldrb	r3, [r3, #20]
 801dfbc:	2b03      	cmp	r3, #3
 801dfbe:	d109      	bne.n	801dfd4 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801dfc0:	4b74      	ldr	r3, [pc, #464]	; (801e194 <tcp_slowtmr+0x4f4>)
 801dfc2:	681a      	ldr	r2, [r3, #0]
 801dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfc6:	6a1b      	ldr	r3, [r3, #32]
 801dfc8:	1ad3      	subs	r3, r2, r3
 801dfca:	2b28      	cmp	r3, #40	; 0x28
 801dfcc:	d902      	bls.n	801dfd4 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801dfce:	7ffb      	ldrb	r3, [r7, #31]
 801dfd0:	3301      	adds	r3, #1
 801dfd2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801dfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfd6:	7d1b      	ldrb	r3, [r3, #20]
 801dfd8:	2b09      	cmp	r3, #9
 801dfda:	d109      	bne.n	801dff0 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801dfdc:	4b6d      	ldr	r3, [pc, #436]	; (801e194 <tcp_slowtmr+0x4f4>)
 801dfde:	681a      	ldr	r2, [r3, #0]
 801dfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfe2:	6a1b      	ldr	r3, [r3, #32]
 801dfe4:	1ad3      	subs	r3, r2, r3
 801dfe6:	2bf0      	cmp	r3, #240	; 0xf0
 801dfe8:	d902      	bls.n	801dff0 <tcp_slowtmr+0x350>
        ++pcb_remove;
 801dfea:	7ffb      	ldrb	r3, [r7, #31]
 801dfec:	3301      	adds	r3, #1
 801dfee:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801dff0:	7ffb      	ldrb	r3, [r7, #31]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d05d      	beq.n	801e0b2 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dffc:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801dffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e000:	f000 fc44 	bl	801e88c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801e004:	6a3b      	ldr	r3, [r7, #32]
 801e006:	2b00      	cmp	r3, #0
 801e008:	d010      	beq.n	801e02c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801e00a:	4b65      	ldr	r3, [pc, #404]	; (801e1a0 <tcp_slowtmr+0x500>)
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e010:	429a      	cmp	r2, r3
 801e012:	d106      	bne.n	801e022 <tcp_slowtmr+0x382>
 801e014:	4b63      	ldr	r3, [pc, #396]	; (801e1a4 <tcp_slowtmr+0x504>)
 801e016:	f240 4289 	movw	r2, #1161	; 0x489
 801e01a:	4963      	ldr	r1, [pc, #396]	; (801e1a8 <tcp_slowtmr+0x508>)
 801e01c:	4863      	ldr	r0, [pc, #396]	; (801e1ac <tcp_slowtmr+0x50c>)
 801e01e:	f007 ff63 	bl	8025ee8 <iprintf>
        prev->next = pcb->next;
 801e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e024:	68da      	ldr	r2, [r3, #12]
 801e026:	6a3b      	ldr	r3, [r7, #32]
 801e028:	60da      	str	r2, [r3, #12]
 801e02a:	e00f      	b.n	801e04c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801e02c:	4b5c      	ldr	r3, [pc, #368]	; (801e1a0 <tcp_slowtmr+0x500>)
 801e02e:	681a      	ldr	r2, [r3, #0]
 801e030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e032:	429a      	cmp	r2, r3
 801e034:	d006      	beq.n	801e044 <tcp_slowtmr+0x3a4>
 801e036:	4b5b      	ldr	r3, [pc, #364]	; (801e1a4 <tcp_slowtmr+0x504>)
 801e038:	f240 428d 	movw	r2, #1165	; 0x48d
 801e03c:	495c      	ldr	r1, [pc, #368]	; (801e1b0 <tcp_slowtmr+0x510>)
 801e03e:	485b      	ldr	r0, [pc, #364]	; (801e1ac <tcp_slowtmr+0x50c>)
 801e040:	f007 ff52 	bl	8025ee8 <iprintf>
        tcp_active_pcbs = pcb->next;
 801e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e046:	68db      	ldr	r3, [r3, #12]
 801e048:	4a55      	ldr	r2, [pc, #340]	; (801e1a0 <tcp_slowtmr+0x500>)
 801e04a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801e04c:	7fbb      	ldrb	r3, [r7, #30]
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d010      	beq.n	801e074 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801e052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e054:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e058:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801e05a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801e05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e05e:	1d1d      	adds	r5, r3, #4
 801e060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e062:	8adb      	ldrh	r3, [r3, #22]
 801e064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e066:	8b12      	ldrh	r2, [r2, #24]
 801e068:	9201      	str	r2, [sp, #4]
 801e06a:	9300      	str	r3, [sp, #0]
 801e06c:	462b      	mov	r3, r5
 801e06e:	4622      	mov	r2, r4
 801e070:	f004 f8d8 	bl	8022224 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e076:	691b      	ldr	r3, [r3, #16]
 801e078:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 801e07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e07c:	7d1b      	ldrb	r3, [r3, #20]
 801e07e:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 801e080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e082:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 801e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e086:	68db      	ldr	r3, [r3, #12]
 801e088:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801e08a:	68b9      	ldr	r1, [r7, #8]
 801e08c:	2000      	movs	r0, #0
 801e08e:	f7fe f93b 	bl	801c308 <memp_free>

      tcp_active_pcbs_changed = 0;
 801e092:	4b48      	ldr	r3, [pc, #288]	; (801e1b4 <tcp_slowtmr+0x514>)
 801e094:	2200      	movs	r2, #0
 801e096:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801e098:	697b      	ldr	r3, [r7, #20]
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	d004      	beq.n	801e0a8 <tcp_slowtmr+0x408>
 801e09e:	697b      	ldr	r3, [r7, #20]
 801e0a0:	f06f 010c 	mvn.w	r1, #12
 801e0a4:	6938      	ldr	r0, [r7, #16]
 801e0a6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801e0a8:	4b42      	ldr	r3, [pc, #264]	; (801e1b4 <tcp_slowtmr+0x514>)
 801e0aa:	781b      	ldrb	r3, [r3, #0]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d035      	beq.n	801e11c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 801e0b0:	e606      	b.n	801dcc0 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801e0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0b4:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801e0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0b8:	68db      	ldr	r3, [r3, #12]
 801e0ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801e0bc:	6a3b      	ldr	r3, [r7, #32]
 801e0be:	7edb      	ldrb	r3, [r3, #27]
 801e0c0:	3301      	adds	r3, #1
 801e0c2:	b2da      	uxtb	r2, r3
 801e0c4:	6a3b      	ldr	r3, [r7, #32]
 801e0c6:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 801e0c8:	6a3b      	ldr	r3, [r7, #32]
 801e0ca:	7eda      	ldrb	r2, [r3, #27]
 801e0cc:	6a3b      	ldr	r3, [r7, #32]
 801e0ce:	7f1b      	ldrb	r3, [r3, #28]
 801e0d0:	429a      	cmp	r2, r3
 801e0d2:	d323      	bcc.n	801e11c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 801e0d4:	6a3b      	ldr	r3, [r7, #32]
 801e0d6:	2200      	movs	r2, #0
 801e0d8:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801e0da:	4b36      	ldr	r3, [pc, #216]	; (801e1b4 <tcp_slowtmr+0x514>)
 801e0dc:	2200      	movs	r2, #0
 801e0de:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801e0e0:	6a3b      	ldr	r3, [r7, #32]
 801e0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d00a      	beq.n	801e100 <tcp_slowtmr+0x460>
 801e0ea:	6a3b      	ldr	r3, [r7, #32]
 801e0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e0f0:	6a3a      	ldr	r2, [r7, #32]
 801e0f2:	6912      	ldr	r2, [r2, #16]
 801e0f4:	6a39      	ldr	r1, [r7, #32]
 801e0f6:	4610      	mov	r0, r2
 801e0f8:	4798      	blx	r3
 801e0fa:	4603      	mov	r3, r0
 801e0fc:	777b      	strb	r3, [r7, #29]
 801e0fe:	e001      	b.n	801e104 <tcp_slowtmr+0x464>
 801e100:	2300      	movs	r3, #0
 801e102:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 801e104:	4b2b      	ldr	r3, [pc, #172]	; (801e1b4 <tcp_slowtmr+0x514>)
 801e106:	781b      	ldrb	r3, [r3, #0]
 801e108:	2b00      	cmp	r3, #0
 801e10a:	d000      	beq.n	801e10e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 801e10c:	e5d8      	b.n	801dcc0 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801e10e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801e112:	2b00      	cmp	r3, #0
 801e114:	d102      	bne.n	801e11c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 801e116:	6a38      	ldr	r0, [r7, #32]
 801e118:	f003 fdfc 	bl	8021d14 <tcp_output>
  while (pcb != NULL) {
 801e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e11e:	2b00      	cmp	r3, #0
 801e120:	f47f add4 	bne.w	801dccc <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801e124:	2300      	movs	r3, #0
 801e126:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 801e128:	4b23      	ldr	r3, [pc, #140]	; (801e1b8 <tcp_slowtmr+0x518>)
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801e12e:	e068      	b.n	801e202 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801e130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e132:	7d1b      	ldrb	r3, [r3, #20]
 801e134:	2b0a      	cmp	r3, #10
 801e136:	d006      	beq.n	801e146 <tcp_slowtmr+0x4a6>
 801e138:	4b1a      	ldr	r3, [pc, #104]	; (801e1a4 <tcp_slowtmr+0x504>)
 801e13a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801e13e:	491f      	ldr	r1, [pc, #124]	; (801e1bc <tcp_slowtmr+0x51c>)
 801e140:	481a      	ldr	r0, [pc, #104]	; (801e1ac <tcp_slowtmr+0x50c>)
 801e142:	f007 fed1 	bl	8025ee8 <iprintf>
    pcb_remove = 0;
 801e146:	2300      	movs	r3, #0
 801e148:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801e14a:	4b12      	ldr	r3, [pc, #72]	; (801e194 <tcp_slowtmr+0x4f4>)
 801e14c:	681a      	ldr	r2, [r3, #0]
 801e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e150:	6a1b      	ldr	r3, [r3, #32]
 801e152:	1ad3      	subs	r3, r2, r3
 801e154:	2bf0      	cmp	r3, #240	; 0xf0
 801e156:	d902      	bls.n	801e15e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 801e158:	7ffb      	ldrb	r3, [r7, #31]
 801e15a:	3301      	adds	r3, #1
 801e15c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801e15e:	7ffb      	ldrb	r3, [r7, #31]
 801e160:	2b00      	cmp	r3, #0
 801e162:	d049      	beq.n	801e1f8 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801e164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e166:	f000 fb91 	bl	801e88c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801e16a:	6a3b      	ldr	r3, [r7, #32]
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	d029      	beq.n	801e1c4 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801e170:	4b11      	ldr	r3, [pc, #68]	; (801e1b8 <tcp_slowtmr+0x518>)
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e176:	429a      	cmp	r2, r3
 801e178:	d106      	bne.n	801e188 <tcp_slowtmr+0x4e8>
 801e17a:	4b0a      	ldr	r3, [pc, #40]	; (801e1a4 <tcp_slowtmr+0x504>)
 801e17c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 801e180:	490f      	ldr	r1, [pc, #60]	; (801e1c0 <tcp_slowtmr+0x520>)
 801e182:	480a      	ldr	r0, [pc, #40]	; (801e1ac <tcp_slowtmr+0x50c>)
 801e184:	f007 feb0 	bl	8025ee8 <iprintf>
        prev->next = pcb->next;
 801e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e18a:	68da      	ldr	r2, [r3, #12]
 801e18c:	6a3b      	ldr	r3, [r7, #32]
 801e18e:	60da      	str	r2, [r3, #12]
 801e190:	e028      	b.n	801e1e4 <tcp_slowtmr+0x544>
 801e192:	bf00      	nop
 801e194:	2000ecc8 	.word	0x2000ecc8
 801e198:	000124f8 	.word	0x000124f8
 801e19c:	10624dd3 	.word	0x10624dd3
 801e1a0:	2000ecc4 	.word	0x2000ecc4
 801e1a4:	08028378 	.word	0x08028378
 801e1a8:	080285b0 	.word	0x080285b0
 801e1ac:	080283b4 	.word	0x080283b4
 801e1b0:	080285dc 	.word	0x080285dc
 801e1b4:	2000ecc0 	.word	0x2000ecc0
 801e1b8:	2000ecd4 	.word	0x2000ecd4
 801e1bc:	08028608 	.word	0x08028608
 801e1c0:	08028638 	.word	0x08028638
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801e1c4:	4b12      	ldr	r3, [pc, #72]	; (801e210 <tcp_slowtmr+0x570>)
 801e1c6:	681a      	ldr	r2, [r3, #0]
 801e1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1ca:	429a      	cmp	r2, r3
 801e1cc:	d006      	beq.n	801e1dc <tcp_slowtmr+0x53c>
 801e1ce:	4b11      	ldr	r3, [pc, #68]	; (801e214 <tcp_slowtmr+0x574>)
 801e1d0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 801e1d4:	4910      	ldr	r1, [pc, #64]	; (801e218 <tcp_slowtmr+0x578>)
 801e1d6:	4811      	ldr	r0, [pc, #68]	; (801e21c <tcp_slowtmr+0x57c>)
 801e1d8:	f007 fe86 	bl	8025ee8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1de:	68db      	ldr	r3, [r3, #12]
 801e1e0:	4a0b      	ldr	r2, [pc, #44]	; (801e210 <tcp_slowtmr+0x570>)
 801e1e2:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1e6:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 801e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1ea:	68db      	ldr	r3, [r3, #12]
 801e1ec:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801e1ee:	6879      	ldr	r1, [r7, #4]
 801e1f0:	2000      	movs	r0, #0
 801e1f2:	f7fe f889 	bl	801c308 <memp_free>
 801e1f6:	e004      	b.n	801e202 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 801e1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1fa:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1fe:	68db      	ldr	r3, [r3, #12]
 801e200:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e204:	2b00      	cmp	r3, #0
 801e206:	d193      	bne.n	801e130 <tcp_slowtmr+0x490>
    }
  }
}
 801e208:	bf00      	nop
 801e20a:	3728      	adds	r7, #40	; 0x28
 801e20c:	46bd      	mov	sp, r7
 801e20e:	bdb0      	pop	{r4, r5, r7, pc}
 801e210:	2000ecd4 	.word	0x2000ecd4
 801e214:	08028378 	.word	0x08028378
 801e218:	08028660 	.word	0x08028660
 801e21c:	080283b4 	.word	0x080283b4

0801e220 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801e220:	b580      	push	{r7, lr}
 801e222:	b082      	sub	sp, #8
 801e224:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801e226:	4b2d      	ldr	r3, [pc, #180]	; (801e2dc <tcp_fasttmr+0xbc>)
 801e228:	781b      	ldrb	r3, [r3, #0]
 801e22a:	3301      	adds	r3, #1
 801e22c:	b2da      	uxtb	r2, r3
 801e22e:	4b2b      	ldr	r3, [pc, #172]	; (801e2dc <tcp_fasttmr+0xbc>)
 801e230:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801e232:	4b2b      	ldr	r3, [pc, #172]	; (801e2e0 <tcp_fasttmr+0xc0>)
 801e234:	681b      	ldr	r3, [r3, #0]
 801e236:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801e238:	e048      	b.n	801e2cc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	7f5a      	ldrb	r2, [r3, #29]
 801e23e:	4b27      	ldr	r3, [pc, #156]	; (801e2dc <tcp_fasttmr+0xbc>)
 801e240:	781b      	ldrb	r3, [r3, #0]
 801e242:	429a      	cmp	r2, r3
 801e244:	d03f      	beq.n	801e2c6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801e246:	4b25      	ldr	r3, [pc, #148]	; (801e2dc <tcp_fasttmr+0xbc>)
 801e248:	781a      	ldrb	r2, [r3, #0]
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	7e9b      	ldrb	r3, [r3, #26]
 801e252:	f003 0301 	and.w	r3, r3, #1
 801e256:	2b00      	cmp	r3, #0
 801e258:	d010      	beq.n	801e27c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	7e9b      	ldrb	r3, [r3, #26]
 801e25e:	f043 0302 	orr.w	r3, r3, #2
 801e262:	b2da      	uxtb	r2, r3
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 801e268:	6878      	ldr	r0, [r7, #4]
 801e26a:	f003 fd53 	bl	8021d14 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	7e9b      	ldrb	r3, [r3, #26]
 801e272:	f023 0303 	bic.w	r3, r3, #3
 801e276:	b2da      	uxtb	r2, r3
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	7e9b      	ldrb	r3, [r3, #26]
 801e280:	f003 0308 	and.w	r3, r3, #8
 801e284:	2b00      	cmp	r3, #0
 801e286:	d009      	beq.n	801e29c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	7e9b      	ldrb	r3, [r3, #26]
 801e28c:	f023 0308 	bic.w	r3, r3, #8
 801e290:	b2da      	uxtb	r2, r3
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801e296:	6878      	ldr	r0, [r7, #4]
 801e298:	f7ff f956 	bl	801d548 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	68db      	ldr	r3, [r3, #12]
 801e2a0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e2a6:	2b00      	cmp	r3, #0
 801e2a8:	d00a      	beq.n	801e2c0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801e2aa:	4b0e      	ldr	r3, [pc, #56]	; (801e2e4 <tcp_fasttmr+0xc4>)
 801e2ac:	2200      	movs	r2, #0
 801e2ae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801e2b0:	6878      	ldr	r0, [r7, #4]
 801e2b2:	f000 f819 	bl	801e2e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801e2b6:	4b0b      	ldr	r3, [pc, #44]	; (801e2e4 <tcp_fasttmr+0xc4>)
 801e2b8:	781b      	ldrb	r3, [r3, #0]
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	d000      	beq.n	801e2c0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801e2be:	e7b8      	b.n	801e232 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801e2c0:	683b      	ldr	r3, [r7, #0]
 801e2c2:	607b      	str	r3, [r7, #4]
 801e2c4:	e002      	b.n	801e2cc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	68db      	ldr	r3, [r3, #12]
 801e2ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d1b3      	bne.n	801e23a <tcp_fasttmr+0x1a>
    }
  }
}
 801e2d2:	bf00      	nop
 801e2d4:	3708      	adds	r7, #8
 801e2d6:	46bd      	mov	sp, r7
 801e2d8:	bd80      	pop	{r7, pc}
 801e2da:	bf00      	nop
 801e2dc:	200094ea 	.word	0x200094ea
 801e2e0:	2000ecc4 	.word	0x2000ecc4
 801e2e4:	2000ecc0 	.word	0x2000ecc0

0801e2e8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801e2e8:	b590      	push	{r4, r7, lr}
 801e2ea:	b085      	sub	sp, #20
 801e2ec:	af00      	add	r7, sp, #0
 801e2ee:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e2f4:	7b5b      	ldrb	r3, [r3, #13]
 801e2f6:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e2fc:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	2200      	movs	r2, #0
 801e302:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	d00b      	beq.n	801e326 <tcp_process_refused_data+0x3e>
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801e314:	687b      	ldr	r3, [r7, #4]
 801e316:	6918      	ldr	r0, [r3, #16]
 801e318:	2300      	movs	r3, #0
 801e31a:	68ba      	ldr	r2, [r7, #8]
 801e31c:	6879      	ldr	r1, [r7, #4]
 801e31e:	47a0      	blx	r4
 801e320:	4603      	mov	r3, r0
 801e322:	73fb      	strb	r3, [r7, #15]
 801e324:	e007      	b.n	801e336 <tcp_process_refused_data+0x4e>
 801e326:	2300      	movs	r3, #0
 801e328:	68ba      	ldr	r2, [r7, #8]
 801e32a:	6879      	ldr	r1, [r7, #4]
 801e32c:	2000      	movs	r0, #0
 801e32e:	f000 f88c 	bl	801e44a <tcp_recv_null>
 801e332:	4603      	mov	r3, r0
 801e334:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801e336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	d12a      	bne.n	801e394 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 801e33e:	7bbb      	ldrb	r3, [r7, #14]
 801e340:	f003 0320 	and.w	r3, r3, #32
 801e344:	2b00      	cmp	r3, #0
 801e346:	d033      	beq.n	801e3b0 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801e348:	687b      	ldr	r3, [r7, #4]
 801e34a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e34c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e350:	d005      	beq.n	801e35e <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e356:	3301      	adds	r3, #1
 801e358:	b29a      	uxth	r2, r3
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e364:	2b00      	cmp	r3, #0
 801e366:	d00b      	beq.n	801e380 <tcp_process_refused_data+0x98>
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	6918      	ldr	r0, [r3, #16]
 801e372:	2300      	movs	r3, #0
 801e374:	2200      	movs	r2, #0
 801e376:	6879      	ldr	r1, [r7, #4]
 801e378:	47a0      	blx	r4
 801e37a:	4603      	mov	r3, r0
 801e37c:	73fb      	strb	r3, [r7, #15]
 801e37e:	e001      	b.n	801e384 <tcp_process_refused_data+0x9c>
 801e380:	2300      	movs	r3, #0
 801e382:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801e384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e388:	f113 0f0d 	cmn.w	r3, #13
 801e38c:	d110      	bne.n	801e3b0 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 801e38e:	f06f 030c 	mvn.w	r3, #12
 801e392:	e00e      	b.n	801e3b2 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 801e394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e398:	f113 0f0d 	cmn.w	r3, #13
 801e39c:	d102      	bne.n	801e3a4 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801e39e:	f06f 030c 	mvn.w	r3, #12
 801e3a2:	e006      	b.n	801e3b2 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	68ba      	ldr	r2, [r7, #8]
 801e3a8:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 801e3aa:	f06f 0304 	mvn.w	r3, #4
 801e3ae:	e000      	b.n	801e3b2 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 801e3b0:	2300      	movs	r3, #0
}
 801e3b2:	4618      	mov	r0, r3
 801e3b4:	3714      	adds	r7, #20
 801e3b6:	46bd      	mov	sp, r7
 801e3b8:	bd90      	pop	{r4, r7, pc}

0801e3ba <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801e3ba:	b580      	push	{r7, lr}
 801e3bc:	b084      	sub	sp, #16
 801e3be:	af00      	add	r7, sp, #0
 801e3c0:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801e3c2:	e007      	b.n	801e3d4 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	681b      	ldr	r3, [r3, #0]
 801e3c8:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801e3ca:	6878      	ldr	r0, [r7, #4]
 801e3cc:	f000 f809 	bl	801e3e2 <tcp_seg_free>
    seg = next;
 801e3d0:	68fb      	ldr	r3, [r7, #12]
 801e3d2:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d1f4      	bne.n	801e3c4 <tcp_segs_free+0xa>
  }
}
 801e3da:	bf00      	nop
 801e3dc:	3710      	adds	r7, #16
 801e3de:	46bd      	mov	sp, r7
 801e3e0:	bd80      	pop	{r7, pc}

0801e3e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801e3e2:	b580      	push	{r7, lr}
 801e3e4:	b082      	sub	sp, #8
 801e3e6:	af00      	add	r7, sp, #0
 801e3e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d00c      	beq.n	801e40a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	685b      	ldr	r3, [r3, #4]
 801e3f4:	2b00      	cmp	r3, #0
 801e3f6:	d004      	beq.n	801e402 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	685b      	ldr	r3, [r3, #4]
 801e3fc:	4618      	mov	r0, r3
 801e3fe:	f7fe fcd5 	bl	801cdac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801e402:	6879      	ldr	r1, [r7, #4]
 801e404:	2002      	movs	r0, #2
 801e406:	f7fd ff7f 	bl	801c308 <memp_free>
  }
}
 801e40a:	bf00      	nop
 801e40c:	3708      	adds	r7, #8
 801e40e:	46bd      	mov	sp, r7
 801e410:	bd80      	pop	{r7, pc}

0801e412 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801e412:	b580      	push	{r7, lr}
 801e414:	b084      	sub	sp, #16
 801e416:	af00      	add	r7, sp, #0
 801e418:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801e41a:	2002      	movs	r0, #2
 801e41c:	f7fd ff22 	bl	801c264 <memp_malloc>
 801e420:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801e422:	68fb      	ldr	r3, [r7, #12]
 801e424:	2b00      	cmp	r3, #0
 801e426:	d101      	bne.n	801e42c <tcp_seg_copy+0x1a>
    return NULL;
 801e428:	2300      	movs	r3, #0
 801e42a:	e00a      	b.n	801e442 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801e42c:	2210      	movs	r2, #16
 801e42e:	6879      	ldr	r1, [r7, #4]
 801e430:	68f8      	ldr	r0, [r7, #12]
 801e432:	f008 fa28 	bl	8026886 <memcpy>
  pbuf_ref(cseg->p);
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	685b      	ldr	r3, [r3, #4]
 801e43a:	4618      	mov	r0, r3
 801e43c:	f7fe fd68 	bl	801cf10 <pbuf_ref>
  return cseg;
 801e440:	68fb      	ldr	r3, [r7, #12]
}
 801e442:	4618      	mov	r0, r3
 801e444:	3710      	adds	r7, #16
 801e446:	46bd      	mov	sp, r7
 801e448:	bd80      	pop	{r7, pc}

0801e44a <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801e44a:	b580      	push	{r7, lr}
 801e44c:	b084      	sub	sp, #16
 801e44e:	af00      	add	r7, sp, #0
 801e450:	60f8      	str	r0, [r7, #12]
 801e452:	60b9      	str	r1, [r7, #8]
 801e454:	607a      	str	r2, [r7, #4]
 801e456:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	d009      	beq.n	801e472 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	891b      	ldrh	r3, [r3, #8]
 801e462:	4619      	mov	r1, r3
 801e464:	68b8      	ldr	r0, [r7, #8]
 801e466:	f7ff fb7d 	bl	801db64 <tcp_recved>
    pbuf_free(p);
 801e46a:	6878      	ldr	r0, [r7, #4]
 801e46c:	f7fe fc9e 	bl	801cdac <pbuf_free>
 801e470:	e008      	b.n	801e484 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 801e472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e476:	2b00      	cmp	r3, #0
 801e478:	d104      	bne.n	801e484 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 801e47a:	68b8      	ldr	r0, [r7, #8]
 801e47c:	f7ff f8ca 	bl	801d614 <tcp_close>
 801e480:	4603      	mov	r3, r0
 801e482:	e000      	b.n	801e486 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 801e484:	2300      	movs	r3, #0
}
 801e486:	4618      	mov	r0, r3
 801e488:	3710      	adds	r7, #16
 801e48a:	46bd      	mov	sp, r7
 801e48c:	bd80      	pop	{r7, pc}
	...

0801e490 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801e490:	b580      	push	{r7, lr}
 801e492:	b086      	sub	sp, #24
 801e494:	af00      	add	r7, sp, #0
 801e496:	4603      	mov	r3, r0
 801e498:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801e49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	db01      	blt.n	801e4a6 <tcp_kill_prio+0x16>
 801e4a2:	79fb      	ldrb	r3, [r7, #7]
 801e4a4:	e000      	b.n	801e4a8 <tcp_kill_prio+0x18>
 801e4a6:	237f      	movs	r3, #127	; 0x7f
 801e4a8:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 801e4aa:	2300      	movs	r3, #0
 801e4ac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e4ae:	2300      	movs	r3, #0
 801e4b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e4b2:	4b16      	ldr	r3, [pc, #88]	; (801e50c <tcp_kill_prio+0x7c>)
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	617b      	str	r3, [r7, #20]
 801e4b8:	e01a      	b.n	801e4f0 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 801e4ba:	697b      	ldr	r3, [r7, #20]
 801e4bc:	7d5b      	ldrb	r3, [r3, #21]
 801e4be:	7afa      	ldrb	r2, [r7, #11]
 801e4c0:	429a      	cmp	r2, r3
 801e4c2:	d312      	bcc.n	801e4ea <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e4c4:	4b12      	ldr	r3, [pc, #72]	; (801e510 <tcp_kill_prio+0x80>)
 801e4c6:	681a      	ldr	r2, [r3, #0]
 801e4c8:	697b      	ldr	r3, [r7, #20]
 801e4ca:	6a1b      	ldr	r3, [r3, #32]
 801e4cc:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 801e4ce:	68fb      	ldr	r3, [r7, #12]
 801e4d0:	429a      	cmp	r2, r3
 801e4d2:	d30a      	bcc.n	801e4ea <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 801e4d4:	4b0e      	ldr	r3, [pc, #56]	; (801e510 <tcp_kill_prio+0x80>)
 801e4d6:	681a      	ldr	r2, [r3, #0]
 801e4d8:	697b      	ldr	r3, [r7, #20]
 801e4da:	6a1b      	ldr	r3, [r3, #32]
 801e4dc:	1ad3      	subs	r3, r2, r3
 801e4de:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 801e4e0:	697b      	ldr	r3, [r7, #20]
 801e4e2:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 801e4e4:	697b      	ldr	r3, [r7, #20]
 801e4e6:	7d5b      	ldrb	r3, [r3, #21]
 801e4e8:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e4ea:	697b      	ldr	r3, [r7, #20]
 801e4ec:	68db      	ldr	r3, [r3, #12]
 801e4ee:	617b      	str	r3, [r7, #20]
 801e4f0:	697b      	ldr	r3, [r7, #20]
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	d1e1      	bne.n	801e4ba <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 801e4f6:	693b      	ldr	r3, [r7, #16]
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d002      	beq.n	801e502 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e4fc:	6938      	ldr	r0, [r7, #16]
 801e4fe:	f7ff f99b 	bl	801d838 <tcp_abort>
  }
}
 801e502:	bf00      	nop
 801e504:	3718      	adds	r7, #24
 801e506:	46bd      	mov	sp, r7
 801e508:	bd80      	pop	{r7, pc}
 801e50a:	bf00      	nop
 801e50c:	2000ecc4 	.word	0x2000ecc4
 801e510:	2000ecc8 	.word	0x2000ecc8

0801e514 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801e514:	b580      	push	{r7, lr}
 801e516:	b086      	sub	sp, #24
 801e518:	af00      	add	r7, sp, #0
 801e51a:	4603      	mov	r3, r0
 801e51c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801e51e:	79fb      	ldrb	r3, [r7, #7]
 801e520:	2b08      	cmp	r3, #8
 801e522:	d009      	beq.n	801e538 <tcp_kill_state+0x24>
 801e524:	79fb      	ldrb	r3, [r7, #7]
 801e526:	2b09      	cmp	r3, #9
 801e528:	d006      	beq.n	801e538 <tcp_kill_state+0x24>
 801e52a:	4b1a      	ldr	r3, [pc, #104]	; (801e594 <tcp_kill_state+0x80>)
 801e52c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801e530:	4919      	ldr	r1, [pc, #100]	; (801e598 <tcp_kill_state+0x84>)
 801e532:	481a      	ldr	r0, [pc, #104]	; (801e59c <tcp_kill_state+0x88>)
 801e534:	f007 fcd8 	bl	8025ee8 <iprintf>

  inactivity = 0;
 801e538:	2300      	movs	r3, #0
 801e53a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801e53c:	2300      	movs	r3, #0
 801e53e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e540:	4b17      	ldr	r3, [pc, #92]	; (801e5a0 <tcp_kill_state+0x8c>)
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	617b      	str	r3, [r7, #20]
 801e546:	e017      	b.n	801e578 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801e548:	697b      	ldr	r3, [r7, #20]
 801e54a:	7d1b      	ldrb	r3, [r3, #20]
 801e54c:	79fa      	ldrb	r2, [r7, #7]
 801e54e:	429a      	cmp	r2, r3
 801e550:	d10f      	bne.n	801e572 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e552:	4b14      	ldr	r3, [pc, #80]	; (801e5a4 <tcp_kill_state+0x90>)
 801e554:	681a      	ldr	r2, [r3, #0]
 801e556:	697b      	ldr	r3, [r7, #20]
 801e558:	6a1b      	ldr	r3, [r3, #32]
 801e55a:	1ad2      	subs	r2, r2, r3
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	429a      	cmp	r2, r3
 801e560:	d307      	bcc.n	801e572 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801e562:	4b10      	ldr	r3, [pc, #64]	; (801e5a4 <tcp_kill_state+0x90>)
 801e564:	681a      	ldr	r2, [r3, #0]
 801e566:	697b      	ldr	r3, [r7, #20]
 801e568:	6a1b      	ldr	r3, [r3, #32]
 801e56a:	1ad3      	subs	r3, r2, r3
 801e56c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801e56e:	697b      	ldr	r3, [r7, #20]
 801e570:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801e572:	697b      	ldr	r3, [r7, #20]
 801e574:	68db      	ldr	r3, [r3, #12]
 801e576:	617b      	str	r3, [r7, #20]
 801e578:	697b      	ldr	r3, [r7, #20]
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d1e4      	bne.n	801e548 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801e57e:	693b      	ldr	r3, [r7, #16]
 801e580:	2b00      	cmp	r3, #0
 801e582:	d003      	beq.n	801e58c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801e584:	2100      	movs	r1, #0
 801e586:	6938      	ldr	r0, [r7, #16]
 801e588:	f7ff f8a4 	bl	801d6d4 <tcp_abandon>
  }
}
 801e58c:	bf00      	nop
 801e58e:	3718      	adds	r7, #24
 801e590:	46bd      	mov	sp, r7
 801e592:	bd80      	pop	{r7, pc}
 801e594:	08028378 	.word	0x08028378
 801e598:	08028688 	.word	0x08028688
 801e59c:	080283b4 	.word	0x080283b4
 801e5a0:	2000ecc4 	.word	0x2000ecc4
 801e5a4:	2000ecc8 	.word	0x2000ecc8

0801e5a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801e5a8:	b580      	push	{r7, lr}
 801e5aa:	b084      	sub	sp, #16
 801e5ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801e5ae:	2300      	movs	r3, #0
 801e5b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801e5b2:	2300      	movs	r3, #0
 801e5b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e5b6:	4b12      	ldr	r3, [pc, #72]	; (801e600 <tcp_kill_timewait+0x58>)
 801e5b8:	681b      	ldr	r3, [r3, #0]
 801e5ba:	60fb      	str	r3, [r7, #12]
 801e5bc:	e012      	b.n	801e5e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801e5be:	4b11      	ldr	r3, [pc, #68]	; (801e604 <tcp_kill_timewait+0x5c>)
 801e5c0:	681a      	ldr	r2, [r3, #0]
 801e5c2:	68fb      	ldr	r3, [r7, #12]
 801e5c4:	6a1b      	ldr	r3, [r3, #32]
 801e5c6:	1ad2      	subs	r2, r2, r3
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	429a      	cmp	r2, r3
 801e5cc:	d307      	bcc.n	801e5de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801e5ce:	4b0d      	ldr	r3, [pc, #52]	; (801e604 <tcp_kill_timewait+0x5c>)
 801e5d0:	681a      	ldr	r2, [r3, #0]
 801e5d2:	68fb      	ldr	r3, [r7, #12]
 801e5d4:	6a1b      	ldr	r3, [r3, #32]
 801e5d6:	1ad3      	subs	r3, r2, r3
 801e5d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801e5de:	68fb      	ldr	r3, [r7, #12]
 801e5e0:	68db      	ldr	r3, [r3, #12]
 801e5e2:	60fb      	str	r3, [r7, #12]
 801e5e4:	68fb      	ldr	r3, [r7, #12]
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	d1e9      	bne.n	801e5be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801e5ea:	68bb      	ldr	r3, [r7, #8]
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d002      	beq.n	801e5f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801e5f0:	68b8      	ldr	r0, [r7, #8]
 801e5f2:	f7ff f921 	bl	801d838 <tcp_abort>
  }
}
 801e5f6:	bf00      	nop
 801e5f8:	3710      	adds	r7, #16
 801e5fa:	46bd      	mov	sp, r7
 801e5fc:	bd80      	pop	{r7, pc}
 801e5fe:	bf00      	nop
 801e600:	2000ecd4 	.word	0x2000ecd4
 801e604:	2000ecc8 	.word	0x2000ecc8

0801e608 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801e608:	b580      	push	{r7, lr}
 801e60a:	b084      	sub	sp, #16
 801e60c:	af00      	add	r7, sp, #0
 801e60e:	4603      	mov	r3, r0
 801e610:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e612:	2000      	movs	r0, #0
 801e614:	f7fd fe26 	bl	801c264 <memp_malloc>
 801e618:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801e61a:	68fb      	ldr	r3, [r7, #12]
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d124      	bne.n	801e66a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801e620:	f7ff ffc2 	bl	801e5a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e624:	2000      	movs	r0, #0
 801e626:	f7fd fe1d 	bl	801c264 <memp_malloc>
 801e62a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801e62c:	68fb      	ldr	r3, [r7, #12]
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d11b      	bne.n	801e66a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801e632:	2009      	movs	r0, #9
 801e634:	f7ff ff6e 	bl	801e514 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e638:	2000      	movs	r0, #0
 801e63a:	f7fd fe13 	bl	801c264 <memp_malloc>
 801e63e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801e640:	68fb      	ldr	r3, [r7, #12]
 801e642:	2b00      	cmp	r3, #0
 801e644:	d111      	bne.n	801e66a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801e646:	2008      	movs	r0, #8
 801e648:	f7ff ff64 	bl	801e514 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e64c:	2000      	movs	r0, #0
 801e64e:	f7fd fe09 	bl	801c264 <memp_malloc>
 801e652:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801e654:	68fb      	ldr	r3, [r7, #12]
 801e656:	2b00      	cmp	r3, #0
 801e658:	d107      	bne.n	801e66a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801e65a:	79fb      	ldrb	r3, [r7, #7]
 801e65c:	4618      	mov	r0, r3
 801e65e:	f7ff ff17 	bl	801e490 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801e662:	2000      	movs	r0, #0
 801e664:	f7fd fdfe 	bl	801c264 <memp_malloc>
 801e668:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801e66a:	68fb      	ldr	r3, [r7, #12]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d03f      	beq.n	801e6f0 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801e670:	2298      	movs	r2, #152	; 0x98
 801e672:	2100      	movs	r1, #0
 801e674:	68f8      	ldr	r0, [r7, #12]
 801e676:	f008 f911 	bl	802689c <memset>
    pcb->prio = prio;
 801e67a:	68fb      	ldr	r3, [r7, #12]
 801e67c:	79fa      	ldrb	r2, [r7, #7]
 801e67e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801e680:	68fb      	ldr	r3, [r7, #12]
 801e682:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801e686:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801e68a:	68fb      	ldr	r3, [r7, #12]
 801e68c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801e690:	855a      	strh	r2, [r3, #42]	; 0x2a
 801e692:	68fb      	ldr	r3, [r7, #12]
 801e694:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e696:	68fb      	ldr	r3, [r7, #12]
 801e698:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801e69a:	68fb      	ldr	r3, [r7, #12]
 801e69c:	22ff      	movs	r2, #255	; 0xff
 801e69e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801e6a0:	68fb      	ldr	r3, [r7, #12]
 801e6a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 801e6a6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801e6a8:	68fb      	ldr	r3, [r7, #12]
 801e6aa:	2206      	movs	r2, #6
 801e6ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801e6b0:	68fb      	ldr	r3, [r7, #12]
 801e6b2:	2206      	movs	r2, #6
 801e6b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801e6b6:	68fb      	ldr	r3, [r7, #12]
 801e6b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e6bc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801e6be:	68fb      	ldr	r3, [r7, #12]
 801e6c0:	2201      	movs	r2, #1
 801e6c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801e6c6:	4b0d      	ldr	r3, [pc, #52]	; (801e6fc <tcp_alloc+0xf4>)
 801e6c8:	681a      	ldr	r2, [r3, #0]
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801e6ce:	4b0c      	ldr	r3, [pc, #48]	; (801e700 <tcp_alloc+0xf8>)
 801e6d0:	781a      	ldrb	r2, [r3, #0]
 801e6d2:	68fb      	ldr	r3, [r7, #12]
 801e6d4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801e6d6:	68fb      	ldr	r3, [r7, #12]
 801e6d8:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801e6dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801e6e0:	68fb      	ldr	r3, [r7, #12]
 801e6e2:	4a08      	ldr	r2, [pc, #32]	; (801e704 <tcp_alloc+0xfc>)
 801e6e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	4a07      	ldr	r2, [pc, #28]	; (801e708 <tcp_alloc+0x100>)
 801e6ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801e6f0:	68fb      	ldr	r3, [r7, #12]
}
 801e6f2:	4618      	mov	r0, r3
 801e6f4:	3710      	adds	r7, #16
 801e6f6:	46bd      	mov	sp, r7
 801e6f8:	bd80      	pop	{r7, pc}
 801e6fa:	bf00      	nop
 801e6fc:	2000ecc8 	.word	0x2000ecc8
 801e700:	200094ea 	.word	0x200094ea
 801e704:	0801e44b 	.word	0x0801e44b
 801e708:	006ddd00 	.word	0x006ddd00

0801e70c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801e70c:	b580      	push	{r7, lr}
 801e70e:	b084      	sub	sp, #16
 801e710:	af00      	add	r7, sp, #0
 801e712:	4603      	mov	r3, r0
 801e714:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801e716:	2040      	movs	r0, #64	; 0x40
 801e718:	f7ff ff76 	bl	801e608 <tcp_alloc>
 801e71c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801e71e:	68fb      	ldr	r3, [r7, #12]
}
 801e720:	4618      	mov	r0, r3
 801e722:	3710      	adds	r7, #16
 801e724:	46bd      	mov	sp, r7
 801e726:	bd80      	pop	{r7, pc}

0801e728 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801e728:	b480      	push	{r7}
 801e72a:	b083      	sub	sp, #12
 801e72c:	af00      	add	r7, sp, #0
 801e72e:	6078      	str	r0, [r7, #4]
 801e730:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	2b00      	cmp	r3, #0
 801e736:	d002      	beq.n	801e73e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	683a      	ldr	r2, [r7, #0]
 801e73c:	611a      	str	r2, [r3, #16]
  }
}
 801e73e:	bf00      	nop
 801e740:	370c      	adds	r7, #12
 801e742:	46bd      	mov	sp, r7
 801e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e748:	4770      	bx	lr
	...

0801e74c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801e74c:	b580      	push	{r7, lr}
 801e74e:	b082      	sub	sp, #8
 801e750:	af00      	add	r7, sp, #0
 801e752:	6078      	str	r0, [r7, #4]
 801e754:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d00e      	beq.n	801e77a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	7d1b      	ldrb	r3, [r3, #20]
 801e760:	2b01      	cmp	r3, #1
 801e762:	d106      	bne.n	801e772 <tcp_recv+0x26>
 801e764:	4b07      	ldr	r3, [pc, #28]	; (801e784 <tcp_recv+0x38>)
 801e766:	f240 62bb 	movw	r2, #1723	; 0x6bb
 801e76a:	4907      	ldr	r1, [pc, #28]	; (801e788 <tcp_recv+0x3c>)
 801e76c:	4807      	ldr	r0, [pc, #28]	; (801e78c <tcp_recv+0x40>)
 801e76e:	f007 fbbb 	bl	8025ee8 <iprintf>
    pcb->recv = recv;
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	683a      	ldr	r2, [r7, #0]
 801e776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801e77a:	bf00      	nop
 801e77c:	3708      	adds	r7, #8
 801e77e:	46bd      	mov	sp, r7
 801e780:	bd80      	pop	{r7, pc}
 801e782:	bf00      	nop
 801e784:	08028378 	.word	0x08028378
 801e788:	08028698 	.word	0x08028698
 801e78c:	080283b4 	.word	0x080283b4

0801e790 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801e790:	b580      	push	{r7, lr}
 801e792:	b082      	sub	sp, #8
 801e794:	af00      	add	r7, sp, #0
 801e796:	6078      	str	r0, [r7, #4]
 801e798:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	d00d      	beq.n	801e7bc <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	7d1b      	ldrb	r3, [r3, #20]
 801e7a4:	2b01      	cmp	r3, #1
 801e7a6:	d106      	bne.n	801e7b6 <tcp_sent+0x26>
 801e7a8:	4b06      	ldr	r3, [pc, #24]	; (801e7c4 <tcp_sent+0x34>)
 801e7aa:	f240 62cc 	movw	r2, #1740	; 0x6cc
 801e7ae:	4906      	ldr	r1, [pc, #24]	; (801e7c8 <tcp_sent+0x38>)
 801e7b0:	4806      	ldr	r0, [pc, #24]	; (801e7cc <tcp_sent+0x3c>)
 801e7b2:	f007 fb99 	bl	8025ee8 <iprintf>
    pcb->sent = sent;
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	683a      	ldr	r2, [r7, #0]
 801e7ba:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 801e7bc:	bf00      	nop
 801e7be:	3708      	adds	r7, #8
 801e7c0:	46bd      	mov	sp, r7
 801e7c2:	bd80      	pop	{r7, pc}
 801e7c4:	08028378 	.word	0x08028378
 801e7c8:	080286c0 	.word	0x080286c0
 801e7cc:	080283b4 	.word	0x080283b4

0801e7d0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801e7d0:	b580      	push	{r7, lr}
 801e7d2:	b082      	sub	sp, #8
 801e7d4:	af00      	add	r7, sp, #0
 801e7d6:	6078      	str	r0, [r7, #4]
 801e7d8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801e7da:	687b      	ldr	r3, [r7, #4]
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d00e      	beq.n	801e7fe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	7d1b      	ldrb	r3, [r3, #20]
 801e7e4:	2b01      	cmp	r3, #1
 801e7e6:	d106      	bne.n	801e7f6 <tcp_err+0x26>
 801e7e8:	4b07      	ldr	r3, [pc, #28]	; (801e808 <tcp_err+0x38>)
 801e7ea:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 801e7ee:	4907      	ldr	r1, [pc, #28]	; (801e80c <tcp_err+0x3c>)
 801e7f0:	4807      	ldr	r0, [pc, #28]	; (801e810 <tcp_err+0x40>)
 801e7f2:	f007 fb79 	bl	8025ee8 <iprintf>
    pcb->errf = err;
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	683a      	ldr	r2, [r7, #0]
 801e7fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 801e7fe:	bf00      	nop
 801e800:	3708      	adds	r7, #8
 801e802:	46bd      	mov	sp, r7
 801e804:	bd80      	pop	{r7, pc}
 801e806:	bf00      	nop
 801e808:	08028378 	.word	0x08028378
 801e80c:	080286e8 	.word	0x080286e8
 801e810:	080283b4 	.word	0x080283b4

0801e814 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801e814:	b480      	push	{r7}
 801e816:	b085      	sub	sp, #20
 801e818:	af00      	add	r7, sp, #0
 801e81a:	6078      	str	r0, [r7, #4]
 801e81c:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	2b00      	cmp	r3, #0
 801e822:	d008      	beq.n	801e836 <tcp_accept+0x22>
 801e824:	687b      	ldr	r3, [r7, #4]
 801e826:	7d1b      	ldrb	r3, [r3, #20]
 801e828:	2b01      	cmp	r3, #1
 801e82a:	d104      	bne.n	801e836 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 801e82c:	687b      	ldr	r3, [r7, #4]
 801e82e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	683a      	ldr	r2, [r7, #0]
 801e834:	619a      	str	r2, [r3, #24]
  }
}
 801e836:	bf00      	nop
 801e838:	3714      	adds	r7, #20
 801e83a:	46bd      	mov	sp, r7
 801e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e840:	4770      	bx	lr
	...

0801e844 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801e844:	b580      	push	{r7, lr}
 801e846:	b084      	sub	sp, #16
 801e848:	af00      	add	r7, sp, #0
 801e84a:	60f8      	str	r0, [r7, #12]
 801e84c:	60b9      	str	r1, [r7, #8]
 801e84e:	4613      	mov	r3, r2
 801e850:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801e852:	68fb      	ldr	r3, [r7, #12]
 801e854:	7d1b      	ldrb	r3, [r3, #20]
 801e856:	2b01      	cmp	r3, #1
 801e858:	d106      	bne.n	801e868 <tcp_poll+0x24>
 801e85a:	4b09      	ldr	r3, [pc, #36]	; (801e880 <tcp_poll+0x3c>)
 801e85c:	f240 7203 	movw	r2, #1795	; 0x703
 801e860:	4908      	ldr	r1, [pc, #32]	; (801e884 <tcp_poll+0x40>)
 801e862:	4809      	ldr	r0, [pc, #36]	; (801e888 <tcp_poll+0x44>)
 801e864:	f007 fb40 	bl	8025ee8 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801e868:	68fb      	ldr	r3, [r7, #12]
 801e86a:	68ba      	ldr	r2, [r7, #8]
 801e86c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801e870:	68fb      	ldr	r3, [r7, #12]
 801e872:	79fa      	ldrb	r2, [r7, #7]
 801e874:	771a      	strb	r2, [r3, #28]
}
 801e876:	bf00      	nop
 801e878:	3710      	adds	r7, #16
 801e87a:	46bd      	mov	sp, r7
 801e87c:	bd80      	pop	{r7, pc}
 801e87e:	bf00      	nop
 801e880:	08028378 	.word	0x08028378
 801e884:	08028710 	.word	0x08028710
 801e888:	080283b4 	.word	0x080283b4

0801e88c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801e88c:	b580      	push	{r7, lr}
 801e88e:	b082      	sub	sp, #8
 801e890:	af00      	add	r7, sp, #0
 801e892:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	7d1b      	ldrb	r3, [r3, #20]
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d034      	beq.n	801e906 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801e8a0:	2b0a      	cmp	r3, #10
 801e8a2:	d030      	beq.n	801e906 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 801e8a8:	2b01      	cmp	r3, #1
 801e8aa:	d02c      	beq.n	801e906 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801e8ac:	687b      	ldr	r3, [r7, #4]
 801e8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	d007      	beq.n	801e8c4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e8b8:	4618      	mov	r0, r3
 801e8ba:	f7fe fa77 	bl	801cdac <pbuf_free>
      pcb->refused_data = NULL;
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	2200      	movs	r2, #0
 801e8c2:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8c8:	4618      	mov	r0, r3
 801e8ca:	f7ff fd76 	bl	801e3ba <tcp_segs_free>
    pcb->ooseq = NULL;
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	2200      	movs	r2, #0
 801e8d2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e8da:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e8e0:	4618      	mov	r0, r3
 801e8e2:	f7ff fd6a 	bl	801e3ba <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801e8e6:	687b      	ldr	r3, [r7, #4]
 801e8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e8ea:	4618      	mov	r0, r3
 801e8ec:	f7ff fd65 	bl	801e3ba <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	2200      	movs	r2, #0
 801e8f4:	669a      	str	r2, [r3, #104]	; 0x68
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	2200      	movs	r2, #0
 801e902:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801e906:	bf00      	nop
 801e908:	3708      	adds	r7, #8
 801e90a:	46bd      	mov	sp, r7
 801e90c:	bd80      	pop	{r7, pc}
	...

0801e910 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801e910:	b580      	push	{r7, lr}
 801e912:	b084      	sub	sp, #16
 801e914:	af00      	add	r7, sp, #0
 801e916:	6078      	str	r0, [r7, #4]
 801e918:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	681a      	ldr	r2, [r3, #0]
 801e91e:	683b      	ldr	r3, [r7, #0]
 801e920:	429a      	cmp	r2, r3
 801e922:	d105      	bne.n	801e930 <tcp_pcb_remove+0x20>
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	68da      	ldr	r2, [r3, #12]
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	601a      	str	r2, [r3, #0]
 801e92e:	e013      	b.n	801e958 <tcp_pcb_remove+0x48>
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	60fb      	str	r3, [r7, #12]
 801e936:	e00c      	b.n	801e952 <tcp_pcb_remove+0x42>
 801e938:	68fb      	ldr	r3, [r7, #12]
 801e93a:	68da      	ldr	r2, [r3, #12]
 801e93c:	683b      	ldr	r3, [r7, #0]
 801e93e:	429a      	cmp	r2, r3
 801e940:	d104      	bne.n	801e94c <tcp_pcb_remove+0x3c>
 801e942:	683b      	ldr	r3, [r7, #0]
 801e944:	68da      	ldr	r2, [r3, #12]
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	60da      	str	r2, [r3, #12]
 801e94a:	e005      	b.n	801e958 <tcp_pcb_remove+0x48>
 801e94c:	68fb      	ldr	r3, [r7, #12]
 801e94e:	68db      	ldr	r3, [r3, #12]
 801e950:	60fb      	str	r3, [r7, #12]
 801e952:	68fb      	ldr	r3, [r7, #12]
 801e954:	2b00      	cmp	r3, #0
 801e956:	d1ef      	bne.n	801e938 <tcp_pcb_remove+0x28>
 801e958:	683b      	ldr	r3, [r7, #0]
 801e95a:	2200      	movs	r2, #0
 801e95c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801e95e:	6838      	ldr	r0, [r7, #0]
 801e960:	f7ff ff94 	bl	801e88c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 801e964:	683b      	ldr	r3, [r7, #0]
 801e966:	7d1b      	ldrb	r3, [r3, #20]
 801e968:	2b0a      	cmp	r3, #10
 801e96a:	d013      	beq.n	801e994 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 801e96c:	683b      	ldr	r3, [r7, #0]
 801e96e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 801e970:	2b01      	cmp	r3, #1
 801e972:	d00f      	beq.n	801e994 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 801e974:	683b      	ldr	r3, [r7, #0]
 801e976:	7e9b      	ldrb	r3, [r3, #26]
 801e978:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d009      	beq.n	801e994 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 801e980:	683b      	ldr	r3, [r7, #0]
 801e982:	7e9b      	ldrb	r3, [r3, #26]
 801e984:	f043 0302 	orr.w	r3, r3, #2
 801e988:	b2da      	uxtb	r2, r3
 801e98a:	683b      	ldr	r3, [r7, #0]
 801e98c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801e98e:	6838      	ldr	r0, [r7, #0]
 801e990:	f003 f9c0 	bl	8021d14 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801e994:	683b      	ldr	r3, [r7, #0]
 801e996:	7d1b      	ldrb	r3, [r3, #20]
 801e998:	2b01      	cmp	r3, #1
 801e99a:	d020      	beq.n	801e9de <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801e99c:	683b      	ldr	r3, [r7, #0]
 801e99e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d006      	beq.n	801e9b2 <tcp_pcb_remove+0xa2>
 801e9a4:	4b13      	ldr	r3, [pc, #76]	; (801e9f4 <tcp_pcb_remove+0xe4>)
 801e9a6:	f240 7253 	movw	r2, #1875	; 0x753
 801e9aa:	4913      	ldr	r1, [pc, #76]	; (801e9f8 <tcp_pcb_remove+0xe8>)
 801e9ac:	4813      	ldr	r0, [pc, #76]	; (801e9fc <tcp_pcb_remove+0xec>)
 801e9ae:	f007 fa9b 	bl	8025ee8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801e9b2:	683b      	ldr	r3, [r7, #0]
 801e9b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e9b6:	2b00      	cmp	r3, #0
 801e9b8:	d006      	beq.n	801e9c8 <tcp_pcb_remove+0xb8>
 801e9ba:	4b0e      	ldr	r3, [pc, #56]	; (801e9f4 <tcp_pcb_remove+0xe4>)
 801e9bc:	f240 7254 	movw	r2, #1876	; 0x754
 801e9c0:	490f      	ldr	r1, [pc, #60]	; (801ea00 <tcp_pcb_remove+0xf0>)
 801e9c2:	480e      	ldr	r0, [pc, #56]	; (801e9fc <tcp_pcb_remove+0xec>)
 801e9c4:	f007 fa90 	bl	8025ee8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801e9c8:	683b      	ldr	r3, [r7, #0]
 801e9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d006      	beq.n	801e9de <tcp_pcb_remove+0xce>
 801e9d0:	4b08      	ldr	r3, [pc, #32]	; (801e9f4 <tcp_pcb_remove+0xe4>)
 801e9d2:	f240 7256 	movw	r2, #1878	; 0x756
 801e9d6:	490b      	ldr	r1, [pc, #44]	; (801ea04 <tcp_pcb_remove+0xf4>)
 801e9d8:	4808      	ldr	r0, [pc, #32]	; (801e9fc <tcp_pcb_remove+0xec>)
 801e9da:	f007 fa85 	bl	8025ee8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801e9de:	683b      	ldr	r3, [r7, #0]
 801e9e0:	2200      	movs	r2, #0
 801e9e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801e9e4:	683b      	ldr	r3, [r7, #0]
 801e9e6:	2200      	movs	r2, #0
 801e9e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801e9ea:	bf00      	nop
 801e9ec:	3710      	adds	r7, #16
 801e9ee:	46bd      	mov	sp, r7
 801e9f0:	bd80      	pop	{r7, pc}
 801e9f2:	bf00      	nop
 801e9f4:	08028378 	.word	0x08028378
 801e9f8:	08028730 	.word	0x08028730
 801e9fc:	080283b4 	.word	0x080283b4
 801ea00:	08028748 	.word	0x08028748
 801ea04:	08028764 	.word	0x08028764

0801ea08 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801ea08:	b480      	push	{r7}
 801ea0a:	b083      	sub	sp, #12
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801ea10:	4b07      	ldr	r3, [pc, #28]	; (801ea30 <tcp_next_iss+0x28>)
 801ea12:	681a      	ldr	r2, [r3, #0]
 801ea14:	4b07      	ldr	r3, [pc, #28]	; (801ea34 <tcp_next_iss+0x2c>)
 801ea16:	681b      	ldr	r3, [r3, #0]
 801ea18:	4413      	add	r3, r2
 801ea1a:	4a05      	ldr	r2, [pc, #20]	; (801ea30 <tcp_next_iss+0x28>)
 801ea1c:	6013      	str	r3, [r2, #0]
  return iss;
 801ea1e:	4b04      	ldr	r3, [pc, #16]	; (801ea30 <tcp_next_iss+0x28>)
 801ea20:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801ea22:	4618      	mov	r0, r3
 801ea24:	370c      	adds	r7, #12
 801ea26:	46bd      	mov	sp, r7
 801ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea2c:	4770      	bx	lr
 801ea2e:	bf00      	nop
 801ea30:	2000000c 	.word	0x2000000c
 801ea34:	2000ecc8 	.word	0x2000ecc8

0801ea38 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 801ea38:	b580      	push	{r7, lr}
 801ea3a:	b084      	sub	sp, #16
 801ea3c:	af00      	add	r7, sp, #0
 801ea3e:	4603      	mov	r3, r0
 801ea40:	6039      	str	r1, [r7, #0]
 801ea42:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 801ea44:	6838      	ldr	r0, [r7, #0]
 801ea46:	f7fb fe13 	bl	801a670 <ip4_route>
 801ea4a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d101      	bne.n	801ea56 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801ea52:	88fb      	ldrh	r3, [r7, #6]
 801ea54:	e010      	b.n	801ea78 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801ea5a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801ea5c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ea60:	2b00      	cmp	r3, #0
 801ea62:	d008      	beq.n	801ea76 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 801ea64:	897b      	ldrh	r3, [r7, #10]
 801ea66:	3b28      	subs	r3, #40	; 0x28
 801ea68:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801ea6a:	893a      	ldrh	r2, [r7, #8]
 801ea6c:	88fb      	ldrh	r3, [r7, #6]
 801ea6e:	4293      	cmp	r3, r2
 801ea70:	bf28      	it	cs
 801ea72:	4613      	movcs	r3, r2
 801ea74:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801ea76:	88fb      	ldrh	r3, [r7, #6]
}
 801ea78:	4618      	mov	r0, r3
 801ea7a:	3710      	adds	r7, #16
 801ea7c:	46bd      	mov	sp, r7
 801ea7e:	bd80      	pop	{r7, pc}

0801ea80 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 801ea80:	b580      	push	{r7, lr}
 801ea82:	b084      	sub	sp, #16
 801ea84:	af00      	add	r7, sp, #0
 801ea86:	6078      	str	r0, [r7, #4]
 801ea88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801ea8a:	683b      	ldr	r3, [r7, #0]
 801ea8c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801ea8e:	e011      	b.n	801eab4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	681a      	ldr	r2, [r3, #0]
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	429a      	cmp	r2, r3
 801ea9a:	d108      	bne.n	801eaae <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801ea9c:	68fb      	ldr	r3, [r7, #12]
 801ea9e:	68db      	ldr	r3, [r3, #12]
 801eaa0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801eaa2:	68f8      	ldr	r0, [r7, #12]
 801eaa4:	f7fe fec8 	bl	801d838 <tcp_abort>
      pcb = next;
 801eaa8:	68bb      	ldr	r3, [r7, #8]
 801eaaa:	60fb      	str	r3, [r7, #12]
 801eaac:	e002      	b.n	801eab4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 801eaae:	68fb      	ldr	r3, [r7, #12]
 801eab0:	68db      	ldr	r3, [r3, #12]
 801eab2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801eab4:	68fb      	ldr	r3, [r7, #12]
 801eab6:	2b00      	cmp	r3, #0
 801eab8:	d1ea      	bne.n	801ea90 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 801eaba:	bf00      	nop
 801eabc:	3710      	adds	r7, #16
 801eabe:	46bd      	mov	sp, r7
 801eac0:	bd80      	pop	{r7, pc}
	...

0801eac4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801eac4:	b580      	push	{r7, lr}
 801eac6:	b084      	sub	sp, #16
 801eac8:	af00      	add	r7, sp, #0
 801eaca:	6078      	str	r0, [r7, #4]
 801eacc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	d02c      	beq.n	801eb2e <tcp_netif_ip_addr_changed+0x6a>
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	681b      	ldr	r3, [r3, #0]
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d028      	beq.n	801eb2e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801eadc:	4b16      	ldr	r3, [pc, #88]	; (801eb38 <tcp_netif_ip_addr_changed+0x74>)
 801eade:	681b      	ldr	r3, [r3, #0]
 801eae0:	4619      	mov	r1, r3
 801eae2:	6878      	ldr	r0, [r7, #4]
 801eae4:	f7ff ffcc 	bl	801ea80 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801eae8:	4b14      	ldr	r3, [pc, #80]	; (801eb3c <tcp_netif_ip_addr_changed+0x78>)
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	4619      	mov	r1, r3
 801eaee:	6878      	ldr	r0, [r7, #4]
 801eaf0:	f7ff ffc6 	bl	801ea80 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801eaf4:	683b      	ldr	r3, [r7, #0]
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	d019      	beq.n	801eb2e <tcp_netif_ip_addr_changed+0x6a>
 801eafa:	683b      	ldr	r3, [r7, #0]
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d015      	beq.n	801eb2e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801eb02:	4b0f      	ldr	r3, [pc, #60]	; (801eb40 <tcp_netif_ip_addr_changed+0x7c>)
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	60fb      	str	r3, [r7, #12]
 801eb08:	e00e      	b.n	801eb28 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 801eb0a:	68fb      	ldr	r3, [r7, #12]
 801eb0c:	68db      	ldr	r3, [r3, #12]
 801eb0e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801eb10:	68fb      	ldr	r3, [r7, #12]
 801eb12:	681a      	ldr	r2, [r3, #0]
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	681b      	ldr	r3, [r3, #0]
 801eb18:	429a      	cmp	r2, r3
 801eb1a:	d103      	bne.n	801eb24 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801eb1c:	683b      	ldr	r3, [r7, #0]
 801eb1e:	681a      	ldr	r2, [r3, #0]
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801eb24:	68bb      	ldr	r3, [r7, #8]
 801eb26:	60fb      	str	r3, [r7, #12]
 801eb28:	68fb      	ldr	r3, [r7, #12]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d1ed      	bne.n	801eb0a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801eb2e:	bf00      	nop
 801eb30:	3710      	adds	r7, #16
 801eb32:	46bd      	mov	sp, r7
 801eb34:	bd80      	pop	{r7, pc}
 801eb36:	bf00      	nop
 801eb38:	2000ecc4 	.word	0x2000ecc4
 801eb3c:	2000ecd0 	.word	0x2000ecd0
 801eb40:	2000eccc 	.word	0x2000eccc

0801eb44 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801eb44:	b590      	push	{r4, r7, lr}
 801eb46:	b08b      	sub	sp, #44	; 0x2c
 801eb48:	af02      	add	r7, sp, #8
 801eb4a:	6078      	str	r0, [r7, #4]
 801eb4c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	685b      	ldr	r3, [r3, #4]
 801eb52:	4a82      	ldr	r2, [pc, #520]	; (801ed5c <tcp_input+0x218>)
 801eb54:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	895b      	ldrh	r3, [r3, #10]
 801eb5a:	2b13      	cmp	r3, #19
 801eb5c:	f240 8388 	bls.w	801f270 <tcp_input+0x72c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801eb60:	4b7f      	ldr	r3, [pc, #508]	; (801ed60 <tcp_input+0x21c>)
 801eb62:	695a      	ldr	r2, [r3, #20]
 801eb64:	4b7e      	ldr	r3, [pc, #504]	; (801ed60 <tcp_input+0x21c>)
 801eb66:	681b      	ldr	r3, [r3, #0]
 801eb68:	4619      	mov	r1, r3
 801eb6a:	4610      	mov	r0, r2
 801eb6c:	f7fb ffee 	bl	801ab4c <ip4_addr_isbroadcast_u32>
 801eb70:	4603      	mov	r3, r0
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	f040 837f 	bne.w	801f276 <tcp_input+0x732>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801eb78:	4b79      	ldr	r3, [pc, #484]	; (801ed60 <tcp_input+0x21c>)
 801eb7a:	695b      	ldr	r3, [r3, #20]
 801eb7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801eb80:	2be0      	cmp	r3, #224	; 0xe0
 801eb82:	f000 8378 	beq.w	801f276 <tcp_input+0x732>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801eb86:	4b75      	ldr	r3, [pc, #468]	; (801ed5c <tcp_input+0x218>)
 801eb88:	681b      	ldr	r3, [r3, #0]
 801eb8a:	899b      	ldrh	r3, [r3, #12]
 801eb8c:	b29b      	uxth	r3, r3
 801eb8e:	4618      	mov	r0, r3
 801eb90:	f7fa fc8e 	bl	80194b0 <lwip_htons>
 801eb94:	4603      	mov	r3, r0
 801eb96:	0b1b      	lsrs	r3, r3, #12
 801eb98:	b29b      	uxth	r3, r3
 801eb9a:	b2db      	uxtb	r3, r3
 801eb9c:	009b      	lsls	r3, r3, #2
 801eb9e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801eba0:	7cbb      	ldrb	r3, [r7, #18]
 801eba2:	2b13      	cmp	r3, #19
 801eba4:	f240 8367 	bls.w	801f276 <tcp_input+0x732>
 801eba8:	7cbb      	ldrb	r3, [r7, #18]
 801ebaa:	b29a      	uxth	r2, r3
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	891b      	ldrh	r3, [r3, #8]
 801ebb0:	429a      	cmp	r2, r3
 801ebb2:	f200 8360 	bhi.w	801f276 <tcp_input+0x732>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801ebb6:	7cbb      	ldrb	r3, [r7, #18]
 801ebb8:	b29b      	uxth	r3, r3
 801ebba:	3b14      	subs	r3, #20
 801ebbc:	b29a      	uxth	r2, r3
 801ebbe:	4b69      	ldr	r3, [pc, #420]	; (801ed64 <tcp_input+0x220>)
 801ebc0:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801ebc2:	4b69      	ldr	r3, [pc, #420]	; (801ed68 <tcp_input+0x224>)
 801ebc4:	2200      	movs	r2, #0
 801ebc6:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	895a      	ldrh	r2, [r3, #10]
 801ebcc:	7cbb      	ldrb	r3, [r7, #18]
 801ebce:	b29b      	uxth	r3, r3
 801ebd0:	429a      	cmp	r2, r3
 801ebd2:	d30d      	bcc.n	801ebf0 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801ebd4:	4b63      	ldr	r3, [pc, #396]	; (801ed64 <tcp_input+0x220>)
 801ebd6:	881a      	ldrh	r2, [r3, #0]
 801ebd8:	4b64      	ldr	r3, [pc, #400]	; (801ed6c <tcp_input+0x228>)
 801ebda:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801ebdc:	7cbb      	ldrb	r3, [r7, #18]
 801ebde:	b29b      	uxth	r3, r3
 801ebe0:	425b      	negs	r3, r3
 801ebe2:	b29b      	uxth	r3, r3
 801ebe4:	b21b      	sxth	r3, r3
 801ebe6:	4619      	mov	r1, r3
 801ebe8:	6878      	ldr	r0, [r7, #4]
 801ebea:	f7fe f8bb 	bl	801cd64 <pbuf_header>
 801ebee:	e055      	b.n	801ec9c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	681b      	ldr	r3, [r3, #0]
 801ebf4:	2b00      	cmp	r3, #0
 801ebf6:	d105      	bne.n	801ec04 <tcp_input+0xc0>
 801ebf8:	4b5d      	ldr	r3, [pc, #372]	; (801ed70 <tcp_input+0x22c>)
 801ebfa:	22b2      	movs	r2, #178	; 0xb2
 801ebfc:	495d      	ldr	r1, [pc, #372]	; (801ed74 <tcp_input+0x230>)
 801ebfe:	485e      	ldr	r0, [pc, #376]	; (801ed78 <tcp_input+0x234>)
 801ec00:	f007 f972 	bl	8025ee8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801ec04:	f06f 0113 	mvn.w	r1, #19
 801ec08:	6878      	ldr	r0, [r7, #4]
 801ec0a:	f7fe f8ab 	bl	801cd64 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	895a      	ldrh	r2, [r3, #10]
 801ec12:	4b56      	ldr	r3, [pc, #344]	; (801ed6c <tcp_input+0x228>)
 801ec14:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801ec16:	4b53      	ldr	r3, [pc, #332]	; (801ed64 <tcp_input+0x220>)
 801ec18:	881a      	ldrh	r2, [r3, #0]
 801ec1a:	4b54      	ldr	r3, [pc, #336]	; (801ed6c <tcp_input+0x228>)
 801ec1c:	881b      	ldrh	r3, [r3, #0]
 801ec1e:	1ad3      	subs	r3, r2, r3
 801ec20:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801ec22:	4b52      	ldr	r3, [pc, #328]	; (801ed6c <tcp_input+0x228>)
 801ec24:	881b      	ldrh	r3, [r3, #0]
 801ec26:	425b      	negs	r3, r3
 801ec28:	b29b      	uxth	r3, r3
 801ec2a:	b21b      	sxth	r3, r3
 801ec2c:	4619      	mov	r1, r3
 801ec2e:	6878      	ldr	r0, [r7, #4]
 801ec30:	f7fe f898 	bl	801cd64 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	895b      	ldrh	r3, [r3, #10]
 801ec3a:	8a3a      	ldrh	r2, [r7, #16]
 801ec3c:	429a      	cmp	r2, r3
 801ec3e:	f200 8319 	bhi.w	801f274 <tcp_input+0x730>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	685b      	ldr	r3, [r3, #4]
 801ec48:	4a47      	ldr	r2, [pc, #284]	; (801ed68 <tcp_input+0x224>)
 801ec4a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	681a      	ldr	r2, [r3, #0]
 801ec50:	8a3b      	ldrh	r3, [r7, #16]
 801ec52:	425b      	negs	r3, r3
 801ec54:	b29b      	uxth	r3, r3
 801ec56:	b21b      	sxth	r3, r3
 801ec58:	4619      	mov	r1, r3
 801ec5a:	4610      	mov	r0, r2
 801ec5c:	f7fe f882 	bl	801cd64 <pbuf_header>
    p->tot_len -= opt2len;
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	891a      	ldrh	r2, [r3, #8]
 801ec64:	8a3b      	ldrh	r3, [r7, #16]
 801ec66:	1ad3      	subs	r3, r2, r3
 801ec68:	b29a      	uxth	r2, r3
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ec6e:	687b      	ldr	r3, [r7, #4]
 801ec70:	895b      	ldrh	r3, [r3, #10]
 801ec72:	2b00      	cmp	r3, #0
 801ec74:	d005      	beq.n	801ec82 <tcp_input+0x13e>
 801ec76:	4b3e      	ldr	r3, [pc, #248]	; (801ed70 <tcp_input+0x22c>)
 801ec78:	22cf      	movs	r2, #207	; 0xcf
 801ec7a:	4940      	ldr	r1, [pc, #256]	; (801ed7c <tcp_input+0x238>)
 801ec7c:	483e      	ldr	r0, [pc, #248]	; (801ed78 <tcp_input+0x234>)
 801ec7e:	f007 f933 	bl	8025ee8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	891a      	ldrh	r2, [r3, #8]
 801ec86:	687b      	ldr	r3, [r7, #4]
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	891b      	ldrh	r3, [r3, #8]
 801ec8c:	429a      	cmp	r2, r3
 801ec8e:	d005      	beq.n	801ec9c <tcp_input+0x158>
 801ec90:	4b37      	ldr	r3, [pc, #220]	; (801ed70 <tcp_input+0x22c>)
 801ec92:	22d0      	movs	r2, #208	; 0xd0
 801ec94:	493a      	ldr	r1, [pc, #232]	; (801ed80 <tcp_input+0x23c>)
 801ec96:	4838      	ldr	r0, [pc, #224]	; (801ed78 <tcp_input+0x234>)
 801ec98:	f007 f926 	bl	8025ee8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801ec9c:	4b2f      	ldr	r3, [pc, #188]	; (801ed5c <tcp_input+0x218>)
 801ec9e:	681c      	ldr	r4, [r3, #0]
 801eca0:	4b2e      	ldr	r3, [pc, #184]	; (801ed5c <tcp_input+0x218>)
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	881b      	ldrh	r3, [r3, #0]
 801eca6:	b29b      	uxth	r3, r3
 801eca8:	4618      	mov	r0, r3
 801ecaa:	f7fa fc01 	bl	80194b0 <lwip_htons>
 801ecae:	4603      	mov	r3, r0
 801ecb0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801ecb2:	4b2a      	ldr	r3, [pc, #168]	; (801ed5c <tcp_input+0x218>)
 801ecb4:	681c      	ldr	r4, [r3, #0]
 801ecb6:	4b29      	ldr	r3, [pc, #164]	; (801ed5c <tcp_input+0x218>)
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	885b      	ldrh	r3, [r3, #2]
 801ecbc:	b29b      	uxth	r3, r3
 801ecbe:	4618      	mov	r0, r3
 801ecc0:	f7fa fbf6 	bl	80194b0 <lwip_htons>
 801ecc4:	4603      	mov	r3, r0
 801ecc6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ecc8:	4b24      	ldr	r3, [pc, #144]	; (801ed5c <tcp_input+0x218>)
 801ecca:	681c      	ldr	r4, [r3, #0]
 801eccc:	4b23      	ldr	r3, [pc, #140]	; (801ed5c <tcp_input+0x218>)
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	685b      	ldr	r3, [r3, #4]
 801ecd2:	4618      	mov	r0, r3
 801ecd4:	f7fa fbfa 	bl	80194cc <lwip_htonl>
 801ecd8:	4603      	mov	r3, r0
 801ecda:	6063      	str	r3, [r4, #4]
 801ecdc:	6863      	ldr	r3, [r4, #4]
 801ecde:	4a29      	ldr	r2, [pc, #164]	; (801ed84 <tcp_input+0x240>)
 801ece0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ece2:	4b1e      	ldr	r3, [pc, #120]	; (801ed5c <tcp_input+0x218>)
 801ece4:	681c      	ldr	r4, [r3, #0]
 801ece6:	4b1d      	ldr	r3, [pc, #116]	; (801ed5c <tcp_input+0x218>)
 801ece8:	681b      	ldr	r3, [r3, #0]
 801ecea:	689b      	ldr	r3, [r3, #8]
 801ecec:	4618      	mov	r0, r3
 801ecee:	f7fa fbed 	bl	80194cc <lwip_htonl>
 801ecf2:	4603      	mov	r3, r0
 801ecf4:	60a3      	str	r3, [r4, #8]
 801ecf6:	68a3      	ldr	r3, [r4, #8]
 801ecf8:	4a23      	ldr	r2, [pc, #140]	; (801ed88 <tcp_input+0x244>)
 801ecfa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ecfc:	4b17      	ldr	r3, [pc, #92]	; (801ed5c <tcp_input+0x218>)
 801ecfe:	681c      	ldr	r4, [r3, #0]
 801ed00:	4b16      	ldr	r3, [pc, #88]	; (801ed5c <tcp_input+0x218>)
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	89db      	ldrh	r3, [r3, #14]
 801ed06:	b29b      	uxth	r3, r3
 801ed08:	4618      	mov	r0, r3
 801ed0a:	f7fa fbd1 	bl	80194b0 <lwip_htons>
 801ed0e:	4603      	mov	r3, r0
 801ed10:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801ed12:	4b12      	ldr	r3, [pc, #72]	; (801ed5c <tcp_input+0x218>)
 801ed14:	681b      	ldr	r3, [r3, #0]
 801ed16:	899b      	ldrh	r3, [r3, #12]
 801ed18:	b29b      	uxth	r3, r3
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	f7fa fbc8 	bl	80194b0 <lwip_htons>
 801ed20:	4603      	mov	r3, r0
 801ed22:	b2db      	uxtb	r3, r3
 801ed24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ed28:	b2da      	uxtb	r2, r3
 801ed2a:	4b18      	ldr	r3, [pc, #96]	; (801ed8c <tcp_input+0x248>)
 801ed2c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	891a      	ldrh	r2, [r3, #8]
 801ed32:	4b16      	ldr	r3, [pc, #88]	; (801ed8c <tcp_input+0x248>)
 801ed34:	781b      	ldrb	r3, [r3, #0]
 801ed36:	f003 0303 	and.w	r3, r3, #3
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	bf14      	ite	ne
 801ed3e:	2301      	movne	r3, #1
 801ed40:	2300      	moveq	r3, #0
 801ed42:	b2db      	uxtb	r3, r3
 801ed44:	b29b      	uxth	r3, r3
 801ed46:	4413      	add	r3, r2
 801ed48:	b29a      	uxth	r2, r3
 801ed4a:	4b11      	ldr	r3, [pc, #68]	; (801ed90 <tcp_input+0x24c>)
 801ed4c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801ed4e:	2300      	movs	r3, #0
 801ed50:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed52:	4b10      	ldr	r3, [pc, #64]	; (801ed94 <tcp_input+0x250>)
 801ed54:	681b      	ldr	r3, [r3, #0]
 801ed56:	61fb      	str	r3, [r7, #28]
 801ed58:	e082      	b.n	801ee60 <tcp_input+0x31c>
 801ed5a:	bf00      	nop
 801ed5c:	200094fc 	.word	0x200094fc
 801ed60:	2000a260 	.word	0x2000a260
 801ed64:	20009500 	.word	0x20009500
 801ed68:	20009504 	.word	0x20009504
 801ed6c:	20009502 	.word	0x20009502
 801ed70:	0802877c 	.word	0x0802877c
 801ed74:	080287b0 	.word	0x080287b0
 801ed78:	080287c0 	.word	0x080287c0
 801ed7c:	080287e8 	.word	0x080287e8
 801ed80:	080287f4 	.word	0x080287f4
 801ed84:	2000950c 	.word	0x2000950c
 801ed88:	20009510 	.word	0x20009510
 801ed8c:	20009518 	.word	0x20009518
 801ed90:	20009516 	.word	0x20009516
 801ed94:	2000ecc4 	.word	0x2000ecc4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ed98:	69fb      	ldr	r3, [r7, #28]
 801ed9a:	7d1b      	ldrb	r3, [r3, #20]
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d105      	bne.n	801edac <tcp_input+0x268>
 801eda0:	4b8f      	ldr	r3, [pc, #572]	; (801efe0 <tcp_input+0x49c>)
 801eda2:	22e2      	movs	r2, #226	; 0xe2
 801eda4:	498f      	ldr	r1, [pc, #572]	; (801efe4 <tcp_input+0x4a0>)
 801eda6:	4890      	ldr	r0, [pc, #576]	; (801efe8 <tcp_input+0x4a4>)
 801eda8:	f007 f89e 	bl	8025ee8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801edac:	69fb      	ldr	r3, [r7, #28]
 801edae:	7d1b      	ldrb	r3, [r3, #20]
 801edb0:	2b0a      	cmp	r3, #10
 801edb2:	d105      	bne.n	801edc0 <tcp_input+0x27c>
 801edb4:	4b8a      	ldr	r3, [pc, #552]	; (801efe0 <tcp_input+0x49c>)
 801edb6:	22e3      	movs	r2, #227	; 0xe3
 801edb8:	498c      	ldr	r1, [pc, #560]	; (801efec <tcp_input+0x4a8>)
 801edba:	488b      	ldr	r0, [pc, #556]	; (801efe8 <tcp_input+0x4a4>)
 801edbc:	f007 f894 	bl	8025ee8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801edc0:	69fb      	ldr	r3, [r7, #28]
 801edc2:	7d1b      	ldrb	r3, [r3, #20]
 801edc4:	2b01      	cmp	r3, #1
 801edc6:	d105      	bne.n	801edd4 <tcp_input+0x290>
 801edc8:	4b85      	ldr	r3, [pc, #532]	; (801efe0 <tcp_input+0x49c>)
 801edca:	22e4      	movs	r2, #228	; 0xe4
 801edcc:	4988      	ldr	r1, [pc, #544]	; (801eff0 <tcp_input+0x4ac>)
 801edce:	4886      	ldr	r0, [pc, #536]	; (801efe8 <tcp_input+0x4a4>)
 801edd0:	f007 f88a 	bl	8025ee8 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 801edd4:	69fb      	ldr	r3, [r7, #28]
 801edd6:	8b1a      	ldrh	r2, [r3, #24]
 801edd8:	4b86      	ldr	r3, [pc, #536]	; (801eff4 <tcp_input+0x4b0>)
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	881b      	ldrh	r3, [r3, #0]
 801edde:	b29b      	uxth	r3, r3
 801ede0:	429a      	cmp	r2, r3
 801ede2:	d138      	bne.n	801ee56 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 801ede4:	69fb      	ldr	r3, [r7, #28]
 801ede6:	8ada      	ldrh	r2, [r3, #22]
 801ede8:	4b82      	ldr	r3, [pc, #520]	; (801eff4 <tcp_input+0x4b0>)
 801edea:	681b      	ldr	r3, [r3, #0]
 801edec:	885b      	ldrh	r3, [r3, #2]
 801edee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801edf0:	429a      	cmp	r2, r3
 801edf2:	d130      	bne.n	801ee56 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801edf4:	69fb      	ldr	r3, [r7, #28]
 801edf6:	685a      	ldr	r2, [r3, #4]
 801edf8:	4b7f      	ldr	r3, [pc, #508]	; (801eff8 <tcp_input+0x4b4>)
 801edfa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801edfc:	429a      	cmp	r2, r3
 801edfe:	d12a      	bne.n	801ee56 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ee00:	69fb      	ldr	r3, [r7, #28]
 801ee02:	681a      	ldr	r2, [r3, #0]
 801ee04:	4b7c      	ldr	r3, [pc, #496]	; (801eff8 <tcp_input+0x4b4>)
 801ee06:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ee08:	429a      	cmp	r2, r3
 801ee0a:	d124      	bne.n	801ee56 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ee0c:	69fb      	ldr	r3, [r7, #28]
 801ee0e:	68da      	ldr	r2, [r3, #12]
 801ee10:	69fb      	ldr	r3, [r7, #28]
 801ee12:	429a      	cmp	r2, r3
 801ee14:	d105      	bne.n	801ee22 <tcp_input+0x2de>
 801ee16:	4b72      	ldr	r3, [pc, #456]	; (801efe0 <tcp_input+0x49c>)
 801ee18:	22ec      	movs	r2, #236	; 0xec
 801ee1a:	4978      	ldr	r1, [pc, #480]	; (801effc <tcp_input+0x4b8>)
 801ee1c:	4872      	ldr	r0, [pc, #456]	; (801efe8 <tcp_input+0x4a4>)
 801ee1e:	f007 f863 	bl	8025ee8 <iprintf>
      if (prev != NULL) {
 801ee22:	69bb      	ldr	r3, [r7, #24]
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d00a      	beq.n	801ee3e <tcp_input+0x2fa>
        prev->next = pcb->next;
 801ee28:	69fb      	ldr	r3, [r7, #28]
 801ee2a:	68da      	ldr	r2, [r3, #12]
 801ee2c:	69bb      	ldr	r3, [r7, #24]
 801ee2e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801ee30:	4b73      	ldr	r3, [pc, #460]	; (801f000 <tcp_input+0x4bc>)
 801ee32:	681a      	ldr	r2, [r3, #0]
 801ee34:	69fb      	ldr	r3, [r7, #28]
 801ee36:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801ee38:	4a71      	ldr	r2, [pc, #452]	; (801f000 <tcp_input+0x4bc>)
 801ee3a:	69fb      	ldr	r3, [r7, #28]
 801ee3c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ee3e:	69fb      	ldr	r3, [r7, #28]
 801ee40:	68da      	ldr	r2, [r3, #12]
 801ee42:	69fb      	ldr	r3, [r7, #28]
 801ee44:	429a      	cmp	r2, r3
 801ee46:	d10f      	bne.n	801ee68 <tcp_input+0x324>
 801ee48:	4b65      	ldr	r3, [pc, #404]	; (801efe0 <tcp_input+0x49c>)
 801ee4a:	22f4      	movs	r2, #244	; 0xf4
 801ee4c:	496d      	ldr	r1, [pc, #436]	; (801f004 <tcp_input+0x4c0>)
 801ee4e:	4866      	ldr	r0, [pc, #408]	; (801efe8 <tcp_input+0x4a4>)
 801ee50:	f007 f84a 	bl	8025ee8 <iprintf>
      break;
 801ee54:	e008      	b.n	801ee68 <tcp_input+0x324>
    }
    prev = pcb;
 801ee56:	69fb      	ldr	r3, [r7, #28]
 801ee58:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ee5a:	69fb      	ldr	r3, [r7, #28]
 801ee5c:	68db      	ldr	r3, [r3, #12]
 801ee5e:	61fb      	str	r3, [r7, #28]
 801ee60:	69fb      	ldr	r3, [r7, #28]
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d198      	bne.n	801ed98 <tcp_input+0x254>
 801ee66:	e000      	b.n	801ee6a <tcp_input+0x326>
      break;
 801ee68:	bf00      	nop
  }

  if (pcb == NULL) {
 801ee6a:	69fb      	ldr	r3, [r7, #28]
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	d173      	bne.n	801ef58 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ee70:	4b65      	ldr	r3, [pc, #404]	; (801f008 <tcp_input+0x4c4>)
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	61fb      	str	r3, [r7, #28]
 801ee76:	e02f      	b.n	801eed8 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ee78:	69fb      	ldr	r3, [r7, #28]
 801ee7a:	7d1b      	ldrb	r3, [r3, #20]
 801ee7c:	2b0a      	cmp	r3, #10
 801ee7e:	d005      	beq.n	801ee8c <tcp_input+0x348>
 801ee80:	4b57      	ldr	r3, [pc, #348]	; (801efe0 <tcp_input+0x49c>)
 801ee82:	22fe      	movs	r2, #254	; 0xfe
 801ee84:	4961      	ldr	r1, [pc, #388]	; (801f00c <tcp_input+0x4c8>)
 801ee86:	4858      	ldr	r0, [pc, #352]	; (801efe8 <tcp_input+0x4a4>)
 801ee88:	f007 f82e 	bl	8025ee8 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 801ee8c:	69fb      	ldr	r3, [r7, #28]
 801ee8e:	8b1a      	ldrh	r2, [r3, #24]
 801ee90:	4b58      	ldr	r3, [pc, #352]	; (801eff4 <tcp_input+0x4b0>)
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	881b      	ldrh	r3, [r3, #0]
 801ee96:	b29b      	uxth	r3, r3
 801ee98:	429a      	cmp	r2, r3
 801ee9a:	d11a      	bne.n	801eed2 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 801ee9c:	69fb      	ldr	r3, [r7, #28]
 801ee9e:	8ada      	ldrh	r2, [r3, #22]
 801eea0:	4b54      	ldr	r3, [pc, #336]	; (801eff4 <tcp_input+0x4b0>)
 801eea2:	681b      	ldr	r3, [r3, #0]
 801eea4:	885b      	ldrh	r3, [r3, #2]
 801eea6:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801eea8:	429a      	cmp	r2, r3
 801eeaa:	d112      	bne.n	801eed2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801eeac:	69fb      	ldr	r3, [r7, #28]
 801eeae:	685a      	ldr	r2, [r3, #4]
 801eeb0:	4b51      	ldr	r3, [pc, #324]	; (801eff8 <tcp_input+0x4b4>)
 801eeb2:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801eeb4:	429a      	cmp	r2, r3
 801eeb6:	d10c      	bne.n	801eed2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801eeb8:	69fb      	ldr	r3, [r7, #28]
 801eeba:	681a      	ldr	r2, [r3, #0]
 801eebc:	4b4e      	ldr	r3, [pc, #312]	; (801eff8 <tcp_input+0x4b4>)
 801eebe:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801eec0:	429a      	cmp	r2, r3
 801eec2:	d106      	bne.n	801eed2 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 801eec4:	69f8      	ldr	r0, [r7, #28]
 801eec6:	f000 fb11 	bl	801f4ec <tcp_timewait_input>
        pbuf_free(p);
 801eeca:	6878      	ldr	r0, [r7, #4]
 801eecc:	f7fd ff6e 	bl	801cdac <pbuf_free>
        return;
 801eed0:	e1d6      	b.n	801f280 <tcp_input+0x73c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801eed2:	69fb      	ldr	r3, [r7, #28]
 801eed4:	68db      	ldr	r3, [r3, #12]
 801eed6:	61fb      	str	r3, [r7, #28]
 801eed8:	69fb      	ldr	r3, [r7, #28]
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	d1cc      	bne.n	801ee78 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801eede:	2300      	movs	r3, #0
 801eee0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801eee2:	4b4b      	ldr	r3, [pc, #300]	; (801f010 <tcp_input+0x4cc>)
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	617b      	str	r3, [r7, #20]
 801eee8:	e019      	b.n	801ef1e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 801eeea:	697b      	ldr	r3, [r7, #20]
 801eeec:	8ada      	ldrh	r2, [r3, #22]
 801eeee:	4b41      	ldr	r3, [pc, #260]	; (801eff4 <tcp_input+0x4b0>)
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	885b      	ldrh	r3, [r3, #2]
 801eef4:	b29b      	uxth	r3, r3
 801eef6:	429a      	cmp	r2, r3
 801eef8:	d10c      	bne.n	801ef14 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801eefa:	697b      	ldr	r3, [r7, #20]
 801eefc:	681a      	ldr	r2, [r3, #0]
 801eefe:	4b3e      	ldr	r3, [pc, #248]	; (801eff8 <tcp_input+0x4b4>)
 801ef00:	695b      	ldr	r3, [r3, #20]
 801ef02:	429a      	cmp	r2, r3
 801ef04:	d00f      	beq.n	801ef26 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801ef06:	697b      	ldr	r3, [r7, #20]
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d00d      	beq.n	801ef28 <tcp_input+0x3e4>
 801ef0c:	697b      	ldr	r3, [r7, #20]
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	d009      	beq.n	801ef28 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801ef14:	697b      	ldr	r3, [r7, #20]
 801ef16:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ef18:	697b      	ldr	r3, [r7, #20]
 801ef1a:	68db      	ldr	r3, [r3, #12]
 801ef1c:	617b      	str	r3, [r7, #20]
 801ef1e:	697b      	ldr	r3, [r7, #20]
 801ef20:	2b00      	cmp	r3, #0
 801ef22:	d1e2      	bne.n	801eeea <tcp_input+0x3a6>
 801ef24:	e000      	b.n	801ef28 <tcp_input+0x3e4>
            break;
 801ef26:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801ef28:	697b      	ldr	r3, [r7, #20]
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	d014      	beq.n	801ef58 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801ef2e:	69bb      	ldr	r3, [r7, #24]
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	d00a      	beq.n	801ef4a <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801ef34:	697b      	ldr	r3, [r7, #20]
 801ef36:	68da      	ldr	r2, [r3, #12]
 801ef38:	69bb      	ldr	r3, [r7, #24]
 801ef3a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801ef3c:	4b34      	ldr	r3, [pc, #208]	; (801f010 <tcp_input+0x4cc>)
 801ef3e:	681a      	ldr	r2, [r3, #0]
 801ef40:	697b      	ldr	r3, [r7, #20]
 801ef42:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801ef44:	4a32      	ldr	r2, [pc, #200]	; (801f010 <tcp_input+0x4cc>)
 801ef46:	697b      	ldr	r3, [r7, #20]
 801ef48:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 801ef4a:	6978      	ldr	r0, [r7, #20]
 801ef4c:	f000 f9ec 	bl	801f328 <tcp_listen_input>
      pbuf_free(p);
 801ef50:	6878      	ldr	r0, [r7, #4]
 801ef52:	f7fd ff2b 	bl	801cdac <pbuf_free>
      return;
 801ef56:	e193      	b.n	801f280 <tcp_input+0x73c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 801ef58:	69fb      	ldr	r3, [r7, #28]
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	f000 8162 	beq.w	801f224 <tcp_input+0x6e0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801ef60:	4b2c      	ldr	r3, [pc, #176]	; (801f014 <tcp_input+0x4d0>)
 801ef62:	2200      	movs	r2, #0
 801ef64:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	891a      	ldrh	r2, [r3, #8]
 801ef6a:	4b2a      	ldr	r3, [pc, #168]	; (801f014 <tcp_input+0x4d0>)
 801ef6c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801ef6e:	4a29      	ldr	r2, [pc, #164]	; (801f014 <tcp_input+0x4d0>)
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801ef74:	4b1f      	ldr	r3, [pc, #124]	; (801eff4 <tcp_input+0x4b0>)
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	4a26      	ldr	r2, [pc, #152]	; (801f014 <tcp_input+0x4d0>)
 801ef7a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801ef7c:	4b26      	ldr	r3, [pc, #152]	; (801f018 <tcp_input+0x4d4>)
 801ef7e:	2200      	movs	r2, #0
 801ef80:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801ef82:	4b26      	ldr	r3, [pc, #152]	; (801f01c <tcp_input+0x4d8>)
 801ef84:	2200      	movs	r2, #0
 801ef86:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801ef88:	4b25      	ldr	r3, [pc, #148]	; (801f020 <tcp_input+0x4dc>)
 801ef8a:	2200      	movs	r2, #0
 801ef8c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801ef8e:	4b25      	ldr	r3, [pc, #148]	; (801f024 <tcp_input+0x4e0>)
 801ef90:	781b      	ldrb	r3, [r3, #0]
 801ef92:	f003 0308 	and.w	r3, r3, #8
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	d006      	beq.n	801efa8 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	7b5b      	ldrb	r3, [r3, #13]
 801ef9e:	f043 0301 	orr.w	r3, r3, #1
 801efa2:	b2da      	uxtb	r2, r3
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801efa8:	69fb      	ldr	r3, [r7, #28]
 801efaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801efac:	2b00      	cmp	r3, #0
 801efae:	d03d      	beq.n	801f02c <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801efb0:	69f8      	ldr	r0, [r7, #28]
 801efb2:	f7ff f999 	bl	801e2e8 <tcp_process_refused_data>
 801efb6:	4603      	mov	r3, r0
 801efb8:	f113 0f0d 	cmn.w	r3, #13
 801efbc:	d007      	beq.n	801efce <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801efbe:	69fb      	ldr	r3, [r7, #28]
 801efc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	d032      	beq.n	801f02c <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801efc6:	4b18      	ldr	r3, [pc, #96]	; (801f028 <tcp_input+0x4e4>)
 801efc8:	881b      	ldrh	r3, [r3, #0]
 801efca:	2b00      	cmp	r3, #0
 801efcc:	d02e      	beq.n	801f02c <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801efce:	69fb      	ldr	r3, [r7, #28]
 801efd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	f040 8108 	bne.w	801f1e8 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801efd8:	69f8      	ldr	r0, [r7, #28]
 801efda:	f002 fe3f 	bl	8021c5c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801efde:	e103      	b.n	801f1e8 <tcp_input+0x6a4>
 801efe0:	0802877c 	.word	0x0802877c
 801efe4:	08028814 	.word	0x08028814
 801efe8:	080287c0 	.word	0x080287c0
 801efec:	0802883c 	.word	0x0802883c
 801eff0:	08028868 	.word	0x08028868
 801eff4:	200094fc 	.word	0x200094fc
 801eff8:	2000a260 	.word	0x2000a260
 801effc:	08028890 	.word	0x08028890
 801f000:	2000ecc4 	.word	0x2000ecc4
 801f004:	080288bc 	.word	0x080288bc
 801f008:	2000ecd4 	.word	0x2000ecd4
 801f00c:	080288e8 	.word	0x080288e8
 801f010:	2000eccc 	.word	0x2000eccc
 801f014:	200094ec 	.word	0x200094ec
 801f018:	2000951c 	.word	0x2000951c
 801f01c:	20009519 	.word	0x20009519
 801f020:	20009514 	.word	0x20009514
 801f024:	20009518 	.word	0x20009518
 801f028:	20009516 	.word	0x20009516
      }
    }
    tcp_input_pcb = pcb;
 801f02c:	4a96      	ldr	r2, [pc, #600]	; (801f288 <tcp_input+0x744>)
 801f02e:	69fb      	ldr	r3, [r7, #28]
 801f030:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801f032:	69f8      	ldr	r0, [r7, #28]
 801f034:	f000 fac2 	bl	801f5bc <tcp_process>
 801f038:	4603      	mov	r3, r0
 801f03a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801f03c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f040:	f113 0f0d 	cmn.w	r3, #13
 801f044:	f000 80db 	beq.w	801f1fe <tcp_input+0x6ba>
      if (recv_flags & TF_RESET) {
 801f048:	4b90      	ldr	r3, [pc, #576]	; (801f28c <tcp_input+0x748>)
 801f04a:	781b      	ldrb	r3, [r3, #0]
 801f04c:	f003 0308 	and.w	r3, r3, #8
 801f050:	2b00      	cmp	r3, #0
 801f052:	d016      	beq.n	801f082 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801f054:	69fb      	ldr	r3, [r7, #28]
 801f056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	d008      	beq.n	801f070 <tcp_input+0x52c>
 801f05e:	69fb      	ldr	r3, [r7, #28]
 801f060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f064:	69fa      	ldr	r2, [r7, #28]
 801f066:	6912      	ldr	r2, [r2, #16]
 801f068:	f06f 010d 	mvn.w	r1, #13
 801f06c:	4610      	mov	r0, r2
 801f06e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801f070:	69f9      	ldr	r1, [r7, #28]
 801f072:	4887      	ldr	r0, [pc, #540]	; (801f290 <tcp_input+0x74c>)
 801f074:	f7ff fc4c 	bl	801e910 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 801f078:	69f9      	ldr	r1, [r7, #28]
 801f07a:	2000      	movs	r0, #0
 801f07c:	f7fd f944 	bl	801c308 <memp_free>
 801f080:	e0bd      	b.n	801f1fe <tcp_input+0x6ba>
      } else {
        err = ERR_OK;
 801f082:	2300      	movs	r3, #0
 801f084:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801f086:	4b83      	ldr	r3, [pc, #524]	; (801f294 <tcp_input+0x750>)
 801f088:	881b      	ldrh	r3, [r3, #0]
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d01b      	beq.n	801f0c6 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801f08e:	4b81      	ldr	r3, [pc, #516]	; (801f294 <tcp_input+0x750>)
 801f090:	881b      	ldrh	r3, [r3, #0]
 801f092:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801f094:	69fb      	ldr	r3, [r7, #28]
 801f096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d009      	beq.n	801f0b0 <tcp_input+0x56c>
 801f09c:	69fb      	ldr	r3, [r7, #28]
 801f09e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f0a0:	69fa      	ldr	r2, [r7, #28]
 801f0a2:	6910      	ldr	r0, [r2, #16]
 801f0a4:	89fa      	ldrh	r2, [r7, #14]
 801f0a6:	69f9      	ldr	r1, [r7, #28]
 801f0a8:	4798      	blx	r3
 801f0aa:	4603      	mov	r3, r0
 801f0ac:	74fb      	strb	r3, [r7, #19]
 801f0ae:	e001      	b.n	801f0b4 <tcp_input+0x570>
 801f0b0:	2300      	movs	r3, #0
 801f0b2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801f0b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f0b8:	f113 0f0d 	cmn.w	r3, #13
 801f0bc:	f000 8096 	beq.w	801f1ec <tcp_input+0x6a8>
              goto aborted;
            }
          }
          recv_acked = 0;
 801f0c0:	4b74      	ldr	r3, [pc, #464]	; (801f294 <tcp_input+0x750>)
 801f0c2:	2200      	movs	r2, #0
 801f0c4:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801f0c6:	69f8      	ldr	r0, [r7, #28]
 801f0c8:	f000 f8fc 	bl	801f2c4 <tcp_input_delayed_close>
 801f0cc:	4603      	mov	r3, r0
 801f0ce:	2b00      	cmp	r3, #0
 801f0d0:	f040 808e 	bne.w	801f1f0 <tcp_input+0x6ac>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801f0d4:	4b70      	ldr	r3, [pc, #448]	; (801f298 <tcp_input+0x754>)
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d041      	beq.n	801f160 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801f0dc:	69fb      	ldr	r3, [r7, #28]
 801f0de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	d006      	beq.n	801f0f2 <tcp_input+0x5ae>
 801f0e4:	4b6d      	ldr	r3, [pc, #436]	; (801f29c <tcp_input+0x758>)
 801f0e6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 801f0ea:	496d      	ldr	r1, [pc, #436]	; (801f2a0 <tcp_input+0x75c>)
 801f0ec:	486d      	ldr	r0, [pc, #436]	; (801f2a4 <tcp_input+0x760>)
 801f0ee:	f006 fefb 	bl	8025ee8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801f0f2:	69fb      	ldr	r3, [r7, #28]
 801f0f4:	7e9b      	ldrb	r3, [r3, #26]
 801f0f6:	f003 0310 	and.w	r3, r3, #16
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d008      	beq.n	801f110 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801f0fe:	4b66      	ldr	r3, [pc, #408]	; (801f298 <tcp_input+0x754>)
 801f100:	681b      	ldr	r3, [r3, #0]
 801f102:	4618      	mov	r0, r3
 801f104:	f7fd fe52 	bl	801cdac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801f108:	69f8      	ldr	r0, [r7, #28]
 801f10a:	f7fe fb95 	bl	801d838 <tcp_abort>
            goto aborted;
 801f10e:	e076      	b.n	801f1fe <tcp_input+0x6ba>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801f110:	69fb      	ldr	r3, [r7, #28]
 801f112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f116:	2b00      	cmp	r3, #0
 801f118:	d00c      	beq.n	801f134 <tcp_input+0x5f0>
 801f11a:	69fb      	ldr	r3, [r7, #28]
 801f11c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801f120:	69fb      	ldr	r3, [r7, #28]
 801f122:	6918      	ldr	r0, [r3, #16]
 801f124:	4b5c      	ldr	r3, [pc, #368]	; (801f298 <tcp_input+0x754>)
 801f126:	681a      	ldr	r2, [r3, #0]
 801f128:	2300      	movs	r3, #0
 801f12a:	69f9      	ldr	r1, [r7, #28]
 801f12c:	47a0      	blx	r4
 801f12e:	4603      	mov	r3, r0
 801f130:	74fb      	strb	r3, [r7, #19]
 801f132:	e008      	b.n	801f146 <tcp_input+0x602>
 801f134:	4b58      	ldr	r3, [pc, #352]	; (801f298 <tcp_input+0x754>)
 801f136:	681a      	ldr	r2, [r3, #0]
 801f138:	2300      	movs	r3, #0
 801f13a:	69f9      	ldr	r1, [r7, #28]
 801f13c:	2000      	movs	r0, #0
 801f13e:	f7ff f984 	bl	801e44a <tcp_recv_null>
 801f142:	4603      	mov	r3, r0
 801f144:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801f146:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f14a:	f113 0f0d 	cmn.w	r3, #13
 801f14e:	d051      	beq.n	801f1f4 <tcp_input+0x6b0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801f150:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f154:	2b00      	cmp	r3, #0
 801f156:	d003      	beq.n	801f160 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801f158:	4b4f      	ldr	r3, [pc, #316]	; (801f298 <tcp_input+0x754>)
 801f15a:	681a      	ldr	r2, [r3, #0]
 801f15c:	69fb      	ldr	r3, [r7, #28]
 801f15e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801f160:	4b4a      	ldr	r3, [pc, #296]	; (801f28c <tcp_input+0x748>)
 801f162:	781b      	ldrb	r3, [r3, #0]
 801f164:	f003 0320 	and.w	r3, r3, #32
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d030      	beq.n	801f1ce <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 801f16c:	69fb      	ldr	r3, [r7, #28]
 801f16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f170:	2b00      	cmp	r3, #0
 801f172:	d009      	beq.n	801f188 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801f174:	69fb      	ldr	r3, [r7, #28]
 801f176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f178:	69fa      	ldr	r2, [r7, #28]
 801f17a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801f17c:	7b52      	ldrb	r2, [r2, #13]
 801f17e:	f042 0220 	orr.w	r2, r2, #32
 801f182:	b2d2      	uxtb	r2, r2
 801f184:	735a      	strb	r2, [r3, #13]
 801f186:	e022      	b.n	801f1ce <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801f188:	69fb      	ldr	r3, [r7, #28]
 801f18a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f190:	d005      	beq.n	801f19e <tcp_input+0x65a>
              pcb->rcv_wnd++;
 801f192:	69fb      	ldr	r3, [r7, #28]
 801f194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f196:	3301      	adds	r3, #1
 801f198:	b29a      	uxth	r2, r3
 801f19a:	69fb      	ldr	r3, [r7, #28]
 801f19c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801f19e:	69fb      	ldr	r3, [r7, #28]
 801f1a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	d00b      	beq.n	801f1c0 <tcp_input+0x67c>
 801f1a8:	69fb      	ldr	r3, [r7, #28]
 801f1aa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801f1ae:	69fb      	ldr	r3, [r7, #28]
 801f1b0:	6918      	ldr	r0, [r3, #16]
 801f1b2:	2300      	movs	r3, #0
 801f1b4:	2200      	movs	r2, #0
 801f1b6:	69f9      	ldr	r1, [r7, #28]
 801f1b8:	47a0      	blx	r4
 801f1ba:	4603      	mov	r3, r0
 801f1bc:	74fb      	strb	r3, [r7, #19]
 801f1be:	e001      	b.n	801f1c4 <tcp_input+0x680>
 801f1c0:	2300      	movs	r3, #0
 801f1c2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801f1c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f1c8:	f113 0f0d 	cmn.w	r3, #13
 801f1cc:	d014      	beq.n	801f1f8 <tcp_input+0x6b4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801f1ce:	4b2e      	ldr	r3, [pc, #184]	; (801f288 <tcp_input+0x744>)
 801f1d0:	2200      	movs	r2, #0
 801f1d2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801f1d4:	69f8      	ldr	r0, [r7, #28]
 801f1d6:	f000 f875 	bl	801f2c4 <tcp_input_delayed_close>
 801f1da:	4603      	mov	r3, r0
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d10d      	bne.n	801f1fc <tcp_input+0x6b8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801f1e0:	69f8      	ldr	r0, [r7, #28]
 801f1e2:	f002 fd97 	bl	8021d14 <tcp_output>
 801f1e6:	e00a      	b.n	801f1fe <tcp_input+0x6ba>
        goto aborted;
 801f1e8:	bf00      	nop
 801f1ea:	e008      	b.n	801f1fe <tcp_input+0x6ba>
              goto aborted;
 801f1ec:	bf00      	nop
 801f1ee:	e006      	b.n	801f1fe <tcp_input+0x6ba>
          goto aborted;
 801f1f0:	bf00      	nop
 801f1f2:	e004      	b.n	801f1fe <tcp_input+0x6ba>
            goto aborted;
 801f1f4:	bf00      	nop
 801f1f6:	e002      	b.n	801f1fe <tcp_input+0x6ba>
              goto aborted;
 801f1f8:	bf00      	nop
 801f1fa:	e000      	b.n	801f1fe <tcp_input+0x6ba>
          goto aborted;
 801f1fc:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 801f1fe:	4b22      	ldr	r3, [pc, #136]	; (801f288 <tcp_input+0x744>)
 801f200:	2200      	movs	r2, #0
 801f202:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801f204:	4b24      	ldr	r3, [pc, #144]	; (801f298 <tcp_input+0x754>)
 801f206:	2200      	movs	r2, #0
 801f208:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 801f20a:	4b27      	ldr	r3, [pc, #156]	; (801f2a8 <tcp_input+0x764>)
 801f20c:	685b      	ldr	r3, [r3, #4]
 801f20e:	2b00      	cmp	r3, #0
 801f210:	d035      	beq.n	801f27e <tcp_input+0x73a>
    {
      pbuf_free(inseg.p);
 801f212:	4b25      	ldr	r3, [pc, #148]	; (801f2a8 <tcp_input+0x764>)
 801f214:	685b      	ldr	r3, [r3, #4]
 801f216:	4618      	mov	r0, r3
 801f218:	f7fd fdc8 	bl	801cdac <pbuf_free>
      inseg.p = NULL;
 801f21c:	4b22      	ldr	r3, [pc, #136]	; (801f2a8 <tcp_input+0x764>)
 801f21e:	2200      	movs	r2, #0
 801f220:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801f222:	e02c      	b.n	801f27e <tcp_input+0x73a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801f224:	4b21      	ldr	r3, [pc, #132]	; (801f2ac <tcp_input+0x768>)
 801f226:	681b      	ldr	r3, [r3, #0]
 801f228:	899b      	ldrh	r3, [r3, #12]
 801f22a:	b29b      	uxth	r3, r3
 801f22c:	4618      	mov	r0, r3
 801f22e:	f7fa f93f 	bl	80194b0 <lwip_htons>
 801f232:	4603      	mov	r3, r0
 801f234:	f003 0304 	and.w	r3, r3, #4
 801f238:	2b00      	cmp	r3, #0
 801f23a:	d115      	bne.n	801f268 <tcp_input+0x724>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f23c:	4b1c      	ldr	r3, [pc, #112]	; (801f2b0 <tcp_input+0x76c>)
 801f23e:	6818      	ldr	r0, [r3, #0]
 801f240:	4b1c      	ldr	r3, [pc, #112]	; (801f2b4 <tcp_input+0x770>)
 801f242:	881b      	ldrh	r3, [r3, #0]
 801f244:	461a      	mov	r2, r3
 801f246:	4b1c      	ldr	r3, [pc, #112]	; (801f2b8 <tcp_input+0x774>)
 801f248:	681b      	ldr	r3, [r3, #0]
 801f24a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f24c:	4b17      	ldr	r3, [pc, #92]	; (801f2ac <tcp_input+0x768>)
 801f24e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f250:	885b      	ldrh	r3, [r3, #2]
 801f252:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f254:	4a15      	ldr	r2, [pc, #84]	; (801f2ac <tcp_input+0x768>)
 801f256:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f258:	8812      	ldrh	r2, [r2, #0]
 801f25a:	b292      	uxth	r2, r2
 801f25c:	9201      	str	r2, [sp, #4]
 801f25e:	9300      	str	r3, [sp, #0]
 801f260:	4b16      	ldr	r3, [pc, #88]	; (801f2bc <tcp_input+0x778>)
 801f262:	4a17      	ldr	r2, [pc, #92]	; (801f2c0 <tcp_input+0x77c>)
 801f264:	f002 ffde 	bl	8022224 <tcp_rst>
    pbuf_free(p);
 801f268:	6878      	ldr	r0, [r7, #4]
 801f26a:	f7fd fd9f 	bl	801cdac <pbuf_free>
  return;
 801f26e:	e006      	b.n	801f27e <tcp_input+0x73a>
    goto dropped;
 801f270:	bf00      	nop
 801f272:	e000      	b.n	801f276 <tcp_input+0x732>
      goto dropped;
 801f274:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801f276:	6878      	ldr	r0, [r7, #4]
 801f278:	f7fd fd98 	bl	801cdac <pbuf_free>
 801f27c:	e000      	b.n	801f280 <tcp_input+0x73c>
  return;
 801f27e:	bf00      	nop
}
 801f280:	3724      	adds	r7, #36	; 0x24
 801f282:	46bd      	mov	sp, r7
 801f284:	bd90      	pop	{r4, r7, pc}
 801f286:	bf00      	nop
 801f288:	2000ecd8 	.word	0x2000ecd8
 801f28c:	20009519 	.word	0x20009519
 801f290:	2000ecc4 	.word	0x2000ecc4
 801f294:	20009514 	.word	0x20009514
 801f298:	2000951c 	.word	0x2000951c
 801f29c:	0802877c 	.word	0x0802877c
 801f2a0:	08028918 	.word	0x08028918
 801f2a4:	080287c0 	.word	0x080287c0
 801f2a8:	200094ec 	.word	0x200094ec
 801f2ac:	200094fc 	.word	0x200094fc
 801f2b0:	20009510 	.word	0x20009510
 801f2b4:	20009516 	.word	0x20009516
 801f2b8:	2000950c 	.word	0x2000950c
 801f2bc:	2000a270 	.word	0x2000a270
 801f2c0:	2000a274 	.word	0x2000a274

0801f2c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801f2c4:	b580      	push	{r7, lr}
 801f2c6:	b082      	sub	sp, #8
 801f2c8:	af00      	add	r7, sp, #0
 801f2ca:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 801f2cc:	4b14      	ldr	r3, [pc, #80]	; (801f320 <tcp_input_delayed_close+0x5c>)
 801f2ce:	781b      	ldrb	r3, [r3, #0]
 801f2d0:	f003 0310 	and.w	r3, r3, #16
 801f2d4:	2b00      	cmp	r3, #0
 801f2d6:	d01d      	beq.n	801f314 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	7e9b      	ldrb	r3, [r3, #26]
 801f2dc:	f003 0310 	and.w	r3, r3, #16
 801f2e0:	2b00      	cmp	r3, #0
 801f2e2:	d10d      	bne.n	801f300 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f2ea:	2b00      	cmp	r3, #0
 801f2ec:	d008      	beq.n	801f300 <tcp_input_delayed_close+0x3c>
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f2f4:	687a      	ldr	r2, [r7, #4]
 801f2f6:	6912      	ldr	r2, [r2, #16]
 801f2f8:	f06f 010e 	mvn.w	r1, #14
 801f2fc:	4610      	mov	r0, r2
 801f2fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801f300:	6879      	ldr	r1, [r7, #4]
 801f302:	4808      	ldr	r0, [pc, #32]	; (801f324 <tcp_input_delayed_close+0x60>)
 801f304:	f7ff fb04 	bl	801e910 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801f308:	6879      	ldr	r1, [r7, #4]
 801f30a:	2000      	movs	r0, #0
 801f30c:	f7fc fffc 	bl	801c308 <memp_free>
    return 1;
 801f310:	2301      	movs	r3, #1
 801f312:	e000      	b.n	801f316 <tcp_input_delayed_close+0x52>
  }
  return 0;
 801f314:	2300      	movs	r3, #0
}
 801f316:	4618      	mov	r0, r3
 801f318:	3708      	adds	r7, #8
 801f31a:	46bd      	mov	sp, r7
 801f31c:	bd80      	pop	{r7, pc}
 801f31e:	bf00      	nop
 801f320:	20009519 	.word	0x20009519
 801f324:	2000ecc4 	.word	0x2000ecc4

0801f328 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801f328:	b580      	push	{r7, lr}
 801f32a:	b088      	sub	sp, #32
 801f32c:	af02      	add	r7, sp, #8
 801f32e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801f330:	4b64      	ldr	r3, [pc, #400]	; (801f4c4 <tcp_listen_input+0x19c>)
 801f332:	781b      	ldrb	r3, [r3, #0]
 801f334:	f003 0304 	and.w	r3, r3, #4
 801f338:	2b00      	cmp	r3, #0
 801f33a:	f040 80bc 	bne.w	801f4b6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801f33e:	4b61      	ldr	r3, [pc, #388]	; (801f4c4 <tcp_listen_input+0x19c>)
 801f340:	781b      	ldrb	r3, [r3, #0]
 801f342:	f003 0310 	and.w	r3, r3, #16
 801f346:	2b00      	cmp	r3, #0
 801f348:	d016      	beq.n	801f378 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f34a:	4b5f      	ldr	r3, [pc, #380]	; (801f4c8 <tcp_listen_input+0x1a0>)
 801f34c:	6818      	ldr	r0, [r3, #0]
 801f34e:	4b5f      	ldr	r3, [pc, #380]	; (801f4cc <tcp_listen_input+0x1a4>)
 801f350:	881b      	ldrh	r3, [r3, #0]
 801f352:	461a      	mov	r2, r3
 801f354:	4b5e      	ldr	r3, [pc, #376]	; (801f4d0 <tcp_listen_input+0x1a8>)
 801f356:	681b      	ldr	r3, [r3, #0]
 801f358:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f35a:	4b5e      	ldr	r3, [pc, #376]	; (801f4d4 <tcp_listen_input+0x1ac>)
 801f35c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f35e:	885b      	ldrh	r3, [r3, #2]
 801f360:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f362:	4a5c      	ldr	r2, [pc, #368]	; (801f4d4 <tcp_listen_input+0x1ac>)
 801f364:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f366:	8812      	ldrh	r2, [r2, #0]
 801f368:	b292      	uxth	r2, r2
 801f36a:	9201      	str	r2, [sp, #4]
 801f36c:	9300      	str	r3, [sp, #0]
 801f36e:	4b5a      	ldr	r3, [pc, #360]	; (801f4d8 <tcp_listen_input+0x1b0>)
 801f370:	4a5a      	ldr	r2, [pc, #360]	; (801f4dc <tcp_listen_input+0x1b4>)
 801f372:	f002 ff57 	bl	8022224 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801f376:	e0a0      	b.n	801f4ba <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 801f378:	4b52      	ldr	r3, [pc, #328]	; (801f4c4 <tcp_listen_input+0x19c>)
 801f37a:	781b      	ldrb	r3, [r3, #0]
 801f37c:	f003 0302 	and.w	r3, r3, #2
 801f380:	2b00      	cmp	r3, #0
 801f382:	f000 809a 	beq.w	801f4ba <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 801f386:	687b      	ldr	r3, [r7, #4]
 801f388:	7d5b      	ldrb	r3, [r3, #21]
 801f38a:	4618      	mov	r0, r3
 801f38c:	f7ff f93c 	bl	801e608 <tcp_alloc>
 801f390:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801f392:	697b      	ldr	r3, [r7, #20]
 801f394:	2b00      	cmp	r3, #0
 801f396:	d111      	bne.n	801f3bc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	699b      	ldr	r3, [r3, #24]
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d00a      	beq.n	801f3b6 <tcp_listen_input+0x8e>
 801f3a0:	687b      	ldr	r3, [r7, #4]
 801f3a2:	699b      	ldr	r3, [r3, #24]
 801f3a4:	687a      	ldr	r2, [r7, #4]
 801f3a6:	6910      	ldr	r0, [r2, #16]
 801f3a8:	f04f 32ff 	mov.w	r2, #4294967295
 801f3ac:	2100      	movs	r1, #0
 801f3ae:	4798      	blx	r3
 801f3b0:	4603      	mov	r3, r0
 801f3b2:	74fb      	strb	r3, [r7, #19]
      return;
 801f3b4:	e082      	b.n	801f4bc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801f3b6:	23f0      	movs	r3, #240	; 0xf0
 801f3b8:	74fb      	strb	r3, [r7, #19]
      return;
 801f3ba:	e07f      	b.n	801f4bc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801f3bc:	4b48      	ldr	r3, [pc, #288]	; (801f4e0 <tcp_listen_input+0x1b8>)
 801f3be:	695a      	ldr	r2, [r3, #20]
 801f3c0:	697b      	ldr	r3, [r7, #20]
 801f3c2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801f3c4:	4b46      	ldr	r3, [pc, #280]	; (801f4e0 <tcp_listen_input+0x1b8>)
 801f3c6:	691a      	ldr	r2, [r3, #16]
 801f3c8:	697b      	ldr	r3, [r7, #20]
 801f3ca:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	8ada      	ldrh	r2, [r3, #22]
 801f3d0:	697b      	ldr	r3, [r7, #20]
 801f3d2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801f3d4:	4b3f      	ldr	r3, [pc, #252]	; (801f4d4 <tcp_listen_input+0x1ac>)
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	881b      	ldrh	r3, [r3, #0]
 801f3da:	b29a      	uxth	r2, r3
 801f3dc:	697b      	ldr	r3, [r7, #20]
 801f3de:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801f3e0:	697b      	ldr	r3, [r7, #20]
 801f3e2:	2203      	movs	r2, #3
 801f3e4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801f3e6:	4b3a      	ldr	r3, [pc, #232]	; (801f4d0 <tcp_listen_input+0x1a8>)
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	1c5a      	adds	r2, r3, #1
 801f3ec:	697b      	ldr	r3, [r7, #20]
 801f3ee:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801f3f0:	697b      	ldr	r3, [r7, #20]
 801f3f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f3f4:	697b      	ldr	r3, [r7, #20]
 801f3f6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801f3f8:	6978      	ldr	r0, [r7, #20]
 801f3fa:	f7ff fb05 	bl	801ea08 <tcp_next_iss>
 801f3fe:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 801f400:	697b      	ldr	r3, [r7, #20]
 801f402:	68fa      	ldr	r2, [r7, #12]
 801f404:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 801f406:	697b      	ldr	r3, [r7, #20]
 801f408:	68fa      	ldr	r2, [r7, #12]
 801f40a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 801f40c:	697b      	ldr	r3, [r7, #20]
 801f40e:	68fa      	ldr	r2, [r7, #12]
 801f410:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801f412:	697b      	ldr	r3, [r7, #20]
 801f414:	68fa      	ldr	r2, [r7, #12]
 801f416:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801f418:	4b2d      	ldr	r3, [pc, #180]	; (801f4d0 <tcp_listen_input+0x1a8>)
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	1e5a      	subs	r2, r3, #1
 801f41e:	697b      	ldr	r3, [r7, #20]
 801f420:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	691a      	ldr	r2, [r3, #16]
 801f426:	697b      	ldr	r3, [r7, #20]
 801f428:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801f42a:	697b      	ldr	r3, [r7, #20]
 801f42c:	687a      	ldr	r2, [r7, #4]
 801f42e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801f430:	687b      	ldr	r3, [r7, #4]
 801f432:	7a1b      	ldrb	r3, [r3, #8]
 801f434:	f003 030c 	and.w	r3, r3, #12
 801f438:	b2da      	uxtb	r2, r3
 801f43a:	697b      	ldr	r3, [r7, #20]
 801f43c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801f43e:	4b29      	ldr	r3, [pc, #164]	; (801f4e4 <tcp_listen_input+0x1bc>)
 801f440:	681a      	ldr	r2, [r3, #0]
 801f442:	697b      	ldr	r3, [r7, #20]
 801f444:	60da      	str	r2, [r3, #12]
 801f446:	4a27      	ldr	r2, [pc, #156]	; (801f4e4 <tcp_listen_input+0x1bc>)
 801f448:	697b      	ldr	r3, [r7, #20]
 801f44a:	6013      	str	r3, [r2, #0]
 801f44c:	f003 f938 	bl	80226c0 <tcp_timer_needed>
 801f450:	4b25      	ldr	r3, [pc, #148]	; (801f4e8 <tcp_listen_input+0x1c0>)
 801f452:	2201      	movs	r2, #1
 801f454:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801f456:	6978      	ldr	r0, [r7, #20]
 801f458:	f001 fd16 	bl	8020e88 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801f45c:	4b1d      	ldr	r3, [pc, #116]	; (801f4d4 <tcp_listen_input+0x1ac>)
 801f45e:	681b      	ldr	r3, [r3, #0]
 801f460:	89db      	ldrh	r3, [r3, #14]
 801f462:	b29a      	uxth	r2, r3
 801f464:	697b      	ldr	r3, [r7, #20]
 801f466:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 801f46a:	697b      	ldr	r3, [r7, #20]
 801f46c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801f470:	697b      	ldr	r3, [r7, #20]
 801f472:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801f476:	697b      	ldr	r3, [r7, #20]
 801f478:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801f47a:	697b      	ldr	r3, [r7, #20]
 801f47c:	3304      	adds	r3, #4
 801f47e:	4619      	mov	r1, r3
 801f480:	4610      	mov	r0, r2
 801f482:	f7ff fad9 	bl	801ea38 <tcp_eff_send_mss_impl>
 801f486:	4603      	mov	r3, r0
 801f488:	461a      	mov	r2, r3
 801f48a:	697b      	ldr	r3, [r7, #20]
 801f48c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801f48e:	2112      	movs	r1, #18
 801f490:	6978      	ldr	r0, [r7, #20]
 801f492:	f002 fae5 	bl	8021a60 <tcp_enqueue_flags>
 801f496:	4603      	mov	r3, r0
 801f498:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 801f49a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d004      	beq.n	801f4ac <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 801f4a2:	2100      	movs	r1, #0
 801f4a4:	6978      	ldr	r0, [r7, #20]
 801f4a6:	f7fe f915 	bl	801d6d4 <tcp_abandon>
      return;
 801f4aa:	e007      	b.n	801f4bc <tcp_listen_input+0x194>
    tcp_output(npcb);
 801f4ac:	6978      	ldr	r0, [r7, #20]
 801f4ae:	f002 fc31 	bl	8021d14 <tcp_output>
  return;
 801f4b2:	bf00      	nop
 801f4b4:	e001      	b.n	801f4ba <tcp_listen_input+0x192>
    return;
 801f4b6:	bf00      	nop
 801f4b8:	e000      	b.n	801f4bc <tcp_listen_input+0x194>
  return;
 801f4ba:	bf00      	nop
}
 801f4bc:	3718      	adds	r7, #24
 801f4be:	46bd      	mov	sp, r7
 801f4c0:	bd80      	pop	{r7, pc}
 801f4c2:	bf00      	nop
 801f4c4:	20009518 	.word	0x20009518
 801f4c8:	20009510 	.word	0x20009510
 801f4cc:	20009516 	.word	0x20009516
 801f4d0:	2000950c 	.word	0x2000950c
 801f4d4:	200094fc 	.word	0x200094fc
 801f4d8:	2000a270 	.word	0x2000a270
 801f4dc:	2000a274 	.word	0x2000a274
 801f4e0:	2000a260 	.word	0x2000a260
 801f4e4:	2000ecc4 	.word	0x2000ecc4
 801f4e8:	2000ecc0 	.word	0x2000ecc0

0801f4ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801f4ec:	b580      	push	{r7, lr}
 801f4ee:	b084      	sub	sp, #16
 801f4f0:	af02      	add	r7, sp, #8
 801f4f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801f4f4:	4b29      	ldr	r3, [pc, #164]	; (801f59c <tcp_timewait_input+0xb0>)
 801f4f6:	781b      	ldrb	r3, [r3, #0]
 801f4f8:	f003 0304 	and.w	r3, r3, #4
 801f4fc:	2b00      	cmp	r3, #0
 801f4fe:	d147      	bne.n	801f590 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801f500:	4b26      	ldr	r3, [pc, #152]	; (801f59c <tcp_timewait_input+0xb0>)
 801f502:	781b      	ldrb	r3, [r3, #0]
 801f504:	f003 0302 	and.w	r3, r3, #2
 801f508:	2b00      	cmp	r3, #0
 801f50a:	d027      	beq.n	801f55c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801f50c:	4b24      	ldr	r3, [pc, #144]	; (801f5a0 <tcp_timewait_input+0xb4>)
 801f50e:	681a      	ldr	r2, [r3, #0]
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f514:	1ad3      	subs	r3, r2, r3
 801f516:	2b00      	cmp	r3, #0
 801f518:	db2a      	blt.n	801f570 <tcp_timewait_input+0x84>
 801f51a:	4b21      	ldr	r3, [pc, #132]	; (801f5a0 <tcp_timewait_input+0xb4>)
 801f51c:	681a      	ldr	r2, [r3, #0]
 801f51e:	687b      	ldr	r3, [r7, #4]
 801f520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f522:	6879      	ldr	r1, [r7, #4]
 801f524:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f526:	440b      	add	r3, r1
 801f528:	1ad3      	subs	r3, r2, r3
 801f52a:	2b00      	cmp	r3, #0
 801f52c:	dc20      	bgt.n	801f570 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f52e:	4b1d      	ldr	r3, [pc, #116]	; (801f5a4 <tcp_timewait_input+0xb8>)
 801f530:	6818      	ldr	r0, [r3, #0]
 801f532:	4b1d      	ldr	r3, [pc, #116]	; (801f5a8 <tcp_timewait_input+0xbc>)
 801f534:	881b      	ldrh	r3, [r3, #0]
 801f536:	461a      	mov	r2, r3
 801f538:	4b19      	ldr	r3, [pc, #100]	; (801f5a0 <tcp_timewait_input+0xb4>)
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f53e:	4b1b      	ldr	r3, [pc, #108]	; (801f5ac <tcp_timewait_input+0xc0>)
 801f540:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f542:	885b      	ldrh	r3, [r3, #2]
 801f544:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f546:	4a19      	ldr	r2, [pc, #100]	; (801f5ac <tcp_timewait_input+0xc0>)
 801f548:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f54a:	8812      	ldrh	r2, [r2, #0]
 801f54c:	b292      	uxth	r2, r2
 801f54e:	9201      	str	r2, [sp, #4]
 801f550:	9300      	str	r3, [sp, #0]
 801f552:	4b17      	ldr	r3, [pc, #92]	; (801f5b0 <tcp_timewait_input+0xc4>)
 801f554:	4a17      	ldr	r2, [pc, #92]	; (801f5b4 <tcp_timewait_input+0xc8>)
 801f556:	f002 fe65 	bl	8022224 <tcp_rst>
      return;
 801f55a:	e01c      	b.n	801f596 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 801f55c:	4b0f      	ldr	r3, [pc, #60]	; (801f59c <tcp_timewait_input+0xb0>)
 801f55e:	781b      	ldrb	r3, [r3, #0]
 801f560:	f003 0301 	and.w	r3, r3, #1
 801f564:	2b00      	cmp	r3, #0
 801f566:	d003      	beq.n	801f570 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801f568:	4b13      	ldr	r3, [pc, #76]	; (801f5b8 <tcp_timewait_input+0xcc>)
 801f56a:	681a      	ldr	r2, [r3, #0]
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801f570:	4b0d      	ldr	r3, [pc, #52]	; (801f5a8 <tcp_timewait_input+0xbc>)
 801f572:	881b      	ldrh	r3, [r3, #0]
 801f574:	2b00      	cmp	r3, #0
 801f576:	d00d      	beq.n	801f594 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 801f578:	687b      	ldr	r3, [r7, #4]
 801f57a:	7e9b      	ldrb	r3, [r3, #26]
 801f57c:	f043 0302 	orr.w	r3, r3, #2
 801f580:	b2da      	uxtb	r2, r3
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801f586:	6878      	ldr	r0, [r7, #4]
 801f588:	f002 fbc4 	bl	8021d14 <tcp_output>
  }
  return;
 801f58c:	bf00      	nop
 801f58e:	e001      	b.n	801f594 <tcp_timewait_input+0xa8>
    return;
 801f590:	bf00      	nop
 801f592:	e000      	b.n	801f596 <tcp_timewait_input+0xaa>
  return;
 801f594:	bf00      	nop
}
 801f596:	3708      	adds	r7, #8
 801f598:	46bd      	mov	sp, r7
 801f59a:	bd80      	pop	{r7, pc}
 801f59c:	20009518 	.word	0x20009518
 801f5a0:	2000950c 	.word	0x2000950c
 801f5a4:	20009510 	.word	0x20009510
 801f5a8:	20009516 	.word	0x20009516
 801f5ac:	200094fc 	.word	0x200094fc
 801f5b0:	2000a270 	.word	0x2000a270
 801f5b4:	2000a274 	.word	0x2000a274
 801f5b8:	2000ecc8 	.word	0x2000ecc8

0801f5bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801f5bc:	b580      	push	{r7, lr}
 801f5be:	b08a      	sub	sp, #40	; 0x28
 801f5c0:	af02      	add	r7, sp, #8
 801f5c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801f5c4:	2300      	movs	r3, #0
 801f5c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801f5c8:	2300      	movs	r3, #0
 801f5ca:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801f5cc:	4ba4      	ldr	r3, [pc, #656]	; (801f860 <tcp_process+0x2a4>)
 801f5ce:	781b      	ldrb	r3, [r3, #0]
 801f5d0:	f003 0304 	and.w	r3, r3, #4
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	d04e      	beq.n	801f676 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	7d1b      	ldrb	r3, [r3, #20]
 801f5dc:	2b02      	cmp	r3, #2
 801f5de:	d108      	bne.n	801f5f2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f5e4:	4b9f      	ldr	r3, [pc, #636]	; (801f864 <tcp_process+0x2a8>)
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	429a      	cmp	r2, r3
 801f5ea:	d123      	bne.n	801f634 <tcp_process+0x78>
        acceptable = 1;
 801f5ec:	2301      	movs	r3, #1
 801f5ee:	76fb      	strb	r3, [r7, #27]
 801f5f0:	e020      	b.n	801f634 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f5f6:	4b9c      	ldr	r3, [pc, #624]	; (801f868 <tcp_process+0x2ac>)
 801f5f8:	681b      	ldr	r3, [r3, #0]
 801f5fa:	429a      	cmp	r2, r3
 801f5fc:	d102      	bne.n	801f604 <tcp_process+0x48>
        acceptable = 1;
 801f5fe:	2301      	movs	r3, #1
 801f600:	76fb      	strb	r3, [r7, #27]
 801f602:	e017      	b.n	801f634 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f604:	4b98      	ldr	r3, [pc, #608]	; (801f868 <tcp_process+0x2ac>)
 801f606:	681a      	ldr	r2, [r3, #0]
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f60c:	1ad3      	subs	r3, r2, r3
 801f60e:	2b00      	cmp	r3, #0
 801f610:	db10      	blt.n	801f634 <tcp_process+0x78>
 801f612:	4b95      	ldr	r3, [pc, #596]	; (801f868 <tcp_process+0x2ac>)
 801f614:	681a      	ldr	r2, [r3, #0]
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f61a:	6879      	ldr	r1, [r7, #4]
 801f61c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f61e:	440b      	add	r3, r1
 801f620:	1ad3      	subs	r3, r2, r3
 801f622:	2b00      	cmp	r3, #0
 801f624:	dc06      	bgt.n	801f634 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	7e9b      	ldrb	r3, [r3, #26]
 801f62a:	f043 0302 	orr.w	r3, r3, #2
 801f62e:	b2da      	uxtb	r2, r3
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801f634:	7efb      	ldrb	r3, [r7, #27]
 801f636:	2b00      	cmp	r3, #0
 801f638:	d01b      	beq.n	801f672 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	7d1b      	ldrb	r3, [r3, #20]
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d106      	bne.n	801f650 <tcp_process+0x94>
 801f642:	4b8a      	ldr	r3, [pc, #552]	; (801f86c <tcp_process+0x2b0>)
 801f644:	f240 22e7 	movw	r2, #743	; 0x2e7
 801f648:	4989      	ldr	r1, [pc, #548]	; (801f870 <tcp_process+0x2b4>)
 801f64a:	488a      	ldr	r0, [pc, #552]	; (801f874 <tcp_process+0x2b8>)
 801f64c:	f006 fc4c 	bl	8025ee8 <iprintf>
      recv_flags |= TF_RESET;
 801f650:	4b89      	ldr	r3, [pc, #548]	; (801f878 <tcp_process+0x2bc>)
 801f652:	781b      	ldrb	r3, [r3, #0]
 801f654:	f043 0308 	orr.w	r3, r3, #8
 801f658:	b2da      	uxtb	r2, r3
 801f65a:	4b87      	ldr	r3, [pc, #540]	; (801f878 <tcp_process+0x2bc>)
 801f65c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	7e9b      	ldrb	r3, [r3, #26]
 801f662:	f023 0301 	bic.w	r3, r3, #1
 801f666:	b2da      	uxtb	r2, r3
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801f66c:	f06f 030d 	mvn.w	r3, #13
 801f670:	e34d      	b.n	801fd0e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 801f672:	2300      	movs	r3, #0
 801f674:	e34b      	b.n	801fd0e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801f676:	4b7a      	ldr	r3, [pc, #488]	; (801f860 <tcp_process+0x2a4>)
 801f678:	781b      	ldrb	r3, [r3, #0]
 801f67a:	f003 0302 	and.w	r3, r3, #2
 801f67e:	2b00      	cmp	r3, #0
 801f680:	d010      	beq.n	801f6a4 <tcp_process+0xe8>
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	7d1b      	ldrb	r3, [r3, #20]
 801f686:	2b02      	cmp	r3, #2
 801f688:	d00c      	beq.n	801f6a4 <tcp_process+0xe8>
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	7d1b      	ldrb	r3, [r3, #20]
 801f68e:	2b03      	cmp	r3, #3
 801f690:	d008      	beq.n	801f6a4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	7e9b      	ldrb	r3, [r3, #26]
 801f696:	f043 0302 	orr.w	r3, r3, #2
 801f69a:	b2da      	uxtb	r2, r3
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 801f6a0:	2300      	movs	r3, #0
 801f6a2:	e334      	b.n	801fd0e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	7e9b      	ldrb	r3, [r3, #26]
 801f6a8:	f003 0310 	and.w	r3, r3, #16
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	d103      	bne.n	801f6b8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801f6b0:	4b72      	ldr	r3, [pc, #456]	; (801f87c <tcp_process+0x2c0>)
 801f6b2:	681a      	ldr	r2, [r3, #0]
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	2200      	movs	r2, #0
 801f6bc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 801f6c0:	6878      	ldr	r0, [r7, #4]
 801f6c2:	f001 fbe1 	bl	8020e88 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	7d1b      	ldrb	r3, [r3, #20]
 801f6ca:	3b02      	subs	r3, #2
 801f6cc:	2b07      	cmp	r3, #7
 801f6ce:	f200 830e 	bhi.w	801fcee <tcp_process+0x732>
 801f6d2:	a201      	add	r2, pc, #4	; (adr r2, 801f6d8 <tcp_process+0x11c>)
 801f6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f6d8:	0801f6f9 	.word	0x0801f6f9
 801f6dc:	0801f8f1 	.word	0x0801f8f1
 801f6e0:	0801fa49 	.word	0x0801fa49
 801f6e4:	0801fa73 	.word	0x0801fa73
 801f6e8:	0801fb9d 	.word	0x0801fb9d
 801f6ec:	0801fa49 	.word	0x0801fa49
 801f6f0:	0801fc29 	.word	0x0801fc29
 801f6f4:	0801fcb9 	.word	0x0801fcb9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801f6f8:	4b59      	ldr	r3, [pc, #356]	; (801f860 <tcp_process+0x2a4>)
 801f6fa:	781b      	ldrb	r3, [r3, #0]
 801f6fc:	f003 0310 	and.w	r3, r3, #16
 801f700:	2b00      	cmp	r3, #0
 801f702:	f000 80cb 	beq.w	801f89c <tcp_process+0x2e0>
 801f706:	4b56      	ldr	r3, [pc, #344]	; (801f860 <tcp_process+0x2a4>)
 801f708:	781b      	ldrb	r3, [r3, #0]
 801f70a:	f003 0302 	and.w	r3, r3, #2
 801f70e:	2b00      	cmp	r3, #0
 801f710:	f000 80c4 	beq.w	801f89c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f718:	1c5a      	adds	r2, r3, #1
 801f71a:	4b52      	ldr	r3, [pc, #328]	; (801f864 <tcp_process+0x2a8>)
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	429a      	cmp	r2, r3
 801f720:	f040 80bc 	bne.w	801f89c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 801f724:	4b50      	ldr	r3, [pc, #320]	; (801f868 <tcp_process+0x2ac>)
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	1c5a      	adds	r2, r3, #1
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 801f736:	4b4b      	ldr	r3, [pc, #300]	; (801f864 <tcp_process+0x2a8>)
 801f738:	681a      	ldr	r2, [r3, #0]
 801f73a:	687b      	ldr	r3, [r7, #4]
 801f73c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801f73e:	4b50      	ldr	r3, [pc, #320]	; (801f880 <tcp_process+0x2c4>)
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	89db      	ldrh	r3, [r3, #14]
 801f744:	b29a      	uxth	r2, r3
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 801f74c:	687b      	ldr	r3, [r7, #4]
 801f74e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801f758:	4b43      	ldr	r3, [pc, #268]	; (801f868 <tcp_process+0x2ac>)
 801f75a:	681b      	ldr	r3, [r3, #0]
 801f75c:	1e5a      	subs	r2, r3, #1
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	2204      	movs	r2, #4
 801f766:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	3304      	adds	r3, #4
 801f770:	4619      	mov	r1, r3
 801f772:	4610      	mov	r0, r2
 801f774:	f7ff f960 	bl	801ea38 <tcp_eff_send_mss_impl>
 801f778:	4603      	mov	r3, r0
 801f77a:	461a      	mov	r2, r3
 801f77c:	687b      	ldr	r3, [r7, #4]
 801f77e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f784:	005b      	lsls	r3, r3, #1
 801f786:	f241 121c 	movw	r2, #4380	; 0x111c
 801f78a:	429a      	cmp	r2, r3
 801f78c:	bf38      	it	cc
 801f78e:	461a      	movcc	r2, r3
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f794:	009b      	lsls	r3, r3, #2
 801f796:	4293      	cmp	r3, r2
 801f798:	bf28      	it	cs
 801f79a:	4613      	movcs	r3, r2
 801f79c:	b29a      	uxth	r2, r3
 801f79e:	687b      	ldr	r3, [r7, #4]
 801f7a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	d106      	bne.n	801f7bc <tcp_process+0x200>
 801f7ae:	4b2f      	ldr	r3, [pc, #188]	; (801f86c <tcp_process+0x2b0>)
 801f7b0:	f240 321a 	movw	r2, #794	; 0x31a
 801f7b4:	4933      	ldr	r1, [pc, #204]	; (801f884 <tcp_process+0x2c8>)
 801f7b6:	482f      	ldr	r0, [pc, #188]	; (801f874 <tcp_process+0x2b8>)
 801f7b8:	f006 fb96 	bl	8025ee8 <iprintf>
      --pcb->snd_queuelen;
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f7c2:	3b01      	subs	r3, #1
 801f7c4:	b29a      	uxth	r2, r3
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f7d0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 801f7d2:	69fb      	ldr	r3, [r7, #28]
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	d111      	bne.n	801f7fc <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f7dc:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801f7de:	69fb      	ldr	r3, [r7, #28]
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d106      	bne.n	801f7f2 <tcp_process+0x236>
 801f7e4:	4b21      	ldr	r3, [pc, #132]	; (801f86c <tcp_process+0x2b0>)
 801f7e6:	f240 3222 	movw	r2, #802	; 0x322
 801f7ea:	4927      	ldr	r1, [pc, #156]	; (801f888 <tcp_process+0x2cc>)
 801f7ec:	4821      	ldr	r0, [pc, #132]	; (801f874 <tcp_process+0x2b8>)
 801f7ee:	f006 fb7b 	bl	8025ee8 <iprintf>
        pcb->unsent = rseg->next;
 801f7f2:	69fb      	ldr	r3, [r7, #28]
 801f7f4:	681a      	ldr	r2, [r3, #0]
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	669a      	str	r2, [r3, #104]	; 0x68
 801f7fa:	e003      	b.n	801f804 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801f7fc:	69fb      	ldr	r3, [r7, #28]
 801f7fe:	681a      	ldr	r2, [r3, #0]
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 801f804:	69f8      	ldr	r0, [r7, #28]
 801f806:	f7fe fdec 	bl	801e3e2 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f80e:	2b00      	cmp	r3, #0
 801f810:	d104      	bne.n	801f81c <tcp_process+0x260>
        pcb->rtime = -1;
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f818:	861a      	strh	r2, [r3, #48]	; 0x30
 801f81a:	e006      	b.n	801f82a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	2200      	movs	r2, #0
 801f820:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 801f822:	687b      	ldr	r3, [r7, #4]
 801f824:	2200      	movs	r2, #0
 801f826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f830:	2b00      	cmp	r3, #0
 801f832:	d00a      	beq.n	801f84a <tcp_process+0x28e>
 801f834:	687b      	ldr	r3, [r7, #4]
 801f836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f83a:	687a      	ldr	r2, [r7, #4]
 801f83c:	6910      	ldr	r0, [r2, #16]
 801f83e:	2200      	movs	r2, #0
 801f840:	6879      	ldr	r1, [r7, #4]
 801f842:	4798      	blx	r3
 801f844:	4603      	mov	r3, r0
 801f846:	76bb      	strb	r3, [r7, #26]
 801f848:	e001      	b.n	801f84e <tcp_process+0x292>
 801f84a:	2300      	movs	r3, #0
 801f84c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801f84e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f852:	f113 0f0d 	cmn.w	r3, #13
 801f856:	d119      	bne.n	801f88c <tcp_process+0x2d0>
        return ERR_ABRT;
 801f858:	f06f 030c 	mvn.w	r3, #12
 801f85c:	e257      	b.n	801fd0e <tcp_process+0x752>
 801f85e:	bf00      	nop
 801f860:	20009518 	.word	0x20009518
 801f864:	20009510 	.word	0x20009510
 801f868:	2000950c 	.word	0x2000950c
 801f86c:	0802877c 	.word	0x0802877c
 801f870:	08028934 	.word	0x08028934
 801f874:	080287c0 	.word	0x080287c0
 801f878:	20009519 	.word	0x20009519
 801f87c:	2000ecc8 	.word	0x2000ecc8
 801f880:	200094fc 	.word	0x200094fc
 801f884:	08028954 	.word	0x08028954
 801f888:	0802896c 	.word	0x0802896c
      }
      tcp_ack_now(pcb);
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	7e9b      	ldrb	r3, [r3, #26]
 801f890:	f043 0302 	orr.w	r3, r3, #2
 801f894:	b2da      	uxtb	r2, r3
 801f896:	687b      	ldr	r3, [r7, #4]
 801f898:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801f89a:	e22a      	b.n	801fcf2 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 801f89c:	4b9f      	ldr	r3, [pc, #636]	; (801fb1c <tcp_process+0x560>)
 801f89e:	781b      	ldrb	r3, [r3, #0]
 801f8a0:	f003 0310 	and.w	r3, r3, #16
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	f000 8224 	beq.w	801fcf2 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8aa:	4b9d      	ldr	r3, [pc, #628]	; (801fb20 <tcp_process+0x564>)
 801f8ac:	6818      	ldr	r0, [r3, #0]
 801f8ae:	4b9d      	ldr	r3, [pc, #628]	; (801fb24 <tcp_process+0x568>)
 801f8b0:	881b      	ldrh	r3, [r3, #0]
 801f8b2:	461a      	mov	r2, r3
 801f8b4:	4b9c      	ldr	r3, [pc, #624]	; (801fb28 <tcp_process+0x56c>)
 801f8b6:	681b      	ldr	r3, [r3, #0]
 801f8b8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f8ba:	4b9c      	ldr	r3, [pc, #624]	; (801fb2c <tcp_process+0x570>)
 801f8bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8be:	885b      	ldrh	r3, [r3, #2]
 801f8c0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801f8c2:	4a9a      	ldr	r2, [pc, #616]	; (801fb2c <tcp_process+0x570>)
 801f8c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f8c6:	8812      	ldrh	r2, [r2, #0]
 801f8c8:	b292      	uxth	r2, r2
 801f8ca:	9201      	str	r2, [sp, #4]
 801f8cc:	9300      	str	r3, [sp, #0]
 801f8ce:	4b98      	ldr	r3, [pc, #608]	; (801fb30 <tcp_process+0x574>)
 801f8d0:	4a98      	ldr	r2, [pc, #608]	; (801fb34 <tcp_process+0x578>)
 801f8d2:	f002 fca7 	bl	8022224 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f8dc:	2b05      	cmp	r3, #5
 801f8de:	f200 8208 	bhi.w	801fcf2 <tcp_process+0x736>
        pcb->rtime = 0;
 801f8e2:	687b      	ldr	r3, [r7, #4]
 801f8e4:	2200      	movs	r2, #0
 801f8e6:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 801f8e8:	6878      	ldr	r0, [r7, #4]
 801f8ea:	f002 fd0f 	bl	802230c <tcp_rexmit_rto>
    break;
 801f8ee:	e200      	b.n	801fcf2 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 801f8f0:	4b8a      	ldr	r3, [pc, #552]	; (801fb1c <tcp_process+0x560>)
 801f8f2:	781b      	ldrb	r3, [r3, #0]
 801f8f4:	f003 0310 	and.w	r3, r3, #16
 801f8f8:	2b00      	cmp	r3, #0
 801f8fa:	f000 8091 	beq.w	801fa20 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801f8fe:	4b88      	ldr	r3, [pc, #544]	; (801fb20 <tcp_process+0x564>)
 801f900:	681a      	ldr	r2, [r3, #0]
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f906:	1ad3      	subs	r3, r2, r3
 801f908:	3b01      	subs	r3, #1
 801f90a:	2b00      	cmp	r3, #0
 801f90c:	db71      	blt.n	801f9f2 <tcp_process+0x436>
 801f90e:	4b84      	ldr	r3, [pc, #528]	; (801fb20 <tcp_process+0x564>)
 801f910:	681a      	ldr	r2, [r3, #0]
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f916:	1ad3      	subs	r3, r2, r3
 801f918:	2b00      	cmp	r3, #0
 801f91a:	dc6a      	bgt.n	801f9f2 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	2204      	movs	r2, #4
 801f920:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f926:	2b00      	cmp	r3, #0
 801f928:	d00b      	beq.n	801f942 <tcp_process+0x386>
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f92e:	699b      	ldr	r3, [r3, #24]
 801f930:	2b00      	cmp	r3, #0
 801f932:	d106      	bne.n	801f942 <tcp_process+0x386>
 801f934:	4b80      	ldr	r3, [pc, #512]	; (801fb38 <tcp_process+0x57c>)
 801f936:	f240 3251 	movw	r2, #849	; 0x351
 801f93a:	4980      	ldr	r1, [pc, #512]	; (801fb3c <tcp_process+0x580>)
 801f93c:	4880      	ldr	r0, [pc, #512]	; (801fb40 <tcp_process+0x584>)
 801f93e:	f006 fad3 	bl	8025ee8 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f946:	2b00      	cmp	r3, #0
 801f948:	d102      	bne.n	801f950 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 801f94a:	23fa      	movs	r3, #250	; 0xfa
 801f94c:	76bb      	strb	r3, [r7, #26]
 801f94e:	e011      	b.n	801f974 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f954:	699b      	ldr	r3, [r3, #24]
 801f956:	2b00      	cmp	r3, #0
 801f958:	d00a      	beq.n	801f970 <tcp_process+0x3b4>
 801f95a:	687b      	ldr	r3, [r7, #4]
 801f95c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f95e:	699b      	ldr	r3, [r3, #24]
 801f960:	687a      	ldr	r2, [r7, #4]
 801f962:	6910      	ldr	r0, [r2, #16]
 801f964:	2200      	movs	r2, #0
 801f966:	6879      	ldr	r1, [r7, #4]
 801f968:	4798      	blx	r3
 801f96a:	4603      	mov	r3, r0
 801f96c:	76bb      	strb	r3, [r7, #26]
 801f96e:	e001      	b.n	801f974 <tcp_process+0x3b8>
 801f970:	23f0      	movs	r3, #240	; 0xf0
 801f972:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801f974:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f978:	2b00      	cmp	r3, #0
 801f97a:	d00a      	beq.n	801f992 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801f97c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801f980:	f113 0f0d 	cmn.w	r3, #13
 801f984:	d002      	beq.n	801f98c <tcp_process+0x3d0>
            tcp_abort(pcb);
 801f986:	6878      	ldr	r0, [r7, #4]
 801f988:	f7fd ff56 	bl	801d838 <tcp_abort>
          }
          return ERR_ABRT;
 801f98c:	f06f 030c 	mvn.w	r3, #12
 801f990:	e1bd      	b.n	801fd0e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801f992:	6878      	ldr	r0, [r7, #4]
 801f994:	f000 fa42 	bl	801fe1c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 801f998:	4b6a      	ldr	r3, [pc, #424]	; (801fb44 <tcp_process+0x588>)
 801f99a:	881b      	ldrh	r3, [r3, #0]
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	d005      	beq.n	801f9ac <tcp_process+0x3f0>
          recv_acked--;
 801f9a0:	4b68      	ldr	r3, [pc, #416]	; (801fb44 <tcp_process+0x588>)
 801f9a2:	881b      	ldrh	r3, [r3, #0]
 801f9a4:	3b01      	subs	r3, #1
 801f9a6:	b29a      	uxth	r2, r3
 801f9a8:	4b66      	ldr	r3, [pc, #408]	; (801fb44 <tcp_process+0x588>)
 801f9aa:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f9b0:	005b      	lsls	r3, r3, #1
 801f9b2:	f241 121c 	movw	r2, #4380	; 0x111c
 801f9b6:	429a      	cmp	r2, r3
 801f9b8:	bf38      	it	cc
 801f9ba:	461a      	movcc	r2, r3
 801f9bc:	687b      	ldr	r3, [r7, #4]
 801f9be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f9c0:	009b      	lsls	r3, r3, #2
 801f9c2:	4293      	cmp	r3, r2
 801f9c4:	bf28      	it	cs
 801f9c6:	4613      	movcs	r3, r2
 801f9c8:	b29a      	uxth	r2, r3
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 801f9d0:	4b5d      	ldr	r3, [pc, #372]	; (801fb48 <tcp_process+0x58c>)
 801f9d2:	781b      	ldrb	r3, [r3, #0]
 801f9d4:	f003 0320 	and.w	r3, r3, #32
 801f9d8:	2b00      	cmp	r3, #0
 801f9da:	d034      	beq.n	801fa46 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801f9dc:	687b      	ldr	r3, [r7, #4]
 801f9de:	7e9b      	ldrb	r3, [r3, #26]
 801f9e0:	f043 0302 	orr.w	r3, r3, #2
 801f9e4:	b2da      	uxtb	r2, r3
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801f9ea:	687b      	ldr	r3, [r7, #4]
 801f9ec:	2207      	movs	r2, #7
 801f9ee:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 801f9f0:	e029      	b.n	801fa46 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801f9f2:	4b4b      	ldr	r3, [pc, #300]	; (801fb20 <tcp_process+0x564>)
 801f9f4:	6818      	ldr	r0, [r3, #0]
 801f9f6:	4b4b      	ldr	r3, [pc, #300]	; (801fb24 <tcp_process+0x568>)
 801f9f8:	881b      	ldrh	r3, [r3, #0]
 801f9fa:	461a      	mov	r2, r3
 801f9fc:	4b4a      	ldr	r3, [pc, #296]	; (801fb28 <tcp_process+0x56c>)
 801f9fe:	681b      	ldr	r3, [r3, #0]
 801fa00:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801fa02:	4b4a      	ldr	r3, [pc, #296]	; (801fb2c <tcp_process+0x570>)
 801fa04:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801fa06:	885b      	ldrh	r3, [r3, #2]
 801fa08:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801fa0a:	4a48      	ldr	r2, [pc, #288]	; (801fb2c <tcp_process+0x570>)
 801fa0c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801fa0e:	8812      	ldrh	r2, [r2, #0]
 801fa10:	b292      	uxth	r2, r2
 801fa12:	9201      	str	r2, [sp, #4]
 801fa14:	9300      	str	r3, [sp, #0]
 801fa16:	4b46      	ldr	r3, [pc, #280]	; (801fb30 <tcp_process+0x574>)
 801fa18:	4a46      	ldr	r2, [pc, #280]	; (801fb34 <tcp_process+0x578>)
 801fa1a:	f002 fc03 	bl	8022224 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801fa1e:	e16a      	b.n	801fcf6 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801fa20:	4b3e      	ldr	r3, [pc, #248]	; (801fb1c <tcp_process+0x560>)
 801fa22:	781b      	ldrb	r3, [r3, #0]
 801fa24:	f003 0302 	and.w	r3, r3, #2
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	f000 8164 	beq.w	801fcf6 <tcp_process+0x73a>
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa32:	1e5a      	subs	r2, r3, #1
 801fa34:	4b3c      	ldr	r3, [pc, #240]	; (801fb28 <tcp_process+0x56c>)
 801fa36:	681b      	ldr	r3, [r3, #0]
 801fa38:	429a      	cmp	r2, r3
 801fa3a:	f040 815c 	bne.w	801fcf6 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 801fa3e:	6878      	ldr	r0, [r7, #4]
 801fa40:	f002 fc9a 	bl	8022378 <tcp_rexmit>
    break;
 801fa44:	e157      	b.n	801fcf6 <tcp_process+0x73a>
 801fa46:	e156      	b.n	801fcf6 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 801fa48:	6878      	ldr	r0, [r7, #4]
 801fa4a:	f000 f9e7 	bl	801fe1c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801fa4e:	4b3e      	ldr	r3, [pc, #248]	; (801fb48 <tcp_process+0x58c>)
 801fa50:	781b      	ldrb	r3, [r3, #0]
 801fa52:	f003 0320 	and.w	r3, r3, #32
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	f000 814f 	beq.w	801fcfa <tcp_process+0x73e>
      tcp_ack_now(pcb);
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	7e9b      	ldrb	r3, [r3, #26]
 801fa60:	f043 0302 	orr.w	r3, r3, #2
 801fa64:	b2da      	uxtb	r2, r3
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 801fa6a:	687b      	ldr	r3, [r7, #4]
 801fa6c:	2207      	movs	r2, #7
 801fa6e:	751a      	strb	r2, [r3, #20]
    }
    break;
 801fa70:	e143      	b.n	801fcfa <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801fa72:	6878      	ldr	r0, [r7, #4]
 801fa74:	f000 f9d2 	bl	801fe1c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801fa78:	4b33      	ldr	r3, [pc, #204]	; (801fb48 <tcp_process+0x58c>)
 801fa7a:	781b      	ldrb	r3, [r3, #0]
 801fa7c:	f003 0320 	and.w	r3, r3, #32
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	d074      	beq.n	801fb6e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801fa84:	4b25      	ldr	r3, [pc, #148]	; (801fb1c <tcp_process+0x560>)
 801fa86:	781b      	ldrb	r3, [r3, #0]
 801fa88:	f003 0310 	and.w	r3, r3, #16
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	d063      	beq.n	801fb58 <tcp_process+0x59c>
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fa94:	4b22      	ldr	r3, [pc, #136]	; (801fb20 <tcp_process+0x564>)
 801fa96:	681b      	ldr	r3, [r3, #0]
 801fa98:	429a      	cmp	r2, r3
 801fa9a:	d15d      	bne.n	801fb58 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 801fa9c:	687b      	ldr	r3, [r7, #4]
 801fa9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	d159      	bne.n	801fb58 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	7e9b      	ldrb	r3, [r3, #26]
 801faa8:	f043 0302 	orr.w	r3, r3, #2
 801faac:	b2da      	uxtb	r2, r3
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801fab2:	6878      	ldr	r0, [r7, #4]
 801fab4:	f7fe feea 	bl	801e88c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801fab8:	4b24      	ldr	r3, [pc, #144]	; (801fb4c <tcp_process+0x590>)
 801faba:	681a      	ldr	r2, [r3, #0]
 801fabc:	687b      	ldr	r3, [r7, #4]
 801fabe:	429a      	cmp	r2, r3
 801fac0:	d105      	bne.n	801face <tcp_process+0x512>
 801fac2:	4b22      	ldr	r3, [pc, #136]	; (801fb4c <tcp_process+0x590>)
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	68db      	ldr	r3, [r3, #12]
 801fac8:	4a20      	ldr	r2, [pc, #128]	; (801fb4c <tcp_process+0x590>)
 801faca:	6013      	str	r3, [r2, #0]
 801facc:	e013      	b.n	801faf6 <tcp_process+0x53a>
 801face:	4b1f      	ldr	r3, [pc, #124]	; (801fb4c <tcp_process+0x590>)
 801fad0:	681b      	ldr	r3, [r3, #0]
 801fad2:	617b      	str	r3, [r7, #20]
 801fad4:	e00c      	b.n	801faf0 <tcp_process+0x534>
 801fad6:	697b      	ldr	r3, [r7, #20]
 801fad8:	68da      	ldr	r2, [r3, #12]
 801fada:	687b      	ldr	r3, [r7, #4]
 801fadc:	429a      	cmp	r2, r3
 801fade:	d104      	bne.n	801faea <tcp_process+0x52e>
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	68da      	ldr	r2, [r3, #12]
 801fae4:	697b      	ldr	r3, [r7, #20]
 801fae6:	60da      	str	r2, [r3, #12]
 801fae8:	e005      	b.n	801faf6 <tcp_process+0x53a>
 801faea:	697b      	ldr	r3, [r7, #20]
 801faec:	68db      	ldr	r3, [r3, #12]
 801faee:	617b      	str	r3, [r7, #20]
 801faf0:	697b      	ldr	r3, [r7, #20]
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	d1ef      	bne.n	801fad6 <tcp_process+0x51a>
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	2200      	movs	r2, #0
 801fafa:	60da      	str	r2, [r3, #12]
 801fafc:	4b14      	ldr	r3, [pc, #80]	; (801fb50 <tcp_process+0x594>)
 801fafe:	2201      	movs	r2, #1
 801fb00:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	220a      	movs	r2, #10
 801fb06:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801fb08:	4b12      	ldr	r3, [pc, #72]	; (801fb54 <tcp_process+0x598>)
 801fb0a:	681a      	ldr	r2, [r3, #0]
 801fb0c:	687b      	ldr	r3, [r7, #4]
 801fb0e:	60da      	str	r2, [r3, #12]
 801fb10:	4a10      	ldr	r2, [pc, #64]	; (801fb54 <tcp_process+0x598>)
 801fb12:	687b      	ldr	r3, [r7, #4]
 801fb14:	6013      	str	r3, [r2, #0]
 801fb16:	f002 fdd3 	bl	80226c0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801fb1a:	e0f0      	b.n	801fcfe <tcp_process+0x742>
 801fb1c:	20009518 	.word	0x20009518
 801fb20:	20009510 	.word	0x20009510
 801fb24:	20009516 	.word	0x20009516
 801fb28:	2000950c 	.word	0x2000950c
 801fb2c:	200094fc 	.word	0x200094fc
 801fb30:	2000a270 	.word	0x2000a270
 801fb34:	2000a274 	.word	0x2000a274
 801fb38:	0802877c 	.word	0x0802877c
 801fb3c:	08028980 	.word	0x08028980
 801fb40:	080287c0 	.word	0x080287c0
 801fb44:	20009514 	.word	0x20009514
 801fb48:	20009519 	.word	0x20009519
 801fb4c:	2000ecc4 	.word	0x2000ecc4
 801fb50:	2000ecc0 	.word	0x2000ecc0
 801fb54:	2000ecd4 	.word	0x2000ecd4
        tcp_ack_now(pcb);
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	7e9b      	ldrb	r3, [r3, #26]
 801fb5c:	f043 0302 	orr.w	r3, r3, #2
 801fb60:	b2da      	uxtb	r2, r3
 801fb62:	687b      	ldr	r3, [r7, #4]
 801fb64:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	2208      	movs	r2, #8
 801fb6a:	751a      	strb	r2, [r3, #20]
    break;
 801fb6c:	e0c7      	b.n	801fcfe <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801fb6e:	4b6a      	ldr	r3, [pc, #424]	; (801fd18 <tcp_process+0x75c>)
 801fb70:	781b      	ldrb	r3, [r3, #0]
 801fb72:	f003 0310 	and.w	r3, r3, #16
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	f000 80c1 	beq.w	801fcfe <tcp_process+0x742>
 801fb7c:	687b      	ldr	r3, [r7, #4]
 801fb7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fb80:	4b66      	ldr	r3, [pc, #408]	; (801fd1c <tcp_process+0x760>)
 801fb82:	681b      	ldr	r3, [r3, #0]
 801fb84:	429a      	cmp	r2, r3
 801fb86:	f040 80ba 	bne.w	801fcfe <tcp_process+0x742>
               pcb->unsent == NULL) {
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801fb8e:	2b00      	cmp	r3, #0
 801fb90:	f040 80b5 	bne.w	801fcfe <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 801fb94:	687b      	ldr	r3, [r7, #4]
 801fb96:	2206      	movs	r2, #6
 801fb98:	751a      	strb	r2, [r3, #20]
    break;
 801fb9a:	e0b0      	b.n	801fcfe <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801fb9c:	6878      	ldr	r0, [r7, #4]
 801fb9e:	f000 f93d 	bl	801fe1c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801fba2:	4b5f      	ldr	r3, [pc, #380]	; (801fd20 <tcp_process+0x764>)
 801fba4:	781b      	ldrb	r3, [r3, #0]
 801fba6:	f003 0320 	and.w	r3, r3, #32
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	f000 80a9 	beq.w	801fd02 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 801fbb0:	687b      	ldr	r3, [r7, #4]
 801fbb2:	7e9b      	ldrb	r3, [r3, #26]
 801fbb4:	f043 0302 	orr.w	r3, r3, #2
 801fbb8:	b2da      	uxtb	r2, r3
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801fbbe:	6878      	ldr	r0, [r7, #4]
 801fbc0:	f7fe fe64 	bl	801e88c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801fbc4:	4b57      	ldr	r3, [pc, #348]	; (801fd24 <tcp_process+0x768>)
 801fbc6:	681a      	ldr	r2, [r3, #0]
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	429a      	cmp	r2, r3
 801fbcc:	d105      	bne.n	801fbda <tcp_process+0x61e>
 801fbce:	4b55      	ldr	r3, [pc, #340]	; (801fd24 <tcp_process+0x768>)
 801fbd0:	681b      	ldr	r3, [r3, #0]
 801fbd2:	68db      	ldr	r3, [r3, #12]
 801fbd4:	4a53      	ldr	r2, [pc, #332]	; (801fd24 <tcp_process+0x768>)
 801fbd6:	6013      	str	r3, [r2, #0]
 801fbd8:	e013      	b.n	801fc02 <tcp_process+0x646>
 801fbda:	4b52      	ldr	r3, [pc, #328]	; (801fd24 <tcp_process+0x768>)
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	613b      	str	r3, [r7, #16]
 801fbe0:	e00c      	b.n	801fbfc <tcp_process+0x640>
 801fbe2:	693b      	ldr	r3, [r7, #16]
 801fbe4:	68da      	ldr	r2, [r3, #12]
 801fbe6:	687b      	ldr	r3, [r7, #4]
 801fbe8:	429a      	cmp	r2, r3
 801fbea:	d104      	bne.n	801fbf6 <tcp_process+0x63a>
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	68da      	ldr	r2, [r3, #12]
 801fbf0:	693b      	ldr	r3, [r7, #16]
 801fbf2:	60da      	str	r2, [r3, #12]
 801fbf4:	e005      	b.n	801fc02 <tcp_process+0x646>
 801fbf6:	693b      	ldr	r3, [r7, #16]
 801fbf8:	68db      	ldr	r3, [r3, #12]
 801fbfa:	613b      	str	r3, [r7, #16]
 801fbfc:	693b      	ldr	r3, [r7, #16]
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	d1ef      	bne.n	801fbe2 <tcp_process+0x626>
 801fc02:	687b      	ldr	r3, [r7, #4]
 801fc04:	2200      	movs	r2, #0
 801fc06:	60da      	str	r2, [r3, #12]
 801fc08:	4b47      	ldr	r3, [pc, #284]	; (801fd28 <tcp_process+0x76c>)
 801fc0a:	2201      	movs	r2, #1
 801fc0c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801fc0e:	687b      	ldr	r3, [r7, #4]
 801fc10:	220a      	movs	r2, #10
 801fc12:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801fc14:	4b45      	ldr	r3, [pc, #276]	; (801fd2c <tcp_process+0x770>)
 801fc16:	681a      	ldr	r2, [r3, #0]
 801fc18:	687b      	ldr	r3, [r7, #4]
 801fc1a:	60da      	str	r2, [r3, #12]
 801fc1c:	4a43      	ldr	r2, [pc, #268]	; (801fd2c <tcp_process+0x770>)
 801fc1e:	687b      	ldr	r3, [r7, #4]
 801fc20:	6013      	str	r3, [r2, #0]
 801fc22:	f002 fd4d 	bl	80226c0 <tcp_timer_needed>
    }
    break;
 801fc26:	e06c      	b.n	801fd02 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 801fc28:	6878      	ldr	r0, [r7, #4]
 801fc2a:	f000 f8f7 	bl	801fe1c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801fc2e:	4b3a      	ldr	r3, [pc, #232]	; (801fd18 <tcp_process+0x75c>)
 801fc30:	781b      	ldrb	r3, [r3, #0]
 801fc32:	f003 0310 	and.w	r3, r3, #16
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	d065      	beq.n	801fd06 <tcp_process+0x74a>
 801fc3a:	687b      	ldr	r3, [r7, #4]
 801fc3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fc3e:	4b37      	ldr	r3, [pc, #220]	; (801fd1c <tcp_process+0x760>)
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	429a      	cmp	r2, r3
 801fc44:	d15f      	bne.n	801fd06 <tcp_process+0x74a>
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	d15b      	bne.n	801fd06 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801fc4e:	6878      	ldr	r0, [r7, #4]
 801fc50:	f7fe fe1c 	bl	801e88c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801fc54:	4b33      	ldr	r3, [pc, #204]	; (801fd24 <tcp_process+0x768>)
 801fc56:	681a      	ldr	r2, [r3, #0]
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	429a      	cmp	r2, r3
 801fc5c:	d105      	bne.n	801fc6a <tcp_process+0x6ae>
 801fc5e:	4b31      	ldr	r3, [pc, #196]	; (801fd24 <tcp_process+0x768>)
 801fc60:	681b      	ldr	r3, [r3, #0]
 801fc62:	68db      	ldr	r3, [r3, #12]
 801fc64:	4a2f      	ldr	r2, [pc, #188]	; (801fd24 <tcp_process+0x768>)
 801fc66:	6013      	str	r3, [r2, #0]
 801fc68:	e013      	b.n	801fc92 <tcp_process+0x6d6>
 801fc6a:	4b2e      	ldr	r3, [pc, #184]	; (801fd24 <tcp_process+0x768>)
 801fc6c:	681b      	ldr	r3, [r3, #0]
 801fc6e:	60fb      	str	r3, [r7, #12]
 801fc70:	e00c      	b.n	801fc8c <tcp_process+0x6d0>
 801fc72:	68fb      	ldr	r3, [r7, #12]
 801fc74:	68da      	ldr	r2, [r3, #12]
 801fc76:	687b      	ldr	r3, [r7, #4]
 801fc78:	429a      	cmp	r2, r3
 801fc7a:	d104      	bne.n	801fc86 <tcp_process+0x6ca>
 801fc7c:	687b      	ldr	r3, [r7, #4]
 801fc7e:	68da      	ldr	r2, [r3, #12]
 801fc80:	68fb      	ldr	r3, [r7, #12]
 801fc82:	60da      	str	r2, [r3, #12]
 801fc84:	e005      	b.n	801fc92 <tcp_process+0x6d6>
 801fc86:	68fb      	ldr	r3, [r7, #12]
 801fc88:	68db      	ldr	r3, [r3, #12]
 801fc8a:	60fb      	str	r3, [r7, #12]
 801fc8c:	68fb      	ldr	r3, [r7, #12]
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	d1ef      	bne.n	801fc72 <tcp_process+0x6b6>
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	2200      	movs	r2, #0
 801fc96:	60da      	str	r2, [r3, #12]
 801fc98:	4b23      	ldr	r3, [pc, #140]	; (801fd28 <tcp_process+0x76c>)
 801fc9a:	2201      	movs	r2, #1
 801fc9c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	220a      	movs	r2, #10
 801fca2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801fca4:	4b21      	ldr	r3, [pc, #132]	; (801fd2c <tcp_process+0x770>)
 801fca6:	681a      	ldr	r2, [r3, #0]
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	60da      	str	r2, [r3, #12]
 801fcac:	4a1f      	ldr	r2, [pc, #124]	; (801fd2c <tcp_process+0x770>)
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	6013      	str	r3, [r2, #0]
 801fcb2:	f002 fd05 	bl	80226c0 <tcp_timer_needed>
    }
    break;
 801fcb6:	e026      	b.n	801fd06 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 801fcb8:	6878      	ldr	r0, [r7, #4]
 801fcba:	f000 f8af 	bl	801fe1c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801fcbe:	4b16      	ldr	r3, [pc, #88]	; (801fd18 <tcp_process+0x75c>)
 801fcc0:	781b      	ldrb	r3, [r3, #0]
 801fcc2:	f003 0310 	and.w	r3, r3, #16
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d01f      	beq.n	801fd0a <tcp_process+0x74e>
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fcce:	4b13      	ldr	r3, [pc, #76]	; (801fd1c <tcp_process+0x760>)
 801fcd0:	681b      	ldr	r3, [r3, #0]
 801fcd2:	429a      	cmp	r2, r3
 801fcd4:	d119      	bne.n	801fd0a <tcp_process+0x74e>
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fcda:	2b00      	cmp	r3, #0
 801fcdc:	d115      	bne.n	801fd0a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801fcde:	4b10      	ldr	r3, [pc, #64]	; (801fd20 <tcp_process+0x764>)
 801fce0:	781b      	ldrb	r3, [r3, #0]
 801fce2:	f043 0310 	orr.w	r3, r3, #16
 801fce6:	b2da      	uxtb	r2, r3
 801fce8:	4b0d      	ldr	r3, [pc, #52]	; (801fd20 <tcp_process+0x764>)
 801fcea:	701a      	strb	r2, [r3, #0]
    }
    break;
 801fcec:	e00d      	b.n	801fd0a <tcp_process+0x74e>
  default:
    break;
 801fcee:	bf00      	nop
 801fcf0:	e00c      	b.n	801fd0c <tcp_process+0x750>
    break;
 801fcf2:	bf00      	nop
 801fcf4:	e00a      	b.n	801fd0c <tcp_process+0x750>
    break;
 801fcf6:	bf00      	nop
 801fcf8:	e008      	b.n	801fd0c <tcp_process+0x750>
    break;
 801fcfa:	bf00      	nop
 801fcfc:	e006      	b.n	801fd0c <tcp_process+0x750>
    break;
 801fcfe:	bf00      	nop
 801fd00:	e004      	b.n	801fd0c <tcp_process+0x750>
    break;
 801fd02:	bf00      	nop
 801fd04:	e002      	b.n	801fd0c <tcp_process+0x750>
    break;
 801fd06:	bf00      	nop
 801fd08:	e000      	b.n	801fd0c <tcp_process+0x750>
    break;
 801fd0a:	bf00      	nop
  }
  return ERR_OK;
 801fd0c:	2300      	movs	r3, #0
}
 801fd0e:	4618      	mov	r0, r3
 801fd10:	3720      	adds	r7, #32
 801fd12:	46bd      	mov	sp, r7
 801fd14:	bd80      	pop	{r7, pc}
 801fd16:	bf00      	nop
 801fd18:	20009518 	.word	0x20009518
 801fd1c:	20009510 	.word	0x20009510
 801fd20:	20009519 	.word	0x20009519
 801fd24:	2000ecc4 	.word	0x2000ecc4
 801fd28:	2000ecc0 	.word	0x2000ecc0
 801fd2c:	2000ecd4 	.word	0x2000ecd4

0801fd30 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801fd30:	b5b0      	push	{r4, r5, r7, lr}
 801fd32:	b084      	sub	sp, #16
 801fd34:	af00      	add	r7, sp, #0
 801fd36:	6078      	str	r0, [r7, #4]
 801fd38:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801fd3a:	687b      	ldr	r3, [r7, #4]
 801fd3c:	68db      	ldr	r3, [r3, #12]
 801fd3e:	899b      	ldrh	r3, [r3, #12]
 801fd40:	b29b      	uxth	r3, r3
 801fd42:	4618      	mov	r0, r3
 801fd44:	f7f9 fbb4 	bl	80194b0 <lwip_htons>
 801fd48:	4603      	mov	r3, r0
 801fd4a:	f003 0301 	and.w	r3, r3, #1
 801fd4e:	2b00      	cmp	r3, #0
 801fd50:	d026      	beq.n	801fda0 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801fd52:	6838      	ldr	r0, [r7, #0]
 801fd54:	f7fe fb31 	bl	801e3ba <tcp_segs_free>
    next = NULL;
 801fd58:	2300      	movs	r3, #0
 801fd5a:	603b      	str	r3, [r7, #0]
 801fd5c:	e054      	b.n	801fe08 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801fd5e:	683b      	ldr	r3, [r7, #0]
 801fd60:	68db      	ldr	r3, [r3, #12]
 801fd62:	899b      	ldrh	r3, [r3, #12]
 801fd64:	b29b      	uxth	r3, r3
 801fd66:	4618      	mov	r0, r3
 801fd68:	f7f9 fba2 	bl	80194b0 <lwip_htons>
 801fd6c:	4603      	mov	r3, r0
 801fd6e:	f003 0301 	and.w	r3, r3, #1
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	d00c      	beq.n	801fd90 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	68dc      	ldr	r4, [r3, #12]
 801fd7a:	687b      	ldr	r3, [r7, #4]
 801fd7c:	68db      	ldr	r3, [r3, #12]
 801fd7e:	899b      	ldrh	r3, [r3, #12]
 801fd80:	b29d      	uxth	r5, r3
 801fd82:	2001      	movs	r0, #1
 801fd84:	f7f9 fb94 	bl	80194b0 <lwip_htons>
 801fd88:	4603      	mov	r3, r0
 801fd8a:	432b      	orrs	r3, r5
 801fd8c:	b29b      	uxth	r3, r3
 801fd8e:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 801fd90:	683b      	ldr	r3, [r7, #0]
 801fd92:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801fd94:	683b      	ldr	r3, [r7, #0]
 801fd96:	681b      	ldr	r3, [r3, #0]
 801fd98:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801fd9a:	68f8      	ldr	r0, [r7, #12]
 801fd9c:	f7fe fb21 	bl	801e3e2 <tcp_seg_free>
    while (next &&
 801fda0:	683b      	ldr	r3, [r7, #0]
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d00e      	beq.n	801fdc4 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	891b      	ldrh	r3, [r3, #8]
 801fdaa:	461a      	mov	r2, r3
 801fdac:	4b1a      	ldr	r3, [pc, #104]	; (801fe18 <tcp_oos_insert_segment+0xe8>)
 801fdae:	681b      	ldr	r3, [r3, #0]
 801fdb0:	441a      	add	r2, r3
 801fdb2:	683b      	ldr	r3, [r7, #0]
 801fdb4:	68db      	ldr	r3, [r3, #12]
 801fdb6:	685b      	ldr	r3, [r3, #4]
 801fdb8:	6839      	ldr	r1, [r7, #0]
 801fdba:	8909      	ldrh	r1, [r1, #8]
 801fdbc:	440b      	add	r3, r1
 801fdbe:	1ad3      	subs	r3, r2, r3
    while (next &&
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	dacc      	bge.n	801fd5e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 801fdc4:	683b      	ldr	r3, [r7, #0]
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	d01e      	beq.n	801fe08 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801fdca:	687b      	ldr	r3, [r7, #4]
 801fdcc:	891b      	ldrh	r3, [r3, #8]
 801fdce:	461a      	mov	r2, r3
 801fdd0:	4b11      	ldr	r3, [pc, #68]	; (801fe18 <tcp_oos_insert_segment+0xe8>)
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	441a      	add	r2, r3
 801fdd6:	683b      	ldr	r3, [r7, #0]
 801fdd8:	68db      	ldr	r3, [r3, #12]
 801fdda:	685b      	ldr	r3, [r3, #4]
 801fddc:	1ad3      	subs	r3, r2, r3
    if (next &&
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	dd12      	ble.n	801fe08 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801fde2:	683b      	ldr	r3, [r7, #0]
 801fde4:	68db      	ldr	r3, [r3, #12]
 801fde6:	685b      	ldr	r3, [r3, #4]
 801fde8:	b29a      	uxth	r2, r3
 801fdea:	4b0b      	ldr	r3, [pc, #44]	; (801fe18 <tcp_oos_insert_segment+0xe8>)
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	b29b      	uxth	r3, r3
 801fdf0:	1ad3      	subs	r3, r2, r3
 801fdf2:	b29a      	uxth	r2, r3
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	685a      	ldr	r2, [r3, #4]
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	891b      	ldrh	r3, [r3, #8]
 801fe00:	4619      	mov	r1, r3
 801fe02:	4610      	mov	r0, r2
 801fe04:	f7fc fe5e 	bl	801cac4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	683a      	ldr	r2, [r7, #0]
 801fe0c:	601a      	str	r2, [r3, #0]
}
 801fe0e:	bf00      	nop
 801fe10:	3710      	adds	r7, #16
 801fe12:	46bd      	mov	sp, r7
 801fe14:	bdb0      	pop	{r4, r5, r7, pc}
 801fe16:	bf00      	nop
 801fe18:	2000950c 	.word	0x2000950c

0801fe1c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801fe1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe1e:	b08d      	sub	sp, #52	; 0x34
 801fe20:	af00      	add	r7, sp, #0
 801fe22:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 801fe24:	2300      	movs	r3, #0
 801fe26:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	7d1b      	ldrb	r3, [r3, #20]
 801fe2c:	2b03      	cmp	r3, #3
 801fe2e:	d806      	bhi.n	801fe3e <tcp_receive+0x22>
 801fe30:	4b9a      	ldr	r3, [pc, #616]	; (802009c <tcp_receive+0x280>)
 801fe32:	f44f 6281 	mov.w	r2, #1032	; 0x408
 801fe36:	499a      	ldr	r1, [pc, #616]	; (80200a0 <tcp_receive+0x284>)
 801fe38:	489a      	ldr	r0, [pc, #616]	; (80200a4 <tcp_receive+0x288>)
 801fe3a:	f006 f855 	bl	8025ee8 <iprintf>

  if (flags & TCP_ACK) {
 801fe3e:	4b9a      	ldr	r3, [pc, #616]	; (80200a8 <tcp_receive+0x28c>)
 801fe40:	781b      	ldrb	r3, [r3, #0]
 801fe42:	f003 0310 	and.w	r3, r3, #16
 801fe46:	2b00      	cmp	r3, #0
 801fe48:	f000 82c5 	beq.w	80203d6 <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fe52:	461a      	mov	r2, r3
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fe58:	4413      	add	r3, r2
 801fe5a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fe60:	4b92      	ldr	r3, [pc, #584]	; (80200ac <tcp_receive+0x290>)
 801fe62:	681b      	ldr	r3, [r3, #0]
 801fe64:	1ad3      	subs	r3, r2, r3
 801fe66:	2b00      	cmp	r3, #0
 801fe68:	db1b      	blt.n	801fea2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fe6e:	4b8f      	ldr	r3, [pc, #572]	; (80200ac <tcp_receive+0x290>)
 801fe70:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801fe72:	429a      	cmp	r2, r3
 801fe74:	d106      	bne.n	801fe84 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fe7a:	4b8d      	ldr	r3, [pc, #564]	; (80200b0 <tcp_receive+0x294>)
 801fe7c:	681b      	ldr	r3, [r3, #0]
 801fe7e:	1ad3      	subs	r3, r2, r3
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	db0e      	blt.n	801fea2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fe84:	687b      	ldr	r3, [r7, #4]
 801fe86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fe88:	4b89      	ldr	r3, [pc, #548]	; (80200b0 <tcp_receive+0x294>)
 801fe8a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801fe8c:	429a      	cmp	r2, r3
 801fe8e:	d141      	bne.n	801ff14 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801fe90:	4b88      	ldr	r3, [pc, #544]	; (80200b4 <tcp_receive+0x298>)
 801fe92:	681b      	ldr	r3, [r3, #0]
 801fe94:	89db      	ldrh	r3, [r3, #14]
 801fe96:	b29a      	uxth	r2, r3
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fe9e:	429a      	cmp	r2, r3
 801fea0:	d938      	bls.n	801ff14 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801fea2:	4b84      	ldr	r3, [pc, #528]	; (80200b4 <tcp_receive+0x298>)
 801fea4:	681b      	ldr	r3, [r3, #0]
 801fea6:	89db      	ldrh	r3, [r3, #14]
 801fea8:	b29a      	uxth	r2, r3
 801feaa:	687b      	ldr	r3, [r7, #4]
 801feac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801feb0:	687b      	ldr	r3, [r7, #4]
 801feb2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801febc:	429a      	cmp	r2, r3
 801febe:	d205      	bcs.n	801fecc <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 801fecc:	4b77      	ldr	r3, [pc, #476]	; (80200ac <tcp_receive+0x290>)
 801fece:	681a      	ldr	r2, [r3, #0]
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 801fed4:	4b76      	ldr	r3, [pc, #472]	; (80200b0 <tcp_receive+0x294>)
 801fed6:	681a      	ldr	r2, [r3, #0]
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fee2:	2b00      	cmp	r3, #0
 801fee4:	d10d      	bne.n	801ff02 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 801fee6:	687b      	ldr	r3, [r7, #4]
 801fee8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801feec:	2b00      	cmp	r3, #0
 801feee:	d111      	bne.n	801ff14 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	2200      	movs	r2, #0
 801fef4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	2201      	movs	r2, #1
 801fefc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 801ff00:	e008      	b.n	801ff14 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801ff08:	2b00      	cmp	r3, #0
 801ff0a:	d003      	beq.n	801ff14 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	2200      	movs	r2, #0
 801ff10:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801ff14:	4b66      	ldr	r3, [pc, #408]	; (80200b0 <tcp_receive+0x294>)
 801ff16:	681a      	ldr	r2, [r3, #0]
 801ff18:	687b      	ldr	r3, [r7, #4]
 801ff1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ff1c:	1ad3      	subs	r3, r2, r3
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	dc58      	bgt.n	801ffd4 <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 801ff22:	4b65      	ldr	r3, [pc, #404]	; (80200b8 <tcp_receive+0x29c>)
 801ff24:	881b      	ldrh	r3, [r3, #0]
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d14b      	bne.n	801ffc2 <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ff2e:	687a      	ldr	r2, [r7, #4]
 801ff30:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 801ff34:	441a      	add	r2, r3
 801ff36:	697b      	ldr	r3, [r7, #20]
 801ff38:	429a      	cmp	r2, r3
 801ff3a:	d142      	bne.n	801ffc2 <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	db3d      	blt.n	801ffc2 <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801ff46:	687b      	ldr	r3, [r7, #4]
 801ff48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ff4a:	4b59      	ldr	r3, [pc, #356]	; (80200b0 <tcp_receive+0x294>)
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	429a      	cmp	r2, r3
 801ff50:	d137      	bne.n	801ffc2 <tcp_receive+0x1a6>
              found_dupack = 1;
 801ff52:	2301      	movs	r3, #1
 801ff54:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ff5c:	3301      	adds	r3, #1
 801ff5e:	b2da      	uxtb	r2, r3
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ff66:	429a      	cmp	r2, r3
 801ff68:	d907      	bls.n	801ff7a <tcp_receive+0x15e>
                ++pcb->dupacks;
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ff70:	3301      	adds	r3, #1
 801ff72:	b2da      	uxtb	r2, r3
 801ff74:	687b      	ldr	r3, [r7, #4]
 801ff76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ff80:	2b03      	cmp	r3, #3
 801ff82:	d916      	bls.n	801ffb2 <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ff8e:	4413      	add	r3, r2
 801ff90:	b29a      	uxth	r2, r3
 801ff92:	687b      	ldr	r3, [r7, #4]
 801ff94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ff98:	429a      	cmp	r2, r3
 801ff9a:	d912      	bls.n	801ffc2 <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ffa2:	687b      	ldr	r3, [r7, #4]
 801ffa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ffa6:	4413      	add	r3, r2
 801ffa8:	b29a      	uxth	r2, r3
 801ffaa:	687b      	ldr	r3, [r7, #4]
 801ffac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ffb0:	e007      	b.n	801ffc2 <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ffb8:	2b03      	cmp	r3, #3
 801ffba:	d102      	bne.n	801ffc2 <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 801ffbc:	6878      	ldr	r0, [r7, #4]
 801ffbe:	f002 fa2b 	bl	8022418 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ffc2:	69fb      	ldr	r3, [r7, #28]
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	f040 8169 	bne.w	802029c <tcp_receive+0x480>
        pcb->dupacks = 0;
 801ffca:	687b      	ldr	r3, [r7, #4]
 801ffcc:	2200      	movs	r2, #0
 801ffce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ffd2:	e163      	b.n	802029c <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801ffd4:	4b36      	ldr	r3, [pc, #216]	; (80200b0 <tcp_receive+0x294>)
 801ffd6:	681a      	ldr	r2, [r3, #0]
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ffdc:	1ad3      	subs	r3, r2, r3
 801ffde:	3b01      	subs	r3, #1
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	f2c0 8107 	blt.w	80201f4 <tcp_receive+0x3d8>
 801ffe6:	4b32      	ldr	r3, [pc, #200]	; (80200b0 <tcp_receive+0x294>)
 801ffe8:	681a      	ldr	r2, [r3, #0]
 801ffea:	687b      	ldr	r3, [r7, #4]
 801ffec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ffee:	1ad3      	subs	r3, r2, r3
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	f300 80ff 	bgt.w	80201f4 <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	7e9b      	ldrb	r3, [r3, #26]
 801fffa:	f003 0304 	and.w	r3, r3, #4
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d00c      	beq.n	802001c <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	7e9b      	ldrb	r3, [r3, #26]
 8020006:	f023 0304 	bic.w	r3, r3, #4
 802000a:	b2da      	uxtb	r2, r3
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8020010:	687b      	ldr	r3, [r7, #4]
 8020012:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 802001c:	687b      	ldr	r3, [r7, #4]
 802001e:	2200      	movs	r2, #0
 8020020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8020024:	687b      	ldr	r3, [r7, #4]
 8020026:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802002a:	10db      	asrs	r3, r3, #3
 802002c:	b21b      	sxth	r3, r3
 802002e:	b29a      	uxth	r2, r3
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8020036:	b29b      	uxth	r3, r3
 8020038:	4413      	add	r3, r2
 802003a:	b29b      	uxth	r3, r3
 802003c:	b21a      	sxth	r2, r3
 802003e:	687b      	ldr	r3, [r7, #4]
 8020040:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8020044:	687b      	ldr	r3, [r7, #4]
 8020046:	2200      	movs	r2, #0
 8020048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 802004c:	4b18      	ldr	r3, [pc, #96]	; (80200b0 <tcp_receive+0x294>)
 802004e:	681a      	ldr	r2, [r3, #0]
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	7d1b      	ldrb	r3, [r3, #20]
 8020058:	2b03      	cmp	r3, #3
 802005a:	f240 8094 	bls.w	8020186 <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 802005e:	687b      	ldr	r3, [r7, #4]
 8020060:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8020064:	687b      	ldr	r3, [r7, #4]
 8020066:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 802006a:	429a      	cmp	r2, r3
 802006c:	d226      	bcs.n	80200bc <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 802006e:	687b      	ldr	r3, [r7, #4]
 8020070:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020078:	4413      	add	r3, r2
 802007a:	b29a      	uxth	r2, r3
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8020082:	429a      	cmp	r2, r3
 8020084:	d97f      	bls.n	8020186 <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 8020086:	687b      	ldr	r3, [r7, #4]
 8020088:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020090:	4413      	add	r3, r2
 8020092:	b29a      	uxth	r2, r3
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 802009a:	e074      	b.n	8020186 <tcp_receive+0x36a>
 802009c:	0802877c 	.word	0x0802877c
 80200a0:	080289a0 	.word	0x080289a0
 80200a4:	080287c0 	.word	0x080287c0
 80200a8:	20009518 	.word	0x20009518
 80200ac:	2000950c 	.word	0x2000950c
 80200b0:	20009510 	.word	0x20009510
 80200b4:	200094fc 	.word	0x200094fc
 80200b8:	20009516 	.word	0x20009516
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80200bc:	687b      	ldr	r3, [r7, #4]
 80200be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80200c2:	687b      	ldr	r3, [r7, #4]
 80200c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80200c6:	4619      	mov	r1, r3
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80200cc:	fb03 f301 	mul.w	r3, r3, r1
 80200d0:	6879      	ldr	r1, [r7, #4]
 80200d2:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80200d6:	fb93 f3f1 	sdiv	r3, r3, r1
 80200da:	b29b      	uxth	r3, r3
 80200dc:	4413      	add	r3, r2
 80200de:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80200e6:	8a7a      	ldrh	r2, [r7, #18]
 80200e8:	429a      	cmp	r2, r3
 80200ea:	d94c      	bls.n	8020186 <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	8a7a      	ldrh	r2, [r7, #18]
 80200f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80200f4:	e047      	b.n	8020186 <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80200fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 80200fc:	687b      	ldr	r3, [r7, #4]
 80200fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020100:	681a      	ldr	r2, [r3, #0]
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8020106:	687b      	ldr	r3, [r7, #4]
 8020108:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 802010c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802010e:	685b      	ldr	r3, [r3, #4]
 8020110:	4618      	mov	r0, r3
 8020112:	f7fc fee5 	bl	801cee0 <pbuf_clen>
 8020116:	4603      	mov	r3, r0
 8020118:	429c      	cmp	r4, r3
 802011a:	d206      	bcs.n	802012a <tcp_receive+0x30e>
 802011c:	4b70      	ldr	r3, [pc, #448]	; (80202e0 <tcp_receive+0x4c4>)
 802011e:	f240 429e 	movw	r2, #1182	; 0x49e
 8020122:	4970      	ldr	r1, [pc, #448]	; (80202e4 <tcp_receive+0x4c8>)
 8020124:	4870      	ldr	r0, [pc, #448]	; (80202e8 <tcp_receive+0x4cc>)
 8020126:	f005 fedf 	bl	8025ee8 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 802012a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802012c:	685b      	ldr	r3, [r3, #4]
 802012e:	4618      	mov	r0, r3
 8020130:	f7fc fed6 	bl	801cee0 <pbuf_clen>
 8020134:	4603      	mov	r3, r0
 8020136:	461a      	mov	r2, r3
 8020138:	687b      	ldr	r3, [r7, #4]
 802013a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802013e:	1a9b      	subs	r3, r3, r2
 8020140:	b29a      	uxth	r2, r3
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8020148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802014a:	891a      	ldrh	r2, [r3, #8]
 802014c:	4b67      	ldr	r3, [pc, #412]	; (80202ec <tcp_receive+0x4d0>)
 802014e:	881b      	ldrh	r3, [r3, #0]
 8020150:	4413      	add	r3, r2
 8020152:	b29a      	uxth	r2, r3
 8020154:	4b65      	ldr	r3, [pc, #404]	; (80202ec <tcp_receive+0x4d0>)
 8020156:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8020158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802015a:	f7fe f942 	bl	801e3e2 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020164:	2b00      	cmp	r3, #0
 8020166:	d00e      	beq.n	8020186 <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8020168:	687b      	ldr	r3, [r7, #4]
 802016a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802016c:	2b00      	cmp	r3, #0
 802016e:	d10a      	bne.n	8020186 <tcp_receive+0x36a>
 8020170:	687b      	ldr	r3, [r7, #4]
 8020172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020174:	2b00      	cmp	r3, #0
 8020176:	d106      	bne.n	8020186 <tcp_receive+0x36a>
 8020178:	4b59      	ldr	r3, [pc, #356]	; (80202e0 <tcp_receive+0x4c4>)
 802017a:	f240 42a7 	movw	r2, #1191	; 0x4a7
 802017e:	495c      	ldr	r1, [pc, #368]	; (80202f0 <tcp_receive+0x4d4>)
 8020180:	4859      	ldr	r0, [pc, #356]	; (80202e8 <tcp_receive+0x4cc>)
 8020182:	f005 feb1 	bl	8025ee8 <iprintf>
      while (pcb->unacked != NULL &&
 8020186:	687b      	ldr	r3, [r7, #4]
 8020188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802018a:	2b00      	cmp	r3, #0
 802018c:	d022      	beq.n	80201d4 <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 802018e:	687b      	ldr	r3, [r7, #4]
 8020190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020192:	68db      	ldr	r3, [r3, #12]
 8020194:	685b      	ldr	r3, [r3, #4]
 8020196:	4618      	mov	r0, r3
 8020198:	f7f9 f998 	bl	80194cc <lwip_htonl>
 802019c:	4604      	mov	r4, r0
 802019e:	687b      	ldr	r3, [r7, #4]
 80201a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80201a2:	891b      	ldrh	r3, [r3, #8]
 80201a4:	461d      	mov	r5, r3
 80201a6:	687b      	ldr	r3, [r7, #4]
 80201a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80201aa:	68db      	ldr	r3, [r3, #12]
 80201ac:	899b      	ldrh	r3, [r3, #12]
 80201ae:	b29b      	uxth	r3, r3
 80201b0:	4618      	mov	r0, r3
 80201b2:	f7f9 f97d 	bl	80194b0 <lwip_htons>
 80201b6:	4603      	mov	r3, r0
 80201b8:	f003 0303 	and.w	r3, r3, #3
 80201bc:	2b00      	cmp	r3, #0
 80201be:	d001      	beq.n	80201c4 <tcp_receive+0x3a8>
 80201c0:	2301      	movs	r3, #1
 80201c2:	e000      	b.n	80201c6 <tcp_receive+0x3aa>
 80201c4:	2300      	movs	r3, #0
 80201c6:	442b      	add	r3, r5
 80201c8:	18e2      	adds	r2, r4, r3
 80201ca:	4b4a      	ldr	r3, [pc, #296]	; (80202f4 <tcp_receive+0x4d8>)
 80201cc:	681b      	ldr	r3, [r3, #0]
 80201ce:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80201d0:	2b00      	cmp	r3, #0
 80201d2:	dd90      	ble.n	80200f6 <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80201d8:	2b00      	cmp	r3, #0
 80201da:	d104      	bne.n	80201e6 <tcp_receive+0x3ca>
        pcb->rtime = -1;
 80201dc:	687b      	ldr	r3, [r7, #4]
 80201de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80201e2:	861a      	strh	r2, [r3, #48]	; 0x30
 80201e4:	e002      	b.n	80201ec <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 80201e6:	687b      	ldr	r3, [r7, #4]
 80201e8:	2200      	movs	r2, #0
 80201ea:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	2200      	movs	r2, #0
 80201f0:	76da      	strb	r2, [r3, #27]
 80201f2:	e002      	b.n	80201fa <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80201f4:	6878      	ldr	r0, [r7, #4]
 80201f6:	f001 fd31 	bl	8021c5c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80201fa:	e04f      	b.n	802029c <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020200:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8020202:	687b      	ldr	r3, [r7, #4]
 8020204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020206:	681a      	ldr	r2, [r3, #0]
 8020208:	687b      	ldr	r3, [r7, #4]
 802020a:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 802020c:	687b      	ldr	r3, [r7, #4]
 802020e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020210:	2b00      	cmp	r3, #0
 8020212:	d103      	bne.n	802021c <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	2200      	movs	r2, #0
 8020218:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8020222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020224:	685b      	ldr	r3, [r3, #4]
 8020226:	4618      	mov	r0, r3
 8020228:	f7fc fe5a 	bl	801cee0 <pbuf_clen>
 802022c:	4603      	mov	r3, r0
 802022e:	429c      	cmp	r4, r3
 8020230:	d206      	bcs.n	8020240 <tcp_receive+0x424>
 8020232:	4b2b      	ldr	r3, [pc, #172]	; (80202e0 <tcp_receive+0x4c4>)
 8020234:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8020238:	492a      	ldr	r1, [pc, #168]	; (80202e4 <tcp_receive+0x4c8>)
 802023a:	482b      	ldr	r0, [pc, #172]	; (80202e8 <tcp_receive+0x4cc>)
 802023c:	f005 fe54 	bl	8025ee8 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8020240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020242:	685b      	ldr	r3, [r3, #4]
 8020244:	4618      	mov	r0, r3
 8020246:	f7fc fe4b 	bl	801cee0 <pbuf_clen>
 802024a:	4603      	mov	r3, r0
 802024c:	461a      	mov	r2, r3
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020254:	1a9b      	subs	r3, r3, r2
 8020256:	b29a      	uxth	r2, r3
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 802025e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020260:	891a      	ldrh	r2, [r3, #8]
 8020262:	4b22      	ldr	r3, [pc, #136]	; (80202ec <tcp_receive+0x4d0>)
 8020264:	881b      	ldrh	r3, [r3, #0]
 8020266:	4413      	add	r3, r2
 8020268:	b29a      	uxth	r2, r3
 802026a:	4b20      	ldr	r3, [pc, #128]	; (80202ec <tcp_receive+0x4d0>)
 802026c:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 802026e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020270:	f7fe f8b7 	bl	801e3e2 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802027a:	2b00      	cmp	r3, #0
 802027c:	d00e      	beq.n	802029c <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 802027e:	687b      	ldr	r3, [r7, #4]
 8020280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020282:	2b00      	cmp	r3, #0
 8020284:	d10a      	bne.n	802029c <tcp_receive+0x480>
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802028a:	2b00      	cmp	r3, #0
 802028c:	d106      	bne.n	802029c <tcp_receive+0x480>
 802028e:	4b14      	ldr	r3, [pc, #80]	; (80202e0 <tcp_receive+0x4c4>)
 8020290:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8020294:	4916      	ldr	r1, [pc, #88]	; (80202f0 <tcp_receive+0x4d4>)
 8020296:	4814      	ldr	r0, [pc, #80]	; (80202e8 <tcp_receive+0x4cc>)
 8020298:	f005 fe26 	bl	8025ee8 <iprintf>
    while (pcb->unsent != NULL &&
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	d037      	beq.n	8020314 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80202a4:	4b13      	ldr	r3, [pc, #76]	; (80202f4 <tcp_receive+0x4d8>)
 80202a6:	681c      	ldr	r4, [r3, #0]
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80202ac:	68db      	ldr	r3, [r3, #12]
 80202ae:	685b      	ldr	r3, [r3, #4]
 80202b0:	4618      	mov	r0, r3
 80202b2:	f7f9 f90b 	bl	80194cc <lwip_htonl>
 80202b6:	4605      	mov	r5, r0
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80202bc:	891b      	ldrh	r3, [r3, #8]
 80202be:	461e      	mov	r6, r3
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80202c4:	68db      	ldr	r3, [r3, #12]
 80202c6:	899b      	ldrh	r3, [r3, #12]
 80202c8:	b29b      	uxth	r3, r3
 80202ca:	4618      	mov	r0, r3
 80202cc:	f7f9 f8f0 	bl	80194b0 <lwip_htons>
 80202d0:	4603      	mov	r3, r0
 80202d2:	f003 0303 	and.w	r3, r3, #3
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d00e      	beq.n	80202f8 <tcp_receive+0x4dc>
 80202da:	2301      	movs	r3, #1
 80202dc:	e00d      	b.n	80202fa <tcp_receive+0x4de>
 80202de:	bf00      	nop
 80202e0:	0802877c 	.word	0x0802877c
 80202e4:	080289bc 	.word	0x080289bc
 80202e8:	080287c0 	.word	0x080287c0
 80202ec:	20009514 	.word	0x20009514
 80202f0:	080289e4 	.word	0x080289e4
 80202f4:	20009510 	.word	0x20009510
 80202f8:	2300      	movs	r3, #0
 80202fa:	4433      	add	r3, r6
 80202fc:	442b      	add	r3, r5
 80202fe:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8020300:	2b00      	cmp	r3, #0
 8020302:	db07      	blt.n	8020314 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8020304:	4b8d      	ldr	r3, [pc, #564]	; (802053c <tcp_receive+0x720>)
 8020306:	681a      	ldr	r2, [r3, #0]
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802030c:	1ad3      	subs	r3, r2, r3
 802030e:	2b00      	cmp	r3, #0
 8020310:	f77f af74 	ble.w	80201fc <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8020314:	687b      	ldr	r3, [r7, #4]
 8020316:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 802031a:	4b89      	ldr	r3, [pc, #548]	; (8020540 <tcp_receive+0x724>)
 802031c:	881b      	ldrh	r3, [r3, #0]
 802031e:	4413      	add	r3, r2
 8020320:	b29a      	uxth	r2, r3
 8020322:	687b      	ldr	r3, [r7, #4]
 8020324:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8020328:	687b      	ldr	r3, [r7, #4]
 802032a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802032c:	2b00      	cmp	r3, #0
 802032e:	d052      	beq.n	80203d6 <tcp_receive+0x5ba>
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020334:	4b81      	ldr	r3, [pc, #516]	; (802053c <tcp_receive+0x720>)
 8020336:	681b      	ldr	r3, [r3, #0]
 8020338:	1ad3      	subs	r3, r2, r3
 802033a:	2b00      	cmp	r3, #0
 802033c:	da4b      	bge.n	80203d6 <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 802033e:	4b81      	ldr	r3, [pc, #516]	; (8020544 <tcp_receive+0x728>)
 8020340:	681b      	ldr	r3, [r3, #0]
 8020342:	b29a      	uxth	r2, r3
 8020344:	687b      	ldr	r3, [r7, #4]
 8020346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020348:	b29b      	uxth	r3, r3
 802034a:	1ad3      	subs	r3, r2, r3
 802034c:	b29b      	uxth	r3, r3
 802034e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8020350:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8020358:	10db      	asrs	r3, r3, #3
 802035a:	b21b      	sxth	r3, r3
 802035c:	b29b      	uxth	r3, r3
 802035e:	1ad3      	subs	r3, r2, r3
 8020360:	b29b      	uxth	r3, r3
 8020362:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8020364:	687b      	ldr	r3, [r7, #4]
 8020366:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 802036a:	b29a      	uxth	r2, r3
 802036c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802036e:	4413      	add	r3, r2
 8020370:	b29b      	uxth	r3, r3
 8020372:	b21a      	sxth	r2, r3
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8020378:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802037c:	2b00      	cmp	r3, #0
 802037e:	da03      	bge.n	8020388 <tcp_receive+0x56c>
        m = -m;
 8020380:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020382:	425b      	negs	r3, r3
 8020384:	b29b      	uxth	r3, r3
 8020386:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8020388:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802038a:	687b      	ldr	r3, [r7, #4]
 802038c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8020390:	109b      	asrs	r3, r3, #2
 8020392:	b21b      	sxth	r3, r3
 8020394:	b29b      	uxth	r3, r3
 8020396:	1ad3      	subs	r3, r2, r3
 8020398:	b29b      	uxth	r3, r3
 802039a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80203a2:	b29a      	uxth	r2, r3
 80203a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80203a6:	4413      	add	r3, r2
 80203a8:	b29b      	uxth	r3, r3
 80203aa:	b21a      	sxth	r2, r3
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80203b0:	687b      	ldr	r3, [r7, #4]
 80203b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80203b6:	10db      	asrs	r3, r3, #3
 80203b8:	b21b      	sxth	r3, r3
 80203ba:	b29a      	uxth	r2, r3
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80203c2:	b29b      	uxth	r3, r3
 80203c4:	4413      	add	r3, r2
 80203c6:	b29b      	uxth	r3, r3
 80203c8:	b21a      	sxth	r2, r3
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	2200      	movs	r2, #0
 80203d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80203d6:	4b5c      	ldr	r3, [pc, #368]	; (8020548 <tcp_receive+0x72c>)
 80203d8:	881b      	ldrh	r3, [r3, #0]
 80203da:	2b00      	cmp	r3, #0
 80203dc:	f000 84ee 	beq.w	8020dbc <tcp_receive+0xfa0>
 80203e0:	687b      	ldr	r3, [r7, #4]
 80203e2:	7d1b      	ldrb	r3, [r3, #20]
 80203e4:	2b06      	cmp	r3, #6
 80203e6:	f200 84e9 	bhi.w	8020dbc <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80203ea:	687b      	ldr	r3, [r7, #4]
 80203ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80203ee:	4b57      	ldr	r3, [pc, #348]	; (802054c <tcp_receive+0x730>)
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	1ad3      	subs	r3, r2, r3
 80203f4:	3b01      	subs	r3, #1
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	f2c0 80b8 	blt.w	802056c <tcp_receive+0x750>
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020400:	4b51      	ldr	r3, [pc, #324]	; (8020548 <tcp_receive+0x72c>)
 8020402:	881b      	ldrh	r3, [r3, #0]
 8020404:	4619      	mov	r1, r3
 8020406:	4b51      	ldr	r3, [pc, #324]	; (802054c <tcp_receive+0x730>)
 8020408:	681b      	ldr	r3, [r3, #0]
 802040a:	440b      	add	r3, r1
 802040c:	1ad3      	subs	r3, r2, r3
 802040e:	3301      	adds	r3, #1
 8020410:	2b00      	cmp	r3, #0
 8020412:	f300 80ab 	bgt.w	802056c <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8020416:	4b4e      	ldr	r3, [pc, #312]	; (8020550 <tcp_receive+0x734>)
 8020418:	685b      	ldr	r3, [r3, #4]
 802041a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020420:	4b4a      	ldr	r3, [pc, #296]	; (802054c <tcp_receive+0x730>)
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	1ad3      	subs	r3, r2, r3
 8020426:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8020428:	4b49      	ldr	r3, [pc, #292]	; (8020550 <tcp_receive+0x734>)
 802042a:	685b      	ldr	r3, [r3, #4]
 802042c:	2b00      	cmp	r3, #0
 802042e:	d106      	bne.n	802043e <tcp_receive+0x622>
 8020430:	4b48      	ldr	r3, [pc, #288]	; (8020554 <tcp_receive+0x738>)
 8020432:	f240 523c 	movw	r2, #1340	; 0x53c
 8020436:	4948      	ldr	r1, [pc, #288]	; (8020558 <tcp_receive+0x73c>)
 8020438:	4848      	ldr	r0, [pc, #288]	; (802055c <tcp_receive+0x740>)
 802043a:	f005 fd55 	bl	8025ee8 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 802043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020440:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8020444:	4293      	cmp	r3, r2
 8020446:	dd06      	ble.n	8020456 <tcp_receive+0x63a>
 8020448:	4b42      	ldr	r3, [pc, #264]	; (8020554 <tcp_receive+0x738>)
 802044a:	f240 523d 	movw	r2, #1341	; 0x53d
 802044e:	4944      	ldr	r1, [pc, #272]	; (8020560 <tcp_receive+0x744>)
 8020450:	4842      	ldr	r0, [pc, #264]	; (802055c <tcp_receive+0x740>)
 8020452:	f005 fd49 	bl	8025ee8 <iprintf>
      if (inseg.p->len < off) {
 8020456:	4b3e      	ldr	r3, [pc, #248]	; (8020550 <tcp_receive+0x734>)
 8020458:	685b      	ldr	r3, [r3, #4]
 802045a:	895b      	ldrh	r3, [r3, #10]
 802045c:	461a      	mov	r2, r3
 802045e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020460:	429a      	cmp	r2, r3
 8020462:	da3e      	bge.n	80204e2 <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8020464:	4b3a      	ldr	r3, [pc, #232]	; (8020550 <tcp_receive+0x734>)
 8020466:	685b      	ldr	r3, [r3, #4]
 8020468:	891b      	ldrh	r3, [r3, #8]
 802046a:	461a      	mov	r2, r3
 802046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802046e:	429a      	cmp	r2, r3
 8020470:	da06      	bge.n	8020480 <tcp_receive+0x664>
 8020472:	4b38      	ldr	r3, [pc, #224]	; (8020554 <tcp_receive+0x738>)
 8020474:	f240 523f 	movw	r2, #1343	; 0x53f
 8020478:	493a      	ldr	r1, [pc, #232]	; (8020564 <tcp_receive+0x748>)
 802047a:	4838      	ldr	r0, [pc, #224]	; (802055c <tcp_receive+0x740>)
 802047c:	f005 fd34 	bl	8025ee8 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8020480:	4b33      	ldr	r3, [pc, #204]	; (8020550 <tcp_receive+0x734>)
 8020482:	685b      	ldr	r3, [r3, #4]
 8020484:	891a      	ldrh	r2, [r3, #8]
 8020486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020488:	b29b      	uxth	r3, r3
 802048a:	1ad3      	subs	r3, r2, r3
 802048c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 802048e:	e00e      	b.n	80204ae <tcp_receive+0x692>
          off -= p->len;
 8020490:	69bb      	ldr	r3, [r7, #24]
 8020492:	895b      	ldrh	r3, [r3, #10]
 8020494:	461a      	mov	r2, r3
 8020496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020498:	1a9b      	subs	r3, r3, r2
 802049a:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 802049c:	69bb      	ldr	r3, [r7, #24]
 802049e:	8a3a      	ldrh	r2, [r7, #16]
 80204a0:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80204a2:	69bb      	ldr	r3, [r7, #24]
 80204a4:	2200      	movs	r2, #0
 80204a6:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80204a8:	69bb      	ldr	r3, [r7, #24]
 80204aa:	681b      	ldr	r3, [r3, #0]
 80204ac:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 80204ae:	69bb      	ldr	r3, [r7, #24]
 80204b0:	895b      	ldrh	r3, [r3, #10]
 80204b2:	461a      	mov	r2, r3
 80204b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204b6:	429a      	cmp	r2, r3
 80204b8:	dbea      	blt.n	8020490 <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80204ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204bc:	b29b      	uxth	r3, r3
 80204be:	425b      	negs	r3, r3
 80204c0:	b29b      	uxth	r3, r3
 80204c2:	b21b      	sxth	r3, r3
 80204c4:	4619      	mov	r1, r3
 80204c6:	69b8      	ldr	r0, [r7, #24]
 80204c8:	f7fc fc4c 	bl	801cd64 <pbuf_header>
 80204cc:	4603      	mov	r3, r0
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d01c      	beq.n	802050c <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80204d2:	4b20      	ldr	r3, [pc, #128]	; (8020554 <tcp_receive+0x738>)
 80204d4:	f240 524c 	movw	r2, #1356	; 0x54c
 80204d8:	4923      	ldr	r1, [pc, #140]	; (8020568 <tcp_receive+0x74c>)
 80204da:	4820      	ldr	r0, [pc, #128]	; (802055c <tcp_receive+0x740>)
 80204dc:	f005 fd04 	bl	8025ee8 <iprintf>
 80204e0:	e014      	b.n	802050c <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80204e2:	4b1b      	ldr	r3, [pc, #108]	; (8020550 <tcp_receive+0x734>)
 80204e4:	685b      	ldr	r3, [r3, #4]
 80204e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80204e8:	b292      	uxth	r2, r2
 80204ea:	4252      	negs	r2, r2
 80204ec:	b292      	uxth	r2, r2
 80204ee:	b212      	sxth	r2, r2
 80204f0:	4611      	mov	r1, r2
 80204f2:	4618      	mov	r0, r3
 80204f4:	f7fc fc36 	bl	801cd64 <pbuf_header>
 80204f8:	4603      	mov	r3, r0
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d006      	beq.n	802050c <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80204fe:	4b15      	ldr	r3, [pc, #84]	; (8020554 <tcp_receive+0x738>)
 8020500:	f240 5251 	movw	r2, #1361	; 0x551
 8020504:	4918      	ldr	r1, [pc, #96]	; (8020568 <tcp_receive+0x74c>)
 8020506:	4815      	ldr	r0, [pc, #84]	; (802055c <tcp_receive+0x740>)
 8020508:	f005 fcee 	bl	8025ee8 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 802050c:	4b10      	ldr	r3, [pc, #64]	; (8020550 <tcp_receive+0x734>)
 802050e:	891a      	ldrh	r2, [r3, #8]
 8020510:	4b0e      	ldr	r3, [pc, #56]	; (802054c <tcp_receive+0x730>)
 8020512:	681b      	ldr	r3, [r3, #0]
 8020514:	b299      	uxth	r1, r3
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802051a:	b29b      	uxth	r3, r3
 802051c:	1acb      	subs	r3, r1, r3
 802051e:	b29b      	uxth	r3, r3
 8020520:	4413      	add	r3, r2
 8020522:	b29a      	uxth	r2, r3
 8020524:	4b0a      	ldr	r3, [pc, #40]	; (8020550 <tcp_receive+0x734>)
 8020526:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8020528:	4b09      	ldr	r3, [pc, #36]	; (8020550 <tcp_receive+0x734>)
 802052a:	68db      	ldr	r3, [r3, #12]
 802052c:	687a      	ldr	r2, [r7, #4]
 802052e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8020530:	4906      	ldr	r1, [pc, #24]	; (802054c <tcp_receive+0x730>)
 8020532:	600a      	str	r2, [r1, #0]
 8020534:	4a05      	ldr	r2, [pc, #20]	; (802054c <tcp_receive+0x730>)
 8020536:	6812      	ldr	r2, [r2, #0]
 8020538:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 802053a:	e025      	b.n	8020588 <tcp_receive+0x76c>
 802053c:	20009510 	.word	0x20009510
 8020540:	20009514 	.word	0x20009514
 8020544:	2000ecc8 	.word	0x2000ecc8
 8020548:	20009516 	.word	0x20009516
 802054c:	2000950c 	.word	0x2000950c
 8020550:	200094ec 	.word	0x200094ec
 8020554:	0802877c 	.word	0x0802877c
 8020558:	08028a04 	.word	0x08028a04
 802055c:	080287c0 	.word	0x080287c0
 8020560:	08028a14 	.word	0x08028a14
 8020564:	08028a24 	.word	0x08028a24
 8020568:	08028a34 	.word	0x08028a34
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 802056c:	4b86      	ldr	r3, [pc, #536]	; (8020788 <tcp_receive+0x96c>)
 802056e:	681a      	ldr	r2, [r3, #0]
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020574:	1ad3      	subs	r3, r2, r3
 8020576:	2b00      	cmp	r3, #0
 8020578:	da06      	bge.n	8020588 <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	7e9b      	ldrb	r3, [r3, #26]
 802057e:	f043 0302 	orr.w	r3, r3, #2
 8020582:	b2da      	uxtb	r2, r3
 8020584:	687b      	ldr	r3, [r7, #4]
 8020586:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020588:	4b7f      	ldr	r3, [pc, #508]	; (8020788 <tcp_receive+0x96c>)
 802058a:	681a      	ldr	r2, [r3, #0]
 802058c:	687b      	ldr	r3, [r7, #4]
 802058e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020590:	1ad3      	subs	r3, r2, r3
 8020592:	2b00      	cmp	r3, #0
 8020594:	f2c0 840d 	blt.w	8020db2 <tcp_receive+0xf96>
 8020598:	4b7b      	ldr	r3, [pc, #492]	; (8020788 <tcp_receive+0x96c>)
 802059a:	681a      	ldr	r2, [r3, #0]
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80205a0:	6879      	ldr	r1, [r7, #4]
 80205a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80205a4:	440b      	add	r3, r1
 80205a6:	1ad3      	subs	r3, r2, r3
 80205a8:	3301      	adds	r3, #1
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	f300 8401 	bgt.w	8020db2 <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80205b0:	687b      	ldr	r3, [r7, #4]
 80205b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80205b4:	4b74      	ldr	r3, [pc, #464]	; (8020788 <tcp_receive+0x96c>)
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	429a      	cmp	r2, r3
 80205ba:	f040 8285 	bne.w	8020ac8 <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80205be:	4b73      	ldr	r3, [pc, #460]	; (802078c <tcp_receive+0x970>)
 80205c0:	891c      	ldrh	r4, [r3, #8]
 80205c2:	4b72      	ldr	r3, [pc, #456]	; (802078c <tcp_receive+0x970>)
 80205c4:	68db      	ldr	r3, [r3, #12]
 80205c6:	899b      	ldrh	r3, [r3, #12]
 80205c8:	b29b      	uxth	r3, r3
 80205ca:	4618      	mov	r0, r3
 80205cc:	f7f8 ff70 	bl	80194b0 <lwip_htons>
 80205d0:	4603      	mov	r3, r0
 80205d2:	f003 0303 	and.w	r3, r3, #3
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	d001      	beq.n	80205de <tcp_receive+0x7c2>
 80205da:	2301      	movs	r3, #1
 80205dc:	e000      	b.n	80205e0 <tcp_receive+0x7c4>
 80205de:	2300      	movs	r3, #0
 80205e0:	4423      	add	r3, r4
 80205e2:	b29a      	uxth	r2, r3
 80205e4:	4b6a      	ldr	r3, [pc, #424]	; (8020790 <tcp_receive+0x974>)
 80205e6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80205e8:	687b      	ldr	r3, [r7, #4]
 80205ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80205ec:	4b68      	ldr	r3, [pc, #416]	; (8020790 <tcp_receive+0x974>)
 80205ee:	881b      	ldrh	r3, [r3, #0]
 80205f0:	429a      	cmp	r2, r3
 80205f2:	d26d      	bcs.n	80206d0 <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80205f4:	4b65      	ldr	r3, [pc, #404]	; (802078c <tcp_receive+0x970>)
 80205f6:	68db      	ldr	r3, [r3, #12]
 80205f8:	899b      	ldrh	r3, [r3, #12]
 80205fa:	b29b      	uxth	r3, r3
 80205fc:	4618      	mov	r0, r3
 80205fe:	f7f8 ff57 	bl	80194b0 <lwip_htons>
 8020602:	4603      	mov	r3, r0
 8020604:	f003 0301 	and.w	r3, r3, #1
 8020608:	2b00      	cmp	r3, #0
 802060a:	d01a      	beq.n	8020642 <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 802060c:	4b5f      	ldr	r3, [pc, #380]	; (802078c <tcp_receive+0x970>)
 802060e:	68dc      	ldr	r4, [r3, #12]
 8020610:	4b5e      	ldr	r3, [pc, #376]	; (802078c <tcp_receive+0x970>)
 8020612:	68db      	ldr	r3, [r3, #12]
 8020614:	899b      	ldrh	r3, [r3, #12]
 8020616:	b29b      	uxth	r3, r3
 8020618:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 802061c:	b29d      	uxth	r5, r3
 802061e:	4b5b      	ldr	r3, [pc, #364]	; (802078c <tcp_receive+0x970>)
 8020620:	68db      	ldr	r3, [r3, #12]
 8020622:	899b      	ldrh	r3, [r3, #12]
 8020624:	b29b      	uxth	r3, r3
 8020626:	4618      	mov	r0, r3
 8020628:	f7f8 ff42 	bl	80194b0 <lwip_htons>
 802062c:	4603      	mov	r3, r0
 802062e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8020632:	b29b      	uxth	r3, r3
 8020634:	4618      	mov	r0, r3
 8020636:	f7f8 ff3b 	bl	80194b0 <lwip_htons>
 802063a:	4603      	mov	r3, r0
 802063c:	432b      	orrs	r3, r5
 802063e:	b29b      	uxth	r3, r3
 8020640:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8020642:	687b      	ldr	r3, [r7, #4]
 8020644:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020646:	4b51      	ldr	r3, [pc, #324]	; (802078c <tcp_receive+0x970>)
 8020648:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 802064a:	4b50      	ldr	r3, [pc, #320]	; (802078c <tcp_receive+0x970>)
 802064c:	68db      	ldr	r3, [r3, #12]
 802064e:	899b      	ldrh	r3, [r3, #12]
 8020650:	b29b      	uxth	r3, r3
 8020652:	4618      	mov	r0, r3
 8020654:	f7f8 ff2c 	bl	80194b0 <lwip_htons>
 8020658:	4603      	mov	r3, r0
 802065a:	f003 0302 	and.w	r3, r3, #2
 802065e:	2b00      	cmp	r3, #0
 8020660:	d005      	beq.n	802066e <tcp_receive+0x852>
            inseg.len -= 1;
 8020662:	4b4a      	ldr	r3, [pc, #296]	; (802078c <tcp_receive+0x970>)
 8020664:	891b      	ldrh	r3, [r3, #8]
 8020666:	3b01      	subs	r3, #1
 8020668:	b29a      	uxth	r2, r3
 802066a:	4b48      	ldr	r3, [pc, #288]	; (802078c <tcp_receive+0x970>)
 802066c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 802066e:	4b47      	ldr	r3, [pc, #284]	; (802078c <tcp_receive+0x970>)
 8020670:	685a      	ldr	r2, [r3, #4]
 8020672:	4b46      	ldr	r3, [pc, #280]	; (802078c <tcp_receive+0x970>)
 8020674:	891b      	ldrh	r3, [r3, #8]
 8020676:	4619      	mov	r1, r3
 8020678:	4610      	mov	r0, r2
 802067a:	f7fc fa23 	bl	801cac4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 802067e:	4b43      	ldr	r3, [pc, #268]	; (802078c <tcp_receive+0x970>)
 8020680:	891c      	ldrh	r4, [r3, #8]
 8020682:	4b42      	ldr	r3, [pc, #264]	; (802078c <tcp_receive+0x970>)
 8020684:	68db      	ldr	r3, [r3, #12]
 8020686:	899b      	ldrh	r3, [r3, #12]
 8020688:	b29b      	uxth	r3, r3
 802068a:	4618      	mov	r0, r3
 802068c:	f7f8 ff10 	bl	80194b0 <lwip_htons>
 8020690:	4603      	mov	r3, r0
 8020692:	f003 0303 	and.w	r3, r3, #3
 8020696:	2b00      	cmp	r3, #0
 8020698:	d001      	beq.n	802069e <tcp_receive+0x882>
 802069a:	2301      	movs	r3, #1
 802069c:	e000      	b.n	80206a0 <tcp_receive+0x884>
 802069e:	2300      	movs	r3, #0
 80206a0:	4423      	add	r3, r4
 80206a2:	b29a      	uxth	r2, r3
 80206a4:	4b3a      	ldr	r3, [pc, #232]	; (8020790 <tcp_receive+0x974>)
 80206a6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80206a8:	4b39      	ldr	r3, [pc, #228]	; (8020790 <tcp_receive+0x974>)
 80206aa:	881b      	ldrh	r3, [r3, #0]
 80206ac:	461a      	mov	r2, r3
 80206ae:	4b36      	ldr	r3, [pc, #216]	; (8020788 <tcp_receive+0x96c>)
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	441a      	add	r2, r3
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206b8:	6879      	ldr	r1, [r7, #4]
 80206ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80206bc:	440b      	add	r3, r1
 80206be:	429a      	cmp	r2, r3
 80206c0:	d006      	beq.n	80206d0 <tcp_receive+0x8b4>
 80206c2:	4b34      	ldr	r3, [pc, #208]	; (8020794 <tcp_receive+0x978>)
 80206c4:	f240 527f 	movw	r2, #1407	; 0x57f
 80206c8:	4933      	ldr	r1, [pc, #204]	; (8020798 <tcp_receive+0x97c>)
 80206ca:	4834      	ldr	r0, [pc, #208]	; (802079c <tcp_receive+0x980>)
 80206cc:	f005 fc0c 	bl	8025ee8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80206d0:	687b      	ldr	r3, [r7, #4]
 80206d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	f000 80e0 	beq.w	802089a <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80206da:	4b2c      	ldr	r3, [pc, #176]	; (802078c <tcp_receive+0x970>)
 80206dc:	68db      	ldr	r3, [r3, #12]
 80206de:	899b      	ldrh	r3, [r3, #12]
 80206e0:	b29b      	uxth	r3, r3
 80206e2:	4618      	mov	r0, r3
 80206e4:	f7f8 fee4 	bl	80194b0 <lwip_htons>
 80206e8:	4603      	mov	r3, r0
 80206ea:	f003 0301 	and.w	r3, r3, #1
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	d010      	beq.n	8020714 <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80206f2:	e00a      	b.n	802070a <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80206f8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80206fe:	681a      	ldr	r2, [r3, #0]
 8020700:	687b      	ldr	r3, [r7, #4]
 8020702:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8020704:	68f8      	ldr	r0, [r7, #12]
 8020706:	f7fd fe6c 	bl	801e3e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 802070a:	687b      	ldr	r3, [r7, #4]
 802070c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802070e:	2b00      	cmp	r3, #0
 8020710:	d1f0      	bne.n	80206f4 <tcp_receive+0x8d8>
 8020712:	e0c2      	b.n	802089a <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020718:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 802071a:	e04e      	b.n	80207ba <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 802071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802071e:	68db      	ldr	r3, [r3, #12]
 8020720:	899b      	ldrh	r3, [r3, #12]
 8020722:	b29b      	uxth	r3, r3
 8020724:	4618      	mov	r0, r3
 8020726:	f7f8 fec3 	bl	80194b0 <lwip_htons>
 802072a:	4603      	mov	r3, r0
 802072c:	f003 0301 	and.w	r3, r3, #1
 8020730:	2b00      	cmp	r3, #0
 8020732:	d03a      	beq.n	80207aa <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8020734:	4b15      	ldr	r3, [pc, #84]	; (802078c <tcp_receive+0x970>)
 8020736:	68db      	ldr	r3, [r3, #12]
 8020738:	899b      	ldrh	r3, [r3, #12]
 802073a:	b29b      	uxth	r3, r3
 802073c:	4618      	mov	r0, r3
 802073e:	f7f8 feb7 	bl	80194b0 <lwip_htons>
 8020742:	4603      	mov	r3, r0
 8020744:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8020748:	2b00      	cmp	r3, #0
 802074a:	d12e      	bne.n	80207aa <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 802074c:	4b0f      	ldr	r3, [pc, #60]	; (802078c <tcp_receive+0x970>)
 802074e:	68dc      	ldr	r4, [r3, #12]
 8020750:	4b0e      	ldr	r3, [pc, #56]	; (802078c <tcp_receive+0x970>)
 8020752:	68db      	ldr	r3, [r3, #12]
 8020754:	899b      	ldrh	r3, [r3, #12]
 8020756:	b29d      	uxth	r5, r3
 8020758:	2001      	movs	r0, #1
 802075a:	f7f8 fea9 	bl	80194b0 <lwip_htons>
 802075e:	4603      	mov	r3, r0
 8020760:	432b      	orrs	r3, r5
 8020762:	b29b      	uxth	r3, r3
 8020764:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8020766:	4b09      	ldr	r3, [pc, #36]	; (802078c <tcp_receive+0x970>)
 8020768:	891c      	ldrh	r4, [r3, #8]
 802076a:	4b08      	ldr	r3, [pc, #32]	; (802078c <tcp_receive+0x970>)
 802076c:	68db      	ldr	r3, [r3, #12]
 802076e:	899b      	ldrh	r3, [r3, #12]
 8020770:	b29b      	uxth	r3, r3
 8020772:	4618      	mov	r0, r3
 8020774:	f7f8 fe9c 	bl	80194b0 <lwip_htons>
 8020778:	4603      	mov	r3, r0
 802077a:	f003 0303 	and.w	r3, r3, #3
 802077e:	2b00      	cmp	r3, #0
 8020780:	d00e      	beq.n	80207a0 <tcp_receive+0x984>
 8020782:	2301      	movs	r3, #1
 8020784:	e00d      	b.n	80207a2 <tcp_receive+0x986>
 8020786:	bf00      	nop
 8020788:	2000950c 	.word	0x2000950c
 802078c:	200094ec 	.word	0x200094ec
 8020790:	20009516 	.word	0x20009516
 8020794:	0802877c 	.word	0x0802877c
 8020798:	08028a48 	.word	0x08028a48
 802079c:	080287c0 	.word	0x080287c0
 80207a0:	2300      	movs	r3, #0
 80207a2:	4423      	add	r3, r4
 80207a4:	b29a      	uxth	r2, r3
 80207a6:	4b95      	ldr	r3, [pc, #596]	; (80209fc <tcp_receive+0xbe0>)
 80207a8:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80207aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207ac:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80207ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207b0:	681b      	ldr	r3, [r3, #0]
 80207b2:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80207b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80207b6:	f7fd fe14 	bl	801e3e2 <tcp_seg_free>
            while (next &&
 80207ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d00e      	beq.n	80207de <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80207c0:	4b8e      	ldr	r3, [pc, #568]	; (80209fc <tcp_receive+0xbe0>)
 80207c2:	881b      	ldrh	r3, [r3, #0]
 80207c4:	461a      	mov	r2, r3
 80207c6:	4b8e      	ldr	r3, [pc, #568]	; (8020a00 <tcp_receive+0xbe4>)
 80207c8:	681b      	ldr	r3, [r3, #0]
 80207ca:	441a      	add	r2, r3
 80207cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207ce:	68db      	ldr	r3, [r3, #12]
 80207d0:	685b      	ldr	r3, [r3, #4]
 80207d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80207d4:	8909      	ldrh	r1, [r1, #8]
 80207d6:	440b      	add	r3, r1
 80207d8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80207da:	2b00      	cmp	r3, #0
 80207dc:	da9e      	bge.n	802071c <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80207de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d057      	beq.n	8020894 <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 80207e4:	4b85      	ldr	r3, [pc, #532]	; (80209fc <tcp_receive+0xbe0>)
 80207e6:	881b      	ldrh	r3, [r3, #0]
 80207e8:	461a      	mov	r2, r3
 80207ea:	4b85      	ldr	r3, [pc, #532]	; (8020a00 <tcp_receive+0xbe4>)
 80207ec:	681b      	ldr	r3, [r3, #0]
 80207ee:	441a      	add	r2, r3
 80207f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207f2:	68db      	ldr	r3, [r3, #12]
 80207f4:	685b      	ldr	r3, [r3, #4]
 80207f6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	dd4b      	ble.n	8020894 <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80207fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207fe:	68db      	ldr	r3, [r3, #12]
 8020800:	685b      	ldr	r3, [r3, #4]
 8020802:	b29a      	uxth	r2, r3
 8020804:	4b7e      	ldr	r3, [pc, #504]	; (8020a00 <tcp_receive+0xbe4>)
 8020806:	681b      	ldr	r3, [r3, #0]
 8020808:	b29b      	uxth	r3, r3
 802080a:	1ad3      	subs	r3, r2, r3
 802080c:	b29a      	uxth	r2, r3
 802080e:	4b7d      	ldr	r3, [pc, #500]	; (8020a04 <tcp_receive+0xbe8>)
 8020810:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8020812:	4b7c      	ldr	r3, [pc, #496]	; (8020a04 <tcp_receive+0xbe8>)
 8020814:	68db      	ldr	r3, [r3, #12]
 8020816:	899b      	ldrh	r3, [r3, #12]
 8020818:	b29b      	uxth	r3, r3
 802081a:	4618      	mov	r0, r3
 802081c:	f7f8 fe48 	bl	80194b0 <lwip_htons>
 8020820:	4603      	mov	r3, r0
 8020822:	f003 0302 	and.w	r3, r3, #2
 8020826:	2b00      	cmp	r3, #0
 8020828:	d005      	beq.n	8020836 <tcp_receive+0xa1a>
                inseg.len -= 1;
 802082a:	4b76      	ldr	r3, [pc, #472]	; (8020a04 <tcp_receive+0xbe8>)
 802082c:	891b      	ldrh	r3, [r3, #8]
 802082e:	3b01      	subs	r3, #1
 8020830:	b29a      	uxth	r2, r3
 8020832:	4b74      	ldr	r3, [pc, #464]	; (8020a04 <tcp_receive+0xbe8>)
 8020834:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8020836:	4b73      	ldr	r3, [pc, #460]	; (8020a04 <tcp_receive+0xbe8>)
 8020838:	685a      	ldr	r2, [r3, #4]
 802083a:	4b72      	ldr	r3, [pc, #456]	; (8020a04 <tcp_receive+0xbe8>)
 802083c:	891b      	ldrh	r3, [r3, #8]
 802083e:	4619      	mov	r1, r3
 8020840:	4610      	mov	r0, r2
 8020842:	f7fc f93f 	bl	801cac4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8020846:	4b6f      	ldr	r3, [pc, #444]	; (8020a04 <tcp_receive+0xbe8>)
 8020848:	891c      	ldrh	r4, [r3, #8]
 802084a:	4b6e      	ldr	r3, [pc, #440]	; (8020a04 <tcp_receive+0xbe8>)
 802084c:	68db      	ldr	r3, [r3, #12]
 802084e:	899b      	ldrh	r3, [r3, #12]
 8020850:	b29b      	uxth	r3, r3
 8020852:	4618      	mov	r0, r3
 8020854:	f7f8 fe2c 	bl	80194b0 <lwip_htons>
 8020858:	4603      	mov	r3, r0
 802085a:	f003 0303 	and.w	r3, r3, #3
 802085e:	2b00      	cmp	r3, #0
 8020860:	d001      	beq.n	8020866 <tcp_receive+0xa4a>
 8020862:	2301      	movs	r3, #1
 8020864:	e000      	b.n	8020868 <tcp_receive+0xa4c>
 8020866:	2300      	movs	r3, #0
 8020868:	4423      	add	r3, r4
 802086a:	b29a      	uxth	r2, r3
 802086c:	4b63      	ldr	r3, [pc, #396]	; (80209fc <tcp_receive+0xbe0>)
 802086e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8020870:	4b62      	ldr	r3, [pc, #392]	; (80209fc <tcp_receive+0xbe0>)
 8020872:	881b      	ldrh	r3, [r3, #0]
 8020874:	461a      	mov	r2, r3
 8020876:	4b62      	ldr	r3, [pc, #392]	; (8020a00 <tcp_receive+0xbe4>)
 8020878:	681b      	ldr	r3, [r3, #0]
 802087a:	441a      	add	r2, r3
 802087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802087e:	68db      	ldr	r3, [r3, #12]
 8020880:	685b      	ldr	r3, [r3, #4]
 8020882:	429a      	cmp	r2, r3
 8020884:	d006      	beq.n	8020894 <tcp_receive+0xa78>
 8020886:	4b60      	ldr	r3, [pc, #384]	; (8020a08 <tcp_receive+0xbec>)
 8020888:	f240 52af 	movw	r2, #1455	; 0x5af
 802088c:	495f      	ldr	r1, [pc, #380]	; (8020a0c <tcp_receive+0xbf0>)
 802088e:	4860      	ldr	r0, [pc, #384]	; (8020a10 <tcp_receive+0xbf4>)
 8020890:	f005 fb2a 	bl	8025ee8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8020894:	687b      	ldr	r3, [r7, #4]
 8020896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020898:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 802089a:	4b58      	ldr	r3, [pc, #352]	; (80209fc <tcp_receive+0xbe0>)
 802089c:	881b      	ldrh	r3, [r3, #0]
 802089e:	461a      	mov	r2, r3
 80208a0:	4b57      	ldr	r3, [pc, #348]	; (8020a00 <tcp_receive+0xbe4>)
 80208a2:	681b      	ldr	r3, [r3, #0]
 80208a4:	441a      	add	r2, r3
 80208a6:	687b      	ldr	r3, [r7, #4]
 80208a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80208ae:	4b53      	ldr	r3, [pc, #332]	; (80209fc <tcp_receive+0xbe0>)
 80208b0:	881b      	ldrh	r3, [r3, #0]
 80208b2:	429a      	cmp	r2, r3
 80208b4:	d206      	bcs.n	80208c4 <tcp_receive+0xaa8>
 80208b6:	4b54      	ldr	r3, [pc, #336]	; (8020a08 <tcp_receive+0xbec>)
 80208b8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80208bc:	4955      	ldr	r1, [pc, #340]	; (8020a14 <tcp_receive+0xbf8>)
 80208be:	4854      	ldr	r0, [pc, #336]	; (8020a10 <tcp_receive+0xbf4>)
 80208c0:	f005 fb12 	bl	8025ee8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80208c8:	4b4c      	ldr	r3, [pc, #304]	; (80209fc <tcp_receive+0xbe0>)
 80208ca:	881b      	ldrh	r3, [r3, #0]
 80208cc:	1ad3      	subs	r3, r2, r3
 80208ce:	b29a      	uxth	r2, r3
 80208d0:	687b      	ldr	r3, [r7, #4]
 80208d2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80208d4:	6878      	ldr	r0, [r7, #4]
 80208d6:	f7fd f8f5 	bl	801dac4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80208da:	4b4a      	ldr	r3, [pc, #296]	; (8020a04 <tcp_receive+0xbe8>)
 80208dc:	685b      	ldr	r3, [r3, #4]
 80208de:	891b      	ldrh	r3, [r3, #8]
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	d006      	beq.n	80208f2 <tcp_receive+0xad6>
          recv_data = inseg.p;
 80208e4:	4b47      	ldr	r3, [pc, #284]	; (8020a04 <tcp_receive+0xbe8>)
 80208e6:	685b      	ldr	r3, [r3, #4]
 80208e8:	4a4b      	ldr	r2, [pc, #300]	; (8020a18 <tcp_receive+0xbfc>)
 80208ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80208ec:	4b45      	ldr	r3, [pc, #276]	; (8020a04 <tcp_receive+0xbe8>)
 80208ee:	2200      	movs	r2, #0
 80208f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80208f2:	4b44      	ldr	r3, [pc, #272]	; (8020a04 <tcp_receive+0xbe8>)
 80208f4:	68db      	ldr	r3, [r3, #12]
 80208f6:	899b      	ldrh	r3, [r3, #12]
 80208f8:	b29b      	uxth	r3, r3
 80208fa:	4618      	mov	r0, r3
 80208fc:	f7f8 fdd8 	bl	80194b0 <lwip_htons>
 8020900:	4603      	mov	r3, r0
 8020902:	f003 0301 	and.w	r3, r3, #1
 8020906:	2b00      	cmp	r3, #0
 8020908:	f000 80b4 	beq.w	8020a74 <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 802090c:	4b43      	ldr	r3, [pc, #268]	; (8020a1c <tcp_receive+0xc00>)
 802090e:	781b      	ldrb	r3, [r3, #0]
 8020910:	f043 0320 	orr.w	r3, r3, #32
 8020914:	b2da      	uxtb	r2, r3
 8020916:	4b41      	ldr	r3, [pc, #260]	; (8020a1c <tcp_receive+0xc00>)
 8020918:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 802091a:	e0ab      	b.n	8020a74 <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 802091c:	687b      	ldr	r3, [r7, #4]
 802091e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020920:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8020922:	687b      	ldr	r3, [r7, #4]
 8020924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020926:	68db      	ldr	r3, [r3, #12]
 8020928:	685b      	ldr	r3, [r3, #4]
 802092a:	4a35      	ldr	r2, [pc, #212]	; (8020a00 <tcp_receive+0xbe4>)
 802092c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 802092e:	68bb      	ldr	r3, [r7, #8]
 8020930:	891b      	ldrh	r3, [r3, #8]
 8020932:	461c      	mov	r4, r3
 8020934:	68bb      	ldr	r3, [r7, #8]
 8020936:	68db      	ldr	r3, [r3, #12]
 8020938:	899b      	ldrh	r3, [r3, #12]
 802093a:	b29b      	uxth	r3, r3
 802093c:	4618      	mov	r0, r3
 802093e:	f7f8 fdb7 	bl	80194b0 <lwip_htons>
 8020942:	4603      	mov	r3, r0
 8020944:	f003 0303 	and.w	r3, r3, #3
 8020948:	2b00      	cmp	r3, #0
 802094a:	d001      	beq.n	8020950 <tcp_receive+0xb34>
 802094c:	2301      	movs	r3, #1
 802094e:	e000      	b.n	8020952 <tcp_receive+0xb36>
 8020950:	2300      	movs	r3, #0
 8020952:	4423      	add	r3, r4
 8020954:	687a      	ldr	r2, [r7, #4]
 8020956:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8020958:	441a      	add	r2, r3
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 802095e:	687b      	ldr	r3, [r7, #4]
 8020960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020962:	461c      	mov	r4, r3
 8020964:	68bb      	ldr	r3, [r7, #8]
 8020966:	891b      	ldrh	r3, [r3, #8]
 8020968:	461d      	mov	r5, r3
 802096a:	68bb      	ldr	r3, [r7, #8]
 802096c:	68db      	ldr	r3, [r3, #12]
 802096e:	899b      	ldrh	r3, [r3, #12]
 8020970:	b29b      	uxth	r3, r3
 8020972:	4618      	mov	r0, r3
 8020974:	f7f8 fd9c 	bl	80194b0 <lwip_htons>
 8020978:	4603      	mov	r3, r0
 802097a:	f003 0303 	and.w	r3, r3, #3
 802097e:	2b00      	cmp	r3, #0
 8020980:	d001      	beq.n	8020986 <tcp_receive+0xb6a>
 8020982:	2301      	movs	r3, #1
 8020984:	e000      	b.n	8020988 <tcp_receive+0xb6c>
 8020986:	2300      	movs	r3, #0
 8020988:	442b      	add	r3, r5
 802098a:	429c      	cmp	r4, r3
 802098c:	d206      	bcs.n	802099c <tcp_receive+0xb80>
 802098e:	4b1e      	ldr	r3, [pc, #120]	; (8020a08 <tcp_receive+0xbec>)
 8020990:	f240 52de 	movw	r2, #1502	; 0x5de
 8020994:	4922      	ldr	r1, [pc, #136]	; (8020a20 <tcp_receive+0xc04>)
 8020996:	481e      	ldr	r0, [pc, #120]	; (8020a10 <tcp_receive+0xbf4>)
 8020998:	f005 faa6 	bl	8025ee8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 802099c:	68bb      	ldr	r3, [r7, #8]
 802099e:	891b      	ldrh	r3, [r3, #8]
 80209a0:	461c      	mov	r4, r3
 80209a2:	68bb      	ldr	r3, [r7, #8]
 80209a4:	68db      	ldr	r3, [r3, #12]
 80209a6:	899b      	ldrh	r3, [r3, #12]
 80209a8:	b29b      	uxth	r3, r3
 80209aa:	4618      	mov	r0, r3
 80209ac:	f7f8 fd80 	bl	80194b0 <lwip_htons>
 80209b0:	4603      	mov	r3, r0
 80209b2:	f003 0303 	and.w	r3, r3, #3
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	d001      	beq.n	80209be <tcp_receive+0xba2>
 80209ba:	2301      	movs	r3, #1
 80209bc:	e000      	b.n	80209c0 <tcp_receive+0xba4>
 80209be:	2300      	movs	r3, #0
 80209c0:	18e1      	adds	r1, r4, r3
 80209c2:	687b      	ldr	r3, [r7, #4]
 80209c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80209c6:	b28b      	uxth	r3, r1
 80209c8:	1ad3      	subs	r3, r2, r3
 80209ca:	b29a      	uxth	r2, r3
 80209cc:	687b      	ldr	r3, [r7, #4]
 80209ce:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80209d0:	6878      	ldr	r0, [r7, #4]
 80209d2:	f7fd f877 	bl	801dac4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80209d6:	68bb      	ldr	r3, [r7, #8]
 80209d8:	685b      	ldr	r3, [r3, #4]
 80209da:	891b      	ldrh	r3, [r3, #8]
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d028      	beq.n	8020a32 <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80209e0:	4b0d      	ldr	r3, [pc, #52]	; (8020a18 <tcp_receive+0xbfc>)
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	2b00      	cmp	r3, #0
 80209e6:	d01d      	beq.n	8020a24 <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 80209e8:	4b0b      	ldr	r3, [pc, #44]	; (8020a18 <tcp_receive+0xbfc>)
 80209ea:	681a      	ldr	r2, [r3, #0]
 80209ec:	68bb      	ldr	r3, [r7, #8]
 80209ee:	685b      	ldr	r3, [r3, #4]
 80209f0:	4619      	mov	r1, r3
 80209f2:	4610      	mov	r0, r2
 80209f4:	f7fc fab4 	bl	801cf60 <pbuf_cat>
 80209f8:	e018      	b.n	8020a2c <tcp_receive+0xc10>
 80209fa:	bf00      	nop
 80209fc:	20009516 	.word	0x20009516
 8020a00:	2000950c 	.word	0x2000950c
 8020a04:	200094ec 	.word	0x200094ec
 8020a08:	0802877c 	.word	0x0802877c
 8020a0c:	08028a80 	.word	0x08028a80
 8020a10:	080287c0 	.word	0x080287c0
 8020a14:	08028abc 	.word	0x08028abc
 8020a18:	2000951c 	.word	0x2000951c
 8020a1c:	20009519 	.word	0x20009519
 8020a20:	08028adc 	.word	0x08028adc
            } else {
              recv_data = cseg->p;
 8020a24:	68bb      	ldr	r3, [r7, #8]
 8020a26:	685b      	ldr	r3, [r3, #4]
 8020a28:	4a71      	ldr	r2, [pc, #452]	; (8020bf0 <tcp_receive+0xdd4>)
 8020a2a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8020a2c:	68bb      	ldr	r3, [r7, #8]
 8020a2e:	2200      	movs	r2, #0
 8020a30:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8020a32:	68bb      	ldr	r3, [r7, #8]
 8020a34:	68db      	ldr	r3, [r3, #12]
 8020a36:	899b      	ldrh	r3, [r3, #12]
 8020a38:	b29b      	uxth	r3, r3
 8020a3a:	4618      	mov	r0, r3
 8020a3c:	f7f8 fd38 	bl	80194b0 <lwip_htons>
 8020a40:	4603      	mov	r3, r0
 8020a42:	f003 0301 	and.w	r3, r3, #1
 8020a46:	2b00      	cmp	r3, #0
 8020a48:	d00d      	beq.n	8020a66 <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8020a4a:	4b6a      	ldr	r3, [pc, #424]	; (8020bf4 <tcp_receive+0xdd8>)
 8020a4c:	781b      	ldrb	r3, [r3, #0]
 8020a4e:	f043 0320 	orr.w	r3, r3, #32
 8020a52:	b2da      	uxtb	r2, r3
 8020a54:	4b67      	ldr	r3, [pc, #412]	; (8020bf4 <tcp_receive+0xdd8>)
 8020a56:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8020a58:	687b      	ldr	r3, [r7, #4]
 8020a5a:	7d1b      	ldrb	r3, [r3, #20]
 8020a5c:	2b04      	cmp	r3, #4
 8020a5e:	d102      	bne.n	8020a66 <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 8020a60:	687b      	ldr	r3, [r7, #4]
 8020a62:	2207      	movs	r2, #7
 8020a64:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8020a66:	68bb      	ldr	r3, [r7, #8]
 8020a68:	681a      	ldr	r2, [r3, #0]
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8020a6e:	68b8      	ldr	r0, [r7, #8]
 8020a70:	f7fd fcb7 	bl	801e3e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8020a74:	687b      	ldr	r3, [r7, #4]
 8020a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d008      	beq.n	8020a8e <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020a80:	68db      	ldr	r3, [r3, #12]
 8020a82:	685a      	ldr	r2, [r3, #4]
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8020a88:	429a      	cmp	r2, r3
 8020a8a:	f43f af47 	beq.w	802091c <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8020a8e:	687b      	ldr	r3, [r7, #4]
 8020a90:	7e9b      	ldrb	r3, [r3, #26]
 8020a92:	f003 0301 	and.w	r3, r3, #1
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	d00e      	beq.n	8020ab8 <tcp_receive+0xc9c>
 8020a9a:	687b      	ldr	r3, [r7, #4]
 8020a9c:	7e9b      	ldrb	r3, [r3, #26]
 8020a9e:	f023 0301 	bic.w	r3, r3, #1
 8020aa2:	b2da      	uxtb	r2, r3
 8020aa4:	687b      	ldr	r3, [r7, #4]
 8020aa6:	769a      	strb	r2, [r3, #26]
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	7e9b      	ldrb	r3, [r3, #26]
 8020aac:	f043 0302 	orr.w	r3, r3, #2
 8020ab0:	b2da      	uxtb	r2, r3
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020ab6:	e180      	b.n	8020dba <tcp_receive+0xf9e>
        tcp_ack(pcb);
 8020ab8:	687b      	ldr	r3, [r7, #4]
 8020aba:	7e9b      	ldrb	r3, [r3, #26]
 8020abc:	f043 0301 	orr.w	r3, r3, #1
 8020ac0:	b2da      	uxtb	r2, r3
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8020ac6:	e178      	b.n	8020dba <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8020ac8:	6878      	ldr	r0, [r7, #4]
 8020aca:	f001 f8c7 	bl	8021c5c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8020ace:	687b      	ldr	r3, [r7, #4]
 8020ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020ad2:	2b00      	cmp	r3, #0
 8020ad4:	d106      	bne.n	8020ae4 <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8020ad6:	4848      	ldr	r0, [pc, #288]	; (8020bf8 <tcp_receive+0xddc>)
 8020ad8:	f7fd fc9b 	bl	801e412 <tcp_seg_copy>
 8020adc:	4602      	mov	r2, r0
 8020ade:	687b      	ldr	r3, [r7, #4]
 8020ae0:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8020ae2:	e16a      	b.n	8020dba <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8020ae8:	687b      	ldr	r3, [r7, #4]
 8020aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020aee:	e14f      	b.n	8020d90 <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 8020af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020af2:	68db      	ldr	r3, [r3, #12]
 8020af4:	685a      	ldr	r2, [r3, #4]
 8020af6:	4b41      	ldr	r3, [pc, #260]	; (8020bfc <tcp_receive+0xde0>)
 8020af8:	681b      	ldr	r3, [r3, #0]
 8020afa:	429a      	cmp	r2, r3
 8020afc:	d11d      	bne.n	8020b3a <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8020afe:	4b3e      	ldr	r3, [pc, #248]	; (8020bf8 <tcp_receive+0xddc>)
 8020b00:	891a      	ldrh	r2, [r3, #8]
 8020b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b04:	891b      	ldrh	r3, [r3, #8]
 8020b06:	429a      	cmp	r2, r3
 8020b08:	f240 8147 	bls.w	8020d9a <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8020b0c:	483a      	ldr	r0, [pc, #232]	; (8020bf8 <tcp_receive+0xddc>)
 8020b0e:	f7fd fc80 	bl	801e412 <tcp_seg_copy>
 8020b12:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 8020b14:	68bb      	ldr	r3, [r7, #8]
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	f000 8141 	beq.w	8020d9e <tcp_receive+0xf82>
                  if (prev != NULL) {
 8020b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b1e:	2b00      	cmp	r3, #0
 8020b20:	d003      	beq.n	8020b2a <tcp_receive+0xd0e>
                    prev->next = cseg;
 8020b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b24:	68ba      	ldr	r2, [r7, #8]
 8020b26:	601a      	str	r2, [r3, #0]
 8020b28:	e002      	b.n	8020b30 <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	68ba      	ldr	r2, [r7, #8]
 8020b2e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8020b30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020b32:	68b8      	ldr	r0, [r7, #8]
 8020b34:	f7ff f8fc 	bl	801fd30 <tcp_oos_insert_segment>
                }
                break;
 8020b38:	e131      	b.n	8020d9e <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8020b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d117      	bne.n	8020b70 <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8020b40:	4b2e      	ldr	r3, [pc, #184]	; (8020bfc <tcp_receive+0xde0>)
 8020b42:	681a      	ldr	r2, [r3, #0]
 8020b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b46:	68db      	ldr	r3, [r3, #12]
 8020b48:	685b      	ldr	r3, [r3, #4]
 8020b4a:	1ad3      	subs	r3, r2, r3
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	da57      	bge.n	8020c00 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8020b50:	4829      	ldr	r0, [pc, #164]	; (8020bf8 <tcp_receive+0xddc>)
 8020b52:	f7fd fc5e 	bl	801e412 <tcp_seg_copy>
 8020b56:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8020b58:	68bb      	ldr	r3, [r7, #8]
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	f000 8121 	beq.w	8020da2 <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	68ba      	ldr	r2, [r7, #8]
 8020b64:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8020b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020b68:	68b8      	ldr	r0, [r7, #8]
 8020b6a:	f7ff f8e1 	bl	801fd30 <tcp_oos_insert_segment>
                  }
                  break;
 8020b6e:	e118      	b.n	8020da2 <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8020b70:	4b22      	ldr	r3, [pc, #136]	; (8020bfc <tcp_receive+0xde0>)
 8020b72:	681a      	ldr	r2, [r3, #0]
 8020b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b76:	68db      	ldr	r3, [r3, #12]
 8020b78:	685b      	ldr	r3, [r3, #4]
 8020b7a:	1ad3      	subs	r3, r2, r3
 8020b7c:	3b01      	subs	r3, #1
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	db3e      	blt.n	8020c00 <tcp_receive+0xde4>
 8020b82:	4b1e      	ldr	r3, [pc, #120]	; (8020bfc <tcp_receive+0xde0>)
 8020b84:	681a      	ldr	r2, [r3, #0]
 8020b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b88:	68db      	ldr	r3, [r3, #12]
 8020b8a:	685b      	ldr	r3, [r3, #4]
 8020b8c:	1ad3      	subs	r3, r2, r3
 8020b8e:	3301      	adds	r3, #1
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	dc35      	bgt.n	8020c00 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8020b94:	4818      	ldr	r0, [pc, #96]	; (8020bf8 <tcp_receive+0xddc>)
 8020b96:	f7fd fc3c 	bl	801e412 <tcp_seg_copy>
 8020b9a:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8020b9c:	68bb      	ldr	r3, [r7, #8]
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	f000 8101 	beq.w	8020da6 <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8020ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ba6:	68db      	ldr	r3, [r3, #12]
 8020ba8:	685b      	ldr	r3, [r3, #4]
 8020baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020bac:	8912      	ldrh	r2, [r2, #8]
 8020bae:	441a      	add	r2, r3
 8020bb0:	4b12      	ldr	r3, [pc, #72]	; (8020bfc <tcp_receive+0xde0>)
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	1ad3      	subs	r3, r2, r3
 8020bb6:	2b00      	cmp	r3, #0
 8020bb8:	dd12      	ble.n	8020be0 <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8020bba:	4b10      	ldr	r3, [pc, #64]	; (8020bfc <tcp_receive+0xde0>)
 8020bbc:	681b      	ldr	r3, [r3, #0]
 8020bbe:	b29a      	uxth	r2, r3
 8020bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bc2:	68db      	ldr	r3, [r3, #12]
 8020bc4:	685b      	ldr	r3, [r3, #4]
 8020bc6:	b29b      	uxth	r3, r3
 8020bc8:	1ad3      	subs	r3, r2, r3
 8020bca:	b29a      	uxth	r2, r3
 8020bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8020bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bd2:	685a      	ldr	r2, [r3, #4]
 8020bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bd6:	891b      	ldrh	r3, [r3, #8]
 8020bd8:	4619      	mov	r1, r3
 8020bda:	4610      	mov	r0, r2
 8020bdc:	f7fb ff72 	bl	801cac4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8020be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020be2:	68ba      	ldr	r2, [r7, #8]
 8020be4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8020be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020be8:	68b8      	ldr	r0, [r7, #8]
 8020bea:	f7ff f8a1 	bl	801fd30 <tcp_oos_insert_segment>
                  }
                  break;
 8020bee:	e0da      	b.n	8020da6 <tcp_receive+0xf8a>
 8020bf0:	2000951c 	.word	0x2000951c
 8020bf4:	20009519 	.word	0x20009519
 8020bf8:	200094ec 	.word	0x200094ec
 8020bfc:	2000950c 	.word	0x2000950c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8020c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	2b00      	cmp	r3, #0
 8020c06:	f040 80be 	bne.w	8020d86 <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8020c0a:	4b7b      	ldr	r3, [pc, #492]	; (8020df8 <tcp_receive+0xfdc>)
 8020c0c:	681a      	ldr	r2, [r3, #0]
 8020c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c10:	68db      	ldr	r3, [r3, #12]
 8020c12:	685b      	ldr	r3, [r3, #4]
 8020c14:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	f340 80b5 	ble.w	8020d86 <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8020c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c1e:	68db      	ldr	r3, [r3, #12]
 8020c20:	899b      	ldrh	r3, [r3, #12]
 8020c22:	b29b      	uxth	r3, r3
 8020c24:	4618      	mov	r0, r3
 8020c26:	f7f8 fc43 	bl	80194b0 <lwip_htons>
 8020c2a:	4603      	mov	r3, r0
 8020c2c:	f003 0301 	and.w	r3, r3, #1
 8020c30:	2b00      	cmp	r3, #0
 8020c32:	f040 80ba 	bne.w	8020daa <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8020c36:	4871      	ldr	r0, [pc, #452]	; (8020dfc <tcp_receive+0xfe0>)
 8020c38:	f7fd fbeb 	bl	801e412 <tcp_seg_copy>
 8020c3c:	4602      	mov	r2, r0
 8020c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c40:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8020c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c44:	681b      	ldr	r3, [r3, #0]
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	f000 80b1 	beq.w	8020dae <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8020c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c4e:	68db      	ldr	r3, [r3, #12]
 8020c50:	685b      	ldr	r3, [r3, #4]
 8020c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020c54:	8912      	ldrh	r2, [r2, #8]
 8020c56:	441a      	add	r2, r3
 8020c58:	4b67      	ldr	r3, [pc, #412]	; (8020df8 <tcp_receive+0xfdc>)
 8020c5a:	681b      	ldr	r3, [r3, #0]
 8020c5c:	1ad3      	subs	r3, r2, r3
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	dd12      	ble.n	8020c88 <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8020c62:	4b65      	ldr	r3, [pc, #404]	; (8020df8 <tcp_receive+0xfdc>)
 8020c64:	681b      	ldr	r3, [r3, #0]
 8020c66:	b29a      	uxth	r2, r3
 8020c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c6a:	68db      	ldr	r3, [r3, #12]
 8020c6c:	685b      	ldr	r3, [r3, #4]
 8020c6e:	b29b      	uxth	r3, r3
 8020c70:	1ad3      	subs	r3, r2, r3
 8020c72:	b29a      	uxth	r2, r3
 8020c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c76:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8020c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c7a:	685a      	ldr	r2, [r3, #4]
 8020c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c7e:	891b      	ldrh	r3, [r3, #8]
 8020c80:	4619      	mov	r1, r3
 8020c82:	4610      	mov	r0, r2
 8020c84:	f7fb ff1e 	bl	801cac4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8020c88:	4b5d      	ldr	r3, [pc, #372]	; (8020e00 <tcp_receive+0xfe4>)
 8020c8a:	881b      	ldrh	r3, [r3, #0]
 8020c8c:	461a      	mov	r2, r3
 8020c8e:	4b5a      	ldr	r3, [pc, #360]	; (8020df8 <tcp_receive+0xfdc>)
 8020c90:	681b      	ldr	r3, [r3, #0]
 8020c92:	441a      	add	r2, r3
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c98:	6879      	ldr	r1, [r7, #4]
 8020c9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020c9c:	440b      	add	r3, r1
 8020c9e:	1ad3      	subs	r3, r2, r3
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	f340 8084 	ble.w	8020dae <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8020ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ca8:	681b      	ldr	r3, [r3, #0]
 8020caa:	68db      	ldr	r3, [r3, #12]
 8020cac:	899b      	ldrh	r3, [r3, #12]
 8020cae:	b29b      	uxth	r3, r3
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	f7f8 fbfd 	bl	80194b0 <lwip_htons>
 8020cb6:	4603      	mov	r3, r0
 8020cb8:	f003 0301 	and.w	r3, r3, #1
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	d01d      	beq.n	8020cfc <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8020cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020cc2:	681b      	ldr	r3, [r3, #0]
 8020cc4:	68dc      	ldr	r4, [r3, #12]
 8020cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020cc8:	681b      	ldr	r3, [r3, #0]
 8020cca:	68db      	ldr	r3, [r3, #12]
 8020ccc:	899b      	ldrh	r3, [r3, #12]
 8020cce:	b29b      	uxth	r3, r3
 8020cd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8020cd4:	b29d      	uxth	r5, r3
 8020cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020cd8:	681b      	ldr	r3, [r3, #0]
 8020cda:	68db      	ldr	r3, [r3, #12]
 8020cdc:	899b      	ldrh	r3, [r3, #12]
 8020cde:	b29b      	uxth	r3, r3
 8020ce0:	4618      	mov	r0, r3
 8020ce2:	f7f8 fbe5 	bl	80194b0 <lwip_htons>
 8020ce6:	4603      	mov	r3, r0
 8020ce8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8020cec:	b29b      	uxth	r3, r3
 8020cee:	4618      	mov	r0, r3
 8020cf0:	f7f8 fbde 	bl	80194b0 <lwip_htons>
 8020cf4:	4603      	mov	r3, r0
 8020cf6:	432b      	orrs	r3, r5
 8020cf8:	b29b      	uxth	r3, r3
 8020cfa:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8020cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020cfe:	681b      	ldr	r3, [r3, #0]
 8020d00:	687a      	ldr	r2, [r7, #4]
 8020d02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8020d04:	b291      	uxth	r1, r2
 8020d06:	687a      	ldr	r2, [r7, #4]
 8020d08:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8020d0a:	440a      	add	r2, r1
 8020d0c:	b291      	uxth	r1, r2
 8020d0e:	4a3a      	ldr	r2, [pc, #232]	; (8020df8 <tcp_receive+0xfdc>)
 8020d10:	6812      	ldr	r2, [r2, #0]
 8020d12:	b292      	uxth	r2, r2
 8020d14:	1a8a      	subs	r2, r1, r2
 8020d16:	b292      	uxth	r2, r2
 8020d18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8020d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d1c:	681b      	ldr	r3, [r3, #0]
 8020d1e:	685a      	ldr	r2, [r3, #4]
 8020d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d22:	681b      	ldr	r3, [r3, #0]
 8020d24:	891b      	ldrh	r3, [r3, #8]
 8020d26:	4619      	mov	r1, r3
 8020d28:	4610      	mov	r0, r2
 8020d2a:	f7fb fecb 	bl	801cac4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8020d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d30:	681b      	ldr	r3, [r3, #0]
 8020d32:	891c      	ldrh	r4, [r3, #8]
 8020d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d36:	681b      	ldr	r3, [r3, #0]
 8020d38:	68db      	ldr	r3, [r3, #12]
 8020d3a:	899b      	ldrh	r3, [r3, #12]
 8020d3c:	b29b      	uxth	r3, r3
 8020d3e:	4618      	mov	r0, r3
 8020d40:	f7f8 fbb6 	bl	80194b0 <lwip_htons>
 8020d44:	4603      	mov	r3, r0
 8020d46:	f003 0303 	and.w	r3, r3, #3
 8020d4a:	2b00      	cmp	r3, #0
 8020d4c:	d001      	beq.n	8020d52 <tcp_receive+0xf36>
 8020d4e:	2301      	movs	r3, #1
 8020d50:	e000      	b.n	8020d54 <tcp_receive+0xf38>
 8020d52:	2300      	movs	r3, #0
 8020d54:	4423      	add	r3, r4
 8020d56:	b29a      	uxth	r2, r3
 8020d58:	4b29      	ldr	r3, [pc, #164]	; (8020e00 <tcp_receive+0xfe4>)
 8020d5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8020d5c:	4b28      	ldr	r3, [pc, #160]	; (8020e00 <tcp_receive+0xfe4>)
 8020d5e:	881b      	ldrh	r3, [r3, #0]
 8020d60:	461a      	mov	r2, r3
 8020d62:	4b25      	ldr	r3, [pc, #148]	; (8020df8 <tcp_receive+0xfdc>)
 8020d64:	681b      	ldr	r3, [r3, #0]
 8020d66:	441a      	add	r2, r3
 8020d68:	687b      	ldr	r3, [r7, #4]
 8020d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d6c:	6879      	ldr	r1, [r7, #4]
 8020d6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020d70:	440b      	add	r3, r1
 8020d72:	429a      	cmp	r2, r3
 8020d74:	d01b      	beq.n	8020dae <tcp_receive+0xf92>
 8020d76:	4b23      	ldr	r3, [pc, #140]	; (8020e04 <tcp_receive+0xfe8>)
 8020d78:	f240 627b 	movw	r2, #1659	; 0x67b
 8020d7c:	4922      	ldr	r1, [pc, #136]	; (8020e08 <tcp_receive+0xfec>)
 8020d7e:	4823      	ldr	r0, [pc, #140]	; (8020e0c <tcp_receive+0xff0>)
 8020d80:	f005 f8b2 	bl	8025ee8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8020d84:	e013      	b.n	8020dae <tcp_receive+0xf92>
              }
            }
            prev = next;
 8020d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d88:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8020d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d8c:	681b      	ldr	r3, [r3, #0]
 8020d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d92:	2b00      	cmp	r3, #0
 8020d94:	f47f aeac 	bne.w	8020af0 <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 8020d98:	e00f      	b.n	8020dba <tcp_receive+0xf9e>
                break;
 8020d9a:	bf00      	nop
 8020d9c:	e00d      	b.n	8020dba <tcp_receive+0xf9e>
                break;
 8020d9e:	bf00      	nop
 8020da0:	e00b      	b.n	8020dba <tcp_receive+0xf9e>
                  break;
 8020da2:	bf00      	nop
 8020da4:	e009      	b.n	8020dba <tcp_receive+0xf9e>
                  break;
 8020da6:	bf00      	nop
 8020da8:	e007      	b.n	8020dba <tcp_receive+0xf9e>
                  break;
 8020daa:	bf00      	nop
 8020dac:	e005      	b.n	8020dba <tcp_receive+0xf9e>
                break;
 8020dae:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8020db0:	e003      	b.n	8020dba <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8020db2:	6878      	ldr	r0, [r7, #4]
 8020db4:	f000 ff52 	bl	8021c5c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8020db8:	e01a      	b.n	8020df0 <tcp_receive+0xfd4>
 8020dba:	e019      	b.n	8020df0 <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8020dbc:	4b0e      	ldr	r3, [pc, #56]	; (8020df8 <tcp_receive+0xfdc>)
 8020dbe:	681a      	ldr	r2, [r3, #0]
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dc4:	1ad3      	subs	r3, r2, r3
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	db0a      	blt.n	8020de0 <tcp_receive+0xfc4>
 8020dca:	4b0b      	ldr	r3, [pc, #44]	; (8020df8 <tcp_receive+0xfdc>)
 8020dcc:	681a      	ldr	r2, [r3, #0]
 8020dce:	687b      	ldr	r3, [r7, #4]
 8020dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dd2:	6879      	ldr	r1, [r7, #4]
 8020dd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8020dd6:	440b      	add	r3, r1
 8020dd8:	1ad3      	subs	r3, r2, r3
 8020dda:	3301      	adds	r3, #1
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	dd07      	ble.n	8020df0 <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	7e9b      	ldrb	r3, [r3, #26]
 8020de4:	f043 0302 	orr.w	r3, r3, #2
 8020de8:	b2da      	uxtb	r2, r3
 8020dea:	687b      	ldr	r3, [r7, #4]
 8020dec:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8020dee:	e7ff      	b.n	8020df0 <tcp_receive+0xfd4>
 8020df0:	bf00      	nop
 8020df2:	3734      	adds	r7, #52	; 0x34
 8020df4:	46bd      	mov	sp, r7
 8020df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020df8:	2000950c 	.word	0x2000950c
 8020dfc:	200094ec 	.word	0x200094ec
 8020e00:	20009516 	.word	0x20009516
 8020e04:	0802877c 	.word	0x0802877c
 8020e08:	08028a48 	.word	0x08028a48
 8020e0c:	080287c0 	.word	0x080287c0

08020e10 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8020e10:	b480      	push	{r7}
 8020e12:	b083      	sub	sp, #12
 8020e14:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8020e16:	4b18      	ldr	r3, [pc, #96]	; (8020e78 <tcp_getoptbyte+0x68>)
 8020e18:	681b      	ldr	r3, [r3, #0]
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d005      	beq.n	8020e2a <tcp_getoptbyte+0x1a>
 8020e1e:	4b17      	ldr	r3, [pc, #92]	; (8020e7c <tcp_getoptbyte+0x6c>)
 8020e20:	881a      	ldrh	r2, [r3, #0]
 8020e22:	4b17      	ldr	r3, [pc, #92]	; (8020e80 <tcp_getoptbyte+0x70>)
 8020e24:	881b      	ldrh	r3, [r3, #0]
 8020e26:	429a      	cmp	r2, r3
 8020e28:	d20e      	bcs.n	8020e48 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8020e2a:	4b16      	ldr	r3, [pc, #88]	; (8020e84 <tcp_getoptbyte+0x74>)
 8020e2c:	681b      	ldr	r3, [r3, #0]
 8020e2e:	3314      	adds	r3, #20
 8020e30:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8020e32:	4b12      	ldr	r3, [pc, #72]	; (8020e7c <tcp_getoptbyte+0x6c>)
 8020e34:	881b      	ldrh	r3, [r3, #0]
 8020e36:	1c5a      	adds	r2, r3, #1
 8020e38:	b291      	uxth	r1, r2
 8020e3a:	4a10      	ldr	r2, [pc, #64]	; (8020e7c <tcp_getoptbyte+0x6c>)
 8020e3c:	8011      	strh	r1, [r2, #0]
 8020e3e:	461a      	mov	r2, r3
 8020e40:	683b      	ldr	r3, [r7, #0]
 8020e42:	4413      	add	r3, r2
 8020e44:	781b      	ldrb	r3, [r3, #0]
 8020e46:	e010      	b.n	8020e6a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8020e48:	4b0c      	ldr	r3, [pc, #48]	; (8020e7c <tcp_getoptbyte+0x6c>)
 8020e4a:	881b      	ldrh	r3, [r3, #0]
 8020e4c:	1c5a      	adds	r2, r3, #1
 8020e4e:	b291      	uxth	r1, r2
 8020e50:	4a0a      	ldr	r2, [pc, #40]	; (8020e7c <tcp_getoptbyte+0x6c>)
 8020e52:	8011      	strh	r1, [r2, #0]
 8020e54:	b2da      	uxtb	r2, r3
 8020e56:	4b0a      	ldr	r3, [pc, #40]	; (8020e80 <tcp_getoptbyte+0x70>)
 8020e58:	881b      	ldrh	r3, [r3, #0]
 8020e5a:	b2db      	uxtb	r3, r3
 8020e5c:	1ad3      	subs	r3, r2, r3
 8020e5e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8020e60:	4b05      	ldr	r3, [pc, #20]	; (8020e78 <tcp_getoptbyte+0x68>)
 8020e62:	681a      	ldr	r2, [r3, #0]
 8020e64:	79fb      	ldrb	r3, [r7, #7]
 8020e66:	4413      	add	r3, r2
 8020e68:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020e6a:	4618      	mov	r0, r3
 8020e6c:	370c      	adds	r7, #12
 8020e6e:	46bd      	mov	sp, r7
 8020e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e74:	4770      	bx	lr
 8020e76:	bf00      	nop
 8020e78:	20009504 	.word	0x20009504
 8020e7c:	20009508 	.word	0x20009508
 8020e80:	20009502 	.word	0x20009502
 8020e84:	200094fc 	.word	0x200094fc

08020e88 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8020e88:	b580      	push	{r7, lr}
 8020e8a:	b084      	sub	sp, #16
 8020e8c:	af00      	add	r7, sp, #0
 8020e8e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8020e90:	4b2d      	ldr	r3, [pc, #180]	; (8020f48 <tcp_parseopt+0xc0>)
 8020e92:	881b      	ldrh	r3, [r3, #0]
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	d053      	beq.n	8020f40 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020e98:	4b2c      	ldr	r3, [pc, #176]	; (8020f4c <tcp_parseopt+0xc4>)
 8020e9a:	2200      	movs	r2, #0
 8020e9c:	801a      	strh	r2, [r3, #0]
 8020e9e:	e043      	b.n	8020f28 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8020ea0:	f7ff ffb6 	bl	8020e10 <tcp_getoptbyte>
 8020ea4:	4603      	mov	r3, r0
 8020ea6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8020ea8:	7bfb      	ldrb	r3, [r7, #15]
 8020eaa:	2b01      	cmp	r3, #1
 8020eac:	d03c      	beq.n	8020f28 <tcp_parseopt+0xa0>
 8020eae:	2b02      	cmp	r3, #2
 8020eb0:	d002      	beq.n	8020eb8 <tcp_parseopt+0x30>
 8020eb2:	2b00      	cmp	r3, #0
 8020eb4:	d03f      	beq.n	8020f36 <tcp_parseopt+0xae>
 8020eb6:	e026      	b.n	8020f06 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8020eb8:	f7ff ffaa 	bl	8020e10 <tcp_getoptbyte>
 8020ebc:	4603      	mov	r3, r0
 8020ebe:	2b04      	cmp	r3, #4
 8020ec0:	d13b      	bne.n	8020f3a <tcp_parseopt+0xb2>
 8020ec2:	4b22      	ldr	r3, [pc, #136]	; (8020f4c <tcp_parseopt+0xc4>)
 8020ec4:	881b      	ldrh	r3, [r3, #0]
 8020ec6:	3302      	adds	r3, #2
 8020ec8:	4a1f      	ldr	r2, [pc, #124]	; (8020f48 <tcp_parseopt+0xc0>)
 8020eca:	8812      	ldrh	r2, [r2, #0]
 8020ecc:	4293      	cmp	r3, r2
 8020ece:	dc34      	bgt.n	8020f3a <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8020ed0:	f7ff ff9e 	bl	8020e10 <tcp_getoptbyte>
 8020ed4:	4603      	mov	r3, r0
 8020ed6:	b29b      	uxth	r3, r3
 8020ed8:	021b      	lsls	r3, r3, #8
 8020eda:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8020edc:	f7ff ff98 	bl	8020e10 <tcp_getoptbyte>
 8020ee0:	4603      	mov	r3, r0
 8020ee2:	b29a      	uxth	r2, r3
 8020ee4:	89bb      	ldrh	r3, [r7, #12]
 8020ee6:	4313      	orrs	r3, r2
 8020ee8:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8020eea:	89bb      	ldrh	r3, [r7, #12]
 8020eec:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8020ef0:	d804      	bhi.n	8020efc <tcp_parseopt+0x74>
 8020ef2:	89bb      	ldrh	r3, [r7, #12]
 8020ef4:	2b00      	cmp	r3, #0
 8020ef6:	d001      	beq.n	8020efc <tcp_parseopt+0x74>
 8020ef8:	89ba      	ldrh	r2, [r7, #12]
 8020efa:	e001      	b.n	8020f00 <tcp_parseopt+0x78>
 8020efc:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8020f00:	687b      	ldr	r3, [r7, #4]
 8020f02:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8020f04:	e010      	b.n	8020f28 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8020f06:	f7ff ff83 	bl	8020e10 <tcp_getoptbyte>
 8020f0a:	4603      	mov	r3, r0
 8020f0c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8020f0e:	7afb      	ldrb	r3, [r7, #11]
 8020f10:	2b01      	cmp	r3, #1
 8020f12:	d914      	bls.n	8020f3e <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8020f14:	7afb      	ldrb	r3, [r7, #11]
 8020f16:	b29a      	uxth	r2, r3
 8020f18:	4b0c      	ldr	r3, [pc, #48]	; (8020f4c <tcp_parseopt+0xc4>)
 8020f1a:	881b      	ldrh	r3, [r3, #0]
 8020f1c:	4413      	add	r3, r2
 8020f1e:	b29b      	uxth	r3, r3
 8020f20:	3b02      	subs	r3, #2
 8020f22:	b29a      	uxth	r2, r3
 8020f24:	4b09      	ldr	r3, [pc, #36]	; (8020f4c <tcp_parseopt+0xc4>)
 8020f26:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8020f28:	4b08      	ldr	r3, [pc, #32]	; (8020f4c <tcp_parseopt+0xc4>)
 8020f2a:	881a      	ldrh	r2, [r3, #0]
 8020f2c:	4b06      	ldr	r3, [pc, #24]	; (8020f48 <tcp_parseopt+0xc0>)
 8020f2e:	881b      	ldrh	r3, [r3, #0]
 8020f30:	429a      	cmp	r2, r3
 8020f32:	d3b5      	bcc.n	8020ea0 <tcp_parseopt+0x18>
 8020f34:	e004      	b.n	8020f40 <tcp_parseopt+0xb8>
        return;
 8020f36:	bf00      	nop
 8020f38:	e002      	b.n	8020f40 <tcp_parseopt+0xb8>
          return;
 8020f3a:	bf00      	nop
 8020f3c:	e000      	b.n	8020f40 <tcp_parseopt+0xb8>
          return;
 8020f3e:	bf00      	nop
      }
    }
  }
}
 8020f40:	3710      	adds	r7, #16
 8020f42:	46bd      	mov	sp, r7
 8020f44:	bd80      	pop	{r7, pc}
 8020f46:	bf00      	nop
 8020f48:	20009500 	.word	0x20009500
 8020f4c:	20009508 	.word	0x20009508

08020f50 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8020f50:	b480      	push	{r7}
 8020f52:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8020f54:	4b05      	ldr	r3, [pc, #20]	; (8020f6c <tcp_trigger_input_pcb_close+0x1c>)
 8020f56:	781b      	ldrb	r3, [r3, #0]
 8020f58:	f043 0310 	orr.w	r3, r3, #16
 8020f5c:	b2da      	uxtb	r2, r3
 8020f5e:	4b03      	ldr	r3, [pc, #12]	; (8020f6c <tcp_trigger_input_pcb_close+0x1c>)
 8020f60:	701a      	strb	r2, [r3, #0]
}
 8020f62:	bf00      	nop
 8020f64:	46bd      	mov	sp, r7
 8020f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f6a:	4770      	bx	lr
 8020f6c:	20009519 	.word	0x20009519

08020f70 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8020f70:	b580      	push	{r7, lr}
 8020f72:	b086      	sub	sp, #24
 8020f74:	af00      	add	r7, sp, #0
 8020f76:	60f8      	str	r0, [r7, #12]
 8020f78:	607b      	str	r3, [r7, #4]
 8020f7a:	460b      	mov	r3, r1
 8020f7c:	817b      	strh	r3, [r7, #10]
 8020f7e:	4613      	mov	r3, r2
 8020f80:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8020f82:	897a      	ldrh	r2, [r7, #10]
 8020f84:	893b      	ldrh	r3, [r7, #8]
 8020f86:	4413      	add	r3, r2
 8020f88:	b29b      	uxth	r3, r3
 8020f8a:	3314      	adds	r3, #20
 8020f8c:	b29b      	uxth	r3, r3
 8020f8e:	2200      	movs	r2, #0
 8020f90:	4619      	mov	r1, r3
 8020f92:	2001      	movs	r0, #1
 8020f94:	f7fb fb98 	bl	801c6c8 <pbuf_alloc>
 8020f98:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8020f9a:	697b      	ldr	r3, [r7, #20]
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	d057      	beq.n	8021050 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8020fa0:	697b      	ldr	r3, [r7, #20]
 8020fa2:	895b      	ldrh	r3, [r3, #10]
 8020fa4:	461a      	mov	r2, r3
 8020fa6:	897b      	ldrh	r3, [r7, #10]
 8020fa8:	3314      	adds	r3, #20
 8020faa:	429a      	cmp	r2, r3
 8020fac:	da05      	bge.n	8020fba <tcp_output_alloc_header+0x4a>
 8020fae:	4b2b      	ldr	r3, [pc, #172]	; (802105c <tcp_output_alloc_header+0xec>)
 8020fb0:	2273      	movs	r2, #115	; 0x73
 8020fb2:	492b      	ldr	r1, [pc, #172]	; (8021060 <tcp_output_alloc_header+0xf0>)
 8020fb4:	482b      	ldr	r0, [pc, #172]	; (8021064 <tcp_output_alloc_header+0xf4>)
 8020fb6:	f004 ff97 	bl	8025ee8 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8020fba:	697b      	ldr	r3, [r7, #20]
 8020fbc:	685b      	ldr	r3, [r3, #4]
 8020fbe:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8020fc0:	68fb      	ldr	r3, [r7, #12]
 8020fc2:	8adb      	ldrh	r3, [r3, #22]
 8020fc4:	4618      	mov	r0, r3
 8020fc6:	f7f8 fa73 	bl	80194b0 <lwip_htons>
 8020fca:	4603      	mov	r3, r0
 8020fcc:	461a      	mov	r2, r3
 8020fce:	693b      	ldr	r3, [r7, #16]
 8020fd0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8020fd2:	68fb      	ldr	r3, [r7, #12]
 8020fd4:	8b1b      	ldrh	r3, [r3, #24]
 8020fd6:	4618      	mov	r0, r3
 8020fd8:	f7f8 fa6a 	bl	80194b0 <lwip_htons>
 8020fdc:	4603      	mov	r3, r0
 8020fde:	461a      	mov	r2, r3
 8020fe0:	693b      	ldr	r3, [r7, #16]
 8020fe2:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8020fe4:	693b      	ldr	r3, [r7, #16]
 8020fe6:	687a      	ldr	r2, [r7, #4]
 8020fe8:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020fea:	68fb      	ldr	r3, [r7, #12]
 8020fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020fee:	4618      	mov	r0, r3
 8020ff0:	f7f8 fa6c 	bl	80194cc <lwip_htonl>
 8020ff4:	4602      	mov	r2, r0
 8020ff6:	693b      	ldr	r3, [r7, #16]
 8020ff8:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8020ffa:	897b      	ldrh	r3, [r7, #10]
 8020ffc:	089b      	lsrs	r3, r3, #2
 8020ffe:	b29b      	uxth	r3, r3
 8021000:	3305      	adds	r3, #5
 8021002:	b29b      	uxth	r3, r3
 8021004:	031b      	lsls	r3, r3, #12
 8021006:	b29b      	uxth	r3, r3
 8021008:	f043 0310 	orr.w	r3, r3, #16
 802100c:	b29b      	uxth	r3, r3
 802100e:	4618      	mov	r0, r3
 8021010:	f7f8 fa4e 	bl	80194b0 <lwip_htons>
 8021014:	4603      	mov	r3, r0
 8021016:	461a      	mov	r2, r3
 8021018:	693b      	ldr	r3, [r7, #16]
 802101a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 802101c:	68fb      	ldr	r3, [r7, #12]
 802101e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021020:	4618      	mov	r0, r3
 8021022:	f7f8 fa45 	bl	80194b0 <lwip_htons>
 8021026:	4603      	mov	r3, r0
 8021028:	461a      	mov	r2, r3
 802102a:	693b      	ldr	r3, [r7, #16]
 802102c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 802102e:	693b      	ldr	r3, [r7, #16]
 8021030:	2200      	movs	r2, #0
 8021032:	741a      	strb	r2, [r3, #16]
 8021034:	2200      	movs	r2, #0
 8021036:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8021038:	693b      	ldr	r3, [r7, #16]
 802103a:	2200      	movs	r2, #0
 802103c:	749a      	strb	r2, [r3, #18]
 802103e:	2200      	movs	r2, #0
 8021040:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8021042:	68fb      	ldr	r3, [r7, #12]
 8021044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021046:	68fa      	ldr	r2, [r7, #12]
 8021048:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 802104a:	441a      	add	r2, r3
 802104c:	68fb      	ldr	r3, [r7, #12]
 802104e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8021050:	697b      	ldr	r3, [r7, #20]
}
 8021052:	4618      	mov	r0, r3
 8021054:	3718      	adds	r7, #24
 8021056:	46bd      	mov	sp, r7
 8021058:	bd80      	pop	{r7, pc}
 802105a:	bf00      	nop
 802105c:	08028b04 	.word	0x08028b04
 8021060:	08028b38 	.word	0x08028b38
 8021064:	08028b68 	.word	0x08028b68

08021068 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8021068:	b5b0      	push	{r4, r5, r7, lr}
 802106a:	b084      	sub	sp, #16
 802106c:	af00      	add	r7, sp, #0
 802106e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021074:	2b00      	cmp	r3, #0
 8021076:	d02c      	beq.n	80210d2 <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802107c:	60fb      	str	r3, [r7, #12]
 802107e:	e002      	b.n	8021086 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8021080:	68fb      	ldr	r3, [r7, #12]
 8021082:	681b      	ldr	r3, [r3, #0]
 8021084:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8021086:	68fb      	ldr	r3, [r7, #12]
 8021088:	681b      	ldr	r3, [r3, #0]
 802108a:	2b00      	cmp	r3, #0
 802108c:	d1f8      	bne.n	8021080 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 802108e:	68fb      	ldr	r3, [r7, #12]
 8021090:	68db      	ldr	r3, [r3, #12]
 8021092:	899b      	ldrh	r3, [r3, #12]
 8021094:	b29b      	uxth	r3, r3
 8021096:	4618      	mov	r0, r3
 8021098:	f7f8 fa0a 	bl	80194b0 <lwip_htons>
 802109c:	4603      	mov	r3, r0
 802109e:	f003 0307 	and.w	r3, r3, #7
 80210a2:	2b00      	cmp	r3, #0
 80210a4:	d115      	bne.n	80210d2 <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80210a6:	68fb      	ldr	r3, [r7, #12]
 80210a8:	68dc      	ldr	r4, [r3, #12]
 80210aa:	68fb      	ldr	r3, [r7, #12]
 80210ac:	68db      	ldr	r3, [r3, #12]
 80210ae:	899b      	ldrh	r3, [r3, #12]
 80210b0:	b29d      	uxth	r5, r3
 80210b2:	2001      	movs	r0, #1
 80210b4:	f7f8 f9fc 	bl	80194b0 <lwip_htons>
 80210b8:	4603      	mov	r3, r0
 80210ba:	432b      	orrs	r3, r5
 80210bc:	b29b      	uxth	r3, r3
 80210be:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	7e9b      	ldrb	r3, [r3, #26]
 80210c4:	f043 0320 	orr.w	r3, r3, #32
 80210c8:	b2da      	uxtb	r2, r3
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80210ce:	2300      	movs	r3, #0
 80210d0:	e004      	b.n	80210dc <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80210d2:	2101      	movs	r1, #1
 80210d4:	6878      	ldr	r0, [r7, #4]
 80210d6:	f000 fcc3 	bl	8021a60 <tcp_enqueue_flags>
 80210da:	4603      	mov	r3, r0
}
 80210dc:	4618      	mov	r0, r3
 80210de:	3710      	adds	r7, #16
 80210e0:	46bd      	mov	sp, r7
 80210e2:	bdb0      	pop	{r4, r5, r7, pc}

080210e4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80210e4:	b590      	push	{r4, r7, lr}
 80210e6:	b087      	sub	sp, #28
 80210e8:	af00      	add	r7, sp, #0
 80210ea:	60f8      	str	r0, [r7, #12]
 80210ec:	60b9      	str	r1, [r7, #8]
 80210ee:	603b      	str	r3, [r7, #0]
 80210f0:	4613      	mov	r3, r2
 80210f2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80210f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80210f8:	f003 0301 	and.w	r3, r3, #1
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	d001      	beq.n	8021104 <tcp_create_segment+0x20>
 8021100:	2304      	movs	r3, #4
 8021102:	e000      	b.n	8021106 <tcp_create_segment+0x22>
 8021104:	2300      	movs	r3, #0
 8021106:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8021108:	2002      	movs	r0, #2
 802110a:	f7fb f8ab 	bl	801c264 <memp_malloc>
 802110e:	6138      	str	r0, [r7, #16]
 8021110:	693b      	ldr	r3, [r7, #16]
 8021112:	2b00      	cmp	r3, #0
 8021114:	d104      	bne.n	8021120 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8021116:	68b8      	ldr	r0, [r7, #8]
 8021118:	f7fb fe48 	bl	801cdac <pbuf_free>
    return NULL;
 802111c:	2300      	movs	r3, #0
 802111e:	e061      	b.n	80211e4 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 8021120:	693b      	ldr	r3, [r7, #16]
 8021122:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8021126:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8021128:	693b      	ldr	r3, [r7, #16]
 802112a:	2200      	movs	r2, #0
 802112c:	601a      	str	r2, [r3, #0]
  seg->p = p;
 802112e:	693b      	ldr	r3, [r7, #16]
 8021130:	68ba      	ldr	r2, [r7, #8]
 8021132:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8021134:	68bb      	ldr	r3, [r7, #8]
 8021136:	891a      	ldrh	r2, [r3, #8]
 8021138:	7dfb      	ldrb	r3, [r7, #23]
 802113a:	b29b      	uxth	r3, r3
 802113c:	429a      	cmp	r2, r3
 802113e:	d205      	bcs.n	802114c <tcp_create_segment+0x68>
 8021140:	4b2a      	ldr	r3, [pc, #168]	; (80211ec <tcp_create_segment+0x108>)
 8021142:	22ba      	movs	r2, #186	; 0xba
 8021144:	492a      	ldr	r1, [pc, #168]	; (80211f0 <tcp_create_segment+0x10c>)
 8021146:	482b      	ldr	r0, [pc, #172]	; (80211f4 <tcp_create_segment+0x110>)
 8021148:	f004 fece 	bl	8025ee8 <iprintf>
  seg->len = p->tot_len - optlen;
 802114c:	68bb      	ldr	r3, [r7, #8]
 802114e:	891a      	ldrh	r2, [r3, #8]
 8021150:	7dfb      	ldrb	r3, [r7, #23]
 8021152:	b29b      	uxth	r3, r3
 8021154:	1ad3      	subs	r3, r2, r3
 8021156:	b29a      	uxth	r2, r3
 8021158:	693b      	ldr	r3, [r7, #16]
 802115a:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 802115c:	2114      	movs	r1, #20
 802115e:	68b8      	ldr	r0, [r7, #8]
 8021160:	f7fb fe00 	bl	801cd64 <pbuf_header>
 8021164:	4603      	mov	r3, r0
 8021166:	2b00      	cmp	r3, #0
 8021168:	d004      	beq.n	8021174 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 802116a:	6938      	ldr	r0, [r7, #16]
 802116c:	f7fd f939 	bl	801e3e2 <tcp_seg_free>
    return NULL;
 8021170:	2300      	movs	r3, #0
 8021172:	e037      	b.n	80211e4 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8021174:	693b      	ldr	r3, [r7, #16]
 8021176:	685b      	ldr	r3, [r3, #4]
 8021178:	685a      	ldr	r2, [r3, #4]
 802117a:	693b      	ldr	r3, [r7, #16]
 802117c:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 802117e:	693b      	ldr	r3, [r7, #16]
 8021180:	68dc      	ldr	r4, [r3, #12]
 8021182:	68fb      	ldr	r3, [r7, #12]
 8021184:	8adb      	ldrh	r3, [r3, #22]
 8021186:	4618      	mov	r0, r3
 8021188:	f7f8 f992 	bl	80194b0 <lwip_htons>
 802118c:	4603      	mov	r3, r0
 802118e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8021190:	693b      	ldr	r3, [r7, #16]
 8021192:	68dc      	ldr	r4, [r3, #12]
 8021194:	68fb      	ldr	r3, [r7, #12]
 8021196:	8b1b      	ldrh	r3, [r3, #24]
 8021198:	4618      	mov	r0, r3
 802119a:	f7f8 f989 	bl	80194b0 <lwip_htons>
 802119e:	4603      	mov	r3, r0
 80211a0:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80211a2:	693b      	ldr	r3, [r7, #16]
 80211a4:	68dc      	ldr	r4, [r3, #12]
 80211a6:	6838      	ldr	r0, [r7, #0]
 80211a8:	f7f8 f990 	bl	80194cc <lwip_htonl>
 80211ac:	4603      	mov	r3, r0
 80211ae:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80211b0:	693b      	ldr	r3, [r7, #16]
 80211b2:	68dc      	ldr	r4, [r3, #12]
 80211b4:	7dfb      	ldrb	r3, [r7, #23]
 80211b6:	089b      	lsrs	r3, r3, #2
 80211b8:	b2db      	uxtb	r3, r3
 80211ba:	b29b      	uxth	r3, r3
 80211bc:	3305      	adds	r3, #5
 80211be:	b29b      	uxth	r3, r3
 80211c0:	031b      	lsls	r3, r3, #12
 80211c2:	b29a      	uxth	r2, r3
 80211c4:	79fb      	ldrb	r3, [r7, #7]
 80211c6:	b29b      	uxth	r3, r3
 80211c8:	4313      	orrs	r3, r2
 80211ca:	b29b      	uxth	r3, r3
 80211cc:	4618      	mov	r0, r3
 80211ce:	f7f8 f96f 	bl	80194b0 <lwip_htons>
 80211d2:	4603      	mov	r3, r0
 80211d4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80211d6:	693b      	ldr	r3, [r7, #16]
 80211d8:	68db      	ldr	r3, [r3, #12]
 80211da:	2200      	movs	r2, #0
 80211dc:	749a      	strb	r2, [r3, #18]
 80211de:	2200      	movs	r2, #0
 80211e0:	74da      	strb	r2, [r3, #19]
  return seg;
 80211e2:	693b      	ldr	r3, [r7, #16]
}
 80211e4:	4618      	mov	r0, r3
 80211e6:	371c      	adds	r7, #28
 80211e8:	46bd      	mov	sp, r7
 80211ea:	bd90      	pop	{r4, r7, pc}
 80211ec:	08028b04 	.word	0x08028b04
 80211f0:	08028b90 	.word	0x08028b90
 80211f4:	08028b68 	.word	0x08028b68

080211f8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80211f8:	b580      	push	{r7, lr}
 80211fa:	b086      	sub	sp, #24
 80211fc:	af00      	add	r7, sp, #0
 80211fe:	607b      	str	r3, [r7, #4]
 8021200:	4603      	mov	r3, r0
 8021202:	73fb      	strb	r3, [r7, #15]
 8021204:	460b      	mov	r3, r1
 8021206:	81bb      	strh	r3, [r7, #12]
 8021208:	4613      	mov	r3, r2
 802120a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 802120c:	89bb      	ldrh	r3, [r7, #12]
 802120e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8021210:	89ba      	ldrh	r2, [r7, #12]
 8021212:	897b      	ldrh	r3, [r7, #10]
 8021214:	429a      	cmp	r2, r3
 8021216:	d221      	bcs.n	802125c <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8021218:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802121c:	f003 0302 	and.w	r3, r3, #2
 8021220:	2b00      	cmp	r3, #0
 8021222:	d111      	bne.n	8021248 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8021224:	6a3b      	ldr	r3, [r7, #32]
 8021226:	7e9b      	ldrb	r3, [r3, #26]
 8021228:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 802122c:	2b00      	cmp	r3, #0
 802122e:	d115      	bne.n	802125c <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8021230:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8021234:	2b00      	cmp	r3, #0
 8021236:	d007      	beq.n	8021248 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8021238:	6a3b      	ldr	r3, [r7, #32]
 802123a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 802123c:	2b00      	cmp	r3, #0
 802123e:	d103      	bne.n	8021248 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8021240:	6a3b      	ldr	r3, [r7, #32]
 8021242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8021244:	2b00      	cmp	r3, #0
 8021246:	d009      	beq.n	802125c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8021248:	89bb      	ldrh	r3, [r7, #12]
 802124a:	f203 23d3 	addw	r3, r3, #723	; 0x2d3
 802124e:	f023 0203 	bic.w	r2, r3, #3
 8021252:	897b      	ldrh	r3, [r7, #10]
 8021254:	4293      	cmp	r3, r2
 8021256:	bf28      	it	cs
 8021258:	4613      	movcs	r3, r2
 802125a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 802125c:	8af9      	ldrh	r1, [r7, #22]
 802125e:	7bfb      	ldrb	r3, [r7, #15]
 8021260:	2200      	movs	r2, #0
 8021262:	4618      	mov	r0, r3
 8021264:	f7fb fa30 	bl	801c6c8 <pbuf_alloc>
 8021268:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 802126a:	693b      	ldr	r3, [r7, #16]
 802126c:	2b00      	cmp	r3, #0
 802126e:	d101      	bne.n	8021274 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8021270:	2300      	movs	r3, #0
 8021272:	e019      	b.n	80212a8 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8021274:	693b      	ldr	r3, [r7, #16]
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	2b00      	cmp	r3, #0
 802127a:	d006      	beq.n	802128a <tcp_pbuf_prealloc+0x92>
 802127c:	4b0c      	ldr	r3, [pc, #48]	; (80212b0 <tcp_pbuf_prealloc+0xb8>)
 802127e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8021282:	490c      	ldr	r1, [pc, #48]	; (80212b4 <tcp_pbuf_prealloc+0xbc>)
 8021284:	480c      	ldr	r0, [pc, #48]	; (80212b8 <tcp_pbuf_prealloc+0xc0>)
 8021286:	f004 fe2f 	bl	8025ee8 <iprintf>
  *oversize = p->len - length;
 802128a:	693b      	ldr	r3, [r7, #16]
 802128c:	895a      	ldrh	r2, [r3, #10]
 802128e:	89bb      	ldrh	r3, [r7, #12]
 8021290:	1ad3      	subs	r3, r2, r3
 8021292:	b29a      	uxth	r2, r3
 8021294:	687b      	ldr	r3, [r7, #4]
 8021296:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8021298:	693b      	ldr	r3, [r7, #16]
 802129a:	89ba      	ldrh	r2, [r7, #12]
 802129c:	811a      	strh	r2, [r3, #8]
 802129e:	693b      	ldr	r3, [r7, #16]
 80212a0:	891a      	ldrh	r2, [r3, #8]
 80212a2:	693b      	ldr	r3, [r7, #16]
 80212a4:	815a      	strh	r2, [r3, #10]
  return p;
 80212a6:	693b      	ldr	r3, [r7, #16]
}
 80212a8:	4618      	mov	r0, r3
 80212aa:	3718      	adds	r7, #24
 80212ac:	46bd      	mov	sp, r7
 80212ae:	bd80      	pop	{r7, pc}
 80212b0:	08028b04 	.word	0x08028b04
 80212b4:	08028ba8 	.word	0x08028ba8
 80212b8:	08028b68 	.word	0x08028b68

080212bc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80212bc:	b580      	push	{r7, lr}
 80212be:	b082      	sub	sp, #8
 80212c0:	af00      	add	r7, sp, #0
 80212c2:	6078      	str	r0, [r7, #4]
 80212c4:	460b      	mov	r3, r1
 80212c6:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	7d1b      	ldrb	r3, [r3, #20]
 80212cc:	2b04      	cmp	r3, #4
 80212ce:	d00e      	beq.n	80212ee <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80212d4:	2b07      	cmp	r3, #7
 80212d6:	d00a      	beq.n	80212ee <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 80212d8:	687b      	ldr	r3, [r7, #4]
 80212da:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80212dc:	2b02      	cmp	r3, #2
 80212de:	d006      	beq.n	80212ee <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80212e4:	2b03      	cmp	r3, #3
 80212e6:	d002      	beq.n	80212ee <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80212e8:	f06f 030a 	mvn.w	r3, #10
 80212ec:	e04f      	b.n	802138e <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80212ee:	887b      	ldrh	r3, [r7, #2]
 80212f0:	2b00      	cmp	r3, #0
 80212f2:	d101      	bne.n	80212f8 <tcp_write_checks+0x3c>
    return ERR_OK;
 80212f4:	2300      	movs	r3, #0
 80212f6:	e04a      	b.n	802138e <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80212f8:	687b      	ldr	r3, [r7, #4]
 80212fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80212fe:	887a      	ldrh	r2, [r7, #2]
 8021300:	429a      	cmp	r2, r3
 8021302:	d909      	bls.n	8021318 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	7e9b      	ldrb	r3, [r3, #26]
 8021308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802130c:	b2da      	uxtb	r2, r3
 802130e:	687b      	ldr	r3, [r7, #4]
 8021310:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8021312:	f04f 33ff 	mov.w	r3, #4294967295
 8021316:	e03a      	b.n	802138e <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802131e:	2b0a      	cmp	r3, #10
 8021320:	d806      	bhi.n	8021330 <tcp_write_checks+0x74>
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021328:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 802132c:	4293      	cmp	r3, r2
 802132e:	d909      	bls.n	8021344 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8021330:	687b      	ldr	r3, [r7, #4]
 8021332:	7e9b      	ldrb	r3, [r3, #26]
 8021334:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021338:	b2da      	uxtb	r2, r3
 802133a:	687b      	ldr	r3, [r7, #4]
 802133c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 802133e:	f04f 33ff 	mov.w	r3, #4294967295
 8021342:	e024      	b.n	802138e <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 802134a:	2b00      	cmp	r3, #0
 802134c:	d00f      	beq.n	802136e <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 802134e:	687b      	ldr	r3, [r7, #4]
 8021350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021352:	2b00      	cmp	r3, #0
 8021354:	d11a      	bne.n	802138c <tcp_write_checks+0xd0>
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802135a:	2b00      	cmp	r3, #0
 802135c:	d116      	bne.n	802138c <tcp_write_checks+0xd0>
 802135e:	4b0e      	ldr	r3, [pc, #56]	; (8021398 <tcp_write_checks+0xdc>)
 8021360:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8021364:	490d      	ldr	r1, [pc, #52]	; (802139c <tcp_write_checks+0xe0>)
 8021366:	480e      	ldr	r0, [pc, #56]	; (80213a0 <tcp_write_checks+0xe4>)
 8021368:	f004 fdbe 	bl	8025ee8 <iprintf>
 802136c:	e00e      	b.n	802138c <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 802136e:	687b      	ldr	r3, [r7, #4]
 8021370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021372:	2b00      	cmp	r3, #0
 8021374:	d103      	bne.n	802137e <tcp_write_checks+0xc2>
 8021376:	687b      	ldr	r3, [r7, #4]
 8021378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802137a:	2b00      	cmp	r3, #0
 802137c:	d006      	beq.n	802138c <tcp_write_checks+0xd0>
 802137e:	4b06      	ldr	r3, [pc, #24]	; (8021398 <tcp_write_checks+0xdc>)
 8021380:	f240 1259 	movw	r2, #345	; 0x159
 8021384:	4907      	ldr	r1, [pc, #28]	; (80213a4 <tcp_write_checks+0xe8>)
 8021386:	4806      	ldr	r0, [pc, #24]	; (80213a0 <tcp_write_checks+0xe4>)
 8021388:	f004 fdae 	bl	8025ee8 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 802138c:	2300      	movs	r3, #0
}
 802138e:	4618      	mov	r0, r3
 8021390:	3708      	adds	r7, #8
 8021392:	46bd      	mov	sp, r7
 8021394:	bd80      	pop	{r7, pc}
 8021396:	bf00      	nop
 8021398:	08028b04 	.word	0x08028b04
 802139c:	08028bbc 	.word	0x08028bbc
 80213a0:	08028b68 	.word	0x08028b68
 80213a4:	08028bf8 	.word	0x08028bf8

080213a8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80213a8:	b5b0      	push	{r4, r5, r7, lr}
 80213aa:	b09a      	sub	sp, #104	; 0x68
 80213ac:	af04      	add	r7, sp, #16
 80213ae:	60f8      	str	r0, [r7, #12]
 80213b0:	60b9      	str	r1, [r7, #8]
 80213b2:	4611      	mov	r1, r2
 80213b4:	461a      	mov	r2, r3
 80213b6:	460b      	mov	r3, r1
 80213b8:	80fb      	strh	r3, [r7, #6]
 80213ba:	4613      	mov	r3, r2
 80213bc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80213be:	2300      	movs	r3, #0
 80213c0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80213c2:	2300      	movs	r3, #0
 80213c4:	653b      	str	r3, [r7, #80]	; 0x50
 80213c6:	2300      	movs	r3, #0
 80213c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80213ca:	2300      	movs	r3, #0
 80213cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80213ce:	2300      	movs	r3, #0
 80213d0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80213d2:	2300      	movs	r3, #0
 80213d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 80213d8:	2300      	movs	r3, #0
 80213da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 80213de:	2300      	movs	r3, #0
 80213e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80213e4:	2300      	movs	r3, #0
 80213e6:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80213e8:	2300      	movs	r3, #0
 80213ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80213ec:	2300      	movs	r3, #0
 80213ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80213f0:	68fb      	ldr	r3, [r7, #12]
 80213f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80213f6:	085b      	lsrs	r3, r3, #1
 80213f8:	b29a      	uxth	r2, r3
 80213fa:	68fb      	ldr	r3, [r7, #12]
 80213fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80213fe:	4293      	cmp	r3, r2
 8021400:	bf28      	it	cs
 8021402:	4613      	movcs	r3, r2
 8021404:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8021406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021408:	2b00      	cmp	r3, #0
 802140a:	d102      	bne.n	8021412 <tcp_write+0x6a>
 802140c:	68fb      	ldr	r3, [r7, #12]
 802140e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8021410:	e000      	b.n	8021414 <tcp_write+0x6c>
 8021412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021414:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8021416:	68bb      	ldr	r3, [r7, #8]
 8021418:	2b00      	cmp	r3, #0
 802141a:	d109      	bne.n	8021430 <tcp_write+0x88>
 802141c:	4b94      	ldr	r3, [pc, #592]	; (8021670 <tcp_write+0x2c8>)
 802141e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8021422:	4994      	ldr	r1, [pc, #592]	; (8021674 <tcp_write+0x2cc>)
 8021424:	4894      	ldr	r0, [pc, #592]	; (8021678 <tcp_write+0x2d0>)
 8021426:	f004 fd5f 	bl	8025ee8 <iprintf>
 802142a:	f06f 030f 	mvn.w	r3, #15
 802142e:	e30d      	b.n	8021a4c <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8021430:	88fb      	ldrh	r3, [r7, #6]
 8021432:	4619      	mov	r1, r3
 8021434:	68f8      	ldr	r0, [r7, #12]
 8021436:	f7ff ff41 	bl	80212bc <tcp_write_checks>
 802143a:	4603      	mov	r3, r0
 802143c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8021440:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8021444:	2b00      	cmp	r3, #0
 8021446:	d002      	beq.n	802144e <tcp_write+0xa6>
    return err;
 8021448:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 802144c:	e2fe      	b.n	8021a4c <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 802144e:	68fb      	ldr	r3, [r7, #12]
 8021450:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021454:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8021458:	68fb      	ldr	r3, [r7, #12]
 802145a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802145c:	2b00      	cmp	r3, #0
 802145e:	f000 80f8 	beq.w	8021652 <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8021462:	68fb      	ldr	r3, [r7, #12]
 8021464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021466:	653b      	str	r3, [r7, #80]	; 0x50
 8021468:	e002      	b.n	8021470 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 802146a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8021470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021472:	681b      	ldr	r3, [r3, #0]
 8021474:	2b00      	cmp	r3, #0
 8021476:	d1f8      	bne.n	802146a <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8021478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802147a:	7a9b      	ldrb	r3, [r3, #10]
 802147c:	f003 0301 	and.w	r3, r3, #1
 8021480:	2b00      	cmp	r3, #0
 8021482:	d001      	beq.n	8021488 <tcp_write+0xe0>
 8021484:	2304      	movs	r3, #4
 8021486:	e000      	b.n	802148a <tcp_write+0xe2>
 8021488:	2300      	movs	r3, #0
 802148a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 802148c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802148e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021490:	891b      	ldrh	r3, [r3, #8]
 8021492:	4619      	mov	r1, r3
 8021494:	8c3b      	ldrh	r3, [r7, #32]
 8021496:	440b      	add	r3, r1
 8021498:	429a      	cmp	r2, r3
 802149a:	da06      	bge.n	80214aa <tcp_write+0x102>
 802149c:	4b74      	ldr	r3, [pc, #464]	; (8021670 <tcp_write+0x2c8>)
 802149e:	f240 12c7 	movw	r2, #455	; 0x1c7
 80214a2:	4976      	ldr	r1, [pc, #472]	; (802167c <tcp_write+0x2d4>)
 80214a4:	4874      	ldr	r0, [pc, #464]	; (8021678 <tcp_write+0x2d0>)
 80214a6:	f004 fd1f 	bl	8025ee8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80214aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80214ac:	891a      	ldrh	r2, [r3, #8]
 80214ae:	8c3b      	ldrh	r3, [r7, #32]
 80214b0:	4413      	add	r3, r2
 80214b2:	b29b      	uxth	r3, r3
 80214b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80214b6:	1ad3      	subs	r3, r2, r3
 80214b8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80214ba:	68fb      	ldr	r3, [r7, #12]
 80214bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80214c0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80214c2:	8a7b      	ldrh	r3, [r7, #18]
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	d027      	beq.n	8021518 <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80214c8:	8a7b      	ldrh	r3, [r7, #18]
 80214ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80214cc:	429a      	cmp	r2, r3
 80214ce:	d206      	bcs.n	80214de <tcp_write+0x136>
 80214d0:	4b67      	ldr	r3, [pc, #412]	; (8021670 <tcp_write+0x2c8>)
 80214d2:	f240 12d9 	movw	r2, #473	; 0x1d9
 80214d6:	496a      	ldr	r1, [pc, #424]	; (8021680 <tcp_write+0x2d8>)
 80214d8:	4867      	ldr	r0, [pc, #412]	; (8021678 <tcp_write+0x2d0>)
 80214da:	f004 fd05 	bl	8025ee8 <iprintf>
      seg = last_unsent;
 80214de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80214e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80214e2:	8a7b      	ldrh	r3, [r7, #18]
 80214e4:	88fa      	ldrh	r2, [r7, #6]
 80214e6:	429a      	cmp	r2, r3
 80214e8:	d901      	bls.n	80214ee <tcp_write+0x146>
 80214ea:	8a7b      	ldrh	r3, [r7, #18]
 80214ec:	e000      	b.n	80214f0 <tcp_write+0x148>
 80214ee:	88fb      	ldrh	r3, [r7, #6]
 80214f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80214f2:	4293      	cmp	r3, r2
 80214f4:	bfa8      	it	ge
 80214f6:	4613      	movge	r3, r2
 80214f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80214fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80214fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021500:	4413      	add	r3, r2
 8021502:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8021506:	8a7a      	ldrh	r2, [r7, #18]
 8021508:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802150a:	1ad3      	subs	r3, r2, r3
 802150c:	b29b      	uxth	r3, r3
 802150e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8021510:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021512:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021514:	1ad3      	subs	r3, r2, r3
 8021516:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8021518:	8a7b      	ldrh	r3, [r7, #18]
 802151a:	2b00      	cmp	r3, #0
 802151c:	d00b      	beq.n	8021536 <tcp_write+0x18e>
 802151e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021522:	88fb      	ldrh	r3, [r7, #6]
 8021524:	429a      	cmp	r2, r3
 8021526:	d006      	beq.n	8021536 <tcp_write+0x18e>
 8021528:	4b51      	ldr	r3, [pc, #324]	; (8021670 <tcp_write+0x2c8>)
 802152a:	f240 12e1 	movw	r2, #481	; 0x1e1
 802152e:	4955      	ldr	r1, [pc, #340]	; (8021684 <tcp_write+0x2dc>)
 8021530:	4851      	ldr	r0, [pc, #324]	; (8021678 <tcp_write+0x2d0>)
 8021532:	f004 fcd9 	bl	8025ee8 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8021536:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802153a:	88fb      	ldrh	r3, [r7, #6]
 802153c:	429a      	cmp	r2, r3
 802153e:	f080 8169 	bcs.w	8021814 <tcp_write+0x46c>
 8021542:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021544:	2b00      	cmp	r3, #0
 8021546:	f000 8165 	beq.w	8021814 <tcp_write+0x46c>
 802154a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802154c:	891b      	ldrh	r3, [r3, #8]
 802154e:	2b00      	cmp	r3, #0
 8021550:	f000 8160 	beq.w	8021814 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8021554:	88fa      	ldrh	r2, [r7, #6]
 8021556:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802155a:	1ad2      	subs	r2, r2, r3
 802155c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802155e:	4293      	cmp	r3, r2
 8021560:	bfa8      	it	ge
 8021562:	4613      	movge	r3, r2
 8021564:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8021566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021568:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 802156a:	797b      	ldrb	r3, [r7, #5]
 802156c:	f003 0301 	and.w	r3, r3, #1
 8021570:	2b00      	cmp	r3, #0
 8021572:	d027      	beq.n	80215c4 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8021574:	f107 0012 	add.w	r0, r7, #18
 8021578:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802157a:	8bf9      	ldrh	r1, [r7, #30]
 802157c:	2301      	movs	r3, #1
 802157e:	9302      	str	r3, [sp, #8]
 8021580:	797b      	ldrb	r3, [r7, #5]
 8021582:	9301      	str	r3, [sp, #4]
 8021584:	68fb      	ldr	r3, [r7, #12]
 8021586:	9300      	str	r3, [sp, #0]
 8021588:	4603      	mov	r3, r0
 802158a:	2004      	movs	r0, #4
 802158c:	f7ff fe34 	bl	80211f8 <tcp_pbuf_prealloc>
 8021590:	6578      	str	r0, [r7, #84]	; 0x54
 8021592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021594:	2b00      	cmp	r3, #0
 8021596:	f000 8227 	beq.w	80219e8 <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 802159a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802159c:	6858      	ldr	r0, [r3, #4]
 802159e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80215a2:	68ba      	ldr	r2, [r7, #8]
 80215a4:	4413      	add	r3, r2
 80215a6:	8bfa      	ldrh	r2, [r7, #30]
 80215a8:	4619      	mov	r1, r3
 80215aa:	f005 f96c 	bl	8026886 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80215ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80215b0:	f7fb fc96 	bl	801cee0 <pbuf_clen>
 80215b4:	4603      	mov	r3, r0
 80215b6:	461a      	mov	r2, r3
 80215b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80215bc:	4413      	add	r3, r2
 80215be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80215c2:	e03f      	b.n	8021644 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80215c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80215c6:	685b      	ldr	r3, [r3, #4]
 80215c8:	637b      	str	r3, [r7, #52]	; 0x34
 80215ca:	e002      	b.n	80215d2 <tcp_write+0x22a>
 80215cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80215ce:	681b      	ldr	r3, [r3, #0]
 80215d0:	637b      	str	r3, [r7, #52]	; 0x34
 80215d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80215d4:	681b      	ldr	r3, [r3, #0]
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d1f8      	bne.n	80215cc <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80215da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80215dc:	7b1b      	ldrb	r3, [r3, #12]
 80215de:	2b01      	cmp	r3, #1
 80215e0:	d115      	bne.n	802160e <tcp_write+0x266>
 80215e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80215e4:	685b      	ldr	r3, [r3, #4]
 80215e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80215e8:	8952      	ldrh	r2, [r2, #10]
 80215ea:	441a      	add	r2, r3
 80215ec:	68bb      	ldr	r3, [r7, #8]
 80215ee:	429a      	cmp	r2, r3
 80215f0:	d10d      	bne.n	802160e <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80215f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d006      	beq.n	8021608 <tcp_write+0x260>
 80215fa:	4b1d      	ldr	r3, [pc, #116]	; (8021670 <tcp_write+0x2c8>)
 80215fc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8021600:	4921      	ldr	r1, [pc, #132]	; (8021688 <tcp_write+0x2e0>)
 8021602:	481d      	ldr	r0, [pc, #116]	; (8021678 <tcp_write+0x2d0>)
 8021604:	f004 fc70 	bl	8025ee8 <iprintf>
          extendlen = seglen;
 8021608:	8bfb      	ldrh	r3, [r7, #30]
 802160a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 802160c:	e01a      	b.n	8021644 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 802160e:	8bfb      	ldrh	r3, [r7, #30]
 8021610:	2201      	movs	r2, #1
 8021612:	4619      	mov	r1, r3
 8021614:	2004      	movs	r0, #4
 8021616:	f7fb f857 	bl	801c6c8 <pbuf_alloc>
 802161a:	6578      	str	r0, [r7, #84]	; 0x54
 802161c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802161e:	2b00      	cmp	r3, #0
 8021620:	f000 81e4 	beq.w	80219ec <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8021624:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021628:	68ba      	ldr	r2, [r7, #8]
 802162a:	441a      	add	r2, r3
 802162c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802162e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8021630:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8021632:	f7fb fc55 	bl	801cee0 <pbuf_clen>
 8021636:	4603      	mov	r3, r0
 8021638:	461a      	mov	r2, r3
 802163a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802163e:	4413      	add	r3, r2
 8021640:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8021644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021648:	8bfb      	ldrh	r3, [r7, #30]
 802164a:	4413      	add	r3, r2
 802164c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8021650:	e0e0      	b.n	8021814 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8021652:	68fb      	ldr	r3, [r7, #12]
 8021654:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8021658:	2b00      	cmp	r3, #0
 802165a:	f000 80db 	beq.w	8021814 <tcp_write+0x46c>
 802165e:	4b04      	ldr	r3, [pc, #16]	; (8021670 <tcp_write+0x2c8>)
 8021660:	f240 2225 	movw	r2, #549	; 0x225
 8021664:	4909      	ldr	r1, [pc, #36]	; (802168c <tcp_write+0x2e4>)
 8021666:	4804      	ldr	r0, [pc, #16]	; (8021678 <tcp_write+0x2d0>)
 8021668:	f004 fc3e 	bl	8025ee8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 802166c:	e0d2      	b.n	8021814 <tcp_write+0x46c>
 802166e:	bf00      	nop
 8021670:	08028b04 	.word	0x08028b04
 8021674:	08028c2c 	.word	0x08028c2c
 8021678:	08028b68 	.word	0x08028b68
 802167c:	08028c60 	.word	0x08028c60
 8021680:	08028c78 	.word	0x08028c78
 8021684:	08028c98 	.word	0x08028c98
 8021688:	08028cb8 	.word	0x08028cb8
 802168c:	08028ce4 	.word	0x08028ce4
    struct pbuf *p;
    u16_t left = len - pos;
 8021690:	88fa      	ldrh	r2, [r7, #6]
 8021692:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021696:	1ad3      	subs	r3, r2, r3
 8021698:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 802169a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802169e:	b29b      	uxth	r3, r3
 80216a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80216a2:	1ad3      	subs	r3, r2, r3
 80216a4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80216a6:	8b7a      	ldrh	r2, [r7, #26]
 80216a8:	8bbb      	ldrh	r3, [r7, #28]
 80216aa:	4293      	cmp	r3, r2
 80216ac:	bf28      	it	cs
 80216ae:	4613      	movcs	r3, r2
 80216b0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80216b2:	797b      	ldrb	r3, [r7, #5]
 80216b4:	f003 0301 	and.w	r3, r3, #1
 80216b8:	2b00      	cmp	r3, #0
 80216ba:	d036      	beq.n	802172a <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80216bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80216c0:	b29a      	uxth	r2, r3
 80216c2:	8b3b      	ldrh	r3, [r7, #24]
 80216c4:	4413      	add	r3, r2
 80216c6:	b299      	uxth	r1, r3
 80216c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	bf0c      	ite	eq
 80216ce:	2301      	moveq	r3, #1
 80216d0:	2300      	movne	r3, #0
 80216d2:	b2db      	uxtb	r3, r3
 80216d4:	f107 0012 	add.w	r0, r7, #18
 80216d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80216da:	9302      	str	r3, [sp, #8]
 80216dc:	797b      	ldrb	r3, [r7, #5]
 80216de:	9301      	str	r3, [sp, #4]
 80216e0:	68fb      	ldr	r3, [r7, #12]
 80216e2:	9300      	str	r3, [sp, #0]
 80216e4:	4603      	mov	r3, r0
 80216e6:	2000      	movs	r0, #0
 80216e8:	f7ff fd86 	bl	80211f8 <tcp_pbuf_prealloc>
 80216ec:	6338      	str	r0, [r7, #48]	; 0x30
 80216ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	f000 817d 	beq.w	80219f0 <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80216f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216f8:	895b      	ldrh	r3, [r3, #10]
 80216fa:	8b3a      	ldrh	r2, [r7, #24]
 80216fc:	429a      	cmp	r2, r3
 80216fe:	d906      	bls.n	802170e <tcp_write+0x366>
 8021700:	4b8f      	ldr	r3, [pc, #572]	; (8021940 <tcp_write+0x598>)
 8021702:	f240 2241 	movw	r2, #577	; 0x241
 8021706:	498f      	ldr	r1, [pc, #572]	; (8021944 <tcp_write+0x59c>)
 8021708:	488f      	ldr	r0, [pc, #572]	; (8021948 <tcp_write+0x5a0>)
 802170a:	f004 fbed 	bl	8025ee8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 802170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021710:	685a      	ldr	r2, [r3, #4]
 8021712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021716:	18d0      	adds	r0, r2, r3
 8021718:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802171c:	68ba      	ldr	r2, [r7, #8]
 802171e:	4413      	add	r3, r2
 8021720:	8b3a      	ldrh	r2, [r7, #24]
 8021722:	4619      	mov	r1, r3
 8021724:	f005 f8af 	bl	8026886 <memcpy>
 8021728:	e02e      	b.n	8021788 <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 802172a:	8a7b      	ldrh	r3, [r7, #18]
 802172c:	2b00      	cmp	r3, #0
 802172e:	d006      	beq.n	802173e <tcp_write+0x396>
 8021730:	4b83      	ldr	r3, [pc, #524]	; (8021940 <tcp_write+0x598>)
 8021732:	f240 224b 	movw	r2, #587	; 0x24b
 8021736:	4985      	ldr	r1, [pc, #532]	; (802194c <tcp_write+0x5a4>)
 8021738:	4883      	ldr	r0, [pc, #524]	; (8021948 <tcp_write+0x5a0>)
 802173a:	f004 fbd5 	bl	8025ee8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 802173e:	8b3b      	ldrh	r3, [r7, #24]
 8021740:	2201      	movs	r2, #1
 8021742:	4619      	mov	r1, r3
 8021744:	2000      	movs	r0, #0
 8021746:	f7fa ffbf 	bl	801c6c8 <pbuf_alloc>
 802174a:	6178      	str	r0, [r7, #20]
 802174c:	697b      	ldr	r3, [r7, #20]
 802174e:	2b00      	cmp	r3, #0
 8021750:	f000 8150 	beq.w	80219f4 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8021754:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021758:	68ba      	ldr	r2, [r7, #8]
 802175a:	441a      	add	r2, r3
 802175c:	697b      	ldr	r3, [r7, #20]
 802175e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8021760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021764:	b29b      	uxth	r3, r3
 8021766:	2200      	movs	r2, #0
 8021768:	4619      	mov	r1, r3
 802176a:	2000      	movs	r0, #0
 802176c:	f7fa ffac 	bl	801c6c8 <pbuf_alloc>
 8021770:	6338      	str	r0, [r7, #48]	; 0x30
 8021772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021774:	2b00      	cmp	r3, #0
 8021776:	d103      	bne.n	8021780 <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8021778:	6978      	ldr	r0, [r7, #20]
 802177a:	f7fb fb17 	bl	801cdac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 802177e:	e13c      	b.n	80219fa <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8021780:	6979      	ldr	r1, [r7, #20]
 8021782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021784:	f7fb fbec 	bl	801cf60 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8021788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802178a:	f7fb fba9 	bl	801cee0 <pbuf_clen>
 802178e:	4603      	mov	r3, r0
 8021790:	461a      	mov	r2, r3
 8021792:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021796:	4413      	add	r3, r2
 8021798:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 802179c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80217a0:	2b0b      	cmp	r3, #11
 80217a2:	d805      	bhi.n	80217b0 <tcp_write+0x408>
 80217a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80217a8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80217ac:	4293      	cmp	r3, r2
 80217ae:	d903      	bls.n	80217b8 <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80217b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80217b2:	f7fb fafb 	bl	801cdac <pbuf_free>
      goto memerr;
 80217b6:	e120      	b.n	80219fa <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80217b8:	68fb      	ldr	r3, [r7, #12]
 80217ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80217bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80217c0:	441a      	add	r2, r3
 80217c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80217c6:	9300      	str	r3, [sp, #0]
 80217c8:	4613      	mov	r3, r2
 80217ca:	2200      	movs	r2, #0
 80217cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80217ce:	68f8      	ldr	r0, [r7, #12]
 80217d0:	f7ff fc88 	bl	80210e4 <tcp_create_segment>
 80217d4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80217d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80217d8:	2b00      	cmp	r3, #0
 80217da:	f000 810d 	beq.w	80219f8 <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80217de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80217e0:	2b00      	cmp	r3, #0
 80217e2:	d102      	bne.n	80217ea <tcp_write+0x442>
      queue = seg;
 80217e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80217e6:	647b      	str	r3, [r7, #68]	; 0x44
 80217e8:	e00c      	b.n	8021804 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80217ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d106      	bne.n	80217fe <tcp_write+0x456>
 80217f0:	4b53      	ldr	r3, [pc, #332]	; (8021940 <tcp_write+0x598>)
 80217f2:	f240 2285 	movw	r2, #645	; 0x285
 80217f6:	4956      	ldr	r1, [pc, #344]	; (8021950 <tcp_write+0x5a8>)
 80217f8:	4853      	ldr	r0, [pc, #332]	; (8021948 <tcp_write+0x5a0>)
 80217fa:	f004 fb75 	bl	8025ee8 <iprintf>
      prev_seg->next = seg;
 80217fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021802:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8021804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021806:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8021808:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802180c:	8b3b      	ldrh	r3, [r7, #24]
 802180e:	4413      	add	r3, r2
 8021810:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8021814:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021818:	88fb      	ldrh	r3, [r7, #6]
 802181a:	429a      	cmp	r2, r3
 802181c:	f4ff af38 	bcc.w	8021690 <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8021820:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021822:	2b00      	cmp	r3, #0
 8021824:	d02c      	beq.n	8021880 <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8021826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021828:	685b      	ldr	r3, [r3, #4]
 802182a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802182c:	e01e      	b.n	802186c <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 802182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021830:	891a      	ldrh	r2, [r3, #8]
 8021832:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021834:	4413      	add	r3, r2
 8021836:	b29a      	uxth	r2, r3
 8021838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802183a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 802183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802183e:	681b      	ldr	r3, [r3, #0]
 8021840:	2b00      	cmp	r3, #0
 8021842:	d110      	bne.n	8021866 <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8021844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021846:	685b      	ldr	r3, [r3, #4]
 8021848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802184a:	8952      	ldrh	r2, [r2, #10]
 802184c:	4413      	add	r3, r2
 802184e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021850:	68b9      	ldr	r1, [r7, #8]
 8021852:	4618      	mov	r0, r3
 8021854:	f005 f817 	bl	8026886 <memcpy>
        p->len += oversize_used;
 8021858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802185a:	895a      	ldrh	r2, [r3, #10]
 802185c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802185e:	4413      	add	r3, r2
 8021860:	b29a      	uxth	r2, r3
 8021862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021864:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8021866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021868:	681b      	ldr	r3, [r3, #0]
 802186a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802186e:	2b00      	cmp	r3, #0
 8021870:	d1dd      	bne.n	802182e <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 8021872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021874:	891a      	ldrh	r2, [r3, #8]
 8021876:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021878:	4413      	add	r3, r2
 802187a:	b29a      	uxth	r2, r3
 802187c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802187e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8021880:	8a7a      	ldrh	r2, [r7, #18]
 8021882:	68fb      	ldr	r3, [r7, #12]
 8021884:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8021888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802188a:	2b00      	cmp	r3, #0
 802188c:	d018      	beq.n	80218c0 <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 802188e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021890:	2b00      	cmp	r3, #0
 8021892:	d106      	bne.n	80218a2 <tcp_write+0x4fa>
 8021894:	4b2a      	ldr	r3, [pc, #168]	; (8021940 <tcp_write+0x598>)
 8021896:	f240 22bb 	movw	r2, #699	; 0x2bb
 802189a:	492e      	ldr	r1, [pc, #184]	; (8021954 <tcp_write+0x5ac>)
 802189c:	482a      	ldr	r0, [pc, #168]	; (8021948 <tcp_write+0x5a0>)
 802189e:	f004 fb23 	bl	8025ee8 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80218a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80218a4:	685b      	ldr	r3, [r3, #4]
 80218a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80218a8:	4618      	mov	r0, r3
 80218aa:	f7fb fb59 	bl	801cf60 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80218ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80218b0:	891a      	ldrh	r2, [r3, #8]
 80218b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80218b4:	891b      	ldrh	r3, [r3, #8]
 80218b6:	4413      	add	r3, r2
 80218b8:	b29a      	uxth	r2, r3
 80218ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80218bc:	811a      	strh	r2, [r3, #8]
 80218be:	e037      	b.n	8021930 <tcp_write+0x588>
  } else if (extendlen > 0) {
 80218c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80218c2:	2b00      	cmp	r3, #0
 80218c4:	d034      	beq.n	8021930 <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80218c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	d003      	beq.n	80218d4 <tcp_write+0x52c>
 80218cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80218ce:	685b      	ldr	r3, [r3, #4]
 80218d0:	2b00      	cmp	r3, #0
 80218d2:	d106      	bne.n	80218e2 <tcp_write+0x53a>
 80218d4:	4b1a      	ldr	r3, [pc, #104]	; (8021940 <tcp_write+0x598>)
 80218d6:	f240 22c1 	movw	r2, #705	; 0x2c1
 80218da:	491f      	ldr	r1, [pc, #124]	; (8021958 <tcp_write+0x5b0>)
 80218dc:	481a      	ldr	r0, [pc, #104]	; (8021948 <tcp_write+0x5a0>)
 80218de:	f004 fb03 	bl	8025ee8 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80218e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80218e4:	685b      	ldr	r3, [r3, #4]
 80218e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80218e8:	e009      	b.n	80218fe <tcp_write+0x556>
      p->tot_len += extendlen;
 80218ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218ec:	891a      	ldrh	r2, [r3, #8]
 80218ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80218f0:	4413      	add	r3, r2
 80218f2:	b29a      	uxth	r2, r3
 80218f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218f6:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80218f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218fa:	681b      	ldr	r3, [r3, #0]
 80218fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80218fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021900:	681b      	ldr	r3, [r3, #0]
 8021902:	2b00      	cmp	r3, #0
 8021904:	d1f1      	bne.n	80218ea <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 8021906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021908:	891a      	ldrh	r2, [r3, #8]
 802190a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802190c:	4413      	add	r3, r2
 802190e:	b29a      	uxth	r2, r3
 8021910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021912:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8021914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021916:	895a      	ldrh	r2, [r3, #10]
 8021918:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802191a:	4413      	add	r3, r2
 802191c:	b29a      	uxth	r2, r3
 802191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021920:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8021922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021924:	891a      	ldrh	r2, [r3, #8]
 8021926:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021928:	4413      	add	r3, r2
 802192a:	b29a      	uxth	r2, r3
 802192c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802192e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8021930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021932:	2b00      	cmp	r3, #0
 8021934:	d112      	bne.n	802195c <tcp_write+0x5b4>
    pcb->unsent = queue;
 8021936:	68fb      	ldr	r3, [r7, #12]
 8021938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802193a:	669a      	str	r2, [r3, #104]	; 0x68
 802193c:	e011      	b.n	8021962 <tcp_write+0x5ba>
 802193e:	bf00      	nop
 8021940:	08028b04 	.word	0x08028b04
 8021944:	08028d14 	.word	0x08028d14
 8021948:	08028b68 	.word	0x08028b68
 802194c:	08028d54 	.word	0x08028d54
 8021950:	08028d64 	.word	0x08028d64
 8021954:	08028d78 	.word	0x08028d78
 8021958:	08028db0 	.word	0x08028db0
  } else {
    last_unsent->next = queue;
 802195c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802195e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021960:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8021962:	68fb      	ldr	r3, [r7, #12]
 8021964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021966:	88fb      	ldrh	r3, [r7, #6]
 8021968:	441a      	add	r2, r3
 802196a:	68fb      	ldr	r3, [r7, #12]
 802196c:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 802196e:	68fb      	ldr	r3, [r7, #12]
 8021970:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8021974:	88fb      	ldrh	r3, [r7, #6]
 8021976:	1ad3      	subs	r3, r2, r3
 8021978:	b29a      	uxth	r2, r3
 802197a:	68fb      	ldr	r3, [r7, #12]
 802197c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8021980:	68fb      	ldr	r3, [r7, #12]
 8021982:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8021986:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 802198a:	68fb      	ldr	r3, [r7, #12]
 802198c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021990:	2b00      	cmp	r3, #0
 8021992:	d00e      	beq.n	80219b2 <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8021994:	68fb      	ldr	r3, [r7, #12]
 8021996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021998:	2b00      	cmp	r3, #0
 802199a:	d10a      	bne.n	80219b2 <tcp_write+0x60a>
 802199c:	68fb      	ldr	r3, [r7, #12]
 802199e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80219a0:	2b00      	cmp	r3, #0
 80219a2:	d106      	bne.n	80219b2 <tcp_write+0x60a>
 80219a4:	4b2b      	ldr	r3, [pc, #172]	; (8021a54 <tcp_write+0x6ac>)
 80219a6:	f240 22ed 	movw	r2, #749	; 0x2ed
 80219aa:	492b      	ldr	r1, [pc, #172]	; (8021a58 <tcp_write+0x6b0>)
 80219ac:	482b      	ldr	r0, [pc, #172]	; (8021a5c <tcp_write+0x6b4>)
 80219ae:	f004 fa9b 	bl	8025ee8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80219b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	d015      	beq.n	80219e4 <tcp_write+0x63c>
 80219b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80219ba:	68db      	ldr	r3, [r3, #12]
 80219bc:	2b00      	cmp	r3, #0
 80219be:	d011      	beq.n	80219e4 <tcp_write+0x63c>
 80219c0:	797b      	ldrb	r3, [r7, #5]
 80219c2:	f003 0302 	and.w	r3, r3, #2
 80219c6:	2b00      	cmp	r3, #0
 80219c8:	d10c      	bne.n	80219e4 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80219ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80219cc:	68dc      	ldr	r4, [r3, #12]
 80219ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80219d0:	68db      	ldr	r3, [r3, #12]
 80219d2:	899b      	ldrh	r3, [r3, #12]
 80219d4:	b29d      	uxth	r5, r3
 80219d6:	2008      	movs	r0, #8
 80219d8:	f7f7 fd6a 	bl	80194b0 <lwip_htons>
 80219dc:	4603      	mov	r3, r0
 80219de:	432b      	orrs	r3, r5
 80219e0:	b29b      	uxth	r3, r3
 80219e2:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 80219e4:	2300      	movs	r3, #0
 80219e6:	e031      	b.n	8021a4c <tcp_write+0x6a4>
          goto memerr;
 80219e8:	bf00      	nop
 80219ea:	e006      	b.n	80219fa <tcp_write+0x652>
            goto memerr;
 80219ec:	bf00      	nop
 80219ee:	e004      	b.n	80219fa <tcp_write+0x652>
        goto memerr;
 80219f0:	bf00      	nop
 80219f2:	e002      	b.n	80219fa <tcp_write+0x652>
        goto memerr;
 80219f4:	bf00      	nop
 80219f6:	e000      	b.n	80219fa <tcp_write+0x652>
      goto memerr;
 80219f8:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80219fa:	68fb      	ldr	r3, [r7, #12]
 80219fc:	7e9b      	ldrb	r3, [r3, #26]
 80219fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021a02:	b2da      	uxtb	r2, r3
 8021a04:	68fb      	ldr	r3, [r7, #12]
 8021a06:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8021a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021a0a:	2b00      	cmp	r3, #0
 8021a0c:	d002      	beq.n	8021a14 <tcp_write+0x66c>
    pbuf_free(concat_p);
 8021a0e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8021a10:	f7fb f9cc 	bl	801cdac <pbuf_free>
  }
  if (queue != NULL) {
 8021a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d002      	beq.n	8021a20 <tcp_write+0x678>
    tcp_segs_free(queue);
 8021a1a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8021a1c:	f7fc fccd 	bl	801e3ba <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8021a20:	68fb      	ldr	r3, [r7, #12]
 8021a22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021a26:	2b00      	cmp	r3, #0
 8021a28:	d00e      	beq.n	8021a48 <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8021a2a:	68fb      	ldr	r3, [r7, #12]
 8021a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d10a      	bne.n	8021a48 <tcp_write+0x6a0>
 8021a32:	68fb      	ldr	r3, [r7, #12]
 8021a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d106      	bne.n	8021a48 <tcp_write+0x6a0>
 8021a3a:	4b06      	ldr	r3, [pc, #24]	; (8021a54 <tcp_write+0x6ac>)
 8021a3c:	f240 3202 	movw	r2, #770	; 0x302
 8021a40:	4905      	ldr	r1, [pc, #20]	; (8021a58 <tcp_write+0x6b0>)
 8021a42:	4806      	ldr	r0, [pc, #24]	; (8021a5c <tcp_write+0x6b4>)
 8021a44:	f004 fa50 	bl	8025ee8 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8021a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021a4c:	4618      	mov	r0, r3
 8021a4e:	3758      	adds	r7, #88	; 0x58
 8021a50:	46bd      	mov	sp, r7
 8021a52:	bdb0      	pop	{r4, r5, r7, pc}
 8021a54:	08028b04 	.word	0x08028b04
 8021a58:	08028de8 	.word	0x08028de8
 8021a5c:	08028b68 	.word	0x08028b68

08021a60 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8021a60:	b580      	push	{r7, lr}
 8021a62:	b08a      	sub	sp, #40	; 0x28
 8021a64:	af02      	add	r7, sp, #8
 8021a66:	6078      	str	r0, [r7, #4]
 8021a68:	460b      	mov	r3, r1
 8021a6a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8021a6c:	2300      	movs	r3, #0
 8021a6e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8021a70:	2300      	movs	r3, #0
 8021a72:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8021a74:	78fb      	ldrb	r3, [r7, #3]
 8021a76:	f003 0303 	and.w	r3, r3, #3
 8021a7a:	2b00      	cmp	r3, #0
 8021a7c:	d106      	bne.n	8021a8c <tcp_enqueue_flags+0x2c>
 8021a7e:	4b70      	ldr	r3, [pc, #448]	; (8021c40 <tcp_enqueue_flags+0x1e0>)
 8021a80:	f240 321b 	movw	r2, #795	; 0x31b
 8021a84:	496f      	ldr	r1, [pc, #444]	; (8021c44 <tcp_enqueue_flags+0x1e4>)
 8021a86:	4870      	ldr	r0, [pc, #448]	; (8021c48 <tcp_enqueue_flags+0x1e8>)
 8021a88:	f004 fa2e 	bl	8025ee8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8021a8c:	687b      	ldr	r3, [r7, #4]
 8021a8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021a92:	2b0a      	cmp	r3, #10
 8021a94:	d806      	bhi.n	8021aa4 <tcp_enqueue_flags+0x44>
 8021a96:	687b      	ldr	r3, [r7, #4]
 8021a98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021a9c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8021aa0:	4293      	cmp	r3, r2
 8021aa2:	d90e      	bls.n	8021ac2 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8021aa4:	78fb      	ldrb	r3, [r7, #3]
 8021aa6:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	d109      	bne.n	8021ac2 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	7e9b      	ldrb	r3, [r3, #26]
 8021ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021ab6:	b2da      	uxtb	r2, r3
 8021ab8:	687b      	ldr	r3, [r7, #4]
 8021aba:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8021abc:	f04f 33ff 	mov.w	r3, #4294967295
 8021ac0:	e0ba      	b.n	8021c38 <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 8021ac2:	78fb      	ldrb	r3, [r7, #3]
 8021ac4:	f003 0302 	and.w	r3, r3, #2
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	d001      	beq.n	8021ad0 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8021acc:	2301      	movs	r3, #1
 8021ace:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8021ad0:	7ffb      	ldrb	r3, [r7, #31]
 8021ad2:	f003 0301 	and.w	r3, r3, #1
 8021ad6:	2b00      	cmp	r3, #0
 8021ad8:	d001      	beq.n	8021ade <tcp_enqueue_flags+0x7e>
 8021ada:	2304      	movs	r3, #4
 8021adc:	e000      	b.n	8021ae0 <tcp_enqueue_flags+0x80>
 8021ade:	2300      	movs	r3, #0
 8021ae0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8021ae2:	7dfb      	ldrb	r3, [r7, #23]
 8021ae4:	b29b      	uxth	r3, r3
 8021ae6:	2200      	movs	r2, #0
 8021ae8:	4619      	mov	r1, r3
 8021aea:	2000      	movs	r0, #0
 8021aec:	f7fa fdec 	bl	801c6c8 <pbuf_alloc>
 8021af0:	6138      	str	r0, [r7, #16]
 8021af2:	693b      	ldr	r3, [r7, #16]
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	d109      	bne.n	8021b0c <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 8021af8:	687b      	ldr	r3, [r7, #4]
 8021afa:	7e9b      	ldrb	r3, [r3, #26]
 8021afc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021b00:	b2da      	uxtb	r2, r3
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8021b06:	f04f 33ff 	mov.w	r3, #4294967295
 8021b0a:	e095      	b.n	8021c38 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8021b0c:	693b      	ldr	r3, [r7, #16]
 8021b0e:	895a      	ldrh	r2, [r3, #10]
 8021b10:	7dfb      	ldrb	r3, [r7, #23]
 8021b12:	b29b      	uxth	r3, r3
 8021b14:	429a      	cmp	r2, r3
 8021b16:	d206      	bcs.n	8021b26 <tcp_enqueue_flags+0xc6>
 8021b18:	4b49      	ldr	r3, [pc, #292]	; (8021c40 <tcp_enqueue_flags+0x1e0>)
 8021b1a:	f240 3241 	movw	r2, #833	; 0x341
 8021b1e:	494b      	ldr	r1, [pc, #300]	; (8021c4c <tcp_enqueue_flags+0x1ec>)
 8021b20:	4849      	ldr	r0, [pc, #292]	; (8021c48 <tcp_enqueue_flags+0x1e8>)
 8021b22:	f004 f9e1 	bl	8025ee8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8021b26:	687b      	ldr	r3, [r7, #4]
 8021b28:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8021b2a:	78fa      	ldrb	r2, [r7, #3]
 8021b2c:	7ffb      	ldrb	r3, [r7, #31]
 8021b2e:	9300      	str	r3, [sp, #0]
 8021b30:	460b      	mov	r3, r1
 8021b32:	6939      	ldr	r1, [r7, #16]
 8021b34:	6878      	ldr	r0, [r7, #4]
 8021b36:	f7ff fad5 	bl	80210e4 <tcp_create_segment>
 8021b3a:	60f8      	str	r0, [r7, #12]
 8021b3c:	68fb      	ldr	r3, [r7, #12]
 8021b3e:	2b00      	cmp	r3, #0
 8021b40:	d109      	bne.n	8021b56 <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 8021b42:	687b      	ldr	r3, [r7, #4]
 8021b44:	7e9b      	ldrb	r3, [r3, #26]
 8021b46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021b4a:	b2da      	uxtb	r2, r3
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8021b50:	f04f 33ff 	mov.w	r3, #4294967295
 8021b54:	e070      	b.n	8021c38 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8021b56:	68fb      	ldr	r3, [r7, #12]
 8021b58:	68db      	ldr	r3, [r3, #12]
 8021b5a:	f003 0303 	and.w	r3, r3, #3
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d006      	beq.n	8021b70 <tcp_enqueue_flags+0x110>
 8021b62:	4b37      	ldr	r3, [pc, #220]	; (8021c40 <tcp_enqueue_flags+0x1e0>)
 8021b64:	f240 3249 	movw	r2, #841	; 0x349
 8021b68:	4939      	ldr	r1, [pc, #228]	; (8021c50 <tcp_enqueue_flags+0x1f0>)
 8021b6a:	4837      	ldr	r0, [pc, #220]	; (8021c48 <tcp_enqueue_flags+0x1e8>)
 8021b6c:	f004 f9bc 	bl	8025ee8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8021b70:	68fb      	ldr	r3, [r7, #12]
 8021b72:	891b      	ldrh	r3, [r3, #8]
 8021b74:	2b00      	cmp	r3, #0
 8021b76:	d006      	beq.n	8021b86 <tcp_enqueue_flags+0x126>
 8021b78:	4b31      	ldr	r3, [pc, #196]	; (8021c40 <tcp_enqueue_flags+0x1e0>)
 8021b7a:	f240 324a 	movw	r2, #842	; 0x34a
 8021b7e:	4935      	ldr	r1, [pc, #212]	; (8021c54 <tcp_enqueue_flags+0x1f4>)
 8021b80:	4831      	ldr	r0, [pc, #196]	; (8021c48 <tcp_enqueue_flags+0x1e8>)
 8021b82:	f004 f9b1 	bl	8025ee8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021b8a:	2b00      	cmp	r3, #0
 8021b8c:	d103      	bne.n	8021b96 <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	68fa      	ldr	r2, [r7, #12]
 8021b92:	669a      	str	r2, [r3, #104]	; 0x68
 8021b94:	e00d      	b.n	8021bb2 <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8021b96:	687b      	ldr	r3, [r7, #4]
 8021b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021b9a:	61bb      	str	r3, [r7, #24]
 8021b9c:	e002      	b.n	8021ba4 <tcp_enqueue_flags+0x144>
 8021b9e:	69bb      	ldr	r3, [r7, #24]
 8021ba0:	681b      	ldr	r3, [r3, #0]
 8021ba2:	61bb      	str	r3, [r7, #24]
 8021ba4:	69bb      	ldr	r3, [r7, #24]
 8021ba6:	681b      	ldr	r3, [r3, #0]
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	d1f8      	bne.n	8021b9e <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 8021bac:	69bb      	ldr	r3, [r7, #24]
 8021bae:	68fa      	ldr	r2, [r7, #12]
 8021bb0:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8021bb2:	687b      	ldr	r3, [r7, #4]
 8021bb4:	2200      	movs	r2, #0
 8021bb6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8021bba:	78fb      	ldrb	r3, [r7, #3]
 8021bbc:	f003 0302 	and.w	r3, r3, #2
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	d104      	bne.n	8021bce <tcp_enqueue_flags+0x16e>
 8021bc4:	78fb      	ldrb	r3, [r7, #3]
 8021bc6:	f003 0301 	and.w	r3, r3, #1
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d004      	beq.n	8021bd8 <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 8021bce:	687b      	ldr	r3, [r7, #4]
 8021bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021bd2:	1c5a      	adds	r2, r3, #1
 8021bd4:	687b      	ldr	r3, [r7, #4]
 8021bd6:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8021bd8:	78fb      	ldrb	r3, [r7, #3]
 8021bda:	f003 0301 	and.w	r3, r3, #1
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	d006      	beq.n	8021bf0 <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 8021be2:	687b      	ldr	r3, [r7, #4]
 8021be4:	7e9b      	ldrb	r3, [r3, #26]
 8021be6:	f043 0320 	orr.w	r3, r3, #32
 8021bea:	b2da      	uxtb	r2, r3
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8021bf0:	68fb      	ldr	r3, [r7, #12]
 8021bf2:	685b      	ldr	r3, [r3, #4]
 8021bf4:	4618      	mov	r0, r3
 8021bf6:	f7fb f973 	bl	801cee0 <pbuf_clen>
 8021bfa:	4603      	mov	r3, r0
 8021bfc:	461a      	mov	r2, r3
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021c04:	4413      	add	r3, r2
 8021c06:	b29a      	uxth	r2, r3
 8021c08:	687b      	ldr	r3, [r7, #4]
 8021c0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8021c0e:	687b      	ldr	r3, [r7, #4]
 8021c10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	d00e      	beq.n	8021c36 <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	d10a      	bne.n	8021c36 <tcp_enqueue_flags+0x1d6>
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021c24:	2b00      	cmp	r3, #0
 8021c26:	d106      	bne.n	8021c36 <tcp_enqueue_flags+0x1d6>
 8021c28:	4b05      	ldr	r3, [pc, #20]	; (8021c40 <tcp_enqueue_flags+0x1e0>)
 8021c2a:	f240 326d 	movw	r2, #877	; 0x36d
 8021c2e:	490a      	ldr	r1, [pc, #40]	; (8021c58 <tcp_enqueue_flags+0x1f8>)
 8021c30:	4805      	ldr	r0, [pc, #20]	; (8021c48 <tcp_enqueue_flags+0x1e8>)
 8021c32:	f004 f959 	bl	8025ee8 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8021c36:	2300      	movs	r3, #0
}
 8021c38:	4618      	mov	r0, r3
 8021c3a:	3720      	adds	r7, #32
 8021c3c:	46bd      	mov	sp, r7
 8021c3e:	bd80      	pop	{r7, pc}
 8021c40:	08028b04 	.word	0x08028b04
 8021c44:	08028e08 	.word	0x08028e08
 8021c48:	08028b68 	.word	0x08028b68
 8021c4c:	08028e60 	.word	0x08028e60
 8021c50:	08028e9c 	.word	0x08028e9c
 8021c54:	08028eb4 	.word	0x08028eb4
 8021c58:	08028ee0 	.word	0x08028ee0

08021c5c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8021c5c:	b590      	push	{r4, r7, lr}
 8021c5e:	b08b      	sub	sp, #44	; 0x2c
 8021c60:	af04      	add	r7, sp, #16
 8021c62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8021c64:	2300      	movs	r3, #0
 8021c66:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8021c68:	7dbb      	ldrb	r3, [r7, #22]
 8021c6a:	b29c      	uxth	r4, r3
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021c70:	4618      	mov	r0, r3
 8021c72:	f7f7 fc2b 	bl	80194cc <lwip_htonl>
 8021c76:	4603      	mov	r3, r0
 8021c78:	2200      	movs	r2, #0
 8021c7a:	4621      	mov	r1, r4
 8021c7c:	6878      	ldr	r0, [r7, #4]
 8021c7e:	f7ff f977 	bl	8020f70 <tcp_output_alloc_header>
 8021c82:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021c84:	693b      	ldr	r3, [r7, #16]
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d109      	bne.n	8021c9e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	7e9b      	ldrb	r3, [r3, #26]
 8021c8e:	f043 0303 	orr.w	r3, r3, #3
 8021c92:	b2da      	uxtb	r2, r3
 8021c94:	687b      	ldr	r3, [r7, #4]
 8021c96:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8021c98:	f06f 0301 	mvn.w	r3, #1
 8021c9c:	e036      	b.n	8021d0c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8021c9e:	687b      	ldr	r3, [r7, #4]
 8021ca0:	3304      	adds	r3, #4
 8021ca2:	4618      	mov	r0, r3
 8021ca4:	f7f8 fce4 	bl	801a670 <ip4_route>
 8021ca8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8021caa:	68fb      	ldr	r3, [r7, #12]
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d102      	bne.n	8021cb6 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8021cb0:	23fc      	movs	r3, #252	; 0xfc
 8021cb2:	75fb      	strb	r3, [r7, #23]
 8021cb4:	e012      	b.n	8021cdc <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8021cb6:	6879      	ldr	r1, [r7, #4]
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	1d18      	adds	r0, r3, #4
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	7a9c      	ldrb	r4, [r3, #10]
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	7a5b      	ldrb	r3, [r3, #9]
 8021cc4:	68fa      	ldr	r2, [r7, #12]
 8021cc6:	9202      	str	r2, [sp, #8]
 8021cc8:	2206      	movs	r2, #6
 8021cca:	9201      	str	r2, [sp, #4]
 8021ccc:	9300      	str	r3, [sp, #0]
 8021cce:	4623      	mov	r3, r4
 8021cd0:	4602      	mov	r2, r0
 8021cd2:	6938      	ldr	r0, [r7, #16]
 8021cd4:	f7f8 fe68 	bl	801a9a8 <ip4_output_if>
 8021cd8:	4603      	mov	r3, r0
 8021cda:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8021cdc:	6938      	ldr	r0, [r7, #16]
 8021cde:	f7fb f865 	bl	801cdac <pbuf_free>

  if (err != ERR_OK) {
 8021ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8021ce6:	2b00      	cmp	r3, #0
 8021ce8:	d007      	beq.n	8021cfa <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	7e9b      	ldrb	r3, [r3, #26]
 8021cee:	f043 0303 	orr.w	r3, r3, #3
 8021cf2:	b2da      	uxtb	r2, r3
 8021cf4:	687b      	ldr	r3, [r7, #4]
 8021cf6:	769a      	strb	r2, [r3, #26]
 8021cf8:	e006      	b.n	8021d08 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8021cfa:	687b      	ldr	r3, [r7, #4]
 8021cfc:	7e9b      	ldrb	r3, [r3, #26]
 8021cfe:	f023 0303 	bic.w	r3, r3, #3
 8021d02:	b2da      	uxtb	r2, r3
 8021d04:	687b      	ldr	r3, [r7, #4]
 8021d06:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8021d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021d0c:	4618      	mov	r0, r3
 8021d0e:	371c      	adds	r7, #28
 8021d10:	46bd      	mov	sp, r7
 8021d12:	bd90      	pop	{r4, r7, pc}

08021d14 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8021d14:	b5b0      	push	{r4, r5, r7, lr}
 8021d16:	b08a      	sub	sp, #40	; 0x28
 8021d18:	af00      	add	r7, sp, #0
 8021d1a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	7d1b      	ldrb	r3, [r3, #20]
 8021d20:	2b01      	cmp	r3, #1
 8021d22:	d106      	bne.n	8021d32 <tcp_output+0x1e>
 8021d24:	4b9b      	ldr	r3, [pc, #620]	; (8021f94 <tcp_output+0x280>)
 8021d26:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8021d2a:	499b      	ldr	r1, [pc, #620]	; (8021f98 <tcp_output+0x284>)
 8021d2c:	489b      	ldr	r0, [pc, #620]	; (8021f9c <tcp_output+0x288>)
 8021d2e:	f004 f8db 	bl	8025ee8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8021d32:	4b9b      	ldr	r3, [pc, #620]	; (8021fa0 <tcp_output+0x28c>)
 8021d34:	681a      	ldr	r2, [r3, #0]
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	429a      	cmp	r2, r3
 8021d3a:	d101      	bne.n	8021d40 <tcp_output+0x2c>
    return ERR_OK;
 8021d3c:	2300      	movs	r3, #0
 8021d3e:	e1cd      	b.n	80220dc <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8021d4c:	429a      	cmp	r2, r3
 8021d4e:	d203      	bcs.n	8021d58 <tcp_output+0x44>
 8021d50:	687b      	ldr	r3, [r7, #4]
 8021d52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8021d56:	e002      	b.n	8021d5e <tcp_output+0x4a>
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8021d5e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8021d60:	687b      	ldr	r3, [r7, #4]
 8021d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021d64:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8021d66:	687b      	ldr	r3, [r7, #4]
 8021d68:	7e9b      	ldrb	r3, [r3, #26]
 8021d6a:	f003 0302 	and.w	r3, r3, #2
 8021d6e:	2b00      	cmp	r3, #0
 8021d70:	d017      	beq.n	8021da2 <tcp_output+0x8e>
 8021d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d74:	2b00      	cmp	r3, #0
 8021d76:	d00f      	beq.n	8021d98 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8021d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d7a:	68db      	ldr	r3, [r3, #12]
 8021d7c:	685b      	ldr	r3, [r3, #4]
 8021d7e:	4618      	mov	r0, r3
 8021d80:	f7f7 fba4 	bl	80194cc <lwip_htonl>
 8021d84:	4602      	mov	r2, r0
 8021d86:	687b      	ldr	r3, [r7, #4]
 8021d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d8a:	1ad3      	subs	r3, r2, r3
 8021d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021d8e:	8912      	ldrh	r2, [r2, #8]
 8021d90:	441a      	add	r2, r3
     (seg == NULL ||
 8021d92:	69bb      	ldr	r3, [r7, #24]
 8021d94:	429a      	cmp	r2, r3
 8021d96:	d904      	bls.n	8021da2 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8021d98:	6878      	ldr	r0, [r7, #4]
 8021d9a:	f7ff ff5f 	bl	8021c5c <tcp_send_empty_ack>
 8021d9e:	4603      	mov	r3, r0
 8021da0:	e19c      	b.n	80220dc <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021da6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8021da8:	6a3b      	ldr	r3, [r7, #32]
 8021daa:	2b00      	cmp	r3, #0
 8021dac:	d007      	beq.n	8021dbe <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8021dae:	e002      	b.n	8021db6 <tcp_output+0xa2>
 8021db0:	6a3b      	ldr	r3, [r7, #32]
 8021db2:	681b      	ldr	r3, [r3, #0]
 8021db4:	623b      	str	r3, [r7, #32]
 8021db6:	6a3b      	ldr	r3, [r7, #32]
 8021db8:	681b      	ldr	r3, [r3, #0]
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d1f8      	bne.n	8021db0 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8021dbe:	687b      	ldr	r3, [r7, #4]
 8021dc0:	3304      	adds	r3, #4
 8021dc2:	4618      	mov	r0, r3
 8021dc4:	f7f8 fc54 	bl	801a670 <ip4_route>
 8021dc8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8021dca:	697b      	ldr	r3, [r7, #20]
 8021dcc:	2b00      	cmp	r3, #0
 8021dce:	d102      	bne.n	8021dd6 <tcp_output+0xc2>
    return ERR_RTE;
 8021dd0:	f06f 0303 	mvn.w	r3, #3
 8021dd4:	e182      	b.n	80220dc <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8021dd6:	687b      	ldr	r3, [r7, #4]
 8021dd8:	2b00      	cmp	r3, #0
 8021dda:	d003      	beq.n	8021de4 <tcp_output+0xd0>
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	681b      	ldr	r3, [r3, #0]
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d111      	bne.n	8021e08 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8021de4:	697b      	ldr	r3, [r7, #20]
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	d002      	beq.n	8021df0 <tcp_output+0xdc>
 8021dea:	697b      	ldr	r3, [r7, #20]
 8021dec:	3304      	adds	r3, #4
 8021dee:	e000      	b.n	8021df2 <tcp_output+0xde>
 8021df0:	2300      	movs	r3, #0
 8021df2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8021df4:	693b      	ldr	r3, [r7, #16]
 8021df6:	2b00      	cmp	r3, #0
 8021df8:	d102      	bne.n	8021e00 <tcp_output+0xec>
      return ERR_RTE;
 8021dfa:	f06f 0303 	mvn.w	r3, #3
 8021dfe:	e16d      	b.n	80220dc <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8021e00:	693b      	ldr	r3, [r7, #16]
 8021e02:	681a      	ldr	r2, [r3, #0]
 8021e04:	687b      	ldr	r3, [r7, #4]
 8021e06:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8021e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e0a:	2b00      	cmp	r3, #0
 8021e0c:	f000 813e 	beq.w	802208c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8021e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e12:	68db      	ldr	r3, [r3, #12]
 8021e14:	685b      	ldr	r3, [r3, #4]
 8021e16:	4618      	mov	r0, r3
 8021e18:	f7f7 fb58 	bl	80194cc <lwip_htonl>
 8021e1c:	4602      	mov	r2, r0
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021e22:	1ad3      	subs	r3, r2, r3
 8021e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021e26:	8912      	ldrh	r2, [r2, #8]
 8021e28:	441a      	add	r2, r3
  if (seg != NULL &&
 8021e2a:	69bb      	ldr	r3, [r7, #24]
 8021e2c:	429a      	cmp	r2, r3
 8021e2e:	f240 812d 	bls.w	802208c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8021e32:	69bb      	ldr	r3, [r7, #24]
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	f000 8129 	beq.w	802208c <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8021e3a:	687b      	ldr	r3, [r7, #4]
 8021e3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8021e40:	461a      	mov	r2, r3
 8021e42:	69bb      	ldr	r3, [r7, #24]
 8021e44:	429a      	cmp	r2, r3
 8021e46:	f040 8121 	bne.w	802208c <tcp_output+0x378>
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	f040 811c 	bne.w	802208c <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	f040 812b 	bne.w	80220b6 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	2200      	movs	r2, #0
 8021e64:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8021e68:	687b      	ldr	r3, [r7, #4]
 8021e6a:	2201      	movs	r2, #1
 8021e6c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8021e70:	e121      	b.n	80220b6 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8021e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e74:	68db      	ldr	r3, [r3, #12]
 8021e76:	899b      	ldrh	r3, [r3, #12]
 8021e78:	b29b      	uxth	r3, r3
 8021e7a:	4618      	mov	r0, r3
 8021e7c:	f7f7 fb18 	bl	80194b0 <lwip_htons>
 8021e80:	4603      	mov	r3, r0
 8021e82:	f003 0304 	and.w	r3, r3, #4
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	d006      	beq.n	8021e98 <tcp_output+0x184>
 8021e8a:	4b42      	ldr	r3, [pc, #264]	; (8021f94 <tcp_output+0x280>)
 8021e8c:	f240 4246 	movw	r2, #1094	; 0x446
 8021e90:	4944      	ldr	r1, [pc, #272]	; (8021fa4 <tcp_output+0x290>)
 8021e92:	4842      	ldr	r0, [pc, #264]	; (8021f9c <tcp_output+0x288>)
 8021e94:	f004 f828 	bl	8025ee8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8021e98:	687b      	ldr	r3, [r7, #4]
 8021e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	d01f      	beq.n	8021ee0 <tcp_output+0x1cc>
 8021ea0:	687b      	ldr	r3, [r7, #4]
 8021ea2:	7e9b      	ldrb	r3, [r3, #26]
 8021ea4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	d119      	bne.n	8021ee0 <tcp_output+0x1cc>
 8021eac:	687b      	ldr	r3, [r7, #4]
 8021eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d00b      	beq.n	8021ecc <tcp_output+0x1b8>
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021eb8:	681b      	ldr	r3, [r3, #0]
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	d110      	bne.n	8021ee0 <tcp_output+0x1cc>
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8021ec2:	891a      	ldrh	r2, [r3, #8]
 8021ec4:	687b      	ldr	r3, [r7, #4]
 8021ec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8021ec8:	429a      	cmp	r2, r3
 8021eca:	d209      	bcs.n	8021ee0 <tcp_output+0x1cc>
 8021ecc:	687b      	ldr	r3, [r7, #4]
 8021ece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8021ed2:	2b00      	cmp	r3, #0
 8021ed4:	d004      	beq.n	8021ee0 <tcp_output+0x1cc>
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021edc:	2b0a      	cmp	r3, #10
 8021ede:	d901      	bls.n	8021ee4 <tcp_output+0x1d0>
 8021ee0:	2301      	movs	r3, #1
 8021ee2:	e000      	b.n	8021ee6 <tcp_output+0x1d2>
 8021ee4:	2300      	movs	r3, #0
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d106      	bne.n	8021ef8 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8021eea:	687b      	ldr	r3, [r7, #4]
 8021eec:	7e9b      	ldrb	r3, [r3, #26]
 8021eee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	f000 80e1 	beq.w	80220ba <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	7d1b      	ldrb	r3, [r3, #20]
 8021efc:	2b02      	cmp	r3, #2
 8021efe:	d00c      	beq.n	8021f1a <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8021f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f02:	68dc      	ldr	r4, [r3, #12]
 8021f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f06:	68db      	ldr	r3, [r3, #12]
 8021f08:	899b      	ldrh	r3, [r3, #12]
 8021f0a:	b29d      	uxth	r5, r3
 8021f0c:	2010      	movs	r0, #16
 8021f0e:	f7f7 facf 	bl	80194b0 <lwip_htons>
 8021f12:	4603      	mov	r3, r0
 8021f14:	432b      	orrs	r3, r5
 8021f16:	b29b      	uxth	r3, r3
 8021f18:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8021f1a:	697a      	ldr	r2, [r7, #20]
 8021f1c:	6879      	ldr	r1, [r7, #4]
 8021f1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021f20:	f000 f8e0 	bl	80220e4 <tcp_output_segment>
 8021f24:	4603      	mov	r3, r0
 8021f26:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8021f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021f2c:	2b00      	cmp	r3, #0
 8021f2e:	d009      	beq.n	8021f44 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8021f30:	687b      	ldr	r3, [r7, #4]
 8021f32:	7e9b      	ldrb	r3, [r3, #26]
 8021f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021f38:	b2da      	uxtb	r2, r3
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	769a      	strb	r2, [r3, #26]
      return err;
 8021f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021f42:	e0cb      	b.n	80220dc <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 8021f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f46:	681a      	ldr	r2, [r3, #0]
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	7d1b      	ldrb	r3, [r3, #20]
 8021f50:	2b02      	cmp	r3, #2
 8021f52:	d006      	beq.n	8021f62 <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8021f54:	687b      	ldr	r3, [r7, #4]
 8021f56:	7e9b      	ldrb	r3, [r3, #26]
 8021f58:	f023 0303 	bic.w	r3, r3, #3
 8021f5c:	b2da      	uxtb	r2, r3
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8021f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f64:	68db      	ldr	r3, [r3, #12]
 8021f66:	685b      	ldr	r3, [r3, #4]
 8021f68:	4618      	mov	r0, r3
 8021f6a:	f7f7 faaf 	bl	80194cc <lwip_htonl>
 8021f6e:	4604      	mov	r4, r0
 8021f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f72:	891b      	ldrh	r3, [r3, #8]
 8021f74:	461d      	mov	r5, r3
 8021f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f78:	68db      	ldr	r3, [r3, #12]
 8021f7a:	899b      	ldrh	r3, [r3, #12]
 8021f7c:	b29b      	uxth	r3, r3
 8021f7e:	4618      	mov	r0, r3
 8021f80:	f7f7 fa96 	bl	80194b0 <lwip_htons>
 8021f84:	4603      	mov	r3, r0
 8021f86:	f003 0303 	and.w	r3, r3, #3
 8021f8a:	2b00      	cmp	r3, #0
 8021f8c:	d00c      	beq.n	8021fa8 <tcp_output+0x294>
 8021f8e:	2301      	movs	r3, #1
 8021f90:	e00b      	b.n	8021faa <tcp_output+0x296>
 8021f92:	bf00      	nop
 8021f94:	08028b04 	.word	0x08028b04
 8021f98:	08028f08 	.word	0x08028f08
 8021f9c:	08028b68 	.word	0x08028b68
 8021fa0:	2000ecd8 	.word	0x2000ecd8
 8021fa4:	08028f30 	.word	0x08028f30
 8021fa8:	2300      	movs	r3, #0
 8021faa:	442b      	add	r3, r5
 8021fac:	4423      	add	r3, r4
 8021fae:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021fb4:	68bb      	ldr	r3, [r7, #8]
 8021fb6:	1ad3      	subs	r3, r2, r3
 8021fb8:	2b00      	cmp	r3, #0
 8021fba:	da02      	bge.n	8021fc2 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8021fbc:	687b      	ldr	r3, [r7, #4]
 8021fbe:	68ba      	ldr	r2, [r7, #8]
 8021fc0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8021fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fc4:	891b      	ldrh	r3, [r3, #8]
 8021fc6:	461c      	mov	r4, r3
 8021fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fca:	68db      	ldr	r3, [r3, #12]
 8021fcc:	899b      	ldrh	r3, [r3, #12]
 8021fce:	b29b      	uxth	r3, r3
 8021fd0:	4618      	mov	r0, r3
 8021fd2:	f7f7 fa6d 	bl	80194b0 <lwip_htons>
 8021fd6:	4603      	mov	r3, r0
 8021fd8:	f003 0303 	and.w	r3, r3, #3
 8021fdc:	2b00      	cmp	r3, #0
 8021fde:	d001      	beq.n	8021fe4 <tcp_output+0x2d0>
 8021fe0:	2301      	movs	r3, #1
 8021fe2:	e000      	b.n	8021fe6 <tcp_output+0x2d2>
 8021fe4:	2300      	movs	r3, #0
 8021fe6:	4423      	add	r3, r4
 8021fe8:	2b00      	cmp	r3, #0
 8021fea:	d049      	beq.n	8022080 <tcp_output+0x36c>
      seg->next = NULL;
 8021fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fee:	2200      	movs	r2, #0
 8021ff0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8021ff2:	687b      	ldr	r3, [r7, #4]
 8021ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	d105      	bne.n	8022006 <tcp_output+0x2f2>
        pcb->unacked = seg;
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021ffe:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8022000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022002:	623b      	str	r3, [r7, #32]
 8022004:	e03f      	b.n	8022086 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8022006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022008:	68db      	ldr	r3, [r3, #12]
 802200a:	685b      	ldr	r3, [r3, #4]
 802200c:	4618      	mov	r0, r3
 802200e:	f7f7 fa5d 	bl	80194cc <lwip_htonl>
 8022012:	4604      	mov	r4, r0
 8022014:	6a3b      	ldr	r3, [r7, #32]
 8022016:	68db      	ldr	r3, [r3, #12]
 8022018:	685b      	ldr	r3, [r3, #4]
 802201a:	4618      	mov	r0, r3
 802201c:	f7f7 fa56 	bl	80194cc <lwip_htonl>
 8022020:	4603      	mov	r3, r0
 8022022:	1ae3      	subs	r3, r4, r3
 8022024:	2b00      	cmp	r3, #0
 8022026:	da24      	bge.n	8022072 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	336c      	adds	r3, #108	; 0x6c
 802202c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 802202e:	e002      	b.n	8022036 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8022030:	69fb      	ldr	r3, [r7, #28]
 8022032:	681b      	ldr	r3, [r3, #0]
 8022034:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8022036:	69fb      	ldr	r3, [r7, #28]
 8022038:	681b      	ldr	r3, [r3, #0]
 802203a:	2b00      	cmp	r3, #0
 802203c:	d011      	beq.n	8022062 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802203e:	69fb      	ldr	r3, [r7, #28]
 8022040:	681b      	ldr	r3, [r3, #0]
 8022042:	68db      	ldr	r3, [r3, #12]
 8022044:	685b      	ldr	r3, [r3, #4]
 8022046:	4618      	mov	r0, r3
 8022048:	f7f7 fa40 	bl	80194cc <lwip_htonl>
 802204c:	4604      	mov	r4, r0
 802204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022050:	68db      	ldr	r3, [r3, #12]
 8022052:	685b      	ldr	r3, [r3, #4]
 8022054:	4618      	mov	r0, r3
 8022056:	f7f7 fa39 	bl	80194cc <lwip_htonl>
 802205a:	4603      	mov	r3, r0
 802205c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 802205e:	2b00      	cmp	r3, #0
 8022060:	dbe6      	blt.n	8022030 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8022062:	69fb      	ldr	r3, [r7, #28]
 8022064:	681a      	ldr	r2, [r3, #0]
 8022066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022068:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 802206a:	69fb      	ldr	r3, [r7, #28]
 802206c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802206e:	601a      	str	r2, [r3, #0]
 8022070:	e009      	b.n	8022086 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8022072:	6a3b      	ldr	r3, [r7, #32]
 8022074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022076:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8022078:	6a3b      	ldr	r3, [r7, #32]
 802207a:	681b      	ldr	r3, [r3, #0]
 802207c:	623b      	str	r3, [r7, #32]
 802207e:	e002      	b.n	8022086 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8022080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022082:	f7fc f9ae 	bl	801e3e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8022086:	687b      	ldr	r3, [r7, #4]
 8022088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802208a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 802208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802208e:	2b00      	cmp	r3, #0
 8022090:	d014      	beq.n	80220bc <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8022092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022094:	68db      	ldr	r3, [r3, #12]
 8022096:	685b      	ldr	r3, [r3, #4]
 8022098:	4618      	mov	r0, r3
 802209a:	f7f7 fa17 	bl	80194cc <lwip_htonl>
 802209e:	4602      	mov	r2, r0
 80220a0:	687b      	ldr	r3, [r7, #4]
 80220a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80220a4:	1ad3      	subs	r3, r2, r3
 80220a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80220a8:	8912      	ldrh	r2, [r2, #8]
 80220aa:	441a      	add	r2, r3
  while (seg != NULL &&
 80220ac:	69bb      	ldr	r3, [r7, #24]
 80220ae:	429a      	cmp	r2, r3
 80220b0:	f67f aedf 	bls.w	8021e72 <tcp_output+0x15e>
 80220b4:	e002      	b.n	80220bc <tcp_output+0x3a8>
    goto output_done;
 80220b6:	bf00      	nop
 80220b8:	e000      	b.n	80220bc <tcp_output+0x3a8>
      break;
 80220ba:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80220bc:	687b      	ldr	r3, [r7, #4]
 80220be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80220c0:	2b00      	cmp	r3, #0
 80220c2:	d103      	bne.n	80220cc <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80220c4:	687b      	ldr	r3, [r7, #4]
 80220c6:	2200      	movs	r2, #0
 80220c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	7e9b      	ldrb	r3, [r3, #26]
 80220d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80220d4:	b2da      	uxtb	r2, r3
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80220da:	2300      	movs	r3, #0
}
 80220dc:	4618      	mov	r0, r3
 80220de:	3728      	adds	r7, #40	; 0x28
 80220e0:	46bd      	mov	sp, r7
 80220e2:	bdb0      	pop	{r4, r5, r7, pc}

080220e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80220e4:	b5b0      	push	{r4, r5, r7, lr}
 80220e6:	b08c      	sub	sp, #48	; 0x30
 80220e8:	af04      	add	r7, sp, #16
 80220ea:	60f8      	str	r0, [r7, #12]
 80220ec:	60b9      	str	r1, [r7, #8]
 80220ee:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80220f0:	68fb      	ldr	r3, [r7, #12]
 80220f2:	685b      	ldr	r3, [r3, #4]
 80220f4:	89db      	ldrh	r3, [r3, #14]
 80220f6:	2b01      	cmp	r3, #1
 80220f8:	d001      	beq.n	80220fe <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80220fa:	2300      	movs	r3, #0
 80220fc:	e08b      	b.n	8022216 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80220fe:	68fb      	ldr	r3, [r7, #12]
 8022100:	68dc      	ldr	r4, [r3, #12]
 8022102:	68bb      	ldr	r3, [r7, #8]
 8022104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022106:	4618      	mov	r0, r3
 8022108:	f7f7 f9e0 	bl	80194cc <lwip_htonl>
 802210c:	4603      	mov	r3, r0
 802210e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8022110:	68fb      	ldr	r3, [r7, #12]
 8022112:	68dc      	ldr	r4, [r3, #12]
 8022114:	68bb      	ldr	r3, [r7, #8]
 8022116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022118:	4618      	mov	r0, r3
 802211a:	f7f7 f9c9 	bl	80194b0 <lwip_htons>
 802211e:	4603      	mov	r3, r0
 8022120:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8022122:	68bb      	ldr	r3, [r7, #8]
 8022124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022126:	68ba      	ldr	r2, [r7, #8]
 8022128:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 802212a:	441a      	add	r2, r3
 802212c:	68bb      	ldr	r3, [r7, #8]
 802212e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8022130:	68fb      	ldr	r3, [r7, #12]
 8022132:	68db      	ldr	r3, [r3, #12]
 8022134:	3314      	adds	r3, #20
 8022136:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8022138:	68fb      	ldr	r3, [r7, #12]
 802213a:	7a9b      	ldrb	r3, [r3, #10]
 802213c:	f003 0301 	and.w	r3, r3, #1
 8022140:	2b00      	cmp	r3, #0
 8022142:	d014      	beq.n	802216e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8022144:	68bb      	ldr	r3, [r7, #8]
 8022146:	3304      	adds	r3, #4
 8022148:	4619      	mov	r1, r3
 802214a:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 802214e:	f7fc fc73 	bl	801ea38 <tcp_eff_send_mss_impl>
 8022152:	4603      	mov	r3, r0
 8022154:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8022156:	8b7b      	ldrh	r3, [r7, #26]
 8022158:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 802215c:	4618      	mov	r0, r3
 802215e:	f7f7 f9b5 	bl	80194cc <lwip_htonl>
 8022162:	4602      	mov	r2, r0
 8022164:	69fb      	ldr	r3, [r7, #28]
 8022166:	601a      	str	r2, [r3, #0]
    opts += 1;
 8022168:	69fb      	ldr	r3, [r7, #28]
 802216a:	3304      	adds	r3, #4
 802216c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 802216e:	68bb      	ldr	r3, [r7, #8]
 8022170:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8022174:	2b00      	cmp	r3, #0
 8022176:	da02      	bge.n	802217e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8022178:	68bb      	ldr	r3, [r7, #8]
 802217a:	2200      	movs	r2, #0
 802217c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 802217e:	68bb      	ldr	r3, [r7, #8]
 8022180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022182:	2b00      	cmp	r3, #0
 8022184:	d10c      	bne.n	80221a0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8022186:	4b26      	ldr	r3, [pc, #152]	; (8022220 <tcp_output_segment+0x13c>)
 8022188:	681a      	ldr	r2, [r3, #0]
 802218a:	68bb      	ldr	r3, [r7, #8]
 802218c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 802218e:	68fb      	ldr	r3, [r7, #12]
 8022190:	68db      	ldr	r3, [r3, #12]
 8022192:	685b      	ldr	r3, [r3, #4]
 8022194:	4618      	mov	r0, r3
 8022196:	f7f7 f999 	bl	80194cc <lwip_htonl>
 802219a:	4602      	mov	r2, r0
 802219c:	68bb      	ldr	r3, [r7, #8]
 802219e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80221a0:	68fb      	ldr	r3, [r7, #12]
 80221a2:	68db      	ldr	r3, [r3, #12]
 80221a4:	461a      	mov	r2, r3
 80221a6:	68fb      	ldr	r3, [r7, #12]
 80221a8:	685b      	ldr	r3, [r3, #4]
 80221aa:	685b      	ldr	r3, [r3, #4]
 80221ac:	1ad3      	subs	r3, r2, r3
 80221ae:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80221b0:	68fb      	ldr	r3, [r7, #12]
 80221b2:	685b      	ldr	r3, [r3, #4]
 80221b4:	68fa      	ldr	r2, [r7, #12]
 80221b6:	6852      	ldr	r2, [r2, #4]
 80221b8:	8951      	ldrh	r1, [r2, #10]
 80221ba:	8b3a      	ldrh	r2, [r7, #24]
 80221bc:	1a8a      	subs	r2, r1, r2
 80221be:	b292      	uxth	r2, r2
 80221c0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80221c2:	68fb      	ldr	r3, [r7, #12]
 80221c4:	685b      	ldr	r3, [r3, #4]
 80221c6:	68fa      	ldr	r2, [r7, #12]
 80221c8:	6852      	ldr	r2, [r2, #4]
 80221ca:	8911      	ldrh	r1, [r2, #8]
 80221cc:	8b3a      	ldrh	r2, [r7, #24]
 80221ce:	1a8a      	subs	r2, r1, r2
 80221d0:	b292      	uxth	r2, r2
 80221d2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80221d4:	68fb      	ldr	r3, [r7, #12]
 80221d6:	685b      	ldr	r3, [r3, #4]
 80221d8:	68fa      	ldr	r2, [r7, #12]
 80221da:	68d2      	ldr	r2, [r2, #12]
 80221dc:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80221de:	68fb      	ldr	r3, [r7, #12]
 80221e0:	68db      	ldr	r3, [r3, #12]
 80221e2:	2200      	movs	r2, #0
 80221e4:	741a      	strb	r2, [r3, #16]
 80221e6:	2200      	movs	r2, #0
 80221e8:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80221ea:	68fb      	ldr	r3, [r7, #12]
 80221ec:	6858      	ldr	r0, [r3, #4]
 80221ee:	68b9      	ldr	r1, [r7, #8]
 80221f0:	68bb      	ldr	r3, [r7, #8]
 80221f2:	1d1c      	adds	r4, r3, #4
 80221f4:	68bb      	ldr	r3, [r7, #8]
 80221f6:	7a9d      	ldrb	r5, [r3, #10]
 80221f8:	68bb      	ldr	r3, [r7, #8]
 80221fa:	7a5b      	ldrb	r3, [r3, #9]
 80221fc:	687a      	ldr	r2, [r7, #4]
 80221fe:	9202      	str	r2, [sp, #8]
 8022200:	2206      	movs	r2, #6
 8022202:	9201      	str	r2, [sp, #4]
 8022204:	9300      	str	r3, [sp, #0]
 8022206:	462b      	mov	r3, r5
 8022208:	4622      	mov	r2, r4
 802220a:	f7f8 fbcd 	bl	801a9a8 <ip4_output_if>
 802220e:	4603      	mov	r3, r0
 8022210:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8022212:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8022216:	4618      	mov	r0, r3
 8022218:	3720      	adds	r7, #32
 802221a:	46bd      	mov	sp, r7
 802221c:	bdb0      	pop	{r4, r5, r7, pc}
 802221e:	bf00      	nop
 8022220:	2000ecc8 	.word	0x2000ecc8

08022224 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8022224:	b580      	push	{r7, lr}
 8022226:	b08c      	sub	sp, #48	; 0x30
 8022228:	af04      	add	r7, sp, #16
 802222a:	60f8      	str	r0, [r7, #12]
 802222c:	60b9      	str	r1, [r7, #8]
 802222e:	607a      	str	r2, [r7, #4]
 8022230:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8022232:	2200      	movs	r2, #0
 8022234:	2114      	movs	r1, #20
 8022236:	2001      	movs	r0, #1
 8022238:	f7fa fa46 	bl	801c6c8 <pbuf_alloc>
 802223c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 802223e:	69fb      	ldr	r3, [r7, #28]
 8022240:	2b00      	cmp	r3, #0
 8022242:	d059      	beq.n	80222f8 <tcp_rst+0xd4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8022244:	69fb      	ldr	r3, [r7, #28]
 8022246:	895b      	ldrh	r3, [r3, #10]
 8022248:	2b13      	cmp	r3, #19
 802224a:	d806      	bhi.n	802225a <tcp_rst+0x36>
 802224c:	4b2c      	ldr	r3, [pc, #176]	; (8022300 <tcp_rst+0xdc>)
 802224e:	f240 524d 	movw	r2, #1357	; 0x54d
 8022252:	492c      	ldr	r1, [pc, #176]	; (8022304 <tcp_rst+0xe0>)
 8022254:	482c      	ldr	r0, [pc, #176]	; (8022308 <tcp_rst+0xe4>)
 8022256:	f003 fe47 	bl	8025ee8 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 802225a:	69fb      	ldr	r3, [r7, #28]
 802225c:	685b      	ldr	r3, [r3, #4]
 802225e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8022260:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8022262:	4618      	mov	r0, r3
 8022264:	f7f7 f924 	bl	80194b0 <lwip_htons>
 8022268:	4603      	mov	r3, r0
 802226a:	461a      	mov	r2, r3
 802226c:	69bb      	ldr	r3, [r7, #24]
 802226e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8022270:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8022272:	4618      	mov	r0, r3
 8022274:	f7f7 f91c 	bl	80194b0 <lwip_htons>
 8022278:	4603      	mov	r3, r0
 802227a:	461a      	mov	r2, r3
 802227c:	69bb      	ldr	r3, [r7, #24]
 802227e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8022280:	68f8      	ldr	r0, [r7, #12]
 8022282:	f7f7 f923 	bl	80194cc <lwip_htonl>
 8022286:	4602      	mov	r2, r0
 8022288:	69bb      	ldr	r3, [r7, #24]
 802228a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 802228c:	68b8      	ldr	r0, [r7, #8]
 802228e:	f7f7 f91d 	bl	80194cc <lwip_htonl>
 8022292:	4602      	mov	r2, r0
 8022294:	69bb      	ldr	r3, [r7, #24]
 8022296:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8022298:	f245 0014 	movw	r0, #20500	; 0x5014
 802229c:	f7f7 f908 	bl	80194b0 <lwip_htons>
 80222a0:	4603      	mov	r3, r0
 80222a2:	461a      	mov	r2, r3
 80222a4:	69bb      	ldr	r3, [r7, #24]
 80222a6:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80222a8:	69bb      	ldr	r3, [r7, #24]
 80222aa:	2200      	movs	r2, #0
 80222ac:	f042 0210 	orr.w	r2, r2, #16
 80222b0:	739a      	strb	r2, [r3, #14]
 80222b2:	2200      	movs	r2, #0
 80222b4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80222b6:	69bb      	ldr	r3, [r7, #24]
 80222b8:	2200      	movs	r2, #0
 80222ba:	741a      	strb	r2, [r3, #16]
 80222bc:	2200      	movs	r2, #0
 80222be:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80222c0:	69bb      	ldr	r3, [r7, #24]
 80222c2:	2200      	movs	r2, #0
 80222c4:	749a      	strb	r2, [r3, #18]
 80222c6:	2200      	movs	r2, #0
 80222c8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80222ca:	6838      	ldr	r0, [r7, #0]
 80222cc:	f7f8 f9d0 	bl	801a670 <ip4_route>
 80222d0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80222d2:	697b      	ldr	r3, [r7, #20]
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	d00b      	beq.n	80222f0 <tcp_rst+0xcc>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80222d8:	697b      	ldr	r3, [r7, #20]
 80222da:	9302      	str	r3, [sp, #8]
 80222dc:	2306      	movs	r3, #6
 80222de:	9301      	str	r3, [sp, #4]
 80222e0:	2300      	movs	r3, #0
 80222e2:	9300      	str	r3, [sp, #0]
 80222e4:	23ff      	movs	r3, #255	; 0xff
 80222e6:	683a      	ldr	r2, [r7, #0]
 80222e8:	6879      	ldr	r1, [r7, #4]
 80222ea:	69f8      	ldr	r0, [r7, #28]
 80222ec:	f7f8 fb5c 	bl	801a9a8 <ip4_output_if>
  }
  pbuf_free(p);
 80222f0:	69f8      	ldr	r0, [r7, #28]
 80222f2:	f7fa fd5b 	bl	801cdac <pbuf_free>
 80222f6:	e000      	b.n	80222fa <tcp_rst+0xd6>
    return;
 80222f8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80222fa:	3720      	adds	r7, #32
 80222fc:	46bd      	mov	sp, r7
 80222fe:	bd80      	pop	{r7, pc}
 8022300:	08028b04 	.word	0x08028b04
 8022304:	08028b38 	.word	0x08028b38
 8022308:	08028b68 	.word	0x08028b68

0802230c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 802230c:	b580      	push	{r7, lr}
 802230e:	b084      	sub	sp, #16
 8022310:	af00      	add	r7, sp, #0
 8022312:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8022314:	687b      	ldr	r3, [r7, #4]
 8022316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022318:	2b00      	cmp	r3, #0
 802231a:	d029      	beq.n	8022370 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 802231c:	687b      	ldr	r3, [r7, #4]
 802231e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022320:	60fb      	str	r3, [r7, #12]
 8022322:	e002      	b.n	802232a <tcp_rexmit_rto+0x1e>
 8022324:	68fb      	ldr	r3, [r7, #12]
 8022326:	681b      	ldr	r3, [r3, #0]
 8022328:	60fb      	str	r3, [r7, #12]
 802232a:	68fb      	ldr	r3, [r7, #12]
 802232c:	681b      	ldr	r3, [r3, #0]
 802232e:	2b00      	cmp	r3, #0
 8022330:	d1f8      	bne.n	8022324 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8022336:	68fb      	ldr	r3, [r7, #12]
 8022338:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	2200      	movs	r2, #0
 8022346:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8022348:	687b      	ldr	r3, [r7, #4]
 802234a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802234e:	2bff      	cmp	r3, #255	; 0xff
 8022350:	d007      	beq.n	8022362 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8022352:	687b      	ldr	r3, [r7, #4]
 8022354:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022358:	3301      	adds	r3, #1
 802235a:	b2da      	uxtb	r2, r3
 802235c:	687b      	ldr	r3, [r7, #4]
 802235e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8022362:	687b      	ldr	r3, [r7, #4]
 8022364:	2200      	movs	r2, #0
 8022366:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8022368:	6878      	ldr	r0, [r7, #4]
 802236a:	f7ff fcd3 	bl	8021d14 <tcp_output>
 802236e:	e000      	b.n	8022372 <tcp_rexmit_rto+0x66>
    return;
 8022370:	bf00      	nop
}
 8022372:	3710      	adds	r7, #16
 8022374:	46bd      	mov	sp, r7
 8022376:	bd80      	pop	{r7, pc}

08022378 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8022378:	b590      	push	{r4, r7, lr}
 802237a:	b085      	sub	sp, #20
 802237c:	af00      	add	r7, sp, #0
 802237e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022384:	2b00      	cmp	r3, #0
 8022386:	d043      	beq.n	8022410 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8022388:	687b      	ldr	r3, [r7, #4]
 802238a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802238c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 802238e:	68bb      	ldr	r3, [r7, #8]
 8022390:	681a      	ldr	r2, [r3, #0]
 8022392:	687b      	ldr	r3, [r7, #4]
 8022394:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8022396:	687b      	ldr	r3, [r7, #4]
 8022398:	3368      	adds	r3, #104	; 0x68
 802239a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 802239c:	e002      	b.n	80223a4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 802239e:	68fb      	ldr	r3, [r7, #12]
 80223a0:	681b      	ldr	r3, [r3, #0]
 80223a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80223a4:	68fb      	ldr	r3, [r7, #12]
 80223a6:	681b      	ldr	r3, [r3, #0]
 80223a8:	2b00      	cmp	r3, #0
 80223aa:	d011      	beq.n	80223d0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80223ac:	68fb      	ldr	r3, [r7, #12]
 80223ae:	681b      	ldr	r3, [r3, #0]
 80223b0:	68db      	ldr	r3, [r3, #12]
 80223b2:	685b      	ldr	r3, [r3, #4]
 80223b4:	4618      	mov	r0, r3
 80223b6:	f7f7 f889 	bl	80194cc <lwip_htonl>
 80223ba:	4604      	mov	r4, r0
 80223bc:	68bb      	ldr	r3, [r7, #8]
 80223be:	68db      	ldr	r3, [r3, #12]
 80223c0:	685b      	ldr	r3, [r3, #4]
 80223c2:	4618      	mov	r0, r3
 80223c4:	f7f7 f882 	bl	80194cc <lwip_htonl>
 80223c8:	4603      	mov	r3, r0
 80223ca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80223cc:	2b00      	cmp	r3, #0
 80223ce:	dbe6      	blt.n	802239e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80223d0:	68fb      	ldr	r3, [r7, #12]
 80223d2:	681a      	ldr	r2, [r3, #0]
 80223d4:	68bb      	ldr	r3, [r7, #8]
 80223d6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80223d8:	68fb      	ldr	r3, [r7, #12]
 80223da:	68ba      	ldr	r2, [r7, #8]
 80223dc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80223de:	68bb      	ldr	r3, [r7, #8]
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	2b00      	cmp	r3, #0
 80223e4:	d103      	bne.n	80223ee <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	2200      	movs	r2, #0
 80223ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80223ee:	687b      	ldr	r3, [r7, #4]
 80223f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80223f4:	2bff      	cmp	r3, #255	; 0xff
 80223f6:	d007      	beq.n	8022408 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80223fe:	3301      	adds	r3, #1
 8022400:	b2da      	uxtb	r2, r3
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	2200      	movs	r2, #0
 802240c:	635a      	str	r2, [r3, #52]	; 0x34
 802240e:	e000      	b.n	8022412 <tcp_rexmit+0x9a>
    return;
 8022410:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8022412:	3714      	adds	r7, #20
 8022414:	46bd      	mov	sp, r7
 8022416:	bd90      	pop	{r4, r7, pc}

08022418 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8022418:	b580      	push	{r7, lr}
 802241a:	b082      	sub	sp, #8
 802241c:	af00      	add	r7, sp, #0
 802241e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022424:	2b00      	cmp	r3, #0
 8022426:	d04a      	beq.n	80224be <tcp_rexmit_fast+0xa6>
 8022428:	687b      	ldr	r3, [r7, #4]
 802242a:	7e9b      	ldrb	r3, [r3, #26]
 802242c:	f003 0304 	and.w	r3, r3, #4
 8022430:	2b00      	cmp	r3, #0
 8022432:	d144      	bne.n	80224be <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8022434:	6878      	ldr	r0, [r7, #4]
 8022436:	f7ff ff9f 	bl	8022378 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 802243a:	687b      	ldr	r3, [r7, #4]
 802243c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8022446:	429a      	cmp	r2, r3
 8022448:	d207      	bcs.n	802245a <tcp_rexmit_fast+0x42>
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8022450:	0fda      	lsrs	r2, r3, #31
 8022452:	4413      	add	r3, r2
 8022454:	105b      	asrs	r3, r3, #1
 8022456:	b29b      	uxth	r3, r3
 8022458:	e006      	b.n	8022468 <tcp_rexmit_fast+0x50>
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8022460:	0fda      	lsrs	r2, r3, #31
 8022462:	4413      	add	r3, r2
 8022464:	105b      	asrs	r3, r3, #1
 8022466:	b29b      	uxth	r3, r3
 8022468:	687a      	ldr	r2, [r7, #4]
 802246a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8022474:	461a      	mov	r2, r3
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802247a:	005b      	lsls	r3, r3, #1
 802247c:	429a      	cmp	r2, r3
 802247e:	d206      	bcs.n	802248e <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022484:	005b      	lsls	r3, r3, #1
 8022486:	b29a      	uxth	r2, r3
 8022488:	687b      	ldr	r3, [r7, #4]
 802248a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022498:	4619      	mov	r1, r3
 802249a:	0049      	lsls	r1, r1, #1
 802249c:	440b      	add	r3, r1
 802249e:	b29b      	uxth	r3, r3
 80224a0:	4413      	add	r3, r2
 80224a2:	b29a      	uxth	r2, r3
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80224aa:	687b      	ldr	r3, [r7, #4]
 80224ac:	7e9b      	ldrb	r3, [r3, #26]
 80224ae:	f043 0304 	orr.w	r3, r3, #4
 80224b2:	b2da      	uxtb	r2, r3
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80224b8:	687b      	ldr	r3, [r7, #4]
 80224ba:	2200      	movs	r2, #0
 80224bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80224be:	bf00      	nop
 80224c0:	3708      	adds	r7, #8
 80224c2:	46bd      	mov	sp, r7
 80224c4:	bd80      	pop	{r7, pc}

080224c6 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80224c6:	b580      	push	{r7, lr}
 80224c8:	b08a      	sub	sp, #40	; 0x28
 80224ca:	af04      	add	r7, sp, #16
 80224cc:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80224d2:	3b01      	subs	r3, #1
 80224d4:	4618      	mov	r0, r3
 80224d6:	f7f6 fff9 	bl	80194cc <lwip_htonl>
 80224da:	4603      	mov	r3, r0
 80224dc:	2200      	movs	r2, #0
 80224de:	2100      	movs	r1, #0
 80224e0:	6878      	ldr	r0, [r7, #4]
 80224e2:	f7fe fd45 	bl	8020f70 <tcp_output_alloc_header>
 80224e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80224e8:	693b      	ldr	r3, [r7, #16]
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	d102      	bne.n	80224f4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80224ee:	f04f 33ff 	mov.w	r3, #4294967295
 80224f2:	e021      	b.n	8022538 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	3304      	adds	r3, #4
 80224f8:	4618      	mov	r0, r3
 80224fa:	f7f8 f8b9 	bl	801a670 <ip4_route>
 80224fe:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8022500:	68fb      	ldr	r3, [r7, #12]
 8022502:	2b00      	cmp	r3, #0
 8022504:	d102      	bne.n	802250c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8022506:	23fc      	movs	r3, #252	; 0xfc
 8022508:	75fb      	strb	r3, [r7, #23]
 802250a:	e010      	b.n	802252e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 802250c:	6879      	ldr	r1, [r7, #4]
 802250e:	687b      	ldr	r3, [r7, #4]
 8022510:	1d1a      	adds	r2, r3, #4
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	7a98      	ldrb	r0, [r3, #10]
 8022516:	68fb      	ldr	r3, [r7, #12]
 8022518:	9302      	str	r3, [sp, #8]
 802251a:	2306      	movs	r3, #6
 802251c:	9301      	str	r3, [sp, #4]
 802251e:	2300      	movs	r3, #0
 8022520:	9300      	str	r3, [sp, #0]
 8022522:	4603      	mov	r3, r0
 8022524:	6938      	ldr	r0, [r7, #16]
 8022526:	f7f8 fa3f 	bl	801a9a8 <ip4_output_if>
 802252a:	4603      	mov	r3, r0
 802252c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 802252e:	6938      	ldr	r0, [r7, #16]
 8022530:	f7fa fc3c 	bl	801cdac <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8022534:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8022538:	4618      	mov	r0, r3
 802253a:	3718      	adds	r7, #24
 802253c:	46bd      	mov	sp, r7
 802253e:	bd80      	pop	{r7, pc}

08022540 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8022540:	b590      	push	{r4, r7, lr}
 8022542:	b08f      	sub	sp, #60	; 0x3c
 8022544:	af04      	add	r7, sp, #16
 8022546:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802254c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 802254e:	6a3b      	ldr	r3, [r7, #32]
 8022550:	2b00      	cmp	r3, #0
 8022552:	d102      	bne.n	802255a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022558:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 802255a:	6a3b      	ldr	r3, [r7, #32]
 802255c:	2b00      	cmp	r3, #0
 802255e:	d101      	bne.n	8022564 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8022560:	2300      	movs	r3, #0
 8022562:	e085      	b.n	8022670 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8022564:	6a3b      	ldr	r3, [r7, #32]
 8022566:	68db      	ldr	r3, [r3, #12]
 8022568:	899b      	ldrh	r3, [r3, #12]
 802256a:	b29b      	uxth	r3, r3
 802256c:	4618      	mov	r0, r3
 802256e:	f7f6 ff9f 	bl	80194b0 <lwip_htons>
 8022572:	4603      	mov	r3, r0
 8022574:	f003 0301 	and.w	r3, r3, #1
 8022578:	2b00      	cmp	r3, #0
 802257a:	d005      	beq.n	8022588 <tcp_zero_window_probe+0x48>
 802257c:	6a3b      	ldr	r3, [r7, #32]
 802257e:	891b      	ldrh	r3, [r3, #8]
 8022580:	2b00      	cmp	r3, #0
 8022582:	d101      	bne.n	8022588 <tcp_zero_window_probe+0x48>
 8022584:	2301      	movs	r3, #1
 8022586:	e000      	b.n	802258a <tcp_zero_window_probe+0x4a>
 8022588:	2300      	movs	r3, #0
 802258a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 802258c:	7ffb      	ldrb	r3, [r7, #31]
 802258e:	2b00      	cmp	r3, #0
 8022590:	bf0c      	ite	eq
 8022592:	2301      	moveq	r3, #1
 8022594:	2300      	movne	r3, #0
 8022596:	b2db      	uxtb	r3, r3
 8022598:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 802259a:	6a3b      	ldr	r3, [r7, #32]
 802259c:	68db      	ldr	r3, [r3, #12]
 802259e:	685b      	ldr	r3, [r3, #4]
 80225a0:	8bba      	ldrh	r2, [r7, #28]
 80225a2:	2100      	movs	r1, #0
 80225a4:	6878      	ldr	r0, [r7, #4]
 80225a6:	f7fe fce3 	bl	8020f70 <tcp_output_alloc_header>
 80225aa:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80225ac:	69bb      	ldr	r3, [r7, #24]
 80225ae:	2b00      	cmp	r3, #0
 80225b0:	d102      	bne.n	80225b8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80225b2:	f04f 33ff 	mov.w	r3, #4294967295
 80225b6:	e05b      	b.n	8022670 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80225b8:	69bb      	ldr	r3, [r7, #24]
 80225ba:	685b      	ldr	r3, [r3, #4]
 80225bc:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80225be:	7ffb      	ldrb	r3, [r7, #31]
 80225c0:	2b00      	cmp	r3, #0
 80225c2:	d00e      	beq.n	80225e2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80225c4:	697b      	ldr	r3, [r7, #20]
 80225c6:	899b      	ldrh	r3, [r3, #12]
 80225c8:	b29b      	uxth	r3, r3
 80225ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80225ce:	b29c      	uxth	r4, r3
 80225d0:	2011      	movs	r0, #17
 80225d2:	f7f6 ff6d 	bl	80194b0 <lwip_htons>
 80225d6:	4603      	mov	r3, r0
 80225d8:	4323      	orrs	r3, r4
 80225da:	b29a      	uxth	r2, r3
 80225dc:	697b      	ldr	r3, [r7, #20]
 80225de:	819a      	strh	r2, [r3, #12]
 80225e0:	e010      	b.n	8022604 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80225e2:	69bb      	ldr	r3, [r7, #24]
 80225e4:	685b      	ldr	r3, [r3, #4]
 80225e6:	3314      	adds	r3, #20
 80225e8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80225ea:	6a3b      	ldr	r3, [r7, #32]
 80225ec:	6858      	ldr	r0, [r3, #4]
 80225ee:	6a3b      	ldr	r3, [r7, #32]
 80225f0:	685b      	ldr	r3, [r3, #4]
 80225f2:	891a      	ldrh	r2, [r3, #8]
 80225f4:	6a3b      	ldr	r3, [r7, #32]
 80225f6:	891b      	ldrh	r3, [r3, #8]
 80225f8:	1ad3      	subs	r3, r2, r3
 80225fa:	b29b      	uxth	r3, r3
 80225fc:	2201      	movs	r2, #1
 80225fe:	6939      	ldr	r1, [r7, #16]
 8022600:	f7fa fdd0 	bl	801d1a4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8022604:	6a3b      	ldr	r3, [r7, #32]
 8022606:	68db      	ldr	r3, [r3, #12]
 8022608:	685b      	ldr	r3, [r3, #4]
 802260a:	4618      	mov	r0, r3
 802260c:	f7f6 ff5e 	bl	80194cc <lwip_htonl>
 8022610:	4603      	mov	r3, r0
 8022612:	3301      	adds	r3, #1
 8022614:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802261a:	68fb      	ldr	r3, [r7, #12]
 802261c:	1ad3      	subs	r3, r2, r3
 802261e:	2b00      	cmp	r3, #0
 8022620:	da02      	bge.n	8022628 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	68fa      	ldr	r2, [r7, #12]
 8022626:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8022628:	687b      	ldr	r3, [r7, #4]
 802262a:	3304      	adds	r3, #4
 802262c:	4618      	mov	r0, r3
 802262e:	f7f8 f81f 	bl	801a670 <ip4_route>
 8022632:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8022634:	68bb      	ldr	r3, [r7, #8]
 8022636:	2b00      	cmp	r3, #0
 8022638:	d103      	bne.n	8022642 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 802263a:	23fc      	movs	r3, #252	; 0xfc
 802263c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022640:	e011      	b.n	8022666 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8022642:	6879      	ldr	r1, [r7, #4]
 8022644:	687b      	ldr	r3, [r7, #4]
 8022646:	1d1a      	adds	r2, r3, #4
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	7a98      	ldrb	r0, [r3, #10]
 802264c:	68bb      	ldr	r3, [r7, #8]
 802264e:	9302      	str	r3, [sp, #8]
 8022650:	2306      	movs	r3, #6
 8022652:	9301      	str	r3, [sp, #4]
 8022654:	2300      	movs	r3, #0
 8022656:	9300      	str	r3, [sp, #0]
 8022658:	4603      	mov	r3, r0
 802265a:	69b8      	ldr	r0, [r7, #24]
 802265c:	f7f8 f9a4 	bl	801a9a8 <ip4_output_if>
 8022660:	4603      	mov	r3, r0
 8022662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8022666:	69b8      	ldr	r0, [r7, #24]
 8022668:	f7fa fba0 	bl	801cdac <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 802266c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8022670:	4618      	mov	r0, r3
 8022672:	372c      	adds	r7, #44	; 0x2c
 8022674:	46bd      	mov	sp, r7
 8022676:	bd90      	pop	{r4, r7, pc}

08022678 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8022678:	b580      	push	{r7, lr}
 802267a:	b082      	sub	sp, #8
 802267c:	af00      	add	r7, sp, #0
 802267e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8022680:	f7fa fe12 	bl	801d2a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8022684:	4b0a      	ldr	r3, [pc, #40]	; (80226b0 <tcpip_tcp_timer+0x38>)
 8022686:	681b      	ldr	r3, [r3, #0]
 8022688:	2b00      	cmp	r3, #0
 802268a:	d103      	bne.n	8022694 <tcpip_tcp_timer+0x1c>
 802268c:	4b09      	ldr	r3, [pc, #36]	; (80226b4 <tcpip_tcp_timer+0x3c>)
 802268e:	681b      	ldr	r3, [r3, #0]
 8022690:	2b00      	cmp	r3, #0
 8022692:	d005      	beq.n	80226a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8022694:	2200      	movs	r2, #0
 8022696:	4908      	ldr	r1, [pc, #32]	; (80226b8 <tcpip_tcp_timer+0x40>)
 8022698:	20fa      	movs	r0, #250	; 0xfa
 802269a:	f000 f86f 	bl	802277c <sys_timeout>
 802269e:	e002      	b.n	80226a6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80226a0:	4b06      	ldr	r3, [pc, #24]	; (80226bc <tcpip_tcp_timer+0x44>)
 80226a2:	2200      	movs	r2, #0
 80226a4:	601a      	str	r2, [r3, #0]
  }
}
 80226a6:	bf00      	nop
 80226a8:	3708      	adds	r7, #8
 80226aa:	46bd      	mov	sp, r7
 80226ac:	bd80      	pop	{r7, pc}
 80226ae:	bf00      	nop
 80226b0:	2000ecc4 	.word	0x2000ecc4
 80226b4:	2000ecd4 	.word	0x2000ecd4
 80226b8:	08022679 	.word	0x08022679
 80226bc:	20009528 	.word	0x20009528

080226c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80226c0:	b580      	push	{r7, lr}
 80226c2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80226c4:	4b0a      	ldr	r3, [pc, #40]	; (80226f0 <tcp_timer_needed+0x30>)
 80226c6:	681b      	ldr	r3, [r3, #0]
 80226c8:	2b00      	cmp	r3, #0
 80226ca:	d10f      	bne.n	80226ec <tcp_timer_needed+0x2c>
 80226cc:	4b09      	ldr	r3, [pc, #36]	; (80226f4 <tcp_timer_needed+0x34>)
 80226ce:	681b      	ldr	r3, [r3, #0]
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	d103      	bne.n	80226dc <tcp_timer_needed+0x1c>
 80226d4:	4b08      	ldr	r3, [pc, #32]	; (80226f8 <tcp_timer_needed+0x38>)
 80226d6:	681b      	ldr	r3, [r3, #0]
 80226d8:	2b00      	cmp	r3, #0
 80226da:	d007      	beq.n	80226ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80226dc:	4b04      	ldr	r3, [pc, #16]	; (80226f0 <tcp_timer_needed+0x30>)
 80226de:	2201      	movs	r2, #1
 80226e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80226e2:	2200      	movs	r2, #0
 80226e4:	4905      	ldr	r1, [pc, #20]	; (80226fc <tcp_timer_needed+0x3c>)
 80226e6:	20fa      	movs	r0, #250	; 0xfa
 80226e8:	f000 f848 	bl	802277c <sys_timeout>
  }
}
 80226ec:	bf00      	nop
 80226ee:	bd80      	pop	{r7, pc}
 80226f0:	20009528 	.word	0x20009528
 80226f4:	2000ecc4 	.word	0x2000ecc4
 80226f8:	2000ecd4 	.word	0x2000ecd4
 80226fc:	08022679 	.word	0x08022679

08022700 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8022700:	b580      	push	{r7, lr}
 8022702:	b084      	sub	sp, #16
 8022704:	af00      	add	r7, sp, #0
 8022706:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 802270c:	68fb      	ldr	r3, [r7, #12]
 802270e:	685b      	ldr	r3, [r3, #4]
 8022710:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8022712:	68fb      	ldr	r3, [r7, #12]
 8022714:	681b      	ldr	r3, [r3, #0]
 8022716:	687a      	ldr	r2, [r7, #4]
 8022718:	4903      	ldr	r1, [pc, #12]	; (8022728 <cyclic_timer+0x28>)
 802271a:	4618      	mov	r0, r3
 802271c:	f000 f82e 	bl	802277c <sys_timeout>
}
 8022720:	bf00      	nop
 8022722:	3710      	adds	r7, #16
 8022724:	46bd      	mov	sp, r7
 8022726:	bd80      	pop	{r7, pc}
 8022728:	08022701 	.word	0x08022701

0802272c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 802272c:	b580      	push	{r7, lr}
 802272e:	b082      	sub	sp, #8
 8022730:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8022732:	2301      	movs	r3, #1
 8022734:	607b      	str	r3, [r7, #4]
 8022736:	e00e      	b.n	8022756 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8022738:	4a0d      	ldr	r2, [pc, #52]	; (8022770 <sys_timeouts_init+0x44>)
 802273a:	687b      	ldr	r3, [r7, #4]
 802273c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	00db      	lsls	r3, r3, #3
 8022744:	4a0a      	ldr	r2, [pc, #40]	; (8022770 <sys_timeouts_init+0x44>)
 8022746:	4413      	add	r3, r2
 8022748:	461a      	mov	r2, r3
 802274a:	490a      	ldr	r1, [pc, #40]	; (8022774 <sys_timeouts_init+0x48>)
 802274c:	f000 f816 	bl	802277c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8022750:	687b      	ldr	r3, [r7, #4]
 8022752:	3301      	adds	r3, #1
 8022754:	607b      	str	r3, [r7, #4]
 8022756:	687b      	ldr	r3, [r7, #4]
 8022758:	2b02      	cmp	r3, #2
 802275a:	d9ed      	bls.n	8022738 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 802275c:	f001 fc54 	bl	8024008 <sys_now>
 8022760:	4602      	mov	r2, r0
 8022762:	4b05      	ldr	r3, [pc, #20]	; (8022778 <sys_timeouts_init+0x4c>)
 8022764:	601a      	str	r2, [r3, #0]
}
 8022766:	bf00      	nop
 8022768:	3708      	adds	r7, #8
 802276a:	46bd      	mov	sp, r7
 802276c:	bd80      	pop	{r7, pc}
 802276e:	bf00      	nop
 8022770:	0802b6d4 	.word	0x0802b6d4
 8022774:	08022701 	.word	0x08022701
 8022778:	20009524 	.word	0x20009524

0802277c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 802277c:	b580      	push	{r7, lr}
 802277e:	b088      	sub	sp, #32
 8022780:	af00      	add	r7, sp, #0
 8022782:	60f8      	str	r0, [r7, #12]
 8022784:	60b9      	str	r1, [r7, #8]
 8022786:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8022788:	2009      	movs	r0, #9
 802278a:	f7f9 fd6b 	bl	801c264 <memp_malloc>
 802278e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8022790:	697b      	ldr	r3, [r7, #20]
 8022792:	2b00      	cmp	r3, #0
 8022794:	d10a      	bne.n	80227ac <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8022796:	697b      	ldr	r3, [r7, #20]
 8022798:	2b00      	cmp	r3, #0
 802279a:	f040 8084 	bne.w	80228a6 <sys_timeout+0x12a>
 802279e:	4b44      	ldr	r3, [pc, #272]	; (80228b0 <sys_timeout+0x134>)
 80227a0:	22d4      	movs	r2, #212	; 0xd4
 80227a2:	4944      	ldr	r1, [pc, #272]	; (80228b4 <sys_timeout+0x138>)
 80227a4:	4844      	ldr	r0, [pc, #272]	; (80228b8 <sys_timeout+0x13c>)
 80227a6:	f003 fb9f 	bl	8025ee8 <iprintf>
    return;
 80227aa:	e07c      	b.n	80228a6 <sys_timeout+0x12a>
  }

  now = sys_now();
 80227ac:	f001 fc2c 	bl	8024008 <sys_now>
 80227b0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 80227b2:	4b42      	ldr	r3, [pc, #264]	; (80228bc <sys_timeout+0x140>)
 80227b4:	681b      	ldr	r3, [r3, #0]
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	d105      	bne.n	80227c6 <sys_timeout+0x4a>
    diff = 0;
 80227ba:	2300      	movs	r3, #0
 80227bc:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 80227be:	4a40      	ldr	r2, [pc, #256]	; (80228c0 <sys_timeout+0x144>)
 80227c0:	693b      	ldr	r3, [r7, #16]
 80227c2:	6013      	str	r3, [r2, #0]
 80227c4:	e004      	b.n	80227d0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 80227c6:	4b3e      	ldr	r3, [pc, #248]	; (80228c0 <sys_timeout+0x144>)
 80227c8:	681b      	ldr	r3, [r3, #0]
 80227ca:	693a      	ldr	r2, [r7, #16]
 80227cc:	1ad3      	subs	r3, r2, r3
 80227ce:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 80227d0:	697b      	ldr	r3, [r7, #20]
 80227d2:	2200      	movs	r2, #0
 80227d4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80227d6:	697b      	ldr	r3, [r7, #20]
 80227d8:	68ba      	ldr	r2, [r7, #8]
 80227da:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80227dc:	697b      	ldr	r3, [r7, #20]
 80227de:	687a      	ldr	r2, [r7, #4]
 80227e0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80227e2:	68fa      	ldr	r2, [r7, #12]
 80227e4:	69bb      	ldr	r3, [r7, #24]
 80227e6:	441a      	add	r2, r3
 80227e8:	697b      	ldr	r3, [r7, #20]
 80227ea:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80227ec:	4b33      	ldr	r3, [pc, #204]	; (80228bc <sys_timeout+0x140>)
 80227ee:	681b      	ldr	r3, [r3, #0]
 80227f0:	2b00      	cmp	r3, #0
 80227f2:	d103      	bne.n	80227fc <sys_timeout+0x80>
    next_timeout = timeout;
 80227f4:	4a31      	ldr	r2, [pc, #196]	; (80228bc <sys_timeout+0x140>)
 80227f6:	697b      	ldr	r3, [r7, #20]
 80227f8:	6013      	str	r3, [r2, #0]
    return;
 80227fa:	e055      	b.n	80228a8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80227fc:	4b2f      	ldr	r3, [pc, #188]	; (80228bc <sys_timeout+0x140>)
 80227fe:	681b      	ldr	r3, [r3, #0]
 8022800:	685a      	ldr	r2, [r3, #4]
 8022802:	68fb      	ldr	r3, [r7, #12]
 8022804:	429a      	cmp	r2, r3
 8022806:	d90f      	bls.n	8022828 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8022808:	4b2c      	ldr	r3, [pc, #176]	; (80228bc <sys_timeout+0x140>)
 802280a:	681b      	ldr	r3, [r3, #0]
 802280c:	4a2b      	ldr	r2, [pc, #172]	; (80228bc <sys_timeout+0x140>)
 802280e:	6812      	ldr	r2, [r2, #0]
 8022810:	6851      	ldr	r1, [r2, #4]
 8022812:	68fa      	ldr	r2, [r7, #12]
 8022814:	1a8a      	subs	r2, r1, r2
 8022816:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8022818:	4b28      	ldr	r3, [pc, #160]	; (80228bc <sys_timeout+0x140>)
 802281a:	681a      	ldr	r2, [r3, #0]
 802281c:	697b      	ldr	r3, [r7, #20]
 802281e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8022820:	4a26      	ldr	r2, [pc, #152]	; (80228bc <sys_timeout+0x140>)
 8022822:	697b      	ldr	r3, [r7, #20]
 8022824:	6013      	str	r3, [r2, #0]
 8022826:	e03f      	b.n	80228a8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8022828:	4b24      	ldr	r3, [pc, #144]	; (80228bc <sys_timeout+0x140>)
 802282a:	681b      	ldr	r3, [r3, #0]
 802282c:	61fb      	str	r3, [r7, #28]
 802282e:	e036      	b.n	802289e <sys_timeout+0x122>
      timeout->time -= t->time;
 8022830:	697b      	ldr	r3, [r7, #20]
 8022832:	685a      	ldr	r2, [r3, #4]
 8022834:	69fb      	ldr	r3, [r7, #28]
 8022836:	685b      	ldr	r3, [r3, #4]
 8022838:	1ad2      	subs	r2, r2, r3
 802283a:	697b      	ldr	r3, [r7, #20]
 802283c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 802283e:	69fb      	ldr	r3, [r7, #28]
 8022840:	681b      	ldr	r3, [r3, #0]
 8022842:	2b00      	cmp	r3, #0
 8022844:	d006      	beq.n	8022854 <sys_timeout+0xd8>
 8022846:	69fb      	ldr	r3, [r7, #28]
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	685a      	ldr	r2, [r3, #4]
 802284c:	697b      	ldr	r3, [r7, #20]
 802284e:	685b      	ldr	r3, [r3, #4]
 8022850:	429a      	cmp	r2, r3
 8022852:	d921      	bls.n	8022898 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8022854:	69fb      	ldr	r3, [r7, #28]
 8022856:	681b      	ldr	r3, [r3, #0]
 8022858:	2b00      	cmp	r3, #0
 802285a:	d009      	beq.n	8022870 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 802285c:	69fb      	ldr	r3, [r7, #28]
 802285e:	681b      	ldr	r3, [r3, #0]
 8022860:	69fa      	ldr	r2, [r7, #28]
 8022862:	6812      	ldr	r2, [r2, #0]
 8022864:	6851      	ldr	r1, [r2, #4]
 8022866:	697a      	ldr	r2, [r7, #20]
 8022868:	6852      	ldr	r2, [r2, #4]
 802286a:	1a8a      	subs	r2, r1, r2
 802286c:	605a      	str	r2, [r3, #4]
 802286e:	e00b      	b.n	8022888 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8022870:	697b      	ldr	r3, [r7, #20]
 8022872:	685a      	ldr	r2, [r3, #4]
 8022874:	68fb      	ldr	r3, [r7, #12]
 8022876:	429a      	cmp	r2, r3
 8022878:	d906      	bls.n	8022888 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 802287a:	4b10      	ldr	r3, [pc, #64]	; (80228bc <sys_timeout+0x140>)
 802287c:	681b      	ldr	r3, [r3, #0]
 802287e:	685a      	ldr	r2, [r3, #4]
 8022880:	68fb      	ldr	r3, [r7, #12]
 8022882:	441a      	add	r2, r3
 8022884:	697b      	ldr	r3, [r7, #20]
 8022886:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8022888:	69fb      	ldr	r3, [r7, #28]
 802288a:	681a      	ldr	r2, [r3, #0]
 802288c:	697b      	ldr	r3, [r7, #20]
 802288e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8022890:	69fb      	ldr	r3, [r7, #28]
 8022892:	697a      	ldr	r2, [r7, #20]
 8022894:	601a      	str	r2, [r3, #0]
        break;
 8022896:	e007      	b.n	80228a8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8022898:	69fb      	ldr	r3, [r7, #28]
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	61fb      	str	r3, [r7, #28]
 802289e:	69fb      	ldr	r3, [r7, #28]
 80228a0:	2b00      	cmp	r3, #0
 80228a2:	d1c5      	bne.n	8022830 <sys_timeout+0xb4>
 80228a4:	e000      	b.n	80228a8 <sys_timeout+0x12c>
    return;
 80228a6:	bf00      	nop
      }
    }
  }
}
 80228a8:	3720      	adds	r7, #32
 80228aa:	46bd      	mov	sp, r7
 80228ac:	bd80      	pop	{r7, pc}
 80228ae:	bf00      	nop
 80228b0:	08028f48 	.word	0x08028f48
 80228b4:	08028f7c 	.word	0x08028f7c
 80228b8:	08028fbc 	.word	0x08028fbc
 80228bc:	20009520 	.word	0x20009520
 80228c0:	20009524 	.word	0x20009524

080228c4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 80228c4:	b580      	push	{r7, lr}
 80228c6:	b086      	sub	sp, #24
 80228c8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 80228ca:	4b24      	ldr	r3, [pc, #144]	; (802295c <sys_check_timeouts+0x98>)
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	d03f      	beq.n	8022952 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 80228d2:	f001 fb99 	bl	8024008 <sys_now>
 80228d6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80228d8:	4b21      	ldr	r3, [pc, #132]	; (8022960 <sys_check_timeouts+0x9c>)
 80228da:	681b      	ldr	r3, [r3, #0]
 80228dc:	68fa      	ldr	r2, [r7, #12]
 80228de:	1ad3      	subs	r3, r2, r3
 80228e0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 80228e2:	2300      	movs	r3, #0
 80228e4:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80228e6:	4b1d      	ldr	r3, [pc, #116]	; (802295c <sys_check_timeouts+0x98>)
 80228e8:	681b      	ldr	r3, [r3, #0]
 80228ea:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80228ec:	68bb      	ldr	r3, [r7, #8]
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	d02c      	beq.n	802294c <sys_check_timeouts+0x88>
 80228f2:	68bb      	ldr	r3, [r7, #8]
 80228f4:	685a      	ldr	r2, [r3, #4]
 80228f6:	697b      	ldr	r3, [r7, #20]
 80228f8:	429a      	cmp	r2, r3
 80228fa:	d827      	bhi.n	802294c <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 80228fc:	2301      	movs	r3, #1
 80228fe:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8022900:	68bb      	ldr	r3, [r7, #8]
 8022902:	685a      	ldr	r2, [r3, #4]
 8022904:	4b16      	ldr	r3, [pc, #88]	; (8022960 <sys_check_timeouts+0x9c>)
 8022906:	681b      	ldr	r3, [r3, #0]
 8022908:	4413      	add	r3, r2
 802290a:	4a15      	ldr	r2, [pc, #84]	; (8022960 <sys_check_timeouts+0x9c>)
 802290c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 802290e:	68bb      	ldr	r3, [r7, #8]
 8022910:	685b      	ldr	r3, [r3, #4]
 8022912:	697a      	ldr	r2, [r7, #20]
 8022914:	1ad3      	subs	r3, r2, r3
 8022916:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8022918:	68bb      	ldr	r3, [r7, #8]
 802291a:	681b      	ldr	r3, [r3, #0]
 802291c:	4a0f      	ldr	r2, [pc, #60]	; (802295c <sys_check_timeouts+0x98>)
 802291e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8022920:	68bb      	ldr	r3, [r7, #8]
 8022922:	689b      	ldr	r3, [r3, #8]
 8022924:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8022926:	68bb      	ldr	r3, [r7, #8]
 8022928:	68db      	ldr	r3, [r3, #12]
 802292a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 802292c:	68b9      	ldr	r1, [r7, #8]
 802292e:	2009      	movs	r0, #9
 8022930:	f7f9 fcea 	bl	801c308 <memp_free>
        if (handler != NULL) {
 8022934:	687b      	ldr	r3, [r7, #4]
 8022936:	2b00      	cmp	r3, #0
 8022938:	d008      	beq.n	802294c <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 802293a:	480a      	ldr	r0, [pc, #40]	; (8022964 <sys_check_timeouts+0xa0>)
 802293c:	f000 fad2 	bl	8022ee4 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	6838      	ldr	r0, [r7, #0]
 8022944:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8022946:	4807      	ldr	r0, [pc, #28]	; (8022964 <sys_check_timeouts+0xa0>)
 8022948:	f000 fadb 	bl	8022f02 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 802294c:	7cfb      	ldrb	r3, [r7, #19]
 802294e:	2b00      	cmp	r3, #0
 8022950:	d1c7      	bne.n	80228e2 <sys_check_timeouts+0x1e>
  }
}
 8022952:	bf00      	nop
 8022954:	3718      	adds	r7, #24
 8022956:	46bd      	mov	sp, r7
 8022958:	bd80      	pop	{r7, pc}
 802295a:	bf00      	nop
 802295c:	20009520 	.word	0x20009520
 8022960:	20009524 	.word	0x20009524
 8022964:	2000a25c 	.word	0x2000a25c

08022968 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8022968:	b580      	push	{r7, lr}
 802296a:	b082      	sub	sp, #8
 802296c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 802296e:	4b0f      	ldr	r3, [pc, #60]	; (80229ac <sys_timeouts_sleeptime+0x44>)
 8022970:	681b      	ldr	r3, [r3, #0]
 8022972:	2b00      	cmp	r3, #0
 8022974:	d102      	bne.n	802297c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8022976:	f04f 33ff 	mov.w	r3, #4294967295
 802297a:	e013      	b.n	80229a4 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 802297c:	f001 fb44 	bl	8024008 <sys_now>
 8022980:	4602      	mov	r2, r0
 8022982:	4b0b      	ldr	r3, [pc, #44]	; (80229b0 <sys_timeouts_sleeptime+0x48>)
 8022984:	681b      	ldr	r3, [r3, #0]
 8022986:	1ad3      	subs	r3, r2, r3
 8022988:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 802298a:	4b08      	ldr	r3, [pc, #32]	; (80229ac <sys_timeouts_sleeptime+0x44>)
 802298c:	681b      	ldr	r3, [r3, #0]
 802298e:	685a      	ldr	r2, [r3, #4]
 8022990:	687b      	ldr	r3, [r7, #4]
 8022992:	429a      	cmp	r2, r3
 8022994:	d201      	bcs.n	802299a <sys_timeouts_sleeptime+0x32>
    return 0;
 8022996:	2300      	movs	r3, #0
 8022998:	e004      	b.n	80229a4 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 802299a:	4b04      	ldr	r3, [pc, #16]	; (80229ac <sys_timeouts_sleeptime+0x44>)
 802299c:	681b      	ldr	r3, [r3, #0]
 802299e:	685a      	ldr	r2, [r3, #4]
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	1ad3      	subs	r3, r2, r3
  }
}
 80229a4:	4618      	mov	r0, r3
 80229a6:	3708      	adds	r7, #8
 80229a8:	46bd      	mov	sp, r7
 80229aa:	bd80      	pop	{r7, pc}
 80229ac:	20009520 	.word	0x20009520
 80229b0:	20009524 	.word	0x20009524

080229b4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80229b4:	b580      	push	{r7, lr}
 80229b6:	b084      	sub	sp, #16
 80229b8:	af00      	add	r7, sp, #0
 80229ba:	6078      	str	r0, [r7, #4]
 80229bc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80229be:	4b0f      	ldr	r3, [pc, #60]	; (80229fc <sys_timeouts_mbox_fetch+0x48>)
 80229c0:	681b      	ldr	r3, [r3, #0]
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	d105      	bne.n	80229d2 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80229c6:	2200      	movs	r2, #0
 80229c8:	6839      	ldr	r1, [r7, #0]
 80229ca:	6878      	ldr	r0, [r7, #4]
 80229cc:	f000 f955 	bl	8022c7a <sys_arch_mbox_fetch>
    return;
 80229d0:	e011      	b.n	80229f6 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 80229d2:	f7ff ffc9 	bl	8022968 <sys_timeouts_sleeptime>
 80229d6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80229d8:	68fb      	ldr	r3, [r7, #12]
 80229da:	2b00      	cmp	r3, #0
 80229dc:	d008      	beq.n	80229f0 <sys_timeouts_mbox_fetch+0x3c>
 80229de:	68fa      	ldr	r2, [r7, #12]
 80229e0:	6839      	ldr	r1, [r7, #0]
 80229e2:	6878      	ldr	r0, [r7, #4]
 80229e4:	f000 f949 	bl	8022c7a <sys_arch_mbox_fetch>
 80229e8:	4603      	mov	r3, r0
 80229ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80229ee:	d102      	bne.n	80229f6 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80229f0:	f7ff ff68 	bl	80228c4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80229f4:	e7e3      	b.n	80229be <sys_timeouts_mbox_fetch+0xa>
  }
}
 80229f6:	3710      	adds	r7, #16
 80229f8:	46bd      	mov	sp, r7
 80229fa:	bd80      	pop	{r7, pc}
 80229fc:	20009520 	.word	0x20009520

08022a00 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022a00:	b580      	push	{r7, lr}
 8022a02:	b086      	sub	sp, #24
 8022a04:	af00      	add	r7, sp, #0
 8022a06:	6078      	str	r0, [r7, #4]
 8022a08:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8022a0a:	230e      	movs	r3, #14
 8022a0c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8022a0e:	687b      	ldr	r3, [r7, #4]
 8022a10:	895b      	ldrh	r3, [r3, #10]
 8022a12:	2b0e      	cmp	r3, #14
 8022a14:	d977      	bls.n	8022b06 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8022a16:	687b      	ldr	r3, [r7, #4]
 8022a18:	685b      	ldr	r3, [r3, #4]
 8022a1a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8022a1c:	693b      	ldr	r3, [r7, #16]
 8022a1e:	7b1a      	ldrb	r2, [r3, #12]
 8022a20:	7b5b      	ldrb	r3, [r3, #13]
 8022a22:	021b      	lsls	r3, r3, #8
 8022a24:	4313      	orrs	r3, r2
 8022a26:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8022a28:	693b      	ldr	r3, [r7, #16]
 8022a2a:	781b      	ldrb	r3, [r3, #0]
 8022a2c:	f003 0301 	and.w	r3, r3, #1
 8022a30:	2b00      	cmp	r3, #0
 8022a32:	d023      	beq.n	8022a7c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8022a34:	693b      	ldr	r3, [r7, #16]
 8022a36:	781b      	ldrb	r3, [r3, #0]
 8022a38:	2b01      	cmp	r3, #1
 8022a3a:	d10f      	bne.n	8022a5c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022a3c:	693b      	ldr	r3, [r7, #16]
 8022a3e:	785b      	ldrb	r3, [r3, #1]
 8022a40:	2b00      	cmp	r3, #0
 8022a42:	d11b      	bne.n	8022a7c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8022a44:	693b      	ldr	r3, [r7, #16]
 8022a46:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022a48:	2b5e      	cmp	r3, #94	; 0x5e
 8022a4a:	d117      	bne.n	8022a7c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8022a4c:	687b      	ldr	r3, [r7, #4]
 8022a4e:	7b5b      	ldrb	r3, [r3, #13]
 8022a50:	f043 0310 	orr.w	r3, r3, #16
 8022a54:	b2da      	uxtb	r2, r3
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	735a      	strb	r2, [r3, #13]
 8022a5a:	e00f      	b.n	8022a7c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8022a5c:	693b      	ldr	r3, [r7, #16]
 8022a5e:	2206      	movs	r2, #6
 8022a60:	492f      	ldr	r1, [pc, #188]	; (8022b20 <ethernet_input+0x120>)
 8022a62:	4618      	mov	r0, r3
 8022a64:	f003 ff00 	bl	8026868 <memcmp>
 8022a68:	4603      	mov	r3, r0
 8022a6a:	2b00      	cmp	r3, #0
 8022a6c:	d106      	bne.n	8022a7c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022a6e:	687b      	ldr	r3, [r7, #4]
 8022a70:	7b5b      	ldrb	r3, [r3, #13]
 8022a72:	f043 0308 	orr.w	r3, r3, #8
 8022a76:	b2da      	uxtb	r2, r3
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8022a7c:	89fb      	ldrh	r3, [r7, #14]
 8022a7e:	2b08      	cmp	r3, #8
 8022a80:	d003      	beq.n	8022a8a <ethernet_input+0x8a>
 8022a82:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8022a86:	d01e      	beq.n	8022ac6 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8022a88:	e042      	b.n	8022b10 <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022a8a:	683b      	ldr	r3, [r7, #0]
 8022a8c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8022a90:	f003 0308 	and.w	r3, r3, #8
 8022a94:	2b00      	cmp	r3, #0
 8022a96:	d038      	beq.n	8022b0a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8022a98:	687b      	ldr	r3, [r7, #4]
 8022a9a:	895b      	ldrh	r3, [r3, #10]
 8022a9c:	461a      	mov	r2, r3
 8022a9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022aa2:	429a      	cmp	r2, r3
 8022aa4:	db34      	blt.n	8022b10 <ethernet_input+0x110>
 8022aa6:	8afb      	ldrh	r3, [r7, #22]
 8022aa8:	425b      	negs	r3, r3
 8022aaa:	b29b      	uxth	r3, r3
 8022aac:	b21b      	sxth	r3, r3
 8022aae:	4619      	mov	r1, r3
 8022ab0:	6878      	ldr	r0, [r7, #4]
 8022ab2:	f7fa f957 	bl	801cd64 <pbuf_header>
 8022ab6:	4603      	mov	r3, r0
 8022ab8:	2b00      	cmp	r3, #0
 8022aba:	d129      	bne.n	8022b10 <ethernet_input+0x110>
        ip4_input(p, netif);
 8022abc:	6839      	ldr	r1, [r7, #0]
 8022abe:	6878      	ldr	r0, [r7, #4]
 8022ac0:	f7f7 fe3e 	bl	801a740 <ip4_input>
      break;
 8022ac4:	e01d      	b.n	8022b02 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022ac6:	683b      	ldr	r3, [r7, #0]
 8022ac8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8022acc:	f003 0308 	and.w	r3, r3, #8
 8022ad0:	2b00      	cmp	r3, #0
 8022ad2:	d01c      	beq.n	8022b0e <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	895b      	ldrh	r3, [r3, #10]
 8022ad8:	461a      	mov	r2, r3
 8022ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022ade:	429a      	cmp	r2, r3
 8022ae0:	db16      	blt.n	8022b10 <ethernet_input+0x110>
 8022ae2:	8afb      	ldrh	r3, [r7, #22]
 8022ae4:	425b      	negs	r3, r3
 8022ae6:	b29b      	uxth	r3, r3
 8022ae8:	b21b      	sxth	r3, r3
 8022aea:	4619      	mov	r1, r3
 8022aec:	6878      	ldr	r0, [r7, #4]
 8022aee:	f7fa f939 	bl	801cd64 <pbuf_header>
 8022af2:	4603      	mov	r3, r0
 8022af4:	2b00      	cmp	r3, #0
 8022af6:	d10b      	bne.n	8022b10 <ethernet_input+0x110>
        etharp_input(p, netif);
 8022af8:	6839      	ldr	r1, [r7, #0]
 8022afa:	6878      	ldr	r0, [r7, #4]
 8022afc:	f7f7 f80e 	bl	8019b1c <etharp_input>
      break;
 8022b00:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022b02:	2300      	movs	r3, #0
 8022b04:	e008      	b.n	8022b18 <ethernet_input+0x118>
    goto free_and_return;
 8022b06:	bf00      	nop
 8022b08:	e002      	b.n	8022b10 <ethernet_input+0x110>
        goto free_and_return;
 8022b0a:	bf00      	nop
 8022b0c:	e000      	b.n	8022b10 <ethernet_input+0x110>
        goto free_and_return;
 8022b0e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022b10:	6878      	ldr	r0, [r7, #4]
 8022b12:	f7fa f94b 	bl	801cdac <pbuf_free>
  return ERR_OK;
 8022b16:	2300      	movs	r3, #0
}
 8022b18:	4618      	mov	r0, r3
 8022b1a:	3718      	adds	r7, #24
 8022b1c:	46bd      	mov	sp, r7
 8022b1e:	bd80      	pop	{r7, pc}
 8022b20:	0802b6ec 	.word	0x0802b6ec

08022b24 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8022b24:	b580      	push	{r7, lr}
 8022b26:	b086      	sub	sp, #24
 8022b28:	af00      	add	r7, sp, #0
 8022b2a:	60f8      	str	r0, [r7, #12]
 8022b2c:	60b9      	str	r1, [r7, #8]
 8022b2e:	607a      	str	r2, [r7, #4]
 8022b30:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8022b32:	8c3b      	ldrh	r3, [r7, #32]
 8022b34:	4618      	mov	r0, r3
 8022b36:	f7f6 fcbb 	bl	80194b0 <lwip_htons>
 8022b3a:	4603      	mov	r3, r0
 8022b3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8022b3e:	210e      	movs	r1, #14
 8022b40:	68b8      	ldr	r0, [r7, #8]
 8022b42:	f7fa f90f 	bl	801cd64 <pbuf_header>
 8022b46:	4603      	mov	r3, r0
 8022b48:	2b00      	cmp	r3, #0
 8022b4a:	d125      	bne.n	8022b98 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8022b4c:	68bb      	ldr	r3, [r7, #8]
 8022b4e:	685b      	ldr	r3, [r3, #4]
 8022b50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8022b52:	693b      	ldr	r3, [r7, #16]
 8022b54:	8afa      	ldrh	r2, [r7, #22]
 8022b56:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8022b58:	693b      	ldr	r3, [r7, #16]
 8022b5a:	2206      	movs	r2, #6
 8022b5c:	6839      	ldr	r1, [r7, #0]
 8022b5e:	4618      	mov	r0, r3
 8022b60:	f003 fe91 	bl	8026886 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8022b64:	693b      	ldr	r3, [r7, #16]
 8022b66:	3306      	adds	r3, #6
 8022b68:	2206      	movs	r2, #6
 8022b6a:	6879      	ldr	r1, [r7, #4]
 8022b6c:	4618      	mov	r0, r3
 8022b6e:	f003 fe8a 	bl	8026886 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8022b72:	68fb      	ldr	r3, [r7, #12]
 8022b74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8022b78:	2b06      	cmp	r3, #6
 8022b7a:	d006      	beq.n	8022b8a <ethernet_output+0x66>
 8022b7c:	4b0a      	ldr	r3, [pc, #40]	; (8022ba8 <ethernet_output+0x84>)
 8022b7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022b82:	490a      	ldr	r1, [pc, #40]	; (8022bac <ethernet_output+0x88>)
 8022b84:	480a      	ldr	r0, [pc, #40]	; (8022bb0 <ethernet_output+0x8c>)
 8022b86:	f003 f9af 	bl	8025ee8 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022b8a:	68fb      	ldr	r3, [r7, #12]
 8022b8c:	699b      	ldr	r3, [r3, #24]
 8022b8e:	68b9      	ldr	r1, [r7, #8]
 8022b90:	68f8      	ldr	r0, [r7, #12]
 8022b92:	4798      	blx	r3
 8022b94:	4603      	mov	r3, r0
 8022b96:	e002      	b.n	8022b9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022b98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8022b9a:	f06f 0301 	mvn.w	r3, #1
}
 8022b9e:	4618      	mov	r0, r3
 8022ba0:	3718      	adds	r7, #24
 8022ba2:	46bd      	mov	sp, r7
 8022ba4:	bd80      	pop	{r7, pc}
 8022ba6:	bf00      	nop
 8022ba8:	08028fe4 	.word	0x08028fe4
 8022bac:	0802901c 	.word	0x0802901c
 8022bb0:	08029050 	.word	0x08029050

08022bb4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8022bb4:	b580      	push	{r7, lr}
 8022bb6:	b086      	sub	sp, #24
 8022bb8:	af00      	add	r7, sp, #0
 8022bba:	6078      	str	r0, [r7, #4]
 8022bbc:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 8022bbe:	683b      	ldr	r3, [r7, #0]
 8022bc0:	60bb      	str	r3, [r7, #8]
 8022bc2:	2304      	movs	r3, #4
 8022bc4:	60fb      	str	r3, [r7, #12]
 8022bc6:	2300      	movs	r3, #0
 8022bc8:	613b      	str	r3, [r7, #16]
 8022bca:	2300      	movs	r3, #0
 8022bcc:	617b      	str	r3, [r7, #20]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8022bce:	f107 0308 	add.w	r3, r7, #8
 8022bd2:	2100      	movs	r1, #0
 8022bd4:	4618      	mov	r0, r3
 8022bd6:	f7f1 ff28 	bl	8014a2a <osMessageCreate>
 8022bda:	4602      	mov	r2, r0
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	681b      	ldr	r3, [r3, #0]
 8022be4:	2b00      	cmp	r3, #0
 8022be6:	d102      	bne.n	8022bee <sys_mbox_new+0x3a>
  return ERR_MEM;
 8022be8:	f04f 33ff 	mov.w	r3, #4294967295
 8022bec:	e000      	b.n	8022bf0 <sys_mbox_new+0x3c>
 
 return ERR_OK;
 8022bee:	2300      	movs	r3, #0
}
 8022bf0:	4618      	mov	r0, r3
 8022bf2:	3718      	adds	r7, #24
 8022bf4:	46bd      	mov	sp, r7
 8022bf6:	bd80      	pop	{r7, pc}

08022bf8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022bf8:	b580      	push	{r7, lr}
 8022bfa:	b082      	sub	sp, #8
 8022bfc:	af00      	add	r7, sp, #0
 8022bfe:	6078      	str	r0, [r7, #4]
	if( osMessageWaiting(*mbox) )
 8022c00:	687b      	ldr	r3, [r7, #4]
 8022c02:	681b      	ldr	r3, [r3, #0]
 8022c04:	4618      	mov	r0, r3
 8022c06:	f7f1 ffed 	bl	8014be4 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 8022c0a:	687b      	ldr	r3, [r7, #4]
 8022c0c:	681b      	ldr	r3, [r3, #0]
 8022c0e:	4618      	mov	r0, r3
 8022c10:	f7f1 fffe 	bl	8014c10 <osMessageDelete>

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8022c14:	bf00      	nop
 8022c16:	3708      	adds	r7, #8
 8022c18:	46bd      	mov	sp, r7
 8022c1a:	bd80      	pop	{r7, pc}

08022c1c <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8022c1c:	b580      	push	{r7, lr}
 8022c1e:	b082      	sub	sp, #8
 8022c20:	af00      	add	r7, sp, #0
 8022c22:	6078      	str	r0, [r7, #4]
 8022c24:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8022c26:	bf00      	nop
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	6839      	ldr	r1, [r7, #0]
 8022c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8022c32:	4618      	mov	r0, r3
 8022c34:	f7f1 ff22 	bl	8014a7c <osMessagePut>
 8022c38:	4603      	mov	r3, r0
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	d1f4      	bne.n	8022c28 <sys_mbox_post+0xc>
}
 8022c3e:	bf00      	nop
 8022c40:	3708      	adds	r7, #8
 8022c42:	46bd      	mov	sp, r7
 8022c44:	bd80      	pop	{r7, pc}

08022c46 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022c46:	b580      	push	{r7, lr}
 8022c48:	b084      	sub	sp, #16
 8022c4a:	af00      	add	r7, sp, #0
 8022c4c:	6078      	str	r0, [r7, #4]
 8022c4e:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	681b      	ldr	r3, [r3, #0]
 8022c54:	6839      	ldr	r1, [r7, #0]
 8022c56:	2200      	movs	r2, #0
 8022c58:	4618      	mov	r0, r3
 8022c5a:	f7f1 ff0f 	bl	8014a7c <osMessagePut>
 8022c5e:	4603      	mov	r3, r0
 8022c60:	2b00      	cmp	r3, #0
 8022c62:	d102      	bne.n	8022c6a <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 8022c64:	2300      	movs	r3, #0
 8022c66:	73fb      	strb	r3, [r7, #15]
 8022c68:	e001      	b.n	8022c6e <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 8022c6a:	23ff      	movs	r3, #255	; 0xff
 8022c6c:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 8022c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8022c72:	4618      	mov	r0, r3
 8022c74:	3710      	adds	r7, #16
 8022c76:	46bd      	mov	sp, r7
 8022c78:	bd80      	pop	{r7, pc}

08022c7a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8022c7a:	b580      	push	{r7, lr}
 8022c7c:	b08c      	sub	sp, #48	; 0x30
 8022c7e:	af00      	add	r7, sp, #0
 8022c80:	61f8      	str	r0, [r7, #28]
 8022c82:	61b9      	str	r1, [r7, #24]
 8022c84:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 8022c86:	f7f1 fcf4 	bl	8014672 <osKernelSysTick>
 8022c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 8022c8c:	697b      	ldr	r3, [r7, #20]
 8022c8e:	2b00      	cmp	r3, #0
 8022c90:	d017      	beq.n	8022cc2 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 8022c92:	69fb      	ldr	r3, [r7, #28]
 8022c94:	6819      	ldr	r1, [r3, #0]
 8022c96:	f107 0320 	add.w	r3, r7, #32
 8022c9a:	697a      	ldr	r2, [r7, #20]
 8022c9c:	4618      	mov	r0, r3
 8022c9e:	f7f1 ff2d 	bl	8014afc <osMessageGet>
    
    if(event.status == osEventMessage)
 8022ca2:	6a3b      	ldr	r3, [r7, #32]
 8022ca4:	2b10      	cmp	r3, #16
 8022ca6:	d109      	bne.n	8022cbc <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8022ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022caa:	461a      	mov	r2, r3
 8022cac:	69bb      	ldr	r3, [r7, #24]
 8022cae:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8022cb0:	f7f1 fcdf 	bl	8014672 <osKernelSysTick>
 8022cb4:	4602      	mov	r2, r0
 8022cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022cb8:	1ad3      	subs	r3, r2, r3
 8022cba:	e019      	b.n	8022cf0 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8022cc0:	e016      	b.n	8022cf0 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 8022cc2:	69fb      	ldr	r3, [r7, #28]
 8022cc4:	6819      	ldr	r1, [r3, #0]
 8022cc6:	463b      	mov	r3, r7
 8022cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8022ccc:	4618      	mov	r0, r3
 8022cce:	f7f1 ff15 	bl	8014afc <osMessageGet>
 8022cd2:	f107 0320 	add.w	r3, r7, #32
 8022cd6:	463a      	mov	r2, r7
 8022cd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8022cda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8022cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ce0:	461a      	mov	r2, r3
 8022ce2:	69bb      	ldr	r3, [r7, #24]
 8022ce4:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8022ce6:	f7f1 fcc4 	bl	8014672 <osKernelSysTick>
 8022cea:	4602      	mov	r2, r0
 8022cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022cee:	1ad3      	subs	r3, r2, r3
  }
}
 8022cf0:	4618      	mov	r0, r3
 8022cf2:	3730      	adds	r7, #48	; 0x30
 8022cf4:	46bd      	mov	sp, r7
 8022cf6:	bd80      	pop	{r7, pc}

08022cf8 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8022cf8:	b580      	push	{r7, lr}
 8022cfa:	b086      	sub	sp, #24
 8022cfc:	af00      	add	r7, sp, #0
 8022cfe:	6078      	str	r0, [r7, #4]
 8022d00:	6039      	str	r1, [r7, #0]
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 8022d02:	687b      	ldr	r3, [r7, #4]
 8022d04:	6819      	ldr	r1, [r3, #0]
 8022d06:	f107 030c 	add.w	r3, r7, #12
 8022d0a:	2200      	movs	r2, #0
 8022d0c:	4618      	mov	r0, r3
 8022d0e:	f7f1 fef5 	bl	8014afc <osMessageGet>
  
  if(event.status == osEventMessage)
 8022d12:	68fb      	ldr	r3, [r7, #12]
 8022d14:	2b10      	cmp	r3, #16
 8022d16:	d105      	bne.n	8022d24 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8022d18:	693b      	ldr	r3, [r7, #16]
 8022d1a:	461a      	mov	r2, r3
 8022d1c:	683b      	ldr	r3, [r7, #0]
 8022d1e:	601a      	str	r2, [r3, #0]
    return ERR_OK;
 8022d20:	2300      	movs	r3, #0
 8022d22:	e001      	b.n	8022d28 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8022d24:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8022d28:	4618      	mov	r0, r3
 8022d2a:	3718      	adds	r7, #24
 8022d2c:	46bd      	mov	sp, r7
 8022d2e:	bd80      	pop	{r7, pc}

08022d30 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 8022d30:	b480      	push	{r7}
 8022d32:	b083      	sub	sp, #12
 8022d34:	af00      	add	r7, sp, #0
 8022d36:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	681b      	ldr	r3, [r3, #0]
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	d101      	bne.n	8022d44 <sys_mbox_valid+0x14>
    return 0;
 8022d40:	2300      	movs	r3, #0
 8022d42:	e000      	b.n	8022d46 <sys_mbox_valid+0x16>
  else
    return 1;
 8022d44:	2301      	movs	r3, #1
}                                             
 8022d46:	4618      	mov	r0, r3
 8022d48:	370c      	adds	r7, #12
 8022d4a:	46bd      	mov	sp, r7
 8022d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d50:	4770      	bx	lr

08022d52 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
 8022d52:	b480      	push	{r7}
 8022d54:	b083      	sub	sp, #12
 8022d56:	af00      	add	r7, sp, #0
 8022d58:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;                      
 8022d5a:	687b      	ldr	r3, [r7, #4]
 8022d5c:	2200      	movs	r2, #0
 8022d5e:	601a      	str	r2, [r3, #0]
}                                             
 8022d60:	bf00      	nop
 8022d62:	370c      	adds	r7, #12
 8022d64:	46bd      	mov	sp, r7
 8022d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d6a:	4770      	bx	lr

08022d6c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8022d6c:	b580      	push	{r7, lr}
 8022d6e:	b084      	sub	sp, #16
 8022d70:	af00      	add	r7, sp, #0
 8022d72:	6078      	str	r0, [r7, #4]
 8022d74:	460b      	mov	r3, r1
 8022d76:	70fb      	strb	r3, [r7, #3]
  osSemaphoreDef(SEM);
 8022d78:	2300      	movs	r3, #0
 8022d7a:	60bb      	str	r3, [r7, #8]
 8022d7c:	2300      	movs	r3, #0
 8022d7e:	60fb      	str	r3, [r7, #12]

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8022d80:	f107 0308 	add.w	r3, r7, #8
 8022d84:	2101      	movs	r1, #1
 8022d86:	4618      	mov	r0, r3
 8022d88:	f7f1 fd82 	bl	8014890 <osSemaphoreCreate>
 8022d8c:	4602      	mov	r2, r0
 8022d8e:	687b      	ldr	r3, [r7, #4]
 8022d90:	601a      	str	r2, [r3, #0]
	
  if(*sem == NULL)
 8022d92:	687b      	ldr	r3, [r7, #4]
 8022d94:	681b      	ldr	r3, [r3, #0]
 8022d96:	2b00      	cmp	r3, #0
 8022d98:	d102      	bne.n	8022da0 <sys_sem_new+0x34>
  {
#if SYS_STATS
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
 8022d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8022d9e:	e009      	b.n	8022db4 <sys_sem_new+0x48>
  }
	
  if(count == 0)	// Means it can't be taken
 8022da0:	78fb      	ldrb	r3, [r7, #3]
 8022da2:	2b00      	cmp	r3, #0
 8022da4:	d105      	bne.n	8022db2 <sys_sem_new+0x46>
  {
    osSemaphoreWait(*sem,0);
 8022da6:	687b      	ldr	r3, [r7, #4]
 8022da8:	681b      	ldr	r3, [r3, #0]
 8022daa:	2100      	movs	r1, #0
 8022dac:	4618      	mov	r0, r3
 8022dae:	f7f1 fda3 	bl	80148f8 <osSemaphoreWait>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 8022db2:	2300      	movs	r3, #0
}
 8022db4:	4618      	mov	r0, r3
 8022db6:	3710      	adds	r7, #16
 8022db8:	46bd      	mov	sp, r7
 8022dba:	bd80      	pop	{r7, pc}

08022dbc <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8022dbc:	b580      	push	{r7, lr}
 8022dbe:	b084      	sub	sp, #16
 8022dc0:	af00      	add	r7, sp, #0
 8022dc2:	6078      	str	r0, [r7, #4]
 8022dc4:	6039      	str	r1, [r7, #0]
  uint32_t starttime = osKernelSysTick();
 8022dc6:	f7f1 fc54 	bl	8014672 <osKernelSysTick>
 8022dca:	60f8      	str	r0, [r7, #12]
  
  if(timeout != 0)
 8022dcc:	683b      	ldr	r3, [r7, #0]
 8022dce:	2b00      	cmp	r3, #0
 8022dd0:	d011      	beq.n	8022df6 <sys_arch_sem_wait+0x3a>
  {    
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8022dd2:	687b      	ldr	r3, [r7, #4]
 8022dd4:	681b      	ldr	r3, [r3, #0]
 8022dd6:	6839      	ldr	r1, [r7, #0]
 8022dd8:	4618      	mov	r0, r3
 8022dda:	f7f1 fd8d 	bl	80148f8 <osSemaphoreWait>
 8022dde:	4603      	mov	r3, r0
 8022de0:	2b00      	cmp	r3, #0
 8022de2:	d105      	bne.n	8022df0 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8022de4:	f7f1 fc45 	bl	8014672 <osKernelSysTick>
 8022de8:	4602      	mov	r2, r0
 8022dea:	68fb      	ldr	r3, [r7, #12]
 8022dec:	1ad3      	subs	r3, r2, r3
 8022dee:	e012      	b.n	8022e16 <sys_arch_sem_wait+0x5a>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022df0:	f04f 33ff 	mov.w	r3, #4294967295
 8022df4:	e00f      	b.n	8022e16 <sys_arch_sem_wait+0x5a>
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8022df6:	bf00      	nop
 8022df8:	687b      	ldr	r3, [r7, #4]
 8022dfa:	681b      	ldr	r3, [r3, #0]
 8022dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8022e00:	4618      	mov	r0, r3
 8022e02:	f7f1 fd79 	bl	80148f8 <osSemaphoreWait>
 8022e06:	4603      	mov	r3, r0
 8022e08:	2b00      	cmp	r3, #0
 8022e0a:	d1f5      	bne.n	8022df8 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8022e0c:	f7f1 fc31 	bl	8014672 <osKernelSysTick>
 8022e10:	4602      	mov	r2, r0
 8022e12:	68fb      	ldr	r3, [r7, #12]
 8022e14:	1ad3      	subs	r3, r2, r3
  }
}
 8022e16:	4618      	mov	r0, r3
 8022e18:	3710      	adds	r7, #16
 8022e1a:	46bd      	mov	sp, r7
 8022e1c:	bd80      	pop	{r7, pc}

08022e1e <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8022e1e:	b580      	push	{r7, lr}
 8022e20:	b082      	sub	sp, #8
 8022e22:	af00      	add	r7, sp, #0
 8022e24:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8022e26:	687b      	ldr	r3, [r7, #4]
 8022e28:	681b      	ldr	r3, [r3, #0]
 8022e2a:	4618      	mov	r0, r3
 8022e2c:	f7f1 fdb4 	bl	8014998 <osSemaphoreRelease>
}
 8022e30:	bf00      	nop
 8022e32:	3708      	adds	r7, #8
 8022e34:	46bd      	mov	sp, r7
 8022e36:	bd80      	pop	{r7, pc}

08022e38 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8022e38:	b580      	push	{r7, lr}
 8022e3a:	b082      	sub	sp, #8
 8022e3c:	af00      	add	r7, sp, #0
 8022e3e:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 8022e40:	687b      	ldr	r3, [r7, #4]
 8022e42:	681b      	ldr	r3, [r3, #0]
 8022e44:	4618      	mov	r0, r3
 8022e46:	f7f1 fddd 	bl	8014a04 <osSemaphoreDelete>
}
 8022e4a:	bf00      	nop
 8022e4c:	3708      	adds	r7, #8
 8022e4e:	46bd      	mov	sp, r7
 8022e50:	bd80      	pop	{r7, pc}

08022e52 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
 8022e52:	b480      	push	{r7}
 8022e54:	b083      	sub	sp, #12
 8022e56:	af00      	add	r7, sp, #0
 8022e58:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8022e5a:	687b      	ldr	r3, [r7, #4]
 8022e5c:	681b      	ldr	r3, [r3, #0]
 8022e5e:	2b00      	cmp	r3, #0
 8022e60:	d101      	bne.n	8022e66 <sys_sem_valid+0x14>
    return 0;
 8022e62:	2300      	movs	r3, #0
 8022e64:	e000      	b.n	8022e68 <sys_sem_valid+0x16>
  else
    return 1;                                       
 8022e66:	2301      	movs	r3, #1
}
 8022e68:	4618      	mov	r0, r3
 8022e6a:	370c      	adds	r7, #12
 8022e6c:	46bd      	mov	sp, r7
 8022e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e72:	4770      	bx	lr

08022e74 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
 8022e74:	b480      	push	{r7}
 8022e76:	b083      	sub	sp, #12
 8022e78:	af00      	add	r7, sp, #0
 8022e7a:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;                                                          
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	2200      	movs	r2, #0
 8022e80:	601a      	str	r2, [r3, #0]
} 
 8022e82:	bf00      	nop
 8022e84:	370c      	adds	r7, #12
 8022e86:	46bd      	mov	sp, r7
 8022e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e8c:	4770      	bx	lr
	...

08022e90 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 8022e90:	b580      	push	{r7, lr}
 8022e92:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8022e94:	4803      	ldr	r0, [pc, #12]	; (8022ea4 <sys_init+0x14>)
 8022e96:	f7f1 fc5c 	bl	8014752 <osMutexCreate>
 8022e9a:	4602      	mov	r2, r0
 8022e9c:	4b02      	ldr	r3, [pc, #8]	; (8022ea8 <sys_init+0x18>)
 8022e9e:	601a      	str	r2, [r3, #0]
}
 8022ea0:	bf00      	nop
 8022ea2:	bd80      	pop	{r7, pc}
 8022ea4:	0802b6fc 	.word	0x0802b6fc
 8022ea8:	2000ece0 	.word	0x2000ece0

08022eac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8022eac:	b580      	push	{r7, lr}
 8022eae:	b084      	sub	sp, #16
 8022eb0:	af00      	add	r7, sp, #0
 8022eb2:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 8022eb4:	2300      	movs	r3, #0
 8022eb6:	60bb      	str	r3, [r7, #8]
 8022eb8:	2300      	movs	r3, #0
 8022eba:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022ebc:	f107 0308 	add.w	r3, r7, #8
 8022ec0:	4618      	mov	r0, r3
 8022ec2:	f7f1 fc46 	bl	8014752 <osMutexCreate>
 8022ec6:	4602      	mov	r2, r0
 8022ec8:	687b      	ldr	r3, [r7, #4]
 8022eca:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 8022ecc:	687b      	ldr	r3, [r7, #4]
 8022ece:	681b      	ldr	r3, [r3, #0]
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d102      	bne.n	8022eda <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 8022ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8022ed8:	e000      	b.n	8022edc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8022eda:	2300      	movs	r3, #0
}
 8022edc:	4618      	mov	r0, r3
 8022ede:	3710      	adds	r7, #16
 8022ee0:	46bd      	mov	sp, r7
 8022ee2:	bd80      	pop	{r7, pc}

08022ee4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8022ee4:	b580      	push	{r7, lr}
 8022ee6:	b082      	sub	sp, #8
 8022ee8:	af00      	add	r7, sp, #0
 8022eea:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	681b      	ldr	r3, [r3, #0]
 8022ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8022ef4:	4618      	mov	r0, r3
 8022ef6:	f7f1 fc45 	bl	8014784 <osMutexWait>
}
 8022efa:	bf00      	nop
 8022efc:	3708      	adds	r7, #8
 8022efe:	46bd      	mov	sp, r7
 8022f00:	bd80      	pop	{r7, pc}

08022f02 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8022f02:	b580      	push	{r7, lr}
 8022f04:	b082      	sub	sp, #8
 8022f06:	af00      	add	r7, sp, #0
 8022f08:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	681b      	ldr	r3, [r3, #0]
 8022f0e:	4618      	mov	r0, r3
 8022f10:	f7f1 fc88 	bl	8014824 <osMutexRelease>
}
 8022f14:	bf00      	nop
 8022f16:	3708      	adds	r7, #8
 8022f18:	46bd      	mov	sp, r7
 8022f1a:	bd80      	pop	{r7, pc}

08022f1c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8022f1c:	b580      	push	{r7, lr}
 8022f1e:	b08c      	sub	sp, #48	; 0x30
 8022f20:	af00      	add	r7, sp, #0
 8022f22:	60f8      	str	r0, [r7, #12]
 8022f24:	60b9      	str	r1, [r7, #8]
 8022f26:	607a      	str	r2, [r7, #4]
 8022f28:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8022f2a:	f107 0314 	add.w	r3, r7, #20
 8022f2e:	2200      	movs	r2, #0
 8022f30:	601a      	str	r2, [r3, #0]
 8022f32:	605a      	str	r2, [r3, #4]
 8022f34:	609a      	str	r2, [r3, #8]
 8022f36:	60da      	str	r2, [r3, #12]
 8022f38:	611a      	str	r2, [r3, #16]
 8022f3a:	615a      	str	r2, [r3, #20]
 8022f3c:	619a      	str	r2, [r3, #24]
 8022f3e:	68fb      	ldr	r3, [r7, #12]
 8022f40:	617b      	str	r3, [r7, #20]
 8022f42:	68bb      	ldr	r3, [r7, #8]
 8022f44:	61bb      	str	r3, [r7, #24]
 8022f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022f48:	b21b      	sxth	r3, r3
 8022f4a:	83bb      	strh	r3, [r7, #28]
 8022f4c:	683b      	ldr	r3, [r7, #0]
 8022f4e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8022f50:	f107 0314 	add.w	r3, r7, #20
 8022f54:	6879      	ldr	r1, [r7, #4]
 8022f56:	4618      	mov	r0, r3
 8022f58:	f7f1 fb9b 	bl	8014692 <osThreadCreate>
 8022f5c:	4603      	mov	r3, r0
}
 8022f5e:	4618      	mov	r0, r3
 8022f60:	3730      	adds	r7, #48	; 0x30
 8022f62:	46bd      	mov	sp, r7
 8022f64:	bd80      	pop	{r7, pc}
	...

08022f68 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8022f68:	b580      	push	{r7, lr}
 8022f6a:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8022f6c:	4b04      	ldr	r3, [pc, #16]	; (8022f80 <sys_arch_protect+0x18>)
 8022f6e:	681b      	ldr	r3, [r3, #0]
 8022f70:	f04f 31ff 	mov.w	r1, #4294967295
 8022f74:	4618      	mov	r0, r3
 8022f76:	f7f1 fc05 	bl	8014784 <osMutexWait>
  return (sys_prot_t)1;
 8022f7a:	2301      	movs	r3, #1
}
 8022f7c:	4618      	mov	r0, r3
 8022f7e:	bd80      	pop	{r7, pc}
 8022f80:	2000ece0 	.word	0x2000ece0

08022f84 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8022f84:	b580      	push	{r7, lr}
 8022f86:	b082      	sub	sp, #8
 8022f88:	af00      	add	r7, sp, #0
 8022f8a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8022f8c:	4b04      	ldr	r3, [pc, #16]	; (8022fa0 <sys_arch_unprotect+0x1c>)
 8022f8e:	681b      	ldr	r3, [r3, #0]
 8022f90:	4618      	mov	r0, r3
 8022f92:	f7f1 fc47 	bl	8014824 <osMutexRelease>
}
 8022f96:	bf00      	nop
 8022f98:	3708      	adds	r7, #8
 8022f9a:	46bd      	mov	sp, r7
 8022f9c:	bd80      	pop	{r7, pc}
 8022f9e:	bf00      	nop
 8022fa0:	2000ece0 	.word	0x2000ece0

08022fa4 <is_exp_of_2>:
#include "circbuff.h"

/*Checks if argument is power of 2 --------------------------------------- */

static uint8_t is_exp_of_2(uint32_t n)
{
 8022fa4:	b480      	push	{r7}
 8022fa6:	b083      	sub	sp, #12
 8022fa8:	af00      	add	r7, sp, #0
 8022faa:	6078      	str	r0, [r7, #4]
    return ( n & (n - 1) ) == 0;
 8022fac:	687b      	ldr	r3, [r7, #4]
 8022fae:	1e5a      	subs	r2, r3, #1
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	4013      	ands	r3, r2
 8022fb4:	2b00      	cmp	r3, #0
 8022fb6:	bf0c      	ite	eq
 8022fb8:	2301      	moveq	r3, #1
 8022fba:	2300      	movne	r3, #0
 8022fbc:	b2db      	uxtb	r3, r3
}
 8022fbe:	4618      	mov	r0, r3
 8022fc0:	370c      	adds	r7, #12
 8022fc2:	46bd      	mov	sp, r7
 8022fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fc8:	4770      	bx	lr

08022fca <CB_Init>:

/* Circular buffer initiation function ----------------------------------- */

error_t CB_Init(circbuff *cb, uint32_t buf_size) {
 8022fca:	b580      	push	{r7, lr}
 8022fcc:	b082      	sub	sp, #8
 8022fce:	af00      	add	r7, sp, #0
 8022fd0:	6078      	str	r0, [r7, #4]
 8022fd2:	6039      	str	r1, [r7, #0]
	if (!is_exp_of_2(buf_size)) return SIZE_ERR;
 8022fd4:	6838      	ldr	r0, [r7, #0]
 8022fd6:	f7ff ffe5 	bl	8022fa4 <is_exp_of_2>
 8022fda:	4603      	mov	r3, r0
 8022fdc:	2b00      	cmp	r3, #0
 8022fde:	d101      	bne.n	8022fe4 <CB_Init+0x1a>
 8022fe0:	2304      	movs	r3, #4
 8022fe2:	e015      	b.n	8023010 <CB_Init+0x46>
						/* return error if buffer size is not power of 2 */
	cb->size = buf_size;
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	683a      	ldr	r2, [r7, #0]
 8022fe8:	605a      	str	r2, [r3, #4]
	cb->read_pos = 0;
 8022fea:	687b      	ldr	r3, [r7, #4]
 8022fec:	2200      	movs	r2, #0
 8022fee:	609a      	str	r2, [r3, #8]
	cb->write_pos = 0;
 8022ff0:	687b      	ldr	r3, [r7, #4]
 8022ff2:	2200      	movs	r2, #0
 8022ff4:	60da      	str	r2, [r3, #12]
	cb->buf = (uint8_t*) pvPortMalloc(buf_size * sizeof(uint8_t));
 8022ff6:	6838      	ldr	r0, [r7, #0]
 8022ff8:	f7f2 f8ea 	bl	80151d0 <pvPortMalloc>
 8022ffc:	4602      	mov	r2, r0
 8022ffe:	687b      	ldr	r3, [r7, #4]
 8023000:	601a      	str	r2, [r3, #0]
	if (cb->buf == NULL) {
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	681b      	ldr	r3, [r3, #0]
 8023006:	2b00      	cmp	r3, #0
 8023008:	d101      	bne.n	802300e <CB_Init+0x44>
		return MEM_ERR;
 802300a:	2301      	movs	r3, #1
 802300c:	e000      	b.n	8023010 <CB_Init+0x46>
	}
	return NO_ERR;
 802300e:	2300      	movs	r3, #0
}
 8023010:	4618      	mov	r0, r3
 8023012:	3708      	adds	r7, #8
 8023014:	46bd      	mov	sp, r7
 8023016:	bd80      	pop	{r7, pc}

08023018 <CB_Data_Length>:

/* Returns length of data in buffer ---------------------------------------*/

uint32_t CB_Data_Length(circbuff *cb) {
 8023018:	b480      	push	{r7}
 802301a:	b083      	sub	sp, #12
 802301c:	af00      	add	r7, sp, #0
 802301e:	6078      	str	r0, [r7, #4]
	return ((cb->write_pos - cb->read_pos) & (cb->size - 1));
 8023020:	687b      	ldr	r3, [r7, #4]
 8023022:	68da      	ldr	r2, [r3, #12]
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	689b      	ldr	r3, [r3, #8]
 8023028:	1ad2      	subs	r2, r2, r3
 802302a:	687b      	ldr	r3, [r7, #4]
 802302c:	685b      	ldr	r3, [r3, #4]
 802302e:	3b01      	subs	r3, #1
 8023030:	4013      	ands	r3, r2
}
 8023032:	4618      	mov	r0, r3
 8023034:	370c      	adds	r7, #12
 8023036:	46bd      	mov	sp, r7
 8023038:	f85d 7b04 	ldr.w	r7, [sp], #4
 802303c:	4770      	bx	lr

0802303e <CB_Write>:

/* Write new element to buffer --------------------------------------------*/

error_t CB_Write(circbuff *cb, uint8_t item){
 802303e:	b580      	push	{r7, lr}
 8023040:	b082      	sub	sp, #8
 8023042:	af00      	add	r7, sp, #0
 8023044:	6078      	str	r0, [r7, #4]
 8023046:	460b      	mov	r3, r1
 8023048:	70fb      	strb	r3, [r7, #3]
	if (CB_Data_Length(cb) >= (cb->size - 1)){
 802304a:	6878      	ldr	r0, [r7, #4]
 802304c:	f7ff ffe4 	bl	8023018 <CB_Data_Length>
 8023050:	4602      	mov	r2, r0
 8023052:	687b      	ldr	r3, [r7, #4]
 8023054:	685b      	ldr	r3, [r3, #4]
 8023056:	3b01      	subs	r3, #1
 8023058:	429a      	cmp	r2, r3
 802305a:	d301      	bcc.n	8023060 <CB_Write+0x22>
		return FULL_ERR;
 802305c:	2303      	movs	r3, #3
 802305e:	e010      	b.n	8023082 <CB_Write+0x44>
	}
	cb->buf[cb->write_pos] = item;
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	681a      	ldr	r2, [r3, #0]
 8023064:	687b      	ldr	r3, [r7, #4]
 8023066:	68db      	ldr	r3, [r3, #12]
 8023068:	4413      	add	r3, r2
 802306a:	78fa      	ldrb	r2, [r7, #3]
 802306c:	701a      	strb	r2, [r3, #0]
	cb->write_pos = (cb->write_pos + 1) & (cb->size - 1);
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	68db      	ldr	r3, [r3, #12]
 8023072:	1c5a      	adds	r2, r3, #1
 8023074:	687b      	ldr	r3, [r7, #4]
 8023076:	685b      	ldr	r3, [r3, #4]
 8023078:	3b01      	subs	r3, #1
 802307a:	401a      	ands	r2, r3
 802307c:	687b      	ldr	r3, [r7, #4]
 802307e:	60da      	str	r2, [r3, #12]
	return NO_ERR;
 8023080:	2300      	movs	r3, #0
}
 8023082:	4618      	mov	r0, r3
 8023084:	3708      	adds	r7, #8
 8023086:	46bd      	mov	sp, r7
 8023088:	bd80      	pop	{r7, pc}

0802308a <CB_Read>:

/* Read element from buffer -----------------------------------------------*/

error_t CB_Read(circbuff *cb, uint8_t * item){
 802308a:	b580      	push	{r7, lr}
 802308c:	b082      	sub	sp, #8
 802308e:	af00      	add	r7, sp, #0
 8023090:	6078      	str	r0, [r7, #4]
 8023092:	6039      	str	r1, [r7, #0]
	if (CB_Data_Length(cb) == 0){
 8023094:	6878      	ldr	r0, [r7, #4]
 8023096:	f7ff ffbf 	bl	8023018 <CB_Data_Length>
 802309a:	4603      	mov	r3, r0
 802309c:	2b00      	cmp	r3, #0
 802309e:	d101      	bne.n	80230a4 <CB_Read+0x1a>
		return EMPTY_ERR;
 80230a0:	2302      	movs	r3, #2
 80230a2:	e011      	b.n	80230c8 <CB_Read+0x3e>
	}
	*item = cb->buf[cb->read_pos];
 80230a4:	687b      	ldr	r3, [r7, #4]
 80230a6:	681a      	ldr	r2, [r3, #0]
 80230a8:	687b      	ldr	r3, [r7, #4]
 80230aa:	689b      	ldr	r3, [r3, #8]
 80230ac:	4413      	add	r3, r2
 80230ae:	781a      	ldrb	r2, [r3, #0]
 80230b0:	683b      	ldr	r3, [r7, #0]
 80230b2:	701a      	strb	r2, [r3, #0]
	cb->read_pos = (cb->read_pos + 1) & ( cb->size - 1);
 80230b4:	687b      	ldr	r3, [r7, #4]
 80230b6:	689b      	ldr	r3, [r3, #8]
 80230b8:	1c5a      	adds	r2, r3, #1
 80230ba:	687b      	ldr	r3, [r7, #4]
 80230bc:	685b      	ldr	r3, [r3, #4]
 80230be:	3b01      	subs	r3, #1
 80230c0:	401a      	ands	r2, r3
 80230c2:	687b      	ldr	r3, [r7, #4]
 80230c4:	609a      	str	r2, [r3, #8]
	return NO_ERR;
 80230c6:	2300      	movs	r3, #0
}
 80230c8:	4618      	mov	r0, r3
 80230ca:	3708      	adds	r7, #8
 80230cc:	46bd      	mov	sp, r7
 80230ce:	bd80      	pop	{r7, pc}

080230d0 <FlashInit>:
RESERVED01,
RESERVED02,
RESERVED03,
RESERVED04, };

void FlashInit() {
 80230d0:	b580      	push	{r7, lr}
 80230d2:	b082      	sub	sp, #8
 80230d4:	af00      	add	r7, sp, #0

	uint16_t mem_key;
	EE_ReadVariable(MEM_KEY_ADDR, &mem_key); /* Memory key reading */
 80230d6:	1dbb      	adds	r3, r7, #6
 80230d8:	4619      	mov	r1, r3
 80230da:	2000      	movs	r0, #0
 80230dc:	f000 fa90 	bl	8023600 <EE_ReadVariable>
	if (mem_key != MEMORY_KEY) { /* First launching of device */
 80230e0:	88fb      	ldrh	r3, [r7, #6]
 80230e2:	f64b 62ab 	movw	r2, #48811	; 0xbeab
 80230e6:	4293      	cmp	r3, r2
 80230e8:	d01b      	beq.n	8023122 <FlashInit+0x52>
		/* Default FLASH initialization --------------------- */
		EE_WriteVariable(MEM_KEY_ADDR, MEMORY_KEY);
 80230ea:	f64b 61ab 	movw	r1, #48811	; 0xbeab
 80230ee:	2000      	movs	r0, #0
 80230f0:	f000 fad0 	bl	8023694 <EE_WriteVariable>
		EE_WriteVariable(IP_02_01_ADDR, DEFAULT_IP_02_01);
 80230f4:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 80230f8:	2001      	movs	r0, #1
 80230fa:	f000 facb 	bl	8023694 <EE_WriteVariable>
		EE_WriteVariable(IP_04_03_ADDR, DEFAULT_IP_04_03);
 80230fe:	f64f 5104 	movw	r1, #64772	; 0xfd04
 8023102:	2002      	movs	r0, #2
 8023104:	f000 fac6 	bl	8023694 <EE_WriteVariable>
		EE_WriteVariable(BR_MS_ADDR, DEFAULT_BR_MS);
 8023108:	2102      	movs	r1, #2
 802310a:	2003      	movs	r0, #3
 802310c:	f000 fac2 	bl	8023694 <EE_WriteVariable>
		EE_WriteVariable(BR_LS_ADDR, DEFAULT_BR_LS);
 8023110:	f64d 416c 	movw	r1, #56428	; 0xdc6c
 8023114:	2004      	movs	r0, #4
 8023116:	f000 fabd 	bl	8023694 <EE_WriteVariable>
		EE_WriteVariable(MPI_ADRR_ADDR, DEFAULT_MPI_ADDR);
 802311a:	2101      	movs	r1, #1
 802311c:	2005      	movs	r0, #5
 802311e:	f000 fab9 	bl	8023694 <EE_WriteVariable>
		uint16_t ui16[2];
		uint8_t ui8[4];
	} tmp_u;

	/*baud rate */
	EE_ReadVariable(BR_MS_ADDR, &tmp_u.ui16[1]);
 8023122:	463b      	mov	r3, r7
 8023124:	3302      	adds	r3, #2
 8023126:	4619      	mov	r1, r3
 8023128:	2003      	movs	r0, #3
 802312a:	f000 fa69 	bl	8023600 <EE_ReadVariable>
	EE_ReadVariable(BR_LS_ADDR, &tmp_u.ui16[0]);
 802312e:	463b      	mov	r3, r7
 8023130:	4619      	mov	r1, r3
 8023132:	2004      	movs	r0, #4
 8023134:	f000 fa64 	bl	8023600 <EE_ReadVariable>
	huart5.Init.BaudRate = tmp_u.ui32;
 8023138:	683b      	ldr	r3, [r7, #0]
 802313a:	4a12      	ldr	r2, [pc, #72]	; (8023184 <FlashInit+0xb4>)
 802313c:	6053      	str	r3, [r2, #4]
	hflash.speed = huart5.Init.BaudRate;
 802313e:	4b11      	ldr	r3, [pc, #68]	; (8023184 <FlashInit+0xb4>)
 8023140:	685b      	ldr	r3, [r3, #4]
 8023142:	4a11      	ldr	r2, [pc, #68]	; (8023188 <FlashInit+0xb8>)
 8023144:	6013      	str	r3, [r2, #0]
    /* IP-address */
	EE_ReadVariable(IP_02_01_ADDR, &tmp_u.ui16[0]);
 8023146:	463b      	mov	r3, r7
 8023148:	4619      	mov	r1, r3
 802314a:	2001      	movs	r0, #1
 802314c:	f000 fa58 	bl	8023600 <EE_ReadVariable>
	EE_ReadVariable(IP_04_03_ADDR, &tmp_u.ui16[1]);
 8023150:	463b      	mov	r3, r7
 8023152:	3302      	adds	r3, #2
 8023154:	4619      	mov	r1, r3
 8023156:	2002      	movs	r0, #2
 8023158:	f000 fa52 	bl	8023600 <EE_ReadVariable>
	hflash.IP_addr[0] = tmp_u.ui8[0];
 802315c:	783a      	ldrb	r2, [r7, #0]
 802315e:	4b0a      	ldr	r3, [pc, #40]	; (8023188 <FlashInit+0xb8>)
 8023160:	719a      	strb	r2, [r3, #6]
	hflash.IP_addr[1] = tmp_u.ui8[1];
 8023162:	787a      	ldrb	r2, [r7, #1]
 8023164:	4b08      	ldr	r3, [pc, #32]	; (8023188 <FlashInit+0xb8>)
 8023166:	71da      	strb	r2, [r3, #7]
	hflash.IP_addr[2] = tmp_u.ui8[2];
 8023168:	78ba      	ldrb	r2, [r7, #2]
 802316a:	4b07      	ldr	r3, [pc, #28]	; (8023188 <FlashInit+0xb8>)
 802316c:	721a      	strb	r2, [r3, #8]
	hflash.IP_addr[3] = tmp_u.ui8[3];
 802316e:	78fa      	ldrb	r2, [r7, #3]
 8023170:	4b05      	ldr	r3, [pc, #20]	; (8023188 <FlashInit+0xb8>)
 8023172:	725a      	strb	r2, [r3, #9]
	/* MPI/Profibus address */
	EE_ReadVariable(MPI_ADRR_ADDR, &hflash.own_addr);
 8023174:	4905      	ldr	r1, [pc, #20]	; (802318c <FlashInit+0xbc>)
 8023176:	2005      	movs	r0, #5
 8023178:	f000 fa42 	bl	8023600 <EE_ReadVariable>
	/* ------------------------------------------------------- */
}
 802317c:	bf00      	nop
 802317e:	3708      	adds	r7, #8
 8023180:	46bd      	mov	sp, r7
 8023182:	bd80      	pop	{r7, pc}
 8023184:	20011f88 	.word	0x20011f88
 8023188:	2000ece4 	.word	0x2000ece4
 802318c:	2000ece8 	.word	0x2000ece8

08023190 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8023190:	b580      	push	{r7, lr}
 8023192:	b082      	sub	sp, #8
 8023194:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8023196:	2300      	movs	r3, #0
 8023198:	607b      	str	r3, [r7, #4]
 802319a:	4a17      	ldr	r2, [pc, #92]	; (80231f8 <MX_DMA_Init+0x68>)
 802319c:	4b16      	ldr	r3, [pc, #88]	; (80231f8 <MX_DMA_Init+0x68>)
 802319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80231a4:	6313      	str	r3, [r2, #48]	; 0x30
 80231a6:	4b14      	ldr	r3, [pc, #80]	; (80231f8 <MX_DMA_Init+0x68>)
 80231a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80231ae:	607b      	str	r3, [r7, #4]
 80231b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80231b2:	2300      	movs	r3, #0
 80231b4:	603b      	str	r3, [r7, #0]
 80231b6:	4a10      	ldr	r2, [pc, #64]	; (80231f8 <MX_DMA_Init+0x68>)
 80231b8:	4b0f      	ldr	r3, [pc, #60]	; (80231f8 <MX_DMA_Init+0x68>)
 80231ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80231c0:	6313      	str	r3, [r2, #48]	; 0x30
 80231c2:	4b0d      	ldr	r3, [pc, #52]	; (80231f8 <MX_DMA_Init+0x68>)
 80231c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80231ca:	603b      	str	r3, [r7, #0]
 80231cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80231ce:	2200      	movs	r2, #0
 80231d0:	2105      	movs	r1, #5
 80231d2:	202f      	movs	r0, #47	; 0x2f
 80231d4:	f7ed f9fe 	bl	80105d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80231d8:	202f      	movs	r0, #47	; 0x2f
 80231da:	f7ed fa17 	bl	801060c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80231de:	2200      	movs	r2, #0
 80231e0:	2105      	movs	r1, #5
 80231e2:	2046      	movs	r0, #70	; 0x46
 80231e4:	f7ed f9f6 	bl	80105d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80231e8:	2046      	movs	r0, #70	; 0x46
 80231ea:	f7ed fa0f 	bl	801060c <HAL_NVIC_EnableIRQ>

}
 80231ee:	bf00      	nop
 80231f0:	3708      	adds	r7, #8
 80231f2:	46bd      	mov	sp, r7
 80231f4:	bd80      	pop	{r7, pc}
 80231f6:	bf00      	nop
 80231f8:	40023800 	.word	0x40023800

080231fc <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80231fc:	b580      	push	{r7, lr}
 80231fe:	b08a      	sub	sp, #40	; 0x28
 8023200:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8023202:	2306      	movs	r3, #6
 8023204:	847b      	strh	r3, [r7, #34]	; 0x22
 8023206:	2306      	movs	r3, #6
 8023208:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 802320a:	2300      	movs	r3, #0
 802320c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 802320e:	2300      	movs	r3, #0
 8023210:	83fb      	strh	r3, [r7, #30]
 8023212:	2300      	movs	r3, #0
 8023214:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8023216:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802321a:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 802321c:	2300      	movs	r3, #0
 802321e:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8023220:	4b9f      	ldr	r3, [pc, #636]	; (80234a0 <EE_Init+0x2a4>)
 8023222:	881b      	ldrh	r3, [r3, #0]
 8023224:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8023226:	4b9f      	ldr	r3, [pc, #636]	; (80234a4 <EE_Init+0x2a8>)
 8023228:	881b      	ldrh	r3, [r3, #0]
 802322a:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 802322c:	2300      	movs	r3, #0
 802322e:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8023230:	2302      	movs	r3, #2
 8023232:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8023234:	2301      	movs	r3, #1
 8023236:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023238:	2302      	movs	r3, #2
 802323a:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 802323c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802323e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023242:	4293      	cmp	r3, r2
 8023244:	d057      	beq.n	80232f6 <EE_Init+0xfa>
 8023246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802324a:	4293      	cmp	r3, r2
 802324c:	d003      	beq.n	8023256 <EE_Init+0x5a>
 802324e:	2b00      	cmp	r3, #0
 8023250:	f000 80f4 	beq.w	802343c <EE_Init+0x240>
 8023254:	e18d      	b.n	8023572 <EE_Init+0x376>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8023256:	8c3b      	ldrh	r3, [r7, #32]
 8023258:	2b00      	cmp	r3, #0
 802325a:	d116      	bne.n	802328a <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 802325c:	4890      	ldr	r0, [pc, #576]	; (80234a0 <EE_Init+0x2a4>)
 802325e:	f000 f9a9 	bl	80235b4 <EE_VerifyPageFullyErased>
 8023262:	4603      	mov	r3, r0
 8023264:	2b00      	cmp	r3, #0
 8023266:	f040 818e 	bne.w	8023586 <EE_Init+0x38a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 802326a:	f107 0214 	add.w	r2, r7, #20
 802326e:	463b      	mov	r3, r7
 8023270:	4611      	mov	r1, r2
 8023272:	4618      	mov	r0, r3
 8023274:	f7ee ff7a 	bl	801216c <HAL_FLASHEx_Erase>
 8023278:	4603      	mov	r3, r0
 802327a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 802327c:	7efb      	ldrb	r3, [r7, #27]
 802327e:	2b00      	cmp	r3, #0
 8023280:	f000 8181 	beq.w	8023586 <EE_Init+0x38a>
          {
            return FlashStatus;
 8023284:	7efb      	ldrb	r3, [r7, #27]
 8023286:	b29b      	uxth	r3, r3
 8023288:	e185      	b.n	8023596 <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 802328a:	8c3b      	ldrh	r3, [r7, #32]
 802328c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023290:	4293      	cmp	r3, r2
 8023292:	d125      	bne.n	80232e0 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8023294:	4882      	ldr	r0, [pc, #520]	; (80234a0 <EE_Init+0x2a4>)
 8023296:	f000 f98d 	bl	80235b4 <EE_VerifyPageFullyErased>
 802329a:	4603      	mov	r3, r0
 802329c:	2b00      	cmp	r3, #0
 802329e:	d10e      	bne.n	80232be <EE_Init+0xc2>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80232a0:	f107 0214 	add.w	r2, r7, #20
 80232a4:	463b      	mov	r3, r7
 80232a6:	4611      	mov	r1, r2
 80232a8:	4618      	mov	r0, r3
 80232aa:	f7ee ff5f 	bl	801216c <HAL_FLASHEx_Erase>
 80232ae:	4603      	mov	r3, r0
 80232b0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80232b2:	7efb      	ldrb	r3, [r7, #27]
 80232b4:	2b00      	cmp	r3, #0
 80232b6:	d002      	beq.n	80232be <EE_Init+0xc2>
          {
            return FlashStatus;
 80232b8:	7efb      	ldrb	r3, [r7, #27]
 80232ba:	b29b      	uxth	r3, r3
 80232bc:	e16b      	b.n	8023596 <EE_Init+0x39a>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80232be:	f04f 0200 	mov.w	r2, #0
 80232c2:	f04f 0300 	mov.w	r3, #0
 80232c6:	4977      	ldr	r1, [pc, #476]	; (80234a4 <EE_Init+0x2a8>)
 80232c8:	2001      	movs	r0, #1
 80232ca:	f7ee fdaf 	bl	8011e2c <HAL_FLASH_Program>
 80232ce:	4603      	mov	r3, r0
 80232d0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80232d2:	7efb      	ldrb	r3, [r7, #27]
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	f000 8156 	beq.w	8023586 <EE_Init+0x38a>
        {
          return FlashStatus;
 80232da:	7efb      	ldrb	r3, [r7, #27]
 80232dc:	b29b      	uxth	r3, r3
 80232de:	e15a      	b.n	8023596 <EE_Init+0x39a>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80232e0:	f000 f9fa 	bl	80236d8 <EE_Format>
 80232e4:	4603      	mov	r3, r0
 80232e6:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80232e8:	7efb      	ldrb	r3, [r7, #27]
 80232ea:	2b00      	cmp	r3, #0
 80232ec:	f000 814b 	beq.w	8023586 <EE_Init+0x38a>
        {
          return FlashStatus;
 80232f0:	7efb      	ldrb	r3, [r7, #27]
 80232f2:	b29b      	uxth	r3, r3
 80232f4:	e14f      	b.n	8023596 <EE_Init+0x39a>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80232f6:	8c3b      	ldrh	r3, [r7, #32]
 80232f8:	2b00      	cmp	r3, #0
 80232fa:	d163      	bne.n	80233c4 <EE_Init+0x1c8>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80232fc:	2300      	movs	r3, #0
 80232fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023300:	e030      	b.n	8023364 <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8023302:	4b69      	ldr	r3, [pc, #420]	; (80234a8 <EE_Init+0x2ac>)
 8023304:	881b      	ldrh	r3, [r3, #0]
 8023306:	b29a      	uxth	r2, r3
 8023308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802330a:	4968      	ldr	r1, [pc, #416]	; (80234ac <EE_Init+0x2b0>)
 802330c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023310:	429a      	cmp	r2, r3
 8023312:	d101      	bne.n	8023318 <EE_Init+0x11c>
          {
            x = VarIdx;
 8023314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023316:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8023318:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802331a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 802331e:	429a      	cmp	r2, r3
 8023320:	d01d      	beq.n	802335e <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8023322:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023324:	4a61      	ldr	r2, [pc, #388]	; (80234ac <EE_Init+0x2b0>)
 8023326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802332a:	4961      	ldr	r1, [pc, #388]	; (80234b0 <EE_Init+0x2b4>)
 802332c:	4618      	mov	r0, r3
 802332e:	f000 f967 	bl	8023600 <EE_ReadVariable>
 8023332:	4603      	mov	r3, r0
 8023334:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8023336:	8bbb      	ldrh	r3, [r7, #28]
 8023338:	2b01      	cmp	r3, #1
 802333a:	d010      	beq.n	802335e <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 802333c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802333e:	4a5b      	ldr	r2, [pc, #364]	; (80234ac <EE_Init+0x2b0>)
 8023340:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8023344:	4b5a      	ldr	r3, [pc, #360]	; (80234b0 <EE_Init+0x2b4>)
 8023346:	881b      	ldrh	r3, [r3, #0]
 8023348:	4619      	mov	r1, r3
 802334a:	4610      	mov	r0, r2
 802334c:	f000 fa5c 	bl	8023808 <EE_VerifyPageFullWriteVariable>
 8023350:	4603      	mov	r3, r0
 8023352:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8023354:	8bfb      	ldrh	r3, [r7, #30]
 8023356:	2b00      	cmp	r3, #0
 8023358:	d001      	beq.n	802335e <EE_Init+0x162>
              {
                return EepromStatus;
 802335a:	8bfb      	ldrh	r3, [r7, #30]
 802335c:	e11b      	b.n	8023596 <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 802335e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023360:	3301      	adds	r3, #1
 8023362:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023364:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023366:	2b09      	cmp	r3, #9
 8023368:	d9cb      	bls.n	8023302 <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 802336a:	f04f 0200 	mov.w	r2, #0
 802336e:	f04f 0300 	mov.w	r3, #0
 8023372:	494b      	ldr	r1, [pc, #300]	; (80234a0 <EE_Init+0x2a4>)
 8023374:	2001      	movs	r0, #1
 8023376:	f7ee fd59 	bl	8011e2c <HAL_FLASH_Program>
 802337a:	4603      	mov	r3, r0
 802337c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 802337e:	7efb      	ldrb	r3, [r7, #27]
 8023380:	2b00      	cmp	r3, #0
 8023382:	d002      	beq.n	802338a <EE_Init+0x18e>
        {
          return FlashStatus;
 8023384:	7efb      	ldrb	r3, [r7, #27]
 8023386:	b29b      	uxth	r3, r3
 8023388:	e105      	b.n	8023596 <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE1_ID;
 802338a:	2303      	movs	r3, #3
 802338c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 802338e:	2301      	movs	r3, #1
 8023390:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023392:	2302      	movs	r3, #2
 8023394:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8023396:	4843      	ldr	r0, [pc, #268]	; (80234a4 <EE_Init+0x2a8>)
 8023398:	f000 f90c 	bl	80235b4 <EE_VerifyPageFullyErased>
 802339c:	4603      	mov	r3, r0
 802339e:	2b00      	cmp	r3, #0
 80233a0:	f040 80f3 	bne.w	802358a <EE_Init+0x38e>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80233a4:	f107 0214 	add.w	r2, r7, #20
 80233a8:	463b      	mov	r3, r7
 80233aa:	4611      	mov	r1, r2
 80233ac:	4618      	mov	r0, r3
 80233ae:	f7ee fedd 	bl	801216c <HAL_FLASHEx_Erase>
 80233b2:	4603      	mov	r3, r0
 80233b4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80233b6:	7efb      	ldrb	r3, [r7, #27]
 80233b8:	2b00      	cmp	r3, #0
 80233ba:	f000 80e6 	beq.w	802358a <EE_Init+0x38e>
          {
            return FlashStatus;
 80233be:	7efb      	ldrb	r3, [r7, #27]
 80233c0:	b29b      	uxth	r3, r3
 80233c2:	e0e8      	b.n	8023596 <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 80233c4:	8c3b      	ldrh	r3, [r7, #32]
 80233c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80233ca:	4293      	cmp	r3, r2
 80233cc:	d12b      	bne.n	8023426 <EE_Init+0x22a>
      {
        pEraseInit.Sector = PAGE1_ID;
 80233ce:	2303      	movs	r3, #3
 80233d0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80233d2:	2301      	movs	r3, #1
 80233d4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80233d6:	2302      	movs	r3, #2
 80233d8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80233da:	4832      	ldr	r0, [pc, #200]	; (80234a4 <EE_Init+0x2a8>)
 80233dc:	f000 f8ea 	bl	80235b4 <EE_VerifyPageFullyErased>
 80233e0:	4603      	mov	r3, r0
 80233e2:	2b00      	cmp	r3, #0
 80233e4:	d10e      	bne.n	8023404 <EE_Init+0x208>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80233e6:	f107 0214 	add.w	r2, r7, #20
 80233ea:	463b      	mov	r3, r7
 80233ec:	4611      	mov	r1, r2
 80233ee:	4618      	mov	r0, r3
 80233f0:	f7ee febc 	bl	801216c <HAL_FLASHEx_Erase>
 80233f4:	4603      	mov	r3, r0
 80233f6:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80233f8:	7efb      	ldrb	r3, [r7, #27]
 80233fa:	2b00      	cmp	r3, #0
 80233fc:	d002      	beq.n	8023404 <EE_Init+0x208>
          {
            return FlashStatus;
 80233fe:	7efb      	ldrb	r3, [r7, #27]
 8023400:	b29b      	uxth	r3, r3
 8023402:	e0c8      	b.n	8023596 <EE_Init+0x39a>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8023404:	f04f 0200 	mov.w	r2, #0
 8023408:	f04f 0300 	mov.w	r3, #0
 802340c:	4924      	ldr	r1, [pc, #144]	; (80234a0 <EE_Init+0x2a4>)
 802340e:	2001      	movs	r0, #1
 8023410:	f7ee fd0c 	bl	8011e2c <HAL_FLASH_Program>
 8023414:	4603      	mov	r3, r0
 8023416:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023418:	7efb      	ldrb	r3, [r7, #27]
 802341a:	2b00      	cmp	r3, #0
 802341c:	f000 80b5 	beq.w	802358a <EE_Init+0x38e>
        {
          return FlashStatus;
 8023420:	7efb      	ldrb	r3, [r7, #27]
 8023422:	b29b      	uxth	r3, r3
 8023424:	e0b7      	b.n	8023596 <EE_Init+0x39a>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8023426:	f000 f957 	bl	80236d8 <EE_Format>
 802342a:	4603      	mov	r3, r0
 802342c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 802342e:	7efb      	ldrb	r3, [r7, #27]
 8023430:	2b00      	cmp	r3, #0
 8023432:	f000 80aa 	beq.w	802358a <EE_Init+0x38e>
        {
          return FlashStatus;
 8023436:	7efb      	ldrb	r3, [r7, #27]
 8023438:	b29b      	uxth	r3, r3
 802343a:	e0ac      	b.n	8023596 <EE_Init+0x39a>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 802343c:	8c3b      	ldrh	r3, [r7, #32]
 802343e:	2b00      	cmp	r3, #0
 8023440:	d10a      	bne.n	8023458 <EE_Init+0x25c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8023442:	f000 f949 	bl	80236d8 <EE_Format>
 8023446:	4603      	mov	r3, r0
 8023448:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 802344a:	7efb      	ldrb	r3, [r7, #27]
 802344c:	2b00      	cmp	r3, #0
 802344e:	f000 809e 	beq.w	802358e <EE_Init+0x392>
        {
          return FlashStatus;
 8023452:	7efb      	ldrb	r3, [r7, #27]
 8023454:	b29b      	uxth	r3, r3
 8023456:	e09e      	b.n	8023596 <EE_Init+0x39a>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8023458:	8c3b      	ldrh	r3, [r7, #32]
 802345a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802345e:	4293      	cmp	r3, r2
 8023460:	d11b      	bne.n	802349a <EE_Init+0x29e>
      {
        pEraseInit.Sector = PAGE1_ID;
 8023462:	2303      	movs	r3, #3
 8023464:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8023466:	2301      	movs	r3, #1
 8023468:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 802346a:	2302      	movs	r3, #2
 802346c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 802346e:	480d      	ldr	r0, [pc, #52]	; (80234a4 <EE_Init+0x2a8>)
 8023470:	f000 f8a0 	bl	80235b4 <EE_VerifyPageFullyErased>
 8023474:	4603      	mov	r3, r0
 8023476:	2b00      	cmp	r3, #0
 8023478:	f040 8089 	bne.w	802358e <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 802347c:	f107 0214 	add.w	r2, r7, #20
 8023480:	463b      	mov	r3, r7
 8023482:	4611      	mov	r1, r2
 8023484:	4618      	mov	r0, r3
 8023486:	f7ee fe71 	bl	801216c <HAL_FLASHEx_Erase>
 802348a:	4603      	mov	r3, r0
 802348c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 802348e:	7efb      	ldrb	r3, [r7, #27]
 8023490:	2b00      	cmp	r3, #0
 8023492:	d07c      	beq.n	802358e <EE_Init+0x392>
          {
            return FlashStatus;
 8023494:	7efb      	ldrb	r3, [r7, #27]
 8023496:	b29b      	uxth	r3, r3
 8023498:	e07d      	b.n	8023596 <EE_Init+0x39a>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 802349a:	2300      	movs	r3, #0
 802349c:	84fb      	strh	r3, [r7, #38]	; 0x26
 802349e:	e03a      	b.n	8023516 <EE_Init+0x31a>
 80234a0:	08008000 	.word	0x08008000
 80234a4:	0800c000 	.word	0x0800c000
 80234a8:	08008006 	.word	0x08008006
 80234ac:	20000010 	.word	0x20000010
 80234b0:	2000952c 	.word	0x2000952c
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80234b4:	4b3a      	ldr	r3, [pc, #232]	; (80235a0 <EE_Init+0x3a4>)
 80234b6:	881b      	ldrh	r3, [r3, #0]
 80234b8:	b29a      	uxth	r2, r3
 80234ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80234bc:	4939      	ldr	r1, [pc, #228]	; (80235a4 <EE_Init+0x3a8>)
 80234be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80234c2:	429a      	cmp	r2, r3
 80234c4:	d101      	bne.n	80234ca <EE_Init+0x2ce>
          {
            x = VarIdx;
 80234c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80234c8:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80234ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80234cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80234d0:	429a      	cmp	r2, r3
 80234d2:	d01d      	beq.n	8023510 <EE_Init+0x314>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80234d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80234d6:	4a33      	ldr	r2, [pc, #204]	; (80235a4 <EE_Init+0x3a8>)
 80234d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80234dc:	4932      	ldr	r1, [pc, #200]	; (80235a8 <EE_Init+0x3ac>)
 80234de:	4618      	mov	r0, r3
 80234e0:	f000 f88e 	bl	8023600 <EE_ReadVariable>
 80234e4:	4603      	mov	r3, r0
 80234e6:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80234e8:	8bbb      	ldrh	r3, [r7, #28]
 80234ea:	2b01      	cmp	r3, #1
 80234ec:	d010      	beq.n	8023510 <EE_Init+0x314>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80234ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80234f0:	4a2c      	ldr	r2, [pc, #176]	; (80235a4 <EE_Init+0x3a8>)
 80234f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80234f6:	4b2c      	ldr	r3, [pc, #176]	; (80235a8 <EE_Init+0x3ac>)
 80234f8:	881b      	ldrh	r3, [r3, #0]
 80234fa:	4619      	mov	r1, r3
 80234fc:	4610      	mov	r0, r2
 80234fe:	f000 f983 	bl	8023808 <EE_VerifyPageFullWriteVariable>
 8023502:	4603      	mov	r3, r0
 8023504:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8023506:	8bfb      	ldrh	r3, [r7, #30]
 8023508:	2b00      	cmp	r3, #0
 802350a:	d001      	beq.n	8023510 <EE_Init+0x314>
              {
                return EepromStatus;
 802350c:	8bfb      	ldrh	r3, [r7, #30]
 802350e:	e042      	b.n	8023596 <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023510:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023512:	3301      	adds	r3, #1
 8023514:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023516:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023518:	2b09      	cmp	r3, #9
 802351a:	d9cb      	bls.n	80234b4 <EE_Init+0x2b8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 802351c:	f04f 0200 	mov.w	r2, #0
 8023520:	f04f 0300 	mov.w	r3, #0
 8023524:	4921      	ldr	r1, [pc, #132]	; (80235ac <EE_Init+0x3b0>)
 8023526:	2001      	movs	r0, #1
 8023528:	f7ee fc80 	bl	8011e2c <HAL_FLASH_Program>
 802352c:	4603      	mov	r3, r0
 802352e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8023530:	7efb      	ldrb	r3, [r7, #27]
 8023532:	2b00      	cmp	r3, #0
 8023534:	d002      	beq.n	802353c <EE_Init+0x340>
        {
          return FlashStatus;
 8023536:	7efb      	ldrb	r3, [r7, #27]
 8023538:	b29b      	uxth	r3, r3
 802353a:	e02c      	b.n	8023596 <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE0_ID;
 802353c:	2302      	movs	r3, #2
 802353e:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8023540:	2301      	movs	r3, #1
 8023542:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8023544:	2302      	movs	r3, #2
 8023546:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8023548:	4819      	ldr	r0, [pc, #100]	; (80235b0 <EE_Init+0x3b4>)
 802354a:	f000 f833 	bl	80235b4 <EE_VerifyPageFullyErased>
 802354e:	4603      	mov	r3, r0
 8023550:	2b00      	cmp	r3, #0
 8023552:	d11c      	bne.n	802358e <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8023554:	f107 0214 	add.w	r2, r7, #20
 8023558:	463b      	mov	r3, r7
 802355a:	4611      	mov	r1, r2
 802355c:	4618      	mov	r0, r3
 802355e:	f7ee fe05 	bl	801216c <HAL_FLASHEx_Erase>
 8023562:	4603      	mov	r3, r0
 8023564:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8023566:	7efb      	ldrb	r3, [r7, #27]
 8023568:	2b00      	cmp	r3, #0
 802356a:	d010      	beq.n	802358e <EE_Init+0x392>
          {
            return FlashStatus;
 802356c:	7efb      	ldrb	r3, [r7, #27]
 802356e:	b29b      	uxth	r3, r3
 8023570:	e011      	b.n	8023596 <EE_Init+0x39a>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8023572:	f000 f8b1 	bl	80236d8 <EE_Format>
 8023576:	4603      	mov	r3, r0
 8023578:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 802357a:	7efb      	ldrb	r3, [r7, #27]
 802357c:	2b00      	cmp	r3, #0
 802357e:	d008      	beq.n	8023592 <EE_Init+0x396>
      {
        return FlashStatus;
 8023580:	7efb      	ldrb	r3, [r7, #27]
 8023582:	b29b      	uxth	r3, r3
 8023584:	e007      	b.n	8023596 <EE_Init+0x39a>
      break;
 8023586:	bf00      	nop
 8023588:	e004      	b.n	8023594 <EE_Init+0x398>
      break;
 802358a:	bf00      	nop
 802358c:	e002      	b.n	8023594 <EE_Init+0x398>
      break;
 802358e:	bf00      	nop
 8023590:	e000      	b.n	8023594 <EE_Init+0x398>
      }
      break;
 8023592:	bf00      	nop
  }

  return HAL_OK;
 8023594:	2300      	movs	r3, #0
}
 8023596:	4618      	mov	r0, r3
 8023598:	3728      	adds	r7, #40	; 0x28
 802359a:	46bd      	mov	sp, r7
 802359c:	bd80      	pop	{r7, pc}
 802359e:	bf00      	nop
 80235a0:	0800c006 	.word	0x0800c006
 80235a4:	20000010 	.word	0x20000010
 80235a8:	2000952c 	.word	0x2000952c
 80235ac:	0800c000 	.word	0x0800c000
 80235b0:	08008000 	.word	0x08008000

080235b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80235b4:	b480      	push	{r7}
 80235b6:	b085      	sub	sp, #20
 80235b8:	af00      	add	r7, sp, #0
 80235ba:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 80235bc:	2301      	movs	r3, #1
 80235be:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 80235c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80235c4:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 80235c6:	e00d      	b.n	80235e4 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	881b      	ldrh	r3, [r3, #0]
 80235cc:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80235ce:	897b      	ldrh	r3, [r7, #10]
 80235d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80235d4:	4293      	cmp	r3, r2
 80235d6:	d002      	beq.n	80235de <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80235d8:	2300      	movs	r3, #0
 80235da:	60fb      	str	r3, [r7, #12]

      break;
 80235dc:	e006      	b.n	80235ec <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80235de:	687b      	ldr	r3, [r7, #4]
 80235e0:	3304      	adds	r3, #4
 80235e2:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80235e4:	687b      	ldr	r3, [r7, #4]
 80235e6:	4a05      	ldr	r2, [pc, #20]	; (80235fc <EE_VerifyPageFullyErased+0x48>)
 80235e8:	4293      	cmp	r3, r2
 80235ea:	d9ed      	bls.n	80235c8 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80235ec:	68fb      	ldr	r3, [r7, #12]
 80235ee:	b29b      	uxth	r3, r3
}
 80235f0:	4618      	mov	r0, r3
 80235f2:	3714      	adds	r7, #20
 80235f4:	46bd      	mov	sp, r7
 80235f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235fa:	4770      	bx	lr
 80235fc:	0800bfff 	.word	0x0800bfff

08023600 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8023600:	b580      	push	{r7, lr}
 8023602:	b086      	sub	sp, #24
 8023604:	af00      	add	r7, sp, #0
 8023606:	4603      	mov	r3, r0
 8023608:	6039      	str	r1, [r7, #0]
 802360a:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 802360c:	2300      	movs	r3, #0
 802360e:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8023610:	f245 5355 	movw	r3, #21845	; 0x5555
 8023614:	81bb      	strh	r3, [r7, #12]
 8023616:	2301      	movs	r3, #1
 8023618:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 802361a:	4b1c      	ldr	r3, [pc, #112]	; (802368c <EE_ReadVariable+0x8c>)
 802361c:	613b      	str	r3, [r7, #16]
 802361e:	4b1b      	ldr	r3, [pc, #108]	; (802368c <EE_ReadVariable+0x8c>)
 8023620:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8023622:	2000      	movs	r0, #0
 8023624:	f000 f8aa 	bl	802377c <EE_FindValidPage>
 8023628:	4603      	mov	r3, r0
 802362a:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 802362c:	89fb      	ldrh	r3, [r7, #14]
 802362e:	2bab      	cmp	r3, #171	; 0xab
 8023630:	d101      	bne.n	8023636 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8023632:	23ab      	movs	r3, #171	; 0xab
 8023634:	e025      	b.n	8023682 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8023636:	89fb      	ldrh	r3, [r7, #14]
 8023638:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802363c:	3302      	adds	r3, #2
 802363e:	039b      	lsls	r3, r3, #14
 8023640:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8023642:	89fb      	ldrh	r3, [r7, #14]
 8023644:	3301      	adds	r3, #1
 8023646:	039a      	lsls	r2, r3, #14
 8023648:	4b11      	ldr	r3, [pc, #68]	; (8023690 <EE_ReadVariable+0x90>)
 802364a:	4413      	add	r3, r2
 802364c:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 802364e:	e012      	b.n	8023676 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8023650:	693b      	ldr	r3, [r7, #16]
 8023652:	881b      	ldrh	r3, [r3, #0]
 8023654:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8023656:	89ba      	ldrh	r2, [r7, #12]
 8023658:	88fb      	ldrh	r3, [r7, #6]
 802365a:	429a      	cmp	r2, r3
 802365c:	d108      	bne.n	8023670 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 802365e:	693b      	ldr	r3, [r7, #16]
 8023660:	3b02      	subs	r3, #2
 8023662:	881b      	ldrh	r3, [r3, #0]
 8023664:	b29a      	uxth	r2, r3
 8023666:	683b      	ldr	r3, [r7, #0]
 8023668:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 802366a:	2300      	movs	r3, #0
 802366c:	82fb      	strh	r3, [r7, #22]

      break;
 802366e:	e007      	b.n	8023680 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8023670:	693b      	ldr	r3, [r7, #16]
 8023672:	3b04      	subs	r3, #4
 8023674:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8023676:	68bb      	ldr	r3, [r7, #8]
 8023678:	1c9a      	adds	r2, r3, #2
 802367a:	693b      	ldr	r3, [r7, #16]
 802367c:	429a      	cmp	r2, r3
 802367e:	d3e7      	bcc.n	8023650 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8023680:	8afb      	ldrh	r3, [r7, #22]
}
 8023682:	4618      	mov	r0, r3
 8023684:	3718      	adds	r7, #24
 8023686:	46bd      	mov	sp, r7
 8023688:	bd80      	pop	{r7, pc}
 802368a:	bf00      	nop
 802368c:	08008000 	.word	0x08008000
 8023690:	08007ffe 	.word	0x08007ffe

08023694 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8023694:	b580      	push	{r7, lr}
 8023696:	b084      	sub	sp, #16
 8023698:	af00      	add	r7, sp, #0
 802369a:	4603      	mov	r3, r0
 802369c:	460a      	mov	r2, r1
 802369e:	80fb      	strh	r3, [r7, #6]
 80236a0:	4613      	mov	r3, r2
 80236a2:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80236a4:	2300      	movs	r3, #0
 80236a6:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80236a8:	88ba      	ldrh	r2, [r7, #4]
 80236aa:	88fb      	ldrh	r3, [r7, #6]
 80236ac:	4611      	mov	r1, r2
 80236ae:	4618      	mov	r0, r3
 80236b0:	f000 f8aa 	bl	8023808 <EE_VerifyPageFullWriteVariable>
 80236b4:	4603      	mov	r3, r0
 80236b6:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80236b8:	89fb      	ldrh	r3, [r7, #14]
 80236ba:	2b80      	cmp	r3, #128	; 0x80
 80236bc:	d107      	bne.n	80236ce <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80236be:	88ba      	ldrh	r2, [r7, #4]
 80236c0:	88fb      	ldrh	r3, [r7, #6]
 80236c2:	4611      	mov	r1, r2
 80236c4:	4618      	mov	r0, r3
 80236c6:	f000 f8fd 	bl	80238c4 <EE_PageTransfer>
 80236ca:	4603      	mov	r3, r0
 80236cc:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80236ce:	89fb      	ldrh	r3, [r7, #14]
}
 80236d0:	4618      	mov	r0, r3
 80236d2:	3710      	adds	r7, #16
 80236d4:	46bd      	mov	sp, r7
 80236d6:	bd80      	pop	{r7, pc}

080236d8 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80236d8:	b580      	push	{r7, lr}
 80236da:	b088      	sub	sp, #32
 80236dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80236de:	2300      	movs	r3, #0
 80236e0:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 80236e2:	2300      	movs	r3, #0
 80236e4:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 80236e6:	2300      	movs	r3, #0
 80236e8:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 80236ea:	2302      	movs	r3, #2
 80236ec:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 80236ee:	2301      	movs	r3, #1
 80236f0:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80236f2:	2302      	movs	r3, #2
 80236f4:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80236f6:	481f      	ldr	r0, [pc, #124]	; (8023774 <EE_Format+0x9c>)
 80236f8:	f7ff ff5c 	bl	80235b4 <EE_VerifyPageFullyErased>
 80236fc:	4603      	mov	r3, r0
 80236fe:	2b00      	cmp	r3, #0
 8023700:	d10d      	bne.n	802371e <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8023702:	f107 0218 	add.w	r2, r7, #24
 8023706:	1d3b      	adds	r3, r7, #4
 8023708:	4611      	mov	r1, r2
 802370a:	4618      	mov	r0, r3
 802370c:	f7ee fd2e 	bl	801216c <HAL_FLASHEx_Erase>
 8023710:	4603      	mov	r3, r0
 8023712:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8023714:	7ffb      	ldrb	r3, [r7, #31]
 8023716:	2b00      	cmp	r3, #0
 8023718:	d001      	beq.n	802371e <EE_Format+0x46>
    {
      return FlashStatus;
 802371a:	7ffb      	ldrb	r3, [r7, #31]
 802371c:	e025      	b.n	802376a <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 802371e:	f04f 0200 	mov.w	r2, #0
 8023722:	f04f 0300 	mov.w	r3, #0
 8023726:	4913      	ldr	r1, [pc, #76]	; (8023774 <EE_Format+0x9c>)
 8023728:	2001      	movs	r0, #1
 802372a:	f7ee fb7f 	bl	8011e2c <HAL_FLASH_Program>
 802372e:	4603      	mov	r3, r0
 8023730:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023732:	7ffb      	ldrb	r3, [r7, #31]
 8023734:	2b00      	cmp	r3, #0
 8023736:	d001      	beq.n	802373c <EE_Format+0x64>
  {
    return FlashStatus;
 8023738:	7ffb      	ldrb	r3, [r7, #31]
 802373a:	e016      	b.n	802376a <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 802373c:	2303      	movs	r3, #3
 802373e:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8023740:	480d      	ldr	r0, [pc, #52]	; (8023778 <EE_Format+0xa0>)
 8023742:	f7ff ff37 	bl	80235b4 <EE_VerifyPageFullyErased>
 8023746:	4603      	mov	r3, r0
 8023748:	2b00      	cmp	r3, #0
 802374a:	d10d      	bne.n	8023768 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 802374c:	f107 0218 	add.w	r2, r7, #24
 8023750:	1d3b      	adds	r3, r7, #4
 8023752:	4611      	mov	r1, r2
 8023754:	4618      	mov	r0, r3
 8023756:	f7ee fd09 	bl	801216c <HAL_FLASHEx_Erase>
 802375a:	4603      	mov	r3, r0
 802375c:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 802375e:	7ffb      	ldrb	r3, [r7, #31]
 8023760:	2b00      	cmp	r3, #0
 8023762:	d001      	beq.n	8023768 <EE_Format+0x90>
    {
      return FlashStatus;
 8023764:	7ffb      	ldrb	r3, [r7, #31]
 8023766:	e000      	b.n	802376a <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8023768:	2300      	movs	r3, #0
}
 802376a:	4618      	mov	r0, r3
 802376c:	3720      	adds	r7, #32
 802376e:	46bd      	mov	sp, r7
 8023770:	bd80      	pop	{r7, pc}
 8023772:	bf00      	nop
 8023774:	08008000 	.word	0x08008000
 8023778:	0800c000 	.word	0x0800c000

0802377c <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 802377c:	b480      	push	{r7}
 802377e:	b085      	sub	sp, #20
 8023780:	af00      	add	r7, sp, #0
 8023782:	4603      	mov	r3, r0
 8023784:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8023786:	2306      	movs	r3, #6
 8023788:	81fb      	strh	r3, [r7, #14]
 802378a:	2306      	movs	r3, #6
 802378c:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 802378e:	4b1c      	ldr	r3, [pc, #112]	; (8023800 <EE_FindValidPage+0x84>)
 8023790:	881b      	ldrh	r3, [r3, #0]
 8023792:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8023794:	4b1b      	ldr	r3, [pc, #108]	; (8023804 <EE_FindValidPage+0x88>)
 8023796:	881b      	ldrh	r3, [r3, #0]
 8023798:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 802379a:	79fb      	ldrb	r3, [r7, #7]
 802379c:	2b00      	cmp	r3, #0
 802379e:	d01b      	beq.n	80237d8 <EE_FindValidPage+0x5c>
 80237a0:	2b01      	cmp	r3, #1
 80237a2:	d125      	bne.n	80237f0 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80237a4:	89bb      	ldrh	r3, [r7, #12]
 80237a6:	2b00      	cmp	r3, #0
 80237a8:	d108      	bne.n	80237bc <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80237aa:	89fb      	ldrh	r3, [r7, #14]
 80237ac:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80237b0:	4293      	cmp	r3, r2
 80237b2:	d101      	bne.n	80237b8 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80237b4:	2300      	movs	r3, #0
 80237b6:	e01c      	b.n	80237f2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80237b8:	2301      	movs	r3, #1
 80237ba:	e01a      	b.n	80237f2 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 80237bc:	89fb      	ldrh	r3, [r7, #14]
 80237be:	2b00      	cmp	r3, #0
 80237c0:	d108      	bne.n	80237d4 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 80237c2:	89bb      	ldrh	r3, [r7, #12]
 80237c4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80237c8:	4293      	cmp	r3, r2
 80237ca:	d101      	bne.n	80237d0 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80237cc:	2301      	movs	r3, #1
 80237ce:	e010      	b.n	80237f2 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80237d0:	2300      	movs	r3, #0
 80237d2:	e00e      	b.n	80237f2 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80237d4:	23ab      	movs	r3, #171	; 0xab
 80237d6:	e00c      	b.n	80237f2 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 80237d8:	89fb      	ldrh	r3, [r7, #14]
 80237da:	2b00      	cmp	r3, #0
 80237dc:	d101      	bne.n	80237e2 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 80237de:	2300      	movs	r3, #0
 80237e0:	e007      	b.n	80237f2 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 80237e2:	89bb      	ldrh	r3, [r7, #12]
 80237e4:	2b00      	cmp	r3, #0
 80237e6:	d101      	bne.n	80237ec <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 80237e8:	2301      	movs	r3, #1
 80237ea:	e002      	b.n	80237f2 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 80237ec:	23ab      	movs	r3, #171	; 0xab
 80237ee:	e000      	b.n	80237f2 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80237f0:	2300      	movs	r3, #0
  }
}
 80237f2:	4618      	mov	r0, r3
 80237f4:	3714      	adds	r7, #20
 80237f6:	46bd      	mov	sp, r7
 80237f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237fc:	4770      	bx	lr
 80237fe:	bf00      	nop
 8023800:	08008000 	.word	0x08008000
 8023804:	0800c000 	.word	0x0800c000

08023808 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8023808:	b590      	push	{r4, r7, lr}
 802380a:	b087      	sub	sp, #28
 802380c:	af00      	add	r7, sp, #0
 802380e:	4603      	mov	r3, r0
 8023810:	460a      	mov	r2, r1
 8023812:	80fb      	strh	r3, [r7, #6]
 8023814:	4613      	mov	r3, r2
 8023816:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8023818:	2300      	movs	r3, #0
 802381a:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 802381c:	2300      	movs	r3, #0
 802381e:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8023820:	4b25      	ldr	r3, [pc, #148]	; (80238b8 <EE_VerifyPageFullWriteVariable+0xb0>)
 8023822:	617b      	str	r3, [r7, #20]
 8023824:	4b25      	ldr	r3, [pc, #148]	; (80238bc <EE_VerifyPageFullWriteVariable+0xb4>)
 8023826:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8023828:	2001      	movs	r0, #1
 802382a:	f7ff ffa7 	bl	802377c <EE_FindValidPage>
 802382e:	4603      	mov	r3, r0
 8023830:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8023832:	8a3b      	ldrh	r3, [r7, #16]
 8023834:	2bab      	cmp	r3, #171	; 0xab
 8023836:	d101      	bne.n	802383c <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8023838:	23ab      	movs	r3, #171	; 0xab
 802383a:	e039      	b.n	80238b0 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 802383c:	8a3b      	ldrh	r3, [r7, #16]
 802383e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023842:	3302      	adds	r3, #2
 8023844:	039b      	lsls	r3, r3, #14
 8023846:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8023848:	8a3b      	ldrh	r3, [r7, #16]
 802384a:	3301      	adds	r3, #1
 802384c:	039a      	lsls	r2, r3, #14
 802384e:	4b1c      	ldr	r3, [pc, #112]	; (80238c0 <EE_VerifyPageFullWriteVariable+0xb8>)
 8023850:	4413      	add	r3, r2
 8023852:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8023854:	e027      	b.n	80238a6 <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8023856:	697b      	ldr	r3, [r7, #20]
 8023858:	681b      	ldr	r3, [r3, #0]
 802385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802385e:	d11f      	bne.n	80238a0 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8023860:	88bb      	ldrh	r3, [r7, #4]
 8023862:	f04f 0400 	mov.w	r4, #0
 8023866:	461a      	mov	r2, r3
 8023868:	4623      	mov	r3, r4
 802386a:	6979      	ldr	r1, [r7, #20]
 802386c:	2001      	movs	r0, #1
 802386e:	f7ee fadd 	bl	8011e2c <HAL_FLASH_Program>
 8023872:	4603      	mov	r3, r0
 8023874:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8023876:	7cfb      	ldrb	r3, [r7, #19]
 8023878:	2b00      	cmp	r3, #0
 802387a:	d002      	beq.n	8023882 <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return FlashStatus;
 802387c:	7cfb      	ldrb	r3, [r7, #19]
 802387e:	b29b      	uxth	r3, r3
 8023880:	e016      	b.n	80238b0 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8023882:	697b      	ldr	r3, [r7, #20]
 8023884:	1c99      	adds	r1, r3, #2
 8023886:	88fb      	ldrh	r3, [r7, #6]
 8023888:	f04f 0400 	mov.w	r4, #0
 802388c:	461a      	mov	r2, r3
 802388e:	4623      	mov	r3, r4
 8023890:	2001      	movs	r0, #1
 8023892:	f7ee facb 	bl	8011e2c <HAL_FLASH_Program>
 8023896:	4603      	mov	r3, r0
 8023898:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 802389a:	7cfb      	ldrb	r3, [r7, #19]
 802389c:	b29b      	uxth	r3, r3
 802389e:	e007      	b.n	80238b0 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80238a0:	697b      	ldr	r3, [r7, #20]
 80238a2:	3304      	adds	r3, #4
 80238a4:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80238a6:	697a      	ldr	r2, [r7, #20]
 80238a8:	68fb      	ldr	r3, [r7, #12]
 80238aa:	429a      	cmp	r2, r3
 80238ac:	d3d3      	bcc.n	8023856 <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80238ae:	2380      	movs	r3, #128	; 0x80
}
 80238b0:	4618      	mov	r0, r3
 80238b2:	371c      	adds	r7, #28
 80238b4:	46bd      	mov	sp, r7
 80238b6:	bd90      	pop	{r4, r7, pc}
 80238b8:	08008000 	.word	0x08008000
 80238bc:	0800c000 	.word	0x0800c000
 80238c0:	08007fff 	.word	0x08007fff

080238c4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80238c4:	b580      	push	{r7, lr}
 80238c6:	b08c      	sub	sp, #48	; 0x30
 80238c8:	af00      	add	r7, sp, #0
 80238ca:	4603      	mov	r3, r0
 80238cc:	460a      	mov	r2, r1
 80238ce:	80fb      	strh	r3, [r7, #6]
 80238d0:	4613      	mov	r3, r2
 80238d2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80238d4:	2300      	movs	r3, #0
 80238d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 80238da:	4b54      	ldr	r3, [pc, #336]	; (8023a2c <EE_PageTransfer+0x168>)
 80238dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 80238de:	2300      	movs	r3, #0
 80238e0:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 80238e2:	2300      	movs	r3, #0
 80238e4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80238e6:	2300      	movs	r3, #0
 80238e8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80238ea:	2300      	movs	r3, #0
 80238ec:	847b      	strh	r3, [r7, #34]	; 0x22
 80238ee:	2300      	movs	r3, #0
 80238f0:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 80238f2:	2300      	movs	r3, #0
 80238f4:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80238f6:	2000      	movs	r0, #0
 80238f8:	f7ff ff40 	bl	802377c <EE_FindValidPage>
 80238fc:	4603      	mov	r3, r0
 80238fe:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8023900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023902:	2b01      	cmp	r3, #1
 8023904:	d104      	bne.n	8023910 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8023906:	4b49      	ldr	r3, [pc, #292]	; (8023a2c <EE_PageTransfer+0x168>)
 8023908:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 802390a:	2303      	movs	r3, #3
 802390c:	857b      	strh	r3, [r7, #42]	; 0x2a
 802390e:	e009      	b.n	8023924 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8023910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023912:	2b00      	cmp	r3, #0
 8023914:	d104      	bne.n	8023920 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8023916:	4b46      	ldr	r3, [pc, #280]	; (8023a30 <EE_PageTransfer+0x16c>)
 8023918:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 802391a:	2302      	movs	r3, #2
 802391c:	857b      	strh	r3, [r7, #42]	; 0x2a
 802391e:	e001      	b.n	8023924 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8023920:	23ab      	movs	r3, #171	; 0xab
 8023922:	e07e      	b.n	8023a22 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8023924:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8023928:	f04f 0300 	mov.w	r3, #0
 802392c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802392e:	2001      	movs	r0, #1
 8023930:	f7ee fa7c 	bl	8011e2c <HAL_FLASH_Program>
 8023934:	4603      	mov	r3, r0
 8023936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 802393a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802393e:	2b00      	cmp	r3, #0
 8023940:	d003      	beq.n	802394a <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8023942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023946:	b29b      	uxth	r3, r3
 8023948:	e06b      	b.n	8023a22 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 802394a:	88ba      	ldrh	r2, [r7, #4]
 802394c:	88fb      	ldrh	r3, [r7, #6]
 802394e:	4611      	mov	r1, r2
 8023950:	4618      	mov	r0, r3
 8023952:	f7ff ff59 	bl	8023808 <EE_VerifyPageFullWriteVariable>
 8023956:	4603      	mov	r3, r0
 8023958:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 802395a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802395c:	2b00      	cmp	r3, #0
 802395e:	d001      	beq.n	8023964 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8023960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023962:	e05e      	b.n	8023a22 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8023964:	2300      	movs	r3, #0
 8023966:	853b      	strh	r3, [r7, #40]	; 0x28
 8023968:	e027      	b.n	80239ba <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 802396a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802396c:	4a31      	ldr	r2, [pc, #196]	; (8023a34 <EE_PageTransfer+0x170>)
 802396e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023972:	88fa      	ldrh	r2, [r7, #6]
 8023974:	429a      	cmp	r2, r3
 8023976:	d01d      	beq.n	80239b4 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8023978:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802397a:	4a2e      	ldr	r2, [pc, #184]	; (8023a34 <EE_PageTransfer+0x170>)
 802397c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023980:	492d      	ldr	r1, [pc, #180]	; (8023a38 <EE_PageTransfer+0x174>)
 8023982:	4618      	mov	r0, r3
 8023984:	f7ff fe3c 	bl	8023600 <EE_ReadVariable>
 8023988:	4603      	mov	r3, r0
 802398a:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 802398c:	8c3b      	ldrh	r3, [r7, #32]
 802398e:	2b01      	cmp	r3, #1
 8023990:	d010      	beq.n	80239b4 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8023992:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8023994:	4a27      	ldr	r2, [pc, #156]	; (8023a34 <EE_PageTransfer+0x170>)
 8023996:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 802399a:	4b27      	ldr	r3, [pc, #156]	; (8023a38 <EE_PageTransfer+0x174>)
 802399c:	881b      	ldrh	r3, [r3, #0]
 802399e:	4619      	mov	r1, r3
 80239a0:	4610      	mov	r0, r2
 80239a2:	f7ff ff31 	bl	8023808 <EE_VerifyPageFullWriteVariable>
 80239a6:	4603      	mov	r3, r0
 80239a8:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80239aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80239ac:	2b00      	cmp	r3, #0
 80239ae:	d001      	beq.n	80239b4 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 80239b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80239b2:	e036      	b.n	8023a22 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80239b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80239b6:	3301      	adds	r3, #1
 80239b8:	853b      	strh	r3, [r7, #40]	; 0x28
 80239ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80239bc:	2b09      	cmp	r3, #9
 80239be:	d9d4      	bls.n	802396a <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80239c0:	2300      	movs	r3, #0
 80239c2:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 80239c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80239c6:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 80239c8:	2301      	movs	r3, #1
 80239ca:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80239cc:	2302      	movs	r3, #2
 80239ce:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 80239d0:	f107 021c 	add.w	r2, r7, #28
 80239d4:	f107 0308 	add.w	r3, r7, #8
 80239d8:	4611      	mov	r1, r2
 80239da:	4618      	mov	r0, r3
 80239dc:	f7ee fbc6 	bl	801216c <HAL_FLASHEx_Erase>
 80239e0:	4603      	mov	r3, r0
 80239e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80239e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	d003      	beq.n	80239f6 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 80239ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80239f2:	b29b      	uxth	r3, r3
 80239f4:	e015      	b.n	8023a22 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 80239f6:	f04f 0200 	mov.w	r2, #0
 80239fa:	f04f 0300 	mov.w	r3, #0
 80239fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023a00:	2001      	movs	r0, #1
 8023a02:	f7ee fa13 	bl	8011e2c <HAL_FLASH_Program>
 8023a06:	4603      	mov	r3, r0
 8023a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8023a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023a10:	2b00      	cmp	r3, #0
 8023a12:	d003      	beq.n	8023a1c <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8023a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023a18:	b29b      	uxth	r3, r3
 8023a1a:	e002      	b.n	8023a22 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8023a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023a20:	b29b      	uxth	r3, r3
}
 8023a22:	4618      	mov	r0, r3
 8023a24:	3730      	adds	r7, #48	; 0x30
 8023a26:	46bd      	mov	sp, r7
 8023a28:	bd80      	pop	{r7, pc}
 8023a2a:	bf00      	nop
 8023a2c:	08008000 	.word	0x08008000
 8023a30:	0800c000 	.word	0x0800c000
 8023a34:	20000010 	.word	0x20000010
 8023a38:	2000952c 	.word	0x2000952c

08023a3c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8023a3c:	b580      	push	{r7, lr}
 8023a3e:	b08a      	sub	sp, #40	; 0x28
 8023a40:	af00      	add	r7, sp, #0
 8023a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 8023a44:	687b      	ldr	r3, [r7, #4]
 8023a46:	681b      	ldr	r3, [r3, #0]
 8023a48:	4a34      	ldr	r2, [pc, #208]	; (8023b1c <HAL_ETH_MspInit+0xe0>)
 8023a4a:	4293      	cmp	r3, r2
 8023a4c:	d162      	bne.n	8023b14 <HAL_ETH_MspInit+0xd8>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8023a4e:	2300      	movs	r3, #0
 8023a50:	613b      	str	r3, [r7, #16]
 8023a52:	4a33      	ldr	r2, [pc, #204]	; (8023b20 <HAL_ETH_MspInit+0xe4>)
 8023a54:	4b32      	ldr	r3, [pc, #200]	; (8023b20 <HAL_ETH_MspInit+0xe4>)
 8023a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8023a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8023a5e:	4b30      	ldr	r3, [pc, #192]	; (8023b20 <HAL_ETH_MspInit+0xe4>)
 8023a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023a66:	613b      	str	r3, [r7, #16]
 8023a68:	693b      	ldr	r3, [r7, #16]
 8023a6a:	2300      	movs	r3, #0
 8023a6c:	60fb      	str	r3, [r7, #12]
 8023a6e:	4a2c      	ldr	r2, [pc, #176]	; (8023b20 <HAL_ETH_MspInit+0xe4>)
 8023a70:	4b2b      	ldr	r3, [pc, #172]	; (8023b20 <HAL_ETH_MspInit+0xe4>)
 8023a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8023a78:	6313      	str	r3, [r2, #48]	; 0x30
 8023a7a:	4b29      	ldr	r3, [pc, #164]	; (8023b20 <HAL_ETH_MspInit+0xe4>)
 8023a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8023a82:	60fb      	str	r3, [r7, #12]
 8023a84:	68fb      	ldr	r3, [r7, #12]
 8023a86:	2300      	movs	r3, #0
 8023a88:	60bb      	str	r3, [r7, #8]
 8023a8a:	4a25      	ldr	r2, [pc, #148]	; (8023b20 <HAL_ETH_MspInit+0xe4>)
 8023a8c:	4b24      	ldr	r3, [pc, #144]	; (8023b20 <HAL_ETH_MspInit+0xe4>)
 8023a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8023a94:	6313      	str	r3, [r2, #48]	; 0x30
 8023a96:	4b22      	ldr	r3, [pc, #136]	; (8023b20 <HAL_ETH_MspInit+0xe4>)
 8023a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023a9e:	60bb      	str	r3, [r7, #8]
 8023aa0:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> ETH_RX_ER
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8023aa2:	2332      	movs	r3, #50	; 0x32
 8023aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023aa6:	2302      	movs	r3, #2
 8023aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023aaa:	2300      	movs	r3, #0
 8023aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023aae:	2303      	movs	r3, #3
 8023ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023ab2:	230b      	movs	r3, #11
 8023ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023ab6:	f107 0314 	add.w	r3, r7, #20
 8023aba:	4619      	mov	r1, r3
 8023abc:	4819      	ldr	r0, [pc, #100]	; (8023b24 <HAL_ETH_MspInit+0xe8>)
 8023abe:	f7ee fc77 	bl	80123b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8023ac2:	2386      	movs	r3, #134	; 0x86
 8023ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023ac6:	2302      	movs	r3, #2
 8023ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023aca:	2300      	movs	r3, #0
 8023acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023ace:	2303      	movs	r3, #3
 8023ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023ad2:	230b      	movs	r3, #11
 8023ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023ad6:	f107 0314 	add.w	r3, r7, #20
 8023ada:	4619      	mov	r1, r3
 8023adc:	4812      	ldr	r0, [pc, #72]	; (8023b28 <HAL_ETH_MspInit+0xec>)
 8023ade:	f7ee fc67 	bl	80123b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8023ae2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8023ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023ae8:	2302      	movs	r3, #2
 8023aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023aec:	2300      	movs	r3, #0
 8023aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023af0:	2303      	movs	r3, #3
 8023af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8023af4:	230b      	movs	r3, #11
 8023af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023af8:	f107 0314 	add.w	r3, r7, #20
 8023afc:	4619      	mov	r1, r3
 8023afe:	480b      	ldr	r0, [pc, #44]	; (8023b2c <HAL_ETH_MspInit+0xf0>)
 8023b00:	f7ee fc56 	bl	80123b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8023b04:	2200      	movs	r2, #0
 8023b06:	2105      	movs	r1, #5
 8023b08:	203d      	movs	r0, #61	; 0x3d
 8023b0a:	f7ec fd63 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8023b0e:	203d      	movs	r0, #61	; 0x3d
 8023b10:	f7ec fd7c 	bl	801060c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8023b14:	bf00      	nop
 8023b16:	3728      	adds	r7, #40	; 0x28
 8023b18:	46bd      	mov	sp, r7
 8023b1a:	bd80      	pop	{r7, pc}
 8023b1c:	40028000 	.word	0x40028000
 8023b20:	40023800 	.word	0x40023800
 8023b24:	40020800 	.word	0x40020800
 8023b28:	40020000 	.word	0x40020000
 8023b2c:	40020400 	.word	0x40020400

08023b30 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8023b30:	b580      	push	{r7, lr}
 8023b32:	b082      	sub	sp, #8
 8023b34:	af00      	add	r7, sp, #0
 8023b36:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8023b38:	4b04      	ldr	r3, [pc, #16]	; (8023b4c <HAL_ETH_RxCpltCallback+0x1c>)
 8023b3a:	681b      	ldr	r3, [r3, #0]
 8023b3c:	4618      	mov	r0, r3
 8023b3e:	f7f0 ff2b 	bl	8014998 <osSemaphoreRelease>
}
 8023b42:	bf00      	nop
 8023b44:	3708      	adds	r7, #8
 8023b46:	46bd      	mov	sp, r7
 8023b48:	bd80      	pop	{r7, pc}
 8023b4a:	bf00      	nop
 8023b4c:	20009530 	.word	0x20009530

08023b50 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8023b50:	b5b0      	push	{r4, r5, r7, lr}
 8023b52:	b08e      	sub	sp, #56	; 0x38
 8023b54:	af00      	add	r7, sp, #0
 8023b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8023b58:	4b50      	ldr	r3, [pc, #320]	; (8023c9c <low_level_init+0x14c>)
 8023b5a:	4a51      	ldr	r2, [pc, #324]	; (8023ca0 <low_level_init+0x150>)
 8023b5c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8023b5e:	4b4f      	ldr	r3, [pc, #316]	; (8023c9c <low_level_init+0x14c>)
 8023b60:	2201      	movs	r2, #1
 8023b62:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8023b64:	4b4d      	ldr	r3, [pc, #308]	; (8023c9c <low_level_init+0x14c>)
 8023b66:	2201      	movs	r2, #1
 8023b68:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8023b6a:	2300      	movs	r3, #0
 8023b6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x02;
 8023b70:	2302      	movs	r3, #2
 8023b72:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xA2;
 8023b76:	23a2      	movs	r3, #162	; 0xa2
 8023b78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x42;
 8023b7c:	2342      	movs	r3, #66	; 0x42
 8023b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x50;
 8023b82:	2350      	movs	r3, #80	; 0x50
 8023b84:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0xE4;
 8023b88:	23e4      	movs	r3, #228	; 0xe4
 8023b8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8023b8e:	4a43      	ldr	r2, [pc, #268]	; (8023c9c <low_level_init+0x14c>)
 8023b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8023b94:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8023b96:	4b41      	ldr	r3, [pc, #260]	; (8023c9c <low_level_init+0x14c>)
 8023b98:	2201      	movs	r2, #1
 8023b9a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8023b9c:	4b3f      	ldr	r3, [pc, #252]	; (8023c9c <low_level_init+0x14c>)
 8023b9e:	2200      	movs	r2, #0
 8023ba0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8023ba2:	4b3e      	ldr	r3, [pc, #248]	; (8023c9c <low_level_init+0x14c>)
 8023ba4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8023ba8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8023baa:	483c      	ldr	r0, [pc, #240]	; (8023c9c <low_level_init+0x14c>)
 8023bac:	f7ed f92e 	bl	8010e0c <HAL_ETH_Init>
 8023bb0:	4603      	mov	r3, r0
 8023bb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (hal_eth_init_status == HAL_OK)
 8023bb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8023bba:	2b00      	cmp	r3, #0
 8023bbc:	d108      	bne.n	8023bd0 <low_level_init+0x80>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8023bbe:	687b      	ldr	r3, [r7, #4]
 8023bc0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8023bc4:	f043 0304 	orr.w	r3, r3, #4
 8023bc8:	b2da      	uxtb	r2, r3
 8023bca:	687b      	ldr	r3, [r7, #4]
 8023bcc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8023bd0:	2304      	movs	r3, #4
 8023bd2:	4a34      	ldr	r2, [pc, #208]	; (8023ca4 <low_level_init+0x154>)
 8023bd4:	4934      	ldr	r1, [pc, #208]	; (8023ca8 <low_level_init+0x158>)
 8023bd6:	4831      	ldr	r0, [pc, #196]	; (8023c9c <low_level_init+0x14c>)
 8023bd8:	f7ed fab6 	bl	8011148 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8023bdc:	2304      	movs	r3, #4
 8023bde:	4a33      	ldr	r2, [pc, #204]	; (8023cac <low_level_init+0x15c>)
 8023be0:	4933      	ldr	r1, [pc, #204]	; (8023cb0 <low_level_init+0x160>)
 8023be2:	482e      	ldr	r0, [pc, #184]	; (8023c9c <low_level_init+0x14c>)
 8023be4:	f7ed fb19 	bl	801121a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8023be8:	687b      	ldr	r3, [r7, #4]
 8023bea:	2206      	movs	r2, #6
 8023bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8023bf0:	4b2a      	ldr	r3, [pc, #168]	; (8023c9c <low_level_init+0x14c>)
 8023bf2:	695b      	ldr	r3, [r3, #20]
 8023bf4:	781a      	ldrb	r2, [r3, #0]
 8023bf6:	687b      	ldr	r3, [r7, #4]
 8023bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8023bfc:	4b27      	ldr	r3, [pc, #156]	; (8023c9c <low_level_init+0x14c>)
 8023bfe:	695b      	ldr	r3, [r3, #20]
 8023c00:	785a      	ldrb	r2, [r3, #1]
 8023c02:	687b      	ldr	r3, [r7, #4]
 8023c04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8023c08:	4b24      	ldr	r3, [pc, #144]	; (8023c9c <low_level_init+0x14c>)
 8023c0a:	695b      	ldr	r3, [r3, #20]
 8023c0c:	789a      	ldrb	r2, [r3, #2]
 8023c0e:	687b      	ldr	r3, [r7, #4]
 8023c10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8023c14:	4b21      	ldr	r3, [pc, #132]	; (8023c9c <low_level_init+0x14c>)
 8023c16:	695b      	ldr	r3, [r3, #20]
 8023c18:	78da      	ldrb	r2, [r3, #3]
 8023c1a:	687b      	ldr	r3, [r7, #4]
 8023c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8023c20:	4b1e      	ldr	r3, [pc, #120]	; (8023c9c <low_level_init+0x14c>)
 8023c22:	695b      	ldr	r3, [r3, #20]
 8023c24:	791a      	ldrb	r2, [r3, #4]
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8023c2c:	4b1b      	ldr	r3, [pc, #108]	; (8023c9c <low_level_init+0x14c>)
 8023c2e:	695b      	ldr	r3, [r3, #20]
 8023c30:	795a      	ldrb	r2, [r3, #5]
 8023c32:	687b      	ldr	r3, [r7, #4]
 8023c34:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8023c38:	687b      	ldr	r3, [r7, #4]
 8023c3a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8023c3e:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8023c40:	687b      	ldr	r3, [r7, #4]
 8023c42:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8023c46:	f043 030a 	orr.w	r3, r3, #10
 8023c4a:	b2da      	uxtb	r2, r3
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8023c52:	2300      	movs	r3, #0
 8023c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8023c56:	2300      	movs	r3, #0
 8023c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8023c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023c5e:	2101      	movs	r1, #1
 8023c60:	4618      	mov	r0, r3
 8023c62:	f7f0 fe15 	bl	8014890 <osSemaphoreCreate>
 8023c66:	4602      	mov	r2, r0
 8023c68:	4b12      	ldr	r3, [pc, #72]	; (8023cb4 <low_level_init+0x164>)
 8023c6a:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8023c6c:	4b12      	ldr	r3, [pc, #72]	; (8023cb8 <low_level_init+0x168>)
 8023c6e:	f107 040c 	add.w	r4, r7, #12
 8023c72:	461d      	mov	r5, r3
 8023c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8023c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8023c78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8023c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8023c80:	f107 030c 	add.w	r3, r7, #12
 8023c84:	6879      	ldr	r1, [r7, #4]
 8023c86:	4618      	mov	r0, r3
 8023c88:	f7f0 fd03 	bl	8014692 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8023c8c:	4803      	ldr	r0, [pc, #12]	; (8023c9c <low_level_init+0x14c>)
 8023c8e:	f7ed fdec 	bl	801186a <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8023c92:	bf00      	nop
 8023c94:	3738      	adds	r7, #56	; 0x38
 8023c96:	46bd      	mov	sp, r7
 8023c98:	bdb0      	pop	{r4, r5, r7, pc}
 8023c9a:	bf00      	nop
 8023c9c:	200105c0 	.word	0x200105c0
 8023ca0:	40028000 	.word	0x40028000
 8023ca4:	20010608 	.word	0x20010608
 8023ca8:	2000ecf0 	.word	0x2000ecf0
 8023cac:	2000ed70 	.word	0x2000ed70
 8023cb0:	20010540 	.word	0x20010540
 8023cb4:	20009530 	.word	0x20009530
 8023cb8:	08029080 	.word	0x08029080

08023cbc <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8023cbc:	b580      	push	{r7, lr}
 8023cbe:	b08a      	sub	sp, #40	; 0x28
 8023cc0:	af00      	add	r7, sp, #0
 8023cc2:	6078      	str	r0, [r7, #4]
 8023cc4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8023cc6:	4b4b      	ldr	r3, [pc, #300]	; (8023df4 <low_level_output+0x138>)
 8023cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023cca:	689b      	ldr	r3, [r3, #8]
 8023ccc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8023cce:	2300      	movs	r3, #0
 8023cd0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8023cd2:	2300      	movs	r3, #0
 8023cd4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8023cd6:	2300      	movs	r3, #0
 8023cd8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8023cda:	2300      	movs	r3, #0
 8023cdc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8023cde:	4b45      	ldr	r3, [pc, #276]	; (8023df4 <low_level_output+0x138>)
 8023ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023ce2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8023ce4:	2300      	movs	r3, #0
 8023ce6:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8023ce8:	683b      	ldr	r3, [r7, #0]
 8023cea:	623b      	str	r3, [r7, #32]
 8023cec:	e05a      	b.n	8023da4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8023cee:	69bb      	ldr	r3, [r7, #24]
 8023cf0:	681b      	ldr	r3, [r3, #0]
 8023cf2:	2b00      	cmp	r3, #0
 8023cf4:	da03      	bge.n	8023cfe <low_level_output+0x42>
      {
        errval = ERR_USE;
 8023cf6:	23f8      	movs	r3, #248	; 0xf8
 8023cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8023cfc:	e05c      	b.n	8023db8 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8023cfe:	6a3b      	ldr	r3, [r7, #32]
 8023d00:	895b      	ldrh	r3, [r3, #10]
 8023d02:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8023d04:	2300      	movs	r3, #0
 8023d06:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8023d08:	e02f      	b.n	8023d6a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8023d0a:	69fa      	ldr	r2, [r7, #28]
 8023d0c:	693b      	ldr	r3, [r7, #16]
 8023d0e:	18d0      	adds	r0, r2, r3
 8023d10:	6a3b      	ldr	r3, [r7, #32]
 8023d12:	685a      	ldr	r2, [r3, #4]
 8023d14:	68bb      	ldr	r3, [r7, #8]
 8023d16:	18d1      	adds	r1, r2, r3
 8023d18:	693b      	ldr	r3, [r7, #16]
 8023d1a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8023d1e:	3304      	adds	r3, #4
 8023d20:	461a      	mov	r2, r3
 8023d22:	f002 fdb0 	bl	8026886 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8023d26:	69bb      	ldr	r3, [r7, #24]
 8023d28:	68db      	ldr	r3, [r3, #12]
 8023d2a:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8023d2c:	69bb      	ldr	r3, [r7, #24]
 8023d2e:	681b      	ldr	r3, [r3, #0]
 8023d30:	2b00      	cmp	r3, #0
 8023d32:	da03      	bge.n	8023d3c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8023d34:	23f8      	movs	r3, #248	; 0xf8
 8023d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8023d3a:	e03d      	b.n	8023db8 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8023d3c:	69bb      	ldr	r3, [r7, #24]
 8023d3e:	689b      	ldr	r3, [r3, #8]
 8023d40:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8023d42:	693a      	ldr	r2, [r7, #16]
 8023d44:	68fb      	ldr	r3, [r7, #12]
 8023d46:	4413      	add	r3, r2
 8023d48:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8023d4c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8023d4e:	68ba      	ldr	r2, [r7, #8]
 8023d50:	693b      	ldr	r3, [r7, #16]
 8023d52:	1ad3      	subs	r3, r2, r3
 8023d54:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8023d58:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8023d5a:	697a      	ldr	r2, [r7, #20]
 8023d5c:	693b      	ldr	r3, [r7, #16]
 8023d5e:	1ad3      	subs	r3, r2, r3
 8023d60:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8023d64:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8023d66:	2300      	movs	r3, #0
 8023d68:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8023d6a:	68fa      	ldr	r2, [r7, #12]
 8023d6c:	693b      	ldr	r3, [r7, #16]
 8023d6e:	4413      	add	r3, r2
 8023d70:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8023d74:	4293      	cmp	r3, r2
 8023d76:	d8c8      	bhi.n	8023d0a <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8023d78:	69fa      	ldr	r2, [r7, #28]
 8023d7a:	693b      	ldr	r3, [r7, #16]
 8023d7c:	18d0      	adds	r0, r2, r3
 8023d7e:	6a3b      	ldr	r3, [r7, #32]
 8023d80:	685a      	ldr	r2, [r3, #4]
 8023d82:	68bb      	ldr	r3, [r7, #8]
 8023d84:	4413      	add	r3, r2
 8023d86:	68fa      	ldr	r2, [r7, #12]
 8023d88:	4619      	mov	r1, r3
 8023d8a:	f002 fd7c 	bl	8026886 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8023d8e:	693a      	ldr	r2, [r7, #16]
 8023d90:	68fb      	ldr	r3, [r7, #12]
 8023d92:	4413      	add	r3, r2
 8023d94:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8023d96:	697a      	ldr	r2, [r7, #20]
 8023d98:	68fb      	ldr	r3, [r7, #12]
 8023d9a:	4413      	add	r3, r2
 8023d9c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8023d9e:	6a3b      	ldr	r3, [r7, #32]
 8023da0:	681b      	ldr	r3, [r3, #0]
 8023da2:	623b      	str	r3, [r7, #32]
 8023da4:	6a3b      	ldr	r3, [r7, #32]
 8023da6:	2b00      	cmp	r3, #0
 8023da8:	d1a1      	bne.n	8023cee <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8023daa:	6979      	ldr	r1, [r7, #20]
 8023dac:	4811      	ldr	r0, [pc, #68]	; (8023df4 <low_level_output+0x138>)
 8023dae:	f7ed faa1 	bl	80112f4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8023db2:	2300      	movs	r3, #0
 8023db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8023db8:	4b0e      	ldr	r3, [pc, #56]	; (8023df4 <low_level_output+0x138>)
 8023dba:	681b      	ldr	r3, [r3, #0]
 8023dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023dc0:	3314      	adds	r3, #20
 8023dc2:	681b      	ldr	r3, [r3, #0]
 8023dc4:	f003 0320 	and.w	r3, r3, #32
 8023dc8:	2b00      	cmp	r3, #0
 8023dca:	d00d      	beq.n	8023de8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8023dcc:	4b09      	ldr	r3, [pc, #36]	; (8023df4 <low_level_output+0x138>)
 8023dce:	681b      	ldr	r3, [r3, #0]
 8023dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023dd4:	3314      	adds	r3, #20
 8023dd6:	2220      	movs	r2, #32
 8023dd8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8023dda:	4b06      	ldr	r3, [pc, #24]	; (8023df4 <low_level_output+0x138>)
 8023ddc:	681b      	ldr	r3, [r3, #0]
 8023dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023de2:	3304      	adds	r3, #4
 8023de4:	2200      	movs	r2, #0
 8023de6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8023de8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8023dec:	4618      	mov	r0, r3
 8023dee:	3728      	adds	r7, #40	; 0x28
 8023df0:	46bd      	mov	sp, r7
 8023df2:	bd80      	pop	{r7, pc}
 8023df4:	200105c0 	.word	0x200105c0

08023df8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8023df8:	b580      	push	{r7, lr}
 8023dfa:	b08c      	sub	sp, #48	; 0x30
 8023dfc:	af00      	add	r7, sp, #0
 8023dfe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8023e00:	2300      	movs	r3, #0
 8023e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8023e04:	2300      	movs	r3, #0
 8023e06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8023e08:	2300      	movs	r3, #0
 8023e0a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8023e0c:	2300      	movs	r3, #0
 8023e0e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8023e10:	2300      	movs	r3, #0
 8023e12:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8023e14:	2300      	movs	r3, #0
 8023e16:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8023e18:	2300      	movs	r3, #0
 8023e1a:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8023e1c:	484e      	ldr	r0, [pc, #312]	; (8023f58 <low_level_input+0x160>)
 8023e1e:	f7ed fb53 	bl	80114c8 <HAL_ETH_GetReceivedFrame_IT>
 8023e22:	4603      	mov	r3, r0
 8023e24:	2b00      	cmp	r3, #0
 8023e26:	d001      	beq.n	8023e2c <low_level_input+0x34>
    return NULL;
 8023e28:	2300      	movs	r3, #0
 8023e2a:	e091      	b.n	8023f50 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8023e2c:	4b4a      	ldr	r3, [pc, #296]	; (8023f58 <low_level_input+0x160>)
 8023e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e30:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8023e32:	4b49      	ldr	r3, [pc, #292]	; (8023f58 <low_level_input+0x160>)
 8023e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e36:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8023e38:	89fb      	ldrh	r3, [r7, #14]
 8023e3a:	2b00      	cmp	r3, #0
 8023e3c:	d006      	beq.n	8023e4c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8023e3e:	89fb      	ldrh	r3, [r7, #14]
 8023e40:	2203      	movs	r2, #3
 8023e42:	4619      	mov	r1, r3
 8023e44:	2004      	movs	r0, #4
 8023e46:	f7f8 fc3f 	bl	801c6c8 <pbuf_alloc>
 8023e4a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8023e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e4e:	2b00      	cmp	r3, #0
 8023e50:	d04b      	beq.n	8023eea <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8023e52:	4b41      	ldr	r3, [pc, #260]	; (8023f58 <low_level_input+0x160>)
 8023e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e56:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8023e58:	2300      	movs	r3, #0
 8023e5a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8023e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8023e60:	e040      	b.n	8023ee4 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8023e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e64:	895b      	ldrh	r3, [r3, #10]
 8023e66:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8023e68:	2300      	movs	r3, #0
 8023e6a:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8023e6c:	e021      	b.n	8023eb2 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8023e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e70:	685a      	ldr	r2, [r3, #4]
 8023e72:	69bb      	ldr	r3, [r7, #24]
 8023e74:	18d0      	adds	r0, r2, r3
 8023e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023e78:	69fb      	ldr	r3, [r7, #28]
 8023e7a:	18d1      	adds	r1, r2, r3
 8023e7c:	69fb      	ldr	r3, [r7, #28]
 8023e7e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8023e82:	3304      	adds	r3, #4
 8023e84:	461a      	mov	r2, r3
 8023e86:	f002 fcfe 	bl	8026886 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8023e8a:	6a3b      	ldr	r3, [r7, #32]
 8023e8c:	68db      	ldr	r3, [r3, #12]
 8023e8e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8023e90:	6a3b      	ldr	r3, [r7, #32]
 8023e92:	689b      	ldr	r3, [r3, #8]
 8023e94:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8023e96:	69fa      	ldr	r2, [r7, #28]
 8023e98:	697b      	ldr	r3, [r7, #20]
 8023e9a:	4413      	add	r3, r2
 8023e9c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8023ea0:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8023ea2:	69ba      	ldr	r2, [r7, #24]
 8023ea4:	69fb      	ldr	r3, [r7, #28]
 8023ea6:	1ad3      	subs	r3, r2, r3
 8023ea8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8023eac:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8023eae:	2300      	movs	r3, #0
 8023eb0:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8023eb2:	697a      	ldr	r2, [r7, #20]
 8023eb4:	69fb      	ldr	r3, [r7, #28]
 8023eb6:	4413      	add	r3, r2
 8023eb8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8023ebc:	4293      	cmp	r3, r2
 8023ebe:	d8d6      	bhi.n	8023e6e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8023ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ec2:	685a      	ldr	r2, [r3, #4]
 8023ec4:	69bb      	ldr	r3, [r7, #24]
 8023ec6:	18d0      	adds	r0, r2, r3
 8023ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023eca:	69fb      	ldr	r3, [r7, #28]
 8023ecc:	4413      	add	r3, r2
 8023ece:	697a      	ldr	r2, [r7, #20]
 8023ed0:	4619      	mov	r1, r3
 8023ed2:	f002 fcd8 	bl	8026886 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8023ed6:	69fa      	ldr	r2, [r7, #28]
 8023ed8:	697b      	ldr	r3, [r7, #20]
 8023eda:	4413      	add	r3, r2
 8023edc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8023ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ee0:	681b      	ldr	r3, [r3, #0]
 8023ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8023ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ee6:	2b00      	cmp	r3, #0
 8023ee8:	d1bb      	bne.n	8023e62 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8023eea:	4b1b      	ldr	r3, [pc, #108]	; (8023f58 <low_level_input+0x160>)
 8023eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023eee:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8023ef0:	2300      	movs	r3, #0
 8023ef2:	613b      	str	r3, [r7, #16]
 8023ef4:	e00b      	b.n	8023f0e <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8023ef6:	6a3b      	ldr	r3, [r7, #32]
 8023ef8:	681b      	ldr	r3, [r3, #0]
 8023efa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8023efe:	6a3b      	ldr	r3, [r7, #32]
 8023f00:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8023f02:	6a3b      	ldr	r3, [r7, #32]
 8023f04:	68db      	ldr	r3, [r3, #12]
 8023f06:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8023f08:	693b      	ldr	r3, [r7, #16]
 8023f0a:	3301      	adds	r3, #1
 8023f0c:	613b      	str	r3, [r7, #16]
 8023f0e:	4b12      	ldr	r3, [pc, #72]	; (8023f58 <low_level_input+0x160>)
 8023f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8023f12:	693b      	ldr	r3, [r7, #16]
 8023f14:	429a      	cmp	r2, r3
 8023f16:	d8ee      	bhi.n	8023ef6 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8023f18:	4b0f      	ldr	r3, [pc, #60]	; (8023f58 <low_level_input+0x160>)
 8023f1a:	2200      	movs	r2, #0
 8023f1c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8023f1e:	4b0e      	ldr	r3, [pc, #56]	; (8023f58 <low_level_input+0x160>)
 8023f20:	681b      	ldr	r3, [r3, #0]
 8023f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023f26:	3314      	adds	r3, #20
 8023f28:	681b      	ldr	r3, [r3, #0]
 8023f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023f2e:	2b00      	cmp	r3, #0
 8023f30:	d00d      	beq.n	8023f4e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8023f32:	4b09      	ldr	r3, [pc, #36]	; (8023f58 <low_level_input+0x160>)
 8023f34:	681b      	ldr	r3, [r3, #0]
 8023f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023f3a:	3314      	adds	r3, #20
 8023f3c:	2280      	movs	r2, #128	; 0x80
 8023f3e:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8023f40:	4b05      	ldr	r3, [pc, #20]	; (8023f58 <low_level_input+0x160>)
 8023f42:	681b      	ldr	r3, [r3, #0]
 8023f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023f48:	3308      	adds	r3, #8
 8023f4a:	2200      	movs	r2, #0
 8023f4c:	601a      	str	r2, [r3, #0]
  }
  return p;
 8023f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8023f50:	4618      	mov	r0, r3
 8023f52:	3730      	adds	r7, #48	; 0x30
 8023f54:	46bd      	mov	sp, r7
 8023f56:	bd80      	pop	{r7, pc}
 8023f58:	200105c0 	.word	0x200105c0

08023f5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 8023f5c:	b580      	push	{r7, lr}
 8023f5e:	b084      	sub	sp, #16
 8023f60:	af00      	add	r7, sp, #0
 8023f62:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8023f64:	687b      	ldr	r3, [r7, #4]
 8023f66:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8023f68:	4b0f      	ldr	r3, [pc, #60]	; (8023fa8 <ethernetif_input+0x4c>)
 8023f6a:	681b      	ldr	r3, [r3, #0]
 8023f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8023f70:	4618      	mov	r0, r3
 8023f72:	f7f0 fcc1 	bl	80148f8 <osSemaphoreWait>
 8023f76:	4603      	mov	r3, r0
 8023f78:	2b00      	cmp	r3, #0
 8023f7a:	d1f5      	bne.n	8023f68 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8023f7c:	68f8      	ldr	r0, [r7, #12]
 8023f7e:	f7ff ff3b 	bl	8023df8 <low_level_input>
 8023f82:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8023f84:	68bb      	ldr	r3, [r7, #8]
 8023f86:	2b00      	cmp	r3, #0
 8023f88:	d00a      	beq.n	8023fa0 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8023f8a:	68fb      	ldr	r3, [r7, #12]
 8023f8c:	691b      	ldr	r3, [r3, #16]
 8023f8e:	68f9      	ldr	r1, [r7, #12]
 8023f90:	68b8      	ldr	r0, [r7, #8]
 8023f92:	4798      	blx	r3
 8023f94:	4603      	mov	r3, r0
 8023f96:	2b00      	cmp	r3, #0
 8023f98:	d002      	beq.n	8023fa0 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8023f9a:	68b8      	ldr	r0, [r7, #8]
 8023f9c:	f7f8 ff06 	bl	801cdac <pbuf_free>
          }
        }
      } while(p!=NULL);
 8023fa0:	68bb      	ldr	r3, [r7, #8]
 8023fa2:	2b00      	cmp	r3, #0
 8023fa4:	d1ea      	bne.n	8023f7c <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8023fa6:	e7df      	b.n	8023f68 <ethernetif_input+0xc>
 8023fa8:	20009530 	.word	0x20009530

08023fac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8023fac:	b580      	push	{r7, lr}
 8023fae:	b082      	sub	sp, #8
 8023fb0:	af00      	add	r7, sp, #0
 8023fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8023fb4:	687b      	ldr	r3, [r7, #4]
 8023fb6:	2b00      	cmp	r3, #0
 8023fb8:	d106      	bne.n	8023fc8 <ethernetif_init+0x1c>
 8023fba:	4b0e      	ldr	r3, [pc, #56]	; (8023ff4 <ethernetif_init+0x48>)
 8023fbc:	f240 2235 	movw	r2, #565	; 0x235
 8023fc0:	490d      	ldr	r1, [pc, #52]	; (8023ff8 <ethernetif_init+0x4c>)
 8023fc2:	480e      	ldr	r0, [pc, #56]	; (8023ffc <ethernetif_init+0x50>)
 8023fc4:	f001 ff90 	bl	8025ee8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8023fc8:	687b      	ldr	r3, [r7, #4]
 8023fca:	2273      	movs	r2, #115	; 0x73
 8023fcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8023fd0:	687b      	ldr	r3, [r7, #4]
 8023fd2:	2274      	movs	r2, #116	; 0x74
 8023fd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8023fd8:	687b      	ldr	r3, [r7, #4]
 8023fda:	4a09      	ldr	r2, [pc, #36]	; (8024000 <ethernetif_init+0x54>)
 8023fdc:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8023fde:	687b      	ldr	r3, [r7, #4]
 8023fe0:	4a08      	ldr	r2, [pc, #32]	; (8024004 <ethernetif_init+0x58>)
 8023fe2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8023fe4:	6878      	ldr	r0, [r7, #4]
 8023fe6:	f7ff fdb3 	bl	8023b50 <low_level_init>

  return ERR_OK;
 8023fea:	2300      	movs	r3, #0
}
 8023fec:	4618      	mov	r0, r3
 8023fee:	3708      	adds	r7, #8
 8023ff0:	46bd      	mov	sp, r7
 8023ff2:	bd80      	pop	{r7, pc}
 8023ff4:	0802909c 	.word	0x0802909c
 8023ff8:	080290b0 	.word	0x080290b0
 8023ffc:	080290c0 	.word	0x080290c0
 8024000:	08019d65 	.word	0x08019d65
 8024004:	08023cbd 	.word	0x08023cbd

08024008 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8024008:	b580      	push	{r7, lr}
 802400a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 802400c:	f7ec f9e8 	bl	80103e0 <HAL_GetTick>
 8024010:	4603      	mov	r3, r0
}
 8024012:	4618      	mov	r0, r3
 8024014:	bd80      	pop	{r7, pc}
	...

08024018 <NVIC_EnableIRQ>:
{
 8024018:	b480      	push	{r7}
 802401a:	b083      	sub	sp, #12
 802401c:	af00      	add	r7, sp, #0
 802401e:	4603      	mov	r3, r0
 8024020:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8024022:	4909      	ldr	r1, [pc, #36]	; (8024048 <NVIC_EnableIRQ+0x30>)
 8024024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024028:	095b      	lsrs	r3, r3, #5
 802402a:	79fa      	ldrb	r2, [r7, #7]
 802402c:	f002 021f 	and.w	r2, r2, #31
 8024030:	2001      	movs	r0, #1
 8024032:	fa00 f202 	lsl.w	r2, r0, r2
 8024036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802403a:	bf00      	nop
 802403c:	370c      	adds	r7, #12
 802403e:	46bd      	mov	sp, r7
 8024040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024044:	4770      	bx	lr
 8024046:	bf00      	nop
 8024048:	e000e100 	.word	0xe000e100

0802404c <NVIC_SetPriority>:
{
 802404c:	b480      	push	{r7}
 802404e:	b083      	sub	sp, #12
 8024050:	af00      	add	r7, sp, #0
 8024052:	4603      	mov	r3, r0
 8024054:	6039      	str	r1, [r7, #0]
 8024056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8024058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802405c:	2b00      	cmp	r3, #0
 802405e:	da0b      	bge.n	8024078 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024060:	490d      	ldr	r1, [pc, #52]	; (8024098 <NVIC_SetPriority+0x4c>)
 8024062:	79fb      	ldrb	r3, [r7, #7]
 8024064:	f003 030f 	and.w	r3, r3, #15
 8024068:	3b04      	subs	r3, #4
 802406a:	683a      	ldr	r2, [r7, #0]
 802406c:	b2d2      	uxtb	r2, r2
 802406e:	0112      	lsls	r2, r2, #4
 8024070:	b2d2      	uxtb	r2, r2
 8024072:	440b      	add	r3, r1
 8024074:	761a      	strb	r2, [r3, #24]
}
 8024076:	e009      	b.n	802408c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024078:	4908      	ldr	r1, [pc, #32]	; (802409c <NVIC_SetPriority+0x50>)
 802407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802407e:	683a      	ldr	r2, [r7, #0]
 8024080:	b2d2      	uxtb	r2, r2
 8024082:	0112      	lsls	r2, r2, #4
 8024084:	b2d2      	uxtb	r2, r2
 8024086:	440b      	add	r3, r1
 8024088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 802408c:	bf00      	nop
 802408e:	370c      	adds	r7, #12
 8024090:	46bd      	mov	sp, r7
 8024092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024096:	4770      	bx	lr
 8024098:	e000ed00 	.word	0xe000ed00
 802409c:	e000e100 	.word	0xe000e100

080240a0 <configureTimerForRunTimeStats>:
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 80240a0:	b580      	push	{r7, lr}
 80240a2:	af00      	add	r7, sp, #0
	NVIC_SetPriority(TIM7_IRQn, 0);
 80240a4:	2100      	movs	r1, #0
 80240a6:	2037      	movs	r0, #55	; 0x37
 80240a8:	f7ff ffd0 	bl	802404c <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 80240ac:	2037      	movs	r0, #55	; 0x37
 80240ae:	f7ff ffb3 	bl	8024018 <NVIC_EnableIRQ>
	MX_TIM7_Init();
 80240b2:	f001 fcc7 	bl	8025a44 <MX_TIM7_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 80240b6:	4802      	ldr	r0, [pc, #8]	; (80240c0 <configureTimerForRunTimeStats+0x20>)
 80240b8:	f7ef f8a7 	bl	801320a <HAL_TIM_Base_Start_IT>
}
 80240bc:	bf00      	nop
 80240be:	bd80      	pop	{r7, pc}
 80240c0:	20011eec 	.word	0x20011eec

080240c4 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 80240c4:	b480      	push	{r7}
 80240c6:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80240c8:	4b03      	ldr	r3, [pc, #12]	; (80240d8 <getRunTimeCounterValue+0x14>)
 80240ca:	681b      	ldr	r3, [r3, #0]
}
 80240cc:	4618      	mov	r0, r3
 80240ce:	46bd      	mov	sp, r7
 80240d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240d4:	4770      	bx	lr
 80240d6:	bf00      	nop
 80240d8:	20009534 	.word	0x20009534

080240dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80240dc:	b480      	push	{r7}
 80240de:	b085      	sub	sp, #20
 80240e0:	af00      	add	r7, sp, #0
 80240e2:	60f8      	str	r0, [r7, #12]
 80240e4:	60b9      	str	r1, [r7, #8]
 80240e6:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80240e8:	68fb      	ldr	r3, [r7, #12]
 80240ea:	4a07      	ldr	r2, [pc, #28]	; (8024108 <vApplicationGetIdleTaskMemory+0x2c>)
 80240ec:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80240ee:	68bb      	ldr	r3, [r7, #8]
 80240f0:	4a06      	ldr	r2, [pc, #24]	; (802410c <vApplicationGetIdleTaskMemory+0x30>)
 80240f2:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80240fa:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80240fc:	bf00      	nop
 80240fe:	3714      	adds	r7, #20
 8024100:	46bd      	mov	sp, r7
 8024102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024106:	4770      	bx	lr
 8024108:	20009538 	.word	0x20009538
 802410c:	20009598 	.word	0x20009598

08024110 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8024110:	b5b0      	push	{r4, r5, r7, lr}
 8024112:	b096      	sub	sp, #88	; 0x58
 8024114:	af00      	add	r7, sp, #0

  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	osThreadDef(processTask, StartProcessTask, osPriorityRealtime, 0, 1024);
 8024116:	4b2d      	ldr	r3, [pc, #180]	; (80241cc <MX_FREERTOS_Init+0xbc>)
 8024118:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 802411c:	461d      	mov	r5, r3
 802411e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024122:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8024126:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	processTaskHandle = osThreadCreate(osThread(processTask), NULL);
 802412a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802412e:	2100      	movs	r1, #0
 8024130:	4618      	mov	r0, r3
 8024132:	f7f0 faae 	bl	8014692 <osThreadCreate>
 8024136:	4602      	mov	r2, r0
 8024138:	4b25      	ldr	r3, [pc, #148]	; (80241d0 <MX_FREERTOS_Init+0xc0>)
 802413a:	601a      	str	r2, [r3, #0]

	osThreadDef(cleanerTask, StartHeapCleanerTask, osPriorityAboveNormal, 0,
 802413c:	4b25      	ldr	r3, [pc, #148]	; (80241d4 <MX_FREERTOS_Init+0xc4>)
 802413e:	f107 0420 	add.w	r4, r7, #32
 8024142:	461d      	mov	r5, r3
 8024144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024148:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802414c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			256);
	heapCleanerHandle = osThreadCreate(osThread(cleanerTask), NULL);
 8024150:	f107 0320 	add.w	r3, r7, #32
 8024154:	2100      	movs	r1, #0
 8024156:	4618      	mov	r0, r3
 8024158:	f7f0 fa9b 	bl	8014692 <osThreadCreate>
 802415c:	4602      	mov	r2, r0
 802415e:	4b1e      	ldr	r3, [pc, #120]	; (80241d8 <MX_FREERTOS_Init+0xc8>)
 8024160:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8024162:	4b1e      	ldr	r3, [pc, #120]	; (80241dc <MX_FREERTOS_Init+0xcc>)
 8024164:	1d3c      	adds	r4, r7, #4
 8024166:	461d      	mov	r5, r3
 8024168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802416a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802416c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8024170:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8024174:	1d3b      	adds	r3, r7, #4
 8024176:	2100      	movs	r1, #0
 8024178:	4618      	mov	r0, r3
 802417a:	f7f0 fa8a 	bl	8014692 <osThreadCreate>
 802417e:	4602      	mov	r2, r0
 8024180:	4b17      	ldr	r3, [pc, #92]	; (80241e0 <MX_FREERTOS_Init+0xd0>)
 8024182:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
	frames_queue = xQueueCreate(16, sizeof(uint16_t));
 8024184:	2200      	movs	r2, #0
 8024186:	2102      	movs	r1, #2
 8024188:	2010      	movs	r0, #16
 802418a:	f7f1 fad1 	bl	8015730 <xQueueGenericCreate>
 802418e:	4602      	mov	r2, r0
 8024190:	4b14      	ldr	r3, [pc, #80]	; (80241e4 <MX_FREERTOS_Init+0xd4>)
 8024192:	601a      	str	r2, [r3, #0]
	cleaner_queue = xQueueCreate(16, sizeof(uint8_t*));
 8024194:	2200      	movs	r2, #0
 8024196:	2104      	movs	r1, #4
 8024198:	2010      	movs	r0, #16
 802419a:	f7f1 fac9 	bl	8015730 <xQueueGenericCreate>
 802419e:	4602      	mov	r2, r0
 80241a0:	4b11      	ldr	r3, [pc, #68]	; (80241e8 <MX_FREERTOS_Init+0xd8>)
 80241a2:	601a      	str	r2, [r3, #0]
	tcp_client_queue = xQueueCreate(8, sizeof(parcel_t));
 80241a4:	2200      	movs	r2, #0
 80241a6:	2108      	movs	r1, #8
 80241a8:	2008      	movs	r0, #8
 80241aa:	f7f1 fac1 	bl	8015730 <xQueueGenericCreate>
 80241ae:	4602      	mov	r2, r0
 80241b0:	4b0e      	ldr	r3, [pc, #56]	; (80241ec <MX_FREERTOS_Init+0xdc>)
 80241b2:	601a      	str	r2, [r3, #0]
	protocol_queue = xQueueCreate(8, sizeof(parcel_t));
 80241b4:	2200      	movs	r2, #0
 80241b6:	2108      	movs	r1, #8
 80241b8:	2008      	movs	r0, #8
 80241ba:	f7f1 fab9 	bl	8015730 <xQueueGenericCreate>
 80241be:	4602      	mov	r2, r0
 80241c0:	4b0b      	ldr	r3, [pc, #44]	; (80241f0 <MX_FREERTOS_Init+0xe0>)
 80241c2:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */
}
 80241c4:	bf00      	nop
 80241c6:	3758      	adds	r7, #88	; 0x58
 80241c8:	46bd      	mov	sp, r7
 80241ca:	bdb0      	pop	{r4, r5, r7, pc}
 80241cc:	080290f4 	.word	0x080290f4
 80241d0:	20011de8 	.word	0x20011de8
 80241d4:	0802911c 	.word	0x0802911c
 80241d8:	20011de0 	.word	0x20011de0
 80241dc:	08029144 	.word	0x08029144
 80241e0:	20011dd8 	.word	0x20011dd8
 80241e4:	20011ddc 	.word	0x20011ddc
 80241e8:	20011dec 	.word	0x20011dec
 80241ec:	20011eac 	.word	0x20011eac
 80241f0:	20011e6c 	.word	0x20011e6c

080241f4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80241f4:	b580      	push	{r7, lr}
 80241f6:	b08c      	sub	sp, #48	; 0x30
 80241f8:	af02      	add	r7, sp, #8
 80241fa:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80241fc:	f000 f9a4 	bl	8024548 <MX_LWIP_Init>

  /* USER CODE BEGIN StartDefaultTask */

	struct netconn *conn_port80;
	err_t err;
	conn_port80 = netconn_new(NETCONN_TCP);
 8024200:	2200      	movs	r2, #0
 8024202:	2100      	movs	r1, #0
 8024204:	2010      	movs	r0, #16
 8024206:	f7f3 f841 	bl	801728c <netconn_new_with_proto_and_callback>
 802420a:	6278      	str	r0, [r7, #36]	; 0x24
	if (conn_port80 != NULL) {
 802420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802420e:	2b00      	cmp	r3, #0
 8024210:	d01c      	beq.n	802424c <StartDefaultTask+0x58>
		err = netconn_bind(conn_port80, IP_ADDR_ANY, 80);
 8024212:	2250      	movs	r2, #80	; 0x50
 8024214:	4938      	ldr	r1, [pc, #224]	; (80242f8 <StartDefaultTask+0x104>)
 8024216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024218:	f7f3 f8d8 	bl	80173cc <netconn_bind>
 802421c:	4603      	mov	r3, r0
 802421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (err == ERR_OK) {
 8024222:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8024226:	2b00      	cmp	r3, #0
 8024228:	d10d      	bne.n	8024246 <StartDefaultTask+0x52>
			netconn_listen(conn_port80);
 802422a:	21ff      	movs	r1, #255	; 0xff
 802422c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802422e:	f7f3 f905 	bl	801743c <netconn_listen_with_backlog>
			sys_thread_new("web_thread", Web_thread, (void*) conn_port80,
 8024232:	2301      	movs	r3, #1
 8024234:	9300      	str	r3, [sp, #0]
 8024236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802423c:	492f      	ldr	r1, [pc, #188]	; (80242fc <StartDefaultTask+0x108>)
 802423e:	4830      	ldr	r0, [pc, #192]	; (8024300 <StartDefaultTask+0x10c>)
 8024240:	f7fe fe6c 	bl	8022f1c <sys_thread_new>
 8024244:	e002      	b.n	802424c <StartDefaultTask+0x58>
			DEFAULT_THREAD_STACKSIZE, osPriorityAboveNormal);
		} else {
			netconn_delete(conn_port80);
 8024246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024248:	f7f3 f89a 	bl	8017380 <netconn_delete>
		}
	}

	struct netconn *conn_port102;
	conn_port102 = netconn_new(NETCONN_TCP);
 802424c:	2200      	movs	r2, #0
 802424e:	2100      	movs	r1, #0
 8024250:	2010      	movs	r0, #16
 8024252:	f7f3 f81b 	bl	801728c <netconn_new_with_proto_and_callback>
 8024256:	61f8      	str	r0, [r7, #28]
	if (conn_port102 != NULL) {
 8024258:	69fb      	ldr	r3, [r7, #28]
 802425a:	2b00      	cmp	r3, #0
 802425c:	d01c      	beq.n	8024298 <StartDefaultTask+0xa4>
		err = netconn_bind(conn_port102, IP_ADDR_ANY, 102);
 802425e:	2266      	movs	r2, #102	; 0x66
 8024260:	4925      	ldr	r1, [pc, #148]	; (80242f8 <StartDefaultTask+0x104>)
 8024262:	69f8      	ldr	r0, [r7, #28]
 8024264:	f7f3 f8b2 	bl	80173cc <netconn_bind>
 8024268:	4603      	mov	r3, r0
 802426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (err == ERR_OK) {
 802426e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8024272:	2b00      	cmp	r3, #0
 8024274:	d10d      	bne.n	8024292 <StartDefaultTask+0x9e>
			netconn_listen(conn_port102);
 8024276:	21ff      	movs	r1, #255	; 0xff
 8024278:	69f8      	ldr	r0, [r7, #28]
 802427a:	f7f3 f8df 	bl	801743c <netconn_listen_with_backlog>
			sys_thread_new("tcp_serv_thread", Client_thread, (void*) conn_port102,
 802427e:	2301      	movs	r3, #1
 8024280:	9300      	str	r3, [sp, #0]
 8024282:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024286:	69fa      	ldr	r2, [r7, #28]
 8024288:	491e      	ldr	r1, [pc, #120]	; (8024304 <StartDefaultTask+0x110>)
 802428a:	481f      	ldr	r0, [pc, #124]	; (8024308 <StartDefaultTask+0x114>)
 802428c:	f7fe fe46 	bl	8022f1c <sys_thread_new>
 8024290:	e002      	b.n	8024298 <StartDefaultTask+0xa4>
			DEFAULT_THREAD_STACKSIZE, osPriorityAboveNormal);
		} else {
			netconn_delete(conn_port102);
 8024292:	69f8      	ldr	r0, [r7, #28]
 8024294:	f7f3 f874 	bl	8017380 <netconn_delete>
	 uint8_t data[] = { 0x32, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x1A, 0x00,
	 0x04, 0x02, 0x12, 0x0A, 0x10, 0x02, 0x00, 0x01, 0x00, 0x82, 0x00,
	 0x00, 0x00, 0x12, 0x0A, 0x10, 0x02, 0x00, 0x01, 0x00, 0x00, 0x81,
	 0x00, 0x00, 0x00 };
	 */
	uint8_t data_conn1[] = { 0x80, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00 };
 8024298:	4a1c      	ldr	r2, [pc, #112]	; (802430c <StartDefaultTask+0x118>)
 802429a:	f107 030c 	add.w	r3, r7, #12
 802429e:	ca07      	ldmia	r2, {r0, r1, r2}
 80242a0:	c303      	stmia	r3!, {r0, r1}
 80242a2:	701a      	strb	r2, [r3, #0]
	uint8_t * request_data;
	request_data = (uint8_t*) pvPortMalloc(sizeof(data_conn1));
 80242a4:	2009      	movs	r0, #9
 80242a6:	f7f0 ff93 	bl	80151d0 <pvPortMalloc>
 80242aa:	61b8      	str	r0, [r7, #24]
	memcpy(request_data, data_conn1, sizeof(data_conn1));
 80242ac:	69bb      	ldr	r3, [r7, #24]
 80242ae:	461a      	mov	r2, r3
 80242b0:	f107 030c 	add.w	r3, r7, #12
 80242b4:	cb03      	ldmia	r3!, {r0, r1}
 80242b6:	6010      	str	r0, [r2, #0]
 80242b8:	6051      	str	r1, [r2, #4]
 80242ba:	781b      	ldrb	r3, [r3, #0]
 80242bc:	7213      	strb	r3, [r2, #8]
	hprot.data_len = sizeof(data_conn1);
 80242be:	4b14      	ldr	r3, [pc, #80]	; (8024310 <StartDefaultTask+0x11c>)
 80242c0:	2209      	movs	r2, #9
 80242c2:	741a      	strb	r2, [r3, #16]
	hprot.data_ptr = request_data;
 80242c4:	4a12      	ldr	r2, [pc, #72]	; (8024310 <StartDefaultTask+0x11c>)
 80242c6:	69bb      	ldr	r3, [r7, #24]
 80242c8:	60d3      	str	r3, [r2, #12]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80242ca:	2201      	movs	r2, #1
 80242cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80242d0:	4810      	ldr	r0, [pc, #64]	; (8024314 <StartDefaultTask+0x120>)
 80242d2:	f7ee fb03 	bl	80128dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80242d6:	2200      	movs	r2, #0
 80242d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80242dc:	480d      	ldr	r0, [pc, #52]	; (8024314 <StartDefaultTask+0x120>)
 80242de:	f7ee fafd 	bl	80128dc <HAL_GPIO_WritePin>
		 LogText(SUB_SYS_LOG, LOG_LEV_INFO, "Test data is sent \r\n");
		 hprot.have_data_to_send = 1U;
		 osDelay(30000);
		 */

		osDelay(300);
 80242e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80242e6:	f7f0 fa20 	bl	801472a <osDelay>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80242ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80242ee:	4809      	ldr	r0, [pc, #36]	; (8024314 <StartDefaultTask+0x120>)
 80242f0:	f7ee fb0d 	bl	801290e <HAL_GPIO_TogglePin>
		osDelay(300);
 80242f4:	e7f5      	b.n	80242e2 <StartDefaultTask+0xee>
 80242f6:	bf00      	nop
 80242f8:	0802b5e8 	.word	0x0802b5e8
 80242fc:	080264b9 	.word	0x080264b9
 8024300:	08029160 	.word	0x08029160
 8024304:	0802583d 	.word	0x0802583d
 8024308:	0802916c 	.word	0x0802916c
 802430c:	0802917c 	.word	0x0802917c
 8024310:	20011e58 	.word	0x20011e58
 8024314:	40021000 	.word	0x40021000

08024318 <StartHeapCleanerTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
//---------------------------------------------------------------
void StartHeapCleanerTask(void const * argument) {
 8024318:	b580      	push	{r7, lr}
 802431a:	b084      	sub	sp, #16
 802431c:	af00      	add	r7, sp, #0
 802431e:	6078      	str	r0, [r7, #4]
	uint8_t * heap_ptr;
	for (;;) {
		xQueueReceive(cleaner_queue, &heap_ptr, portMAX_DELAY);
 8024320:	4b07      	ldr	r3, [pc, #28]	; (8024340 <StartHeapCleanerTask+0x28>)
 8024322:	6818      	ldr	r0, [r3, #0]
 8024324:	f107 010c 	add.w	r1, r7, #12
 8024328:	2300      	movs	r3, #0
 802432a:	f04f 32ff 	mov.w	r2, #4294967295
 802432e:	f7f1 fcc5 	bl	8015cbc <xQueueGenericReceive>
		vPortFree((uint8_t *) heap_ptr);
 8024332:	68fb      	ldr	r3, [r7, #12]
 8024334:	4618      	mov	r0, r3
 8024336:	f7f1 f80d 	bl	8015354 <vPortFree>
		heap_ptr = NULL;
 802433a:	2300      	movs	r3, #0
 802433c:	60fb      	str	r3, [r7, #12]
		xQueueReceive(cleaner_queue, &heap_ptr, portMAX_DELAY);
 802433e:	e7ef      	b.n	8024320 <StartHeapCleanerTask+0x8>
 8024340:	20011dec 	.word	0x20011dec

08024344 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8024344:	b580      	push	{r7, lr}
 8024346:	b08c      	sub	sp, #48	; 0x30
 8024348:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802434a:	f107 031c 	add.w	r3, r7, #28
 802434e:	2200      	movs	r2, #0
 8024350:	601a      	str	r2, [r3, #0]
 8024352:	605a      	str	r2, [r3, #4]
 8024354:	609a      	str	r2, [r3, #8]
 8024356:	60da      	str	r2, [r3, #12]
 8024358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802435a:	2300      	movs	r3, #0
 802435c:	61bb      	str	r3, [r7, #24]
 802435e:	4a35      	ldr	r2, [pc, #212]	; (8024434 <MX_GPIO_Init+0xf0>)
 8024360:	4b34      	ldr	r3, [pc, #208]	; (8024434 <MX_GPIO_Init+0xf0>)
 8024362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024368:	6313      	str	r3, [r2, #48]	; 0x30
 802436a:	4b32      	ldr	r3, [pc, #200]	; (8024434 <MX_GPIO_Init+0xf0>)
 802436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024372:	61bb      	str	r3, [r7, #24]
 8024374:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8024376:	2300      	movs	r3, #0
 8024378:	617b      	str	r3, [r7, #20]
 802437a:	4a2e      	ldr	r2, [pc, #184]	; (8024434 <MX_GPIO_Init+0xf0>)
 802437c:	4b2d      	ldr	r3, [pc, #180]	; (8024434 <MX_GPIO_Init+0xf0>)
 802437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024380:	f043 0304 	orr.w	r3, r3, #4
 8024384:	6313      	str	r3, [r2, #48]	; 0x30
 8024386:	4b2b      	ldr	r3, [pc, #172]	; (8024434 <MX_GPIO_Init+0xf0>)
 8024388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802438a:	f003 0304 	and.w	r3, r3, #4
 802438e:	617b      	str	r3, [r7, #20]
 8024390:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8024392:	2300      	movs	r3, #0
 8024394:	613b      	str	r3, [r7, #16]
 8024396:	4a27      	ldr	r2, [pc, #156]	; (8024434 <MX_GPIO_Init+0xf0>)
 8024398:	4b26      	ldr	r3, [pc, #152]	; (8024434 <MX_GPIO_Init+0xf0>)
 802439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802439c:	f043 0301 	orr.w	r3, r3, #1
 80243a0:	6313      	str	r3, [r2, #48]	; 0x30
 80243a2:	4b24      	ldr	r3, [pc, #144]	; (8024434 <MX_GPIO_Init+0xf0>)
 80243a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243a6:	f003 0301 	and.w	r3, r3, #1
 80243aa:	613b      	str	r3, [r7, #16]
 80243ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80243ae:	2300      	movs	r3, #0
 80243b0:	60fb      	str	r3, [r7, #12]
 80243b2:	4a20      	ldr	r2, [pc, #128]	; (8024434 <MX_GPIO_Init+0xf0>)
 80243b4:	4b1f      	ldr	r3, [pc, #124]	; (8024434 <MX_GPIO_Init+0xf0>)
 80243b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243b8:	f043 0310 	orr.w	r3, r3, #16
 80243bc:	6313      	str	r3, [r2, #48]	; 0x30
 80243be:	4b1d      	ldr	r3, [pc, #116]	; (8024434 <MX_GPIO_Init+0xf0>)
 80243c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243c2:	f003 0310 	and.w	r3, r3, #16
 80243c6:	60fb      	str	r3, [r7, #12]
 80243c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80243ca:	2300      	movs	r3, #0
 80243cc:	60bb      	str	r3, [r7, #8]
 80243ce:	4a19      	ldr	r2, [pc, #100]	; (8024434 <MX_GPIO_Init+0xf0>)
 80243d0:	4b18      	ldr	r3, [pc, #96]	; (8024434 <MX_GPIO_Init+0xf0>)
 80243d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243d4:	f043 0302 	orr.w	r3, r3, #2
 80243d8:	6313      	str	r3, [r2, #48]	; 0x30
 80243da:	4b16      	ldr	r3, [pc, #88]	; (8024434 <MX_GPIO_Init+0xf0>)
 80243dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243de:	f003 0302 	and.w	r3, r3, #2
 80243e2:	60bb      	str	r3, [r7, #8]
 80243e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80243e6:	2300      	movs	r3, #0
 80243e8:	607b      	str	r3, [r7, #4]
 80243ea:	4a12      	ldr	r2, [pc, #72]	; (8024434 <MX_GPIO_Init+0xf0>)
 80243ec:	4b11      	ldr	r3, [pc, #68]	; (8024434 <MX_GPIO_Init+0xf0>)
 80243ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243f0:	f043 0308 	orr.w	r3, r3, #8
 80243f4:	6313      	str	r3, [r2, #48]	; 0x30
 80243f6:	4b0f      	ldr	r3, [pc, #60]	; (8024434 <MX_GPIO_Init+0xf0>)
 80243f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243fa:	f003 0308 	and.w	r3, r3, #8
 80243fe:	607b      	str	r3, [r7, #4]
 8024400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin, GPIO_PIN_RESET);
 8024402:	2200      	movs	r2, #0
 8024404:	f240 6101 	movw	r1, #1537	; 0x601
 8024408:	480b      	ldr	r0, [pc, #44]	; (8024438 <MX_GPIO_Init+0xf4>)
 802440a:	f7ee fa67 	bl	80128dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|RE_DE_OUT_Pin;
 802440e:	f240 6301 	movw	r3, #1537	; 0x601
 8024412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024414:	2301      	movs	r3, #1
 8024416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024418:	2300      	movs	r3, #0
 802441a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802441c:	2300      	movs	r3, #0
 802441e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8024420:	f107 031c 	add.w	r3, r7, #28
 8024424:	4619      	mov	r1, r3
 8024426:	4804      	ldr	r0, [pc, #16]	; (8024438 <MX_GPIO_Init+0xf4>)
 8024428:	f7ed ffc2 	bl	80123b0 <HAL_GPIO_Init>

}
 802442c:	bf00      	nop
 802442e:	3730      	adds	r7, #48	; 0x30
 8024430:	46bd      	mov	sp, r7
 8024432:	bd80      	pop	{r7, pc}
 8024434:	40023800 	.word	0x40023800
 8024438:	40021000 	.word	0x40021000

0802443c <LogInit>:

static char* txt_lev[NUM_LOG_LEV - 1] = { "OFF", "ERR", "WAR", "INF", };

static char* txt_sys[NUM_OF_SUB_SYS] = { "MEM", "WEB", "458", "TCP", "LOG" };

void LogInit(UART_HandleTypeDef * log_if) {
 802443c:	b490      	push	{r4, r7}
 802443e:	b082      	sub	sp, #8
 8024440:	af00      	add	r7, sp, #0
 8024442:	6078      	str	r0, [r7, #4]
	hlog.interface = log_if;
 8024444:	4a08      	ldr	r2, [pc, #32]	; (8024468 <LogInit+0x2c>)
 8024446:	687b      	ldr	r3, [r7, #4]
 8024448:	6013      	str	r3, [r2, #0]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 802444a:	2400      	movs	r4, #0
 802444c:	e004      	b.n	8024458 <LogInit+0x1c>
		hlog.levels[i] = LOG_LEV_ALL;
 802444e:	4b06      	ldr	r3, [pc, #24]	; (8024468 <LogInit+0x2c>)
 8024450:	4423      	add	r3, r4
 8024452:	2204      	movs	r2, #4
 8024454:	711a      	strb	r2, [r3, #4]
	for (register int i = 0; i < NUM_OF_SUB_SYS; i++) {
 8024456:	3401      	adds	r4, #1
 8024458:	2c04      	cmp	r4, #4
 802445a:	ddf8      	ble.n	802444e <LogInit+0x12>
	}
}
 802445c:	bf00      	nop
 802445e:	3708      	adds	r7, #8
 8024460:	46bd      	mov	sp, r7
 8024462:	bc90      	pop	{r4, r7}
 8024464:	4770      	bx	lr
 8024466:	bf00      	nop
 8024468:	20011df0 	.word	0x20011df0

0802446c <LogText__>:

void LogText__(log_sub_sys sys, log_level level, char *msg) {
 802446c:	b580      	push	{r7, lr}
 802446e:	b084      	sub	sp, #16
 8024470:	af00      	add	r7, sp, #0
 8024472:	4603      	mov	r3, r0
 8024474:	603a      	str	r2, [r7, #0]
 8024476:	71fb      	strb	r3, [r7, #7]
 8024478:	460b      	mov	r3, r1
 802447a:	71bb      	strb	r3, [r7, #6]
	if (level <= hlog.levels[sys]) {
 802447c:	79fb      	ldrb	r3, [r7, #7]
 802447e:	4a2d      	ldr	r2, [pc, #180]	; (8024534 <LogText__+0xc8>)
 8024480:	4413      	add	r3, r2
 8024482:	791b      	ldrb	r3, [r3, #4]
 8024484:	79ba      	ldrb	r2, [r7, #6]
 8024486:	429a      	cmp	r2, r3
 8024488:	d850      	bhi.n	802452c <LogText__+0xc0>
		while (hlog.interface->gState != HAL_UART_STATE_READY) {
 802448a:	e002      	b.n	8024492 <LogText__+0x26>
			osDelay(1);
 802448c:	2001      	movs	r0, #1
 802448e:	f7f0 f94c 	bl	801472a <osDelay>
		while (hlog.interface->gState != HAL_UART_STATE_READY) {
 8024492:	4b28      	ldr	r3, [pc, #160]	; (8024534 <LogText__+0xc8>)
 8024494:	681b      	ldr	r3, [r3, #0]
 8024496:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802449a:	b2db      	uxtb	r3, r3
 802449c:	2b20      	cmp	r3, #32
 802449e:	d1f5      	bne.n	802448c <LogText__+0x20>
		}
		uint len = 0;
 80244a0:	2300      	movs	r3, #0
 80244a2:	60fb      	str	r3, [r7, #12]
		char * ptr = msg;
 80244a4:	683b      	ldr	r3, [r7, #0]
 80244a6:	60bb      	str	r3, [r7, #8]
		while (*ptr++) {
 80244a8:	e002      	b.n	80244b0 <LogText__+0x44>
			len++;
 80244aa:	68fb      	ldr	r3, [r7, #12]
 80244ac:	3301      	adds	r3, #1
 80244ae:	60fb      	str	r3, [r7, #12]
		while (*ptr++) {
 80244b0:	68bb      	ldr	r3, [r7, #8]
 80244b2:	1c5a      	adds	r2, r3, #1
 80244b4:	60ba      	str	r2, [r7, #8]
 80244b6:	781b      	ldrb	r3, [r3, #0]
 80244b8:	2b00      	cmp	r3, #0
 80244ba:	d1f6      	bne.n	80244aa <LogText__+0x3e>
		}
		ptr = (char*) pvPortMalloc((size_t) (len + 10));
 80244bc:	68fb      	ldr	r3, [r7, #12]
 80244be:	330a      	adds	r3, #10
 80244c0:	4618      	mov	r0, r3
 80244c2:	f7f0 fe85 	bl	80151d0 <pvPortMalloc>
 80244c6:	60b8      	str	r0, [r7, #8]
		if (ptr != NULL) {
 80244c8:	68bb      	ldr	r3, [r7, #8]
 80244ca:	2b00      	cmp	r3, #0
 80244cc:	d02e      	beq.n	802452c <LogText__+0xc0>
			strcpy(ptr, txt_sys[sys]);
 80244ce:	79fb      	ldrb	r3, [r7, #7]
 80244d0:	4a19      	ldr	r2, [pc, #100]	; (8024538 <LogText__+0xcc>)
 80244d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80244d6:	4619      	mov	r1, r3
 80244d8:	68b8      	ldr	r0, [r7, #8]
 80244da:	f002 f9e7 	bl	80268ac <strcpy>
			strcpy(ptr + 3, "_");
 80244de:	68bb      	ldr	r3, [r7, #8]
 80244e0:	3303      	adds	r3, #3
 80244e2:	4916      	ldr	r1, [pc, #88]	; (802453c <LogText__+0xd0>)
 80244e4:	461a      	mov	r2, r3
 80244e6:	460b      	mov	r3, r1
 80244e8:	881b      	ldrh	r3, [r3, #0]
 80244ea:	8013      	strh	r3, [r2, #0]
			strcpy(ptr + 4, txt_lev[level]);
 80244ec:	68bb      	ldr	r3, [r7, #8]
 80244ee:	1d18      	adds	r0, r3, #4
 80244f0:	79bb      	ldrb	r3, [r7, #6]
 80244f2:	4a13      	ldr	r2, [pc, #76]	; (8024540 <LogText__+0xd4>)
 80244f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80244f8:	4619      	mov	r1, r3
 80244fa:	f002 f9d7 	bl	80268ac <strcpy>
			strcpy(ptr + 7, ":");
 80244fe:	68bb      	ldr	r3, [r7, #8]
 8024500:	3307      	adds	r3, #7
 8024502:	4910      	ldr	r1, [pc, #64]	; (8024544 <LogText__+0xd8>)
 8024504:	461a      	mov	r2, r3
 8024506:	460b      	mov	r3, r1
 8024508:	881b      	ldrh	r3, [r3, #0]
 802450a:	8013      	strh	r3, [r2, #0]
			strcpy(ptr + 8, msg);
 802450c:	68bb      	ldr	r3, [r7, #8]
 802450e:	3308      	adds	r3, #8
 8024510:	6839      	ldr	r1, [r7, #0]
 8024512:	4618      	mov	r0, r3
 8024514:	f002 f9ca 	bl	80268ac <strcpy>
			HAL_UART_Transmit_DMA(hlog.interface, (uint8_t*) ptr, len + 8);
 8024518:	4b06      	ldr	r3, [pc, #24]	; (8024534 <LogText__+0xc8>)
 802451a:	6818      	ldr	r0, [r3, #0]
 802451c:	68fb      	ldr	r3, [r7, #12]
 802451e:	b29b      	uxth	r3, r3
 8024520:	3308      	adds	r3, #8
 8024522:	b29b      	uxth	r3, r3
 8024524:	461a      	mov	r2, r3
 8024526:	68b9      	ldr	r1, [r7, #8]
 8024528:	f7ef fb2a 	bl	8013b80 <HAL_UART_Transmit_DMA>

		}
	}
}
 802452c:	bf00      	nop
 802452e:	3710      	adds	r7, #16
 8024530:	46bd      	mov	sp, r7
 8024532:	bd80      	pop	{r7, pc}
 8024534:	20011df0 	.word	0x20011df0
 8024538:	20000034 	.word	0x20000034
 802453c:	080291ac 	.word	0x080291ac
 8024540:	20000024 	.word	0x20000024
 8024544:	080291b0 	.word	0x080291b0

08024548 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8024548:	b580      	push	{r7, lr}
 802454a:	b084      	sub	sp, #16
 802454c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 802454e:	4b8b      	ldr	r3, [pc, #556]	; (802477c <MX_LWIP_Init+0x234>)
 8024550:	22c0      	movs	r2, #192	; 0xc0
 8024552:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8024554:	4b89      	ldr	r3, [pc, #548]	; (802477c <MX_LWIP_Init+0x234>)
 8024556:	22a8      	movs	r2, #168	; 0xa8
 8024558:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 4;
 802455a:	4b88      	ldr	r3, [pc, #544]	; (802477c <MX_LWIP_Init+0x234>)
 802455c:	2204      	movs	r2, #4
 802455e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 253;
 8024560:	4b86      	ldr	r3, [pc, #536]	; (802477c <MX_LWIP_Init+0x234>)
 8024562:	22fd      	movs	r2, #253	; 0xfd
 8024564:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8024566:	4b86      	ldr	r3, [pc, #536]	; (8024780 <MX_LWIP_Init+0x238>)
 8024568:	22ff      	movs	r2, #255	; 0xff
 802456a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 802456c:	4b84      	ldr	r3, [pc, #528]	; (8024780 <MX_LWIP_Init+0x238>)
 802456e:	22ff      	movs	r2, #255	; 0xff
 8024570:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8024572:	4b83      	ldr	r3, [pc, #524]	; (8024780 <MX_LWIP_Init+0x238>)
 8024574:	22ff      	movs	r2, #255	; 0xff
 8024576:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8024578:	4b81      	ldr	r3, [pc, #516]	; (8024780 <MX_LWIP_Init+0x238>)
 802457a:	2200      	movs	r2, #0
 802457c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 802457e:	4b81      	ldr	r3, [pc, #516]	; (8024784 <MX_LWIP_Init+0x23c>)
 8024580:	2200      	movs	r2, #0
 8024582:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8024584:	4b7f      	ldr	r3, [pc, #508]	; (8024784 <MX_LWIP_Init+0x23c>)
 8024586:	2200      	movs	r2, #0
 8024588:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 802458a:	4b7e      	ldr	r3, [pc, #504]	; (8024784 <MX_LWIP_Init+0x23c>)
 802458c:	2200      	movs	r2, #0
 802458e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8024590:	4b7c      	ldr	r3, [pc, #496]	; (8024784 <MX_LWIP_Init+0x23c>)
 8024592:	2200      	movs	r2, #0
 8024594:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8024596:	2100      	movs	r1, #0
 8024598:	2000      	movs	r0, #0
 802459a:	f7f4 fef7 	bl	801938c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 802459e:	4b77      	ldr	r3, [pc, #476]	; (802477c <MX_LWIP_Init+0x234>)
 80245a0:	781b      	ldrb	r3, [r3, #0]
 80245a2:	061a      	lsls	r2, r3, #24
 80245a4:	4b75      	ldr	r3, [pc, #468]	; (802477c <MX_LWIP_Init+0x234>)
 80245a6:	785b      	ldrb	r3, [r3, #1]
 80245a8:	041b      	lsls	r3, r3, #16
 80245aa:	431a      	orrs	r2, r3
 80245ac:	4b73      	ldr	r3, [pc, #460]	; (802477c <MX_LWIP_Init+0x234>)
 80245ae:	789b      	ldrb	r3, [r3, #2]
 80245b0:	021b      	lsls	r3, r3, #8
 80245b2:	4313      	orrs	r3, r2
 80245b4:	4a71      	ldr	r2, [pc, #452]	; (802477c <MX_LWIP_Init+0x234>)
 80245b6:	78d2      	ldrb	r2, [r2, #3]
 80245b8:	4313      	orrs	r3, r2
 80245ba:	061a      	lsls	r2, r3, #24
 80245bc:	4b6f      	ldr	r3, [pc, #444]	; (802477c <MX_LWIP_Init+0x234>)
 80245be:	781b      	ldrb	r3, [r3, #0]
 80245c0:	0619      	lsls	r1, r3, #24
 80245c2:	4b6e      	ldr	r3, [pc, #440]	; (802477c <MX_LWIP_Init+0x234>)
 80245c4:	785b      	ldrb	r3, [r3, #1]
 80245c6:	041b      	lsls	r3, r3, #16
 80245c8:	4319      	orrs	r1, r3
 80245ca:	4b6c      	ldr	r3, [pc, #432]	; (802477c <MX_LWIP_Init+0x234>)
 80245cc:	789b      	ldrb	r3, [r3, #2]
 80245ce:	021b      	lsls	r3, r3, #8
 80245d0:	430b      	orrs	r3, r1
 80245d2:	496a      	ldr	r1, [pc, #424]	; (802477c <MX_LWIP_Init+0x234>)
 80245d4:	78c9      	ldrb	r1, [r1, #3]
 80245d6:	430b      	orrs	r3, r1
 80245d8:	021b      	lsls	r3, r3, #8
 80245da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80245de:	431a      	orrs	r2, r3
 80245e0:	4b66      	ldr	r3, [pc, #408]	; (802477c <MX_LWIP_Init+0x234>)
 80245e2:	781b      	ldrb	r3, [r3, #0]
 80245e4:	0619      	lsls	r1, r3, #24
 80245e6:	4b65      	ldr	r3, [pc, #404]	; (802477c <MX_LWIP_Init+0x234>)
 80245e8:	785b      	ldrb	r3, [r3, #1]
 80245ea:	041b      	lsls	r3, r3, #16
 80245ec:	4319      	orrs	r1, r3
 80245ee:	4b63      	ldr	r3, [pc, #396]	; (802477c <MX_LWIP_Init+0x234>)
 80245f0:	789b      	ldrb	r3, [r3, #2]
 80245f2:	021b      	lsls	r3, r3, #8
 80245f4:	430b      	orrs	r3, r1
 80245f6:	4961      	ldr	r1, [pc, #388]	; (802477c <MX_LWIP_Init+0x234>)
 80245f8:	78c9      	ldrb	r1, [r1, #3]
 80245fa:	430b      	orrs	r3, r1
 80245fc:	0a1b      	lsrs	r3, r3, #8
 80245fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024602:	431a      	orrs	r2, r3
 8024604:	4b5d      	ldr	r3, [pc, #372]	; (802477c <MX_LWIP_Init+0x234>)
 8024606:	781b      	ldrb	r3, [r3, #0]
 8024608:	0619      	lsls	r1, r3, #24
 802460a:	4b5c      	ldr	r3, [pc, #368]	; (802477c <MX_LWIP_Init+0x234>)
 802460c:	785b      	ldrb	r3, [r3, #1]
 802460e:	041b      	lsls	r3, r3, #16
 8024610:	4319      	orrs	r1, r3
 8024612:	4b5a      	ldr	r3, [pc, #360]	; (802477c <MX_LWIP_Init+0x234>)
 8024614:	789b      	ldrb	r3, [r3, #2]
 8024616:	021b      	lsls	r3, r3, #8
 8024618:	430b      	orrs	r3, r1
 802461a:	4958      	ldr	r1, [pc, #352]	; (802477c <MX_LWIP_Init+0x234>)
 802461c:	78c9      	ldrb	r1, [r1, #3]
 802461e:	430b      	orrs	r3, r1
 8024620:	0e1b      	lsrs	r3, r3, #24
 8024622:	4313      	orrs	r3, r2
 8024624:	4a58      	ldr	r2, [pc, #352]	; (8024788 <MX_LWIP_Init+0x240>)
 8024626:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8024628:	4b55      	ldr	r3, [pc, #340]	; (8024780 <MX_LWIP_Init+0x238>)
 802462a:	781b      	ldrb	r3, [r3, #0]
 802462c:	061a      	lsls	r2, r3, #24
 802462e:	4b54      	ldr	r3, [pc, #336]	; (8024780 <MX_LWIP_Init+0x238>)
 8024630:	785b      	ldrb	r3, [r3, #1]
 8024632:	041b      	lsls	r3, r3, #16
 8024634:	431a      	orrs	r2, r3
 8024636:	4b52      	ldr	r3, [pc, #328]	; (8024780 <MX_LWIP_Init+0x238>)
 8024638:	789b      	ldrb	r3, [r3, #2]
 802463a:	021b      	lsls	r3, r3, #8
 802463c:	4313      	orrs	r3, r2
 802463e:	4a50      	ldr	r2, [pc, #320]	; (8024780 <MX_LWIP_Init+0x238>)
 8024640:	78d2      	ldrb	r2, [r2, #3]
 8024642:	4313      	orrs	r3, r2
 8024644:	061a      	lsls	r2, r3, #24
 8024646:	4b4e      	ldr	r3, [pc, #312]	; (8024780 <MX_LWIP_Init+0x238>)
 8024648:	781b      	ldrb	r3, [r3, #0]
 802464a:	0619      	lsls	r1, r3, #24
 802464c:	4b4c      	ldr	r3, [pc, #304]	; (8024780 <MX_LWIP_Init+0x238>)
 802464e:	785b      	ldrb	r3, [r3, #1]
 8024650:	041b      	lsls	r3, r3, #16
 8024652:	4319      	orrs	r1, r3
 8024654:	4b4a      	ldr	r3, [pc, #296]	; (8024780 <MX_LWIP_Init+0x238>)
 8024656:	789b      	ldrb	r3, [r3, #2]
 8024658:	021b      	lsls	r3, r3, #8
 802465a:	430b      	orrs	r3, r1
 802465c:	4948      	ldr	r1, [pc, #288]	; (8024780 <MX_LWIP_Init+0x238>)
 802465e:	78c9      	ldrb	r1, [r1, #3]
 8024660:	430b      	orrs	r3, r1
 8024662:	021b      	lsls	r3, r3, #8
 8024664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8024668:	431a      	orrs	r2, r3
 802466a:	4b45      	ldr	r3, [pc, #276]	; (8024780 <MX_LWIP_Init+0x238>)
 802466c:	781b      	ldrb	r3, [r3, #0]
 802466e:	0619      	lsls	r1, r3, #24
 8024670:	4b43      	ldr	r3, [pc, #268]	; (8024780 <MX_LWIP_Init+0x238>)
 8024672:	785b      	ldrb	r3, [r3, #1]
 8024674:	041b      	lsls	r3, r3, #16
 8024676:	4319      	orrs	r1, r3
 8024678:	4b41      	ldr	r3, [pc, #260]	; (8024780 <MX_LWIP_Init+0x238>)
 802467a:	789b      	ldrb	r3, [r3, #2]
 802467c:	021b      	lsls	r3, r3, #8
 802467e:	430b      	orrs	r3, r1
 8024680:	493f      	ldr	r1, [pc, #252]	; (8024780 <MX_LWIP_Init+0x238>)
 8024682:	78c9      	ldrb	r1, [r1, #3]
 8024684:	430b      	orrs	r3, r1
 8024686:	0a1b      	lsrs	r3, r3, #8
 8024688:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802468c:	431a      	orrs	r2, r3
 802468e:	4b3c      	ldr	r3, [pc, #240]	; (8024780 <MX_LWIP_Init+0x238>)
 8024690:	781b      	ldrb	r3, [r3, #0]
 8024692:	0619      	lsls	r1, r3, #24
 8024694:	4b3a      	ldr	r3, [pc, #232]	; (8024780 <MX_LWIP_Init+0x238>)
 8024696:	785b      	ldrb	r3, [r3, #1]
 8024698:	041b      	lsls	r3, r3, #16
 802469a:	4319      	orrs	r1, r3
 802469c:	4b38      	ldr	r3, [pc, #224]	; (8024780 <MX_LWIP_Init+0x238>)
 802469e:	789b      	ldrb	r3, [r3, #2]
 80246a0:	021b      	lsls	r3, r3, #8
 80246a2:	430b      	orrs	r3, r1
 80246a4:	4936      	ldr	r1, [pc, #216]	; (8024780 <MX_LWIP_Init+0x238>)
 80246a6:	78c9      	ldrb	r1, [r1, #3]
 80246a8:	430b      	orrs	r3, r1
 80246aa:	0e1b      	lsrs	r3, r3, #24
 80246ac:	4313      	orrs	r3, r2
 80246ae:	4a37      	ldr	r2, [pc, #220]	; (802478c <MX_LWIP_Init+0x244>)
 80246b0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80246b2:	4b34      	ldr	r3, [pc, #208]	; (8024784 <MX_LWIP_Init+0x23c>)
 80246b4:	781b      	ldrb	r3, [r3, #0]
 80246b6:	061a      	lsls	r2, r3, #24
 80246b8:	4b32      	ldr	r3, [pc, #200]	; (8024784 <MX_LWIP_Init+0x23c>)
 80246ba:	785b      	ldrb	r3, [r3, #1]
 80246bc:	041b      	lsls	r3, r3, #16
 80246be:	431a      	orrs	r2, r3
 80246c0:	4b30      	ldr	r3, [pc, #192]	; (8024784 <MX_LWIP_Init+0x23c>)
 80246c2:	789b      	ldrb	r3, [r3, #2]
 80246c4:	021b      	lsls	r3, r3, #8
 80246c6:	4313      	orrs	r3, r2
 80246c8:	4a2e      	ldr	r2, [pc, #184]	; (8024784 <MX_LWIP_Init+0x23c>)
 80246ca:	78d2      	ldrb	r2, [r2, #3]
 80246cc:	4313      	orrs	r3, r2
 80246ce:	061a      	lsls	r2, r3, #24
 80246d0:	4b2c      	ldr	r3, [pc, #176]	; (8024784 <MX_LWIP_Init+0x23c>)
 80246d2:	781b      	ldrb	r3, [r3, #0]
 80246d4:	0619      	lsls	r1, r3, #24
 80246d6:	4b2b      	ldr	r3, [pc, #172]	; (8024784 <MX_LWIP_Init+0x23c>)
 80246d8:	785b      	ldrb	r3, [r3, #1]
 80246da:	041b      	lsls	r3, r3, #16
 80246dc:	4319      	orrs	r1, r3
 80246de:	4b29      	ldr	r3, [pc, #164]	; (8024784 <MX_LWIP_Init+0x23c>)
 80246e0:	789b      	ldrb	r3, [r3, #2]
 80246e2:	021b      	lsls	r3, r3, #8
 80246e4:	430b      	orrs	r3, r1
 80246e6:	4927      	ldr	r1, [pc, #156]	; (8024784 <MX_LWIP_Init+0x23c>)
 80246e8:	78c9      	ldrb	r1, [r1, #3]
 80246ea:	430b      	orrs	r3, r1
 80246ec:	021b      	lsls	r3, r3, #8
 80246ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80246f2:	431a      	orrs	r2, r3
 80246f4:	4b23      	ldr	r3, [pc, #140]	; (8024784 <MX_LWIP_Init+0x23c>)
 80246f6:	781b      	ldrb	r3, [r3, #0]
 80246f8:	0619      	lsls	r1, r3, #24
 80246fa:	4b22      	ldr	r3, [pc, #136]	; (8024784 <MX_LWIP_Init+0x23c>)
 80246fc:	785b      	ldrb	r3, [r3, #1]
 80246fe:	041b      	lsls	r3, r3, #16
 8024700:	4319      	orrs	r1, r3
 8024702:	4b20      	ldr	r3, [pc, #128]	; (8024784 <MX_LWIP_Init+0x23c>)
 8024704:	789b      	ldrb	r3, [r3, #2]
 8024706:	021b      	lsls	r3, r3, #8
 8024708:	430b      	orrs	r3, r1
 802470a:	491e      	ldr	r1, [pc, #120]	; (8024784 <MX_LWIP_Init+0x23c>)
 802470c:	78c9      	ldrb	r1, [r1, #3]
 802470e:	430b      	orrs	r3, r1
 8024710:	0a1b      	lsrs	r3, r3, #8
 8024712:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024716:	431a      	orrs	r2, r3
 8024718:	4b1a      	ldr	r3, [pc, #104]	; (8024784 <MX_LWIP_Init+0x23c>)
 802471a:	781b      	ldrb	r3, [r3, #0]
 802471c:	0619      	lsls	r1, r3, #24
 802471e:	4b19      	ldr	r3, [pc, #100]	; (8024784 <MX_LWIP_Init+0x23c>)
 8024720:	785b      	ldrb	r3, [r3, #1]
 8024722:	041b      	lsls	r3, r3, #16
 8024724:	4319      	orrs	r1, r3
 8024726:	4b17      	ldr	r3, [pc, #92]	; (8024784 <MX_LWIP_Init+0x23c>)
 8024728:	789b      	ldrb	r3, [r3, #2]
 802472a:	021b      	lsls	r3, r3, #8
 802472c:	430b      	orrs	r3, r1
 802472e:	4915      	ldr	r1, [pc, #84]	; (8024784 <MX_LWIP_Init+0x23c>)
 8024730:	78c9      	ldrb	r1, [r1, #3]
 8024732:	430b      	orrs	r3, r1
 8024734:	0e1b      	lsrs	r3, r3, #24
 8024736:	4313      	orrs	r3, r2
 8024738:	4a15      	ldr	r2, [pc, #84]	; (8024790 <MX_LWIP_Init+0x248>)
 802473a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 802473c:	4b15      	ldr	r3, [pc, #84]	; (8024794 <MX_LWIP_Init+0x24c>)
 802473e:	9302      	str	r3, [sp, #8]
 8024740:	4b15      	ldr	r3, [pc, #84]	; (8024798 <MX_LWIP_Init+0x250>)
 8024742:	9301      	str	r3, [sp, #4]
 8024744:	2300      	movs	r3, #0
 8024746:	9300      	str	r3, [sp, #0]
 8024748:	4b11      	ldr	r3, [pc, #68]	; (8024790 <MX_LWIP_Init+0x248>)
 802474a:	4a10      	ldr	r2, [pc, #64]	; (802478c <MX_LWIP_Init+0x244>)
 802474c:	490e      	ldr	r1, [pc, #56]	; (8024788 <MX_LWIP_Init+0x240>)
 802474e:	4813      	ldr	r0, [pc, #76]	; (802479c <MX_LWIP_Init+0x254>)
 8024750:	f7f7 fe0c 	bl	801c36c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8024754:	4811      	ldr	r0, [pc, #68]	; (802479c <MX_LWIP_Init+0x254>)
 8024756:	f7f7 fee1 	bl	801c51c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 802475a:	4b10      	ldr	r3, [pc, #64]	; (802479c <MX_LWIP_Init+0x254>)
 802475c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8024760:	f003 0304 	and.w	r3, r3, #4
 8024764:	2b00      	cmp	r3, #0
 8024766:	d003      	beq.n	8024770 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8024768:	480c      	ldr	r0, [pc, #48]	; (802479c <MX_LWIP_Init+0x254>)
 802476a:	f7f7 fee7 	bl	801c53c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 802476e:	e002      	b.n	8024776 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8024770:	480a      	ldr	r0, [pc, #40]	; (802479c <MX_LWIP_Init+0x254>)
 8024772:	f7f7 ff27 	bl	801c5c4 <netif_set_down>
}
 8024776:	bf00      	nop
 8024778:	46bd      	mov	sp, r7
 802477a:	bd80      	pop	{r7, pc}
 802477c:	20011e38 	.word	0x20011e38
 8024780:	20011e34 	.word	0x20011e34
 8024784:	20011dfc 	.word	0x20011dfc
 8024788:	20011e30 	.word	0x20011e30
 802478c:	20011e3c 	.word	0x20011e3c
 8024790:	20011e40 	.word	0x20011e40
 8024794:	08019289 	.word	0x08019289
 8024798:	08023fad 	.word	0x08023fad
 802479c:	20011e00 	.word	0x20011e00

080247a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80247a0:	b580      	push	{r7, lr}
 80247a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80247a4:	f7eb fde6 	bl	8010374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80247a8:	f000 f822 	bl	80247f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_FLASH_Unlock();
 80247ac:	f7ed fb92 	bl	8011ed4 <HAL_FLASH_Unlock>
	EE_Init();
 80247b0:	f7fe fd24 	bl	80231fc <EE_Init>
	FlashInit();
 80247b4:	f7fe fc8c 	bl	80230d0 <FlashInit>
	ProtocolSettingsInit(&hprot);
 80247b8:	480b      	ldr	r0, [pc, #44]	; (80247e8 <main+0x48>)
 80247ba:	f000 fc49 	bl	8025050 <ProtocolSettingsInit>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80247be:	f7ff fdc1 	bl	8024344 <MX_GPIO_Init>
  MX_DMA_Init();
 80247c2:	f7fe fce5 	bl	8023190 <MX_DMA_Init>
  MX_UART5_Init();
 80247c6:	f001 fc05 	bl	8025fd4 <MX_UART5_Init>
  MX_TIM8_Init();
 80247ca:	f001 f96d 	bl	8025aa8 <MX_TIM8_Init>
  MX_TIM7_Init();
 80247ce:	f001 f939 	bl	8025a44 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80247d2:	f001 fc2b 	bl	802602c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LogInit(&huart1);
 80247d6:	4805      	ldr	r0, [pc, #20]	; (80247ec <main+0x4c>)
 80247d8:	f7ff fe30 	bl	802443c <LogInit>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80247dc:	f7ff fc98 	bl	8024110 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80247e0:	f7ef ff40 	bl	8014664 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80247e4:	e7fe      	b.n	80247e4 <main+0x44>
 80247e6:	bf00      	nop
 80247e8:	20011e58 	.word	0x20011e58
 80247ec:	20011fc8 	.word	0x20011fc8

080247f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80247f0:	b580      	push	{r7, lr}
 80247f2:	b094      	sub	sp, #80	; 0x50
 80247f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80247f6:	f107 0320 	add.w	r3, r7, #32
 80247fa:	2230      	movs	r2, #48	; 0x30
 80247fc:	2100      	movs	r1, #0
 80247fe:	4618      	mov	r0, r3
 8024800:	f002 f84c 	bl	802689c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8024804:	f107 030c 	add.w	r3, r7, #12
 8024808:	2200      	movs	r2, #0
 802480a:	601a      	str	r2, [r3, #0]
 802480c:	605a      	str	r2, [r3, #4]
 802480e:	609a      	str	r2, [r3, #8]
 8024810:	60da      	str	r2, [r3, #12]
 8024812:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8024814:	2300      	movs	r3, #0
 8024816:	60bb      	str	r3, [r7, #8]
 8024818:	4a28      	ldr	r2, [pc, #160]	; (80248bc <SystemClock_Config+0xcc>)
 802481a:	4b28      	ldr	r3, [pc, #160]	; (80248bc <SystemClock_Config+0xcc>)
 802481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802481e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024822:	6413      	str	r3, [r2, #64]	; 0x40
 8024824:	4b25      	ldr	r3, [pc, #148]	; (80248bc <SystemClock_Config+0xcc>)
 8024826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802482c:	60bb      	str	r3, [r7, #8]
 802482e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8024830:	2300      	movs	r3, #0
 8024832:	607b      	str	r3, [r7, #4]
 8024834:	4a22      	ldr	r2, [pc, #136]	; (80248c0 <SystemClock_Config+0xd0>)
 8024836:	4b22      	ldr	r3, [pc, #136]	; (80248c0 <SystemClock_Config+0xd0>)
 8024838:	681b      	ldr	r3, [r3, #0]
 802483a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802483e:	6013      	str	r3, [r2, #0]
 8024840:	4b1f      	ldr	r3, [pc, #124]	; (80248c0 <SystemClock_Config+0xd0>)
 8024842:	681b      	ldr	r3, [r3, #0]
 8024844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024848:	607b      	str	r3, [r7, #4]
 802484a:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 802484c:	2301      	movs	r3, #1
 802484e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8024850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8024854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8024856:	2302      	movs	r3, #2
 8024858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802485a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802485e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8024860:	2319      	movs	r3, #25
 8024862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8024864:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8024868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802486a:	2302      	movs	r3, #2
 802486c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 802486e:	2305      	movs	r3, #5
 8024870:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8024872:	f107 0320 	add.w	r3, r7, #32
 8024876:	4618      	mov	r0, r3
 8024878:	f7ee f85c 	bl	8012934 <HAL_RCC_OscConfig>
 802487c:	4603      	mov	r3, r0
 802487e:	2b00      	cmp	r3, #0
 8024880:	d001      	beq.n	8024886 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8024882:	f000 f851 	bl	8024928 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8024886:	230f      	movs	r3, #15
 8024888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802488a:	2302      	movs	r3, #2
 802488c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802488e:	2300      	movs	r3, #0
 8024890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8024892:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8024896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8024898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802489c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802489e:	f107 030c 	add.w	r3, r7, #12
 80248a2:	2105      	movs	r1, #5
 80248a4:	4618      	mov	r0, r3
 80248a6:	f7ee fa87 	bl	8012db8 <HAL_RCC_ClockConfig>
 80248aa:	4603      	mov	r3, r0
 80248ac:	2b00      	cmp	r3, #0
 80248ae:	d001      	beq.n	80248b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80248b0:	f000 f83a 	bl	8024928 <Error_Handler>
  }
}
 80248b4:	bf00      	nop
 80248b6:	3750      	adds	r7, #80	; 0x50
 80248b8:	46bd      	mov	sp, r7
 80248ba:	bd80      	pop	{r7, pc}
 80248bc:	40023800 	.word	0x40023800
 80248c0:	40007000 	.word	0x40007000

080248c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80248c4:	b580      	push	{r7, lr}
 80248c6:	b082      	sub	sp, #8
 80248c8:	af00      	add	r7, sp, #0
 80248ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80248cc:	687b      	ldr	r3, [r7, #4]
 80248ce:	681b      	ldr	r3, [r3, #0]
 80248d0:	4a10      	ldr	r2, [pc, #64]	; (8024914 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80248d2:	4293      	cmp	r3, r2
 80248d4:	d101      	bne.n	80248da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80248d6:	f7eb fd6f 	bl	80103b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM8) {
 80248da:	687b      	ldr	r3, [r7, #4]
 80248dc:	681b      	ldr	r3, [r3, #0]
 80248de:	4a0e      	ldr	r2, [pc, #56]	; (8024918 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80248e0:	4293      	cmp	r3, r2
 80248e2:	d101      	bne.n	80248e8 <HAL_TIM_PeriodElapsedCallback+0x24>
		CommandProcess();
 80248e4:	f000 f824 	bl	8024930 <CommandProcess>
	}
	if (htim->Instance == TIM7) {
 80248e8:	687b      	ldr	r3, [r7, #4]
 80248ea:	681b      	ldr	r3, [r3, #0]
 80248ec:	4a0b      	ldr	r2, [pc, #44]	; (802491c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80248ee:	4293      	cmp	r3, r2
 80248f0:	d10b      	bne.n	802490a <HAL_TIM_PeriodElapsedCallback+0x46>
		__HAL_TIM_SET_COUNTER(&htim7, 0x00U);
 80248f2:	4b0b      	ldr	r3, [pc, #44]	; (8024920 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80248f4:	681b      	ldr	r3, [r3, #0]
 80248f6:	2200      	movs	r2, #0
 80248f8:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim7);
 80248fa:	4809      	ldr	r0, [pc, #36]	; (8024920 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80248fc:	f7ee fc85 	bl	801320a <HAL_TIM_Base_Start_IT>
		ulHighFrequencyTimerTicks++;
 8024900:	4b08      	ldr	r3, [pc, #32]	; (8024924 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8024902:	681b      	ldr	r3, [r3, #0]
 8024904:	3301      	adds	r3, #1
 8024906:	4a07      	ldr	r2, [pc, #28]	; (8024924 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8024908:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 802490a:	bf00      	nop
 802490c:	3708      	adds	r7, #8
 802490e:	46bd      	mov	sp, r7
 8024910:	bd80      	pop	{r7, pc}
 8024912:	bf00      	nop
 8024914:	40010000 	.word	0x40010000
 8024918:	40010400 	.word	0x40010400
 802491c:	40001400 	.word	0x40001400
 8024920:	20011eec 	.word	0x20011eec
 8024924:	20009534 	.word	0x20009534

08024928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8024928:	b480      	push	{r7}
 802492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	for(;;){
 802492c:	e7fe      	b.n	802492c <Error_Handler+0x4>
	...

08024930 <CommandProcess>:
extern xQueueHandle frames_queue;
extern xQueueHandle cleaner_queue;

profibus_MPI_t hprot;

inline void CommandProcess() {
 8024930:	b580      	push	{r7, lr}
 8024932:	b082      	sub	sp, #8
 8024934:	af00      	add	r7, sp, #0
	static portBASE_TYPE xHigherPriorityTaskWoken;
	uint32_t len;
	xHigherPriorityTaskWoken = pdFALSE;
 8024936:	4b13      	ldr	r3, [pc, #76]	; (8024984 <CommandProcess+0x54>)
 8024938:	2200      	movs	r2, #0
 802493a:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim8);
 802493c:	4812      	ldr	r0, [pc, #72]	; (8024988 <CommandProcess+0x58>)
 802493e:	f7ee fc7f 	bl	8013240 <HAL_TIM_Base_Stop_IT>
	len = CB_Data_Length(&inbuf_UART);
 8024942:	4812      	ldr	r0, [pc, #72]	; (802498c <CommandProcess+0x5c>)
 8024944:	f7fe fb68 	bl	8023018 <CB_Data_Length>
 8024948:	4603      	mov	r3, r0
 802494a:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR(frames_queue, &len, &xHigherPriorityTaskWoken);
 802494c:	4b10      	ldr	r3, [pc, #64]	; (8024990 <CommandProcess+0x60>)
 802494e:	6818      	ldr	r0, [r3, #0]
 8024950:	1d39      	adds	r1, r7, #4
 8024952:	2300      	movs	r3, #0
 8024954:	4a0b      	ldr	r2, [pc, #44]	; (8024984 <CommandProcess+0x54>)
 8024956:	f7f1 f893 	bl	8015a80 <xQueueGenericSendFromISR>
	if (xHigherPriorityTaskWoken == pdTRUE) {
 802495a:	4b0a      	ldr	r3, [pc, #40]	; (8024984 <CommandProcess+0x54>)
 802495c:	681b      	ldr	r3, [r3, #0]
 802495e:	2b01      	cmp	r3, #1
 8024960:	d10b      	bne.n	802497a <CommandProcess+0x4a>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8024962:	4b08      	ldr	r3, [pc, #32]	; (8024984 <CommandProcess+0x54>)
 8024964:	681b      	ldr	r3, [r3, #0]
 8024966:	2b00      	cmp	r3, #0
 8024968:	d007      	beq.n	802497a <CommandProcess+0x4a>
 802496a:	4b0a      	ldr	r3, [pc, #40]	; (8024994 <CommandProcess+0x64>)
 802496c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8024970:	601a      	str	r2, [r3, #0]
 8024972:	f3bf 8f4f 	dsb	sy
 8024976:	f3bf 8f6f 	isb	sy
	}
}
 802497a:	bf00      	nop
 802497c:	3708      	adds	r7, #8
 802497e:	46bd      	mov	sp, r7
 8024980:	bd80      	pop	{r7, pc}
 8024982:	bf00      	nop
 8024984:	20009d98 	.word	0x20009d98
 8024988:	20011eb0 	.word	0x20011eb0
 802498c:	20011e48 	.word	0x20011e48
 8024990:	20011ddc 	.word	0x20011ddc
 8024994:	e000ed04 	.word	0xe000ed04

08024998 <SendAckMsg>:

void SendAckMsg(void) {
 8024998:	b580      	push	{r7, lr}
 802499a:	b082      	sub	sp, #8
 802499c:	af00      	add	r7, sp, #0
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(1);
 802499e:	2001      	movs	r0, #1
 80249a0:	f7f0 fc16 	bl	80151d0 <pvPortMalloc>
 80249a4:	6078      	str	r0, [r7, #4]
	*temp = 0xE5;
 80249a6:	687b      	ldr	r3, [r7, #4]
 80249a8:	22e5      	movs	r2, #229	; 0xe5
 80249aa:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 80249ac:	2201      	movs	r2, #1
 80249ae:	2101      	movs	r1, #1
 80249b0:	4805      	ldr	r0, [pc, #20]	; (80249c8 <SendAckMsg+0x30>)
 80249b2:	f7ed ff93 	bl	80128dc <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 1);
 80249b6:	2201      	movs	r2, #1
 80249b8:	6879      	ldr	r1, [r7, #4]
 80249ba:	4804      	ldr	r0, [pc, #16]	; (80249cc <SendAckMsg+0x34>)
 80249bc:	f7ef f8e0 	bl	8013b80 <HAL_UART_Transmit_DMA>
}
 80249c0:	bf00      	nop
 80249c2:	3708      	adds	r7, #8
 80249c4:	46bd      	mov	sp, r7
 80249c6:	bd80      	pop	{r7, pc}
 80249c8:	40021000 	.word	0x40021000
 80249cc:	20011f88 	.word	0x20011f88

080249d0 <SendConfirmMsg>:

void SendConfirmMsg(uint8_t to, uint8_t from, uint8_t size, uint8_t func) {
 80249d0:	b590      	push	{r4, r7, lr}
 80249d2:	b087      	sub	sp, #28
 80249d4:	af00      	add	r7, sp, #0
 80249d6:	4604      	mov	r4, r0
 80249d8:	4608      	mov	r0, r1
 80249da:	4611      	mov	r1, r2
 80249dc:	461a      	mov	r2, r3
 80249de:	4623      	mov	r3, r4
 80249e0:	71fb      	strb	r3, [r7, #7]
 80249e2:	4603      	mov	r3, r0
 80249e4:	71bb      	strb	r3, [r7, #6]
 80249e6:	460b      	mov	r3, r1
 80249e8:	717b      	strb	r3, [r7, #5]
 80249ea:	4613      	mov	r3, r2
 80249ec:	713b      	strb	r3, [r7, #4]
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = size + 6;
 80249ee:	797b      	ldrb	r3, [r7, #5]
 80249f0:	3306      	adds	r3, #6
 80249f2:	74fb      	strb	r3, [r7, #19]
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 80249f4:	7cfb      	ldrb	r3, [r7, #19]
 80249f6:	4618      	mov	r0, r3
 80249f8:	f7f0 fbea 	bl	80151d0 <pvPortMalloc>
 80249fc:	60f8      	str	r0, [r7, #12]
	if (msg_ptr == NULL) {
 80249fe:	68fb      	ldr	r3, [r7, #12]
 8024a00:	2b00      	cmp	r3, #0
 8024a02:	d106      	bne.n	8024a12 <SendConfirmMsg+0x42>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 8024a04:	4a44      	ldr	r2, [pc, #272]	; (8024b18 <SendConfirmMsg+0x148>)
 8024a06:	2101      	movs	r1, #1
 8024a08:	2000      	movs	r0, #0
 8024a0a:	f7ff fd2f 	bl	802446c <LogText__>
				"Request buffer allocation error.");
		Error_Handler();
 8024a0e:	f7ff ff8b 	bl	8024928 <Error_Handler>
	}
	tmp_ptr = msg_ptr;
 8024a12:	68fb      	ldr	r3, [r7, #12]
 8024a14:	617b      	str	r3, [r7, #20]
	*tmp_ptr++ = 0x68;
 8024a16:	697b      	ldr	r3, [r7, #20]
 8024a18:	1c5a      	adds	r2, r3, #1
 8024a1a:	617a      	str	r2, [r7, #20]
 8024a1c:	2268      	movs	r2, #104	; 0x68
 8024a1e:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = size;
 8024a20:	697b      	ldr	r3, [r7, #20]
 8024a22:	1c5a      	adds	r2, r3, #1
 8024a24:	617a      	str	r2, [r7, #20]
 8024a26:	797a      	ldrb	r2, [r7, #5]
 8024a28:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = size;
 8024a2a:	697b      	ldr	r3, [r7, #20]
 8024a2c:	1c5a      	adds	r2, r3, #1
 8024a2e:	617a      	str	r2, [r7, #20]
 8024a30:	797a      	ldrb	r2, [r7, #5]
 8024a32:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x68;
 8024a34:	697b      	ldr	r3, [r7, #20]
 8024a36:	1c5a      	adds	r2, r3, #1
 8024a38:	617a      	str	r2, [r7, #20]
 8024a3a:	2268      	movs	r2, #104	; 0x68
 8024a3c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = to | 0x80;
 8024a3e:	697b      	ldr	r3, [r7, #20]
 8024a40:	1c5a      	adds	r2, r3, #1
 8024a42:	617a      	str	r2, [r7, #20]
 8024a44:	79fa      	ldrb	r2, [r7, #7]
 8024a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8024a4a:	b2d2      	uxtb	r2, r2
 8024a4c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = from | 0x80;
 8024a4e:	697b      	ldr	r3, [r7, #20]
 8024a50:	1c5a      	adds	r2, r3, #1
 8024a52:	617a      	str	r2, [r7, #20]
 8024a54:	79ba      	ldrb	r2, [r7, #6]
 8024a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8024a5a:	b2d2      	uxtb	r2, r2
 8024a5c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = func;
 8024a5e:	697b      	ldr	r3, [r7, #20]
 8024a60:	1c5a      	adds	r2, r3, #1
 8024a62:	617a      	str	r2, [r7, #20]
 8024a64:	793a      	ldrb	r2, [r7, #4]
 8024a66:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x12;
 8024a68:	697b      	ldr	r3, [r7, #20]
 8024a6a:	1c5a      	adds	r2, r3, #1
 8024a6c:	617a      	str	r2, [r7, #20]
 8024a6e:	2212      	movs	r2, #18
 8024a70:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x1F;
 8024a72:	697b      	ldr	r3, [r7, #20]
 8024a74:	1c5a      	adds	r2, r3, #1
 8024a76:	617a      	str	r2, [r7, #20]
 8024a78:	221f      	movs	r2, #31
 8024a7a:	701a      	strb	r2, [r3, #0]
	if (size == 0x07) {
 8024a7c:	797b      	ldrb	r3, [r7, #5]
 8024a7e:	2b07      	cmp	r3, #7
 8024a80:	d10a      	bne.n	8024a98 <SendConfirmMsg+0xc8>
		*tmp_ptr++ = 0x05;
 8024a82:	697b      	ldr	r3, [r7, #20]
 8024a84:	1c5a      	adds	r2, r3, #1
 8024a86:	617a      	str	r2, [r7, #20]
 8024a88:	2205      	movs	r2, #5
 8024a8a:	701a      	strb	r2, [r3, #0]
		*tmp_ptr++ = 0x07;
 8024a8c:	697b      	ldr	r3, [r7, #20]
 8024a8e:	1c5a      	adds	r2, r3, #1
 8024a90:	617a      	str	r2, [r7, #20]
 8024a92:	2207      	movs	r2, #7
 8024a94:	701a      	strb	r2, [r3, #0]
 8024a96:	e01d      	b.n	8024ad4 <SendConfirmMsg+0x104>
	} else {
		*tmp_ptr++ = 0xB0;
 8024a98:	697b      	ldr	r3, [r7, #20]
 8024a9a:	1c5a      	adds	r2, r3, #1
 8024a9c:	617a      	str	r2, [r7, #20]
 8024a9e:	22b0      	movs	r2, #176	; 0xb0
 8024aa0:	701a      	strb	r2, [r3, #0]
		*tmp_ptr++ = 0x07;
 8024aa2:	697b      	ldr	r3, [r7, #20]
 8024aa4:	1c5a      	adds	r2, r3, #1
 8024aa6:	617a      	str	r2, [r7, #20]
 8024aa8:	2207      	movs	r2, #7
 8024aaa:	701a      	strb	r2, [r3, #0]
		*tmp_ptr++ = hprot.req_num++;
 8024aac:	697b      	ldr	r3, [r7, #20]
 8024aae:	1c5a      	adds	r2, r3, #1
 8024ab0:	617a      	str	r2, [r7, #20]
 8024ab2:	4a1a      	ldr	r2, [pc, #104]	; (8024b1c <SendConfirmMsg+0x14c>)
 8024ab4:	7c52      	ldrb	r2, [r2, #17]
 8024ab6:	1c51      	adds	r1, r2, #1
 8024ab8:	b2c8      	uxtb	r0, r1
 8024aba:	4918      	ldr	r1, [pc, #96]	; (8024b1c <SendConfirmMsg+0x14c>)
 8024abc:	7448      	strb	r0, [r1, #17]
 8024abe:	701a      	strb	r2, [r3, #0]
		if (hprot.req_num == 0) {
 8024ac0:	4b16      	ldr	r3, [pc, #88]	; (8024b1c <SendConfirmMsg+0x14c>)
 8024ac2:	7c5b      	ldrb	r3, [r3, #17]
 8024ac4:	2b00      	cmp	r3, #0
 8024ac6:	d105      	bne.n	8024ad4 <SendConfirmMsg+0x104>
			hprot.req_num++;
 8024ac8:	4b14      	ldr	r3, [pc, #80]	; (8024b1c <SendConfirmMsg+0x14c>)
 8024aca:	7c5b      	ldrb	r3, [r3, #17]
 8024acc:	3301      	adds	r3, #1
 8024ace:	b2da      	uxtb	r2, r3
 8024ad0:	4b12      	ldr	r3, [pc, #72]	; (8024b1c <SendConfirmMsg+0x14c>)
 8024ad2:	745a      	strb	r2, [r3, #17]
		}
	}
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, size);
 8024ad4:	697c      	ldr	r4, [r7, #20]
 8024ad6:	1c63      	adds	r3, r4, #1
 8024ad8:	617b      	str	r3, [r7, #20]
 8024ada:	68fb      	ldr	r3, [r7, #12]
 8024adc:	3304      	adds	r3, #4
 8024ade:	797a      	ldrb	r2, [r7, #5]
 8024ae0:	4611      	mov	r1, r2
 8024ae2:	4618      	mov	r0, r3
 8024ae4:	f000 fadc 	bl	80250a0 <CalculateFCS>
 8024ae8:	4603      	mov	r3, r0
 8024aea:	7023      	strb	r3, [r4, #0]
	*tmp_ptr = 0x16;
 8024aec:	697b      	ldr	r3, [r7, #20]
 8024aee:	2216      	movs	r2, #22
 8024af0:	701a      	strb	r2, [r3, #0]
	hprot.confirm_status = CONF_SENT;
 8024af2:	4b0a      	ldr	r3, [pc, #40]	; (8024b1c <SendConfirmMsg+0x14c>)
 8024af4:	2202      	movs	r2, #2
 8024af6:	709a      	strb	r2, [r3, #2]
	TRANS_ON();
 8024af8:	2201      	movs	r2, #1
 8024afa:	2101      	movs	r1, #1
 8024afc:	4808      	ldr	r0, [pc, #32]	; (8024b20 <SendConfirmMsg+0x150>)
 8024afe:	f7ed feed 	bl	80128dc <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 8024b02:	7cfb      	ldrb	r3, [r7, #19]
 8024b04:	b29b      	uxth	r3, r3
 8024b06:	461a      	mov	r2, r3
 8024b08:	68f9      	ldr	r1, [r7, #12]
 8024b0a:	4806      	ldr	r0, [pc, #24]	; (8024b24 <SendConfirmMsg+0x154>)
 8024b0c:	f7ef f838 	bl	8013b80 <HAL_UART_Transmit_DMA>
}
 8024b10:	bf00      	nop
 8024b12:	371c      	adds	r7, #28
 8024b14:	46bd      	mov	sp, r7
 8024b16:	bd90      	pop	{r4, r7, pc}
 8024b18:	080291b8 	.word	0x080291b8
 8024b1c:	20011e58 	.word	0x20011e58
 8024b20:	40021000 	.word	0x40021000
 8024b24:	20011f88 	.word	0x20011f88

08024b28 <SendTokenMsg>:

void SendTokenMsg(uint8_t to, uint8_t from) {
 8024b28:	b580      	push	{r7, lr}
 8024b2a:	b084      	sub	sp, #16
 8024b2c:	af00      	add	r7, sp, #0
 8024b2e:	4603      	mov	r3, r0
 8024b30:	460a      	mov	r2, r1
 8024b32:	71fb      	strb	r3, [r7, #7]
 8024b34:	4613      	mov	r3, r2
 8024b36:	71bb      	strb	r3, [r7, #6]
	uint8_t * temp;
	static int cnt = 100;
	temp = (uint8_t*) pvPortMalloc(3);
 8024b38:	2003      	movs	r0, #3
 8024b3a:	f7f0 fb49 	bl	80151d0 <pvPortMalloc>
 8024b3e:	60f8      	str	r0, [r7, #12]
	if (temp == NULL) {
 8024b40:	68fb      	ldr	r3, [r7, #12]
 8024b42:	2b00      	cmp	r3, #0
 8024b44:	d101      	bne.n	8024b4a <SendTokenMsg+0x22>
		Error_Handler();
 8024b46:	f7ff feef 	bl	8024928 <Error_Handler>
	}
	temp[0] = 0xDC;
 8024b4a:	68fb      	ldr	r3, [r7, #12]
 8024b4c:	22dc      	movs	r2, #220	; 0xdc
 8024b4e:	701a      	strb	r2, [r3, #0]
	temp[1] = to;
 8024b50:	68fb      	ldr	r3, [r7, #12]
 8024b52:	3301      	adds	r3, #1
 8024b54:	79fa      	ldrb	r2, [r7, #7]
 8024b56:	701a      	strb	r2, [r3, #0]
	temp[2] = from;
 8024b58:	68fb      	ldr	r3, [r7, #12]
 8024b5a:	3302      	adds	r3, #2
 8024b5c:	79ba      	ldrb	r2, [r7, #6]
 8024b5e:	701a      	strb	r2, [r3, #0]
	cnt--;
 8024b60:	4b14      	ldr	r3, [pc, #80]	; (8024bb4 <SendTokenMsg+0x8c>)
 8024b62:	681b      	ldr	r3, [r3, #0]
 8024b64:	3b01      	subs	r3, #1
 8024b66:	4a13      	ldr	r2, [pc, #76]	; (8024bb4 <SendTokenMsg+0x8c>)
 8024b68:	6013      	str	r3, [r2, #0]
	if (cnt == 0) {
 8024b6a:	4b12      	ldr	r3, [pc, #72]	; (8024bb4 <SendTokenMsg+0x8c>)
 8024b6c:	681b      	ldr	r3, [r3, #0]
 8024b6e:	2b00      	cmp	r3, #0
 8024b70:	d107      	bne.n	8024b82 <SendTokenMsg+0x5a>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8024b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024b76:	4810      	ldr	r0, [pc, #64]	; (8024bb8 <SendTokenMsg+0x90>)
 8024b78:	f7ed fec9 	bl	801290e <HAL_GPIO_TogglePin>
		cnt = 10;
 8024b7c:	4b0d      	ldr	r3, [pc, #52]	; (8024bb4 <SendTokenMsg+0x8c>)
 8024b7e:	220a      	movs	r2, #10
 8024b80:	601a      	str	r2, [r3, #0]
	}
	TRANS_ON();
 8024b82:	2201      	movs	r2, #1
 8024b84:	2101      	movs	r1, #1
 8024b86:	480c      	ldr	r0, [pc, #48]	; (8024bb8 <SendTokenMsg+0x90>)
 8024b88:	f7ed fea8 	bl	80128dc <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit_DMA(&huart5, temp, 3) == HAL_BUSY){
 8024b8c:	2203      	movs	r2, #3
 8024b8e:	68f9      	ldr	r1, [r7, #12]
 8024b90:	480a      	ldr	r0, [pc, #40]	; (8024bbc <SendTokenMsg+0x94>)
 8024b92:	f7ee fff5 	bl	8013b80 <HAL_UART_Transmit_DMA>
 8024b96:	4603      	mov	r3, r0
 8024b98:	2b02      	cmp	r3, #2
 8024b9a:	d107      	bne.n	8024bac <SendTokenMsg+0x84>
		TRANS_OFF();
 8024b9c:	2200      	movs	r2, #0
 8024b9e:	2101      	movs	r1, #1
 8024ba0:	4805      	ldr	r0, [pc, #20]	; (8024bb8 <SendTokenMsg+0x90>)
 8024ba2:	f7ed fe9b 	bl	80128dc <HAL_GPIO_WritePin>
		vPortFree(temp);
 8024ba6:	68f8      	ldr	r0, [r7, #12]
 8024ba8:	f7f0 fbd4 	bl	8015354 <vPortFree>
	}
}
 8024bac:	bf00      	nop
 8024bae:	3710      	adds	r7, #16
 8024bb0:	46bd      	mov	sp, r7
 8024bb2:	bd80      	pop	{r7, pc}
 8024bb4:	20000048 	.word	0x20000048
 8024bb8:	40021000 	.word	0x40021000
 8024bbc:	20011f88 	.word	0x20011f88

08024bc0 <SendNoDataMsg>:

void SendNoDataMsg(uint8_t to, uint8_t from, uint8_t fc) {
 8024bc0:	b580      	push	{r7, lr}
 8024bc2:	b084      	sub	sp, #16
 8024bc4:	af00      	add	r7, sp, #0
 8024bc6:	4603      	mov	r3, r0
 8024bc8:	71fb      	strb	r3, [r7, #7]
 8024bca:	460b      	mov	r3, r1
 8024bcc:	71bb      	strb	r3, [r7, #6]
 8024bce:	4613      	mov	r3, r2
 8024bd0:	717b      	strb	r3, [r7, #5]
	uint8_t * temp;
	temp = (uint8_t*) pvPortMalloc(6);
 8024bd2:	2006      	movs	r0, #6
 8024bd4:	f7f0 fafc 	bl	80151d0 <pvPortMalloc>
 8024bd8:	60f8      	str	r0, [r7, #12]
	if (temp == NULL) {
 8024bda:	68fb      	ldr	r3, [r7, #12]
 8024bdc:	2b00      	cmp	r3, #0
 8024bde:	d101      	bne.n	8024be4 <SendNoDataMsg+0x24>
		Error_Handler();
 8024be0:	f7ff fea2 	bl	8024928 <Error_Handler>
	}
	temp[0] = 0x10;
 8024be4:	68fb      	ldr	r3, [r7, #12]
 8024be6:	2210      	movs	r2, #16
 8024be8:	701a      	strb	r2, [r3, #0]
	temp[1] = to;
 8024bea:	68fb      	ldr	r3, [r7, #12]
 8024bec:	3301      	adds	r3, #1
 8024bee:	79fa      	ldrb	r2, [r7, #7]
 8024bf0:	701a      	strb	r2, [r3, #0]
	temp[2] = from;
 8024bf2:	68fb      	ldr	r3, [r7, #12]
 8024bf4:	3302      	adds	r3, #2
 8024bf6:	79ba      	ldrb	r2, [r7, #6]
 8024bf8:	701a      	strb	r2, [r3, #0]
	temp[3] = fc;
 8024bfa:	68fb      	ldr	r3, [r7, #12]
 8024bfc:	3303      	adds	r3, #3
 8024bfe:	797a      	ldrb	r2, [r7, #5]
 8024c00:	701a      	strb	r2, [r3, #0]
	temp[4] = to + from + fc;
 8024c02:	68fb      	ldr	r3, [r7, #12]
 8024c04:	3304      	adds	r3, #4
 8024c06:	79f9      	ldrb	r1, [r7, #7]
 8024c08:	79ba      	ldrb	r2, [r7, #6]
 8024c0a:	440a      	add	r2, r1
 8024c0c:	b2d1      	uxtb	r1, r2
 8024c0e:	797a      	ldrb	r2, [r7, #5]
 8024c10:	440a      	add	r2, r1
 8024c12:	b2d2      	uxtb	r2, r2
 8024c14:	701a      	strb	r2, [r3, #0]
	temp[5] = 0x16;
 8024c16:	68fb      	ldr	r3, [r7, #12]
 8024c18:	3305      	adds	r3, #5
 8024c1a:	2216      	movs	r2, #22
 8024c1c:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 8024c1e:	2201      	movs	r2, #1
 8024c20:	2101      	movs	r1, #1
 8024c22:	4806      	ldr	r0, [pc, #24]	; (8024c3c <SendNoDataMsg+0x7c>)
 8024c24:	f7ed fe5a 	bl	80128dc <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, temp, 6);
 8024c28:	2206      	movs	r2, #6
 8024c2a:	68f9      	ldr	r1, [r7, #12]
 8024c2c:	4804      	ldr	r0, [pc, #16]	; (8024c40 <SendNoDataMsg+0x80>)
 8024c2e:	f7ee ffa7 	bl	8013b80 <HAL_UART_Transmit_DMA>
}
 8024c32:	bf00      	nop
 8024c34:	3710      	adds	r7, #16
 8024c36:	46bd      	mov	sp, r7
 8024c38:	bd80      	pop	{r7, pc}
 8024c3a:	bf00      	nop
 8024c3c:	40021000 	.word	0x40021000
 8024c40:	20011f88 	.word	0x20011f88

08024c44 <SendRequestMsg>:

void SendRequestMsg(uint8_t to, uint8_t from, uint8_t* data, uint8_t data_len) {
 8024c44:	b590      	push	{r4, r7, lr}
 8024c46:	b087      	sub	sp, #28
 8024c48:	af00      	add	r7, sp, #0
 8024c4a:	603a      	str	r2, [r7, #0]
 8024c4c:	461a      	mov	r2, r3
 8024c4e:	4603      	mov	r3, r0
 8024c50:	71fb      	strb	r3, [r7, #7]
 8024c52:	460b      	mov	r3, r1
 8024c54:	71bb      	strb	r3, [r7, #6]
 8024c56:	4613      	mov	r3, r2
 8024c58:	717b      	strb	r3, [r7, #5]
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 13;
 8024c5a:	797b      	ldrb	r3, [r7, #5]
 8024c5c:	330d      	adds	r3, #13
 8024c5e:	75fb      	strb	r3, [r7, #23]
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 8024c60:	7dfb      	ldrb	r3, [r7, #23]
 8024c62:	4618      	mov	r0, r3
 8024c64:	f7f0 fab4 	bl	80151d0 <pvPortMalloc>
 8024c68:	6138      	str	r0, [r7, #16]
	if (msg_ptr == NULL) {
 8024c6a:	693b      	ldr	r3, [r7, #16]
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	d106      	bne.n	8024c7e <SendRequestMsg+0x3a>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 8024c70:	4a3a      	ldr	r2, [pc, #232]	; (8024d5c <SendRequestMsg+0x118>)
 8024c72:	2101      	movs	r1, #1
 8024c74:	2000      	movs	r0, #0
 8024c76:	f7ff fbf9 	bl	802446c <LogText__>
				"Request buffer allocation error.");
		Error_Handler();
 8024c7a:	f7ff fe55 	bl	8024928 <Error_Handler>
	}
	tmp_ptr = msg_ptr;
 8024c7e:	693b      	ldr	r3, [r7, #16]
 8024c80:	60fb      	str	r3, [r7, #12]
	*tmp_ptr++ = 0x68;
 8024c82:	68fb      	ldr	r3, [r7, #12]
 8024c84:	1c5a      	adds	r2, r3, #1
 8024c86:	60fa      	str	r2, [r7, #12]
 8024c88:	2268      	movs	r2, #104	; 0x68
 8024c8a:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = data_len + 7;
 8024c8c:	68fb      	ldr	r3, [r7, #12]
 8024c8e:	1c5a      	adds	r2, r3, #1
 8024c90:	60fa      	str	r2, [r7, #12]
 8024c92:	797a      	ldrb	r2, [r7, #5]
 8024c94:	3207      	adds	r2, #7
 8024c96:	b2d2      	uxtb	r2, r2
 8024c98:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = data_len + 7;
 8024c9a:	68fb      	ldr	r3, [r7, #12]
 8024c9c:	1c5a      	adds	r2, r3, #1
 8024c9e:	60fa      	str	r2, [r7, #12]
 8024ca0:	797a      	ldrb	r2, [r7, #5]
 8024ca2:	3207      	adds	r2, #7
 8024ca4:	b2d2      	uxtb	r2, r2
 8024ca6:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x68;
 8024ca8:	68fb      	ldr	r3, [r7, #12]
 8024caa:	1c5a      	adds	r2, r3, #1
 8024cac:	60fa      	str	r2, [r7, #12]
 8024cae:	2268      	movs	r2, #104	; 0x68
 8024cb0:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = to | 0x80;
 8024cb2:	68fb      	ldr	r3, [r7, #12]
 8024cb4:	1c5a      	adds	r2, r3, #1
 8024cb6:	60fa      	str	r2, [r7, #12]
 8024cb8:	79fa      	ldrb	r2, [r7, #7]
 8024cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8024cbe:	b2d2      	uxtb	r2, r2
 8024cc0:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = from | 0x80;
 8024cc2:	68fb      	ldr	r3, [r7, #12]
 8024cc4:	1c5a      	adds	r2, r3, #1
 8024cc6:	60fa      	str	r2, [r7, #12]
 8024cc8:	79ba      	ldrb	r2, [r7, #6]
 8024cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8024cce:	b2d2      	uxtb	r2, r2
 8024cd0:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x7C;
 8024cd2:	68fb      	ldr	r3, [r7, #12]
 8024cd4:	1c5a      	adds	r2, r3, #1
 8024cd6:	60fa      	str	r2, [r7, #12]
 8024cd8:	227c      	movs	r2, #124	; 0x7c
 8024cda:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x12;
 8024cdc:	68fb      	ldr	r3, [r7, #12]
 8024cde:	1c5a      	adds	r2, r3, #1
 8024ce0:	60fa      	str	r2, [r7, #12]
 8024ce2:	2212      	movs	r2, #18
 8024ce4:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x1F;
 8024ce6:	68fb      	ldr	r3, [r7, #12]
 8024ce8:	1c5a      	adds	r2, r3, #1
 8024cea:	60fa      	str	r2, [r7, #12]
 8024cec:	221f      	movs	r2, #31
 8024cee:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0xF1;
 8024cf0:	68fb      	ldr	r3, [r7, #12]
 8024cf2:	1c5a      	adds	r2, r3, #1
 8024cf4:	60fa      	str	r2, [r7, #12]
 8024cf6:	22f1      	movs	r2, #241	; 0xf1
 8024cf8:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = hprot.req_num;
 8024cfa:	68fb      	ldr	r3, [r7, #12]
 8024cfc:	1c5a      	adds	r2, r3, #1
 8024cfe:	60fa      	str	r2, [r7, #12]
 8024d00:	4a17      	ldr	r2, [pc, #92]	; (8024d60 <SendRequestMsg+0x11c>)
 8024d02:	7c52      	ldrb	r2, [r2, #17]
 8024d04:	701a      	strb	r2, [r3, #0]
	memcpy(tmp_ptr, data, data_len);
 8024d06:	797b      	ldrb	r3, [r7, #5]
 8024d08:	461a      	mov	r2, r3
 8024d0a:	6839      	ldr	r1, [r7, #0]
 8024d0c:	68f8      	ldr	r0, [r7, #12]
 8024d0e:	f001 fdba 	bl	8026886 <memcpy>
	tmp_ptr += data_len;
 8024d12:	797b      	ldrb	r3, [r7, #5]
 8024d14:	68fa      	ldr	r2, [r7, #12]
 8024d16:	4413      	add	r3, r2
 8024d18:	60fb      	str	r3, [r7, #12]
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 7);
 8024d1a:	68fc      	ldr	r4, [r7, #12]
 8024d1c:	1c63      	adds	r3, r4, #1
 8024d1e:	60fb      	str	r3, [r7, #12]
 8024d20:	693b      	ldr	r3, [r7, #16]
 8024d22:	1d1a      	adds	r2, r3, #4
 8024d24:	797b      	ldrb	r3, [r7, #5]
 8024d26:	3307      	adds	r3, #7
 8024d28:	b2db      	uxtb	r3, r3
 8024d2a:	4619      	mov	r1, r3
 8024d2c:	4610      	mov	r0, r2
 8024d2e:	f000 f9b7 	bl	80250a0 <CalculateFCS>
 8024d32:	4603      	mov	r3, r0
 8024d34:	7023      	strb	r3, [r4, #0]
	*tmp_ptr = 0x16;
 8024d36:	68fb      	ldr	r3, [r7, #12]
 8024d38:	2216      	movs	r2, #22
 8024d3a:	701a      	strb	r2, [r3, #0]
	TRANS_ON();
 8024d3c:	2201      	movs	r2, #1
 8024d3e:	2101      	movs	r1, #1
 8024d40:	4808      	ldr	r0, [pc, #32]	; (8024d64 <SendRequestMsg+0x120>)
 8024d42:	f7ed fdcb 	bl	80128dc <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 8024d46:	7dfb      	ldrb	r3, [r7, #23]
 8024d48:	b29b      	uxth	r3, r3
 8024d4a:	461a      	mov	r2, r3
 8024d4c:	6939      	ldr	r1, [r7, #16]
 8024d4e:	4806      	ldr	r0, [pc, #24]	; (8024d68 <SendRequestMsg+0x124>)
 8024d50:	f7ee ff16 	bl	8013b80 <HAL_UART_Transmit_DMA>
}
 8024d54:	bf00      	nop
 8024d56:	371c      	adds	r7, #28
 8024d58:	46bd      	mov	sp, r7
 8024d5a:	bd90      	pop	{r4, r7, pc}
 8024d5c:	080291b8 	.word	0x080291b8
 8024d60:	20011e58 	.word	0x20011e58
 8024d64:	40021000 	.word	0x40021000
 8024d68:	20011f88 	.word	0x20011f88

08024d6c <SendConnectMsg>:

void SendConnectMsg(uint8_t to, uint8_t from) {
 8024d6c:	b590      	push	{r4, r7, lr}
 8024d6e:	b089      	sub	sp, #36	; 0x24
 8024d70:	af00      	add	r7, sp, #0
 8024d72:	4603      	mov	r3, r0
 8024d74:	460a      	mov	r2, r1
 8024d76:	71fb      	strb	r3, [r7, #7]
 8024d78:	4613      	mov	r3, r2
 8024d7a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = { 0x80, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00 };
 8024d7c:	4a48      	ldr	r2, [pc, #288]	; (8024ea0 <SendConnectMsg+0x134>)
 8024d7e:	f107 0308 	add.w	r3, r7, #8
 8024d82:	ca07      	ldmia	r2, {r0, r1, r2}
 8024d84:	c303      	stmia	r3!, {r0, r1}
 8024d86:	701a      	strb	r2, [r3, #0]
	uint8_t data_len = sizeof(data);
 8024d88:	2309      	movs	r3, #9
 8024d8a:	77fb      	strb	r3, [r7, #31]
	uint8_t *msg_ptr;
	uint8_t *tmp_ptr;
	uint8_t msg_len = data_len + 14;
 8024d8c:	7ffb      	ldrb	r3, [r7, #31]
 8024d8e:	330e      	adds	r3, #14
 8024d90:	77bb      	strb	r3, [r7, #30]
	msg_ptr = (uint8_t*) pvPortMalloc(msg_len);
 8024d92:	7fbb      	ldrb	r3, [r7, #30]
 8024d94:	4618      	mov	r0, r3
 8024d96:	f7f0 fa1b 	bl	80151d0 <pvPortMalloc>
 8024d9a:	61b8      	str	r0, [r7, #24]
	if (msg_ptr == NULL) {
 8024d9c:	69bb      	ldr	r3, [r7, #24]
 8024d9e:	2b00      	cmp	r3, #0
 8024da0:	d106      	bne.n	8024db0 <SendConnectMsg+0x44>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 8024da2:	4a40      	ldr	r2, [pc, #256]	; (8024ea4 <SendConnectMsg+0x138>)
 8024da4:	2101      	movs	r1, #1
 8024da6:	2000      	movs	r0, #0
 8024da8:	f7ff fb60 	bl	802446c <LogText__>
				"Request buffer allocation error.");
		Error_Handler();
 8024dac:	f7ff fdbc 	bl	8024928 <Error_Handler>
	}
	tmp_ptr = msg_ptr;
 8024db0:	69bb      	ldr	r3, [r7, #24]
 8024db2:	617b      	str	r3, [r7, #20]
	*tmp_ptr++ = 0x68;
 8024db4:	697b      	ldr	r3, [r7, #20]
 8024db6:	1c5a      	adds	r2, r3, #1
 8024db8:	617a      	str	r2, [r7, #20]
 8024dba:	2268      	movs	r2, #104	; 0x68
 8024dbc:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = data_len + 8;
 8024dbe:	697b      	ldr	r3, [r7, #20]
 8024dc0:	1c5a      	adds	r2, r3, #1
 8024dc2:	617a      	str	r2, [r7, #20]
 8024dc4:	7ffa      	ldrb	r2, [r7, #31]
 8024dc6:	3208      	adds	r2, #8
 8024dc8:	b2d2      	uxtb	r2, r2
 8024dca:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = data_len + 8;
 8024dcc:	697b      	ldr	r3, [r7, #20]
 8024dce:	1c5a      	adds	r2, r3, #1
 8024dd0:	617a      	str	r2, [r7, #20]
 8024dd2:	7ffa      	ldrb	r2, [r7, #31]
 8024dd4:	3208      	adds	r2, #8
 8024dd6:	b2d2      	uxtb	r2, r2
 8024dd8:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x68;
 8024dda:	697b      	ldr	r3, [r7, #20]
 8024ddc:	1c5a      	adds	r2, r3, #1
 8024dde:	617a      	str	r2, [r7, #20]
 8024de0:	2268      	movs	r2, #104	; 0x68
 8024de2:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = to | 0x80;
 8024de4:	697b      	ldr	r3, [r7, #20]
 8024de6:	1c5a      	adds	r2, r3, #1
 8024de8:	617a      	str	r2, [r7, #20]
 8024dea:	79fa      	ldrb	r2, [r7, #7]
 8024dec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8024df0:	b2d2      	uxtb	r2, r2
 8024df2:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = from | 0x80;
 8024df4:	697b      	ldr	r3, [r7, #20]
 8024df6:	1c5a      	adds	r2, r3, #1
 8024df8:	617a      	str	r2, [r7, #20]
 8024dfa:	79ba      	ldrb	r2, [r7, #6]
 8024dfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8024e00:	b2d2      	uxtb	r2, r2
 8024e02:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x6D;
 8024e04:	697b      	ldr	r3, [r7, #20]
 8024e06:	1c5a      	adds	r2, r3, #1
 8024e08:	617a      	str	r2, [r7, #20]
 8024e0a:	226d      	movs	r2, #109	; 0x6d
 8024e0c:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x00;
 8024e0e:	697b      	ldr	r3, [r7, #20]
 8024e10:	1c5a      	adds	r2, r3, #1
 8024e12:	617a      	str	r2, [r7, #20]
 8024e14:	2200      	movs	r2, #0
 8024e16:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x1F;
 8024e18:	697b      	ldr	r3, [r7, #20]
 8024e1a:	1c5a      	adds	r2, r3, #1
 8024e1c:	617a      	str	r2, [r7, #20]
 8024e1e:	221f      	movs	r2, #31
 8024e20:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0xE0;
 8024e22:	697b      	ldr	r3, [r7, #20]
 8024e24:	1c5a      	adds	r2, r3, #1
 8024e26:	617a      	str	r2, [r7, #20]
 8024e28:	22e0      	movs	r2, #224	; 0xe0
 8024e2a:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = 0x04;
 8024e2c:	697b      	ldr	r3, [r7, #20]
 8024e2e:	1c5a      	adds	r2, r3, #1
 8024e30:	617a      	str	r2, [r7, #20]
 8024e32:	2204      	movs	r2, #4
 8024e34:	701a      	strb	r2, [r3, #0]
	*tmp_ptr++ = hprot.req_num;
 8024e36:	697b      	ldr	r3, [r7, #20]
 8024e38:	1c5a      	adds	r2, r3, #1
 8024e3a:	617a      	str	r2, [r7, #20]
 8024e3c:	4a1a      	ldr	r2, [pc, #104]	; (8024ea8 <SendConnectMsg+0x13c>)
 8024e3e:	7c52      	ldrb	r2, [r2, #17]
 8024e40:	701a      	strb	r2, [r3, #0]
	memcpy(tmp_ptr, data, data_len);
 8024e42:	7ffa      	ldrb	r2, [r7, #31]
 8024e44:	f107 0308 	add.w	r3, r7, #8
 8024e48:	4619      	mov	r1, r3
 8024e4a:	6978      	ldr	r0, [r7, #20]
 8024e4c:	f001 fd1b 	bl	8026886 <memcpy>
	tmp_ptr += data_len;
 8024e50:	7ffb      	ldrb	r3, [r7, #31]
 8024e52:	697a      	ldr	r2, [r7, #20]
 8024e54:	4413      	add	r3, r2
 8024e56:	617b      	str	r3, [r7, #20]
	*tmp_ptr++ = CalculateFCS(msg_ptr + 4, data_len + 8);
 8024e58:	697c      	ldr	r4, [r7, #20]
 8024e5a:	1c63      	adds	r3, r4, #1
 8024e5c:	617b      	str	r3, [r7, #20]
 8024e5e:	69bb      	ldr	r3, [r7, #24]
 8024e60:	1d1a      	adds	r2, r3, #4
 8024e62:	7ffb      	ldrb	r3, [r7, #31]
 8024e64:	3308      	adds	r3, #8
 8024e66:	b2db      	uxtb	r3, r3
 8024e68:	4619      	mov	r1, r3
 8024e6a:	4610      	mov	r0, r2
 8024e6c:	f000 f918 	bl	80250a0 <CalculateFCS>
 8024e70:	4603      	mov	r3, r0
 8024e72:	7023      	strb	r3, [r4, #0]
	*tmp_ptr = 0x16;
 8024e74:	697b      	ldr	r3, [r7, #20]
 8024e76:	2216      	movs	r2, #22
 8024e78:	701a      	strb	r2, [r3, #0]
	hprot.conn_stat = CONN_REQ_SENT;
 8024e7a:	4b0b      	ldr	r3, [pc, #44]	; (8024ea8 <SendConnectMsg+0x13c>)
 8024e7c:	2201      	movs	r2, #1
 8024e7e:	70da      	strb	r2, [r3, #3]
	TRANS_ON();
 8024e80:	2201      	movs	r2, #1
 8024e82:	2101      	movs	r1, #1
 8024e84:	4809      	ldr	r0, [pc, #36]	; (8024eac <SendConnectMsg+0x140>)
 8024e86:	f7ed fd29 	bl	80128dc <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart5, msg_ptr, msg_len);
 8024e8a:	7fbb      	ldrb	r3, [r7, #30]
 8024e8c:	b29b      	uxth	r3, r3
 8024e8e:	461a      	mov	r2, r3
 8024e90:	69b9      	ldr	r1, [r7, #24]
 8024e92:	4807      	ldr	r0, [pc, #28]	; (8024eb0 <SendConnectMsg+0x144>)
 8024e94:	f7ee fe74 	bl	8013b80 <HAL_UART_Transmit_DMA>
}
 8024e98:	bf00      	nop
 8024e9a:	3724      	adds	r7, #36	; 0x24
 8024e9c:	46bd      	mov	sp, r7
 8024e9e:	bd90      	pop	{r4, r7, pc}
 8024ea0:	080291dc 	.word	0x080291dc
 8024ea4:	080291b8 	.word	0x080291b8
 8024ea8:	20011e58 	.word	0x20011e58
 8024eac:	40021000 	.word	0x40021000
 8024eb0:	20011f88 	.word	0x20011f88

08024eb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8024eb4:	b580      	push	{r7, lr}
 8024eb6:	b082      	sub	sp, #8
 8024eb8:	af00      	add	r7, sp, #0
 8024eba:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8024ebc:	687b      	ldr	r3, [r7, #4]
 8024ebe:	4a0c      	ldr	r2, [pc, #48]	; (8024ef0 <HAL_UART_RxCpltCallback+0x3c>)
 8024ec0:	4293      	cmp	r3, r2
 8024ec2:	d111      	bne.n	8024ee8 <HAL_UART_RxCpltCallback+0x34>
		HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 8024ec4:	2201      	movs	r2, #1
 8024ec6:	490b      	ldr	r1, [pc, #44]	; (8024ef4 <HAL_UART_RxCpltCallback+0x40>)
 8024ec8:	4809      	ldr	r0, [pc, #36]	; (8024ef0 <HAL_UART_RxCpltCallback+0x3c>)
 8024eca:	f7ee fe0c 	bl	8013ae6 <HAL_UART_Receive_IT>
		CB_Write(&inbuf_UART, received_byte);
 8024ece:	4b09      	ldr	r3, [pc, #36]	; (8024ef4 <HAL_UART_RxCpltCallback+0x40>)
 8024ed0:	781b      	ldrb	r3, [r3, #0]
 8024ed2:	4619      	mov	r1, r3
 8024ed4:	4808      	ldr	r0, [pc, #32]	; (8024ef8 <HAL_UART_RxCpltCallback+0x44>)
 8024ed6:	f7fe f8b2 	bl	802303e <CB_Write>
		__HAL_TIM_SET_COUNTER(&htim8, 0x00U);
 8024eda:	4b08      	ldr	r3, [pc, #32]	; (8024efc <HAL_UART_RxCpltCallback+0x48>)
 8024edc:	681b      	ldr	r3, [r3, #0]
 8024ede:	2200      	movs	r2, #0
 8024ee0:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim8);
 8024ee2:	4806      	ldr	r0, [pc, #24]	; (8024efc <HAL_UART_RxCpltCallback+0x48>)
 8024ee4:	f7ee f991 	bl	801320a <HAL_TIM_Base_Start_IT>
	}
}
 8024ee8:	bf00      	nop
 8024eea:	3708      	adds	r7, #8
 8024eec:	46bd      	mov	sp, r7
 8024eee:	bd80      	pop	{r7, pc}
 8024ef0:	20011f88 	.word	0x20011f88
 8024ef4:	20011e44 	.word	0x20011e44
 8024ef8:	20011e48 	.word	0x20011e48
 8024efc:	20011eb0 	.word	0x20011eb0

08024f00 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8024f00:	b580      	push	{r7, lr}
 8024f02:	b082      	sub	sp, #8
 8024f04:	af00      	add	r7, sp, #0
 8024f06:	6078      	str	r0, [r7, #4]
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8024f08:	4b23      	ldr	r3, [pc, #140]	; (8024f98 <HAL_UART_TxCpltCallback+0x98>)
 8024f0a:	2200      	movs	r2, #0
 8024f0c:	601a      	str	r2, [r3, #0]
	if (huart == &huart5) {
 8024f0e:	687b      	ldr	r3, [r7, #4]
 8024f10:	4a22      	ldr	r2, [pc, #136]	; (8024f9c <HAL_UART_TxCpltCallback+0x9c>)
 8024f12:	4293      	cmp	r3, r2
 8024f14:	d11c      	bne.n	8024f50 <HAL_UART_TxCpltCallback+0x50>
		TRANS_OFF();
 8024f16:	2200      	movs	r2, #0
 8024f18:	2101      	movs	r1, #1
 8024f1a:	4821      	ldr	r0, [pc, #132]	; (8024fa0 <HAL_UART_TxCpltCallback+0xa0>)
 8024f1c:	f7ed fcde 	bl	80128dc <HAL_GPIO_WritePin>
		xQueueSendFromISR(cleaner_queue, &(huart5.pTxBuffPtr),
 8024f20:	4b20      	ldr	r3, [pc, #128]	; (8024fa4 <HAL_UART_TxCpltCallback+0xa4>)
 8024f22:	6818      	ldr	r0, [r3, #0]
 8024f24:	2300      	movs	r3, #0
 8024f26:	4a1c      	ldr	r2, [pc, #112]	; (8024f98 <HAL_UART_TxCpltCallback+0x98>)
 8024f28:	491f      	ldr	r1, [pc, #124]	; (8024fa8 <HAL_UART_TxCpltCallback+0xa8>)
 8024f2a:	f7f0 fda9 	bl	8015a80 <xQueueGenericSendFromISR>
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
 8024f2e:	4b1a      	ldr	r3, [pc, #104]	; (8024f98 <HAL_UART_TxCpltCallback+0x98>)
 8024f30:	681b      	ldr	r3, [r3, #0]
 8024f32:	2b01      	cmp	r3, #1
 8024f34:	d12b      	bne.n	8024f8e <HAL_UART_TxCpltCallback+0x8e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8024f36:	4b18      	ldr	r3, [pc, #96]	; (8024f98 <HAL_UART_TxCpltCallback+0x98>)
 8024f38:	681b      	ldr	r3, [r3, #0]
 8024f3a:	2b00      	cmp	r3, #0
 8024f3c:	d027      	beq.n	8024f8e <HAL_UART_TxCpltCallback+0x8e>
 8024f3e:	4b1b      	ldr	r3, [pc, #108]	; (8024fac <HAL_UART_TxCpltCallback+0xac>)
 8024f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8024f44:	601a      	str	r2, [r3, #0]
 8024f46:	f3bf 8f4f 	dsb	sy
 8024f4a:	f3bf 8f6f 	isb	sy
				&xHigherPriorityTaskWoken);
		if (xHigherPriorityTaskWoken == pdTRUE) {
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
		}
	}
}
 8024f4e:	e01e      	b.n	8024f8e <HAL_UART_TxCpltCallback+0x8e>
	} else if (huart == hlog.interface) {
 8024f50:	4b17      	ldr	r3, [pc, #92]	; (8024fb0 <HAL_UART_TxCpltCallback+0xb0>)
 8024f52:	681a      	ldr	r2, [r3, #0]
 8024f54:	687b      	ldr	r3, [r7, #4]
 8024f56:	429a      	cmp	r2, r3
 8024f58:	d119      	bne.n	8024f8e <HAL_UART_TxCpltCallback+0x8e>
		xQueueSendFromISR(cleaner_queue, &(hlog.interface->pTxBuffPtr),
 8024f5a:	4b12      	ldr	r3, [pc, #72]	; (8024fa4 <HAL_UART_TxCpltCallback+0xa4>)
 8024f5c:	6818      	ldr	r0, [r3, #0]
 8024f5e:	4b14      	ldr	r3, [pc, #80]	; (8024fb0 <HAL_UART_TxCpltCallback+0xb0>)
 8024f60:	681b      	ldr	r3, [r3, #0]
 8024f62:	f103 0120 	add.w	r1, r3, #32
 8024f66:	2300      	movs	r3, #0
 8024f68:	4a0b      	ldr	r2, [pc, #44]	; (8024f98 <HAL_UART_TxCpltCallback+0x98>)
 8024f6a:	f7f0 fd89 	bl	8015a80 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken == pdTRUE) {
 8024f6e:	4b0a      	ldr	r3, [pc, #40]	; (8024f98 <HAL_UART_TxCpltCallback+0x98>)
 8024f70:	681b      	ldr	r3, [r3, #0]
 8024f72:	2b01      	cmp	r3, #1
 8024f74:	d10b      	bne.n	8024f8e <HAL_UART_TxCpltCallback+0x8e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8024f76:	4b08      	ldr	r3, [pc, #32]	; (8024f98 <HAL_UART_TxCpltCallback+0x98>)
 8024f78:	681b      	ldr	r3, [r3, #0]
 8024f7a:	2b00      	cmp	r3, #0
 8024f7c:	d007      	beq.n	8024f8e <HAL_UART_TxCpltCallback+0x8e>
 8024f7e:	4b0b      	ldr	r3, [pc, #44]	; (8024fac <HAL_UART_TxCpltCallback+0xac>)
 8024f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8024f84:	601a      	str	r2, [r3, #0]
 8024f86:	f3bf 8f4f 	dsb	sy
 8024f8a:	f3bf 8f6f 	isb	sy
}
 8024f8e:	bf00      	nop
 8024f90:	3708      	adds	r7, #8
 8024f92:	46bd      	mov	sp, r7
 8024f94:	bd80      	pop	{r7, pc}
 8024f96:	bf00      	nop
 8024f98:	20009d9c 	.word	0x20009d9c
 8024f9c:	20011f88 	.word	0x20011f88
 8024fa0:	40021000 	.word	0x40021000
 8024fa4:	20011dec 	.word	0x20011dec
 8024fa8:	20011fa8 	.word	0x20011fa8
 8024fac:	e000ed04 	.word	0xe000ed04
 8024fb0:	20011df0 	.word	0x20011df0

08024fb4 <StartProcessTask>:

void StartProcessTask(void const * argument) {
 8024fb4:	b580      	push	{r7, lr}
 8024fb6:	b084      	sub	sp, #16
 8024fb8:	af00      	add	r7, sp, #0
 8024fba:	6078      	str	r0, [r7, #4]
	uint8_t len;
	static uint8_t cmd_data_buf[SIZE_OF_CMD_BUF];

	error_t err = NO_ERR;
 8024fbc:	2300      	movs	r3, #0
 8024fbe:	72fb      	strb	r3, [r7, #11]
	err = CB_Init(&inbuf_UART, UART_BUFF_SIZE);
 8024fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024fc4:	481c      	ldr	r0, [pc, #112]	; (8025038 <StartProcessTask+0x84>)
 8024fc6:	f7fe f800 	bl	8022fca <CB_Init>
 8024fca:	4603      	mov	r3, r0
 8024fcc:	72fb      	strb	r3, [r7, #11]
	if (err != NO_ERR) {
 8024fce:	7afb      	ldrb	r3, [r7, #11]
 8024fd0:	2b00      	cmp	r3, #0
 8024fd2:	d004      	beq.n	8024fde <StartProcessTask+0x2a>
		LogText(SUB_SYS_MEMORY, LOG_LEV_ERR,
 8024fd4:	4a19      	ldr	r2, [pc, #100]	; (802503c <StartProcessTask+0x88>)
 8024fd6:	2101      	movs	r1, #1
 8024fd8:	2000      	movs	r0, #0
 8024fda:	f7ff fa47 	bl	802446c <LogText__>
				"Circular buffer allocation error.\r\n");
	}
	HAL_UART_Receive_IT(&huart5, &received_byte, 1);
 8024fde:	2201      	movs	r2, #1
 8024fe0:	4917      	ldr	r1, [pc, #92]	; (8025040 <StartProcessTask+0x8c>)
 8024fe2:	4818      	ldr	r0, [pc, #96]	; (8025044 <StartProcessTask+0x90>)
 8024fe4:	f7ee fd7f 	bl	8013ae6 <HAL_UART_Receive_IT>
	for (;;) {
		xQueueReceive(frames_queue, &len, portMAX_DELAY);
 8024fe8:	4b17      	ldr	r3, [pc, #92]	; (8025048 <StartProcessTask+0x94>)
 8024fea:	6818      	ldr	r0, [r3, #0]
 8024fec:	f107 010a 	add.w	r1, r7, #10
 8024ff0:	2300      	movs	r3, #0
 8024ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8024ff6:	f7f0 fe61 	bl	8015cbc <xQueueGenericReceive>
		cmd_data_buf[SIZE_OF_CMD_BUF - 1] = len;
 8024ffa:	7aba      	ldrb	r2, [r7, #10]
 8024ffc:	4b13      	ldr	r3, [pc, #76]	; (802504c <StartProcessTask+0x98>)
 8024ffe:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
		uint pos = 0;
 8025002:	2300      	movs	r3, #0
 8025004:	60fb      	str	r3, [r7, #12]
		while (len) {
 8025006:	e00f      	b.n	8025028 <StartProcessTask+0x74>
			uint8_t ch;
			CB_Read(&inbuf_UART, &ch);
 8025008:	f107 0309 	add.w	r3, r7, #9
 802500c:	4619      	mov	r1, r3
 802500e:	480a      	ldr	r0, [pc, #40]	; (8025038 <StartProcessTask+0x84>)
 8025010:	f7fe f83b 	bl	802308a <CB_Read>
			--len;
 8025014:	7abb      	ldrb	r3, [r7, #10]
 8025016:	3b01      	subs	r3, #1
 8025018:	b2db      	uxtb	r3, r3
 802501a:	72bb      	strb	r3, [r7, #10]
			cmd_data_buf[pos++] = ch;
 802501c:	68fb      	ldr	r3, [r7, #12]
 802501e:	1c5a      	adds	r2, r3, #1
 8025020:	60fa      	str	r2, [r7, #12]
 8025022:	7a79      	ldrb	r1, [r7, #9]
 8025024:	4a09      	ldr	r2, [pc, #36]	; (802504c <StartProcessTask+0x98>)
 8025026:	54d1      	strb	r1, [r2, r3]
		while (len) {
 8025028:	7abb      	ldrb	r3, [r7, #10]
 802502a:	2b00      	cmp	r3, #0
 802502c:	d1ec      	bne.n	8025008 <StartProcessTask+0x54>
		}
		CommandParser(cmd_data_buf);
 802502e:	4807      	ldr	r0, [pc, #28]	; (802504c <StartProcessTask+0x98>)
 8025030:	f000 f930 	bl	8025294 <CommandParser>
	for (;;) {
 8025034:	e7d8      	b.n	8024fe8 <StartProcessTask+0x34>
 8025036:	bf00      	nop
 8025038:	20011e48 	.word	0x20011e48
 802503c:	080291e8 	.word	0x080291e8
 8025040:	20011e44 	.word	0x20011e44
 8025044:	20011f88 	.word	0x20011f88
 8025048:	20011ddc 	.word	0x20011ddc
 802504c:	20009da0 	.word	0x20009da0

08025050 <ProtocolSettingsInit>:

/* ---------- FUNCTIONS ------------ */
/* -------||--||--||--||--||-------- */
/* -------\/--\/--\/--\/--\/-------- */

void ProtocolSettingsInit(profibus_MPI_t* hp) {
 8025050:	b480      	push	{r7}
 8025052:	b083      	sub	sp, #12
 8025054:	af00      	add	r7, sp, #0
 8025056:	6078      	str	r0, [r7, #4]
	hp->own_address = hflash.own_addr;
 8025058:	4b10      	ldr	r3, [pc, #64]	; (802509c <ProtocolSettingsInit+0x4c>)
 802505a:	889b      	ldrh	r3, [r3, #4]
 802505c:	b2da      	uxtb	r2, r3
 802505e:	687b      	ldr	r3, [r7, #4]
 8025060:	701a      	strb	r2, [r3, #0]
	hp->speed = hflash.speed;
 8025062:	4b0e      	ldr	r3, [pc, #56]	; (802509c <ProtocolSettingsInit+0x4c>)
 8025064:	681a      	ldr	r2, [r3, #0]
 8025066:	687b      	ldr	r3, [r7, #4]
 8025068:	609a      	str	r2, [r3, #8]
	hp->token_possession = 0U;
 802506a:	687b      	ldr	r3, [r7, #4]
 802506c:	2200      	movs	r2, #0
 802506e:	705a      	strb	r2, [r3, #1]
	hp->confirm_status = CONF_OK;
 8025070:	687b      	ldr	r3, [r7, #4]
 8025072:	2203      	movs	r2, #3
 8025074:	709a      	strb	r2, [r3, #2]
	hp->conn_stat = CONN_NO;
 8025076:	687b      	ldr	r3, [r7, #4]
 8025078:	2200      	movs	r2, #0
 802507a:	70da      	strb	r2, [r3, #3]
	hp->wait_for_answer = 0U;
 802507c:	687b      	ldr	r3, [r7, #4]
 802507e:	2200      	movs	r2, #0
 8025080:	711a      	strb	r2, [r3, #4]
	hp->data_ptr = NULL;
 8025082:	687b      	ldr	r3, [r7, #4]
 8025084:	2200      	movs	r2, #0
 8025086:	60da      	str	r2, [r3, #12]
	hp->data_len = 0U;
 8025088:	687b      	ldr	r3, [r7, #4]
 802508a:	2200      	movs	r2, #0
 802508c:	741a      	strb	r2, [r3, #16]
}
 802508e:	bf00      	nop
 8025090:	370c      	adds	r7, #12
 8025092:	46bd      	mov	sp, r7
 8025094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025098:	4770      	bx	lr
 802509a:	bf00      	nop
 802509c:	2000ece4 	.word	0x2000ece4

080250a0 <CalculateFCS>:

uint8_t CalculateFCS(uint8_t * buf, uint8_t len) {
 80250a0:	b480      	push	{r7}
 80250a2:	b085      	sub	sp, #20
 80250a4:	af00      	add	r7, sp, #0
 80250a6:	6078      	str	r0, [r7, #4]
 80250a8:	460b      	mov	r3, r1
 80250aa:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 80250ac:	2300      	movs	r3, #0
 80250ae:	73fb      	strb	r3, [r7, #15]
	while (len--) {
 80250b0:	e006      	b.n	80250c0 <CalculateFCS+0x20>
		result += *buf++;
 80250b2:	687b      	ldr	r3, [r7, #4]
 80250b4:	1c5a      	adds	r2, r3, #1
 80250b6:	607a      	str	r2, [r7, #4]
 80250b8:	781a      	ldrb	r2, [r3, #0]
 80250ba:	7bfb      	ldrb	r3, [r7, #15]
 80250bc:	4413      	add	r3, r2
 80250be:	73fb      	strb	r3, [r7, #15]
	while (len--) {
 80250c0:	78fb      	ldrb	r3, [r7, #3]
 80250c2:	1e5a      	subs	r2, r3, #1
 80250c4:	70fa      	strb	r2, [r7, #3]
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	d1f3      	bne.n	80250b2 <CalculateFCS+0x12>
	}
	return result;
 80250ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80250cc:	4618      	mov	r0, r3
 80250ce:	3714      	adds	r7, #20
 80250d0:	46bd      	mov	sp, r7
 80250d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250d6:	4770      	bx	lr

080250d8 <TokenCmdProcessing>:

static inline error_t TokenCmdProcessing(telegram_t * tel) {
 80250d8:	b580      	push	{r7, lr}
 80250da:	b084      	sub	sp, #16
 80250dc:	af00      	add	r7, sp, #0
 80250de:	6078      	str	r0, [r7, #4]
	parcel_t parc;
	if (hprot.confirm_status == CONF_NEED07) {
 80250e0:	4b37      	ldr	r3, [pc, #220]	; (80251c0 <TokenCmdProcessing+0xe8>)
 80250e2:	789b      	ldrb	r3, [r3, #2]
 80250e4:	b2db      	uxtb	r3, r3
 80250e6:	2b00      	cmp	r3, #0
 80250e8:	d108      	bne.n	80250fc <TokenCmdProcessing+0x24>
		SendConfirmMsg(tel->SA, hprot.own_address, 0x07, 0x5C);
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	7918      	ldrb	r0, [r3, #4]
 80250ee:	4b34      	ldr	r3, [pc, #208]	; (80251c0 <TokenCmdProcessing+0xe8>)
 80250f0:	7819      	ldrb	r1, [r3, #0]
 80250f2:	235c      	movs	r3, #92	; 0x5c
 80250f4:	2207      	movs	r2, #7
 80250f6:	f7ff fc6b 	bl	80249d0 <SendConfirmMsg>
 80250fa:	e05b      	b.n	80251b4 <TokenCmdProcessing+0xdc>
	} else if (hprot.confirm_status == CONF_NEED08){
 80250fc:	4b30      	ldr	r3, [pc, #192]	; (80251c0 <TokenCmdProcessing+0xe8>)
 80250fe:	789b      	ldrb	r3, [r3, #2]
 8025100:	b2db      	uxtb	r3, r3
 8025102:	2b01      	cmp	r3, #1
 8025104:	d108      	bne.n	8025118 <TokenCmdProcessing+0x40>
		SendConfirmMsg(tel->SA, hprot.own_address, 0x08, 0x5C);
 8025106:	687b      	ldr	r3, [r7, #4]
 8025108:	7918      	ldrb	r0, [r3, #4]
 802510a:	4b2d      	ldr	r3, [pc, #180]	; (80251c0 <TokenCmdProcessing+0xe8>)
 802510c:	7819      	ldrb	r1, [r3, #0]
 802510e:	235c      	movs	r3, #92	; 0x5c
 8025110:	2208      	movs	r2, #8
 8025112:	f7ff fc5d 	bl	80249d0 <SendConfirmMsg>
 8025116:	e04d      	b.n	80251b4 <TokenCmdProcessing+0xdc>
	} else {
		if (xQueuePeek(tcp_client_queue,&parc,0) != pdPASS) {
 8025118:	4b2a      	ldr	r3, [pc, #168]	; (80251c4 <TokenCmdProcessing+0xec>)
 802511a:	6818      	ldr	r0, [r3, #0]
 802511c:	f107 0108 	add.w	r1, r7, #8
 8025120:	2301      	movs	r3, #1
 8025122:	2200      	movs	r2, #0
 8025124:	f7f0 fdca 	bl	8015cbc <xQueueGenericReceive>
 8025128:	4603      	mov	r3, r0
 802512a:	2b01      	cmp	r3, #1
 802512c:	d00b      	beq.n	8025146 <TokenCmdProcessing+0x6e>
			SendTokenMsg(tel->SA, hprot.own_address);
 802512e:	687b      	ldr	r3, [r7, #4]
 8025130:	791a      	ldrb	r2, [r3, #4]
 8025132:	4b23      	ldr	r3, [pc, #140]	; (80251c0 <TokenCmdProcessing+0xe8>)
 8025134:	781b      	ldrb	r3, [r3, #0]
 8025136:	4619      	mov	r1, r3
 8025138:	4610      	mov	r0, r2
 802513a:	f7ff fcf5 	bl	8024b28 <SendTokenMsg>
			hprot.token_possession = 0U;
 802513e:	4b20      	ldr	r3, [pc, #128]	; (80251c0 <TokenCmdProcessing+0xe8>)
 8025140:	2200      	movs	r2, #0
 8025142:	705a      	strb	r2, [r3, #1]
 8025144:	e036      	b.n	80251b4 <TokenCmdProcessing+0xdc>
		} else {
			hprot.token_possession = 1U;
 8025146:	4b1e      	ldr	r3, [pc, #120]	; (80251c0 <TokenCmdProcessing+0xe8>)
 8025148:	2201      	movs	r2, #1
 802514a:	705a      	strb	r2, [r3, #1]
			if (hprot.conn_stat == CONN_OK) {
 802514c:	4b1c      	ldr	r3, [pc, #112]	; (80251c0 <TokenCmdProcessing+0xe8>)
 802514e:	78db      	ldrb	r3, [r3, #3]
 8025150:	b2db      	uxtb	r3, r3
 8025152:	2b02      	cmp	r3, #2
 8025154:	d115      	bne.n	8025182 <TokenCmdProcessing+0xaa>
				xQueueReceive(tcp_client_queue, &parc, 0);
 8025156:	4b1b      	ldr	r3, [pc, #108]	; (80251c4 <TokenCmdProcessing+0xec>)
 8025158:	6818      	ldr	r0, [r3, #0]
 802515a:	f107 0108 	add.w	r1, r7, #8
 802515e:	2300      	movs	r3, #0
 8025160:	2200      	movs	r2, #0
 8025162:	f7f0 fdab 	bl	8015cbc <xQueueGenericReceive>
				SendRequestMsg(tel->SA, hprot.own_address, parc.data, parc.len);
 8025166:	687b      	ldr	r3, [r7, #4]
 8025168:	7918      	ldrb	r0, [r3, #4]
 802516a:	4b15      	ldr	r3, [pc, #84]	; (80251c0 <TokenCmdProcessing+0xe8>)
 802516c:	7819      	ldrb	r1, [r3, #0]
 802516e:	68ba      	ldr	r2, [r7, #8]
 8025170:	89bb      	ldrh	r3, [r7, #12]
 8025172:	b2db      	uxtb	r3, r3
 8025174:	f7ff fd66 	bl	8024c44 <SendRequestMsg>
				vPortFree(parc.data);
 8025178:	68bb      	ldr	r3, [r7, #8]
 802517a:	4618      	mov	r0, r3
 802517c:	f7f0 f8ea 	bl	8015354 <vPortFree>
 8025180:	e018      	b.n	80251b4 <TokenCmdProcessing+0xdc>
			} else if (hprot.conn_stat == CONN_NO) {
 8025182:	4b0f      	ldr	r3, [pc, #60]	; (80251c0 <TokenCmdProcessing+0xe8>)
 8025184:	78db      	ldrb	r3, [r3, #3]
 8025186:	b2db      	uxtb	r3, r3
 8025188:	2b00      	cmp	r3, #0
 802518a:	d108      	bne.n	802519e <TokenCmdProcessing+0xc6>
				SendConnectMsg(tel->SA, hprot.own_address);
 802518c:	687b      	ldr	r3, [r7, #4]
 802518e:	791a      	ldrb	r2, [r3, #4]
 8025190:	4b0b      	ldr	r3, [pc, #44]	; (80251c0 <TokenCmdProcessing+0xe8>)
 8025192:	781b      	ldrb	r3, [r3, #0]
 8025194:	4619      	mov	r1, r3
 8025196:	4610      	mov	r0, r2
 8025198:	f7ff fde8 	bl	8024d6c <SendConnectMsg>
 802519c:	e00a      	b.n	80251b4 <TokenCmdProcessing+0xdc>
			} else {
				SendTokenMsg(tel->SA, hprot.own_address);
 802519e:	687b      	ldr	r3, [r7, #4]
 80251a0:	791a      	ldrb	r2, [r3, #4]
 80251a2:	4b07      	ldr	r3, [pc, #28]	; (80251c0 <TokenCmdProcessing+0xe8>)
 80251a4:	781b      	ldrb	r3, [r3, #0]
 80251a6:	4619      	mov	r1, r3
 80251a8:	4610      	mov	r0, r2
 80251aa:	f7ff fcbd 	bl	8024b28 <SendTokenMsg>
				hprot.token_possession = 0U;
 80251ae:	4b04      	ldr	r3, [pc, #16]	; (80251c0 <TokenCmdProcessing+0xe8>)
 80251b0:	2200      	movs	r2, #0
 80251b2:	705a      	strb	r2, [r3, #1]
			}
		}
	}
	return NO_ERR;
 80251b4:	2300      	movs	r3, #0
}
 80251b6:	4618      	mov	r0, r3
 80251b8:	3710      	adds	r7, #16
 80251ba:	46bd      	mov	sp, r7
 80251bc:	bd80      	pop	{r7, pc}
 80251be:	bf00      	nop
 80251c0:	20011e58 	.word	0x20011e58
 80251c4:	20011eac 	.word	0x20011eac

080251c8 <NoDataCmdProcessing>:

static inline error_t NoDataCmdProcessing(telegram_t * tel) {
 80251c8:	b580      	push	{r7, lr}
 80251ca:	b082      	sub	sp, #8
 80251cc:	af00      	add	r7, sp, #0
 80251ce:	6078      	str	r0, [r7, #4]
	if (tel->FC == 0x49) {
 80251d0:	687b      	ldr	r3, [r7, #4]
 80251d2:	795b      	ldrb	r3, [r3, #5]
 80251d4:	2b49      	cmp	r3, #73	; 0x49
 80251d6:	d107      	bne.n	80251e8 <NoDataCmdProcessing+0x20>
		SendNoDataMsg(tel->SA, tel->DA, 0x20);
 80251d8:	687b      	ldr	r3, [r7, #4]
 80251da:	7918      	ldrb	r0, [r3, #4]
 80251dc:	687b      	ldr	r3, [r7, #4]
 80251de:	78db      	ldrb	r3, [r3, #3]
 80251e0:	2220      	movs	r2, #32
 80251e2:	4619      	mov	r1, r3
 80251e4:	f7ff fcec 	bl	8024bc0 <SendNoDataMsg>
	}
	return NO_ERR;
 80251e8:	2300      	movs	r3, #0
}
 80251ea:	4618      	mov	r0, r3
 80251ec:	3708      	adds	r7, #8
 80251ee:	46bd      	mov	sp, r7
 80251f0:	bd80      	pop	{r7, pc}
	...

080251f4 <VarDataCmdProcessing>:

static inline error_t VarDataCmdProcessing(telegram_t * tel) {
 80251f4:	b580      	push	{r7, lr}
 80251f6:	b084      	sub	sp, #16
 80251f8:	af00      	add	r7, sp, #0
 80251fa:	6078      	str	r0, [r7, #4]

	if (tel->UK1 == 0xD0) {
 80251fc:	687b      	ldr	r3, [r7, #4]
 80251fe:	7a1b      	ldrb	r3, [r3, #8]
 8025200:	2bd0      	cmp	r3, #208	; 0xd0
 8025202:	d103      	bne.n	802520c <VarDataCmdProcessing+0x18>
		hprot.confirm_status = CONF_NEED07;
 8025204:	4b21      	ldr	r3, [pc, #132]	; (802528c <VarDataCmdProcessing+0x98>)
 8025206:	2200      	movs	r2, #0
 8025208:	709a      	strb	r2, [r3, #2]
 802520a:	e02c      	b.n	8025266 <VarDataCmdProcessing+0x72>

	} else if (tel->UK1 == 0x05) {
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	7a1b      	ldrb	r3, [r3, #8]
 8025210:	2b05      	cmp	r3, #5
 8025212:	d106      	bne.n	8025222 <VarDataCmdProcessing+0x2e>
		hprot.confirm_status = CONF_OK;
 8025214:	4b1d      	ldr	r3, [pc, #116]	; (802528c <VarDataCmdProcessing+0x98>)
 8025216:	2203      	movs	r2, #3
 8025218:	709a      	strb	r2, [r3, #2]
		hprot.conn_stat = CONN_OK;
 802521a:	4b1c      	ldr	r3, [pc, #112]	; (802528c <VarDataCmdProcessing+0x98>)
 802521c:	2202      	movs	r2, #2
 802521e:	70da      	strb	r2, [r3, #3]
 8025220:	e021      	b.n	8025266 <VarDataCmdProcessing+0x72>

	} else if (tel->FC == 0x5C) {
 8025222:	687b      	ldr	r3, [r7, #4]
 8025224:	795b      	ldrb	r3, [r3, #5]
 8025226:	2b5c      	cmp	r3, #92	; 0x5c
 8025228:	d11d      	bne.n	8025266 <VarDataCmdProcessing+0x72>
		parcel_t parc;
		parc.len = tel->LE - 7;
 802522a:	687b      	ldr	r3, [r7, #4]
 802522c:	785b      	ldrb	r3, [r3, #1]
 802522e:	b29b      	uxth	r3, r3
 8025230:	3b07      	subs	r3, #7
 8025232:	b29b      	uxth	r3, r3
 8025234:	81bb      	strh	r3, [r7, #12]
		parc.data = pvPortMalloc(parc.len);
 8025236:	89bb      	ldrh	r3, [r7, #12]
 8025238:	4618      	mov	r0, r3
 802523a:	f7ef ffc9 	bl	80151d0 <pvPortMalloc>
 802523e:	4603      	mov	r3, r0
 8025240:	60bb      	str	r3, [r7, #8]
		memcpy(parc.data, tel->PDU, parc.len);
 8025242:	68b8      	ldr	r0, [r7, #8]
 8025244:	687b      	ldr	r3, [r7, #4]
 8025246:	68db      	ldr	r3, [r3, #12]
 8025248:	89ba      	ldrh	r2, [r7, #12]
 802524a:	4619      	mov	r1, r3
 802524c:	f001 fb1b 	bl	8026886 <memcpy>
		xQueueSend(protocol_queue, &parc, 0);
 8025250:	4b0f      	ldr	r3, [pc, #60]	; (8025290 <VarDataCmdProcessing+0x9c>)
 8025252:	6818      	ldr	r0, [r3, #0]
 8025254:	f107 0108 	add.w	r1, r7, #8
 8025258:	2300      	movs	r3, #0
 802525a:	2200      	movs	r2, #0
 802525c:	f7f0 fb16 	bl	801588c <xQueueGenericSend>
		hprot.confirm_status = CONF_NEED08;
 8025260:	4b0a      	ldr	r3, [pc, #40]	; (802528c <VarDataCmdProcessing+0x98>)
 8025262:	2201      	movs	r2, #1
 8025264:	709a      	strb	r2, [r3, #2]
	}

	SendAckMsg();
 8025266:	f7ff fb97 	bl	8024998 <SendAckMsg>
	if (tel->PDU != NULL) {
 802526a:	687b      	ldr	r3, [r7, #4]
 802526c:	68db      	ldr	r3, [r3, #12]
 802526e:	2b00      	cmp	r3, #0
 8025270:	d007      	beq.n	8025282 <VarDataCmdProcessing+0x8e>
		vPortFree(tel->PDU);
 8025272:	687b      	ldr	r3, [r7, #4]
 8025274:	68db      	ldr	r3, [r3, #12]
 8025276:	4618      	mov	r0, r3
 8025278:	f7f0 f86c 	bl	8015354 <vPortFree>
		tel->PDU = NULL;
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	2200      	movs	r2, #0
 8025280:	60da      	str	r2, [r3, #12]
	}
	return NO_ERR;
 8025282:	2300      	movs	r3, #0
}
 8025284:	4618      	mov	r0, r3
 8025286:	3710      	adds	r7, #16
 8025288:	46bd      	mov	sp, r7
 802528a:	bd80      	pop	{r7, pc}
 802528c:	20011e58 	.word	0x20011e58
 8025290:	20011e6c 	.word	0x20011e6c

08025294 <CommandParser>:
static inline error_t FixDataCmdProcessing(telegram_t * tel) {

	return NO_ERR;
}

error_t CommandParser(uint8_t *buf) {
 8025294:	b580      	push	{r7, lr}
 8025296:	b084      	sub	sp, #16
 8025298:	af00      	add	r7, sp, #0
 802529a:	6078      	str	r0, [r7, #4]
	static telegram_t htel;
	htel.SD = *buf++;
 802529c:	687b      	ldr	r3, [r7, #4]
 802529e:	1c5a      	adds	r2, r3, #1
 80252a0:	607a      	str	r2, [r7, #4]
 80252a2:	781a      	ldrb	r2, [r3, #0]
 80252a4:	4b8b      	ldr	r3, [pc, #556]	; (80254d4 <CommandParser+0x240>)
 80252a6:	701a      	strb	r2, [r3, #0]
	switch (htel.SD) {
 80252a8:	4b8a      	ldr	r3, [pc, #552]	; (80254d4 <CommandParser+0x240>)
 80252aa:	781b      	ldrb	r3, [r3, #0]
 80252ac:	2ba2      	cmp	r3, #162	; 0xa2
 80252ae:	f000 814e 	beq.w	802554e <CommandParser+0x2ba>
 80252b2:	2ba2      	cmp	r3, #162	; 0xa2
 80252b4:	dc04      	bgt.n	80252c0 <CommandParser+0x2c>
 80252b6:	2b10      	cmp	r3, #16
 80252b8:	d01f      	beq.n	80252fa <CommandParser+0x66>
 80252ba:	2b68      	cmp	r3, #104	; 0x68
 80252bc:	d053      	beq.n	8025366 <CommandParser+0xd2>
 80252be:	e144      	b.n	802554a <CommandParser+0x2b6>
 80252c0:	2bdc      	cmp	r3, #220	; 0xdc
 80252c2:	d003      	beq.n	80252cc <CommandParser+0x38>
 80252c4:	2be5      	cmp	r3, #229	; 0xe5
 80252c6:	f000 8133 	beq.w	8025530 <CommandParser+0x29c>
 80252ca:	e13e      	b.n	802554a <CommandParser+0x2b6>
	case 0xDC: /* Token  */
		/* Format: |SD4|DA|SA|*/
		htel.DA = *buf++;
 80252cc:	687b      	ldr	r3, [r7, #4]
 80252ce:	1c5a      	adds	r2, r3, #1
 80252d0:	607a      	str	r2, [r7, #4]
 80252d2:	781a      	ldrb	r2, [r3, #0]
 80252d4:	4b7f      	ldr	r3, [pc, #508]	; (80254d4 <CommandParser+0x240>)
 80252d6:	70da      	strb	r2, [r3, #3]
		if (htel.DA != hprot.own_address) {
 80252d8:	4b7e      	ldr	r3, [pc, #504]	; (80254d4 <CommandParser+0x240>)
 80252da:	78da      	ldrb	r2, [r3, #3]
 80252dc:	4b7e      	ldr	r3, [pc, #504]	; (80254d8 <CommandParser+0x244>)
 80252de:	781b      	ldrb	r3, [r3, #0]
 80252e0:	429a      	cmp	r2, r3
 80252e2:	d001      	beq.n	80252e8 <CommandParser+0x54>
			return NO_ERR;
 80252e4:	2300      	movs	r3, #0
 80252e6:	e134      	b.n	8025552 <CommandParser+0x2be>
		}
		htel.SA = *buf;
 80252e8:	687b      	ldr	r3, [r7, #4]
 80252ea:	781a      	ldrb	r2, [r3, #0]
 80252ec:	4b79      	ldr	r3, [pc, #484]	; (80254d4 <CommandParser+0x240>)
 80252ee:	711a      	strb	r2, [r3, #4]
		return TokenCmdProcessing(&htel);
 80252f0:	4878      	ldr	r0, [pc, #480]	; (80254d4 <CommandParser+0x240>)
 80252f2:	f7ff fef1 	bl	80250d8 <TokenCmdProcessing>
 80252f6:	4603      	mov	r3, r0
 80252f8:	e12b      	b.n	8025552 <CommandParser+0x2be>
		break;
	case 0x10: /* No data */
		/* Format: |SD1|DA|SA|FC|FCS|ED| */
		if (CalculateFCS(buf, 3) != *(buf + 3)) {
 80252fa:	2103      	movs	r1, #3
 80252fc:	6878      	ldr	r0, [r7, #4]
 80252fe:	f7ff fecf 	bl	80250a0 <CalculateFCS>
 8025302:	4603      	mov	r3, r0
 8025304:	461a      	mov	r2, r3
 8025306:	687b      	ldr	r3, [r7, #4]
 8025308:	3303      	adds	r3, #3
 802530a:	781b      	ldrb	r3, [r3, #0]
 802530c:	429a      	cmp	r2, r3
 802530e:	d001      	beq.n	8025314 <CommandParser+0x80>
			return FCS_ERR;
 8025310:	2307      	movs	r3, #7
 8025312:	e11e      	b.n	8025552 <CommandParser+0x2be>
		}
		htel.DA = *buf++;
 8025314:	687b      	ldr	r3, [r7, #4]
 8025316:	1c5a      	adds	r2, r3, #1
 8025318:	607a      	str	r2, [r7, #4]
 802531a:	781a      	ldrb	r2, [r3, #0]
 802531c:	4b6d      	ldr	r3, [pc, #436]	; (80254d4 <CommandParser+0x240>)
 802531e:	70da      	strb	r2, [r3, #3]
		if (htel.DA != hprot.own_address) {
 8025320:	4b6c      	ldr	r3, [pc, #432]	; (80254d4 <CommandParser+0x240>)
 8025322:	78da      	ldrb	r2, [r3, #3]
 8025324:	4b6c      	ldr	r3, [pc, #432]	; (80254d8 <CommandParser+0x244>)
 8025326:	781b      	ldrb	r3, [r3, #0]
 8025328:	429a      	cmp	r2, r3
 802532a:	d001      	beq.n	8025330 <CommandParser+0x9c>
			return NO_ERR;
 802532c:	2300      	movs	r3, #0
 802532e:	e110      	b.n	8025552 <CommandParser+0x2be>
		}
		htel.SA = *buf++;
 8025330:	687b      	ldr	r3, [r7, #4]
 8025332:	1c5a      	adds	r2, r3, #1
 8025334:	607a      	str	r2, [r7, #4]
 8025336:	781a      	ldrb	r2, [r3, #0]
 8025338:	4b66      	ldr	r3, [pc, #408]	; (80254d4 <CommandParser+0x240>)
 802533a:	711a      	strb	r2, [r3, #4]
		htel.FC = *buf++;
 802533c:	687b      	ldr	r3, [r7, #4]
 802533e:	1c5a      	adds	r2, r3, #1
 8025340:	607a      	str	r2, [r7, #4]
 8025342:	781a      	ldrb	r2, [r3, #0]
 8025344:	4b63      	ldr	r3, [pc, #396]	; (80254d4 <CommandParser+0x240>)
 8025346:	715a      	strb	r2, [r3, #5]
		htel.FCS = *buf++;
 8025348:	687b      	ldr	r3, [r7, #4]
 802534a:	1c5a      	adds	r2, r3, #1
 802534c:	607a      	str	r2, [r7, #4]
 802534e:	781a      	ldrb	r2, [r3, #0]
 8025350:	4b60      	ldr	r3, [pc, #384]	; (80254d4 <CommandParser+0x240>)
 8025352:	741a      	strb	r2, [r3, #16]
		htel.ED = *buf;
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	781a      	ldrb	r2, [r3, #0]
 8025358:	4b5e      	ldr	r3, [pc, #376]	; (80254d4 <CommandParser+0x240>)
 802535a:	745a      	strb	r2, [r3, #17]
		return NoDataCmdProcessing(&htel);
 802535c:	485d      	ldr	r0, [pc, #372]	; (80254d4 <CommandParser+0x240>)
 802535e:	f7ff ff33 	bl	80251c8 <NoDataCmdProcessing>
 8025362:	4603      	mov	r3, r0
 8025364:	e0f5      	b.n	8025552 <CommandParser+0x2be>
		break;
	case 0x68:
		/* Variable length data */
		/* Format by wiki: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|PDU|FCS|ED| */
		/* Real MPI frame: |SD2|LE|LEr|SD2|DA|SA|FC|DSAP|SSAP|F1/[B0|0x]|RN|PDU|FCS|ED| */
		htel.LE = *buf++;
 8025366:	687b      	ldr	r3, [r7, #4]
 8025368:	1c5a      	adds	r2, r3, #1
 802536a:	607a      	str	r2, [r7, #4]
 802536c:	781a      	ldrb	r2, [r3, #0]
 802536e:	4b59      	ldr	r3, [pc, #356]	; (80254d4 <CommandParser+0x240>)
 8025370:	705a      	strb	r2, [r3, #1]
		htel.LEr = *buf++;
 8025372:	687b      	ldr	r3, [r7, #4]
 8025374:	1c5a      	adds	r2, r3, #1
 8025376:	607a      	str	r2, [r7, #4]
 8025378:	781a      	ldrb	r2, [r3, #0]
 802537a:	4b56      	ldr	r3, [pc, #344]	; (80254d4 <CommandParser+0x240>)
 802537c:	709a      	strb	r2, [r3, #2]
		buf++;
 802537e:	687b      	ldr	r3, [r7, #4]
 8025380:	3301      	adds	r3, #1
 8025382:	607b      	str	r3, [r7, #4]
		if (htel.LE != htel.LEr) {
 8025384:	4b53      	ldr	r3, [pc, #332]	; (80254d4 <CommandParser+0x240>)
 8025386:	785a      	ldrb	r2, [r3, #1]
 8025388:	4b52      	ldr	r3, [pc, #328]	; (80254d4 <CommandParser+0x240>)
 802538a:	789b      	ldrb	r3, [r3, #2]
 802538c:	429a      	cmp	r2, r3
 802538e:	d001      	beq.n	8025394 <CommandParser+0x100>
			return FRAME_ERR;
 8025390:	2306      	movs	r3, #6
 8025392:	e0de      	b.n	8025552 <CommandParser+0x2be>
		}
		if (CalculateFCS(buf, htel.LE) != *(buf + htel.LE)) {
 8025394:	4b4f      	ldr	r3, [pc, #316]	; (80254d4 <CommandParser+0x240>)
 8025396:	785b      	ldrb	r3, [r3, #1]
 8025398:	4619      	mov	r1, r3
 802539a:	6878      	ldr	r0, [r7, #4]
 802539c:	f7ff fe80 	bl	80250a0 <CalculateFCS>
 80253a0:	4603      	mov	r3, r0
 80253a2:	461a      	mov	r2, r3
 80253a4:	4b4b      	ldr	r3, [pc, #300]	; (80254d4 <CommandParser+0x240>)
 80253a6:	785b      	ldrb	r3, [r3, #1]
 80253a8:	4619      	mov	r1, r3
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	440b      	add	r3, r1
 80253ae:	781b      	ldrb	r3, [r3, #0]
 80253b0:	429a      	cmp	r2, r3
 80253b2:	d001      	beq.n	80253b8 <CommandParser+0x124>
			return FCS_ERR;
 80253b4:	2307      	movs	r3, #7
 80253b6:	e0cc      	b.n	8025552 <CommandParser+0x2be>
		}
		htel.DA = *buf++;
 80253b8:	687b      	ldr	r3, [r7, #4]
 80253ba:	1c5a      	adds	r2, r3, #1
 80253bc:	607a      	str	r2, [r7, #4]
 80253be:	781a      	ldrb	r2, [r3, #0]
 80253c0:	4b44      	ldr	r3, [pc, #272]	; (80254d4 <CommandParser+0x240>)
 80253c2:	70da      	strb	r2, [r3, #3]
		if ((htel.DA & 0x7F) != hprot.own_address) { /* Broadcast message */
 80253c4:	4b43      	ldr	r3, [pc, #268]	; (80254d4 <CommandParser+0x240>)
 80253c6:	78db      	ldrb	r3, [r3, #3]
 80253c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80253cc:	4a42      	ldr	r2, [pc, #264]	; (80254d8 <CommandParser+0x244>)
 80253ce:	7812      	ldrb	r2, [r2, #0]
 80253d0:	4293      	cmp	r3, r2
 80253d2:	d001      	beq.n	80253d8 <CommandParser+0x144>
			return NO_ERR;
 80253d4:	2300      	movs	r3, #0
 80253d6:	e0bc      	b.n	8025552 <CommandParser+0x2be>
		}
		htel.SA = *buf++;
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	1c5a      	adds	r2, r3, #1
 80253dc:	607a      	str	r2, [r7, #4]
 80253de:	781a      	ldrb	r2, [r3, #0]
 80253e0:	4b3c      	ldr	r3, [pc, #240]	; (80254d4 <CommandParser+0x240>)
 80253e2:	711a      	strb	r2, [r3, #4]
		htel.FC = *buf++;
 80253e4:	687b      	ldr	r3, [r7, #4]
 80253e6:	1c5a      	adds	r2, r3, #1
 80253e8:	607a      	str	r2, [r7, #4]
 80253ea:	781a      	ldrb	r2, [r3, #0]
 80253ec:	4b39      	ldr	r3, [pc, #228]	; (80254d4 <CommandParser+0x240>)
 80253ee:	715a      	strb	r2, [r3, #5]
		htel.DSAP = *buf++;
 80253f0:	687b      	ldr	r3, [r7, #4]
 80253f2:	1c5a      	adds	r2, r3, #1
 80253f4:	607a      	str	r2, [r7, #4]
 80253f6:	781a      	ldrb	r2, [r3, #0]
 80253f8:	4b36      	ldr	r3, [pc, #216]	; (80254d4 <CommandParser+0x240>)
 80253fa:	719a      	strb	r2, [r3, #6]
		htel.SSAP = *buf++;
 80253fc:	687b      	ldr	r3, [r7, #4]
 80253fe:	1c5a      	adds	r2, r3, #1
 8025400:	607a      	str	r2, [r7, #4]
 8025402:	781a      	ldrb	r2, [r3, #0]
 8025404:	4b33      	ldr	r3, [pc, #204]	; (80254d4 <CommandParser+0x240>)
 8025406:	71da      	strb	r2, [r3, #7]
		htel.UK1 = *buf++;
 8025408:	687b      	ldr	r3, [r7, #4]
 802540a:	1c5a      	adds	r2, r3, #1
 802540c:	607a      	str	r2, [r7, #4]
 802540e:	781a      	ldrb	r2, [r3, #0]
 8025410:	4b30      	ldr	r3, [pc, #192]	; (80254d4 <CommandParser+0x240>)
 8025412:	721a      	strb	r2, [r3, #8]
		if (htel.UK1 == 0xB0) {
 8025414:	4b2f      	ldr	r3, [pc, #188]	; (80254d4 <CommandParser+0x240>)
 8025416:	7a1b      	ldrb	r3, [r3, #8]
 8025418:	2bb0      	cmp	r3, #176	; 0xb0
 802541a:	d116      	bne.n	802544a <CommandParser+0x1b6>
			htel.UK2 = *buf++;
 802541c:	687b      	ldr	r3, [r7, #4]
 802541e:	1c5a      	adds	r2, r3, #1
 8025420:	607a      	str	r2, [r7, #4]
 8025422:	781a      	ldrb	r2, [r3, #0]
 8025424:	4b2b      	ldr	r3, [pc, #172]	; (80254d4 <CommandParser+0x240>)
 8025426:	725a      	strb	r2, [r3, #9]
			htel.RN = *buf++;
 8025428:	687b      	ldr	r3, [r7, #4]
 802542a:	1c5a      	adds	r2, r3, #1
 802542c:	607a      	str	r2, [r7, #4]
 802542e:	781a      	ldrb	r2, [r3, #0]
 8025430:	4b28      	ldr	r3, [pc, #160]	; (80254d4 <CommandParser+0x240>)
 8025432:	729a      	strb	r2, [r3, #10]
			htel.FCS = *buf++;
 8025434:	687b      	ldr	r3, [r7, #4]
 8025436:	1c5a      	adds	r2, r3, #1
 8025438:	607a      	str	r2, [r7, #4]
 802543a:	781a      	ldrb	r2, [r3, #0]
 802543c:	4b25      	ldr	r3, [pc, #148]	; (80254d4 <CommandParser+0x240>)
 802543e:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 8025440:	687b      	ldr	r3, [r7, #4]
 8025442:	781a      	ldrb	r2, [r3, #0]
 8025444:	4b23      	ldr	r3, [pc, #140]	; (80254d4 <CommandParser+0x240>)
 8025446:	745a      	strb	r2, [r3, #17]
 8025448:	e06d      	b.n	8025526 <CommandParser+0x292>
		} else if (htel.UK1 == 0xD0) {
 802544a:	4b22      	ldr	r3, [pc, #136]	; (80254d4 <CommandParser+0x240>)
 802544c:	7a1b      	ldrb	r3, [r3, #8]
 802544e:	2bd0      	cmp	r3, #208	; 0xd0
 8025450:	d12b      	bne.n	80254aa <CommandParser+0x216>
			htel.UK2 = *buf++;
 8025452:	687b      	ldr	r3, [r7, #4]
 8025454:	1c5a      	adds	r2, r3, #1
 8025456:	607a      	str	r2, [r7, #4]
 8025458:	781a      	ldrb	r2, [r3, #0]
 802545a:	4b1e      	ldr	r3, [pc, #120]	; (80254d4 <CommandParser+0x240>)
 802545c:	725a      	strb	r2, [r3, #9]
			htel.RN = *buf++;
 802545e:	687b      	ldr	r3, [r7, #4]
 8025460:	1c5a      	adds	r2, r3, #1
 8025462:	607a      	str	r2, [r7, #4]
 8025464:	781a      	ldrb	r2, [r3, #0]
 8025466:	4b1b      	ldr	r3, [pc, #108]	; (80254d4 <CommandParser+0x240>)
 8025468:	729a      	strb	r2, [r3, #10]
			uint pdu_size = htel.LE - 8;
 802546a:	4b1a      	ldr	r3, [pc, #104]	; (80254d4 <CommandParser+0x240>)
 802546c:	785b      	ldrb	r3, [r3, #1]
 802546e:	3b08      	subs	r3, #8
 8025470:	60fb      	str	r3, [r7, #12]
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 8025472:	68f8      	ldr	r0, [r7, #12]
 8025474:	f7ef feac 	bl	80151d0 <pvPortMalloc>
 8025478:	4602      	mov	r2, r0
 802547a:	4b16      	ldr	r3, [pc, #88]	; (80254d4 <CommandParser+0x240>)
 802547c:	60da      	str	r2, [r3, #12]
			memcpy(htel.PDU, buf, pdu_size);
 802547e:	4b15      	ldr	r3, [pc, #84]	; (80254d4 <CommandParser+0x240>)
 8025480:	68db      	ldr	r3, [r3, #12]
 8025482:	68fa      	ldr	r2, [r7, #12]
 8025484:	6879      	ldr	r1, [r7, #4]
 8025486:	4618      	mov	r0, r3
 8025488:	f001 f9fd 	bl	8026886 <memcpy>
			buf += pdu_size;
 802548c:	687a      	ldr	r2, [r7, #4]
 802548e:	68fb      	ldr	r3, [r7, #12]
 8025490:	4413      	add	r3, r2
 8025492:	607b      	str	r3, [r7, #4]
			htel.FCS = *buf++;
 8025494:	687b      	ldr	r3, [r7, #4]
 8025496:	1c5a      	adds	r2, r3, #1
 8025498:	607a      	str	r2, [r7, #4]
 802549a:	781a      	ldrb	r2, [r3, #0]
 802549c:	4b0d      	ldr	r3, [pc, #52]	; (80254d4 <CommandParser+0x240>)
 802549e:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 80254a0:	687b      	ldr	r3, [r7, #4]
 80254a2:	781a      	ldrb	r2, [r3, #0]
 80254a4:	4b0b      	ldr	r3, [pc, #44]	; (80254d4 <CommandParser+0x240>)
 80254a6:	745a      	strb	r2, [r3, #17]
 80254a8:	e03d      	b.n	8025526 <CommandParser+0x292>
		} else if (htel.UK1 == 0x05) {
 80254aa:	4b0a      	ldr	r3, [pc, #40]	; (80254d4 <CommandParser+0x240>)
 80254ac:	7a1b      	ldrb	r3, [r3, #8]
 80254ae:	2b05      	cmp	r3, #5
 80254b0:	d114      	bne.n	80254dc <CommandParser+0x248>
			htel.UK2 = *buf++;
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	1c5a      	adds	r2, r3, #1
 80254b6:	607a      	str	r2, [r7, #4]
 80254b8:	781a      	ldrb	r2, [r3, #0]
 80254ba:	4b06      	ldr	r3, [pc, #24]	; (80254d4 <CommandParser+0x240>)
 80254bc:	725a      	strb	r2, [r3, #9]
			htel.FCS = *buf++;
 80254be:	687b      	ldr	r3, [r7, #4]
 80254c0:	1c5a      	adds	r2, r3, #1
 80254c2:	607a      	str	r2, [r7, #4]
 80254c4:	781a      	ldrb	r2, [r3, #0]
 80254c6:	4b03      	ldr	r3, [pc, #12]	; (80254d4 <CommandParser+0x240>)
 80254c8:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 80254ca:	687b      	ldr	r3, [r7, #4]
 80254cc:	781a      	ldrb	r2, [r3, #0]
 80254ce:	4b01      	ldr	r3, [pc, #4]	; (80254d4 <CommandParser+0x240>)
 80254d0:	745a      	strb	r2, [r3, #17]
 80254d2:	e028      	b.n	8025526 <CommandParser+0x292>
 80254d4:	20009ea0 	.word	0x20009ea0
 80254d8:	20011e58 	.word	0x20011e58
		} else {
			htel.RN = *buf++;
 80254dc:	687b      	ldr	r3, [r7, #4]
 80254de:	1c5a      	adds	r2, r3, #1
 80254e0:	607a      	str	r2, [r7, #4]
 80254e2:	781a      	ldrb	r2, [r3, #0]
 80254e4:	4b1d      	ldr	r3, [pc, #116]	; (802555c <CommandParser+0x2c8>)
 80254e6:	729a      	strb	r2, [r3, #10]
			uint pdu_size = htel.LE - 7;
 80254e8:	4b1c      	ldr	r3, [pc, #112]	; (802555c <CommandParser+0x2c8>)
 80254ea:	785b      	ldrb	r3, [r3, #1]
 80254ec:	3b07      	subs	r3, #7
 80254ee:	60bb      	str	r3, [r7, #8]
			htel.PDU = (uint8_t*) pvPortMalloc(pdu_size);
 80254f0:	68b8      	ldr	r0, [r7, #8]
 80254f2:	f7ef fe6d 	bl	80151d0 <pvPortMalloc>
 80254f6:	4602      	mov	r2, r0
 80254f8:	4b18      	ldr	r3, [pc, #96]	; (802555c <CommandParser+0x2c8>)
 80254fa:	60da      	str	r2, [r3, #12]
			memcpy(htel.PDU, buf, pdu_size);
 80254fc:	4b17      	ldr	r3, [pc, #92]	; (802555c <CommandParser+0x2c8>)
 80254fe:	68db      	ldr	r3, [r3, #12]
 8025500:	68ba      	ldr	r2, [r7, #8]
 8025502:	6879      	ldr	r1, [r7, #4]
 8025504:	4618      	mov	r0, r3
 8025506:	f001 f9be 	bl	8026886 <memcpy>
			buf += pdu_size;
 802550a:	687a      	ldr	r2, [r7, #4]
 802550c:	68bb      	ldr	r3, [r7, #8]
 802550e:	4413      	add	r3, r2
 8025510:	607b      	str	r3, [r7, #4]
			htel.FCS = *buf++;
 8025512:	687b      	ldr	r3, [r7, #4]
 8025514:	1c5a      	adds	r2, r3, #1
 8025516:	607a      	str	r2, [r7, #4]
 8025518:	781a      	ldrb	r2, [r3, #0]
 802551a:	4b10      	ldr	r3, [pc, #64]	; (802555c <CommandParser+0x2c8>)
 802551c:	741a      	strb	r2, [r3, #16]
			htel.ED = *buf;
 802551e:	687b      	ldr	r3, [r7, #4]
 8025520:	781a      	ldrb	r2, [r3, #0]
 8025522:	4b0e      	ldr	r3, [pc, #56]	; (802555c <CommandParser+0x2c8>)
 8025524:	745a      	strb	r2, [r3, #17]
		}
		return VarDataCmdProcessing(&htel);
 8025526:	480d      	ldr	r0, [pc, #52]	; (802555c <CommandParser+0x2c8>)
 8025528:	f7ff fe64 	bl	80251f4 <VarDataCmdProcessing>
 802552c:	4603      	mov	r3, r0
 802552e:	e010      	b.n	8025552 <CommandParser+0x2be>
	case 0xA2:
		/* Fixed length data */
		break;
	case 0xE5:
		/* Acknowledgment */
		SendTokenMsg(htel.SA, hprot.own_address);
 8025530:	4b0a      	ldr	r3, [pc, #40]	; (802555c <CommandParser+0x2c8>)
 8025532:	791a      	ldrb	r2, [r3, #4]
 8025534:	4b0a      	ldr	r3, [pc, #40]	; (8025560 <CommandParser+0x2cc>)
 8025536:	781b      	ldrb	r3, [r3, #0]
 8025538:	4619      	mov	r1, r3
 802553a:	4610      	mov	r0, r2
 802553c:	f7ff faf4 	bl	8024b28 <SendTokenMsg>
		hprot.token_possession = 0U;
 8025540:	4b07      	ldr	r3, [pc, #28]	; (8025560 <CommandParser+0x2cc>)
 8025542:	2200      	movs	r2, #0
 8025544:	705a      	strb	r2, [r3, #1]
		return NO_ERR;
 8025546:	2300      	movs	r3, #0
 8025548:	e003      	b.n	8025552 <CommandParser+0x2be>
		break;
	default:
		return UNKNOWN_SD_ERR;
 802554a:	2305      	movs	r3, #5
 802554c:	e001      	b.n	8025552 <CommandParser+0x2be>
		break;
 802554e:	bf00      	nop
	}
	return NO_ERR;
 8025550:	2300      	movs	r3, #0
}
 8025552:	4618      	mov	r0, r3
 8025554:	3710      	adds	r7, #16
 8025556:	46bd      	mov	sp, r7
 8025558:	bd80      	pop	{r7, pc}
 802555a:	bf00      	nop
 802555c:	20009ea0 	.word	0x20009ea0
 8025560:	20011e58 	.word	0x20011e58

08025564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8025564:	b580      	push	{r7, lr}
 8025566:	b082      	sub	sp, #8
 8025568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802556a:	2300      	movs	r3, #0
 802556c:	607b      	str	r3, [r7, #4]
 802556e:	4a12      	ldr	r2, [pc, #72]	; (80255b8 <HAL_MspInit+0x54>)
 8025570:	4b11      	ldr	r3, [pc, #68]	; (80255b8 <HAL_MspInit+0x54>)
 8025572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025578:	6453      	str	r3, [r2, #68]	; 0x44
 802557a:	4b0f      	ldr	r3, [pc, #60]	; (80255b8 <HAL_MspInit+0x54>)
 802557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802557e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025582:	607b      	str	r3, [r7, #4]
 8025584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8025586:	2300      	movs	r3, #0
 8025588:	603b      	str	r3, [r7, #0]
 802558a:	4a0b      	ldr	r2, [pc, #44]	; (80255b8 <HAL_MspInit+0x54>)
 802558c:	4b0a      	ldr	r3, [pc, #40]	; (80255b8 <HAL_MspInit+0x54>)
 802558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025594:	6413      	str	r3, [r2, #64]	; 0x40
 8025596:	4b08      	ldr	r3, [pc, #32]	; (80255b8 <HAL_MspInit+0x54>)
 8025598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802559a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802559e:	603b      	str	r3, [r7, #0]
 80255a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80255a2:	2200      	movs	r2, #0
 80255a4:	210f      	movs	r1, #15
 80255a6:	f06f 0001 	mvn.w	r0, #1
 80255aa:	f7eb f813 	bl	80105d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80255ae:	bf00      	nop
 80255b0:	3708      	adds	r7, #8
 80255b2:	46bd      	mov	sp, r7
 80255b4:	bd80      	pop	{r7, pc}
 80255b6:	bf00      	nop
 80255b8:	40023800 	.word	0x40023800

080255bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80255bc:	b580      	push	{r7, lr}
 80255be:	b08c      	sub	sp, #48	; 0x30
 80255c0:	af00      	add	r7, sp, #0
 80255c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80255c4:	2300      	movs	r3, #0
 80255c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80255c8:	2300      	movs	r3, #0
 80255ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80255cc:	2200      	movs	r2, #0
 80255ce:	6879      	ldr	r1, [r7, #4]
 80255d0:	2019      	movs	r0, #25
 80255d2:	f7ea ffff 	bl	80105d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80255d6:	2019      	movs	r0, #25
 80255d8:	f7eb f818 	bl	801060c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80255dc:	2300      	movs	r3, #0
 80255de:	60fb      	str	r3, [r7, #12]
 80255e0:	4a1f      	ldr	r2, [pc, #124]	; (8025660 <HAL_InitTick+0xa4>)
 80255e2:	4b1f      	ldr	r3, [pc, #124]	; (8025660 <HAL_InitTick+0xa4>)
 80255e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80255e6:	f043 0301 	orr.w	r3, r3, #1
 80255ea:	6453      	str	r3, [r2, #68]	; 0x44
 80255ec:	4b1c      	ldr	r3, [pc, #112]	; (8025660 <HAL_InitTick+0xa4>)
 80255ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80255f0:	f003 0301 	and.w	r3, r3, #1
 80255f4:	60fb      	str	r3, [r7, #12]
 80255f6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80255f8:	f107 0210 	add.w	r2, r7, #16
 80255fc:	f107 0314 	add.w	r3, r7, #20
 8025600:	4611      	mov	r1, r2
 8025602:	4618      	mov	r0, r3
 8025604:	f7ed fda4 	bl	8013150 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8025608:	f7ed fd8e 	bl	8013128 <HAL_RCC_GetPCLK2Freq>
 802560c:	4603      	mov	r3, r0
 802560e:	005b      	lsls	r3, r3, #1
 8025610:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8025612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025614:	4a13      	ldr	r2, [pc, #76]	; (8025664 <HAL_InitTick+0xa8>)
 8025616:	fba2 2303 	umull	r2, r3, r2, r3
 802561a:	0c9b      	lsrs	r3, r3, #18
 802561c:	3b01      	subs	r3, #1
 802561e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8025620:	4b11      	ldr	r3, [pc, #68]	; (8025668 <HAL_InitTick+0xac>)
 8025622:	4a12      	ldr	r2, [pc, #72]	; (802566c <HAL_InitTick+0xb0>)
 8025624:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8025626:	4b10      	ldr	r3, [pc, #64]	; (8025668 <HAL_InitTick+0xac>)
 8025628:	f240 32e7 	movw	r2, #999	; 0x3e7
 802562c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 802562e:	4a0e      	ldr	r2, [pc, #56]	; (8025668 <HAL_InitTick+0xac>)
 8025630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025632:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8025634:	4b0c      	ldr	r3, [pc, #48]	; (8025668 <HAL_InitTick+0xac>)
 8025636:	2200      	movs	r2, #0
 8025638:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 802563a:	4b0b      	ldr	r3, [pc, #44]	; (8025668 <HAL_InitTick+0xac>)
 802563c:	2200      	movs	r2, #0
 802563e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8025640:	4809      	ldr	r0, [pc, #36]	; (8025668 <HAL_InitTick+0xac>)
 8025642:	f7ed fdb7 	bl	80131b4 <HAL_TIM_Base_Init>
 8025646:	4603      	mov	r3, r0
 8025648:	2b00      	cmp	r3, #0
 802564a:	d104      	bne.n	8025656 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 802564c:	4806      	ldr	r0, [pc, #24]	; (8025668 <HAL_InitTick+0xac>)
 802564e:	f7ed fddc 	bl	801320a <HAL_TIM_Base_Start_IT>
 8025652:	4603      	mov	r3, r0
 8025654:	e000      	b.n	8025658 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8025656:	2301      	movs	r3, #1
}
 8025658:	4618      	mov	r0, r3
 802565a:	3730      	adds	r7, #48	; 0x30
 802565c:	46bd      	mov	sp, r7
 802565e:	bd80      	pop	{r7, pc}
 8025660:	40023800 	.word	0x40023800
 8025664:	431bde83 	.word	0x431bde83
 8025668:	20011e70 	.word	0x20011e70
 802566c:	40010000 	.word	0x40010000

08025670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8025670:	b480      	push	{r7}
 8025672:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8025674:	bf00      	nop
 8025676:	46bd      	mov	sp, r7
 8025678:	f85d 7b04 	ldr.w	r7, [sp], #4
 802567c:	4770      	bx	lr

0802567e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802567e:	b480      	push	{r7}
 8025680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8025682:	e7fe      	b.n	8025682 <HardFault_Handler+0x4>

08025684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8025684:	b480      	push	{r7}
 8025686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8025688:	e7fe      	b.n	8025688 <MemManage_Handler+0x4>

0802568a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802568a:	b480      	push	{r7}
 802568c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802568e:	e7fe      	b.n	802568e <BusFault_Handler+0x4>

08025690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8025690:	b480      	push	{r7}
 8025692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8025694:	e7fe      	b.n	8025694 <UsageFault_Handler+0x4>

08025696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8025696:	b480      	push	{r7}
 8025698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802569a:	bf00      	nop
 802569c:	46bd      	mov	sp, r7
 802569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256a2:	4770      	bx	lr

080256a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80256a4:	b580      	push	{r7, lr}
 80256a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80256a8:	4802      	ldr	r0, [pc, #8]	; (80256b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80256aa:	f7ed fdf4 	bl	8013296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80256ae:	bf00      	nop
 80256b0:	bd80      	pop	{r7, pc}
 80256b2:	bf00      	nop
 80256b4:	20011e70 	.word	0x20011e70

080256b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80256b8:	b580      	push	{r7, lr}
 80256ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80256bc:	4802      	ldr	r0, [pc, #8]	; (80256c8 <USART1_IRQHandler+0x10>)
 80256be:	f7ee facb 	bl	8013c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80256c2:	bf00      	nop
 80256c4:	bd80      	pop	{r7, pc}
 80256c6:	bf00      	nop
 80256c8:	20011fc8 	.word	0x20011fc8

080256cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80256cc:	b580      	push	{r7, lr}
 80256ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80256d0:	4802      	ldr	r0, [pc, #8]	; (80256dc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80256d2:	f7ed fde0 	bl	8013296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80256d6:	bf00      	nop
 80256d8:	bd80      	pop	{r7, pc}
 80256da:	bf00      	nop
 80256dc:	20011eb0 	.word	0x20011eb0

080256e0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80256e0:	b580      	push	{r7, lr}
 80256e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80256e4:	4802      	ldr	r0, [pc, #8]	; (80256f0 <DMA1_Stream7_IRQHandler+0x10>)
 80256e6:	f7eb f929 	bl	801093c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80256ea:	bf00      	nop
 80256ec:	bd80      	pop	{r7, pc}
 80256ee:	bf00      	nop
 80256f0:	20012008 	.word	0x20012008

080256f4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80256f4:	b580      	push	{r7, lr}
 80256f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80256f8:	4802      	ldr	r0, [pc, #8]	; (8025704 <UART5_IRQHandler+0x10>)
 80256fa:	f7ee faad 	bl	8013c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80256fe:	bf00      	nop
 8025700:	bd80      	pop	{r7, pc}
 8025702:	bf00      	nop
 8025704:	20011f88 	.word	0x20011f88

08025708 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8025708:	b580      	push	{r7, lr}
 802570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 802570c:	4802      	ldr	r0, [pc, #8]	; (8025718 <TIM7_IRQHandler+0x10>)
 802570e:	f7ed fdc2 	bl	8013296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8025712:	bf00      	nop
 8025714:	bd80      	pop	{r7, pc}
 8025716:	bf00      	nop
 8025718:	20011eec 	.word	0x20011eec

0802571c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 802571c:	b580      	push	{r7, lr}
 802571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8025720:	4802      	ldr	r0, [pc, #8]	; (802572c <ETH_IRQHandler+0x10>)
 8025722:	f7eb ff59 	bl	80115d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8025726:	bf00      	nop
 8025728:	bd80      	pop	{r7, pc}
 802572a:	bf00      	nop
 802572c:	200105c0 	.word	0x200105c0

08025730 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8025730:	b580      	push	{r7, lr}
 8025732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8025734:	4802      	ldr	r0, [pc, #8]	; (8025740 <DMA2_Stream7_IRQHandler+0x10>)
 8025736:	f7eb f901 	bl	801093c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 802573a:	bf00      	nop
 802573c:	bd80      	pop	{r7, pc}
 802573e:	bf00      	nop
 8025740:	20011f28 	.word	0x20011f28

08025744 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8025744:	b480      	push	{r7}
 8025746:	b083      	sub	sp, #12
 8025748:	af00      	add	r7, sp, #0
 802574a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 802574c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025750:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8025754:	f003 0301 	and.w	r3, r3, #1
 8025758:	2b00      	cmp	r3, #0
 802575a:	d013      	beq.n	8025784 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 802575c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025760:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8025764:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8025768:	2b00      	cmp	r3, #0
 802576a:	d00b      	beq.n	8025784 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 802576c:	e000      	b.n	8025770 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 802576e:	bf00      	nop
 8025770:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025774:	681b      	ldr	r3, [r3, #0]
 8025776:	2b00      	cmp	r3, #0
 8025778:	d0f9      	beq.n	802576e <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 802577a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 802577e:	687a      	ldr	r2, [r7, #4]
 8025780:	b2d2      	uxtb	r2, r2
 8025782:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8025784:	687b      	ldr	r3, [r7, #4]
}
 8025786:	4618      	mov	r0, r3
 8025788:	370c      	adds	r7, #12
 802578a:	46bd      	mov	sp, r7
 802578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025790:	4770      	bx	lr

08025792 <_write>:
	}

	return len;
}

int _write(int file, char *ptr, int len) {
 8025792:	b580      	push	{r7, lr}
 8025794:	b086      	sub	sp, #24
 8025796:	af00      	add	r7, sp, #0
 8025798:	60f8      	str	r0, [r7, #12]
 802579a:	60b9      	str	r1, [r7, #8]
 802579c:	607a      	str	r2, [r7, #4]
	int i = 0;
 802579e:	2300      	movs	r3, #0
 80257a0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 80257a2:	2300      	movs	r3, #0
 80257a4:	617b      	str	r3, [r7, #20]
 80257a6:	e009      	b.n	80257bc <_write+0x2a>
		ITM_SendChar((*ptr++));
 80257a8:	68bb      	ldr	r3, [r7, #8]
 80257aa:	1c5a      	adds	r2, r3, #1
 80257ac:	60ba      	str	r2, [r7, #8]
 80257ae:	781b      	ldrb	r3, [r3, #0]
 80257b0:	4618      	mov	r0, r3
 80257b2:	f7ff ffc7 	bl	8025744 <ITM_SendChar>
	for (i = 0; i < len; i++)
 80257b6:	697b      	ldr	r3, [r7, #20]
 80257b8:	3301      	adds	r3, #1
 80257ba:	617b      	str	r3, [r7, #20]
 80257bc:	697a      	ldr	r2, [r7, #20]
 80257be:	687b      	ldr	r3, [r7, #4]
 80257c0:	429a      	cmp	r2, r3
 80257c2:	dbf1      	blt.n	80257a8 <_write+0x16>
	return len;
 80257c4:	687b      	ldr	r3, [r7, #4]
}
 80257c6:	4618      	mov	r0, r3
 80257c8:	3718      	adds	r7, #24
 80257ca:	46bd      	mov	sp, r7
 80257cc:	bd80      	pop	{r7, pc}
	...

080257d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80257d0:	b480      	push	{r7}
 80257d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80257d4:	4a16      	ldr	r2, [pc, #88]	; (8025830 <SystemInit+0x60>)
 80257d6:	4b16      	ldr	r3, [pc, #88]	; (8025830 <SystemInit+0x60>)
 80257d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80257dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80257e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80257e4:	4a13      	ldr	r2, [pc, #76]	; (8025834 <SystemInit+0x64>)
 80257e6:	4b13      	ldr	r3, [pc, #76]	; (8025834 <SystemInit+0x64>)
 80257e8:	681b      	ldr	r3, [r3, #0]
 80257ea:	f043 0301 	orr.w	r3, r3, #1
 80257ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80257f0:	4b10      	ldr	r3, [pc, #64]	; (8025834 <SystemInit+0x64>)
 80257f2:	2200      	movs	r2, #0
 80257f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80257f6:	4a0f      	ldr	r2, [pc, #60]	; (8025834 <SystemInit+0x64>)
 80257f8:	4b0e      	ldr	r3, [pc, #56]	; (8025834 <SystemInit+0x64>)
 80257fa:	681b      	ldr	r3, [r3, #0]
 80257fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8025800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8025804:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8025806:	4b0b      	ldr	r3, [pc, #44]	; (8025834 <SystemInit+0x64>)
 8025808:	4a0b      	ldr	r2, [pc, #44]	; (8025838 <SystemInit+0x68>)
 802580a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 802580c:	4a09      	ldr	r2, [pc, #36]	; (8025834 <SystemInit+0x64>)
 802580e:	4b09      	ldr	r3, [pc, #36]	; (8025834 <SystemInit+0x64>)
 8025810:	681b      	ldr	r3, [r3, #0]
 8025812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8025816:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8025818:	4b06      	ldr	r3, [pc, #24]	; (8025834 <SystemInit+0x64>)
 802581a:	2200      	movs	r2, #0
 802581c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802581e:	4b04      	ldr	r3, [pc, #16]	; (8025830 <SystemInit+0x60>)
 8025820:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025824:	609a      	str	r2, [r3, #8]
#endif
}
 8025826:	bf00      	nop
 8025828:	46bd      	mov	sp, r7
 802582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802582e:	4770      	bx	lr
 8025830:	e000ed00 	.word	0xe000ed00
 8025834:	40023800 	.word	0x40023800
 8025838:	24003010 	.word	0x24003010

0802583c <Client_thread>:

#include "tcp_client.h"

xQueueHandle tcp_client_queue;

void Client_thread(void *arg) {
 802583c:	b5b0      	push	{r4, r5, r7, lr}
 802583e:	b094      	sub	sp, #80	; 0x50
 8025840:	af02      	add	r7, sp, #8
 8025842:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	struct netbuf *inbuf;
	struct netconn *newconn;
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
 8025844:	687b      	ldr	r3, [r7, #4]
 8025846:	643b      	str	r3, [r7, #64]	; 0x40
	u16_t buflen;
	char* buf;

	const uint8_t data_COTP[] = { 0x03, 0x00, 0x00, 0x16, 0x11, 0xD0, 0x00,
 8025848:	4b79      	ldr	r3, [pc, #484]	; (8025a30 <Client_thread+0x1f4>)
 802584a:	f107 0410 	add.w	r4, r7, #16
 802584e:	461d      	mov	r5, r3
 8025850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025854:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025858:	6020      	str	r0, [r4, #0]
 802585a:	3404      	adds	r4, #4
 802585c:	8021      	strh	r1, [r4, #0]
	 const uint8_t data_S7_var[] = { 0x03, 0x00, 0x00, 0x1A, 0x02, 0xF0, 0x80,
	 0x32, 0x03, 0x00, 0x00, 0x05, 0x00, 0x00, 0x02, 0x00, 0x05, 0x00,
	 0x00, 0x04, 0x01, 0xFF, 0x04, 0x00, 0x08, 0x08 };
	 */

	osDelay(1);
 802585e:	2001      	movs	r0, #1
 8025860:	f7ee ff63 	bl	801472a <osDelay>
	for (;;) {
		err = netconn_accept(arg_conn, &newconn);
 8025864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8025868:	4619      	mov	r1, r3
 802586a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 802586c:	f7f1 fe12 	bl	8017494 <netconn_accept>
 8025870:	4603      	mov	r3, r0
 8025872:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (err == ERR_OK) {
 8025876:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 802587a:	2b00      	cmp	r3, #0
 802587c:	d1f2      	bne.n	8025864 <Client_thread+0x28>
			printf("Accept.\n");
 802587e:	486d      	ldr	r0, [pc, #436]	; (8025a34 <Client_thread+0x1f8>)
 8025880:	f000 fb7c 	bl	8025f7c <puts>
			recv_err = netconn_recv(newconn, &inbuf);
 8025884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025886:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802588a:	4611      	mov	r1, r2
 802588c:	4618      	mov	r0, r3
 802588e:	f7f1 ff31 	bl	80176f4 <netconn_recv>
 8025892:	4603      	mov	r3, r0
 8025894:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if (recv_err == ERR_OK) {
 8025898:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 802589c:	2b00      	cmp	r3, #0
 802589e:	f040 80b4 	bne.w	8025a0a <Client_thread+0x1ce>
				if (netconn_err(newconn) == ERR_OK) {
 80258a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80258a4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80258a8:	2b00      	cmp	r3, #0
 80258aa:	f040 80b7 	bne.w	8025a1c <Client_thread+0x1e0>
					do {
						netbuf_data(inbuf, (void**) &buf, &buflen);
 80258ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80258b0:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80258b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80258b8:	4618      	mov	r0, r3
 80258ba:	f7f3 fbc1 	bl	8019040 <netbuf_data>
						if ((buf[0] == 0x03) && (buf[1] == 0x00)
 80258be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258c0:	781b      	ldrb	r3, [r3, #0]
 80258c2:	2b03      	cmp	r3, #3
 80258c4:	f040 8094 	bne.w	80259f0 <Client_thread+0x1b4>
 80258c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258ca:	3301      	adds	r3, #1
 80258cc:	781b      	ldrb	r3, [r3, #0]
 80258ce:	2b00      	cmp	r3, #0
 80258d0:	f040 808e 	bne.w	80259f0 <Client_thread+0x1b4>
								&& (buf[2] == 0x00) && (buf[3] == 0x16)) {
 80258d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258d6:	3302      	adds	r3, #2
 80258d8:	781b      	ldrb	r3, [r3, #0]
 80258da:	2b00      	cmp	r3, #0
 80258dc:	f040 8088 	bne.w	80259f0 <Client_thread+0x1b4>
 80258e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258e2:	3303      	adds	r3, #3
 80258e4:	781b      	ldrb	r3, [r3, #0]
 80258e6:	2b16      	cmp	r3, #22
 80258e8:	f040 8082 	bne.w	80259f0 <Client_thread+0x1b4>
							netconn_write(newconn,
 80258ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80258ee:	f107 0110 	add.w	r1, r7, #16
 80258f2:	2300      	movs	r3, #0
 80258f4:	9300      	str	r3, [sp, #0]
 80258f6:	2300      	movs	r3, #0
 80258f8:	2216      	movs	r2, #22
 80258fa:	f7f1 ff67 	bl	80177cc <netconn_write_partly>
									(const unsigned char* )(data_COTP),
									sizeof(data_COTP), NETCONN_NOCOPY);
							while (recv_err == ERR_OK) {
 80258fe:	e073      	b.n	80259e8 <Client_thread+0x1ac>
								recv_err = netconn_recv(newconn, &inbuf);
 8025900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025902:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025906:	4611      	mov	r1, r2
 8025908:	4618      	mov	r0, r3
 802590a:	f7f1 fef3 	bl	80176f4 <netconn_recv>
 802590e:	4603      	mov	r3, r0
 8025910:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								netbuf_data(inbuf, (void**) &buf, &buflen);
 8025914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025916:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 802591a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 802591e:	4618      	mov	r0, r3
 8025920:	f7f3 fb8e 	bl	8019040 <netbuf_data>
								parcel_t parc;
								parc.len = buflen - 7;
 8025924:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8025926:	3b07      	subs	r3, #7
 8025928:	b29b      	uxth	r3, r3
 802592a:	81bb      	strh	r3, [r7, #12]
								parc.data = pvPortMalloc(parc.len);
 802592c:	89bb      	ldrh	r3, [r7, #12]
 802592e:	4618      	mov	r0, r3
 8025930:	f7ef fc4e 	bl	80151d0 <pvPortMalloc>
 8025934:	4603      	mov	r3, r0
 8025936:	60bb      	str	r3, [r7, #8]
								memcpy(parc.data, buf + 7, parc.len);
 8025938:	68b8      	ldr	r0, [r7, #8]
 802593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802593c:	3307      	adds	r3, #7
 802593e:	89ba      	ldrh	r2, [r7, #12]
 8025940:	4619      	mov	r1, r3
 8025942:	f000 ffa0 	bl	8026886 <memcpy>
								xQueueSend(tcp_client_queue, &parc, 0);
 8025946:	4b3c      	ldr	r3, [pc, #240]	; (8025a38 <Client_thread+0x1fc>)
 8025948:	6818      	ldr	r0, [r3, #0]
 802594a:	f107 0108 	add.w	r1, r7, #8
 802594e:	2300      	movs	r3, #0
 8025950:	2200      	movs	r2, #0
 8025952:	f7ef ff9b 	bl	801588c <xQueueGenericSend>
								xQueueReceive(protocol_queue, &parc,
 8025956:	4b39      	ldr	r3, [pc, #228]	; (8025a3c <Client_thread+0x200>)
 8025958:	6818      	ldr	r0, [r3, #0]
 802595a:	f107 0108 	add.w	r1, r7, #8
 802595e:	2300      	movs	r3, #0
 8025960:	f04f 32ff 	mov.w	r2, #4294967295
 8025964:	f7f0 f9aa 	bl	8015cbc <xQueueGenericReceive>
										portMAX_DELAY);
								uint8_t * answer;
								answer = (uint8_t*) pvPortMalloc(parc.len + 7);
 8025968:	89bb      	ldrh	r3, [r7, #12]
 802596a:	3307      	adds	r3, #7
 802596c:	4618      	mov	r0, r3
 802596e:	f7ef fc2f 	bl	80151d0 <pvPortMalloc>
 8025972:	63b8      	str	r0, [r7, #56]	; 0x38
								answer[0] = 0x03;
 8025974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025976:	2203      	movs	r2, #3
 8025978:	701a      	strb	r2, [r3, #0]
								answer[1] = 0x00;
 802597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802597c:	3301      	adds	r3, #1
 802597e:	2200      	movs	r2, #0
 8025980:	701a      	strb	r2, [r3, #0]
								answer[2] = 0x00;
 8025982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025984:	3302      	adds	r3, #2
 8025986:	2200      	movs	r2, #0
 8025988:	701a      	strb	r2, [r3, #0]
								answer[3] = parc.len + 7;
 802598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802598c:	3303      	adds	r3, #3
 802598e:	89ba      	ldrh	r2, [r7, #12]
 8025990:	b2d2      	uxtb	r2, r2
 8025992:	3207      	adds	r2, #7
 8025994:	b2d2      	uxtb	r2, r2
 8025996:	701a      	strb	r2, [r3, #0]
								answer[4] = 0x02;
 8025998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802599a:	3304      	adds	r3, #4
 802599c:	2202      	movs	r2, #2
 802599e:	701a      	strb	r2, [r3, #0]
								answer[5] = 0xF0;
 80259a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259a2:	3305      	adds	r3, #5
 80259a4:	22f0      	movs	r2, #240	; 0xf0
 80259a6:	701a      	strb	r2, [r3, #0]
								answer[6] = 0x80;
 80259a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259aa:	3306      	adds	r3, #6
 80259ac:	2280      	movs	r2, #128	; 0x80
 80259ae:	701a      	strb	r2, [r3, #0]
								memcpy(answer + 7, parc.data, parc.len);
 80259b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259b2:	3307      	adds	r3, #7
 80259b4:	68b9      	ldr	r1, [r7, #8]
 80259b6:	89ba      	ldrh	r2, [r7, #12]
 80259b8:	4618      	mov	r0, r3
 80259ba:	f000 ff64 	bl	8026886 <memcpy>
								vPortFree(parc.data);
 80259be:	68bb      	ldr	r3, [r7, #8]
 80259c0:	4618      	mov	r0, r3
 80259c2:	f7ef fcc7 	bl	8015354 <vPortFree>
								netconn_write(newconn,
 80259c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80259c8:	89bb      	ldrh	r3, [r7, #12]
 80259ca:	3307      	adds	r3, #7
 80259cc:	461a      	mov	r2, r3
 80259ce:	2300      	movs	r3, #0
 80259d0:	9300      	str	r3, [sp, #0]
 80259d2:	2301      	movs	r3, #1
 80259d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80259d6:	f7f1 fef9 	bl	80177cc <netconn_write_partly>
										(const unsigned char* )(answer),
										parc.len + 7, NETCONN_COPY);
								vPortFree(answer);
 80259da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80259dc:	f7ef fcba 	bl	8015354 <vPortFree>
								 (const unsigned char* )(data_S7_var),
								 sizeof(data_S7_var),
								 NETCONN_NOCOPY);
								 }
								 */
								netbuf_delete(inbuf);
 80259e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80259e2:	4618      	mov	r0, r3
 80259e4:	f7f3 fb0c 	bl	8019000 <netbuf_delete>
							while (recv_err == ERR_OK) {
 80259e8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80259ec:	2b00      	cmp	r3, #0
 80259ee:	d087      	beq.n	8025900 <Client_thread+0xc4>
							}
						}
					} while (netbuf_next(inbuf) >= 0);
 80259f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80259f2:	4618      	mov	r0, r3
 80259f4:	f7f3 fb6e 	bl	80190d4 <netbuf_next>
 80259f8:	4603      	mov	r3, r0
 80259fa:	2b00      	cmp	r3, #0
 80259fc:	f6bf af57 	bge.w	80258ae <Client_thread+0x72>
					netbuf_delete(inbuf);
 8025a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025a02:	4618      	mov	r0, r3
 8025a04:	f7f3 fafc 	bl	8019000 <netbuf_delete>
 8025a08:	e008      	b.n	8025a1c <Client_thread+0x1e0>
				}
			} else {
				LogText(SUB_SYS_TCP, LOG_LEV_ERR, "Receive_error.");
 8025a0a:	4a0d      	ldr	r2, [pc, #52]	; (8025a40 <Client_thread+0x204>)
 8025a0c:	2101      	movs	r1, #1
 8025a0e:	2003      	movs	r0, #3
 8025a10:	f7fe fd2c 	bl	802446c <LogText__>
				netbuf_delete(inbuf);
 8025a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025a16:	4618      	mov	r0, r3
 8025a18:	f7f3 faf2 	bl	8019000 <netbuf_delete>
			}
			netconn_close(newconn);
 8025a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a1e:	4618      	mov	r0, r3
 8025a20:	f7f1 ff7c 	bl	801791c <netconn_close>
			netconn_delete(newconn);
 8025a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a26:	4618      	mov	r0, r3
 8025a28:	f7f1 fcaa 	bl	8017380 <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 8025a2c:	e71a      	b.n	8025864 <Client_thread+0x28>
 8025a2e:	bf00      	nop
 8025a30:	08029224 	.word	0x08029224
 8025a34:	0802920c 	.word	0x0802920c
 8025a38:	20011eac 	.word	0x20011eac
 8025a3c:	20011e6c 	.word	0x20011e6c
 8025a40:	08029214 	.word	0x08029214

08025a44 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8025a44:	b580      	push	{r7, lr}
 8025a46:	b082      	sub	sp, #8
 8025a48:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8025a4a:	463b      	mov	r3, r7
 8025a4c:	2200      	movs	r2, #0
 8025a4e:	601a      	str	r2, [r3, #0]
 8025a50:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8025a52:	4b13      	ldr	r3, [pc, #76]	; (8025aa0 <MX_TIM7_Init+0x5c>)
 8025a54:	4a13      	ldr	r2, [pc, #76]	; (8025aa4 <MX_TIM7_Init+0x60>)
 8025a56:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8025a58:	4b11      	ldr	r3, [pc, #68]	; (8025aa0 <MX_TIM7_Init+0x5c>)
 8025a5a:	2200      	movs	r2, #0
 8025a5c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8025a5e:	4b10      	ldr	r3, [pc, #64]	; (8025aa0 <MX_TIM7_Init+0x5c>)
 8025a60:	2200      	movs	r2, #0
 8025a62:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 840;
 8025a64:	4b0e      	ldr	r3, [pc, #56]	; (8025aa0 <MX_TIM7_Init+0x5c>)
 8025a66:	f44f 7252 	mov.w	r2, #840	; 0x348
 8025a6a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8025a6c:	480c      	ldr	r0, [pc, #48]	; (8025aa0 <MX_TIM7_Init+0x5c>)
 8025a6e:	f7ed fba1 	bl	80131b4 <HAL_TIM_Base_Init>
 8025a72:	4603      	mov	r3, r0
 8025a74:	2b00      	cmp	r3, #0
 8025a76:	d001      	beq.n	8025a7c <MX_TIM7_Init+0x38>
  {
    Error_Handler();
 8025a78:	f7fe ff56 	bl	8024928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8025a7c:	2300      	movs	r3, #0
 8025a7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8025a80:	2300      	movs	r3, #0
 8025a82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8025a84:	463b      	mov	r3, r7
 8025a86:	4619      	mov	r1, r3
 8025a88:	4805      	ldr	r0, [pc, #20]	; (8025aa0 <MX_TIM7_Init+0x5c>)
 8025a8a:	f7ed ff62 	bl	8013952 <HAL_TIMEx_MasterConfigSynchronization>
 8025a8e:	4603      	mov	r3, r0
 8025a90:	2b00      	cmp	r3, #0
 8025a92:	d001      	beq.n	8025a98 <MX_TIM7_Init+0x54>
  {
    Error_Handler();
 8025a94:	f7fe ff48 	bl	8024928 <Error_Handler>
  }

}
 8025a98:	bf00      	nop
 8025a9a:	3708      	adds	r7, #8
 8025a9c:	46bd      	mov	sp, r7
 8025a9e:	bd80      	pop	{r7, pc}
 8025aa0:	20011eec 	.word	0x20011eec
 8025aa4:	40001400 	.word	0x40001400

08025aa8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8025aa8:	b580      	push	{r7, lr}
 8025aaa:	b086      	sub	sp, #24
 8025aac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8025aae:	f107 0308 	add.w	r3, r7, #8
 8025ab2:	2200      	movs	r2, #0
 8025ab4:	601a      	str	r2, [r3, #0]
 8025ab6:	605a      	str	r2, [r3, #4]
 8025ab8:	609a      	str	r2, [r3, #8]
 8025aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8025abc:	463b      	mov	r3, r7
 8025abe:	2200      	movs	r2, #0
 8025ac0:	601a      	str	r2, [r3, #0]
 8025ac2:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8025ac4:	4b1d      	ldr	r3, [pc, #116]	; (8025b3c <MX_TIM8_Init+0x94>)
 8025ac6:	4a1e      	ldr	r2, [pc, #120]	; (8025b40 <MX_TIM8_Init+0x98>)
 8025ac8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8025aca:	4b1c      	ldr	r3, [pc, #112]	; (8025b3c <MX_TIM8_Init+0x94>)
 8025acc:	2200      	movs	r2, #0
 8025ace:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8025ad0:	4b1a      	ldr	r3, [pc, #104]	; (8025b3c <MX_TIM8_Init+0x94>)
 8025ad2:	2200      	movs	r2, #0
 8025ad4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27720;
 8025ad6:	4b19      	ldr	r3, [pc, #100]	; (8025b3c <MX_TIM8_Init+0x94>)
 8025ad8:	f646 4248 	movw	r2, #27720	; 0x6c48
 8025adc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8025ade:	4b17      	ldr	r3, [pc, #92]	; (8025b3c <MX_TIM8_Init+0x94>)
 8025ae0:	2200      	movs	r2, #0
 8025ae2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8025ae4:	4b15      	ldr	r3, [pc, #84]	; (8025b3c <MX_TIM8_Init+0x94>)
 8025ae6:	2200      	movs	r2, #0
 8025ae8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8025aea:	4814      	ldr	r0, [pc, #80]	; (8025b3c <MX_TIM8_Init+0x94>)
 8025aec:	f7ed fb62 	bl	80131b4 <HAL_TIM_Base_Init>
 8025af0:	4603      	mov	r3, r0
 8025af2:	2b00      	cmp	r3, #0
 8025af4:	d001      	beq.n	8025afa <MX_TIM8_Init+0x52>
  {
    Error_Handler();
 8025af6:	f7fe ff17 	bl	8024928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8025afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8025afe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8025b00:	f107 0308 	add.w	r3, r7, #8
 8025b04:	4619      	mov	r1, r3
 8025b06:	480d      	ldr	r0, [pc, #52]	; (8025b3c <MX_TIM8_Init+0x94>)
 8025b08:	f7ed fccd 	bl	80134a6 <HAL_TIM_ConfigClockSource>
 8025b0c:	4603      	mov	r3, r0
 8025b0e:	2b00      	cmp	r3, #0
 8025b10:	d001      	beq.n	8025b16 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8025b12:	f7fe ff09 	bl	8024928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8025b16:	2300      	movs	r3, #0
 8025b18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8025b1a:	2300      	movs	r3, #0
 8025b1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8025b1e:	463b      	mov	r3, r7
 8025b20:	4619      	mov	r1, r3
 8025b22:	4806      	ldr	r0, [pc, #24]	; (8025b3c <MX_TIM8_Init+0x94>)
 8025b24:	f7ed ff15 	bl	8013952 <HAL_TIMEx_MasterConfigSynchronization>
 8025b28:	4603      	mov	r3, r0
 8025b2a:	2b00      	cmp	r3, #0
 8025b2c:	d001      	beq.n	8025b32 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8025b2e:	f7fe fefb 	bl	8024928 <Error_Handler>
  }

}
 8025b32:	bf00      	nop
 8025b34:	3718      	adds	r7, #24
 8025b36:	46bd      	mov	sp, r7
 8025b38:	bd80      	pop	{r7, pc}
 8025b3a:	bf00      	nop
 8025b3c:	20011eb0 	.word	0x20011eb0
 8025b40:	40010400 	.word	0x40010400

08025b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8025b44:	b580      	push	{r7, lr}
 8025b46:	b084      	sub	sp, #16
 8025b48:	af00      	add	r7, sp, #0
 8025b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8025b4c:	687b      	ldr	r3, [r7, #4]
 8025b4e:	681b      	ldr	r3, [r3, #0]
 8025b50:	4a1c      	ldr	r2, [pc, #112]	; (8025bc4 <HAL_TIM_Base_MspInit+0x80>)
 8025b52:	4293      	cmp	r3, r2
 8025b54:	d116      	bne.n	8025b84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8025b56:	2300      	movs	r3, #0
 8025b58:	60fb      	str	r3, [r7, #12]
 8025b5a:	4a1b      	ldr	r2, [pc, #108]	; (8025bc8 <HAL_TIM_Base_MspInit+0x84>)
 8025b5c:	4b1a      	ldr	r3, [pc, #104]	; (8025bc8 <HAL_TIM_Base_MspInit+0x84>)
 8025b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025b60:	f043 0320 	orr.w	r3, r3, #32
 8025b64:	6413      	str	r3, [r2, #64]	; 0x40
 8025b66:	4b18      	ldr	r3, [pc, #96]	; (8025bc8 <HAL_TIM_Base_MspInit+0x84>)
 8025b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025b6a:	f003 0320 	and.w	r3, r3, #32
 8025b6e:	60fb      	str	r3, [r7, #12]
 8025b70:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8025b72:	2200      	movs	r2, #0
 8025b74:	2105      	movs	r1, #5
 8025b76:	2037      	movs	r0, #55	; 0x37
 8025b78:	f7ea fd2c 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8025b7c:	2037      	movs	r0, #55	; 0x37
 8025b7e:	f7ea fd45 	bl	801060c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8025b82:	e01a      	b.n	8025bba <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM8)
 8025b84:	687b      	ldr	r3, [r7, #4]
 8025b86:	681b      	ldr	r3, [r3, #0]
 8025b88:	4a10      	ldr	r2, [pc, #64]	; (8025bcc <HAL_TIM_Base_MspInit+0x88>)
 8025b8a:	4293      	cmp	r3, r2
 8025b8c:	d115      	bne.n	8025bba <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8025b8e:	2300      	movs	r3, #0
 8025b90:	60bb      	str	r3, [r7, #8]
 8025b92:	4a0d      	ldr	r2, [pc, #52]	; (8025bc8 <HAL_TIM_Base_MspInit+0x84>)
 8025b94:	4b0c      	ldr	r3, [pc, #48]	; (8025bc8 <HAL_TIM_Base_MspInit+0x84>)
 8025b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025b98:	f043 0302 	orr.w	r3, r3, #2
 8025b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8025b9e:	4b0a      	ldr	r3, [pc, #40]	; (8025bc8 <HAL_TIM_Base_MspInit+0x84>)
 8025ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025ba2:	f003 0302 	and.w	r3, r3, #2
 8025ba6:	60bb      	str	r3, [r7, #8]
 8025ba8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8025baa:	2200      	movs	r2, #0
 8025bac:	2105      	movs	r1, #5
 8025bae:	202c      	movs	r0, #44	; 0x2c
 8025bb0:	f7ea fd10 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8025bb4:	202c      	movs	r0, #44	; 0x2c
 8025bb6:	f7ea fd29 	bl	801060c <HAL_NVIC_EnableIRQ>
}
 8025bba:	bf00      	nop
 8025bbc:	3710      	adds	r7, #16
 8025bbe:	46bd      	mov	sp, r7
 8025bc0:	bd80      	pop	{r7, pc}
 8025bc2:	bf00      	nop
 8025bc4:	40001400 	.word	0x40001400
 8025bc8:	40023800 	.word	0x40023800
 8025bcc:	40010400 	.word	0x40010400

08025bd0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8025bd0:	b480      	push	{r7}
 8025bd2:	b087      	sub	sp, #28
 8025bd4:	af00      	add	r7, sp, #0
 8025bd6:	60f8      	str	r0, [r7, #12]
 8025bd8:	60b9      	str	r1, [r7, #8]
 8025bda:	607a      	str	r2, [r7, #4]
	int div = 1;
 8025bdc:	2301      	movs	r3, #1
 8025bde:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8025be0:	e004      	b.n	8025bec <ts_itoa+0x1c>
		div *= base;
 8025be2:	697b      	ldr	r3, [r7, #20]
 8025be4:	687a      	ldr	r2, [r7, #4]
 8025be6:	fb02 f303 	mul.w	r3, r2, r3
 8025bea:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8025bec:	697b      	ldr	r3, [r7, #20]
 8025bee:	68ba      	ldr	r2, [r7, #8]
 8025bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8025bf4:	687b      	ldr	r3, [r7, #4]
 8025bf6:	429a      	cmp	r2, r3
 8025bf8:	d2f3      	bcs.n	8025be2 <ts_itoa+0x12>

	while (div != 0)
 8025bfa:	e029      	b.n	8025c50 <ts_itoa+0x80>
	{
		int num = d/div;
 8025bfc:	697b      	ldr	r3, [r7, #20]
 8025bfe:	68ba      	ldr	r2, [r7, #8]
 8025c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8025c04:	613b      	str	r3, [r7, #16]
		d = d%div;
 8025c06:	697a      	ldr	r2, [r7, #20]
 8025c08:	68bb      	ldr	r3, [r7, #8]
 8025c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8025c0e:	fb02 f201 	mul.w	r2, r2, r1
 8025c12:	1a9b      	subs	r3, r3, r2
 8025c14:	60bb      	str	r3, [r7, #8]
		div /= base;
 8025c16:	697a      	ldr	r2, [r7, #20]
 8025c18:	687b      	ldr	r3, [r7, #4]
 8025c1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c1e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8025c20:	693b      	ldr	r3, [r7, #16]
 8025c22:	2b09      	cmp	r3, #9
 8025c24:	dd0a      	ble.n	8025c3c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8025c26:	68fb      	ldr	r3, [r7, #12]
 8025c28:	681b      	ldr	r3, [r3, #0]
 8025c2a:	1c59      	adds	r1, r3, #1
 8025c2c:	68fa      	ldr	r2, [r7, #12]
 8025c2e:	6011      	str	r1, [r2, #0]
 8025c30:	693a      	ldr	r2, [r7, #16]
 8025c32:	b2d2      	uxtb	r2, r2
 8025c34:	3237      	adds	r2, #55	; 0x37
 8025c36:	b2d2      	uxtb	r2, r2
 8025c38:	701a      	strb	r2, [r3, #0]
 8025c3a:	e009      	b.n	8025c50 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8025c3c:	68fb      	ldr	r3, [r7, #12]
 8025c3e:	681b      	ldr	r3, [r3, #0]
 8025c40:	1c59      	adds	r1, r3, #1
 8025c42:	68fa      	ldr	r2, [r7, #12]
 8025c44:	6011      	str	r1, [r2, #0]
 8025c46:	693a      	ldr	r2, [r7, #16]
 8025c48:	b2d2      	uxtb	r2, r2
 8025c4a:	3230      	adds	r2, #48	; 0x30
 8025c4c:	b2d2      	uxtb	r2, r2
 8025c4e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8025c50:	697b      	ldr	r3, [r7, #20]
 8025c52:	2b00      	cmp	r3, #0
 8025c54:	d1d2      	bne.n	8025bfc <ts_itoa+0x2c>
	}
}
 8025c56:	bf00      	nop
 8025c58:	371c      	adds	r7, #28
 8025c5a:	46bd      	mov	sp, r7
 8025c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c60:	4770      	bx	lr

08025c62 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8025c62:	b580      	push	{r7, lr}
 8025c64:	b088      	sub	sp, #32
 8025c66:	af00      	add	r7, sp, #0
 8025c68:	60f8      	str	r0, [r7, #12]
 8025c6a:	60b9      	str	r1, [r7, #8]
 8025c6c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8025c6e:	68fb      	ldr	r3, [r7, #12]
 8025c70:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8025c72:	e07d      	b.n	8025d70 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8025c74:	68bb      	ldr	r3, [r7, #8]
 8025c76:	781b      	ldrb	r3, [r3, #0]
 8025c78:	2b25      	cmp	r3, #37	; 0x25
 8025c7a:	d171      	bne.n	8025d60 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8025c7c:	68bb      	ldr	r3, [r7, #8]
 8025c7e:	3301      	adds	r3, #1
 8025c80:	60bb      	str	r3, [r7, #8]
 8025c82:	68bb      	ldr	r3, [r7, #8]
 8025c84:	781b      	ldrb	r3, [r3, #0]
 8025c86:	2b64      	cmp	r3, #100	; 0x64
 8025c88:	d01e      	beq.n	8025cc8 <ts_formatstring+0x66>
 8025c8a:	2b64      	cmp	r3, #100	; 0x64
 8025c8c:	dc06      	bgt.n	8025c9c <ts_formatstring+0x3a>
 8025c8e:	2b58      	cmp	r3, #88	; 0x58
 8025c90:	d050      	beq.n	8025d34 <ts_formatstring+0xd2>
 8025c92:	2b63      	cmp	r3, #99	; 0x63
 8025c94:	d00e      	beq.n	8025cb4 <ts_formatstring+0x52>
 8025c96:	2b25      	cmp	r3, #37	; 0x25
 8025c98:	d058      	beq.n	8025d4c <ts_formatstring+0xea>
 8025c9a:	e05d      	b.n	8025d58 <ts_formatstring+0xf6>
 8025c9c:	2b73      	cmp	r3, #115	; 0x73
 8025c9e:	d02b      	beq.n	8025cf8 <ts_formatstring+0x96>
 8025ca0:	2b73      	cmp	r3, #115	; 0x73
 8025ca2:	dc02      	bgt.n	8025caa <ts_formatstring+0x48>
 8025ca4:	2b69      	cmp	r3, #105	; 0x69
 8025ca6:	d00f      	beq.n	8025cc8 <ts_formatstring+0x66>
 8025ca8:	e056      	b.n	8025d58 <ts_formatstring+0xf6>
 8025caa:	2b75      	cmp	r3, #117	; 0x75
 8025cac:	d037      	beq.n	8025d1e <ts_formatstring+0xbc>
 8025cae:	2b78      	cmp	r3, #120	; 0x78
 8025cb0:	d040      	beq.n	8025d34 <ts_formatstring+0xd2>
 8025cb2:	e051      	b.n	8025d58 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8025cb4:	68fb      	ldr	r3, [r7, #12]
 8025cb6:	1c5a      	adds	r2, r3, #1
 8025cb8:	60fa      	str	r2, [r7, #12]
 8025cba:	687a      	ldr	r2, [r7, #4]
 8025cbc:	1d11      	adds	r1, r2, #4
 8025cbe:	6079      	str	r1, [r7, #4]
 8025cc0:	6812      	ldr	r2, [r2, #0]
 8025cc2:	b2d2      	uxtb	r2, r2
 8025cc4:	701a      	strb	r2, [r3, #0]
				break;
 8025cc6:	e047      	b.n	8025d58 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8025cc8:	687b      	ldr	r3, [r7, #4]
 8025cca:	1d1a      	adds	r2, r3, #4
 8025ccc:	607a      	str	r2, [r7, #4]
 8025cce:	681b      	ldr	r3, [r3, #0]
 8025cd0:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8025cd2:	69fb      	ldr	r3, [r7, #28]
 8025cd4:	2b00      	cmp	r3, #0
 8025cd6:	da07      	bge.n	8025ce8 <ts_formatstring+0x86>
					{
						val *= -1;
 8025cd8:	69fb      	ldr	r3, [r7, #28]
 8025cda:	425b      	negs	r3, r3
 8025cdc:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8025cde:	68fb      	ldr	r3, [r7, #12]
 8025ce0:	1c5a      	adds	r2, r3, #1
 8025ce2:	60fa      	str	r2, [r7, #12]
 8025ce4:	222d      	movs	r2, #45	; 0x2d
 8025ce6:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8025ce8:	69f9      	ldr	r1, [r7, #28]
 8025cea:	f107 030c 	add.w	r3, r7, #12
 8025cee:	220a      	movs	r2, #10
 8025cf0:	4618      	mov	r0, r3
 8025cf2:	f7ff ff6d 	bl	8025bd0 <ts_itoa>
				}
				break;
 8025cf6:	e02f      	b.n	8025d58 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8025cf8:	687b      	ldr	r3, [r7, #4]
 8025cfa:	1d1a      	adds	r2, r3, #4
 8025cfc:	607a      	str	r2, [r7, #4]
 8025cfe:	681b      	ldr	r3, [r3, #0]
 8025d00:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8025d02:	e007      	b.n	8025d14 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8025d04:	68fb      	ldr	r3, [r7, #12]
 8025d06:	1c5a      	adds	r2, r3, #1
 8025d08:	60fa      	str	r2, [r7, #12]
 8025d0a:	69ba      	ldr	r2, [r7, #24]
 8025d0c:	1c51      	adds	r1, r2, #1
 8025d0e:	61b9      	str	r1, [r7, #24]
 8025d10:	7812      	ldrb	r2, [r2, #0]
 8025d12:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8025d14:	69bb      	ldr	r3, [r7, #24]
 8025d16:	781b      	ldrb	r3, [r3, #0]
 8025d18:	2b00      	cmp	r3, #0
 8025d1a:	d1f3      	bne.n	8025d04 <ts_formatstring+0xa2>
					}
				}
				break;
 8025d1c:	e01c      	b.n	8025d58 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8025d1e:	687b      	ldr	r3, [r7, #4]
 8025d20:	1d1a      	adds	r2, r3, #4
 8025d22:	607a      	str	r2, [r7, #4]
 8025d24:	6819      	ldr	r1, [r3, #0]
 8025d26:	f107 030c 	add.w	r3, r7, #12
 8025d2a:	220a      	movs	r2, #10
 8025d2c:	4618      	mov	r0, r3
 8025d2e:	f7ff ff4f 	bl	8025bd0 <ts_itoa>
				break;
 8025d32:	e011      	b.n	8025d58 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8025d34:	687b      	ldr	r3, [r7, #4]
 8025d36:	1d1a      	adds	r2, r3, #4
 8025d38:	607a      	str	r2, [r7, #4]
 8025d3a:	681b      	ldr	r3, [r3, #0]
 8025d3c:	4619      	mov	r1, r3
 8025d3e:	f107 030c 	add.w	r3, r7, #12
 8025d42:	2210      	movs	r2, #16
 8025d44:	4618      	mov	r0, r3
 8025d46:	f7ff ff43 	bl	8025bd0 <ts_itoa>
				break;
 8025d4a:	e005      	b.n	8025d58 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8025d4c:	68fb      	ldr	r3, [r7, #12]
 8025d4e:	1c5a      	adds	r2, r3, #1
 8025d50:	60fa      	str	r2, [r7, #12]
 8025d52:	2225      	movs	r2, #37	; 0x25
 8025d54:	701a      	strb	r2, [r3, #0]
				  break;
 8025d56:	bf00      	nop
			}
			fmt++;
 8025d58:	68bb      	ldr	r3, [r7, #8]
 8025d5a:	3301      	adds	r3, #1
 8025d5c:	60bb      	str	r3, [r7, #8]
 8025d5e:	e007      	b.n	8025d70 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8025d60:	68fb      	ldr	r3, [r7, #12]
 8025d62:	1c5a      	adds	r2, r3, #1
 8025d64:	60fa      	str	r2, [r7, #12]
 8025d66:	68ba      	ldr	r2, [r7, #8]
 8025d68:	1c51      	adds	r1, r2, #1
 8025d6a:	60b9      	str	r1, [r7, #8]
 8025d6c:	7812      	ldrb	r2, [r2, #0]
 8025d6e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8025d70:	68bb      	ldr	r3, [r7, #8]
 8025d72:	781b      	ldrb	r3, [r3, #0]
 8025d74:	2b00      	cmp	r3, #0
 8025d76:	f47f af7d 	bne.w	8025c74 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8025d7a:	68fb      	ldr	r3, [r7, #12]
 8025d7c:	2200      	movs	r2, #0
 8025d7e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8025d80:	68fb      	ldr	r3, [r7, #12]
 8025d82:	461a      	mov	r2, r3
 8025d84:	697b      	ldr	r3, [r7, #20]
 8025d86:	1ad3      	subs	r3, r2, r3
}
 8025d88:	4618      	mov	r0, r3
 8025d8a:	3720      	adds	r7, #32
 8025d8c:	46bd      	mov	sp, r7
 8025d8e:	bd80      	pop	{r7, pc}

08025d90 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8025d90:	b480      	push	{r7}
 8025d92:	b085      	sub	sp, #20
 8025d94:	af00      	add	r7, sp, #0
 8025d96:	6078      	str	r0, [r7, #4]
 8025d98:	6039      	str	r1, [r7, #0]
	int length = 0;
 8025d9a:	2300      	movs	r3, #0
 8025d9c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8025d9e:	e081      	b.n	8025ea4 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8025da0:	687b      	ldr	r3, [r7, #4]
 8025da2:	781b      	ldrb	r3, [r3, #0]
 8025da4:	2b25      	cmp	r3, #37	; 0x25
 8025da6:	d177      	bne.n	8025e98 <ts_formatlength+0x108>
		{
			++fmt;
 8025da8:	687b      	ldr	r3, [r7, #4]
 8025daa:	3301      	adds	r3, #1
 8025dac:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8025dae:	687b      	ldr	r3, [r7, #4]
 8025db0:	781b      	ldrb	r3, [r3, #0]
 8025db2:	3b58      	subs	r3, #88	; 0x58
 8025db4:	2b20      	cmp	r3, #32
 8025db6:	d86a      	bhi.n	8025e8e <ts_formatlength+0xfe>
 8025db8:	a201      	add	r2, pc, #4	; (adr r2, 8025dc0 <ts_formatlength+0x30>)
 8025dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025dbe:	bf00      	nop
 8025dc0:	08025e81 	.word	0x08025e81
 8025dc4:	08025e8f 	.word	0x08025e8f
 8025dc8:	08025e8f 	.word	0x08025e8f
 8025dcc:	08025e8f 	.word	0x08025e8f
 8025dd0:	08025e8f 	.word	0x08025e8f
 8025dd4:	08025e8f 	.word	0x08025e8f
 8025dd8:	08025e8f 	.word	0x08025e8f
 8025ddc:	08025e8f 	.word	0x08025e8f
 8025de0:	08025e8f 	.word	0x08025e8f
 8025de4:	08025e8f 	.word	0x08025e8f
 8025de8:	08025e8f 	.word	0x08025e8f
 8025dec:	08025e45 	.word	0x08025e45
 8025df0:	08025e53 	.word	0x08025e53
 8025df4:	08025e8f 	.word	0x08025e8f
 8025df8:	08025e8f 	.word	0x08025e8f
 8025dfc:	08025e8f 	.word	0x08025e8f
 8025e00:	08025e8f 	.word	0x08025e8f
 8025e04:	08025e53 	.word	0x08025e53
 8025e08:	08025e8f 	.word	0x08025e8f
 8025e0c:	08025e8f 	.word	0x08025e8f
 8025e10:	08025e8f 	.word	0x08025e8f
 8025e14:	08025e8f 	.word	0x08025e8f
 8025e18:	08025e8f 	.word	0x08025e8f
 8025e1c:	08025e8f 	.word	0x08025e8f
 8025e20:	08025e8f 	.word	0x08025e8f
 8025e24:	08025e8f 	.word	0x08025e8f
 8025e28:	08025e8f 	.word	0x08025e8f
 8025e2c:	08025e61 	.word	0x08025e61
 8025e30:	08025e8f 	.word	0x08025e8f
 8025e34:	08025e53 	.word	0x08025e53
 8025e38:	08025e8f 	.word	0x08025e8f
 8025e3c:	08025e8f 	.word	0x08025e8f
 8025e40:	08025e81 	.word	0x08025e81
			{
			  case 'c':
		  		  va_arg(va, int);
 8025e44:	683b      	ldr	r3, [r7, #0]
 8025e46:	3304      	adds	r3, #4
 8025e48:	603b      	str	r3, [r7, #0]
				  ++length;
 8025e4a:	68fb      	ldr	r3, [r7, #12]
 8025e4c:	3301      	adds	r3, #1
 8025e4e:	60fb      	str	r3, [r7, #12]
				  break;
 8025e50:	e025      	b.n	8025e9e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8025e52:	68fb      	ldr	r3, [r7, #12]
 8025e54:	330b      	adds	r3, #11
 8025e56:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8025e58:	683b      	ldr	r3, [r7, #0]
 8025e5a:	3304      	adds	r3, #4
 8025e5c:	603b      	str	r3, [r7, #0]
				  break;
 8025e5e:	e01e      	b.n	8025e9e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8025e60:	683b      	ldr	r3, [r7, #0]
 8025e62:	1d1a      	adds	r2, r3, #4
 8025e64:	603a      	str	r2, [r7, #0]
 8025e66:	681b      	ldr	r3, [r3, #0]
 8025e68:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8025e6a:	e002      	b.n	8025e72 <ts_formatlength+0xe2>
			  			  ++length;
 8025e6c:	68fb      	ldr	r3, [r7, #12]
 8025e6e:	3301      	adds	r3, #1
 8025e70:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8025e72:	68bb      	ldr	r3, [r7, #8]
 8025e74:	1c5a      	adds	r2, r3, #1
 8025e76:	60ba      	str	r2, [r7, #8]
 8025e78:	781b      	ldrb	r3, [r3, #0]
 8025e7a:	2b00      	cmp	r3, #0
 8025e7c:	d1f6      	bne.n	8025e6c <ts_formatlength+0xdc>
			  	  }
				  break;
 8025e7e:	e00e      	b.n	8025e9e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8025e80:	68fb      	ldr	r3, [r7, #12]
 8025e82:	3308      	adds	r3, #8
 8025e84:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8025e86:	683b      	ldr	r3, [r7, #0]
 8025e88:	3304      	adds	r3, #4
 8025e8a:	603b      	str	r3, [r7, #0]
				  break;
 8025e8c:	e007      	b.n	8025e9e <ts_formatlength+0x10e>
			  default:
				  ++length;
 8025e8e:	68fb      	ldr	r3, [r7, #12]
 8025e90:	3301      	adds	r3, #1
 8025e92:	60fb      	str	r3, [r7, #12]
				  break;
 8025e94:	bf00      	nop
 8025e96:	e002      	b.n	8025e9e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8025e98:	68fb      	ldr	r3, [r7, #12]
 8025e9a:	3301      	adds	r3, #1
 8025e9c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	3301      	adds	r3, #1
 8025ea2:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8025ea4:	687b      	ldr	r3, [r7, #4]
 8025ea6:	781b      	ldrb	r3, [r3, #0]
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	f47f af79 	bne.w	8025da0 <ts_formatlength+0x10>
	}
	return length;
 8025eae:	68fb      	ldr	r3, [r7, #12]
}
 8025eb0:	4618      	mov	r0, r3
 8025eb2:	3714      	adds	r7, #20
 8025eb4:	46bd      	mov	sp, r7
 8025eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025eba:	4770      	bx	lr

08025ebc <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8025ebc:	b40e      	push	{r1, r2, r3}
 8025ebe:	b580      	push	{r7, lr}
 8025ec0:	b085      	sub	sp, #20
 8025ec2:	af00      	add	r7, sp, #0
 8025ec4:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8025ec6:	f107 0320 	add.w	r3, r7, #32
 8025eca:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8025ecc:	68ba      	ldr	r2, [r7, #8]
 8025ece:	69f9      	ldr	r1, [r7, #28]
 8025ed0:	6878      	ldr	r0, [r7, #4]
 8025ed2:	f7ff fec6 	bl	8025c62 <ts_formatstring>
 8025ed6:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8025ed8:	68fb      	ldr	r3, [r7, #12]
}
 8025eda:	4618      	mov	r0, r3
 8025edc:	3714      	adds	r7, #20
 8025ede:	46bd      	mov	sp, r7
 8025ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8025ee4:	b003      	add	sp, #12
 8025ee6:	4770      	bx	lr

08025ee8 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8025ee8:	b40f      	push	{r0, r1, r2, r3}
 8025eea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025eee:	b085      	sub	sp, #20
 8025ef0:	af00      	add	r7, sp, #0
	int length = 0;
 8025ef2:	2300      	movs	r3, #0
 8025ef4:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8025ef6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025efa:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8025efc:	6839      	ldr	r1, [r7, #0]
 8025efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025f00:	f7ff ff46 	bl	8025d90 <ts_formatlength>
 8025f04:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8025f06:	466b      	mov	r3, sp
 8025f08:	461e      	mov	r6, r3
		char buf[length];
 8025f0a:	68f9      	ldr	r1, [r7, #12]
 8025f0c:	1e4b      	subs	r3, r1, #1
 8025f0e:	60bb      	str	r3, [r7, #8]
 8025f10:	460b      	mov	r3, r1
 8025f12:	461a      	mov	r2, r3
 8025f14:	f04f 0300 	mov.w	r3, #0
 8025f18:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8025f1c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8025f20:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8025f24:	460b      	mov	r3, r1
 8025f26:	461a      	mov	r2, r3
 8025f28:	f04f 0300 	mov.w	r3, #0
 8025f2c:	00dd      	lsls	r5, r3, #3
 8025f2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8025f32:	00d4      	lsls	r4, r2, #3
 8025f34:	460b      	mov	r3, r1
 8025f36:	3307      	adds	r3, #7
 8025f38:	08db      	lsrs	r3, r3, #3
 8025f3a:	00db      	lsls	r3, r3, #3
 8025f3c:	ebad 0d03 	sub.w	sp, sp, r3
 8025f40:	466b      	mov	r3, sp
 8025f42:	3300      	adds	r3, #0
 8025f44:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8025f46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025f4a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8025f4c:	687b      	ldr	r3, [r7, #4]
 8025f4e:	683a      	ldr	r2, [r7, #0]
 8025f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025f52:	4618      	mov	r0, r3
 8025f54:	f7ff fe85 	bl	8025c62 <ts_formatstring>
 8025f58:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8025f5a:	687b      	ldr	r3, [r7, #4]
 8025f5c:	68fa      	ldr	r2, [r7, #12]
 8025f5e:	4619      	mov	r1, r3
 8025f60:	2001      	movs	r0, #1
 8025f62:	f7ff fc16 	bl	8025792 <_write>
 8025f66:	60f8      	str	r0, [r7, #12]
 8025f68:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8025f6a:	68fb      	ldr	r3, [r7, #12]
}
 8025f6c:	4618      	mov	r0, r3
 8025f6e:	3714      	adds	r7, #20
 8025f70:	46bd      	mov	sp, r7
 8025f72:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025f76:	b004      	add	sp, #16
 8025f78:	4770      	bx	lr
	...

08025f7c <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8025f7c:	b580      	push	{r7, lr}
 8025f7e:	b086      	sub	sp, #24
 8025f80:	af00      	add	r7, sp, #0
 8025f82:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8025f84:	6878      	ldr	r0, [r7, #4]
 8025f86:	f7ea f865 	bl	8010054 <strlen>
 8025f8a:	4603      	mov	r3, r0
 8025f8c:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8025f8e:	2300      	movs	r3, #0
 8025f90:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8025f92:	693a      	ldr	r2, [r7, #16]
 8025f94:	6879      	ldr	r1, [r7, #4]
 8025f96:	2001      	movs	r0, #1
 8025f98:	f7ff fbfb 	bl	8025792 <_write>
 8025f9c:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8025f9e:	2201      	movs	r2, #1
 8025fa0:	490b      	ldr	r1, [pc, #44]	; (8025fd0 <puts+0x54>)
 8025fa2:	2001      	movs	r0, #1
 8025fa4:	f7ff fbf5 	bl	8025792 <_write>
 8025fa8:	4602      	mov	r2, r0
 8025faa:	68fb      	ldr	r3, [r7, #12]
 8025fac:	4413      	add	r3, r2
 8025fae:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8025fb0:	693b      	ldr	r3, [r7, #16]
 8025fb2:	1c5a      	adds	r2, r3, #1
 8025fb4:	68fb      	ldr	r3, [r7, #12]
 8025fb6:	429a      	cmp	r2, r3
 8025fb8:	d102      	bne.n	8025fc0 <puts+0x44>
	{
		res = 0;
 8025fba:	2300      	movs	r3, #0
 8025fbc:	617b      	str	r3, [r7, #20]
 8025fbe:	e002      	b.n	8025fc6 <puts+0x4a>
	}
	else
	{
		res = EOF;
 8025fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8025fc4:	617b      	str	r3, [r7, #20]
	}

	return res;
 8025fc6:	697b      	ldr	r3, [r7, #20]
}
 8025fc8:	4618      	mov	r0, r3
 8025fca:	3718      	adds	r7, #24
 8025fcc:	46bd      	mov	sp, r7
 8025fce:	bd80      	pop	{r7, pc}
 8025fd0:	0802923c 	.word	0x0802923c

08025fd4 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8025fd4:	b580      	push	{r7, lr}
 8025fd6:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8025fd8:	4b11      	ldr	r3, [pc, #68]	; (8026020 <MX_UART5_Init+0x4c>)
 8025fda:	4a12      	ldr	r2, [pc, #72]	; (8026024 <MX_UART5_Init+0x50>)
 8025fdc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 187500;
 8025fde:	4b10      	ldr	r3, [pc, #64]	; (8026020 <MX_UART5_Init+0x4c>)
 8025fe0:	4a11      	ldr	r2, [pc, #68]	; (8026028 <MX_UART5_Init+0x54>)
 8025fe2:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8025fe4:	4b0e      	ldr	r3, [pc, #56]	; (8026020 <MX_UART5_Init+0x4c>)
 8025fe6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8025fea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8025fec:	4b0c      	ldr	r3, [pc, #48]	; (8026020 <MX_UART5_Init+0x4c>)
 8025fee:	2200      	movs	r2, #0
 8025ff0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8025ff2:	4b0b      	ldr	r3, [pc, #44]	; (8026020 <MX_UART5_Init+0x4c>)
 8025ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025ff8:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8025ffa:	4b09      	ldr	r3, [pc, #36]	; (8026020 <MX_UART5_Init+0x4c>)
 8025ffc:	220c      	movs	r2, #12
 8025ffe:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8026000:	4b07      	ldr	r3, [pc, #28]	; (8026020 <MX_UART5_Init+0x4c>)
 8026002:	2200      	movs	r2, #0
 8026004:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8026006:	4b06      	ldr	r3, [pc, #24]	; (8026020 <MX_UART5_Init+0x4c>)
 8026008:	2200      	movs	r2, #0
 802600a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 802600c:	4804      	ldr	r0, [pc, #16]	; (8026020 <MX_UART5_Init+0x4c>)
 802600e:	f7ed fcf9 	bl	8013a04 <HAL_UART_Init>
 8026012:	4603      	mov	r3, r0
 8026014:	2b00      	cmp	r3, #0
 8026016:	d001      	beq.n	802601c <MX_UART5_Init+0x48>
  {
    Error_Handler();
 8026018:	f7fe fc86 	bl	8024928 <Error_Handler>
  }

}
 802601c:	bf00      	nop
 802601e:	bd80      	pop	{r7, pc}
 8026020:	20011f88 	.word	0x20011f88
 8026024:	40005000 	.word	0x40005000
 8026028:	0002dc6c 	.word	0x0002dc6c

0802602c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 802602c:	b580      	push	{r7, lr}
 802602e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8026030:	4b11      	ldr	r3, [pc, #68]	; (8026078 <MX_USART1_UART_Init+0x4c>)
 8026032:	4a12      	ldr	r2, [pc, #72]	; (802607c <MX_USART1_UART_Init+0x50>)
 8026034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8026036:	4b10      	ldr	r3, [pc, #64]	; (8026078 <MX_USART1_UART_Init+0x4c>)
 8026038:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 802603c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 802603e:	4b0e      	ldr	r3, [pc, #56]	; (8026078 <MX_USART1_UART_Init+0x4c>)
 8026040:	2200      	movs	r2, #0
 8026042:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8026044:	4b0c      	ldr	r3, [pc, #48]	; (8026078 <MX_USART1_UART_Init+0x4c>)
 8026046:	2200      	movs	r2, #0
 8026048:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 802604a:	4b0b      	ldr	r3, [pc, #44]	; (8026078 <MX_USART1_UART_Init+0x4c>)
 802604c:	2200      	movs	r2, #0
 802604e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8026050:	4b09      	ldr	r3, [pc, #36]	; (8026078 <MX_USART1_UART_Init+0x4c>)
 8026052:	2208      	movs	r2, #8
 8026054:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8026056:	4b08      	ldr	r3, [pc, #32]	; (8026078 <MX_USART1_UART_Init+0x4c>)
 8026058:	2200      	movs	r2, #0
 802605a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 802605c:	4b06      	ldr	r3, [pc, #24]	; (8026078 <MX_USART1_UART_Init+0x4c>)
 802605e:	2200      	movs	r2, #0
 8026060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8026062:	4805      	ldr	r0, [pc, #20]	; (8026078 <MX_USART1_UART_Init+0x4c>)
 8026064:	f7ed fcce 	bl	8013a04 <HAL_UART_Init>
 8026068:	4603      	mov	r3, r0
 802606a:	2b00      	cmp	r3, #0
 802606c:	d001      	beq.n	8026072 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 802606e:	f7fe fc5b 	bl	8024928 <Error_Handler>
  }

}
 8026072:	bf00      	nop
 8026074:	bd80      	pop	{r7, pc}
 8026076:	bf00      	nop
 8026078:	20011fc8 	.word	0x20011fc8
 802607c:	40011000 	.word	0x40011000

08026080 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8026080:	b580      	push	{r7, lr}
 8026082:	b08c      	sub	sp, #48	; 0x30
 8026084:	af00      	add	r7, sp, #0
 8026086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026088:	f107 031c 	add.w	r3, r7, #28
 802608c:	2200      	movs	r2, #0
 802608e:	601a      	str	r2, [r3, #0]
 8026090:	605a      	str	r2, [r3, #4]
 8026092:	609a      	str	r2, [r3, #8]
 8026094:	60da      	str	r2, [r3, #12]
 8026096:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8026098:	687b      	ldr	r3, [r7, #4]
 802609a:	681b      	ldr	r3, [r3, #0]
 802609c:	4a79      	ldr	r2, [pc, #484]	; (8026284 <HAL_UART_MspInit+0x204>)
 802609e:	4293      	cmp	r3, r2
 80260a0:	f040 8082 	bne.w	80261a8 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80260a4:	2300      	movs	r3, #0
 80260a6:	61bb      	str	r3, [r7, #24]
 80260a8:	4a77      	ldr	r2, [pc, #476]	; (8026288 <HAL_UART_MspInit+0x208>)
 80260aa:	4b77      	ldr	r3, [pc, #476]	; (8026288 <HAL_UART_MspInit+0x208>)
 80260ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80260ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80260b2:	6413      	str	r3, [r2, #64]	; 0x40
 80260b4:	4b74      	ldr	r3, [pc, #464]	; (8026288 <HAL_UART_MspInit+0x208>)
 80260b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80260b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80260bc:	61bb      	str	r3, [r7, #24]
 80260be:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80260c0:	2300      	movs	r3, #0
 80260c2:	617b      	str	r3, [r7, #20]
 80260c4:	4a70      	ldr	r2, [pc, #448]	; (8026288 <HAL_UART_MspInit+0x208>)
 80260c6:	4b70      	ldr	r3, [pc, #448]	; (8026288 <HAL_UART_MspInit+0x208>)
 80260c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80260ca:	f043 0304 	orr.w	r3, r3, #4
 80260ce:	6313      	str	r3, [r2, #48]	; 0x30
 80260d0:	4b6d      	ldr	r3, [pc, #436]	; (8026288 <HAL_UART_MspInit+0x208>)
 80260d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80260d4:	f003 0304 	and.w	r3, r3, #4
 80260d8:	617b      	str	r3, [r7, #20]
 80260da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80260dc:	2300      	movs	r3, #0
 80260de:	613b      	str	r3, [r7, #16]
 80260e0:	4a69      	ldr	r2, [pc, #420]	; (8026288 <HAL_UART_MspInit+0x208>)
 80260e2:	4b69      	ldr	r3, [pc, #420]	; (8026288 <HAL_UART_MspInit+0x208>)
 80260e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80260e6:	f043 0308 	orr.w	r3, r3, #8
 80260ea:	6313      	str	r3, [r2, #48]	; 0x30
 80260ec:	4b66      	ldr	r3, [pc, #408]	; (8026288 <HAL_UART_MspInit+0x208>)
 80260ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80260f0:	f003 0308 	and.w	r3, r3, #8
 80260f4:	613b      	str	r3, [r7, #16]
 80260f6:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80260f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80260fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80260fe:	2302      	movs	r3, #2
 8026100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026102:	2301      	movs	r3, #1
 8026104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026106:	2303      	movs	r3, #3
 8026108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 802610a:	2308      	movs	r3, #8
 802610c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802610e:	f107 031c 	add.w	r3, r7, #28
 8026112:	4619      	mov	r1, r3
 8026114:	485d      	ldr	r0, [pc, #372]	; (802628c <HAL_UART_MspInit+0x20c>)
 8026116:	f7ec f94b 	bl	80123b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 802611a:	2304      	movs	r3, #4
 802611c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802611e:	2302      	movs	r3, #2
 8026120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026122:	2301      	movs	r3, #1
 8026124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026126:	2303      	movs	r3, #3
 8026128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 802612a:	2308      	movs	r3, #8
 802612c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802612e:	f107 031c 	add.w	r3, r7, #28
 8026132:	4619      	mov	r1, r3
 8026134:	4856      	ldr	r0, [pc, #344]	; (8026290 <HAL_UART_MspInit+0x210>)
 8026136:	f7ec f93b 	bl	80123b0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 802613a:	4b56      	ldr	r3, [pc, #344]	; (8026294 <HAL_UART_MspInit+0x214>)
 802613c:	4a56      	ldr	r2, [pc, #344]	; (8026298 <HAL_UART_MspInit+0x218>)
 802613e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8026140:	4b54      	ldr	r3, [pc, #336]	; (8026294 <HAL_UART_MspInit+0x214>)
 8026142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8026146:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8026148:	4b52      	ldr	r3, [pc, #328]	; (8026294 <HAL_UART_MspInit+0x214>)
 802614a:	2240      	movs	r2, #64	; 0x40
 802614c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802614e:	4b51      	ldr	r3, [pc, #324]	; (8026294 <HAL_UART_MspInit+0x214>)
 8026150:	2200      	movs	r2, #0
 8026152:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8026154:	4b4f      	ldr	r3, [pc, #316]	; (8026294 <HAL_UART_MspInit+0x214>)
 8026156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802615a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802615c:	4b4d      	ldr	r3, [pc, #308]	; (8026294 <HAL_UART_MspInit+0x214>)
 802615e:	2200      	movs	r2, #0
 8026160:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8026162:	4b4c      	ldr	r3, [pc, #304]	; (8026294 <HAL_UART_MspInit+0x214>)
 8026164:	2200      	movs	r2, #0
 8026166:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8026168:	4b4a      	ldr	r3, [pc, #296]	; (8026294 <HAL_UART_MspInit+0x214>)
 802616a:	2200      	movs	r2, #0
 802616c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 802616e:	4b49      	ldr	r3, [pc, #292]	; (8026294 <HAL_UART_MspInit+0x214>)
 8026170:	2200      	movs	r2, #0
 8026172:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8026174:	4b47      	ldr	r3, [pc, #284]	; (8026294 <HAL_UART_MspInit+0x214>)
 8026176:	2200      	movs	r2, #0
 8026178:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 802617a:	4846      	ldr	r0, [pc, #280]	; (8026294 <HAL_UART_MspInit+0x214>)
 802617c:	f7ea fa62 	bl	8010644 <HAL_DMA_Init>
 8026180:	4603      	mov	r3, r0
 8026182:	2b00      	cmp	r3, #0
 8026184:	d001      	beq.n	802618a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8026186:	f7fe fbcf 	bl	8024928 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 802618a:	687b      	ldr	r3, [r7, #4]
 802618c:	4a41      	ldr	r2, [pc, #260]	; (8026294 <HAL_UART_MspInit+0x214>)
 802618e:	631a      	str	r2, [r3, #48]	; 0x30
 8026190:	4a40      	ldr	r2, [pc, #256]	; (8026294 <HAL_UART_MspInit+0x214>)
 8026192:	687b      	ldr	r3, [r7, #4]
 8026194:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8026196:	2200      	movs	r2, #0
 8026198:	2105      	movs	r1, #5
 802619a:	2035      	movs	r0, #53	; 0x35
 802619c:	f7ea fa1a 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80261a0:	2035      	movs	r0, #53	; 0x35
 80261a2:	f7ea fa33 	bl	801060c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80261a6:	e068      	b.n	802627a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART1)
 80261a8:	687b      	ldr	r3, [r7, #4]
 80261aa:	681b      	ldr	r3, [r3, #0]
 80261ac:	4a3b      	ldr	r2, [pc, #236]	; (802629c <HAL_UART_MspInit+0x21c>)
 80261ae:	4293      	cmp	r3, r2
 80261b0:	d163      	bne.n	802627a <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART1_CLK_ENABLE();
 80261b2:	2300      	movs	r3, #0
 80261b4:	60fb      	str	r3, [r7, #12]
 80261b6:	4a34      	ldr	r2, [pc, #208]	; (8026288 <HAL_UART_MspInit+0x208>)
 80261b8:	4b33      	ldr	r3, [pc, #204]	; (8026288 <HAL_UART_MspInit+0x208>)
 80261ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80261bc:	f043 0310 	orr.w	r3, r3, #16
 80261c0:	6453      	str	r3, [r2, #68]	; 0x44
 80261c2:	4b31      	ldr	r3, [pc, #196]	; (8026288 <HAL_UART_MspInit+0x208>)
 80261c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80261c6:	f003 0310 	and.w	r3, r3, #16
 80261ca:	60fb      	str	r3, [r7, #12]
 80261cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80261ce:	2300      	movs	r3, #0
 80261d0:	60bb      	str	r3, [r7, #8]
 80261d2:	4a2d      	ldr	r2, [pc, #180]	; (8026288 <HAL_UART_MspInit+0x208>)
 80261d4:	4b2c      	ldr	r3, [pc, #176]	; (8026288 <HAL_UART_MspInit+0x208>)
 80261d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261d8:	f043 0301 	orr.w	r3, r3, #1
 80261dc:	6313      	str	r3, [r2, #48]	; 0x30
 80261de:	4b2a      	ldr	r3, [pc, #168]	; (8026288 <HAL_UART_MspInit+0x208>)
 80261e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261e2:	f003 0301 	and.w	r3, r3, #1
 80261e6:	60bb      	str	r3, [r7, #8]
 80261e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80261ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80261ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80261f0:	2302      	movs	r3, #2
 80261f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80261f4:	2301      	movs	r3, #1
 80261f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80261f8:	2303      	movs	r3, #3
 80261fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80261fc:	2307      	movs	r3, #7
 80261fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026200:	f107 031c 	add.w	r3, r7, #28
 8026204:	4619      	mov	r1, r3
 8026206:	4826      	ldr	r0, [pc, #152]	; (80262a0 <HAL_UART_MspInit+0x220>)
 8026208:	f7ec f8d2 	bl	80123b0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 802620c:	4b25      	ldr	r3, [pc, #148]	; (80262a4 <HAL_UART_MspInit+0x224>)
 802620e:	4a26      	ldr	r2, [pc, #152]	; (80262a8 <HAL_UART_MspInit+0x228>)
 8026210:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8026212:	4b24      	ldr	r3, [pc, #144]	; (80262a4 <HAL_UART_MspInit+0x224>)
 8026214:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8026218:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802621a:	4b22      	ldr	r3, [pc, #136]	; (80262a4 <HAL_UART_MspInit+0x224>)
 802621c:	2240      	movs	r2, #64	; 0x40
 802621e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8026220:	4b20      	ldr	r3, [pc, #128]	; (80262a4 <HAL_UART_MspInit+0x224>)
 8026222:	2200      	movs	r2, #0
 8026224:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8026226:	4b1f      	ldr	r3, [pc, #124]	; (80262a4 <HAL_UART_MspInit+0x224>)
 8026228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802622c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802622e:	4b1d      	ldr	r3, [pc, #116]	; (80262a4 <HAL_UART_MspInit+0x224>)
 8026230:	2200      	movs	r2, #0
 8026232:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8026234:	4b1b      	ldr	r3, [pc, #108]	; (80262a4 <HAL_UART_MspInit+0x224>)
 8026236:	2200      	movs	r2, #0
 8026238:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 802623a:	4b1a      	ldr	r3, [pc, #104]	; (80262a4 <HAL_UART_MspInit+0x224>)
 802623c:	2200      	movs	r2, #0
 802623e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8026240:	4b18      	ldr	r3, [pc, #96]	; (80262a4 <HAL_UART_MspInit+0x224>)
 8026242:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8026246:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8026248:	4b16      	ldr	r3, [pc, #88]	; (80262a4 <HAL_UART_MspInit+0x224>)
 802624a:	2200      	movs	r2, #0
 802624c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 802624e:	4815      	ldr	r0, [pc, #84]	; (80262a4 <HAL_UART_MspInit+0x224>)
 8026250:	f7ea f9f8 	bl	8010644 <HAL_DMA_Init>
 8026254:	4603      	mov	r3, r0
 8026256:	2b00      	cmp	r3, #0
 8026258:	d001      	beq.n	802625e <HAL_UART_MspInit+0x1de>
      Error_Handler();
 802625a:	f7fe fb65 	bl	8024928 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 802625e:	687b      	ldr	r3, [r7, #4]
 8026260:	4a10      	ldr	r2, [pc, #64]	; (80262a4 <HAL_UART_MspInit+0x224>)
 8026262:	631a      	str	r2, [r3, #48]	; 0x30
 8026264:	4a0f      	ldr	r2, [pc, #60]	; (80262a4 <HAL_UART_MspInit+0x224>)
 8026266:	687b      	ldr	r3, [r7, #4]
 8026268:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 802626a:	2200      	movs	r2, #0
 802626c:	2105      	movs	r1, #5
 802626e:	2025      	movs	r0, #37	; 0x25
 8026270:	f7ea f9b0 	bl	80105d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8026274:	2025      	movs	r0, #37	; 0x25
 8026276:	f7ea f9c9 	bl	801060c <HAL_NVIC_EnableIRQ>
}
 802627a:	bf00      	nop
 802627c:	3730      	adds	r7, #48	; 0x30
 802627e:	46bd      	mov	sp, r7
 8026280:	bd80      	pop	{r7, pc}
 8026282:	bf00      	nop
 8026284:	40005000 	.word	0x40005000
 8026288:	40023800 	.word	0x40023800
 802628c:	40020800 	.word	0x40020800
 8026290:	40020c00 	.word	0x40020c00
 8026294:	20012008 	.word	0x20012008
 8026298:	400260b8 	.word	0x400260b8
 802629c:	40011000 	.word	0x40011000
 80262a0:	40020000 	.word	0x40020000
 80262a4:	20011f28 	.word	0x20011f28
 80262a8:	400264b8 	.word	0x400264b8

080262ac <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80262ac:	b580      	push	{r7, lr}
 80262ae:	b082      	sub	sp, #8
 80262b0:	af00      	add	r7, sp, #0
 80262b2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 80262b4:	687b      	ldr	r3, [r7, #4]
 80262b6:	681b      	ldr	r3, [r3, #0]
 80262b8:	4a1b      	ldr	r2, [pc, #108]	; (8026328 <HAL_UART_MspDeInit+0x7c>)
 80262ba:	4293      	cmp	r3, r2
 80262bc:	d117      	bne.n	80262ee <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 80262be:	4a1b      	ldr	r2, [pc, #108]	; (802632c <HAL_UART_MspDeInit+0x80>)
 80262c0:	4b1a      	ldr	r3, [pc, #104]	; (802632c <HAL_UART_MspDeInit+0x80>)
 80262c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80262c8:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 80262ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80262ce:	4818      	ldr	r0, [pc, #96]	; (8026330 <HAL_UART_MspDeInit+0x84>)
 80262d0:	f7ec fa08 	bl	80126e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80262d4:	2104      	movs	r1, #4
 80262d6:	4817      	ldr	r0, [pc, #92]	; (8026334 <HAL_UART_MspDeInit+0x88>)
 80262d8:	f7ec fa04 	bl	80126e4 <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80262dc:	687b      	ldr	r3, [r7, #4]
 80262de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262e0:	4618      	mov	r0, r3
 80262e2:	f7ea fa5d 	bl	80107a0 <HAL_DMA_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80262e6:	2035      	movs	r0, #53	; 0x35
 80262e8:	f7ea f99e 	bl	8010628 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 80262ec:	e017      	b.n	802631e <HAL_UART_MspDeInit+0x72>
  else if(uartHandle->Instance==USART1)
 80262ee:	687b      	ldr	r3, [r7, #4]
 80262f0:	681b      	ldr	r3, [r3, #0]
 80262f2:	4a11      	ldr	r2, [pc, #68]	; (8026338 <HAL_UART_MspDeInit+0x8c>)
 80262f4:	4293      	cmp	r3, r2
 80262f6:	d112      	bne.n	802631e <HAL_UART_MspDeInit+0x72>
    __HAL_RCC_USART1_CLK_DISABLE();
 80262f8:	4a0c      	ldr	r2, [pc, #48]	; (802632c <HAL_UART_MspDeInit+0x80>)
 80262fa:	4b0c      	ldr	r3, [pc, #48]	; (802632c <HAL_UART_MspDeInit+0x80>)
 80262fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80262fe:	f023 0310 	bic.w	r3, r3, #16
 8026302:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8026304:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8026308:	480c      	ldr	r0, [pc, #48]	; (802633c <HAL_UART_MspDeInit+0x90>)
 802630a:	f7ec f9eb 	bl	80126e4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 802630e:	687b      	ldr	r3, [r7, #4]
 8026310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026312:	4618      	mov	r0, r3
 8026314:	f7ea fa44 	bl	80107a0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8026318:	2025      	movs	r0, #37	; 0x25
 802631a:	f7ea f985 	bl	8010628 <HAL_NVIC_DisableIRQ>
} 
 802631e:	bf00      	nop
 8026320:	3708      	adds	r7, #8
 8026322:	46bd      	mov	sp, r7
 8026324:	bd80      	pop	{r7, pc}
 8026326:	bf00      	nop
 8026328:	40005000 	.word	0x40005000
 802632c:	40023800 	.word	0x40023800
 8026330:	40020800 	.word	0x40020800
 8026334:	40020c00 	.word	0x40020c00
 8026338:	40011000 	.word	0x40011000
 802633c:	40020000 	.word	0x40020000

08026340 <read_param>:
extern UART_HandleTypeDef huart5;

static void form_data_parser(char * in_buf);
static uint read_param(char * out_buf, const char * const in_buf, const uint max_len);

static uint read_param(char * out_buf, const char * const  in_buf, const uint max_len){
 8026340:	b480      	push	{r7}
 8026342:	b087      	sub	sp, #28
 8026344:	af00      	add	r7, sp, #0
 8026346:	60f8      	str	r0, [r7, #12]
 8026348:	60b9      	str	r1, [r7, #8]
 802634a:	607a      	str	r2, [r7, #4]
	const char* tmp_p =  in_buf;
 802634c:	68bb      	ldr	r3, [r7, #8]
 802634e:	617b      	str	r3, [r7, #20]
	uint len = 0;
 8026350:	2300      	movs	r3, #0
 8026352:	613b      	str	r3, [r7, #16]
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 8026354:	e00b      	b.n	802636e <read_param+0x2e>
		*out_buf++ = *tmp_p;
 8026356:	68fb      	ldr	r3, [r7, #12]
 8026358:	1c5a      	adds	r2, r3, #1
 802635a:	60fa      	str	r2, [r7, #12]
 802635c:	697a      	ldr	r2, [r7, #20]
 802635e:	7812      	ldrb	r2, [r2, #0]
 8026360:	701a      	strb	r2, [r3, #0]
		len++;
 8026362:	693b      	ldr	r3, [r7, #16]
 8026364:	3301      	adds	r3, #1
 8026366:	613b      	str	r3, [r7, #16]
		tmp_p++;
 8026368:	697b      	ldr	r3, [r7, #20]
 802636a:	3301      	adds	r3, #1
 802636c:	617b      	str	r3, [r7, #20]
	while (*tmp_p != ' ' && *tmp_p != '&' && len <= max_len) {
 802636e:	697b      	ldr	r3, [r7, #20]
 8026370:	781b      	ldrb	r3, [r3, #0]
 8026372:	2b20      	cmp	r3, #32
 8026374:	d007      	beq.n	8026386 <read_param+0x46>
 8026376:	697b      	ldr	r3, [r7, #20]
 8026378:	781b      	ldrb	r3, [r3, #0]
 802637a:	2b26      	cmp	r3, #38	; 0x26
 802637c:	d003      	beq.n	8026386 <read_param+0x46>
 802637e:	693a      	ldr	r2, [r7, #16]
 8026380:	687b      	ldr	r3, [r7, #4]
 8026382:	429a      	cmp	r2, r3
 8026384:	d9e7      	bls.n	8026356 <read_param+0x16>
	}
	return len;
 8026386:	693b      	ldr	r3, [r7, #16]
}
 8026388:	4618      	mov	r0, r3
 802638a:	371c      	adds	r7, #28
 802638c:	46bd      	mov	sp, r7
 802638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026392:	4770      	bx	lr

08026394 <form_data_parser>:



static void form_data_parser(char * in_buf) {
 8026394:	b580      	push	{r7, lr}
 8026396:	b08a      	sub	sp, #40	; 0x28
 8026398:	af00      	add	r7, sp, #0
 802639a:	6078      	str	r0, [r7, #4]
	char par_str[16];
	uint par_len;
	uint baudrate = 0;
 802639c:	2300      	movs	r3, #0
 802639e:	627b      	str	r3, [r7, #36]	; 0x24
	while (*in_buf != ' ') {
 80263a0:	e07d      	b.n	802649e <form_data_parser+0x10a>
		if (*in_buf == '&') {
 80263a2:	687b      	ldr	r3, [r7, #4]
 80263a4:	781b      	ldrb	r3, [r3, #0]
 80263a6:	2b26      	cmp	r3, #38	; 0x26
 80263a8:	d102      	bne.n	80263b0 <form_data_parser+0x1c>
			in_buf++;
 80263aa:	687b      	ldr	r3, [r7, #4]
 80263ac:	3301      	adds	r3, #1
 80263ae:	607b      	str	r3, [r7, #4]
		}
		int param_num = atoi(in_buf);
 80263b0:	6878      	ldr	r0, [r7, #4]
 80263b2:	f000 fa30 	bl	8026816 <atoi>
 80263b6:	6238      	str	r0, [r7, #32]
		if (param_num < 9){
 80263b8:	6a3b      	ldr	r3, [r7, #32]
 80263ba:	2b08      	cmp	r3, #8
 80263bc:	dc03      	bgt.n	80263c6 <form_data_parser+0x32>
			in_buf += 2;
 80263be:	687b      	ldr	r3, [r7, #4]
 80263c0:	3302      	adds	r3, #2
 80263c2:	607b      	str	r3, [r7, #4]
 80263c4:	e002      	b.n	80263cc <form_data_parser+0x38>
		} else {
			in_buf += 3;
 80263c6:	687b      	ldr	r3, [r7, #4]
 80263c8:	3303      	adds	r3, #3
 80263ca:	607b      	str	r3, [r7, #4]
		}
		switch(param_num){
 80263cc:	6a3b      	ldr	r3, [r7, #32]
 80263ce:	2b01      	cmp	r3, #1
 80263d0:	d002      	beq.n	80263d8 <form_data_parser+0x44>
 80263d2:	2b02      	cmp	r3, #2
 80263d4:	d02e      	beq.n	8026434 <form_data_parser+0xa0>
 80263d6:	e062      	b.n	802649e <form_data_parser+0x10a>
		case 1:                                        //IP-address
			par_len = read_param(par_str,in_buf,15);
 80263d8:	f107 030c 	add.w	r3, r7, #12
 80263dc:	220f      	movs	r2, #15
 80263de:	6879      	ldr	r1, [r7, #4]
 80263e0:	4618      	mov	r0, r3
 80263e2:	f7ff ffad 	bl	8026340 <read_param>
 80263e6:	61f8      	str	r0, [r7, #28]
			par_str[par_len] = '\0';
 80263e8:	f107 020c 	add.w	r2, r7, #12
 80263ec:	69fb      	ldr	r3, [r7, #28]
 80263ee:	4413      	add	r3, r2
 80263f0:	2200      	movs	r2, #0
 80263f2:	701a      	strb	r2, [r3, #0]
			ip4_addr_t new_ip;
			ipaddr_aton(par_str,&new_ip);
 80263f4:	f107 0208 	add.w	r2, r7, #8
 80263f8:	f107 030c 	add.w	r3, r7, #12
 80263fc:	4611      	mov	r1, r2
 80263fe:	4618      	mov	r0, r3
 8026400:	f7f4 fbe6 	bl	801abd0 <ip4addr_aton>
			EE_WriteVariable(IP_02_01_ADDR,(uint16_t)(new_ip.addr & 0x0000FFFF));
 8026404:	68bb      	ldr	r3, [r7, #8]
 8026406:	b29b      	uxth	r3, r3
 8026408:	4619      	mov	r1, r3
 802640a:	2001      	movs	r0, #1
 802640c:	f7fd f942 	bl	8023694 <EE_WriteVariable>
			EE_WriteVariable(IP_04_03_ADDR,(uint16_t)((new_ip.addr >> 16) & 0x0000FFFF));
 8026410:	68bb      	ldr	r3, [r7, #8]
 8026412:	0c1b      	lsrs	r3, r3, #16
 8026414:	b29b      	uxth	r3, r3
 8026416:	4619      	mov	r1, r3
 8026418:	2002      	movs	r0, #2
 802641a:	f7fd f93b 	bl	8023694 <EE_WriteVariable>
			netif_set_ipaddr(&gnetif,&new_ip);
 802641e:	f107 0308 	add.w	r3, r7, #8
 8026422:	4619      	mov	r1, r3
 8026424:	4822      	ldr	r0, [pc, #136]	; (80264b0 <form_data_parser+0x11c>)
 8026426:	f7f6 f821 	bl	801c46c <netif_set_ipaddr>
			in_buf += par_len;
 802642a:	687a      	ldr	r2, [r7, #4]
 802642c:	69fb      	ldr	r3, [r7, #28]
 802642e:	4413      	add	r3, r2
 8026430:	607b      	str	r3, [r7, #4]
			break;
 8026432:	e034      	b.n	802649e <form_data_parser+0x10a>
		case 2:                                       //Baudrate
			par_len = read_param(par_str,in_buf,15);
 8026434:	f107 030c 	add.w	r3, r7, #12
 8026438:	220f      	movs	r2, #15
 802643a:	6879      	ldr	r1, [r7, #4]
 802643c:	4618      	mov	r0, r3
 802643e:	f7ff ff7f 	bl	8026340 <read_param>
 8026442:	61f8      	str	r0, [r7, #28]
			par_str[par_len] = '\0';
 8026444:	f107 020c 	add.w	r2, r7, #12
 8026448:	69fb      	ldr	r3, [r7, #28]
 802644a:	4413      	add	r3, r2
 802644c:	2200      	movs	r2, #0
 802644e:	701a      	strb	r2, [r3, #0]
			baudrate = atoi(par_str);
 8026450:	f107 030c 	add.w	r3, r7, #12
 8026454:	4618      	mov	r0, r3
 8026456:	f000 f9de 	bl	8026816 <atoi>
 802645a:	4603      	mov	r3, r0
 802645c:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_UART_DeInit(&huart5);
 802645e:	4815      	ldr	r0, [pc, #84]	; (80264b4 <form_data_parser+0x120>)
 8026460:	f7ed fb1d 	bl	8013a9e <HAL_UART_DeInit>
			huart5.Init.BaudRate = baudrate;
 8026464:	4a13      	ldr	r2, [pc, #76]	; (80264b4 <form_data_parser+0x120>)
 8026466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026468:	6053      	str	r3, [r2, #4]
			EE_WriteVariable(BR_LS_ADDR,(uint16_t)(baudrate & 0x0000FFFF));
 802646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802646c:	b29b      	uxth	r3, r3
 802646e:	4619      	mov	r1, r3
 8026470:	2004      	movs	r0, #4
 8026472:	f7fd f90f 	bl	8023694 <EE_WriteVariable>
			EE_WriteVariable(BR_MS_ADDR,(uint16_t)((baudrate >> 16) & 0x0000FFFF));
 8026476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026478:	0c1b      	lsrs	r3, r3, #16
 802647a:	b29b      	uxth	r3, r3
 802647c:	4619      	mov	r1, r3
 802647e:	2003      	movs	r0, #3
 8026480:	f7fd f908 	bl	8023694 <EE_WriteVariable>
			if (HAL_UART_Init(&huart5) != HAL_OK)
 8026484:	480b      	ldr	r0, [pc, #44]	; (80264b4 <form_data_parser+0x120>)
 8026486:	f7ed fabd 	bl	8013a04 <HAL_UART_Init>
 802648a:	4603      	mov	r3, r0
 802648c:	2b00      	cmp	r3, #0
 802648e:	d001      	beq.n	8026494 <form_data_parser+0x100>
			{
			   Error_Handler();
 8026490:	f7fe fa4a 	bl	8024928 <Error_Handler>
			}
			in_buf += par_len;
 8026494:	687a      	ldr	r2, [r7, #4]
 8026496:	69fb      	ldr	r3, [r7, #28]
 8026498:	4413      	add	r3, r2
 802649a:	607b      	str	r3, [r7, #4]
			break;
 802649c:	bf00      	nop
	while (*in_buf != ' ') {
 802649e:	687b      	ldr	r3, [r7, #4]
 80264a0:	781b      	ldrb	r3, [r3, #0]
 80264a2:	2b20      	cmp	r3, #32
 80264a4:	f47f af7d 	bne.w	80263a2 <form_data_parser+0xe>
		}
	}
}
 80264a8:	bf00      	nop
 80264aa:	3728      	adds	r7, #40	; 0x28
 80264ac:	46bd      	mov	sp, r7
 80264ae:	bd80      	pop	{r7, pc}
 80264b0:	20011e00 	.word	0x20011e00
 80264b4:	20011f88 	.word	0x20011f88

080264b8 <Web_thread>:

void Web_thread(void *arg) {
 80264b8:	b590      	push	{r4, r7, lr}
 80264ba:	b091      	sub	sp, #68	; 0x44
 80264bc:	af02      	add	r7, sp, #8
 80264be:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	struct netbuf *inbuf;
	struct netconn *newconn;
	struct netconn *arg_conn;
	arg_conn = (struct netconn *) arg;
 80264c0:	687b      	ldr	r3, [r7, #4]
 80264c2:	637b      	str	r3, [r7, #52]	; 0x34
	u16_t buflen;
	char* buf;
	struct fs_file file;

	osDelay(1);
 80264c4:	2001      	movs	r0, #1
 80264c6:	f7ee f930 	bl	801472a <osDelay>
	for (;;) {
		err = netconn_accept(arg_conn, &newconn);
 80264ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80264ce:	4619      	mov	r1, r3
 80264d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80264d2:	f7f0 ffdf 	bl	8017494 <netconn_accept>
 80264d6:	4603      	mov	r3, r0
 80264d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (err == ERR_OK) {
 80264dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80264e0:	2b00      	cmp	r3, #0
 80264e2:	d1f2      	bne.n	80264ca <Web_thread+0x12>
			printf("Accept.\n");
 80264e4:	48a0      	ldr	r0, [pc, #640]	; (8026768 <Web_thread+0x2b0>)
 80264e6:	f7ff fd49 	bl	8025f7c <puts>
			recv_err = netconn_recv(newconn, &inbuf);
 80264ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80264ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80264f0:	4611      	mov	r1, r2
 80264f2:	4618      	mov	r0, r3
 80264f4:	f7f1 f8fe 	bl	80176f4 <netconn_recv>
 80264f8:	4603      	mov	r3, r0
 80264fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			if (recv_err == ERR_OK) {
 80264fe:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8026502:	2b00      	cmp	r3, #0
 8026504:	f040 8122 	bne.w	802674c <Web_thread+0x294>
				if (netconn_err(newconn) == ERR_OK) {
 8026508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802650a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 802650e:	2b00      	cmp	r3, #0
 8026510:	f040 811c 	bne.w	802674c <Web_thread+0x294>
					netbuf_data(inbuf, (void**) &buf, &buflen);
 8026514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026516:	f107 0226 	add.w	r2, r7, #38	; 0x26
 802651a:	f107 0120 	add.w	r1, r7, #32
 802651e:	4618      	mov	r0, r3
 8026520:	f7f2 fd8e 	bl	8019040 <netbuf_data>
					if ((buflen >= 5) && (strncmp(buf, "GET /", 5) == 0)) {
 8026524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8026526:	2b04      	cmp	r3, #4
 8026528:	f240 8110 	bls.w	802674c <Web_thread+0x294>
 802652c:	6a3b      	ldr	r3, [r7, #32]
 802652e:	2205      	movs	r2, #5
 8026530:	498e      	ldr	r1, [pc, #568]	; (802676c <Web_thread+0x2b4>)
 8026532:	4618      	mov	r0, r3
 8026534:	f000 f9c2 	bl	80268bc <strncmp>
 8026538:	4603      	mov	r3, r0
 802653a:	2b00      	cmp	r3, #0
 802653c:	f040 8106 	bne.w	802674c <Web_thread+0x294>
						buf += 5;
 8026540:	6a3b      	ldr	r3, [r7, #32]
 8026542:	3305      	adds	r3, #5
 8026544:	623b      	str	r3, [r7, #32]
						if ((strncmp((char const *) buf, " ", 1) == 0)
 8026546:	6a3b      	ldr	r3, [r7, #32]
 8026548:	781a      	ldrb	r2, [r3, #0]
 802654a:	4b89      	ldr	r3, [pc, #548]	; (8026770 <Web_thread+0x2b8>)
 802654c:	781b      	ldrb	r3, [r3, #0]
 802654e:	429a      	cmp	r2, r3
 8026550:	d008      	beq.n	8026564 <Web_thread+0xac>
								|| (strncmp((char const *) buf, "index.shtml",
 8026552:	6a3b      	ldr	r3, [r7, #32]
 8026554:	220b      	movs	r2, #11
 8026556:	4987      	ldr	r1, [pc, #540]	; (8026774 <Web_thread+0x2bc>)
 8026558:	4618      	mov	r0, r3
 802655a:	f000 f9af 	bl	80268bc <strncmp>
 802655e:	4603      	mov	r3, r0
 8026560:	2b00      	cmp	r3, #0
 8026562:	d114      	bne.n	802658e <Web_thread+0xd6>
										11) == 0)) {
							fs_open(&file, "/index.shtml");
 8026564:	f107 030c 	add.w	r3, r7, #12
 8026568:	4983      	ldr	r1, [pc, #524]	; (8026778 <Web_thread+0x2c0>)
 802656a:	4618      	mov	r0, r3
 802656c:	f7f2 ff58 	bl	8019420 <fs_open>
							netconn_write(newconn,
 8026570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026572:	68f9      	ldr	r1, [r7, #12]
 8026574:	693b      	ldr	r3, [r7, #16]
 8026576:	461a      	mov	r2, r3
 8026578:	2300      	movs	r3, #0
 802657a:	9300      	str	r3, [sp, #0]
 802657c:	2300      	movs	r3, #0
 802657e:	f7f1 f925 	bl	80177cc <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8026582:	f107 030c 	add.w	r3, r7, #12
 8026586:	4618      	mov	r0, r3
 8026588:	f7f2 ff88 	bl	801949c <fs_close>
 802658c:	e0de      	b.n	802674c <Web_thread+0x294>
						} else if (strncmp((char const *) buf, "img/logo.png",
 802658e:	6a3b      	ldr	r3, [r7, #32]
 8026590:	220c      	movs	r2, #12
 8026592:	497a      	ldr	r1, [pc, #488]	; (802677c <Web_thread+0x2c4>)
 8026594:	4618      	mov	r0, r3
 8026596:	f000 f991 	bl	80268bc <strncmp>
 802659a:	4603      	mov	r3, r0
 802659c:	2b00      	cmp	r3, #0
 802659e:	d114      	bne.n	80265ca <Web_thread+0x112>
								12) == 0) {
							fs_open(&file, "/img/logo.png");
 80265a0:	f107 030c 	add.w	r3, r7, #12
 80265a4:	4976      	ldr	r1, [pc, #472]	; (8026780 <Web_thread+0x2c8>)
 80265a6:	4618      	mov	r0, r3
 80265a8:	f7f2 ff3a 	bl	8019420 <fs_open>
							netconn_write(newconn,
 80265ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80265ae:	68f9      	ldr	r1, [r7, #12]
 80265b0:	693b      	ldr	r3, [r7, #16]
 80265b2:	461a      	mov	r2, r3
 80265b4:	2300      	movs	r3, #0
 80265b6:	9300      	str	r3, [sp, #0]
 80265b8:	2300      	movs	r3, #0
 80265ba:	f7f1 f907 	bl	80177cc <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 80265be:	f107 030c 	add.w	r3, r7, #12
 80265c2:	4618      	mov	r0, r3
 80265c4:	f7f2 ff6a 	bl	801949c <fs_close>
 80265c8:	e0c0      	b.n	802674c <Web_thread+0x294>
						} else if (strncmp((char const *) buf, "img/icon.png",
 80265ca:	6a3b      	ldr	r3, [r7, #32]
 80265cc:	220c      	movs	r2, #12
 80265ce:	496d      	ldr	r1, [pc, #436]	; (8026784 <Web_thread+0x2cc>)
 80265d0:	4618      	mov	r0, r3
 80265d2:	f000 f973 	bl	80268bc <strncmp>
 80265d6:	4603      	mov	r3, r0
 80265d8:	2b00      	cmp	r3, #0
 80265da:	d114      	bne.n	8026606 <Web_thread+0x14e>
								12) == 0) {
							fs_open(&file, "/img/icon.png");
 80265dc:	f107 030c 	add.w	r3, r7, #12
 80265e0:	4969      	ldr	r1, [pc, #420]	; (8026788 <Web_thread+0x2d0>)
 80265e2:	4618      	mov	r0, r3
 80265e4:	f7f2 ff1c 	bl	8019420 <fs_open>
							netconn_write(newconn,
 80265e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80265ea:	68f9      	ldr	r1, [r7, #12]
 80265ec:	693b      	ldr	r3, [r7, #16]
 80265ee:	461a      	mov	r2, r3
 80265f0:	2300      	movs	r3, #0
 80265f2:	9300      	str	r3, [sp, #0]
 80265f4:	2300      	movs	r3, #0
 80265f6:	f7f1 f8e9 	bl	80177cc <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 80265fa:	f107 030c 	add.w	r3, r7, #12
 80265fe:	4618      	mov	r0, r3
 8026600:	f7f2 ff4c 	bl	801949c <fs_close>
 8026604:	e0a2      	b.n	802674c <Web_thread+0x294>
						} else if (strncmp((char const *) buf, "style.css", 9)
 8026606:	6a3b      	ldr	r3, [r7, #32]
 8026608:	2209      	movs	r2, #9
 802660a:	4960      	ldr	r1, [pc, #384]	; (802678c <Web_thread+0x2d4>)
 802660c:	4618      	mov	r0, r3
 802660e:	f000 f955 	bl	80268bc <strncmp>
 8026612:	4603      	mov	r3, r0
 8026614:	2b00      	cmp	r3, #0
 8026616:	d114      	bne.n	8026642 <Web_thread+0x18a>
								== 0) {
							fs_open(&file, "/style.css");
 8026618:	f107 030c 	add.w	r3, r7, #12
 802661c:	495c      	ldr	r1, [pc, #368]	; (8026790 <Web_thread+0x2d8>)
 802661e:	4618      	mov	r0, r3
 8026620:	f7f2 fefe 	bl	8019420 <fs_open>
							netconn_write(newconn,
 8026624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026626:	68f9      	ldr	r1, [r7, #12]
 8026628:	693b      	ldr	r3, [r7, #16]
 802662a:	461a      	mov	r2, r3
 802662c:	2300      	movs	r3, #0
 802662e:	9300      	str	r3, [sp, #0]
 8026630:	2300      	movs	r3, #0
 8026632:	f7f1 f8cb 	bl	80177cc <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8026636:	f107 030c 	add.w	r3, r7, #12
 802663a:	4618      	mov	r0, r3
 802663c:	f7f2 ff2e 	bl	801949c <fs_close>
 8026640:	e084      	b.n	802674c <Web_thread+0x294>
						} else if (strncmp((char const *) buf, "AI.shtml?led=1",
 8026642:	6a3b      	ldr	r3, [r7, #32]
 8026644:	220e      	movs	r2, #14
 8026646:	4953      	ldr	r1, [pc, #332]	; (8026794 <Web_thread+0x2dc>)
 8026648:	4618      	mov	r0, r3
 802664a:	f000 f937 	bl	80268bc <strncmp>
 802664e:	4603      	mov	r3, r0
 8026650:	2b00      	cmp	r3, #0
 8026652:	d105      	bne.n	8026660 <Web_thread+0x1a8>
								14) == 0) {
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8026654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8026658:	484f      	ldr	r0, [pc, #316]	; (8026798 <Web_thread+0x2e0>)
 802665a:	f7ec f958 	bl	801290e <HAL_GPIO_TogglePin>
 802665e:	e075      	b.n	802674c <Web_thread+0x294>
						} else if (strncmp((char const *) buf, "AI.shtml?IP=",
 8026660:	6a3b      	ldr	r3, [r7, #32]
 8026662:	220c      	movs	r2, #12
 8026664:	494d      	ldr	r1, [pc, #308]	; (802679c <Web_thread+0x2e4>)
 8026666:	4618      	mov	r0, r3
 8026668:	f000 f928 	bl	80268bc <strncmp>
 802666c:	4603      	mov	r3, r0
 802666e:	2b00      	cmp	r3, #0
 8026670:	d115      	bne.n	802669e <Web_thread+0x1e6>
								12) == 0) {
							sprintf(PAGE_BODY, "%s%s", PAGE_HEADER,
 8026672:	484b      	ldr	r0, [pc, #300]	; (80267a0 <Web_thread+0x2e8>)
 8026674:	f7f4 fbec 	bl	801ae50 <ip4addr_ntoa>
 8026678:	4603      	mov	r3, r0
 802667a:	4a4a      	ldr	r2, [pc, #296]	; (80267a4 <Web_thread+0x2ec>)
 802667c:	494a      	ldr	r1, [pc, #296]	; (80267a8 <Web_thread+0x2f0>)
 802667e:	484b      	ldr	r0, [pc, #300]	; (80267ac <Web_thread+0x2f4>)
 8026680:	f7ff fc1c 	bl	8025ebc <siprintf>
									ip4addr_ntoa(&gnetif.ip_addr));
							netconn_write(newconn, PAGE_BODY,
 8026684:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8026686:	4849      	ldr	r0, [pc, #292]	; (80267ac <Web_thread+0x2f4>)
 8026688:	f7e9 fce4 	bl	8010054 <strlen>
 802668c:	4602      	mov	r2, r0
 802668e:	2300      	movs	r3, #0
 8026690:	9300      	str	r3, [sp, #0]
 8026692:	2301      	movs	r3, #1
 8026694:	4945      	ldr	r1, [pc, #276]	; (80267ac <Web_thread+0x2f4>)
 8026696:	4620      	mov	r0, r4
 8026698:	f7f1 f898 	bl	80177cc <netconn_write_partly>
 802669c:	e056      	b.n	802674c <Web_thread+0x294>
									strlen((char* )PAGE_BODY), NETCONN_COPY);
						} else if (strncmp((char const *) buf, "AI.shtml?BR=",
 802669e:	6a3b      	ldr	r3, [r7, #32]
 80266a0:	220c      	movs	r2, #12
 80266a2:	4943      	ldr	r1, [pc, #268]	; (80267b0 <Web_thread+0x2f8>)
 80266a4:	4618      	mov	r0, r3
 80266a6:	f000 f909 	bl	80268bc <strncmp>
 80266aa:	4603      	mov	r3, r0
 80266ac:	2b00      	cmp	r3, #0
 80266ae:	d113      	bne.n	80266d8 <Web_thread+0x220>
								12) == 0) {

							sprintf(PAGE_BODY, "%s%u", PAGE_HEADER,(uint)huart5.Init.BaudRate);
 80266b0:	4b40      	ldr	r3, [pc, #256]	; (80267b4 <Web_thread+0x2fc>)
 80266b2:	685b      	ldr	r3, [r3, #4]
 80266b4:	4a3b      	ldr	r2, [pc, #236]	; (80267a4 <Web_thread+0x2ec>)
 80266b6:	4940      	ldr	r1, [pc, #256]	; (80267b8 <Web_thread+0x300>)
 80266b8:	483c      	ldr	r0, [pc, #240]	; (80267ac <Web_thread+0x2f4>)
 80266ba:	f7ff fbff 	bl	8025ebc <siprintf>
							netconn_write(newconn, PAGE_BODY,
 80266be:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80266c0:	483a      	ldr	r0, [pc, #232]	; (80267ac <Web_thread+0x2f4>)
 80266c2:	f7e9 fcc7 	bl	8010054 <strlen>
 80266c6:	4602      	mov	r2, r0
 80266c8:	2300      	movs	r3, #0
 80266ca:	9300      	str	r3, [sp, #0]
 80266cc:	2301      	movs	r3, #1
 80266ce:	4937      	ldr	r1, [pc, #220]	; (80267ac <Web_thread+0x2f4>)
 80266d0:	4620      	mov	r0, r4
 80266d2:	f7f1 f87b 	bl	80177cc <netconn_write_partly>
 80266d6:	e039      	b.n	802674c <Web_thread+0x294>
									strlen((char* )PAGE_BODY), NETCONN_COPY);
						} else if (*buf == '?') {
 80266d8:	6a3b      	ldr	r3, [r7, #32]
 80266da:	781b      	ldrb	r3, [r3, #0]
 80266dc:	2b3f      	cmp	r3, #63	; 0x3f
 80266de:	d11b      	bne.n	8026718 <Web_thread+0x260>
							form_data_parser(++buf);
 80266e0:	6a3b      	ldr	r3, [r7, #32]
 80266e2:	3301      	adds	r3, #1
 80266e4:	623b      	str	r3, [r7, #32]
 80266e6:	6a3b      	ldr	r3, [r7, #32]
 80266e8:	4618      	mov	r0, r3
 80266ea:	f7ff fe53 	bl	8026394 <form_data_parser>
							fs_open(&file, "/index.shtml");
 80266ee:	f107 030c 	add.w	r3, r7, #12
 80266f2:	4921      	ldr	r1, [pc, #132]	; (8026778 <Web_thread+0x2c0>)
 80266f4:	4618      	mov	r0, r3
 80266f6:	f7f2 fe93 	bl	8019420 <fs_open>
							netconn_write(newconn,
 80266fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80266fc:	68f9      	ldr	r1, [r7, #12]
 80266fe:	693b      	ldr	r3, [r7, #16]
 8026700:	461a      	mov	r2, r3
 8026702:	2300      	movs	r3, #0
 8026704:	9300      	str	r3, [sp, #0]
 8026706:	2300      	movs	r3, #0
 8026708:	f7f1 f860 	bl	80177cc <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 802670c:	f107 030c 	add.w	r3, r7, #12
 8026710:	4618      	mov	r0, r3
 8026712:	f7f2 fec3 	bl	801949c <fs_close>
 8026716:	e019      	b.n	802674c <Web_thread+0x294>
						} else {
							fs_open(&file, "/404.html");
 8026718:	f107 030c 	add.w	r3, r7, #12
 802671c:	4927      	ldr	r1, [pc, #156]	; (80267bc <Web_thread+0x304>)
 802671e:	4618      	mov	r0, r3
 8026720:	f7f2 fe7e 	bl	8019420 <fs_open>
							netconn_write(newconn,
 8026724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026726:	68f9      	ldr	r1, [r7, #12]
 8026728:	693b      	ldr	r3, [r7, #16]
 802672a:	461a      	mov	r2, r3
 802672c:	2300      	movs	r3, #0
 802672e:	9300      	str	r3, [sp, #0]
 8026730:	2300      	movs	r3, #0
 8026732:	f7f1 f84b 	bl	80177cc <netconn_write_partly>
									(const unsigned char* )(file.data),
									(size_t )file.len, NETCONN_NOCOPY);
							fs_close(&file);
 8026736:	f107 030c 	add.w	r3, r7, #12
 802673a:	4618      	mov	r0, r3
 802673c:	f7f2 feae 	bl	801949c <fs_close>
							printf("File not found\n");
 8026740:	481f      	ldr	r0, [pc, #124]	; (80267c0 <Web_thread+0x308>)
 8026742:	f7ff fc1b 	bl	8025f7c <puts>
							osDelay(1);
 8026746:	2001      	movs	r0, #1
 8026748:	f7ed ffef 	bl	801472a <osDelay>
						}
					}
				}
			}
			netconn_close(newconn);
 802674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802674e:	4618      	mov	r0, r3
 8026750:	f7f1 f8e4 	bl	801791c <netconn_close>
			netbuf_delete(inbuf);
 8026754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026756:	4618      	mov	r0, r3
 8026758:	f7f2 fc52 	bl	8019000 <netbuf_delete>
			netconn_delete(newconn);
 802675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802675e:	4618      	mov	r0, r3
 8026760:	f7f0 fe0e 	bl	8017380 <netconn_delete>
		err = netconn_accept(arg_conn, &newconn);
 8026764:	e6b1      	b.n	80264ca <Web_thread+0x12>
 8026766:	bf00      	nop
 8026768:	08029240 	.word	0x08029240
 802676c:	08029248 	.word	0x08029248
 8026770:	08029250 	.word	0x08029250
 8026774:	08029254 	.word	0x08029254
 8026778:	08029260 	.word	0x08029260
 802677c:	08029270 	.word	0x08029270
 8026780:	08029280 	.word	0x08029280
 8026784:	08029290 	.word	0x08029290
 8026788:	080292a0 	.word	0x080292a0
 802678c:	080292b0 	.word	0x080292b0
 8026790:	080292bc 	.word	0x080292bc
 8026794:	080292c8 	.word	0x080292c8
 8026798:	40020400 	.word	0x40020400
 802679c:	080292d8 	.word	0x080292d8
 80267a0:	20011e04 	.word	0x20011e04
 80267a4:	0802b71c 	.word	0x0802b71c
 80267a8:	080292e8 	.word	0x080292e8
 80267ac:	20009eb4 	.word	0x20009eb4
 80267b0:	080292f0 	.word	0x080292f0
 80267b4:	20011f88 	.word	0x20011f88
 80267b8:	08029300 	.word	0x08029300
 80267bc:	08029308 	.word	0x08029308
 80267c0:	08029314 	.word	0x08029314

080267c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80267c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80267fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80267c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80267ca:	e003      	b.n	80267d4 <LoopCopyDataInit>

080267cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80267cc:	4b0c      	ldr	r3, [pc, #48]	; (8026800 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80267ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80267d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80267d2:	3104      	adds	r1, #4

080267d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80267d4:	480b      	ldr	r0, [pc, #44]	; (8026804 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80267d6:	4b0c      	ldr	r3, [pc, #48]	; (8026808 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80267d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80267da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80267dc:	d3f6      	bcc.n	80267cc <CopyDataInit>
  ldr  r2, =_sbss
 80267de:	4a0b      	ldr	r2, [pc, #44]	; (802680c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80267e0:	e002      	b.n	80267e8 <LoopFillZerobss>

080267e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80267e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80267e4:	f842 3b04 	str.w	r3, [r2], #4

080267e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80267e8:	4b09      	ldr	r3, [pc, #36]	; (8026810 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80267ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80267ec:	d3f9      	bcc.n	80267e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80267ee:	f7fe ffef 	bl	80257d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80267f2:	f000 f815 	bl	8026820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80267f6:	f7fd ffd3 	bl	80247a0 <main>
  bx  lr    
 80267fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80267fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8026800:	0802b8a4 	.word	0x0802b8a4
  ldr  r0, =_sdata
 8026804:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8026808:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 802680c:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8026810:	20012068 	.word	0x20012068

08026814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8026814:	e7fe      	b.n	8026814 <ADC_IRQHandler>

08026816 <atoi>:
 8026816:	220a      	movs	r2, #10
 8026818:	2100      	movs	r1, #0
 802681a:	f000 b8e1 	b.w	80269e0 <strtol>
	...

08026820 <__libc_init_array>:
 8026820:	b570      	push	{r4, r5, r6, lr}
 8026822:	4e0d      	ldr	r6, [pc, #52]	; (8026858 <__libc_init_array+0x38>)
 8026824:	4c0d      	ldr	r4, [pc, #52]	; (802685c <__libc_init_array+0x3c>)
 8026826:	1ba4      	subs	r4, r4, r6
 8026828:	10a4      	asrs	r4, r4, #2
 802682a:	2500      	movs	r5, #0
 802682c:	42a5      	cmp	r5, r4
 802682e:	d109      	bne.n	8026844 <__libc_init_array+0x24>
 8026830:	4e0b      	ldr	r6, [pc, #44]	; (8026860 <__libc_init_array+0x40>)
 8026832:	4c0c      	ldr	r4, [pc, #48]	; (8026864 <__libc_init_array+0x44>)
 8026834:	f000 f90c 	bl	8026a50 <_init>
 8026838:	1ba4      	subs	r4, r4, r6
 802683a:	10a4      	asrs	r4, r4, #2
 802683c:	2500      	movs	r5, #0
 802683e:	42a5      	cmp	r5, r4
 8026840:	d105      	bne.n	802684e <__libc_init_array+0x2e>
 8026842:	bd70      	pop	{r4, r5, r6, pc}
 8026844:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026848:	4798      	blx	r3
 802684a:	3501      	adds	r5, #1
 802684c:	e7ee      	b.n	802682c <__libc_init_array+0xc>
 802684e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026852:	4798      	blx	r3
 8026854:	3501      	adds	r5, #1
 8026856:	e7f2      	b.n	802683e <__libc_init_array+0x1e>
 8026858:	0802b89c 	.word	0x0802b89c
 802685c:	0802b89c 	.word	0x0802b89c
 8026860:	0802b89c 	.word	0x0802b89c
 8026864:	0802b8a0 	.word	0x0802b8a0

08026868 <memcmp>:
 8026868:	b510      	push	{r4, lr}
 802686a:	3901      	subs	r1, #1
 802686c:	4402      	add	r2, r0
 802686e:	4290      	cmp	r0, r2
 8026870:	d101      	bne.n	8026876 <memcmp+0xe>
 8026872:	2000      	movs	r0, #0
 8026874:	bd10      	pop	{r4, pc}
 8026876:	f810 3b01 	ldrb.w	r3, [r0], #1
 802687a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802687e:	42a3      	cmp	r3, r4
 8026880:	d0f5      	beq.n	802686e <memcmp+0x6>
 8026882:	1b18      	subs	r0, r3, r4
 8026884:	bd10      	pop	{r4, pc}

08026886 <memcpy>:
 8026886:	b510      	push	{r4, lr}
 8026888:	1e43      	subs	r3, r0, #1
 802688a:	440a      	add	r2, r1
 802688c:	4291      	cmp	r1, r2
 802688e:	d100      	bne.n	8026892 <memcpy+0xc>
 8026890:	bd10      	pop	{r4, pc}
 8026892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026896:	f803 4f01 	strb.w	r4, [r3, #1]!
 802689a:	e7f7      	b.n	802688c <memcpy+0x6>

0802689c <memset>:
 802689c:	4402      	add	r2, r0
 802689e:	4603      	mov	r3, r0
 80268a0:	4293      	cmp	r3, r2
 80268a2:	d100      	bne.n	80268a6 <memset+0xa>
 80268a4:	4770      	bx	lr
 80268a6:	f803 1b01 	strb.w	r1, [r3], #1
 80268aa:	e7f9      	b.n	80268a0 <memset+0x4>

080268ac <strcpy>:
 80268ac:	4603      	mov	r3, r0
 80268ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80268b2:	f803 2b01 	strb.w	r2, [r3], #1
 80268b6:	2a00      	cmp	r2, #0
 80268b8:	d1f9      	bne.n	80268ae <strcpy+0x2>
 80268ba:	4770      	bx	lr

080268bc <strncmp>:
 80268bc:	b510      	push	{r4, lr}
 80268be:	b16a      	cbz	r2, 80268dc <strncmp+0x20>
 80268c0:	3901      	subs	r1, #1
 80268c2:	1884      	adds	r4, r0, r2
 80268c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80268c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80268cc:	4293      	cmp	r3, r2
 80268ce:	d103      	bne.n	80268d8 <strncmp+0x1c>
 80268d0:	42a0      	cmp	r0, r4
 80268d2:	d001      	beq.n	80268d8 <strncmp+0x1c>
 80268d4:	2b00      	cmp	r3, #0
 80268d6:	d1f5      	bne.n	80268c4 <strncmp+0x8>
 80268d8:	1a98      	subs	r0, r3, r2
 80268da:	bd10      	pop	{r4, pc}
 80268dc:	4610      	mov	r0, r2
 80268de:	bd10      	pop	{r4, pc}

080268e0 <_strtol_l.isra.0>:
 80268e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268e4:	4680      	mov	r8, r0
 80268e6:	4689      	mov	r9, r1
 80268e8:	4692      	mov	sl, r2
 80268ea:	461f      	mov	r7, r3
 80268ec:	468b      	mov	fp, r1
 80268ee:	465d      	mov	r5, fp
 80268f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80268f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80268f6:	f000 f889 	bl	8026a0c <__locale_ctype_ptr_l>
 80268fa:	4420      	add	r0, r4
 80268fc:	7846      	ldrb	r6, [r0, #1]
 80268fe:	f016 0608 	ands.w	r6, r6, #8
 8026902:	d10b      	bne.n	802691c <_strtol_l.isra.0+0x3c>
 8026904:	2c2d      	cmp	r4, #45	; 0x2d
 8026906:	d10b      	bne.n	8026920 <_strtol_l.isra.0+0x40>
 8026908:	782c      	ldrb	r4, [r5, #0]
 802690a:	2601      	movs	r6, #1
 802690c:	f10b 0502 	add.w	r5, fp, #2
 8026910:	b167      	cbz	r7, 802692c <_strtol_l.isra.0+0x4c>
 8026912:	2f10      	cmp	r7, #16
 8026914:	d114      	bne.n	8026940 <_strtol_l.isra.0+0x60>
 8026916:	2c30      	cmp	r4, #48	; 0x30
 8026918:	d00a      	beq.n	8026930 <_strtol_l.isra.0+0x50>
 802691a:	e011      	b.n	8026940 <_strtol_l.isra.0+0x60>
 802691c:	46ab      	mov	fp, r5
 802691e:	e7e6      	b.n	80268ee <_strtol_l.isra.0+0xe>
 8026920:	2c2b      	cmp	r4, #43	; 0x2b
 8026922:	bf04      	itt	eq
 8026924:	782c      	ldrbeq	r4, [r5, #0]
 8026926:	f10b 0502 	addeq.w	r5, fp, #2
 802692a:	e7f1      	b.n	8026910 <_strtol_l.isra.0+0x30>
 802692c:	2c30      	cmp	r4, #48	; 0x30
 802692e:	d127      	bne.n	8026980 <_strtol_l.isra.0+0xa0>
 8026930:	782b      	ldrb	r3, [r5, #0]
 8026932:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8026936:	2b58      	cmp	r3, #88	; 0x58
 8026938:	d14b      	bne.n	80269d2 <_strtol_l.isra.0+0xf2>
 802693a:	786c      	ldrb	r4, [r5, #1]
 802693c:	2710      	movs	r7, #16
 802693e:	3502      	adds	r5, #2
 8026940:	2e00      	cmp	r6, #0
 8026942:	bf0c      	ite	eq
 8026944:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8026948:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 802694c:	2200      	movs	r2, #0
 802694e:	fbb1 fef7 	udiv	lr, r1, r7
 8026952:	4610      	mov	r0, r2
 8026954:	fb07 1c1e 	mls	ip, r7, lr, r1
 8026958:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 802695c:	2b09      	cmp	r3, #9
 802695e:	d811      	bhi.n	8026984 <_strtol_l.isra.0+0xa4>
 8026960:	461c      	mov	r4, r3
 8026962:	42a7      	cmp	r7, r4
 8026964:	dd1d      	ble.n	80269a2 <_strtol_l.isra.0+0xc2>
 8026966:	1c53      	adds	r3, r2, #1
 8026968:	d007      	beq.n	802697a <_strtol_l.isra.0+0x9a>
 802696a:	4586      	cmp	lr, r0
 802696c:	d316      	bcc.n	802699c <_strtol_l.isra.0+0xbc>
 802696e:	d101      	bne.n	8026974 <_strtol_l.isra.0+0x94>
 8026970:	45a4      	cmp	ip, r4
 8026972:	db13      	blt.n	802699c <_strtol_l.isra.0+0xbc>
 8026974:	fb00 4007 	mla	r0, r0, r7, r4
 8026978:	2201      	movs	r2, #1
 802697a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802697e:	e7eb      	b.n	8026958 <_strtol_l.isra.0+0x78>
 8026980:	270a      	movs	r7, #10
 8026982:	e7dd      	b.n	8026940 <_strtol_l.isra.0+0x60>
 8026984:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8026988:	2b19      	cmp	r3, #25
 802698a:	d801      	bhi.n	8026990 <_strtol_l.isra.0+0xb0>
 802698c:	3c37      	subs	r4, #55	; 0x37
 802698e:	e7e8      	b.n	8026962 <_strtol_l.isra.0+0x82>
 8026990:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8026994:	2b19      	cmp	r3, #25
 8026996:	d804      	bhi.n	80269a2 <_strtol_l.isra.0+0xc2>
 8026998:	3c57      	subs	r4, #87	; 0x57
 802699a:	e7e2      	b.n	8026962 <_strtol_l.isra.0+0x82>
 802699c:	f04f 32ff 	mov.w	r2, #4294967295
 80269a0:	e7eb      	b.n	802697a <_strtol_l.isra.0+0x9a>
 80269a2:	1c53      	adds	r3, r2, #1
 80269a4:	d108      	bne.n	80269b8 <_strtol_l.isra.0+0xd8>
 80269a6:	2322      	movs	r3, #34	; 0x22
 80269a8:	f8c8 3000 	str.w	r3, [r8]
 80269ac:	4608      	mov	r0, r1
 80269ae:	f1ba 0f00 	cmp.w	sl, #0
 80269b2:	d107      	bne.n	80269c4 <_strtol_l.isra.0+0xe4>
 80269b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80269b8:	b106      	cbz	r6, 80269bc <_strtol_l.isra.0+0xdc>
 80269ba:	4240      	negs	r0, r0
 80269bc:	f1ba 0f00 	cmp.w	sl, #0
 80269c0:	d00c      	beq.n	80269dc <_strtol_l.isra.0+0xfc>
 80269c2:	b122      	cbz	r2, 80269ce <_strtol_l.isra.0+0xee>
 80269c4:	3d01      	subs	r5, #1
 80269c6:	f8ca 5000 	str.w	r5, [sl]
 80269ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80269ce:	464d      	mov	r5, r9
 80269d0:	e7f9      	b.n	80269c6 <_strtol_l.isra.0+0xe6>
 80269d2:	2430      	movs	r4, #48	; 0x30
 80269d4:	2f00      	cmp	r7, #0
 80269d6:	d1b3      	bne.n	8026940 <_strtol_l.isra.0+0x60>
 80269d8:	2708      	movs	r7, #8
 80269da:	e7b1      	b.n	8026940 <_strtol_l.isra.0+0x60>
 80269dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080269e0 <strtol>:
 80269e0:	4b08      	ldr	r3, [pc, #32]	; (8026a04 <strtol+0x24>)
 80269e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80269e4:	681c      	ldr	r4, [r3, #0]
 80269e6:	4d08      	ldr	r5, [pc, #32]	; (8026a08 <strtol+0x28>)
 80269e8:	6a23      	ldr	r3, [r4, #32]
 80269ea:	2b00      	cmp	r3, #0
 80269ec:	bf08      	it	eq
 80269ee:	462b      	moveq	r3, r5
 80269f0:	9300      	str	r3, [sp, #0]
 80269f2:	4613      	mov	r3, r2
 80269f4:	460a      	mov	r2, r1
 80269f6:	4601      	mov	r1, r0
 80269f8:	4620      	mov	r0, r4
 80269fa:	f7ff ff71 	bl	80268e0 <_strtol_l.isra.0>
 80269fe:	b003      	add	sp, #12
 8026a00:	bd30      	pop	{r4, r5, pc}
 8026a02:	bf00      	nop
 8026a04:	20000050 	.word	0x20000050
 8026a08:	200000b4 	.word	0x200000b4

08026a0c <__locale_ctype_ptr_l>:
 8026a0c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8026a10:	4770      	bx	lr

08026a12 <__ascii_mbtowc>:
 8026a12:	b082      	sub	sp, #8
 8026a14:	b901      	cbnz	r1, 8026a18 <__ascii_mbtowc+0x6>
 8026a16:	a901      	add	r1, sp, #4
 8026a18:	b142      	cbz	r2, 8026a2c <__ascii_mbtowc+0x1a>
 8026a1a:	b14b      	cbz	r3, 8026a30 <__ascii_mbtowc+0x1e>
 8026a1c:	7813      	ldrb	r3, [r2, #0]
 8026a1e:	600b      	str	r3, [r1, #0]
 8026a20:	7812      	ldrb	r2, [r2, #0]
 8026a22:	1c10      	adds	r0, r2, #0
 8026a24:	bf18      	it	ne
 8026a26:	2001      	movne	r0, #1
 8026a28:	b002      	add	sp, #8
 8026a2a:	4770      	bx	lr
 8026a2c:	4610      	mov	r0, r2
 8026a2e:	e7fb      	b.n	8026a28 <__ascii_mbtowc+0x16>
 8026a30:	f06f 0001 	mvn.w	r0, #1
 8026a34:	e7f8      	b.n	8026a28 <__ascii_mbtowc+0x16>

08026a36 <__ascii_wctomb>:
 8026a36:	b149      	cbz	r1, 8026a4c <__ascii_wctomb+0x16>
 8026a38:	2aff      	cmp	r2, #255	; 0xff
 8026a3a:	bf85      	ittet	hi
 8026a3c:	238a      	movhi	r3, #138	; 0x8a
 8026a3e:	6003      	strhi	r3, [r0, #0]
 8026a40:	700a      	strbls	r2, [r1, #0]
 8026a42:	f04f 30ff 	movhi.w	r0, #4294967295
 8026a46:	bf98      	it	ls
 8026a48:	2001      	movls	r0, #1
 8026a4a:	4770      	bx	lr
 8026a4c:	4608      	mov	r0, r1
 8026a4e:	4770      	bx	lr

08026a50 <_init>:
 8026a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026a52:	bf00      	nop
 8026a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026a56:	bc08      	pop	{r3}
 8026a58:	469e      	mov	lr, r3
 8026a5a:	4770      	bx	lr

08026a5c <_fini>:
 8026a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026a5e:	bf00      	nop
 8026a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026a62:	bc08      	pop	{r3}
 8026a64:	469e      	mov	lr, r3
 8026a66:	4770      	bx	lr
